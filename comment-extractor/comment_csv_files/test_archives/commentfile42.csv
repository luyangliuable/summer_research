 SPDX-License-Identifier: GPL-2.0-or-later

-*-linux-c-*-*/

/*

  Copyright (C) 2008 Cezary Jackiewicz <cezary.jackiewicz (at) gmail.com>



  based on MSI driver



  Copyright (C) 2006 Lennart Poettering <mzxreary (at) 0pointer (dot) de>



/*

 * compal-laptop.c - Compal laptop support.

 *

 * This driver exports a few files in /sys/devices/platform/compal-laptop/:

 *   wake_up_XXX   Whether or not we listen to such wake up events (rw)

 *

 * In addition to these platform device attributes the driver

 * registers itself in the Linux backlight control, power_supply, rfkill

 * and hwmon subsystem and is available to userspace under:

 *

 *   /sys/class/backlight/compal-laptop/

 *   /sys/class/power_supply/compal-laptop/

 *   /sys/class/rfkill/rfkillX/

 *   /sys/class/hwmon/hwmonX/

 *

 * Notes on the power_supply battery interface:

 *   - the "minimum" design voltage is *the* design voltage

 *   - the ambient temperature is the average battery temperature

 *     and the value is an educated guess (see commented code below)

 *

 *

 * This driver might work on other laptops produced by Compal. If you

 * want to try it you can pass force=1 as argument to the module which

 * will force it to load even when the DMI data doesn't identify the

 * laptop as compatible.

 *

 * Lots of data available at:

 * http://service1.marasst.com/Compal/JHL90_91/Service%20Manual/

 * JHL90%20service%20manual-Final-0725.pdf

 *

 *

 *

 * Support for the Compal JHL90 added by Roald Frederickx

 * (roald.frederickx@gmail.com):

 * Driver got large revision. Added functionalities: backlight

 * power, wake_on_XXX, a hwmon and power_supply interface.

 *

 * In case this gets merged into the kernel source: I want to dedicate this

 * to Kasper Meerts, the awesome guy who showed me Linux and C!

/* NOTE: currently the wake_on_XXX, hwmon and power_supply interfaces are

 * only enabled on a JHL90 board until it is verified that they work on the

 ======= */

 Defines */

 ======= */

 Doesn't seem to work. Just */

 force the pwm signal to its */

 maximum value instead */

 ======= */

 Structs */

 ======= */

 Fan control */

 0:full on, 1:set by pwm1, 2:control by motherboard */

 Power supply */

 =============== */

 General globals */

 =============== */

/* Support for the wake_on_XXX, hwmon and power_supply interface. Currently

/* Nasty stuff. For some reason the fan control is very un-linear.  I've

 * come up with these values by looping through the possible inputs and

 * watching the output of address 0x4F (do an ec_transaction writing 0x33

 * into 0x4F and read a few bytes from the output, like so:

 *	u8 writeData = 0x33;

 *	ec_transaction(0x4F, &writeData, 1, buffer, 32);

 * That address is labeled "fan1 table information" in the service manual.

 * It should be clear which value in 'buffer' changes). This seems to be

 * related to fan speed. It isn't a proper 'realtime' fan speed value

 * though, because physically stopping or speeding up the fan doesn't

 * change it. It might be the average voltage or current of the pwm output.

 ========================= */

 Hardware access functions */

 ========================= */

 General access */

 Backlight access */

 Fan control access */

 =================== */

 Interface functions */

 =================== */

 Backlight interface */

 Wireless interface */

 Wake_up interface */

 Fan control interface */

 Full speed */

 As set by pwm1 */

 Control by motherboard */

 Temperature interface */

 Labels as in service guide */

 Power supply interface */

 THE design voltage... */

	/* It smees that BAT_TEMP_AVG is a (2's complement?) value showing

	 * the number of degrees, whereas BAT_TEMP is somewhat more

	 * complicated. It looks like this is a negative nember with a

	 * 100/256 divider and an offset of 222. Both were determined

 Ambient, Avg, ... same thing */

 Neither the model name nor manufacturer name work for me. */

 ============== */

 Driver Globals */

 ============== */

 =================================== */

 Initialization & clean-up functions */

 =================================== */

 Keep motherboard in control for now */

	data->curr_pwm = 255; /* Try not to cause a CPU_on_fire exception

 This calls compal_probe */

 Fan control */

 Power supply */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * IBM Real-Time Linux driver

 *

 * Copyright (C) IBM Corporation, 2010

 *

 * Author: Keith Mannthey <kmannth@us.ibm.com>

 *         Vernon Mauery <vernux@us.ibm.com>

 The RTL table as presented by the EBDA: */

 signature should be "_RTL_" */

 platform dependent address */

 platform dependent value */

 to locate "_RTL_" signature do a masked 5-byte integer compare */

 first ensure that we are running on IBM HW */

 Get the address for the Extended BIOS Data Area */

 First word in the EDBA is the Size in KB */

 Remap the whole table */

 search for the _RTL_ signature at the start of the table */

			/* The address, value, width and offset are platform

 do not leave the machine in SMI-free mode */

 unmap, unlink and remove all traces */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * acerhdf - A driver which monitors the temperature

 *           of the aspire one netbook, turns on/off the fan

 *           as soon as the upper/lower threshold is reached.

 *

 * (C) 2009 - Peter Kaestle     peter (a) piie.net

 *                              https://piie.net

 *     2009 Borislav Petkov	bp (a) alien8.de

 *

 * Inspired by and many thanks to:

 *  o acerfand   - Rachel Greenham

 *  o acer_ec.pl - Michael Kurz     michi.kurz (at) googlemail.com

 *               - Petr Tomasek     tomasek (#) etf,cuni,cz

 *               - Carlos Corbacho  cathectic (at) gmail.com

 *  o lkml       - Matthew Garrett

 *               - Borislav Petkov

 *               - Andreas Mohr

/*

 * The driver is started with "kernel mode off" by default. That means, the BIOS

 * is still in control of the fan. In this mode the driver allows to read the

 * temperature of the cpu and a userspace tool may take over control of the fan.

 * If the driver is switched to "kernel mode" (e.g. via module parameter) the

 * driver is in full control of the fan. If you want the module to be started in

 * kernel mode by default, define the following:

/*

 * According to the Atom N270 datasheet,

 * (http://download.intel.com/design/processor/datashts/320032.pdf) the

 * CPU's optimal operating limits denoted in junction temperature as

 * measured by the on-die thermal monitor are within 0 <= Tj <= 90. So,

 * assume 89°C is critical temperature.

/*

 * No matter what value the user puts into the fanon variable, turn on the fan

 * at 80 degree Celsius to prevent hardware damage

/*

 * Maximum interval between two temperature checks is 15 seconds, as the die

 * can get hot really fast under heavy load (plus we shouldn't forget about

 * possible impact of _external_ aggressive sources such as heaters, sun etc.)

/*

 * cmd_off: to switch the fan completely off and check if the fan is off

 *	cmd_auto: to set the BIOS in control of the fan. The BIOS regulates then

 *		the fan speed depending on the temperature

 default register and command to disable fan in manual mode */

 BIOS settings - only used during probe */

 This could be a daughter struct in the above, but not worth the redirect */

 Register addresses and values for different BIOS versions */

 AOA110 */

 AOA150 */

 LT1005u */

 Acer 1410 */

 Acer 1810xx */

 Acer 5755G */

 Acer 521 */

 Acer 531 */

 Acer 751 */

 Acer 753 */

 Acer 1825 */

 Acer Extensa 5420 */

 Acer Aspire 5315 */

 Acer Aspire 5739 */

 Acer TravelMate 7730 */

 Acer Aspire 7551 */

 Acer TravelMate TM8573T */

 Gateway */

 Packard Bell */

 pewpew-terminator */

/*

 * this struct is used to instruct thermal layer to use bang_bang instead of

 * default governor for acerhdf

/*

 * This is the thermal zone callback which does the delayed polling of the fan

 * state. We do check /sysfs-originating settings here in acerhdf_check_param()

 * as late as the polling interval is since we can't do that in the respective

 * accessors of the module parameters.

 if the cooling device is the one from acerhdf bind it */

/*

 * set operation mode;

 * enabled: the thermal layer of the kernel takes care about

 *          the temperature and the fan.

 * disabled: the BIOS takes control of the fan.

 bind callback functions to thermalzone */

/*

 * cooling device callback functions

 * get maximal fan cooling state

 change current fan state - is overwritten when running in kernel mode */

 bind fan callbacks to fan device */

 suspend / resume functionality */

 checks if str begins with start */

 check hardware */

 get BIOS data */

 search BIOS version and vendor in BIOS settings table */

		/*

		 * check if actual hardware BIOS vendor, product and version

		 * IDs start with the strings of BIOS table entry

 Copy control settings from BIOS table before we free it. */

	/*

	 * if started with kernel mode off, prevent the kernel from switching

	 * off the fan

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  ideapad-laptop.c - Lenovo IdeaPad ACPI Extras

 *

 *  Copyright © 2010 Intel Corporation

 *  Copyright © 2010 David Woodhouse <dwmw2@infradead.org>

 Yoga 3 */

 Yoga 700 */

 Legion 5 */

 0x21 */

 protects the DYTC interface */

/*

 * ACPI Helpers

 in ms */

/*

 * debugfs

/*

 * sysfs

/*

 * DYTC Platform profile

 To get DYTC status - enable/revision */

 To enable/disable IC function mode */

 To get current IC function and mode */

 To reset back to default */

 Bit        8 - 0 = disabled, 1 = enabled */

 Bits 16 - 27 - sub revision */

 Bits 28 - 31 - revision */

 Bits  8-11 - function setting */

 Bits 12-15 - mode setting */

 Bits 12-15 - function setting */

 Bits 16-19 - mode setting */

 Bit     20 - 1 = on, 0 = off */

 Function = 0, standard mode */

 Function = 1, lap mode */

 Function = 11, desk mode */

 High power mode aka performance */

 Low power mode aka quiet */

 Default mode aka balanced */

 Unknown mode */

 Unknown profile */

/*

 * dytc_profile_get: Function to register with platform_profile

 * handler. Returns current platform profile.

/*

 * Helper function - check if we are in CQL mode and if we are

 *  - disable CQL,

 *  - run the command

 *  - enable CQL

 *  If not in CQL mode, just run the command

 Determine if we are in CQL mode. This alters the commands we do */

 Check if we're OK to return immediately */

 Check return condition after we've restored CQL state */

/*

 * dytc_profile_set: Function to register with platform_profile

 * handler. Sets current platform profile.

 To get back to balanced mode we just issue a reset command */

 Determine if we are in CQL mode. This alters the commands we do */

 Success - update current profile */

 Ideapad 5 Pro 16ACH6 */

 For all other errors we can flag the failure */

 Check DYTC is enabled and supports mode setting */

 Setup supported modes */

 Create platform_profile structure and register */

 Ensure initial values are correct */

/*

 * Rfkill

 Force to enable bluetooth when no_bt_rfkill=1 */

/*

 * Platform device

/*

 * input device

 Z570 */

 Z580 */

 Thermal Management button */

 OneKey Theater button */

/*

 * backlight

 if we control brightness via acpi video driver */

/*

 * keyboard backlight

/*

 * module init/exit

 Without reading from EC touchpad LED doesn't switch state */

		/*

		 * Some IdeaPads don't really turn off touchpad - they only

		 * switch the LED state. We (de)activate KBC AUX port to turn

		 * touchpad off and on. We send KEY_TOUCHPAD_OFF and

		 * KEY_TOUCHPAD_ON to not to get out of sync with LED

			/*

			 * This event gets send on a Yoga 300-11IBR when the EC

			 * believes that the device has changed between laptop/

			 * tent/stand/tablet mode. The EC relies on getting

			 * angle info from 2 accelerometers through a special

			 * windows service calling a DSM on the DUAL250E ACPI-

			 * device. Linux does not do this, making the laptop/

			 * tent/stand/tablet mode info unreliable, so we simply

			 * ignore these events.

			/*

			 * Some IdeaPads report event 1 every ~20

			 * seconds while on battery power; some

			 * report this when changing to/from tablet

			 * mode; some report this when the keyboard

			 * backlight has changed.

/*

 * Some ideapads have a hardware rfkill switch, but most do not have one.

 * Reading VPCCMD_R_RF always results in 0 on models without a hardware rfkill,

 * switch causing ideapad_laptop to wrongly report all radios as hw-blocked.

 * There used to be a long list of DMI ids for models without a hw rfkill

 * switch here, but that resulted in playing whack a mole.

 * More importantly wrongly reporting the wifi radio as hw-blocked, results in

 * non working wifi. Whereas not reporting it hw-blocked, when it actually is

 * hw-blocked results in an empty SSID list, which is a much more benign

 * failure mode.

 * So the default now is the much safer option of assuming there is no

 * hardware rfkill switch. This default also actually matches most hardware,

 * since having a hw rfkill switch is quite rare on modern hardware, so this

 * also leads to a much shorter list.

 Most ideapads with ELAN0634 touchpad don't use EC touchpad switch */

	/*

	 * On some models without a hw-switch (the yoga 2 13 at least)

	 * VPCCMD_W_RF must be explicitly set to 1 for the wifi to work.

 The same for Touchpad */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2009  Thadeu Lima de Souza Cascardo <cascardo@holoscopio.com>

/*

 * Generic input device code.

/*

 * Accelerometer code for Classmate V4

 sensitivity must be between 1 and 127 */

 0 means 1.5g, 1 means 6g, everything else is wrong */

/*

 * Accelerometer code for Classmate versions prior to V4

/*

 * Tablet mode code.

/*

 * Backlight code.

/*

 * RFKILL code.

 Check if we really need to call cmpc_set_rfkill_wlan */

/*

 * Common backlight and rfkill code.

	/*

	 * If RFKILL is disabled, rfkill_alloc will return ERR_PTR(-ENODEV).

	 * This is OK, however, since all other uses of the device will not

	 * dereference it.

/*

 * Extra keys code.

 NL3: 0x8b (press), 0x9b (release) */

/*

 * General init/exit code.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Acer WMI Laptop Extras

 *

 *  Copyright (C) 2007-2009	Carlos Corbacho <carlos@strangeworlds.co.uk>

 *

 *  Based on acer_acpi:

 *    Copyright (C) 2005-2007	E.M. Smith

 *    Copyright (C) 2007-2008	Carlos Corbacho <cathectic@gmail.com>

/*

 * Magic Number

 * Meaning is unknown - this number is required for writing to ACPI for AMW0

 * (it's also used in acerhk when directly accessing the BIOS)

/*

 * Bit masks for the AMW0 interface

/*

 * Method IDs for WMID interface

/*

 * Acer ACPI method GUIDs

/*

 * Acer ACPI event GUIDs

 WiFi */

 WiFi */

 WiFi */

 BT */

 Backup */

 Arcade */

 P_Key */

 Social networking_Key */

 P_Key for TM8372 */

 Display Switch */

 Touch Pad Toggle */

 Automatic Keyboard background light toggle */

/*

 * GUID3 Get Device Status device flags

 WiFi */

 3G */

 WiMAX */

 BT */

 RF Button */

 Touchpad */

/* Hotkey Customized Setting and Acer Application Status.

 * Set Device Default Value and Report Acer Application Status.

 * When Acer Application starts, it will run this method to inform

 * BIOS/EC that Acer Application is on.

 * App Status

 *	Bit[0]: Launch Manager Status

 *	Bit[1]: ePM Status

 *	Bit[2]: Device Control Status

 *	Bit[3]: Acer Power Button Utility Status

 *	Bit[4]: RF Button Status

 *	Bit[5]: ODD PM Status

 *	Bit[6]: Device Default Value Control

 *	Bit[7]: Hall Sensor Application Status

 Function Number */

 Communication type devices default status */

 Other type devices default status */

 Acer Device Status. LM, ePM, RF Button... */

 Bit mask to app_status */

 Error Code */

 EC Return Value */

 Set Device Status input parameter */

 Function Number */

 Hotkey Number */

 Set Device */

 Volume Value */

 Get Device Status input parameter */

 Function Number */

 Hotkey Number */

 Get Device */

 Get Device Status return value*/

 Error Code */

 EC Return Value */

 Current Device Status */

/*

 * Interface capability flags

/*

 * Interface type flags

 Each low-level interface must define at least some of the following */

 The WMI device type */

 The capabilities this interface provides */

 Private data for the current interface */

 debugfs entries associated with this interface */

 The static interface pointer, points to the currently detected interface */

/*

 * Embedded Controller quirks

 * Some laptops require us to directly access the EC to either enable or query

 * features that are not available through WMI.

 This AMW0 laptop has no bluetooth */

 The Aspire One has a dummy ACPI-WMI interface - disable it */

/*

 * This quirk table is only for Acer/Gateway/Packard Bell family

 * that those machines are supported by acer-wmi driver.

/*

 * This quirk list is for those non-acer machines that have AMW0_GUID1

 * but supported by acer-wmi in past days. Keeping this quirk list here

 * is only for backward compatible. Please do not add new machine to

 * here anymore. Those non-acer machines should be supported by

 * appropriate wmi drivers.

		/*

		 * Note no video_set_backlight_video_vendor, we must use the

		 * acer interface, as there is no native backlight interface.

 Find which quirks are needed for a particular vendor/ model pair */

/*

 * General interface convenience methods

/*

 * AMW0 (V1) interface

 Actually do the set */

 sony-laptop in charge */

	/*

	 * On laptops with this strange GUID (non Acer), normal probing doesn't

	 * work.

	/*

	 * It's ok to use existing buffer for next wmab_execute call.

	 * But we need to kfree(out.pointer) if next wmab_execute fail.

	/*

	 * This appears to be safe to enable, since all Wistron based laptops

	 * appear to use the same EC register for brightness, even if they

	 * differ for wireless, etc

/*

 * New interface (The WMID interface)

 We are looking for OEM-specific Type AAh */

/*

 * WMID Gaming interface

 fan_mode = 1 is used for auto, fan_mode = 2 used for turbo*/

/*

 * Generic Device (interface-independent)

			/*

			 * On some models, some WMID methods don't toggle

			 * properly. For those cases, we want to run the AMW0

			 * method afterwards to be certain we've really toggled

			 * the device state.

	/*

	 * These will all fail silently if the value given is invalid, or the

	 * capability isn't available on the given interface

/*

 * LED device (Mail LED only, no other LEDs known yet)

/*

 * Backlight device

/*

 * Accelerometer device

/*

 *  Predator series turbo button

 Get current state from turbo button */

 Turn off turbo led */

 Set FAN mode to auto */

 Set OC to normal */

 Turn on turbo led */

 Set FAN mode to turbo */

 Set OC to turbo mode */

/*

 * Switch series keyboard dock status

 Docked, traditional clamshell laptop mode */

 Stand-alone tablet */

 Docked, tent mode, keyboard not usable */

/*

 * Rfkill devices

 Launch Manager Deactive */

 Launch Manager Active */

 RF Button Active */

/*

 * debugfs functions

/*

 * Platform device

	/*

	 * The AMW0_GUID1 wmi is not only found on Acer family but also other

	 * machines like Lenovo, Fujitsu and Medion. In the past days,

	 * acer-wmi driver handled those non-Acer machines by quirks list.

	 * But actually acer-wmi driver was loaded on any machines that have

	 * AMW0_GUID1. This behavior is strange because those machines should

	 * be supported by appropriate wmi drivers. e.g. fujitsu-laptop,

	 * ideapad-laptop. So, here checks the machine that has AMW0_GUID1

	 * should be in Acer/Gateway/Packard Bell white list, or it's already

	 * in the past quirk list.

	/*

	 * Detect which ACPI-WMI interface we're using.

 WMID always provides brightness methods */

 Override any initial settings with values from the commandline */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ACPI Sony Notebook Control Driver (SNC and SPIC)

 *

 * Copyright (C) 2004-2005 Stelian Pop <stelian@popies.net>

 * Copyright (C) 2007-2009 Mattia Dongili <malattia@linux.it>

 *

 * Parts of this driver inspired from asus_acpi.c and ibm_acpi.c

 * which are copyrighted by their respective authors.

 *

 * The SNY6001 driver part is based on the sonypi driver which includes

 * material from:

 *

 * Copyright (C) 2001-2005 Stelian Pop <stelian@popies.net>

 *

 * Copyright (C) 2005 Narayanan R S <nars@kadamba.org>

 *

 * Copyright (C) 2001-2002 Alcôve <www.alcove.com>

 *

 * Copyright (C) 2001 Michael Ashley <m.ashley@unsw.edu.au>

 *

 * Copyright (C) 2001 Junichi Morita <jun1m@mars.dti.ne.jp>

 *

 * Copyright (C) 2000 Takaya Kinjo <t-kinjo@tc4.so-net.ne.jp>

 *

 * Copyright (C) 2000 Andrew Tridgell <tridge@valinux.com>

 *

 * Earlier work by Werner Almesberger, Paul `Rusty' Russell and Paul Mackerras.

 = 0 */

 = 0 */

 = 0 */

********** Input Devices ***********/

/* Correspondance table between sonypi events

 * and input layer indexes in the keymap

  0 no event */

  1 SONYPI_EVENT_JOGDIAL_DOWN */

  2 SONYPI_EVENT_JOGDIAL_UP */

  3 SONYPI_EVENT_JOGDIAL_DOWN_PRESSED */

  4 SONYPI_EVENT_JOGDIAL_UP_PRESSED */

  5 SONYPI_EVENT_JOGDIAL_PRESSED */

  6 SONYPI_EVENT_JOGDIAL_RELEASED */

  7 SONYPI_EVENT_CAPTURE_PRESSED */

  8 SONYPI_EVENT_CAPTURE_RELEASED */

  9 SONYPI_EVENT_CAPTURE_PARTIALPRESSED */

 10 SONYPI_EVENT_CAPTURE_PARTIALRELEASED */

 11 SONYPI_EVENT_FNKEY_ESC */

 12 SONYPI_EVENT_FNKEY_F1 */

 13 SONYPI_EVENT_FNKEY_F2 */

 14 SONYPI_EVENT_FNKEY_F3 */

 15 SONYPI_EVENT_FNKEY_F4 */

 16 SONYPI_EVENT_FNKEY_F5 */

 17 SONYPI_EVENT_FNKEY_F6 */

 18 SONYPI_EVENT_FNKEY_F7 */

 19 SONYPI_EVENT_FNKEY_F8 */

 20 SONYPI_EVENT_FNKEY_F9 */

 21 SONYPI_EVENT_FNKEY_F10 */

 22 SONYPI_EVENT_FNKEY_F11 */

 23 SONYPI_EVENT_FNKEY_F12 */

 24 SONYPI_EVENT_FNKEY_1 */

 25 SONYPI_EVENT_FNKEY_2 */

 26 SONYPI_EVENT_FNKEY_D */

 27 SONYPI_EVENT_FNKEY_E */

 28 SONYPI_EVENT_FNKEY_F */

 29 SONYPI_EVENT_FNKEY_S */

 30 SONYPI_EVENT_FNKEY_B */

 31 SONYPI_EVENT_BLUETOOTH_PRESSED */

 32 SONYPI_EVENT_PKEY_P1 */

 33 SONYPI_EVENT_PKEY_P2 */

 34 SONYPI_EVENT_PKEY_P3 */

 35 SONYPI_EVENT_BACK_PRESSED */

 36 SONYPI_EVENT_LID_CLOSED */

 37 SONYPI_EVENT_LID_OPENED */

 38 SONYPI_EVENT_BLUETOOTH_ON */

 39 SONYPI_EVENT_BLUETOOTH_OFF */

 40 SONYPI_EVENT_HELP_PRESSED */

 41 SONYPI_EVENT_FNKEY_ONLY */

 42 SONYPI_EVENT_JOGDIAL_FAST_DOWN */

 43 SONYPI_EVENT_JOGDIAL_FAST_UP */

 44 SONYPI_EVENT_JOGDIAL_FAST_DOWN_PRESSED */

 45 SONYPI_EVENT_JOGDIAL_FAST_UP_PRESSED */

 46 SONYPI_EVENT_JOGDIAL_VFAST_DOWN */

 47 SONYPI_EVENT_JOGDIAL_VFAST_UP */

 48 SONYPI_EVENT_JOGDIAL_VFAST_DOWN_PRESSED */

 49 SONYPI_EVENT_JOGDIAL_VFAST_UP_PRESSED */

 50 SONYPI_EVENT_ZOOM_PRESSED */

 51 SONYPI_EVENT_THUMBPHRASE_PRESSED */

 52 SONYPI_EVENT_MEYE_FACE */

 53 SONYPI_EVENT_MEYE_OPPOSITE */

 54 SONYPI_EVENT_MEMORYSTICK_INSERT */

 55 SONYPI_EVENT_MEMORYSTICK_EJECT */

 56 SONYPI_EVENT_ANYBUTTON_RELEASED */

 57 SONYPI_EVENT_BATTERY_INSERT */

 58 SONYPI_EVENT_BATTERY_REMOVE */

 59 SONYPI_EVENT_FNKEY_RELEASED */

 60 SONYPI_EVENT_WIRELESS_ON */

 61 SONYPI_EVENT_WIRELESS_OFF */

 62 SONYPI_EVENT_ZOOM_IN_PRESSED */

 63 SONYPI_EVENT_ZOOM_OUT_PRESSED */

 64 SONYPI_EVENT_CD_EJECT_PRESSED */

 65 SONYPI_EVENT_MODEKEY_PRESSED */

 66 SONYPI_EVENT_PKEY_P4 */

 67 SONYPI_EVENT_PKEY_P5 */

 68 SONYPI_EVENT_SETTINGKEY_PRESSED */

 69 SONYPI_EVENT_VOLUME_INC_PRESSED */

 70 SONYPI_EVENT_VOLUME_DEC_PRESSED */

 71 SONYPI_EVENT_BRIGHTNESS_PRESSED */

 72 SONYPI_EVENT_MEDIA_PRESSED */

 72 SONYPI_EVENT_VENDOR_PRESSED */

  0 SONYPI_EVENT_CAPTURE_PRESSED */

  1 SONYPI_EVENT_CAPTURE_RELEASED */

  2 SONYPI_EVENT_CAPTURE_PARTIALPRESSED */

  3 SONYPI_EVENT_CAPTURE_PARTIALRELEASED */

  4 SONYPI_EVENT_FNKEY_ESC */

  5 SONYPI_EVENT_FNKEY_F1 */

  6 SONYPI_EVENT_FNKEY_F2 */

  7 SONYPI_EVENT_FNKEY_F3 */

  8 SONYPI_EVENT_FNKEY_F4 */

  9 SONYPI_EVENT_FNKEY_F5 */

 10 SONYPI_EVENT_FNKEY_F6 */

 11 SONYPI_EVENT_FNKEY_F7 */

 12 SONYPI_EVENT_FNKEY_F8 */

 13 SONYPI_EVENT_FNKEY_F9 */

 14 SONYPI_EVENT_FNKEY_F10 */

 15 SONYPI_EVENT_FNKEY_F11 */

 16 SONYPI_EVENT_FNKEY_F12 */

 17 SONYPI_EVENT_FNKEY_1 */

 18 SONYPI_EVENT_FNKEY_2 */

 19 SONYPI_EVENT_FNKEY_D */

 20 SONYPI_EVENT_FNKEY_E */

 21 SONYPI_EVENT_FNKEY_F */

 22 SONYPI_EVENT_FNKEY_S */

 23 SONYPI_EVENT_FNKEY_B */

 24 SONYPI_EVENT_BLUETOOTH_PRESSED */

 25 SONYPI_EVENT_PKEY_P1 */

 26 SONYPI_EVENT_PKEY_P2 */

 27 SONYPI_EVENT_PKEY_P3 */

 28 SONYPI_EVENT_BACK_PRESSED */

 29 SONYPI_EVENT_BLUETOOTH_ON */

 30 SONYPI_EVENT_BLUETOOTH_OFF */

 31 SONYPI_EVENT_HELP_PRESSED */

 32 SONYPI_EVENT_FNKEY_ONLY */

 33 SONYPI_EVENT_JOGDIAL_FAST_DOWN */

 34 SONYPI_EVENT_JOGDIAL_FAST_UP */

 35 SONYPI_EVENT_JOGDIAL_FAST_DOWN_PRESSED */

 36 SONYPI_EVENT_JOGDIAL_FAST_UP_PRESSED */

 37 SONYPI_EVENT_JOGDIAL_VFAST_DOWN */

 38 SONYPI_EVENT_JOGDIAL_VFAST_UP */

 39 SONYPI_EVENT_JOGDIAL_VFAST_DOWN_PRESSED */

 40 SONYPI_EVENT_JOGDIAL_VFAST_UP_PRESSED */

 41 SONYPI_EVENT_ZOOM_PRESSED */

 42 SONYPI_EVENT_THUMBPHRASE_PRESSED */

 43 SONYPI_EVENT_MEYE_FACE */

 44 SONYPI_EVENT_MEYE_OPPOSITE */

 45 SONYPI_EVENT_MEMORYSTICK_INSERT */

 46 SONYPI_EVENT_MEMORYSTICK_EJECT */

 47 SONYPI_EVENT_WIRELESS_ON */

 48 SONYPI_EVENT_WIRELESS_OFF */

 49 SONYPI_EVENT_ZOOM_IN_PRESSED */

 50 SONYPI_EVENT_ZOOM_OUT_PRESSED */

 51 SONYPI_EVENT_CD_EJECT_PRESSED */

 52 SONYPI_EVENT_MODEKEY_PRESSED */

 53 SONYPI_EVENT_PKEY_P4 */

 54 SONYPI_EVENT_PKEY_P5 */

 55 SONYPI_EVENT_SETTINGKEY_PRESSED */

 56 SONYPI_EVENT_VOLUME_INC_PRESSED */

 57 SONYPI_EVENT_VOLUME_DEC_PRESSED */

 58 SONYPI_EVENT_MEDIA_PRESSED */

 59 SONYPI_EVENT_VENDOR_PRESSED */

 release buttons after a short delay if pressed */

 If there is something in the fifo schedule next release. */

 forward event to the input subsystem */

 Nothing, not all VAIOs generate this event */

 report events */

 jog_dev events */

 key_dev events */

		/* if we have a scancode we emit it so we can always

 schedule key release */

 don't run again if already initialized */

 kfifo */

 input keys */

 Initialize the Input Drivers: special keys */

 jogdial */

 to avoid kref underflow below at input_free_device */

 Cleanup only after the last user has gone */

	/*

	 * Generate key-up events for remaining keys. Note that we don't

	 * need locking since nobody is adding new events to the kfifo.

 destroy input devs */

********** Platform Device ***********/

 don't run again if already initialized */

 deregister only after the last user has gone */

********** SNC (SNY5001) Device ***********/

/* the device uses 1-based values, while the backlight subsystem uses

 name of the entry */

 names of the ACPI get function */

 names of the ACPI set function */

 input/output validation */

 current setting */

 Has ever been set */

 active only in debug mode ? */

 sysfs attribute */

 unknown methods */

/*

 * acpi_evaluate_object wrappers

 * all useful calls into SNC methods take one or zero parameters and return

 * integers or arrays.

 do nothing */

 allow reading capabilities via sysfs */

 not initialized yet, return early */

/*

 * sony_nc_values input/output validate functions

/* brightness_default_validate:

 *

 * manipulate input output values to keep consistency with the

 * backlight framework for which brightness values are 0-based.

/* boolean_validate:

 *

 * on input validate boolean values 0/1, on output just pass the

 * received value.

/*

 * Sysfs show/store common to all sony_nc_values

/*

 * Backlight device

 brightness levels are 1-based, while backlight ones are 0-based */

/*

 * New SNC-only Vaios event mapping to driver known keys

/*

 * ACPI callbacks

 list of handles known for generating events */

 hotkey event */

 wlan switch */

			/* events on this handle are reported when the

			 * switch changes position or for battery

			 * events. We'll notify both of them but only

			 * update the rfkill device status when the

			 * switch is moved.

 hw switch event */

 Hybrid GFX switching */

 Hybrid GFX switching SVS151290S */

 clear the event (and the event reason when present) */

 old style event */

/*

 * ACPI device

 setup found handles here */

 setup hotkeys */

 setup hotkeys */

 touchpad enable/disable */

 Enable all events */

 get enabled events and disable them */

 cleanup handles here */

 finally cleanup the handles list */

 re-enable hotkeys */

 re-enable hotkeys */

 Enable all events */

 we already know we're blocked */

	/* The buffer is filled with magic numbers describing the devices

	 * available, 0xff terminates the enumeration.

	 * Known codes:

	 *	0x00 WLAN

	 *	0x10 BLUETOOTH

	 *	0x20 WWAN GPRS-EDGE

	 *	0x21 WWAN HSDPA

	 *	0x22 WWAN EV-DO

	 *	0x23 WWAN GPS

	 *	0x25 Gobi WWAN no GPS

	 *	0x26 Gobi WWAN + GPS

	 *	0x28 Gobi WWAN no GPS

	 *	0x29 Gobi WWAN + GPS

	 *	0x30 WIMAX

	 *	0x50 Gobi WWAN no GPS

	 *	0x51 Gobi WWAN + GPS

	 *	0x70 no SIM card slot

	 *	0x71 SIM card slot

 Keyboard backlight feature */

 Try to turn the light on/off immediately */

	/* verify the kbd backlight presence, some of these handles are not used

	 * for keyboard backlight only

 Some models do not allow timeout control */

	/*  limit values (2 bits):

	 *  00 - none

	 *  01 - 80%

	 *  10 - 50%

	 *  11 - 100%

	 *

	 *  bit 0: 0 disable BCL, 1 enable BCL

	 *  bit 1: 1 tell to store the battery limit (see bits 6,7) too

	 *  bits 2,3: reserved

	 *  bits 4,5: store the limit into the EC

	 *  bits 6,7: store the limit into the battery

		/*

		 * handle 0x0115 should allow storing on battery too;

		 * handle 0x0136 same as 0x0115 + health status;

		 * handle 0x013f, same as 0x0136 but no storing on the battery

 0x0115 is for models with no health reporting capability */

	/* the thermal profile seems to be a two bit bitmask:

	 * lsb -> silent

	 * msb -> performance

	 * no bit set is the normal operation and is always valid

	 * Some vaio models only have "balanced" and "performance"

 skip the newline if present */

 resume on LID open */

	/* the value we have to write to SNC is a bitmask:

	 * +--------------+

	 * | S3 | S4 | S5 |

	 * +--------------+

	 *   2    1    0

 GFX Switch position */

 returns 0 for speed, 1 for stamina */

		/* 1: discrete GFX (speed)

		 * 0: integrated GFX (stamina)

		/* 0: discrete GFX (speed)

		 * 1: integrated GFX (stamina)

		/* it's a more elaborated bitmask, for now:

		 * 2: integrated GFX (stamina)

		 * 0: discrete GFX (speed)

 High speed charging function */

		/* some models advertise the handle but have no implementation

		 * for it

 low battery function */

 fan speed function */

 USB charge function */

		/* some models advertise the handle but have no implementation

		 * for it

 Panel ID function */

 smart connect function */

 Touchpad enable/disable */

	/* sysfs: 0 disabled, 1 enabled

	 * EC: 0 enabled, 1 disabled

	/* try to read the boundaries from ACPI tables, if we fail the above

	 * defaults should be reasonable

	/* the buffer lists brightness levels available, brightness levels are

	 * from position 0 to 8 in the array, other values are used by ALS

	 * control.

 read device status */

 bail IFF the above call was successful and the device is not present */

 retrieve the available handles */

 create sony_pf sysfs attributes related to the SNC device */

 find the available acpiget as described in the DSDT */

 find the available acpiset as described in the DSDT */

********** SPIC (SNY6001) Device ***********/

 Event masks */

 The set of possible button release events */

 The set of possible jogger events  */

 The set of possible capture button events */

 The set of possible fnkeys events */

 The set of possible program key events */

 The set of possible bluetooth events */

 The set of possible wireless events */

 The set of possible back button events */

 The set of possible help button events */

 The set of possible lid events */

 The set of possible zoom events */

 The set of possible thumbphrase events */

 The set of possible motioneye camera events */

 The set of possible memorystick events */

 The set of possible battery events */

 The set of possible volume events */

 The set of possible brightness events */

 low level spic calls */

/*

 * minidrivers for SPIC models

	/*

	 * 0x31 could mean we have to take some extra action and wait for

	 * the next irq for some Type3 models, it will generate a new

	 * irq and we can read new data from the device:

	 *  - 0x5c and 0x5f requires 0xA0

	 *  - 0x61 requires 0xB3

 default */

 camera tests and poweron/poweroff */

 the rest don't need a loop until not 0xff */

 External camera command (exported to the motion eye v4l driver) */

 gprs/edge modem (SZ460N and SZ210P), thanks to Joshua Wise */

 bluetooth subsystem power state */

 fan speed */

 FAN0 information (reverse engineered from ACPI tables) */

******* SONYPI compatibility **********/

 battery / brightness / temperature  addresses */

 Flush input queue on first open */

 sync the backlight device status */

 FAN Controls */

 GET Temperature (useful under APM) */

 CONFIG_SONYPI_COMPAT */

/*

 * ACPI callbacks

 start IO enumeration */

 end IO enumeration */

				/*

				 * IRQ descriptors may have no IRQ# bits set,

				 * particularly those those w/ _STA disabled

 get device status */

 see acpi_pci_link_get_current acpi_pci_link_get_possible */

	/*

	 * Query and parse 'method'

/*

 *  Disable the spic device by calling its _DIS method

/*

 *  Based on drivers/acpi/pci_link.c:acpi_pci_link_set

 *

 *  Call _SRS to set current resources

	/* Type 1 resource layout is:

	 *    IO

	 *    IO

	 *    IRQNoFlags

	 *    End

	 *

	 * Type 2 and 3 resource layout is:

	 *    IO

	 *    IRQNoFlags

	 *    End

 init acpi_buffer */

 setup Type 1 resources */

 setup io resources */

 setup irq resource */

 we requested a shared irq */

 setup Type 2/3 resources */

 setup io resource */

 setup irq resource */

 we requested a shared irq */

 Attempt to set the resource */

 check for total failure */

 Necessary device initializations calls (from sonypi) */

/*****************

 *

 * ISR: some event is available

 *

 some events may require ignoring */

	/* Still not able to decode the event try to pass

	 * it over to the minidriver

/*****************

 *

 *  ACPI driver

 *

 pf attrs */

 read _PRS resources */

 setup input devices and helper fifo */

 request io port */

 Type 1 have 2 ioports */

 request IRQ */

 set resource status _SRS */

 create device attributes */

 SPDX-License-Identifier: GPL-2.0

/*

 * PCI driver for the Intel SCU.

 *

 * Copyright (C) 2008-2010, 2015, 2020 Intel Corporation

 * Authors: Sreedhara DS (sreedhara.ds@intel.com)

 *	    Mika Westerberg <mika.westerberg@linux.intel.com>

 SPDX-License-Identifier: GPL-2.0+

/*

 * System76 ACPI Driver

 *

 * Copyright (C) 2019 System76

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License version 2 as

 * published by the Free Software Foundation.

 Array of keyboard LED brightness levels

 Array of keyboard LED colors in 24-bit RGB format

 Get a System76 ACPI device value by name

 Get a System76 ACPI device value by name with index

 Get a System76 ACPI device object by name

 Get a name from a System76 ACPI device object

 Set a System76 ACPI device value by name

 Start/stop selection

 Start/stop selection

 Threshold value

 System76 EC only supports 1 battery

 Get the airplane mode LED brightness

 Set the airplane mode LED brightness

 Get the last set keyboard LED brightness

 Set the keyboard LED brightness

 Get the last set keyboard LED color

 Set the keyboard LED color

 Notify that the keyboard LED was changed by hardware

 Read keyboard LED brightness as set by hardware

 Toggle the keyboard LED

 Decrease the keyboard LED brightness

 Increase the keyboard LED brightness

 Cycle the keyboard LED color

 Allocate up to 8 fans and temperatures

 Handle ACPI notification

 Add a System76 ACPI device

 Remove a System76 ACPI device

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  ACPI-WMI mapping driver

 *

 *  Copyright (C) 2007-2008 Carlos Corbacho <carlos@strangeworlds.co.uk>

 *

 *  GUID parsing code from ldm.c is:

 *   Copyright (C) 2001,2002 Richard Russon <ldm@flatcap.org>

 *   Copyright (c) 2001-2007 Anton Altaparmakov

 *   Copyright (C) 2001,2002 Jakob Kemi <jakob.kemi@telia.com>

 *

 *  WMI bus infrastructure by Andrew Lutomirski and Darren Hart:

 *    Copyright (C) 2015 Andrew Lutomirski

 *    Copyright (C) 2017 VMware, Inc. All Rights Reserved.

/*

 * If the GUID data block is marked as expensive, we must enable and

 * explicitily disable data collection.

 GUID is a method */

 GUID takes & returns a string */

 GUID is an event */

/*

 * GUID parsing functions

/*

 * Exported WMI functions

/**

 * set_required_buffer_size - Sets the buffer size needed for performing IOCTL

 * @wdev: A wmi bus device from a driver

 * @length: Required buffer size

 *

 * Allocates memory needed for buffer, stores the buffer size in that memory

/**

 * wmi_evaluate_method - Evaluate a WMI method

 * @guid_string: 36 char string of the form fa50ff2b-f2e8-45de-83fa-65417f2f49ba

 * @instance: Instance index

 * @method_id: Method ID to call

 * @in: Buffer containing input for the method call

 * @out: Empty buffer to return the method results

 *

 * Call an ACPI-WMI method

/**

 * wmidev_evaluate_method - Evaluate a WMI method

 * @wdev: A wmi bus device from a driver

 * @instance: Instance index

 * @method_id: Method ID to call

 * @in: Buffer containing input for the method call

 * @out: Empty buffer to return the method results

 *

 * Call an ACPI-WMI method

 Check GUID is a data block */

	/*

	 * If ACPI_WMI_EXPENSIVE, call the relevant WCxx method first to

	 * enable collection.

		/*

		 * Some GUIDs break the specification by declaring themselves

		 * expensive, but have no corresponding WCxx method. So we

		 * should not fail if this happens.

	/*

	 * If ACPI_WMI_EXPENSIVE, call the relevant WCxx method, even if

	 * the WQxx method failed - we should disable collection anyway.

		/*

		 * Ignore whether this WCxx call succeeds or not since

		 * the previously executed WQxx method call might have

		 * succeeded, and returning the failing status code

		 * of this call would throw away the result of the WQxx

		 * call, potentially leaking memory.

/**

 * wmi_query_block - Return contents of a WMI block (deprecated)

 * @guid_string: 36 char string of the form fa50ff2b-f2e8-45de-83fa-65417f2f49ba

 * @instance: Instance index

 * @out: Empty buffer to return the contents of the data block to

 *

 * Return the contents of an ACPI-WMI data block to a buffer

/**

 * wmi_set_block - Write to a WMI block

 * @guid_string: 36 char string of the form fa50ff2b-f2e8-45de-83fa-65417f2f49ba

 * @instance: Instance index

 * @in: Buffer containing new values for the data block

 *

 * Write the contents of the input buffer to an ACPI-WMI data block

 Check GUID is a data block */

/**

 * wmi_install_notify_handler - Register handler for WMI events

 * @guid: 36 char string of the form fa50ff2b-f2e8-45de-83fa-65417f2f49ba

 * @handler: Function to handle notifications

 * @data: Data to be returned to handler when event is fired

 *

 * Register a handler for events sent to the ACPI-WMI mapper device.

/**

 * wmi_remove_notify_handler - Unregister handler for WMI events

 * @guid: 36 char string of the form fa50ff2b-f2e8-45de-83fa-65417f2f49ba

 *

 * Unregister handler for events sent to the ACPI-WMI mapper device.

/**

 * wmi_get_event_data - Get WMI data associated with an event

 *

 * @event: Event to find

 * @out: Buffer to hold event data. out->pointer should be freed with kfree()

 *

 * Returns extra data associated with an event in WMI.

/**

 * wmi_has_guid - Check if a GUID is available

 * @guid_string: 36 char string of the form fa50ff2b-f2e8-45de-83fa-65417f2f49ba

 *

 * Check if a given GUID is defined by _WDG

/**

 * wmi_get_acpi_device_uid() - Get _UID name of ACPI device that defines GUID

 * @guid_string: 36 char string of the form fa50ff2b-f2e8-45de-83fa-65417f2f49ba

 *

 * Find the _UID of ACPI device associated with this WMI GUID.

 *

 * Return: The ACPI _UID field value or NULL if the WMI GUID was not found

/*

 * sysfs interface

 make sure we're not calling a higher instance than exists*/

 if it's too small, abort */

 if it's too big, warn, driver will only use what is needed */

 copy the structure from userspace */

 let the driver do any filtering and do the call */

 return the result (only up to our internal buffer size) */

 driver wants a character device made */

 check that required buffer size declared by driver or MOF */

	/*

	 * Data Block Query Control Method (WQxx by convention) is

	 * required per the WMI documentation. If it is not present,

	 * we ignore this data block.

	/*

	 * The Microsoft documentation specifically states:

	 *

	 *   Data blocks registered with only a single instance

	 *   can ignore the parameter.

	 *

	 * ACPICA will get mad at us if we call the method with the wrong number

	 * of arguments, so check what our method expects.  (On some Dell

	 * laptops, WQxx may not be a method at all.)

 Delete devices for all the GUIDs */

			/*

			 * Because we historically didn't track the relationship

			 * between GUIDs and ACPI nodes, we don't know whether

			 * we need to suppress GUIDs that are unique on a

			 * given node but duplicated across nodes.

/*

 * Parse the _WDG method for the GUID data blocks

		/*

		 * Some WMI devices, like those for nVidia hooks, have a

		 * duplicate GUID. It's not clear what we should do in this

		 * case yet, so for now, we'll just ignore the duplicate

		 * for device creation.

	/*

	 * Now that all of the devices are created, add them to the

	 * device tree and probe subdrivers.

/*

 * WMI can have EmbeddedControl access regions. In which case, we just want to

 * hand these off to the EC driver.

 If a driver is bound, then notify the driver. */

 Legacy handler */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Samsung Laptop driver

 *

 * Copyright (C) 2009,2011 Greg Kroah-Hartman (gregkh@suse.de)

 * Copyright (C) 2009,2011 Novell Inc.

/*

 * This driver is needed because a number of Samsung laptops do not hook

 * their control settings through ACPI.  So we have to poke around in the

 * BIOS to do things like brightness values, and "special" key controls.

/*

 * We have 0 - 8 as valid brightness levels.  The specs say that level 0 should

 * be reserved by the BIOS (which really doesn't make much sense), we tell

 * userspace that the value is 0 - 7 and then just tell the hardware 1 - 8

 Structure get/set data using sabi */

	/*

	 * Brightness is 0 - 8, as described above.

	 * Value 0 is for the BIOS to use

	/*

	 * first byte:

	 * 0x00 - wireless is off

	 * 0x01 - wireless is on

	 * second byte:

	 * 0x02 - 3G is off

	 * 0x03 - 3G is on

	 * TODO, verify 3G is correct, that doesn't seem right...

 0 is off, 1 is on */

	/*

	 * 0x80 or 0x00 - no action

	 * 0x81 - recovery key pressed

	/*

	 * on seclinux: 0 is low, 1 is high,

	 * on swsmi: 0 is normal, 1 is silent, 2 is turbo

 0x80 is off, 0x81 is on */

 0x80 is off, 0x81 is on */

 the first byte is for bluetooth and the third one is for wlan */

 0x80 is off, 0x81 is on */

 0x81 to read, (0x82 | level << 8) to set, 0xaabb to enable */

	/*

	 * Tell the BIOS that Linux is running on this machine.

	 * 81 is on, 80 is off

		/* I don't know if it is really 2, but it is

/*

 * samsung-laptop/    - debugfs root directory

 *   f0000_segment    - dump f0000 segment

 *   command          - current command

 *   data             - current data

 *   d0, d1, d2, d3   - data fields

 *   call             - call SABI using command and data

 *

 * This allow to call arbitrary sabi commands wihout

 * modifying the driver at all.

 * For example, setting the keyboard backlight brightness to 5

 *

 *  echo 0x78 > command

 *  echo 0x0582 > d0

 *  echo 0 > d1

 *  echo 0 > d2

 *  echo 0 > d3

 *  cat call

 enable memory to be able to write to it */

 write out the command */

 write protect memory to make it safe */

 see if the command actually succeeded */

	/* iface_data = 0xFF happens when a command is not known

	 * so we only add a warning in debug mode since we will

	 * probably issue some unknown command at startup to find

 simple wrappers usable with most commands */

		/*

		 * short circuit if the specified level is what's already set

		 * to prevent the screen from flickering needlessly

	/*

	 * Some laptops exhibit the strange behaviour of stepping toward

	 * (rather than setting) the brightness except when changing to/from

	 * brightness level 0. This behaviour is checked for here and worked

	 * around in set_brightness.

 Don't set the state for non-present devices */

 Read the state */

 The logic is backwards, yeah, lots of fun... */

		/* Some swsmi laptops use the old seclinux way to control

 0x02 seems to mean that the device is no present/available */

 Turn off "Linux" mode in the BIOS */

	/* Example:

	 * Ident: @SDiaG@686XX-N90X3A/966-SEC-07HL-S90X3A

	 *

	 * Product name: 90X3A

	 * BIOS Version: 07HL

 Try to find one of the signatures in memory to find the header */

 point to the SMI port Number */

 Get a pointer to the SABI Interface */

 Turn on "Linux" mode in the BIOS */

 Check for stepping quirk */

 Portable */

 Laptop */

 Notebook */

 Sub-Notebook */

 DMI ids for laptops with bad Chassis Type */

 Specific DMI ids for laptop with quirks */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Airplane mode button for AMD, HP & Xiaomi laptops

 *

 *  Copyright (C) 2014-2017 Alex Hung <alex.hung@canonical.com>

 *  Copyright (C) 2021 Advanced Micro Devices

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Support for rfkill through the OLPC XO-1 laptop embedded controller

 *

 * Copyright (C) 2010 One Laptop per Child

 SPDX-License-Identifier: GPL-2.0-or-later

-*-linux-c-*-*/

/*

  Copyright (C) 2006 Lennart Poettering <mzxreary (at) 0pointer (dot) de>



/*

 * msi-laptop.c - MSI S270 laptop support. This laptop is sold under

 * various brands, including "Cytron/TCM/Medion/Tchibo MD96100".

 *

 * Driver also supports S271, S420 models.

 *

 * This driver exports a few files in /sys/devices/platform/msi-laptop-pf/:

 *

 *   lcd_level - Screen brightness: contains a single integer in the

 *   range 0..8. (rw)

 *

 *   auto_brightness - Enable automatic brightness control: contains

 *   either 0 or 1. If set to 1 the hardware adjusts the screen

 *   brightness automatically when the power cord is

 *   plugged/unplugged. (rw)

 *

 *   wlan - WLAN subsystem enabled: contains either 0 or 1. (ro)

 *

 *   bluetooth - Bluetooth subsystem enabled: contains either 0 or 1

 *   Please note that this file is constantly 0 if no Bluetooth

 *   hardware is available. (ro)

 *

 * In addition to these platform device attributes the driver

 * registers itself in the Linux backlight control subsystem and is

 * available to userspace under /sys/class/backlight/msi-laptop-bl/.

 *

 * This driver might work on other laptops produced by MSI. If you

 * want to try it you can pass force=1 as argument to the module which

 * will force it to load even when the DMI data doesn't identify the

 * laptop as MSI S270. YMMV.

 For set SCM load flag to disable BIOS fn key */

 Power LED is orange - Turbo mode */

 Power LED is green - ECO mode */

 Touchpad is turned on */

 If this bit != bit 1, turbo mode can't be toggled */

 If zero, fan rotates at maximal speed */

 Touch Pad On */

 Touch Pad On */

 MSI laptop quirks */

	/* Some MSI 3G netbook only have one fn key to control

	 * Wlan/Bluetooth/3G, those netbook will load the SCM (windows app) to

	 * disable the original Wlan/Bluetooth control by BIOS when user press

	 * fn key, then control Wlan/Bluetooth/3G by SCM (software control by

	 * OS). Without SCM, user cann't on/off 3G module on those 3G netbook.

	 * On Linux, msi-laptop driver will do the same thing to disable the

	 * original BIOS control, then might need use HAL or other userland

	 * application to do the software control that simulate with SCM.

	 * e.g. MSI N034 netbook

 Some MSI laptops need delay before reading from EC */

	/* Some MSI Wind netbooks (e.g. MSI Wind U100) need loading SCM to get

	 * some features working (e.g. ECO mode), but we cannot change

	 * Wlan/Bluetooth state in software and we can only read its state.

 Hardware access */

 read current device state */

 reverse device bit */

 Backlight device stuff */

 Platform device */

 old msi ec not support 3G */

 Initialization */

 Do something with blocked...*/

	/*

	 * blocked == false is on

	 * blocked == true is off

 0x54 wwan, 0x62 bluetooth, 0x76 wlan, 0xE4 touchpad toggle*/

 add rfkill */

 keep the hardware wireless state */

 schedule to run rfkill state initial */

 set load SCM to disable hardware control by fn key */

 allow userland write sysfs file  */

 disable hardware control by fn key */

 initial rfkill */

 setup input device */

 quirks may be NULL if no match in DMI table */

 Register backlight stuff */

 Register platform stuff */

		/* Disable automatic brightness control by default because

		 * this module was probably loaded to do brightness control in

 Enable automatic brightness control again */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  thinkpad_acpi.c - ThinkPad ACPI Extras

 *

 *  Copyright (C) 2004-2005 Borislav Deianov <borislav@users.sf.net>

 *  Copyright (C) 2006-2009 Henrique de Moraes Holschuh <hmh@hmh.eng.br>

/*

 *  Changelog:

 *  2007-10-20		changelog trimmed down

 *

 *  2007-03-27  0.14	renamed to thinkpad_acpi and moved to

 *  			drivers/misc.

 *

 *  2006-11-22	0.13	new maintainer

 *  			changelog now lives in git commit history, and will

 *  			not be updated further in-file.

 *

 *  2005-03-17	0.11	support for 600e, 770x

 *			    thanks to Jamie Lentin <lentinj@dial.pipex.com>

 *

 *  2005-01-16	0.9	use MODULE_VERSION

 *			    thanks to Henrik Brix Andersen <brix@gentoo.org>

 *			fix parameter passing on module loading

 *			    thanks to Rusty Russell <rusty@rustcorp.com.au>

 *			    thanks to Jim Radford <radford@blackbean.org>

 *  2004-11-08	0.8	fix init error case, don't return from a macro

 *			    thanks to Chris Wright <chrisw@osdl.org>

 ThinkPad CMOS commands */

 NVRAM Addresses */

 NVRAM bit masks */

 Misc NVRAM-related */

 ACPI HIDs */

 Input IDs */

 "TP" */

 ACPI \WGSV commands */

 Get state information */

 Resume WWAN powered on */

 Resume WWAN powered off */

 Save state for S4/S5 */

 TP_ACPI_WGSV_GET_STATE bits */

 WWAN hw available */

 WWAN radio enabled */

 WWAN state at resume */

 WWAN disabled in BIOS */

 BLTH hw available */

 BLTH radio enabled */

 BLTH state at resume */

 BLTH disabled in BIOS */

 UWB hw available */

 UWB radio enabled */

 HKEY events */

 Hotkey-related */

 first hotkey (FN+F1) */

 Brightness up */

 Brightness down */

 Thinklight/kbd backlight */

 Volume up or unmute */

 Volume down or unmute */

 Mixer output mute */

 Reasons for waking up from S3/S4 */

 undock requested, S3 */

 undock requested, S4 */

 bay ejection req, S3 */

 bay ejection req, S4 */

 battery empty, S3 */

 battery empty, S4 */

 Auto-sleep after eject request */

 bay ejection complete */

 undock complete */

 Misc bay events */

 opt. drive tray ejected */

	TP_HKEY_EV_HOTPLUG_DOCK		= 0x4010, /* docked into hotplug dock

	TP_HKEY_EV_HOTPLUG_UNDOCK	= 0x4011, /* undocked from hotplug

	/*

	 * Thinkpad X1 Tablet series devices emit 0x4012 and 0x4013

	 * when keyboard cover is attached, detached or folded onto the back

 keyboard cover attached */

 keyboard cover detached or folded back */

 User-interface events */

 laptop lid closed */

 laptop lid opened */

 tablet swivel up */

 tablet swivel down */

	TP_HKEY_EV_TABLET_CHANGED	= 0x60c0, /* X1 Yoga (2016):

						   * enter/leave tablet mode

 tablet pen inserted */

 tablet pen removed */

 backlight control event */

 Key-related user-interface events */

 NumLock key pressed */

 Fn key pressed? E420 */

 Fn+Esc key pressed X240 */

 Thermal events */

 battery too hot */

 battery critically hot */

 sensor too hot */

 sensor critically hot */

 windows; thermal table changed */

	TP_HKEY_EV_THM_CSM_COMPLETED    = 0x6032, /* windows; thermal control set

						   * command completed. Related to

	TP_HKEY_EV_THM_TRANSFM_CHANGED  = 0x60F0, /* windows; thermal transformation

 AC-related events */

 AC status changed */

 Further user-interface events */

 palm hoveres keyboard */

 palm removed */

 Misc */

 rfkill switch changed */

/****************************************************************************

 * Main driver

ibm-acpi.sf.net/"

 Debugging printk groups */

/****************************************************************************

 * Driver-wide structs and misc. variables

	unsigned int vendor;	/* ThinkPad vendor:

 Something like 1ZET51WW (1.03z) */

 Something like 1ZHT51WW-1.04a */

 1Y = 0x3159, 0 = unknown */

 1ZETK1WW = 0x4b31, 0 = unknown */

 ThinkPad T43 */

 9384A9C for a 9384-A9C model */

 tpacpi LED class */

 brightness level capabilities */

 0 = unknown */

/*************************************************************************

 *  Debugging helpers

/*

 * Quirk handling helpers

 *

 * ThinkPad IDs and versions seen in the field so far are

 * two or three characters from the set [0-9A-Z], i.e. base 36.

 *

 * We use values well outside that range as specials.

 TPID('1', 'Y') == 0x3159 */

/**

 * tpacpi_check_quirks() - search BIOS/EC version on a list

 * @qlist:		array of &struct tpacpi_quirk

 * @qlist_size:		number of elements in @qlist

 *

 * Iterates over a quirks list until one is found that matches the

 * ThinkPad's vendor, BIOS and EC model.

 *

 * Returns 0 if nothing matches, otherwise returns the quirks field of

 * the matching &struct tpacpi_quirk entry.

 *

 * The match criteria is: vendor, ec and bios much match.

/****************************************************************************

 ****************************************************************************

 *

 * ACPI Helpers and device model

 *

 ****************************************************************************

/*************************************************************************

 * ACPI basic handles

 570 */

 570 */

 R50, R50e, R50p, R51, */

 T4x, X31, X40 */

 A3x, G4x, R32, T23, T30, X22-24, X30 */

 R40, R40e */

 all others */

 600e/x, 770e, 770x */

 R30, R31 */

 all others */

 570 */

/*************************************************************************

 * ACPI helpers

 int */

 add more types as needed */

 int */

 void */

 add more types as needed */

/*************************************************************************

 * ACPI device model

/****************************************************************************

 ****************************************************************************

 *

 * Procfs Helpers

 *

 ****************************************************************************

/****************************************************************************

 ****************************************************************************

 *

 * Device model: input, hwmon and platform

 *

 ****************************************************************************

/*************************************************************************

 * sysfs support helpers

/*************************************************************************

 * rfkill and radio control support helpers

/*

 * ThinkPad-ACPI firmware handling model:

 *

 * WLSW (master wireless switch) is event-driven, and is common to all

 * firmware-controlled radios.  It cannot be controlled, just monitored,

 * as expected.  It overrides all radio state in firmware

 *

 * The kernel, a masked-off hotkey, and WLSW can change the radio state

 * (TODO: verify how WLSW interacts with the returned radio state).

 *

 * The only time there are shadow radio state changes, is when

 * masked-off hotkeys are used.

/*

 * Internal driver API for radio state:

 *

 * int: < 0 = error, otherwise enum tpacpi_rfkill_state

 * bool: true means radio blocked (off)

 rfkill switches */

 ThinkPad-ACPI rfkill subdriver */

 firmware interface */

 Query FW and update rfkill sw state for a given rfkill switch */

/*

 * Sync the HW-blocking state of all rfkill switches,

 * do notice it causes the rfkill core to schedule uevents

 ignore -- we track sw block */

 Call to get the WLSW state from the firmware */

 Call to query WLSW state and update all rfkill switches */

 When unknown or unsupported, we have to assume it is unblocked */

 try to set radio state */

 and update the rfkill core with whatever the FW really did */

			/* try to keep the initial state, since we ask the

 sysfs <radio> enable ------------------------------------------------ */

 This is in the ABI... */

 This is in the ABI... */

 procfs -------------------------------------------------------------- */

 This is in the ABI... */

/*************************************************************************

 * thinkpad-acpi driver attributes

 interface_version --------------------------------------------------- */

 debug_level --------------------------------------------------------- */

 version ------------------------------------------------------------- */

 --------------------------------------------------------------------- */

 wlsw_emulstate ------------------------------------------------------ */

 negative logic */

 bluetooth_emulstate ------------------------------------------------- */

 wwan_emulstate ------------------------------------------------- */

 uwb_emulstate ------------------------------------------------- */

 --------------------------------------------------------------------- */

/*************************************************************************

 * Firmware Data

/*

 * Table of recommended minimum BIOS versions

 *

 * Reasons for listing:

 *    1. Stable BIOS, listed because the unknown amount of

 *       bugs and bad ACPI behaviour on older versions

 *

 *    2. BIOS or EC fw with known bugs that trigger on Linux

 *

 *    3. BIOS with known reduced functionality in older versions

 *

 *  We recommend the latest BIOS and EC version.

 *  We only support the latest BIOS and EC fw version as a rule.

 *

 *  Sources: IBM ThinkPad Public Web Documents (update changelogs),

 *  Information from users in ThinkWiki

 *

 *  WARNING: we use this table also to detect that the machine is

 *  a ThinkPad in some cases, so don't remove entries lightly.

 Outdated IBM BIOSes often lack the EC id string */

 Outdated IBM BIOSes often lack the EC id string */

  Numeric models ------------------ */

      FW MODEL   BIOS VERS	      */

 570 */

 570E */

 600 */

 600E */

 600E */

 600X */

 770, 770E, 770ED */

 770X */

 770Z */

 A-series ------------------------- */

      FW MODEL   BIOS VERS  EC VERS */

 A20m */

 A20p */

 A21e, A22e */

 A21e */

 A21m, A22m */

 A21p, A22p */

 A22e */

 A22m */

 A30/p (0) */

 A31/p (0) */

 A31/p (0) */

 G-series ------------------------- */

      FW MODEL   BIOS VERS	      */

 G40 */

 G41 */

 R-series, T-series --------------- */

      FW MODEL   BIOS VERS  EC VERS */

 R30 */

 R31 */

 R32 */

 R40 */

 R40 */

 R40e */

	TPV_QI1('1', 'R',  'D', 'R',  '7', '1'), /* R50/p, R51,

 R50e, R51 (1) */

 R51e (1) */

 R52 (1) */

 R52, T43 (1) */

 T20 */

 T21 */

 T22 */

 T23 (0) */

 T30 (0) */

 T43/p (1) */

 T60/p */

 R60, R60i */

 R60e, R60i */

      BIOS FW    BIOS VERS  EC FW     EC VERS */

 R50e (1) */

 T60/p wide */

 X-series ------------------------- */

      FW MODEL   BIOS VERS  EC VERS */

 X20, X21 */

 X22, X23, X24 */

 X30 (0) */

 X31, X32 (0) */

 X40 (0) */

 X41 (0) */

 X41t (0) */

 X60/s */

 X60t */

 (0) - older versions lack DMI EC fw string and functionality */

 (1) - older versions known to lack functionality */

 note that unknown versions are set to 0x0000 and we use that */

		/*

		 * The changelogs would let us track down the exact

		 * reason, but it is just too much of a pain to track

		 * it.  We only list BIOSes that are either really

		 * broken, or really stable to begin with, so it is

		 * best if the user upgrades the firmware anyway.

/****************************************************************************

 ****************************************************************************

 *

 * Subdrivers

 *

 ****************************************************************************

/*************************************************************************

 * thinkpad-acpi metadata subdriver

/*************************************************************************

 * Hotkey subdriver

/*

 * ThinkPad firmware event model

 *

 * The ThinkPad firmware has two main event interfaces: normal ACPI

 * notifications (which follow the ACPI standard), and a private event

 * interface.

 *

 * The private event interface also issues events for the hotkeys.  As

 * the driver gained features, the event handling code ended up being

 * built around the hotkey subdriver.  This will need to be refactored

 * to a more formal event API eventually.

 *

 * Some "hotkeys" are actually supposed to be used as event reports,

 * such as "brightness has changed", "volume has changed", depending on

 * the ThinkPad model and how the firmware is operating.

 *

 * Unlike other classes, hotkey-class events have mask/unmask control on

 * non-ancient firmware.  However, how it behaves changes a lot with the

 * firmware model and version.

 hot key scan codes (derived from ACPI DSDT) */

 Adaptive keyboard keycodes */

 Lenovo extended keymap, starting at 0x1300 */

 first new observed key (star, favorites) is 0x1311 */

 Used by "Lenovo Quick Clean" */

 Hotkey keymap size */

 Keys/events available through NVRAM polling */

 Positions of some of the keys in hotkey masks */

 NVRAM to ACPI HKEY group map */

 kthread for the hotkey poller */

/*

 * Acquire mutex to write poller control variables as an

 * atomic block.

 *

 * Increment hotkey_config_change when changing them if you

 * want the kthread to forget old state.

 *

 * See HOTKEY_CONFIG_CRITICAL_START/HOTKEY_CONFIG_CRITICAL_END

/*

 * hotkey poller control variables

 *

 * Must be atomic or readers will also need to acquire mutex

 *

 * HOTKEY_CONFIG_CRITICAL_START/HOTKEY_CONFIG_CRITICAL_END

 * should be used only when the changes need to be taken as

 * a block, OR when one needs to force the kthread to forget

 * old state.

 bit mask 0=ACPI,1=NVRAM */

 Hz */

 CONFIG_THINKPAD_ACPI_HOTKEY_POLL */

 CONFIG_THINKPAD_ACPI_HOTKEY_POLL */

 Reasons for waking up */

 None or unknown */

 Bay ejection request */

 Undock request */

 events the BIOS had enabled */

 all events supported in fw */

 all adaptive events supported in fw */

 events better left disabled */

 events needed by the driver */

 events visible to userspace */

 events enabled in firmware */

 HKEY.MHKG() return bits */

	/* The following modes are considered tablet mode for the purpose of

	 * reporting the status to userspace. i.e. in all these modes it makes

	 * sense to disable the laptop input devices such as touchpad and

	 * keyboard.

		/* In mode 4, FLAT is not specified as a valid mode. However,

		 * it can be seen at least on the X1 Yoga 2nd Generation.

/*

 * Reads current event mask from firmware, and updates

 * hotkey_acpi_mask accordingly.  Also resets any bits

 * from hotkey_user_mask that are unavailable to be

 * delivered (shadow requirement of the userspace ABI).

 *

 * Call with hotkey_mutex held

 no mask support doesn't mean no event support... */

 sync userspace-visible mask */

 log only what the user can fix... */

/*

 * Set the firmware mask when supported

 *

 * Also calls hotkey_mask_get to update hotkey_acpi_mask.

 *

 * NOTE: does not set bits in hotkey_user_mask, but may reset them.

 *

 * Call with hotkey_mutex held

	/*

	 * We *must* make an inconditional call to hotkey_mask_get to

	 * refresh hotkey_acpi_mask and update hotkey_user_mask

	 *

	 * Take the opportunity to also log when we cannot _enable_

	 * a given event.

/*

 * Sets hotkey_user_mask and tries to set the firmware mask

 *

 * Call with hotkey_mutex held

	/* Give people a chance to notice they are doing something that

	/* Try to enable what the user asked for, plus whatever we need.

 Enable the available bits in hotkey_user_mask */

/*

 * Sets the driver hotkey mask.

 *

 * Can be called even if the hotkey subdriver is inactive

 Do the right thing if hotkey_init has not been called yet */

 Do NOT call without validating scancode first */

 Do NOT call without validating scancode first */

 Do NOT call without validating scancode first */

	/*

	 * Handle volume

	 *

	 * This code is supposed to duplicate the IBM firmware behaviour:

	 * - Pressing MUTE issues mute hotkey message, even when already mute

	 * - Pressing Volume up/down issues volume up/down hotkey messages,

	 *   even when already at maximum or minimum volume

	 * - The act of unmuting issues volume up/down notification,

	 *   depending which key was used to unmute

	 *

	 * We are constrained to what the NVRAM can tell us, which is not much

	 * and certainly not enough if more than one volume hotkey was pressed

	 * since the last poll cycle.

	 *

	 * Just to make our life interesting, some newer Lenovo ThinkPads have

	 * bugs in the BIOS and may fail to update volume_toggle properly.

 muted */

			/* recently muted, or repeated mute keypress, or

 unmute */

 recently unmuted, issue 'unmute' keypress */

 repeated vol up/down keypress at end of scale ? */

 handle brightness */

 repeated key presses that didn't change state */

/*

 * Polling driver

 *

 * We track all events in hotkey_source_mask all the time, since

 * most of them are edge-based.  We only issue those requested by

 * hotkey_user_mask or hotkey_driver_mask, though.

 Initial state for compares */

 should never happen... */

 forget old state on thaw or config change */

 call with hotkey_mutex held */

 call with hotkey_mutex held */

 call with hotkey_mutex held */

 CONFIG_THINKPAD_ACPI_HOTKEY_POLL */

 CONFIG_THINKPAD_ACPI_HOTKEY_POLL */

 Should only happen if tpacpi_lifecycle is corrupt */

 disable hotkey polling when possible */

 sysfs hotkey enable ------------------------------------------------- */

 sysfs hotkey mask --------------------------------------------------- */

 sysfs hotkey bios_enabled ------------------------------------------- */

 sysfs hotkey bios_mask ---------------------------------------------- */

 sysfs hotkey all_mask ----------------------------------------------- */

 sysfs hotkey all_mask ----------------------------------------------- */

 sysfs hotkey recommended_mask --------------------------------------- */

 sysfs hotkey hotkey_source_mask ------------------------------------- */

 check if events needed by the driver got disabled */

 sysfs hotkey hotkey_poll_freq --------------------------------------- */

 CONFIG_THINKPAD_ACPI_HOTKEY_POLL */

 sysfs hotkey radio_sw (pollable) ------------------------------------ */

 Opportunistic update */

 sysfs hotkey tablet mode (pollable) --------------------------------- */

 sysfs wakeup reason (pollable) -------------------------------------- */

 sysfs wakeup hotunplug_complete (pollable) -------------------------- */

 sysfs adaptive kbd mode --------------------------------------------- */

 --------------------------------------------------------------------- */

/*

 * Sync both the hw and sw blocking state of all switches

	/*

	 * We must sync all rfkill controllers *before* issuing any

	 * rfkill input events, or we will race the rfkill core input

	 * handler.

	 *

	 * tpacpi_inputdev_send_mutex works as a synchronization point

	 * for the above.

	 *

	 * We optimize to avoid numerous calls to hotkey_get_wlsw.

 Sync hw blocking state first if it is hw-blocked */

 Sync hw blocking state last if it is hw-unblocked */

 Issue rfkill input event for WLSW switch */

	/*

	 * this can be unconditional, as we will poll state again

	 * if userspace uses the notify to read data

	/* yes, there is a bitwise or below, we want the

/*

 * HKEY quirks:

 *   TPACPI_HK_Q_INIMASK:	Supports FN+F3,FN+F4,FN+F12

 600E */

 600E */

 770, 770E, 770ED */

 A20m */

 A20p */

 A21e, A22e */

 A21e */

 A21m, A22m */

 A21p, A22p */

 A22e */

 A22m */

 A30/p (0) */

 R30 */

 R31 */

 T20 */

 T21 */

 T22 */

 X20, X21 */

 X22, X23, X24 */

		/*

		 * The Yoga 11e series has 2 accelerometers described by a

		 * BOSC0200 ACPI node. This setup relies on a Windows service

		 * which calls special ACPI methods on this node to report

		 * the laptop/tent/tablet mode to the EC. The bmc150 iio driver

		 * does not support this, so skip the hotkey on these models.

 For X41t, X60t, X61t Tablets... */

	/* Requirements for changing the default keymaps:

	 *

	 * 1. Many of the keys are mapped to KEY_RESERVED for very

	 *    good reasons.  Do not change them unless you have deep

	 *    knowledge on the IBM and Lenovo ThinkPad firmware for

	 *    the various ThinkPad models.  The driver behaves

	 *    differently for KEY_RESERVED: such keys have their

	 *    hot key mask *unset* in mask_recommended, and also

	 *    in the initial hot key mask programmed into the

	 *    firmware at driver load time, which means the firm-

	 *    ware may react very differently if you change them to

	 *    something else;

	 *

	 * 2. You must be subscribed to the linux-thinkpad and

	 *    ibm-acpi-devel mailing lists, and you should read the

	 *    list archives since 2007 if you want to change the

	 *    keymaps.  This requirement exists so that you will

	 *    know the past history of problems with the thinkpad-

	 *    acpi driver keymaps, and also that you will be

	 *    listening to any bug reports;

	 *

	 * 3. Do not send thinkpad-acpi specific patches directly to

	 *    for merging, *ever*.  Send them to the linux-acpi

	 *    mailinglist for comments.  Merging is to be done only

	 *    through acpi-test and the ACPI maintainer.

	 *

	 * If the above is too much to ask, don't change the keymap.

	 * Ask the thinkpad-acpi maintainer to do it, instead.

 Generic keymap for IBM ThinkPads */

 Scan Codes 0x00 to 0x0B: ACPI HKEY FN+F1..F12 */

 Scan codes 0x0C to 0x1F: Other ACPI HKEY hot keys */

 0x0C: FN+BACKSPACE */

 0x0D: FN+INSERT */

 0x0E: FN+DELETE */

 brightness: firmware always reacts to them */

 0x0F: FN+HOME (brightness up) */

 0x10: FN+END (brightness down) */

 Thinklight: firmware always react to it */

 0x11: FN+PGUP (thinklight toggle) */

 0x12: FN+PGDOWN */

 0x13: FN+SPACE (zoom) */

		/* Volume: firmware always react to it and reprograms

		 * the built-in *extra* mixer.  Never map it to control

 0x14: VOLUME UP */

 0x15: VOLUME DOWN */

 0x16: MUTE */

 0x17: Thinkpad/AccessIBM/Lenovo */

 (assignments unknown, please report if found) */

 No assignments, only used for Adaptive keyboards. */

 No assignment, used for newer Lenovo models */

 Generic keymap for Lenovo ThinkPads */

 Scan Codes 0x00 to 0x0B: ACPI HKEY FN+F1..F12 */

 Scan codes 0x0C to 0x1F: Other ACPI HKEY hot keys */

 0x0C: FN+BACKSPACE */

 0x0D: FN+INSERT */

 0x0E: FN+DELETE */

		/* These should be enabled --only-- when ACPI video

		 * is disabled (i.e. in "vendor" mode), and are handled

 0x0F: FN+HOME (brightness up) */

 0x10: FN+END (brightness down) */

 0x11: FN+PGUP (thinklight toggle) */

 0x12: FN+PGDOWN */

 0x13: FN+SPACE (zoom) */

		/* Volume: z60/z61, T60 (BIOS version?): firmware always

		 * react to it and reprograms the built-in *extra* mixer.

		 * Never map it to control another mixer by default.

		 *

		 * T60?, T61, R60?, R61: firmware and EC tries to send

		 * these over the regular keyboard, so these are no-ops,

		 * but there are still weird bugs re. MUTE, so do not

		 * change unless you get test reports from all Lenovo

		 * models.  May cause the BIOS to interfere with the

		 * HDA mixer.

 0x14: VOLUME UP */

 0x15: VOLUME DOWN */

 0x16: MUTE */

 0x17: Thinkpad/AccessIBM/Lenovo */

 (assignments unknown, please report if found) */

		/*

		 * The mic mute button only sends 0x1a.  It does not

		 * automatically mute the mic or change the mute light.

 0x1a: Mic mute (since ?400 or so) */

 (assignments unknown, please report if found) */

 Extra keys in use since the X240 / T440 / T540 */

		/*

		 * These are the adaptive keyboard keycodes for Carbon X1 2014.

		 * The first item in this list is the Mute button which is

		 * emitted with 0x103 through

		 * adaptive_keyboard_hotkey_notify_hotkey() when the sound

		 * symbol is held.

		 * We'll need to offset those by 0x20.

 Mute held, 0x103 */

 Backlight off */

 Clipping tool */

 Cloud */

 Voice */

 Gestures */

 Settings */

 New tab */

 Reload */

 Back */

 Microphone down */

 Microphone up */

 Microphone cancellation */

 Camera mode */

 Rotate display, 0x116 */

		/*

		 * These are found in 2017 models (e.g. T470s, X270).

		 * The lowest known value is 0x311, which according to

		 * the manual should launch a user defined favorite

		 * application.

		 *

		 * The offset for these is TP_ACPI_HOTKEYSCAN_EXTENDED_START,

		 * corresponding to 0x34.

 (assignments unknown, please report if found) */

 Favorite app, 0x311 */

 Clipping tool */

 Calculator (above numpad, P52) */

 Bluetooth */

 Keyboard, 0x315 */

 Fn + right Shift */

 Notification Center */

 Answer incoming call */

 Decline incoming call */

 Generic maps (fallback) */

 hotkey not supported on 570 */

	/* mask not supported on 600e/x, 770e, 770x, A21e, A2xm/p,

	   A30, R30, R31, T20-22, X20-21, X22-24.  Detected by checking

			/*

			 * MHKV 0x100 in A31, R40, R40e,

			 * T4x, X31, and later

 Paranoia check AND init hotkey_all_mask */

 Fallback: pre-init for FN+F3,F4,F12 */

			/*

			 * MHKV 0x200 in X1, T460s, X260, T560, X1 Tablet (2016)

 Paranoia check AND init hotkey_all_mask */

 Fallback: pre-init for FN+F3,F4,F12 */

			/*

			 * Check if we have an adaptive keyboard, like on the

			 * Lenovo Carbon X1 2014 (2nd Gen).

 Init hotkey_all_mask if not initialized yet */

 FN+F12, FN+F4, FN+F3 */

 Init hotkey_acpi_mask and hotkey_orig_mask */

		/* hotkey_source_mask *must* be zero for

 Not all thinkpads have a hardware radio switch */

 Set up key map */

	/* Do not issue duplicate brightness change events to

	 * userspace. tpacpi_detect_brightness_capabilities() must have

		/* Disable brightness up/down on Lenovo thinkpads when

		 * ACPI is handling them, otherwise it is plain impossible

/* Thinkpad X1 Carbon support 5 modes including Home mode, Web browser

 * mode, Web conference mode, Function mode and Lay-flat mode.

 * We support Home mode and Function mode currently.

 *

 * Will consider support rest of modes in future.

 *

/*	WEB_BROWSER_MODE = 2,

/* press Fn key a while second, it will switch to Function Mode. Then

 * release Fn key, previous mode be restored.

 0x1000-0x1FFF: key presses */

	/*

	 * Original events are in the 0x10XX range, the adaptive keyboard

	 * found in 2014 X1 Carbon emits events are of 0x11XX. In 2017

	 * models, additional keys are emitted through 0x13XX.

 HKEY event 0x1001 is scancode 0x00 */

		/* Extended keycodes start at 0x300 and our offset into the map

		 * TP_ACPI_HOTKEYSCAN_EXTENDED_START. The calculated scancode

		 * will be positive, but might not be in the correct range.

 0x2000-0x2FFF: Wakeup reason */

 suspend, undock */

 hibernation, undock */

 suspend, bay eject */

 hibernation, bay eject */

 Battery on critical low level/S3 */

 Battery on critical low level/S4 */

 how to auto-heal: */

 2313: woke up from S3, go to S4/S5 */

 2413: woke up from S4, go to S5 */

 0x4000-0x4FFF: dock-related events */

 ACPI undock operation completed after wakeup */

 docked to port replicator */

 undocked from port replicator */

	/*

	 * Deliberately ignore attaching and detaching the keybord cover to avoid

	 * duplicates from intel-vbtn, which already emits SW_TABLET_MODE events

	 * to userspace.

	 *

	 * Please refer to the following thread for more information and a preliminary

	 * implementation using the GTOP ("Get Tablet OPtions") interface that could be

	 * extended to other attachment options of the ThinkPad X1 Tablet series, such as

	 * the Pico cartridge dock module:

	 * https://lore.kernel.org/platform-driver-x86/38cb8265-1e30-d547-9e12-b4ae290be737@a-kobel.de/

 0x5000-0x5FFF: human interface helpers */

 X61t: tablet pen inserted into bay */

 X61t: tablet pen removed from bay */

 X41t-X61t: tablet mode */

 X41t-X61t: normal mode */

 Lid closed */

 Lid opened */

 brightness changed */

 do not propagate these events */

 0x6000-0x6FFF: thermal alarms/notices and keyboard events */

		/* recommended action: do nothing, we don't have

 Thermal event - pass on to event handler */

		/* recommended action: do nothing, we don't have

 recommended action: warn user through gui */

 recommended action: immediate sleep/hibernate */

 recommended action: warn user through gui, that */

 some internal component is too hot */

 recommended action: immediate sleep/hibernate */

		/* X120e, X121e, X220, X220i, X220t, X230, T420, T420s, W520:

		 * AC status changed; can be triggered by plugging or

		/* key press events, we just ignore them as long as the EC

 Get the media key status to force the status LED to update */

 palm detected  - pass on to event handler */

 report simply as unknown, no sensor dump */

 forward it to userspace, maybe it knows how to handle it */

 queue empty */

 0x1000-0x1FFF: key presses */

 0x2000-0x2FFF: Wakeup reason */

 0x3000-0x3FFF: bay-related wakeups */

 FIXME: kick libata if SATA link offline */

 0x4000-0x4FFF: dock-related events */

 0x5000-0x5FFF: human interface helpers */

			/* 0x6000-0x6FFF: thermal alarms/notices and

 0x7000-0x7FFF: misc */

 to default */

 netlink events */

 Do these on suspend, we get the events on early resume! */

 save previous mode of adaptive keyboard of X1 Carbon */

 restore previous mode of adapive keyboard of X1 Carbon */

 procfs -------------------------------------------------------------- */

 mask set */

 mask set */

/*************************************************************************

 * Bluetooth subdriver

 ACPI GBDC/SBDC bits */

 Bluetooth hw available */

 Bluetooth radio enabled */

	TP_ACPI_BLUETOOTH_RESUMECTRL	= 0x04,	/* Bluetooth state at resume:

 ACPI \BLTH commands */

 Get Ultraport BT ID */

 Get power-on-resume state */

 Resume powered on */

 Resume powered off */

 Save state for S4/S5 */

 sysfs bluetooth enable ---------------------------------------------- */

 --------------------------------------------------------------------- */

 Order firmware to save current state to NVRAM */

	/*

	 * Some AMD based ThinkPads have a firmware bug that calling

	 * "GBDC" will cause bluetooth on Intel wireless cards blocked

	/* bluetooth not supported on 570, 600e/x, 770e, 770x, A21e, A2xm/p,

 no bluetooth hardware present in system */

 procfs -------------------------------------------------------------- */

/*************************************************************************

 * Wan subdriver

 ACPI GWAN/SWAN bits */

 Wan hw available */

 Wan radio enabled */

	TP_ACPI_WANCARD_RESUMECTRL	= 0x04,	/* Wan state at resume:

 sysfs wan enable ---------------------------------------------------- */

 --------------------------------------------------------------------- */

 Order firmware to save current state to NVRAM */

 no wan hardware present in system */

 procfs -------------------------------------------------------------- */

/*************************************************************************

 * UWB subdriver

 ACPI GUWB/SUWB bits */

 UWB hw available */

 UWB radio enabled */

 --------------------------------------------------------------------- */

 no uwb hardware present in system */

/*************************************************************************

 * Video subdriver

 570 */

 600e/x, 770e, 770x */

 all others */

 video status flags, based on VIDEO_570 */

 LCD output enabled */

 CRT output enabled */

 DVI output enabled */

 TPACPI_VIDEO_570 constants */

 unknown magic constant :( */

	TP_ACPI_VIDEO_570_PHSMASK = 0x03,	/* PHS bits that map to

 unknown magic constant :( */

 unknown magic constant :( */

 570 */

 600e/x, 770x */

 770e */

 A21e, G4x, R50e, X30, X40 */

 X100e and a few others */

 all others */

 R30, R31 */

 G41 */

 G41, assume IVGA doesn't change */

 video switching not supported on R30, R31 */

 570 */

 600e/x, 770e, 770x */

 all others */

 not reached */

 Even reads can crash X.org, so... */

 Even reads can crash X.org, let alone writes... */

 CONFIG_THINKPAD_ACPI_VIDEO */

/*************************************************************************

 * Keyboard backlight subdriver

	/*

	 * Guessed test for keyboard backlight:

	 *

	 * Machines with backlight keyboard return:

	 *   b010100000010000000XX - ThinkPad X1 Carbon 3rd

	 *   b110100010010000000XX - ThinkPad x230

	 *   b010100000010000000XX - ThinkPad x240

	 *   b010100000010000000XX - ThinkPad W541

	 * (XX is current backlight level)

	 *

	 * Machines without backlight keyboard return:

	 *   b10100001000000000000 - ThinkPad x230

	 *   b10110001000000000000 - ThinkPad E430

	 *   b00000000000000000000 - ThinkPad E450

	 *

	 * Candidate BITs for detection test (XOR):

	 *   b01000000001000000000

	 *              ^

/*************************************************************************

 * Light (thinklight) subdriver

 A21e, A2xm/p, T20-22, X20-21 */

 G4x */

 light not supported on 570, 600e/x, 770e, 770x, G4x, R30, R31 */

		/* light status not supported on

/*************************************************************************

 * CMOS subdriver

 sysfs cmos_command -------------------------------------------------- */

 --------------------------------------------------------------------- */

	/* cmos not supported on 570, 600e/x, 770e, 770x, A21e, A2xm/p,

 cmos_cmd set */

/*************************************************************************

 * LED subdriver

 570 */

 600e/x, 770e, 770x, A21e, A2xm/p, T20-22, X20-21 */

 all others */

 For TPACPI_LED_OLD */

 EC reg to get led to power on */

 EC reg to blink a lit led */

 EC reg to select led to command */

 there's a limit of 19 chars + NULL before 2.6.26 */

 not reached */

 off, on, blink. Index is led_status_t */

 570 */

 600e/x, 770e, 770x, A21e, A2xm/p, T20-22, X20 */

 all others */

 Can we choose the flash rate? */

 yes. set them to the hardware blink rate (1 Hz) */

 ms */

 ms */

 no error handling in led class :( */

 LEDs with no name don't get registered */

 A30 */

 A31 */

 A31 */

 T30 */

 T40, T41, T42, R50, R51 */

 T43, R52 */

 T43 */

 R50e */

 R51 */

 R51e */

 R52 */

 X30 */

 X31, X32 */

 X40 */

 X41 */

 X41t */

 T60 (1) */

 Z60* (1) */

 Z61* (1) */

 X60 (1) */

 (1) - may have excess leds enabled on MSB */

 Defaults (order matters, keep last, don't reorder!) */

 Lenovo */

 IBM ThinkPads with no EC version string */

 IBM ThinkPads with EC version string */

 570 */

 600e/x, 770e, 770x, A21e, A2xm/p, T20-22, X20-21 */

 most others */

 R30, R31, and unknown firmwares */

 570 */

/*************************************************************************

 * Beep subdriver

 all except R30, R31 */

 570 */

 570E - unverified */

 beep_cmd set */

/*************************************************************************

 * Thermal subdriver

 No thermal support */

 Use ACPI TMP0-7 */

 Use ACPI TMP0-7 with UPDT */

 Use ACPI EC regs, 8 sensors */

 Use ACPI EC regs, 16 sensors */

 TPACPI_THERMAL_TPEC_* */

 ACPI EC regs TMP 0..7 */

 ACPI EC regs TMP 8..15 */

 ACPI EC Functional revision */

 ACPI EC sensor not available */

 Sensor not available */

 Max thermal sensors supported */

 idx is zero-based */

 sysfs temp##_input -------------------------------------------------- */

 --------------------------------------------------------------------- */

		/*

		 * Direct EC access mode: sensors at registers

		 * 0x78-0x7F, 0xC0-0xC7.  Registers return 0x00 for

		 * non-implemented, thermal sensors return 0x80 when

		 * not available

		 * The above rule is unfortunately flawed. This has been seen with

		 * 0xC2 (power supply ID) causing thermal control problems.

		 * The EC version can be determined by offset 0xEF and at least for

		 * version 3 the Lenovo firmware team confirmed that registers 0xC0-0xC7

		 * are not thermal registers.

 This is sheer paranoia, but we handle it anyway */

 600e/x, 770e, 770x */

 IBM/LENOVO DSDT EC.TMPx access, max 8 sensors */

 temperatures not supported on 570, G4x, R30, R31, R32 */

/*************************************************************************

 * Backlight/brightness subdriver

/*

 * ThinkPads can read brightness from two places: EC HBRV (0x31), or

 * CMOS NVRAM byte 0x5E, bits 0-3.

 *

 * EC HBRV (0x31) has the following layout

 *   Bit 7: unknown function

 *   Bit 6: unknown function

 *   Bit 5: Z: honour scale changes, NZ: ignore scale changes

 *   Bit 4: must be set to zero to avoid problems

 *   Bit 3-0: backlight brightness level

 *

 * brightness_get_raw returns status data in the HBRV layout

 *

 * WARNING: The X61 has been verified to use HBRV for something else, so

 * this should be used _only_ on IBM ThinkPads, and maybe with some careful

 * testing on the very early *60 Lenovo models...

 TP_EC_BACKLIGHT bitmasks */

 Not implemented yet */

 EC control */

 UCMS step-based control */

 EC control w/ NVRAM store */

 2 = auto, 0 = no, 1 = yes */

/* NVRAM brightness access,

 NVRAM needs update */

 call with brightness_mutex held! */

 call with brightness_mutex held! */

 do NOT call with illegal backlight level value */

 call with brightness_mutex held! */

 May return EINTR which can always be mapped to ERESTARTSYS */

 sysfs backlight class ----------------------------------------------- */

	/* it is the backlight class's job (caller) to handle

 --------------------------------------------------------------------- */

/*

 * Call _BCL method of video device.  On some ThinkPads this will

 * switch the firmware to the ACPI brightness control mode.

/*

 * Returns 0 (no ACPI _BCL or _BCL invalid), or size of brightness map

/*

 * These are only useful for models that have only one possibility

 * of GPU.  If the BIOS model handles both ATI and Intel, don't use

 * these quirks.

 Must NOT use EC HBRV */

 Should or must use EC HBRV */

 Ask for user report */

 Models with ATI GPUs known to require ECNVRAM mode */

 T43/p ATI */

 Models with ATI GPUs that can use ECNVRAM */

 R50,51 T40-42 */

 R52 */

 Models with Intel Extreme Graphics 2 */

 X40 */

 Models with Intel GMA900 */

 T43, R52 */

 X41 */

 X41 Tablet */

/*

 * Returns < 0 for error, otherwise sets tp_features.bright_*

 * and bright_maxlvl.

	/* we could run a quirks check here (same table used by

	/*

	 * We always attempt to detect acpi support, so as to switch

	 * Lenovo Vista BIOS to ACPI brightness mode even if we are not

	 * going to publish a backlight interface

 tpacpi_detect_brightness_capabilities() must have run already */

 if it is unknown, we don't handle it: it wouldn't be safe */

	/*

	 * Check for module parameter bogosity, note that we

	 * init brightness_mode to TPACPI_BRGHT_MODE_MAX in order to be

	 * able to detect "unspecified"

 TPACPI_BRGHT_MODE_AUTO not implemented yet, just use default */

 Safety */

	/* Added by mistake in early 2007.  Probably useless, but it could

	 * be working around some unknown firmware problem where the value

	 * read at startup doesn't match the real hardware state... so leave

 new level set */

	/*

	 * Now we know what the final level should be, so we try to set it.

	 * Doing it this way makes the syscall restartable in case of EINTR

/*************************************************************************

 * Volume subdriver

/*

 * IBM ThinkPads have a simple volume controller with MUTE gating.

 * Very early Lenovo ThinkPads follow the IBM ThinkPad spec.

 *

 * Since the *61 series (and probably also the later *60 series), Lenovo

 * ThinkPads only implement the MUTE gate.

 *

 * EC register 0x30

 *   Bit 6: MUTE (1 mutes sound)

 *   Bit 3-0: Volume

 *   Other bits should be zero as far as we know.

 *

 * This is also stored in CMOS NVRAM, byte 0x60, bit 6 (MUTE), and

 * bits 3-0 (volume).  Other bits in NVRAM may have other functions,

 * such as bit 7 which is used to detect repeated presses of MUTE,

 * and we leave them unchanged.

 *

 * On newer Lenovo ThinkPads, the EC can automatically change the volume

 * in response to user input.  Unfortunately, this rarely works well.

 * The laptop changes the state of its internal MUTE gate and, on some

 * models, sends KEY_MUTE, causing any user code that responds to the

 * mute button to get confused.  The hardware MUTE gate is also

 * unnecessary, since user code can handle the mute button without

 * kernel or EC help.

 *

 * To avoid confusing userspace, we simply disable all EC-based mute

 * and volume controls when possible.

 last three slots */

 TP_EC_AUDIO bits */

 TP_EC_AUDIO bitmasks */

 Maximum volume */

 Not implemented yet */

 Pure EC control */

 UCMS step-based control: N/A */

 EC control w/ NVRAM store */

 Use white/blacklist */

 Output vol and mute */

 Output mute only */

 Mute mutes; up/down unmutes */

 We don't know what mode 1 is. */

 Mute and up/down are just keys */

 Mute toggles; up/down unmutes */

/*

 * Used to syncronize writers to TP_EC_AUDIO and

 * TP_NVRAM_ADDR_MIXER, as we need to do read-modify-write

 NVRAM needs update */

	/*

	 * On X200s, and possibly on others, it can take a while for

	 * reads to become correct.

 returns < 0 on error, 0 on no change, 1 on change */

 returns < 0 on error, 0 on no change, 1 on change */

	/*

	 * In software mute mode, the standard codec controls take

	 * precendence, so we unmute the ThinkPad HW switch at

	 * startup.  Just on case there are SAUM-capable ThinkPads

	 * with level controls, set max HW volume as well.

 Mute-only control available */

 Volume control available */

 Whitelist volume level on all IBM by default */

 Lenovo models with volume control (needs confirmation) */

 R60/i */

 R60e/i */

 T60/p */

 X60/s */

 X60t */

 Z60 */

 Z61 */

 Whitelist mute-only on all Lenovo by default */

	/*

	 * Check for module parameter bogosity, note that we

	 * init volume_mode to TPACPI_VOL_MODE_MAX in order to be

	 * able to detect "unspecified"

	/*

	 * The ALSA mixer is our primary interface.

	 * When disabled, don't install the subdriver at all

 no mixer */

	/*

	 * We do allow volume control at driver startup, so that the

	 * user can set initial state through the volume=... parameter hack.

 !CONFIG_THINKPAD_ACPI_ALSA_SUPPORT */

 CONFIG_THINKPAD_ACPI_ALSA_SUPPORT */

/*************************************************************************

 * Fan subdriver

/*

 * FAN ACCESS MODES

 *

 * TPACPI_FAN_RD_ACPI_GFAN:

 * 	ACPI GFAN method: returns fan level

 *

 * 	see TPACPI_FAN_WR_ACPI_SFAN

 * 	EC 0x2f (HFSP) not available if GFAN exists

 *

 * TPACPI_FAN_WR_ACPI_SFAN:

 * 	ACPI SFAN method: sets fan level, 0 (stop) to 7 (max)

 *

 * 	EC 0x2f (HFSP) might be available *for reading*, but do not use

 * 	it for writing.

 *

 * TPACPI_FAN_WR_TPEC:

 * 	ThinkPad EC register 0x2f (HFSP): fan control loop mode

 * 	Supported on almost all ThinkPads

 *

 * 	Fan speed changes of any sort (including those caused by the

 * 	disengaged mode) are usually done slowly by the firmware as the

 * 	maximum amount of fan duty cycle change per second seems to be

 * 	limited.

 *

 * 	Reading is not available if GFAN exists.

 * 	Writing is not available if SFAN exists.

 *

 * 	Bits

 *	 7	automatic mode engaged;

 *  		(default operation mode of the ThinkPad)

 * 		fan level is ignored in this mode.

 *	 6	full speed mode (takes precedence over bit 7);

 *		not available on all thinkpads.  May disable

 *		the tachometer while the fan controller ramps up

 *		the speed (which can take up to a few *minutes*).

 *		Speeds up fan to 100% duty-cycle, which is far above

 *		the standard RPM levels.  It is not impossible that

 *		it could cause hardware damage.

 *	5-3	unused in some models.  Extra bits for fan level

 *		in others, but still useless as all values above

 *		7 map to the same speed as level 7 in these models.

 *	2-0	fan level (0..7 usually)

 *			0x00 = stop

 * 			0x07 = max (set when temperatures critical)

 * 		Some ThinkPads may have other levels, see

 * 		TPACPI_FAN_WR_ACPI_FANS (X31/X40/X41)

 *

 *	FIRMWARE BUG: on some models, EC 0x2f might not be initialized at

 *	boot. Apparently the EC does not initialize it, so unless ACPI DSDT

 *	does so, its initial value is meaningless (0x07).

 *

 *	For firmware bugs, refer to:

 *	https://thinkwiki.org/wiki/Embedded_Controller_Firmware#Firmware_Issues

 *

 * 	----

 *

 *	ThinkPad EC register 0x84 (LSB), 0x85 (MSB):

 *	Main fan tachometer reading (in RPM)

 *

 *	This register is present on all ThinkPads with a new-style EC, and

 *	it is known not to be present on the A21m/e, and T22, as there is

 *	something else in offset 0x84 according to the ACPI DSDT.  Other

 *	ThinkPads from this same time period (and earlier) probably lack the

 *	tachometer as well.

 *

 *	Unfortunately a lot of ThinkPads with new-style ECs but whose firmware

 *	was never fixed by IBM to report the EC firmware version string

 *	probably support the tachometer (like the early X models), so

 *	detecting it is quite hard.  We need more data to know for sure.

 *

 *	FIRMWARE BUG: always read 0x84 first, otherwise incorrect readings

 *	might result.

 *

 *	FIRMWARE BUG: may go stale while the EC is switching to full speed

 *	mode.

 *

 *	For firmware bugs, refer to:

 *	https://thinkwiki.org/wiki/Embedded_Controller_Firmware#Firmware_Issues

 *

 *	----

 *

 *	ThinkPad EC register 0x31 bit 0 (only on select models)

 *

 *	When bit 0 of EC register 0x31 is zero, the tachometer registers

 *	show the speed of the main fan.  When bit 0 of EC register 0x31

 *	is one, the tachometer registers show the speed of the auxiliary

 *	fan.

 *

 *	Fan control seems to affect both fans, regardless of the state

 *	of this bit.

 *

 *	So far, only the firmware for the X60/X61 non-tablet versions

 *	seem to support this (firmware TP-7M).

 *

 * TPACPI_FAN_WR_ACPI_FANS:

 *	ThinkPad X31, X40, X41.  Not available in the X60.

 *

 *	FANS ACPI handle: takes three arguments: low speed, medium speed,

 *	high speed.  ACPI DSDT seems to map these three speeds to levels

 *	as follows: STOP LOW LOW MED MED HIGH HIGH HIGH HIGH

 *	(this map is stored on FAN0..FAN8 as "0,1,1,2,2,3,3,3,3")

 *

 * 	The speeds are stored on handles

 * 	(FANA:FAN9), (FANC:FANB), (FANE:FAND).

 *

 * 	There are three default speed sets, accessible as handles:

 * 	FS1L,FS1M,FS1H; FS2L,FS2M,FS2H; FS3L,FS3M,FS3H

 *

 * 	ACPI DSDT switches which set is in use depending on various

 * 	factors.

 *

 * 	TPACPI_FAN_WR_TPEC is also available and should be used to

 * 	command the fan.  The X31/X40/X41 seems to have 8 fan levels,

 * 	but the ACPI tables just mention level 7.

 Fan control constants */

 EC register 0x2f */

	fan_rpm_offset = 0x84,		/* EC register 0x84: LSB, 0x85 MSB (RPM)

	fan_select_offset = 0x31,	/* EC register 0x31 (Firmware 7M)

 EC fan mode: full speed */

 EC fan mode: auto fan control */

 Use cached last-seen fan level */

 No fan status or control */

 Use ACPI GFAN */

 Use ACPI EC regs 0x2f, 0x84-0x85 */

 No fan control */

 Use ACPI SFAN */

 Use ACPI EC reg 0x2f */

 Use ACPI FANS and EC reg 0x2f */

 speed command */

 level command  */

	TPACPI_FAN_CMD_ENABLE	= 0x0004,	/* enable/disable cmd,

 X31, X40, X41 */

 570 */

 600e/x, 770e, 770x */

 all others */

 570 */

 770x-JL */

 all others */

/*

 * Unitialized HFSP quirk: ACPI DSDT and EC fail to initialize the

 * HFSP register at boot, so it contains 0x07 but the Thinkpad could

 * be in auto mode (0x80).

 *

 * This is corrected by any write to HFSP either by the driver, or

 * by the firmware.

 *

 * We assume 0x07 really means auto mode while this quirk is active,

 * as this is far more likely than the ThinkPad being in level 7,

 * which is only used by the firmware during thermal emergencies.

 *

 * Enable for TP-1Y (T43), TP-78 (R51e), TP-76 (R52),

 * TP-70 (T43, R52), which are known to be buggy.

			/* something changed the HFSP regisnter since

			 * driver init time, so it is not undefined

			/* Return most likely status. In fact, it

 Select main fan on X60/X61, NOOP on others */

 Select secondary fan on X60/X61 */

/*

 * Call with fan_mutex held

	/* TODO:

 570, 600e/x, 770e, 770x */

 all except 570, 600e/x, 770e, 770x */

 all except 570, 600e/x, 770e, 770x */

 all except 570, 600e/x, 770e, 770x */

 play it safe */

		/* safety net should the EC not support AUTO

 safety min speed 7 */

 safety min speed 4 */

 Don't go out of emergency fan mode */

 min fan speed 4 */

 Set fan to at least level 4 */

 reschedule for later */

/*

 * SYSFS fan layout: hwmon compatible (device)

 *

 * pwm*_enable:

 * 	0: "disengaged" mode

 * 	1: manual mode

 * 	2: native EC "auto" mode (recommended, hardware default)

 *

 * pwm*: set speed in manual mode, ignored otherwise.

 * 	0 is level 0; 255 is level 7. Intermediate points done with linear

 * 	interpolation.

 *

 * fan*_input: tachometer reading, RPM

 *

 *

 * SYSFS fan layout: extensions

 *

 * fan_watchdog (driver):

 * 	fan watchdog interval in seconds, 0 disables (default), max 120

 sysfs fan pwm1_enable ----------------------------------------------- */

 reserved for software-controlled auto mode */

 sysfs fan pwm1 ------------------------------------------------------ */

 scale down from 0-255 to 0-7 */

 sysfs fan fan1_input ------------------------------------------------ */

 sysfs fan fan2_input ------------------------------------------------ */

 sysfs fan fan_watchdog (hwmon driver) ------------------------------- */

 --------------------------------------------------------------------- */

 for fan2_input */

 Unitialized HFSP */

 EC 0x31 bit 0 selects fan2 */

 selects fan2 control */

 P70 */

 P50 */

 P71 */

 P51 */

 P52 / P72 */

 P53 / P73 */

 P1 / X1 Extreme (1st gen) */

 P1 / X1 Extreme (2nd gen) */

 P1 / X1 Extreme (3nd gen) */

 P1 / X1 Extreme (4nd gen) */

 P15 (1st gen) / P15v (1st gen) */

 X1 Carbon (9th gen) */

 570, 600e/x, 770e, 770x */

		/* all other ThinkPads: note that even old-style

 570, 770x-JL */

 gfan without sfan means no fan control */

 all other models implement TP EC 0x2f control */

 X31, X40, X41 */

 fan control master switch */

 update fan_control_desired_level */

 attach second fan tachometer */

 FIXME: can we really do this unconditionally? */

 Store fan status in cache */

	/* if it is undefined, don't attempt to restore it.

 DSDT *always* updates status on resume */

 never decrease fan level */

		/* never decrease fan level, scale is:

		 * TP_EC_FAN_FULLSPEED > 7 >= TP_EC_FAN_AUTO

		 *

		 * We expect the firmware to set either 7 or AUTO, but we

		 * handle FULLSPEED out of paranoia.

		 *

		 * So, we can safely only restore FULLSPEED or 7, anything

		 * else could slow the fan.  Restoring AUTO is useless, at

		 * best that's exactly what the DSDT already set (it is the

		 * slower it uses).

		 *

		 * Always keep in mind that the DSDT *will* have set the

		 * fans to what the vendor supposes is the best level.  We

		 * muck with it only to speed the fan up.

 570, 600e/x, 770e, 770x */

 all except 570, 600e/x, 770e, 770x */

 Disengaged mode takes precedence */

	/* TODO:

/*************************************************************************

 * Mute LED subdriver

/*

 * Battery Wear Control Driver

 * Contact: Ognjen Galic <smclt30p@gmail.com>

 Metadata */

 Error condition bit */

 This is used in the get/set helpers */

 ACPI helpers/functions/probes */

/**

 * This evaluates a ACPI method call specific to the battery

 * ACPI extension. The specifics are that an error is marked

 * in the 32rd bit of the response, so we just check that here.

 The value is in the low 8 bits of the response */

 Value is in lower 8 bits */

		/*

		 * On the stop value, if we return 0 that

		 * does not make any sense. 0 means Default, which

		 * means that charging stops at 100%, so we return

		 * that.

 The first 8 bits are the value of the threshold */

 The battery ID is in bits 8-9, 2 bits */

	/*

	 * 1) Get the current start threshold

	 * 2) Check for support

	 * 3) Get the current stop threshold

	 * 4) Check for support

 Individual addressing is in bit 9 */

 Support is marked in bit 8 */

 Support is marked in bit 8 */

 General helper functions */

	/*

	 * If for some reason the battery is not BAT0 nor is it

	 * BAT1, we will assume it's the default, first battery,

	 * AKA primary.

 sysfs interface */

	/*

	 * Some systems have support for more than

	 * one battery. If that is the case,

	 * tpacpi_battery_probe marked that addressing

	 * them individually is supported, so we do that

	 * based on the device struct.

	 *

	 * On systems that are not supported, we assume

	 * the primary as most of the ACPI calls fail

	 * with "Any Battery" as the parameter.

 BAT_PRIMARY or BAT_SECONDARY */

 valid values are [0, 99] */

 valid values are [1, 100] */

		/*

		 * When 100 is passed to stop, we need to flip

		 * it to 0 as that the EC understands that as

		 * "Default", which will charge to 100%

	/*

	 * Some systems have support for more than

	 * one battery. If that is the case,

	 * tpacpi_battery_probe marked that addressing

	 * them individually is supported, so we;

	 * based on the device struct.

	 *

	 * On systems that are not supported, we assume

	 * the primary as most of the ACPI calls fail

	 * with "Any Battery" as the parameter.

 BAT_PRIMARY or BAT_SECONDARY */

 ACPI battery hooking */

 Subdriver init/exit */

	/*

	 * Individual addressing is broken on models that expose the

	 * primary battery as BAT1.

 B5400 */

 Thinkpad 11e */

 Thinkpad 11e gen 3 */

 Thinkpad 13 */

 Thinkpad 13 gen 2 */

 Thinkpad 11e gen 4 celeron BIOS */

/*************************************************************************

 * LCD Shadow subdriver, for the Lenovo PrivacyGuard feature

/*************************************************************************

 * Thinkpad sensor interfaces

 To get DYTC status - enable/revision */

 Bit        8 - 0 = disabled, 1 = enabled */

 Bits 16 - 27 - sub revision */

 Bits 28 - 31 - revision */

 To get current IC function and mode */

 Set when in lapmode */

 Determine if psensor present */

 psensor status */

 Platform doesn't support DYTC */

 Check if we've been called before - and just return cached value */

 Otherwise query DYTC and extract version information */

	/*

	 * If support isn't available (ENODEV) then don't return an error

	 * and don't create the sysfs group

 For all other errors we can flag the failure */

 Check DYTC is enabled and supports mode setting */

If we get his far, we have lapmode support*/

	/*

	 * If support isn't available (ENODEV) for both devices then quit, but

	 * don't return an error.

 Otherwise, if there was an error return it */

 Check if we know the DYTC version, if we don't then get it */

	/*

	 * Platforms before DYTC version 5 claim to have a lap sensor, but it doesn't work, so we

	 * ignore them

/*************************************************************************

 * DYTC Platform Profile interface

 To enable/disable IC function mode */

 To get current MMC function and mode */

 To reset back to default */

 Bits  8-11 - function setting */

 Bits 12-15 - mode setting */

 Bits 12-15 - function setting */

 Bits 16-19 - mode setting */

 Bit     20 - 1 = on, 0 = off */

 Function = 0, standard mode */

 Function = 1, lap mode */

 Function = 11, desk mode */

 High power mode aka performance */

 Low power mode */

 Default mode aka balanced */

 Default mode from MMC_GET, aka balanced */

 Bits 0-3 in cmd result are the error result */

 CMD completed successful */

 Unknown mode */

 Unknown profile */

/*

 * dytc_profile_get: Function to register with platform_profile

 * handler. Returns current platform profile.

/*

 * Helper function - check if we are in CQL mode and if we are

 *  -  disable CQL,

 *  - run the command

 *  - enable CQL

 *  If not in CQL mode, just run the command

 Determine if we are in CQL mode. This alters the commands we do */

 Check if we're OK to return immediately */

 Check return condition after we've restored CQL state */

/*

 * dytc_profile_set: Function to register with platform_profile

 * handler. Sets current platform profile.

		/*

		 * To get back to balanced mode we need to issue a reset command.

		 * Note we still need to disable CQL mode before hand and re-enable

		 * it afterwards, otherwise dytc_lapmode gets reset to 0 and stays

		 * stuck at 0 for aprox. 30 minutes.

 Determine if we are in CQL mode. This alters the commands we do */

 Success - update current profile */

 Setup supported modes */

	/*

	 * If support isn't available (ENODEV) then don't return an error

	 * and don't create the sysfs group

 For all other errors we can flag the failure */

 Check if we know the DYTC version, if we don't then get it */

 Check DYTC is enabled and supports mode setting */

		/*

		 * Check if MMC_GET functionality available

		 * Version > 6 and return success from MMC_GET command

 Create platform_profile structure and register */

		/*

		 * If for some reason platform_profiles aren't enabled

		 * don't quit terminally.

 Ensure initial values are correct */

/*************************************************************************

 * Keyboard language interface

 Platform doesn't support SSKL */

 Platform doesn't support GSKL */

	/*

	 * METHOD_ERR gets returned on devices where there are no special (e.g. '=',

	 * '(' and ')') keys which use layout dependent key-press emulation.

 sysfs keyboard language entry */

 Set language code */

	/*

	 * If support isn't available (ENODEV) then don't return an error

	 * just don't create the sysfs group.

 Platform supports this feature - create the sysfs file */

/*************************************************************************

 * DPRC(Dynamic Power Reduction Control) subdriver, for the Lenovo WWAN

 * and WLAN feature.

 Platform doesn't support DPRC */

	/*

	 * METHOD_ERR gets returned on devices where few commands are not supported

	 * for example command to get WWAN Antenna type command is not supported on

	 * some devices.

 Get current Antenna type */

 sysfs wwan antenna type entry */

	/*

	 * If support isn't available (ENODEV) then quit, but don't

	 * return an error.

 if there was an error return it */

/****************************************************************************

 ****************************************************************************

 *

 * Infrastructure

 *

 ****************************************************************************

/*

 * HKEY event callout for other subdrivers go here

 * (yes, it is ugly, but it is quick, safe, and gets the job done

		/*

		 * Check the brightness actually changed, setting the brightness

		 * through kbdlight_set_level() also triggers this event.

 If we are already accessing DYTC then skip dytc update */

 --------------------------------------------------------------------- */

 /proc support */

/*

 * Module and infrastructure proble, init and exit handling

 CONFIG_THINKPAD_ACPI_DEBUG */

 probe failed */

 Probing */

	/*

	 * Most models: xxyTkkWW (#.##c)

	 * Ancient 570/600 and -SL lacks (#.##c)

 New models: xxxyTkkW (#.##c); T550 and some others */

	/*

	 * ThinkPad Embedded Controller Program Table on newer models

	 *

	 * Offset |  Name                | Width  | Description

	 * ----------------------------------------------------

	 *  0x00  | Type                 | BYTE   | 0x8C

	 *  0x01  | Length               | BYTE   |

	 *  0x02  | Handle               | WORD   | Varies

	 *  0x04  | Signature            | BYTEx6 | ASCII for "LENOVO"

	 *  0x0A  | OEM struct offset    | BYTE   | 0x0B

	 *  0x0B  | OEM struct number    | BYTE   | 0x07, for this structure

	 *  0x0C  | OEM struct revision  | BYTE   | 0x01, for this format

	 *  0x0D  | ECP version ID       | STR ID |

	 *  0x0E  | ECP release date     | STR ID |

 Return if data structure not match */

 fwstr is the first 8byte string  */

/* returns 0 - probe ok, or < 0 - probe error.

 * Probe ok doesn't mean thinkpad found.

 Really ancient ThinkPad 240X will fail this, which is fine */

	/*

	 * ThinkPad T23 or newer, A31 or newer, R50e or newer,

	 * X32 or newer, all Z series;  Some models must have an

	 * up-to-date BIOS or they will not be detected.

	 *

	 * See https://thinkwiki.org/wiki/List_of_DMI_IDs

 Newer ThinkPads have different EC program info table */

 It would be dangerous to run the driver in this case */

	/*

	 * Non-ancient models have better DMI tagging, but very old models

	 * don't.  tpacpi_is_fw_known() is a cheat to help in that case.

 The EC handler is required */

 Module init, exit, parameters */

 ALSA module API parameters */

 CONFIG_THINKPAD_ACPI_ALSA_SUPPORT */

 The module parameter can't be read back, that's why 0 is used here */

 Driver-level probe */

 Driver initialization */

 Device initialization */

 Prepare input device, but don't register */

 Init subdriver dependencies */

 Init subdrivers */

/*

 * This will autoload the driver in almost every ThinkPad

 * in widespread use.

 *

 * Only _VERY_ old models, like the 240, 240x and 570 lack

 * the HKEY event interface.

/*

 * DMI matching for module autoloading

 *

 * See https://thinkwiki.org/wiki/List_of_DMI_IDs

 * See https://thinkwiki.org/wiki/BIOS_Upgrade_Downloads

 *

 * Only models listed in thinkwiki will be supported, so add yours

 * if it is not there yet.

/* Ancient thinkpad BIOSes have to be identified by

 * BIOS type or model number, and there are far less

 570, 570e */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel Atom SOC Power Management Controller Driver

 * Copyright (c) 2014, Intel Corporation.

 CONFIG_DEBUG_FS */

	/*

	 * Disable PMC S0IX_WAKE_EN events coming from:

	 * - LPC clock run

	 * - GPIO_SUS ored dedicated IRQs

	 * - GPIO_SCORE ored dedicated IRQs

	 * - GPIO_SUS shared IRQ

	 * - GPIO_SCORE shared IRQ

 Low part */

 High part */

 CONFIG_DEBUG_FS */

/*

 * Some systems need one or more of their pmc_plt_clks to be

 * marked as critical.

 pmc_plt_clk0 is used for an external HSIC USB HUB */

 pmc_plt_clk0 - 3 are used for the 4 ethernet controllers */

 pmc_plt_clk* - are used for ethernet controllers */

 pmc_plt_clk* - are used for ethernet controllers */

sentinel*/ }

 offset is added by client */

 Obtain ACPI base address */

 Install power off function */

 PMC hardware registers setup */

 Register platform clocks - PMC_PLT_CLK [0..5] */

/*

 * Data for PCI driver interface

 *

 * used by pci_match_id() call below.

	/* We look for our device - PCU PMC

	 * we assume that there is max. one device.

	 *

	 * We can't use plain pci_driver mechanism,

	 * as the device is really a multiple function device,

	 * main driver that binds to the pci_device is lpc_ich

	 * and have to find & bind to the device this way.

 Device not found. */

/*

MODULE_AUTHOR("Aubrey Li <aubrey.li@linux.intel.com>");

MODULE_DESCRIPTION("Intel Atom SOC Power Management Controller Interface");

MODULE_LICENSE("GPL v2");

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Touchscreen driver DMI based configuration code

 *

 * Copyright (c) 2017 Red Hat Inc.

 *

 * Red Hat authors:

 * Hans de Goede <hdegoede@redhat.com>

 The EFI embedded-fw code expects this to be the first member! */

 NOTE: Please keep all entries sorted alphabetically */

 Generic props + data for upside-down mounted GDIX1001 touchscreens */

 NOTE: Please keep this table sorted alphabetically */

 Chuwi Hi8 */

 Chuwi Hi8 (H1D_S806_206) */

 Chuwi Hi8 Air (CWI543) */

 Chuwi Hi8 Pro (CWI513) */

 Chuwi Hi10 Air */

 Chuwi Hi10 Plus (CWI527) */

 Chuwi Hi10 Pro (CWI529) */

 Chuwi HiBook (CWI514) */

 Above matches are too generic, add bios-date match */

 Chuwi Vi8 (CWI506) */

 Chuwi Vi8 Plus (CWI519) */

 Chuwi Vi10 (CWI505) */

 Chuwi Surbook Mini (CWI540) */

 Connect Tablet 9 */

 CUBE iwork8 Air */

 Cube KNote i1101 */

 DEXP Ursus 7W */

 Digma Citi E200 */

 Estar Beauty HD (MID 7316R) */

 Glavey TM800A550L */

 Above strings are too generic, also match on BIOS version */

 GP-electronic T701 */

 I.T.Works TW701 (same hardware as the Trekstor ST70416-6) */

 Irbis TW90 */

 Irbis TW118 */

 I.T.Works TW891 */

 Jumper EZpad 6 Pro */

 Above matches are too generic, add bios-date match */

 Jumper EZpad 6 Pro B */

 Above matches are too generic, add bios-date match */

 Jumper EZpad 6 m4 */

 Jumper8.S106x.A00C.1066 with the version dropped */

 Jumper EZpad 7 */

 Jumper12x.WJ2012.bsBKRCP05 with the version dropped */

 Jumper EZpad mini3 */

 jumperx.T87.KFBNEEA02 with the version-nr dropped */

 Mediacom WinPad 7.0 W700 (same hw as Wintron surftab 7") */

 Mediacom Flexbook Edge 11 (same hw as TS Primebook C11) */

 MP Man Converter 9 */

 MP Man MPWIN895CL */

 Myria MY8307 */

 Onda oBook 20 Plus */

 ONDA V80 plus v3 (P80PSBG9V3A01501) */

 ONDA V820w DualOS */

 ONDA V891 v5 */

 ONDA V891w revision P891WBEBV1B00 aka v1 */

 Exact match, different versions need different fw */

 ONDA V891w Dual OS P891DCF2V1A01274 64GB */

 Pipo W2S */

 Pipo W11 */

 Above matches are too generic, add bios-ver match */

 Ployer Momo7w (same hardware as the Trekstor ST70416-6) */

 Exact match, different versions need different fw */

 Point of View mobii wintab p800w (v2.0) */

 Above matches are too generic, add bios-date match */

 Predia Basic tablet) */

 Above matches are too generic, add bios-version match */

 Point of View mobii wintab p800w (v2.1) */

 Above matches are too generic, add bios-date match */

 Point of View mobii wintab p1006w (v1.0) */

 Note 105b is Foxcon's USB/PCI vendor id */

 Schneider SCT101CTM */

 Techbite Arc 11.6 */

 Teclast Tbook 11 */

 Teclast X3 Plus */

 Teclast X89 (Android version / BIOS) */

 Teclast X89 (Windows version / BIOS) */

 tPAD is too generic, also match on bios date */

 Teclast X98 Plus II */

 Teclast X98 Pro */

			/*

			 * Only match BIOS date, because the manufacturers

			 * BIOS does not report the board name at all

			 * (sometimes)...

 Trekstor Primebook C11 */

 Trekstor Primebook C11B (same touchscreen as the C11) */

 Trekstor Primebook C13 */

 Trekstor Primetab T13B */

 TrekStor SurfTab twin 10.1 ST10432-8 */

 Trekstor Surftab Wintron 7.0 ST70416-6 */

 Exact match, different versions need different fw */

 Trekstor Surftab Wintron 7.0 ST70416-6, newer BIOS */

 Exact match, different versions need different fw */

 Trekstor Yourbook C11B (same touchscreen as the Primebook C11) */

 Viglen Connect 10 */

 Vinga Twizzle J116 */

 "WinBook TW100" */

 WinBook TW700 */

 Yours Y8W81, same case and touchscreen as Chuwi Vi8 */

 Not an error */

 Some dmi table entries only provide an efi_embedded_fw_desc */

/*

 * We are registering out notifier after i2c core is initialized and i2c bus

 * itself is ready (which happens at postcore initcall level), but before

 * ACPI starts enumerating devices (at subsys initcall level).

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * HP WMI hotkeys

 *

 * Copyright (C) 2008 Red Hat <mjg@redhat.com>

 * Copyright (C) 2010, 2011 Anssi Hannula <anssi.hannula@iki.fi>

 *

 * Portions based on wistron_btns.c:

 * Copyright (C) 2005 Miloslav Trmac <mitr@volny.cz>

 * Copyright (C) 2005 Bernhard Rosenkraenzer <bero@arklinux.org>

 * Copyright (C) 2005 Dmitry Torokhov <dtor@mail.ru>

/* DMI board names of devices that should use the omen specific path for

 * thermal profiles.

 * This was obtained by taking a look in the windows omen command center

 * app and parsing a json file that they use to figure out what capabilities

 * the device should have.

 * A device is considered an omen if the DisplayName in that list contains

 * "OMEN", and it can use the thermal profile stuff if the "Feature" array

 * contains "PerformanceControl".

 7 devices fit into the 128 byte buffer */

 map output size to the corresponding WMI method id */

/*

 * hp_wmi_perform_query

 *

 * query:	The commandtype (enum hp_wmi_commandtype)

 * write:	The command (enum hp_wmi_command)

 * buffer:	Buffer used as input and/or output

 * insize:	Size of input buffer

 * outsize:	Size of output buffer

 *

 * returns zero on success

 *         an HP WMI query specific error code (which is positive)

 *         -EINVAL if the query was not successful at all

 *         -EINVAL if the output buffer size exceeds buffersize

 *

 * Note: The buffersize must at least be the maximum of the input and output

 *       size. E.g. Battery info query is defined to have 1 byte input

 *       and 128 byte output. The caller would do:

 *       buffer = kzalloc(128, GFP_KERNEL);

 *       ret = hp_wmi_perform_query(HPWMI_BATTERY_QUERY, HPWMI_READ, buffer, 1, 128)

 Ignore output data of zero size */

 TBD: Pass error */

 TBD: Pass error */

 Get the POST error code of previous boot failure. */

 Clear the POST error code. It is kept until until cleared. */

	/*

	 * Depending on ACPI version the concatenation of id and event data

	 * inside _WED function will result in a 8 or 16 byte buffer.

 Dock */

 Tablet mode */

 Set initial hardware state */

		/*

		 * call thermal profile write command to ensure that the

		 * firmware correctly sets the OEM variables

		/*

		 * call thermal profile write command to ensure that the

		 * firmware correctly sets the OEM variables for the DPTF

 clear detected rfkill devices */

	/*

	 * Hardware state may have changed while suspended, so trigger

	 * input events for the current state. As this is a switch,

	 * the input layer will only actually pass it on if the state

	 * changed.

 0 is automatic fan, which is 2 for hwmon */

			/* 1 is max fan, which is 0

			 * (no fan speed control) for hwmon

 shouldn't happen */

 0 is no fan speed control (max), which is 1 for us */

 2 is automatic speed control, which is 0 for us */

 we don't support manual fan speed control */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MXM WMI driver

 *

 * Copyright(C) 2010 Red Hat.

 "MXDS" */

 "MXMX" */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Turbo Boost Max Technology 3.0 legacy (non HWP) enumeration driver

 * Copyright (c) 2017, Intel Corporation.

 * All rights reserved.

 *

 * Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>

/*

 * Typical latency to get mail box response is ~3us, It takes +3 us to

 * process reading mailbox after issuing mailbox write on a Broadwell 3.4 GHz

 * system. So for most of the time, the first mailbox read should have the

 * response, but to avoid some boundary cases retry twice.

 Issue favored core read command */

 Set the busy bit to indicate OS is trying to issue command */

/*

 * The work item is needed to avoid CPU hotplug locking issues. The function

 * itmt_legacy_set_priority() is called from CPU online callback, so can't

 * call sched_set_itmt_support() from there as this function will aquire

 * hotplug locks in its path.

 Enable ITMT feature when a core with different priority is found */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel ECLite opregion driver for talking to ECLite firmware running on

 * Intel Integrated Sensor Hub (ISH) using ISH Transport Protocol (ISHTP)

 *

 * Copyright (c) 2021, Intel Corporation.

 lock for opregion context */

 eclite ishtp client UUID: 6a19cc4b-d760-4de3-b14d-f25ebd0fbcd9 */

 ACPI DSM UUID: 91d936a7-1f01-49c6-a6b4-72f00ad8d8a5 */

/**

 * ecl_ish_cl_read() - Read data from eclite FW

 *

 * @opr_dev:  pointer to opregion device

 *

 * This function issues a read request to eclite FW and waits until it

 * receives a response. When response is received the read data is copied to

 * opregion buffer.

/**

 * ecl_ish_cl_write() - This function writes data to eclite FW.

 *

 * @opr_dev:  pointer to opregion device

 *

 * This function writes data to eclite FW.

 Find ECLite device and save reference */

 Got an event with wrong data_type, ignore it */

 Connect to FW client */

 Initialize ish client device */

 Register a handler for eclite fw events */

 Now init opregion handlers */

 Reprobe devices depending on ECLite - battery, fan, etc. */

	/* A reset is expected to call after an Sx. At this point

	 * we are not sure if the link is up or not to restore anything,

	 * so do nothing in resume path

 SPDX-License-Identifier: GPL-2.0

/*

 * Power-button driver for Basin Cove PMIC

 *

 * Copyright (c) 2019, Intel Corporation.

 * Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

 1 - release, 0 - press */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Copyright 2013 Matthew Garrett <mjg59@srcf.ucam.org>

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel INT0002 "Virtual GPIO" driver

 *

 * Copyright (C) 2017 Hans de Goede <hdegoede@redhat.com>

 *

 * Loosely based on android x86 kernel code which is:

 *

 * Copyright (c) 2014, Intel Corporation.

 *

 * Author: Dyut Kumar Sil <dyut.k.sil@intel.com>

 *

 * Some peripherals on Bay Trail and Cherry Trail platforms signal a Power

 * Management Event (PME) to the Power Management Controller (PMC) to wakeup

 * the system. When this happens software needs to clear the PME bus 0 status

 * bit in the GPE0a_STS register to avoid an IRQ storm on IRQ 9.

 *

 * This is modelled in ACPI through the INT0002 ACPI device, which is

 * called a "Virtual GPIO controller" in ACPI because it defines the event

 * handler to call when the PME triggers through _AEI and _L02 / _E02

 * methods as would be done for a real GPIO interrupt in ACPI. Note this

 * is a hack to define an AML event handler for the PME while using existing

 * ACPI mechanisms, this is not a real GPIO at all.

 *

 * This driver will bind to the INT0002 device, and register as a GPIO

 * controller, letting gpiolib-acpi.c call the _L02 handler as it would

 * for a real GPIO controller.

 For some reason the virtual GPIO pin tied to the GPE is numbered pin 2 */

/*

 * As this is not a real GPIO at all, but just a hack to model an event in

 * ACPI the get / set functions are dummy functions.

	/*

	 * Applying of the wakeup flag to our parent IRQ is delayed till system

	 * suspend, because we only want to do this when using s2idle.

 Menlow has a different INT0002 device? <sigh> */

	/*

	 * We directly request the irq here instead of passing a flow-handler

	 * to gpiochip_set_chained_irqchip, because the irq is shared.

	 * FIXME: augment this if we managed to pull handling of shared

	 * IRQs into gpiolib.

 This let us handle the parent IRQ in the driver */

	/*

	 * The INT0002 parent IRQ is often shared with the ACPI GPE IRQ, don't

	 * muck with it when firmware based suspend is used, otherwise we may

	 * cause spurious wakeups from firmware managed suspend.

 SPDX-License-Identifier: GPL-2.0

/*

 * Power-button driver for Dollar Cove TI PMIC

 * Copyright (C) 2014 Intel Corp

 * Copyright (c) 2017 Takashi Iwai <tiwai@suse.de>

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Copyright 2013 Matthew Garrett <mjg59@srcf.ucam.org>

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel BXT Whiskey Cove PMIC TMU driver

 *

 * Copyright (C) 2016 Intel Corporation. All rights reserved.

 *

 * This driver adds TMU (Time Management Unit) support for Intel BXT platform.

 * It enables the alarm wake-up functionality in the TMU unit of Whiskey Cove

 * PMIC.

 Read TMU interrupt reg */

 clear TMU irq */

 Unmask TMU second level Wake & System alarm */

 Mask TMU interrupts */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Intel HID event & 5 button array driver

 *

 *  Copyright (C) 2015 Alex Hung <alex.hung@canonical.com>

 *  Copyright (C) 2015 Andrew Lutomirski <luto@kernel.org>

 When NOT in tablet mode, VGBS returns with the flag 0x40 */

 In theory, these are HID usages. */

 1: LSuper (Page 0x07, usage 0xE3) -- unclear what to do */

 2: Toggle SW_ROTATE_LOCK -- easy to implement if seen in wild */

 13 has two different meanings in the spec -- ignore it. */

 27: wake -- needs special handling */

 5 button array notification value. */

 Press */

 Release */

 Press */

 Release */

 Press */

 Release */

 Press */

 Release */

 Press */

 Release */

/*

 * Some convertible use the intel-hid ACPI interface to report SW_TABLET_MODE,

 * these need to be compared via a DMI based authorization list because some

 * models have unreliable VGBS return which could cause incorrect

 * SW_TABLET_MODE report.

/*

 * Some devices, even non convertible ones, can send incorrect SW_TABLET_MODE

 * reports. Accept such reports only from devices in this list.

 Convertible */),

 Detachable */),

 Array terminator */

 All methods expects a package with one integer element */

 Enable|disable features - power button is always enabled */

 Query supported platform features */

 Enable|disable features - power button is always enabled */

 Setup input device for 5 button array */

 Setup input device for switches */

	/*

	 * Some convertible have unreliable VGBS return which could cause incorrect

	 * SW_TABLET_MODE report, in these cases we enable support when receiving

	 * the first event instead of during driver setup.

		/*

		 * Needed for wakeup from suspend-to-idle to work on some

		 * platforms that don't expose the 5-button array, but still

		 * send notifies with the power button event code to this

		 * device object on power button actions while suspended.

		/*

		 * Some devices send (duplicate) tablet-mode events when moved

		 * around even though the mode has not changed; and they do this

		 * even when suspended.

		 * Update the switch state in case it changed and then return

		 * without waking up to avoid spurious wakeups.

 Wake up on 5-button array events only. */

	/*

	 * Needed for suspend to work on some platforms that don't expose

	 * the 5-button array, but still send notifies with power button

	 * event code to this device object on power button actions.

	 *

	 * Report the power button press and release.

 0xC0 is for HID events, other values are for 5 button array */

 Check presence of 5 button array or v2 power button */

		/*

		 * This driver only implements "simple" mode.  There appear

		 * to be no other modes, but we should be paranoid and check

		 * for compatibility.

 See dual_accel_detect.h for more info on the dual_accel check. */

 Setup 5 button array */

 Setup switches for devices that we know VGBS return correctly */

 Call button load method to enable HID power button */

	/*

	 * In order for system wakeup to work, the EC GPE has to be marked as

	 * a wakeup one, so do that here (this setting will persist, but it has

	 * no effect until the wakeup mask is set for the EC GPE).

	/*

	 * Even if we failed to shut off the event stream, we can still

	 * safely detach from the device.

/*

 * Unfortunately, some laptops provide a _HID="INT33D5" device with

 * _CID="PNP0C02".  This causes the pnpacpi scan driver to claim the

 * ACPI node, so no platform device will be created.  The pnpacpi

 * driver rejects this device in subsequent processing, so no physical

 * node is created at all.

 *

 * As a workaround until the ACPI core figures out how to handle

 * this corner case, manually ask the ACPI platform device code to

 * claim the ACPI node.

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Uncore Frequency Setting

 * Copyright (c) 2019, Intel Corporation.

 * All rights reserved.

 *

 * Provide interface to set MSR 620 at a granularity of per die. On CPU online,

 * one control CPU is identified per die to read/write limit. This control CPU

 * is changed, if the CPU state is changed to offline. When the last CPU is

 * offline in a die then remove the sysfs object for that die.

 * The majority of actual code is related to sysfs create and read/write

 * attributes.

 *

 * Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>

/**

 * struct uncore_data -	Encapsulate all uncore data

 * @stored_uncore_data:	Last user changed MSR 620 value, which will be restored

 *			on system resume.

 * @initial_min_freq_khz: Sampled minimum uncore frequency at driver init

 * @initial_max_freq_khz: Sampled maximum uncore frequency at driver init

 * @control_cpu:	Designated CPU for a die to read/write

 * @valid:		Mark the data valid/invalid

 *

 * This structure is used to encapsulate all data related to uncore sysfs

 * settings for a die/package.

 Max instances for uncore data, one for each die */

 Storage for uncore data for all instances */

 Root of the all uncore sysfs kobjs */

 Stores the CPU mask of the target CPUs to use during uncore read/write */

 CPU online callback register instance */

 Mutex to control all mutual exclusions */

 Common function to read MSR 0x620 and read min/max */

 Common function to set min/max ratios to be used by sysfs callbacks */

 Caller provides protection */

 control cpu changed */

 Last CPU in this die is offline, make control cpu invalid */

 Check if there is an online cpu in the package for uncore MSR */

 Use this CPU on this die as a control CPU */

 Check if existing cpu is used for uncore MSRs */

 Find a new cpu to set uncore MSR */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for the Intel P-Unit Mailbox IPC mechanism

 *

 * (C) Copyright 2015 Intel Corporation

 *

 * The heart of the P-Unit is the Foxton microcontroller and its firmware,

 * which provide mailbox interface for power management usage.

 IPC Mailbox registers */

 bit field of interface register */

 base of interface and data registers */

/**

 * intel_punit_ipc_simple_command() - Simple IPC command

 * @cmd:	IPC command code.

 * @para1:	First 8bit parameter, set 0 if not used.

 * @para2:	Second 8bit parameter, set 0 if not used.

 *

 * Send a IPC command to P-Unit when there is no data transaction

 *

 * Return:	IPC error code or 0 on success.

/**

 * intel_punit_ipc_command() - IPC command with data and pointers

 * @cmd:	IPC command code.

 * @para1:	First 8bit parameter, set 0 if not used.

 * @para2:	Second 8bit parameter, set 0 if not used.

 * @in:		Input data, 32bit for BIOS cmd, two 32bit for GTD and ISPD.

 * @out:	Output data.

 *

 * Send a IPC command to P-Unit with data transaction

 *

 * Return:	IPC error code or 0 on success.

	/*

	 * The following resources are required

	 * - BIOS_IPC BASE_DATA

	 * - BIOS_IPC BASE_IFACE

	/*

	 * The following resources are optional

	 * - ISPDRIVER_IPC BASE_DATA

	 * - ISPDRIVER_IPC BASE_IFACE

	 * - GTDRIVER_IPC BASE_DATA

	 * - GTDRIVER_IPC BASE_IFACE

 Some modules are dependent on this, so init earlier */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Intel OakTrail Platform support

 *

 * Copyright (C) 2010-2011 Intel Corporation

 * Author: Yin Kangkai (kangkai.yin@intel.com)

 *

 * based on Compal driver, Copyright (C) 2008 Cezary Jackiewicz

 * <cezary.jackiewicz (at) gmail.com>, based on MSI driver

 * Copyright (C) 2006 Lennart Poettering <mzxreary (at) 0pointer (dot) de>

 *

 * This driver does below things:

 * 1. registers itself in the Linux backlight control in

 *    /sys/class/backlight/intel_oaktrail/

 *

 * 2. registers in the rfkill subsystem here: /sys/class/rfkill/rfkillX/

 *    for these components: wifi, bluetooth, wwan (3g), gps

 *

 * This driver might work on other products based on Oaktrail. If you

 * want to try it you can pass force=1 as argument to the module which

 * will force it to load even when the DMI data doesn't identify the

 * product as compatible.

/*

 * This is the devices status address in EC space, and the control bits

 * definition:

 *

 * (1 << 0):	Camera enable/disable, RW.

 * (1 << 1):	Bluetooth enable/disable, RW.

 * (1 << 2):	GPS enable/disable, RW.

 * (1 << 3):	WiFi enable/disable, RW.

 * (1 << 4):	WWAN (3G) enable/disable, RW.

 * (1 << 5):	Touchscreen enable/disable, Read Only.

/*

 * This is the address in EC space and commands used to control LCD backlight:

 *

 * Two steps needed to change the LCD backlight:

 *   1. write the backlight percentage into OT_EC_BL_BRIGHTNESS_ADDRESS;

 *   2. write OT_EC_BL_CONTROL_ON_DATA into OT_EC_BL_CONTROL_ADDRESS.

 *

 * To read the LCD back light, just read out the value from

 * OT_EC_BL_BRIGHTNESS_ADDRESS.

 *

 * LCD backlight brightness range: 0 - 100 (OT_EC_BL_BRIGHTNESS_MAX)

 rfkill */

 backlight */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Intel Virtual Button driver for Windows 8.1+

 *

 *  Copyright (C) 2016 AceLan Kao <acelan.kao@canonical.com>

 *  Copyright (C) 2016 Alex Hung <alex.hung@canonical.com>

 Returned when NOT in tablet mode on some HP Stream x360 11 models */

 When NOT in tablet mode, VGBS returns with the flag 0x40 */

 In theory, these are HID usages. */

 power key press */

 power key release */

 'Windows' key press */

 'Windows' key release */

 volume-up key press */

 volume-up key release */

 volume-down key press */

 volume-down key release */

 rotate-lock key press */

 rotate-lock key release */

	/*

	 * SW_DOCK should only be reported for docking stations, but DSDTs using the

	 * intel-vbtn code, always seem to use this for 2-in-1s / convertibles and set

	 * SW_DOCK=1 when in laptop-mode (in tandem with setting SW_TABLET_MODE=0).

	 * This causes userspace to think the laptop is docked to a port-replicator

	 * and to disable suspend-on-lid-close, which is undesirable.

	 * Map the dock events to KEY_IGNORE to avoid this broken SW_DOCK reporting.

 Docked */

 Undocked */

 Tablet */

 Laptop */

/*

 * Note this unconditionally creates the 2 input_dev-s and sets up

 * the sparse-keymaps. Only the registration is conditional on

 * have_buttons / have_switches. This is done so that the notify

 * handler can always call sparse_keymap_entry_from_scancode()

 * on the input_dev-s do determine the event type.

 Even=press, Odd=release */

 See dual_accel_detect.h for more info */

		/*

		 * Skip reporting an evdev event for button wake events,

		 * mirroring how the drivers/acpi/button.c code skips this too.

	/*

	 * Even press events are autorelease if there is no corresponding odd

	 * release event, or if the odd event is KE_IGNORE.

/*

 * There are several laptops (non 2-in-1) models out there which support VGBS,

 * but simply always return 0, which we translate to SW_TABLET_MODE=1. This in

 * turn causes userspace (libinput) to suppress events from the builtin

 * keyboard and touchpad, making the laptop essentially unusable.

 *

 * Since the problem of wrongly reporting SW_TABLET_MODE=1 in combination

 * with libinput, leads to a non-usable system. Where as OTOH many people will

 * not even notice when SW_TABLET_MODE is not being reported, a DMI based allow

 * list is used here. This list mainly matches on the chassis-type of 2-in-1s.

 *

 * There are also some 2-in-1s which use the intel-vbtn ACPI interface to report

 * SW_TABLET_MODE with a chassis-type of 8 ("Portable") or 10 ("Notebook"),

 * these are matched on a per model basis, since many normal laptops with a

 * possible broken VGBS ACPI-method also use these chassis-types.

 Convertible */),

 Detachable */),

 Array terminator */

 See dual_accel_detect.h for more info */

	/*

	 * In order for system wakeup to work, the EC GPE has to be marked as

	 * a wakeup one, so do that here (this setting will persist, but it has

	 * no effect until the wakeup mask is set for the EC GPE).

	/*

	 * Even if we failed to shut off the event stream, we can still

	 * safely detach from the device.

 SPDX-License-Identifier: GPL-2.0

/*

 * WMI Thunderbolt driver

 *

 * Copyright (C) 2017 Dell Inc. All Rights Reserved.

 SPDX-License-Identifier: GPL-2.0

/*

 * Slim Bootloader(SBL) firmware update signaling driver

 *

 * Slim Bootloader is a small, open-source, non UEFI compliant, boot firmware

 * optimized for running on certain Intel platforms.

 *

 * SBL exposes an ACPI-WMI device via /sys/bus/wmi/devices/<INTEL_WMI_SBL_GUID>.

 * This driver further adds "firmware_update_request" device attribute.

 * This attribute normally has a value of 0 and userspace can signal SBL

 * to update firmware, on next reboot, by writing a value of 1.

 *

 * More details of SBL firmware update process is available at:

 * https://slimbootloader.github.io/security/firmware-update.html

 May later be extended to support values other than 0 and 1 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Speed Select Interface: Mbox via MSR Interface

 * Copyright (c) 2019, Intel Corporation.

 * All rights reserved.

 *

 * Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>

/*

 * Based on experiments count is never more than 1, as the MSR overhead

 * is enough to finish the command. So here this is the worst case number.

 Poll for rb bit == 0 */

 Write DATA register */

 Write command register */

 Poll for rb bit == 0 */

 revisit, smp_call_function_single should be enough for atomic mailbox! */

	/*

	 * To complete mailbox command, we need to access two MSRs.

	 * So we don't want race to complete a mailbox transcation.

	 * Here smp_call ensures that msrl_update_func() has no race

	 * and also with wait flag, wait for completion.

	 * smp_call_function_single is using get_cpu() and put_cpu().

 Check presence of mailbox MSRs */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Speed Select Interface: MMIO Interface

 * Copyright (c) 2019, Intel Corporation.

 * All rights reserved.

 *

 * Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>

	/*

	 * Ensure that operation is complete on a PCI device to avoid read

	 * write race by using per PCI device mutex.

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Speed Select Interface: Mbox via PCI Interface

 * Copyright (c) 2019, Intel Corporation.

 * All rights reserved.

 *

 * Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>

/*

 * The average time to complete mailbox commands is less than 40us. Most of

 * the commands complete in few micro seconds. But the same firmware handles

 * requests from all power management features.

 * We can create a scenario where we flood the firmware with requests then

 * the mailbox response can be delayed for 100s of micro seconds. So define

 * two timeouts. One for average case and one for long.

 * If the firmware is taking more than average, just call cond_resched().

 Poll for rb bit == 0 */

 Write DATA register */

 Write command register */

 Poll for rb bit == 0 */

	/*

	 * Basically we are allowing one complete mailbox transaction on

	 * a mapped PCI device at a time.

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Speed Select Interface: Common functions

 * Copyright (c) 2019, Intel Corporation.

 * All rights reserved.

 *

 * Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>

/**

 * isst_store_cmd() - Store command to a hash table

 * @cmd: Mailbox command.

 * @sub_cmd: Mailbox sub-command or MSR id.

 * @mbox_cmd_type: Mailbox or MSR command.

 * @param: Mailbox parameter.

 * @data: Mailbox request data or MSR data.

 *

 * Stores the command to a hash table if there is no such command already

 * stored. If already stored update the latest parameter and data for the

 * command.

 *

 * Return: Return result of store to hash table, 0 for success, others for

 * failure.

/**

 * isst_resume_common() - Process Resume request

 *

 * On resume replay all mailbox commands and MSRs.

 *

 * Return: None.

/**

 * isst_if_mbox_cmd_invalid() - Check invalid mailbox commands

 * @cmd: Pointer to the command structure to verify.

 *

 * Invalid command to PUNIT to may result in instability of the platform.

 * This function has a whitelist of commands, which are allowed.

 *

 * Return: Return true if the command is invalid, else false.

/**

 * isst_if_mbox_cmd_set_req() - Check mailbox command is a set request

 * @cmd: Pointer to the command structure to verify.

 *

 * Check if the given mail box level is set request and not a get request.

 *

 * Return: Return true if the command is set_req, else false.

 For BUS 0 and BUS 1 only, which we need for PUNIT interface */

	/*

	 * If there is no numa matched pci_dev, then there can be following cases:

	 * 1. CONFIG_NUMA is not defined: In this case if there is only single device

	 *    match, then we don't need numa information. Simply return last match.

	 *    Othewise return NULL.

	 * 2. NUMA information is not exposed via _SEG method. In this case it is similar

	 *    to case 1.

	 * 3. Numa information doesn't match with CPU numa node and more than one match

	 *    return NULL.

/**

 * isst_if_get_pci_dev() - Get the PCI device instance for a CPU

 * @cpu: Logical CPU number.

 * @bus_number: The bus number assigned by the hardware.

 * @dev: The device number assigned by the hardware.

 * @fn: The function number assigned by the hardware.

 *

 * Using cached bus information, find out the PCI device for a bus number,

 * device and function.

 *

 * Return: Return pci_dev pointer or NULL.

 This is not a fatal error on MSR mailbox only I/F */

 Each multi command has u32 command count as the first field */

 cb->offset points to start of the command after the command count */

 Fail open, if a module is going away */

/**

 * isst_if_cdev_register() - Register callback for IOCTL

 * @device_type: The device type this callback handling.

 * @cb:	Callback structure.

 *

 * This function registers a callback to device type. On very first call

 * it will register a misc device, which is used for user kernel interface.

 * Other calls simply increment ref count. Registry will fail, if the user

 * already opened misc device for operation. Also if the misc device

 * creation failed, then it will not try again and all callers will get

 * failure code.

 *

 * Return: Return the return value from the misc creation device or -EINVAL

 * for unsupported device type.

/**

 * isst_if_cdev_unregister() - Unregister callback for IOCTL

 * @device_type: The device type to unregister.

 *

 * This function unregisters the previously registered callback. If this

 * is the last callback unregistering, then misc device is removed.

 *

 * Return: None.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2021, Intel Corporation.

/**

 * get_int_value: Retrieve integer values from ACPI Object

 * @obj: acpi_object pointer which has the integer value

 * @out: output pointer will get integer value

 *

 * Function is used to retrieve integer value from acpi object.

 *

 * Return:

 * * 0 on success

 * * -EIO if there is an issue in acpi_object passed.

/**

 * update_sar_data: sar data is updated based on regulatory mode

 * @context: pointer to driver context structure

 *

 * sar_data is updated based on regulatory value

 * context->reg_value will never exceed MAX_REGULATORY

/**

 * parse_package: parse acpi package for retrieving SAR information

 * @context: pointer to driver context structure

 * @item : acpi_object pointer

 *

 * Given acpi_object is iterated to retrieve information for each device mode.

 * If a given package corresponding to a specific device mode is faulty, it is

 * skipped and the specific entry in context structure will have the default value

 * of zero. Decoding of subsequent device modes is realized by having "continue"

 * statements in the for loop on encountering error in parsing given device mode.

 *

 * Return:

 * AE_OK if success

 * AE_ERROR on error

/**

 * sar_get_device_mode: Extraction of information from BIOS via DSM calls

 * @device: ACPI device for which to retrieve the data

 *

 * Retrieve the current device mode information from the BIOS.

 *

 * Return:

 * AE_OK on success

 * AE_ERROR on error

 SPDX-License-Identifier: GPL-2.0

/*

 * Dummy driver for Intel's Image Signal Processor found on Bay Trail

 * and Cherry Trail devices. The sole purpose of this driver is to allow

 * the ISP to be put in D3.

 *

 * Copyright (C) 2018 Hans de Goede <hdegoede@redhat.com>

 *

 * Based on various non upstream patches for ISP support:

 * Copyright (C) 2010-2017 Intel Corporation. All rights reserved.

 * Copyright (c) 2010 Silicon Hive www.siliconhive.com.

 PCI configuration regs */

 IOSF BT_MBI_UNIT_PMC regs */

 Write to ISPSSPM0 bit[1:0] to power on/off the IUNIT */

	/*

	 * There should be no IUNIT access while power-down is

	 * in progress. HW sighting: 4567865.

	 * Wait up to 50 ms for the IUNIT to shut down.

	 * And we do the same for power on.

 Wait until ISPSSPM0 bit[25:24] shows the right value */

	/*

	 * MRFLD IUNIT DPHY is located in an always-power-on island

	 * MRFLD HW design need all CSI ports are disabled before

	 * powering down the IUNIT.

	/*

	 * We lose config space access when punit power gates

	 * the ISP. Can't use pci_set_power_state() because

	 * pmcsr won't actually change when we write to it.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for controlling LEDs for cameras connected to the Intel atomisp2

 * The main purpose of this driver is to turn off LEDs which are on at boot.

 *

 * Copyright (C) 2020 Hans de Goede <hdegoede@redhat.com>

 This must be leds-gpio as the leds-gpio driver binds to the name */

 Terminating entry */

/*

 * The ACPI INIT method from Asus WMI's code on the T100TA and T200TA turns the

 * LED on (without the WMI interface allowing further control over the LED).

 * Ensure we are loaded after asus-nb-wmi so that we turn the LED off again.

 SPDX-License-Identifier: GPL-2.0

 Author: Dan Scally <djrscally@gmail.com> */

 Force software reset */

/** skl_int3472_tps68470_calc_type: Check what platform a device is designed for

 * @adev: A pointer to a &struct acpi_device

 *

 * Check CLDB buffer against the PMIC's adev. If present, then we check

 * the value of control_logic_type field and follow one of the

 * following scenarios:

 *

 *	1. No CLDB - likely ACPI tables designed for ChromeOS. We

 *	create platform devices for the GPIOs and OpRegion drivers.

 *

 *	2. CLDB, with control_logic_type = 2 - probably ACPI tables

 *	made for Windows 2-in-1 platforms. Register pdevs for GPIO,

 *	Clock and Regulator drivers to bind to.

 *

 *	3. Any other value in control_logic_type, we should never have

 *	gotten to this point; fail probe and return.

 *

 * Return:

 * * 1		Device intended for ChromeOS

 * * 2		Device intended for Windows

 * * -EINVAL	Where @adev has an object named CLDB but it does not conform to

 *		our expectations

	/*

	 * A CLDB buffer that exists, but which does not match our expectations

	 * should trigger an error so we don't blindly continue.

 SPDX-License-Identifier: GPL-2.0

 Author: Dan Scally <djrscally@gmail.com> */

 SPDX-License-Identifier: GPL-2.0

 Author: Dan Scally <djrscally@gmail.com> */

/*

 * 79234640-9e10-4fea-a5c1-b5aa8b19756f

 * This _DSM GUID returns information about the GPIO lines mapped to a

 * discrete INT3472 device. Function number 1 returns a count of the GPIO

 * lines that are mapped. Subsequent functions return 32 bit ints encoding

 * information about the GPIO line, including its purpose.

/*

 * 822ace8f-2814-4174-a56b-5f029fe079ee

 * This _DSM GUID returns a string from the sensor device, which acts as a

 * module identifier.

/*

 * Here follows platform specific mapping information that we can pass to

 * the functions mapping resources to the sensors. Where the sensors have

 * a power enable pin defined in DSDT we need to provide a supply name so

 * the sensor drivers can find the regulator. The device name will be derived

 * from the sensor's ACPI device within the code. Optionally, we can provide a

 * NULL terminated array of function name mappings to deal with any platform

 * specific deviations from the documented behaviour of GPIOs.

 *

 * Map a GPIO function name to NULL to prevent the driver from mapping that

 * GPIO at all.

 Lenovo Miix 510-12ISK - OV2680, Front */

 Lenovo Miix 510-12ISK - OV5648, Rear */

 Surface Go 1&2 - OV5693, Front */

 Functions mapped to NULL should not be mapped to the sensor */

/**

 * skl_int3472_handle_gpio_resources: Map PMIC resources to consuming sensor

 * @ares: A pointer to a &struct acpi_resource

 * @data: A pointer to a &struct int3472_discrete_device

 *

 * This function handles GPIO resources that are against an INT3472

 * ACPI device, by checking the value of the corresponding _DSM entry.

 * This will return a 32bit int, where the lowest byte represents the

 * function of the GPIO pin:

 *

 * 0x00 Reset

 * 0x01 Power down

 * 0x0b Power enable

 * 0x0c Clock enable

 * 0x0d Privacy LED

 *

 * There are some known platform specific quirks where that does not quite

 * hold up; for example where a pin with type 0x01 (Power down) is mapped to

 * a sensor pin that performs a reset function or entries in _CRS and _DSM that

 * do not actually correspond to a physical connection. These will be handled

 * by the mapping sub-functions.

 *

 * GPIOs will either be mapped directly to the sensor device or else used

 * to create clocks and regulators via the usual frameworks.

 *

 * Return:

 * * 1		- To continue the loop

 * * 0		- When all resources found are handled properly.

 * * -EINVAL	- If the resource is not a GPIO IO resource

 * * -ENODEV	- If the resource has no corresponding _DSM entry

 * * -Other	- Errors propagated from one of the sub-functions.

	/*

	 * ngpios + 2 because the index of this _DSM function is 1-based and

	 * the first function is just a count.

	/*

	 * No error check, because not having a sensor config is not necessarily

	 * a failure mode.

	/*

	 * If we find no clock enable GPIO pin then the privacy LED won't work.

	 * We've never seen that situation, but it's possible. Warn the user so

	 * it's clear what's happened.

 Max num GPIOs we've seen plus a terminator */

	/*

	 * Initialising this list means we can call gpiod_remove_lookup_table()

	 * in failure paths without issue.

 SPDX-License-Identifier: GPL-2.0

 Author: Dan Scally <djrscally@gmail.com> */

/*

 * The regulators have to have .ops to be valid, but the only ops we actually

 * support are .enable and .disable which are handled via .ena_gpiod. Pass an

 * empty struct to clear the check without lying about capabilities.

	/*

	 * We're just turning a GPIO on to enable the clock, which operation

	 * has the potential to sleep. Given .enable() cannot sleep, but

	 * .prepare() can, we toggle the GPIO in .prepare() instead. Thus,

	 * nothing to do here.

 Likewise, nothing to do here... */

 report rate as 0 on error */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel PMC Core platform init

 * Copyright (c) 2019, Google Inc.

 * Author - Rajat Jain

 *

 * This code instantiates platform devices for intel_pmc_core driver, only

 * on supported platforms that may not have the ACPI devices in the ACPI tables.

 * No new platforms should be added here, because we expect that new platforms

 * should all have the ACPI device, which is the preferred way of enumeration.

/*

 * intel_pmc_core_platform_ids is the list of platforms where we want to

 * instantiate the platform_device if not already instantiated. This is

 * different than intel_pmc_core_ids in intel_pmc_core.c which is the

 * list of platforms that the driver supports for pmc_core device. The

 * other list may grow, but this list should not.

 Skip creating the platform device if ACPI already has a device */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Core SoC Power Management Controller Driver

 *

 * Copyright (c) 2016, Intel Corporation.

 * All Rights Reserved.

 *

 * Authors: Rajneesh Bhardwaj <rajneesh.bhardwaj@intel.com>

 *          Vishwanath Somayaji <vishwanath.somayaji@intel.com>

 PKGC MSRs are common across Intel Core SoCs */

	/*

	 * Check intel_pmc_core_ids[] users of spt_reg_map for

	 * a list of core SoCs using this.

 EVA is Enterprise Value Add, doesn't really exist on PCH */

 Below two cannot be used for LTR_IGNORE */

 Cannon Lake: PGD PFET Enable Ack Status Register(s) bitmap */

	/*

	 * Check intel_pmc_core_ids[] users of cnp_reg_map for

	 * a list of core SoCs using this.

	/*

	 * Check intel_pmc_core_ids[] users of icl_reg_map for

	 * a list of core SoCs using this.

	/*

	 * Check intel_pmc_core_ids[] users of tgl_reg_map for

	 * a list of core SoCs using this.

 EVA is Enterprise Value Add, doesn't really exist on PCH */

	/*

	 * Check intel_pmc_core_ids[] users of cnp_reg_map for

	 * a list of core SoCs using this.

 Below two cannot be used for LTR_IGNORE */

 Alder Lake: PGD PFET Enable Ack Status Register(s) bitmap */

	/*

	 * Check intel_pmc_core_ids[] users of cnp_reg_map for

	 * a list of core SoCs using this.

 EVA is Enterprise Value Add, doesn't really exist on PCH */

	/*

	 * Check intel_pmc_core_ids[] users of cnp_reg_map for

	 * a list of core SoCs using this.

 Below two cannot be used for LTR_IGNORE */

 check if CF9 is locked */

 write CF9 global reset bit */

 allow only CF9 writes */

 Nothing */

 This function should return link status, 0 means ready */

 Observed PMC HW response latency for MTPMC-MFPMC is ~10 ms */

	/*

	 * As per PCIE specification supporting document

	 * ECN_LatencyTolnReporting_14Aug08.pdf the Latency

	 * Tolerance Reporting data payload is encoded in a

	 * 3 bit scale and 10 bit value fields. Values are

	 * multiplied by the indicated scale to yield an absolute time

	 * value, expressible in a range from 1 nanosecond to

	 * 2^25*(2^10-1) = 34,326,183,936 nanoseconds.

	 *

	 * scale encoding is as follows:

	 *

	 * ----------------------------------------------

	 * |scale factor	|	Multiplier (ns)	|

	 * ----------------------------------------------

	 * |	0		|	1		|

	 * |	1		|	32		|

	 * |	2		|	1024		|

	 * |	3		|	32768		|

	 * |	4		|	1048576		|

	 * |	5		|	33554432	|

	 * |	6		|	Invalid		|

	 * |	7		|	Invalid		|

	 * ----------------------------------------------

 Display the header */

 Loop over maps */

		/*

		 * Capture the requirements and create a mask so that we only

		 * show an element if it's required for at least one of the

		 * enabled low power modes

 Get the last latched status for this map */

  Loop over elements in this map */

				/*

				 * Not required for any enabled states

				 * so don't display

 Display the element name in the first column */

 Loop over the enabled states and display if required */

 In Status column, show the last captured state of this agent */

	/*

	 * Allowed strings are:

	 *	Any enabled substate, e.g. 'S0i2.0'

	 *	'c10'

	 *	'clear'

 Check string matches enabled mode */

	/*

	 * For LPM mode latching we set the latch enable bit and selected mode

	 * and clear everything else.

	/*

	 * Each byte contains the priority level for 2 modes (7:4 and 3:0).

	 * In a 32 bit register this allows for describing 8 modes. Store the

	 * levels and look for values out of range.

 Check that we have unique values */

 Use LPM Maps to indicate support for substates */

 Read 32 bit LPM_PRI register */

	/*

	 * If lpm_pri value passes verification, then override the default

	 * modes here. Otherwise stick with the default.

 Get list of modes in priority order */

	/*

	 * Loop through all modes from lowest to highest priority,

	 * and capture all enabled modes in order

/*

 * This quirk can be used on those platforms where

 * the platform BIOS enforces 24Mhz crystal to shutdown

 * before PMC can assert SLP_S0#.

 24MHz Crystal Shutdown Qualification Disable */

 Low Voltage Mode Enable */

	/*

	 * Coffee Lake has CPU ID of Kaby Lake and Cannon Lake PCH. So here

	 * Sunrisepoint PCH regmap can't be used. Use Cannon Lake PCH regmap

	 * in this case.

	/*

	 * On TGL and ADL, due to a hardware limitation, the GBE LTR blocks PC10

	 * when a cable is attached. Tell the PMC to ignore it.

 No warnings on S0ix failures */

 Check if the syspend will actually use S0ix */

 Save PC10 residency for checking later */

 Save S0ix residency for checking later */

 S0ix failed because of PC10 entry failure */

 The real interesting case - S0ix failed - lets ask PMC why. */

 _HID for Intel Power Engine, _CID PNP0D80*/

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Platform Monitory Technology Telemetry driver

 *

 * Copyright (c) 2020, Intel Corporation.

 * All Rights Reserved.

 *

 * Author: "David E. Box" <david.e.box@linux.intel.com>

 size is in bytes */

 Used by client hardware to identify a fixed telemetry entry*/

 Size is measured in DWORDS, but accessor returns bytes */

	/*

	 * Some devices may expose non-functioning entries that are

	 * reserved for future use. They have zero size. Do not fail

	 * probe for these. Just ignore them.

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Platform Monitory Technology Telemetry driver

 *

 * Copyright (c) 2020, Intel Corporation.

 * All Rights Reserved.

 *

 * Author: "Alexander Duyck" <alexander.h.duyck@linux.intel.com>

/*

 * Early implementations of PMT on client platforms have some

 * differences from the server platforms (which use the Out Of Band

 * Management Services Module OOBMSM). This list tracks those

 * platforms as needed to handle those differences. Newer client

 * platforms are expected to be fully compatible with server.

 ADL */

 DG1 */

 TGL */

/*

 * sysfs

	/*

	 * The base offset should always be 8 byte aligned.

	 *

	 * For non-local access types the lower 3 bits of base offset

	 * contains the index of the base address register where the

	 * telemetry can be found.

 Local access and BARID only for now */

		/*

		 * For access_type LOCAL, the base address is as follows:

		 * base address = end of discovery region + base offset

		/*

		 * Some hardware use a different calculation for the base address

		 * when access_type == ACCESS_LOCAL. On the these systems

		 * ACCCESS_LOCAL refers to an address in the same BAR as the

		 * header but at a fixed offset. But as the header address was

		 * supplied to the driver, we don't know which BAR it was in.

		 * So search for the bar whose range includes the header address.

		/*

		 * If another BAR was specified then the base offset

		 * represents the offset within that BAR. SO retrieve the

		 * address from the parent PCI device and add offset.

 if size is 0 assume no data buffer, so no file needed */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Platform Monitoring Technology Crashlog driver

 *

 * Copyright (c) 2020, Intel Corporation.

 * All Rights Reserved.

 *

 * Author: "Alexander Duyck" <alexander.h.duyck@linux.intel.com>

 Crashlog discovery header types */

 Control Flags */

/*

 * Bits 29 and 30 control the state of bit 31.

 *

 * Bit 29 will clear bit 31, if set, allowing a new crashlog to be captured.

 * Bit 30 will immediately trigger a crashlog to be generated, setting bit 31.

 * Bit 31 is the read-only status with a 1 indicating log is complete.

 Crashlog Discovery Header */

 size is in bytes */

 entry must be first member of struct */

/*

 * I/O

 return current value of the crashlog complete flag */

 return current value of the crashlog disabled flag */

	/*

	 * Currently we only recognize OOBMSM version 0 devices.

	 * We can ignore all other crashlog devices in the system.

 clear trigger bits so we are only modifying disable flag */

/*

 * sysfs

 we cannot trigger a new crash if one is still pending */

 if device is currently disabled, return busy */

 initialize control mutex */

 Size is measured in DWORDS, but accessor returns bytes */

/*

 * initialization

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Cherry Trail ACPI INT33FE pseudo device driver

 *

 * Copyright (C) 2017 Hans de Goede <hdegoede@redhat.com>

 *

 * Some Intel Cherry Trail based device which ship with Windows 10, have

 * this weird INT33FE ACPI device with a CRS table with 4 I2cSerialBusV2

 * resources, for 4 different chips attached to various I²C buses:

 * 1. The Whiskey Cove PMIC, which is also described by the INT34D3 ACPI device

 * 2. Maxim MAX17047 Fuel Gauge Controller

 * 3. FUSB302 USB Type-C Controller

 * 4. PI3USB30532 USB switch

 *

 * So this driver is a stub / pseudo driver whose only purpose is to

 * instantiate I²C clients for chips 2 - 4, so that standard I²C drivers

 * for these chips can bind to the them.

/*

 * Grrr, I severely dislike buggy BIOS-es. At least one BIOS enumerates

 * the max17047 both through the INT33FE ACPI device (it is right there

 * in the resources table) as well as through a separate MAX17047 device.

 *

 * These helpers are used to work around this by checking if an I²C client

 * for the max17047 has already been registered.

 The MAX17047 ACPI node doesn't have an UID, so we don't check that */

/*

 * We are not using inline property here because those are constant,

 * and we need to adjust this one at runtime to point to real

 * software node.

 First let's find the GPU PCI device */

 Then the DP-2 child device node */

	/*

	 * There is no ACPI device node for the USB role mux, so we need to wait

	 * until the mux driver has created software node for the mux device.

	 * It means we depend on the mux driver. This function will return

	 * -EPROBE_DEFER until the mux device is registered.

	/*

	 * Update node used in "usb-role-switch" property. Note that we

	 * rely on software_node_register_nodes() to use the original

	 * instance of properties instead of copying them.

 The devices that are not created in this driver need extra steps. */

	/*

	 * The DP connector does have ACPI device node. In this case we can just

	 * find that ACPI node and assign our node as the secondary node to it.

 Pre-existing I²C client for the max17047, add device properties */

 And re-probe to get the new device properties applied */

	/*

	 * We expect the WC PMIC to be paired with a TI bq24292i charger-IC.

	 * We check for the bq24292i vbus regulator here, this has 2 purposes:

	 * 1) The bq24292i allows charging with up to 12V, setting the fusb302's

	 *    max-snk voltage to 12V with another charger-IC is not good.

	 * 2) For the fusb302 driver to get the bq24292i vbus regulator, the

	 *    regulator-map, which is part of the bq24292i regulator_init_data,

	 *    must be registered before the fusb302 is instantiated, otherwise

	 *    it will end up with a dummy-regulator.

	 * Note "cht_wc_usb_typec_vbus" comes from the regulator_init_data

	 * which is defined in i2c-cht-wc.c from where the bq24292i I²C client

	 * gets instantiated. We use regulator_get_optional here so that we

	 * don't end up getting a dummy-regulator ourselves.

 The FUSB302 uses the IRQ at index 1 and is the only IRQ user */

 Work around BIOS bug, see comment on cht_int33fe_check_for_max17047() */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Cherry Trail ACPI INT33FE pseudo device driver for devices with

 * USB Micro-B connector (e.g. without of FUSB302 USB Type-C controller)

 *

 * Copyright (C) 2019 Yauhen Kharuzhy <jekhor@gmail.com>

 *

 * At least one Intel Cherry Trail based device which ship with Windows 10

 * (Lenovo YogaBook YB1-X91L/F tablet), have this weird INT33FE ACPI device

 * with a CRS table with 2 I2cSerialBusV2 resources, for 2 different chips

 * attached to various i2c busses:

 * 1. The Whiskey Cove PMIC, which is also described by the INT34D3 ACPI device

 * 2. TI BQ27542 Fuel Gauge Controller

 *

 * So this driver is a stub / pseudo driver whose only purpose is to

 * instantiate i2c-client for battery fuel gauge, so that standard i2c driver

 * for these chip can bind to the it.

 SPDX-License-Identifier: GPL-2.0

/*

 * Common code for Intel Cherry Trail ACPI INT33FE pseudo device drivers

 * (USB Micro-B and Type-C connector variants).

 *

 * Copyright (c) 2019 Yauhen Kharuzhy <jekhor@gmail.com>

	/*

	 * The same ACPI HID is used for different configurations check PTYP

	 * to ensure that we are dealing with the expected config.

 Check presence of INT34D3 (hardware-rev 3) expected for ptype == 4 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel SOC Telemetry Platform Driver: Currently supports APL

 * Copyright (c) 2015, Intel Corporation.

 * All Rights Reserved.

 *

 * This file provides the platform specific telemetry implementation for APL.

 * It used the PUNIT and PMC IPC interfaces for configuring the counters.

 * The accumulated results are fetched from SRAM.

/*

 * The following counters are programmed by default during setup.

 * Only 20 allocated to kernel driver

 APL specific Data */

 GLK specific Data */

 Get telemetry EVENT CTL */

 Disable Telemetry */

 Reset Everything */

 Clear All Events */

 Configure Events */

 Re-Configure Everything */

 Clear All Events */

 Configure Events */

 Add some Events */

 Configure Events */

 Enable Periodic Telemetry Events and enable SRAM trace */

 PSS Config */

 Get telemetry EVENT CTL */

 Disable Telemetry */

 Reset Everything */

 Clear All Events */

 Configure Events */

 Re-Configure Everything */

 Clear All Events */

 Configure Events */

 Add some Events */

 Configure Events */

 Enable Periodic Telemetry Events and enable SRAM trace */

 Get telemetry Info */

 PUNIT Mailbox Setup */

 Get telemetry Info */

 Get telemetry EVENT CTL */

 Disable Telemetry */

 Enable Periodic Telemetry Events and enable SRAM trace */

 Get telemetry EVENT CTL */

 Disable Telemetry */

 Enable Periodic Telemetry Events and enable SRAM trace */

 Invalid evt-id array specified via length mismatch */

 Elements matched */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel SOC Telemetry debugfs Driver: Currently supports APL

 * Copyright (c) 2015, Intel Corporation.

 * All Rights Reserved.

 *

 * This file provides the debugfs interfaces for telemetry.

 * /sys/kernel/debug/telemetry/pss_info: Shows Primary Control Sub-Sys Counters

 * /sys/kernel/debug/telemetry/ioss_info: Shows IO Sub-System Counters

 * /sys/kernel/debug/telemetry/soc_states: Shows SoC State

 * /sys/kernel/debug/telemetry/pss_trace_verbosity: Read and Change Tracing

 *				Verbosity via firmware

 * /sys/kernel/debug/telemetry/ioss_race_verbosity: Write and Change Tracing

 *				Verbosity via firmware

 ApolloLake SoC Event-IDs */

 Max events in bitmap to check for */

 Bitmap definitions for default counters in APL */

 Bitmap Data */

 IDs */

 Fetch PSS IDLE State */

	/*

	 * Due to some design limitations in the firmware, sometimes the

	 * counters do not get updated by the time we reach here. As a

	 * workaround, we try to see if this was a genuine case of sleep

	 * failure or not by cross-checking from PMC GCR registers directly.

 Only APL supported for now */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel SoC Core Telemetry Driver

 * Copyright (C) 2015, Intel Corporation.

 * All Rights Reserved.

 *

 * Telemetry Framework provides platform related PM and performance statistics.

 * This file provides the core telemetry API implementation.

/**

 * telemetry_update_events() - Update telemetry Configuration

 * @pss_evtconfig: PSS related config. No change if num_evts = 0.

 * @pss_evtconfig: IOSS related config. No change if num_evts = 0.

 *

 * This API updates the IOSS & PSS Telemetry configuration. Old config

 * is overwritten. Call telemetry_reset_events when logging is over

 * All sample period values should be in the form of:

 * bits[6:3] -> value; bits [0:2]-> Exponent; Period = (Value *16^Exponent)

 *

 * Return: 0 success, < 0 for failure

/**

 * telemetry_set_sampling_period() - Sets the IOSS & PSS sampling period

 * @pss_period:  placeholder for PSS Period to be set.

 *		 Set to 0 if not required to be updated

 * @ioss_period: placeholder for IOSS Period to be set

 *		 Set to 0 if not required to be updated

 *

 * All values should be in the form of:

 * bits[6:3] -> value; bits [0:2]-> Exponent; Period = (Value *16^Exponent)

 *

 * Return: 0 success, < 0 for failure

/**

 * telemetry_get_sampling_period() - Get IOSS & PSS min & max sampling period

 * @pss_min_period:  placeholder for PSS Min Period supported

 * @pss_max_period:  placeholder for PSS Max Period supported

 * @ioss_min_period: placeholder for IOSS Min Period supported

 * @ioss_max_period: placeholder for IOSS Max Period supported

 *

 * All values should be in the form of:

 * bits[6:3] -> value; bits [0:2]-> Exponent; Period = (Value *16^Exponent)

 *

 * Return: 0 success, < 0 for failure

/**

 * telemetry_reset_events() - Restore the IOSS & PSS configuration to default

 *

 * Return: 0 success, < 0 for failure

/**

 * telemetry_get_eventconfig() - Returns the pss and ioss events enabled

 * @pss_evtconfig: Pointer to PSS related configuration.

 * @pss_evtconfig: Pointer to IOSS related configuration.

 * @pss_len:	   Number of u32 elements allocated for pss_evtconfig array

 * @ioss_len:	   Number of u32 elements allocated for ioss_evtconfig array

 *

 * Return: 0 success, < 0 for failure

/**

 * telemetry_add_events() - Add IOSS & PSS configuration to existing settings.

 * @num_pss_evts:  Number of PSS Events (<29) in pss_evtmap. Can be 0.

 * @num_ioss_evts: Number of IOSS Events (<29) in ioss_evtmap. Can be 0.

 * @pss_evtmap:    Array of PSS Event-IDs to Enable

 * @ioss_evtmap:   Array of PSS Event-IDs to Enable

 *

 * Events are appended to Old Configuration. In case of total events > 28, it

 * returns error. Call telemetry_reset_events to reset after eventlog done

 *

 * Return: 0 success, < 0 for failure

/**

 * telemetry_read_events() - Fetches samples as specified by evtlog.telem_evt_id

 * @telem_unit: Specify whether IOSS or PSS Read

 * @evtlog:     Array of telemetry_evtlog structs to fill data

 *		evtlog.telem_evt_id specifies the ids to read

 * @len:	Length of array of evtlog

 *

 * Return: number of eventlogs read for success, < 0 for failure

/**

 * telemetry_raw_read_events() - Fetch samples specified by evtlog.telem_evt_id

 * @telem_unit: Specify whether IOSS or PSS Read

 * @evtlog:	Array of telemetry_evtlog structs to fill data

 *		evtlog.telem_evt_id specifies the ids to read

 * @len:	Length of array of evtlog

 *

 * The caller must take care of locking in this case.

 *

 * Return: number of eventlogs read for success, < 0 for failure

/**

 * telemetry_read_eventlog() - Fetch the Telemetry log from PSS or IOSS

 * @telem_unit: Specify whether IOSS or PSS Read

 * @evtlog:	Array of telemetry_evtlog structs to fill data

 * @len:	Length of array of evtlog

 *

 * Return: number of eventlogs read for success, < 0 for failure

/**

 * telemetry_raw_read_eventlog() - Fetch the Telemetry log from PSS or IOSS

 * @telem_unit: Specify whether IOSS or PSS Read

 * @evtlog:	Array of telemetry_evtlog structs to fill data

 * @len:	Length of array of evtlog

 *

 * The caller must take care of locking in this case.

 *

 * Return: number of eventlogs read for success, < 0 for failure

/**

 * telemetry_get_trace_verbosity() - Get the IOSS & PSS Trace verbosity

 * @telem_unit: Specify whether IOSS or PSS Read

 * @verbosity:	Pointer to return Verbosity

 *

 * Return: 0 success, < 0 for failure

/**

 * telemetry_set_trace_verbosity() - Update the IOSS & PSS Trace verbosity

 * @telem_unit: Specify whether IOSS or PSS Read

 * @verbosity:	Verbosity to set

 *

 * Return: 0 success, < 0 for failure

/**

 * telemetry_set_pltdata() - Set the platform specific Data

 * @ops:	Pointer to ops structure

 * @pltconfig:	Platform config data

 *

 * Usage by other than telemetry pltdrv module is invalid

 *

 * Return: 0 success, < 0 for failure

/**

 * telemetry_clear_pltdata() - Clear the platform specific Data

 *

 * Usage by other than telemetry pltdrv module is invalid

 *

 * Return: 0 success, < 0 for failure

/**

 * telemetry_get_pltdata() - Return telemetry platform config

 *

 * May be used by other telemetry modules to get platform specific

 * configuration.

/**

 * telemetry_get_evtname() - Checkif platform config is valid

 * @telem_unit:	Telemetry Unit to check

 * @name:	Array of character pointers to contain name

 * @len:	length of array name provided by user

 *

 * Usage by other than telemetry debugfs module is invalid

 *

 * Return: 0 success, < 0 for failure

/*

 * Copyright (C) 2010 Dell Inc.

 * Louis Davis <louis_davis@dell.com>

 * Jim Dailey <jim_dailey@dell.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License as

 * published by the Free Software Foundation.

 *

 Error Result Codes: */

 Device ID */

 LED Commands */

 Length of command */

 Init to  INTERFACE_ERROR */

 Device ID */

 Command */

 not used */

 not used */

 Length of command */

 Init to  INTERFACE_ERROR */

 Device ID */

 Command */

 not used */

 not used */

 Length of command */

 Init to  INTERFACE_ERROR */

 Device ID */

 Command */

 blink on in eigths of a second */

 blink off in eights of a second */

	/*

	 * The Dell LED delay is based on 125ms intervals.

	 * Need to round up to next interval.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Dell WMI descriptor driver

 *

 * Copyright (C) 2017 Dell Inc. All Rights Reserved.

/*

 * Descriptor buffer is 128 byte long and contains:

 *

 *       Name             Offset  Length  Value

 * Vendor Signature          0       4    "DELL"

 * Object Signature          4       4    " WMI"

 * WMI Interface Version     8       4    <version>

 * WMI buffer length        12       4    <length>

 * WMI hotfix number        16       4    <hotfix>

	/* Although it's not technically a failure, this would lead to

	 * unexpected behavior

 SPDX-License-Identifier: GPL-2.0-only

/*

 * dell_rbu.c

 * Bios Update driver for Dell systems

 * Author: Dell Inc

 *         Abhay Salunke <abhay_salunke@dell.com>

 *

 * Copyright (C) 2005 Dell Inc.

 *

 * Remote BIOS Update (rbu) driver is used for updating DELL BIOS by

 * creating entries in the /sys file systems on Linux 2.6 and higher

 * kernels. The driver supports two mechanism to update the BIOS namely

 * contiguous and packetized. Both these methods still require having some

 * application to set the CMOS bit indicating the BIOS to update itself

 * after a reboot.

 *

 * Contiguous method:

 * This driver writes the incoming data in a monolithic image by allocating

 * contiguous physical pages large enough to accommodate the incoming BIOS

 * image size.

 *

 * Packetized method:

 * The driver writes the incoming packet image by allocating a new packet

 * on every time the packet data is written. This driver requires an

 * application to break the BIOS image in to fixed sized packet chunks.

 *

 * See Documentation/admin-guide/dell_rbu.rst for more info.

	/*

	 * BIOS errata mean we cannot allocate packets below 1MB or they will

	 * be overwritten by BIOS.

	 *

	 * array to temporarily hold packets

	 * that are below the allocation floor

	 *

	 * NOTE: very simplistic because we only need the floor to be at 1MB

	 *       due to BIOS errata. This shouldn't be used for higher floors

	 *       or you will run out of mem trying to allocate the array.

	/*

	 * set to uncachable or it may never get written back before reboot

 packets may not have fixed size */

 initialize the newly created packet headers */

 always free packet array */

 if error, free data */

 packetize the hunk */

 this is the last packet */

 point to the start of unread data */

 point to the offset in the packet buffer */

		/*

		 * check if there is enough room in

		 * * the incoming buffer

			/*

			 * copy what ever is there in this

			 * packet and move on

 copy the remaining */

 check if we have any packets */

		/*

		 * check if we reached end of buffer before reaching the

		 * last packet

finally set the bytes read */

		/*

		 * zero out the RBU packet memory before freeing

		 * to make sure there are no stale RBU packets left in memory

/*

 * img_update_free: Frees the buffer allocated for storing BIOS image

 * Always called with lock held and returned with lock held

	/*

	 * zero out this buffer before freeing it to get rid of any stale

	 * BIOS image copied in memory.

	/*

	 * Re-initialize the rbu_data variables after a free

/*

 * img_update_realloc: This function allocates the contiguous pages to

 * accommodate the requested size of data. The memory address and size

 * values are stored globally and on every call to this function the new

 * size is checked to see if more data is required than the existing size.

 * If true the previous memory is freed and new allocation is done to

 * accommodate the new size. If the incoming size is less then than the

 * already allocated size, then that memory is reused. This function is

 * called with lock held and returns with lock held.

	/*

	 * check if the buffer of sufficient size has been

	 * already allocated

		/*

		 * check for corruption

		/*

		 * we have a valid pre-allocated buffer with

		 * sufficient size

	/*

	 * free any previously allocated buffer

 can't happen per definition */

 check to see if we have something to return */

 this was the last copy */

 check to see if we have something to return */

		/*

		 * we need to free previous packets if a

		 * new hunk of packets needs to be downloaded

			/* Incase something goes wrong when we are

			 * in middle of packetizing the data, we

			 * need to free up whatever packets might

			 * have been created before we quit.

	/*

	 * Find the first newline or space

		/*

		 * If due to the user error the driver gets in a bad

		 * state where even though it is loaded , the

		 * /sys/class/firmware/dell_rbu entries are missing.

		 * to cover this situation the user can recreate entries

		 * by writing init to image_type.

 we must free all previous allocations */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  SMI methods for use with dell-smbios

 *

 *  Copyright (c) Red Hat <mjg@redhat.com>

 *  Copyright (c) 2014 Gabriele Mazzotta <gabriele.mzt@gmail.com>

 *  Copyright (c) 2014 Pali Rohár <pali@kernel.org>

 *  Copyright (c) 2017 Dell Inc.

	/* 4 bytes of table header, plus 7 bytes of Dell header, plus at least

	 * 6 bytes of entry

 Calling interface */

 When enabled this indicates that SMM won't work */

 if token doesn't exist, SMM will work */

	/* If token exists, try to access over SMM but set a dummy return.

	 * - If WSMT disabled it will be overwritten by SMM

	 * - If WSMT enabled then dummy value will remain

	/*

	 * Allocate buffer below 4GB for SMI data--only 32-bit physical addr

	 * is passed to SMI handler.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Driver for Dell laptop extras

 *

 *  Copyright (c) Red Hat <mjg@redhat.com>

 *  Copyright (c) 2014 Gabriele Mazzotta <gabriele.mzt@gmail.com>

 *  Copyright (c) 2014 Pali Rohár <pali@kernel.org>

 *

 *  Based on documentation in the libsmbios package:

 *  Copyright (C) 2005-2014 Dell Inc.

	/*

	 * Ordered list of timeouts expressed in seconds.

	 * The list must end with -1

/*

 * These values come from Windows utility provided by Dell. If any other value

 * is used then BIOS silently set timeout to 0 without any error message.

Laptop*/

Notebook*/

Tablet*/

Convertible*/

Detachable*/

/*

 * Derived from information in smbios-wireless-ctl:

 *

 * cbSelect 17, Value 11

 *

 * Return Wireless Info

 * cbArg1, byte0 = 0x00

 *

 *     cbRes1 Standard return codes (0, -1, -2)

 *     cbRes2 Info bit flags:

 *

 *     0 Hardware switch supported (1)

 *     1 WiFi locator supported (1)

 *     2 WLAN supported (1)

 *     3 Bluetooth (BT) supported (1)

 *     4 WWAN supported (1)

 *     5 Wireless KBD supported (1)

 *     6 Uw b supported (1)

 *     7 WiGig supported (1)

 *     8 WLAN installed (1)

 *     9 BT installed (1)

 *     10 WWAN installed (1)

 *     11 Uw b installed (1)

 *     12 WiGig installed (1)

 *     13-15 Reserved (0)

 *     16 Hardware (HW) switch is On (1)

 *     17 WLAN disabled (1)

 *     18 BT disabled (1)

 *     19 WWAN disabled (1)

 *     20 Uw b disabled (1)

 *     21 WiGig disabled (1)

 *     20-31 Reserved (0)

 *

 *     cbRes3 NVRAM size in bytes

 *     cbRes4, byte 0 NVRAM format version number

 *

 *

 * Set QuickSet Radio Disable Flag

 *     cbArg1, byte0 = 0x01

 *     cbArg1, byte1

 *     Radio ID     value:

 *     0        Radio Status

 *     1        WLAN ID

 *     2        BT ID

 *     3        WWAN ID

 *     4        UWB ID

 *     5        WIGIG ID

 *     cbArg1, byte2    Flag bits:

 *             0 QuickSet disables radio (1)

 *             1-7 Reserved (0)

 *

 *     cbRes1    Standard return codes (0, -1, -2)

 *     cbRes2    QuickSet (QS) radio disable bit map:

 *     0 QS disables WLAN

 *     1 QS disables BT

 *     2 QS disables WWAN

 *     3 QS disables UWB

 *     4 QS disables WIGIG

 *     5-31 Reserved (0)

 *

 * Wireless Switch Configuration

 *     cbArg1, byte0 = 0x02

 *

 *     cbArg1, byte1

 *     Subcommand:

 *     0 Get config

 *     1 Set config

 *     2 Set WiFi locator enable/disable

 *     cbArg1,byte2

 *     Switch settings (if byte 1==1):

 *     0 WLAN sw itch control (1)

 *     1 BT sw itch control (1)

 *     2 WWAN sw itch control (1)

 *     3 UWB sw itch control (1)

 *     4 WiGig sw itch control (1)

 *     5-7 Reserved (0)

 *    cbArg1, byte2 Enable bits (if byte 1==2):

 *     0 Enable WiFi locator (1)

 *

 *    cbRes1     Standard return codes (0, -1, -2)

 *    cbRes2 QuickSet radio disable bit map:

 *     0 WLAN controlled by sw itch (1)

 *     1 BT controlled by sw itch (1)

 *     2 WWAN controlled by sw itch (1)

 *     3 UWB controlled by sw itch (1)

 *     4 WiGig controlled by sw itch (1)

 *     5-6 Reserved (0)

 *     7 Wireless sw itch config locked (1)

 *     8 WiFi locator enabled (1)

 *     9-14 Reserved (0)

 *     15 WiFi locator setting locked (1)

 *     16-31 Reserved (0)

 *

 * Read Local Config Data (LCD)

 *     cbArg1, byte0 = 0x10

 *     cbArg1, byte1 NVRAM index low byte

 *     cbArg1, byte2 NVRAM index high byte

 *     cbRes1 Standard return codes (0, -1, -2)

 *     cbRes2 4 bytes read from LCD[index]

 *     cbRes3 4 bytes read from LCD[index+4]

 *     cbRes4 4 bytes read from LCD[index+8]

 *

 * Write Local Config Data (LCD)

 *     cbArg1, byte0 = 0x11

 *     cbArg1, byte1 NVRAM index low byte

 *     cbArg1, byte2 NVRAM index high byte

 *     cbArg2 4 bytes to w rite at LCD[index]

 *     cbArg3 4 bytes to w rite at LCD[index+4]

 *     cbArg4 4 bytes to w rite at LCD[index+8]

 *     cbRes1 Standard return codes (0, -1, -2)

 *

 * Populate Local Config Data from NVRAM

 *     cbArg1, byte0 = 0x12

 *     cbRes1 Standard return codes (0, -1, -2)

 *

 * Commit Local Config Data to NVRAM

 *     cbArg1, byte0 = 0x13

 *     cbRes1 Standard return codes (0, -1, -2)

	/* If the hardware switch controls this radio, and the hardware

 Has hw-switch, sync sw_state to BIOS */

 No hw-switch, sync BIOS state to sw_state */

	/*

	 * rfkill support causes trouble on various models, mostly Inspirons.

	 * So we whitelist certain series, and don't support rfkill on others.

 dell wireless info smbios call is not supported */

 rfkill is only tested on laptops with a hwswitch */

	/*

	 * Dell Airplane Mode Switch driver (dell-rbtn) supports ACPI devices

	 * which can receive events from HW slider switch.

	 *

	 * Dell SMBIOS on whitelisted models supports controlling radio devices

	 * but does not support receiving HW button switch events. We can use

	 * i8042 filter hook function to receive keyboard data and handle

	 * keycode for HW button.

	 *

	 * So if it is possible we will use Dell Airplane Mode Switch ACPI

	 * driver for receiving HW events and Dell SMBIOS for setting rfkill

	 * states. If ACPI driver or device is not available we will fallback to

	 * i8042 filter hook function.

	 *

	 * To prevent duplicate rfkill devices which control and do same thing,

	 * dell-rbtn driver will automatically remove its own rfkill devices

	 * once function dell_rbtn_notifier_register() is called.

/*

 * Derived from information in smbios-keyboard-ctl:

 *

 * cbClass 4

 * cbSelect 11

 * Keyboard illumination

 * cbArg1 determines the function to be performed

 *

 * cbArg1 0x0 = Get Feature Information

 *  cbRES1         Standard return codes (0, -1, -2)

 *  cbRES2, word0  Bitmap of user-selectable modes

 *     bit 0     Always off (All systems)

 *     bit 1     Always on (Travis ATG, Siberia)

 *     bit 2     Auto: ALS-based On; ALS-based Off (Travis ATG)

 *     bit 3     Auto: ALS- and input-activity-based On; input-activity based Off

 *     bit 4     Auto: Input-activity-based On; input-activity based Off

 *     bit 5     Auto: Input-activity-based On (illumination level 25%); input-activity based Off

 *     bit 6     Auto: Input-activity-based On (illumination level 50%); input-activity based Off

 *     bit 7     Auto: Input-activity-based On (illumination level 75%); input-activity based Off

 *     bit 8     Auto: Input-activity-based On (illumination level 100%); input-activity based Off

 *     bits 9-15 Reserved for future use

 *  cbRES2, byte2  Reserved for future use

 *  cbRES2, byte3  Keyboard illumination type

 *     0         Reserved

 *     1         Tasklight

 *     2         Backlight

 *     3-255     Reserved for future use

 *  cbRES3, byte0  Supported auto keyboard illumination trigger bitmap.

 *     bit 0     Any keystroke

 *     bit 1     Touchpad activity

 *     bit 2     Pointing stick

 *     bit 3     Any mouse

 *     bits 4-7  Reserved for future use

 *  cbRES3, byte1  Supported timeout unit bitmap

 *     bit 0     Seconds

 *     bit 1     Minutes

 *     bit 2     Hours

 *     bit 3     Days

 *     bits 4-7  Reserved for future use

 *  cbRES3, byte2  Number of keyboard light brightness levels

 *  cbRES4, byte0  Maximum acceptable seconds value (0 if seconds not supported).

 *  cbRES4, byte1  Maximum acceptable minutes value (0 if minutes not supported).

 *  cbRES4, byte2  Maximum acceptable hours value (0 if hours not supported).

 *  cbRES4, byte3  Maximum acceptable days value (0 if days not supported)

 *

 * cbArg1 0x1 = Get Current State

 *  cbRES1         Standard return codes (0, -1, -2)

 *  cbRES2, word0  Bitmap of current mode state

 *     bit 0     Always off (All systems)

 *     bit 1     Always on (Travis ATG, Siberia)

 *     bit 2     Auto: ALS-based On; ALS-based Off (Travis ATG)

 *     bit 3     Auto: ALS- and input-activity-based On; input-activity based Off

 *     bit 4     Auto: Input-activity-based On; input-activity based Off

 *     bit 5     Auto: Input-activity-based On (illumination level 25%); input-activity based Off

 *     bit 6     Auto: Input-activity-based On (illumination level 50%); input-activity based Off

 *     bit 7     Auto: Input-activity-based On (illumination level 75%); input-activity based Off

 *     bit 8     Auto: Input-activity-based On (illumination level 100%); input-activity based Off

 *     bits 9-15 Reserved for future use

 *     Note: Only One bit can be set

 *  cbRES2, byte2  Currently active auto keyboard illumination triggers.

 *     bit 0     Any keystroke

 *     bit 1     Touchpad activity

 *     bit 2     Pointing stick

 *     bit 3     Any mouse

 *     bits 4-7  Reserved for future use

 *  cbRES2, byte3  Current Timeout on battery

 *     bits 7:6  Timeout units indicator:

 *     00b       Seconds

 *     01b       Minutes

 *     10b       Hours

 *     11b       Days

 *     bits 5:0  Timeout value (0-63) in sec/min/hr/day

 *     NOTE: A value of 0 means always on (no timeout) if any bits of RES3 byte

 *     are set upon return from the [Get feature information] call.

 *  cbRES3, byte0  Current setting of ALS value that turns the light on or off.

 *  cbRES3, byte1  Current ALS reading

 *  cbRES3, byte2  Current keyboard light level.

 *  cbRES3, byte3  Current timeout on AC Power

 *     bits 7:6  Timeout units indicator:

 *     00b       Seconds

 *     01b       Minutes

 *     10b       Hours

 *     11b       Days

 *     Bits 5:0  Timeout value (0-63) in sec/min/hr/day

 *     NOTE: A value of 0 means always on (no timeout) if any bits of RES3 byte2

 *     are set upon return from the upon return from the [Get Feature information] call.

 *

 * cbArg1 0x2 = Set New State

 *  cbRES1         Standard return codes (0, -1, -2)

 *  cbArg2, word0  Bitmap of current mode state

 *     bit 0     Always off (All systems)

 *     bit 1     Always on (Travis ATG, Siberia)

 *     bit 2     Auto: ALS-based On; ALS-based Off (Travis ATG)

 *     bit 3     Auto: ALS- and input-activity-based On; input-activity based Off

 *     bit 4     Auto: Input-activity-based On; input-activity based Off

 *     bit 5     Auto: Input-activity-based On (illumination level 25%); input-activity based Off

 *     bit 6     Auto: Input-activity-based On (illumination level 50%); input-activity based Off

 *     bit 7     Auto: Input-activity-based On (illumination level 75%); input-activity based Off

 *     bit 8     Auto: Input-activity-based On (illumination level 100%); input-activity based Off

 *     bits 9-15 Reserved for future use

 *     Note: Only One bit can be set

 *  cbArg2, byte2  Desired auto keyboard illumination triggers. Must remain inactive to allow

 *                 keyboard to turn off automatically.

 *     bit 0     Any keystroke

 *     bit 1     Touchpad activity

 *     bit 2     Pointing stick

 *     bit 3     Any mouse

 *     bits 4-7  Reserved for future use

 *  cbArg2, byte3  Desired Timeout on battery

 *     bits 7:6  Timeout units indicator:

 *     00b       Seconds

 *     01b       Minutes

 *     10b       Hours

 *     11b       Days

 *     bits 5:0  Timeout value (0-63) in sec/min/hr/day

 *  cbArg3, byte0  Desired setting of ALS value that turns the light on or off.

 *  cbArg3, byte2  Desired keyboard light level.

 *  cbArg3, byte3  Desired Timeout on AC power

 *     bits 7:6  Timeout units indicator:

 *     00b       Seconds

 *     01b       Minutes

 *     10b       Hours

 *     11b       Days

 *     bits 5:0  Timeout value (0-63) in sec/min/hr/day

/*

 * NOTE: there are three ways to set the keyboard backlight level.

 * First, via kbd_state.mode_bit (assigning KBD_MODE_BIT_TRIGGER_* value).

 * Second, via kbd_state.level (assigning numerical value <= kbd_info.levels).

 * Third, via SMBIOS tokens (KBD_LED_* in kbd_tokens)

 *

 * There are laptops which support only one of these methods. If we want to

 * support as many machines as possible we need to implement all three methods.

 * The first two methods use the kbd_state structure. The third uses SMBIOS

 * tokens. If kbd_info.levels == 0, the machine does not support setting the

 * keyboard backlight level via kbd_state.level.

	/*

	 * When setting the new state fails,try to restore the previous one.

	 * This is needed on some machines where BIOS sets a default state when

	 * setting a new state fails. This default state could be all off.

	/* NOTE: Old models without KBD_LED_AC_TOKEN token supports only one

	 *       timeout value which is shared for both battery and AC power

	 *       settings. So do not try to set AC values on old models.

 NOTE: timeout value is stored in 6 bits so max value is 63 */

	/* NOTE: On tested machines ON mode did not work and caused

	 *       problems (turned backlight off) so do not use it

 kbd_mode_levels[0] is reserved, see below */

	/*

	 * Find the first supported mode and assign to kbd_mode_levels[0].

	 * This should be 0 (off), but we cannot depend on the BIOS to

	 * support 0.

	/*

	 * Only supports keyboard backlight when it has at least two modes.

 Convert value from current units to seconds */

"trackstick"*/ NULL, 
		/*

		 * NOTE: trackstick bit (2) must be disabled when

		 *       disabling touchpad bit (1), otherwise touchpad

		 *       bit (1) will not be disabled

 clear the first bit set */

 clear the first bit set */

 Don't change backlight level on exit */

 find if this machine support other functions */

/* dell-rbtn.c driver export functions which will not work correctly (and could

 * cause kernel crash) if they are called before dell-rbtn.c init code. This is

 * not problem when dell-rbtn.c is compiled as external module. When both files

 * (dell-rbtn.c and dell-laptop.c) are compiled statically into kernel, then we

 * need to ensure that dell_init() will be called after initializing dell-rbtn.

 * This can be achieved by late_initcall() instead module_init().

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Common functions for kernel modules using Dell SMBIOS

 *

 *  Copyright (c) Red Hat <mjg@redhat.com>

 *  Copyright (c) 2014 Gabriele Mazzotta <gabriele.mzt@gmail.com>

 *  Copyright (c) 2014 Pali Rohár <pali@kernel.org>

 *

 *  Based on documentation in the libsmbios package:

 *  Copyright (C) 2005-2014 Dell Inc.

 calls that are whitelisted for given capabilities */

	/* generally tokens are allowed, but may be further filtered or

	 * restricted by token blacklist or whitelist

 used by userspace: fwupdate */

 used by userspace: fwupd */

 calls that are explicitly blacklisted */

 manufacturing use */

 manufacturing use */

 write once */

 write once */

 write once */

 diagnostics */

 handled by kernel: dell-laptop */

 tokens that are whitelisted for given capabilities */

 used by userspace: fwupdate */

 can indicate to userspace that WMI is needed */

 tokens that are explicitly blacklisted */

 ME use */

 raid shadow copy */

 sata shadow copy */

 write once */

 diagnostics */

 manufacturing use */

 diagnostics */

 manufacturing use */

 manufacturing use */

 manufacturing use */

 manufacturing use */

 fan control */

 manufacturing use */

 manufacturing use */

 manufacturing use */

 manufacturing use */

 manufacturing use */

 disagnostics */

 manufacturing use */

 internal BIOS use */

 internal BIOS use */

 write only */

 internal BIOS use */

 handled by kernel: dell-laptop */

 Completed successfully */

 Completed with error */

 Function not supported */

 Unknown error */

 can't make calls over 30 */

 supported calls on the particular system */

 match against call blacklist  */

 if a token call, find token ID */

 tokens enabled ? */

 find the matching token ID */

 token call; but token didn't exist */

 match against token blacklist */

 match against token whitelist */

 match against call whitelist */

 not in a whitelist, only allow processes with capabilities */

 Final token is a terminator, so we don't want to copy it */

	/*

	 * 4 bytes of table header, plus 7 bytes of Dell header

	 * plus at least 6 bytes of entry

 Indexed IO */

 Protected Area Type 1 */

 Protected Area Type 2 */

 Calling interface */

 (number of tokens  + 1 for null terminated */

 need to store both location and value + terminator*/

 skip empty */

 add location */

 add value */

 register backends */

 duplicate tokens will cause problems building sysfs files */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Dell WMI hotkeys

 *

 * Copyright (C) 2008 Red Hat <mjg@redhat.com>

 * Copyright (C) 2014-2015 Pali Rohár <pali@kernel.org>

 *

 * Portions based on wistron_btns.c:

 * Copyright (C) 2005 Miloslav Trmac <mitr@volny.cz>

 * Copyright (C) 2005 Bernhard Rosenkraenzer <bero@arklinux.org>

 * Copyright (C) 2005 Dmitry Torokhov <dtor@mail.ru>

/*

 * Keymap for WMI events of type 0x0000

 *

 * Certain keys are flagged as KE_IGNORE. All of these are either

 * notifications (rather than requests for change) or are also sent

 * via the keyboard controller so should not be sent again.

 Key code is followed by brightness level */

 Battery health status button */

 Radio devices state change, key code is followed by other values */

 Key code is followed by: next, active and attached devices */

 Key code is followed by keyboard illumination level */

 BIOS error detected */

 Battery was removed or inserted */

 Wifi Catcher */

 Ambient light sensor toggle */

 Unknown, defined in ACPI DSDT */

 { KE_IGNORE, 0xe023, { KEY_RESERVED } }, */

 Untested, Dell Instant Launch key on Inspiron 7520 */

 { KE_IGNORE, 0xe024, { KEY_RESERVED } }, */

 Dell Instant Launch key */

 Audio panel key */

 LCD Display On/Off Control key */

 Untested, Multimedia key on Dell Vostro 3560 */

 { KE_IGNORE, 0xe028, { KEY_RESERVED } }, */

 Dell Instant Launch key */

 Untested, Windows Mobility Center button on Inspiron 7520 */

 { KE_IGNORE, 0xe02a, { KEY_RESERVED } }, */

 Unknown, defined in ACPI DSDT */

 { KE_IGNORE, 0xe02b, { KEY_RESERVED } }, */

 Untested, Dell Audio With Preset Switch button on Inspiron 7520 */

 { KE_IGNORE, 0xe02c, { KEY_RESERVED } }, */

 NIC Link is Up */

 NIC Link is Down */

	/*

	 * This entry is very suspicious!

	 * Originally Matthew Garrett created this dell-wmi driver specially for

	 * "button with a picture of a battery" which has event code 0xe045.

	 * Later Mario Limonciello from Dell told us that event code 0xe045 is

	 * reported by Num Lock and should be ignored because key is send also

	 * by keyboard controller.

	 * So for now we will ignore this event to prevent potential double

	 * Num Lock key press.

 Scroll lock and also going to tablet mode on portable devices */

 Untested, going from tablet mode on portable devices */

 { KE_IGNORE, 0xe047, { KEY_RESERVED } }, */

 Dell Support Center key */

 Uninitialized entries here are KEY_RESERVED == 0. */

/*

 * Keymap for WMI events of type 0x0010

 *

 * These are applied if the 0xB2 DMI hotkey table is present and doesn't

 * override them.

 Fn-lock switched to function keys */

 Fn-lock switched to multimedia keys */

 Keyboard backlight change notification */

 Backlight brightness level */

 Mic mute */

 Fn-lock */

 Change keyboard illumination */

	/*

	 * Radio disable (notify only -- there is no model for which the

	 * WMI event is supposed to trigger an action).

 RGB keyboard backlight control */

	/*

	 * Stealth mode toggle. This will "disable all lights and sounds".

	 * The action is performed by the BIOS and EC; the WMI event is just

	 * a notification. On the XPS 13 9350, this is Fn+F7, and there's

	 * a BIOS setting to enable and disable the hotkey.

 Rugged magnetic dock attach/detach events */

 Rugged programmable (P1/P2/P3 keys) */

	/*

	 * Radio disable (notify only -- there is no model for which the

	 * WMI event is supposed to trigger an action).

 Fn-lock */

/*

 * Keymap for WMI events of type 0x0011

 Reflex keyboard switch on 2n1 devices */

 Battery unplugged */

 Battery inserted */

	/*

	 * Detachable keyboard detached / undocked

	 * Note SW_TABLET_MODE is already reported through the intel_vbtn

	 * driver for this, so we ignore it.

 Detachable keyboard attached / docked */

 Keyboard backlight level changed */

/*

 * Keymap for WMI events of type 0x0012

 * They are events with extended data

 Ultra-performance mode switch request */

 Fn-lock button pressed */

 Don't report brightness notifications that will also come via ACPI */

	/*

	 * BIOS/ACPI on devices with WMI interface version 0 does not clear

	 * buffer before filling it. So next time when BIOS/ACPI send WMI event

	 * which is smaller as previous then it contains garbage in buffer from

	 * previous event.

	 *

	 * BIOS/ACPI on devices with WMI interface version 1 clears buffer and

	 * sometimes send more events in buffer at one call.

	 *

	 * So to prevent reading garbage from buffer we will process only first

	 * one event on devices with WMI interface version 0.

 One key pressed or event occurred */

 Extended data is currently ignored */

 Sequence of keys pressed */

 Sequence of events occurred */

 dell_privacy_process_event has handled the event */;

 Unknown event */

 We already found the hotkey table. */

 The Dell hotkey table is type 0xB2.  Scan until we find it. */

		/*

		 * Historically, dell-wmi would ignore a DMI entry of

		 * fewer than 7 bytes.  Sizes between 4 and 8 bytes are

		 * nonsensical (both the header and all entries are 4

		 * bytes), so we approximate the old behavior by

		 * ignoring tables with fewer than one entry.

 Uninitialized entries are 0 aka KEY_RESERVED. */

		/*

		 * Log if we find an entry in the DMI table that we don't

		 * understand.  If this happens, we should figure out what

		 * the entry means and add it to bios_to_linux_keycode.

		/*

		 * Historically, dell-wmi ignored dmi_walk errors.  A failure

		 * is certainly surprising, but it probably just indicates

		 * a very old laptop.

 Append table with events of type 0x0010 which comes from DMI */

 Append table with extra events of type 0x0010 which are not in DMI */

		/*

		 * Check if we've already found this scancode.  This takes

		 * quadratic time, but it doesn't matter unless the list

		 * of extra keys gets very long.

 Append table with events of type 0x0011 */

 Append table with events of type 0x0012 */

	/*

	 * Now append also table with "legacy" events of type 0x0000. Some of

	 * them are reported also on laptops which have scancodes in DMI.

	/*

	 * Sparse keymap library makes a copy of keymap so we don't need the

	 * original one that was allocated.

/*

 * According to Dell SMBIOS documentation:

 *

 * 17  3  Application Program Registration

 *

 *     cbArg1 Application ID 1 = 0x00010000

 *     cbArg2 Application ID 2

 *            QUICKSET/DCP = 0x51534554 "QSET"

 *            ALS Driver   = 0x416c7353 "AlsS"

 *            Latitude ON  = 0x4c6f6e52 "LonR"

 *     cbArg3 Application version or revision number

 *     cbArg4 0 = Unregister application

 *            1 = Register application

 *     cbRes1 Standard return codes (0, -1, -2)

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  WMI hotkeys support for Dell All-In-One series

	/* 0x000: A hot key pressed or an event occurred

/*

 * The new WMI event data format will follow the dell_wmi_event structure

 * So, we will check if the buffer matches the format

 Most All-In-One correctly return integer scancode */

				/* Broken machines return the scancode in a

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  dell-smo8800.c - Dell Latitude ACPI SMO88XX freefall sensor driver

 *

 *  Copyright (C) 2012 Sonal Santan <sonal.santan@gmail.com>

 *  Copyright (C) 2014 Pali Rohár <pali@kernel.org>

 *

 *  This is loosely based on lis3lv02d driver.

 acpi device irq */

 count after last read */

 for /dev/freefall */

 whether the device is open */

 Wait queue for the misc dev */

 acpi device */

 already open */

 release the device */

 NOTE: Keep this list in sync with drivers/i2c/busses/i2c-i801.c */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  dcdbas.c: Dell Systems Management Base Driver

 *

 *  The Dell Systems Management Base Driver provides a sysfs interface for

 *  systems management software to perform System Management Interrupts (SMIs)

 *  and Host Control Actions (power cycle or power off after OS shutdown) on

 *  Dell systems.

 *

 *  See Documentation/driver-api/dcdbas.rst for more information.

 *

 *  Copyright (C) 1995-2006 Dell Inc.

/**

 * smi_data_buf_free: free SMI data buffer

/**

 * smi_data_buf_realloc: grow SMI data buffer if needed

 new buffer is needed */

 memory zeroed by dma_alloc_coherent */

 free any existing buffer */

 set up new buffer for use */

 make sure SMI data buffer is at least buf_size */

 make sure buffer is available for host control command */

 generate SMI */

 inb to force posted write through and make SMI happen now */

 no output args */

/**

 * dcdbas_smi_request: generate SMI request

 *

 * Called with smi_data_lock.

 SMI requires CPU 0 */

/**

 * smi_request_store:

 *

 * The valid values are:

 * 0: zero SMI data buffer

 * 1: generate calling interface SMI

 * 2: generate raw SMI

 *

 * User application writes smi_cmd to smi_data before telling driver

 * to generate SMI.

 Raw SMI */

		/*

		 * Calling Interface SMI

		 *

		 * Provide physical address of command buffer field within

		 * the struct smi_cmd to BIOS.

		 *

		 * Because the address that smi_cmd (smi_data_buf) points to

		 * will be from memremap() of a non-memory address if WSMT

		 * is present, we can't use virt_to_phys() on smi_cmd, so

		 * we have to use the physical address that was saved when

		 * the virtual address for smi_cmd was received.

/**

 * host_control_smi: generate host control SMI

 *

 * Caller must set up the host control command in smi_data_buf.

 write SMI data buffer physical address */

 first set status to -1 as called by spec */

 generate SMM call */

 wait a few to see if it executed */

 write SMI data buffer physical address */

 generate SMM call */

 restore RTC index pointer since it was written to above */

 read control port back to serialize write */

 wait a few to see if it executed */

/**

 * dcdbas_host_control: initiate host control

 *

 * This function is called by the driver after the system has

 * finished shutting down if the user application specified a

 * host control action to perform on shutdown.  It is safe to

 * use smi_data_buf at this point because the system has finished

 * shutting down and no userspace apps are running.

 power off takes precedence */

 WSMT */

 Check if WSMT ACPI table shows that protection is enabled */

	/*

	 * BIOS could provide the address/size of the protected buffer

	 * in an SMBIOS string or in an EPS structure in 0xFxxxx.

 Check SMBIOS for buffer address */

 Scan for EPS (entry point structure) */

	/*

	 * Get physical address of buffer and map to virtual address.

	 * Table gives size in 4K pages, regardless of actual system page size.

	/*

	 * Limit remap size to MAX_SMI_DATA_BUF_SIZE + 8 (since the first 8

	 * bytes are used for a semaphore, not the data buffer itself).

 First 8 bytes is for a semaphore, not part of the smi_data_buf */

/**

 * dcdbas_reboot_notify: handle reboot notification for host control

 firmware is going to perform host control action */

 Check if ACPI WSMT table specifies protected SMI buffer address */

	/*

	 * BIOS SMI calls require buffer addresses be in 32-bit address space.

	 * This is done by setting the DMA mask below.

/**

 * dcdbas_init: initialize driver

/**

 * dcdbas_exit: perform driver cleanup

	/*

	 * make sure functions that use dcdbas_pdev are called

	 * before platform_device_unregister

	/*

	 * We have to free the buffer here instead of dcdbas_remove

	 * because only in module exit function we can be sure that

	 * all sysfs attributes belonging to this module have been

	 * released.

 Any System or BIOS claiming to be by Dell */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Dell privacy notification driver

 *

 * Copyright (C) 2021 Dell Inc. All Rights Reserved.

/*

 * The wmi_list is used to store the privacy_priv struct with mutex protecting

 DELL Privacy Type */

/*

 * Keymap for WMI privacy events of type 0x0012

 privacy mic mute */

 privacy camera mute */

/*

 * The flow of privacy event:

 * 1) User presses key. HW does stuff with this key (timeout is started)

 * 2) WMI event is emitted from BIOS

 * 3) WMI event is received by dell-privacy

 * 4) KEY_MICMUTE emitted from dell-privacy

 * 5) Userland picks up key and modifies kcontrol for SW mute

 * 6) Codec kernel driver catches and calls ledtrig_audio_set which will call

 *    led_set_brightness() on the LED registered by dell_privacy_leds_setup()

 * 7) dell-privacy notifies EC, the timeout is cancelled and the HW mute activates.

 *    If the EC is not notified then the HW mic mute will activate when the timeout

 *    triggers, just a bit later than with the active ack.

 Mic mute */

 Camera mute */

/*

 * Describes the Device State class exposed by BIOS which can be consumed by

 * various applications interested in knowing the Privacy feature capabilities.

 * class DeviceState

 * {

 *  [key, read] string InstanceName;

 *  [read] boolean ReadOnly;

 *

 *  [WmiDataId(1), read] uint32 DevicesSupported;

 *   0 - None; 0x1 - Microphone; 0x2 - Camera; 0x4 - ePrivacy  Screen

 *

 *  [WmiDataId(2), read] uint32 CurrentState;

 *   0 - Off; 1 - On; Bit0 - Microphone; Bit1 - Camera; Bit2 - ePrivacyScreen

 * };

 check privacy support features and device states */

	/*  Although it's not technically a failure, this would lead to

	 *  unexpected behavior

/*

 * Pressing the mute key activates a time delayed circuit to physically cut

 * off the mute. The LED is in the same circuit, so it reflects the true

 * state of the HW mute.  The reason for the EC "ack" is so that software

 * can first invoke a SW mute before the HW circuit is cut off.  Without SW

 * cutting this off first does not affect the time delayed muting or status

 * of the LED but there is a possibility of a "popping" noise.

 *

 * If the EC receives the SW ack, the circuit will be activated before the

 * delay completed.

 *

 * Exposing as an LED device allows the codec drivers notification path to

 * EC ACK to work

 create evdev passing interface */

 remap the wmi keymap event to new keymap */

	/* remap the keymap code with Dell privacy key type 0x12 as prefix

	 * KEY_MICMUTE scancode will be reported as 0x120001

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Alienware AlienFX control

 *

 * Copyright (C) 2014 Dell Inc <Dell.Client.Kernel@dell.com>

/*

 * Helpers used for zone control

 RGB triplet notation is 24-bit hexadecimal */

/*

 * Individual RGB zone control

/*

 * LED Brightness (Global)

/*

 * Lighting control state device attribute (Global)

	/*

	 *      - zone_dev_attrs num_zones + 1 is for individual zones and then

	 *        null terminated

	 *      - zone_attrs num_zones + 2 is for all attrs in zone_dev_attrs +

	 *        the lighting control + null terminated

	 *      - zone_data num_zones is for the distinct zones

/*

 *	The HDMI mux sysfs node indicates the status of the HDMI input mux.

 *	It can toggle between standard system GPU output and HDMI input.

/*

 * Alienware GFX amplifier support

 * - Currently supports reading cable status

 * - Leaving expansion room to possibly support dock/undock events later

/*

 * Deep Sleep Control support

 * - Modifies BIOS setting for deep sleep control allowing extra wakeup events

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  WMI methods for use with dell-smbios

 *

 *  Copyright (c) 2017 Dell Inc.

 WMI buffer size will be either 4k or 32k depending on machine */

 some SMBIOS calls fail unless BIOS contains hotfix */

 add in the length object we will use internally with ioctl */

 ID is used by dell-smbios to set priority of drivers */

 4 bytes header, 8 bytes flags */

 misc bios flags */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    Dell Airplane Mode Switch driver

    Copyright (C) 2014-2015  Pali Rohár <pali@kernel.org>



/*

 * acpi functions

/*

 * rfkill device

 NOTE: setting soft rfkill state is not supported */

	/*

	 * NOTE: rbtn controls all radio devices, not only WLAN

	 *       but rfkill interface does not support "ANY" type

	 *       so "WLAN" type is used

/*

 * input device

/*

 * acpi driver

	/*

	 * This driver can also handle the "DELLABC6" device that

	 * appears on the XPS 13 9350, but that device is disabled by

	 * the DSDT unless booted with acpi_osi="!Windows 2012"

	 * acpi_osi="!Windows 2013".

	 *

	 * According to Mario at Dell:

	 *

	 *  DELLABC6 is a custom interface that was created solely to

	 *  have airplane mode support for Windows 7.  For Windows 10

	 *  the proper interface is to use that which is handled by

	 *  intel-hid. A OEM airplane mode driver is not used.

	 *

	 *  Since the kernel doesn't identify as Windows 7 it would be

	 *  incorrect to do attempt to use that interface.

	 *

	 * Even if we override _OSI and bind to DELLABC6, we end up with

	 * inconsistent behavior in which userspace can get out of sync

	 * with the rfkill state as it conflicts with events from

	 * intel-hid.

	 *

	 * The upshot is that it is better to just ignore DELLABC6

	 * devices.

	/*

	 * Upon resume, some BIOSes send an ACPI notification thet triggers

	 * an unwanted input event. In order to ignore it, we use a flag

	 * that we set at suspend and clear once we have received the extra

	 * ACPI notification. Since ACPI notifications are delivered

	 * asynchronously to drivers, we clear the flag from the workqueue

	 * used to deliver the notifications. This should be enough

	 * to have the flag cleared only after we received the extra

	 * notification, if any.

/*

 * notifier export functions

/*

 * acpi driver functions

	/*

	 * Some BIOSes send a notification at resume.

	 * Ignore it to prevent unwanted input events.

/*

 * module functions

 SPDX-License-Identifier: GPL-2.0

/*

 * Functions corresponding to password object type attributes under BIOS Password Object GUID for

 * use with dell-wmi-sysman

 *

 *  Copyright (c) 2020 Dell Inc.

 need to use specific instance_id and guid combination to get right data */

	/* firmware does verifiation of min/max password length,

	 * hence only check for not exceeding MAX_BUFF here.

/**

 * populate_po_data() - Populate all properties of an instance under password object attribute

 * @po_obj: ACPI object with password object data

 * @instance_id: The instance to enumerate

 * @attr_name_kobj: The parent kernel object

/**

 * exit_po_attributes() - Clear all attribute data

 *

 * Clears all data allocated for this group of attributes

 SPDX-License-Identifier: GPL-2.0

/*

 * Functions corresponding to SET password methods under BIOS attributes interface GUID

 *

 *  Copyright (c) 2020 Dell Inc.

 let userland know it may need to check is_password_set again */

/**

 * set_new_password() - Sets a system admin password

 * @password_type: The type of password to set

 * @new: The new password

 *

 * Sets the password using plaintext interface

 build/calculate buffer */

 build security area */

 build variables to set */

 on success copy the new password to current password */

 explain to user the detailed failure reason */

 SPDX-License-Identifier: GPL-2.0

/*

 * Functions corresponding to integer type attributes under BIOS Integer GUID for use with

 * dell-wmi-sysman

 *

 *  Copyright (c) 2020 Dell Inc.

 need to use specific instance_id and guid combination to get right data */

/**

 * validate_integer_input() - Validate input of current_value against lower and upper bound

 * @instance_id: The instance on which input is validated

 * @buf: Input value

	/* workaround for BIOS error.

	 * validate input to avoid setting 0 when integer input passed with + sign

/**

 * populate_int_data() - Populate all properties of an instance under integer attribute

 * @integer_obj: ACPI object with integer data

 * @instance_id: The instance to enumerate

 * @attr_name_kobj: The parent kernel object

/**

 * exit_int_attributes() - Clear all attribute data

 *

 * Clears all data allocated for this group of attributes

 SPDX-License-Identifier: GPL-2.0

/*

 * Common methods for use with dell-wmi-sysman

 *

 *  Copyright (c) 2020 Dell Inc.

 reset bios to defaults */

/**

 * populate_string_buffer() - populates a string buffer

 * @buffer: the start of the destination buffer

 * @buffer_len: length of the destination buffer

 * @str: the string to insert into buffer

/**

 * calculate_string_buffer() - determines size of string buffer for use with BIOS communication

 * @str: the string to calculate based upon

 *

 u16 length field + one UTF16 char for each input char */

/**

 * calculate_security_buffer() - determines size of security buffer for authentication scheme

 * @authentication: the authentication content

 *

 * Currently only supported type is Admin password

/**

 * populate_security_buffer() - builds a security buffer for authentication scheme

 * @buffer: the buffer to populate

 * @authentication: the authentication content

 *

 * Currently only supported type is PLAIN TEXT

 plain text */

/**

 * map_wmi_error() - map errors from WMI methods to kernel error codes

 * @error_code: integer error code returned from Dell's firmware

 success */

 failed */

 invalid parameter */

 access denied */

 not supported */

 memory error */

 protocol error */

 unspecified error */

/**

 * reset_bios_show() - sysfs implementaton for read reset_bios

 * @kobj: Kernel object for this attribute

 * @attr: Kernel object attribute

 * @buf: The buffer to display to userspace

/**

 * reset_bios_store() - sysfs implementaton for write reset_bios

 * @kobj: Kernel object for this attribute

 * @attr: Kernel object attribute

 * @buf: The buffer from userspace

 * @count: the size of the buffer from userspace

/**

 * pending_reboot_show() - sysfs implementaton for read pending_reboot

 * @kobj: Kernel object for this attribute

 * @attr: Kernel object attribute

 * @buf: The buffer to display to userspace

 *

 * Stores default value as 0

 * When current_value is changed this attribute is set to 1 to notify reboot may be required

/**

 * create_attributes_level_sysfs_files() - Creates reset_bios and

 * pending_reboot attributes

/**

 * strlcpy_attr - Copy a length-limited, NULL-terminated string with bound checks

 * @dest: Where to copy the string to

 * @src: Where to copy the string from

	/*len can be zero because any property not-applicable to attribute can

	 * be empty so check only for too long buffers and log error

/**

 * get_wmiobj_pointer() - Get Content of WMI block for particular instance

 * @instance_id: WMI instance ID

 * @guid_string: WMI GUID (in str form)

 *

 * Fetches the content for WMI block (instance_id) under GUID (guid_string)

 * Caller must kfree the return

/**

 * get_instance_count() - Compute total number of instances under guid_string

 * @guid_string: WMI GUID (in string form)

/**

 * alloc_attributes_data() - Allocate attributes data for a particular type

 * @attr_type: Attribute type to allocate

/**

 * destroy_attribute_objs() - Free a kset of kobjects

 * @kset: The kset to destroy

 *

 * Fress kobjects created for each attribute_name under attribute type kset

/**

 * release_attributes_data() - Clean-up all sysfs directories and files created

/**

 * init_bios_attributes() - Initialize all attributes for a type

 * @attr_type: The attribute type to initialize

 * @guid: The WMI GUID associated with this type to initialize

 *

 * Initialiaze all 4 types of attributes enumeration, integer, string and password object.

 * Populates each attrbute typ's respective properties under sysfs files

individual attribute names

	/* instance_id needs to be reset for each type GUID

	 * also, instance IDs are unique within GUID but not across

 need to use specific instance_id and guid combination to get right data */

 sanity checking */

 build attribute */

 enumerate all of this attribute */

 SPDX-License-Identifier: GPL-2.0

/*

 * Functions corresponding to string type attributes under BIOS String GUID for use with

 * dell-wmi-sysman

 *

 *  Copyright (c) 2020 Dell Inc.

 need to use specific instance_id and guid combination to get right data */

/**

 * validate_str_input() - Validate input of current_value against min and max lengths

 * @instance_id: The instance on which input is validated

 * @buf: Input value

/**

 * populate_str_data() - Populate all properties of an instance under string attribute

 * @str_obj: ACPI object with string data

 * @instance_id: The instance to enumerate

 * @attr_name_kobj: The parent kernel object

/**

 * exit_str_attributes() - Clear all attribute data

 *

 * Clears all data allocated for this group of attributes

 SPDX-License-Identifier: GPL-2.0

/*

 * Functions corresponding to SET methods under BIOS attributes interface GUID for use

 * with dell-wmi-sysman

 *

 *  Copyright (c) 2020 Dell Inc.

 let userland know it may need to check reboot pending again */

/**

 * set_attribute() - Update an attribute value

 * @a_name: The attribute name

 * @a_value: The attribute value

 *

 * Sets an attribute to new value

 build/calculate buffer */

 build security area */

 build variables to set */

/**

 * set_bios_defaults() - Resets BIOS defaults

 * @deftype: the type of BIOS value reset to issue.

 *

 * Resets BIOS defaults

 build security area */

 SPDX-License-Identifier: GPL-2.0

/*

 * Functions corresponding to enumeration type attributes under

 * BIOS Enumeration GUID for use with dell-wmi-sysman

 *

 *  Copyright (c) 2020 Dell Inc.

 need to use specific instance_id and guid combination to get right data */

/**

 * validate_enumeration_input() - Validate input of current_value against possible values

 * @instance_id: The instance on which input is validated

 * @buf: Input value

/**

 * populate_enum_data() - Populate all properties of an instance under enumeration attribute

 * @enumeration_obj: ACPI object with enumeration data

 * @instance_id: The instance to enumerate

 * @attr_name_kobj: The parent kernel object

 * @enum_property_count: Total properties count under enumeration type

/**

 * exit_enum_attributes() - Clear all attribute data

 *

 * Clears all data allocated for this group of attributes

 SPDX-License-Identifier: GPL-2.0+

/*

 * Mellanox register access driver

 *

 * Copyright (C) 2018 Mellanox Technologies

 * Copyright (C) 2018 Vadim Pasternak <vadimp@mellanox.com>

 Attribute parameters. */

/**

 * struct mlxreg_io_priv_data - driver's private data:

 *

 * @pdev: platform device;

 * @pdata: platform data;

 * @hwmon: hwmon device;

 * @mlxreg_io_attr: sysfs attributes array;

 * @mlxreg_io_dev_attr: sysfs sensor device attribute array;

 * @group: sysfs attribute group;

 * @groups: list of sysfs attribute group for hwmon registration;

 * @regsize: size of a register value;

	/*

	 * There are four kinds of attributes: single bit, full register's

	 * bits, bit sequence, bits in few registers For the first kind field

	 * mask indicates which bits are not related and field bit is set zero.

	 * For the second kind field mask is set to zero and field bit is set

	 * with all bits one. No special handling for such kind of attributes -

	 * pass value as is. For the third kind, the field mask indicates which

	 * bits are related and the field bit is set to the first bit number

	 * (from 1 to 32) is the bit sequence. For the fourth kind - the number

	 * of registers which should be read for getting an attribute are

	 * specified through 'data->regnum' field.

 Single bit. */

 For show: expose effective bit value as 0 or 1. */

 For store: set effective bit value. */

 Bit sequence. */

 For show: mask and shift right. */

 For store: shift to the position and mask. */

 Clear relevant bits and set them to new value. */

		/*

		 * Some attributes could occupied few registers in case regmap

		 * bit size is 8 or 16. Compose such attributes from 'regnum'

		 * registers. Such attributes contain read-only data.

 Convert buffer to input value. */

 Set attribute name as a label. */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Mellanox hotplug driver

 *

 * Copyright (C) 2016-2020 Mellanox Technologies

 Offset of event and mask registers from status register. */

 ASIC good health mask. */

/**

 * struct mlxreg_hotplug_priv_data - platform private data:

 * @irq: platform device interrupt number;

 * @dev: basic device;

 * @pdev: platform device;

 * @plat: platform data;

 * @regmap: register map handle;

 * @dwork_irq: delayed work template;

 * @lock: spin lock;

 * @hwmon: hwmon device;

 * @mlxreg_hotplug_attr: sysfs attributes array;

 * @mlxreg_hotplug_dev_attr: sysfs sensor device attribute array;

 * @group: sysfs attribute group;

 * @groups: list of sysfs attribute group for hwmon registration;

 * @cell: location of top aggregation interrupt register;

 * @mask: top aggregation interrupt common mask;

 * @aggr_cache: last value of aggregation register status;

 * @after_probe: flag indication probing completion;

 * @not_asserted: number of entries in workqueue with no signal assertion;

 sync with interrupt */

 Environment variables array for udev. */

 Export regmap to underlying device. */

 Notify user by sending hwmon uevent. */

	/*

	 * Return if adapter number is negative. It could be in case hotplug

	 * event is not associated with hotplug device.

 Export platform data to underlying device. */

 Export platform data to underlying device. */

 Pass parent hotplug device handle to underlying device. */

 Notify user by sending hwmon uevent. */

 Bit = 0 : functional if item->inversed is true. */

 Go over all kinds of items - psu, pwr, fan. */

			/*

			 * Read group capability register to get actual number

			 * of interrupt capable components and set group mask

			 * accordingly.

 Go over all unmasked units within item. */

				/*

				 * Read capability register and skip non

				 * relevant attributes.

	/*

	 * Validate if item related to received signal type is valid.

	 * It should never happen, excepted the situation when some

	 * piece of hardware is broken. In such situation just produce

	 * error message and return. Caller must continue to handle the

	 * signals from other devices if any.

 Mask event. */

 Read status. */

 Set asserted bits and save last status. */

 Acknowledge event. */

 Unmask event. */

 Mask event. */

 Read status. */

		/*

		 * ASIC health indication is provided through two bits. Bits

		 * value 0x2 indicates that ASIC reached the good health, value

		 * 0x0 indicates ASIC the bad health or dormant state and value

		 * 0x3 indicates the booting state. During ASIC reset it should

		 * pass the following states: dormant -> booting -> good.

				/*

				 * ASIC is in steady state. Connect associated

				 * device, if configured.

				/*

				 * ASIC health is failed after ASIC has been

				 * in steady state. Disconnect associated

				 * device, if it has been connected.

 Acknowledge event. */

 Unmask event. */

/*

 * mlxreg_hotplug_work_handler - performs traversing of device interrupt

 * registers according to the below hierarchy schema:

 *

 *				Aggregation registers (status/mask)

 * PSU registers:		*---*

 * *-----------------*		|   |

 * |status/event/mask|----->    | * |

 * *-----------------*		|   |

 * Power registers:		|   |

 * *-----------------*		|   |

 * |status/event/mask|----->    | * |

 * *-----------------*		|   |

 * FAN registers:		|   |--> CPU

 * *-----------------*		|   |

 * |status/event/mask|----->    | * |

 * *-----------------*		|   |

 * ASIC registers:		|   |

 * *-----------------*		|   |

 * |status/event/mask|----->    | * |

 * *-----------------*		|   |

 *				*---*

 *

 * In case some system changed are detected: FAN in/out, PSU in/out, power

 * cable attached/detached, ASIC health good/bad, relevant device is created

 * or destroyed.

 Mask aggregation event. */

 Read aggregation status. */

	/*

	 * Handler is invoked, but no assertion is detected at top aggregation

	 * status level. Set aggr_asserted to mask value to allow handler extra

	 * run over all relevant signals to recover any missed signal.

 Handle topology and health configuration changes. */

	/*

	 * It is possible, that some signals have been inserted, while

	 * interrupt has been masked by mlxreg_hotplug_work_handler. In this

	 * case such signals will be missed. In order to handle these signals

	 * delayed work is canceled and work task re-scheduled for immediate

	 * execution. It allows to handle missed signals, if any. In other case

	 * work handler just validates that no new signals have been received

	 * during masking.

 Unmask aggregation event (no need acknowledge). */

 Clear group presense event. */

		/*

		 * Verify if hardware configuration requires to disable

		 * interrupt capability for some of components.

 Verify if the attribute has capability register. */

 Read capability register. */

 Set group initial status as mask and unmask group event. */

 Keep aggregation initial status as zero and unmask events. */

 Keep low aggregation initial status as zero and unmask events. */

 Invoke work handler for initializing hot plug devices setting. */

 Mask low aggregation event, if defined. */

 Mask aggregation event. */

 Clear topology configurations. */

 Mask group presense event. */

 Clear group presense event. */

 Remove all the attached devices in group. */

 Schedule work task for immediate execution.*/

 Defer probing if the necessary adapter is not configured yet. */

 Perform initial interrupts setup. */

 Clean interrupts setup. */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Mellanox BlueField SoC TmFifo driver

 *

 * Copyright (C) 2019 Mellanox Technologies

 Vring size. */

 Console Tx buffer size. */

 Console Tx buffer reserved space. */

 House-keeping timer interval. */

 Virtual devices sharing the TM FIFO. */

/*

 * Reserve 1/16 of TmFifo space, so console messages are not starved by

 * the networking traffic.

 Message with data needs at least two words (for header & data). */

/**

 * mlxbf_tmfifo_vring - Structure of the TmFifo virtual ring

 * @va: virtual address of the ring

 * @dma: dma address of the ring

 * @vq: pointer to the virtio virtqueue

 * @desc: current descriptor of the pending packet

 * @desc_head: head descriptor of the pending packet

 * @cur_len: processed length of the current descriptor

 * @rem_len: remaining length of the pending packet

 * @pkt_len: total length of the pending packet

 * @next_avail: next avail descriptor id

 * @num: vring size (number of descriptors)

 * @align: vring alignment size

 * @index: vring index

 * @vdev_id: vring virtio id (VIRTIO_ID_xxx)

 * @fifo: pointer to the tmfifo structure

 Interrupt types. */

 Ring types (Rx & Tx). */

/**

 * mlxbf_tmfifo_vdev - Structure of the TmFifo virtual device

 * @vdev: virtio device, in which the vdev.id.device field has the

 *        VIRTIO_ID_xxx id to distinguish the virtual device.

 * @status: status of the device

 * @features: supported features of the device

 * @vrings: array of tmfifo vrings of this device

 * @config.cons: virtual console config -

 *               select if vdev.id.device is VIRTIO_ID_CONSOLE

 * @config.net: virtual network config -

 *              select if vdev.id.device is VIRTIO_ID_NET

 * @tx_buf: tx buffer used to buffer data before writing into the FIFO

/**

 * mlxbf_tmfifo_irq_info - Structure of the interrupt information

 * @fifo: pointer to the tmfifo structure

 * @irq: interrupt number

 * @index: index into the interrupt array

/**

 * mlxbf_tmfifo - Structure of the TmFifo

 * @vdev: array of the virtual devices running over the TmFifo

 * @lock: lock to protect the TmFifo access

 * @rx_base: mapped register base address for the Rx FIFO

 * @tx_base: mapped register base address for the Tx FIFO

 * @rx_fifo_size: number of entries of the Rx FIFO

 * @tx_fifo_size: number of entries of the Tx FIFO

 * @pend_events: pending bits for deferred events

 * @irq_info: interrupt information

 * @work: work struct for deferred process

 * @timer: background timer

 * @vring: Tx/Rx ring

 * @spin_lock: Tx/Rx spin lock

 * @is_ready: ready flag

 TmFifo lock */

 spin lock */

/**

 * mlxbf_tmfifo_msg_hdr - Structure of the TmFifo message header

 * @type: message type

 * @len: payload length in network byte order. Messages sent into the FIFO

 *       will be read by the other side as data stream in the same byte order.

 *       The length needs to be encoded into network order so both sides

 *       could understand it.

/*

 * Default MAC.

 * This MAC address will be read from EFI persistent variable if configured.

 * It can also be reconfigured with standard Linux tools.

 EFI variable name of the MAC address. */

 Maximum L2 header length. */

 Supported virtio-net features. */

 Free vrings of the FIFO device. */

 Allocate vrings for the FIFO. */

 Disable interrupts of the FIFO device. */

 Interrupt handler. */

 Get the next packet descriptor from the vring. */

 Make sure 'avail->idx' is visible already. */

 Release virtio descriptor. */

	/*

	 * Virtio could poll and check the 'idx' to decide whether the desc is

	 * done or not. Add a memory barrier here to make sure the update above

	 * completes before updating the idx.

 Get the total length of the descriptor chain. */

 Get and initialize the next packet. */

 House-keeping timer. */

 Copy one console packet into the output buffer. */

 Copy console data into the output buffer. */

 Release the packet if not enough space. */

 Get the number of available words in Rx FIFO for receiving. */

 Get the number of available words in the TmFifo for sending. */

 Reserve some room in FIFO for console messages. */

 Console Tx (move data from the output buffer into the TmFifo). */

 Return if not enough space available. */

 Return if no data to send. */

 Adjust the size to available space. */

 Write header. */

 Use spin-lock to protect the 'cons->tx_buf'. */

 Rx/Tx one word in the descriptor buffer. */

 Get the buffer address of this desc. */

 Read a word from FIFO for Rx. */

 The whole word. */

 Leftover bytes. */

 Write the word into FIFO for Tx. */

/*

 * Rx/Tx packet header.

 *

 * In Rx case, the packet might be found to belong to a different vring since

 * the TmFifo is shared by different services. In such case, the 'vring_change'

 * flag is set.

 Read/Write packet header. */

 Drain one word from the FIFO. */

 Skip the length 0 packets (keepalive). */

 Check packet type. */

 A legacy-only interface for now. */

		/*

		 * Check whether the new packet still belongs to this vring.

		 * If not, update the pkt_len of the new vring.

 Network virtio has an extra header. */

/*

 * Rx/Tx one descriptor.

 *

 * Return true to indicate more data available.

 Get the descriptor of the next packet. */

 Beginning of a packet. Start to Rx/Tx packet header. */

 Return if new packet is for another ring. */

 Get the length of this desc. */

 Rx/Tx one word (8 bytes) if not done. */

 Check again whether it's done. */

 Get the next desc on the chain. */

 Done and release the pending packet. */

		/*

		 * Make sure the load/store are in order before

		 * returning back to virtio.

 Notify upper layer that packet is done. */

 Save the current desc. */

 Rx & Tx processing of a queue. */

 Return if vdev is not ready. */

 Return if another vring is running. */

 Only handle console and network for now. */

 Get available FIFO space. */

 Console output always comes from the Tx buffer. */

 Handle one descriptor. */

 Handle Rx or Tx queues. */

 Work handler for Rx and Tx case. */

 Tx (Send data to the TmFifo). */

 Rx (Receive data from the TmFifo). */

 The notify function is called when new buffers are posted. */

	/*

	 * Virtio maintains vrings in pairs, even number ring for Rx

	 * and odd number ring for Tx.

		/*

		 * Console could make blocking call with interrupts disabled.

		 * In such case, the vring needs to be served right away. For

		 * other cases, just set the TX LWM bit to start Tx in the

		 * worker handler.

 Get the array of feature bits for this device. */

 Confirm device features to use. */

 Free virtqueues found by find_vqs(). */

 Release the pending packet. */

 Create and initialize the virtual queues. */

 zero vring */

 Read the status byte. */

 Write the status byte. */

 Reset the device. Not much here for now. */

 Read the value of a configuration field. */

 Write the value of a configuration field. */

 Virtio config operations. */

 Create vdev for the FIFO. */

 Allocate an output buffer for the console device. */

 Register the virtio device. */

 Delete vdev for the FIFO. */

 Unregister vdev. */

 Read the configured network MAC address from efi variable. */

 Set TmFifo thresolds which is used to trigger interrupts. */

 Get Tx FIFO size and set the low/high watermark. */

 Get Rx FIFO size and set the low/high watermark. */

 Probe the TMFIFO. */

 Get the resource of the Rx FIFO. */

 Get the resource of the Tx FIFO. */

 Create the console vdev. */

 Create the network vdev. */

 A legacy-only interface for now. */

 Device remove function. */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Mellanox boot control driver

 *

 * This driver provides a sysfs interface for systems management

 * software to manage reset-time actions.

 *

 * Copyright (C) 2019 Mellanox Technologies

 UUID used to probe ATF service. */

 ARM SMC call which is atomic and no need for lock. */

 Return the action in integer or an error code. */

 Return the action in string. */

	/*

	 * If the test bits are set, we specify that the current state may be

	 * due to using the test bits.

	/*

	 * key_state contains the bits for 4 Key versions, loaded from eFuses

	 * after a hard reset. Lower 4 bits are a thermometer code indicating

	 * key programming has started for key n (0000 = none, 0001 = version 0,

	 * 0011 = version 1, 0111 = version 2, 1111 = version 3). Upper 4 bits

	 * are a thermometer code indicating key programming has completed for

	 * key n (same encodings as the start bits). This allows for detection

	 * of an interruption in the programming process which has left the key

	 * partially programmed (and thus invalid). The process is to burn the

	 * eFuse for the new key start bit, burn the key eFuses, then burn the

	 * eFuse for the new key complete bit.

	 *

	 * For example 0000_0000: no key valid, 0001_0001: key version 0 valid,

	 * 0011_0011: key 1 version valid, 0011_0111: key version 2 started

	 * programming but did not complete, etc. The most recent key for which

	 * both start and complete bit is set is loaded. On soft reset, this

	 * register is not modified.

 Ensure we have the UUID we expect for this service. */

	/*

	 * When watchdog is used, it sets boot mode to MLXBF_BOOTCTL_SWAP_EMMC

	 * in case of boot failures. However it doesn't clear the state if there

	 * is no failure. Restore the default boot mode here to avoid any

	 * unnecessary boot partition swapping.

 SPDX-License-Identifier: GPL-2.0-only OR Linux-OpenIB

/*

 * Mellanox BlueField Performance Monitoring Counters driver

 *

 * This driver provides a sysfs interface for monitoring

 * performance statistics in BlueField SoC.

 *

 * Copyright (c) 2020, NVIDIA CORPORATION.  All rights reserved.

/**

 * struct mlxbf_pmc_attribute - Structure to hold attribute and block info

 * for each sysfs entry

 * @dev_attr: Device attribute struct

 * @index: index to identify counter number within a block

 * @nr: block number to which the sysfs belongs

/**

 * struct mlxbf_pmc_block_info - Structure to hold info for each HW block

 *

 * @mmio_base: The VA at which the PMC block is mapped

 * @blk_size: Size of each mapped region

 * @counters: Number of counters in the block

 * @type: Type of counters in the block

 * @attr_counter: Attributes for "counter" sysfs files

 * @attr_event: Attributes for "event" sysfs files

 * @attr_event_list: Attributes for "event_list" sysfs files

 * @attr_enable: Attributes for "enable" sysfs files

 * @block_attr: All attributes needed for the block

 * @block_attr_grp: Attribute group for the block

/**

 * struct mlxbf_pmc_context - Structure to hold PMC context info

 *

 * @pdev: The kernel structure representing the device

 * @total_blocks: Total number of blocks

 * @tile_count: Number of tiles in the system

 * @hwmon_dev: Hwmon device for bfperf

 * @block_name: Block name

 * @block:  Block info

 * @groups:  Attribute groups from each block

 * @svc_sreg_support: Whether SMCs are used to access performance registers

 * @sreg_tbl_perf: Secure register access table number

 * @event_set: Event set to use

/**

 * struct mlxbf_pmc_events - Structure to hold supported events for each block

 * @evt_num: Event number used to program counters

 * @evt_name: Name of the event

 UUID used to probe ATF service. */

 Calls an SMC to access a performance register */

 Read from a performance counter */

 Convenience function for 32-bit reads */

 Calls an SMC to access a performance register */

 Write to a performance counter */

 Check if the register offset is within the mapped region for the block */

 inside the mapped PMC space */

 Get the event list corresponding to a certain block */

 Get the event number given the name */

 Get the event number given the name */

 Method to enable/disable/reset l3cache counters */

 Method to handle l3cache counter programming */

 Disable all counters before programming them */

 Select appropriate register information */

 Method to program a counter to monitor an event */

 Configure the counter */

 Select the event */

 Clear the accumulator */

 Method to handle l3 counter reads */

 Method to read the counter value */

 Set counter in "read" mode */

 Get the counter value */

 Method to read L3 block event */

 Select appropriate register information */

 Read from appropriate register field for the counter */

 Method to find the event currently being monitored by a counter */

 Set counter in "read" mode */

 Check if the counter is enabled */

 Set counter in "read" mode */

 Get the event number */

 Method to read a register */

 Method to write to a register */

 Show function for "counter" sysfs files */

 Store function for "counter" sysfs files */

 Allow non-zero writes only to the ecc regs */

 Do not allow writes to the L3C regs */

 Show function for "event" sysfs files */

 Store function for "event" sysfs files */

 Show function for "event_list" sysfs files */

 Show function for "enable" sysfs files - only for l3cache */

 Store function for "enable" sysfs files - only for l3cache */

 Populate attributes for blocks with counters to monitor performance */

 "event_list" sysfs to list events supported by the block */

 "enable" sysfs to start/stop the counters. Only in L3C blocks */

 "eventX" and "counterX" sysfs to program and read counter values */

 Populate attributes for blocks with registers to monitor performance */

 Helper to create the bfperf sysfs sub-directories and files */

 Populate attributes based on counter type */

 Add a new attribute_group for the block */

 Helper to map the Performance Counters from the varios blocks */

		/*

		 * Do not remap if the proper SMC calls are supported,

		 * since the SMC calls expect physical addresses.

 Ensure we have the UUID we expect for this service. */

	/*

	 * ACPI indicates whether we use SMCs to access registers or not.

	 * If sreg_tbl_perf is not present, just assume we're not using SMCs.

		/*

		 * Check service version to see if we actually do support the

		 * needed SMCs. If we have the calls we need, mark support for

		 * them in the pmc struct.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Nvidia line card driver

 *

 * Copyright (C) 2020 Nvidia Technologies Ltd.

 I2C bus IO offsets */

/**

 * enum mlxreg_lc_type - line cards types

 *

 * @MLXREG_LC_SN4800_C16: 100GbE line card with 16 QSFP28 ports;

/**

 * enum mlxreg_lc_state - line cards state

 *

 * @MLXREG_LC_INITIALIZED: line card is initialized;

 * @MLXREG_LC_POWERED: line card is powered;

 * @MLXREG_LC_SYNCED: line card is synchronized between hardware and firmware;

/* mlxreg_lc - device private data

 * @dev: platform device;

 * @lock: line card lock;

 * @par_regmap: parent device regmap handle;

 * @data: pltaform core data;

 * @io_data: register access platform data;

 * @led_data: LED platform data ;

 * @mux_data: MUX platform data;

 * @led: LED device;

 * @io_regs: register access device;

 * @mux_brdinfo: mux configuration;

 * @mux: mux devices;

 * @aux_devs: I2C devices feeding by auxiliary power;

 * @aux_devs_num: number of I2C devices feeding by auxiliary power;

 * @main_devs: I2C devices feeding by main power;

 * @main_devs_num: number of I2C devices feeding by main power;

 * @state: line card state;

 line card access lock */

 Configuration for the register map of a device with 2 bytes address space. */

/* Default channels vector.

 * It contains only the channels, which physically connected to the devices,

 * empty channels are skipped.

 Defaul mux configuration. */

 Defaul mux board info. */

 Line card default auxiliary power static devices. */

 Line card default auxiliary power board info. */

 Line card default main power static devices. */

 Line card default main power board info. */

 LED default data. */

 Default register access data. */

 Create static I2C device feeding by auxiliary or main power. */

 Destroy static I2C device feeding by auxiliary or main power. */

	/*

	 * Hardware holds the line card after powering on in the disabled state. Holding line card

	 * in disabled state protects access to the line components, like FPGA and gearboxes.

	 * Line card should be enabled in order to get it in operational state. Line card could be

	 * disabled for moving it to non-operational state. Enabling line card does not affect the

	 * line card which is already has been enabled. Disabling does not affect the disabled line

	 * card.

 Set line card configuration according to the type. */

/*

 * Callback is to be called from mlxreg-hotplug driver to notify about line card about received

 * event.

		/*

		 * Synchronization event - hardware and firmware are synchronized. Power on/off

		 * line card - to allow/disallow main power source.

 Power line card if it is not powered yet. */

 In case line card is configured - enable it. */

 Power event - attach or de-attach line card device feeding by the main power. */

 Do not create devices, if line card is already powered. */

 In case line card is configured - enable it. */

 In case line card is already in ready state - enable it. */

		/*

		 * Ready event – enable line card by releasing it from reset or disable it by put

		 * to reset state.

 Thermal shutdown event – power off line card. */

/*

 * Callback is to be called from i2c-mux-mlxcpld driver to indicate that all adapter devices has

 * been created.

 Update I2C devices feeding by auxiliary power. */

 Update I2C devices feeding by main power. */

 Verify if line card is powered. */

 Verify if line card is synchronized. */

 Power on line card if necessary. */

 Validate line card type. */

 Create mux infrastructure. */

 Register IO access driver. */

 Register LED driver. */

 Unregister LED driver. */

 Unregister IO access driver. */

 Remove mux infrastructure. */

 Set event notification callback. */

 Create device at the top of line card I2C tree.*/

 Set default registers. */

 Sync registers with hardware. */

 Configure line card. */

 Clear event notification callback. */

 Destroy static I2C device feeding by main power. */

 Destroy static I2C device feeding by auxiliary power. */

 Unregister underlying drivers. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Generic driver for the OLPC Embedded Controller.

 *

 * Author: Andres Salomon <dilinger@queued.net>

 *

 * Copyright (C) 2011-2012 One Laptop per Child Foundation.

 DCON regulator */

 Pending EC commands */

	/*

	 * EC event mask to be applied during suspend (defining wakeup

	 * sources).

	/*

	 * Running an EC command while suspending means we don't always finish

	 * the command before the machine suspends.  This means that the EC

	 * is expecting the command protocol to finish, but we after a period

	 * of time (while the OS is asleep) the EC times out and restarts its

	 * idle loop.  Meanwhile, the OS wakes up, thinks it's still in the

	 * middle of the command protocol, starts throwing random things at

	 * the EC... and everyone's uphappy.

 Grab the first pending command from the queue */

 Do we actually have anything to do? */

 Protect the EC hw with a mutex; only run one cmd at a time */

 Finished, wake up olpc_ec_cmd() */

 Run the worker thread again in case there are more cmds pending */

/*

 * Throw a cmd descripter onto the list.  We now have SMP OLPC machines, so

 * locking is pretty critical.

 Driver not yet registered. */

 Suspending in the middle of a command hoses things really badly */

 Timeouts must be handled in the platform-specific EC hook */

 The worker thread dequeues the cmd; no need to do anything here */

 EC version 0x5f adds support for wide SCI mask */

/*

 * Returns true if the compile and runtime configurations allow for EC events

 * to wake the system.

 EC version 0x5f adds support for wide SCI mask */

/*

 * debugfs support for "generic commands", to allow sending

 * arbitrary EC commands from userspace.

 cmd byte + 5 args */

 reset to prevent overflow on read */

 convert scanf'd ints to char */

 CONFIG_DEBUG_FS */

 get the EC revision */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for the OLPC XO-1.75 Embedded Controller.

 *

 * The EC protocol is documented at:

 * http://wiki.laptop.org/go/XO_1.75_HOST_to_EC_Protocol

 *

 * Copyright (C) 2010 One Laptop per Child Foundation.

 * Copyright (C) 2018 Lubomir Rintel <lkundrak@v3.sk>

/*

 * EC events

 AC plugged/unplugged */

 Battery low/full/error/gone */

 Battery critical voltage */

 1% SOC Change */

 Abnormal error, query for cause */

 Power button was pressed */

 Woken up with a power button */

 Host wake timer */

 OLS crossed dark threshold */

 OLS crossed light threshold */

/*

 * EC commands

 * (from http://dev.laptop.org/git/users/rsmith/ec-1.75/tree/ec_cmd.h)

 out: u8 */

 out: u16, *9.76/32, mV */

 out: s16, *15.625/120, mA */

 out: s16, *6250/15, uAh */

 out: u16, *100/256, deg C */

 unimplemented, no hardware */

 out: u8, bitmask */

 out: u8, percentage */

 out: u8 * 8 */

 in: u8 addr, out: u8 data */

 out: u16 (platform id) */

 out: u8, error bitmask */

 in: u8 */

 none */

 out: u8 */

 out: u8 */

 in: u32, out: ? */

 ? */

 ? */

 none */

 none */

 none */

 out: u8 */

 out: u8 */

 in: u8 */

 none */

 none */

 out: u16 */

 ? */

 ? */

 ? */

 out: u8 * 16 */

 none */

 none */

 none */

 ? */

 ? */

 in: u8 * 5, out: u8 * 5 */

 out: u8 * 16 */

 out: u8 * 16 */

 none (same as 0x4c) */

 out: u16 */

 none */

 none */

 none */

 none */

 none */

 out: u16 */

 out: u16 */

 out: u16 */

 none */

 in: u16 addr, out: u8 data */

 in: u16 addr, u8 data */

 in: u8, out: ? */

 in: u8, out: ? */

 out: u8 * 16 */

 in: u8 */

 in: u8 */

 in: 32 */

 in: u8 */

 in: u16, u16 */

 out: u16, u16 */

 in: u16 */

 out: u16 */

/*

 * Accepted EC commands, and how many bytes they return. There are plenty

 * of EC commands that are no longer implemented, or are implemented only on

 * certain older boards.

 SPI related stuff. */

 GPIO for the CMD signals. */

 Command handling related state. */

 Power button. */

 Debug handling. */

 We can safely ignore these */

 Just go with the flow */

 Throw command into TxFIFO */

 Most non-command packets get the TxFIFO refilled and an ACK. */

/*

 * This function is protected with a mutex. We can safely assume that

 * there will be only one instance of this function running at a time.

 * One of the ways in which we enforce this is by waiting until we get

 * all response bytes back from the EC, rather than just the number that

 * the caller requests (otherwise, we might start a new command while an

 * old command's response bytes are still incoming).

 Suspending in the middle of an EC command hoses things badly! */

 Ensure a valid command and return bytes */

		/*

		 * Assume the best in our callers, and allow unknown commands

		 * through. I'm not the charitable type, but it was beaten

		 * into me. Just maintain a minimum standard of sanity.

 Initialize the state machine */

 Tickle the cmd gpio to get things started */

 The irq handler should do the rest */

 Deal with the results. */

 EC-provided error is in the single response byte */

		/*

		 * We may have 8 bytes in priv->resp, but we only care about

		 * what we've been asked for. If the caller asked for only 2

		 * bytes, give them that. We've guaranteed that

		 * resp_len <= priv->resp_len and priv->resp_len == nr_bytes.

 This should already be low, but just in case. */

	/*

	 * SOC_SLEEP is not wired to the EC on B3 and earlier boards.

	 * This command lets the EC know instead. The suspend count doesn't seem

	 * to be used anywhere but in the EC debug output.

	/*

	 * After we've sent the suspend hint, don't allow further EC commands

	 * to be run until we've resumed. Userspace tasks should be frozen,

	 * but kernel threads and interrupts could still schedule EC commands.

	/*

	 * The resume hint is only needed if no other commands are

	 * being sent during resume. all it does is tell the EC

	 * the SoC is definitely awake.

 Enable all EC events while we're awake */

 Set up power button input device */

 Enable all EC events while we're awake */

 Functionality */

 Bugs */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2012 Intel, Inc.

 * Copyright (C) 2013 Intel, Inc.

 * Copyright (C) 2014 Linaro Limited

 * Copyright (C) 2011-2016 Google, Inc.

 *

 * This software is licensed under the terms of the GNU General Public

 * License version 2, as published by the Free Software Foundation, and

 * may be copied, distributed, and modified under those terms.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

/* This source file contains the implementation of a special device driver

 * that intends to provide a *very* fast communication channel between the

 * guest system and the QEMU emulator.

 *

 * Usage from the guest is simply the following (error handling simplified):

 *

 *    int  fd = open("/dev/qemu_pipe",O_RDWR);

 *    .... write() or read() through the pipe.

 *

 * This driver doesn't deal with the exact protocol used during the session.

 * It is intended to be as simple as something like:

 *

 *    // do this _just_ after opening the fd to connect to a specific

 *    // emulator service.

 *    const char*  msg = "<pipename>";

 *    if (write(fd, msg, strlen(msg)+1) < 0) {

 *       ... could not connect to <pipename> service

 *       close(fd);

 *    }

 *

 *    // after this, simply read() and write() to communicate with the

 *    // service. Exact protocol details left as an exercise to the reader.

 *

 * This driver is very fast because it doesn't copy any data through

 * intermediate buffers, since the emulator is capable of translating

 * guest user addresses into host ones.

 *

 * Note that we must however ensure that each user page involved in the

 * exchange is properly mapped during a transfer.

/*

 * Update this when something changes in the driver's behavior so the host

 * can benefit from knowing it

 A per-pipe command structure, shared with the host */

 PipeCmdCode, guest -> host */

 pipe id, guest -> host */

 command execution status, host -> guest */

 to pad to 64-bit boundary */

 Parameters for PIPE_CMD_{READ,WRITE} */

 number of buffers, guest -> host */

 number of consumed bytes, host -> guest */

 buffer pointers, guest -> host */

 buffer sizes, guest -> host */

 A single signalled pipe information */

 Parameters for the PIPE_CMD_OPEN command */

 Device-level set of buffers shared with the host */

 This data type models a given pipe instance */

 pipe ID - index into goldfish_pipe_dev::pipes array */

	/* The wake flags pipe is waiting for

	 * Note: not protected with any lock, uses atomic operations

	 *  and barriers to make it thread-safe.

	/* wake flags host have signalled,

	 *  - protected by goldfish_pipe_dev::lock

 A pointer to command buffer */

	/* doubly linked list of signalled pipes, protected by

	 * goldfish_pipe_dev::lock

	/*

	 * A pipe's own lock. Protects the following:

	 *  - *command_buffer - makes sure a command can safely write its

	 *    parameters to the host and read the results back.

 A wake queue for sleeping until host signals an event */

 Pointer to the parent goldfish_pipe_dev instance */

 A buffer of pages, too large to fit into a stack frame */

/* The global driver data. Holds a reference to the i/o page used to

 * communicate with the emulator, and a wake queue for blocked tasks

 * waiting to be awoken.

 A magic number to check if this is an instance of this struct */

	/*

	 * Global device spinlock. Protects the following members:

	 *  - pipes, pipes_capacity

	 *  - [*pipes, *pipes + pipes_capacity) - array data

	 *  - first_signalled_pipe,

	 *      goldfish_pipe::prev_signalled,

	 *      goldfish_pipe::next_signalled,

	 *      goldfish_pipe::signalled_flags - all singnalled-related fields,

	 *                                       in all allocated pipes

	 *  - open_command_params - PIPE_CMD_OPEN-related buffers

	 *

	 * It looks like a lot of different fields, but the trick is that

	 * the only operation that happens often is the signalled pipes array

	 * manipulation. That's why it's OK for now to keep the rest of the

	 * fields under the same lock. If we notice too much contention because

	 * of PIPE_CMD_OPEN, then we should add a separate lock there.

	/*

	 * Array of the pipes of |pipes_capacity| elements,

	 * indexed by goldfish_pipe::id

 Pointers to the buffers host uses for interaction with this driver */

 Head of a doubly linked list of signalled pipes */

 ptr to platform device's device struct */

 Some device-specific data */

 failure by default */

/*

 * This function converts an error code returned by the emulator through

 * the PIPE_REG_STATUS i/o register into a valid negative errno value.

 Populate the call parameters, merging adjacent pages together */

	/*

	 * Process the first page separately - it's the only page that

	 * needs special handling for its start address.

 Serialize access to the pipe command buffers */

 Transfer the data */

 Tell the emulator we're going to wait for a wake event */

 If the emulator already closed the pipe, no need to go further */

 Null reads or writes succeeds */

 Check the buffer range for access */

			/* No matter what's the status, we've transferred

			 * something.

 EOF */

			/*

			 * An error occurred, but we already transferred

			 * something on one of the previous iterations.

			 * Just return what we already copied and log this

			 * err.

		/*

		 * If the error is not PIPE_ERROR_AGAIN, or if we are in

		 * non-blocking mode, just return the error code.

 is_write */ 0);

 cast away the const */

 is_write */ 1);

 already in the list */

		/*

		 * This is an optimized version of

		 * signalled_pipes_remove_locked()

		 * - We want to make it as fast as possible to

		 * wake the sleeping pipe operations faster.

 Iterate over the signalled pipes and wake them one by one */

		/*

		 * wake_up_interruptible() implies a write barrier, so don't

		 * explicitly add another one here.

/*

 * The general idea of the (threaded) interrupt handling:

 *

 *  1. device raises an interrupt if there's at least one signalled pipe

 *  2. IRQ handler reads the signalled pipes and their count from the device

 *  3. device writes them into a shared buffer and returns the count

 *      it only resets the IRQ if it has returned all signalled pipes,

 *      otherwise it leaves it raised, so IRQ handler will be called

 *      again for the next chunk

 *  4. IRQ handler adds all returned pipes to the device's signalled pipes list

 *  5. IRQ handler defers processing the signalled pipes from the list in a

 *      separate context

 Request the signalled pipes from the device */

		/* Reallocate the array.

		 * Since get_free_pipe_id_locked runs with interrupts disabled,

		 * we don't want to make calls that could lead to sleep.

 A helper function to get the instance of goldfish_pipe_dev from file */

/**

 *	goldfish_pipe_open - open a channel to the AVD

 *	@inode: inode of device

 *	@file: file struct of opener

 *

 *	Create a new pipe link between the emulator and the use application.

 *	Each new request produces a new pipe.

 *

 *	Note: we use the pipe ID as a mux. All goldfish emulations are 32bit

 *	right now so this is fine. A move to 64bit will need this addressing

 Allocate new pipe kernel object */

	/*

	 * Command buffer needs to be allocated on its own page to make sure

	 * it is physically contiguous in host's address space.

 Now tell the emulator we're opening a new pipe. */

 All is done, save the pipe into the file's private data field */

 The guest is closing the channel, so tell the emulator right now */

	/*

	 * We're going to pass two buffers, open_command_params and

	 * signalled_pipe_buffers, to the host. This means each of those buffers

	 * needs to be contained in a single physical page. The easiest choice

	 * is to just allocate a page and place the buffers in it.

 Send the buffer addresses to the host */

	/*

	 * Exchange the versions with the host device

	 *

	 * Note: v1 driver used to not report its version, so we write it before

	 *  reading device version back: this allows the host implementation to

	 *  detect the old driver (if there was no version write before read).

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2020 Google LLC

 *

 * This driver serves as the receiver of cros_ec PD host events.

/**

 * cros_usbpd_register_notify - Register a notifier callback for PD events.

 * @nb: Notifier block pointer to register

 *

 * On ACPI platforms this corresponds to host events on the ECPD

 * "GOOG0003" ACPI device. On non-ACPI platforms this will filter mkbp events

 * for USB PD events.

 *

 * Return: 0 on success or negative error code.

/**

 * cros_usbpd_unregister_notify - Unregister notifier callback for PD events.

 * @nb: Notifier block pointer to unregister

 *

 * Unregister a notifier callback that was previously registered with

 * cros_usbpd_register_notify().

	/*

	 * We still send a 0 event out to older devices which don't

	 * have the updated device heirarchy.

 Check for PD host events on EC. */

 Get the EC device pointer needed to talk to the EC. */

		/*

		 * We continue even for older devices which don't have the

		 * correct device heirarchy, namely, GOOG0003 is a child

		 * of GOOG0004.

 CONFIG_ACPI */

 SPDX-License-Identifier: GPL-2.0

 I2C interface for ChromeOS Embedded Controller



 Copyright (C) 2012 Google, Inc

/*

 * Request format for protocol v3

 * byte 0	0xda (EC_COMMAND_PROTOCOL_3)

 * byte 1-8	struct ec_host_request

 * byte 10-	response data

 Always 0xda to backward compatible with v2 struct */

/*

 * Response format for protocol v3

 * byte 0	result code

 * byte 1	packet_length

 * byte 2-9	struct ec_host_response

 * byte 10-	response data

 create request data */

 send command to EC and read answer */

		/*

		 * When we send v3 request to v2 ec, ec won't recognize the

		 * 0xda (EC_COMMAND_PROTOCOL_3) and will return with status

		 * EC_RES_INVALID_COMMAND with zero data length.

		 *

		 * In case of invalid command for v3 protocol the data length

		 * will be at least sizeof(struct ec_host_response)

 copy response packet payload and compute checksum */

 All bytes should sum to zero */

	/*

	 * allocate larger packet (one byte for checksum, one byte for

	 * length, and one for result code)

	/*

	 * allocate larger packet (one byte for checksum, one for

	 * command code, one for length, and one for command version)

 copy message payload and compute checksum */

 send command to EC and read answer */

 check response error code */

 copy response packet payload and compute checksum */

 sentinel */ },

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

 Keyboard backlight LED driver for ChromeOS



 Copyright (C) 2012 Google, Inc.

 Keyboard LED ACPI Device must be defined in firmware */

 Look for the keyboard LED ACPI Device */

 SPDX-License-Identifier: GPL-2.0+

 Expose the Chromebook Pixel lightbar to userspace



 Copyright (C) 2014 Google, Inc.

 Rate-limit the lightbar interface to prevent DoS. */

/*

 * Whether or not we have given userspace control of the lightbar.

 * If this is true, we won't do anything during suspend/resume.

 Return 0 if able to throttle correctly, error otherwise */

 interrupted - just abort */

 Pixel had no version command. */

 Future devices w/lightbars should implement this command */

 Anything else (ie, EC_RES_INVALID_COMMAND) - no lightbar */

 This should always succeed, because we check during init. */

/*

 * We expect numbers, and we'll keep reading until we find them, skipping over

 * any whitespace (sysfs guarantees that the input is null-terminated). Every

 * four numbers are sent to the lightbar as <LED,R,G,B>. We fail at the first

 * parsing error, if we don't parse any numbers, or if we have numbers left

 * over.

 Skip any whitespace */

			/*

			 * Throttle only the first of every four transactions,

			 * so that the user can update all four LEDs at once.

 Skip over the number we just read */

	/*

	 * We might need to reject the program for size reasons. The EC

	 * enforces a maximum program size, but we also don't want to try

	 * and send a program that is too big for the protocol. In order

	 * to ensure the latter, we also need to ensure we have extra bytes

	 * to represent the rest of the packet.

	/*

	 * We need to set the message size manually or else it will use

	 * EC_LB_PROG_LEN. This might be too long, and the program

	 * is unlikely to use all of the space.

 Module initialization */

	/*

	 * Only instantiate the lightbar if the EC name is 'cros_ec'. Other EC

	 * devices like 'cros_pd' doesn't have a lightbar.

	/*

	 * Ask then for the lightbar version, if it's 0 then the 'cros_ec'

	 * doesn't have a lightbar.

 Take control of the lightbar from the EC. */

 Let the EC take over the lightbar again. */

 SPDX-License-Identifier: GPL-2.0

 ChromeOS EC communication protocol helper functions



 Copyright (C) 2015 Google, Inc

 Copy data and update checksum */

		/*

		 * This error can happen if a communication error happened and

		 * the EC is trying to use protocol v2, on an underlying

		 * communication mechanism that does not support v2.

		/*

		 * Query the EC's status until it's no longer busy or

		 * we encounter an error.

/**

 * cros_ec_prepare_tx() - Prepare an outgoing message in the output buffer.

 * @ec_dev: Device to register.

 * @msg: Message to write.

 *

 * This is intended to be used by all ChromeOS EC drivers, but at present

 * only SPI uses it. Once LPC uses the same protocol it can start using it.

 * I2C could use it now, with a refactor of the existing code.

 *

 * Return: 0 on success or negative error code.

/**

 * cros_ec_check_result() - Check ec_msg->result.

 * @ec_dev: EC device.

 * @msg: Message to check.

 *

 * This is used by ChromeOS EC drivers to check the ec_msg->result for

 * errors and to warn about them.

 *

 * Return: 0 on success or negative error code.

/*

 * cros_ec_get_host_event_wake_mask

 *

 * Get the mask of host events that cause wake from suspend.

 *

 * @ec_dev: EC device to call

 * @msg: message structure to use

 * @mask: result when function returns >=0.

 *

 * LOCKING:

 * the caller has ec_dev->lock mutex, or the caller knows there is

 * no other command in progress.

	/*

	 * Try using v3+ to query for supported protocols. If this

	 * command fails, fall back to v2. Returns the highest protocol

	 * supported by the EC.

	 * Also sets the max request/response/passthru size.

	/*

	 * Send command once again when timeout occurred.

	 * Fingerprint MCU (FPMCU) is restarted during system boot which

	 * introduces small window in which FPMCU won't respond for any

	 * messages sent by kernel. There is no need to wait before next

	 * attempt because we waited at least EC_MSG_DEADLINE_MS.

/*

 * cros_ec_get_host_command_version_mask

 *

 * Get the version mask of a given command.

 *

 * @ec_dev: EC device to call

 * @msg: message structure to use

 * @cmd: command to get the version of.

 * @mask: result when function returns 0.

 *

 * @return 0 on success, error code otherwise

 *

 * LOCKING:

 * the caller has ec_dev->lock mutex or the caller knows there is

 * no other command in progress.

/**

 * cros_ec_query_all() -  Query the protocol version supported by the

 *         ChromeOS EC.

 * @ec_dev: Device to register.

 *

 * Return: 0 on success or negative error code.

 First try sending with proto v3. */

		/*

		 * Check for PD

 Try querying with a v2 hello message. */

 V2 hello succeeded. */

			/*

			 * It's possible for a test to occur too early when

			 * the EC isn't listening. If this happens, we'll

			 * test later when the first command is run.

 Probe if MKBP event is supported */

 Probe if host sleep v1 is supported for S0ix failure detection. */

 Get host event wake mask. */

		/*

		 * If the EC doesn't support EC_CMD_HOST_EVENT_GET_WAKE_MASK,

		 * use a reasonable default. Note that we ignore various

		 * battery, AC status, and power-state events, because (a)

		 * those can be quite common (e.g., when sitting at full

		 * charge, on AC) and (b) these are not actionable wake events;

		 * if anything, we'd like to continue suspending (to save

		 * power), not wake up.

		/*

		 * Old ECs may not support this command. Complain about all

		 * other errors.

/**

 * cros_ec_cmd_xfer_status() - Send a command to the ChromeOS EC.

 * @ec_dev: EC device.

 * @msg: Message to write.

 *

 * Call this to send a command to the ChromeOS EC. This should be used instead of calling the EC's

 * cmd_xfer() callback directly. It returns success status only if both the command was transmitted

 * successfully and the EC replied with success status.

 *

 * Return:

 * >=0 - The number of bytes transferred

 * <0 - Linux error code

/**

 * cros_ec_get_next_event() - Fetch next event from the ChromeOS EC.

 * @ec_dev: Device to fetch event from.

 * @wake_event: Pointer to a bool set to true upon return if the event might be

 *              treated as a wake event. Ignored if null.

 * @has_more_events: Pointer to bool set to true if more than one event is

 *              pending.

 *              Some EC will set this flag to indicate cros_ec_get_next_event()

 *              can be called multiple times in a row.

 *              It is an optimization to prevent issuing a EC command for

 *              nothing or wait for another interrupt from the EC to process

 *              the next message.

 *              Ignored if null.

 *

 * Return: negative error code on errors; 0 for no data; or else number of

 * bytes received (i.e., an event was retrieved successfully). Event types are

 * written out to @ec_dev->event_data.event_type on success.

	/*

	 * Default value for wake_event.

	 * Wake up on keyboard event, wake up for spurious interrupt or link

	 * error to the EC.

	/*

	 * Default value for has_more_events.

	 * EC will raise another interrupt if AP does not process all events

	 * anyway.

		/*

		 * Sensor events need to be parsed by the sensor sub-device.

		 * Defer them, and don't report the wakeup here.

 rtc_update_irq() already handles wakeup events. */

 Masked host-events should not count as wake events. */

/**

 * cros_ec_get_host_event() - Return a mask of event set by the ChromeOS EC.

 * @ec_dev: Device to fetch event from.

 *

 * When MKBP is supported, when the EC raises an interrupt, we collect the

 * events raised and call the functions in the ec notifier. This function

 * is a helper to know which events are raised.

 *

 * Return: 0 on error or non-zero bitmask of one or more EC_HOST_EVENT_*.

/**

 * cros_ec_check_features() - Test for the presence of EC features

 *

 * @ec: EC device, does not have to be connected directly to the AP,

 *      can be daisy chained through another device.

 * @feature: One of ec_feature_code bit.

 *

 * Call this function to test whether the ChromeOS EC supports a feature.

 *

 * Return: true if supported, false if not (or if an error was encountered).

 features bitmap not read yet */

/**

 * cros_ec_get_sensor_count() - Return the number of MEMS sensors supported.

 *

 * @ec: EC device, does not have to be connected directly to the AP,

 *      can be daisy chained through another device.

 * Return: < 0 in case of error.

	/*

	 * Issue a command to get the number of sensor reported.

	 * If not supported, check for legacy mode.

	/*

	 * Check legacy mode: Let's find out if sensors are accessible

	 * via LPC interface.

			/*

			 * We have 2 sensors, one in the lid, one in the base.

			/*

			 * EC uses LPC interface and no sensors are presented.

/**

 * cros_ec_command - Send a command to the EC.

 *

 * @ec_dev: EC device

 * @version: EC command version

 * @command: EC command

 * @outdata: EC command output data

 * @outsize: Size of outdata

 * @indata: EC command input data

 * @insize: Size of indata

 *

 * Return: >= 0 on success, negative error number on failure.

 SPDX-License-Identifier: GPL-2.0

 SPI interface for ChromeOS Embedded Controller



 Copyright (C) 2012 Google, Inc

 The header byte, which follows the preamble */

/*

 * Number of EC preamble bytes we read at a time. Since it takes

 * about 400-500us for the EC to respond there is not a lot of

 * point in tuning this. If the EC could respond faster then

 * we could increase this so that might expect the preamble and

 * message to occur in a single transaction. However, the maximum

 * SPI transfer size is 256 bytes, so at 5MHz we need a response

 * time of perhaps <320us (200 bytes / 1600 bits).

/*

 * Allow for a long time for the EC to respond.  We support i2c

 * tunneling and support fairly long messages for the tunnel (249

 * bytes long at the moment).  If we're talking to a 100 kHz device

 * on the other end and need to transfer ~256 bytes, then we need:

 *  10 us/bit * ~10 bits/byte * ~256 bytes = ~25ms

 *

 * We'll wait 8 times that to handle clock stretching and other

 * paranoia.  Note that some battery gas gauge ICs claim to have a

 * clock stretch of 144ms in rare situations.  That's incentive for

 * not directly passing i2c through, but it's too late for that for

 * existing hardware.

 *

 * It's pretty unlikely that we'll really see a 249 byte tunnel in

 * anything other than testing.  If this was more common we might

 * consider having slow commands like this require a GET_STATUS

 * wait loop.  The 'flash write' command would be another candidate

 * for this, clocking in at 2-3ms.

/*

  * Time between raising the SPI chip select (for the end of a

  * transaction) and dropping it again (for the next transaction).

  * If we go too fast, the EC will miss the transaction. We know that we

  * need at least 70 us with the 16 MHz STM32 EC, so go with 200 us to be

  * safe.

/**

 * struct cros_ec_spi - information about a SPI-connected EC

 *

 * @spi: SPI device we are connected to

 * @last_transfer_ns: time that we last finished a transfer.

 * @start_of_msg_delay: used to set the delay_usecs on the spi_transfer that

 *      is sent when we want to turn on CS at the start of a transaction.

 * @end_of_msg_delay: used to set the delay_usecs on the spi_transfer that

 *      is sent when we want to turn off CS at the end of a transaction.

 * @high_pri_worker: Used to schedule high priority work.

/**

 * struct cros_ec_xfer_work_params - params for our high priority workers

 *

 * @work: The work_struct needed to queue work

 * @fn: The function to use to transfer

 * @ec_dev: ChromeOS EC device

 * @ec_msg: Message to transfer

 * @ret: The return value of the function

	/*

	 * Turn off CS, possibly adding a delay to ensure the rising edge

	 * doesn't come too soon after the end of the data.

 Reset end-of-response timer */

/**

 * receive_n_bytes - receive n bytes from the EC.

 *

 * Assumes buf is a pointer into the ec_dev->din buffer

 *

 * @ec_dev: ChromeOS EC device.

 * @buf: Pointer to the buffer receiving the data.

 * @n: Number of bytes received.

/**

 * cros_ec_spi_receive_packet - Receive a packet from the EC.

 *

 * This function has two phases: reading the preamble bytes (since if we read

 * data from the EC before it is ready to send, we just get preamble) and

 * reading the actual message.

 *

 * The received data is placed into ec_dev->din.

 *

 * @ec_dev: ChromeOS EC device

 * @need_len: Number of message bytes we need to read

 Receive data until we see the header byte */

		/*

		 * Use the time at the start of the loop as a timeout.  This

		 * gives us one last shot at getting the transfer and is useful

		 * in case we got context switched out for a while.

	/*

	 * ptr now points to the header byte. Copy any valid data to the

	 * start of our buffer

 If the entire response struct wasn't read, get the rest of it. */

 Abort if data_len is too large. */

 Receive data until we have it all */

		/*

		 * We can't support transfers larger than the SPI FIFO size

		 * unless we have DMA. We don't have DMA on the ISP SPI ports

		 * for Exynos. We need a way of asking SPI driver for

		 * maximum-supported transfer size.

/**

 * cros_ec_spi_receive_response - Receive a response from the EC.

 *

 * This function has two phases: reading the preamble bytes (since if we read

 * data from the EC before it is ready to send, we just get preamble) and

 * reading the actual message.

 *

 * The received data is placed into ec_dev->din.

 *

 * @ec_dev: ChromeOS EC device

 * @need_len: Number of message bytes we need to read

 Receive data until we see the header byte */

		/*

		 * Use the time at the start of the loop as a timeout.  This

		 * gives us one last shot at getting the transfer and is useful

		 * in case we got context switched out for a while.

	/*

	 * ptr now points to the header byte. Copy any valid data to the

	 * start of our buffer

 Receive data until we have it all */

		/*

		 * We can't support transfers larger than the SPI FIFO size

		 * unless we have DMA. We don't have DMA on the ISP SPI ports

		 * for Exynos. We need a way of asking SPI driver for

		 * maximum-supported transfer size.

/**

 * do_cros_ec_pkt_xfer_spi - Transfer a packet over SPI and receive the reply

 *

 * @ec_dev: ChromeOS EC device

 * @ec_msg: Message to transfer

 If it's too soon to do another transaction, wait */

	/*

	 * Leave a gap between CS assertion and clocking of data to allow the

	 * EC time to wakeup.

 Transmit phase - send our message */

 Get the response */

 Verify that EC can process command */

			/*

			 * Seeing the PAST_END, RX_BAD_DATA, or NOT_READY

			 * markers are all signs that the EC didn't fully

			 * receive our command. e.g., if the EC is flashing

			 * itself, it can't respond to any commands and instead

			 * clocks out EC_SPI_PAST_END from its SPI hardware

			 * buffer. Similar occurrences can happen if the AP is

			 * too slow to clock out data after asserting CS -- the

			 * EC will abort and fill its buffer with

			 * EC_SPI_RX_BAD_DATA.

			 *

			 * In all cases, these errors should be safe to retry.

			 * Report -EAGAIN and let the caller decide what to do

			 * about that.

 check response error code */

 copy response packet payload and compute checksum */

/**

 * do_cros_ec_cmd_xfer_spi - Transfer a message over SPI and receive the reply

 *

 * @ec_dev: ChromeOS EC device

 * @ec_msg: Message to transfer

 If it's too soon to do another transaction, wait */

 Transmit phase - send our message */

 Get the response */

 Verify that EC can process command */

 See comments in cros_ec_pkt_xfer_spi() */

 check response error code */

 copy response packet payload and compute checksum */

	/*

	 * This looks a bit ridiculous.  Why do the work on a

	 * different thread if we're just going to block waiting for

	 * the thread to finish?  The key here is that the thread is

	 * running at high priority but the calling context might not

	 * be.  We need to be at high priority to avoid getting

	 * context switched out for too long and the EC giving up on

	 * the transfer.

 Check for any DT properties */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0



 Copyright 2018 Google LLC.

/**

 * struct cros_ec_rpmsg_response - rpmsg message format from from EC.

 *

 * @type:	The type of message, should be either HOST_COMMAND_MARK or

 *		HOST_EVENT_MARK, representing that the message is a response to

 *		host command, or a host event.

 * @data:	ec_host_response for host command.

/**

 * struct cros_ec_rpmsg - information about a EC over rpmsg.

 *

 * @rpdev:	rpmsg device we are connected to

 * @xfer_ack:	completion for host command transfer.

 * @host_event_work:	Work struct for pending host event.

 * @ept: The rpmsg endpoint of this channel.

 * @has_pending_host_event: Boolean used to check if there is a pending event.

 * @probe_done: Flag to indicate that probe is done.

/**

 * cros_ec_cmd_xfer_rpmsg - Transfer a message over rpmsg and receive the reply

 *

 * @ec_dev: ChromeOS EC device

 * @ec_msg: Message to transfer

 *

 * This is only used for old EC proto version, and is not supported for this

 * driver.

 *

 * Return: -EINVAL

/**

 * cros_ec_pkt_xfer_rpmsg - Transfer a packet over rpmsg and receive the reply

 *

 * @ec_dev: ChromeOS EC device

 * @ec_msg: Message to transfer

 *

 * Return: number of bytes of the reply on success or negative error code.

 check response error code */

 copy response packet payload and compute checksum */

		/*

		 * If the host event is sent before cros_ec_register is

		 * finished, queue the host event.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ChromeOS EC multi-function device

 *

 * Copyright (C) 2012 Google, Inc

 *

 * The ChromeOS EC multi function device is used to mux all the requests

 * to the EC device for its multiple features: keyboard controller,

 * battery charging and regulator control, firmware update.

/**

 * cros_ec_irq_handler() - top half part of the interrupt handler

 * @irq: IRQ id

 * @data: (ec_dev) Device with events to process.

 *

 * Return: Wakeup the bottom half

/**

 * cros_ec_handle_event() - process and forward pending events on EC

 * @ec_dev: Device with events to process.

 *

 * Call this function in a loop when the kernel is notified that the EC has

 * pending events.

 *

 * Return: true if more events are still pending and this function should be

 * called again.

	/*

	 * Signal only if wake host events or any interrupt if

	 * cros_ec_get_next_event() returned an error (default value for

	 * wake_event is true)

/**

 * cros_ec_irq_thread() - bottom half part of the interrupt handler

 * @irq: IRQ id

 * @data: (ec_dev) Device with events to process.

 *

 * Return: Interrupt handled.

 For now, report failure to transition to S0ix with a warning. */

/**

 * cros_ec_register() - Register a new ChromeOS EC, using the provided info.

 * @ec_dev: Device to register.

 *

 * Before calling this, allocate a pointer to a new device and then fill

 * in all the fields up to the --private-- marker.

 *

 * Return: 0 on success or negative error code.

 Register a platform device for the main EC instance */

		/*

		 * Register a platform device for the PD behind the main EC.

		 * We make the following assumptions:

		 * - behind an EC, we have a pd

		 * - only one device added.

		 * - the EC is responsive at init time (it is not true for a

		 *   sensor hub).

	/*

	 * Clear sleep event - this will fail harmlessly on platforms that

	 * don't implement the sleep event host command.

		/*

		 * Register the notifier for EC_HOST_EVENT_INTERFACE_READY

		 * event.

	/*

	 * Unlock EC that may be waiting for AP to process MKBP events.

	 * If the AP takes to long to answer, the EC would stop sending events.

/**

 * cros_ec_unregister() - Remove a ChromeOS EC.

 * @ec_dev: Device to unregister.

 *

 * Call this to deregister a ChromeOS EC, then clean up any private data.

 *

 * Return: 0 on success or negative error code.

/**

 * cros_ec_suspend() - Handle a suspend operation for the ChromeOS EC device.

 * @ec_dev: Device to suspend.

 *

 * This can be called by drivers to handle a suspend event.

 *

 * Return: 0 on success or negative error code.

/**

 * cros_ec_resume() - Handle a resume operation for the ChromeOS EC device.

 * @ec_dev: Device to resume.

 *

 * This can be called by drivers to handle a resume event.

 *

 * Return: 0 on success or negative error code.

	/*

	 * Let the mfd devices know about events that occur during

	 * suspend. This way the clients know what to do with them.

 SPDX-License-Identifier: GPL-2.0

/*

 * Sensor HUB driver that discovers sensors behind a ChromeOS Embedded

 * Controller.

 *

 * Copyright 2019 Google LLC

 Check whether this EC is a sensor hub. */

		/*

		 * Prepare the ring handler before enumering the

		 * sensors.

 Enumerate the sensors.*/

		/*

		 * When the EC does not have a FIFO, the sensors will query

		 * their data themselves via sysfs or a software trigger.

			/*

			 * The msg and its data is not under the control of the

			 * ring handler.

		/*

		 * If the device has sensors but does not claim to

		 * be a sensor hub, we are in legacy mode.

/*

 * When the EC is suspending, we must stop sending interrupt,

 * we may use the same interrupt line for waking up the device.

 * Tell the EC to stop sending non-interrupt event on the iio ring.

 SPDX-License-Identifier: GPL-2.0

 Trace events for the ChromeOS Embedded Controller



 Copyright 2019 Google LLC.

 Generate the list using the following script:

// sed -n 's/^#define \(EC_CMD_[[:alnum:]_]*\)\s.*/\tTRACE_SYMBOL(\1), \\/p' include/linux/platform_data/cros_ec_commands.h

#define EC_CMDS \

	TRACE_SYMBOL(EC_CMD_ACPI_READ), \

	TRACE_SYMBOL(EC_CMD_ACPI_WRITE), \

	TRACE_SYMBOL(EC_CMD_ACPI_BURST_ENABLE), \

	TRACE_SYMBOL(EC_CMD_ACPI_BURST_DISABLE), \

	TRACE_SYMBOL(EC_CMD_ACPI_QUERY_EVENT), \

	TRACE_SYMBOL(EC_CMD_PROTO_VERSION), \

	TRACE_SYMBOL(EC_CMD_HELLO), \

	TRACE_SYMBOL(EC_CMD_GET_VERSION), \

	TRACE_SYMBOL(EC_CMD_READ_TEST), \

	TRACE_SYMBOL(EC_CMD_GET_BUILD_INFO), \

	TRACE_SYMBOL(EC_CMD_GET_CHIP_INFO), \

	TRACE_SYMBOL(EC_CMD_GET_BOARD_VERSION), \

	TRACE_SYMBOL(EC_CMD_READ_MEMMAP), \

	TRACE_SYMBOL(EC_CMD_GET_CMD_VERSIONS), \

	TRACE_SYMBOL(EC_CMD_GET_COMMS_STATUS), \

	TRACE_SYMBOL(EC_CMD_TEST_PROTOCOL), \

	TRACE_SYMBOL(EC_CMD_GET_PROTOCOL_INFO), \

	TRACE_SYMBOL(EC_CMD_GSV_PAUSE_IN_S5), \

	TRACE_SYMBOL(EC_CMD_GET_FEATURES), \

	TRACE_SYMBOL(EC_CMD_GET_SKU_ID), \

	TRACE_SYMBOL(EC_CMD_SET_SKU_ID), \

	TRACE_SYMBOL(EC_CMD_FLASH_INFO), \

	TRACE_SYMBOL(EC_CMD_FLASH_READ), \

	TRACE_SYMBOL(EC_CMD_FLASH_WRITE), \

	TRACE_SYMBOL(EC_CMD_FLASH_ERASE), \

	TRACE_SYMBOL(EC_CMD_FLASH_PROTECT), \

	TRACE_SYMBOL(EC_CMD_FLASH_REGION_INFO), \

	TRACE_SYMBOL(EC_CMD_VBNV_CONTEXT), \

	TRACE_SYMBOL(EC_CMD_FLASH_SPI_INFO), \

	TRACE_SYMBOL(EC_CMD_FLASH_SELECT), \

	TRACE_SYMBOL(EC_CMD_PWM_GET_FAN_TARGET_RPM), \

	TRACE_SYMBOL(EC_CMD_PWM_SET_FAN_TARGET_RPM), \

	TRACE_SYMBOL(EC_CMD_PWM_GET_KEYBOARD_BACKLIGHT), \

	TRACE_SYMBOL(EC_CMD_PWM_SET_KEYBOARD_BACKLIGHT), \

	TRACE_SYMBOL(EC_CMD_PWM_SET_FAN_DUTY), \

	TRACE_SYMBOL(EC_CMD_PWM_SET_DUTY), \

	TRACE_SYMBOL(EC_CMD_PWM_GET_DUTY), \

	TRACE_SYMBOL(EC_CMD_LIGHTBAR_CMD), \

	TRACE_SYMBOL(EC_CMD_LED_CONTROL), \

	TRACE_SYMBOL(EC_CMD_VBOOT_HASH), \

	TRACE_SYMBOL(EC_CMD_MOTION_SENSE_CMD), \

	TRACE_SYMBOL(EC_CMD_FORCE_LID_OPEN), \

	TRACE_SYMBOL(EC_CMD_CONFIG_POWER_BUTTON), \

	TRACE_SYMBOL(EC_CMD_USB_CHARGE_SET_MODE), \

	TRACE_SYMBOL(EC_CMD_PSTORE_INFO), \

	TRACE_SYMBOL(EC_CMD_PSTORE_READ), \

	TRACE_SYMBOL(EC_CMD_PSTORE_WRITE), \

	TRACE_SYMBOL(EC_CMD_RTC_GET_VALUE), \

	TRACE_SYMBOL(EC_CMD_RTC_GET_ALARM), \

	TRACE_SYMBOL(EC_CMD_RTC_SET_VALUE), \

	TRACE_SYMBOL(EC_CMD_RTC_SET_ALARM), \

	TRACE_SYMBOL(EC_CMD_PORT80_LAST_BOOT), \

	TRACE_SYMBOL(EC_CMD_PORT80_READ), \

	TRACE_SYMBOL(EC_CMD_VSTORE_INFO), \

	TRACE_SYMBOL(EC_CMD_VSTORE_READ), \

	TRACE_SYMBOL(EC_CMD_VSTORE_WRITE), \

	TRACE_SYMBOL(EC_CMD_THERMAL_SET_THRESHOLD), \

	TRACE_SYMBOL(EC_CMD_THERMAL_GET_THRESHOLD), \

	TRACE_SYMBOL(EC_CMD_THERMAL_AUTO_FAN_CTRL), \

	TRACE_SYMBOL(EC_CMD_TMP006_GET_CALIBRATION), \

	TRACE_SYMBOL(EC_CMD_TMP006_SET_CALIBRATION), \

	TRACE_SYMBOL(EC_CMD_TMP006_GET_RAW), \

	TRACE_SYMBOL(EC_CMD_MKBP_STATE), \

	TRACE_SYMBOL(EC_CMD_MKBP_INFO), \

	TRACE_SYMBOL(EC_CMD_MKBP_SIMULATE_KEY), \

	TRACE_SYMBOL(EC_CMD_GET_KEYBOARD_ID), \

	TRACE_SYMBOL(EC_CMD_MKBP_SET_CONFIG), \

	TRACE_SYMBOL(EC_CMD_MKBP_GET_CONFIG), \

	TRACE_SYMBOL(EC_CMD_KEYSCAN_SEQ_CTRL), \

	TRACE_SYMBOL(EC_CMD_GET_NEXT_EVENT), \

	TRACE_SYMBOL(EC_CMD_KEYBOARD_FACTORY_TEST), \

	TRACE_SYMBOL(EC_CMD_TEMP_SENSOR_GET_INFO), \

	TRACE_SYMBOL(EC_CMD_HOST_EVENT_GET_B), \

	TRACE_SYMBOL(EC_CMD_HOST_EVENT_GET_SMI_MASK), \

	TRACE_SYMBOL(EC_CMD_HOST_EVENT_GET_SCI_MASK), \

	TRACE_SYMBOL(EC_CMD_HOST_EVENT_GET_WAKE_MASK), \

	TRACE_SYMBOL(EC_CMD_HOST_EVENT_SET_SMI_MASK), \

	TRACE_SYMBOL(EC_CMD_HOST_EVENT_SET_SCI_MASK), \

	TRACE_SYMBOL(EC_CMD_HOST_EVENT_CLEAR), \

	TRACE_SYMBOL(EC_CMD_HOST_EVENT_SET_WAKE_MASK), \

	TRACE_SYMBOL(EC_CMD_HOST_EVENT_CLEAR_B), \

	TRACE_SYMBOL(EC_CMD_HOST_EVENT), \

	TRACE_SYMBOL(EC_CMD_SWITCH_ENABLE_BKLIGHT), \

	TRACE_SYMBOL(EC_CMD_SWITCH_ENABLE_WIRELESS), \

	TRACE_SYMBOL(EC_CMD_GPIO_SET), \

	TRACE_SYMBOL(EC_CMD_GPIO_GET), \

	TRACE_SYMBOL(EC_CMD_I2C_READ), \

	TRACE_SYMBOL(EC_CMD_I2C_WRITE), \

	TRACE_SYMBOL(EC_CMD_CHARGE_CONTROL), \

	TRACE_SYMBOL(EC_CMD_CONSOLE_SNAPSHOT), \

	TRACE_SYMBOL(EC_CMD_CONSOLE_READ), \

	TRACE_SYMBOL(EC_CMD_BATTERY_CUT_OFF), \

	TRACE_SYMBOL(EC_CMD_USB_MUX), \

	TRACE_SYMBOL(EC_CMD_LDO_SET), \

	TRACE_SYMBOL(EC_CMD_LDO_GET), \

	TRACE_SYMBOL(EC_CMD_POWER_INFO), \

	TRACE_SYMBOL(EC_CMD_I2C_PASSTHRU), \

	TRACE_SYMBOL(EC_CMD_HANG_DETECT), \

	TRACE_SYMBOL(EC_CMD_CHARGE_STATE), \

	TRACE_SYMBOL(EC_CMD_CHARGE_CURRENT_LIMIT), \

	TRACE_SYMBOL(EC_CMD_EXTERNAL_POWER_LIMIT), \

	TRACE_SYMBOL(EC_CMD_OVERRIDE_DEDICATED_CHARGER_LIMIT), \

	TRACE_SYMBOL(EC_CMD_HIBERNATION_DELAY), \

	TRACE_SYMBOL(EC_CMD_HOST_SLEEP_EVENT), \

	TRACE_SYMBOL(EC_CMD_DEVICE_EVENT), \

	TRACE_SYMBOL(EC_CMD_SB_READ_WORD), \

	TRACE_SYMBOL(EC_CMD_SB_WRITE_WORD), \

	TRACE_SYMBOL(EC_CMD_SB_READ_BLOCK), \

	TRACE_SYMBOL(EC_CMD_SB_WRITE_BLOCK), \

	TRACE_SYMBOL(EC_CMD_BATTERY_VENDOR_PARAM), \

	TRACE_SYMBOL(EC_CMD_SB_FW_UPDATE), \

	TRACE_SYMBOL(EC_CMD_ENTERING_MODE), \

	TRACE_SYMBOL(EC_CMD_I2C_PASSTHRU_PROTECT), \

	TRACE_SYMBOL(EC_CMD_CEC_WRITE_MSG), \

	TRACE_SYMBOL(EC_CMD_CEC_SET), \

	TRACE_SYMBOL(EC_CMD_CEC_GET), \

	TRACE_SYMBOL(EC_CMD_EC_CODEC), \

	TRACE_SYMBOL(EC_CMD_EC_CODEC_DMIC), \

	TRACE_SYMBOL(EC_CMD_EC_CODEC_I2S_RX), \

	TRACE_SYMBOL(EC_CMD_EC_CODEC_WOV), \

	TRACE_SYMBOL(EC_CMD_REBOOT_EC), \

	TRACE_SYMBOL(EC_CMD_GET_PANIC_INFO), \

	TRACE_SYMBOL(EC_CMD_REBOOT), \

	TRACE_SYMBOL(EC_CMD_RESEND_RESPONSE), \

	TRACE_SYMBOL(EC_CMD_VERSION0), \

	TRACE_SYMBOL(EC_CMD_PD_EXCHANGE_STATUS), \

	TRACE_SYMBOL(EC_CMD_PD_HOST_EVENT_STATUS), \

	TRACE_SYMBOL(EC_CMD_USB_PD_CONTROL), \

	TRACE_SYMBOL(EC_CMD_USB_PD_PORTS), \

	TRACE_SYMBOL(EC_CMD_USB_PD_POWER_INFO), \

	TRACE_SYMBOL(EC_CMD_CHARGE_PORT_COUNT), \

	TRACE_SYMBOL(EC_CMD_USB_PD_FW_UPDATE), \

	TRACE_SYMBOL(EC_CMD_USB_PD_RW_HASH_ENTRY), \

	TRACE_SYMBOL(EC_CMD_USB_PD_DEV_INFO), \

	TRACE_SYMBOL(EC_CMD_USB_PD_DISCOVERY), \

	TRACE_SYMBOL(EC_CMD_PD_CHARGE_PORT_OVERRIDE), \

	TRACE_SYMBOL(EC_CMD_PD_GET_LOG_ENTRY), \

	TRACE_SYMBOL(EC_CMD_USB_PD_GET_AMODE), \

	TRACE_SYMBOL(EC_CMD_USB_PD_SET_AMODE), \

	TRACE_SYMBOL(EC_CMD_PD_WRITE_LOG_ENTRY), \

	TRACE_SYMBOL(EC_CMD_PD_CONTROL), \

	TRACE_SYMBOL(EC_CMD_USB_PD_MUX_INFO), \

	TRACE_SYMBOL(EC_CMD_PD_CHIP_INFO), \

	TRACE_SYMBOL(EC_CMD_RWSIG_CHECK_STATUS), \

	TRACE_SYMBOL(EC_CMD_RWSIG_ACTION), \

	TRACE_SYMBOL(EC_CMD_EFS_VERIFY), \

	TRACE_SYMBOL(EC_CMD_GET_CROS_BOARD_INFO), \

	TRACE_SYMBOL(EC_CMD_SET_CROS_BOARD_INFO), \

	TRACE_SYMBOL(EC_CMD_GET_UPTIME_INFO), \

	TRACE_SYMBOL(EC_CMD_ADD_ENTROPY), \

	TRACE_SYMBOL(EC_CMD_ADC_READ), \

	TRACE_SYMBOL(EC_CMD_ROLLBACK_INFO), \

	TRACE_SYMBOL(EC_CMD_AP_RESET), \

	TRACE_SYMBOL(EC_CMD_REGULATOR_GET_INFO), \

	TRACE_SYMBOL(EC_CMD_REGULATOR_ENABLE), \

	TRACE_SYMBOL(EC_CMD_REGULATOR_IS_ENABLED), \

	TRACE_SYMBOL(EC_CMD_REGULATOR_SET_VOLTAGE), \

	TRACE_SYMBOL(EC_CMD_REGULATOR_GET_VOLTAGE), \

	TRACE_SYMBOL(EC_CMD_CR51_BASE), \

	TRACE_SYMBOL(EC_CMD_CR51_LAST), \

	TRACE_SYMBOL(EC_CMD_FP_PASSTHRU), \

	TRACE_SYMBOL(EC_CMD_FP_MODE), \

	TRACE_SYMBOL(EC_CMD_FP_INFO), \

	TRACE_SYMBOL(EC_CMD_FP_FRAME), \

	TRACE_SYMBOL(EC_CMD_FP_TEMPLATE), \

	TRACE_SYMBOL(EC_CMD_FP_CONTEXT), \

	TRACE_SYMBOL(EC_CMD_FP_STATS), \

	TRACE_SYMBOL(EC_CMD_FP_SEED), \

	TRACE_SYMBOL(EC_CMD_FP_ENC_STATUS), \

	TRACE_SYMBOL(EC_CMD_TP_SELF_TEST), \

	TRACE_SYMBOL(EC_CMD_TP_FRAME_INFO), \

	TRACE_SYMBOL(EC_CMD_TP_FRAME_SNAPSHOT), \

	TRACE_SYMBOL(EC_CMD_TP_FRAME_GET), \

	TRACE_SYMBOL(EC_CMD_BATTERY_GET_STATIC), \

	TRACE_SYMBOL(EC_CMD_BATTERY_GET_DYNAMIC), \

	TRACE_SYMBOL(EC_CMD_CHARGER_CONTROL), \

	TRACE_SYMBOL(EC_CMD_BOARD_SPECIFIC_BASE), \

	TRACE_SYMBOL(EC_CMD_BOARD_SPECIFIC_LAST)



/* See the enum ec_status in include/linux/platform_data/cros_ec_commands.h */

#define EC_RESULT \

	TRACE_SYMBOL(EC_RES_SUCCESS), \

	TRACE_SYMBOL(EC_RES_INVALID_COMMAND), \

	TRACE_SYMBOL(EC_RES_ERROR), \

	TRACE_SYMBOL(EC_RES_INVALID_PARAM), \

	TRACE_SYMBOL(EC_RES_ACCESS_DENIED), \

	TRACE_SYMBOL(EC_RES_INVALID_RESPONSE), \

	TRACE_SYMBOL(EC_RES_INVALID_VERSION), \

	TRACE_SYMBOL(EC_RES_INVALID_CHECKSUM), \

	TRACE_SYMBOL(EC_RES_IN_PROGRESS), \

	TRACE_SYMBOL(EC_RES_UNAVAILABLE), \

	TRACE_SYMBOL(EC_RES_TIMEOUT), \

	TRACE_SYMBOL(EC_RES_OVERFLOW), \

	TRACE_SYMBOL(EC_RES_INVALID_HEADER), \

	TRACE_SYMBOL(EC_RES_REQUEST_TRUNCATED), \

	TRACE_SYMBOL(EC_RES_RESPONSE_TOO_BIG), \

	TRACE_SYMBOL(EC_RES_BUS_ERROR), \

	TRACE_SYMBOL(EC_RES_BUSY), \

	TRACE_SYMBOL(EC_RES_INVALID_HEADER_VERSION), \

	TRACE_SYMBOL(EC_RES_INVALID_HEADER_CRC), \

	TRACE_SYMBOL(EC_RES_INVALID_DATA_CRC), \

	TRACE_SYMBOL(EC_RES_DUP_UNAVAILABLE)



#define CREATE_TRACE_POINTS

#include "cros_ec_trace.h"

 SPDX-License-Identifier: GPL-2.0

 Driver to instantiate Chromebook ramoops device.



 Copyright (C) 2013 Google, Inc.

		/*

		 * Today all Chromebooks/boxes ship with Google_* as version and

		 * coreboot as bios vendor. No other systems with this

		 * combination are known to date.

 x86-alex, the first Samsung Chromebook. */

 x86-mario, the Cr-48 pilot device from Google. */

 x86-zgb, the first Acer Chromebook. */

/*

 * On x86 chromebooks/boxes, the firmware will keep the legacy VGA memory

 * range untouched across reboots, so we use that to store our pstore

 * contents for panic logs, etc.

 First check ACPI for non-hardcoded values from firmware. */

 SPDX-License-Identifier: GPL-2.0

 LPC interface for ChromeOS Embedded Controller



 Copyright (C) 2012-2015 Google, Inc



 This driver uses the ChromeOS EC byte-level message-based protocol for

 communicating the keyboard state (which keys are pressed) from a keyboard EC

 to the AP over some bus (such as i2c, lpc, spi).  The EC does debouncing,

 but everything else (including deghosting) is done here.  The main

 motivation for this is to keep the EC firmware as simple as possible, since

 it cannot be easily upgraded and EC flash/IRAM space is relatively

 expensive.

 True if ACPI device is present */

/**

 * struct lpc_driver_ops - LPC driver operations

 * @read: Copy length bytes from EC address offset into buffer dest. Returns

 *        the 8-bit checksum of all bytes read.

 * @write: Copy length bytes from buffer msg into EC address offset. Returns

 *         the 8-bit checksum of all bytes written.

/*

 * A generic instance of the read function of struct lpc_driver_ops, used for

 * the LPC EC.

 Return checksum of all bytes read */

/*

 * A generic instance of the write function of struct lpc_driver_ops, used for

 * the LPC EC.

 Return checksum of all bytes written */

/*

 * An instance of the read function of struct lpc_driver_ops, used for the

 * MEC variant of LPC EC.

/*

 * An instance of the write function of struct lpc_driver_ops, used for the

 * MEC variant of LPC EC.

 Write buffer */

 Here we go */

 Check result */

 Read back response */

 Read response and process checksum */

 Return actual amount of data received */

 Now actually send the command to the EC and get the result */

 Initialize checksum */

 Copy data and update checksum */

 Finalize checksum and write args */

 Here we go */

 Check result */

 Read back args */

 Start calculating response checksum */

 Read response and update checksum */

 Verify checksum */

 Return actual amount of data received */

 Returns num bytes read, or negative on error. Doesn't need locking. */

 fixed length */

 string */

	/*

	 * Read the mapped ID twice, the first one is assuming the

	 * EC is a Microchip Embedded Controller (MEC) variant, if the

	 * protocol fails, fallback to the non MEC variant and try to

	 * read again the ID.

 Re-assign read/write operations for the non MEC variant */

	/*

	 * Some boards do not have an IRQ allotted for cros_ec_lpc,

	 * which makes ENXIO an expected (and safe) scenario.

	/*

	 * Connect a notify handler to process MKBP messages if we have a

	 * companion ACPI device.

		/*

		 * Today all Chromebooks/boxes ship with Google_* as version and

		 * coreboot as bios vendor. No other systems with this

		 * combination are known to date.

		/*

		 * If the box is running custom coreboot firmware then the

		 * DMI BIOS version string will not be matched by "Google_",

		 * but the system vendor string will still be matched by

		 * "GOOGLE".

 x86-link, the Chromebook Pixel. */

 x86-samus, the Chromebook Pixel 2. */

 x86-peppy, the Acer C720 Chromebook. */

 x86-glimmer, the Lenovo Thinkpad Yoga 11e. */

 sentinel */ }

 Register the driver */

 Register the device, and it'll get hooked up automatically */

 SPDX-License-Identifier: GPL-2.0+

 Driver to instantiate Chromebook i2c/smbus devices.



 Copyright (C) 2012 Google, Inc.

 Author: Benson Leung <bleung@chromium.org>

 Keep this enum consistent with i2c_adapter_names */

	/*

	 * Note that we can't mark this pointer as const because

	 * i2c_new_scanned_device() changes passed in I2C board info, so.

	/*

	 * Add the i2c device. If we can't detect it at the primary

	 * address we scan secondary addresses. In any case the client

	 * structure gets assigned primary address.

 Skip devices already created */

 Touchpad. */

 Light Sensor. */

 Light Sensor. */

 Touch Screen. */

 Touchpad. */

 Light Sensor. */

 Touchpad. */

 Touchpad. */

 Elan Touchpad option. */

 Touchpad. */

 Touchpad. */

 Light Sensor. */

 Touchscreen. */

 Touchpad. */

 Elan Touchpad option. */

 Light Sensor. */

 Touchpad. */

 Light Sensor. */

 Touchpad */

 Touchsceen */

 Touchpad */

 Touchsceen */

 Devices with peripherals incompletely described in ACPI */

		/*

		 * Other Chromebooks with Atmel touch controllers:

		 * - Winky (touchpad)

		 * - Clapper, Expresso, Rambi, Glimmer (touchscreen)

			/*

			 * This will match all Google devices, not only devices

			 * with Atmel, but we will validate that the device

			 * actually has matching peripherals.

			/*

			 * Now that we have needed properties re-trigger

			 * driver probe in case driver was initialized

			 * earlier and probe failed.

 Create primary fwnode for the device - copies everything */

 We need to deep-copy properties */

	/*

	 * Scan adapters that have been registered and clients that have

	 * been created before we installed the notifier to make sure

	 * we do not miss any devices.

 SPDX-License-Identifier: GPL-2.0+

 Expose the ChromeOS EC through sysfs



 Copyright (C) 2014 Google, Inc.

 Accessor functions */

 Find word to start scanning */

 On to the next word, if any */

 Get versions. RW may change. */

 Strings should be null-terminated, but let's be sure. */

 Get build info. */

 Get chip info. */

 Get board version */

 The flash info shouldn't ever change, but ask each time anyway. */

 Keyboard wake angle control */

 Module initialization */

 SPDX-License-Identifier: GPL-2.0

 LPC variant I/O for Microchip EC



 Copyright (C) 2016 Google, Inc

/*

 * This mutex must be held while accessing the EMI unit. We can't rely on the

 * EC mutex because memmap data may be accessed without it being held.

/**

 * cros_ec_lpc_mec_emi_write_address() - Initialize EMI at a given address.

 *

 * @addr: Starting read / write address

 * @access_type: Type of access, typically 32-bit auto-increment

/**

 * cros_ec_lpc_mec_in_range() - Determine if addresses are in MEC EMI range.

 *

 * @offset: Address offset

 * @length: Number of bytes to check

 *

 * Return: 1 if in range, 0 if not, and -EINVAL on failure

 *         such as the mec range not being initialized

/**

 * cros_ec_lpc_io_bytes_mec() - Read / write bytes to MEC EMI port.

 *

 * @io_type: MEC_IO_READ or MEC_IO_WRITE, depending on request

 * @offset:  Base read / write address

 * @length:  Number of bytes to read / write

 * @buf:     Destination / source buffer

 *

 * Return: 8-bit checksum of all bytes read / written

 Return checksum of 0 if window is not initialized */

	/*

	 * Long access cannot be used on misaligned data since reading B0 loads

	 * the data register and writing B3 flushes.

 Initialize I/O at desired address */

 Skip bytes in case of misaligned offset */

 Extra bounds check in case of misaligned length */

		/*

		 * Use long auto-increment access except for misaligned write,

		 * since writing B3 triggers the flush.

 Access [B0, B3] on each loop pass */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2020 Google LLC

 *

 * This driver provides the ability to view and manage Type C ports through the

 * Chrome OS EC.

 Supported alt modes. */

 Container for altmode pointer nodes. */

 Per port data. */

 Initial capabilities for the port. */

 SOP' plug. */

 Port partner PD identity info. */

 Port cable PD identity info. */

 Variables keeping track of switch state. */

 Port alt modes. */

 Flag indicating that PD partner discovery data parsing is completed. */

 Platform-specific data for the Chrome OS EC Type C controller. */

 Array of ports, indexed by port number. */

	/*

	 * Fill an initial PD identity, which will then be updated with info

	 * from the EC.

/*

 * Fake the alt mode structs until we actually start registering Type C port

 * and partner alt modes.

 All PD capable CrOS devices are assumed to support DP altmode. */

	/*

	 * Register TBT compatibility alt mode. The EC will not enter the mode

	 * if it doesn't support it, so it's safe to register it unconditionally

	 * here for now.

 DT uses "reg" to specify port number. */

/*

 * Spoof the VDOs that were likely communicated by the partner for TBT alt

 * mode.

 Device Discover Mode VDO */

 Cable Discover Mode VDO */

 Enter Mode VDO */

 Spoof the VDOs that were likely communicated by the partner. */

 Status VDO. */

 Configuration VDO. */

 Cable Speed */

 Cable Type */

 Sending Acknowledgment to EC */

 Register/remove partners when a connect/disconnect occurs. */

/*

 * Helper function to register partner/plug altmodes.

 If no memory is available we should unregister and exit. */

/*

 * Parse the PD identity data from the EC PD discovery responses and copy that to the supplied

 * PD identity struct.

 First, update the PD identity VDOs for the partner. */

 Copy the remaining identity VDOs till a maximum of 6. */

 Parse the PD identity data, even if only 0s were returned. */

 If we got a hard reset, unregister everything and return. */

 Handle any events appropriately. */

 Convert BCD to the format preferred by the TypeC framework */

 Convert BCD to the format preferred by the TypeC framework */

 Update the switches if they exist, according to requested state */

 No change needs to be made, let's exit early. */

 We're interested in the PD control command version. */

	/*

	 * Safe to call port update here, since we haven't registered the

	 * PD notifier yet.

 Refresh port state. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Logging driver for ChromeOS EC based USBPD Charger.

 *

 * Copyright 2018 Google LLC.

 Buffer for building the PDLOG string */

 The timestamp is the number of 1024th of seconds in the past */

 Retrieve PD event logs periodically */

 SPDX-License-Identifier: GPL-2.0

 Driver to detect Tablet Mode for ChromeOS convertible.



 Copyright (C) 2017 Google, Inc.

 Author: Gwendal Grignou <gwendal@chromium.org>



 On Chromebook using ACPI, this device listens for notification

 from GOOG0006 and issue method TBMC to retrieve the status.



 GOOG0006 issues the notification when it receives EC_HOST_EVENT_MODE_CHANGE

 from the EC.

 Method TBMC reads EC_ACPI_MEM_DEVICE_ORIENTATION byte from the shared

 memory region.

 input layer checks if event is redundant */

 SPDX-License-Identifier: GPL-2.0+

 Debug logs for the ChromeOS EC



 Copyright (C) 2015 Google, Inc.

/**

 * struct cros_ec_debugfs - EC debugging information.

 *

 * @ec: EC device this debugfs information belongs to

 * @dir: dentry for debugfs files

 * @log_buffer: circular buffer for console log information

 * @read_msg: preallocated EC command and buffer to read console log

 * @log_mutex: mutex to protect circular buffer

 * @log_wq: waitqueue for log readers

 * @log_poll_work: recurring task to poll EC for new console log data

 * @panicinfo_blob: panicinfo debugfs blob

 EC log */

 EC panicinfo */

/*

 * We need to make sure that the EC log buffer on the UART is large enough,

 * so that it is unlikely enough to overlow within LOG_POLL_SEC.

 Loop until we have read everything, or there's an error. */

 If the buffer is empty, we're done here. */

	/* Only copy until the end of the circular buffer, and let userspace

	 * retry to get the rest of the data.

	/*

	 * Read status from all PD ports until failure, typically caused

	 * by attempting to read status on a port that doesn't exist.

 Other errors maybe a transient error, do not rule about support. */

	/*

	 * If the console log feature is not supported return silently and

	 * don't create the console_log entry.

 No panic data */

 SPDX-License-Identifier: GPL-2.0+

 Expose the vboot context nvram to userspace



 Copyright (C) 2012 Google, Inc.

 Copyright (C) 2015 Collabora Ltd.

 NB: we only kmalloc()ated enough space for the op field */

 Only write full values */

 SPDX-License-Identifier: GPL-2.0

 ISHTP interface for ChromeOS Embedded Controller



 Copyright (c) 2019, Intel Corporation.



 ISHTP client driver for talking to the Chrome OS EC firmware running

 on Intel Integrated Sensor Hub (ISH) using the ISH Transport protocol

 (ISH-TP).

/*

 * ISH TX/RX ring buffer pool size

 *

 * The AP->ISH messages and corresponding ISH->AP responses are

 * serialized. We need 1 TX and 1 RX buffer for these.

 *

 * The MKBP ISH->AP events are serialized. We need one additional RX

 * buffer for them.

 ISH CrOS EC Host Commands */

 AP->ISH message */

 ISH->AP events */

/*

 * ISH firmware timeout for 1 message send failure is 1Hz, and the

 * firmware will retry 2 times, so 3Hz is used for timeout.

 ISH Transport CrOS EC ISH client unique GUID */

/*

 * The Read-Write Semaphore is used to prevent message TX or RX while

 * the ishtp client is being initialized or undergoing reset.

 *

 * The readers are the kernel function calls responsible for IA->ISH

 * and ISH->AP messaging.

 *

 * The writers are .reset() and .probe() function.

/**

 * struct response_info - Encapsulate firmware response related

 * information for passing between function ish_send() and

 * process_recv() callback.

 *

 * @data: Copy the data received from firmware here.

 * @max_size: Max size allocated for the @data buffer. If the received

 * data exceeds this value, we log an error.

 * @size: Actual size of data received from firmware.

 * @error: 0 for success, negative error code for a failure in process_recv().

 * @token: Expected token for response that we are waiting on.

 * @received: Set to true on receiving a valid firmware	response to host command

 * @wait_queue: Wait queue for host to wait for firmware response.

/**

 * struct ishtp_cl_data - Encapsulate per ISH TP Client.

 *

 * @cros_ish_cl: ISHTP firmware client instance.

 * @cl_device: ISHTP client device instance.

 * @response: Response info passing between ish_send() and process_recv().

 * @work_ishtp_reset: Work queue reset handling.

 * @work_ec_evt: Work queue for EC events.

 * @ec_dev: CrOS EC MFD device.

 *

 * This structure is used to store per client data.

	/*

	 * Used for passing firmware response information between

	 * ish_send() and process_recv() callback.

/**

 * ish_evt_handler - ISH to AP event handler

 * @work: Work struct

/**

 * ish_send() - Send message from host to firmware

 *

 * @client_data: Client data instance

 * @out_msg: Message buffer to be sent to firmware

 * @out_size: Size of out going message

 * @in_msg: Message buffer where the incoming data is copied. This buffer

 * is allocated by calling

 * @in_size: Max size of incoming message

 *

 * Return: Number of bytes copied in the in_msg on success, negative

 * error code on failure.

 Setup for incoming response */

/**

 * process_recv() - Received and parse incoming packet

 * @cros_ish_cl: Client instance to get stats

 * @rb_in_proc: Host interface message buffer

 * @timestamp: Timestamp of when parent callback started

 *

 * Parse the incoming packet. If it is a response packet then it will

 * update per instance flags and wake up the caller waiting to for the

 * response. If it is an event packet then it will schedule event work.

 Proceed only if reset or init is not in progress */

 Free the buffer */

	/*

	 * All firmware messages contain a header. Check the buffer size

	 * before accessing elements inside.

 Sanity check */

 Update the actual received buffer size */

		/*

		 * Copy the buffer received in firmware response for the

		 * calling thread.

 Free the buffer since we copied data or didn't need it */

 Set flag before waking up the caller */

 Wake the calling thread */

 Free the buffer. This is just an event without data */

		/*

		 * Set timestamp from beginning of function since we actually

		 * got an incoming MKBP event

 Free the buffer if we already haven't */

/**

 * ish_event_cb() - bus driver callback for incoming message

 * @cl_device: ISHTP client device for which this message is targeted.

 *

 * Remove the packet from the list and process the message by calling

 * process_recv.

	/*

	 * Take timestamp as close to hardware interrupt as possible for sensor

	 * timestamps.

 Decide what to do with received data */

/**

 * cros_ish_init() - Init function for ISHTP client

 * @cros_ish_cl: ISHTP client instance

 *

 * This function complete the initializtion of the client.

 *

 * Return: 0 for success, negative error code for failure.

 Connect to firmware client */

/**

 * cros_ish_deinit() - Deinit function for ISHTP client

 * @cros_ish_cl: ISHTP client instance

 *

 * Unlink and free cros_ec client

 Disband and free all Tx and Rx client-level rings */

/**

 * prepare_cros_ec_rx() - Check & prepare receive buffer

 * @ec_dev: CrOS EC MFD device.

 * @in_msg: Incoming message buffer

 * @msg: cros_ec command used to send & receive data

 *

 * Return: 0 for success, negative error code for failure.

 *

 * Check the received buffer. Convert to cros_ec_command format.

 Check response error code */

 Copy response packet payload and compute checksum */

 Sanity checks */

 Proceed only if reset-init is not in progress */

 Prepare the package to be sent over ISH TP */

 Send command to ISH EC firmware and read response */

 Lock for reset to complete */

 Unlink, flush queues & start again */

 Refresh ec_dev device pointers */

/**

 * cros_ec_ishtp_probe() - ISHTP client driver probe callback

 * @cl_device: ISHTP client device instance

 *

 * Return: 0 for success, negative error code for failure.

 Lock for initialization to complete */

 Register croc_ec_dev mfd */

/**

 * cros_ec_ishtp_remove() - ISHTP client driver remove callback

 * @cl_device: ISHTP client device instance

 *

 * Return: 0

/**

 * cros_ec_ishtp_reset() - ISHTP client driver reset callback

 * @cl_device: ISHTP client device instance

 *

 * Return: 0

/**

 * cros_ec_ishtp_suspend() - ISHTP client driver suspend callback

 * @device: device instance

 *

 * Return: 0 for success, negative error code for failure.

/**

 * cros_ec_ishtp_resume() - ISHTP client driver resume callback

 * @device: device instance

 *

 * Return: 0 for success, negative error code for failure.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Chrome OS EC Sensor hub FIFO.

 *

 * Copyright 2020 Google LLC

 Precision of fixed point for the m values from the filter */

 Only activate the filter once we have at least this many elements. */

/*

 * If we don't have any history entries for this long, empty the filter to

 * make sure there are no big discontinuities.

 To measure by how much the filter is overshooting, if it happens. */

/**

 * cros_ec_sensorhub_register_push_data() - register the callback to the hub.

 *

 * @sensorhub : Sensor Hub object

 * @sensor_num : The sensor the caller is interested in.

 * @indio_dev : The iio device to use when a sample arrives.

 * @cb : The callback to call when a sample arrives.

 *

 * The callback cb will be used by cros_ec_sensorhub_ring to distribute events

 * from the EC.

 *

 * Return: 0 when callback is registered.

 *         EINVAL is the sensor number is invalid or the slot already used.

/**

 * cros_ec_sensorhub_ring_fifo_enable() - Enable or disable interrupt generation

 *					  for FIFO events.

 * @sensorhub: Sensor Hub object

 * @on: true when events are requested.

 *

 * To be called before sleeping or when noone is listening.

 * Return: 0 on success, or an error when we can not communicate with the EC.

 *

 We expect to receive a payload of 4 bytes, ignore. */

/*

 * cros_ec_sensor_ring_median: Gets median of an array of numbers

 *

 * For now it's implemented using an inefficient > O(n) sort then return

 * the middle element. A more optimal method would be something like

 * quickselect, but given that n = 64 we can probably live with it in the

 * name of clarity.

 *

 * Warning: the input array gets modified (sorted)!

/*

 * IRQ Timestamp Filtering

 *

 * Lower down in cros_ec_sensor_ring_process_event(), for each sensor event

 * we have to calculate it's timestamp in the AP timebase. There are 3 time

 * points:

 *   a - EC timebase, sensor event

 *   b - EC timebase, IRQ

 *   c - AP timebase, IRQ

 *   a' - what we want: sensor even in AP timebase

 *

 * While a and b are recorded at accurate times (due to the EC real time

 * nature); c is pretty untrustworthy, even though it's recorded the

 * first thing in ec_irq_handler(). There is a very good change we'll get

 * added lantency due to:

 *   other irqs

 *   ddrfreq

 *   cpuidle

 *

 * Normally a' = c - b + a, but if we do that naive math any jitter in c

 * will get coupled in a', which we don't want. We want a function

 * a' = cros_ec_sensor_ring_ts_filter(a) which will filter out outliers in c.

 *

 * Think of a graph of AP time(b) on the y axis vs EC time(c) on the x axis.

 * The slope of the line won't be exactly 1, there will be some clock drift

 * between the 2 chips for various reasons (mechanical stress, temperature,

 * voltage). We need to extrapolate values for a future x, without trusting

 * recent y values too much.

 *

 * We use a median filter for the slope, then another median filter for the

 * y-intercept to calculate this function:

 *   dx[n] = x[n-1] - x[n]

 *   dy[n] = x[n-1] - x[n]

 *   m[n] = dy[n] / dx[n]

 *   median_m = median(m[n-k:n])

 *   error[i] = y[n-i] - median_m * x[n-i]

 *   median_error = median(error[:k])

 *   predicted_y = median_m * x + median_error

 *

 * Implementation differences from above:

 * - Redefined y to be actually c - b, this gives us a lot more precision

 * to do the math. (c-b)/b variations are more obvious than c/b variations.

 * - Since we don't have floating point, any operations involving slope are

 * done using fixed point math (*M_PRECISION)

 * - Since x and y grow with time, we keep zeroing the graph (relative to

 * the last sample), this way math involving *x[n-i] will not overflow

 * - EC timestamps are kept in us, it improves the slope calculation precision

/**

 * cros_ec_sensor_ring_ts_filter_update() - Update filter history.

 *

 * @state: Filter information.

 * @b: IRQ timestamp, EC timebase (us)

 * @c: IRQ timestamp, AP timebase (ns)

 *

 * Given a new IRQ timestamp pair (EC and AP timebases), add it to the filter

 * history.

 stored as *M_PRECISION */

 we trust b the most, that'll be our independent variable */

 y is the offset between AP and EC times, in ns */

 we already have this irq in the history */

 Empty filter if we haven't seen any action in a while. */

 Move everything over, also update offset to all absolute coords .*/

		/*

		 * Also use the same loop to copy m_history for future

		 * median extraction.

 Store the x and y, but remember offset is actually last sample. */

 Precalculate things for the filter. */

		/*

		 * Calculate y-intercepts as if m_median is the slope and

		 * points in the history are on the line. median_error will

		 * still be in the offset coordinate system.

/**

 * cros_ec_sensor_ring_ts_filter() - Translate EC timebase timestamp to AP

 *                                   timebase

 *

 * @state: filter information.

 * @x: any ec timestamp (us):

 *

 * cros_ec_sensor_ring_ts_filter(a) => a' event timestamp, AP timebase

 * cros_ec_sensor_ring_ts_filter(b) => calculated timestamp when the EC IRQ

 *                           should have happened on the AP, with low jitter

 *

 * Note: The filter will only activate once state->history_len goes

 * over TS_HISTORY_THRESHOLD. Otherwise it'll just do the naive c - b + a

 * transform.

 *

 * How to derive the formula, starting from:

 *   f(x) = median_m * x + median_error

 * That's the calculated AP - EC offset (at the x point in time)

 * Undo the coordinate system transform:

 *   f(x) = median_m * (x - x_offset) + median_error + y_offset

 * Remember to undo the "y = c - b * 1000" modification:

 *   f(x) = median_m * (x - x_offset) + median_error + y_offset + x * 1000

 *

 * Return: timestamp in AP timebase (ns)

/*

 * Since a and b were originally 32 bit values from the EC,

 * they overflow relatively often, casting is not enough, so we need to

 * add an offset.

 If this event is earlier than one we saw before... */

 mark it for spreading. */

/**

 * cros_ec_sensor_ring_process_event() - Process one EC FIFO event

 *

 * @sensorhub: Sensor Hub object.

 * @fifo_info: FIFO information from the EC (includes b point, EC timebase).

 * @fifo_timestamp: EC IRQ, kernel timebase (aka c).

 * @current_timestamp: calculated event timestamp, kernel timebase (aka a').

 * @in: incoming FIFO event from EC (includes a point, EC timebase).

 * @out: outgoing event to user space (includes a').

 *

 * Process one EC event, add it in the ring if necessary.

 *

 * Return: true if out event has been populated.

 Do not populate the filter based on asynchronous events. */

			/*

			 * Disable filtering since we might add more jitter

			 * if b is in a random point in time.

			/*

			 * The timestamp can be stale if we had to use the fifo

			 * info timestamp.

		/*

		 * ODR change is only useful for the sensor_ring, it does not

		 * convey information to clients.

		/*

		 * No other payload information provided with

		 * flush ack.

 If we just have a timestamp, skip this entry. */

 Regular sample */

		/*

		 * This fix is needed to overcome the timestamp filter putting

		 * events in the future.

/*

 * cros_ec_sensor_ring_spread_add: Calculate proper timestamps then add to

 *                                 ringbuffer.

 *

 * This is the new spreading code, assumes every sample's timestamp

 * preceeds the sample. Run if tight_timestamps == true.

 *

 * Sometimes the EC receives only one interrupt (hence timestamp) for

 * a batch of samples. Only the first sample will have the correct

 * timestamp. So we must interpolate the other samples.

 * We use the previous batch timestamp and our current batch timestamp

 * as a way to calculate period, then spread the samples evenly.

 *

 * s0 int, 0ms

 * s1 int, 10ms

 * s2 int, 20ms

 * 30ms point goes by, no interrupt, previous one is still asserted

 * downloading s2 and s3

 * s3 sample, 20ms (incorrect timestamp)

 * s4 int, 40ms

 *

 * The batches are [(s0), (s1), (s2, s3), (s4)]. Since the 3rd batch

 * has 2 samples in them, we adjust the timestamp of s3.

 * s2 - s1 = 10ms, so s3 must be s2 + 10ms => 20ms. If s1 would have

 * been part of a bigger batch things would have gotten a little

 * more complicated.

 *

 * Note: we also assume another sensor sample doesn't break up a batch

 * in 2 or more partitions. Example, there can't ever be a sync sensor

 * in between S2 and S3. This simplifies the following code.

			/*

			 * For each batch (where all samples have the same

			 * timestamp).

			/*

			 * Skip over batches that start with the sensor types

			 * we're not looking at right now.

			/*

			 * Do not start a batch

			 * from a flush, as it happens asynchronously to the

			 * regular flow of events.

				/*

				 * Push first sample in the batch to the,

				 * kifo, it's guaranteed to be correct, the

				 * rest will follow later on.

 Find all samples have the same timestamp. */

					/*

					 * Skip over other sensor types that

					 * are interleaved, don't count them.

 we discovered the next batch */

 break on flush packets */

 Can we calculate period? */

				/*

				 * Note: we're dropping the rest of the samples

				 * in this batch since we have no idea where

				 * they're supposed to go without a period

				 * calculation.

			/*

			 * Adjust timestamps of the samples then push them to

			 * kfifo.

					/*

					 * Skip over other sensor types that

					 * are interleaved, don't change them.

/*

 * cros_ec_sensor_ring_spread_add_legacy: Calculate proper timestamps then

 * add to ringbuffer (legacy).

 *

 * Note: This assumes we're running old firmware, where timestamp

 * is inserted after its sample(s)e. There can be several samples between

 * timestamps, so several samples can have the same timestamp.

 *

 *                        timestamp | count

 *                        -----------------

 *          1st sample --> TS1      | 1

 *                         TS2      | 2

 *                         TS2      | 3

 *                         TS3      | 4

 *           last_out -->

 *

 *

 * We spread time for the samples using perod p = (current - TS1)/4.

 * between TS1 and TS2: [TS1+p/4, TS1+2p/4, TS1+3p/4, current_timestamp].

 *

 Timestamp to start with */

 Find last sample. */

 Spread uniformly between the first and last samples. */

 Push the event into the kfifo */

/**

 * cros_ec_sensorhub_ring_handler() - The trigger handler function

 *

 * @sensorhub: Sensor Hub object.

 *

 * Called by the notifier, process the EC sensor FIFO queue.

 Get FIFO information if there are lost vectors. */

 Need to retrieve the number of lost vectors per sensor */

		/*

		 * Update collection time, will not be as precise as the

		 * non-error case.

 Copy elements in the main fifo */

 Unexpected empty FIFO. */

	/*

	 * Check if current_timestamp is ahead of the last sample. Normally,

	 * the EC appends a timestamp after the last sample, but if the AP

	 * is slow to respond to the IRQ, the EC may have added new samples.

	 * Use the FIFO info timestamp as last timestamp then.

 Warn on lost samples. */

	/*

	 * Spread samples in case of batching, then add them to the

	 * ringbuffer.

/**

 * cros_ec_sensorhub_ring_allocate() - Prepare the FIFO functionality if the EC

 *				       supports it.

 *

 * @sensorhub : Sensor Hub object.

 *

 * Return: 0 on success.

 Allocate the array for lost events. */

	/*

	 * Allocate the callback area based on the number of sensors.

	 * Add one for the sensor ring.

/**

 * cros_ec_sensorhub_ring_add() - Add the FIFO functionality if the EC

 *				  supports it.

 *

 * @sensorhub : Sensor Hub object.

 *

 * Return: 0 on success.

 Retrieve FIFO information */

	/*

	 * Allocate the full fifo. We need to copy the whole FIFO to set

	 * timestamps properly.

 Register the notifier that will act as a top half interrupt. */

 Start collection samples. */

 Disable the ring, prevent EC interrupt to the AP for nothing. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Miscellaneous character driver for ChromeOS Embedded Controller

 *

 * Copyright 2014 Google, Inc.

 * Copyright 2019 Google LLC

 *

 * This file is a rework and part of the code is ported from

 * drivers/mfd/cros_ec_dev.c that was originally written by

 * Bill Richardson.

 Arbitrary bounded size for the event queue */

 invalid */

/*

 * Device file ops

 queued MKBP event */

		/*

		 * length == 0 is special - no IO is done but we check

		 * for error conditions.

 The event is 1 byte of type plus the payload */

 the copy failed */

	/*

	 * Legacy behavior if no event mask is defined

/*

 * Ioctls

 Only copy data to userland if data was received. */

 Not every platform supports direct reads */

 Create a char device: we want to create it anew */

 SPDX-License-Identifier: GPL-2.0

/*

 * Telemetry communication for Wilco EC

 *

 * Copyright 2019 Google LLC

 *

 * The Wilco Embedded Controller is able to send telemetry data

 * which is useful for enterprise applications. A daemon running on

 * the OS sends a command to the EC via a write() to a char device,

 * and can read the response with a read(). The write() request is

 * verified by the driver to ensure that it is performing only one

 * of the allowlisted commands, and that no extraneous data is

 * being transmitted to the EC. The response is passed directly

 * back to the reader with no modification.

 *

 * The character device will appear as /dev/wilco_telemN, where N

 * is some small non-negative integer, starting with 0. Only one

 * process may have the file descriptor open at a time. The calling

 * userspace program needs to keep the device file descriptor open

 * between the calls to write() and read() in order to preserve the

 * response. Up to 32 bytes will be available for reading.

 *

 * For testing purposes, try requesting the EC's firmware build

 * date, by sending the WILCO_EC_TELEM_GET_VERSION command with

 * argument index=3. i.e. write [0x38, 0x00, 0x03]

 * to the device node. An ASCII string of the build date is

 * returned.

 Keep track of all the device numbers used. */

 EC telemetry command codes */

/*

 * The following telem_args_get_* structs are embedded within the |args| field

 * of wilco_ec_telem_request.

/*

 * Get a piece of info about the EC firmware version:

 * 0 = label

 * 1 = svn_rev

 * 2 = model_no

 * 3 = build_date

 * 4 = frio_version

 Should always be 1 */

/**

 * struct wilco_ec_telem_request - Telemetry command and arguments sent to EC.

 * @command: One of WILCO_EC_TELEM_GET_* command codes.

 * @reserved: Must be 0.

 * @args: The first N bytes are one of telem_args_get_* structs, the rest is 0.

/**

 * check_telem_request() - Ensure that a request from userspace is valid.

 * @rq: Request buffer copied from userspace.

 * @size: Number of bytes copied from userspace.

 *

 * Return: 0 if valid, -EINVAL if bad command or reserved byte is non-zero,

 *         -EMSGSIZE if the request is too long.

 *

 * We do not want to allow userspace to send arbitrary telemetry commands to

 * the EC. Therefore we check to ensure that

 * 1. The request follows the format of struct wilco_ec_telem_request.

 * 2. The supplied command code is one of the allowlisted commands.

 * 3. The request only contains the necessary data for the header and arguments.

/**

 * struct telem_device_data - Data for a Wilco EC device that queries telemetry.

 * @cdev: Char dev that userspace reads and polls from.

 * @dev: Device associated with the %cdev.

 * @ec: Wilco EC that we will be communicating with using the mailbox interface.

 * @available: Boolean of if the device can be opened.

/**

 * struct telem_session_data - Data that exists between open() and release().

 * @dev_data: Pointer to get back to the device data and EC.

 * @request: Command and arguments sent to EC.

 * @response: Response buffer of data from EC.

 * @has_msg: Is there data available to read from a previous write?

/**

 * telem_open() - Callback for when the device node is opened.

 * @inode: inode for this char device node.

 * @filp: file for this char device node.

 *

 * We need to ensure that after writing a command to the device,

 * the same userspace process reads the corresponding result.

 * Therefore, we increment a refcount on opening the device, so that

 * only one process can communicate with the EC at a time.

 *

 * Return: 0 on success, or negative error code on failure.

 Ensure device isn't already open */

/**

 * telem_device_free() - Callback to free the telem_device_data structure.

 * @d: The device embedded in our device data, which we have been ref counting.

 *

 * Once all open file descriptors are closed and the device has been removed,

 * the refcount of the device will fall to 0 and this will be called.

/**

 * telem_device_probe() - Callback when creating a new device.

 * @pdev: platform device that we will be receiving telems from.

 *

 * This finds a free minor number for the device, allocates and initializes

 * some device data, and creates a new device and char dev node.

 *

 * Return: 0 on success, negative error code on failure.

 Get the next available device number */

 Initialize the device data */

 Initialize the device */

 Initialize the character device and add it to userspace */;

 Request the kernel for device numbers, starting with minor=0 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 Google LLC

 Operation code; what the EC should do with the property */

 One of enum ec_property_op */

 The 32 bit PID is stored Little Endian */

 One of enum ec_property_op */

 The 32 bit PID is stored Little Endian */

 SPDX-License-Identifier: GPL-2.0

/*

 * debugfs attributes for Wilco EC

 *

 * Copyright 2019 Google LLC

 *

 * See Documentation/ABI/testing/debugfs-wilco-ec for usage.

 The raw bytes will take up more space when represented as a hex string */

/**

 * parse_hex_sentence() - Convert a ascii hex representation into byte array.

 * @in: Input buffer of ascii.

 * @isize: Length of input buffer.

 * @out: Output buffer.

 * @osize: Length of output buffer, e.g. max number of bytes to parse.

 *

 * An valid input is a series of ascii hexadecimal numbers, separated by spaces.

 * An example valid input is

 * "   00 f2 0    000076 6 0  ff"

 *

 * If an individual "word" within the hex sentence is longer than MAX_WORD_SIZE,

 * then the sentence is illegal, and parsing will fail.

 *

 * Return: Number of bytes parsed, or negative error code on failure.

 Temp buffer for holding a "word" of chars that represents one byte */

 Find the start of the next word */

 reached the end of the input before next word? */

 Find the end of this word */

 Copy to a tmp NULL terminated string */

		/*

		 * Convert from hex string, place in output. If fails to parse,

		 * just return -EINVAL because specific error code is only

		 * relevant for this one word, returning it would be confusing.

 The message type takes up two bytes*/

 Need at least two bytes for message type and one byte of data */

 Only return response the first time it is read */

 Always CMD_KB_CHROME */

 0 if allowed */

/**

 * h1_gpio_get() - Gets h1 gpio status.

 * @arg: The wilco EC device.

 * @val: BIT(0)=ENTRY_TO_FACT_MODE, BIT(1)=SPI_CHROME_SEL

/**

 * test_event_set() - Sends command to EC to cause an EC test event.

 * @arg: The wilco EC device.

 * @val: unused.

 Format is unused since it is only required for get method which is NULL */

/**

 * wilco_ec_debugfs_probe() - Create the debugfs node

 * @pdev: The platform device, probably created in core.c

 *

 * Try to create a debugfs node. If it fails, then we don't want to change

 * behavior at all, this is for debugging after all. Just fail silently.

 *

 * Return: 0 always.

 SPDX-License-Identifier: GPL-2.0

/*

 * Mailbox interface for Wilco Embedded Controller

 *

 * Copyright 2018 Google LLC

 *

 * The Wilco EC is similar to a typical ChromeOS embedded controller.

 * It uses the same MEC based low-level communication and a similar

 * protocol, but with some important differences.  The EC firmware does

 * not support the same mailbox commands so it is not registered as a

 * cros_ec device type.

 *

 * Most messages follow a standard format, but there are some exceptions

 * and an interface is provided to do direct/raw transactions that do not

 * make assumptions about byte placement.

 Version of mailbox interface */

 Command to start mailbox transaction */

 Version of EC protocol */

 Number of header bytes to be counted as data bytes */

 Maximum timeout */

 EC response flags */

 Data ready for host to read */

 Write pending to EC */

 EC is busy processing a command */

 Last host write was a command */

/**

 * wilco_ec_response_timed_out() - Wait for EC response.

 * @ec: EC device.

 *

 * Return: true if EC timed out, false if EC did not time out.

/**

 * wilco_ec_checksum() - Compute 8-bit checksum over data range.

 * @data: Data to checksum.

 * @size: Number of bytes to checksum.

 *

 * Return: 8-bit checksum of provided data.

/**

 * wilco_ec_prepare() - Prepare the request structure for the EC.

 * @msg: EC message with request information.

 * @rq: EC request structure to fill.

 Checksum header and data */

/**

 * wilco_ec_transfer() - Perform actual data transfer.

 * @ec: EC device.

 * @msg: EC message data for request and response.

 * @rq: Filled in request structure

 *

 * Context: ec->mailbox_lock should be held while using this function.

 * Return: number of bytes received or negative error code on failure.

 Write request header, then data */

 Start the command */

 For some commands (eg shutdown) the EC will not respond, that's OK */

 Wait for it to complete */

 Check result */

 Read back response */

/**

 * wilco_ec_mailbox() - Send EC request and receive EC response.

 * @ec: EC device.

 * @msg: EC message data for request and response.

 *

 * On entry msg->type, msg->request_size, and msg->request_data should all be

 * filled in. If desired, msg->flags can be set.

 *

 * If a response is expected, msg->response_size should be set, and

 * msg->response_data should point to a buffer with enough space. On exit

 * msg->response_data will be filled.

 *

 * Return: number of bytes received or negative error code on failure.

 Prepare request packet */

 SPDX-License-Identifier: GPL-2.0

/*

 * Keyboard backlight LED driver for the Wilco Embedded Controller

 *

 * Copyright 2019 Google LLC

 *

 * Since the EC will never change the backlight level of its own accord,

 * we don't need to implement a brightness_get() method.

 Set brightness by percent. */

/**

 * struct wilco_keyboard_leds_msg - Message to/from EC for keyboard LED control.

 * @command: Always WILCO_EC_COMMAND_KBBL.

 * @status: Set by EC to 0 on success, 0xFF on failure.

 * @subcmd: One of enum wilco_kbbl_subcommand.

 * @reserved3: Should be 0.

 * @mode: Bit flags for used mode, we want to use WILCO_KBBL_MODE_FLAG_PWM.

 * @reserved5to8: Should be 0.

 * @percent: Brightness in 0-100. Only meaningful in PWM mode.

 * @reserved10to15: Should be 0.

 Send a request, get a response, and check that the response is good. */

/**

 * kbbl_init() - Initialize the state of the keyboard backlight.

 * @ec: EC device to talk to.

 *

 * Gets the current brightness, ensuring that the BIOS already initialized the

 * backlight to PWM mode. If not in PWM mode, then the current brightness is

 * meaningless, so set the brightness to WILCO_KBBL_DEFAULT_BRIGHTNESS.

 *

 * Return: Final brightness of the keyboard, or negative error code on failure.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 Google LLC

 *

 * Sysfs properties to view and modify EC-controlled features on Wilco devices.

 * The entries will appear under /sys/bus/platform/devices/GOOG000C:00/

 *

 * See Documentation/ABI/testing/sysfs-platform-wilco-ec for more information.

 Always CMD_KB_CMOS */

 Always SUB_CMD_KB_CMOS_AUTO_ON */

 Either 0 or 1 */

 Always CMD_USB_CHARGE */

 One of enum usb_charge_op */

 When setting, either 0 or 1 */

 Set by EC to 0 on success, other value on failure */

 When getting, set by EC to either 0 or 1 */

 Always CMD_EC_INFO */

 One of enum get_ec_info_op */

 __nonstring: might not be null terminated */

 SPDX-License-Identifier: GPL-2.0

/*

 * Core driver for Wilco Embedded Controller

 *

 * Copyright 2018 Google LLC

 *

 * This is the entry point for the drivers that control the Wilco EC.

 Prepare access to IO regions provided by ACPI */

 Host Data */

 Host Command */

 MEC EMI */

 Initialize cros_ec register interface for communication */

	/*

	 * Register a child device that will be found by the debugfs driver.

	 * Ignore failure.

 Register a child device that will be found by the RTC driver. */

 Set up the keyboard backlight LEDs. */

 Register child device to be found by charger config driver. */

 Register child device that will be found by the telemetry driver. */

 Teardown cros_ec interface */

 SPDX-License-Identifier: GPL-2.0

/*

 * ACPI event handling for Wilco Embedded Controller

 *

 * Copyright 2019 Google LLC

 *

 * The Wilco Embedded Controller can create custom events that

 * are not handled as standard ACPI objects. These events can

 * contain information about changes in EC controlled features,

 * such as errors and events in the dock or display. For example,

 * an event is triggered if the dock is plugged into a display

 * incorrectly. These events are needed for telemetry and

 * diagnostics reasons, and for possibly alerting the user.



 * These events are triggered by the EC with an ACPI Notify(0x90),

 * and then the BIOS reads the event buffer from EC RAM via an

 * ACPI method. When the OS receives these events via ACPI,

 * it passes them along to this driver. The events are put into

 * a queue which can be read by a userspace daemon via a char device

 * that implements read() and poll(). The event queue acts as a

 * circular buffer of size 64, so if there are no userspace consumers

 * the kernel will not run out of memory. The char device will appear at

 * /dev/wilco_event{n}, where n is some small non-negative integer,

 * starting from 0. Standard ACPI events such as the battery getting

 * plugged/unplugged can also come through this path, but they are

 * dealt with via other paths, and are ignored here.



 * To test, you can tail the binary data with

 * $ cat /dev/wilco_event0 | hexdump -ve '1/1 "%x\n"'

 * and then create an event by plugging/unplugging the battery.

 ACPI Notify event code indicating event data is available. */

 ACPI Method to execute to retrieve event data buffer from the EC. */

 Maximum number of words in event data returned by the EC. */

 Node will appear in /dev/EVENT_DEV_NAME */

 Keep track of all the device numbers used. */

 Size of circular queue of events. */

/**

 * struct ec_event - Extended event returned by the EC.

 * @size: Number of 16bit words in structure after the size word.

 * @type: Extended event type, meaningless for us.

 * @event: Event data words.  Max count is %EC_ACPI_MAX_EVENT_WORDS.

/**

 * struct ec_event_queue - Circular queue for events.

 * @capacity: Number of elements the queue can hold.

 * @head: Next index to write to.

 * @tail: Next index to read from.

 * @entries: Array of events.

 Maximum number of events to store in ec_event_queue */

 head==tail when both full and empty, but head==NULL when empty */

 head==tail when both full and empty, but head!=NULL when full */

/*

 * If full, overwrite the oldest event and return it so the caller

 * can kfree it. If not full, return NULL.

/**

 * struct event_device_data - Data for a Wilco EC device that responds to ACPI.

 * @events: Circular queue of EC events to be provided to userspace.

 * @queue_lock: Protect the queue from simultaneous read/writes.

 * @wq: Wait queue to notify processes when events are available or the

 *	device has been removed.

 * @cdev: Char dev that userspace reads() and polls() from.

 * @dev: Device associated with the %cdev.

 * @exist: Has the device been not been removed? Once a device has been removed,

 *	   writes, reads, and new opens will fail.

 * @available: Guarantee only one client can open() file and read from queue.

 *

 * There will be one of these structs for each ACPI device registered. This data

 * is the queue of events received from ACPI that still need to be read from

 * userspace, the device and char device that userspace is using, a wait queue

 * used to notify different threads when something has changed, plus a flag

 * on whether the ACPI device has been removed.

/**

 * enqueue_events() - Place EC events in queue to be read by userspace.

 * @adev: Device the events came from.

 * @buf: Buffer of event data.

 * @length: Length of event data buffer.

 *

 * %buf contains a number of ec_event's, packed one after the other.

 * Each ec_event is of variable length. Start with the first event, copy it

 * into a persistent ec_event, store that entry in the queue, move on

 * to the next ec_event in buf, and repeat.

 *

 * Return: 0 on success or negative error code on failure.

 Ensure event does not overflow the available buffer */

 Point to the next event in the buffer */

 Copy event into the queue */

/**

 * event_device_notify() - Callback when EC generates an event over ACPI.

 * @adev: The device that the event is coming from.

 * @value: Value passed to Notify() in ACPI.

 *

 * This function will read the events from the device and enqueue them.

 Execute ACPI method to get event data buffer. */

 Increase refcount on device so dev_data is not freed */

/**

 * event_read() - Callback for passing event data to userspace via read().

 * @filp: The file we are reading from.

 * @buf: Pointer to userspace buffer to fill with one event.

 * @count: Number of bytes requested. Must be at least EC_ACPI_MAX_EVENT_SIZE.

 * @pos: File position pointer, irrelevant since we don't support seeking.

 *

 * Removes the first event from the queue, places it in the passed buffer.

 *

 * If there are no events in the the queue, then one of two things happens,

 * depending on if the file was opened in nonblocking mode: If in nonblocking

 * mode, then return -EAGAIN to say there's no data. If in blocking mode, then

 * block until an event is available.

 *

 * Return: Number of bytes placed in buffer, negative error code on failure.

 We only will give them the entire event at once */

 Device was removed as we waited? */

/**

 * free_device_data() - Callback to free the event_device_data structure.

 * @d: The device embedded in our device data, which we have been ref counting.

 *

 * This is called only after event_device_remove() has been called and all

 * userspace programs have called event_release() on all the open file

 * descriptors.

 Wake up the waiting processes so they can close. */

/**

 * event_device_add() - Callback when creating a new device.

 * @adev: ACPI device that we will be receiving events from.

 *

 * This finds a free minor number for the device, allocates and initializes

 * some device data, and creates a new device and char dev node.

 *

 * The device data is freed in free_device_data(), which is called when

 * %dev_data->dev is release()ed. This happens after all references to

 * %dev_data->dev are dropped, which happens once both event_device_remove()

 * has been called and every open()ed file descriptor has been release()ed.

 *

 * Return: 0 on success, negative error code on failure.

 Initialize the device data. */

 Initialize the device. */

 Initialize the character device, and add it to userspace. */

 Request device numbers, starting with minor=0. Save the major num. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Supports for the button array on the Surface tablets.

 *

 * (C) Copyright 2016 Red Hat, Inc

 *

 * Based on soc_button_array.c:

 *

 * {C} Copyright 2014 Intel Corporation

/*

 * Some of the buttons like volume up/down are auto repeat, while others

 * are not. To support both, we register two platform devices, and put

 * buttons into them based on whether the key should be auto repeat.

/*

 * Power button, Home button, Volume buttons support is supposed to

 * be covered by drivers/input/misc/soc_button_array.c, which is implemented

 * according to "Windows ACPI Design Guide for SoC Platforms".

 * However surface 3 seems not to obey the specs, instead it uses

 * device TEV2(MSHW0028) for declaring the GPIOs. The gpios are also slightly

 * different in which the Home button is active high.

 * Compared to surfacepro3_button.c which also handles MSHW0028, the Surface 3

 * is a reduce platform and thus uses GPIOs, not ACPI events.

 * We choose an I2C driver here because we need to access the resources

 * declared under the device node, while surfacepro3_button.c only needs

 * the ACPI companion node.

/*

 * Get the Nth GPIO number from the ACPI object.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Surface GPE/Lid driver to enable wakeup from suspend via the lid by

 * properly configuring the respective GPEs. Required for wakeup via lid on

 * newer Intel-based Microsoft Surface devices.

 *

 * Copyright (C) 2020 Maximilian Luz <luzmaximilian@gmail.com>

/*

 * Note: The GPE numbers for the lid devices found below have been obtained

 *       from ACPI/the DSDT table, specifically from the GPE handler for the

 *       lid.

/*

 * Note: When changing this, don't forget to check that the MODULE_ALIAS below

 *       still fits.

			/*

			 * We match for SKU here due to generic product name

			 * "Surface Pro".

			/*

			 * We match for SKU here due to generic product name

			 * "Surface Pro"

			/*

			 * We match for SKU here due to different variants: The

			 * AMD (15") version does not rely on GPEs.

			/*

			 * We match for SKU here due to different variants: The

			 * AMD (15") version does not rely on GPEs.

 restore default behavior without this module */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Supports for the power IC on the Surface 3 tablet.

 *

 * (C) Copyright 2016-2018 Red Hat, Inc

 * (C) Copyright 2016-2018 Benjamin Tissoires <benjamin.tissoires@gmail.com>

 * (C) Copyright 2016 Stephen Just <stephenjust@gmail.com>

 *

 * This driver has been reverse-engineered by parsing the DSDT of the Surface 3

 * and looking at the registers of the chips.

 *

 * The DSDT allowed to find out that:

 * - the driver is required for the ACPI BAT0 device to communicate to the chip

 *   through an operation region.

 * - the various defines for the operation region functions to communicate with

 *   this driver

 * - the DSM 3f99e367-6220-4955-8b0f-06ef2ae79412 allows to trigger ACPI

 *   events to BAT0 (the code is all available in the DSDT).

 *

 * Further findings regarding the 2 chips declared in the MSHW0011 are:

 * - there are 2 chips declared:

 *   . 0x22 seems to control the ADP1 line status (and probably the charger)

 *   . 0x55 controls the battery directly

 * - the battery chip uses a SMBus protocol (using plain SMBus allows non

 *   destructive commands):

 *   . the commands/registers used are in the range 0x00..0x7F

 *   . if bit 8 (0x80) is set in the SMBus command, the returned value is the

 *     same as when it is not set. There is a high chance this bit is the

 *     read/write

 *   . the various registers semantic as been deduced by observing the register

 *     dumps.

 3f99e367-6220-4955-8b0f-06ef2ae79412 */

 get design capacity */

 get last full charge capacity */

 get serial number */

 get cycle count */

 get OEM name */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Provides user-space access to the SSAM EC via the /dev/surface/aggregator

 * misc device. Intended for debugging and development.

 *

 * Copyright (C) 2020-2021 Maximilian Luz <luzmaximilian@gmail.com>

 -- Main structures. ------------------------------------------------------ */

 Guards client list. */

 Guards notifier access for registration */

 Guards FIFO buffer read access */

 Guards FIFO buffer write access */

 -- Notifier handling. ---------------------------------------------------- */

 Translate event. */

 Make sure we have enough space. */

 Copy event header and payload. */

 Notify waiting readers. */

	/*

	 * Don't mark events as handled, this is the job of a proper driver and

	 * not the debugging interface.

 Validate notifier target category. */

 Check if the notifier has already been registered. */

 Allocate new notifier. */

	/*

	 * Create a dummy notifier with the minimal required fields for

	 * observer registration. Note that we can skip fully specifying event

	 * and registry here as we do not need any matching and use silent

	 * registration, which does not enable the corresponding event.

 Do not do any matching. */

 Register notifier. */

 Validate notifier target category. */

 Check if the notifier is currently registered. */

 Unregister and free notifier. */

	/*

	 * This function may be used during shutdown, thus we need to test for

	 * cdev->ctrl instead of the SSAM_CDEV_DEVICE_SHUTDOWN_BIT bit.

		/*

		 * Device has been shut down. Any notifier remaining is a bug,

		 * so warn about that as this would otherwise hardly be

		 * noticeable. Nevertheless, free them as well.

 -- IOCTL functions. ------------------------------------------------------ */

 Setup basic request fields. */

 Get request payload from user-space. */

		/*

		 * Note: spec.length is limited to U16_MAX bytes via struct

		 * ssam_cdev_request. This is slightly larger than the

		 * theoretical maximum (SSH_COMMAND_MAX_PAYLOAD_SIZE) of the

		 * underlying protocol (note that nothing remotely this size

		 * should ever be allocated in any normal case). This size is

		 * validated later in ssam_request_sync(), for allocation the

		 * bound imposed by u16 should be enough.

 Allocate response buffer. */

		/*

		 * Note: rsp.capacity is limited to U16_MAX bytes via struct

		 * ssam_cdev_request. This is slightly larger than the

		 * theoretical maximum (SSH_COMMAND_MAX_PAYLOAD_SIZE) of the

		 * underlying protocol (note that nothing remotely this size

		 * should ever be allocated in any normal case). In later use,

		 * this capacity does not have to be strictly bounded, as it

		 * is only used as an output buffer to be written to. For

		 * allocation the bound imposed by u16 should be enough.

 Perform request. */

 Copy response to user-space. */

 Always try to set response-length and status. */

 Cleanup. */

 Read descriptor from user-space. */

 Translate descriptor. */

 Disable event. */

 Read descriptor from user-space. */

 Translate descriptor. */

 Disable event. */

 -- File operations. ------------------------------------------------------ */

 Initialize client */

 Attach client. */

 Force-unregister all remaining notifiers of this client. */

 Detach client. */

 Free client. */

 Ensure that controller is valid for as long as we need it. */

 Make sure we're not shut down. */

 Check availability, wait if necessary. */

 Need to check that we're not shut down again. */

 Try to read from FIFO. */

 We might not have gotten anything, check this here. */

 -- Device and driver setup ----------------------------------------------- */

	/*

	 * Mark device as shut-down. Prevent new clients from being added and

	 * new operations from being executed.

 Remove all notifiers registered by us. */

 Wake up async clients. */

 Wake up blocking clients. */

	/*

	 * The controller is only guaranteed to be valid for as long as the

	 * driver is bound. Remove controller so that any lingering open files

	 * cannot access it any more after we're gone.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for the Surface ACPI Notify (SAN) interface/shim.

 *

 * Translates communication from ACPI to Surface System Aggregator Module

 * (SSAM/SAM) requests and back, specifically SAM-over-SSH. Translates SSAM

 * events back to ACPI notifications. Allows handling of discrete GPU

 * notifications sent from ACPI via the SAN interface by providing them to any

 * registered external driver.

 *

 * Copyright (C) 2019-2020 Maximilian Luz <luzmaximilian@gmail.com>

 -- dGPU notifier interface. ---------------------------------------------- */

/**

 * san_client_link() - Link client as consumer to SAN device.

 * @client: The client to link.

 *

 * Sets up a device link between the provided client device as consumer and

 * the SAN device as provider. This function can be used to ensure that the

 * SAN interface has been set up and will be set up for as long as the driver

 * of the client device is bound. This guarantees that, during that time, all

 * dGPU events will be received by any registered notifier.

 *

 * The link will be automatically removed once the client device's driver is

 * unbound.

 *

 * Return: Returns zero on success, %-ENXIO if the SAN interface has not been

 * set up yet, and %-ENOMEM if device link creation failed.

/**

 * san_dgpu_notifier_register() - Register a SAN dGPU notifier.

 * @nb: The notifier-block to register.

 *

 * Registers a SAN dGPU notifier, receiving any new SAN dGPU events sent from

 * ACPI. The registered notifier will be called with &struct san_dgpu_event

 * as notifier data and the command ID of that event as notifier action.

/**

 * san_dgpu_notifier_unregister() - Unregister a SAN dGPU notifier.

 * @nb: The notifier-block to unregister.

 -- ACPI _DSM event relay. ------------------------------------------------ */

 93b666c5-70c6-469f-a215-3d487c91ab3c */

 must be last */

	/*

	 * Ensure that the battery states get updated correctly. When the

	 * battery is fully charged and an adapter is plugged in, it sometimes

	 * is not updated correctly, instead showing it as charging.

	 * Explicitly trigger battery updates to fix this.

	/*

	 * The Surface ACPI expects a buffer and not a package. It specifically

	 * checks for ObjectType (Arg3) == 0x03. This will cause a warning in

	 * acpica/nsarguments.c, but that warning can be safely ignored.

		/*

		 * Wait for battery state to update before signaling adapter

		 * change.

 Ensure we do not miss anything important due to caching. */

		/*

		 * TODO: Implement support for battery protection status change

		 *       event.

	/*

	 * The Surface ACPI expects an integer and not a package. This will

	 * cause a warning in acpica/nsarguments.c, but that warning can be

	 * safely ignored.

 -- ACPI GSB OperationRegion handler -------------------------------------- */

 Command value (san_gsb_request_cv). */

 Target category. */

 Target ID. */

 Instance ID. */

 Expect-response-flag. */

 Command ID. */

 Payload length. */

 Payload. */

 Command value (should be 0x02). */

 Unknown. */

 Unknown. */

 Error message (ASCIIZ). */

 _SSH communication status. */

 _SSH payload length. */

 _SSH payload. */

 Common input. */

 RQSX input. */

 ETWL input. */

 Output. */

 GSB AttribRawProcess status. */

 GSB AttribRawProcess length. */

 Indicate success. */

		/* Base state quirk:

		 * The base state may be queried from ACPI when the EC is still

		 * suspended. In this case it will return '-EPERM'. This query

		 * will only be triggered from the ACPI lid GPE interrupt, thus

		 * we are either in laptop or studio mode (base status 0x01 or

		 * 0x02). Furthermore, we will only get here if the device (and

		 * EC) have been suspended.

		 *

		 * We now assume that the device is in laptop mode (0x01). This

		 * has the drawback that it will wake the device when unfolding

		 * it in studio mode, but it also allows us to avoid actively

		 * waiting for the EC to wake up, which may incur a notable

		 * delay.

 Handle suspended device. */

 Buffer must have at least contain the command-value. */

 -- Driver setup. --------------------------------------------------------- */

 Ignore ACPI devices that are not present. */

 Try to set up device links, ignore but log errors. */

	/*

	 * We have unregistered our event sources. Now we need to ensure that

	 * all delayed works they may have spawned are run to completion.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Driver for the LID cover switch of the Surface 3

 *

 *  Copyright (c) 2016 Red Hat Inc.

 ignore non ACPI devices */

 check for LID ACPI switch */

 ignore non SPI controllers */

 remove the hotplug context from the acpi device */

 reinstall the actual PNPC0C0D LID default handle */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Surface Platform Profile / Performance Mode driver for Surface System

 * Aggregator Module (thermal subsystem).

 *

 * Copyright (C) 2021 Maximilian Luz <luzmaximilian@gmail.com>

 This should have already been caught by platform_profile_store(). */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Surface Book (2 and later) hot-plug driver.

 *

 * Surface Book devices (can) have a hot-pluggable discrete GPU (dGPU). This

 * driver is responsible for out-of-band hot-plug event signaling on these

 * devices. It is specifically required when the hot-plug device is in D3cold

 * and can thus not generate PCIe hot-plug events itself.

 *

 * Event signaling is handled via ACPI, which will generate the appropriate

 * device-check notifications to be picked up by the PCIe hot-plug driver.

 *

 * Copyright (C) 2019-2021 Maximilian Luz <luzmaximilian@gmail.com>

 5515a847-ed55-4b27-8352-cd320e10360a */

 NOTE: Must be in order of enum shps_dsm_fn above. */

 Protects update in shps_dsm_notify_irq() */

 Figure out which IRQ we're handling. */

 We should have found our interrupt, if not: this is a bug. */

 Forward interrupt to ACPI via DSM. */

	/*

	 * Only set up interrupts that we actually need: The Surface Book 3

	 * does not have a DSM for base presence, so don't set up an interrupt

	 * for that.

 Ensure that IRQs have been fully handled and won't trigger any more. */

	/*

	 * The MSHW0153 device is also present on the Surface Laptop 3,

	 * however that doesn't have a hot-pluggable PCIe device. It also

	 * doesn't have any GPIO interrupts/pins under the MSHW0153, so filter

	 * it out here.

	/*

	 * Initialize IRQs so that we can safely call surface_hotplug_remove()

	 * on errors.

 Set up IRQs. */

 Ensure everything is up-to-date. */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Surface System Aggregator Module (SSAM) client device registry.

 *

 * Registry for non-platform/non-ACPI SSAM client devices, i.e. devices that

 * cannot be auto-detected. Provides device-hubs and performs instantiation

 * for these devices.

 *

 * Copyright (C) 2020-2021 Maximilian Luz <luzmaximilian@gmail.com>

 -- Device registry. ------------------------------------------------------ */

/*

 * SSAM device names follow the SSAM module alias, meaning they are prefixed

 * with 'ssam:', followed by domain, category, target ID, instance ID, and

 * function, each encoded as two-digit hexadecimal, separated by ':'. In other

 * words, it follows the scheme

 *

 *      ssam:dd:cc:tt:ii:ff

 *

 * Where, 'dd', 'cc', 'tt', 'ii', and 'ff' are the two-digit hexadecimal

 * values mentioned above, respectively.

 Root node. */

 Base device hub (devices attached to Surface Book 3 base). */

 AC adapter. */

 Primary battery. */

 Secondary battery (Surface Book 3). */

 Platform profile / performance-mode device. */

 DTX / detachment-system device (Surface Book 3). */

 HID keyboard (TID1). */

 HID pen stash (TID1; pen taken / stashed away evens). */

 HID touchpad (TID1). */

 HID device instance 6 (TID1, unknown HID device). */

 HID device instance 7 (TID1, unknown HID device). */

 HID system controls (TID1). */

 HID keyboard. */

 HID touchpad. */

 HID device instance 5 (unknown HID device). */

 HID keyboard (base hub). */

 HID touchpad (base hub). */

 HID device instance 5 (unknown HID device, base hub). */

 HID device instance 6 (unknown HID device, base hub). */

/*

 * Devices for 5th- and 6th-generations models:

 * - Surface Book 2,

 * - Surface Laptop 1 and 2,

 * - Surface Pro 5 and 6.

 Devices for Surface Book 3. */

 Devices for Surface Laptop 3 and 4. */

 Devices for Surface Laptop Studio. */

 Devices for Surface Laptop Go. */

 Devices for Surface Pro 7 and Surface Pro 7+. */

 TODO: Add support for keyboard cover. */

 -- Device registry helper functions. ------------------------------------- */

		/*

		 * Try to add the device specified in the firmware node. If

		 * this fails with -EINVAL, the node does not specify any SSAM

		 * device, so ignore it and continue with the next one.

 -- SSAM base-hub driver. ------------------------------------------------- */

/*

 * Some devices (especially battery) may need a bit of time to be fully usable

 * after being (re-)connected. This delay has been determined via

 * experimentation.

	/*

	 * Delay update when the base is being connected to give devices/EC

	 * some time to set up.

	/*

	 * Do not return SSAM_NOTIF_HANDLED: The event should be picked up and

	 * consumed by the detachment system driver. We're just a (more or less)

	 * silent observer.

 This notifier should run first. */

 -- SSAM platform/meta-hub driver. ---------------------------------------- */

 Surface Pro 4, 5, and 6 (OMBR < 0x10) */

 Surface Pro 6 (OMBR >= 0x10) */

 Surface Pro 7 */

 Surface Pro 7+ */

 Surface Pro 8 */

 Surface Book 2 */

 Surface Book 3 */

 Surface Laptop 1 */

 Surface Laptop 2 */

 Surface Laptop 3 (13", Intel) */

 Surface Laptop 3 (15", AMD) and 4 (15", AMD) */

 Surface Laptop 4 (13", Intel) */

 Surface Laptop Go 1 */

 Surface Laptop Studio */

	/*

	 * As we're adding the SSAM client devices as children under this device

	 * and not the SSAM controller, we need to add a device link to the

	 * controller to ensure that we remove all of our devices before the

	 * controller is removed. This also guarantees proper ordering for

	 * suspend/resume of the devices on this hub.

 -- Module initialization. ------------------------------------------------ */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Surface Book (gen. 2 and later) detachment system (DTX) driver.

 *

 * Provides a user-space interface to properly handle clipboard/tablet

 * (containing screen and processor) detachment from the base of the device

 * (containing the keyboard and optionally a discrete GPU). Allows to

 * acknowledge (to speed things up), abort (e.g. in case the dGPU is still in

 * use), or request detachment via user-space.

 *

 * Copyright (C) 2019-2021 Maximilian Luz <luzmaximilian@gmail.com>

 -- SSAM interface. ------------------------------------------------------- */

 Low battery. */

 -- Main structures. ------------------------------------------------------ */

 Guards device and controller reference. */

 Guards order of events/notifications. */

 Guards client list.                   */

 Guards FIFO buffer read access. */

 -- Firmware value translations. ------------------------------------------ */

 -- IOCTLs. --------------------------------------------------------------- */

 -- File operations. ------------------------------------------------------ */

 Initialize client. */

 Attach client. */

	/*

	 * Do not add a new client if the device has been shut down. Note that

	 * it's enough to hold the client_lock here as, during shutdown, we

	 * only acquire that lock and remove clients after marking the device

	 * as shut down.

 Detach client. */

 Free client. */

 Make sure we're not shut down. */

 Check availability, wait if necessary. */

 Need to check that we're not shut down again. */

 Try to read from FIFO. */

 We might not have gotten anything, check this here. */

 -- Event handling/forwarding. -------------------------------------------- */

/*

 * The device operation mode is not immediately updated on the EC when the

 * base has been connected, i.e. querying the device mode inside the

 * connection event callback yields an outdated value. Thus, we can only

 * determine the new tablet-mode switch and device mode values after some

 * time.

 *

 * These delays have been chosen by experimenting. We first delay on connect

 * events, then check and validate the device mode against the base state and

 * if invalid delay again by the "recheck" delay.

 Must be executed with ddev->write_lock held. */

 Validate event payload length. */

 Translate event. */

 If state has not changed: do not send new event. */

 If state has not changed: do not send new event. */

 Update device mode on base connection change. */

 -- State update functions. ----------------------------------------------- */

 Get operation mode. */

 Get base info. */

	/*

	 * In some cases (specifically when attaching the base), the device

	 * mode isn't updated right away. Thus we check if the device mode

	 * makes sense for the given base state and try again later if it

	 * doesn't.

 Avoid sending duplicate device-mode events. */

 Send SW_TABLET_MODE event. */

 Must be executed with ddev->write_lock held. */

 Prevent duplicate events. */

 Must be executed with ddev->write_lock held. */

	/*

	 * Note: This function must be called after updating the base state

	 * via __sdtx_device_state_update_base(), as we rely on the updated

	 * base state value in the validity check below.

 Prevent duplicate events. */

 Send event. */

 Send SW_TABLET_MODE event. */

 Must be executed with ddev->write_lock held. */

 Prevent duplicate events. */

 Mark everything as dirty. */

	/*

	 * Ensure that the state gets marked as dirty before continuing to

	 * query it. Necessary to ensure that clear_bit() calls in

	 * sdtx_notifier() and sdtx_device_mode_workfn() actually clear these

	 * bits if an event is received while updating the state here.

	/*

	 * If the respective dirty-bit has been cleared, an event has been

	 * received, updating this state. The queried state may thus be out of

	 * date. At this point, we can safely assume that the state provided

	 * by the event is either up to date, or we're about to receive

	 * another event updating it.

 -- Common device initialization. ----------------------------------------- */

 Basic initialization. */

	/*

	 * Get current device state. We want to guarantee that events are only

	 * sent when state actually changes. Thus we cannot use special

	 * "uninitialized" values, as that would cause problems when manually

	 * querying the state in surface_dtx_pm_complete(). I.e. we would not

	 * be able to detect state changes there if no change event has been

	 * received between driver initialization and first device suspension.

	 *

	 * Note that we also need to do this before registering the event

	 * notifier, as that may access the state values.

 Set up tablet mode switch. */

 Set up event notifier. */

 Register miscdevice. */

	/*

	 * Update device state in case it has changed between getting the

	 * initial mode and registering the event notifier.

	/*

	 * Mark device as shut-down. Prevent new clients from being added and

	 * new operations from being executed.

 Disable notifiers, prevent new events from arriving. */

 Stop mode_work, prevent access to mode_switch. */

 Stop state_work. */

 With mode_work canceled, we can unregister the mode_switch. */

 Wake up async clients. */

 Wake up blocking clients. */

	/*

	 * Wait for clients to finish their current operation. After this, the

	 * controller and device references are guaranteed to be no longer in

	 * use.

 Finally remove the misc-device. */

	/*

	 * We're now guaranteed that sdtx_device_open() won't be called any

	 * more, so we can now drop out reference.

 -- PM ops. --------------------------------------------------------------- */

	/*

	 * Normally, the EC will store events while suspended (i.e. in

	 * display-off state) and release them when resumed (i.e. transitioned

	 * to display-on state). During hibernation, however, the EC will be

	 * shut down and does not store events. Furthermore, events might be

	 * dropped during prolonged suspension (it is currently unknown how

	 * big this event buffer is and how it behaves on overruns).

	 *

	 * To prevent any problems, we update the device state here. We do

	 * this delayed to ensure that any events sent by the EC directly

	 * after resuming will be handled first. The delay below has been

	 * chosen (experimentally), so that there should be ample time for

	 * these events to be handled, before we check and, if necessary,

	 * update the state.

 CONFIG_PM_SLEEP */

 CONFIG_PM_SLEEP */

 -- Platform driver. ------------------------------------------------------ */

 Link to EC. */

 -- SSAM device driver. --------------------------------------------------- */

 CONFIG_SURFACE_AGGREGATOR_BUS */

 CONFIG_SURFACE_AGGREGATOR_BUS */

 -- Module setup. --------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * power/home/volume button support for

 * Microsoft Surface Pro 3/4 tablet.

 *

 * Copyright (c) 2015 Intel Corporation.

 * All rights reserved.

 get OEM Platform Revision

/*

 * Power button, Home button, Volume buttons support is supposed to

 * be covered by drivers/input/misc/soc_button_array.c, which is implemented

 * according to "Windows ACPI Design Guide for SoC Platforms".

 * However surface pro3 seems not to obey the specs, instead it uses

 * device VGBI(MSHW0028) for dispatching the events.

 * We choose acpi_driver rather than platform_driver/i2c_driver because

 * although VGBI has an i2c resource connected to i2c controller, it

 * is not embedded in any i2c controller's scope, thus neither platform_device

 * will be created, nor i2c_client will be enumerated, we have to use

 * acpi_driver.

 for input device */

 Power button press,release handle */

 Home button press,release handle */

 Volume up button press,release handle */

 Volume down button press,release handle */

/*

 * Surface Pro 4 and Surface Book 2 / Surface Pro 2017 use the same device

 * ID (MSHW0040) for the power/volume buttons. Make sure this is the right

 * device by checking for the _DSM method and OEM Platform Revision.

 *

 * Returns true if the driver should bind to this device, i.e. the device is

 * either MSWH0028 (Pro 3) or MSHW0040 on a Pro 4 or Book 1.

 valid revisions are nonzero

 get OEM platform revision

	/*

	 * If evaluating the _DSM fails, the method is not present. This means

	 * that we have either MSHW0028 or MSHW0040 on Pro 4 or Book 1, so we

	 * should use this driver. We use revision 0 indicating it is

	 * unavailable.

 SPDX-License-Identifier: GPL-2.0+

/*

 * SSH request transport layer.

 *

 * Copyright (C) 2019-2021 Maximilian Luz <luzmaximilian@gmail.com>

/*

 * SSH_RTL_REQUEST_TIMEOUT - Request timeout.

 *

 * Timeout as ktime_t delta for request responses. If we have not received a

 * response in this time-frame after finishing the underlying packet

 * transmission, the request will be completed with %-ETIMEDOUT as status

 * code.

/*

 * SSH_RTL_REQUEST_TIMEOUT_RESOLUTION - Request timeout granularity.

 *

 * Time-resolution for timeouts. Should be larger than one jiffy to avoid

 * direct re-scheduling of reaper work_struct.

/*

 * SSH_RTL_MAX_PENDING - Maximum number of pending requests.

 *

 * Maximum number of requests concurrently waiting to be completed (i.e.

 * waiting for the corresponding packet transmission to finish if they don't

 * have a response or waiting for a response if they have one).

/*

 * SSH_RTL_TX_BATCH - Maximum number of requests processed per work execution.

 * Used to prevent livelocking of the workqueue. Value chosen via educated

 * guess, may be adjusted.

/**

 * ssh_rtl_should_drop_response() - Error injection hook to drop request

 * responses.

 *

 * Useful to cause request transmission timeouts in the driver by dropping the

 * response to a request.

 rtl/ptl may not be set if we're canceling before submitting. */

 Find first non-locked request and remove it. */

 Remove from queue and mark as transmitting. */

 Ensure state never gets zero. */

 Get and prepare next request for transmit. */

 Add it to/mark it as pending. */

 Submit packet. */

		/*

		 * Packet has been refused due to the packet layer shutting

		 * down. Complete it here.

		/*

		 * Note: A barrier is not required here, as there are only two

		 * references in the system at this point: The one that we have,

		 * and the other one that belongs to the pending set. Due to the

		 * request being marked as "transmitting", our process is the

		 * only one allowed to remove the pending node and change the

		 * state. Normally, the task would fall to the packet callback,

		 * but as this is a path where submission failed, this callback

		 * will never be executed.

		/*

		 * If submitting the packet failed and the packet layer isn't

		 * shutting down, the packet has either been submitted/queued

		 * before (-EALREADY, which cannot happen as we have

		 * guaranteed that requests cannot be re-submitted), or the

		 * packet was marked as locked (-EINVAL). To mark the packet

		 * locked at this stage, the request, and thus the packets

		 * itself, had to have been canceled. Simply drop the

		 * reference. Cancellation itself will remove it from the set

		 * of pending requests.

	/*

	 * Try to be nice and not block/live-lock the workqueue: Run a maximum

	 * of 10 tries, then re-submit if necessary. This should not be

	 * necessary for normal execution, but guarantee it anyway.

 No more requests to process. */

			/*

			 * Packet system shutting down. No new packets can be

			 * transmitted. Return silently, the party initiating

			 * the shutdown should handle the rest.

 Out of tries, reschedule. */

/**

 * ssh_rtl_submit() - Submit a request to the transport layer.

 * @rtl:  The request transport layer.

 * @rqst: The request to submit.

 *

 * Submits a request to the transport layer. A single request may not be

 * submitted multiple times without reinitializing it.

 *

 * Return: Returns zero on success, %-EINVAL if the request type is invalid or

 * the request has been canceled prior to submission, %-EALREADY if the

 * request has already been submitted, or %-ESHUTDOWN in case the request

 * transport layer has been shut down.

	/*

	 * Ensure that requests expecting a response are sequenced. If this

	 * invariant ever changes, see the comment in ssh_rtl_complete() on what

	 * is required to be changed in the code.

	/*

	 * Try to set ptl and check if this request has already been submitted.

	 *

	 * Must be inside lock as we might run into a lost update problem

	 * otherwise: If this were outside of the lock, cancellation in

	 * ssh_rtl_cancel_nonpending() may run after we've set the ptl

	 * reference but before we enter the lock. In that case, we'd detect

	 * that the request is being added to the queue and would try to remove

	 * it from that, but removal might fail because it hasn't actually been

	 * added yet. By putting this cmpxchg in the critical section, we

	 * ensure that the queuing detection only triggers when we are already

	 * in the critical section and the remove process will wait until the

	 * push operation has been completed (via lock) due to that. Only then,

	 * we can safely try to remove it.

	/*

	 * Ensure that we set ptl reference before we continue modifying state.

	 * This is required for non-pending cancellation. This barrier is paired

	 * with the one in ssh_rtl_cancel_nonpending().

	 *

	 * By setting the ptl reference before we test for "locked", we can

	 * check if the "locked" test may have already run. See comments in

	 * ssh_rtl_cancel_nonpending() for more detail.

 Re-adjust / schedule reaper only if it is above resolution delta. */

	/*

	 * Note: The timestamp gets set only once. This happens on the packet

	 * callback. All other access to it is read-only.

	/*

	 * Ensure timestamp is set before starting the reaper. Paired with

	 * implicit barrier following check on ssh_request_get_expiration() in

	 * ssh_rtl_timeout_reap.

	/*

	 * Get request from pending based on request ID and mark it as response

	 * received and locked.

 We generally expect requests to be processed in order. */

 Simulate response timeout. */

		/*

		 * Mark as "response received" and "locked" as we're going to

		 * complete it.

 Ensure state never gets zero. */

 If the request hasn't been completed yet, we will do this now. */

	/*

	 * Make sure the request has been transmitted. In case of a sequenced

	 * request, we are guaranteed that the completion callback will run on

	 * the receiver thread directly when the ACK for the packet has been

	 * received. Similarly, this function is guaranteed to run on the

	 * receiver thread. Thus we are guaranteed that if the packet has been

	 * successfully transmitted and received an ACK, the transmitted flag

	 * has been set and is visible here.

	 *

	 * We are currently not handling unsequenced packets here, as those

	 * should never expect a response as ensured in ssh_rtl_submit. If this

	 * ever changes, one would have to test for

	 *

	 *	(r->state & (transmitting | transmitted))

	 *

	 * on unsequenced packets to determine if they could have been

	 * transmitted. There are no synchronization guarantees as in the

	 * sequenced case, since, in this case, the callback function will not

	 * run on the same thread. Thus an exact determination is impossible.

		/*

		 * NB: Timeout has already been canceled, request already been

		 * removed from pending and marked as locked and completed. As

		 * we receive a "false" response, the packet might still be

		 * queued though.

	/*

	 * NB: Timeout has already been canceled, request already been

	 * removed from pending and marked as locked and completed. The request

	 * can also not be queued any more, as it has been marked as

	 * transmitting and later transmitted. Thus no need to remove it from

	 * anywhere.

	/*

	 * Handle unsubmitted request: Try to mark the packet as locked,

	 * expecting the state to be zero (i.e. unsubmitted). Note that, if

	 * setting the state worked, we might still be adding the packet to the

	 * queue in a currently executing submit call. In that case, however,

	 * ptl reference must have been set previously, as locked is checked

	 * after setting ptl. Furthermore, when the ptl reference is set, the

	 * submission process is guaranteed to have entered the critical

	 * section. Thus only if we successfully locked this request and ptl is

	 * NULL, we have successfully removed the request, i.e. we are

	 * guaranteed that, due to the "locked" check in ssh_rtl_submit(), the

	 * packet will never be added. Otherwise, we need to try and grab it

	 * from the queue, where we are now guaranteed that the packet is or has

	 * been due to the critical section.

	 *

	 * Note that if the cmpxchg() fails, we are guaranteed that ptl has

	 * been set and is non-NULL, as states can only be nonzero after this

	 * has been set. Also note that we need to fetch the static (type)

	 * flags to ensure that they don't cause the cmpxchg() to fail.

	/*

	 * Force correct ordering with regards to state and ptl reference access

	 * to safe-guard cancellation to concurrent submission against a

	 * lost-update problem. First try to exchange state, then also check

	 * ptl if that worked. This barrier is paired with the

	 * one in ssh_rtl_submit().

	/*

	 * Note: 1) Requests cannot be re-submitted. 2) If a request is

	 * queued, it cannot be "transmitting"/"pending" yet. Thus, if we

	 * successfully remove the request here, we have removed all its

	 * occurrences in the system.

 Drop reference obtained from queue. */

 If the packet is already locked, it's going to be removed shortly. */

	/*

	 * Now that we have locked the packet, we have guaranteed that it can't

	 * be added to the system any more. If ptl is NULL, the locked

	 * check in ssh_rtl_submit() has not been run and any submission,

	 * currently in progress or called later, won't add the packet. Thus we

	 * can directly complete it.

	 *

	 * The implicit memory barrier of test_and_set_bit() should be enough

	 * to ensure that the correct order (first lock, then check ptl) is

	 * ensured. This is paired with the barrier in ssh_rtl_submit().

	/*

	 * Try to cancel the packet. If the packet has not been completed yet,

	 * this will subsequently (and synchronously) call the completion

	 * callback of the packet, which will complete the request.

	/*

	 * If the packet has been completed with success, i.e. has not been

	 * canceled by the above call, the request may not have been completed

	 * yet (may be waiting for a response). Check if we need to do this

	 * here.

/**

 * ssh_rtl_cancel() - Cancel request.

 * @rqst:    The request to cancel.

 * @pending: Whether to also cancel pending requests.

 *

 * Cancels the given request. If @pending is %false, this will not cancel

 * pending requests, i.e. requests that have already been submitted to the

 * packet layer but not been completed yet. If @pending is %true, this will

 * cancel the given request regardless of the state it is in.

 *

 * If the request has been canceled by calling this function, both completion

 * and release callbacks of the request will be executed in a reasonable

 * time-frame. This may happen during execution of this function, however,

 * there is no guarantee for this. For example, a request currently

 * transmitting will be canceled/completed only after transmission has

 * completed, and the respective callbacks will be executed on the transmitter

 * thread, which may happen during, but also some time after execution of the

 * cancel function.

 *

 * Return: Returns %true if the given request has been canceled or completed,

 * either by this function or prior to calling this function, %false

 * otherwise. If @pending is %true, this function will always return %true.

 Note: rtl may be NULL if request has not been submitted yet. */

		/*

		 * The packet may get canceled even though it has not been

		 * submitted yet. The request may still be queued. Check the

		 * queue and remove it if necessary. As the timeout would have

		 * been started in this function on success, there's no need

		 * to cancel it here.

 Update state: Mark as transmitted and clear transmitting. */

 Ensure state never gets zero. */

 If we expect a response, we just need to start the timeout. */

		/*

		 * Note: This is the only place where the timestamp gets set,

		 * all other access to it is read-only.

	/*

	 * If we don't expect a response, lock, remove, and complete the

	 * request. Note that, at this point, the request is guaranteed to have

	 * left the queue and no timeout has been started. Thus we only need to

	 * remove it from pending. If the request has already been completed (it

	 * may have been canceled) return.

	/*

	 * Mark reaper as "not pending". This is done before checking any

	 * requests to avoid lost-update type problems.

		/*

		 * Check if the timeout hasn't expired yet. Find out next

		 * expiration date to be handled after this run.

 Avoid further transitions if locked. */

		/*

		 * We have now marked the packet as locked. Thus it cannot be

		 * added to the pending or queued lists again after we've

		 * removed it here. We can therefore re-use the node of this

		 * packet temporarily.

 Cancel and complete the request. */

		/*

		 * At this point we've removed the packet from pending. This

		 * means that we've obtained the last (only) reference of the

		 * system to it. Thus we can just complete it.

		/*

		 * Drop the reference we've obtained by removing it from the

		 * pending set.

 Ensure that the reaper doesn't run again immediately. */

/**

 * ssh_request_init() - Initialize SSH request.

 * @rqst:  The request to initialize.

 * @flags: Request flags, determining the type of the request.

 * @ops:   Request operations.

 *

 * Initializes the given SSH request and underlying packet. Sets the message

 * buffer pointer to %NULL and the message buffer length to zero. This buffer

 * has to be set separately via ssh_request_set_data() before submission and

 * must contain a valid SSH request message.

 *

 * Return: Returns zero on success or %-EINVAL if the given flags are invalid.

 Unsequenced requests cannot have a response. */

/**

 * ssh_rtl_init() - Initialize request transport layer.

 * @rtl:    The request transport layer to initialize.

 * @serdev: The underlying serial device, i.e. the lower-level transport.

 * @ops:    Request transport layer operations.

 *

 * Initializes the given request transport layer and associated packet

 * transport layer. Transmitter and receiver threads must be started

 * separately via ssh_rtl_start(), after the request-layer has been

 * initialized and the lower-level serial device layer has been set up.

 *

 * Return: Returns zero on success and a nonzero error code on failure.

/**

 * ssh_rtl_destroy() - Deinitialize request transport layer.

 * @rtl: The request transport layer to deinitialize.

 *

 * Deinitializes the given request transport layer and frees resources

 * associated with it. If receiver and/or transmitter threads have been

 * started, the layer must first be shut down via ssh_rtl_shutdown() before

 * this function can be called.

/**

 * ssh_rtl_start() - Start request transmitter and receiver.

 * @rtl: The request transport layer.

 *

 * Return: Returns zero on success, a negative error code on failure.

/**

 * ssh_rtl_flush() - Flush the request transport layer.

 * @rtl:     request transport layer

 * @timeout: timeout for the flush operation in jiffies

 *

 * Queue a special flush request and wait for its completion. This request

 * will be completed after all other currently queued and pending requests

 * have been completed. Instead of a normal data packet, this request submits

 * a special flush packet, meaning that upon completion, also the underlying

 * packet transport layer has been flushed.

 *

 * Flushing the request layer guarantees that all previously submitted

 * requests have been fully completed before this call returns. Additionally,

 * flushing blocks execution of all later submitted requests until the flush

 * has been completed.

 *

 * If the caller ensures that no new requests are submitted after a call to

 * this function, the request transport layer is guaranteed to have no

 * remaining requests when this call returns. The same guarantee does not hold

 * for the packet layer, on which control packets may still be queued after

 * this call.

 *

 * Return: Returns zero on success, %-ETIMEDOUT if the flush timed out and has

 * been canceled as a result of the timeout, or %-ESHUTDOWN if the packet

 * and/or request transport layer has been shut down before this call. May

 * also return %-EINTR if the underlying packet transmission has been

 * interrupted.

/**

 * ssh_rtl_shutdown() - Shut down request transport layer.

 * @rtl: The request transport layer.

 *

 * Shuts down the request transport layer, removing and canceling all queued

 * and pending requests. Requests canceled by this operation will be completed

 * with %-ESHUTDOWN as status. Receiver and transmitter threads will be

 * stopped, the lower-level packet layer will be shutdown.

 *

 * As a result of this function, the transport layer will be marked as shut

 * down. Submission of requests after the transport layer has been shut down

 * will fail with %-ESHUTDOWN.

	/*

	 * Ensure that the layer gets marked as shut-down before actually

	 * stopping it. In combination with the check in ssh_rtl_submit(),

	 * this guarantees that no new requests can be added and all already

	 * queued requests are properly canceled.

 Remove requests from queue. */

 Ensure state never gets zero. */

	/*

	 * We have now guaranteed that the queue is empty and no more new

	 * requests can be submitted (i.e. it will stay empty). This means that

	 * calling ssh_rtl_tx_schedule() will not schedule tx.work any more. So

	 * we can simply call cancel_work_sync() on tx.work here and when that

	 * returns, we've locked it down. This also means that after this call,

	 * we don't submit any more packets to the underlying packet layer, so

	 * we can also shut that down.

	/*

	 * Shutting down the packet layer should also have canceled all

	 * requests. Thus the pending set should be empty. Attempt to handle

	 * this gracefully anyways, even though this should be dead code.

 Ensure state never gets zero. */

 Finally, cancel and complete the requests we claimed before. */

		/*

		 * We need test_and_set() because we still might compete with

		 * cancellation.

		/*

		 * Drop the reference we've obtained by removing it from the

		 * lists.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Surface System Aggregator Module bus and device integration.

 *

 * Copyright (C) 2019-2021 Maximilian Luz <luzmaximilian@gmail.com>

/**

 * ssam_device_alloc() - Allocate and initialize a SSAM client device.

 * @ctrl: The controller under which the device should be added.

 * @uid:  The UID of the device to be added.

 *

 * Allocates and initializes a new client device. The parent of the device

 * will be set to the controller device and the name will be set based on the

 * UID. Note that the device still has to be added via ssam_device_add().

 * Refer to that function for more details.

 *

 * Return: Returns the newly allocated and initialized SSAM client device, or

 * %NULL if it could not be allocated.

/**

 * ssam_device_add() - Add a SSAM client device.

 * @sdev: The SSAM client device to be added.

 *

 * Added client devices must be guaranteed to always have a valid and active

 * controller. Thus, this function will fail with %-ENODEV if the controller

 * of the device has not been initialized yet, has been suspended, or has been

 * shut down.

 *

 * The caller of this function should ensure that the corresponding call to

 * ssam_device_remove() is issued before the controller is shut down. If the

 * added device is a direct child of the controller device (default), it will

 * be automatically removed when the controller is shut down.

 *

 * By default, the controller device will become the parent of the newly

 * created client device. The parent may be changed before ssam_device_add is

 * called, but care must be taken that a) the correct suspend/resume ordering

 * is guaranteed and b) the client device does not outlive the controller,

 * i.e. that the device is removed before the controller is being shut down.

 * In case these guarantees have to be manually enforced, please refer to the

 * ssam_client_link() and ssam_client_bind() functions, which are intended to

 * set up device-links for this purpose.

 *

 * Return: Returns zero on success, a negative error code on failure.

	/*

	 * Ensure that we can only add new devices to a controller if it has

	 * been started and is not going away soon. This works in combination

	 * with ssam_controller_remove_clients to ensure driver presence for the

	 * controller device, i.e. it ensures that the controller (sdev->ctrl)

	 * is always valid and can be used for requests as long as the client

	 * device we add here is registered as child under it. This essentially

	 * guarantees that the client driver can always expect the preconditions

	 * for functions like ssam_request_sync (controller has to be started

	 * and is not suspended) to hold and thus does not have to check for

	 * them.

	 *

	 * Note that for this to work, the controller has to be a parent device.

	 * If it is not a direct parent, care has to be taken that the device is

	 * removed via ssam_device_remove(), as device_unregister does not

	 * remove child devices recursively.

/**

 * ssam_device_remove() - Remove a SSAM client device.

 * @sdev: The device to remove.

 *

 * Removes and unregisters the provided SSAM client device.

/**

 * ssam_device_id_compatible() - Check if a device ID matches a UID.

 * @id:  The device ID as potential match.

 * @uid: The device UID matching against.

 *

 * Check if the given ID is a match for the given UID, i.e. if a device with

 * the provided UID is compatible to the given ID following the match rules

 * described in its &ssam_device_id.match_flags member.

 *

 * Return: Returns %true if the given UID is compatible to the match rule

 * described by the given ID, %false otherwise.

/**

 * ssam_device_id_is_null() - Check if a device ID is null.

 * @id: The device ID to check.

 *

 * Check if a given device ID is null, i.e. all zeros. Used to check for the

 * end of ``MODULE_DEVICE_TABLE(ssam, ...)`` or similar lists.

 *

 * Return: Returns %true if the given ID represents a null ID, %false

 * otherwise.

/**

 * ssam_device_id_match() - Find the matching ID table entry for the given UID.

 * @table: The table to search in.

 * @uid:   The UID to matched against the individual table entries.

 *

 * Find the first match for the provided device UID in the provided ID table

 * and return it. Returns %NULL if no match could be found.

/**

 * ssam_device_get_match() - Find and return the ID matching the device in the

 * ID table of the bound driver.

 * @dev: The device for which to get the matching ID table entry.

 *

 * Find the fist match for the UID of the device in the ID table of the

 * currently bound driver and return it. Returns %NULL if the device does not

 * have a driver bound to it, the driver does not have match_table (i.e. it is

 * %NULL), or there is no match in the driver's match_table.

 *

 * This function essentially calls ssam_device_id_match() with the ID table of

 * the bound device driver and the UID of the device.

 *

 * Return: Returns the first match for the UID of the device in the device

 * driver's match table, or %NULL if no such match could be found.

/**

 * ssam_device_get_match_data() - Find the ID matching the device in the

 * ID table of the bound driver and return its ``driver_data`` member.

 * @dev: The device for which to get the match data.

 *

 * Find the fist match for the UID of the device in the ID table of the

 * corresponding driver and return its driver_data. Returns %NULL if the

 * device does not have a driver bound to it, the driver does not have

 * match_table (i.e. it is %NULL), there is no match in the driver's

 * match_table, or the match does not have any driver_data.

 *

 * This function essentially calls ssam_device_get_match() and, if any match

 * could be found, returns its ``struct ssam_device_id.driver_data`` member.

 *

 * Return: Returns the driver data associated with the first match for the UID

 * of the device in the device driver's match table, or %NULL if no such match

 * could be found.

/**

 * __ssam_device_driver_register() - Register a SSAM client device driver.

 * @sdrv:  The driver to register.

 * @owner: The module owning the provided driver.

 *

 * Please refer to the ssam_device_driver_register() macro for the normal way

 * to register a driver from inside its owning module.

 force drivers to async probe so I/O is possible in probe */

/**

 * ssam_device_driver_unregister - Unregister a SSAM device driver.

 * @sdrv: The driver to unregister.

/**

 * ssam_controller_remove_clients() - Remove SSAM client devices registered as

 * direct children under the given controller.

 * @ctrl: The controller to remove all direct clients for.

 *

 * Remove all SSAM client devices registered as direct children under the

 * given controller. Note that this only accounts for direct children of the

 * controller device. This does not take care of any client devices where the

 * parent device has been manually set before calling ssam_device_add. Refer

 * to ssam_device_add()/ssam_device_remove() for more details on those cases.

 *

 * To avoid new devices being added in parallel to this call, the main

 * controller lock (not statelock) must be held during this (and if

 * necessary, any subsequent deinitialization) call.

/**

 * ssam_bus_register() - Register and set-up the SSAM client device bus.

/**

 * ssam_bus_unregister() - Unregister the SSAM client device bus.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Main SSAM/SSH controller structure and functionality.

 *

 * Copyright (C) 2019-2021 Maximilian Luz <luzmaximilian@gmail.com>

 -- Safe counters. -------------------------------------------------------- */

/**

 * ssh_seq_reset() - Reset/initialize sequence ID counter.

 * @c: The counter to reset.

/**

 * ssh_seq_next() - Get next sequence ID.

 * @c: The counter providing the sequence IDs.

 *

 * Return: Returns the next sequence ID of the counter.

/**

 * ssh_rqid_reset() - Reset/initialize request ID counter.

 * @c: The counter to reset.

/**

 * ssh_rqid_next() - Get next request ID.

 * @c: The counter providing the request IDs.

 *

 * Return: Returns the next request ID of the counter, skipping any reserved

 * request IDs.

 -- Event notifier/callbacks. --------------------------------------------- */

/*

 * The notifier system is based on linux/notifier.h, specifically the SRCU

 * implementation. The difference to that is, that some bits of the notifier

 * call return value can be tracked across multiple calls. This is done so

 * that handling of events can be tracked and a warning can be issued in case

 * an event goes unhandled. The idea of that warning is that it should help

 * discover and identify new/currently unimplemented features.

/**

 * ssam_event_matches_notifier() - Test if an event matches a notifier.

 * @n: The event notifier to test against.

 * @event: The event to test.

 *

 * Return: Returns %true if the given event matches the given notifier

 * according to the rules set in the notifier's event mask, %false otherwise.

/**

 * ssam_nfblk_call_chain() - Call event notifier callbacks of the given chain.

 * @nh:    The notifier head for which the notifier callbacks should be called.

 * @event: The event data provided to the callbacks.

 *

 * Call all registered notifier callbacks in order of their priority until

 * either no notifier is left or a notifier returns a value with the

 * %SSAM_NOTIF_STOP bit set. Note that this bit is automatically set via

 * ssam_notifier_from_errno() on any non-zero error value.

 *

 * Return: Returns the notifier status value, which contains the notifier

 * status bits (%SSAM_NOTIF_HANDLED and %SSAM_NOTIF_STOP) as well as a

 * potential error value returned from the last executed notifier callback.

 * Use ssam_notifier_to_errno() to convert this value to the original error

 * value.

/**

 * ssam_nfblk_insert() - Insert a new notifier block into the given notifier

 * list.

 * @nh: The notifier head into which the block should be inserted.

 * @nb: The notifier block to add.

 *

 * Note: This function must be synchronized by the caller with respect to other

 * insert, find, and/or remove calls by holding ``struct ssam_nf.lock``.

 *

 * Return: Returns zero on success, %-EEXIST if the notifier block has already

 * been registered.

 Runs under lock, no need for RCU variant. */

/**

 * ssam_nfblk_find() - Check if a notifier block is registered on the given

 * notifier head.

 * list.

 * @nh: The notifier head on which to search.

 * @nb: The notifier block to search for.

 *

 * Note: This function must be synchronized by the caller with respect to other

 * insert, find, and/or remove calls by holding ``struct ssam_nf.lock``.

 *

 * Return: Returns true if the given notifier block is registered on the given

 * notifier head, false otherwise.

 Runs under lock, no need for RCU variant. */

/**

 * ssam_nfblk_remove() - Remove a notifier block from its notifier list.

 * @nb: The notifier block to be removed.

 *

 * Note: This function must be synchronized by the caller with respect to

 * other insert, find, and/or remove calls by holding ``struct ssam_nf.lock``.

 * Furthermore, the caller _must_ ensure SRCU synchronization by calling

 * synchronize_srcu() with ``nh->srcu`` after leaving the critical section, to

 * ensure that the removed notifier block is not in use any more.

/**

 * ssam_nf_head_init() - Initialize the given notifier head.

 * @nh: The notifier head to initialize.

/**

 * ssam_nf_head_destroy() - Deinitialize the given notifier head.

 * @nh: The notifier head to deinitialize.

 -- Event/notification registry. ------------------------------------------ */

/**

 * struct ssam_nf_refcount_key - Key used for event activation reference

 * counting.

 * @reg: The registry via which the event is enabled/disabled.

 * @id:  The ID uniquely describing the event.

/**

 * struct ssam_nf_refcount_entry - RB-tree entry for reference counting event

 * activations.

 * @node:     The node of this entry in the rb-tree.

 * @key:      The key of the event.

 * @refcount: The reference-count of the event.

 * @flags:    The flags used when enabling the event.

/**

 * ssam_nf_refcount_inc() - Increment reference-/activation-count of the given

 * event.

 * @nf:  The notifier system reference.

 * @reg: The registry used to enable/disable the event.

 * @id:  The event ID.

 *

 * Increments the reference-/activation-count associated with the specified

 * event type/ID, allocating a new entry for this event ID if necessary. A

 * newly allocated entry will have a refcount of one.

 *

 * Note: ``nf->lock`` must be held when calling this function.

 *

 * Return: Returns the refcount entry on success. Returns an error pointer

 * with %-ENOSPC if there have already been %INT_MAX events of the specified

 * ID and type registered, or %-ENOMEM if the entry could not be allocated.

/**

 * ssam_nf_refcount_dec() - Decrement reference-/activation-count of the given

 * event.

 * @nf:  The notifier system reference.

 * @reg: The registry used to enable/disable the event.

 * @id:  The event ID.

 *

 * Decrements the reference-/activation-count of the specified event,

 * returning its entry. If the returned entry has a refcount of zero, the

 * caller is responsible for freeing it using kfree().

 *

 * Note: ``nf->lock`` must be held when calling this function.

 *

 * Return: Returns the refcount entry on success or %NULL if the entry has not

 * been found.

/**

 * ssam_nf_refcount_dec_free() - Decrement reference-/activation-count of the

 * given event and free its entry if the reference count reaches zero.

 * @nf:  The notifier system reference.

 * @reg: The registry used to enable/disable the event.

 * @id:  The event ID.

 *

 * Decrements the reference-/activation-count of the specified event, freeing

 * its entry if it reaches zero.

 *

 * Note: ``nf->lock`` must be held when calling this function.

/**

 * ssam_nf_refcount_empty() - Test if the notification system has any

 * enabled/active events.

 * @nf: The notification system.

/**

 * ssam_nf_call() - Call notification callbacks for the provided event.

 * @nf:    The notifier system

 * @dev:   The associated device, only used for logging.

 * @rqid:  The request ID of the event.

 * @event: The event provided to the callbacks.

 *

 * Execute registered callbacks in order of their priority until either no

 * callback is left or a callback returns a value with the %SSAM_NOTIF_STOP

 * bit set. Note that this bit is set automatically when converting non-zero

 * error values via ssam_notifier_from_errno() to notifier values.

 *

 * Also note that any callback that could handle an event should return a value

 * with bit %SSAM_NOTIF_HANDLED set, indicating that the event does not go

 * unhandled/ignored. In case no registered callback could handle an event,

 * this function will emit a warning.

 *

 * In case a callback failed, this function will emit an error message.

/**

 * ssam_nf_init() - Initialize the notifier system.

 * @nf: The notifier system to initialize.

/**

 * ssam_nf_destroy() - Deinitialize the notifier system.

 * @nf: The notifier system to deinitialize.

 -- Event/async request completion system. -------------------------------- */

/*

 * SSAM_CPLT_WQ_BATCH - Maximum number of event item completions executed per

 * work execution. Used to prevent livelocking of the workqueue. Value chosen

 * via educated guess, may be adjusted.

/*

 * SSAM_EVENT_ITEM_CACHE_PAYLOAD_LEN - Maximum payload length for a cached

 * &struct ssam_event_item.

 *

 * This length has been chosen to be accommodate standard touchpad and

 * keyboard input events. Events with larger payloads will be allocated

 * separately.

/**

 * ssam_event_item_cache_init() - Initialize the event item cache.

/**

 * ssam_event_item_cache_destroy() - Deinitialize the event item cache.

/**

 * ssam_event_item_free() - Free the provided event item.

 * @item: The event item to free.

/**

 * ssam_event_item_alloc() - Allocate an event item with the given payload size.

 * @len:   The event payload length.

 * @flags: The flags used for allocation.

 *

 * Allocate an event item with the given payload size, preferring allocation

 * from the event item cache if the payload is small enough (i.e. smaller than

 * %SSAM_EVENT_ITEM_CACHE_PAYLOAD_LEN). Sets the item operations and payload

 * length values. The item free callback (``ops.free``) should not be

 * overwritten after this call.

 *

 * Return: Returns the newly allocated event item.

/**

 * ssam_event_queue_push() - Push an event item to the event queue.

 * @q:    The event queue.

 * @item: The item to add.

/**

 * ssam_event_queue_pop() - Pop the next event item from the event queue.

 * @q: The event queue.

 *

 * Returns and removes the next event item from the queue. Returns %NULL If

 * there is no event item left.

/**

 * ssam_event_queue_is_empty() - Check if the event queue is empty.

 * @q: The event queue.

/**

 * ssam_cplt_get_event_queue() - Get the event queue for the given parameters.

 * @cplt: The completion system on which to look for the queue.

 * @tid:  The target ID of the queue.

 * @rqid: The request ID representing the event ID for which to get the queue.

 *

 * Return: Returns the event queue corresponding to the event type described

 * by the given parameters. If the request ID does not represent an event,

 * this function returns %NULL. If the target ID is not supported, this

 * function will fall back to the default target ID (``tid = 1``).

/**

 * ssam_cplt_submit() - Submit a work item to the completion system workqueue.

 * @cplt: The completion system.

 * @work: The work item to submit.

/**

 * ssam_cplt_submit_event() - Submit an event to the completion system.

 * @cplt: The completion system.

 * @item: The event item to submit.

 *

 * Submits the event to the completion system by queuing it on the event item

 * queue and queuing the respective event queue work item on the completion

 * workqueue, which will eventually complete the event.

 *

 * Return: Returns zero on success, %-EINVAL if there is no event queue that

 * can handle the given event item.

/**

 * ssam_cplt_flush() - Flush the completion system.

 * @cplt: The completion system.

 *

 * Flush the completion system by waiting until all currently submitted work

 * items have been completed.

 *

 * Note: This function does not guarantee that all events will have been

 * handled once this call terminates. In case of a larger number of

 * to-be-completed events, the event queue work function may re-schedule its

 * work item, which this flush operation will ignore.

 *

 * This operation is only intended to, during normal operation prior to

 * shutdown, try to complete most events and requests to get them out of the

 * system while the system is still fully operational. It does not aim to

 * provide any guarantee that all of them have been handled.

 Limit number of processed events to avoid livelocking. */

/**

 * ssam_event_queue_init() - Initialize an event queue.

 * @cplt: The completion system on which the queue resides.

 * @evq:  The event queue to initialize.

/**

 * ssam_cplt_init() - Initialize completion system.

 * @cplt: The completion system to initialize.

 * @dev:  The device used for logging.

/**

 * ssam_cplt_destroy() - Deinitialize the completion system.

 * @cplt: The completion system to deinitialize.

 *

 * Deinitialize the given completion system and ensure that all pending, i.e.

 * yet-to-be-completed, event items and requests have been handled.

	/*

	 * Note: destroy_workqueue ensures that all currently queued work will

	 * be fully completed and the workqueue drained. This means that this

	 * call will inherently also free any queued ssam_event_items, thus we

	 * don't have to take care of that here explicitly.

 -- Main SSAM device structures. ------------------------------------------ */

/**

 * ssam_controller_device() - Get the &struct device associated with this

 * controller.

 * @c: The controller for which to get the device.

 *

 * Return: Returns the &struct device associated with this controller,

 * providing its lower-level transport.

	/*

	 * The lock-call here is to satisfy lockdep. At this point we really

	 * expect this to be the last remaining reference to the controller.

	 * Anything else is a bug.

/**

 * ssam_controller_get() - Increment reference count of controller.

 * @c: The controller.

 *

 * Return: Returns the controller provided as input.

/**

 * ssam_controller_put() - Decrement reference count of controller.

 * @c: The controller.

/**

 * ssam_controller_statelock() - Lock the controller against state transitions.

 * @c: The controller to lock.

 *

 * Lock the controller against state transitions. Holding this lock guarantees

 * that the controller will not transition between states, i.e. if the

 * controller is in state "started", when this lock has been acquired, it will

 * remain in this state at least until the lock has been released.

 *

 * Multiple clients may concurrently hold this lock. In other words: The

 * ``statelock`` functions represent the read-lock part of a r/w-semaphore.

 * Actions causing state transitions of the controller must be executed while

 * holding the write-part of this r/w-semaphore (see ssam_controller_lock()

 * and ssam_controller_unlock() for that).

 *

 * See ssam_controller_stateunlock() for the corresponding unlock function.

/**

 * ssam_controller_stateunlock() - Unlock controller state transitions.

 * @c: The controller to unlock.

 *

 * See ssam_controller_statelock() for the corresponding lock function.

/**

 * ssam_controller_lock() - Acquire the main controller lock.

 * @c: The controller to lock.

 *

 * This lock must be held for any state transitions, including transition to

 * suspend/resumed states and during shutdown. See ssam_controller_statelock()

 * for more details on controller locking.

 *

 * See ssam_controller_unlock() for the corresponding unlock function.

/*

 * ssam_controller_unlock() - Release the main controller lock.

 * @c: The controller to unlock.

 *

 * See ssam_controller_lock() for the corresponding lock function.

 d5e383e1-d892-4a76-89fc-f6aaae7ed5b5 */

	/*

	 * The _DSM function is only present on newer models. It is not

	 * present on 5th and 6th generation devices (i.e. up to and including

	 * Surface Pro 6, Surface Laptop 2, Surface Book 2).

	 *

	 * If the _DSM is not present, indicate that no function is supported.

	 * This will result in default values being set.

 Not supported, leave *ret at its default value */

/**

 * ssam_controller_caps_load_from_acpi() - Load controller capabilities from

 * ACPI _DSM.

 * @handle: The handle of the ACPI controller/SSH device.

 * @caps:   Where to store the capabilities in.

 *

 * Initializes the given controller capabilities with default values, then

 * checks and, if the respective _DSM functions are available, loads the

 * actual capabilities from the _DSM.

 *

 * Return: Returns zero on success, a negative error code on failure.

 Set defaults. */

 Pre-load supported DSM functions. */

 Load actual values from ACPI, if present. */

/**

 * ssam_controller_init() - Initialize SSAM controller.

 * @ctrl:   The controller to initialize.

 * @serdev: The serial device representing the underlying data transport.

 *

 * Initializes the given controller. Does neither start receiver nor

 * transmitter threads. After this call, the controller has to be hooked up to

 * the serdev core separately via &struct serdev_device_ops, relaying calls to

 * ssam_controller_receive_buf() and ssam_controller_write_wakeup(). Once the

 * controller has been hooked up, transmitter and receiver threads may be

 * started via ssam_controller_start(). These setup steps need to be completed

 * before controller can be used for requests.

 Initialize event/request completion system. */

 Initialize request and packet transport layers. */

	/*

	 * Set state via write_once even though we expect to be in an

	 * exclusive context, due to smoke-testing in

	 * ssam_request_sync_submit().

/**

 * ssam_controller_start() - Start the receiver and transmitter threads of the

 * controller.

 * @ctrl: The controller.

 *

 * Note: When this function is called, the controller should be properly

 * hooked up to the serdev core via &struct serdev_device_ops. Please refer

 * to ssam_controller_init() for more details on controller initialization.

 *

 * This function must be called with the main controller lock held (i.e. by

 * calling ssam_controller_lock()).

	/*

	 * Set state via write_once even though we expect to be locked/in an

	 * exclusive context, due to smoke-testing in

	 * ssam_request_sync_submit().

/*

 * SSAM_CTRL_SHUTDOWN_FLUSH_TIMEOUT - Timeout for flushing requests during

 * shutdown.

 *

 * Chosen to be larger than one full request timeout, including packets timing

 * out. This value should give ample time to complete any outstanding requests

 * during normal operation and account for the odd package timeout.

/**

 * ssam_controller_shutdown() - Shut down the controller.

 * @ctrl: The controller.

 *

 * Shuts down the controller by flushing all pending requests and stopping the

 * transmitter and receiver threads. All requests submitted after this call

 * will fail with %-ESHUTDOWN. While it is discouraged to do so, this function

 * is safe to use in parallel with ongoing request submission.

 *

 * In the course of this shutdown procedure, all currently registered

 * notifiers will be unregistered. It is, however, strongly recommended to not

 * rely on this behavior, and instead the party registering the notifier

 * should unregister it before the controller gets shut down, e.g. via the

 * SSAM bus which guarantees client devices to be removed before a shutdown.

 *

 * Note that events may still be pending after this call, but, due to the

 * notifiers being unregistered, these events will be dropped when the

 * controller is subsequently destroyed via ssam_controller_destroy().

 *

 * This function must be called with the main controller lock held (i.e. by

 * calling ssam_controller_lock()).

	/*

	 * Try to flush pending events and requests while everything still

	 * works. Note: There may still be packets and/or requests in the

	 * system after this call (e.g. via control packets submitted by the

	 * packet transport layer or flush timeout / failure, ...). Those will

	 * be handled with the ssh_rtl_shutdown() call below.

 Try to flush all currently completing requests and events. */

	/*

	 * We expect all notifiers to have been removed by the respective client

	 * driver that set them up at this point. If this warning occurs, some

	 * client driver has not done that...

	/*

	 * Nevertheless, we should still take care of drivers that don't behave

	 * well. Thus disable all enabled events, unregister all notifiers.

	/*

	 * Cancel remaining requests. Ensure no new ones can be queued and stop

	 * threads.

	/*

	 * Set state via write_once even though we expect to be locked/in an

	 * exclusive context, due to smoke-testing in

	 * ssam_request_sync_submit().

/**

 * ssam_controller_destroy() - Destroy the controller and free its resources.

 * @ctrl: The controller.

 *

 * Ensures that all resources associated with the controller get freed. This

 * function should only be called after the controller has been stopped via

 * ssam_controller_shutdown(). In general, this function should not be called

 * directly. The only valid place to call this function directly is during

 * initialization, before the controller has been fully initialized and passed

 * to other processes. This function is called automatically when the

 * reference count of the controller reaches zero.

 *

 * This function must be called with the main controller lock held (i.e. by

 * calling ssam_controller_lock()).

	/*

	 * Note: New events could still have been received after the previous

	 * flush in ssam_controller_shutdown, before the request transport layer

	 * has been shut down. At this point, after the shutdown, we can be sure

	 * that no new events will be queued. The call to ssam_cplt_destroy will

	 * ensure that those remaining are being completed and freed.

 Actually free resources. */

	/*

	 * Set state via write_once even though we expect to be locked/in an

	 * exclusive context, due to smoke-testing in

	 * ssam_request_sync_submit().

/**

 * ssam_controller_suspend() - Suspend the controller.

 * @ctrl: The controller to suspend.

 *

 * Marks the controller as suspended. Note that display-off and D0-exit

 * notifications have to be sent manually before transitioning the controller

 * into the suspended state via this function.

 *

 * See ssam_controller_resume() for the corresponding resume function.

 *

 * Return: Returns %-EINVAL if the controller is currently not in the

 * "started" state.

	/*

	 * Set state via write_once even though we're locked, due to

	 * smoke-testing in ssam_request_sync_submit().

/**

 * ssam_controller_resume() - Resume the controller from suspend.

 * @ctrl: The controller to resume.

 *

 * Resume the controller from the suspended state it was put into via

 * ssam_controller_suspend(). This function does not issue display-on and

 * D0-entry notifications. If required, those have to be sent manually after

 * this call.

 *

 * Return: Returns %-EINVAL if the controller is currently not suspended.

	/*

	 * Set state via write_once even though we're locked, due to

	 * smoke-testing in ssam_request_sync_submit().

 -- Top-level request interface ------------------------------------------- */

/**

 * ssam_request_write_data() - Construct and write SAM request message to

 * buffer.

 * @buf:  The buffer to write the data to.

 * @ctrl: The controller via which the request will be sent.

 * @spec: The request data and specification.

 *

 * Constructs a SAM/SSH request message and writes it to the provided buffer.

 * The request and transport counters, specifically RQID and SEQ, will be set

 * in this call. These counters are obtained from the controller. It is thus

 * only valid to send the resulting message via the controller specified here.

 *

 * For calculation of the required buffer size, refer to the

 * SSH_COMMAND_MESSAGE_LENGTH() macro.

 *

 * Return: Returns the number of bytes used in the buffer on success. Returns

 * %-EINVAL if the payload length provided in the request specification is too

 * large (larger than %SSH_COMMAND_MAX_PAYLOAD_SIZE) or if the provided buffer

 * is too small.

 Handle requests without a response. */

/**

 * ssam_request_sync_alloc() - Allocate a synchronous request.

 * @payload_len: The length of the request payload.

 * @flags:       Flags used for allocation.

 * @rqst:        Where to store the pointer to the allocated request.

 * @buffer:      Where to store the buffer descriptor for the message buffer of

 *               the request.

 *

 * Allocates a synchronous request with corresponding message buffer. The

 * request still needs to be initialized ssam_request_sync_init() before

 * it can be submitted, and the message buffer data must still be set to the

 * returned buffer via ssam_request_sync_set_data() after it has been filled,

 * if need be with adjusted message length.

 *

 * After use, the request and its corresponding message buffer should be freed

 * via ssam_request_sync_free(). The buffer must not be freed separately.

 *

 * Return: Returns zero on success, %-ENOMEM if the request could not be

 * allocated.

/**

 * ssam_request_sync_free() - Free a synchronous request.

 * @rqst: The request to be freed.

 *

 * Free a synchronous request and its corresponding buffer allocated with

 * ssam_request_sync_alloc(). Do not use for requests allocated on the stack

 * or via any other function.

 *

 * Warning: The caller must ensure that the request is not in use any more.

 * I.e. the caller must ensure that it has the only reference to the request

 * and the request is not currently pending. This means that the caller has

 * either never submitted the request, request submission has failed, or the

 * caller has waited until the submitted request has been completed via

 * ssam_request_sync_wait().

/**

 * ssam_request_sync_init() - Initialize a synchronous request struct.

 * @rqst:  The request to initialize.

 * @flags: The request flags.

 *

 * Initializes the given request struct. Does not initialize the request

 * message data. This has to be done explicitly after this call via

 * ssam_request_sync_set_data() and the actual message data has to be written

 * via ssam_request_write_data().

 *

 * Return: Returns zero on success or %-EINVAL if the given flags are invalid.

/**

 * ssam_request_sync_submit() - Submit a synchronous request.

 * @ctrl: The controller with which to submit the request.

 * @rqst: The request to submit.

 *

 * Submit a synchronous request. The request has to be initialized and

 * properly set up, including response buffer (may be %NULL if no response is

 * expected) and command message data. This function does not wait for the

 * request to be completed.

 *

 * If this function succeeds, ssam_request_sync_wait() must be used to ensure

 * that the request has been completed before the response data can be

 * accessed and/or the request can be freed. On failure, the request may

 * immediately be freed.

 *

 * This function may only be used if the controller is active, i.e. has been

 * initialized and not suspended.

	/*

	 * This is only a superficial check. In general, the caller needs to

	 * ensure that the controller is initialized and is not (and does not

	 * get) suspended during use, i.e. until the request has been completed

	 * (if _absolutely_ necessary, by use of ssam_controller_statelock/

	 * ssam_controller_stateunlock, but something like ssam_client_link

	 * should be preferred as this needs to last until the request has been

	 * completed).

	 *

	 * Note that it is actually safe to use this function while the

	 * controller is in the process of being shut down (as ssh_rtl_submit

	 * is safe with regards to this), but it is generally discouraged to do

	 * so.

/**

 * ssam_request_sync() - Execute a synchronous request.

 * @ctrl: The controller via which the request will be submitted.

 * @spec: The request specification and payload.

 * @rsp:  The response buffer.

 *

 * Allocates a synchronous request with its message data buffer on the heap

 * via ssam_request_sync_alloc(), fully initializes it via the provided

 * request specification, submits it, and finally waits for its completion

 * before freeing it and returning its status.

 *

 * Return: Returns the status of the request or any failure during setup.

/**

 * ssam_request_sync_with_buffer() - Execute a synchronous request with the

 * provided buffer as back-end for the message buffer.

 * @ctrl: The controller via which the request will be submitted.

 * @spec: The request specification and payload.

 * @rsp:  The response buffer.

 * @buf:  The buffer for the request message data.

 *

 * Allocates a synchronous request struct on the stack, fully initializes it

 * using the provided buffer as message data buffer, submits it, and then

 * waits for its completion before returning its status. The

 * SSH_COMMAND_MESSAGE_LENGTH() macro can be used to compute the required

 * message buffer size.

 *

 * This function does essentially the same as ssam_request_sync(), but instead

 * of dynamically allocating the request and message data buffer, it uses the

 * provided message data buffer and stores the (small) request struct on the

 * heap.

 *

 * Return: Returns the status of the request or any failure during setup.

 -- Internal SAM requests. ------------------------------------------------ */

/**

 * struct ssh_notification_params - Command payload to enable/disable SSH

 * notifications.

 * @target_category: The target category for which notifications should be

 *                   enabled/disabled.

 * @flags:           Flags determining how notifications are being sent.

 * @request_id:      The request ID that is used to send these notifications.

 * @instance_id:     The specific instance in the given target category for

 *                   which notifications should be enabled.

 Only allow RQIDs that lie within the event spectrum. */

/**

 * ssam_ssh_event_enable() - Enable SSH event.

 * @ctrl:  The controller for which to enable the event.

 * @reg:   The event registry describing what request to use for enabling and

 *         disabling the event.

 * @id:    The event identifier.

 * @flags: The event flags.

 *

 * Enables the specified event on the EC. This function does not manage

 * reference counting of enabled events and is basically only a wrapper for

 * the raw EC request. If the specified event is already enabled, the EC will

 * ignore this request.

 *

 * Return: Returns the status of the executed SAM request (zero on success and

 * negative on direct failure) or %-EPROTO if the request response indicates a

 * failure.

/**

 * ssam_ssh_event_disable() - Disable SSH event.

 * @ctrl:  The controller for which to disable the event.

 * @reg:   The event registry describing what request to use for enabling and

 *         disabling the event (must be same as used when enabling the event).

 * @id:    The event identifier.

 * @flags: The event flags (likely ignored for disabling of events).

 *

 * Disables the specified event on the EC. This function does not manage

 * reference counting of enabled events and is basically only a wrapper for

 * the raw EC request. If the specified event is already disabled, the EC will

 * ignore this request.

 *

 * Return: Returns the status of the executed SAM request (zero on success and

 * negative on direct failure) or %-EPROTO if the request response indicates a

 * failure.

 -- Wrappers for internal SAM requests. ----------------------------------- */

/**

 * ssam_get_firmware_version() - Get the SAM/EC firmware version.

 * @ctrl:    The controller.

 * @version: Where to store the version number.

 *

 * Return: Returns zero on success or the status of the executed SAM request

 * if that request failed.

/**

 * ssam_ctrl_notif_display_off() - Notify EC that the display has been turned

 * off.

 * @ctrl: The controller.

 *

 * Notify the EC that the display has been turned off and the driver may enter

 * a lower-power state. This will prevent events from being sent directly.

 * Rather, the EC signals an event by pulling the wakeup GPIO high for as long

 * as there are pending events. The events then need to be manually released,

 * one by one, via the GPIO callback request. All pending events accumulated

 * during this state can also be released by issuing the display-on

 * notification, e.g. via ssam_ctrl_notif_display_on(), which will also reset

 * the GPIO.

 *

 * On some devices, specifically ones with an integrated keyboard, the keyboard

 * backlight will be turned off by this call.

 *

 * This function will only send the display-off notification command if

 * display notifications are supported by the EC. Currently all known devices

 * support these notifications.

 *

 * Use ssam_ctrl_notif_display_on() to reverse the effects of this function.

 *

 * Return: Returns zero on success or if no request has been executed, the

 * status of the executed SAM request if that request failed, or %-EPROTO if

 * an unexpected response has been received.

/**

 * ssam_ctrl_notif_display_on() - Notify EC that the display has been turned on.

 * @ctrl: The controller.

 *

 * Notify the EC that the display has been turned back on and the driver has

 * exited its lower-power state. This notification is the counterpart to the

 * display-off notification sent via ssam_ctrl_notif_display_off() and will

 * reverse its effects, including resetting events to their default behavior.

 *

 * This function will only send the display-on notification command if display

 * notifications are supported by the EC. Currently all known devices support

 * these notifications.

 *

 * See ssam_ctrl_notif_display_off() for more details.

 *

 * Return: Returns zero on success or if no request has been executed, the

 * status of the executed SAM request if that request failed, or %-EPROTO if

 * an unexpected response has been received.

/**

 * ssam_ctrl_notif_d0_exit() - Notify EC that the driver/device exits the D0

 * power state.

 * @ctrl: The controller

 *

 * Notifies the EC that the driver prepares to exit the D0 power state in

 * favor of a lower-power state. Exact effects of this function related to the

 * EC are currently unknown.

 *

 * This function will only send the D0-exit notification command if D0-state

 * notifications are supported by the EC. Only newer Surface generations

 * support these notifications.

 *

 * Use ssam_ctrl_notif_d0_entry() to reverse the effects of this function.

 *

 * Return: Returns zero on success or if no request has been executed, the

 * status of the executed SAM request if that request failed, or %-EPROTO if

 * an unexpected response has been received.

/**

 * ssam_ctrl_notif_d0_entry() - Notify EC that the driver/device enters the D0

 * power state.

 * @ctrl: The controller

 *

 * Notifies the EC that the driver has exited a lower-power state and entered

 * the D0 power state. Exact effects of this function related to the EC are

 * currently unknown.

 *

 * This function will only send the D0-entry notification command if D0-state

 * notifications are supported by the EC. Only newer Surface generations

 * support these notifications.

 *

 * See ssam_ctrl_notif_d0_exit() for more details.

 *

 * Return: Returns zero on success or if no request has been executed, the

 * status of the executed SAM request if that request failed, or %-EPROTO if

 * an unexpected response has been received.

 -- Top-level event registry interface. ----------------------------------- */

/**

 * ssam_nf_refcount_enable() - Enable event for reference count entry if it has

 * not already been enabled.

 * @ctrl:  The controller to enable the event on.

 * @entry: The reference count entry for the event to be enabled.

 * @flags: The flags used for enabling the event on the EC.

 *

 * Enable the event associated with the given reference count entry if the

 * reference count equals one, i.e. the event has not previously been enabled.

 * If the event has already been enabled (i.e. reference count not equal to

 * one), check that the flags used for enabling match and warn about this if

 * they do not.

 *

 * This does not modify the reference count itself, which is done with

 * ssam_nf_refcount_inc() / ssam_nf_refcount_dec().

 *

 * Note: ``nf->lock`` must be held when calling this function.

 *

 * Return: Returns zero on success. If the event is enabled by this call,

 * returns the status of the event-enable EC command.

/**

 * ssam_nf_refcount_disable_free() - Disable event for reference count entry if it is

 * no longer in use and free the corresponding entry.

 * @ctrl:  The controller to disable the event on.

 * @entry: The reference count entry for the event to be disabled.

 * @flags: The flags used for enabling the event on the EC.

 *

 * If the reference count equals zero, i.e. the event is no longer requested by

 * any client, the event will be disabled and the corresponding reference count

 * entry freed. The reference count entry must not be used any more after a

 * call to this function.

 *

 * Also checks if the flags used for disabling the event match the flags used

 * for enabling the event and warns if they do not (regardless of reference

 * count).

 *

 * This does not modify the reference count itself, which is done with

 * ssam_nf_refcount_inc() / ssam_nf_refcount_dec().

 *

 * Note: ``nf->lock`` must be held when calling this function.

 *

 * Return: Returns zero on success. If the event is disabled by this call,

 * returns the status of the event-enable EC command.

/**

 * ssam_notifier_register() - Register an event notifier.

 * @ctrl: The controller to register the notifier on.

 * @n:    The event notifier to register.

 *

 * Register an event notifier. Increment the usage counter of the associated

 * SAM event if the notifier is not marked as an observer. If the event is not

 * marked as an observer and is currently not enabled, it will be enabled

 * during this call. If the notifier is marked as an observer, no attempt will

 * be made at enabling any event and no reference count will be modified.

 *

 * Notifiers marked as observers do not need to be associated with one specific

 * event, i.e. as long as no event matching is performed, only the event target

 * category needs to be set.

 *

 * Return: Returns zero on success, %-ENOSPC if there have already been

 * %INT_MAX notifiers for the event ID/type associated with the notifier block

 * registered, %-ENOMEM if the corresponding event entry could not be

 * allocated. If this is the first time that a notifier block is registered

 * for the specific associated event, returns the status of the event-enable

 * EC-command.

/**

 * ssam_notifier_unregister() - Unregister an event notifier.

 * @ctrl: The controller the notifier has been registered on.

 * @n:    The event notifier to unregister.

 *

 * Unregister an event notifier. Decrement the usage counter of the associated

 * SAM event if the notifier is not marked as an observer. If the usage counter

 * reaches zero, the event will be disabled.

 *

 * Return: Returns zero on success, %-ENOENT if the given notifier block has

 * not been registered on the controller. If the given notifier block was the

 * last one associated with its specific event, returns the status of the

 * event-disable EC-command.

	/*

	 * If this is an observer notifier, do not attempt to disable the

	 * event, just remove it.

			/*

			 * If this does not return an entry, there's a logic

			 * error somewhere: The notifier block is registered,

			 * but the event refcount entry is not there. Remove

			 * the notifier block anyways.

/**

 * ssam_controller_event_enable() - Enable the specified event.

 * @ctrl:  The controller to enable the event for.

 * @reg:   The event registry to use for enabling the event.

 * @id:    The event ID specifying the event to be enabled.

 * @flags: The SAM event flags used for enabling the event.

 *

 * Increment the event reference count of the specified event. If the event has

 * not been enabled previously, it will be enabled by this call.

 *

 * Note: In general, ssam_notifier_register() with a non-observer notifier

 * should be preferred for enabling/disabling events, as this will guarantee

 * proper ordering and event forwarding in case of errors during event

 * enabling/disabling.

 *

 * Return: Returns zero on success, %-ENOSPC if the reference count for the

 * specified event has reached its maximum, %-ENOMEM if the corresponding event

 * entry could not be allocated. If this is the first time that this event has

 * been enabled (i.e. the reference count was incremented from zero to one by

 * this call), returns the status of the event-enable EC-command.

/**

 * ssam_controller_event_disable() - Disable the specified event.

 * @ctrl:  The controller to disable the event for.

 * @reg:   The event registry to use for disabling the event.

 * @id:    The event ID specifying the event to be disabled.

 * @flags: The flags used when enabling the event.

 *

 * Decrement the reference count of the specified event. If the reference count

 * reaches zero, the event will be disabled.

 *

 * Note: In general, ssam_notifier_register()/ssam_notifier_unregister() with a

 * non-observer notifier should be preferred for enabling/disabling events, as

 * this will guarantee proper ordering and event forwarding in case of errors

 * during event enabling/disabling.

 *

 * Return: Returns zero on success, %-ENOENT if the given event has not been

 * enabled on the controller. If the reference count of the event reaches zero

 * during this call, returns the status of the event-disable EC-command.

/**

 * ssam_notifier_disable_registered() - Disable events for all registered

 * notifiers.

 * @ctrl: The controller for which to disable the notifiers/events.

 *

 * Disables events for all currently registered notifiers. In case of an error

 * (EC command failing), all previously disabled events will be restored and

 * the error code returned.

 *

 * This function is intended to disable all events prior to hibernation entry.

 * See ssam_notifier_restore_registered() to restore/re-enable all events

 * disabled with this function.

 *

 * Note that this function will not disable events for notifiers registered

 * after calling this function. It should thus be made sure that no new

 * notifiers are going to be added after this call and before the corresponding

 * call to ssam_notifier_restore_registered().

 *

 * Return: Returns zero on success. In case of failure returns the error code

 * returned by the failed EC command to disable an event.

/**

 * ssam_notifier_restore_registered() - Restore/re-enable events for all

 * registered notifiers.

 * @ctrl: The controller for which to restore the notifiers/events.

 *

 * Restores/re-enables all events for which notifiers have been registered on

 * the given controller. In case of a failure, the error is logged and the

 * function continues to try and enable the remaining events.

 *

 * This function is intended to restore/re-enable all registered events after

 * hibernation. See ssam_notifier_disable_registered() for the counter part

 * disabling the events and more details.

 Ignore errors, will get logged in call. */

/**

 * ssam_notifier_is_empty() - Check if there are any registered notifiers.

 * @ctrl: The controller to check on.

 *

 * Return: Returns %true if there are currently no notifiers registered on the

 * controller, %false otherwise.

/**

 * ssam_notifier_unregister_all() - Unregister all currently registered

 * notifiers.

 * @ctrl: The controller to unregister the notifiers on.

 *

 * Unregisters all currently registered notifiers. This function is used to

 * ensure that all notifiers will be unregistered and associated

 * entries/resources freed when the controller is being shut down.

 Ignore errors, will get logged in call. */

 -- Wakeup IRQ. ----------------------------------------------------------- */

	/*

	 * Note: Proper wakeup detection is currently unimplemented.

	 *       When the EC is in display-off or any other non-D0 state, it

	 *       does not send events/notifications to the host. Instead it

	 *       signals that there are events available via the wakeup IRQ.

	 *       This driver is responsible for calling back to the EC to

	 *       release these events one-by-one.

	 *

	 *       This IRQ should not cause a full system resume by its own.

	 *       Instead, events should be handled by their respective subsystem

	 *       drivers, which in turn should signal whether a full system

	 *       resume should be performed.

	 *

	 * TODO: Send GPIO callback command repeatedly to EC until callback

	 *       returns 0x00. Return flag of callback is "has more events".

	 *       Each time the command is sent, one event is "released". Once

	 *       all events have been released (return = 0x00), the GPIO is

	 *       re-armed. Detect wakeup events during this process, go back to

	 *       sleep if no wakeup event has been received.

/**

 * ssam_irq_setup() - Set up SAM EC wakeup-GPIO interrupt.

 * @ctrl: The controller for which the IRQ should be set up.

 *

 * Set up an IRQ for the wakeup-GPIO pin of the SAM EC. This IRQ can be used

 * to wake the device from a low power state.

 *

 * Note that this IRQ can only be triggered while the EC is in the display-off

 * state. In this state, events are not sent to the host in the usual way.

 * Instead the wakeup-GPIO gets pulled to "high" as long as there are pending

 * events and these events need to be released one-by-one via the GPIO

 * callback request, either until there are no events left and the GPIO is

 * reset, or all at once by transitioning the EC out of the display-off state,

 * which will also clear the GPIO.

 *

 * Not all events, however, should trigger a full system wakeup. Instead the

 * driver should, if necessary, inspect and forward each event to the

 * corresponding subsystem, which in turn should decide if the system needs to

 * be woken up. This logic has not been implemented yet, thus wakeup by this

 * IRQ should be disabled by default to avoid spurious wake-ups, caused, for

 * example, by the remaining battery percentage changing. Refer to comments in

 * this function and comments in the corresponding IRQ handler for more

 * details on how this should be implemented.

 *

 * See also ssam_ctrl_notif_display_off() and ssam_ctrl_notif_display_off()

 * for functions to transition the EC into and out of the display-off state as

 * well as more details on it.

 *

 * The IRQ is disabled by default and has to be enabled before it can wake up

 * the device from suspend via ssam_irq_arm_for_wakeup(). On teardown, the IRQ

 * should be freed via ssam_irq_free().

	/*

	 * The actual GPIO interrupt is declared in ACPI as TRIGGER_HIGH.

	 * However, the GPIO line only gets reset by sending the GPIO callback

	 * command to SAM (or alternatively the display-on notification). As

	 * proper handling for this interrupt is not implemented yet, leaving

	 * the IRQ at TRIGGER_HIGH would cause an IRQ storm (as the callback

	 * never gets sent and thus the line never gets reset). To avoid this,

	 * mark the IRQ as TRIGGER_RISING for now, only creating a single

	 * interrupt, and let the SAM resume callback during the controller

	 * resume process clear it.

/**

 * ssam_irq_free() - Free SAM EC wakeup-GPIO interrupt.

 * @ctrl: The controller for which the IRQ should be freed.

 *

 * Free the wakeup-GPIO IRQ previously set-up via ssam_irq_setup().

/**

 * ssam_irq_arm_for_wakeup() - Arm the EC IRQ for wakeup, if enabled.

 * @ctrl: The controller for which the IRQ should be armed.

 *

 * Sets up the IRQ so that it can be used to wake the device. Specifically,

 * this function enables the irq and then, if the device is allowed to wake up

 * the system, calls enable_irq_wake(). See ssam_irq_disarm_wakeup() for the

 * corresponding function to disable the IRQ.

 *

 * This function is intended to arm the IRQ before entering S2idle suspend.

 *

 * Note: calls to ssam_irq_arm_for_wakeup() and ssam_irq_disarm_wakeup() must

 * be balanced.

/**

 * ssam_irq_disarm_wakeup() - Disarm the wakeup IRQ.

 * @ctrl: The controller for which the IRQ should be disarmed.

 *

 * Disarm the IRQ previously set up for wake via ssam_irq_arm_for_wakeup().

 *

 * This function is intended to disarm the IRQ after exiting S2idle suspend.

 *

 * Note: calls to ssam_irq_arm_for_wakeup() and ssam_irq_disarm_wakeup() must

 * be balanced.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Surface Serial Hub (SSH) driver for communication with the Surface/System

 * Aggregator Module (SSAM/SAM).

 *

 * Provides access to a SAM-over-SSH connected EC via a controller device.

 * Handles communication via requests as well as enabling, disabling, and

 * relaying of events.

 *

 * Copyright (C) 2019-2021 Maximilian Luz <luzmaximilian@gmail.com>

 -- Static controller reference. ------------------------------------------ */

/*

 * Main controller reference. The corresponding lock must be held while

 * accessing (reading/writing) the reference.

/**

 * ssam_get_controller() - Get reference to SSAM controller.

 *

 * Returns a reference to the SSAM controller of the system or %NULL if there

 * is none, it hasn't been set up yet, or it has already been unregistered.

 * This function automatically increments the reference count of the

 * controller, thus the calling party must ensure that ssam_controller_put()

 * is called when it doesn't need the controller any more.

/**

 * ssam_try_set_controller() - Try to set the main controller reference.

 * @ctrl: The controller to which the reference should point.

 *

 * Set the main controller reference to the given pointer if the reference

 * hasn't been set already.

 *

 * Return: Returns zero on success or %-EEXIST if the reference has already

 * been set.

/**

 * ssam_clear_controller() - Remove/clear the main controller reference.

 *

 * Clears the main controller reference, i.e. sets it to %NULL. This function

 * should be called before the controller is shut down.

/**

 * ssam_client_link() - Link an arbitrary client device to the controller.

 * @c: The controller to link to.

 * @client: The client device.

 *

 * Link an arbitrary client device to the controller by creating a device link

 * between it as consumer and the controller device as provider. This function

 * can be used for non-SSAM devices (or SSAM devices not registered as child

 * under the controller) to guarantee that the controller is valid for as long

 * as the driver of the client device is bound, and that proper suspend and

 * resume ordering is guaranteed.

 *

 * The device link does not have to be destructed manually. It is removed

 * automatically once the driver of the client device unbinds.

 *

 * Return: Returns zero on success, %-ENODEV if the controller is not ready or

 * going to be removed soon, or %-ENOMEM if the device link could not be

 * created for other reasons.

	/*

	 * Return -ENODEV if supplier driver is on its way to be removed. In

	 * this case, the controller won't be around for much longer and the

	 * device link is not going to save us any more, as unbinding is

	 * already in progress.

/**

 * ssam_client_bind() - Bind an arbitrary client device to the controller.

 * @client: The client device.

 *

 * Link an arbitrary client device to the controller by creating a device link

 * between it as consumer and the main controller device as provider. This

 * function can be used for non-SSAM devices to guarantee that the controller

 * returned by this function is valid for as long as the driver of the client

 * device is bound, and that proper suspend and resume ordering is guaranteed.

 *

 * This function does essentially the same as ssam_client_link(), except that

 * it first fetches the main controller reference, then creates the link, and

 * finally returns this reference. Note that this function does not increment

 * the reference counter of the controller, as, due to the link, the

 * controller lifetime is assured as long as the driver of the client device

 * is bound.

 *

 * It is not valid to use the controller reference obtained by this method

 * outside of the driver bound to the client device at the time of calling

 * this function, without first incrementing the reference count of the

 * controller via ssam_controller_get(). Even after doing this, care must be

 * taken that requests are only submitted and notifiers are only

 * (un-)registered when the controller is active and not suspended. In other

 * words: The device link only lives as long as the client driver is bound and

 * any guarantees enforced by this link (e.g. active controller state) can

 * only be relied upon as long as this link exists and may need to be enforced

 * in other ways afterwards.

 *

 * The created device link does not have to be destructed manually. It is

 * removed automatically once the driver of the client device unbinds.

 *

 * Return: Returns the controller on success, an error pointer with %-ENODEV

 * if the controller is not present, not ready or going to be removed soon, or

 * %-ENOMEM if the device link could not be created for other reasons.

	/*

	 * Note that we can drop our controller reference in both success and

	 * failure cases: On success, we have bound the controller lifetime

	 * inherently to the client driver lifetime, i.e. it the controller is

	 * now guaranteed to outlive the client driver. On failure, we're not

	 * going to use the controller any more.

 -- Glue layer (serdev_device -> ssam_controller). ------------------------ */

 -- SysFS and misc. ------------------------------------------------------- */

 -- ACPI based device setup. ---------------------------------------------- */

 Set up serdev device. */

 serdev currently only supports RTSCTS flow control. */

 Set RTSCTS flow control. */

 serdev currently only supports EVEN/ODD parity. */

 We've found the resource and are done. */

 -- Power management. ----------------------------------------------------- */

	/*

	 * Try to disable notifiers, signal display-off and D0-exit, ignore any

	 * errors.

	 *

	 * Note: It has not been established yet if this is actually

	 * necessary/useful for shutdown.

	/*

	 * Try to signal display-off, This will quiesce events.

	 *

	 * Note: Signaling display-off/display-on should normally be done from

	 * some sort of display state notifier. As that is not available,

	 * signal it here.

	/*

	 * Try to signal display-on. This will restore events.

	 *

	 * Note: Signaling display-off/display-on should normally be done from

	 * some sort of display state notifier. As that is not available,

	 * signal it here.

	/*

	 * Try to signal D0-exit, enable IRQ wakeup if specified. Abort on

	 * error.

	/*

	 * Try to disable IRQ wakeup (if specified) and signal D0-entry. In

	 * case of errors, log them and try to restore normal operation state

	 * as far as possible.

	 *

	 * Note: Signaling display-off/display-on should normally be done from

	 * some sort of display state notifier. As that is not available,

	 * signal it here.

	/*

	 * During hibernation image creation, we only have to ensure that the

	 * EC doesn't send us any events. This is done via the display-off

	 * and D0-exit notifications. Note that this sets up the wakeup IRQ

	 * on the EC side, however, we have disabled it by default on our side

	 * and won't enable it here.

	 *

	 * See ssam_serial_hub_poweroff() for more details on the hibernation

	 * process.

	/*

	 * When entering hibernation and powering off the system, the EC, at

	 * least on some models, may disable events. Without us taking care of

	 * that, this leads to events not being enabled/restored when the

	 * system resumes from hibernation, resulting SAM-HID subsystem devices

	 * (i.e. keyboard, touchpad) not working, AC-plug/AC-unplug events being

	 * gone, etc.

	 *

	 * To avoid these issues, we disable all registered events here (this is

	 * likely not actually required) and restore them during the drivers PM

	 * restore callback.

	 *

	 * Wakeup from the EC interrupt is not supported during hibernation,

	 * so don't arm the IRQ here.

	/*

	 * Ignore but log errors, try to restore state as much as possible in

	 * case of failures. See ssam_serial_hub_poweroff() for more details on

	 * the hibernation process.

 CONFIG_PM_SLEEP */

 CONFIG_PM_SLEEP */

 -- Device/driver setup. -------------------------------------------------- */

 Allocate controller. */

 Initialize controller. */

 Set up serdev device. */

 Start controller. */

	/*

	 * Initial SAM requests: Log version and notify default/init power

	 * states.

 Set up IRQ. */

 Finally, set main controller reference. */

 Currently, we're the only provider. */

	/*

	 * TODO: The EC can wake up the system via the associated GPIO interrupt

	 *       in multiple situations. One of which is the remaining battery

	 *       capacity falling below a certain threshold. Normally, we should

	 *       use the device_init_wakeup function, however, the EC also seems

	 *       to have other reasons for waking up the system and it seems

	 *       that Windows has additional checks whether the system should be

	 *       resumed. In short, this causes some spurious unwanted wake-ups.

	 *       For now let's thus default power/wakeup to false.

 Clear static reference so that no one else can get a new one. */

 Disable and free IRQ. */

 Remove all client devices. */

 Act as if suspending to silence events. */

 Shut down controller and remove serdev device reference from it. */

 Shut down actual transport. */

 Drop our controller reference. */

 -- Module setup. --------------------------------------------------------- */

 SPDX-License-Identifier: GPL-2.0+

/*

 * SSH packet transport layer.

 *

 * Copyright (C) 2019-2021 Maximilian Luz <luzmaximilian@gmail.com>

/*

 * To simplify reasoning about the code below, we define a few concepts. The

 * system below is similar to a state-machine for packets, however, there are

 * too many states to explicitly write them down. To (somewhat) manage the

 * states and packets we rely on flags, reference counting, and some simple

 * concepts. State transitions are triggered by actions.

 *

 * >> Actions <<

 *

 * - submit

 * - transmission start (process next item in queue)

 * - transmission finished (guaranteed to never be parallel to transmission

 *   start)

 * - ACK received

 * - NAK received (this is equivalent to issuing re-submit for all pending

 *   packets)

 * - timeout (this is equivalent to re-issuing a submit or canceling)

 * - cancel (non-pending and pending)

 *

 * >> Data Structures, Packet Ownership, General Overview <<

 *

 * The code below employs two main data structures: The packet queue,

 * containing all packets scheduled for transmission, and the set of pending

 * packets, containing all packets awaiting an ACK.

 *

 * Shared ownership of a packet is controlled via reference counting. Inside

 * the transport system are a total of five packet owners:

 *

 * - the packet queue,

 * - the pending set,

 * - the transmitter thread,

 * - the receiver thread (via ACKing), and

 * - the timeout work item.

 *

 * Normal operation is as follows: The initial reference of the packet is

 * obtained by submitting the packet and queuing it. The receiver thread takes

 * packets from the queue. By doing this, it does not increment the refcount

 * but takes over the reference (removing it from the queue). If the packet is

 * sequenced (i.e. needs to be ACKed by the client), the transmitter thread

 * sets-up the timeout and adds the packet to the pending set before starting

 * to transmit it. As the timeout is handled by a reaper task, no additional

 * reference for it is needed. After the transmit is done, the reference held

 * by the transmitter thread is dropped. If the packet is unsequenced (i.e.

 * does not need an ACK), the packet is completed by the transmitter thread

 * before dropping that reference.

 *

 * On receival of an ACK, the receiver thread removes and obtains the

 * reference to the packet from the pending set. The receiver thread will then

 * complete the packet and drop its reference.

 *

 * On receival of a NAK, the receiver thread re-submits all currently pending

 * packets.

 *

 * Packet timeouts are detected by the timeout reaper. This is a task,

 * scheduled depending on the earliest packet timeout expiration date,

 * checking all currently pending packets if their timeout has expired. If the

 * timeout of a packet has expired, it is re-submitted and the number of tries

 * of this packet is incremented. If this number reaches its limit, the packet

 * will be completed with a failure.

 *

 * On transmission failure (such as repeated packet timeouts), the completion

 * callback is immediately run by on thread on which the error was detected.

 *

 * To ensure that a packet eventually leaves the system it is marked as

 * "locked" directly before it is going to be completed or when it is

 * canceled. Marking a packet as "locked" has the effect that passing and

 * creating new references of the packet is disallowed. This means that the

 * packet cannot be added to the queue, the pending set, and the timeout, or

 * be picked up by the transmitter thread or receiver thread. To remove a

 * packet from the system it has to be marked as locked and subsequently all

 * references from the data structures (queue, pending) have to be removed.

 * References held by threads will eventually be dropped automatically as

 * their execution progresses.

 *

 * Note that the packet completion callback is, in case of success and for a

 * sequenced packet, guaranteed to run on the receiver thread, thus providing

 * a way to reliably identify responses to the packet. The packet completion

 * callback is only run once and it does not indicate that the packet has

 * fully left the system (for this, one should rely on the release method,

 * triggered when the reference count of the packet reaches zero). In case of

 * re-submission (and with somewhat unlikely timing), it may be possible that

 * the packet is being re-transmitted while the completion callback runs.

 * Completion will occur both on success and internal error, as well as when

 * the packet is canceled.

 *

 * >> Flags <<

 *

 * Flags are used to indicate the state and progression of a packet. Some flags

 * have stricter guarantees than other:

 *

 * - locked

 *   Indicates if the packet is locked. If the packet is locked, passing and/or

 *   creating additional references to the packet is forbidden. The packet thus

 *   may not be queued, dequeued, or removed or added to the pending set. Note

 *   that the packet state flags may still change (e.g. it may be marked as

 *   ACKed, transmitted, ...).

 *

 * - completed

 *   Indicates if the packet completion callback has been executed or is about

 *   to be executed. This flag is used to ensure that the packet completion

 *   callback is only run once.

 *

 * - queued

 *   Indicates if a packet is present in the submission queue or not. This flag

 *   must only be modified with the queue lock held, and must be coherent to the

 *   presence of the packet in the queue.

 *

 * - pending

 *   Indicates if a packet is present in the set of pending packets or not.

 *   This flag must only be modified with the pending lock held, and must be

 *   coherent to the presence of the packet in the pending set.

 *

 * - transmitting

 *   Indicates if the packet is currently transmitting. In case of

 *   re-transmissions, it is only safe to wait on the "transmitted" completion

 *   after this flag has been set. The completion will be set both in success

 *   and error case.

 *

 * - transmitted

 *   Indicates if the packet has been transmitted. This flag is not cleared by

 *   the system, thus it indicates the first transmission only.

 *

 * - acked

 *   Indicates if the packet has been acknowledged by the client. There are no

 *   other guarantees given. For example, the packet may still be canceled

 *   and/or the completion may be triggered an error even though this bit is

 *   set. Rely on the status provided to the completion callback instead.

 *

 * - canceled

 *   Indicates if the packet has been canceled from the outside. There are no

 *   other guarantees given. Specifically, the packet may be completed by

 *   another part of the system before the cancellation attempts to complete it.

 *

 * >> General Notes <<

 *

 * - To avoid deadlocks, if both queue and pending locks are required, the

 *   pending lock must be acquired before the queue lock.

 *

 * - The packet priority must be accessed only while holding the queue lock.

 *

 * - The packet timestamp must be accessed only while holding the pending

 *   lock.

/*

 * SSH_PTL_MAX_PACKET_TRIES - Maximum transmission attempts for packet.

 *

 * Maximum number of transmission attempts per sequenced packet in case of

 * time-outs. Must be smaller than 16. If the packet times out after this

 * amount of tries, the packet will be completed with %-ETIMEDOUT as status

 * code.

/*

 * SSH_PTL_TX_TIMEOUT - Packet transmission timeout.

 *

 * Timeout in jiffies for packet transmission via the underlying serial

 * device. If transmitting the packet takes longer than this timeout, the

 * packet will be completed with -ETIMEDOUT. It will not be re-submitted.

/*

 * SSH_PTL_PACKET_TIMEOUT - Packet response timeout.

 *

 * Timeout as ktime_t delta for ACKs. If we have not received an ACK in this

 * time-frame after starting transmission, the packet will be re-submitted.

/*

 * SSH_PTL_PACKET_TIMEOUT_RESOLUTION - Packet timeout granularity.

 *

 * Time-resolution for timeouts. Should be larger than one jiffy to avoid

 * direct re-scheduling of reaper work_struct.

/*

 * SSH_PTL_MAX_PENDING - Maximum number of pending packets.

 *

 * Maximum number of sequenced packets concurrently waiting for an ACK.

 * Packets marked as blocking will not be transmitted while this limit is

 * reached.

/*

 * SSH_PTL_RX_BUF_LEN - Evaluation-buffer size in bytes.

/*

 * SSH_PTL_RX_FIFO_LEN - Fifo input-buffer size in bytes.

/**

 * ssh_ptl_should_drop_ack_packet() - Error injection hook to drop ACK packets.

 *

 * Useful to test detection and handling of automated re-transmits by the EC.

 * Specifically of packets that the EC considers not-ACKed but the driver

 * already considers ACKed (due to dropped ACK). In this case, the EC

 * re-transmits the packet-to-be-ACKed and the driver should detect it as

 * duplicate/already handled. Note that the driver should still send an ACK

 * for the re-transmitted packet.

/**

 * ssh_ptl_should_drop_nak_packet() - Error injection hook to drop NAK packets.

 *

 * Useful to test/force automated (timeout-based) re-transmit by the EC.

 * Specifically, packets that have not reached the driver completely/with valid

 * checksums. Only useful in combination with receival of (injected) bad data.

/**

 * ssh_ptl_should_drop_dsq_packet() - Error injection hook to drop sequenced

 * data packet.

 *

 * Useful to test re-transmit timeout of the driver. If the data packet has not

 * been ACKed after a certain time, the driver should re-transmit the packet up

 * to limited number of times defined in SSH_PTL_MAX_PACKET_TRIES.

/**

 * ssh_ptl_should_fail_write() - Error injection hook to make

 * serdev_device_write() fail.

 *

 * Hook to simulate errors in serdev_device_write when transmitting packets.

/**

 * ssh_ptl_should_corrupt_tx_data() - Error injection hook to simulate invalid

 * data being sent to the EC.

 *

 * Hook to simulate corrupt/invalid data being sent from host (driver) to EC.

 * Causes the packet data to be actively corrupted by overwriting it with

 * pre-defined values, such that it becomes invalid, causing the EC to respond

 * with a NAK packet. Useful to test handling of NAK packets received by the

 * driver.

/**

 * ssh_ptl_should_corrupt_rx_syn() - Error injection hook to simulate invalid

 * data being sent by the EC.

 *

 * Hook to simulate invalid SYN bytes, i.e. an invalid start of messages and

 * test handling thereof in the driver.

/**

 * ssh_ptl_should_corrupt_rx_data() - Error injection hook to simulate invalid

 * data being sent by the EC.

 *

 * Hook to simulate invalid data/checksum of the message frame and test handling

 * thereof in the driver.

 Ignore packets that don't carry any data (i.e. flush). */

 Ignore packets that don't carry any data (i.e. flush). */

 Only allow sequenced data packets to be modified. */

	/*

	 * NB: The value 0xb3 has been chosen more or less randomly so that it

	 * doesn't have any (major) overlap with the SYN bytes (aa 55) and is

	 * non-trivial (i.e. non-zero, non-0xff).

 Check if there actually is something to corrupt. */

 Set second byte of SYN to "random" value. */

 Ignore incomplete messages, will get handled once it's complete. */

 Ignore incomplete messages, part 2. */

	/*

	 * Flip bits in first byte of payload checksum. This is basically

	 * equivalent to a payload/frame data error without us having to worry

	 * about (the, arguably pretty small, probability of) accidental

	 * checksum collisions.

 CONFIG_SURFACE_AGGREGATOR_ERROR_INJECTION */

 CONFIG_SURFACE_AGGREGATOR_ERROR_INJECTION */

/**

 * ssh_packet_get() - Increment reference count of packet.

 * @packet: The packet to increment the reference count of.

 *

 * Increments the reference count of the given packet. See ssh_packet_put()

 * for the counter-part of this function.

 *

 * Return: Returns the packet provided as input.

/**

 * ssh_packet_put() - Decrement reference count of packet.

 * @packet: The packet to decrement the reference count of.

 *

 * If the reference count reaches zero, the ``release`` callback specified in

 * the packet's &struct ssh_packet_ops, i.e. ``packet->ops->release``, will be

 * called.

 *

 * See ssh_packet_get() for the counter-part of this function.

/**

 * ssh_packet_init() - Initialize SSH packet.

 * @packet:   The packet to initialize.

 * @type:     Type-flags of the packet.

 * @priority: Priority of the packet. See SSH_PACKET_PRIORITY() for details.

 * @ops:      Packet operations.

 *

 * Initializes the given SSH packet. Sets the transmission buffer pointer to

 * %NULL and the transmission buffer length to zero. For data-type packets,

 * this buffer has to be set separately via ssh_packet_set_data() before

 * submission, and must contain a valid SSH message, i.e. frame with optional

 * payload of any type.

/**

 * ssh_ctrl_packet_cache_init() - Initialize the control packet cache.

/**

 * ssh_ctrl_packet_cache_destroy() - Deinitialize the control packet cache.

/**

 * ssh_ctrl_packet_alloc() - Allocate packet from control packet cache.

 * @packet: Where the pointer to the newly allocated packet should be stored.

 * @buffer: The buffer corresponding to this packet.

 * @flags:  Flags used for allocation.

 *

 * Allocates a packet and corresponding transport buffer from the control

 * packet cache. Sets the packet's buffer reference to the allocated buffer.

 * The packet must be freed via ssh_ctrl_packet_free(), which will also free

 * the corresponding buffer. The corresponding buffer must not be freed

 * separately. Intended to be used with %ssh_ptl_ctrl_packet_ops as packet

 * operations.

 *

 * Return: Returns zero on success, %-ENOMEM if the allocation failed.

/**

 * ssh_ctrl_packet_free() - Free packet allocated from control packet cache.

 * @p: The packet to free.

 Re-adjust / schedule reaper only if it is above resolution delta. */

 Must be called with queue lock held. */

	/*

	 * Ensure that we write the priority in one go via WRITE_ONCE() so we

	 * can access it via READ_ONCE() for tracing. Note that other access

	 * is guarded by the queue lock, so no need to use READ_ONCE() there.

 Must be called with queue lock held. */

	/*

	 * We generally assume that there are less control (ACK/NAK) packets

	 * and re-submitted data packets as there are normal data packets (at

	 * least in situations in which many packets are queued; if there

	 * aren't many packets queued the decision on how to iterate should be

	 * basically irrelevant; the number of control/data packets is more or

	 * less limited via the maximum number of pending packets). Thus, when

	 * inserting a control or re-submitted data packet, (determined by

	 * their priority), we search from front to back. Normal data packets

	 * are, usually queued directly at the tail of the queue, so for those

	 * search from back to front.

 Must be called with queue lock held. */

 Avoid further transitions when canceling/completing. */

 If this packet has already been queued, do not add it. */

	/*

	 * Note: We can get the time for the timestamp before acquiring the

	 * lock as this is the only place we're setting it and this function

	 * is called only from the transmitter thread. Thus it is not possible

	 * to overwrite the timestamp with an outdated value below.

 If we are canceling/completing this packet, do not add it. */

	/*

	 * On re-submission, the packet has already been added the pending

	 * set. We still need to update the timestamp as the packet timeout is

	 * reset for each (re-)submission.

 In case it is already pending (e.g. re-submission), do not add it. */

 Arm/update timeout reaper. */

 Warning: Does not check/set "completed" bit. */

	/*

	 * A call to this function should in general be preceded by

	 * set_bit(SSH_PACKET_SF_LOCKED_BIT, &p->flags) to avoid re-adding the

	 * packet to the structures it's going to be removed from.

	 *

	 * The set_bit call does not need explicit memory barriers as the

	 * implicit barrier of the test_and_set_bit() call below ensure that the

	 * flag is visible before we actually attempt to remove the packet.

 We can always process non-blocking packets. */

 If we are already waiting for this packet, send it again. */

 Otherwise: Check if we have the capacity to send. */

		/*

		 * If we are canceling or completing this packet, ignore it.

		 * It's going to be removed from this queue shortly.

		/*

		 * Packets should be ordered non-blocking/to-be-resent first.

		 * If we cannot process this packet, assume that we can't

		 * process any following packet either and abort.

		/*

		 * We are allowed to change the state now. Remove it from the

		 * queue and mark it as being transmitted.

 Ensure that state never gets zero. */

		/*

		 * Update number of tries. This directly influences the

		 * priority in case the packet is re-submitted (e.g. via

		 * timeout/NAK). Note that all reads and writes to the

		 * priority after the first submission are guarded by the

		 * queue lock.

 Transition state to "transmitted". */

 Ensure that state never gets zero. */

 If the packet is unsequenced, we're done: Lock and complete. */

	/*

	 * Notify that a packet transmission has finished. In general we're only

	 * waiting for one packet (if any), so wake_up_all should be fine.

 Transmission failure: Lock the packet and try to complete it. */

 Ensure that state never gets zero. */

	/*

	 * Notify that a packet transmission has finished. In general we're only

	 * waiting for one packet (if any), so wake_up_all should be fine.

	/*

	 * Ensure completion is cleared before continuing to avoid lost update

	 * problems.

	/*

	 * Ensure completion is cleared before continuing to avoid lost update

	 * problems.

 Note: Flush-packets don't have any data. */

 Error injection: drop packet to simulate transmission problem. */

 Error injection: simulate invalid packet data. */

 Try to get the next packet. */

 If no packet can be processed, we are done. */

 Transfer and complete packet. */

/**

 * ssh_ptl_tx_wakeup_packet() - Wake up packet transmitter thread for new

 * packet.

 * @ptl: The packet transport layer.

 *

 * Wakes up the packet transmitter thread, notifying it that a new packet has

 * arrived and is ready for transfer. If the packet transport layer has been

 * shut down, calls to this function will be ignored.

/**

 * ssh_ptl_tx_start() - Start packet transmitter thread.

 * @ptl: The packet transport layer.

 *

 * Return: Returns zero on success, a negative error code on failure.

/**

 * ssh_ptl_tx_stop() - Stop packet transmitter thread.

 * @ptl: The packet transport layer.

 *

 * Return: Returns zero on success, a negative error code on failure.

 Tell thread to stop. */

		/*

		 * Wake up thread in case it is paused. Do not use wakeup

		 * helpers as this may be called when the shutdown bit has

		 * already been set.

 Finally, wait for thread to stop. */

		/*

		 * We generally expect packets to be in order, so first packet

		 * to be added to pending is first to be sent, is first to be

		 * ACKed.

		/*

		 * In case we receive an ACK while handling a transmission

		 * error completion. The packet will be removed shortly.

		/*

		 * Mark the packet as ACKed and remove it from pending by

		 * removing its node and decrementing the pending counter.

 Ensure that state never gets zero. */

			/*

			 * The packet has not been found in the set of pending

			 * packets.

			/*

			 * The packet is pending, but we are not allowed to take

			 * it because it has been locked.

	/*

	 * It is possible that the packet has been transmitted, but the state

	 * has not been updated from "transmitting" to "transmitted" yet.

	 * In that case, we need to wait for this transition to occur in order

	 * to determine between success or failure.

	 *

	 * On transmission failure, the packet will be locked after this call.

	 * On success, the transmitted bit will be set.

	/*

	 * The packet will already be locked in case of a transmission error or

	 * cancellation. Let the transmitter or cancellation issuer complete the

	 * packet.

/**

 * ssh_ptl_submit() - Submit a packet to the transport layer.

 * @ptl: The packet transport layer to submit the packet to.

 * @p:   The packet to submit.

 *

 * Submits a new packet to the transport layer, queuing it to be sent. This

 * function should not be used for re-submission.

 *

 * Return: Returns zero on success, %-EINVAL if a packet field is invalid or

 * the packet has been canceled prior to submission, %-EALREADY if the packet

 * has already been submitted, or %-ESHUTDOWN if the packet transport layer

 * has been shut down.

 Validate packet fields. */

	/*

	 * The ptl reference only gets set on or before the first submission.

	 * After the first submission, it has to be read-only.

	 *

	 * Note that ptl may already be set from upper-layer request

	 * submission, thus we cannot expect it to be NULL.

 Submitted on different PTL. */

/*

 * __ssh_ptl_resubmit() - Re-submit a packet to the transport layer.

 * @packet: The packet to re-submit.

 *

 * Re-submits the given packet: Checks if it can be re-submitted and queues it

 * if it can, resetting the packet timestamp in the process. Must be called

 * with the pending lock held.

 *

 * Return: Returns %-ECANCELED if the packet has exceeded its number of tries,

 * %-EINVAL if the packet has been locked, %-EALREADY if the packet is already

 * on the queue, and %-ESHUTDOWN if the transmission layer has been shut down.

 Check if the packet is out of tries. */

		/*

		 * An error here indicates that the packet has either already

		 * been queued, been locked, or the transport layer is being

		 * shut down. In all cases: Ignore the error.

	/*

	 * Note: We deliberately do not remove/attempt to cancel and complete

	 * packets that are out of tires in this function. The packet will be

	 * eventually canceled and completed by the timeout. Removing the packet

	 * here could lead to overly eager cancellation if the packet has not

	 * been re-transmitted yet but the tries-counter already updated (i.e

	 * ssh_ptl_tx_next() removed the packet from the queue and updated the

	 * counter, but re-transmission for the last try has not actually

	 * started yet).

 Re-queue all pending packets. */

		/*

		 * Re-submission fails if the packet is out of tries, has been

		 * locked, is already queued, or the layer is being shut down.

		 * No need to re-schedule tx-thread in those cases.

/**

 * ssh_ptl_cancel() - Cancel a packet.

 * @p: The packet to cancel.

 *

 * Cancels a packet. There are no guarantees on when completion and release

 * callbacks will be called. This may occur during execution of this function

 * or may occur at any point later.

 *

 * Note that it is not guaranteed that the packet will actually be canceled if

 * the packet is concurrently completed by another process. The only guarantee

 * of this function is that the packet will be completed (with success,

 * failure, or cancellation) and released from the transport layer in a

 * reasonable time-frame.

 *

 * May be called before the packet has been submitted, in which case any later

 * packet submission fails.

	/*

	 * Lock packet and commit with memory barrier. If this packet has

	 * already been locked, it's going to be removed and completed by

	 * another party, which should have precedence.

	/*

	 * By marking the packet as locked and employing the implicit memory

	 * barrier of test_and_set_bit, we have guaranteed that, at this point,

	 * the packet cannot be added to the queue any more.

	 *

	 * In case the packet has never been submitted, packet->ptl is NULL. If

	 * the packet is currently being submitted, packet->ptl may be NULL or

	 * non-NULL. Due marking the packet as locked above and committing with

	 * the memory barrier, we have guaranteed that, if packet->ptl is NULL,

	 * the packet will never be added to the queue. If packet->ptl is

	 * non-NULL, we don't have any guarantees.

 Must be called with pending lock held */

	/*

	 * Mark reaper as "not pending". This is done before checking any

	 * packets to avoid lost-update type problems.

		/*

		 * Check if the timeout hasn't expired yet. Find out next

		 * expiration date to be handled after this run.

		/*

		 * Re-submission fails if the packet is out of tries, has been

		 * locked, is already queued, or the layer is being shut down.

		 * No need to re-schedule tx-thread in those cases.

 Go to next packet if this packet is not out of tries. */

 No more tries left: Cancel the packet. */

		/*

		 * If someone else has locked the packet already, don't use it

		 * and let the other party complete it.

		/*

		 * We have now marked the packet as locked. Thus it cannot be

		 * added to the pending list again after we've removed it here.

		 * We can therefore re-use the pending_node of this packet

		 * temporarily.

 Cancel and complete the packet. */

		/*

		 * Drop the reference we've obtained by removing it from

		 * the pending set.

 Ensure that reaper doesn't run again immediately. */

	/*

	 * Check if SEQ has been seen recently (i.e. packet was

	 * re-transmitted and we should ignore it).

 Update list of blocked sequence IDs. */

 Error injection: Modify data to simulate corrupt SYN bytes. */

 Find SYN. */

		/*

		 * We expect aligned.ptr == source->ptr. If this is not the

		 * case, then aligned.ptr > source->ptr and we've encountered

		 * some unexpected data where we'd expect the start of a new

		 * message (i.e. the SYN sequence).

		 *

		 * This can happen when a CRC check for the previous message

		 * failed and we start actively searching for the next one

		 * (via the call to sshp_find_syn() above), or the first bytes

		 * of a message got dropped or corrupted.

		 *

		 * In any case, we issue a warning, send a NAK to the EC to

		 * request re-transmission of any data we haven't acknowledged

		 * yet, and finally, skip everything up to the next SYN

		 * sequence.

		/*

		 * Notes:

		 * - This might send multiple NAKs in case the communication

		 *   starts with an invalid SYN and is broken down into multiple

		 *   pieces. This should generally be handled fine, we just

		 *   might receive duplicate data in this case, which is

		 *   detected when handling data frames.

		 * - This path will also be executed on invalid CRCs: When an

		 *   invalid CRC is encountered, the code below will skip data

		 *   until directly after the SYN. This causes the search for

		 *   the next SYN, which is generally not placed directly after

		 *   the last one.

		 *

		 *   Open question: Should we send this in case of invalid

		 *   payload CRCs if the frame-type is non-sequential (current

		 *   implementation) or should we drop that frame without

		 *   telling the EC?

 Error injection: Modify data to simulate corruption. */

 Parse and validate frame. */

 Invalid frame: skip to next SYN. */

 Not enough data. */

 Copy from fifo to evaluation buffer. */

 Parse until we need more bytes or buffer is empty. */

 Need more bytes. */

 Throw away the evaluated parts. */

/**

 * ssh_ptl_rx_start() - Start packet transport layer receiver thread.

 * @ptl: The packet transport layer.

 *

 * Return: Returns zero on success, a negative error code on failure.

/**

 * ssh_ptl_rx_stop() - Stop packet transport layer receiver thread.

 * @ptl: The packet transport layer.

 *

 * Return: Returns zero on success, a negative error code on failure.

/**

 * ssh_ptl_rx_rcvbuf() - Push data from lower-layer transport to the packet

 * layer.

 * @ptl: The packet transport layer.

 * @buf: Pointer to the data to push to the layer.

 * @n:   Size of the data to push to the layer, in bytes.

 *

 * Pushes data from a lower-layer transport to the receiver fifo buffer of the

 * packet layer and notifies the receiver thread. Calls to this function are

 * ignored once the packet layer has been shut down.

 *

 * Return: Returns the number of bytes transferred (positive or zero) on

 * success. Returns %-ESHUTDOWN if the packet layer has been shut down.

/**

 * ssh_ptl_shutdown() - Shut down the packet transport layer.

 * @ptl: The packet transport layer.

 *

 * Shuts down the packet transport layer, removing and canceling all queued

 * and pending packets. Packets canceled by this operation will be completed

 * with %-ESHUTDOWN as status. Receiver and transmitter threads will be

 * stopped.

 *

 * As a result of this function, the transport layer will be marked as shut

 * down. Submission of packets after the transport layer has been shut down

 * will fail with %-ESHUTDOWN.

 Ensure that no new packets (including ACK/NAK) can be submitted. */

	/*

	 * Ensure that the layer gets marked as shut-down before actually

	 * stopping it. In combination with the check in ssh_ptl_queue_push(),

	 * this guarantees that no new packets can be added and all already

	 * queued packets are properly canceled. In combination with the check

	 * in ssh_ptl_rx_rcvbuf(), this guarantees that received data is

	 * properly cut off.

	/*

	 * At this point, all threads have been stopped. This means that the

	 * only references to packets from inside the system are in the queue

	 * and pending set.

	 *

	 * Note: We still need locks here because someone could still be

	 * canceling packets.

	 *

	 * Note 2: We can re-use queue_node (or pending_node) if we mark the

	 * packet as locked an then remove it from the queue (or pending set

	 * respectively). Marking the packet as locked avoids re-queuing

	 * (which should already be prevented by having stopped the treads...)

	 * and not setting QUEUED_BIT (or PENDING_BIT) prevents removal from a

	 * new list via other threads (e.g. cancellation).

	 *

	 * Note 3: There may be overlap between complete_p and complete_q.

	 * This is handled via test_and_set_bit() on the "completed" flag

	 * (also handles cancellation).

 Mark queued packets as locked and move them to complete_q. */

 Ensure that state does not get zero. */

 Mark pending packets as locked and move them to complete_p. */

 Ensure that state does not get zero. */

 Complete and drop packets on complete_q. */

 Complete and drop packets on complete_p. */

	/*

	 * At this point we have guaranteed that the system doesn't reference

	 * any packets any more.

/**

 * ssh_ptl_init() - Initialize packet transport layer.

 * @ptl:    The packet transport layer to initialize.

 * @serdev: The underlying serial device, i.e. the lower-level transport.

 * @ops:    Packet layer operations.

 *

 * Initializes the given packet transport layer. Transmitter and receiver

 * threads must be started separately via ssh_ptl_tx_start() and

 * ssh_ptl_rx_start(), after the packet-layer has been initialized and the

 * lower-level transport layer has been set up.

 *

 * Return: Returns zero on success and a nonzero error code on failure.

 Initialize list of recent/blocked SEQs with invalid sequence IDs. */

/**

 * ssh_ptl_destroy() - Deinitialize packet transport layer.

 * @ptl: The packet transport layer to deinitialize.

 *

 * Deinitializes the given packet transport layer and frees resources

 * associated with it. If receiver and/or transmitter threads have been

 * started, the layer must first be shut down via ssh_ptl_shutdown() before

 * this function can be called.

 SPDX-License-Identifier: GPL-2.0+

/*

 * SSH message parser.

 *

 * Copyright (C) 2019-2021 Maximilian Luz <luzmaximilian@gmail.com>

/**

 * sshp_validate_crc() - Validate a CRC in raw message data.

 * @src: The span of data over which the CRC should be computed.

 * @crc: The pointer to the expected u16 CRC value.

 *

 * Computes the CRC of the provided data span (@src), compares it to the CRC

 * stored at the given address (@crc), and returns the result of this

 * comparison, i.e. %true if equal. This function is intended to run on raw

 * input/message data.

 *

 * Return: Returns %true if the computed CRC matches the stored CRC, %false

 * otherwise.

/**

 * sshp_starts_with_syn() - Check if the given data starts with SSH SYN bytes.

 * @src: The data span to check the start of.

/**

 * sshp_find_syn() - Find SSH SYN bytes in the given data span.

 * @src: The data span to search in.

 * @rem: The span (output) indicating the remaining data, starting with SSH

 *       SYN bytes, if found.

 *

 * Search for SSH SYN bytes in the given source span. If found, set the @rem

 * span to the remaining data, starting with the first SYN bytes and capped by

 * the source span length, and return %true. This function does not copy any

 * data, but rather only sets pointers to the respective start addresses and

 * length values.

 *

 * If no SSH SYN bytes could be found, set the @rem span to the zero-length

 * span at the end of the source span and return %false.

 *

 * If partial SSH SYN bytes could be found at the end of the source span, set

 * the @rem span to cover these partial SYN bytes, capped by the end of the

 * source span, and return %false. This function should then be re-run once

 * more data is available.

 *

 * Return: Returns %true if a complete SSH SYN sequence could be found,

 * %false otherwise.

/**

 * sshp_parse_frame() - Parse SSH frame.

 * @dev: The device used for logging.

 * @source: The source to parse from.

 * @frame: The parsed frame (output).

 * @payload: The parsed payload (output).

 * @maxlen: The maximum supported message length.

 *

 * Parses and validates a SSH frame, including its payload, from the given

 * source. Sets the provided @frame pointer to the start of the frame and

 * writes the limits of the frame payload to the provided @payload span

 * pointer.

 *

 * This function does not copy any data, but rather only validates the message

 * data and sets pointers (and length values) to indicate the respective parts.

 *

 * If no complete SSH frame could be found, the frame pointer will be set to

 * the %NULL pointer and the payload span will be set to the null span (start

 * pointer %NULL, size zero).

 *

 * Return: Returns zero on success or if the frame is incomplete, %-ENOMSG if

 * the start of the message is invalid, %-EBADMSG if any (frame-header or

 * payload) CRC is invalid, or %-EMSGSIZE if the SSH message is bigger than

 * the maximum message length specified in the @maxlen parameter.

 Initialize output. */

 Check for minimum packet length. */

 Pin down frame. */

 Validate frame CRC. */

 Ensure packet does not exceed maximum length. */

 Pin down payload. */

 Check for frame + payload length. */

 Validate payload CRC. */

/**

 * sshp_parse_command() - Parse SSH command frame payload.

 * @dev: The device used for logging.

 * @source: The source to parse from.

 * @command: The parsed command (output).

 * @command_data: The parsed command data/payload (output).

 *

 * Parses and validates a SSH command frame payload. Sets the @command pointer

 * to the command header and the @command_data span to the command data (i.e.

 * payload of the command). This will result in a zero-length span if the

 * command does not have any associated data/payload. This function does not

 * check the frame-payload-type field, which should be checked by the caller

 * before calling this function.

 *

 * The @source parameter should be the complete frame payload, e.g. returned

 * by the sshp_parse_frame() command.

 *

 * This function does not copy any data, but rather only validates the frame

 * payload data and sets pointers (and length values) to indicate the

 * respective parts.

 *

 * Return: Returns zero on success or %-ENOMSG if @source does not represent a

 * valid command-type frame payload, i.e. is too short.

 Check for minimum length. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Generic OPP helper interface for CPU device

 *

 * Copyright (C) 2009-2014 Texas Instruments Incorporated.

 *	Nishanth Menon

 *	Romit Dasgupta

 *	Kevin Hilman

/**

 * dev_pm_opp_init_cpufreq_table() - create a cpufreq table for a device

 * @dev:	device for which we do this operation

 * @table:	Cpufreq table returned back to caller

 *

 * Generate a cpufreq table for a provided device- this assumes that the

 * opp table is already initialized and ready for usage.

 *

 * This function allocates required memory for the cpufreq table. It is

 * expected that the caller does the required maintenance such as freeing

 * the table as required.

 *

 * Returns -EINVAL for bad pointers, -ENODEV if the device is not found, -ENOMEM

 * if no memory available for the operation (table is not populated), returns 0

 * if successful and table is populated.

 *

 * WARNING: It is  important for the callers to ensure refreshing their copy of

 * the table if any of the mentioned functions have been invoked in the interim.

 find next rate */

 Is Boost/turbo opp ? */

/**

 * dev_pm_opp_free_cpufreq_table() - free the cpufreq table

 * @dev:	device for which we do this operation

 * @table:	table to free

 *

 * Free up the table allocated by dev_pm_opp_init_cpufreq_table

 CONFIG_CPU_FREQ */

/**

 * dev_pm_opp_cpumask_remove_table() - Removes OPP table for @cpumask

 * @cpumask:	cpumask for which OPP table needs to be removed

 *

 * This removes the OPP tables for CPUs present in the @cpumask.

 * This should be used to remove all the OPPs entries associated with

 * the cpus in @cpumask.

/**

 * dev_pm_opp_set_sharing_cpus() - Mark OPP table as shared by few CPUs

 * @cpu_dev:	CPU device for which we do this operation

 * @cpumask:	cpumask of the CPUs which share the OPP table with @cpu_dev

 *

 * This marks OPP table of the @cpu_dev as shared by the CPUs present in

 * @cpumask.

 *

 * Returns -ENODEV if OPP table isn't already present.

 Mark opp-table as multiple CPUs are sharing it now */

/**

 * dev_pm_opp_get_sharing_cpus() - Get cpumask of CPUs sharing OPPs with @cpu_dev

 * @cpu_dev:	CPU device for which we do this operation

 * @cpumask:	cpumask to update with information of sharing CPUs

 *

 * This updates the @cpumask with CPUs that are sharing OPPs with @cpu_dev.

 *

 * Returns -ENODEV if OPP table isn't already present and -EINVAL if the OPP

 * table's status is access-unknown.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Generic OPP OF helpers

 *

 * Copyright (C) 2009-2010 Texas Instruments Incorporated.

 *	Nishanth Menon

 *	Romit Dasgupta

 *	Kevin Hilman

/*

 * Returns opp descriptor node for a device node, caller must

 * do of_node_put().

 "operating-points-v2" can be an array for power domain providers */

 Returns opp descriptor node for a device, caller must do of_node_put() */

			/*

			 * Multiple devices can point to the same OPP table and

			 * so will have same node-pointer, np.

			 *

			 * But the OPPs will be considered as shared only if the

			 * OPP table contains a "opp-shared" property.

 The caller must call dev_pm_opp_put() after the OPP is used */

 The caller must call dev_pm_opp_put_opp_table() after the table is used */

 It is safe to put the node now as all we need now is its address */

 Free resources previously acquired by _opp_table_alloc_required_tables() */

/*

 * Populate all devices and opp tables which are part of "required-opps" list.

 * Checking only the first OPP node should be enough.

 Traversing the first OPP node is all we need */

 Let's do the linking later on */

	/*

	 * Only required for backward compatibility with v1 bindings, but isn't

	 * harmful for other cases. And so we do it unconditionally.

 Get OPP table node */

/*

 * Release all resources previously acquired with a call to

 * _of_opp_alloc_required_opps().

 Put the reference back */

 Populate all required OPPs which are part of "required-opps" list */

 Required table not added yet, we will link later */

 Link required OPPs for an individual OPP */

 Link required OPPs for all OPPs of the newly added OPP table */

 opp_np can't be invalid here */

 Required opp-table is already parsed */

 required_np can't be invalid here */

			/*

			 * Newly added table isn't the required opp-table for

			 * opp_table.

 Link OPPs now */

 The OPPs will be marked unusable */

 All required opp-tables found, remove from lazy list */

 Lets not fail in case we are parsing opp-v1 bindings */

 Checking only first OPP is sufficient */

 Empty OPP table is a valid corner-case, let's not fail */

 two phandles when #interconnect-cells = <1> */

		/*

		 * In the case that no supported_hw has been set by the

		 * platform but there is an opp-supported-hw value set for

		 * an OPP then the OPP should not be enabled as there is

		 * no way to see if the hardware supports it.

 All levels in at least one of the versions should match */

 Check if the level is supported */

 Search for "opp-microvolt-<name>" */

 Search for "opp-microvolt" */

 Missing property isn't a problem, but an invalid entry is */

 Initialize regulator_count */

 Initialize regulator_count */

 There can be one or three elements per supply */

 Search for "opp-microamp-<name>" */

 Search for "opp-microamp" */

/**

 * dev_pm_opp_of_remove_table() - Free OPP table entries created from static DT

 *				  entries

 * @dev:	device pointer used to lookup OPP table.

 *

 * Free OPPs created using static entries present in DT.

		/*

		 * Rate is defined as an unsigned long in clk API, and so

		 * casting explicitly to its type. Must be fixed once rate is 64

		 * bit guaranteed in clk API.

	/*

	 * Bandwidth consists of peak and average (optional) values:

	 * opp-peak-kBps = <path1_value path2_value>;

	 * opp-avg-kBps = <path1_value path2_value>;

 The properties were found but we failed to parse them */

/**

 * _opp_add_static_v2() - Allocate static OPPs (As per 'v2' DT bindings)

 * @opp_table:	OPP table

 * @dev:	device for which we do this operation

 * @np:		device node

 *

 * This function adds an opp definition to the opp table and returns status. The

 * opp can be controlled using dev_pm_opp_enable/disable functions and may be

 * removed by dev_pm_opp_remove.

 *

 * Return:

 * Valid OPP pointer:

 *		On success

 * NULL:

 *		Duplicate OPPs (both freq and volt are same) and opp->available

 *		OR if the OPP is not supported by hardware.

 * ERR_PTR(-EEXIST):

 *		Freq are same and volt are different OR

 *		Duplicate OPPs (both freq and volt are same) and !opp->available

 * ERR_PTR(-ENOMEM):

 *		Memory allocation failure

 * ERR_PTR(-EINVAL):

 *		Failed parsing the OPP node

 Check if the OPP supports hardware's hierarchy of versions or not */

 Don't return error for duplicate OPPs */

 OPP to select on device suspend */

 Pick the OPP with higher rate as suspend OPP */

	/*

	 * Notify the changes in the availability of the operable

	 * frequency/voltage list.

 Initializes OPP tables based on new bindings */

 OPP table is already initialized for the device */

 We have opp-table node now, iterate over it and add OPPs */

 There should be one or more OPPs defined */

 Any non-zero performance state would enable the feature */

 Initializes OPP tables based on old-deprecated bindings */

	/*

	 * Each OPP is a set of tuples consisting of frequency and

	 * voltage like <freq-kHz vol-uV>.

		/*

		 * If only one phandle is present, then the same OPP table

		 * applies for all index requests.

	/*

	 * OPPs have two version of bindings now. Also try the old (v1)

	 * bindings for backward compatibility with older dtbs.

/**

 * devm_pm_opp_of_add_table() - Initialize opp table from device tree

 * @dev:	device pointer used to lookup OPP table.

 *

 * Register the initial OPP table with the OPP library for given device.

 *

 * The opp_table structure will be freed after the device is destroyed.

 *

 * Return:

 * 0		On success OR

 *		Duplicate OPPs (both freq and volt are same) and opp->available

 * -EEXIST	Freq are same and volt are different OR

 *		Duplicate OPPs (both freq and volt are same) and !opp->available

 * -ENOMEM	Memory allocation failure

 * -ENODEV	when 'operating-points' property is not found or is invalid data

 *		in device node.

 * -ENODATA	when empty 'operating-points' property is found

 * -EINVAL	when invalid entries are found in opp-v2 table

/**

 * dev_pm_opp_of_add_table() - Initialize opp table from device tree

 * @dev:	device pointer used to lookup OPP table.

 *

 * Register the initial OPP table with the OPP library for given device.

 *

 * Return:

 * 0		On success OR

 *		Duplicate OPPs (both freq and volt are same) and opp->available

 * -EEXIST	Freq are same and volt are different OR

 *		Duplicate OPPs (both freq and volt are same) and !opp->available

 * -ENOMEM	Memory allocation failure

 * -ENODEV	when 'operating-points' property is not found or is invalid data

 *		in device node.

 * -ENODATA	when empty 'operating-points' property is found

 * -EINVAL	when invalid entries are found in opp-v2 table

/**

 * dev_pm_opp_of_add_table_indexed() - Initialize indexed opp table from device tree

 * @dev:	device pointer used to lookup OPP table.

 * @index:	Index number.

 *

 * Register the initial OPP table with the OPP library for given device only

 * using the "operating-points-v2" property.

 *

 * Return: Refer to dev_pm_opp_of_add_table() for return values.

/**

 * devm_pm_opp_of_add_table_indexed() - Initialize indexed opp table from device tree

 * @dev:	device pointer used to lookup OPP table.

 * @index:	Index number.

 *

 * This is a resource-managed variant of dev_pm_opp_of_add_table_indexed().

/**

 * dev_pm_opp_of_add_table_noclk() - Initialize indexed opp table from device

 *		tree without getting clk for device.

 * @dev:	device pointer used to lookup OPP table.

 * @index:	Index number.

 *

 * Register the initial OPP table with the OPP library for given device only

 * using the "operating-points-v2" property. Do not try to get the clk for the

 * device.

 *

 * Return: Refer to dev_pm_opp_of_add_table() for return values.

/**

 * devm_pm_opp_of_add_table_noclk() - Initialize indexed opp table from device

 *		tree without getting clk for device.

 * @dev:	device pointer used to lookup OPP table.

 * @index:	Index number.

 *

 * This is a resource-managed variant of dev_pm_opp_of_add_table_noclk().

 CPU device specific helpers */

/**

 * dev_pm_opp_of_cpumask_remove_table() - Removes OPP table for @cpumask

 * @cpumask:	cpumask for which OPP table needs to be removed

 *

 * This removes the OPP tables for CPUs present in the @cpumask.

 * This should be used only to remove static entries created from DT.

/**

 * dev_pm_opp_of_cpumask_add_table() - Adds OPP table for @cpumask

 * @cpumask:	cpumask for which OPP table needs to be added.

 *

 * This adds the OPP tables for CPUs present in the @cpumask.

			/*

			 * OPP may get registered dynamically, don't print error

			 * message here.

 Free all other OPPs */

/*

 * Works only for OPP v2 bindings.

 *

 * Returns -ENOENT if operating-points-v2 bindings aren't supported.

/**

 * dev_pm_opp_of_get_sharing_cpus() - Get cpumask of CPUs sharing OPPs with

 *				      @cpu_dev using operating-points-v2

 *				      bindings.

 *

 * @cpu_dev:	CPU device for which we do this operation

 * @cpumask:	cpumask to update with information of sharing CPUs

 *

 * This updates the @cpumask with CPUs that are sharing OPPs with @cpu_dev.

 *

 * Returns -ENOENT if operating-points-v2 isn't present for @cpu_dev.

 Get OPP descriptor node */

 OPPs are shared ? */

 Get OPP descriptor node */

 CPUs are sharing opp node */

/**

 * of_get_required_opp_performance_state() - Search for required OPP and return its performance state.

 * @np: Node that contains the "required-opps" property.

 * @index: Index of the phandle to parse.

 *

 * Returns the performance state of the OPP pointed out by the "required-opps"

 * property at @index in @np.

 *

 * Return: Zero or positive performance state on success, otherwise negative

 * value on errors.

/**

 * dev_pm_opp_get_of_node() - Gets the DT node corresponding to an opp

 * @opp:	opp for which DT node has to be returned for

 *

 * Return: DT node corresponding to the opp, else 0 on success.

 *

 * The caller needs to put the node with of_node_put() after using it.

/*

 * Callback function provided to the Energy Model framework upon registration.

 * This computes the power estimated by @dev at @kHz if it is the frequency

 * of an existing OPP, or at the frequency of the first OPP above @kHz otherwise

 * (see dev_pm_opp_find_freq_ceil()). This function updates @kHz to the ceiled

 * frequency and @mW to the associated power. The power is estimated as

 * P = C * V^2 * f with C being the device's capacitance and V and f

 * respectively the voltage and frequency of the OPP.

 *

 * Returns -EINVAL if the power calculation failed because of missing

 * parameters, 0 otherwise.

/**

 * dev_pm_opp_of_register_em() - Attempt to register an Energy Model

 * @dev		: Device for which an Energy Model has to be registered

 * @cpus	: CPUs for which an Energy Model has to be registered. For

 *		other type of devices it should be set to NULL.

 *

 * This checks whether the "dynamic-power-coefficient" devicetree property has

 * been specified, and tries to register an Energy Model with it if it has.

 * Having this property means the voltages are known for OPPs and the EM

 * might be calculated.

	/*

	 * Register an EM only if the 'dynamic-power-coefficient' property is

	 * set in devicetree. It is assumed the voltage values are known if that

	 * property is set since it is useless otherwise. If voltages are not

	 * known, just let the EM registration fail with an error to alert the

	 * user about the inconsistent configuration.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Generic OPP debugfs interface

 *

 * Copyright (C) 2015-2016 Viresh Kumar <viresh.kumar@linaro.org>

 Create per-path directory */

 Create per-opp directory */

 20 chars for 64 bit value + 5 (opp:\0) */

	/*

	 * Get directory name for OPP.

	 *

	 * - Normally rate is unique to each OPP, use it to get unique opp-name.

	 * - For some devices rate isn't available, use index instead.

 Create per-opp directory */

 Create device specific directory */

 Create device specific directory link */

/**

 * opp_debug_register - add a device opp node to the debugfs 'opp' directory

 * @opp_dev: opp-dev pointer for device

 * @opp_table: the device-opp being added

 *

 * Dynamically adds device specific directory in debugfs 'opp' directory. If the

 * device-opp is shared with other devices, then links will be created for all

 * devices except the first.

 Look for next opp-dev */

 new_dev is guaranteed to be valid here */

/**

 * opp_debug_unregister - remove a device opp node from debugfs opp directory

 * @opp_dev: opp-dev pointer for device

 * @opp_table: the device-opp being removed

 *

 * Dynamically removes device specific directory from debugfs 'opp' directory.

 Move the real dentry object under another device */

 Create /sys/kernel/debug/opp directory */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2016-2017 Texas Instruments Incorporated - https://www.ti.com/

 *	Nishanth Menon <nm@ti.com>

 *	Dave Gerlach <d-gerlach@ti.com>

 *

 * TI OPP supply driver that provides override into the regulator control

 * for generic opp core to handle devices with ABB regulator and/or

 * SmartReflex Class0.

/**

 * struct ti_opp_supply_optimum_voltage_table - optimized voltage table

 * @reference_uv:	reference voltage (usually Nominal voltage)

 * @optimized_uv:	Optimized voltage from efuse

/**

 * struct ti_opp_supply_data - OMAP specific opp supply data

 * @vdd_table:	Optimized voltage mapping table

 * @num_vdd_table: number of entries in vdd_table

 * @vdd_absolute_max_voltage_uv: absolute maximum voltage in UV for the supply

/**

 * struct ti_opp_supply_of_data - device tree match data

 * @flags:	specific type of opp supply

 * @efuse_voltage_mask: mask required for efuse register representing voltage

 * @efuse_voltage_uv: Are the efuse entries in micro-volts? if not, assume

 *		milli-volts.

/**

 * _store_optimized_voltages() - store optimized voltages

 * @dev:	ti opp supply device for which we need to store info

 * @data:	data specific to the device

 *

 * Picks up efuse based optimized voltages for VDD unique per device and

 * stores it in internal data structure for use during transition requests.

 *

 * Return: If successful, 0, else appropriate error value.

 pick up Efuse based voltages */

 Fetch efuse-settings. */

 Verify for corrupted OPP entries in dt */

		/*

		 * Some older samples might not have optimized efuse

		 * Use reference voltage for those - just add debug message

		 * for them.

/**

 * _free_optimized_voltages() - free resources for optvoltages

 * @dev:	device for which we need to free info

 * @data:	data specific to the device

/**

 * _get_optimal_vdd_voltage() - Finds optimal voltage for the supply

 * @dev:	device for which we need to find info

 * @data:	data specific to the device

 * @reference_uv:	reference voltage (OPP voltage) for which we need value

 *

 * Return: if a match is found, return optimized voltage, else return

 * reference_uv, also return reference_uv if no optimization is needed.

 Find a exact match - this list is usually very small */

 IF things are screwed up, we'd make a mess on console.. ratelimit */

	/*

	 * If we do have an absolute max voltage specified, then we should

	 * use that voltage instead to allow for cases where the voltage rails

	 * are ganged (example if we set the max for an opp as 1.12v, and

	 * the absolute max is 1.5v, for another rail to get 1.25v, it cannot

	 * be achieved if the regulator is constrainted to max of 1.12v, even

	 * if it can function at 1.25v

/**

 * ti_opp_supply_set_opp() - do the opp supply transition

 * @data:	information on regulators and new and old opps provided by

 *		opp core to use in transition

 *

 * Return: If successful, 0, else appropriate error value.

 Scaling up? Scale voltage before frequency */

 Change frequency */

 Scaling down? Scale voltage after frequency */

 This shouldn't harm even if the voltages weren't updated earlier */

 We do not expect this to happen */

 Again, unlikely.. but mistakes do happen */

 If we need optimized voltage */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Generic OPP Interface

 *

 * Copyright (C) 2009-2010 Texas Instruments Incorporated.

 *	Nishanth Menon

 *	Romit Dasgupta

 *	Kevin Hilman

/*

 * The root of the list of all opp-tables. All opp_table structures branch off

 * from here, with each opp_table containing the list of opps it supports in

 * various states of availability.

 OPP tables with uninitialized required OPPs */

 Lock to allow exclusive modification to the device and opp lists */

 Flag indicating that opp_tables list is being updated at the moment */

/**

 * _find_opp_table() - find opp_table struct using device pointer

 * @dev:	device pointer used to lookup OPP table

 *

 * Search OPP table for one containing matching device.

 *

 * Return: pointer to 'struct opp_table' if found, otherwise -ENODEV or

 * -EINVAL based on type of error.

 *

 * The callers must call dev_pm_opp_put_opp_table() after the table is used.

/**

 * dev_pm_opp_get_voltage() - Gets the voltage corresponding to an opp

 * @opp:	opp for which voltage has to be returned for

 *

 * Return: voltage in micro volt corresponding to the opp, else

 * return 0

 *

 * This is useful only for devices with single power supply.

/**

 * dev_pm_opp_get_freq() - Gets the frequency corresponding to an available opp

 * @opp:	opp for which frequency has to be returned for

 *

 * Return: frequency in hertz corresponding to the opp, else

 * return 0

/**

 * dev_pm_opp_get_level() - Gets the level corresponding to an available opp

 * @opp:	opp for which level value has to be returned for

 *

 * Return: level read from device tree corresponding to the opp, else

 * return 0.

/**

 * dev_pm_opp_get_required_pstate() - Gets the required performance state

 *                                    corresponding to an available opp

 * @opp:	opp for which performance state has to be returned for

 * @index:	index of the required opp

 *

 * Return: performance state read from device tree corresponding to the

 * required opp, else return 0.

 required-opps not fully initialized yet */

/**

 * dev_pm_opp_is_turbo() - Returns if opp is turbo OPP or not

 * @opp: opp for which turbo mode is being verified

 *

 * Turbo OPPs are not for normal use, and can be enabled (under certain

 * conditions) for short duration of times to finish high throughput work

 * quickly. Running on them for longer times may overheat the chip.

 *

 * Return: true if opp is turbo opp, else false.

/**

 * dev_pm_opp_get_max_clock_latency() - Get max clock latency in nanoseconds

 * @dev:	device for which we do this operation

 *

 * Return: This function returns the max clock latency in nanoseconds.

/**

 * dev_pm_opp_get_max_volt_latency() - Get max voltage latency in nanoseconds

 * @dev: device for which we do this operation

 *

 * Return: This function returns the max voltage latency in nanoseconds.

 Regulator may not be required for the device */

	/*

	 * The caller needs to ensure that opp_table (and hence the regulator)

	 * isn't freed, while we are executing this routine.

/**

 * dev_pm_opp_get_max_transition_latency() - Get max transition latency in

 *					     nanoseconds

 * @dev: device for which we do this operation

 *

 * Return: This function returns the max transition latency, in nanoseconds, to

 * switch from one OPP to other.

/**

 * dev_pm_opp_get_suspend_opp_freq() - Get frequency of suspend opp in Hz

 * @dev:	device for which we do this operation

 *

 * Return: This function returns the frequency of the OPP marked as suspend_opp

 * if one is available, else returns 0;

/**

 * dev_pm_opp_get_opp_count() - Get number of opps available in the opp table

 * @dev:	device for which we do this operation

 *

 * Return: This function returns the number of available opps if there are any,

 * else returns 0 if none or the corresponding error value.

/**

 * dev_pm_opp_find_freq_exact() - search for an exact frequency

 * @dev:		device for which we do this operation

 * @freq:		frequency to search for

 * @available:		true/false - match for available opp

 *

 * Return: Searches for exact match in the opp table and returns pointer to the

 * matching opp if found, else returns ERR_PTR in case of error and should

 * be handled using IS_ERR. Error return values can be:

 * EINVAL:	for bad pointer

 * ERANGE:	no match found for search

 * ENODEV:	if device not found in list of registered devices

 *

 * Note: available is a modifier for the search. if available=true, then the

 * match is for exact matching frequency and is available in the stored OPP

 * table. if false, the match is for exact frequency which is not available.

 *

 * This provides a mechanism to enable an opp which is not available currently

 * or the opposite as well.

 *

 * The callers are required to call dev_pm_opp_put() for the returned OPP after

 * use.

 Increment the reference count of OPP */

/**

 * dev_pm_opp_find_level_exact() - search for an exact level

 * @dev:		device for which we do this operation

 * @level:		level to search for

 *

 * Return: Searches for exact match in the opp table and returns pointer to the

 * matching opp if found, else returns ERR_PTR in case of error and should

 * be handled using IS_ERR. Error return values can be:

 * EINVAL:	for bad pointer

 * ERANGE:	no match found for search

 * ENODEV:	if device not found in list of registered devices

 *

 * The callers are required to call dev_pm_opp_put() for the returned OPP after

 * use.

 Increment the reference count of OPP */

/**

 * dev_pm_opp_find_level_ceil() - search for an rounded up level

 * @dev:		device for which we do this operation

 * @level:		level to search for

 *

 * Return: Searches for rounded up match in the opp table and returns pointer

 * to the  matching opp if found, else returns ERR_PTR in case of error and

 * should be handled using IS_ERR. Error return values can be:

 * EINVAL:	for bad pointer

 * ERANGE:	no match found for search

 * ENODEV:	if device not found in list of registered devices

 *

 * The callers are required to call dev_pm_opp_put() for the returned OPP after

 * use.

 Increment the reference count of OPP */

 Increment the reference count of OPP */

/**

 * dev_pm_opp_find_freq_ceil() - Search for an rounded ceil freq

 * @dev:	device for which we do this operation

 * @freq:	Start frequency

 *

 * Search for the matching ceil *available* OPP from a starting freq

 * for a device.

 *

 * Return: matching *opp and refreshes *freq accordingly, else returns

 * ERR_PTR in case of error and should be handled using IS_ERR. Error return

 * values can be:

 * EINVAL:	for bad pointer

 * ERANGE:	no match found for search

 * ENODEV:	if device not found in list of registered devices

 *

 * The callers are required to call dev_pm_opp_put() for the returned OPP after

 * use.

/**

 * dev_pm_opp_find_freq_floor() - Search for a rounded floor freq

 * @dev:	device for which we do this operation

 * @freq:	Start frequency

 *

 * Search for the matching floor *available* OPP from a starting freq

 * for a device.

 *

 * Return: matching *opp and refreshes *freq accordingly, else returns

 * ERR_PTR in case of error and should be handled using IS_ERR. Error return

 * values can be:

 * EINVAL:	for bad pointer

 * ERANGE:	no match found for search

 * ENODEV:	if device not found in list of registered devices

 *

 * The callers are required to call dev_pm_opp_put() for the returned OPP after

 * use.

 go to the next node, before choosing prev */

 Increment the reference count of OPP */

/**

 * dev_pm_opp_find_freq_ceil_by_volt() - Find OPP with highest frequency for

 *					 target voltage.

 * @dev:	Device for which we do this operation.

 * @u_volt:	Target voltage.

 *

 * Search for OPP with highest (ceil) frequency and has voltage <= u_volt.

 *

 * Return: matching *opp, else returns ERR_PTR in case of error which should be

 * handled using IS_ERR.

 *

 * Error return values can be:

 * EINVAL:	bad parameters

 *

 * The callers are required to call dev_pm_opp_put() for the returned OPP after

 * use.

 Increment the reference count of OPP */

 Regulator not available for device */

 We may reach here for devices which don't change frequency */

 This function only supports single regulator per device */

 Scaling up? Scale voltage before frequency */

 Change frequency */

 Scaling down? Scale voltage after frequency */

	/*

	 * Enable the regulator after setting its voltages, otherwise it breaks

	 * some boot-enabled regulators.

 This shouldn't harm even if the voltages weren't updated earlier */

	/*

	 * We support this only if dev_pm_opp_set_regulators() was called

	 * earlier.

 This is only called for PM domain for now */

 required-opps not fully initialized yet */

	/*

	 * We only support genpd's OPPs in the "required-opps" for now, as we

	 * don't know much about other use cases. Error out if the required OPP

	 * doesn't belong to a genpd.

 Single genpd case */

 Multiple genpd case */

	/*

	 * Acquire genpd_virt_dev_lock to make sure we don't use a genpd_dev

	 * after it is freed from another thread.

 Scaling up? Set required OPPs in normal order, else reverse */

	/*

	 * Unable to find the current OPP ? Pick the first from the list since

	 * it is in ascending order, otherwise rest of the code will need to

	 * make special checks to validate current_opp.

	/*

	 * Some drivers need to support cases where some platforms may

	 * have OPP table for the device, while others don't and

	 * opp_set_rate() just needs to behave like clk_set_rate().

 Find the currently set OPP if we don't know already */

 Return early if nothing to do */

 Scaling up? Configure required OPPs before frequency */

 Only frequency scaling */

 Scaling down? Configure required OPPs after frequency */

 Make sure current_opp doesn't get freed */

/**

 * dev_pm_opp_set_rate() - Configure new OPP based on frequency

 * @dev:	 device for which we do this operation

 * @target_freq: frequency to achieve

 *

 * This configures the power-supplies to the levels specified by the OPP

 * corresponding to the target_freq, and programs the clock to a value <=

 * target_freq, as rounded by clk_round_rate(). Device wanting to run at fmax

 * provided by the opp, should have already rounded to the target OPP's

 * frequency.

		/*

		 * For IO devices which require an OPP on some platforms/SoCs

		 * while just needing to scale the clock on some others

		 * we look for empty OPP tables with just a clock handle and

		 * scale only the clk. This makes dev_pm_opp_set_rate()

		 * equivalent to a clk_set_rate()

		/*

		 * The clock driver may support finer resolution of the

		 * frequencies than the OPP table, don't update the frequency we

		 * pass to clk_set_rate() here.

/**

 * dev_pm_opp_set_opp() - Configure device for OPP

 * @dev: device for which we do this operation

 * @opp: OPP to set to

 *

 * This configures the device based on the properties of the OPP passed to this

 * routine.

 *

 * Return: 0 on success, a negative error number otherwise.

 OPP-dev Helpers */

 Initialize opp-dev */

 Create debugfs entries for the opp_table */

	/*

	 * Allocate a new OPP table. In the infrequent case where a new

	 * device is needed to be added, we pay this penalty.

 Mark regulator count uninitialized */

 Find interconnect path(s) for the device */

	/*

	 * Return early if we don't need to get clk or we have already tried it

	 * earlier.

 Find clk for the device */

/*

 * We need to make sure that the OPP table for a device doesn't get added twice,

 * if this routine gets called in parallel with the same device pointer.

 *

 * The simplest way to enforce that is to perform everything (find existing

 * table and if not found, create a new one) under the opp_table_lock, so only

 * one creator gets access to the same. But that expands the critical section

 * under the lock and may end up causing circular dependencies with frameworks

 * like debugfs, interconnect or clock framework as they may be direct or

 * indirect users of OPP core.

 *

 * And for that reason we have to go for a bit tricky implementation here, which

 * uses the opp_tables_busy flag to indicate if another creator is in the middle

 * of adding an OPP table and others should wait for it to finish.

	/*

	 * The opp_tables list or an OPP table's dev_list is getting updated by

	 * another user, wait for it to finish.

 Drop the lock to reduce the size of critical section */

 Drop the lock as soon as we can */

 Release clk */

		/*

		 * The OPP table is getting removed, drop the performance state

		 * constraints.

	/*

	 * Notify the changes in the availability of the operable

	 * frequency/voltage list.

/**

 * dev_pm_opp_remove()  - Remove an OPP from OPP table

 * @dev:	device for which we do this operation

 * @freq:	OPP to remove with matching 'freq'

 *

 * This function removes an opp from the opp table.

 Drop the reference taken by dev_pm_opp_add() */

 Drop the reference taken by _find_opp_table() */

		/*

		 * Refcount must be dropped only once for each OPP by OPP core,

		 * do that with help of "removed" flag.

/*

 * Can't call dev_pm_opp_put() from under the lock as debugfs removal needs to

 * happen lock less to avoid circular dependency issues. This routine must be

 * called without the opp_table->lock held.

 Drop the references taken by dev_pm_opp_add() */

/**

 * dev_pm_opp_remove_all_dynamic() - Remove all dynamically created OPPs

 * @dev:	device for which we do this operation

 *

 * This function removes all dynamically created OPPs from the opp table.

 Drop the reference taken by _find_opp_table() */

 Allocate space for at least one supply */

 allocate new OPP node and supplies structures */

 Put the supplies at the end of the OPP structure as an empty array */

	/*

	 * Insert new OPP in order of increasing frequency and discard if

	 * already present.

	 *

	 * Need to use &opp_table->opp_list in the condition part of the 'for'

	 * loop, don't replace it with head otherwise it will become an infinite

	 * loop.

 Duplicate OPPs */

 Should we compare voltages for all regulators here ? */

/*

 * Returns:

 * 0: On success. And appropriate error message for duplicate OPPs.

 * -EBUSY: For OPP with same freq/volt and is available. The callers of

 *  _opp_add() must return 0 if they receive -EBUSY from it. This is to make

 *  sure we don't print error messages unnecessarily if different parts of

 *  kernel try to initialize the OPP table.

 * -EEXIST: For OPP with same freq but different volt or is unavailable. This

 *  should be considered an error by the callers of _opp_add().

 required-opps not fully initialized yet */

/**

 * _opp_add_v1() - Allocate a OPP based on v1 bindings.

 * @opp_table:	OPP table

 * @dev:	device for which we do this operation

 * @freq:	Frequency in Hz for this OPP

 * @u_volt:	Voltage in uVolts for this OPP

 * @dynamic:	Dynamically added OPPs.

 *

 * This function adds an opp definition to the opp table and returns status.

 * The opp is made available by default and it can be controlled using

 * dev_pm_opp_enable/disable functions and may be removed by dev_pm_opp_remove.

 *

 * NOTE: "dynamic" parameter impacts OPPs added by the dev_pm_opp_of_add_table

 * and freed by dev_pm_opp_of_remove_table.

 *

 * Return:

 * 0		On success OR

 *		Duplicate OPPs (both freq and volt are same) and opp->available

 * -EEXIST	Freq are same and volt are different OR

 *		Duplicate OPPs (both freq and volt are same) and !opp->available

 * -ENOMEM	Memory allocation failure

 populate the opp table */

 Don't return error for duplicate OPPs */

	/*

	 * Notify the changes in the availability of the operable

	 * frequency/voltage list.

/**

 * dev_pm_opp_set_supported_hw() - Set supported platforms

 * @dev: Device for which supported-hw has to be set.

 * @versions: Array of hierarchy of versions to match.

 * @count: Number of elements in the array.

 *

 * This is required only for the V2 bindings, and it enables a platform to

 * specify the hierarchy of versions it supports. OPP layer will then enable

 * OPPs, which are available for those versions, based on its 'opp-supported-hw'

 * property.

 Make sure there are no concurrent readers while updating opp_table */

 Another CPU that shares the OPP table has set the property ? */

/**

 * dev_pm_opp_put_supported_hw() - Releases resources blocked for supported hw

 * @opp_table: OPP table returned by dev_pm_opp_set_supported_hw().

 *

 * This is required only for the V2 bindings, and is called for a matching

 * dev_pm_opp_set_supported_hw(). Until this is called, the opp_table structure

 * will not be freed.

/**

 * devm_pm_opp_set_supported_hw() - Set supported platforms

 * @dev: Device for which supported-hw has to be set.

 * @versions: Array of hierarchy of versions to match.

 * @count: Number of elements in the array.

 *

 * This is a resource-managed variant of dev_pm_opp_set_supported_hw().

 *

 * Return: 0 on success and errorno otherwise.

/**

 * dev_pm_opp_set_prop_name() - Set prop-extn name

 * @dev: Device for which the prop-name has to be set.

 * @name: name to postfix to properties.

 *

 * This is required only for the V2 bindings, and it enables a platform to

 * specify the extn to be used for certain property names. The properties to

 * which the extension will apply are opp-microvolt and opp-microamp. OPP core

 * should postfix the property name with -<name> while looking for them.

 Make sure there are no concurrent readers while updating opp_table */

 Another CPU that shares the OPP table has set the property ? */

/**

 * dev_pm_opp_put_prop_name() - Releases resources blocked for prop-name

 * @opp_table: OPP table returned by dev_pm_opp_set_prop_name().

 *

 * This is required only for the V2 bindings, and is called for a matching

 * dev_pm_opp_set_prop_name(). Until this is called, the opp_table structure

 * will not be freed.

/**

 * dev_pm_opp_set_regulators() - Set regulator names for the device

 * @dev: Device for which regulator name is being set.

 * @names: Array of pointers to the names of the regulator.

 * @count: Number of regulators.

 *

 * In order to support OPP switching, OPP layer needs to know the name of the

 * device's regulators, as the core would be required to switch voltages as

 * well.

 *

 * This must be called before any OPPs are initialized for the device.

 This should be called before OPPs are initialized */

 Another CPU that shares the OPP table has set the regulators ? */

/**

 * dev_pm_opp_put_regulators() - Releases resources blocked for regulator

 * @opp_table: OPP table returned from dev_pm_opp_set_regulators().

/**

 * devm_pm_opp_set_regulators() - Set regulator names for the device

 * @dev: Device for which regulator name is being set.

 * @names: Array of pointers to the names of the regulator.

 * @count: Number of regulators.

 *

 * This is a resource-managed variant of dev_pm_opp_set_regulators().

 *

 * Return: 0 on success and errorno otherwise.

/**

 * dev_pm_opp_set_clkname() - Set clk name for the device

 * @dev: Device for which clk name is being set.

 * @name: Clk name.

 *

 * In order to support OPP switching, OPP layer needs to get pointer to the

 * clock for the device. Simple cases work fine without using this routine (i.e.

 * by passing connection-id as NULL), but for a device with multiple clocks

 * available, the OPP core needs to know the exact name of the clk to use.

 *

 * This must be called before any OPPs are initialized for the device.

 This should be called before OPPs are initialized */

 clk shouldn't be initialized at this point */

 Find clk for the device */

/**

 * dev_pm_opp_put_clkname() - Releases resources blocked for clk.

 * @opp_table: OPP table returned from dev_pm_opp_set_clkname().

/**

 * devm_pm_opp_set_clkname() - Set clk name for the device

 * @dev: Device for which clk name is being set.

 * @name: Clk name.

 *

 * This is a resource-managed variant of dev_pm_opp_set_clkname().

 *

 * Return: 0 on success and errorno otherwise.

/**

 * dev_pm_opp_register_set_opp_helper() - Register custom set OPP helper

 * @dev: Device for which the helper is getting registered.

 * @set_opp: Custom set OPP helper.

 *

 * This is useful to support complex platforms (like platforms with multiple

 * regulators per device), instead of the generic OPP set rate helper.

 *

 * This must be called before any OPPs are initialized for the device.

 This should be called before OPPs are initialized */

 Another CPU that shares the OPP table has set the helper ? */

/**

 * dev_pm_opp_unregister_set_opp_helper() - Releases resources blocked for

 *					   set_opp helper

 * @opp_table: OPP table returned from dev_pm_opp_register_set_opp_helper().

 *

 * Release resources blocked for platform specific set_opp helper.

/**

 * devm_pm_opp_register_set_opp_helper() - Register custom set OPP helper

 * @dev: Device for which the helper is getting registered.

 * @set_opp: Custom set OPP helper.

 *

 * This is a resource-managed version of dev_pm_opp_register_set_opp_helper().

 *

 * Return: 0 on success and errorno otherwise.

/**

 * dev_pm_opp_attach_genpd - Attach genpd(s) for the device and save virtual device pointer

 * @dev: Consumer device for which the genpd is getting attached.

 * @names: Null terminated array of pointers containing names of genpd to attach.

 * @virt_devs: Pointer to return the array of virtual devices.

 *

 * Multiple generic power domains for a device are supported with the help of

 * virtual genpd devices, which are created for each consumer device - genpd

 * pair. These are the device structures which are attached to the power domain

 * and are required by the OPP core to set the performance state of the genpd.

 * The same API also works for the case where single genpd is available and so

 * we don't need to support that separately.

 *

 * This helper will normally be called by the consumer driver of the device

 * "dev", as only that has details of the genpd names.

 *

 * This helper needs to be called once with a list of all genpd to attach.

 * Otherwise the original device structure will be used instead by the OPP core.

 *

 * The order of entries in the names array must match the order in which

 * "required-opps" are added in DT.

	/*

	 * If the genpd's OPP table isn't already initialized, parsing of the

	 * required-opps fail for dev. We should retry this after genpd's OPP

	 * table is added.

/**

 * dev_pm_opp_detach_genpd() - Detach genpd(s) from the device.

 * @opp_table: OPP table returned by dev_pm_opp_attach_genpd().

 *

 * This detaches the genpd(s), resets the virtual device pointers, and puts the

 * OPP table.

	/*

	 * Acquire genpd_virt_dev_lock to make sure virt_dev isn't getting

	 * used in parallel.

/**

 * devm_pm_opp_attach_genpd - Attach genpd(s) for the device and save virtual

 *			      device pointer

 * @dev: Consumer device for which the genpd is getting attached.

 * @names: Null terminated array of pointers containing names of genpd to attach.

 * @virt_devs: Pointer to return the array of virtual devices.

 *

 * This is a resource-managed version of dev_pm_opp_attach_genpd().

 *

 * Return: 0 on success and errorno otherwise.

/**

 * dev_pm_opp_xlate_required_opp() - Find required OPP for @src_table OPP.

 * @src_table: OPP table which has @dst_table as one of its required OPP table.

 * @dst_table: Required OPP table of the @src_table.

 * @src_opp: OPP from the @src_table.

 *

 * This function returns the OPP (present in @dst_table) pointed out by the

 * "required-opps" property of the @src_opp (present in @src_table).

 *

 * The callers are required to call dev_pm_opp_put() for the returned OPP after

 * use.

 *

 * Return: pointer to 'struct dev_pm_opp' on success and errorno otherwise.

 required-opps not fully initialized yet */

/**

 * dev_pm_opp_xlate_performance_state() - Find required OPP's pstate for src_table.

 * @src_table: OPP table which has dst_table as one of its required OPP table.

 * @dst_table: Required OPP table of the src_table.

 * @pstate: Current performance state of the src_table.

 *

 * This Returns pstate of the OPP (present in @dst_table) pointed out by the

 * "required-opps" property of the OPP (present in @src_table) which has

 * performance state set to @pstate.

 *

 * Return: Zero or positive performance state on success, otherwise negative

 * value on errors.

	/*

	 * Normally the src_table will have the "required_opps" property set to

	 * point to one of the OPPs in the dst_table, but in some cases the

	 * genpd and its master have one to one mapping of performance states

	 * and so none of them have the "required-opps" property set. Return the

	 * pstate of the src_table as it is in such cases.

 required-opps not fully initialized yet */

/**

 * dev_pm_opp_add()  - Add an OPP table from a table definitions

 * @dev:	device for which we do this operation

 * @freq:	Frequency in Hz for this OPP

 * @u_volt:	Voltage in uVolts for this OPP

 *

 * This function adds an opp definition to the opp table and returns status.

 * The opp is made available by default and it can be controlled using

 * dev_pm_opp_enable/disable functions.

 *

 * Return:

 * 0		On success OR

 *		Duplicate OPPs (both freq and volt are same) and opp->available

 * -EEXIST	Freq are same and volt are different OR

 *		Duplicate OPPs (both freq and volt are same) and !opp->available

 * -ENOMEM	Memory allocation failure

 Fix regulator count for dynamic OPPs */

/**

 * _opp_set_availability() - helper to set the availability of an opp

 * @dev:		device for which we do this operation

 * @freq:		OPP frequency to modify availability

 * @availability_req:	availability status requested for this opp

 *

 * Set the availability of an OPP, opp_{enable,disable} share a common logic

 * which is isolated here.

 *

 * Return: -EINVAL for bad pointers, -ENOMEM if no memory available for the

 * copy operation, returns 0 if no modification was done OR modification was

 * successful.

 Find the opp_table */

 Do we have the frequency? */

 Is update really needed? */

 Notify the change of the OPP availability */

/**

 * dev_pm_opp_adjust_voltage() - helper to change the voltage of an OPP

 * @dev:		device for which we do this operation

 * @freq:		OPP frequency to adjust voltage of

 * @u_volt:		new OPP target voltage

 * @u_volt_min:		new OPP min voltage

 * @u_volt_max:		new OPP max voltage

 *

 * Return: -EINVAL for bad pointers, -ENOMEM if no memory available for the

 * copy operation, returns 0 if no modifcation was done OR modification was

 * successful.

 Find the opp_table */

 Do we have the frequency? */

 Is update really needed? */

 Notify the voltage change of the OPP */

/**

 * dev_pm_opp_enable() - Enable a specific OPP

 * @dev:	device for which we do this operation

 * @freq:	OPP frequency to enable

 *

 * Enables a provided opp. If the operation is valid, this returns 0, else the

 * corresponding error value. It is meant to be used for users an OPP available

 * after being temporarily made unavailable with dev_pm_opp_disable.

 *

 * Return: -EINVAL for bad pointers, -ENOMEM if no memory available for the

 * copy operation, returns 0 if no modification was done OR modification was

 * successful.

/**

 * dev_pm_opp_disable() - Disable a specific OPP

 * @dev:	device for which we do this operation

 * @freq:	OPP frequency to disable

 *

 * Disables a provided opp. If the operation is valid, this returns

 * 0, else the corresponding error value. It is meant to be a temporary

 * control by users to make this OPP not available until the circumstances are

 * right to make it available again (with a call to dev_pm_opp_enable).

 *

 * Return: -EINVAL for bad pointers, -ENOMEM if no memory available for the

 * copy operation, returns 0 if no modification was done OR modification was

 * successful.

/**

 * dev_pm_opp_register_notifier() - Register OPP notifier for the device

 * @dev:	Device for which notifier needs to be registered

 * @nb:		Notifier block to be registered

 *

 * Return: 0 on success or a negative error value.

/**

 * dev_pm_opp_unregister_notifier() - Unregister OPP notifier for the device

 * @dev:	Device for which notifier needs to be unregistered

 * @nb:		Notifier block to be unregistered

 *

 * Return: 0 on success or a negative error value.

/**

 * dev_pm_opp_remove_table() - Free all OPPs associated with the device

 * @dev:	device pointer used to lookup OPP table.

 *

 * Free both OPPs created using static entries present in DT and the

 * dynamically added entries.

 Check for existing table for 'dev' */

	/*

	 * Drop the extra reference only if the OPP table was successfully added

	 * with dev_pm_opp_of_add_table() earlier.

 Drop reference taken by _find_opp_table() */

/**

 * dev_pm_opp_sync_regulators() - Sync state of voltage regulators

 * @dev:	device for which we do this operation

 *

 * Sync voltage state of the OPP table regulators.

 *

 * Return: 0 on success or a negative error value.

 Device may not have OPP table */

 Regulator may not be required for the device */

 Nothing to sync if voltage wasn't changed */

 Drop reference taken by _find_opp_table() */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Pinctrl driver for Rockchip RK805 PMIC

 *

 * Copyright (c) 2017, Fuzhou Rockchip Electronics Co., Ltd

 *

 * Author: Joseph Chen <chenjh@rock-chips.com>

 *

 * Based on the pinctrl-as3722 driver

/*

 * @reg: gpio setting register;

 * @fun_mask: functions select mask value, when set is gpio;

 * @dir_mask: input or output mask value, when set is output, otherwise input;

 * @val_mask: gpio set value, when set is level high, otherwise low;

 *

 * Different PMIC has different pin features, belowing 3 mask members are not

 * all necessary for every PMIC. For example, RK805 has 2 pins that can be used

 * as output only GPIOs, so func_mask and dir_mask are not needed. RK816 has 1

 * pin that can be used as TS/GPIO, so fun_mask, dir_mask and val_mask are all

 * necessary.

 RK805: 2 output only GPIOs */

 generic gpio chip */

 default output*/

 generic pinctrl */

 switch to gpio function */

 set direction */

 Add gpio chip */

 Add pinctrl */

 Add pin range */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pistachio SoC pinctrl driver

 *

 * Copyright (C) 2014 Imagination Technologies Ltd.

 * Copyright (C) 2014 Google, Inc.

	/*

	 * For most of the GPIO registers, bit 16 + X must be set in order to

	 * write bit X.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PIC32 pinctrl driver

 *

 * Joshua Henderson, <joshua.henderson@microchip.com>

 * Copyright (C) 2015 Microchip Technology Inc.  All rights reserved.

 enable RISE */

 disable FALL */

 enable EDGE */

 disable RISE */

 enable FALL */

 enable EDGE */

 enable RISE */

 enable FALL */

 enable EDGE */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Microsemi/Microchip SoCs serial gpio driver

 *

 * Author: Lars Povlsen <lars.povlsen@microchip.com>

 *

 * Copyright (c) 2020 Microchip Technology Inc. and its subsidiaries.

 3 bit wide field per pin */

 Fixed-position function */

 Fixed-position function */

	/*

	 * Note that the SGIO pin is defined by *2* numbers, a port

	 * number between 0 and 31, and a bit index, 0 to 3.

 Calculate port mask */

 Disable interrupt while changing type */

 Type value spread over 2 registers sets: low, high bit */

 Possibly re-enable interrupts */

 Get overall bank struct */

 Disable all individual pins */

 Master enable */

 Get rest of device properties */

 sentinel */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Core driver for the pin config portions of the pin control subsystem

 *

 * Copyright (C) 2011 ST-Ericsson SA

 * Written on behalf of Linaro for ST-Ericsson

 *

 * Author: Linus Walleij <linus.walleij@linaro.org>

 We have to be able to config the pins in SOME way */

	/*

	 * FIXME: We should really get the pin controller to dump the config

	 * values, so they can be decoded to something meaningful.

 no-op when not using generic pin config */

 The pin number can be retrived from the pin controller descriptor */

 Skip if we cannot search the pin */

 no-op when not using generic pin config */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)

/*

 * Microsemi SoCs pinctrl driver

 *

 * Author: <alexandre.belloni@free-electrons.com>

 * License: Dual MIT/GPL

 * Copyright (c) 2017 Microsemi Corporation

 PINCONFIG bits (sparx5 only) */

 GPIO standard registers */

	/*

	 * f is encoded on two bits.

	 * bit 0 of f goes in BIT(pin) of ALT[0], bit 1 of f goes in BIT(pin) of

	 * ALT[1]

	 * This is racy because both registers can't be updated at the same time

	 * but it doesn't matter much for now.

	 * Note: ALT0/ALT1 are organized specially for 64 gpio targets

 PIN_CONFIG_BIAS_PULL_UP */

 Pinconf registers */

/*

 * Generic device tree based pinctrl driver for one register per pin

 * type pinmux controllers

 *

 * Copyright (C) 2012 Texas Instruments, Inc.

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

/**

 * struct pcs_func_vals - mux function register offset and value pair

 * @reg:	register virtual address

 * @val:	register value

 * @mask:	mask

/**

 * struct pcs_conf_vals - pinconf parameter, pinconf register offset

 * and value, enable, disable, mask

 * @param:	config parameter

 * @val:	user input bits in the pinconf register

 * @enable:	enable bits in the pinconf register

 * @disable:	disable bits in the pinconf register

 * @mask:	mask bits in the register value

/**

 * struct pcs_conf_type - pinconf property name, pinconf param pair

 * @name:	property name in DTS file

 * @param:	config parameter

/**

 * struct pcs_function - pinctrl function

 * @name:	pinctrl function name

 * @vals:	register and vals array

 * @nvals:	number of entries in vals array

 * @pgnames:	array of pingroup names the function uses

 * @npgnames:	number of pingroup names the function uses

 * @conf:	array of pin configurations

 * @nconfs:	number of pin configurations available

 * @node:	list node

/**

 * struct pcs_gpiofunc_range - pin ranges with same mux value of gpio function

 * @offset:	offset base of pins

 * @npins:	number pins with the same mux value of gpio function

 * @gpiofunc:	mux value of gpio function

 * @node:	list node

/**

 * struct pcs_data - wrapper for data needed by pinctrl framework

 * @pa:		pindesc array

 * @cur:	index to current element

 *

 * REVISIT: We should be able to drop this eventually by adding

 * support for registering pins individually in the pinctrl

 * framework for those drivers that don't need a static array.

/**

 * struct pcs_soc_data - SoC specific settings

 * @flags:	initial SoC specific PCS_FEAT_xxx values

 * @irq:	optional interrupt for the controller

 * @irq_enable_mask:	optional SoC specific interrupt enable mask

 * @irq_status_mask:	optional SoC specific interrupt status mask

 * @rearm:	optional SoC specific wake-up rearm function

/**

 * struct pcs_device - pinctrl device instance

 * @res:	resources

 * @base:	virtual address of the controller

 * @saved_vals: saved values for the controller

 * @size:	size of the ioremapped area

 * @dev:	device entry

 * @np:		device tree node

 * @pctl:	pin controller device

 * @flags:	mask of PCS_FEAT_xxx values

 * @missing_nr_pinctrl_cells: for legacy binding, may go away

 * @socdata:	soc specific data

 * @lock:	spinlock for register access

 * @mutex:	mutex protecting the lists

 * @width:	bits per mux register

 * @fmask:	function register mask

 * @fshift:	function register shift

 * @foff:	value to turn mux off

 * @fmax:	max number of functions in fmask

 * @bits_per_mux: number of bits per mux

 * @bits_per_pin: number of bits per pin

 * @pins:	physical pins on the SoC

 * @gpiofuncs:	list of gpio functions

 * @irqs:	list of interrupt registers

 * @chip:	chip container for this instance

 * @domain:	IRQ domain for this instance

 * @desc:	pin controller descriptor

 * @read:	register read function to use

 * @write:	register write function to use

/*

 * This lock class tells lockdep that irqchip core that this single

 * pinctrl can be in a different category than its parents, so it won't

 * report false recursion.

 Class for the IRQ request mutex */

/*

 * REVISIT: Reads and writes could eventually use regmap or something

 * generic. But at least on omaps, some mux registers are performance

 * critical as they may need to be remuxed every time before and after

 * idle. Adding tests for register access width for every read and

 * write like regmap is doing is not desired, and caching the registers

 * does not help in this case.

 If pin is not described in DTS & enabled, mux_setting is NULL. */

 If function mask is null, needn't enable it. */

 If function mask is null, return directly. */

 Clear BIAS value */

/*

 * Check whether PIN_CONFIG_BIAS_DISABLE is valid.

 * It's depend on that PULL_DOWN & PULL_UP configs are all invalid.

 4 parameters */

 2 parameters */

 2 parameters */

 4 parameters */

 for each config */

 configs do not match between two pins */

/**

 * pcs_add_pin() - add a pin to the static per controller pin array

 * @pcs: pcs driver instance

 * @offset: register offset from base

/**

 * pcs_allocate_pin_table() - adds all the pins for the pinctrl driver

 * @pcs: pcs driver instance

 *

 * In case of errors, resources are freed in pcs_free_resources.

 *

 * If your hardware needs holes in the address space, then just set

 * up multiple driver instances.

/**

 * pcs_add_function() - adds a new function to the function list

 * @pcs: pcs driver instance

 * @fcn: new function allocated

 * @name: name of the function

 * @vals: array of mux register value pairs used by the function

 * @nvals: number of mux register value pairs

 * @pgnames: array of pingroup names for the function

 * @npgnames: number of pingroup names

 *

 * Caller must take care of locking.

/**

 * pcs_get_pin_by_offset() - get a pin index based on the register offset

 * @pcs: pcs driver instance

 * @offset: register offset from the base

 *

 * Note that this is OK as long as the pins are in a static array.

/*

 * check whether data matches enable bits or disable bits

 * Return value: 1 for matching enable bits, 0 for matching disable bits,

 *               and negative value for matching failure.

 add pinconf setting with 2 parameters */

 set value & mask */

 skip enable & disable */

 add pinconf setting with 4 parameters */

 value to set, enable, disable, mask */

 If pinconf isn't supported, don't parse properties in below. */

 cacluate how much properties are supported in current node */

/**

 * pcs_parse_one_pinctrl_entry() - parses a device tree mux entry

 * @pcs: pinctrl driver instance

 * @np: device node of the mux entry

 * @map: map entry

 * @num_maps: number of map

 * @pgnames: pingroup names

 *

 * Note that this binding currently supports only sets of one register + value.

 *

 * Also note that this driver tries to avoid understanding pin and function

 * names because of the extra bloat they would cause especially in the case of

 * a large number of pins. This driver just sets what is specified for the board

 * in the .dts file. Further user space debugging tools can be developed to

 * decipher the pin and function names using debugfs.

 *

 * If you are concerned about the boot time, set up the static pins in

 * the bootloader, and only set up selected pins as device tree entries.

 Index plus two value cells */

 Parse pins in each row from LSB */

/**

 * pcs_dt_node_to_map() - allocates and parses pinctrl maps

 * @pctldev: pinctrl instance

 * @np_config: device tree pinmux entry

 * @map: array of map entries

 * @num_maps: number of maps

 create 2 maps. One is for pinmux, and the other is for pinconf. */

/**

 * pcs_irq_free() - free interrupt

 * @pcs: pcs driver instance

/**

 * pcs_free_resources() - free memory used by this driver

 * @pcs: pcs driver instance

 Do not treat it as error. Only treat it as end condition. */

/**

 * struct pcs_interrupt

 * @reg:	virtual address of interrupt register

 * @hwirq:	hardware irq number

 * @irq:	virtual irq number

 * @node:	list node

/**

 * pcs_irq_set() - enables or disables an interrupt

 * @pcs_soc: SoC specific settings

 * @irq: interrupt

 * @enable: enable or disable the interrupt

 *

 * Note that this currently assumes one interrupt per pinctrl

 * register that is typically used for wake-up events.

 flush posted write */

/**

 * pcs_irq_mask() - mask pinctrl interrupt

 * @d: interrupt data

/**

 * pcs_irq_unmask() - unmask pinctrl interrupt

 * @d: interrupt data

/**

 * pcs_irq_set_wake() - toggle the suspend and resume wake up

 * @d: interrupt data

 * @state: wake-up state

 *

 * Note that this should be called only for suspend and resume.

 * For runtime PM, the wake-up events should be enabled by default.

/**

 * pcs_irq_handle() - common interrupt handler

 * @pcs_soc: SoC specific settings

 *

 * Note that this currently assumes we have one interrupt bit per

 * mux register. This interrupt is typically used for wake-up events.

 * For more complex interrupts different handlers can be specified.

/**

 * pcs_irq_handler() - handler for the shared interrupt case

 * @irq: interrupt

 * @d: data

 *

 * Use this for cases where multiple instances of

 * pinctrl-single share a single interrupt like on omaps.

/**

 * pcs_irq_chain_handler() - handler for the dedicated chained interrupt case

 * @desc: interrupt descriptor

 *

 * Use this if you have a separate interrupt for each

 * pinctrl-single instance.

 REVISIT: export and add handle_bad_irq(irq, desc)? */

/**

 * pcs_irq_init_chained_handler() - set up a chained interrupt handler

 * @pcs: pcs driver instance

 * @np: device node pointer

	/*

	 * We can use the register offset as the hardirq

	 * number as irq_domain_add_simple maps them lazily.

	 * This way we can easily support more than one

	 * interrupt per function if needed.

/**

 * pcs_quirk_missing_pinctrl_cells - handle legacy binding

 * @pcs: pinctrl driver instance

 * @np: device tree node

 * @cells: number of cells

 *

 * Handle legacy binding with no #pinctrl-cells. This should be

 * always two pinctrl-single,bit-per-mux and one for others.

 * At some point we may want to consider removing this.

 If mask property doesn't exist, function mux is invalid. */

 We still need auxdata for some omaps for PRM interrupts */

 OMAP_WAKEUP_EN */

 OMAP_WAKEUP_EVENT */

 WAKEUPENABLE */

 WAKEUPEVENT */

 OMAP_WAKEUP_EN */

 OMAP_WAKEUP_EVENT */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * AXP20x pinctrl and GPIO driver

 *

 * Copyright (C) 2016 Maxime Ripard <maxime.ripard@free-electrons.com>

 * Copyright (C) 2017 Quentin Schulz <quentin.schulz@free-electrons.com>

 Stores the pins supporting LDO function. Bit offset is pin number. */

 Stores the pins supporting ADC function. Bit offset is pin number. */

	/*

	 * This shouldn't really happen if the pin is in use already,

	 * or if it's not in use yet, it doesn't matter since we're

	 * going to change the value soon anyway. Default to output.

	/*

	 * The GPIO directions are the three lowest values.

	 * 2 is input, 0 and 1 are output

 Every pin supports GPIO_OUT and GPIO_IN functions */

	/*

	 * We let the regulator framework handle the LDO muxing as muxing bits

	 * are basically also regulators on/off bits. It's better not to enforce

	 * any state of the regulator when selecting LDO mux so that we don't

	 * interfere with the regulator driver.

	/*

	 * Muxval for LDO is useless as we won't use it.

	 * See comment in axp20x_pmx_set_mux.

 Every pin supports GPIO_OUT and GPIO_IN functions */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinconf driver for TI DA850/OMAP-L138/AM18XX pullup/pulldown groups

 *

 * Copyright (C) 2016  David Lechner

 bias is disabled */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Ingenic SoCs pinctrl driver

 *

 * Copyright (c) 2017 Paul Cercueil <paul@crapouillou.net>

 * Copyright (c) 2017, 2019 Paul Boddie <paul@boddie.org.uk>

 * Copyright (c) 2019, 2020 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>

	/*

	 * JZ4730 function and IRQ registers support two-bits-per-pin

	 * definitions, split into two groups of 16.

		/*

		 * Switch to an interrupt for the opposite edge to the one that

		 * triggered the interrupt being ACKed.

		/*

		 * The hardware does not support interrupts on both edges. The

		 * best we can do is to set up a single-edge interrupt and then

		 * switch to the opposing edge when ACKing the interrupt.

	/*

	 * JZ4730 function and IRQ registers support two-bits-per-pin

	 * definitions, split into two groups of 16.

 unreachable */

 configs do not match between two pins */

	/* DO NOT EXPAND THIS: FOR BACKWARD GPIO NUMBERSPACE COMPATIBIBILITY

	 * ONLY: WORK TO TRANSITION CONSUMERS TO USE THE GPIO DESCRIPTOR API IN

	 * <linux/gpio/consumer.h> INSTEAD.

 fill in pinctrl_desc structure */

 sentinel */ },

/*

 * pinctrl-palmas.c -- TI PALMAS series pin control driver.

 *

 * Copyright (c) 2013, NVIDIA Corporation.

 *

 * Author: Laxman Dewangan <ldewangan@nvidia.com>

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any kind,

 * whether express or implied; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA

 * 02111-1307, USA

 If direct option is provided here */

 for each config */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Core driver for the pin muxing portions of the pin control subsystem

 *

 * Copyright (C) 2011-2012 ST-Ericsson SA

 * Written on behalf of Linaro for ST-Ericsson

 * Based on bits of regulator core, gpio core and clk core

 *

 * Author: Linus Walleij <linus.walleij@linaro.org>

 *

 * Copyright (C) 2012 NVIDIA CORPORATION. All rights reserved.

 Check that we implement required operations */

 Check that all functions registered have names */

/**

 * pinmux_can_be_used_for_gpio() - check if a specific pin

 *	is either muxed to a different function or used as gpio.

 *

 * @pctldev: the associated pin controller device

 * @pin: the pin number in the global pin space

 *

 * Controllers not defined as strict will always return true,

 * menaning that the gpio can be used.

 Can't inspect pin, assume it can be used */

/**

 * pin_request() - request a single pin to be muxed in, typically for GPIO

 * @pctldev: the associated pin controller device

 * @pin: the pin number in the global pin space

 * @owner: a representation of the owner of this pin; typically the device

 *	name that controls its mux function, or the requested GPIO name

 * @gpio_range: the range matching the GPIO pin if this is a request for a

 *	single GPIO pin

 Let each pin increase references to this module */

	/*

	 * If there is no kind of request function for the pin we just assume

	 * we got it by default and proceed.

 This requests and enables a single GPIO pin */

/**

 * pin_free() - release a single muxed in pin so something else can be muxed

 * @pctldev: pin controller device handling this pin

 * @pin: the pin to free

 * @gpio_range: the range matching the GPIO pin if this is a request for a

 *	single GPIO pin

 *

 * This function returns a pointer to the previous owner. This is used

 * for callers that dynamically allocate an owner name so it can be freed

 * once the pin is free. This is done for GPIO request functions.

		/*

		 * A pin should not be freed more times than allocated.

	/*

	 * If there is no kind of request function for the pin we just assume

	 * we got it by default and proceed.

/**

 * pinmux_request_gpio() - request pinmuxing for a GPIO pin

 * @pctldev: pin controller device affected

 * @pin: the pin to mux in for GPIO

 * @range: the applicable GPIO range

 * @gpio: number of requested GPIO

 Conjure some name stating what chip and pin this is taken by */

/**

 * pinmux_free_gpio() - release a pin from GPIO muxing

 * @pctldev: the pin controller device for the pin

 * @pin: the affected currently GPIO-muxed in pin

 * @range: applicable GPIO range

/**

 * pinmux_gpio_direction() - set the direction of a single muxed-in GPIO pin

 * @pctldev: the pin controller handling this pin

 * @range: applicable GPIO range

 * @pin: the affected GPIO pin in this controller

 * @input: true if we set the pin as input, false for output

 See if this pctldev has this function */

 This function is currently unused */

 errors only affect debug data, so just warn */

 Try to allocate all pins in this group, one by one */

 Now that we have acquired the pins, encode the mux setting */

 On error release all taken pins */

 errors only affect debug data, so just warn */

 Flag the descs that no setting is active */

 Called from pincontrol core */

 The pin number can be retrived from the pin controller descriptor */

 Skip if we cannot search the pin */

 For non-strict controllers */

 If mux: print function+group claiming the pin */

 remove leading and trailing spaces of input buffer */

 find a separator which is a spacelike character */

 drop extra spaces between function and group names */

 CONFIG_DEBUG_FS */

/**

 * pinmux_generic_get_function_count() - returns number of functions

 * @pctldev: pin controller device

/**

 * pinmux_generic_get_function_name() - returns the function name

 * @pctldev: pin controller device

 * @selector: function number

/**

 * pinmux_generic_get_function_groups() - gets the function groups

 * @pctldev: pin controller device

 * @selector: function number

 * @groups: array of pin groups

 * @num_groups: number of pin groups

/**

 * pinmux_generic_get_function() - returns a function based on the number

 * @pctldev: pin controller device

 * @selector: function number

/**

 * pinmux_generic_add_function() - adds a function group

 * @pctldev: pin controller device

 * @name: name of the function

 * @groups: array of pin groups

 * @num_groups: number of pin groups

 * @data: pin controller driver specific data

/**

 * pinmux_generic_remove_function() - removes a numbered function

 * @pctldev: pin controller device

 * @selector: function number

 *

 * Note that the caller must take care of locking.

/**

 * pinmux_generic_free_functions() - removes all functions

 * @pctldev: pin controller device

 *

 * Note that the caller must take care of locking. The pinctrl

 * functions are allocated with devm_kzalloc() so no need to free

 * them here.

 CONFIG_GENERIC_PINMUX_FUNCTIONS */

/*

 * Utils functions to implement the pincontrol driver.

 *

 * Copyright (c) 2013, NVIDIA Corporation.

 *

 * Author: Laxman Dewangan <ldewangan@nvidia.com>

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any kind,

 * whether express or implied; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA

 * 02111-1307, USA

/*

 * Pinctrl driver for NXP LPC18xx/LPC43xx System Control Unit (SCU)

 *

 * Copyright (C) 2015 Joachim Eastwood <manabian@gmail.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 LPC18XX SCU analog function registers */

 LPC18XX SCU pin register definitions */

 LPC18XX SCU pin interrupt select registers */

 LPC18xx pin types */

 Normal-drive */

 High-drive */

 High-speed */

 LPC18xx pin functions */

 Reserved */

 Analog pins are required to have both bias and input disabled */

 Macros to maniupluate analog member in lpc18xx_pin_caps */

 Pinmuxing table taken from data sheet */

    Pin    FUNC0  FUNC1  FUNC2  FUNC3   FUNC4   FUNC5   FUNC6    FUNC7 ANALOG TYPE */

    Pin      Offset FUNC0  FUNC1  FUNC2  FUNC3  FUNC4    FUNC5   FUNC6      FUNC7 ANALOG TYPE */

 Pin numbers for special pins */

 PIN_CONFIG_GPIO_PIN_INT: route gpio to the gpio pin interrupt controller */

	/*

	 * Check if this pin has been enabled as a interrupt in any of the two

	 * PINTSEL registers. *arg indicates which interrupt number (0-7).

 Dedicated USB1 and I2C0 pins doesn't support muxing */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2020 Intel Corporation */

 GPIO data registers' offsets */

 GPIO Interrupt and mode registers' offsets */

 GPIO mode register bit fields */

 GPIO reg address calculation */

/**

 * struct keembay_mux_desc - Mux properties of each GPIO pin

 * @mode: Pin mode when operating in this function

 * @name: Pin function name

/**

 * struct keembay_gpio_irq - Config of each GPIO Interrupt sources

 * @source: Interrupt source number (0 - 7)

 * @line: Actual Interrupt line number

 * @pins: Array of GPIO pins using this Interrupt line

 * @trigger: Interrupt trigger type for this line

 * @num_share: Number of pins currently using this Interrupt line

/**

 * struct keembay_pinctrl - Intel Keembay pinctrl structure

 * @pctrl: Pointer to the pin controller device

 * @base0: First register base address

 * @base1: Second register base address

 * @dev: Pointer to the device structure

 * @chip: GPIO chip used by this pin controller

 * @soc: Pin control configuration data based on SoC

 * @lock: Spinlock to protect various gpio config register access

 * @ngroups: Number of pin groups available

 * @nfuncs: Number of pin functions available

 * @npins: Number of GPIO pins available

 * @irq: Store Interrupt source

 * @max_gpios_level_type: Store max level trigger type

 * @max_gpios_edge_type: Store max edge trigger type

/**

 * struct keembay_pin_soc - Pin control config data based on SoC

 * @pins: Pin description structure

	/*

	 * This IP doesn't support the falling edge and low level interrupt

	 * trigger. Invert API is used to mimic the falling edge and low

	 * level support

 As per Pin Mux Map, Modes 0 to 6 are for peripherals */

 Change modes for pins in the selected group */

 Identify GPIO interrupt number from GIC interrupt number */

	/*

	 * Each Interrupt line can be shared by up to 4 GPIO pins. Enable bit

	 * and input values were checked to identify the source of the

	 * Interrupt. The checked enable bit positions are 7, 15, 23 and 31.

 Checks if the interrupt is enabled */

 Check if the value of pos/KEEMBAY_GPIO_NUM_IRQ is in valid range. */

 Retains val register as it handles other interrupts as well. */

 Check which Interrupt source and slot is available */

	/*

	 * The keembay_gpio_irq_ack function is needed to handle_edge_irq.

	 * IRQ ack is not possible from the SOC perspective. The IP by itself

	 * is used for handling interrupts which do not come in short-time and

	 * not used as protocol or communication interrupts. All the interrupts

	 * are threaded IRQ interrupts. But this function is expected to be

	 * present as the gpio IP is registered with irq framework. Otherwise

	 * handle_edge_irq() fails.

 Change EDGE_BOTH as EDGE_RISING in order to claim the IRQ for power button */

 Setup GPIO IRQ chip */

 Setup GPIO chip */

 Each pin is categorised as one group */

 Assign the groups for each function */

 Add all functions */

 Allocate total number of functions */

 Find total number of functions and each's properties */

 Reallocate memory based on actual number of functions */

 SPDX-License-Identifier: GPL-2.0-only

 MCP23S08 SPI GPIO driver */

/*

 * A given spi_device can represent up to eight mcp23sxx chips

 * sharing the same chipselect but using different addresses

 * (e.g. chips #0 and #3 might be populated, but not #1 or #2).

 * Driver data holds all the per-chip data.

 NOTE: The use of the mcp prefix is deprecated and will be removed. */

/*

 * Register after SPI postcore initcall and before

 * subsys initcalls that may rely on these GPIOs.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Apple SoC pinctrl+GPIO+external IRQ driver

 *

 * Copyright (C) The Asahi Linux Contributors

 * Copyright (C) 2020 Corellium LLC

 *

 * Based on: pinctrl-pistachio.c

 * Copyright (C) 2014 Imagination Technologies Ltd.

 * Copyright (C) 2014 Google, Inc.

 No locking needed to mask/unmask IRQs as the interrupt mode is per pin-register.

 Pin controller functions */

 Pin multiplexer functions */

 GPIO chip functions */

	/*

	 * If this is an input GPIO, read the actual value (not the

	 * cached regmap value)

 IRQ chip functions */

 Probe & register */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * GPIO driver for AMD

 *

 * Copyright (c) 2014,2015 AMD Corporation.

 * Authors: Ken Xue <Ken.Xue@amd.com>

 *      Wu, Jeff <Jeff.Wu@amd.com>

 *

 * Contact Information: Nehal Shah <Nehal-bakulchandra.Shah@amd.com>

 *			Shyam Sundar S K <Shyam-sundar.S-k@amd.com>

		/*

		Debounce	Debounce	Timer	Max

		TmrLarge	TmrOutUnit	Unit	Debounce

							Time

		0	0	61 usec (2 RtcClk)	976 usec

		0	1	244 usec (8 RtcClk)	3.9 msec

		1	0	15.6 msec (512 RtcClk)	250 msec

		1	1	62.5 msec (2048 RtcClk)	1 sec

 Illegal bank number, ignore */

	/*

	 * If WAKE_INT_MASTER_REG.MaskStsEn is set, a software write to the

	 * debounce registers of any GPIO will block wake/interrupt status

	 * generation for *all* GPIOs for a length of time that depends on

	 * WAKE_INT_MASTER_REG.MaskStsLength[11:0].  During this period the

	 * INTERRUPT_ENABLE bit will read as 0.

	 *

	 * We temporarily enable irq for the GPIO whose configuration is

	 * changing, and then wait for it to read back as 1 to know when

	 * debounce has settled and then disable the irq again.

	 * We do this polling with the spinlock held to ensure other GPIO

	 * access routines do not read an incorrect value for the irq enable

	 * bit of other GPIOs.  We keep the GPIO masked while polling to avoid

	 * spurious irqs, and disable the irq again after polling.

	/*

	 * based on HW design,there is no need to ack HW

	 * before handle current irq. But this routine is

	 * necessary for handle_edge_irq

	/*

	 * We need to set IRQCHIP_ENABLE_WAKEUP_ON_SUSPEND so that a wake event

	 * also generates an IRQ. We need the IRQ so the irq_handler can clear

	 * the wake event. Otherwise the wake event will never clear and

	 * prevent the system from suspending.

 Read the wake status */

 Bit 0-45 contain the relevant status bits */

 Each status bit covers four pins */

 caused wake on resume context for shared IRQ */

			/* Clear interrupt.

			 * We must read the pin register again, in case the

			 * value was changed while executing

			 * generic_handle_domain_irq() above.

			 * If we didn't find a mapping for the interrupt,

			 * disable it in order to avoid a system hang caused

			 * by an interrupt storm.

 did not cause wake on resume context for shared IRQ */

 Signal EOI to the GPIO unit */

	/*

	 * Only restore the pin if it is actually in use by the kernel (or

	 * by userspace).

 Disable and mask interrupts */

 This will let us handle the parent IRQ in the driver */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2019 Intel Corporation */

 0-15, 16-31 per register*/

 some groups may not have function, it's OK */

 Ignore the same function with multiple groups */

 Count gpio bank number */

 Count pin bank number and gpio controller number */

 Initialize Pin bank */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Zynq pin controller

 *

 *  Copyright (C) 2014 Xilinx

 *

 *  Sören Brinkmann <soren.brinkmann@xilinx.com>

/**

 * struct zynq_pinctrl - driver data

 * @pctrl:		Pinctrl device

 * @syscon:		Syscon regmap

 * @pctrl_offset:	Offset for pinctrl into the @syscon space

 * @groups:		Pingroups

 * @ngroups:		Number of @groups

 * @funcs:		Pinmux functions

 * @nfuncs:		Number of @funcs

/**

 * struct zynq_pinmux_function - a pinmux function

 * @name:	Name of the pinmux function.

 * @groups:	List of pingroups for this function.

 * @ngroups:	Number of entries in @groups.

 * @mux_val:	Selector for this function

 * @mux:	Offset of function specific mux

 * @mux_mask:	Mask for function specific selector

 * @mux_shift:	Shift for function specific selector

 pin groups */

 Note: CAN MIO clock inputs are modeled in the clock framework */

 function groups */

 pinctrl */

 pinmux */

	/*

	 * SD WP & CD are special. They have dedicated registers

	 * to mux them in

 pinconfig */

/*

 * PIN_CONFIG_IOSTANDARD: if the pin can select an IO standard, the argument to

 *	this parameter (on a custom format) tells the driver which alternative

 *	IO standard to use.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Conexant Digicolor General Purpose Pin Mapping

 *

 * Author: Baruch Siach <baruch@tkos.co.il>

 *

 * Copyright (C) 2015 Paradox Innovation Ltd.

 *

 * TODO:

 * - GPIO interrupt support

 * - Pin pad configuration (pull up/down, strength)

 Exactly one group per pin */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the Atmel PIO4 controller

 *

 * Copyright (C) 2015 Atmel,

 *               2015 Ludovic Desroches <ludovic.desroches@atmel.com>

/*

 * Warning:

 * In order to not introduce confusion between Atmel PIO groups and pinctrl

 * framework groups, Atmel PIO groups will be called banks, line is kept to

 * designed the pin id into this bank.

 Custom pinconf parameters */

/**

 * struct atmel_pioctrl_data - Atmel PIO controller (pinmux + gpio) data struct

 * @nbanks: number of PIO banks

 * @last_bank_count: number of lines in the last bank (can be less than

 *	the rest of the banks).

 * @slew_rate_support: slew rate support

/**

 * struct atmel_pioctrl - Atmel PIO controller (pinmux + gpio)

 * @reg_base: base address of the controller.

 * @clk: clock of the controller.

 * @nbanks: number of PIO groups, it can vary depending on the SoC.

 * @pinctrl_dev: pinctrl device registered.

 * @groups: groups table to provide group name and pin in the group to pinctrl.

 * @group_names: group names table to provide all the group/pin names to

 *     pinctrl or gpio.

 * @pins: pins table used for both pinctrl and gpio. pin_id, bank and line

 *     fields are set at probe time. Other ones are set when parsing dt

 *     pinctrl.

 * @npins: number of pins.

 * @gpio_chip: gpio chip registered.

 * @irq_domain: irq domain for the gpio controller.

 * @irqs: table containing the hw irq number of the bank. The index of the

 *     table is the bank id.

 * @pm_wakeup_sources: bitmap of wakeup sources (lines)

 * @pm_suspend_backup: backup/restore register values on suspend/resume

 * @dev: device entry for the Atmel PIO controller.

 * @node: node of the Atmel PIO controller.

 * @slew_rate_support: slew rate support

 --- GPIO --- */

	/*

	 * Nothing to do, interrupt is cleared when reading the status

	 * register.

 The gpio controller has one interrupt line per bank. */

 CONFIG_PM_SLEEP */

 Find from which bank is the irq received. */

/*

 * On a 64-bit platform, BITS_PER_LONG is 64 so it is necessary to iterate over

 * two 32bit words to handle the whole  bitmask

 --- PINCTRL --- */

 Have to set MSKR first, to access the right pin CFGR. */

 Have to set MSKR first, to access the right pin CFGR. */

 Want the device name not the group one. */

	/*

	 * Reserve maps, at least there is a mux map and an optional conf

	 * map for each pin.

	/*

	 * If all the pins of a device have the same configuration (or no one),

	 * it is useless to add a subnode, so directly parse node referenced by

	 * phandle.

 Keep slew rate enabled by default. */

				/*

				 * We don't care about the debounce value for several reasons:

				 * - can't have different debounce periods inside a same group,

				 * - the register to configure this period is a secure register.

				 * The debouncing filter can filter a pulse with a duration of less

				 * than 1/2 slow clock period.

 And remove it if explicitly requested. */

 ATMEL_PIO_DRVSTR_LO and 0 which is the default value at reset */

	/*

	 * For each bank, save IMR to restore it later and disable all GPIO

	 * interrupts excepting the ones marked as wakeup sources.

/*

 * The number of banks can be different from a SoC to another one.

 * We can have up to 16 banks.

 sama7g5 has only PE0 to PE7 */

 sentinel */

 if last bank has limited number of pins, adjust accordingly */

 One pin is one group since a pin can achieve all functions. */

 Pin naming convention: P(bank_name)(bank_pin_number). */

 There is one controller but each bank has its own irq line. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Dialog DA9062 pinctrl and GPIO driver.

 * Based on DA9055 GPIO driver.

 *

 * TODO:

 *   - add pinmux and pinctrl support (gpio alternate mode)

 *

 * Documents:

 * [1] https://www.dialog-semiconductor.com/sites/default/files/da9062_datasheet_3v6.pdf

 *

 * Copyright (C) 2019 Pengutronix, Marco Felsch <kernel@pengutronix.de>

/*

 * We need this get the gpio_desc from a <gpio_chip,offset> tuple to decide if

 * the gpio is active low without a vendor specific dt-binding.

 gpio alternate mode */

 gpio in */

 gpio out open-drain */

 gpio out push-pull */

	/*

	 * If the gpio is active low we should set it in hw too. No worries

	 * about gpio_get() because we read and return the gpio-level. So the

	 * gpiolib active_low handling is still correct.

	 *

	 * 0 - active low, 1 - active high

	/*

	 * We need to meet the following restrictions [1, Figure 18]:

	 * - PIN_CONFIG_BIAS_PULL_DOWN -> only allowed if the pin is used as

	 *				  gpio input

	 * - PIN_CONFIG_BIAS_PULL_UP   -> only allowed if the pin is used as

	 *				  gpio output open-drain.

	/*

	 * Currently the driver handles only the GPIO support. The

	 * pinctrl/pinmux support can be added later if needed.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Oxford Semiconductor OXNAS SoC Family pinctrl driver

 *

 * Copyright (C) 2016 Neil Armstrong <narmstrong@baylibre.com>

 *

 * Based on pinctrl-pic32.c

 * Joshua Henderson, <joshua.henderson@microchip.com>

 * Copyright (C) 2015 Microchip Technology Inc.  All rights reserved.

 OX810 Regmap Offsets */

 OX820 Regmap Offsets */

 GPIO Registers */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/pinctrl/pinmux-xway.c

 *  based on linux/drivers/pinctrl/pinmux-pxa910.c

 *

 *  Copyright (C) 2012 John Crispin <john@phrozen.org>

 *  Copyright (C) 2015 Martin Schiller <mschiller@tdt.de>

 we have up to 4 banks of 16 bit each */

 we have 2 mux bits that can be set for each pin */

/*

 * each bank has this offset apart from the 4th bank that is mixed into the

 * other 3 ranges

 these are the offsets to our registers */

 the 4th port needs special offsets for some registers */

 macros to help us access the registers */

 ---------  DEPRECATED: xr9 related code --------- */

 ----------  use xrx100/xrx200 instead  ---------- */

       pin    f0	f1	f2	f3   */

 xrx only */

 ar9/vr9/gr9 */

 ---------  ase related code --------- */

       pin    f0	f1	f2	f3   */

 DEPRECATED */

 DEPRECATED */

 DEPRECATED */

 ---------  danube related code --------- */

       pin    f0	f1	f2	f3   */

 DEPRECATED */

 DEPRECATED */

 DEPRECATED */

 ---------  xrx100 related code --------- */

       pin    f0	f1	f2	f3   */

 ---------  xrx200 related code --------- */

       pin    f0	f1	f2	f3   */

 ---------  xrx300 related code --------- */

       pin    f0	f1	f2	f3   */

 EXIN3 is not available on xrX300 */

 SPI_CS2 is not available on xrX300 */

 SPI_CS3 is not available on xrX300 */

 SPI_CS5 is not available on xrX300 */

 CLKOUT0 is not available on xrX300 */

 CLKOUT1 is not available on xrX300 */

 ---------  pinconf related code --------- */

 for each config */

 ---------  gpio_chip related code --------- */

/*

 * gpiolib gpiod_to_irq callback function.

 * Returns the mapped IRQ (external interrupt) number for a given GPIO pin.

 --------- register the pinctrl layer --------- */

 xway xr9 series (DEPRECATED: Use XWAY xRX100/xRX200 Family) */

 XWAY AMAZON Family */

 XWAY DANUBE Family */

 XWAY xRX100 Family */

 XWAY xRX200 Family */

 XWAY xRX300 Family */

DEPRECATED*/

DEPRECATED*/

DEPRECATED*/

 get and remap our register range */

 find out how many pads we have */

 load our pad descriptors */

 setup the data needed by pinctrl */

 register with the generic lantiq layer */

 register the gpio chip */

	/*

	 * For DeviceTree-supported systems, the gpio core checks the

	 * pinctrl's device node for the "gpio-ranges" property.

	 * If it is present, it takes care of adding the pin ranges

	 * for the driver. In this case the driver can skip ahead.

	 *

	 * In order to remain compatible with older, existing DeviceTree

	 * files which don't set the "gpio-ranges" property or systems that

	 * utilize ACPI the driver has to call gpiochip_add_pin_range().

 finish with registering the gpio range in pinctrl */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Bitmain BM1880 SoC Pinctrl driver

 *

 * Copyright (c) 2019 Linaro Ltd.

 * Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>

/**

 * struct bm1880_pinctrl - driver data

 * @base:	Pinctrl base address

 * @pctrldev:	Pinctrl device

 * @groups:	Pingroups

 * @ngroups:	Number of @groups

 * @funcs:	Pinmux functions

 * @nfuncs:	Number of @funcs

 * @pinconf:	Pinconf data

/**

 * struct bm1880_pctrl_group - pinctrl group

 * @name:	Name of the group

 * @pins:	Array of pins belonging to this group

 * @npins:	Number of @pins

/**

 * struct bm1880_pinmux_function - a pinmux function

 * @name:	Name of the pinmux function.

 * @groups:	List of pingroups for this function.

 * @ngroups:	Number of entries in @groups.

 * @mux_val:	Selector for this function

 * @mux:	Offset of function specific mux

 * @mux_shift:	Shift for function specific selector

/**

 * struct bm1880_pinconf_data - pinconf data

 * @drv_bits:	Drive strength bit width

 pinmux */

	/*

	 * There are two sets of drive strength bit width exposed by the

	 * SoC at 4mA step, hence we need to handle them separately.

	/*

	 * There are two sets of drive strength bit width exposed by the

	 * SoC at 4mA step, hence we need to handle them separately.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2016, BayLibre, SAS. All rights reserved.

 * Author: Neil Armstrong <narmstrong@baylibre.com>

 *

 * Copyright (c) 2010, Code Aurora Forum. All rights reserved.

 *

 * Driver for Semtech SX150X I2C GPIO Expanders

 * The handling of the 4-bit chips (SX1501/SX1504/SX1507) is untested.

 *

 * Author: Gregory Bean <gbean@codeaurora.org>

 The chip models of sx150x */

 oscio not available */

 oscio not available */

 oscio not available */

 oscio not available */

 oscio not available */

 oscio not available */

 OSCIO pin is only present in 789 devices */

	/*

	 * Every interrupt line is represented by two bits shifted

	 * proportionally to the line number

 for each config */

		/*

		 * Only SX1506 has RegAdvanced, SX1504/5 are expected

		 * to initialize this offset to zero

 Set all pins to work in normal mode */

		/*

		 * RegSense packs two bits of configuration per GPIO,

		 * so we'd need to read twice as many bits as there

		 * are GPIO in our chip

	/*

	 * Whereas SX1509 presents RegSense in a simple layout as such:

	 *	reg     [ f f e e d d c c ]

	 *	reg + 1 [ b b a a 9 9 8 8 ]

	 *	reg + 2 [ 7 7 6 6 5 5 4 4 ]

	 *	reg + 3 [ 3 3 2 2 1 1 0 0 ]

	 *

	 * SX1503 and SX1506 deviate from that data layout, instead storing

	 * their contents as follows:

	 *

	 *	reg     [ f f e e d d c c ]

	 *	reg + 1 [ 7 7 6 6 5 5 4 4 ]

	 *	reg + 2 [ b b a a 9 9 8 8 ]

	 *	reg + 3 [ 3 3 2 2 1 1 0 0 ]

	 *

	 * so, taking that into account, we swap two

	 * inner bytes of a 4-byte result

/*

 * In order to mask the differences between 16 and 8 bit expander

 * devices we set up a sligthly ficticious regmap that pretends to be

 * a set of 32-bit (to accommodate RegSenseLow/RegSenseHigh

 * pair/quartet) registers and transparently reconstructs those

 * registers via multiple I2C/SMBus reads

 *

 * This way the rest of the driver code, interfacing with the chip via

 * regmap API, can work assuming that each GPIO pin is represented by

 * a group of bits at an offset proportional to GPIO number within a

 * given register.

	/*

	 * There are four potential cases covered by this function:

	 *

	 * 1) 8-pin chip, single configuration bit register

	 *

	 *	This is trivial the code below just needs to read:

	 *		reg  [ 7 6 5 4 3 2 1 0 ]

	 *

	 * 2) 8-pin chip, double configuration bit register (RegSense)

	 *

	 *	The read will be done as follows:

	 *		reg      [ 7 7 6 6 5 5 4 4 ]

	 *		reg + 1  [ 3 3 2 2 1 1 0 0 ]

	 *

	 * 3) 16-pin chip, single configuration bit register

	 *

	 *	The read will be done as follows:

	 *		reg     [ f e d c b a 9 8 ]

	 *		reg + 1 [ 7 6 5 4 3 2 1 0 ]

	 *

	 * 4) 16-pin chip, double configuration bit register (RegSense)

	 *

	 *	The read will be done as follows:

	 *		reg     [ f f e e d d c c ]

	 *		reg + 1 [ b b a a 9 9 8 8 ]

	 *		reg + 2 [ 7 7 6 6 5 5 4 4 ]

	 *		reg + 3 [ 3 3 2 2 1 1 0 0 ]

 Pinctrl_desc */

 Register GPIO controller */

	/*

	 * Setting multiple pins is not safe when all pins are not

	 * handled by the same regmap register. The oscio pin (present

	 * on the SX150X_789 chips) lives in its own register, so

	 * would require locking that is not in place at this time.

 Add Interrupt support if an irq is specified */

		/*

		 * Because sx150x_irq_threaded_fn invokes all of the

		 * nested interrupt handlers via handle_nested_irq,

		 * any "handler" assigned to struct gpio_irq_chip

		 * below is going to be ignored, so the choice of the

		 * function does not matter that much.

		 *

		 * We set it to handle_bad_irq to avoid confusion,

		 * plus it will be instantly noticeable if it is ever

		 * called (should not happen)

 This will let us handle the parent IRQ in the driver */

	/*

	 * Pin control functions need to be enabled AFTER registering the

	 * GPIO chip because sx150x_pinconf_set() calls

	 * sx150x_gpio_direction_output().

/*

 * Driver for the Axis ARTPEC-6 pin controller

 *

 * Author: Chris Paterson <chris.paterson@linux.pieboy.co.uk>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 97 pins in pinmux */

 Last pin with muxable function */

 Pinmux control register bit definitions */

 Pinmux configurations */

 Pin drive strength options */

 pins */

 All pins. */

 RX/TX and RTS/CTS */

 Only RX/TX pins. */

 RX/TX and RTS/CTS */

 Only RX/TX pins. */

 Full pinout */

 RX/TX and RTS/CTS */

 Only RX/TX */

 RX/TX and CTS/RTS */

 Only RX/TX */

 TX/RX and RTS/CTS */

 Only TX/RX */

 TX/RX/RTS */

/*

 * The register map has two holes where the pin number

 * no longer fits directly with the register offset.

 * This table allows us to map this easily.

 0x0 - 0x8c */

 0x100 - 0x140 */

 0x180 - 0x22c */

	/*

	 * Anything we return here is wrong, but we can only

	 * get here if pin is outside registered range.

 Shouldn't happen */

		/*

		 * Registers for pins above a ARTPEC6_MAX_MUXABLE

		 * do not have a SEL field and are always selected.

 GPIO is always config 0 */

 Check for valid pin */

 Read pin register values */

 If valid, get configuration for parameter */

/*

 * Valid combinations of param and arg:

 *

 * param		     arg

 * PIN_CONFIG_BIAS_DISABLE:   x (disable bias)

 * PIN_CONFIG_BIAS_PULL_UP:   1 (pull up bias + enable)

 * PIN_CONFIG_BIAS_PULL_DOWN: 1 (pull down bias + enable)

 * PIN_CONFIG_DRIVE_STRENGTH: x (4mA, 6mA, 8mA, 9mA)

 *

 * All other args are invalid. All other params are not supported.

 Check for valid pin */

 For each config */

 Enable */

 Enable */

 The reset values say 4mA, but we want 8mA as default. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Abilis Systems TB10x pin control driver

 *

 * Copyright (C) Abilis Systems 2012

 *

 * Author: Christian Ruppert <christian.ruppert@abilis.com>

 Port 1 */

 Port 2 */

 Port 3 */

 Port 4 */

 Port 5 */

 Port 6 */

 Port 7 */

 Port 8 */

 Port 9 */

 Unmuxed GPIOs */

 Port 1 */

 Port 2 */

 Port 3 */

 Port 4 */

 Port 6 */

 Port 7 */

 Port 8 */

 Port 9 */

 Port 5 */

 Unmuxed GPIOs */

/**

 * struct tb10x_port - state of an I/O port

 * @mode: Node this port is currently in.

 * @count: Number of enabled functions which require this port to be

 *         configured in @mode.

/**

 * struct tb10x_pinctrl - TB10x pin controller internal state

 * @pctl: pointer to the pinctrl_dev structure of this pin controller.

 * @base: register set base address.

 * @pingroups: pointer to an array of the pin groups this driver manages.

 * @pinfuncgrpcnt: number of pingroups in @pingroups.

 * @pinfuncnt: number of pin functions in @pinfuncs.

 * @mutex: mutex for exclusive access to a pin controller's state.

 * @ports: current state of each port.

 * @gpios: Indicates if a given pin is currently used as GPIO (1) or not (0).

 * @pinfuncs: flexible array of pin functions this driver manages.

	/*

	 * Figure out to which port the requested GPIO belongs and how to

	 * configure that port.

	 * This loop also checks for pin conflicts between GPIOs and other

	 * functions.

		/*

		 * Skip pin groups which are always mapped and don't need

		 * to be configured.

					/*

					 * Remember the GPIO-only setting of

					 * the port this pin belongs to.

					/*

					 * Error: The requested pin is already

					 * used for something else.

	/*

	 * If we haven't returned an error at this point, the GPIO pin is not

	 * used by another function and the GPIO request can be granted:

	 * Register pin as being used as GPIO so we don't allocate it to

	 * another function later.

	/*

	 * Potential conflicts between GPIOs and pin functions were caught

	 * earlier in this function and tb10x_pinctrl_set_config will do the

	 * Right Thing, either configure the port in GPIO only mode or leave

	 * another mode compatible with this GPIO request untouched.

	/*

	 * Check if the requested function is compatible with previously

	 * requested functions.

	/*

	 * Check if the requested function is compatible with previously

	 * requested GPIOs.

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for STMicroelectronics Multi-Function eXpander (STMFX) GPIO expander

 *

 * Copyright (C) 2019 STMicroelectronics

 * Author(s): Amelie Delaunay <amelie.delaunay@st.com>.

 GPIOs expander */

 GPIO_STATE1 0x10, GPIO_STATE2 0x11, GPIO_STATE3 0x12 */

 R */

 GPIO_DIR1 0x60, GPIO_DIR2 0x61, GPIO_DIR3 0x63 */

 RW */

 GPIO_TYPE1 0x64, GPIO_TYPE2 0x65, GPIO_TYPE3 0x66 */

 RW */

 GPIO_PUPD1 0x68, GPIO_PUPD2 0x69, GPIO_PUPD3 0x6A */

 RW */

 GPO_SET1 0x6C, GPO_SET2 0x6D, GPO_SET3 0x6E */

 RW */

 GPO_CLR1 0x70, GPO_CLR2 0x71, GPO_CLR3 0x72 */

 RW */

 IRQ_GPI_SRC1 0x48, IRQ_GPI_SRC2 0x49, IRQ_GPI_SRC3 0x4A */

 RW */

 IRQ_GPI_EVT1 0x4C, IRQ_GPI_EVT2 0x4D, IRQ_GPI_EVT3 0x4E */

 RW */

 IRQ_GPI_TYPE1 0x50, IRQ_GPI_TYPE2 0x51, IRQ_GPI_TYPE3 0x52 */

 RW */

 IRQ_GPI_PENDING1 0x0C, IRQ_GPI_PENDING2 0x0D, IRQ_GPI_PENDING3 0x0E*/

 R */

 IRQ_GPI_ACK1 0x54, IRQ_GPI_ACK2 0x55, IRQ_GPI_ACK3 0x56 */

 RW */

/*

 * STMFX pinctrl can have up to 24 pins if STMFX other functions are not used.

 * Pins availability is managed thanks to gpio-ranges property.

 IRQ bus lock */

 Cache of IRQ_GPI_* registers for bus_lock */

 Backup of GPIO_* registers for suspend/resume */

	/*

	 * On stmfx, gpio pins direction is (0)input, (1)output.

	/*

	 * Currently the gpiolib IN is 1 and OUT is 0 but let's not count

	 * on it just to be on the safe side also in the future :)

	/*

	 * In case of (type & IRQ_TYPE_EDGE_BOTH), we need to know current

	 * GPIO value to set the right edge trigger. But in atomic context

	 * here we can't access registers over I2C. That's why (type &

	 * IRQ_TYPE_EDGE_BOTH) will be managed in .irq_sync_unlock.

	/*

	 * In case of IRQ_TYPE_EDGE_BOTH), read the current GPIO value

	 * (this couldn't be done in .irq_set_type because of atomic context)

	 * to set the right irq trigger type.

 Register pin controller */

 Register gpio controller */

 This will let us handle the parent IRQ in the driver */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2020 Sean Anderson <seanga2@gmail.com>

 * Copyright (c) 2020 Western Digital Corporation or its affiliates.

/*

 * The K210 only implements 8 drive levels, even though

 * there is register space for 16

/*

 * output enabled == PC_OE & (PC_OE_INV ^ FUNCTION_OE)

 * where FUNCTION_OE is a physical signal from the function.

 Output Enable */

 INVert Output Enable */

 set Data Out to Output Enable sig */

 INVert final Data Output */

 Pull Up */

 Pull Down */

 Strong pull up not implemented on K210 */

 reduce SLew rate */

 Same semantics as OE above */

 Input Enable */

 INVert Input Enable */

 INVert Data Input */

 Schmitt Trigger */

 raw Data Input */

/*

 * struct k210_fpioa: Kendryte K210 FPIOA memory mapped registers

 * @pins: 48 32-bits IO pin registers

 * @tie_en: 256 (one per function) input tie enable bits

 * @tie_val: 256 (one per function) input tie value bits

/*

 * Pin groups: each of the 48 programmable pins is a group.

 * To this are added 8 power domain groups, which for the purposes of

 * the pin subsystem, contain no pins. The power domain groups only exist

 * to set the power level. The id should never be used (since there are

 * no pins 48-55).

 The first 48 groups are for pins, one each */

/*

 * Pin functions configuration information.

/*

 * Max drive strength in uA.

 Pins should be configured with pinmux, not groups*/

 Otherwise it's a power domain */

 Any function can be mapped to any pin */

 Can't mux power domains */

 Ignore this node */

 Init pin functions input ties */

 Set value before enable */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * at91 pinctrl driver based on at91 pinmux core

 *

 * Copyright (C) 2011-2012 Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>

 Since we request GPIOs from ourself */

 Bank sharing same clock */

 PIO bank interrupt identifier on AIC */

 PIO bank Linux virtual interrupt */

 PIO bank index */

 PIO bank virtual address */

 associated clock */

 ops */

/*

 * These defines will translated the dt binding settings to our internal

 * settings. They are not necessarily the same value as the register setting.

 * The actual drive strength current of low, medium and high must be looked up

 * from the corresponding device datasheet. This value is different for pins

 * that are even in the same banks. It is also dependent on VCC.

 * DRIVE_STRENGTH_DEFAULT is just a placeholder to avoid changing the drive

 * strength when there is no dt config for it.

/**

 * struct at91_pmx_func - describes AT91 pinmux functions

 * @name: the name of this specific function

 * @groups: corresponding pin groups

 * @ngroups: the number of groups

/**

 * struct at91_pmx_pin - describes an At91 pin mux

 * @bank: the bank of the pin

 * @pin: the pin number in the @bank

 * @mux: the mux mode : gpio or periph_x of the pin i.e. alternate function.

 * @conf: the configuration of the pin: PULL_UP, MULTIDRIVE etc...

/**

 * struct at91_pin_group - describes an At91 pin group

 * @name: the name of this specific pin group

 * @pins_conf: the mux mode for each pin in this group. The size of this

 *	array is the same as pins.

 * @pins: an array of discrete physical pins used in this group, taken

 *	from the driver-local pin enumeration space

 * @npins: the number of pins in this group array, i.e. the number of

 *	elements in .pins so we can iterate over that array

/**

 * struct at91_pinctrl_mux_ops - describes an AT91 mux ops group

 * on new IP with support for periph C and D the way to mux in

 * periph A and B has changed

 * So provide the right call back

 * if not present means the IP does not support it

 * @get_periph: return the periph mode configured

 * @mux_A_periph: mux as periph A

 * @mux_B_periph: mux as periph B

 * @mux_C_periph: mux as periph C

 * @mux_D_periph: mux as periph D

 * @get_deglitch: get deglitch status

 * @set_deglitch: enable/disable deglitch

 * @get_debounce: get debounce status

 * @set_debounce: enable/disable debounce

 * @get_pulldown: get pulldown status

 * @set_pulldown: enable/disable pulldown

 * @get_schmitt_trig: get schmitt trigger status

 * @disable_schmitt_trig: disable schmitt trigger

 * @get_drivestrength: get driver strength

 * @set_drivestrength: set driver strength

 * @get_slewrate: get slew rate

 * @set_slewrate: set slew rate

 * @irq_type: return irq type

 irq */

	/*

	 * first find the group of this node and check if we need to create

	 * config maps for pins

 create mux map */

 create config map */

	/* return the shift value for a pin for "two bit" per pin registers,

	/* drive strength is split between two registers

	/* drive strength is split between two registers

	/* SAMA5 strength is 1:1 with our defines,

	/* strength is inverse in SAM9x5s hardware with the pinctrl defines

 do nothing if setting is zero */

 strength is 1 to 1 with setting for SAMA5 */

 do nothing if setting is zero */

	/* strength is inverse on SAM9x5s with our defines

 Strength is 0: low, 1: hi */

 check if it's a valid config */

	/* first check that all the pins of the group are valid with a valid

 Set the pin to some default state, GPIO is usually default */

 for each config */

 Initialise group */

	/*

	 * the binding format is atmel,pins = <bank pin mux CONFIG ...>,

	 * do sanity check and calculate pins number

 we do not check return since it's safe node passed down */

 Initialise function */

 sentinel */ }

	/*

	 * We need all the GPIO drivers to probe FIRST, or we will not be able

	 * to obtain references to the struct gpio_chip * for them, and we

	 * need this to proceed.

 We will handle a range of GPIO pins */

 Mask additionally to ngpio as not all GPIO controllers have 32 pins */

/* Several AIC controller irqs are dispatched through this GPIO handler.

 * To use any AT91_PIN_* as an externally triggered IRQ, first call

 * at91_set_gpio_input() then maybe enable its glitch filter.

 * Then just request_irq() with the pin ID; it works like any ARM IRQ

 * handler.

 * First implementation always triggers on rising and falling edges

 * whereas the newer PIO3 can be additionally configured to trigger on

 * level, edge with any polarity.

 *

 * Alternatively, certain pins may be used directly as IRQ0..IRQ6 after

 * configuring them with at91_set_a_periph() or at91_set_b_periph().

 * IRQ0..IRQ6 should be configurable, e.g. level vs edge triggering.

 Alternate irq type for PIO3 support */

		/*

		 * disable additional interrupt modes:

		 * fall back to default behavior

 enable additional interrupt modes */

 the interrupt is already cleared before by reading ISR */

 CONFIG_PM */

		/* Reading ISR acks pending (edge triggered) GPIO interrupts.

		 * When there are none pending, we're finished unless we need

		 * to process multiple banks (like ID_PIOCDE on sam9263).

 now it may re-trigger */

 Disable irqs of this PIO controller */

	/*

	 * Let the generic code handle this edge IRQ, the the chained

	 * handler will perform the actual work of handling the parent

	 * interrupt.

	/*

	 * The top level handler handles one bank of GPIOs, except

	 * on some SoC it can handle up to three...

	 * We only set up the handler for the first of the list.

 we can only have 2 banks before */

 This structure is replicated for each GPIO block allocated at probe time */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/pinctrl/pinmux-falcon.c

 *  based on linux/drivers/pinctrl/pinmux-pxa910.c

 *

 *  Copyright (C) 2012 Thomas Langer <thomas.langer@lantiq.com>

 *  Copyright (C) 2012 John Crispin <john@phrozen.org>

 Multiplexer Control Register */

 Pull Up Enable Register */

 Pull Down Enable Register */

 Slew Rate Control Register */

 Drive Current Control Register */

 Pad Control Availability Register */

	pin		f0	f1	f2	f3 */

 ---------  pinconf related code --------- */

 for each config */

 --------- register the pinctrl layer --------- */

 load and remap the pad resources of the different banks */

/*

 * Driver for the Gemini pin controller

 *

 * Copyright (C) 2017 Linus Walleij <linus.walleij@linaro.org>

 *

 * This is a group-only pin controller.

/**

 * struct gemini_pin_conf - information about configuring a pin

 * @pin: the pin number

 * @reg: config register

 * @mask: the bits affecting the configuration of the pin

/**

 * struct gemini_pmx - state holder for the gemini pin controller

 * @dev: a pointer back to containing device

 * @virtbase: the offset to the controller in virtual memory

 * @map: regmap to access registers

 * @is_3512: whether the SoC/package is the 3512 variant

 * @is_3516: whether the SoC/package is the 3516 variant

 * @flash_pin: whether the flash pin (extended pins for parallel

 * flash) is set

 * @confs: pin config information

 * @nconfs: number of pin config information items

/**

 * struct gemini_pin_group - describes a Gemini pin group

 * @name: the name of this specific pin group

 * @pins: an array of discrete physical pins used in this group, taken

 *	from the driver-local pin enumeration space

 * @num_pins: the number of pins in this group array, i.e. the number of

 *	elements in .pins so we can iterate over that array

 * @mask: bits to clear to enable this when doing pin muxing

 * @value: bits to set to enable this when doing pin muxing

 * @driving_mask: bitmask for the IO Pad driving register for this

 *	group, if it supports altering the driving strength of

 *	its lines.

 Some straight-forward control registers */

/*

 * Global Miscellaneous Control Register

 * This register controls all Gemini pad/pin multiplexing

 *

 * It is a tricky register though:

 * - For the bits named *_ENABLE, once you DISABLE something, it simply cannot

 *   be brought back online, so it means permanent disablement of the

 *   corresponding pads.

 * - For the bits named *_DISABLE, once you enable something, it cannot be

 *   DISABLED again. So you select a flash configuration once, and then

 *   you are stuck with it.

 Not really used */

 Activated with GMAC1 */

 This will be the default */

 Ordered by bit index */

 Row A */

 Row B */

 Row C */

 REALLY? CIR is not in 3512... */

 Row D */

 Row E */

 Row F */

 Row G */

 Row H */

 Row J (for some reason I is skipped) */

 Row K */

 Row L */

 Row M */

 Row N */

 Row P (for some reason O is skipped) */

 Row R (for some reason Q is skipped) */

 Row T (for some reason S is skipped) */

 Row U */

 Row V */

 Digital ground */

 GMII, ethernet pins */

/*

 * Apparently the LPC interface is using the PCICLK for the clocking so

 * PCI needs to be active at the same time.

 LPC_LAD[0] */

 LPC_SERIRQ */

 LPC_LAD[2] */

 LPC_LFRAME# */

 LPC_LAD[3] */

 LPC_LAD[1] */

 Character LCD */

 SSP_97RST# SSP AC97 Reset, active low */

 SSP_FSC */

 SSP_ECLK */

 SSP_TXD */

 SSP_RXD */

 SSP_SCLK */

 UART_SIN serial input, RX */

 UART_SOUT serial output, TX */

 UART_NDCD DCD carrier detect */

 UART_NDTR DTR data terminal ready */

 UART_NDSR DSR data set ready */

 UART_NRTS RTS request to send */

 UART_NCTS CTS clear to send */

 UART_NRI RI ring indicator */

 TVC_DATA[0] */

 TVC_DATA[1] */

 TVC_DATA[2] */

 TVC_DATA[3] */

 TVC_DATA[4] */

 TVC_DATA[5] */

 TVC_DATA[6] */

 TVC_DATA[7] */

 TVC_CLK */

 NAND flash pins */

 Parallel (NOR) flash pins, D[0-15], A[16-25], CE0, CE1, RB, WE, OE, ALE */

/*

 * The parallel flash can be set up in a 26-bit address bus mode exposing

 * A[0-15] (A[15] takes the place of ALE), but it has the

 * side effect of stealing pins from GMAC1 and TVC so these blocks cannot be

 * used at the same time.

 The extra pins */

 Serial flash pins CE0, CE1, DI, DO, CK */

 The GPIO0A (0) pin overlap with TVC CLK and extended parallel flash */

 The GPIO0B (1-4) pins overlap with TVC and ICE */

 The GPIO0C (5-7) pins overlap with ICE */

 The GPIO0D (9,10) pins overlap with UART RX/TX */

 The GPIO0E (8,11-15) pins overlap with LPC, UART modem pins, SSP */

 The GPIO0F (16) pins overlap with LCD */

 The GPIO0G (17,18) pins overlap with NAND flash CE0, CE1 */

 The GPIO0H (19,20) pins overlap with parallel flash CE0, CE1 */

 The GPIO0I (21,22) pins overlap with serial flash CE0, CE1 */

 The GPIO0J (23) pins overlap with all flash */

 The GPIO0K (24,25) pins overlap with all flash and LCD */

 The GPIO0L (26-29) pins overlap with parallel flash */

 The GPIO0M (30,31) pins overlap with parallel flash and NAND flash */

 The GPIO1A (0-4) pins that overlap with IDE and parallel flash */

 The GPIO1B (5-10, 27) pins overlap with just IDE */

 The GPIO1C (11-26) pins overlap with IDE, parallel flash and NAND flash */

 The GPIO1D (28-31) pins overlap with LCD and TVC */

 The GPIO2A (0-3) pins overlap with GMII GMAC1 and extended parallel flash */

 The GPIO2B (4-7) pins overlap with GMII GMAC1, extended parallel flash and LCD */

 The GPIO2C (8-31) pins overlap with PCI */

 Groups for the 3512 SoC/package */

 Conflict with some GPIO groups */

 Conflict with all flash usage */

 Bring out RGMII on the GMAC1 pins */

 Conflict only with GPIO2 */

 Conflict with SSP and UART modem pins */

 Conflict with TVC and ICE */

 Conflict with LPC and UART modem pins */

 No conflicts except GPIO */

		/*

		 * Conflict with LPC and SSP,

		 * so when those are both disabled, modem UART can thrive.

 Conflict with character LCD and ICE */

	/*

	 * The construction is done such that it is possible to use a serial

	 * flash together with a NAND or parallel (NOR) flash, but it is not

	 * possible to use NAND and parallel flash together. To use serial

	 * flash with one of the two others, the muxbits need to be flipped

	 * around before any access.

 Conflict with IDE, parallel and serial flash */

 Conflict with IDE, NAND and serial flash */

 Conflict with IDE, NAND and parallel flash */

 Conflict with TVC CLK */

 Conflict with TVC and ICE */

 Conflict with ICE */

 Conflict with UART RX/TX */

 Conflict with LPC, UART modem pins, SSP */

 Conflict with LCD */

 Conflict with NAND flash */

 Conflict with parallel flash */

 Conflict with serial flash */

 Conflict with all flash */

 Conflict with all flash and LCD */

 Conflict with parallel flash */

 Conflict with parallel and NAND flash */

 Conflict with IDE and parallel flash */

 Conflict with IDE only */

 Conflict with IDE, parallel and NAND flash */

 Conflict with LCD and TVC */

 Conflict with GMII GMAC1 and extended parallel flash */

 Conflict with GMII GMAC1, extended parallel flash and LCD */

 Conflict with PCI */

 Pin names for the pinmux subsystem, 3516 variant */

 Row A */

 Row B */

 Row C */

 Row D */

 Row E */

 Row F */

 Row G */

 Row H */

 Row J (for some reason I is skipped) */

 Row K */

 Row L */

 Row M */

 Row N */

 Row P (for some reason O is skipped) */

 Row R (for some reason Q is skipped) */

 Row T (for some reason S is skipped) */

 Row U */

 Row V */

 Row W */

 Row Y */

 Digital ground */

 GMII, ethernet pins */

/*

 * Apparently the LPC interface is using the PCICLK for the clocking so

 * PCI needs to be active at the same time.

 LPC_LAD[0] */

 LPC_SERIRQ */

 LPC_LAD[2] */

 LPC_LFRAME# */

 LPC_LAD[3] */

 LPC_LAD[1] */

 Character LCD */

 SSP_97RST# SSP AC97 Reset, active low */

 SSP_FSC */

 SSP_ECLK */

 SSP_TXD */

 SSP_RXD */

 SSP_SCLK */

 UART_SIN serial input, RX */

 UART_SOUT serial output, TX */

 UART_NDCD DCD carrier detect */

 UART_NDTR DTR data terminal ready */

 UART_NDSR DSR data set ready */

 UART_NRTS RTS request to send */

 UART_NCTS CTS clear to send */

 UART_NRI RI ring indicator */

 TVC_DATA[0] */

 TVC_DATA[1] */

 TVC_DATA[2] */

 TVC_DATA[3] */

 TVC_DATA[4] */

 TVC_DATA[5] */

 TVC_DATA[6] */

 TVC_DATA[7] */

 TVC_CLK */

 NAND flash pins */

 Parallel (NOR) flash pins, D[0-15], A[16-25], CE0, CE1, RB, WE, OE, ALE */

/*

 * The parallel flash can be set up in a 26-bit address bus mode exposing

 * A[0-15] (A[15] takes the place of ALE), but it has the

 * side effect of stealing pins from GMAC1 and TVC so these blocks cannot be

 * used at the same time.

 The extra pins */

 Serial flash pins CE0, CE1, DI, DO, CK */

 The GPIO0A (0-4) pins overlap with TVC and extended parallel flash */

 The GPIO0B (5-7) pins overlap with ICE */

 The GPIO0C (8,11-15) pins overlap with LPC, UART and SSP */

 The GPIO0D (9,10) pins overlap with UART RX/TX */

 The GPIO0E (16) pins overlap with LCD */

 The GPIO0F (17,18) pins overlap with NAND flash CE0, CE1 */

 The GPIO0G (19,20,26-29) pins overlap with parallel flash */

 The GPIO0H (21,22) pins overlap with serial flash CE0, CE1 */

 The GPIO0I (23) pins overlap with all flash */

 The GPIO0J (24,25) pins overlap with all flash and LCD */

 The GPIO0K (30,31) pins overlap with NAND flash */

 The GPIO0L (0) pins overlap with TVC_CLK */

 The GPIO1A (0-4) pins that overlap with IDE and parallel flash */

 The GPIO1B (5-10,27) pins overlap with just IDE */

 The GPIO1C (11-26) pins overlap with IDE, parallel flash and NAND flash */

 The GPIO1D (28-31) pins overlap with TVC */

 The GPIO2A (0-3) pins overlap with GMII GMAC1 and extended parallel flash */

 The GPIO2B (4-7) pins overlap with GMII GMAC1, extended parallel flash and LCD */

 The GPIO2C (8-31) pins overlap with PCI */

 Groups for the 3516 SoC/package */

 Conflict with some GPIO groups */

 Conflict with all flash usage */

 Bring out RGMII on the GMAC1 pins */

 Conflict only with GPIO2 */

 Conflict with SSP */

 Conflict with LPC */

 No conflicts except GPIO */

		/*

		 * Conflict with LPC and SSP,

		 * so when those are both disabled, modem UART can thrive.

 Conflict with character LCD */

	/*

	 * The construction is done such that it is possible to use a serial

	 * flash together with a NAND or parallel (NOR) flash, but it is not

	 * possible to use NAND and parallel flash together. To use serial

	 * flash with one of the two others, the muxbits need to be flipped

	 * around before any access.

 Conflict with IDE, parallel and serial flash */

 Conflict with IDE, NAND and serial flash */

 Conflict with IDE, NAND and parallel flash */

 Conflict with TVC and ICE */

 Conflict with ICE */

 Conflict with LPC, UART and SSP */

 Conflict with UART */

 Conflict with LCD */

 Conflict with NAND flash */

 Conflict with parallel flash */

 Conflict with serial flash */

 Conflict with all flash */

 Conflict with all flash and LCD */

 Conflict with parallel and NAND flash */

 Conflict with TVE CLK */

 Conflict with IDE and parallel flash */

 Conflict with IDE only */

 Conflict with IDE, parallel and NAND flash */

 Conflict with TVC */

 Conflict with GMII GMAC1 and extended parallel flash */

 Conflict with GMII GMAC1, extended parallel flash and LCD */

 Conflict with PCI */

 The special case with the 3516 flash pin */

/**

 * struct gemini_pmx_func - describes Gemini pinmux functions

 * @name: the name of this specific function

 * @groups: corresponding pin groups

 This function is strictly unavailable on 3512 */

 Which bits changed */

 Print changed states */

 Did not go low though it should */

 Did not go high though it should */

 GMAC0 RXDV */

 GMAC0 RXC */

 GMAC0 TXEN */

 GMAC0 TXC */

 GMAC1 RXDV */

 GMAC1 RXC */

 GMAC1 TXEN */

 GMAC1 TXC */

 GMAC0 RXD0 */

 GMAC0 RXD1 */

 GMAC0 RXD2 */

 GMAC0 RXD3 */

 GMAC0 TXD0 */

 GMAC0 TXD1 */

 GMAC0 TXD2 */

 GMAC0 TXD3 */

 GMAC1 RXD0 */

 GMAC1 RXD1 */

 GMAC1 RXD2 */

 GMAC1 RXD3 */

 GMAC1 TXD0 */

 GMAC1 TXD1 */

 GMAC1 TXD2 */

 GMAC1 TXD3 */

 GMAC0 RXDV */

 GMAC0 RXC */

 GMAC0 TXEN */

 GMAC0 TXC */

 GMAC1 RXDV */

 GMAC1 RXC */

 GMAC1 TXEN */

 GMAC1 TXC */

 GMAC0 RXD0 */

 GMAC0 RXD1 */

 GMAC0 RXD2 */

 GMAC0 RXD3 */

 GMAC0 TXD0 */

 GMAC0 TXD1 */

 GMAC0 TXD2 */

 GMAC0 TXD3 */

 GMAC1 RXD0 */

 GMAC1 RXD1 */

 GMAC1 RXD2 */

 GMAC1 RXD3 */

 GMAC1 TXD0 */

 GMAC1 TXD1 */

 GMAC1 TXD2 */

 GMAC1 TXD3 */

 First figure out if this group supports configs */

 Create state holders etc for this driver */

 Check that regmap works at first call, then no more */

 Mask off relevant pads */

 Invert the meaning of the DRAM+flash pads */

 Print initial state */

 Check if flash pin is set */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Core driver for the pin control subsystem

 *

 * Copyright (C) 2011-2012 ST-Ericsson SA

 * Written on behalf of Linaro for ST-Ericsson

 * Based on bits of regulator core, gpio core and clk core

 *

 * Author: Linus Walleij <linus.walleij@linaro.org>

 *

 * Copyright (C) 2012 NVIDIA CORPORATION. All rights reserved.

 Mutex taken to protect pinctrl_list */

 Mutex taken to protect pinctrl_maps */

 Mutex taken to protect pinctrldev_list */

 Global list of pin control devices (struct pinctrl_dev) */

 List of pin controller handles (struct pinctrl) */

 List of pinctrl maps (struct pinctrl_maps) */

/**

 * pinctrl_provide_dummies() - indicate if pinctrl provides dummy state support

 *

 * Usually this function is called by platforms without pinctrl driver support

 * but run with some shared drivers using pinctrl APIs.

 * After calling this function, the pinctrl core will return successfully

 * with creating a dummy state for the driver to keep going smoothly.

 We're not allowed to register devices without name */

/**

 * get_pinctrl_dev_from_devname() - look up pin controller device

 * @devname: the name of a device instance, as returned by dev_name()

 *

 * Looks up a pin control device matching a certain device name or pure device

 * pointer, the pure device pointer will take precedence.

 Matched on device name */

/**

 * pin_get_from_name() - look up a pin number from a name

 * @pctldev: the pin control device to lookup the pin on

 * @name: the name of the pin to look up

 The pin number can be retrived from the pin controller descriptor */

 Pin space may be sparse */

/**

 * pin_get_name() - look up a pin name from a pin id

 * @pctldev: the pin control device to lookup the pin on

 * @pin: pin number/id to look up

 Deletes a range of pin descriptors */

 Set owner */

 Copy basic pin info */

/**

 * gpio_to_pin() - GPIO range GPIO number to pin number translation

 * @range: GPIO range used for the translation

 * @gpio: gpio pin to translate to a pin number

 *

 * Finds the pin number for a given GPIO using the specified GPIO range

 * as a base for translation. The distinction between linear GPIO ranges

 * and pin list based GPIO ranges is managed correctly by this function.

 *

 * This function assumes the gpio is part of the specified GPIO range, use

 * only after making sure this is the case (e.g. by calling it on the

 * result of successful pinctrl_get_device_gpio_range calls)!

/**

 * pinctrl_match_gpio_range() - check if a certain GPIO pin is in range

 * @pctldev: pin controller device to check

 * @gpio: gpio pin to check taken from the global GPIO pin space

 *

 * Tries to match a GPIO pin number to the ranges handled by a certain pin

 * controller, return the range or NULL

 Loop over the ranges */

 Check if we're in the valid range */

/**

 * pinctrl_ready_for_gpio_range() - check if other GPIO pins of

 * the same GPIO chip are in range

 * @gpio: gpio pin to check taken from the global GPIO pin space

 *

 * This function is complement of pinctrl_match_gpio_range(). If the return

 * value of pinctrl_match_gpio_range() is NULL, this function could be used

 * to check whether pinctrl device is ready or not. Maybe some GPIO pins

 * of the same GPIO chip don't have back-end pinctrl interface.

 * If the return value is true, it means that pinctrl device is ready & the

 * certain GPIO pin doesn't have back-end pinctrl device. If the return value

 * is false, it means that pinctrl device may not be ready.

 Loop over the pin controllers */

 Loop over the ranges */

 Check if any gpio range overlapped with gpio chip */

/**

 * pinctrl_get_device_gpio_range() - find device for GPIO range

 * @gpio: the pin to locate the pin controller for

 * @outdev: the pin control device if found

 * @outrange: the GPIO range if found

 *

 * Find the pin controller handling a certain GPIO pin from the pinspace of

 * the GPIO subsystem, return the device and the matching GPIO range. Returns

 * -EPROBE_DEFER if the GPIO range could not be found in any device since it

 * may still have not been registered.

 Loop over the pin controllers */

/**

 * pinctrl_add_gpio_range() - register a GPIO range for a controller

 * @pctldev: pin controller device to add the range to

 * @range: the GPIO range to add

 *

 * This adds a range of GPIOs to be handled by a certain pin controller. Call

 * this to register handled ranges after registering your pin controller.

	/*

	 * If we can't find this device, let's assume that is because

	 * it has not probed yet, so the driver trying to register this

	 * range need to defer probing.

 Loop over the ranges */

 Check if we're in the valid range */

/**

 * pinctrl_find_gpio_range_from_pin() - locate the GPIO range for a pin

 * @pctldev: the pin controller device to look in

 * @pin: a controller-local number to find the range for

/**

 * pinctrl_remove_gpio_range() - remove a range of GPIOs from a pin controller

 * @pctldev: pin controller device to remove the range from

 * @range: the GPIO range to remove

/**

 * pinctrl_generic_get_group_count() - returns the number of pin groups

 * @pctldev: pin controller device

/**

 * pinctrl_generic_get_group_name() - returns the name of a pin group

 * @pctldev: pin controller device

 * @selector: group number

/**

 * pinctrl_generic_get_group_pins() - gets the pin group pins

 * @pctldev: pin controller device

 * @selector: group number

 * @pins: pins in the group

 * @num_pins: number of pins in the group

/**

 * pinctrl_generic_get_group() - returns a pin group based on the number

 * @pctldev: pin controller device

 * @selector: group number

 See if this pctldev has this group */

/**

 * pinctrl_generic_add_group() - adds a new pin group

 * @pctldev: pin controller device

 * @name: name of the pin group

 * @pins: pins in the pin group

 * @num_pins: number of pins in the pin group

 * @data: pin controller driver specific data

 *

 * Note that the caller must take care of locking.

/**

 * pinctrl_generic_remove_group() - removes a numbered pin group

 * @pctldev: pin controller device

 * @selector: group number

 *

 * Note that the caller must take care of locking.

/**

 * pinctrl_generic_free_groups() - removes all pin groups

 * @pctldev: pin controller device

 *

 * Note that the caller must take care of locking. The pinctrl groups

 * are allocated with devm_kzalloc() so no need to free them here.

 CONFIG_GENERIC_PINCTRL_GROUPS */

/**

 * pinctrl_get_group_selector() - returns the group selector for a group

 * @pctldev: the pin controller handling the group

 * @pin_group: the pin group to look up

	/*

	 * Try to obtain GPIO range, if it fails

	 * we're probably dealing with GPIO driver

	 * without a backing pin controller - bail out.

 Convert to the pin controllers number space */

/**

 * pinctrl_gpio_request() - request a single pin to be used as GPIO

 * @gpio: the GPIO pin number from the GPIO subsystem number space

 *

 * This function should *ONLY* be used from gpiolib-based GPIO drivers,

 * as part of their gpio_request() semantics, platforms and individual drivers

 * shall *NOT* request GPIO pins to be muxed in.

 Convert to the pin controllers number space */

/**

 * pinctrl_gpio_free() - free control on a single pin, currently used as GPIO

 * @gpio: the GPIO pin number from the GPIO subsystem number space

 *

 * This function should *ONLY* be used from gpiolib-based GPIO drivers,

 * as part of their gpio_free() semantics, platforms and individual drivers

 * shall *NOT* request GPIO pins to be muxed out.

 Convert to the pin controllers number space */

 Convert to the pin controllers number space */

/**

 * pinctrl_gpio_direction_input() - request a GPIO pin to go into input mode

 * @gpio: the GPIO pin number from the GPIO subsystem number space

 *

 * This function should *ONLY* be used from gpiolib-based GPIO drivers,

 * as part of their gpio_direction_input() semantics, platforms and individual

 * drivers shall *NOT* touch pin control GPIO calls.

/**

 * pinctrl_gpio_direction_output() - request a GPIO pin to go into output mode

 * @gpio: the GPIO pin number from the GPIO subsystem number space

 *

 * This function should *ONLY* be used from gpiolib-based GPIO drivers,

 * as part of their gpio_direction_output() semantics, platforms and individual

 * drivers shall *NOT* touch pin control GPIO calls.

/**

 * pinctrl_gpio_set_config() - Apply config to given GPIO pin

 * @gpio: the GPIO pin number from the GPIO subsystem number space

 * @config: the configuration to apply to the GPIO

 *

 * This function should *ONLY* be used from gpiolib-based GPIO drivers, if

 * they need to call the underlying pin controller to change GPIO config

 * (for example set debounce time).

 Do not defer probing of hogs (circular loop) */

		/*

		 * OK let us guess that the driver is not there yet, and

		 * let's defer obtaining this pinctrl handle to later...

	/*

	 * create the state cookie holder struct pinctrl for each

	 * mapping, this is what consumers will get when requesting

	 * a pin control handle with pinctrl_get()

 Iterate over the pin control maps to locate the right ones */

 Map must be for this device */

		/*

		 * If pctldev is not null, we are claiming hog for it,

		 * that means, setting that is served by pctldev by itself.

		 *

		 * Thus we must skip map that is for this device but is served

		 * by other device.

		/*

		 * At this point the adding of a setting may:

		 *

		 * - Defer, if the pinctrl device is not yet available

		 * - Fail, if the pinctrl device is not yet available,

		 *   AND the setting is a hog. We cannot defer that, since

		 *   the hog will kick in immediately after the device

		 *   is registered.

		 *

		 * If the error returned was not -EPROBE_DEFER then we

		 * accumulate the errors to see if we end up with

		 * an -EPROBE_DEFER later, as that is the worst case.

 If some other error than deferral occurred, return here */

 Add the pinctrl handle to the global list */

/**

 * pinctrl_get() - retrieves the pinctrl handle for a device

 * @dev: the device to obtain the handle for

	/*

	 * See if somebody else (such as the device core) has already

	 * obtained a handle to the pinctrl for this device. In that case,

	 * return another pointer to it.

/**

 * pinctrl_release() - release the pinctrl handle

 * @kref: the kref in the pinctrl being released

/**

 * pinctrl_put() - decrease use count on a previously claimed pinctrl handle

 * @p: the pinctrl handle to release

/**

 * pinctrl_lookup_state() - retrieves a state handle from a pinctrl handle

 * @p: the pinctrl handle to retrieve the state from

 * @name: the state name to retrieve

 create dummy state */

/**

 * pinctrl_commit_state() - select/activate/program a pinctrl state to HW

 * @p: the pinctrl handle for the device that requests configuration

 * @state: the state handle to select/activate/program

		/*

		 * For each pinmux setting in the old state, forget SW's record

		 * of mux owner for that pingroup. Any pingroups which are

		 * still owned by the new state will be re-acquired by the call

		 * to pinmux_enable_setting() in the loop below.

 Apply all the settings for the new state - pinmux first */

 Do not link hogs (circular dependency) */

 Apply all the settings for the new state - pinconf after */

 Do not link hogs (circular dependency) */

		/*

		 * All we can do here is pinmux_disable_setting.

		 * That means that some pins are muxed differently now

		 * than they were before applying the setting (We can't

		 * "unmux a pin"!), but it's not a big deal since the pins

		 * are free to be muxed by another apply_setting.

 There's no infinite recursive loop here because p->state is NULL */

/**

 * pinctrl_select_state() - select/activate/program a pinctrl state to HW

 * @p: the pinctrl handle for the device that requests configuration

 * @state: the state handle to select/activate/program

/**

 * devm_pinctrl_get() - Resource managed pinctrl_get()

 * @dev: the device to obtain the handle for

 *

 * If there is a need to explicitly destroy the returned struct pinctrl,

 * devm_pinctrl_put() should be used, rather than plain pinctrl_put().

/**

 * devm_pinctrl_put() - Resource managed pinctrl_put()

 * @p: the pinctrl handle to release

 *

 * Deallocate a struct pinctrl obtained via devm_pinctrl_get(). Normally

 * this function will not need to be called and the resource management

 * code will ensure that the resource is freed.

/**

 * pinctrl_register_mappings() - register a set of pin controller mappings

 * @maps: the pincontrol mappings table to register. Note the pinctrl-core

 *	keeps a reference to the passed in maps, so they should _not_ be

 *	marked with __initdata.

 * @num_maps: the number of maps in the mapping table

 First sanity check the new mapping */

/**

 * pinctrl_unregister_mappings() - unregister a set of pin controller mappings

 * @map: the pincontrol mappings table passed to pinctrl_register_mappings()

 *	when registering the mappings.

/**

 * pinctrl_force_sleep() - turn a given controller device into sleep state

 * @pctldev: pin controller device

/**

 * pinctrl_force_default() - turn a given controller device into default state

 * @pctldev: pin controller device

/**

 * pinctrl_init_done() - tell pinctrl probe is done

 *

 * We'll use this time to switch the pins from "init" to "default" unless the

 * driver selected some other state.

 *

 * @dev: device to that's done probing

 No such state */

 Not at init anyway */

 No default state */

 No such state */

/**

 * pinctrl_select_default_state() - select default pinctrl state

 * @dev: device to select default state for

/**

 * pinctrl_pm_select_default_state() - select default pinctrl state for PM

 * @dev: device to select default state for

/**

 * pinctrl_pm_select_sleep_state() - select sleep pinctrl state for PM

 * @dev: device to select sleep state for

/**

 * pinctrl_pm_select_idle_state() - select idle pinctrl state for PM

 * @dev: device to select idle state for

 The pin number can be retrived from the pin controller descriptor */

 Pin space may be sparse */

 Driver-specific info per pin */

 Loop over the ranges */

 CONFIG_DEBUG_FS */

/**

 * pinctrl_init_controller() - init a pin controller device

 * @pctldesc: descriptor for this pin controller

 * @dev: parent device for this pin controller

 * @driver_data: private pin controller data for this pin controller

 Initialize pin control device struct */

 check core ops for sanity */

 If we're implementing pinmuxing, check the ops for sanity */

 If we're implementing pinconfig, check the ops for sanity */

 Register all the pins */

/**

 * pinctrl_register() - register a pin controller device

 * @pctldesc: descriptor for this pin controller

 * @dev: parent device for this pin controller

 * @driver_data: private pin controller data for this pin controller

 *

 * Note that pinctrl_register() is known to have problems as the pin

 * controller driver functions are called before the driver has a

 * struct pinctrl_dev handle. To avoid issues later on, please use the

 * new pinctrl_register_and_init() below instead.

/**

 * pinctrl_register_and_init() - register and init pin controller device

 * @pctldesc: descriptor for this pin controller

 * @dev: parent device for this pin controller

 * @driver_data: private pin controller data for this pin controller

 * @pctldev: pin controller device

 *

 * Note that pinctrl_enable() still needs to be manually called after

 * this once the driver is ready.

	/*

	 * We have pinctrl_start() call functions in the pin controller

	 * driver with create_pinctrl() for at least dt_node_to_map(). So

	 * let's make sure pctldev is properly initialized for the

	 * pin controller driver before we do anything.

/**

 * pinctrl_unregister() - unregister pinmux

 * @pctldev: pin controller to unregister

 *

 * Called by pinmux drivers to unregister a pinmux.

 TODO: check that no pinmuxes are still active? */

 Destroy descriptor tree */

 remove gpio ranges map */

/**

 * devm_pinctrl_register() - Resource managed version of pinctrl_register().

 * @dev: parent device for this pin controller

 * @pctldesc: descriptor for this pin controller

 * @driver_data: private pin controller data for this pin controller

 *

 * Returns an error pointer if pincontrol register failed. Otherwise

 * it returns valid pinctrl handle.

 *

 * The pinctrl device will be automatically released when the device is unbound.

/**

 * devm_pinctrl_register_and_init() - Resource managed pinctrl register and init

 * @dev: parent device for this pin controller

 * @pctldesc: descriptor for this pin controller

 * @driver_data: private pin controller data for this pin controller

 * @pctldev: pin controller device

 *

 * Returns zero on success or an error number on failure.

 *

 * The pinctrl device will be automatically released when the device is unbound.

/**

 * devm_pinctrl_unregister() - Resource managed version of pinctrl_unregister().

 * @dev: device for which resource was allocated

 * @pctldev: the pinctrl device to unregister.

 init early since many drivers really need to initialized pinmux early */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/pinctrl/pinctrl-lantiq.c

 *  based on linux/drivers/pinctrl/pinctrl-pxa3xx.c

 *

 *  Copyright (C) 2012 John Crispin <john@phrozen.org>

 Return function number. If failure, return negative value. */

 don't assume .mfp is linearly mapped. find the mfp with the correct .pin */

 check whether current pin configuration is valid. Negative for failure */

/*

 * allow different socs to register with the generic part of the lanti

 * pinctrl code

/*

 * ams AS3722 pin control and GPIO driver.

 *

 * Copyright (c) 2013, NVIDIA Corporation.

 *

 * Author: Laxman Dewangan <ldewangan@nvidia.com>

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any kind,

 * whether express or implied; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA

 * 02111-1307, USA

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Core driver for the generic pin config portions of the pin control subsystem

 *

 * Copyright (C) 2011 ST-Ericsson SA

 * Written on behalf of Linaro for ST-Ericsson

 *

 * Author: Linus Walleij <linus.walleij@linaro.org>

 We want to check out this parameter */

 These are legal errors */

 comma between multiple configs */

 Print unit if available */

/**

 * pinconf_generic_dump_pins - Print information about pin or group of pins

 * @pctldev:	Pincontrol device

 * @s:		File to print to

 * @gname:	Group name specifying pins

 * @pin:	Pin number specyfying pin

 *

 * Print the pinconf configuration for the requested pin(s) to @s. Pins can be

 * specified either by pin using @pin or by group using @gname. Only one needs

 * to be specified the other can be NULL/0.

 generic parameters */

 driver-specific parameters */

/**

 * parse_dt_cfg() - Parse DT pinconf parameters

 * @np:	DT node

 * @params:	Array of describing generic parameters

 * @count:	Number of entries in @params

 * @cfg:	Array of parsed config options

 * @ncfg:	Number of entries in @cfg

 *

 * Parse the config options described in @params from @np and puts the result

 * in @cfg. @cfg does not need to be empty, entries are added beginning at

 * @ncfg. @ncfg is updated to reflect the number of entries after parsing. @cfg

 * needs to have enough memory allocated to hold all possible entries.

 property not found */

 use default value, when no value is specified */

/**

 * pinconf_generic_parse_dt_config()

 * parse the config properties into generic pinconfig values.

 * @np: node containing the pinconfig properties

 * @pctldev: pincontrol device

 * @configs: array with nconfigs entries containing the generic pinconf values

 *           must be freed when no longer necessary.

 * @nconfigs: number of configurations

 allocate a temporary array big enough to hold one of each option */

 no configs found at all */

	/*

	 * Now limit the number of configs to the real number of

	 * found properties.

 skip this node; may contain config child nodes */

 EINVAL=missing, which is fine since it's optional */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2013 STMicroelectronics (R&D) Limited.

 * Authors:

 *	Srinivas Kandagatla <srinivas.kandagatla@st.com>

 of_get_named_gpio() */

 PIO Block registers */

 PIO output */

 Set bits of POUT */

 Clear bits of POUT */

 PIO input */

 PIO configuration */

 Set bits of PC[2:0] */

 Clear bits of PC[2:0] */

 PIO input comparison */

 Set bits of PCOMP */

 Clear bits of PCOMP */

 PIO input comparison mask */

 Set bits of PMASK */

 Clear bits of PMASK */

/**

 *  Packed style retime configuration.

 *  There are two registers cfg0 and cfg1 in this style for each bank.

 *  Each field in this register is 8 bit corresponding to 8 pins in the bank.

/**

 * Dedicated style retime Configuration register

 * each register is dedicated per pin.

/*

 * Pinconf is represented in an opaque unsigned long variable.

 * Below is the bit allocation details for each possible configuration.

 * All the bit fields can be encapsulated into four variables

 * (direction, retime-type, retime-clk, retime-delay)

 *

 *	 +----------------+

 *[31:28]| reserved-3     |

 *	 +----------------+-------------

 *[27]   |	oe	  |		|

 *	 +----------------+		v

 *[26]   |	pu	  |	[Direction	]

 *	 +----------------+		^

 *[25]   |	od	  |		|

 *	 +----------------+-------------

 *[24]   | reserved-2     |

 *	 +----------------+-------------

 *[23]   |    retime      |		|

 *	 +----------------+		|

 *[22]   | retime-invclk  |		|

 *	 +----------------+		v

 *[21]   |retime-clknotdat|	[Retime-type	]

 *	 +----------------+		^

 *[20]   | retime-de      |		|

 *	 +----------------+-------------

 *[19:18]| retime-clk     |------>[Retime-Clk	]

 *	 +----------------+

 *[17:16]|  reserved-1    |

 *	 +----------------+

 *[15..0]| retime-delay   |------>[Retime Delay]

 *	 +----------------+

 Output enable */

 Pull Up */

 Open Drain */

 RETIME_DELAY in Pico Secs */

 retiming */

 register offset information */

/*

 * Edge triggers are not supported at hardware level, it is supported by

 * software by exploiting the level trigger support in hardware.

 * Software uses a virtual register (EDGE_CONF) for edge trigger configuration

 * of each gpio pin in a GPIO bank.

 *

 * Each bank has a 32 bit EDGE_CONF register which is divided in to 8 parts of

 * 4-bits. Each 4-bit space is allocated for each pin in a gpio bank.

 *

 * bit allocation per pin is:

 * Bits:  [0 - 3] | [4 - 7]  [8 - 11] ... ... ... ...  [ 28 - 31]

 *       --------------------------------------------------------

 *       |  pin-0  |  pin-2 | pin-3  | ... ... ... ... | pin -7 |

 *       --------------------------------------------------------

 *

 *  A pin can have one of following the values in its edge configuration field.

 *

 *	-------   ----------------------------

 *	[0-3]	- Description

 *	-------   ----------------------------

 *	0000	- No edge IRQ.

 *	0001	- Falling edge IRQ.

 *	0010	- Rising edge IRQ.

 *	0011	- Rising and Falling edge IRQ.

 *	-------   ----------------------------

 SOC specific data */

 Not Available */

 Not Available */

 Low level functions.. */

 2 bit delay, lsb */

 2 bit delay, msb */

 GPIO related functions */

	/**

	 * There are three configuration registers (PIOn_PC0, PIOn_PC1

	 * and PIOn_PC2) for each port. These are used to configure the

	 * PIO port pins. Each pin can be configured as an input, output,

	 * bidirectional, or alternative function pin. Three bits, one bit

	 * from each of the three registers, configure the corresponding bit of

	 * the port. Valid bit settings is:

	 *

	 * PC2		PC1		PC0	Direction.

	 * 0		0		0	[Input Weak pull-up]

	 * 0		0 or 1		1	[Bidirection]

	 * 0		1		0	[Output]

	 * 1		0		0	[Input]

	 *

	 * PIOn_SET_PC and PIOn_CLR_PC registers are used to set and clear bits

	 * individually.

 Alternate function direction is handled by Pinctrl */

	/*

	 * GPIO direction is handled differently

	 * - See st_gpio_direction() above for an explanation

 Pinctrl Groups */

 create config map per pin */

 Pinmux */

	/*

	 * When a PIO bank is used in its primary function mode (altfunc = 0)

	 * Output Enable (OE), Open Drain(OD), and Pull Up (PU)

	 * for the primary PIO functions are driven by the related PIO block

 Pinconf  */

 for each config */

 2 registers per bank */

 cfg0 */

 cfg1 */

 8 registers per bank */

	/**

	 * For a given shared register like OE/PU/OD, there are 8 bits per bank

	 * 0:7 belongs to bank0, 8:15 belongs to bank1 ...

	 * So each register is shared across 4 banks.

 retime avaiable for all pins by default */

/*

 * Each pin is represented in of the below forms.

 * <bank offset mux direction rt_type rt_delay rt_clk>

 bank pad direction val altfunction */

 Skip those we do not want to proceed */

 <bank offset mux direction rt_type rt_delay rt_clk> */

 bank & offset */

 mux */

 direction */

 rt_type rt_delay rt_clk */

 rt_type */

 rt_delay */

 rt_clk */

/*

 * As edge triggers are not supported at hardware level, it is supported by

 * software by exploiting the level trigger support in hardware.

 *

 * Steps for detection raising edge interrupt in software.

 *

 * Step 1: CONFIGURE pin to detect level LOW interrupts.

 *

 * Step 2: DETECT level LOW interrupt and in irqmux/gpio bank interrupt handler,

 * if the value of pin is low, then CONFIGURE pin for level HIGH interrupt.

 * IGNORE calling the actual interrupt handler for the pin at this stage.

 *

 * Step 3: DETECT level HIGH interrupt and in irqmux/gpio-bank interrupt handler

 * if the value of pin is HIGH, CONFIGURE pin for level LOW interrupt and then

 * DISPATCH the interrupt to the interrupt handler of the pin.

 *

 *		 step-1  ________     __________

 *				|     | step - 3

 *			        |     |

 *			step -2 |_____|

 *

 * falling edge is also detected int the same way.

 *

 check if we are detecting fake edges ... */

 edge detection. */

 interrupt dedicated per bank */

	/**

	 * GPIO bank can have one of the two possible types of

	 * interrupt-wirings.

	 *

	 * First type is via irqmux, single interrupt is used by multiple

	 * gpio banks. This reduces number of overall interrupts numbers

	 * required. All these banks belong to a single pincontroller.

	 *		  _________

	 *		 |	   |----> [gpio-bank (n)    ]

	 *		 |	   |----> [gpio-bank (n + 1)]

	 *	[irqN]-- | irq-mux |----> [gpio-bank (n + 2)]

	 *		 |	   |----> [gpio-bank (...  )]

	 *		 |_________|----> [gpio-bank (n + 7)]

	 *

	 * Second type has a dedicated interrupt per each gpio bank.

	 *

	 *	[irqN]----> [gpio-bank (n)]

 This is not a valid IRQ */

 We need to have a mux as well */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * ZynqMP pin controller

 *

 * Copyright (C) 2020, 2021 Xilinx, Inc.

 *

 * Sai Krishna Potthuri <lakshmi.sai.krishna.potthuri@xilinx.com>

 * Rajan Vaja <rajan.vaja@xilinx.com>

/**

 * struct zynqmp_pmux_function - a pinmux function

 * @name:	Name of the pin mux function

 * @groups:	List of pin groups for this function

 * @ngroups:	Number of entries in @groups

 * @node:	Firmware node matching with the function

 *

 * This structure holds information about pin control function

 * and function group names supporting that function.

/**

 * struct zynqmp_pinctrl - driver data

 * @pctrl:	Pin control device

 * @groups:	Pin groups

 * @ngroups:	Number of @groups

 * @funcs:	Pin mux functions

 * @nfuncs:	Number of @funcs

 *

 * This struct is stored as driver data and used to retrieve

 * information regarding pin control functions, groups and

 * group pins.

/**

 * struct zynqmp_pctrl_group - Pin control group info

 * @name:	Group name

 * @pins:	Group pin numbers

 * @npins:	Number of pins in the group

/**

 * zynqmp_pmux_get_function_groups() - Get groups for the function

 * @pctldev:	Pincontrol device pointer.

 * @selector:	Function ID

 * @groups:	Group names.

 * @num_groups:	Number of function groups.

 *

 * Get function's group count and group names.

/**

 * zynqmp_pinmux_set_mux() - Set requested function for the group

 * @pctldev:	Pincontrol device pointer.

 * @function:	Function ID.

 * @group:	Group ID.

 *

 * Loop through all pins of the group and call firmware API

 * to set requested function for all pins in the group.

 *

 * Return: 0 on success else error code.

/**

 * zynqmp_pinconf_cfg_get() - get config value for the pin

 * @pctldev:	Pin control device pointer.

 * @pin:	Pin number.

 * @config:	Value of config param.

 *

 * Get value of the requested configuration parameter for the

 * given pin.

 *

 * Return: 0 on success else error code.

 Invalid drive strength */

/**

 * zynqmp_pinconf_cfg_set() - Set requested config for the pin

 * @pctldev:		Pincontrol device pointer.

 * @pin:		Pin number.

 * @configs:		Configuration to set.

 * @num_configs:	Number of configurations.

 *

 * Loop through all configurations and call firmware API

 * to set requested configurations for the pin.

 *

 * Return: 0 on success else error code.

 Invalid drive strength */

			/*

			 * These cases are mentioned in dts but configurable

			 * registers are unknown. So falling through to ignore

			 * boot time warnings as of now.

/**

 * zynqmp_pinconf_group_set() - Set requested config for the group

 * @pctldev:		Pincontrol device pointer.

 * @selector:		Group ID.

 * @configs:		Configuration to set.

 * @num_configs:	Number of configurations.

 *

 * Call function to set configs for each pin in the group.

 *

 * Return: 0 on success else error code.

/**

 * zynqmp_pinctrl_prepare_func_groups() - prepare function and groups data

 * @dev:	Device pointer.

 * @fid:	Function ID.

 * @func:	Function data.

 * @groups:	Groups data.

 *

 * Query firmware to get group IDs for each function. Firmware returns

 * group IDs. Based on the group index for the function, group names in

 * the function are stored. For example, the first group in "eth0" function

 * is named as "eth0_0" and the second group as "eth0_1" and so on.

 *

 * Based on the group ID received from the firmware, function stores name of

 * the group for that group ID. For example, if "eth0" first group ID

 * is x, groups[x] name will be stored as "eth0_0".

 *

 * Once done for each function, each function would have its group names

 * and each group would also have their names.

 *

 * Return: 0 on success else error code.

	/*

	 * Name of the function is maximum 16 bytes and cannot

	 * accommodate the return value in SMC buffers, hence ignoring

	 * the return value for this specific qid.

/**

 * zynqmp_pinctrl_create_pin_groups() - assign pins to respective groups

 * @dev:	Device pointer.

 * @groups:	Groups data.

 * @pin:	Pin number.

 *

 * Query firmware to get groups available for the given pin.

 * Based on the firmware response(group IDs for the pin), add

 * pin number to the respective group's pin array.

 *

 * Once all pins are queries, each group would have its number

 * of pins and pin numbers data.

 *

 * Return: 0 on success else error code.

/**

 * zynqmp_pinctrl_prepare_group_pins() - prepare each group's pin data

 * @dev:	Device pointer.

 * @groups:	Groups data.

 * @ngroups:	Number of groups.

 *

 * Prepare pin number and number of pins data for each pins.

 *

 * Return: 0 on success else error code.

/**

 * zynqmp_pinctrl_prepare_function_info() - prepare function info

 * @dev:	Device pointer.

 * @pctrl:	Pin control driver data.

 *

 * Query firmware for functions, groups and pin information and

 * prepare pin control driver data.

 *

 * Query number of functions and number of function groups (number

 * of groups in the given function) to allocate required memory buffers

 * for functions and groups. Once buffers are allocated to store

 * functions and groups data, query and store required information

 * (number of groups and group names for each function, number of

 * pins and pin numbers for each group).

 *

 * Return: 0 on success else error code.

/**

 * zynqmp_pinctrl_prepare_pin_desc() - prepare pin description info

 * @dev:		Device pointer.

 * @zynqmp_pins:	Pin information.

 * @npins:		Number of pins.

 *

 * Query number of pins information from firmware and prepare pin

 * description containing pin number and pin name.

 *

 * Return: 0 on success else error code.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Device tree integration for the pin control subsystem

 *

 * Copyright (C) 2012 NVIDIA CORPORATION. All rights reserved.

/**

 * struct pinctrl_dt_map - mapping table chunk parsed from device tree

 * @node: list node for struct pinctrl's @dt_maps field

 * @pctldev: the pin controller that allocated this struct, and will free it

 * @map: the mapping table entries

 * @num_maps: number of mapping table entries

 There is no pctldev for PIN_MAP_TYPE_DUMMY_STATE */

 Initialize common mapping table entry fields */

 Remember the converted mapping table entries */

 Find the pin controller containing np_config */

 keep deferring if modules are enabled */

 If we're creating a hog we can use the passed pctldev */

 Do not defer probing of hogs (circular loop) */

	/*

	 * Call pinctrl driver to parse device tree node, and

	 * generate mapping table entries

		/*

		 * If we have no valid maps (maybe caused by empty pinctrl node

		 * or typing error) ther is no need remember this, so just

		 * return.

 Stash the mapping table chunk away for later use */

 There is no pctldev for PIN_MAP_TYPE_DUMMY_STATE */

 CONFIG_OF enabled, p->dev not instantiated from DT */

 We may store pointers to property names within the node */

 For each defined state ID */

 Retrieve the pinctrl-* property */

 Determine whether pinctrl-names property names the state */

		/*

		 * If not, statename is just the integer state ID. But rather

		 * than dynamically allocate it and have to free it later,

		 * just point part way into the property name for the string.

 For every referenced pin configuration node in it */

 Look up the pin configuration node */

 Parse the node */

 No entries in DT? Generate a dummy state table entry */

/*

 * For pinctrl binding, typically #pinctrl-cells is for the pin controller

 * device, so either parent or grandparent. See pinctrl-bindings.txt.

/**

 * pinctrl_get_list_and_count - Gets the list and it's cell size and number

 * @np: pointer to device node with the property

 * @list_name: property that contains the list

 * @list: pointer for the list found

 * @cells_size: pointer for the cell size found

 * @nr_elements: pointer for the number of elements found

 *

 * Typically np is a single pinctrl entry containing the list.

 First element is always the index within the pinctrl device */

/**

 * pinctrl_count_index_with_args - Count number of elements in a pinctrl entry

 * @np: pointer to device node with the property

 * @list_name: property that contains the list

 *

 * Counts the number of elements in a pinctrl array consisting of an index

 * within the controller and a number of u32 entries specified for each

 * entry. Note that device_node is always for the parent pin controller device.

/**

 * pinctrl_copy_args - Populates of_phandle_args based on index

 * @np: pointer to device node with the property

 * @list: pointer to a list with the elements

 * @index: entry within the list of elements

 * @nr_cells: number of cells in the list

 * @nr_elem: number of elements for each entry in the list

 * @out_args: returned values

 *

 * Populates the of_phandle_args based on the index in the list.

/**

 * pinctrl_parse_index_with_args - Find a node pointed by index in a list

 * @np: pointer to device node with the property

 * @list_name: property that contains the list

 * @index: index within the list

 * @out_args: entries in the list pointed by index

 *

 * Finds the selected element in a pinctrl array consisting of an index

 * within the controller and a number of u32 entries specified for each

 * entry. Note that device_node is always for the parent pin controller device.

 SPDX-License-Identifier: GPL-2.0-only

 MCP23S08 I2C GPIO driver */

 NOTE: The use of the mcp prefix is deprecated and will be removed. */

/*

 * Register after I²C postcore initcall and before

 * subsys initcalls that may rely on these GPIOs.

 SPDX-License-Identifier: GPL-2.0-only

 MCP23S08 SPI/I2C GPIO driver */

/* Registers are all 8 bits wide.

 *

 * The mcp23s17 has twice as many bits, and can be configured to work

 * with either 16 bit registers or with two adjacent 8 bit banks.

 init/reset:  all ones */

----------------------------------------------------------------------*/

 REVISIT reading this clears any IRQ ... */

----------------------------------------------------------------------*/

 There is no interrupt pending */

 This clears the interrupt(configurable on S18) */

		/* We must check all of the inputs on the chip,

		 * otherwise we may not notice a change on >=2 pins.

		 *

		 * On at least the mcp23s17, INTCAP is only updated

		 * one byte at a time(INTCAPA and INTCAPB are

		 * not written to at the same time - only on a per-bank

		 * basis).

		 *

		 * INTF only contains the single bit that caused the

		 * interrupt per-bank.  On the mcp23s17, there is

		 * INTFA and INTFB.  If two pins are changed on the A

		 * side at the same time, INTF will only have one bit

		 * set.  If one pin on the A side and one pin on the B

		 * side are changed at the same time, INTF will have

		 * two bits set.  Thus, INTF can't be the only check

		 * to see if the input has changed.

----------------------------------------------------------------------*/

	/* verify MCP_IOCON.SEQOP = 0, so sequential reads work,

	 * and MCP_IOCON.HAEN = 1, so we work with all chips.

 mcp23s17 has IOCON twice, make sure they are in sync */

 This will let us handle the parent IRQ in the driver */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl driver for Rockchip SoCs

 *

 * Copyright (c) 2013 MundoReader S.L.

 * Author: Heiko Stuebner <heiko@sntech.de>

 *

 * With some ideas taken from pinctrl-samsung:

 * Copyright (c) 2012 Samsung Electronics Co., Ltd.

 *		http://www.samsung.com

 * Copyright (c) 2012 Linaro Ltd

 *		https://www.linaro.org

 *

 * and pinctrl-at91:

 * Copyright (C) 2011-2012 Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com>

/**

 * Generate a bitmask for setting a value (v) with a write mask bit in hiword

 * register 31:16 area.

/*

 * Encode variants of iomux registers into a type variable

/*

 * given a pin number that is local to a pin controller, find out the pin bank

 * and the register base of the pin bank.

/*

 * Pinctrl_ops handling

	/*

	 * first find the group of this node and check if we need to create

	 * config maps for pins

 create mux map */

 create config map */

/*

 * Hardware access

 cif-d2m0 */

 cif-d2m1 */

 pdm-m0 */

 pdm-m1 */

 uart2-rxm0 */

 uart2-rxm1 */

 uart3-rxm0 */

 uart3-rxm1 */

 spi-0 */

 spi-1 */

 spi-2 */

 i2s-0 */

 i2s-1 */

 emmc-0 */

 emmc-1 */

 non-iomuxed emmc/flash pins on flash-dqs */

 non-iomuxed emmc/flash pins on emmc-clk */

 pwm0-0 */

 pwm0-1 */

 pwm1-0 */

 pwm1-1 */

 pwm2-0 */

 pwm2-1 */

 pwm3-0 */

 pwm3-1 */

 sdio-0_d0 */

 sdio-1_d0 */

 spi-0_rx */

 spi-1_rx */

 emmc-0_cmd */

 emmc-1_cmd */

 uart2-0_rx */

 uart2-1_rx */

 uart1-0_rx */

 uart1-1_rx */

 edphdmi_cecinoutt1 */

 edphdmi_cecinout */

 rtc_clk */

 uart2_rxm0 */

 uart2_rxm1 */

 i2c3_sdam0 */

 i2c3_sdam1 */

 i2c3_sdam2 */

 i2s-8ch-1-sclktxm0 */

 i2s-8ch-1-sclkrxm0 */

 i2s-8ch-1-sclktxm1 */

 i2s-8ch-1-sclkrxm1 */

 pdm-clkm0 */

 pdm-clkm1 */

 pdm-clkm2 */

 pdm-clkm-m2 */

 spi1_miso */

 spi1_miso_m1 */

 owire_m0 */

 owire_m1 */

 owire_m2 */

 can_rxd_m0 */

 can_rxd_m1 */

 can_rxd_m2 */

 mac_rxd0_m0 */

 mac_rxd0_m1 */

 uart3_rx */

 uart3_rx_m1 */

 uart2dbg_rxm0 */

 uart2dbg_rxm1 */

 gmac-m1_rxd0 */

 gmac-m1-optimized_rxd3 */

 pdm_sdi0m0 */

 pdm_sdi0m1 */

 spi_rxdm2 */

 i2s2_sdim0 */

 i2s2_sdim1 */

 card_iom1 */

 tsp_d5m1 */

 cif_data5m1 */

 uart2dbga_rx */

 uart2dbgb_rx */

 uart2dbgc_rx */

 pcie_clkreqn */

 pcie_clkreqnb */

 PWM0 IO mux M0 */

 PWM0 IO mux M1 */

 PWM1 IO mux M0 */

 PWM1 IO mux M1 */

 PWM2 IO mux M0 */

 PWM2 IO mux M1 */

 CAN0 IO mux M0 */

 CAN0 IO mux M1 */

 CAN1 IO mux M0 */

 CAN1 IO mux M1 */

 CAN2 IO mux M0 */

 CAN2 IO mux M1 */

 HPDIN IO mux M0 */

 HPDIN IO mux M1 */

 GMAC1 IO mux M0 */

 GMAC1 IO mux M1 */

 HDMITX IO mux M0 */

 HDMITX IO mux M1 */

 I2C2 IO mux M0 */

 I2C2 IO mux M1 */

 I2C3 IO mux M0 */

 I2C3 IO mux M1 */

 I2C4 IO mux M0 */

 I2C4 IO mux M1 */

 I2C5 IO mux M0 */

 I2C5 IO mux M1 */

 PWM8 IO mux M0 */

 PWM8 IO mux M1 */

 PWM9 IO mux M0 */

 PWM9 IO mux M1 */

 PWM10 IO mux M0 */

 PWM10 IO mux M1 */

 PWM11 IO mux M0 */

 PWM11 IO mux M1 */

 PWM12 IO mux M0 */

 PWM12 IO mux M1 */

 PWM13 IO mux M0 */

 PWM13 IO mux M1 */

 PWM14 IO mux M0 */

 PWM14 IO mux M1 */

 PWM15 IO mux M0 */

 PWM15 IO mux M1 */

 SDMMC2 IO mux M0 */

 SDMMC2 IO mux M1 */

 SPI0 IO mux M0 */

 SPI0 IO mux M1 */

 SPI1 IO mux M0 */

 SPI1 IO mux M1 */

 SPI2 IO mux M0 */

 SPI2 IO mux M1 */

 SPI3 IO mux M0 */

 SPI3 IO mux M1 */

 UART1 IO mux M0 */

 UART1 IO mux M1 */

 UART2 IO mux M0 */

 UART2 IO mux M1 */

 UART3 IO mux M0 */

 UART3 IO mux M1 */

 UART4 IO mux M0 */

 UART4 IO mux M1 */

 UART5 IO mux M0 */

 UART5 IO mux M1 */

 UART6 IO mux M0 */

 UART6 IO mux M1 */

 UART7 IO mux M0 */

 UART7 IO mux M1 */

 UART7 IO mux M2 */

 UART8 IO mux M0 */

 UART8 IO mux M1 */

 UART9 IO mux M0 */

 UART9 IO mux M1 */

 UART9 IO mux M2 */

 I2S1 IO mux M0 */

 I2S1 IO mux M1 */

 I2S1 IO mux M2 */

 I2S2 IO mux M0 */

 I2S2 IO mux M1 */

 I2S3 IO mux M0 */

 I2S3 IO mux M1 */

 PDM IO mux M0 */

 PDM IO mux M0 */

 PDM IO mux M1 */

 PDM IO mux M1 */

 PDM IO mux M2 */

 PCIE20 IO mux M0 */

 PCIE20 IO mux M1 */

 PCIE20 IO mux M2 */

 PCIE30X1 IO mux M0 */

 PCIE30X1 IO mux M1 */

 PCIE30X1 IO mux M2 */

 PCIE30X2 IO mux M0 */

 PCIE30X2 IO mux M1 */

 PCIE30X2 IO mux M2 */

 get basic quadrupel of mux registers and the correct reg inside */

/*

 * Set a new mux function for a pin.

 *

 * The register is divided into the upper and lower 16 bit. When changing

 * a value, the previous register value is not read and changed. Instead

 * it seems the changed bits are marked in the upper 16 bit, while the

 * changed value gets set in the same offset in the lower 16 bit.

 * All pin settings seem to be 2 bit wide in both the upper and lower

 * parts.

 * @bank: pin bank to change

 * @pin: pin to change

 * @mux: new mux function to set

 get basic quadrupel of mux registers and the correct reg inside */

 handle special locations */

 The first 32 pins of the first bank are located in PMU */

 correct the offset, as we're starting with the 2nd bank */

 The first 32 pins of the first bank are located in PMU */

 correct the offset, as we're starting with the 2nd bank */

 The first 24 pins of the first bank are located in PMU */

 correct the offset, as we're starting with the 2nd bank */

 The first 24 pins of the first bank are located in PMU */

 correct the offset, as we're starting with the 2nd bank */

 The first 12 pins of the first bank are located elsewhere */

 correct the offset, as it is the 2nd pull register */

		/*

		 * The bits in these registers have an inverse ordering

		 * with the lowest pin being in bits 15:14 and the highest

		 * pin in bits 1:0

 The first 24 pins of the first bank are located in PMU */

 correct the offset, as we're starting with the 2nd bank */

 The first 24 pins of the first bank are located in PMU */

 correct the offset, as we're starting with the 2nd bank */

 The first 32 pins of the first bank are located in PMU */

 correct the offset, as we're starting with the 2nd bank */

 The first 32 pins of the first bank are located in PMU */

 correct the offset, as we're starting with the 2nd bank */

 The bank0:16 and bank1:32 pins are located in PMU */

 correct the offset, as we're starting with the 3rd bank */

  The bank0:16 and bank1:32 pins are located in PMU */

 The first 32 pins of the first bank are located in PMU */

 regular case, nothing to do */

			/*

			 * drive-strength offset is special, as it is

			 * spread over 2 registers

			/*

			 * the bit data[15] contains bit 0 of the value

			 * while temp[1:0] contains bits 2 and 1

 setting fully enclosed in the second register */

 regular case, nothing to do */

			/*

			 * drive-strength offset is special, as it is spread

			 * over 2 registers, the bit data[15] contains bit 0

			 * of the value while temp[1:0] contains bits 2 and 1

 setting fully enclosed in the second register */

 enable the write to the equivalent lower bits */

 rk3066b does support any pulls */

 rk3066b does support any pulls */

		/*

		 * In the TRM, pull-up being 1 for everything except the GPIO0_D0-D6,

		 * where that pull up value becomes 3.

 enable the write to the equivalent lower bits */

 enable the write to the equivalent lower bits */

/*

 * Pinmux_ops handling

	/*

	 * for each pin in the pin group selected, program the corresponding

	 * pin function number in the config register.

 revert the already done pin settings */

/*

 * Pinconf_ops handling

 set the pin config settings for a specified pin */

			/*

			 * Check for gpio driver not being probed yet.

			 * The lock makes sure that either gpio-probe has completed

			 * or the gpio driver hasn't probed yet.

 rk3288 is the first with per-pin drive-strength */

 for each config */

 get the pin config settings for a specified pin */

 rk3288 is the first with per-pin drive-strength */

 Initialise group */

	/*

	 * the binding format is rockchip,pins = <bank pin mux CONFIG>,

	 * do sanity check and calculate pins number

 we do not check return since it's safe node passed down */

 Initialise function */

 retrieve the soc specific data */

 calculate iomux and drv offsets */

 preset iomux offset value, set new start value */

 set current iomux offset */

 preset drv offset value, set new start value */

 set current drv offset */

			/*

			 * Increase offset according to iomux width.

			 * 4bit iomux'es are spread over two registers.

			/*

			 * Increase offset according to drv width.

			 * 3bit drive-strenth'es are spread over two registers.

 calculate the per-bank recalced_mask */

 calculate the per-bank route_mask */

	/*

	 * RK3288 GPIO6_C6 mux would be modified by Maskrom when resume, so save

	 * the setting here, and restore it at resume.

 to check for the old dt-bindings */

 Honor the old binding, with pull registers as 2nd resource */

 try to find the optional reference to the pmu syscon */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * MAX77620 pin control driver.

 *

 * Copyright (c) 2016, NVIDIA CORPORATION.  All rights reserved.

 *

 * Author:

 *	Chaitanya Bandi <bandik@nvidia.com>

 *	Laxman Dewangan <ldewangan@nvidia.com>

/*

 * Marvell 37xx SoC pinctrl driver

 *

 * Copyright (C) 2017 Marvell

 *

 * Gregory CLEMENT <gregory.clement@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2 or later. This program is licensed "as is"

 * without any warranty of any kind, whether express or implied.

/**

 * struct armada_37xx_pin_group: represents group of pins of a pinmux function.

 * The pins of a pinmux groups are composed of one or two groups of contiguous

 * pins.

 * @name:	Name of the pin group, used to lookup the group.

 * @start_pin:	Index of the first pin of the main range of pins belonging to

 *		the group

 * @npins:	Number of pins included in the first range

 * @reg_mask:	Bit mask matching the group in the selection register

 * @val:	Value to write to the registers for a given function

 * @extra_pin:	Index of the first pin of the optional second range of pins

 *		belonging to the group

 * @extra_npins:Number of pins included in the second optional range

 * @funcs:	A list of pinmux functions that can be selected for this group.

 * @pins:	List of the pins included in the group

 this actually controls "pcie1_reset" */

 We never have more than 2 registers */

/*

 * Pinmux_ops handling

 Set initial polarity based on current input level. */

 falling */

 rising */

		/*

		 * For the gpios which are used for both-edge irqs, when their

		 * interrupts happen, their input levels are changed,

		 * yet their interrupt polarities are kept in old values, we

		 * should synchronize their interrupt polarities; for example,

		 * at first a gpio's input level is low and its interrupt

		 * polarity control is "Detect rising edge", then the gpio has

		 * a interrupt , its level turns to high, we should change its

		 * polarity control to "Detect falling edge" correspondingly.

 Spurious irq */

 Manage only the interrupt that was enabled */

 Swap polarity (race with GPIO line) */

					/*

					 * For spurious irq, which gpio level

					 * is not as expected after incoming

					 * edge, just ack the gpio irq.

 Update status in case a new IRQ appears */

 Manage only the interrupt that was enabled */

	/*

	 * The mask field is a "precomputed bitmask for accessing the

	 * chip registers" which was introduced for the generic

	 * irqchip framework. As we don't use this framework, we can

	 * reuse this field for our own usage.

 Check if we have at least one gpio-controller child node */

	/*

	 * Many interrupts are connected to the parent interrupt

	 * controller. But we do not take advantage of this and use

	 * the chained irq with all of them.

/**

 * armada_37xx_add_function() - Add a new function to the list

 * @funcs: array of function to add the new one

 * @funcsize: size of the remaining space for the function

 * @name: name of the function to add

 *

 * If it is a new function then create it by adding its name else

 * increment the number of group associated to this function.

 function already there */

 append new unique function */

/**

 * armada_37xx_fill_group() - complete the group array

 * @info: info driver instance

 *

 * Based on the data available from the armada_37xx_pin_group array

 * completes the last member of the struct for each function: the list

 * of the groups associated to this function.

 *

 check for unique functions and count groups */

/**

 * armada_37xx_fill_funcs() - complete the funcs array

 * @info: info driver instance

 *

 * Based on the data available from the armada_37xx_pin_group array

 * completes the last two member of the struct for each group:

 * - the list of the pins included in the group

 * - the list of pinmux functions that can be selected for this group

 *

	/*

	 * we allocate functions for number of pins and hope there are

	 * fewer unique functions than pins available

 Save GPIO state */

 Save pinctrl state */

 Restore GPIO state */

	/*

	 * Input levels may change during suspend, which is not monitored at

	 * that time. GPIOs used for both-edge IRQs may not be synchronized

	 * anymore with their polarities (rising/falling edge) and must be

	 * re-configured manually.

		/*

		 * Synchronize level and polarity for both-edge irqs:

		 *     - a high input level expects a falling edge,

		 *     - a low input level exepects a rising edge.

 Restore pinctrl state */

/*

 * Since pinctrl is an infrastructure module, its resume should be issued prior

 * to other IO drivers.

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell Orion pinctrl driver based on mvebu pinctrl core

 *

 * Author: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>

 *

 * The first 16 MPP pins on Orion are easy to handle: they are

 * configured through 2 consecutive registers, located at the base

 * address of the MPP device.

 *

 * However the last 4 MPP pins are handled by a register at offset

 * 0x50 from the base address, so it is not consecutive with the first

 * two registers.

/*

 * There are multiple variants of the Orion SoCs, but in terms of pin

 * muxing, they are identical.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell Armada 370 pinctrl driver based on mvebu pinctrl core

 *

 * Copyright (C) 2012 Marvell

 *

 * Thomas Petazzoni <thomas.petazzoni@free-electrons.com>

 no variants for Armada 370 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell Armada 375 pinctrl driver based on mvebu pinctrl core

 *

 * Copyright (C) 2012 Marvell

 *

 * Thomas Petazzoni <thomas.petazzoni@free-electrons.com>

 no variants for Armada 375 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell Armada 380/385 pinctrl driver based on mvebu pinctrl core

 *

 * Copyright (C) 2013 Marvell

 *

 * Thomas Petazzoni <thomas.petazzoni@free-electrons.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell Dove pinctrl driver based on mvebu pinctrl core

 *

 * Author: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>

 Internal registers can be configured at any 1 MiB aligned address */

 MPP Base registers */

 MPP Control 4 register */

 PMU Signal Select registers */

 Global Config regmap registers */

 mpp_camera */

 mpp_sdio0 */

 mpp_sdio1 */

 mpp_spi0 */

 mpp_uart1 */

 mpp_camera */

 mpp_sdio0 */

 mpp_sdio1 */

 mpp_spi0 */

 mpp_uart1 */

 SSP/TWSI only if I2S1 not set*/

 TWSI only if SPDIFO not set*/

/* mpp[52:57] gpio pins depend heavily on current config;

 * gpio_req does not try to mux in gpio capabilities to not

 * break other functions. If you require all mpps as gpio

 * enforce gpio setting by pinctrl mapping.

 i2s1 : gpio[56:57] */

 ssp  : gpio[56:57] */

 spdifo : gpio[52:55] */

 twsi   : gpio[52:55] */

 all gpio */

 0x00 : i2s1/spdifo : no gpio */

 0x0c : ssp/spdifo  : no gpio */

 0x0f : ssp/twsi    : no gpio */

 mpp[52:57] has gpio pins capable of in and out */

	/*

	 * General MPP Configuration Register is part of pdma registers.

	 * grab clk to make sure it is ticking.

 prepare fallback resource */

 Warn on any missing DT resource */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell Armada XP pinctrl driver based on mvebu pinctrl core

 *

 * Copyright (C) 2012 Marvell

 *

 * Thomas Petazzoni <thomas.petazzoni@free-electrons.com>

 *

 * This file supports the three variants of Armada XP SoCs that are

 * available: mv78230, mv78260 and mv78460. From a pin muxing

 * perspective, the mv78230 has 49 MPP pins. The mv78260 and mv78460

 * both have 67 MPP pins (more GPIOs and address lines for the memory

 * bus mainly).

		/* We don't necessarily want the full list of the

		 * armada_xp_mpp_modes, but only the first 'n' ones

		/* We don't necessarily want the full list of the

		 * armada_xp_mpp_modes, but only the first 'n' ones

		/* We don't necessarily want the full list of the

		 * armada_xp_mpp_modes, but only the first 'n' ones

 fall-through */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell Armada ap806 pinctrl driver based on mvebu pinctrl core

 *

 * Copyright (C) 2017 Marvell

 *

 * Thomas Petazzoni <thomas.petazzoni@free-electrons.com>

 * Hanna Hawa <hannah@marvell.com>

 no variants for Armada AP806 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell Armada CP110 pinctrl driver based on mvebu pinctrl core

 *

 * Copyright (C) 2017 Marvell

 *

 * Hanna Hawa <hannah@marvell.com>

/*

 * Even if the pin controller is the same the MMP available depend on the SoC

 * integration.

 *  - In Armada7K (single CP) almost all the MPPs are available (except the

 *    MMP 39 to 43)

 *  - In Armada8K (dual CP) the MPPs are split into 2 parts, MPPs 0-31 from

 *    CPS, and MPPs 32-62 from CPM, the below flags (V_ARMADA_8K_CPM,

 *    V_ARMADA_8K_CPS) set which MPP is available to the CPx.

 * The x_PLUS enum mean that the MPP available for CPx and for Armada70x0

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell Kirkwood pinctrl driver based on mvebu pinctrl core

 *

 * Author: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell MVEBU pinctrl core driver

 *

 * Authors: Sebastian Hesselbarth <sebastian.hesselbarth@gmail.com>

 *          Thomas Petazzoni <thomas.petazzoni@free-electrons.com>

 for each config */

 skip unsupported settings for this variant */

 function already there */

 append new unique function */

	/* we allocate functions for number of pins and hope

 skip unsupported settings on this variant */

 check for unique functions and count groups */

 skip unsupported settings on this variant */

 allocate group name array if not done already */

 find next free group name and assign current name */

	/* count controls and create names for mvebu generic

 initialize control's pins[] array */

		/*

		 * We allow to pass controls with NULL name that we treat

		 * as a range of one-pin groups with generic mvebu register

		 * controls.

	/*

	 * allocate groups and name buffers for unnamed groups.

 assign mpp controls to groups */

		/*

		 * We treat unnamed controls as a range of one-pin groups

		 * with generic mvebu register controls. Use one group for

		 * each in this range and assign a default group name.

 assign mpp modes to groups */

 skip unsupported settings for this variant */

 find gpio/gpo/gpi settings */

 skip modes with no settings for this variant */

 register gpio ranges */

/*

 * mvebu_pinctrl_simple_mmio_probe - probe a simple mmio pinctrl

 * @pdev: platform device (with platform data already attached)

 *

 * Initialise a simple (single base address) mmio pinctrl driver,

 * assigning the MMIO base address to all mvebu mpp ctrl instances.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Marvell Armada 39x pinctrl driver based on mvebu pinctrl core

 *

 * Copyright (C) 2015 Marvell

 *

 * Thomas Petazzoni <thomas.petazzoni@free-electrons.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2014, Sony Mobile Communications AB.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015, Sony Mobile Communications AB.

 * Copyright (c) 2013, The Linux Foundation. All rights reserved.

 MPP registers */

 MPP Type: type */

 Digital Input: control */

 Digital Output: control */

 Bidirectional: control */

 Analog Output: control */

 Current Sink: control */

 DTEST Current Sink: control */

 DTEST Digital Output: control */

 custom pinconf parameters */

/**

 * struct pm8xxx_pin_data - dynamic configuration for a pin

 * @reg:		address of the control register

 * @mode:		operating mode for the pin (digital, analog or current sink)

 * @input:		pin is input

 * @output:		pin is output

 * @high_z:		pin is floating

 * @paired:		mpp operates in paired mode

 * @output_value:	logical output value of the mpp

 * @power_source:	selected power source

 * @dtest:		DTEST route selector

 * @amux:		input muxing in analog mode

 * @aout_level:		selector of the output in analog mode

 * @drive_strength:	drive strength of the current sink

 * @pullup:		pull up value, when in digital bidirectional mode

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2014, Sony Mobile Communications AB.

 * Copyright (c) 2016 BayLibre, SAS.

 * Author : Neil Armstrong <narmstrong@baylibre.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2021, The Linux Foundation. All rights reserved.

 * Copyright (c) 2021, Konrad Dybcio <konrad.dybcio@somainline.org>

 gpio mode */	\

/*

 * Every pin is maintained as a single group, and missing or non-existing pin

 * would be maintained as dummy group to synchronize pin group index with

 * pin descriptor registered with pinctrl core.

 * Clients would not be able to request these dummy pin groups.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015, Sony Mobile Communications AB.

 CS1A */

 CS2A */

 CS1B */

 CS2B */

 CS5 */

 CS4 */

 CS3 */

 CS0 */

 ADDR9 & ADDR8 */

 ADDR7 - ADDR 0 */

 (muxed address+data) AD15 - AD0 */

 OE output enable */

 clock */

 ADV */

 WAIT (input) */

 UB Upper Byte Enable */

 LB Lower Byte Enable */

 WE Write Enable */

 busy */

 for EBI2 chip selects */

 for general EBI2 pins */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015, Sony Mobile Communications AB.

 * Copyright (c) 2013, The Linux Foundation. All rights reserved.

 mode */

 output buffer */

 bias */

 GPIO registers */

 custom pinconf parameters */

/**

 * struct pm8xxx_pin_data - dynamic configuration for a pin

 * @reg:               address of the control register

 * @power_source:      logical selected voltage source, mapping in static data

 *                     is used translate to register values

 * @mode:              operating mode for the pin (input/output)

 * @open_drain:        output buffer configured as open-drain (vs push-pull)

 * @output_value:      configured output value

 * @bias:              register view of configured bias

 * @pull_up_strength:  placeholder for selected pull up strength

 *                     only used to configure bias when pull up is selected

 * @output_strength:   selector of output-strength

 * @disable:           pin disabled / configured as tristate

 * @function:          pinmux selector

 * @inverted:          pin logic is inverted

	/*

	 * For DeviceTree-supported systems, the gpio core checks the

	 * pinctrl's device node for the "gpio-ranges" property.

	 * If it is present, it takes care of adding the pin ranges

	 * for the driver. In this case the driver can skip ahead.

	 *

	 * In order to remain compatible with older, existing DeviceTree

	 * files which don't set the "gpio-ranges" property or systems that

	 * utilize ACPI the driver has to call gpiochip_add_pin_range().

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2012-2014, The Linux Foundation. All rights reserved.

/*

 * Pull Up Values - it indicates whether a pull-up should be

 * applied for bidirectional mode only. The hardware ignores the

 * configuration when operating in other modes.

 type registers base address bases */

 mpp peripheral type and subtype values */

 control register base address bases */

 PMIC_MPP_REG_MODE_CTL */

 PMIC_MPP_REG_DIG_VIN_CTL */

 PMIC_MPP_REG_DIG_PULL_CTL */

 PMIC_MPP_REG_EN_CTL */

 PMIC_MPP_REG_AIN_CTL */

 Qualcomm specific pin configurations */

/**

 * struct pmic_mpp_pad - keep current MPP settings

 * @base: Address base in SPMI device.

 * @is_enabled: Set to false when MPP should be put in high Z state.

 * @out_value: Cached pin output value.

 * @output_enabled: Set to true if MPP output logic is enabled.

 * @input_enabled: Set to true if MPP input buffer logic is enabled.

 * @paired: Pin operates in paired mode

 * @has_pullup: Pin has support to configure pullup

 * @num_sources: Number of power-sources supported by this MPP.

 * @power_source: Current power-source used.

 * @amux_input: Set the source for analog input.

 * @aout_level: Analog output level

 * @pullup: Pullup resistor value. Valid in Bidirectional mode only.

 * @function: See pmic_mpp_functions[].

 * @drive_strength: Amount of current in sink mode

 * @dtest: DTEST route selector

 Every PIN is a group */

 Convert register value to pinconf value */

 Make it possible to enable the pin, by not setting high impedance */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2019-2020, The Linux Foundation. All rights reserved.

 * Copyright (c) 2020-2021, Linaro Limited

 gpio mode */	\

/* Every pin is maintained as a single group, and missing or non-existing pin

 * would be maintained as dummy group to synchronize pin group index with

 * pin descriptor registered with pinctrl core.

 * Clients would not be able to request these dummy pin groups.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2016, The Linux Foundation. All rights reserved.

 * Copyright (c) 2018, Craig Tatlor.

 gpio mode */	\

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2015-2016, The Linux Foundation. All rights reserved.

 gpio mode */	\

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

 gpio mode */	\

/* Every pin is maintained as a single group, and missing or non-existing pin

 * would be maintained as dummy group to synchronize pin group index with

 * pin descriptor registered with pinctrl core.

 * Clients would not be able to request these dummy pin groups.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2016-2019, The Linux Foundation. All rights reserved.

 * Copyright (c) 2020 Linaro Ltd.

 Bit offset in slew register for SoundWire pins only */

 sm8250 variant specific data */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015, The Linux Foundation. All rights reserved.

 gpio mode */	\

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2013, Sony Mobile Communications AB.

 * Copyright (c) 2013, The Linux Foundation. All rights reserved.

/**

 * struct msm_pinctrl - state for a pinctrl-msm device

 * @dev:            device handle.

 * @pctrl:          pinctrl handle.

 * @chip:           gpiochip handle.

 * @desc:           pin controller descriptor

 * @restart_nb:     restart notifier block.

 * @irq_chip:       irq chip information

 * @irq:            parent irq for the TLMM irq_chip.

 * @intr_target_use_scm: route irq to application cpu using scm calls

 * @lock:           Spinlock to protect register resources as well

 *                  as msm_pinctrl data structures.

 * @enabled_irqs:   Bitmap of currently enabled irqs.

 * @dual_edge_irqs: Bitmap of irqs that need sw emulated dual edge

 *                  detection.

 * @skip_wake_irqs: Skip IRQs that are handled by wakeup interrupt controller

 * @disabled_for_mux: These IRQs were disabled because we muxed away.

 * @soc:            Reference to soc_data of platform specific data.

 * @regs:           Base addresses for the TLMM tiles.

 * @phys_base:      Physical base address

	/*

	 * If an GPIO interrupt is setup on this pin then we need special

	 * handling.  Specifically interrupt detection logic will still see

	 * the pin twiddle even when we're muxed away.

	 *

	 * When we see a pin with an interrupt setup on it then we'll disable

	 * (mask) interrupts on it when we mux away until we mux back.  Note

	 * that disable_irq() refcounts and interrupts are disabled as long as

	 * at least one disable_irq() has been called.

		/*

		 * Clear interrupts detected while not GPIO since we only

		 * masked things.

 No funcs? Probably ACPI so can't do anything here */

 Convert register value to pinconf value */

 Pin is not open-drain */

 Pin is not output */

 Pin is output */

 Convert pinconf values to register values */

 Check for invalid values */

 set output value */

 enable output */

 disable output */

 Range-check user-supplied value */

 Driver provided reserved list overrides DT and ACPI */

 The number of GPIOs in the ACPI tables */

/* For dual-edge interrupts in software, since some hardware has no

 * such support:

 *

 * At appropriate moments, this function may be called to flip the polarity

 * settings of both-edge irq lines to try and catch the next edge.

 *

 * The attempt is considered successful if:

 * - the status bit goes high, indicating that an edge was caught, or

 * - the input value of the gpio doesn't change during the attempt.

 * If the value changes twice during the process, that would cause the first

 * test to fail but would force the second, as two opposite

 * transitions would cause a detection no matter the polarity setting.

 *

 * The do-loop tries to sledge-hammer closed the timing hole between

 * the initial value-read and the polarity-write - if the line value changes

 * during that window, an interrupt is lost, the new polarity setting is

 * incorrect, and the first success test will fail, causing a retry.

 *

 * Algorithm comes from Google's msmgpio driver.

	/*

	 * There are two bits that control interrupt forwarding to the CPU. The

	 * RAW_STATUS_EN bit causes the level or edge sensed on the line to be

	 * latched into the interrupt status register when the hardware detects

	 * an irq that it's configured for (either edge for edge type or level

	 * for level type irq). The 'non-raw' status enable bit causes the

	 * hardware to assert the summary interrupt to the CPU if the latched

	 * status bit is set. There's a bug though, the edge detection logic

	 * seems to have a problem where toggling the RAW_STATUS_EN bit may

	 * cause the status bit to latch spuriously when there isn't any edge

	 * so we can't touch that bit for edge type irqs and we have to keep

	 * the bit set anyway so that edges are latched while the line is masked.

	 *

	 * To make matters more complicated, leaving the RAW_STATUS_EN bit

	 * enabled all the time causes level interrupts to re-latch into the

	 * status register because the level is still present on the line after

	 * we ack it. We clear the raw status enable bit during mask here and

	 * set the bit on unmask so the interrupt can't latch into the hardware

	 * while it's masked.

/**

 * msm_gpio_update_dual_edge_parent() - Prime next edge for IRQs handled by parent.

 * @d: The irq dta.

 *

 * This is much like msm_gpio_update_dual_edge_pos() but for IRQs that are

 * normally handled by the parent irqchip.  The logic here is slightly

 * different due to what's easy to do with our parent, but in principle it's

 * the same.

 Read the value and make a guess about what edge we need to catch */

 Set the parent to catch the next edge */

		/*

		 * Possibly the line changed between when we last read "val"

		 * (and decided what edge we needed) and when set the edge.

		 * If the value didn't change (or changed and then changed

		 * back) then we're done.

	/*

	 * For hw without possibility of detecting both edges

	/* Route interrupts to application cpu.

	 * With intr_target_use_scm interrupts are routed to

	 * application cpu using scm calls.

	/* Update configuration for gpio.

	 * RAW_STATUS_EN is left on for all gpio irqs. Due to the

	 * internal circuitry of TLMM, toggling the RAW_STATUS

	 * could cause the INTR_STATUS to be set for EDGE interrupts.

	/*

	 * The first time we set RAW_STATUS_EN it could trigger an interrupt.

	 * Clear the interrupt.  This is safe because we have

	 * IRQCHIP_SET_TYPE_MASKED.

	/*

	 * While they may not wake up when the TLMM is powered off,

	 * some GPIOs would like to wakeup the system from suspend

	 * when TLMM is powered on. To allow that, enable the GPIO

	 * summary line to be wakeup capable at GIC.

	/*

	 * The disable / clear-enable workaround we do in msm_pinmux_set_mux()

	 * only works if disable is not lazy since we only clear any bogus

	 * interrupt in hardware. Explicitly mark the interrupt as UNLAZY.

	/*

	 * Each pin has it's own IRQ status register, so use

	 * enabled_irq bitmap to limit the number of reads.

 No interrupts were flagged */

		/*

		 * Let's skip handling the GPIOs, if the parent irqchip

		 * is handling the direct connect IRQ of the GPIO.

	/*

	 * For DeviceTree-supported systems, the gpio core checks the

	 * pinctrl's device node for the "gpio-ranges" property.

	 * If it is present, it takes care of adding the pin ranges

	 * for the driver. In this case the driver can skip ahead.

	 *

	 * In order to remain compatible with older, existing DeviceTree

	 * files which don't set the "gpio-ranges" property or systems that

	 * utilize ACPI the driver has to call gpiochip_add_pin_range().

SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)

 gpio mode */	\

 /*

 * Every pin is maintained as a single group, and missing or non-existing pin

 * would be maintained as dummy group to synchronize pin group index with

 * pin descriptor registered with pinctrl core.

 * Clients would not be able to request these dummy pin groups.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015, The Linux Foundation. All rights reserved.

 *

 * GPIO and pin control functions on this SOC are handled by the "TLMM"

 * device.  The driver which controls this device is pinctrl-msm.c.  Each

 * SOC with a TLMM is expected to create a client driver that registers

 * with pinctrl-msm.c.  This means that all TLMM drivers are pin control

 * drivers.

 *

 * This pin control driver is intended to be used only an ACPI-enabled

 * system.  As such, UEFI will handle all pin control configuration, so

 * this driver does not provide pin control functions.  It is effectively

 * a GPIO-only driver.  The alternative is to duplicate the GPIO code of

 * pinctrl-msm.c into another driver.

 A maximum of 256 allows us to use a u8 array to hold the GPIO numbers */

 maximum size of each gpio name (enough room for "gpioXXX" + null) */

 The number of GPIOs we support */

 An array of supported GPIOs */

 Query the number of GPIOs from ACPI */

 The number of GPIOs in the approved list */

	/*

	 * The number of available GPIOs should be non-zero, and no

	 * more than the total number of GPIOS.

	/*

	 * Initialize the array.  GPIOs not listed in the 'gpios' array

	 * still need a number, but nothing else.

 Populate the entries that are meant to be exposed as GPIOs. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

 * Copyright (c) 2020-2021, Linaro Ltd.

/*

 * ACPI DSDT has one single memory resource for TLMM.  The offsets below are

 * used to locate different tiles for ACPI probe.

 gpio mode */	\

/* Every pin is maintained as a single group, and missing or non-existing pin

 * would be maintained as dummy group to synchronize pin group index with

 * pin descriptor registered with pinctrl core.

 * Clients would not be able to request these dummy pin groups.

 terminator */

/*

 * ACPI DSDT has one single memory resource for TLMM, which voilates the

 * hardware layout of 3 sepearte tiles.  Let's split the memory resource into

 * 3 named ones, so that msm_pinctrl_probe() can map memory for ACPI in the

 * same way as for DT probe.

	/*

	 * DT already has tiles defined properly, so nothing needs to be done

	 * for DT probe.

 Allocate for new resources */

 Save memory resource and copy others */

 Append tile memory resources */

 Add new MEM to resource tree */

 Remove old MEM from resource tree */

 Free old resources and install new ones */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2017, The Linux Foundation. All rights reserved.

 gpio mode */	\

 LCD_TE */

 BUSY_N */

 LCD_RS_N */

 WE_N */

 OE_N */

 DATA[0] */

 DATA[1] */

 DATA[2] */

 DATA[3] */

 CS_CSR_LCD */

 CLE */

 NAND_CS_N */

 DATA[4] */

 DATA[5] */

 DATA[6] */

 DATA[7] */

 DATA[8] */

 ALE */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.

 gpio mode */	\

/* Every pin is maintained as a single group, and missing or non-existing pin

 * would be maintained as dummy group to synchronize pin group index with

 * pin descriptor registered with pinctrl core.

 * Clients would not be able to request these dummy pin groups.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2021, Konrad Dybcio <konrad.dybcio@somainline.org>

 *

 * based on pinctrl-msm8916.c

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2012-2014, 2016-2021 The Linux Foundation. All rights reserved.

 type and subtype registers base address offsets */

 GPIO peripheral type and subtype out_values */

 control register base address offsets */

 PMIC_GPIO_REG_MODE_CTL */

 PMIC_GPIO_REG_DIG_VIN_CTL */

 PMIC_GPIO_REG_DIG_PULL_CTL */

 PMIC_GPIO_REG_LV_MV_DIG_OUT_SOURCE_CTL for LV/MV */

 PMIC_GPIO_REG_DIG_IN_CTL */

 PMIC_GPIO_REG_DIG_OUT_CTL */

/*

 * Output type - indicates pin should be configured as push-pull,

 * open drain or open source.

 PMIC_GPIO_REG_EN_CTL */

 PMIC_GPIO_REG_LV_MV_ANA_PASS_THRU_SEL */

 Qualcomm specific pin configurations */

 The index of each function in pmic_gpio_functions[] array */

/**

 * struct pmic_gpio_pad - keep current GPIO settings

 * @base: Address base in SPMI device.

 * @is_enabled: Set to false when GPIO should be put in high Z state.

 * @out_value: Cached pin output value

 * @have_buffer: Set to true if GPIO output could be configured in push-pull,

 *	open-drain or open-source mode.

 * @output_enabled: Set to true if GPIO output logic is enabled.

 * @input_enabled: Set to true if GPIO input buffer logic is enabled.

 * @analog_pass: Set to true if GPIO is in analog-pass-through mode.

 * @lv_mv_type: Set to true if GPIO subtype is GPIO_LV(0x10) or GPIO_MV(0x11).

 * @num_sources: Number of power-sources supported by this GPIO.

 * @power_source: Current power-source used.

 * @buffer_type: Push-pull, open-drain or open-source.

 * @pullup: Constant current which flow trough GPIO output buffer.

 * @strength: No, Low, Medium, High

 * @function: See pmic_gpio_functions[]

 * @atest: the ATEST selection for GPIO analog-pass-through mode

 * @dtest_buffer: the DTEST buffer selection for digital input mode.

 Every PIN is a group */

	/*

	 * Non-LV/MV subtypes only support 2 special functions,

	 * offsetting the dtestx function values by 2

		/*

		 * For the non-LV/MV subtypes only 2 special functions are

		 * available, offsetting the dtest function values by 2.

 Pin could be disabled with PIN_CONFIG_BIAS_HIGH_IMPEDANCE */

 param[2] must be left as 0 */

	/*

	 * For DeviceTree-supported systems, the gpio core checks the

	 * pinctrl's device node for the "gpio-ranges" property.

	 * If it is present, it takes care of adding the pin ranges

	 * for the driver. In this case the driver can skip ahead.

	 *

	 * In order to remain compatible with older, existing DeviceTree

	 * files which don't set the "gpio-ranges" property or systems that

	 * utilize ACPI the driver has to call gpiochip_add_pin_range().

 pm660 has 13 GPIOs with holes on 1, 5, 6, 7, 8 and 10 */

 pm660l has 12 GPIOs with holes on 1, 2, 10, 11 and 12 */

 pm8150 has 10 GPIOs with holes on 2, 5, 7 and 8 */

 pm8150b has 12 GPIOs with holes on 3, r and 7 */

 pm8150l has 12 GPIOs with holes on 7 */

 pm8950 has 8 GPIOs with holes on 3 */

 pms405 has 12 GPIOs with holes on 1, 9, and 10 */

 pmx55 has 11 GPIOs with holes on 3, 7, 10, 11 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2013, Sony Mobile Communications AB.

/*

 * TODO: Add the rest of the possible functions and fill out

 * the pingroup table below.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2015-2016, The Linux Foundation. All rights reserved.

 *

 * Copyright (c) 2016, AngeloGioacchino Del Regno <kholk11@gmail.com>

 gpio mode */	\

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2014, The Linux Foundation. All rights reserved.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2016-2019, The Linux Foundation. All rights reserved.

 gpio mode */	\

/* Every pin is maintained as a single group, and missing or non-existing pin

 * would be maintained as dummy group to synchronize pin group index with

 * pin descriptor registered with pinctrl core.

 * Clients would not be able to request these dummy pin groups.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2014, The Linux Foundation. All rights reserved.

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2019, The Linux Foundation. All rights reserved.

 gpio mode */	\

/* Every pin is maintained as a single group, and missing or non-existing pin

 * would be maintained as dummy group to synchronize pin group index with

 * pin descriptor registered with pinctrl core.

 * Clients would not be able to request these dummy pin groups.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2016-2018, The Linux Foundation. All rights reserved.

 gpio mode */	\

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2020, The Linux Foundation. All rights reserved.

 gpio mode */		\

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

 gpio mode */	\

/*

 * Every pin is maintained as a single group, and missing or non-existing pin

 * would be maintained as dummy group to synchronize pin group index with

 * pin descriptor registered with pinctrl core.

 * Clients would not be able to request these dummy pin groups.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015, The Linux Foundation. All rights reserved.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2014-2015, The Linux Foundation. All rights reserved.

 gpio mode */	\

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.

 gpio mode */	\

/* Every pin is maintained as a single group, and missing or non-existing pin

 * would be maintained as dummy group to synchronize pin group index with

 * pin descriptor registered with pinctrl core.

 * Clients would not be able to request these dummy pin groups.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2016, The Linux Foundation. All rights reserved.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2019, The Linux Foundation. All rights reserved.

 gpio mode */	\

/* Every pin is maintained as a single group, and missing or non-existing pin

 * would be maintained as dummy group to synchronize pin group index with

 * pin descriptor registered with pinctrl core.

 * Clients would not be able to request these dummy pin groups.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2019-2020, The Linux Foundation. All rights reserved.

 gpio mode */	\

/* Every pin is maintained as a single group, and missing or non-existing pin

 * would be maintained as dummy group to synchronize pin group index with

 * pin descriptor registered with pinctrl core.

 * Clients would not be able to request these dummy pin groups.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2014, Sony Mobile Communications AB.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2020, The Linux Foundation. All rights reserved.

/*

 * TODO: Add the rest of the possible functions and fill out

 * the pingroup table below.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2020, The Linux Foundation. All rights reserved.

 gpio mode */	\

/* Every pin is maintained as a single group, and missing or non-existing pin

 * would be maintained as dummy group to synchronize pin group index with

 * pin descriptor registered with pinctrl core.

 * Clients would not be able to request these dummy pin groups.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pin controller and GPIO driver for Amlogic Meson GXBB.

 *

 * Copyright (C) 2016 Endless Mobile, Inc.

 * Author: Carlo Caione <carlo@endlessm.com>

 Bank X */

 Bank Y */

 Bank Z */

 Bank H */

 Bank DV */

 Bank BOOT */

 Bank CARD */

 bank AO */

 test n pin */

   name    first      last       irq       pullen  pull    dir     out     in  */

   name    first      last       irq    pullen  pull    dir     out     in  */

 SPDX-License-Identifier: (GPL-2.0+ OR MIT)

/*

 * Pin controller and GPIO driver for Amlogic Meson A1 SoC.

 *

 * Copyright (c) 2019 Amlogic, Inc. All rights reserved.

 * Author: Qianggui Song <qianggui.song@amlogic.com>

 psram */

 sdcard */

 spif */

 i2c0 */

 i2c1 */

 i2c2 */

 i2c3 */

 i2c slave */

 uart_a */

 uart_b */

 uart_c */

 pmw_a */

 pmw_b */

 pmw_c */

 pwm_d */

 pwm_e */

 pwm_f */

 pwm_a_hiz */

 pwm_b_hiz */

 pmw_c_hiz */

 tdm_a */

 spi_a */

 pdm */

 gen_clk */

 jtag_a */

 clk_32_in */

 ir in */

 ir out */

 spdif */

 sw */

 clk_25 */

 cec_a */

 cec_b */

 clk12_24 */

 mclk_0 */

 tdm_b */

 mclk_vad */

 tdm_vad */

 tst_out */

 mute */

 bank P func1 */

bank P func2 */

bank B func1 */

bank B func2 */

bank X func1 */

bank X func2 */

bank X func3 */

bank X func4 */

bank X func5 */

bank X func6 */

bank X func7 */

bank F func1 */

bank F func2 */

bank F func3 */

bank F func4 */

bank F func5 */

bank F func7 */

bank A func1 */

bank A func2 */

bank A func3 */

bank A func4 */

bank A func5 */

bank A func6 */

bank A func7 */

 name  first  last  irq  pullen  pull  dir  out  in  ds*/

  name	 first	    lask    reg	offset  */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pin controller and GPIO driver for Amlogic Meson SoCs

 *

 * Copyright (C) 2014 Beniamino Galvani <b.galvani@gmail.com>

/*

 * The available pins are organized in banks (A,B,C,D,E,X,Y,Z,AO,

 * BOOT,CARD for meson6, X,Y,DV,H,Z,AO,BOOT,CARD for meson8 and

 * X,Y,DV,H,AO,BOOT,CARD,DIF for meson8b) and each bank has a

 * variable number of pins.

 *

 * The AO bank is special because it belongs to the Always-On power

 * domain which can't be powered off; the bank also uses a set of

 * registers different from the other banks.

 *

 * For each pin controller there are 4 different register ranges that

 * control the following properties of the pins:

 *  1) pin muxing

 *  2) pull enable/disable

 *  3) pull up/down

 *  4) GPIO direction, output value, input value

 *

 * In some cases the register ranges for pull enable and pull

 * direction are the same and thus there are only 3 register ranges.

 *

 * Since Meson G12A SoC, the ao register ranges for gpio, pull enable

 * and pull direction are the same, so there are only 2 register ranges.

 *

 * For the pull and GPIO configuration every bank uses a contiguous

 * set of bits in the register sets described above; the same register

 * can be shared by more banks with different offsets.

 *

 * In addition to this there are some registers shared between all

 * banks that control the IRQ functionality. This feature is not

 * supported at the moment by the driver.

/**

 * meson_get_bank() - find the bank containing a given pin

 *

 * @pc:		the pinctrl instance

 * @pin:	the pin number

 * @bank:	the found bank

 *

 * Return:	0 on success, a negative value on error

/**

 * meson_calc_reg_and_bit() - calculate register and bit for a pin

 *

 * @bank:	the bank containing the pin

 * @pin:	the pin number

 * @reg_type:	the type of register needed (pull-enable, pull, etc...)

 * @reg:	the computed register offset

 * @bit:	the computed bit

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pin controller and GPIO driver for Amlogic Meson8 and Meson8m2.

 *

 * Copyright (C) 2014 Beniamino Galvani <b.galvani@gmail.com>

 bank X */

 bank Y */

 bank DV */

 bank H */

 bank Z */

 bank BOOT */

 bank CARD */

 bank AO */

 bank X */

 bank Y */

 bank DV */

 bank H */

 bank Z */

 NOTE: the following four groups are only available on Meson8m2: */

 bank BOOT */

 bank CARD */

 bank AO */

   name    first     last         irq       pullen  pull    dir     out     in  */

   name    first     last         irq    pullen  pull    dir     out     in  */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pin controller and GPIO driver for Amlogic Meson GXL.

 *

 * Copyright (C) 2016 Endless Mobile, Inc.

 * Author: Carlo Caione <carlo@endlessm.com>

 Bank X */

 Bank Z */

 Bank H */

 Bank DV */

 Bank BOOT */

 Bank CARD */

 Bank CLK */

 bank AO */

 test n pin */

   name    first      last       irq	     pullen  pull    dir     out     in  */

   name    first      last      irq	pullen  pull    dir     out     in  */

/*

 * Second generation of pinmux driver for Amlogic Meson-AXG SoC.

 *

 * Copyright (c) 2017 Baylibre SAS.

 * Author:  Jerome Brunet  <jbrunet@baylibre.com>

 *

 * Copyright (c) 2017 Amlogic, Inc. All rights reserved.

 * Author: Xingyu Chen <xingyu.chen@amlogic.com>

 *

 * SPDX-License-Identifier: (GPL-2.0+ or MIT)

/*

 * This new generation of pinctrl IP is mainly adopted by the

 * Meson-AXG SoC and later series, which use 4-width continuous

 * register bit to select the function for each pin.

 *

 * The value 0 is always selecting the GPIO mode, while other

 * values (start from 1) for selecting the function mode.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * First generation of pinmux driver for Amlogic Meson SoCs

 *

 * Copyright (C) 2014 Beniamino Galvani <b.galvani@gmail.com>

 * Copyright (C) 2017 Jerome Brunet  <jbrunet@baylibre.com>

/* For this first generation of pinctrl driver every pinmux group can be

 * enabled by a specific bit in the first register range. When all groups for

 * a given pin are disabled the pin acts as a GPIO.

/**

 * meson8_pmx_disable_other_groups() - disable other groups using a given pin

 *

 * @pc:		meson pin controller device

 * @pin:	number of the pin

 * @sel_group:	index of the selected group, or -1 if none

 *

 * The function disables all pinmux groups using a pin except the

 * selected one. If @sel_group is -1 all groups are disabled, leaving

 * the pin in GPIO mode.

 We have found a group using the pin */

	/*

	 * Disable groups using the same pin.

	 * The selected group is not disabled to avoid glitches.

 Function 0 (GPIO) doesn't need any additional setting */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pin controller and GPIO driver for Amlogic Meson8b.

 *

 * Copyright (C) 2015 Endless Mobile, Inc.

 * Author: Carlo Caione <carlo@endlessm.com>

	/*

	 * The following 2 pins are not mentionned in the public datasheet

	 * According to this datasheet, they can't be used with the gpio

	 * interrupt controller

 bank X */

 bank Y */

 bank DV */

 bank H */

 bank BOOT */

 bank CARD */

 bank AO */

 bank DIF */

 bank X */

 bank Y */

 bank DV */

 bank H */

 bank BOOT */

 bank CARD */

 bank DIF */

 bank AO */

   name        first          last        irq       pullen   pull     dir      out      in   */

	/*

	 * The following bank is not mentionned in the public datasheet

	 * There is no information whether it can be used with the gpio

	 * interrupt controller

   name    first     lastc        irq    pullen  pull    dir     out     in  */

 SPDX-License-Identifier: (GPL-2.0+ or MIT)

/*

 * Pin controller and GPIO driver for Amlogic Meson G12A SoC.

 *

 * Copyright (c) 2018 Amlogic, Inc. All rights reserved.

 * Author: Xingyu Chen <xingyu.chen@amlogic.com>

 * Author: Yixun Lan <yixun.lan@amlogic.com>

 emmc */

 nand */

 nor */

 sdio */

 sdcard */

 spi0 */

 spi1 */

 i2c0 */

 i2c1 */

 i2c2 */

 i2c3 */

 uart_a */

 uart_b */

 uart_c */

 uart_ao_a_c */

 iso7816 */

 eth */

 pwm_a */

 pwm_b */

 pwm_c */

 pwm_d */

 pwm_e */

 pwm_f */

 cec_ao */

 jtag_b */

 bt565_a */

 tsin_a */

 tsin_b */

 hdmitx */

 pdm */

 spdif_in */

 spdif_out */

 mclk0 */

 mclk1 */

 tdm */

 bank BOOT */

 bank GPIOZ */

 bank GPIOX */

 bank GPIOC */

 bank GPIOH */

 bank GPIOA */

 uart_ao_a */

 uart_ao_b */

 i2c_ao */

 i2c_ao_slave */

 ir_in */

 ir_out */

 pwm_a_e */

 pwm_ao_a */

 pwm_ao_b */

 pwm_ao_c */

 pwm_ao_d */

 jtag_a */

 cec_ao */

 tsin_ao_a */

 spdif_ao_out */

 tdm_ao_b */

 mclk0_ao */

 bank AO */

 name  first  last  irq  pullen  pull  dir  out  in  ds */

 name  first  last  irq  pullen  pull  dir  out  in  ds */

 GPIOE actually located in the AO bank */

	 name	 first		lask	   reg	offset  */

/*

 * Pin controller and GPIO driver for Amlogic Meson AXG SoC.

 *

 * Copyright (c) 2017 Amlogic, Inc. All rights reserved.

 * Author: Xingyu Chen <xingyu.chen@amlogic.com>

 *

 * SPDX-License-Identifier: (GPL-2.0+ or MIT)

 emmc */

 nand */

 nor */

 sdio */

 spi0 */

 spi1 */

 i2c0 */

 i2c1 */

 i2c2 */

 i2c3 */

 uart_a */

 uart_b */

 uart_ao_b */

 pwm_a */

 pwm_b */

 pwm_c */

 pwm_d */

 pwm_vs */

 spdif_in */

 spdif_out */

 jtag_ee */

 eth */

 pdm */

 mclk */

 tdm */

 bank BOOT */

 bank GPIOZ */

 bank GPIOX */

 bank GPIOY */

 bank GPIOA */

 uart_ao_a */

 uart_ao_b */

 i2c_ao */

 i2c_ao_slave */

 ir_in */

 ir_out */

 pwm_ao_a */

 pwm_ao_b */

 pwm_ao_c */

 pwm_ao_d */

 jtag_ao */

 gen_clk */

 bank AO */

   name    first      last       irq	     pullen  pull    dir     out     in  */

   name    first      last      irq	pullen  pull    dir     out     in  */

	 name	 first		lask	   reg	offset  */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Marvell PXA25x family pin control

 *

 * Copyright (C) 2016 Robert Jarzmik

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Marvell PXA2xx family pin control

 *

 * Copyright (C) 2015 Robert Jarzmik

	/*

	 * Each pin can have at most 6 alternate functions, and 2 gpio functions

	 * which are common to each pin. As there are more than 2 pins without

	 * alternate function, 6 * npins is an absolute high limit of the number

	 * of functions.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Marvell PXA27x family pin control

 *

 * Copyright (C) 2015 Robert Jarzmik

 SPDX-License-Identifier: GPL-2.0+



 Exynos specific support for Samsung pinctrl/gpiolib driver with eint support.



 Copyright (c) 2012 Samsung Electronics Co., Ltd.

		http:
 Copyright (c) 2012 Linaro Ltd

		http:


 Author: Thomas Abraham <thomas.ab@samsung.com>



 This file contains the Samsung Exynos specific information required by the

 the Samsung pinctrl/gpiolib driver. It also includes the implementation of

 external gpio and wakeup interrupt support.

	/*

	 * Ack level interrupts right before unmask

	 *

	 * If we don't do this we'll get a double-interrupt.  Level triggered

	 * interrupts must not fire an interrupt if the level is not

	 * _currently_ active, even if it was active while the interrupt was

	 * masked.

/*

 * irq_chip for gpio interrupts.

 eint_wake_mask_value not used */

/*

 * irq domain callbacks for external gpio and wakeup interrupt controllers.

/*

 * exynos_eint_gpio_init() - setup handling of external gpio interrupts.

 * @d: driver data of samsung pinctrl driver.

/*

 * irq_chip for wakeup interrupts

 Only differences with exynos4210_wkup_irq_chip: */

 list of external wakeup controllers supported */

 interrupt handler for wakeup interrupts 0..15 */

 interrupt handler for wakeup interrupt 16 */

/*

 * exynos_eint_wkup_init() - setup handling of external wakeup interrupts.

 * @d: driver data of samsung pinctrl driver.

 Ensure that retention is disabled on driver init */

 SPDX-License-Identifier: GPL-2.0+



 Exynos ARMv8 specific support for Samsung pinctrl/gpiolib driver

 with eint support.



 Copyright (c) 2012 Samsung Electronics Co., Ltd.

		http:
 Copyright (c) 2012 Linaro Ltd

		http:
 Copyright (c) 2017 Krzysztof Kozlowski <krzk@kernel.org>



 This file contains the Samsung Exynos specific information required by the

 the Samsung pinctrl/gpiolib driver. It also includes the implementation of

 external gpio and wakeup interrupt support.

 Exynos5433 has the 4bit widths for PINCFG_TYPE_DRV bitfields. */

/*

 * Bank type for non-alive type. Bit fields:

 * CON: 4, DAT: 1, PUD: 4, DRV: 4, CONPDN: 2, PUDPDN: 4

/*

 * Bank type for alive type. Bit fields:

 * CON: 4, DAT: 1, PUD: 4, DRV: 4

 Pad retention control code for accessing PMU regmap */

 pin banks of exynos5433 pin-controller - ALIVE */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5433 pin-controller - AUD */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5433 pin-controller - CPIF */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5433 pin-controller - eSE */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5433 pin-controller - FINGER */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5433 pin-controller - FSYS */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5433 pin-controller - IMEM */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5433 pin-controller - NFC */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5433 pin-controller - PERIC */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5433 pin-controller - TOUCH */

 Must start with EINTG banks, ordered by EINT group number. */

 PMU pin retention groups registers for Exynos5433 (without audio & fsys) */

 PMU retention control for audio pins can be tied to audio pin bank */

 PMU retention control for mmc pins can be tied to fsys pin bank */

/*

 * Samsung pinctrl driver data for Exynos5433 SoC. Exynos5433 SoC includes

 * ten gpio/pin-mux/pinconfig controllers.

 pin-controller instance 0 data */

 pin-controller instance 1 data */

 pin-controller instance 2 data */

 pin-controller instance 3 data */

 pin-controller instance 4 data */

 pin-controller instance 5 data */

 pin-controller instance 6 data */

 pin-controller instance 7 data */

 pin-controller instance 8 data */

 pin-controller instance 9 data */

 pin banks of exynos7 pin-controller - ALIVE */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos7 pin-controller - BUS0 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos7 pin-controller - NFC */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos7 pin-controller - TOUCH */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos7 pin-controller - FF */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos7 pin-controller - ESE */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos7 pin-controller - FSYS0 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos7 pin-controller - FSYS1 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos7 pin-controller - BUS1 */

 Must start with EINTG banks, ordered by EINT group number. */

 Must start with EINTG banks, ordered by EINT group number. */

 pin-controller instance 0 Alive data */

 pin-controller instance 1 BUS0 data */

 pin-controller instance 2 NFC data */

 pin-controller instance 3 TOUCH data */

 pin-controller instance 4 FF data */

 pin-controller instance 5 ESE data */

 pin-controller instance 6 FSYS0 data */

 pin-controller instance 7 FSYS1 data */

 pin-controller instance 8 BUS1 data */

 pin-controller instance 9 AUD data */

 pin banks of exynos850 pin-controller 0 (ALIVE) */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos850 pin-controller 1 (CMGP) */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos850 pin-controller 2 (AUD) */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos850 pin-controller 3 (HSI) */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos850 pin-controller 4 (CORE) */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos850 pin-controller 5 (PERI) */

 Must start with EINTG banks, ordered by EINT group number. */

 pin-controller instance 0 ALIVE data */

 pin-controller instance 1 CMGP data */

 pin-controller instance 2 AUD data */

 pin-controller instance 3 HSI data */

 pin-controller instance 4 CORE data */

 pin-controller instance 5 PERI data */

 pin banks of exynosautov9 pin-controller 0 (ALIVE) */

 pin banks of exynosautov9 pin-controller 1 (AUD) */

 pin banks of exynosautov9 pin-controller 2 (FSYS0) */

 pin banks of exynosautov9 pin-controller 3 (FSYS1) */

 pin banks of exynosautov9 pin-controller 4 (FSYS2) */

 pin banks of exynosautov9 pin-controller 5 (PERIC0) */

 pin banks of exynosautov9 pin-controller 6 (PERIC1) */

 pin-controller instance 0 ALIVE data */

 pin-controller instance 1 AUD data */

 pin-controller instance 2 FSYS0 data */

 pin-controller instance 3 FSYS1 data */

 pin-controller instance 4 FSYS2 data */

 pin-controller instance 5 PERIC0 data */

 pin-controller instance 6 PERIC1 data */

 SPDX-License-Identifier: GPL-2.0+



 S3C64xx specific support for pinctrl-samsung driver.



 Copyright (c) 2013 Tomasz Figa <tomasz.figa@gmail.com>



 Based on pinctrl-exynos.c, please see the file for original copyrights.



 This file contains the Samsung S3C64xx specific information required by the

 the Samsung pinctrl/gpiolib driver. It also includes the implementation of

 external gpio and wakeup interrupt support.

 External GPIO and wakeup interrupt related definitions */

 S3C64xx specific external interrupt trigger types */

/**

 * struct s3c64xx_eint0_data - EINT0 common data

 * @drvdata: pin controller driver data

 * @domains: IRQ domains of particular EINT0 interrupts

 * @pins: pin offsets inside of banks of particular EINT0 interrupts

/**

 * struct s3c64xx_eint0_domain_data - EINT0 per-domain data

 * @bank: pin bank related to the domain

 * @eints: EINT0 interrupts related to the domain

/**

 * struct s3c64xx_eint_gpio_data - GPIO EINT data

 * @drvdata: pin controller driver data

 * @domains: array of domains related to EINT interrupt groups

/*

 * Common functions for S3C64xx EINT configuration

 Edge- and level-triggered interrupts need different handlers */

 Make sure that pin is configured as interrupt */

 4-bit bank type with 2 con regs */

/*

 * Functions for EINT GPIO configuration (EINT groups 1-9)

 Set up interrupt trigger */

 4 EINTs per trigger selector */

/*

 * irq_chip for gpio interrupts.

/*

 * irq domain callbacks for external gpio interrupt controller.

 Group 1 is used for two pin banks */

		/*

		 * Something must be really wrong if an unmapped EINT

		 * was unmasked...

/**

 * s3c64xx_eint_gpio_init() - setup handling of external gpio interrupts.

 * @d: driver data of samsung pinctrl driver.

/*

 * Functions for configuration of EINT0 wake-up interrupts

 Set up interrupt trigger */

/*

 * irq_chip for wakeup interrupts

		/*

		 * Something must be really wrong if an unmapped EINT

		 * was unmasked...

/*

 * irq domain callbacks for external wakeup interrupt controller.

 list of external wakeup controllers supported */

/**

 * s3c64xx_eint_eint0_init() - setup handling of external wakeup interrupts.

 * @d: driver data of samsung pinctrl driver.

 pin banks of s3c64xx pin-controller 0 */

/*

 * Samsung pinctrl driver data for S3C64xx SoC. S3C64xx SoC includes

 * one gpio/pin-mux/pinconfig controller.

 pin-controller instance 1 data */

 SPDX-License-Identifier: GPL-2.0+



 S3C24XX specific support for Samsung pinctrl/gpiolib driver.



 Copyright (c) 2013 Heiko Stuebner <heiko@sntech.de>



 This file contains the SamsungS3C24XX specific information required by the

 Samsung pinctrl/gpiolib driver. It also includes the implementation of

 external gpio and wakeup interrupt support.

/**

 * struct s3c24xx_eint_data - EINT common data

 * @drvdata: pin controller driver data

 * @domains: IRQ domains of particular EINT interrupts

 * @parents: mapped parent irqs in the main interrupt controller

/**

 * struct s3c24xx_eint_domain_data - per irq-domain data

 * @bank: pin bank related to the domain

 * @eint_data: common data

 * @eint0_3_parent_only: live eints 0-3 only in the main intc

 Edge- and level-triggered interrupts need different handlers */

 Make sure that pin is configured as interrupt */

 Set up interrupt trigger */

 Handling of EINTs 0-3 on all except S3C2412 and S3C2413 */

 the first 4 eints have a simple 1 to 1 mapping */

 Something must be really wrong if an unmapped EINT is unmasked */

 Handling of EINTs 0-3 on S3C2412 and S3C2413 */

 the first 4 eints have a simple 1 to 1 mapping */

 Something must be really wrong if an unmapped EINT is unmasked */

 Handling of all other eints */

 Something is really wrong if an unmapped EINT is unmasked */

 SPDX-License-Identifier: GPL-2.0+



 Exynos specific support for Samsung pinctrl/gpiolib driver with eint support.



 Copyright (c) 2012 Samsung Electronics Co., Ltd.

		http:
 Copyright (c) 2012 Linaro Ltd

		http:


 Author: Thomas Abraham <thomas.ab@samsung.com>



 This file contains the Samsung Exynos specific information required by the

 the Samsung pinctrl/gpiolib driver. It also includes the implementation of

 external gpio and wakeup interrupt support.

 Retention control for S5PV210 are located at the end of clock controller */

 pin banks of s5pv210 pin-controller */

 Must start with EINTG banks, ordered by EINT group number. */

 pin-controller instance 0 data */

 Pad retention control code for accessing PMU regmap */

 pin banks of exynos3250 pin-controller 0 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos3250 pin-controller 1 */

 Must start with EINTG banks, ordered by EINT group number. */

/*

 * PMU pad retention groups for Exynos3250 doesn't match pin banks, so handle

 * them all together

/*

 * Samsung pinctrl driver data for Exynos3250 SoC. Exynos3250 SoC includes

 * two gpio/pin-mux/pinconfig controllers.

 pin-controller instance 0 data */

 pin-controller instance 1 data */

 pin banks of exynos4210 pin-controller 0 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos4210 pin-controller 1 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos4210 pin-controller 2 */

 Must start with EINTG banks, ordered by EINT group number. */

 PMU pad retention groups registers for Exynos4 (without audio) */

 PMU retention control for audio pins can be tied to audio pin bank */

/*

 * Samsung pinctrl driver data for Exynos4210 SoC. Exynos4210 SoC includes

 * three gpio/pin-mux/pinconfig controllers.

 pin-controller instance 0 data */

 pin-controller instance 1 data */

 pin-controller instance 2 data */

 pin banks of exynos4x12 pin-controller 0 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos4x12 pin-controller 1 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos4x12 pin-controller 2 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos4x12 pin-controller 3 */

 Must start with EINTG banks, ordered by EINT group number. */

/*

 * Samsung pinctrl driver data for Exynos4x12 SoC. Exynos4x12 SoC includes

 * four gpio/pin-mux/pinconfig controllers.

 pin-controller instance 0 data */

 pin-controller instance 1 data */

 pin-controller instance 2 data */

 pin-controller instance 3 data */

 pin banks of exynos5250 pin-controller 0 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5250 pin-controller 1 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5250 pin-controller 2 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5250 pin-controller 3 */

 Must start with EINTG banks, ordered by EINT group number. */

/*

 * Samsung pinctrl driver data for Exynos5250 SoC. Exynos5250 SoC includes

 * four gpio/pin-mux/pinconfig controllers.

 pin-controller instance 0 data */

 pin-controller instance 1 data */

 pin-controller instance 2 data */

 pin-controller instance 3 data */

 pin banks of exynos5260 pin-controller 0 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5260 pin-controller 1 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5260 pin-controller 2 */

 Must start with EINTG banks, ordered by EINT group number. */

/*

 * Samsung pinctrl driver data for Exynos5260 SoC. Exynos5260 SoC includes

 * three gpio/pin-mux/pinconfig controllers.

 pin-controller instance 0 data */

 pin-controller instance 1 data */

 pin-controller instance 2 data */

 pin banks of exynos5410 pin-controller 0 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5410 pin-controller 1 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5410 pin-controller 2 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5410 pin-controller 3 */

 Must start with EINTG banks, ordered by EINT group number. */

/*

 * Samsung pinctrl driver data for Exynos5410 SoC. Exynos5410 SoC includes

 * four gpio/pin-mux/pinconfig controllers.

 pin-controller instance 0 data */

 pin-controller instance 1 data */

 pin-controller instance 2 data */

 pin-controller instance 3 data */

 pin banks of exynos5420 pin-controller 0 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5420 pin-controller 1 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5420 pin-controller 2 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5420 pin-controller 3 */

 Must start with EINTG banks, ordered by EINT group number. */

 pin banks of exynos5420 pin-controller 4 */

 Must start with EINTG banks, ordered by EINT group number. */

 PMU pad retention groups registers for Exynos5420 (without audio) */

/*

 * Samsung pinctrl driver data for Exynos5420 SoC. Exynos5420 SoC includes

 * four gpio/pin-mux/pinconfig controllers.

 pin-controller instance 0 data */

 pin-controller instance 1 data */

 pin-controller instance 2 data */

 pin-controller instance 3 data */

 pin-controller instance 4 data */

 SPDX-License-Identifier: GPL-2.0+



 pin-controller/pin-mux/pin-config/gpio-driver for Samsung's SoC's.



 Copyright (c) 2012 Samsung Electronics Co., Ltd.

		http:
 Copyright (c) 2012 Linaro Ltd

		http:


 Author: Thomas Abraham <thomas.ab@samsung.com>



 This driver implements the Samsung pinctrl driver. It supports setting up of

 pinmux and pinconf configurations. The gpiolib interface is also included.

 External interrupt (gpio and wakeup) support are not included in this driver

 but provides extensions to which platform specific implementation of the gpio

 and wakeup interrupts can be hooked to.

 maximum number of the memory resources */

 list of all possible config options supported */

 EINVAL=missing, which is fine since it's optional */

 Forward declaration which can be used by samsung_pin_dbg_show */

 list of pinctrl callbacks for the pinctrl core */

 check if the selector is a valid pin function selector */

 return the name of the pin function specified */

 return the groups associated for the specified function selector */

/*

 * given a pin number that is local to a pin controller, find out the pin bank

 * and the register base of the pin bank.

 enable or disable a pinmux function */

 Some banks have two config registers */

 enable a specified pinmux by writing to registers */

 list of pinmux callbacks for the pinmux vertical in pinctrl core */

 set or get the pin config settings for a specified pin */

 set the pin config settings for a specified pin */

 for each config */

 get the pin config settings for a specified pin */

 set the pin config settings for a specified pin group */

 get the pin config settings for a specified pin group */

 list of pinconfig callbacks for pinconfig vertical in the pinctrl code */

/*

 * The samsung_gpio_set_vlaue() should be called with "bank->slock" held

 * to avoid race condition.

 gpiolib gpio_set callback function */

 gpiolib gpio_get callback function */

/*

 * The samsung_gpio_set_direction() should be called with "bank->slock" held

 * to avoid race condition.

 * The calls to gpio_direction_output() and gpio_direction_input()

 * leads to this function call.

 Some banks have two config registers */

 gpiolib gpio_direction_input callback function. */

 gpiolib gpio_direction_output callback function. */

/*

 * gpiolib gpio_to_irq callback function. Creates a mapping between a GPIO pin

 * and a virtual IRQ, if not already present.

	/*

	 * Iterate over all the child nodes of the pin controller node

	 * and create pin groups and pin function lists.

	/*

	 * Iterate over all the child nodes of the pin controller node

	 * and create pin groups and pin function lists.

/*

 * Parse the information about all the available pin groups and pin functions

 * from device node of the pin-controller. A pin group is formed with all

 * the pins listed in the "samsung,pins" property.

 register the pinctrl interface with the pinctrl subsystem */

 dynamically populate the pin number and pin name for pindesc */

	/*

	 * allocate space for storing the dynamically generated names for all

	 * the pins which belong to this pin-controller.

 for each pin, the name of the pin is pin-bank name + pin number */

 unregister the pinctrl interface with the pinctrl subsystem */

 register the gpiolib interface with the gpiolib subsystem */

 retrieve the soc specific data */

	/*

	 * Legacy platforms should provide only one resource with IO memory.

	 * Store it as virt_base because legacy driver needs to access it

	 * through samsung_pinctrl_drv_data.

/*

 * samsung_pinctrl_suspend - save pinctrl state for suspend

 *

 * Save data for all banks handled by this device.

 Registers without a powerdown config aren't lost */

 Some banks have two config registers */

/*

 * samsung_pinctrl_resume - restore pinctrl state from suspend

 *

 * Restore one of the banks that was saved during suspend.

 *

 * We don't bother doing anything complicated to avoid glitching lines since

 * we're called before pad retention is turned off.

 Registers without a powerdown config aren't lost */

 Some banks have two config registers */

 SPDX-License-Identifier: GPL-2.0-or-later

 Copyright (C) 2019 IBM Corp. */

 Pieces to enable drivers to implement the .set callback */

/**

 * aspeed_sig_desc_eval() - Query the enabled or disabled state of a signal

 * descriptor.

 *

 * @desc: The signal descriptor of interest

 * @enabled: True to query the enabled state, false to query disabled state

 * @map: The IP block's regmap instance

 *

 * Return: 1 if the descriptor's bitfield is configured to the state

 * selected by @enabled, 0 if not, and less than zero if an unrecoverable

 * failure occurred

 *

 * Evaluation of descriptor state is non-trivial in that it is not a binary

 * outcome: The bitfields can be greater than one bit in size and thus can take

 * a value that is neither the enabled nor disabled state recorded in the

 * descriptor (typically this means a different function to the one of interest

 * is enabled). Thus we must explicitly test for either condition as required.

/**

 * aspeed_sig_expr_eval - Query the enabled or disabled state for a

 * mux function's signal on a pin

 *

 * @ctx: The driver context for the pinctrl IP

 * @expr: An expression controlling the signal for a mux function on a pin

 * @enabled: True to query the enabled state, false to query disabled state

 *

 * Return: 1 if the expression composed by @enabled evaluates true, 0 if not,

 * and less than zero if an unrecoverable failure occurred.

 *

 * A mux function is enabled or disabled if the function's signal expression

 * for each pin in the function's pin group evaluates true for the desired

 * state. An signal expression evaluates true if all of its associated signal

 * descriptors evaluate true for the desired state.

 *

 * If an expression's state is described by more than one bit, either through

 * multi-bit bitfields in a single signal descriptor or through multiple signal

 * descriptors of a single bit then it is possible for the expression to be in

 * neither the enabled nor disabled state. Thus we must explicitly test for

 * either condition as required.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2016 IBM Corp.

 Wrap some of the common macros for clarity */

/*

 * The "Multi-function Pins Mapping and Control" table in the SoC datasheet

 * references registers by the device/offset mnemonic. The register macros

 * below are named the same way to ease transcription and verification (as

 * opposed to naming them e.g. PINMUX_CTRL_[0-9]). Further, signal expressions

 * reference registers beyond those dedicated to pinmux, such as the system

 * reset control and MAC clock configuration registers.

 Misc. Control Register */

 System Reset Control/Status Register */

 MAC Interface Clock Delay Setting */

 AST2400 strapping is 33 bits, is split */

 Silicon revision ID register */

 Multi-function Pin Control #1 */

 Multi-function Pin Control #2 */

 Multi-function Pin Control #3 */

 Multi-function Pin Control #4 */

 Multi-function Pin Control #5 */

 Multi-function Pin Control #6 */

 Multi-function Pin Control #7 */

 Multi-function Pin Control #8 */

 Multi-function Pin Control #9 */

 Multi-function Pin Control #10 */

 Strapping */

/*

 * Uses undefined macros for symbol naming and references, eg GPIOA0, MAC1LINK,

 * TIMER3 etc.

 *

 * Pins are defined in GPIO bank order:

 *

 * GPIOA0: 0

 * ...

 * GPIOA7: 7

 * GPIOB0: 8

 * ...

 * GPIOZ7: 207

 * GPIOAA0: 208

 * ...

 * GPIOAB3: 219

 *

 * Not all pins have their signals defined (yet).

/*

 * There are several opportunities to document USB port 4 in the datasheet, but

 * it is only mentioned in one location. Particularly, the Multi-function Pins

 * Mapping and Control table in the datasheet elides the signal names,

 * suggesting that port 4 may not actually be functional. As such we define the

 * signal names and control bit, but don't export the capability's function or

 * group.

/* Note we account for GPIOY4-GPIOY7 even though they're not valid, thus 216

 * pins becomes 220. Four additional non-GPIO-capable pins are present for USB.

 Pins, groups and functions are sort(1):ed alphabetically for sanity */

 GPIO banks ranges [A, B], [D, J], [M, R] */

 GPIOs T[0-5] (RGMII1 Tx pins) */

 GPIOs T[6-7], U[0-3] (RGMII2 TX pins) */

 GPIOs U[4-7], V[0-1] (RGMII1 Rx pins) */

 GPIOs V[2-7] (RGMII2 Rx pins) */

 ADC pull-downs (SCUA8[19:4]) */

	/*

	 * Debounce settings for GPIOs D and E passthrough mode are in

	 * SCUA8[27:20] and so are managed by pinctrl. Normal GPIO debounce for

	 * banks D and E is handled by the GPIO driver - GPIO passthrough is

	 * treated like any other non-GPIO mux function. There is a catch

	 * however, in that the debounce period is configured in the GPIO

	 * controller. Due to this tangle between GPIO and pinctrl we don't yet

	 * fully support pass-through debounce.

		/*

		 * Strap registers are configured in hardware or by early-boot

		 * firmware. Treat them as read-only despite that we can write

		 * them. This may mean that certain functions cannot be

		 * deconfigured and is the reason we re-evaluate after writing

		 * all descriptor bits.

		 *

		 * Port D and port E GPIO loopback modes are the only exception

		 * as those are commonly used with front-panel buttons to allow

		 * normal operation of the host when the BMC is powered off or

		 * fails to boot. Once the BMC has booted, the loopback mode

		 * must be disabled for the BMC to control host power-on and

		 * reset.

	/*

	 * The aspeed,g4-pinctrl compatible has been removed the from the

	 * bindings, but keep the match in case of old devicetrees.

 SPDX-License-Identifier: GPL-2.0-or-later

 Copyright (C) 2019 IBM Corp. */

 Multi-function Pin Control #1  */

 Multi-function Pin Control #2  */

 Multi-function Pin Control #3  */

 Multi-function Pin Control #4  */

 Multi-function Pin Control #5  */

 Multi-function Pin Control #6  */

 Multi-function Pin Control #7  */

 Multi-function Pin Control #8  */

 Multi-function Pin Control #9  */

 Multi-function Pin Control #10 */

 USB Multi-function Pin Control #12 */

 Multi-function Pin Control #14 */

 Multi-function Pin Control #15 */

 Multi-function Pin Control #16 */

 Multi-function Pin Control #17 */

 Multi-function Pin Control #18 */

 Multi-function Pin Control #19 */

 Multi-function Pin Control #20 */

 Multi-function Pin Control #22 */

 Multi-function Pin Control #23 */

 Hardware Strap 1 */

 Hardware Strap 2 */

 Disable GPIO Internal Pull-Down #0 */

 Disable GPIO Internal Pull-Down #1 */

 Disable GPIO Internal Pull-Down #2 */

 Disable GPIO Internal Pull-Down #3 */

 Disable GPIO Internal Pull-Down #4 */

 Disable GPIO Internal Pull-Down #5 */

 Disable GPIO Internal Pull-Down #6 */

 Multi-function Pin Control #24 */

 Multi-function Pin Control #25 */

 Multi-function Pin Control #27 */

 Multi-function Pin Control #29 */

 PCIE configuration Setting Control */

/*

 * FIXME: Confirm bits and priorities are the right way around for the

 * following 4 pins

 Pins, groups and functions are sort(1):ed alphabetically for sanity */

 GPIOB7 */

 GPIOB6 */

 GPIOB5 */

 GPIOB4 */

 GPIOB3 */

 GPIOB2 */

 GPIOB1 */

 GPIOB0 */

 GPIOH3 */

 GPIOH2 */

 GPIOH1 */

 GPIOH0 */

 GPIOL7 */

 GPIOL6 */

 GPIOL5 */

 GPIOL4 */

 GPIOJ7 */

 GPIOJ6 */

 GPIOJ5 */

 GPIOJ4 */

 GPIOJ3 */

 GPIOJ2 */

 GPIOJ1 */

 GPIOJ0 */

 GPIOI7 */

 GPIOI6 */

 GPIOI5 */

 GPIOI4 */

 GPIOI3 */

 GPIOI2 */

 GPIOI1 */

 GPIOI0 */

 GPIOP7 */

 GPIOP6 */

 GPIOP5 */

 GPIOP4 */

 GPIOP3 */

 GPIOP2 */

 GPIOP1 */

 GPIOP0 */

 GPIOO7 */

 GPIOO6 */

 GPIOO5 */

 GPIOO4 */

 GPIOO3 */

 GPIOO2 */

 GPIOO1 */

 GPIOO0 */

 GPION7 */

 GPION6 */

 GPION5 */

 GPION4 */

 GPION3 */

 GPION2 */

 GPION1 */

 GPION0 */

 GPIOM7 */

 GPIOM6 */

 GPIOM5 */

 GPIOM4 */

 GPIOM3 */

 GPIOM2 */

 GPIOM1 */

 GPIOM0 */

 GPIOS7 */

 GPIOS6 */

 GPIOS5 */

 GPIOS4 */

 GPIOS3*/

 GPIOS2 */

 GPIOS1 */

 GPIOS0 */

 GPIOR7 */

 GPIOR6 */

 GPIOR5 */

 GPIOR4 */

 GPIOR3*/

 GPIOR2 */

 GPIOR1 */

 GPIOR0 */

 GPIOX7 */

 GPIOX6 */

 GPIOX5 */

 GPIOX4 */

 GPIOX3*/

 GPIOX2 */

 GPIOX1 */

 GPIOX0 */

 GPIOV7 */

 GPIOV6 */

 GPIOV5 */

 GPIOV4 */

 GPIOV3*/

 GPIOV2 */

 GPIOV1 */

 GPIOV0 */

 GPIOZ7 */

 GPIOZ6 */

 GPIOZ5 */

 GPIOZ4 */

 GPIOZ3*/

 GPIOZ1 */

 GPIOZ0 */

 GPIOY6 */

 GPIOY5 */

 GPIOY4 */

 GPIOY3 */

 GPIOY2 */

 GPIOY1 */

 GPIOY0 */

 LAD3 */

 LAD2 */

 LAD1 */

 LAD0 */

 MAC3 */

 MAC4 */

 GPIO18E */

 GPIO18D */

 GPIO18C */

 GPIO18B */

 GPIO18A */

/**

 * aspeed_g6_sig_expr_set() - Configure a pin's signal by applying an

 * expression's descriptor state for all descriptors in the expression.

 *

 * @ctx: The pinmux context

 * @expr: The expression associated with the function whose signal is to be

 *        configured

 * @enable: true to enable an function's signal through a pin's signal

 *          expression, false to disable the function's signal

 *

 * Return: 0 if the expression is configured as requested and a negative error

 * code otherwise

			/*

			 * The AST2600 has write protection mask registers for

			 * the hardware strapping in SCU508 and SCU518. Assume

			 * that if the platform doesn't want the strapping

			 * values changed that it has set the write mask.

			 *

			 * The strapping registers implement write-1-clear

			 * behaviour. SCU500 is paired with clear writes on

			 * SCU504, likewise SCU510 is paired with SCU514.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2016 IBM Corp.

/**

 * aspeed_disable_sig() - Disable a signal on a pin by disabling all provided

 * signal expressions.

 *

 * @ctx: The pinmux context

 * @exprs: The list of signal expressions (from a priority level on a pin)

 *

 * Return: 0 if all expressions are disabled, otherwise a negative error code

/**

 * aspeed_find_expr_by_name - Search for the signal expression needed to

 * enable the pin's signal for the requested function.

 *

 * @exprs: List of signal expressions (haystack)

 * @name: The name of the requested function (needle)

 *

 * Return: A pointer to the signal expression whose function tag matches the

 * provided name, otherwise NULL.

 *

 Disable functions at a higher priority than that requested */

	/*

	 * We need to differentiate between GPIO and non-GPIO signals to

	 * implement the gpio_request_enable() interface. For better or worse

	 * the ASPEED pinctrl driver uses the expression names to determine

	 * whether an expression will mux a pin for GPIO.

	 *

	 * Generally we have the following - A GPIO such as B1 has:

	 *

	 *    - expr->signal set to "GPIOB1"

	 *    - expr->function set to "GPIOB1"

	 *

	 * Using this fact we can determine whether the provided expression is

	 * a GPIO expression by testing the signal name for the string prefix

	 * "GPIO".

	 *

	 * However, some GPIOs are input-only, and the ASPEED datasheets name

	 * them differently. An input-only GPIO such as T0 has:

	 *

	 *    - expr->signal set to "GPIT0"

	 *    - expr->function set to "GPIT0"

	 *

	 * It's tempting to generalise the prefix test from "GPIO" to "GPI" to

	 * account for both GPIOs and GPIs, but in doing so we run aground on

	 * another feature:

	 *

	 * Some pins in the ASPEED BMC SoCs have a "pass-through" GPIO

	 * function where the input state of one pin is replicated as the

	 * output state of another (as if they were shorted together - a mux

	 * configuration that is typically enabled by hardware strapping).

	 * This feature allows the BMC to pass e.g. power button state through

	 * to the host while the BMC is yet to boot, but take control of the

	 * button state once the BMC has booted by muxing each pin as a

	 * separate, pin-specific GPIO.

	 *

	 * Conceptually this pass-through mode is a form of GPIO and is named

	 * as such in the datasheets, e.g. "GPID0". This naming similarity

	 * trips us up with the simple GPI-prefixed-signal-name scheme

	 * discussed above, as the pass-through configuration is not what we

	 * want when muxing a pin as GPIO for the GPIO subsystem.

	 *

	 * On e.g. the AST2400, a pass-through function "GPID0" is grouped on

	 * balls A18 and D16, where we have:

	 *

	 *    For ball A18:

	 *    - expr->signal set to "GPID0IN"

	 *    - expr->function set to "GPID0"

	 *

	 *    For ball D16:

	 *    - expr->signal set to "GPID0OUT"

	 *    - expr->function set to "GPID0"

	 *

	 * By contrast, the pin-specific GPIO expressions for the same pins are

	 * as follows:

	 *

	 *    For ball A18:

	 *    - expr->signal looks like "GPIOD0"

	 *    - expr->function looks like "GPIOD0"

	 *

	 *    For ball D16:

	 *    - expr->signal looks like "GPIOD1"

	 *    - expr->function looks like "GPIOD1"

	 *

	 * Testing both the signal _and_ function names gives us the means

	 * differentiate the pass-through GPIO pinmux configuration from the

	 * pin-specific configuration that the GPIO subsystem is after: An

	 * expression is a pin-specific (non-pass-through) GPIO configuration

	 * if the signal prefix is "GPI" and the signal name matches the

	 * function name.

 Disable any functions of higher priority than GPIO */

	/*

	 * Disabling all higher-priority expressions is enough to enable the

	 * lowest-priority signal type. As such it has no associated

	 * expression.

	/*

	 * If GPIO is not the lowest priority signal type, assume there is only

	 * one expression defined to enable the GPIO function

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2016 IBM Corp.

 Wrap some of the common macros for clarity */

/*

 * The "Multi-function Pins Mapping and Control" table in the SoC datasheet

 * references registers by the device/offset mnemonic. The register macros

 * below are named the same way to ease transcription and verification (as

 * opposed to naming them e.g. PINMUX_CTRL_[0-9]). Further, signal expressions

 * reference registers beyond those dedicated to pinmux, such as the system

 * reset control and MAC clock configuration registers. The AST2500 goes a step

 * further and references registers in the graphics IP block.

 Misc. Control Register */

 System Reset Control/Status Register */

 MAC Interface Clock Delay Setting */

 AST2400 strapping is 33 bits, is split */

 Silicon revision ID register */

 Multi-function Pin Control #1 */

 Multi-function Pin Control #2 */

 Multi-function Pin Control #3 */

 Multi-function Pin Control #4 */

 Multi-function Pin Control #5 */

 Multi-function Pin Control #6 */

 Multi-function Pin Control #7 */

 Multi-function Pin Control #8 */

 Multi-function Pin Control #9 */

 Multi-function Pin Control #10 */

 Strapping */

 LHCR0 is offset from the end of the H8S/2168-compatible registers */

 RGMII1/RMII1 */

 CRT DVO disabled, configured for single-edge mode */

 CRT DVO disabled, configured for dual-edge mode */

 CRT DVO enabled, configured for single-edge mode */

 CRT DVO enabled, configured for dual-edge mode */

 Pins, groups and functions are sort(1):ed alphabetically for sanity */

 GPIOA, GPIOQ */

 GPIOB, GPIOR */

 GPIOC, GPIOS*/

 GPIOD, GPIOY */

 GPIOE, GPIOZ */

 GPIOF, GPIOAA */

 GPIOG, GPIOAB */

 GPIOH, GPIOAC */

 GPIOs [I, P] */

 GPIOs T[0-5] (RGMII1 Tx pins) */

 GPIOs T[6-7], U[0-3] (RGMII2 TX pins) */

 GPIOs U[4-7], V[0-1] (RGMII1 Rx pins) */

 GPIOs V[2-7] (RGMII2 Rx pins) */

 ADC pull-downs (SCUA8[19:4]) */

	/*

	 * Debounce settings for GPIOs D and E passthrough mode are in

	 * SCUA8[27:20] and so are managed by pinctrl. Normal GPIO debounce for

	 * banks D and E is handled by the GPIO driver - GPIO passthrough is

	 * treated like any other non-GPIO mux function. There is a catch

	 * however, in that the debounce period is configured in the GPIO

	 * controller. Due to this tangle between GPIO and pinctrl we don't yet

	 * fully support pass-through debounce.

/**

 * aspeed_g5_sig_expr_set() - Configure a pin's signal by applying an

 * expression's descriptor state for all descriptors in the expression.

 *

 * @ctx: The pinmux context

 * @expr: The expression associated with the function whose signal is to be

 *        configured

 * @enable: true to enable an function's signal through a pin's signal

 *          expression, false to disable the function's signal

 *

 * Return: 0 if the expression is configured as requested and a negative error

 * code otherwise

		/*

		 * Strap registers are configured in hardware or by early-boot

		 * firmware. Treat them as read-only despite that we can write

		 * them. This may mean that certain functions cannot be

		 * deconfigured and is the reason we re-evaluate after writing

		 * all descriptor bits.

		 *

		 * Port D and port E GPIO loopback modes are the only exception

		 * as those are commonly used with front-panel buttons to allow

		 * normal operation of the host when the BMC is powered off or

		 * fails to boot. Once the BMC has booted, the loopback mode

		 * must be disabled for the BMC to control host power-on and

		 * reset.

 On AST2500, Set bits in SCU70 are cleared from SCU7C */

	/*

	 * The aspeed,g5-pinctrl compatible has been removed the from the

	 * bindings, but keep the match in case of old devicetrees.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl for Cirrus Logic CS47L85

 *

 * Copyright (C) 2016-2017 Cirrus Logic

/*

 * The alt func groups are the most commonly used functions we place these at

 * the lower function indexes for convenience, and the less commonly used gpio

 * functions at higher indexes.

 *

 * To stay consistent with the datasheet the function names are the same as

 * the group names for that function's pins

 *

 * Note - all 1 less than in datasheet because these are zero-indexed

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl for Cirrus Logic CS47L90

 *

 * Copyright (C) 2016-2017 Cirrus Logic

/*

 * The alt func groups are the most commonly used functions we place these at

 * the lower function indexes for convenience, and the less commonly used gpio

 * functions at higher indexes.

 *

 * To stay consistent with the datasheet the function names are the same as

 * the group names for that function's pins

 *

 * Note - all 1 less than in datasheet because these are zero-indexed

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl for Cirrus Logic CS47L15

 *

 * Copyright (C) 2018-2019 Cirrus Logic, Inc. and

 *                         Cirrus Logic International Semiconductor Ltd.

/*

 * The alt func groups are the most commonly used functions we place these at

 * the lower function indexes for convenience, and the less commonly used gpio

 * functions at higher indexes.

 *

 * To stay consistent with the datasheet the function names are the same as

 * the group names for that function's pins

 *

 * Note - all 1 less than in datasheet because these are zero-indexed

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl for Cirrus Logic CS47L92

 *

 * Copyright (C) 2018-2019 Cirrus Logic, Inc. and

 *                         Cirrus Logic International Semiconductor Ltd.

/*

 * The alt func groups are the most commonly used functions we place these at

 * the lower function indexes for convenience, and the less commonly used gpio

 * functions at higher indexes.

 *

 * To stay consistent with the datasheet the function names are the same as

 * the group names for that function's pins

 *

 * Note - all 1 less than in datasheet because these are zero-indexed

 SPDX-License-Identifier: GPL-2.0

/*

 * Lochnagar pin and GPIO control

 *

 * Copyright (c) 2017-2018 Cirrus Logic, Inc. and

 *                         Cirrus Logic International Semiconductor Ltd.

 *

 * Author: Charles Keepax <ckeepax@opensource.cirrus.com>

 The GPIOs only support output */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl for Cirrus Logic Madera codecs

 *

 * Copyright (C) 2016-2018 Cirrus Logic

/*

 * Use pin GPIO names for consistency

 * NOTE: IDs are zero-indexed for coding convenience

/*

 * All single-pin functions can be mapped to any GPIO, however pinmux applies

 * functions to pin groups and only those groups declared as supporting that

 * function. To make this work we must put each pin in its own dummy group so

 * that the functions can be described as applying to all pins.

 * Since these do not correspond to anything in the actual hardware - they are

 * merely an adaptation to pinctrl's view of the world - we use the same name

 * as the pin to avoid confusion when comparing with datasheet instructions

 set of pin numbers for single-pin groups, zero-indexed */

/*

 * alt-functions always apply to a single pin group, other functions always

 * apply to all pins

 Number of alt function groups plus number of single-pin groups */

 return the dummy group for a single pin */

 ignore unknown function values */

 alt function */

 State of direction bit is only relevant if function==1 */

 alt func always maps to a single group */

 other funcs map to all available gpio pins */

 alt func pin assignments are codec-specific */

		/*

		 * for other funcs the group will be the gpio number and will

		 * be offset by the number of chip-specific functions at the

		 * start of the group list

 put the pin into GPIO mode */

 disable GPIO by setting to GPIO IN */

 GPIO and other functions are exclusive */

			/*

			 * we can't configure debounce time per-pin so value

			 * is just a flag

 group is a single pin, convert to pin number and set */

 if the configuration is provided through pdata, apply it */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl for Cirrus Logic CS47L35

 *

 * Copyright (C) 2016-2017 Cirrus Logic

/*

 * The alt func groups are the most commonly used functions we place these at

 * the lower function indexes for convenience, and the less commonly used gpio

 * functions at higher indexes.

 *

 * To stay consistent with the datasheet the function names are the same as

 * the group names for that function's pins

 *

 * Note - all 1 less than in datasheet because these are zero-indexed

 SPDX-License-Identifier: GPL-2.0+

/*

 * Actions Semi S500 SoC Pinctrl driver

 *

 * Copyright (c) 2014 Actions Semi Inc.

 * Copyright (c) 2020 Cristian Ciocaltea <cristian.ciocaltea@gmail.com>

 Pinctrl registers offset */

 SD0_D4 */

 SD0_D5 */

 SD0_D6 */

 SD0_D7 */

S500_MUX_I2C2,*/

S500_MUX_SIRQ0,*/

S500_MUX_SIRQ1,*/

S500_MUX_SIRQ2,*/

 MFPCTL group data */

 mfp0_31_26 reserved */

 mfp0_25_23 */

 mfp0_22_20 */

 mfp0_18_16_eth_txd0 */

 mfp0_18_16_eth_txd1 */

 mfp0_15_13_rmii_txen */

 mfp0_15_13_rmii_rxen */

 mfp0_12_11 reserved */

 mfp0_10_8_rmii_rxd1 */

 mfp0_10_8_rmii_rxd0 */

 mfp0_7_6 */

 mfp0_5 */

 mfp0_4_3 */

 mfp0_2_1_i2s0 */

 mfp0_2_1_i2s1 */

 mfp0_0 */

 mfp1_31_29_ks_in0 */

 mfp1_31_29_ks_in1 */

 mfp1_31_29_ks_in2 */

 mfp1_28_26_ks_in3 */

 mfp1_28_26_ks_out0 */

 mfp1_28_26_ks_out1 */

 mfp1_25_23 */

 mfp1_22_21 */

 mfp1_20_19 */

 mfp1_18_17 */

 mfp1_16_14 */

 mfp1_13_12 */

 mfp1_11_10 */

 mfp1_9_7 */

 mfp1_6_5 */

 mfp1_4_3 */

 mfp1_2_0 */

 mfp2_31 reserved */

 mfp2_30_29 */

 mfp2_28_27 */

 mfp2_26_24 */

 mfp2_23 */

 mfp2_22 */

 mfp2_21 */

 mfp2_20 */

 mfp2_19_17 */

 mfp2_16_14 */

 mfp2_13_11 */

 mfp2_10_9 */

 mfp2_8_7 */

 mfp2_6_5 */

 mfp2_4_3 */

 mfp2_2_0 */

 mfp3_31 reserved */

 mfp3_30 */

 mfp3_29_28 */

 mfp3_27_24 reserved */

 mfp3_23_22 */

 mfp3_21_19 */

 mfp3_18_16 */

 mfp3_15_14 */

 mfp3_13_12 */

 mfp3_11_10 */

 mfp3_9_8 */

 mfp3_7_6 */

 mfp3_5_4 */

 mfp3_3 */

 mfp3_2 */

 mfp3_1_0_nand_ceb2 */

 mfp3_1_0_nand_ceb3 */

 PADDRV group data */

 paddrv0_29_28 */

 paddrv0_23_22 */

 paddrv0_21_20 */

 paddrv0_19_18 */

 paddrv0_17_16 */

 paddrv0_15_14 */

 paddrv0_13_12 */

 paddrv0_11_10 */

 paddrv0_9_8 */

 paddrv0_7_6 */

 paddrv0_5_4 */

 paddrv0_3_2 */

 paddrv0_1_0 */

 paddrv1_31_30 */

 paddrv1_29_28 */

 paddrv1_27_26 */

 paddrv1_25_24 */

 paddrv1_23_22 */

 paddrv1_21_20 */

 paddrv1_19_18 */

 paddrv1_17_16 */

 paddrv1_15_14 */

 paddrv1_13_12 */

 paddrv1_11_10 */

 paddrv2_31_30 */

 paddrv2_29_28 */

 paddrv2_27_26 */

 paddrv2_24_23 */

 paddrv2_22_21 */

 paddrv2_19_18 */

 paddrv2_13_12 */

 paddrv2_3_2 */

 Pinctrl groups */

[S500_MUX_I2C2] = FUNCTION(i2c2),*/

[S500_MUX_SIRQ0] = FUNCTION(sirq0),*/

[S500_MUX_SIRQ1] = FUNCTION(sirq1),*/

[S500_MUX_SIRQ2] = FUNCTION(sirq2),*/

 PAD_ST0 */

 PAD_ST1 */

 PAD_PULLCTL0 */

 PAD_PULLCTL1 */

 PAD_PULLCTL2 */

 Pad info table */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Actions Semi Owl S700 Pinctrl driver

 *

 * Copyright (c) 2014 Actions Semi Inc.

 * Author: David Liu <liuwei@actions-semi.com>

 *

 * Author: Pathiban Nallathambi <pn@denx.de>

 * Author: Saravanan Sekar <sravanhome@gmail.com>

 Pinctrl registers offset */

/*

 * Most pins affected by the pinmux can also be GPIOs. Define these first.

 * These must match how the GPIO driver names/numbers its pins.

 All non-GPIO pins follow */

 Ethernet MAC */

 SIRQ */

 I2S */

 PCM1 */

 KEY */

 LVDS */

 DSI */

 SD */

 SPI */

 UART for console */

 UART for Bluetooth */

 UART for 3G */

 I2C */

 CSI*/

 Sensor */

 NAND (1.8v / 3.3v) */

 System */

 Pad names for the pinmux subsystem */

 mfp0_31_30 reserved */

 rgmii_txd23 */

 rgmii_rxd2 */

 rgmii_rxd3 */

 lcd0_d18 */

 rgmii_txd01 */

 rgmii_txd0 */

 rgmii_txd1 */

 rgmii_txen */

 rgmii_rxen */

 mfp0_12_11 reserved */

 rgmii_rxd1*/

 rgmii_rxd0 */

 rgmii_ref_clk */

 i2s_d0 */

 i2s_pcm1 */

 i2s0_pcm0 */

 i2s1_pcm0 */

 i2s_d1 */

 ks_in2 */

 ks_in1 */

 ks_in0 */

 ks_in3 */

 ks_out0 */

 ks_out1 */

 ks_out2 */

 lvds_o_pn */

 dsi_dn0 */

 dsi_dp2 */

 lcd0_d2 */

 dsi_dp3 */

 dsi_dn3 */

 dsi_dp0 */

 lvds_ee_pn */

 uart2_rx_tx */

 spi0_i2c_pcm */

 mfp2_31 reserved */

 dsi_dnp1_cp_d2 */

 dsi_dnp1_cp_d17 */

 lvds_e_pn */

 dsi_dn2 */

 uart2_rtsb */

 uart2_ctsb */

 uart3_rtsb */

 uart3_ctsb */

 sd0_d0 */

 sd0_d1 */

 sd0_d2_d3 */

 sd1_d0_d3 */

 sd0_cmd */

 sd0_clk */

 sd1_cmd */

 uart0_rx */

 dnand_data_wr1 reserved */

 clko_25m */

 csi_cn_cp */

 dnand_acle_ce07_24 reserved */

 sens0_ckout */

 uart0_tx */

 i2c0_mfp */

 csi_dn_dp */

 sen0_pclk */

 pcm1_in */

 pcm1_clk */

 pcm1_sync */

 pcm1_out */

 dnand_data_wr */

 dnand_acle_ce0 */

 nand_ceb2 */

 nand_ceb3 */

****End MFP group data****************************/

****PADDRV group data****************************/

PAD_DRV0*/

PAD_DRV1*/

PAD_DRV2*/

 all pinctrl groups of S700 board */

 PAD_ST0 */

 PAD_ST1 */

 PAD_PULLCTL0 */

 PAD_PULLCTL1 */

 PAD_PULLCTL2 */

 Pad info table for the pinmux subsystem */

 0x24C (INTC_GPIOD_TYPE1) used to tweak the driver to handle generic */

 SPDX-License-Identifier: GPL-2.0+

/*

 * OWL SoC's Pinctrl driver

 *

 * Copyright (c) 2014 Actions Semi Inc.

 * Author: David Liu <liuwei@actions-semi.com>

 *

 * Copyright (c) 2018 Linaro Ltd.

 * Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>

/**

 * struct owl_pinctrl - pinctrl state of the device

 * @dev: device handle

 * @pctrldev: pinctrl handle

 * @chip: gpio chip

 * @lock: spinlock to protect registers

 * @clk: clock control

 * @soc: reference to soc_data

 * @base: pinctrl register base address

 * @irq_chip: IRQ chip information

 * @num_irq: number of possible interrupts

 * @irq: interrupt numbers

 Update register */

	/*

	 * GPIOs have higher priority over other modules, so either setting

	 * them as OUT or IN is sufficient

 disable gpio output */

 disable gpio input */

		/*

		 * Since the hardware doesn't support interrupts on both edges,

		 * emulate it in the software by setting the single edge

		 * interrupt and switching to the opposite edge while ACKing

		 * the interrupt

 disable port interrupt if no interrupt pending bit is active */

 enable port interrupt */

 enable GPIO interrupt */

	/*

	 * Switch the interrupt edge to the opposite edge of the interrupt

	 * which got triggered for the case of emulating both edges

 skip ports that are not associated with this irq */

 clear pending interrupt */

 enable GPIO/MFP clock */

 SPDX-License-Identifier: GPL-2.0+

/*

 * OWL S900 Pinctrl driver

 *

 * Copyright (c) 2014 Actions Semi Inc.

 * Author: David Liu <liuwei@actions-semi.com>

 *

 * Copyright (c) 2018 Linaro Ltd.

 * Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>

 Pinctrl registers offset */

 System */

 Pad names as specified in datasheet */

 mfp0_22 */

 mfp0_21_20 */

 mfp0_19 */

 mfp0_18_16 */

 mfp0_15_13 */

 mfp0_12_11 */

 mfp0_10_8 */

 mfp0_7_6 */

 mfp0_5 */

 mfp0_4_3 */

 mfp0_2 */

 mfp0_1_0 */

 mfp1_31_29 */

 mfp1_28_26 */

 mfp1_25_23 */

 mfp1_22 */

 mfp1_21 */

 mfp1_5_4 */

 mfp1_3_1 */

 mfp2_23 */

 mfp2_22 */

 mfp2_21 */

 mfp2_20 */

 mfp2_19_17 */

 mfp2_16_14 */

 mfp_13_11 */

 mfp2_10_9 */

 mfp2_8_7 */

 mfp2_6_5 */

 mfp2_4_3 */

 mfp2_2_0 */

 mfp3_27 */

 mfp3_21_19 */

 mfp3_18_16 */

 mfp3_15 */

 mfp3_14 */

 mfp3_13 */

 mfp3_12_dsi */

 mfp3_11 */

 mfp3_10 */

 mfp3_9 */

 mfp3_8 */

 PADDRV group data */

 drv0 */

 drv1 */

 drv2 */

 SR group data */

 sr0 */

 sr1 */

 sr2 */

 Pinctrl groups */

 PAD_PULLCTL0 */

 PAD_PULLCTL1 */

 PAD_PULLCTL2 */

 PAD_ST0 */

 PAD_ST1 */

 Pad info table */

 SPDX-License-Identifier: GPL-2.0



 Freescale imx7d pinctrl driver



 Author: Anson Huang <Anson.Huang@freescale.com>

 Copyright (C) 2014-2015 Freescale Semiconductor, Inc.

 Pad names for the pinmux subsystem */

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 imx50 pinctrl driver based on imx pinmux core



 Copyright (C) 2013 Greg Ungerer <gerg@uclinux.org>

 Copyright (C) 2012 Freescale Semiconductor, Inc.

 Copyright (C) 2012 Linaro, Inc.

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0



 Freescale imx6ul pinctrl driver



 Author: Anson Huang <Anson.Huang@freescale.com>

 Copyright (C) 2015 Freescale Semiconductor, Inc.

 Pad names for the pinmux subsystem */

 pad for i.MX6ULL lpsr pinmux */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 Copyright 2012 Freescale Semiconductor, Inc.

 Check for pin config node which has no 'reg' property */

 Check for group node which has both mux and config settings */

 Compose group name */

 drive */

 mA */

 vol */

 pull */

 cache the config value for mxs_pinconf_group_get() */

 for each config */

 Not support */

 Count total functions and groups */

 Skip pure pinconf node */

 Count groups for each function */

			/*

			 * This reference is dropped by

			 * of_get_next_child(np, * child)

			/*

			 * The logic parsing the functions from dt currently

			 * doesn't handle if functions with the same name are

			 * not grouped together. Only the first contiguous

			 * cluster is usable for each function name. This is a

			 * bug that is not trivial to fix, but at least warn

			 * about it.

 Get groups for each function */

 SPDX-License-Identifier: GPL-2.0



 imx25 pinctrl driver.



 Copyright 2013 Eukréa Electromatique <denis@eukrea.com>



 This driver was mostly copied from the imx51 pinctrl driver which has:



 Copyright (C) 2012 Freescale Semiconductor, Inc.

 Copyright (C) 2012 Linaro, Inc.



 Author: Denis Carikli <denis@eukrea.com>

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 Core driver for the imx pin controller in imx1/21/27



 Copyright (C) 2013 Pengutronix

 Author: Markus Pargmann <mpa@pengutronix.de>



 Based on pinctrl-imx.c:

	Author: Dong Aisheng <dong.aisheng@linaro.org>

	Copyright (C) 2012 Freescale Semiconductor, Inc.

	Copyright (C) 2012 Linaro Ltd.

/*

 * MX1 register offsets

/*

 * MUX_ID format defines

/*

 * IMX1 IOMUXC manages the pins based on ports. Each port has 32 pins. IOMUX

 * control registers are separated into function, output configuration, input

 * configuration A, input configuration B, GPIO in use and data direction.

 *

 * Those controls that are represented by 1 bit have a direct mapping between

 * bit position and pin id. If they are represented by 2 bit, the lower 16 pins

 * are in the first register and the upper 16 pins in the second (next)

 * register. pin_id is stored in bit (pin_id%16)*2 and the bit above.

/*

 * Calculates the register offset from a pin_id

/*

 * Write to a register with 2 bits per pin. The function will automatically

 * use the next register if the pin is managed in the second register.

 offset, regardless of register used */

 Mask for 2 bits at offset */

 Use the next register if the pin's port pin number is >=16 */

 Get current state of pins */

 Make sure value is really 2 bit */

 Set new state for pin_id */

 Get current state of pins */

 Make sure value is really 1 bit */

 Set new state for pin_id */

 Use the next register if the pin's port pin number is >=16 */

	/*

	 * first find the group of this node and check if we need create

	 * config maps for pins

 create mux map */

 create config map */

	/*

	 * Configure the mux mode for each pin in the group for a specific

	 * function.

 Initialise group */

	/*

	 * the binding format is fsl,pins = <PIN MUX_ID CONFIG>

 we do not check return since it's safe node passed down */

 Initialise function */

 Create state holders etc for this driver */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2017-2018 NXP

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 Freescale i.MX23 pinctrl driver



 Author: Shawn Guo <shawn.guo@linaro.org>

 Copyright 2012 Freescale Semiconductor, Inc.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2016 Freescale Semiconductor, Inc.

 * Copyright 2017~2018 NXP

 *	Dong Aisheng <aisheng.dong@nxp.com>

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0



 Copyright (C) 2016 Freescale Semiconductor, Inc.

 Copyright 2017-2018 NXP.

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 NXP

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2021 NXP

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2016 Freescale Semiconductor, Inc.

 * Copyright 2017-2018 NXP

 *	Dong Aisheng <aisheng.dong@nxp.com>

	/*

	 * Set mux and conf together in one IPC call

 SPDX-License-Identifier: GPL-2.0



 Freescale imx6dl pinctrl driver



 Author: Shawn Guo <shawn.guo@linaro.org>

 Copyright (C) 2013 Freescale Semiconductor, Inc.

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0



 Freescale imx6sl pinctrl driver



 Author: Shawn Guo <shawn.guo@linaro.org>

 Copyright (C) 2013 Freescale Semiconductor, Inc.

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 imx6q pinctrl driver based on imx pinmux core



 Copyright (C) 2012 Freescale Semiconductor, Inc.

 Copyright (C) 2012 Linaro, Inc.



 Author: Dong Aisheng <dong.aisheng@linaro.org>

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 Freescale i.MX28 pinctrl driver



 Author: Shawn Guo <shawn.guo@linaro.org>

 Copyright 2012 Freescale Semiconductor, Inc.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0



 Freescale imx6sx pinctrl driver



 Author: Anson Huang <Anson.Huang@freescale.com>

 Copyright (C) 2014 Freescale Semiconductor, Inc.

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 imx51 pinctrl driver based on imx pinmux core



 Copyright (C) 2012 Freescale Semiconductor, Inc.

 Copyright (C) 2012 Linaro, Inc.



 Author: Dong Aisheng <dong.aisheng@linaro.org>

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 i.MX1 pinctrl driver based on imx pinmux core



 Copyright (C) 2014 Alexander Shiyan <shc_work@mail.ru>

 Pad names for the pinmux subsystem */

 SPDX-License-Identifier: GPL-2.0+



 imx27 pinctrl driver based on imx pinmux core



 Copyright (C) 2013 Pengutronix



 Author: Markus Pargmann <mpa@pengutronix.de>

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 VF610 pinctrl driver based on imx pinmux and pinconf core



 Copyright 2013 Freescale Semiconductor, Inc.

 Pad names for the pinmux subsystem */

 IBE always enabled allows us to read the value "on the wire" */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 imx53 pinctrl driver based on imx pinmux core



 Copyright (C) 2012 Freescale Semiconductor, Inc.

 Copyright (C) 2012 Linaro, Inc.



 Author: Dong Aisheng <dong.aisheng@linaro.org>

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2016 Freescale Semiconductor, Inc.

 * Copyright 2017-2018 NXP

 * Copyright (C) 2018 Pengutronix, Lucas Stach <kernel@pengutronix.de>

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019~2020 NXP

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2018-2019 NXP

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0



 Copyright (C) 2016 Freescale Semiconductor, Inc.

 Copyright (C) 2017 NXP



 Author: Dong Aisheng <aisheng.dong@nxp.com>

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 Core driver for the imx pin controller



 Copyright (C) 2012 Freescale Semiconductor, Inc.

 Copyright (C) 2012 Linaro Ltd.



 Author: Dong Aisheng <dong.aisheng@linaro.org>

 The bits in CONFIG cell defined in binding doc*/

 no pin config need */

 set SION */

	/*

	 * first find the group of this node and check if we need create

	 * config maps for pins

 create mux map */

 create config map */

		/*

		 * We only create config maps for SCU pads or MMIO pads that

		 * are not using the default config(a.k.a IMX_NO_PAD_CTL)

			/*

			 * For SCU case, we set mux and conf together

			 * in one IPC call

	/*

	 * If the select input value begins with 0xff, it's a quirky

	 * select input and the value should be interpreted as below.

	 *     31     23      15      7        0

	 *     | 0xff | shift | width | select |

	 * It's used to work around the problem that the select

	 * input for some pin is not implemented in the select

	 * input register but in some general purpose register.

	 * We encode the select input value, width and shift of

	 * the bit field into input_val cell of pin function ID

	 * in device tree, and then decode them here for setting

	 * up the select input bits in general purpose register.

		/*

		 * The input_reg[i] here is actually some IOMUXC general

		 * purpose register, not regular select input register.

		/*

		 * Regular select input register can never be at offset

		 * 0, and we only print register value for regular case.

	/*

	 * Configure the mux mode for each pin in the group for a specific

	 * function.

		/*

		 * For IMX_USE_SCU case, we postpone the mux setting

		 * until config is set as we can set them together

		 * in one IPC call

 decode generic config into raw register values */

 for each config */

/*

 * Each pin represented in fsl,pins consists of a number of u32 PIN_FUNC_ID

 * and 1 u32 CONFIG, the total size is PIN_FUNC_ID + CONFIG for each pin.

 * For generic_pinconf case, there's no extra u32 CONFIG.

 *

 * PIN_FUNC_ID format:

 * Default:

 *     <mux_reg conf_reg input_reg mux_mode input_val>

 * SHARE_MUX_CONF_REG:

 *     <mux_conf_reg input_reg mux_mode input_val>

 * IMX_USE_SCU:

 *	<pin_id mux_mode>

 generic pin config decoded */

 legacy pin config read from devicetree */

 SION bit is in mux register */

 Initialise group */

	/*

	 * the binding format is fsl,pins = <PIN_FUNC_ID CONFIG ...>,

	 * do sanity check and calculate pins number

	 *

	 * First try legacy 'fsl,pins' property, then fall back to the

	 * generic 'pinmux'.

	 *

	 * Note: for generic 'pinmux' case, there's no CONFIG part in

	 * the binding format.

 we do not check return since it's safe node passed down */

 Initialise function */

/*

 * Check if the DT contains pins in the direct child nodes. This indicates the

 * newer DT format to store pins. This function returns true if the first found

 * fsl,pins property is in a child of np. Otherwise false is returned.

 Create state holders etc for this driver */

 for generic pinconf */

 platform specific callback */

 SPDX-License-Identifier: GPL-2.0



 imx35 pinctrl driver.



 This driver was mostly copied from the imx51 pinctrl driver which has:



 Copyright (C) 2012 Freescale Semiconductor, Inc.

 Copyright (C) 2012 Linaro, Inc.



 Author: Dong Aisheng <dong.aisheng@linaro.org>

 Pad names for the pinmux subsystem */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2016 Freescale Semiconductor, Inc.

 * Copyright 2017-2018 NXP

 *	Dong Aisheng <aisheng.dong@nxp.com>

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Synaptics AS370 pinctrl driver

 *

 * Copyright (C) 2018 Synaptics Incorporated

 *

 * Author: Jisheng Zhang <jszhang@kernel.org>

 GPIO0 */

 BCLKIO */

 DBG0 */

 GPIO1 */

 LRCKIO */

 DBG1 */

 1P8V RSTB*/

 DO0 */

 GPIO2 */

 DBG2 */

 3P3V RSTB */

 DO1 */

 GPIO3 */

 DBG3 */

 CORE RSTB */

 DO2 */

 PWM4 */

 GPIO4 */

 DBG4 */

 GPIO5 */

 DO3 */

 PWM5 */

 SPDIFIB */

 SPDIFO */

 DBG5 */

 GPIO6 */

 MCLK */

 DBG6 */

 GPIO7 */

 BCLKIO */

 DBG7 */

 GPIO8 */

 LRCKIO */

 DBG8 */

 GPIO9 */

 DI0 */

 PWM2 */

 DBG9 */

 GPIO10 */

 DI1 */

 PWM3 */

 DBG10 */

 GPIO11 */

 DI2 */

 PWM6 */

 SPDIFIC */

 SPDIFO */

 DBG11 */

 GPIO12 */

 DI3 */

 PWM7 */

 SPDIFIA */

 SPDIFO */

 DBG12 */

 GPIO13 */

 CLKO */

 MCLK */

 DBG13 */

 GPIO14 */

 DI0 */

 DBG14 */

 GPIO15 */

 DI1 */

 DBG15 */

 GPIO16 */

 DI2 */

 PWM4 */

 SPDIFID */

 SPDIFO */

 DBG16 */

 GPIO17 */

 DI3 */

 PWM5 */

 SPDIFI */

 SPDIFO */

 DBG17 */

 IO0 */

 DATA0 */

 MDIO */

 IO1 */

 DATA1 */

 MDC */

 IO2 */

 DATA2 */

 MDIO */

 IO3 */

 DATA3 */

 MDC */

 IO4 */

 DATA4 */

 IO5 */

 DATA5 */

 IO6 */

 DATA6 */

 IO7 */

 DATA7 */

 ALE */

 PWM6 */

 GPIO18 */

 CLE */

 PWM7 */

 GPIO19 */

 WEn */

 GPIO20 */

 REn */

 GPIO21 */

 WPn */

 CLK */

 GPIO22 */

 CEn */

 RSTn */

 GPIO23 */

 RDY */

 CMD */

 GPIO24 */

 SS0n */

 GPIO25 */

 SS1n */

 GPIO26 */

 PWM2 */

 RXD */

 SS2n */

 GPIO27 */

 PWM3 */

 TXD */

 SS3n */

 GPIO28 */

 SCLK */

 GPIO29 */

 PWM4 */

 SDO */

 GPIO30 */

 PWM5 */

 SDI */

 GPIO31 */

 VBUS */

 GPIO32 */

 25M */

 GPIO33 */

 SCL */

 GPIO34 */

 SDA */

 GPIO35 */

 SCL */

 GPIO36 */

 SDA */

 TMS */

 GPIO37 */

 PWM0 */

 TDI */

 GPIO38 */

 PWM1 */

 TDO */

 GPIO39 */

 PWM0 */

 GPIO40 */

 PWM6 */

 GPIO41 */

 PWM7 */

 VDDCPUSOC RSTB */

 PWM0 */

 GPIO42 */

 GPIO43 */

 PWM1 */

 GPIO44 */

 PWM2 */

 GPIO45 */

 PWM3 */

 GPIO46 */

 PWM4 */

 GPIO47 */

 PWM5 */

 GPIO48 */

 RTSn */

 PWM6 */

 SCL */

 DBG0 */

 DBG18 */

 GPIO49 */

 CTSn */

 PWM7 */

 SDA */

 DBG1 */

 DBG19 */

 GPIO50 */

 RXD */

 DBG2 */

 DBG20 */

 GPIO51 */

 TXD */

 DBG3 */

 DBG21 */

 GPIO52 */

 DI */

 DBG22 */

 GPIO53 */

 DO */

 DBG23 */

 GPIO54 */

 BCLKIO */

 DBG */

 GPIO55 */

 LRCKIO */

 OUT */

 DAT0 */

 GPIO56 */

 OUT */

 DAT1 */

 GPIO57 */

 GPIO58 */

 CLK */

 OUT */

 DAT2 */

 GPIO59 */

 OUT */

 DAT3 */

 GPIO60 */

 OUT */

 CMD */

 GPIO61 */

 GPIO62 */

 CDn */

 PWM2 */

 GPIO63 */

 WP */

 PWM3 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Marvell Berlin BG2 pinctrl driver.

 *

 * Copyright (C) 2014 Marvell Technology Group Ltd.

 *

 * Antoine Ténart <antoine.tenart@free-electrons.com>

 G */

 SS0n */

 SS1n */

 SS2n */

 SS3n */

 CLK/SDI/SDO */

		/*

		 * Mode 0x3 mux i2s2 mclk *and* i2s3 mclk:

		 * add two functions so it can be used with other groups

		 * within the same subnode in the device tree

 gpio17..19,pdm */

 gpio12..14,pdm */

 GSM */

 SS0n */

 SS1n */

 SS2n/SS3n */

 CTS/RTS */

 RX/TX */

 RX/TX */

 RX/TX */

 CLK/SDO */

 SPDX-License-Identifier: GPL-2.0

/*

 * Marvell Berlin BG2CD pinctrl driver.

 *

 * Copyright (C) 2014 Marvell Technology Group Ltd.

 *

 * Antoine Ténart <antoine.tenart@free-electrons.com>

 G */

 RX/TX */

 SS0n */

 SS1n/SS2n */

 CLK */

 SDI/SDO */

 GSM */

 SPDX-License-Identifier: GPL-2.0

/*

 * Marvell Berlin BG2Q pinctrl driver

 *

 * Copyright (C) 2014 Marvell Technology Group Ltd.

 *

 * Antoine Ténart <antoine.tenart@free-electrons.com>

 G */

 CLK/SDI/SDO */

 SS0n/SS1n */

 SS2n */

 SS3n */

			/*

			 * Mode 0x4 mux usb2_dbg *and* usb3_dbg:

			 * add two functions so it can be used with other groups

			 * within the same subnode in the device tree

 GAV */

 GSM */

 SS0n */

 SS1n */

 SS2n/SS3n */

 CLK/SDO */

 RX/TX */

 CTS/RTS */

 RX/TX */

 RX/TX */

 SPDX-License-Identifier: GPL-2.0

/*

 * Marvell Berlin SoC pinctrl core driver

 *

 * Copyright (C) 2014 Marvell Technology Group Ltd.

 *

 * Antoine Ténart <antoine.tenart@free-electrons.com>

 compute the maxiumum number of functions a group can have */

 we will reallocate later */

 register all functions */

 map functions to theirs groups */

 SPDX-License-Identifier: GPL-2.0

/*

 * Marvell berlin4ct pinctrl driver

 *

 * Copyright (C) 2015 Marvell Technology Group Ltd.

 *

 * Author: Jisheng Zhang <jszhang@marvell.com>

 RSTn */

 GPIO47 */

 IO0 */

 RXD0 */

 CLK */

 GPIO0 */

 IO1 */

 RXD1 */

 CDn */

 GPIO1 */

 IO2 */

 RXD2 */

 DAT0 */

 GPIO2 */

 IO3 */

 RXD3 */

 DAT1 */

 GPIO3 */

 IO4 */

 RXC */

 DAT2 */

 GPIO4 */

 IO5 */

 RXCTL */

 DAT3 */

 GPIO5 */

 IO6 */

 MDC */

 CMD */

 GPIO6 */

 IO7 */

 MDIO */

 WP */

 GPIO7 */

 ALE */

 TXD0 */

 GPIO8 */

 CLE */

 TXD1 */

 GPIO9 */

 WEn */

 TXD2 */

 GPIO10 */

 REn */

 TXD3 */

 GPIO11 */

 WPn */

 GPIO12 */

 CEn */

 TXC */

 GPIO13 */

 RDY */

 TXCTL */

 GPIO14 */

 GPIO29 */

 CLK*/

 CLK */

 DBG8 */

 DBG8 */

 GPIO30 */

 DAT0 */

 SOP */

 DBG9 */

 DBG9 */

 GPIO31 */

 DAT1 */

 SD */

 DBG10 */

 DBG10 */

 GPIO32 */

 DAT2 */

 VALD */

 DBG11 */

 DBG11 */

 GPIO33 */

 DAT3 */

 CLK */

 DBG12 */

 DBG12 */

 GPIO34 */

 CDn */

 SOP */

 DBG13 */

 DBG13 */

 GPIO35 */

 CMD */

 SD */

 DBG14 */

 DBG14 */

 GPIO36 */

 WP */

 VALD */

 DBG15 */

 DBG15 */

 GPIO21 */

 CLK */

 CLKO */

 DBG0 */

 DBG0 */

 GPIO22 */

 SOP */

 CLKO */

 DBG1 */

 DBG1 */

 GPIO23 */

 SD */

 CLKO */

 DBG2 */

 DBG2 */

 GPIO24 */

 VALD */

 DBG3 */

 DBG3 */

 GPIO25 */

 CLK */

 DBG4 */

 DBG4 */

 GPIO26 */

 SOP */

 DBG5 */

 DBG5 */

 GPIO27 */

 SD */

 DBG6 */

 DBG6 */

 GPIO28 */

 VALD */

 DBG7 */

 DBG7 */

 GPIO15 */

 RST */

 CLK */

 GPIO16 */

 DCLK */

 CMD */

 GPIO17 */

 SCRD0 GPIO0 */

 DIO */

 DAT0 */

 GPIO18 */

 SCRD0 GPIO1 */

 CLK */

 DAT1 */

 GPIO19 */

 DIO */

 DEN */

 DAT2 */

 GPIO20 */

 crd pres */

 DAT3 */

 SS0n */

 GPIO37 */

 CLK */

 SS1n */

 GPIO38 */

 SOP */

 SS2n */

 GPIO39 */

 SD */

 SS3n */

 GPIO40 */

 VALD */

 SCLK */

 GPIO41 */

 CLK */

 SDO */

 GPIO42 */

 SOP */

 SDI */

 GPIO43 */

 SD */

 GPIO44 */

 VBUS */

 VALD */

 GPIO45 */

 SCL */

 GPIO46 */

 SDA */

 AVIO GPIO0 */

 SCL */

 SCL */

 AVIO GPIO1 */

 SDA */

 SDA */

 AVIO GPIO2 */

 LRCKO */

 CLK */

 DBG0 */

 CLK */

 DBG0 */

 AVIO GPIO3 */

 BCLKO */

 SOP */

 DBG1 */

 CMD */

 DBG1 */

 AVIO GPIO4 */

 DO */

 SD */

 DBG2 */

 DAT0 */

 DBG2 */

 AVIO GPIO5 */

 MCLK */

 VALD */

 MCLK */

 DAT1 */

 DBG3 */

 AVIO GPIO6 */

 CLKO */

 DBG3 */

 AVIO GPIO7 */

 MCLK */

 FBCLK */

 CLKO */

 AVIO GPIO8 */

 LRCKI */

 CLK */

 LRCK */

 DAT2 */

 AVIO GPIO9 */

 BCLKI */

 SOP */

 BCLK */

 DAT3 */

 AVIO GPIO10 */

 DI0 */

 SD */

 SDIN */

 DI0 */

 CDn */

 AVIO GPIO11 */

 DI1 */

 VALD */

 PWMCLK */

 DI1 */

 WP */

 SM GPIO19 */

 SCL */

 SM GPIO20 */

 SDA */

 SM GPIO21 */

 SCL */

 SM GPIO22 */

 SDA */

 TMS */

 SM GPIO0 */

 TDI */

 SM GPIO1 */

 TDO */

 SM GPIO2 */

 TXD */

 SM GPIO3 */

 RXD */

 SM GPIO4 */

 SM GPIO5 */

 TXD */

 RXCLK */

 SM GPIO6 */

 RXD */

 SS0 n*/

 SM GPIO7 */

 SM GPIO8 */

 SS1n */

 SM GPIO9 */

 SS2n */

 MDC */

 SM GPIO10 */

 SS3n */

 MDIO */

 SDO */

 SM GPIO11 */

 SDI */

 SM GPIO12 */

 SCLK */

 SM GPIO13 */

 SM GPIO14 */

 LED0 */

 SM GPIO 15 */

 LED1 */

 SM GPIO16 */

 LED2 */

 SM GPIO17 */

 HPD */

 SM GPIO18 */

 CEC */

 SPDX-License-Identifier: GPL-2.0+



 Copyright (C) 2017 Socionext Inc.

   Author: Masahiro Yamada <yamada.masahiro@socionext.com>

 PORT0x */

 PORT1x */

 PORT2x */

 PORT3x */

 PORT4x */

 PORT5x */

 PORT6x */

 PORT7x */

 PORT8x */

 PORT9x */

 PORT10x */

 PORT13x */

 PORT14x */

 XIRQ0-7 */

 XIRQ8-15 */

 XIRQ16-23 */

 PORT18x */

 PORT19x */

 PORT200-201 */

 PORT21x */

 PORT22x */

 PORT23x */

 PORT24x */

 PORT25x */

 PORT26x */

 PORT27x */

 PORT28x */

 PORT29x */

 PORT30x */

 PORT31x */

 PORT32x */

 PORT33x */

 PORT34x */

 PORT350-355 */

 XIRQx */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 Copyright (C) 2015-2017 Socionext Inc.

   Author: Masahiro Yamada <yamada.masahiro@socionext.com>

 PORT0x */

 PORT1x */

 PORT2x */

 PORT3x */

 PORT4x */

 PORT5x */

 PORT6x */

 PORT7x */

 PORT8x */

 PORT9x */

 PORT10x */

 PORT11x */

 PORT12x */

 PORT13x */

 PORT14x */

 XIRQ0-7 */

 XIRQ8-15 */

 XIRQ16-20, PORT175-177 */

 PORT18x */

 PORT19x */

 PORT20x */

 PORT21x */

 PORT22x */

 PORT23x */

 PORT24x */

 PORT25x */

 PORT26x */

 PORT27x */

 PORT28x */

 PORT29x */

 PORT30x */

 XIRQ14-20 */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 Copyright (C) 2019 Socionext Inc.

   Author: Masahiro Yamada <yamada.masahiro@socionext.com>

 PORT0x */

 PORT1x */

 PORT2x */

 PORT30-34 */

 PORT61-63 */

 PORT65-67 */

 PORT7x */

 PORT8x */

 PORT9x */

 PORT10x */

 PORT12x */

 XIRQ0-5 */

 XIRQx */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 Copyright (C) 2015-2017 Socionext Inc.

   Author: Masahiro Yamada <yamada.masahiro@socionext.com>

 dedicated pins */

 PORT0x */

 PORT1x */

 PORT2x */

 PORT3x */

 PORT4x */

 PORT5x */

 PORT6x */

 PORT7x */

 PORT8x */

 PORT9x */

 PORT10x */

 PORT11x */

 PORT120-124 */

 PORT130-131 */

 PORT14x */

 XIRQ0-7 */

 XIRQ8-12, PORT165, XIRQ14-15 */

 XIRQ0-XIRQ7 */

 XIRQ8-12 */

 XIRQ14-15 */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 Copyright (C) 2015-2017 Socionext Inc.

   Author: Masahiro Yamada <yamada.masahiro@socionext.com>

 PORT0x */

 PORT1x */

 PORT2x */

 PORT3x */

 PORT4x */

 PORT5x */

 PORT6x */

 PORT7x */

 PORT8x */

 PORT9x */

 PORT10x */

 PORT11x */

 PORT12x */

 PORT13x */

 PORT14x */

 XIRQ0-7 */

 XIRQ8-15 */

 XIRQ16-20, PORT175-177 */

 PORT18x */

 PORT19x */

 PORT20x */

 PORT21x */

 PORT22x */

 PORT23x */

 PORT24x */

 PORT25x */

 PORT26x */

 PORT27x */

 PORT28x */

 PORT29x */

 PORT30x */

 XIRQ0-20 */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 Copyright (C) 2015-2017 Socionext Inc.

   Author: Masahiro Yamada <yamada.masahiro@socionext.com>

 PORT0x */

 PORT1x */

 PORT2x */

 PORT3x */

 PORT4x */

 PORT5x */

 PORT6x */

 PORT7x */

 PORT8x */

 PORT9x */

 PORT10x */

 PORT12x */

 PORT13x */

 PORT14x */

 XIRQ0-7 */

 XIRQ8-15 */

 XIRQ16-23 */

 PORT18x */

 PORT19x */

 PORT20x */

 PORT21x */

 PORT22x */

 PORT23x */

 PORT24x */

 PORT25x */

 PORT26x */

 PORT27x */

 PORT28x */

 XIRQx */

 15 will do because XIRQ0-23 are aliases of PORT150-177. */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 Copyright (C) 2015-2017 Socionext Inc.

   Author: Masahiro Yamada <yamada.masahiro@socionext.com>

 PORT0x */

 PORT1x */

 PORT2x */

 PORT3x */

 PORT4x */

 PORT5x */

 PORT6x */

 PORT7x */

 PORT8x */

 PORT9x */

 PORT10x */

 PORT12x */

 PORT13x */

 PORT14x */

 XIRQ0-7 */

 XIRQ8-15 */

 XIRQ16-23 */

 PORT18x */

 PORT19x */

 PORT20x */

 PORT21x */

 PORT22x */

 PORT23x */

 PORT24x */

 PORT25x */

 PORT26x */

 PORT27x */

 PORT28x */

 Achip-Dchip interconnect */

 XIRQx */

 15 will do because XIRQ0-23 are aliases of PORT150-177. */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 Copyright (C) 2015-2017 Socionext Inc.

   Author: Masahiro Yamada <yamada.masahiro@socionext.com>

 dedicated pins */

 PORT0x */

 PORT1x */

 PORT2x */

 PORT3x */

 PORT4x */

 PORT5x */

 PORT6x */

 PORT7x */

 PORT8x */

 PORT9x */

 PORT10x */

 PORT11x */

 PORT12x */

 PORT13x */

 PORT14x */

 XIRQ0-7 */

 XIRQ8-12, PORT165, XIRQ14-15 */

 PORT00-PORT26 */

 XIRQ1-XIRQ11 */

 XIRQ14 */

 XIRQ0 */

 XIRQ12 */

 XIRQ15 */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 Copyright (C) 2015-2017 Socionext Inc.

   Author: Masahiro Yamada <yamada.masahiro@socionext.com>

 drive strength control is not supported for this pin */

 This pin is always input-enabled. */

 unsupported parameter */

 configuration ingored */

	/*

	 * Multiple pins share one input enable, per-pin disabling is

	 * impossible.

 UNIPHIER_PIN_IECTRL_NONE means the pin is always input-enabled */

 some pins need input-enabling */

 dedicated pin; nothing to do for pin-mux */

		/*

		 *  Mode     reg_offset     bit_position

		 *  Normal    4 * n        shift+3:shift

		 *  Debug     4 * n        shift+7:shift+4

		/*

		 *  Mode     reg_offset     bit_position

		 *  Normal    8 * n        shift+3:shift

		 *  Debug     8 * n + 4    shift+3:shift

	/*

	 * If reg_stride is greater than 4, the MSB of each pinsel shall be

	 * stored in the offset+4.

 SPDX-License-Identifier: GPL-2.0+



 Copyright (C) 2016-2017 Socionext Inc.

   Author: Masahiro Yamada <yamada.masahiro@socionext.com>

 No SDVOLC */

 PORT0x */

 PORT1x */

 PORT2x */

 PORT3x */

 PORT4x */

 PORT5x */

 PORT6x */

 PORT7x */

 PORT8x */

 PORT9x */

 PORT10x */

 PORT12x */

 PORT13x */

 PORT14x */

 XIRQ0-7 */

 XIRQ8-15 */

 XIRQ16-23 */

 PORT18x */

 PORT20x */

 PORT21x */

 PORT22x */

 PORT23x */

 PORT24x */

 PORT250-254 */

 XIRQ12, 15 */

 XIRQx */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 Copyright (C) 2016-2017 Socionext Inc.

   Author: Masahiro Yamada <yamada.masahiro@socionext.com>

 PORT0x */

 PORT1x */

 PORT2x */

 PORT30-32 */

 PORT53-57 */

 PORT60 */

 PORT63-67 */

 PORT7x */

 PORT8x */

 PORT9x */

 PORT10x */

 PORT12x */

 PORT13x */

 PORT14x */

 XIRQ0-7 */

 XIRQ8-15 */

 XIRQ16-23 */

 PORT18x */

 PORT20x */

 PORT21x */

 PORT220-223 */

 PORT23x */

 PORT24x */

 XIRQ12, 15 */

 XIRQx */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * SH-X3 prototype CPU pinmux

 *

 * Copyright (C) 2010  Paul Mundt

 PA GPIO */

 PB GPIO */

 PC GPIO */

 PD GPIO */

 PE GPIO */

 PF GPIO */

 PG GPIO */

 PH GPIO */

 PA FN */

 PB FN */

 PC FN */

 PD FN */

 PE FN */

 PF FN */

 PG FN */

 PH FN */

 PA */

 PB */

 PC */

 PD */

 PE */

 PF */

 PG */

 PH */

 FN */

 SPDX-License-Identifier: GPL-2.0

/*

 * SuperH Pin Function Controller pinmux support.

 *

 * Copyright (C) 2012  Paul Mundt

	/* Support both the old Renesas-specific properties and the new standard

	 * properties. Mixing old and new properties isn't allowed, neither

	 * inside a subnode nor across subnodes.

	/* Parse the function and configuration properties. At least a function

	 * or one configuration must be specified.

 Count the number of pins and groups and reallocate mappings. */

 Iterate over pins and groups and create the mappings. */

 If no mapping has been found in child nodes try the config node. */

 CONFIG_OF */

		/*

		 * This driver cannot manage both gpio and mux when the gpio

		 * pin is already enabled. So, this function fails.

 All group pins are configured, mark the pins as muxed */

		/* If GPIOs are handled externally the pin mux type needs to be

		 * set to GPIO here.

 If mux is already set, this configures it here */

	/* Check if the requested direction is supported by the pin. Not all

	 * SoCs provide pin config data, so perform the check conditionally.

	/* Convert the value to mA based on a full drive strength value of 24mA.

	 * We can make the full value configurable later if needed.

	/* Convert the value from mA based on a full drive strength value of

	 * 24mA. We can make the full value configurable later if needed.

 Check whether the requested parameter is supported for a pin. */

 for each config */

 PFC ranges -> pinctrl pin descs */

 Allocate and initialize the pins and configs arrays. */

 If the pin number is equal to -1 all pins are considered */

 SPDX-License-Identifier: GPL-2.0

/*

 * sh73a0 processor support - PFC hardware block

 *

 * Copyright (C) 2010 Renesas Solutions Corp.

 * Copyright (C) 2010 NISHIMOTO Hiroki

 PORT0_DATA -> PORT309_DATA */

 PORT0_IN -> PORT309_IN */

 PORT0_OUT -> PORT309_OUT */

 PORT0_FN_IN -> PORT309_FN_IN */

 PORT0_FN_OUT -> PORT309_FN_OUT */

 PORT0_FN0 -> PORT309_FN0 */

 PORT0_FN1 -> PORT309_FN1 */

 PORT0_FN2 -> PORT309_FN2 */

 PORT0_FN3 -> PORT309_FN3 */

 PORT0_FN4 -> PORT309_FN4 */

 PORT0_FN5 -> PORT309_FN5 */

 PORT0_FN6 -> PORT309_FN6 */

 PORT0_FN7 -> PORT309_FN7 */

 Hardware manual Table 25-1 (Function 0-7) */

 MSEL2 special cases */

 MSEL3 special cases */

 MSEL4 special cases */

 specify valid pin states for each pin in GPIO mode */

 Table 25-1 (Function 0-7) */

 MSEL2 special cases */

 MSEL3 special cases */

 MSEL4 special cases */

/*

 * Pins not associated with a GPIO port.

 Table 25-1 (I/O and Pull U/D) */

 Pins not associated with a GPIO port */

 - BSC -------------------------------------------------------------------- */

 D[0:7] */

 D[8:15] */

 CS */

 CS */

 CS */

 CS */

 CS */

 RD */

 RDWR */

 RDWR */

 RDWR */

 WE0 */

 WE1 */

 - FSIA ------------------------------------------------------------------- */

 CK */

 OMC */

 ILR, IBT */

 OLR, OBT */

 ISLD */

 OSLD */

 SPDIF */

 - FSIB ------------------------------------------------------------------- */

 CK */

 OMC */

 ILR, IBT */

 OLR, OBT */

 ISLD */

 OSLD */

 SPDIF */

 - FSIC ------------------------------------------------------------------- */

 CK */

 OMC */

 ILR, IBT */

 OLR, OBT */

 ISLD */

 OSLD, OSLDT1, OSLDT2, OSLDT3 */

 SPDIF */

 SPDIF */

 - FSID ------------------------------------------------------------------- */

 ILR, IBT */

 OLR, OBT */

 ISLD */

 - I2C2 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C3 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - IrDA ------------------------------------------------------------------- */

 OUT, IN, FIRSEL */

 OUT, IN, FIRSEL */

 - KEYSC ------------------------------------------------------------------ */

 KEYIN[0:4] */

 KEYIN[0:5] */

 KEYIN[0:6] */

 KEYIN[0:7] */

 KEYOUT[0:4] */

 KEYOUT5 */

 KEYOUT6 */

 KEYOUT6 */

 KEYOUT6 */

 KEYOUT7 */

 KEYOUT7 */

 KEYOUT7 */

 KEYOUT8 */

 KEYOUT8 */

 KEYOUT8 */

 KEYOUT9 */

 KEYOUT9 */

 KEYOUT9 */

 KEYOUT10 */

 KEYOUT10 */

 KEYOUT11 */

 KEYOUT11 */

 - LCD -------------------------------------------------------------------- */

 D[0:7] */

 D[0:8] */

 D[0:11] */

 D[0:15] */

 D[0:17] */

 D[0:23] */

 DON */

 LCLK */

 VSYN, HSYN, DCK, DISP */

 CS, WR, RD, RS */

 - LCD2 ------------------------------------------------------------------- */

 D[0:7] */

 D[0:8] */

 D[0:11] */

 D[0:15] */

 D[0:17] */

 D[0:23] */

 VSYN, HSYN, DCK, DISP */

 VSYN, HSYN, DCK, DISP */

 CS, WR, RD, RS */

 CS, WR, RD, RS */

 - MMCIF ------------------------------------------------------------------ */

 D[0] */

 D[0:3] */

 D[0:7] */

 CMD, CLK */

 D[0] */

 D[0:3] */

 D[0:7] */

 CMD, CLK */

 - MSIOF0 ----------------------------------------------------------------- */

 RSCK */

 TSCK */

 RSYNC */

 TSYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 MSCK0 */

 MSCK1 */

 RSCK */

 TSCK */

 RSYNC */

 TSYNC */

 SS1 */

 SS1 */

 SS2 */

 SS2 */

 RXD */

 TXD */

 MSCK0 */

 MSCK1 */

 - MSIOF1 ----------------------------------------------------------------- */

 RSCK */

 TSCK */

 RSYNC */

 TSYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 MSCK0 */

 MSCK1 */

 - MSIOF2 ----------------------------------------------------------------- */

 RSCK */

 TSCK */

 RSYNC */

 TSYNC */

 SS1 */

 SS1 */

 SS2 */

 SS2 */

 RXD */

 RXD */

 TXD */

 MSCK0 */

 MSCK1 */

 TSCK */

 TSYNC */

 RXD */

 TXD */

 - MSIOF3 (Pin function name of MSIOF3 is named BBIF1) -------------------- */

 RSCK */

 TSCK */

 RSYNC */

 TSYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 FLOW */

 - SCIFA0 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 - SCIFA1 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 - SCIFA2 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 - SCIFA3 ----------------------------------------------------------------- */

 RXD, TXD */

 RTS, CTS */

 - SCIFA4 ----------------------------------------------------------------- */

 RXD, TXD */

 RTS, CTS */

 - SCIFA5 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 - SCIFA6 ----------------------------------------------------------------- */

 TXD */

 - SCIFA7 ----------------------------------------------------------------- */

 RXD, TXD */

 RTS, CTS */

 - SCIFB ------------------------------------------------------------------ */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 - SDHI0 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CMD, CLK */

 CD */

 WP */

 - SDHI1 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CMD, CLK */

 - SDHI2 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CMD, CLK */

 - TPU0 ------------------------------------------------------------------- */

 TO */

 TO */

 TO */

 TO */

 - TPU1 ------------------------------------------------------------------- */

 TO */

 TO */

 TO */

 TO */

 TO */

 - TPU2 ------------------------------------------------------------------- */

 TO */

 TO */

 TO */

 TO */

 - TPU3 ------------------------------------------------------------------- */

 TO */

 TO */

 TO */

 TO */

 - TPU4 ------------------------------------------------------------------- */

 TO */

 TO */

 TO */

 TO */

 - USB -------------------------------------------------------------------- */

 VBUS */

 PORT0CR */

 PORT1CR */

 PORT2CR */

 PORT3CR */

 PORT4CR */

 PORT5CR */

 PORT6CR */

 PORT7CR */

 PORT8CR */

 PORT9CR */

 PORT10CR */

 PORT11CR */

 PORT12CR */

 PORT13CR */

 PORT14CR */

 PORT15CR */

 PORT16CR */

 PORT17CR */

 PORT18CR */

 PORT19CR */

 PORT20CR */

 PORT21CR */

 PORT22CR */

 PORT23CR */

 PORT24CR */

 PORT25CR */

 PORT26CR */

 PORT27CR */

 PORT28CR */

 PORT29CR */

 PORT30CR */

 PORT31CR */

 PORT32CR */

 PORT33CR */

 PORT34CR */

 PORT35CR */

 PORT36CR */

 PORT37CR */

 PORT38CR */

 PORT39CR */

 PORT40CR */

 PORT41CR */

 PORT42CR */

 PORT43CR */

 PORT44CR */

 PORT45CR */

 PORT46CR */

 PORT47CR */

 PORT48CR */

 PORT49CR */

 PORT50CR */

 PORT51CR */

 PORT52CR */

 PORT53CR */

 PORT54CR */

 PORT55CR */

 PORT56CR */

 PORT57CR */

 PORT58CR */

 PORT59CR */

 PORT60CR */

 PORT61CR */

 PORT62CR */

 PORT63CR */

 PORT64CR */

 PORT65CR */

 PORT66CR */

 PORT67CR */

 PORT68CR */

 PORT69CR */

 PORT70CR */

 PORT71CR */

 PORT72CR */

 PORT73CR */

 PORT74CR */

 PORT75CR */

 PORT76CR */

 PORT77CR */

 PORT78CR */

 PORT79CR */

 PORT80CR */

 PORT81CR */

 PORT82CR */

 PORT83CR */

 PORT84CR */

 PORT85CR */

 PORT86CR */

 PORT87CR */

 PORT88CR */

 PORT89CR */

 PORT90CR */

 PORT91CR */

 PORT92CR */

 PORT93CR */

 PORT94CR */

 PORT95CR */

 PORT96CR */

 PORT97CR */

 PORT98CR */

 PORT99CR */

 PORT100CR */

 PORT101CR */

 PORT102CR */

 PORT103CR */

 PORT104CR */

 PORT105CR */

 PORT106CR */

 PORT107CR */

 PORT108CR */

 PORT109CR */

 PORT110CR */

 PORT111CR */

 PORT112CR */

 PORT113CR */

 PORT114CR */

 PORT115CR */

 PORT116CR */

 PORT117CR */

 PORT118CR */

 PORT128CR */

 PORT129CR */

 PORT130CR */

 PORT131CR */

 PORT132CR */

 PORT133CR */

 PORT134CR */

 PORT135CR */

 PORT136CR */

 PORT137CR */

 PORT138CR */

 PORT139CR */

 PORT140CR */

 PORT141CR */

 PORT142CR */

 PORT143CR */

 PORT144CR */

 PORT145CR */

 PORT146CR */

 PORT147CR */

 PORT148CR */

 PORT149CR */

 PORT150CR */

 PORT151CR */

 PORT152CR */

 PORT153CR */

 PORT154CR */

 PORT155CR */

 PORT156CR */

 PORT157CR */

 PORT158CR */

 PORT159CR */

 PORT160CR */

 PORT161CR */

 PORT162CR */

 PORT163CR */

 PORT164CR */

 PORT192CR */

 PORT193CR */

 PORT194CR */

 PORT195CR */

 PORT196CR */

 PORT197CR */

 PORT198CR */

 PORT199CR */

 PORT200CR */

 PORT201CR */

 PORT202CR */

 PORT203CR */

 PORT204CR */

 PORT205CR */

 PORT206CR */

 PORT207CR */

 PORT208CR */

 PORT209CR */

 PORT210CR */

 PORT211CR */

 PORT212CR */

 PORT213CR */

 PORT214CR */

 PORT215CR */

 PORT216CR */

 PORT217CR */

 PORT218CR */

 PORT219CR */

 PORT220CR */

 PORT221CR */

 PORT222CR */

 PORT223CR */

 PORT224CR */

 PORT225CR */

 PORT226CR */

 PORT227CR */

 PORT228CR */

 PORT229CR */

 PORT230CR */

 PORT231CR */

 PORT232CR */

 PORT233CR */

 PORT234CR */

 PORT235CR */

 PORT236CR */

 PORT237CR */

 PORT238CR */

 PORT239CR */

 PORT240CR */

 PORT241CR */

 PORT242CR */

 PORT243CR */

 PORT244CR */

 PORT245CR */

 PORT246CR */

 PORT247CR */

 PORT248CR */

 PORT249CR */

 PORT250CR */

 PORT251CR */

 PORT252CR */

 PORT253CR */

 PORT254CR */

 PORT255CR */

 PORT256CR */

 PORT257CR */

 PORT258CR */

 PORT259CR */

 PORT260CR */

 PORT261CR */

 PORT262CR */

 PORT263CR */

 PORT264CR */

 PORT265CR */

 PORT266CR */

 PORT267CR */

 PORT268CR */

 PORT269CR */

 PORT270CR */

 PORT271CR */

 PORT272CR */

 PORT273CR */

 PORT274CR */

 PORT275CR */

 PORT276CR */

 PORT277CR */

 PORT278CR */

 PORT279CR */

 PORT280CR */

 PORT281CR */

 PORT282CR */

 PORT288CR */

 PORT289CR */

 PORT290CR */

 PORT291CR */

 PORT292CR */

 PORT293CR */

 PORT294CR */

 PORT295CR */

 PORT296CR */

 PORT297CR */

 PORT298CR */

 PORT299CR */

 PORT300CR */

 PORT301CR */

 PORT302CR */

 PORT303CR */

 PORT304CR */

 PORT305CR */

 PORT306CR */

 PORT307CR */

 PORT308CR */

 PORT309CR */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 IRQ6 */

 IRQ7 */

 IRQ8 */

 IRQ9 */

 IRQ10 */

 IRQ11 */

 IRQ12 */

 IRQ13 */

 IRQ14 */

 IRQ15 */

 IRQ16 */

 IRQ17 */

 IRQ18 */

 IRQ19 */

 IRQ20 */

 IRQ21 */

 IRQ22 */

 IRQ23 */

 IRQ24 */

 IRQ25 */

 IRQ26 */

 IRQ27 */

 IRQ28 */

 IRQ29 */

 IRQ30 */

 IRQ31 */

/* -----------------------------------------------------------------------------

 * VCCQ MC0 regulator

/* -----------------------------------------------------------------------------

 * Pin bias

/* -----------------------------------------------------------------------------

 * SoC information

 SPDX-License-Identifier: GPL-2.0

/*

 * SH7720 Pinmux

 *

 *  Copyright (C) 2008  Magnus Damm

 PTA GPIO */

 PTB GPIO */

 PTC GPIO */

 PTD GPIO */

 PTE GPIO */

 PTF GPIO */

 PTG GPIO */

 PTH GPIO */

 PTJ GPIO */

 PTK GPIO */

 PTL GPIO */

 PTM GPIO */

 PTP GPIO */

 PTR GPIO */

 PTS GPIO */

 PTT GPIO */

 PTU GPIO */

 PTV GPIO */

 PTA FN */

 PTB FN */

 PTC FN */

 PTD FN */

 PTE FN */

 PTF FN */

 PTG FN */

 PTH FN */

 PTJ FN */

 PTK FN */

 PTL FN */

 PTM FN */

 PTP FN */

 PTR FN */

 PTS FN */

 PTT FN */

 PTU FN */

 PTV FN */

 PTA */

 PTB */

 PTC */

 PTD */

 PTE */

 PTF */

 PTG */

 PTH */

 PTJ */

 PTK */

 PTL */

 PTM */

 PTP */

 PTR */

 PTS */

 PTT */

 PTU */

 PTV */

 BSC */

 LCDC */

 AFEIF */

 IIC */

 DAC */

 ADC */

 USB */

 INTC */

 PCC */

 HUDI */

 DMAC */

 SIOF0 */

 SIOF1 */

 SCIF0 */

 SCIF1 */

 TPU */

 SIM */

 MMC */

 SYSC */

 SPDX-License-Identifier: GPL-2.0

/*

 * SH7203 Pinmux

 *

 *  Copyright (C) 2008  Magnus Damm

 PA */

 PB */

 PC */

 PD */

 PE */

 PF */

 PA */

 PB */

 PC */

 PD */

 PE */

 PF */

 INTC */

 CAN */

 IIC3 */

 DMAC */

 ADC */

 BSC */

 TMU */

 SSU */

 SCIF */

 SSI */

 FLCTL */

 LCDC */

 SPDX-License-Identifier: GPL-2.0

/*

 * R8A77470 processor support - PFC hardware block.

 *

 * Copyright (C) 2018 Renesas Electronics Corp.

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 GPSR5 */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 IPSR12 */

 IPSR13 */

 IPSR14 */

 IPSR15 */

 IPSR16 */

 IPSR17 */

 MOD_SEL0 */

 MOD_SEL1 */

 MOD_SEL2 */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 IPSR12 */

 IPSR13 */

 IPSR14 */

 IPSR15 */

 IPSR16 */

 IPSR17 */

 PINMUX_DATA(GP_M_N_DATA, GP_M_N_FN...), */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 IPSR12 */

 IPSR13 */

 IPSR14 */

 IPSR15 */

 IPSR16 */

 IPSR17 */

/*

 * Pins not associated with a GPIO port.

 - AVB -------------------------------------------------------------------- */

 - DU --------------------------------------------------------------------- */

 R[7:2], G[7:2], B[7:2] */

 R[7:0], G[7:0], B[7:0] */

 DOTCLKOUT0 */

 DOTCLKOUT1 */

 CLKIN */

 EXVSYNC/VSYNC, EXHSYNC/HSYNC */

 EXODDF/ODDF/DISP/CDE */

 CDE */

 DISP */

 R[7:2], G[7:2], B[7:2] */

 R[7:0], G[7:0], B[7:0] */

 DOTCLKOUT0 */

 DOTCLKOUT1 */

 DOTCLKIN */

 EXVSYNC/VSYNC, EXHSYNC/HSYNC */

 EXODDF/ODDF/DISP/CDE */

 CDE */

 DISP */

 - I2C0 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C1 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C2 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C3 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C4 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - MMC -------------------------------------------------------------------- */

 D0 */

 D[0:3] */

 D[0:3] */

 CLK, CMD */

 - QSPI ------------------------------------------------------------------- */

 SPCLK, SSL */

 MOSI_IO0, MISO_IO1 */

 MOSI_IO0, MISO_IO1, IO2, IO3 */

 SPCLK, SSL */

 MOSI_IO0, MISO_IO1 */

 MOSI_IO0, MISO_IO1, IO2, IO3 */

 - SCIF0 ------------------------------------------------------------------ */

 RX, TX */

 RX, TX */

 RX, TX */

 RX, TX */

 - SCIF1 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 RX, TX */

 - SCIF2 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 RX, TX */

 - SCIF3 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 RX, TX */

 - SCIF4 ------------------------------------------------------------------ */

 RX, TX */

 RX, TX */

 RX, TX */

 RX, TX */

 RX, TX */

 - SCIF5 ------------------------------------------------------------------ */

 RX, TX */

 RX, TX */

 RX, TX */

 RX, TX */

 RX, TX */

 RX, TX */

 - SCIF Clock ------------------------------------------------------------- */

 SCIF_CLK */

 SCIF_CLK */

 - SDHI0 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI1 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI2 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - USB0 ------------------------------------------------------------------- */

 PWEN */

 OVC */

 - USB1 ------------------------------------------------------------------- */

 PWEN */

 OVC */

 - VIN0 ------------------------------------------------------------------- */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 HSYNC */

 VSYNC */

 - VIN1 ------------------------------------------------------------------- */

 HSYNC */

 VSYNC */

 IP0_31_28 [4] */

 IP0_27_24 [4] */

 IP0_23_20 [4] */

 IP0_19_16 [4] */

 IP0_15_12 [4] */

 IP0_11_8 [4] */

 IP0_7_4 [4] */

 IP0_3_0 [4] */

 IP1_31_28 [4] */

 IP1_27_24 [4] */

 IP1_23_20 [4] */

 IP1_19_16 [4] */

 IP1_15_12 [4] */

 IP1_11_8 [4] */

 IP1_7_4 [4] */

 IP1_3_0 [4] */

 IP2_31_28 [4] */

 IP2_27_24 [4] */

 IP2_23_20 [4] */

 IP2_19_16 [4] */

 IP2_15_12 [4] */

 IP2_11_8 [4] */

 IP2_7_4 [4] */

 IP2_3_0 [4] */

 IP3_31_28 [4] */

 IP3_27_24 [4] */

 IP3_23_20 [4] */

 IP3_19_16 [4] */

 IP3_15_12 [4] */

 IP3_11_8 [4] */

 IP3_7_4 [4] */

 IP3_3_0 [4] */

 IP4_31_28 [4] */

 IP4_27_24 [4] */

 IP4_23_20 [4] */

 IP4_19_16 [4] */

 IP4_15_12 [4] */

 IP4_11_8 [4] */

 IP4_7_4 [4] */

 IP4_3_0 [4] */

 IP5_31_28 [4] */

 IP5_27_24 [4] */

 IP5_23_20 [4] */

 IP5_19_16 [4] */

 IP5_15_12 [4] */

 IP5_11_8 [4] */

 IP5_7_4 [4] */

 IP5_3_0 [4] */

 IP6_31_28 [4] */

 IP6_27_24 [4] */

 IP6_23_20 [4] */

 IP6_19_16 [4] */

 IP6_15_12 [4] */

 IP6_11_8 [4] */

 IP6_7_4 [4] */

 IP6_3_0 [4] */

 IP7_31_28 [4] */

 IP7_27_24 [4] */

 IP7_23_20 [4] */

 IP7_19_16 [4] */

 IP7_15_12 [4] */

 IP7_11_8 [4] */

 IP7_7_4 [4] */

 IP7_3_0 [4] */

 IP8_31_28 [4] */

 IP8_27_24 [4] */

 IP8_23_20 [4] */

 IP8_19_16 [4] */

 IP8_15_12 [4] */

 IP8_11_8 [4] */

 IP8_7_4 [4] */

 IP8_3_0 [4] */

 IP9_31_28 [4] */

 IP9_27_24 [4] */

 IP9_23_20 [4] */

 IP9_19_16 [4] */

 IP9_15_12 [4] */

 IP9_11_8 [4] */

 IP9_7_4 [4] */

 IP9_3_0 [4] */

 IP10_31_28 [4] */

 IP10_27_24 [4] */

 IP10_23_20 [4] */

 IP10_19_16 [4] */

 IP10_15_12 [4] */

 IP10_11_8 [4] */

 IP10_7_4 [4] */

 IP10_3_0 [4] */

 IP11_31_28 [4] */

 IP11_27_24 [4] */

 IP11_23_20 [4] */

 IP11_19_16 [4] */

 IP11_15_12 [4] */

 IP11_11_8 [4] */

 IP11_7_4 [4] */

 IP11_3_0 [4] */

 IP12_31_28 [4] */

 IP12_27_24 [4] */

 IP12_23_20 [4] */

 IP12_19_16 [4] */

 IP12_15_12 [4] */

 IP12_11_8 [4] */

 IP12_7_4 [4] */

 IP12_3_0 [4] */

 IP13_31_28 [4] */

 IP13_27_24 [4] */

 IP13_23_20 [4] */

 IP13_19_16 [4] */

 IP13_15_12 [4] */

 IP13_11_8 [4] */

 IP13_7_4 [4] */

 IP13_3_0 [4] */

 IP14_31_28 [4] */

 IP14_27_24 [4] */

 IP14_23_20 [4] */

 IP14_19_16 [4] */

 IP14_15_12 [4] */

 IP14_11_8 [4] */

 IP14_7_4 [4] */

 IP14_3_0 [4] */

 IP15_31_28 [4] */

 IP15_27_24 [4] */

 IP15_23_20 [4] */

 IP15_19_16 [4] */

 IP15_15_12 [4] */

 IP15_11_8 [4] */

 IP15_7_4 [4] */

 IP15_3_0 [4] */

 IP16_31_28 [4] */

 IP16_27_24 [4] */

 IP16_23_20 [4] */

 IP16_19_16 [4] */

 IP16_15_12 [4] */

 IP16_11_8 [4] */

 IP16_7_4 [4] */

 IP16_3_0 [4] */

 IP17_31_28 [4] */

 IP17_27_24 [4] */

 IP17_23_20 [4] */

 IP17_19_16 [4] */

 IP17_15_12 [4] */

 IP17_11_8 [4] */

 IP17_7_4 [4] */

 IP17_3_0 [4] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 SEL_ADGA [2] */

 RESERVED [1] */

 RESERVED [1] */

 SEL_CANCLK [2] */

 SEL_CAN1 [2] */

 SEL_CAN0 [2] */

 RESERVED [1] */

 SEL_I2C04 [3] */

 SEL_I2C03 [3] */

 RESERVED [1] */

 SEL_I2C02 [2] */

 SEL_I2C01 [3] */

 SEL_I2C00 [3] */

 SEL_AVB [1] */

 SEL_SCIFCLK [1] */

 SEL_SCIF5 [3] */

 SEL_SCIF4 [3] */

 SEL_SCIF3 [2] */

 SEL_SCIF2 [2] */

 SEL_SCIF2_CLK [1] */

 SEL_SCIF1 [2] */

 SEL_SCIF0 [2] */

 SEL_MSIOF2 [2] */

 RESERVED [1] */

 SEL_MSIOF1 [1] */

 RESERVED [1] */

 SEL_MSIOF0 [1] */

 SEL_RCN [1] */

 RESERVED [2] */

 SEL_TMU2 [1] */

 SEL_TMU1 [1] */

 RESERVED [2] */

 SEL_HSCIF1 [2] */

 SEL_HSCIF0 [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 SEL_ADGB [2] */

 SEL_ADGC [2] */

 SEL_SSI9 [2] */

 SEL_SSI8 [2] */

 SEL_SSI7 [2] */

 SEL_SSI6 [2] */

 SEL_SSI5 [2] */

 SEL_SSI4 [2] */

 SEL_SSI2 [2] */

 SEL_SSI1 [2] */

 SEL_SSI0 [2] */

 PUPR0 pull-up pins */

 D0 */

 MMC0_D7 */

 MMC0_D6 */

 MMC0_D5 */

 MMC0_D4 */

 MMC0_D3 */

 MMC0_D2 */

 MMC0_D1 */

 MMC0_D0 */

 MMC0_CMD */

 MMC0_CLK */

 SD0_WP */

 SD0_CD */

 SD0_DAT3 */

 SD0_DAT2 */

 SD0_DAT1 */

 SD0_DAT0 */

 SD0_CMD */

 SD0_CLK */

 CLKOUT */

 NMI */

 USB1_OVC */

 USB1_PWEN */

 USB0_OVC */

 USB0_PWEN */

 TDO */

 TDI */

 TMS */

 TCK */

 TRST# */

 PRESETOUT# */

 PUPR0 pull-down pins */

 ASEBRK#/ACK */

 DU0_DG1 */

 DU0_DG0 */

 DU0_DR7 */

 DU0_DR6 */

 DU0_DR5 */

 DU0_DR4 */

 DU0_DR3 */

 DU0_DR2 */

 DU0_DR1 */

 DU0_DR0 */

 EX_WAIT0 */

 QSPI0_SSL */

 QSPI0_IO3 */

 QSPI0_IO2 */

 QSPI0_MISO/QSPI0_IO1 */

 QSPI0_MOSI/QSPI0_IO0 */

 QSPI0_SPCLK */

 D15 */

 D14 */

 D13 */

 D12 */

 D11 */

 D10 */

 D9 */

 D8 */

 D7 */

 D6 */

 D5 */

 D4 */

 D3 */

 D2 */

 D1 */

 VI1_CLKENB */

 VI1_DATA7 */

 VI1_DATA6 */

 VI1_DATA5 */

 VI1_DATA4 */

 VI1_DATA3 */

 VI1_DATA2 */

 VI1_DATA1 */

 VI1_DATA0 */

 VI1_CLK */

 DU0_CDE */

 DU0_DISP */

 DU0_EXODDF/DU0_ODDF_DISP_CDE */

 DU0_EXVSYNC/DU0_VSYNC */

 DU0_EXHSYNC/DU0_HSYNC */

 DU0_DOTCLKOUT1 */

 DU0_DOTCLKOUT0 */

 DU0_DOTCLKIN */

 DU0_DB7 */

 DU0_DB6 */

 DU0_DB5 */

 DU0_DB4 */

 DU0_DB3 */

 DU0_DB2 */

 DU0_DB1 */

 DU0_DB0 */

 DU0_DG7 */

 DU0_DG6 */

 DU0_DG5 */

 DU0_DG4 */

 DU0_DG3 */

 DU0_DG2 */

 SD2_WP */

 SD2_CD */

 SD2_DAT3 */

 SD2_DAT2 */

 SD2_DAT1 */

 SD2_DAT0 */

 SD2_CMD */

 SD2_CLK */

 HRTS1#_A */

 HCTS1#_A */

 HTX1_A */

 HRX1_A */

 MSIOF0_SS2_A */

 MSIOF0_SS1_A */

 MSIOF0_SYNC_A */

 MSIOF0_SCK_A */

 MSIOF0_TXD_A */

 MSIOF0_RXD_A */

 SDA1_A */

 SCL1_A */

 SDA0_A */

 SCL0_A */

 AVB_TXD5 */

 AVB_TXD4 */

 AVB_TXD3 */

 VI1_DATA11 */

 VI1_DATA10 */

 VI1_DATA9 */

 VI1_DATA8 */

 VI1_VSYNC# */

 VI1_HSYNC# */

 VI1_FIELD */

 SSI_SDATA9_A */

 SSI_WS9_A */

 SSI_SCK9_A */

 SSI_SDATA2_A */

 SSI_WS2_A */

 SSI_SCK2_A */

 SSI_SDATA1_A */

 SSI_WS1_A */

 SSI_SDATA8_A */

 SSI_SCK1_A */

 SSI_SDATA4_A */

 SSI_WS4_A */

 SSI_SCK4_A */

 SSI_SDATA3 */

 SSI_WS34 */

 SSI_SCK34 */

 SSI_SDATA0_A */

 SSI_WS0129_A */

 SSI_SCK0129_A */

 SSI_SDATA7_A */

 SSI_WS78_A */

 SSI_SCK78_A */

 SSI_SDATA6_A */

 SSI_WS6_A */

 SSI_SCK6_A */

 SSI_SDATA5_A */

 SSI_WS5_A */

 SSI_SCK5_A */

 SDA2_A */

 SCL2_A */

 TX3_A */

 RX3_A */

 AUDIO_CLKOUT_A */

 AUDIO_CLKC_A */

 AUDIO_CLKB_A */

 AUDIO_CLKA_A */

 sentinel */ }

 PMMR */

 SPDX-License-Identifier: GPL-2.0

/*

 * SH7264 Pinmux

 *

 *  Copyright (C) 2012  Renesas Electronics Europe Ltd

 Port A */

 Port B */

 Port C */

 Port D */

 Port E */

 Port F */

 Port G */

 Port H */

	/* NOTE - Port H does not have a Data Register, but PH Data is

 Port I - not on device */

 Port J */

 Port K */

 Port A */

 Port B */

 Port C */

 Port D */

 Port E */

 Port F */

 Port G */

 Port H - Port H does not have a Data Register */

 Port I - not on device */

 Port J */

 Port K */

 Port A */

 Port B */

 Port C */

 Port D */

 Port E */

 Port F */

 Port G */

 Port H - Port H does not have a Data Register */

 Port I - not on device */

 Port J */

 Port K */

 Port A */

 Port B */

 Port C */

 Port D */

 Port E */

 Port F */

 Port G */

 Port H */

 Port I - not on device */

 Port J */

 Port K */

 Port A */

 Port B */

 Port C */

 Port D */

 Port E */

 Port F */

 Port G */

 Port H */

 Port I - not on device */

 Port J */

 Port K */

 DMAC */

 ADC */

 BSC */

 TMU */

 SCIF */

 RSPI */

 IIC3 */

 SSI */

 SIOF */ 
 SPDIF */ 
 NANDFMC */ 
 VDC3 */

 Port A */

 Port B */

 Port C */

 Port D */

 Port E */

 Port F */

 Port G */

 Port H */

 Port I - not on device */

 Port J */

 Port K */

 Port A */

 Port B */

 Port C */

 Port D */

 Port E */

 Port F */

 Port G */

 Port H - Port H does not have a Data Register */

 Port I - not on device */

 Port J */

 Port K */

 INTC */

 WDT */

 CAN */

 DMAC */

 ADC */

 BSCh */

 TMU */

 SCIF */

 RSPI */

 IIC3 */

 SSI */

 SIOF */ 
 SPDIF */ 
 NANDFMC */ 
 VDC3 */

 SPDX-License-Identifier: GPL-2.0

 PTA */

 PTB */

 PTC */

 PTD */

 PTE */

 PTF */

 PTG */

 PTH */

 PTJ */

 PTK */

 PTL */

 PTM */

 PTN */

 PTQ */

 PTR */

 PTS */

 PTT */

 PTU */

 PTV */

 PTW */

 PTX */

 PTY */

 PTZ */

 SCIF0 */

 SCIF1 */

 SCIF2 */

 SIO */

 CEU */

 LCDC */

 Main LCD */

 Main LCD - RGB Mode */

 Main LCD - SYS Mode */

 Sub LCD - SYS Mode */

 BSC */

 SBSC */

 IRQ */

 SDHI */

 SIU - Port A */

 SIU - Port B */

 AUD */

 DMAC */

 VOU */

 CPG */

 SIOF0 */

 SIOF1 */

 SIM */

 TSIF */

 IRDA */

 TPU */

 FLCTL */

 KEYSC */

 PTA */

 PTB */

 PTC */

 PTD */

 PTE */

 PTF */

 PTG */

 PTH */

 PTJ */

 PTK */

 PTL */

 PTM */

 PTN */

 PTQ */

 PTR */

 PTS */

 PTT */

 PTU */

 PTV */

 PTW */

 PTX */

 PTY */

 PTZ */

 SCIF0 */

 SCIF1 */

 SCIF2 */

 SIO */

 CEU */

 LCDC */

 Main LCD */

 Main LCD - RGB Mode */

 Main LCD - SYS Mode */

 Sub LCD - SYS Mode */

 BSC */

 SBSC */

 IRQ */

 SDHI */

 SIU - Port A */

 SIU - Port B */

 AUD */

 DMAC */

 VOU */

 CPG */

 SIOF0 */

 SIOF1 */

 SIM */

 TSIF */

 IRDA */

 TPU */

 FLCTL */

 KEYSC */

 SPDX-License-Identifier: GPL-2.0

/*

 * R8A77970 processor support - PFC hardware block.

 *

 * Copyright (C) 2016 Renesas Electronics Corp.

 * Copyright (C) 2017 Cogent Embedded, Inc. <source@cogentembedded.com>

 *

 * This file is based on the drivers/pinctrl/renesas/pfc-r8a7795.c

 *

 * R-Car Gen3 processor support - PFC hardware block.

 *

 * Copyright (C) 2015  Renesas Electronics Corporation

/*

 * F_() : just information

 * FM() : macro for FN_xxx / xxx_MARK

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 GPSR5 */

 IPSRx */		 1 */			 3 */		 5 */		
 MOD_SEL0 */		 1 */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

/*

 * Pins not associated with a GPIO port.

 - AVB0 ------------------------------------------------------------------- */

 AVB0_LINK */

 AVB0_MAGIC */

 AVB0_PHY_INT */

 AVB0_MDC, AVB0_MDIO */

	/*

	 * AVB0_TX_CTL, AVB0_TXC, AVB0_TD0, AVB0_TD1, AVB0_TD2, AVB0_TD3,

	 * AVB0_RX_CTL, AVB0_RXC, AVB0_RD0, AVB0_RD1, AVB0_RD2, AVB0_RD3

 AVB0_TXCREFCLK */

 AVB0_AVTP_PPS */

 AVB0_AVTP_CAPTURE */

 AVB0_AVTP_MATCH */

 - CANFD Clock ------------------------------------------------------------ */

 CANFD_CLK */

 CANFD_CLK */

 - CANFD0 ----------------------------------------------------------------- */

 TX, RX */

 TX, RX */

 - CANFD1 ----------------------------------------------------------------- */

 TX, RX */

 - DU --------------------------------------------------------------------- */

 R[7:2], G[7:2], B[7:2] */

 DOTCLKOUT */

 EXVSYNC/VSYNC, EXHSYNC/HSYNC */

 EXODDF/ODDF/DISP/CDE */

 CDE */

 DISP */

 - HSCIF0 ----------------------------------------------------------------- */

 HRX, HTX */

 HSCK */

 HRTS#, HCTS# */

 - HSCIF1 ----------------------------------------------------------------- */

 HRX, HTX */

 HSCK */

 HRTS#, HCTS# */

 - HSCIF2 ----------------------------------------------------------------- */

 HRX, HTX */

 HSCK */

 HRTS#, HCTS# */

 - HSCIF3 ----------------------------------------------------------------- */

 HRX, HTX */

 HSCK */

 HRTS#, HCTS# */

 - I2C0 ------------------------------------------------------------------- */

 SDA, SCL */

 - I2C1 ------------------------------------------------------------------- */

 SDA, SCL */

 - I2C2 ------------------------------------------------------------------- */

 SDA, SCL */

 - I2C3 ------------------------------------------------------------------- */

 SDA, SCL */

 SDA, SCL */

 - I2C4 ------------------------------------------------------------------- */

 SDA, SCL */

 - INTC-EX ---------------------------------------------------------------- */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 - MMC -------------------------------------------------------------------- */

 D0 */

 D[0:3] */

 D[0:7] */

 CLK, CMD */

 - MSIOF0 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF1 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF2 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF3 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - PWM0 ------------------------------------------------------------------- */

 - PWM1 ------------------------------------------------------------------- */

 - PWM2 ------------------------------------------------------------------- */

 - PWM3 ------------------------------------------------------------------- */

 - PWM4 ------------------------------------------------------------------- */

 - QSPI0 ------------------------------------------------------------------ */

 SPCLK, SSL */

 MOSI_IO0, MISO_IO1 */

 MOSI_IO0, MISO_IO1, IO2, IO3 */

 - QSPI1 ------------------------------------------------------------------ */

 SPCLK, SSL */

 MOSI_IO0, MISO_IO1 */

 MOSI_IO0, MISO_IO1, IO2, IO3 */

 - RPC -------------------------------------------------------------------- */

 Octal-SPI flash: C/SCLK */

 HyperFlash: CK, CK# */

 Octal-SPI flash: S#/CS, DQS */

 HyperFlash: CS#, RDS */

 DQ[0:7] */

 RPC_RESET# */

 RPC_INT# */

 RPC_WP# */

 - SCIF Clock ------------------------------------------------------------- */

 SCIF_CLK */

 SCIF_CLK */

 - SCIF0 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS#, CTS# */

 - SCIF1 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS#, CTS# */

 RX, TX */

 - SCIF3 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS#, CTS# */

 - SCIF4 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS#, CTS# */

 - TMU -------------------------------------------------------------------- */

 TCLK1 */

 TCLK1 */

 TCLK2 */

 TCLK2 */

 - VIN0 ------------------------------------------------------------------- */

 HSYNC#, VSYNC# */

 FIELD */

 CLKENB */

 CLK */

 - VIN1 ------------------------------------------------------------------- */

 HSYNC#, VSYNC# */

 FIELD */

 CLKENB */

 CLK */

 RESERVED 31, 30, 29, 28 */

 RESERVED 27, 26, 25, 24 */

 RESERVED 23, 22, 21, 20 */

 RESERVED 19, 18, 17, 16 */

 RESERVED 15, 14, 13, 12 */

 sentinel */ },

 DU_DR2 */

 DU_DR3 */

 DU_DR4 */

 DU_DR5 */

 DU_DR6 */

 DU_DR7 */

 DU_DG2 */

 DU_DG3 */

 DU_DG4 */

 DU_DG5 */

 DU_DG6 */

 DU_DG7 */

 DU_DB2 */

 DU_DB3 */

 DU_DB4 */

 DU_DB5 */

 DU_DB6 */

 DU_DB7 */

 DU_DOTCLKOUT */

 DU_EXHSYNC/DU_HSYNC */

 DU_EXVSYNC/DU_VSYNC */

 DU_EXODDF/DU_ODDF/DISP/CDE */

 DU_DOTCLKIN */

 PRESETOUT# */

 EXTALR */

 FSCLKST# */

 IRQ0 */

 TRST# */

 TCK */

 TMS */

 TDI */

 VI0_CLK */

 VI0_CLKENB */

 VI0_HSYNC# */

 VI0_VSYNC# */

 VI0_DATA0 */

 VI0_DATA1 */

 VI0_DATA2 */

 VI0_DATA3 */

 VI0_DATA4 */

 VI0_DATA5 */

 VI0_DATA6 */

 VI0_DATA7 */

 VI0_DATA8 */

 VI0_DATA9 */

 VI0_DATA10 */

 VI0_DATA11 */

 VI0_FIELD */

 VI1_CLK */

 VI1_CLKENB */

 VI1_HSYNC# */

 VI1_VSYNC# */

 VI1_DATA0 */

 VI1_DATA1 */

 VI1_DATA2 */

 VI1_DATA3 */

 VI1_DATA4 */

 VI1_DATA5 */

 VI1_DATA6 */

 VI1_DATA7 */

 VI1_DATA8 */

 VI1_DATA9 */

 VI1_DATA10 */

 VI1_DATA11 */

 VI1_FIELD */

 SCL0 */

 SDA0 */

 SCL1 */

 SDA1 */

 SCL2 */

 SDA2 */

 AVB0_RX_CTL */

 AVB0_RXC */

 AVB0_RD0 */

 AVB0_RD1 */

 AVB0_RD2 */

 AVB0_RD3 */

 AVB0_TX_CTL */

 AVB0_TXC */

 AVB0_TD0 */

 AVB0_TD1 */

 AVB0_TD2 */

 AVB0_TD3 */

 AVB0_TXCREFCLK */

 AVB0_MDIO */

 AVB0_MDC */

 AVB0_MAGIC */

 AVB0_PHY_INT */

 AVB0_LINK */

 AVB0_AVTP_MATCH */

 AVB0_AVTP_CAPTURE */

 CANFD0_TX_A */

 CANFD0_RX_A */

 CANFD1_TX */

 CANFD1_RX */

 CANFD_CLK */

 QSPI0_SPCLK */

 QSPI0_MOSI_IO0 */

 QSPI0_MISO_IO1 */

 QSPI0_IO2 */

 QSPI0_IO3 */

 QSPI0_SSL */

 QSPI1_SPCLK */

 QSPI1_MOSI_IO0 */

 QSPI1_MISO_IO1 */

 QSPI1_IO2 */

 QSPI1_IO3 */

 QSPI1_SSL */

 RPC_RESET# */

 RPC_WP# */

 RPC_INT# */

 DIGRF_CLKIN */

 DIGRF_CLKOUT */

 sentinel */ }

 PMMR */

 SPDX-License-Identifier: GPL-2.0

/*

 * R8A77965 processor support - PFC hardware block.

 *

 * Copyright (C) 2018 Jacopo Mondi <jacopo+renesas@jmondi.org>

 * Copyright (C) 2016-2019 Renesas Electronics Corp.

 *

 * This file is based on the drivers/pinctrl/renesas/pfc-r8a7796.c

 *

 * R-Car Gen3 processor support - PFC hardware block.

 *

 * Copyright (C) 2015  Renesas Electronics Corporation

/*

 * F_() : just information

 * FM() : macro for FN_xxx / xxx_MARK

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 GPSR5 */

 GPSR6 */

 GPSR7 */

 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 MOD_SEL0 */			 1 */			 3 */			 5 */			 7 */

 MOD_SEL1 */			 1 */			 3 */			 5 */			 7 */

 MOD_SEL2 */			 1 */			 3 */			 5 */			 7 */

/*

 * These pins are not able to be muxed but have other properties

 * that can be set, such as drive-strength or pull-up/pull-down enable.

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 IPSR12 */

 IPSR13 */

 IPSR14 */

 IPSR15 */

 IPSR16 */

 IPSR17 */

 IPSR18 */

/*

 * Static pins can not be muxed between different functions but

 * still need mark entries in the pinmux list. Add each static

 * pin to the list without an associated function. The sh-pfc

 * core will do the right thing and skip trying to mux the pin

 * while still applying configuration to it.

/*

 * Pins not associated with a GPIO port.

 - AUDIO CLOCK ------------------------------------------------------------ */

 CLK A */

 CLK A */

 CLK A */

 CLK B */

 CLK B */

 CLK C */

 CLK C */

 CLKOUT */

 CLKOUT */

 CLKOUT */

 CLKOUT */

 CLKOUT1 */

 CLKOUT1 */

 CLKOUT2 */

 CLKOUT2 */

 CLKOUT3 */

 CLKOUT3 */

 - EtherAVB --------------------------------------------------------------- */

 AVB_LINK */

 AVB_MAGIC_ */

 AVB_PHY_INT */

 AVB_MDC, AVB_MDIO */

	/*

	 * AVB_TX_CTL, AVB_TXC, AVB_TD0,

	 * AVB_TD1, AVB_TD2, AVB_TD3,

	 * AVB_RX_CTL, AVB_RXC, AVB_RD0,

	 * AVB_RD1, AVB_RD2, AVB_RD3,

	 * AVB_TXCREFCLK

 AVB_AVTP_PPS */

 AVB_AVTP_MATCH_A */

 AVB_AVTP_CAPTURE_A */

  AVB_AVTP_MATCH_B */

 AVB_AVTP_CAPTURE_B */

 - CAN ------------------------------------------------------------------ */

 TX, RX */

 TX, RX */

 TX, RX */

 - CAN Clock -------------------------------------------------------------- */

 CLK */

 - CAN FD --------------------------------------------------------------- */

 TX, RX */

 TX, RX */

 TX, RX */

 - DRIF0 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 - DRIF1 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 - DRIF2 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 - DRIF3 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 CONFIG_PINCTRL_PFC_R8A77965 */

 - DU --------------------------------------------------------------------- */

 R[7:2], G[7:2], B[7:2] */

 R[7:0], G[7:0], B[7:0] */

 CLKOUT */

 CLKOUT */

 EXVSYNC/VSYNC, EXHSYNC/HSYNC */

 EXDISP/EXODDF/EXCDE */

 CDE */

 DISP */

 - HSCIF0 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 - HSCIF1 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 - HSCIF2 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 - HSCIF3 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 RX, TX */

 RX, TX */

 - HSCIF4 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 - I2C -------------------------------------------------------------------- */

 SCL, SDA */

 SDA, SCL */

 SDA, SCL */

 SDA, SCL */

 SDA, SCL */

 SCL, SDA */

 SCL, SDA */

 SDA, SCL */

 SDA, SCL */

 SDA, SCL */

 - INTC-EX ---------------------------------------------------------------- */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 - MLB+ ------------------------------------------------------------------- */

 CONFIG_PINCTRL_PFC_R8A77965 */

 - MSIOF0 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF1 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF2 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF3 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - PWM0 --------------------------------------------------------------------*/

 PWM */

 - PWM1 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM2 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM3 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM4 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM5 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM6 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - QSPI0 ------------------------------------------------------------------ */

 QSPI0_SPCLK, QSPI0_SSL */

 QSPI0_MOSI_IO0, QSPI0_MISO_IO1 */

 QSPI0_MOSI_IO0, QSPI0_MISO_IO1 */

 QSPI0_IO2, QSPI0_IO3 */

 - QSPI1 ------------------------------------------------------------------ */

 QSPI1_SPCLK, QSPI1_SSL */

 QSPI1_MOSI_IO0, QSPI1_MISO_IO1 */

 QSPI1_MOSI_IO0, QSPI1_MISO_IO1 */

 QSPI1_IO2, QSPI1_IO3 */

 - SATA --------------------------------------------------------------------*/

 DEVSLP */

 DEVSLP */

 - SCIF0 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 - SCIF1 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 - SCIF2 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 - SCIF3 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 - SCIF4 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 - SCIF5 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 - SCIF Clock ------------------------------------------------------------- */

 SCIF_CLK */

 SCIF_CLK */

 - SDHI0 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI1 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI2 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 D[0:7] */

 CLK, CMD */

 CD */

 CD */

 WP */

 WP */

 DS */

 - SDHI3 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 D[0:7] */

 CLK, CMD */

 CD */

 WP */

 DS */

 - SSI -------------------------------------------------------------------- */

 SDATA */

 SCK, WS */

 SDATA */

 SDATA */

 SCK, WS */

 SCK, WS */

 SDATA */

 SDATA */

 SCK, WS */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SDATA */

 SDATA */

 SCK, WS */

 SCK, WS */

 - TMU -------------------------------------------------------------------- */

 TCLK */

 TCLK */

 TCLK */

 TCLK */

 - TPU ------------------------------------------------------------------- */

 TPU0TO0 */

 TPU0TO1 */

 TPU0TO2 */

 TPU0TO3 */

 - USB0 ------------------------------------------------------------------- */

 PWEN, OVC */

 - USB1 ------------------------------------------------------------------- */

 PWEN, OVC */

 - USB30 ------------------------------------------------------------------ */

 PWEN, OVC */

 - VIN4 ------------------------------------------------------------------- */

 VSYNC_N, HSYNC_N */

 - VIN5 ------------------------------------------------------------------- */

 VSYNC_N, HSYNC_N */

 Deprecated */

 CONFIG_PINCTRL_PFC_R8A77965 */

 Deprecated, please use "avb_mdio" instead */

 CONFIG_PINCTRL_PFC_R8A77965 */

 CONFIG_PINCTRL_PFC_R8A77965 */

 CONFIG_PINCTRL_PFC_R8A77965 */

 IP7_15_12 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_31_28 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_27_24 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_23_20 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_19_16 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_15_12 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_11_8  */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 RESERVED 15 */

 RESERVED 2, 1, 0 */

 RESERVED 8, 7 */

 RESERVED 16 */

 RESERVED 15, 14, 13, 12 */

 RESERVED 11, 10, 9, 8 */

 RESERVED 7, 6, 5, 4 */

 RESERVED 3, 2, 1 */

 QSPI0_SPCLK */

 QSPI0_MOSI_IO0 */

 QSPI0_MISO_IO1 */

 QSPI0_IO2 */

 QSPI0_IO3 */

 QSPI0_SSL */

 QSPI1_SPCLK */

 QSPI1_MOSI_IO0 */

 QSPI1_MISO_IO1 */

 QSPI1_IO2 */

 QSPI1_IO3 */

 QSPI1_SSL */

 RPC_INT# */

 RPC_WP# */

 RPC_RESET# */

 AVB_RX_CTL */

 AVB_RXC */

 AVB_RD0 */

 AVB_RD1 */

 AVB_RD2 */

 AVB_RD3 */

 AVB_TX_CTL */

 AVB_TXC */

 AVB_TD0 */

 AVB_TD1 */

 AVB_TD2 */

 AVB_TD3 */

 AVB_TXCREFCLK */

 AVB_MDIO */

 AVB_MDC */

 AVB_MAGIC */

 AVB_PHY_INT */

 AVB_LINK */

 AVB_AVTP_MATCH */

 AVB_AVTP_CAPTURE */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 PWM0 */

 PWM1 */

 PWM2 */

 A0 */

 A1 */

 A2 */

 A3 */

 A4 */

 A5 */

 A6 */

 A7 */

 A8 */

 A9 */

 A10 */

 A11 */

 A12 */

 A13 */

 A14 */

 A15 */

 A16 */

 A17 */

 A18 */

 A19 */

 CLKOUT */

 CS0 */

 CS1_A26 */

 BS */

 RD */

 RD_WR */

 WE0 */

 WE1 */

 EX_WAIT0 */

 PRESETOUT# */

 D0 */

 D1 */

 D2 */

 D3 */

 D4 */

 D5 */

 D6 */

 D7 */

 D8 */

 D9 */

 D10 */

 D11 */

 D12 */

 D13 */

 D14 */

 D15 */

 AVS1 */

 AVS2 */

 GP7_02 */

 GP7_03 */

 DU_DOTCLKIN0 */

 DU_DOTCLKIN1 */

 DU_DOTCLKIN3 */

 FSCLKST */

 TMS */

 TDO */

 ASEBRK */

 SD0_CLK */

 SD0_CMD */

 SD0_DAT0 */

 SD0_DAT1 */

 SD0_DAT2 */

 SD0_DAT3 */

 SD1_CLK */

 SD1_CMD */

 SD1_DAT0 */

 SD1_DAT1 */

 SD1_DAT2 */

 SD1_DAT3 */

 SD2_CLK */

 SD2_CMD */

 SD2_DAT0 */

 SD2_DAT1 */

 SD2_DAT2 */

 SD2_DAT3 */

 SD2_DS */

 SD3_CLK */

 SD3_CMD */

 SD3_DAT0 */

 SD3_DAT1 */

 SD3_DAT2 */

 SD3_DAT3 */

 SD3_DAT4 */

 SD3_DAT5 */

 SD3_DAT6 */

 SD3_DAT7 */

 SD3_DS */

 SD0_CD */

 SD0_WP */

 SD1_CD */

 SD1_WP */

 SCK0 */

 RX0 */

 TX0 */

 CTS0 */

 RTS0 */

 RX1 */

 TX1 */

 CTS1 */

 RTS1 */

 SCK2 */

 TX2 */

 RX2 */

 HSCK0 */

 HRX0 */

 HTX0 */

 HCTS0 */

 HRTS0 */

 MSIOF0_SCK */

 MSIOF0_SYNC */

 MSIOF0_SS1 */

 MSIOF0_TXD */

 MSIOF0_SS2 */

 MSIOF0_RXD */

 MLB_CLK */

 MLB_SIG */

 MLB_DAT */

 MLB_REF */

 SSI_SCK01239 */

 SSI_WS01239 */

 SSI_SDATA0 */

 SSI_SDATA1 */

 SSI_SDATA2 */

 SSI_SCK349 */

 SSI_WS349 */

 SSI_SDATA3 */

 SSI_SCK4 */

 SSI_WS4 */

 SSI_SDATA4 */

 SSI_SCK5 */

 SSI_WS5 */

 SSI_SDATA5 */

 SSI_SCK6 */

 SSI_WS6 */

 SSI_SDATA6 */

 SSI_SCK78 */

 SSI_WS78 */

 SSI_SDATA7 */

 SSI_SDATA8 */

 SSI_SDATA9 */

 AUDIO_CLKA */

 AUDIO_CLKB */

 USB0_PWEN */

 USB0_OVC */

 USB1_PWEN */

 USB1_OVC */

 USB30_PWEN */

 USB30_OVC */

 GP6_30 */

 GP6_31 */

 sentinel */ },

 QSPI0_SPCLK */

 QSPI0_MOSI_IO0 */

 QSPI0_MISO_IO1 */

 QSPI0_IO2 */

 QSPI0_IO3 */

 QSPI0_SSL */

 QSPI1_SPCLK */

 QSPI1_MOSI_IO0 */

 QSPI1_MISO_IO1 */

 QSPI1_IO2 */

 QSPI1_IO3 */

 QSPI1_SSL */

 RPC_INT# */

 RPC_WP# */

 RPC_RESET# */

 AVB_RX_CTL */

 AVB_RXC */

 AVB_RD0 */

 AVB_RD1 */

 AVB_RD2 */

 AVB_RD3 */

 AVB_TX_CTL */

 AVB_TXC */

 AVB_TD0 */

 AVB_TD1 */

 AVB_TD2 */

 AVB_TD3 */

 AVB_TXCREFCLK */

 AVB_MDIO */

 AVB_MDC */

 AVB_MAGIC */

 AVB_PHY_INT */

 AVB_LINK */

 AVB_AVTP_MATCH_A */

 AVB_AVTP_CAPTURE_A */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 PWM0 */

 PWM1_A */

 PWM2_A */

 A0 */

 A1 */

 A2 */

 A3 */

 A4 */

 A5 */

 A6 */

 A7 */

 A8 */

 A9 */

 A10 */

 A11 */

 A12 */

 A13 */

 A14 */

 A15 */

 A16 */

 A17 */

 A18 */

 A19 */

 CLKOUT */

 CS0_N */

 CS1_N */

 BS_N */

 RD_N */

 RD_WR_N */

 WE0_N */

 WE1_N */

 EX_WAIT0_A */

 PRESETOUT# */

 D0 */

 D1 */

 D2 */

 D3 */

 D4 */

 D5 */

 D6 */

 D7 */

 D8 */

 D9 */

 D10 */

 D11 */

 D12 */

 D13 */

 D14 */

 D15 */

 AVS1 */

 AVS2 */

 GP7_02 */

 GP7_03 */

 DU_DOTCLKIN0 */

 DU_DOTCLKIN1 */

 DU_DOTCLKIN3 */

 FSCLKST */

 EXTALR*/

 TRST# */

 TCK */

 TMS */

 TDI */

 ASEBRK */

 SD0_CLK */

 SD0_CMD */

 SD0_DAT0 */

 SD0_DAT1 */

 SD0_DAT2 */

 SD0_DAT3 */

 SD1_CLK */

 SD1_CMD */

 SD1_DAT0 */

 SD1_DAT1 */

 SD1_DAT2 */

 SD1_DAT3 */

 SD2_CLK */

 SD2_CMD */

 SD2_DAT0 */

 SD2_DAT1 */

 SD2_DAT2 */

 SD2_DAT3 */

 SD2_DS */

 SD3_CLK */

 SD3_CMD */

 SD3_DAT0 */

 SD3_DAT1 */

 SD3_DAT2 */

 SD3_DAT3 */

 SD3_DAT4 */

 SD3_DAT5 */

 SD3_DAT6 */

 SD3_DAT7 */

 SD3_DS */

 SD0_CD */

 SD0_WP */

 SD1_CD */

 SD1_WP */

 SCK0 */

 RX0 */

 TX0 */

 CTS0_N */

 RTS0_N */

 RX1_A */

 TX1_A */

 CTS1_N */

 RTS1_N */

 SCK2 */

 TX2_A */

 RX2_A */

 HSCK0 */

 HRX0 */

 HTX0 */

 HCTS0_N */

 HRTS0_N */

 MSIOF0_SCK */

 MSIOF0_SYNC */

 MSIOF0_SS1 */

 MSIOF0_TXD */

 MSIOF0_SS2 */

 MSIOF0_RXD */

 MLB_CLK */

 MLB_SIG */

 MLB_DAT */

 MLB_REF */

 SSI_SCK01239 */

 SSI_WS01239 */

 SSI_SDATA0 */

 SSI_SDATA1_A */

 SSI_SDATA2_A */

 SSI_SCK349 */

 SSI_WS349 */

 SSI_SDATA3 */

 SSI_SCK4 */

 SSI_WS4 */

 SSI_SDATA4 */

 SSI_SCK5 */

 SSI_WS5 */

 SSI_SDATA5 */

 SSI_SCK6 */

 SSI_WS6 */

 SSI_SDATA6 */

 SSI_SCK78 */

 SSI_WS78 */

 SSI_SDATA7 */

 SSI_SDATA8 */

 SSI_SDATA9_A */

 AUDIO_CLKA_A */

 AUDIO_CLKB_B */

 USB0_PWEN */

 USB0_OVC */

 USB1_PWEN */

 USB1_OVC */

 USB30_PWEN */

 USB30_OVC */

 GP6_30 */

 GP6_31 */

 sentinel */ },

 PMMR */

 PMMR */

 SPDX-License-Identifier: GPL-2.0

/*

 * SH7734 processor support - PFC hardware block

 *

 * Copyright (C) 2012  Renesas Solutions Corp.

 * Copyright (C) 2012  Nobuhiro Iwamatsu <nobuhiro.iwamatsu.yj@renesas.com>

 GP_0_0_DATA -> GP_5_11_DATA */

 GP_0_0_IN -> GP_5_11_IN */

 GP_0_0_OUT -> GP_5_11_OUT */

 GP_0_0_FN -> GP_5_11_FN */

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 Need check*/

 GPSR5 */

 10 */

 11 */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 MOD_SEL1 */

 MOD_SEL2 */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 PINMUX_DATA(GP_M_N_DATA, GP_M_N_FN...), */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSE10 */

 IPSR11 */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 31 - 28 */

 27 - 24 */

 23 - 20 */

 19 - 16 */

 15 - 12 */

 9 - 6 */

 5, 4 */

 IP0_31_30 [2] */

 IP0_29_28 [2] */

 IP0_27_26 [2] */

 IP0_25_24 [2] */

 IP0_23_22 [2] */

 IP0_21_20 [2] */

 IP0_19_18 [2] */

 IP0_17_16 [2] */

 IP0_15_14 [2] */

 IP0_13_12 [2] */

 IP0_11_10 [2] */

 IP0_9_8 [2] */

 IP0_7_6 [2] */

 IP0_5_4 [2] */

 IP0_3_2 [2] */

 IP0_1_0 [2] */

 IP1_31_29 [3] */

 IP1_28_26 [3] */

 IP1_25_23 [3] */

 IP1_22_20 [3] */

 IP1_19_18 [2] */

 IP1_17_16 [2] */

 IP1_15_14 [2] */

 IP1_13_12 [2] */

 IP1_11_10 [2] */

 IP1_9_8 [2] */

 IP1_7_6 [2] */

 IP1_5_4 [2] */

 IP1_3_2 [2] */

 IP1_1_0 [2] */

 IP2_31 [1] */

 IP2_30_28 [3] */

 IP2_27_25 [3] */

 IP2_24_23 [2] */

 IP2_22_20 [3] */

 IP2_19_17 [3] */

 IP2_16_14 [3] */

 IP2_13_11 [3] */

 IP2_10_8 [3] */

 IP2_7_5 [3] */

 IP2_4_3 [2] */

 IP2_2_0 [3] */

 IP3_31_30 [2] */

 IP3_29_27 [3] */

 IP3_26_24 [3] */

 IP3_23_21 [3] */

 IP3_20 [1] */

 IP3_19_18 [2] */

 IP3_17_15 [3] */

 IP3_14_12 [3] */

 IP3_11_9 [3] */

 IP3_8_6 [3] */

 IP3_5_3 [3] */

 IP3_2 [1] */

 IP3_1_0 [2] */

 IP4_31_30 [2] */

 IP4_29_28 [2] */

 IP4_27_26 [2] */

 IP4_25_24 [2] */

 IP4_23_22 [2] */

 IP4_21_20 [2] */

 IP4_19_18 [2] */

 IP4_17_15 [3] */

 IP4_14_12 [3] */

 IP4_11_9 [3] */

 IP4_8_6 [3] */

 IP4_5_3 [3] */

 IP4_2_0 [3] */

 IP5_31 [1] */

 IP5_30 [1] */

 IP5_29 [1] */

 IP5_28 [1] */

 IP5_27 [1] */

 IP5_26_25 [2] */

 IP5_24_23 [2] */

 IP5_22_21 [2] */

 IP5_20_18 [3] */

 IP5_17_15 [3] */

 IP5_14_12 [3] */

 IP5_11_9 [3] */

 IP5_8_6 [3] */

 IP5_5_3 [3] */

 IP5_2_0 [3] */

 IP5_31 [1] */

 IP6_30 [1] */

 IP6_29 [1] */

 IP6_28 [1] */

 IP6_27 [1] */

 IP6_26 [1] */

 IP6_25 [1] */

 IP6_24 [1] */

 IP6_23_21 [3] */

 IP6_20_18 [3] */

 IP6_17_16 [2] */

 IP6_15_14 [2] */

 IP6_13_12 [2] */

 IP6_11_10 [2] */

 IP6_9_8 [2] */

 IP6_7_6 [2] */

 IP6_5_3 [3] */

 IP6_2_0 [3] */

 IP7_31 [1] */

 IP7_30_29 [2] */

 IP7_28_27 [2] */

 IP7_26_24 [3] */

 IP7_23_21 [3] */

 IP7_20_18 [3] */

 IP7_17_15 [3] */

 IP7_14_12 [3] */

 IP7_11_9 [3] */

 IP7_8_6 [3] */

 IP7_5_3 [3] */

 IP7_2_0 [3] */

 IP9_31_30 [2] */

 IP8_29_28 [2] */

 IP8_27_26 [2] */

 IP8_25_23 [3] */

 IP8_22_20 [3] */

 IP8_19_18 [2] */

 IP8_17_16 [2] */

 IP8_15_14 [2] */

 IP8_13_12 [2] */

 IP8_11_10 [2] */

 IP8_9_8 [2] */

 IP8_7_6 [2] */

 IP8_5_4 [2] */

 IP8_3_2 [2] */

 IP8_1_0 [2] */

 IP9_31_30 [2] */

 IP9_29_28 [2] */

 IP9_27_26 [2] */

 IP9_25_24 [2] */

 IP9_23_22 [2] */

 IP9_21_20 [2] */

 IP9_19_18 [2] */

 IP9_17_16 [2] */

 IP9_15_14 [2] */

 IP9_13_12 [2] */

 IP9_11_10 [2] */

 IP9_9_8 [2] */

 IP9_7_6 [2] */

 IP9_5_4 [2] */

 IP9_3_2 [2] */

 IP9_1_0 [2] */

 IP9_31_30 [2] */

 IP10_29_28 [2] */

 IP10_27_26 [2] */

 IP10_25 [1] */

 IP10_24_23 [2] */

 IP10_22 [1] */

 IP10_21_19 [3] */

 IP10_18_16 [3] */

 IP10_15 [1] */

 IP10_14_12 [3] */

 IP10_11_9 [3] */

 IP10_8_6 [3] */

 IP10_5_3 [3] */

 IP10_2_0 [3] */

 IP11_31_29 [3] */

 IP11_28 [1] */

 IP11_27_26 [2] */

 IP11_25_23 [3] */

 IP11_22_21 [2] */

 IP11_20_19 [2] */

 IP11_18_16 [3] */

 IP11_15_13 [3] */

 IP11_12 [1] */

 IP11_11_10 [2] */

 IP11_9_7 [3] */

 IP11_6_4 [3] */

 IP11_3 [1] */

 IP11_2 [1] */

 IP11_1 [1] */

 IP11_0 [1] */

 SEL1_31_29 [3] */

 SEL1_28 [1] */

 SEL1_27 [1] */

 SEL1_26 [1] */

 SEL1_25 [1] */

 SEL1_24 [1] */

 SEL1_23 [1] */

 SEL1_22_21 [2] */

 SEL1_20 [1] */

 SEL1_19 [1] */

 SEL1_18 [1] */

 SEL1_17_16 [2] */

 SEL1_15_14 [2] */

 SEL1_13 [1] */

 SEL1_12_11 [2] */

 SEL1_10 [1] */

 SEL1_9 [1] */

 SEL1_8 [1] */

 SEL1_7 [1] */

 SEL1_6 [1] */

 SEL1_5 [1] */

 SEL1_4 [1] */

 SEL1_3 [1] */

 SEL1_2 [1] */

 SEL1_1 [1] */

 SEL1_0 [1] */

 SEL2_31 [1] */

 SEL2_30 [1] */

 SEL2_29 [1] */

 SEL2_28 [1] */

 SEL2_27 [1] */

 SEL2_26 [1] */

 SEL2_25 [1] */

 SEL2_24 [1] */

 SEL2_23 [1] */

 SEL2_22 [1] */

 SEL2_21 [1] */

 SEL2_20_19 [2] */

 SEL2_18_17 [2] */

 SEL2_16 [1] */

 SEL2_15_14 [2] */

 SEL2_13_12 [2] */

 SEL2_11_9 [3] */

 SEL2_8_7 [2] */

 SEL2_6_4 [3] */

 SEL2_3_2 [2] */

 SEL2_1_0 [2] */

 GPIO 0 - 5*/

 31 - 24 */

 23 - 16 */

 15 - 12 */

 GPIO 0 - 5*/

 SPDX-License-Identifier: GPL-2.0

/*

 * SuperH Pin Function Controller GPIO driver.

 *

 * Copyright (C) 2008 Magnus Damm

 * Copyright (C) 2009 - 2012 Paul Mundt

	/* Count the number of data registers, allocate memory and initialize

	 * them.

/* -----------------------------------------------------------------------------

 * Pin GPIOs

/* -----------------------------------------------------------------------------

 * Function GPIOs

 CONFIG_PINCTRL_SH_FUNC_GPIO */

/* -----------------------------------------------------------------------------

 * Register/unregister

	/* Find the memory window that contains the GPIO registers. Boards that

	 * register a separate GPIO device will not supply a memory resource

	 * that covers the data registers. In that case don't try to handle

	 * GPIOs.

 If we have IRQ resources make sure their number is correct. */

 Register the real GPIOs chip. */

	/*

	 * Register the GPIO to pin mappings. As pins with GPIO ports

	 * must come first in the ranges, skip the pins without GPIO

	 * ports by stopping at the first range that contains such a

	 * pin.

 Register the function GPIOs chip. */

 CONFIG_PINCTRL_SH_FUNC_GPIO */

 SPDX-License-Identifier: GPL-2.0

/*

 * SH7724 Pinmux

 *

 * Copyright (C) 2009 Renesas Solutions Corp.

 *

 * Kuninori Morimoto <morimoto.kuninori@renesas.com>

 *

 * Based on SH7723 Pinmux

 *  Copyright (C) 2008  Magnus Damm

PTA*/

PTB*/

PTC*/

PTD*/

PTE*/

PTF*/

PTG*/

PTH*/

PTJ*/

PTK*/

PTL*/

PTM*/

PTN*/

PTQ*/

PTR*/

PTS*/

PTT*/

PTU*/

PTV*/

PTW*/

PTX*/

PTY*/

PTZ*/

 PTA GPIO */

 PTB GPIO */

 PTC GPIO */

 PTD GPIO */

 PTE GPIO */

 PTF GPIO */

 PTG GPIO */

 PTH GPIO */

 PTJ GPIO */

 PTK GPIO */

 PTL GPIO */

 PTM GPIO */

 PTN GPIO */

 PTQ GPIO */

 PTR GPIO */

 PTS GPIO */

 PTT GPIO */

 PTU GPIO */

 PTV GPIO */

 PTW GPIO */

 PTX GPIO */

 PTY GPIO */

 PTZ GPIO */

 PTA FN */

 PTB FN */

 PTC FN */

 PTD FN */

 PTE FN */

 PTF FN */

 PTG FN */

 PTH FN */

 PTJ FN */

 PTK FN */

 PTL FN */

 PTM FN */

 PTN FN */

 PTQ FN */

 PTR FN */

 PTS FN */

 PTT FN */

 PTU FN */

 PTV FN */

 PTW FN */

 PTX FN */

 PTY FN */

 PTZ FN */

 PTA */

 PTB */

 PTC */

 PTD */

 PTE */

 PTF */

 PTG */

 PTH */

 PTJ */

 PTK */

 PTL */

 PTM */

 PTN */

 PTQ */

 PTR */

 PTS */

 PTT */

 PTU */

 PTV */

 PTW */

 PTX */

 PTY */

 PTZ */

 BSC */

 KEYSC */

 ATAPI */

 TPU */

 LCDC */

 SCIF0 */

 SCIF1 */

 SCIF2 */

 SCIF3 */

 SCIF4 */

 SCIF5 */

 FSI */

 AUD */

 VIO */

 VIO0 */

 VIO1 */

 Eth */

 System */

 VOU */

 MSIOF0 */

 MSIOF1 */

 DMAC */

 SDHI0 */

 SDHI1 */

 MMC */

 IrDA */

 TSIF */

 IRQ */

 SPDX-License-Identifier: GPL-2.0

/*

 * Combined GPIO and pin controller support for Renesas RZ/A2 (R7S9210) SoC

 *

 * Copyright (C) 2018 Chris Brandt

/*

 * This pin controller/gpio combined driver supports Renesas devices of RZ/A2

 * family.

/*

 * Use 16 lower bits [15:0] for pin identifier

 * Use 16 higher bits [31:16] for pin mux function

 Direction 16-bit */

 Output Data 8-bit */

 Input Data 8-bit */

 Mode 8-bit */

 Drive 16-bit */

 Fnct 8-bit */

 Write Protect 8-bit */

 Ethernet Pins 8-bit */

 Dedicated Pins 32-bit */

 Peripheral Pins 32-bit */

 CKIO Drive 8-bit */

 Bit Write Disable */

 PFS Register Write Enable */

 Interrupt Select */

 Set pin to 'Non-use (Hi-z input protection)'  */

 Temporarily switch to GPIO */

 PFS Register Write Protect : OFF */

 B0WI=0, PFSWE=0 */

 B0WI=0, PFSWE=1 */

 Set Pin function (interrupt disabled, ISEL=0) */

 PFS Register Write Protect : ON */

 B0WI=0, PFSWE=0 */

 B0WI=1, PFSWE=0 */

 Port Mode  : Peripheral module pin functions */

 pin as input */

 pin as output */

	/*

	 * This GPIO controller has a default Hi-Z state that is not input or

	 * output, so force the pin to input now.

 port I does not exist */

 Register our gpio chip with gpiolib */

 Register pin range with pinctrl core */

/*

 * For each DT node, create a single pin mapping. That pin mapping will only

 * contain a single group of pins, and that group of pins will only have a

 * single function that can be selected.

 Find out how many pins to map */

 Collect pin locations and mux settings from DT properties */

 Register a single pin group listing all the pins we read from DT */

	/*

	 * Register a single group function where the 'data' is an array PSEL

	 * register values read from DT.

 Create map where to retrieve function and mux settings from */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * r8a7794/r8a7745 processor support - PFC hardware block.

 *

 * Copyright (C) 2014-2015 Renesas Electronics Corporation

 * Copyright (C) 2015 Renesas Solutions Corp.

 * Copyright (C) 2015-2017 Cogent Embedded, Inc. <source@cogentembedded.com>

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 GPSR5 */

 GPSR6 */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 IPSR12 */

 IPSR13 */

 MOD_SEL */

 MOD_SEL2 */

 MOD_SEL3 */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 IPSR12 */

 IPSR13 */

 PINMUX_DATA(GP_M_N_DATA, GP_M_N_FN...), */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 IPSR12 */

 IPSR13 */

/*

 * Pins not associated with a GPIO port.

 - Audio Clock ------------------------------------------------------------ */

 CLKA */

 CLKA */

 CLKA */

 CLKA */

 CLKB */

 CLKB */

 CLKB */

 CLKC */

 CLKC */

 CLKC */

 CLKOUT */

 CLKOUT */

 CLKOUT */

 - AVB -------------------------------------------------------------------- */

 - CAN -------------------------------------------------------------------- */

 TX, RX */

 TX, RX */

 TX, RX */

 TX, RX */

 TX, RX */

 TX, RX */

 TX, RX */

 TX, RX */

 CLK */

 CLK */

 CLK */

 CLK */

 - DU --------------------------------------------------------------------- */

 R[7:2], G[7:2], B[7:2] */

 R[7:0], G[7:0], B[7:0] */

 DOTCLKOUT0 */

 DOTCLKOUT1 */

 CLKIN */

 EXVSYNC/VSYNC, EXHSYNC/HSYNC */

 EXODDF/ODDF/DISP/CDE */

 CDE */

 DISP */

 R[7:2], G[7:2], B[7:2] */

 R[7:0], G[7:0], B[7:0] */

 DOTCLKOUT0 */

 DOTCLKOUT1 */

 DOTCLKIN */

 EXVSYNC/VSYNC, EXHSYNC/HSYNC */

 EXODDF/ODDF/DISP/CDE */

 CDE */

 DISP */

 - ETH -------------------------------------------------------------------- */

 LINK */

 MAGIC */

 MDC, MDIO */

 RXD[0:1], RX_ER, CRS_DV, TXD[0:1], TX_EN, REF_CLK */

 LINK */

 MAGIC */

 MDC, MDIO */

 RXD[0:1], RX_ER, CRS_DV, TXD[0:1], TX_EN, REF_CLK */

 - HSCIF0 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 - HSCIF1 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 RTS, CTS */

 - HSCIF2 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 - I2C0 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C1 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C2 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C3 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C4 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C5 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - INTC ------------------------------------------------------------------- */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 IRQ6 */

 IRQ7 */

 IRQ8 */

 IRQ9 */

 - MMCIF ------------------------------------------------------------------ */

 D[0] */

 D[0:3] */

 D[0:7] */

 CLK, CMD */

 - MSIOF0 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 - MSIOF1 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 - MSIOF2 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 - PWM -------------------------------------------------------------------- */

 - QSPI ------------------------------------------------------------------- */

 SPCLK, SSL */

 MOSI_IO0, MISO_IO1 */

 MOSI_IO0, MISO_IO1, IO2, IO3 */

 - SCIF0 ------------------------------------------------------------------ */

 RX, TX */

 RX, TX */

 RX, TX */

 RX, TX */

 - SCIF1 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 - SCIF2 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 - SCIF3 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 - SCIF4 ------------------------------------------------------------------ */

 RX, TX */

 RX, TX */

 RX, TX */

 RX, TX */

 RX, TX */

 - SCIF5 ------------------------------------------------------------------ */

 RX, TX */

 RX, TX */

 RX, TX */

 RX, TX */

 - SCIFA0 ----------------------------------------------------------------- */

 RXD, TXD */

 RXD, TXD */

 RXD, TXD */

 RXD, TXD */

 - SCIFA1 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RXD, TXD */

 SCK */

 RXD, TXD */

 SCK */

 - SCIFA2 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RXD, TXD */

 SCK */

 - SCIFA3 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RXD, TXD */

 SCK */

 - SCIFA4 ----------------------------------------------------------------- */

 RXD, TXD */

 RXD, TXD */

 RXD, TXD */

 RXD, TXD */

 - SCIFA5 ----------------------------------------------------------------- */

 RXD, TXD */

 RXD, TXD */

 RXD, TXD */

 RXD, TXD */

 - SCIFB0 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 - SCIFB1 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 - SCIFB2 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 - SCIF Clock ------------------------------------------------------------- */

 SCIF_CLK */

 SCIF_CLK */

 - SDHI0 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI1 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI2 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SSI -------------------------------------------------------------------- */

 SDATA0 */

 SCK0129, WS0129 */

 SDATA1 */

 SCK1, WS1 */

 SDATA1 */

 SCK1, WS1 */

 SDATA2 */

 SCK2, WS2 */

 SDATA2 */

 SCK2, WS2 */

 SDATA3 */

 SCK34, WS34 */

 SDATA4 */

 SCK4, WS4 */

 SDATA4 */

 SCK4, WS4 */

 SDATA5 */

 SCK5, WS5 */

 SDATA5 */

 SCK5, WS5 */

 SDATA6 */

 SCK6, WS6 */

 SDATA6 */

 SCK6, WS6 */

 SDATA7 */

 SCK78, WS78 */

 SDATA7 */

 SCK78, WS78 */

 SDATA8 */

 SDATA8 */

 SDATA9 */

 SCK9, WS9 */

 SDATA9 */

 SCK9, WS9 */

 - TPU -------------------------------------------------------------------- */

 - USB0 ------------------------------------------------------------------- */

 PWEN */

 OVC */

 - USB1 ------------------------------------------------------------------- */

 PWEN */

 OVC */

 - VIN0 ------------------------------------------------------------------- */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 HSYNC */

 VSYNC */

 - VIN1 ------------------------------------------------------------------- */

 HSYNC */

 VSYNC */

	/*

	 * Retained for backwards compatibility, use can_clk_groups in new

	 * designs.

	/*

	 * Retained for backwards compatibility, use can_clk_groups in new

	 * designs.

/*

 * can_clk_groups allows for independent configuration, use can_clk function

 * in new designs.

 IP0_31_30 [2] */

 IP0_29_28 [2] */

 IP0_27_26 [2] */

 IP0_25 [1] */

 IP0_24 [1] */

 IP0_23_22 [2] */

 IP0_21_20 [2] */

 IP0_19_18 [2] */

 IP0_17 [1] */

 IP0_16 [1] */

 IP0_15 [1] */

 IP0_14 [1] */

 IP0_13 [1] */

 IP0_12 [1] */

 IP0_11 [1] */

 IP0_10 [1] */

 IP0_9_8 [2] */

 IP0_7 [1] */

 IP0_6 [1] */

 IP0_5 [1] */

 IP0_4 [1] */

 IP0_3 [1] */

 IP0_2 [1] */

 IP0_1 [1] */

 IP0_0 [1] */

 IP1_31_30 [2] */

 IP1_29_28 [2] */

 IP1_27 [1] */

 IP1_26 [1] */

 IP1_25 [1] */

 IP1_24 [1] */

 IP1_23_22 [2] */

 IP1_21_20 [2] */

 IP1_19_18 [2] */

 IP1_17_15 [3] */

 IP1_14_13 [2] */

 IP1_12_11 [2] */

 IP1_10_8 [3] */

 IP1_7_6 [2] */

 IP1_5_4 [2] */

 IP1_3_2 [2] */

 IP1_1_0 [2] */

 IP2_31_30 [2] */

 IP2_29_27 [3] */

 IP2_26_24 [3] */

 IP2_23_21 [3] */

 IP2_20_18 [3] */

 IP2_17_16 [2] */

 IP2_15_14 [2] */

 IP2_13_12 [2] */

 IP2_11_10 [2] */

 IP2_9_8 [2] */

 IP2_7_6 [2] */

 IP2_5_4 [2] */

 IP2_3_2 [2] */

 IP2_1_0 [2] */

 IP3_31 [1] */

 IP3_30 [1] */

 IP3_29_27 [3] */

 IP3_26_24 [3] */

 IP3_23_21 [3] */

 IP3_20_18 [3] */

 IP3_17_15 [3] */

 IP3_14_13 [2] */

 IP3_12 [1] */

 IP3_11 [1] */

 IP3_10 [1] */

 IP3_9_8 [2] */

 IP3_7_6 [2] */

 IP3_5_4 [2] */

 IP3_3_2 [2] */

 IP3_1_0 [2] */

 IP4_31_30 [2] */

 IP4_29_28 [2] */

 IP4_27_26 [2] */

 IP4_25_23 [3] */

 IP4_22_20 [3] */

 IP4_19_18 [2] */

 IP4_17_16 [2] */

 IP4_15_14 [2] */

 IP4_13_12 [2] */

 IP4_11_10 [2] */

 IP4_9_8 [2] */

 IP4_7_5 [3] */

 IP4_4_2 [3] */

 IP4_1_0 [2] */

 IP5_31_30 [2] */

 IP5_29_28 [2] */

 IP5_27_26 [2] */

 IP5_25_24 [2] */

 IP5_23_22 [2] */

 IP5_21_20 [2] */

 IP5_19_18 [2] */

 IP5_17_16 [2] */

 IP5_15_14 [2] */

 IP5_13_12 [2] */

 IP5_11_9 [3] */

 IP5_8_6 [3] */

 IP5_5_4 [2] */

 IP5_3_2 [2] */

 IP5_1_0 [2] */

 IP6_31_29 [3] */

 IP6_28_26 [3] */

 IP6_25_23 [3] */

 IP6_22_20 [3] */

 IP6_19_17 [3] */

 IP6_16 [1] */

 IP6_15 [1] */

 IP6_14 [1] */

 IP6_13 [1] */

 IP6_12 [1] */

 IP6_11 [1] */

 IP6_10 [1] */

 IP6_9 [1] */

 IP6_8 [1] */

 IP6_7_6 [2] */

 IP6_5_4 [2] */

 IP6_3_2 [2] */

 IP6_1_0 [2] */

 IP7_31 [1] */

 IP7_30 [1] */

 IP7_29_27 [3] */

 IP7_26_24 [3] */

 IP7_23_21 [3] */

 IP7_20_18 [3] */

 IP7_17_15 [3] */

 IP7_14_12 [3] */

 IP7_11_9 [3] */

 IP7_8_6 [3] */

 IP7_5_3 [3] */

 IP7_2_0 [3] */

 IP8_31_29 [3] */

 IP8_28_26 [3] */

 IP8_25_23 [3] */

 IP8_22_20 [3] */

 IP8_19_17 [3] */

 IP8_16_15 [2] */

 IP8_14_12 [3] */

 IP8_11_9 [3] */

 IP8_8_6 [3] */

 IP8_5_3 [3] */

 IP8_2_0 [3] */

 IP9_31 [1] */

 IP9_30_28 [3] */

 IP9_27_25 [3] */

 IP9_24_22 [3] */

 IP9_21_19 [3] */

 IP9_18_17 [2] */

 IP9_16_15 [2] */

 IP9_14_12 [3] */

 IP9_11_9 [3] */

 IP9_8_6 [3] */

 IP9_5_3 [3] */

 IP9_2_0 [3] */

 IP10_31_30 [2] */

 IP10_29_27 [3] */

 IP10_26_24 [3] */

 IP10_23_21 [3] */

 IP10_20_18 [3] */

 IP10_17_15 [3] */

 IP10_14_12 [3] */

 IP10_11_9 [3] */

 IP10_8_6 [3] */

 IP10_5_3 [3] */

 IP10_2_0 [3] */

 IP11_31_30 [2] */

 IP11_29_27 [3] */

 IP11_26_24 [3] */

 IP11_23_21 [3] */

 IP11_20_18 [3] */

 IP11_17_16 [2] */

 IP11_15_14 [2] */

 IP11_13_11 [3] */

 IP11_10_8 [3] */

 IP11_7_6 [2] */

 IP11_5_3 [3] */

 IP11_2_0 [3] */

 IP12_31_30 [2] */

 IP12_29_27 [3] */

 IP12_26_24 [3] */

 IP12_23_21 [3] */

 IP12_20_18 [3] */

 IP12_17_15 [3] */

 IP12_14_13 [2] */

 IP12_12_11 [2] */

 IP12_10_9 [2] */

 IP12_8_6 [3] */

 IP12_5_3 [3] */

 IP12_2_0 [3] */

 IP13_31 [1] */

 IP13_30 [1] */

 IP13_29 [1] */

 IP13_28 [1] */

 IP13_27 [1] */

 IP13_26_24 [3] */

 IP13_23_21 [3] */

 IP13_20_18 [3] */

 IP13_17_15 [3] */

 IP13_14_12 [3] */

 IP13_11_9 [3] */

 IP13_8_6 [3] */

 IP13_5_3 [2] */

 IP13_2_0 [3] */

 SEL_ADG [2] */

 RESERVED [1] */

 SEL_CAN [2] */

 SEL_DARC [3] */

 RESERVED [4] */

 SEL_ETH [1] */

 RESERVED [1] */

 SEL_IC200 [3] */

 SEL_I2C01 [3] */

 SEL_I2C02 [3] */

 SEL_I2C03 [3] */

 SEL_I2C04 [3] */

 SEL_I2C05 [2] */

 RESERVED [1] */

 SEL_IEB [2] */

 SEL_IIC0 [2] */

 SEL_LBS [1] */

 SEL_MSI1 [1] */

 SEL_MSI2 [1] */

 SEL_RAD [1] */

 SEL_RCN [1] */

 SEL_RSP [1] */

 SEL_SCIFA0 [2] */

 SEL_SCIFA1 [2] */

 SEL_SCIFA2 [1] */

 SEL_SCIFA3 [1] */

 SEL_SCIFA4 [2] */

 SEL_SCIFA5 [2] */

 RESERVED [1] */

 SEL_TMU [1] */

 SEL_TSIF0 [2] */

 SEL_CAN0 [2] */

 SEL_CAN1 [2] */

 SEL_HSCIF0 [1] */

 SEL_HSCIF1 [1] */

 RESERVED [2] */

 SEL_SCIF0 [2] */

 SEL_SCIF1 [2] */

 SEL_SCIF2 [2] */

 SEL_SCIF3 [1] */

 SEL_SCIF4 [3] */

 SEL_SCIF5 [2] */

 SEL_SSI1 [1] */

 SEL_SSI2 [1] */

 SEL_SSI4 [1] */

 SEL_SSI5 [1] */

 SEL_SSI6 [1] */

 SEL_SSI7 [1] */

 SEL_SSI8 [1] */

 SEL_SSI9 [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 RESERVED [1] */

 D0 */

 D1 */

 D2 */

 D3 */

 D4 */

 D5 */

 D6 */

 D7 */

 D8 */

 D9 */

 D10 */

 D11 */

 D12 */

 D13 */

 D14 */

 D15 */

 A0 */

 A1 */

 A2 */

 A3 */

 A4 */

 A5 */

 A6 */

 A7 */

 A8 */

 A9 */

 A10 */

 A11 */

 A12 */

 A13 */

 A14 */

 A15 */

 PUPR1 pull-up pins */

 A16 */

 A17 */

 A18 */

 A19 */

 A20 */

 A21 */

 A22 */

 A23 */

 A24 */

 A25 */

 CS0# */

 EX_CS0# */

 EX_CS2# */

 EX_CS4# */

 BS# */

 RD# */

 RD/WR# */

 WE0# */

 WE1# */

 EX_WAIT0 */

 DREQ0# */

 DACK0 */

 TRST# */

 TCK */

 TMS */

 TDI */

 CS1#/A26 */

 EX_CS1# */

 EX_CS3# */

 EX_CS5# */

 PUPR1 pull-down pins */

 ASEBRK#/ACK */

 DU0_DR0 */

 DU0_DR1 */

 DU0_DR2 */

 DU0_DR3 */

 DU0_DR4 */

 DU0_DR5 */

 DU0_DR6 */

 DU0_DR7 */

 DU0_DG0 */

 DU0_DG1 */

 DU0_DG2 */

 DU0_DG3 */

 DU0_DG4 */

 DU0_DG5 */

 DU0_DG6 */

 DU0_DG7 */

 DU0_DB0 */

 DU0_DB1 */

 DU0_DB2 */

 DU0_DB3 */

 DU0_DB4 */

 DU0_DB5 */

 DU0_DB6 */

 DU0_DB7 */

 DU0_DOTCLKIN */

 DU0_DOTCLKOUT0 */

 DU0_DOTCLKOUT1 */

 DU0_EXHSYNC/DU0_HSYNC */

 DU0_EXVSYNC/DU0_VSYNC */

 DU0_EXODDF/DU0_ODDF_DISP_CDE */

 DU0_DISP */

 DU0_CDE */

 VI0_DATA1_VI0_B1 */

 VI0_DATA2_VI0_B2 */

 VI0_DATA3_VI0_B3 */

 VI0_DATA4_VI0_B4 */

 VI0_DATA5_VI0_B5 */

 VI0_DATA6_VI0_B6 */

 VI0_DATA7_VI0_B7 */

 VI0_CLKENB */

 VI0_FIELD */

 VI0_HSYNC# */

 VI0_VSYNC# */

 ETH_MDIO */

 ETH_CRS_DV */

 ETH_RX_ER */

 ETH_RXD0 */

 ETH_RXD1 */

 ETH_LINK */

 ETH_REF_CLK */

 ETH_TXD1 */

 ETH_TX_EN */

 ETH_MAGIC */

 ETH_TXD0 */

 ETH_MDC */

 HSCIF0_HRX */

 HSCIF0_HTX */

 HSCIF0_HCTS# */

 HSCIF0_HRTS# */

 HSCIF0_HSCK */

 I2C0_SCL */

 I2C0_SDA */

 I2C1_SCL */

 I2C1_SDA */

 MSIOF0_RXD */

 MSIOF0_TXD */

 MSIOF0_SCK */

 MSIOF0_SYNC */

 MSIOF0_SS1 */

 MSIOF0_SS2 */

 HSCIF1_HRX */

 HSCIF1_HTX */

 HSCIF1_HSCK */

 HSCIF1_HCTS# */

 HSCIF1_HRTS# */

 SCIF1_SCK */

 SCIF1_RXD */

 SCIF1_TXD */

 SCIF2_RXD */

 SCIF2_TXD */

 SCIF2_SCK */

 SCIF3_SCK */

 SCIF3_RXD */

 SCIF3_TXD */

 I2C2_SCL */

 I2C2_SDA */

 SSI_SCK5 */

 SSI_WS5 */

 SSI_SDATA5 */

 SSI_SCK6 */

 SSI_WS6 */

 SSI_SDATA6 */

 SSI_SCK78 */

 SSI_WS78 */

 SSI_SDATA7 */

 SSI_SCK0129 */

 SSI_WS0129 */

 SSI_SDATA0 */

 SSI_SCK34 */

 SSI_WS34 */

 SSI_SDATA3 */

 SSI_SDATA8 */

 SSI_SCK1 */

 SSI_WS1 */

 SSI_SDATA1 */

 SSI_SCK2 */

 SSI_WS2 */

 SSI_SDATA2 */

 SSI_SCK9 */

 SSI_WS9 */

 SSI_SDATA9 */

 AUDIO_CLKA */

 AUDIO_CLKB */

 AUDIO_CLKC */

 AUDIO_CLKOUT */

 VI0_CLK */

 VI0_DATA0_VI0_B0 */

 SD0_CMD */

 SD0_DATA0 */

 SD0_DATA1 */

 SD0_DATA2 */

 SD0_DATA3 */

 SD0_CD */

 SD0_WP */

 SD1_CMD */

 SD1_DATA0 */

 SD1_DATA1 */

 SD1_DATA2 */

 SD1_DATA3 */

 SD1_CD */

 SD1_WP */

 MMC_CMD */

 MMC_D0 */

 MMC_D1 */

 MMC_D2 */

 MMC_D3 */

 MMC_D4 */

 MMC_D5 */

 MMC_D6 */

 MMC_D7 */

 sentinel */ }

 sentinel */ }

 Initialize TDSEL on old revisions */

 PMMR */

 PMMR */

 SPDX-License-Identifier: GPL-2.0

/*

 * R8A7740 processor support

 *

 * Copyright (C) 2011  Renesas Solutions Corp.

 * Copyright (C) 2011  Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

 PORT0_DATA -> PORT211_DATA */

 PORT0_IN -> PORT211_IN */

 PORT0_OUT -> PORT211_OUT */

 PORT0_FN_IN -> PORT211_FN_IN */

 PORT0_FN_OUT -> PORT211_FN_OUT */

 PORT0_FN0 -> PORT211_FN0 */

 PORT0_FN1 -> PORT211_FN1 */

 PORT0_FN2 -> PORT211_FN2 */

 PORT0_FN3 -> PORT211_FN3 */

 PORT0_FN4 -> PORT211_FN4 */

 PORT0_FN5 -> PORT211_FN5 */

 PORT0_FN6 -> PORT211_FN6 */

 PORT0_FN7 -> PORT211_FN7 */

 Trace / Debug ? */

 irq/fiq output */

 IRQ */

 Function */

 DBGT */

 FSI-A */

 FSIAISLD Port 0/5 */

 FSIASPDIF Port 9/18 */

 FSI-B */

 FMSI */

 FMSISLD Port 1/6 */

 SCIFA0 */

 SCIFA1 */

 SCIFA2 */

 SCIFA2_SCK Port 22/199 */

 SCIFA3 */

 MSEL5CR_8_0 */

 MSEL5CR_8_1 */

 SCIFA4 */

 MSEL5CR[12:11] = 00 */

 MSEL5CR[12:11] = 01 */

 MSEL5CR[12:11] = 10 */

 SCIFA4_SCK Port 21/205 */

 SCIFA5 */

 MSEL5CR[15:14] = 00 */

 MSEL5CR[15:14] = 01 */

 MSEL5CR[15:14] = 10 */

 SCIFA5_SCK Port 23/206 */

 SCIFA6 */

 SCIFA7 */

 SCIFB */

 MSEL5CR_17_0 */

 MSEL5CR_17_1 */

 LCD0 */

 for RGB */

 for RGB */

 for SYS */

 for SYS */

 MSEL5CR_6_1 */

 MSEL5CR_6_0 */

 LCD1 */

 for RGB */

 for RGB */

 for SYS */

 for SYS */

 RSPI */

 VIO CKO */

 needs fixup */

 VIO0 */

 MSEL5CR_27_0 */

 MSEL5CR_27_1 */

 VIO1 */

 TPU0 */

 TPU0TO2 Port 66/202 */

 SSP1 0 */

 SSP1 1 */

 MSEL5CR_23_0 */

 MSEL5CR_23_1 */

 SIM */

 SIM_D  Port 22/199 */

 SDHI0 */

 SDHI1 */

 SDHI2 */

 MSEL5CR_19_0 */

 MSEL5CR_19_1 */

 MSIOF2 */

 KEYSC */

 MSEL4CR_18_0 */

 MSEL4CR_18_1 */

 VOU */

 MEMC */

 MSEL4CR_6_0 */

 MSEL4CR_6_1 */

 MMC */

 MSEL4CR_15_0 */

 MSEL4CR_15_1 */

 MSIOF0 */

 MSIOF1 */

 MSEL4CR_10_0 */

 MSEL4CR_10_1 */

 GPIO */

 USB0 */

 USB1 */

 BBIF1 */

 BBIF2 */

 MSEL5CR_0_0 */

 MSEL5CR_0_1 */

 BSC / FLCTL / PCMCIA */

 CS5A PORT 19/105 */

 ? */

 share with FLCTL */

 share with FLCTL */

 share with FLCTL */

 share with FLCTL */

 share with FLCTL */

 share with FLCTL */

 share with FLCTL */

 share with FLCTL */

 share with FLCTL */

 share with PCMCIA */

 share with PCMCIA */

 share with FLCTL */

 WAIT Port 90/177 */

 FLCTL */

 IRDA */

 ATAPI */

 RMII */

 for RMII */

 for GMII */

 GEther */

 for GEther */

 for GEther */

 for GEther */

 for GEther */

 DMA0 */

 DMA1 */

 SYSC */

 IRREM */

 SDENC */

 HDMI */

 DEBUG */

 for JTAG */

 for TRACE/AUD */

 Port0 */

 Port1 */

 Port2 */

 Port3 */

 Port4 */

 Port5 */

 Port6 */

 Port7 */

 Port8 */

 Port9 */

 Port10 */

 Port11 */

 Port12 */

 Port13 */

 Port14 */

 Port15 */

 Port16 */

 Port17 */

 Port18 */

 Port19 */

 Port20 */

 Port21 */

 Port22 */

 Port23 */

 Port24 */

 Port25 */

 Port26 */

 Port27 - Port39 Function */

 Port38 IRQ */

 Port40 */

 Port41 */

 Port42 */

 Port43 */

 Port44 */

 Port45 */

 Port46 */

 Port47 */

 Port48 */

 Port49 */

 Port50 */

 Port51 */

 Port52 */

 Port53 */

 Port54 */

 Port55 */

 Port56 */

 Port57 */

 Port58 */

 Port59 */

 Port60 */

 Port61 */

 Port62 */

 Port63 */

 Port64 */

 Port65 */

 Port66 */

 Port67 - Port73 Function1 */

 Port67 - Port73 Function2 */

 Port67 - Port73 Function4 */

 Port67 - Port73 Function6 */

 Port67 - Port71 IRQ */

 Port74 */

 Port75 */

 Port76 - Port80 Function */

 Port81 */

 Port82 - Port88 Function */

 Port89 */

 Port90 */

 Port91 */

 Port92 */

 Port93 */

 Port94 */

 Port95 */

 Port96 */

 Port97 */

 Port98 */

 Port99 */

 Port100 */

 Port101 */

 Port102 */

 Port103 */

 Port104 */

 Port105 */

 Port106 */

 Port107 - Port115 Function */

 Port116 */

 Port117 */

 Port118 */

 Port119 */

 Port120 */

 Port121 */

 Port122 */

 Port123 */

 Port124 */

 Port125 - Port141 Function */

 Port142 - Port157 Function1 */

 Port142 - Port149 Function3 */

 Port158 */

 Port159 */

 Port160 */

 Port161 */

 Port162 */

 Port163 */

 Port164 */

 Port165 */

 Port166 - Port171 Function1 */

 Port166 - Port171 Function3 */

 Port166 - Port171 Function6 */

 Port167 - Port171 IRQ */

 Port172 */

 Port173 */

 Port174 */

 Port175 */

 Port176 */

 Port177 */

 Port178 */

 Port179 */

 Port180 */

 Port181 */

 Port182 */

 Port183 */

 Port184 */

 Port185 - Port192 Function1 */

 Port185 - Port192 Function3 */

 Port185 - Port192 Function6 */

 Port193 */

 ? */

 Port194 */

 ? */

 Port195 */

 Port196 */

 Port197 */

 Port198 */

 Port199 */

 Port200 */

 Port201 */

 Port202 */

 Port203 - Port208 Function1 */

 Port203 - Port208 Function3 */

 Port203 - Port208 Function6 */

 Port203 - Port208 Function7 */

 Port209 */

 Port210 */

 Port211 */

 SDENC */

 SYSC */

 DEBUG */

 Table 56-1 (I/O and Pull U/D) */

 - BSC -------------------------------------------------------------------- */

 D[0:7] */

 D[0:15] */

 D[0:31] */

 CS */

 CS */

 CS */

 CS */

 CS */

 CS */

 CS */

 RD, WE[0] */

 RD, WE[0:1] */

 RD, WE[0:3] */

 BS */

 RDWR */

 - CEU0 ------------------------------------------------------------------- */

 D[0:7] */

 D[8:15] */

 D[8:15] */

 CKO */

 CKO */

 CKO */

 CLK, VD, HD */

 FIELD */

 - CEU1 ------------------------------------------------------------------- */

 D[0:7] */

 CKO */

 CLK, VD, HD */

 FIELD */

 - FSIA ------------------------------------------------------------------- */

 CK */

 OMC */

 ILR, IBT */

 OLR, OBT */

 ISLD */

 ISLD */

 OSLD */

 OSLD */

 OSLD */

 SPDIF */

 SPDIF */

 - FSIB ------------------------------------------------------------------- */

 CK */

 - GETHER ----------------------------------------------------------------- */

 RXD[0:1], RX_ER, CRS_DV, TXD[0:1], TX_EN, REF_CLK, MDC, MDIO */

	/* RXD[0:3], RX_CLK, RX_DV, RX_ER

	 * TXD[0:3], TX_CLK, TX_EN, TX_ER

	 * CRS, COL, MDC, MDIO,

	/* RXD[0:7], RX_CLK, RX_DV, RX_ER

	 * TXD[0:7], GTX_CLK, TX_CLK, TX_EN, TX_ER

	 * CRS, COL, MDC, MDIO, REF125CK_MARK,

 PHY_INT */

 LINK */

 WOL */

 - HDMI ------------------------------------------------------------------- */

 HPD, CEC */

 - INTC ------------------------------------------------------------------- */

 - LCD0 ------------------------------------------------------------------- */

 D[0:7] */

 D[0:8] */

 D[0:11] */

 D[0:15] */

 D[0:17] */

 D[0:23] */

 D[0:23] */

 DON, VCPWC, VEPWC */

 LCLK */

 LCLK */

 VSYN, HSYN, DCK, DISP */

 CS, WR, RD, RS */

 - LCD1 ------------------------------------------------------------------- */

 D[0:7] */

 D[0:8] */

 D[0:11] */

 D[0:15] */

 D[0:17] */

 D[0:23] */

 DON, VCPWC, VEPWC */

 LCLK */

 VSYN, HSYN, DCK, DISP */

 CS, WR, RD, RS */

 - MMCIF ------------------------------------------------------------------ */

 D[0] */

 D[0:3] */

 D[0:7] */

 CMD, CLK */

 D[0] */

 D[0:3] */

 D[0:7] */

 CMD, CLK */

 - SCIFA0 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 - SCIFA1 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 - SCIFA2 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 SCK */

 RTS, CTS */

 - SCIFA3 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 - SCIFA4 ----------------------------------------------------------------- */

 RXD, TXD */

 RXD, TXD */

 RXD, TXD */

 SCK */

 SCK */

 - SCIFA5 ----------------------------------------------------------------- */

 RXD, TXD */

 RXD, TXD */

 RXD, TXD */

 SCK */

 SCK */

 - SCIFA6 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 - SCIFA7 ----------------------------------------------------------------- */

 RXD, TXD */

 - SCIFB ------------------------------------------------------------------ */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 - SDHI0 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CMD, CLK */

 CD */

 WP */

 - SDHI1 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CMD, CLK */

 CD */

 WP */

 - SDHI2 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CMD, CLK */

 CD */

 WP */

 CD */

 WP */

 - TPU0 ------------------------------------------------------------------- */

 TO */

 TO */

 TO */

 TO */

 TO */

 PORT0CR */

 PORT1CR */

 PORT2CR */

 PORT3CR */

 PORT4CR */

 PORT5CR */

 PORT6CR */

 PORT7CR */

 PORT8CR */

 PORT9CR */

 PORT10CR */

 PORT11CR */

 PORT12CR */

 PORT13CR */

 PORT14CR */

 PORT15CR */

 PORT16CR */

 PORT17CR */

 PORT18CR */

 PORT19CR */

 PORT20CR */

 PORT21CR */

 PORT22CR */

 PORT23CR */

 PORT24CR */

 PORT25CR */

 PORT26CR */

 PORT27CR */

 PORT28CR */

 PORT29CR */

 PORT30CR */

 PORT31CR */

 PORT32CR */

 PORT33CR */

 PORT34CR */

 PORT35CR */

 PORT36CR */

 PORT37CR */

 PORT38CR */

 PORT39CR */

 PORT40CR */

 PORT41CR */

 PORT42CR */

 PORT43CR */

 PORT44CR */

 PORT45CR */

 PORT46CR */

 PORT47CR */

 PORT48CR */

 PORT49CR */

 PORT50CR */

 PORT51CR */

 PORT52CR */

 PORT53CR */

 PORT54CR */

 PORT55CR */

 PORT56CR */

 PORT57CR */

 PORT58CR */

 PORT59CR */

 PORT60CR */

 PORT61CR */

 PORT62CR */

 PORT63CR */

 PORT64CR */

 PORT65CR */

 PORT66CR */

 PORT67CR */

 PORT68CR */

 PORT69CR */

 PORT70CR */

 PORT71CR */

 PORT72CR */

 PORT73CR */

 PORT74CR */

 PORT75CR */

 PORT76CR */

 PORT77CR */

 PORT78CR */

 PORT79CR */

 PORT80CR */

 PORT81CR */

 PORT82CR */

 PORT83CR */

 PORT84CR */

 PORT85CR */

 PORT86CR */

 PORT87CR */

 PORT88CR */

 PORT89CR */

 PORT90CR */

 PORT91CR */

 PORT92CR */

 PORT93CR */

 PORT94CR */

 PORT95CR */

 PORT96CR */

 PORT97CR */

 PORT98CR */

 PORT99CR */

 PORT100CR */

 PORT101CR */

 PORT102CR */

 PORT103CR */

 PORT104CR */

 PORT105CR */

 PORT106CR */

 PORT107CR */

 PORT108CR */

 PORT109CR */

 PORT110CR */

 PORT111CR */

 PORT112CR */

 PORT113CR */

 PORT114CR */

 PORT115CR */

 PORT116CR */

 PORT117CR */

 PORT118CR */

 PORT119CR */

 PORT120CR */

 PORT121CR */

 PORT122CR */

 PORT123CR */

 PORT124CR */

 PORT125CR */

 PORT126CR */

 PORT127CR */

 PORT128CR */

 PORT129CR */

 PORT130CR */

 PORT131CR */

 PORT132CR */

 PORT133CR */

 PORT134CR */

 PORT135CR */

 PORT136CR */

 PORT137CR */

 PORT138CR */

 PORT139CR */

 PORT140CR */

 PORT141CR */

 PORT142CR */

 PORT143CR */

 PORT144CR */

 PORT145CR */

 PORT146CR */

 PORT147CR */

 PORT148CR */

 PORT149CR */

 PORT150CR */

 PORT151CR */

 PORT152CR */

 PORT153CR */

 PORT154CR */

 PORT155CR */

 PORT156CR */

 PORT157CR */

 PORT158CR */

 PORT159CR */

 PORT160CR */

 PORT161CR */

 PORT162CR */

 PORT163CR */

 PORT164CR */

 PORT165CR */

 PORT166CR */

 PORT167CR */

 PORT168CR */

 PORT169CR */

 PORT170CR */

 PORT171CR */

 PORT172CR */

 PORT173CR */

 PORT174CR */

 PORT175CR */

 PORT176CR */

 PORT177CR */

 PORT178CR */

 PORT179CR */

 PORT180CR */

 PORT181CR */

 PORT182CR */

 PORT183CR */

 PORT184CR */

 PORT185CR */

 PORT186CR */

 PORT187CR */

 PORT188CR */

 PORT189CR */

 PORT190CR */

 PORT191CR */

 PORT192CR */

 PORT193CR */

 PORT194CR */

 PORT195CR */

 PORT196CR */

 PORT197CR */

 PORT198CR */

 PORT199CR */

 PORT200CR */

 PORT201CR */

 PORT202CR */

 PORT203CR */

 PORT204CR */

 PORT205CR */

 PORT206CR */

 PORT207CR */

 PORT208CR */

 PORT209CR */

 PORT210CR */

 PORT211CR */

 IRQ0A */

 IRQ1A */

 IRQ2A */

 IRQ3A */

 IRQ4A */

 IRQ5A */

 IRQ6A */

 IRQ7A */

 IRQ8A */

 IRQ9A */

 IRQ10A */

 IRQ11A */

 IRQ12A */

 IRQ13A */

 IRQ14A */

 IRQ15A */

 IRQ16A */

 IRQ17A */

 IRQ18A */

 IRQ19A */

 IRQ20A */

 IRQ21A */

 IRQ22A */

 IRQ23A */

 IRQ24A */

 IRQ25A */

 IRQ26A */

 IRQ27A */

 IRQ28A */

 IRQ29A */

 IRQ30A */

 IRQ31A */

 SPDX-License-Identifier: GPL-2.0

/*

 * r8a7779 processor support - PFC hardware block

 *

 * Copyright (C) 2011, 2013  Renesas Solutions Corp.

 * Copyright (C) 2011  Magnus Damm

 * Copyright (C) 2013  Cogent Embedded, Inc.

 GP_0_0_DATA -> GP_6_8_DATA */

 GP_0_0_FN -> GP_6_8_FN */

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 GPSR5 */

 GPSR6 */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 IPSR12 */

 PINMUX_DATA(GP_M_N_DATA, GP_M_N_FN...), */

 - DU0 -------------------------------------------------------------------- */

 R[7:2], G[7:2], B[7:2] */

 R[7:0], G[7:0], B[7:0] */

 CLKIN */

 CLKOUT */

 CLKOUT */

 VSYNC, HSYNC, DISP */

 VSYNC, HSYNC, DISP */

 ODDF */

 CDE */

 - DU1 -------------------------------------------------------------------- */

 R[7:2], G[7:2], B[7:2] */

 R[7:0], G[7:0], B[7:0] */

 CLKIN */

 CLKOUT */

 VSYNC, HSYNC, DISP */

 VSYNC, HSYNC, DISP */

 ODDF */

 CDE */

 - Ether ------------------------------------------------------------------ */

	/*

	 * ETH_TXD0, ETH_TXD1, ETH_TX_EN,  ETH_REFCLK,

	 * ETH_RXD0, ETH_RXD1, ETH_CRS_DV, ETH_RX_ER,

	 * ETH_MDIO, ETH_MDC

 ETH_LINK */

 ETH_MAGIC */

 - HSCIF0 ----------------------------------------------------------------- */

 TX, RX */

 TX, RX */

 CTS, RTS */

 CTS, RTS */

 SCK */

 SCK */

 - HSCIF1 ----------------------------------------------------------------- */

 TX, RX */

 TX, RX */

 CTS, RTS */

 CTS, RTS */

 SCK */

 SCK */

 - HSPI0 ------------------------------------------------------------------ */

 CLK, CS, RX, TX */

 - HSPI1 ------------------------------------------------------------------ */

 CLK, CS, RX, TX */

 CLK, CS, RX, TX */

 CLK, CS, RX, TX */

 CLK, CS, RX, TX */

 - HSPI2 ------------------------------------------------------------------ */

 CLK, CS, RX, TX */

 CLK, CS, RX, TX */

 - I2C1 ------------------------------------------------------------------ */

 SCL, SDA, */

 SCL, SDA, */

 SCL, SDA, */

 SCL, SDA, */

 - I2C2 ------------------------------------------------------------------ */

 SCL, SDA, */

 SCL, SDA, */

 SCL, SDA */

 SCL, SDA */

 - I2C3 ------------------------------------------------------------------ */

 SCL, SDA, */

 SCL, SDA, */

 - INTC ------------------------------------------------------------------- */

 IRQ */

 IRQ */

 IRQ */

 IRQ */

 IRQ */

 IRQ */

 IRQ */

 IRQ */

 - LSBC ------------------------------------------------------------------- */

 CS */

 CS */

 CS */

 CS */

 CS */

 CS */

 CS */

 CS */

 - MMCIF ------------------------------------------------------------------ */

 D[0] */

 D[0:3] */

 D[0:7] */

 CMD, CLK */

 D[0] */

 D[0:3] */

 D[0:7] */

 CMD, CLK */

 - SCIF0 ------------------------------------------------------------------ */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 - SCIF1 ------------------------------------------------------------------ */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 - SCIF2 ------------------------------------------------------------------ */

 RXD, TXD */

 SCK */

 RXD, TXD */

 SCK */

 RXD, TXD */

 SCK */

 RXD, TXD */

 SCK */

 RXD, TXD */

 - SCIF3 ------------------------------------------------------------------ */

 RXD, TXD */

 SCK */

 RXD, TXD */

 RXD, TXD */

 RXD, TXD */

 RXD, TXD */

 SCK */

 - SCIF4 ------------------------------------------------------------------ */

 RXD, TXD */

 SCK */

 RXD, TXD */

 SCK */

 RXD, TXD */

 RXD, TXD */

 - SCIF5 ------------------------------------------------------------------ */

 RXD, TXD */

 SCK */

 RXD, TXD */

 SCK */

 RXD, TXD */

 SCK */

 RXD, TXD */

 SCK */

 - SCIF Clock ------------------------------------------------------------- */

 SCIF_CLK */

 SCIF_CLK */

 SCIF_CLK */

 SCIF_CLK */

 - SDHI0 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CMD, CLK */

 CD */

 WP */

 - SDHI1 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CMD, CLK */

 CD */

 WP */

 - SDHI2 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CMD, CLK */

 CD */

 WP */

 - SDHI3 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CMD, CLK */

 CD */

 WP */

 - USB0 ------------------------------------------------------------------- */

 PENC */

 USB_OVC */

 - USB1 ------------------------------------------------------------------- */

 PENC */

 USB_OVC */

 - USB2 ------------------------------------------------------------------- */

 PENC */

 USB_OVC */

 - VIN0 ------------------------------------------------------------------- */

 D[0:7] */

 CLK */

 HSYNC, VSYNC */

 - VIN1 ------------------------------------------------------------------- */

 D[0:7] */

 CLK */

 HSYNC, VSYNC */

 - VIN2 ------------------------------------------------------------------- */

 D[0:7] */

 CLK */

 HSYNC, VSYNC */

 - VIN3 ------------------------------------------------------------------- */

 D[0:7] */

 CLK */

 HSYNC, VSYNC */

 IP0_31 [1] */

 IP0_30_28 [3] */

 IP0_27_26 [2] */

 IP0_25 [1] */

 IP0_24_23 [2] */

 IP0_22_19 [4] */

 IP0_18_16 [3] */

 IP0_15_14 [2] */

 IP0_13_12 [2] */

 IP0_11_10 [2] */

 IP0_9_8 [2] */

 IP0_7_6 [2] */

 IP0_5_3 [3] */

 IP0_2_0 [3] */

 IP1_31_29 [3] */

 IP1_28_25 [4] */

 IP1_24_23 [2] */

 IP1_22_21 [2] */

 IP1_20_19 [2] */

 IP1_18_15 [4] */

 IP1_14_11 [4] */

 IP1_10_7 [4] */

 IP1_6_4 [3] */

 IP1_3_2 [2] */

 IP1_1_0 [2] */

 IP2_31 [1] */

 IP2_30_28 [3] */

 IP2_27 [1] */

 IP2_26 [1] */

 IP2_25 [1] */

 IP2_24 [1] */

 IP2_23 [1] */

 IP2_22 [1] */

 IP2_21_19 [3] */

 IP2_18_16 [3] */

 IP2_15_12 [4] */

 IP2_11_8 [4] */

 IP2_7_4 [4] */

 IP2_3_0 [4] */

 IP3_31_29 [3] */

 IP3_28 [1] */

 IP3_27 [1] */

 IP3_26_24 [3] */

 IP3_23 [1] */

 IP3_22_21 [2] */

 IP3_20 [1] */

 IP3_19 [1] */

 IP3_18 [1] */

 IP3_17 [1] */

 IP3_16 [1] */

 IP3_15 [1] */

 IP3_14_12 [3] */

 IP3_11_9 [3] */

 IP3_8 [1] */

 IP3_7 [1] */

 IP3_6 [1] */

 IP3_5 [1] */

 IP3_4 [1] */

 IP3_3 [1] */

 IP3_2_0 [3] */

 IP4_31_29 [3] */

 IP4_28 [1] */

 IP4_27 [1] */

 IP4_26 [1] */

 IP4_25 [1] */

 IP4_24 [1] */

 IP4_23 [1] */

 IP4_22_20 [3] */

 IP4_19_17 [3] */

 IP4_16 [1] */

 IP4_15 [1] */

 IP4_14 [1] */

 IP4_13 [1] */

 IP4_12 [1] */

 IP4_11 [1] */

 IP4_10_8 [3] */

 IP4_7_5 [3] */

 IP4_4_2 [3] */

 IP4_1_0 [2] */

 IP5_31 [1] */

 IP5_30_29 [2] */

 IP5_28 [1] */

 IP5_27_24 [4] */

 IP5_23_21 [3] */

 IP5_20_17 [4] */

 IP5_16_15 [2] */

 IP5_14_13 [2] */

 IP5_12_11 [2] */

 IP5_10_9 [2] */

 IP5_8 [1] */

 IP5_7 [1] */

 IP5_6 [1] */

 IP5_5 [1] */

 IP5_4 [1] */

 IP5_3 [1] */

 IP5_2_0 [3] */

 IP6_31 [1] */

 IP6_30_29 [2] */

 IP_28_27 [2] */

 IP6_26_25 [2] */

 IP6_24_23 [2] */

 IP6_22_20 [3] */

 IP6_19_18 [2] */

 IP6_17_15 [3] */

 IP6_14_12 [3] */

 IP6_11_9 [3] */

 IP6_8 [1] */

 IP6_7_6 [2] */

 IP6_5_4 [2] */

 IP6_3_2 [2] */

 IP6_1_0 [2] */

 IP7_31 [1] */

 IP7_30_29 [2] */

 IP7_28_27 [2] */

 IP7_26_25 [2] */

 IP7_24_23 [2] */

 IP7_22_21 [2] */

 IP7_20_19 [2] */

 IP7_18_17 [2] */

 IP7_16_15 [2] */

 IP7_14_13 [2] */

 IP7_12_10 [3] */

 IP7_9_7 [3] */

 IP7_6_4 [3] */

 IP7_3_2 [2] */

 IP7_1_0 [2] */

 IP8_31 [1] */

 IP8_30_28 [3] */

 IP8_27_25 [3] */

 IP8_24_23 [2] */

 IP8_22_21 [2] */

 IP8_20 [1] */

 IP8_19 [1] */

 IP8_18 [1] */

 IP8_17_16 [2] */

 IP8_15_12 [4] */

 IP8_11_8 [4] */

 IP8_7_4 [4] */

 IP8_3_0 [4] */

 IP9_31_30 [2] */

 IP9_29_28 [2] */

 IP9_27_26 [2] */

 IP9_25_24 [2] */

 IP9_23_22 [2] */

 IP9_21_19 [3] */

 IP9_18_16 [3] */

 IP9_15_14 [2] */

 IP9_13_12 [2] */

 IP9_11_10 [2] */

 IP9_9_8 [2] */

 IP9_7 [1] */

 IP9_6 [1] */

 IP9_5 [1] */

 IP9_4 [1] */

 IP9_3_2 [2] */

 IP9_1_0 [2] */

 IP10_31_29 [3] */

 IP10_28_26 [3] */

 IP10_25_24 [2] */

 IP10_23_21 [3] */

 IP10_20_18 [3] */

 IP10_17_15 [3] */

 IP10_14_12 [3] */

 IP10_11_9 [3] */

 IP10_8_6 [3] */

 IP10_5_3 [3] */

 IP10_2_0 [3] */

 IP11_31_30 [2] */

 IP11_29_27 [3] */

 IP11_26_24 [3] */

 IP11_23_21 [3] */

 IP11_20_18 [3] */

 IP11_17_15 [3] */

 IP11_14_12 [3] */

 IP11_11_9 [3] */

 IP11_8_6 [3] */

 IP11_5_3 [3] */

 IP11_2_0 [3] */

 IP12_31_28 [4] */

 IP12_27_24 [4] */

 IP12_23_20 [4] */

 IP12_19_18 [2] */

 IP12_17_15 [3] */

 IP12_14_12 [3] */

 IP12_11_9 [3] */

 IP12_8_6 [3] */

 IP12_5_3 [3] */

 IP12_2_0 [3] */

 SEL_SCIF5 [2] */

 SEL_SCIF4 [2] */

 SEL_SCIF3 [3] */

 SEL_SCIF2 [3] */

 SEL_SCIF1 [2] */

 SEL_SCIF0 [2] */

 SEL_SSI9 [2] */

 SEL_SSI8 [2] */

 SEL_SSI7 [2] */

 SEL_VI0 [1] */

 SEL_SD2 [1] */

 SEL_INT3 [1] */

 SEL_INT2 [1] */

 SEL_INT1 [1] */

 SEL_INT0 [1] */

 SEL_IE [1] */

 SEL_EXBUS2 [2] */

 SEL_EXBUS1 [1] */

 SEL_EXBUS0 [2] */

 SEL_TMU1 [2] */

 SEL_TMU0 [2] */

 SEL_SCIF [2] */

 SEL_CANCLK [2] */

 SEL_CAN0 [1] */

 SEL_HSCIF1 [1] */

 SEL_HSCIF0 [1] */

 SEL_PWMFSW [3] */

 SEL_ADI [1] */

 [2] */

 [2] */

 [2] */

 SEL_GPS [2] */

 SEL_SIM [1] */

 SEL_HSPI2 [1] */

 SEL_HSPI1 [2] */

 SEL_I2C3 [1] */

 SEL_I2C2 [2] */

 SEL_I2C1 [2] */

 PMMR */

 SPDX-License-Identifier: GPL-2.0

/*

 * SH7757 (B0 step) Pinmux

 *

 *  Copyright (C) 2009-2010  Renesas Solutions Corp.

 *

 *  Author : Yoshihiro Shimoda <shimoda.yoshihiro@renesas.com>

 *

 * Based on SH7723 Pinmux

 *  Copyright (C) 2008  Magnus Damm

 PTA (mobule: LBSC, RGMII) */

 PTB (mobule: INTC, ONFI, TMU) */

 PTC (mobule: IRQ, PWMU) */

 PTD (mobule: SPI0, DMAC) */

 PTE (mobule: RMII) */

 PTF (mobule: RMII, SerMux) */

 PTG (mobule: system, LBSC, LPC, WDT, LPC, eMMC) */

 PTH (mobule: SPI1, LPC, DMAC, ADC) */

 PTI (mobule: LBSC, SDHI) */

 PTJ (mobule: SCIF234) */

 PTK (mobule: SERMUX, LBSC, SCIF) */

 PTL (mobule: SERMUX, SCIF, LBSC, AUD) */

 PTM (mobule: LBSC, IIC) */

 PTN (mobule: USB, JMC, SGPIO, WDT) */

 PTO (mobule: SGPIO, SerMux) */

 PTQ (mobule: LPC) */

 PTR (mobule: GRA, IIC) */

 PTS (mobule: GRA, IIC) */

 PTT (mobule: PWMX, AUD) */

 PTU (mobule: LPC, APM) */

 PTV (mobule: LBSC, SerMux, R-SPI, EVC, GRA) */

 PTW (mobule: LBSC, EVC, SCIF) */

 PTX (mobule: LBSC, SCIF, SIM) */

 PTY (mobule: LBSC) */

 PTZ (mobule: eMMC, ONFI) */

 PTA GPIO */

 PTB GPIO */

 PTC GPIO */

 PTD GPIO */

 PTE GPIO */

 PTF GPIO */

 PTG GPIO */

 PTH GPIO */

 PTI GPIO */

 PTJ GPIO */

 PTK GPIO */

 PTL GPIO */

 PTM GPIO */

 PTN GPIO */

 PTO GPIO */

 PTQ GPIO */

 PTR GPIO */

 PTS GPIO */

 PTT GPIO */

 PTU GPIO */

 PTV GPIO */

 PTW GPIO */

 PTX GPIO */

 PTY GPIO */

 PTZ GPIO */

 PTA FN */

 PTB FN */

 PTC FN */

 PTD FN */

 PTE FN */

 PTF FN */

 PTG FN */

 PTH FN */

 PTI FN */

 PTJ FN */

 PTK FN */

 PTL FN */

 PTM FN */

 PTN FN */

 PTO FN */

 PTP FN */

 PTQ FN */

 PTR FN */

 DDC3? */

 DDC2? */

 PTS FN */

 DDC1? */

 DDC0? */

 PTT FN */

 PTU FN */

 PTV FN */

 PTW FN */

 PTX FN */

 PTY FN */

 PTZ FN */

 PTA */

 PTB */

 PTC */

 PTD */

 PTE */

 PTF */

 PTG */

 PTH */

 PTI */

 PTJ */

 PTK */

 PTL */

 PTM */

 PTN */

 PTO */

 PTP */

 PTQ */

 PTR */

 PTS */

 PTT */

 PTU */

 PTV */

 PTW */

 PTX */

 PTY */

 PTZ */

 PTA (mobule: LBSC, RGMII) */

 PTB (mobule: INTC, ONFI, TMU) */

 PTC (mobule: IRQ, PWMU) */

 PTD (mobule: SPI0, DMAC) */

 PTE (mobule: RMII) */

 PTF (mobule: RMII, SerMux) */

 PTG (mobule: system, LBSC, LPC, WDT, LPC, eMMC) */

 PTH (mobule: SPI1, LPC, DMAC, ADC) */

 PTI (mobule: LBSC, SDHI) */

 PTJ (mobule: SCIF234, SERMUX) */

 PTK (mobule: SERMUX, LBSC, SCIF) */

 PTL (mobule: SERMUX, SCIF, LBSC, AUD) */

 PTM (mobule: LBSC, IIC) */

 PTN (mobule: USB, JMC, SGPIO, WDT) */

 PTO (mobule: SGPIO, SerMux) */

 PTP (mobule: EVC, ADC) */

 PTQ (mobule: LPC) */

 PTR (mobule: GRA, IIC) */

 PTS (mobule: GRA, IIC) */

 PTT (mobule: PWMX, AUD) */

 PTU (mobule: LPC, APM) */

 PTV (mobule: LBSC, SerMux, R-SPI, EVC, GRA) */

 PTW (mobule: LBSC, EVC, SCIF) */

 PTX (mobule: LBSC) */

 PTY (mobule: LBSC) */

 PTZ (mobule: eMMC, ONFI) */

 reserved: always set 1 */

 reserved: always set 1 */

 reserved: always set 1 */

 FIXME: Remove it? */

 reserved: always set 1 */

 reserved: always set 1 */

 SPDX-License-Identifier: GPL-2.0

/*

 * R8A7796 (R-Car M3-W/W+) support - PFC hardware block.

 *

 * Copyright (C) 2016-2019 Renesas Electronics Corp.

 *

 * This file is based on the drivers/pinctrl/renesas/pfc-r8a7795.c

 *

 * R-Car Gen3 processor support - PFC hardware block.

 *

 * Copyright (C) 2015  Renesas Electronics Corporation

/*

 * F_() : just information

 * FM() : macro for FN_xxx / xxx_MARK

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 GPSR5 */

 GPSR6 */

 GPSR7 */

 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 MOD_SEL0 */			 1 */			 3 */			 5 */			 7 */

 MOD_SEL1 */			 1 */			 3 */			 5 */			 7 */

 MOD_SEL2 */			 1 */			 3 */			 5 */			 7 */

/*

 * These pins are not able to be muxed but have other properties

 * that can be set, such as drive-strength or pull-up/pull-down enable.

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 IPSR12 */

 IPSR13 */

 IPSR14 */

 IPSR15 */

 IPSR16 */

 IPSR17 */

 IPSR18 */

/*

 * Static pins can not be muxed between different functions but

 * still need mark entries in the pinmux list. Add each static

 * pin to the list without an associated function. The sh-pfc

 * core will do the right thing and skip trying to mux the pin

 * while still applying configuration to it.

/*

 * Pins not associated with a GPIO port.

 - AUDIO CLOCK ------------------------------------------------------------ */

 CLK A */

 CLK A */

 CLK A */

 CLK B */

 CLK B */

 CLK C */

 CLK C */

 CLKOUT */

 CLKOUT */

 CLKOUT */

 CLKOUT */

 CLKOUT1 */

 CLKOUT1 */

 CLKOUT2 */

 CLKOUT2 */

 CLKOUT3 */

 CLKOUT3 */

 - EtherAVB --------------------------------------------------------------- */

 AVB_LINK */

 AVB_MAGIC_ */

 AVB_PHY_INT */

 AVB_MDC, AVB_MDIO */

	/*

	 * AVB_TX_CTL, AVB_TXC, AVB_TD0,

	 * AVB_TD1, AVB_TD2, AVB_TD3,

	 * AVB_RX_CTL, AVB_RXC, AVB_RD0,

	 * AVB_RD1, AVB_RD2, AVB_RD3,

	 * AVB_TXCREFCLK

 AVB_AVTP_PPS */

 AVB_AVTP_MATCH_A */

 AVB_AVTP_CAPTURE_A */

  AVB_AVTP_MATCH_B */

 AVB_AVTP_CAPTURE_B */

 - CAN ------------------------------------------------------------------ */

 TX, RX */

 TX, RX */

 TX, RX */

 - CAN Clock -------------------------------------------------------------- */

 CLK */

 - CAN FD --------------------------------------------------------------- */

 TX, RX */

 TX, RX */

 TX, RX */

 - DRIF0 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 - DRIF1 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 - DRIF2 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 - DRIF3 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 CONFIG_PINCTRL_PFC_R8A77960 || CONFIG_PINCTRL_PFC_R8A77961 */

 - DU --------------------------------------------------------------------- */

 R[7:2], G[7:2], B[7:2] */

 R[7:0], G[7:0], B[7:0] */

 CLKOUT */

 CLKOUT */

 EXVSYNC/VSYNC, EXHSYNC/HSYNC */

 EXDISP/EXODDF/EXCDE */

 CDE */

 DISP */

 - HSCIF0 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 - HSCIF1 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 - HSCIF2 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 - HSCIF3 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 RX, TX */

 RX, TX */

 - HSCIF4 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 - I2C -------------------------------------------------------------------- */

 SCL, SDA */

 SDA, SCL */

 SDA, SCL */

 SDA, SCL */

 SDA, SCL */

 SCL, SDA */

 SCL, SDA */

 SDA, SCL */

 SDA, SCL */

 SDA, SCL */

 - INTC-EX ---------------------------------------------------------------- */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 - MLB+ ------------------------------------------------------------------- */

 CONFIG_PINCTRL_PFC_R8A77960 || CONFIG_PINCTRL_PFC_R8A77961 */

 - MSIOF0 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF1 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF2 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF3 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - PWM0 --------------------------------------------------------------------*/

 PWM */

 - PWM1 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM2 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM3 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM4 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM5 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM6 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - QSPI0 ------------------------------------------------------------------ */

 QSPI0_SPCLK, QSPI0_SSL */

 QSPI0_MOSI_IO0, QSPI0_MISO_IO1 */

 QSPI0_MOSI_IO0, QSPI0_MISO_IO1 */

 QSPI0_IO2, QSPI0_IO3 */

 - QSPI1 ------------------------------------------------------------------ */

 QSPI1_SPCLK, QSPI1_SSL */

 QSPI1_MOSI_IO0, QSPI1_MISO_IO1 */

 QSPI1_MOSI_IO0, QSPI1_MISO_IO1 */

 QSPI1_IO2, QSPI1_IO3 */

 - SCIF0 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 - SCIF1 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 - SCIF2 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 - SCIF3 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 - SCIF4 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 - SCIF5 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 - SCIF Clock ------------------------------------------------------------- */

 SCIF_CLK */

 SCIF_CLK */

 - SDHI0 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI1 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI2 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 D[0:7] */

 CLK, CMD */

 CD */

 CD */

 WP */

 WP */

 DS */

 - SDHI3 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 D[0:7] */

 CLK, CMD */

 CD */

 WP */

 DS */

 - SSI -------------------------------------------------------------------- */

 SDATA */

 SCK, WS */

 SDATA */

 SDATA */

 SCK, WS */

 SCK, WS */

 SDATA */

 SDATA */

 SCK, WS */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SDATA */

 SDATA */

 SCK, WS */

 SCK, WS */

 - TMU -------------------------------------------------------------------- */

 TCLK */

 TCLK */

 TCLK */

 TCLK */

 - TPU ------------------------------------------------------------------- */

 TPU0TO0 */

 TPU0TO1 */

 TPU0TO2 */

 TPU0TO3 */

 - USB0 ------------------------------------------------------------------- */

 PWEN, OVC */

 - USB1 ------------------------------------------------------------------- */

 PWEN, OVC */

 - USB30 ------------------------------------------------------------------ */

 PWEN, OVC */

 - VIN4 ------------------------------------------------------------------- */

 HSYNC#, VSYNC# */

 FIELD */

 CLKENB */

 CLK */

 - VIN5 ------------------------------------------------------------------- */

 HSYNC#, VSYNC# */

 FIELD */

 CLKENB */

 CLK */

 Deprecated */

 CONFIG_PINCTRL_PFC_R8A77960 || CONFIG_PINCTRL_PFC_R8A77961 */

 Deprecated, please use "avb_mdio" instead */

 CONFIG_PINCTRL_PFC_R8A77960 || CONFIG_PINCTRL_PFC_R8A77961 */

 CONFIG_PINCTRL_PFC_R8A77960 || CONFIG_PINCTRL_PFC_R8A77961 */

 CONFIG_PINCTRL_PFC_R8A77960 || CONFIG_PINCTRL_PFC_R8A77961 */

 IP7_15_12 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_31_28 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_27_24 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_23_20 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_19_16 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_15_12 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_11_8  */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 RESERVED 15 */

 RESERVED 2, 1, 0 */

 RESERVED 8, 7 */

 RESERVED 16 */

 RESERVED 15, 14, 13, 12 */

 RESERVED 11, 10, 9, 8 */

 RESERVED 7, 6, 5, 4 */

 RESERVED 3, 2, 1 */

 QSPI0_SPCLK */

 QSPI0_MOSI_IO0 */

 QSPI0_MISO_IO1 */

 QSPI0_IO2 */

 QSPI0_IO3 */

 QSPI0_SSL */

 QSPI1_SPCLK */

 QSPI1_MOSI_IO0 */

 QSPI1_MISO_IO1 */

 QSPI1_IO2 */

 QSPI1_IO3 */

 QSPI1_SSL */

 RPC_INT# */

 RPC_WP# */

 RPC_RESET# */

 AVB_RX_CTL */

 AVB_RXC */

 AVB_RD0 */

 AVB_RD1 */

 AVB_RD2 */

 AVB_RD3 */

 AVB_TX_CTL */

 AVB_TXC */

 AVB_TD0 */

 AVB_TD1 */

 AVB_TD2 */

 AVB_TD3 */

 AVB_TXCREFCLK */

 AVB_MDIO */

 AVB_MDC */

 AVB_MAGIC */

 AVB_PHY_INT */

 AVB_LINK */

 AVB_AVTP_MATCH */

 AVB_AVTP_CAPTURE */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 PWM0 */

 PWM1 */

 PWM2 */

 A0 */

 A1 */

 A2 */

 A3 */

 A4 */

 A5 */

 A6 */

 A7 */

 A8 */

 A9 */

 A10 */

 A11 */

 A12 */

 A13 */

 A14 */

 A15 */

 A16 */

 A17 */

 A18 */

 A19 */

 CLKOUT */

 CS0 */

 CS1_A26 */

 BS */

 RD */

 RD_WR */

 WE0 */

 WE1 */

 EX_WAIT0 */

 PRESETOUT# */

 D0 */

 D1 */

 D2 */

 D3 */

 D4 */

 D5 */

 D6 */

 D7 */

 D8 */

 D9 */

 D10 */

 D11 */

 D12 */

 D13 */

 D14 */

 D15 */

 AVS1 */

 AVS2 */

 GP7_02 */

 GP7_03 */

 DU_DOTCLKIN0 */

 DU_DOTCLKIN1 */

 DU_DOTCLKIN2 */

 FSCLKST */

 TMS */

 TDO */

 ASEBRK */

 SD0_CLK */

 SD0_CMD */

 SD0_DAT0 */

 SD0_DAT1 */

 SD0_DAT2 */

 SD0_DAT3 */

 SD1_CLK */

 SD1_CMD */

 SD1_DAT0 */

 SD1_DAT1 */

 SD1_DAT2 */

 SD1_DAT3 */

 SD2_CLK */

 SD2_CMD */

 SD2_DAT0 */

 SD2_DAT1 */

 SD2_DAT2 */

 SD2_DAT3 */

 SD2_DS */

 SD3_CLK */

 SD3_CMD */

 SD3_DAT0 */

 SD3_DAT1 */

 SD3_DAT2 */

 SD3_DAT3 */

 SD3_DAT4 */

 SD3_DAT5 */

 SD3_DAT6 */

 SD3_DAT7 */

 SD3_DS */

 SD0_CD */

 SD0_WP */

 SD1_CD */

 SD1_WP */

 SCK0 */

 RX0 */

 TX0 */

 CTS0 */

 RTS0 */

 RX1 */

 TX1 */

 CTS1 */

 RTS1 */

 SCK2 */

 TX2 */

 RX2 */

 HSCK0 */

 HRX0 */

 HTX0 */

 HCTS0 */

 HRTS0 */

 MSIOF0_SCK */

 MSIOF0_SYNC */

 MSIOF0_SS1 */

 MSIOF0_TXD */

 MSIOF0_SS2 */

 MSIOF0_RXD */

 MLB_CLK */

 MLB_SIG */

 MLB_DAT */

 MLB_REF */

 SSI_SCK01239 */

 SSI_WS01239 */

 SSI_SDATA0 */

 SSI_SDATA1 */

 SSI_SDATA2 */

 SSI_SCK349 */

 SSI_WS349 */

 SSI_SDATA3 */

 SSI_SCK4 */

 SSI_WS4 */

 SSI_SDATA4 */

 SSI_SCK5 */

 SSI_WS5 */

 SSI_SDATA5 */

 SSI_SCK6 */

 SSI_WS6 */

 SSI_SDATA6 */

 SSI_SCK78 */

 SSI_WS78 */

 SSI_SDATA7 */

 SSI_SDATA8 */

 SSI_SDATA9 */

 AUDIO_CLKA */

 AUDIO_CLKB */

 USB0_PWEN */

 USB0_OVC */

 USB1_PWEN */

 USB1_OVC */

 USB30_PWEN */

 USB30_OVC */

 GP6_30 */

 GP6_31 */

 sentinel */ },

 QSPI0_SPCLK */

 QSPI0_MOSI_IO0 */

 QSPI0_MISO_IO1 */

 QSPI0_IO2 */

 QSPI0_IO3 */

 QSPI0_SSL */

 QSPI1_SPCLK */

 QSPI1_MOSI_IO0 */

 QSPI1_MISO_IO1 */

 QSPI1_IO2 */

 QSPI1_IO3 */

 QSPI1_SSL */

 RPC_INT# */

 RPC_WP# */

 RPC_RESET# */

 AVB_RX_CTL */

 AVB_RXC */

 AVB_RD0 */

 AVB_RD1 */

 AVB_RD2 */

 AVB_RD3 */

 AVB_TX_CTL */

 AVB_TXC */

 AVB_TD0 */

 AVB_TD1 */

 AVB_TD2 */

 AVB_TD3 */

 AVB_TXCREFCLK */

 AVB_MDIO */

 AVB_MDC */

 AVB_MAGIC */

 AVB_PHY_INT */

 AVB_LINK */

 AVB_AVTP_MATCH_A */

 AVB_AVTP_CAPTURE_A */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 PWM0 */

 PWM1_A */

 PWM2_A */

 A0 */

 A1 */

 A2 */

 A3 */

 A4 */

 A5 */

 A6 */

 A7 */

 A8 */

 A9 */

 A10 */

 A11 */

 A12 */

 A13 */

 A14 */

 A15 */

 A16 */

 A17 */

 A18 */

 A19 */

 CLKOUT */

 CS0_N */

 CS1_N */

 BS_N */

 RD_N */

 RD_WR_N */

 WE0_N */

 WE1_N */

 EX_WAIT0_A */

 PRESETOUT# */

 D0 */

 D1 */

 D2 */

 D3 */

 D4 */

 D5 */

 D6 */

 D7 */

 D8 */

 D9 */

 D10 */

 D11 */

 D12 */

 D13 */

 D14 */

 D15 */

 AVS1 */

 AVS2 */

 GP7_02 */

 GP7_03 */

 DU_DOTCLKIN0 */

 DU_DOTCLKIN1 */

 DU_DOTCLKIN2 */

 FSCLKST */

 EXTALR*/

 TRST# */

 TCK */

 TMS */

 TDI */

 ASEBRK */

 SD0_CLK */

 SD0_CMD */

 SD0_DAT0 */

 SD0_DAT1 */

 SD0_DAT2 */

 SD0_DAT3 */

 SD1_CLK */

 SD1_CMD */

 SD1_DAT0 */

 SD1_DAT1 */

 SD1_DAT2 */

 SD1_DAT3 */

 SD2_CLK */

 SD2_CMD */

 SD2_DAT0 */

 SD2_DAT1 */

 SD2_DAT2 */

 SD2_DAT3 */

 SD2_DS */

 SD3_CLK */

 SD3_CMD */

 SD3_DAT0 */

 SD3_DAT1 */

 SD3_DAT2 */

 SD3_DAT3 */

 SD3_DAT4 */

 SD3_DAT5 */

 SD3_DAT6 */

 SD3_DAT7 */

 SD3_DS */

 SD0_CD */

 SD0_WP */

 SD1_CD */

 SD1_WP */

 SCK0 */

 RX0 */

 TX0 */

 CTS0_N */

 RTS0_N */

 RX1_A */

 TX1_A */

 CTS1_N */

 RTS1_N */

 SCK2 */

 TX2_A */

 RX2_A */

 HSCK0 */

 HRX0 */

 HTX0 */

 HCTS0_N */

 HRTS0_N */

 MSIOF0_SCK */

 MSIOF0_SYNC */

 MSIOF0_SS1 */

 MSIOF0_TXD */

 MSIOF0_SS2 */

 MSIOF0_RXD */

 MLB_CLK */

 MLB_SIG */

 MLB_DAT */

 MLB_REF */

 SSI_SCK01239 */

 SSI_WS01239 */

 SSI_SDATA0 */

 SSI_SDATA1_A */

 SSI_SDATA2_A */

 SSI_SCK349 */

 SSI_WS349 */

 SSI_SDATA3 */

 SSI_SCK4 */

 SSI_WS4 */

 SSI_SDATA4 */

 SSI_SCK5 */

 SSI_WS5 */

 SSI_SDATA5 */

 SSI_SCK6 */

 SSI_WS6 */

 SSI_SDATA6 */

 SSI_SCK78 */

 SSI_WS78 */

 SSI_SDATA7 */

 SSI_SDATA8 */

 SSI_SDATA9_A */

 AUDIO_CLKA_A */

 AUDIO_CLKB_B */

 USB0_PWEN */

 USB0_OVC */

 USB1_PWEN */

 USB1_OVC */

 USB30_PWEN */

 USB30_OVC */

 GP6_30 */

 GP6_31 */

 PRESET# */

 sentinel */ },

 PMMR */

 PMMR */

 PMMR */

 SPDX-License-Identifier: GPL-2.0

/*

 * R8A77950 processor support - PFC hardware block.

 *

 * Copyright (C) 2015-2017  Renesas Electronics Corporation

/*

 * F_() : just information

 * FM() : macro for FN_xxx / xxx_MARK

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 GPSR5 */

 GPSR6 */

 GPSR7 */

 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 MOD_SEL0 */			 1 */			 3 */			 5 */			 7 */

 MOD_SEL1 */			 1 */			 3 */			 5 */			 7 */

 MOD_SEL2 */			 1 */			 3 */

/*

 * These pins are not able to be muxed but have other properties

 * that can be set, such as drive-strength or pull-up/pull-down enable.

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 IPSR12 */

 IPSR13 */

 IPSR14 */

 IPSR15 */

 IPSR16 */

 IPSR17 */

/*

 * Static pins can not be muxed between different functions but

 * still need mark entries in the pinmux list. Add each static

 * pin to the list without an associated function. The sh-pfc

 * core will do the right thing and skip trying to mux the pin

 * while still applying configuration to it.

/*

 * Pins not associated with a GPIO port.

 - AUDIO CLOCK ------------------------------------------------------------ */

 CLK A */

 CLK A */

 CLK A */

 CLK B */

 CLK B */

 CLK C */

 CLK C */

 CLKOUT */

 CLKOUT */

 CLKOUT */

 CLKOUT */

 CLKOUT1 */

 CLKOUT1 */

 CLKOUT2 */

 CLKOUT2 */

 CLKOUT3 */

 CLKOUT3 */

 - EtherAVB --------------------------------------------------------------- */

 AVB_LINK */

 AVB_MAGIC_ */

 AVB_PHY_INT */

 AVB_MDC, AVB_MDIO */

	/*

	 * AVB_TX_CTL, AVB_TXC, AVB_TD0,

	 * AVB_TD1, AVB_TD2, AVB_TD3,

	 * AVB_RX_CTL, AVB_RXC, AVB_RD0,

	 * AVB_RD1, AVB_RD2, AVB_RD3,

	 * AVB_TXCREFCLK

 AVB_AVTP_PPS */

 AVB_AVTP_MATCH_A */

 AVB_AVTP_CAPTURE_A */

  AVB_AVTP_MATCH_B */

 AVB_AVTP_CAPTURE_B */

 - CAN ------------------------------------------------------------------ */

 TX, RX */

 TX, RX */

 TX, RX */

 - CAN Clock -------------------------------------------------------------- */

 CLK */

 - CAN FD --------------------------------------------------------------- */

 TX, RX */

 TX, RX */

 TX, RX */

 - DRIF0 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 - DRIF1 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 - DRIF2 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 - DRIF3 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 - DU --------------------------------------------------------------------- */

 R[7:2], G[7:2], B[7:2] */

 R[7:0], G[7:0], B[7:0] */

 CLKOUT */

 CLKOUT */

 EXVSYNC/VSYNC, EXHSYNC/HSYNC */

 EXDISP/EXODDF/EXCDE */

 CDE */

 DISP */

 - HSCIF0 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 - HSCIF1 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 - HSCIF2 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 - HSCIF3 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 RX, TX */

 RX, TX */

 - HSCIF4 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 - I2C -------------------------------------------------------------------- */

 SCL, SDA */

 SDA, SCL */

 SDA, SCL */

 SDA, SCL */

 SDA, SCL */

 SCL, SDA */

 SCL, SDA */

 SDA, SCL */

 SDA, SCL */

 SDA, SCL */

 - INTC-EX ---------------------------------------------------------------- */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 - MLB+ ------------------------------------------------------------------- */

 - MSIOF0 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF1 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF2 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF3 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 TXD */

 RXD */

 - PWM0 --------------------------------------------------------------------*/

 PWM */

 - PWM1 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM2 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM3 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM4 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM5 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM6 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - QSPI0 ------------------------------------------------------------------ */

 QSPI0_SPCLK, QSPI0_SSL */

 QSPI0_MOSI_IO0, QSPI0_MISO_IO1 */

 QSPI0_MOSI_IO0, QSPI0_MISO_IO1, QSPI0_IO2, QSPI0_IO3 */

 - QSPI1 ------------------------------------------------------------------ */

 QSPI1_SPCLK, QSPI1_SSL */

 QSPI1_MOSI_IO0, QSPI1_MISO_IO1 */

 QSPI1_MOSI_IO0, QSPI1_MISO_IO1, QSPI1_IO2, QSPI1_IO3 */

 - SATA --------------------------------------------------------------------*/

 DEVSLP */

 DEVSLP */

 - SCIF0 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 - SCIF1 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 - SCIF2 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 - SCIF3 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 - SCIF4 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 - SCIF5 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 - SCIF Clock ------------------------------------------------------------- */

 SCIF_CLK */

 SCIF_CLK */

 - SDHI0 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI1 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI2 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 D[0:7] */

 CLK, CMD */

 CD */

 CD */

 WP */

 WP */

 DS */

 - SDHI3 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 D[0:7] */

 CLK, CMD */

 CD */

 WP */

 DS */

 - SSI -------------------------------------------------------------------- */

 SDATA */

 SCK, WS */

 SDATA */

 SDATA */

 SCK, WS */

 SCK, WS */

 SDATA */

 SDATA */

 SCK, WS */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SDATA */

 SDATA */

 SCK, WS */

 SCK, WS */

 - TMU -------------------------------------------------------------------- */

 TCLK */

 TCLK */

 TCLK */

 TCLK */

 - TPU ------------------------------------------------------------------- */

 TPU0TO0 */

 TPU0TO1 */

 TPU0TO2 */

 TPU0TO3 */

 - USB0 ------------------------------------------------------------------- */

 PWEN, OVC */

 - USB1 ------------------------------------------------------------------- */

 PWEN, OVC */

 - USB2 ------------------------------------------------------------------- */

 PWEN, OVC */

 - USB30 ------------------------------------------------------------------ */

 PWEN, OVC */

 - USB31 ------------------------------------------------------------------ */

 PWEN, OVC */

 Deprecated */

 Deprecated, please use "avb_mdio" instead */

 IP17_31_28 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP17_27_24 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP17_23_20 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP17_19_16 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP17_15_12 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP17_11_8  */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 RESERVED 31 */

 RESERVED 0 */ ))

 RESERVED 8, 7 */

 RESERVED 28 */

 RESERVED 27, 26, 25, 24 */

 RESERVED 23, 22, 21, 20 */

 RESERVED 19, 18, 17, 16 */

 RESERVED 15, 14, 13, 12 */

 RESERVED 11, 10, 9, 8 */

 RESERVED 7, 6, 5, 4 */

 RESERVED 3 */

 RESERVED 2, 1 */

 QSPI0_SPCLK */

 QSPI0_MOSI_IO0 */

 QSPI0_MISO_IO1 */

 QSPI0_IO2 */

 QSPI0_IO3 */

 QSPI0_SSL */

 QSPI1_SPCLK */

 QSPI1_MOSI_IO0 */

 QSPI1_MISO_IO1 */

 QSPI1_IO2 */

 QSPI1_IO3 */

 QSPI1_SSL */

 RPC_INT# */

 RPC_WP# */

 RPC_RESET# */

 AVB_RX_CTL */

 AVB_RXC */

 AVB_RD0 */

 AVB_RD1 */

 AVB_RD2 */

 AVB_RD3 */

 AVB_TX_CTL */

 AVB_TXC */

 AVB_TD0 */

 AVB_TD1 */

 AVB_TD2 */

 AVB_TD3 */

 AVB_TXCREFCLK */

 AVB_MDIO */

 AVB_MDC */

 AVB_MAGIC */

 AVB_PHY_INT */

 AVB_LINK */

 AVB_AVTP_MATCH */

 AVB_AVTP_CAPTURE */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 PWM0 */

 PWM1 */

 PWM2 */

 A0 */

 A1 */

 A2 */

 A3 */

 A4 */

 A5 */

 A6 */

 A7 */

 A8 */

 A9 */

 A10 */

 A11 */

 A12 */

 A13 */

 A14 */

 A15 */

 A16 */

 A17 */

 A18 */

 A19 */

 CLKOUT */

 CS0 */

 CS1_A26 */

 BS */

 RD */

 RD_WR */

 WE0 */

 WE1 */

 EX_WAIT0 */

 PRESETOUT# */

 D0 */

 D1 */

 D2 */

 D3 */

 D4 */

 D5 */

 D6 */

 D7 */

 D8 */

 D9 */

 D10 */

 D11 */

 D12 */

 D13 */

 D14 */

 D15 */

 AVS1 */

 AVS2 */

 GP7_02 */

 GP7_03 */

 DU_DOTCLKIN0 */

 DU_DOTCLKIN1 */

 DU_DOTCLKIN2 */

 DU_DOTCLKIN3 */

 FSCLKST# */

 TMS */

 TDO */

 ASEBRK */

 SD0_CLK */

 SD0_CMD */

 SD0_DAT0 */

 SD0_DAT1 */

 SD0_DAT2 */

 SD0_DAT3 */

 SD1_CLK */

 SD1_CMD */

 SD1_DAT0 */

 SD1_DAT1 */

 SD1_DAT2 */

 SD1_DAT3 */

 SD2_CLK */

 SD2_CMD */

 SD2_DAT0 */

 SD2_DAT1 */

 SD2_DAT2 */

 SD2_DAT3 */

 SD2_DS */

 SD3_CLK */

 SD3_CMD */

 SD3_DAT0 */

 SD3_DAT1 */

 SD3_DAT2 */

 SD3_DAT3 */

 SD3_DAT4 */

 SD3_DAT5 */

 SD3_DAT6 */

 SD3_DAT7 */

 SD3_DS */

 SD0_CD */

 SD0_WP */

 SD1_CD */

 SD1_WP */

 SCK0 */

 RX0 */

 TX0 */

 CTS0 */

 RTS0 */

 RX1 */

 TX1 */

 CTS1 */

 RTS1 */

 SCK2 */

 TX2 */

 RX2 */

 HSCK0 */

 HRX0 */

 HTX0 */

 HCTS0 */

 HRTS0 */

 MSIOF0_SCK */

 MSIOF0_SYNC */

 MSIOF0_SS1 */

 MSIOF0_TXD */

 MSIOF0_SS2 */

 MSIOF0_RXD */

 MLB_CLK */

 MLB_SIG */

 MLB_DAT */

 MLB_REF */

 SSI_SCK01239 */

 SSI_WS01239 */

 SSI_SDATA0 */

 SSI_SDATA1 */

 SSI_SDATA2 */

 SSI_SCK349 */

 SSI_WS349 */

 SSI_SDATA3 */

 SSI_SCK4 */

 SSI_WS4 */

 SSI_SDATA4 */

 SSI_SCK5 */

 SSI_WS5 */

 SSI_SDATA5 */

 SSI_SCK6 */

 SSI_WS6 */

 SSI_SDATA6 */

 SSI_SCK78 */

 SSI_WS78 */

 SSI_SDATA7 */

 SSI_SDATA8 */

 SSI_SDATA9 */

 AUDIO_CLKA */

 AUDIO_CLKB */

 USB0_PWEN */

 USB0_OVC */

 USB1_PWEN */

 USB1_OVC */

 USB30_PWEN */

 USB30_OVC */

 USB31_PWEN */

 USB31_OVC */

 sentinel */ },

 QSPI0_SPCLK */

 QSPI0_MOSI_IO0 */

 QSPI0_MISO_IO1 */

 QSPI0_IO2 */

 QSPI0_IO3 */

 QSPI0_SSL */

 QSPI1_SPCLK */

 QSPI1_MOSI_IO0 */

 QSPI1_MISO_IO1 */

 QSPI1_IO2 */

 QSPI1_IO3 */

 QSPI1_SSL */

 RPC_INT# */

 RPC_WP# */

 RPC_RESET# */

 AVB_RX_CTL */

 AVB_RXC */

 AVB_RD0 */

 AVB_RD1 */

 AVB_RD2 */

 AVB_RD3 */

 AVB_TX_CTL */

 AVB_TXC */

 AVB_TD0 */

 AVB_TD1 */

 AVB_TD2 */

 AVB_TD3 */

 AVB_TXCREFCLK */

 AVB_MDIO */

 AVB_MDC */

 AVB_MAGIC */

 AVB_PHY_INT */

 AVB_LINK */

 AVB_AVTP_MATCH_A */

 AVB_AVTP_CAPTURE_A */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 PWM0 */

 PWM1_A */

 PWM2_A */

 A0 */

 A1 */

 A2 */

 A3 */

 A4 */

 A5 */

 A6 */

 A7 */

 A8 */

 A9 */

 A10 */

 A11 */

 A12 */

 A13 */

 A14 */

 A15 */

 A16 */

 A17 */

 A18 */

 A19 */

 CLKOUT */

 CS0_N */

 CS1_N_A26 */

 BS_N */

 RD_N */

 RD_WR_N */

 WE0_N */

 WE1_N */

 EX_WAIT0_A */

 PRESETOUT# */

 D0 */

 D1 */

 D2 */

 D3 */

 D4 */

 D5 */

 D6 */

 D7 */

 D8 */

 D9 */

 D10 */

 D11 */

 D12 */

 D13 */

 D14 */

 D15 */

 AVS1 */

 AVS2 */

 GP7_02 */

 GP7_03 */

 DU_DOTCLKIN0 */

 DU_DOTCLKIN1 */

 DU_DOTCLKIN2 */

 DU_DOTCLKIN3 */

 FSCLKST# */

 EXTALR*/

 TRST# */

 TCK */

 TMS */

 TDI */

 ASEBRK */

 SD0_CLK */

 SD0_CMD */

 SD0_DAT0 */

 SD0_DAT1 */

 SD0_DAT2 */

 SD0_DAT3 */

 SD1_CLK */

 SD1_CMD */

 SD1_DAT0 */

 SD1_DAT1 */

 SD1_DAT2 */

 SD1_DAT3 */

 SD2_CLK */

 SD2_CMD */

 SD2_DAT0 */

 SD2_DAT1 */

 SD2_DAT2 */

 SD2_DAT3 */

 SD2_DS */

 SD3_CLK */

 SD3_CMD */

 SD3_DAT0 */

 SD3_DAT1 */

 SD3_DAT2 */

 SD3_DAT3 */

 SD3_DAT4 */

 SD3_DAT5 */

 SD3_DAT6 */

 SD3_DAT7 */

 SD3_DS */

 SD0_CD */

 SD0_WP */

 SD1_CD */

 SD1_WP */

 SCK0 */

 RX0 */

 TX0 */

 CTS0_N */

 RTS0_N */

 RX1_A */

 TX1_A */

 CTS1_N */

 RTS1_N */

 SCK2 */

 TX2_A */

 RX2_A */

 HSCK0 */

 HRX0 */

 HTX0 */

 HCTS0_N */

 HRTS0_N */

 MSIOF0_SCK */

 MSIOF0_SYNC */

 MSIOF0_SS1 */

 MSIOF0_TXD */

 MSIOF0_SS2 */

 MSIOF0_RXD */

 MLB_CLK */

 MLB_SIG */

 MLB_DAT */

 MLB_REF */

 SSI_SCK01239 */

 SSI_WS01239 */

 SSI_SDATA0 */

 SSI_SDATA1_A */

 SSI_SDATA2_A */

 SSI_SCK349 */

 SSI_WS349 */

 SSI_SDATA3 */

 SSI_SCK4 */

 SSI_WS4 */

 SSI_SDATA4 */

 SSI_SCK5 */

 SSI_WS5 */

 SSI_SDATA5 */

 SSI_SCK6 */

 SSI_WS6 */

 SSI_SDATA6 */

 SSI_SCK78 */

 SSI_WS78 */

 SSI_SDATA7 */

 SSI_SDATA8 */

 SSI_SDATA9_A */

 AUDIO_CLKA_A */

 AUDIO_CLKB_B */

 USB0_PWEN */

 USB0_OVC */

 USB1_PWEN */

 USB1_OVC */

 USB30_PWEN */

 USB30_OVC */

 USB31_PWEN */

 USB31_OVC */

 sentinel */ },

 PMMR */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2014-2018 Renesas Electronics Europe Limited

 *

 * Phil Edworthy <phil.edworthy@renesas.com>

 * Based on a driver originally written by Michel Pollet at Renesas.

 Field positions and masks in the pinmux registers */

/*

 * The hardware manual describes two levels of multiplexing, but it's more

 * logical to think of the hardware as three levels, with level 3 consisting of

 * the multiplexing for Ethernet MDIO signals.

 *

 * Level 1 functions go from 0 to 9, with level 1 function '15' (0xf) specifying

 * that level 2 functions are used instead. Level 2 has a lot more options,

 * going from 0 to 61. Level 3 allows selection of MDIO functions which can be

 * floating, or one of seven internal peripherals. Unfortunately, there are two

 * level 2 functions that can select MDIO, and two MDIO channels so we have four

 * sets of level 3 functions.

 *

 * For this driver, we've compounded the numbers together, so:

 *    0 to   9 is level 1

 *   10 to  71 is 10 + level 2 number

 *   72 to  79 is 72 + MDIO0 source for level 2 MDIO function.

 *   80 to  87 is 80 + MDIO0 source for level 2 MDIO_E1 function.

 *   88 to  95 is 88 + MDIO1 source for level 2 MDIO function.

 *   96 to 103 is 96 + MDIO1 source for level 2 MDIO_E1 function.

 * Examples:

 *  Function 28 corresponds UART0

 *  Function 73 corresponds to MDIO0 to GMAC0

 *

 * There are 170 configurable pins (called PL_GPIO in the datasheet).

/*

 * Structure detailing the HW registers on the RZ/N1 devices.

 * Both the Level 1 mux registers and Level 2 mux registers have the same

 * structure. The only difference is that Level 2 has additional MDIO registers

 * at the end.

 0x400 */

 MDIO mux registers, level2 only */

/**

 * struct rzn1_pmx_func - describes rzn1 pinmux functions

 * @name: the name of this specific function

 * @groups: corresponding pin groups

 * @num_groups: the number of groups

/**

 * struct rzn1_pin_group - describes an rzn1 pin group

 * @name: the name of this specific pin group

 * @func: the name of the function selected by this group

 * @npins: the number of pins in this group array, i.e. the number of

 *	elements in .pins so we can iterate over that array

 * @pins: array of pins. Needed due to pinctrl_ops.get_group_pins()

 * @pin_ids: array of pin_ids, i.e. the value used to select the mux

	/*

	 * The pinmux configuration is locked by writing the physical address of

	 * the status_protect register to itself. It is unlocked by writing the

	 * address | 1.

/*

 * Using a composite pin description, set the hardware pinmux registers

 * with the corresponding values.

 * Make sure to unlock write protection and reset it afterward.

 *

 * NOTE: There is no protection for potential concurrency, it is assumed these

 * calls are serialized already.

 Level 3 MDIO multiplexing */

 Get MDIO func, and convert the func to the level 2 number */

 Note here, we do not allow anything past the MDIO Mux values */

 If either configuration changes, we update both anyway */

/*

 * This function is called for each pinctl 'Function' node.

 * Sub-nodes can be used to describe multiple 'Groups' for the 'Function'

 * If there aren't any sub-nodes, the 'Group' is essentially the 'Function'.

 * Each 'Group' uses pinmux = <...> to detail the pins and data used to select

 * the functionality. Each 'Group' has optional pin configurations that apply

 * to all pins in the 'Group'.

 Get the group's pin configuration */

 Increase the number of maps to cover this group */

 Associate the group with the function */

 Associate the group's pin configuration with the group */

 configs do not match between two pins */

 Initialise group */

	/*

	 * The binding format is

	 *	pinmux = <PIN_FUNC_ID CONFIG ...>,

	 * do sanity check and calculate pins number

 Initialise function */

 Create state holders etc for this driver */

 SPDX-License-Identifier: GPL-2.0

/*

 * R8A7790 processor support

 *

 * Copyright (C) 2013  Renesas Electronics Corporation

 * Copyright (C) 2013  Magnus Damm

 * Copyright (C) 2012  Renesas Solutions Corp.

 * Copyright (C) 2012  Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

/*

 * All pins assigned to GPIO bank 3 can be used for SD interfaces in

 * which case they support both 3.3V and 1.8V signalling.

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 GPSR5 */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 IPSR12 */

 IPSR13 */

 IPSR14 */

 IPSR15 */

 IPSR16 */

 PINMUX_DATA(GP_M_N_DATA, GP_M_N_FN...), */

/*

 * Pins not associated with a GPIO port.

 - AUDIO CLOCK ------------------------------------------------------------ */

 CLK A */

 CLK B */

 CLK C */

 CLK OUT */

 CLK OUT B */

 CLK OUT C */

 CLK OUT D */

 - AVB -------------------------------------------------------------------- */

 - CAN0 ----------------------------------------------------------------- */

 CAN0 RX */

 CAN0 TX */

 CAN0 RXB */

 CAN0 TXB */

 CAN0 RXC */

 CAN0 TXC */

 CAN0 RXD */

 CAN0 TXD */

 - CAN1 ----------------------------------------------------------------- */

 CAN1 RX */

 CAN1 TX */

 CAN1 RXB */

 CAN1 TXB */

 - CAN Clock -------------------------------------------------------------- */

 CLK */

 CLK */

 - DU RGB ----------------------------------------------------------------- */

 R[7:2], G[7:2], B[7:2] */

 R[7:0], G[7:0], B[7:0] */

 CLKOUT */

 CLKOUT */

 VSYNC, HSYNC, DISP */

 VSYNC, HSYNC, DISP */

 CDE */

 - DU0 -------------------------------------------------------------------- */

 CLKIN */

 - DU1 -------------------------------------------------------------------- */

 CLKIN */

 - DU2 -------------------------------------------------------------------- */

 CLKIN */

 - ETH -------------------------------------------------------------------- */

 LINK */

 MAGIC */

 MDC, MDIO */

 RXD[0:1], RX_ER, CRS_DV, TXD[0:1], TX_EN, REF_CLK */

 - HSCIF0 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 RTS, CTS */

 RX, TX */

 RTS, CTS */

 RX, TX */

 RTS, CTS */

 RX, TX */

 RTS, CTS */

 RX, TX */

 RTS, CTS */

 - HSCIF1 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 - I2C0 ------------------------------------------------------------------- */

 SCL, SDA */

 - I2C1 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C2 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C3 ------------------------------------------------------------------- */

 SCL, SDA */

 - IIC0 (I2C4) ------------------------------------------------------------ */

 SCL, SDA */

 - IIC1 (I2C5) ------------------------------------------------------------ */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - IIC2 (I2C6) ------------------------------------------------------------ */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - IIC3 (I2C7) ------------------------------------------------------------ */

 SCL, SDA */

 - INTC ------------------------------------------------------------------- */

 IRQ */

 IRQ */

 IRQ */

 IRQ */

 - MLB+ ------------------------------------------------------------------- */

 CONFIG_PINCTRL_PFC_R8A7790 */

 - MMCIF0 ----------------------------------------------------------------- */

 D[0] */

 D[0:3] */

 D[0:7] */

 CLK, CMD */

 - MMCIF1 ----------------------------------------------------------------- */

 D[0] */

 D[0:3] */

 D[0:7] */

 CLK, CMD */

 - MSIOF0 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 SCK */

 SS1 */

 SS2 */

 RXD */

 TXD */

 - MSIOF1 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 SCK */

 SS1 */

 SS2 */

 RXD */

 TXD */

 - MSIOF2 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 - MSIOF3 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 SCK */

 SYNC */

 RXD */

 TXD */

 - PWM -------------------------------------------------------------------- */

 - QSPI ------------------------------------------------------------------- */

 SPCLK, SSL */

 MOSI_IO0, MISO_IO1 */

 MOSI_IO0, MISO_IO1, IO2, IO3 */

 - SCIF0 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 - SCIF1 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 RX, TX */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 - SCIF2 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 - SCIFA0 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 - SCIFA1 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 - SCIFA2 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 RXD, TXD */

 SCK */

 - SCIFB0 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 - SCIFB1 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 RXD, TXD */

 RXD, TXD */

 SCK */

 RXD, TXD */

 RXD, TXD */

 SCK */

 - SCIFB2 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 - SCIF Clock ------------------------------------------------------------- */

 SCIF_CLK */

 SCIF_CLK */

 - SDHI0 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI1 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI2 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI3 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SSI -------------------------------------------------------------------- */

 SDATA0 */

 SCK, WS */

 SDATA1 */

 SCK, WS */

 SDATA2 */

 SCK, WS */

 SDATA3 */

 SCK, WS */

 SDATA4 */

 SCK, WS */

 SDATA5, SCK, WS */

 SDATA5, SCK, WS */

 SDATA5, SCK, WS */

 SDATA6, SCK, WS */

 SDATA6, SCK, WS */

 SDATA7 */

 SDATA7 */

 SDATA7 */

 SCK, WS */

 SCK, WS */

 SCK, WS */

 SDATA8 */

 SDATA8 */

 SDATA8 */

 SDATA9 */

 SCK, WS */

 - TPU0 ------------------------------------------------------------------- */

 TO */

 TO */

 TO */

 TO */

 - USB0 ------------------------------------------------------------------- */

 PWEN, OVC/VBUS */

 OVC/VBUS */

 - USB1 ------------------------------------------------------------------- */

 PWEN, OVC */

 PWEN */

 - USB2 ------------------------------------------------------------------- */

 PWEN, OVC */

 - VIN0 ------------------------------------------------------------------- */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 HSYNC */

 VSYNC */

 - VIN1 ------------------------------------------------------------------- */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 HSYNC */

 VSYNC */

 HSYNC */

 VSYNC */

 - VIN2 ----------------------------------------------------------------- */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 HSYNC */

 VSYNC */

 - VIN3 ----------------------------------------------------------------- */

 HSYNC */

 VSYNC */

 CONFIG_PINCTRL_PFC_R8A7790 */

 CONFIG_PINCTRL_PFC_R8A7790 */

 CONFIG_PINCTRL_PFC_R8A7790 */

 IP0_31 [1] */

 IP0_30_27 [4] */

 IP0_26_23 [4] */

 IP0_22_20 [3] */

 IP0_19_16 [4] */

 IP0_15_12 [4] */

 IP0_11_9 [3] */

 IP0_8_6 [3] */

 IP0_5_3 [3] */

 IP0_2_0 [3] */

 IP1_31_30 [2] */

 IP1_29_28 [2] */

 IP1_27_26 [2] */

 IP1_25_22 [4] */

 IP1_21_18 [4] */

 IP1_17_15 [3] */

 IP1_14_12 [3] */

 IP1_11_8 [4] */

 IP1_7_4 [4] */

 IP1_3_0 [4] */

 IP2_31_29 [3] */

 IP2_28_26 [3] */

 IP2_25_22 [4] */

 IP2_21_18 [4] */

 IP2_17_15 [3] */

 IP2_14_12 [3] */

 IP2_11_9 [3] */

 IP2_8_6 [3] */

 IP2_5_3 [3] */

 IP2_2_0 [3] */

 IP3_31_29 [3] */

 IP3_28_26 [3] */

 IP3_25_23 [3] */

 IP3_22_20 [3] */

 IP3_19_18 [2] */

 IP3_17_15 [3] */

 IP3_14_12 [3] */

 IP3_11_8 [4] */

 IP3_7_4 [4] */

 IP3_3_0 [4] */

 IP4_31_30 [2] */

 IP4_29_27 [3] */

 IP4_26_24 [3] */

 IP4_23_21 [3] */

 IP4_20_18 [3] */

 IP4_17_15 [3] */

 IP4_14_12 [3] */

 IP4_11_9 [3] */

 IP4_8_6 [3] */

 IP4_5_3 [3] */

 IP4_2_0 [3] */

 IP5_31_30 [2] */

 IP5_29_27 [3] */

 IP5_26_24 [3] */

 IP5_23_21 [3] */

 IP5_20_18 [3] */

 IP5_17_15 [3] */

 IP5_14_13 [2] */

 IP5_12_10 [3] */

 IP5_9_6 [4] */

 IP5_5_3 [3] */

 IP5_2_0 [3] */

 IP6_31_29 [3] */

 IP6_28_26 [3] */

 IP6_25_23 [3] */

 IP6_22_20 [3] */

 IP6_19_17 [3] */

 IP6_16_14 [3] */

 IP6_13_11 [3] */

 IP6_10_9 [2] */

 IP6_8_6 [3] */

 IP6_5_3 [3] */

 IP6_2_0 [3] */

 IP7_31 [1] */

 IP7_30_29 [2] */

 IP7_28_27 [2] */

 IP7_26_25 [2] */

 IP7_24_22 [3] */

 IP7_21_19 [3] */

 IP7_18_16 [3] */

 IP7_15_13 [3] */

 IP7_12_10 [3] */

 IP7_9_8 [2] */

 IP7_7_6 [2] */

 IP7_5_3 [3] */

 IP7_2_0 [3] */

 IP8_31 [1] */

 IP8_30_29 [2] */

 IP8_28 [1] */

 IP8_27 [1] */

 IP8_26 [1] */

 IP8_25_24 [2] */

 IP8_23_22 [2] */

 IP8_21_20 [2] */

 IP8_19_18 [2] */

 IP8_17_16 [2] */

 IP8_15_14 [2] */

 IP8_13_12 [2] */

 IP8_11_10 [2] */

 IP8_9_8 [2] */

 IP8_7_6 [2] */

 IP8_5_4 [2] */

 IP8_3_2 [2] */

 IP8_1_0 [2] */

 IP9_31_28 [4] */

 IP9_27_26 [2] */

 IP9_25_24 [2] */

 IP9_23_22 [2] */

 IP9_21_20 [2] */

 IP9_19_18 [2] */

 IP9_17_16 [2] */

 IP9_15_12 [4] */

 IP9_11_8 [4] */

 IP9_7_6 [2] */

 IP9_5_4 [2] */

 IP9_3_2 [2] */

 IP9_1_0 [2] */

 IP10_31_30 [2] */

 IP10_29_26 [4] */

 IP10_25_23 [3] */

 IP10_22_19 [4] */

 IP10_18_15 [4] */

 IP10_14_11 [4] */

 IP10_10_7 [4] */

 IP10_6_4 [3] */

 IP10_3_0 [4] */

 IP11_31_30 [2] */

 IP11_29_27 [3] */

 IP11_26_24 [3] */

 IP11_23_22 [2] */

 IP11_21_18 [4] */

 IP11_17_15 [3] */

 IP11_14_13 [2] */

 IP11_12_11 [2] */

 IP11_10_9 [2] */

 IP11_8_7 [2] */

 IP11_6_5 [2] */

 IP11_4 [1] */

 IP11_3_0 [4] */

 IP12_31 [1] */

 IP12_30_28 [3] */

 IP12_27_25 [3] */

 IP12_24_23 [2] */

 IP12_22_20 [3] */

 IP12_19_17 [3] */

 IP12_16_14 [3] */

 IP12_13_11 [3] */

 IP12_10_8 [3] */

 IP12_7_6 [2] */

 IP12_5_4 [2] */

 IP12_3_2 [2] */

 IP12_1_0 [2] */

 IP13_31 [1] */

 IP13_30_29 [2] */

 IP13_28_26 [3] */

 IP13_25_23 [3] */

 IP13_22_19 [4] */

 IP13_18_16 [3] */

 IP13_15_13 [3] */

 IP13_12_10 [3] */

 IP13_9_7 [3] */

 IP13_6_3 [4] */

 IP13_2_0 [3] */

 IP14_30 [1] */

 IP14_30_28 [3] */

 IP14_27_25 [3] */

 IP14_24_22 [3] */

 IP14_21_19 [3] */

 IP14_18_16 [3] */

 IP14_15_12 [4] */

 IP14_11_9 [3] */

 IP14_8_6 [3] */

 IP14_5_3 [3] */

 IP14_2_0 [3] */

 IP15_31_30 [2] */

 IP15_29_28 [2] */

 IP15_27_26 [2] */

 IP15_25_23 [3] */

 IP15_22_20 [3] */

 IP15_19_18 [2] */

 IP15_17_16 [2] */

 IP15_15_14 [2] */

 IP15_13_12 [2] */

 IP15_11_9 [3] */

 IP15_8_6 [3] */

 IP15_5_3 [3] */

 IP15_2_0 [3] */

 IP16_31_28 [4] */

 IP16_27_24 [4] */

 IP16_23_20 [4] */

 IP16_19_16 [4] */

 IP16_15_12 [4] */

 IP16_11_8 [4] */

 IP16_7 [1] */

 IP16_6 [1] */

 IP16_5_3 [3] */

 IP16_2_0 [3] */

 SEL_SCIF1 [3] */

 SEL_SCIFB [2] */

 SEL_SCIFB2 [2] */

 SEL_SCIFB1 [3] */

 SEL_SCIFA1 [2] */

 SEL_SCIF0 [1] */

 SEL_SCIFA [1] */

 SEL_SOF1 [1] */

 SEL_SSI7 [2] */

 SEL_SSI6 [1] */

 SEL_SSI5 [2] */

 SEL_VI3 [1] */

 SEL_VI2 [1] */

 SEL_VI1 [1] */

 SEL_VI0 [1] */

 SEL_TSIF1 [2] */

 RESERVED [1] */

 SEL_LBS [1] */

 SEL_TSIF0 [2] */

 SEL_SOF3 [1] */

 SEL_SOF0 [1] */

 RESERVED [3] */

 SEL_TMU1 [1] */

 SEL_HSCIF1 [1] */

 SEL_SCIFCLK [1] */

 SEL_CAN0 [2] */

 SEL_CANCLK [1] */

 SEL_SCIFA2 [2] */

 SEL_CAN1 [1] */

 RESERVED [2] */

 SEL_SCIF2 [1] */

 SEL_ADI [1] */

 SEL_SSP [1] */

 SEL_FM [3] */

 SEL_HSCIF0 [3] */

 SEL_GPS [2] */

 RESERVED [3] */

 SEL_SIM [2] */

 SEL_SSI8 [2] */

 SEL_IICDVFS [1] */

 SEL_IIC0 [1] */

 RESERVED [2] */

 RESERVED [4] */

 RESERVED [4] */

 RESERVED [2] */

 SEL_IEB [2] */

 RESERVED [4] */

 RESERVED [2] */

 SEL_IIC2 [3] */

 SEL_IIC1 [2] */

 SEL_I2C2 [3] */

 SEL_I2C1 [2] */

 A0 */

 A1 */

 A2 */

 A3 */

 A4 */

 A5 */

 A6 */

 A7 */

 A8 */

 A9 */

 A10 */

 A11 */

 A12 */

 A13 */

 A14 */

 A15 */

 A16 */

 A17 */

 A18 */

 A19 */

 A20 */

 A21 */

 A22 */

 A23 */

 A24 */

 A25 */

 EX_CS0# */

 EX_CS1# */

 EX_CS2# */

 EX_CS3# */

 EX_CS4# */

 EX_CS5# */

 PUPR1 pull-up pins */

 BS# */

 RD# */

 RD/WR# */

 WE0# */

 WE1# */

 EX_WAIT0 */

 AVS1 */

 AVS2 */

 CS0# */

 CS1#/A26 */

 TRST# */

 TCK */

 TMS */

 TDI */

 D0 */

 D1 */

 D2 */

 D3 */

 D4 */

 D5 */

 D6 */

 D7 */

 D8 */

 D9 */

 D10 */

 D11 */

 D12 */

 D13 */

 D14 */

 D15 */

 PUPR1 pull-down pins */

 ASEBRK#/ACK */

 DU_DOTCLKIN2 */

 VI0_CLK */

 VI0_DATA0_VI0_B0 */

 VI0_DATA1_VI0_B1 */

 VI0_DATA2_VI0_B2 */

 VI0_DATA3_VI0_B3 */

 VI0_DATA4_VI0_B4 */

 VI0_DATA5_VI0_B5 */

 VI0_DATA6_VI0_B6 */

 VI0_DATA7_VI0_B7 */

 VI1_CLK */

 VI1_DATA0_VI1_B0 */

 VI1_DATA1_VI1_B1 */

 VI1_DATA2_VI1_B2 */

 VI1_DATA3_VI1_B3 */

 VI1_DATA4_VI1_B4 */

 VI1_DATA5_VI1_B5 */

 VI1_DATA6_VI1_B6 */

 VI1_DATA7_VI1_B7 */

 DU_DOTCLKIN1 */

 MLB_CLK */

 MLB_SIG */

 MLB_DAT */

 DU_DOTCLKIN0 */

 SD0_CLK */

 SD0_CMD */

 SD0_DAT0 */

 SD0_DAT1 */

 SD0_DAT2 */

 SD0_DAT3 */

 SD0_CD */

 SD0_WP */

 SD1_CLK */

 SD1_CMD */

 SD1_DAT0 */

 SD1_DAT1 */

 SD1_DAT2 */

 SD1_DAT3 */

 SD1_CD */

 SD1_WP */

 SD2_CLK */

 SD2_CMD */

 SD2_DAT0 */

 SD2_DAT1 */

 SD2_DAT2 */

 SD2_DAT3 */

 SD2_CD */

 SD2_WP */

 SD3_CLK */

 SD3_CMD */

 SD3_DAT0 */

 SD3_DAT1 */

 SD3_DAT2 */

 SD3_DAT3 */

 SD3_CD */

 SD3_WP */

 SSI_SCK0129 */

 SSI_WS0129 */

 SSI_SDATA0 */

 SSI_SDATA1 */

 SSI_SDATA2 */

 SSI_SCK34 */

 SSI_WS34 */

 SSI_SDATA3 */

 SSI_SCK4 */

 SSI_WS4 */

 SSI_SDATA4 */

 SSI_SCK5 */

 SSI_WS5 */

 SSI_SDATA5 */

 SSI_SCK6 */

 SSI_WS6 */

 SSI_SDATA6 */

 SSI_SCK78 */

 SSI_WS78 */

 SSI_SDATA7 */

 SSI_SDATA8 */

 SSI_SDATA9 */

 AUDIO_CLKA */

 AUDIO_CLKB */

 DREQ0 */

 DACK0 */

 DREQ1 */

 DACK1 */

 DREQ2 */

 DACK2 */

 ETH_CRS_DV */

 ETH_RX_ER */

 SCIFA0_SCK */

 SCIFA0_RXD */

 SCIFA0_TXD */

 SCIFA0_CTS# */

 SCIFA0_RTS# */

 SCIFA1_RXD */

 SCIFA1_TXD */

 SCIFA1_CTS# */

 SCIFA1_RTS# */

 SCIFA2_SCK */

 SCIFA2_RXD */

 SCIFA2_TXD */

 HSCK0 */

 HRX0 */

 HTX0 */

 HCTS0# */

 HRTS0# */

 MSIOF0_SCK */

 MSIOF0_SYNC */

 MSIOF0_SS1 */

 MSIOF0_TXD */

 MSIOF0_SS2 */

 MSIOF0_RXD */

 USB0_PWEN */

 USB0_OVC_VBUS */

 USB1_PWEN */

 USB1_OVC */

 USB2_PWEN */

 USB2_OVC */

 ETH_RXD0 */

 ETH_RXD1 */

 ETH_LINK */

 ETH_REF_CLK */

 ETH_MDIO */

 ETH_TXD1 */

 ETH_TX_EN */

 ETH_MAGIC */

 ETH_TXD0 */

 ETH_MDC */

 PWM0 */

 PWM1 */

 PWM2 */

 sentinel */ }

 sentinel */ }

 Initialize TDSEL on old revisions */

 PMMR */

 PMMR */

 SPDX-License-Identifier: GPL-2.0

/*

 * R8A77980 processor support - PFC hardware block.

 *

 * Copyright (C) 2018 Renesas Electronics Corp.

 * Copyright (C) 2018 Cogent Embedded, Inc.

 *

 * This file is based on the drivers/pinctrl/renesas/pfc-r8a7795.c

 *

 * R-Car Gen3 processor support - PFC hardware block.

 *

 * Copyright (C) 2015 Renesas Electronics Corporation

/*

 * F_() : just information

 * FM() : macro for FN_xxx / xxx_MARK

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 GPSR5 */

 IPSRx */		 1 */			 3 */		 5 */		
 MOD_SEL0 */		 1 */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

/*

 * Pins not associated with a GPIO port.

 - AVB -------------------------------------------------------------------- */

 AVB_LINK */

 AVB_MAGIC */

 AVB_PHY_INT */

 AVB_MDC, AVB_MDIO */

	/*

	 * AVB_TX_CTL, AVB_TXC, AVB_TD0, AVB_TD1, AVB_TD2, AVB_TD3,

	 * AVB_RX_CTL, AVB_RXC, AVB_RD0, AVB_RD1, AVB_RD2, AVB_RD3,

 AVB_TXCREFCLK */

 AVB_AVTP_PPS */

 AVB_AVTP_CAPTURE */

 AVB_AVTP_MATCH */

 - CANFD0 ----------------------------------------------------------------- */

 CANFD0_TX, CANFD0_RX */

 CANFD0_TX, CANFD0_RX */

 - CANFD1 ----------------------------------------------------------------- */

 CANFD1_TX, CANFD1_RX */

 - CANFD Clock ------------------------------------------------------------ */

 CANFD_CLK */

 CANFD_CLK */

 - DU --------------------------------------------------------------------- */

 DU_DR[7:2], DU_DG[7:2], DU_DB[7:2] */

 DU_DR[7:0], DU_DG[7:0], DU_DB[7:0] */

 DU_DOTCLKOUT */

 DU_EXVSYNC/DU_VSYNC, DU_EXHSYNC/DU_HSYNC */

 DU_EXODDF/DU_ODDF/DISP/CDE */

 DU_CDE */

 DU_DISP */

 - GETHER ----------------------------------------------------------------- */

 GETHER_LINK */

 GETHER_PHY_INT */

 GETHER_MDC, GETHER_MDIO */

 GETHER_LINK */

 GETHER_PHY_INT */

 GETHER_MDC, GETHER_MDIO */

 GETHER_MAGIC */

	/*

	 * GETHER_TX_CTL, GETHER_TXC,

	 * GETHER_TD0, GETHER_TD1, GETHER_TD2, GETHER_TD3,

	 * GETHER_RX_CTL, GETHER_RXC,

	 * GETHER_RD0, GETHER_RD1, GETHER_RD2, GETHER_RD3,

 GETHER_TXCREFCLK */

 GETHER_TXCREFCLK_MEGA */

	/*

	 * GETHER_RMII_CRS_DV, GETHER_RMII_RX_ER,

	 * GETHER_RMII_RXD0, GETHER_RMII_RXD1,

	 * GETHER_RMII_TXD_EN, GETHER_RMII_TXD0,

	 * GETHER_RMII_TXD1, GETHER_RMII_REFCLK

 - HSCIF0 ----------------------------------------------------------------- */

 HRX0, HTX0 */

 HSCK0 */

 HRTS0#, HCTS0# */

 HRX0, HTX0 */

 HSCK0 */

 HRTS0#, HCTS0# */

 - HSCIF1 ----------------------------------------------------------------- */

 HRX1, HTX1 */

 HSCK1 */

 HRTS1#, HCTS1# */

 - HSCIF2 ----------------------------------------------------------------- */

 HRX2, HTX2 */

 HSCK2 */

 HRTS2#, HCTS2# */

 - HSCIF3 ----------------------------------------------------------------- */

 HRX3, HTX3 */

 HSCK3 */

 HRTS3#, HCTS3# */

 - I2C0 ------------------------------------------------------------------- */

 SDA0, SCL0 */

 - I2C1 ------------------------------------------------------------------- */

 SDA1, SCL1 */

 - I2C2 ------------------------------------------------------------------- */

 SDA2, SCL2 */

 - I2C3 ------------------------------------------------------------------- */

 SDA3, SCL3 */

 - I2C4 ------------------------------------------------------------------- */

 SDA4, SCL4 */

 - I2C5 ------------------------------------------------------------------- */

 SDA5, SCL5 */

 - INTC-EX ---------------------------------------------------------------- */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 - MMC -------------------------------------------------------------------- */

 MMC_D0 */

 MMC_D[0:3] */

 MMC_D[0:7] */

 MMC_CLK, MMC_CMD */

 MMC_CD */

 MMC_WP */

 MMC_DS */

 - MSIOF0 ----------------------------------------------------------------- */

 MSIOF0_SCK */

 MSIOF0_SYNC */

 MSIOF0_SS1 */

 MSIOF0_SS2 */

 MSIOF0_TXD */

 MSIOF0_RXD */

 - MSIOF1 ----------------------------------------------------------------- */

 MSIOF1_SCK */

 MSIOF1_SYNC */

 MSIOF1_SS1 */

 MSIOF1_SS2 */

 MSIOF1_TXD */

 MSIOF1_RXD */

 - MSIOF2 ----------------------------------------------------------------- */

 MSIOF2_SCK */

 MSIOF2_SYNC */

 MSIOF2_SS1 */

 MSIOF2_SS2 */

 MSIOF2_TXD */

 MSIOF2_RXD */

 - MSIOF3 ----------------------------------------------------------------- */

 MSIOF3_SCK */

 MSIOF3_SYNC */

 MSIOF3_SS1 */

 MSIOF3_SS2 */

 MSIOF3_TXD */

 MSIOF3_RXD */

 - PWM0 ------------------------------------------------------------------- */

 PWM0 */

 PWM0 */

 - PWM1 ------------------------------------------------------------------- */

 PWM1 */

 PWM1 */

 - PWM2 ------------------------------------------------------------------- */

 PWM2 */

 PWM2 */

 - PWM3 ------------------------------------------------------------------- */

 PWM3 */

 PWM3 */

 - PWM4 ------------------------------------------------------------------- */

 PWM4 */

 PWM4 */

 - QSPI0 ------------------------------------------------------------------ */

 SPCLK, SSL */

 MOSI_IO0, MISO_IO1 */

 MOSI_IO0, MISO_IO1, IO2, IO3 */

 - QSPI1 ------------------------------------------------------------------ */

 SPCLK, SSL */

 MOSI_IO0, MISO_IO1 */

 MOSI_IO0, MISO_IO1, IO2, IO3 */

 - RPC -------------------------------------------------------------------- */

 Octal-SPI flash: C/SCLK */

 HyperFlash: CK, CK# */

 Octal-SPI flash: S#/CS, DQS */

 HyperFlash: CS#, RDS */

 DQ[0:7] */

 RPC_RESET# */

 RPC_INT# */

 RPC_WP# */

 - SCIF0 ------------------------------------------------------------------ */

 RX0, TX0 */

 SCK0 */

 RTS0#, CTS0# */

 - SCIF1 ------------------------------------------------------------------ */

 RX1, TX1 */

 SCK1 */

 RTS1#, CTS1# */

 RX1, TX1 */

 - SCIF3 ------------------------------------------------------------------ */

 RX3, TX3 */

 SCK3 */

 RTS3#, CTS3# */

 - SCIF4 ------------------------------------------------------------------ */

 RX4, TX4 */

 SCK4 */

 RTS4#, CTS4# */

 - SCIF Clock ------------------------------------------------------------- */

 SCIF_CLK */

 SCIF_CLK */

 - TMU -------------------------------------------------------------------- */

 TCLK1 */

 TCLK1 */

 TCLK2 */

 TCLK2 */

 - TPU ------------------------------------------------------------------- */

 TPU0TO0 */

 TPU0TO1 */

 TPU0TO2 */

 TPU0TO3 */

 - VIN0 ------------------------------------------------------------------- */

 VI0_VSYNC#, VI0_HSYNC# */

 VI0_FIELD */

 VI0_CLKENB */

 VI0_CLK */

 - VIN1 ------------------------------------------------------------------- */

 VI1_VSYNC#, VI1_HSYNC# */

 VI1_FIELD */

 VI1_CLKENB */

 VI1_CLK */

 RESERVED 31, 30, 29, 28 */

 RESERVED 27, 26, 25, 24 */

 RESERVED 23, 22, 21, 20 */

 RESERVED 19, 18, 17, 16 */

 RESERVED 15, 14, 13, 12 */

 sentinel */ },

 DU_DR2 */

 DU_DR3 */

 DU_DR4 */

 DU_DR5 */

 DU_DR6 */

 DU_DR7 */

 DU_DG2 */

 DU_DG3 */

 DU_DG4 */

 DU_DG5 */

 DU_DG6 */

 DU_DG7 */

 DU_DB2 */

 DU_DB3 */

 DU_DB4 */

 DU_DB5 */

 DU_DB6 */

 DU_DB7 */

 DU_DOTCLKOUT */

 DU_EXHSYNC/DU_HSYNC */

 DU_EXVSYNC/DU_VSYNC */

 DU_EXODDF/DU_ODDF/DISP/CDE */

 DU_DOTCLKIN */

 PRESETOUT# */

 EXTALR */

 FSCLKST# */

 FSCLKST */

 IRQ0 */

 DCUTRST# */

 DCUTCK_LPDCLK */

 DCUTMS */

 DCUTDI_LPDI */

 VI0_CLK */

 VI0_CLKENB */

 VI0_HSYNC# */

 VI0_VSYNC# */

 VI0_DATA0 */

 VI0_DATA1 */

 VI0_DATA2 */

 VI0_DATA3 */

 VI0_DATA4 */

 VI0_DATA5 */

 VI0_DATA6 */

 VI0_DATA7 */

 VI0_DATA8 */

 VI0_DATA9 */

 VI0_DATA10 */

 VI0_DATA11 */

 VI0_FIELD */

 VI1_CLK */

 VI1_CLKENB */

 VI1_HSYNC# */

 VI1_VSYNC# */

 VI1_DATA0 */

 VI1_DATA1 */

 VI1_DATA2 */

 VI1_DATA3 */

 VI1_DATA4 */

 VI1_DATA5 */

 VI1_DATA6 */

 VI1_DATA7 */

 VI1_DATA8 */

 VI1_DATA9 */

 VI1_DATA10 */

 VI1_DATA11 */

 VI1_FIELD */

 SCL0 */

 SDA0 */

 SCL1 */

 SDA1 */

 SCL2 */

 SDA2 */

 AVB_RX_CTL */

 AVB_RXC */

 AVB_RD0 */

 AVB_RD1 */

 AVB_RD2 */

 AVB_RD3 */

 AVB_TX_CTL */

 AVB_TXC */

 AVB_TD0 */

 AVB_TD1 */

 AVB_TD2 */

 AVB_TD3 */

 AVB_TXCREFCLK */

 AVB_MDIO */

 AVB_MDC */

 AVB_MAGIC */

 AVB_PHY_INT */

 AVB_LINK */

 AVB_AVTP_MATCH */

 AVTP_CAPTURE */

 GETHER_RX_CTL */

 GETHER_RXC */

 GETHER_RD0 */

 GETHER_RD1 */

 GETHER_RD2 */

 GETHER_RD3 */

 GETHER_TX_CTL */

 GETHER_TXC */

 GETHER_TD0 */

 GETHER_TD1 */

 GETHER_TD2 */

 GETHER_TD3 */

 GETHER_TXCREFCLK */

 GETHER_TXCREFCLK_MEGA */

 GETHER_MDIO_A */

 GETHER_MDC_A */

 GETHER_MAGIC */

 GETHER_PHY_INT_A */

 GETHER_LINK_A */

 CANFD0_TX_A */

 CANFD0_RX_A */

 CANFD1_TX */

 CANFD1_RX */

 CAN_CLK_A */

 QSPI0_SPCLK */

 QSPI0_MOSI_IO0 */

 QSPI0_MISO_IO1 */

 QSPI0_IO2 */

 QSPI0_IO3 */

 QSPI0_SSL */

 QSPI1_SPCLK */

 QSPI1_MOSI_IO0 */

 QSPI1_MISO_IO1 */

 QSPI1_IO2 */

 QSPI1_IO3 */

 QSPI1_SSL */

 RPC_RESET# */

 RPC_WP# */

 RPC_INT# */

 DIGRF_CLKIN */

 DIGRF_CLKOUT */

 IRQ4 */

 IRQ5 */

 SCL3 */

 SDA3 */

 MSIOF0_RXD */

 MSIOF0_TXD */

 MSIOF0_SCK */

 MSIOF0_SYNC */

 MSIOF0_SS1 */

 MSIOF0_SS2 */

 FSO_CFE_0# */

 FSO_CFE_1# */

 FSO_TOE# */

 sentinel */ }

 PMMR */

 SPDX-License-Identifier: GPL-2.0

/*

 * SH7785 Pinmux

 *

 *  Copyright (C) 2008  Magnus Damm

 PA GPIO */

 PB GPIO */

 PC GPIO */

 PD GPIO */

 PE GPIO */

 PF GPIO */

 PG GPIO */

 PH GPIO */

 PJ GPIO */

 PK GPIO */

 PL GPIO */

 PM GPIO */

 PN GPIO */

 PP GPIO */

 PQ GPIO */

 PR GPIO */

 PA FN */

 PB FN */

 PC FN */

 PD FN */

 PE FN */

 PF FN */

 PF FN */

 PH FN */

 PJ FN */

 PK FN */

 PL FN */

 PM FN */

 PN FN */

 PP FN */

 PQ FN */

 PR FN */

 MISC FN */

 PA */

 PB */

 PC */

 PD */

 PE */

 PF */

 PG */

 PH */

 PJ */

 PK */

 PL */

 PM */

 PN */

 PP */

 PQ */

 PR */

 FN */

 SPDX-License-Identifier: GPL-2.0

/*

 * r8a7778 processor support - PFC hardware block

 *

 * Copyright (C) 2013  Renesas Solutions Corp.

 * Copyright (C) 2013  Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

 * Copyright (C) 2013  Cogent Embedded, Inc.

 * Copyright (C) 2015  Ulrich Hecht

 *

 * based on

 * Copyright (C) 2011  Renesas Solutions Corp.

 * Copyright (C) 2011  Magnus Damm

 GP_0_0_DATA -> GP_4_26_DATA */

 GP_0_0_FN -> GP_4_26_FN */

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 SEL */

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 VI0_R3_C_MARK, */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 PINMUX_DATA(GP_M_N_DATA, GP_M_N_FN...), */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 IPSR5 */

 see sel_vi0 */

 see sel_vi0 */

 IPSR6 */

 IPSR7 */

 see sel_vi0 */

 see sel_vi0 */

 IPSR8 */

 IPSR9 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 see sel_vi0 */

 IPSR10 */

/*

 * Pins not associated with a GPIO port.

 - macro */

 - AUDIO macro -------------------------------------------------------------*/

 - AUDIO clock -------------------------------------------------------------*/

 - CAN macro --------_----------------------------------------------------- */

 - CAN0 ------------------------------------------------------------------- */

 - CAN1 ------------------------------------------------------------------- */

 - CAN_CLK  --------------------------------------------------------------- */

 - Ether ------------------------------------------------------------------ */

 - SCIF macro ------------------------------------------------------------- */

 - HSCIF0 ----------------------------------------------------------------- */

 - HSCIF1 ----------------------------------------------------------------- */

 - HSPI macro --------------------------------------------------------------*/

 - HSPI0 -------------------------------------------------------------------*/

 - HSPI1 -------------------------------------------------------------------*/

 - HSPI2 -------------------------------------------------------------------*/

 - I2C macro ------------------------------------------------------------- */

 - I2C1 ------------------------------------------------------------------ */

 - I2C2 ------------------------------------------------------------------ */

 - I2C3 ------------------------------------------------------------------ */

 - MMC macro -------------------------------------------------------------- */

 - MMC -------------------------------------------------------------------- */

 - SCIF CLOCK ------------------------------------------------------------- */

 - SCIF0 ------------------------------------------------------------------ */

 - SCIF1 ------------------------------------------------------------------ */

 - SCIF2 ------------------------------------------------------------------ */

 - SCIF3 ------------------------------------------------------------------ */

 - SCIF4 ------------------------------------------------------------------ */

 - SCIF5 ------------------------------------------------------------------ */

 - SDHI macro ------------------------------------------------------------- */

 - SDHI0 ------------------------------------------------------------------ */

 - SDHI1 ------------------------------------------------------------------ */

 - SDH2 ------------------------------------------------------------------- */

 - SSI macro -------------------------------------------------------------- */

 - SSI 0/1/2 -------------------------------------------------------------- */

 - SSI 3/4 ---------------------------------------------------------------- */

 - SSI 5 ------------------------------------------------------------------ */

 - SSI 6 ------------------------------------------------------------------ */

 - SSI 7/8  --------------------------------------------------------------- */

 - USB0 ------------------------------------------------------------------- */

 - USB1 ------------------------------------------------------------------- */

 - VIN macros ------------------------------------------------------------- */

 - VIN0 ------------------------------------------------------------------- */

 - VIN1 ------------------------------------------------------------------- */

 IP0_31 [1] */

 IP0_30 [1] */

 IP0_29 [1] */

 IP0_28 [1] */

 IP0_27 [1] */

 IP0_26 [1] */

 IP0_25 [1] */

 IP0_24 [1] */

 IP0_23 [1] */

 IP0_22 [1] */

 IP0_21 [1] */

 IP0_20 [1] */

 IP0_19 [1] */

 IP0_18 [1] */

 IP0_17 [1] */

 IP0_16 [1] */

 IP0_15 [1] */

 IP0_14_12 [3] */

 IP0_11_8 [4] */

 IP0_7_5 [3] */

 IP0_4_2 [3] */

 IP0_1_0 [2] */

 IP1_31 [1] */

 IP1_30 [1] */

 IP1_29_28 [2] */

 IP1_27_25 [3] */

 IP1_24 [1] */

 IP1_23_21 [3] */

 IP1_20_18 [3] */

 IP1_17 [1] */

 IP1_16_15 [2] */

 IP1_14_11 [4] */

 IP1_10_8 [3] */

 IP1_7_5 [3] */

 IP1_4_2 [3] */

 IP1_1 [1] */

 IP1_0 [1] */

 IP2_31 [1] */

 IP2_30 [1] */

 IP2_29 [1] */

 IP2_28 [1] */

 IP2_27 [1] */

 IP2_26 [1] */

 IP2_25 [1] */

 IP2_24 [1] */

 IP2_23 [1] */

 IP2_22 [1] */

 IP2_21 [1] */

 IP2_20 [1] */

 IP2_19 [1] */

 IP2_18 [1] */

 IP2_17 [1] */

 IP2_16_14 [3] */

 IP2_13_12 [2] */

 IP2_11_9 [3] */

 IP2_8_6 [3] */

 IP2_5_3 [3] */

 IP2_2_0 [3] */

 IP3_31 [1] */

 IP3_30 [1] */

 IP3_29 [1] */

 IP3_28 [1] */

 IP3_27 [1] */

 IP3_26_24 [3] */

 IP3_23_21 [3] */

 IP3_20_19 [2] */

 IP3_18_16 [3] */

 IP3_15_13 [3] */

 IP3_12_10 [3] */

 IP3_9_8 [2] */

 IP3_7_5 [3] */

 IP3_4_2 [3] */

 IP3_1_0 [2] */

 IP4_31 [1] */

 IP4_30_29 [2] */

 IP4_28_27 [2] */

 IP4_26_25 [2] */

 IP4_24_21 [4] */

 IP4_20_17 [4] */

 IP4_16_15 [2] */

 IP4_14_13 [2] */

 IP4_12_11 [2] */

 IP4_10_9 [2] */

 IP4_8 [1] */

 IP4_7 [1] */

 IP4_6_4 [3] */

 IP4_3_1 [3] */

 IP4_0 [1] */

 IP5_31 [1] */

 IP5_30_29 [2] */

 IP5_28_26 [3] */

 IP5_25_23 [3] */

 IP5_22_21 [2] */

 IP5_20_18 [3] */

 IP5_17_15 [3] */

 IP5_14_13 [2] */

 IP5_12 [1] */

 IP5_11_10 [2] */

 IP5_9_8 [2] */

 IP5_7 [1] */

 IP5_6 [1] */

 IP5_5_4 [2] */

 IP5_3_2 [2] */

 IP5_1_0 [2] */

 IP6_31_30 [2] */

 IP6_29_28 [2] */

 IP6_27_26 [2] */

 IP6_25_24 [2] */

 IP6_23_22 [2] */

 IP6_21 [1] */

 IP6_20_19 [2] */

 IP6_18_17 [2] */

 IP6_16 [1] */

 IP6_15_14 [2] */

 IP6_13 [1] */

 IP6_12_11 [2] */

 IP6_10 [1] */

 IP6_9 [1] */

 IP6_8 [1] */

 IP6_7 [1] */

 IP6_6_5 [2] */

 IP6_4_2 [3] */

 IP6_1_0 [2] */

 IP7_31_29 [3] */

 IP7_28_25 [4] */

 IP7_24_22 [3] */

 IP7_21 [1] */

 IP7_20_18 [3] */

 IP7_17_15 [3] */

 IP7_14_12 [3] */

 IP7_11_9 [3] */

 IP7_8_6 [3] */

 IP7_5_4 [2] */

 IP7_3_2 [2] */

 IP7_1_0 [2] */

 IP8_31 [1] */

 IP8_30 [1] */

 IP8_29_27 [3] */

 IP8_26_24 [3] */

 IP8_23_22 [2] */

 IP8_21_19 [3] */

 IP8_18_16 [3] */

 IP8_15_14 [2] */

 IP8_13_11 [3] */

 IP8_10_9 [2] */

 IP8_8_6 [3] */

 IP8_5_3 [3] */

 IP8_2_0 [3] */

 IP9_31 [1] */

 IP9_30 [1] */

 IP9_29_27 [3] */

 IP9_26_24 [3] */

 IP9_23_21 [3] */

 IP9_20_18 [3] */

 IP9_17_15 [3] */

 IP9_14_12 [3] */

 IP9_11_9 [3] */

 IP9_8_6 [3] */

 IP9_5_3 [3] */

 IP9_2_0 [3] */

 IP10_31 [1] */

 IP10_30 [1] */

 IP10_29 [1] */

 IP10_28 [1] */

 IP10_27 [1] */

 IP10_26 [1] */

 IP10_25 [1] */

 IP10_24_22 [3] */

 IP10_21_19 [3] */

 IP10_18_16 [3] */

 IP10_15_13 [3] */

 IP10_12_9 [4] */

 IP10_8_6 [3] */

 IP10_5_3 [3] */

 IP10_2_0 [3] */

 SEL 31  [1] */

 SEL_30 (SCIF5) [1] */

 SEL_29_28 (SCIF4) [2] */

 SEL_27_26 (SCIF3) [2] */

 SEL_25_23 (SCIF2) [3] */

 SEL_22_21 (SCIF1) [2] */

 SEL_20_19 (SCIF0) [2] */

 SEL_18 [1] */

 SEL_17 (SSI2) [1] */

 SEL_16 (SSI1) [1] */

 SEL_15 (VI1) [1] */

 SEL_14_13 (VI0) [2] */

 SEL_12 [1] */

 SEL_11 (SD2) [1] */

 SEL_10 (SD1) [1] */

 SEL_9 (IRQ3) [1] */

 SEL_8_7 (IRQ2) [2] */

 SEL_6 (IRQ1) [1] */

 SEL_5 [1] */

 SEL_4 (DREQ2) [1] */

 SEL_3 (DREQ1) [1] */

 SEL_2 (DREQ0) [1] */

 SEL_1 (WAIT2) [1] */

 SEL_0 (WAIT1) [1] */

 SEL_31 [1] */

 SEL_30 [1] */

 SEL_29 [1] */

 SEL_28 [1] */

 SEL_27 (CAN1) [1] */

 SEL_26 (CAN0) [1] */

 SEL_25_24 (CANCLK) [2] */

 SEL_23 (HSCIF1) [1] */

 SEL_22 (HSCIF0) [1] */

 SEL_21 [1] */

 SEL_20 [1] */

 SEL_19 [1] */

 SEL_18 [1] */

 SEL_17 [1] */

 SEL_16 [1] */

 SEL_15 [1] */

 SEL_14_13 (REMOCON) [2] */

 SEL_12_11 (FM) [2] */

 SEL_10_9 (GPS) [2] */

 SEL_8 (TSIF0) [1] */

 SEL_7 (HSPI2) [1] */

 SEL_6 (HSPI1) [1] */

 SEL_5 (HSPI0) [1] */

 SEL_4_3 (I2C3) [2] */

 SEL_2_1 (I2C2) [2] */

 SEL_0 (I2C1) [1] */

 A0 */

 A1 */

 A2 */

 A3 */

 A4 */

 A5 */

 A6 */

 A7 */

 A8 */

 A9 */

 A10 */

 A11 */

 A12 */

 A13 */

 A14 */

 A15 */

 A16 */

 A17 */

 A18 */

 A19 */

 A20 */

 A21 */

 A22 */

 A23 */

 A24 */

 A25 */

 /EX_CS0 */

 /EX_CS1 */

 /EX_CS2 */

 /EX_CS3 */

 /EX_CS4 */

 /EX_CS5 */

 /PRESETOUT	*/

 /BS		*/

WR	*/

 /WE0		*/

 /WE1		*/

 EX_WAIT0	*/

 DREQ0	*/

 DACK0	*/

 IRQ0		*/

 IRQ1		*/

 DU0_DR0	*/

 DU0_DR1	*/

 DU0_DR2	*/

 DU0_DR3	*/

 DU0_DR4	*/

 DU0_DR5	*/

 DU0_DR6	*/

 DU0_DR7	*/

 DU0_DG0	*/

 DU0_DG1	*/

 DU0_DG2	*/

 DU0_DG3	*/

 DU0_DG4	*/

 DU0_DG5	*/

 DU0_DG6	*/

 DU0_DG7	*/

 DU0_DB0	*/

 DU0_DB1	*/

 DU0_DB2	*/

 DU0_DB3	*/

 DU0_DB4	*/

 DU0_DB5	*/

 DU0_DB6	*/

 DU0_DB7	*/

 DU0_DOTCLKIN	*/

 DU0_DOTCLKOUT0 */

 DU0_HSYNC	*/

 DU0_VSYNC	*/

 DU0_EXODDF	*/

 DU0_DISP	*/

 DU0_CDE	*/

 DU0_DOTCLKOUT1 */

 VI0_CLK	*/

 VI0_CLKENB	*/

 VI0_FIELD	*/

 /VI0_HSYNC	*/

 /VI0_VSYNC	*/

 VI0_DATA0	*/

 VI0_DATA1	*/

 VI0_DATA2	*/

 VI0_DATA3	*/

 VI0_DATA4	*/

 VI0_DATA5	*/

 VI0_DATA6	*/

 VI0_DATA7	*/

 VI0_G2	*/

 VI0_G3	*/

 VI0_G4	*/

 VI0_G5	*/

 VI1_DATA12	*/

 VI1_DATA13	*/

 VI1_DATA14	*/

 VI1_DATA15	*/

 ETH_REF_CLK	*/

 ETH_TXD0	*/

 ETH_TXD1	*/

 ETH_CRS_DV	*/

 ETH_TX_EN	*/

 ETH_RX_ER	*/

 ETH_RXD0	*/

 ETH_RXD1	*/

 ETH_MDC	*/

 ETH_MDIO	*/

 ETH_LINK	*/

 SSI_SCK012	*/

 SSI_WS012	*/

 SSI_SDATA0	*/

 SSI_SDATA1	*/

 SSI_SDATA2	*/

 SSI_SCK34	*/

 SSI_WS34	*/

 SSI_SDATA3	*/

 SSI_SDATA4	*/

 SSI_SCK5	*/

 SSI_WS5	*/

 SSI_SDATA5	*/

 SSI_SCK6	*/

 SSI_WS6	*/

 SSI_SDATA6	*/

 SSI_SCK78	*/

 SSI_WS78	*/

 SSI_SDATA7	*/

 SSI_SDATA8	*/

 TCLK0	*/

 SD0_CLK	*/

 SD0_CMD	*/

 SD0_DAT0	*/

 SD0_DAT1	*/

 SD0_DAT2	*/

 SD0_DAT3	*/

 SD0_CD	*/

 SD0_WP	*/

 AUDIO_CLKA	*/

 AUDIO_CLKB	*/

 IRQ2		*/

 IRQ3		*/

 PENC0	*/

 PENC1	*/

 USB_OVC0	*/

 USB_OVC1	*/

 SCIF_CLK	*/

 TX0		*/

 RX0		*/

 SCK0		*/

 /CTS0	*/

 /RTS0	*/

 HSPI_CLK0	*/

 /HSPI_CS0	*/

 HSPI_RX0	*/

 HSPI_TX0	*/

 ETH_MAGIC	*/

 AVS1		*/

 AVS2		*/

 sentinel */ },

 PMMR */

 SPDX-License-Identifier: GPL-2.0

/*

 * R8A77990 processor support - PFC hardware block.

 *

 * Copyright (C) 2018-2019 Renesas Electronics Corp.

 *

 * This file is based on the drivers/pinctrl/renesas/pfc-r8a7796.c

 *

 * R8A7796 processor support - PFC hardware block.

 *

 * Copyright (C) 2016-2017 Renesas Electronics Corp.

/*

 * F_() : just information

 * FM() : macro for FN_xxx / xxx_MARK

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 GPSR5 */

 GPSR6 */

 IPSRx */		 1 */			 3 */			 5 */		 7 */		 9 - F */

 IPSRx */		 1 */			 3 */			 5 */		 7 */		 9 - F */

 IPSRx */		 1 */			 3 */			 5 */		 7 */		 9 - F */

 IPSRx */		 1 */			 3 */			 5 */		 7 */		 9 - F */

 The bit numbering in MOD_SEL fields is reversed */

 MOD_SEL0 */			 1 */				 3 */			 5 */		 7 */

 MOD_SEL1 */			 1 */				 3 */			 5 */		 7 */

/*

 * These pins are not able to be muxed but have other properties

 * that can be set, such as pull-up/pull-down enable.

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 IPSR12 */

 IPSR13 */

 IPSR14 */

 IPSR15 */

/*

 * Static pins can not be muxed between different functions but

 * still need mark entries in the pinmux list. Add each static

 * pin to the list without an associated function. The sh-pfc

 * core will do the right thing and skip trying to mux the pin

 * while still applying configuration to it.

/*

 * Pins not associated with a GPIO port.

 - AUDIO CLOCK ------------------------------------------------------------ */

 CLK A */

 CLK B_A */

 CLK B_B */

 CLK B_C */

 CLK C_A */

 CLK C_B */

 CLK C_C */

 CLKOUT_A */

 CLKOUT_B */

 CLKOUT1_A */

 CLKOUT1_B */

 CLKOUT1_C */

 CLKOUT2_A */

 CLKOUT2_B */

 CLKOUT2_C */

 CLKOUT3_A */

 CLKOUT3_B */

 CLKOUT3_C */

 - EtherAVB --------------------------------------------------------------- */

 AVB_LINK */

 AVB_MAGIC */

 AVB_PHY_INT */

	/*

	 * AVB_RX_CTL, AVB_RXC, AVB_RD0,

	 * AVB_RD1, AVB_RD2, AVB_RD3,

	 * AVB_TXCREFCLK

 AVB_AVTP_PPS */

 AVB_AVTP_MATCH */

 AVB_AVTP_CAPTURE */

 - CAN ------------------------------------------------------------------ */

 TX, RX */

 TX, RX */

 - CAN Clock -------------------------------------------------------------- */

 CLK */

 - CAN FD --------------------------------------------------------------- */

 TX, RX */

 TX, RX */

 - DRIF0 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 - DRIF1 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 - DRIF2 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 - DRIF3 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 CONFIG_PINCTRL_PFC_R8A77990 */

 - DU --------------------------------------------------------------------- */

 R[7:2], G[7:2], B[7:2] */

 R[7:0], G[7:0], B[7:0] */

 CLKIN0 */

 CLKIN1 */

 CLKOUT */

 VSYNC, HSYNC */

 DISP_CDE */

 CDE */

 DISP */

 - HSCIF0 --------------------------------------------------*/

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 - HSCIF1 ------------------------------------------------- */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 RTS, CTS */

 - HSCIF2 ------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 - HSCIF3 ------------------------------------------------*/

 RX, TX */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 RX, TX */

 RTS, CTS */

 - HSCIF4 -------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RX, TX */

 RX, TX */

 RX, TX */

 - I2C -------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - INTC-EX ---------------------------------------------------------------- */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 - MSIOF0 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF1 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF2 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF3 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 TXD */

 RXD */

 - PWM0 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM1 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM2 --------------------------------------------------------------------*/

 PWM */

 PWM */

 PWM */

 - PWM3 --------------------------------------------------------------------*/

 PWM */

 PWM */

 PWM */

 - PWM4 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM5 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM6 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - QSPI0 ------------------------------------------------------------------ */

 QSPI0_SPCLK, QSPI0_SSL */

 QSPI0_MOSI_IO0, QSPI0_MISO_IO1 */

 QSPI0_MOSI_IO0, QSPI0_MISO_IO1 */

 QSPI0_IO2, QSPI0_IO3 */

 - QSPI1 ------------------------------------------------------------------ */

 QSPI1_SPCLK, QSPI1_SSL */

 QSPI1_MOSI_IO0, QSPI1_MISO_IO1 */

 QSPI1_MOSI_IO0, QSPI1_MISO_IO1 */

 QSPI1_IO2, QSPI1_IO3 */

 - SCIF0 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 - SCIF1 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 - SCIF2 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 - SCIF3 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 RX, TX */

 SCK */

 - SCIF4 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RX, TX */

 RTS, CTS */

 - SCIF5 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 RX, TX */

 - SCIF Clock ------------------------------------------------------------- */

 SCIF_CLK */

 SCIF_CLK */

 - SDHI0 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI1 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI3 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 D[0:7] */

 CLK, CMD */

 CD */

 WP */

 DS */

 - SSI -------------------------------------------------------------------- */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SDATA */

 SCK, WS */

 SCK, WS */

 - TMU -------------------------------------------------------------------- */

 TCLK */

 TCLK */

 TCLK */

 TCLK */

 - USB0 ------------------------------------------------------------------- */

 PWEN, OVC */

 PWEN, OVC */

 ID */

 - USB30 ------------------------------------------------------------------ */

 PWEN, OVC */

 ID */

 - VIN4 ------------------------------------------------------------------- */

 HSYNC, VSYNC */

 - VIN5 ------------------------------------------------------------------- */

 HSYNC_N, VSYNC_N */

 CONFIG_PINCTRL_PFC_R8A77990 */

 CONFIG_PINCTRL_PFC_R8A77990 */

 CONFIG_PINCTRL_PFC_R8A77990 */

 RESERVED 31 */

 RESERVED 27 */

 RESERVED 3, 2, 1, 0  */

 sentinel */ },

 RD# */

 BS# */

 AVB_PHY_INT */

 AVB_MDC */

 AVB_MDIO */

 AVB_TXCREFCLK */

 AVB_TD3 */

 AVB_TD2 */

 AVB_TD1 */

 AVB_TD0 */

 AVB_TXC */

 AVB_TX_CTL */

 AVB_RD3 */

 AVB_RD2 */

 AVB_RD1 */

 AVB_RD0 */

 AVB_RXC */

 AVB_RX_CTL */

 RPC_RESET# */

 RPC_INT# */

 QSPI1_SSL */

 QSPI1_IO3 */

 QSPI1_IO2 */

 QSPI1_MISO/IO1 */

 QSPI1_MOSI/IO0 */

 QSPI1_SPCLK */

 QSPI0_SSL */

 QSPI0_IO3 */

 QSPI0_IO2 */

 QSPI0_MISO/IO1 */

 QSPI0_MOSI/IO0 */

 QSPI0_SPCLK */

 D4 */

 D3 */

 D2 */

 D1 */

 D0 */

 WE0# */

 CS0# */

 CLKOUT */

 A19 */

 A18 */

 A17 */

 A16 */

 A15 */

 A14 */

 A13 */

 A12 */

 A11 */

 A10 */

 A9 */

 A8 */

 A7 */

 A6 */

 A5 */

 A4 */

 A3 */

 A2 */

 A1 */

 A0 */

 EX_WAIT0 */

 RD/WR# */

 SD0_CMD */

 SD0_CLK */

 ASEBRK */

 TDI */

 TMS */

 TCK */

 TRST# */

 FSCLKST# */

 SDA4 */

 SCL4 */

 PRESETOUT# */

 D15 */

 D14 */

 D13 */

 D12 */

 D11 */

 D10 */

 D9 */

 D8 */

 D7 */

 D6 */

 D5 */

 SCK0_A */

 RTS0#_A */

 CTS0#_A */

 TX0_A */

 RX0_A */

 SD1_WP */

 SD1_CD */

 SD0_WP */

 SD0_CD */

 SD3_DS */

 SD3_DAT7 */

 SD3_DAT6 */

 SD3_DAT5 */

 SD3_DAT4 */

 SD3_DAT3 */

 SD3_DAT2 */

 SD3_DAT1 */

 SD3_DAT0 */

 SD3_CMD */

 SD3_CLK */

 SD1_DAT3 */

 SD1_DAT2 */

 SD1_DAT1 */

 SD1_DAT0 */

 SD1_CMD */

 SD1_CLK */

 SD0_DAT3 */

 SD0_DAT2 */

 SD0_DAT1 */

 SD0_DAT0 */

 AUDIO_CLKA */

 SSI_SDATA6 */

 SSI_WS6 */

 SSI_SCK6 */

 SSI_SDATA5 */

 SSI_WS5 */

 SSI_SCK5 */

 SSI_SDATA4 */

 SSI_SDATA3 */

 SSI_WS349 */

 SSI_SCK349 */

 SSI_SDATA2 */

 SSI_SDATA1 */

 SSI_SDATA0 */

 SSI_WS01239 */

 SSI_SCK01239 */

 MLB_REF */

 MLB_DAT */

 MLB_SIG */

 MLB_CLK */

 SSI_SDATA9 */

 MSIOF0_SS2 */

 MSIOF0_SS1 */

 MSIOF0_SYNC */

 MSIOF0_TXD */

 MSIOF0_RXD */

 MSIOF0_SCK */

 RX2_A */

 TX2_A */

 SCK2_A */

 TX1 */

 RX1 */

 USB30_OVC */

 USB30_PWEN */

 sentinel */ },

 PMMR */

 PMMR */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2012-2013  Renesas Solutions Corp.

 * Copyright (C) 2013  Magnus Damm

 * Copyright (C) 2012  Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

  Port0 - Port30 */						\

 Port32 - Port40 */						\

 Port64  - Port85 */						\

 Port96  - Port126 */						\

 Port128 - Port134 */						\

 Port160 - Port178 */						\

 Port192 - Port222 */						\

 Port224 - Port250 */						\

 Port256 - Port283 */						\

 Port288 - Port308 */						\

 Port320 - Port329 */						\

 PORT0_DATA -> PORT329_DATA */

 PORT0_IN -> PORT329_IN */

 PORT0_OUT -> PORT329_OUT */

 PORT0_FN_IN -> PORT329_FN_IN */

 PORT0_FN_OUT -> PORT329_FN_OUT */

 PORT0_FN0 -> PORT329_FN0 */

 PORT0_FN1 -> PORT329_FN1 */

 PORT0_FN2 -> PORT329_FN2 */

 PORT0_FN3 -> PORT329_FN3 */

 PORT0_FN4 -> PORT329_FN4 */

 PORT0_FN5 -> PORT329_FN5 */

 PORT0_FN6 -> PORT329_FN6 */

 PORT0_FN7 -> PORT329_FN7 */

 Port0 */

 Port10 */

 Port20 */

 Port30 */

 Port32 */

 Port40 */

 Port64 */

 Port70 */

 Port80 */

 Port85 */

 Port96 */

 Port100 */

 Port110 */

 Port120 */

 Port130 */

 Port160 */

 Port170 */

 Port192 */

 Port200 */

 Port210 */

 Port220 */

 Port230 */

 Port240 */

 Port250 */

 Port260 */

 Port270 */

 Port280 */

 Port290 */

 Port300 */

 Port320 */

 specify valid pin states for each pin in GPIO mode */

 Port0 */

 Port1 */

 Port2 */

 Port3 */

 Port4 */

 Port5 */

 Port6 */

 Port7 */

 Port8 */

 Port9 */

 Port10 */

 Port11 */

 Port12 */

 Port13 */

 Port14 */

 Port15 */

 Port16 */

 Port17 */

 Port18 */

 Port19 */

 Port20 */

 Port21 */

 Port22 */

 Port23 */

 Port24 */

 Port25 */

 Port26 */

 Port27 */

 Port28 */

 Port29 */

 Port30 */

 Port32 */

 Port33 */

 Port34 */

 Port35 */

 Port36 */

 Port37 */

 Port38 */

 Port39 */

 Port40 */

 Port64 */

 Port65 */

 Port66 */

 Port67 */

 Port68 */

 Port69 */

 Port70 */

 Port71 */

 Port72 */

 Port73 */

 Port74 - Port85 */

 Port96 - Port101 */

 Port102 */

 Port103 */

 Port104 - Port108 */

 Port109 */

 Port110 */

 Port111 */

 Port112 */

 Port113 */

 Port114 */

 Port115 */

 Port116 */

 Port117 */

 Port118 */

 Port119 */

 Port120 */

 Port121 */

 Port122 */

 Port123 */

 Port124 */

 Port125 */

 Port126 */

 Port128 */

 Port129 */

 Port130 */

 Port131 */

 Port132 */

 Port133 */

 Port134 */

 Port160 - Port178 */

 Port192 - Port200 FN1 */

 Port192 - Port200 FN2 */

 Port192 - Port200 IRQ */

 Port201 */

 Port202 */

 Port203 */

 Port204 */

 Port205 */

 Port206 */

 Port207 - Port212 FN1 */

 Port207 - Port212 FN5 */

 Port213 - Port222 FN1 */

 Port213 - Port222 FN2 */

 Port213 - Port222 FN5 */

 Port224 */

 Port225 */

 Port226 */

 Port227 */

 Port228 */

 Port229 */

 Port230 */

 Port231 */

 Port232 */

 Port233 */

 Port234 */

 Port235 */

 Port236 */

 Port237 */

 Port238 */

 Port239 */

 Port240 */

 Port241 */

 Port242 */

 Port243 */

 Port244 */

 Port245 */

 Port246 - Port250 FN1 */

 Port256 - Port258 */

 Port259 */

 Port260 */

 Port261 */

 Port262 */

 Port263 - Port266 FN1 */

 Port263 - Port266 FN4 */

 Port267 */

 Port268 */

 Port269 */

 Port270 - Port273 FN1 */

 Port270 - Port273 FN3 */

 Port274 */

 Port275 - Port280 */

 Port281 */

 Port282 */

 Port283 */

 Port289 */

 Port290 */

 Port291 - Port294 FN1 */

 Port291 - Port294 FN3 */

 Port295 */

 Port296 */

 Port297 - Port300 FN1 */

 Port297 - Port300 FN2 */

 Port297 - Port300 FN3 */

 Port297 - Port300 FN4 */

 Port301 */

 Port302 - Port306 FN1 */

 Port302 - Port306 FN3 */

 Port307 */

 Port308 */

 Port320 - Port329 */

 - IRQC ------------------------------------------------------------------- */

 - MMCIF0 ----------------------------------------------------------------- */

 D[0] */

 D[0:3] */

 D[0:7] */

 CMD, CLK */

 - MMCIF1 ----------------------------------------------------------------- */

 D[0] */

 D[0:3] */

 D[0:7] */

 CMD, CLK */

 - SCIFA0 ----------------------------------------------------------------- */

 SCIFA0_RXD, SCIFA0_TXD */

 SCIFA0_SCK */

 SCIFA0_RTS, SCIFA0_CTS */

 - SCIFA1 ----------------------------------------------------------------- */

 SCIFA1_RXD, SCIFA1_TXD */

 SCIFA1_SCK */

 SCIFA1_RTS, SCIFA1_CTS */

 - SCIFB0 ----------------------------------------------------------------- */

 SCIFB0_RXD, SCIFB0_TXD */

 SCIFB0_SCK */

 SCIFB0_RTS, SCIFB0_CTS */

 - SCIFB1 ----------------------------------------------------------------- */

 SCIFB1_RXD, SCIFB1_TXD */

 SCIFB1_SCK */

 SCIFB1_RTS, SCIFB1_CTS */

 SCIFB1_RXD, SCIFB1_TXD */

 SCIFB1_SCK */

 SCIFB1_RTS, SCIFB1_CTS */

 - SCIFB2 ----------------------------------------------------------------- */

 SCIFB2_RXD, SCIFB2_TXD */

 SCIFB2_SCK */

 SCIFB2_RTS, SCIFB2_CTS */

 SCIFB2_RXD, SCIFB2_TXD */

 SCIFB2_SCK */

 SCIFB2_RTS, SCIFB2_CTS */

 - SCIFB3 ----------------------------------------------------------------- */

 SCIFB3_RXD, SCIFB3_TXD */

 SCIFB3_SCK */

 SCIFB3_RTS, SCIFB3_CTS */

 SCIFB3_RXD, SCIFB3_TXD */

 SCIFB3_SCK */

 SCIFB3_RTS, SCIFB3_CTS */

 - SDHI0 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI1 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 - SDHI2 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 IRQ6 */

 IRQ7 */

 IRQ8 */

 IRQ9 */

 IRQ10 */

 IRQ11 */

 IRQ12 */

 IRQ13 */

 IRQ14 */

 IRQ15 */

 IRQ16 */

 IRQ17 */

 IRQ18 */

 IRQ19 */

 IRQ20 */

 IRQ21 */

 IRQ22 */

 IRQ23 */

 IRQ24 */

 IRQ25 */

 IRQ26 */

 IRQ27 */

 IRQ28 */

 IRQ29 */

 IRQ30 */

 IRQ31 */

 IRQ32 */

 IRQ33 */

 IRQ34 */

 IRQ35 */

 IRQ36 */

 IRQ37 */

 IRQ38 */

 IRQ39 */

 IRQ40 */

 IRQ41 */

 IRQ42 */

 IRQ43 */

 IRQ44 */

 IRQ45 */

 IRQ46 */

 IRQ47 */

 IRQ48 */

 IRQ49 */

 IRQ50 */

 IRQ51 */

 IRQ52 */

 IRQ53 */

 IRQ54 */

 IRQ55 */

 IRQ56 */

 IRQ57 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Renesas RZ/G2L Pin Control and GPIO driver core

 *

 * Copyright (C) 2021 Renesas Electronics Corporation.

/*

 * Use 16 lower bits [15:0] for pin identifier

 * Use 16 higher bits [31:16] for pin mux function

 PIN capabilities */

/*

 * n indicates number of pins in the port, a is the register index

 * and f is pin configuration capabilities supported.

/*

 * BIT(31) indicates dedicated pin, p is the register index while

 * referencing to SR/IEN/IOLH/FILxx registers, b is the register bits

 * (b * 8) and f is the pin configuration capabilities supported.

 I/O domain voltage <= 1.8V */

 I/O domain voltage >= 3.3V */

 Bit Write Disable */

 PFC Register Write Enable */

 Set pin to 'Non-use (Hi-Z input protection)'  */

 Temporarily switch to GPIO mode with PMC register */

 Set the PWPR register to allow PFC register to write */

 B0WI=0, PFCWE=0 */

 B0WI=0, PFCWE=1 */

 Select Pin function mode with PFC register */

 Set the PWPR register to be write-protected */

 B0WI=0, PFCWE=0 */

 B0WI=1, PFCWE=0 */

 Switch to Peripheral pin function with PMC register */

 Collect pin locations and mux settings from DT properties */

 Register a single pin group listing all the pins we read from DT */

	/*

	 * Register a single group function where the 'data' is an array PSEL

	 * register values read from DT.

 handle _L/_H for 32-bit register read/write */

 handle _L/_H for 32-bit register read/write */

 Check config matching between to pin  */

 Select GPIO mode in PMC Register */

	/*

	 * Set the GPIO as an input to ensure that the next GPIO request won't

	 * drive the GPIO pin as an output.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Pin Control and GPIO driver for SuperH Pin Function Controller.

 *

 * Authors: Magnus Damm, Paul Mundt, Laurent Pinchart

 *

 * Copyright (C) 2008 Magnus Damm

 * Copyright (C) 2009 - 2012 Paul Mundt

 Count the MEM and IRQ resources. */

 Allocate memory windows and IRQs arrays. */

 Fill them. */

 scan through physical windows and convert address */

 unlock_reg is a mask */

 CONFIG_PINCTRL_SH_PFC_GPIO */

 Iterate over all the configuration fields we need to update. */

		/* Check if the configuration field selects a function. If it

		 * doesn't, skip the field if it's not applicable to the

		 * requested pinmux type.

				/* Functions are allowed to modify all

				 * fields.

				/* Input/output types can only modify fields

				 * that correspond to their respective ranges.

				/*

				 * special case pass through for fixed

				 * input-only or output-only pins without

				 * function enum register association.

 GPIOs are only allowed to modify function fields. */

		/* Pin number -1 denotes that the SoC doesn't report pin numbers

		 * in its pin arrays yet. Consider the pin numbers range as

		 * continuous and allocate a single range.

	/* Count, allocate and fill the ranges. The PFC SoC data pins array must

	 * be sorted by pin numbers, and pins without a GPIO port must come

	 * last.

/*

 * Both r8a7795 entries must be present to make sanity checks work, but only

 * the first entry is actually used.

 * R-Car H3 ES1.x is matched using soc_device_match() instead.

 This is the best we can do to check for the presence of PSCI */

 CONFIG_PM_SLEEP && CONFIG_ARM_PSCI_FW */

 Skip field checks (done at build time) */

 Check pins */

 Check groups and functions */

 Check config register descriptions */

 Check drive strength registers */

 Check bias registers */

 Check ioctrl registers */

 Check data registers */

 Check function GPIOs */

 !DEBUG */

 !DEBUG */

 sentinel */ }

 CONFIG_PINCTRL_PFC_R8A77950 */

 CONFIG_OF */

 .init() may have overridden pfc->info */

 Enable dummy states for those platforms without pinctrl support */

	/*

	 * Initialize pinctrl bindings first

	/*

	 * Then the GPIO chip

		/*

		 * If the GPIO chip fails to come up we still leave the

		 * PFC state as it is, given that there are already

		 * extant users of it that have succeeded by this point.

 SPDX-License-Identifier: GPL-2.0

/*

 * Pin Function Controller Support

 *

 * Copyright (C) 2015 Niklas Söderlund

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPRS4 */

 CHG_PINSEL_LCD3 */

 CHG_PINSEL_IIC */

 CHG_PINSEL_AB */

 CHG_PINSEL_USI */

 CHG_PINSEL_HSI */

 CHG_PINSEL_UART */

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR3 */

 CHG_PINSEL_LCD3 */

 CHG_PINSEL_IIC */

 CHG_PINSEL_AB */

 CHG_PINSEL_USI */

 CHG_PINSEL_HSI */

 CHG_PINSEL_UART */

/*

 * Pins not associated with a GPIO port.

/* Expand to a list of sh_pfc_pin entries (named PORT#).

 Expand to a list of name_DATA, name_FN marks */

 PINMUX_DATA(PORTN_DATA, PORTN_FN), */

 GPSR0 */

 V9 */

 U9 */

 V8 */

 U8 */

 B22*/

 C21 */

 A21 */

 B21 */

 C20 */

 D19 */

 GPSR1 */

 A20 */

 B20 */

 A19 */

 B19 */

 C19 */

 B18 */

 C18 */

 D18 */

 A18 */

 A17 */

 B17 */

 C17 */

 D17 */

 B16 */

 C16 */

 D16 */

 A16 */

 A15 */

 B15 */

 C15 */

 D15 */

 B14 */

 C14 */

 D14 */

 AA9 */

 AA8 */

 Y9 */

 Y8 */

 AC19 */

 AB18 */

 AC18 */

 Y12 */

 AA13 */

 Y13 */

 AA14 */

 Y14 */

 AA15 */

 Y15 */

 AA16 */

 Y16 */

 AB22 */

 AA23 */

 AC21 */

 GPSR2 */

 AB21 */

 AB20 */

 AB19 */

 AA19 */

 J23 */

 D21 */

 E21 */

 F20 */

 G20 */

 J20 */

 H20 */

 L20 */

 K20 */

 C23 */

 C22 */

 D23 */

 D22 */

 E23 */

 E22 */

 F23 */

 F22 */

 F21 */

 G23 */

 G22 */

 G21 */

 H23 */

 H22 */

 H21 */

 J22 */

 J21 */

 K21 */

 L21 */

 GPSR3 */

 M21 */

 N21 */

 M20 */

 N20 */

 L18 */

 M18 */

 N18 */

 L17 */

 M17 */

 B8 */

 B9 */

 C10 */

 D10 */

 AB5 */

 AA6 */

 AA5 */

 Y7 */

 AA7 */

 Y6 */

 AC5 */

 AC4 */

 AC3 */

 AB4 */

 AB3 */

 AA4 */

 Y5 */

 V20 */

 P20 */

 P18 */

 R20 */

 R18 */

 T20 */

 GPRS3 */

 T18 */

 U20 */

 U18 */

 W23 */

 Y23 */

 W22 */

 V21 */

 T21 */

 T22 */

 T23 */

 U21 */

 U22 */

 U23 */

 V22 */

 V23 */

 K22 */

 K23 */

 L23 */

 L22 */

 N22 */

 N23 */

 M23 */

 M22 */

 D13 */

 F13 */

 AA12 */

 A12 */

 Y11 */

 Y10 */

 AA10 */

 AB10 */

 = [ System ] =========== */

 = [ External Memory] === */

 AB_RDB, AB_WRB */

 AB_AD[0:15] */

 = [ CAM ] ============== */

 CLKI, VS, HS */

 CAM_YUV[0:7] */

 = [ CF ] -============== */

	/* CSB0, CSB1, IORDB, IOWRB, IORDY, RESET,

 CF_D[0:7] */

 CF_D[0:15] */

 = [ DTV ] ============== */

 BCLK, PSYNC, VALID, DATA */

 BCLK, PSYNC, VALID, DATA */

 = [ IIC0 ] ============= */

 SCL, SDA */

 = [ IIC1 ] ============= */

 SCL, SDA */

 = [ JTAG ] ============= */

 SEL, TDO, TDOEN */

 = [ LCD/YUV ] ========== */

 HS, VS, DE */

 R[0:7], G[0:7], B[0:7] */

 CLK_O, HS, VS, DE */

 YUV3_D[0:15] */

 = [ NTSC ] ============= */

 NTSC_DATA[0:7] */

 = [ PWM0 ] ============= */

 = [ PWM1 ] ============= */

 = [ SD ] =============== */

 = [ SDIO0 ] ============ */

 CKO, CKI, CMD */

 SDI0_DATA[0] */

 SDI0_DATA[0:3] */

 SDI0_DATA[0:7] */

 = [ SDIO1 ] ============ */

 CKO, CKI, CMD */

 SDI1_DATA[0] */

 SDI1_DATA[0:3] */

 = [ SDIO2 ] ============ */

 CKO, CKI, CMD */

 SDI2_DATA[0] */

 SDI2_DATA[0:3] */

 = [ TP33 ] ============= */

 CLK, CTRL */

 TP33_DATA[0:15] */

 = [ UART1 ] ============ */

 RX, TX */

 CTSB, RTSB */

 = [ UART2 ] ============ */

 RX, TX */

 = [ UART3 ] ============ */

 RX, TX */

 = [ USB ] ============== */

 = [ USI0 ] ============== */

 = [ USI1 ] ============== */

 DI, DO*/

 = [ USI2 ] ============== */

 CLK, DI, DO*/

 = [ USI3 ] ============== */

 CLK, DI, DO*/

 = [ USI4 ] ============== */

 CLK, DI, DO*/

 = [ USI5 ] ============== */

 CLK, DI, DO*/

 CLK, DI, DO*/

 PIN: J18  */

 PIN: H18  */

 PIN: G18  */

 PIN: F18  */

 PIN: F17  */

 PIN: F16  */

 PIN: E20  */

 PIN: D20  */

 PIN: D19  */

 PIN: C20  */

 PIN: B21  */

 PIN: A21  */

 PIN: C21  */

 PIN: B22  */

 PIN: W20  */

 PIN: W21  */

 PIN: Y19  */

 PIN: Y20  */

 PIN: Y21  */

 PIN: AA20 */

 PIN: AA21 */

 PIN: AA22 */

 PIN: V15  */

 PIN: V16  */

 PIN: V17  */

 PIN: V18  */

 PIN: U8   */

 PIN: V8   */

 PIN: U9   */

 PIN: V9   */

 PIN: U10  */

 PIN: V10  */

 PIN: AC21 */

 PIN: AA23 */

 PIN: AB22 */

 PIN: Y16  */

 PIN: AA16 */

 PIN: Y15  */

 PIN: AA15 */

 PIN: Y14  */

 PIN: AA14 */

 PIN: Y13  */

 PIN: AA13 */

 PIN: Y12  */

 PIN: AC18 */

 PIN: AB18 */

 PIN: AB16 */

 PIN: AC19 */

 PIN: Y8   */

 PIN: Y9   */

 PIN: AA8  */

 PIN: AA9  */

 PIN: A15  */

 PIN: A16  */

 PIN: A17  */

 PIN: A18  */

 PIN: D18  */

 PIN: C18  */

 PIN: B18  */

 PIN: C19  */

 PIN: B19  */

 PIN: A19  */

 PIN: B20  */

 PIN: A20  */

 PIN: L21  */

 PIN: K21  */

 PIN: J21  */

 PIN: J22  */

 PIN: H21  */

 PIN: H22  */

 PIN: H23  */

 PIN: G21  */

 PIN: G22  */

 PIN: G23  */

 PIN: F21  */

 PIN: F22  */

 PIN: F23  */

 PIN: E22  */

 PIN: E23  */

 PIN: D22  */

 PIN: D23  */

 PIN: C22  */

 PIN: C23  */

 PIN: K20  */

 PIN: L20  */

 PIN: H20  */

 PIN: J20  */

 PIN: G20  */

 PIN: F20  */

 PIN: E21  */

 PIN: D21  */

 PIN: J23  */

 PIN: AA19 */

 PIN: AB19 */

 PIN: AB20 */

 PIN: AB21 */

 PIN: T20  */

 PIN: R18  */

 PIN: R20  */

 PIN: P18  */

 PIN: P20  */

 PIN: V20  */

 PIN: Y5   */

 PIN: AA4  */

 PIN: AB3  */

 PIN: AB4  */

 PIN: AC3  */

 PIN: AC4  */

 PIN: AC5  */

 PIN: Y6   */

 PIN: AA7  */

 PIN: Y7   */

 PIN: AA5  */

 PIN: AA6  */

 PIN: AB5  */

 PIN: D10  */

 PIN: C10  */

 PIN: B9   */

 PIN: B8   */

 PIN: M17  */

 PIN: L17  */

 PIN: N18  */

 PIN: M18  */

 PIN: L18  */

 PIN: N20  */

 PIN: M20  */

 PIN: N21  */

 PIN: M21  */

 PIN: AB10 */

 PIN: AA10 */

 PIN: Y10  */

 PIN: Y11  */

 PIN: A12  */

 PIN: AA12 */

 PIN: F13  */

 PIN: D13  */

 PIN: M22  */

 PIN: M23  */

 PIN: N23  */

 PIN: N22  */

 PIN: L22  */

 PIN: L23  */

 PIN: K23  */

 PIN: K22  */

 PIN: V23  */

 PIN: V22  */

 PIN: U23  */

 PIN: U22  */

 PIN: U21  */

 PIN: T23  */

 PIN: T22  */

 PIN: T21  */

 PIN: V21  */

 PIN: W22  */

 PIN: Y23  */

 PIN: W23  */

 PIN: U18  */

 PIN: U20  */

 PIN: T18  */

 31 - 12 */

 11 - 10 */

 9 - 8 */

 7 - 2 */

 1 - 0 */

 31 - 2 */

 1 - 0 */

 31 - 2 */

 1 - 0 */

 31 - 14 */

 13 - 12 */

 11 - 10 */

 9 - 8 */

 7 - 6 */

 5 - 4 */

 3 - 2 */

 1 - 0 */

 31 - 10 */

 9 - 8 */

 7 - 6 */

 5 - 4 */

 3 - 2 */

 1 - 0 */

 31 - 2 */

 1 - 0 */

 SPDX-License-Identifier: GPL-2.0

/*

 * r8a7792 processor support - PFC hardware block.

 *

 * Copyright (C) 2013-2014 Renesas Electronics Corporation

 * Copyright (C) 2016 Cogent Embedded, Inc., <source@cogentembedded.com>

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 GPSR5 */

 GPSR6 */

 GPSR7 */

 GPSR8 */

 GPSR9 */

 GPSR10 */

 GPSR11 */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 MOD_SEL */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 PINMUX_DATA(GP_M_N_DATA, GP_M_N_FN...), */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

/*

 * Pins not associated with a GPIO port.

 - AVB -------------------------------------------------------------------- */

 - CAN -------------------------------------------------------------------- */

 TX, RX */

 TX, RX */

 CAN_CLK */

 - DU --------------------------------------------------------------------- */

 R[7:2], G[7:2], B[7:2] */

 R[7:0], G[7:0], B[7:0] */

 EXVSYNC/VSYNC, EXHSYNC/HSYNC */

 EXODDF/ODDF/DISP/CDE */

 DISP */

 CDE */

 R[7:2], G[7:2], B[7:2] */

 EXVSYNC/VSYNC, EXHSYNC/HSYNC */

 EXODDF/ODDF/DISP/CDE */

 DISP */

 CDE */

 - INTC ------------------------------------------------------------------- */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 - LBSC ------------------------------------------------------------------- */

 CS0# */

 CS1#_A26 */

 EX_CS0# */

 EX_CS1# */

 EX_CS2# */

 EX_CS3# */

 EX_CS4# */

 EX_CS5# */

 - MSIOF0 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 RXD */

 TXD */

 - MSIOF1 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 RXD */

 TXD */

 - QSPI ------------------------------------------------------------------- */

 SPCLK, SSL */

 MOSI_IO0, MISO_IO1 */

 MOSI_IO0, MISO_IO1, IO2, IO3 */

 - SCIF0 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 - SCIF1 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 - SCIF2 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 - SCIF3 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 - SDHI0 ------------------------------------------------------------------ */

 DAT0 */

 DAT[0-3] */

 CLK, CMD */

 CD */

 WP */

 - VIN0 ------------------------------------------------------------------- */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 HSYNC#, VSYNC# */

 - VIN1 ------------------------------------------------------------------- */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 HSYNC#, VSYNC# */

 - VIN2 ------------------------------------------------------------------- */

 HSYNC#, VSYNC# */

 - VIN3 ------------------------------------------------------------------- */

 HSYNC#, VSYNC# */

 - VIN4 ------------------------------------------------------------------- */

 HSYNC#, VSYNC# */

 - VIN5 ------------------------------------------------------------------- */

 HSYNC#, VSYNC# */

 IP0_31_28 [4] */

 IP0_27_24 [4] */

 IP0_23 [1] */

 IP0_22 [1] */

 IP0_21 [1] */

 IP0_20 [1] */

 IP0_19 [1] */

 IP0_18 [1] */

 IP0_17 [1] */

 IP0_16 [1] */

 IP0_15 [1] */

 IP0_14 [1] */

 IP0_13 [1] */

 IP0_12 [1] */

 IP0_11 [1] */

 IP0_10 [1] */

 IP0_9 [1] */

 IP0_8 [1] */

 IP0_7 [1] */

 IP0_6 [1] */

 IP0_5 [1] */

 IP0_4 [1] */

 IP0_3 [1] */

 IP0_2 [1] */

 IP0_1 [1] */

 IP0_0 [1] */

 IP1_31_28 [4] */

 IP1_27_24 [4] */

 IP1_23 [1] */

 IP1_22 [1] */

 IP1_21 [1] */

 IP1_20 [1] */

 IP1_19 [1] */

 IP1_18 [1] */

 IP1_17 [1] */

 IP1_16 [1] */

 IP1_15 [1] */

 IP1_14 [1] */

 IP1_13 [1] */

 IP1_12 [1] */

 IP1_11 [1] */

 IP1_10 [1] */

 IP1_9 [1] */

 IP1_8 [1] */

 IP1_7 [1] */

 IP1_6 [1] */

 IP1_5 [1] */

 IP1_4 [1] */

 IP1_3 [1] */

 IP1_2 [1] */

 IP1_1 [1] */

 IP1_0 [1] */

 IP2_31_28 [4] */

 IP2_27_24 [4] */

 IP2_23_20 [4] */

 IP2_19_17 [3] */

 IP2_16 [1] */

 IP2_15 [1] */

 IP2_14 [1] */

 IP2_13 [1] */

 IP2_12 [1] */

 IP2_11 [1] */

 IP2_10 [1] */

 IP2_9 [1] */

 IP2_8 [1] */

 IP2_7 [1] */

 IP2_6 [1] */

 IP2_5 [1] */

 IP2_4 [1] */

 IP2_3 [1] */

 IP2_2 [1] */

 IP2_1 [1] */

 IP2_0 [1] */

 IP3_31_28 [4] */

 IP3_27_24 [4] */

 IP3_23_20 [4] */

 IP3_19_16 [4] */

 IP3_15 [1] */

 IP3_14 [1] */

 IP3_13 [1] */

 IP3_12 [1] */

 IP3_11 [1] */

 IP3_10 [1] */

 IP3_9 [1] */

 IP3_8 [1] */

 IP3_7 [1] */

 IP3_6 [1] */

 IP3_5 [1] */

 IP3_4 [1] */

 IP3_3 [1] */

 IP3_2 [1] */

 IP3_1 [1] */

 IP3_0 [1] */

 IP4_31_28 [4] */

 IP4_27_25 [3] */

 IP4_24 [1] */

 IP4_23 [1] */

 IP4_22 [1] */

 IP4_21 [1] */

 IP4_20_19 [2] */

 IP4_18_17 [2] */

 IP4_16_15 [2] */

 IP4_14_13 [2] */

 IP4_12_11 [2] */

 IP4_10_9 [2] */

 IP4_8_7 [2] */

 IP4_6_5 [2] */

 IP4_4 [1] */

 IP4_3_2 [2] */

 IP4_1 [1] */

 IP4_0 [1] */

 IP5_31_28 [4] */

 IP5_27_24 [4] */

 IP5_23_20 [4] */

 IP5_19_16 [4] */

 IP5_15_12 [4] */

 IP5_11 [1] */

 IP5_10 [1] */

 IP5_9 [1] */

 IP5_8 [1] */

 IP5_7 [1] */

 IP5_6 [1] */

 IP5_5 [1] */

 IP5_4 [1] */

 IP5_3 [1] */

 IP5_2 [1] */

 IP5_1 [1] */

 IP5_0 [1] */

 IP6_31_28 [4] */

 IP6_27_24 [4] */

 IP6_23_20 [4] */

 IP6_19 [1] */

 IP6_18_17 [2] */

 IP6_16 [1] */

 IP6_15_14 [2] */

 IP6_13_12 [2] */

 IP6_11_10 [2] */

 IP6_9_8 [2] */

 IP6_7 [1] */

 IP6_6 [1] */

 IP6_5 [1] */

 IP6_4 [1] */

 IP6_3 [1] */

 IP6_2 [1] */

 IP6_1 [1] */

 IP6_0 [1] */

 IP7_31_28 [4] */

 IP7_27_24 [4] */

 IP7_23_21 [3] */

 IP7_20 [1] */

 IP7_19 [1] */

 IP7_18 [1] */

 IP7_17 [1] */

 IP7_16 [1] */

 IP7_15_14 [2] */

 IP7_13_12 [2] */

 IP7_11_10 [2] */

 IP7_9_8 [2] */

 IP7_7 [1] */

 IP7_6 [1] */

 IP7_5_4 [2] */

 IP7_3_2 [2] */

 IP7_1_0 [2] */

 DU0_DR0_DATA0 */

 DU0_DR1_DATA1 */

 DU0_DR2_Y4_DATA2 */

 DU0_DR3_Y5_DATA3 */

 DU0_DR4_Y6_DATA4 */

 DU0_DR5_Y7_DATA5 */

 DU0_DR6_Y8_DATA6 */

 DU0_DR7_Y9_DATA7 */

 DU0_DG0_DATA8 */

 DU0_DG1_DATA9 */

 DU0_DG2_C6_DATA10 */

 DU0_DG3_C7_DATA11 */

 DU0_DG4_Y0_DATA12 */

 DU0_DG5_Y1_DATA13 */

 DU0_DG6_Y2_DATA14 */

 DU0_DG7_Y3_DATA15 */

 DU0_DB0 */

 DU0_DB1 */

 DU0_DB2_C0 */

 DU0_DB3_C1 */

 DU0_DB4_C2 */

 DU0_DB5_C3 */

 DU0_DB6_C4 */

 DU0_DB7_C5 */

 DU0_EXHSYNC/DU0_HSYNC */

 DU0_EXVSYNC/DU0_VSYNC */

 DU0_EXODDF/DU0_ODDF_DISP_CDE */

 DU0_DISP */

 DU0_CDE */

 DU1_DR2_Y4_DATA0 */

 DU1_DR3_Y5_DATA1 */

 DU1_DR4_Y6_DATA2 */

 DU1_DR5_Y7_DATA3 */

 DU1_DR6_DATA4 */

 DU1_DR7_DATA5 */

 DU1_DG2_C6_DATA6 */

 DU1_DG3_C7_DATA7 */

 DU1_DG4_Y0_DATA8 */

 DU1_DG5_Y1_DATA9 */

 DU1_DG6_Y2_DATA10 */

 DU1_DG7_Y3_DATA11 */

 DU1_DB2_C0_DATA12 */

 DU1_DB3_C1_DATA13 */

 DU1_DB4_C2_DATA14 */

 DU1_DB5_C3_DATA15 */

 DU1_DB6_C4 */

 DU1_DB7_C5 */

 DU1_EXHSYNC/DU1_HSYNC */

 DU1_EXVSYNC/DU1_VSYNC */

 DU1_EXODDF/DU1_ODDF_DISP_CDE */

 DU1_DISP */

 DU1_CDE */

 D0 */

 D1 */

 D2 */

 D3 */

 D4 */

 D5 */

 D6 */

 D7 */

 D8 */

 D9 */

 D10 */

 D11 */

 D12 */

 D13 */

 D14 */

 D15 */

 A0 */

 A1 */

 A2 */

 A3 */

 A4 */

 A5 */

 A6 */

 A7 */

 A8 */

 A9 */

 A10 */

 A11 */

 A12 */

 A13 */

 A14 */

 A15 */

 A16 */

 A17 */

 A18 */

 A19 */

 A20 */

 A21 */

 CS1#/A26 */

 EX_CS0# */

 EX_CS1# */

 EX_CS2# */

 EX_CS3# */

 EX_CS4# */

 EX_CS5# */

 BS# */

 RD# */

 RD/WR# */

 WE0# */

 WE1# */

 EX_WAIT0 */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 A22 */

 A23 */

 A24 */

 A25 */

 CS0# */

 VI0_CLK */

 VI0_CLKENB */

 VI0_HSYNC# */

 VI0_VSYNC# */

 VI0_D0_B0_C0 */

 VI0_D1_B1_C1 */

 VI0_D2_B2_C2 */

 VI0_D3_B3_C3 */

 VI0_D4_B4_C4 */

 VI0_D5_B5_C5 */

 VI0_D6_B6_C6 */

 VI0_D7_B7_C7 */

 VI0_D8_G0_Y0 */

 VI0_D9_G1_Y1 */

 VI0_D10_G2_Y2 */

 VI0_D11_G3_Y3 */

 VI0_FIELD */

 VI1_CLK */

 VI1_CLKENB */

 VI1_HSYNC# */

 VI1_VSYNC# */

 VI1_D0_B0_C0 */

 VI1_D1_B1_C1 */

 VI1_D2_B2_C2 */

 VI1_D3_B3_C3 */

 VI1_D4_B4_C4 */

 VI1_D5_B5_C5 */

 VI1_D6_B6_C6 */

 VI1_D7_B7_C7 */

 VI1_D8_G0_Y0 */

 VI1_D9_G1_Y1 */

 VI1_D10_G2_Y2 */

 VI1_D11_G3_Y3 */

 VI1_FIELD */

 VI2_CLK */

 VI2_CLKENB */

 VI2_HSYNC# */

 VI2_VSYNC# */

 VI2_D0_C0 */

 VI2_D1_C1 */

 VI2_D2_C2 */

 VI2_D3_C3 */

 VI2_D4_C4 */

 VI2_D5_C5 */

 VI2_D6_C6 */

 VI2_D7_C7 */

 VI2_D8_Y0 */

 VI2_D9_Y1 */

 VI2_D10_Y2 */

 VI2_D11_Y3 */

 VI2_FIELD */

 VI3_CLK */

 VI3_CLKENB */

 VI3_HSYNC# */

 VI3_VSYNC# */

 VI3_D0_C0 */

 VI3_D1_C1 */

 VI3_D2_C2 */

 VI3_D3_C3 */

 VI3_D4_C4 */

 VI3_D5_C5 */

 VI3_D6_C6 */

 VI3_D7_C7 */

 VI3_D8_Y0 */

 VI3_D9_Y1 */

 VI3_D10_Y2 */

 VI3_D11_Y3 */

 VI3_FIELD */

 VI4_CLK */

 VI4_CLKENB */

 VI4_HSYNC# */

 VI4_VSYNC# */

 VI4_D0_C0 */

 VI4_D1_C1 */

 VI4_D2_C2 */

 VI4_D3_C3 */

 VI4_D4_C4 */

 VI4_D5_C5 */

 VI4_D6_C6 */

 VI4_D7_C7 */

 VI4_D8_Y0 */

 VI4_D9_Y1 */

 VI4_D10_Y2 */

 VI4_D11_Y3 */

 VI4_FIELD */

 VI5_CLK */

 VI5_CLKENB */

 VI5_HSYNC# */

 VI5_VSYNC# */

 VI5_D0_C0 */

 VI5_D1_C1 */

 VI5_D2_C2 */

 VI5_D3_C3 */

 VI5_D4_C4 */

 VI5_D5_C5 */

 VI5_D6_C6 */

 VI5_D7_C7 */

 VI5_D8_Y0 */

 VI5_D9_Y1 */

 VI5_D10_Y2 */

 VI5_D11_Y3 */

 VI5_FIELD */

 HSCK0 */

 HCTS0# */

 HRTS0# */

 HTX0 */

 HRX0 */

 HSCK1 */

 HRTS1# */

 HCTS1# */

 HTX1 */

 HRX1 */

 SCK0 */

 CTS0# */

 RTS0# */

 TX0 */

 RX0 */

 SCK1 */

 CTS1# */

 RTS1# */

 TX1 */

 RX1 */

 SCK2 */

 TX2 */

 RX2 */

 SCK3 */

 TX3 */

 RX3 */

 SCIF_CLK */

 CAN0_TX */

 CAN0_RX */

 CAN_CLK */

 CAN1_TX */

 CAN1_RX */

 PWM0 */

 PWM1 */

 PWM2 */

 PWM3 */

 PWM4 */

 SD0_CLK */

 SD0_CMD */

 SD0_DAT0 */

 SD0_DAT1 */

 SD0_DAT2 */

 SD0_DAT3 */

 SD0_CD */

 SD0_WP */

 SSI_SCK3 */

 SSI_WS3 */

 SSI_SDATA3 */

 SSI_SCK4 */

 SSI_WS4 */

 SSI_SDATA4 */

 AUDIO_CLKOUT */

 AUDIO_CLKA */

 AUDIO_CLKB */

 ADICLK */

 ADICS_SAMP */

 ADIDATA */

 ADICHS0 */

 ADICHS1 */

 ADICHS2 */

 AVS1 */

 AVS2 */

 PUPR12 pull-up pins */

 DU0_DOTCLKIN */

 DU0_DOTCLKOUT */

 DU1_DOTCLKIN */

 DU1_DOTCLKOUT */

 TRST# */

 TCK */

 TMS */

 TDI */

 PUPR12 pull-down pins */

 EDBGREQ */

 sentinel */ }

 PMMR */

 SPDX-License-Identifier: GPL-2.0

/*

 * Combined GPIO and pin controller support for Renesas RZ/A1 (r7s72100) SoC

 *

 * Copyright (C) 2017 Jacopo Mondi

/*

 * This pin controller/gpio combined driver supports Renesas devices of RZ/A1

 * family.

 * This includes SoCs which are sub- or super- sets of this particular line,

 * as RZ/A1H (r7s721000), RZ/A1M (r7s721010) and RZ/A1L (r7s721020).

/*

 * Use 16 lower bits [15:0] for pin identifier

 * Use 16 higher bits [31:16] for pin mux function

 Pin mux flags */

/* ----------------------------------------------------------------------------

 * RZ/A1 pinmux flags

/*

 * rza1_bidir_pin - describe a single pin that needs bidir flag applied.

/*

 * rza1_bidir_entry - describe a list of pins that needs bidir flag applied.

 *		      Each struct rza1_bidir_entry describes a port.

/*

 * rza1_swio_pin - describe a single pin that needs swio flag applied.

/*

 * rza1_swio_entry - describe a list of pins that needs swio flag applied

/*

 * rza1_pinmux_conf - group together bidir and swio pinmux flag tables

/* ----------------------------------------------------------------------------

 * RZ/A1H (r7s72100) pinmux flags

 RZ/A1H (r7s72100x) pinmux flags table */

/* ----------------------------------------------------------------------------

 * RZ/A1L (r7s72102) pinmux flags

 RZ/A1L (r7s72102x) pinmux flags table */

/* ----------------------------------------------------------------------------

 * RZ/A1 types

/**

 * struct rza1_mux_conf - describes a pin multiplexing operation

 *

 * @id: the pin identifier from 0 to RZA1_NPINS

 * @port: the port where pin sits on

 * @pin: pin id

 * @mux_func: alternate function id number

 * @mux_flags: alternate function flags

 * @value: output value to set the pin to

/**

 * struct rza1_port - describes a pin port

 *

 * This is mostly useful to lock register writes per-bank and not globally.

 *

 * @lock: protect access to HW registers

 * @id: port number

 * @base: logical address base

 * @pins: pins sitting on this port

/**

 * struct rza1_pinctrl - RZ pincontroller device

 *

 * @dev: parent device structure

 * @mutex: protect [pinctrl|pinmux]_generic functions

 * @base: logical address base

 * @nport: number of pin controller ports

 * @ports: pin controller banks

 * @pins: pin array for pinctrl core

 * @desc: pincontroller desc for pinctrl core

 * @pctl: pinctrl device

 * @data: device specific data

/* ----------------------------------------------------------------------------

 * RZ/A1 pinmux flags

/*

 * rza1_pinmux_get_flags() - return pinmux flags associated to a pin

/* ----------------------------------------------------------------------------

 * RZ/A1 SoC operations

/*

 * rza1_set_bit() - un-locked set/clear a single bit in pin configuration

 *		    registers

/**

 * rza1_pin_reset() - reset a pin to default initial state

 *

 * Reset pin state disabling input buffer and bi-directional control,

 * and configure it as input port.

 * Note that pin is now configured with direction as input but with input

 * buffer disabled. This implies the pin value cannot be read in this state.

 *

 * @port: port where pin sits on

 * @pin: pin offset

/**

 * rza1_pin_set_direction() - set I/O direction on a pin in port mode

 *

 * When running in output port mode keep PBDC enabled to allow reading the

 * pin value from PPR.

 *

 * @port: port where pin sits on

 * @pin: pin offset

 * @input: input enable/disable flag

/**

 * rza1_pin_mux_single() - configure pin multiplexing on a single pin

 *

 * @rza1_pctl: RZ/A1 pin controller device

 * @mux_conf: pin multiplexing descriptor

 SWIO pinmux flags coming from DT are high precedence */

	/*

	 * Enable alternate function mode and select it.

	 *

	 * Be careful here: the pin mux sub-nodes in device tree

	 * enumerate alternate functions from 1 to 8;

	 * subtract 1 before using macros to match registers configuration

	 * which expects numbers from 0 to 7 instead.

	 *

	 * ----------------------------------------------------

	 * Alternate mode selection table:

	 *

	 * PMC	PFC	PFCE	PFCAE	(mux_func - 1)

	 * 1	0	0	0	0

	 * 1	1	0	0	1

	 * 1	0	1	0	2

	 * 1	1	1	0	3

	 * 1	0	0	1	4

	 * 1	1	0	1	5

	 * 1	0	1	1	6

	 * 1	1	1	1	7

	 * ----------------------------------------------------

	/*

	 * All alternate functions except a few need PIPCn = 1.

	 * If PIPCn has to stay disabled (SW IO mode), configure PMn according

	 * to I/O direction specified by pin configuration -after- PMC has been

	 * set to one.

/* ----------------------------------------------------------------------------

 * gpio operations

/**

 * rza1_gpio_request() - configure pin in port mode

 *

 * Configure a pin as gpio (port mode).

 * After reset, the pin is in input mode with input buffer disabled.

 * To use the pin as input or output, set_direction shall be called first

 *

 * @chip: gpio chip where the gpio sits on

 * @gpio: gpio offset

/**

 * rza1_gpio_disable_free() - reset a pin

 *

 * Surprisingly, disable_free a gpio, is equivalent to request it.

 * Reset pin to port mode, with input buffer disabled. This overwrites all

 * port direction settings applied with set_direction

 *

 * @chip: gpio chip where the gpio sits on

 * @gpio: gpio offset

 Set value before driving pin direction */

/**

 * rza1_gpio_get() - read a gpio pin value

 *

 * Read gpio pin value through PPR register.

 * Requires bi-directional mode to work when reading the value of a pin

 * in output mode

 *

 * @chip: gpio chip where the gpio sits on

 * @gpio: gpio offset

/* ----------------------------------------------------------------------------

 * pinctrl operations

/**

 * rza1_dt_node_pin_count() - Count number of pins in a dt node or in all its

 *			      children sub-nodes

 *

 * @np: device tree node to parse

/**

 * rza1_parse_pmx_function() - parse a pin mux sub-node

 *

 * @rza1_pctl: RZ/A1 pin controller device

 * @np: of pmx sub-node

 * @mux_confs: array of pin mux configurations to fill with parsed info

 * @grpins: array of pin ids to mux

	/*

	 * Collect pin configuration properties: they apply to all pins in

	 * this sub-node

	/*

	 * Create a mask with pinmux flags from pin configuration;

	 * very few pins (TIOC[0-4][A|B|C|D] require SWIO direction

	 * specified in device tree.

 for DT backwards compatibility */

 Collect pin positions and their mux settings. */

/**

 * rza1_dt_node_to_map() - map a pin mux node to a function/group

 *

 * Parse and register a pin mux function.

 *

 * @pctldev: pin controller device

 * @np: device tree node to parse

 * @map: pointer to pin map (output)

 * @num_maps: number of collected maps (output)

	/*

	 * Functions are made of 1 group only;

	 * in fact, functions and groups are identical for this pin controller

	 * except that functions carry an array of per-pin mux configuration

	 * settings.

	/*

	 * Parse the pinmux node.

	 * If the node does not contain "pinmux" property (-ENOENT)

	 * that property shall be specified in all its children sub-nodes.

 Register pin group and function name to pinctrl_generic */

 Create map where to retrieve function and mux settings from */

/* ----------------------------------------------------------------------------

 * pinmux operations

/**

 * rza1_set_mux() - retrieve pins from a group and apply their mux settings

 *

 * @pctldev: pin controller device

 * @selector: function selector

 * @group: group selector

/* ----------------------------------------------------------------------------

 * RZ/A1 pin controller driver operations

/**

 * rza1_parse_gpiochip() - parse and register a gpio chip and pin range

 *

 * The gpio controller subnode shall provide a "gpio-ranges" list property as

 * defined by gpio device tree binding documentation.

 *

 * @rza1_pctl: RZ/A1 pin controller device

 * @np: of gpio-controller node

 * @chip: gpio chip to register to gpiolib

 * @range: pin range to register to pinctrl core

	/*

	 * Find out on which port this gpio-chip maps to by inspecting the

	 * second argument of the "gpio-ranges" property.

/**

 * rza1_gpio_register() - parse DT to collect gpio-chips and gpio-ranges

 *

 * @rza1_pctl: RZ/A1 pin controller device

/**

 * rza1_pinctrl_register() - Enumerate pins, ports and gpiochips; register

 *			     them to pinctrl and gpio cores.

 *

 * @rza1_pctl: RZ/A1 pin controller device

			/*

			 * Setup ports;

			 * they provide per-port lock and logical base address.

 RZ/A1H, RZ/A1M */

 RZ/A1L */

 SPDX-License-Identifier: GPL-2.0

/*

 * R8A77951 processor support - PFC hardware block.

 *

 * Copyright (C) 2015-2019 Renesas Electronics Corporation

/*

 * F_() : just information

 * FM() : macro for FN_xxx / xxx_MARK

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 GPSR5 */

 GPSR6 */

 GPSR7 */

 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 IPSRx */		 1 */		 3 */				 5 */		 7 */		 9 */		 B */		
 MOD_SEL0 */			 1 */			 3 */			 5 */			 7 */

 MOD_SEL1 */			 1 */			 3 */			 5 */			 7 */

 MOD_SEL2 */			 1 */			 3 */

/*

 * These pins are not able to be muxed but have other properties

 * that can be set, such as drive-strength or pull-up/pull-down enable.

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 IPSR12 */

 IPSR13 */

 IPSR14 */

 IPSR15 */

 IPSR16 */

 IPSR17 */

 IPSR18 */

/*

 * Static pins can not be muxed between different functions but

 * still need mark entries in the pinmux list. Add each static

 * pin to the list without an associated function. The sh-pfc

 * core will do the right thing and skip trying to mux the pin

 * while still applying configuration to it.

/*

 * Pins not associated with a GPIO port.

 - AUDIO CLOCK ------------------------------------------------------------ */

 CLK A */

 CLK A */

 CLK A */

 CLK B */

 CLK B */

 CLK C */

 CLK C */

 CLKOUT */

 CLKOUT */

 CLKOUT */

 CLKOUT */

 CLKOUT1 */

 CLKOUT1 */

 CLKOUT2 */

 CLKOUT2 */

 CLKOUT3 */

 CLKOUT3 */

 - EtherAVB --------------------------------------------------------------- */

 AVB_LINK */

 AVB_MAGIC_ */

 AVB_PHY_INT */

 AVB_MDC, AVB_MDIO */

	/*

	 * AVB_TX_CTL, AVB_TXC, AVB_TD0,

	 * AVB_TD1, AVB_TD2, AVB_TD3,

	 * AVB_RX_CTL, AVB_RXC, AVB_RD0,

	 * AVB_RD1, AVB_RD2, AVB_RD3,

	 * AVB_TXCREFCLK

 AVB_AVTP_PPS */

 AVB_AVTP_MATCH_A */

 AVB_AVTP_CAPTURE_A */

  AVB_AVTP_MATCH_B */

 AVB_AVTP_CAPTURE_B */

 - CAN ------------------------------------------------------------------ */

 TX, RX */

 TX, RX */

 TX, RX */

 - CAN Clock -------------------------------------------------------------- */

 CLK */

 - CAN FD --------------------------------------------------------------- */

 TX, RX */

 TX, RX */

 TX, RX */

 - DRIF0 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 - DRIF1 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 - DRIF2 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 - DRIF3 --------------------------------------------------------------- */

 CLK, SYNC */

 D0 */

 D1 */

 CLK, SYNC */

 D0 */

 D1 */

 CONFIG_PINCTRL_PFC_R8A77951 */

 - DU --------------------------------------------------------------------- */

 R[7:2], G[7:2], B[7:2] */

 R[7:0], G[7:0], B[7:0] */

 CLKOUT */

 CLKOUT */

 EXVSYNC/VSYNC, EXHSYNC/HSYNC */

 EXDISP/EXODDF/EXCDE */

 CDE */

 DISP */

 - HSCIF0 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 - HSCIF1 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 - HSCIF2 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 - HSCIF3 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 RX, TX */

 RX, TX */

 - HSCIF4 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 - I2C -------------------------------------------------------------------- */

 SCL, SDA */

 SDA, SCL */

 SDA, SCL */

 SDA, SCL */

 SDA, SCL */

 SCL, SDA */

 SCL, SDA */

 SDA, SCL */

 SDA, SCL */

 SDA, SCL */

 - INTC-EX ---------------------------------------------------------------- */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 - MLB+ ------------------------------------------------------------------- */

 CONFIG_PINCTRL_PFC_R8A77951 */

 - MSIOF0 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF1 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF2 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF3 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - PWM0 --------------------------------------------------------------------*/

 PWM */

 - PWM1 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM2 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM3 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM4 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM5 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - PWM6 --------------------------------------------------------------------*/

 PWM */

 PWM */

 - QSPI0 ------------------------------------------------------------------ */

 QSPI0_SPCLK, QSPI0_SSL */

 QSPI0_MOSI_IO0, QSPI0_MISO_IO1 */

 QSPI0_MOSI_IO0, QSPI0_MISO_IO1 */

 QSPI0_IO2, QSPI0_IO3 */

 - QSPI1 ------------------------------------------------------------------ */

 QSPI1_SPCLK, QSPI1_SSL */

 QSPI1_MOSI_IO0, QSPI1_MISO_IO1 */

 QSPI1_MOSI_IO0, QSPI1_MISO_IO1 */

 QSPI1_IO2, QSPI1_IO3 */

 - SATA --------------------------------------------------------------------*/

 DEVSLP */

 DEVSLP */

 - SCIF0 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 - SCIF1 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 - SCIF2 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 - SCIF3 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 - SCIF4 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 SCK */

 RTS, CTS */

 - SCIF5 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 - SCIF Clock ------------------------------------------------------------- */

 SCIF_CLK */

 SCIF_CLK */

 - SDHI0 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI1 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI2 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 D[0:7] */

 CLK, CMD */

 CD */

 CD */

 WP */

 WP */

 DS */

 - SDHI3 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 D[0:7] */

 CLK, CMD */

 CD */

 WP */

 DS */

 - SSI -------------------------------------------------------------------- */

 SDATA */

 SCK, WS */

 SDATA */

 SDATA */

 SCK, WS */

 SCK, WS */

 SDATA */

 SDATA */

 SCK, WS */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SDATA */

 SDATA */

 SCK, WS */

 SCK, WS */

 - TMU -------------------------------------------------------------------- */

 TCLK */

 TCLK */

 TCLK */

 TCLK */

 - TPU ------------------------------------------------------------------- */

 TPU0TO0 */

 TPU0TO1 */

 TPU0TO2 */

 TPU0TO3 */

 - USB0 ------------------------------------------------------------------- */

 PWEN, OVC */

 - USB1 ------------------------------------------------------------------- */

 PWEN, OVC */

 - USB2 ------------------------------------------------------------------- */

 PWEN, OVC */

 - USB2_CH3 --------------------------------------------------------------- */

 PWEN, OVC */

 - USB30 ------------------------------------------------------------------ */

 PWEN, OVC */

 - VIN4 ------------------------------------------------------------------- */

 HSYNC#, VSYNC# */

 FIELD */

 CLKENB */

 CLK */

 - VIN5 ------------------------------------------------------------------- */

 HSYNC#, VSYNC# */

 FIELD */

 CLKENB */

 CLK */

 Deprecated */

 CONFIG_PINCTRL_PFC_R8A77951 */

 Deprecated, please use "avb_mdio" instead */

 CONFIG_PINCTRL_PFC_R8A77951 */

 CONFIG_PINCTRL_PFC_R8A77951 */

 CONFIG_PINCTRL_PFC_R8A77951 */

 IP7_15_12 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_31_28 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_27_24 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_23_20 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_19_16 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_15_12 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP18_11_8  */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 RESERVED 15 */

 RESERVED 2, 1, 0 */

 RESERVED 8, 7 */

 RESERVED 22 */

 RESERVED 16 */

 RESERVED 15, 14, 13, 12 */

 RESERVED 11, 10, 9, 8 */

 RESERVED 7, 6, 5, 4 */

 RESERVED 3, 2, 1 */

 QSPI0_SPCLK */

 QSPI0_MOSI_IO0 */

 QSPI0_MISO_IO1 */

 QSPI0_IO2 */

 QSPI0_IO3 */

 QSPI0_SSL */

 QSPI1_SPCLK */

 QSPI1_MOSI_IO0 */

 QSPI1_MISO_IO1 */

 QSPI1_IO2 */

 QSPI1_IO3 */

 QSPI1_SSL */

 RPC_INT# */

 RPC_WP# */

 RPC_RESET# */

 AVB_RX_CTL */

 AVB_RXC */

 AVB_RD0 */

 AVB_RD1 */

 AVB_RD2 */

 AVB_RD3 */

 AVB_TX_CTL */

 AVB_TXC */

 AVB_TD0 */

 AVB_TD1 */

 AVB_TD2 */

 AVB_TD3 */

 AVB_TXCREFCLK */

 AVB_MDIO */

 AVB_MDC */

 AVB_MAGIC */

 AVB_PHY_INT */

 AVB_LINK */

 AVB_AVTP_MATCH */

 AVB_AVTP_CAPTURE */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 PWM0 */

 PWM1 */

 PWM2 */

 A0 */

 A1 */

 A2 */

 A3 */

 A4 */

 A5 */

 A6 */

 A7 */

 A8 */

 A9 */

 A10 */

 A11 */

 A12 */

 A13 */

 A14 */

 A15 */

 A16 */

 A17 */

 A18 */

 A19 */

 CLKOUT */

 CS0 */

 CS1_A26 */

 BS */

 RD */

 RD_WR */

 WE0 */

 WE1 */

 EX_WAIT0 */

 PRESETOUT# */

 D0 */

 D1 */

 D2 */

 D3 */

 D4 */

 D5 */

 D6 */

 D7 */

 D8 */

 D9 */

 D10 */

 D11 */

 D12 */

 D13 */

 D14 */

 D15 */

 AVS1 */

 AVS2 */

 GP7_02 */

 GP7_03 */

 DU_DOTCLKIN0 */

 DU_DOTCLKIN1 */

 DU_DOTCLKIN2 */

 DU_DOTCLKIN3 */

 FSCLKST# */

 TMS */

 TDO */

 ASEBRK */

 SD0_CLK */

 SD0_CMD */

 SD0_DAT0 */

 SD0_DAT1 */

 SD0_DAT2 */

 SD0_DAT3 */

 SD1_CLK */

 SD1_CMD */

 SD1_DAT0 */

 SD1_DAT1 */

 SD1_DAT2 */

 SD1_DAT3 */

 SD2_CLK */

 SD2_CMD */

 SD2_DAT0 */

 SD2_DAT1 */

 SD2_DAT2 */

 SD2_DAT3 */

 SD2_DS */

 SD3_CLK */

 SD3_CMD */

 SD3_DAT0 */

 SD3_DAT1 */

 SD3_DAT2 */

 SD3_DAT3 */

 SD3_DAT4 */

 SD3_DAT5 */

 SD3_DAT6 */

 SD3_DAT7 */

 SD3_DS */

 SD0_CD */

 SD0_WP */

 SD1_CD */

 SD1_WP */

 SCK0 */

 RX0 */

 TX0 */

 CTS0 */

 RTS0 */

 RX1 */

 TX1 */

 CTS1 */

 RTS1 */

 SCK2 */

 TX2 */

 RX2 */

 HSCK0 */

 HRX0 */

 HTX0 */

 HCTS0 */

 HRTS0 */

 MSIOF0_SCK */

 MSIOF0_SYNC */

 MSIOF0_SS1 */

 MSIOF0_TXD */

 MSIOF0_SS2 */

 MSIOF0_RXD */

 MLB_CLK */

 MLB_SIG */

 MLB_DAT */

 MLB_REF */

 SSI_SCK01239 */

 SSI_WS01239 */

 SSI_SDATA0 */

 SSI_SDATA1 */

 SSI_SDATA2 */

 SSI_SCK349 */

 SSI_WS349 */

 SSI_SDATA3 */

 SSI_SCK4 */

 SSI_WS4 */

 SSI_SDATA4 */

 SSI_SCK5 */

 SSI_WS5 */

 SSI_SDATA5 */

 SSI_SCK6 */

 SSI_WS6 */

 SSI_SDATA6 */

 SSI_SCK78 */

 SSI_WS78 */

 SSI_SDATA7 */

 SSI_SDATA8 */

 SSI_SDATA9 */

 AUDIO_CLKA */

 AUDIO_CLKB */

 USB0_PWEN */

 USB0_OVC */

 USB1_PWEN */

 USB1_OVC */

 USB30_PWEN */

 USB30_OVC */

 GP6_30/USB2_CH3_PWEN */

 GP6_31/USB2_CH3_OVC */

 sentinel */ },

 QSPI0_SPCLK */

 QSPI0_MOSI_IO0 */

 QSPI0_MISO_IO1 */

 QSPI0_IO2 */

 QSPI0_IO3 */

 QSPI0_SSL */

 QSPI1_SPCLK */

 QSPI1_MOSI_IO0 */

 QSPI1_MISO_IO1 */

 QSPI1_IO2 */

 QSPI1_IO3 */

 QSPI1_SSL */

 RPC_INT# */

 RPC_WP# */

 RPC_RESET# */

 AVB_RX_CTL */

 AVB_RXC */

 AVB_RD0 */

 AVB_RD1 */

 AVB_RD2 */

 AVB_RD3 */

 AVB_TX_CTL */

 AVB_TXC */

 AVB_TD0 */

 AVB_TD1 */

 AVB_TD2 */

 AVB_TD3 */

 AVB_TXCREFCLK */

 AVB_MDIO */

 AVB_MDC */

 AVB_MAGIC */

 AVB_PHY_INT */

 AVB_LINK */

 AVB_AVTP_MATCH_A */

 AVB_AVTP_CAPTURE_A */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 PWM0 */

 PWM1_A */

 PWM2_A */

 A0 */

 A1 */

 A2 */

 A3 */

 A4 */

 A5 */

 A6 */

 A7 */

 A8 */

 A9 */

 A10 */

 A11 */

 A12 */

 A13 */

 A14 */

 A15 */

 A16 */

 A17 */

 A18 */

 A19 */

 CLKOUT */

 CS0_N */

 CS1_N */

 BS_N */

 RD_N */

 RD_WR_N */

 WE0_N */

 WE1_N */

 EX_WAIT0_A */

 PRESETOUT# */

 D0 */

 D1 */

 D2 */

 D3 */

 D4 */

 D5 */

 D6 */

 D7 */

 D8 */

 D9 */

 D10 */

 D11 */

 D12 */

 D13 */

 D14 */

 D15 */

 AVS1 */

 AVS2 */

 GP7_02 */

 GP7_03 */

 DU_DOTCLKIN0 */

 DU_DOTCLKIN1 */

 DU_DOTCLKIN2 */

 DU_DOTCLKIN3 */

 FSCLKST# */

 EXTALR*/

 TRST# */

 TCK */

 TMS */

 TDI */

 ASEBRK */

 SD0_CLK */

 SD0_CMD */

 SD0_DAT0 */

 SD0_DAT1 */

 SD0_DAT2 */

 SD0_DAT3 */

 SD1_CLK */

 SD1_CMD */

 SD1_DAT0 */

 SD1_DAT1 */

 SD1_DAT2 */

 SD1_DAT3 */

 SD2_CLK */

 SD2_CMD */

 SD2_DAT0 */

 SD2_DAT1 */

 SD2_DAT2 */

 SD2_DAT3 */

 SD2_DS */

 SD3_CLK */

 SD3_CMD */

 SD3_DAT0 */

 SD3_DAT1 */

 SD3_DAT2 */

 SD3_DAT3 */

 SD3_DAT4 */

 SD3_DAT5 */

 SD3_DAT6 */

 SD3_DAT7 */

 SD3_DS */

 SD0_CD */

 SD0_WP */

 SD1_CD */

 SD1_WP */

 SCK0 */

 RX0 */

 TX0 */

 CTS0_N */

 RTS0_N */

 RX1_A */

 TX1_A */

 CTS1_N */

 RTS1_N */

 SCK2 */

 TX2_A */

 RX2_A */

 HSCK0 */

 HRX0 */

 HTX0 */

 HCTS0_N */

 HRTS0_N */

 MSIOF0_SCK */

 MSIOF0_SYNC */

 MSIOF0_SS1 */

 MSIOF0_TXD */

 MSIOF0_SS2 */

 MSIOF0_RXD */

 MLB_CLK */

 MLB_SIG */

 MLB_DAT */

 MLB_REF */

 SSI_SCK01239 */

 SSI_WS01239 */

 SSI_SDATA0 */

 SSI_SDATA1_A */

 SSI_SDATA2_A */

 SSI_SCK349 */

 SSI_WS349 */

 SSI_SDATA3 */

 SSI_SCK4 */

 SSI_WS4 */

 SSI_SDATA4 */

 SSI_SCK5 */

 SSI_WS5 */

 SSI_SDATA5 */

 SSI_SCK6 */

 SSI_WS6 */

 SSI_SDATA6 */

 SSI_SCK78 */

 SSI_WS78 */

 SSI_SDATA7 */

 SSI_SDATA8 */

 SSI_SDATA9_A */

 AUDIO_CLKA_A */

 AUDIO_CLKB_B */

 USB0_PWEN */

 USB0_OVC */

 USB1_PWEN */

 USB1_OVC */

 USB30_PWEN */

 USB30_OVC */

 USB2_CH3_PWEN */

 USB2_CH3_OVC */

 sentinel */ },

 PMMR */

 PMMR */

 SPDX-License-Identifier: GPL-2.0

/*

 * SH7723 Pinmux

 *

 *  Copyright (C) 2008  Magnus Damm

 PTA GPIO */

 PTB GPIO */

 PTC GPIO */

 PTD GPIO */

 PTE GPIO */

 PTF GPIO */

 PTG GPIO */

 PTH GPIO */

 PTJ GPIO */

 PTK GPIO */

 PTL GPIO */

 PTM GPIO */

 PTN GPIO */

 PTQ GPIO */

 PTR GPIO */

 PTS GPIO */

 PTT GPIO */

 PTU GPIO */

 PTV GPIO */

 PTW GPIO */

 PTX GPIO */

 PTY GPIO */

 PTZ GPIO */

 PTA FN */

 PTB FN */

 PTC FN */

 PTD FN */

 PTE FN */

 PTF FN */

 PTG FN */

 PTG FN */

 PTJ FN */

 PTK FN */

 PTL FN */

 PTM FN */

 PTN FN */

 PTQ FN */

 PTR FN */

 PTS FN */

 PTT FN */

 PTU FN */

 PTV FN */

 PTW FN */

 PTX FN */

 PTY FN */

 PTZ FN */

 PTA */

 PTB */

 PTC */

 PTD */

 PTE */

 PTF */

 PTG */

 PTH */

 PTJ */

 PTK */

 PTL */

 PTM */

 PTN */

 PTQ */

 PTR */

 PTS */

 PTT */

 PTU */

 PTV */

 PTW */

 PTX */

 PTY */

 PTZ */

 SCIF0 */

 SCIF1 */

 SCIF2 */

 SCIF3 */

 SCIF4 */

 SCIF5 */

 CEU */

 LCDC */

 Main LCD */

 Main LCD - RGB Mode */

 Main LCD - SYS Mode */

 IRQ */

 AUD */

 SDHI0 (PTD) */

 SDHI0 (PTS) */

 SDHI1 */

 SIUA */

 SIUB */

 IRDA */

 VOU */

 KEYSC */

 MSIOF0 (PTF) */

 MSIOF0 (PTT+PTX) */

 MSIOF1 */

 TSIF */

 FLCTL */

 DMAC */

 ADC */

 CPG */

 TPU */

 BSC */

 ATAPI */

 SPDX-License-Identifier: GPL-2.0

/*

 * SH7786 Pinmux

 *

 * Copyright (C) 2008, 2009  Renesas Solutions Corp.

 * Kuninori Morimoto <morimoto.kuninori@renesas.com>

 *

 *  Based on SH7785 pinmux

 *

 *  Copyright (C) 2008  Magnus Damm

 PA GPIO */

 PB GPIO */

 PC GPIO */

 PD GPIO */

 PE GPIO */

 PF GPIO */

 PG GPIO */

 PH GPIO */

 PJ GPIO */

 PA FN */

 PB FN */

 PC FN */

 PD FN */

 PE FN */

 PF FN */

 PG FN */

 PH FN */

 PJ FN */

 PA */

 PB */

 PC */

 PD */

 PE */

 PF */

 PG */

 PH */

 PJ */

 FN */

 SPDX-License-Identifier: GPL-2.0

/*

 * r8a7791/r8a7743 processor support - PFC hardware block.

 *

 * Copyright (C) 2013 Renesas Electronics Corporation

 * Copyright (C) 2014-2017 Cogent Embedded, Inc.

/*

 * Pins 0-23 assigned to GPIO bank 6 can be used for SD interfaces in

 * which case they support both 3.3V and 1.8V signalling.

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 GPSR5 */

 GPSR6 */

 GPSR7 */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 IPSR12 */

 IPSR13 */

 IPSR14 */

 IPSR15 */

 IPSR16 */

 MOD_SEL */

 MOD_SEL2 */

 MOD_SEL3 */

 MOD_SEL4 */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 IPSR12 */

 IPSR13 */

 IPSR14 */

 IPSR15 */

 IPSR16 */

 PINMUX_DATA(GP_M_N_DATA, GP_M_N_FN...), */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 IPSR12 */

 IPSR13 */

 IPSR14 */

 IPSR15 */

 IPSR16 */

/*

 * Pins not associated with a GPIO port.

 - ADI -------------------------------------------------------------------- */

 ADIDATA, ADICS/SAMP, ADICLK */

 ADIDATA, ADICS/SAMP, ADICLK */

 ADICHS 0 */

 ADICHS 0 */

 ADICHS 1 */

 ADICHS 1 */

 ADICHS 2 */

 ADICHS 2 */

 ADIDATA B, ADICS/SAMP B, ADICLK B */

 ADIDATA B, ADICS/SAMP B, ADICLK B */

 ADICHS B 0 */

 ADICHS B 0 */

 ADICHS B 1 */

 ADICHS B 1 */

 ADICHS B 2 */

 ADICHS B 2 */

 CONFIG_PINCTRL_PFC_R8A7791 || CONFIG_PINCTRL_PFC_R8A7793 */

 - Audio Clock ------------------------------------------------------------ */

 CLK */

 CLK */

 CLK */

 CLK */

 CLK */

 - AVB -------------------------------------------------------------------- */

 - CAN -------------------------------------------------------------------- */

 TX, RX */

 TX, RX */

 TX, RX */

 TX, RX */

 TX, RX */

 TX, RX */

 TX, RX */

 TX, RX */

 TX, RX */

 TX, RX */

 CLK */

 CLK */

 CLK */

 CLK */

 - DU --------------------------------------------------------------------- */

 R[7:2], G[7:2], B[7:2] */

 R[7:0], G[7:0], B[7:0] */

 CLKOUT */

 CLKOUT */

 EXVSYNC/VSYNC, EXHSYNC/HSYNC */

 EXDISP/EXODDF/EXCDE */

 CDE */

 DISP */

 CLKIN */

 CLKIN */

 CLKIN */

 CLKIN */

 - ETH -------------------------------------------------------------------- */

 LINK */

 MAGIC */

 MDC, MDIO */

 RXD[0:1], RX_ER, CRS_DV, TXD[0:1], TX_EN, REF_CLK */

 - HSCIF0 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 RTS, CTS */

 RX, TX */

 SCK */

 - HSCIF1 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 RX, TX */

 SCK */

 RTS, CTS */

 - HSCIF2 ----------------------------------------------------------------- */

 RX, TX */

 SCK */

 RTS, CTS */

 RX, TX */

 RTS, CTS */

 RX, TX */

 SCK */

 RX, TX */

 - I2C0 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C1 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C2 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C3 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C4 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C7 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - I2C8 ------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - INTC ------------------------------------------------------------------- */

 IRQ */

 IRQ */

 IRQ */

 IRQ */

 - MLB+ ------------------------------------------------------------------- */

 CONFIG_PINCTRL_PFC_R8A7791 || CONFIG_PINCTRL_PFC_R8A7793 */

 - MMCIF ------------------------------------------------------------------ */

 D[0] */

 D[0:3] */

 D[0:7] */

 D[0:7] */

 CLK, CMD */

 - MSIOF0 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 - MSIOF1 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 SCK */

 SYNC */

 RXD */

 TXD */

 SCK */

 SYNC */

 SS1 */

 RXD */

 TXD */

 SCK */

 SYNC */

 RXD */

 TXD */

 - MSIOF2 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 SCK */

 SYNC */

 RXD */

 TXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 RXD */

 TXD */

 SCK */

 SYNC */

 RXD */

 TXD */

 - PWM -------------------------------------------------------------------- */

 - QSPI ------------------------------------------------------------------- */

 SPCLK, SSL */

 MOSI_IO0, MISO_IO1 */

 MOSI_IO0, MISO_IO1, IO2, IO3 */

 SPCLK, SSL */

 MOSI_IO0, MISO_IO1 */

 MOSI_IO0, MISO_IO1, IO2, IO3 */

 - SCIF0 ------------------------------------------------------------------ */

 RX, TX */

 RX, TX */

 RX, TX */

 RX, TX */

 RX, TX */

 - SCIF1 ------------------------------------------------------------------ */

 RX, TX */

 RX, TX */

 SCK */

 RX, TX */

 RX, TX */

 - SCIF2 ------------------------------------------------------------------ */

 RX, TX */

 RX, TX */

 SCK */

 RX, TX */

 RX, TX */

 - SCIF3 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 RX, TX */

 RX, TX */

 - SCIF4 ------------------------------------------------------------------ */

 RX, TX */

 RX, TX */

 RX, TX */

 - SCIF5 ------------------------------------------------------------------ */

 RX, TX */

 RX, TX */

 - SCIFA0 ----------------------------------------------------------------- */

 RXD, TXD */

 RXD, TXD */

 - SCIFA1 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RXD, TXD */

 SCK */

 RXD, TXD */

 - SCIFA2 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RXD, TXD */

 - SCIFA3 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RXD, TXD */

 SCK */

 RXD, TXD */

 SCK */

 - SCIFA4 ----------------------------------------------------------------- */

 RXD, TXD */

 RXD, TXD */

 RXD, TXD */

 - SCIFA5 ----------------------------------------------------------------- */

 RXD, TXD */

 RXD, TXD */

 RXD, TXD */

 - SCIFB0 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RXD, TXD */

 SCK */

 - SCIFB1 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RXD, TXD */

 SCK */

 RXD, TXD */

 - SCIFB2 ----------------------------------------------------------------- */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RTS, CTS */

 RXD, TXD */

 SCK */

 RXD, TXD */

 - SCIF Clock ------------------------------------------------------------- */

 SCIF_CLK */

 SCIF_CLK */

 - SDHI0 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI1 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SDHI2 ------------------------------------------------------------------ */

 D0 */

 D[0:3] */

 CLK, CMD */

 CD */

 WP */

 - SSI -------------------------------------------------------------------- */

 SDATA */

 SDATA */

 SCK, WS */

 SCK, WS */

 SDATA */

 SDATA */

 SCK, WS */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 SDATA */

 SCK, WS */

 SCK, WS */

 SDATA */

 SDATA */

 SDATA */

 SDATA */

 SCK, WS */

 SCK, WS */

 - TPU -------------------------------------------------------------------- */

 - USB0 ------------------------------------------------------------------- */

 PWEN */

 OVC */

 - USB1 ------------------------------------------------------------------- */

 PWEN */

 OVC */

 - VIN0 ------------------------------------------------------------------- */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 HSYNC */

 VSYNC */

 - VIN1 ----------------------------------------------------------------- */

 HSYNC */

 VSYNC */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 B */

 G */

 R */

 HSYNC */

 VSYNC */

 - VIN2 ----------------------------------------------------------------- */

 HSYNC */

 VSYNC */

 CONFIG_PINCTRL_PFC_R8A7791 || CONFIG_PINCTRL_PFC_R8A7793 */

 CONFIG_PINCTRL_PFC_R8A7791 || CONFIG_PINCTRL_PFC_R8A7793 */

	/*

	 * Retained for backwards compatibility, use can_clk_groups in new

	 * designs.

	/*

	 * Retained for backwards compatibility, use can_clk_groups in new

	 * designs.

/*

 * can_clk_groups allows for independent configuration, use can_clk function

 * in new designs.

 CONFIG_PINCTRL_PFC_R8A7791 || CONFIG_PINCTRL_PFC_R8A7793 */

 CONFIG_PINCTRL_PFC_R8A7791 || CONFIG_PINCTRL_PFC_R8A7793 */

 IP0_31 [1] */

 IP0_30_29 [2] */

 IP0_28_27 [2] */

 IP0_26_25 [2] */

 IP0_24_23 [2] */

 IP0_22_21 [2] */

 IP0_20_19 [2] */

 IP0_18_16 [3] */

 IP0_15 [1] */

 IP0_14 [1] */

 IP0_13 [1] */

 IP0_12 [1] */

 IP0_11 [1] */

 IP0_10 [1] */

 IP0_9 [1] */

 IP0_8 [1] */

 IP0_7 [1] */

 IP0_6 [1] */

 IP0_5 [1] */

 IP0_4 [1] */

 IP0_3 [1] */

 IP0_2 [1] */

 IP0_1 [1] */

 IP0_0 [1] */

 IP1_31_29 [3] */

 IP1_28_26 [3] */

 IP1_25_23 [3] */

 IP1_22_20 [3] */

 IP1_19_17 [3] */

 IP1_16_14 [3] */

 IP1_13_11 [3] */

 IP1_10_8 [3] */

 IP1_7_6 [2] */

 IP1_5_4 [2] */

 IP1_3_2 [2] */

 IP1_1_0 [2] */

 IP2_31_30 [2] */

 IP2_29_27 [3] */

 IP2_26_25 [2] */

 IP2_24_23 [2] */

 IP2_22_21 [2] */

 IP2_20_19 [2] */

 IP2_18_16 [3] */

 IP2_15_13 [3] */

 IP2_12_10 [3] */

 IP2_9_7 [3] */

 IP2_6_5 [2] */

 IP2_4_3 [2] */

 IP2_2_0 [3] */

 IP3_31 [1] */

 IP3_30_28 [3] */

 IP3_27_25 [3] */

 IP3_24_22 [3] */

 IP3_21_20 [2] */

 IP3_19_18 [2] */

 IP3_17_16 [2] */

 IP3_15_14 [2] */

 IP3_13_12 [2] */

 IP3_11_9 [3] */

 IP3_8_6 [3] */

 IP3_5_3 [3] */

 IP3_2_0 [3] */

 IP4_31 [1] */

 IP4_30_28 [3] */

 IP4_27_26 [2] */

 IP4_25_24 [2] */

 IP4_23_22 [2] */

 IP4_21 [1] */

 IP4_20 [1] */

 IP4_19 [1] */

 IP4_18_16 [3] */

 IP4_15_13 [3] */

 IP4_12_10 [3] */

 IP4_9_8 [2] */

 IP4_7_5 [3] */

 IP4_4_2 [3] */

 IP4_1_0 [2] */

 IP5_31_29 [3] */

 IP5_28_26 [3] */

 IP5_25_24 [2] */

 IP5_23_22 [2] */

 IP5_21_20 [2] */

 IP5_19_17 [3] */

 IP5_16_15 [2] */

 IP5_14_12 [3] */

 IP5_11_9 [3] */

 IP5_8_6 [3] */

 IP5_5_3 [3] */

 IP5_2_0 [3] */

 IP6_31_30 [2] */

 IP6_29_27 [3] */

 IP6_26_24 [3] */

 IP6_23_21 [3] */

 IP6_20_19 [2] */

 IP6_18_16 [3] */

 IP6_15_14 [2] */

 IP6_13_12 [2] */

 IP6_11_10 [2] */

 IP6_9_8 [2] */

 IP6_7_6 [2] */

 IP6_5_3 [3] */

 IP6_2_0 [3] */

 IP7_31_30 [2] */

 IP7_29_27 [3] */

 IP7_26_24 [3] */

 IP7_23_21 [3] */

 IP7_20_19 [2] */

 IP7_18_17 [2] */

 IP7_16_15 [2] */

 IP7_14_13 [2] */

 IP7_12_11 [2] */

 IP7_10_9 [2] */

 IP7_8_6 [3] */

 IP7_5_3 [3] */

 IP7_2_0 [3] */

 IP8_31 [1] */

 IP8_30_28 [3] */

 IP8_27_26 [2] */

 IP8_25_24 [2] */

 IP8_23_21 [3] */

 IP8_20_18 [3] */

 IP8_17_15 [3] */

 IP8_14_12 [3] */

 IP8_11_9 [3] */

 IP8_8_6 [3] */

 IP8_5_3 [3] */

 IP8_2_0 [3] */

 IP9_31_29 [3] */

 IP9_28_27 [2] */

 IP9_26_25 [2] */

 IP9_24_23 [2] */

 IP9_22_21 [2] */

 IP9_20_19 [2] */

 IP9_18_17 [2] */

 IP9_16 [1] */

 IP9_15_13 [3] */

 IP9_12 [1] */

 IP9_11 [1] */

 IP9_10_8 [3] */

 IP9_7 [1] */

 IP9_6 [1] */

 IP9_5_3 [3] */

 IP9_2_0 [3] */

 IP10_31_29 [3] */

 IP10_28_27 [2] */

 IP10_26_25 [2] */

 IP10_24_22 [3] */

 IP10_21_19 [3] */

 IP10_18_17 [2] */

 IP10_16_15 [2] */

 IP10_14_12 [3] */

 IP10_11_9 [3] */

 IP10_8_6 [3] */

 IP10_5_3 [3] */

 IP10_2_0 [3] */

 IP11_31_30 [2] */

 IP11_29_28 [2] */

 IP11_27 [1] */

 IP11_26 [1] */

 IP11_25 [1] */

 IP11_24 [1] */

 IP11_23 [1] */

 IP11_22 [1] */

 IP11_21 [1] */

 IP11_20 [1] */

 IP11_19 [1] */

 IP11_18_17 [2] */

 IP11_16_15 [2] */

 IP11_14_12 [3] */

 IP11_11_9 [3] */

 IP11_8_6 [3] */

 IP11_5_3 [3] */

 IP11_2_0 [3] */

 IP12_31_30 [2] */

 IP12_29_27 [3] */

 IP12_26_24 [3] */

 IP12_23_22 [2] */

 IP12_21_20 [2] */

 IP12_19_18 [2] */

 IP12_17_16 [2] */

 IP12_15_13 [3] */

 IP12_12_10 [3] */

 IP12_9_7 [3] */

 IP12_6_4 [3] */

 IP12_3_2 [2] */

 IP12_1_0 [2] */

 IP13_31 [1] */

 IP13_30_28 [3] */

 IP13_27 [1] */

 IP13_26 [1] */

 IP13_25 [1] */

 IP13_24_23 [2] */

 IP13_22 [1] */

 IP13_21_19 [3] */

 IP13_18_16 [3] */

 IP13_15 [1] */

 IP13_14 [1] */

 IP13_13 [1] */

 IP13_12 [1] */

 IP13_11 [1] */

 IP13_10 [1] */

 IP13_9_7 [3] */

 IP13_6_5 [2] */

 IP13_4_3 [2] */

 IP13_2_0 [3] */

 IP14_31_29 [3] */

 IP14_28_26 [3] */

 IP14_25_23 [3] */

 IP14_22_20 [3] */

 IP14_19_17 [3] */

 IP14_16_14 [3] */

 IP14_13_11 [3] */

 IP14_10_8 [3] */

 IP14_7 [1] */

 IP14_6 [1] */

 IP14_5 [1] */

 IP14_4 [1] */

 IP14_3 [1] */

 IP14_2 [1] */

 IP14_1_0 [2] */

 IP15_31_30 [2] */

 IP15_29_27 [3] */

 IP15_26_24 [3] */

 IP15_23_21 [3] */

 IP15_20_18 [3] */

 IP15_17_15 [3] */

 IP15_14_12 [3] */

 IP15_11_9 [3] */

 IP15_8_6 [3] */

 IP15_5_4 [2] */

 IP15_3_2 [2] */

 IP15_1_0 [2] */

 IP16_31_28 [4] */

 IP16_27_24 [4] */

 IP16_23_20 [4] */

 IP16_19_16 [4] */

 IP16_15_12 [4] */

 IP16_11_10 [2] */

 IP16_9_8 [2] */

 IP16_7_6 [2] */

 IP16_5_3 [3] */

 IP16_2_0 [3] */

 RESERVED [1] */

 SEL_SCIF1 [2] */

 SEL_SCIFB [2] */

 SEL_SCIFB2 [2] */

 SEL_SCIFB1 [3] */

 SEL_SCIFA1 [2] */

 SEL_SSI9 [1] */

 SEL_SCFA [1] */

 SEL_QSP [1] */

 SEL_SSI7 [1] */

 SEL_HSCIF1 [3] */

 RESERVED [2] */

 SEL_VI1 [2] */

 RESERVED [2] */

 SEL_TMU [1] */

 SEL_LBS [2] */

 SEL_TSIF0 [2] */

 SEL_SOF0 [2] */

 SEL_SCIF0 [3] */

 RESERVED [1] */

 SEL_SCIF [1] */

 SEL_CAN0 [3] */

 SEL_CAN1 [2] */

 RESERVED [1] */

 SEL_SCIFA2 [1] */

 SEL_SCIF4 [2] */

 RESERVED [2] */

 SEL_ADG [1] */

 SEL_FM [3] */

 SEL_SCIFA5 [2] */

 RESERVED [1] */

 SEL_GPS [2] */

 SEL_SCIFA4 [2] */

 SEL_SCIFA3 [2] */

 SEL_SIM [1] */

 RESERVED [1] */

 SEL_SSI8 [1] */

 SEL_HSCIF2 [2] */

 SEL_CANCLK [2] */

 SEL_IIC1 [2] */

 SEL_IIC0 [2] */

 SEL_I2C4 [2] */

 SEL_I2C3 [2] */

 SEL_SCIF3 [2] */

 SEL_IEB [2] */

 SEL_MMC [1] */

 SEL_SCIF5 [1] */

 RESERVED [2] */

 SEL_I2C2 [2] */

 SEL_I2C1 [3] */

 SEL_I2C0 [2] */

 RESERVED [2] */

 RESERVED [2] */

 RESERVED [1] */

 SEL_SOF1 [3] */

 SEL_HSCIF0 [2] */

 SEL_DIS [2] */

 RESERVED [1] */

 SEL_RAD [1] */

 SEL_RCN [1] */

 SEL_RSP [1] */

 SEL_SCIF2 [3] */

 RESERVED [2] */

 RESERVED [2] */

 SEL_SOF2 [3] */

 RESERVED [1] */

 SEL_SSI1 [1] */

 SEL_SSI0 [1] */

 SEL_SSP [2] */

 RESERVED [2] */

 RESERVED [2] */

 RESERVED [2] */

 A20 */

 A21 */

 A22 */

 A23 */

 A24 */

 DU0_DOTCLKIN */

 D0 */

 D1 */

 D2 */

 D3 */

 D4 */

 D5 */

 D6 */

 D7 */

 D8 */

 D9 */

 D10 */

 D11 */

 D12 */

 D13 */

 D14 */

 D15 */

 A0 */

 A1 */

 A2 */

 A3 */

 A4 */

 A5 */

 A6 */

 A7 */

 A8 */

 A9 */

 A10 */

 A11 */

 A12 */

 A13 */

 A14 */

 A15 */

 A16 */

 A17 */

 A18 */

 A19 */

 TRST# */

 TCK */

 TMS */

 TDI */

 CS1#/A26 */

 EX_CS0# */

 EX_CS1# */

 EX_CS2# */

 EX_CS3# */

 EX_CS4# */

 EX_CS5# */

 BS# */

 RD# */

 RD/WR# */

 WE0# */

 WE1# */

 EX_WAIT0 */

 DREQ0 */

 DACK0 */

 SPEEDIN */

 SSI_SCK0129 */

 SSI_WS0129 */

 SSI_SDATA0 */

 SSI_SCK1 */

 SSI_WS1 */

 SSI_SDATA1 */

 SSI_SCK2 */

 SSI_WS2 */

 SSI_SDATA2 */

 SSI_SCK34 */

 SSI_WS34 */

 SSI_SDATA3 */

 SSI_SCK4 */

 SSI_WS4 */

 SSI_SDATA4 */

 SSI_SCK5 */

 SSI_WS5 */

 SSI_SDATA5 */

 SSI_SCK6 */

 SSI_WS6 */

 SSI_SDATA6 */

 SSI_SCK78 */

 SSI_WS78 */

 SSI_SDATA7 */

 SSI_SDATA8 */

 SSI_SCK9 */

 SSI_WS9 */

 SSI_SDATA9 */

 AUDIO_CLKA */

 AUDIO_CLKB */

 AUDIO_CLKC */

 AUDIO_CLKOUT */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 IRQ6 */

 IRQ7 */

 IRQ8 */

 IRQ9 */

 DU1_DR0 */

 DU1_DR1 */

 DU1_DR2 */

 DU1_DR3 */

 DU1_DR4 */

 DU1_DR5 */

 DU1_DR6 */

 DU1_DR7 */

 DU1_DG0 */

 DU1_DG1 */

 DU1_DG2 */

 DU1_DG3 */

 DU1_DG4 */

 DU1_DG5 */

 DU1_DG6 */

 DU1_DG7 */

 DU1_DB0 */

 DU1_DB1 */

 DU1_DB2 */

 DU1_DB3 */

 DU1_DB4 */

 DU1_DB5 */

 DU1_DB6 */

 DU1_DB7 */

 DU1_DOTCLKIN */

 DU1_DOTCLKOUT0 */

 DU1_DOTCLKOUT1 */

 DU1_EXHSYNC_DU1_HSYNC */

 DU1_EXVSYNC_DU1_VSYNC */

 DU1_EXODDF_DU1_ODDF_DISP_CDE */

 DU1_DISP */

 DU1_CDE */

 VI0_CLK */

 VI0_CLKENB */

 VI0_FIELD */

 VI0_HSYNC# */

 VI0_VSYNC# */

 VI0_DATA0_VI0_B0 */

 VI0_DATA1_VI0_B1 */

 VI0_DATA2_VI0_B2 */

 VI0_DATA3_VI0_B3 */

 VI0_DATA4_VI0_B4 */

 VI0_DATA5_VI0_B5 */

 VI0_DATA6_VI0_B6 */

 VI0_DATA7_VI0_B7 */

 VI0_G0 */

 VI0_G1 */

 VI0_G2 */

 VI0_G3 */

 VI0_G4 */

 VI0_G5 */

 VI0_G6 */

 VI0_G7 */

 VI0_R0 */

 VI0_R1 */

 VI0_R2 */

 VI0_R3 */

 VI0_R4 */

 VI0_R5 */

 VI0_R6 */

 VI0_R7 */

 VI1_HSYNC# */

 VI1_VSYNC# */

 VI1_CLKENB */

 VI1_FIELD */

 VI1_CLK */

 VI1_DATA0 */

 VI1_DATA1 */

 VI1_DATA2 */

 VI1_DATA3 */

 VI1_DATA4 */

 VI1_DATA5 */

 VI1_DATA6 */

 VI1_DATA7 */

 ETH_MDIO */

 ETH_CRS_DV */

 ETH_RX_ER */

 ETH_RXD0 */

 ETH_RXD1 */

 ETH_LINK */

 ETH_REFCLK */

 ETH_TXD1 */

 ETH_TX_EN */

 ETH_MAGIC */

 ETH_TXD0 */

 ETH_MDC */

 STP_IVCXO27_0 */

 STP_ISCLK_0 */

 STP_ISD_0 */

 STP_ISEN_0 */

 STP_ISSYNC_0 */

 STP_OPWM_0 */

 SD0_CLK */

 SD0_CMD */

 SD0_DATA0 */

 SD0_DATA1 */

 SD0_DATA2 */

 SD0_DATA3 */

 SD0_CD */

 SD0_WP */

 SD2_CLK */

 SD2_CMD */

 SD2_DATA0 */

 SD2_DATA1 */

 SD2_DATA2 */

 SD2_DATA3 */

 SD2_CD */

 SD2_WP */

 SD3_CLK */

 SD3_CMD */

 SD3_DATA0 */

 SD3_DATA1 */

 SD3_DATA2 */

 SD3_DATA3 */

 SD3_CD */

 SD3_WP */

 MSIOF0_SCK */

 MSIOF0_SYNC */

 MSIOF0_TXD */

 MSIOF0_RXD */

 PUPR7 pull-up pins */

 MSIOF0_SS1 */

 MSIOF0_SS2 */

 SIM0_RST */

 SIM0_CLK */

 SIM0_D */

 GPS_CLK */

 GPS_SIGN */

 GPS_MAG */

 HCTS0# */

 HRTS0# */

 HSCK0 */

 HRX0 */

 HTX0 */

 HRX1 */

 HTX1 */

 A25 */

 CS0# */

 USB0_PWEN */

 USB0_OVC */

 USB1_PWEN */

 USB1_OVC */

 AVS1 */

 AVS2 */

 PUPR7 pull-down pins */

 ASEBRK#/ACK */

 sentinel */ },

 PMMR */

 PMMR */

 PMMR */

 PMMR */

 SPDX-License-Identifier: GPL-2.0

/*

 * R8A779A0 processor support - PFC hardware block.

 *

 * Copyright (C) 2020 Renesas Electronics Corp.

 *

 * This file is based on the drivers/pinctrl/renesas/pfc-r8a7795.c

/*

 * F_() : just information

 * FM() : macro for FN_xxx / xxx_MARK

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 GPSR5 */

 GPSR6 */

 GPSR7 */

 GPSR8 */

 GPSR9 */

 IP0SR1 */		 1 */		 3 */		 5 */		
 IP1SR1 */		 1 */		 3 */		 5 */		
 IP2SR1 */		 1 */		 3 */		 5 */		
 IP3SR1 */		 1 */		 3 */		 5 */		
 IP0SR2 */		 1 */			 3 */		 5 */		
 IP1SR2 */		 1 */			 3 */		 5 */		
 IP2SR2 */		 1 */			 3 */		 5 */		
 IP0SR3 */		 1 */			 3 */			 5 */		
 IP1SR3 */		 1 */			 3 */			 5 */		
 IP0SR4 */		 1 */			 3 */		 5 */		
 IP1SR4 */		 1 */			 3 */		 5 */		
 IP2SR4 */		 1 */			 3 */		 5 */		
 IP0SR5 */		 1 */			 3 */		 5 */		
 IP1SR5 */		 1 */			 3 */		 5 */		
 IP2SR5 */		 1 */			 3 */		 5 */		
 MOD_SEL2 */			 1 */		 3 */

 IP0SR1 */

 IP1SR1 */

 IP2SR1 */

 IP3SR1 */

 IP0SR2 */

 GP2_02 = SCL0 */

 GP2_03 = SDA0 */

 GP2_04 = SCL1 */

 GP2_05 = SDA1 */

 GP2_06 = SCL2 */

 GP2_07 = SDA2 */

 GP2_08 = SCL3 */

 GP2_09 = SDA3 */

 GP2_10 = SCL4 */

 GP2_11 = SDA4 */

 GP2_12 = SCL5 */

 GP2_13 = SDA5 */

 GP2_14 = SCL6 */

 GP2_15 = SDA6 */

 IP2SR2 */

 IP0SR3 */

 IP1SR3 */

 IP0SR4 */

 IP1SR4 */

 IP2SR4 */

 IP0SR5 */

 IP1SR5 */

 IP2SR5 */

/*

 * Pins not associated with a GPIO port.

 - AVB0 ------------------------------------------------ */

 AVB0_LINK */

 AVB0_MAGIC */

 AVB0_PHY_INT */

 AVB0_MDC, AVB0_MDIO */

	/*

	 * AVB0_TX_CTL, AVB0_TXC, AVB0_TD0, AVB0_TD1, AVB0_TD2, AVB0_TD3,

	 * AVB0_RX_CTL, AVB0_RXC, AVB0_RD0, AVB0_RD1, AVB0_RD2, AVB0_RD3,

 AVB0_TXCREFCLK */

 AVB0_AVTP_PPS */

 AVB0_AVTP_CAPTURE */

 AVB0_AVTP_MATCH */

 - AVB1 ------------------------------------------------ */

 AVB1_LINK */

 AVB1_MAGIC */

 AVB1_PHY_INT */

 AVB1_MDC, AVB1_MDIO */

	/*

	 * AVB1_TX_CTL, AVB1_TXC, AVB1_TD0, AVB1_TD1, AVB1_TD2, AVB1_TD3,

	 * AVB1_RX_CTL, AVB1_RXC, AVB1_RD0, AVB1_RD1, AVB1_RD2, AVB1_RD3,

 AVB1_TXCREFCLK */

 AVB1_AVTP_PPS */

 AVB1_AVTP_CAPTURE */

 AVB1_AVTP_MATCH */

 - AVB2 ------------------------------------------------ */

 AVB2_LINK */

 AVB2_MAGIC */

 AVB2_PHY_INT */

 AVB2_MDC, AVB2_MDIO */

	/*

	 * AVB2_TX_CTL, AVB2_TXC, AVB2_TD0, AVB2_TD1, AVB2_TD2, AVB2_TD3,

	 * AVB2_RX_CTL, AVB2_RXC, AVB2_RD0, AVB2_RD1, AVB2_RD2, AVB2_RD3,

 AVB2_TXCREFCLK */

 AVB2_AVTP_PPS */

 AVB2_AVTP_CAPTURE */

 AVB2_AVTP_MATCH */

 - AVB3 ------------------------------------------------ */

 AVB3_LINK */

 AVB3_MAGIC */

 AVB3_PHY_INT */

 AVB3_MDC, AVB3_MDIO */

	/*

	 * AVB3_TX_CTL, AVB3_TXC, AVB3_TD0, AVB3_TD1, AVB3_TD2, AVB3_TD3,

	 * AVB3_RX_CTL, AVB3_RXC, AVB3_RD0, AVB3_RD1, AVB3_RD2, AVB3_RD3,

 AVB3_TXCREFCLK */

 AVB3_AVTP_PPS */

 AVB3_AVTP_CAPTURE */

 AVB3_AVTP_MATCH */

 - AVB4 ------------------------------------------------ */

 AVB4_LINK */

 AVB4_MAGIC */

 AVB4_PHY_INT */

 AVB4_MDC, AVB4_MDIO */

	/*

	 * AVB4_TX_CTL, AVB4_TXC, AVB4_TD0, AVB4_TD1, AVB4_TD2, AVB4_TD3,

	 * AVB4_RX_CTL, AVB4_RXC, AVB4_RD0, AVB4_RD1, AVB4_RD2, AVB4_RD3,

 AVB4_TXCREFCLK */

 AVB4_AVTP_PPS */

 AVB4_AVTP_CAPTURE */

 AVB4_AVTP_MATCH */

 - AVB5 ------------------------------------------------ */

 AVB5_LINK */

 AVB5_MAGIC */

 AVB5_PHY_INT */

 AVB5_MDC, AVB5_MDIO */

	/*

	 * AVB5_TX_CTL, AVB5_TXC, AVB5_TD0, AVB5_TD1, AVB5_TD2, AVB5_TD3,

	 * AVB5_RX_CTL, AVB5_RXC, AVB5_RD0, AVB5_RD1, AVB5_RD2, AVB5_RD3,

 AVB5_TXCREFCLK */

 AVB5_AVTP_PPS */

 AVB5_AVTP_CAPTURE */

 AVB5_AVTP_MATCH */

 - CANFD0 ----------------------------------------------------------------- */

 CANFD0_TX, CANFD0_RX */

 - CANFD1 ----------------------------------------------------------------- */

 CANFD1_TX, CANFD1_RX */

 - CANFD2 ----------------------------------------------------------------- */

 CANFD2_TX, CANFD2_RX */

 - CANFD3 ----------------------------------------------------------------- */

 CANFD3_TX, CANFD3_RX */

 - CANFD4 ----------------------------------------------------------------- */

 CANFD4_TX, CANFD4_RX */

 - CANFD5 ----------------------------------------------------------------- */

 CANFD5_TX, CANFD5_RX */

 - CANFD6 ----------------------------------------------------------------- */

 CANFD6_TX, CANFD6_RX */

 - CANFD7 ----------------------------------------------------------------- */

 CANFD7_TX, CANFD7_RX */

 - CANFD Clock ------------------------------------------------------------ */

 CAN_CLK */

 - DU --------------------------------------------------------------------- */

 DU_DR[7:2], DU_DG[7:2], DU_DB[7:2] */

 DU_DOTCLKOUT */

 DU_HSYNC, DU_VSYNC */

 DU_EXODDF/DU_ODDF/DISP/CDE */

 - HSCIF0 ----------------------------------------------------------------- */

 HRX0, HTX0 */

 HSCK0 */

 HRTS0#, HCTS0# */

 - HSCIF1 ----------------------------------------------------------------- */

 HRX1, HTX1 */

 HSCK1 */

 HRTS1#, HCTS1# */

 - HSCIF2 ----------------------------------------------------------------- */

 HRX2, HTX2 */

 HSCK2 */

 HRTS2#, HCTS2# */

 - HSCIF3 ----------------------------------------------------------------- */

 HRX3, HTX3 */

 HSCK3 */

 HRTS3#, HCTS3# */

 - I2C0 ------------------------------------------------------------------- */

 SDA0, SCL0 */

 - I2C1 ------------------------------------------------------------------- */

 SDA1, SCL1 */

 - I2C2 ------------------------------------------------------------------- */

 SDA2, SCL2 */

 - I2C3 ------------------------------------------------------------------- */

 SDA3, SCL3 */

 - I2C4 ------------------------------------------------------------------- */

 SDA4, SCL4 */

 - I2C5 ------------------------------------------------------------------- */

 SDA5, SCL5 */

 - I2C6 ------------------------------------------------------------------- */

 SDA6, SCL6 */

 - INTC-EX ---------------------------------------------------------------- */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 IRQ4 */

 IRQ5 */

 - MMC -------------------------------------------------------------------- */

 MMC_SD_D0 */

 MMC_SD_D[0:3] */

 MMC_SD_D[0:3], MMC_D[4:7] */

 MMC_SD_CLK, MMC_SD_CMD */

 SD_CD */

 SD_WP */

 MMC_DS */

 - MSIOF0 ----------------------------------------------------------------- */

 MSIOF0_SCK */

 MSIOF0_SYNC */

 MSIOF0_SS1 */

 MSIOF0_SS2 */

 MSIOF0_TXD */

 MSIOF0_RXD */

 - MSIOF1 ----------------------------------------------------------------- */

 MSIOF1_SCK */

 MSIOF1_SYNC */

 MSIOF1_SS1 */

 MSIOF1_SS2 */

 MSIOF1_TXD */

 MSIOF1_RXD */

 - MSIOF2 ----------------------------------------------------------------- */

 MSIOF2_SCK */

 MSIOF2_SYNC */

 MSIOF2_SS1 */

 MSIOF2_SS2 */

 MSIOF2_TXD */

 MSIOF2_RXD */

 - MSIOF3 ----------------------------------------------------------------- */

 MSIOF3_SCK */

 MSIOF3_SYNC */

 MSIOF3_SS1 */

 MSIOF3_SS2 */

 MSIOF3_TXD */

 MSIOF3_RXD */

 - MSIOF4 ----------------------------------------------------------------- */

 MSIOF4_SCK */

 MSIOF4_SYNC */

 MSIOF4_SS1 */

 MSIOF4_SS2 */

 MSIOF4_TXD */

 MSIOF4_RXD */

 - MSIOF5 ----------------------------------------------------------------- */

 MSIOF5_SCK */

 MSIOF5_SYNC */

 MSIOF5_SS1 */

 MSIOF5_SS2 */

 MSIOF5_TXD */

 MSIOF5_RXD */

 - PWM0 ------------------------------------------------------------------- */

 PWM0 */

 - PWM1 ------------------------------------------------------------------- */

 PWM1 */

 - PWM2 ------------------------------------------------------------------- */

 PWM2 */

 - PWM3 ------------------------------------------------------------------- */

 PWM3 */

 - PWM4 ------------------------------------------------------------------- */

 PWM4 */

 - QSPI0 ------------------------------------------------------------------ */

 SPCLK, SSL */

 MOSI_IO0, MISO_IO1 */

 MOSI_IO0, MISO_IO1, IO2, IO3 */

 - QSPI1 ------------------------------------------------------------------ */

 SPCLK, SSL */

 MOSI_IO0, MISO_IO1 */

 MOSI_IO0, MISO_IO1, IO2, IO3 */

 - SCIF0 ------------------------------------------------------------------ */

 RX0, TX0 */

 SCK0 */

 RTS0#, CTS0# */

 - SCIF1 ------------------------------------------------------------------ */

 RX, TX */

 RX, TX */

 SCK1 */

 RTS1#, CTS1# */

 - SCIF3 ------------------------------------------------------------------ */

 RX3, TX3 */

 SCK3 */

 RTS3#, CTS3# */

 - SCIF4 ------------------------------------------------------------------ */

 RX4, TX4 */

 SCK4 */

 RTS4#, CTS4# */

 - SCIF Clock ------------------------------------------------------------- */

 SCIF_CLK */

 - TMU -------------------------------------------------------------------- */

 TCLK1 */

 TCLK1 */

 TCLK2 */

 TCLK2 */

 TCLK3 */

 TCLK4 */

 - TPU ------------------------------------------------------------------- */

 TPU0TO0 */

 TPU0TO1 */

 TPU0TO2 */

 TPU0TO3 */

 RESERVED 31, 30, 29, 28 */

 RESERVED 27, 26, 25, 24 */

 RESERVED 23, 22, 21, 20 */

 RESERVED 19, 18, 17, 16 */

 QSPI1_MOSI_IO0 */

 QSPI1_SPCLK */

 QSPI0_SSL */

 QSPI0_IO3 */

 QSPI0_IO2 */

 QSPI0_MISO_IO1 */

 QSPI0_MOSI_IO0 */

 QSPI0_SPCLK */

 SD_WP */

 RPC_INT_N */

 RPC_WP_N */

 RPC_RESET_N */

 QSPI1_SSL */

 QSPI1_IO3 */

 QSPI1_IO2 */

 QSPI1_MISO_IO1 */

 MMC_SD_CLK */

 MMC_SD_D3 */

 MMC_SD_D2 */

 MMC_SD_D1 */

 MMC_SD_D0 */

 MMC_SD_CMD */

 MMC_DS */

 SD_CD */

 MMC_D7 */

 MMC_D6 */

 MMC_D5 */

 MMC_D4 */

 MSIOF0_TXD */

 MSIOF0_RXD */

 HTX0 */

 HCTS0_N */

 HRTS0_N */

 HSCK0 */

 HRX0 */

 SCIF_CLK */

 MSIOF1_SYNC */

 MSIOF1_SCK */

 MSIOF1_TXD */

 MSIOF1_RXD */

 MSIOF0_SS2 */

 MSIOF0_SS1 */

 MSIOF0_SYNC */

 MSIOF0_SCK */

 MSIOF2_SS2 */

 MSIOF2_SS1 */

 MSIOF2_SYNC */

 MSIOF2_SCK */

 MSIOF2_TXD */

 MSIOF2_RXD */

 MSIOF1_SS2 */

 MSIOF1_SS1 */

 GP1_30 */

 GP1_29 */

 GP1_28 */

 IRQ3 */

 IRQ2 */

 IRQ1 */

 IRQ0 */

 GP2_07 */

 GP2_06 */

 GP2_05 */

 GP2_04 */

 GP2_03 */

 GP2_02 */

 IPC_CLKOUT */

 IPC_CLKIN */

 GP2_15 */

 GP2_14 */

 GP2_13 */

 GP2_12 */

 GP2_11 */

 GP2_10 */

 GP2_9 */

 GP2_8 */

 TCLK1_A */

 TPU0TO1 */

 TPU0TO0 */

 CLK_EXTFXR */

 RXDB_EXTFXR */

 FXR_TXDB */

 RXDA_EXTFXR_A */

 FXR_TXDA_A */

 TCLK2_A */

 CANFD3_TX */

 CANFD2_RX */

 CANFD2_TX */

 CANFD1_RX */

 CANFD1_TX */

 CANFD0_RX */

 CANFD0_TX */

 CAN_CLK */

 CANFD7_TX */

 CANFD6_RX */

 CANFD6_TX */

 CANFD5_RX */

 CANFD5_TX */

 CANFD4_RX */

 CANFD4_TX*/

 CANFD3_RX */

 CANFD7_RX */

 AVB0_TXC */

 AVB0_TX_CTL */

 AVB0_RD3 */

 AVB0_RD2 */

 AVB0_RD1 */

 AVB0_RD0 */

 AVB0_RXC */

 AVB0_RX_CTL */

 AVB0_MAGIC */

 AVB0_MDC */

 AVB0_MDIO */

 AVB0_TXCREFCLK */

 AVB0_TD3 */

 AVB0_TD2 */

 AVB0_TD1*/

 AVB0_TD0 */

 PCIE2_CLKREQ_N */

 PCIE1_CLKREQ_N */

 PCIE0_CLKREQ_N */

 AVB0_AVTP_PPS */

 AVB0_AVTP_CAPTURE */

 AVB0_AVTP_MATCH */

 AVB0_LINK */

 AVB0_PHY_INT */

 AVS1 */

 AVS0 */

 PCIE3_CLKREQ_N */

 AVB1_TXC */

 AVB1_TX_CTL */

 AVB1_RD3 */

 AVB1_RD2 */

 AVB1_RD1 */

 AVB1_RD0 */

 AVB1_RXC */

 AVB1_RX_CTL */

 AVB1_MAGIC */

 AVB1_MDC */

 AVB1_MDIO */

 AVB1_TXCREFCLK */

 AVB1_TD3 */

 AVB1_TD2 */

 AVB1_TD1*/

 AVB1_TD0 */

 AVB1_AVTP_PPS */

 AVB1_AVTP_CAPTURE */

 AVB1_AVTP_MATCH */

 AVB1_LINK */

 AVB1_PHY_INT */

 AVB2_TXC */

 AVB2_TX_CTL */

 AVB2_RD3 */

 AVB2_RD2 */

 AVB2_RD1 */

 AVB2_RD0 */

 AVB2_RXC */

 AVB2_RX_CTL */

 AVB2_MAGIC */

 AVB2_MDC */

 AVB2_MDIO */

 AVB2_TXCREFCLK */

 AVB2_TD3 */

 AVB2_TD2 */

 AVB2_TD1*/

 AVB2_TD0 */

 AVB2_AVTP_PPS */

 AVB2_AVTP_CAPTURE */

 AVB2_AVTP_MATCH */

 AVB2_LINK */

 AVB2_PHY_INT */

 AVB3_TXC */

 AVB3_TX_CTL */

 AVB3_RD3 */

 AVB3_RD2 */

 AVB3_RD1 */

 AVB3_RD0 */

 AVB3_RXC */

 AVB3_RX_CTL */

 AVB3_MAGIC */

 AVB3_MDC */

 AVB3_MDIO */

 AVB3_TXCREFCLK */

 AVB3_TD3 */

 AVB3_TD2 */

 AVB3_TD1*/

 AVB3_TD0 */

 AVB3_AVTP_PPS */

 AVB3_AVTP_CAPTURE */

 AVB3_AVTP_MATCH */

 AVB3_LINK */

 AVB3_PHY_INT */

 AVB4_TXC */

 AVB4_TX_CTL */

 AVB4_RD3 */

 AVB4_RD2 */

 AVB4_RD1 */

 AVB4_RD0 */

 AVB4_RXC */

 AVB4_RX_CTL */

 AVB4_MAGIC */

 AVB4_MDC */

 AVB4_MDIO */

 AVB4_TXCREFCLK */

 AVB4_TD3 */

 AVB4_TD2 */

 AVB4_TD1*/

 AVB4_TD0 */

 AVB4_AVTP_PPS */

 AVB4_AVTP_CAPTURE */

 AVB4_AVTP_MATCH */

 AVB4_LINK */

 AVB4_PHY_INT */

 AVB5_TXC */

 AVB5_TX_CTL */

 AVB5_RD3 */

 AVB5_RD2 */

 AVB5_RD1 */

 AVB5_RD0 */

 AVB5_RXC */

 AVB5_RX_CTL */

 AVB5_MAGIC */

 AVB5_MDC */

 AVB5_MDIO */

 AVB5_TXCREFCLK */

 AVB5_TD3 */

 AVB5_TD2 */

 AVB5_TD1*/

 AVB5_TD0 */

 AVB5_AVTP_PPS */

 AVB5_AVTP_CAPTURE */

 AVB5_AVTP_MATCH */

 AVB5_LINK */

 AVB5_PHY_INT */

 sentinel */ },

 QSPI0_SPCLK */

 QSPI0_MOSI_IO0 */

 QSPI0_MISO_IO1 */

 QSPI0_IO2 */

 QSPI0_IO3 */

 QSPI0_SSL */

 QSPI1_SPCLK */

 QSPI1_MOSI_IO0 */

 QSPI1_MISO_IO1 */

 QSPI1_IO2 */

 QSPI1_IO3 */

 QSPI1_SSL */

 RPC_RESET_N */

 RPC_WP_N */

 RPC_INT_N */

 SD_WP */

 SD_CD */

 MMC_DS */

 MMC_SD_CMD */

 MMC_SD_D0 */

 MMC_SD_D1 */

 MMC_SD_D2 */

 MMC_SD_D3 */

 MMC_SD_CLK */

 MMC_D4 */

 MMC_D5 */

 MMC_D6 */

 MMC_D7 */

 SCIF_CLK */

 HRX0 */

 HSCK0 */

 HRTS0_N */

 HCTS0_N */

 HTX0 */

 MSIOF0_RXD */

 MSIOF0_TXD */

 MSIOF0_SCK */

 MSIOF0_SYNC */

 MSIOF0_SS1 */

 MSIOF0_SS2 */

 MSIOF1_RXD */

 MSIOF1_TXD */

 MSIOF1_SCK */

 MSIOF1_SYNC */

 MSIOF1_SS1 */

 MSIOF1_SS2 */

 MSIOF2_RXD */

 MSIOF2_TXD */

 MSIOF2_SCK */

 MSIOF2_SYNC */

 MSIOF2_SS1 */

 MSIOF2_SS2 */

 IRQ0 */

 IRQ1 */

 IRQ2 */

 IRQ3 */

 GP1_28 */

 GP1_29 */

 GP1_30 */

 IPC_CLKIN */

 IPC_CLKOUT */

 GP2_02 */

 GP2_03 */

 GP2_04 */

 GP2_05 */

 GP2_06 */

 GP2_07 */

 GP2_08 */

 GP2_09 */

 GP2_10 */

 GP2_11 */

 GP2_12 */

 GP2_13 */

 GP2_14 */

 GP2_15 */

 FXR_TXDA_A */

 RXDA_EXTFXR_A */

 FXR_TXDB */

 RXDB_EXTFXR */

 CLK_EXTFXR */

 TPU0TO0 */

 TPU0TO1 */

 TCLK1_A */

 TCLK2_A */

 CAN_CLK */

 CANFD0_TX */

 CANFD0_RX */

 CANFD1_TX */

 CANFD1_RX */

 CANFD2_TX */

 CANFD2_RX */

 CANFD3_TX */

 CANFD3_RX */

 CANFD4_TX */

 CANFD4_RX */

 CANFD5_TX */

 CANFD5_RX */

 CANFD6_TX */

 CANFD6_RX */

 CANFD7_TX */

 CANFD7_RX */

 AVB0_RX_CTL */

 AVB0_RXC */

 AVB0_RD0 */

 AVB0_RD1 */

 AVB0_RD2 */

 AVB0_RD3 */

 AVB0_TX_CTL */

 AVB0_TXC */

 AVB0_TD0 */

 AVB0_TD1 */

 AVB0_TD2 */

 AVB0_TD3 */

 AVB0_TXREFCLK */

 AVB0_MDIO */

 AVB0_MDC */

 AVB0_MAGIC */

 AVB0_PHY_INT */

 AVB0_LINK */

 AVB0_AVTP_MATCH */

 AVB0_AVTP_CAPTURE */

 AVB0_AVTP_PPS */

 PCIE0_CLKREQ_N */

 PCIE1_CLKREQ_N */

 PCIE2_CLKREQ_N */

 PCIE3_CLKREQ_N */

 AVS0 */

 AVS1 */

 AVB1_RX_CTL */

 AVB1_RXC */

 AVB1_RD0 */

 AVB1_RD1 */

 AVB1_RD2 */

 AVB1_RD3 */

 AVB1_TX_CTL */

 AVB1_TXC */

 AVB1_TD0 */

 AVB1_TD1 */

 AVB1_TD2 */

 AVB1_TD3 */

 AVB1_TXCREFCLK */

 AVB1_MDIO */

 AVB1_MDC */

 AVB1_MAGIC */

 AVB1_PHY_INT */

 AVB1_LINK */

 AVB1_AVTP_MATCH */

 AVB1_AVTP_CAPTURE */

 AVB1_AVTP_PPS */

 AVB2_RX_CTL */

 AVB2_RXC */

 AVB2_RD0 */

 AVB2_RD1 */

 AVB2_RD2 */

 AVB2_RD3 */

 AVB2_TX_CTL */

 AVB2_TXC */

 AVB2_TD0 */

 AVB2_TD1 */

 AVB2_TD2 */

 AVB2_TD3 */

 AVB2_TXCREFCLK */

 AVB2_MDIO */

 AVB2_MDC*/

 AVB2_MAGIC */

 AVB2_PHY_INT */

 AVB2_LINK */

 AVB2_AVTP_MATCH */

 AVB2_AVTP_CAPTURE */

 AVB2_AVTP_PPS */

 AVB3_RX_CTL */

 AVB3_RXC */

 AVB3_RD0 */

 AVB3_RD1 */

 AVB3_RD2 */

 AVB3_RD3 */

 AVB3_TX_CTL */

 AVB3_TXC */

 AVB3_TD0 */

 AVB3_TD1 */

 AVB3_TD2 */

 AVB3_TD3 */

 AVB3_TXCREFCLK */

 AVB3_MDIO */

 AVB3_MDC */

 AVB3_MAGIC */

 AVB3_PHY_INT */

 AVB3_LINK */

 AVB3_AVTP_MATCH */

 AVB3_AVTP_CAPTURE */

 AVB3_AVTP_PPS */

 AVB4_RX_CTL */

 AVB4_RXC */

 AVB4_RD0 */

 AVB4_RD1 */

 AVB4_RD2 */

 AVB4_RD3 */

 AVB4_TX_CTL */

 AVB4_TXC */

 AVB4_TD0 */

 AVB4_TD1 */

 AVB4_TD2 */

 AVB4_TD3 */

 AVB4_TXCREFCLK */

 AVB4_MDIO */

 AVB4_MDC */

 AVB4_MAGIC */

 AVB4_PHY_INT */

 AVB4_LINK */

 AVB4_AVTP_MATCH */

 AVB4_AVTP_CAPTURE */

 AVB4_AVTP_PPS */

 AVB5_RX_CTL */

 AVB5_RXC */

 AVB5_RD0 */

 AVB5_RD1 */

 AVB5_RD2 */

 AVB5_RD3 */

 AVB5_TX_CTL */

 AVB5_TXC */

 AVB5_TD0 */

 AVB5_TD1 */

 AVB5_TD2 */

 AVB5_TD3 */

 AVB5_TXCREFCLK */

 AVB5_MDIO */

 AVB5_MDC */

 AVB5_MAGIC */

 AVB5_PHY_INT */

 AVB5_LINK */

 AVB5_AVTP_MATCH */

 AVB5_AVTP_CAPTURE */

 AVB5_AVTP_PPS */

 sentinel */ },

 PMMRn mask */

 SPDX-License-Identifier: GPL-2.0

/*

 * R8A77995 processor support - PFC hardware block.

 *

 * Copyright (C) 2017 Renesas Electronics Corp.

 *

 * This file is based on the drivers/pinctrl/renesas/pfc-r8a7796.c

 *

 * R-Car Gen3 processor support - PFC hardware block.

 *

 * Copyright (C) 2015  Renesas Electronics Corporation

/*

 * F_() : just information

 * FM() : macro for FN_xxx / xxx_MARK

 GPSR0 */

 GPSR1 */

 GPSR2 */

 GPSR3 */

 GPSR4 */

 GPSR5 */

 GPSR6 */

 IPSRx */		 1 */			 3 */		 5 */		
 IPSRx */		 1 */			 3 */		 5 */		
 IPSRx */		 1 */			 3 */		 5 */		
 IPSRx */		 1 */			 3 */		 5 */		
 The bit numbering in MOD_SEL fields is reversed */

 MOD_SEL0 */			 1 */			 3 */

 IPSR0 */

 IPSR1 */

 IPSR2 */

 IPSR3 */

 IPSR4 */

 IPSR5 */

 IPSR6 */

 IPSR7 */

 IPSR8 */

 IPSR9 */

 IPSR10 */

 IPSR11 */

 IPSR12 */

 IPSR13 */

/*

 * Pins not associated with a GPIO port.

 - AUDIO CLOCK ------------------------------------------------------------- */

 CLK A */

 CLK B */

 CLKOUT */

 CLKOUT1 */

 - EtherAVB --------------------------------------------------------------- */

 AVB0_LINK */

 AVB0_MAGIC */

 AVB0_PHY_INT */

 AVB0_MDC, AVB0_MDIO */

	/*

	 * AVB0_TX_CTL, AVB0_TXC, AVB0_TD0,

	 * AVB0_TD1, AVB0_TD2, AVB0_TD3,

	 * AVB0_RX_CTL, AVB0_RXC, AVB0_RD0,

	 * AVB0_RD1, AVB0_RD2, AVB0_RD3,

	 * AVB0_TXCREFCLK

 AVB0_AVTP_PPS_A */

 AVB0_AVTP_MATCH_A */

 AVB0_AVTP_CAPTURE_A */

 AVB0_AVTP_PPS_B */

  AVB0_AVTP_MATCH_B */

 AVB0_AVTP_CAPTURE_B */

 - CAN ------------------------------------------------------------------ */

 TX, RX */

 TX, RX */

 TX, RX */

 TX, RX */

 - CAN Clock -------------------------------------------------------------- */

 CLK */

 - CAN FD ----------------------------------------------------------------- */

 TX, RX */

 TX, RX */

 - DU --------------------------------------------------------------------- */

 R[7:2], G[7:2], B[7:2] */

 R[7:0], G[7:0], B[7:0] */

 CLKIN */

 CLKOUT */

 VSYNC, HSYNC */

 DISP_CDE */

 CDE */

 DISP */

 - I2C -------------------------------------------------------------------- */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 SCL, SDA */

 - MMC ------------------------------------------------------------------- */

 D0 */

 D[0:3] */

 D[0:7] */

 CLK, CMD */

 - MSIOF0 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF1 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF2 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - MSIOF3 ----------------------------------------------------------------- */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 SCK */

 SYNC */

 SS1 */

 SS2 */

 TXD */

 RXD */

 - PWM0 ------------------------------------------------------------------ */

 PWM */

 PWM */

 PWM */

 - PWM1 ------------------------------------------------------------------ */

 PWM */

 PWM */

 PWM */

 - PWM2 ------------------------------------------------------------------ */

 PWM */

 PWM */

 PWM */

 - PWM3 ------------------------------------------------------------------ */

 PWM */

 PWM */

 PWM */

 - SCIF0 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 RTS, CTS */

 - SCIF1 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 RTS, CTS */

 - SCIF2 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 - SCIF3 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 - SCIF4 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 - SCIF5 ------------------------------------------------------------------ */

 RX, TX */

 SCK */

 RX, TX */

 SCK */

 - SCIF Clock ------------------------------------------------------------- */

 SCIF_CLK */

 - SSI ---------------------------------------------------------------*/

 SDATA */

 SCK,  WS */

 SCK, WS */

 SDATA */

 SCK, WS */

 SDATA */

 - USB0 ------------------------------------------------------------------- */

 PWEN, OVC */

 - VIN4 ------------------------------------------------------------------- */

 HSYNC#, VSYNC# */

 FIELD */

 CLKENB */

 CLK */

 Deprecated */

 Deprecated, please use "avb0_mdio" instead */

 IP13_31_28 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP13_27_24 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP13_23_20 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP13_19_16 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP13_15_12 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 IP13_11_8  */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

 RESERVED 31 */

 RESERVED 16 */

 RESERVED 9, 8, 7, 6 */

 RESERVED 25, 24 */

 RESERVED 23, 22, 21, 20 */

 RESERVED 19, 18, 17, 16 */

 RESERVED 15, 14, 13, 12 */

 RESERVED 11, 10, 9, 8  */

 RESERVED 7, 6, 5, 4  */

 RESERVED 3, 2, 1, 0  */

 DU_DG1 */

 DU_DG0 */

 DU_DB7 */

 DU_DB6 */

 DU_DB5 */

 DU_DB4 */

 DU_DB3 */

 DU_DB2 */

 DU_DB1 */

 DU_DB0 */

 MLB_REF */

 MLB_SIG */

 MLB_DAT */

 MLB_CLK */

 MSIOF2_RXD */

 MSIOF2_TXD */

 MSIOF2_SCK */

 IRQ0_A */

 USB0_OVC */

 USB0_PWEN */

 PRESETOUT# */

 DU_DOTCLKIN0 */

 FSCLKST# */

 TDI */

 TMS */

 TCK */

 TRST# */

 VI4_DATA8 */

 VI4_DATA7 */

 VI4_DATA6 */

 VI4_DATA5 */

 VI4_DATA4 */

 VI4_DATA3 */

 VI4_DATA2 */

 VI4_DATA1 */

 VI4_DATA0 */

 VI4_CLK */

 QPOLB */

 QPOLA */

 DU_CDE */

 DU_DISP/CDE */

 DU_DISP */

 DU_VSYNC */

 DU_HSYNC */

 DU_DOTCLKOUT0 */

 DU_DR7 */

 DU_DR6 */

 DU_DR5 */

 DU_DR4 */

 DU_DR3 */

 DU_DR2 */

 DU_DR1 */

 DU_DR0 */

 DU_DG7 */

 DU_DG6 */

 DU_DG5 */

 DU_DG4 */

 DU_DG3 */

 DU_DG2 */

 NFDATA6 */

 NFDATA5 */

 NFDATA4 */

 NFDATA3 */

 NFDATA2 */

 NFDATA1 */

 NFDATA0 */

 NFWE# (PUEN) / NFRE# (PUD) */

 NFRE# (PUEN) / NFWE# (PUD) */

 NFRB# */

 NFCE# */

 NFCLE */

 NFALE */

 VI4_CLKENB */

 VI4_FIELD */

 VI4_HSYNC# */

 VI4_VSYNC# */

 VI4_DATA23 */

 VI4_DATA22 */

 VI4_DATA21 */

 VI4_DATA20 */

 VI4_DATA19 */

 VI4_DATA18 */

 VI4_DATA17 */

 VI4_DATA16 */

 VI4_DATA15 */

 VI4_DATA14 */

 VI4_DATA13 */

 VI4_DATA12 */

 VI4_DATA11 */

 VI4_DATA10 */

 VI4_DATA9 */

 CAN0_RX_A */

 CAN_CLK */

 TPU0TO1_A */

 TPU0TO0_A */

 TX2 */

 RX2 */

 SCK2 */

 TX1_A */

 RX1_A */

 SCK1_A */

 TX0_A */

 RX0_A */

 SCK0_A */

 MSIOF1_RXD */

 MSIOF1_TXD */

 MSIOF1_SCK */

 MSIOF0_RXD */

 MSIOF0_TXD */

 MSIOF0_SYNC */

 MSIOF0_SCK */

 SDA1 */

 SCL1 */

 SDA0 */

 SCL0 */

 SSI_WS4_A */

 SSI_SDATA4_A */

 SSI_SCK4_A */

 SSI_WS34 */

 SSI_SDATA3 */

 SSI_SCK34 */

 AUDIO_CLKA */

 NFDATA7 */

 QSPI1_IO3 */

 QSPI1_IO2 */

 QSPI1_MISO_IO1 */

 QSPI1_MOSI_IO0 */

 QSPI1_SPCLK */

 QSPI0_SSL */

 QSPI0_IO3 */

 QSPI0_IO2 */

 QSPI0_MISO_IO1 */

 QSPI0_MOSI_IO0 */

 QSPI0_SPCLK */

 AVB0_LINK */

 AVB0_PHY_INT */

 AVB0_MAGIC */

 AVB0_MDC */

 AVB0_MDIO */

 AVB0_TXCREFCLK */

 AVB0_TD3 */

 AVB0_TD2 */

 AVB0_TD1 */

 AVB0_TD0 */

 AVB0_TXC */

 AVB0_TX_CTL */

 AVB0_RD3 */

 AVB0_RD2 */

 AVB0_RD1 */

 AVB0_RD0 */

 AVB0_RXC */

 AVB0_RX_CTL */

 CAN1_TX_A */

 CAN1_RX_A */

 CAN0_TX_A */

 RPC_INT# */

 RPC_RESET# */

 QSPI1_SSL */

 sentinel */ }

 sentinel */ },

 NFWE# and NFRE# use different bit positions in PUD2 */

 NFRE# */

 NFWE# */

 PMMR */

 SPDX-License-Identifier: GPL-2.0

/*

 * SH7269 Pinmux

 *

 * Copyright (C) 2012  Renesas Electronics Europe Ltd

 * Copyright (C) 2012  Phil Edworthy

 Port A */

 Port B */

 Port C */

 Port D */

 Port E */

 Port F */

 Port G */

 Port H */

	/* NOTE - Port H does not have a Data Register, but PH Data is

 Port I - not on device */

 Port J */

 Port A */

 Port B */

 Port C */

 Port D */

 Port E */

 Port F */

 Port G */

 Port H - Port H does not have a Data Register */

 Port I - not on device */

 Port J */

 Port A */

 Port B */

 Port C */

 Port D */

 Port E */

 Port F */

 Port G */

 Port H - Port H does not have a Data Register */

 Port I - not on device */

 Port J */

 Port A */

 Port B */

 Port C */

 Port D */

 Port E */

 Port F */

 Port G */

 Port H */

 Port I - not on device */

 Port J */

 Port H */

 IRQs */

 SD */

 MMC */

 PWM */

 IEBus */

 WDT */

 DMAC */

 ADC */

 BSC */

 TMU */

 SCIF */

 RSPI */

 IIC3 */

 SSI */

 SIOF */ 
 SPDIF */ 
 NANDFMC */ 
 CAN */

 VDC */

 Port A */

 Port B */

 Port C */

 Port D */

 Port E */

 Port F */

 Port G */

 TODO hardware manual has PG17 3 bits wide in reg picture and 2 bits in description

 we're going with 2 bits

 TODO hardware manual has PG16 3 bits wide in reg picture and 2 bits in description

 we're going with 2 bits

 Port H */

 Port I - not on device */

 Port J */

 Port A */

 Port B */

 Port C */

 Port D */

 Port E */

 Port F */

 Port G */

 Port H - Port H does not have a Data Register */

 Port I - not on device */

 Port J */

 INTC */

 WDT */

 CAN */

 DMAC */

 ADC */

 BSCh */

 TMU */

 SCIF */

 RSPI */

 IIC3 */

 SSI */

 SIOF */ 
 SPDIF */ 
 NANDFMC */ 
 VDC3 */

 "name" addr register_size Field_Width */

	/* where Field_Width is 1 for single mode registers or 4 for up to 16

	 * mode registers and modes are described in assending order [0..15]

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2012

 *

 * Author: Patrice Chotard <patrice.chotard@stericsson.com> for ST-Ericsson.

 All the pins that can be used for GPIO and some other functions */

 hole */

 hole */

 hole */

 hole */

 hole */

 hole */

 hole */

 indicates the higher GPIO number */

/*

 * The names of the pins are denoted by GPIO number and ball name, even

 * though they can be used for other things than GPIO, this is the first

 * column in the table of the data sheet and often used on schematics and

 * such.

 hole */

 hole */

 hole */

 hole */

 hole */

 hole */

 hole */

/*

 * Maps local GPIO offsets to local pin numbers

/*

 * Read the pin group names like this:

 * sysclkreq2_d_1 = first groups of pins for sysclkreq2 on default function

 *

 * The groups are arranged as sets per altfunction column, so we can

 * mux in one group at a time by selecting the same altfunction for them

 * all. When functions require pins on different altfunctions, you need

 * to combine several groups.

 default column */

 audio data interface 2*/

 modem SDA/SCL */

 Altfunction A column */

 Altfunction B colum */

 Altfunction C column */

 We use this macro to define the groups applicable to a function */

/*

 * this table translates what's is in the AB8505 specification regarding the

 * balls alternate functions (as for DB, default, ALT_A, ALT_B and ALT_C).

 * ALTERNATE_FUNCTIONS(GPIO_NUMBER, GPIOSEL bit, ALTERNATFUNC bit1,

 * ALTERNATEFUNC bit2, ALTA val, ALTB val, ALTC val),

 *

 * example :

 *

 *	ALTERNATE_FUNCTIONS(13,     4,      3,      4, 1, 0, 2),

 *	means that pin AB8505_PIN_D18 (pin 13) supports 4 mux (default/ALT_A,

 *	ALT_B and ALT_C), so GPIOSEL and ALTERNATFUNC registers are used to

 *	select the mux. ALTA, ALTB and ALTC val indicates values to write in

 *	ALTERNATFUNC register. We need to specifies these values as SOC

 *	designers didn't apply the same logic on how to select mux in the

 *	ABx500 family.

 *

 *	As this pins supports at least ALT_B mux, default mux is

 *	selected by writing 1 in GPIOSEL bit :

 *

 *		| GPIOSEL bit=4 | alternatfunc bit2=4 | alternatfunc bit1=3

 *	default	|       1       |          0          |          0

 *	alt_A	|       0       |          0          |          1

 *	alt_B	|       0       |          0          |          0

 *	alt_C	|       0       |          1          |          0

 *

 *	ALTERNATE_FUNCTIONS(1,      0, UNUSED, UNUSED),

 *	means that pin AB9540_PIN_R4 (pin 1) supports 2 mux, so only GPIOSEL

 *	register is used to select the mux. As this pins doesn't support at

 *	least ALT_B mux, default mux is by writing 0 in GPIOSEL bit :

 *

 *		| GPIOSEL bit=0 | alternatfunc bit2=  | alternatfunc bit1=

 *	default	|       0       |          0          |          0

 *	alt_A	|       1       |          0          |          0

 no GPIO0 */

 GPIO1, altA controlled by bit 0 */

 GPIO2, altA controlled by bit 1 */

 GPIO3, altA controlled by bit 2*/

 no GPIO4, bit 3 reserved */

 no GPIO5, bit 4 reserved */

 no GPIO6, bit 5 reserved */

 no GPIO7, bit 6 reserved */

 no GPIO8, bit 7 reserved */

 no GPIO9, bit 0 reserved */

 GPIO10, altA and altB controlled by bit 0 */

 GPIO11, altA controlled by bit 2 */

 no GPIO12, bit3 reserved */

 GPIO13, altA altB and altC controlled by bit 3 and 4 */

 GPIO14, altA controlled by bit 5 */

 no GPIO15, bit 6 reserved */

 no GPIO15, bit 7 reserved  */

	/*

	 * pins 17 to 20 are special case, only bit 0 is used to select

	 * alternate function for these 4 pins.

	 * bits 1 to 3 are reserved

 GPIO17, altA controlled by bit 0 */

 GPIO18, altA controlled by bit 0 */

 GPIO19, altA controlled by bit 0 */

 GPIO20, altA controlled by bit 0 */

 no GPIO21, bit 4 reserved */

 no GPIO22, bit 5 reserved */

 no GPIO23, bit 6 reserved */

 no GPIO24, bit 7 reserved */

 no GPIO25, bit 0 reserved */

 no GPIO26, bit 1 reserved */

 no GPIO27, bit 2 reserved */

 no GPIO28, bit 3 reserved */

 no GPIO29, bit 4 reserved */

 no GPIO30, bit 5 reserved */

 no GPIO31, bit 6 reserved */

 no GPIO32, bit 7 reserved */

 no GPIO33, bit 0 reserved */

 GPIO34, altA controlled by bit 1 */

 no GPIO35, bit 2 reserved */

 no GPIO36, bit 2 reserved */

 no GPIO37, bit 2 reserved */

 no GPIO38, bit 2 reserved */

 no GPIO39, bit 2 reserved */

 GPIO40, altA controlled by bit 7*/

 GPIO41, altA controlled by bit 0 */

 no GPIO42, bit 1 reserved */

 no GPIO43, bit 2 reserved */

 no GPIO44, bit 3 reserved */

 no GPIO45, bit 4 reserved */

 no GPIO46, bit 5 reserved */

 no GPIO47, bit 6 reserved */

 no GPIO48, bit 7 reserved */

 no GPIO49, bit 0 reserved */

 GPIO50, altA controlled by bit 1 */

 no GPIO49, bit 0 reserved */

 GPIO52, altA controlled by bit 3 */

 GPIO53, altA controlled by bit 4 */

/*

 * For AB8505 Only some GPIOs are interrupt capable, and they are

 * organized in discontiguous clusters:

 *

 *	GPIO10 to GPIO11

 *	GPIO13

 *	GPIO40 and GPIO41

 *	GPIO50

 *	GPIO52 to GPIO53

 SPDX-License-Identifier: GPL-2.0

 All the pins that can be used for GPIO and some other functions */

 GPIOs 124-127 not routed to pins */

/*

 * The names of the pins are denoted by GPIO number and ball name, even

 * though they can be used for other things than GPIO, this is the first

 * column in the table of the data sheet and often used on schematics and

 * such.

/*

 * Read the pin group names like this:

 * u0_a_1    = first groups of pins for uart0 on alt function a

 * i2c2_b_2  = second group of pins for i2c2 on alt function b

 Altfunction A */

 Modem pins: DCD, DSR, RI, DTR */

 Altfunction B */

 Full-speed and high-speed USB pins */

 We use this macro to define the groups applicable to a function */

 SPDX-License-Identifier: GPL-2.0

 All the pins that can be used for GPIO and some other functions */

 Hole */

 Hole */

 Hole */

 Hole */

/*

 * The names of the pins are denoted by GPIO number and ball name, even

 * though they can be used for other things than GPIO, this is the first

 * column in the table of the data sheet and often used on schematics and

 * such.

 Hole */

 Hole */

 Hole */

 Hole */

/*

 * Read the pin group names like this:

 * u0_a_1    = first groups of pins for uart0 on alt function a

 * i2c2_b_2  = second group of pins for i2c2 on alt function b

 *

 * The groups are arranged as sets per altfunction column, so we can

 * mux in one group at a time by selecting the same altfunction for them

 * all. When functions require pins on different altfunctions, you need

 * to combine several groups.

 Altfunction A column */

 Image processor I2C line, this is driven by image processor firmware */

 MSP0 can only be on these pins, but TXD and RXD can be flipped */

 Basic pins of the MMC/SD card 0 interface */

 MC0_CMDDIR */

 MC0_DAT0DIR */

 MC0_DAT2DIR */

 MC0_FBCLK */

 MC0_CLK */

 MC0_CMD */

 MC0_DAT0 */

 MC0_DAT1 */

 MC0_DAT2 */

 MC0_DAT3 */

 MMC/SD card 0 interface without CMD/DAT0/DAT2 direction control */

 MC0_FBCLK */

 MC0_CLK */

 MC0_CMD */

 MC0_DAT0 */

 MC0_DAT1 */

 MC0_DAT2 */

 MC0_DAT3 */

 Often only 4 bits are used, then these are not needed (only used for MMC) */

 MC0_DAT4 */

 MC0_DAT5 */

 MC0_DAT6 */

 MC0_DAT7 */

 MC0_DAT31DIR */

 MSP1 can only be on these pins, but TXD and RXD can be flipped */

 LCD interface */

 D8 thru D11 often used as TVOUT lines */

 MC2 has 8 data lines and no direction control, so only for (e)MMC */

/*

 * Image processor GPIO pins are named "ipgpio" and have their own

 * numberspace

 Three modem pins named RF_PURn, MODEM_STATE and MODEM_PWREN */

/*

 * This MSP cannot switch RX and TX, SCK in a separate group since this

 * seems to be optional.

 MC1 has only 4 data pins, designed for SD or SDIO exclusively */

 Altfunction B column */

 Just RX and TX for UART2 */

 This chip select pin can be "ps0" in alt C so have it separately */

 This chip select pin can be "ps1" in alt C so have it separately */

 Altfunction C column */

 Optional 4-bit Memory Stick interface */

 Other C1 column */

 Other C2 column */

 Other C3 column */

 Other C4 column */

 Altfunction A column */

 Altfunction B column */

 Altfunction C column */

 Other alt C1 column */

 Other alt C2 column */

 Other alt C3 column */

 Other alt C4 column */

 We use this macro to define the groups applicable to a function */

/*

 * UART2 can be muxed out with just RX/TX in four places, CTS+RTS is however

 * only available on two pins in alternative function C

/*

 * MSP0 can only be on a certain set of pins, but the TX/RX pins can be

 * switched around by selecting the altfunction A or B. The SCK pin is

 * only available on the altfunction B.

 MSP0 can swap RX/TX like MSP0 but has no SCK pin available */

 The image processor has 8 GPIO pins that can be muxed out */

 MSP2 can not invert the RX/TX pins but has the optional SCK pin */

/*

 * The modem UART can output its RX and TX pins in some different places,

 * so select one of each.

 Select between CS0 on alt B or PS1 on alt C */

 STMAPE_CLK_a */

 SBAG_CLK_a */

 STMAPE or U2_RXD ??? */

 SBAG_VAL_a */

 STM_MOD_CMD0 */

 STMAPE_DAT_a[0] */

 SBAG_D_a[0] */

 STMAPE_DAT_a[1] */

 SBAG_D_a[1] */

 STMAPE_DAT_a[2] */

 SBAG_D_a[2] */

 STMAPE_DAT_a[3] */

 SBAG_D_a[3] */

 STM_MOD_CMD0 */

 STM_MOD_CMD0 */

 STM_MOD_CMD0 */

 STM_MOD_CMD0 */

 REMAP_SELECT_ON */

 REMAP_SELECT_ON */

 PTM_A9_D23 */

 DBG_ETM_R4_CMD0 */

 STM_MOD_CMD1 */

 SBAG_CLK */

 PTM_A9_D22 */

 DBG_ETM_R4_CMD0 */

 STM_MOD_CMD1 */

 SBAG_D3 */

 PTM_A9_D21 */

 DBG_ETM_R4_CMD0 */

 STM_MOD_CMD1 */

 SBAG_D2 */

 PTM_A9_D20 */

 DBG_ETM_R4_CMD0 */

 STM_MOD_CMD1 */

 SBAG_D1 */

 PTM_A9_D19 */

 DBG_ETM_R4_CMD0 */

 STM_MOD_CMD1 */

 SBAG_D0 */

 PTM_A9_D18 */

 DBG_ETM_R4_CMD0 */

 DBG_UARTMOD_CMD0 */

 PTM_A9_D17 */

 DBG_ETM_R4_CMD0 */

 DBG_UARTMOD_CMD0 */

 PTM_A9_D16 */

 DBG_ETM_R4_CMD0 */

 SBAG_VAL */

 KP_O3 */

 KP_O2 */

 KP_I3 */

 KP_I2 */

 KP_O1 */

 KP_O0 */

 KP_I1 */

 KP_I0 */

 RF_INT */

 RF_CTRL */

 PTM_A9_CTL */

 DBG_ETM_R4_CMD1*/

 HW_OBS17 */

 Hx_CLK */

 PTM_A9_CLK */

 DBG_ETM_R4_CMD1*/

 HW_OBS16 */

 UARTMOD_CMD1 */

 PTM_A9_D15 */

 DBG_ETM_R4_CMD2 */

 HW_OBS15 */

 UARTMOD_CMD1 */

 PTM_A9_D14 */

 DBG_ETM_R4_CMD2 */

 HW_OBS14 */

 STM_MOD_CMD2 */

 PTM_A9_D13 */

 DBG_ETM_R4_CMD2 */

 HW_OBS13 */

 STM_MOD_CMD2 */

 PTM_A9_D12 */

 DBG_ETM_R4_CMD2 */

 HW_OBS12 */

 STM_MOD_CMD2 */

 PTM_A9_D11 */

 DBG_ETM_R4_CMD2 */

 HW_OBS11 */

 STM_MOD_CMD2 */

 PTM_A9_D10 */

 DBG_ETM_R4_CMD2 */

 HW_OBS10 */

 STM_MOD_CMD2 */

 PTM_A9_D9 */

 DBG_ETM_R4_CMD2 */

 HW_OBS9 */

 PTM_A9_D8 */

 DBG_ETM_R4_CMD2 */

 HW_OBS8 */

 Hx_GPIO7 */

 PTM_A9_D7 */

 DBG_ETM_R4_CMD1*/

 HW_OBS7 */

 Hx_GPIO6 */

 PTM_A9_D6 */

 DBG_ETM_R4_CMD1*/

 HW_OBS6 */

 Hx_GPIO5 */

 PTM_A9_D5 */

 DBG_ETM_R4_CMD1*/

 HW_OBS5 */

 Hx_GPIO4 */

 PTM_A9_D4 */

 DBG_ETM_R4_CMD1*/

 HW_OBS4 */

 Hx_GPIO3 */

 PTM_A9_D3 */

 DBG_ETM_R4_CMD1*/

 HW_OBS3 */

 Hx_GPIO2 */

 PTM_A9_D2 */

 DBG_ETM_R4_CMD1*/

 HW_OBS2 */

 Hx_GPIO1 */

 PTM_A9_D1 */

 DBG_ETM_R4_CMD1*/

 HW_OBS1 */

 Hx_GPIO0 */

 PTM_A9_D0 */

 DBG_ETM_R4_CMD1*/

 HW_OBS0 */

 RF_INT */

 RF_CTRL */

 SPI2_TXD */

 SPI2_FRM */

 SPI2_CLK */

 SPI2_RXD */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2013

 *

 * Author: Patrice Chotard <patrice.chotard@st.com>

 *

 * Driver allows to use AxB5xx unused pins to be used as GPIO

/*

 * GPIO registers offset

 * Bank: 0x10

/**

 * abx500_gpio_get() - Get the particular GPIO value

 * @chip:	Gpio device

 * @offset:	GPIO number to read

 set direction as output */

 disable pull down */

 set the output as 1 or 0 */

 set the register as input */

 The AB8500 GPIO numbers are off by one */

			/*

			 * The ABx500 GPIO's associated IRQs are clustered together

			 * throughout the interrupt numbers at irregular intervals.

			 * To solve this quandry, we have placed the read-in values

			 * into the cluster information table.

 sanity check */

 on ABx5xx, there is no GPIO0, so adjust the offset */

		/*

		 * for ABx5xx family, default mode is always selected by

		 * writing 0 to GPIOSELx register, except for pins which

		 * support at least ALT_B mode, default mode is selected

		 * by writing 1 to GPIOSELx register

		/*

		 * for ABx5xx family, alt_a mode is always selected by

		 * writing 1 to GPIOSELx register, except for pins which

		 * support at least ALT_B mode, alt_a mode is selected

		 * by writing 0 to GPIOSELx register and 0 in ALTFUNC

		 * register

 on ABx5xx, there is no GPIO0, so adjust the offset */

	/*

	 * if gpiosel_bit is set to unused,

	 * it means no GPIO or special case

 read GpioSelx register */

 sanity check */

 if alt_bit2 is used, alt_bit1 must be used too */

 check if pin use AlternateFunction register */

	/*

	 * if pin GPIOSEL bit is set and pin supports alternate function,

	 * it means DEFAULT mode

	/*

	 * pin use the AlternatFunction register

	 * read alt_bit1 value

 read alt_bit2 value */

 On AB8500, there is no GPIO0, the first is the GPIO 1 */

	/*

	 * Different ranges have different ways to enable GPIO function on a

	 * pin, so refer back to our local range type, where we handily define

	 * what altfunc enables GPIO for a certain pin.

 on ABx500, there is no GPIO0, so adjust the offset */

 Chip only supports pull down */

			/*

			 * if argument = 1 set the pull down

			 * else clear the pull down

			 * Chip only supports pull down

			/*

			 * if argument = 1 set the pull up

			 * else clear the pull up

 for each config */

	/*

	 * Compute number of GPIOs from the last SoC gpio range descriptors

	 * These ranges may include "holes" but the GPIO number space shall

	 * still be homogeneous, so we need to detect and account for any

	 * such holes so that these are included in the number of GPIO pins.

 First iteration, set start values */

 this gives the absolute number of pins */

 Dynamic allocation */

 Poke in other ASIC variants here */

 We will handle a range of GPIO pins */

/**

 * abx500_gpio_remove() - remove Ab8500-gpio driver

 * @pdev:	Platform device registered

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Generic GPIO driver for logic cells found in the Nomadik SoC

 *

 * Copyright (C) 2008,2009 STMicroelectronics

 * Copyright (C) 2009 Alessandro Rubini <rubini@unipv.it>

 *   Rewritten based on work by Prafulla WADASKAR <prafulla.wadaskar@st.com>

 * Copyright (C) 2011-2013 Linus Walleij <linus.walleij@linaro.org>

 Since we request GPIOs from ourself */

/*

 * The GPIO module in the Nomadik family of Systems-on-Chip is an

 * AMBA device, managing 32 pins and alternate functions.  The logic block

 * is currently used in the Nomadik and ux500.

 *

 * Symbols in this file are called "nmk_gpio" for "nomadik gpio"

/*

 * pin configurations are represented by 32-bit integers:

 *

 *	bit  0.. 8 - Pin Number (512 Pins Maximum)

 *	bit  9..10 - Alternate Function Selection

 *	bit 11..12 - Pull up/down state

 *	bit     13 - Sleep mode behaviour

 *	bit     14 - Direction

 *	bit     15 - Value (if output)

 *	bit 16..18 - SLPM pull up/down state

 *	bit 19..20 - SLPM direction

 *	bit 21..22 - SLPM Value (if output)

 *	bit 23..25 - PDIS value (if input)

 *	bit	26 - Gpio mode

 *	bit	27 - Sleep mode

 *

 * to facilitate the definition, the following macros are provided

 *

 * PIN_CFG_DEFAULT - default config (0):

 *		     pull up/down = disabled

 *		     sleep mode = input/wakeup

 *		     direction = input

 *		     value = low

 *		     SLPM direction = same as normal

 *		     SLPM pull = same as normal

 *		     SLPM value = same as normal

 *

 * PIN_CFG	   - default config with alternate function

 These two replace the above in DB8500v2+ */

 In SLPM, pin is a gpio */

 In SLPM, pin is altfunc */

 Shortcuts.  Use these instead of separate DIR, PULL, and VAL.  */

/*

 * "nmk_gpio" and "NMK_GPIO" stand for "Nomadik GPIO", leaving

 * the "gpio" namespace for generic and cross-machine functions

 Register in the logic block */

 These appear in DB8540 and later ASICs */

 Pull up/down values */

 Sleep mode */

 Keep track of configured edges */

/**

 * struct nmk_pinctrl - state container for the Nomadik pin controller

 * @dev: containing device pointer

 * @pctl: corresponding pin controller device

 * @soc: SoC data for this specific chip

 * @prcm_base: PRCM register range virtual base

 Prevent spurious wakeups */

	/*

	 * If alt_num is NULL, just clear current ALTCx selection

	 * to make sure we come back to a pure ALTC selection

	/*

	 * Check if any other ALTCx functions are activated on this pin

	 * and disable it first.

/*

 * Safe sequence used to switch IOs between GPIO and Alternate-C mode:

 *  - Save SLPM registers

 *  - Set SLPM=0 for the IOs you want to switch and others to 1

 *  - Configure the GPIO registers for the IOs that are being switched

 *  - Set IOFORCE=1

 *  - Modify the AFLSA/B registers for the IOs that are being switched

 *  - Set IOFORCE=0

 *  - Restore SLPM registers

 *  - Any spurious wake up event during switch sequence to be ignored and

 *    cleared

 IRQ functions */

 we must individually set/clear the two edges */

	/*

	 * Ensure WAKEUP_ENABLE is on.  No need to disable it if wakeup is

	 * disabled, since setting SLPM to 1 increases power consumption, and

	 * wakeup is anyhow controlled by the RIMSC and FIMSC registers.

 I/O Functions */

		/*

		 * This races with request_irq(), set_irq_type(),

		 * and set_irq_wake() ... but those are "rare".

/*

 * We will allocate memory for the state container using devm* allocators

 * binding to the first device reaching this point, it doesn't matter if

 * it is the pin controller or GPIO driver. However we need to use the right

 * platform device when looking up resources so pay attention to pdev.

 Already populated? */

 Correct platform device ID */

	/*

	 * The virt address in nmk_chip->addr is in the nomadik register space,

	 * so we can simply convert the resource address, without remapping

 test if out of range */

	/*

	 * If we're setting altfunc C by setting both AFSLA and AFSLB to 1,

	 * we may pass through an undesired state. In this case we take

	 * some extra care.

	 *

	 * Safe sequence used to switch IOs between GPIO and Alternate-C mode:

	 *  - Save SLPM registers (since we have a shadow register in the

	 *    nmk_chip we're using that as backup)

	 *  - Set SLPM=0 for the IOs you want to switch and others to 1

	 *  - Configure the GPIO registers for the IOs that are being switched

	 *  - Set IOFORCE=1

	 *  - Modify the AFLSA/B registers for the IOs that are being switched

	 *  - Set IOFORCE=0

	 *  - Restore SLPM registers

	 *  - Any spurious wake up event during switch sequence to be ignored

	 *    and cleared

	 *

	 * We REALLY need to save ALL slpm registers, because the external

	 * IOFORCE will switch *all* ports to their sleepmode setting to as

	 * to avoid glitches. (Not just one port!)

 Initially don't put any pins to sleep when switching */

		/*

		 * Then mask the pins that need to be sleeping now when we're

		 * switching to the ALT C function.

		/*

		 * If the pin is switching to altfunc, and there was an

		 * interrupt installed on it which has been lazy disabled,

		 * actually mask the interrupt to prevent spurious interrupts

		 * that would occur while the pin is under control of the

		 * peripheral. Only SKE does this.

		/*

		 * Call PRCM GPIOCR config function in case ALTC

		 * has been selected:

		 * - If selection is a ALTCx, some bits in PRCM GPIOCR registers

		 *   must be set.

		 * - If selection is pure ALTC and previous selection was ALTCx,

		 *   then some bits in PRCM GPIOCR registers must be cleared.

 When all pins are successfully reconfigured we get here */

 There is no glitch when converting any pin to GPIO */

 Set the pin to some default state, GPIO is usually default */

 Not implemented */

 illegal */	= "??"

		/*

		 * The pin config contains pin number and altfunction fields,

		 * here we just ignore that part. It's being handled by the

		 * framework and pinmux callback respectively.

 All pins go into GPIO mode at sleep */

			/*

			 * The SLPM_* values are normal values + 1 to allow zero

			 * to mean "same as normal".

 No glitch when going to GPIO mode */

 TODO: isn't this only applicable on output pins? */

 for each config */

 Poke in other ASIC variants here */

	/*

	 * Since we depend on the GPIO chips to provide clock and register base

	 * for the pin control operations, make sure that we have these

	 * populated before we continue. Follow the phandles to instantiate

	 * them. The GPIO portion of the actual hardware may be probed before

	 * or after this point: it shouldn't matter as the APIs are orthogonal.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2012

 *

 * Author: Patrice Chotard <patrice.chotard@stericsson.com> for ST-Ericsson.

 All the pins that can be used for GPIO and some other functions */

 hole */

 hole */

 indicates the highest GPIO number */

/*

 * The names of the pins are denoted by GPIO number and ball name, even

 * though they can be used for other things than GPIO, this is the first

 * column in the table of the data sheet and often used on schematics and

 * such.

 hole */

 hole */

/*

 * Maps local GPIO offsets to local pin numbers

/*

 * Read the pin group names like this:

 * sysclkreq2_d_1 = first groups of pins for sysclkreq2 on default function

 *

 * The groups are arranged as sets per altfunction column, so we can

 * mux in one group at a time by selecting the same altfunction for them

 * all. When functions require pins on different altfunctions, you need

 * to combine several groups.

 default column */

 audio data interface 1*/

 USBUICC */

 Digital microphone 1 and 2 */

 Digital microphone 3 and 4 */

 Digital microphone 5 and 6 */

 APE SPI */

 modem SDA/SCL */

 Altfunction A column */

 YCbCr4 YCbCr5 YCbCr6 YCbCr7*/

 Altfunction B colum */

 Altfunction C column */

 default column */

 Altfunction A column */

 Altfunction B column */

 Altfunction C column */

 We use this macro to define the groups applicable to a function */

/*

 * this table translates what's is in the AB8500 specification regarding the

 * balls alternate functions (as for DB, default, ALT_A, ALT_B and ALT_C).

 * ALTERNATE_FUNCTIONS(GPIO_NUMBER, GPIOSEL bit, ALTERNATFUNC bit1,

 * ALTERNATEFUNC bit2, ALTA val, ALTB val, ALTC val),

 *

 * example :

 *

 *	ALTERNATE_FUNCTIONS(13,     4,      3,      4, 0, 1 ,2),

 *	means that pin AB8500_PIN_W17 (pin 13) supports 4 mux (default/ALT_A,

 *	ALT_B and ALT_C), so GPIOSEL and ALTERNATFUNC registers are used to

 *	select the mux.  ALTA, ALTB and ALTC val indicates values to write in

 *	ALTERNATFUNC register. We need to specifies these values as SOC

 *	designers didn't apply the same logic on how to select mux in the

 *	ABx500 family.

 *

 *	As this pins supports at least ALT_B mux, default mux is

 *	selected by writing 1 in GPIOSEL bit :

 *

 *		| GPIOSEL bit=4 | alternatfunc bit2=4 | alternatfunc bit1=3

 *	default	|       1       |          0          |          0

 *	alt_A	|       0       |          0          |          0

 *	alt_B	|       0       |          0          |          1

 *	alt_C	|       0       |          1          |          0

 *

 *	ALTERNATE_FUNCTIONS(8,      7, UNUSED, UNUSED),

 *	means that pin AB8500_PIN_W18 (pin 8) supports 2 mux, so only GPIOSEL

 *	register is used to select the mux. As this pins doesn't support at

 *	least ALT_B mux, default mux is by writing 0 in GPIOSEL bit :

 *

 *		| GPIOSEL bit=7 | alternatfunc bit2=  | alternatfunc bit1=

 *	default	|       0       |          0          |          0

 *	alt_A	|       1       |          0          |          0

 no GPIO0 */

 GPIO1, altA controlled by bit 0 */

 GPIO2, altA controlled by bit 1 */

 GPIO3, altA controlled by bit 2*/

 GPIO4, altA controlled by bit 3*/

 bit 4 reserved */

 no GPIO5 */

 GPIO6, altA controlled by bit 5*/

 GPIO7, altA controlled by bit 6*/

 GPIO8, altA controlled by bit 7*/

 GPIO9, altA controlled by bit 0*/

 GPIO10, altA and altB controlled by bit 0 */

 GPIO11, altA and altB controlled by bit 1 */

 GPIO12, altA and altB controlled by bit 2 */

 GPIO13, altA altB and altC controlled by bit 3 and 4 */

 GPIO14, altA controlled by bit 5 */

 GPIO15, altA controlled by bit 6 */

 GPIO16, altA controlled by bit 7 */

	/*

	 * pins 17 to 20 are special case, only bit 0 is used to select

	 * alternate function for these 4 pins.

	 * bits 1 to 3 are reserved

 GPIO17, altA controlled by bit 0 */

 GPIO18, altA controlled by bit 0 */

 GPIO19, altA controlled by bit 0 */

 GPIO20, altA controlled by bit 0 */

 GPIO21, altA controlled by bit 4 */

 GPIO22, altA controlled by bit 5 */

 GPIO23, altA controlled by bit 6 */

 GPIO24, altA controlled by bit 7 */

 GPIO25, altA controlled by bit 0 */

 pin 26 special case, no alternate function, bit 1 reserved */

 GPIO26 */

 GPIO27, altA controlled by bit 2 */

 GPIO28, altA controlled by bit 3 */

 GPIO29, altA controlled by bit 4 */

 GPIO30, altA controlled by bit 5 */

 GPIO31, altA controlled by bit 6 */

 GPIO32, altA controlled by bit 7 */

 no GPIO33 */

 GPIO34, altA controlled by bit 1 */

 pin 35 special case, no alternate function, bit 2 reserved */

 GPIO35 */

 GPIO36, altA controlled by bit 3 */

 GPIO37, altA controlled by bit 4 */

 GPIO38, altA controlled by bit 5 */

 GPIO39, altA controlled by bit 6 */

 GPIO40, altA controlled by bit 7 */

 GPIO41, altA controlled by bit 0 */

 GPIO42, altA controlled by bit 1 */

/*

 * Only some GPIOs are interrupt capable, and they are

 * organized in discontiguous clusters:

 *

 *	GPIO6 to GPIO13

 *	GPIO24 and GPIO25

 *	GPIO36 to GPIO41

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) STMicroelectronics 2017

 * Author:  Alexandre Torgue <alexandre.torgue@st.com> for STMicroelectronics.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) STMicroelectronics 2017

 * Author:  Alexandre Torgue <alexandre.torgue@st.com> for STMicroelectronics.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) STMicroelectronics 2017 - All Rights Reserved

 * Author: Alexandre Torgue <alexandre.torgue@st.com> for STMicroelectronics.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) Maxime Coquelin 2015

 * Copyright (C) STMicroelectronics 2017

 * Author:  Maxime Coquelin <mcoquelin.stm32@gmail.com>

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) STMicroelectronics 2021 - All Rights Reserved

 * Author: Alexandre Torgue <alexandre.torgue@foss.st.com> for STMicroelectronics.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) Maxime Coquelin 2015

 * Copyright (C) STMicroelectronics 2017

 * Author:  Maxime Coquelin <mcoquelin.stm32@gmail.com>

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) STMicroelectronics 2017

 * Author:  Alexandre Torgue <alexandre.torgue@st.com> for STMicroelectronics.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) Maxime Coquelin 2015

 * Copyright (C) STMicroelectronics 2017

 * Author:  Maxime Coquelin <mcoquelin.stm32@gmail.com>

 *

 * Heavily based on Mediatek's pinctrl driver

 custom bitfield to backup pin status */

 usec */

 GPIO functions */

 If level interrupt type then retrig */

	/*

	 * Check first that the IRQ MUX of that line is free.

	 * gpio irq mux is shared between several banks, protect with a lock

 Pinctrl functions */

 Pinmux functions */

 Pinconf functions */

 input */

 output */

 alternate */

 analog */

 create irq hierarchical domain */

 domain not registered yet */

 Allocate groups */

 We assume that one pin is one group, use pin name as group name. */

 check for IRQ controller (may require deferred probe) */

 hwspinlock is optional */

  get optional package information */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Jasper Lake PCH pinctrl/GPIO driver

 *

 * Copyright (C) 2020, Intel Corporation

 * Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

 Jasper Lake */

 GPP_F */

 SPI */

 GPP_B */

 GPP_A */

 GPP_S */

 GPP_R */

 GPP_H */

 GPP_D */

 vGPIO */

 GPP_C */

 HVCMOS */

 GPP_E */

 GPP_G */

 GPP_F */

 SPI */

 GPP_B */

 GPP_A */

 GPP_S */

 GPP_R */

 GPP_H */

 GPP_D */

 vGPIO */

 GPP_C */

 HVCMOS */

 GPP_E */

 GPP_G */

 SPDX-License-Identifier: GPL-2.0

/*

 * Cherryview/Braswell pinctrl driver

 *

 * Copyright (C) 2014, 2020 Intel Corporation

 * Author: Mika Westerberg <mika.westerberg@linux.intel.com>

 *

 * This driver is based on the original Cherryview GPIO driver by

 *   Ning Li <ning.li@intel.com>

 *   Alan Cox <alan@linux.intel.com>

/**

 * struct intel_community_context - community context for Cherryview

 * @intr_lines: Mapping between 16 HW interrupt wires and GPIO offset (in GPIO number space)

 * @saved_intmask: Interrupt mask saved for system sleep

 Some of LPE I2S TXD pins need to have OE inversion set */

 30, 31, 32, 33 */

 34, 35, 36, 37 */

 92, 94, 96, 97 */

/*

 * Two spi3 chipselects are available in different mode than the main spi3

 * functionality, which is using mode 2.

 76, 79, 80, 81 */

 82 */

/*

 * Only do pinmuxing for certain LPSS devices for now. Rest of the pins are

 * enabled only as GPIOs.

/*

 * Southwest community can generate GPIO interrupts only for the first 8

 * interrupts. The upper half (8-15) can only be used to trigger GPEs.

/*

 * North community can generate GPIO interrupts only for the first 8

 * interrupts. The upper half (8-15) can only be used to trigger GPEs.

/*

 * Lock to serialize register accesses

 *

 * Due to a silicon issue, a shared lock must be used to prevent

 * concurrent accesses across the 4 GPIO controllers.

 *

 * See Intel Atom Z8000 Processor Series Specification Update (Rev. 005),

 * errata #CHT34, for further information.

 Write and simple read back to confirm the bus transferring done */

 Write and simple read back to confirm the bus transferring done */

 When Pad Cfg is locked, driver can only change GPIOTXState or GPIORXState */

 Check first that the pad is not locked */

 Check if there is pin-specific config */

 Extract OE inversion */

 Disable GPIO mode */

 Set to desired mode */

 Update for invert_oe */

	/*

	 * One some devices the GPIO should output the inverted value from what

	 * device-drivers / ACPI code expects (inverted external buffer?). The

	 * BIOS makes this work by setting the CHV_PADCTRL1_INVRXTX_TXDATA flag,

	 * preserve this flag if the pin is already setup as GPIO.

 Locked so cannot enable */

 Reset the interrupt mapping */

 Disable interrupt generation */

		/*

		 * If the pin is in HiZ mode (both TX and RX buffers are

		 * disabled) we turn it to be input now.

 Switch to a GPIO mode */

 For 1k there is only pull up */

	/*

	 * Check if the interrupt has been requested with 0 as triggering

	 * type. In that case it is assumed that the current values

	 * programmed to the hardware are used (e.g BIOS configured

	 * defaults).

	 *

	 * In that case ->irq_set_type() will never be called so we need to

	 * read back the values from hardware now, set correct flow handler

	 * and update mappings before the interrupt is being used.

	/*

	 * Pins which can be used as shared interrupt are configured in

	 * BIOS. Driver trusts BIOS configurations and assigns different

	 * handler according to the irq type.

	 *

	 * Driver needs to save the mapping between each pin and

	 * its interrupt line.

	 * 1. If the pin cfg is locked in BIOS:

	 *	Trust BIOS has programmed IntWakeCfg bits correctly,

	 *	driver just needs to save the mapping.

	 * 2. If the pin cfg is not locked in BIOS:

	 *	Driver programs the IntWakeCfg bits and save the mapping.

/*

 * Certain machines seem to hardcode Linux IRQ numbers in their ACPI

 * tables. Since we leave GPIOs that are not capable of generating

 * interrupts out of the irqdomain the numbering will be different and

 * cause devices using the hardcoded IRQ numbers fail. In order not to

 * break such machines we will only mask pins from irqdomain if the machine

 * is not listed below.

bugzilla.kernel.org/show_bug.cgi?id=194945 */

 Do not add GPIOs that can only generate GPEs to the IRQ domain */

	/*

	 * The same set of machines in chv_no_valid_mask[] have incorrectly

	 * configured GPIOs that generate spurious interrupts so we use

	 * this same list to apply another quirk for them.

	 *

	 * See also https://bugzilla.kernel.org/show_bug.cgi?id=197953.

		/*

		 * Mask all interrupts the community is able to generate

		 * but leave the ones that can only generate GPEs unmasked.

 Clear all interrupts */

	/*

	 * Mask all interrupts before restoring per-pin configuration

	 * registers because we don't know in which state BIOS left them

	 * upon exiting suspend.

 Only restore if our saved state differs from the current */

	/*

	 * Now that all pins are restored to known state, we can restore

	 * the interrupt mask register as well.

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Sunrisepoint PCH pinctrl/GPIO driver

 *

 * Copyright (C) 2015, Intel Corporation

 * Authors: Mathias Nyman <mathias.nyman@linux.intel.com>

 *          Mika Westerberg <mika.westerberg@linux.intel.com>

 Sunrisepoint-LP */

 GPP_A */

 GPP_B */

 GPP_C */

 GPP_D */

 GPP_E */

 GPP_F */

 GPP_G */

 Sunrisepoint-H */

 GPP_A */

 GPP_B */

 GPP_C */

 GPP_D */

 GPP_E */

 GPP_F */

 GPP_G */

 GPP_H */

 GPP_I */

 GPP_A */

 GPP_B */

 GPP_C */

 GPP_D */

 GPP_E */

 GPP_F */

 GPP_G */

 GPP_H */

 GPP_I */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Lynxpoint PCH pinctrl/GPIO driver

 *

 * Copyright (c) 2012, 2019, Intel Corporation

 * Authors: Mathias Nyman <mathias.nyman@linux.intel.com>

 *          Andy Shevchenko <andriy.shevchenko@linux.intel.com>

 LynxPoint chipset has support for 95 GPIO pins */

 Bitmapped register offsets */

 Bitmap, set by bios, 0: pin reserved for ACPI */

 Bitmap, set by bios, 1: pin routed to IOxAPIC */

 set APIC IRQ to IRQ14 or IRQ15 for all pins */

 Each pin has two 32 bit config registers, starting at 0x100 */

 LP_CONFIG1 reg bits */

 0: Edge, 1: Level */

 Invert interrupt triggering */

 0: Output, 1: Input */

 0: Native, 1: GPIO, ... */

 LP_CONFIG2 reg bits */

 disable input sensing */

 weak pull options */

 none */

 weak pull down */

 weak pull up */

/*

 * Lynxpoint gpios are controlled through both bitmapped registers and

 * per gpio specific registers. The bitmapped registers are in chunks of

 * 3 x 32bit registers to cover all 95 GPIOs

 *

 * per gpio specific registers consist of two 32bit registers per gpio

 * (LP_CONFIG1 and LP_CONFIG2), with 95 GPIOs there's a total of

 * 190 config registers.

 *

 * A simplified view of the register layout look like this:

 *

 * LP_ACPI_OWNED[31:0] gpio ownerships for gpios 0-31  (bitmapped registers)

 * LP_ACPI_OWNED[63:32] gpio ownerships for gpios 32-63

 * LP_ACPI_OWNED[94:64] gpio ownerships for gpios 63-94

 * ...

 * LP_INT_ENABLE[31:0] ...

 * LP_INT_ENABLE[63:32] ...

 * LP_INT_ENABLE[94:64] ...

 * LP0_CONFIG1 (gpio 0) config1 reg for gpio 0 (per gpio registers)

 * LP0_CONFIG2 (gpio 0) config2 reg for gpio 0

 * LP1_CONFIG1 (gpio 1) config1 reg for gpio 1

 * LP1_CONFIG2 (gpio 1) config2 reg for gpio 1

 * LP2_CONFIG1 (gpio 2) ...

 * LP2_CONFIG2 (gpio 2) ...

 * ...

 * LP94_CONFIG1 (gpio 94) ...

 * LP94_CONFIG2 (gpio 94) ...

 *

 * IOxAPIC redirection map applies only for gpio 8-10, 13-14, 45-55.

 per gpio specific config registers */

 bitmapped registers */

 Now enable the mux setting for each pin in the group */

	/*

	 * Reconfigure pin to GPIO mode if needed and issue a warning,

	 * since we expect firmware to configure it properly.

 Enable input sensing */

 Disable input sensing */

		/*

		 * Before making any direction modifications, do a check if GPIO

		 * is set for direct IRQ. On Lynxpoint, setting GPIO to output

		 * does not make sense, so let's at least warn the caller before

		 * they shoot themselves in the foot.

 check from GPIO controller which pin triggered the interrupt */

 Only interrupts that are enabled */

 Fail if BIOS reserved pin for ACPI use */

 set both TRIG_SEL and INV bits to 0 for rising edge */

 TRIG_SEL bit 0, INV bit 1 for falling edge */

 TRIG_SEL bit 1, INV bit 0 for level low */

 TRIG_SEL bit 1, INV bit 1 for level high */

 disable gpio pin interrupts */

 Clear interrupt status register */

 set up interrupts  */

 on some hardware suspend clears input sensing, re-enable it here */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Cannon Lake PCH pinctrl/GPIO driver

 *

 * Copyright (C) 2017, Intel Corporation

 * Authors: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

 *          Mika Westerberg <mika.westerberg@linux.intel.com>

 Cannon Lake-H */

 GPP_A */

 GPP_B */

 GPP_C */

 GPP_D */

 GPP_G */

 AZA */

 vGPIO */

 GPP_K */

 GPP_H */

 GPP_E */

 GPP_F */

 SPI */

 CPU */

 JTAG */

 GPP_I */

 GPP_J */

 GPP_A */

 GPP_B */

 GPP_C */

 GPP_D */

 GPP_G */

 AZA */

 vGPIO_0 */

 vGPIO_1 */

 GPP_K */

 GPP_H */

 GPP_E */

 GPP_F */

 SPI */

 CPU */

 JTAG */

 GPP_I */

 GPP_J */

 Cannon Lake-LP */

 GPP_A */

 GPP_B */

 GPP_G */

 SPI */

 GPP_D */

 GPP_F */

 GPP_H */

 vGPIO */

 GPP_C */

 GPP_E */

 JTAG */

 HVCMOS */

 GPP_A */

 GPP_B */

 GPP_G */

 SPI */

 GPP_D */

 GPP_F */

 GPP_H */

 vGPIO */

 vGPIO */

 GPP_C */

 GPP_E */

 JTAG */

 HVCMOS */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel pinctrl/GPIO core driver.

 *

 * Copyright (C) 2015, Intel Corporation

 * Authors: Mathias Nyman <mathias.nyman@linux.intel.com>

 *          Mika Westerberg <mika.westerberg@linux.intel.com>

 Offset from regs */

 Offset from pad_regs */

/**

 * enum - Locking variants of the pad configuration

 *

 * @PAD_UNLOCKED:	pad is fully controlled by the configuration registers

 * @PAD_LOCKED:		pad configuration registers, except TX state, are locked

 * @PAD_LOCKED_TX:	pad configuration TX state is locked

 * @PAD_LOCKED_FULL:	pad configuration registers are locked completely

 *

 * Locking is considered as read-only mode for corresponding registers and

 * their respective fields. That said, TX state bit is locked separately from

 * the main locking scheme.

	/*

	 * If PADCFGLOCK and PADCFGLOCKTX bits are both clear for this pad,

	 * the pad is considered unlocked. Any other case means that it is

	 * either fully or partially locked.

 Dump the additional PADCFG registers if available */

	/*

	 * All pins in the groups needs to be accessible and writable

	 * before we can enable the mux for this group.

 Now enable the mux setting for each pin in the group */

 Put the pad into GPIO mode */

 Disable input and output buffers */

 Disable SCI/SMI/NMI generation */

	/*

	 * If pin is already configured in GPIO mode, we assume that

	 * firmware provides correct settings. In such case we avoid

	 * potential glitches on the pin. Otherwise, for the pin in

	 * alternative mode, consumer has to supply respective flags.

 Disable TX buffer and enable RX (this will be input) */

 Set default strength value in case none is given */

 Set default strength value in case none is given */

 Disable glitch filter and debouncer */

 Enable glitch filter and debouncer */

/**

 * intel_gpio_to_pin() - Translate from GPIO offset to pin number

 * @pctrl: Pinctrl structure

 * @offset: GPIO offset from gpiolib

 * @community: Community is filled here if not %NULL

 * @padgrp: Pad group is filled here if not %NULL

 *

 * When coming through gpiolib irqchip, the GPIO offset is not

 * automatically translated to pinctrl pin number. This function can be

 * used to find out the corresponding pinctrl pin.

/**

 * intel_pin_to_gpio() - Translate from pin number to GPIO offset

 * @pctrl: Pinctrl structure

 * @pin: pin number

 *

 * Translate the pin number of pinctrl to GPIO offset

 Clear interrupt status first to avoid unexpected interrupt */

	/*

	 * If the pin is in ACPI mode it is still usable as a GPIO but it

	 * cannot be used as IRQ because GPI_IS status bit will not be

	 * updated by the host controller hardware.

 Disable TX buffer and enable RX (this will be input) */

 Only interrupts that are enabled */

 Need to check all communities for pending interrupts */

 Setup GPIO chip */

 Setup IRQ chip */

	/*

	 * On some platforms several GPIO controllers share the same interrupt

	 * line.

 This will let us handle the IRQ in the driver */

 Special treatment for GPIO base */

		/*

		 * In older hardware the number of padown registers per

		 * group is fixed regardless of the group size.

	/*

	 * Make a copy of the communities which we can use to hold pointers

	 * to the registers.

		/*

		 * Determine community features based on the revision.

		 * A value of all ones means the device is not present.

 Determine community features based on the capabilities */

 Read offset of the pad configuration registers */

	/*

	 * Only restore the pin if it is actually in use by the kernel (or

	 * by userspace). It is possible that some pins are used by the

	 * BIOS during resume and those are not always locked down so leave

	 * them alone.

 Mask and clear all interrupts */

 Mask all interrupts */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Lewisburg pinctrl/GPIO driver

 *

 * Copyright (C) 2017, Intel Corporation

 * Author: Mika Westerberg <mika.westerberg@linux.intel.com>

 Lewisburg */

 GPP_A */

 GPP_B */

 GPP_F */

 GPP_C */

 GPP_D */

 GPP_E */

 GPP_I */

 GPP_J */

 GPP_K */

 GPP_G */

 GPP_H */

 GPP_L */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Denverton SoC pinctrl/GPIO driver

 *

 * Copyright (C) 2017, Intel Corporation

 * Author: Mika Westerberg <mika.westerberg@linux.intel.com>

 Denverton */

 North ALL */

 South DFX */

 South GPP0 */

 South GPP1 */

 North ALL_0 */

 North ALL_1 */

 South DFX */

 South GPP0_0 */

 South GPP0_1 */

 South GPP1_0 */

 South GPP1_1 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Gemini Lake SoC pinctrl/GPIO driver

 *

 * Copyright (C) 2017 Intel Corporation

 * Author: Mika Westerberg <mika.westerberg@linux.intel.com>

 GLK */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Alder Lake PCH pinctrl/GPIO driver

 *

 * Copyright (C) 2020, Intel Corporation

 * Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

 Alder Lake-S */

 GPP_I */

 GPP_R */

 GPP_J */

 vGPIO */

 vGPIO_0 */

 GPP_B */

 GPP_G */

 GPP_H */

 SPI0 */

 GPP_A */

 GPP_C */

 GPP_S */

 GPP_E */

 GPP_K */

 GPP_F */

 GPP_D */

 JTAG */

 GPP_I */

 GPP_R */

 GPP_J */

 vGPIO */

 vGPIO_0 */

 GPP_B */

 GPP_G */

 GPP_H */

 SPI0 */

 GPP_A */

 GPP_C */

 GPP_S */

 GPP_E */

 GPP_K */

 GPP_F */

 GPP_D */

 JTAG */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Elkhart Lake PCH pinctrl/GPIO driver

 *

 * Copyright (C) 2019, Intel Corporation

 * Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

 Elkhart Lake */

 GPP_B */

 GPP_T */

 GPP_G */

 GPP_B */

 GPP_T */

 GPP_G */

 GPP_V */

 GPP_H */

 GPP_D */

 GPP_U */

 vGPIO */

 GPP_V */

 GPP_H */

 GPP_D */

 GPP_U */

 vGPIO */

 CPU */

 GPP_S */

 GPP_A */

 vGPIO_3 */

 CPU */

 GPP_S */

 GPP_A */

 vGPIO_3 */

 GPP_C */

 GPP_F */

 HVCMOS */

 GPP_E */

 GPP_C */

 GPP_F */

 HVCMOS */

 GPP_E */

 GPP_R */

 GPP_R */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Tiger Lake PCH pinctrl/GPIO driver

 *

 * Copyright (C) 2019 - 2020, Intel Corporation

 * Authors: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

 *          Mika Westerberg <mika.westerberg@linux.intel.com>

 Tiger Lake-LP */

 GPP_B */

 GPP_T */

 GPP_A */

 GPP_S */

 GPP_H */

 GPP_D */

 GPP_U */

 vGPIO */

 GPP_C */

 GPP_F */

 HVCMOS */

 GPP_E */

 JTAG */

 GPP_R */

 SPI */

 GPP_B */

 GPP_T */

 GPP_A */

 GPP_S */

 GPP_H */

 GPP_D */

 GPP_U */

 vGPIO */

 GPP_C */

 GPP_F */

 HVCMOS */

 GPP_E */

 JTAG */

 GPP_R */

 SPI */

 Tiger Lake-H */

 GPP_A */

 GPP_R */

 GPP_B */

 vGPIO_0 */

 GPP_D */

 GPP_C */

 GPP_S */

 GPP_G */

 vGPIO */

 GPP_E */

 GPP_F */

 GPP_H */

 GPP_J */

 GPP_K */

 GPP_I */

 JTAG */

 GPP_A */

 GPP_R */

 GPP_B */

 vGPIO_0 */

 GPP_D */

 GPP_C */

 GPP_S */

 GPP_G */

 vGPIO */

 GPP_E */

 GPP_F */

 GPP_H */

 GPP_J */

 GPP_K */

 GPP_I */

 JTAG */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Lakefield PCH pinctrl/GPIO driver

 *

 * Copyright (C) 2020, Intel Corporation

 * Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

 Lakefield */

 EAST */

 NORTHWEST */

 WEST */

 SOUTHEAST */

 EAST_0 */

 EAST_1 */

 NORTHWEST_0 */

 NORTHWEST_1 */

 NORTHWEST_2 */

 WEST_0 */

 WEST_1 */

 WEST_2 */

 SOUTHEAST */

 EAST */

 NORTHWEST */

 WEST */

 SOUTHEAST */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Cedar Fork PCH pinctrl/GPIO driver

 *

 * Copyright (C) 2017, Intel Corporation

 * Author: Mika Westerberg <mika.westerberg@linux.intel.com>

 Cedar Fork PCH */

 WEST2 */

 WEST3 */

 WEST01 */

 WEST5 */

 WESTC */

 WESTC_DFX */

 WESTA */

 WESTB */

 WESTD */

 WESTD_PECI */

 WESTF */

 EAST2 */

 EAST3 */

 EAST0 */

 EMMC */

 WEST2 */

 WEST3 */

 WEST01 */

 WEST5 */

 WESTC */

 WESTC_DFX */

 WESTA */

 WESTB */

 WESTD */

 WESTD_PECI */

 WESTF */

 EAST2 */

 EAST3 */

 EAST0 */

 EMMC */

 West */

 East */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Merrifield SoC pinctrl driver

 *

 * Copyright (C) 2016, Intel Corporation

 * Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

/**

 * struct mrfld_family - Intel pin family description

 * @barno: MMIO BAR number where registers for this family reside

 * @pin_base: Starting pin of pins in this family

 * @npins: Number of pins in this family

 * @protected: True if family is protected by access

 * @regs: family specific common registers

 Family 0: OCP2SSC (0 pins) */

 Family 1: ULPI (13 pins) */

 Family 2: eMMC (24 pins) */

 Family 3: SDIO (20 pins) */

 Family 4: HSI (8 pins) */

 Family 5: SSP Audio (14 pins) */

 Family 6: GP SSP (22 pins) */

 Family 7: I2C (14 pins) */

 Family 8: UART (12 pins) */

 Family 9: GPIO South (19 pins) */

 Family 10: Camera Sideband (12 pins) */

 Family 11: Clock (22 pins) */

 Family 12: MSIC (15 pins) */

 Family 13: Keyboard (20 pins) */

 Family 14: GPIO North (13 pins) */

 Family 15: PTI (5 pins) */

 Family 16: USB3 (0 pins) */

 Family 17: HSIC (0 pins) */

 Family 18: Broadcast (0 pins) */

/**

 * struct mrfld_pinctrl - Intel Merrifield pinctrl private structure

 * @dev: Pointer to the device structure

 * @lock: Lock to serialize register access

 * @pctldesc: Pin controller description

 * @pctldev: Pointer to the pin controller device

 * @families: Array of families this pinctrl handles

 * @nfamilies: Number of families in the array

 * @functions: Array of functions

 * @nfunctions: Number of functions in the array

 * @groups: Array of pin groups

 * @ngroups: Number of groups in the array

 * @pins: Array of pins this pinctrl controls

 * @npins: Number of pins in the array

 Pin controller configuration */

	/*

	 * All pins in the groups needs to be accessible and writable

	 * before we can enable the mux for this group.

 Now enable the mux setting for each pin in the group */

 Set default strength value in case none is given */

 Set default strength value in case none is given */

	/*

	 * Make a copy of the families which we can use to hold pointers

	 * to the registers.

 Splice memory resource by chunk per family */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Emmitsburg PCH pinctrl/GPIO driver

 *

 * Copyright (C) 2020, Intel Corporation

 * Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

 Emmitsburg */

 GPP_A */

 GPP_B */

 SPI */

 GPP_C */

 GPP_D */

 GPP_E */

 JTAG */

 GPP_H */

 GPP_J */

 GPP_I */

 GPP_L */

 GPP_M */

 GPP_N */

 GPP_A */

 GPP_B */

 SPI */

 GPP_C */

 GPP_D */

 GPP_E */

 JTAG */

 GPP_H */

 GPP_J */

 GPP_I */

 GPP_L */

 GPP_M */

 GPP_N */

 SPDX-License-Identifier: GPL-2.0

/*

 * Pinctrl GPIO driver for Intel Baytrail

 *

 * Copyright (c) 2012-2013, Intel Corporation

 * Author: Mathias Nyman <mathias.nyman@linux.intel.com>

 memory mapped register offsets */

 BYT_CONF0_REG register bits */

 BYT_VAL_REG register bits */

 0: input enabled (active low)*/

 0: output enabled (active low)*/

 BYT_DEBOUNCE_REG bits */

/*

 * This is the function value most pins have for GPIO muxing. If the value

 * differs from the default one, it must be explicitly mentioned. Otherwise, the

 * pin control implementation will set the muxing value to default GPIO if it

 * does not find a match for the requested function.

 SCORE pins, aka GPIOC_<pin_no> or GPIO_S0_SC[<pin_no>] */

 SCORE groups */

 SUS pins, aka GPIOS_<pin_no> or GPIO_S5[<pin_no>]  */

 SCORE pin 92-93 */

 SUS pin 11-21 */

 Do not clear direct-irq enabled IRQs (from gpio_disable_free) */

 nothing to do */ ;

	/*

	 * In most cases, func pin mux 000 means GPIO function.

	 * But, some pins may have func pin mux 001 represents

	 * GPIO function.

	 *

	 * Because there are devices out there where some pins were not

	 * configured correctly we allow changing the mux value from

	 * request (but print out warning about that).

	/*

	 * Before making any direction modifications, do a check if gpio is set

	 * for direct IRQ. On Bay Trail, setting GPIO to output does not make

	 * sense, so let's at least inform the caller before they shoot

	 * themselves in the foot.

 Pull assignment is only applicable in input mode */

 Pull assignment is only applicable in input mode */

 Set default strength value in case none is given */

			/*

			 * Pull assignment is only applicable in input mode. If

			 * chip is not in input mode, set it and warn about it.

 Set default strength value in case none is given */

			/*

			 * Pull assignment is only applicable in input mode. If

			 * chip is not in input mode, set it and warn about it.

/*

 * Note despite the temptation this MUST NOT be converted into a call to

 * pinctrl_gpio_direction_output() + byt_gpio_set() that does not work this

 * MUST be done as a single BYT_VAL_REG register write.

 * See the commit message of the commit adding this comment for details.

	/* For level trigges the BYT_TRIG_POS and BYT_TRIG_NEG bits

	 * are used to indicate high and low level triggering

 Enable glitch filtering */

 check from GPIO controller which pin triggered the interrupt */

	/*

	 * Clear interrupt triggers for all pins that are GPIOs and

	 * do not use direct IRQ mode. This will prevent spurious

	 * interrupts from misconfigured pins.

 clear interrupt status trigger registers */

		/* make sure trigger bits are cleared, if not then a pin

 Set up gpio chip */

 set up interrupts  */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Broxton SoC pinctrl/GPIO driver

 *

 * Copyright (C) 2015, 2016 Intel Corporation

 * Author: Mika Westerberg <mika.westerberg@linux.intel.com>

 BXT */

 APL */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Ice Lake PCH pinctrl/GPIO driver

 *

 * Copyright (C) 2018, Intel Corporation

 * Authors: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

 *	    Mika Westerberg <mika.westerberg@linux.intel.com>

 Ice Lake-LP */

 GPP_G */

 GPP_B */

 GPP_A */

 GPP_H */

 GPP_D */

 GPP_F */

 vGPIO */

 GPP_C */

 HVCMOS */

 GPP_E */

 JTAG */

 GPP_R */

 GPP_S */

 SPI */

 GPP_G */

 GPP_B */

 GPP_A */

 GPP_H */

 GPP_D */

 GPP_F */

 vGPIO */

 GPP_C */

 HVCMOS */

 GPP_E */

 JTAG */

 GPP_R */

 GPP_S */

 SPI */

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 2013 John Crispin <blogic@openwrt.org>

 dont allow double use */

 mark the pins as gpio */

 function 0 is gpio and needs special handling */

 count the mux functions */

 allocate the group names array needed by the gpio function */

 we have a dummy function[0] for gpio */

 allocate our function and group mapping index buffers */

 add a backpointer to the function so it knows its group */

 add remaining functions */

	/*

	 * loop over the functions and initialize the pins array.

	 * also work out the highest pin used.

 the buffer that tells us which pins are gpio */

 the pads needed to tell pinctrl about our pins */

 pin 0 is always a gpio */

 set the pads */

 strlen("ioXY") + 1 = 5 */

 setup the private data */

 init the device */

/*

 * Copyright (C) 2014-2017 Broadcom

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

/*

 * Broadcom Cygnus IOMUX driver

 *

 * This file contains the Cygnus IOMUX driver that supports group based PINMUX

 * configuration. Although PINMUX configuration is mainly group based, the

 * Cygnus IOMUX controller allows certain pins to be individually muxed to GPIO

 * function, and therefore be controlled by the Cygnus ASIU GPIO controller

/*

 * Cygnus IOMUX register description

 *

 * @offset: register offset for mux configuration of a group

 * @shift: bit shift for mux configuration of a group

 * @alt: alternate function to set to

/*

 * Keep track of Cygnus IOMUX configuration and prevent double configuration

 *

 * @cygnus_mux: Cygnus IOMUX register description

 * @is_configured: flag to indicate whether a mux setting has already been

 * configured

/*

 * Group based IOMUX configuration

 *

 * @name: name of the group

 * @pins: array of pins used by this group

 * @num_pins: total number of pins used by this group

 * @mux: Cygnus group based IOMUX configuration

/*

 * Cygnus mux function and supported pin groups

 *

 * @name: name of the function

 * @groups: array of groups that can be supported by this function

 * @num_groups: total number of groups that can be supported by this function

/*

 * Cygnus IOMUX pinctrl core

 *

 * @pctl: pointer to pinctrl_dev

 * @dev: pointer to device

 * @base0: first I/O register base of the Cygnus IOMUX controller

 * @base1: second I/O register base

 * @groups: pointer to array of groups

 * @num_groups: total number of groups

 * @functions: pointer to array of functions

 * @num_functions: total number of functions

 * @mux_log: pointer to the array of mux logs

 * @lock: lock to protect register access

/*

 * Certain pins can be individually muxed to GPIO function

 *

 * @is_supported: flag to indicate GPIO mux is supported for this pin

 * @offset: register offset for GPIO mux override of a pin

 * @shift: bit shift for GPIO mux override of a pin

/*

 * Description of a pin in Cygnus

 *

 * @pin: pin number

 * @name: pin name

 * @gpio_mux: GPIO override related information

/*

 * List of pins in Cygnus

/*

 * List of groups of pins

/*

 * List of Cygnus pin groups

/*

 * List of groups supported by functions

/*

 * List of supported functions in Cygnus

 match found if we reach here */

 if this is a new configuration, just do it! */

		/*

		 * IOMUX has been configured previously and one is trying to

		 * configure it to a different function

			/*

			 * One tries to configure it to the same function.

			 * Just quit and don't bother

 not all pins support GPIO pinmux override */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for Broadcom BCM2835 GPIO unit (pinctrl + GPIO)

 *

 * Copyright (C) 2012 Chris Boot, Simon Arlott, Stephen Warren

 *

 * This driver is inspired by:

 * pinctrl-nomadik.c, please see original file for copyright information

 * pinctrl-tegra.c, please see original file for copyright information

 GPIO register offsets */

 Function Select */

 Pin Output Set */

 Pin Output Clear */

 Pin Level */

 Pin Event Detect Status */

 Pin Rising Edge Detect Enable */

 Pin Falling Edge Detect Enable */

 Pin High Detect Enable */

 Pin Low Detect Enable */

 Pin Async Rising Edge Detect */

 Pin Async Falling Edge Detect */

 Pin Pull-up/down Enable */

 Pin Pull-up/down Enable Clock */

 2711 Pin Pull-up/down select */

 argument: bcm2835_pinconf_pull */

 note: locking assumes each bank will have its own unsigned long */

 pins are just named GPIO0..GPIO53 */

 one pin per group */

 note NOT a read/modify/write cycle */

 always transition through GPIO_IN */

 Alternative function doesn't clearly provide a direction */

 This should not happen, every IRQ has a bank */

 IRQ0 covers GPIOs 0-27 */

 IRQ1 covers GPIOs 28-45 */

 IRQ2 covers GPIOs 46-57 */

 fast path for IRQ handler */

 Clear events that were latched prior to clearing event sources */

 slower path for reconfiguring IRQ type */

 RISING already enabled, disable FALLING */

 FALLING already enabled, disable RISING */

 RISING already enabled, enable FALLING too */

 FALLING already enabled, enable RISING too */

 Check for generic binding in this node */

 Generic binding did not find anything continue with legacy parse */

 disable by setting to GPIO_IN */

 every pin can do every function */

 disable by setting to GPIO_IN */

 No way to read back config in HW */

	/*

	 * BCM2835 datasheet say to wait 150 cycles, but not of what.

	 * But the VideoCore firmware delay for this operation

	 * based nearly on the same amount of VPU cycles and this clock

	 * runs at 250 MHz.

 Set legacy brcm,pull */

 Set pull generic bindings */

 Set output-high or output-low */

 switch param type */

 for each config */

 convert legacy brcm,pull */

 Set pull generic bindings */

 Set output-high or output-low */

 for each config */

 clear event detection flags */

 clear all the events */

	/*

	 * Use the same handler for all groups: this is necessary

	 * since we use one gpiochip to cover all lines - the

	 * irq handler then needs to figure out which group and

	 * bank that was firing the IRQ and look up the per-group

	 * and bank data.

 Skip over the all banks interrupts */

 These are optional interrupts */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for BCM6318 GPIO unit (pinctrl + GPIO)

 *

 * Copyright (C) 2021 Álvaro Fernández Rojas <noltari@gmail.com>

 * Copyright (C) 2016 Jonas Gorski <jonas.gorski@gmail.com>

 GPIO_MODE */

 PINMUX_SEL */

 disable all functions using this pin */

 GPIOs 0-12 use mux 0 as GPIO function */

 GPIOs 13-41 use mux 3 as GPIO function */

 sentinel */ }

/* Copyright (C) 2015 Broadcom Corporation

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * This file contains the Northstar plus (NSP) IOMUX driver that supports

 * group based PINMUX configuration. The Northstar plus IOMUX controller

 * allows pins to be individually muxed to GPIO function. The NAND and MMC is

 * a group based selection. The gpio_a 8 - 11 are muxed with gpio_b and pwm.

 * To select PWM, one need to enable the corresponding gpio_b as well.

 *

 *				gpio_a (8 - 11)

 *				+----------

 *				|

 *		gpio_a (8-11)	|	gpio_b (0 - 3)

 *	------------------------+-------+----------

 *					|

 *					|	pwm (0 - 3)

 *					+----------

/*

 * nsp IOMUX register description

 *

 * @base: base 0 or base 1

 * @shift: bit shift for mux configuration of a group

 * @mask: bit mask of the function

 * @alt: alternate function to set to

/*

 * Keep track of nsp IOMUX configuration and prevent double configuration

 *

 * @nsp_mux: nsp IOMUX register description

 * @is_configured: flag to indicate whether a mux setting has already been

 * configured

/*

 * Group based IOMUX configuration

 *

 * @name: name of the group

 * @pins: array of pins used by this group

 * @num_pins: total number of pins used by this group

 * @mux: nsp group based IOMUX configuration

/*

 * nsp mux function and supported pin groups

 *

 * @name: name of the function

 * @groups: array of groups that can be supported by this function

 * @num_groups: total number of groups that can be supported by this function

/*

 * nsp IOMUX pinctrl core

 *

 * @pctl: pointer to pinctrl_dev

 * @dev: pointer to device

 * @base0: first mux register

 * @base1: second mux register

 * @base2: third mux register

 * @groups: pointer to array of groups

 * @num_groups: total number of groups

 * @functions: pointer to array of functions

 * @num_functions: total number of functions

 * @mux_log: pointer to the array of mux logs

 * @lock: lock to protect register access

/*

 * Description of a pin in nsp

 *

 * @pin: pin number

 * @name: pin name

 * @gpio_select: reg data to select GPIO

/*

 * List of muxable pins in nsp

/*

 * List of groups of pins

/*

 * List of nsp pin groups

/*

 * List of groups supported by functions

/*

 * List of supported functions in nsp

 if this is a new configuration, just do it! */

		/*

		 * IOMUX has been configured previously and one is trying to

		 * configure it to a different function

/*

 * Copyright (C) 2013-2017 Broadcom

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 BCM281XX Pin Control Registers Definitions */

 Function Select bits are the same for all pin control registers */

 Standard pin register */

 I2C pin register */

 HDMI pin register */

/*

 * bcm281xx_pin_type - types of pin register

/*

 * bcm281xx_pin_function- define pin function

/*

 * bcm281xx_pinctrl_data - Broadcom-specific pinctrl data

 * @reg_base - base of pinctrl registers

 List of all pins */

/*

 * Pin number definition.  The order here must be the same as defined in the

 * PADCTRLREG block in the RDB.

/*

 * Pin description definition.  The order here must be the same as defined in

 * the PADCTRLREG block in the RDB, since the pin number is used as an index

 * into this array.

 Every pin can implement all ALT1-ALT4 functions */

/*

 * This helper function is used to build up the value and mask used to write to

 * a pin register, but does not actually write to the register.

 Goes through the configs and update register val/mask */

		/*

		 * The pin bias can only be one of pull-up, pull-down, or

		 * disable.  The user does not need to specify a value for the

		 * property, and the default value from pinconf-generic is

		 * ignored.

 inversed since register is for input _disable_ */

 Valid range is 2-16 mA, even numbers only */

 switch config */

 for each config */

/*

 * The pull-up strength for an I2C pin is represented by bits 4-6 in the

 * register with the following mapping:

 *   0b000: No pull-up

 *   0b001: 1200 Ohm

 *   0b010: 1800 Ohm

 *   0b011: 720 Ohm

 *   0b100: 2700 Ohm

 *   0b101: 831 Ohm

 *   0b110: 1080 Ohm

 *   0b111: 568 Ohm

 * This array maps pull-up strength in Ohms to register values (1+index).

 Goes through the configs and update register val/mask */

 inversed since register is for input _disable_ */

 switch config */

 for each config */

 Goes through the configs and update register val/mask */

 inversed since register is for input _disable_ */

 switch config */

 for each config */

 Different pins have different configuration options */

 switch pin type */

 name, pins, npins members initialized in probe function */

 So far We can assume there is only 1 bank of registers */

 Initialize the dynamic part of pinctrl_desc */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for BCM63xx GPIO unit (pinctrl + GPIO)

 *

 * Copyright (C) 2021 Álvaro Fernández Rojas <noltari@gmail.com>

 * Copyright (C) 2016 Jonas Gorski <jonas.gorski@gmail.com>

 sentinel */ }

/*

 * Copyright (C) 2014-2017 Broadcom

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

/*

 * This file contains the Broadcom Northstar Plus (NSP) GPIO driver that

 * supports the chipCommonA GPIO controller. Basic PINCONF such as bias,

 * pull up/down, slew and drive strength are also supported in this driver.

 *

 * Pins from the chipCommonA  GPIO can be individually muxed to GPIO function,

 * through the interaction with the NSP IOMUX controller.

 I/O parameters offset for chipcommon A GPIO */

/*

 * nsp GPIO core

 *

 * @dev: pointer to device

 * @base: I/O register base for nsp GPIO controller

 * @io_ctrl: I/O register base for PINCONF support outside the GPIO block

 * @gc: GPIO chip

 * @pctl: pointer to pinctrl_dev

 * @pctldesc: pinctrl descriptor

 * @lock: lock to protect access to I/O registers

/*

 * Mapping from PINCONF pins to GPIO pins is 1-to-1

/*

 *  nsp_set_bit - set or clear one bit (corresponding to the GPIO pin) in a

 *  nsp GPIO register

 *

 *  @nsp_gpio: nsp GPIO device

 *  @base_type: reg base to modify

 *  @reg: register offset

 *  @gpio: GPIO pin

 *  @set: set or clear

/*

 *  nsp_get_bit - get one bit (corresponding to the GPIO pin) in a

 *  nsp GPIO register

 go through the entire GPIOs and handle all interrupts */

 Get level and edge interrupts */

/*

 *  nsp_gpio_irq_set_mask - mask/unmask a GPIO interrupt

 *

 *  @d: IRQ chip data

 *  @unmask: mask/unmask GPIO interrupt

/*

 * Only one group: "gpio_grp", since this local pinctrl device only performs

 * GPIO specific PINCONF configurations

 make sure drive strength is supported */

 convert to mA */

/*

 * NSP GPIO controller supports some PINCONF related configurations such as

 * pull up, pull down, slew and drive strength, when the pin is configured

 * to GPIO.

 *

 * Here a local pinctrl device is created with simple 1-to-1 pin mapping to the

 * local GPIO pins

 optional GPIO interrupt support */

 Install ISR for this GPIO controller. */

 This will let us handle the parent IRQ in the driver */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for BCM6362 GPIO unit (pinctrl + GPIO)

 *

 * Copyright (C) 2021 Álvaro Fernández Rojas <noltari@gmail.com>

 * Copyright (C) 2016 Jonas Gorski <jonas.gorski@gmail.com>

 base mode 0 => gpio 1 => mux function */

 pins 0-23 might be muxed to led */

 ctrl reg 0 => wifi function 1 => gpio */

 disable all functions using this pin */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for BCM6368 GPIO unit (pinctrl + GPIO)

 *

 * Copyright (C) 2021 Álvaro Fernández Rojas <noltari@gmail.com>

 * Copyright (C) 2016 Jonas Gorski <jonas.gorski@gmail.com>

 disable all functions using this pin */

 sentinel */ }

/* Copyright (C) 2016 Broadcom Corporation

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 *

 * This file contains the Northstar2 IOMUX driver that supports group

 * based PINMUX configuration. The PWM is functional only when the

 * corresponding mfio pin group is selected as gpio.

/*

 * Northstar2 IOMUX register description

 *

 * @base: base address number

 * @offset: register offset for mux configuration of a group

 * @shift: bit shift for mux configuration of a group

 * @mask: mask bits

 * @alt: alternate function to set to

/*

 * Keep track of Northstar2 IOMUX configuration and prevent double

 * configuration

 *

 * @ns2_mux: Northstar2 IOMUX register description

 * @is_configured: flag to indicate whether a mux setting has already

 * been configured

/*

 * Group based IOMUX configuration

 *

 * @name: name of the group

 * @pins: array of pins used by this group

 * @num_pins: total number of pins used by this group

 * @mux: Northstar2 group based IOMUX configuration

/*

 * Northstar2 mux function and supported pin groups

 *

 * @name: name of the function

 * @groups: array of groups that can be supported by this function

 * @num_groups: total number of groups that can be supported by function

/*

 * Northstar2 IOMUX pinctrl core

 *

 * @pctl: pointer to pinctrl_dev

 * @dev: pointer to device

 * @base0: first IOMUX register base

 * @base1: second IOMUX register base

 * @pinconf_base: configuration register base

 * @groups: pointer to array of groups

 * @num_groups: total number of groups

 * @functions: pointer to array of functions

 * @num_functions: total number of functions

 * @mux_log: pointer to the array of mux logs

 * @lock: lock to protect register access

/*

 * Pin configuration info

 *

 * @base: base address number

 * @offset: register offset from base

 * @src_shift: slew rate control bit shift in the register

 * @input_en: input enable control bit shift

 * @pull_shift: pull-up/pull-down control bit shift in the register

 * @drive_shift: drive strength control bit shift in the register

/*

 * Description of a pin in Northstar2

 *

 * @pin: pin number

 * @name: pin name

 * @pin_conf: pin configuration structure

/*

 * List of pins in Northstar2

/*

 * List of groups of pins

/*

 * List of Northstar2 pin groups

/*

 * List of groups supported by functions

/*

 * List of supported functions

 if this is a new configuration, just do it! */

		/*

		 * IOMUX has been configured previously and one is trying to

		 * configure it to a different function

 make sure drive strength is supported */

 Group 0 uses bit 31 in the IOMUX_PAD_FUNCTION_0 register */

	/*

	 * Groups 1 through 14 use two bits each in the

	 * IOMUX_PAD_FUNCTION_1 register starting with

	 * bit position 30.

	/*

	 * Groups 15 through 18 use one bit each in the

	 * AUX_SEL register.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for BCM63268 GPIO unit (pinctrl + GPIO)

 *

 * Copyright (C) 2021 Álvaro Fernández Rojas <noltari@gmail.com>

 * Copyright (C) 2016 Jonas Gorski <jonas.gorski@gmail.com>

 GPIOs 2-7, 24-31 */

 GPIO 35 */

 GPIOs 8/9 */

 GPIOs 10/11 */

 GPIOs 12/13 */

 GPIOs 24/25 */

 GPIOs 26/27 */

 multi pin groups */

 base mode: 0 => gpio, 1 => mux function */

 pins 0-23 might be muxed to led */

 ctrl reg: 0 => wifi function, 1 => gpio */

 disable all functions using this pin */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 Rafał Miłecki <rafal@milecki.pl>

/*

 * Pins

 TODO { ??, "xtal_out", (void *)(FLAG_BCM4709) }, */

/*

 * Groups

/*

 * Functions

/*

 * Groups code

/*

 * Functions code

/*

 * Controller code

 Set basic properties */

 Set pinctrl properties */

 Register */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for BCM6358 GPIO unit (pinctrl + GPIO)

 *

 * Copyright (C) 2021 Álvaro Fernández Rojas <noltari@gmail.com>

 * Copyright (C) 2016 Jonas Gorski <jonas.gorski@gmail.com>

 non-GPIO function muxes require the gpio direction to be set */

 disable all functions using this pin */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for BCM6328 GPIO unit (pinctrl + GPIO)

 *

 * Copyright (C) 2021 Álvaro Fernández Rojas <noltari@gmail.com>

 * Copyright (C) 2016 Jonas Gorski <jonas.gorski@gmail.com>

	/*

	 * No idea where they really are; so let's put them according

	 * to their mux offsets.

 GPIO_MODE */

 PINMUX_SEL */

 disable all functions using this pin */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014-2017 Broadcom

/*

 * This file contains the Broadcom Iproc GPIO driver that supports 3

 * GPIO controllers on Iproc including the ASIU GPIO controller, the

 * chipCommonG GPIO controller, and the always-on GPIO controller. Basic

 * PINCONF such as bias pull up/down, and drive strength are also supported

 * in this driver.

 *

 * It provides the functionality where pins from the GPIO can be

 * individually muxed to GPIO function, if individual pad

 * configuration is supported, through the interaction with respective

 * SoCs IOMUX controller.

 drive strength control for ASIU GPIO */

 pinconf for CCM GPIO */

 pinconf for CRMU(aon) GPIO and CCM GPIO*/

/*

 * Iproc GPIO core

 *

 * @dev: pointer to device

 * @base: I/O register base for Iproc GPIO controller

 * @io_ctrl: I/O register base for certain type of Iproc GPIO controller that

 * has the PINCONF support implemented outside of the GPIO block

 * @lock: lock to protect access to I/O registers

 * @gc: GPIO chip

 * @num_banks: number of GPIO banks, each bank supports up to 32 GPIOs

 * @pinmux_is_supported: flag to indicate this GPIO controller contains pins

 * that can be individually muxed to GPIO

 * @pinconf_disable: contains a list of PINCONF parameters that need to be

 * disabled

 * @nr_pinconf_disable: total number of PINCONF parameters that need to be

 * disabled

 * @pctl: pointer to pinctrl_dev

 * @pctldesc: pinctrl descriptor

/*

 * Mapping from PINCONF pins to GPIO pins is 1-to-1

/**

 *  iproc_set_bit - set or clear one bit (corresponding to the GPIO pin) in a

 *  Iproc GPIO register

 *

 *  @chip: Iproc GPIO device

 *  @reg: register offset

 *  @gpio: GPIO pin

 *  @set: set or clear

 go through the entire GPIO banks and handle all interrupts */

			/*

			 * Clear the interrupt before invoking the

			 * handler, so we do not leave any window

/**

 *  iproc_gpio_irq_set_mask - mask/unmask a GPIO interrupt

 *

 *  @d: IRQ chip data

 *  @unmask: mask/unmask GPIO interrupt

/*

 * Request the Iproc IOMUX pinmux controller to mux individual pins to GPIO

 not all Iproc GPIO pins can be muxed individually */

/*

 * Mapping of the iProc PINCONF parameters to the generic pin configuration

 * parameters

 figure out total number of PINCONF parameters to disable */

	/*

	 * Allocate an array to store PINCONF parameters that need to be

	 * disabled

 now store these parameters */

/*

 * Only one group: "gpio_grp", since this local pinctrl device only performs

 * GPIO specific PINCONF configurations

 no pull-up or pull-down */

 make sure drive strength is supported */

 convert to mA */

 for each config */

/*

 * Iproc GPIO controller supports some PINCONF related configurations such as

 * pull up, pull down, and drive strength, when the pin is configured to GPIO

 *

 * Here a local pinctrl device is created with simple 1-to-1 pin mapping to the

 * local GPIO pins

 sentinel */ }

 NSP does not support drive strength config */

 Stingray does not support pinconf in this controller */

 optional GPIO interrupt support */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015 MediaTek Inc.

 * Author: Hongzhou.Yang <hongzhou.yang@mediatek.com>

 *         Yingjoe Chen <yingjoe.chen@mediatek.com>

 0E4E8SR 4/8/12/16 */

 0E2E4SR  2/4/6/8 */

 E8E4E2  2/4/6/8/10/12/14/16 */

 KPROW0 */

 KPROW1 */

 KPROW2 */

 KPCOL0 */

 KPCOL1 */

 KPCOL2 */

 EINT14 */

 EINT15 */

 EINT16 */

 EINT17 */

 MSDC2_CMD */

 MSDC2_CLK */

 MSDC2_DAT0 */

 MSDC2_DAT1 */

 MSDC2_DAT2 */

 MSDC2_DAT3 */

 MSDC1_CMD */

 MSDC1_CLK */

 MSDC1_DAT0 */

 MSDC1_DAT1 */

 MSDC1_DAT2 */

 MSDC1_DAT3 */

 MSDC0_DAT7 */

 MSDC0_DAT6 */

 MSDC0_DAT5 */

 MSDC0_DAT4 */

 MSDC0_RSTB */

 MSDC0_CMD */

 MSDC0_CLK */

 MSDC0_DAT3 */

 MSDC0_DAT2 */

 MSDC0_DAT1 */

 MSDC0_DAT0 */

 EINT21 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2019 MediaTek Inc.

 * Author: Min.Guo <min.guo@mediatek.com>

 0E4E8SR 4/8/12/16 */

 0E2E4SR  2/4/6/8 */

 E8E4E2  2/4/6/8/10/12/14/16 */

 SPDX-License-Identifier: GPL-2.0

/*

 * MediaTek Pinctrl Paris Driver, which implement the vendor per-pin

 * bindings for MediaTek SoC.

 *

 * Copyright (C) 2018 MediaTek Inc.

 * Author: Sean Wang <sean.wang@mediatek.com>

 *	   Zhiyong Tao <zhiyong.tao@mediatek.com>

 *	   Hongzhou.Yang <hongzhou.yang@mediatek.com>

 Custom pinconf parameters */

 hardware would take 0 as input direction */

				/* When desire to get pull-up value, return

				 *  error if current setting is pull-down

				/* When desire to get pull-down value, return

				 *  error if current setting is pull-up

		/*     CONFIG     Current direction return value

		 * -------------  ----------------- ----------------------

		 * OUTPUT_ENABLE       output       1 (= HW value)

		 *                     input        0 (= HW value)

		 * INPUT_ENABLE        output       0 (= reverse HW value)

		 *                     input        1 (= reverse HW value)

		/* return error when in output mode

		 * because schmitt trigger only work in input mode

		/* Keep set direction to consider the case that a GPIO pin

		 *  does not have SMT control

 regard all non-zero value as enable */

 regard all non-zero value as enable */

		/* arg = 1: Input mode & SMT enable ;

		 * arg = 0: Output mode & SMT disable

 Case for: R1R0 */

 Case for: RSEL */

	/*

	 * "Virtual" GPIOs are always and only used for interrupts

	 * Since they are only used for interrupts, they are always inputs

 Allocate groups */

 We assume that one pin is one group, use pin name as group name. */

 Copy from internal struct mtk_pin_desc to register to the core */

 Setup pins descriptions per SoC types */

 Build gpiochip should be after pinctrl_enable is done */

 SPDX-License-Identifier: GPL-2.0

/*

 * Based on pinctrl-mt6765.c

 *

 * Copyright (C) 2018 MediaTek Inc.

 *

 * Author: ZH Chen <zh.chen@mediatek.com>

 *

 * Copyright (C) Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>

 *

/*

 * MT6797 have multiple bases to program pin configuration listed as the below:

 * gpio:0x10005000, iocfg[l]:0x10002000, iocfg[b]:0x10002400,

 * iocfg[r]:0x10002800, iocfg[t]:0x10002C00.

 * _i_base could be used to indicate what base the pin should be mapped into.

 SPDX-License-Identifier: GPL-2.0

/*

 * The MT7986 driver based on Linux generic pinctrl binding.

 *

 * Copyright (C) 2021 MediaTek Inc.

 * Author: Sam Shih <sam.shih@mediatek.com>

/**

 * enum - Locking variants of the iocfg bases

 *

 * MT7986 have multiple bases to program pin configuration listed as the below:

 * iocfg_rt:0x11c30000, iocfg_rb:0x11c40000, iocfg_lt:0x11e20000,

 * iocfg_lb:0x11e30000, iocfg_tr:0x11f00000, iocfg_tl:0x11f10000,

 * _i_based could be used to indicate what base the pin should be mapped into.

 *

 * Each iocfg register base control different group of pads on the SoC

 *

 *

 *  chip carrier

 *

 *      A  B  C  D  E  F  G  H

 *    +------------------------+

 *  8 | o  o  o  o  o  o  o  o |

 *  7 | o  o  o  o  o  o  o  o |

 *  6 | o  o  o  o  o  o  o  o |

 *  5 | o  o  o  o  o  o  o  o |

 *  4 | o  o  o  o  o  o  o  o |

 *  3 | o  o  o  o  o  o  o  o |

 *  2 | o  o  o  o  o  o  o  o |

 *  1 | o  o  o  o  o  o  o  o |

 *    +------------------------+

 *

 *  inside Chip carrier

 *

 *      A  B  C  D  E  F  G  H

 *    +------------------------+

 *  8 |                        |

 *  7 |        TL  TR          |

 *  6 |      +---------+       |

 *  5 |   LT |         | RT    |

 *  4 |      |         |       |

 *  3 |   LB |         | RB    |

 *  2 |      +---------+       |

 *  1 |                        |

 *    +------------------------+

 *

/* List all groups consisting of these pins dedicated to the enablement of

 * certain hardware block and the corresponding mode for all of the pins.

 * The hardware probably has multiple combinations of these pinouts.

/* Joint those groups owning the same capability in user point of view which

 * allows that people tend to use through the device tree.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 MediaTek Inc.

 *

 * Author: ZH Chen <zh.chen@mediatek.com>

 *

/* MT6765 have multiple bases to program pin configuration listed as the below:

 * iocfg[0]:0x10005000, iocfg[1]:0x10002C00, iocfg[2]:0x10002800,

 * iocfg[3]:0x10002A00, iocfg[4]:0x10002000, iocfg[5]:0x10002200,

 * iocfg[6]:0x10002500, iocfg[7]:0x10002600.

 * _i_base could be used to indicate what base the pin should be mapped into.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 MediaTek Inc.

 *

 * Author: Zhiyong Tao <zhiyong.tao@mediatek.com>

 *

/* MT8183 have multiple bases to program pin configuration listed as the below:

 * iocfg[0]:0x10005000, iocfg[1]:0x11F20000, iocfg[2]:0x11E80000,

 * iocfg[3]:0x11E70000, iocfg[4]:0x11E90000, iocfg[5]:0x11D30000,

 * iocfg[6]:0x11D20000, iocfg[7]:0x11C50000, iocfg[8]:0x11F30000.

 * _i_based could be used to indicate what base the pin should be mapped into.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 MediaTek Inc.

 *

 * Author: Sean Wang <sean.wang@mediatek.com>

 *

/**

 * struct mtk_drive_desc - the structure that holds the information

 *			    of the driving current

 * @min:	the minimum current of this group

 * @max:	the maximum current of this group

 * @step:	the step current of this group

 * @scal:	the weight factor

 *

 * formula: output = ((input) / step - 1) * scal

 The groups of drive strength */

	/* Calculated bits as the overall offset the pin is located at,

	 * if c->fixed is held, that determines the all the pins in the

	 * range use the same field with the s_pin.

	/* Fill pfd from bits. For example 32-bit register applied is assumed

	 * when c->sz_reg is equal to 32.

	/* pfd->next is used for indicating that bit wrapping-around happens

	 * which requires the manipulation for bit 0 starting in the next

	 * register to form the complete field read/write.

/*

 * Virtual GPIO only used inside SOC and not being exported to outside SOC.

 * Some modules use virtual GPIO as eint (e.g. pmif or usb).

 * In MTK platform, external interrupt (EINT) and GPIO is 1-1 mapping

 * and we can set GPIO as eint.

 * But some modules use specific eint which doesn't have real GPIO pin.

 * So we use virtual GPIO to map it.

 if the GPIO is not supported for eint mode */

 Be greedy to guess first gpio_n is equal to eint_n */

	/* SMT is supposed to be supported by every real GPIO and doesn't

	 * support virtual GPIOs, so the extra condition err != -ENOTSUPP

	 * is just for adding EINT support to these virtual GPIOs. It should

	 * add an extra flag in the pin descriptor when more pins with

	 * distinctive characteristic come out.

 Revision 0 */

 Revision 1 */

/* Combo for the following pull register type:

 * 1. PU + PD

 * 2. PULLSEL + PULLEN

 * 3. PUPD + R0 + R1

 MTK HW PUPD bit: 1 for pull-down, 0 for pull-up */

 find pin rsel_index from pin_rsel array*/

 MTK HW PUPD bit: 1 for pull-down, 0 for pull-up */

 Revision 0 */

	/* 4mA when (e8, e4) = (0, 0)

	 * 8mA when (e8, e4) = (0, 1)

	 * 12mA when (e8, e4) = (1, 0)

	 * 16mA when (e8, e4) = (1, 1)

	/* 4mA when (e8, e4) = (0, 0); 8mA when (e8, e4) = (0, 1)

	 * 12mA when (e8, e4) = (1, 0); 16mA when (e8, e4) = (1, 1)

 Revision 1 */

	/* 10K off & 50K (75K) off, when (R0, R1) = (0, 0);

	 * 10K off & 50K (75K) on, when (R0, R1) = (0, 1);

	 * 10K on & 50K (75K) off, when (R0, R1) = (1, 0);

	 * 10K on & 50K (75K) on, when (R0, R1) = (1, 1)

	/* If PUPD register is not supported for that pin, let's fallback to

	 * general bias control.

	/* If PUPD register is not supported for that pin, let's fallback to

	 * general bias control.

 t == 0 supposes PULLUP for the customized PULL setup */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2020 MediaTek Inc.

 * Author: Min.Guo <min.guo@mediatek.com>

 0E4E8SR 4/8/12/16 */

 0E2E4SR  2/4/6/8 */

 E8E4E2  2/4/6/8/10/12/14/16 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * mt65xx pinctrl driver based on Allwinner A1X pinctrl driver.

 * Copyright (c) 2014 MediaTek Inc.

 * Author: Hongzhou.Yang <hongzhou.yang@mediatek.com>

/*

 * There are two base address for pull related configuration

 * in mt8135, and different GPIO pins use different base address.

 * When pin number greater than type1_start and less than type1_end,

 * should use the second base address.

 Different SoC has different mask and port shift. */

 Different SoC has different alignment offset. */

	/**

	 * Due to some soc are not support ies/smt config, add this special

	 * control to handle it.

	/*

	 * Due to some pins are irregular, their input enable and smt

	 * control register are discontinuous, so we need this special handle.

	/* Some pins' pull setting are very different,

	 * they have separate pull up/down bit, R0 and R1

	 * resistor bit, so we need this special handle.

		/* For special pins, bias-disable is set by R1R0,

		 * the parameter should be "MTK_PUPD_SET_R1R0_00".

 For generic pull config, default arg value should be 0 or 1. */

 Allocate groups */

 We assume that one pin is one group, use pin name as group name. */

 set mux to INT mode */

 set gpio direction to input */

 set input-enable */

	/*

	 * If pctl->eint->regs == NULL, it would fall back into using a generic

	 * register map in mtk_eint_do_init calls.

 Only 8135 has two base addr, other SoCs have only one. */

 Register the GPIO to pin mappings. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2014 MediaTek Inc.

 * Author: Hongzhou.Yang <hongzhou.yang@mediatek.com>

 E8E4E2 2/4/6/8/10/12/14/16 */

 E8E4  4/8/12/16 */

 E4E2  2/4/6/8 */

 E16E8E4 4/8/12/16/20/24/28/32 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015 MediaTek Inc.

 * Author: Hongzhou.Yang <hongzhou.yang@mediatek.com>

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2019 MediaTek Inc.

 * Author: Zhiyong Tao <zhiyong.tao@mediatek.com>

 *

/* MT8192 have multiple bases to program pin configuration listed as the below:

 * iocfg0:0x10005000, iocfg_rm:0x11C20000, iocfg_bm:0x11D10000,

 * iocfg_bl:0x11D30000, iocfg_br:0x11D40000, iocfg_lm:0x11E20000,

 * iocfg_lb:0x11E70000, iocfg_rt:0x11EA0000, iocfg_lt:0x11F20000,

 * iocfg_tl:0x11F30000

 * _i_based could be used to indicate what base the pin should be mapped into.

 SPDX-License-Identifier: GPL-2.0

/*

 * The MT7623 driver based on Linux generic pinctrl binding.

 *

 * Copyright (C) 2015 - 2018 MediaTek Inc.

 * Author: Biao Huang <biao.huang@mediatek.com>

 *	   Ryder Lee <ryder.lee@mediatek.com>

 *	   Sean Wang <sean.wang@mediatek.com>

 MSDC0 */

 MSDC1 */

 MSDC1 */

 MSDC0E */

 MSDC0 */

 MSDC1 */

 MSDC2 */

 MSDC0E */

 MSDC0 */

 MSDC1 */

 MSDC2 */

 MSDC0E */

/* List all groups consisting of these pins dedicated to the enablement of

 * certain hardware block and the corresponding mode for all of the pins.

 * The hardware probably has multiple combinations of these pinouts.

 AUDIO EXT CLK */

 DISP PWM */

 ESW */

 EPHY */

 EXT_SDIO */

 HDMI RX */

 HDMI TX */

 I2C */

 I2S */

 IR */

 LCD */

 MDC/MDIO */

 MSDC */

 NAND */

 RTC */

 OTG */

 PCIE */

 the pcie_*_rev are only used for MT7623 */

 PCM */

 PWM */

 PWRAP */

 SPDIF */

 SPI */

 UART */

 Watchdog */

/* Joint those groups owning the same capability in user point of view which

 * allows that people tend to use through the device tree.

/*

 * There are some specific pins have mux functions greater than 8,

 * and if we want to switch thees high modes we need to disable

 * bonding constraints firstly.

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2014-2018 MediaTek Inc.

/*

 * Library for MediaTek External Interrupt Support

 *

 * Author: Maoguang Meng <maoguang.meng@mediatek.com>

 *	   Sean Wang <sean.wang@mediatek.com>

 *

			/*

			 * If we get an interrupt on pin that was only required

			 * for wake (but no real interrupt requested), mask the

			 * interrupt (as would mtk_eint_resume do anyway later

			 * in the resume sequence).

				/*

				 * Clear soft-irq in case we raised it last

				 * time.

				/*

				 * If level changed, we might lost one edge

				 * interrupt, raised it through soft-irq.

	/*

	 * Delay a while (more than 2T) to wait for hw debounce counter reset

	 * work correctly.

 If clients don't assign a specific regs, let's use generic one */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2021 MediaTek Inc.

 * Author: Zhiyong Tao <zhiyong.tao@mediatek.com>

 0E4E8SR 4/8/12/16 */

 0E2E4SR  2/4/6/8 */

 E8E4E2  2/4/6/8/10/12/14/16 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2020 MediaTek Inc.

 *

 * Author: Zhiyong Tao <zhiyong.tao@mediatek.com>

 *

/* MT8195 have multiple bases to program pin configuration listed as the below:

 * iocfg[0]:0x10005000, iocfg[1]:0x11d10000, iocfg[2]:0x11d30000,

 * iocfg[3]:0x11d40000, iocfg[4]:0x11e20000, iocfg[5]:0x11eb0000,

 * iocfg[6]:0x11f40000.

 * _i_based could be used to indicate what base the pin should be mapped into.

 0 */, MTK_PULL_PUPD_R1R0_TYPE 
 2 */, MTK_PULL_PUPD_R1R0_TYPE 
 4 */, MTK_PULL_PUPD_R1R0_TYPE 
 6 */, MTK_PULL_PU_PD_TYPE 
 8 */, MTK_PULL_PU_PD_RSEL_TYPE 
 10 */, MTK_PULL_PU_PD_RSEL_TYPE 
 12 */, MTK_PULL_PU_PD_RSEL_TYPE 
 14 */, MTK_PULL_PU_PD_RSEL_TYPE 
 16 */, MTK_PULL_PU_PD_RSEL_TYPE 
 18 */, MTK_PULL_PU_PD_TYPE 
 20 */, MTK_PULL_PU_PD_TYPE 
 22 */, MTK_PULL_PU_PD_TYPE 
 24 */, MTK_PULL_PU_PD_TYPE 
 26 */, MTK_PULL_PU_PD_TYPE 
 28 */, MTK_PULL_PU_PD_RSEL_TYPE 
 30 */, MTK_PULL_PU_PD_TYPE 
 32 */, MTK_PULL_PU_PD_TYPE 
 34 */, MTK_PULL_PU_PD_RSEL_TYPE 
 36 */, MTK_PULL_PU_PD_TYPE 
 38 */, MTK_PULL_PU_PD_TYPE 
 40 */, MTK_PULL_PU_PD_TYPE 
 42 */, MTK_PULL_PU_PD_TYPE 
 44 */, MTK_PULL_PU_PD_RSEL_TYPE 
 46 */, MTK_PULL_PU_PD_TYPE 
 48 */, MTK_PULL_PU_PD_TYPE 
 50 */, MTK_PULL_PU_PD_TYPE 
 52 */, MTK_PULL_PU_PD_TYPE 
 54 */, MTK_PULL_PU_PD_TYPE 
 56 */, MTK_PULL_PU_PD_TYPE 
 58 */, MTK_PULL_PU_PD_TYPE 
 60 */, MTK_PULL_PU_PD_TYPE 
 62 */, MTK_PULL_PU_PD_TYPE 
 64 */, MTK_PULL_PU_PD_TYPE 
 66 */, MTK_PULL_PU_PD_TYPE 
 68 */, MTK_PULL_PU_PD_TYPE 
 70 */, MTK_PULL_PU_PD_TYPE 
 72 */, MTK_PULL_PU_PD_TYPE 
 74 */, MTK_PULL_PU_PD_TYPE 
 76 */, MTK_PULL_PUPD_R1R0_TYPE 
 78 */, MTK_PULL_PUPD_R1R0_TYPE 
 80 */, MTK_PULL_PUPD_R1R0_TYPE 
 82 */, MTK_PULL_PUPD_R1R0_TYPE 
 84 */, MTK_PULL_PUPD_R1R0_TYPE 
 86 */, MTK_PULL_PUPD_R1R0_TYPE 
 88 */, MTK_PULL_PUPD_R1R0_TYPE 
 90 */, MTK_PULL_PUPD_R1R0_TYPE 
 92 */, MTK_PULL_PUPD_R1R0_TYPE 
 94 */, MTK_PULL_PUPD_R1R0_TYPE 
 96 */, MTK_PULL_PU_PD_TYPE 
 98 */, MTK_PULL_PU_PD_TYPE 
 100 */, MTK_PULL_PU_PD_TYPE 
 102 */, MTK_PULL_PU_PD_TYPE 
 104 */, MTK_PULL_PUPD_R1R0_TYPE 
 106 */, MTK_PULL_PUPD_R1R0_TYPE 
 108 */, MTK_PULL_PU_PD_TYPE 
 110 */, MTK_PULL_PUPD_R1R0_TYPE 
 112 */, MTK_PULL_PUPD_R1R0_TYPE 
 114 */, MTK_PULL_PUPD_R1R0_TYPE 
 116 */, MTK_PULL_PUPD_R1R0_TYPE 
 118 */, MTK_PULL_PUPD_R1R0_TYPE 
 120 */, MTK_PULL_PUPD_R1R0_TYPE 
 122 */, MTK_PULL_PUPD_R1R0_TYPE 
 124 */, MTK_PULL_PUPD_R1R0_TYPE 
 126 */, MTK_PULL_PUPD_R1R0_TYPE 
 128 */, MTK_PULL_PU_PD_TYPE 
 130 */, MTK_PULL_PU_PD_TYPE 
 132 */, MTK_PULL_PU_PD_TYPE 
 134 */, MTK_PULL_PU_PD_TYPE 
 136 */, MTK_PULL_PU_PD_TYPE 
 138 */, MTK_PULL_PU_PD_TYPE 
 140 */, MTK_PULL_PU_PD_TYPE 
 142 */, MTK_PULL_PU_PD_TYPE 
 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2019 MediaTek Inc.

 * Author: Andy Teng <andy.teng@mediatek.com>

 *

/* MT6779 have multiple bases to program pin configuration listed as the below:

 * gpio:0x10005000,     iocfg_rm:0x11C20000, iocfg_br:0x11D10000,

 * iocfg_lm:0x11E20000, iocfg_lb:0x11E70000, iocfg_rt:0x11EA0000,

 * iocfg_lt:0x11F20000, iocfg_tl:0x11F30000

 * _i_based could be used to indicate what base the pin should be mapped into.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018 MediaTek Inc.

 * Author: Zhiyong Tao <zhiyong.tao@mediatek.com>

 *

 0E4E8SR 4/8/12/16 */

 0E2E4SR  2/4/6/8 */

 E8E4E2  2/4/6/8/10/12/14/16 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2017-2018 MediaTek Inc.

 *

 * Author: Sean Wang <sean.wang@mediatek.com>

 *

/* List all groups consisting of these pins dedicated to the enablement of

 * certain hardware block and the corresponding mode for all of the pins. The

 * hardware probably has multiple combinations of these pinouts.

 ANTSEL */

 EMMC */

 LED for EPHY */

 Embedded Switch */

 RGMII via ESW */

 RGMII via GMAC1 */

 RGMII via GMAC2 */

 I2C */

 I2S */

 IR */

 MDIO */

 PCIE */

 PMIC bus */

 Parallel NAND */

 PWM */

 SD */

 Serial NAND */

 SPI NOR */

 SPIC */

 TDM */

 UART */

 Watchdog */

 WLAN LED */

/* Joint those groups owning the same capability in user point of view which

 * allows that people tend to use through the device tree.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2014-2015 MediaTek Inc.

 * Author: Hongzhou.Yang <hongzhou.yang@mediatek.com>

 KROW0 */

 KROW1 */

 KROW2 */

 KCOL0 */

 KCOL1 */

 KCOL2 */

 ms0 DS */

 ms0 RST */

 ms0 cmd */

 ms0 clk */

 ms0 data0 */

 ms0 data1 */

 ms0 data2 */

 ms0 data3 */

 ms0 data4 */

 ms0 data5 */

 ms0 data6 */

 ms0 data7 */

 ms1 cmd */

 ms1 dat0 */

 ms1 dat1 */

 ms1 dat2 */

 ms1 dat3 */

 ms1 clk */

 ms2 dat0 */

 ms2 dat1 */

 ms2 dat2 */

 ms2 dat3 */

 ms2 clk */

 ms2 cmd */

 ms3 dat0 */

 ms3 dat1 */

 ms3 dat2 */

 ms3 dat3 */

 ms3 clk */

 ms3 cmd */

 0E4E8SR 4/8/12/16 */

 0E2E4SR  2/4/6/8 */

 E8E4E2  2/4/6/8/10/12/14/16 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015 MediaTek Inc.

 * Author: Biao Huang <biao.huang@mediatek.com>

/**

 * struct mtk_spec_pinmux_set

 * - For special pins' mode setting

 * @pin: The pin number.

 * @offset: The offset of extra setting register.

 * @bit: The bit of extra setting register.

 0E4E8SR 4/8/12/16 */

 0E2E4SR  2/4/6/8 */

 E8E4E2  2/4/6/8/10/12/14/16 */

 ms0 data7 */

 ms0 data6 */

 ms0 data5 */

 ms0 data4 */

 ms0 rstb */

 ms0 cmd */

 ms0 clk */

 ms0 data3 */

 ms0 data2 */

 ms0 data1 */

 ms0 data0 */

 ms1 cmd */

 ms1 clk */

 ms1 dat0 */

 ms1 dat1 */

 ms1 dat2 */

 ms1 dat3 */

 ms2 cmd */

 ms2 clk */

 ms2 dat0 */

 ms2 dat1 */

 ms2 dat2 */

 ms2 dat3 */

 ms0e rstb */

 ms0e dat7 */

 ms0e dat6 */

 ms0e dat5 */

 ms0e dat4 */

 ms0e dat3 */

 ms0e dat2 */

 ms0e dat1 */

 ms0e dat0 */

 ms0e cmd */

 ms0e clk */

 ms1 ins */

 SPDX-License-Identifier: GPL-2.0

/*

 * MediaTek Pinctrl Moore Driver, which implement the generic dt-binding

 * pinctrl-bindings.txt for MediaTek SoC.

 *

 * Copyright (C) 2017-2018 MediaTek Inc.

 * Author: Sean Wang <sean.wang@mediatek.com>

 *

 Custom pinconf parameters */

 hardware would take 0 as input direction */

 HW takes input mode as zero; output mode as non-zero */

			/* arg = 1: Input mode & SMT enable ;

			 * arg = 0: Output mode & SMT disable

 configs do not match between two pins */

	/* Just for backward compatible for these old pinctrl nodes without

	 * "gpio-ranges" property. Otherwise, called directly from a

	 * DeviceTree-supported pinctrl driver is DEPRECATED.

	 * Please see Section 2.1 of

	 * Documentation/devicetree/bindings/gpio/gpio.txt on how to

	 * bind pinctrl and gpio drivers via the "gpio-ranges" property.

 Copy from internal struct mtk_pin_desc to register to the core */

 Setup pins descriptions per SoC types */

 Setup groups descriptions per SoC types */

 Setup functions descriptions per SoC types */

	/* For able to make pinctrl_claim_hogs, we must not enable pinctrl

	 * until all groups and functions are being added one.

 Build gpiochip should be after pinctrl_enable is done */

 SPDX-License-Identifier: GPL-2.0

/*

 * The MT7629 driver based on Linux generic pinctrl binding.

 *

 * Copyright (C) 2018 MediaTek Inc.

 * Author: Ryder Lee <ryder.lee@mediatek.com>

/* List all groups consisting of these pins dedicated to the enablement of

 * certain hardware block and the corresponding mode for all of the pins.

 * The hardware probably has multiple combinations of these pinouts.

 LED for EPHY */

 Watchdog */

 LED for GPHY */

 I2C */

 SPI */

 UART */

 MDC/MDIO */

 PCIE */

 PWM */

 WF 2G */

 WF 5G */

 SNFI */

 SPI NOR */

/* Joint those groups owning the same capability in user point of view which

 * allows that people tend to use through the device tree.

/*

 * Allwinner A64 SoCs pinctrl driver.

 *

 * Copyright (C) 2016 - ARM Ltd.

 * Author: Andre Przywara <andre.przywara@arm.com>

 *

 * Based on pinctrl-sun7i-a20.c, which is:

 * Copyright (C) 2014 Maxime Ripard <maxime.ripard@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 TX */

 MS0 */

 EINT0 */

 RX */

 CK0 */

 VCCEN */

 EINT1 */

 RTS */

 DO0 */

 VPPEN */

 EINT2 */

 CTS */

 MCLK */

 DI0 */

 VPPPP */

 EINT3 */

 SYNC */

 SYNC */

 CLK */

 EINT4 */

 BCLK */

 BCLK */

 DATA */

 EINT5 */

 DOUT */

 DOUT */

 RST */

 EINT6 */

 DIN */

 DIN */

 DET */

 EINT7 */

 TX */

 EINT8 */

 RX */

 EINT9 */

 Hole */

 NWE */

 MOSI */

 NALE */

 DS */

 MISO */

 NCLE */

 SCK */

 NCE1 */

 CS */

 NCE0 */

 NRE# */

 CLK */

 NRB0 */

 CMD */

 NRB1 */

 NDQ0 */

 D0 */

 NDQ1 */

 D1 */

 NDQ2 */

 D2 */

 NDQ3 */

 D3 */

 NDQ4 */

 D4 */

 NDQ5 */

 D5 */

 NDQ6 */

 D6 */

 NDQ7 */

 D7 */

 NDQS */

 RST */

 Hole */

 D2 */

 TX */

 CS */

 CLK */

 D3 */

 RX */

 CLK */

 DE */

 D4 */

 TX */

 MOSI */

 HSYNC */

 D5 */

 RX */

 MISO */

 VSYNC */

 D6 */

 RTS */

 D0 */

 D7 */

 CTS */

 D1 */

 D10 */

 D2 */

 D11 */

 D3 */

 D12 */

 ERXD3 */

 D4 */

 D13 */

 ERXD2 */

 D5 */

 D14 */

 ERXD1 */

 D15 */

 ERXD0 */

 D18 */

 VP0 */

 ERXCK */

 D19 */

 VN0 */

 ERXCTL */

 D20 */

 VP1 */

 ENULL */

 D21 */

 VN1 */

 ETXD3 */

 D6 */

 D22 */

 VP2 */

 ETXD2 */

 D7 */

 D23 */

 VN2 */

 ETXD1 */

 CLK */

 VPC */

 ETXD0 */

 DE */

 VNC */

 ETXCK */

 HSYNC */

 VP3 */

 ETXCTL */

 VSYNC */

 VN3 */

 ECLKIN */

 PWM0 */

 EMDC */

 EMDIO */

 Hole */

 PCK */

 CLK */

 CK */

 ERR */

 HSYNC */

 SYNC */

 VSYNC */

 DVLD */

 D0 */

 D0 */

 D1 */

 D1 */

 D2 */

 D2 */

 D3 */

 D3 */

 D4 */

 D4 */

 D5 */

 D5 */

 D6 */

 D6 */

 D7 */

 D7 */

 SCK */

 SDA */

 LOCK_DBG */

 SCK */

 SDA */

 Hole */

 D1 */

 MSI */

 D0 */

 DI1 */

 CLK */

 TX */

 CMD */

 DO1 */

 D3 */

 RX */

 D2 */

 CK1 */

 Hole */

 CLK */

 EINT0 */

 CMD */

 EINT1 */

 D0 */

 EINT2 */

 D1 */

 EINT3 */

 D2 */

 EINT4 */

 D3 */

 EINT5 */

 TX */

 EINT6 */

 RX */

 EINT7 */

 RTS */

 EINT8 */

 CTS */

 EINT9 */

 SYNC */

 SYNC */

 EINT10 */

 BCLK */

 BCLK */

 EINT11 */

 DOUT */

 DOUT */

 EINT12 */

 DIN */

 DIN */

 EINT13 */

 Hole */

 SCK */

 EINT0 */

 SDA */

 EINT1 */

 SCK */

 EINT2 */

 SDA */

 EINT3 */

 TX */

 EINT4 */

 RX */

 EINT5 */

 RTS */

 EINT6 */

 CTS */

 EINT7 */

 OUT */

 EINT8 */

 EINT9 */

 CLK */

 EINT10 */

 DATA */

 EINT11 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Allwinner H6 R_PIO pin controller driver

 *

 * Copyright (C) 2017 Icenowy Zheng <icenowy@aosc.io>

 *

 * Based on pinctrl-sun6i-a31-r.c, which is:

 *   Copyright (C) 2014 Boris Brezillon

 *   Boris Brezillon <boris.brezillon@free-electrons.com>

 *   Copyright (C) 2014 Maxime Ripard

 *   Maxime Ripard <maxime.ripard@free-electrons.com>

 SCK */

 SCK */

 PL_EINT0 */

 SDA */

 SDA */

 PL_EINT1 */

 TX */

 PL_EINT2 */

 RX */

 PL_EINT3 */

 MS */

 PL_EINT4 */

 CK */

 PL_EINT5 */

 DO */

 PL_EINT6 */

 DI */

 PL_EINT7 */

 PL_EINT8 */

 PL_EINT9 */

 PL_EINT10 */

 Hole */

 PM_EINT0 */

 PM_EINT1 */

 PM_EINT2 */

 PM_EINT3 */

 PM_EINT4 */

/*

 * Allwinner A23 SoCs special pins pinctrl driver.

 *

 * Copyright (C) 2014 Chen-Yu Tsai

 * Chen-Yu Tsai <wens@csie.org>

 *

 * Copyright (C) 2014 Boris Brezillon

 * Boris Brezillon <boris.brezillon@free-electrons.com>

 *

 * Copyright (C) 2014 Maxime Ripard

 * Maxime Ripard <maxime.ripard@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 SCK */

 SCK */

 PL_EINT0 */

 SDA */

 SDA */

 PL_EINT1 */

 TX */

 PL_EINT2 */

 RX */

 PL_EINT3 */

 MS */

 PL_EINT4 */

 CK */

 PL_EINT5 */

 DO */

 PL_EINT6 */

 DI */

 PL_EINT7 */

 SCK */

 PL_EINT8 */

 SDA */

 PL_EINT9 */

 PL_EINT10 */

 PL_EINT11 */

/*

 * Allwinner V3/V3s SoCs pinctrl driver.

 *

 * Copyright (C) 2016 Icenowy Zheng <icenowy@aosc.xyz>

 *

 * Based on pinctrl-sun8i-h3.c, which is:

 * Copyright (C) 2015 Jens Kuske <jenskuske@gmail.com>

 *

 * Based on pinctrl-sun8i-a23.c, which is:

 * Copyright (C) 2014 Chen-Yu Tsai <wens@csie.org>

 * Copyright (C) 2014 Maxime Ripard <maxime.ripard@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 Hole */

 TX */

 PB_EINT0 */

 RX */

 PB_EINT1 */

 RTS */

 PB_EINT2 */

 D1 */

 PB_EINT3 */

 PB_EINT4 */

 PB_EINT5 */

 SCK */

 PB_EINT6 */

 SDA */

 PB_EINT7 */

 SDA */

 TX */

 PB_EINT8 */

 SCK */

 RX */

 PB_EINT9 */

 MS */

 PB_EINT10 */

 CK */

 PB_EINT11 */

 DO */

 PB_EINT12 */

 DI */

 PB_EINT13 */

 Hole */

 CLK */

 MISO */

 CMD */

 CLK */

 RST */

 CS */

 D0 */

 MOSI */

 D1 */

 D2 */

 D3 */

 D4 */

 D5 */

 D6 */

 D7 */

 Hole */

 D2 */

 RXD3 */

 D3 */

 RXD2 */

 D4 */

 RXD1 */

 D5 */

 RXD0 */

 D6 */

 RXCK */

 D7 */

 RXCTL/RXDV */

 D10 */

 RXERR */

 D11 */

 TXD3 */

 D12 */

 TXD2 */

 D13 */

 TXD1 */

 D14 */

 TXD0 */

 D15 */

 CRS */

 D18 */

 VP0 */

 TXCK */

 D19 */

 VN0 */

 TXCTL/TXEN */

 D20 */

 VP1 */

 TXERR */

 D21 */

 VN1 */

 CLKIN/COL */

 D22 */

 VP2 */

 MDC */

 D23 */

 VN2 */

 MDIO */

 CLK */

 VPC */

 DE */

 VNC */

 HSYNC */

 VP3 */

 VSYNC */

 VN3 */

 Hole */

 PCLK */

 CLK */

 MCLK */

 DE */

 HSYNC */

 HSYNC */

 VSYNC */

 VSYNC */

 D0 */

 D2 */

 D1 */

 D3 */

 D2 */

 D4 */

 D3 */

 D5 */

 D4 */

 D6 */

 D5 */

 D7 */

 D6 */

 D10 */

 D7 */

 D11 */

 D8 */

 D12 */

 D9 */

 D13 */

 D10 */

 D14 */

 D11 */

 D15 */

 D12 */

 D18 */

 D13 */

 D19 */

 D14 */

 D20 */

 D15 */

 D21 */

 FIELD */

 MCLK */

 SCK */

 SCK */

 TX */

 SDA */

 SDA */

 RX */

 D22 */

 RTS */

 D23 */

 CTS */

 Hole */

 D1 */

 MS */

 D0 */

 DI */

 CLK */

 TX */

 CMD */

 DO */

 D3 */

 RX */

 D2 */

 CK */

 Hole */

 CLK */

 PG_EINT0 */

 CMD */

 PG_EINT1 */

 D0 */

 PG_EINT2 */

 D1 */

 PG_EINT3 */

 D2 */

 PG_EINT4 */

 D3 */

 PG_EINT5 */

 TX */

 PG_EINT6 */

 RX */

 PG_EINT7 */

 RTS */

 PG_EINT8 */

 CTS */

 PG_EINT9 */

 SYNC */

 PG_EINT10 */

 BCLK */

 PG_EINT11 */

 DOUT */

 PG_EINT12 */

 DIN */

 PG_EINT13 */

/*

 * Allwinner A10 SoCs pinctrl driver.

 *

 * Copyright (C) 2014 Maxime Ripard

 *

 * Maxime Ripard <maxime.ripard@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 ERXD3 */

 CS0 */

 RTS */

 GRXD3 */

 ERXD2 */

 CLK */

 CTS */

 GRXD2 */

 ERXD1 */

 MOSI */

 TX */

 GRXD1 */

 ERXD0 */

 MISO */

 RX */

 GRXD0 */

 ETXD3 */

 CS1 */

 GTXD3 */

 ETXD2 */

 CS0 */

 GTXD2 */

 ETXD1 */

 CLK */

 GTXD1 */

 ETXD0 */

 MOSI */

 GTXD0 */

 ERXCK */

 MISO */

 GRXCK */

 ERXERR */

 CS1 */

 GNULL / ERXERR */

 MCLK */

 ERXDV */

 TX */

 GRXDV */

 EMDC */

 RX */

 EMDC */

 EMDIO */

 TX */

 RTS */

 EMDIO */

 ETXEN */

 RX */

 CTS */

 GTXCTL / ETXEN */

 ETXCK */

 TX */

 DTR */

 GNULL / ETXCK */

 BCLK */

 ECRS */

 RX */

 DSR */

 GTXCK / ECRS */

 LRCK */

 ECOL */

 TX */

 DCD */

 GCLKIN / ECOL */

 DO */

 ETXERR */

 RX */

 RING */

 GNULL / ETXERR */

 DI */

 Hole */

 SCK */

 SDA */

 PWM0 */

 PWM0 */

 TX */

 PWM1 */

		/*

		 * The SPDIF block is not referenced at all in the A10 user

		 * manual. However it is described in the code leaked and the

		 * pin descriptions are declared in the A20 user manual which

		 * is pin compatible with this device.

 SPDIF MCLK */

 RX */

		  /*

		   * On A10 there's only one I2S controller and the pin group

		   * is simply named "i2s". On A20 there's two and thus it's

		   * renamed to "i2s0". Deal with these name here, in order

		   * to satisfy existing device trees.

 MCLK */

 MCLK */

 MCLK */

 BCLK */

 BCLK */

 BCLK */

 LRCK */

 LRCK */

 SYNC */

 DO0 */

 DO0 */

 DO */

 DO1 */

 DO1 */

 PWM6 */

 DO2 */

 DO2 */

 PWM7 */

 DO3 */

 DO3 */

 DI */

 DI */

 DI */

 Undocumented mux function on A10 - See SPDIF MCLK above */

 SPDIF IN */

 CS1 */

 Undocumented mux function on A10 - See SPDIF MCLK above */

 SPDIF OUT */

 CS0 */

 MS0 */

 CLK */

 CK0 */

 MOSI */

 DO0 */

 MISO */

 DI0 */

 SCK */

 SDA */

 SCK */

 PWM4 */

 SDA */

 PWM5 */

 TX */

 TX */

 RX */

 RX */

 Hole */

 NWE */

 MOSI */

 NALE */

 MISO */

 NCLE */

 SCK */

 NCE1 */

 NCE0 */

 NRE# */

 DS */

 NRB0 */

 CMD */

 NRB1 */

 CLK */

 NDQ0 */

 D0 */

 NDQ1 */

 D1 */

 NDQ2 */

 D2 */

 NDQ3 */

 D3 */

 NDQ4 */

 D4 */

 NDQ5 */

 D5 */

 NDQ6 */

 D6 */

 NDQ7 */

 D7 */

 NWP */

 NCE2 */

 NCE3 */

 NCE4 */

 CS0 */

 NCE5 */

 CLK */

 NCE6 */

 MOSI */

 NCE7 */

 MISO */

 CS0 */

 NDQS */

 RST */

 Hole */

 D0 */

 VP0 */

 D1 */

 VN0 */

 D2 */

 VP1 */

 D3 */

 VN1 */

 D4 */

 VP2 */

 D5 */

 VN2 */

 D6 */

 VPC */

 D7 */

 VNC */

 D8 */

 VP3 */

 D9 */

 VM3 */

 D10 */

 VP0 */

 D11 */

 VN0 */

 D12 */

 VP1 */

 D13 */

 VN1 */

 D14 */

 VP2 */

 D15 */

 VN2 */

 D16 */

 VPC */

 D17 */

 VNC */

 D18 */

 VP3 */

 D19 */

 VN3 */

 D20 */

 MCLK */

 D21 */

 VPPEN */

 D22 */

 VPPPP */

 D23 */

 DET */

 CLK */

 VCCEN */

 DE */

 RST */

 HSYNC */

 SCK */

 VSYNC */

 SDA */

 Hole */

 CLK */

 PCK */

 ERR */

 CK */

 SYNC */

 HSYNC */

 DVLD */

 VSYNC */

 D0 */

 D0 */

 D1 */

 D1 */

 VPPEN */

 D2 */

 D2 */

 D3 */

 D3 */

 D4 */

 D4 */

 D5 */

 D5 */

 D6 */

 D6 */

 D7 */

 D7 */

 Hole */

 D1 */

 MSI */

 D0 */

 DI1 */

 CLK */

 TX */

 CMD */

 DO1 */

 D3 */

 RX */

 D2 */

 CK1 */

 Hole */

 CLK */

 PCK */

 CMD */

 ERR */

 CK */

 CLK */

 SYNC */

 HSYNC */

 D0 */

 DVLD */

 VSYNC */

 D1 */

 D0 */

 D0 */

 D2 */

 D8 */

 D1 */

 D1 */

 D3 */

 D9 */

 D2 */

 D2 */

 TX */

 D10 */

 D3 */

 D3 */

 RX */

 D11 */

 D4 */

 D4 */

 RTS */

 D12 */

 D5 */

 D5 */

 CTS */

 D13 */

 RESULT0 */

 D6 */

 D6 */

 TX */

 D14 */

 RESULT1 */

 D7 */

 D7 */

 RX */

 D15 */

 Hole */

 D0 */

 ATAA0 */

 TX */

 EINT0 */

 D0 */

 D1 */

 ATAA1 */

 RX */

 EINT1 */

 D1 */

 D2 */

 ATAA2 */

 RTS */

 EINT2 */

 D2 */

 D3 */

 ATAIRQ */

 CTS */

 EINT3 */

 D3 */

 D4 */

 ATAD0 */

 TX */

 EINT4 */

 D4 */

 D5 */

 ATAD1 */

 RX */

 EINT5 */

 D5 */

 D6 */

 ATAD2 */

 TX */

 BS */

 EINT6 */

 D6 */

 D7 */

 ATAD3 */

 RX */

 CLK */

 EINT7 */

 D7 */

 D8 */

 ATAD4 */

 ERXD3 */

 IN0 */

 D0 */

 EINT8 */

 D8 */

 D9 */

 ATAD5 */

 ERXD2 */

 IN1 */

 D1 */

 EINT9 */

 D9 */

 D10 */

 ATAD6 */

 ERXD1 */

 IN2 */

 D2 */

 EINT10 */

 D10 */

 D11 */

 ATAD7 */

 ERXD0 */

 IN3 */

 D3 */

 EINT11 */

 D11 */

 D12 */

 ATAD8 */

 SCK1 */

 EINT12 */

 D12 */

 D13 */

 ATAD9 */

 SDA1 */

 RST */

 EINT13 */

 D13 */

 D14 */

 ATAD10 */

 ETXD3 */

 IN4 */

 VPPEN */

 EINT14 */

 D14 */

 D15 */

 ATAD11 */

 ETXD2 */

 IN5 */

 VPPPP */

 EINT15 */

 D15 */

 D16 */

 ATAD12 */

 ETXD1 */

 IN6 */

 DET */

 EINT16 */

 D16 */

 D17 */

 ATAD13 */

 ETXD0 */

 IN7 */

 VCCEN */

 EINT17 */

 D17 */

 D18 */

 ATAD14 */

 ERXCK */

 OUT0 */

 SCK */

 EINT18 */

 D18 */

 D19 */

 ATAD15 */

 ERXERR */

 OUT1 */

 SDA */

 EINT19 */

 D19 */

 D20 */

 ATAOE */

 ERXDV */

 TX */

 EINT20 */

 D20 */

 D21 */

 ATADREQ */

 EMDC */

 RX */

 EINT21 */

 D21 */

 D22 */

 ATADACK */

 EMDIO */

 OUT2 */

 CMD */

 D22 */

 D23 */

 ATACS0 */

 ETXEN */

 OUT3 */

 CLK */

 D23 */

 CLK */

 ATACS1 */

 ETXCK */

 OUT4 */

 D0 */

 PCLK */

 DE */

 ATAIORDY */

 ECRS */

 OUT5 */

 D1 */

 FIELD */

 HSYNC */

 ATAIOR */

 ECOL */

 OUT6 */

 D2 */

 HSYNC */

 VSYNC */

 ATAIOW */

 ETXERR */

 OUT7 */

 D3 */

 VSYNC */

 Hole */

 SCK */

 SDA */

 SCK */

 PWM1 */

 SDA */

 CMD */

 CLK */

 D0 */

 D1 */

 D2 */

 D3 */

 CS0 */

 TX */

 EINT22 */

 CLK */

 RX */

 EINT23 */

 MOSI */

 TX */

 EINT24 */

 MISO */

 RX */

 EINT25 */

 CS1 */

 SCK1 */

 TCLKIN0 */

 EINT26 */

 CS1 */

 SDA1 */

 TCLKIN1 */

 EINT27 */

 CS0 */

 RTS */

 EINT28 */

 CLK */

 CTS */

 EINT29 */

 MOSI */

 TX */

 EINT30 */

 MISO */

 RX */

 EINT31 */

 SCK0 */

 TX */

 HSCL */

 PWM2 */

 SDA0 */

 RX */

 HSDA */

 PWM3 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Allwinner H616 R_PIO pin controller driver

 *

 * Copyright (C) 2020 Arm Ltd.

 * Based on former work, which is:

 *   Copyright (C) 2017 Icenowy Zheng <icenowy@aosc.io>

 SCK */

 SCK */

 SDA */

 SDA */

/*

 * Allwinner a83t SoCs pinctrl driver.

 *

 * Copyright (C) 2015 Vishnu Patekar <vishnupatekar0510@gmail.com>

 *

 * Based on pinctrl-sun8i-a23.c, which is:

 * Copyright (C) 2014 Chen-Yu Tsai <wens@csie.org>

 * Copyright (C) 2014 Maxime Ripard <maxime.ripard@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 Hole */

 TX */

 MS0 */

 PB_EINT0 */

 RX */

 CK0 */

 PB_EINT1 */

 RTS */

 DO0 */

 PB_EINT2 */

 CTS */

 DI0 */

 PB_EINT3 */

 LRCK */

 LRCK */

 PB_EINT4 */

 BCLK */

 BCLK */

 PB_EINT5 */

 DOUT */

 DOUT */

 PB_EINT6 */

 DIN */

 DIN */

 PB_EINT7 */

 MCLK */

 MCLK */

 PB_EINT8 */

 TX */

 PB_EINT9 */

 RX */

 PB_EINT10 */

 Hole */

 WE */

 MOSI */

 ALE */

 MISO */

 CLE */

 CLK */

 CE1 */

 CS */

 CE0 */

 RE */

 CLK */

 RB0 */

 CMD */

 RB1 */

 DQ0 */

 D0 */

 DQ1 */

 D1 */

 DQ2 */

 D2 */

 DQ3 */

 D3 */

 DQ4 */

 D4 */

 DQ5 */

 D5 */

 DQ6 */

 D6 */

 DQ7 */

 D7 */

 DQS */

 RST */

 CE2 */

 CE3 */

 Hole */

 D2 */

 RGMII / MII RXD3 */

 D3 */

 RGMII / MII RXD2 */

 D4 */

 RGMII / MII RXD1 */

 D5 */

 RGMII / MII RXD0 */

 D6 */

 RGMII / MII RXCK */

 D7 */

 RGMII / MII RXDV */

 D10 */

 RGMII / MII RXERR */

 D11 */

 RGMII / MII TXD3 */

 D12 */

 RGMII / MII TXD2 */

 D13 */

 RGMII / MII TXD1 */

 D14 */

 RGMII / MII TXD0 */

 D15 */

 RGMII-NULL / MII-CRS */

 D18 */

 VP0 */

 GTXCK / ETXCK */

 D19 */

 VN0 */

 GTXCTL / ETXEL */

 D20 */

 VP1 */

 GNULL / ETXERR */

 D21 */

 VN1 */

 GCLKIN / ECOL */

 D22 */

 VP2 */

 GMDC */

 D23 */

 VN2 */

 GMDIO */

 CLK */

 VPC */

 DE */

 VNC */

 HSYNC */

 VP3 */

 VSYNC */

 VN3 */

 PWM */

 Hole */

 PCLK */

 CLK */

 MCLK */

 DE */

 HSYNC */

 HSYNC */

 VSYNC */

 VSYNC */

 D0 */

 D1 */

 D2 */

 D0 */

 D3 */

 D1 */

 D4 */

 D2 */

 D5 */

 D3 */

 D6 */

 TX */

 D4 */

 D7 */

 RX */

 D5 */

 D8 */

 RTS */

 D6 */

 D9 */

 CTS */

 D7 */

 SCK */

 SCK */

 SDA */

 SDA */

 DOUT */

 Hole */

 D1 */

 MS1 */

 D0 */

 DI1 */

 CLK */

 TX */

 CMD */

 DO1 */

 D3 */

 RX */

 D2 */

 CK1 */

 Hole */

 CLK */

 PG_EINT0 */

 CMD */

 PG_EINT1 */

 D0 */

 PG_EINT2 */

 D1 */

 PG_EINT3 */

 D2 */

 PG_EINT4 */

 D3 */

 PG_EINT5 */

 TX */

 CS */

 PG_EINT6 */

 RX */

 CLK */

 PG_EINT7 */

 RTS */

 MOSI */

 PG_EINT8 */

 CTS */

 MISO */

 PG_EINT9 */

 BCLK */

 TX */

 PG_EINT10 */

 LRCK */

 RX */

 PG_EINT11 */

 DOUT */

 RTS */

 PG_EINT12 */

 DIN */

 CTS */

 PG_EINT13 */

 Hole */

 SCK */

 PH_EINT0 */

 SDA */

 PH_EINT1 */

 SCK */

 PH_EINT2 */

 SDA */

 PH_EINT3 */

 SCK */

 PH_EINT4 */

 SDA */

 PH_EINT5 */

 HSCL */

 PH_EINT6 */

 HSDA */

 PH_EINT7 */

 HCEC */

 PH_EINT8 */

 PH_EINT9 */

 PH_EINT10 */

 PH_EINT11 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Allwinner H616 SoC pinctrl driver.

 *

 * Copyright (C) 2020 Arm Ltd.

 * based on the H6 pinctrl driver

 *   Copyright (C) 2017 Icenowy Zheng <icenowy@aosc.io>

 Internal connection to the AC200 part */

 ERXD1 */

 ERXD0 */

 ECRS_DV */

 ERXERR */

 ETXD1 */

 ETXD0 */

 ETXCK */

 ETXEN */

 EMDC */

 EMDIO */

 SCK */

 SDA */

 Hole */

 WE */

 DS */

 CLK */

 PC_EINT0 */

 ALE */

 RST */

 PC_EINT1 */

 CLE */

 MOSI */

 PC_EINT2 */

 CE1 */

 CS0 */

 PC_EINT3 */

 CE0 */

 MISO */

 PC_EINT4 */

 RE */

 CLK */

 PC_EINT5 */

 RB0 */

 CMD */

 PC_EINT6 */

 RB1 */

 CS1 */

 PC_EINT7 */

 DQ7 */

 D3 */

 PC_EINT8 */

 DQ6 */

 D4 */

 PC_EINT9 */

 DQ5 */

 D0 */

 PC_EINT10 */

 DQ4 */

 D5 */

 PC_EINT11 */

 DQS */

 PC_EINT12 */

 DQ3 */

 D1 */

 PC_EINT13 */

 DQ2 */

 D6 */

 PC_EINT14 */

 DQ1 */

 D2 */

 WP */

 PC_EINT15 */

 DQ0 */

 D7 */

 HOLD */

 PC_EINT16 */

 Hole */

 D1 */

 MS */

 PF_EINT0 */

 D0 */

 DI */

 PF_EINT1 */

 CLK */

 TX */

 PF_EINT2 */

 CMD */

 DO */

 PF_EINT3 */

 D3 */

 RX */

 PF_EINT4 */

 D2 */

 CK */

 PF_EINT5 */

 PF_EINT6 */

 Hole */

 CLK */

 PG_EINT0 */

 CMD */

 PG_EINT1 */

 D0 */

 PG_EINT2 */

 D1 */

 PG_EINT3 */

 D2 */

 PG_EINT4 */

 D3 */

 PG_EINT5 */

 TX */

 MS */

 PG_EINT6 */

 RX */

 CK */

 PG_EINT7 */

 RTS */

 PLL_LOCK_DEBUG */

 DO */

 PG_EINT8 */

 CTS */

 PG_EINT9 */

 MCLK */

 X32KFOUT */

 PG_EINT10 */

 BCLK */

 PG_EINT11 */

 SYNC */

 PG_EINT12 */

 DOUT */

 PG_EINT13 */

 DIN */

 PG_EINT14 */

 TX */

 SCK */

 PG_EINT15 */

 RX */

 SDA */

 PG_EINT16 */

 RTS */

 SCK */

 PG_EINT17 */

 CTS */

 SDA */

 PG_EINT18 */

 PG_EINT19 */

 Hole */

 TX */

 SCK */

 PH_EINT0 */

 RX */

 SDA */

 PH_EINT1 */

 TX */

 MCLK */

 SCK */

 PH_EINT2 */

 RX */

 SDA */

 PH_EINT3 */

 OUT */

 SCK */

 PH_EINT4 */

 TX */

 MCLK */

 CS0 */

 SDA */

 PH_EINT5 */

 RX */

 BCLK */

 CLK */

 SCK */

 PH_EINT6 */

 RTS */

 SYNC */

 MOSI */

 SDA */

 PH_EINT7 */

 CTS */

 DO0 */

 MISO */

 DI1 */

 PH_EINT8 */

 DI0 */

 CS1 */

 DO1 */

 PH_EINT9 */

 PH_EINT10 */

 Hole */

 ERXD3 */

 CLK */

 MCLK */

 HSCL */

 PI_EINT0 */

 ERXD2 */

 DATA0 */

 BCLK */

 HSDA */

 PI_EINT1 */

 ERXD1 */

 DATA1 */

 SYNC */

 HCEC */

 PI_EINT2 */

 ERXD0 */

 DATA2 */

 DO0 */

 DI1 */

 PI_EINT3 */

 ERXCK */

 DATA3 */

 DI0 */

 DO1 */

 PI_EINT4 */

 ERXCTL */

 TX */

 CLK */

 SCK */

 PI_EINT5 */

 ENULL */

 RX */

 ERR */

 SDA */

 PI_EINT6 */

 ETXD3 */

 RTS */

 SYNC */

 SCK */

 PI_EINT7 */

 ETXD2 */

 CTS */

 DVLD */

 SDA */

 PI_EINT8 */

 ETXD1 */

 TX */

 D0 */

 SCK */

 PI_EINT9 */

 ETXD0 */

 RX */

 D1 */

 SDA */

 PI_EINT10 */

 ETXCK */

 RTS */

 D2 */

 PI_EINT11 */

 ETXCTL */

 CTS */

 D3 */

 PI_EINT12 */

 ECLKIN */

 TX */

 D4 */

 PI_EINT13 */

 MDC */

 RX */

 D5 */

 PI_EINT14 */

 MDIO */

 RTS */

 D6 */

 CLK_FANOUT0 */

 PI_EINT15 */

 EPHY_CLK */

 CTS */

 D7 */

 CLK_FANOUT1 */

 PI_EINT16 */

/*

 * Allwinner H3 SoCs pinctrl driver.

 *

 * Copyright (C) 2015 Jens Kuske <jenskuske@gmail.com>

 *

 * Based on pinctrl-sun8i-a23.c, which is:

 * Copyright (C) 2014 Chen-Yu Tsai <wens@csie.org>

 * Copyright (C) 2014 Maxime Ripard <maxime.ripard@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 TX */

 MS */

 PA_EINT0 */

 RX */

 CK */

 PA_EINT1 */

 RTS */

 DO */

 PA_EINT2 */

 CTS */

 DI */

 PA_EINT3 */

 TX */

 PA_EINT4 */

 RX */

 PA_EINT5 */

 PWREN */

 PA_EINT6 */

 CLK */

 PA_EINT7 */

 DATA */

 PA_EINT8 */

 RST */

 PA_EINT9 */

 DET */

 PA_EINT10 */

 SCK */

 TX */

 PA_EINT11 */

 SDA */

 RX */

 PA_EINT12 */

 CS */

 TX */

 PA_EINT13 */

 CLK */

 RX */

 PA_EINT14 */

 MOSI */

 RTS */

 PA_EINT15 */

 MISO */

 CTS */

 PA_EINT16 */

 OUT */

 PA_EINT17 */

 SYNC */

 SCK */

 PA_EINT18 */

 CLK */

 SDA */

 PA_EINT19 */

 DOUT */

 VPPEN */

 PA_EINT20 */

 DIN */

 VPPPP */

 PA_EINT21 */

 Hole */

 WE */

 MOSI */

 ALE */

 MISO */

 CLE */

 CLK */

 CE1 */

 CS */

 CE0 */

 RE */

 CLK */

 RB0 */

 CMD */

 RB1 */

 DQ0 */

 D0 */

 DQ1 */

 D1 */

 DQ2 */

 D2 */

 DQ3 */

 D3 */

 DQ4 */

 D4 */

 DQ5 */

 D5 */

 DQ6 */

 D6 */

 DQ7 */

 D7 */

 DQS */

 RST */

 Hole */

 RXD3 */

 RXD2 */

 RXD1 */

 RXD0 */

 RXCK */

 RXCTL/RXDV */

 RXERR */

 TXD3 */

 TXD2 */

 TXD1 */

 TXD0 */

 CRS */

 TXCK */

 TXCTL/TXEN */

 TXERR */

 CLKIN/COL */

 MDC */

 MDIO */

 Hole */

 PCLK */

 CLK */

 MCLK */

 ERR */

 HSYNC */

 SYNC */

 VSYNC */

 DVLD */

 D0 */

 D0 */

 D1 */

 D1 */

 D2 */

 D2 */

 D3 */

 D3 */

 D4 */

 D4 */

 D5 */

 D5 */

 D6 */

 D6 */

 D7 */

 D7 */

 SCK */

 SCK */

 SDA */

 SDA */

 Hole */

 D1 */

 MS */

 D0 */

 DI */

 CLK */

 TX */

 CMD */

 DO */

 D3 */

 RX */

 D2 */

 CK */

 Hole */

 CLK */

 PG_EINT0 */

 CMD */

 PG_EINT1 */

 D0 */

 PG_EINT2 */

 D1 */

 PG_EINT3 */

 D2 */

 PG_EINT4 */

 D3 */

 PG_EINT5 */

 TX */

 PG_EINT6 */

 RX */

 PG_EINT7 */

 RTS */

 PG_EINT8 */

 CTS */

 PG_EINT9 */

 SYNC */

 PG_EINT10 */

 CLK */

 PG_EINT11 */

 DOUT */

 PG_EINT12 */

 DIN */

 PG_EINT13 */

/*

 * Allwinner A31 SoCs pinctrl driver.

 *

 * Copyright (C) 2014 Maxime Ripard

 *

 * Maxime Ripard <maxime.ripard@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 TXD0 */

 D0 */

 DTR */

 PA_EINT0 */

 TXD1 */

 D1 */

 DSR */

 PA_EINT1 */

 TXD2 */

 D2 */

 DCD */

 PA_EINT2 */

 TXD3 */

 D3 */

 RING */

 PA_EINT3 */

 TXD4 */

 D4 */

 TX */

 PA_EINT4 */

 TXD5 */

 D5 */

 RX */

 PA_EINT5 */

 TXD6 */

 D6 */

 RTS */

 PA_EINT6 */

 TXD7 */

 D7 */

 CTS */

 PA_EINT7 */

 TXCLK */

 D8 */

 PA_EINT8 */

 TXEN */

 D9 */

 CMD */

 CMD */

 PA_EINT9 */

 GTXCLK */

 D10 */

 CLK */

 CLK */

 PA_EINT10 */

 RXD0 */

 D11 */

 D0 */

 D0 */

 PA_EINT11 */

 RXD1 */

 D12 */

 D1 */

 D1 */

 PA_EINT12 */

 RXD2 */

 D13 */

 D2 */

 D2 */

 PA_EINT13 */

 RXD3 */

 D14 */

 D3 */

 D3 */

 PA_EINT14 */

 RXD4 */

 D15 */

 PA_EINT15 */

 RXD5 */

 D16 */

 CLK */

 PA_EINT16 */

 RXD6 */

 D17 */

 DIN */

 PA_EINT17 */

 RXD7 */

 D18 */

 PA_EINT18 */

 RXDV */

 D19 */

 Positive */

 PA_EINT19 */

 RXCLK */

 D20 */

 Negative */

 PA_EINT20 */

 TXERR */

 D21 */

 CS0 */

 PA_EINT21 */

 RXERR */

 D22 */

 CLK */

 PA_EINT22 */

 COL */

 D23 */

 MOSI */

 PA_EINT23 */

 CRS */

 CLK */

 MISO */

 PA_EINT24 */

 CLKIN */

 DE */

 CS1 */

 PA_EINT25 */

 MDC */

 HSYNC */

 PA_EINT26 */

 MDIO */

 VSYNC */

 PA_EINT27 */

 Hole */

 MCLK */

 CTS */

 MCLK1 */

 PB_EINT0 */

 BCLK */

 PB_EINT1 */

 LRCK */

 PB_EINT2 */

 DO0 */

 PB_EINT3 */

 DO1 */

 RTS */

 PB_EINT4 */

 DO2 */

 TX */

 SCK */

 PB_EINT5 */

 DO3 */

 RX */

 SDA */

 PB_EINT6 */

 DI */

 PB_EINT7 */

 Hole */

 WE */

 MOSI */

 ALE */

 MISO */

 CLE */

 CLK */

 CE1 */

 CE0 */

 RE */

 RB0 */

 CMD */

 CMD */

 RB1 */

 CLK */

 CLK */

 DQ0 */

 D0 */

 D0 */

 DQ1 */

 D1 */

 D1 */

 DQ2 */

 D2 */

 D2 */

 DQ3 */

 D3 */

 D3 */

 DQ4 */

 D4 */

 D4 */

 DQ5 */

 D5 */

 D5 */

 DQ6 */

 D6 */

 D6 */

 DQ7 */

 D7 */

 D7 */

 Hole in pin numbering for A31s */

 DQ8 */

 DQ0 */

 DQ9 */

 DQ1 */

 DQ10 */

 DQ2 */

 DQ11 */

 DQ3 */

 DQ12 */

 DQ4 */

 DQ13 */

 DQ5 */

 DQ14 */

 DQ6 */

 DQ15 */

 DQ7 */

 DQS */

 RST */

 RST */

 CE2 */

 CE3 */

 CS0 */

 Hole */

 D0 */

 VP0 */

 D1 */

 VN0 */

 D2 */

 VP1 */

 D3 */

 VN1 */

 D4 */

 VP2 */

 D5 */

 VN2 */

 D6 */

 VPC */

 D7 */

 VNC */

 D8 */

 VP3 */

 D9 */

 VN3 */

 D10 */

 VP0 */

 D11 */

 VN0 */

 D12 */

 VP1 */

 D13 */

 VN1 */

 D14 */

 VP2 */

 D15 */

 VN2 */

 D16 */

 VPC */

 D17 */

 VNC */

 D18 */

 VP3 */

 D19 */

 VN3 */

 D20 */

 D21 */

 D22 */

 D23 */

 CLK */

 DE */

 HSYNC */

 VSYNC */

 Hole */

 PCLK */

 CLK */

 PE_EINT0 */

 MCLK */

 ERR */

 PE_EINT1 */

 HSYNC */

 SYNC */

 PE_EINT2 */

 VSYNC */

 DVLD */

 PE_EINT3 */

 D0 */

 TX */

 PE_EINT4 */

 D1 */

 RX */

 PE_EINT5 */

 D2 */

 RTS */

 PE_EINT6 */

 D3 */

 CTS */

 PE_EINT7 */

 D4 */

 D0 */

 PE_EINT8 */

 D5 */

 D1 */

 PE_EINT9 */

 D6 */

 D2 */

 PE_EINT10 */

 D7 */

 D3 */

 PE_EINT11 */

 D8 */

 D4 */

 PE_EINT12 */

 D9 */

 D5 */

 PE_EINT13 */

 D10 */

 D6 */

 PE_EINT14 */

 D11 */

 D7 */

 PE_EINT15 */

 MIPI CSI MCLK */

 PE_EINT16 */

 Hole */

 D1 */

 MS1 */

 D0 */

 DI1 */

 CLK */

 TX */

 CMD */

 DO1 */

 D3 */

 RX */

 D2 */

 CK1 */

 Hole */

 CLK */

 PG_EINT0 */

 CMD */

 PG_EINT1 */

 D0 */

 PG_EINT2 */

 D1 */

 PG_EINT3 */

 D2 */

 PG_EINT4 */

 D3 */

 PG_EINT5 */

 TX */

 PG_EINT6 */

 RX */

 PG_EINT7 */

 RTS */

 PG_EINT8 */

 CTS */

 PG_EINT9 */

 SCK */

 DP3 */

 PG_EINT10 */

 SDA */

 DM3 */

 PG_EINT11 */

 CS1 */

 MCLK */

 PG_EINT12 */

 CS0 */

 BCLK */

 PG_EINT13 */

 CLK */

 LRCK */

 PG_EINT14 */

 MOSI */

 DIN */

 PG_EINT15 */

 MISO */

 DOUT */

 PG_EINT16 */

 TX */

 PG_EINT17 */

 RX */

 PG_EINT18 */

 Hole; H starts at pin 9 for A31s */

 WE */

 ALE */

 CLE */

 CE1 */

 CE0 */

 RE */

 RB0 */

 RB1 */

 DQS */

 CS0 */

 MS0 */

 Positive */

 CLK */

 CK0 */

 Negative */

 MOSI */

 DO0 */

 Positive */

 MISO */

 DI0 */

 Negative */

 SCK */

 SDA */

 SCK */

 SDA */

 SCK */

 SDA */

 TX */

 RX */

		/*

		 * The SPDIF block is not referenced at all in the A31 user

		 * manual. However it is described in the code leaked and the

		 * configuration files supplied by vendors.

 SPDIF IN */

 Undocumented mux function - see above */

 SPDIF OUT */

 2 extra pins for A31 */

 CE2 */

 CE3 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Allwinner H6 SoC pinctrl driver.

 *

 * Copyright (C) 2017 Icenowy Zheng <icenowy@aosc.io>

 ERXD1 */

 ERXD0 */

 ECRS_DV */

 ERXERR */

 ETXD1 */

 ETXD0 */

 ETXCK */

 ETXEN */

 EMDC */

 EMDIO */

 Hole */

 CLK */

 DE */

 HSYNC */

 VSYNC */

 DO0 */

 DO1 */

 DO2 */

 DO3 */

 DO4 */

 DO5 */

 DO6 */

 DO7 */

 SYNC */

 SYNC */

 CLK */

 CLK */

 DOUT */

 DOUT */

 DIN */

 DIN */

 MCLK */

 MCLK */

 SCK */

 SDA */

 Hole */

 WE */

 CLK */

 ALE */

 DS */

 CLE */

 MOSI */

 CE0 */

 MISO */

 RE */

 CLK */

 RB0 */

 CMD */

 CS */

 DQ0 */

 D0 */

 HOLD */

 DQ1 */

 D1 */

 WP */

 DQ2 */

 D2 */

 DQ3 */

 D3 */

 DQ4 */

 D4 */

 DQ5 */

 D5 */

 DQ6 */

 D6 */

 DQ7 */

 D7 */

 DQS */

 RST */

 CE1 */

 RB1 */

 Hole */

 D2 */

 CLK */

 PCLK */

 ERXD3 */

 D3 */

 ERR */

 MCLK */

 ERXD2 */

 D4 */

 SYNC */

 HSYNC */

 ERXD1 */

 D5 */

 DVLD */

 VSYNC */

 ERXD0 */

 D6 */

 D0 */

 D0 */

 ERXCK */

 D7 */

 D1 */

 D1 */

 ERXCTL */

 D10 */

 D2 */

 D2 */

 ENULL */

 D11 */

 D3 */

 D3 */

 ETXD3 */

 D12 */

 D4 */

 D4 */

 ETXD2 */

 D13 */

 D5 */

 D5 */

 ETXD1 */

 D14 */

 D6 */

 D6 */

 ETXD0 */

 D15 */

 D7 */

 D7 */

 ETXCK */

 D18 */

 CLK */

 SCK */

 ETXCTL */

 D19 */

 ERR */

 SDA */

 ECLKIN */

 D20 */

 SYNC */

 CLK */

 D8 */

 D21 */

 DVLD */

 DATA0 */

 D9 */

 D22 */

 D0 */

 DATA1 */

 D23 */

 CLK */

 DATA2 */

 CLK */

 ERR */

 DATA3 */

 DE */

 SYNC */

 TX */

 EMDC */

 HSYNC */

 DVLD */

 RX */

 EMDIO */

 VSYNC */

 D0 */

 RTS */

 PWM0 */

 CLK */

 CTS */

 SCK */

 ERR */

 TX */

 MS */

 SDA */

 SYNC */

 RX */

 CK */

 SCK */

 DVLD */

 RTS */

 DO */

 SDA */

 D0 */

 CTS */

 DI */

 Hole */

 D1 */

 MS */

 PF_EINT0 */

 D0 */

 DI */

 PF_EINT1 */

 CLK */

 TX */

 PF_EINT2 */

 CMD */

 DO */

 PF_EINT3 */

 D3 */

 RX */

 PF_EINT4 */

 D2 */

 CK */

 PF_EINT5 */

 PF_EINT6 */

 Hole */

 CLK */

 PG_EINT0 */

 CMD */

 PG_EINT1 */

 D0 */

 PG_EINT2 */

 D1 */

 PG_EINT3 */

 D2 */

 PG_EINT4 */

 D3 */

 PG_EINT5 */

 TX */

 PG_EINT6 */

 RX */

 PG_EINT7 */

 RTS */

 VPPEN */

 PG_EINT8 */

 CTS */

 VPPPP */

 PG_EINT9 */

 SYNC */

 SYNC */

 PWREN */

 PG_EINT10 */

 CLK */

 CLK */

 CLK */

 PG_EINT11 */

 DOUT */

 DOUT */

 DATA */

 PG_EINT12 */

 DIN */

 DIN */

 RST */

 PG_EINT13 */

 MCLK */

 MCLK */

 DET */

 PG_EINT14 */

 Hole */

 TX */

 SYNC */

 SYNC */

 VPPEN */

 PH_EINT0 */

 RX */

 CLK */

 CLK */

 VPPPP */

 PH_EINT1 */

 DOUT */

 DOUT */

 PWREN */

 PH_EINT2 */

 CS */

 DIN */

 DIN */

 CLK */

 PH_EINT3 */

 CLK */

 MCLK */

 MCLK */

 DATA */

 PH_EINT4 */

 MOSI */

 MCLK */

 SCK */

 RST */

 PH_EINT5 */

 MISO */

 IN */

 SDA */

 DET */

 PH_EINT6 */

 OUT */

 PH_EINT7 */

 HSCL */

 PH_EINT8 */

 HSDA */

 PH_EINT9 */

 HCEC */

 PH_EINT10 */

/*

 * Allwinner new F-series F1C100s SoC (suniv) pinctrl driver.

 *

 * Copyright (C) 2018 Icenowy Zheng

 *

 * Icenowy Zheng <icenowy@aosc.io>

 *

 * Copyright (C) 2014 Jackie Hwang

 *

 * Jackie Hwang <huangshr@allwinnertech.com>

 *

 * Copyright (C) 2014 Chen-Yu Tsai

 *

 * Chen-Yu Tsai <wens@csie.org>

 *

 * Copyright (C) 2014 Maxime Ripard

 *

 * Maxime Ripard <maxime.ripard@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 X1 */

 BCLK */

 RTS */

 CS */

 X2 */

 LRCK */

 CTS */

 MOSI */

 Y1 */

 PWM0 */

 IN */

 RX */

 MOSI */

 Y2 */

 RX */

 OUT */

 TX */

 MISO */

 Hole */

 DQS0 */

 SCK */

 BCLK */

 RTS */

 CS */

 DQS1 */

 SDA */

 LRCK */

 CTS */

 MOSI */

 CKE */

 PWM0 */

 IN */

 RX */

 CLK */

 DDR_REF_D */

 RX */

 OUT */

 TX */

 MISO */

 Hole */

 CLK */

 CLK */

 CS */

 CMD */

 MISO */

 D0 */

 MOSI */

 TX */

 Hole */

 D2 */

 SDA */

 SDA */

 D3 */

 RTS */

 D4*/

 CTS */

 D5 */

 RX */

 D6 */

 TX */

 D7 */

 SCK */

 D10 */

 SDA */

 D11 */

 MCLK */

 D12 */

 BCLK */

 D13 */

 LRCK */

 D14 */

 IN */

 D15 */

 OUT */

 D18 */

 SCK */

 SCK */

 D19 */

 TX */

 D20 */

 RX */

 D21 */

 RTS */

 SCK */

 D22 */

 CTS */

 SDA */

 D23 */

 OUT */

 CLK */

 CS */

 DE */

 MOSI */

 HYSNC */

 CLK */

 VSYNC */

 MISO */

 Hole */

 HSYNC */

 D0 */

 SCK */

 RX */

 VSYNC */

 D1 */

 SDA */

 TX */

 PCLK */

 D8 */

 OUT */

 D0 */

 D9 */

 BCLK */

 SCK */

 D1 */

 D16 */

 LRCK */

 SDA */

 D2 */

 D17 */

 IN */

 D3 */

 PWM1 */

 OUT */

 OUT */

 D4 */

 TX */

 CS */

 D5 */

 RX */

 MOSI */

 D6 */

 RTS */

 CLK */

 D7 */

 CTS */

 MISO */

 OUT */

 SCK */

 RX */

 MCLK */

 SDA */

 PWM0 */

 Hole */

 D1 */

 MS */

 MS */

 D0 */

 DI */

 CLK */

 TX */

 CMD */

 DO */

 D3 */

 TX */

 D2 */

 CK */

 PWM1 */

/*

 * Allwinner A1X SoCs pinctrl driver.

 *

 * Copyright (C) 2012 Maxime Ripard

 *

 * Maxime Ripard <maxime.ripard@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 Try the new style binding */

 And fall back to the old binding */

 Try the new style binding */

 We can't go below 10mA ... */

 ... and only up to 40 mA ... */

 by steps of 10 mA */

 And then fall back to the old binding */

 Try the generic binding */

 And fall back to our legacy one */

 Try the generic binding */

 And fall back to our legacy one */

	/*

	 * If we don't have any configuration, bail out

 hardware uses weak pull resistors */

	/*

	 * We have two maps for each pin: one for the function, one

	 * for the configuration (bias, strength, etc).

	 *

	 * We might be slightly overshooting, since we might not have

	 * any configuration.

	/*

	 * We know have the number of maps we need, we can resize our

	 * map array

 pin config is never in the first map */

		/*

		 * All the maps share the same pin config,

		 * free only the first one we find.

 hardware is weak pull-up */

 hardware is weak pull-down */

 sunxi_pconf_reg should catch anything unsupported */

 We only support 1 pin per group. Chain it to the pin callback */

			/*

			 * We convert from mA to what the register expects:

			 *   0: 10mA

			 *   1: 20mA

			 *   2: 30mA

			 *   3: 40mA

 sunxi_pconf_reg should catch anything unsupported */

 for each config */

 We only support 1 pin per group. Chain it to the pin callback */

 Might be dummy regulator with no voltage set */

		/*

		 * Configured value must be equal or greater to actual

		 * voltage.

 1.8V */

 2.5V */

 2.8V */

 3.0V */

 3.3V */

 Change muxing to INT mode */

 Clear the IRQ */

 Mask the IRQ */

 Unmask the IRQ */

	/* Define irq_enable / disable to avoid spurious irqs for drivers

 function already there */

	/*

	 * Allocate groups

	 *

	 * We assume that the number of groups is the number of pins

	 * given in the data array.



	 * This will not always be true, since some pins might not be

	 * available in the current variant, but fortunately for us,

	 * this means that the number of pins is the maximum group

	 * number we will ever see.

 And now we count the actual number of pins / groups */

	/*

	 * Find an upper bound for the maximum number of functions: in

	 * the worst case we have gpio_in, gpio_out, irq and up to four

	 * special functions per pin, plus one entry for the sentinel.

	 * We'll reallocate that later anyway.

 Count functions and their associated groups */

 Create interrupt mapping while we're at it */

 And now allocated and fill the array for real */

 Deal with old DTs that didn't have the oscillators */

 If we don't have any setup, bail out */

 Mask and clear all IRQs before registering a handler */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2020 Yangtao Li <frank@allwinnertech.com>

 *

 * Based on:

 * huangshuosheng <huangshuosheng@allwinnertech.com>

 SCK */

 SDA */

 TX */

 RX */

 MS */

 CK */

 DO */

 DI */

 SCK */

 SDA */

 IN */

/*

 * Allwinner H3 SoCs pinctrl driver.

 *

 * Copyright (C) 2016 Krzysztof Adamski <k@japko.eu>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 SCK */

 PL_EINT0 */

 SDA */

 PL_EINT1 */

 TX */

 PL_EINT2 */

 RX */

 PL_EINT3 */

 MS */

 PL_EINT4 */

 CK */

 PL_EINT5 */

 DO */

 PL_EINT6 */

 DI */

 PL_EINT7 */

 PL_EINT8 */

 PL_EINT9 */

 PL_EINT10 */

 PL_EINT11 */

/*

 * Allwinner A80 SoCs pinctrl driver.

 *

 * Copyright (C) 2014 Maxime Ripard

 *

 * Maxime Ripard <maxime.ripard@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 RXD3 */

 TX */

 PA_EINT0 */

 RXD2 */

 RX */

 PA_EINT1 */

 RXD1 */

 RTS */

 PA_EINT2 */

 RXD0 */

 CTS */

 PA_EINT3 */

 RXCK */

 DTR */

 PA_EINT4 */

 RXCTL */

 DSR */

 PA_EINT5 */

 RXERR */

 DCD */

 PA_EINT6 */

 TXD3 */

 RING */

 PA_EINT7 */

 TXD2 */

 IN0 */

 PA_EINT8 */

 TXEN */

 IN1 */

 PA_EINT9 */

 TXD0 */

 PA_EINT10 */

 MII-CRS */

 PA_EINT11 */

 TXCK */

 PWM_P */

 PA_EINT12 */

 RGMII-TXCK / GMII-TXEN */

 PWM_N */

 PA_EINT13 */

 MII-TXERR */

 CS0 */

 PA_EINT14 */

 RGMII-CLKIN / MII-COL */

 CLK */

 PA_EINT15 */

 EMDC */

 MOSI */

 PA_EINT16 */

 EMDIO */

 MISO */

 PA_EINT17 */

 Hole */

 TX */

 PB_EINT5 */

 RX */

 PB_EINT6 */

 Hole */

 MCLK */

 PB_EINT14 */

 SCK */

 SCK */

 PB_EINT15 */

 SDA */

 SDA */

 PB_EINT16 */

 Hole */

 WE */

 MOSI */

 ALE */

 MISO */

 CLE */

 CLK */

 CE1 */

 CE0 */

 RE */

 RB0 */

 CMD */

 RB1 */

 CLK */

 DQ0 */

 D0 */

 DQ1 */

 D1 */

 DQ2 */

 D2 */

 DQ3 */

 D3 */

 DQ4 */

 D4 */

 DQ5 */

 D5 */

 DQ6 */

 D6 */

 DQ7 */

 D7 */

 DQS */

 RST */

 CE2 */

 RE */

 CE3 */

 DQS */

 CS0 */

 Hole */

 D0 */

 VP0 */

 D1 */

 VN0 */

 D2 */

 VP1 */

 D3 */

 VN1 */

 D4 */

 VP2 */

 D5 */

 VN2 */

 D6 */

 VPC */

 D7 */

 VNC */

 D8 */

 VP3 */

 D9 */

 VN3 */

 D10 */

 VP0 */

 D11 */

 VN0 */

 D12 */

 VP1 */

 D13 */

 VN1 */

 D14 */

 VP2 */

 D15 */

 VN2 */

 D16 */

 VPC */

 D17 */

 VNC */

 D18 */

 VP3 */

 D19 */

 VN3 */

 D20 */

 D21 */

 D22 */

 D23 */

 CLK */

 DE */

 HSYNC */

 VSYNC */

 Hole */

 PCLK */

 CLK */

 PE_EINT0 */

 MCLK */

 ERR */

 PE_EINT1 */

 HSYNC */

 SYNC */

 PE_EINT2 */

 VSYNC */

 DVLD */

 PE_EINT3 */

 D0 */

 CS0 */

 TX */

 PE_EINT4 */

 D1 */

 CLK */

 RX */

 PE_EINT5 */

 D2 */

 MOSI */

 RTS */

 PE_EINT6 */

 D3 */

 MISO */

 CTS */

 PE_EINT7 */

 D4 */

 D0 */

 PE_EINT8 */

 D5 */

 D1 */

 PE_EINT9 */

 D6 */

 D2 */

 PE_EINT10 */

 D7 */

 D3 */

 PE_EINT11 */

 D8 */

 D4 */

 PE_EINT12 */

 D9 */

 D5 */

 PE_EINT13 */

 D10 */

 D6 */

 PE_EINT14 */

 D11 */

 D7 */

 PE_EINT15 */

 SCK */

 SCK */

 PE_EINT16 */

 SDA */

 SDA */

 PE_EINT17 */

 Hole */

 D1 */

 D0 */

 CLK */

 TX */

 CMD */

 D3 */

 RX */

 D2 */

 Hole */

 CLK */

 PG_EINT0 */

 CMD */

 PG_EINT1 */

 D0 */

 PG_EINT2 */

 D1 */

 PG_EINT3 */

 D2 */

 PG_EINT4 */

 D3 */

 PG_EINT5 */

 TX */

 PG_EINT6 */

 RX */

 PG_EINT7 */

 RTS */

 PG_EINT8 */

 CTS */

 PG_EINT9 */

 SCK */

 PG_EINT10 */

 SDA */

 PG_EINT11 */

 TX */

 PG_EINT12 */

 RX */

 PG_EINT13 */

 RTS */

 PG_EINT14 */

 CTS */

 PG_EINT15 */

 Hole */

 SCK */

 SDA */

 SCK */

 SDA */

 SCK */

 SDA */

 Hole */

 Positive */

 PH_EINT8 */

 Negative */

 PH_EINT9 */

 Positive */

 PH_EINT10 */

 Negative */

 PH_EINT12 */

 TX */

 CS2 */

 PH_EINT12 */

 RX */

 CS2 */

 PH_EINT13 */

 CLK */

 PH_EINT14 */

 MOSI */

 PH_EINT15 */

 MISO */

 PH_EINT16 */

 CS0 */

 PH_EINT17 */

 CS1 */

 PH_EINT18 */

 SCL */

 SDA */

 CEC */

/*

 * Allwinner A83T SoCs special pins pinctrl driver.

 *

 * Copyright (C) 2017 Chen-Yu Tsai

 * Chen-Yu Tsai <wens@csie.org>

 *

 * Based on pinctrl-sun50i-a64-r.c

 *

 * Copyright (C) 2016 Icenowy Zheng

 * Icenowy Zheng <icenowy@aosc.xyz>

 *

 * Copyright (C) 2014 Chen-Yu Tsai

 * Chen-Yu Tsai <wens@csie.org>

 *

 * Copyright (C) 2014 Boris Brezillon

 * Boris Brezillon <boris.brezillon@free-electrons.com>

 *

 * Copyright (C) 2014 Maxime Ripard

 * Maxime Ripard <maxime.ripard@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 SCK */

 SCK */

 PL_EINT0 */

 SDA */

 SDA */

 PL_EINT1 */

 TX */

 PL_EINT2 */

 RX */

 PL_EINT3 */

 MS */

 PL_EINT4 */

 CK */

 PL_EINT5 */

 DO */

 PL_EINT6 */

 DI */

 PL_EINT7 */

 SCK */

 PL_EINT8 */

 SDA */

 PL_EINT9 */

 PL_EINT10 */

 PL_EINT11 */

 PL_EINT12 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2020 Yangtao Li <frank@allwinnertech.com>

 *

 * Based on:

 * huangshuosheng <huangshuosheng@allwinnertech.com>

 TX */

 CS */

 MS */

 RX */

 CLK */

 CK */

 RTS */

 MOSI */

 DO */

 CTS */

 MISO */

 DI */

 SCK */

 MCLK */

 MS_GPU */

 SDA */

 BCLK */

 CK_GPU */

 LRCK */

 DO_GPU */

 DIN */

 DOUT0 */

 DIN1 */

 DOUT */

 DIN0 */

 DOUT1 */

 TX */

 SCK */

 DI_GPU */

 RX */

 SDA */

 HOLE */

 WE */

 DS */

 ALE */

 RST */

 CLE */

 MOSI */

 CE1 */

 CS0 */

 CE0 */

 MISO */

 RE */

 CLK */

 RB0 */

 CMD */

 RB1 */

 CS1 */

 DQ7 */

 D3 */

 DQ6 */

 D4 */

 DQ5 */

 D0 */

 DQ4 */

 D5 */

 DQS */

 CLK */

 DQ3 */

 D1 */

 DQ2 */

 D6 */

 DQ1 */

 D2 */

 WP */

 DQ0 */

 D7 */

 HOLD */

 HOLE */

 D2 */

 D0P */

 DP0 */

 D3 */

 D0N */

 DM0 */

 D4 */

 D1P */

 DP1 */

 D5 */

 D1N */

 DM1 */

 D6 */

 D2P */

 CKP */

 D7 */

 D2N */

 CKM */

 D10 */

 CKP */

 DP2 */

 D11 */

 CKN */

 DM2 */

 D12 */

 DP3 */

 D13 */

 DM3 */

 D14 */

 CS */

 D15 */

 CLK */

 D18 */

 MOSI */

 D19 */

 MISO */

 D20 */

 TX */

 D21 */

 RX */

 D22 */

 RTS */

 D23 */

 CTS */

 CLK */

 TX */

 DE */

 RX */

 HSYNC */

 RTS */

 VSYNC */

 CTS */

 SCK */

 SDA */

 HOLE */

 MCLK */

 SCK */

 SDA */

 SCK */

 SDA */

 MCLK */

 LOCK_DBG */

 MCLK */

 LEDC */

 RESULT0 */

 BCLK */

 SM_VS */

 RESULT1 */

 LRCK */

 TRIG */

 RESULT2 */

 DOUT0 */

 RESULT3 */

 DIN0 */

 HOLE */

 D1 */

 MS1 */

 MS_GPU */

 D0 */

 DI1 */

 DI_GPU */

 CLK */

 TX */

 CMD */

 DO */

 DO_GPU */

 D3 */

 RX */

 D2 */

 CK */

 CK_GPU */

 HOLE */

 CLK */

 CMD */

 D0 */

 D1 */

 D2 */

 D3 */

 TX */

 RX */

 RTS */

 CTS */

 MCLK */

 BCLK */

 LRCK */

 DOUT0 */

 DIN1 */

 DIN0 */

 DOUT1 */

 HOLE */

 SCK */

 RXD1 */

 SDA */

 RXD0 */

 SCK */

 RXCTL */

 SDA */

 OUT */

 CLKIN */

 TX */

 CS */

 TXD1 */

 RX */

 CLK */

 TXD0 */

 RTS */

 MOSI */

 TXCK */

 CTS */

 MISO */

 OUT */

 TXCTL */

 CLK */

 CS */

 MCLK */

 DIN2 */

 DATA0 */

 CLK */

 BCLK */

 MDC */

 DATA1 */

 MOSI */

 LRCK */

 MDIO */

 DATA2 */

 MISO */

 DOUT0 */

 DIN1 */

 DATA3 */

 SCK */

 DIN0 */

 DOUT1 */

 SCK */

 MCLK */

 EPHY */

 BCLK */

 RXD3 */

 LRCK */

 RXD2 */

 DOUT0 */

 DIN1 */

 RXCK */

 DOUT1 */

 DIN0 */

 TXD3 */

 OUT */

 DOUT2 */

 DIN2 */

 TXD2 */

 IN */

 DOUT3 */

 DIN3 */

/*

 * Allwinner A31 SoCs special pins pinctrl driver.

 *

 * Copyright (C) 2014 Boris Brezillon

 * Boris Brezillon <boris.brezillon@free-electrons.com>

 *

 * Copyright (C) 2014 Maxime Ripard

 * Maxime Ripard <maxime.ripard@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 SCK */

 SCK */

 SDA */

 SDA */

 TX */

 RX */

 RX */

 PL_EINT0 */

 MS */

 PL_EINT1 */

 CK */

 PL_EINT2 */

 DO */

 PL_EINT3 */

 DI */

 Hole */

 PM_EINT0 */

 PM_EINT1 */

 PM_EINT2 */

 PM_EINT3 */

 PM_EINT4 */

 PM_EINT5 */

 PM_EINT6 */

 PM_EINT7 */

 CLKO */

/*

 * Allwinner A80 SoCs special pins pinctrl driver.

 *

 * Copyright (C) 2014 Maxime Ripard

 * Maxime Ripard <maxime.ripard@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 TX */

 PL_EINT0 */

 RX */

 PL_EINT1 */

 TMS */

 PL_EINT2 */

 TCK */

 PL_EINT3 */

 TDO */

 PL_EINT4 */

 TDI */

 PL_EINT5 */

 PL_EINT6 */

 PL_EINT7 */

 SCK1 */

 PL_EINT8 */

 SDA1 */

 PL_EINT9 */

 Hole */

 PM_EINT0 */

 PM_EINT1 */

 PM_EINT2 */

 PM_EINT3 */

 LRCKR */

 PM_EINT4 */

 Hole */

 SCK */

 PM_EINT8 */

 SDA */

 PM_EINT9 */

 MCLK */

 MCLK */

 BCLK */

 BCLK */

 LRCK */

 LRCK */

 DIN */

 DIN */

 DOUT */

 DOUT */

 PM_EINT15 */

 Hole */

 SCK */

 SCK */

 SDA */

 SDA */

/*

 * Allwinner H5 SoC pinctrl driver.

 *

 * Copyright (C) 2016 Icenowy Zheng <icenowy@aosc.xyz>

 *

 * Based on pinctrl-sun8i-h3.c, which is:

 * Copyright (C) 2015 Jens Kuske <jenskuske@gmail.com>

 *

 * Based on pinctrl-sun8i-a23.c, which is:

 * Copyright (C) 2014 Chen-Yu Tsai <wens@csie.org>

 * Copyright (C) 2014 Maxime Ripard <maxime.ripard@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 TX */

 MS */

 PA_EINT0 */

 RX */

 CK */

 PA_EINT1 */

 RTS */

 DO */

 PA_EINT2 */

 CTS */

 DI */

 PA_EINT3 */

 TX */

 PA_EINT4 */

 RX */

 PA_EINT5 */

 PWREN */

 PA_EINT6 */

 CLK */

 PA_EINT7 */

 DATA */

 PA_EINT8 */

 RST */

 PA_EINT9 */

 DET */

 PA_EINT10 */

 SCK */

 TX */

 PA_EINT11 */

 SDA */

 RX */

 PA_EINT12 */

 CS */

 TX */

 PA_EINT13 */

 CLK */

 RX */

 PA_EINT14 */

 MOSI */

 RTS */

 PA_EINT15 */

 MISO */

 CTS */

 PA_EINT16 */

 OUT */

 PA_EINT17 */

 SYNC */

 SCK */

 PA_EINT18 */

 CLK */

 SDA */

 PA_EINT19 */

 DOUT */

 VPPEN */

 PA_EINT20 */

 DIN */

 VPPPP */

 PA_EINT21 */

 Hole */

 WE */

 MOSI */

 ALE */

 MISO */

 DS */

 CLE */

 CLK */

 CE1 */

 CS */

 CE0 */

 MISO */

 RE */

 CLK */

 RB0 */

 CMD */

 RB1 */

 DQ0 */

 D0 */

 DQ1 */

 D1 */

 DQ2 */

 D2 */

 DQ3 */

 D3 */

 DQ4 */

 D4 */

 DQ5 */

 D5 */

 DQ6 */

 D6 */

 DQ7 */

 D7 */

 DQS */

 RST */

 Hole */

 RXD3 */

 TX */

 CLK */

 RXD2 */

 RX */

 ERR */

 RXD1 */

 SYNC */

 RXD0 */

 DVLD */

 RXCK */

 D0 */

 RXCTL/RXDV */

 D1 */

 RXERR */

 D2 */

 TXD3 */

 D3 */

 CLK */

 TXD2 */

 D4 */

 ERR */

 TXD1 */

 D5 */

 SYNC */

 TXD0 */

 D6 */

 DVLD */

 CRS */

 D7 */

 D0 */

 TXCK */

 PWREN */

 TXCTL/TXEN */

 CLK */

 TXERR */

 DATA */

 CLKIN/COL */

 RST */

 MDC */

 DET */

 MDIO */

 Hole */

 PCLK */

 CLK */

 MCLK */

 ERR */

 HSYNC */

 SYNC */

 VSYNC */

 DVLD */

 D0 */

 D0 */

 D1 */

 D1 */

 D2 */

 D2 */

 D3 */

 D3 */

 CLK */

 D4 */

 D4 */

 ERR */

 D5 */

 D5 */

 SYNC */

 D6 */

 D6 */

 DVLD */

 D7 */

 D7 */

 D0 */

 SCK */

 SCK */

 SDA */

 SDA */

 VPPEN */

 VPPPP */

 Hole */

 D1 */

 MS */

 PF_EINT0 */

 D0 */

 DI */

 PF_EINT1 */

 CLK */

 TX */

 PF_EINT2 */

 CMD */

 DO */

 PF_EINT3 */

 D3 */

 RX */

 PF_EINT4 */

 D2 */

 CK */

 PF_EINT5 */

 PF_EINT6 */

 Hole */

 CLK */

 PG_EINT0 */

 CMD */

 PG_EINT1 */

 D0 */

 PG_EINT2 */

 D1 */

 PG_EINT3 */

 D2 */

 PG_EINT4 */

 D3 */

 PG_EINT5 */

 TX */

 PG_EINT6 */

 RX */

 PG_EINT7 */

 RTS */

 PG_EINT8 */

 CTS */

 PG_EINT9 */

 SYNC */

 PG_EINT10 */

 CLK */

 PG_EINT11 */

 DOUT */

 PG_EINT12 */

 DIN */

 PG_EINT13 */

/*

 * Allwinner a33 SoCs pinctrl driver.

 *

 * Copyright (C) 2015 Vishnu Patekar <vishnupatekar0510@gmail.com>

 *

 * Based on pinctrl-sun8i-a23.c, which is:

 * Copyright (C) 2014 Chen-Yu Tsai <wens@csie.org>

 * Copyright (C) 2014 Maxime Ripard <maxime.ripard@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 Hole */

 TX */

 TX */

 PB_EINT0 */

 RX */

 RX */

 PB_EINT1 */

 RTS */

 PB_EINT2 */

 CTS */

 PB_EINT3 */

 SYNC */

 SYNC */

 PB_EINT4 */

 BCLK */

 BCLK */

 PB_EINT5 */

 DOUT */

 DOUT */

 PB_EINT6 */

 DIN */

 DIN */

 PB_EINT7 */

 Hole */

 WE */

 MOSI */

 ALE */

 MISO */

 CLE */

 CLK */

 CE1 */

 CS */

 CE0 */

 RE */

 CLK */

 RB0 */

 CMD */

 RB1 */

 DQ0 */

 D0 */

 DQ1 */

 D1 */

 DQ2 */

 D2 */

 DQ3 */

 D3 */

 DQ4 */

 D4 */

 DQ5 */

 D5 */

 DQ6 */

 D6 */

 DQ7 */

 D7 */

 DQS */

 RST */

 Hole */

 D2 */

 CLK */

 D3 */

 CMD */

 D4 */

 D0 */

 D5 */

 D1 */

 D6 */

 D2 */

 D7 */

 D3 */

 D10 */

 TX */

 D11 */

 RX */

 D12 */

 RTS */

 D13 */

 CTS */

 D14 */

 D15 */

 D18 */

 VP0 */

 D19 */

 VN0 */

 D20 */

 VP1 */

 D21 */

 VN1 */

 D22 */

 VP2 */

 D23 */

 VN2 */

 CLK */

 VPC */

 DE */

 VNC */

 HSYNC */

 VP3 */

 VSYNC */

 VN3 */

 Hole */

 PCLK */

 MCLK */

 HSYNC */

 VSYNC */

 D0 */

 D1 */

 D2 */

 D3 */

 D4 */

 D5 */

 D6 */

 D7 */

 SCK */

 SCK */

 SDA */

 SDA */

 Hole */

 D1 */

 MS1 */

 D0 */

 DI1 */

 CLK */

 TX */

 CMD */

 DO1 */

 D3 */

 RX */

 D2 */

 CK1 */

 Hole */

 CLK */

 PG_EINT0 */

 CMD */

 PG_EINT1 */

 D0 */

 PG_EINT2 */

 D1 */

 PG_EINT3 */

 D2 */

 PG_EINT4 */

 D3 */

 PG_EINT5 */

 TX */

 PG_EINT6 */

 RX */

 PG_EINT7 */

 RTS */

 PG_EINT8 */

 CTS */

 PG_EINT9 */

 SYNC */

 PG_EINT10 */

 CLK */

 PG_EINT11 */

 DOUT */

 PG_EINT12 */

 DIN */

 PG_EINT13 */

 Hole */

 SCK */

 SDA */

 SCK */

 SDA */

 CS */

 TX */

 CLK */

 RX */

 DOUT */

 RTS */

 DIN */

 CTS */

/*

 * Allwinner A23 SoCs pinctrl driver.

 *

 * Copyright (C) 2014 Chen-Yu Tsai

 *

 * Chen-Yu Tsai <wens@csie.org>

 *

 * Copyright (C) 2014 Maxime Ripard

 *

 * Maxime Ripard <maxime.ripard@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 CS */

 MS0 */

 PA_EINT0 */

 CLK */

 CKO */

 PA_EINT1 */

 MOSI */

 DOO */

 PA_EINT2 */

 MISO */

 DIO */

 PA_EINT3 */

 TX */

 PA_EINT4 */

 RX */

 PA_EINT5 */

 RTS */

 PA_EINT6 */

 CTS */

 PA_EINT7 */

 Hole */

 TX */

 PB_EINT0 */

 RX */

 PB_EINT1 */

 RTS */

 PB_EINT2 */

 CTS */

 PB_EINT3 */

 SYNC */

 PB_EINT4 */

 DOUT */

 PB_EINT5 */

 DIN */

 PB_EINT6 */

 DI */

 PB_EINT7 */

 Hole */

 WE */

 MOSI */

 ALE */

 MISO */

 CLE */

 CLK */

 CE1 */

 CS */

 CE0 */

 RE */

 CLK */

 RB0 */

 CMD */

 RB1 */

 DQ0 */

 D0 */

 DQ1 */

 D1 */

 DQ2 */

 D2 */

 DQ3 */

 D3 */

 DQ4 */

 D4 */

 DQ5 */

 D5 */

 DQ6 */

 D6 */

 DQ7 */

 D7 */

 DQS */

 RST */

 CE2 */

 CE3 */

 Hole */

 D0 */

 D1 */

 D2 */

 CLK */

 D3 */

 CMD */

 D4 */

 D0 */

 D5 */

 D1 */

 D6 */

 D2 */

 D7 */

 D3 */

 D8 */

 TX */

 D9 */

 RX */

 D10 */

 TX */

 D11 */

 RX */

 D12 */

 RTS */

 D13 */

 CTS */

 D14 */

 SYNC */

 D15 */

 CLK */

 D16 */

 DOUT */

 D17 */

 DIN */

 D18 */

 VN0 */

 D19 */

 VP0 */

 D20 */

 VP1 */

 D21 */

 VN1 */

 D22 */

 VP2 */

 D23 */

 VN2 */

 CLK */

 VPC */

 DE */

 VNC */

 HSYNC */

 VP3 */

 VSYNC */

 VN3 */

 Hole */

 PCLK */

 MCLK */

 HSYNC */

 VSYNC */

 D0 */

 D1 */

 D2 */

 D3 */

 D4 */

 D5 */

 D6 */

 D7 */

 SCK */

 SCK */

 SDA */

 SDA */

 Hole */

 D1 */

 MS1 */

 D0 */

 DI1 */

 CLK */

 TX */

 CMD */

 DO1 */

 D3 */

 RX */

 D2 */

 CK1 */

 Hole */

 CLK */

 PG_EINT0 */

 CMD */

 PG_EINT1 */

 D0 */

 PG_EINT2 */

 D1 */

 PG_EINT3 */

 D2 */

 PG_EINT4 */

 D3 */

 PG_EINT5 */

 TX */

 PG_EINT6 */

 RX */

 PG_EINT7 */

 RTS */

 PG_EINT8 */

 CTS */

 PG_EINT9 */

 SYNC */

 PG_EINT10 */

 CLK */

 PG_EINT11 */

 DOUT */

 PG_EINT12 */

 DIN */

 PG_EINT13 */

 Hole */

 SCK */

 SDA */

 SCK */

 SDA */

 CS */

 TX */

 CLK */

 RX */

 DOUT */

 RTS */

 DIN */

 CTS */

/*

 * Allwinner A64 SoCs special pins pinctrl driver.

 *

 * Based on pinctrl-sun8i-a23-r.c

 *

 * Copyright (C) 2016 Icenowy Zheng

 * Icenowy Zheng <icenowy@aosc.xyz>

 *

 * Copyright (C) 2014 Chen-Yu Tsai

 * Chen-Yu Tsai <wens@csie.org>

 *

 * Copyright (C) 2014 Boris Brezillon

 * Boris Brezillon <boris.brezillon@free-electrons.com>

 *

 * Copyright (C) 2014 Maxime Ripard

 * Maxime Ripard <maxime.ripard@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 SCK */

 SCK */

 PL_EINT0 */

 SDA */

 SDA */

 PL_EINT1 */

 TX */

 PL_EINT2 */

 RX */

 PL_EINT3 */

 MS */

 PL_EINT4 */

 CK */

 PL_EINT5 */

 DO */

 PL_EINT6 */

 DI */

 PL_EINT7 */

 SCK */

 PL_EINT8 */

 SDA */

 PL_EINT9 */

 PL_EINT10 */

 PL_EINT11 */

 PL_EINT12 */

/*

 * Allwinner sun5i SoCs pinctrl driver.

 *

 * Copyright (C) 2014-2016 Maxime Ripard <maxime.ripard@free-electrons.com>

 * Copyright (C) 2016 Mylene Josserand <mylene.josserand@free-electrons.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 ERXD3 */

 CLK */

 IN0 */

 ERXD2 */

 ERR */

 IN1 */

 ERXD1 */

 SYNC */

 IN2 */

 ERXD0 */

 DLVD */

 IN3 */

 ETXD3 */

 D0 */

 IN4 */

 ETXD2 */

 D1 */

 IN5 */

 ETXD1 */

 D2 */

 IN6 */

 ETXD0 */

 D3 */

 IN7 */

 ERXCK */

 D4 */

 DTR */

 OUT0 */

 ERXERR */

 D5 */

 DSR */

 OUT1 */

 ERXDV */

 D6 */

 DCD */

 OUT2 */

 EMDC */

 D7 */

 RING */

 OUT3 */

 EMDIO */

 TX */

 OUT4 */

 ETXEN */

 RX */

 OUT5 */

 ETXCK */

 CTS */

 TX */

 OUT6 */

 ECRS */

 RTS */

 RX */

 OUT7 */

 ECOL */

 TX */

 ETXERR */

 RX */

 EINT31 */

 Hole */

 SCK */

 SDA */

 PWM0 */

 DO */

 EINT16 */

 TX */

 EINT17 */

 RX */

 EINT18 */

 MCLK */

 EINT19 */

 BCLK */

 EINT20 */

 LRCK */

 EINT21 */

 DO */

 EINT22 */

 DI */

 DI */

 EINT23 */

 CS1 */

 DO */

 EINT24 */

 CS0 */

 MS0 */

 EINT25 */

 CLK */

 CK0 */

 EINT26 */

 MOSI */

 DO0 */

 EINT27 */

 MISO */

 DI0 */

 EINT28 */

 SCK */

 SDA */

 SCK */

 SDA */

 TX */

 EINT29 */

 RX */

 EINT30 */

 Hole */

 NWE */

 MOSI */

 NALE */

 MISO */

 NCLE */

 CLK */

 NCE1 */

 CS0 */

 NCE0 */

 NRE */

 NRB0 */

 CMD */

 NRB1 */

 CLK */

 NDQ0 */

 D0 */

 NDQ1 */

 D1 */

 NDQ2 */

 D2 */

 NDQ3 */

 D3 */

 NDQ4 */

 D4 */

 NDQ5 */

 D5 */

 NDQ6 */

 D6 */

 NDQ7 */

 D7 */

 NWP */

 TX */

 NCE2 */

 RX */

 NCE3 */

 TX */

 CTS */

 NCE4 */

 RX */

 RTS */

 Hole */

 D0 */

 D1 */

 D2 */

 TX */

 D3 */

 RX */

 D4 */

 CTS */

 D5 */

 RTS */

 D6 */

 ECRS */

 D7 */

 ECOL */

 D8 */

 D9 */

 D10 */

 ERXD0 */

 D11 */

 ERXD1 */

 D12 */

 ERXD2 */

 D13 */

 ERXD3 */

 D14 */

 ERXCK */

 D15 */

 ERXERR */

 D16 */

 D17 */

 D18 */

 ERXDV */

 D19 */

 ETXD0 */

 D20 */

 ETXD1 */

 D21 */

 ETXD2 */

 D22 */

 ETXD3 */

 D23 */

 ETXEN */

 CLK */

 ETXCK */

 DE */

 ETXERR */

 HSYNC */

 EMDC */

 VSYNC */

 EMDIO */

 Hole */

 CLK */

 PCK */

 CS0 */

 EINT14 */

 ERR */

 CK */

 CLK */

 EINT15 */

 SYNC */

 HSYNC */

 MOSI */

 DVLD */

 VSYNC */

 MISO */

 D0 */

 D0 */

 D0 */

 D1 */

 D1 */

 D1 */

 D2 */

 D2 */

 D2 */

 D3 */

 D3 */

 D3 */

 D4 */

 D4 */

 CMD */

 D5 */

 D5 */

 CLK */

 D6 */

 D6 */

 TX */

 D7 */

 D7 */

 RX */

 Hole */

 D1 */

 MS1 */

 D0 */

 DI1 */

 CLK */

 TX */

 CMD */

 DO1 */

 D3 */

 RX */

 D2 */

 CK1 */

 Hole */

 CLK */

 EINT0 */

 SIGN */

 EINT1 */

 MAG */

 EINT2 */

 CMD */

 TX */

 EINT3 */

 CLK */

 RX */

 EINT4 */

 DO */

 CTS */

 EINT5 */

 D1 */

 RTS */

 RTS */

 EINT6 */

 D2 */

 TX */

 EINT7 */

 D3 */

 RX */

 EINT8 */

 CS0 */

 TX */

 EINT9 */

 CLK */

 RX */

 EINT10 */

 MOSI */

 CTS */

 EINT11 */

 MISO */

 RTS */

 EINT12 */

 CS1 */

 PWM1 */

 CTS */

 EINT13 */

/*

 * Driver for the ST Microelectronics SPEAr310 pinmux

 *

 * Copyright (C) 2012 ST Microelectronics

 * Viresh Kumar <vireshk@kernel.org>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 addresses */

 emi_cs_0_to_5_pins */

 uart1_pins */

 uart2_pins */

 uart3_pins */

 uart4_pins */

 uart5_pins */

 fsmc_pins */

 rs485_0_pins */

 rs485_1_pins */

 tdm_pins */

 pingroups */

 functions */

/*

 * Driver for the ST Microelectronics SPEAr pinmux

 *

 * Copyright (C) 2012 ST Microelectronics

 * Viresh Kumar <vireshk@kernel.org>

 *

 * Inspired from:

 * - U300 Pinctl drivers

 * - Tegra Pinctl drivers

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 calculate number of maps required */

 SoC have any modes */

 gpio with pinmux */

	/*

	 * Some SoC have configuration options applicable to group of pins,

	 * rather than a single pin.

	/*

	 * SoC may need some extra configurations, or configurations for single

	 * pin

 configure mode, if supported by SoC */

/*

 * Driver for the ST Microelectronics SPEAr300 pinmux

 *

 * Copyright (C) 2012 ST Microelectronics

 * Viresh Kumar <vireshk@kernel.org>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 addresses */

 modes */

 fsmc_2chips_pins */

 fsmc_4chips_pins */

 clcd_lcdmode_pins */

 clcd_pfmode_pins */

 tdm_pins */

 i2c_clk_pins */

 caml_pins */

 camu_pins */

 dac_pins */

 i2s_pins */

 sdhci_4bit_pins */

 sdhci_8bit_pins */

 gpio1_0_to_3_pins */

 gpio1_4_to_7_pins */

 pingroups */

 functions */

/*

 * Driver for the ST Microelectronics SPEAr1340 pinmux

 *

 * Copyright (C) 2012 ST Microelectronics

 * Viresh Kumar <vireshk@kernel.org>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 pins */

 In SPEAr1340 there are two levels of pad muxing */

 - pads as gpio OR peripherals */

 - If peripherals, then primary OR alternate peripheral */

/*

 * Macro's for first level of pmx - pads as gpio OR peripherals. There are 8

 * registers with 32 bits each for handling gpio pads, register 8 has only 26

 * relevant bits.

 macro's for making pads as gpio's */

 macro's for making pads as peripherals */

 other registers */

 PERIP_CFG register masks */

 PCIE CFG MASks */

 Macro's for second level of pmx - pads as primary OR alternate peripheral */

 Write 0 to enable FSMC_16_BIT */

 Write 0 to enable UART0_ENH */

 Only clk & cpt */

 Write 0 to enable PWM1 */

 Write 0 to enable PWM2 */

 Only clk & cpt */

 Write 0 to enable PWM3 */

 Only clk & cpt */

 Write 0 to enable PWM0 */

 Write 0 to enable VIP */

 Write 0 to enable VIP */

 Write 0 to enable VIP */

 Write 0 to enable VIP */

 Write 0 to enable TS */

 Write 0 to enable FSMC PNOR */

 Write 0 to enable CLCD */

 Write 0 to enable I2S, SSP0_CS2, CEC0, 1, SPDIF out, CLCD */

/*

 * Pad multiplexing for making all pads as gpio's. This is done to override the

 * values passed from bootloader and start from scratch.

 Pad multiplexing for fsmc_8bit device */

 Pad multiplexing for fsmc_16bit device */

 pad multiplexing for fsmc_pnor device */

 pad multiplexing for keyboard rows-cols device */

 pad multiplexing for keyboard col5 device */

 pad multiplexing for spdif_in device */

 pad multiplexing for spdif_out device */

 pad multiplexing for gpt_0_1 device */

 pad multiplexing for pwm0 device */

 pad multiplexing for pwm1 device */

 pad multiplexing for pwm2 device */

 pad multiplexing for pwm3 device */

 pad multiplexing for vip_mux device */

 pad multiplexing for vip_mux_cam0 (disables cam0) device */

 pad multiplexing for vip_mux_cam1 (disables cam1) device */

 pad multiplexing for vip_mux_cam2 (disables cam2) device */

 pad multiplexing for vip_mux_cam3 (disables cam3) device */

 pad multiplexing for cam0 device */

 pad multiplexing for cam1 device */

 pad multiplexing for cam2 device */

 pad multiplexing for cam3 device */

 pad multiplexing for smi device */

 pad multiplexing for ssp0 device */

 pad multiplexing for ssp0_cs1 device */

 pad multiplexing for ssp0_cs2 device */

 pad multiplexing for ssp0_cs3 device */

 pad multiplexing for uart0 device */

 pad multiplexing for uart0_enh device */

 pad multiplexing for uart1 device */

 pad multiplexing for i2s_in device */

 pad multiplexing for i2s_out device */

 pad multiplexing for gmac device */

 pad multiplexing for gmii device */

 pad multiplexing for rgmii device */

 pad multiplexing for rmii device */

 pad multiplexing for sgmii device */

 pad multiplexing for i2c0 device */

 pad multiplexing for i2c1 device */

 pad multiplexing for cec0 device */

 pad multiplexing for cec1 device */

 pad multiplexing for mcif devices */

 Pad multiplexing for sdhci device */

 Pad multiplexing for cf device */

 Pad multiplexing for xd device */

 pad multiplexing for clcd device */

 Disable cld runtime to save panel damage */

 pad multiplexing for arm_trace device */

 pad multiplexing for miphy_dbg device */

 pad multiplexing for pcie device */

 pad multiplexing for sata device */

 pingroups */

 functions */

 pin++ as gpio configuration starts from 2nd bit of base register */

/*

 * Driver for the ST Microelectronics SPEAr1310 pinmux

 *

 * Copyright (C) 2012 ST Microelectronics

 * Viresh Kumar <vireshk@kernel.org>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 pins */

 registers */

 combined macros */

 Pad multiplexing for i2c0 device */

 Pad multiplexing for ssp0 device */

 Pad multiplexing for ssp0_cs0 device */

 ssp0_cs1_2 device */

 Pad multiplexing for i2s0 device */

 Pad multiplexing for i2s1 device */

 Pad multiplexing for clcd device */

 Pad multiplexing for smi 2 chips device */

 Pad multiplexing for gmii device */

 Pad multiplexing for rgmii device */

 Pad multiplexing for smii_0_1_2 device */

 Pad multiplexing for ras_mii_txclk device */

 Pad multiplexing for nand 8bit device (cs0 only) */

 Pad multiplexing for nand 16bit device */

 Pad multiplexing for nand 4 chips */

 Pad multiplexing for keyboard_6x6 device */

 Pad multiplexing for keyboard_rowcol6_8 device */

 Pad multiplexing for uart0 device */

 Pad multiplexing for uart0_modem device */

 Pad multiplexing for gpt0_tmr0 device */

 Pad multiplexing for gpt0_tmr1 device */

 Pad multiplexing for gpt1_tmr0 device */

 Pad multiplexing for gpt1_tmr1 device */

 Pad multiplexing for mcif device */

 sdhci device */

 cf device */

 xd device */

 Pad multiplexing for touch_xy device */

 Pad multiplexing for uart1 device */

 Muxed with I2C */

 Muxed with SD/MMC */

 Pad multiplexing for uart2_3 device */

 Pad multiplexing for uart4 device */

 Pad multiplexing for uart5 device */

 Pad multiplexing for rs485_0_1_tdm_0_1 device */

 Pad multiplexing for i2c_1_2 device */

 Pad multiplexing for i2c3_dis_smi_clcd device */

 Muxed with SMI & CLCD */

 Pad multiplexing for i2c3_dis_sd_i2s0 device */

 Muxed with SD/MMC & I2S1 */

 Pad multiplexing for i2c_4_5_dis_smi device */

 Muxed with SMI */

 Pad multiplexing for i2c4_dis_sd device */

 Muxed with SD/MMC */

 Pad multiplexing for i2c5_dis_sd device */

 Muxed with SD/MMC */

 Pad multiplexing for i2c_6_7_dis_kbd device */

 Muxed with KBD */

 Pad multiplexing for i2c6_dis_sd device */

 Muxed with SD/MMC */

 Pad multiplexing for i2c7_dis_sd device */

 Pad multiplexing for can0_dis_nor device */

 Muxed with NOR */

 Pad multiplexing for can0_dis_sd device */

 Muxed with SD/MMC */

 Pad multiplexing for can1_dis_sd device */

 Muxed with SD/MMC */

 Pad multiplexing for can1_dis_kbd device */

 Muxed with KBD */

 Pad multiplexing for (ras-ip) pci device */

 pad multiplexing for (fix-part) pcie0 device */

 pad multiplexing for (fix-part) pcie1 device */

 pad multiplexing for (fix-part) pcie2 device */

 pad multiplexing for sata0 device */

 pad multiplexing for sata1 device */

 pad multiplexing for sata2 device */

 Pad multiplexing for ssp1_dis_kbd device */

 Pad multiplexing for ssp1_dis_sd device */

 Pad multiplexing for gpt64 device */

 pingroups */

 functions */

 Define muxreg arrays */

/*

 * Driver for the ST Microelectronics SPEAr3xx pinmux

 *

 * Copyright (C) 2012 ST Microelectronics

 * Viresh Kumar <vireshk@kernel.org>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 pins */

 firda_pins */

 i2c_pins */

 ssp_cs_pins */

 ssp_pins */

 mii_pins */

 gpio0_pin0_pins */

 gpio0_pin1_pins */

 gpio0_pin2_pins */

 gpio0_pin3_pins */

 gpio0_pin4_pins */

 gpio0_pin5_pins */

 uart0_ext_pins */

 uart0_pins */

 timer_0_1_pins */

 timer_2_3_pins */

 Define muxreg arrays */

/*

 * Driver for the ST Microelectronics SPEAr320 pinmux

 *

 * Copyright (C) 2012 ST Microelectronics

 * Viresh Kumar <vireshk@kernel.org>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 addresses */

 modes */

 Extended mode registers and their offsets */

 Pad multiplexing for CLCD device */

 Pad multiplexing for EMI (Parallel NOR flash) device */

 Pad multiplexing for FSMC (NAND flash) device */

 Pad multiplexing for SPP device */

 Pad multiplexing for SDHCI device */

 select pin 12 for cd */

 select pin 51 for cd */

 Pad multiplexing for I2S device */

 Pad multiplexing for UART1 device */

 Pad multiplexing for UART1 Modem device */

 Pad multiplexing for UART2 device */

 Pad multiplexing for uart3 device */

 Select signals on pins 8_9 */

 Select signals on pins 15_16 */

 Select signals on pins 41_42 */

 Select signals on pins 52_53 */

 Select signals on pins 73_74 */

 Select signals on pins 94_95 */

 Select signals on pins 98_99 */

 Pad multiplexing for uart4 device */

 Select signals on pins 6_7 */

 Select signals on pins 13_14 */

 Select signals on pins 39_40 */

 Select signals on pins 71_72 */

 Select signals on pins 92_93 */

 Select signals on pins 100_101_ */

 Pad multiplexing for uart5 device */

 Select signals on pins 4_5 */

 Select signals on pins 37_38 */

 Select signals on pins 69_70 */

 Select signals on pins 90_91 */

 Pad multiplexing for uart6 device */

 Select signals on pins 2_3 */

 Select signals on pins 88_89 */

 UART - RS485 pmx */

 Pad multiplexing for Touchscreen device */

 Pad multiplexing for CAN device */

 Pad multiplexing for PWM0_1 device */

 Pad multiplexing for PWM2 device */

 Pad multiplexing for PWM3 device */

 Pad multiplexing for SSP1 device */

 Pad multiplexing for SSP2 device */

 Pad multiplexing for cadence mii2 as mii device */

 Pad multiplexing for cadence mii 1_2 as smii or rmii device */

 configure as smii */

 configure as rmii */

 Pad multiplexing for i2c1 device */

 Select signals on pins 8-9 */

 Select signals on pins 98-99 */

 Pad multiplexing for i2c2 device */

 Select signals on pins 0_1 */

 Select signals on pins 2_3 */

 Select signals on pins 19_20 */

 Select signals on pins 75_76 */

 Select signals on pins 96_97 */

 pingroups */

 functions */

/*

 * SPEAr platform PLGPIO driver

 *

 * Copyright (C) 2012 ST Microelectronics

 * Viresh Kumar <viresh.kumar@linaro.org>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

/*

 * plgpio pins in all machines are not one to one mapped, bitwise with registers

 * bits. These set of macros define register masks for which below functions

 * (pin_to_offset and offset_to_pin) are required to be called.

 enable register */

 write data register */

 direction set register */

 read data register */

 interrupt enable register */

 mask interrupt status register */

 edge interrupt type */

/*

 * struct plgpio: plgpio driver specific structure

 *

 * lock: lock for guarding gpio registers

 * base: base address of plgpio block

 * chip: gpio framework specific chip information structure

 * p2o: function ptr for pin to offset conversion. This is required only for

 *	machines where mapping b/w pin and offset is not 1-to-1.

 * o2p: function ptr for offset to pin conversion. This is required only for

 *	machines where mapping b/w pin and offset is not 1-to-1.

 * p2o_regs: mask of registers for which p2o and o2p are applicable

 * regs: register offsets

 * csave_regs: context save registers for standby/sleep/hibernate cases

 pin_to_offset */

 offset_to_pin */

 register manipulation inline functions */

 gpio framework specific routines */

 get correct offset for "offset" pin */

 get correct offset for "offset" pin */

 get correct offset for "offset" pin */

 get correct offset for "offset" pin */

	/*

	 * put gpio in IN mode before enabling it. This make enabling gpio safe

 get correct offset for "offset" pin */

 get correct offset for "offset" pin */

 PLGPIO IRQ */

 get correct offset for "offset" pin */

 get correct offset for "offset" pin */

 check all plgpio MIS registers for a possible interrupt */

 clear interrupts */

		/*

		 * clear extra bits in last register having gpios < MAX/REG

		 * ex: Suppose there are max 102 plgpios. then last register

		 * must have only (102 - MAX_GPIO_PER_REG * 3) = 6 relevant bits

		 * so, we must not take other 28 bits into consideration for

		 * checking interrupt. so clear those bits.

 get correct pin for "offset" */

 get correct irq line number */

/*

 * pin to offset and offset to pin converter functions

 *

 * In spear310 there is inconsistency among bit positions in plgpio regiseters,

 * for different plgpio pins. For example: for pin 27, bit offset is 23, pin

 * 28-33 are not supported, pin 95 has offset bit 95, bit 100 has offset bit 1

/*

 * This is used to correct the values in end registers. End registers contain

 * extra bits that might be used for other purpose in platform. So, we shouldn't

 * overwrite these bits. This macro, reads given register again, preserves other

 * bit values (non-plgpio bits), and retain captured value (plgpio bits).

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl driver for the Wondermedia SoC's

 *

 * Copyright (c) 2013 Tony Prisk <linux@prisktech.co.nz>

 every pin does every function */

	/*

	 * If reg_en == NO_REG, we assume it is a dedicated GPIO and cannot be

	 * disabled (as on VT8500) and that no alternate function is available.

 disable by setting GPIO_IN */

	/*

	 * The following lines calculate how many values are defined for each

	 * of the properties.

/*

 * The fail path removes any maps that have been allocated. The fail path is

 * only called from code after maps has been kzalloc'd. It is also safe to

 * pass 'num_pins * maps_per_pin' as the map count even though we probably

 * failed before all the mappings were read as all maps are allocated at once,

 * and configs are only allocated for .type = PIN_MAP_TYPE_CONFIGS_PIN - there

 * is no failpath where a config can be allocated without .type being set.

 for each config */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl data for Wondermedia WM8750 SoC

 *

 * Copyright (c) 2013 Tony Prisk <linux@prisktech.co.nz>

/*

 * Describe the register offsets within the GPIO memory space

 * The dedicated external GPIO's should always be listed in bank 0

 * so they are exported in the 0..31 range which is what users

 * expect.

 *

 * Do not reorder these banks as it will change the pin numbering

 0 */

 1 */

 2 */

 3 */

 4 */

 5 */

 6 */

 7 */

 8 */

 9 */

 10 */

 Please keep sorted by bank/bit */

 Order of these names must match the above list */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl data for VIA VT8500 SoC

 *

 * Copyright (c) 2013 Tony Prisk <linux@prisktech.co.nz>

/*

 * Describe the register offsets within the GPIO memory space

 * The dedicated external GPIO's should always be listed in bank 0

 * so they are exported in the 0..31 range which is what users

 * expect.

 *

 * Do not reorder these banks as it will change the pin numbering

 0 */

 1 */

 2 */

 3 */

 4 */

 5 */

 6 */

 Please keep sorted by bank/bit */

 Order of these names must match the above list */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl data for Wondermedia WM8505 SoC

 *

 * Copyright (c) 2013 Tony Prisk <linux@prisktech.co.nz>

/*

 * Describe the register offsets within the GPIO memory space

 * The dedicated external GPIO's should always be listed in bank 0

 * so they are exported in the 0..31 range which is what users

 * expect.

 *

 * Do not reorder these banks as it will change the pin numbering

 0 */

 1 */

 2 */

 3 */

 4 */

 5 */

 6 */

 7 */

 8 */

 9 */

 10 */

 Please keep sorted by bank/bit */

 Order of these names must match the above list */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl data for Wondermedia WM8650 SoC

 *

 * Copyright (c) 2013 Tony Prisk <linux@prisktech.co.nz>

/*

 * Describe the register offsets within the GPIO memory space

 * The dedicated external GPIO's should always be listed in bank 0

 * so they are exported in the 0..31 range which is what users

 * expect.

 *

 * Do not reorder these banks as it will change the pin numbering

 0 */

 1 */

 2 */

 3 */

 4 */

 5 */

 6 */

 7 */

 Please keep sorted by bank/bit */

 Order of these names must match the above list */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl data for Wondermedia WM8850 SoC

 *

 * Copyright (c) 2013 Tony Prisk <linux@prisktech.co.nz>

/*

 * Describe the register offsets within the GPIO memory space

 * The dedicated external GPIO's should always be listed in bank 0

 * so they are exported in the 0..31 range which is what users

 * expect.

 *

 * Do not reorder these banks as it will change the pin numbering

 0 */

 1 */

 2 */

 3 */

 4 */

 5 */

 6 */

 7 */

 8 */

 9 */

 10 */

 Please keep sorted by bank/bit */

 Order of these names must match the above list */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for the NVIDIA Tegra pinmux

 *

 * Copyright (c) 2011-2012, NVIDIA CORPORATION.  All rights reserved.

 *

 * Derived from code:

 * Copyright (C) 2010 Google, Inc.

 * Copyright (C) 2010 NVIDIA Corporation

 * Copyright (C) 2009-2011 ST-Ericsson AB

 make sure pinmux register write completed */

 EINVAL=missing, which is fine since it's optional */

 EINVAL=missing, which is fine since it's optional */

 LOCK can't be cleared */

 Special-case Boolean values; allow any non-zero as true */

 Range-check user-supplied value */

 Update register */

 for each config */

 flush all the prior writes */

 wait for pinctrl register read to complete */

	/*

	 * Each mux group will appear in 4 functions' list of groups.

	 * This over-allocates slightly, since not all groups are mux groups.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl data for the NVIDIA Tegra30 pinmux

 *

 * Author: Stephen Warren <swarren@nvidia.com>

 *

 * Copyright (c) 2011-2012, NVIDIA CORPORATION.  All rights reserved.

/*

 * Most pins affected by the pinmux can also be GPIOs. Define these first.

 * These must match how the GPIO driver names/numbers its pins.

 All non-GPIO pins follow */

 Non-GPIO pins */

 bank 0 */

 bank 1 */

       pg_name,              f0,           f1,           f2,           f3,           r,      od, ior */

 pg_name, r, hsm_b, schmitt_b, lpmd_b, drvdn_b, drvdn_w, drvup_b, drvup_w, slwr_b, slwr_w, slwf_b, slwf_w */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl data for the NVIDIA Tegra124 pinmux

 *

 * Author: Ashwini Ghuge <aghuge@nvidia.com>

 *

 * Copyright (c) 2013-2014, NVIDIA CORPORATION.  All rights reserved.

/*

 * Most pins affected by the pinmux can also be GPIOs. Define these first.

 * These must match how the GPIO driver names/numbers its pins.

 All non-GPIO pins follow */

 Non-GPIO pins */

 bank 0 */

 bank 1 */

 bank 2 */

       pg_name,                f0,         f1,         f2,           f3,          r,      od, ior, rcv_sel */

 pg_name, r, hsm_b, schmitt_b, lpmd_b, drvdn_b, drvdn_w, drvup_b, drvup_w, slwr_b, slwr_w, slwf_b, slwf_w, drvtype */

                     pg_name, r,     b, f0,  f1 */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Pinctrl data for the NVIDIA Tegra194 pinmux

 *

 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.

 *

 * This program is free software; you can redistribute it and/or modify it

 * under the terms and conditions of the GNU General Public License,

 * version 2, as published by the Free Software Foundation.

 *

 * This program is distributed in the hope it will be useful, but WITHOUT

 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or

 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for

 * more details.

 Define unique ID for each pins */

 Table for pin descriptor */

 Define unique ID for each function */

 Make list of each function name */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl data for the NVIDIA Tegra20 pinmux

 *

 * Author: Stephen Warren <swarren@nvidia.com>

 *

 * Copyright (c) 2011-2012, NVIDIA CORPORATION.  All rights reserved.

 *

 * Derived from code:

 * Copyright (C) 2010 Google, Inc.

 * Copyright (C) 2010 NVIDIA Corporation

/*

 * Most pins affected by the pinmux can also be GPIOs. Define these first.

 * These must match how the GPIO driver names/numbers its pins.

 All non-GPIO pins follow */

 PU0..6: GPIO only */

 PV0..1: GPIO only */

 PV2..3: Balls are named after GPIO not function */

 PV4..6: GPIO only */

 Pin group with mux control, and typically tri-state and pull-up/down too */

 Pin groups with only pull up and pull down control */

 Pin groups for drive strength registers (configurable version) */

 Pin groups for drive strength registers (simple version) */

     name,   f0,        f1,        f2,        f3,            tri r/b,  mux r/b,  pupd r/b */

      pg_name, pupd_r/b */

     pg_name,    r */

         pg_name, r, hsm_b, schmitt_b, lpmd_b, drvdn_b, drvup_b, slwr_b, slwr_w, slwf_b, slwf_w */

     pg_name,    r */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2014, NVIDIA CORPORATION.  All rights reserved.

	/*

	 * For the tegra-xusb pad controller groups are synonymous

	 * with lanes/pins and there is always one lane/pin per group.

 lanes with iddq == 0 don't support this parameter */

 lanes with iddq == 0 don't support this parameter */

 predeclare these in order to silence sparse */

	/*

	 * Note that we can't replace this by of_device_get_match_data()

	 * because we need the separate matching table for this legacy code on

	 * Tegra124. of_device_get_match_data() would attempt to use the table

	 * from the updated driver and fail.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl data for the NVIDIA Tegra210 pinmux

 *

 * Copyright (c) 2015, NVIDIA CORPORATION.  All rights reserved.

/*

 * Most pins affected by the pinmux can also be GPIOs. Define these first.

 * These must match how the GPIO driver names/numbers its pins.

 All non-GPIO pins follow */

 Non-GPIO pins */

 bank 0 */

 bank 1 */

       pg_name,              f0,         f1,     f2,    f3,    r,      hsm, drvtype, e_io_hv, lpdr, rdrv,  drvdn_b, drvdn_w, drvup_b, drvup_w, slwr_b, slwr_w, slwf_b, slwf_w */

 pg_name, r, prk_mask, drvdn_b, drvdn_w, drvup_b, drvup_w, slwr_b, slwr_w, slwf_b, slwf_w */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Pinctrl data for the NVIDIA Tegra114 pinmux

 *

 * Author: Pritesh Raithatha <praithatha@nvidia.com>

 *

 * Copyright (c) 2012-2013, NVIDIA CORPORATION.  All rights reserved.

/*

 * Most pins affected by the pinmux can also be GPIOs. Define these first.

 * These must match how the GPIO driver names/numbers its pins.

 All non-GPIO pins follow */

 Non-GPIO pins */

 bank 0 */

 bank 1 */

       pg_name,                f0,         f1,         f2,           f3,          r,      od, ior, rcv_sel */

 pg_name, r, hsm_b, schmitt_b, lpmd_b, drvdn_b, drvdn_w, drvup_b, drvup_w, slwr_b, slwr_w, slwf_b, slwf_w, drvtype */

/*

 * Support for configuration of IO Delay module found on Texas Instruments SoCs

 * such as DRA7

 *

 * Copyright (C) 2015-2017 Texas Instruments Incorporated - https://www.ti.com/

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

/**

 * struct ti_iodelay_reg_data - Describes the registers for the iodelay instance

 * @signature_mask: CONFIG_REG mask for the signature bits (see TRM)

 * @signature_value: CONFIG_REG signature value to be written (see TRM)

 * @lock_mask: CONFIG_REG mask for the lock bits (see TRM)

 * @lock_val: CONFIG_REG lock value for the lock bits (see TRM)

 * @unlock_val:CONFIG_REG unlock value for the lock bits (see TRM)

 * @binary_data_coarse_mask: CONFIG_REG coarse mask (see TRM)

 * @binary_data_fine_mask: CONFIG_REG fine mask (see TRM)

 * @reg_refclk_offset: Refclk register offset

 * @refclk_period_mask: Refclk mask

 * @reg_coarse_offset: Coarse register configuration offset

 * @coarse_delay_count_mask: Coarse delay count mask

 * @coarse_ref_count_mask: Coarse ref count mask

 * @reg_fine_offset: Fine register configuration offset

 * @fine_delay_count_mask: Fine delay count mask

 * @fine_ref_count_mask: Fine ref count mask

 * @reg_global_lock_offset: Global iodelay module lock register offset

 * @global_lock_mask: Lock mask

 * @global_unlock_val: Unlock value

 * @global_lock_val: Lock value

 * @reg_start_offset: Offset to iodelay registers after the CONFIG_REG_0 to 8

 * @reg_nr_per_pin: Number of iodelay registers for each pin

 * @regmap_config: Regmap configuration for the IODelay region

/**

 * struct ti_iodelay_reg_values - Computed io_reg configuration values (see TRM)

 * @coarse_ref_count: Coarse reference count

 * @coarse_delay_count: Coarse delay count

 * @fine_ref_count: Fine reference count

 * @fine_delay_count: Fine Delay count

 * @ref_clk_period: Reference Clock period

 * @cdpe: Coarse delay parameter

 * @fdpe: Fine delay parameter

/**

 * struct ti_iodelay_cfg - Description of each configuration parameters

 * @offset: Configuration register offset

 * @a_delay: Agnostic Delay (in ps)

 * @g_delay: Gnostic Delay (in ps)

/**

 * struct ti_iodelay_pingroup - Structure that describes one group

 * @cfg: configuration array for the pin (from dt)

 * @ncfg: number of configuration values allocated

 * @config: pinconf "Config" - currently a dummy value

/**

 * struct ti_iodelay_device - Represents information for a iodelay instance

 * @dev: Device pointer

 * @phys_base: Physical address base of the iodelay device

 * @reg_base: Virtual address base of the iodelay device

 * @regmap: Regmap for this iodelay instance

 * @pctl: Pinctrl device

 * @desc: pinctrl descriptor for pctl

 * @pa: pinctrl pin wise description

 * @reg_data: Register definition data for the IODelay instance

 * @reg_init_conf_values: Initial configuration values.

/**

 * ti_iodelay_extract() - extract bits for a field

 * @val: Register value

 * @mask: Mask

 *

 * Return: extracted value which is appropriately shifted

/**

 * ti_iodelay_compute_dpe() - Compute equation for delay parameter

 * @period: Period to use

 * @ref: Reference Count

 * @delay: Delay count

 * @delay_m: Delay multiplier

 *

 * Return: Computed delay parameter

 Handle overflow conditions */

 Truncate result back to 32 bits */

/**

 * ti_iodelay_pinconf_set() - Configure the pin configuration

 * @iod: iodelay device

 * @cfg: Configuration

 *

 * Update the configuration register as per TRM and lockup once done.

 * *IMPORTANT NOTE* SoC TRM does recommend doing iodelay programmation only

 * while in Isolation. But, then, isolation also implies that every pin

 * on the SoC (including DDR) will be isolated out. The only benefit being

 * a glitchless configuration, However, the intent of this driver is purely

 * to support a "glitchy" configuration where applicable.

 *

 * Return: 0 in case of success, else appropriate error value

 NOTE: Truncation is expected in all division below */

	/*

	 * NOTE: we leave the iodelay values unlocked - this is to work around

	 * situations such as those found with mmc mode change.

	 * However, this leaves open any unwarranted changes to padconf register

	 * impacting iodelay configuration. Use with care!

/**

 * ti_iodelay_pinconf_init_dev() - Initialize IODelay device

 * @iod: iodelay device

 *

 * Unlocks the iodelay region, computes the common parameters

 *

 * Return: 0 in case of success, else appropriate error value

 unlock the iodelay region */

 Read up Recalibration sequence done by bootloader */

/**

 * ti_iodelay_pinconf_deinit_dev() - deinit the iodelay device

 * @iod:	IODelay device

 *

 * Deinitialize the IODelay device (basically just lock the region back up.

 lock the iodelay region back again */

/**

 * ti_iodelay_get_pingroup() - Find the group mapped by a group selector

 * @iod: iodelay device

 * @selector: Group Selector

 *

 * Return: Corresponding group representing group selector

/**

 * ti_iodelay_offset_to_pin() - get a pin index based on the register offset

 * @iod: iodelay driver instance

 * @offset: register offset from the base

/**

 * ti_iodelay_node_iterator() - Iterate iodelay node

 * @pctldev: Pin controller driver

 * @np: Device node

 * @pinctrl_spec: Parsed arguments from device tree

 * @pins: Array of pins in the pin group

 * @pin_index: Pin index in the pin array

 * @data: Pin controller driver specific data

 *

 Index plus two value cells */

/**

 * ti_iodelay_dt_node_to_map() - Map a device tree node to appropriate group

 * @pctldev: pinctrl device representing IODelay device

 * @np: Node Pointer (device tree)

 * @map: Pinctrl Map returned back to pinctrl framework

 * @num_maps: Number of maps (1)

 *

 * Maps the device tree description into a group of configuration parameters

 * for iodelay block entry.

 *

 * Return: 0 in case of success, else appropriate error value

/**

 * ti_iodelay_pinconf_group_get() - Get the group configuration

 * @pctldev: pinctrl device representing IODelay device

 * @selector: Group selector

 * @config: Configuration returned

 *

 * Return: The configuration if the group is valid, else returns -EINVAL

/**

 * ti_iodelay_pinconf_group_set() - Configure the groups of pins

 * @pctldev: pinctrl device representing IODelay device

 * @selector: Group selector

 * @configs: Configurations

 * @num_configs: Number of configurations

 *

 * Return: 0 if all went fine, else appropriate error value.

/**

 * ti_iodelay_pin_to_offset() - get pin register offset based on the pin index

 * @iod: iodelay driver instance

 * @selector: Pin index

/**

 * ti_iodelay_pinconf_group_dbg_show() - show the group information

 * @pctldev: Show the group information

 * @s: Sequence file

 * @selector: Group selector

 *

 * Provide the configuration information of the selected group

/**

 * ti_iodelay_alloc_pins() - Allocate structures needed for pins for iodelay

 * @dev: Device pointer

 * @iod: iodelay device

 * @base_phy: Base Physical Address

 *

 * Return: 0 if all went fine, else appropriate error value.

 Hopefully no more.. */ },

/**

 * ti_iodelay_probe() - Standard probe

 * @pdev: platform device

 *

 * Return: 0 if all went fine, else appropriate error value.

 So far We can assume there is only 1 bank of registers */

 no pinmux ops - we are pinconf */

/**

 * ti_iodelay_remove() - standard remove

 * @pdev: platform device

 *

 * Return: 0 if all went fine, else appropriate error value.

 Expect other allocations to be freed by devm */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2020 TOSHIBA CORPORATION

 * Copyright (c) 2020 Toshiba Electronic Devices & Storage Corporation

 * Copyright (c) 2020 Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>

 private data */

 protect pinctrl register */

 pinconf */

 update pudsel setting */

 update pude setting */

				/*

				 * I/O drive capacity setting:

				 * 2mA: 0

				 * 4mA: 1

				 * 8mA: 3

				 * 16mA: 7

				 * 24mA: 11

				 * 32mA: 15

 update drive setting */

 pinctrl */

 pinmux */

 update mux */

 update mux */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2020 TOSHIBA CORPORATION

 * Copyright (c) 2020 Toshiba Electronic Devices & Storage Corporation

 * Copyright (c) 2020 Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>

 register offset */

 PIN */

 Group */

 MUX */

 GPIO MUX */

 chip dependent data */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2016-2018 Nuvoton Technology corporation.

 Copyright (c) 2016, Dell Inc

 GCR registers */

 GPIO registers */

 Data IN */

 Polarity */

 Data OUT */

 Output Enable */

 Pull-up */

 Pull-down */

 Debounce */

 Event Type */

 Event Both Edge */

 Event Enable */

 Event Set (enable) */

 Event Clear (disable) */

 Event Status */

 Input Enable */

 Data OUT Set */

 Data OUT Clear */

 Output Enable Set */

 Output Enable Clear */

 Structure for register banks */

 GPIO handling in the pinctrl driver */

 Set GPIO to Output with initial value */

 Disable GPIO interrupt */

 Clear events */

 Enable GPIO interrupt */

 Enable events */

 active-high, input, clear interrupt, enable interrupt */

 pinmux handing in the pinctrl driver*/

 RGMII 1 pin group */

 RGMII 1 MD interface pin group */

 RGMII 2 pin group */

 RGMII 2 MD interface pin group */

 Serial I/O Expander 1 */

 Serial I/O Expander 2 */

 Host Serial I/O Expander 2 */

 RMII 1 pin groups */

 RMII 2 pin groups */

 BMC serial port 0 */

 System Control Interrupt and Power Management Event pin group */

 System Management Interrupt pin group */

 Serial Interrupt Line pin group */

 Graphics SPI Clock pin group */

/*

 * pin:	     name, number

 * group:    name, npins,   pins

 * function: name, ngroups, groups

 add placeholder for none/gpio */

 Function names */

 Drive strength controlled by NPCM7XX_GP_N_ODSC */

 Not GPO */

 Not GPI */

 Has Slew Control, NPCM7XX_GP_N_OSRC */

 Has Slew Control, SRCNT.3 */

		PIN	  FUNCTION 1		   FUNCTION 2		  FUNCTION 3	    FLAGS */

 Z1/A1 */

 Z1/A1 */

 XX */

 XX */

 SDHC1 power */

 SDHC2 power */

 DACOSEL */

 number, name, drv_data */

dscnt6*/),

dscnt6*/),

dscnt6*/),

dscnt6*/),

 Enable mode in pin group */

 Get slew rate of pin (high/low) */

 LPC Slew rate in SRCNT register */

 Set slew rate of pin (high/low) */

 LPC Slew rate in SRCNT register */

 Get drive strength for a pin, if supported */

 Get standard reading */

 Set drive strength for a pin, if supported */

 pinctrl_ops */

 pinmux_ops  */

 Release GPIO back to pinctrl mode */

 Set GPIO direction */

 pinconf_ops */

 Set multiple configuration settings for a pin */

 pinctrl_desc */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Spreadtrum pin controller driver

 * Copyright (C) 2017 Spreadtrum  - http://www.spreadtrum.com

 pin global control register 0 */

 pin global control register 2 */

 pin global control register 3 */

 pin global control register 4 */

 pin global control register 5 */

 pin global control register 6 */

 pin global control register 7 */

 common pin registers definitions */

 MSIC pin registers definitions */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Spreadtrum pin controller driver

 * Copyright (C) 2017 Spreadtrum  - http://www.spreadtrum.com

/**

 * struct sprd_pin: represent one pin's description

 * @name: pin name

 * @number: pin number

 * @type: pin type, can be GLOBAL_CTRL_PIN/COMMON_PIN/MISC_PIN

 * @reg: pin register address

 * @bit_offset: bit offset in pin register

 * @bit_width: bit width in pin register

/**

 * struct sprd_pin_group: represent one group's description

 * @name: group name

 * @npins: pin numbers of this group

 * @pins: pointer to pins array

/**

 * struct sprd_pinctrl_soc_info: represent the SoC's pins description

 * @groups: pointer to groups of pins

 * @ngroups: group numbers of the whole SoC

 * @pins: pointer to pins description

 * @npins: pin numbers of the whole SoC

 * @grp_names: pointer to group names array

/**

 * struct sprd_pinctrl: represent the pin controller device

 * @dev: pointer to the device structure

 * @pctl: pointer to the pinctrl handle

 * @base: base address of the controller

 * @info: pointer to SoC's pins description information

 combine sleep pull down and pull down config */

 combine sleep pull up and pull up config */

 SPDX-License-Identifier: GPL-2.0+

/*

 * PTP hardware clock driver for the IDT ClockMatrix(TM) family of timing and

 * synchronization devices.

 *

 * Copyright (C) 2019 Integrated Device Technology, Inc., a Renesas Company.

/*

 * The name of the firmware file to be loaded

 * over-rides any automatic selection

 4 bytes skipped every 0x80 */

	/* If the firmware contains 'full configuration' SM_RESET can be used

	 * to ensure proper configuration.

	 *

	 * Full configuration is defined as the number of programmable

	 * bytes within the configuration range minus page offset addr range.

 Top (status registers) and bottom are read-only */

 Page size 128, last 4 bytes of page skipped */

 Sub-nanoseconds are in buf[0]. */

 Sub-nanoseconds are in buf[0]. */

 30 * 100ms = 3s */

 single shot */

 E_REF_CLK15 */

 wait trigger to be 0 */

 check extts before disabling it */

 trigger happened so we won't re-enable it */

 Disable extts */

 Re-enable extts */

 Place master sync in reset */

 Set sync trigger mask */

 PLL5 can have OUT8 as second additional output. */

 PLL6 can have OUT11 as second additional output. */

 Place master sync out of reset */

 First 4 pll has 2 outputs */

 Configure HW TOD write trigger. */

 ARM HW TOD write trigger. */

 Assumption: I2C @ 400KHz */

 Trigger the write operation. */

 Wait for the operation to complete. */

 pps trigger takes up to 1 sec to complete */

 Set page offset */

 Bad address */;

 module parameter */

 Top (status registers) and bottom are read-only */

 Page size 128, last 4 bytes of page skipped */

 Align output to internal 1 PPS */

 Return a negative value here to not reschedule */

 ppb = scaled_ppm * 125 / 2^13 */

 scaled_ppm = ppb * 2^13 / 125 */

	/* If the ToD correction is less than PHASE_PULL_IN_MIN_THRESHOLD_NS,

	 * skip. The error introduced by the ToD adjustment procedure would

	 * be bigger than the required ToD correction

 For most cases, keep phase pull-in duration 1 second */

 schedule the worker to cancel phase pull-in */

 PTP Hardware Clock interface */

/*

 * Maximum absolute value for write phase offset in picoseconds

 *

 * Destination signed register is 32-bit register in resolution of 50ps

 *

 * 0x7fffffff * 50 =  2147483647 * 50 = 107374182350

	/*

	 * Check for 32-bit signed max * 50:

	 *

	 * 0x7fffffff * 50 =  2147483647 * 50 = 107374182350

	/*

	 * Frequency Control Word unit is: 1.11 * 10^-10 ppm

	 *

	 * adjfreq:

	 *       ppb * 10^9

	 * FCW = ----------

	 *          111

	 *

	 * adjfine:

	 *       ppm_16 * 5^12

	 * FCW = -------------

	 *         111 * 2^4

 2 ^ -53 = 1.1102230246251565404236316680908e-16 */

 Only accept a 1-PPS aligned to the second. */

 STEELAI-366 - Temporary workaround for ts2phc compatibility */

	/*

	 * Start the TOD clock ticking.

/*

 * Compensate for the PTP DCO input-to-output delay.

 * This delay is 18 FOD cycles.

 Set tod addresses */

 Set pll addresses */

 Set tod addresses */

 Set tod addresses */

 trigger clears itself, so clear the mask */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PTP 1588 clock support

 *

 * Copyright (C) 2010 OMICRON electronics GmbH

 private globals */

 time stamp event queue operations */

 posix clock implementation */

 public interface */

 Initialize a clock structure. */

 PTP virtual clock is being registered under physical clock */

 Register a new PPS source. */

 Initialize a new device of our class in our clock structure. */

 Create a posix clock and link it to the device. */

 Release the clock's resources. */

 module operations */

 SPDX-License-Identifier: GPL-2.0 OR BSD-2-Clause

/*

 * Copyright (C) 2020 VMware, Inc., Palo Alto, CA., USA

 *

 * PTP clock driver for VMware precision clock virtual device.

/*

 * PTP clock ops.

/*

 * ACPI driver ops for VMware "precision clock" virtual device.

/*

 * Copyright 2017 Broadcom

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 Full wrap around is 44bits in ns (~4.887 hrs) */

 44 bits NCO */

 125MHz with 3.29 reg cfg */

 ptp dte priv structure */

 compensate for ignoring sum1 */

 to write sum3, bits [15:8] needs to be written */

	/*

	 * ignoring sum1 (4 bits) gives a 16ns resolution, which

	 * works due to the async register read.

 handle wraparound conditions */

Timestamp overflow: 8 LSB bits of sum3, 4 MSB bits of sum2 */

 Check for wrap around */

 adjust for wraparounds */

 Disable nco increment */

 reset overflow and wrap counter */

 Enable nco increment */

 disable the nco */

 SPDX-License-Identifier: GPL-2.0



 Copyright (C) 2018 Integrated Device Technology, Inc



 Module Parameters */

 we add 1 byte for device register */

/*

 *   TOD Trigger:

 *   Bits[7:4] Write 0x9, MSB write

 *   Bits[3:0] Read 0x9, LSB read

	/*

	 * Store the new time value.

	/*

	 * Frequency Control Word unit is: 1.68 * 10^-10 ppm

	 *

	 * adjfreq:

	 *       ppb * 10^9

	 * FCW = ----------

	 *          168

	 *

	 * adjfine:

	 *       scaled_ppm * 5^12

	 * FCW = -------------

	 *         168 * 2^4

 Need one less byte for applicable overhead */

 Turn it off after sync_tod_timeout seconds */

 Return a negative value here to not reschedule */

 Enable/disable output based on output_mask */

 Enable/disable individual output instead */

 Only accept a 1-PPS aligned to the second. */

 Convert from phaseoffset_fs to register value */

 maximum 8 pages  */

 Page size 128, last 4 bytes of page skipped */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PTP 1588 clock using the EG20T PCH

 *

 * Copyright (C) 2010 OMICRON electronics GmbH

 * Copyright (C) 2011-2012 LAPIS SEMICONDUCTOR Co., LTD.

 *

 * This code was derived from the IXP46X driver.

/*

 * struct pch_ts_regs - IEEE 1588 registers

/*

 * struct pch_dev - Driver private data

/*

 * struct pch_params - 1588 module parameter

 structure to hold the module parameters */

/*

 * Register access functions

 SET the eth_enable bit */

 Reset Hardware Assist block */

/* This function enables all 64 bits in system time registers [high & low].

 Reset Hardware Assist */

 enable all 32 bits in system time registers */

/**

 * pch_set_station_address() - This API sets the station address used by

 *				    IEEE 1588 hardware when looking at PTP

 *				    traffic on the  ethernet interface

 * @addr:	dress which contain the column separated address to be used.

 * @pdev:	PCI device.

 Verify the parameter */

 For all station address bytes */

 Expects ':' separated addresses */

		/* Ideally we should set the address only after validating

/*

 * Interrupt service routine

 this bit seems to be always set */

/*

 * PTP clock operations

 free the interrupt */

 unmap the virtual IO memory space */

 release the reserved IO memory space */

 enable the 1588 pci device */

 retrieve the available length of the IO memory space */

 allocate the memory for the device registers */

 get the virtual address to the 1588 registers */

 indicate success */

 reset the ieee1588 h/w */

 register the driver with the pci core */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Virtual PTP 1588 clock for use with KVM guests

 *

 * Copyright (C) 2017 Red Hat Inc.

		/*

		 * We are using a TSC value read in the hosts

		 * kvm_hc_clock_pairing handling.

		 * So any changes to tsc_to_system_mul

		 * and tsc_shift or any other pvclock

		 * data invalidate that measurement.

 SPDX-License-Identifier: GPL-2.0



 Copyright (C) 2018 MOSER-BAER AG



 GLOBAL register */

 VERSION register */

 INT_STAT register */

 INT_MSK register */

 BUF_STAT register */

 PORT_CONF register */

 TS_STAT_TX register */

 lock protects event list and tx_skb */

 reserved for future extensions */

 SPDX-License-Identifier: GPL-2.0+

/* Copyright 2019 NXP

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Virtual PTP 1588 clock for use with KVM guests

 *

 * Copyright (C) 2017 Red Hat Inc.

/*

 * PTP clock operations

 module operations */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020 Facebook */

 miniature atomic clock */

/* This is the MSI vector mapping used.

 * 0: TS3 (and PPS)

 * 1: TS0

 * 2: TS1

 * 3: GNSS

 * 4: GNSS2

 * 5: MAC

 * 6: TS2

 * 7: I2C controller

 * 8: HWICAP (notused)

 * 9: SPI Flash

 * 10: NMEA

 restore clock selection */

 restore clock selection */

		/* This is a request for 1PPS on an output SMA.

		 * Allow, but assume manual configuration.

 restore clock selection */

 NO DRIFT Correction */

 offset_p:i 1/8, offset_i: 1/16, drift_p: 0, drift_i: 0 */

 latch servo values */

 If there is a clock supervisor, then enable the watchdog */

 xiic-i2c for some stupid reason only does 2 byte reads. */

 XXX should fix API - this converts s/ns -> ts -> s/ns */

 write 1 to ack */

 if no state change, just return */

	/* Setting UPF_IOREMAP and leaving port.membase unspecified lets

	 * the serial port device claim and release the pci resource.

 disable */

 115200 */

 enable */

 FB specific board initializers; last "resource" registered. */

/*

 * ANT0 == gps	(in)

 * ANT1 == sma1 (in)

 * ANT2 == sma2 (in)

 * ANT3 == sma3 (out)

 * ANT4 == sma4 (out)

 10Mhz */

 PHC */

 disable */

 change mode */

 compute src for PPS1, used below. */

 assumes automatic switchover/selection */

 reuses PPS1 src from earlier */

	/* compat mode.

	 * Older FPGA firmware only returns 2 irq's.

	 * allow this - if not all of the IRQ's are returned, skip the

	 * extra devices and just register the clock.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PTP 1588 clock support - sysfs interface.

 *

 * Copyright (C) 2010 OMICRON electronics GmbH

 * Copyright 2021 NXP

 For break. Not error. */

 Need to create more vclocks */

 Need to delete vclocks */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Virtual PTP 1588 clock for use with KVM guests

 *  Copyright (C) 2019 ARM Ltd.

 *  All Rights Reserved

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PTP 1588 clock for Freescale QorIQ 1588 timer

 *

 * Copyright (C) 2010 OMICRON electronics GmbH

/*

 * Register access functions

 Caller must hold ptp_qoriq->lock. */

 Caller must hold ptp_qoriq->lock. */

 Caller must hold ptp_qoriq->lock. */

 Caller must hold ptp_qoriq->lock. */

/*

 * Interrupt service routine

/*

 * PTP clock operations

	/*

	 * Calculate diff and round() to the nearest integer

	 *

	 * diff = adj * (ppb / 1000000000)

	 *      = adj * scaled_ppm / 65536000000

/**

 * ptp_qoriq_nominal_freq - calculate nominal frequency according to

 *			    reference clock frequency

 *

 * @clk_src: reference clock frequency

 *

 * The nominal frequency is the desired clock frequency.

 * It should be less than the reference clock frequency.

 * It should be a factor of 1000MHz.

 *

 * Return the nominal frequency

/**

 * ptp_qoriq_auto_config - calculate a set of default configurations

 *

 * @ptp_qoriq: pointer to ptp_qoriq

 * @node: pointer to device_node

 *

 * If below dts properties are not provided, this function will be

 * called to calculate a set of default configurations for them.

 *   "fsl,tclk-period"

 *   "fsl,tmr-prsc"

 *   "fsl,tmr-add"

 *   "fsl,tmr-fiper1"

 *   "fsl,tmr-fiper2"

 *   "fsl,tmr-fiper3" (required only for DPAA2 and ENETC hardware)

 *   "fsl,max-adj"

 *

 * Return 0 if success

	/* Calculate initial frequency compensation value for TMR_ADD register.

	 * freq_comp = ceil(2^32 / freq_ratio)

	 * freq_ratio = reference_clock_freq / nominal_freq

	/* max_adj = 1000000000 * (freq_ratio - 1.0) - 1

	 * freq_ratio = reference_clock_freq / nominal_freq

 The eTSEC uses differnt memory map with DPAA/ENETC */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PTP 1588 clock support - character device implementation.

 *

 * Copyright (C) 2010 OMICRON electronics GmbH

 Check to see if any other pin previously had this function. */

 Check the desired function and channel. */

 Disable whatever function was previously assigned. */

 Tell the drivers to check the flags carefully. */

 Make sure no reserved bit is set. */

 Ensure one of the rising/falling edge bits is set. */

			/*

			 * The "on" field has undefined meaning if

			 * PTP_PEROUT_DUTY_CYCLE isn't set, we must still treat

			 * it as reserved, which must be set to zero.

 The duty cycle must be subunitary. */

				/*

				 * The phase should be specified modulo the

				 * period, therefore anything equal or larger

				 * than 1 period is invalid.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PTP virtual clock driver

 *

 * Copyright 2021 NXP

 The maximum ppb value that long scaled_ppm can support */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Rockchip eFuse Driver

 *

 * Copyright (c) 2015 Rockchip Electronics Co. Ltd.

 * Author: Caesar Wang <wxt@rock-chips.com>

 Switch to standby mode */

 128 Byte efuse, 96 Byte for secure, 32 Byte for non-secure */

 Switch to standby mode */

 deprecated but kept around for dts binding compatibility */

 sentinel */},

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015 Pengutronix, Steffen Trumtrar <kernel@pengutronix.de>

 * Copyright (c) 2017 Pengutronix, Oleksij Rempel <kernel@pengutronix.de>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * i.MX6 OCOTP fusebox driver

 *

 * Copyright (c) 2015 Pengutronix, Philipp Zabel <p.zabel@pengutronix.de>

 *

 * Copyright 2019 NXP

 *

 * Based on the barebox ocotp driver,

 * Copyright (c) 2010 Baruch Siach <baruch@tkos.co.il>,

 *	Orex Computed Radiography

 *

 * Write support based on the fsl_otp driver,

 * Copyright (C) 2010-2013 Freescale Semiconductor, Inc

#define IMX_OCOTP_OFFSET_B0W0		0x400 /* Offset from base address of the

					       * OTP Bank0 Word0

#define IMX_OCOTP_OFFSET_PER_WORD	0x10  /* Offset between the start addr

					       * of two consecutive OTP words.

 Min time to blow a fuse */

 Min time before read */

 > 1000 ns */

 IPG clocks */

		/* HW_OCOTP_CTRL[ERROR] will be set under the following

		 * conditions:

		 * - A write is performed to a shadow register during a shadow

		 *   reload (essentially, while HW_OCOTP_CTRL[RELOAD_SHADOWS] is

		 *   set. In addition, the contents of the shadow register shall

		 *   not be updated.

		 * - A write is performed to a shadow register which has been

		 *   locked.

		 * - A read is performed to from a shadow register which has

		 *   been read locked.

		 * - A program is performed to a fuse word which has been locked

		 * - A read is performed to from a fuse word which has been read

		 *   locked.

		/* 47.3.1.2

		 * For "read locked" registers 0xBADABADA will be returned and

		 * HW_OCOTP_CTRL[ERROR] will be set. It must be cleared by

		 * software before any new write, read or reload access can be

		 * issued

 Deal with some post processing of nvmem cell data */

	/* 47.3.1.3.1

	 * Program HW_OCOTP_TIMING[STROBE_PROG] and HW_OCOTP_TIMING[RELAX]

	 * fields with timing values to match the current frequency of the

	 * ipg_clk. OTP writes will work at maximum bus frequencies as long

	 * as the HW_OCOTP_TIMING parameters are set correctly.

	 *

	 * Note: there are minimum timings required to ensure an OTP fuse burns

	 * correctly that are independent of the ipg_clk. Those values are not

	 * formally documented anywhere however, working from the minimum

	 * timings given in u-boot we can say:

	 *

	 * - Minimum STROBE_PROG time is 10 microseconds. Intuitively 10

	 *   microseconds feels about right as representative of a minimum time

	 *   to physically burn out a fuse.

	 *

	 * - Minimum STROBE_READ i.e. the time to wait post OTP fuse burn before

	 *   performing another read is 37 nanoseconds

	 *

	 * - Minimum RELAX timing is 17 nanoseconds. This final RELAX minimum

	 *   timing is not entirely clear the documentation says "This

	 *   count value specifies the time to add to all default timing

	 *   parameters other than the Tpgm and Trd. It is given in number

	 *   of ipg_clk periods." where Tpgm and Trd refer to STROBE_PROG

	 *   and STROBE_READ respectively. What the other timing parameters

	 *   are though, is not specified. Experience shows a zero RELAX

	 *   value will mess up a re-load of the shadow registers post OTP

	 *   burn.

	/* i.MX 7Solo Applications Processor Reference Manual, Rev. 0.1

	 * 6.4.3.3

 allow only writing one complete OTP word at a time */

 Setup the write timing values */

	/* 47.3.1.3.2

	 * Check that HW_OCOTP_CTRL[BUSY] and HW_OCOTP_CTRL[ERROR] are clear.

	 * Overlapped accesses are not supported by the controller. Any pending

	 * write or reload must be completed before a write access can be

	 * requested.

	/* 47.3.1.3.3

	 * Write the requested address to HW_OCOTP_CTRL[ADDR] and program the

	 * unlock code into HW_OCOTP_CTRL[WR_UNLOCK]. This must be programmed

	 * for each write access. The lock code is documented in the register

	 * description. Both the unlock code and address can be written in the

	 * same operation.

		/*

		 * In banked/i.MX7 mode the OTP register bank goes into waddr

		 * see i.MX 7Solo Applications Processor Reference Manual, Rev.

		 * 0.1 section 6.4.3.1

		/*

		 * Non-banked i.MX6 mode.

		 * OTP write/read address specifies one of 128 word address

		 * locations

	/* 47.3.1.3.4

	 * Write the data to the HW_OCOTP_DATA register. This will automatically

	 * set HW_OCOTP_CTRL[BUSY] and clear HW_OCOTP_CTRL[WR_UNLOCK]. To

	 * protect programming same OTP bit twice, before program OCOTP will

	 * automatically read fuse value in OTP and use read value to mask

	 * program data. The controller will use masked program data to program

	 * a 32-bit word in the OTP per the address in HW_OCOTP_CTRL[ADDR]. Bit

	 * fields with 1's will result in that OTP bit being programmed. Bit

	 * fields with 0's will be ignored. At the same time that the write is

	 * accepted, the controller makes an internal copy of

	 * HW_OCOTP_CTRL[ADDR] which cannot be updated until the next write

	 * sequence is initiated. This copy guarantees that erroneous writes to

	 * HW_OCOTP_CTRL[ADDR] will not affect an active write operation. It

	 * should also be noted that during the programming HW_OCOTP_DATA will

	 * shift right (with zero fill). This shifting is required to program

	 * the OTP serially. During the write operation, HW_OCOTP_DATA cannot be

	 * modified.

	 * Note: on i.MX7 there are four data fields to write for banked write

	 *       with the fuse blowing operation only taking place after data0

	 *	 has been written. This is why data0 must always be the last

	 *	 register written.

 Banked/i.MX7 mode */

 Non-banked i.MX6 mode */

	/* 47.4.1.4.5

	 * Once complete, the controller will clear BUSY. A write request to a

	 * protected or locked region will result in no OTP access and no

	 * setting of HW_OCOTP_CTRL[BUSY]. In addition HW_OCOTP_CTRL[ERROR] will

	 * be set. It must be cleared by software before any new write access

	 * can be issued.

	/* 47.3.1.4

	 * Write Postamble: Due to internal electrical characteristics of the

	 * OTP during writes, all OTP operations following a write must be

	 * separated by 2 us after the clearing of HW_OCOTP_CTRL_BUSY following

	 * the write.

 reload all shadow registers */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * NXP LPC18xx/LPC43xx EEPROM memory NVMEM driver

 *

 * Copyright (c) 2015 Ariel D'Alessandro <ariel@vanguardiasur.com>

 Registers */

 Fixed page size (bytes) */

 EEPROM device requires a ~1500 kHz clock (min 800 kHz, max 1600 kHz) */

 EEPROM requires 3 ms of erase/program time between each writing */

 Wait until EEPROM program operation has finished */

	/*

	 * The last page contains the EEPROM initialization data and is not

	 * writable.

 Wait 100 us while the EEPROM wakes up */

 Wait 100 us while the EEPROM wakes up */

	/*

	 * Clock rate is generated by dividing the system bus clock by the

	 * division factor, contained in the divider register (minus 1 encoded).

	/*

	 * Writing a single word to the page will start the erase/program cycle

	 * automatically

 SPDX-License-Identifier: GPL-2.0-only

/*

 * NXP LPC18xx/43xx OTP memory NVMEM driver

 *

 * Copyright (c) 2016 Joachim Eastwood <manabian@gmail.com>

 *

 * Based on the imx ocotp driver,

 * Copyright (c) 2015 Pengutronix, Philipp Zabel <p.zabel@pengutronix.de>

 *

 * TODO: add support for writing OTP register via API in boot ROM.

/*

 * LPC18xx OTP memory contains 4 banks with 4 32-bit words. Bank 0 starts

 * at offset 0 from the base.

 *

 * Bank 0 contains the part ID for Flashless devices and is reseverd for

 * devices with Flash.

 * Bank 1/2 is generale purpose or AES key storage for secure devices.

 * Bank 3 contains control data, USB ID and generale purpose words.

 SPDX-License-Identifier: GPL-2.0+

/*

 * EEPROM driver for RAVE SP

 *

 * Copyright (C) 2018 Zodiac Inflight Innovations

 *

/**

 * enum rave_sp_eeprom_access_type - Supported types of EEPROM access

 *

 * @RAVE_SP_EEPROM_WRITE:	EEPROM write

 * @RAVE_SP_EEPROM_READ:	EEPROM read

/**

 * enum rave_sp_eeprom_header_size - EEPROM command header sizes

 *

 * @RAVE_SP_EEPROM_HEADER_SMALL: EEPROM header size for "small" devices (< 8K)

 * @RAVE_SP_EEPROM_HEADER_BIG:	 EEPROM header size for "big" devices (> 8K)

/**

 * struct rave_sp_eeprom_page - RAVE SP EEPROM page

 *

 * @type:	Access type (see enum rave_sp_eeprom_access_type)

 * @success:	Success flag (Success = 1, Failure = 0)

 * @data:	Read data



 * Note this structure corresponds to RSP_*_EEPROM payload from RAVE

 * SP ICD

/**

 * struct rave_sp_eeprom - RAVE SP EEPROM device

 *

 * @sp:			Pointer to parent RAVE SP device

 * @mutex:		Lock protecting access to EEPROM

 * @address:		EEPROM device address

 * @header_size:	Size of EEPROM command header for this device

 * @dev:		Pointer to corresponding struct device used for logging

/**

 * rave_sp_eeprom_io - Low-level part of EEPROM page access

 *

 * @eeprom:	EEPROM device to write to

 * @type:	EEPROM access type (read or write)

 * @idx:	number of the EEPROM page

 * @page:	Data to write or buffer to store result (via page->data)

 *

 * This function does all of the low-level work required to perform a

 * EEPROM access. This includes formatting correct command payload,

 * sending it and checking received results.

 *

 * Returns zero in case of success or negative error code in

 * case of failure.

	/*

	 * If there's still room in this command's header it means we

	 * are talkin to EEPROM that uses 16-bit page numbers and we

	 * have to specify index's MSB in payload as well.

	/*

	 * Copy our data to write to command buffer first. In case of

	 * a read data_size should be zero and memcpy would become a

	 * no-op

/**

 * rave_sp_eeprom_page_access - Access single EEPROM page

 *

 * @eeprom:	EEPROM device to access

 * @type:	Access type to perform (read or write)

 * @offset:	Offset within EEPROM to access

 * @data:	Data buffer

 * @data_len:	Size of the data buffer

 *

 * This function performs a generic access to a single page or a

 * portion thereof. Requested access MUST NOT cross the EEPROM page

 * boundary.

 *

 * Returns zero in case of success or negative error code in

 * case of failure.

	/*

	 * This function will not work if data access we've been asked

	 * to do is crossing EEPROM page boundary. Normally this

	 * should never happen and getting here would indicate a bug

	 * in the code.

		/*

		 * If doing a partial write we need to do a read first

		 * to fill the rest of the page with correct data.

	/*

	 * Since we receive the result of the read via 'page.data'

	 * buffer we need to copy that to 'data'

/**

 * rave_sp_eeprom_access - Access EEPROM data

 *

 * @eeprom:	EEPROM device to access

 * @type:	Access type to perform (read or write)

 * @offset:	Offset within EEPROM to access

 * @data:	Data buffer

 * @data_len:	Size of the data buffer

 *

 * This function performs a generic access (either read or write) at

 * arbitrary offset (not necessary page aligned) of arbitrary length

 * (is not constrained by EEPROM page size).

 *

 * Returns zero in case of success or negative error code in case of

 * failure.

		/*

		 * First iteration, if we are doing an access that is

		 * not 32-byte aligned, we need to access only data up

		 * to a page boundary to avoid corssing it in

		 * rave_sp_eeprom_page_access()

			/*

			 * This can only happen once per

			 * rave_sp_eeprom_access() call, so we set

			 * head to zero to process all the other

			 * iterations normally.

		/*

		 * We should never read more that 'residue' bytes

	/*

	 * Per ICD, we have no more than 2 bytes to specify EEPROM

	 * page.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Rockchip OTP Driver

 *

 * Copyright (c) 2018 Rockchip Electronics Co. Ltd.

 * Author: Finley Xiao <finley.xiao@rock-chips.com>

 OTP Register Offsets */

 OTP Register bits and masks */

 list of required clocks */

 clean int status */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2021 Rafał Miłecki <rafal@milecki.pl>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015 MediaTek Inc.

 * Author: Andrew-CT Chen <andrew-ct.chen@mediatek.com>

 sentinel */},

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Amlogic Meson6, Meson8 and Meson8b eFuse Driver

 *

 * Copyright (c) 2017 Martin Blumenstingl <martin.blumenstingl@googlemail.com>

 power up the efuse */

 write the address to read */

 inform the hardware that we changed the address */

 start the read process */

	/*

	 * perform a dummy read to ensure that the HW has the RD_BUSY bit set

	 * when polling for the status below.

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/*

 * STM32 Factory-programmed memory read access driver

 *

 * Copyright (C) 2017, STMicroelectronics - All Rights Reserved

 * Author: Fabrice Gasnier <fabrice.gasnier@st.com> for STMicroelectronics.

 BSEC secure service access from non-secure */

 shadow registers offest */

 32 (x 32-bits) lower shadow registers */

 Round unaligned access to 32-bits */

 read lower data from shadow registers */

 skip first bytes in case of unaligned read */

 Allow only writing complete 32-bits aligned words */

 96 x 32-bits data words */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2018 Spreadtrum Communications Inc.

 PMIC global registers definition */

 Efuse controller registers definition */

 Mask definition for SC27XX_EFUSE_BLOCK_INDEX register */

 Bits definitions for SC27XX_EFUSE_MODE_CTRL register */

 Bits definitions for SC27XX_EFUSE_STATUS register */

 Block number and block width (bytes) definitions */

 Timeout (ms) for the trylock of hardware spinlocks */

 Timeout (us) of polling the status */

/*

 * Since different PMICs of SC27xx series can have different

 * address , we should save address in the device data structure.

/*

 * On Spreadtrum platform, we have multi-subsystems will access the unique

 * efuse controller, so we need one hardware spinlock to synchronize between

 * the multiple subsystems.

 Enable the efuse controller. */

	/*

	 * Before reading, we should ensure the efuse controller is in

	 * standby state.

 Set the block address to be read. */

 Start reading process from efuse memory. */

	/*

	 * Polling the read done status to make sure the reading process

	 * is completed, that means the data can be read out now.

 Read data from efuse memory. */

 Clear the read done flag. */

 Disable the efuse controller after reading. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2017, 2020-2021, The Linux Foundation. All rights reserved.

 read only register offsets */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * i.MX IIM driver

 *

 * Copyright (c) 2017 Pengutronix, Michael Grzeschik <m.grzeschik@pengutronix.de>

 *

 * Based on the barebox iim driver,

 * Copyright (c) 2010 Baruch Siach <baruch@tkos.co.il>,

 *	Orex Computed Radiography

 sentinel */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Nintendo Wii and Wii U OTP driver

 *

 * This is a driver exposing the OTP of a Nintendo Wii or Wii U console.

 *

 * This memory contains common and per-console keys, signatures and

 * related data required to access peripherals.

 *

 * Based on reversed documentation from https://wiiubrew.org/wiki/Hardware/OTP

 *

 * Copyright (C) 2021 Emmanuel Gil Peyrot <linkmauve@linkmauve.fr>

 sentinel */},

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * JZ4780 EFUSE Memory Support driver

 *

 * Copyright (c) 2017 PrasannaKumar Muralidharan <prasannatsmkumar@gmail.com>

 * Copyright (c) 2020 H. Nikolaus Schaller <hns@goldelico.com>

/*

 * Currently supports JZ4780 efuse which has 8K programmable bit.

 * Efuse is separated into seven segments as below:

 *

 * -----------------------------------------------------------------------

 * | 64 bit | 128 bit | 128 bit | 3520 bit | 8 bit | 2296 bit | 2048 bit |

 * -----------------------------------------------------------------------

 *

 * The rom itself is accessed using a 9 bit address line and an 8 word wide bus

 * which reads/writes based on strobes. The strobe is configured in the config

 * register and is based on number of cycles of the bus clock.

 *

 * Driver supports read only as the writes are done in the Factory.

 Control Register */

 Configure Register*/

 Status Register */

 We read 32 byte chunks to avoid complexity in the driver. */

 main entry point */

	/*

	 * rd_adj and rd_strobe are 4 bit values

	 * conditions:

	 *   bus clk_period * (rd_adj + 1) > 6.5ns

	 *   bus clk_period * (rd_adj + 5 + rd_strobe) > 35ns

	 *   i.e. rd_adj >= 6.5ns / clk_period

	 *   i.e. rd_strobe >= 35 ns / clk_period - 5 - rd_adj + 1

	 * constants:

	 *   1 / 6.5ns == 153846154 Hz

	 *   1 / 35ns == 28571429 Hz

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0+

/*

 * i.MX8 OCOTP fusebox driver

 *

 * Copyright 2019 NXP

 *

 * Peng Fan <peng.fan@nxp.com>

 allow only writing one complete OTP word at a time */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Freescale MXS On-Chip OTP driver

 *

 * Copyright (C) 2015 Stefan Wahren <stefan.wahren@i2se.com>

 *

 * Based on the driver from Huang Shijie and Christoph G. Baumann

 OCOTP registers and bits */

 open OCOTP banks for read */

 approximately wait 33 hclk cycles */

 fill up non-data register */

 close banks for power saving */

 sentinel */},

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2019 Xilinx, Inc.

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/*

 * nvmem framework core.

 *

 * Copyright (C) 2015 Srinivas Kandagatla <srinivas.kandagatla@linaro.org>

 * Copyright (C) 2013 Maxime Ripard <maxime.ripard@free-electrons.com>

	/*

	 * Skip all keepouts before the range being accessed.

	 * Keepouts are sorted.

 Access the valid portion before the keepout. */

		/*

		 * Now we're aligned to the start of this keepout zone. Go

		 * through it.

	/*

	 * If we ran out of keepouts but there's still stuff to do, send it

	 * down directly

 Stop the user from reading */

 Stop the user from writing */

 default read/write permissions */

/*

 * nvmem_setup_compat() - Create an additional binary entry in

 * drivers sys directory, to be backwards compatible with the older

 * drivers/misc/eeprom drivers.

 CONFIG_NVMEM_SYSFS */

 CONFIG_NVMEM_SYSFS */

/**

 * nvmem_add_cells() - Add cell information to an nvmem device

 *

 * @nvmem: nvmem device to add cells to.

 * @info: nvmem cell info to add to the device

 * @ncells: number of cells in info

 *

 * Return: 0 or negative error code on failure.

 remove tmp array */

/**

 * nvmem_register_notifier() - Register a notifier block for nvmem events.

 *

 * @nb: notifier block to be called on nvmem events.

 *

 * Return: 0 on success, negative error number on failure.

/**

 * nvmem_unregister_notifier() - Unregister a notifier block for nvmem events.

 *

 * @nb: notifier block to be unregistered.

 *

 * Return: 0 on success, negative error number on failure.

 Ensure keepouts are sorted and don't overlap. */

		/*

		 * Validate keepouts (and holes between) don't violate

		 * word_size constraints.

 Validate keepouts don't violate stride (alignment). */

 Cells already added will be freed later. */

/**

 * nvmem_register() - Register a nvmem device for given nvmem_config.

 * Also creates a binary entry in /sys/bus/nvmem/devices/dev-name/nvmem

 *

 * @config: nvmem device configuration with which nvmem device is created.

 *

 * Return: Will be an ERR_PTR() on error or a valid pointer to nvmem_device

 * on success.

/**

 * nvmem_unregister() - Unregister previously registered nvmem device

 *

 * @nvmem: Pointer to previously registered nvmem device.

/**

 * devm_nvmem_register() - Register a managed nvmem device for given

 * nvmem_config.

 * Also creates a binary entry in /sys/bus/nvmem/devices/dev-name/nvmem

 *

 * @dev: Device that uses the nvmem device.

 * @config: nvmem device configuration with which nvmem device is created.

 *

 * Return: Will be an ERR_PTR() on error or a valid pointer to nvmem_device

 * on success.

/**

 * devm_nvmem_unregister() - Unregister previously registered managed nvmem

 * device.

 *

 * @dev: Device that uses the nvmem device.

 * @nvmem: Pointer to previously registered nvmem device.

 *

 * Return: Will be negative on error or zero on success.

/**

 * of_nvmem_device_get() - Get nvmem device from a given id

 *

 * @np: Device tree node that uses the nvmem device.

 * @id: nvmem name from nvmem-names property.

 *

 * Return: ERR_PTR() on error or a valid pointer to a struct nvmem_device

 * on success.

/**

 * nvmem_device_get() - Get nvmem device from a given id

 *

 * @dev: Device that uses the nvmem device.

 * @dev_name: name of the requested nvmem device.

 *

 * Return: ERR_PTR() on error or a valid pointer to a struct nvmem_device

 * on success.

 try dt first */

/**

 * nvmem_device_find() - Find nvmem device with matching function

 *

 * @data: Data to pass to match function

 * @match: Callback function to check device

 *

 * Return: ERR_PTR() on error or a valid pointer to a struct nvmem_device

 * on success.

/**

 * devm_nvmem_device_put() - put alredy got nvmem device

 *

 * @dev: Device that uses the nvmem device.

 * @nvmem: pointer to nvmem device allocated by devm_nvmem_cell_get(),

 * that needs to be released.

/**

 * nvmem_device_put() - put alredy got nvmem device

 *

 * @nvmem: pointer to nvmem device that needs to be released.

/**

 * devm_nvmem_device_get() - Get nvmem cell of device form a given id

 *

 * @dev: Device that requests the nvmem device.

 * @id: name id for the requested nvmem device.

 *

 * Return: ERR_PTR() on error or a valid pointer to a struct nvmem_cell

 * on success.  The nvmem_cell will be freed by the automatically once the

 * device is freed.

 This is the right entry. */

 Provider may not be registered yet. */

/**

 * of_nvmem_cell_get() - Get a nvmem cell from given device node and cell id

 *

 * @np: Device tree node that uses the nvmem cell.

 * @id: nvmem cell name from nvmem-cell-names property, or NULL

 *      for the cell at index 0 (the lone cell with no accompanying

 *      nvmem-cell-names property).

 *

 * Return: Will be an ERR_PTR() on error or a valid pointer

 * to a struct nvmem_cell.  The nvmem_cell will be freed by the

 * nvmem_cell_put().

 if cell name exists, find index to the name */

/**

 * nvmem_cell_get() - Get nvmem cell of device form a given cell name

 *

 * @dev: Device that requests the nvmem cell.

 * @id: nvmem cell name to get (this corresponds with the name from the

 *      nvmem-cell-names property for DT systems and with the con_id from

 *      the lookup entry for non-DT systems).

 *

 * Return: Will be an ERR_PTR() on error or a valid pointer

 * to a struct nvmem_cell.  The nvmem_cell will be freed by the

 * nvmem_cell_put().

 try dt first */

 NULL cell id only allowed for device tree; invalid otherwise */

/**

 * devm_nvmem_cell_get() - Get nvmem cell of device form a given id

 *

 * @dev: Device that requests the nvmem cell.

 * @id: nvmem cell name id to get.

 *

 * Return: Will be an ERR_PTR() on error or a valid pointer

 * to a struct nvmem_cell.  The nvmem_cell will be freed by the

 * automatically once the device is freed.

/**

 * devm_nvmem_cell_put() - Release previously allocated nvmem cell

 * from devm_nvmem_cell_get.

 *

 * @dev: Device that requests the nvmem cell.

 * @cell: Previously allocated nvmem cell by devm_nvmem_cell_get().

/**

 * nvmem_cell_put() - Release previously allocated nvmem cell.

 *

 * @cell: Previously allocated nvmem cell by nvmem_cell_get().

 First shift */

 setup rest of the bytes if any */

 Get bits from next byte and shift them towards msb */

 point to the msb */

 result fits in less bytes */

 clear msb bits if any leftover in the last byte */

 shift bits in-place */

/**

 * nvmem_cell_read() - Read a given nvmem cell

 *

 * @cell: nvmem cell to be read.

 * @len: pointer to length of cell which will be populated on successful read;

 *	 can be NULL.

 *

 * Return: ERR_PTR() on error or a valid pointer to a buffer on success. The

 * buffer should be freed by the consumer with a kfree().

 setup the first byte with lsb bits from nvmem */

 setup rest of the byte if any */

 Get last byte bits and shift them towards lsb */

 if it's not end on byte boundary */

 setup the last byte with msb bits from nvmem */

 free the tmp buffer */

/**

 * nvmem_cell_write() - Write to a given nvmem cell

 *

 * @cell: nvmem cell to be written.

 * @buf: Buffer to be written.

 * @len: length of buffer to be written to nvmem cell.

 *

 * Return: length of bytes written or negative on failure.

/**

 * nvmem_cell_read_u8() - Read a cell value as a u8

 *

 * @dev: Device that requests the nvmem cell.

 * @cell_id: Name of nvmem cell to read.

 * @val: pointer to output value.

 *

 * Return: 0 on success or negative errno.

/**

 * nvmem_cell_read_u16() - Read a cell value as a u16

 *

 * @dev: Device that requests the nvmem cell.

 * @cell_id: Name of nvmem cell to read.

 * @val: pointer to output value.

 *

 * Return: 0 on success or negative errno.

/**

 * nvmem_cell_read_u32() - Read a cell value as a u32

 *

 * @dev: Device that requests the nvmem cell.

 * @cell_id: Name of nvmem cell to read.

 * @val: pointer to output value.

 *

 * Return: 0 on success or negative errno.

/**

 * nvmem_cell_read_u64() - Read a cell value as a u64

 *

 * @dev: Device that requests the nvmem cell.

 * @cell_id: Name of nvmem cell to read.

 * @val: pointer to output value.

 *

 * Return: 0 on success or negative errno.

	/*

	 * If nbits is set then nvmem_cell_read() can significantly exaggerate

	 * the length of the real data. Throw away the extra junk.

/**

 * nvmem_cell_read_variable_le_u32() - Read up to 32-bits of data as a little endian number.

 *

 * @dev: Device that requests the nvmem cell.

 * @cell_id: Name of nvmem cell to read.

 * @val: pointer to output value.

 *

 * Return: 0 on success or negative errno.

 Copy w/ implicit endian conversion */

/**

 * nvmem_cell_read_variable_le_u64() - Read up to 64-bits of data as a little endian number.

 *

 * @dev: Device that requests the nvmem cell.

 * @cell_id: Name of nvmem cell to read.

 * @val: pointer to output value.

 *

 * Return: 0 on success or negative errno.

 Copy w/ implicit endian conversion */

/**

 * nvmem_device_cell_read() - Read a given nvmem device and cell

 *

 * @nvmem: nvmem device to read from.

 * @info: nvmem cell info to be read.

 * @buf: buffer pointer which will be populated on successful read.

 *

 * Return: length of successful bytes read on success and negative

 * error code on error.

/**

 * nvmem_device_cell_write() - Write cell to a given nvmem device

 *

 * @nvmem: nvmem device to be written to.

 * @info: nvmem cell info to be written.

 * @buf: buffer to be written to cell.

 *

 * Return: length of bytes written or negative error code on failure.

/**

 * nvmem_device_read() - Read from a given nvmem device

 *

 * @nvmem: nvmem device to read from.

 * @offset: offset in nvmem device.

 * @bytes: number of bytes to read.

 * @buf: buffer pointer which will be populated on successful read.

 *

 * Return: length of successful bytes read on success and negative

 * error code on error.

/**

 * nvmem_device_write() - Write cell to a given nvmem device

 *

 * @nvmem: nvmem device to be written to.

 * @offset: offset in nvmem device.

 * @bytes: number of bytes to write.

 * @buf: buffer to be written.

 *

 * Return: length of bytes written or negative error code on failure.

/**

 * nvmem_add_cell_table() - register a table of cell info entries

 *

 * @table: table of cell info entries

/**

 * nvmem_del_cell_table() - remove a previously registered cell info table

 *

 * @table: table of cell info entries

/**

 * nvmem_add_cell_lookups() - register a list of cell lookup entries

 *

 * @entries: array of cell lookup entries

 * @nentries: number of cell lookup entries in the array

/**

 * nvmem_del_cell_lookups() - remove a list of previously added cell lookup

 *                            entries

 *

 * @entries: array of cell lookup entries

 * @nentries: number of cell lookup entries in the array

/**

 * nvmem_dev_name() - Get the name of a given nvmem device.

 *

 * @nvmem: nvmem device.

 *

 * Return: name of the nvmem device.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2020 Nicolas Saenz Julienne <nsaenzjulienne@suse.de>

	/*

	 * Only map the reserved memory at this point to avoid potential rogue

	 * kernel threads inadvertently modifying it. Based on the current

	 * uses-cases for this driver, the performance hit isn't a concern.

	 * Nor is likely to be, given the nature of the subsystem. Most nvmem

	 * devices operate over slow buses to begin with.

	 *

	 * An alternative would be setting the memory as RO, set_memory_ro(),

	 * but as of Dec 2020 this isn't possible on arm64.

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2019 Spreadtrum Communications Inc.

 Block width (bytes) definitions */

/*

 * The Spreadtrum AP efuse contains 2 parts: normal efuse and secure efuse,

 * and we can only access the normal efuse in kernel. So define the normal

 * block offset index and normal block numbers.

 Timeout (ms) for the trylock of hardware spinlocks */

/*

 * Since different Spreadtrum SoC chip can have different normal block numbers

 * and offset. And some SoC can support block double feature, which means

 * when reading or writing data to efuse memory, the controller can save double

 * data in case one data become incorrect after a long period.

 *

 * Thus we should save them in the device data structure.

/*

 * On Spreadtrum platform, we have multi-subsystems will access the unique

 * efuse controller, so we need one hardware spinlock to synchronize between

 * the multiple subsystems.

 Open or close efuse power need wait 1000us to make power stable. */

 Open or close efuse power need wait 1000us to make power stable. */

 Open or close efuse power need wait 1000us to make power stable. */

	/*

	 * We need set the correct magic number before writing the efuse to

	 * allow programming, and block other programming until we clear the

	 * magic number.

	/*

	 * Power on the efuse, enable programme and enable double data

	 * if asked.

	/*

	 * Enable the auto-check function to validate if the programming is

	 * successful.

 Disable auto-check and data double after programming */

	/*

	 * Check the efuse error status, if the programming is successful,

	 * we should lock this efuse block to avoid programming again.

	/*

	 * Need power on the efuse before reading data from efuse, and will

	 * power off the efuse after reading process.

 Enable double data if asked */

 Start to read data from efuse block */

 Disable double data */

 Power off the efuse */

	/*

	 * Check the efuse error status and clear them if there are some

	 * errors occurred.

	/*

	 * If the writing bytes are equal with the block width, which means the

	 * whole block will be programmed. For this case, we should not allow

	 * this block to be programmed again by locking this block.

	 *

	 * If the block was programmed partially, we should allow this block to

	 * be programmed again.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Allwinner sunXi SoCs Security ID support.

 *

 * Copyright (c) 2013 Oliver Schinagl <oliver@schinagl.nl>

 * Copyright (C) 2014 Maxime Ripard <maxime.ripard@free-electrons.com>

 Registers and special values for doing register-based SID readout on H3 */

 Set word, lock access, and set read command */

/*

 * On Allwinner H3, the value on the 0x200 offset of the SID controller seems

 * to be not reliable at all.

 * Read by the registers instead.

 .stride = 4 so offset is guaranteed to be aligned */

 Handle any trailing bytes */

 sentinel */},

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2015 Srinivas Kandagatla <srinivas.kandagatla@linaro.org>

 Blow timer clock frequency in Mhz */

 Amount of time required to hold charge to blow fuse in micro-seconds */

/**

 * struct qfprom_soc_data - config that varies from SoC to SoC.

 *

 * @accel_value:             Should contain qfprom accel value.

 * @qfprom_blow_timer_value: The timer value of qfprom when doing efuse blow.

 * @qfprom_blow_set_freq:    The frequency required to set when we start the

 *                           fuse blowing.

 * @qfprom_blow_uV:          LDO voltage to be set when doing efuse blow

/**

 * struct qfprom_priv - structure holding qfprom attributes

 *

 * @qfpraw:       iomapped memory space for qfprom-efuse raw address space.

 * @qfpconf:      iomapped memory space for qfprom-efuse configuration address

 *                space.

 * @qfpcorrected: iomapped memory space for qfprom corrected address space.

 * @qfpsecurity:  iomapped memory space for qfprom security control space.

 * @dev:          qfprom device structure.

 * @secclk:       Clock supply.

 * @vcc:          Regulator supply.

 * @soc_data:     Data that for things that varies from SoC to SoC.

/**

 * struct qfprom_touched_values - saved values to restore after blowing

 *

 * @clk_rate: The rate the clock was at before blowing.

 * @accel_val: The value of the accel reg before blowing.

 * @timer_val: The value of the timer before blowing.

/**

 * struct qfprom_soc_compatible_data - Data matched against the SoC

 * compatible string.

 *

 * @keepout: Array of keepout regions for this SoC.

 * @nkeepout: Number of elements in the keepout array.

/**

 * qfprom_disable_fuse_blowing() - Undo enabling of fuse blowing.

 * @priv: Our driver data.

 * @old:  The data that was stashed from before fuse blowing.

 *

 * Resets the value of the blow timer, accel register and the clock

 * and voltage settings.

 *

 * Prints messages if there are errors but doesn't return an error code

 * since there's not much we can do upon failure.

	/*

	 * This may be a shared rail and may be able to run at a lower rate

	 * when we're not blowing fuses.  At the moment, the regulator framework

	 * applies voltage constraints even on disabled rails, so remove our

	 * constraints and allow the rail to be adjusted by other users.

/**

 * qfprom_enable_fuse_blowing() - Enable fuse blowing.

 * @priv: Our driver data.

 * @old:  We'll stash stuff here to use when disabling.

 *

 * Sets the value of the blow timer, accel register and the clock

 * and voltage settings.

 *

 * Prints messages if there are errors so caller doesn't need to.

 *

 * Return: 0 or -err.

	/*

	 * Hardware requires a minimum voltage for fuse blowing.

	 * This may be a shared rail so don't specify a maximum.

	 * Regulator constraints will cap to the actual maximum.

/**

 * qfprom_efuse_reg_write() - Write to fuses.

 * @context: Our driver data.

 * @reg:     The offset to write at.

 * @_val:    Pointer to data to write.

 * @bytes:   The number of bytes to write.

 *

 * Writes to fuses.  WARNING: THIS IS PERMANENT.

 *

 * Return: 0 or -err.

	/*

	 * The hardware only allows us to write word at a time, but we can

	 * read byte at a time.  Until the nvmem framework allows a separate

	 * word_size and stride for reading vs. writing, we'll enforce here.

 Give an error, but not much we can do in this case */

 The corrected section is always provided */

	/*

	 * If more than one region is provided then the OS has the ability

	 * to write.

 Only enable writing if we have SoC data. */

 sentinel */},

/*

 * Copyright (C) 2016 Broadcom

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

/*

 * # of tries for OTP Status. The time to execute a command varies. The slowest

 * commands are writes which also vary based on the # of bits turned on. Writing

 * 0xffffffff takes ~3800 us.

 Sequence to enable OTP program */

 OTPC Commands */

 OTPC Status Bits */

 OTPC register definition */

 in words. */

 128 bit row / 4 words support. */

 128 bit row / 4 words support. */

 Write the magic sequence to enable programming */

 sentinel */ }

 Get OTP base address register. */

 Enable CPU access to OTPC. */

 Read size of memory in words. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Amlogic Meson GX eFuse Driver

 *

 * Copyright (c) 2016 Endless Computers, Inc.

 * Author: Carlo Caione <carlo@endlessm.com>

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * UniPhier eFuse driver

 *

 * Copyright (C) 2017 Socionext Inc.

 sentinel */},

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2015 Toradex AG.

 *

 * Author: Sanchayan Maity <sanchayan.maity@toradex.com>

 *

 * Based on the barebox ocotp driver,

 * Copyright (c) 2010 Baruch Siach <baruch@tkos.co.il>

 *	Orex Computed Radiography

 OCOTP Register Offsets */

 OCOTP Register bits and masks */

 Refer section OTP read/write timing parameters in TRM */

			/*

			 * In case of error, we do not abort and expect to read

			 * 0xBADABADA as mentioned by the TRM. We just read this

			 * value and return.

 sentinel */},

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vDPA bus.

 *

 * Copyright (c) 2020, Red Hat. All rights reserved.

 *     Author: Jason Wang <jasowang@redhat.com>

 *

 A global mutex that protects vdpa management device and device level operations. */

/**

 * __vdpa_alloc_device - allocate and initilaize a vDPA device

 * This allows driver to some prepartion after device is

 * initialized but before registered.

 * @parent: the parent device

 * @config: the bus operations that is supported by this device

 * @size: size of the parent structure that contains private data

 * @name: name of the vdpa device; optional.

 * @use_va: indicate whether virtual address must be used by this device

 *

 * Driver should use vdpa_alloc_device() wrapper macro instead of

 * using this directly.

 *

 * Return: Returns an error when parent/config/dma_dev is not set or fail to get

 *	   ida.

 It should only work for the device that use on-chip IOMMU */

/**

 * _vdpa_register_device - register a vDPA device with vdpa lock held

 * Caller must have a succeed call of vdpa_alloc_device() before.

 * Caller must invoke this routine in the management device dev_add()

 * callback after setting up valid mgmtdev for this vdpa device.

 * @vdev: the vdpa device to be registered to vDPA bus

 * @nvqs: number of virtqueues supported by this device

 *

 * Return: Returns an error when fail to add device to vDPA bus

/**

 * vdpa_register_device - register a vDPA device

 * Callers must have a succeed call of vdpa_alloc_device() before.

 * @vdev: the vdpa device to be registered to vDPA bus

 * @nvqs: number of virtqueues supported by this device

 *

 * Return: Returns an error when fail to add to vDPA bus

/**

 * _vdpa_unregister_device - unregister a vDPA device

 * Caller must invoke this routine as part of management device dev_del()

 * callback.

 * @vdev: the vdpa device to be unregisted from vDPA bus

/**

 * vdpa_unregister_device - unregister a vDPA device

 * @vdev: the vdpa device to be unregisted from vDPA bus

/**

 * __vdpa_register_driver - register a vDPA device driver

 * @drv: the vdpa device driver to be registered

 * @owner: module owner of the driver

 *

 * Return: Returns an err when fail to do the registration

/**

 * vdpa_unregister_driver - unregister a vDPA device driver

 * @drv: the vdpa device driver to be unregistered

/**

 * vdpa_mgmtdev_register - register a vdpa management device

 *

 * @mdev: Pointer to vdpa management device

 * vdpa_mgmtdev_register() register a vdpa management device which supports

 * vdpa device management.

 * Return: Returns 0 on success or failure when required callback ops are not

 *         initialized.

 Filter out all the entries belong to this management device and delete it. */

/**

 * vdpa_get_config - Get one or more device configuration fields.

 * @vdev: vdpa device to operate on

 * @offset: starting byte offset of the field

 * @buf: buffer pointer to read to

 * @len: length of the configuration fields in bytes

	/*

	 * Config accesses aren't supposed to trigger before features are set.

	 * If it does happen we assume a legacy guest.

/**

 * vdpa_set_config - Set one or more device configuration fields.

 * @vdev: vdpa device to operate on

 * @offset: starting byte offset of the field

 * @buf: buffer pointer to read from

 * @length: length of the configuration fields in bytes

	/* Bus name is optional for simulated management device, so ignore the

	 * device with bus if bus attribute is provided.

	/* Skip checking capability if user didn't prefer to configure any

	 * device networking attributes. It is likely that user might have used

	 * a device specific method to configure such attributes or using device

	 * default attributes.

 virtio spec 1.1 section 5.1.4.1 for valid MTU range */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * VDPA simulator for networking device.

 *

 * Copyright (c) 2020, Red Hat Inc. All rights reserved.

 *     Author: Jason Wang <jasowang@redhat.com>

 *

 Make sure data is wrote before advancing index */

 Make sure used is visible before rasing the interrupt. */

 Setup default MTU to be 1500 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * VDPA simulator for block device.

 *

 * Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.

 * Copyright (c) 2021, Red Hat Inc. All rights reserved.

 *

/* Returns 'true' if the request is handled (with or without an I/O error)

 * and the status is correctly written in the last byte of the 'in iov',

 * 'false' otherwise.

	/* The last byte is the status and we checked if the last iov has

	 * enough room for it.

	/* If some operations fail, we need to skip the remaining bytes

	 * to put the status in the last byte

 Last byte is the status */

 Make sure data is wrote before advancing index */

 Make sure used is visible before rasing the interrupt. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * VDPA device simulator core.

 *

 * Copyright (c) 2020, Red Hat Inc. All rights reserved.

 *     Author: Jason Wang <jasowang@redhat.com>

 *

 We set the limit_pfn to the maximum (ULONG_MAX - 1) */

 For simplicity we use an IOVA allocator with byte granularity */

 DMA mapping must be done by driver */

 We don't support config interrupt */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * MMU-based software IOTLB.

 *

 * Copyright (C) 2020-2021 Bytedance Inc. and/or its affiliates. All rights reserved.

 *

 * Author: Xie Yongji <xieyongji@bytedance.com>

 *

	/*

	 * Freeing non-power-of-two-sized allocations back into the IOVA caches

	 * will come back to bite us badly, so we have to waste a bit of space

	 * rounding up anything cacheable to make sure that can't happen. The

	 * order of the unadjusted size will still match upon freeing.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * VDUSE: vDPA Device in Userspace

 *

 * Copyright (C) 2020-2021 Bytedance Inc. and/or its affiliates. All rights reserved.

 *

 * Author: Xie Yongji <xieyongji@bytedance.com>

 *

 Mark the device as malfunction when there is a timeout */

 The coherent mappings are handled in vduse_dev_free_coherent() */

 Now we only support read-only configuration space */

		/*

		 * Just mirror what driver wrote here.

		 * The driver is expected to check FEATURE_OK later.

 Make sure the inflight messages can processed after reconncection */

 Now we only support read-only configuration space */

 /dev/vduse/control */

 /dev/vduse/$DEVICE */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vDPA bridge driver for modern virtio-pci device

 *

 * Copyright (c) 2020, Red Hat Inc. All rights reserved.

 * Author: Jason Wang <jasowang@redhat.com>

 *

 * Based on virtio_pci_modern.c.

	/* Note that this is not supported by virtio specification, so

	 * we return -EOPNOTSUPP here. This means we can't support live

	 * migration, vhost device start/stop.

	/* Note that this is not supported by virtio specification.

	 * But if the state is by chance equal to the device initial

	 * state, we can let it go.

 only dynamic ids */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vDPA bridge driver for Alibaba ENI(Elastic Network Interface)

 *

 * Copyright (c) 2021, Alibaba Inc. All rights reserved.

 * Author: Wu Zongyong <wuzongyong@linux.alibaba.com>

 *

	/* ENI is build upon virtio-pci specfication which not support

	 * to set state of virtqueue. But if the state is equal to the

	 * device initial state by chance, we can let it go.

	/* ENI is a legacy virtio-pci device. This is not supported

	 * by specification. But we can disable virtqueue by setting

	 * address to 0.

	/* ENI is a legacy virtio-pci device which not allow to change

	 * virtqueue size. Just report a error if someone tries to

	 * change it.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel IFC VF NIC driver for virtio dataplane offloading

 *

 * Copyright (C) 2020 Intel Corporation.

 *

 * Author: Zhu Lingshan <lingshan.zhu@intel.com>

 *

 flush set_status, make sure VF is stopped, reset */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel IFC VF NIC driver for virtio dataplane offloading

 *

 * Copyright (C) 2020 Intel Corporation.

 *

 * Author: Zhu Lingshan <lingshan.zhu@intel.com>

 *

 all queues and config interrupt  */

/*

 * IFCVF currently does't have on-chip IOMMU, so not

 * implemented set_map()/dma_map()/dma_unmap()

	/* This drirver drives both modern virtio devices and transitional

	 * devices in modern mode.

	 * vDPA requires feature bit VIRTIO_F_ACCESS_PLATFORM,

	 * so legacy devices and transitional devices in legacy

	 * mode will not work for vDPA, this driver will not

	 * drive devices with legacy interface.

 N3000 network device */

 C5000X-PL network device */

 C5000X-PL block device */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies Ltd. */

 0 means not supported */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies Ltd. */

 DIV_ROUND_UP where the divider is a power of 2 give by its log base 2 value */

/* The iotlb pointer contains a list of maps. Go over the maps, possibly

 * merging mergeable maps, and create direct memory keys that provide the

 * device access to memory. The direct mkeys are then referred to by the

 * indirect memory key that provides access to the enitre address space given

 * by iotlb.

					/* We have a hole in the map. Check how

					 * many null keys are required to fill it.

	/* Create the memory key that defines the guests's address space. This

	 * memory key refers to the direct keys that contain the MTT

	 * translations

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

 Copyright (c) 2020 Mellanox Technologies Ltd. */

	/* Resources for implementing the notification channel from the device

	 * to the driver. fwqp is the firmware end of an RC connection; the

	 * other end is vqqp used by the driver. cq is is where completions are

	 * reported.

	/* umem resources are required for the virtqueue operation. They're use

	 * is internal and they must be provided by the driver.

 keep last in the struct */

/* We will remove this limitation once mlx5_vdpa_alloc_resources()

 * provides for driver space allocation

	/* Serialize vq resources creation and destruction. This is required

	 * since memory map might change and we need to destroy and create

	 * resources while driver in operational.

 TODO: cross-endian support */

		/* Firmware QP is allocated by the driver for the firmware's

		 * use so we can skip part of the params as they will be chosen by firmware

	/* make sure CQ cosumer update is visible to the hardware before updating

	 * RX doorbell record.

			/* If completions keep coming while we poll, we want to

			 * let the hardware know that we consumed them by

			 * updating the doorbell record.  We also let vdpa core

			 * know about this so it passes it on the virtio driver

			 * on the guest.

	/* Use vector 0 by default. Consider adding code to choose least used

	 * vector.

 prefer split queue */

/* Two QPs are used by each virtqueue. One is used by the driver and one by

 * firmware. The fw argument indicates whether the subjected QP is the one used

 * by firmware.

 Make sure data is written before advancing index */

	/* If the virtq object was destroyed, use the value saved at

	 * the last minute of suspend_vq. This caters for userspace

	 * that cares about emulating the index after vq is stopped.

		/* Firmware returns a wrong value for the available index.

		 * Since both values should be identical, we take the value of

		 * used_idx which is reported correctly.

 MQ supported. CVQ index is right above the last data virtqueue's */

			/* Only CVQ supportted. data virtqueues occupy indices 0 and 1.

			 * CVQ gets index 2

 Two data virtqueues only: one for rx and one for tx */

 not supported */

	/* If SF BAR size is smaller than PAGE_SIZE, do not use direct

	 * notification to avoid the risk of mapping pages that contain BAR of more

	 * than one SF

 we save one virtqueue for control virtqueue should we require it */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PS3 Storage Library

 *

 * Copyright (C) 2007 Sony Computer Entertainment Inc.

 * Copyright 2007 Sony Corp.

/*

 * A workaround for flash memory I/O errors when the internal hard disk

 * has not been formatted for OtherOS use.  Delay disk close until flash

 * memory is closed.

 special case: CD-ROM is assumed always accessible */

 We can access at least one region */

/**

 *	ps3stor_setup - Setup a storage device before use

 *	@dev: Pointer to a struct ps3_storage_device

 *	@handler: Pointer to an interrupt handler

 *

 *	Returns 0 for success, or an error code

/**

 *	ps3stor_teardown - Tear down a storage device after use

 *	@dev: Pointer to a struct ps3_storage_device

/**

 *	ps3stor_read_write_sectors - read/write from/to a storage device

 *	@dev: Pointer to a struct ps3_storage_device

 *	@lpar: HV logical partition address

 *	@start_sector: First sector to read/write

 *	@sectors: Number of sectors to read/write

 *	@write: Flag indicating write (non-zero) or read (zero)

 *

 *	Returns 0 for success, -1 in case of failure to submit the command, or

 *	an LV1 status value in case of other errors

/**

 *	ps3stor_send_command - send a device command to a storage device

 *	@dev: Pointer to a struct ps3_storage_device

 *	@cmd: Command number

 *	@arg1: First command argument

 *	@arg2: Second command argument

 *	@arg3: Third command argument

 *	@arg4: Fourth command argument

 *

 *	Returns 0 for success, -1 in case of failure to submit the command, or

 *	an LV1 status value in case of other errors

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 virtual uart

 *

 *  Copyright (C) 2006 Sony Computer Entertainment Inc.

 *  Copyright 2006 Sony Corp.

/**

 * vuart - An inter-partition data link service.

 *  port 0: PS3 AV Settings.

 *  port 2: PS3 System Manager.

 *

 * The vuart provides a bi-directional byte stream data link between logical

 * partitions.  Its primary role is as a communications link between the guest

 * OS and the system policy module.  The current HV does not support any

 * connections other than those listed.

 read only */

 read only */

 read only */

 read only */

 read only */

/**

 * struct ps3_vuart_port_priv - private vuart device data.

/**

 * struct ports_bmp - bitmap indicating ports needing service.

 *

 * A 256 bit read only bitmap indicating ports needing service.  Do not write

 * to these bits.  Must not cross a page boundary.

/**

 * ps3_vuart_set_interrupt_mask - Enable/disable the port interrupt sources.

 * @dev: The struct ps3_system_bus_device instance.

 * @bmp: Logical OR of enum vuart_interrupt_mask values. A zero bit disables.

/**

 * ps3_vuart_raw_write - Low level write helper.

 * @dev: The struct ps3_system_bus_device instance.

 *

 * Do not call ps3_vuart_raw_write directly, use ps3_vuart_write.

/**

 * ps3_vuart_raw_read - Low level read helper.

 * @dev: The struct ps3_system_bus_device instance.

 *

 * Do not call ps3_vuart_raw_read directly, use ps3_vuart_read.

/**

 * ps3_vuart_clear_rx_bytes - Discard bytes received.

 * @dev: The struct ps3_system_bus_device instance.

 * @bytes: Max byte count to discard, zero = all pending.

 *

 * Used to clear pending rx interrupt source.  Will not block.

 Add some extra space for recently arrived data. */

 Don't include these bytes in the stats. */

/**

 * struct list_buffer - An element for a port device fifo buffer list.

/**

 * ps3_vuart_write - the entry point for writing data to a port

 * @dev: The struct ps3_system_bus_device instance.

 *

 * If the port is idle on entry as much of the incoming data is written to

 * the port as the port will accept.  Otherwise a list buffer is created

 * and any remaning incoming data is copied to that buffer.  The buffer is

 * then enqueued for transmision via the transmit interrupt.

/**

 * ps3_vuart_queue_rx_bytes - Queue waiting bytes into the buffer list.

 * @dev: The struct ps3_system_bus_device instance.

 * @bytes_queued: Number of bytes queued to the buffer list.

 *

 * Must be called with priv->rx_list.lock held.

 Add some extra space for recently arrived data. */

/**

 * ps3_vuart_read - The entry point for reading data from a port.

 *

 * Queue data waiting at the port, and if enough bytes to satisfy the request

 * are held in the buffer list those bytes are dequeued and copied to the

 * caller's buffer.  Emptied list buffers are retiered.  If the request cannot

 * be statified by bytes held in the list buffers -EAGAIN is returned.

 Queue rx bytes here for polled reads. */

/**

 * ps3_vuart_work - Asynchronous read handler.

/**

 * ps3_vuart_handle_interrupt_tx - third stage transmit interrupt handler

 *

 * Services the transmit interrupt for the port.  Writes as much data from the

 * buffer list as the port will accept.  Retires any emptied list buffers and

 * adjusts the final list buffer state for a partial write.

/**

 * ps3_vuart_handle_interrupt_rx - third stage receive interrupt handler

 *

 * Services the receive interrupt for the port.  Creates a list buffer and

 * copies all waiting port data to that buffer and enqueues the buffer in the

 * buffer list.  Buffer list data is dequeued via ps3_vuart_read.

/**

 * ps3_vuart_handle_port_interrupt - second stage interrupt handler

 *

 * Services any pending interrupt types for the port.  Passes control to the

 * third stage type specific interrupt handler.  Returns control to the first

 * stage handler after one iteration.

/**

 * ps3_vuart_irq_handler - first stage interrupt handler

 *

 * Loops finding any interrupting port and its associated instance data.

 * Passes control to the second stage port specific interrupt handler.  Loops

 * until all outstanding interrupts are serviced.

 Setup dev->driver_priv. */

 clear stale pending interrupts */

/**

 * ps3_vuart_cleanup - common cleanup helper.

 * @dev: The struct ps3_system_bus_device instance.

 *

 * Cleans interrupts and HV resources.  Must be called with

 * vuart_bus_priv.probe_mutex held.  Used by ps3_vuart_remove and

 * ps3_vuart_shutdown.  After this call, polled reading will still work.

/**

 * ps3_vuart_remove - Completely clean the device instance.

 * @dev: The struct ps3_system_bus_device instance.

 *

 * Cleans all memory, interrupts and HV resources.  After this call the

 * device can no longer be used.

/**

 * ps3_vuart_shutdown - Cleans interrupts and HV resources.

 * @dev: The struct ps3_system_bus_device instance.

 *

 * Cleans interrupts and HV resources.  After this call the

 * device can still be used in polling mode.  This behavior required

 * by sys-manager to be able to complete the device power operation

 * sequence.

/**

 * ps3_vuart_port_driver_register - Add a vuart port device driver.

/**

 * ps3_vuart_port_driver_unregister - Remove a vuart port device driver.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PS3 Logical Performance Monitor.

 *

 *  Copyright (C) 2007 Sony Computer Entertainment Inc.

 *  Copyright 2007 Sony Corp.

 BOOKMARK tag macros */

 CBE PM CONTROL register macros */

 CBE PM START STOP register macros */

 CBE PM COUNTER register macres */

 BASE SIGNAL GROUP NUMBER macros */

/**

 * struct ps3_lpm_shadow_regs - Performance monitor shadow registers.

 *

 * @pm_control: Shadow of the processor's pm_control register.

 * @pm_start_stop: Shadow of the processor's pm_start_stop register.

 * @group_control: Shadow of the processor's group_control register.

 * @debug_bus_control: Shadow of the processor's debug_bus_control register.

 *

 * The logical performance monitor provides a write-only interface to

 * these processor registers.  These shadow variables cache the processor

 * register values for reading.

 *

 * The initial value of the shadow registers at lpm creation is

 * PS3_LPM_SHADOW_REG_INIT.

/**

 * struct ps3_lpm_priv - Private lpm device data.

 *

 * @open: An atomic variable indicating the lpm driver has been opened.

 * @rights: The lpm rigths granted by the system policy module.  A logical

 *  OR of enum ps3_lpm_rights.

 * @node_id: The node id of a BE processor whose performance monitor this

 *  lpar has the right to use.

 * @pu_id: The lv1 id of the logical PU.

 * @lpm_id: The lv1 id of this lpm instance.

 * @outlet_id: The outlet created by lv1 for this lpm instance.

 * @tb_count: The number of bytes of data held in the lv1 trace buffer.

 * @tb_cache: Kernel buffer to receive the data from the lv1 trace buffer.

 *  Must be 128 byte aligned.

 * @tb_cache_size: Size of the kernel @tb_cache buffer.  Must be 128 byte

 *  aligned.

 * @tb_cache_internal: An unaligned buffer allocated by this driver to be

 *  used for the trace buffer cache when ps3_lpm_open() is called with a

 *  NULL tb_cache argument.  Otherwise unused.

 * @shadow: Processor register shadow of type struct ps3_lpm_shadow_regs.

 * @sbd: The struct ps3_system_bus_device attached to this driver.

 *

 * The trace buffer is a buffer allocated and used internally to the lv1

 * hypervisor to collect trace data.  The trace buffer cache is a guest

 * buffer that accepts the trace data from the trace buffer.

/**

 * lpm_priv - Static instance of the lpm data.

 *

 * Since the exported routines don't support the notion of a device

 * instance we need to hold the instance in this static variable

 * and then only allow at most one instance at a time to be created.

/**

 * use_start_stop_bookmark - Enable the PPU bookmark trace.

 *

 * And it enables PPU bookmark triggers ONLY if the other triggers are not set.

 * The start/stop bookmarks are inserted at ps3_enable_pm() and ps3_disable_pm()

 * to start/stop LPM.

 *

 * Used to get good quality of the performance counter.

	/*

	 * As per the PPE book IV, to avoid bookmark loss there must

	 * not be a traced branch within 10 cycles of setting the

	 * SPRN_BKMK register.  The actual text is unclear if 'within'

	 * includes cycles before the call.

/**

 * ps3_read_phys_ctr - Read physical counter registers.

 *

 * Each physical counter can act as one 32 bit counter or as two 16 bit

 * counters.

/**

 * ps3_write_phys_ctr - Write physical counter registers.

 *

 * Each physical counter can act as one 32 bit counter or as two 16 bit

 * counters.

/**

 * ps3_read_ctr - Read counter.

 *

 * Read 16 or 32 bits depending on the current size of the counter.

 * Counters 4, 5, 6 & 7 are always 16 bit.

/**

 * ps3_write_ctr - Write counter.

 *

 * Write 16 or 32 bits depending on the current size of the counter.

 * Counters 4, 5, 6 & 7 are always 16 bit.

/**

 * ps3_read_pm07_control - Read counter control registers.

 *

 * Each logical counter has a corresponding control register.

/**

 * ps3_write_pm07_control - Write counter control registers.

 *

 * Each logical counter has a corresponding control register.

/**

 * ps3_read_pm - Read Other LPM control registers.

/**

 * ps3_write_pm - Write Other LPM control registers.

/**

 * ps3_get_ctr_size - Get the size of a physical counter.

 *

 * Returns either 16 or 32.

/**

 * ps3_set_ctr_size - Set the size of a physical counter to 16 or 32 bits.

	/*

	 * 0: physical object.

	 * 1: logical object.

	 * This parameter is only used for the PPE and SPE signals.

	/*

	 * This parameter is used to specify the target physical/logical

	 * PPE/SPE object.

	/*

	 * This parameter is only used for setting the SPE signal.

/**

 * ps3_enable_pm - Enable the entire performance monitoring unit.

 *

 * When we enable the LPM, all pending writes to counters get committed.

/**

 * ps3_disable_pm - Disable the entire performance monitoring unit.

/**

 * ps3_lpm_copy_tb - Copy data from the trace buffer to a kernel buffer.

 * @offset: Offset in bytes from the start of the trace buffer.

 * @buf: Copy destination.

 * @count: Maximum count of bytes to copy.

 * @bytes_copied: Pointer to a variable that will receive the number of

 *  bytes copied to @buf.

 *

 * On error @buf will contain any successfully copied trace buffer data

 * and bytes_copied will be set to the number of bytes successfully copied.

/**

 * ps3_lpm_copy_tb_to_user - Copy data from the trace buffer to a user buffer.

 * @offset: Offset in bytes from the start of the trace buffer.

 * @buf: A __user copy destination.

 * @count: Maximum count of bytes to copy.

 * @bytes_copied: Pointer to a variable that will receive the number of

 *  bytes copied to @buf.

 *

 * On error @buf will contain any successfully copied trace buffer data

 * and bytes_copied will be set to the number of bytes successfully copied.

/**

 * ps3_get_and_clear_pm_interrupts -

 *

 * Clearing interrupts for the entire performance monitoring unit.

 * Reading pm_status clears the interrupt bits.

/**

 * ps3_enable_pm_interrupts -

 *

 * Enabling interrupts for the entire performance monitoring unit.

 * Enables the interrupt bits in the pm_status register.

/**

 * ps3_enable_pm_interrupts -

 *

 * Disabling interrupts for the entire performance monitoring unit.

/**

 * ps3_lpm_open - Open the logical performance monitor device.

 * @tb_type: Specifies the type of trace buffer lv1 should use for this lpm

 *  instance, specified by one of enum ps3_lpm_tb_type.

 * @tb_cache: Optional user supplied buffer to use as the trace buffer cache.

 *  If NULL, the driver will allocate and manage an internal buffer.

 *  Unused when when @tb_type is PS3_LPM_TB_TYPE_NONE.

 * @tb_cache_size: The size in bytes of the user supplied @tb_cache buffer.

 *  Unused when @tb_cache is NULL or @tb_type is PS3_LPM_TB_TYPE_NONE.

 Note tb_cache needs 128 byte alignment. */

/**

 * ps3_lpm_close - Close the lpm device.

 *

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 AV backend support.

 *

 *  Copyright (C) 2007 Sony Computer Entertainment Inc.

 *  Copyright 2007 Sony Corp.

 vuart buf size */

 max packet size */

 in msec ( 5 sec ) */

 color space */

 format */

 aspect */

 auto */

 supported CIDs */

 init */

 set */

 get */

 event */

 receive event packet */

 in msec */

 send pkt */

 recv pkt */

 read header */

 read body */

 total len */

 ret > 0 event packet */

 success */

 create header */

 send packet via vuart */

 process reply packet */

 video mute on */

 tv mute */

 video mute on */

 always 0 */

 audio mute */

 audio inactive */

 audio_pkt */

 hdmi only */

 audio_mode pkt should be sent separately */

 send command using avb pkt */

 audio mute */

 audio active */

 av video mute */

 wake up ps3avd to do the actual video mode setting */

 num of head */

 video_pkt */

 av_video_pkt */

 use RGB for HDMI */

 send command using avb pkt */

 video signal off */

	/*

	 * AV backend needs non-VESA mode setting at least one time

	 * when VESA mode is used.

 vesa mode */

 Retail PS3 product doesn't support this */

 av video mute */

	/*

	 * We mask off the resolution bits we care about and combine the

	 * results in one bitfield, so make sure there's no overlap

 check native resolution */

 check supported resolutions */

 resolution */

 color space */

 color info */

 other info */

 audio block */

 get mode id for hdmi */

 no HDMI interface or HDMI is off */

 get av_hw_conf */

 set all audio port */

 set mode using id */

 auto mode */

 set videomode */

 get resolution by video_mode */

 mute */

 mute analog output only */

 init avsetting modules */

 CONFIG_FB */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 System Manager.

 *

 *  Copyright (C) 2007 Sony Computer Entertainment Inc.

 *  Copyright 2007 Sony Corp.

/**

 * ps3_sys_manager - PS3 system manager driver.

 *

 * The system manager provides an asynchronous system event notification

 * mechanism for reporting events like thermal alert and button presses to

 * guests.  It also provides support to control system shutdown and startup.

 *

 * The actual system manager is implemented as an application running in the

 * system policy module in lpar_1.  Guests communicate with the system manager

 * through port 2 of the vuart using a simple packet message protocol.

 * Messages are comprised of a fixed field header followed by a message

 * specific payload.

/**

 * struct ps3_sys_manager_header - System manager message header.

 * @version: Header version, currently 1.

 * @size: Header size in bytes, currently 16.

 * @payload_size: Message payload size in bytes.

 * @service_id: Message type, one of enum ps3_sys_manager_service_id.

 * @request_tag: Unique number to identify reply.

 version 1 */

/**

 * @PS3_SM_RX_MSG_LEN_MIN - Shortest received message length.

 * @PS3_SM_RX_MSG_LEN_MAX - Longest received message length.

 *

 * Currently all messages received from the system manager are either

 * (16 bytes header + 8 bytes payload = 24 bytes) or (16 bytes header

 * + 16 bytes payload = 32 bytes).  This knowledge is used to simplify

 * the logic.

/**

 * enum ps3_sys_manager_service_id - Message header service_id.

 * @PS3_SM_SERVICE_ID_REQUEST:       guest --> sys_manager.

 * @PS3_SM_SERVICE_ID_REQUEST_ERROR: guest <-- sys_manager.

 * @PS3_SM_SERVICE_ID_COMMAND:       guest <-- sys_manager.

 * @PS3_SM_SERVICE_ID_RESPONSE:      guest --> sys_manager.

 * @PS3_SM_SERVICE_ID_SET_ATTR:      guest --> sys_manager.

 * @PS3_SM_SERVICE_ID_EXTERN_EVENT:  guest <-- sys_manager.

 * @PS3_SM_SERVICE_ID_SET_NEXT_OP:   guest --> sys_manager.

 *

 * PS3_SM_SERVICE_ID_REQUEST_ERROR is returned for invalid data values in a

 * a PS3_SM_SERVICE_ID_REQUEST message.  It also seems to be returned when

 * a REQUEST message is sent at the wrong time.

 version 1 */

/**

 * enum ps3_sys_manager_attr - Notification attribute (bit position mask).

 * @PS3_SM_ATTR_POWER: Power button.

 * @PS3_SM_ATTR_RESET: Reset button, not available on retail console.

 * @PS3_SM_ATTR_THERMAL: System thermal alert.

 * @PS3_SM_ATTR_CONTROLLER: Remote controller event.

 * @PS3_SM_ATTR_ALL: Logical OR of all.

 *

 * The guest tells the system manager which events it is interested in receiving

 * notice of by sending the system manager a logical OR of notification

 * attributes via the ps3_sys_manager_send_attr() routine.

 version 1 */

 bogus? */

/**

 * enum ps3_sys_manager_event - External event type, reported by system manager.

 * @PS3_SM_EVENT_POWER_PRESSED: payload.value =

 *  enum ps3_sys_manager_button_event.

 * @PS3_SM_EVENT_POWER_RELEASED: payload.value = time pressed in millisec.

 * @PS3_SM_EVENT_RESET_PRESSED: payload.value =

 *  enum ps3_sys_manager_button_event.

 * @PS3_SM_EVENT_RESET_RELEASED: payload.value = time pressed in millisec.

 * @PS3_SM_EVENT_THERMAL_ALERT: payload.value = thermal zone id.

 * @PS3_SM_EVENT_THERMAL_CLEARED: payload.value = thermal zone id.

 version 1 */

 no info on controller events */

/**

 * enum ps3_sys_manager_button_event - Button event payload values.

 * @PS3_SM_BUTTON_EVENT_HARD: Hardware generated event.

 * @PS3_SM_BUTTON_EVENT_SOFT: Software generated event.

/**

 * enum ps3_sys_manager_next_op - Operation to perform after lpar is destroyed.

 version 3 */

/**

 * enum ps3_sys_manager_wake_source - Next-op wakeup source (bit position mask).

 * @PS3_SM_WAKE_DEFAULT: Disk insert, power button, eject button.

 * @PS3_SM_WAKE_W_O_L: Ether or wireless LAN.

 * @PS3_SM_WAKE_P_O_R: Power on reset.

 *

 * Additional wakeup sources when specifying PS3_SM_NEXT_OP_SYS_SHUTDOWN.

 * The system will always wake from the PS3_SM_WAKE_DEFAULT sources.

 * Sources listed here are the only ones available to guests in the

 * other-os lpar.

 version 3 */

/**

 * user_wake_sources - User specified wakeup sources.

 *

 * Logical OR of enum ps3_sys_manager_wake_source types.

/**

 * enum ps3_sys_manager_cmd - Command from system manager to guest.

 *

 * The guest completes the actions needed, then acks or naks the command via

 * ps3_sys_manager_send_response().  In the case of @PS3_SM_CMD_SHUTDOWN,

 * the guest must be fully prepared for a system poweroff prior to acking the

 * command.

 version 1 */

 shutdown guest OS */

/**

 * ps3_sm_force_power_off - Poweroff helper.

 *

 * A global variable used to force a poweroff when the power button has

 * been pressed irrespective of how init handles the ctrl_alt_del signal.

 *

/**

 * ps3_sys_manager_write - Helper to write a two part message to the vuart.

 *

/**

 * ps3_sys_manager_send_attr - Send a 'set attribute' to the system manager.

 *

/**

 * ps3_sys_manager_send_next_op - Send a 'set next op' to the system manager.

 *

 * Tell the system manager what to do after this lpar is destroyed.

 other os */

/**

 * ps3_sys_manager_send_request_shutdown - Send 'request' to the system manager.

 *

 * The guest sends this message to request an operation or action of the system

 * manager.  The reply is a command message from the system manager.  In the

 * command handler the guest performs the requested operation.  The result of

 * the command is then communicated back to the system manager with a response

 * message.

 *

 * Currently, the only supported request is the 'shutdown self' request.

 shutdown */

 self */

/**

 * ps3_sys_manager_send_response - Send a 'response' to the system manager.

 * @status: zero = success, others fail.

 *

 * The guest sends this message to the system manager to acnowledge success or

 * failure of a command sent by the system manager.

/**

 * ps3_sys_manager_handle_event - Second stage event msg handler.

 *

		/*

		 * A memory barrier is use here to sync memory since

		 * ps3_sys_manager_final_restart() could be called on

		 * another cpu.

 ctrl_alt_del */

		/*

		 * A memory barrier is use here to sync memory since

		 * ps3_sys_manager_final_restart() could be called on

		 * another cpu.

 ctrl_alt_del */

/**

 * ps3_sys_manager_handle_cmd - Second stage command msg handler.

 *

 * The system manager sends this in reply to a 'request' message from the guest.

/**

 * ps3_sys_manager_handle_msg - First stage msg handler.

 *

 * Can be called directly to manually poll vuart and pump message handler.

 pause until next DEC interrupt */

 pause, ignoring DEC interrupt */

/**

 * ps3_sys_manager_final_power_off - The final platform machine_power_off routine.

 *

 * This routine never returns.  The routine disables asynchronous vuart reads

 * then spins calling ps3_sys_manager_handle_msg() to receive and acknowledge

 * the shutdown command sent from the system manager.  Soon after the

 * acknowledgement is sent the lpar is destroyed by the HV.  This routine

 * should only be called from ps3_power_off() through

 * ps3_sys_manager_ops.power_off.

/**

 * ps3_sys_manager_final_restart - The final platform machine_restart routine.

 *

 * This routine never returns.  The routine disables asynchronous vuart reads

 * then spins calling ps3_sys_manager_handle_msg() to receive and acknowledge

 * the shutdown command sent from the system manager.  Soon after the

 * acknowledgement is sent the lpar is destroyed by the HV.  This routine

 * should only be called from ps3_restart() through ps3_sys_manager_ops.restart.

 Check if we got here via a power button event. */

/**

 * ps3_sys_manager_get_wol - Get wake-on-lan setting.

/**

 * ps3_sys_manager_set_wol - Set wake-on-lan setting.

/**

 * ps3_sys_manager_work - Asynchronous read handler.

 *

 * Signaled when PS3_SM_RX_MSG_LEN_MIN bytes arrive at the vuart port.

 ps3_sys_manager_register_ops copies ops. */

 Module remove not supported. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006 Sony Computer Entertainment Inc.

 * Copyright 2006, 2007 Sony Corporation

 *

 * AV backend support for PS3

 supported */

 video init */

 audio init */

 av init */

 should be same as video_mode.resolution */

 should be same as video_mode.video_cs_out */

 default off */

 default off */

 video mode */

 line_length */

 default enable */

 audio mute */

   D1,    D2,    D3,    D4,    D5 */

 CH2:0x01 --- CH8:0x07 */

 check mode->audio_format ?? */

 default cs val */

 audio mode */

 XXX set all */

 audio swap L/R */

 no swap */

 audio serial input mapping */

 audio speaker layout */

 audio downmix permission */

 audio downmix level shift (0:0dB to 15:15dB) */

 0dB */

 set ch status */

 non-audio bit */

 pass through setting */

 audio mute */

 audio active */

 avb packet */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 System Manager core.

 *

 *  Copyright (C) 2007 Sony Computer Entertainment Inc.

 *  Copyright 2007 Sony Corp.

/**

 * Staticly linked routines that allow late binding of a loaded sys-manager

 * module.

/**

 * ps3_register_sys_manager_ops - Bind ps3_sys_manager_ops to a module.

 * @ops: struct ps3_sys_manager_ops.

 *

 * To be called from ps3_sys_manager_probe() and ps3_sys_manager_remove() to

 * register call back ops for power control.  Copies data to the static

 * variable ps3_sys_manager_ops.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Persistent Memory Driver

 *

 * Copyright (c) 2014-2015, Intel Corporation.

 * Copyright (c) 2015, Christoph Hellwig <hch@lst.de>.

 * Copyright (c) 2015, Boaz Harrosh <boaz@plexistor.com>.

	/*

	 * nvdimm bus services need a 'dev' parameter, and we record the device

	 * at init in bb.dev.

 only pmem in the linear map supports HWPoison */

		/*

		 * Note, no need to hold a get_dev_pagemap() reference

		 * here since we're in the driver I/O path and

		 * outstanding I/O requests pin the dev_pagemap.

	/*

	 * Note that we write the data both before and after

	 * clearing poison.  The write before clear poison

	 * handles situations where the latest written data is

	 * preserved and the clear poison operation simply marks

	 * the address range as valid without changing the data.

	 * In this case application software can assume that an

	 * interrupted write will either return the new good

	 * data or an error.

	 *

	 * However, if pmem_clear_poison() leaves the data in an

	 * indeterminate state we need to perform the write

	 * after clear poison.

	/*

	 * The ->rw_page interface is subtle and tricky.  The core

	 * retries on any error, so we can only invoke page_endio() in

	 * the successful completion case.  Otherwise, we'll see crashes

	 * caused by double completion.

 see "strong" declaration in tools/testing/nvdimm/pmem-dax.c */

	/*

	 * If badblocks are present, limit known good range to the

	 * requested range.

/*

 * Use the 'no check' versions of copy_from_iter_flushcache() and

 * copy_mc_to_iter() to bypass HARDENED_USERCOPY overhead. Bounds

 * checking, both file offset and device offset, is handled by

 * dax_iomap_actor()

 while nsio_rw_bytes is active, parse a pfn info block if present */

 we're attaching a block device, disable raw namespace access */

	/*

	 * We have two failure conditions here, there is no

	 * info reserver block or we found a valid info reserve block

	 * but failed to initialize the pfn superblock.

	 *

	 * For the first case consider namespace as a raw pmem namespace

	 * and attach a disk.

	 *

	 * For the latter, consider this a success and advance the namespace

	 * seed.

 probe complete, attach handles namespace enabling */

		/*

		 * Note, this assumes nd_device_lock() context to not

		 * race nd_pmem_notify()

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright(c) 2013-2016 Intel Corporation. All rights reserved.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright(c) 2013-2015 Intel Corporation. All rights reserved.

 pin bus providers while regions are enabled */

 caller is responsible for holding a reference on the device */

 make sure device is a region */

 make sure we are in the region */

	/*

	 * if ndctl does not exist, it's PMEM_LEGACY and

	 * we want to just pretend everything is handled.

	/*

	 * the singular ndctl class device per bus needs to be

	 * "device_destroy"ed, so skip it here

	 *

	 * i.e. remove classless children

 enable bus provider attributes to look up their local context */

 flush bus operations before delete */

	/*

	 * Ensure that region devices always have their NUMA node set as

	 * early as possible. This way we are able to make certain that

	 * any memory associated with the creation and the creation

	 * itself of the region is associated with the correct node.

		/*

		 * In the async case this is being triggered with the

		 * device lock held and the unregistration work needs to

		 * be moved out of line iff this is thread has won the

		 * race to schedule the deletion.

		/*

		 * In the sync case the device is being unregistered due

		 * to a state change of the parent. Claim the kill state

		 * to synchronize against other unregistration requests,

		 * or otherwise let the async path handle it if the

		 * unregistration was already queued.

/**

 * __nd_driver_register() - register a region or a namespace driver

 * @nd_drv: driver to register

 * @owner: automatically set by nd_driver_register() macro

 * @mod_name: automatically set by nd_driver_register() macro

 catch the disk up with the region ro state */

/*

 * nd_device_attribute_group - generic attributes for all devices on an nd bus

/*

 * nd_numa_attribute_group - NUMA attributes for all devices on an nd bus

		/*

		 * Per table 9-276 ARS Data in ACPI 6.1, out_field[1] is

		 * "Size of Output Buffer in bytes, including this

		 * field."

		/*

		 * ACPI 6.1 is ambiguous if 'status' is included in the

		 * output size. If we encounter an output size that

		 * overshoots the remainder by 4 bytes, assume it was

		 * including 'status'.

 set_config requires an idle interleave set */

 ask the bus provider if it would like to block this request */

 require clear error to go through the pmem driver */

 prevent label manipulation while the kernel owns label updates */

 Validate command family support against bus declared support */

 fail write commands (when read-only) */

 process an input envelope */

 process an output envelope */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright(c) 2013-2015 Intel Corporation. All rights reserved.

/*

 * Retrieve bus and dimm handle and return if this bus supports

 * get_config_data commands

/**

 * nvdimm_init_nsarea - determine the geometry of a dimm's namespace area

 * @nvdimm: dimm to initialize

 already valid */

 out_buf should be valid, copy it into our output buffer */

 status is output in the last 4-bytes of the command buffer */

 pmem mapping properties are private to libnvdimm */

	/*

	 * The state may be in the process of changing, userspace should

	 * quiesce probing if it wants a static answer

	/*

	 * Require all userspace triggered security management to be

	 * done while probing is idle and the DIMM is not in active use

	 * in any region.

 Are there any state mutation ops (make writable)? */

	/*

	 * Security state must be initialized before device_add() for

	 * attribute visibility.

 get security state and extended (master) state */

 We are shutting down. Make state frozen artificially. */

	/*

	 * In the allocation case ->res is set to free space that we are

	 * looking to validate against PMEM aliasing collision rules

	 * (i.e. BLK is allocated after all aliased PMEM).

 pass */;

	/*

	 * Find the free dpa from the end of the last pmem allocation to

	 * the end of the interleave-set mapping.

 update the free space range with the probed blk_start */

/**

 * nd_blk_available_dpa - account the unused dpa of BLK region

 * @nd_mapping: container of dpa-resource-root + labels

 *

 * Unlike PMEM, BLK namespaces can occupy discontiguous DPA ranges, but

 * we arrange for them to never start at an lower dpa than the last

 * PMEM allocation in an aliased region.

 now account for busy blk allocations in unaliased dpa */

/**

 * nd_pmem_max_contiguous_dpa - For the given dimm+region, return the max

 *			   contiguous unallocated dpa range.

 * @nd_region: constrain available space check to this reference region

 * @nd_mapping: container of dpa-resource-root + labels

 if a dimm is disabled the available capacity is zero */

 trim free space relative to current alignment setting */

/**

 * nd_pmem_available_dpa - for the given dimm+region account unallocated dpa

 * @nd_mapping: container of dpa-resource-root + labels

 * @nd_region: constrain available space check to this reference region

 * @overlap: calculate available space assuming this level of overlap

 *

 * Validate that a PMEM label, if present, aligns with the start of an

 * interleave set and truncate the available size at the lowest BLK

 * overlap point.

 *

 * The expectation is that this routine is called multiple times as it

 * probes for the largest BLK encroachment for any single member DIMM of

 * the interleave set.  Once that value is determined the PMEM-limit for

 * the set can be established.

				/*

				 * If a BLK allocation overlaps the start of

				 * PMEM the entire interleave set may now only

				 * be used for BLK.

 total eclipse of the mapping */

/**

 * nvdimm_allocated_dpa - sum up the dpa currently allocated to this label_id

 * @nvdimm: container of dpa-resource-root + labels

 * @label_id: dpa resource name of the form {pmem|blk}-<human readable uuid>

 Flush any possible dimm registration failures */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright(c) 2013-2015 Intel Corporation. All rights reserved.

/*

 * For readq() and writeq() on 32-bit builds, the hi-lo, lo-hi order is

 * irrelevant.

 check if flush hints share a page */

 at least one null hint slot per-dimm for the "no-hint" case */

	/*

	 * Clear out entries that are duplicates. This should prevent the

	 * extra flushings.

 ignore if NULL already */

/**

 * nd_region_to_nstype() - region to an integer namespace type

 * @nd_region: region-device to interrogate

 *

 * This is the 'nstype' attribute of a region as well, an input to the

 * MODALIAS for namespace devices, and bit number for a nvdimm_bus to match

 * namespace devices with namespace drivers.

	/*

	 * NOTE: in the nvdimm_has_flush() error case this attribute is

	 * not visible.

 pass, should be precluded by region_visible */;

	/*

	 * The cookie to show depends on which specification of the

	 * labels we are using. If there are not labels then default to

	 * the v1.1 namespace label cookie definition. To read all this

	 * data we need to wait for probing to settle.

 if a dimm is disabled the available capacity is zero */

	/*

	 * Flush in-flight updates and grab a snapshot of the available

	 * size.  Of course, this value is potentially invalidated the

	 * memory nvdimm_bus_lock() is dropped, but that's userspace's

	 * problem to not race itself.

	/*

	 * Ensure space-align is evenly divisible by the region

	 * interleave-width because the kernel typically has no facility

	 * to determine which DIMM(s), dimm-physical-addresses, would

	 * contribute to the tail capacity in system-physical-address

	 * space for the namespace.

	/*

	 * Given that space allocation consults this value multiple

	 * times ensure it does not change for the duration of the

	 * allocation.

/*

 * 32 should be enough for a while, even in the presence of socket

 * interleave a 32-way interleave set is a degenerate case.

/*

 * When a namespace is activated create new seeds for the next

 * namespace, or namespace-personality to be configured.

/**

 * nd_region_acquire_lane - allocate and lock a lane

 * @nd_region: region id and number of lanes possible

 *

 * A lane correlates to a BLK-data-window and/or a log slot in the BTT.

 * We optimize for the common case where there are 256 lanes, one

 * per-cpu.  For larger systems we need to lock to share lanes.  For now

 * this implementation assumes the cost of maintaining an allocator for

 * free lanes is on the order of the lock hold time, so it implements a

 * static lane = cpu % num_lanes mapping.

 *

 * In the case of a BTT instance on top of a BLK namespace a lane may be

 * acquired recursively.  We lock on the first instance.

 *

 * In the case of a BTT instance on top of PMEM, we only acquire a lane

 * for the BTT metadata updates.

/*

 * PowerPC requires this alignment for memremap_pages(). All other archs

 * should be ok with SUBSECTION_SIZE (see memremap_compat_align()).

/**

 * nvdimm_flush - flush any posted write queues between the cpu and pmem media

 * @nd_region: blk or interleaved pmem region

	/*

	 * Try to encourage some diversity in flush hint addresses

	 * across cpus assuming a limited number of flush hints.

	/*

	 * The pmem_wmb() is needed to 'sfence' all

	 * previous writes such that they are architecturally visible for

	 * the platform buffer flush. Note that we've already arranged for pmem

	 * writes to avoid the cache via memcpy_flushcache().  The final

	 * wmb() ensures ordering for the NVDIMM flush write.

/**

 * nvdimm_has_flush - determine write flushing requirements

 * @nd_region: blk or interleaved pmem region

 *

 * Returns 1 if writes require flushing

 * Returns 0 if writes do not require flushing

 * Returns -ENXIO if flushing capability can not be determined

 no nvdimm or pmem api == flushing capability unknown */

 Test if an explicit flush function is defined */

 Test if any flush hints for the region are available */

 flush hints present / available */

	/*

	 * The platform defines dimm devices without hints nor explicit flush,

	 * assume platform persistence mechanism like ADR

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright(c) 2013-2015 Intel Corporation. All rights reserved.

	/*

	 * Given multiple namespaces per region, we do not want to

	 * disable all the successfully registered peer namespaces upon

	 * a single registration failure.  If userspace is missing a

	 * namespace that it expects it can disable/re-enable the region

	 * to retry discovery after correcting the failure.

	 * <regionX>/namespaces returns the current

	 * "<async-registered>/<total>" namespace count.

 flush attribute readers and disable */

	/*

	 * Note, this assumes nd_device_lock() context to not race

	 * nd_region_notify()

 SPDX-License-Identifier: GPL-2.0-only

/*

 * NVDIMM Block Window Driver

 * Copyright (c) 2014, Intel Corporation.

		/*

		 * The 'bv' obtained from bvec_iter_bvec has its .bv_len and

		 * .bv_offset already adjusted for iter->bi_bvec_done, and we

		 * can use those directly

 CONFIG_BLK_DEV_INTEGRITY */

		/*

		 * If we don't have an integrity payload, we don't have to

		 * split the bvec into sectors, as this would cause unnecessary

		 * Block Window setup/move steps. the do_io routine is capable

		 * of handling len <= PAGE_SIZE.

 nd_blk_release_disk() is called if this fails */

 we'll come back as btt-blk */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2018 Intel Corporation. All rights reserved. */

/*

 * Retrieve kernel key for DIMM and request from user space if

 * necessary. Returns a key held for read and must be put by

 * nvdimm_put_key() before the usage goes out of scope.

	/*

	 * Send the same key to the hardware as new and old key to

	 * verify that the key is good.

 The bus lock should be held at the top level of the call stack */

 No need to go further if security is disabled */

	/*

	 * If the pre-OS has unlocked the DIMM, attempt to send the key

	 * from request_key() to the hardware for verification.  Failure

	 * to revalidate the key against the hardware results in a

	 * freeze of the security configuration. I.e. if the OS does not

	 * have the key, security is being managed pre-OS.

 The bus lock should be held at the top level of the call stack */

 The bus lock should be held at the top level of the call stack */

 The bus lock should be held at the top level of the call stack */

 The bus lock should be held at the top level of the call stack */

		/*

		 * Make sure we don't lose device while doing overwrite

		 * query.

 The bus lock should be held at the top level of the call stack */

	/*

	 * Abort and release device if we no longer have the overwrite

	 * flag set. It means the work has been canceled.

 setup delayed work again */

	/*

	 * Mark the overwrite work done and update dimm security flags,

	 * then send a sysfs event notification to wake up userspace

	 * poll threads to picked up the changed state.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright(c) 2017 Intel Corporation. All rights reserved.

	/*

	 * There is a chance this is a duplicate, check for those first.

	 * This will be the common case as ARS_STATUS returns all known

	 * errors in the SPA space, and we can't query it per region

 If length has changed, update this list entry */

	/*

	 * If not a duplicate or a simple length update, add the entry as is,

	 * as any overlapping ranges will get resolved when the list is consumed

	 * and converted to badblocks

	/*

	 * [start, clr_end] is the badrange interval being cleared.

	 * [bre->start, bre_end] is the badrange_list entry we're comparing

	 * the above interval against. The badrange list entry may need

	 * to be modified (update either start or length), deleted, or

	 * split into two based on the overlap characteristics

 Skip intervals with no intersection */

 Delete completely overlapped badrange entries */

 Adjust start point of partially cleared entries */

 Adjust bre->length for partial clearing at the tail end */

 bre->start remains the same */

		/*

		 * If clearing in the middle of an entry, we split it into

		 * two by modifying the current entry to represent one half of

		 * the split, and adding a new entry for the second half.

 Add new entry covering the right half */

 Adjust this entry to cover the left half */

 this isn't an error as the hardware will still throw an exception */

/**

 * __add_badblock_range() - Convert a physical address range to bad sectors

 * @bb:		badblocks instance to populate

 * @ns_offset:	namespace offset where the error range begins (in bytes)

 * @len:	number of bytes of badrange to be added

 *

 * This assumes that the range provided with (ns_offset, len) is within

 * the bounds of physical addresses for this namespace, i.e. lies in the

 * interval [ns_start, ns_start + ns_size)

 Discard intervals with no intersection */

 Deal with any overlap after start of the namespace */

		/*

		 * Deal with overlap for badrange starting before

		 * the namespace.

/**

 * nvdimm_badblocks_populate() - Convert a list of badranges to badblocks

 * @region: parent region of the range to interrogate

 * @bb: badblocks instance to populate

 * @res: resource range to consider

 *

 * The badrange list generated during bus initialization may contain

 * multiple, possibly overlapping physical address ranges.  Compare each

 * of these ranges to the resource range currently being initialized,

 * and add badblocks entries for all matching sub-ranges

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright(c) 2013-2015 Intel Corporation. All rights reserved.

/**

 * nd_is_uuid_unique - verify that no other namespace has @uuid

 * @dev: any device on a nvdimm_bus

 * @uuid: uuid to check

 default */;

	/*

	 * There is no namespace label (is_namespace_io()), or the label

	 * indicates the default sector size.

		/*

		 * Resources with unacknowledged adjustments indicate a

		 * failure to update labels

 These values match after a successful label update */

 stale resource */

	/*

	 * Only allow label writes that will result in a valid namespace

	 * or deletion of an existing namespace.

 delete allocation */;

 delete allocation */;

 retry with last resource deleted */

		/*

		 * Keep BLK allocations relegated to high DPA as much as

		 * possible

/**

 * shrink_dpa_allocation - for each dimm in region free n bytes for label_id

 * @nd_region: the set of dimms to reclaim @n bytes from

 * @label_id: unique identifier for the namespace consuming this dpa range

 * @n: number of bytes per-dimm to release

 *

 * Assumes resources are ordered.  Starting from the end try to

 * adjust_resource() the allocation to @n, but if @n is larger than the

 * allocation delete it and find the 'new' last allocation in the label

 * set.

 allocate blk from highest dpa first */

 first resource allocation for this label-id or dimm */

/**

 * space_valid() - validate free dpa space against constraints

 * @nd_region: hosting region of the free space

 * @ndd: dimm device data for debug

 * @label_id: namespace id to allocate space

 * @prev: potential allocation that precedes free space

 * @next: allocation that follows the given free space range

 * @exist: first allocation with same id in the mapping

 * @n: range that must satisfied for pmem allocations

 * @valid: free space range to validate

 *

 * BLK-space is valid as long as it does not precede a PMEM

 * allocation in a given region. PMEM-space must be contiguous

 * and adjacent to an existing existing allocation (if one

 * exists).  If reserving PMEM any space is valid.

 allocation needs to be contiguous, so this is all or nothing */

 we've got all the space we need and no existing allocation */

 allocation needs to be contiguous with the existing namespace */

 truncate @valid size to 0 */

 ignore resources outside this nd_mapping */

 space at the beginning of the mapping */

 space between allocations */

 space at the end of the mapping */

 adjust current resource up */

 adjust next resource up */

 BLK allocate bottom up */

 adjust current resource down */

			/*

			 * Retry scan with newly inserted resources.

			 * For example, if we did an ALLOC_BEFORE

			 * insertion there may also have been space

			 * available for an ALLOC_AFTER insertion, so we

			 * need to check this same resource again

	/*

	 * If we allocated nothing in the BLK case it may be because we are in

	 * an initial "pmem-reserve pass".  Only do an initial BLK allocation

	 * when none of the DPA space is reserved.

/**

 * grow_dpa_allocation - for each dimm allocate n bytes for @label_id

 * @nd_region: the set of dimms to allocate @n more bytes from

 * @label_id: unique identifier for the namespace consuming this dpa range

 * @n: number of bytes per-dimm to add to the existing allocation

 *

 * Assumes resources are ordered.  For BLK regions, first consume

 * BLK-only available DPA free space, then consume PMEM-aliased DPA

 * space starting at the highest DPA.  For PMEM regions start

 * allocations from the start of an interleave set and end at the first

 * BLK allocation or the end of the interleave set, whichever comes

 * first.

		/*

		 * In the BLK case try once with all unallocated PMEM

		 * reserved, and once without

 try again and allow encroachments into PMEM */

 calculate a spa offset from the dpa allocation offset */

	/*

	 * We need a uuid for the allocation-label and dimm(s) on which

	 * to store the label.

		/*

		 * All dimms in an interleave set, or the base dimm for a blk

		 * region, need to be enabled for the size to be changed.

	/*

	 * Try to delete the namespace if we deleted all of its

	 * allocation, this is not the seed or 0th device for the

	 * region, and it is not actively claimed by a btt, pfn, or dax

	 * instance.

 setting size zero == 'delete namespace' */

/**

 * namespace_update_uuid - check for a unique uuid and whether we're "renaming"

 * @nd_region: parent region so we can updates all dimms in the set

 * @dev: namespace type for generating label_id

 * @new_uuid: incoming uuid

 * @old_uuid: reference to the uuid storage location in the namespace object

	/*

	 * If we've already written a label with this uuid, then it's

	 * too late to rename because we can't reliably update the uuid

	 * without losing the old namespace.  Userspace must delete this

	 * namespace to abandon the old uuid.

		/*

		 * This check by itself is sufficient because old_uuid

		 * would be NULL above if this uuid did not exist in the

		 * currently written set.

		 *

		 * FIXME: can we delete uuid with zero dpa allocated?

 no address to convey if the namespace has no allocation */

		/*

		 * If any of the DIMMs do not support labels the only

		 * possible BTT format is v1.

 check whether existing labels are v1.1 or v1.2 */

	/*

	 * If nsindex is null loop_bitmask's bit 0 will be set, and if an index

	 * block is found, a v1.1 label for any mapping will set bit 1, and a

	 * v1.2 label will set bit 2.

	 *

	 * At the end of the loop, at most one of the three bits must be set.

	 * If multiple bits were set, it means the different mappings disagree

	 * about their labels, and this must be cleaned up first.

	 *

	 * If all the label index blocks are found to agree, nsindex of NULL

	 * implies labels haven't been initialized yet, and when they will,

	 * they will be of the 1.2 format, so we can assume BTT2.0

	 *

	 * If 1.1 labels are found, we enforce BTT1.1, and if 1.2 labels are

	 * found, we enforce BTT2.0

	 *

	 * If the loop was never entered, default to BTT1.1 (legacy namespaces)

 base is_namespace_io() attributes */

		/*

		 * Flush any in-progess probes / removals in the driver

		 * for the raw personality of this namespace.

	/*

	 * Note, alignment validation for fsdax and devdax mode

	 * namespaces happens in nd_pfn_validate() where infoblock

	 * padding parameters can be applied.

		/*

		 * Check that this label is compliant with the dpa

		 * range published in NFIT

 pass */;

 move recently validated label to the front of the list */

/**

 * create_namespace_pmem - validate interleave set labelling, retrieve label0

 * @nd_region: region with mappings to validate

 * @nspm: target namespace to create

 * @nd_label: target pmem namespace label to evaluate

		/*

		 * Give up if we don't find an instance of a uuid at each

		 * position (from 0 to nd_region->ndr_mappings - 1), or if we

		 * find a dimm with two instances of the same uuid.

	/*

	 * Fix up each mapping's 'labels' to have the validated pmem label for

	 * that position at labels[0], and NULL at labels[1].  In the process,

	 * check that the namespace aligns with interleave-set.  We know

	 * that it does not overlap with any blk namespaces by virtue of

	 * the dimm being enabled (i.e. nd_label_reserve_dpa()

	 * succeeded).

 Calculate total size and populate namespace properties from label0 */

	/*

	 * Seed creation failures are not fatal, provisioning is simply

	 * disabled until memory becomes available

	/*

	 * Seed creation failures are not fatal, provisioning is simply

	 * disabled until memory becomes available

	/*

	 * Seed creation failures are not fatal, provisioning is simply

	 * disabled until memory becomes available

	/*

	 * Seed creation failures are not fatal, provisioning is simply

	 * disabled until memory becomes available

 "safe" because create_namespace_pmem() might list_move() label_ent */

 pass, region matches label type */;

 skip labels that describe extents outside of the region */

 skip invalid labels */

 fallthrough to seed creation */

 Publish a zero-sized namespace for userspace to configure. */

 clean unselected labels */

 lock down all mappings while we scan labels */

		/*

		 * If the dimm is disabled then we may need to prevent

		 * the region from being activated.

 fail, label data may be unreadable */;

 fail, labels needed to disambiguate dpa */;

		/*

		 * All of the namespaces we tried to register failed, so

		 * fail region activation.

 SPDX-License-Identifier: GPL-2.0

/*

 * virtio_pmem.c: Virtio pmem Driver

 *

 * Discovers persistent memory range information

 * from host and provides a virtio based flushing

 * interface.

 The interrupt handler */

 The request submission function */

	 /*

	  * If virtqueue_add_sgs returns -ENOSPC then req_vq virtual

	  * queue does not have free descriptor. We add the request

	  * to req_list and wait for host_ack to wake us up when free

	  * slots are available.

 A host response results in "host_ack" getting called */

	/*

	 * virtqueue_add_sgs failed with error different than -ENOSPC, we can't

	 * do anything about that.

 A host repsonse results in "host_ack" getting called */

 The asynchronous flush callback function */

	/*

	 * Create child bio for asynchronous flush and chain with

	 * parent bio. Otherwise directly call nd_region flush.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright(c) 2013-2015 Intel Corporation. All rights reserved.

	/*

	 * pfn device attributes are re-used by dax device instances, so we

	 * need to be careful to correct device-to-nd_pfn conversion.

 detach the namespace and destroy / reset the device */

 pass */;

 from device_find_child */

/*

 * nd_sb_checksum: compute checksum for a generic info block

 *

 * Returns a fletcher64 checksum of everything in the given info block

 * except the last field (since that's where the checksum lives).

 SPDX-License-Identifier: GPL-2.0+

		/*

		 * NB: libnvdimm copies the data from ndr_desc into it's own

		 * structures so passing a stack pointer is fine.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Block Translation Table

 * Copyright (c) 2014-2015, Intel Corporation.

 arena offsets may be shifted from the base of the device */

 arena offsets may be shifted from the base of the device */

	/*

	 * infooff and info2off should always be at least 512B aligned.

	 * We rely on that to make sure rw_bytes does error clearing

	 * correctly, so make sure that is the case.

/*

 * 'raw' version of btt_map write

 * Assumptions:

 *   mapping is in little-endian

 *   mapping contains 'E' and 'Z' flags as desired

	/*

	 * This 'mapping' is supposed to be just the LBA mapping, without

	 * any flags set, so strip the flag bits.

		/*

		 * We want to set neither of the Z or E flags, and

		 * in the actual layout, this means setting the bit

		 * positions of both to '1' to indicate a 'normal'

		 * map entry

		/*

		 * The case where Z and E are both sent in as '1' could be

		 * construed as a valid 'normal' case, but we decide not to,

		 * to avoid confusion

 Reuse the {z,e}_flag variables for *trim and *error */

 Initial state. Return postmap = premap */

 If for some reason, parent bttN was not created, exit */

/*

 * This function accepts two log entries, and uses the

 * sequence number to find the 'older' entry.

 * It also updates the sequence number in this old entry to

 * make it the 'new' one if the mark_flag is set.

 * Finally, it returns which of the entries was the older one.

 *

 * TODO The logic feels a bit kludge-y. make it better..

	/*

	 * the first ever time this is seen, the entry goes into [0]

	 * the next time, the following logic works out to put this

	 * (next) entry into [1]

/*

 * This function copies the desired (old/new) log entry into ent if

 * it is not NULL. It returns the sub-slot number (0 or 1)

 * where the desired log entry was found. Negative return values

 * indicate errors.

 TODO set error state? */

/*

 * This function commits a log entry to media

 * It does _not_ prepare the freelist entry for the next write

 * btt_flog_write is the wrapper for updating the freelist elements

 split the 16B write into atomic, durable halves */

 prepare the next free entry */

/*

 * This function initializes the BTT map to the initial state, which is

 * all-zeroes, and indicates an identity mapping

	/*

	 * mapoff should always be at least 512B  aligned. We rely on that to

	 * make sure rw_bytes does error clearing correctly, so make sure that

	 * is the case.

/*

 * This function initializes the BTT log with 'fake' entries pointing

 * to the initial reserved set of blocks as being free

	/*

	 * logoff should always be at least 512B  aligned. We rely on that to

	 * make sure rw_bytes does error clearing correctly, so make sure that

	 * is the case.

 old and new map entries with any flags stripped out */

 sub points to the next one to be overwritten */

		/*

		 * FIXME: if error clearing fails during init, we want to make

		 * the BTT read-only

 This implies a newly created or untouched flog entry */

 Check if map recovery is needed */

		/*

		 * The map_entry from btt_read_map is stripped of any flag bits,

		 * so use the stripped out versions from the log as well for

		 * testing whether recovery is needed. For restoration, use the

		 * 'raw' version of the log entries as that captured what we

		 * were going to write originally.

			/*

			 * Last transaction wrote the flog, but wasn't able

			 * to complete the map write. So fix up the map.

/*

 * Detecting valid log indices: We read a log group (see the comments in btt.h

 * for a description of a 'log_group' and its 'slots'), and iterate over its

 * four slots. We expect that a padding slot will be all-zeroes, and use this

 * to detect a padding slot vs. an actual entry.

 *

 * If a log_group is in the initial state, i.e. hasn't been used since the

 * creation of this BTT layout, it will have three of the four slots with

 * zeroes. We skip over these log_groups for the detection of log_index. If

 * all log_groups are in the initial state (i.e. the BTT has never been

 * written to), it is safe to assume the 'new format' of log entries in slots

 * (0, 1).

 Skip if index has been recorded */

 valid entry, record index */

 two valid entries found */

 too many valid indices */

				/*

				 * once the indices have been set, just verify

				 * that all subsequent log groups are either in

				 * their initial state or follow the same

				 * indices.

 entry must be 'valid' */

					/*

					 * log_index[1] can be padding if the

					 * lane never got used and it is still

					 * in the initial state (three 'padding'

					 * entries)

 entry must be invalid (padding) */

		/*

		 * If any of the log_groups have more than one valid,

		 * non-padding entry, then the we are no longer in the

		 * initial_state

	/*

	 * If all the entries in the log were in the initial state,

	 * assume new padding scheme

	/*

	 * Only allow the known permutations of log/padding indices,

	 * i.e. (0, 1), and (0, 2)

 known index possibilities */

 Two pages are reserved for the super block and its copy */

 The log takes a fixed amount of space based on nfree */

 Calculate optimal split between map and data area */

 'Absolute' values, relative to start of storage space */

 Default log indices are (0,1) */

/*

 * This function reads an existing valid btt superblock and

 * populates the corresponding arena_info struct

 Alloc memory for arena */

/*

 * This function completes arena initialization by writing

 * all the metadata.

 * It is only called for an uninitialized arena when a write

 * to that arena occurs for the first time.

	/*

	 * Subtract arena->infooff (arena start) so numbers are relative

	 * to 'this' arena

/*

 * This function completes the initialization for the BTT namespace

 * such that it is ready to accept IOs

/*

 * This function calculates the arena in which the given LBA lies

 * by doing a linear walk. This is acceptable since we expect only

 * a few arenas. If we have backing devices that get much larger,

 * we can construct a balanced binary tree of arenas at init time

 * so that this range search becomes faster.

/*

 * The following (lock_map, unlock_map) are mostly just to improve

 * readability, since they index into an array of locks

		/*

		 * The 'bv' obtained from bvec_iter_bvec has its .bv_len and

		 * .bv_offset already adjusted for iter->bi_bvec_done, and we

		 * can use those directly

 CONFIG_BLK_DEV_INTEGRITY */

		/*

		 * We loop to make sure that the post map LBA didn't change

		 * from under us between writing the RTT and doing the actual

		 * read.

			/*

			 * Barrier to make sure this write is not reordered

			 * to do the verification map_read before the RTT store

 Media error - set the e_flag */

/*

 * Normally, arena_{read,write}_bytes will take care of the initial offset

 * adjustment, but in the case of btt_is_badblock, where we query is_bad_pmem,

 * we need the final, raw namespace offset here

 OK to acquire a different lane/free block */

 Wait if the new block is being read from */

 some standard values */

/**

 * btt_init - initialize a block translation table for the given device

 * @nd_btt:	device with BTT geometry and backing device info

 * @rawsize:	raw size in bytes of the backing device

 * @lbasize:	lba size of the backing device

 * @uuid:	A uuid for the backing device - this is stored on media

 * @maxlane:	maximum number of parallel requests the device can handle

 *

 * Initialize a Block Translation Table on a backing device to provide

 * single sector power fail atomicity.

 *

 * Context:

 * Might sleep.

 *

 * Returns:

 * Pointer to a new struct btt on success, NULL on failure.

/**

 * btt_fini - de-initialize a BTT

 * @btt:	the BTT handle that was generated by btt_init

 *

 * De-initialize a Block Translation Table on device removal

 *

 * Context:

 * Might sleep.

	/*

	 * If this returns < 0, that is ok as it just means there wasn't

	 * an existing BTT, and we're creating a new one. We still need to

	 * call this as we need the version dependent fields in nd_btt to be

	 * set correctly based on the holder class

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright(c) 2013-2015 Intel Corporation. All rights reserved.

/**

 * devm_nvdimm_memremap - map a resource that is shared across regions

 * @dev: device that will own a reference to the shared mapping

 * @offset: physical base address of the mapping

 * @size: mapping size

 * @flags: memremap flags, or, if zero, perform an ioremap instead

 struct nvdimm_bus definition is private to libnvdimm */

 struct nvdimm_bus definition is private to libnvdimm */

/**

 * nd_uuid_store: common implementation for writing 'uuid' sysfs attributes

 * @dev: container device for the uuid property

 * @uuid_out: uuid buffer to replace

 * @buf: raw sysfs buffer to parse

 *

 * Enforce that uuids can only be changed while the device is disabled

 * (driver detached)

 * LOCKING: expects nd_device_lock() is held on entry

	/*

	 * Both 'activate' and 'capability' disappear when no ops

	 * detected, or a negative capability is indicated.

 CONFIG_BLK_DEV_INTEGRITY */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright(c) 2013-2015 Intel Corporation. All rights reserved.

 no size to convey if the btt instance is disabled */

/**

 * nd_btt_arena_is_valid - check if the metadata layout is valid

 * @nd_btt:	device with BTT geometry and backing device info

 * @super:	pointer to the arena's info block being tested

 *

 * Check consistency of the btt info block with itself by validating

 * the checksum, and with the parent namespace by verifying the

 * parent_uuid contained in the info block with the one supplied in.

 *

 * Returns:

 * false for an invalid info block, true for a valid one

 TODO: figure out action for this */

 Probe/setup for BTT v2.0 */

		/*

		 * Probe/setup for BTT v1.1 (NVDIMM_CCLASS_NONE or

		 * NVDIMM_CCLASS_BTT)

 SPDX-License-Identifier: GPL-2.0

/*

 * virtio_pmem.c: Virtio pmem Driver

 *

 * Discovers persistent memory range information

 * from host and registers the virtual pmem device

 * with libnvdimm core.

 Initialize virt queue */

 single vq */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright(c) 2013-2015 Intel Corporation. All rights reserved.

	/*

	 * Per UEFI 2.7, the minimum size of the Label Storage Area is large

	 * enough to hold 2 index blocks and 2 labels.  The minimum index

	 * block size is 256 bytes. The label size is 128 for namespaces

	 * prior to version 1.2 and at minimum 256 for version 1.2 and later.

	/*

	 * On media label format consists of two index blocks followed

	 * by an array of labels.  None of these structures are ever

	 * updated in place.  A sequence number tracks the current

	 * active index and the next one to write, while labels are

	 * written to free slots.

	 *

	 *     +------------+

	 *     |            |

	 *     |  nsindex0  |

	 *     |            |

	 *     +------------+

	 *     |            |

	 *     |  nsindex1  |

	 *     |            |

	 *     +------------+

	 *     |   label0   |

	 *     +------------+

	 *     |   label1   |

	 *     +------------+

	 *     |            |

	 *      ....nslot...

	 *     |            |

	 *     +------------+

	 *     |   labelN   |

	 *     +------------+

 label sizes larger than 128 arrived with v1.2 */

 sanity check the index against expected values */

 can't have num_valid > 0 but valid[] = { false, false } */

 pick the best index... */

	/*

	 * In order to probe for and validate namespace index blocks we

	 * need to know the size of the labels, and we can't trust the

	 * size of the labels until we validate the index blocks.

	 * Resolve this dependency loop by probing for known label

	 * sizes, but default to v1.2 256-byte namespace labels if

	 * discovery fails.

 just exit if either destination or source is NULL */

/**

 * preamble_index - common variable initialization for nd_label_* routines

 * @ndd: dimm container for the relevant label set

 * @idx: namespace_index index

 * @nsindex_out: on return set to the currently active namespace index

 * @free: on return set to the free label bitmap in the index

 * @nslot: on return set to the number of slots in the label space

 check that we are written where we expect to be written */

 no label, nothing to reserve */

	/*

	 * We need to determine the maximum index area as this is the section

	 * we must read and validate before we can start processing labels.

	 *

	 * If the area is too small to contain the two indexes and 2 labels

	 * then we abort.

	 *

	 * Start at a label size of 128 as this should result in the largest

	 * possible namespace index size.

 Allocate config data */

	/*

	 * We want to guarantee as few reads as possible while conserving

	 * memory. To do that we figure out how much unused space will be left

	 * in the last read, divide that by the total number of reads it is

	 * going to take given our maximum transfer size, and then reduce our

	 * maximum transfer size based on that result.

 trim waste */

 make certain we read indexes in exactly 1 read */

 Make our initial read size a multiple of max_xfer size */

 Read the index data */

 Validate index data, if not valid assume all labels are invalid */

 Record our index values */

 Copy "current" index on top of the "next" index */

 Determine starting offset for label data */

 Loop through the free list pulling in any active labels */

 zero out the unused labels */

 if we already read past here then just continue */

 if we haven't read in a while reset our read_size offset */

 determine how much more will be read after this next call. */

 truncate last read if needed */

 Read the label data */

 push read_size to next read offset */

 copy the index we just wrote to the new 'next' */

 CXL labels store UUIDs instead of GUIDs for the same data */

		/*

		 * If we're modifying a namespace for which we don't

		 * know the claim_class, don't touch the existing guid.

 CXL labels store UUIDs instead of GUIDs for the same data */

		/*

		 * If we're modifying a namespace for which we don't

		 * know the claim_class, don't touch the existing uuid.

 allocate and write the label to the staging (next) index */

 update label */

 Garbage collect the previous label */

 update index */

/*

 * Use the presence of the type_guid as a flag to determine isetcookie

 * usage and nlabel + position policy for blk-aperture namespaces.

 N/A */

 N/A */

/*

 * 1/ Account all the labels that can be freed after this update

 * 2/ Allocate and write the label to the staging (next) index

 * 3/ Record the resources in the namespace device

	/*

	 * We need to loop over the old resources a few times, which seems a

	 * bit inefficient, but we need to know that we have the label

	 * space before we start mutating the tracking structures.

	 * Otherwise the recovery method of last resort for userspace is

	 * disable and re-enable the parent region.

 convert old local-label-map to dimm-slot victim-map */

 mark unused labels for garbage collection */

 don't allow updates that consume the last label */

 from here on we need to abort on error */

 assign all resources to the namespace before writing the labels */

 release slots associated with any invalidated UUIDs */

	/*

	 * Find the resource associated with the first label in the set

	 * per the v1.2 namespace specification.

 carry-over */

 update label */

 free up now unused slots in the new index */

 update index */

	/*

	 * Now that the on-dimm labels are up to date, fix up the tracking

	 * entries in nd_mapping->labels

		/*

		 * Bug, we can't end up with more resources than

		 * available labels

	/*

	 * 1/ repair the allocated label bitmap in the index

	 * 2/ restore the resource list

	/*

	 * We need to preserve all the old labels for the mapping so

	 * they can be garbage collected after writing the new labels.

 pass */;

 no index || no labels == nothing to delete */

 Clear the UPDATING flag per UEFI 2.7 expectations */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright(c) 2013-2015 Intel Corporation. All rights reserved.

 not required for non-aliased nvdimm, ex. NVDIMM-N */

	/*

	 * The locked status bit reflects explicit status codes from the

	 * label reading commands, revalidate it each time the driver is

	 * activated and re-reads the label area.

	/*

	 * Attempt to unlock, if the DIMM supports security commands,

	 * otherwise the locked indication is determined by explicit

	 * status codes from the label reading commands.

	/*

	 * EACCES failures reading the namespace label-area-properties

	 * are interpreted as the DIMM capacity being locked but the

	 * namespace labels themselves being accessible.

		/*

		 * See nvdimm_namespace_common_probe() where we fail to

		 * allow namespaces to probe while the DIMM is locked,

		 * but we do allow for namespace enumeration.

	/*

	 * EACCES failures reading the namespace label-data are

	 * interpreted as the label area being locked in addition to the

	 * DIMM capacity. We fail the dimm probe to prevent regions from

	 * attempting to parse the label area.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015, Christoph Hellwig.

 * Copyright (c) 2015, Intel Corporation.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright(c) 2013-2016 Intel Corporation. All rights reserved.

/*

 * Use pmd mapping if supported as default alignment

 no address to convey if the pfn instance is disabled */

 no size to convey if the pfn instance is disabled */

/*

 * nd_pfn_clear_memmap_errors() clears any errors in the volatile memmap

 * space associated with the namespace. If the memmap is set to DRAM, then

 * this is a no-op. Since the memmap area is freshly initialized during

 * probe, we have an opportunity to clear any badblocks in this area.

	/*

	 * re-enable the namespace with correct size so that we can access

	 * the device memmap area.

/**

 * nd_pfn_validate - read and validate info-block

 * @nd_pfn: fsdax namespace runtime state / properties

 * @sig: 'devdax' or 'fsdax' signature

 *

 * Upon return the info-block buffer contents (->pfn_sb) are

 * indeterminate when validation fails, and a coherent info-block

 * otherwise.

	/*

	 * Check whether the we support the alignment. For Dax if the

	 * superblock alignment is not matching, we won't initialize

	 * the device.

		/*

		 * When probing a namepace via nd_pfn_probe() the uuid

		 * is NULL (see: nd_pfn_devinit()) we init settings from

		 * pfn_sb

		/*

		 * When probing a pfn / dax instance we validate the

		 * live settings against the pfn_sb

		/*

		 * If the uuid validates, but other settings mismatch

		 * return EINVAL because userspace has managed to change

		 * the configuration without specifying new

		 * identification.

	/*

	 * These warnings are verbose because they can only trigger in

	 * the case where the physical address alignment of the

	 * namespace has changed since the pfn superblock was

	 * established.

/*

 * We hotplug memory at sub-section granularity, pad the reserved area

 * from the previous section base to the namespace base address.

 no info block, do init */;

	/*

	 * Note, we use 64 here for the standard size of struct page,

	 * debugging options may cause it to be larger in which case the

	 * implementation will limit the pfns advertised through

	 * ->direct_access() to those that are included in the memmap.

	/*

	 * When @start is misaligned fail namespace creation. See

	 * the 'struct nd_pfn_sb' commentary on why ->start_pad is not

	 * an option.

		/*

		 * The altmap should be padded out to the block size used

		 * when populating the vmemmap. This *should* be equal to

		 * PMD_SIZE for most architectures.

		 *

		 * Also make sure size of struct page is less than 64. We

		 * want to make sure we use large enough size here so that

		 * we don't have a dynamic reserve space depending on

		 * struct page size. But we also want to make sure we notice

		 * when we end up adding new elements to struct page.

/*

 * Determine the effective resource range and vmem_altmap from an nd_pfn

 * instance.

 we need a valid pfn_sb before we can init a dev_pagemap */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

/*

 * Copyright (c) 2019, Mellanox Technologies inc.  All rights reserved.

	/*

	 * The async event FD has to deliver IB_EVENT_DEVICE_FATAL even after

	 * disassociation, so cleaning the event list must only happen after

	 * release. The user knows it has reached the end of the event stream

	 * when it sees IB_EVENT_DEVICE_FATAL.

/*

 * Copyright (c) 2004, 2005 Mellanox Technologies Ltd.  All rights reserved.

 * Copyright (c) 2004, 2005 Infinicon Corporation.  All rights reserved.

 * Copyright (c) 2004, 2005 Intel Corporation.  All rights reserved.

 * Copyright (c) 2004, 2005 Topspin Corporation.  All rights reserved.

 * Copyright (c) 2004-2007 Voltaire Corporation.  All rights reserved.

 * Copyright (c) 2005 Sun Microsystems, Inc. All rights reserved.

 * Copyright (c) 2014 Intel Corporation.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 See section 14.2.2.2, Vol 1 IB spec */

 C14-6 -- valid hop_cnt values are from 0 to 63 */

 C14-9:1 */

 C14-9:2 */

 return_path set when received */

 C14-9:3 -- We're at the end of the DR segment of path */

 return_path set when received */

 C14-9:4 -- hop_ptr = hop_cnt + 1 -> give to SMA/SM */

 C14-9:5 -- Fail unreasonable hop pointer */

 C14-13:1 */

 C14-13:2 */

 C14-13:3 -- at the end of the DR segment of path */

 C14-13:3 -- SMPs destined for SM shouldn't be here */

 C14-13:4 -- hop_ptr = 0 -> should have gone to SM */

 C14-13:5 -- Check for unreasonable hop pointer */

/*

 * Fixup a directed route SMP for sending

 * Return IB_SMI_DISCARD if the SMP should be discarded

 See section 14.2.2.2, Vol 1 IB spec */

 C14-6 -- valid hop_cnt values are from 0 to 63 */

 C14-9:1 -- sender should have incremented hop_ptr */

 C14-9:2 -- intermediate hop */

 hop_ptr updated when sending */

 C14-9:3 -- We're at the end of the DR segment of path */

 hop_ptr updated when sending */

 C14-9:4 -- hop_ptr = hop_cnt + 1 -> give to SMA/SM */

 C14-9:5 -- fail unreasonable hop pointer */

 C14-13:1 */

 C14-13:2 */

 hop_ptr updated when sending */

 C14-13:3 -- We're at the end of the DR segment of path */

 giving SMP to SM - update hop_ptr */

 hop_ptr updated when sending */

 C14-13:4 -- hop_ptr = 0 -> give to SM */

 C14-13:5 -- Check for unreasonable hop pointer */

/*

 * Adjust information for a received SMP

 * Return IB_SMI_DISCARD if the SMP should be dropped

/*

 * Adjust information for a received SMP

 * Return IB_SMI_DISCARD if the SMP should be dropped

 C14-9:2 -- intermediate hop */

 C14-9:3 -- at the end of the DR segment of path */

 C14-9:4 -- hop_ptr = hop_cnt + 1 -> give to SMA/SM */

 C14-13:2  -- intermediate hop */

 C14-13:3 -- at the end of the DR segment of path */

/*

 * Return the forwarding port number from initial_path for outgoing SMP and

 * from return_path for returning SMP

/*

 * Return the forwarding port number from initial_path for outgoing SMP and

 * from return_path for returning SMP

/*

 * Copyright (c) 2005-2006 Intel Corporation.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *	copyright notice, this list of conditions and the following

 *	disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *	copyright notice, this list of conditions and the following

 *	disclaimer in the documentation and/or other materials

 *	provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/*

 * Same as ucm_get_ctx but requires that ->cm_id->device is valid, eg that the

 * CM_ID is bound.

	/* once all inflight tasks are finished, we close all underlying

	 * resources. The context is still alive till its explicit destryoing

	 * by its creator. This puts back the xarray's reference.

 No new events will be generated after destroying the id. */

 Reading the cm_id without holding a positive ref is not allowed */

 So list_del() will work if we don't do ucma_finish_ctx() */

 Returning error causes the new ID to be destroyed */

	/*

	 * We ignore events for new connections until userspace has set their

	 * context.  This can only happen if an error occurs on a new connection

	 * before the user accepts it.  This is okay, since the accept will just

	 * fail later. However, we do need to release the underlying HW

	 * resources in case of a device removal event.

	/*

	 * Old 32 bit user space does not send the 4 byte padding in the

	 * reserved field. We don't care, allow it to keep working.

		/*

		 * At this point mc->ctx->ref is 0 so the mc cannot leave the

		 * lock on the reader and this is enough serialization

 Cleanup events not yet reported to the user.*/

	/*

	 * If this was a listening ID then any connections spawned from it that

	 * have not been delivered to userspace are cleaned up too. Must be done

	 * outside any locks.

/*

 * When this is called the xarray must have a XA_ZERO_ENTRY in the ctx->id (ie

 * the ctx is not public to the user). This either because:

 *  - ucma_finish_ctx() hasn't been called

 *  - xa_cmpxchg() succeed to remove the entry (only one thread can succeed)

	/*

	 * Destroy the underlying cm_id. New work queuing is prevented now by

	 * the removal from the xarray. Once the work is cancled ref will either

	 * be 0 because the work ran to completion and consumed the ref from the

	 * xarray, or it will be positive because we still have the ref from the

	 * xarray. This can also be 0 in cases where cm_id was never set

 The uid must be set atomically with the handler */

 Get current fd to protect against it being closed */

 Validate current fd and prevent destruction of id. */

	/*

	 * ctx->file can only be changed under the handler & xa_lock. xa_load()

	 * must be checked again to ensure the ctx hasn't begun destruction

	 * since the ucma_get_ctx().

	/*

	 * At this point lock_handler() prevents addition of new uevents for

	 * this ctx.

/*

 * ucma_open() does not need the BKL:

 *

 *  - no global state is referred to;

 *  - there is no ioctl method to race against;

 *  - no further module initialization is required for open to work

 *    after the device is registered.

	/*

	 * All paths that touch ctx_list or ctx_list starting from write() are

	 * prevented by this being a FD release function. The list_add_tail() in

	 * ucma_connect_event_handler() can run concurrently, however it only

	 * adds to the list *after* a listening ID. By only reading the first of

	 * the list, and relying on ucma_destroy_private_ctx() to block

	 * ucma_connect_event_handler(), no additional locking is needed.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

/*

 * Copyright (c) 2020 Mellanox Technologies. All rights reserved.

/*

 * Copyright (c) 2014 Intel Corporation. All rights reserved.

 * Copyright (c) 2014 Chelsio, Inc. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/**

 * iwpm_valid_pid - Check if the userspace iwarp port mapper pid is valid

 *

 * Returns true if the pid is greater than zero, otherwise returns false

/**

 * iwpm_register_pid - Send a netlink query to userspace

 *                     to get the iwarp port mapper pid

 * @pm_msg: Contains driver info to send to the userspace port mapper

 * @nl_client: The index of the netlink client

 *

 * nlmsg attributes:

 *	[IWPM_NLA_REG_PID_SEQ]

 *	[IWPM_NLA_REG_IF_NAME]

 *	[IWPM_NLA_REG_IBDEV_NAME]

 *	[IWPM_NLA_REG_ULIB_NAME]

 fill in the pid request message */

 skb is freed in the netlink send-op handling */

/**

 * iwpm_add_mapping - Send a netlink add mapping request to

 *                    the userspace port mapper

 * @pm_msg: Contains the local ip/tcp address info to send

 * @nl_client: The index of the netlink client

 *

 * nlmsg attributes:

 *	[IWPM_NLA_MANAGE_MAPPING_SEQ]

 *	[IWPM_NLA_MANAGE_ADDR]

 *	[IWPM_NLA_MANAGE_FLAGS]

 *

 * If the request is successful, the pm_msg stores

 * the port mapper response (mapped address info)

 fill in the add mapping message */

 If flags are required and we're not V4, then return a quiet error */

 skb is freed in the netlink send-op handling */

/**

 * iwpm_add_and_query_mapping - Process the port mapper response to

 *                              iwpm_add_and_query_mapping request

 * @pm_msg: Contains the local ip/tcp address info to send

 * @nl_client: The index of the netlink client

 *

 * nlmsg attributes:

 *	[IWPM_NLA_QUERY_MAPPING_SEQ]

 *	[IWPM_NLA_QUERY_LOCAL_ADDR]

 *	[IWPM_NLA_QUERY_REMOTE_ADDR]

 *	[IWPM_NLA_QUERY_FLAGS]

 fill in the query message */

 If flags are required and we're not V4, then return a quite error */

 skb is freed in the netlink send-op handling */

/**

 * iwpm_remove_mapping - Send a netlink remove mapping request

 *                       to the userspace port mapper

 *

 * @local_addr: Local ip/tcp address to remove

 * @nl_client: The index of the netlink client

 *

 * nlmsg attributes:

 *	[IWPM_NLA_MANAGE_MAPPING_SEQ]

 *	[IWPM_NLA_MANAGE_ADDR]

 skb is freed in the netlink send-op handling */

 netlink attribute policy for the received response to register pid request */

/**

 * iwpm_register_pid_cb - Process the port mapper response to

 *                        iwpm_register_pid query

 * @skb: The socket buffer

 * @cb: Contains the received message (payload and netlink header)

 *

 * If successful, the function receives the userspace port mapper pid

 * which is used in future communication with the port mapper

 check device name, ulib name and version */

 always for found nlmsg_request */

 netlink attribute policy for the received response to add mapping request */

/**

 * iwpm_add_mapping_cb - Process the port mapper response to

 *                       iwpm_add_mapping request

 * @skb: The socket buffer

 * @cb: Contains the received message (payload and netlink header)

 always for found request */

/* netlink attribute policy for the response to add and query mapping request

 * and response with remote address info

/**

 * iwpm_add_and_query_mapping_cb - Process the port mapper response to

 *                                 iwpm_add_and_query_mapping request

 * @skb: The socket buffer

 * @cb: Contains the received message (payload and netlink header)

 always for found request */

/**

 * iwpm_remote_info_cb - Process remote connecting peer address info, which

 *                       the port mapper has received from the connecting peer

 * @skb: The socket buffer

 * @cb: Contains the received message (payload and netlink header)

 *

 * Stores the IPv4/IPv6 address info in a hash table

 netlink attribute policy for the received request for mapping info */

/**

 * iwpm_mapping_info_cb - Process a notification that the userspace

 *                        port mapper daemon is started

 * @skb: The socket buffer

 * @cb: Contains the received message (payload and netlink header)

 *

 * Using the received port mapper pid, send all the local mapping

 * info records to the userspace port mapper

 netlink attribute policy for the received mapping info ack */

/**

 * iwpm_ack_mapping_info_cb - Process the port mapper ack for

 *                            the provided local mapping info records

 * @skb: The socket buffer

 * @cb: Contains the received message (payload and netlink header)

 netlink attribute policy for the received port mapper error message */

/**

 * iwpm_mapping_error_cb - Process port mapper notification for error

 *

 * @skb: The socket buffer

 * @cb: Contains the received message (payload and netlink header)

 look for nlmsg_request */

 not all errors have associated requests */

 always for found request */

 netlink attribute policy for the received hello request */

/**

 * iwpm_hello_cb - Process a hello message from iwpmd

 *

 * @skb: The socket buffer

 * @cb: Contains the received message (payload and netlink header)

 *

 * Using the received port mapper pid, send the kernel's abi_version

 * after adjusting it to support the iwpmd version.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Trace points for the RDMA Connection Manager.

 *

 * Author: Chuck Lever <chuck.lever@oracle.com>

 *

 * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

/*

 * Copyright (c) 2004-2007 Intel Corporation.  All rights reserved.

 * Copyright (c) 2004 Topspin Corporation.  All rights reserved.

 * Copyright (c) 2004, 2005 Voltaire Corporation.  All rights reserved.

 * Copyright (c) 2005 Sun Microsystems, Inc. All rights reserved.

 * Copyright (c) 2019, Mellanox Technologies inc.  All rights reserved.

 struct rb_root peer_service_table; todo: fix peer to peer */

 Counter indexes ordered by attribute ID */

 Received MADs */

 Established / timewait */

 Do not acquire inside cm.lock */

	/* Number of clients sharing this ib_cm_id. Only valid for listeners.

	 * Protected by the cm.lock spinlock.

 todo: use alternate port on send failure */

 Timeout set by caller if response is expected. */

		/* SGID attribute can be NULL in following

		 * conditions.

		 * (a) Alternative path

		 * (b) IB link layer without GRH

		 * (c) LAP send messages

	/*

	 * av->ah_attr might be initialized based on wc or during

	 * request processing time which might have reference to sgid_attr.

	 * So initialize a new ah_attr on stack.

	 * If initialization fails, old ah_attr is used for sending any

	 * responses. If initialization is successful, than new ah_attr

	 * is used by overwriting the old one. So that right ah_attr

	 * can be used to return an error response.

 Move av created by cm_init_av_by_path(), so av.dgid is not moved */

/*

 * Trivial helpers to strip endian annotation and compare; the

 * endianness doesn't actually matter since we just need a stable

 * order for the RB tree.

/*

 * Inserts a new cm_id_priv into the listen_service_table. Returns cm_id_priv

 * if the new ID was inserted, NULL if it could not be inserted due to a

 * collision, or the existing cm_id_priv ready for shared usage.

			/*

			 * Sharing an ib_cm_id with different handlers is not

			 * supported

/*

 * Make the ID visible to the MAD handlers and other threads that use the

 * xarray.

	/*

	 * To deliver the event to the user callback we have the drop the

	 * spinlock, however, we need to ensure that the user callback is single

	 * threaded and receives events in the temporal order. If there are

	 * already events being processed then thread new events onto a list,

	 * the thread currently processing will pick them up.

		/*

		 * This routine always consumes incoming reference. Once queued

		 * to the work_list then a reference is held by the thread

		 * currently running cm_process_work() and this reference is not

		 * needed.

 approximate conversion to ms from 4.096us x 2^iba_time */

/*

 * calculate: 4.096x2^ack_timeout = 4.096x2^ack_delay + 2x4.096x2^life_time

 * Because of how ack_timeout is stored, adding one doubles the timeout.

 * To avoid large timeouts, select the max(ack_delay, life_time + 1), and

 * increment it (round up) only if the other is within 50%.

	/*

	 * The cm_id could be destroyed by the user before we exit timewait.

	 * To protect against this, we search for the cm_id after exiting

	 * timewait before notifying the user that we've exited timewait.

 Check if the device started its remove_one */

	/*

	 * The timewait_info is converted into a work and gets freed during

	 * cm_free_work() in cm_timewait_handler().

 The id is still shared. */

 cm_send_sidr_rep_locked will not move to IDLE if it fails */

 Do not reject to allow future retries. */

		/*

		 * The cm_acquire_id in cm_timewait_handler will stop working

		 * once we do xa_erase below, so just move to idle here for

		 * consistency.

 Required for cleanup paths related cm_req_handler() */

/**

 * ib_cm_listen - Initiates listening on the specified service ID for

 *   connection and service ID resolution requests.

 * @cm_id: Connection identifier associated with the listen request.

 * @service_id: Service identifier matched against incoming connection

 *   and service ID resolution requests.  The service ID should be specified

 *   network-byte order.  If set to IB_CM_ASSIGN_SERVICE_ID, the CM will

 *   assign a service ID to the caller.

 * @service_mask: Mask applied to service ID used to listen across a

 *   range of service IDs.  If set to 0, the service ID is matched

 *   exactly.  This parameter is ignored if %service_id is set to

 *   IB_CM_ASSIGN_SERVICE_ID.

/**

 * ib_cm_insert_listen - Create a new listening ib_cm_id and listen on

 *			 the given service ID.

 *

 * If there's an existing ID listening on that same device and service ID,

 * return it.

 *

 * @device: Device associated with the cm_id.  All related communication will

 * be associated with the specified device.

 * @cm_handler: Callback invoked to notify the user of CM events.

 * @service_id: Service identifier matched against incoming connection

 *   and service ID resolution requests.  The service ID should be specified

 *   network-byte order.  If set to IB_CM_ASSIGN_SERVICE_ID, the CM will

 *   assign a service ID to the caller.

 *

 * Callers should call ib_destroy_cm_id when done with the listener ID.

 Create an ID in advance, since the creation may sleep */

	/*

	 * A listen ID does not need to be in the xarray since it does not

	 * receive mads, is not placed in the remote_id or remote_qpn rbtree,

	 * and does not enter timewait.

 Work-around until there's a way to obtain remote LID info */

 Verify that we're not in timewait. */

 We just need common CM header information.  Cast to any message. */

/**

 * cm_opa_to_ib_sgid - Convert OPA SGID to IB SGID

 * ULPs (such as IPoIB) do not understand OPA GIDs and will

 * reject them as the local_gid will not match the sgid. Therefore,

 * change the pathrec's SGID to an IB SGID.

 *

 * @work: Work completion

 * @path: Path record

 We will typically only have the current event to report. */

 Quick state check to discard duplicate REQs. */

 Check for possible duplicate REQ. */

 Check for stale connections. */

 Find matching listen request. */

/*

 * Work-around for inter-subnet connections.  If the LIDs are permissive,

 * we need to override the LID/SL data in the REQ with the LID information

 * in the work completion.

	/*

	 * Note that the ID pointer is not in the xarray at this point,

	 * so this set is only visible to the local thread.

 This destroy call is needed to pair with cm_init_av_for_response */

 Now MAD handlers can see the new ID */

 Refcount belongs to the event, pairs with cm_process_work() */

	/*

	 * Since this ID was just created and was not made visible to other MAD

	 * handlers until the cm_finalize_id() above we know that the

	 * cm_process_work() will deliver the event and the listen_cm_id

	 * embedded in the event can be derefed here.

 Check for duplicate REP. */

 Check for a stale connection. */

 See comment in cm_establish about lookup. */

	/* Currently Alternate path messages are not supported for

	 * RoCE link layer.

 todo: verify LAP request and send reject APR if invalid. */

	/* Currently Alternate path messages are not supported for

	 * RoCE link layer.

 Unmatched reply. */

 Record SGID/SLID and request ID for lookup. */

 Duplicate message. */

 No match. */

	/*

	 * A SIDR ID does not need to be in the xarray since it does not receive

	 * mads, is not placed in the remote_id or remote_qpn rbtree, and does

	 * not enter timewait.

	/*

	 * A pointer to the listen_cm_id is held in the event, so this deref

	 * must be after the event is delivered above.

 Unmatched reply. */

 Discard old sends or ones without a response. */

 No other events can occur on the cm_id at this point. */

	/*

	 * If the send was in response to a received message (context[0] is not

	 * set to a cm_id), and is not a REJ, then it is a send that was

	 * manually retried.

	/*

	 * The CM worker thread may try to destroy the cm_id before it

	 * can execute this work item.  To prevent potential deadlock,

	 * we need to find the cm_id once we're in the context of the

	 * worker thread, rather than holding a reference on it.

 Check if the device started its remove_one */

 Check if the device started its remove_one */

 Allow transition to RTS before sending REP */

		/*

		 * We flush the queue here after the going_down set, this

		 * verify that no new works will be queued in the recv handler,

		 * after that we can call the unregister_mad_agent

		/*

		 * The above ensures no call paths from the work are running,

		 * the remaining paths all take the mad_agent_lock.

/*

 * Copyright (c) 2014 Mellanox Technologies. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/**

 * ib_umem_odp_alloc_implicit - Allocate a parent implicit ODP umem

 *

 * Implicit ODP umems do not have a VA range and do not have any page lists.

 * They exist only to hold the per_mm reference to help the driver create

 * children umems.

 *

 * @device: IB device to create UMEM

 * @access: ib_reg_mr access flags

/**

 * ib_umem_odp_alloc_child - Allocate a child ODP umem under an implicit

 *                           parent ODP umem

 *

 * @root: The parent umem enclosing the child. This must be allocated using

 *        ib_alloc_implicit_odp_umem()

 * @addr: The starting userspace VA

 * @size: The length of the userspace VA

 * @ops: MMU interval ops, currently only @invalidate

	/*

	 * Caller must ensure that root cannot be freed during the call to

	 * ib_alloc_odp_umem.

	/*

	 * A mmget must be held when registering a notifier, the owming_mm only

	 * has a mm_grab at this point.

/**

 * ib_umem_odp_get - Create a umem_odp for a userspace va

 *

 * @device: IB device struct to get UMEM

 * @addr: userspace virtual address to start at

 * @size: length of region to pin

 * @access: IB_ACCESS_xxx flags for memory being pinned

 * @ops: MMU interval ops, currently only @invalidate

 *

 * The driver should use when the access flags indicate ODP memory. It avoids

 * pinning, instead, stores the mm for future page fault handling in

 * conjunction with MMU notifiers.

	/*

	 * Ensure that no more pages are mapped in the umem.

	 *

	 * It is the driver's responsibility to ensure, before calling us,

	 * that the hardware will not attempt to access the MR any more.

/*

 * Map for DMA and insert a single page into the on-demand paging page tables.

 *

 * @umem: the umem to insert the page to.

 * @dma_index: index in the umem to add the dma to.

 * @page: the page struct to map and add.

 * @access_mask: access permissions needed for this page.

 *

 * The function returns -EFAULT if the DMA mapping operation fails.

 *

		/*

		 * If the page is already dma mapped it means it went through

		 * a non-invalidating trasition, like read-only to writable.

		 * Resync the flags.

/**

 * ib_umem_odp_map_dma_and_lock - DMA map userspace memory in an ODP MR and lock it.

 *

 * Maps the range passed in the argument to DMA addresses.

 * The DMA addresses of the mapped pages is updated in umem_odp->dma_list.

 * Upon success the ODP MR will be locked to let caller complete its device

 * page table update.

 *

 * Returns the number of pages mapped in success, negative error code

 * for failure.

 * @umem_odp: the umem to map and pin

 * @user_virt: the address from which we need to map.

 * @bcnt: the minimal number of bytes to pin and map. The mapping might be

 *        bigger due to alignment, and may also be smaller in case of an error

 *        pinning or mapping a page. The actual pages mapped is returned in

 *        the return value.

 * @access_mask: bit mask of the requested access permissions for the given

 *               range.

 * @fault: is faulting required for the given range

	/*

	 * owning_process is allowed to be NULL, this means somehow the mm is

	 * existing beyond the lifetime of the originating process.. Presumably

	 * mmget_not_zero will fail in this case.

			/*

			 * Since we asked for hmm_range_fault() to populate

			 * pages it shouldn't return an error entry on success.

		/* If a hugepage was detected and ODP wasn't set for, the umem

		 * page_shift will be used, the opposite case is an error.

 upon sucesss lock should stay on hold for the callee */

 The access flags guaranteed a valid DMA address in case was NULL */

				/*

				 * set_page_dirty prefers being called with

				 * the page lock. However, MMU notifiers are

				 * called sometimes with and sometimes without

				 * the lock. We rely on the umem_mutex instead

				 * to prevent other mmu notifiers from

				 * continuing and allowing the page mapping to

				 * be removed.

/*

 * Copyright (c) 2004 Topspin Communications.  All rights reserved.

 * Copyright (c) 2005 Voltaire, Inc. All rights reserved.

 * Copyright (c) 2005 Sun Microsystems, Inc. All rights reserved.

 * Copyright (c) 2008 Cisco. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/*

 * Our lifetime rules for these structs are the following:

 * device special file is opened, we take a reference on the

 * ib_umad_port's struct ib_umad_device. We drop these

 * references in the corresponding close().

 *

 * In addition to references coming from open character devices, there

 * is one more reference to each ib_umad_device representing the

 * module's reference taken when allocating the ib_umad_device in

 * ib_umad_add_one().

 *

 * When destroying an ib_umad_device, we drop the module's reference.

 caller must hold file->mutex */

	/*

	 * On OPA devices it is okay to lose the upper 16 bits of LID as this

	 * information is obtained elsewhere. Mask off the upper 16 bits.

 We need enough room to copy the first (or only) MAD segment. */

		/*

		 * Multipacket RMPP MAD message. Copy remainder of message.

		 * Note that last segment may have a shorter payload.

			/*

			 * The buffer is too small, return the first RMPP segment,

			 * which includes the RMPP message length.

 Requeue packet */

 Copy class specific header */

 All headers are in place.  Copy data segments. */

		/*

		 * No need to be overly clever here.  If two new operations have

		 * the same TID, reject the second as a duplicate.  This is more

		 * restrictive than required by the spec.

 Copy MAD header.  Any RMPP header is already in place. */

	/*

	 * Set the high-order part of the transaction ID to make MADs from

	 * different agents unique, and allow routing responses back to the

	 * original requestor.

 we will always be able to post a MAD send */

/*

 * ib_umad_open() does not need the BKL:

 *

 *  - the ib_umad_port structures are properly reference counted, and

 *    everything else is purely local to the file being created, so

 *    races against other open calls are not a problem;

 *  - the ioctl method does not affect any global state outside of the

 *    file structure being operated on;

	/* Mark ib_dev NULL and block ioctl or other file ops to progress

	 * further.

 balances device_initialize() */

 balances kref_init */

 balances kref_init() */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

/*

 * Copyright (c) 2020, Mellanox Technologies inc.  All rights reserved.

	/*

	 * If this is a user triggered destroy then do not allow destruction

	 * until the user cleans up all the mcast bindings. Unlike in other

	 * places we forcibly clean up the mcast attachments for !DESTROY

	 * because the mcast attaches are not ubojects and will not be

	 * destroyed by anything else during cleanup processing.

 send_cq is optinal */

		/* This creation bit is uverbs one, need to mask before

		 * calling drivers. It was added to prevent an extra user attr

		 * only for that when using ioctl.

/*

 * Copyright (c) 2018, Mellanox Technologies inc.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

	/* This is used in order to modify an esp flow action with an enabled

	 * replay protection to a disabled one. This is only supported via

	 * modify, as in create verb we can simply drop the REPLAY attribute and

	 * achieve the same thing.

	/* Some replay protections could always be enabled without validating

	 * anything.

	/* If the flow IPv4/IPv6 flow specifications are extended, the mask

	 * should be changed as well.

 We currently support only one encap */

 We currently support only one spec */

 Optional param, if it doesn't exist, we get -ENOENT and skip it */

	/* This can be called from FLOW_ACTION_ESP_MODIFY where

	 * UVERBS_ATTR_FLOW_ACTION_ESP_ATTRS is optional

 No need to check as this attribute is marked as MANDATORY */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

/*

 * Copyright (c) 2005 Voltaire Inc.  All rights reserved.

 * Copyright (c) 2002-2005, Network Appliance, Inc. All rights reserved.

 * Copyright (c) 1999-2019, Mellanox Technologies, Inc. All rights reserved.

 * Copyright (c) 2005-2006 Intel Corporation.  All rights reserved.

/**

 * rdma_is_consumer_reject - return true if the consumer rejected the connect

 *                           request.

 * @id: Communication identifier that received the REJECT event.

 * @reason: Value returned in the REJECT event status field.

/**

 * rdma_iw_cm_id() - return the iw_cm_id pointer for this cm_id.

 * @id: Communication Identifier

/**

 * rdma_res_to_id() - return the rdma_cm_id pointer for this restrack.

 * @res: rdma resource tracking entry pointer

/*

 * Device removal can occur at anytime, so we need extra handling to

 * serialize notifying the user of device removal with other callbacks.

 * We do this by disabling removal notification while a callback is in process,

 * and reporting it after the callback completes.

 IP version: 7:4 */

	/*

	 * The FSM uses a funny double locking where state is protected by both

	 * the handler_mutex and the spinlock. State is not allowed to change

	 * to/from a handler_mutex protected value without also holding

	 * handler_mutex.

/**

 * cma_acquire_dev_by_src_ip - Acquire cma device, port, gid attribute

 * based on source ip address.

 * @id_priv:	cm_id which should be bound to cma device

 *

 * cma_acquire_dev_by_src_ip() binds cm id to cma device, port and GID attribute

 * based on source IP address. It returns 0 on success or error code otherwise.

 * It is applicable to active and passive side cm_id.

/**

 * cma_ib_acquire_dev - Acquire cma device, port and SGID attribute

 * @id_priv:		cm id to bind to cma device

 * @listen_id_priv:	listener cm id to match against

 * @req:		Pointer to req structure containaining incoming

 *			request information

 * cma_ib_acquire_dev() acquires cma device, port and SGID attribute when

 * rdma device matches for listen_id and incoming request. It also verifies

 * that a GID table entry is present for the source address.

 * Returns 0 on success, or returns error code otherwise.

	/* Need to acquire lock to protect against reader

	 * of cma_dev->id_list such as cma_netdev_callback() and

	 * cma_process_remove().

/*

 * Select the source IB device and address to reach the destination IB address.

 Need to update QP attributes from default values. */

 Link local must match their scope_ids */

 Returns true if the req is for IPv6 link local */

 This request is an AF_IB request */

	/*

	 * If the request is not for IPv6 link local, allow matching

	 * request to any netdevice of the one or multiport rdma device.

	/*

	 * Net namespaces must match, and if the listner is listening

	 * on a specific netdevice than netdevice must match as well.

 Assuming the protocol is AF_IB */

	/*

	 * Net namespace might be getting deleted while route lookup,

	 * cm_id lookup is in progress. Therefore, perform netdevice

	 * validation, cm_id lookup under rcu lock.

	 * RCU lock along with netdevice state check, synchronizes with

	 * netdevice migrating to different net namespace and also avoids

	 * case where net namespace doesn't get deleted while lookup is in

	 * progress.

	 * If the device state is not IFF_UP, its properties such as ifindex

	 * and nd_net cannot be trusted to remain valid without rcu lock.

	 * net/core/dev.c change_net_namespace() ensures to synchronize with

	 * ongoing operations on net device after device is closed using

	 * synchronize_net().

		/*

		 * If netdevice is down, it is likely that it is administratively

		 * down or it might be migrating to different namespace.

		 * In that case avoid further processing, as the net namespace

		 * or ifindex may change.

	/*

	 * Remove from listen_any_list to prevent added devices from spawning

	 * additional listen requests.

 sync with device removal to avoid duplicate destruction */

		/*

		 * We can avoid doing the rdma_addr_cancel() based on state,

		 * only RDMA_CM_ADDR_QUERY has a work that could still execute.

		 * Notice that the addr_handler work could still be exiting

		 * outside this state, however due to the interaction with the

		 * handler_mutex the work is guaranteed not to touch id_priv

		 * during exit.

/*

 * destroy an ID from within the handler_mutex. This ensures that no other

 * handlers can start running concurrently.

	/*

	 * Setting the state to destroyed under the handler mutex provides a

	 * fence against calling handler callbacks. If this is invoked due to

	 * the failure of a handler callback then it guarentees that no future

	 * handlers will be called.

 ignore event */

 Destroy the CM ID by returning a non-zero value. */

 Destroy the CM ID by returning a non-zero value. */

 Destroy the CM ID by returning a non-zero value. */

 Create a new RDMA id for the new IW CM ID */

 User wants to destroy the CM ID */

 Listening IDs are always destroyed on removal */

 Caller must destroy this after releasing lock */

 Prevent racing with cma_process_remove() */

/**

 * rdma_set_ack_timeout() - Set the ack timeout of QP associated

 *                          with a connection identifier.

 * @id: Communication identifier to associated with service type.

 * @timeout: Ack timeout to set a QP, expressed as 4.096 * 2^(timeout) usec.

 *

 * This function should be called before rdma_connect() on active side,

 * and on passive side before rdma_accept(). It is applicable to primary

 * path only. The timeout will affect the local side of the QP, it is not

 * negotiated with remote side and zero disables the timer. In case it is

 * set before rdma_resolve_route, the value will also be used to determine

 * PacketLifeTime for RoCE.

 *

 * Return: 0 for success

/**

 * rdma_set_min_rnr_timer() - Set the minimum RNR Retry timer of the

 *			      QP associated with a connection identifier.

 * @id: Communication identifier to associated with service type.

 * @min_rnr_timer: 5-bit value encoded as Table 45: "Encoding for RNR NAK

 *		   Timer Field" in the IBTA specification.

 *

 * This function should be called before rdma_connect() on active

 * side, and on passive side before rdma_accept(). The timer value

 * will be associated with the local QP. When it receives a send it is

 * not read to handle, typically if the receive queue is empty, an RNR

 * Retry NAK is returned to the requester with the min_rnr_timer

 * encoded. The requester will then wait at least the time specified

 * in the NAK before retrying. The default is zero, which translates

 * to a minimum RNR Timer value of 655 ms.

 *

 * Return: 0 for success

 It is a five-bit value */

 Balances with cma_id_put() in cma_work_handler */

/*

 * cma_iboe_set_path_rec_l2_fields() is helper function which sets

 * path record type based on GID type.

 * It also sets up other L2 fields which includes destination mac address

 * netdev ifindex, of the path record.

 * It returns the netdev of the bound interface for this path record entry.

 Use the hint from IP Stack to select GID Type */

	/* We are interested only in first level VLAN device, so always

	 * return 1 to stop iterating over next level devices.

 If VLAN device, get it directly from the VLAN netdev */

	/* If map is found from lower device, use it; Otherwise

	 * continue with the current netdevice to get priority to tc map.

 TODO: get the hoplimit from the inet/inet6 device */

	/* In case ACK timeout is set, use this value to calculate

	 * PacketLifeTime.  As per IBTA 12.7.34,

	 * local ACK timeout = (2 * PacketLifeTime + Local CA’s ACK delay).

	 * Assuming a negligible local ACK delay, we can use

	 * PacketLifeTime = local ACK timeout/2

	 * as a reasonable approximation for RoCE networks.

	/*

	 * Store the previous src address, so that if we fail to acquire

	 * matching rdma device, old address can be restored back, which helps

	 * to cancel the cma listen operation correctly.

/*

 * If required, resolve the source address for bind and leave the id_priv in

 * state RDMA_CM_ADDR_BOUND. This oddly uses the state to determine the prior

 * calls made by ULP, a previously bound ID will not be re-bound and src_addr is

 * ignored.

 For a well behaved ULP state will be RDMA_CM_IDLE */

			/*

			 * The FSM can return back to RDMA_CM_ADDR_BOUND after

			 * rdma_resolve_ip() is called, eg through the error

			 * path in addr_handler(). If this happens the existing

			 * request must be canceled before issuing a new one.

			 * Since canceling a request is a bit slow and this

			 * oddball path is rare, keep track once a request has

			 * been issued. The track turns out to be a permanent

			 * state since this is the only cancel as it is

			 * immediately before rdma_resolve_ip().

 different dest port -> unique */

 different src address -> unique */

 different dst address -> unique */

		/*

		 * Remember previously used port number in order to avoid

		 * re-using same port immediately after it is closed.

/*

 * Check that the requested port is available.  This is called when trying to

 * bind to a specific port, or when trying to listen on a bound port.  In

 * the latter case, the provided id_priv may already be on the bind_list, but

 * we still need to check that it's okay to start listening.

 For a well behaved ULP state will be RDMA_CM_IDLE */

	/*

	 * Once the ID reaches RDMA_CM_LISTEN it is not allowed to be reusable

	 * any more, and has to be unique in the bind list.

	/*

	 * All the failure paths that lead here will not allow the req_handler's

	 * to have run.

 Destroy the CM ID by returning a non-zero value. */

 Alternate path SGID attribute currently unsupported */

/**

 * rdma_connect_locked - Initiate an active connection request.

 * @id: Connection identifier to connect.

 * @conn_param: Connection information used for connected QPs.

 *

 * Same as rdma_connect() but can only be called from the

 * RDMA_CM_EVENT_ROUTE_RESOLVED handler callback.

/**

 * rdma_connect - Initiate an active connection request.

 * @id: Connection identifier to connect.

 * @conn_param: Connection information used for connected QPs.

 *

 * Users must have resolved a route for the rdma_cm_id to connect with by having

 * called rdma_resolve_route before calling this routine.

 *

 * This call will either connect to a remote QP or obtain remote QP information

 * for unconnected rdma_cm_id's.  The actual operation is based on the

 * rdma_cm_id's port space.

/**

 * rdma_connect_ece - Initiate an active connection request with ECE data.

 * @id: Connection identifier to connect.

 * @conn_param: Connection information used for connected QPs.

 * @ece: ECE parameters

 *

 * See rdma_connect() explanation.

/**

 * rdma_accept - Called to accept a connection request or response.

 * @id: Connection identifier associated with the request.

 * @conn_param: Information needed to establish the connection.  This must be

 *   provided if accepting a connection request.  If accepting a connection

 *   response, this parameter must be NULL.

 *

 * Typically, this routine is only called by the listener to accept a connection

 * request.  It must also be called on the active side of a connection if the

 * user is performing their own QP transitions.

 *

 * In the case of error, a reject message is sent to the remote side and the

 * state of the qp associated with the id is modified to error, such that any

 * previously posted receive buffers would be flushed.

 *

 * This function is for use by kernel ULPs and must be called from under the

 * handler callback.

 Initiate or respond to a disconnect. */

 IPv6 address is an SA assigned MGID. */

 Use RDMA CM signature */

 Use RDMA CM signature */

 Not supported for kernel QPs */

 ULP is calling this wrong. */

 Record that we want to remove the device */

		/*

		 * At this point the ULP promises it won't call

		 * rdma_destroy_id() concurrently

	/*

	 * If this races with destroy then the thread that first assigns state

	 * to a destroying does the cancel.

 cma_process_remove() will delete to_destroy */

	/*

	 * There is a rare lock ordering dependency in cma_netdev_callback()

	 * that only happens when bonding is enabled. Teach lockdep that rtnl

	 * must never be nested under lock so it can find these without having

	 * to test with bonding.

/*

 * Copyright (c) 2017, Mellanox Technologies inc.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

	/*

	 * The user must ensure that no new items are added to the event_list

	 * once is_closed is set.

/*

 * Copyright (c) 2017 Mellanox Technologies. All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions are met:

 *

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions and the following disclaimer.

 * 2. Redistributions in binary form must reproduce the above copyright

 *    notice, this list of conditions and the following disclaimer in the

 *    documentation and/or other materials provided with the distribution.

 * 3. Neither the names of the copyright holders nor the names of its

 *    contributors may be used to endorse or promote products derived from

 *    this software without specific prior written permission.

 *

 * Alternatively, this software may be distributed under the terms of the

 * GNU General Public License ("GPL") version 2 as published by the Free

 * Software Foundation.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE

 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS

 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN

 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE

 * POSSIBILITY OF SUCH DAMAGE.

/*

 * Sort array elements by the netlink attribute name

 Device without FW has strlen(fw) = 0 */

	/*

	 * Link type is determined on first port and mlx4 device

	 * which can potentially have two different link type for the same

	 * IB device is considered as better to be avoided in the future,

	/*

	 * For user resources, user is should read /proc/PID/comm to get the

	 * name of the task file.

		/*

		 * Task is dead and in zombie state.

		 * There is no need to print PID anymore.

			/*

			 * This part is racy, task can be killed and PID will

			 * be zero right here but it is ok, next query won't

			 * return PID. We don't promise real-time reflection

			 * of SW objects.

 In create_qp() port is not set yet */

 Poll context is only valid for kernel CQs */

 qp_num should be ascending */

 Dump it even query failed */

	/*

	 * There is no need to take lock, because

	 * we are relying on ib_core's locking.

		/*

		 * The dumpit function returns all information from specific

		 * index. This specific index is taken from the netlink

		 * messages request sent by user and it is available

		 * in cb->args[0].

		 *

		 * Usually, the user doesn't fill this field and it causes

		 * to return everything.

		 *

	/*

	 * Right now, we are expecting the device index to get res information,

	 * but it is possible to extend this code to return all devices in

	 * one shot by checking the existence of RDMA_NLDEV_ATTR_DEV_INDEX.

	 * if it doesn't exist, we will iterate over all devices.

	 *

	 * But it is not needed for now.

	/*

	 * If no PORT_INDEX is supplied, we will return all QPs from that device

	/*

	 * FIXME: if the skip ahead is something common this loop should

	 * use xas_for_each & xas_pause to optimize, we can have a lot of

	 * objects.

	/*

	 * No more entries to fill, cancel the message and

	 * return 0 to mark end of dumpit.

	/*

	 * Copy-on-fork is supported.

	 * See commits:

	 * 70e806e4e645 ("mm: Do early cow for pinned pages during fork() for ptes")

	 * 4eae4efa2c29 ("hugetlb: do early cow when page pinned on src mm")

	 * for more details. Don't backport this without them.

	 *

	 * Return value ignored on purpose, assume copy-on-fork is not

	 * supported in case of failure.

 Only 0 and 1 are supported */

 Currently only counter for QP is supported */

/*

 * Copyright (c) 2016 Mellanox Technologies Ltd.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Lock to protect mad_agent_list */

/* The caller of this function must hold the QP security

 * mutex of the QP of the security structure in *pps.

 *

 * It takes separate ports_pkeys and security structure

 * because in some cases the pps will be for a new settings

 * or the pps will be for the real QP and security structure

 * will be for a shared QP.

/* The caller of this function must hold the QP security

 * mutex.

	/* If the QP is in the process of being destroyed

	 * the qp pointer in the security structure is

	 * undefined.  It cannot be modified now.

/* The caller of this function must hold the QP security

 * mutex.

		/* Check for the PKey again.  A racing process may

		 * have created it.

/* The caller of this function must hold the QP security

 * mutex.

	/* The setting may still be valid, i.e. after

	 * a destroy has failed for example.

/* The caller of this function must hold the QP security

 * mutex.

 If this isn't an IB device don't create the security context */

 Return if not IB */

	/* Remove the QP from the lists so it won't get added to

	 * a to_error_list during the destroy process.

	/* If the QP is already in one or more of those lists

	 * the destroying flag will ensure the to error flow

	 * doesn't operate on an undefined QP.

	/* Record the error list count to know how many completions

	 * to wait for.

 Return if not IB */

	/* If a concurrent cache update is in progress this

	 * QP security could be marked for an error state

	 * transition.  Wait for this to complete.

	/* Restore the position in the lists and verify

	 * access is still allowed in case a cache update

	 * occurred while attempting to destroy.

	 *

	 * Because these setting were listed already

	 * and removed during ib_destroy_qp_security_begin

	 * we know the pkey_index_qp_list for the PKey

	 * already exists so port_pkey_list_insert won't fail.

 Return if not IB */

	/* If a concurrent cache update is occurring we must

	 * wait until this QP security structure is processed

	 * in the QP to error flow before destroying it because

	 * the to_error_list is in use.

	/* The port/pkey settings are maintained only for the real QP. Open

	 * handles on the real QP will be in the shared_qp_list. When

	 * enforcing security on the real QP all the shared QPs will be

	 * checked as well.

		/* Add this QP to the lists for the new port

		 * and pkey settings before checking for permission

		 * in case there is a concurrent cache update

		 * occurring.  Walking the list for a cache change

		 * doesn't acquire the security mutex unless it's

		 * sending the QP to error.

		/* Clean up the lists and free the appropriate

		 * ports_pkeys structure.

/*

 * Copyright (c) 2006 Intel Corporation.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/*

 * A multicast group has four types of members: full member, non member,

 * sendonly non member and sendonly full member.

 * We need to keep track of the number of members of each

 * type based on their join state.  Adjust the number of members the belong to

 * the specified join states.

/*

 * If a multicast group has zero members left for a particular join state, but

 * the group is still a member with the SA, we need to leave that join state.

 * Determine which join states we still belong to, but that do not have any

 * active members.

 MGID must already match */

 join_state checked separately, proxy_join ignored */

/*

 * Fail a join request if it is still active - at the head of the pending queue.

/*

 * We serialize all join requests to a single group to make our lives much

 * easier.  Otherwise, two users could try to join the same group

 * simultaneously, with different configurations, one could leave while the

 * join is in progress, etc., which makes locking around error recovery

 * difficult.

	/*

	 * The user will get the multicast structure in their callback.  They

	 * could then free the multicast structure before we can return from

	 * this routine.  So we save the pointer to return before queuing

	 * any callback.

 Continue to hold reference on group until callback */

/**

 * ib_init_ah_from_mcmember - Initialize AH attribute from multicast

 * member record and gid of the device.

 * @device:	RDMA device

 * @port_num:	Port of the rdma device to consider

 * @rec:	Multicast member record to use

 * @ndev:	Optional netdevice, applicable only for RoCE

 * @gid_type:	GID type to consider

 * @ah_attr:	AH attribute to fillup on successful completion

 *

 * ib_init_ah_from_mcmember() initializes AH attribute based on multicast

 * member record and other device properties. On success the caller is

 * responsible to call rdma_destroy_ah_attr on the ah_attr. Returns 0 on

 * success or appropriate error code.

 *

	/* GID table is not based on the netdevice for IB link layer,

	 * so ignore ndev during search.

/*

 * Copyright (c) 2004 Topspin Corporation.  All rights reserved.

 * Copyright (c) 2005 Sun Microsystems, Inc. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/**

 * ib_ud_header_init - Initialize UD header structure

 * @payload_bytes:Length of packet payload

 * @lrh_present: specify if LRH is present

 * @eth_present: specify if Eth header is present

 * @vlan_present: packet is tagged vlan

 * @grh_present: GRH flag (if non-zero, GRH will be included)

 * @ip_version: if non-zero, IP header, V4 or V6, will be included

 * @udp_present :if non-zero, UDP header will be included

 * @immediate_present: specify if immediate data is present

 * @header:Structure to initialize

	/*

	 * UDP header without IP header doesn't make sense

 ICRC     */

 round up */

 ICRC     */

 round up */

 version 4 */

 5 words */

 ICRC     */

 ICRC     */

/**

 * ib_ud_header_pack - Pack UD header struct into wire format

 * @header:UD header struct

 * @buf:Buffer to pack into

 *

 * ib_ud_header_pack() packs the UD header structure @header into wire

 * format in the buffer @buf.

/**

 * ib_ud_header_unpack - Unpack UD header struct from wire format

 * @header:UD header struct

 * @buf:Buffer to pack into

 *

 * ib_ud_header_pack() unpacks the UD header structure @header from wire

 * format in the buffer @buf.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

/*

 * Copyright (c) 2018, Mellanox Technologies inc.  All rights reserved.

/*

 * This ioctl method allows calling any defined write or write_ex

 * handler. This essentially replaces the hdr/ex_hdr system with the ioctl

 * marshalling, and brings the non-ex path into the same marshalling as the ex

 * path.

	/* Allocated memory that cannot page out where we gather

	 * all object ids under a spin_lock.

 This ABI needs to be extended to provide any speed more than IB_SPEED_NDR */

 FIXME: Extend the UAPI_DEF_OBJ_NEEDS_FN stuff.. */

 Also includes any device specific object ids */

/*

 * Copyright (c) 2004 Topspin Corporation.  All rights reserved.

 * Copyright (c) 2005 Sun Microsystems, Inc. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/**

 * ib_pack - Pack a structure into a buffer

 * @desc:Array of structure field descriptions

 * @desc_len:Number of entries in @desc

 * @structure:Structure to pack from

 * @buf:Buffer to pack into

 *

 * ib_pack() packs a list of structure fields into a buffer,

 * controlled by the array of fields in @desc.

/**

 * ib_unpack - Unpack a buffer into a structure

 * @desc:Array of structure field descriptions

 * @desc_len:Number of entries in @desc

 * @buf:Buffer to unpack from

 * @structure:Structure to unpack into

 *

 * ib_pack() unpacks a list of structure fields from a buffer,

 * controlled by the array of fields in @desc.

/*

 * Copyright (c) 2018, Mellanox Technologies inc.  All rights reserved.

 * Copyright (c) 2020, Intel Corporation.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 FIXME: Extend the UAPI_DEF_OBJ_NEEDS_FN stuff.. */

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

/*

 * Copyright (c) 2018, Mellanox Technologies inc.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

	/*

	 * This check should be removed once the infrastructure

	 * have the ability to remove methods from parse tree once

	 * such condition is met.

/*

 * Copyright (c) 2018, Mellanox Technologies inc.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

/*

 * Copyright (c) 2017-2018 Mellanox Technologies. All rights reserved.

/**

 * rdma_restrack_init() - initialize and allocate resource tracking

 * @dev:  IB device

 *

 * Return: 0 on success

/**

 * rdma_restrack_clean() - clean resource tracking

 * @dev:  IB device

					/*

					 * There is no need to call get_task_struct here,

					 * because we can be here only if there are more

					 * get_task_struct() call than put_task_struct().

/**

 * rdma_restrack_count() - the current usage of specific object

 * @dev:  IB device

 * @type: actual type of object to operate

/**

 * rdma_restrack_attach_task() - attach the task onto this resource,

 * valid for user space restrack entries.

 * @res:  resource entry

 * @task: the task to attach

/**

 * rdma_restrack_set_name() - set the task for this resource

 * @res:  resource entry

 * @caller: kernel name, the current task will be used if the caller is NULL.

/**

 * rdma_restrack_parent_name() - set the restrack name properties based

 * on parent restrack

 * @dst: destination resource entry

 * @parent: parent resource entry

/**

 * rdma_restrack_new() - Initializes new restrack entry to allow _put() interface

 * to release memory in fully automatic way.

 * @res: Entry to initialize

 * @type: REstrack type

/**

 * rdma_restrack_add() - add object to the reource tracking database

 * @res:  resource entry

 Special case to ensure that LQPN points to right QP */

 Special case to ensure that cntn points to right counter */

/**

 * rdma_restrack_get_byid() - translate from ID to restrack object

 * @dev: IB device

 * @type: resource track type

 * @id: ID to take a look

 *

 * Return: Pointer to restrack entry or -ENOENT in case of error.

/**

 * rdma_restrack_del() - delete object from the reource tracking database

 * @res:  resource entry

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

/*

 * Copyright (c) 2017, Mellanox Technologies inc.  All rights reserved.

		/*

		 * This occurs when a driver uses ADD_UVERBS_ATTRIBUTES_SIMPLE

		/*

		 * ENUM_IN contains the 'ids' pointer to the driver's .rodata,

		 * so if it is specified by a driver then it always makes this

		 * into a driver method.

		/*

		 * Like other uobject based things we only support a single

		 * uobject being NEW'd or DESTROY'd

 Attributes are not allowed to be modified by drivers */

		/*

		 * Today drivers are only permitted to use idr_class and

		 * fd_class types. We can revoke the IDR types during

		 * disassociation, and the FD types require the driver to use

		 * struct file_operations.owner to prevent the driver module

		 * code from unloading while the file is open. This provides

		 * enough safety that uverbs_uobject_fd_release() will

		 * continue to work.  Drivers using FD are responsible to

		 * handle disassociation of the device on their own.

			/*

			 * Verbs specs may only have one NEW/DESTROY, we don't

			 * have the infrastructure to abort multiple NEW's or

			 * cope with multiple DESTROY failure.

 Have to check all the attrs again */

			/*

			 * If the method has a mandatory object handle

			 * attribute which relies on an object which is not

			 * present then the entire method is uncallable.

/*

 * The pre version is done before destroying the HW objects, it only blocks

 * off method access. All methods that require the ib_dev or the module data

 * must test one of these assignments prior to continuing.

/*

 * Called when a driver disassociates from the ib_uverbs_device. The

 * assumption is that the driver module will unload after. Replace everything

 * related to the driver with NULL as a safety measure.

			/*

			 * Some type_attrs are in the driver module. We don't

			 * bother to keep track of which since there should be

			 * no use of this after disassociate.

/*

 * Copyright (c) 2004 Mellanox Technologies Ltd.  All rights reserved.

 * Copyright (c) 2004 Infinicon Corporation.  All rights reserved.

 * Copyright (c) 2004 Intel Corporation.  All rights reserved.

 * Copyright (c) 2004 Topspin Corporation.  All rights reserved.

 * Copyright (c) 2004 Voltaire Corporation.  All rights reserved.

 * Copyright (c) 2005 Sun Microsystems, Inc. All rights reserved.

 * Copyright (c) 2005, 2006 Cisco Systems.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Protection domains */

/**

 * __ib_alloc_pd - Allocates an unused protection domain.

 * @device: The device on which to allocate the protection domain.

 * @flags: protection domain flags

 * @caller: caller's build-time module name

 *

 * A protection domain object provides an association between QPs, shared

 * receive queues, address handles, memory regions, and memory windows.

 *

 * Every PD has a local_dma_lkey which can be used as the lkey value for local

 * memory operations.

/**

 * ib_dealloc_pd_user - Deallocates a protection domain.

 * @pd: The protection domain to deallocate.

 * @udata: Valid user data or NULL for kernel object

 *

 * It is an error to call this function while any resources in the pd still

 * exist.  The caller is responsible to synchronously destroy them and

 * guarantee no new allocations will happen.

	/* uverbs manipulates usecnt with proper locking, while the kabi

	 * requires the caller to guarantee we can't race here.

 Address handles */

/**

 * rdma_copy_ah_attr - Copy rdma ah attribute from source to destination.

 * @dest:       Pointer to destination ah_attr. Contents of the destination

 *              pointer is assumed to be invalid and attribute are overwritten.

 * @src:        Pointer to source ah_attr.

/**

 * rdma_replace_ah_attr - Replace valid ah_attr with new new one.

 * @old:        Pointer to existing ah_attr which needs to be replaced.

 *              old is assumed to be valid or zero'd

 * @new:        Pointer to the new ah_attr.

 *

 * rdma_replace_ah_attr() first releases any reference in the old ah_attr if

 * old the ah_attr is valid; after that it copies the new attribute and holds

 * the reference to the replaced ah_attr.

/**

 * rdma_move_ah_attr - Move ah_attr pointed by source to destination.

 * @dest:       Pointer to destination ah_attr to copy to.

 *              dest is assumed to be valid or zero'd

 * @src:        Pointer to the new ah_attr.

 *

 * rdma_move_ah_attr() first releases any reference in the destination ah_attr

 * if it is valid. This also transfers ownership of internal references from

 * src to dest, making src invalid in the process. No new reference of the src

 * ah_attr is taken.

/*

 * Validate that the rdma_ah_attr is valid for the device before passing it

 * off to the driver.

		/*

		 * Make sure the passed sgid_attr is consistent with the

		 * parameters

/*

 * If the ah requires a GRH then ensure that sgid_attr pointer is filled in.

 * On success the caller is responsible to call rdma_unfill_sgid_attr().

 Move ownerhip of the kref into the ah_attr */

	/*

	 * Fill didn't change anything, the caller retains ownership of

	 * whatever it passed

	/*

	 * Otherwise, we need to undo what rdma_fill_sgid_attr so the caller

	 * doesn't see any change in the rdma_ah_attr. If we get here

	 * old_sgid_attr is NULL.

/**

 * rdma_create_ah - Creates an address handle for the

 * given address vector.

 * @pd: The protection domain associated with the address handle.

 * @ah_attr: The attributes of the address vector.

 * @flags: Create address handle flags (see enum rdma_create_ah_flags).

 *

 * It returns 0 on success and returns appropriate error code on error.

 * The address handle is used to reference a local or global destination

 * in all UD QP post sends.

/**

 * rdma_create_user_ah - Creates an address handle for the

 * given address vector.

 * It resolves destination mac address for ah attribute of RoCE type.

 * @pd: The protection domain associated with the address handle.

 * @ah_attr: The attributes of the address vector.

 * @udata: pointer to user's input output buffer information need by

 *         provider driver.

 *

 * It returns 0 on success and returns appropriate error code on error.

 * The address handle is used to reference a local or global destination

 * in all UD QP post sends.

	/* If it's IPv6, the version must be 6, otherwise, the first

	 * 20 bytes (before the IPv4 header) are garbled.

 version may be 6 or 4 because the first 20 bytes could be garbled */

	/* RoCE v2 requires no options, thus header length

	 * must be 5 words

	/* Verify checksum.

	 * We can't write on scattered buffers so we need to copy to

	 * temp buffer.

 if IPv4 header checksum is OK, believe it */

/* Resolve destination mac address and hop limit for unicast destination

 * GID entry, considering the source GID entry as well.

 * ah_attribute must have have valid port_num, sgid_index.

	/* If destination is link local and source GID is RoCEv1,

	 * IP stack is not used.

/*

 * This function initializes address handle attributes from the incoming packet.

 * Incoming packet has dgid of the receiver node on which this code is

 * getting executed and, sgid contains the GID of the sender.

 *

 * When resolving mac address of destination, the arrived dgid is used

 * as sgid and, sgid is used as dgid because sgid contains destinations

 * GID whom to respond to.

 *

 * On success the caller is responsible to call rdma_destroy_ah_attr on the

 * attr.

/**

 * rdma_move_grh_sgid_attr - Sets the sgid attribute of GRH, taking ownership

 * of the reference

 *

 * @attr:	Pointer to AH attribute structure

 * @dgid:	Destination GID

 * @flow_label:	Flow label

 * @hop_limit:	Hop limit

 * @traffic_class: traffic class

 * @sgid_attr:	Pointer to SGID attribute

 *

 * This takes ownership of the sgid_attr reference. The caller must ensure

 * rdma_destroy_ah_attr() is called before destroying the rdma_ah_attr after

 * calling this function.

/**

 * rdma_destroy_ah_attr - Release reference to SGID attribute of

 * ah attribute.

 * @ah_attr: Pointer to ah attribute

 *

 * Release reference to the SGID attribute of the ah attribute if it is

 * non NULL. It is safe to call this multiple times, and safe to call it on

 * a zero initialized ah_attr.

 Shared receive queues */

/**

 * ib_create_srq_user - Creates a SRQ associated with the specified protection

 *   domain.

 * @pd: The protection domain associated with the SRQ.

 * @srq_init_attr: A list of initial attributes required to create the

 *   SRQ.  If SRQ creation succeeds, then the attributes are updated to

 *   the actual capabilities of the created SRQ.

 * @uobject: uobject pointer if this is not a kernel SRQ

 * @udata: udata pointer if this is not a kernel SRQ

 *

 * srq_attr->max_wr and srq_attr->max_sge are read the determine the

 * requested size of the SRQ, and set to the actual values allocated

 * on return.  If ib_create_srq() succeeds, then max_wr and max_sge

 * will always be at least as large as the requested values.

 Queue pairs */

	/*

	 * TODO: The mlx4 internally overwrites send_cq and recv_cq.

	 * Unfortunately, it is not an easy task to fix that driver.

/**

 * ib_create_qp_user - Creates a QP associated with the specified protection

 *   domain.

 * @dev: IB device

 * @pd: The protection domain associated with the QP.

 * @attr: A list of initial attributes required to create the

 *   QP.  If QP creation succeeds, then the attributes are updated to

 *   the actual capabilities of the created QP.

 * @udata: User data

 * @uobj: uverbs obect

 * @caller: caller's build-time module name

	/*

	 * If the callers is using the RDMA API calculate the resources

	 * needed for the RDMA READ/WRITE operations.

	 *

	 * Note that these callers need to pass in a port number.

	/*

	 * Note: all hw drivers guarantee that max_send_sge is lower than

	 * the device RDMA WRITE SGE limit but not all hw drivers ensure that

	 * max_send_sge <= max_sge_rd.

 ??? */

/**

 * ib_resolve_eth_dmac - Resolve destination mac address

 * @device:		Device to consider

 * @ah_attr:		address handle attribute which describes the

 *			source and destination parameters

 * ib_resolve_eth_dmac() resolves destination mac address and L3 hop limit It

 * returns 0 on success or appropriate error code. It initializes the

 * necessary ah_attr fields when call is successful.

/*

 * IB core internal function to perform QP attributes modification.

			/*

			 * If the user provided the qp_attr then we have to

			 * resolve it. Kerne users have to provide already

			 * resolved rdma_ah_attr's.

		/*

		 * FIXME: This does not track the migration state, so if the

		 * user loads a new alternate path after the HW has migrated

		 * from primary->alternate we will keep the wrong

		 * references. This is OK for IB because the reference

		 * counting does not serve any functional purpose.

		/*

		 * Today the core code can only handle alternate paths and APM

		 * for IB. Ban them in roce mode.

	/*

	 * Bind this qp to a counter automatically based on the rdma counter

	 * rules. This only set in RST2INIT with port specified

/**

 * ib_modify_qp_with_udata - Modifies the attributes for the specified QP.

 * @ib_qp: The QP to modify.

 * @attr: On input, specifies the QP attributes to modify.  On output,

 *   the current values of selected QP attributes are returned.

 * @attr_mask: A bit-mask used to specify which attributes of the QP

 *   are being modified.

 * @udata: pointer to user's input output buffer information

 *   are being modified.

 * It returns 0 on success and returns appropriate error code on error.

 Completion queues */

 Memory regions */

/**

 * ib_alloc_mr() - Allocates a memory region

 * @pd:            protection domain associated with the region

 * @mr_type:       memory region type

 * @max_num_sg:    maximum sg entries available for registration.

 *

 * Notes:

 * Memory registeration page/sg lists must not exceed max_num_sg.

 * For mr_type IB_MR_TYPE_MEM_REG, the total length cannot exceed

 * max_num_sg * used_page_size.

 *

/**

 * ib_alloc_mr_integrity() - Allocates an integrity memory region

 * @pd:                      protection domain associated with the region

 * @max_num_data_sg:         maximum data sg entries available for registration

 * @max_num_meta_sg:         maximum metadata sg entries available for

 *                           registration

 *

 * Notes:

 * Memory registration page/sg lists must not exceed max_num_sg,

 * also the integrity page/sg lists must not exceed max_num_meta_sg.

 *

 Multicast groups */

	/* If QP state >= init, it is assigned to a port and we can check this

	 * port only.

 Can't get a quick answer, iterate over all ports */

	/* If we have at lease one Ethernet port, RoCE annex declares that

	 * multicast LID should be ignored. We can't tell at this step if the

	 * QP belongs to an IB or Ethernet port.

 If all the ports are IB, we can check according to IB spec. */

/**

 * ib_alloc_xrcd_user - Allocates an XRC domain.

 * @device: The device on which to allocate the XRC domain.

 * @inode: inode to connect XRCD

 * @udata: Valid user data or NULL for kernel object

/**

 * ib_dealloc_xrcd_user - Deallocates an XRC domain.

 * @xrcd: The XRC domain to deallocate.

 * @udata: Valid user data or NULL for kernel object

/**

 * ib_create_wq - Creates a WQ associated with the specified protection

 * domain.

 * @pd: The protection domain associated with the WQ.

 * @wq_attr: A list of initial attributes required to create the

 * WQ. If WQ creation succeeds, then the attributes are updated to

 * the actual capabilities of the created WQ.

 *

 * wq_attr->max_wr and wq_attr->max_sge determine

 * the requested size of the WQ, and set to the actual values allocated

 * on return.

 * If ib_create_wq() succeeds, then max_wr and max_sge will always be

 * at least as large as the requested values.

/**

 * ib_destroy_wq_user - Destroys the specified user WQ.

 * @wq: The WQ to destroy.

 * @udata: Valid user data

/**

 * ib_map_mr_sg_pi() - Map the dma mapped SG lists for PI (protection

 *     information) and set an appropriate memory region for registration.

 * @mr:             memory region

 * @data_sg:        dma mapped scatterlist for data

 * @data_sg_nents:  number of entries in data_sg

 * @data_sg_offset: offset in bytes into data_sg

 * @meta_sg:        dma mapped scatterlist for metadata

 * @meta_sg_nents:  number of entries in meta_sg

 * @meta_sg_offset: offset in bytes into meta_sg

 * @page_size:      page vector desired page size

 *

 * Constraints:

 * - The MR must be allocated with type IB_MR_TYPE_INTEGRITY.

 *

 * Return: 0 on success.

 *

 * After this completes successfully, the  memory region

 * is ready for registration.

/**

 * ib_map_mr_sg() - Map the largest prefix of a dma mapped SG list

 *     and set it the memory region.

 * @mr:            memory region

 * @sg:            dma mapped scatterlist

 * @sg_nents:      number of entries in sg

 * @sg_offset:     offset in bytes into sg

 * @page_size:     page vector desired page size

 *

 * Constraints:

 *

 * - The first sg element is allowed to have an offset.

 * - Each sg element must either be aligned to page_size or virtually

 *   contiguous to the previous element. In case an sg element has a

 *   non-contiguous offset, the mapping prefix will not include it.

 * - The last sg element is allowed to have length less than page_size.

 * - If sg_nents total byte length exceeds the mr max_num_sge * page_size

 *   then only max_num_sg entries will be mapped.

 * - If the MR was allocated with type IB_MR_TYPE_SG_GAPS, none of these

 *   constraints holds and the page_size argument is ignored.

 *

 * Returns the number of sg elements that were mapped to the memory region.

 *

 * After this completes successfully, the  memory region

 * is ready for registration.

/**

 * ib_sg_to_pages() - Convert the largest prefix of a sg list

 *     to a page vector

 * @mr:            memory region

 * @sgl:           dma mapped scatterlist

 * @sg_nents:      number of entries in sg

 * @sg_offset_p:   ==== =======================================================

 *                 IN   start offset in bytes into sg

 *                 OUT  offset in bytes for element n of the sg of the first

 *                      byte that has not been processed where n is the return

 *                      value of this function.

 *                 ==== =======================================================

 * @set_page:      driver page assignment function pointer

 *

 * Core service helper for drivers to convert the largest

 * prefix of given sg list to a page vector. The sg list

 * prefix converted is the prefix that meet the requirements

 * of ib_map_mr_sg.

 *

 * Returns the number of sg elements that were assigned to

 * a page vector.

		/*

		 * For the second and later elements, check whether either the

		 * end of element i-1 or the start of element i is not aligned

		 * on a page boundary.

 Stop mapping if there is a gap. */

			/*

			 * Coalesce this element with the last. If it is small

			 * enough just update mr->length. Otherwise start

			 * mapping from the next page.

/*

 * Post a WR and block until its completion is reaped for the SQ.

/*

 * Post a WR and block until its completion is reaped for the RQ.

/**

 * ib_drain_sq() - Block until all SQ CQEs have been consumed by the

 *		   application.

 * @qp:            queue pair to drain

 *

 * If the device has a provider-specific drain function, then

 * call that.  Otherwise call the generic drain function

 * __ib_drain_sq().

 *

 * The caller must:

 *

 * ensure there is room in the CQ and SQ for the drain work request and

 * completion.

 *

 * allocate the CQ using ib_alloc_cq().

 *

 * ensure that there are no other contexts that are posting WRs concurrently.

 * Otherwise the drain is not guaranteed.

/**

 * ib_drain_rq() - Block until all RQ CQEs have been consumed by the

 *		   application.

 * @qp:            queue pair to drain

 *

 * If the device has a provider-specific drain function, then

 * call that.  Otherwise call the generic drain function

 * __ib_drain_rq().

 *

 * The caller must:

 *

 * ensure there is room in the CQ and RQ for the drain work request and

 * completion.

 *

 * allocate the CQ using ib_alloc_cq().

 *

 * ensure that there are no other contexts that are posting WRs concurrently.

 * Otherwise the drain is not guaranteed.

/**

 * ib_drain_qp() - Block until all CQEs have been consumed by the

 *		   application on both the RQ and SQ.

 * @qp:            queue pair to drain

 *

 * The caller must:

 *

 * ensure there is room in the CQ(s), SQ, and RQ for drain work requests

 * and completions.

 *

 * allocate the CQs using ib_alloc_cq().

 *

 * ensure that there are no other contexts that are posting WRs concurrently.

 * Otherwise the drain is not guaranteed.

 Driver provides best block size to use */

/**

 * rdma_alloc_hw_stats_struct - Helper function to allocate dynamic struct

 *   for the drivers.

 * @descs: array of static descriptors

 * @num_counters: number of elements in array

 * @lifespan: milliseconds between updates

/**

 * rdma_free_hw_stats_struct - Helper function to release rdma_hw_stats

 * @stats: statistics to release

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2016 Parav Pandit <pandit.parav@gmail.com>

/**

 * ib_device_register_rdmacg - register with rdma cgroup.

 * @device: device to register to participate in resource

 *          accounting by rdma cgroup.

 *

 * Register with the rdma cgroup. Should be called before

 * exposing rdma device to user space applications to avoid

 * resource accounting leak.

/**

 * ib_device_unregister_rdmacg - unregister with rdma cgroup.

 * @device: device to unregister.

 *

 * Unregister with the rdma cgroup. Should be called after

 * all the resources are deallocated, and after a stage when any

 * other resource allocation by user application cannot be done

 * for this device to avoid any leak in accounting.

/*

 * Copyright (c) 2005 Topspin Communications.  All rights reserved.

 * Copyright (c) 2005, 2006, 2007 Cisco Systems.  All rights reserved.

 * Copyright (c) 2005 PathScale, Inc.  All rights reserved.

 * Copyright (c) 2006 Mellanox Technologies.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/*

 * Copy a response to userspace. If the provided 'resp' is larger than the

 * user buffer it is silently truncated. If the user provided a larger buffer

 * then the trailing portion is zero filled.

 *

 * These semantics are intended to support future extension of the output

 * structures.

		/*

		 * Zero fill any extra memory that user

		 * space might have provided.

/*

 * Copy a request from userspace. If the provided 'req' is larger than the

 * user buffer then the user buffer is zero extended into the 'req'. If 'req'

 * is smaller than the user buffer then the uncopied bytes in the user buffer

 * must be zero.

/*

 * Generate the value for the 'response_length' protocol used by write_ex.

 * This is the number of bytes the kernel actually wrote. Userspace can use

 * this to detect what structure members in the response the kernel

 * understood.

/*

 * The iterator version of the request interface is for handlers that need to

 * step over a flex array at the end of a command header.

/*

 * When calling a destroy function during an error unwind we need to pass in

 * the udata that is sanitized of all user arguments. Ie from the driver

 * perspective it looks like no udata was passed.

	/*

	 * Make sure that ib_uverbs_get_ucontext() sees the pointer update

	 * only after all writes to setup the ucontext have completed

 search for file descriptor */

 no file descriptor. Need CREATE flag */

 create new inode/xrcd table entry */

	/*

	 * The driver might create a new HW object as part of the rereg, we need

	 * to have a uobject ready to hold it.

		/*

		 * The new uobj for the new HW object is put into the same spot

		 * in the IDR and the old uobj & HW object is deleted.

 we copy a struct ib_uverbs_poll_cq_resp to user space */

 Remove ignored fields set in the attribute mask */

		/* We are in INIT->RTR TRANSITION (if we are not,

		 * this transition will be rejected in subsequent checks).

		 * In the INIT->RTR transition, we cannot have IB_QP_PORT set,

		 * but the IB_QP_STATE flag is required.

		 *

		 * Since kernel 3.14 (commit dbf727de7440), the uverbs driver,

		 * when IB_QP_AV is set, has required inclusion of a valid

		 * port number in the primary AV. (AVs are created and handled

		 * differently for infiniband and ethernet (RoCE) ports).

		 *

		 * Check the port number included in the primary AV against

		 * the port number in the qp struct, which was set (and saved)

		 * in the RST->INIT transition.

		/* We are in SQD->SQD. (If we are not, this transition will

		 * be rejected later in the verbs layer checks).

		 * Check for both IB_QP_PORT and IB_QP_AV, these can be set

		 * together in the SQD->SQD transition.

		 *

		 * If only IP_QP_AV was set, add in IB_QP_PORT as well (the

		 * verbs layer driver does not track primary port changes

		 * resulting from path migration. Thus, in SQD, if the primary

		 * AV is modified, the primary port should also be modified).

		 *

		 * Note that in this transition, the IB_QP_STATE flag

		 * is not allowed.

	/*

	 * Last bit is reserved for extending the attr_mask by

	 * using another field.

	/*

	 * User space filter structures must be 64 bit aligned, otherwise this

	 * may pass, but we won't handle additional new attributes.

 User flow spec size must be aligned to 4 bytes */

/*

 * Describe the input structs for write(). Some write methods have an input

 * only struct, most have an input and output. If the struct has an output then

 * the 'response' u64 must be the first field in the request structure.

 *

 * If udata is present then both the request and response structs have a

 * trailing driver_data flex array. In this case the size of the base struct

 * cannot be changed.

/*

 * The _EX versions are for use with WRITE_EX and allow the last struct member

 * to be specified. Buffers that do not include that member will be rejected.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Trace points for the IB Connection Manager.

 *

 * Author: Chuck Lever <chuck.lever@oracle.com>

 *

 * Copyright (c) 2020, Oracle and/or its affiliates.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

/*

 * Copyright (c) 2020, Mellanox Technologies inc.  All rights reserved.

 SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB

/*

 * Copyright (c) 2020, Mellanox Technologies inc.  All rights reserved.

/*

 * Copyright (c) 2004, 2005 Mellanox Technologies Ltd.  All rights reserved.

 * Copyright (c) 2004, 2005 Infinicon Corporation.  All rights reserved.

 * Copyright (c) 2004, 2005 Intel Corporation.  All rights reserved.

 * Copyright (c) 2004, 2005 Topspin Corporation.  All rights reserved.

 * Copyright (c) 2004-2007 Voltaire Corporation.  All rights reserved.

 * Copyright (c) 2005 Sun Microsystems, Inc. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 *

 Create new device info */

 Obtain send only MAD agent for SMI QP */

 Obtain send only MAD agent for GSI QP */

/*

 * Copyright (c) 2004 Topspin Communications.  All rights reserved.

 * Copyright (c) 2005 Intel Corporation. All rights reserved.

 * Copyright (c) 2005 Sun Microsystems, Inc. All rights reserved.

 * Copyright (c) 2005 Voltaire, Inc. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

	/*

	 * Indicates that entry is pending to be removed, there may

	 * be active users of this GID entry.

	 * When last user of the GID entry releases reference to it,

	 * GID entry is detached from the table.

	/* Store the ndev pointer to release reference later on in

	 * call_rcu context because by that time gid_table_entry

	 * and attr might be already freed. So keep a copy of it.

	 * ndev_storage is freed by rcu callback.

	/* In RoCE, adding a GID to the table requires:

	 * (a) Find if this GID is already exists.

	 * (b) Find a free space.

	 * (c) Write the new GID

	 *

	 * Delete requires different set of operations:

	 * (a) Find the GID

	 * (b) Delete it.

	 *

	/* Any writer to data_vec must hold this lock and the write side of

	 * rwlock. Readers must hold only rwlock. All writers must be in a

	 * sleepable context.

	/* rwlock protects data_vec[ix]->state and entry pointer.

 bit field, each bit indicates the index of default GID */

	/* IB/RoCE v1 value is set for IB_GID_TYPE_IB and IB_GID_TYPE_ROCE for

	 * user space compatibility reasons.

/** rdma_is_zero_gid - Check if given GID is zero or not.

 * @gid:	GID to check

 * Returns true if given GID is zero, returns false otherwise.

/** is_gid_index_default - Check if a given index belongs to

 * reserved default GIDs or not.

 * @table:	GID table pointer

 * @index:	Index to check in GID table

 * Returns true if index is one of the reserved default GID index otherwise

 * returns false.

	/* At this point its safe to release netdev reference,

	 * as all callers working on gid_attr->ndev are done

	 * using this netdev.

	/*

	 * The only way to avoid overwriting NULL in table is

	 * by comparing if it is same entry in table or not!

	 * If new entry in table is added by the time we free here,

	 * don't overwrite the table entry.

 Now this index is ready to be allocated */

/**

 * free_gid_work - Release reference to the GID entry

 * @work: Work structure to refer to GID entry which needs to be

 * deleted.

 *

 * free_gid_work() frees the entry from the HCA's hardware table

 * if provider supports it. It releases reference to netdevice.

/**

 * del_gid - Delete GID table entry

 *

 * @ib_dev:	IB device whose GID entry to be deleted

 * @port:	Port number of the IB device

 * @table:	GID table of the IB device for a port

 * @ix:		GID entry index to delete

 *

	/*

	 * For non RoCE protocol, GID entry slot is ready to use.

/**

 * add_modify_gid - Add or modify GID table entry

 *

 * @table:	GID table in which GID to be added or modified

 * @attr:	Attributes of the GID

 *

 * Returns 0 on success or appropriate error code. It accepts zero

 * GID addition for non RoCE ports for HCA's who report them as valid

 * GID. However such zero GIDs are not added to the cache.

	/*

	 * Invalidate any old entry in the table to make it safe to write to

	 * this index.

	/*

	 * Some HCA's report multiple GID entries with only one valid GID, and

	 * leave other unused entries as the zero GID. Convert zero GIDs to

	 * empty table entries instead of storing them.

 rwlock should be read locked, or lock should be held */

		/* find_gid() is used during GID addition where it is expected

		 * to return a free entry slot which is not duplicate.

		 * Free entry slot is requested and returned if pempty is set,

		 * so lookup free slot only if requested.

				/*

				 * Found an invalid (free) entry; allocate it.

				 * If default GID is requested, then our

				 * found slot must be one of the DEFAULT

				 * reserved slots or we fail.

				 * This ensures that only DEFAULT reserved

				 * slots are used for default property GIDs.

		/*

		 * Additionally find_gid() is used to find valid entry during

		 * lookup operation; so ignore the entries which are marked as

		 * pending for removal and the entries which are marked as

		 * invalid.

	/* Do not allow adding zero GID in support of

	 * IB spec version 1.3 section 4.1.1 point (6) and

	 * section 12.7.10 and section 12.7.20

/**

 * rdma_find_gid_by_port - Returns the GID entry attributes when it finds

 * a valid GID entry for given search parameters. It searches for the specified

 * GID value in the local software cache.

 * @ib_dev: The device to query.

 * @gid: The GID value to search for.

 * @gid_type: The GID type to search for.

 * @port: The port number of the device where the GID value should be searched.

 * @ndev: In RoCE, the net device of the device. NULL means ignore.

 *

 * Returns sgid attributes if the GID is found with valid reference or

 * returns ERR_PTR for the error.

 * The caller must invoke rdma_put_gid_attr() to release the reference.

/**

 * rdma_find_gid_by_filter - Returns the GID table attribute where a

 * specified GID value occurs

 * @ib_dev: The device to query.

 * @gid: The GID value to search for.

 * @port: The port number of the device where the GID value could be

 *   searched.

 * @filter: The filter function is executed on any matching GID in the table.

 *   If the filter function returns true, the corresponding index is returned,

 *   otherwise, we continue searching the GID table. It's guaranteed that

 *   while filter is executed, ndev field is valid and the structure won't

 *   change. filter is executed in an atomic context. filter must not be NULL.

 * @context: Private data to pass into the call-back.

 *

 * rdma_find_gid_by_filter() searches for the specified GID value

 * of which the filter function returns true in the port's GID table.

 *

 Reserve starting indices for default GIDs */

/**

 * rdma_query_gid - Read the GID content from the GID software cache

 * @device:		Device to query the GID

 * @port_num:		Port number of the device

 * @index:		Index of the GID table entry to read

 * @gid:		Pointer to GID where to store the entry's GID

 *

 * rdma_query_gid() only reads the GID entry content for requested device,

 * port and index. It reads for IB, RoCE and iWarp link layers.  It doesn't

 * hold any reference to the GID table entry in the HCA or software cache.

 *

 * Returns 0 on success or appropriate error code.

 *

/**

 * rdma_read_gid_hw_context - Read the HW GID context from GID attribute

 * @attr:		Potinter to the GID attribute

 *

 * rdma_read_gid_hw_context() reads the drivers GID HW context corresponding

 * to the SGID attr. Callers are required to already be holding the reference

 * to an existing GID entry.

 *

 * Returns the HW GID context

 *

/**

 * rdma_find_gid - Returns SGID attributes if the matching GID is found.

 * @device: The device to query.

 * @gid: The GID value to search for.

 * @gid_type: The GID type to search for.

 * @ndev: In RoCE, the net device of the device. NULL means ignore.

 *

 * rdma_find_gid() searches for the specified GID value in the software cache.

 *

 * Returns GID attributes if a valid GID is found or returns ERR_PTR for the

 * error. The caller must invoke rdma_put_gid_attr() to release the reference.

 *

/**

 * rdma_get_gid_attr - Returns GID attributes for a port of a device

 * at a requested gid_index, if a valid GID entry exists.

 * @device:		The device to query.

 * @port_num:		The port number on the device where the GID value

 *			is to be queried.

 * @index:		Index of the GID table entry whose attributes are to

 *                      be queried.

 *

 * rdma_get_gid_attr() acquires reference count of gid attributes from the

 * cached GID table. Caller must invoke rdma_put_gid_attr() to release

 * reference to gid attribute regardless of link layer.

 *

 * Returns pointer to valid gid attribute or ERR_PTR for the appropriate error

 * code.

/**

 * rdma_query_gid_table - Reads GID table entries of all the ports of a device up to max_entries.

 * @device: The device to query.

 * @entries: Entries where GID entries are returned.

 * @max_entries: Maximum number of entries that can be returned.

 * Entries array must be allocated to hold max_entries number of entries.

 *

 * Returns number of entries on success or appropriate error code.

/**

 * rdma_put_gid_attr - Release reference to the GID attribute

 * @attr:		Pointer to the GID attribute whose reference

 *			needs to be released.

 *

 * rdma_put_gid_attr() must be used to release reference whose

 * reference is acquired using rdma_get_gid_attr() or any APIs

 * which returns a pointer to the ib_gid_attr regardless of link layer

 * of IB or RoCE.

 *

/**

 * rdma_hold_gid_attr - Get reference to existing GID attribute

 *

 * @attr:		Pointer to the GID attribute whose reference

 *			needs to be taken.

 *

 * Increase the reference count to a GID attribute to keep it from being

 * freed. Callers are required to already be holding a reference to attribute.

 *

/**

 * rdma_read_gid_attr_ndev_rcu - Read GID attribute netdevice

 * which must be in UP state.

 *

 * @attr:Pointer to the GID attribute

 *

 * Returns pointer to netdevice if the netdevice was attached to GID and

 * netdevice is in UP state. Caller must hold RCU lock as this API

 * reads the netdev flags which can change while netdevice migrates to

 * different net namespace. Returns ERR_PTR with error code otherwise.

 *

	/* We are interested only in first level vlan device, so

	 * always return 1 to stop iterating over next level devices.

/**

 * rdma_read_gid_l2_fields - Read the vlan ID and source MAC address

 *			     of a GID entry.

 *

 * @attr:	GID attribute pointer whose L2 fields to be read

 * @vlan_id:	Pointer to vlan id to fill up if the GID entry has

 *		vlan id. It is optional.

 * @smac:	Pointer to smac to fill up for a GID entry. It is optional.

 *

 * rdma_read_gid_l2_fields() returns 0 on success and returns vlan id

 * (if gid entry has vlan) and source MAC, or returns error.

			/* If the netdev is upper device and if it's lower

			 * device is vlan device, consider vlan id of the

			 * the lower vlan device for this gid entry.

	/* Before distributing the cache update event, first sync

	 * the cache.

	/* GID event is notified already for individual GID entries by

	 * dispatch_gid_change_event(). Hence, notifiy for rest of the

	 * events.

/**

 * ib_dispatch_event - Dispatch an asynchronous event

 * @event:Event to dispatch

 *

 * Low-level drivers must call ib_dispatch_event() to dispatch the

 * event to all registered event handlers when an asynchronous event

 * occurs.

	/*

	 * The release function frees all the cache elements.

	 * This function should be called as part of freeing

	 * all the device's resources when the cache could no

	 * longer be accessed.

	/* The cleanup function waits for all in-progress workqueue

	 * elements and cleans up the GID cache. This function should be

	 * called after the device was removed from the devices list and

	 * all clients were removed, so the cache exists but is

	 * non-functional and shouldn't be updated anymore.

	/*

	 * Flush the wq second time for any pending GID delete work.

/*

 * Copyright (c) 2005 Intel Corporation.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Do structure copy and the over-write fields */

 Set to default subnet to indicate error */

 TODO: No need to set this */

/*

 * Copyright (c) 2017, Mellanox Technologies inc.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 Must be first */

	/*

	 * Must be last. bundle ends in a flex array which overlaps

	 * internal_buffer.

/*

 * Each method has an absolute minimum amount of memory it needs to allocate,

 * precompute that amount and determine if the onstack memory can be used or

 * if allocation is need.

 Do not want order-2 allocations for this. */

/**

 * _uverbs_alloc() - Quickly allocate memory for use with a bundle

 * @bundle: The bundle

 * @size: Number of bytes to allocate

 * @flags: Allocator flags

 *

 * The bundle allocator is intended for allocations that are connected with

 * processing the system call related to the bundle. The allocated memory is

 * always freed once the system call completes, and cannot be freed any other

 * way.

 *

 * This tries to use a small pool of pre-allocated memory for performance.

	/*

	 * Since idr is 4B and *uobjects is >= 4B, we can use attr->uobjects

	 * to store idrs array and avoid additional memory allocation. The

	 * idrs array is offset to the end of the uobjects array so we will be

	 * able to read idr and replace with a pointer.

 Currently we only support PTR_IN based enums */

		/* Ensure that any data provided by userspace beyond the known

		 * struct is zero. Userspace that knows how to use some future

		 * longer struct will fail here if used with an old kernel and

		 * non-zero content, making ABI compat/discovery simpler.

		/*

		 * The type of uattr->data is u64 for UVERBS_ATTR_TYPE_IDR and

		 * s64 for UVERBS_ATTR_TYPE_FD. We can cast the u64 to s64

		 * here without caring about truncation as we know that the

		 * IDR implementation today rejects negative IDs

 Copy the allocated id to the user-space */

/*

 * We search the radix tree with the method prefix and now we want to fast

 * search the suffix bits to get a particular attribute pointer. It is not

 * totally clear to me if this breaks the radix tree encasulation or not, but

 * it uses the iter data to determine if the method iter points at the same

 * chunk that will store the attribute, if so it just derefs it directly. By

 * construction in most kernel configs the method and attrs will all fit in a

 * single radix chunk, so in most cases this will have no search. Other cases

 * this falls back to a full search.

		/*

		 * Kernel does not support the attribute but user-space says it

		 * is mandatory

 Reject duplicate attributes from user-space */

 See uverbs_disassociate_api() */

 User space did not provide all the mandatory attributes */

	/*

	 * Until the drivers are revised to use the bundle directly we have to

	 * assume that the driver wrote to its UHW_OUT and flag userspace

	 * appropriately.

	/*

	 * EPROTONOSUPPORT is ONLY to be returned if the ioctl framework can

	 * not invoke the method because the request is not supported.  No

	 * other cases should return this code.

 fast path for simple uobjects */

 Space for the pbundle->bundle.attrs flex array */

 only valid if bundle has uobject */

 Missing attribute means 0 flags */

	/*

	 * New userspace code should use 8 bytes to pass flags, but we

	 * transparently support old userspaces that were using 4 bytes as

	 * well.

/*

 * Fill a ib_udata struct (core or uhw) using the given attribute IDs.

 * This is primarily used to convert the UVERBS_ATTR_UHW() into the

 * ib_udata format used by the drivers.

/*

 * This is only used if the caller has directly used copy_to_use to write the

 * data.  It signals to user space that the buffer is filled in.

 Once called an abort will call through to the type's destroy_hw() */

/*

 * Copyright (c) 2005 Topspin Communications.  All rights reserved.

 * Copyright (c) 2005 Cisco Systems.  All rights reserved.

 * Copyright (c) 2005 Mellanox Technologies. All rights reserved.

 * Copyright (c) 2020 Intel Corporation. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

/**

 * ib_umem_find_best_pgsz - Find best HW page size to use for this MR

 *

 * @umem: umem struct

 * @pgsz_bitmap: bitmap of HW supported page sizes

 * @virt: IOVA

 *

 * This helper is intended for HW that support multiple page

 * sizes but can do only a single page size in an MR.

 *

 * Returns 0 if the umem requires page sizes not supported by

 * the driver to be mapped. Drivers always supporting PAGE_SIZE

 * or smaller will never see a 0 result.

 ODP must always be self consistent. */

	/* rdma_for_each_block() has a bug if the page size is smaller than the

	 * page size used to build the umem. For now prevent smaller page sizes

	 * from being returned.

	/* The best result is the smallest page size that results in the minimum

	 * number of required pages. Compute the largest page size that could

	 * work based on VA address bits that don't change.

 offset into first SGL */

		/* Walk SGL and reduce max page size if VA/PA bits differ

		 * for any address.

		/* Except for the last entry, the ending iova alignment sets

		 * the maximum possible page size as the low bits of the iova

		 * must be zero when starting the next chunk.

	/* The mask accumulates 1's in each position where the VA and physical

	 * address differ, thus the length of trailing 0 is the largest page

	 * size that can pass the VA through to the physical.

/**

 * ib_umem_get - Pin and DMA map userspace memory.

 *

 * @device: IB device to connect UMEM

 * @addr: userspace virtual address to start at

 * @size: length of region to pin

 * @access: IB_ACCESS_xxx flags for memory being pinned

	/*

	 * If the combination of the addr and size requested for this memory

	 * region causes an integer overflow, return error.

	/*

	 * Drivers should call ib_umem_find_best_pgsz() to set the iova

	 * correctly.

/**

 * ib_umem_release - release memory pinned with ib_umem_get

 * @umem: umem struct to release

/*

 * Copy from the given ib_umem's pages to the given buffer.

 *

 * umem - the umem to copy from

 * offset - offset to start copying from

 * dst - destination buffer

 * length - buffer length

 *

 * Returns 0 on success, or an error code.

/*

 * Copyright (c) 2005 Intel Inc. All rights reserved.

 * Copyright (c) 2005-2006 Voltaire, Inc. All rights reserved.

 * Copyright (c) 2014 Intel Corporation.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 10 seconds until we can find the packet lifetime */

 duplicate first MAD */

 40 seconds until we can find the packet lifetimes */

 2 seconds for an ACK until we can find the packet lifetime */

 Unmatched send */

 Send is already done */

 Unmatched or DS RMPP ACK */

 Repeated ACK for DS RMPP transaction */

 Send is already done */

 Old ACK */

 If no response is expected, the ACK completes the send */

 Send failure will just result in a timeout/retry */

 We need to wait for the final ACK even if there isn't a response */

 RMPP not active */

 ACK, STOP, or ABORT */

 Canceled or send error */

 Response received */

 Send done */

 Wait for ACK */

 RMPP not active */

/*

 * Copyright (c) 2004, 2005 Topspin Communications.  All rights reserved.

 * Copyright (c) 2005 Mellanox Technologies Ltd.  All rights reserved.

 * Copyright (c) 2005 Sun Microsystems, Inc. All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

 in deci-Gb/sec */

 default to SDR for invalid rates */

 -EINVAL is returned for user space compatibility reasons. */

		/* If reading GID fails, it is likely due to GID entry being

		 * empty (invalid) or reserved GID in the table.  User space

		 * expects to read GID table entries as long as it given index

		 * is within GID table size.  Administrative/debugging tool

		 * fails to query rest of the GID entries if it hits error

		 * while querying a GID of the given index.  To avoid user

		 * space throwing such error on fail to read gid, return zero

		 * GID as before. This maintains backward compatibility.

/*

 * Get a Perfmgmt MAD block of data.

 * Returns error code or the number of bytes retrieved.

 PortSelect field */

/*

 * Counters added by extended set

/*

 * Figure out which counter table to use depending on

 * the device capabilities.

 We have extended counters */

 But not the IETF ones */

 Fall back to normal counters */

	/*

	 * Two extra attribue elements here, one for the lifespan entry and

	 * one to NULL terminate the list for the sysfs core code

	/*

	 * Two extra attribue elements here, one for the lifespan entry and

	 * one to NULL terminate the list for the sysfs core code

/*

 * Create the sysfs:

 *  ibp0s9/ports/XX/gid_attrs/{ndevs,types}/YYY

 * YYY is the gid table index in decimal

/*

 * Create the sysfs:

 *  ibp0s9/ports/XX/{gids,pkeys,counters}/YYY

	/*

	 * If port == 0, it means hw_counters are per device and not per

	 * port, so holder should be device. Therefore skip per port

	 * counter initialization.

/**

 * ib_port_register_client_groups - Add an ib_client's attributes to the port

 *

 * @ibdev: IB device to add counters

 * @port_num: valid port number

 * @groups: Group list of attributes

 *

 * Do not use. Only for legacy sysfs compatibility.

/*

 * Copyright (c) 2015, Mellanox Technologies inc.  All rights reserved.

 *

 * This software is available to you under a choice of one of two

 * licenses.  You may choose to be licensed under the terms of the GNU

 * General Public License (GPL) Version 2, available from the file

 * COPYING in the main directory of this source tree, or the

 * OpenIB.org BSD license below:

 *

 *     Redistribution and use in source and binary forms, with or

 *     without modification, are permitted provided that the following

 *     conditions are met:

 *

 *      - Redistributions of source code must retain the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer.

 *

 *      - Redistributions in binary form must reproduce the above

 *        copyright notice, this list of conditions and the following

 *        disclaimer in the documentation and/or other materials

 *        provided with the distribution.

 *

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS

 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

 * SOFTWARE.

