 SPDX-License-Identifier: GPL-2.0+

	/*

	 * On p10 predecessors, quadword is handle differently then

	 * other instructions.

/*

 * If hw has multiple DAWR registers, we also need to check all

 * dawrx constraint bits to confirm this is _really_ a valid event.

 * If type is UNKNOWN, but privilege level matches, consider it as

 * a positive match.

	/*

	 * The Cache Management instructions other than dcbz never

	 * cause a match. i.e. if type is CACHEOP, the instruction

	 * is dcbz, and dcbz is treated as Store.

/*

 * Return true if the event is valid wrt dawr configuration,

 * including extraneous exception. Otherwise return false.

	/*

	 * 8xx supports only one breakpoint and thus we can

	 * unconditionally return true.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  c 2001 PPC 64 Team, IBM Corp

 *

 * /dev/nvram driver for PPC64

 If change this size, then change the size of NVNAME_LEN */

 Terminating null required only for names < 12 chars. */

/*

 * For capturing and compressing an oops or panic report...



 * big_oops_buf[] holds the uncompressed text we're capturing.

 *

 * oops_buf[] holds the compressed text, preceded by a oops header.

 * oops header has u16 holding the version of oops header (to differentiate

 * between old and new format header) followed by u16 holding the length of

 * the compressed* text (*Or uncompressed, if compression fails.) and u64

 * holding the timestamp. oops_buf[] gets written to NVRAM.

 *

 * oops_log_info points to the header. oops_data points to the compressed text.

 *

 * +- oops_buf

 * |                                   +- oops_data

 * v                                   v

 * +-----------+-----------+-----------+------------------------+

 * | version   | length    | timestamp | text                   |

 * | (2 bytes) | (2 bytes) | (8 bytes) | (oops_data_sz bytes)   |

 * +-----------+-----------+-----------+------------------------+

 * ^

 * +- oops_log_info

 *

 * We preallocate these buffers during init to avoid kmalloc during oops/panic.

 Compression parameters */

/* nvram_write_os_partition

 *

 * We need to buffer the error logs into nvram to ensure that we have

 * the failure information to decode.  If we have a severe error there

 * is no way to guarantee that the OS or the machine is in a state to

 * get back to user land and write the error to disk.  For example if

 * the SCSI device driver causes a Machine Check by writing to a bad

 * IO address, there is no way of guaranteeing that the device driver

 * is in any state that is would also be able to write the error data

 * captured to disk, thus we buffer it in NVRAM for analysis on the

 * next boot.

 *

 * In NVRAM the partition containing the error log buffer will looks like:

 * Header (in bytes):

 * +-----------+----------+--------+------------+------------------+

 * | signature | checksum | length | name       | data             |

 * |0          |1         |2      3|4         15|16        length-1|

 * +-----------+----------+--------+------------+------------------+

 *

 * The 'data' section would look like (in bytes):

 * +--------------+------------+-----------------------------------+

 * | event_logged | sequence # | error log                         |

 * |0            3|4          7|8                  error_log_size-1|

 * +--------------+------------+-----------------------------------+

 *

 * event_logged: 0 if event has not been logged to syslog, 1 if it has

 * sequence #: The unique sequence # for each event. (until it wraps)

 * error log: The error log from event_scan

/* nvram_read_partition

 *

 * Reads nvram partition for at most 'length'

/* nvram_init_os_partition

 *

 * This sets up a partition with an "OS" signature.

 *

 * The general strategy is the following:

 * 1.) If a partition with the indicated name already exists...

 *	- If it's large enough, use it.

 *	- Otherwise, recycle it and keep going.

 * 2.) Search for a free partition that is large enough.

 * 3.) If there's not a free partition large enough, recycle any obsolete

 * OS partitions and try again.

 * 4.) Will first try getting a chunk that will satisfy the requested size.

 * 5.) If a chunk of the requested size cannot be allocated, then try finding

 * a chunk that will satisfy the minum needed.

 *

 * Returns 0 on success, else -1.

 Look for ours */

 Found one but too small, remove it */

 Create one if we didn't find */

 Derived from logfs_compress() */

 Compress the text from big_oops_buf into oops_buf. */

 Reset the iterator to start reading partitions again */

/**

 * nvram_pstore_write - pstore write callback for nvram

 * @record:             pstore record to write, with @id to be set

 *

 * Called by pstore_dump() when an oops or panic report is logged in the

 * printk buffer.

 * Returns 0 on successful write.

 part 1 has the recent messages from printk buffer */

/*

 * Reads the oops/panic report, rtas, of-config and common partition.

 * Returns the length of the data we read from each partition.

 * Returns 0 if we've been called before.

 Old format oops header had 2-byte record size */

 Print error only when pstore.backend == nvram */

	/*

	 * Figure compression (preceded by elimination of each line's <n>

	 * severity prefix) will reduce the oops/panic report to at most

	 * 45% of its original size.

/*

 * This is our kmsg_dump callback, called after an oops or panic report

 * has been written to the printk buffer.  We want to capture as much

 * of the printk buffer as possible.  First, capture as much as we can

 * that we think will compress sufficiently to fit in the lnx,oops-log

 * partition.  If that's too much, go back and capture uncompressed text.

 These are almost always orderly shutdowns. */

 Panic report already captured. */

 assume 6 shorts */

 The sum may have spilled into the 3rd byte.  Fold it back. */

 The sum cannot exceed 2 bytes.  Fold it into a checksum */

/*

 * Per the criteria passed via nvram_remove_partition(), should this

 * partition be removed?  1=remove, 0=keep

/**

 * nvram_remove_partition - Remove one or more partitions in nvram

 * @name: name of the partition to remove, or NULL for a

 *        signature only match

 * @sig: signature of the partition(s) to remove

 * @exceptions: When removing all partitions with a matching signature,

 *        leave these alone.

 Make partition a free partition */

 Merge contiguous ones */

/**

 * nvram_create_partition - Create a partition in nvram

 * @name: name of the partition to create

 * @sig: signature of the partition to create

 * @req_size: size of data to allocate in bytes

 * @min_size: minimum acceptable size (0 means req_size)

 *

 * Returns a negative error code or a positive nvram index

 * of the beginning of the data area of the newly created

 * partition. If you provided a min_size smaller than req_size

 * you need to query for the actual size yourself after the

 * call using nvram_partition_get_size().

 Convert sizes from bytes to blocks */

	/* If no minimum size specified, make it the same as the

	 * requested size

 Now add one block to each for the header */

	/* Find a free partition that will give us the maximum needed size 

 Create our OS partition */

 Adjust or remove the partition we stole the space from */

 Clear the new partition */

/**

 * nvram_get_partition_size - Get the data size of an nvram partition

 * @data_index: This is the offset of the start of the data of

 *              the partition. The same value that is returned by

 *              nvram_create_partition().

/**

 * nvram_find_partition - Find an nvram partition by signature and name

 * @name: Name of the partition or NULL for any name

 * @sig: Signature to test against

 * @out_size: if non-NULL, returns the size of the data part of the partition

 nvram_read will advance us */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2020, Jordan Niethe, IBM Corporation.

 *

 * This file contains low level CPU setup functions.

 * Originally written in assembly by Benjamin Herrenschmidt & various other

 * authors.

 Disable CPU_FTR_HVMODE and return false if MSR:HV is not set */

 POWER9 has no VRMASD */

 clear HDICE */

/*

 * Setup a sane LPCR:

 *   Called with initial LPCR and desired LPES 2-bit value

 *

 *   LPES = 0b01 (HSRR0/1 used for 0x500)

 *   PECE = 0b111

 *   DPFD = 4

 *   HDICE = 0

 *   VC = 0b100 (VPM0=1, VPM1=0, ISL=0)

 *   VRMASD = 0b10000 (L=1, LP=00)

 *

 * Other bits untouched for now

/*

 * Note that we can be called twice of pseudo-PVRs.

 * The parameter offset is not used.

 LPES = 0 */

 LPES = 0 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  arch/powerpc/kernel/pmc.c

 *

 *  Copyright (C) 2004 David Gibson, IBM Corporation.

 *  Includes code formerly from arch/ppc/kernel/perfmon.c:

 *    Author: Andy Fleming

 *    Copyright (c) 2004 Freescale Semiconductor, Inc

 mostly for debugging */

 POWER4 requires the following sequence */

 CONFIG_PPC64 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * polling mode stateless debugging stuff, originally for NS16550 Serial Ports

 *

 * c 2001 PPC 64 Team, IBM Corp

/*

 * Early debugging facilities. You can enable _one_ of these via .config,

 * if you do so your kernel _will not boot_ on anything else. Be careful.

 For LPAR machines that have an HVC console on vterm 0 */

 For LPAR machines that have an HVSI console on vterm 0 */

 For use on Apple G5 machines */

 RTAS panel debug */

 RTAS console debug */

 Maple real mode debug */

 PPC44x debug */

 PPC40x debug */

 In memory console */

 udbg library, used by xmon et al */

/*

 * Early boot console based on udbg

/*

 * Called by setup_system after ppc_md->probe and ppc_md->early_init.

 * Call it again after setting udbg_putc in ppc_md->setup_arch.

 if you want to use this as a regular output console */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Extracted from cputable.c

 *

 *  Copyright (C) 2001 Ben. Herrenschmidt (benh@kernel.crashing.org)

 *

 *  Modifications for ppc64:

 *      Copyright (C) 2003 Dave Engebretsen <engebret@us.ibm.com>

 *  Copyright (C) 2005 Stephen Rothwell, IBM Corporation

 before kvm_guest_init()

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SMP support for ppc.

 *

 * Written by Cort Dougan (cort@cs.nmt.edu) borrowing a great

 * deal of code from the sparc and intel versions.

 *

 * Copyright (C) 1999 Cort Dougan <cort@cs.nmt.edu>

 *

 * PowerPC-64 Support added by Dave Engebretsen, Peter Bergner, and

 * Mike Corrigan {engebret|bergner|mikec}@us.ibm.com

 State of each CPU during hotplug phases */

 Maximum number of properties that groups of threads within a core can share */

/*

 * On big-cores system, thread_group_l1_cache_map for each CPU corresponds to

 * the set its siblings that share the L1-cache.

/*

 * On some big-cores system, thread_group_l2_cache_map for each CPU

 * corresponds to the set its siblings within the core that share the

 * L2-cache.

/*

 * On P10, thread_group_l3_cache_map for each CPU is equal to the

 * thread_group_l2_cache_map

 SMP operations for this machine */

 Can't be static due to PowerMac hackery */

/*

 * Returns 1 if the specified cpu should be brought up during boot.

 * Used to inhibit booting threads if they've been disabled or

 * limited on the command line

	/* Special case - we inhibit secondary thread startup

	 * during boot if the user requests it.

	/*

	 * The processor is currently spinning, waiting for the

	 * cpu_start field to become non-zero After we set cpu_start,

	 * the processor will continue on to secondary_start

	/*

	 * Ok it's not there, so it might be soft-unplugged, let's

	 * try to bring it back

 CONFIG_HOTPLUG_CPU */

 CONFIG_PPC64 */

/*

 * The NMI IPI is a fallback and not truly non-maskable. It is simpler

 * than going through the call function infrastructure, and strongly

 * serialized, so it is more appropriate for debugging.

 optional function to request ipi, for controllers with >= 4 ipis */

 current messages */

	/*

	 * Order previous accesses before accesses in the IPI handler.

	/*

	 * cause_ipi functions are required to include a full barrier

	 * before doing whatever causes the IPI.

 order any irq clear */

 sync-free variant. Callers should ensure synchronization */

		/*

		 * Must check for PPC_MSG_RM_HOST_ACTION messages

		 * before PPC_MSG_CALL_FUNCTION messages because when

		 * a VM is destroyed, we call kick_all_cpus_sync()

		 * to ensure that any pending PPC_MSG_RM_HOST_ACTION

		 * messages have completed before we free any VCPUs.

 CONFIG_PPC_SMP_MUXED_IPI */

/*

 * "NMI IPI" system.

 *

 * NMI IPIs may not be recoverable, so should not be used as ongoing part of

 * a running system. They can be used for crash, debug, halt/reboot, etc.

 *

 * The IPI call waits with interrupts disabled until all targets enter the

 * NMI handler, then returns. Subsequent IPIs can be issued before targets

 * have returned from their handlers, so there is no guarantee about

 * concurrency or re-entrancy.

 *

 * A new NMI can be issued before all targets exit the handler.

 *

 * The IPI call may time out without all targets entering the NMI handler.

 * In that case, there is some logic to recover (and ignore subsequent

 * NMI interrupts that may eventually be raised), but the platform interrupt

 * handler may not be able to distinguish this from other exception causes,

 * which may cause a crash.

/*

 * Platform NMI handler calls this to ack

	/*

	 * Unexpected NMIs are possible here because the interrupt may not

	 * be able to distinguish NMI IPIs from other types of NMIs, or

	 * because the caller may have timed out.

/*

 * - cpu is the target CPU (must not be this CPU), or NMI_IPI_ALL_OTHERS.

 * - fn is the target callback function.

 * - delay_us > 0 is the delay before giving up waiting for targets to

 *   begin executing the handler, == 0 specifies indefinite delay.

 ALL_OTHERS */

 Interrupts remain hard disabled */

 nmi_ipi_busy is set here, so unlock/lock is okay */

 Timeout waiting for CPUs to call smp_handle_nmi_ipi */

 CONFIG_NMI_IPI */

			/*

			 * crash_ipi_callback will wait for

			 * all cpus, including offline CPUs.

			 * We don't care about nmi_ipi_function.

			 * Offline cpus will jump straight into

			 * crash_ipi_callback, we can skip the

			 * entire NMI dance and waiting for

			 * cpus to clear pending mask, etc.

	/*

	 * IRQs are already hard disabled by the smp_handle_nmi_ipi.

 CONFIG_NMI_IPI */

	/*

	 * Offlining CPUs in stop_this_cpu can result in scheduler warnings,

	 * (see commit de6e5d38417e), but printk_safe_flush_on_panic() wants

	 * to know other CPUs are offline before it breaks locks to flush

	 * printk buffers, in case we panic()ed while holding the lock.

	/*

	 * Prevent waiting on csd lock from a previous smp_send_stop.

	 * This is racy, but in general callers try to do the right

	 * thing and only fire off one smp_send_stop (e.g., see

	 * kernel/panic.c)

 CONFIG_NMI_IPI */

/*

 * Relationships between CPUs are maintained in a set of per-cpu cpumasks so

 * rather than just passing around the cpumask we pass around a function that

 * returns the that cpumask for the given CPU.

/*

 * Extends set_cpus_related. Instead of setting one CPU at a time in

 * dstmask, set srcmask at oneshot. dstmask should be super set of srcmask.

/*

 * parse_thread_groups: Parses the "ibm,thread-groups" device tree

 *                      property for the CPU device node @dn and stores

 *                      the parsed output in the thread_groups_list

 *                      structure @tglp.

 *

 * @dn: The device node of the CPU device.

 * @tglp: Pointer to a thread group list structure into which the parsed

 *      output of "ibm,thread-groups" is stored.

 *

 * ibm,thread-groups[0..N-1] array defines which group of threads in

 * the CPU-device node can be grouped together based on the property.

 *

 * This array can represent thread groupings for multiple properties.

 *

 * ibm,thread-groups[i + 0] tells us the property based on which the

 * threads are being grouped together. If this value is 1, it implies

 * that the threads in the same group share L1, translation cache. If

 * the value is 2, it implies that the threads in the same group share

 * the same L2 cache.

 *

 * ibm,thread-groups[i+1] tells us how many such thread groups exist for the

 * property ibm,thread-groups[i]

 *

 * ibm,thread-groups[i+2] tells us the number of threads in each such

 * group.

 * Suppose k = (ibm,thread-groups[i+1] * ibm,thread-groups[i+2]), then,

 *

 * ibm,thread-groups[i+3..i+k+2] (is the list of threads identified by

 * "ibm,ppc-interrupt-server#s" arranged as per their membership in

 * the grouping.

 *

 * Example:

 * If "ibm,thread-groups" = [1,2,4,8,10,12,14,9,11,13,15,2,2,4,8,10,12,14,9,11,13,15]

 * This can be decomposed up into two consecutive arrays:

 * a) [1,2,4,8,10,12,14,9,11,13,15]

 * b) [2,2,4,8,10,12,14,9,11,13,15]

 *

 * where in,

 *

 * a) provides information of Property "1" being shared by "2" groups,

 *  each with "4" threads each. The "ibm,ppc-interrupt-server#s" of

 *  the first group is {8,10,12,14} and the

 *  "ibm,ppc-interrupt-server#s" of the second group is

 *  {9,11,13,15}. Property "1" is indicative of the thread in the

 *  group sharing L1 cache, translation cache and Instruction Data

 *  flow.

 *

 * b) provides information of Property "2" being shared by "2" groups,

 *  each group with "4" threads. The "ibm,ppc-interrupt-server#s" of

 *  the first group is {8,10,12,14} and the

 *  "ibm,ppc-interrupt-server#s" of the second group is

 *  {9,11,13,15}. Property "2" indicates that the threads in each

 *  group share the L2-cache.

 *

 * Returns 0 on success, -EINVAL if the property does not exist,

 * -ENODATA if property does not have a value, and -EOVERFLOW if the

 * property data isn't large enough.

/*

 * get_cpu_thread_group_start : Searches the thread group in tg->thread_list

 *                              that @cpu belongs to.

 *

 * @cpu : The logical CPU whose thread group is being searched.

 * @tg : The thread-group structure of the CPU node which @cpu belongs

 *       to.

 *

 * Returns the index to tg->thread_list that points to the the start

 * of the thread_group that @cpu belongs to.

 *

 * Returns -1 if cpu doesn't belong to any of the groups pointed to by

 * tg->thread_list.

 cpumask of CPUs with asymmetric SMT dependency */

/*

 * P9 has a slightly odd architecture where pairs of cores share an L2 cache.

 * This topology makes it *much* cheaper to migrate tasks between adjacent cores

 * since the migrated task remains cache hot. We want to take advantage of this

 * at the scheduler level so an extra topology level is required.

/*

 * We can't just pass cpu_l2_cache_mask() directly because

 * returns a non-const pointer and the compiler barfs on that.

	/* 

	 * setup_cpu may need to be called on the boot cpu. We havent

	 * spun any cpus up but lets be paranoid.

 Fixup boot cpu */

		/*

		 * numa_node_id() works after this.

 Init the cpumasks so the boot CPU is related to itself */

		/*

		 * All threads of a core will all belong to the same core,

		 * chip_id_lookup_table will have one entry per core.

		 * Assumption: if boot_cpuid doesn't have a chip-id, then no

		 * other CPUs, will also not have chip-id.

 Update affinity of all IRQs previously aimed at this CPU */

	/*

	 * Depending on the details of the interrupt controller, it's possible

	 * that one of the interrupts we just migrated away from this CPU is

	 * actually already pending on this CPU. If we leave it in that state

	 * the interrupt will never be EOI'ed, and will never fire again. So

	 * temporarily enable interrupts here, to allow any pending interrupt to

	 * be received (and EOI'ed), before we take this CPU offline.

/*

 * The cpu_state should be set to CPU_UP_PREPARE in kick_cpu(), otherwise

 * the cpu_state is always CPU_DEAD after calling generic_set_cpu_dead(),

 * which makes the delay in generic_cpu_die() not happen.

 HOTPLUG_CPU */

	/*

	 * Don't allow secondary threads to come online if inhibited

	/*

	 * The platform might need to allocate resources prior to bringing

	 * up the CPU

	/* Make sure callin-map entry is 0 (can be leftover a CPU

	 * hotplug

	/* The information for processor bringup must

	 * be written out to main store before we release

	 * the processor.

 wake up cpus */

	/*

	 * wait to see if the cpu made a callin (is actually up).

	 * use this value that I found through experimentation.

	 * -- Cort

		/*

		 * CPUs can take much longer to come up in the

		 * hotplug case.  Wait five seconds.

 Wait until cpu puts itself in the online & active maps */

/* Return the value of the reg property corresponding to the given

 * logical cpu.

 Helper routines for cpu to core mapping */

/* Must be called when no change can occur to cpu_present_mask,

 * i.e. during cpu online or offline.

	/*

	 * If the threads in a thread-group share L2 cache, then the

	 * L2-mask can be obtained from thread_group_l2_cache_map.

 Verify that L1-cache siblings are a subset of L2 cache-siblings */

 Assume only core siblings share cache with this CPU */

 Update l2-cache mask with all the CPUs that are part of submask */

 Skip all CPUs already part of current CPU l2-cache mask */

		/*

		 * when updating the marks the current CPU has not been marked

		 * online, but we need to update the cache masks

 Skip all CPUs already part of current CPU l2-cache */

 Assume only siblings are part of this CPU's coregroup */

 Update coregroup mask with all the CPUs that are part of submask */

 Skip all CPUs already part of coregroup mask */

 Skip all CPUs not part of this coregroup */

	/*

	 * This CPU will not be in the online mask yet so we need to manually

	 * add it to it's own thread sibling mask.

 In CPU-hotplug path, hence use GFP_ATOMIC */

 Update core_mask with all the CPUs that are part of submask */

 Skip all CPUs already part of current CPU core mask */

 If chip_id is -1; limit the cpu_core_mask to within DIE*/

 Activate a secondary processor. */

 PPC64 calls setup_kup() in early_setup_secondary() */

 Update topology CPU masks */

	/*

	 * Check for any shared caches. Note that this must be done on a

	 * per-core basis because one core in the pair might be disabled.

 We can enable ftrace for secondary cpus now */

	/*

	 * Try to consolidate topology levels here instead of

	 * allowing scheduler to degenerate.

	 * - Dont consolidate if masks are different.

	 * - Dont consolidate if sd_flags exists and are different.

	/*

	 * We are running pinned to the boot CPU, see rest_init().

 Update sibling maps */

	/*

	 * Disable on the down path. This will be re-enabled by

	 * start_secondary() via start_secondary_resume() below

 If we return, we re-enter start_secondary */

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * udbg for NS16550 compatible serial ports

 *

 * Copyright (C) 2001-2005 PPC 64 Team, IBM Corp

 Data ready */

 Overrun */

 Parity error */

 Framing error */

 Break */

 Xmit holding register empty */

 Xmitter empty */

 Error */

 wait for idle */

 wait for char */

 8 data, 1 stop, no parity */

 RTS/DTR */

 Clear & enable FIFOs */

 select divisor latch registers.  */

 now, read the divisor */

 check prescaling */

 restore the LCR */

 calculate speed */

 sanity check */

 CONFIG_PPC_MAPLE */

 CONFIG_PPC_PASEMI */

 CONFIG_PPC_EARLY_DEBUG_44x */

 CONFIG_PPC_EARLY_DEBUG_40x */

 CONFIG_PPC_EARLY_DEBUG_MICROWATT */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Derived from "arch/powerpc/platforms/pseries/pci_dlpar.c"

 *

 * Copyright (C) 2003 Linda Xie <lxie@us.ibm.com>

 * Copyright (C) 2005 International Business Machines

 *

 * Updates, 2005, John Rose <johnrose@austin.ibm.com>

 * Updates, 2005, Linas Vepstas <linas@austin.ibm.com>

 * Updates, 2013, Gavin Shan <shangw@linux.vnet.ibm.com>

/**

 * pcibios_release_device - release PCI device

 * @dev: PCI device

 *

 * The function is called before releasing the indicated PCI device.

 free()ing the pci_dn has been deferred to us, do it now */

/**

 * pci_hp_remove_devices - remove all devices under this bus

 * @bus: the indicated PCI bus

 *

 * Remove all of the PCI devices under this bus both from the

 * linux pci device tree, and from the powerpc EEH address cache.

 First go down child busses */

/**

 * pci_hp_add_devices - adds new pci devices to bus

 * @bus: the indicated PCI bus

 *

 * This routine will find and fixup new pci devices under

 * the indicated bus. This routine presumes that there

 * might already be some devices under this bridge, so

 * it carefully tries to add only new devices.  (And that

 * is how this routine differs from other, similar pcibios

 * routines.)

 use ofdt-based probe */

		/*

		 * Use legacy probe. In the partial hotplug case, we

		 * probably have grandchildren devices unplugged. So

		 * we don't check the return value from pci_scan_slot() in

		 * order for fully rescan all the way down to pick them up.

		 * They can have been removed during partial hotplug.

		/*

		 * Scan bridges that are already configured. We don't touch

		 * them unless they are misconfigured (which will be done in

		 * the second scan below).

 Scan bridges that need to be reconfigured */

 SPDX-License-Identifier: GPL-2.0

/*

 * Smp timebase synchronization for ppc.

 *

 * Copyright (C) 2003 Samuel Rydh (samuel@ibrium.se)

 *

 if this fails then this kernel won't work anyway... */

 binary search */

 guard against inaccurate mttb */

 exiting */

 SPDX-License-Identifier: GPL-2.0

/*

 * Early init before relocation

/*

 * We're called here very early in the boot.

 *

 * Note that the kernel may be running at an address which is different

 * from the address that it was linked at, so we must use RELOC/PTRRELOC

 * to access static data (including strings).  -- paulus

 First zero the BSS */

	/*

	 * Identify the CPU type and fix up code sections

	 * that depend on which cpu we have.

/*

 * Common signal handling code for both 32 and 64 bits

 *

 *    Copyright (c) 2007 Benjamin Herrenschmidt, IBM Corporation

 *    Extracted from signal_32.c and signal_64.c

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License.  See the file README.legal in the main directory of

 * this archive for more details.

 save FPR copy to local buffer then write to the thread_struct */

 save FPR copy to local buffer then write to the thread_struct */

 save FPR copy to local buffer then write to the thread_struct */

 save FPR copy to local buffer then write to the thread_struct */

 CONFIG_PPC_TRANSACTIONAL_MEM */

/* Log an error when sending an unhandled signal to a process. Controlled

 * through debug.exception-trace sysctl.

/*

 * Allocate space for the signal frame

 Default to using normal stack */

 syscall ? */

 error signalled ? */

 32-bit compat mode sign extend? */

		/* ERESTARTNOHAND means that the syscall should only be

		 * restarted if there was no handler for the signal, and since

		 * we only get here if there is a handler, we dont restart.

		/* ERESTARTSYS means to restart the syscall if there is no

		 * handler or the handler was registered with SA_RESTART

		/* ERESTARTNOINTR means that the syscall should be

		 * called again after the signal handler returns.

 Is there any syscall restart business here ? */

 No signal to deliver -- put the saved sigmask back */

 no signals delivered */

        /*

	 * Reenable the DABR before delivering the signal to

	 * user space. The DABR will have been cleared if it

	 * triggered inside the kernel.

 Re-enable the breakpoints for the signal stack */

	/* When in an active transaction that takes a signal, we need to be

	 * careful with the stack.  It's possible that the stack has moved back

	 * up after the tbegin.  The obvious case here is when the tbegin is

	 * called inside a function that returns before a tend.  In this case,

	 * the stack is part of the checkpointed transactional memory state.

	 * If we write over this non transactionally or in suspend, we are in

	 * trouble because if we get a tm abort, the program counter and stack

	 * pointer will be back at the tbegin but our in memory stack won't be

	 * valid anymore.

	 *

	 * To avoid this, when taking a signal in an active transaction, we

	 * need to use the stack pointer from the checkpointed state, rather

	 * than the speculated state.  This ensures that the signal context

	 * (written tm suspended) will be written below the stack required for

	 * the rollback.  The transaction is aborted because of the treclaim,

	 * so any memory written between the tbegin and the signal will be

	 * rolled back anyway.

	 *

	 * For signals taken in non-TM or suspended mode, we use the

	 * normal/non-checkpointed stack pointer.

		/*

		 * If we treclaim, we must clear the current thread's TM bits

		 * before re-enabling preemption. Otherwise we might be

		 * preempted and have the live MSR[TS] changed behind our back

		 * (tm_recheckpoint_new_task() would recheckpoint). Besides, we

		 * enter the signal handler in non-transactional state.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PCI Error Recovery Driver for RPA-compliant PPC64 platform.

 * Copyright IBM Corp. 2004 2005

 * Copyright Linas Vepstas <linas@linas.org> 2004, 2005

 *

 * Send comments and feedback to Linas Vepstas <linas@austin.ibm.com>

/**

 * eeh_pcid_get - Get the PCI device driver

 * @pdev: PCI device

 *

 * The function is used to retrieve the PCI device driver for

 * the indicated PCI device. Besides, we will increase the reference

 * of the PCI device driver to prevent that being unloaded on

 * the fly. Otherwise, kernel crash would be seen.

/**

 * eeh_pcid_put - Dereference on the PCI device driver

 * @pdev: PCI device

 *

 * The function is called to do dereference on the PCI device

 * driver of the indicated PCI device.

/**

 * eeh_disable_irq - Disable interrupt for the recovering device

 * @dev: PCI device

 *

 * This routine must be called when reporting temporary or permanent

 * error to the particular PCI device to disable interrupt of that

 * device. If the device has enabled MSI or MSI-X interrupt, we needn't

 * do real work because EEH should freeze DMA transfers for those PCI

 * devices encountering EEH errors, which includes MSI or MSI-X.

	/* Don't disable MSI and MSI-X interrupts. They are

	 * effectively disabled by the DMA Stopped state

	 * when an EEH error occurs.

/**

 * eeh_enable_irq - Enable interrupt for the recovering device

 * @dev: PCI device

 *

 * This routine must be called to enable interrupt while failed

 * device could be resumed.

		/*

		 * FIXME !!!!!

		 *

		 * This is just ass backwards. This maze has

		 * unbalanced irq_enable/disable calls. So instead of

		 * finding the root cause it works around the warning

		 * in the irq_enable code by conditionally calling

		 * into it.

		 *

		 * That's just wrong.The warning in the core code is

		 * there to tell people to fix their asymmetries in

		 * their own code, not by abusing the core information

		 * to avoid it.

		 *

		 * I so wish that the assymetry would be the other way

		 * round and a few more irq_disable calls render that

		 * shit unusable forever.

		 *

		 *	tglx

	/*

	 * We cannot access the config space on some adapters.

	 * Otherwise, it will cause fenced PHB. We don't save

	 * the content in their config space and will restore

	 * from the initial config space saved when the EEH

	 * device is created.

/**

 * eeh_report_error - Report pci error to each device driver

 * @edev: eeh device

 * @driver: device's PCI driver

 *

 * Report an EEH error to each device driver.

/**

 * eeh_report_mmio_enabled - Tell drivers that MMIO has been enabled

 * @edev: eeh device

 * @driver: device's PCI driver

 *

 * Tells each device driver that IO ports, MMIO and config space I/O

 * are now enabled.

/**

 * eeh_report_reset - Tell device that slot has been reset

 * @edev: eeh device

 * @driver: device's PCI driver

 *

 * This routine must be called while EEH tries to reset particular

 * PCI device so that the associated PCI device driver could take

 * some actions, usually to save data the driver needs so that the

 * driver can work again while the device is recovered.

	/*

	 * The content in the config space isn't saved because

	 * the blocked config space on some adapters. We have

	 * to restore the initial saved config space when the

	 * EEH device is created.

/**

 * eeh_report_resume - Tell device to resume normal operations

 * @edev: eeh device

 * @driver: device's PCI driver

 *

 * This routine must be called to notify the device driver that it

 * could resume so that the device driver can do some initialization

 * to make the recovered device work again.

/**

 * eeh_report_failure - Tell device driver that device is dead.

 * @edev: eeh device

 * @driver: device's PCI driver

 *

 * This informs the device driver that the device is permanently

 * dead, and that no further recovery attempts will be made on it.

	/*

	 * Actually, we should remove the PCI bridges as well.

	 * However, that's lots of complexity to do that,

	 * particularly some of devices under the bridge might

	 * support EEH. So we just care about PCI devices for

	 * simplicity here.

 Remove it from PCI subsystem */

/*

 * Explicitly clear PE's frozen state for PowerNV where

 * we have frozen PE until BAR restore is completed. It's

 * harmless to clear it for pSeries. To be consistent with

 * PE reset (for 3 times), we try to clear the frozen state

 * for 3 times as well.

 Bail if the PE is being recovered */

 Put the PE into recovery mode */

 Save states */

 Issue reset */

 Unfreeze the PE */

 Restore device state */

 Clear recovery mode */

/**

 * eeh_reset_device - Perform actual reset of a pci slot

 * @driver_eeh_aware: Does the device's driver provide EEH support?

 * @pe: EEH PE

 * @bus: PCI bus corresponding to the isolcated slot

 * @rmv_data: Optional, list to record removed devices

 *

 * This routine must be called to do reset on the indicated PE.

 * During the reset, udev might be invoked because those affected

 * PCI devices will be removed and then added.

 pcibios will clear the counter; save the value */

	/*

	 * We don't remove the corresponding PE instances because

	 * we need the information afterwords. The attached EEH

	 * devices are expected to be attached soon when calling

	 * into pci_hp_add_devices().

	/*

	 * Reset the pci controller. (Asserts RST#; resets config space).

	 * Reconfigure bridges and devices. Don't try to bring the system

	 * up if the reset failed for some reason.

	 *

	 * During the reset, it's very dangerous to have uncontrolled PCI

	 * config accesses. So we prefer to block them. However, controlled

	 * PCI config accesses initiated from EEH itself are allowed.

 Restore PE */

 Clear frozen state */

	/* Give the system 5 seconds to finish running the user-space

	 * hotplug shutdown scripts, e.g. ifdown for ethernet.  Yes,

	 * this is a hack, but if we don't do this, and try to bring

	 * the device up before the scripts have taken it down,

	 * potentially weird things happen.

		/*

		 * The EEH device is still connected with its parent

		 * PE. We should disconnect it so the binding can be

		 * rebuilt when adding PCI devices.

/* The longest amount of time to wait for a pci device

 * to come back on line, in seconds.

/* Walks the PE tree after processing an event to remove any stale PEs.

 *

 * NB: This needs to be recursive to ensure the leaf PEs get removed

 * before their parents do. Although this is possible to do recursively

 * we don't since this is easier to read and we need to garantee

 * the leaf nodes will be handled first.

/**

 * eeh_check_slot_presence - Check if a device is still present in a slot

 * @pdev: pci_dev to check

 *

 * This function may return a false positive if we can't determine the slot's

 * presence state. This might happen for for PCIe slots if the PE containing

 * the upstream bridge is also frozen, or the bridge is part of the same PE

 * as the device.

 *

 * This shouldn't happen often, but you might see it if you hotplug a PCIe

 * switch.

 set the attention indicator while we've got the slot ops */

/**

 * eeh_handle_normal_event - Handle EEH events on a specific PE

 * @pe: EEH PE - which should not be used after we return, as it may

 * have been invalidated.

 *

 * Attempts to recover the given PE.  If recovery fails or the PE has failed

 * too many times, remove the PE.

 *

 * While PHB detects address or data parity errors on particular PCI

 * slot, the associated PE will be frozen. Besides, DMA's occurring

 * to wild addresses (which usually happen due to bugs in device

 * drivers or in PCI adapter firmware) can cause EEH error. #SERR,

 * #PERR or other misc PCI-related errors also can trigger EEH errors.

 *

 * Recovery process consists of unplugging the device driver (which

 * generated hotplug events to userspace), then issuing a PCI #RST to

 * the device, then reconfiguring the PCI config space for all bridges

 * & devices under this slot, and then finally restarting the device

 * drivers (which cause a second set of hotplug events to go out to

 * userspace).

	/*

	 * When devices are hot-removed we might get an EEH due to

	 * a driver attempting to touch the MMIO space of a removed

	 * device. In this case we don't have a device to recover

	 * so suppress the event if we can't find any present devices.

	 *

	 * The hotplug driver should take care of tearing down the

	 * device itself.

 nothing to recover */

 Log the event */

	/*

	 * Print the saved stack trace now that we've verified there's

	 * something to recover.

 FIXME: Use the same format as dump_stack() */

 CONFIG_STACKTRACE */

	/* Walk the various device drivers attached to this slot through

	 * a reset sequence, giving each an opportunity to do what it needs

	 * to accomplish the reset.  Each child gets a report of the

	 * status ... if any child can't handle the reset, then the entire

	 * slot is dlpar removed and added.

	 *

	 * When the PHB is fenced, we have to issue a reset to recover from

	 * the error. Override the result if necessary to have partially

	 * hotplug for this case.

	/* Get the current PCI slot state. This can take a long time,

	 * sometimes over 300 seconds for certain systems.

	/* Since rtas may enable MMIO when posting the error log,

	 * don't post the error log until after all dev drivers

	 * have been informed.

	/* If all device drivers were EEH-unaware, then shut

	 * down all of the device drivers, and hope they

	 * go down willingly, without panicing the system.

 If all devices reported they can proceed, then re-enable MMIO */

 If all devices reported they can proceed, then re-enable DMA */

			/*

			 * We didn't do PE reset for the case. The PE

			 * is still in frozen state. Clear it before

			 * resuming the PE.

 If any device called out for a reset, then reset the slot */

		/*

		 * For those hot removed VFs, we should add back them after PF

		 * get recovered properly.

 Tell all device drivers that they can resume operations */

		/*

		 * About 90% of all real-life EEH failures in the field

		 * are due to poorly seated PCI cards. Only 10% or so are

		 * due to actual, failed cards.

 Notify all devices that they're about to go down. */

 Mark the PE to be removed permanently */

		/*

		 * Shut down the device drivers for good. We mark

		 * all removed devices correctly to avoid access

		 * the their PCI config any more.

 The passed PE should no longer be used */

	/*

	 * Clean up any PEs without devices. While marked as EEH_PE_RECOVERYING

	 * we don't want to modify the PE tree structure so we do it here.

 clear the slot attention LED for all recovered devices */

/**

 * eeh_handle_special_event - Handle EEH events without a specific failing PE

 *

 * Called when an EEH event is detected but can't be narrowed down to a

 * specific PE.  Iterates through possible failures and handles them as

 * necessary.

 Mark all PHBs in dead state */

 Purge all events */

 Mark the PE in fenced state */

 Purge all events of the PHB */

		/*

		 * For fenced PHB and frozen PE, it's handled as normal

		 * event. We have to remove the affected PHBs for dead

		 * PHB and IOC

 Notify all devices to be down */

		/*

		 * If we have detected dead IOC, we needn't proceed

		 * any more since all PHBs would have been removed

/*

 * PowerPC backend to the KGDB stub.

 *

 * 1998 (c) Michael AK Tesch (tesch@cs.wisc.edu)

 * Copyright (C) 2003 Timesys Corporation.

 * Copyright (C) 2004-2006 MontaVista Software, Inc.

 * PPC64 Mods (C) 2005 Frank Rowand (frowand@mvista.com)

 * PPC32 support restored by Vitaly Wool <vwool@ru.mvista.com> and

 * Sergei Shtylyov <sshtylyov@ru.mvista.com>

 * Copyright (C) 2007-2008 Wind River Systems, Inc.

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2. This program as licensed "as is" without any warranty of any

 * kind, whether express or implied.

/*

 * This table contains the mapping between PowerPC hardware trap types, and

 * signals, which are primarily what GDB understands.  GDB and the kernel

 * don't always agree on values, so we use constants taken from gdb-6.2.

 Trap type code for powerpc */

 Signal that we map this trap into */

 SIGINT */  },		
 SIGSEGV */ },		
 SIGSEGV */ },		
 SIGSEGV */ },		
 SIGINT */  },		
 SIGBUS */  },		
 SIGTRAP */ },		
 SIGFPE */  },		
 SIGALRM */ },		
 SIGCHLD */ },		
 SIGTRAP */ },		
 SIGFPE */  },		
 SIGFPE */  },		
 SIGFPE */  },		
 SIGFPE */  },		
 SIGFPE */  },		
 SIGILL */  },		
 SIGFPE */  },		
 SIGALRM */ },		
 SIGINT */  }, 	
 ! CONFIG_FSL_BOOKE */

 SIGALRM */ },		
 SIGALRM */ },		
 SIGINT */  }, 	
 SIGFPE */  },		
 SIGFPE */  },		
 ! (defined(CONFIG_40x) || defined(CONFIG_BOOKE)) */

 SIGTRAP */ },		
 SIGILL */  },		
 ! CONFIG_PPC_8xx */

 SIGILL */  },		
 SIGFPE */  },		
 SIGTRAP */ }, 	
 SIGILL */  },		
 SIGILL */  },		
 SIGILL */  },		
 SIGFPE */  },		
 SIGILL */  },		
 ! CONFIG_PPC64 */

 SIGINT */  },		
 SIGFPE */  },		
 SIGILL */  },		
 SIGTRAP */ },		
 Must be last */

 default for things we don't know about */

/**

 *

 *	kgdb_skipexception - Bail out of KGDB when we've been triggered.

 *	@exception: Exception vector number

 *	@regs: Current &struct pt_regs.

 *

 *	On some architectures we need to skip a breakpoint exception when

 *	it occurs after a breakpoint has been removed.

 *

 KGDB functions to use existing PowerPC64 hooks. */

 Regs GPR0-2 */

 Regs GPR3-13 are caller saved, not in regs->gpr[] */

 Regs GPR14-31 */

 fp registers not used by kernel, leave zero */

 First 0 -> 31 gpr registers*/

 pc, msr, ls... registers 64 -> 69 */

 FP registers 32 -> 63 */

 fp registers not used by kernel, leave zero */

 First 0 -> 31 gpr registers*/

 pc, msr, ls... registers 64 -> 69 */

 FP registers 32 -> 63 */

 fp registers not used by kernel, leave zero */

/*

 * This function does PowerPC specific processing for interfacing to gdb.

		/*

		 * sAA..AA   Step one instruction from AA..AA

		 * This will return an error to gdb ..

 handle the optional parameter */

 set the trace bit if we're stepping */

/*

 * Global data

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Port for PPC64 David Engebretsen, IBM Corp.

 * Contains common pci routines for ppc64 platform, pSeries and iSeries brands.

 * 

 * Copyright (C) 2003 Anton Blanchard <anton@au.ibm.com>, IBM

 *   Rework, based on alpha PCI code.

/* pci_io_base -- the base address from which io bars are offsets.

 * This is the lowest I/O base address (so bar values are always positive),

 * and it *must* be the start of ISA space if an ISA bus exists because

 * ISA drivers use hard coded offsets.  If no ISA bus exists nothing

 * is mapped on the first 64K of IO space

	/* For now, override phys_mem_access_prot. If we need it,g

	 * later, we may move that initialization to each ppc_md

	/* On ppc64, we always enable PCI domains and we keep domain 0

	 * backward compatible in /proc for video cards

 Scan all of the recorded PCI controllers.  */

 Call common code to handle resource allocation */

 Add devices. */

 Call machine dependent fixup */

	/* If this is not a PHB, we only flush the hash table over

	 * the area mapped by this bridge. We don't play with the PTE

	 * mappings since we might have to deal with sub-page alignments

	 * so flushing the hash table is the only sane way to make sure

	 * that no hash entries are covering that removed bridge area

	 * while still allowing other busses overlapping those pages

	 *

	 * Note: If we ever support P2P hotplug on Book3E, we'll have

	 * to do an appropriate TLB flush here too

 Get the host bridge */

	/*

	 * Let's allocate some IO space for that guy. We don't pass VM_IOREMAP

	 * because we don't care about alignment tricks that the core does in

	 * that case.  Maybe we should due to stupid card with incomplete

	 * address decoding but I'd rather not deal with those outside of the

	 * reserved 64K legacy region.

 Make sure IO area address is clear */

 If there's no IO to map on that bus, get away too */

	/* Let's allocate some IO space for that guy. We don't pass

	 * VM_IOREMAP because we don't care about alignment tricks that

	 * the core does in that case. Maybe we should due to stupid card

	 * with incomplete address decoding but I'd rather not deal with

	 * those outside of the reserved 64K legacy region.

 Fixup hose IO resource */

	/* If this not a PHB, nothing to do, page tables still exist and

	 * thus HPTEs will be faulted in when needed

	/* Argh ! Please forgive me for that hack, but that's the

	 * simplest way to get existing XFree to not lockup on some

	 * G5 machines... So when something asks for bus 0 io base

	 * (bus 0 is HT root), we return the AGP one instead.

	/* That syscall isn't quite compatible with PCI domains, but it's

	 * used on pre-domains setup. We return the first match

 SPDX-License-Identifier: GPL-2.0

/*

 * Watchdog support on powerpc systems.

 *

 * Copyright 2017, IBM Corporation.

 *

 * This uses code from arch/sparc/kernel/nmi.c and kernel/watchdog.c

/*

 * The powerpc watchdog ensures that each CPU is able to service timers.

 * The watchdog sets up a simple timer on each CPU to run once per timer

 * period, and updates a per-cpu timestamp and a "pending" cpumask. This is

 * the heartbeat.

 *

 * Then there are two systems to check that the heartbeat is still running.

 * The local soft-NMI, and the SMP checker.

 *

 * The soft-NMI checker can detect lockups on the local CPU. When interrupts

 * are disabled with local_irq_disable(), platforms that use soft-masking

 * can leave hardware interrupts enabled and handle them with a masked

 * interrupt handler. The masked handler can send the timer interrupt to the

 * watchdog's soft_nmi_interrupt(), which appears to Linux as an NMI

 * interrupt, and can be used to detect CPUs stuck with IRQs disabled.

 *

 * The soft-NMI checker will compare the heartbeat timestamp for this CPU

 * with the current time, and take action if the difference exceeds the

 * watchdog threshold.

 *

 * The limitation of the soft-NMI watchdog is that it does not work when

 * interrupts are hard disabled or otherwise not being serviced. This is

 * solved by also having a SMP watchdog where all CPUs check all other

 * CPUs heartbeat.

 *

 * The SMP checker can detect lockups on other CPUs. A gobal "pending"

 * cpumask is kept, containing all CPUs which enable the watchdog. Each

 * CPU clears their pending bit in their heartbeat timer. When the bitmask

 * becomes empty, the last CPU to clear its pending bit updates a global

 * timestamp and refills the pending bitmask.

 *

 * In the heartbeat timer, if any CPU notices that the global timestamp has

 * not been updated for a period exceeding the watchdog threshold, then it

 * means the CPU(s) with their bit still set in the pending mask have had

 * their heartbeat stop, and action is taken.

 *

 * Some platforms implement true NMI IPIs, which can be used by the SMP

 * watchdog to detect an unresponsive CPU and pull it out of its stuck

 * state with the NMI IPI, to get crash/debug data from it. This way the

 * SMP watchdog can detect hardware interrupts off lockups.

 timebase ticks until panic */

 panic other CPUs */

 interval between heartbeat */

 SMP checker bits */

	/*

	 * Avoid locking layers if possible.

	 * This may be called from low level interrupt handlers at some

	 * point in future.

 Make it soft-NMI safe */

 Do not panic from here because that can recurse into NMI IPI layer */

 Double check some things under lock */

		/*

		 * Try to trigger the stuck CPUs, unless we are going to

		 * get a backtrace on all of them anyway.

 Take the stuck CPUs out of the watch group */

	/*

	 * Force flush any remote buffers that might be stuck in IRQ context

	 * and therefore could not run their irq_work.

 should only arrive from kernel, with irqs disabled */

 Can happen in CPU unplug case */

 Have the SMP detector trigger a bit later */

 2/5 is the factor that the perf based detector uses */

/*

 * Invoked from core watchdog init.

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Firmware Assisted dump: A robust mechanism to get reliable kernel crash

 * dump with assistance from firmware. This approach does not use kexec,

 * instead firmware assists in booting the kdump kernel while preserving

 * memory contents. The most of the code implementation has been adapted

 * from phyp assisted dump implementation written by Linas Vepstas and

 * Manish Ahuja

 *

 * Copyright 2011 IBM Corporation

 * Author: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>

/*

 * The CPU who acquired the lock to trigger the fadump crash should

 * wait for other CPUs to enter.

 *

 * The timeout is in milliseconds.

 16K - 128 entries */

/*

 * fadump_cma_init() - Initialize CMA area from a fadump reserved memory

 *

 * This function initializes CMA area from fadump reserved memory.

 * The total size of fadump reserved memory covers for boot memory size

 * + cpu data size + hpte size and metadata.

 * Initialize only the area equivalent to boot memory size for CMA use.

 * The reamining portion of fadump reserved memory will be not given

 * to CMA and pages for thoes will stay reserved. boot memory size is

 * aligned per CMA requirement to satisy cma_init_reserved_mem() call.

 * But for some reason even if it fails we still have the memory reservation

 * with us and we can still continue doing fadump.

	/*

	 * Do not use CMA if user has provided fadump=nocma kernel parameter.

	 * Return 1 to continue with fadump old behaviour.

		/*

		 * Though the CMA init has failed we still have memory

		 * reservation with us. The reserved memory will be

		 * blocked from production system usage.  Hence return 1,

		 * so that we can continue with fadump.

	/*

	 * So we now have successfully initialized cma area for fadump.

 CONFIG_CMA */

 Scan the Firmware Assisted dump configuration details. */

/*

 * If fadump is registered, check if the memory provided

 * falls within boot memory area and reserved memory area.

/*

 * Returns true, if there are no holes in memory area between d_start to d_end,

 * false otherwise.

 Memory hole from d_start to start */

/*

 * Returns true, if there are no holes in boot memory area,

 * false otherwise.

/*

 * Returns true, if there are no holes in reserved memory area,

 * false otherwise.

 Print firmware assisted dump configurations for debugging purpose. */

/**

 * fadump_calculate_reserve_size(): reserve variable boot area 5% of System RAM

 *

 * Function to find the largest memory size we need to reserve during early

 * boot process. This will be the size of the memory that is required for a

 * kernel to boot successfully.

 *

 * This function has been taken from phyp-assisted dump feature implementation.

 *

 * returns larger of 256MB or 5% rounded down to multiples of 256MB.

 *

 * TODO: Come up with better approach to find out more accurate memory size

 * that is required for a kernel to boot successfully.

 *

	/*

	 * Check if the size is specified through crashkernel= cmdline

	 * option. If yes, then use that but ignore base as fadump reserves

	 * memory at a predefined offset.

		/*

		 * Adjust if the boot memory size specified is above

		 * the upper limit.

		/*

		 * 'fadump_reserve_mem=' is being used to reserve memory

		 * for firmware-assisted dump.

 divide by 20 to get 5% of value */

 round it down in multiples of 256 */

 Truncate to memory_limit. We don't want to over reserve the memory.*/

/*

 * Calculate the total memory size required to be reserved for

 * firmware-assisted dump registration.

 ELF core header.*/

 place holder for cpu notes */

 Program headers for crash memory regions. */

 This is to hold kernel metadata on platforms that support it */

/*

 * Firmware usually has a hard limit on the data it can copy per region.

 * Honour that by splitting a memory range into multiple regions.

/*

 * Returns true, if the given range overlaps with reserved memory ranges

 * starting at idx. Also, updates idx to index of overlapping memory range

 * with the given memory range.

 * False, otherwise.

/*

 * Locate a suitable memory area to reserve memory for FADump. While at it,

 * lookup reserved-ranges & avoid overlap with them, as they are used by F/W.

	/*

	 * Initialize boot memory size

	 * If dump is active then we have already calculated the size during

	 * first kernel.

	/*

	 * Calculate the memory boundary.

	 * If memory_limit is less than actual memory boundary then reserve

	 * the memory for fadump beyond the memory_limit and adjust the

	 * memory_limit accordingly, so that the running kernel can run with

	 * specified memory_limit.

		/*

		 * FADump capture kernel doesn't care much about hugepages.

		 * In fact, handling hugepages in capture kernel is asking for

		 * trouble. So, disable HugeTLB support when fadump is active.

		/*

		 * If last boot has crashed then reserve all the memory

		 * above boot memory size so that we don't touch it until

		 * dump is written to disk by userspace tool. This memory

		 * can be released for general use by invalidating fadump.

		/*

		 * Reserve memory at an offset closer to bottom of the RAM to

		 * minimize the impact of memory hot-remove operation.

		/*

		 * Calculate the kernel metadata address and register it with

		 * f/w if the platform supports.

 Look for fadump= cmdline option. */

/*

 * Look for fadump_reserve_mem= cmdline option

 * TODO: Remove references to 'fadump_reserve_mem=' parameter,

 *       the sooner 'crashkernel=' parameter is accustomed to.

 Do not include first CPU */

	/*

	 * old_cpu == -1 means this is the first CPU which has come here,

	 * go ahead and trigger fadump.

	 *

	 * old_cpu != -1 means some other CPU has already on it's way

	 * to trigger fadump, just keep looping here.

		/*

		 * We can't loop here indefinitely. Wait as long as fadump

		 * is in force. If we race with fadump un-registration this

		 * loop will break and then we go down to normal panic path

		 * and reboot. If fadump is in force the first crashing

		 * cpu will definitely trigger fadump.

	/*

	 * If we came in via system reset, wait a while for the secondary

	 * CPUs to enter.

	/*

	 * FIXME: How do i get PID? Do I really need it?

	 * prstatus.pr_pid = ????

 First note is a place holder for cpu notes info. */

 Allocate buffer to hold cpu crash notes. */

/*

 * Allocate or reallocate mem_ranges array in incremental units

 * of PAGE_SIZE.

	/*

	 * Fold adjacent memory ranges to bring down the memory ranges/

	 * PT_LOAD segments count.

 resize the array on reaching the limit */

 Update to the new resized array */

/*

 * Traverse through memblock structure and setup crash memory ranges. These

 * ranges will be used create PT_LOAD program headers in elfcore header.

	/*

	 * Boot memory region(s) registered with firmware are moved to

	 * different location at the time of crash. Create separate program

	 * header(s) for this memory chunk(s) with the correct offset.

		/*

		 * skip the memory chunk that is already added

		 * (0 through boot_memory_top).

 add this range excluding the reserved dump area. */

/*

 * If the given physical address falls within the boot memory region then

 * return the relocated address that points to the dump region reserved

 * for saving initial boot memory contents.

	/*

	 * setup ELF PT_NOTE, place holder for cpu notes info. The notes info

	 * will be populated during second kernel boot after crash. Hence

	 * this PT_NOTE will always be the first elf note.

	 *

	 * NOTE: Any new ELF note addition should be placed after this note.

 setup ELF PT_NOTE for vmcoreinfo */

 Increment number of program headers. */

 setup PT_LOAD sections. */

			/*

			 * The entire real memory region will be moved by

			 * firmware to the specified destination_address.

			 * Hence set the correct offset.

 Increment number of program headers. */

 We will set the crashing cpu id in crash_fadump() during crash. */

	/*

	 * If no memory is reserved then we can not register for firmware-

	 * assisted dump.

 Initialize fadump crash info header. */

 register the future kernel dump with firmware. */

 Invalidate the registration only if dump is active. */

 Un-register Firmware-assisted dump if it was registered. */

/*

 * Skip memory holes and free memory that was actually reserved.

/*

 * Sort the mem ranges in-place and merge adjacent ranges

 * to minimize the memory ranges count.

 Sort the memory ranges */

 Merge adjacent reserved ranges */

/*

 * Scan reserved-ranges to consider them while reserving/releasing

 * memory for FADump.

 reserved-ranges already scanned */

	/*

	 * Each reserved range is an (address,size) pair, 2 cells each,

	 * totalling 4 cells per range.

 Compact reserved ranges */

/*

 * Release the memory that was reserved during early boot to preserve the

 * crash'ed kernel's memory contents except reserved dump area (permanent

 * reservation) and reserved ranges used by F/W. The released memory will

 * be available for general use.

	/*

	 * If reserved ranges array limit is hit, overwrite the last reserved

	 * memory range with reserved dump area to ensure it is excluded from

	 * the memory being released (reused for next FADump registration).

 Get the reserved ranges list in order first. */

 Exclude reserved ranges and release remaining memory */

	/*

	 * Setup kernel metadata and initialize the kernel dump

	 * memory structure for FADump re-registration.

		/*

		 * Take away the '/proc/vmcore'. We are releasing the dump

		 * memory, hence it will not be valid anymore.

 Release the reserved memory and disable the FADump */

 Un-register Firmware-assisted dump */

 Un-register Firmware-assisted dump */

 Register Firmware-assisted dump */

	/*

	 * The FADump sysfs are moved from kernel_kobj to fadump_kobj need to

	 * create symlink at old location to maintain backward compatibility.

	 *

	 *      - fadump_enabled -> fadump/enabled

	 *      - fadump_registered -> fadump/registered

	 *      - fadump_release_mem -> fadump/release_mem

/*

 * Prepare for firmware-assisted dump.

	/*

	 * If dump data is available then see if it is valid and prepare for

	 * saving it to the disk.

		/*

		 * if dump process fails then invalidate the registration

		 * and release memory before proceeding for re-registration.

 Initialize the kernel dump memory structure for FAD registration. */

 !CONFIG_PRESERVE_FA_DUMP */

 Scan the Firmware Assisted dump configuration details. */

/*

 * When dump is active but PRESERVE_FA_DUMP is enabled on the kernel,

 * preserve crash data. The subsequent memory preserving kernel boot

 * is likely to process this crash data.

		/*

		 * If last boot has crashed then reserve all the memory

		 * above boot memory to preserve crash data.

 CONFIG_PRESERVE_FA_DUMP */

 Preserve everything above the base address */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Snooze delay has not been hooked up since 3fa8cad82b94 ("powerpc/pseries/cpuidle:

 * smt-snooze-delay cleanup.") and has been broken even longer. As was foretold in

 * 2014:

 *

 *  "ppc64_util currently utilises it. Once we fix ppc64_util, propose to clean

 *  up the kernel code."

 *

 * powerpc-utils stopped using it as of 1.3.8. At some point in the future this

 * code should be removed.

 CONFIG_PPC64 */

/*

 * This is the system wide DSCR register default value. Any

 * change to this default value through the sysfs interface

 * will update all per cpu DSCR default values across the

 * system stored in their respective PACA structures.

/**

 * read_dscr() - Fetch the cpu specific DSCR default

 * @val:	Returned cpu specific DSCR default value

 *

 * This function returns the per cpu DSCR default value

 * for any cpu which is contained in it's PACA structure.

/**

 * write_dscr() - Update the cpu specific DSCR default

 * @val:	New cpu specific DSCR default value to update

 *

 * This function updates the per cpu DSCR default value

 * for any cpu which is contained in it's PACA structure.

/**

 * show_dscr_default() - Fetch the system wide DSCR default

 * @dev:	Device structure

 * @attr:	Device attribute structure

 * @buf:	Interface buffer

 *

 * This function returns the system wide DSCR default value.

/**

 * store_dscr_default() - Update the system wide DSCR default

 * @dev:	Device structure

 * @attr:	Device attribute structure

 * @buf:	Interface buffer

 * @count:	Size of the update

 *

 * This function updates the system wide DSCR default value.

 CONFIG_PPC64 */

 convert ms to ns */

 Set Automatic PW20 Core Idle Count */

 clear count */

 set count */

 convert ms to ns */

 Set Automatic AltiVec Idle Count */

 clear count */

 set count */

/*

 * Enable/Disable interface:

 * 0, disable. 1, enable.

/*

 * Set wait time interface:(Nanosecond)

 * Example: Base on TBfreq is 41MHZ.

 * 1~48(ns): TB[63]

 * 49~97(ns): TB[62]

 * 98~195(ns): TB[61]

 * 196~390(ns): TB[60]

 * 391~780(ns): TB[59]

 * 781~1560(ns): TB[58]

 * ...

/*

 * Enabling PMCs will slow partition context switch times so we only do

 * it the first time we write to the PMCs.

 Only need to enable them once */

/* Let's define all possible registers, we'll only hook up the ones

 * that are implemented on the current processor

 CONFIG_PMU_SYSFS */

/*

 * SPRs which are not related to PMU.

/*

  Lets only enable read for phyp resources and

  enable write when needed with a separate function.

  Lets be conservative and default to pseries.

 CONFIG_PPC64 */

 HAS_PPC_PMC56 */

 HAS_PPC_PA6T */

 HAS_PPC_PMC_IBM */

 HAS_PPC_PMC_G4 */

 HAS_PPC_PA6T */

 CONFIG_PPC_SVM */

 CONFIG_PPC_PSERIES */

 CONFIG_PPC_PSERIES */

 For cpus present at boot a reference was already grabbed in register_cpu() */

 PMC stuff */

 HAS_PPC_PMC_IBM */

 HAS_PPC_PMC_G4 */

 PA Semi starts counting at PMC0 */

 CONFIG_PMU_SYSFS */

 CONFIG_PPC64 */

 PMC stuff */

 HAS_PPC_PMC_IBM */

 HAS_PPC_PMC_G4 */

 PA Semi starts counting at PMC0 */

 CONFIG_PMU_SYSFS */

 CONFIG_PPC64 */

 !CONFIG_HOTPLUG_CPU */

 CONFIG_ARCH_CPU_PROBE_RELEASE */

 NUMA stuff */

 Only valid if CPU is present. */

		/*

		 * For now, we just see if the system supports making

		 * the RTAS calls for CPU hotplug.  But, there may be a

		 * more comprehensive way to do this for an individual

		 * CPU.  For instance, the boot cpu might never be valid

		 * for hotplugging.

 CONFIG_PPC64 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Common powerpc suspend code for 32 and 64 bits

 *

 * Copyright 2007	Johannes Berg <johannes@sipsolutions.net>

	/*

	 * flush out all the special registers so we don't need

	 * to save them in the snapshot

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * sys_ppc32.c: Conversion between 32bit and 64bit native syscalls.

 *

 * Copyright (C) 2001 IBM

 * Copyright (C) 1997,1998 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 * Copyright (C) 1997 David S. Miller (davem@caip.rutgers.edu)

 *

 * These routines maintain argument size conversion between 32bit and 64bit

 * environment.

 This should remain 12 even if PAGE_SIZE changes */

/* 

 * long long munging:

 * The 32 bit ABI passes long longs in an odd even register pair.

 * High and low parts are swapped depending on endian mode,

 * so define a macro (similar to mips linux32) to handle that.

 SPDX-License-Identifier: GPL-2.0-or-later

/* align.c - handle alignment exceptions for the Power PC.

 *

 * Copyright (c) 1996 Paul Mackerras <paulus@cs.anu.edu.au>

 * Copyright (c) 1998-1999 TiVo, Inc.

 *   PowerPC 403GCX modifications.

 * Copyright (c) 1999 Grant Erickson <grant@lcse.umn.edu>

 *   PowerPC 403GCX/405GP modifications.

 * Copyright (c) 2001-2002 PPC64 team, IBM Corp

 *   64-bit and Power4 support

 * Copyright (c) 2005 Benjamin Herrenschmidt, IBM Corp

 *                    <benh@kernel.crashing.org>

 *   Merge ppc32 and ppc64 implementations

 Bits in the flags field */

 load */

 store */

 sign-extend value, or FP ld/st as word */

 byte swap */

 SPE endianness is word */

 SPE endianness is double word */

 0 00 00: evldd[x] */

 0 00 01: evldw[x] */

 0 00 10: evldh[x] */

 0 00 11 */

 0 01 00: evlhhesplat[x] */

 0 01 01 */

 0 01 10: evlhhousplat[x] */

 0 01 11: evlhhossplat[x] */

 0 10 00: evlwhe[x] */

 0 10 01 */

 0 10 10: evlwhou[x] */

 0 10 11: evlwhos[x] */

 0 11 00: evlwwsplat[x] */

 0 11 01 */

 0 11 10: evlwhsplat[x] */

 0 11 11 */

 1 00 00: evstdd[x] */

 1 00 01: evstdw[x] */

 1 00 10: evstdh[x] */

 1 00 11 */

 1 01 00 */

 1 01 01 */

 1 01 10 */

 1 01 11 */

 1 10 00: evstwhe[x] */

 1 10 01 */

 1 10 10: evstwho[x] */

 1 10 11 */

 1 11 00: evstwwe[x] */

 1 11 01 */

 1 11 10: evstwwo[x] */

 1 11 11 */

/*

 * Emulate SPE loads and stores.

 * Only Book-E has these instructions, and it does true little-endian,

 * so we don't need the address swizzling.

 DAR has the operand effective address */

 userland only */

	/* If we are loading, get the data from user space, else

	 * get it from register values

 Its half word endian */

 Store result to memory or update registers */

 CONFIG_SPE */

/*

 * Called on alignment exception. Attempts to fixup

 *

 * Return 1 on success

 * Return 0 if unable to handle the interrupt

 * Return -EFAULT if data address is bad

 * Other negative return values indicate that the instruction can't

 * be emulated, and the process should be given a SIGBUS.

 We don't handle PPC little-endian any more... */

	/*

	 * ISA 3.0 (such as P9) copy, copy_first, paste and paste_last alignment

	 * check.

	 *

	 * Send a SIGBUS to the process that caused the fault.

	 *

	 * We do not emulate these because paste may contain additional metadata

	 * when pasting to a co-processor. Furthermore, paste_last is the

	 * synchronisation point for preceding copy/paste sequences.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * User-space Probes (UProbes) for powerpc

 *

 * Copyright IBM Corporation, 2007-2012

 *

 * Adapted from the x86 port by Ananth N Mavinakayanahalli <ananth@in.ibm.com>

/**

 * is_trap_insn - check if the instruction is a trap variant

 * @insn: instruction to be checked.

 * Returns true if @insn is a trap variant.

/**

 * arch_uprobe_analyze_insn

 * @mm: the probed address space.

 * @arch_uprobe: the probepoint information.

 * @addr: vaddr to probe.

 * Return 0 on success or a -ve number on error.

/*

 * arch_uprobe_pre_xol - prepare to execute out of line.

 * @auprobe: the probepoint information.

 * @regs: reflects the saved user state of current task.

/**

 * uprobe_get_swbp_addr - compute address of swbp given post-swbp regs

 * @regs: Reflects the saved state of the task after it has hit a breakpoint

 * instruction.

 * Return the address of the breakpoint instruction.

/*

 * If xol insn itself traps and generates a signal (SIGILL/SIGSEGV/etc),

 * then detect the case where a singlestepped instruction jumps back to its

 * own address. It is assumed that anything like do_page_fault/do_trap/etc

 * sets thread.trap_nr != UINT_MAX.

 *

 * arch_uprobe_pre_xol/arch_uprobe_post_xol save/restore thread.trap_nr,

 * arch_uprobe_xol_was_trapped() simply checks that ->trap_nr is not equal to

 * UPROBE_TRAP_NR == UINT_MAX set by arch_uprobe_pre_xol().

/*

 * Called after single-stepping. To avoid the SMP problems that can

 * occur when we temporarily put back the original opcode to

 * single-step, we single-stepped a copy of the instruction.

 *

 * This function prepares to resume execution after the single-step.

	/*

	 * On powerpc, except for loads and stores, most instructions

	 * including ones that alter code flow (branches, calls, returns)

	 * are emulated in the kernel. We get here only if the emulation

	 * support doesn't exist and have to fix-up the next instruction

	 * to be executed.

 callback routine for handling exceptions. */

 regs == NULL is a kernel bug */

 We are only interested in userspace traps */

/*

 * This function gets called when XOL instruction either gets trapped or

 * the thread has a fatal signal, so reset the instruction pointer to its

 * probed address.

/*

 * See if the instruction can be emulated.

 * Returns true if instruction was emulated, false otherwise.

	/*

	 * emulate_step() returns 1 if the insn was successfully emulated.

	 * For all other cases, we need to single-step in hardware.

 Replace the return addr with trampoline addr */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Machine check exception handling CPU-side for power7 and power8

 *

 * Copyright 2013 IBM Corporation

 * Author: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>

/*

 * Convert an address related to an mm to a PFN. NOTE: we are in real

 * mode, we could potentially race with page table updates.

	/*

	 * If machine check is hit when in guest context or low level KVM

	 * code, avoid looking up any translations or making any attempts

	 * to recover, just record the event and pass to KVM.

 flush SLBs and reload */

 Invalidate all SLBs */

	/*

	 * This probably shouldn't happen, but it may be possible it's

	 * called in early boot before SLB shadows are allocated.

 nip is a valid indicator of faulting address */

 BOTH */

 ASYNC is fatal */

 ASYNC is fatal */

 ASYNC is fatal */

 dar is a valid indicator of faulting address */

 BOTH */

 SECONDARY ERAT */

 Before PARITY */

 Before PARITY */

 Before PARITY */

	/*

	 * Carefully look at the NIP to determine

	 * the instruction to analyse. Reading the NIP

	 * in real-mode is tricky and can lead to recursive

	 * faults

		/*

		 * analyse_instr() might fail if the instruction

		 * is not a load/store, although this is unexpected

		 * for load/store errors or if we got the NIP

		 * wrong

 attempt to correct the error */

 now fill in mce_error_info */

 attempt to correct the error */

		/*

		 * Attempt to handle multiple conditions, but only return

		 * one. Ensure uncorrectable errors are first in the table

		 * to match.

 now fill in mce_error_info */

			/*

			 * We do a maximum of 4 nested MCE calls, see

			 * kernel/exception-64s.h

	/*

	 * On specific SCOM read via MMIO we may get a machine check

	 * exception with SRR0 pointing inside opal. If that is the

	 * case OPAL may have recovery address to re-read SCOM data in

	 * different way and hence we can recover from this MC.

 P7 DD1 leaves top bits of DSISR undefined */

	/*

	 * On POWER9 DD2.1 and below, it's possible to get a machine check

	 * caused by a paste instruction where only DSISR bit 25 is set. This

	 * will result in the MCE handler seeing an unknown event and the kernel

	 * crashing. An MCE that occurs like this is spurious, so we don't need

	 * to do anything in terms of servicing it. If there is something that

	 * needs to be serviced, the CPU will raise the MCE again with the

	 * correct DSISR so that it can be serviced properly. So detect this

	 * case and mark it as handled.

	/*

	 * Async machine check due to bad real address from store or foreign

	 * link time out comes with the load/store bit (PPC bit 42) set in

	 * SRR1, but the cause comes in SRR1 not DSISR. Clear bit 42 so we're

	 * directed to the ierror table so it will find the cause (which

	 * describes it correctly as a store error).

	/*

	 * Async machine check due to bad real address from store comes with

	 * the load/store bit (PPC bit 42) set in SRR1, but the cause comes in

	 * SRR1 not DSISR. Clear bit 42 so we're directed to the ierror table

	 * so it will find the cause (which describes it correctly as a store

	 * error).

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Procedures for interfacing to Open Firmware.

 *

 * Paul Mackerras	August 1996.

 * Copyright (C) 1996-2005 Paul Mackerras.

 * 

 *  Adapted for 64bit PowerPC by Dave Engebretsen and Peter Bergner.

 *    {engebret|bergner}@us.ibm.com 

 we cannot use FORTIFY as it brings in new symbols */

 All of prom_init bss lives here */

/*

 * Eventually bump that one up

/*

 * This is the size of the local memory reserve map that gets copied

 * into the boot params passed to the kernel. That size is totally

 * flexible as the kernel just reads the list until it encounters an

 * entry with size 0, so it can be changed without breaking binary

 * compatibility

/*

 * prom_init() is called very early on, before the kernel text

 * and data have been mapped to KERNELBASE.  At this point the code

 * is running at whatever address it has been loaded at.

 * On ppc32 we compile with -mrelocatable, which means that references

 * to extern and static variables get relocated automatically.

 * ppc64 objects are always relocatable, we just need to relocate the

 * TOC.

 *

 * Because OF may have mapped I/O devices into the area starting at

 * KERNELBASE, particularly on CHRP machines, we can't safely call

 * OF once the kernel has been mapped to KERNELBASE.  Therefore all

 * OF calls must be done within prom_init().

 *

 * ADDR is used in calls to call_prom.  The 4th and following

 * arguments to call_prom should be 32-bit values.

 * On ppc64, 64 bit values are truncated to 32 bits (and

 * fortunately don't get interpreted as two arguments).

 do phys/virt claim separately, then map */

 work around longtrail bugs */

 prom structure */

/* Platforms codes are now obsolete in the kernel. Now only used within this

 * file and ultimately gone too. Feel free to change them if you need, they

 * are not shared with anything outside of this file anymore

/*

 * Error results ... some OF calls will return "-1" on error, some

 * will return 0, some will return either. To simplify, here are

 * macros to use with any ihandle or phandle return value to check if

 * it is valid

 Copied from lib/string.c and lib/kstrtox.c */

 Copy up to n bytes

 If we copied all n then we have run out of space for the nul

 Rewind by one character to ensure nul termination

 nothing */;

 This would be a bug */

/* This is the one and *ONLY* place where we actually call open

 * firmware.

/*

 * Both prom_print_hex & prom_print_dec takes an unsigned long as input so that

 * we do not need __udivdi3 or __umoddi3 on 32bits.

 max number of decimal digits in an unsigned long */

 shift stuff down */

		/*

		 * Old OF requires we claim physical and virtual separately

		 * and then map explicitly (assuming virtual mode)

 the 0x12 is M (coherence) + PP == read/write */

	/* Do not call exit because it clears the screen on pmac

 ToDo: should put up an SRC here on pSeries */

 should never get here */

 gah... setprop doesn't work on longtrail, have to use interpret */

 We can't use the standard versions because of relocation headaches. */

	/*

	 * We can't use a switch here because GCC *may* generate a

	 * jump table which won't work, because we're not running at

	 * the address we're linked at.

/*

 * Early parsing of the command line passed to the kernel, used for

 * "mem=x" and the options that affect the iommu

 Align to 16 MB == size of ppc64 large page */

 CONFIG_PPC_PSERIES */

 CONFIG_PPC_SVM */

/*

 * The architecture vector has an array of PVR mask/value pairs,

 * followed by # option vectors - 1, followed by the option vectors.

 *

 * See prom.h for the definition of the bits specified in the

 * architecture vector.

 Firmware expects the value to be n - 1, where n is the # of vectors */

/*

 * Firmware expects 1 + n - 2, where n is the length of the option vector in

 * bytes. The 1 accounts for the length byte itself, the - 2 .. ?

 POWER5/POWER5+ */

 POWER6 */

 POWER7 */

 POWER8E */

 POWER8NVL */

 POWER8 */

 POWER9 */

 POWER10 */

 all 3.1-compliant */

 all 3.00-compliant */

 all 2.07-compliant */

 all 2.06-compliant */

 all 2.05-compliant */

 all 2.04-compliant and earlier */

 option vector 2: Open Firmware options supported */

 512MB min RMA */

 full client load */

 min RMA percentage of total RAM */

 max log_2(hash table size) */

 option vector 3: processor options supported */

 don't ignore, don't halt */

 option vector 4: IBM PAPR implementation */

 don't halt */

 minimum VP entitled capacity */

 option vector 5: PAPR/OF options */

 don't ignore, don't halt */

 PCIe/MSI support.  Without MSI full PCIe is not supported */

 number of cores supported */

 option vector 6: IBM PAPR hints */

 option vector 7: OS Identification */

 Old method - ELF header with PT_NOTE sections only works on BE */

 "PowerPC" */

 "IBM,RPA-Client-Config" */

 yeah right */

 ~0 means "don't care" */

 in megabytes */

 2^48 bytes max PFT size */

 __BIG_ENDIAN__ */

 Pick up th first CPU node we can find */

		/*

		 * There is an entry for each smt thread, each entry being

		 * 4 bytes long.  All cpus should have the same number of

		 * smt threads, so return after finding the first.

 Sanity check */

 Either Available */

 Only Radix */

			/*

			 * If we __have__ to do radix, we're better off ignoring

			 * the command line rather than not booting.

 Either Available */

 Only Exploitation mode */

			/*

			 * If we __have__ to do XIVE, we're better off ignoring

			 * the command line rather than not booting.

 Only Legacy mode */

 MMU Model */

 Radix Extensions */

 Interrupt mode */

	/*

	 * First copy the architecture vec template

	 *

	 * use memcpy() instead of *vec = *vec_template so that GCC replaces it

	 * by __memcpy() when KASAN is active

 Radix preferred - Check if GTSE is also supported */

 Default to hash mmu (if we can) */

 We're probably on a legacy hypervisor */

 Check ibm,arch-vec-5-platform-support and fixup vec5 if required */

		/* We need to tell the FW about the number of cores we support.

		 *

		 * To do that, we count the number of threads on the first core

		 * (we assume this is the same for all cores) and use it to

		 * divide NR_CPUS.

 try calling the ibm,client-architecture-support method */

 the call exists... */

 no ibm,client-architecture-support call, try the old way */

 __BIG_ENDIAN__ */

 CONFIG_PPC_PSERIES */

/*

 * Memory allocation strategy... our layout is normally:

 *

 *  at 14Mb or more we have vmlinux, then a gap and initrd.  In some

 *  rare cases, initrd might end up being before the kernel though.

 *  We assume this won't override the final kernel at 0, we have no

 *  provision to handle that in this version, but it should hopefully

 *  never happen.

 *

 *  alloc_top is set to the top of RMO, eventually shrink down if the

 *  TCEs overlap

 *

 *  alloc_bottom is set to the top of kernel/initrd

 *

 *  from there, allocations are done this way : rtas is allocated

 *  topmost, and the device-tree is allocated from the bottom. We try

 *  to grow the device-tree allocation as we progress. If we can't,

 *  then we fail, we don't currently have a facility to restart

 *  elsewhere, but that shouldn't be necessary.

 *

 *  Note that calls to reserve_mem have to be done explicitly, memory

 *  allocated with either alloc_up or alloc_down isn't automatically

 *  reserved.

/*

 * Allocates memory in the RMO upward from the kernel/initrd

 *

 * When align is 0, this is a special case, it means to allocate in place

 * at the current location of alloc_bottom or fail (that is basically

 * extending the previous allocation). Used for the device-tree flattening

/*

 * Allocates memory downward, either from top of RMO, or if highmem

 * is set, from the top of RAM.  Note that this one doesn't handle

 * failures.  It does claim memory if highmem is not set.

 Carve out storage for the TCE table. */

		/* Will we bump into the RMO ? If yes, check out that we

		 * didn't overlap existing allocations there, if we did,

		 * we are dead, we must be the first in town !

 Good, we are first */

/*

 * Parse a "reg" cell

 Ignore more than 2 cells */

/*

 * Very dumb function for adding to the memory reserve list, but

 * we don't need anything smarter at this point

 *

 * XXX Eventually check for collisions.  They should NEVER happen.

 * If problems seem to show up, it would be a good start to track

 * them down.

	/* We need to always keep one empty entry so that we

	 * have our terminator with "size" set to 0 since we are

	 * dumb and just copy this entire array to the boot params

/*

 * Initialize memory allocation mechanism, parse "memory" nodes and

 * obtain that way the top of memory and RMO to setup out local allocator

	/*

	 * We iterate the memory nodes to find

	 * 1) top of RMO (first node)

	 * 2) top of memory

			/*

			 * CHRP Longtrail machines have no device_type

			 * on the memory node, so check the name instead...

 DEBUG_PROM */

	/*

	 * If prom_memory_limit is set we reduce the upper limits *except* for

	 * alloc_top_high. This must be the real top of RAM so we can put

	 * TCE's up there.

	/*

	 * Setup our top alloc point, that is top of RMO or top of

	 * segment 0 when running non-LPAR.

	 * Some RS64 machines have buggy firmware where claims up at

	 * 1GB fail.  Cap at 768MB as a workaround.

	 * Since 768MB is plenty of room, and we need to cap to something

	 * reasonable on 32-bit, cap at 768MB on all machines.

	/*

	 * Check if we have an initrd after the kernel but still inside

	 * the RMO.  If we do move our bottom point to after it.

 CONFIG_PPC_SVM */

/*

 * Allocate room for and instantiate RTAS

 Check if it supports "query-cpu-stopped-state" */

/*

 * Allocate room for and instantiate Stored Measurement Log (SML)

/*

 * Allocate room for and initialize TCE tables

 Cache current top of allocs so we reserve a single block */

 Search all nodes looking for PHBs. */

 Keep the old logic intact to avoid regression. */

		/*

		 * Even though we read what OF wants, we just set the table

		 * size to 4 MB.  This is enough to map 2GB of PCI DMA space.

		 * By doing this, we avoid the pitfalls of trying to DMA to

		 * MMIO space and the DMA alias hole.

 Align to the greater of the align or size */

 It seems OF doesn't null-terminate the path :-( */

 Call OF to setup the TCE hardware */

 Save away the TCE table attributes for later use. */

		/* Initialize the table to have a one-to-one mapping

		 * over the allocated size.

	/* These are only really needed if there is a memory limit in

 Flag the first invalid entry */

 __BIG_ENDIAN__ */

 CONFIG_PPC64 */

/*

 * With CHRP SMP we need to use the OF to start the other processors.

 * We can't wait until smp_boot_cpus (the OF is trashed by then)

 * so we have to put the processors into a holding pattern controlled

 * by the kernel (not OF) before we destroy the OF.

 *

 * This uses a chunk of low memory, puts some holding pattern

 * code there and sends the other processors off to there until

 * smp_boot_cpus tells them to do something.  The holding pattern

 * checks that address until its cpu # is there, when it is that

 * cpu jumps to __secondary_start().  smp_boot_cpus() takes care

 * of setting those values.

 *

 * We also use physical address 0x4 here to tell when a cpu

 * is in its holding pattern code.

 *

 * -- Cort

/*

 * We want to reference the copy of __secondary_hold_* in the

 * 0 - 0x100 address range

	/*

	 * On pseries, if RTAS supports "query-cpu-stopped-state",

	 * we skip this stage, the CPUs will be started by the

	 * kernel using RTAS.

	/* Set the common spinloop variable, so all of the secondary cpus

	 * will block when they are awakened from their OF spinloop.

	 * This must occur for both SMP and non SMP kernels, since OF will

	 * be trashed when we move the kernel.

 look for cpus */

 Skip non-configured cpus. */

 make sparse happy */

		/* Init the acknowledge var which will be reset by

		 * the secondary cpu when it awakens from its OF

		 * spinloop.

 Primary Thread of non-boot cpu or any thread */

 CONFIG_SMP */

 Get a handle to the prom entry point before anything else */

 get a handle for the stdout device */

 msg won't be printed :( */

 get device tree root */

 msg won't be printed :( */

/*

 * For really old powermacs, we need to map things we claim.

 * For that, we need the ihandle of the mmu.

 * Also, on the longtrail, we need to work around other bugs.

 XXX might need to add other versions here */

 hmmm */

 Get the full OF pathname of the stdout device */

 instance-to-package fails on PA-Semi */

 If it's a display, note it */

 Look for a PowerMac or a Cell */

			/* We must make sure we don't detect the IBM Cell

			 * blades as pSeries due to some firmware issues,

			 * so we do it here.

 CONFIG_PPC64 */

	/* Try to figure out if it's an IBM pSeries or any other

	 * PAPR compliant platform. We assume it is if :

	 *  - /device_type is "chrp" (please, do NOT use that for future

	 *    non-IBM designs !

	 *  - it has /rtas

 Default to pSeries. We need to know if we are running LPAR */

/*

 * If we have a display that we don't know how to drive,

 * we will want to try to execute OF's open method for it

 * later.  However, OF will probably fall over if we do that

 * we've taken over the MMU.

 * So we check whether we will need to open the display,

 * and if so, open it now.

 It seems OF doesn't null-terminate the path :-( */

		/*

		 * leave some room at the end of the path for appending extra

		 * arguments

 Success */

		/* Setup a usable color table when the appropriate

 CONFIG_LOGO_LINUX_CLUT224 */

 CONFIG_PPC_EARLY_DEBUG_BOOTX */

 Return (relocated) pointer to this much memory: moves initrd if reqd. */

/*

 * The Open Firmware 1275 specification states properties must be 31 bytes or

 * less, however not all firmwares obey this. Make it 64 bytes to be safe.

 get and store all property names */

 64 is max len of name including nul. */

 No more nodes: unwind alloc */

 skip "name" */

 get/create string entry */

 Trim off some if we can */

 do all our children */

 get the node's full name */

 Didn't fit?  Get more room. */

		/* Fixup an Apple bug where they have bogus \0 chars in the

		 * middle of the path in some properties, and extract

		 * the unit name (everything after the last '/').

 get it again for debugging */

 get and store all properties */

 skip "name" */

 find string offset */

 get length */

 sanity checks */

 push property head */

 push property content */

 Add a "phandle" property if none already exist */

 do all our children */

	/*

	 * Check how much room we have between alloc top & bottom (+/- a

	 * few pages), crop to 1MB, as this is our "chunk" size

 Now try to claim that */

 Get root of tree */

 Build header and make room for mem rsv map */ 

 Start of strings */

 hole */

 Add "phandle" in there, we'll need it */

 Build string array */

 Build structure */

 Finish header */

 Version 16 is not backward compatible */

 Copy the reserve map in */

	/* Bump mem_reserve_cnt to cause further reservations to fail

	 * since it's too late.

/* PIBS Version 1.05.0000 04/26/2005 has an incorrect /ht/isa/ranges property.

 IO space; PCI device = 4 */

 IO space; PCI device = 6 */

 The values for memory-controller don't have right number of cells */

/*

 * Pegasos and BriQ lacks the "ranges" property in the isa node

 * Pegasos needs decimal IRQ 14/15, not hexadecimal

 * Pegasos has the IDE configured in legacy mode, but advertised as native

 IO space; PCI device = 12 */

 IO space; PCI device = 6 */

 Some G5s have a missing interrupt definition, fix it up here */

 check if proper rev of u3 */

 does it need fixup ? */

 interrupt on this revision of u3 is number 0 and level */

/*

 * The MPC5200 FEC driver requires an phy-handle property to tell it how

 * to talk to the phy.  If the phy-handle property is missing, then this

 * function is called to add the appropriate nodes and link it to the

 * ethernet node.

 Check if /builtin/ethernet exists - bail if it doesn't */

 Check if the phy-handle property exists - bail if it does */

	/*

	 * At this point the ethernet device doesn't have a phy described.

	 * Now we need to add the missing phy node and linkage

 Check for an MDIO bus node - if missing then create one */

	/* Check for a PHY device node - if missing then create one and

 Check if we're really running on a EFIKA */

 Claiming to be 'chrp' is death */

	/* CODEGEN,description is exposed in /proc/cpuinfo so

 Fixup bestcomm interrupts property */

 Fixup sound interrupts property */

 Make sure ethernet phy-handle property exists */

/*

 * CFE supplied on Nemo is broken in several ways, biggest

 * problem is that it reassigns ISA interrupts to unused mpic ints.

 * Add an interrupt-controller property for the io-bridge to use

 * and correct the ints so we can attach them to an irq_domain

 Find the root pci node */

 check if interrupt-controller node set yet */

 scan each node for one with an interrupt */

 found a node, update both interrupts and interrupt-parent */

	/*

	 * The io-bridge has device_type set to 'io-bridge' change it to 'isa'

	 * so that generic isa-bridge code can add the SB600 and its on-board

	 * peripherals.

 device_type is already set, just change it. */

 !CONFIG_PPC_PASEMI_NEMO */

 CONFIG_BLK_DEV_INITRD */

/*

 * Perform the Enter Secure Mode ultracall.

/*

 * Call the Ultravisor to transfer us to secure memory if we have an ESM blob.

 Switch to secure mode. */

	/*

	 * The ultravisor will do an integrity check of the kernel image but we

	 * relocated it so the check will fail. Restore the original image by

	 * relocating it back to the kernel virtual base address.

 Relocate the kernel again. */

 CONFIG_PPC_SVM */

/*

 * We enter here early on, when the Open Firmware prom is still

 * handling exceptions and the MMU hash table for us.

	/*

	 * First zero the BSS

	/*

	 * Init interface to Open Firmware, get some node references,

	 * like /chosen

	/*

	 * See if this OF is old enough that we need to do explicit maps

	 * and other workarounds

	/*

	 * Init prom stdout device

	/*

	 * Get default machine type. At this point, we do not differentiate

	 * between pSeries SMP and pSeries LPAR

 Bail if this is a kdump kernel. */

	/*

	 * Check for an initrd

	/*

	 * Do early parsing of command line

	/*

	 * On pSeries, inform the firmware about our capabilities

	/*

	 * Copy the CPU hold code

	/*

	 * Initialize memory management within prom_init

	/*

	 * Determine which cpu is actually running right _now_

	/* 

	 * Initialize display devices

	/*

	 * Initialize IOMMU (TCE tables) on pSeries. Do that before anything else

	 * that uses the allocator, we need to make sure we get the top of memory

	 * available for us here...

	/*

	 * On non-powermacs, try to instantiate RTAS. PowerMacs don't

	 * have a usable RTAS implementation.

 instantiate sml */

	/*

	 * On non-powermacs, put all CPUs in spin-loops.

	 *

	 * PowerMacs use a different mechanism to spin CPUs

	 *

	 * (This must be done after instanciating RTAS)

	/*

	 * Fill in some infos for use by the kernel later on

	/*

	 * Fixup any known bugs in the device-tree

	/*

	 * Now finally create the flattened device-tree

	/*

	 * in case stdin is USB and still active on IBM machines...

	 * Unfortunately quiesce crashes on some powermacs if we have

	 * closed stdin already (in particular the powerbook 101).

	/*

	 * Call OF "quiesce" method to shut down pending DMA's from

	 * devices etc...

	/*

	 * And finally, call the kernel passing it the flattened device

	 * tree and NULL as r5, thus triggering the new entry point which

	 * is common to us and kexec

 Move to secure memory if we're supposed to be secure guests. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  c 2001 PPC 64 Team, IBM Corp

 *

 * /proc/powerpc/rtas/firmware_flash interface

 *

 * This file implements a firmware_flash interface to pump a firmware

 * image into the kernel.  At reboot time rtas_restart() will see the

 * firmware image and flash it as it reboots (see rtas.c).

 General RTAS Status Codes */

 Flash image status values */

 RTAS Not Service Authority Partition */

 No operation initiated by user */	

 Flash image shorter than expected */

 Bad length value in flash list block */

 Bad data value in flash list block */

 Firmware img ready for flash on reboot */

 Manage image status values */

 RTAS Not Service Authority Partition */

 RTAS Cannot Overwrite Active Img */

 No operation initiated by user */

 RTAS Parameter Error */

 RTAS Hardware Error */

 Validate image status values */

 RTAS Not Service Authority Partition */

 No operation initiated by the user */

 User copied < VALIDATE_BUF_SIZE */

 Firmware image ready for validation */

 RTAS Parameter Error */

 RTAS Hardware Error */

 ibm,validate-flash-image update result tokens */

 T side will be updated */

 Partition does not have authority */

 Candidate image is not valid */

 Current fixpack level is unknown */

/*

 * Current T side will be committed to P side before being replace with new

 * image, and the new image is downlevel from current image

/*

 * Current T side will be committed to P side before being replaced with new

 * image

/*

 * T side will be updated with a downlevel image

/*

 * The candidate image's release date is later than the system's firmware

 * service entitlement date - service warranty period has expired

 ibm,manage-flash-image operation tokens */

 Array sizes */

 Quirk - RTAS requires 4k list length and block size */

/* This struct is very similar but not identical to

 * that needed by the rtas flash update.

 * All we need to do for rtas is rewrite num_blocks

 * into a version/length and translate the pointers

 * to absolute.

 Use slab cache to guarantee 4k alignment */

/*

 * Local copy of the flash block list.

 *

 * The rtas_firmware_flash_list varable will be

 * set once the data is fully read.

 *

 * For convenience as we build the list we use virtual addrs,

 * we do not fill in the version number, and the length field

 * is treated as the number of entries currently in the block

 * (i.e. not a byte count).  This is all fixed when calling 

 * the flash routine.

 Status int must be first member of struct */

 Flash update status */

 Local copy of flash block list */

 Status int must be first member of struct */

 Returned status */

 Status int must be first member of struct */

 Returned status */	

 Candidate image buffer */

 Size of image buf */

 Update results token */

 Do simple sanity checks on the flash image. */

 Paranoid self test here.  We also collect the image size. */

 File was opened in write mode for a new flash attempt */

 Clear saved list */

 Reading the proc file will show status (not the firmware contents) */

 Read as text message */

 Read as number */

/* We could be much more efficient here.  But to keep this function

 * simple we allocate a page to the block list no matter how small the

 * count is.  If the system is low on memory it will be just as well

 * that we fail....

 discard data */

	/* In the case that the image is not ready for flashing, the memory

	 * allocated for the block list will be freed upon the release of the 

	 * proc file

 seek to last block_list for append */

 Need to allocate another block_list */

/*

 * Flash management routines.

 buf is empty, or contains invalid string */

/*

 * Validation routines.

	/* We are only interested in the first 4K of the

/*

 * On-reboot flash update applicator.

 nothing to do */

	/*

	 * Just before starting the firmware flash, cancel the event scan work

	 * to avoid any soft lockup issues.

	/*

	 * NOTE: the "first" block must be under 4GB, so we create

	 * an entry with no data blocks in the reserved buffer in

	 * the kernel data segment.

 Update the block_list in place. */

 too hard to backout on error */

 Translate data addrs to absolute */

 Don't translate NULL pointer for last entry */

 make num_blocks into the version/length field */

 should only get "bad" status */

/*

 * Manifest of proc files to create

		/*

		 * This code assumes that the status int is the first member of the

		 * struct

 SPDX-License-Identifier: GPL-2.0

/*

 * Routines to emulate some Altivec/VMX instructions, specifically

 * those that can trap when given denormalized operands in Java mode.

 Functions in vector.S */

/*

 * Computes an estimate of 2^x.  The `s' argument is the 32-bit

 * single-precision floating-point representation of x.

 extract exponent field from input */

 check for NaN input */

 return QNaN */

 2^-big = 0, 2^+big = +Inf */

 0 or +Inf */

 1.0 */

 convert to fixed point integer in 9.23 representation */

 extract integer part, which becomes exponent part of result */

 table lookup on top 3 bits of fraction to get mantissa */

 linear interpolation using remaining 20 bits of fraction */

 denormalized result */

/*

 * Computes an estimate of log_2(x).  The `s' argument is the 32-bit

 * single-precision floating-point representation of x.

 Inf or NaN */

 turn NaN into QNaN */

 +0 or -0 */

 return -Inf */

 denormalized */

 2^0.5 * 2^23 */

 0.5 * 2^23 */

 2^-0.5 * 2^32 */

 2^0.25 * 2^23 */

 0.25 * 2^23 */

 2^-0.25 * 2^32 */

 2^0.125 * 2^23 */

 0.125 * 2^23 */

 2^-0.125 * 2^32 */

 1.0 * 2^23 */

 calculate (mant - 1) * 1.381097463 */

 1.381097463 == 0.125 / (2^0.125 - 1) */

 NaN -> 0 */

 round towards zero */

 saturate, unless the result would be -2^31 */

 NaN -> 0 */

 round towards zero */

 negative => saturate to 0 */

 saturate */

 Round to floating integer, towards 0 */

 NaN -> make it a QNaN */

 it's an integer already (or Inf) */

 |x| < 1.0 rounds to 0 */

 Round to floating integer, towards +/- Inf */

 NaN -> make it a QNaN */

 it's an integer already (or Inf) */

 +/-0 -> +/-0 */

 0 < |x| < 1.0 rounds to +/- 1.0 */

	/* mantissa overflows into exponent - that's OK,

 Round to floating integer, to nearest */

 NaN -> make it a QNaN */

 it's an integer already (or Inf) */

 |x| < 0.5 -> +/-0 */

 0.5 <= |x| < 1.0 rounds to +/- 1.0 */

 add 0.5 to the magnitude and chop off the fraction bits */

 not an altivec instruction */

 vaddfp */

 vsubfp */

 vrefp */

 vrsqrtefp */

 vexptefp */

 vlogefp */

 vrfin */

 vrfiz */

 vrfip */

 vrfim */

 vctuxs */

 vctsxs */

 vmaddfp */

 vnmsubfp */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Routines for tracking a legacy ISA bridge

 *

 * Copyrigh 2007 Benjamin Herrenschmidt <benh@kernel.crashing.org>, IBM Corp.

 *

 * Some bits and pieces moved over from pci_64.c

 *

 * Copyrigh 2003 Anton Blanchard <anton@au.ibm.com>, IBM Corp.

 NULL if no ISA bus */

 Cached ISA bridge dev. */

 We should get some saner parsing here and remove these structs */

	/* From "ISA Binding to 1275"

	 * The ranges property is laid out as an array of elements,

	 * each of which comprises:

	 *   cells 0 - 1:	an ISA address

	 *   cells 2 - 4:	a PCI address

	 *			(size depending on dev->n_addr_cells)

	 *   cell 5:		the size of the range

	/* Assume these are both zero. Note: We could fix that and

	 * do a proper parsing instead ... oh well, that will do for

	 * now as nobody uses fancy mappings for ISA bridges

 Align size and make sure it's cropped to 64K */

/**

 * isa_bridge_find_early - Find and map the ISA IO space early before

 *                         main PCI discovery. This is optionally called by

 *                         the arch code when adding PCI PHBs to get early

 *                         access to ISA IO ports

 If we already have an ISA bridge, bail off */

	/* For each "isa" node in the system. Note : we do a search by

	 * type and not by name. It might be better to do by name but that's

	 * what the code used to do and I don't want to break too much at

	 * once. We can look into changing that separately

 Look for our hose being a parent */

 Now parse the "ranges" property and setup the ISA mapping */

 Set the global ISA io base to indicate we have an ISA bridge */

/**

 * isa_bridge_find_early - Find and map the ISA IO space early before

 *                         main PCI discovery. This is optionally called by

 *                         the arch code when adding PCI PHBs to get early

 *                         access to ISA IO ports

 If we already have an ISA bridge, bail off */

 Check it's a supported address format */

 Grab the ranges property */

 Parse it. We are only looking for IO space */

 Got something ? */

 Align size and make sure it's cropped to 64K */

 Map pbase */

 We need page alignment */

 Got it */

	/* Set the global ISA io base to indicate we have an ISA bridge

	 * and map it

/**

 * isa_bridge_find_late - Find and map the ISA IO space upon discovery of

 *                        a new ISA bridge

 Store ISA device node and PCI device */

 Now parse the "ranges" property and setup the ISA mapping */

 Set the global ISA io base to indicate we have an ISA bridge */

/**

 * isa_bridge_remove - Remove/unmap an ISA bridge

	/* Clear the global ISA io base to indicate that we have no more

	 * ISA bridge. Note that drivers don't quite handle that, though

	 * we should probably do something about it. But do we ever really

	 * have ISA bridges being removed on machines using legacy devices ?

 Clear references to the bridge */

 Unmap the ISA area */

/**

 * isa_bridge_notify - Get notified of PCI devices addition/removal

 Check if we have an early ISA device, without PCI dev */

		/* Check if we have no ISA device, and this happens to be one,

		 * register it as such if it has an OF device

 Check if this our existing ISA device */

/**

 * isa_bridge_init - register to be notified of ISA bridge addition/removal

 *

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Kernel Probes (KProbes)

 *

 * Copyright (C) IBM Corporation, 2002, 2004

 *

 * 2002-Oct	Created by Vamsi Krishna S <vamsi_krishna@in.ibm.com> Kernel

 *		Probes initial implementation ( includes contributions from

 *		Rusty Russell).

 * 2004-July	Suparna Bhattacharya <suparna@in.ibm.com> added jumper probes

 *		interface to access function arguments.

 * 2004-Nov	Ananth N Mavinakayanahalli <ananth@in.ibm.com> kprobes port

 *		for PPC64

 PPC64 ABIv2 needs local entry point */

		/*

		 * Per livepatch.h, ftrace location is always within the first

		 * 16 bytes of a function on powerpc with -mprofile-kernel.

	/*

	 * 64bit powerpc ABIv1 uses function descriptors:

	 * - Check for the dot variant of the symbol first.

	 * - If that fails, try looking up the symbol provided.

	 *

	 * This ensures we always get to the actual symbol and not

	 * the descriptor.

	 *

	 * Also handle <module:symbol> format.

 Fallback to the original non-dot symbol lookup */

	/* insn must be on a special executable page on ppc64.  This is

	/*

	 * On powerpc we should single step on the original

	 * instruction even if the probed insn is a trap

	 * variant as values in regs could play a part in

	 * if the trap is taken or not

 Replace the return addr with trampoline addr */

 regs->nip is also adjusted if emulate_step returns 1 */

		/*

		 * Once this instruction has been boosted

		 * successfully, set the boostable flag

		/*

		 * We don't allow kprobes on mtmsr(d)/rfi(d), etc.

		 * So, we should never get here... but, its still

		 * good to catch them, just in case...

		/*

		 * If we haven't previously emulated this instruction, then it

		 * can't be boosted. Note it down so we don't try to do so again.

		 *

		 * If, however, we had emulated this instruction in the past,

		 * then this is just an error with the current run (for

		 * instance, exceptions due to a load/store). We return 0 so

		 * that this is now single-stepped, but continue to try

		 * emulating it in subsequent probe hits.

	/*

	 * We don't want to be preempted for the entire

	 * duration of kprobe processing

			/*

			 * PowerPC has multiple variants of the "trap"

			 * instruction. If the current instruction is a

			 * trap variant, it could belong to someone else

			/*

			 * The breakpoint instruction was removed right

			 * after we hit it.  Another cpu has removed

			 * either a probepoint or a debugger breakpoint

			 * at this address.  In either case, no further

			 * handling of this interrupt is appropriate.

 Not one of ours: let kernel handle it */

 Check we're not actually recursing */

 Turn off 'trace' bits */

		/*

		 * We have reentered the kprobe_handler(), since another probe

		 * was hit while within the handler. We here save the original

		 * kprobes variables and just single step on the instruction of

		 * the new probe without calling any user handlers.

 handler changed execution path, so skip ss setup */

/*

 * Function return probe trampoline:

 * 	- init_kprobes() establishes a probepoint here

 * 	- When the probed function returns, this probe

 * 		causes the handlers to fire

/*

 * Called when the probe at kretprobe trampoline is hit

	/*

	 * We get here through one of two paths:

	 * 1. by taking a trap -> kprobe_handler() -> here

	 * 2. by optprobe branch -> optimized_callback() -> opt_pre_handler() -> here

	 *

	 * When going back through (1), we need regs->nip to be setup properly

	 * as it is used to determine the return address from the trap.

	 * For (2), since nip is not honoured with optprobes, we instead setup

	 * the link register properly so that the subsequent 'blr' in

	 * __kretprobe_trampoline jumps back to the right instruction.

	 *

	 * For nip, we should set the address to the previous instruction since

	 * we end up emulating it in kprobe_handler(), which increments the nip

	 * again.

/*

 * Called after single-stepping.  p->addr is the address of the

 * instruction whose first byte has been replaced by the "breakpoint"

 * instruction.  To avoid the SMP problems that can occur when we

 * temporarily put back the original opcode to single-step, we

 * single-stepped a copy of the instruction.  The address of this

 * copy is p->ainsn.insn.

 make sure we got here for instruction we have a kprobe on */

 Adjust nip to after the single-stepped instruction */

Restore back the original saved kprobes variables and continue. */

	/*

	 * if somebody else is singlestepping across a probe point, msr

	 * will have DE/SE set, in which case, continue the remaining processing

	 * of do_debug, as if this is not a probe hit.

		/*

		 * We are here because the instruction being single

		 * stepped caused a page fault. We reset the current

		 * kprobe and the nip points back to the probe address

		 * and allow the page fault handler to continue as a

		 * normal page fault.

 Turn off 'trace' bits */

		/*

		 * In case the user-specified fault handler returned

		 * zero, try to fix up.

		/*

		 * fixup_exception() could not handle it,

		 * Let do_page_fault() fix it.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * c 2001 PPC 64 Team, IBM Corp

	/*

	 * boot_cpuid paca is allocated very early before cpu_to_node is up.

	 * Set bottom-up mode, because the boot CPU should be on node-0,

	 * which will put its paca in the right place.

		/*

		 * See Documentation/powerpc/ultravisor.rst for more details.

		 *

		 * UV/HV data sharing is in PAGE_SIZE granularity. In order to

		 * minimize the number of pages shared, align the allocation to

		 * PAGE_SIZE.

	/*

	 * This is very early in boot, so no harm done if the kernel crashes at

	 * this point.

/*

 * See asm/lppaca.h for more detail.

 *

 * lppaca structures must must be 1kB in size, L1 cache line aligned,

 * and not cross 4kB boundary. A 1kB size and 1kB alignment will satisfy

 * these requirements.

 "LpPa" */

 CONFIG_PPC_PSERIES */

/*

 * 3 persistent SLBs are allocated here.  The buffer will be zero

 * initially, hence will all be invaild until we actually write them.

 *

 * If you make the number of persistent SLB entries dynamic, please also

 * update PR KVM to flush and restore them accordingly.

		/*

		 * Boot CPU comes here before early_radix_enabled

		 * is parsed (e.g., for disable_radix). So allocate

		 * always and this will be fixed up in free_unused_pacas.

 CONFIG_PPC_BOOK3S_64 */

/**

 * new_rtas_args() - Allocates rtas args

 * @cpu:	CPU number

 * @limit:	Memory limit for this allocation

 *

 * Allocates a struct rtas_args and return it's pointer,

 * if not in Hypervisor mode

 *

 * Return:	Pointer to allocated rtas_args

 *		NULL if CPU in Hypervisor Mode

 CONFIG_PPC_PSERIES */

/* The Paca is an array with one entry per processor.  Each contains an

 * lppaca, which contains the information shared between the

 * hypervisor and Linux.

 * On systems with hardware multi-threading, there are two threads

 * per processor.  The Paca array must contain an entry for each thread.

 * The VPD Areas will give a max logical processors = 2 * max physical

 * processors.  The processor VPD array needs one entry per physical

 * processor (not thread).

 Only set MSR:IR/DR when MMU is initialized */

 For now -- if we have threads this will be adjusted later */

 Put the paca pointer into r13 and SPRG_PACA */

 Setup r13 */

 On Book3E, initialize the TLB miss exception frames */

	/*

	 * In HV mode, we setup both HPACA and PACA to avoid problems

	 * if we do a GET_PACA() before the feature fixups have been

	 * applied.

	 *

	 * Normally you should test against CPU_FTR_HVMODE, but CPU features

	 * are not yet set up when we first reach here.

	/*

	 * We access pacas in real mode, and cannot take SLB faults

	 * on them when in virtual mode, so allocate them accordingly.

 Ugly fixup, see new_slb_shadow() */

 CONFIG_PPC_MM_SLICES */

 !CONFIG_PPC_BOOK3S */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  PowerPC version 

 *    Copyright (C) 1995-1996 Gary Thomas (gdt@linuxppc.org)

 *

 *  Derived from "arch/i386/kernel/signal.c"

 *    Copyright (C) 1991, 1992 Linus Torvalds

 *    1997-11-28  Modified for POSIX.1b signals by Richard Henderson

/*

 * When we have signals to deliver, we set up on the user stack,

 * going down from the original stack pointer:

 *	1) a rt_sigframe struct which contains the ucontext	

 *	2) a gap of __SIGNAL_FRAMESIZE bytes which acts as a dummy caller

 *	   frame for the signal handler.

 sys_rt_sigreturn requires the ucontext be the first field */

 New 64 bit little-endian ABI allows redzone of 512 bytes below sp */

/*

 * This computes a quad word aligned pointer inside the vmx_reserve array

 * element. For historical reasons sigcontext might not be quad word aligned,

 * but the location we write the VMX regs to must be. See the comment in

 * sigcontext for more detail.

 save altivec registers */

 CONFIG_ALTIVEC */

 CONFIG_VSX */

/*

 * Set up the sigcontext for the signal frame.

	/* When CONFIG_ALTIVEC is set, we _always_ setup v_regs even if the

	 * process never used altivec yet (MSR_VEC is zero in pt_regs of

	 * the context). This is very important because we must ensure we

	 * don't lose the VRSAVE content that may have been set prior to

	 * the process doing its first vector operation

	 * Userland shall check AT_HWCAP to know whether it can rely on the

	 * v_regs pointer or not

 Force usr to alway see softe as 1 (interrupts enabled) */

 save altivec registers */

 Copy 33 vec registers (vr0..31 and vscr) to the stack */

		/* set MSR_VEC in the MSR value in the frame to indicate that sc->v_reg)

		 * contains valid data.

	/* We always copy to/from vrsave, it's 0 if we don't have or don't

	 * use altivec.

 CONFIG_ALTIVEC */

 CONFIG_ALTIVEC */

 copy fpr regs and fpscr */

	/*

	 * Clear the MSR VSX bit to indicate there is no valid state attached

	 * to this context, except in the specific case below where we set it.

	/*

	 * Copy VSX low doubleword to local buffer for formatting,

	 * then out to userspace.  Update v_regs to point after the

	 * VMX data.

		/* set MSR_VSX in the MSR value in the frame to

		 * indicate that sc->vs_reg) contains valid data.

 CONFIG_VSX */

/*

 * As above, but Transactional Memory is in use, so deliver sigcontexts

 * containing checkpointed and transactional register states.

 *

 * To do this, we treclaim (done before entering here) to gather both sets of

 * registers and set up the 'normal' sigcontext registers with rolled-back

 * register values such that a simple signal handler sees a correct

 * checkpointed register state.  If interested, a TM-aware sighandler can

 * examine the transactional registers in the 2nd sigcontext to determine the

 * real origin of the signal.

	/* When CONFIG_ALTIVEC is set, we _always_ setup v_regs even if the

	 * process never used altivec yet (MSR_VEC is zero in pt_regs of

	 * the context). This is very important because we must ensure we

	 * don't lose the VRSAVE content that may have been set prior to

	 * the process doing its first vector operation

	 * Userland shall check AT_HWCAP to know wether it can rely on the

	 * v_regs pointer or not.

	/* Restore checkpointed FP, VEC, and VSX bits from ckpt_regs as

	 * it contains the correct FP, VEC, VSX state after we treclaimed

	 * the transaction and giveup_all() was called on reclaiming.

 save altivec registers */

 Copy 33 vec registers (vr0..31 and vscr) to the stack */

		/* If VEC was enabled there are transactional VRs valid too,

		 * else they're a copy of the checkpointed VRs.

		/* set MSR_VEC in the MSR value in the frame to indicate

		 * that sc->v_reg contains valid data.

	/* We always copy to/from vrsave, it's 0 if we don't have or don't

	 * use altivec.

 CONFIG_ALTIVEC */

 CONFIG_ALTIVEC */

 copy fpr regs and fpscr */

	/*

	 * Copy VSX low doubleword to local buffer for formatting,

	 * then out to userspace.  Update v_regs to point after the

	 * VMX data.

		/* set MSR_VSX in the MSR value in the frame to

		 * indicate that sc->vs_reg) contains valid data.

 CONFIG_VSX */

/*

 * Restore the sigcontext from the signal frame.

 If this is not a signal return, we preserve the TLS in r13 */

 copy the GPRs */

 get MSR separately, transfer the LE bit if doing signal return */

 Don't allow userspace to set SOFTE */

	/*

	 * Force reload of FP/VEC.

	 * This has to be done before copying stuff into tsk->thread.fpr/vr

	 * for the reasons explained in the previous comment.

 Copy 33 vec registers (vr0..31 and vscr) from the stack */

 Always get VRSAVE back */

 CONFIG_ALTIVEC */

 restore floating point */

	/*

	 * Get additional VSX data. Update v_regs to point after the

	 * VMX data.  Copy VSX low doubleword from userspace to local

	 * buffer for formatting, then into the taskstruct.

/*

 * Restore the two sigcontexts from the frame of a transactional processes.

 copy the GPRs */

	/*

	 * TFHAR is restored from the checkpointed 'wound-back' ucontext's NIP.

	 * TEXASR was set by the signal delivery reclaim, as was TFIAR.

	 * Users doing anything abhorrent like thread-switching w/ signals for

	 * TM-Suspended code will have to back TEXASR/TFIAR up themselves.

	 * For the case of getting a signal and simply returning from it,

	 * we don't need to re-copy them here.

 get MSR separately, transfer the LE bit if doing signal return */

 Don't allow reserved mode. */

 pull in MSR LE from user context */

 The following non-GPR non-FPR non-VR state is also checkpointed: */

 Don't allow userspace to set SOFTE */

 These regs are not checkpointed; they can go in 'regs'. */

	/*

	 * Force reload of FP/VEC.

	 * This has to be done before copying stuff into tsk->thread.fpr/vr

	 * for the reasons explained in the previous comment.

 Copy 33 vec registers (vr0..31 and vscr) from the stack */

 Always get VRSAVE back */

 CONFIG_ALTIVEC */

 restore floating point */

	/*

	 * Get additional VSX data. Update v_regs to point after the

	 * VMX data.  Copy VSX low doubleword from userspace to local

	 * buffer for formatting, then into the taskstruct.

 Make sure the transaction is marked as failed */

	/*

	 * Disabling preemption, since it is unsafe to be preempted

	 * with MSR[TS] set without recheckpointing.

 pull in MSR TS bits from user context */

	/*

	 * Ensure that TM is enabled in regs->msr before we leave the signal

	 * handler. It could be the case that (a) user disabled the TM bit

	 * through the manipulation of the MSR bits in uc_mcontext or (b) the

	 * TM bit was disabled because a sufficient number of context switches

	 * happened whilst in the signal handler and load_tm overflowed,

	 * disabling the TM bit. In either case we can end up with an illegal

	 * TM state leading to a TM Bad Thing when we return to userspace.

	 *

	 * CAUTION:

	 * After regs->MSR[TS] being updated, make sure that get_user(),

	 * put_user() or similar functions are *not* called. These

	 * functions can generate page faults which will cause the process

	 * to be de-scheduled with MSR[TS] set but without calling

	 * tm_recheckpoint(). This can cause a bug.

 This loads the checkpointed FP/VEC state, if used */

 !CONFIG_PPC_TRANSACTIONAL_MEM */

/*

 * Setup the trampoline code on the stack

 Call the handler and pop the dummy stackframe*/

 Minimal traceback info */

/*

 * Userspace code may pass a ucontext which doesn't include VSX added

 * at the end.  We need to check for this case.

/*

 * Handle {get,set,swap}_context operations

	/*

	 * Check that the context is not smaller than the original

	 * size (with VMX but without VSX)

	/*

	 * If the new context state sets the MSR VSX bits but

	 * it doesn't provide VSX state.

 Does the context have enough room to store VSX data? */

	/*

	 * If we get a fault copying the context into the kernel's

	 * image of the user's registers, we can't just return -EFAULT

	 * because the user's registers will be corrupted.  For instance

	 * the NIP value may have been updated but not some of the

	 * other registers.  Given that we have done the access_ok

	 * and successfully read the first and last bytes of the region

	 * above, this should only happen in an out-of-memory situation

	 * or if another thread unmaps the region containing the context.

	 * We kill the task with a SIGSEGV in this situation.

 This returns like rt_sigreturn */

/*

 * Do a signal return; undo the signal stack.

 Always make any pending restarted system calls return -EINTR */

		/*

		 * If there is a transactional state then throw it away.

		 * The purpose of a sigreturn is to destroy all traces of the

		 * signal frame, this includes any transactional state created

		 * within in. We only check for suspended as we can never be

		 * active in the kernel, we are active, there is nothing better to

		 * do than go ahead and Bad Thing later.

		 * The cause is not important as there will never be a

		 * recheckpoint so it's not user visible.

		/*

		 * Disable MSR[TS] bit also, so, if there is an exception in the

		 * code below (as a page fault in copy_ckvsx_to_user()), it does

		 * not recheckpoint this task if there was a context switch inside

		 * the exception.

		 *

		 * A major page fault can indirectly call schedule(). A reschedule

		 * process in the middle of an exception can have a side effect

		 * (Changing the CPU MSR[TS] state), since schedule() is called

		 * with the CPU MSR[TS] disable and returns with MSR[TS]=Suspended

		 * (switch_to() calls tm_recheckpoint() for the 'new' process). In

		 * this case, the process continues to be the same in the CPU, but

		 * the CPU state just changed.

		 *

		 * This can cause a TM Bad Thing, since the MSR in the stack will

		 * have the MSR[TS]=0, and this is what will be used to RFID.

		 *

		 * Clearing MSR[TS] state here will avoid a recheckpoint if there

		 * is any process reschedule in kernel space. The MSR[TS] state

		 * does not need to be saved also, since it will be replaced with

		 * the MSR[TS] that came from user context later, at

		 * restore_tm_sigcontexts.

 We recheckpoint on return. */

 Trying to start TM on non TM system */

		/*

		 * Fall through, for non-TM restore

		 *

		 * Unset MSR[TS] on the thread regs since MSR from user

		 * context does not have MSR active, and recheckpoint was

		 * not called since restore_tm_sigcontexts() was not called

		 * also.

		 *

		 * If not unsetting it, the code can RFID to userspace with

		 * MSR[TS] set, but without CPU in the proper state,

		 * causing a TM bad thing.

 Save the thread's msr before get_tm_stackpointer() changes it */

	/*

	 * This only applies when calling unsafe_setup_sigcontext() and must be

	 * called before opening the uaccess window.

 Create the ucontext.  */

		/* The ucontext_t passed to userland points to the second

		 * ucontext_t (for transactional state) with its uc_link ptr.

 Save the siginfo outside of the unsafe block. */

 Make sure signal handler doesn't get spurious FP exceptions */

 Set up to return from userspace. */

 Allocate a dummy caller frame for the signal handler. */

 Set up "regs" so we "return" to the signal handler. */

		/* Handler is *really* a pointer to the function descriptor for

		 * the signal routine.  The first entry in the function

		 * descriptor is the entry address of signal and the second

		 * entry is the TOC value we need to use.

 enter the signal handler in native-endian mode */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Support PCI IO workaround

 *

 *  Copyright (C) 2006 Benjamin Herrenschmidt <benh@kernel.crashing.org>

 *		       IBM, Corp.

 *  (C) Copyright 2007-2008 TOSHIBA CORPORATION

 for init_mm */

 CONFIG_PPC_INDIRECT_MMIO */

 !CONFIG_PPC_INDIRECT_MMIO */

 !CONFIG_PPC_INDIRECT_MMIO */

 Enable IO workaround */

 Register new bus to support workaround */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Routines for doing kexec-based kdump.

 *

 * Copyright (C) 2005, IBM Corp.

 *

 * Created by: Michael Ellerman

	/* The maximum range of a single instruction branch, is the current

	 * instruction's address + (32 MB - 4) bytes. For the trampoline we

	 * need to branch to current address + 32 MB. So we insert a nop at

	 * the trampoline address, then the next instruction (+ 4 bytes)

	 * does a branch to (32 MB - 4). The net effect is that when we

	 * branch to "addr" we jump to ("addr" + 32 MB). Although it requires

	 * two instructions it doesn't require any registers.

 CONFIG_PPC_PSERIES */

 CONFIG_NONSTATIC_KERNEL */

/**

 * copy_oldmem_page - copy one page from "oldmem"

 * @pfn: page frame number to be copied

 * @buf: target memory address for the copy; this can be in kernel address

 *      space or user address space (see @userbuf)

 * @csize: number of bytes to copy

 * @offset: offset in bytes into the page (based on pfn) to begin the copy

 * @userbuf: if set, @buf is in user address space, use copy_to_user(),

 *      otherwise @buf is in kernel address space, use memcpy().

 *

 * Copy a page from "oldmem". For this page, there is no pte mapped

 * in the current kernel. We stitch up a pte, similar to kmap_atomic.

/*

 * The crashkernel region will almost always overlap the RTAS region, so

 * we have to be careful when shrinking the crashkernel region.

 Does this page overlap with the RTAS region? */

 SPDX-License-Identifier: GPL-2.0-or-later

/*  Kernel module help for powerpc.

    Copyright (C) 2001, 2003 Rusty Russell IBM Corporation.

    Copyright (C) 2008 Freescale Semiconductor, Inc.



 Apply feature fixups */

 CONFIG_PPC64 */

 PPC64_ELF_ABI_v1 */

 CONFIG_PPC_BARRIER_NOSPEC */

	/*

	 * Don't do huge page allocations for modules yet until more testing

	 * is done. STRICT_MODULE_RWX may require extra work to support this

	 * too.

 First try within 32M limit from _etext to avoid branch trampolines */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *    Copyright (C) 2004 Benjamin Herrenschmidt, IBM Corp.

 *			 <benh@kernel.crashing.org>

 The alignment of the vDSO */

/*

 * The vdso data page (aka. systemcfg for old ppc64 fans) is here.

 * Once the early boot kernel code no longer needs to muck around

 * with it, it will become dynamically allocated

/*

 * The vvar mapping contains data for a specific time namespace, so when a task

 * changes namespace we must unmap its vvar data for the old namespace.

 * Subsequent faults will map in data for the new namespace.

 *

 * For more details see timens_setup_vdso_data().

	/*

	 * VM_PFNMAP | VM_IO protect .fault() handler from being called

	 * through interfaces like /proc/$pid/mem or

	 * process_vm_{readv,writev}() as long as there's no .access()

	 * in special_mapping_vmops.

	 * For more details check_vma_flags() and __access_remote_vm()

		/*

		 * If a task belongs to a time namespace then a namespace

		 * specific VVAR is mapped with the VVAR_DATA_PAGE_OFFSET and

		 * the real VVAR page is mapped with the VVAR_TIMENS_PAGE_OFFSET

		 * offset.

		 * See also the comment near timens_setup_vdso_data().

 CONFIG_TIME_NS */

/*

 * This is called from binfmt_elf, we create the special vma for the

 * vDSO and insert it into the mm struct tree

		/*

		 * On 64bit we don't have a preferred map address. This

		 * allows get_unmapped_area to find an area near other mmaps

		 * and most likely share a SLB entry.

	/*

	 * pick a base address for the vDSO in process space. We try to put it

	 * at vdso_base which is the "natural" base for it, but we might fail

	 * and end up putting it elsewhere.

	 * Add enough to the size so that the result can be aligned.

 Add required alignment. */

	/*

	 * Put vDSO base into mm struct. We need to do this before calling

	 * install_special_mapping or the perf counter mmap tracking code

	 * will fail to recognise it as a vDSO.

	/*

	 * our vma flags don't have VM_WRITE so by default, the process isn't

	 * allowed to write those pages.

	 * gdb can break that with ptrace interface, and thus trigger COW on

	 * those pages but it's then your responsibility to never do that on

	 * the "data" page of the vDSO or you'll stop getting kernel updates

	 * and your nice userland gettimeofday will be totally dead.

	 * It's fine to use that for setting breakpoints in the vDSO code

	 * pages though.

 CONFIG_PPC64 */

 CONFIG_PPC64 */

/*

 * Called from setup_arch to initialize the bitmap of available

 * syscalls in the systemcfg page

	/*

	 * SPRG_VDSO contains the CPU in the bottom 16 bits and the NUMA node

	 * in the next 16 bits.  The VDSO uses this to implement getcpu().

 We need to call this before SMP init */

	/*

	 * Fill up the "systemcfg" stuff for backward compatibility

	/*

	 * Fake the old platform number for pSeries and add

	 * in LPAR bit if necessary

 CONFIG_PPC64 */

 SPDX-License-Identifier: GPL-2.0

 busno is always one cell */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Common prep/pmac/chrp boot and setup code.

/*

 * This is run before start_kernel(), the kernel has been relocated

 * and we are running with enough of the MMU enabled to have our

 * proper kernel virtual addresses

 *

 * We do the initial parsing of the flat device-tree and prepares

 * for the MMU to be fully initialized.

 Configure static keys first, now that we're relocated. */

 Enable early debugging if any specified (see udbg.h) */

 replace b by bne cr0 */

 Do some early initialization based on the flat device tree */

 Checks "l2cr=xxxx" command-line option */

 force invalidate by disable cache */

 and enable it */

 Checks "l3cr=xxxx" command-line option */

 and enable it */

 clear the progress line */

 call platform init */

	/* interrupt stacks must be in lowmem, we get that for free on ppc32

	/* interrupt stacks must be in lowmem, we get that for free on ppc32

	/*

	 * Set cache line size based on type of cpu as a default.

	 * Systems with OF can look in the properties on the cpu node(s)

	 * for a possibly more accurate value.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2006 Benjamin Herrenschmidt, IBM Corporation

 *

 * Provide default implementations of the DMA mapping callbacks for

 * busses using the iommu infrastructure

 CONFIG_ARCH_HAS_DMA_MAP_DIRECT */

/*

 * Generic iommu implementation

/* Allocates a contiguous real buffer and creates mappings over it.

 * Returns the virtual address of the buffer and sets dma_handle

 * to the dma address (mapping) of the first page.

/* Creates TCEs for a user provided buffer.  The user buffer must be

 * contiguous real kernel storage (not vmalloc).  The address passed here

 * comprises a page address and offset into that page. The dma_addr_t

 * returned will point to the same byte within the page as was passed in.

 We support DMA to/from any memory page via the iommu */

		/*

		 * dma_iommu_bypass_supported() sets dma_max when there is

		 * 1:1 mapping but it is somehow limited.

		 * ibm,pmemory is one example.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright IBM Corporation 2001, 2005, 2006

 * Copyright Dave Engebretsen & Todd Inglett 2001

 * Copyright Linas Vepstas 2005, 2006

 * Copyright 2001-2012 IBM Corporation.

 *

 * Please address comments and feedback to Linas Vepstas <linas@austin.ibm.com>

/** Overview:

 *  EEH, or "Enhanced Error Handling" is a PCI bridge technology for

 *  dealing with PCI bus errors that can't be dealt with within the

 *  usual PCI framework, except by check-stopping the CPU.  Systems

 *  that are designed for high-availability/reliability cannot afford

 *  to crash due to a "mere" PCI error, thus the need for EEH.

 *  An EEH-capable bridge operates by converting a detected error

 *  into a "slot freeze", taking the PCI adapter off-line, making

 *  the slot behave, from the OS'es point of view, as if the slot

 *  were "empty": all reads return 0xff's and all writes are silently

 *  ignored.  EEH slot isolation events can be triggered by parity

 *  errors on the address or data busses (e.g. during posted writes),

 *  which in turn might be caused by low voltage on the bus, dust,

 *  vibration, humidity, radioactivity or plain-old failed hardware.

 *

 *  Note, however, that one of the leading causes of EEH slot

 *  freeze events are buggy device drivers, buggy device microcode,

 *  or buggy device hardware.  This is because any attempt by the

 *  device to bus-master data to a memory address that is not

 *  assigned to the device will trigger a slot freeze.   (The idea

 *  is to prevent devices-gone-wild from corrupting system memory).

 *  Buggy hardware/drivers will have a miserable time co-existing

 *  with EEH.

 *

 *  Ideally, a PCI device driver, when suspecting that an isolation

 *  event has occurred (e.g. by reading 0xff's), will then ask EEH

 *  whether this is the case, and then take appropriate steps to

 *  reset the PCI slot, the PCI device, and then resume operations.

 *  However, until that day,  the checking is done here, with the

 *  eeh_check_failure() routine embedded in the MMIO macros.  If

 *  the slot is found to be isolated, an "EEH Event" is synthesized

 *  and sent out for processing.

/* If a device driver keeps reading an MMIO register in an interrupt

 * handler after a slot isolation event, it might be broken.

 * This sets the threshold for how many read attempts we allow

 * before printing an error message.

 Time to wait for a PCI slot to report status, in milliseconds */

/*

 * EEH probe mode support, which is part of the flags,

 * is to support multiple platforms for EEH. Some platforms

 * like pSeries do PCI emunation based on device tree.

 * However, other platforms like powernv probe PCI devices

 * from hardware. The flag is used to distinguish that.

 * In addition, struct eeh_ops::probe would be invoked for

 * particular OF node or PCI device so that the corresponding

 * PE would be created there.

/*

 * EEH allowed maximal frozen times. If one particular PE's

 * frozen count in last hour exceeds this limit, the PE will

 * be forced to be offline permanently.

/*

 * Controls whether a recovery event should be scheduled when an

 * isolated device is discovered. This is only really useful for

 * debugging problems with the EEH core.

 Platform dependent EEH operations */

 Lock to avoid races due to multiple reports of an error */

 Lock to protect passed flags */

/* Buffer for reporting pci register dumps. Its here in BSS, and

 * not dynamically alloced, so that it ends up in RMO where RTAS

 * can access it.

/*

 * The struct is used to maintain the EEH global statistic

 * information. Besides, the EEH global statistics will be

 * exported to user space through procfs

 PCI device not found		*/

 OF node not found		*/

 Config address not found	*/

 EEH check skipped		*/

 Total EEH checks		*/

 Unnecessary EEH checks	*/

 PE reset			*/

/*

 * This routine captures assorted PCI configuration space data

 * for the indicated PCI device, and puts them into a buffer

 * for RTAS error logging.

 Gather bridge-specific registers */

 Dump out the PCI-X command and status regs */

 If PCI-E capable, dump PCI-E cap 10 */

 If AER capable, dump it */

/**

 * eeh_slot_error_detail - Generate combined log including driver log and error log

 * @pe: EEH PE

 * @severity: temporary or permanent error log

 *

 * This routine should be called to generate the combined log, which

 * is comprised of driver log and error log. The driver log is figured

 * out from the config space of the corresponding PCI device, while

 * the error log is fetched through platform dependent function call.

	/*

	 * When the PHB is fenced or dead, it's pointless to collect

	 * the data from PCI config space because it should return

	 * 0xFF's. For ER, we still retrieve the data from the PCI

	 * config space.

	 *

	 * For pHyp, we have to enable IO for log retrieval. Otherwise,

	 * 0xFF's is always returned from PCI config space.

	 *

	 * When the @severity is EEH_LOG_PERM, the PE is going to be

	 * removed. Prior to that, the drivers for devices included in

	 * the PE will be closed. The drivers rely on working IO path

	 * to bring the devices to quiet state. Otherwise, PCI traffic

	 * from those devices after they are removed is like to cause

	 * another unexpected EEH error.

		/*

		 * The config space of some PCI devices can't be accessed

		 * when their PEs are in frozen state. Otherwise, fenced

		 * PHB might be seen. Those PEs are identified with flag

		 * EEH_PE_CFG_RESTRICTED, indicating EEH_PE_CFG_BLOCKED

		 * is set automatically when the PE is put to EEH_PE_ISOLATED.

		 *

		 * Restoring BARs possibly triggers PCI config access in

		 * (OPAL) firmware and then causes fenced PHB. If the

		 * PCI config is blocked with flag EEH_PE_CFG_BLOCKED, it's

		 * pointless to restore BARs and dump config space.

/**

 * eeh_token_to_phys - Convert EEH address token to phys address

 * @token: I/O token, should be address in the form 0xA....

 *

 * This routine should be called to convert virtual I/O address

 * to physical one.

/*

 * On PowerNV platform, we might already have fenced PHB there.

 * For that case, it's meaningless to recover frozen PE. Intead,

 * We have to handle fenced PHB firstly.

 Find the PHB PE */

 If the PHB has been in problematic state */

 Check PHB state */

 Isolate the PHB and send event */

/**

 * eeh_dev_check_failure - Check if all 1's data is due to EEH slot freeze

 * @edev: eeh device

 *

 * Check for an EEH failure for the given device node.  Call this

 * routine if the result of a read was all 0xff's and you want to

 * find out if this is due to an EEH slot freeze.  This routine

 * will query firmware for the EEH status.

 *

 * Returns 0 if there has not been an EEH error; otherwise returns

 * a non-zero value and queues up a slot isolation event notification.

 *

 * It is safe to call this routine in an interrupt context.

 Access to IO BARs might get this far and still not want checking. */

	/*

	 * On PowerNV platform, we might already have fenced PHB

	 * there and we need take care of that firstly.

	/*

	 * If the PE isn't owned by us, we shouldn't check the

	 * state. Instead, let the owner handle it if the PE has

	 * been frozen.

	/* If we already have a pending isolation event for this

	 * slot, we know it's bad already, we don't need to check.

	 * Do this checking under a lock; as multiple PCI devices

	 * in one slot might report errors simultaneously, and we

	 * only want one error recovery routine running.

	/*

	 * Now test for an EEH failure.  This is VERY expensive.

	 * Note that the eeh_config_addr may be a parent device

	 * in the case of a device behind a bridge, or it may be

	 * function zero of a multi-function device.

	 * In any case they must share a common PHB.

	/* Note that config-io to empty slots may fail;

	 * they are empty when they don't have children.

	 * We will punt with the following conditions: Failure to get

	 * PE's state, EEH not support and Permanently unavailable

	 * state, PE is in good state.

	/*

	 * It should be corner case that the parent PE has been

	 * put into frozen state as well. We should take care

	 * that at first.

 Hit the ceiling ? */

 Frozen parent PE ? */

 Next parent level */

	/* Avoid repeated reports of this failure, including problems

	 * with other functions on this device, and functions under

	 * bridges.

	/* Most EEH events are due to device driver bugs.  Having

	 * a stack trace will help the device-driver authors figure

	 * out what happened.  So print that out.

/**

 * eeh_check_failure - Check if all 1's data is due to EEH slot freeze

 * @token: I/O address

 *

 * Check for an EEH failure at the given I/O address. Call this

 * routine if the result of a read was all 0xff's and you want to

 * find out if this is due to an EEH slot freeze event. This routine

 * will query firmware for the EEH status.

 *

 * Note this routine is safe to call in an interrupt context.

 Finding the phys addr + pci device; this is pretty quick. */

/**

 * eeh_pci_enable - Enable MMIO or DMA transfers for this slot

 * @pe: EEH PE

 * @function: EEH option

 *

 * This routine should be called to reenable frozen MMIO or DMA

 * so that it would work correctly again. It's useful while doing

 * recovery or log collection on the indicated device.

	/*

	 * pHyp doesn't allow to enable IO or DMA on unfrozen PE.

	 * Also, it's pointless to enable them on unfrozen PE. So

	 * we have to check before enabling IO or DMA.

	/*

	 * Check if IO or DMA has been enabled before

	 * enabling them.

 Needn't enable it at all */

 It's already enabled */

 Issue the request */

 Check if the request is finished successfully */

	/*

	 * The caller should have disabled and saved the

	 * state for the specified device

 Ensure we have D0 power state */

 Save device state */

	/*

	 * Disable device to avoid any DMA traffic and

	 * interrupt from the device

 Apply customization from firmware */

 The caller should restore state for the specified device */

/**

 * pcibios_set_pcie_reset_state - Set PCI-E reset state

 * @dev: pci device struct

 * @state: reset state to enter

 *

 * Return value:

 * 	0 if success

/**

 * eeh_set_dev_freset - Check the required reset for the indicated device

 * @edev: EEH device

 * @flag: return value

 *

 * Each device might have its preferred reset type: fundamental or

 * hot reset. The routine is used to collected the information for

 * the indicated device and its children so that the bunch of the

 * devices could be reset properly.

/**

 * eeh_pe_reset_full - Complete a full reset process on the indicated PE

 * @pe: EEH PE

 * @include_passed: include passed-through devices?

 *

 * This function executes a full reset procedure on a PE, including setting

 * the appropriate flags, performing a fundamental or hot reset, and then

 * deactivating the reset status.  It is designed to be used within the EEH

 * subsystem, as opposed to eeh_pe_reset which is exported to drivers and

 * only performs a single operation at a time.

 *

 * This function will attempt to reset a PE three times before failing.

	/*

	 * Determine the type of reset to perform - hot or fundamental.

	 * Hot reset is the default operation, unless any device under the

	 * PE requires a fundamental reset.

 Mark the PE as in reset state and block config space accesses */

 Make three attempts at resetting the bus */

 Wait until the PE is in a functioning state */

	/* Resetting the PE may have unfrozen child PEs. If those PEs have been

	 * (potentially) passed through to a guest, re-freeze them:

/**

 * eeh_save_bars - Save device bars

 * @edev: PCI device associated EEH device

 *

 * Save the values of the device bars. Unlike the restore

 * routine, this routine is *not* recursive. This is because

 * PCI devices are added individually; but, for the restore,

 * an entire slot is reset at a time.

	/*

	 * For PCI bridges including root port, we need enable bus

	 * master explicitly. Otherwise, it can't fetch IODA table

	 * entries correctly. So we cache the bit in advance so that

	 * we can restore it after reset, either PHB range or PE range.

	/*

	 * Note: It's not possible to perform EEH device addition (i.e.

	 * {pseries,pnv}_pcibios_bus_add_device()) here because it depends on

	 * the device's resources, which have not yet been set up.

/**

 * eeh_init - System wide EEH initialization

 * @ops: struct to trace EEH operation callback functions

 *

 * It's the platform's job to call this from an arch_initcall().

 the platform should only initialise EEH once */

 Register reboot notifier */

 Initialize PHB PEs */

 Initialize EEH event */

/**

 * eeh_probe_device() - Perform EEH initialization for the indicated pci device

 * @dev: pci device for which to set up EEH

 *

 * This routine must be used to complete EEH initialization for PCI

 * devices that were added after system boot (e.g. hotplug, dlpar).

	/*

	 * pci_dev_to_eeh_dev() can only work if eeh_probe_dev() was

	 * already called for this device.

	/*

	 * FIXME: We rely on pcibios_release_device() to remove the

	 * existing EEH state. The release function is only called if

	 * the pci_dev's refcount drops to zero so if something is

	 * keeping a ref to a device (e.g. a filesystem) we need to

	 * remove the old EEH state.

	 *

	 * FIXME: HEY MA, LOOK AT ME, NO LOCKING!

		/*

		 * We definitely should have the PCI device removed

		 * though it wasn't correctly. So we needn't call

		 * into error handler afterwards.

 bind the pdev and the edev together */

/**

 * eeh_remove_device - Undo EEH setup for the indicated pci device

 * @dev: pci device to be removed

 *

 * This routine should be called when a device is removed from

 * a running system (e.g. by hotplug or dlpar).  It unregisters

 * the PCI device from the EEH subsystem.  I/O errors affecting

 * this device will no longer be detected after this call; thus,

 * i/o errors affecting this slot may leave this device unusable.

 Unregister the device with the EEH/PCI address search system */

	/*

	 * During the hotplug for EEH error recovery, we need the EEH

	 * device attached to the parent PE in order for BAR restore

	 * a bit later. So we keep it for BAR restore and remove it

	 * from the parent PE during the BAR resotre.

	/*

	 * eeh_sysfs_remove_device() uses pci_dev_to_eeh_dev() so we need to

	 * remove the sysfs files before clearing dev.archdata.edev

	/*

	 * We're removing from the PCI subsystem, that means

	 * the PCI device driver can't support EEH or not

	 * well. So we rely on hotplug completely to do recovery

	 * for the specific PCI device.

	/*

	 * The flag "in_error" is used to trace EEH devices for VFs

	 * in error state or not. It's set in eeh_report_error(). If

	 * it's not set, eeh_report_{reset,resume}() won't be called

	 * for the VF EEH device.

 Emulex, BE     */

 Emulex, Lancer */

 Broadcom BCM5719 */

 Check PE state */

 Unfrozen PE, nothing to do */

 Frozen PE, check if it needs PE level reset */

/**

 * eeh_dev_open - Increase count of pass through devices for PE

 * @pdev: PCI device

 *

 * Increase count of passed through devices for the indicated

 * PE. In the result, the EEH errors detected on the PE won't be

 * reported. The PE owner will be responsible for detection

 * and recovery.

 No PCI device ? */

 No EEH device or PE ? */

	/*

	 * The PE might have been put into frozen state, but we

	 * didn't detect that yet. The passed through PCI devices

	 * in frozen PE won't work properly. Clear the frozen state

	 * in advance.

 Increase PE's pass through count */

/**

 * eeh_dev_release - Decrease count of pass through devices for PE

 * @pdev: PCI device

 *

 * Decrease count of pass through devices for the indicated PE. If

 * there is no passed through device in PE, the EEH errors detected

 * on the PE will be reported and handled as usual.

 No PCI device ? */

 No EEH device ? */

 Decrease PE's pass through count */

/**

 * eeh_iommu_group_to_pe - Convert IOMMU group to EEH PE

 * @group: IOMMU group

 *

 * The routine is called to convert IOMMU group to EEH PE.

 No IOMMU group ? */

 No EEH device or PE ? */

 CONFIG_IOMMU_API */

/**

 * eeh_pe_set_option - Set options for the indicated PE

 * @pe: EEH PE

 * @option: requested option

 *

 * The routine is called to enable or disable EEH functionality

 * on the indicated PE, to enable IO or DMA for the frozen PE.

 Invalid PE ? */

	/*

	 * EEH functionality could possibly be disabled, just

	 * return error for the case. And the EEH functinality

	 * isn't expected to be disabled on one specific PE.

/**

 * eeh_pe_get_state - Retrieve PE's state

 * @pe: EEH PE

 *

 * Retrieve the PE's state, which includes 3 aspects: enabled

 * DMA, enabled IO and asserted reset.

 Existing PE ? */

	/*

	 * If the parent PE is owned by the host kernel and is undergoing

	 * error recovery, we should return the PE state as temporarily

	 * unavailable so that the error recovery on the guest is suspended

	 * until the recovery completes on the host.

	/*

	 * Reenable PCI devices as the devices passed

	 * through are always enabled before the reset.

 The PE is still in frozen state */

/**

 * eeh_pe_reset - Issue PE reset according to specified type

 * @pe: EEH PE

 * @option: reset type

 * @include_passed: include passed-through devices?

 *

 * The routine is called to reset the specified PE with the

 * indicated type, either fundamental reset or hot reset.

 * PE reset is the most important part for error recovery.

 Invalid PE ? */

		/*

		 * Proactively freeze the PE to drop all MMIO access

		 * during reset, which should be banned as it's always

		 * cause recursive EEH error.

/**

 * eeh_pe_configure - Configure PCI bridges after PE reset

 * @pe: EEH PE

 *

 * The routine is called to restore the PCI config space for

 * those PCI devices, especially PCI bridges affected by PE

 * reset issued previously.

 Invalid PE ? */

/**

 * eeh_pe_inject_err - Injecting the specified PCI error to the indicated PE

 * @pe: the indicated PE

 * @type: error type

 * @func: error function

 * @addr: address

 * @mask: address mask

 *

 * The routine is called to inject the specified PCI error, which

 * is determined by @type and @func, to the indicated PE for

 * testing purpose.

 Invalid PE ? */

 Unsupported operation ? */

 Check on PCI error type */

 Check on PCI error function */

 CONFIG_PROC_FS */

	/*

	 * When PE is NULL the event is a "special" event. Rather than

	 * recovering a specific PE it forces the EEH core to scan for failed

	 * PHBs and recovers each. This needs to be done before any device

	 * recoveries can occur.

 Retrieve PE */

	/*

	 * We don't do any state checking here since the detection

	 * process is async to the recovery process. The recovery

	 * thread *should* not break even if we schedule a recovery

	 * from an odd state (e.g. PE removed, or recovery of a

	 * non-isolated PE)

 Do we have an MMIO BAR to disable? */

		/*

		 * VFs don't have a per-function COMMAND register, so the best

		 * we can do is clear the Memory Space Enable bit in the PF's

		 * SRIOV control reg.

		 *

		 * Unfortunately, this requires that we have a PF (i.e doesn't

		 * work for a passed-through VF) and it has the potential side

		 * effect of also causing an EEH on every other VF under the

		 * PF. Oh well.

 passed through VFs have no PF */

 !CONFIG_PCI_IOV */

	/*

	 * Process here is:

	 *

	 * 1. Disable Memory space.

	 *

	 * 2. Perform an MMIO to the device. This should result in an error

	 *    (CA  / UR) being raised by the device which results in an EEH

	 *    PE freeze. Using the in_8() accessor skips the eeh detection hook

	 *    so the freeze hook so the EEH Detection machinery won't be

	 *    triggered here. This is to match the usual behaviour of EEH

	 *    where the HW will asyncronously freeze a PE and it's up to

	 *    the kernel to notice and deal with it.

	 *

	 * 3. Turn Memory space back on. This is more important for VFs

	 *    since recovery will probably fail if we don't. For normal

	 *    the COMMAND register is reset as a part of re-initialising

	 *    the device.

	 *

	 * Breaking stuff is the point so who cares if it's racy ;)

	/*

	 * In order for error recovery to work the driver needs to implement

	 * .error_detected(), so it can quiesce IO to the device, and

	 * .slot_reset() so it can re-initialise the device after a reset.

	 *

	 * Ideally they'd implement .resume() too, but some drivers which

	 * we need to support (notably IPR) don't so I guess we can tolerate

	 * that.

	 *

	 * .mmio_enabled() is mostly there as a work-around for devices which

	 * take forever to re-init after a hot reset. Implementing that is

	 * strictly optional.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 * Copyright (c) 2005 Linas Vepstas <linas@linas.org>

/** Overview:

 *  EEH error states may be detected within exception handlers;

 *  however, the recovery processing needs to occur asynchronously

 *  in a normal kernel context and not an interrupt context.

 *  This pair of routines creates an event and queues it onto a

 *  work-queue, where a worker thread can drive recovery.

/**

 * eeh_event_handler - Dispatch EEH events.

 * @dummy - unused

 *

 * The detection of a frozen slot can occur inside an interrupt,

 * where it can be hard to do anything about it.  The goal of this

 * routine is to pull these detection events out of the context

 * of the interrupt handler, and re-dispatch them for processing

 * at a later time in a normal context.

 Fetch EEH event from the queue */

 We might have event without binding PE */

/**

 * eeh_event_init - Start kernel thread to handle EEH events

 *

 * This routine is called to start the kernel thread for processing

 * EEH event.

/**

 * eeh_send_failure_event - Generate a PCI error event

 * @pe: EEH PE

 *

 * This routine can be called within an interrupt context;

 * the actual event will be delivered in a normal context

 * (from a workqueue).

	/*

	 * Mark the PE as recovering before inserting it in the queue.

	 * This prevents the PE from being free()ed by a hotplug driver

	 * while the PE is sitting in the event queue.

		/*

		 * Save the current stack trace so we can dump it from the

		 * event handler thread.

 CONFIG_STACKTRACE */

 We may or may not be called in an interrupt context */

 For EEH deamon to knick in */

	/*

	 * If we've manually supressed recovery events via debugfs

	 * then just drop it on the floor.

/**

 * eeh_remove_event - Remove EEH event from the queue

 * @pe: Event binding to the PE

 * @force: Event will be removed unconditionally

 *

 * On PowerNV platform, we might have subsequent coming events

 * is part of the former one. For that case, those subsequent

 * coming events are totally duplicated and unnecessary, thus

 * they should be removed.

	/*

	 * If we have NULL PE passed in, we have dead IOC

	 * or we're sure we can report all existing errors

	 * by the caller.

	 *

	 * With "force", the event with associated PE that

	 * have been isolated, the event won't be removed

	 * to avoid event lost.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2017, Nicholas Piggin, IBM Corporation

 Device-tree visible constants follow */

 For parsing, we define all bits set as "NONE" case */

 fdt parsing */

/*

 * Set up the base CPU

 minimum block size, fixed by */

 cache info init.             */

 Initialize the base environment -- clear FSCR/HFSCR.  */

	/*

	 * LPCR does not get cleared, to match behaviour with secondaries

	 * in __restore_cpu_cpufeatures. Once the idle code is fixed, this

	 * could clear LPCR too.

 Does not have a known recipe */

 Does not have a known recipe */

 HV external interrupts */

 Set PECE wakeup modes for ISA 207 */

 Set PECE wakeup modes for ISAv3.0B */

 VRMASD */

 L=1 LP=00 */

	/*

	 * Linux relies on FSCR[DSCR] being clear, so that we can take the

	 * facility unavailable interrupt and track the task's usage of DSCR.

	 * See facility_unavailable_exception().

	 * Clear the bit here so that feat_enable() doesn't set it.

	/*

	 * PPC_FEATURE2_EBB is enabled in PMU init code because it has

	 * historically been related to the PMU facility. This may have

	 * to be decoupled if EBB becomes more generic. For now, follow

	 * existing convention.

 P9 has an HFSCR for privileged state */

 hyp doorbell wakeup */

	/*

	 * POWER9 XIVE interrupts including in OPAL XICS compatibility

	 * are always delivered as hypervisor virtualization interrupts (HVI)

	 * rather than EE.

	 *

	 * However LPES0 is not set here, in the chance that an EE does get

	 * delivered to the host somehow, the EE handler would not expect it

	 * to be delivered in LPES0 mode (e.g., using SRR[01]). This could

	 * happen if there is a bug in interrupt controller code, or IC is

	 * misconfigured in systemsim.

 enable hvi interrupts */

 disable ee interrupts when MSR_HV */

 hvi can wake from stop */

 alignment-interrupt-dsisr ignored */

/*

 * Handle POWER9 broadcast tlbie invalidation issue using

 * cpu feature flag.

		/*

		 * Set the tlbie feature flag for anything below

		 * Nimbus DD 2.3 and Cumulus DD 1.3

 Nimbus */

 Cumulus */

	/*

	 * Not all quirks can be derived from the cpufeatures device tree.

 DD2.0 has no feature flag */

 DD2.1 and up have DD2_1 */

 Make sure powerpc_base_platform is non-NULL */

 Setup and verify the FDT, if it fails we just bail */

 Do all the independent features in the first pass */

 We are scanning "ibm,powerpc-cpu-features" nodes only */

 We checked before, "can't happen" */

 Count and allocate space for cpu features */

 Scan nodes into dt_cpu_features and enable those without deps  */

 Recursive enable remaining features with dependencies */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Derived from arch/i386/kernel/irq.c

 *    Copyright (C) 1992 Linus Torvalds

 *  Adapted from arch/i386 by Gary Thomas

 *    Copyright (C) 1995-1996 Gary Thomas (gdt@linuxppc.org)

 *  Updated and modified by Cort Dougan <cort@fsmlabs.com>

 *    Copyright (C) 1996-2001 Cort Dougan

 *  Adapted for Power Macintosh by Paul Mackerras

 *    Copyright (C) 1996 Paul Mackerras (paulus@cs.anu.edu.au)

 *

 * This file contains the code used by various IRQ handling routines:

 * asking for different IRQ's should be done through these routines

 * instead of just grabbing them. Thus setups with different IRQ numbers

 * shouldn't result in any weird surprises, and installing new handlers

 * should be easier.

 *

 * The MPC8xx has an interrupt mask in the SIU.  If a bit is set, the

 * interrupt is _enabled_.  As expected, IRQ0 is bit 0 in the 32-bit

 * mask register (of which only 16 are defined), hence the weird shifting

 * and complement of the cached_irq_mask.  I want to be able to stuff

 * this right into the SIU SMASK register.

 * Many of the prep/chrp functions are conditional compiled on CONFIG_PPC_8xx

 * to reduce code space and undefined function references.

 CONFIG_PPC32 */

	/*

	 * Be careful here, calling these interrupt handlers can cause

	 * softirqs to be raised, which they may run when calling irq_exit,

	 * which will cause local_irq_enable() to be run, which can then

	 * recurse into this function. Don't keep any state across

	 * interrupt handler calls which may change underneath us.

	 *

	 * We use local_paca rather than get_paca() to avoid all the

	 * debug_smp_processor_id() business in this low level function.

	/*

	 * Force the delivery of pending soft-disabled interrupts on PS3.

	 * Any HV call will have this side effect.

	/*

	 * Check if an hypervisor Maintenance interrupt happened.

	 * This is a higher priority interrupt than the others, so

	 * replay it first.

 Book3E does not support soft-masking PMI interrupts */

		/*

		 * We are responding to the next interrupt, so interrupt-off

		 * latencies should be reset here.

	/*

	 * Check if anything calls local_irq_enable/restore() when KUAP is

	 * disabled (user access enabled). We handle that case here by saving

	 * and re-locking AMR but we shouldn't get here in the first place,

	 * hence the warning.

 Write the new soft-enabled value if it is a disable */

	/*

	 * After the stb, interrupts are unmasked and there are no interrupts

	 * pending replay. The restart sequence makes this atomic with

	 * respect to soft-masked interrupts. If this was just a simple code

	 * sequence, a soft-masked interrupt could become pending right after

	 * the comparison and before the stb.

	 *

	 * This allows interrupts to be unmasked without hard disabling, and

	 * also without new hard interrupts coming in ahead of pending ones.

 Have interrupts to replay, need to hard disable first */

				/*

				 * An interrupt could have come in and cleared

				 * MSR[EE] and set IRQ_HARD_DIS, so check

				 * IRQ_HARD_DIS again and warn if it is still

				 * clear.

	/*

	 * Disable preempt here, so that the below preempt_enable will

	 * perform resched if required (a replayed interrupt may set

	 * need_resched).

 Write the new soft-enabled value */

	/*

	 * From this point onward, we can take interrupts, preempt,

	 * etc... unless we got hard-disabled. We check if an event

	 * happened. If none happened, we know we can just return.

	 *

	 * We may have preempted before the check below, in which case

	 * we are checking the "new" CPU instead of the old one. This

	 * is only a problem if an event happened on the "old" CPU.

	 *

	 * External interrupt events will have caused interrupts to

	 * be hard-disabled, so there is no problem, we

	 * cannot have preempted.

 We need to hard disable to replay. */

		/*

		 * We should already be hard disabled here. We had bugs

		 * where that wasn't the case so let's dbl check it and

		 * warn if we are wrong. Only do that when IRQ tracing

		 * is enabled as mfmsr() can be costly.

	/*

	 * Disable preempt here, so that the below preempt_enable will

	 * perform resched if required (a replayed interrupt may set

	 * need_resched).

/*

 * This is a helper to use when about to go into idle low-power

 * when the latter has the side effect of re-enabling interrupts

 * (such as calling H_CEDE under pHyp).

 *

 * You call this function with interrupts soft-disabled (this is

 * already the case when ppc_md.power_save is called). The function

 * will return whether to enter power save or just return.

 *

 * In the former case, it will have notified lockdep of interrupts

 * being re-enabled and generally sanitized the lazy irq state,

 * and in the latter case it will leave with interrupts hard

 * disabled and marked as such, so the local_irq_enable() call

 * in arch_cpu_idle() will properly re-enable everything.

	/*

	 * First we need to hard disable to ensure no interrupt

	 * occurs before we effectively enter the low power state

	/*

	 * If anything happened while we were soft-disabled,

	 * we return now and do not enter the low power state.

 Tell lockdep we are about to re-enable */

	/*

	 * Mark interrupts as soft-enabled and clear the

	 * PACA_IRQ_HARD_DIS from the pending mask since we

	 * are about to hard enable as well as a side effect

	 * of entering the low power state.

 Tell the caller to enter the low power state */

/*

 * This is for idle sequences that return with IRQs off, but the

 * idle state itself wakes on interrupt. Tell the irq tracer that

 * IRQs are enabled for the duration of idle so it does not get long

 * off times. Must be paired with fini_irq_for_idle_irqsoff.

	/*

	 * First we need to hard disable to ensure no interrupt

	 * occurs before we effectively enter the low power state

	/*

	 * If anything happened while we were soft-disabled,

	 * we return now and do not enter the low power state.

 Tell lockdep we are about to re-enable */

/*

 * Take the SRR1 wakeup reason, index into this table to find the

 * appropriate irq_happened bit.

 *

 * Sytem reset exceptions taken in idle state also come through here,

 * but they are NMI interrupts so do not need to wait for IRQs to be

 * restored, and should be taken as early as practical. These are marked

 * with 0xff in the table. The Power ISA specifies 0100b as the system

 * reset interrupt reason.

	/*

	 * Take the system reset now, which is immediately after registers

	 * are restored from idle. It's an NMI, so interrupts need not be

	 * re-enabled before it is taken.

		/*

		 * When doorbell triggers a system reset wakeup, the message

		 * is not cleared, so if the doorbell interrupt is replayed

		 * and the IPI handled, the doorbell interrupt would still

		 * fire when EE is enabled.

		 *

		 * To avoid taking the superfluous doorbell interrupt,

		 * execute a msgclr here before the interrupt is replayed.

	/*

	 * The 0 index (SRR1[42:45]=b0000) must always evaluate to 0,

	 * so this can be called unconditionally with the SRR1 wake

	 * reason as returned by the idle code, which uses 0 to mean no

	 * interrupt.

	 *

	 * If a future CPU was to designate this as an interrupt reason,

	 * then a new index for no interrupt must be assigned.

 CONFIG_PPC_BOOK3S */

/*

 * Force a replay of the external interrupt handler on this CPU.

	/*

	 * This must only be called with interrupts soft-disabled,

	 * the replay will happen when re-enabling.

	/*

	 * Interrupts must always be hard disabled before irq_happened is

	 * modified (to prevent lost update in case of interrupt between

	 * load and store).

 Indicate in the PACA that we have an interrupt to replay */

 CONFIG_PPC64 */

 CONFIG_PPC32 && CONFIG_TAU_INT */

/*

 * /proc/stat helpers

 check for stack overflow: is there less than 2KB free? */

 Temporarily switch r1 to sp, call __do_softirq() then restore r1. */

 Outputs

 Inputs

 Clobbers

 Temporarily switch r1 to sp, call __do_irq() then restore r1. */

 Outputs

 Inputs

 Clobbers

	/*

	 * Query the platform PIC for the interrupt & ack it.

	 *

	 * This will typically lower the interrupt line to the CPU

 We can hard enable interrupts now to allow perf interrupts */

 And finally process it */

 Switch to the irq stack to handle this */

 Already there ? */

 Switch stack and call */

 Round-robin distribution... */

 CONFIG_PPC64 */

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * The file intends to implement PE based on the information from

 * platforms. Basically, there have 3 types of PEs: PHB/Bus/Device.

 * All the PEs should be organized as hierarchy tree. The first level

 * of the tree will be associated to existing PHBs since the particular

 * PE is only meaningful in one PHB domain.

 *

 * Copyright Benjamin Herrenschmidt & Gavin Shan, IBM Corporation 2012.

/**

 * eeh_set_pe_aux_size - Set PE auxillary data size

 * @size: PE auxillary data size

 *

 * Set PE auxillary data size

/**

 * eeh_pe_alloc - Allocate PE

 * @phb: PCI controller

 * @type: PE type

 *

 * Allocate PE instance dynamically.

 Allocate PHB PE */

 Initialize PHB PE */

/**

 * eeh_phb_pe_create - Create PHB PE

 * @phb: PCI controller

 *

 * The function should be called while the PHB is detected during

 * system boot or PCI hotplug in order to create PHB PE.

 Allocate PHB PE */

 Put it into the list */

/**

 * eeh_wait_state - Wait for PE state

 * @pe: EEH PE

 * @max_wait: maximal period in millisecond

 *

 * Wait for the state of associated PE. It might take some time

 * to retrieve the PE's state.

	/*

	 * According to PAPR, the state of PE might be temporarily

	 * unavailable. Under the circumstance, we have to wait

	 * for indicated time determined by firmware. The maximal

	 * wait time is 5 minutes, which is acquired from the original

	 * EEH implementation. Also, the original implementation

	 * also defined the minimal wait time as 1 second.

/**

 * eeh_phb_pe_get - Retrieve PHB PE based on the given PHB

 * @phb: PCI controller

 *

 * The overall PEs form hierarchy tree. The first layer of the

 * hierarchy tree is composed of PHB PEs. The function is used

 * to retrieve the corresponding PHB PE according to the given PHB.

		/*

		 * Actually, we needn't check the type since

		 * the PE for PHB has been determined when that

		 * was created.

/**

 * eeh_pe_next - Retrieve the next PE in the tree

 * @pe: current PE

 * @root: root PE

 *

 * The function is used to retrieve the next PE in the

 * hierarchy PE tree.

/**

 * eeh_pe_traverse - Traverse PEs in the specified PHB

 * @root: root PE

 * @fn: callback

 * @flag: extra parameter to callback

 *

 * The function is used to traverse the specified PE and its

 * child PEs. The traversing is to be terminated once the

 * callback returns something other than NULL, or no more PEs

 * to be traversed.

/**

 * eeh_pe_dev_traverse - Traverse the devices from the PE

 * @root: EEH PE

 * @fn: function callback

 * @flag: extra parameter to callback

 *

 * The function is used to traverse the devices of the specified

 * PE and its child PEs.

 Traverse root PE */

/**

 * __eeh_pe_get - Check the PE address

 *

 * For one particular PE, it can be identified by PE address

 * or tranditional BDF address. BDF address is composed of

 * Bus/Device/Function number. The extra data referred by flag

 * indicates which type of address should be used.

 PHB PEs are special and should be ignored */

/**

 * eeh_pe_get - Search PE based on the given address

 * @phb: PCI controller

 * @pe_no: PE number

 *

 * Search the corresponding PE based on the specified address which

 * is included in the eeh device. The function is used to check if

 * the associated PE has been created against the PE address. It's

 * notable that the PE address has 2 format: traditional PE address

 * which is composed of PCI bus/device/function number, or unified

 * PE address.

/**

 * eeh_pe_tree_insert - Add EEH device to parent PE

 * @edev: EEH device

 * @new_pe_parent: PE to create additional PEs under

 *

 * Add EEH device to the PE in edev->pe_config_addr. If a PE already

 * exists with that address then @edev is added to that PE. Otherwise

 * a new PE is created and inserted into the PE tree as a child of

 * @new_pe_parent.

 *

 * If @new_pe_parent is NULL then the new PE will be inserted under

 * directly under the the PHB.

	/*

	 * Search the PE has been existing or not according

	 * to the PE address. If that has been existing, the

	 * PE should be composed of PCI bus and its subordinate

	 * components.

			/*

			 * We're running to here because of PCI hotplug caused by

			 * EEH recovery. We need clear EEH_PE_INVALID until the top.

 Mark the PE as type of PCI bus */

 Put the edev to PE */

 Create a new EEH PE */

	/*

	 * Put the new EEH PE into hierarchy tree. If the parent

	 * can't be found, the newly created PE will be attached

	 * to PHB directly. Otherwise, we have to associate the

	 * PE with its parent.

 link new PE into the tree */

	/*

	 * Put the newly created PE into the child list and

	 * link the EEH device accordingly.

/**

 * eeh_pe_tree_remove - Remove one EEH device from the associated PE

 * @edev: EEH device

 *

 * The PE hierarchy tree might be changed when doing PCI hotplug.

 * Also, the PCI devices or buses could be removed from the system

 * during EEH recovery. So we have to call the function remove the

 * corresponding PE accordingly if necessary.

 Remove the EEH device */

	/*

	 * Check if the parent PE includes any EEH devices.

	 * If not, we should delete that. Also, we should

	 * delete the parent PE if it doesn't have associated

	 * child PEs and EEH devices.

 PHB PEs should never be removed */

		/*

		 * XXX: KEEP is set while resetting a PE. I don't think it's

		 * ever set without RECOVERING also being set. I could

		 * be wrong though so catch that with a WARN.

			/*

			 * Mark the PE as invalid. At the end of the recovery

			 * process any invalid PEs will be garbage collected.

			 *

			 * We need to delay the free()ing of them since we can

			 * remove edev's while traversing the PE tree which

			 * might trigger the removal of a PE and we can't

			 * deal with that (yet).

/**

 * eeh_pe_update_time_stamp - Update PE's frozen time stamp

 * @pe: EEH PE

 *

 * We have time stamp for each PE to trace its time of getting

 * frozen in last hour. The function should be called to update

 * the time stamp on first error of the specific PE. On the other

 * handle, we needn't account for errors happened in last hour.

/**

 * eeh_pe_state_mark - Mark specified state for PE and its associated device

 * @pe: EEH PE

 *

 * EEH error affects the current PE and its child PEs. The function

 * is used to mark appropriate state for the affected PEs and the

 * associated devices.

/**

 * eeh_pe_mark_isolated

 * @pe: EEH PE

 *

 * Record that a PE has been isolated by marking the PE and it's children as

 * EEH_PE_ISOLATED (and EEH_PE_CFG_BLOCKED, if required) and their PCI devices

 * as pci_channel_io_frozen.

 Block PCI config access if required */

/**

 * eeh_pe_dev_state_mark - Mark state for all device under the PE

 * @pe: EEH PE

 *

 * Mark specific state for all child devices of the PE.

/**

 * eeh_pe_state_clear - Clear state for the PE

 * @data: EEH PE

 * @state: state

 * @include_passed: include passed-through devices?

 *

 * The function is used to clear the indicated state from the

 * given PE. Besides, we also clear the check count of the PE

 * as well.

 Keep the state of permanently removed PE intact */

		/*

		 * Special treatment on clearing isolated state. Clear

		 * check count since last isolation and put all affected

		 * devices to normal state.

 Unblock PCI config access if required */

/*

 * Some PCI bridges (e.g. PLX bridges) have primary/secondary

 * buses assigned explicitly by firmware, and we probably have

 * lost that after reset. So we have to delay the check until

 * the PCI-CFG registers have been restored for the parent

 * bridge.

 *

 * Don't use normal PCI-CFG accessors, which probably has been

 * blocked on normal path during the stage. So we need utilize

 * eeh operations, which is always permitted.

	/*

	 * We only check root port and downstream ports of

	 * PCIe switches

 Check slot status */

 Check power status if we have the capability */

 Enable link */

 Check link */

 Wait the link is up until timeout (5s) */

	/*

	 * Device BARs: 0x10 - 0x18

	 * Bus numbers and windows: 0x18 - 0x30

 Rom: 0x38 */

 Cache line & Latency timer: 0xC 0xD */

 Max latency, min grant, interrupt ping and line: 0x3C */

 PCI Command: 0x4 */

 Check the PCIe link is ready */

 12 == Expansion ROM Address */

 max latency, min grant, interrupt pin and line */

	/*

	 * Restore PERR & SERR bits, some devices require it,

	 * don't touch the other command bits

/**

 * eeh_restore_one_device_bars - Restore the Base Address Registers for one device

 * @data: EEH device

 * @flag: Unused

 *

 * Loads the PCI configuration space base address registers,

 * the expansion ROM base address, the latency timer, and etc.

 * from the saved values in the device node.

 Do special restore for bridges */

/**

 * eeh_pe_restore_bars - Restore the PCI config space info

 * @pe: EEH PE

 *

 * This routine performs a recursive walk to the children

 * of this device as well.

	/*

	 * We needn't take the EEH lock since eeh_pe_dev_traverse()

	 * will take that.

/**

 * eeh_pe_loc_get - Retrieve location code binding to the given PE

 * @pe: EEH PE

 *

 * Retrieve the location code of the given PE. If the primary PE bus

 * is root bus, we will grab location code from PHB device tree node

 * or root port. Otherwise, the upstream bridge's device tree node

 * of the primary PE bus will be checked for the location code.

/**

 * eeh_pe_bus_get - Retrieve PCI bus according to the given PE

 * @pe: EEH PE

 *

 * Retrieve the PCI bus according to the given PE. Basically,

 * there're 3 types of PEs: PHB/Bus/Device. For PHB PE, the

 * primary PCI bus will be retrieved. The parent bus will be

 * returned for BUS PE. However, we don't have associated PCI

 * bus for DEVICE PE.

 The primary bus might be cached during probe time */

 Retrieve the parent PCI bus of first (top) PCI device */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Suspend support specific for power.

 *

 * Copyright (c) 2002 Pavel Machek <pavel@ucw.cz>

 * Copyright (c) 2001 Patrick Mochel <mochel@osdl.org>

/*

 *	pfn_is_nosave - check if given pfn is in the 'nosave' section

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * This program is used to generate definitions needed by

 * assembly language modules.

 *

 * We use the technique used in the OSF Mach kernel code:

 * generate asm statements containing #defines,

 * compile this file to assembler, and then extract the

 * #defines from the assembly-language output.

 CONFIG_PPC64 */

 CONFIG_ALTIVEC */

 CONFIG_VSX */

 CONFIG_PPC64 */

 CONFIG_SPE */

 CONFIG_PPC64 */

 Local pt_regs on stack for Transactional Memory funcs. */

 CONFIG_PPC_TRANSACTIONAL_MEM */

 paca */

 CONFIG_PPC_BOOK3E */

 CONFIG_PPC_BOOK3S_64 */

 CONFIG_PPC64 */

 CONFIG_PPC64 */

 RTAS */

 Interrupt register frame */

	/*

	 * Note: these symbols include _ because they overlap with special

	 * register names

 we overload MMUCR for 44x on MAS0 since they are mutually exclusive */

 About the CPU features table */

 ! CONFIG_PPC64 */

 datapage offsets for use by vdso */

 book3s */

 32-bit */

 CONFIG_KVM_BOOK3S_HV_POSSIBLE */

 CONFIG_PPC_BOOK3S_64 */

 CONFIG_PPC_BOOK3S */

 CONFIG_PPC_BOOK3S */

 CONFIG_KVM */

 SPDX-License-Identifier: GPL-2.0

/*

 * Powerpc userspace implementations of gettimeofday() and similar.

 SPDX-License-Identifier: GPL-2.0-or-later

 SPDX-License-Identifier: GPL-2.0-or-later

		/*

		 * The logic to disable single stepping should be as

		 * simple as turning off the Instruction Complete flag.

		 * And, after doing so, if all debug flags are off, turn

		 * off DBCR0(IDM) and MSR(DE) .... Torez

		/*

		 * Test to see if any of the DBCR_ACTIVE_EVENTS bits are set.

			/*

			 * All debug events were off.....

 We only support one DABR and no IABRS at the moment */

 CONFIG_HAVE_HW_BREAKPOINT */

	/* For ppc64 we support one DABR and no IABR's at the moment (ppc64).

	 *  For embedded processors we support one DAC and no IAC's at the

	 *  moment.

 The bottom 3 bits in dabr are flags */

	/* As described above, it was assumed 3 bits were passed with the data

	 *  address, but we will assume only the mode bits will be passed

	 *  as to not cause alignment restrictions for DAC-based processors.

 DAC's hold the whole address without any mode flags */

 Read or Write bits must be set */

 Set the Internal Debugging flag (IDM bit 1) for the DBCR0 register */

 Check for write and read flags and set DBCR0 accordingly */

 Make sure range is valid. */

 We need a pair of IAC regsisters */

		/* We only need one.  If possible leave a pair free in

		 * case a range is needed later

			/*

			 * Don't use iac1 if iac1-iac2 are free and either

			 * iac3 or iac4 (but not both) are free

 address range - clear slots 1 & 2 */

 used in a range */

 address range - clear slots 3 & 4 */

 Used in a range */

 Both dac1 and dac2 are part of a range */

 Part of a range */

 We don't allow range watchpoints to be used with DVC */

	/*

	 * Best effort to verify the address range.  The user/supervisor bits

	 * prevent trapping in kernel space, but let's fail on an obvious bad

	 * range.  The simple test on the mask is not fool-proof, and any

	 * exclusive range will spill over into kernel space.

		/*

		 * dac2 is a bitmask.  Don't allow a mask that makes a

		 * kernel space address from a valid dac1 value

		/*

		 * For range breakpoints, addr2 must also be a valid address

 PPC_BREAKPOINT_MODE_MASK */

 CONFIG_PPC_ADV_DEBUG_DAC_RANGE */

	/*

	 * Check for invalid flags and combinations

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Regardless of transactions, 'fp_state' holds the current running

 * value of all FPR registers and 'ckfp_state' holds the last checkpointed

 * value of all FPR registers for the current transaction.

 *

 * Userspace interface buffer layout:

 *

 * struct data {

 *	u64	fpr[32];

 *	u64	fpscr;

 * };

 copy to local buffer then write that out */

/*

 * Regardless of transactions, 'fp_state' holds the current running

 * value of all FPR registers and 'ckfp_state' holds the last checkpointed

 * value of all FPR registers for the current transaction.

 *

 * Userspace interface buffer layout:

 *

 * struct data {

 *	u64	fpr[32];

 *	u64	fpscr;

 * };

 *

 copy to local buffer then write that out */

/*

 * Currently to set and and get all the vsx state, you need to call

 * the fp and VMX calls as well.  This only get/sets the lower 32

 * 128bit VSX registers.

/*

 * Regardless of transactions, 'fp_state' holds the current running

 * value of all FPR registers and 'ckfp_state' holds the last

 * checkpointed value of all FPR registers for the current

 * transaction.

 *

 * Userspace interface buffer layout:

 *

 * struct data {

 *	u64	vsx[32];

 * };

/*

 * Regardless of transactions, 'fp_state' holds the current running

 * value of all FPR registers and 'ckfp_state' holds the last

 * checkpointed value of all FPR registers for the current

 * transaction.

 *

 * Userspace interface buffer layout:

 *

 * struct data {

 *	u64	vsx[32];

 * };

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * For get_evrregs/set_evrregs functions 'data' has the following layout:

 *

 * struct {

 *   u32 evr[32];

 *   u64 acc;

 *   u32 spefscr;

 * }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Get/set all the altivec registers vr0..vr31, vscr, vrsave, in one go.

 * The transfer totals 34 quadword.  Quadwords 0-31 contain the

 * corresponding vector registers.  Quadword 32 contains the vscr as the

 * last word (offset 12) within that quadword.  Quadword 33 contains the

 * vrsave as the first word (offset 0) within the quadword.

 *

 * This definition of the VMX state is compatible with the current PPC32

 * ptrace interface.  This allows signal handling and ptrace to use the

 * same structures.  This also simplifies the implementation of a bi-arch

 * (combined (32- and 64-bit) gdb.

/*

 * Regardless of transactions, 'vr_state' holds the current running

 * value of all the VMX registers and 'ckvr_state' holds the last

 * checkpointed value of all the VMX registers for the current

 * transaction to fall back on in case it aborts.

 *

 * Userspace interface buffer layout:

 *

 * struct data {

 *	vector128	vr[32];

 *	vector128	vscr;

 *	vector128	vrsave;

 * };

	/*

	 * Copy out only the low-order word of vrsave.

/*

 * Regardless of transactions, 'vr_state' holds the current running

 * value of all the VMX registers and 'ckvr_state' holds the last

 * checkpointed value of all the VMX registers for the current

 * transaction to fall back on in case it aborts.

 *

 * Userspace interface buffer layout:

 *

 * struct data {

 *	vector128	vr[32];

 *	vector128	vscr;

 *	vector128	vrsave;

 * };

		/*

		 * We use only the first word of vrsave.

 SPDX-License-Identifier: GPL-2.0-or-later

	/*

	 * If task is not current, it will have been flushed already to

	 * it's thread_struct during __switch_to().

	 *

	 * A reclaim flushes ALL the state or if not in TM save TM SPRs

	 * in the appropriate thread structures from live.

/**

 * tm_cgpr_active - get active number of registers in CGPR

 * @target:	The target task.

 * @regset:	The user regset structure.

 *

 * This function checks for the active number of available

 * regisers in transaction checkpointed GPR category.

/**

 * tm_cgpr_get - get CGPR registers

 * @target:	The target task.

 * @regset:	The user regset structure.

 * @to:		Destination of copy.

 *

 * This function gets transaction checkpointed GPR registers.

 *

 * When the transaction is active, 'ckpt_regs' holds all the checkpointed

 * GPR register values for the current transaction to fall back on if it

 * aborts in between. This function gets those checkpointed GPR registers.

 * The userspace interface buffer layout is as follows.

 *

 * struct data {

 *	struct pt_regs ckpt_regs;

 * };

/*

 * tm_cgpr_set - set the CGPR registers

 * @target:	The target task.

 * @regset:	The user regset structure.

 * @pos:	The buffer position.

 * @count:	Number of bytes to copy.

 * @kbuf:	Kernel buffer to copy into.

 * @ubuf:	User buffer to copy from.

 *

 * This function sets in transaction checkpointed GPR registers.

 *

 * When the transaction is active, 'ckpt_regs' holds the checkpointed

 * GPR register values for the current transaction to fall back on if it

 * aborts in between. This function sets those checkpointed GPR registers.

 * The userspace interface buffer layout is as follows.

 *

 * struct data {

 *	struct pt_regs ckpt_regs;

 * };

/**

 * tm_cfpr_active - get active number of registers in CFPR

 * @target:	The target task.

 * @regset:	The user regset structure.

 *

 * This function checks for the active number of available

 * regisers in transaction checkpointed FPR category.

/**

 * tm_cfpr_get - get CFPR registers

 * @target:	The target task.

 * @regset:	The user regset structure.

 * @to:		Destination of copy.

 *

 * This function gets in transaction checkpointed FPR registers.

 *

 * When the transaction is active 'ckfp_state' holds the checkpointed

 * values for the current transaction to fall back on if it aborts

 * in between. This function gets those checkpointed FPR registers.

 * The userspace interface buffer layout is as follows.

 *

 * struct data {

 *	u64	fpr[32];

 *	u64	fpscr;

 *};

 copy to local buffer then write that out */

/**

 * tm_cfpr_set - set CFPR registers

 * @target:	The target task.

 * @regset:	The user regset structure.

 * @pos:	The buffer position.

 * @count:	Number of bytes to copy.

 * @kbuf:	Kernel buffer to copy into.

 * @ubuf:	User buffer to copy from.

 *

 * This function sets in transaction checkpointed FPR registers.

 *

 * When the transaction is active 'ckfp_state' holds the checkpointed

 * FPR register values for the current transaction to fall back on

 * if it aborts in between. This function sets these checkpointed

 * FPR registers. The userspace interface buffer layout is as follows.

 *

 * struct data {

 *	u64	fpr[32];

 *	u64	fpscr;

 *};

 copy to local buffer then write that out */

/**

 * tm_cvmx_active - get active number of registers in CVMX

 * @target:	The target task.

 * @regset:	The user regset structure.

 *

 * This function checks for the active number of available

 * regisers in checkpointed VMX category.

/**

 * tm_cvmx_get - get CMVX registers

 * @target:	The target task.

 * @regset:	The user regset structure.

 * @to:		Destination of copy.

 *

 * This function gets in transaction checkpointed VMX registers.

 *

 * When the transaction is active 'ckvr_state' and 'ckvrsave' hold

 * the checkpointed values for the current transaction to fall

 * back on if it aborts in between. The userspace interface buffer

 * layout is as follows.

 *

 * struct data {

 *	vector128	vr[32];

 *	vector128	vscr;

 *	vector128	vrsave;

 *};

 Flush the state */

	/*

	 * Copy out only the low-order word of vrsave.

/**

 * tm_cvmx_set - set CMVX registers

 * @target:	The target task.

 * @regset:	The user regset structure.

 * @pos:	The buffer position.

 * @count:	Number of bytes to copy.

 * @kbuf:	Kernel buffer to copy into.

 * @ubuf:	User buffer to copy from.

 *

 * This function sets in transaction checkpointed VMX registers.

 *

 * When the transaction is active 'ckvr_state' and 'ckvrsave' hold

 * the checkpointed values for the current transaction to fall

 * back on if it aborts in between. The userspace interface buffer

 * layout is as follows.

 *

 * struct data {

 *	vector128	vr[32];

 *	vector128	vscr;

 *	vector128	vrsave;

 *};

		/*

		 * We use only the low-order word of vrsave.

/**

 * tm_cvsx_active - get active number of registers in CVSX

 * @target:	The target task.

 * @regset:	The user regset structure.

 *

 * This function checks for the active number of available

 * regisers in transaction checkpointed VSX category.

/**

 * tm_cvsx_get - get CVSX registers

 * @target:	The target task.

 * @regset:	The user regset structure.

 * @to:		Destination of copy.

 *

 * This function gets in transaction checkpointed VSX registers.

 *

 * When the transaction is active 'ckfp_state' holds the checkpointed

 * values for the current transaction to fall back on if it aborts

 * in between. This function gets those checkpointed VSX registers.

 * The userspace interface buffer layout is as follows.

 *

 * struct data {

 *	u64	vsx[32];

 *};

 Flush the state */

/**

 * tm_cvsx_set - set CFPR registers

 * @target:	The target task.

 * @regset:	The user regset structure.

 * @pos:	The buffer position.

 * @count:	Number of bytes to copy.

 * @kbuf:	Kernel buffer to copy into.

 * @ubuf:	User buffer to copy from.

 *

 * This function sets in transaction checkpointed VSX registers.

 *

 * When the transaction is active 'ckfp_state' holds the checkpointed

 * VSX register values for the current transaction to fall back on

 * if it aborts in between. This function sets these checkpointed

 * FPR registers. The userspace interface buffer layout is as follows.

 *

 * struct data {

 *	u64	vsx[32];

 *};

 Flush the state */

/**

 * tm_spr_active - get active number of registers in TM SPR

 * @target:	The target task.

 * @regset:	The user regset structure.

 *

 * This function checks the active number of available

 * regisers in the transactional memory SPR category.

/**

 * tm_spr_get - get the TM related SPR registers

 * @target:	The target task.

 * @regset:	The user regset structure.

 * @to:		Destination of copy.

 *

 * This function gets transactional memory related SPR registers.

 * The userspace interface buffer layout is as follows.

 *

 * struct {

 *	u64		tm_tfhar;

 *	u64		tm_texasr;

 *	u64		tm_tfiar;

 * };

 Build tests */

 Flush the states */

 TFHAR register */

 TEXASR register */

 TFIAR register */

/**

 * tm_spr_set - set the TM related SPR registers

 * @target:	The target task.

 * @regset:	The user regset structure.

 * @pos:	The buffer position.

 * @count:	Number of bytes to copy.

 * @kbuf:	Kernel buffer to copy into.

 * @ubuf:	User buffer to copy from.

 *

 * This function sets transactional memory related SPR registers.

 * The userspace interface buffer layout is as follows.

 *

 * struct {

 *	u64		tm_tfhar;

 *	u64		tm_texasr;

 *	u64		tm_tfiar;

 * };

 Build tests */

 Flush the states */

 TFHAR register */

 TEXASR register */

 TFIAR register */

/*

 *  PowerPC version

 *    Copyright (C) 1995-1996 Gary Thomas (gdt@linuxppc.org)

 *

 *  Derived from "arch/m68k/kernel/ptrace.c"

 *  Copyright (C) 1994 by Hamish Macdonald

 *  Taken from linux/kernel/ptrace.c and modified for M680x0.

 *  linux/kernel/ptrace.c is by Ross Biro 1/23/92, edited by Linus Torvalds

 *

 * Modified by Cort Dougan (cort@hq.fsmlabs.com)

 * and Paul Mackerras (paulus@samba.org).

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License.  See the file README.legal in the main directory of

 * this archive for more details.

/*

 * Called by kernel/ptrace.c when detaching..

 *

 * Make sure single step bits etc are not set.

 make sure the single step bit is not set. */

 read the word at location addr in the USER area. */

 convert to index and check */

 write the word at location addr in the USER area */

 convert to index and check */

 Get all pt_regs from the child. */

 Set all gp regs in the child. */

 Get the child FPU state (FPR0...31 + FPSCR) */

 Set the child FPU state (FPR0...31 + FPSCR) */

 Get the child spe register state. */

 Set the child spe register state. */

	/*

	 * The ABI we present to seccomp tracers is that r3 contains

	 * the syscall return value and orig_gpr3 contains the first

	 * syscall parameter. This is different to the ptrace ABI where

	 * both r3 and orig_gpr3 contain the first syscall parameter.

	/*

	 * We use the __ version here because we have already checked

	 * TIF_SECCOMP. If this fails, there is nothing left to do, we

	 * have already loaded -ENOSYS into r3, or seccomp has put

	 * something else in r3 (via SECCOMP_RET_ERRNO/TRACE).

	/*

	 * The syscall was allowed by seccomp, restore the register

	 * state to what audit expects.

	 * Note that we use orig_gpr3, which means a seccomp tracer can

	 * modify the first syscall parameter (in orig_gpr3) and also

	 * allow the syscall to proceed.

 CONFIG_SECCOMP */

/**

 * do_syscall_trace_enter() - Do syscall tracing on kernel entry.

 * @regs: the pt_regs of the task to trace (current)

 *

 * Performs various types of tracing on syscall entry. This includes seccomp,

 * ptrace, syscall tracepoints and audit.

 *

 * The pt_regs are potentially visible to userspace via ptrace, so their

 * contents is ABI.

 *

 * One or more of the tracers may modify the contents of pt_regs, in particular

 * to modify arguments or even the syscall number itself.

 *

 * It's also possible that a tracer can choose to reject the system call. In

 * that case this function will return an illegal syscall number, and will put

 * an appropriate return value in regs->r3.

 *

 * Return: the (possibly changed) syscall number.

			/*

			 * A nonzero return code from

			 * tracehook_report_syscall_entry() tells us to prevent

			 * the syscall execution, but we are not going to

			 * execute it anyway.

			 *

			 * Returning -1 will skip the syscall execution. We want

			 * to avoid clobbering any registers, so we don't goto

			 * the skip label below.

			/*

			 * The tracer decided to abort the syscall. Note that

			 * the tracer may also just change regs->gpr[0] to an

			 * invalid syscall number, that is handled below on the

			 * exit path.

 Run seccomp after ptrace; allow it to set gpr[3]. */

 Avoid trace and audit when syscall is invalid. */

 Return the possibly modified but valid syscall number */

	/*

	 * If we are aborting explicitly, or if the syscall number is

	 * now invalid, set the return value to -ENOSYS.

/*

 * Dummy function, its purpose is to break the build if struct pt_regs and

 * struct user_pt_regs don't match.

 Now check that the pt_regs offsets match the uapi #defines

	/*

	 * PT_DSCR isn't a real reg, but it's important that it doesn't overlap the

	 * real registers.

 SPDX-License-Identifier: GPL-2.0-or-later

 convert to string */

/**

 * regs_query_register_offset() - query register offset from its name

 * @name:	the name of a register

 *

 * regs_query_register_offset() returns the offset of a register in struct

 * pt_regs from its name. If the name is invalid, this returns -EINVAL;

/**

 * regs_query_register_name() - query register name from its offset

 * @offset:	the offset of a register in struct pt_regs.

 *

 * regs_query_register_name() returns the name of a register from its

 * offset in struct pt_regs. If the @offset is invalid, this returns NULL;

/*

 * does not yet catch signals sent when the child dies.

 * in exit.c or in signal.c.

/*

 * We prevent mucking around with the reserved area of trap

 * which are used internally by the kernel.

/*

 * Get contents of register REGNO in task TASK.

	/*

	 * softe copies paca->irq_soft_mask variable state. Since irq_soft_mask is

	 * no more used as a flag, lets force usr to alway see the softe value as 1

	 * which means interrupts are not soft disabled.

/*

 * Write contents of register REGNO in task TASK.

 Build tests */

 Build tests */

 Build tests */

 Build tests */

 Only the AMR can be set from userspace */

	/*

	 * UAMOR determines which bits of the AMR can be set from userspace.

	 * UAMOR value 0b11 indicates that the AMR value can be modified

	 * from userspace. If the kernel is using a specific key, we avoid

	 * userspace modifying the AMR value for that key by masking them

	 * via UAMOR 0b00.

	 *

	 * Pick the AMR values for the keys that kernel is using. This

	 * will be indicated by the ~default_uamor bits.

 CONFIG_PPC_MEM_KEYS */

/*

 * These are the regset flavors matching the CONFIG_PPC32 native set.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Regardless of transactions, 'fp_state' holds the current running

 * value of all FPR registers and 'ckfp_state' holds the last checkpointed

 * value of all FPR registers for the current transaction.

 *

 * Userspace interface buffer layout:

 *

 * struct data {

 *	u64	fpr[32];

 *	u64	fpscr;

 * };

/*

 * Regardless of transactions, 'fp_state' holds the current running

 * value of all FPR registers and 'ckfp_state' holds the last checkpointed

 * value of all FPR registers for the current transaction.

 *

 * Userspace interface buffer layout:

 *

 * struct data {

 *	u64	fpr[32];

 *	u64	fpscr;

 * };

 *

/*

 * ptrace for 32-bit processes running on a 64-bit kernel.

 *

 *  PowerPC version

 *    Copyright (C) 1995-1996 Gary Thomas (gdt@linuxppc.org)

 *

 *  Derived from "arch/m68k/kernel/ptrace.c"

 *  Copyright (C) 1994 by Hamish Macdonald

 *  Taken from linux/kernel/ptrace.c and modified for M680x0.

 *  linux/kernel/ptrace.c is by Ross Biro 1/23/92, edited by Linus Torvalds

 *

 * Modified by Cort Dougan (cort@hq.fsmlabs.com)

 * and Paul Mackerras (paulus@samba.org).

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License.  See the file COPYING in the main directory of

 * this archive for more details.

/*

 * does not yet catch signals sent when the child dies.

 * in exit.c or in signal.c.

 Macros to workout the correct index for the FPR in the thread struct */

	/*

	 * Read 4 bytes of the other process' storage

	 *  data is a pointer specifying where the user wants the

	 *	4 bytes copied into

	 *  addr is a pointer in the user's storage that contains an 8 byte

	 *	address in the other process of the 4 bytes that is to be read

	 * (this is run in a 32-bit process looking at a 64-bit process)

	 * when I and D space are separate, these will need to be fixed.

 Get the addr in the other process that we want to read */

 Read a register (specified by ADDR) out of the "user area" */

 convert to index and check */

			/*

			 * the user space code considers the floating point

			 * to be an array of unsigned int (32 bits) - the

			 * index passed in is based on this assumption.

	/*

	 * Read 4 bytes out of the other process' pt_regs area

	 *  data is a pointer specifying where the user wants the

	 *	4 bytes copied into

	 *  addr is the offset into the other process' pt_regs structure

	 *	that is to be read

	 * (this is run in a 32-bit process looking at a 64-bit process)

 Determine which register the user wants */

 Determine which part of the register the user wants */

 want the 2nd half of the register (right-most). */

 want the 1st half of the register (left-most). */

		/* Validate the input - check to see if address is on the wrong boundary

		 * or beyond the end of the user area

 get 64 bit FPR */

 register within PT_REGS struct */

	/*

	 * Write 4 bytes into the other process' storage

	 *  data is the 4 bytes that the user wants written

	 *  addr is a pointer in the user's storage that contains an

	 *	8 byte address in the other process where the 4 bytes

	 *	that is to be written

	 * (this is run in a 32-bit process looking at a 64-bit process)

	 * when I and D space are separate, these will need to be fixed.

 Get the addr in the other process that we want to write into */

 write the word at location addr in the USER area */

 convert to index and check */

			/*

			 * the user space code considers the floating point

			 * to be an array of unsigned int (32 bits) - the

			 * index passed in is based on this assumption.

	/*

	 * Write 4 bytes into the other process' pt_regs area

	 *  data is the 4 bytes that the user wants written

	 *  addr is the offset into the other process' pt_regs structure

	 *	that is to be written into

	 * (this is run in a 32-bit process looking at a 64-bit process)

 Determine which register the user wants */

		/*

		 * Validate the input - check to see if address is on the

		 * wrong boundary or beyond the end of the user area

 get 64 bit FPR ... */

 ... write the 32 bit part we want */

 We only support one DABR and no IABRS at the moment */

 Get all pt_regs from the child. */

 Set all gp regs in the child. */

 SPDX-License-Identifier: GPL-2.0-or-later

 We only support one DABR and no IABRS at the moment */

/*

 * ptrace_set_debugreg() fakes DABR and DABR is only one. So even if

 * internal hw supports more than one watchpoint, we support only one

 * watchpoint with this interface.

 CONFIG_HAVE_HW_BREAKPOINT */

	/* For ppc64 we support one DABR and no IABR's at the moment (ppc64).

	 *  For embedded processors we support one DAC and no IAC's at the

	 *  moment.

 The bottom 3 bits in dabr are flags */

	/* For processors using DABR (i.e. 970), the bottom 3 bits are flags.

	 *  It was assumed, on previous implementations, that 3 bits were

	 *  passed together with the data address, fitting the design of the

	 *  DABR register, as follows:

	 *

	 *  bit 0: Read flag

	 *  bit 1: Write flag

	 *  bit 2: Breakpoint translation

	 *

	 *  Thus, we use them here as so.

 Ensure breakpoint translation bit is set */

 Enable breakpoint */

 Create a new breakpoint request if one doesn't exist already */

 !CONFIG_HAVE_HW_BREAKPOINT */

 CONFIG_HAVE_HW_BREAKPOINT */

 CONFIG_HAVE_HW_BREAKPOINT */

	/*

	 * We only support one data breakpoint

 Create a new breakpoint request if one doesn't exist already */

 CONFIG_HAVE_HW_BREAKPOINT */

 CONFIG_HAVE_HW_BREAKPOINT */

 CONFIG_HAVE_HW_BREAKPOINT */

 CONFIG_HAVE_HW_BREAKPOINT */

 SPDX-License-Identifier: GPL-2.0

/*

 * Powerpc userspace implementations of gettimeofday() and similar.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Copyright (C) 2015 Naveen N. Rao, IBM Corporation

 SPDX-License-Identifier: GPL-2.0

/*

 * Code for replacing ftrace calls with jumps.

 *

 * Copyright (C) 2007-2008 Steven Rostedt <srostedt@redhat.com>

 *

 * Thanks goes out to P.A. Semi, Inc for supplying me with a PPC64 box.

 *

 * Added function graph tracer code, taken from x86 that was written

 * by Frederic Weisbecker, and ported to PPC by Steven Rostedt.

 *

/*

 * We generally only have a single long_branch tramp and at most 2 or 3 plt

 * tramps generated. But, we don't use the plt tramps currently. We also allot

 * 2 tramps after .text and .init.text. So, we only end up with around 3 usable

 * tramps in total. Set aside 8 just to be sure.

 if (link) set op to 'bl' else 'b' */

	/*

	 * Note:

	 * We are paranoid about modifying text, as if a bug was to happen, it

	 * could cause us to read or write to someplace that could cause harm.

	 * Carefully read and modify the code with probe_kernel_*(), and make

	 * sure what we read is what we expected it to be before modifying it.

 read the text we want to modify */

 Make sure it is what we expect it to be */

 replace the text with the new text */

/*

 * Helper functions that are the same for both PPC64 and PPC32.

 use the create_branch to verify that this offset can be branched */

 make it signed */

 read where this goes */

 Make sure that that this is still a 24bit jump */

 lets find where the pointer goes */

 This should match what was called */

 When using -mkernel_profile there is no load to jump over */

 We expect either a mflr r0, or a std r0, LRSAVE(r1) */

	/*

	 * Our original call site looks like:

	 *

	 * bl <tramp>

	 * ld r2,XX(r1)

	 *

	 * Milton Miller pointed out that we can not simply nop the branch.

	 * If a task was preempted when calling a trace function, the nops

	 * will remove the way to restore the TOC in r2 and the r2 TOC will

	 * get corrupted.

	 *

	 * Use a b +8 to jump over the load.

 b +8 */

	/*

	 * Check what is in the next instruction. We can see ld r2,40(r1), but

	 * on first pass after boot we will see mflr r0.

 CONFIG_MPROFILE_KERNEL */

 !PPC64 */

 Make sure that that this is still a 24bit jump */

 lets find where the pointer goes */

	/*

	 * On PPC32 the trampoline looks like:

	 *  0x3d, 0x80, 0x00, 0x00  lis r12,sym@ha

	 *  0x39, 0x8c, 0x00, 0x00  addi r12,r12,sym@l

	 *  0x7d, 0x89, 0x03, 0xa6  mtctr r12

	 *  0x4e, 0x80, 0x04, 0x20  bctr

 Find where the trampoline jumps to */

 verify that this is what we expect it to be */

 PPC64 */

 CONFIG_MODULES */

	/*

	 * We have the compiler generated long_branch tramps at the end

	 * and we prefer those

/*

 * If this is a compiler generated long_branch trampoline (essentially, a

 * trampoline that has a branch to _mcount()), we re-write the branch to

 * instead go to ftrace_[regs_]caller() and note down the location of this

 * trampoline.

 Is this a known long jump tramp? */

 Is this a known plt tramp? */

 New trampoline -- read where this goes */

 Is this a 24 bit branch? */

 lets find where the pointer goes */

 Let's re-write the tramp to go to ftrace_[regs_]caller */

 Read where this goes */

 Make sure that that this is still a 24bit jump */

 Let's find where the pointer goes */

 Are other trampolines reachable? */

	/*

	 * If the calling address is more that 24 bits away,

	 * then we had to use a trampoline to make the call.

	 * Otherwise just update the call site.

 within range */

	/*

	 * Out of range jumps are called from modules.

	 * We should either already have a pointer to the module

	 * or it has been passed in.

 nothing to do if mod == rec->arch.mod */

 We should not get here without modules */

 CONFIG_MODULES */

/*

 * Examine the existing instructions for __ftrace_make_call.

 * They should effectively be a NOP, and follow formal constraints,

 * depending on the ABI. Return false if they don't.

	/*

	 * We expect to see:

	 *

	 * b +8

	 * ld r2,XX(r1)

	 *

	 * The load offset is different depending on the ABI. For simplicity

	 * just mask it out when doing the compare.

 look for patched "NOP" on ppc64 with -mprofile-kernel */

 read where this goes */

 If we never set up ftrace trampoline(s), then bail */

 This should match what was called */

 Ensure branch is within 24 bits */

 !CONFIG_PPC64: */

 read where this goes */

 It should be pointing to a nop */

 If we never set up a trampoline to ftrace_caller, then bail */

 create the branch to the trampoline */

 CONFIG_PPC64 */

 CONFIG_MODULES */

 Make sure we're being asked to patch branch to a known ftrace addr */

 Make sure we have a nop */

	/*

	 * If the calling address is more that 24 bits away,

	 * then we had to use a trampoline to make the call.

	 * Otherwise just update the call site.

 within range */

	/*

	 * Out of range jumps are called from modules.

	 * Being that we are converting from nop, it had better

	 * already have a module defined.

 We should not get here without modules */

 CONFIG_MODULES */

 If we never set up ftrace trampolines, then bail */

 read where this goes */

 Make sure that that this is still a 24bit jump */

 lets find where the pointer goes */

 old_addr is not within range, so we must have used a trampoline */

 This should match what was called */

 The new target may be within range */

 within range */

 This should match what was called */

 Ensure branch is within 24 bits */

	/*

	 * If the calling address is more that 24 bits away,

	 * then we had to use a trampoline to make the call.

	 * Otherwise just update the call site.

 within range */

		/*

		 * We always patch out of range locations to go to the regs

		 * variant, so there is nothing to do here

	/*

	 * Out of range jumps are called from modules.

 We should not get here without modules */

 CONFIG_MODULES */

 Also update the regs callback function */

/*

 * Use the default ftrace_modify_all_code, but without

 * stop_machine().

 ld      r12,PACATOC(r13)	*/

 addis   r12,r12,<high>	*/

 addi    r12,r12,<low>	*/

 mtctr   r12			*/

 bctr				*/

 CONFIG_DYNAMIC_FTRACE */

/*

 * Hook the return address and push it in the stack of return addrs

 * in current thread info. Return the address we want to divert to.

 CONFIG_FUNCTION_GRAPH_TRACER */

 PPC64_ELF_ABI_v1 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright(c) 2017 IBM Corporation. All rights reserved.

/*

 * CONFIG_ARCH_HAS_PMEM_API symbols

/*

 * CONFIG_ARCH_HAS_UACCESS_FLUSHCACHE symbols

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2001 Ben. Herrenschmidt (benh@kernel.crashing.org)

 *

 *  Modifications for ppc64:

 *      Copyright (C) 2003 Dave Engebretsen <engebret@us.ibm.com>

 *

 *  Copyright 2008 Michael Ellerman, IBM Corporation.

	/*

	 * We store the offset to the code as a negative offset from

	 * the start of the alt_entry, to support the VDSO. This

	 * routine converts that back into an actual address.

 Branch within the section doesn't need translating */

 branch patched below */

 eieio + bit 6 hint */

 speculation barrier */

 See comment in do_entry_flush_fixups() RE order of patching

 speculation barrier */

 eieio + bit 6 hint */

	/*

	 * The call to the fallback entry flush, and the fallback/sync-ori exit

	 * flush can not be safely patched in/out while other CPUs are

	 * executing them. So call __do_stf_barrier_fixups() on one CPU while

	 * all other CPUs spin in the stop machine core with interrupts hard

	 * disabled.

	 *

	 * The branch to mark interrupt exits non-reentrant is enabled first,

	 * then stop_machine runs which will ensure all CPUs are out of the

	 * low level interrupt exit code before patching. After the patching,

	 * if allowed, then flip the branch to allow fast exits.

 Prevent static key update races with do_rfi_flush_fixups()

 fallthrough to fallback flush */

 speculation barrier */

 L1d flush */

 branch patched below */

 speculation barrier */

 L1d flush */

	/*

	 * If we're patching in or out the fallback flush we need to be careful about the

	 * order in which we patch instructions. That's because it's possible we could

	 * take a page fault after patching one instruction, so the sequence of

	 * instructions must be safe even in a half patched state.

	 *

	 * To make that work, when patching in the fallback flush we patch in this order:

	 *  - the mflr		(dest)

	 *  - the mtlr		(dest + 2)

	 *  - the branch	(dest + 1)

	 *

	 * That ensures the sequence is safe to execute at any point. In contrast if we

	 * patch the mtlr last, it's possible we could return from the branch and not

	 * restore LR, leading to a crash later.

	 *

	 * When patching out the fallback flush (either with nops or another flush type),

	 * we patch in this order:

	 *  - the branch	(dest + 1)

	 *  - the mtlr		(dest + 2)

	 *  - the mflr		(dest)

	 *

	 * Note we are protected by stop_machine() from other CPUs executing the code in a

	 * semi-patched state.

	/*

	 * The call to the fallback flush can not be safely patched in/out while

	 * other CPUs are executing it. So call __do_entry_flush_fixups() on one

	 * CPU while all other CPUs spin in the stop machine core with interrupts

	 * hard disabled.

 b .+16 to fallback flush */

 speculation barrier */

 L1d flush */

	/*

	 * stop_machine gets all CPUs out of the interrupt exit handler same

	 * as do_stf_barrier_fixups. do_rfi_flush_fixups patching can run

	 * without stop_machine, so this could be achieved with a broadcast

	 * IPI instead, but this matches the stf sequence.

 Prevent static key update races with do_stf_barrier_fixups()

 speculation barrier */

 CONFIG_PPC_BOOK3S_64 */

 CONFIG_PPC_BARRIER_NOSPEC */

 CONFIG_PPC_FSL_BOOK3E */

	/*

	 * Apply the CPU-specific and firmware specific fixups to kernel text

	 * (nop out sections not relevant to this CPU or this firmware).

	/*

	 * Initialise jump label. This causes all the cpu/mmu_has_feature()

	 * checks to take on their correct polarity based on the current set of

	 * CPU/MMU features.

 This must be after the text it fixes up, vmlinux.lds.S enforces that atm */

 Sanity check */

 Check we don't patch if the value matches */

 Check we do patch if the value doesn't match */

 Check we do patch if the mask doesn't match */

 Sanity check */

 Check we don't patch if the value matches */

 Check we do patch if the value doesn't match */

 Check we do patch if the mask doesn't match */

 Sanity check */

 Expect nothing to be patched, and the error returned to us */

 Check a high-bit flag */

 Sanity check */

 Check we don't patch if the value matches */

 Check we do patch if the value doesn't match */

 Check we do patch if the mask doesn't match */

 The fixups have already been done for us during boot */

 The fixups have already been done for us during boot */

 The fixups have already been done for us during boot */

 Sanity check */

 Sanity check */

 Sanity check */

 CONFIG_PPC64 */

 CONFIG_FTR_FIXUP_SELFTEST */

 SPDX-License-Identifier: GPL-2.0+

	/*

	 * Emulate 'blr'. 'regs' represents the state on entry of a predefined

	 * function in the kernel/module, captured on a kprobe. We don't need

	 * to worry about 32-bit userspace on a 64-bit kernel.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Single-step support.

 *

 * Copyright (C) 2004 Paul Mackerras <paulus@au.ibm.com>, IBM

 Bits in SRR1 that are copied from MSR */

 Bits in XER */

/*

 * Functions in ldstfp.S

/*

 * Functions in quad.S

/*

 * Emulate the truncation of 64 bit values in 32-bit mode.

/*

 * Determine whether a conditional branch instruction would branch.

 decrement counter */

 check bit from CR */

 Access overlaps the end of the user region */

/*

 * Calculate effective address for a D-form instruction

 sign-extend */

/*

 * Calculate effective address for a DS-form instruction

 sign-extend */

/*

 * Calculate effective address for a DQ-form instruction

 sign-extend */

 __powerpc64 */

/*

 * Calculate effective address for an X-form instruction

/*

 * Calculate effective address for a MLS:D-form / 8LS:D-form

 * prefixed instruction

	/*

	 * sign extend a 34 bit number

 Leave ea as is */

	/*

	 * (prefix_r && ra) is an invalid form. Should already be

	 * checked for by caller!

/*

 * Return the largest power of 2, not greater than sizeof(unsigned long),

 * such that x is a multiple of it.

 isolates rightmost bit */

/*

 * Copy from userspace to a buffer, using the largest possible

 * aligned accesses, up to sizeof(long).

/*

 * Read memory at address ea for nb bytes, return 0 for success

 * or -EFAULT if an error occurred.  N.B. nb must be 1, 2, 4 or 8.

 * If nb < sizeof(long), the result is right-justified on BE systems.

/*

 * Copy from a buffer to userspace, using the largest possible

 * aligned accesses, up to sizeof(long).

/*

 * Write memory at address ea for nb bytes, return 0 for success

 * or -EFAULT if an error occurred.  N.B. nb must be 1, 2, 4 or 8.

/*

 * These access either the real FP register or the image in the

 * thread_struct, depending on regs->msr & MSR_FP.

 lfdp */

 For Altivec/VMX, no need to worry about alignment */

 align to multiple of size */

 align to multiple of size */

 CONFIG_ALTIVEC */

 if aligned, should be atomic */

 if aligned, should be atomic */

 __powerpc64 */

 [p]lxvp[x] */

 whole vector; lxv[x] or lxvl[l] */

 scalar loads, lxvd2x, lxvdsx */

 size == 4 is the only case here */

 lxvw4x, lxvwsx */

 lxvh8x */

 lxvb16x */

 [p]stxvp[x] */

 reverse 32 bytes */

 stxv, stxvx, stxvl, stxvll */

 reverse 16 bytes */

 scalar stores, stxvd2x */

 stxvw4x */

 stxvh8x */

 stvxb16x */

 FP regs + extensions */

 FP regs + extensions */

 CONFIG_VSX */

 get SO bit */

 get SO bit */

/*

 * The size parameter is used to adjust the equivalent popcnt instruction.

 * popcntb = 8, popcntw = 32, popcntd = 64

 popcntb */

 popcntw */

 popcntd */

 CONFIG_PPC64 */

/*

 * The size parameter adjusts the equivalent prty instruction.

 * prtyw = 32, prtyd = 64

 prtyw */

prtyd */

/*

 * Elements of 32-bit rotate and mask instructions.

/*

 * Decode an instruction, and return information about it in *op

 * without changing *regs.

 * Integer arithmetic and logical instructions, branches, and barrier

 * instructions can be emulated just using the information in *op.

 *

 * Return value is 1 if the instruction can be emulated just by

 * updating *regs with the information in *op, -1 if we need the

 * GPRs but *regs doesn't contain the full register set, or 0

 * otherwise.

 bc */

 sc */

 scv */

 b */

 mcrf */

 bclr */

 bcctr */

 rfid, scary */

 isync */

 crnor */

 crandc */

 crxor */

 crnand */

 crand */

 creqv */

 crorc */

 cror */

 sync */

 lwsync */

 ptesync */

 eieio */

 paddi */

 tdi */

 twi */

		/*

		 * There are very many instructions with this primary opcode

		 * introduced in the ISA as early as v2.03. However, the ones

		 * we currently emulate were all introduced with ISA 3.0

 maddhd */

 maddhdu */

 maddld */

		/*

		 * There are other instructions from ISA 3.0 with the same

		 * primary opcode which do not have emulation support yet.

 mulli */

 subfic */

 cmpli */

 cmpi */

 addic */

 addic. */

 addi */

 addis */

 addpcis */

 d0 + d2 fields */

 d1 field */

 rlwimi */

 rlwinm */

 rlwnm */

 ori */

 oris */

 xori */

 xoris */

 andi. */

 andis. */

 rld* */

 rldicl */

 rldicr */

 rldic */

 rldimi */

 rldcl */

 rldcr */

 illegal instruction */

 isel occupies 32 minor opcodes */

 bc field */

 tw */

 td */

 mfmsr */

 mtmsr */

 mtmsrd */

 only MSR_EE and MSR_RI get changed if bit 15 set */

 mtmsrd doesn't change MSR_HV, MSR_ME or MSR_LE */

 mfcr */

 setb */

			/*

			 * 'ra' encodes the CR field number (bfa) in the top 3 bits.

			 * Since each CR field is 4 bits,

			 * we can simply mask off the bottom two bits (bfa * 4)

			 * to yield the first bit in the CR field.

 'val' stores bits of the CR field (bfa) */

 checks if the LT bit of CR field (bfa) is set */

 checks if the GT bit of CR field (bfa) is set */

 mtcrf */

 mfspr */

 mtspr */

/*

 * Compare instructions

 cmp */

 word (32-bit) compare */

 cmpl */

 word (32-bit) compare */

 cmpb */

/*

 * Arithmetic instructions

 subfc */

 mulhdu */

 addc */

 mulhwu */

 subf */

 mulhd */

 mulhw */

 neg */

 subfe */

 adde */

 subfze */

 addze */

 subfme */

 mulld */

 addme */

 mullw */

 modud */

 add */

 moduw */

 divdu */

 divwu */

 divd */

 divw */

 divde[.] */

 divdeu[.] */

 darn */

 32-bit conditioned */

 64-bit conditioned */

 64-bit raw */

 modsd */

 modsw */

/*

 * Logical instructions

 cntlzw */

 cntlzd */

 and */

 andc */

 popcntb */

 nor */

 prtyw */

 prtyd */

 bpermd */

 xor */

 xor */

 popcntw */

 orc */

 or */

 nand */

 popcntd */

 cnttzw */

 cnttzd */

 extsh */

 extsb */

 extsw */

/*

 * Shift instructions

 slw */

 srw */

 sraw */

 srawi */

 sld */

 srd */

 srad */

 sradi with sh_5 = 0 */

 sradi with sh_5 = 1 */

 extswsli with sh_5 = 0 */

 extswsli with sh_5 = 1 */

 __powerpc64__ */

/*

 * Cache instructions

 dcbst */

 dcbf */

 dcbtst */

 dcbt */

 icbi */

 dcbz */

/*

 * Loads and stores.

 lwarx */

 stwcx. */

 ldarx */

 stdcx. */

 lbarx */

 stbcx. */

 lharx */

 sthcx. */

 lqarx */

 stqcx. */

 lwzx */

 lwzux */

 lbzx */

 lbzux */

		/*

		 * Note: for the load/store vector element instructions,

		 * bits of the EA say which field of the VMX register to use.

 lvebx */

 lvehx */

 lvewx */

 lvx */

 lvxl */

 stvebx */

 stvehx */

 stvewx */

 stvx */

 stvxl */

 CONFIG_ALTIVEC */

 ldx */

 ldux */

 stdx */

 stdux */

 stwx */

 stwux */

 stbx */

 stbux */

 lhzx */

 lhzux */

 lwax */

 lwaux */

 lhax */

 lhaux */

 sthx */

 sthux */

 ldbrx */

 lswx */

 lwbrx */

 lswi */

 # bytes to load */

 lfsx */

 lfsux */

 lfdx */

 lfdux */

 stfsx */

 stfsux */

 stfdx */

 stfdux */

 lfdpx */

 lfiwax */

 lfiwzx */

 stfdpx */

 stfiwx */

 __powerpc64 */

 CONFIG_PPC_FPU */

 stdbrx */

 stswx */

 stwbrx */

 stswi */

 # bytes to store */

 lhbrx */

 sthbrx */

 lxsiwzx */

 lxsiwax */

 stxsiwx */

 lxvx */

 lxvl */

 lxvll */

 lxvdsx */

 lxvpx */

 lxvwsx */

 stxvx */

 stxvl */

 stxvll */

 stxvpx */

 lxsspx */

 lxsdx */

 stxsspx */

 stxsdx */

 lxvw4x */

 lxsibzx */

 lxvh8x */

 lxsihzx */

 lxvd2x */

 lxvb16x */

 stxvw4x */

 stxsibx */

 stxvh8x */

 stxsihx */

 stxvd2x */

 stxvb16x */

 CONFIG_VSX */

 lwz */

 lwzu */

 lbz */

 lbzu */

 stw */

 stwu */

 stb */

 stbu */

 lhz */

 lhzu */

 lha */

 lhau */

 sth */

 sthu */

 lmw */

 invalid form, ra in range to load */

 stmw */

 lfs */

 lfsu */

 lfd */

 lfdu */

 stfs */

 stfsu */

 stfd */

 stfdu */

 lq */

 lfdp, lxsd, lxssp */

 lfdp */

 reg must be even */

 lxsd */

 lxssp */

 CONFIG_VSX */

 ld[u], lwa */

 ld */

 ldu */

 lwa */

 lxvp */

 stxvp */

 stfdp, lxv, stxsd, stxssp, stxv */

 stfdp with LSB of DS field = 0 */

 stfdp with LSB of DS field = 1 */

 lxv */

 stxsd with LSB of DS field = 0 */

 stxsd with LSB of DS field = 1 */

 stxssp with LSB of DS field = 0 */

 stxssp with LSB of DS field = 1 */

 stxv */

 CONFIG_VSX */

 std[u] */

 std */

 stdu */

 stq */

 Prefixed instructions */

 Type 00  Eight-Byte Load/Store */

 plwa */

 plxsd */

 plxssp */

 pstxsd */

 pstxssp */

 plxv1 */

 plxv0 */

 pstxv1 */

 pstxv0 */

 CONFIG_VSX */

 plq */

 pld */

 plxvp */

 CONFIG_VSX */

 pstq */

 pstd */

 pstxvp */

 CONFIG_VSX */

 Type 01 Eight-Byte Register-to-Register */

 Type 10 Modified Load/Store */

 plwz */

 plbz */

 pstw */

 pstb */

 plhz */

 plha */

 psth */

 plfs */

 plfd */

 pstfs */

 pstfd */

 Type 11 Modified Register-to-Register */

 __powerpc64__ */

 CONFIG_VSX */

/*

 * For PPC32 we always use stwu with r1 to change the stack pointer.

 * So this emulated store may corrupt the exception frame, now we

 * have to provide the exception frame trampoline, which is pushed

 * below the kprobed function stack. So we only update gpr[1] but

 * don't emulate the real store operation. We will do real store

 * operation safely in exception return code by checking this flag.

	/*

	 * Check if we already set since that means we'll

	 * lose the previous value.

/*

 * Emulate an instruction that can be executed just by updating

 * fields in *regs.

/*

 * Emulate a previously-analysed load or store instruction.

 * Return values are:

 * 0 = instruction emulated successfully

 * -EFAULT = address out of range or access faulted (regs->dar

 *	     contains the faulting address)

 * -EACCES = misaligned access, instruction requires alignment

 * -EINVAL = unknown operation in *op

 can't handle misaligned */

 can't handle misaligned */

		/*

		 * If the instruction is in userspace, we can emulate it even

		 * if the VMX state is not live, because we have the state

		 * stored in the thread_struct.  If the instruction is in

		 * the kernel, we must not touch the state in the thread_struct.

		/*

		 * Some VSX instructions check the MSR_VEC bit rather than MSR_VSX

		 * when the target of the instruction is a vector register.

 reg number wraps from 31 to 0 for lsw[ix] */

		/*

		 * Some VSX instructions check the MSR_VEC bit rather than MSR_VSX

		 * when the target of the instruction is a vector register.

 reg number wraps from 31 to 0 for stsw[ix] */

/*

 * Emulate instructions that cause a transfer of control,

 * loads and stores, and a few other instructions.

 * Returns 1 if the step was emulated, 0 if not,

 * or -1 if the instruction is one that should not be stepped,

 * such as an rfid, or a mtmsrd that would clear MSR_RI.

 can't step mtmsr[d] that would clear MSR_RI */

 here op.val is the mask of bits to change */

 sc */

		/*

		 * N.B. this uses knowledge about how the syscall

		 * entry code works.  If that is changed, this will

		 * need to be changed also.

 scv 0 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Simple sanity tests for instruction emulation infrastructure.

 *

 * Copyright IBM Corp. 2016

 ld r5, 0(r3) */

 pld r5, 0(r3), 0 */

 lwz r5, 0(r3) */

 plwz r5, 0(r3), 0 */

 lwzx r5, r3, r4 */

 std r5, 0(r3) */

 pstd r5, 0(r3), 0 */

 eq bit of CR0 */

** ldarx ***/

 ldarx r5, r3, r4, 0 */

	/*

	 * Don't touch 'a' here. Touching 'a' can do Load/store

	 * of 'a' which result in failure of subsequent stdcx.

	 * Instead, use hardcoded value for comparison.

** stdcx. ***/

 stdcx. r5, r3, r4 */

	/*

	 * Two possible scenarios that indicates successful emulation

	 * of stdcx. :

	 *  1. Reservation is active and store is performed. In this

	 *     case cr0.eq bit will be set to 1.

	 *  2. Reservation is not active and store is not performed.

	 *     In this case cr0.eq bit will be set to 0.

** lfsx ***/

 lfsx frt10, r3, r4 */

** stfsx ***/

 stfsx frs10, r3, r4 */

** plfs ***/

 plfs frt10, 0(r3), 0  */

** pstfs ***/

 pstfs frs10, 0(r3), 0 */

** lfdx ***/

 lfdx frt10, r3, r4 */

** stfdx ***/

 stfdx frs10, r3, r4 */

** plfd ***/

 plfd frt10, 0(r3), 0 */

** pstfd ***/

 pstfd frs10, 0(r3), 0 */

 CONFIG_PPC_FPU */

** lvx ***/

 lvx vrt10, r3, r4 */

** stvx ***/

 stvx vrs10, r3, r4 */

 CONFIG_ALTIVEC */

** lxvd2x ***/

 lxvd2x vsr39, r3, r4 */

** stxvd2x ***/

 stxvd2x vsr39, r3, r4 */

 CONFIG_VSX */

** lxvp ***/

	/*

	 * lxvp XTp,DQ(RA)

	 * XTp = 32xTX + 2xTp

	 * let TX=1 Tp=1 RA=4 DQ=0

** stxvp ***/

	/*

	 * stxvp XSp,DQ(RA)

	 * XSp = 32xSX + 2xSp

	 * let SX=1 Sp=1 RA=4 DQ=0

 CONFIG_VSX */

** lxvpx ***/

	/*

	 * lxvpx XTp,RA,RB

	 * XTp = 32xTX + 2xTp

	 * let TX=1 Tp=1 RA=3 RB=4

** stxvpx ***/

	/*

	 * stxvpx XSp,RA,RB

	 * XSp = 32xSX + 2xSp

	 * let SX=1 Sp=1 RA=3 RB=4

 CONFIG_VSX */

** plxvp ***/

	/*

	 * plxvp XTp,D(RA),R

	 * XTp = 32xTX + 2xTp

	 * let RA=3 R=0 D=d0||d1=0 R=0 Tp=1 TX=1

** pstxvp ***/

	/*

	 * pstxvp XSp,D(RA),R

	 * XSp = 32xSX + 2xSp

	 * let RA=3 D=d0||d1=0 R=0 Sp=1 SX=1

 CONFIG_VSX */

 Extreme values for si0||si1 (the MLS:D-form 34 bit immediate field) */

 Invalid instruction form with R = 1 and RA != 0 */

 This is not a return frame regs */

 Patch the NOP with the actual instruction */

			/*

			 * Set a compatible MSR value explicitly to ensure

			 * that XER and CR bits are updated appropriately

 skip executing instruction */

 Verify GPR values */

 Verify LR value */

 Verify XER value */

 Verify CR value */

 Given an address, look for it in the soft mask table */

 Given an address, look for it in the kernel exception table */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Altivec XOR operations

 *

 * Copyright 2017 IBM Corp.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Spin and read/write lock operations.

 *

 * Copyright (C) 2001-2004 Paul Mackerras <paulus@au.ibm.com>, IBM

 * Copyright (C) 2001 Anton Blanchard <anton@au.ibm.com>, IBM

 * Copyright (C) 2002 Dave Engebretsen <engebret@us.ibm.com>, IBM

 *   Rework to support virtual processors

 waiting for a spinlock... */

 virtual cpu is currently running */

 something has changed */

/*

 * Waiting for a read lock or a write lock on a rwlock...

 * This turns out to be the same for read and write locks, since

 * we only know the holder if it is write-locked.

 no write lock at present */

 virtual cpu is currently running */

 something has changed */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 * Copyright (C) IBM Corporation, 2011

 *

 * Authors: Sukadev Bhattiprolu <sukadev@linux.vnet.ibm.com>

 *          Anton Blanchard <anton@au.ibm.com>

	/*

	 * We need to disable page faults as they can call schedule and

	 * thus make us lose the VMX context. So on page faults, we just

	 * fail which will cause a fallback to the normal non-vmx copy.

/*

 * This function must return 0 because we tail call optimise when calling

 * from __copy_tofrom_user_power7 which returns 0 on success.

/*

 * All calls to this function will be optimised into tail calls. We are

 * passed a pointer to the destination which we return as required by a

 * memcpy implementation.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 * Copyright (C) IBM Corporation, 2012

 *

 * Author: Anton Blanchard <anton@au.ibm.com>

/*

 * Sparse (as at v0.5.0) gets very, very confused by this file.

 * Make it a bit simpler for it.

/*

 * A Remote Heap.  Remote means that we don't touch the memory that the

 * heap points to. Normal heap implementations use the memory they manage

 * to place their list. We cannot do that because the memory we manage may

 * have special properties, for example it is uncachable or of different

 * endianess.

 *

 * Author: Pantelis Antoniou <panto@intracom.gr>

 *

 * 2004 (c) INTRACOM S.A. Greece. This file is licensed under

 * the terms of the GNU General Public License version 2. This program

 * is licensed "as is" without any warranty of any kind, whether express

 * or implied.

/*

 * Fixup a list_head, needed when copying lists.  If the pointers fall

 * between s and e, apply the delta.  This assumes that

 * sizeof(struct list_head *) == sizeof(unsigned long *).

 Grow the allocated blocks */

 copy old block area */

 and fixup list pointers */

 free the old allocated memory */

 add all new blocks to the free list */

/*

 * Assure at least the required amount of empty slots.  If this function

 * causes a grow in the block area then all pointers kept to the block

 * area are invalid!

 This function is not meant to be used to grow uncontrollably */

 Enough space */

 Next 16 sized block */

 If no more free slots, and failure to extend. */

 XXX: You should have called assure_empty before */

 Get empty slot to use */

 Initialize */

 We assume that they are aligned properly */

	/* Find the blocks immediately before and after the given one

 If both are not null, break now */

 Now check if they are really adjacent */

 No coalescing; list insert and return */

 We don't need it anymore */

 Grow the before block */

 Grow the after block backwards */

 Grow the before block, and release the after block */

 Find the block immediately before the given one (if any) */

/*

 * Create a remote heap dynamically.  Note that no memory for the blocks

 * are allocated.  It will upon the first allocation

 Alignment must be a power of two */

 Initially everything as empty */

/*

 * Destroy a dynamically created remote heap.  Deallocate only if the areas

 * are not static

/*

 * Initialize in place a remote heap info block.  This is needed to support

 * operation very early in the startup of the kernel, when it is not yet safe

 * to call kmalloc.

 Alignment must be a power of two */

 Initially everything as empty */

 Add all new blocks to the free list */

 Attach a free memory region, coalesces regions if adjacent */

 The region must be aligned */

 Round start up */

 Round end down */

 Take final values */

 Grow the blocks, if needed */

 Detatch given address range, splits free block if needed. */

 Validate size */

 The region must be aligned */

 Round start up */

 Round end down */

 The range must lie entirely inside one free block */

 Perfect fit */

 Delete from free list, release slot */

 blk still in free list, with updated start and/or size */

 The front free fragment */

 the back free fragment */

/* Allocate a block of memory at the specified alignment.  The value returned

 * is an offset into the buffer initialized by rh_init(), or a negative number

 * if there is an error.

 Validate size, and alignment must be power of two */

 Align to configured alignment */

 Just fits */

 Move from free list to taken list */

 Fragment caused, split if needed */

 Create block for fragment in the beginning */

 add before the blk */

		/* blk still in free list, with updated start and size

 No fragment in the end, remove blk */

/* Allocate a block of memory at the default alignment.  The value returned is

 * an offset into the buffer initialized by rh_init(), or a negative number if

 * there is an error.

/* Allocate a block of memory at the given offset, rounded up to the default

 * alignment.  The value returned is an offset into the buffer initialized by

 * rh_init(), or a negative number if there is an error.

 Validate size */

 The region must be aligned */

 Round start up */

 Round end down */

 The range must lie entirely inside one free block */

 Perfect fit */

 Move from free list to taken list */

 blk still in free list, with updated start and/or size */

 The front free fragment */

 The back free fragment */

/* Deallocate the memory previously allocated by one of the rh_alloc functions.

 * The return value is the size of the deallocated block, or a negative number

 * if there is an error.

 Linear search for block */

 Remove from taken list */

 Get size of freed block */

 Linear search for block */

 Linear search for block */

 XXX maximum 32 blocks */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 * Copyright (C) IBM Corporation, 2010

 *

 * Author: Anton Blanchard <anton@au.ibm.com>

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright 2008 Michael Ellerman, IBM Corporation.

/*

 * Although BUG_ON() is rude, in this case it should only happen if ENOMEM, and

 * we judge it as being preferable to a kernel that will crash later when

 * someone tries to use patch_instruction().

/*

 * This can be called for kernel text or a module.

	/*

	 * In hash, pte_clear flushes the tlb, in radix, we have to

	/*

	 * During early early boot patch_instruction is called

	 * when text_poke_area is not ready, but we still need

	 * to allow patching. We just do the plain old patching

 !CONFIG_STRICT_KERNEL_RWX */

 CONFIG_STRICT_KERNEL_RWX */

 Make sure we aren't patching a freed init section */

	/*

	 * Powerpc branch instruction is :

	 *

	 *  0         6                 30   31

	 *  +---------+----------------+---+---+

	 *  | opcode  |     LI         |AA |LK |

	 *  +---------+----------------+---+---+

	 *  Where AA = 0 and LK = 0

	 *

	 * LI is a signed 24 bits integer. The real branch offset is computed

	 * by: imm32 = SignExtend(LI:'0b00', 32);

	 *

	 * So the maximum forward branch should be:

	 *   (0x007fffff << 2) = 0x01fffffc =  0x1fffffc

	 * The maximum backward branch should be:

	 *   (0xff800000 << 2) = 0xfe000000 = -0x2000000

/*

 * Helper to check if a given instruction is a conditional branch

 * Derived from the conditional checks in analyse_instr()

 bc, bca, bcl, bcla */

 bclr, bclrl */

 bcctr, bcctrl */

 bctar, bctarl */

 Check we can represent the target in the instruction format */

 Mask out the flags and target, so they don't step on each other. */

 Check we can represent the target in the instruction format */

 Mask out the flags and target, so they don't step on each other. */

 If the top bit of the immediate value is set this is negative */

 If the top bit of the immediate value is set this is negative */

	/* Our exceptions vectors start with a NOP and -then- a branch

	 * to deal with single stepping from userspace which stops on

	 * the second instruction. Thus we need to patch the second

	 * instruction of the exception, not the first one

 The simplest case, branch to self, no flags */

 All bits of target set, and flags */

 High bit of opcode set, which is wrong */

 Middle bits of opcode set, which is wrong */

 Simplest case, branch to self with link */

 All bits of targets set */

 Some bits of targets set */

 Must be a valid branch to start with */

 Absolute branch to 0x100 */

 Absolute branch to 0x420fc */

 Maximum positive relative branch, + 20MB - 4B */

 Smallest negative relative branch, - 4B */

 Largest negative relative branch, - 32 MB */

 Branch to self, with link */

 Branch to self - 0x100, with link */

 Branch to self + 0x100, no link */

 Maximum relative negative offset, - 32 MB */

 Out of range relative negative offset, - 32 MB + 4*/

 Out of range relative positive offset, + 32 MB */

 Unaligned target */

 Check flags are masked correctly */

 Check we can create a function call */

 The simplest case, branch to self, no flags */

 All bits of target set, and flags */

 High bit of opcode set, which is wrong */

 Middle bits of opcode set, which is wrong */

 Absolute conditional branch to 0x100 */

 Absolute conditional branch to 0x20fc */

 Maximum positive relative conditional branch, + 32 KB - 4B */

 Smallest negative relative conditional branch, - 4B */

 Largest negative relative conditional branch, - 32 KB */

 All condition code bits set & link */

 Branch to self */

 Branch to self - 0x100 */

 Branch to self + 0x100 */

 Maximum relative negative offset, - 32 KB */

 Out of range relative negative offset, - 32 KB + 4*/

 Out of range relative positive offset, + 32 KB */

 Unaligned target */

 Check flags are masked correctly */

 Simple case, branch to self moved a little */

 Maximum negative case, move b . to addr + 32 MB */

 Maximum positive case, move x to x - 32 MB + 4 */

 Jump to x + 16 MB moved to x + 20 MB */

 Jump to x + 16 MB moved to x - 16 MB + 4 */

 Conditional branch tests */

 Simple case, branch to self moved a little */

 Maximum negative case, move b . to addr + 32 KB */

 Maximum positive case, move x to x - 32 KB + 4 */

 Jump to x + 12 KB moved to x + 20 KB */

 Jump to x + 8 KB moved to x - 8 KB + 4 */

 Free the buffer we were using */

 CONFIG_CODE_PATCHING_SELFTEST */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ULI M1575 setup code - specific to Freescale boards

 *

 * Copyright 2007 Freescale Semiconductor Inc.

 PIRQA */

 PIRQB */

 PIRQC */

 PIRQD */

 PIRQE */

 PIRQF */

 PIRQG */

 PIRQH */

 Bridge */

 read/write lock */

 set as P2P bridge */

 restore lock */

	/*

	 * ULI1575 interrupts route setup

 ULI1575 IRQ mapping conf register maps PIRQx to IRQn */

 USB 1.1 OHCI controller 1: dev 28, func 0 - IRQ12 */

 USB 1.1 OHCI controller 2: dev 28, func 1 - IRQ9 */

 USB 1.1 OHCI controller 3: dev 28, func 2 - IRQ10 */

 Lan controller: dev 27, func 0 - IRQ6 */

 AC97 Audio controller: dev 29, func 0 - IRQ6 */

 Modem controller: dev 29, func 1 - IRQ6 */

 HD Audio controller: dev 29, func 2 - IRQ6 */

 SATA controller: dev 31, func 1 - IRQ5 */

 SMB interrupt: dev 30, func 1 - IRQ7 */

 PMU ACPI SCI interrupt: dev 30, func 2 - IRQ7 */

 USB 2.0 controller: dev 28, func 3 */

	/* Primary PATA IDE IRQ: 14

	 * Secondary PATA IDE IRQ: 15

	/* Set i8259 interrupt trigger

	 * IRQ 3:  Level

	 * IRQ 4:  Level

	 * IRQ 5:  Level

	 * IRQ 6:  Level

	 * IRQ 7:  Level

	 * IRQ 9:  Level

	 * IRQ 10: Level

	 * IRQ 11: Level

	 * IRQ 12: Level

	 * IRQ 14: Edge

	 * IRQ 15: Edge

 setup RTC */

 ensure month, date, and week alarm fields are ignored */

 SATA */

 read/write lock */

 restore lock */

 disable emulated PATA mode enabled */

 PATA */

 Enable Native IRQ 14/15 */

 We have to do a dummy read on the P2P for the RTC to work, WTF */

 Disable INTx */

 Enable sideband interrupt */

/*

 * Since 8259PIC was disabled on the board, the IDE device can not

 * use the legacy IRQ, we need to let the IDE device work under

 * native mode and use the interrupt line like other PCI devices.

 * IRQ14 is a sideband interrupt from IDE device to CPU and we use this

 * as the interrupt for IDE device.

/*

 * SATA interrupt pin bug fix

 * There's a chip bug for 5288, The interrupt pin should be 2,

 * not the read only value 1, So it use INTB#, not INTA# which

 * actually used by the IDE device 5229.

 * As of this bug, during the PCI initialization, 5288 read the

 * irq of IDE device from the device tree, this function fix this

 * bug by re-assigning a correct irq to 5288.

 *

 exclude Modem controller */

 exclude HD Audio controller */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Generic PowerPC 44x platform support

 *

 * Copyright 2008 IBM Corporation

 *

 * This implements simple platform support for PowerPC 44x chips.  This is

 * mostly used for eval boards or other simple and "generic" 44x boards.  If

 * your board has custom functions or hardware, then you will likely want to

 * implement your own board.c file to accommodate it.

/* This is the list of boards that can be supported by this simple

 * platform code.  This does _not_ mean the boards are compatible,

 * as they most certainly are not from a device tree perspective.

 * However, their differences are handled by the device tree and the

 * drivers and therefore they don't need custom board support files.

 *

 * Again, if your board needs to do things differently then create a

 * board.c file for it rather than adding it to this list.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PIKA Warp(tm) board specific routines

 *

 * Copyright (c) 2008-2009 PIKA Technologies

 *   Sean MacLennan <smaclennan@pikatech.com>

 Sighhhh... POST information is in the sd area. */

 Run through the shutdown list. */

 Not reached */

	/* Do this before enabling critical temp interrupt since we

	 * may immediately interrupt.

 These registers are in 1 degree increments. */

 Thigh */

 Tlow */

 Must get post info before thread starts. */

 !CONFIG_SENSORS_AD7414 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Ebony board specific routines

 *

 * Matt Porter <mporter@kernel.crashing.org>

 * Copyright 2002-2005 MontaVista Software Inc.

 *

 * Eugene Surovegin <eugene.surovegin@zultys.com> or <ebs@ebshome.net>

 * Copyright (c) 2003-2005 Zultys Technologies

 *

 * Rewritten and ported to the merged powerpc tree:

 * Copyright 2007 David Gibson <dwg@au1.ibm.com>, IBM Corporation.

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerPC 476FPE board specific routines

 *

 * Copyright © 2013 Tony Breeds IBM Corporation

 * Copyright © 2013 Alistair Popple IBM Corporation

 *

 * Based on earlier code:

 *    Matt Porter <mporter@kernel.crashing.org>

 *    Copyright 2002-2005 MontaVista Software Inc.

 *

 *    Eugene Surovegin <eugene.surovegin@zultys.com> or <ebs@ebshome.net>

 *    Copyright (c) 2003-2005 Zultys Technologies

 *

 *    Rewritten and ported to the merged powerpc tree:

 *    Copyright 2007 David Gibson <dwg@au1.ibm.com>, IBM Corporation.

 *    Copyright © 2011 David Kliekamp IBM Corporation

/* The EEPROM is missing and the default values are bogus.  This forces USB in

/* Akebono has an AVR microcontroller attached to the I2C bus

 AVR I2C Commands */

 Flags for the power control I2C commands */

 Request the AVR to reset the system */

 Wait for system to be reset */

 Find top level interrupt controller */

 Check type and do appropriate initialization */

		/* The MPIC driver will get everything it needs from the

		 * device-tree, just pass 0 to all arguments

	/* Assume spin table. We could test for the enable-method in

	 * the device-tree but currently there's little point as it's

	 * our only supported method

	/* Assume it's mapped as part of the linear mapping. This is a bit

	 * fishy but will work fine for now

	 *

	 * XXX: Is there any reason to assume differently?

 CONFIG_SMP */

 CONFIG_SMP */

	/* No need to check the DMA config as we /know/ our windows are all of

 Use USB controller should have been hardware swizzled but it wasn't :( */

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2008 IBM Corp. 

 *

 * Based on arch/powerpc/platforms/pasemi/idle.c: 

 * Copyright (C) 2006-2007 PA Semi, Inc

 *

 * Added by: Jerone Young <jyoung5@us.ibm.com>

 set wait state MSR */

 return to initial state */

		/* If we are not setting spin mode 

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * FSP-2 board specific routines

 *

 * Based on earlier code:

 *    Matt Porter <mporter@kernel.crashing.org>

 *    Copyright 2002-2005 MontaVista Software Inc.

 *

 *    Eugene Surovegin <eugene.surovegin@zultys.com> or <ebs@ebshome.net>

 *    Copyright (c) 2003-2005 Zultys Technologies

 *

 *    Rewritten and ported to the merged powerpc tree:

 *    Copyright 2007 David Gibson <dwg@au1.ibm.com>, IBM Corporation.

 Clear BC_ERR and mask snoopable request plb errors. */

	/* TVSENSE reset is blocked (clock gated) by the POR default of the TVS

	 * sleep config bit. As a consequence, TVSENSE will provide erratic

	 * sensor values, which may result in spurious (parity) errors

	 * recorded in the CMU FIR and leading to erroneous interrupt requests

	 * once the CMU interrupt is unmasked.

 1. set TVS1[UNDOZE] */

 2. clear FIR[TVS] and FIR[TVSPAR] */

 L2 machine checks */

 L2 interrupts */

	/*

	 * At a global level, enable all L2 machine checks and interrupts

	 * reported by the L2 subsystems, except for the external machine check

	 * input (UIC0.1).

 Enable FSP-2 configuration logic parity errors */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PPC476 board specific routines

 *

 * Copyright 2010 Torez Smith, IBM Corporation.

 *

 * Based on earlier code:

 *    Matt Porter <mporter@kernel.crashing.org>

 *    Copyright 2002-2005 MontaVista Software Inc.

 *

 *    Eugene Surovegin <eugene.surovegin@zultys.com> or <ebs@ebshome.net>

 *    Copyright (c) 2003-2005 Zultys Technologies

 *

 *    Rewritten and ported to the merged powerpc tree:

 *    Copyright 2007 David Gibson <dwg@au1.ibm.com>, IBM Corporation.

 We can have either UICs or MPICs */

 Find top level interrupt controller */

 Check type and do appropriate initialization */

		/* The MPIC driver will get everything it needs from the

		 * device-tree, just pass 0 to all arguments

	/* Assume spin table. We could test for the enable-method in

	 * the device-tree but currently there's little point as it's

	 * our only supported method

	/* Assume it's mapped as part of the linear mapping. This is a bit

	 * fishy but will work fine for now

 CONFIG_SMP */

 CONFIG_SMP */

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 Clear MCSR */

 Clear MCSR */

 CONFIG_PPC_47x */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Sam440ep board specific routines based off bamboo.c code

 * original copyrights below

 *

 * Wade Farnsworth <wfarnsworth@mvista.com>

 * Copyright 2004 MontaVista Software Inc.

 *

 * Rewritten and ported to the merged powerpc tree:

 * Josh Boyer <jwboyer@linux.vnet.ibm.com>

 * Copyright 2007 IBM Corporation

 *

 * Modified from bamboo.c for sam440ep:

 * Copyright 2008 Giuseppe Coviello <gicoviello@gmail.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * This contain platform specific code for APM PPC460EX based Canyonlands

 * board.

 *

 * Copyright (c) 2010, Applied Micro Circuits Corporation

 * Author: Rupjyoti Sarmah <rsarmah@apm.com>

 Using this code only for the Canyonlands board.  */

 USB PHY fixup code on Canyonlands kit. */

 Disable USB, through the BCSR7 bits */

 Wait for a while after reset */

 Enable USB here */

	/*

	 * Configure multiplexed gpio16 and gpio19 as alternate1 output

	 * source after USB reset. In this configuration gpio16 will be

	 * USB2HStop and gpio19 will be USB2DStop. For more details refer to

	 * table 34-7 of PPC460EX user manual.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * AmigaOne platform setup

 *

 * Copyright 2008 Gerhard Pircher (gerhard_pircher@gmx.net)

 *

 *   Based on original amigaone_setup.c source code

 * Copyright 2003 by Hans-Joerg Frieden and Thomas Frieden

 Interpret the "ranges" property */

 This also maps the I/O region and sets isa_io/mem_base */

 Lookup PCI host bridges. */

 Search for ISA interrupt controller. */

 Look for interrupt acknowledge address in the PCI root node. */

 Flush and disable caches. */

 Set SRR0 to the reset vector and turn on MSR_IP. */

 Do an rfi to jump back to firmware. */

 Not reached. */

		/*

		 * Coherent memory access cause complete system lockup! Thus

		 * disable this CPU feature, even if the CPU needs it.

/*

 * Microwatt FPGA-based SoC platform setup code.

 *

 * Copyright 2020 Paul Mackerras (paulus@ozlabs.org), IBM Corp.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Derived from arch/powerpc/platforms/powernv/rng.c, which is:

 * Copyright 2013, Michael Ellerman, IBM Corporation.

 Using DARN with L=1 - 64-bit conditioned random number */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  c 2001 PPC 64 Team, IBM Corp

 *

 * /dev/nvram driver for PPC

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 1995  Linus Torvalds

 *  Adapted from 'alpha' version by Gary Thomas

 *  Modified by Cort Dougan (cort@cs.nmt.edu)

/*

 * bootup setup stuff..

 Used for doing CHRP event-scans */

 To be replaced by RTAS when available */

 longtrail (goldengate) stuff */

 VLSI VAS96011/12 `Golden Gate 2' */

 Memory banks */

 L2 cache */

/*

 *  Fixes for the National Semiconductor PC78308VUL SuperI/O

 *

 *  Some versions of Open Firmware incorrectly initialize the IRQ settings

 *  for keyboard and mouse

 select logical device */

 logical device 0 (KBC/Keyboard) */

 select logical device 1 (KBC/Mouse) */

 On Pegasos, enable the l2 cache if needed, as the OF forgets it */

 Enable L2 cache if needed */

/*

 * Per default, input/output-device points to the keyboard/screen

 * If no card is installed, the built-in serial port is used as a fallback.

 * But unfortunately, the firmware does not connect /chosen/{stdin,stdout}

 * the the built-in serial node. Instead, a /failsafe node is created.

 find the boot console from /chosen/stdout */

 this is a Pegasos2 */

	/*

	 * The 9pin connector is either /failsafe

	 * or /pci@80000000/isa@C/serial@i2F8

	 * The optional graphics card has also type 'serial' in VGA mode.

 init to some ~sane value until calibrate_delay() runs */

 Map the SPOR register on briq and change the restart hook */

 Let's assume it is an IBM chrp if all else fails */

 use RTAS time-of-day routines if available */

 On pegasos, enable the L2 cache if not already done by OF */

	/*

	 *  Fix the Super I/O configuration

	/*

	 * Print the banner, then scroll down so boot progress

	 * can be printed.  -- Cort

/*

 * Finds the open-pic node and sets up the mpic driver.

 assume 32-bit */

 non-distributed mpic */

	/*

	 * The first pair of cells in interrupt-ranges refers to the

	 * IDU; subsequent pairs refer to the ISUs.

 Look for cascade */

	/* Ok, 8259 wasn't found. We need to handle the case where

	 * we have a pegasos that claims to be chrp but doesn't have

	 * a proper interrupt tree

	/* Look for intack. In a perfect world, we would look for it on

	 * the ISA bus that holds the 8259 but heh... Works that way. If

	 * we ever see a problem, we can try to re-use the pSeries code here.

	 * Also, Pegasos-type platforms don't have a proper node to start

	 * from anyway

	/* Pegasos has no MPIC, those ops would make it crash. It might be an

	 * option to move setting them to after we probe the PIC though

 CONFIG_SMP */

	/* see if there is a keyboard in the device tree

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 1991, 1992, 1995  Linus Torvalds

 *

 * Adapted for PowerPC (PReP) by Gary Thomas

 * Modified by Cort Dougan (cort@cs.nmt.edu).

 * Copied and modified from arch/i386/kernel/time.c

 *

/*

 * Set the hardware clock. -- Cort

 tell the clock it's being set */

 stop and reset prescaler */

	/* The following flags have to be released exactly in this order,

	 * otherwise the DS12887 (popular MC146818A clone with integrated

	 * battery and quartz) will not reset the oscillator and will not

	 * update precisely 500 ms later. You won't find this mentioned in

	 * the Dallas Semiconductor data sheets, but who believes data

	 * sheets anyway ...                           -- Markus Kuhn

 SPDX-License-Identifier: GPL-2.0

/*

 * CHRP pci routines.

 LongTrail */

/*

 * The VLSI Golden Gate II has only 512K of PCI configuration space, so we

 * limit the bus number to 3 bits

	/*

	 * Note: the caller has already checked that off is

	 * suitably aligned and that len is 1, 2 or 4.

	/*

	 * Note: the caller has already checked that off is

	 * suitably aligned and that len is 1, 2 or 4.

/*

 * Access functions for PCI config space using RTAS calls.

 Clear the magic go-slow bit */

 Marvell Discovery II based Pegasos 2 */

 keep the reference to the root node */

	/*

	 * The PCI host bridge nodes on some machines don't have

	 * properties to adequately identify them, so we have to

	 * look at what sort of machine this is as well.

 The GG2 bridge on the LongTrail doesn't have an address */

		/* check the first bridge for a property that we can

	/*

	 *  "Temporary" fixes for PCI devices.

	 *  -- Geert

 Mac I/O */

 SL82C105 IDE Control/Status Register */

/* Fixup for Winbond ATA quirk, required for briq mostly because the

 * 8259 is configured for level sensitive IRQ 14 and so wants the

 * ATA controller to be set to fully native mode or bad things

 * will happen.

 If non-briq machines need that fixup too, please speak up */

 Enable SL82C105 PCI native IDE mode */

 Disable SL82C105 second port */

 Clear IO BARs, they will be reassigned */

/* Pegasos2 firmware version 20040810 configures the built-in IDE controller

 * in legacy mode, but sets the PCI registers to PCI native mode.

 * The chip can only operate in legacy mode, so force the PCI class into legacy

 * mode as well. The same fixup must be done to the class-code property in

 * the IDE node /pci@80000000/ide@C,1

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 2005 Sven Luther <sl@bplan-gmbh.de>

 *  Thanks to :

 *	Dale Farnsworth <dale@farnsworth.org>

 *	Mark A. Greer <mgreer@mvista.com>

 *	Nicolas DET <nd@bplan-gmbh.de>

 *	Benjamin Herrenschmidt <benh@kernel.crashing.org>

 *  And anyone else who helped me on this.

/*

 * The orion mdio driver only covers shared + 0x4 up to shared + 0x84 - 1

**********/

**********/

**********/

**********/

 SPDX-License-Identifier: GPL-2.0

/*

 * Smp support for CHRP machines.

 *

 * Written by Cort Dougan (cort@cs.nmt.edu) borrowing a great

 * deal of code from the sparc and intel versions.

 *

 * Copyright (C) 1999 Cort Dougan <cort@cs.nmt.edu>

 *

 CHRP with openpic */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Support for the interrupt controllers found on Power Macintosh,

 *  currently Apple's "Grand Central" interrupt controller in all

 *  it's incarnations. OpenPIC support used on newer machines is

 *  in a separate file

 *

 *  Copyright (C) 1997 Paul Mackerras (paulus@samba.org)

 *  Copyright (C) 2005 Benjamin Herrenschmidt (benh@kernel.crashing.org)

 *                     IBM, Corp.

 Workaround flags for 32bit powermac machines */

 Default addresses */

 The max irq number this driver deals with is 128; see max_irqs */

                /* make sure ack gets to controller before we enable

 enable unmasked interrupts */

                /* make sure mask gets to controller before we

        /*

         * Unfortunately, setting the bit in the enable register

         * when the device interrupt is already on *doesn't* set

         * the bit in the flag register or request another interrupt.

/* When an irq gets requested for the first client, if it's an

 * edge interrupt, we clear any previous one on the controller

 IPI's are a hack on the powersurge -- Cort */

 CONFIG_PPC_PMAC32_PSURGE */

 We match all, we don't always have a node anyway */

	/* Mark level interrupts, set delayed disable for edge ones and set

	 * handlers

 Set our get_irq function */

	/*

	 * Find the interrupt controller type & node

 We might have a second cascaded ohare */

 We might have a second cascaded heathrow */

 Compensate for of_node_put() in of_find_node_by_name() */

 Check ordering of master & slave */

 We found a slave */

	/*

	 * Allocate an irq host

 Get addresses of first controller if we have a node for it */

 Map interrupts of primary controller */

 Map interrupts of cascaded controller */

 Disable all interrupts in all controllers */

 Hookup cascade irq */

	/*

	 * Old machines just have a list of interrupt numbers

	 * and no interrupt-controller nodes. We also have dodgy

	 * cases where the APPL,interrupts property is completely

	 * missing behind pci-pci bridges and we have to get it

	 * from the parent (the bridge itself, as apple just wired

	 * everything together on these)

 CONFIG_PPC32 */

 defined(CONFIG_XMON) && defined(CONFIG_PPC32) */

	/* Primary Big Endian means HT interrupts. This is quite dodgy

	 * but works until I find a better way

 We can have up to 2 MPICs cascaded */

 Check for bogus setups */

 Not found, default to good old pmac pic */

 Set master handler */

 Setup master */

 Install NMI if any */

 Set up a cascaded controller, if present */

	/* We configure the OF parsing based on our oldworld vs. newworld

	 * platform type and whether we were booted by BootX.

	/* If we don't have phandles on a newworld, then try to locate a

	 * default interrupt controller (happens when booting with BootX).

	 * We do a first match here, hopefully, that only ever happens on

	 * machines with one controller.

 Skip /chosen/interrupt-controller */

			/* It seems like at least one person wants

			 * to use BootX on a machine with an AppleKiwi

			 * controller which happens to pretend to be an

 I think we found one ! */

 CONFIG_PPC32 */

	/* We first try to detect Apple's new Core99 chipset, since mac-io

	 * is quite different on those machines and contains an IBM MPIC2.

/*

 * These procedures are used in implementing sleep on the powerbooks.

 * sleep_save_intrs() saves the states of all interrupt enables

 * and disables all interrupts except for the nominated one.

 * sleep_restore_intrs() restores the states of all interrupt enables.

/* This used to be passed by the PMU driver but that link got

 * broken with the new driver model. We use this tweak for now...

 * We really want to do things differently though...

 CONFIG_ADB_PMU */

 make sure mask gets to controller before we return to caller */

 CONFIG_PM && CONFIG_PPC32 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2002 Benjamin Herrenschmidt (benh@kernel.crashing.org)

 *

 *  Todo: - add support for the OF persistent properties

 8kB of non-volatile RAM */

 On Core99, nvram is either a sharp, a micron or an AMD flash */

 CHRP NVRAM header */

/*

 * Read and write the non-volatile RAM on PowerMacs and CHRP machines.

 XXX Turn that into a sem

 CONFIG_ADB_PMU */

 CONFIG_PPC32 */

 Unlock 1 */

 Unlock 2 */

 Sector-Erase */

 Reset */

 Unlock 1 */

 Unlock 2 */

 Write single word */

 Reset */

 Make sure we get the correct case */

	/* 

	 * Maybe we could be smarter here though making an exclusive list

	 * of known flash chips is a bit nasty as older OF didn't provide us

	 * with a useful "compatible" entry. A solution would be to really

	 * identify the chip using flash id commands and base ourselves on

	 * a list of known chips IDs

 Try to obtain an address */

 CONFIG_ADB_PMU */

 CONFIG_PPC32 */

 SPDX-License-Identifier: GPL-2.0

/*

 * This implementation is "special", it can "patch" the current

 * udbg implementation and work on top of it. It must thus be

 * initialized last

 CONFIG_ADB_PMU */

 CONFIG_ADB_CUDA */

 0x00 - 0x0f */

 0x10 - 0x1f */

 0x20 - 0x2f */

 0x30 - 0x3f */

 0x40 - 0x4f */

 0x50 - 0x5f */

 0x00 - 0x0f */

 0x10 - 0x1f */

 0x20 - 0x2f */

 0x30 - 0x3f */

 0x40 - 0x4f */

 0x50 - 0x5f */

 test for shift keys */

 ignore up transitions */

 CONFIG_BOOTX_TEXT */

/* getc_poll() is not really used, unless you have the xmon-over modem

 * hack that doesn't quite concern us here, thus we just poll the low level

 * ADB driver to prevent it from timing out and call back the original poll

 * routine.

 Capture existing callbacks */

 Check if our early init was already called */

 Set ours as output */

 Check if we should use btext output */

	/* See if there is a keyboard in the device tree with a parent

	 * of type "adb". If not, we return a failure, but we keep the

	 * bext output set for now

 Same as above: nothing found, keep btext set for output */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Powermac setup and early boot code plus other random bits.

 *

 *  PowerPC version

 *    Copyright (C) 1995-1996 Gary Thomas (gdt@linuxppc.org)

 *

 *  Adapted for Power Macintosh by Paul Mackerras

 *    Copyright (C) 1996 Paul Mackerras (paulus@samba.org)

 *

 *  Derived from "arch/alpha/kernel/setup.c"

 *    Copyright (C) 1995 Linus Torvalds

 *

 *  Maintained by Benjamin Herrenschmidt (benh@kernel.crashing.org)

/*

 * bootup setup stuff..

 sda1 - slightly silly choice */

 find motherboard type */

 print parsed model */

 find l2 cache info */

 Indicate newworld/oldworld */

 should check and warn if SMU is present */

	/* this area has the CPU identification register

	/*

	 * Turn on the L2 cache.

	 * We assume that we have a PSX memory controller iff

	 * we have an ohare I/O controller.

 Checks "l2cr-value" property in the registry */

	/* Set loops_per_jiffy to a half-way reasonable value,

 PPC970 etc. */

 604, G3, G4 etc. */

 603, etc. */

 See if newworld or oldworld */

 CONFIG_PPC32 */

 CONFIG_ADB */

/*

 * This is __ref because we check for "initializing" before

 * touching any of the __init sensitive things and "initializing"

 * will be false after __init time. This can't be __init because it

 * can be called whenever a disk is first accessed.

/* 

 * Early initialization.

 Enable early btext debug if requested */

 Probe motherboard chipset */

 Initialize debug stuff */

	/* SMP Init has to be done early as we need to patch up

	 * cpu_possible_mask before interrupt stacks are allocated

	 * or kaboom...

 Some machines have strangely broken device-tree */

/*

 * This is called very early, as part of console_init() (typically just after

 * time_init()). This function is respondible for trying to find a good

 * default console on serial ports. It tries to match the open firmware

 * default output with one of the available serial console drivers.

 The user has requested a console so this is already set up. */

 We are getting a weird phandle from OF ... */

 ... So use the full path instead */

 CONFIG_SERIAL_PMACZILOG_CONSOLE */

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 isa_io_base gets set in pmac_pci_init */

 CONFIG_PPC32 */

 changed later */

 CONFIG_PPC64 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Support for periodic interrupts (100 per second) and for getting

 * the current time from the RTC on Power Macintoshes.

 *

 * We use the decrementer register for our periodic interrupts.

 *

 * Paul Mackerras	August 1996.

 * Copyright (C) 1996 Paul Mackerras.

 * Copyright (C) 2003-2005 Benjamin Herrenschmidt.

 *

/*

 * Calibrate the decrementer frequency with the VIA timer 1.

 time 1 frequency * 6 */

 VIA registers */

 skip between registers */

 Timer 1 ctr/latch (low 8 bits) */

 Timer 1 counter (high 8 bits) */

 Timer 1 latch (low 8 bits) */

 Timer 1 latch (high 8 bits) */

 Auxiliary control register */

 Interrupt flag register */

 Bits in ACR */

 Timer 1 mode */

  continuous interrupts */

 Bits in IFR and IER */

 Timer 1 interrupt */

 Can't be __init, it's called when suspending and resuming */

 Get the time from the RTC, used only at boot time */

 Get the time from the RTC, used only at boot time */

/*

 * Calibrate the decrementer register using VIA timer 1.

 * This is used both on powermacs and CHRP machines.

 set timer 1 for continuous interrupts */

 set the counter to a small value */

 set the latch to `count' */

 wait until it hits 0 */

 clear the interrupt & wait until it hits 0 again */

/*

 * Query the OF and get the decr frequency.

	/* We assume MacRISC2 machines have correct device-tree

	 * calibration. That's better since the VIA itself seems

	 * to be slightly off. --BenH

	/* Special case: QuickSilver G4s seem to have a badly calibrated

	 * timebase-frequency in OF, VIA is much better on these. We should

	 * probably implement calibration based on the KL timer on these

	 * machines anyway... -BenH

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Miscellaneous procedures for dealing with the PowerMac hardware.

 * Contains support for the backlight.

 *

 *   Copyright (C) 2000 Benjamin Herrenschmidt

 *   Copyright (C) 2006 Michael Hanselmann <linux-kernel@hansmi.ch>

 *

/* Although these variables are used in interrupt context, it makes no sense to

 * protect them. No user is able to produce enough key events per second and

 * notice the errors that might happen.

/* The via-pmu code allows the backlight to be grabbed, in which case the

 * in-kernel control of the brightness needs to be disabled. This should

 * only be used by really old PowerBooks.

/* Protect the pmac_backlight variable below.

   You should hold this lock when using the pmac_backlight pointer to

/* Main backlight storage

 *

 * Backlight drivers in this variable are required to have the "ops"

 * attribute set and to have an update_status function.

 *

 * We can only store one backlight here, but since Apple laptops have only one

 * internal display, it doesn't matter. Other backlight drivers can be used

 * independently.

 *

 Look for biggest value */

 Look for nearest value */

 This function is called in interrupt context */

	/* we can receive multiple interrupts here, but the scheduled work

	 * will run only once, with the last value

 This function is called in interrupt context */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Early boot support code for BootX bootloader

 *

 *  Copyright (C) 2005 Ben. Herrenschmidt (benh@kernel.crashing.org)

 Is boot-info compatible ? */

 CONFIG_BOOTX_TEXT */

 CONFIG_BOOTX_TEXT */

 push property content */

 Keep refs to known nodes */

 get and store all property names */

 get/create string entry */

 do all our children */

 get the node's full name */

	/* Fixup an Apple bug where they have bogus \0 chars in the

	 * middle of the path in some properties, and extract

	 * the unit name (everything after the last '/').

 get and store all properties */

 Skip "name" */

 Skip "bootargs" in /chosen too as we replace it */

 push property head */

 do all our children */

	/* Start using memory after the big blob passed by BootX, get

	 * some space for the header

 Get base of tree */

 Build string array */

 Add some strings */

 Wrap up strings */

 Build structure */

 Finish header */

 Version 16 is not backward compatible */

	/* Reserve the whole thing and copy the reserve map in, we

	 * also bump mem_reserve_cnt to cause further reservations to

	 * fail since it's too late.

 CONFIG_BOOTX_TEXT */

	/* We haven't cleared any bss at this point, make sure

	 * what we need is initialized

 Fixup depth 16 -> 15 as that's what MacOS calls 16bpp */

 CONFIG_BOOTX_TEXT */

	/*

	 * Test if boot-info is compatible.  Done only in config

	 * CONFIG_BOOTX_TEXT since there is nothing much we can do

	 * with an incompatible version, except display a message

	 * and eventually hang the processor...

	 *

	 * I'll try to keep enough of boot-info compatible in the

	 * future to always allow display of this message;

	/* New BootX enters kernel with MMU off, i/os are not allowed

	 * here. This hack will have been done by the boostrap anyway.

		/*

		 * XXX If this is an iMac, turn off the USB controller.

 XXX */

	/* Get a pointer that points above the device tree, args, ramdisk,

	 * etc... to use for generating the flattened tree

	/* New BootX will have flushed all TLBs and enters kernel with

	 * MMU switched OFF, so this should not be useful anymore.

		/*

		 * Touch each page to make sure the PTEs for them

		 * are in the hash table - the aim is to try to avoid

		 * getting DSI exceptions while copying the kernel image.

	/* Ok, now we need to generate a flattened device-tree to pass

	 * to the kernel

 SPDX-License-Identifier: GPL-2.0

 Check polarity */

 Toggle the GPIO */

 Check if we have room for reply */

 assume we can sleep ! */

	/*

	 * Find the "gpio" parent node

	/*

	 * Ok, got one, we dont need anything special to track them down, so

	 * we just create them all

		/* Deal with old style device-tree. We can safely hard code the

		 * offset for now too even if it's a bit gross ...

 And now we run all the init ones */

	/* Note: We do not at this point implement the "at sleep" or "at wake"

	 * functions. I yet to find any for GPIOs anyway

 Check if we have room for reply */

 Check if we have room for reply */

 Check if we have room for reply */

 Check if we have room for reply */

 Check args */

 Check args */

	/* This is fairly bogus in darwin, but it should work for our needs

	 * implemeted that way:

	/*

	 * Install handlers for the bridge itself

	/*

	 * Install handlers for the hwclock child if any

 We export this as the SMP code might init us early */

	/*

	 * Locate mac-io chips and install handlers

	/*

	 * Install handlers for northbridge and direct mapped hwclock

	 * if any. We do not implement the config space access callback

	 * which is only ever used for functions that we do not call in

	 * the current driver (enabling/disabling cells in U2, mostly used

	 * to restore the PCI settings, we do that differently)

/* Those can be called by pmac_feature. Ultimately, I should use a sysdev

 * or a device, but for now, that's good enough until I sort out some

 * ordering issues. Also, we do not bother with GPIOs, as so far I yet have

 * to see a case where a GPIO function has the on-suspend or on-resume bit

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * udbg for zilog scc ports as found on Apple PowerMacs

 *

 * Copyright (C) 2001-2005 PPC 64 Team, IBM Corp

 set baud rate divisor */

 baud rate gen enable, src=rtxc */

 clocks = br gen */

 tx 8 bits, assert DTR & RTS */

 x16 clock, 1 stop */

 rx enable, 8 bits */

 Get address within mac-io ASIC */

 Get address of mac-io PCI itself */

 Lock the serial port */

 reset A or B side */

	/* If SCC was the OF output port, read the BRG value, else

	 * Setup for 38400 or 57600 8N1 depending on the machine

 Xserves and G5s default to 57600 */

 Others default to 38400 */

 CONFIG_PPC64 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Support for PCI bridges found on Power Macintoshes.

 *

 * Copyright (C) 2003-2005 Benjamin Herrenschmuidt (benh@kernel.crashing.org)

 * Copyright (C) 1997 Paul Mackerras (paulus@samba.org)

/* XXX Could be per-controller, but I don't think we risk anything by

 CONFIG_PPC64 */

/*

 * Magic constants for enabling cache coherency in the bandit/PSX bridge.

 For PCI<->PCI bridges or CardBus bridges, we go down */

/* This routine fixes the "bus-range" property of all bridges in the

 * system since they tend to have their "last" member wrong on macs

 *

 * Note that the bus numbers manipulated here are OF bus numbers, they

 * are not Linux bus numbers.

 Lookup the "bus-range" property for the hose */

/*

 * Apple MacRISC (U3, UniNorth, Bandit, Chaos) PCI controllers.

 *

 * The "Bandit" version is present in all early PCI PowerMacs,

 * and up to the first ones using Grackle. Some machines may

 * have 2 bandit controllers (2 PCI busses).

 *

 * "Chaos" is used in some "Bandit"-type machines as a bridge

 * for the separate display bus. It is accessed the same

 * way as bandit, but cannot be probed for devices. It therefore

 * has its own config access functions.

 *

 * The "UniNorth" version is present in all Core99 machines

 * (iBook, G4, new IMacs, and all the recent Apple machines).

 * It contains 3 controllers in one ASIC.

 *

 * The U3 is the bridge used on G5 machines. It contains an

 * AGP bus which is dealt with the old UniNorth access routines

 * and a HyperTransport bus which uses its own set of access

 * functions.

 Uninorth will return garbage if we don't read back the value ! */

/*

 * Verify that a specific (bus, dev_fn) exists on chaos

 assume a `chaos' bridge */

 CONFIG_PPC32 */

/*

 * These versions of U3 HyperTransport config space access ops do not

 * implement self-view of the HT host yet

/*

 * This function deals with some "special cases" devices.

 *

 *  0 -> No special case

 *  1 -> Skip the device but act as if the access was successful

 *       (return 0xff's on reads, eventually, cache config space

 *       accesses in a later version)

 * -1 -> Hide the device (unsuccessful access)

	/* We only allow config cycles to devices that are in OF device-tree

	 * as we are apparently having some weird things going on with some

	 * revs of K2 on recent G5s, except for the host bridge itself, which

	 * is missing from the tree but we know we can probe.

	/*

	 * When a device in K2 is powered down, we die on config

	 * cycle accesses. Fix that here.

	/*

	 * Note: the caller has already checked that offset is

	 * suitably aligned and that len is 1, 2 or 4.

	/*

	 * Note: the caller has already checked that offset is

	 * suitably aligned and that len is 1, 2 or 4.

 Uninorth will return garbage if we don't read back the value ! */

	/* Apple's device-tree "hides" the root complex virtual P2P bridge

	 * on U4. However, Linux sees it, causing the PCI <-> OF matching

	 * code to fail to properly match devices below it. This works around

	 * it by setting the node of the bridge to point to the PHB node,

	 * which is not entirely correct but fixes the matching code and

	 * doesn't break anything else. It's also the simplest possible fix.

 CONFIG_PPC64 */

/*

 * For a bandit bridge, turn on cache coherency if necessary.

 * N.B. we could clean this up using the hose ops directly.

 read the word at offset 0 in config space for device 11 */

 read the revision id */

 read the word at offset 0x50 */

/*

 * Tweak the PCI-PCI bridge chip on the blue & white G3s.

	/* XXX it would be better here to identify the specific

	/* Warning: At this point, we have not yet renumbered all busses.

	 * So we must use OF walking to find out hose

	/* This must run before we initialize the PICs since the second

	 * ohare hosts a PIC that will be accessed there.

/*

 * Some Apple desktop machines have a NEC PD720100A USB2 controller

 * on the motherboard. Open Firmware, on these, will disable the

 * EHCI part of it so it behaves like a pair of OHCI's. This fixup

 * code re-enables it ;)

 We "know" that the bridge at f2000000 has the PCI slots. */

 CONFIG_PPC32 */

	/* On G5, we move AGP up to high bus number so we don't need

	 * to reassign bus numbers for HT. If we ever have P2P bridges

	 * on AGP, we'll have to move pci_assign_all_busses to the

	 * pci_controller structure so we enable it for AGP and not for

	 * HT childs.

	 * We hard code the address because of the different size of

	 * the reg address cell, we shall fix that by killing struct

	 * reg_property and using some accessor functions instead

	/* We currently only implement the "non-atomic" config space, to

	 * be optimised later.

	/* The bus contains a bridge from root -> device, we need to

	 * make it visible on bus 0 so that we pick the right type

	 * of config cycles. If we didn't, we would have to force all

	 * config cycles to be type 1. So we override the "bus-range"

	 * property here

	/* Iterate through all bits. We ignore the last bit as this region is

	 * reserved for the ROM among other niceties

	/* Get base addresses from OF tree

	/* Map external cfg space access into cfg_data and self registers

	 * into cfg_addr

	/*

	 * /ht node doesn't expose a "ranges" property, we read the register

	 * that controls the decoding logic and use that for memory regions.

	 * The IO region is hard coded since it is fixed in HW as well.

 Note: fix offset when cfg_addr becomes a void * */

	/* NOTE: The decode register setup is a bit weird... region

	 * 0xf8000000 for example is marked as enabled in there while it's

	 & actually the memory controller registers.

	 * That means that we are incorrectly attributing it to HT.

	 *

	 * In a similar vein, region 0xf4000000 is actually the HT IO space but

	 * also marked as enabled in here and 0xf9000000 is used by some other

	 * internal bits of the northbridge.

	 *

	 * Unfortunately, we can't just mask out those bit as we would end

	 * up with more regions than we can cope (linux can only cope with

	 * 3 memory regions for a PHB at this stage).

	 *

	 * So for now, we just do a little hack. We happen to -know- that

	 * Apple firmware doesn't assign things below 0xfa000000 for that

	 * bridge anyway so we mask out all bits we don't want.

 Now parse the resulting bits and build resources */

 CONFIG_PPC64 */

/*

 * We assume that if we have a G3 powermac, we have one bridge called

 * "pci" (a MPC106) and no bandit or chaos bridges, and contrariwise,

 * if we have one or more bandit or chaos bridges, we don't have a MPC106.

 Fetch host bridge registers address */

 Get bus range if any */

 64 bits only bridges */

 CONFIG_PPC64 */

 32 bits only bridges */

 XXX assume this is a mpc106 (grackle) */

 CONFIG_PPC32 */

 Interpret the "ranges" property */

 This also maps the I/O region and sets isa_io/mem_base */

 Fixup "bus-range" OF property */

 create pci_dn's for DT nodes under this PHB */

	/* Fixup interrupt for the modem/ethernet combo controller.

	 * on machines with a second ohare chip.

	 * The number in the device tree (27) is bogus (correct for

	 * the ethernet-only board but not the combo ethernet/modem

	 * board). The real interrupt is 28 on the second controller

	 * -> 28+32 = 60.

 CONFIG_PPC32 */

	/* Fixup the PCI<->OF mapping for U3 AGP due to bus renumbering. We

	 * assume there is no P2P bridge on the AGP bus, which should be a

	 * safe assumptions for now. We should do something better in the

	 * future though

 CONFIG_PPC64 */

	/* Probe HT last as it relies on the agp resources to be already

	 * setup

 pmac_check_ht_link(); */

 CONFIG_PPC64 */

	/* We are still having some issues with the Xserve G4, enabling

	 * some offset between bus number and domains for now when we

	 * assign all busses should help for now

	/* We don't want to enable USB controllers absent from the OF tree

	 * (iBook second controller)

	/* Firewire & GMAC were disabled after PCI probe, the driver is

	 * claiming them, we must re-enable them now.

	/*

	 * Fixup various header fields on 32 bits. We don't do that on

	 * 64 bits as some of these have strange values behind the HT

	 * bridge and we must not, for example, enable MWI or set the

	 * cache line size on them.

	/* We don't want to assign resources to USB controllers

	 * absent from the OF tree (iBook second controller)

/* We power down some devices after they have been probed. They'll

 * be powered back on later on

	/*

	 * Fix the interrupt routing on the various cardbus bridges

	 * used on powerbooks

 Enable PCI interrupt */

 Disable ISA interrupt mode */

		/* 0x8c == TI122X_IRQMUX, 2 says to route the INTA

 Disable ISA interrupt mode */

       /*

        * On PowerMacs, we try to switch any PCI ATA controller to

	* fully native mode

 Some controllers don't have the class IDE */

 Others, check PCI class */

 Clear IO BARs, they will be reassigned */

 CONFIG_PPC32 */

/*

 * Disable second function on K2-SATA, it's broken

 * and disable IO BARs on first one

/*

 * On U4 (aka CPC945) the PCIe root complex "P2P" bridge resource ranges aren't

 * configured by the firmware. The bridge itself seems to ignore them but it

 * causes problems with Linux which then re-assigns devices below the bridge,

 * thus changing addresses of those devices from what was in the device-tree,

 * which sucks when those are video cards using offb

 *

 * We could just mark it transparent but I prefer fixing up the resources to

 * properly show what's going on here, as I have some doubts about having them

 * badly configured potentially being an issue for DMA.

 *

 * We leave PIO alone, it seems to be fine

 *

 * Oh and there's another funny bug. The OF properties advertize the region

 * 0xf1000000..0xf1ffffff as being forwarded as memory space. But that's

 * actually not true, this region is the memory mapped config space. So we

 * also need to filter it out or we'll map things in the wrong place.

 Only do that on PowerMac */

 Find the largest MMIO region */

		/* Skip the 0xf0xxxxxx..f2xxxxxx regions, we know they

		 * are reserved by HW for other things

 Nothing found, bail */

 Print things out */

	/* Fixup bridge config space. We know it's a Mac, resource aren't

	 * offset so let's just blast them as-is. We also know that they

	 * fit in 32 bits

	/* We need to use normal PCI probing for the AGP bus,

	 * since the device for the AGP bridge isn't in the tree.

	 * Same for the PCIe host on U4 and the HT host bridge.

 CONFIG_PPC64 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 1996-2001 Paul Mackerras (paulus@cs.anu.edu.au)

 *                          Ben. Herrenschmidt (benh@kernel.crashing.org)

 *

 *  TODO:

 *

 *   - Replace mdelay with some schedule loop if possible

 *   - Shorten some obfuscated delays on some routines (like modem

 *     power)

 *   - Refcount some clocks (see darwin)

 *   - Split split split...

/*

 * We use a single global lock to protect accesses. Each driver has

 * to take care of its own locking

/*

 * Instance of some macio stuffs

/*

 * For each motherboard family, we have a table of functions pointers

 * that handle the various features.

/*

 * Here are the chip specific feature functions

 On these machines, the HRW_SCC_TRANS_EN_N bit mustn't be touched */

 CONFIG_ADB_PMU */

 Check if scc cell need enabling */

				/* Side effect: this will also power up the

				 * modem, but it's too messy to figure out on which

				 * ports this controls the transceiver and on which

				 * it controls the modem

 CONFIG_ADB_PMU */

		/* For some reason, setting the bit in set_initial_features()

		 * doesn't stick. I'm still investigating... --BenH.

 Set clear mesh cell enable */

 Set/Clear termination power */

	/* B&W G3 and Yikes don't support that properly (the

	 * sound appear to never come back after being shut down).

 Save state & config of DBDMA channels */

 Save state & config of DBDMA channels */

 Make sure sound is shut down */

		/* This seems to be necessary as well or the fan

		/* Make sure eth is down even if module or sleep

 Make sure modem is shut down */

 Let things settle */

 Check if scc cell need enabling */

 Don't enable line drivers for I2S modem */

 Perform irda specific inits */

 Perform irda specific clears */

 Hack for internal USB modem */

 Hack for internal USB modem */

	/* Bus ID 0 to 2 are KeyLargo based IDE, busID 3 is U2

	 * based ata-100

KEYLARGO_GPIO_OUTPUT_ENABLE | */

	/* Do a better probe code, screamer G4 desktops &

	 * iMacs can do that too, add a recalibrate  in

	 * the driver as well

	/* Hint: we allow passing of macio itself for the sake of the

	 * sleep code

		/* This code is a reproduction of OF enable-cardslot

		 * and init-wireless methods, slightly hacked until

		 * I got it working.

 CONFIG_SMP */

	/* Sorry for the brute-force locking, but this is only used during

	 * sleep and the timing seem to be critical

 Turn ON */

 wait for clock stopped bits to clear */

 Turn OFF */

 Trick: we allow NULL node */

 CONFIG_PPC64 */

	/*

	 * We must not reset the combo PHYs, only the BCM5221 found in

	 * the iMac G5.

 PHY reset is GPIO 29, not in device-tree unfortunately */

	/* Thankfully, this is now always called at a time when we can

	 * schedule by sungem.

 Very crude implementation for now */

 CONFIG_SMP */

/*

 * This can be called from pmac_smp so isn't static

 *

 * This takes the second CPU off the bus on dual CPU machines

 * running UP

 CONFIG_PPC64 */

 Flush posted writes & wait a bit */

 Flush posted writes & wait a bit */

 Flush posted writes & wait a bit */

	/* We power off the wireless slot in case it was not done

	 * by the driver. We don't power it on automatically however

 We power off the FW cable. Should be done by the driver... */

 We make sure int. modem is off (in case driver lost it) */

 We make sure the sound is off as well */

	/*

	 * Save various bits of KeyLargo

 Save the state of the various GPIOs */

 Save the FCRs */

 Save state & config of DBDMA channels */

	/*

	 * Turn off as much as we can

	/*

	 * Put the host bridge to sleep

	/* Note: do not switch GMAC off, driver does it when necessary, WOL must keep it

	 * enabled !

UNI_N_CLOCK_CNTL_GMAC|*/UNI_N_CLOCK_CNTL_FW
	/*

	 * FIXME: A bit of black magic with OpenPIC (don't ask me why)

	/*

	 * Wakeup the host bridge

	/*

	 * Restore KeyLargo

 FIXME more black magic with OpenPIC ... */

 CONFIG_PM */

	/* Param == 1 means to enter the "fake sleep" mode that is

	 * used for CPU speed switch

 CONFIG_PM */

 CONFIG_PPC64 */

	/* Todo: eventually check we are really dealing with on-board

	 * video device ...

 hack hack hack... but should work */

/*

 * Table definitions

/* Used on any machine

/* OHare based motherboards. Currently, we only use these on the

 * 2400,3400 and 3500 series powerbooks. Some older desktops seem

 * to have issues with turning on/off those asic cells

/* Heathrow desktop machines (Beige G3).

 * Separated as some features couldn't be properly tested

 * and the serial port control bits appear to confuse it.

/* Heathrow based laptop, that is the Wallstreet and mainstreet

 * powerbooks.

/* Paddington based machines

 * The lombard (101) powerbook, first iMac models, B&W G3 and Yikes G4.

/* Core99 & MacRISC 2 machines (all machines released since the

 * iBook (included), that is all AGP machines, except pangea

 * chipset. The pangea chipset is the "combo" UniNorth/KeyLargo

 * used on iBook2 & iMac "flow power".

 CONFIG_SMP */

/* RackMac

 CONFIG_SMP */

/* Pangea features

/* Intrepid features

 CONFIG_PPC64 */

/* G5 features

 CONFIG_SMP */

 CONFIG_PPC64 */

	/*

	 * Desktops

	/*

	 * Xserve's

	/*

	 * Laptops

 CONFIG_PPC64 */

 CONFIG_PPC64 */

 CONFIG_PPC64 */

/*

 * The toplevel feature_call callback

	/* Lookup known motherboard type in device-tree. First try an

	 * exact match on the "model" property, then try a "compatible"

	 * match is none is found.

 Fallback to selection depending on mac-io chip type */

 CONFIG_PPC64 */

 CONFIG_PPC64 */

 Fixup Hooper vs. Comet */

		/* Here, I used to disable the media-bay on comet. It

		 * appears this is wrong, the floppy connector is actually

		 * a kind of media-bay and works with the current driver.

	/* Set default value of powersave_nap on machines that support it.

	 * It appears that uninorth rev 3 has a problem with it, we don't

	 * enable it on those. In theory, the flush-on-lock property is

	 * supposed to be set when not supported, but I'm not very confident

	 * that all Apple OF revs did it properly, I do it the paranoid way.

 Nap mode not supported on SMP */

	/* On CPUs that support it (750FX), lowspeed by default during

	 * NAP mode

 CONFIG_PPC64 */

 CONFIG_PPC64 */

 Check for "mobile" machine */

/* Initialize the Core99 UniNorth host bridge and memory controller

 Locate core99 Uni-N */

 Locate G5 u3 */

 Locate G5 u4 */

	/* Set the arbitrer QAck delay according to what Apple does

	/* Some more magic as done by them in recent MacOS X on UniNorth

	 * revs 1.5 to 2.O and Pangea. Seem to toggle the UniN Maxbus/PCI

	 * memory timeout

 Warning, ordering is important */

 Make sure the "main" macio chip appear first */

	/* That hack appears to be necessary for some StarMax motherboards

	 * but I'm not too sure it was audited for side-effects on other

	 * ohare based machines...

	 * Since I still have difficulties figuring the right way to

	 * differentiate them all and since that hack was there for a long

	 * time, I'll keep it around

		/* On SMP machines running UP, we have the second CPU eating

		 * bus cycles. We need to take it off the bus. This is done

		 * from pmac_smp for SMP kernels running on one CPU

 CONFIG_SMP */

		/* Enable GMAC for now for PCI probing. It will be disabled

		 * later on after PCI probe

		/* Enable FW before PCI probe. Will be disabled later on

		 * Note: We should have a batter way to check that we are

		 * dealing with uninorth internal cell and not a PCI cell

		 * on the external PCI. The code below works though.

 CONFIG_PPC64 */

		/* Enable GMAC for now for PCI probing. It will be disabled

		 * later on after PCI probe

		/* Enable FW before PCI probe. Will be disabled later on

		 * Note: We should have a batter way to check that we are

		 * dealing with uninorth internal cell and not a PCI cell

		 * on the external PCI. The code below works though.

 Enable ATA-100 before PCI probe. */

 Switch airport off */

 On all machines that support sound PM, switch sound off */

 While on some desktop G3s, we turn it back on */

 CONFIG_PPC64 */

 On all machines, switch modem & serial ports off */

 Detect the UniNorth memory controller */

 Probe mac-io controllers */

 Probe machine type */

	/* Set some initial features (turn off some chips that will

	 * be later turned on)

 0 */

/*

 * Early video resume hook

/*

 * AGP related suspend/resume code

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/platforms/powermac/low_i2c.c

 *

 *  Copyright (C) 2003-2005 Ben. Herrenschmidt (benh@kernel.crashing.org)

 *

 * The linux i2c layer isn't completely suitable for our needs for various

 * reasons ranging from too late initialisation to semantics not perfectly

 * matching some requirements of the apple platform functions etc...

 *

 * This file thus provides a simple low level unified i2c interface for

 * powermac that covers the various types of i2c busses used in Apple machines.

 * For now, keywest, PMU and SMU, though we could add Cuda, or other bit

 * banging busses found on older chipsets in earlier machines if we ever need

 * one of them.

 *

 * The drivers in this file are synchronous/blocking. In addition, the

 * keywest one is fairly slow due to the use of msleep instead of interrupts

 * as the interrupt is currently used by i2c-keywest. In the long run, we

 * might want to get rid of those high-level interfaces to linux i2c layer

 * either completely (converting all drivers) or replacing them all with a

 * single stub driver on top of this one. Once done, the interrupt will be

 * available for our use.

/*

 * A bus structure. Each bus in the system has such a structure associated.

 some hosts have multiple */

 current mode */

 open mode */

 ops */

/*

 * Keywest implementation

	struct mutex		mutex;		/* Access mutex for use by

 register base address */

 register stepping */

 speed */

 Register indices */

 The Tumbler audio equalizer can be really slow sometimes */

 Mode register */

 Control register */

 Status register */

 IER & ISR registers */

 State machine states */

		/* This code is used with the timebase frozen, we cannot rely

		 * on udelay nor schedule when in polled mode !

		 * For now, just use a bogus loop....

 Below should only happen in manual mode which we don't use ... */

 Interrupt handler */

	/*

	 * If the timer is pending, that means we raced with the

	 * irq, in which case we just return

 Setup mode & subaddress if any */

 Setup channel & clear pending irqs */

	/* Set up address and r/w bit, strip possible stale bus number from

	 * address top bits

 Set up the sub address */

 Prepare for async operations */

	/* Enable interrupt if not using polled mode and interrupt is

	 * available

 Clear completion */

 Ack stale interrupts */

 Arm timeout */

 Enable emission */

 Start sending address */

 Wait for completion */

 Disable emission */

	/* Apple is kind enough to provide a valid AAPL,address property

	 * on all i2c keywest nodes so far ... we would have to fallback

	 * to macio parsing if that wasn't the case

 Select interface rate */

 Make sure IRQ is disabled */

	/* Request chip interrupt. We set IRQF_NO_SUSPEND because we don't

	 * want that interrupt disabled between the 2 passes of driver

	 * suspend or we'll have issues running the pfuncs

 Probe keywest-i2c busses */

 Found one, init a host structure */

		/* Now check if we have a multibus setup (old style) or if we

		 * have proper bus nodes. Note that the "new" way (proper bus

		 * nodes) might cause us to not create some busses that are

		 * kept hidden in the device-tree. In the future, we might

		 * want to work around that by creating busses without a node

		 * but not for now

		/* For a multibus setup, we get the bus count based on the

		 * parent type

/*

 *

 * PMU implementation

 *

/*

 * i2c command block to the PMU

 For now, limit ourselves to 16 bytes transfers */

		/* I know that looks like a lot, slow as hell, but darwin

		 * does it so let's be on the safe side for now

	/* There might or might not be a "pmu-i2c" node, we use that

	 * or via-pmu itself, whatever we find. I haven't seen a machine

	 * with separate bus nodes, so we assume a multibus setup

	/*

	 * We add bus 1 and 2 only for now, bus 0 is "special"

 CONFIG_ADB_PMU */

/*

 *

 * SMU implementation

 *

 that's big-endian only but heh ! */

	/* Look for childs, note that they might not be of the right

	 * type as older device trees mix i2c busses and other things

	 * at the same level

 CONFIG_PMAC_SMU */

/*

 *

 * Core code

 *

	/* Report me if you see the error below as there might be a new

	 * "combined4" mode that I need to implement for the SMU bus

 some quirks for platform function decoding */

		/* XXX Study device-tree's & apple drivers are get the quirks

		 * right !

		/* Workaround: It seems that running the clockspreading

		 * properties on the eMac will cause lockups during boot.

		 * The machine seems to work fine without that. So for now,

		 * let's make sure i2c-hwclock doesn't match about "imic"

		 * clocks and we'll figure out if we really need to do

		 * something special about those later.

	/* Only some devices need to have platform functions instantiated

	 * here. For now, we have a table. Others, like 9554 i2c GPIOs used

	 * on Xserve, if we ever do a driver for them, will use their own

	 * platform function instance

 If multibus, check if device is on that bus */

	/* XXX might need GFP_ATOMIC when called during the suspend process,

	 * but then, there are already lots of issues with suspending when

	 * near OOM that need to be resolved, the allocator itself should

	 * probably make GFP_NOIO implicit during suspend

/* This function is used to do the masking & OR'ing for the "rmw" type

 * callbacks. Ze should apply the mask and OR in the values in the

 * buffer before writing back. The problem is that it seems that

 * various darwin drivers implement the mask/or differently, thus

 * we need to check the quirks first

 Get return value pointer, it's assumed to be a u32 */

 Check buffer */

/*

 * Initialize us: probe all i2c busses on the machine, instantiate

 * busses and platform functions as needed.

 This is non-static as it might be called early by smp code */

 Probe keywest-i2c busses */

 Probe PMU i2c busses */

 Probe SMU i2c busses */

 Now add plaform functions for some known devices */

/* Since pmac_i2c_init can be called too early for the platform device

 * registration, we need to do it at a later time. In our case, subsys

 * happens to fit well, though I agree it's a bit of a hack...

	/* In the case where we are initialized from smp_init(), we must

	 * not use the timer (and thus the irq). It's safe from now on

	 * though

 Create platform devices */

 Now call platform "init" functions */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SMP support for power macintosh.

 *

 * We support both the old "powersurge" SMP architecture

 * and the current Core99 (G4 PowerMac) machines.

 *

 * Note that we don't support the very first rev. of

 * Apple/DayStar 2 CPUs board, the one with the funky

 * watchdog. Hopefully, none of these should be there except

 * maybe internally to Apple. I should probably still add some

 * code to detect this card though and disable SMP. --BenH.

 *

 * Support Macintosh G4 SMP by Troy Benjegerdes (hozer@drgw.net)

 * and Ben Herrenschmidt <benh@kernel.crashing.org>.

 *

 * Support for DayStar quad CPU cards

 * Copyright (C) XLR8, Inc. 1994-2000

/*

 * Powersurge (old powermac SMP) support.

 Addresses for powersurge registers */

 register for interrupting the primary processor on the powersurge */

 N.B. this is actually the ethernet ROM! */

 register for storing the start address for the secondary processor */

 N.B. this is the PCI config space address register for the 1st bridge */

 Daystar/XLR8 4-CPU card */

 virtual addresses for the above */

 values for psurge_type */

 what sort of powersurge board we have */

 irq for secondary cpus to report */

/*

 * Set and clear IPIs for powersurge.

/*

 * On powersurge (old SMP powermac architecture) we don't have

 * separate IPIs for separate messages like openpic does.  Instead

 * use the generic demux helpers

 *  -- paulus.

/*

 * Determine a quad card presence. We read the board ID register, we

 * force the data bus to change to something else, and we read it again.

 * It it's stable, then the register probably exist (ugh !)

 looks OK, try a slightly more rigorous test */

	/* bogus is not necessarily cacheline-aligned,

	/*

	 * The powersurge cpu board can be used in the generation

	 * of powermacs that have a socket for an upgradeable cpu card,

	 * including the 7500, 8500, 9500, 9600.

	 * The device tree doesn't tell you if you have 2 cpus because

	 * OF doesn't know anything about the 2nd processor.

	 * Instead we look for magic bits in magic registers,

	 * in the hammerhead memory controller in the case of the

	 * dual-cpu powersurge board.  -- paulus.

 All released cards using this HW design have 4 CPUs */

 No sure how timebase sync works on those, let's use SW */

 not a dual-cpu card */

	/* This is necessary because OF doesn't know about the

	 * secondary cpu(s), and thus there aren't nodes in the

	 * device tree for them, and smp_setup_cpu_maps hasn't

	 * set their bits in cpu_present_mask.

	/* Defining this here is evil ... but I prefer hiding that

	 * crap to avoid giving people ideas that they can do the

	 * same.

 may need to flush here if secondary bats aren't setup */

 This is going to freeze the timeebase, we disable interrupts */

	/*

	 * We can't use udelay here because the timebase is now frozen.

	/*

	 * Also, because the timebase is frozen, we must not return to the

	 * caller which will try to do udelay's etc... Instead, we wait -here-

	 * for the CPU to callin.

 And we do the TB sync here too for standard dual CPU cards */

 now interrupt the secondary, restarting both TBs */

	/* reset the entry point so if we get another intr we won't

 Nothing to do here */

 PowerSurge-style Macs */

 Use smp_muxed_ipi_message_pass */

 CONFIG_PPC_PMAC32_PSURGE */

/*

 * Core 99 and later support

/*

 * G5s enable/disable the timebase via an i2c-connected clock chip.

	/* Strangely, the device-tree says address is 0xd2, but darwin

	 * accesses 0xd0 ...

 Look for the clock chip */

 Open i2c bus for synchronous access */

/*

 * Newer G5s uses a platform function

 CONFIG_PPC64 */

/*

 * SMP G4 use a GPIO to enable/disable the timebase.

 Timebase freeze GPIO */

 !CONFIG_PPC64 */

 L2 and L3 cache settings to pass from CPU0 to CPU1 on G4 cpus */

 !CONFIG_PPC64 */

 i2c based HW sync on some G5s */

 pfunc based HW sync on recent G5s */

 CONFIG_PPC64 */

 GPIO based HW sync on ppc32 Core99 */

 default value */

 CONFIG_PPC64 */

 No timebase sync, fallback to software */

 XXX should get this from reg properties */

 32 bits SMP can't NAP */

 Count CPUs in the device-tree */

 Nothing more to do if less than 2 of them */

	/* We need to perform some early initialisations before we can start

	 * setting up SMP as we are running before initcalls

 Setup various bits like timebase sync method, ability to nap, ... */

 Install IPIs */

 Collect l2cr and l3cr values from CPU 0 */

 Save reset vector */

	/* Setup fake reset vector that does

	 *   b __secondary_start_pmac_0 + nr*8

 Put some life in our friend */

	/* FIXME: We wait a bit for the CPU to take the exception, I should

	 * instead wait for the entry code to set something for me. Well,

	 * ideally, all that crap will be done in prom.c and the CPU left

	 * in a RAM-based wait loop like CHRP.

 Restore our exception vector */

 Setup L2/L3 */

 Setup openpic */

 Open i2c bus if it was used for tb sync */

 Close i2c bus if it was used for tb sync */

 CONFIG_HOTPLUG_CPU */

 Close i2c bus if it was used for tb sync */

	/* If we didn't start the second CPU, we must take

	 * it off the bus.

 CONFIG_PPC64 */

 CONFIG_PPC32 */

	/*

	 * turn off as much as possible, we'll be

	 * kicked out as this will only be invoked

	 * on core99 platforms for now ...

	/*

	 * Re-enable interrupts. The NAP code needs to enable them

	 * anyways, do it now so we deal with the case where one already

	 * happened while soft-disabled.

	 * We shouldn't get any external interrupts, only decrementer, and the

	 * decrementer handler is safe for use on offline CPUs

 let's not take timer interrupts too often ... */

 Enter NAP mode */

 else CONFIG_PPC32 */

 CONFIG_HOTPLUG_CPU */

 Core99 Macs (dual G4s and G5s) */

 Check for Core99 */

		/* We have to set bits in cpu_possible_mask here since the

		 * secondary CPU(s) aren't in the device tree. Various

		 * things won't be initialized for CPUs not in the possible

		 * map, so we really need to fix it up here.

 CONFIG_PPC_PMAC32_PSURGE */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * FIXME: Properly make this race free with refcounting etc...

 *

 * FIXME: LOCKING !!!

 Debug */

 Command numbers */

/* This structure holds the state of the parser while walking through

 * a function definition

 Debug output */

/*

 * Parser helpers

/*

 * Individual command parsers

 Bogus command */

 Shift bytes right: NYI */

 Shift bytes left: NYI */

 One subcommand to parse for now */

 Get opcode */

 Check if we are hitting a command list, fetch new count */

 We are doing an initial parse pass, we need to adjust the size */

 Allocate a structure */

	/*

	 * Look for a "platform-*" function reference. If we can't find

	 * one, then we fallback to a direct call attempt

	/*

	 * Ok, now try to find the actor. If we can't find it, we fail,

	 * there is no point in falling back there

 guard against manipulations of list */

 guard against pmf_do_irq while changing list */

 guard against manipulations of list */

 guard against pmf_do_irq while changing list */

	/* For now, using a spinlock over the whole function. Can be made

	 * to drop the lock using 2 lists if necessary

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Maple (970 eval board) setup code

 *

 *  (c) Copyright 2004 Benjamin Herrenschmidt (benh@kernel.crashing.org),

 *                     IBM Corp. 

 find NVRAM device */

 find service processor device */

 send command */

 find service processor device */

 send command */

 CONFIG_SMP */

 init to some ~sane value until calibrate_delay() runs */

 Setup SMP callback */

/*

 * This is almost identical to pSeries and CHRP. We need to make that

 * code generic at one point, with appropriate bits in the device-tree to

 * identify the presence of an HT APIC

	/* Locate MPIC in the device-tree. Note that there is a bug

	 * in Maple device-tree where the type of the controller is

	 * open-pic and not interrupt-controller

 Find address list in /platform-open-pic */

 Check for a big endian MPIC */

 XXX Maple specific bits */

 All U3/U4 are big-endian, older SLOF firmware doesn't encode this */

	/* Setup the openpic driver. More device-tree junks, we hard code no

	 * ISUs for now. I'll have to revisit some stuffs with the folks doing

	 * the firmware for those

has_isus ? 16 :*/ 0, 0, " MPIC     ");

 Add ISUs */

 All ISUs are setup, complete initialization */

/*

 * Called very early, MMU is off, device-tree isn't unflattened

/*

 * Register a platform device for CPC925 memory controller on

 * all boards with U3H (CPC925) bridge.

 U3H */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  (c) Copyright 2004 Benjamin Herrenschmidt (benh@kernel.crashing.org),

 *                     IBM Corp. 

 tell the clock it's being set */

 stop and reset prescaler */

	/* The following flags have to be released exactly in this order,

	 * otherwise the DS12887 (popular MC146818A clone with integrated

	 * battery and quartz) will not reset the oscillator and will not

	 * update precisely 500 ms later. You won't find this mentioned in

	 * the Dallas Semiconductor data sheets, but who believes data

	 * sheets anyway ...                           -- Markus Kuhn

 legacy address */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2004 Benjamin Herrenschmuidt (benh@kernel.crashing.org),

 *		      IBM Corp.

 For PCI<->PCI bridges or CardBus bridges, we go down */

/* This routine fixes the "bus-range" property of all bridges in the

 * system since they tend to have their "last" member wrong on macs

 *

 * Note that the bus numbers manipulated here are OF bus numbers, they

 * are not Linux bus numbers.

 Lookup the "bus-range" property for the hose */

 Uninorth will return garbage if we don't read back the value ! */

	/*

	 * Note: the caller has already checked that offset is

	 * suitably aligned and that len is 1, 2 or 4.

	/*

	 * Note: the caller has already checked that offset is

	 * suitably aligned and that len is 1, 2 or 4.

	/*

	 * Note: the caller has already checked that offset is

	 * suitably aligned and that len is 1, 2 or 4.

	/*

	 * Note: the caller has already checked that offset is

	 * suitably aligned and that len is 1, 2 or 4.

 Uninorth will return garbage if we don't read back the value ! */

        /*

         * Note: the caller has already checked that offset is

         * suitably aligned and that len is 1, 2 or 4.

        /*

         * Note: the caller has already checked that offset is

         * suitably aligned and that len is 1, 2 or 4.

	/* On G5, we move AGP up to high bus number so we don't need

	 * to reassign bus numbers for HT. If we ever have P2P bridges

	 * on AGP, we'll have to move pci_assign_all_buses to the

	 * pci_controller structure so we enable it for AGP and not for

	 * HT childs.

	 * We hard code the address because of the different size of

	 * the reg address cell, we shall fix that by killing struct

	 * reg_property and using some accessor functions instead

        /* We currently only implement the "non-atomic" config space, to

         * be optimised later.

	/* We hard code the address because of the different size of

	 * the reg address cell, we shall fix that by killing struct

	 * reg_property and using some accessor functions instead

 Interpret the "ranges" property */

 This also maps the I/O region and sets isa_io/mem_base */

 Fixup "bus-range" OF property */

 Check for legacy IOs */

 create pci_dn's for DT nodes under this PHB */

 Fixup IRQ for PCIe host */

	/* Hide AMD8111 IDE interrupt when in legacy mode so

	 * the driver calls pci_get_legacy_ide_irq()

	/* Fixup the PCI<->OF mapping for U3 AGP due to bus renumbering. We

	 * assume there is no P2P bridge on the AGP bus, which should be a

	 * safe assumptions hopefully.

	/* Probe root PCI hosts, that is on U3 the AGP host and the

	 * HyperTransport host. That one is actually "kept" around

	 * and actually added last as it's resource management relies

	 * on the AGP resources to have been setup first

	/* Now setup the HyperTransport host if we found any

 Tell pci.c to not change any resource allocations.  */

	/* Something prevents MSIs from the IPR from working on Bimini,

	 * and the driver has no smarts to recover. So disable MSI

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * IO workarounds for PCI on Celleb/Cell platform

 *

 * (C) Copyright 2006-2007 TOSHIBA CORPORATION

 SPIDER_PCI_DISABLE_PREFETCH */

 setup dummy read */

	/*

	 * On CellBlade, we can't know that which XDR memory is used by

	 * kmalloc() to allocate dummy_page_va.

	 * In order to imporve the performance, the XDR which is used to

	 * allocate dummy_page_va is the nearest the spider-pci.

	 * We have to select the CBE which is the nearest the spider-pci

	 * to allocate memory from the best XDR, but I don't know that

	 * how to do.

	 *

	 * Celleb does not have this problem, because it has only one XDR.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  linux/arch/powerpc/platforms/cell/cell_setup.c

 *

 *  Copyright (C) 1995  Linus Torvalds

 *  Adapted from 'alpha' version by Gary Thomas

 *  Modified by Cort Dougan (cort@cs.nmt.edu)

 *  Modified by PPC64 Team, IBM Corp

 *  Modified by Cell Team, IBM Deutschland Entwicklung GmbH

 We're searching for a direct child of the PHB */

 Only on PCIE */

 And only on axon */

 Setup workarounds for spider */

 Publish OF platform devices for southbridge IOs */

	/* On spider based blades, we need to manually create the OF

	 * platform devices for the PCI host bridges

	/* There is no device for the MIC memory controller, thus we create

	 * a platform device for it to attach the EDAC driver to.

		/* The MPIC driver will get everything it needs from the

		 * device-tree, just pass 0 to all arguments

 init to some ~sane value until calibrate_delay() runs */

 Find and initialize PCI host bridges */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * IOMMU implementation for Cell Broadband Processor Architecture

 *

 * (C) Copyright IBM Corporation 2006-2008

 *

 * Author: Jeremy Kerr <jk@ozlabs.org>

/* Define CELL_IOMMU_REAL_UNMAP to actually unmap non-used pages

 * instead of leaving them mapped to some dummy page. This can be

 * enabled once the appropriate workarounds for spider bugs have

 * been enabled

/* Define CELL_IOMMU_STRICT_PROTECTION to enforce protection of

 * IO PTEs based on the transfer direction. That can be enabled

 * once spider-net has been fixed to pass the correct direction

 * to the DMA mapping functions

 IOC mmap registers */

 Segment table entries */

 valid */

 cache hint */

 base RPN of IOPT */

 no. pages in IOPT */

 page size */

   - 4kB  */

   - 64kB */

   - 1MB  */

   - 16MB */

 IOMMU sizing */

 The high bit needs to be set on every DMA address */

/* Static array of iommus, one per node

 *   each contains a list of windows, keyed from dma_window property

 *   - on bus setup, look for a matching window, or create one

 *   - on dev setup, assign iommu_table ptr

 we can invalidate up to 1 << 11 PTEs at once */

- 1*/) << 53) & IOC_IOPT_CacheInvd_NE_Mask)

	/* implementing proper protection causes problems with the spidernet

	 * driver - check mapping directions later, but allow read & write by

	/* to avoid referencing a global, we use a trick here to setup the

	 * protection bit. "prot" is setup to be 3 fields of 4 bits appended

	 * together for each of the 3 supported direction values. It is then

	 * shifted left so that the fields matching the desired direction

	 * lands on the appropriate bits, and other bits are masked out.

	/* spider bridge does PCI reads after freeing - insert a mapping

 Might want to rate limit it */

 clear interrupt */

 First look for new style /be nodes */

 Ok, let's try the old way */

 set up the segment table */

 PTEs for each segment must start on a 4K boundary */

 number of 4K pages needed for a page table */

 initialise the STEs */

 ensure that the STEs have updated */

 setup interrupts for the iommu. */

 set the IOC segment table origin register (and turn on the iommu) */

 turn on IO translation */

 Unused for now */

 todo: check for overlapping (but not equal) windows) */

	/* We need to map and reserve the first IOMMU page since it's used

	 * by the spider workaround. In theory, we only need to do that when

	 * running on spider but it doesn't really matter.

	 *

	 * This code also assumes that we have a window that starts at 0,

	 * which is the case on all spider based blades.

 iommu_fixed_is_weak is set if booted with iommu_fixed=weak */

	/* Current implementation uses the first window available in that

	 * node's iommu. We -might- do something smarter later though it may

	 * never be necessary

 We are only intereted in device addition */

 Use ibm,dma-window if available, else, hard code ! */

 Get node ID */

	/* XXX todo: If we can have multiple windows on the same IOMMU, which

	 * isn't the case today, we probably want here to check whether the

	 * iommu for that node is already setup.

	 * However, there might be issue with getting the size right so let's

	 * ignore that for now. We might want to completely get rid of the

	 * multiple window support since the cell iommu supports per-page ioids

 Init base fields */

 Obtain a window for it */

 Initialize the hardware */

 Setup the iommu_table */

 Make sure IOC translation is disabled on all nodes */

 When no iommu is present, we use direct DMA ops */

 First make sure all IOC translation is turned off */

 If we have no Axon, we set up the spider DMA magic offset */

	/* Now we need to check to see where the memory is mapped

	 * in PCI space. We assume that all busses use the same dma

	 * window which is always the case so far on Cell, thus we

	 * pick up the first pci-internal node we can find and check

	 * the DMA window from there.

	/* If we found a DMA window, we check if it's big enough to enclose

	 * all of physical memory. If not, we force enable IOMMU

/*

 *  Fixed IOMMU mapping support

 *

 *  This code adds support for setting up a fixed IOMMU mapping on certain

 *  cell machines. For 64-bit devices this avoids the performance overhead of

 *  mapping and unmapping pages at runtime. 32-bit devices are unable to use

 *  the fixed mapping.

 *

 *  The fixed mapping is established at boot, and maps all of physical memory

 *  1:1 into device space at some offset. On machines with < 30 GB of memory

 *  we setup the fixed mapping immediately above the normal IOMMU window.

 *

 *  For example a machine with 4GB of memory would end up with the normal

 *  IOMMU window from 0-2GB and the fixed mapping window from 2GB to 6GB. In

 *  this case a 64-bit device wishing to DMA to 1GB would be told to DMA to

 *  3GB, plus any offset required by firmware. The firmware offset is encoded

 *  in the "dma-ranges" property.

 *

 *  On machines with 30GB or more of memory, we are unable to place the fixed

 *  mapping above the normal IOMMU window as we would run out of address space.

 *  Instead we move the normal IOMMU window to coincide with the hash page

 *  table, this region does not need to be part of the fixed mapping as no

 *  device should ever be DMA'ing to it. We then setup the fixed mapping

 *  from 0 to 32GB.

 We can be called for platform devices that have no of_node */

 Ignore empty ranges, they imply no translation required */

	/* dma-ranges format:

	 * child addr	: naddr cells

	 * parent addr	: pna cells

	 * size		: nsize cells

 Don't touch the dynamic region */

 The fixed mapping is only supported on axon machines */

 We must have dma-ranges properties for fixed mapping to work */

	/* The default setup is to have the fixed mapping sit after the

	 * dynamic region, so find the top of the largest IOMMU window

	 * on any axon, then add the size of RAM and that's our max value.

	 * If that is > 32GB we have to do other shennanigans.

 use the device tree window */

		/* If we're over 32 GB we need to cheat. We can't map all of

		 * RAM with the fixed mapping, and also fit the dynamic

		 * region. So try to place the dynamic region where the hash

		 * table sits, drivers never need to DMA to it, we don't

		 * need a fixed mapping for that area.

 The window must start and end on a segment boundary */

 Check the hash window fits inside the real DMA window */

 Setup the dynamic regions */

	/* If we can find a pcie-endpoint in the device tree assume that

	 * we're on a triblade or a CAB so by default the fixed mapping

	 * should be set to be weakly ordered; but only if the boot

	 * option WASN'T set for strong ordering

	/* If IOMMU is disabled or we have little enough RAM to not need

	 * to enable it, we setup a direct mapping.

	 *

	 * Note: should we make sure we have the IOMMU actually disabled ?

 Setup various callbacks */

 Create an iommu for each /axon node.  */

	/* Create an iommu for each toplevel /pci-internal node for

	 * old hardware/firmware

 Setup default PCI iommu ops */

	/* Register callbacks on OF platform device addition/removal

	 * to handle linking them to the right DMA operations

 SPDX-License-Identifier: GPL-2.0-only

/*

 * spu hypervisor abstraction for direct hardware access.

 *

 *  (C) Copyright IBM Deutschland Entwicklung GmbH 2005

 *  Copyright 2006 Sony Corp.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * System call callback functions for SPUs

/*

 * This table defines the system calls that an SPU can call.

 * It is currently a subset of the 64 bit powerpc system calls,

 * with the exact semantics.

 *

 * The reasons for disabling some of the system calls are:

 * 1. They interact with the way SPU syscalls are handled

 *    and we can't let them execute ever:

 *	restart_syscall, exit, for, execve, ptrace, ...

 * 2. They are deprecated and replaced by other means:

 *	uselib, pciconfig_*, sysfs, ...

 * 3. They are somewhat interacting with the system in a way

 *    we don't want an SPU to:

 *	reboot, init_module, mount, kexec_load

 * 4. They are optional and we can't rely on them being

 *    linked into the kernel. Unfortunately, the cond_syscall

 *    helper does not work here as it does not add the necessary

 *    opd symbols:

 *	mbind, mq_open, ipc, ...

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SPU file system -- system call stubs

 *

 * (C) Copyright IBM Deutschland Entwicklung GmbH 2005

 * (C) Copyright 2006-2007, IBM Corporation

 *

 * Author: Arnd Bergmann <arndb@de.ibm.com>

 protected by rcu */

 we don't need to rcu this, as we hold a reference to the module */

 !defined CONFIG_SPU_FS_MODULE */

 CONFIG_SPU_FS_MODULE */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * spu aware cpufreq governor for the cell processor

 *

 * © Copyright IBM Corporation 2006-2008

 *

 * Author: Christian Krafft <krafft@de.ibm.com>

 in µs */

 exp(-1) in fixed-point */

 fixed-point */

 µs */

 after cancel_delayed_work_sync we unset info->policy */

 initialize spu_gov_info for all affected cpus */

 setup timer */

 cancel timer */

 clean spu_gov_info for all affected cpus */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Cell Internal Interrupt Controller

 *

 * Copyright (C) 2006 Benjamin Herrenschmidt (benh@kernel.crashing.org)

 *                    IBM, Corp.

 *

 * (C) Copyright IBM Deutschland Entwicklung GmbH 2005

 *

 * Author: Arnd Bergmann <arndb@de.ibm.com>

 *

 * TODO:

 * - Fix various assumptions related to HW CPU numbers vs. linux CPU numbers

 *   vs node numbers in the setup code

 * - Implement proper handling of maxcpus=1/2 (that is, routing of irqs from

 *   a non-active node to the active node)

 Convert between "pending" bits and hw irq number */

 Decode IPIs */

 pre-ack edge interrupts */

 handle them */

 post-ack level interrupts */

 Get an IRQ number from the pending state register of the IIC */

 Use the highest interrupt priorities for IPI */

	/*

	 * If smp_request_message_ipi encounters an error it will notify

	 * the error.  If a message is not needed it will return non-zero.

 CONFIG_SMP */

 Check if node is in supported range */

 Build up interrupt number, special case for IO exceptions */

 Dummy flags, ignored by iic code */

	/* XXX FIXME: should locate the linux CPU number from the HW cpu

	 * number properly. We are lucky for now

		/* Setup cascade for IO exceptions. XXX cleanup tricks to get

		 * node vs CPU etc...

		 * Note that we configure the IIC_IRR here with a hard coded

		 * priority of 1. We might want to improve that later.

		/*

		 * irq_data is a generic pointer that gets passed back

		 * to us later, so the forced cast is fine.

 priority */ |

 dest node */ |

 route them to thread 0 */);

		/* Flush pending (make sure it triggers if there is

		 * anything pending

 Setup an irq host data structure */

 Discover and initialize iics */

 Set master interrupt handling function */

 Enable on current CPU */

 Set which node and thread will handle the next interrupt */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Cell Broadband Engine Performance Monitor

 *

 * (C) Copyright IBM Corporation 2001,2006

 *

 * Author:

 *    David Erb (djerb@us.ibm.com)

 *    Kevin Corry (kevcorry@us.ibm.com)

/*

 * When writing to write-only mmio addresses, save a shadow copy. All of the

 * registers are 32-bit, but stored in the upper-half of a 64-bit field in

 * pmd_regs.

/*

 * Physical counter registers.

 * Each physical counter can act as one 32-bit counter or two 16-bit counters.

 Read the latch or the actual counter, whichever is newer. */

		/* Writing to a counter only writes to a hardware latch.

		 * The new value is not propagated to the actual counter

		 * until the performance monitor is enabled.

			/* The counters are already active, so we need to

			 * rewrite the pm_control register to "re-enable"

			 * the PMU.

/*

 * "Logical" counter registers.

 * These will read/write 16-bits or 32-bits depending on the

 * current size of the counter. Counters 4 - 7 are always 16-bit.

/*

 * Counter-control registers.

 * Each "logical" counter has a corresponding control register.

/*

 * Other PMU control registers. Most of these are write-only.

/*

 * Get/set the size of a physical counter to either 16 or 32 bits.

/*

 * Enable/disable the entire performance monitoring unit.

 * When we enable the PMU, all pending writes to counters get committed.

/*

 * Reading from the trace_buffer.

 * The trace buffer is two 64-bit registers. Reading from

 * the second half automatically increments the trace_address.

/*

 * Enabling/disabling interrupts for the entire performance monitoring unit.

 Reading pm_status clears the interrupt bits. */

 Set which node and thread will handle the next interrupt. */

 Enable the interrupt bits in the pm_status register. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * driver for powerbutton on IBM cell blades

 *

 * (C) Copyright IBM Corp. 2005-2008

 *

 * Author: Christian Krafft <krafft@de.ibm.com>

	/* this makes the button look like an acpi power button

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Low-level SPU handling

 *

 * (C) Copyright IBM Deutschland Entwicklung GmbH 2005

 *

 * Author: Arnd Bergmann <arndb@de.ibm.com>

/*

 * The spufs fault-handling code needs to call force_sig_fault to raise signals

 * on DMA errors. Export it here to avoid general kernel-wide access to this

 * function

/*

 * Protects cbe_spu_info and spu->number.

/*

 * List of all spus in the system.

 *

 * This list is iterated by callers from irq context and callers that

 * want to sleep.  Thus modifications need to be done with both

 * spu_full_list_lock and spu_full_list_mutex held, while iterating

 * through it requires either of these locks.

 *

 * In addition spu_full_list_lock protects all assignments to

 * spu->mm.

/* This is called by the MM core when a segment size is changed, to

 * request a flush of all the SPEs using a given mm

/* The hack below stinks... try to do something better one of

 * these days... Does it even work properly with NR_CPUS == 1 ?

 Global TLBIE broadcast required with SPEs. */

 set invalid before writing vsid */

 now it's safe to write the vsid */

 setting the new esid makes the entry valid again */

XXX

	/*

	 * Handle kernel space hash faults immediately. User hash

	 * faults need to be deferred to process context.

/**

 * Given an array of @nr_slbs SLB entries, @slbs, return non-zero if the

 * address @new_addr is present.

/**

 * Setup the SPU kernel SLBs, in preparation for a context save/restore. We

 * need to map both the context save area, and the save/restore code.

 *

 * Because the lscsa and code may cross segment boundaries, we check to see

 * if mappings are required for the start and end of each range. We currently

 * assume that the mappings are smaller that one segment - if not, something

 * is seriously wrong.

 start and end addresses of both mappings */

	/* check the set of addresses, and create a new entry in the slbs array

 Add the set of SLBs */

 atomically read & clear class1 status. */

 ignore interrupts we're not waiting for */

	/* mailbox interrupts are level triggered. mask them now before

 acknowledge all interrupts before the callbacks */

 initialize all channel data to zero */

 initialize channel counts to meaningful values */

 we're in trouble here, but try unwinding anyway */

	/*

	 * If the spu is idle or the context is stopped, utilization

	 * statistics are not updated.  Apply the time delta from the

	 * last recorded state of the spu.

 Enough for current hardware */

 create system subsystem for spus */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2006-2008, IBM Corporation.

	/* Todo: do some nicer parsing of bits and based on them go down

	 * to other sub-units FIRs and not only IIC

	/*

	 * Nothing implemented for the maintenance interrupt at this point

	/*

	 * Nothing implemented for the thermal interrupt at this point

 No recovery from this code now, lets continue */

	/*

	 * We move the ptcal area to the middle of the allocated

	 * page, in order to avoid prefetches in memcpy and similar

	 * functions stepping on it.

 support for malta device trees, with be@/mic@ nodes */

 support for older device tree - use cpu nodes */

 disable ptcal on this node */

 ensure we can access the PTCAL area */

 clean up */

 Enable JTAG system-reset hack */

	/*

	 * The BMC can inject user triggered system reset exceptions,

	 * but cannot set the system reset reason in srr1,

	 * so check an extra register here.

 CONFIG_PPC_IBM_CELL_RESETBUTTON */

	/*

	 * Enable System Error & thermal interrupts and wakeup conditions

	/*

	 * Install machine check handler. Leave setting of precise mode to

	 * what the firmware did for now

	/*

	 * For now, we assume that IOC_FIR is already set to forward some

	 * error conditions to the System Error handler. If that is not true

	 * then it will have to be fixed up here.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * spu management operations for of based platforms

 *

 * (C) Copyright IBM Deutschland Entwicklung GmbH 2005

 * Copyright 2006 Sony Corp.

 * (C) Copyright 2007 TOSHIBA CORPORATION

 new device trees should provide the physical-id attribute */

 celleb device tree provides the unit-id */

 legacy device trees provide the id in the reg attribute */

 Get the interrupt source unit from the device-tree */

 Add the node number */

 Now map interrupts of all 3 classes */

 Right now, we only fail if class 2 failed */

 we use local store as ram, not io memory */

 Hardcoded affinity idxs for qs20 */

		/*

		 * Walk through each phandle in vicinity property of the spu

		 * (tipically two vicinity phandles per spe node)

				/*

				 * "mic-tm" and "bif0" nodes do not have

				 * vicinity property. So we need to find the

				 * spe which has vic_dn as neighbour, but

				 * skipping the one we came from (last_spu_dn)

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SMP support for BPA machines.

 *

 * Dave Engebretsen, Peter Bergner, and

 * Mike Corrigan {engebret|bergner|mikec}@us.ibm.com

 *

 * Plus various changes from other IBM teams...

/*

 * The Primary thread of each non-boot processor was started from the OF client

 * interface by prom_hold_cpus and is spinning on secondary_hold_spinloop.

/**

 * smp_startup_cpu() - start the given cpu

 *

 * At boot time, there is nothing to do for primary threads which were

 * started from Open Firmware.  For anything else, call RTAS with the

 * appropriate start location.

 *

 * Returns:

 *	0	- failure

 *	1	- success

 Already started by OF and sitting in spin loop */

	/*

	 * If the RTAS start-cpu token does not exist then presume the

	 * cpu is already spinning.

	/*

	 * change default DABRX to allow user watchpoints

	/*

	 * The processor is currently spinning, waiting for the

	 * cpu_start field to become non-zero After we set cpu_start,

	 * the processor will continue on to secondary_start

 This is called very early */

 Mark threads which are still spinning in hold loops. */

 Non-lpar has additional take/give timebase */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cbe_regs.c

 *

 * Accessor routines for the various MMIO register blocks of the CBE

 *

 * (c) 2006 Benjamin Herrenschmidt <benh@kernel.crashing.org>, IBM Corp.

/*

 * Current implementation uses "cpu" nodes. We build our own mapping

 * array of cpu numbers to cpu nodes locally for now to allow interrupt

 * time code to have a fast path rather than call of_get_cpu_node(). If

 * we implement cpu hotplug, we'll have to install an appropriate norifier

 * in order to release references to the cpu going away

 walk up path until cpu or be node was found */

 on a correct devicetree we wont get up to root */

		/*

		 * the CAB SLOF tree is non compliant, so we just assume

		 * there is only one node

 That hack must die die die ! */

 Build local fast map of CPUs */

 Find maps for each device tree CPU */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * thermal support for the cell processor

 *

 * This module adds some sysfs attributes to cpu and spu nodes.

 * Base for measurements are the digital thermal sensors (DTS)

 * located on the chip.

 * The accuracy is 2 degrees, starting from 65 up to 125 degrees celsius

 * The attributes can be found under

 * /sys/devices/system/cpu/cpuX/thermal

 * /sys/devices/system/spu/spuX/thermal

 *

 * The following attributes are added for each node:

 * temperature:

 *	contains the current temperature measured by the DTS

 * throttle_begin:

 *	throttling begins when temperature is greater or equal to

 *	throttle_begin. Setting this value to 125 prevents throttling.

 * throttle_end:

 *	throttling is being ceased, if the temperature is lower than

 *	throttle_end. Due to a delay between applying throttling and

 *	a reduced temperature this value should be less than throttle_begin.

 *	A value equal to throttle_begin provides only a very little hysteresis.

 * throttle_full_stop:

 *	If the temperatrue is greater or equal to throttle_full_stop,

 *	full throttling is applied to the cpu or spu. This value should be

 *	greater than throttle_begin and throttle_end. Setting this value to

 *	65 prevents the unit from running code at all.

 *

 * (C) Copyright IBM Deutschland Entwicklung GmbH 2005

 *

 * Author: Christian Krafft <krafft@de.ibm.com>

 returns the value for a given spu in a given register */

 access the corresponding byte */

 zero out bits for new value */

 set bits to new value */

/* shows the temperature of the DTS on the PPE,

 shows the temperature of the second DTS on the PPE */

/*

 * initialize throttling with default values

 TPR defaults */

	/* ppe

	 *	1F - no full stop

	 *	08 - dynamic throttling starts if over 80 degrees

	/* spe

	 *	10 - full stopped when over 96 degrees

	 *	08 - dynamic throttling starts if over 80 degrees

	 *	03 - dynamic throttling ceases if below 70 degrees

 STR defaults */

	/* str1

	 *	10 - stop 16 of 32 cycles

	/* str2

	 *	10 - stop 16 of 32 cycles

 CR defaults */

	/* cr1

	 *	4 - normal operation

	/* cr2

	 *	4 - normal operation

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * External Interrupt Controller on Spider South Bridge

 *

 * (C) Copyright IBM Deutschland Entwicklung GmbH 2005

 *

 * Author: Arnd Bergmann <arndb@de.ibm.com>

 register layout taken from Spider spec, table 7.4-4 */

 Detection Enable Register */

 Mask Level Register */

 Edge Detection Clear Register */

 Pending Register A */

 Pending Register B */

 Current Status Register */

 Level Current Status Register A */

 Level Current Status Register B */

 Level Current Status Register C */

 Level Current Status Register D */

 Setting Register A0 */

 Setting Register B0 */

 0x208 ... 0x3ff Setting Register An/Bn */

 Packet Pending Register A */

 Packet Pending Register B */

 Packet Output Error Register A */

 Packet Output Error Register B */

 Packet Output Enable Register */

 Packet Output Pending Register */

 Spider Device ID Register */

 Reissue Command Timeout Time Setting */

 Reissue Command Timeout Setting */

 Reissue Wait Control*/

	/* Reset edge detection logic if necessary

 Only interrupts 47 to 50 can be set to edge */

 Perform the clear of the edge logic */

 Note that only level high is supported for most interrupts */

 Decode sense type */

	/* Configure the source. One gross hack that was there before and

	 * that I've kept around is the priority to the BE which I set to

	 * be the same as the interrupt source number. I don't know whether

	 * that's supposed to make any kind of sense however, we'll have to

	 * decide that, but for now, I'm not changing the behaviour.

 Set default irq type */

	/* Spider interrupts have 2 cells, first is the interrupt source,

	 * second, well, I don't know for sure yet ... We mask the top bits

	 * because old device-trees encode a node number in there

/* For hooking up the cascade we have a problem. Our device-tree is

 * crap and we don't know on which BE iic interrupt we are hooked on at

 * least not the "standard" way. We can reconstitute it based on two

 * informations though: which BE node we are connected to and whether

 * we are connected to IOIF0 or IOIF1. Right now, we really only care

 * about the IBM cell blade and we know that its firmware gives us an

 * interrupt-map property which is pretty strange.

	/* First, we check whether we have a real "interrupts" in the device

	 * tree in case the device-tree is ever fixed

 Now do the horrible hacks */

 Assume unit is last entry of interrupt specifier */

 Ok, we have a unit, now let's try to get the node */

 ugly as hell but works for now */

	/* Ok, now let's get cracking. You may ask me why I just didn't match

	 * the iic host from the iic OF node, but that way I'm still compatible

	 * with really really old old firmwares for which we don't have a node

 Manufacture an IIC interrupt number of class 2 */

 Map registers */

 Allocate a host */

 Go through all sources and disable them */

 do not mask any interrupts because of level */

 enable interrupt packets to be output */

 Hook up the cascade interrupt to the iic and nodeid */

 Enable the interrupt detection enable bit. Do this last! */

	/* XXX node numbers are totally bogus. We _hope_ we get the device

	 * nodes in the right order here but that's definitely not guaranteed,

	 * we need to get the node from the device tree instead.

	 * There is currently no proper property for it (but our whole

	 * device-tree is bogus anyway) so all we can do is pray or maybe test

	 * the address and deduce the node-id

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * CBE Pervasive Monitor and Debug

 *

 * (C) Copyright IBM Corporation 2005

 *

 * Authors: Maximino Aguilar (maguilar@us.ibm.com)

 *          Michael N. Day (mnday@us.ibm.com)

 Ensure our interrupt state is properly tracked */

 Enable DEC and EE interrupt request */

	/*

	 * go into low thread priority, medium priority will be

	 * restored for us after wake-up.

	/*

	 * atomically disable thread execution and runlatch.

	 * External and Decrementer exceptions are still handled when the

	 * thread is disabled but now enter in cbe_system_reset_exception()

 Re-enable interrupts in MSR */

		/*

		 * Handle these when interrupts get re-enabled and we take

		 * them as regular exceptions. We are in an NMI context

		 * and can't handle these here.

 CONFIG_CBE_RAS */

 do system reset */

 everything handled */

 Enable Pause(0) control bit */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2007, Michael Ellerman, IBM Corporation.

/*

 * MSIC registers, specified as offsets from dcr_base

 Base Address registers specify FIFO location in BE memory */

 Hold the read/write offsets into the FIFO */

 MSIC control register flags */

/*

 * The MSIC can be configured to use a FIFO of 32KB, 64KB, 128KB or 256KB.

 * Currently we're using a 64KB FIFO size.

/*

 * To configure the FIFO size as (1 << n) bytes, we write (n - 15) into bits

 * 8-9 of the MSIC control reg.

/*

 * We need to mask the read/write offsets to make sure they stay within

 * the bounds of the FIFO. Also they should always be 16-byte aligned.

 Each entry in the FIFO is 16 bytes, the first 4 bytes hold the irq # */

 write_offset doesn't wrap properly, so we have to mask it */

			/*

			 * Reading the MSIC_WRITE_OFFSET_REG does not

			 * reliably flush the outstanding DMA to the

			 * FIFO buffer. Here we were reading stale

			 * data, so we need to retry.

 We rely on being able to stash a virq in a u16, so limit irqs to < 65536 */

 Enable the MSIC hardware */

 DEBUG */

 SPDX-License-Identifier: GPL-2.0-or-later

/* backing_ops.c - query/set operations on saved SPU context.

 *

 * Copyright (C) IBM 2005

 * Author: Mark Nutter <mnutter@us.ibm.com>

 *

 * These register operations allow SPUFS to operate on saved

 * SPU contexts rather than hardware.

/*

 * Reads/writes to various problem and priv2 registers require

 * state changes, i.e.  generate SPU events, modify channel

 * counts, etc.

		/* Read the first available word.

		 * Implementation note: the depth

		 * of pu_mb_R is currently 1.

	/* if the requested event is there, return the poll

	   mask, otherwise enable the interrupt to get notified,

	   but first mark any pending interrupts as done so

		/* Read the first available word.

		 * Implementation note: the depth

		 * of puint_mb_R is currently 1.

 make sure we get woken up by the interrupt */

		/* We have space to write wbox_data.

		 * Implementation note: the depth

		 * of spu_mb_W is currently 4.

		/* make sure we get woken up by the interrupt when space

 FIXME: what are the side-effects of this? */

	/* In the current implementation, the SPU context is always

	 * acquired in runnable state when new bits are added to the

	 * mask (tagwait), so it's sufficient just to mask

	 * dma_tagstatus_R with the 'mask' parameter here.

 FIXME: set up priv2->puq */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SPU file system -- SPU context management

 *

 * (C) Copyright IBM Deutschland Entwicklung GmbH 2005

 *

 * Author: Arnd Bergmann <arndb@de.ibm.com>

	/* Binding to physical processor deferred

	 * until spu_activate().

 give up the mm reference when the context is about to be destroyed */

	/*

	 * This is basically an open-coded spu_acquire_saved, except that

	 * we don't acquire the state mutex interruptible, and we don't

	 * want this context to be rescheduled on release.

/**

 * spu_acquire_saved - lock spu contex and make sure it is in saved state

 * @ctx:	spu contex to lock

/**

 * spu_release_saved - unlock spu context and return it to the runqueue

 * @ctx:	context to unlock

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SPU core dump code

 *

 * (C) Copyright 2006 IBM Corp.

 *

 * Author: Dwayne Grant McConnell <decimal@us.ibm.com>

/*

 * The additional architecture-specific notes for Cell are various

 * context files in the spu context.

 *

 * This function iterates over all open file descriptors and sees

 * if they are a directory in spufs.  In that case we use spufs

 * internal functionality to dump them without needing to actually

 * open the files.

/*

 * descriptor table is not shared, so files can't change or go away.

 start searching the next fd next time */

 count trailing the NULL: */

 start searching the next fd next time */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * spu_switch.c

 *

 * (C) Copyright IBM Corp. 2005

 *

 * Author: Mark Nutter <mnutter@us.ibm.com>

 *

 * Host-side part of SPU context switch sequence outlined in

 * Synergistic Processor Element, Book IV.

 *

 * A fully premptive switch of an SPE is very expensive in terms

 * of time and system resources.  SPE Book IV indicates that SPE

 * allocation should follow a "serially reusable device" model,

 * in which the SPE is assigned a task until it completes.  When

 * this is not possible, this sequence may be used to premptively

 * save, and then later (optionally) restore the context of a

 * program executing on an SPE.

 debug */

	/* Save, Step 1:

	 * Restore, Step 1:

	 *    Acquire SPU-specific mutual exclusion lock.

	 *    TBD.

	/* Restore, Step 76:

	 *    Release SPU-specific mutual exclusion lock.

	 *    TBD.

	/* Save, Step 2:

	 * Save, Step 6:

	 *     If SPU_Status[E,L,IS] any field is '1', this

	 *     SPU is in isolate state and cannot be context

	 *     saved at this time.

	/* Save, Step 3:

	 * Restore, Step 2:

	 *     Save INT_Mask_class0 in CSA.

	 *     Write INT_MASK_class0 with value of 0.

	 *     Save INT_Mask_class1 in CSA.

	 *     Write INT_MASK_class1 with value of 0.

	 *     Save INT_Mask_class2 in CSA.

	 *     Write INT_MASK_class2 with value of 0.

	 *     Synchronize all three interrupts to be sure

	 *     we no longer execute a handler on another CPU.

	/*

	 * This flag needs to be set before calling synchronize_irq so

	 * that the update will be visible to the relevant handlers

	 * via a simple load.

	/* Save, Step 4:

	 * Restore, Step 25.

	 *    Set a software watchdog timer, which specifies the

	 *    maximum allowable time for a context save sequence.

	 *

	 *    For present, this implementation will not set a global

	 *    watchdog timer, as virtualization & variable system load

	 *    may cause unpredictable execution times.

	/* Save, Step 5:

	 * Restore, Step 3:

	 *     Inhibit user-space access (if provided) to this

	 *     SPU by unmapping the virtual pages assigned to

	 *     the SPU memory-mapped I/O (MMIO) for problem

	 *     state. TBD.

	/* Save, Step 7:

	 * Restore, Step 5:

	 *     Set a software context switch pending flag.

	 *     Done above in Step 3 - disable_interrupts().

	/* Save, Step 8:

	 *     Suspend DMA and save MFC_CNTL.

	/* Save, Step 9:

	 *     Save SPU_Runcntl in the CSA.  This value contains

	 *     the "Application Desired State".

	/* Save, Step 10:

	 *     Save MFC_SR1 in the CSA.

	/* Save, Step 11:

	 *     Read SPU_Status[R], and save to CSA.

	/* Save, Step 12:

	 *     Read MFC_CNTL[Ds].  Update saved copy of

	 *     CSA.MFC_CNTL[Ds].

	 *

	 * update: do the same with MFC_CNTL[Q].

	/* Save, Step 13:

	 *     Write MFC_CNTL[Dh] set to a '1' to halt

	 *     the decrementer.

	/* Save, Step 14:

	 *    Read PPE Timebase High and Timebase low registers

	 *    and save in CSA.  TBD.

	/* Save, Step 15:

	 *     Remove other SPU access to this SPU by unmapping

	 *     this SPU's pages from their address space.  TBD.

	/* Save, Step 16:

	 * Restore, Step 11.

	 *     Write SPU_MSSync register. Poll SPU_MSSync[P]

	 *     for a value of 0.

	/* Save, Step 17:

	 * Restore, Step 12.

	 * Restore, Step 48.

	 *     Write TLB_Invalidate_Entry[IS,VPN,L,Lp]=0 register.

	 *     Then issue a PPE sync instruction.

	/* Save, Step 18:

	 *     Handle any pending interrupts from this SPU

	 *     here.  This is OS or hypervisor specific.  One

	 *     option is to re-enable interrupts to handle any

	 *     pending interrupts, with the interrupt handlers

	 *     recognizing the software Context Switch Pending

	 *     flag, to ensure the SPU execution or MFC command

	 *     queue is not restarted.  TBD.

	/* Save, Step 19:

	 *     If MFC_Cntl[Se]=0 then save

	 *     MFC command queues.

	/* Save, Step 20:

	 *     Save the PPU_QueryMask register

	 *     in the CSA.

	/* Save, Step 21:

	 *     Save the PPU_QueryType register

	 *     in the CSA.

	/* Save the Prxy_TagStatus register in the CSA.

	 *

	 * It is unnecessary to restore dma_tagstatus_R, however,

	 * dma_tagstatus_R in the CSA is accessed via backing_ops, so

	 * we must save it.

	/* Save, Step 22:

	 *     Save the MFC_CSR_TSQ register

	 *     in the LSCSA.

	/* Save, Step 23:

	 *     Save the MFC_CSR_CMD1 and MFC_CSR_CMD2

	 *     registers in the CSA.

	/* Save, Step 24:

	 *     Save the MFC_CSR_ATO register in

	 *     the CSA.

	/* Save, Step 25:

	 *     Save the MFC_TCLASS_ID register in

	 *     the CSA.

	/* Save, Step 26:

	 * Restore, Step 23.

	 *     Write the MFC_TCLASS_ID register with

	 *     the value 0x10000000.

	/* Save, Step 27:

	 * Restore, Step 14.

	 *     Write MFC_CNTL[Pc]=1 (purge queue).

	/* Save, Step 28:

	 *     Poll MFC_CNTL[Ps] until value '11' is read

	 *     (purge complete).

	/* Save, Step 30:

	 * Restore, Step 18:

	 *     Write MFC_SR1 with MFC_SR1[D=0,S=1] and

	 *     MFC_SR1[TL,R,Pr,T] set correctly for the

	 *     OS specific environment.

	 *

	 *     Implementation note: The SPU-side code

	 *     for save/restore is privileged, so the

	 *     MFC_SR1[Pr] bit is not set.

	 *

	/* Save, Step 31:

	 *     Save SPU_NPC in the CSA.

	/* Save, Step 32:

	 *     Save SPU_PrivCntl in the CSA.

	/* Save, Step 33:

	 * Restore, Step 16:

	 *     Write SPU_PrivCntl[S,Le,A] fields reset to 0.

	/* Save, Step 34:

	 *     Save SPU_LSLR in the CSA.

	/* Save, Step 35:

	 * Restore, Step 17.

	 *     Reset SPU_LSLR.

	/* Save, Step 36:

	 *     Save SPU_Cfg in the CSA.

	/* Save, Step 37:

	 *     Save PM_Trace_Tag_Wait_Mask in the CSA.

	 *     Not performed by this implementation.

	/* Save, Step 38:

	 *     Save RA_GROUP_ID register and the

	 *     RA_ENABLE reigster in the CSA.

	/* Save, Step 39:

	 *     Save MB_Stat register in the CSA.

	/* Save, Step 40:

	 *     Save the PPU_MB register in the CSA.

	/* Save, Step 41:

	 *     Save the PPUINT_MB register in the CSA.

	/* Save, Step 42:

 Save CH 1, without channel count */

 Save the following CH: [0,3,4,24,25,27] */

	/* Save, Step 43:

	 *     Save SPU Read Mailbox Channel.

	/* Save, Step 44:

	 *     Save MFC_CMD Channel.

	/* Save, Step 45:

	 *     Reset the following CH: [21, 23, 28, 30]

	/* Save, Step 46:

	 * Restore, Step 25.

	 *     Write MFC_CNTL[Sc]=0 (resume queue processing).

	/* Save, Step 47:

	 * Restore, Step 30.

	 *     If MFC_SR1[R]=1, write 0 to SLB_Invalidate_All

	 *     register, then initialize SLB_VSID and SLB_ESID

	 *     to provide access to SPU context save code and

	 *     LSCSA.

	 *

	 *     This implementation places both the context

	 *     switch code and LSCSA in kernel address space.

	 *

	 *     Further this implementation assumes that the

	 *     MFC_SR1[R]=1 (in other words, assume that

	 *     translation is desired by OS environment).

	/* Save, Step 48:

	 * Restore, Step 23.

	 *     Change the software context switch pending flag

	 *     to context switch active.  This implementation does

	 *     not uses a switch active flag.

	 *

	 * Now that we have saved the mfc in the csa, we can add in the

	 * restart command if an exception occurred.

	/* Save, Step 49:

	 * Restore, Step 22:

	 *     Reset and then enable interrupts, as

	 *     needed by OS.

	 *

	 *     This implementation enables only class1

	 *     (translation) interrupts.

	/* Save, Step 50:

	 *     Issue a DMA command to copy the first 16K bytes

	 *     of local storage to the CSA.

	/* Save, Step 51:

	 * Restore, Step 31.

	 *     Write SPU_NPC[IE]=0 and SPU_NPC[LSA] to entry

	 *     point address of context save code in local

	 *     storage.

	 *

	 *     This implementation uses SPU-side save/restore

	 *     programs with entry points at LSA of 0.

	/* Save, Step 52:

	 * Restore, Step 32:

	 *    Write SPU_Sig_Notify_1 register with upper 32-bits

	 *    of the CSA.LSCSA effective address.

	/* Save, Step 53:

	 * Restore, Step 33:

	 *    Write SPU_Sig_Notify_2 register with lower 32-bits

	 *    of the CSA.LSCSA effective address.

	/* Save, Step 54:

	 *     Issue a DMA command to copy context save code

	 *     to local storage and start SPU.

	/* Save, Step 55:

	 * Restore, Step 38.

	 *     Write PPU_QueryMask=1 (enable Tag Group 0)

	 *     and issue eieio instruction.

	/* Save, Step 56:

	 * Restore, Step 39.

	 * Restore, Step 39.

	 * Restore, Step 46.

	 *     Poll PPU_TagStatus[gn] until 01 (Tag group 0 complete)

	 *     or write PPU_QueryType[TS]=01 and wait for Tag Group

	 *     Complete Interrupt.  Write INT_Stat_Class0 or

	 *     INT_Stat_Class2 with value of 'handled'.

	/* Save, Step 57:

	 * Restore, Step 40.

	 *     Poll until SPU_Status[R]=0 or wait for SPU Class 0

	 *     or SPU Class 2 interrupt.  Write INT_Stat_class0

	 *     or INT_Stat_class2 with value of handled.

	/* Save, Step 54:

	 *     If SPU_Status[P]=1 and SPU_Status[SC] = "success",

	 *     context save succeeded, otherwise context save

	 *     failed.

	/* Restore, Step 4:

	 *    If required, notify the "using application" that

	 *    the SPU task has been terminated.  TBD.

	/* Restore, Step 7:

	 *     Write MFC_Cntl[Dh,Sc,Sm]='1','1','0' to suspend

	 *     the queue and halt the decrementer.

	/* Restore, Step 8:

	 * Restore, Step 47.

	 *     Poll MFC_CNTL[Ss] until 11 is returned.

	/* Restore, Step 9:

	 *    If SPU_Status[R]=1, stop SPU execution

	 *    and wait for stop to complete.

	 *

	 *    Returns       1 if SPU_Status[R]=1 on entry.

	 *                  0 otherwise

	/* Restore, Step 10:

	 *    If SPU_Status[R]=0 and SPU_Status[E,L,IS]=1,

	 *    release SPU from isolate state.

	/* Restore, Step 20:

 Reset CH 1 */

 Reset the following CH: [0,3,4,24,25,27] */

	/* Restore, Step 21:

	 *     Reset the following CH: [21, 23, 28, 29, 30]

	/* Restore, Step 27:

	 *     If the CSA.SPU_Status[I,S,H,P]=1 then add the correct

	 *     instruction sequence to the end of the SPU based restore

	 *     code (after the "context restored" stop and signal) to

	 *     restore the correct SPU status.

	 *

	 *     NOTE: Rather than modifying the SPU executable, we

	 *     instead add a new 'stopped_status' field to the

	 *     LSCSA.  The SPU-side restore reads this field and

	 *     takes the appropriate action when exiting.

		/* SPU_Status[P,I]=1 - Illegal Instruction followed

		 * by Stop and Signal instruction, followed by 'br -4'.

		 *

		/* SPU_Status[P,H]=1 - Halt Conditional, followed

		 * by Stop and Signal instruction, followed by

		 * 'br -4'.

		/* SPU_Status[S,P]=1 - Stop and Signal instruction

		 * followed by 'br -4'.

		/* SPU_Status[S,I]=1 - Illegal instruction followed

		 * by 'br -4'.

		/* SPU_Status[P]=1 - Stop and Signal instruction

		 * followed by 'br -4'.

		/* SPU_Status[H]=1 - Halt Conditional, followed

		 * by 'br -4'.

		/* SPU_Status[S]=1 - Two nop instructions.

		/* SPU_Status[I]=1 - Illegal instruction followed

		 * by 'br -4'.

	/* Restore, Step 28:

	 *     If the CSA.SPU_Status[I,S,H,P,R]=0 then

	 *     add a 'br *' instruction to the end of

	 *     the SPU based restore code.

	 *

	 *     NOTE: Rather than modifying the SPU executable, we

	 *     instead add a new 'stopped_status' field to the

	 *     LSCSA.  The SPU-side restore reads this field and

	 *     takes the appropriate action when exiting.

	/* Restore, Step 29:

	 *     Restore RA_GROUP_ID register and the

	 *     RA_ENABLE reigster from the CSA.

	/* Restore, Step 37:

	 *     Issue MFC DMA command to copy context

	 *     restore code to local storage.

	/* Restore, Step 34:

	 *     If CSA.MFC_CNTL[Ds]=1 (decrementer was

	 *     running) then adjust decrementer, set

	 *     decrementer running status in LSCSA,

	 *     and set decrementer "wrapped" status

	 *     in LSCSA.

	/* Restore, Step 35:

	 *     Copy the CSA.PU_MB data into the LSCSA.

	/* Restore, Step 36:

	 *     Copy the CSA.PUINT_MB data into the LSCSA.

	/* Restore, Step 40:

	 *     If SPU_Status[P]=1 and SPU_Status[SC] = "success",

	 *     context restore succeeded, otherwise context restore

	 *     failed.

	/* Restore, Step 41:

	 *     Restore SPU_PrivCntl from the CSA.

	/* Restore, Step 42:

	 *     If any CSA.SPU_Status[I,S,H,P]=1, then

	 *     restore the error or single step state.

	/* Restore, Step 43:

	 *     If all CSA.SPU_Status[I,S,H,P,R]=0 then write

	 *     SPU_RunCntl[R0R1]='01', wait for SPU_Status[R]=1,

	 *     then write '00' to SPU_RunCntl[R0R1] and wait

	 *     for SPU_Status[R]=0.

	/* Restore, Step 44:

	 *     Issue a DMA command to restore the first

	 *     16kb of local storage from CSA.

	/* Restore, Step 47.

	 *     Write MFC_Cntl[Sc,Sm]='1','0' to suspend

	 *     the queue.

	/* Restore, Step 49:

	 *     Write INT_MASK_class0 with value of 0.

	 *     Write INT_MASK_class1 with value of 0.

	 *     Write INT_MASK_class2 with value of 0.

	 *     Write INT_STAT_class0 with value of -1.

	 *     Write INT_STAT_class1 with value of -1.

	 *     Write INT_STAT_class2 with value of -1.

	/* Restore, Step 50:

	 *     If MFC_Cntl[Se]!=0 then restore

	 *     MFC command queues.

	/* Restore, Step 51:

	 *     Restore the PPU_QueryMask register from CSA.

	/* Restore, Step 52:

	 *     Restore the PPU_QueryType register from CSA.

	/* Restore, Step 53:

	 *     Restore the MFC_CSR_TSQ register from CSA.

	/* Restore, Step 54:

	 *     Restore the MFC_CSR_CMD1 and MFC_CSR_CMD2

	 *     registers from CSA.

	/* Restore, Step 55:

	 *     Restore the MFC_CSR_ATO register from CSA.

	/* Restore, Step 56:

	 *     Restore the MFC_TCLASS_ID register from CSA.

	/* Restore, Step 57:

	 *    Set the Lock Line Reservation Lost Event by:

	 *      1. OR CSA.SPU_Event_Status with bit 21 (Lr) set to 1.

	 *      2. If CSA.SPU_Channel_0_Count=0 and

	 *         CSA.SPU_Wr_Event_Mask[Lr]=1 and

	 *         CSA.SPU_Event_Status[Lr]=0 then set

	 *         CSA.SPU_Event_Status_Count=1.

	/* Restore, Step 58:

	 *     If the status of the CSA software decrementer

	 *     "wrapped" flag is set, OR in a '1' to

	 *     CSA.SPU_Event_Status[Tm].

	/* Restore, Step 59:

	 *	Restore the following CH: [0,3,4,24,25,27]

	/* Restore, Step 60:

	 *     Restore the following CH: [9,21,23].

	/* Restore, Step 61:

	 *     Restore the SPU_LSLR register from CSA.

	/* Restore, Step 62:

	 *     Restore the SPU_Cfg register from CSA.

	/* Restore, Step 63:

	 *     Restore PM_Trace_Tag_Wait_Mask from CSA.

	 *     Not performed by this implementation.

	/* Restore, Step 64:

	 *     Restore SPU_NPC from CSA.

	/* Restore, Step 65:

	 *     Restore MFC_RdSPU_MB from CSA.

	/* Restore, Step 66:

	 *     If CSA.MB_Stat[P]=0 (mailbox empty) then

	 *     read from the PPU_MB register.

	/* Restore, Step 66:

	 *     If CSA.MB_Stat[I]=0 (mailbox empty) then

	 *     read from the PPUINT_MB register.

	/* Restore, Step 69:

	 *     Restore the MFC_SR1 register from CSA.

	/* Restore, Step 70:

	 *     Restore other SPU mappings to this SPU. TBD.

	/* Restore, Step 71:

	 *     If CSA.SPU_Status[R]=1 then write

	 *     SPU_RunCntl[R0R1]='01'.

	/* Restore, Step 72:

	 *    Restore the MFC_CNTL register for the CSA.

	/*

	 * The queue is put back into the same state that was evident prior to

	 * the context switch. The suspend flag is added to the saved state in

	 * the csa, if the operational state was suspending or suspended. In

	 * this case, the code that suspended the mfc is responsible for

	 * continuing it. Note that SPE faults do not change the operational

	 * state of the spu.

	/* Restore, Step 73:

	 *     Enable user-space access (if provided) to this

	 *     SPU by mapping the virtual pages assigned to

	 *     the SPU memory-mapped I/O (MMIO) for problem

	 *     state. TBD.

	/* Restore, Step 74:

	 *     Reset the "context switch active" flag.

	 *     Not performed by this implementation.

	/* Restore, Step 75:

	 *     Re-enable SPU interrupts.

	/*

	 * Combined steps 2-18 of SPU context save sequence, which

	 * quiesce the SPU state (disable SPU execution, MFC command

	 * queues, decrementer, SPU interrupts, etc.).

	 *

	 * Returns      0 on success.

	 *              2 if failed step 2.

	 *              6 if failed step 6.

 Step 2. */

 Step 3. */

 Step 4. */

 Step 5. */

 Step 6. */

 Step 7. */

 Step 8. */

 Step 9. */

 Step 10. */

 Step 11. */

 Step 12. */

 Step 13. */

 Step 14. */

 Step 15. */

 Step 16. */

 Step 17. */

 Step 18. */

	/*

	 * Combine steps 19-44 of SPU context save sequence, which

	 * save regions of the privileged & problem state areas.

 Step 19. */

 Step 20. */

 Step 21. */

 NEW.     */

 Step 22. */

 Step 23. */

 Step 24. */

 Step 25. */

 Step 26. */

 Step 26a - moved from 44. */

 Step 27. */

 Step 28. */

 Step 30. */

 Step 31. */

 Step 32. */

 Step 33. */

 Step 34. */

 Step 35. */

 Step 36. */

 Step 37. */

 Step 38. */

 Step 39. */

 Step 40. */

 Step 41. */

 Step 42. */

 Step 43. */

 Step 45. */

	/*

	 * Perform steps 46-57 of SPU context save sequence,

	 * which save regions of the local store and register

	 * file.

 Step 46. */

 Step 47. */

 Step 48. */

 Step 49. */

 Step 50. */

 Step 51. */

 Step 52. */

 Step 53. */

 Step 54. */

 Step 55. */

 Step 56. */

 Step 57. */

 Stop SPE execution and wait for completion. */

 Restart SPE master runcntl. */

 Initiate isolate exit request and wait for completion. */

 Reset load request to normal. */

/**

 * stop_spu_isolate

 *	Check SPU run-control state and force isolated

 *	exit function as necessary.

		/* The SPU is in isolated state; the only way

		 * to get it out is to perform an isolated

		 * exit (clean) operation.

	/*

	 * Perform steps 2-25 of SPU context restore sequence,

	 * which resets an SPU either after a failed save, or

	 * when using SPU for first time.

 Step 2.  */

 Step 3.  */

 Step 4.  */

 Step 5.  */

 NEW.     */

 Step 6.  */

 Step 7.  */

 Step 8.  */

 Step 9.  */

 Step 10. */

 Step 11. */

 Step 12. */

 Step 13. */

 Step 14. */

 Step 15. */

 Step 16. */

 Step 17. */

 Step 18. */

 Step 19. */

 Step 20. */

 Step 21. */

 Step 22. */

 Step 23. */

 Step 24. */

 Step 25. */

	/*

	 * Perform steps 26-40 of SPU context restore sequence,

	 * which restores regions of the local store and register

	 * file.

 Step 26. */

 Step 27. */

 Step 28. */

 Step 29. */

 Step 30. */

 Step 31. */

 Step 32. */

 Step 33. */

 Step 34. */

 Step 35. */

 Step 36. */

 Step 37. */

 Step 38. */

 Step 39. */

 Step 40. */

	/*

	 * Combine steps 41-76 of SPU context restore sequence, which

	 * restore regions of the privileged & problem state areas.

 Step 41. */

 Step 42. */

 Step 43. */

 Step 44. */

 Step 45. */

 Step 46. */

 Step 47. */

 Step 48. */

 Step 49. */

 Step 50. */

 Step 51. */

 Step 52. */

 Step 53. */

 Step 54. */

 Step 55. */

 Step 56. */

 Step 57. */

 Step 58. */

 Step 59. */

 Step 60. */

 Step 61. */

 Step 62. */

 Step 63. */

 Step 64. */

 Step 65. */

 Step 66. */

 Step 67. */

 Modified Step 68. */

 Step 69. */

 NEW      */

 Step 70. */

 Step 71. */

 Step 72. */

 Step 73. */

 Step 74. */

 Step 75. */

	/*

	 * SPU context save can be broken into three phases:

	 *

	 *     (a) quiesce [steps 2-16].

	 *     (b) save of CSA, performed by PPE [steps 17-42]

	 *     (c) save of LSCSA, mostly performed by SPU [steps 43-52].

	 *

	 * Returns      0 on success.

	 *              2,6 if failed to quiece SPU

	 *              53 if SPU-side of save failed.

 Steps 2-16. */

 Steps 17-43. */

 Steps 44-53. */

 Step 54.     */

	/*

	 * SPU context restore can be broken into three phases:

	 *

	 *    (a) harvest (or reset) SPU [steps 2-24].

	 *    (b) restore LSCSA [steps 25-40], mostly performed by SPU.

	 *    (c) restore CSA [steps 41-76], performed by PPE.

	 *

	 * The 'harvest' step is not performed here, but rather

	 * as needed below.

 Steps 24-39. */

 Step 40.     */

 Failed. Return now. */

 Fall through to next step. */

/**

 * spu_save - SPU context save, with locking.

 * @prev: pointer to SPU context save area, to be saved.

 * @spu: pointer to SPU iomem structure.

 *

 * Acquire locks, perform the save operation then return.

 Step 1.     */

 Steps 2-53. */

/**

 * spu_restore - SPU context restore, with harvest and locking.

 * @new: pointer to SPU context save area, to be restored.

 * @spu: pointer to SPU iomem structure.

 *

 * Perform harvest + restore, as we may not be coming

 * from a previous successful save operation, and the

 * hardware state is unknown.

 Enable decode, relocate, tlbie response, master runcntl. */

 Enable OS-specific set of interrupts. */

/**

 * spu_alloc_csa - allocate and initialize an SPU context save area.

 *

 * Allocate and initialize the contents of an SPU context save area.

 * This includes enabling address translation, interrupt masks, etc.,

 * as appropriate for the given OS environment.

 *

 * Note that storage for the 'lscsa' is allocated separately,

 * as it is by far the largest of the context save regions,

 * and may need to be pinned or otherwise specially aligned.

 SPDX-License-Identifier: GPL-2.0-or-later

/* hw_ops.c - query/set operations on active SPU context.

 *

 * Copyright (C) IBM 2005

 * Author: Mark Nutter <mnutter@us.ibm.com>

	/* if the requested event is there, return the poll

	   mask, otherwise enable the interrupt to get notified,

	   but first mark any pending interrupts as done so

 read the first available word */

 make sure we get woken up by the interrupt */

 we have space to write wbox_data to */

		/* make sure we get woken up by the interrupt when space

 SPDX-License-Identifier: GPL-2.0

 interrupt-level stop callback function. */

	/*

	 * It should be impossible to preempt a context while an exception

	 * is being processed, since the context switch code is specially

	 * coded to deal with interrupts ... But, just in case, sanity check

	 * the context pointer.  It is OK to return doing nothing since

	 * the exception will be regenerated when the context is resumed.

 Copy exception arguments into module specific structure */

		/* ensure that the exception status has hit memory before a

		/*

		 * If the spu hasn't finished stopping, we need to

		 * re-read the register to get the stopped value.

	/*

	 * We need to exclude userspace access to the context.

	 *

	 * To protect against memory access we invalidate all ptes

	 * and make sure the pagefault handlers block on the mutex.

	/* purge the MFC DMA queue to ensure no spurious accesses before we

 clear purge status */

 put the SPE in kernel mode to allow access to the loader */

 start the loader */

		/* If isolated LOAD has failed: run SPU, we will get a stop-and

 This isn't allowed by the CBEA, but check anyway */

 Finished accessing the loader. Drop kernel mode */

	/*

	 * NOSCHED is synchronous scheduling with respect to the caller.

	 * The caller waits for the context to be loaded.

	/*

	 * Apply special setup as required.

		/*

		 * If userspace has set the runcntrl register (eg, to

		 * issue an isolated exit), we need to re-set it here

/*

 * SPU syscall restarting is tricky because we violate the basic

 * assumption that the signal handler is running on the interrupted

 * thread. Here instead, the handler runs on PowerPC user space code,

 * while the syscall was called from the SPU.

 * This means we can only do a very rough approximation of POSIX

 * signal semantics.

		/*

		 * Enter the regular syscall restarting for

		 * sys_spu_run, then restart the SPU syscall

		 * callback.

		/*

		 * Restart block is too hard for now, just return -EINTR

		 * to the SPU.

		 * ERESTARTNOHAND comes from sys_pause, we also return

		 * -EINTR from there.

		 * Assume that we need to be restarted ourselves though.

 get syscall block from local store */

 do actual syscall without pinning the spu */

 do actual system call from here */

	/* need to re-get the ls, as it may have changed when we released the

 write result, jump over indirect pointer */

			/*

			 * This is nasty: we need the state_mutex for all the

			 * bookkeeping even if the syscall was interrupted by

			 * a signal. ewww.

	/* Note: we don't need to force_sig SIGTRAP on single-step

	 * since we have TIF_SINGLESTEP set, thus the kernel will do

	 * it upon return from the syscall anyway.

 SPDX-License-Identifier: GPL-2.0

/**

 * sys_spu_run - run code loaded into an SPU

 *

 * @unpc:    next program counter for the SPU

 * @ustatus: status of the SPU

 *

 * This system call transfers the control of execution of a

 * user space thread to an SPU. It will return when the

 * SPU has finished executing or when it hits an error

 * condition and it will be interrupted if a signal needs

 * to be delivered to a handler in user space.

 *

 * The next program counter is set to the passed value

 * before the SPU starts fetching code and the user space

 * pointer gets updated with the new value when returning

 * from kernel space.

 *

 * The status value returned from spu_run reflects the

 * value of the spu_status register after the SPU has stopped.

 *

 check if this file was created by spu_create */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SPU file system

 *

 * (C) Copyright IBM Deutschland Entwicklung GmbH 2005

 *

 * Author: Arnd Bergmann <arndb@de.ibm.com>

			/* XXX: what was dcache_lock protecting here? Other

			 * filesystems (IB, configfs) release dcache_lock

 Caller must hold parent->i_mutex */

 remove all entries */

 We have to give up the mm_struct */

 XXX gang */

	/*

	 * get references for dget and mntget, will be released

	 * in error path of *_open().

 check if we are on spufs */

 don't accept undefined flags */

 only threads can be underneath a gang */

 File system initialization */

 the loader must be align on a 16 byte boundary */

 SPDX-License-Identifier: GPL-2.0-or-later

/* sched.c - SPU scheduler.

 *

 * Copyright (C) IBM 2005

 * Author: Mark Nutter <mnutter@us.ibm.com>

 *

 * 2006-03-31	NUMA domains added.

/*

 * Priority of a normal, non-rt, non-niced'd process (aka nice level 0).

/*

 * Frequency of the spu scheduler tick.  By default we do one SPU scheduler

 * tick for every 10 CPU scheduler ticks.

/*

 * These are the 'tuning knobs' of the scheduler:

 *

 * Minimum timeslice is 5 msecs (or 1 spu scheduler tick, whichever is

 * larger), default timeslice is 100 msecs, maximum timeslice is 800 msecs.

/*

 * scale user-nice values [ -20 ... 0 ... 19 ] to time slice values:

 * [800ms ... 100ms ... 5ms]

 *

 * The higher a thread's priority, the bigger timeslices

 * it gets during one round of execution. But even the lowest

 * priority thread gets MIN_TIMESLICE worth of execution time.

/*

 * Update scheduling information from the owning thread.

	/*

	 * assert that the context is not on the runqueue, so it is safe

	 * to change its scheduling parameters.

	/*

	 * 32-Bit assignments are atomic on powerpc, and we don't care about

	 * memory ordering here because retrieving the controlling thread is

	 * per definition racy.

	/*

	 * We do our own priority calculations, so we normally want

	 * ->static_prio to start with. Unfortunately this field

	 * contains junk for threads with a realtime scheduling

	 * policy so we have to look at ->prio in this case.

	/*

	 * TO DO: the context may be loaded, so we may need to activate

	 * it again on a different node. But it shouldn't hurt anything

	 * to update its parameters, because we know that the scheduler

	 * is not actively looking at this field, since it is not on the

	 * runqueue. The context will be rescheduled on the proper node

	 * if it is timesliced or preempted.

 Save the current cpu id for spu interrupt routing. */

		/*

		 * Take list_mutex to sync with find_victim().

	/*

	 * Wake up the active spu_contexts.

/**

 * spu_bind_context - bind spu context to physical spu

 * @spu:	physical spu to bind to

 * @ctx:	context to bind

/*

 * Must be used with the list_mutex held.

	/*

	 * TODO: A better algorithm could be used to find a good spu to be

	 *       used as reference location for the ctxs chain.

		/*

		 * "available_spus" counts how many spus are not potentially

		 * going to be used by other affinity gangs whose reference

		 * context is already in place. Although this code seeks to

		 * avoid having affinity gangs with a summed amount of

		 * contexts bigger than the amount of spus in the node,

		 * this may happen sporadically. In this case, available_spus

		 * becomes negative, which is harmless.

/*

 * affinity_check is called each time a context is going to be scheduled.

 * It returns the spu ptr on which the context must run.

/**

 * spu_unbind_context - unbind spu context from physical spu

 * @spu:	physical spu to unbind from

 * @ctx:	context to unbind

		/*

		 * If ctx->gang->aff_sched_count is positive, SPU affinity is

		 * being considered in this gang. Using atomic_dec_if_positive

		 * allow us to skip an explicit check for affinity in this gang

 This maps the underlying spu state to idle */

/**

 * spu_add_to_rq - add a context to the runqueue

 * @ctx:       context to add

	/*

	 * Unfortunately this code path can be called from multiple threads

	 * on behalf of a single context due to the way the problem state

	 * mmap support works.

	 *

	 * Fortunately we need to wake up all these threads at the same time

	 * and can simply skip the runqueue addition for every but the first

	 * thread getting into this codepath.

	 *

	 * It's still quite hacky, and long-term we should proxy all other

	 * threads through the owner thread so that spu_run is in control

	 * of all the scheduling activity for a given context.

	/*

	 * The caller must explicitly wait for a context to be loaded

	 * if the nosched flag is set.  If NOSCHED is not set, the caller

	 * queues the context and waits for an spu event or error.

/**

 * find_victim - find a lower priority context to preempt

 * @ctx:	candidate context for running

 *

 * Returns the freed physical spu to run the new context on.

	/*

	 * Look for a possible preemption candidate on the local node first.

	 * If there is no candidate look at the other nodes.  This isn't

	 * exactly fair, but so far the whole spu scheduler tries to keep

	 * a strong node affinity.  We might want to fine-tune this in

	 * the future.

			/*

			 * This nests ctx->state_mutex, but we always lock

			 * higher priority contexts before lower priority

			 * ones, so this is safe until we introduce

			 * priority inheritance schemes.

			 *

			 * XXX if the highest priority context is locked,

			 * this can loop a long time.  Might be better to

			 * look at another context or give up after X retries.

				/*

				 * This race can happen because we've dropped

				 * the active list mutex.  Not a problem, just

				 * restart the search.

	/* not a candidate for interruptible because it's called either

/**

 * spu_unschedule - remove a context from a spu, and possibly release it.

 * @spu:	The SPU to unschedule from

 * @ctx:	The context currently scheduled on the SPU

 * @free_spu	Whether to free the SPU for other contexts

 *

 * Unbinds the context @ctx from the SPU @spu. If @free_spu is non-zero, the

 * SPU is made available for other contexts (ie, may be returned by

 * spu_get_idle). If this is zero, the caller is expected to schedule another

 * context to this spu.

 *

 * Should be called with ctx->state_mutex held.

/**

 * spu_activate - find a free spu for a context and execute it

 * @ctx:	spu context to schedule

 * @flags:	flags (currently ignored)

 *

 * Tries to find a free spu to run @ctx.  If no free spu is available

 * add the context to the runqueue so it gets woken up once an spu

 * is available.

	/*

	 * If there are multiple threads waiting for a single context

	 * only one actually binds the context while the others will

	 * only be able to acquire the state_mutex once the context

	 * already is in runnable state.

	/*

	 * If this is a realtime thread we try to get it running by

	 * preempting a lower priority thread.

/**

 * grab_runnable_context - try to find a runnable context

 *

 * Remove the highest priority context on the runqueue and return it

 * to the caller.  Returns %NULL if no runnable context was found.

 XXX(hch): check for affinity here as well */

					/* this one can't easily be made

/**

 * spu_deactivate - unbind a context from it's physical spu

 * @ctx:	spu context to unbind

 *

 * Unbind @ctx from the physical spu it is running on and schedule

 * the highest priority context to run on the freed physical spu.

/**

 * spu_yield -	yield a physical spu if others are waiting

 * @ctx:	spu context to yield

 *

 * Check if there is a higher priority context waiting and if yes

 * unbind @ctx from the physical spu and schedule the highest

 * priority context to run on the freed physical spu instead.

 a kernel thread never has signals pending */

/**

 * count_active_contexts - count nr of active tasks

 *

 * Return the number of tasks currently running or waiting to run.

 *

 * Note that we don't take runq_lock / list_mutex here.  Reading

 * a single 32bit value is atomic on powerpc, and we don't care

 * about memory ordering issues here.

/**

 * spu_calc_load - update the avenrun load estimates.

 *

 * No locking against reading these values from userspace, as for

 * the CPU loadavg code.

 fixed-point */

	/*

	 * Update the physical SPU utilization statistics.

	/*

	 * Note that last_pid doesn't really make much sense for the

	 * SPU loadavg (it even seems very odd on the CPU side...),

	 * but we include it here to have a 100% compatible interface.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SPU file system -- file contents

 *

 * (C) Copyright IBM Deutschland Entwicklung GmbH 2005

 *

 * Author: Arnd Bergmann <arndb@de.ibm.com>

 Simple attribute files */

 enough to store a u64 and "\n\0" */

 format for read operation */

 protects access to these buffers */

 continued read */

 first read */

 claim we got the whole input */

	/*

	 * Because we release the mmap_lock, the context may be destroyed while

	 * we're in spu_wait. Grab an extra reference so it isn't destroyed

	 * in the meantime.

	/*

	 * We have to wait for context to be loaded before we have

	 * pages to hand out to the user, but we don't want to wait

	 * with the mmap_lock held.

	 * It is possible to drop the mmap_lock here, but then we need

	 * to return VM_FAULT_NOPAGE because the mappings may have

	 * hanged.

/*

 * mmap support for problem state control area [0x4000 - 0x4fff].

 SPUFS_MMAP_4K */

 !SPUFS_MMAP_4K */

	/* pre-check for file position: if we'd return EOF, there's no point

 generic open function for all pipe-like files */

/*

 * Read as many bytes from the mailbox as possible, until

 * one of the conditions becomes true:

 *

 * - no more data available in the mailbox

 * - end of the user provided buffer

 * - end of the mapped area

		/*

		 * at the end of the mapped area, we can fault

		 * but still need to return the data we have

		 * read successfully so far.

 low-level ibox access function */

 interrupt-level ibox callback function. */

/*

 * Read as many bytes from the interrupt mailbox as possible, until

 * one of the conditions becomes true:

 *

 * - no more data available in the mailbox

 * - end of the user provided buffer

 * - end of the mapped area

 *

 * If the file is opened without O_NONBLOCK, we wait here until

 * any data is available, but return when we have been able to

 * read something.

 wait only for the first element */

 if we can't write at all, return -EFAULT */

		/*

		 * at the end of the mapped area, we can fault

		 * but still need to return the data we have

		 * read successfully so far.

	/*

	 * For now keep this uninterruptible and also ignore the rule

	 * that poll should not sleep.  Will be fixed later.

 low-level mailbox write */

 interrupt-level wbox callback function. */

/*

 * Write as many bytes to the interrupt mailbox as possible, until

 * one of the conditions becomes true:

 *

 * - the mailbox is full

 * - end of the user provided buffer

 * - end of the mapped area

 *

 * If the file is opened without O_NONBLOCK, we wait here until

 * space is available, but return when we have been able to

 * write something.

	/*

	 * make sure we can at least write one element, by waiting

	 * in case of !O_NONBLOCK

 write as much as possible */

	/*

	 * For now keep this uninterruptible and also ignore the rule

	 * that poll should not sleep.  Will be fixed later.

	/* For 64k pages, both signal1 and signal2 can be used to mmap the whole

	 * signal 1 and 2 area

	/* For 64k pages, both signal1 and signal2 can be used to mmap the whole

	 * signal 1 and 2 area

 SPUFS_MMAP_4K */

 !SPUFS_MMAP_4K */

/*

 * This is a wrapper around DEFINE_SIMPLE_ATTRIBUTE which does the

 * work of acquiring (or not) the SPU context before calling through

 * to the actual get routine. The set routine is called directly.

/*

 * mmap support for problem state MFC DMA area [0x0000 - 0x0fff].

 SPUFS_MMAP_4K */

 !SPUFS_MMAP_4K */

/*

 * mmap support for full problem state area [0x00000 - 0x1ffff].

/*

 * mmap support for problem state MFC DMA area [0x0000 - 0x0fff].

 SPUFS_MMAP_4K */

 !SPUFS_MMAP_4K */

 we don't want to deal with DMA into other processes */

 interrupt-level mfc callback function. */

 See if there is one tag group is complete */

 FIXME we need locking around tagwait */

	/* enable interrupt waiting for any tag group,

 XXX(hch): shouldn't we clear ret here? */

 we reserve the higher tag numbers for kernel use */

 not supported in this version */

		/* wait for any tag group to complete

		/* try again, because the queue might be

	/*

	 * For now keep this uninterruptible and also ignore the rule

	 * that poll should not sleep.  Will be fixed later.

 this currently hangs */

 FIXME: Should there really be no locking here? */

 EOF if there's no entry in the mbox */

 EOF if there's no entry in the ibox */

	/*

	 * In general, utilization statistics are updated by the controlling

	 * thread as the spu context moves through various well defined

	 * state transitions, but if the context is lazily loaded its

	 * utilization statistics are not updated as the controlling thread

	 * is not tightly coupled with the execution of the spu context.  We

	 * calculate and apply the time delta from the last recorded state

	 * of the spu context.

				/* If there's data ready to go, we can

				/* spufs_wait will drop the mutex and

				 * re-acquire, but since we're in read(), the

				 * file cannot be _released (and so

				 * ctx->switch_log is stable).

				/* On error, spufs_wait returns without the

				/* We may have had entries read from underneath

				 * us while we dropped the mutex in spufs_wait,

			/* If the record is greater than space available return

/**

 * Log a context switch event to a switch log reader.

 *

 * Must be called with ctx->state_mutex held.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SPU file system

 *

 * (C) Copyright IBM Deutschland Entwicklung GmbH 2005

 *

 * Author: Arnd Bergmann <arndb@de.ibm.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Low-level SPU handling

 *

 * (C) Copyright IBM Deutschland Entwicklung GmbH 2005

 *

 * Author: Arnd Bergmann <arndb@de.ibm.com>

/**

 * Handle an SPE event, depending on context SPU_CREATE_EVENTS_ENABLED flag.

 *

 * If the context was created with events, we just set the return event.

 * Otherwise, send an appropriate signal to the process.

 DAR isn't set for an alignment fault :( */

/*

 * bottom half handler for page faults, we can't do this from

 * interrupt context, since we might need to sleep.

 * we also need to give up the mutex so we can get scheduled

 * out while waiting for the backing store.

 *

 * TODO: try calling hash_page from the interrupt handler first

 *       in order to speed up the easy case.

	/*

	 * dar and dsisr get passed from the registers

	 * to the spu_context, to this function, but not

	 * back to the spu if it gets scheduled again.

	 *

	 * if we don't handle the fault for a saved context

	 * in time, we can still expect to get the same fault

	 * the immediately after the context restore.

 we must not hold the lock when entering copro_handle_mm_fault */

 hashing failed, so try the actual fault handler */

	/*

	 * This is nasty: we need the state_mutex for all the bookkeeping even

	 * if the syscall was interrupted by a signal. ewww.

	/*

	 * Clear dsisr under ctxt lock after handling the fault, so that

	 * time slicing will not preempt the context while the page fault

	 * handler is running. Context switch code removes mappings.

	/*

	 * If we handled the fault successfully and are in runnable

	 * state, restart the DMA.

	 * In case of unhandled error report the problem to user space.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SPU local store allocation routines

 *

 * Copyright 2007 Benjamin Herrenschmidt, IBM Corp.

 Set LS pages reserved to allow for user-space mapping. */

 Clear reserved bit before vfree. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * spu_save.c

 *

 * (C) Copyright IBM Corp. 2005

 *

 * SPU-side context save sequence outlined in

 * Synergistic Processor Element Book IV

 *

 * Author: Mark Nutter <mnutter@us.ibm.com>

 256K (in bytes) */

	/* Save, Step 2:

	 *    Read the SPU_RdEventMsk channel and save to the LSCSA.

	/* Save, Step 3:

	 *    Read the SPU_RdTagMsk channel and save to the LSCSA.

 PUTL */

	/* Save, Step 7:

	 *    Enqueue the PUTL command (tag 0) to the MFC SPU command

	 *    queue to transfer the remaining 240 kb of LS to CSA.

 vector unsigned int fpcr;

	/* Save, Step 9:

	 *    Issue the floating-point status and control register

	 *    read instruction, and save to the LSCSA.

	/* Save, Step 10:

	 *    Read and save the SPU_RdDec channel data to

	 *    the LSCSA.

	/* Save, Step 11:

	 *    Read and save the SPU_WSRR0 channel data to

	 *    the LSCSA.

 PUT */

	/* Save, Step 13:

	 *    Enqueue a PUT command (tag 0) to send the LSCSA

	 *    to the CSA.

	/* Save, Step 14:

	 *    Enqueue an MFC_SYNC command (tag 0).

	/* Save, Step 18:

	 *    Issue a stop-and-signal instruction indicating

	 *    "save complete".  Note: This function will not

	 *    return!!

/**

 * main - entry point for SPU-side context save.

 *

 * This code deviates from the documented sequence as follows:

 *

 *      1. The EA for LSCSA is passed from PPE in the

 *         signal notification channels.

 *      2. All 128 registers are saved by crt0.o.

 Step 1: done by exit(). */

 Step 2.  */

 Step 3.  */

 Step 4.  */

 Step 5.  */

 Step 6.  */

 Step 7.  */

 Step 8: done by exit(). */

 Step 9.  */

 Step 10. */

 Step 11. */

 Step 12. */

 Step 13. */

 Step 14. */

 Step 15. */

 Step 16. */

 Step 17. */

 Step 18. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * spu_restore.c

 *

 * (C) Copyright IBM Corp. 2005

 *

 * SPU-side context restore sequence outlined in

 * Synergistic Processor Element Book IV

 *

 * Author: Mark Nutter <mnutter@us.ibm.com>

 256K (in bytes) */

 br -4         */

 nop           */

 heq $0, $0    */

 stop 0x0      */

 illegal instr */

 stop 0x3ffc   */

 GET */

 GETL */

	/* Restore, Step 4:

	 *    Enqueue the GETL command (tag 0) to the MFC SPU command

	 *    queue to transfer the upper 240 kb of LS from CSA.

	/* Restore, Step 6(moved):

	 *    If the LSCSA "decrementer running" flag is set

	 *    then write the SPU_WrDec channel with the

	 *    decrementer value from LSCSA.

	/* Restore, Step 11:

	 *    Write the MFC_WrOut_MB channel with the PPU_MB

	 *    data from LSCSA.

	/* Restore, Step 12:

	 *    Write the MFC_WrInt_MB channel with the PPUINT_MB

	 *    data from LSCSA.

	/* Restore, Step 13:

	 *    Restore the floating-point status and control

	 *    register from the LSCSA.

	/* Restore, Step 14:

	 *    Restore the SPU SRR0 data from the LSCSA.

	/* Restore, Step 15:

	 *    Restore the SPU_RdEventMsk data from the LSCSA.

	/* Restore, Step 16:

	 *    Restore the SPU_RdTagMsk data from the LSCSA.

	/* Restore, Step 18:

	 *    Issue a stop-and-signal instruction with

	 *    "good context restore" signal value.

	 *

	 * Restore, Step 19:

	 *    There may be additional instructions placed

	 *    here by the PPE Sequence for SPU Context

	 *    Restore in order to restore the correct

	 *    "stopped state".

	 *

	 *    This step is handled here by analyzing the

	 *    LSCSA.stopped_status and then modifying the

	 *    exit() function to behave appropriately.

		/* SPU_Status[P,I]=1.  Add illegal instruction

		 * followed by stop-and-signal instruction after

		 * end of restore code.

		/* SPU_Status[P,H]=1.  Add 'heq $0, $0' followed

		 * by stop-and-signal instruction after end of

		 * restore code.

		/* SPU_Status[S,P]=1.  Add nop instruction

		 * followed by 'br -4' after end of restore

		 * code.

		/* SPU_Status[S,I]=1.  Add  illegal instruction

		 * followed by 'br -4' after end of restore code.

		/* SPU_Status[I]=1. Add illegal instruction followed

		 * by infinite loop after end of restore sequence.

 SPU_Status[S]=1. Add two 'nop' instructions. */

		/* SPU_Status[H]=1. Add 'heq $0, $0' instruction

		 * after end of restore code.

		/* SPU_Status[P]=1. Add stop-and-signal instruction

		 * after end of restore code.

 SPU_Status[I,S,H,P,R]=0. Add infinite loop. */

 SPU_Status[R]=1. No additional instructions. */

/**

 * main - entry point for SPU-side context restore.

 *

 * This code deviates from the documented sequence in the

 * following aspects:

 *

 *	1. The EA for LSCSA is passed from PPE in the

 *	   signal notification channels.

 *	2. The register spill area is pulled by SPU

 *	   into LS, rather than pushed by PPE.

 *	3. All 128 registers are restored by exit().

 *	4. The exit() function is modified at run

 *	   time in order to properly restore the

 *	   SPU_Status register.

 Step 1.  */

 Step 2.  */

 Step 3.  */

 Step 4.  */

 Step 5: done by 'exit'. */

 Step 7. */

 Step 8. */

 Step 9. */

 moved Step 6. */

 Step 10. */

 Step 11. */

 Step 12. */

 Step 13. */

 Step 14. */

 Step 15. */

 Step 16. */

 Step 17. done by 'exit'. */

 Step 18. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * The driver for Freescale MPC512x LocalPlus Bus FIFO

 * (called SCLPC in the Reference Manual).

 *

 * Copyright (C) 2013-2015 Alexander Popov <alex.popov@linux.com>.

 must be zero */

 for protecting lpbfifo_data */

/*

 * A data transfer from RAM to some device on LPB is finished

 * when both mpc512x_lpbfifo_irq() and mpc512x_lpbfifo_callback()

 * have been called. We execute the callback registered in

 * mpc512x_lpbfifo_request just after that.

 * But for a data transfer from some device on LPB to RAM we don't enable

 * LPBFIFO interrupt because clearing MPC512X_SCLPC_SUCCESS interrupt flag

 * automatically disables LPBFIFO reading request to the DMA controller

 * and the data transfer hangs. So the callback registered in

 * mpc512x_lpbfifo_request is executed at the end of mpc512x_lpbfifo_callback().

/*

 * mpc512x_lpbfifo_irq - IRQ handler for LPB FIFO

 Clear the interrupt flag */

 Transfer is finished, set the FIFO as idle */

/*

 * mpc512x_lpbfifo_callback is called by DMA driver when

 * DMA transaction is finished.

 Release the mapping */

 Transfer is finished, set the FIFO as idle */

 max bytes per LPBFIFO transaction involving DMA */

	/*

	 * 1. Fit the requirements:

	 * - the packet size must be a multiple of 4 since FIFO Data Word

	 *    Register allows only full-word access according the Reference

	 *    Manual;

	 * - the physical address of the device on LPB and the packet size

	 *    must be aligned on BPT (bytes per transaction) or 8-bytes

	 *    boundary according the Reference Manual;

	 * - but we choose DMA maxburst equal (or very close to) BPT to prevent

	 *    DMA controller from overtaking FIFO and causing FIFO underflow

	 *    error. So we force the packet size to be aligned on BPT boundary

	 *    not to confuse DMA driver which requires the packet size to be

	 *    aligned on maxburst boundary;

	 * - BPT should be set to the LPB device port size for operation with

	 *    disabled auto-incrementing according Reference Manual.

 2. Prepare DMA */

 Make DMA channel work with LPB FIFO data register */

 For freeing later */

 3. Prepare FIFO */

	/*

	 * Configure the watermarks for write operation (RAM->DMA->FIFO->dev):

	 * - high watermark 7 words according the Reference Manual,

	 * - low watermark 512 bytes (half of the FIFO).

	 * These watermarks don't work for read operation since the

	 * MPC512X_SCLPC_FLUSH bit is set (according the Reference Manual).

	/*

	 * Start address is a physical address of the region which belongs

	 * to the device on the LocalPlus Bus

	/*

	 * Configure chip select, transfer direction, address increment option

	 * and bytes per transaction option

 Unmask irqs */

 4. Set packet size and kick FIFO off */

 5. Finally kick DMA off */

 Check whether a transfer is in progress */

 Set the FIFO as idle */

/*

 * LPBFIFO driver uses "ranges" property of "localbus" device tree node

 * for being able to determine the chip select number of a client device

 * ordering a DMA transfer.

	/*

	 * The node defined as compatible with 'fsl,mpc5121-localbus'

	 * should have two address cells and one size cell.

	 * Every item of its ranges property should consist of:

	 * - the first address cell which is the chipselect number;

	 * - the second address cell which is the offset in the chipselect,

	 *    must be zero.

	 * - CPU address of the beginning of an access window;

	 * - the only size cell which is the size of an access window.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2007,2008 Freescale Semiconductor, Inc. All rights reserved.

 *

 * Author: John Rigby <jrigby@freescale.com>

 *

 * Description:

 * MPC512x Shared code

 Enable software reset "RSTE" */

 Set software hard reset */

 32-bit aligned! */

 32-bit aligned! */

 receives a pixel clock spec in pico seconds, adjusts the DIU clock rate */

 lookup and enable the DIU clock */

 backwards compat with device trees that lack clock specs */

	/*

	 * convert the picoseconds spec into the desired clock rate,

	 * determine the acceptable clock range for the monitor (+/- 5%),

	 * do the calculation in steps to avoid integer overflow

 pixclock * 0.05 */

	/*

	 * check whether the DIU supports the desired pixel clock

	 *

	 * - simply request the desired clock and see what the

	 *   platform's clock driver will make of it, assuming that it

	 *   will setup the best approximation of the requested value

	 * - try other candidate frequencies in the order of decreasing

	 *   preference (i.e. with increasing distance from the desired

	 *   pixel clock, and checking the lower frequency before the

	 *   higher frequency to not overload the hardware) until the

	 *   first match is found -- any potential subsequent match

	 *   would only be as good as the former match or typically

	 *   would be less preferrable

	 *

	 * the offset increment of pixelclock divided by 64 is an

	 * arbitrary choice -- it's simple to calculate, in the typical

	 * case we expect the first check to succeed already, in the

	 * worst case seven frequencies get tested (the exact center and

	 * three more values each to the left and to the right) before

	 * the 5% tolerance window is exceeded, resulting in fast enough

	 * execution yet high enough probability of finding a suitable

	 * value, while the error rate will be in the order of single

	 * percents

	/*

	 * what is the most appropriate action to take when the search

	 * for an available pixel clock which is acceptable to the

	 * monitor has failed?  disable the DIU (clock) or just provide

	 * a "best effort"?  we go with the latter

/*

 * Check if DIU was pre-initialized. If so, perform steps

 * needed to continue displaying through the whole boot process.

 * Move area descriptor and gamma table elsewhere, they are

 * destroyed by bootmem allocator otherwise. The frame buffer

 * address range will be reserved in setup_arch() after bootmem

 * allocator is up.

 flush fb area descriptor */

 flush gamma table */

	/*

	 * We do not allocate and configure new area for bitmap buffer

	 * because it would requere copying bitmap data (splash image)

	 * and so negatively affect boot time. Instead we reserve the

	 * already configured frame buffer area so that it won't be

	 * destroyed. The starting address of the area to reserve and

	 * also it's length is passed to memblock_reserve(). It will be

	 * freed later on first open of fbdev, when splash image is not

	 * needed any more.

	/*

	 * Initialize the default interrupt mapping priorities,

	 * in case the boot rom changed something on us.

/*

 * Nodes to do bus probe on, soc and localbus

 Init PSC FIFO space for TX and RX slices */

 current fifo address in 32 bit words */

 size in register is in 4 byte units */

 FIFO space is 4KiB, check if requested size is available */

			/*

			 * chances are that another device requests less

			 * fifo space, so we continue.

 set tx and rx fifo size registers */

 reset and enable the slices */

/**

 * mpc512x_cs_config - Setup chip select configuration

 * @cs: chip select number

 * @val: chip select configuration value

 *

 * Perform chip select configuration for devices on LocalPlus Bus.

 * Intended to dynamically reconfigure the chip select parameters

 * for configurable devices on the bus.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2008 Freescale Semiconductor, Inc. All rights reserved.

 *

 * Author: John Rigby, <jrigby@freescale.com>

 *

 * Description:

 * MPC5121ADS CPLD irq handling

/*

 * Bits to ignore in the misc_status register

 * 0x10 touch screen pendown is hard routed to irq1

 * 0x02 pci status is read from pci status register

/*

 * Nothing to ignore in pci status register

 ignore don't cares and masked irqs */

	/*

	 * statically route touch screen pendown through 1

	 * and ignore it here

	 * route all others through our cascade irq

 unmask pci ints in misc mask */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2013 DENX Software Engineering

 *

 * Gerhard Sittig, <gsi@denx.de>

 *

 * common clock driver support for the MPC512x platform

 our public mpc5121_clk_init() API */

 helpers to keep the MCLK intermediates "somewhere" in our table */

 extend the public set of clocks by adding internal slots for management */

 arrange for adjacent numbers after the public set */

 clocks which aren't announced to the public */

 intermediates in div+gate combos or fractional dividers */

 intermediates for the mux+gate+div+mux MCLK generation */

 internal, symbolic spec for the number of slots */

 data required for the OF clock provider registration */

 CCM register access */

 SoC variants {{{ */

/*

 * tell SoC variants apart as they are rather similar yet not identical,

 * cache the result in an enum to not repeatedly run the expensive OF test

 *

 * MPC5123 is an MPC5121 without the MBX graphics accelerator

 *

 * MPC5125 has many more differences: no MBX, no AXE, no VIU, no SPDIF,

 * no PATA, no SATA, no PCI, two FECs (of different compatibility name),

 * only 10 PSCs (of different compatibility name), two SDHCs, different

 * NFC IP block, output clocks, system PLL status query, different CPMF

 * interpretation, no CFM, different fourth PSC/CAN mux0 input -- yet

 * those differences can get folded into this clock provider support

 * code and don't warrant a separate highly redundant implementation

 }}} SoC variants */

 common clk API wrappers {{{ */

 convenience wrappers around the common clk API */

 }}} common clk API wrappers */

 helper to isolate a bit field from a register */

 get the SPMF and translate it into the "sys pll" multiplier */

/*

 * get the SYS_DIV value and translate it into a divide factor

 *

 * values returned from here are a multiple of the real factor since the

 * divide ratio is fractional

/*

 * get the CPMF value and translate it into a multiplier factor

 *

 * values returned from here are a multiple of the real factor since the

 * multiplier ratio is fractional

 0b000 is "times 36" */

 0b000 is "bypass" */

/*

 * some of the clock dividers do scale in a linear way, yet not all of

 * their bit combinations are legal; use a divider table to get a

 * resulting set of applicable divider values

 applies to the IPS_DIV, and PCI_DIV values */

 applies to the MBX_DIV, LPC_DIV, and NFC_DIV values */

/*

 * - receives the "bus frequency" from the caller (that's the IPS clock

 *   rate, the historical source of clock information)

 * - fetches the system PLL multiplier and divider values as well as the

 *   IPS divider value from hardware

 * - determines the REF clock rate either from the XTAL/OSC spec (if

 *   there is a device tree node describing the oscillator) or from the

 *   IPS bus clock (supported for backwards compatibility, such that

 *   setups without XTAL/OSC specs keep working)

 * - creates the "ref" clock item in the clock tree, such that

 *   subsequent code can create the remainder of the hierarchy (REF ->

 *   SYS -> CSB -> IPS) from the REF clock rate and the returned mul/div

 *   values

 fetch mul/div factors from the hardware */

 compensate for the fractional divider */

 lookup the oscillator clock for its rate */

	/*

	 * either descend from OSC to REF (and in bypassing verify the

	 * IPS rate), or backtrack from IPS and multiplier values that

	 * were fetched from hardware to REF and thus to the OSC value

	 *

	 * in either case the REF clock gets created here and the

	 * remainder of the clock tree can get spanned from there

 start with IPS */

 IPS -> CSB */

 CSB -> SYS */

 SYS -> PLL out */

 PLL out -> REF == OSC */

 MCLK helpers {{{ */

/*

 * helper code for the MCLK subtree setup

 *

 * the overview in section 5.2.4 of the MPC5121e Reference Manual rev4

 * suggests that all instances of the "PSC clock generation" are equal,

 * and that one might re-use the PSC setup for MSCAN clock generation

 * (section 5.2.5) as well, at least the logic if not the data for

 * description

 *

 * the details (starting at page 5-20) show differences in the specific

 * inputs of the first mux stage ("can clk in", "spdif tx"), and the

 * factual non-availability of the second mux stage (it's present yet

 * only one input is valid)

 *

 * the MSCAN clock related registers (starting at page 5-35) all

 * reference "spdif clk" at the first mux stage and don't mention any

 * "can clk" at all, which somehow is unexpected

 *

 * TODO re-check the document, and clarify whether the RM is correct in

 * the overview or in the details, and whether the difference is a

 * clipboard induced error or results from chip revisions

 *

 * it turns out that the RM rev4 as of 2012-06 talks about "can" for the

 * PSCs while RM rev3 as of 2008-10 talks about "spdif", so I guess that

 * first a doc update is required which better reflects reality in the

 * SoC before the implementation should follow while no questions remain

/*

 * note that this declaration raises a checkpatch warning, but

 * it's the very data type dictated by <linux/clk-provider.h>,

 * "fixing" this warning will break compilation

 setup the MCLK clock subtree of an individual PSC/MSCAN/SPDIF */

 MCLK control register (mux, en, div) */

 derive a few parameters from the component type and index */

	/*

	 * this was grabbed from the PPC_CLOCK implementation, which

	 * enforced a specific MCLK divider while the clock was gated

	 * during setup (that's a documented hardware requirement)

	 *

	 * the PPC_CLOCK implementation might even have violated the

	 * "MCLK <= IPS" constraint, the fixed divider value of 1

	 * results in a divider of 2 and thus MCLK = SYS/2 which equals

	 * CSB which is greater than IPS; the serial port setup may have

	 * adjusted the divider which the clock setup might have left in

	 * an undesirable state

	 *

	 * initial setup is:

	 * - MCLK 0 from SYS

	 * - MCLK DIV such to not exceed the IPS clock

	 * - MCLK 0 enabled

	 * - MCLK 1 from MCLK DIV

	/*

	 * create the 'struct clk' items of the MCLK's clock subtree

	 *

	 * note that by design we always create all nodes and won't take

	 * shortcuts here, because

	 * - the "internal" MCLK_DIV and MCLK_OUT signal in turn are

	 *   selectable inputs to the CFM while those who "actually use"

	 *   the PSC/MSCAN/SPDIF (serial drivers et al) need the MCLK

	 *   for their bitrate

	 * - in the absence of "aliases" for clocks we need to create

	 *   individial 'struct clk' items for whatever might get

	 *   referenced or looked up, even if several of those items are

	 *   identical from the logical POV (their rate value)

	 * - for easier future maintenance and for better reflection of

	 *   the SoC's documentation, it appears appropriate to generate

	 *   clock items even for those muxers which actually are NOPs

	 *   (those with two inputs of which one is reserved)

 }}} MCLK helpers */

	/*

	 * developer's notes:

	 * - consider whether to handle clocks which have both gates and

	 *   dividers via intermediates or by means of composites

	 * - fractional dividers appear to not map well to composites

	 *   since they can be seen as a fixed multiplier and an

	 *   adjustable divider, while composites can only combine at

	 *   most one of a mux, div, and gate each into one 'struct clk'

	 *   item

	 * - PSC/MSCAN/SPDIF clock generation OTOH already is very

	 *   specific and cannot get mapped to composites (at least not

	 *   a single one, maybe two of them, but then some of these

	 *   intermediate clock signals get referenced elsewhere (e.g.

	 *   in the clock frequency measurement, CFM) and thus need

	 *   publicly available names

	 * - the current source layout appropriately reflects the

	 *   hardware setup, and it works, so it's questionable whether

	 *   further changes will result in big enough a benefit

 regardless of whether XTAL/OSC exists, have REF created */

 now setup the REF -> SYS -> CSB -> IPS hierarchy */

 now setup anything below SYS and CSB and IPS */

	/*

	 * the Reference Manual discusses that for SDHC only even divide

	 * ratios are supported because clock domain synchronization

	 * between 'per' and 'ipg' is broken;

	 * keep the divider's bit 0 cleared (per reset value), and only

	 * allow to setup the divider's bits 7:1, which results in that

	 * only even divide ratios can get configured upon rate changes;

	 * keep the "x4" name because this bit shift hack is an internal

	 * implementation detail, the "fractional divider with quarters"

	 * semantics remains

	/*

	 * the "power architecture PLL" was setup from data which was

	 * sampled from the reset config word, at this point in time the

	 * configuration can be considered fixed and read only (i.e. no

	 * longer adjustable, or no longer in need of adjustment), which

	 * is why we don't register a PLL here but assume fixed factors

 compensate for the fractional factor */

		/*

		 * XXX TODO implement 5125 NFC clock setup logic,

		 * with high/low period counters in clkregs->scfr3,

		 * currently there are no users so it's ENOIMPL

 for PSCs there is a "registers" gate and a bitrate MCLK subtree */

 MSCAN differs from PSC with just one gate for multiple components */

 there is only one SPDIF component, which shares MCLK support code */

 used as mclk_idx, just to trim line length */

	/*

	 * externally provided clocks (when implemented in hardware,

	 * device tree may specify values which otherwise were unknown)

 fixed frequency for AC97, always 24.567MHz */

	/*

	 * pre-enable those "internal" clock items which never get

	 * claimed by any peripheral driver, to not have the clock

	 * subsystem disable them late at startup

 PowerPC CPU */

 DRAM */

 SRAM */

 SoC periph */

 boot media */

/*

 * registers the set of public clocks (those listed in the dt-bindings/

 * header file) for OF lookups, keeps the intermediates private to us

 _not_ ARRAY_SIZE() */

/*

 * temporary support for the period of time between introduction of CCF

 * support and the adjustment of peripheral drivers to OF based lookups

	/*

	 * pre-enable those clock items which are not yet appropriately

	 * acquired by their peripheral driver

	 *

	 * the PCI clock cannot get acquired by its peripheral driver,

	 * because for this platform the driver won't probe(), instead

	 * initialization is done from within the .setup_arch() routine

	 * at a point in time where the clock provider has not been

	 * setup yet and thus isn't available yet

	 *

	 * so we "pre-enable" the clock here, to not have the clock

	 * subsystem automatically disable this item in a late init call

	 *

	 * this PCI clock pre-enable workaround only applies when there

	 * are device tree nodes for PCI and thus the peripheral driver

	 * has attached to bridges, otherwise the PCI clock remains

	 * unused and so it gets disabled

 serial console */

/*

 * those macros are not exactly pretty, but they encapsulate a lot

 * of copy'n'paste heavy code which is even more ugly, and reduce

 * the potential for inconsistencies in those many code copies

/*

 * register source code provided fallback results for clock lookups,

 * these get consulted when OF based clock lookup fails (that is in the

 * case of not yet adjusted device tree data, where clock related specs

 * are missing)

	/*

	 * do register the 'ips', 'sys', and 'ref' names globally

	 * instead of inside each individual CAN node, as there is no

	 * potential for a name conflict (in contrast to 'ipg' and 'mclk')

	/*

	 * workaround for the fact that the I2C driver does an "anonymous"

	 * lookup (NULL name spec, which yields the first clock spec) for

	 * which we cannot register an alias -- a _global_ 'ipg' alias that

	 * is not bound to any device name and returns the I2C clock item

	 * is not a good idea

	 *

	 * so we have the lookup in the peripheral driver fail, which is

	 * silent and non-fatal, and pre-enable the clock item here such

	 * that register access is possible

	 *

	 * see commit b3bfce2b "i2c: mpc: cleanup clock API use" for

	 * details, adjusting s/NULL/"ipg"/ in i2c-mpc.c would make this

	 * workaround obsolete

	/*

	 * note that 2771399a "fs_enet: cleanup clock API use" did use the

	 * "per" string for the clock lookup in contrast to the "ipg" name

	 * which most other nodes are using -- this is not a fatal thing

	 * but just something to keep in mind when doing compatibility

	 * registration, it's a non-issue with up-to-date device tree data

	/*

	 * MPC5125 has two FECs: FEC1 at 0x2800, FEC2 at 0x4800;

	 * the clock items don't "form an array" since FEC2 was

	 * added only later and was not allowed to shift all other

	 * clock item indices, so the numbers aren't adjacent

	/*

	 * try to collapse diagnostics into a single line of output yet

	 * provide a full list of what is missing, to avoid noise in the

	 * absence of up-to-date device tree data -- backwards

	 * compatibility to old DTBs is a requirement, updates may be

	 * desirable or preferrable but are not at all mandatory

/*

 * The "fixed-clock" nodes (which includes the oscillator node if the board's

 * DT provides one) has already been scanned by the of_clk_init() in

 * time_init().

 map the clock control registers */

 determine the SoC variant we run on */

 invalidate all not yet registered clock slots */

	/*

	 * add a dummy clock for those situations where a clock spec is

	 * required yet no real clock is involved

	/*

	 * have all the real nodes in the clock tree populated from REF

	 * down to all leaves, either starting from the OSC node or from

	 * a REF root that was created from the IPS bus clock input

 register as an OF clock provider */

	/*

	 * unbreak not yet adjusted peripheral drivers during migration

	 * towards fully operational common clock support, and allow

	 * operation in the absence of clock related device tree specs

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2010 DENX Software Engineering

 *

 * Anatolij Gustschin, <agust@denx.de>

 *

 * PDM360NG board setup

 return 1 if pen is down */

 CONFIG_TOUCHSCREEN_ADS7846 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2007, 2008 Freescale Semiconductor, Inc. All rights reserved.

 *

 * Author: John Rigby, <jrigby@freescale.com>, Thur Mar 29 2007

 *

 * Description:

 * MPC5121 ADS board setup

	/*

	 * cpld regs are needed early

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2007,2008 Freescale Semiconductor, Inc. All rights reserved.

 *

 * Author: John Rigby, <jrigby@freescale.com>

 *

 * Description:

 * MPC512x SoC setup

/*

 * list of supported boards

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0

/*

 * Since the tracing code might execute OPAL calls we need to guard against

 * recursion.

 CONFIG_TRACEPOINTS */

 CONFIG_TRACEPOINTS */

 OPAL call / firmware may use SRR and/or HSRR */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OPAL asynchronus Memory error handling support in PowerNV.

 *

 * Copyright 2013 IBM Corporation

 * Author: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>

/*

 * opal_memory_err_event - notifier handler that queues up the opal message

 * to be preocessed later.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Interface for exporting the OPAL ELF core.

 * Heavily inspired from fs/proc/vmcore.c

 *

 * Copyright 2019, Hari Bathini, IBM Corporation.

 NT_AUXV note related info */

 PIR value of crashing CPU */

 CPU state data info from F/W */

 OPAL memory to be exported as PT_LOAD segments */

 Pointer to the first PT_LOAD in the ELF core file */

 Total size of opalcore file. */

 Buffer for all the ELF core headers and the PT_NOTE */

 NT_AUXV buffer */

/*

 * Set crashing CPU's signal to SIGUSR1. if the kernel is triggered

 * by kernel, SIGTERM otherwise.

	/*

	 * Overload PID with PIR value.

	 * As a PIR value could also be '0', add an offset of '100'

	 * to every PIR to avoid misinterpretations in GDB.

	/*

	 * Indicate SIGUSR1 for crash initiated from kernel.

	 * SIGTERM otherwise.

 Entry point of OPAL */

 end of vector */

/*

 * Read from the ELF header and then the crash dump.

 * Returns number of bytes read on success, -errno on failure.

 Adjust count if it goes beyond opalcore size */

 Read ELF core header and/or PT_NOTE segment */

 nothing more to read here */

/*

 * Read CPU state dump data and convert it into ELF notes.

 *

 * Each register entry is of 16 bytes, A numerical identifier along with

 * a GPR/SPR flag in the first 8 bytes and the register value in the next

 * 8 bytes. For more details refer to F/W documentation.

	/*

	 * Offset for register entries, entry size and registers count is

	 * duplicated in every thread header in keeping with HDAT format.

	 * Use these values from the first thread header.

	/*

	 * Skip past the first CPU note. Fill this note with the

	 * crashing CPU's prstatus.

		/*

		 * Register state data of MAX cores is provided by firmware,

		 * but some of this cores may not be active. So, while

		 * processing register state data, check core state and

		 * skip threads that belong to inactive cores.

			/*

			 * Add crashing CPU as the first NT_PRSTATUS note for

			 * GDB to process the core file appropriately.

 Get size of header & CPU notes for OPAL core */

 Allocate buffer to setup OPAL core */

 Read OPAL related device-tree entries */

 Use count to keep track of the program headers */

 Remove OPAL core sysfs file */

 free the buffer used for setting up OPAL core */

 Check if dump has been initiated on last reboot */

 Get OPAL metadata */

 Get OPAL CPU metadata */

 Allocate memory for config buffer */

 Parse OPAL metadata */

 Parse OPAL CPU metadata */

		/*

		 * Take away '/sys/firmware/opal/core' and release all memory

		 * used for exporting this file.

	/*

	 * If oc_conf->opalcorebuf= is set in the 2nd kernel,

	 * then capture the dump.

 Set OPAL core file size */

 Export OPAL core sysfs file */

	/* The /sys/firmware/opal/core is moved to /sys/firmware/opal/mpipl/

	 * directory, need to create symlink at old location to maintain

	 * backward compatibility.

 SPDX-License-Identifier: GPL-2.0

/*

 * PowerNV code for secure variables

 *

 * Copyright (C) 2019 IBM Corporation

 * Author: Claudio Carvalho

 *         Nayna Jain

 *

 * APIs to access secure variables managed by OPAL.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OPAL IMC interface detection driver

 * Supported on POWERNV platform

 *

 * Copyright	(C) 2017 Madhavan Srinivasan, IBM Corporation.

 *		(C) 2017 Anju T Sudhakar, IBM Corporation.

 *		(C) 2017 Hemant K Shaw, IBM Corporation.

 Helpers to export imc command and mode via debugfs */

/*

 * export_imc_mode_and_cmd: Create a debugfs interface

 *                     for imc_cmd and imc_mode

 *                     for each node in the system.

 *  imc_mode and imc_cmd can be changed by echo into

 *  this interface.

/*

 * imc_get_mem_addr_nest: Function to get nest counter memory region

 * for each chip

/*

 * imc_pmu_create : Takes the parent device which is the pmu unit, pmu_index

 *		    and domain as the inputs.

 * Allocates memory for the struct imc_pmu, sets up its domain, size and offsets

 Return for unknown domain */

 memory for pmu */

 Set the domain */

 Function to register IMC pmu */

 Disable the IMC Core functions */

	/*

	 * Check whether this is kdump kernel. If yes, force the engines to

	 * stop and return.

 If core imc is not registered, unregister thread-imc */

	/*

	 * Function only stops the engines which is bare minimum.

	 * TODO: Need to handle proper memory cleanup and pmu

	 * unregister.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV setup code.

 *

 * Copyright 2011 IBM Corp.

	/*

	 * The features below are enabled by default, so we instead look to see

	 * if firmware has *disabled* them, and clear them if so.

 Default to fallback in case fw-features are not available */

	/*

	 * If we are non-Power9 bare metal, we don't need to flush on kernel

	 * entry or after user access: they fix a P9 specific vulnerability.

 Initialize SMP */

 Setup RTC and NVRAM callbacks */

 Enable NAP mode */

 XXX PMCS */

	/*

	 * Initialize the LPC bus now so that legacy serial

	 * ports can be found on it

 Allocate per cpu area to save old slb contents during MCE */

 Try using a XIVE if available, otherwise use a XICS */

	/*

	 * Disable all notifiers from OPAL, we can't

	 * service interrupts anymore anyway

 Print flash update message if one is scheduled. */

 Opal is busy wait for some time and retry */

 Unknown error while issuing reboot */

 Unknown error while issuing cec-reboot */

 Let the PCI code clear up IODA tables */

	/*

	 * Stop OPAL activity: Unregister all OPAL interrupts so they

	 * don't fire up while we kexec and make sure all potentially

	 * DMA'ing ops are complete (such as dump retrieval).

			/*

			 * On crash secondaries might be unreachable or hung,

			 * so timeout if we've waited too long

 On OPAL, we return all CPUs to firmware */

 Return secondary CPUs to firmware on OPAL v3 */

 Return the CPU to OPAL */

 Primary waits for the secondaries to have reached OPAL */

 Switch XIVE back to emulation mode */

		/*

		 * We might be running as little-endian - now that interrupts

		 * are disabled, reset the HILE bit to big-endian so we don't

		 * take interrupts in the wrong endian later

		 *

		 * We reinit to enable both radix and hash on P9 to ensure

		 * the mode used by the next kernel is always supported.

 CONFIG_KEXEC_CORE */

	/*

	 * We map the kernel linear region with 1GB large pages on radix. For

	 * memory hot unplug to work our memory block size must be at least

	 * this size.

 ppc_md.system_reset_exception gets filled in by pnv_smp_init() */

 Make sure "normal" HTM is off (it should be) */

 Turn on no suspend mode, and HTM no SC */

 CONFIG_PPC_TRANSACTIONAL_MEM */

/*

 * Returns the cpu frequency for 'cpu' in Hz. This is used by

 * /proc/cpuinfo

	/*

	 * If the backend cpufreq driver does not exist,

         * then fallback to old way of reporting the clockrate.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV OPAL in-memory console interface

 *

 * Copyright 2014 IBM Corp.

 OPAL in-memory console. Defined in OPAL source at core/console.c */

	/* Now we've read out_pos, put a barrier in before reading the new

	/* When the buffer has wrapped, read from the out_pos marker to the end

	 * of the buffer, and then read the remaining data as in the un-wrapped

 Sanity check. The firmware should not do this to us. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV LPC bus handling.

 *

 * Copyright 2013 IBM Corp.

		/*

		 * Select access size based on count and alignment and

		 * access type. IO and MEM only support byte acceses,

		 * FW supports all 3.

		/*

		 * Now there is some trickery with the data returned by OPAL

		 * as it's the desired data right justified in a 32-bit BE

		 * word.

		 *

		 * This is a very bad interface and I'm to blame for it :-(

		 *

		 * So we can't just apply a 32-bit swap to what comes from OPAL,

		 * because user space expects the *bytes* to be in their proper

		 * respective positions (ie, LPC position).

		 *

		 * So what we really want to do here is to shift data right

		 * appropriately on a LE kernel.

		 *

		 * IE. If the LPC transaction has bytes B0, B1, B2 and B3 in that

		 * order, we have in memory written to by OPAL at the "data"

		 * pointer:

		 *

		 *               Bytes:      OPAL "data"   LE "data"

		 *   32-bit:   B0 B1 B2 B3   B0B1B2B3      B3B2B1B0

		 *   16-bit:   B0 B1         0000B0B1      B1B00000

		 *    8-bit:   B0            000000B0      B0000000

		 *

		 * So a BE kernel will have the leftmost of the above in the MSB

		 * and rightmost in the LSB and can just then "cast" the u32 "data"

		 * down to the appropriate quantity and write it.

		 *

		 * However, an LE kernel can't. It doesn't need to swap because a

		 * load from data followed by a store to user are going to preserve

		 * the byte ordering which is the wire byte order which is what the

		 * user wants, but in order to "crop" to the right size, we need to

		 * shift right first.

		/*

		 * Select access size based on count and alignment and

		 * access type. IO and MEM only support byte acceses,

		 * FW supports all 3.

		/*

		 * Similarly to the read case, we have some trickery here but

		 * it's different to handle. We need to pass the value to OPAL in

		 * a register whose layout depends on the access size. We want

		 * to reproduce the memory layout of the user, however we aren't

		 * doing a load from user and a store to another memory location

		 * which would achieve that. Here we pass the value to OPAL via

		 * a register which is expected to contain the "BE" interpretation

		 * of the byte sequence. IE: for a 32-bit access, byte 0 should be

		 * in the MSB. So here we *do* need to byteswap on LE.

		 *

		 *           User bytes:    LE "data"  OPAL "data"

		 *  32-bit:  B0 B1 B2 B3    B3B2B1B0   B0B1B2B3

		 *  16-bit:  B0 B1          0000B1B0   0000B0B1

		 *   8-bit:  B0             000000B0   000000B0

 CONFIG_DEBUG_FS */

	/*

	 * Look for a Power8 LPC bus tagged as "primary",

	 * we currently support only one though the OPAL APIs

	 * support any number.

 Does it support direct mapping ? */

 Setup special IO ops */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * kmsg dumper that ensures the OPAL console fully flushes panic messages

 *

 * Author: Russell Currey <ruscur@russell.cc>

 *

 * Copyright 2015 IBM Corporation.

/*

 * Console output is controlled by OPAL firmware.  The kernel regularly calls

 * OPAL_POLL_EVENTS, which flushes some console output.  In a panic state,

 * however, the kernel no longer calls OPAL_POLL_EVENTS and the panic message

 * may not be completely printed.  This function does not actually dump the

 * message, it just ensures that OPAL completely flushes the console buffer.

	/*

	 * Outside of a panic context the pollers will continue to run,

	 * so we don't need to do any special flushing.

 Add our dumper to the list */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2013, Michael (Ellerman|Neuling), IBM Corporation.

/*

 * Split/unsplit procedure:

 *

 * A core can be in one of three states, unsplit, 2-way split, and 4-way split.

 *

 * The mapping to subcores_per_core is simple:

 *

 *  State       | subcores_per_core

 *  ------------|------------------

 *  Unsplit     |        1

 *  2-way split |        2

 *  4-way split |        4

 *

 * The core is split along thread boundaries, the mapping between subcores and

 * threads is as follows:

 *

 *  Unsplit:

 *          ----------------------------

 *  Subcore |            0             |

 *          ----------------------------

 *  Thread  |  0  1  2  3  4  5  6  7  |

 *          ----------------------------

 *

 *  2-way split:

 *          -------------------------------------

 *  Subcore |        0        |        1        |

 *          -------------------------------------

 *  Thread  |  0   1   2   3  |  4   5   6   7  |

 *          -------------------------------------

 *

 *  4-way split:

 *          -----------------------------------------

 *  Subcore |    0    |    1    |    2    |    3    |

 *          -----------------------------------------

 *  Thread  |  0   1  |  2   3  |  4   5  |  6   7  |

 *          -----------------------------------------

 *

 *

 * Transitions

 * -----------

 *

 * It is not possible to transition between either of the split states, the

 * core must first be unsplit. The legal transitions are:

 *

 *  -----------          ---------------

 *  |         |  <---->  | 2-way split |

 *  |         |          ---------------

 *  | Unsplit |

 *  |         |          ---------------

 *  |         |  <---->  | 4-way split |

 *  -----------          ---------------

 *

 * Unsplitting

 * -----------

 *

 * Unsplitting is the simpler procedure. It requires thread 0 to request the

 * unsplit while all other threads NAP.

 *

 * Thread 0 clears HID0_POWER8_DYNLPARDIS (Dynamic LPAR Disable). This tells

 * the hardware that if all threads except 0 are napping, the hardware should

 * unsplit the core.

 *

 * Non-zero threads are sent to a NAP loop, they don't exit the loop until they

 * see the core unsplit.

 *

 * Core 0 spins waiting for the hardware to see all the other threads napping

 * and perform the unsplit.

 *

 * Once thread 0 sees the unsplit, it IPIs the secondary threads to wake them

 * out of NAP. They will then see the core unsplit and exit the NAP loop.

 *

 * Splitting

 * ---------

 *

 * The basic splitting procedure is fairly straight forward. However it is

 * complicated by the fact that after the split occurs, the newly created

 * subcores are not in a fully initialised state.

 *

 * Most notably the subcores do not have the correct value for SDR1, which

 * means they must not be running in virtual mode when the split occurs. The

 * subcores have separate timebases SPRs but these are pre-synchronised by

 * opal.

 *

 * To begin with secondary threads are sent to an assembly routine. There they

 * switch to real mode, so they are immune to the uninitialised SDR1 value.

 * Once in real mode they indicate that they are in real mode, and spin waiting

 * to see the core split.

 *

 * Thread 0 waits to see that all secondaries are in real mode, and then begins

 * the splitting procedure. It firstly sets HID0_POWER8_DYNLPARDIS, which

 * prevents the hardware from unsplitting. Then it sets the appropriate HID bit

 * to request the split, and spins waiting to see that the split has happened.

 *

 * Concurrently the secondaries will notice the split. When they do they set up

 * their SPRs, notably SDR1, and then they can return to virtual mode and exit

 * the procedure.

 Initialised at boot by subcore_init() */

/*

 * Used to communicate to offline cpus that we want them to pop out of the

 * offline loop and do a split or unsplit.

 *

 * 0 - no split happening

 * 1 - unsplit in progress

 * 2 - split to 2 in progress

 * 4 - split to 4 in progress

 Order the wait loop vs any subsequent loads/stores. */

 OPAL call to patch slw with the new HID0 value */

	/*

	 *  The HID0 update on Power8 should at the very least be

	 *  preceded by a SYNC instruction followed by an ISYNC

	 *  instruction

 Wake secondaries out of NAP */

 Convert new_mode (2 or 4) into an index into our parms array */

 Write new mode */

 Wait for it to happen */

	/*

	 * At boot subcores_per_core will be 0, so we will always unsplit at

	 * boot. In the usual case where the core is already unsplit it's a

	 * nop, and this just ensures the kernel's notion of the mode is

	 * consistent with the hardware.

	/*

	 * sibling mask for the first cpu. Left shift this by required bits

	 * to get sibling mask for the rest of the cpus.

 This should work even though the cpu is offline */

 Wait for all cpus to finish before we touch subcores_per_core */

 Make the new mode public */

 Make sure the new mode is written before we exit */

	/*

	 * We are only called at boot, or from the sysfs write. If that ever

	 * changes we'll need a lock here.

 This cpu will update the globals before exiting stop machine */

 Ensure state is consistent before we call the other cpus */

 We are serialised by the attribute lock */

 Nothing to do */

	/*

	 * We need all threads in a core to be present to split/unsplit so

         * continue only if max_cpus are aligned to threads_per_core.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV OPAL Sensor-groups interface

 *

 * Copyright 2017 IBM Corp.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2016-17 IBM Corp.

	/*

	 * IRQ and fault handling setup is needed only for user space

	 * send windows.

		/*

		 * Fault window is used only for user space send windows.

		 * So if vinst->virq is NULL, tx_win_open returns -ENODEV

		 * for user space.

/*

 * Although this is read/used multiple times, it is written to only

 * during initialization.

 SPDX-License-Identifier: GPL-2.0+

/*

 * TCE helpers for IODA PCI/PCIe on PowerNV platforms

 *

 * Copyright 2018 IBM Corp.

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License

 * as published by the Free Software Foundation; either version

 * 2 of the License, or (at your option) any later version.

 Add 16M for POWER8 by default */

 Skip the rest of the level */

 Adjust direct table size from window_size and levels */

 Allocate TCE table */

 addr==NULL means that the first level allocation failed */

	/*

	 * First level was allocated but some lower level failed as

	 * we did not allocate as much as we wanted,

	 * release partially allocated table.

 Allocate userspace view of the TCE table */

 Setup linux iommu table */

 Remove link to a group from table's list of attached groups */

 Clean a pointer to iommu_table in iommu_table_group::tables[] */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV cpuidle code

 *

 * Copyright 2015 IBM Corp.

 Power ISA 3.0 allows for stop states 0x0 - 0xF */

/*

 * The default stop state that will be used by ppc_md.power_save

 * function on platforms that support stop instruction.

/*

 * First stop state levels when SPR and TB loss can occur.

/*

 * psscr value and mask of the deepest stop idle state.

 * Used when a cpu is offlined.

	/*

	 * hid0, hid1, hid4, hid5, hmeer and lpcr values are symmetric across

	 * all cpus at boot. Get these reg values of current cpu and use the

	 * same across all cpus.

 HIDs are per core registers */

 Only p8 needs to set extra HID regiters */

/*

 * Used to store fastsleep workaround state

 * 0 - Workaround applied/undone at fastsleep entry/exit path (Default)

 * 1 - Workaround applied once, never undone.

	/*

	 * fastsleep_workaround_applyonce = 1 implies

	 * fastsleep workaround needs to be left in 'applied' state on all

	 * the cores. Do this by-

	 * 1. Disable the 'undo' workaround in fastsleep exit path

	 * 2. Sendi IPIs to all the cores which have at least one online thread

	 * 3. Disable the 'apply' workaround in fastsleep entry path

	 *

	 * There is no need to send ipi to cores which have all threads

	 * offlined, as last thread of the core entering fastsleep or deeper

	 * state would have applied workaround.

 P7 and P8 */

 per core */

 per subcore */

 per thread */

 per thread SPRs that get lost in shallow states */

 avoid false use-uninitialised */

			/*

			 * Increment winkle counter and set all winkle bits if

			 * all threads are winkling. This allows wakeup side to

			 * distinguish between fast sleep and winkle state

			 * loss. Fast sleep still has to resync the timebase so

			 * this may not be a really big win.

 go idle */

			/*

			 * We don't need an isync after the mtsprs here because

			 * the upcoming mtmsrd is execution synchronizing.

 HV state loss */

 Per-core SPRs */

 TB */

 Per-subcore SPRs */

	/*

	 * isync after restoring shared SPRs and before unlocking. Unlock

	 * only contains hwsync which does not necessarily do the right

	 * thing for SPRs.

 Fast sleep does not lose SPRs */

 Per-thread SPRs */

	/*

	 * The SLB has to be restored here, but it sometimes still

	 * contains entries, so the __ variant must be used to prevent

	 * multi hits.

 Tell KVM we're entering idle. */

*****************************************************/

  N O T E   W E L L    ! ! !    N O T E   W E L L   */

 The following store to HSTATE_HWTHREAD_STATE(r13)  */

 MUST occur in real mode, i.e. with the MMU off,    */

 and the MMU must stay off until we clear this flag */

 and test HSTATE_HWTHREAD_REQ(r13) in               */

 pnv_powersave_wakeup in this file.                 */

 The reason is that another thread can switch the   */

 MMU to a guest context whenever this flag is set   */

 to KVM_HWTHREAD_IN_IDLE, and if the MMU was on,    */

 that would potentially cause this thread to start  */

 executing instructions from guest memory in        */

 hypervisor mode, leading to a host crash or data   */

 corruption, or worse.                              */

*****************************************************/

 Order setting hwthread_state vs. testing hwthread_req */

 per core */

 per thread */

 per thread SPRs that get lost in shallow states */

 avoid false used-uninitialised */

 EC=ESL=0 case */

		/*

		 * Wake synchronously. SRESET via xscom may still cause

		 * a 0x100 powersave wakeup with SRR1 reason!

 go idle */

		/*

		 * Registers not saved, can't recover!

		 * This would be a hardware bug

 EC=ESL=1 case */

 order setting requested_psscr vs testing dont_stop */

		 /*

		  * POWER9 DD2 can incorrectly set PMAO when waking up

		  * after a state-loss idle. Saving and restoring MMCR0

		  * over idle is a workaround.

 go idle */

		/*

		 * We don't need an isync after the mtsprs here because the

		 * upcoming mtmsrd is execution synchronizing.

		/*

		 * Workaround for POWER9 DD2.0, if we lost resources, the ERAT

		 * might have been corrupted and needs flushing. We also need

		 * to reload MMCR0 (see mmcr0 comment above).

		/*

		 * DD2.2 and earlier need to set then clear bit 60 in MMCRA

		 * to ensure the PMU starts running.

	/*

	 * On POWER9, SRR1 bits do not match exactly as expected.

	 * SRR1_WS_GPRLOSS (10b) can also result in SPR loss, so

	 * just always test PSSCR for SPR/TB state loss.

 HV state loss */

 Per-core SPRs */

 TB loss */

	/*

	 * isync after restoring shared SPRs and before unlocking. Unlock

	 * only contains hwsync which does not necessarily do the right

	 * thing for SPRs.

 Per-thread SPRs */

/*

 * This is used in working around bugs in thread reconfiguration

 * on POWER9 (at least up to Nimbus DD2.2) relating to transactional

 * memory and the way that XER[SO] is checkpointed.

 * This function forces the core into SMT4 in order by asking

 * all other threads not to stop, and sending a message to any

 * that are in a stop state.

 * Must be called with preemption disabled.

 this thread is awake */

 order setting dont_stop vs testing requested_psscr */

 If at least 3 threads are awake, the core is in SMT4 already */

 We have to wake some threads; we'll use msgsnd */

 now spin until at least 3 threads are awake */

 clear all the dont_stop flags */

 CONFIG_KVM_BOOK3S_HV_POSSIBLE */

	/*

	 * SPRs that get lost in shallow states:

	 *

	 * P10 loses CR, LR, CTR, FPSCR, VSCR, XER, TAR, SPRG2, and HSPRG1

	 * isa300 idle routines restore CR, LR.

	 * CTR is volatile

	 * idle thread doesn't use FP or VEC

	 * kernel doesn't use TAR

	 * HSPRG1 is only live in HV interrupt entry

	 * SPRG2 is only live in KVM guests, KVM handles it.

	struct p10_sprs sprs = {}; /* avoid false used-uninitialised */

 EC=ESL=0 case */

		/*

		 * Wake synchronously. SRESET via xscom may still cause

		 * a 0x100 powersave wakeup with SRR1 reason!

 go idle */

		/*

		 * Registers not saved, can't recover!

		 * This would be a hardware bug

 EC=ESL=1 case */

 XXX: save SPRs for deep state loss here. */

 go idle */

	/*

	 * On POWER10, SRR1 bits do not match exactly as expected.

	 * SRR1_WS_GPRLOSS (10b) can also result in SPR loss, so

	 * just always test PSSCR for SPR/TB state loss.

 HV state loss */

 XXX: restore per-core SPRs here */

 TB loss */

	/*

	 * isync after restoring shared SPRs and before unlocking. Unlock

	 * only contains hwsync which does not necessarily do the right

	 * thing for SPRs.

 XXX: restore per-thread SPRs here */

/*

 * Used for ppc_md.power_save which needs a function with no parameters

	/*

	 * Program the LPCR via stop-api only if the deepest stop state

	 * can lose hypervisor context.

/*

 * pnv_cpu_offline: A function that puts the CPU into the deepest

 * available platform idle state on a CPU-Offline.

 * interrupts hard disabled and no lazy irq pending.

 This is the fallback method. We emulate snooze */

/*

 * Power ISA 3.0 idle initialization.

 *

 * POWER ISA 3.0 defines a new SPR Processor stop Status and Control

 * Register (PSSCR) to control idle behavior.

 *

 * PSSCR layout:

 * ----------------------------------------------------------

 * | PLS | /// | SD | ESL | EC | PSLL | /// | TR | MTL | RL |

 * ----------------------------------------------------------

 * 0      4     41   42    43   44     48    54   56    60

 *

 * PSSCR key fields:

 *	Bits 0:3  - Power-Saving Level Status (PLS). This field indicates the

 *	lowest power-saving state the thread entered since stop instruction was

 *	last executed.

 *

 *	Bit 41 - Status Disable(SD)

 *	0 - Shows PLS entries

 *	1 - PLS entries are all 0

 *

 *	Bit 42 - Enable State Loss

 *	0 - No state is lost irrespective of other fields

 *	1 - Allows state loss

 *

 *	Bit 43 - Exit Criterion

 *	0 - Exit from power-save mode on any interrupt

 *	1 - Exit from power-save mode controlled by LPCR's PECE bits

 *

 *	Bits 44:47 - Power-Saving Level Limit

 *	This limits the power-saving level that can be entered into.

 *

 *	Bits 60:63 - Requested Level

 *	Used to specify which power-saving level must be entered on executing

 *	stop instruction

	/*

	 * psscr_mask == 0xf indicates an older firmware.

	 * Set remaining fields of psscr to the default values.

	 * See NOTE above definition of PSSCR_HV_DEFAULT_VAL

	/*

	 * New firmware is expected to set the psscr_val bits correctly.

	 * Validate that the following invariants are correctly maintained by

	 * the new firmware.

	 * - ESL bit value matches the EC bit value.

	 * - ESL bit is set for all the deep stop states.

/*

 * pnv_arch300_idle_init: Initializes the default idle state, first

 *                        deep idle state and deepest idle state on

 *                        ISA 3.0 CPUs.

 *

 * @np: /ibm,opal/power-mgt device node

 * @flags: cpu-idle-state-flags array

 * @dt_idle_states: Number of idle state entries

 * Returns 0 on success

 stop is not really architected, we only have p9,p10 drivers */

	/*

	 * pnv_deepest_stop_{val,mask} should be set to values corresponding to

	 * the deepest stop state.

	 *

	 * pnv_default_stop_{val,mask} should be set to values corresponding to

	 * the deepest loss-less (OPAL_PM_STOP_INST_FAST) stop state.

 No deep loss driver implemented for POWER10 yet */

		/*

		 * The idle code does not deal with TB loss occurring

		 * in a shallower state than SPR loss, so force it to

		 * behave like SPRs are lost if TB is lost. POWER9 would

		 * never encouter this, but a POWER8 core would if it

		 * implemented the stop instruction. So this is for forward

		 * compatibility.

	/*

	 * The stop-api is unable to restore hypervisor

	 * resources on wakeup from platform idle states which

	 * lose full context. So disable such states.

		/*

		 * Use the default stop state for CPU-Hotplug

		 * if available.

 Fallback to snooze loop for CPU-Hotplug */

/*

 * Probe device tree for supported idle states

/*

 * This function parses device-tree and populates all the information

 * into pnv_idle_states structure. It also sets up nr_pnv_idle_states

 * which is the number of cpuidle states discovered through device-tree.

 Read flags */

 Read latencies */

 Read residencies */

 For power9 and later */

 Read pm_crtl_val */

 Read pm_crtl_mask */

	/*

	 * power8 specific properties ibm,cpu-idle-state-pmicr-mask and

	 * ibm,cpu-idle-state-pmicr-val were never used and there is no

	 * plan to use it in near future. Hence, not parsing these properties

 Set up PACA fields */

 P7/P8 nap */

 P9 stop workarounds */

 In case we error out nr_pnv_idle_states will be zero */

			/*

			 * OPAL_PM_SLEEP_ENABLED_ER1 is set. It indicates that

			 * workaround is needed to use fastsleep. Provide sysfs

			 * control to choose how this workaround has to be

			 * applied.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV OPAL power control for graceful shutdown handling

 *

 * Copyright 2015 IBM Corp.

 Detect EPOW event */

	/*

	* Check for EPOW event. Kernel sends supported EPOW classes info

	* to OPAL. OPAL returns EPOW info along with classes present.

 Look for EPOW events present */

 Filter events which do not need shutdown. */

 Check for existing EPOW, DPO events */

 Check for DPO event */

 Check for EPOW event */

 OPAL power-control events notifier */

 OPAL EPOW event notifier block */

 OPAL DPO event notifier block */

 OPAL power-control event notifier block */

 Register OPAL power-control events notifier */

 Determine OPAL EPOW, DPO support */

 Register EPOW event notifier */

 Register DPO event notifier */

 Check for any pending EPOW or DPO events. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2013, Michael Ellerman, IBM Corporation.

 Calculate the parity of the value */

 xor our value with the previous mask */

 update the mask based on the parity of this value */

 Using DARN with L=1 - 64-bit conditioned random number */

 Create devices for hwrng driver */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV OPAL Dump Interface

 *

 * Copyright 2013,2014 IBM Corp.

 becomes object name */

/*

 * Send acknowledgement to OPAL

	/*

	 * Try to self remove this attribute. If we are successful,

	 * delete the kobject itself.

/* Attributes of a dump

 * The binary attribute of the dump itself is dynamic

 * due to the dynamic size of the dump

 Allocate memory */

 Generate SG list */

 First entry address */

 Fetch data */

 Free SG list */

			/* On a partial read, we just return EIO

			 * and rely on userspace to ask us to try

			 * again.

	/* You may think we could free the dump buffer now and retrieve

	 * it again later if needed, but due to current firmware limitation,

	 * that's not the case. So, once read into userspace once,

	 * we keep the dump around until it's acknowledged by userspace.

	/*

	 * As soon as the sysfs file for this dump is created/activated there is

	 * a chance the opal_errd daemon (or any userspace) might read and

	 * acknowledge the dump before kobject_uevent() is called. If that

	 * happens then there is a potential race between

	 * dump_ack_store->kobject_put() and kobject_uevent() which leads to a

	 * use-after-free of a kernfs object resulting in a kernel crash.

	 *

	 * To avoid that, we need to take a reference on behalf of the bin file,

	 * so that our reference remains valid while we call kobject_uevent().

	 * We then drop our reference before exiting the function, leaving the

	 * bin file to drop the last reference (if it hasn't already).

 Take a reference for the bin file */

 Drop reference count taken for bin file */

 Drop our reference */

	/* we may get notified twice, let's handle

	 * that gracefully and not create two conflicting

	 * entries.

 Drop reference added by kset_find_obj() */

 Dump not supported by firmware */

 SPDX-License-Identifier: GPL-2.0

/*

 * Ultravisor high level interfaces

 *

 * Copyright 2019, IBM Corporation.

 *

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2016-17 IBM Corp.

/*

 * Compute the paste address region for the window @window using the

 * ->paste_base_addr and ->paste_win_id_shift we got from device tree.

/*

 * Map the paste bus address of the given send window into kernel address

 * space. Unlike MMIO regions (map_mmio_region() below), paste region must

 * be mapped cache-able and is only applicable to send windows.

/*

 * Unmap the paste address region for a window.

/*

 * Unmap the MMIO regions for a window. Hold the vas_mutex so we don't

 * unmap when the window's debugfs dir is in use. This serializes close

 * of a window even on another VAS instance but since its not a critical

 * path, just minimize the time we hold the mutex for now. We can add

 * a per-instance mutex later if necessary.

/*

 * Find the Hypervisor Window Context (HVWC) MMIO Base Address Region and the

 * OS/User Window Context (UWC) MMIO Base Address Region for the given window.

 * Map these bus addresses and save the mapped kernel addresses in @window.

/*

 * Reset all valid registers in the HV and OS/User Window Contexts for

 * the window identified by @window.

 *

 * NOTE: We cannot really use a for loop to reset window context. Not all

 *	 offsets in a window context are valid registers and the valid

 *	 registers are not sequential. And, we can only write to offsets

 *	 with valid registers.

 Skip read-only registers: NX_UTIL and NX_UTIL_SE */

	/*

	 * The send and receive window credit adder registers are also

	 * accessible from HVWC and have been initialized above. We don't

	 * need to initialize from the OS/User Window Context, so skip

	 * following calls:

	 *

	 *	write_uwc_reg(window, VREG(TX_WCRED_ADDER), 0ULL);

	 *	write_uwc_reg(window, VREG(LRX_WCRED_ADDER), 0ULL);

/*

 * Initialize window context registers related to Address Translation.

 * These registers are common to send/receive windows although they

 * differ for user/kernel windows. As we resolve the TODOs we may

 * want to add fields to vas_winctx and move the initialization to

 * init_vas_winctx_regs().

	/*

	 * MSR_TA, MSR_US are false for both kernel and user.

	 * MSR_DR and MSR_PR are false for kernel.

	/*

	 * NOTE: From Section 5.7.8.1 Segment Lookaside Buffer of the

	 *	 Power ISA, v3.0B, Page size encoding is 0 = 4KB, 5 = 64KB.

	 *

	 * NOTE: From Section 1.3.1, Address Translation Context of the

	 *	 Nest MMU Workbook, LPCR_SC should be 0 for Power9.

	/*

	 * Section 1.3.1 (Address translation Context) of NMMU workbook.

	 *	0b00	Hashed Page Table mode

	 *	0b01	Reserved

	 *	0b10	Radix on HPT

	 *	0b11	Radix on Radix

	/*

	 * TODO: Can we mfspr(AMR) even for user windows?

/*

 * Initialize Reserved Send Buffer Count for the send window. It involves

 * writing to the register, reading it back to confirm that the hardware

 * has enough buffers to reserve. See section 1.3.1.2.1 of VAS workbook.

 *

 * Since we can only make a best-effort attempt to fulfill the request,

 * we don't return any errors if we cannot.

 *

 * TODO: Reserved (aka dedicated) send buffers are not supported yet.

/*

 * init_winctx_regs()

 *	Initialize window context registers for a receive window.

 *	Except for caching control and marking window open, the registers

 *	are initialized in the order listed in Section 3.1.4 (Window Context

 *	Cache Register Details) of the VAS workbook although they don't need

 *	to be.

 *

 * Design note: For NX receive windows, NX allocates the FIFO buffer in OPAL

 *	(so that it can get a large contiguous area) and passes that buffer

 *	to kernel via device tree. We now write that buffer address to the

 *	FIFO BAR. Would it make sense to do this all in OPAL? i.e have OPAL

 *	write the per-chip RX FIFO addresses to the windows during boot-up

 *	as a one-time task? That could work for NX but what about other

 *	receivers?  Let the receivers tell us the rx-fifo buffers for now.

 In PowerNV, interrupts go to HV. */

	/*

	 * NOTE: VAS expects the FIFO address to be copied into the LFIFO_BAR

	 *	 register as is - do NOT shift the address into VAS_LFIFO_BAR

	 *	 bit fields! Ok to set the page migration select fields -

	 *	 VAS ignores the lower 10+ bits in the address anyway, because

	 *	 the minimum FIFO size is 1K?

	 *

	 * See also: Design note in function header.

	/* Update window control and caching control registers last so

	 * we mark the window open only after fully initializing it and

	 * pushing context to cache.

 for a send window, point to the matching receive window */

 Skip read-only registers NX_UTIL and NX_UTIL_SE */

 Finally, push window context to memory and... */

 ... mark the window open for business */

 Better not be a send window! */

/*

 * Find the user space receive window given the @pswid.

 *      - We must have a valid vasid and it must belong to this instance.

 *        (so both send and receive windows are on the same VAS instance)

 *      - The window must refer to an OPEN, FTW, RECEIVE window.

 *

 * NOTE: We access ->windows[] table and assume that vinst->mutex is held.

/*

 * Get the VAS receive window associated with NX engine identified

 * by @cop and if applicable, @pswid.

 *

 * See also function header of set_vinst_win().

/*

 * We have two tables of windows in a VAS instance. The first one,

 * ->windows[], contains all the windows in the instance and allows

 * looking up a window by its id. It is used to look up send windows

 * during fault handling and receive windows when pairing user space

 * send/receive windows.

 *

 * The second table, ->rxwin[], contains receive windows that are

 * associated with NX engines. This table has VAS_COP_TYPE_MAX

 * entries and is used to look up a receive window by its

 * coprocessor type.

 *

 * Here, we save @window in the ->windows[] table. If it is a receive

 * window, we also save the window in the ->rxwin[] table.

	/*

	 * There should only be one receive window for a coprocessor type

	 * unless its a user (FTW) window.

/*

 * Clear this window from the table(s) of windows for this VAS instance.

 * See also function header of set_vinst_win().

	/*

	 * We first zero (memset()) all fields and only set non-zero fields.

	 * Following fields are 0/false but maybe deserve a comment:

	 *

	 *	->notify_os_intr_reg	In powerNV, send intrs to HV

	 *	->notify_disable	False for NX windows

	 *	->intr_disable		False for Fault Windows

	 *	->xtra_write		False for NX windows

	 *	->notify_early		NA for NX windows

	 *	->rsvd_txbuf_count	NA for Rx windows

	 *	->lpid, ->pid, ->tid	NA for Rx windows

		/*

		 * Section 1.8.1 Low Latency Core-Core Wake up of

		 * the VAS workbook:

		 *

		 *      - disable credit checks ([tr]x_wcred_mode = false)

		 *      - disable FIFO writes

		 *      - enable ASB_Notify, disable interrupt

 cannot be fault or user window if it is nx */

		/*

		 * Section 3.1.4.32: NX Windows must not disable notification,

		 *	and must not enable interrupts or early notification.

 cannot be both fault and user window */

		/*

		 * Section 3.1.4.32: Fault windows must disable notification

		 *	but not interrupts.

		/*

		 * User receive windows are only for fast-thread-wakeup

		 * (FTW). They don't need a FIFO and must disable interrupts

 Rx window must be one of NX or Fault or User window. */

		/*

		 * As noted in the VAS Workbook we disable credit checks.

		 * If we enable credit checks in the future, we must also

		 * implement a mechanism to return the user credits or new

		 * paste operations will fail.

	/*

	 * We first zero all fields and only set non-zero ones. Following

	 * are some fields set to 0/false for the stated reason:

	 *

	 *	->notify_os_intr_reg	In powernv, send intrs to HV

	 *	->rsvd_txbuf_count	Not supported yet.

	 *	->notify_disable	False for NX windows

	 *	->xtra_write		False for NX windows

	 *	->notify_early		NA for NX windows

	 *	->lnotify_lpid		NA for Tx windows

	 *	->lnotify_pid		NA for Tx windows

	 *	->lnotify_tid		NA for Tx windows

	 *	->tx_win_cred_mode	Ignore for now for NX windows

	 *	->rx_win_cred_mode	Ignore for now for NX windows

	/*

	 * IRQ and fault window setup is successful. Set fault window

	 * for the send window so that ready to handle faults.

	/*

	 * If caller did not specify a vasid but specified the PSWID of a

	 * receive window (applicable only to FTW windows), use the vasid

	 * from that receive window.

	/*

	 * If its a kernel send window, map the window address into the

	 * kernel's address space. For user windows, user must issue an

	 * mmap() to map the window into their address space.

	 *

	 * NOTE: If kernel ever resubmits a user CRB after handling a page

	 *	 fault, we will need to map this into kernel as well.

		/*

		 * Interrupt hanlder or fault window setup failed. Means

		 * NX can not generate fault for page fault. So not

		 * opening for user space tx window.

	/*

	 * Only NX windows are supported for now and hardware assumes

	 * report-enable flag is set for NX windows. Ensure software

	 * complies too.

		/*

		 * Set the REPORT_ENABLE bit (equivalent to writing

		 * to 1K offset of the paste address)

	/*

	 * Map the raw CR value from vas_paste() to an error code (there

	 * is just pass or fail for now though).

/*

 * If credit checking is enabled for this window, poll for the return

 * of window credits (i.e for NX engines to process any outstanding CRBs).

 * Since NX-842 waits for the CRBs to be processed before closing the

 * window, we should not have to wait for too long.

 *

 * TODO: We retry in 10ms intervals now. We could/should probably peek at

 *	the VAS_LRFIFO_PUSH_OFFSET register to get an estimate of pending

 *	CRBs on the FIFO and compute the delay dynamically on each retry.

 *	But that is not really needed until we support NX-GZIP access from

 *	user space. (NX-842 driver waits for CSB and Fast thread-wakeup

 *	doesn't use credit checking).

	/*

	 * Takes around few milliseconds to complete all pending requests

	 * and return credits.

	 * TODO: Scan fault FIFO and invalidate CRBs points to this window

	 *       and issue CRB Kill to stop all pending requests. Need only

	 *       if there is a bug in NX or fault handling in kernel.

		/*

		 * Process can not close send window until all credits are

		 * returned.

/*

 * Wait for the window to go to "not-busy" state. It should only take a

 * short time to queue a CRB, so window should not be busy for too long.

 * Trying 5ms intervals.

		/*

		 * Takes around few milliseconds to process all pending

		 * requests.

/*

 * Have the hardware cast a window out of cache and wait for it to

 * be completed.

 *

 * NOTE: It can take a relatively long time to cast the window context

 *	out of the cache. It is not strictly necessary to cast out if:

 *

 *	- we clear the "Pin Window" bit (so hardware is free to evict)

 *

 *	- we re-initialize the window context when it is reassigned.

 *

 *	We do the former in vas_win_close() and latter in vas_win_open().

 *	So, ignoring the cast-out for now. We can add it as needed. If

 *	casting out becomes necessary we should consider offloading the

 *	job to a worker thread, so the window close can proceed quickly.

 stub for now */

/*

 * Unpin and close a window so no new requests are accepted and the

 * hardware can evict this window from cache if necessary.

/*

 * Close a window.

 *

 * See Section 1.12.1 of VAS workbook v1.05 for details on closing window:

 *	- Disable new paste operations (unmap paste address)

 *	- Poll for the "Window Busy" bit to be cleared

 *	- Clear the Open/Enable bit for the Window.

 *	- Poll for return of window Credits (implies FIFO empty for Rx win?)

 *	- Unpin and cast window context out of cache

 *

 * Besides the hardware, kernel has some bookkeeping of course.

 if send window, drop reference to matching receive window */

/*

 * Return credit for the given window.

 * Send windows and fault window uses credit mechanism as follows:

 *

 * Send windows:

 * - The default number of credits available for each send window is

 *   1024. It means 1024 requests can be issued asynchronously at the

 *   same time. If the credit is not available, that request will be

 *   returned with RMA_Busy.

 * - One credit is taken when NX request is issued.

 * - This credit is returned after NX processed that request.

 * - If NX encounters translation error, kernel will return the

 *   credit on the specific send window after processing the fault CRB.

 *

 * Fault window:

 * - The total number credits available is FIFO_SIZE/CRB_SIZE.

 *   Means 4MB/128 in the current implementation. If credit is not

 *   available, RMA_Reject is returned.

 * - A credit is taken when NX pastes CRB in fault FIFO.

 * - The kernel with return credit on fault window after reading entry

 *   from fault FIFO.

 send window */

	/*

	 * If application closes the window before the hardware

	 * returns the fault CRB, we should wait in vas_win_close()

	 * for the pending requests. so the window must be active

	 * and the process alive.

	 *

	 * If its a kernel process, we should not get any faults and

	 * should not get here.

	/*

	 * Do some sanity checks on the decoded window.  Window should be

	 * NX GZIP user send window. FTW windows should not incur faults

	 * since their CRBs are ignored (not queued on FIFO or processed

	 * by NX).

/*

 * Supporting only nx-gzip coprocessor type now, but this API code

 * extended to other coprocessor types later.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * OPAL Runtime Diagnostics interface driver

 * Supported on POWERNV platform

 *

 * Copyright IBM Corporation 2015

/*

 * The msg member must be at the end of the struct, as it's followed by the

 * message data.

 PRD ranges need a label */

	/*

	 * Prevent multiple (separate) processes from concurrent interactions

	 * with the FW PRD channel

/*

 * opal_prd_mmap - maps firmware-provided ranges into userspace

 * @file: file structure for the device

 * @vma: VMA to map the registers into

 ensure we're mapping within one of the allowable ranges */

 we need at least a header's worth of data */

 eep! re-queue at the head of the list */

 grab the header */

 opal interface */

	/* Calculate total size of the message and item we need to store. The

	/* We should only have one prd driver instance per machine; ensure

	 * that we only get a valid probe on a single OF node.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * The majority of the complexity in supporting SR-IOV on PowerNV comes from

 * the need to put the MMIO space for each VF into a separate PE. Internally

 * the PHB maps MMIO addresses to a specific PE using the "Memory BAR Table".

 * The MBT historically only applied to the 64bit MMIO window of the PHB

 * so it's common to see it referred to as the "M64BT".

 *

 * An MBT entry stores the mapped range as an <base>,<mask> pair. This forces

 * the address range that we want to map to be power-of-two sized and aligned.

 * For conventional PCI devices this isn't really an issue since PCI device BARs

 * have the same requirement.

 *

 * For a SR-IOV BAR things are a little more awkward since size and alignment

 * are not coupled. The alignment is set based on the the per-VF BAR size, but

 * the total BAR area is: number-of-vfs * per-vf-size. The number of VFs

 * isn't necessarily a power of two, so neither is the total size. To fix that

 * we need to finesse (read: hack) the Linux BAR allocator so that it will

 * allocate the SR-IOV BARs in a way that lets us map them using the MBT.

 *

 * The changes to size and alignment that we need to do depend on the "mode"

 * of MBT entry that we use. We only support SR-IOV on PHB3 (IODA2) and above,

 * so as a baseline we can assume that we have the following BAR modes

 * available:

 *

 *   NB: $PE_COUNT is the number of PEs that the PHB supports.

 *

 * a) A segmented BAR that splits the mapped range into $PE_COUNT equally sized

 *    segments. The n'th segment is mapped to the n'th PE.

 * b) An un-segmented BAR that maps the whole address range to a specific PE.

 *

 *

 * We prefer to use mode a) since it only requires one MBT entry per SR-IOV BAR

 * For comparison b) requires one entry per-VF per-BAR, or:

 * (num-vfs * num-sriov-bars) in total. To use a) we need the size of each segment

 * to equal the size of the per-VF BAR area. So:

 *

 *	new_size = per-vf-size * number-of-PEs

 *

 * The alignment for the SR-IOV BAR also needs to be changed from per-vf-size

 * to "new_size", calculated above. Implementing this is a convoluted process

 * which requires several hooks in the PCI core:

 *

 * 1. In pcibios_device_add() we call pnv_pci_ioda_fixup_iov().

 *

 *    At this point the device has been probed and the device's BARs are sized,

 *    but no resource allocations have been done. The SR-IOV BARs are sized

 *    based on the maximum number of VFs supported by the device and we need

 *    to increase that to new_size.

 *

 * 2. Later, when Linux actually assigns resources it tries to make the resource

 *    allocations for each PCI bus as compact as possible. As a part of that it

 *    sorts the BARs on a bus by their required alignment, which is calculated

 *    using pci_resource_alignment().

 *

 *    For IOV resources this goes:

 *    pci_resource_alignment()

 *        pci_sriov_resource_alignment()

 *            pcibios_sriov_resource_alignment()

 *                pnv_pci_iov_resource_alignment()

 *

 *    Our hook overrides the default alignment, equal to the per-vf-size, with

 *    new_size computed above.

 *

 * 3. When userspace enables VFs for a device:

 *

 *    sriov_enable()

 *       pcibios_sriov_enable()

 *           pnv_pcibios_sriov_enable()

 *

 *    This is where we actually allocate PE numbers for each VF and setup the

 *    MBT mapping for each SR-IOV BAR. In steps 1) and 2) we setup an "arena"

 *    where each MBT segment is equal in size to the VF BAR so we can shift

 *    around the actual SR-IOV BAR location within this arena. We need this

 *    ability because the PE space is shared by all devices on the same PHB.

 *    When using mode a) described above segment 0 in maps to PE#0 which might

 *    be already being used by another device on the PHB.

 *

 *    As a result we need allocate a contigious range of PE numbers, then shift

 *    the address programmed into the SR-IOV BAR of the PF so that the address

 *    of VF0 matches up with the segment corresponding to the first allocated

 *    PE number. This is handled in pnv_pci_vf_resource_shift().

 *

 *    Once all that is done we return to the PCI core which then enables VFs,

 *    scans them and creates pci_devs for each. The init process for a VF is

 *    largely the same as a normal device, but the VF is inserted into the IODA

 *    PE that we allocated for it rather than the PE associated with the bus.

 *

 * 4. When userspace disables VFs we unwind the above in

 *    pnv_pcibios_sriov_disable(). Fortunately this is relatively simple since

 *    we don't need to validate anything, just tear down the mappings and

 *    move SR-IOV resource back to its "proper" location.

 *

 * That's how mode a) works. In theory mode b) (single PE mapping) is less work

 * since we can map each individual VF with a separate BAR. However, there's a

 * few limitations:

 *

 * 1) For IODA2 mode b) has a minimum alignment requirement of 32MB. This makes

 *    it only usable for devices with very large per-VF BARs. Such devices are

 *    similar to Big Foot. They definitely exist, but I've never seen one.

 *

 * 2) The number of MBT entries that we have is limited. PHB3 and PHB4 only

 *    16 total and some are needed for. Most SR-IOV capable network cards can support

 *    more than 16 VFs on each port.

 *

 * We use b) when using a) would use more than 1/4 of the entire 64 bit MMIO

 * window of the PHB.

 *

 *

 *

 * PHB4 (IODA3) added a few new features that would be useful for SR-IOV. It

 * allowed the MBT to map 32bit MMIO space in addition to 64bit which allows

 * us to support SR-IOV BARs in the 32bit MMIO window. This is useful since

 * the Linux BAR allocation will place any BAR marked as non-prefetchable into

 * the non-prefetchable bridge window, which is 32bit only. It also added two

 * new modes:

 *

 * c) A segmented BAR similar to a), but each segment can be individually

 *    mapped to any PE. This is matches how the 32bit MMIO window worked on

 *    IODA1&2.

 *

 * d) A segmented BAR with 8, 64, or 128 segments. This works similarly to a),

 *    but with fewer segments and configurable base PE.

 *

 *    i.e. The n'th segment maps to the (n + base)'th PE.

 *

 *    The base PE is also required to be a multiple of the window size.

 *

 * Unfortunately, the OPAL API doesn't currently (as of skiboot v6.6) allow us

 * to exploit any of the IODA3 features.

		/*

		 * Generally, one segmented M64 BAR maps one IOV BAR. However,

		 * if a VF BAR is too large we end up wasting a lot of space.

		 * If each VF needs more than 1/4 of the default m64 segment

		 * then each VF BAR should be mapped in single-PE mode to reduce

		 * the amount of space required. This does however limit the

		 * number of VFs we can support.

		 *

		 * The 1/4 limit is arbitrary and can be tweaked.

			/*

			 * On PHB3, the minimum size alignment of M64 BAR in

			 * single mode is 32MB. If this VF BAR is smaller than

			 * 32MB, but still too large for a segmented window

			 * then we can't map it and need to disable SR-IOV for

			 * this device.

		/*

		 * This BAR can be mapped with one segmented window, so adjust

		 * te resource size to accommodate.

 Save ourselves some MMIO space by disabling the unusable BARs */

		/*

		 * VF PEs are single-device PEs so their pdev pointer needs to

		 * be set. The pdev doesn't exist when the PE is allocated (in

		 * (pcibios_sriov_enable()) so we fix it up here.

		/*

		 * For PFs adjust their allocated IOV resources to match what

		 * the PHB can support using it's M64 BAR table.

	/*

	 * iov can be null if we have an SR-IOV device with IOV BAR that can't

	 * be placed in the m64 space (i.e. The BAR is 32bit or non-prefetch).

	 * In that case we don't allow VFs to be enabled since one of their

	 * BARs would not be placed in the correct PE.

	/*

	 * If we're using single mode then we can just use the native VF BAR

	 * alignment. We validated that it's possible to use a single PE

	 * window above when we did the fixup.

	/*

	 * On PowerNV platform, IOV BAR is mapped by M64 BAR to enable the

	 * SR-IOV. While from hardware perspective, the range mapped by M64

	 * BAR should be size aligned.

	 *

	 * This function returns the total IOV BAR size if M64 BAR is in

	 * Shared PE mode or just VF BAR size if not.

	 * If the M64 BAR is in Single PE mode, return the VF BAR size or

	 * M64 segment size if IOV BAR size is less.

/*

 * PHB3 and beyond support segmented windows. The window's address range

 * is subdivided into phb->ioda.total_pe_num segments and there's a 1-1

 * mapping between PEs and segments.

 unused */

	/*

	 * The API for setting up m64 mmio windows seems to have been designed

	 * with P7-IOC in mind. For that chip each M64 BAR (window) had a fixed

	 * split of 8 equally sized segments each of which could individually

	 * assigned to a PE.

	 *

	 * The problem with this is that the API doesn't have any way to

	 * communicate the number of segments we want on a BAR. This wasn't

	 * a problem for p7-ioc since you didn't have a choice, but the

	 * single PE windows added in PHB3 don't map cleanly to this API.

	 *

	 * As a result we've got this slightly awkward process where we

	 * call opal_pci_map_pe_mmio_window() to put the single in single

	 * PE mode, and set the PE for the window before setting the address

	 * bounds. We need to do it this way because the single PE windows

	 * for PHB3 have different alignment requirements on PHB3.

	/*

	 * NB: In single PE mode the window needs to be aligned to 32MB

 ignored by FW, m64 is 1-1 */

	/*

	 * Now actually enable it. We specified the BAR should be in "non-split"

	 * mode so FW will validate that the BAR is in single PE mode.

 don't need single mode? map everything in one go! */

 otherwise map each VF with single PE BARs */

 FIXME: Use pnv_ioda_release_pe()? */

 Remove from list */

	/*

	 * "offset" is in VFs.  The M64 windows are sized so that when they

	 * are segmented, each segment is the same size as the IOV BAR.

	 * Each segment is in a separate PE, and the high order bits of the

	 * address are the PE number.  Therefore, each VF's BAR is in a

	 * separate PE, and changing the IOV BAR start address changes the

	 * range of PEs the VFs are in.

		/*

		 * The actual IOV BAR range is determined by the start address

		 * and the actual size for num_vfs VFs BAR.  This check is to

		 * make sure that after shifting, the range will not overlap

		 * with another device.

	/*

	 * Since M64 BAR shares segments among all possible 256 PEs,

	 * we have to shift the beginning of PF IOV BAR to make it start from

	 * the segment which belongs to the PE number assigned to the first VF.

	 * This creates a "hole" in the /proc/iomem which could be used for

	 * allocating other resources so we reserve this area below and

	 * release when IOV is released.

 Release VF PEs */

 Un-shift the IOV BARs if we need to */

 Release M64 windows */

 Reserve PE for each VF */

 XXX What do we do here ? */

 Put PE to the list */

 associate this pe to it's pdn */

	/*

	 * There's a calls to IODA2 PE setup code littered throughout. We could

	 * probably fix that, but we'd still have problems due to the

	 * restriction inherent on IODA1 PHBs.

	 *

	 * NB: We class IODA3 as IODA2 since they're very similar.

 allocate a contigious block of PEs for our VFs */

 Assign M64 window accordingly */

	/*

	 * When using one M64 BAR to map one IOV BAR, we need to shift

	 * the IOV BAR according to the PE# allocated to the VFs.

	 * Otherwise, the PE# for the VF will conflict with others.

 Setup VF PEs */

 Release PCI data */

 Allocate PCI data */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Support PCI/PCIe on PowerNV platforms

 *

 * Copyright 2011 Benjamin Herrenschmidt, IBM Corp.

 Nicely print the contents of the PE State Tables (PEST). */

 Fetch PHB diag-data */

 If PHB supports compound PE, to handle it */

	/*

	 * For now, let's only display the diag buffer when we fail to clear

	 * the EEH status. We'll do more sensible things later when we have

	 * proper EEH support. We need to make sure we don't pollute ourselves

	 * with the normal errors generated when probing empty slots

	/*

	 * Get the PE#. During the PCI probe stage, we might not

	 * setup that yet. So all ER errors should be mapped to

	 * reserved PE.

	/*

	 * Fetch frozen state. If the PHB support compound PE,

	 * we need handle that case.

 Clear the frozen state if applicable */

		/*

		 * If PHB supports compound PE, freeze it for

		 * consistency.

 EEH not enabled ? */

 PE reset or device removed ? */

 CONFIG_EEH */

		/*

		* Only one device per PHB can use atomics.

		* Our policy is first-come, first-served.

 Setting same address twice is ok */

		/*

		* The device that owns atomics and wants to release

		* them must pass the same address with enable == 0.

 Fixup wrong class code in p7ioc and p8 root complex */

 If we don't have OPAL, eg. in sim, just skip PCI probe */

	/*

	 * On PowerNV PCIe devices are (currently) managed in cooperation

	 * with firmware. This isn't *strictly* required, but there's enough

	 * assumptions baked into both firmware and the platform code that

	 * it's unwise to allow the portbus services to be used.

	 *

	 * We need to fix this eventually, but for now set this flag to disable

	 * the portbus driver. The AER service isn't required since that AER

	 * events are handled via EEH. The pciehp hotplug driver can't work

	 * without kernel changes (and portbus binding breaks pnv_php). The

	 * other services also require some thinking about how we're going

	 * to integrate them.

 Look for IODA IO-Hubs. */

 Look for ioda2 built-in PHB3's */

 Look for ioda3 built-in PHB4's, we treat them as IODA2 */

 Look for NPU2 OpenCAPI PHBs */

 Configure IOMMU DMA hooks */

 SPDX-License-Identifier: GPL-2.0+

 Copyright 2017 IBM Corp.

 PASIDs are 20-bit, but on P9, NPU can only handle 15 bits */

/*

 * opencapi actags handling:

 *

 * When sending commands, the opencapi device references the memory

 * context it's targeting with an 'actag', which is really an alias

 * for a (BDF, pasid) combination. When it receives a command, the NPU

 * must do a lookup of the actag to identify the memory context. The

 * hardware supports a finite number of actags per link (64 for

 * POWER9).

 *

 * The device can carry multiple functions, and each function can have

 * multiple AFUs. Each AFU advertises in its config space the number

 * of desired actags. The host must configure in the config space of

 * the AFU how many actags the AFU is really allowed to use (which can

 * be less than what the AFU desires).

 *

 * When a PCI function is probed by the driver, it has no visibility

 * about the other PCI functions and how many actags they'd like,

 * which makes it impossible to distribute actags fairly among AFUs.

 *

 * Unfortunately, the only way to know how many actags a function

 * desires is by looking at the data for each AFU in the config space

 * and add them up. Similarly, the only way to know how many actags

 * all the functions of the physical device desire is by adding the

 * previously computed function counts. Then we can match that against

 * what the hardware supports.

 *

 * To get a comprehensive view, we use a 'pci fixup': at the end of

 * PCI enumeration, each function counts how many actags its AFUs

 * desire and we save it in a 'npu_link' structure, shared between all

 * the PCI functions of a same device. Therefore, when the first

 * function is probed by the driver, we can get an idea of the total

 * count of desired actags for the device, and assign the actags to

 * the AFUs, by pro-rating if needed.

 The functions of a device all share the same link */

 link doesn't exist yet. Allocate one */

	/*

	 * Check how many actags are desired for the AFUs under that

	 * function and add it to the count for the link

 Most likely an invalid config space */

		/*

		 * AFU index 'holes' are allowed. So don't fail if we

		 * can't read the actag info for an index

	/*

	 * On p9, we only have 64 actags per link, so they must be

	 * shared by all the functions of the same adapter. We counted

	 * the desired actag counts during PCI enumeration, so that we

	 * can allocate a pro-rated number of actags to each function.

	/*

	 * The number of PASIDs (process address space ID) which can

	 * be used by a function depends on how many functions exist

	 * on the device. The NPU needs to be configured to know how

	 * many bits are available to PASIDs and how many are to be

	 * used by the function BDF indentifier.

	 *

	 * We only support one AFU-carrying function for now.

	/*

	 * The TL capabilities are a characteristic of the NPU, so

	 * we go with hard-coded values.

	 *

	 * The receiving rate of each template is encoded on 4 bits.

	 *

	 * On P9:

	 * - templates 0 -> 3 are supported

	 * - templates 0, 1 and 3 have a 0 receiving rate

	 * - template 2 has receiving rate of 1 (extra cycle)

	/*

	 * opal stores the mmio addresses of the DSISR, DAR, TFC and

	 * PE_HANDLE registers in a device tree property, in that

	 * order

	/* ATSD physical address.

	 * ATSD LAUNCH register: write access initiates a shoot down to

	 * initiate the TLB Invalidate command.

	/* Assign a register set to a Logical Partition and MMIO ATSD

	 * LPARID register to the required value.

		/* load Abbreviated Virtual Address register with

		 * the necessary value

	/* Write access initiates a shoot down to initiate the

	 * TLB Invalidate command

	/* Actual Page Size to be invalidated

	 * 000 4KB

	 * 101 64KB

	 * 001 2MB

	 * 010 1GB

	/* Poll the ATSD status register to determine when the

	 * TLB Invalidate has been completed.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Error log support on PowerNV.

 *

 * Copyright 2013,2014 IBM Corp.

	/*

	 * Try to self remove this attribute. If we are successful,

	 * delete the kobject itself.

 Maximum size of a single log on FSP is 16KB */

 We may have had an error reading before, so let's retry */

	/*

	 * As soon as the sysfs file for this elog is created/activated there is

	 * a chance the opal_errd daemon (or any userspace) might read and

	 * acknowledge the elog before kobject_uevent() is called. If that

	 * happens then there is a potential race between

	 * elog_ack_store->kobject_put() and kobject_uevent() which leads to a

	 * use-after-free of a kernfs object resulting in a kernel crash.

	 *

	 * To avoid that, we need to take a reference on behalf of the bin file,

	 * so that our reference remains valid while we call kobject_uevent().

	 * We then drop our reference before exiting the function, leaving the

	 * bin file to drop the last reference (if it hasn't already).

 Take a reference for the bin file */

 Drop the reference taken for the bin file */

 Drop our reference */

	/* we may get notified twice, let's handle

	 * that gracefully and not create two conflicting

	 * entries.

 Drop reference added by kset_find_obj() */

 ELOG not supported by firmware */

 We are now ready to pull error logs from opal. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OPAL hypervisor Maintenance interrupt handling support in PowerNV.

 *

 * Copyright 2014 IBM Corporation

 * Author: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>

 Validity check */

 Validity check */

	/*

	 * We may not have a checkstop reason on some combination of

	 * hardware and/or skiboot version

	/*

	 * NPU2 has 3 FIRs. Reason encoded on a byte as:

	 *   2 bits for the FIR number

	 *   6 bits for the bit number

	 * It may be possible to find several reasons.

	 *

	 * We don't display a specific message per FIR bit as there

	 * are too many and most are meaningless without the workbook

	 * and/or hw team help anyway.

 Print things out */

 OpalHMIEvt_V2 and above provides reason for malfunction alert. */

		/*

		 * Check if HMI event has been recovered or not. If not

		 * then kernel can't continue, we need to panic.

		 * But before we do that, display all the HMI event

		 * available on the list and set unrecoverable flag to 1.

 Pull all HMI events from OPAL before we panic. */

 skip if not HMI event */

 HMI event info starts from param[0] */

/*

 * opal_handle_hmi_event - notifier handler that queues up HMI events

 * to be preocessed later.

 Sanity Checks */

 HMI event info starts from param[0] */

 Delay the logging of HMI events to workqueue. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV OPAL Firmware Update Interface

 *

 * Copyright 2013 IBM Corp.

 FLASH status codes */

 No operation initiated by user */

 Not a service authority partition */

 Validate image status values */

 Image ready for validation */

 User copied < VALIDATE_BUF_SIZE */

 Manage image status values */

 Cannot overwrite active img */

 Flash image status values */

 Img ready for flash on reboot */

 Flash image shorter than expected */

 Bad data in sg list entry */

 Bad length in sg list entry */

 Manage operation tokens */

 Reject temporary fw image */

 Commit temporary fw image */

 Update tokens */

 Cancel update request */

 Initiate update */

 Validate image update result tokens */

 T side will be updated */

 Partition does not have authority */

 Candidate image is not valid */

 Current fixpack level is unknown */

/*

 * Current T side will be committed to P side before being replace with new

 * image, and the new image is downlevel from current image

/*

 * Current T side will be committed to P side before being replaced with new

 * image

/*

 * T side will be updated with a downlevel image

/*

 * The candidate image's release date is later than the system's firmware

 * service entitlement date - service warranty period has expired

 Validate buffer size */

 XXX: Assume candidate image size is <= 1GB */

 Image status */

 Candidate image data */

 Candidate image header */

 Return status */

 Candidate image buffer */

 Image size */

 Update results token */

 Return status */

 Return status */

 Initialize update_flash_data status to No Operation */

/*

 * Validate candidate image

/*

 * Validate output format:

 *     validate result token

 *     current image version details

 *     new image version details

 Candidate image is not validated */

 Result token */

 Current and candidate image version details */

 Set status to default */

/*

 * Validate candidate firmware image

 *

 * Note:

 *   We are only interested in first 4K bytes of the

 *   candidate image.

 Copy first 4k bytes of candidate image */

 Validate candidate image */

/*

 * Manage flash routine

/*

 * Show manage flash status

 Set status to default*/

/*

 * Manage operations:

 *   0 - Reject

 *   1 - Commit

 commit/reject temporary image */

/*

 * OPAL update flash

 First entry address */

 This gets called just before system reboots */

 Small delay to help getting the above message out */

/*

 * Show candidate image status

/*

 * Set update image flag

 *  1 - Flash new image

 *  0 - Cancel flash request

 Image is loaded? */

/*

 * Free image buffer

/*

 * Allocate image buffer.

 Pin memory */

/*

 * Copy candidate image

 *

 * Parse candidate image header to get total image size

 * and pre-allocate required memory.

 New image ? */

 Free memory, if already allocated */

 Cancel outstanding image update request */

 Allocate memory */

 Set image status */

/*

 * sysfs interface :

 *  OPAL uses below sysfs files for code update.

 *  We create these files under /sys/firmware/opal.

 *

 *   image		: Interface to load candidate firmware image

 *   validate_flash	: Validate firmware image

 *   manage_flash	: Commit/Reject firmware image

 *   update_flash	: Flash new firmware image

 *

 Limit image size */

 need to NULL terminate the list of attributes */

 Allocate validate image buffer */

 Make sure /sys/firmware/opal directory is created */

 Create the sysfs files */

 Set default status */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV OPAL Power-Shift-Ratio interface

 *

 * Copyright 2017 IBM Corp.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV sensor code

 *

 * Copyright (C) 2013 IBM

/*

 * This will return sensor information to driver based on the requested sensor

 * handle. A handle is an opaque id for the powernv, read by the driver from the

 * device tree..

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SMP support for PowerNV machines.

 *

 * Copyright 2011 IBM Corp.

	/*

	 * P9 workaround for CI vector load (see traps.c),

	 * enable the corresponding HMI interrupt

	/*

	 * If we already started or OPAL is not supported, we just

	 * kick the CPU via the PACA

	/*

	 * At this point, the CPU can either be spinning on the way in

	 * from kexec or be inside OPAL waiting to be started for the

	 * first time. OPAL v3 allows us to query OPAL to know if it

	 * has the CPUs, so we do that

	/*

	 * Already started, just kick it, probably coming from

	 * kexec and spinning

	/*

	 * Available/inactive, let's kick it

		/*

		 * An unavailable CPU (or any other unknown status)

		 * shouldn't be started. It should also

		 * not be in the possible map but currently it can

		 * happen

	/* This is identical to pSeries... might consolidate by

	 * moving migrate_irqs_away to a ppc_md with default to

	 * the generic fixup_irqs. --BenH.

 Standard hot unplug procedure */

	/*

	 * This turns the irq soft-disabled state we're called with, into a

	 * hard-disabled state with pending irq_happened interrupts cleared.

	 *

	 * PACA_IRQ_DEC   - Decrementer should be ignored.

	 * PACA_IRQ_HMI   - Can be ignored, processing is done in real mode.

	 * PACA_IRQ_DBELL, EE, PMI - Unexpected.

	/*

	 * We don't want to take decrementer interrupts while we are

	 * offline, so clear LPCR:PECE1. We keep PECE2 (and

	 * LPCR_PECE_HVEE on P9) enabled so as to let IPIs in.

	 *

	 * If the CPU gets woken up by a special wakeup, ensure that

	 * the SLW engine sets LPCR with decrementer bit cleared, else

	 * the CPU will come back to the kernel due to a spurious

	 * wakeup.

		/*

		 * Clear IPI flag, since we don't handle IPIs while

		 * offline, except for those when changing micro-threading

		 * mode, which are handled explicitly below, and those

		 * for coming online, which are handled via

		 * generic_check_cpu_restart() calls.

		/*

		 * If the SRR1 value indicates that we woke up due to

		 * an external interrupt, then clear the interrupt.

		 * We clear the interrupt before checking for the

		 * reason, so as to avoid a race where we wake up for

		 * some other reason, find nothing and clear the interrupt

		 * just as some other cpu is sending us an interrupt.

		 * If we returned from power7_nap as a result of

		 * having finished executing in a KVM guest, then srr1

		 * contains 0.

 Does not return */

		/*

		 * For kdump kernels, we process the ipi and jump to

		 * crash_ipi_callback

			/*

			 * If we got to this point, we've not used

			 * NMI's, otherwise we would have gone

			 * via the SRR1_WAKERESET path. We are

			 * using regular IPI's for waking up offline

			 * threads.

 Does not return */

	/*

	 * Re-enable decrementer interrupts in LPCR.

	 *

	 * Further, we want stop states to be woken up by decrementer

	 * for non-hotplug cases. So program the LPCR via stop api as

	 * well.

 CONFIG_HOTPLUG_CPU */

	/*

	 * Starting with POWER8, the subcore logic relies on all threads of a

	 * core being booted so that they can participate in split mode

	 * switches. So on those machines we ignore the smt_enabled_at_boot

	 * setting (smt-enabled on the kernel command line).

 Cause IPI as setup by the interrupt controller (xics or xive) */

		/*

		 * We do not use broadcasts (yet), because it's not clear

		 * exactly what semantics Linux wants or the firmware should

		 * provide.

		/*

		 * Caller will fall back to doorbells, which may pick

		 * up the remainders.

 Use smp_muxed_ipi_message_pass */

 Filled at runtime by pnv_smp_probe() */

 CONFIG_HOTPLUG_CPU */

 This is called very early during platform setup_arch */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Firmware-Assisted Dump support on POWER platform (OPAL).

 *

 * Copyright 2019, Hari Bathini, IBM Corporation.

/*

 * When dump is active but PRESERVE_FA_DUMP is enabled on the kernel,

 * ensure crash data is preserved in hope that the subsequent memory

 * preserving kernel boot is going to process this crash data.

	/*

	 * Check if dump has been initiated on last reboot.

	/*

	 * Preserve memory only if kernel memory regions are registered

	 * with f/w for MPIPL.

	/*

	 * Memory below this address can be used for booting a

	 * capture kernel or petitboot kernel. Preserve everything

	 * above this address for processing crashdump.

 CONFIG_PRESERVE_FA_DUMP */

	/*

	 * The destination address of the first boot memory region is the

	 * destination address of boot memory regions.

/*

 * This function is called in the capture kernel to get configuration details

 * from metadata setup by the first kernel.

	/*

	 * Start address of reserve dump area (permanent reservation) for

	 * re-registering FADump after dump capture.

	/*

	 * Rarely, but it can so happen that system crashes before all

	 * boot memory regions are registered for MPIPL. In such

	 * cases, warn that the vmcore may not be accurate and proceed

	 * anyway as that is the best bet considering free pages, cache

	 * pages, user pages, etc are usually filtered out.

	 *

	 * Hope the memory that could not be preserved only has pages

	 * that are usually filtered out while saving the vmcore.

 Initialize kernel metadata */

 Boot memory regions */

	/*

	 * Kernel metadata is passed to f/w and retrieved in capture kerenl.

	 * So, use it to save fadump header address instead of calculating it.

	/*

	 * Use the last page(s) in FADump memory reservation for

	 * kernel metadata.

 Initialize kernel metadata before registering the address with f/w */

	/*

	 * Register metadata address with f/w. Can be retrieved in

	 * the capture kernel.

	/*

	 * Register boot memory top address with f/w. Should be retrieved

	 * by a kernel that intends to preserve crash'ed kernel's memory.

 If MAX regions limit in f/w is hit, warn and proceed. */

	/*

	 * If some regions were registered before OPAL_MPIPL_ADD_RANGE

	 * OPAL call failed, unregister all regions.

/*

 * Verify if CPU state data is available. If available, do a bit of sanity

 * checking before processing this data.

/*

 * Convert CPU state data saved at the time of crash into ELF notes.

 *

 * While the crashing CPU's register data is saved by the kernel, CPU state

 * data for all CPUs is saved by f/w. In CPU state data provided by f/w,

 * each register entry is of 16 bytes, a numerical identifier along with

 * a GPR/SPR flag in the first 8 bytes and the register value in the next

 * 8 bytes. For more details refer to F/W documentation. If this data is

 * missing or in unsupported format, append crashing CPU's register data

 * saved by the kernel in the PT_NOTE, to have something to work with in

 * the vmcore file.

	/*

	 * Offset for register entries, entry size and registers count is

	 * duplicated in every thread header in keeping with HDAT format.

	 * Use these values from the first thread header.

		/*

		 * If this is kernel initiated crash, crashing_cpu would be set

		 * appropriately and register data of the crashing CPU saved by

		 * crashing kernel. Add this saved register data of crashing CPU

		 * to elf notes and populate the pt_regs for the remaining CPUs

		 * from register state data provided by firmware.

		/*

		 * Register state data of MAX cores is provided by firmware,

		 * but some of this cores may not be active. So, while

		 * processing register state data, check core state and

		 * skip threads that belong to inactive cores.

	/*

	 * CPU state data is invalid/unsupported. Try appending crashing CPU's

	 * register data, if it is saved by the kernel.

 Validate the fadump crash info header */

	/*

	 * If this is a kernel initiated crash, crashing_cpu would be set

	 * appropriately and register data of the crashing CPU saved by

	 * crashing kernel. Add this saved register data of crashing CPU

	 * to elf notes and populate the pt_regs for the remaining CPUs

	 * from register state data provided by firmware.

	/*

	 * We are done validating dump info and elfcore header is now ready

	 * to be exported. set elfcorehdr_addr so that vmcore module will

	 * export the elfcore header through '/proc/vmcore'.

		/*

		 * Only regions that are registered for MPIPL

		 * would have dump data.

 Dump is active. Show reserved area start address. */

	/*

	 * Unlike on pSeries platform, logical CPU number is not provided

	 * with architected register state data. So, store the crashing

	 * CPU's PIR instead to plug the appropriate register data for

	 * crashing CPU in the vmcore file.

	/*

	 * Check if Firmware-Assisted Dump is supported. if yes, check

	 * if dump has been initiated on last reboot.

		/*

		 * Each f/w load area is an (address,size) pair,

		 * 2 cells each, totalling 4 cells per range.

	/*

	 * Firmware supports 32-bit field for size. Align it to PAGE_SIZE

	 * and request firmware to copy multiple kernel boot memory regions.

	/*

	 * Check if dump has been initiated on last reboot.

 Kernel regions not registered with f/w for MPIPL */

 !CONFIG_PRESERVE_FA_DUMP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV OPAL high level interfaces

 *

 * Copyright 2011 IBM Corp.

 /sys/firmware/opal */

	/* Do the actual re-init, This will clobber all FPRs, VRs, etc...

	 *

	 * It will preserve non volatile GPRs and HSPRG0/1. It will

	 * also restore HIDs and other SPRs to their original value

	 * but it might clobber a bunch.

	/*

	 * POWER9 always support running hash:

	 *  ie. Host hash  supports  hash guests

	 *      Host radix supports  hash/radix guests

 Restore some bits */

	/*

	 * Calculate number of available entries.

	 *

	 * Each recoverable address range entry is (start address, len,

	 * recovery address), 2 cells each for start and recovery address,

	 * 1 cell for len, totalling 5 cells per entry.

 Sanity check */

 Size required to hold all the entries. */

	/*

	 * Allocate a buffer to hold the MC recoverable ranges.

	/* Hookup some exception handlers except machine check. We use the

	 * fwnmi area at 0x7000 to provide the glue space to OPAL

	/*

	 * Only ancient OPAL firmware requires this.

	 * Specifically, firmware from FW810.00 (released June 2014)

	 * through FW810.20 (Released October 2014).

	 *

	 * Check if we are running on newer (post Oct 2014) firmware that

	 * exports the OPAL_HANDLE_HMI token. If yes, then don't ask OPAL to

	 * patch the HMI interrupt and we catch it directly in Linux.

	 *

	 * For older firmware (i.e < FW810.20), we fallback to old behavior and

	 * let OPAL patch the HMI vector and handle it inside OPAL firmware.

	 *

	 * For newer firmware we catch/handle the HMI directly in Linux.

	/*

	 * Only applicable to ancient firmware, all modern

	 * (post March 2015/skiboot 5.0) firmware will just return

	 * OPAL_UNSUPPORTED.

/*

 * Opal message notifier based on message type. Allow subscribers to get

 * notified for specific messgae type.

	/*

	 * If the registration succeeded, replay any queued messages that came

	 * in prior to the notifier chain registration. msg_list_lock held here

	 * to ensure they're delivered prior to any subsequent messages.

		/*

		 * Queue up the msg since no notifiers have registered

		 * yet for this msg_type.

 notify subscribers */

 No opal message pending. */

 check for errors. */

 Sanity check */

 Try to allocate fixed message size */

 shut up gcc */;

 Closed -> drop characters */

 Should not get a partial write here because space is available. */

 Closed or other error drop */

 Should not happen */

/*

 * opal_put_chars_atomic will not perform partial-writes. Data will be

 * atomically written to the terminal or not at all. This is not strictly

 * true at the moment because console space can race with OPAL's console

 * writes.

		/*

		 * If OPAL_CONSOLE_FLUSH is not implemented in the firmware,

		 * the console can still be flushed by calling the polling

		 * function while it has OPAL_EVENT_CONSOLE_OUTPUT events.

/*

 * opal_flush_console spins until the console is flushed

/*

 * opal_flush_chars is an hvc interface that sleeps until the console is

 * flushed if wait, otherwise it will return -EBUSY if the console has data,

 * -EAGAIN if it has data and some of it was flushed.

 If MSR_RI isn't set, we cannot recover */

 Platform corrected itself */

 Fatal machine check */

		/*

		 * Try to kill processes if we get a synchronous machine check

		 * (e.g., one caused by execution of this instruction). This

		 * will devolve into a panic if we try to kill init or are in

		 * an interrupt etc.

		 *

		 * TODO: Queue up this address for hwpoisioning later.

		 * TODO: This is not quite right for d-side machine

		 *       checks ->nip is not necessarily the important

		 *       address.

			/*

			 * die() would kill the kernel, so better to go via

			 * the platform reboot code that will log the

			 * machine check.

	/*

	 * Don't bother to shut things down because this will

	 * xstop the system.

	/*

	 * We reached here. There can be three possibilities:

	 * 1. We are running on a firmware level that do not support

	 *    opal_cec_reboot2()

	 * 2. We are running on a firmware level that do not support

	 *    OPAL_REBOOT_PLATFORM_ERROR reboot type.

	 * 3. We are running on FSP based system that does not need

	 *    opal to trigger checkstop explicitly for error analysis.

	 *    The FSP PRD component would have already got notified

	 *    about this error through other channels.

	 * 4. We are running on a newer skiboot that by default does

	 *    not cause a checkstop, drops us back to the kernel to

	 *    extract context and state at the time of the error.

 Print things out */

 Early hmi handler called in real mode. */

	/*

	 * call opal hmi handler. Pass paca address as token.

	 * The return value OPAL_SUCCESS is an indication that there is

	 * an HMI event generated waiting to pull by Linux.

	/*

	 * call opal hmi handler.

	 * Check 64-bit flag mask to find out if an event was generated,

	 * and whether TB is still valid or not etc.

 HMI exception handler called in virtual mode when irqs are next enabled. */

	/*

	 * Check if HMI event is available.

	 * if Yes, then wake kopald to process them.

	/*

	 * Setup regs->nip to rfi into fixup address.

/*

 * opal_export_attrs: creates a sysfs node for each property listed in

 * the device-tree under /ibm,opal/firmware/exports/

 * All new sysfs nodes are created under /opal/exports/.

 * This allows for reserved memory regions (e.g. HDAT) to be read.

 * The new sysfs nodes are only readable by root.

 Create new 'exports' directory - /sys/firmware/opal/exports */

	/*

	 * NB: symbol_map existed before the generic export interface so it

	 * lives under the top level opal_kobj.

 Register kernel log buffer */

	/* Don't warn if this is just an older OPAL that doesn't

	 * know about that call

 Old firwmware, we assume the HVC heartbeat is sufficient */

 Register OPAL consoles if any ports */

 Initialise OPAL messaging system */

 Initialise OPAL asynchronous completion interface */

 Initialise OPAL sensor interface */

 Initialise OPAL hypervisor maintainence interrupt handling */

 Create i2c platform devices */

 Handle non-volatile memory devices */

 Setup a heatbeat thread if requested by OPAL */

 Detect In-Memory Collection counters and create devices*/

 Create leds platform devices */

 Initialise OPAL message log interface */

 Create "opal" kobject under /sys/firmware */

 Setup dump region interface */

 Setup error log interface */

 Setup code update interface */

 Setup platform dump extract interface */

 Setup system parameters interface */

 Setup message log sysfs interface. */

 Add all export properties*/

 Initialize platform devices: IPMI backend, PRD & flash interface */

 Initialise platform device: oppanel interface */

 Initialise OPAL kmsg dumper for flushing console on panic */

 Initialise OPAL powercap interface */

 Initialise OPAL Power-Shifting-Ratio interface */

 Initialise OPAL sensor groups */

 Initialise OPAL Power control interface */

 Initialize OPAL secure variables */

	/*

	 * Then sync with OPAL which ensure anything that can

	 * potentially write to our memory has completed such

	 * as an ongoing dump retrieval

 Unregister memory dump region */

 Export this so that test modules can use it */

 Convert a region of vmalloc memory to an opal sg list */

 Export these symbols for PowerNV LED class driver */

 Export this symbol for PowerNV Operator Panel class driver */

 Export this for KVM */

 Export the below symbol for NX compression */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV OPAL asynchronous completion interfaces

 *

 * Copyright 2013-2017 IBM Corp.

/*

 * Note: If the returned token is used in an opal call and opal returns

 * OPAL_ASYNC_COMPLETION you MUST call one of opal_async_wait_response() or

 * opal_async_wait_response_interruptible() at least once before calling another

 * opal_async_* function

 Wait until a token is available */

	/*

	 * DISPATCHED and ABANDONED tokens must wait for OPAL to respond.

	 * Mark a DISPATCHED token as ABANDONED so that the response handling

	 * code knows no one cares and that it can free it then.

	/*

	 * There is no need to mark the token as dispatched, wait_event()

	 * will block until the token completes.

	 *

	 * Wakeup the poller before we wait for events to speed things

	 * up on platforms or simulators where the interrupts aren't

	 * functional.

	/*

	 * The first time this gets called we mark the token as DISPATCHED

	 * so that if wait_event_interruptible() returns not zero and the

	 * caller frees the token, we know not to actually free the token

	 * until the response comes.

	 *

	 * Only change if the token is ALLOCATED - it may have been

	 * completed even before the caller gets around to calling this

	 * the first time.

	 *

	 * There is also a dirty great comment at the token allocation

	 * function that if the opal call returns OPAL_ASYNC_COMPLETION to

	 * the caller then the caller *must* call this or the not

	 * interruptible version before doing anything else with the

	 * token.

	/*

	 * Wakeup the poller before we wait for events to speed things

	 * up on platforms or simulators where the interrupts aren't

	 * functional.

 Called from interrupt context */

 Free the token, no one else will */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV nvram code.

 *

 * Copyright 2011 IBM Corp.

/*

 * This can be called in the panic path with interrupts off, so use

 * mdelay in that case.

 Scan nvram for partitions */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV OPAL Powercap interface

 *

 * Copyright 2017 IBM Corp.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Support PCI/PCIe on PowerNV platforms

 *

 * Copyright 2011 Benjamin Herrenschmidt, IBM Corp.

 Number of M64 BARs	*/

 Segments per M64 BAR	*/

 CONFIG_PCI_IOV*/

	/*

	 * Clear the PE frozen state as it might be put into frozen state

	 * in the last PCI remove path. It's not harmful to do so when the

	 * PE is already in unfrozen state.

 scan backwards for a run of @count cleared bits */

 The default M64 BAR is shared by all PEs */

 Configure the default M64 BAR */

 unused */

 Enable the default M64 BAR */

	/*

	 * Exclude the segments for reserved and root bus PE, which

	 * are first or last two PEs.

	/*

	 * There are 16 M64 BARs, each of which has 8 segments. So

	 * there are as many M64 segments as the maximum number of

	 * PEs, which is 128.

		/*

		 * P7IOC supports M64DT, which helps mapping M64 segment

		 * to one particular PE#. However, PHB3 has fixed mapping

		 * between M64 segment and PE#. In order to have same logic

		 * for P7IOC and PHB3, we enforce fixed mapping between M64

		 * segment and PE# on P7IOC.

	/*

	 * Exclude the segments for reserved and root bus PE, which

	 * are first or last two PEs.

 Root bus shouldn't use M64 */

 Allocate bitmap */

 Figure out reserved PE numbers by the PE */

	/*

	 * the current bus might not own M64 window and that's all

	 * contributed by its child buses. For the case, we needn't

	 * pick M64 dependent PE#.

	/*

	 * Figure out the master PE and put all slave PEs to master

	 * PE's list to form compound PE.

	/*

	 * Find the available M64 BAR range and pickup the last one for

	 * covering the whole 64-bits space. We support only one range.

 In absence of the property, assume 0..15 */

 We only support 64 bits in our allocator */

 Empty range, no m64 */

 Configure M64 informations */

 This lines up nicely with the display from processing OF ranges */

 Mark all M64 used up by default */

 Use last M64 BAR to cover M64 window */

 Mark remaining ones free */

	/*

	 * Setup init functions for M64 based on IODA version, IODA3 uses

	 * the IODA2 code.

 Fetch master PE */

 Freeze master PE */

 Freeze slave PEs */

 Find master PE */

 Clear frozen state for master PE */

 Clear frozen state for slave PEs */

 Sanity check on PE number */

	/*

	 * Fetch the master PE and the PE instance might be

	 * not initialized yet.

 Check the master PE */

 Check the slave PE */

		/*

		 * Override the result based on the ascending

		 * priority.

 Parent PE affects child PE */

 Compound case: parent PE affects slave PEs */

	/*

	 * Clear PE frozen state. If it's master PE, we need

	 * clear slave PE frozen state as well.

	/*

	 * Associate PE in PELT. We need add the PE into the

	 * corresponding PELT-V as well. Otherwise, the error

	 * originated from the PE might contribute to other

	 * PEs.

 For compound PEs, any one affects all of them */

 CONFIG_PCI_IOV */

 XXX What to do in case of error ? */

 Disassociate PE in PELT */

 Currently, we just deconfigure VF PE. Bus PE will always there.*/

 Do an exact match only */

 Clear the reverse map */

	/*

	 * Release from all parents PELT-V. NPUs don't have a PELTV

	 * table

 Bus validation ? */

 Do an exact match only */

	/*

	 * Associate PE in PELT. We need add the PE into the

	 * corresponding PELT-V as well. Otherwise, the error

	 * originated from the PE might contribute to other

	 * PEs.

	/*

	 * Configure PELTV. NPUs don't have a PELTV table so skip

	 * configuration on them.

 Setup reverse map */

 Setup one MVTs on IODA1 */

	/* NOTE: We don't get a reference for the pointer in the PE

	 * data structure, both the device and PE structures should be

	 * destroyed at the same time.

	 *

	 * At some point we want to remove the PDN completely anyways

 XXX What do we do here ? */

 Put PE to the list */

/*

 * There're 2 types of PCI bus sensitive PEs: One that is compromised of

 * single PCI bus. Another one that contains the primary PCI bus and its

 * subordinate PCI devices and buses. The second type of PE is normally

 * orgiriated by PCIe-to-PCI bridge or PLX switch downstream ports.

	/*

	 * In partial hotplug case, the PE instance might be still alive.

	 * We should reuse it instead of allocating a new one.

 PE number for root bus should have been reserved */

 Check if PE is determined by M64 */

 The PE number isn't pinned by M64 */

 XXX What do we do here ? */

 Put PE to the list */

 Check if the BDFN for this device is associated with a PE yet */

 VF PEs should be pre-configured in pnv_pci_sriov_enable() */

		/*

		 * If we can't setup the IODA PE something has gone horribly

		 * wrong and we can't enable DMA for the device.

	/*

	 * We assume that bridges *probably* don't need to do any DMA so we can

	 * skip allocating a TCE table, etc unless we get a non-bridge device.

 PEs with a DMA weight of zero won't have a group */

/*

 * Reconfigure TVE#0 to be usable as 64-bit DMA space.

 *

 * The first 4GB of virtual memory for a PE is reserved for 32-bit accesses.

 * Devices can only access more than that if bit 59 of the PCI address is set

 * by hardware, which indicates TVE#1 should be used instead of TVE#0.

 * Many PCI devices are not capable of addressing that many bits, and as a

 * result are limited to the 4GB of virtual memory made available to 32-bit

 * devices in TVE#0.

 *

 * In order to work around this, reconfigure TVE#0 to be suitable for 64-bit

 * devices by configuring the virtual memory past the first 4GB inaccessible

 * by 64-bit DMAs.  This should only be used by devices that want more than

 * 4GB, and only on PEs that have no 32-bit devices.

 *

 * Currently this will only work on PHB3 (POWER8).

 256MB TCEs */

	/*

	 * Window size needs to be a power of two, but needs to account for

	 * shifting memory by the 4GB offset required to skip 32bit space.

 reconfigure window 0 */

	/*

	 * If the device can't set the TCE bypass bit but still wants

	 * to access 4GB or more, on PHB3 we can reconfigure TVE#0 to

	 * bypass the 32-bit region and be usable for 64-bit DMAs.

	 * The device needs to be able to address all of this space.

 pe->pdev should be set if it's a single device, pe->pbus if not */

 Configure the bypass mode */

 4GB offset bypasses 32-bit space */

 p7ioc-style invalidation, 2 TCEs per write */

 round up end to be different than start */

 Ensure above stores are visible */

	/*

	 * The iommu layer will do another mb() for us on build()

	 * and we don't care on free()

 Common for IODA1 and IODA2 */

 01xb - invalidate TCEs that match the specified PE# */

 Ensure above stores are visible */

 We'll invalidate DMA address in PE scope */

 Figure out the start, end and step */

	/* This is quite simplistic. The "base" weight of a device

	 * is 10. 0 means no DMA is to be accounted for it.

 SRIOV VF has same DMA32 weight as its PF */

 XXX FIXME: Handle 64-bit only DMA devices */

 XXX FIXME: Provide 64-bit DMA facilities & non-4K TCE tables etc.. */

 XXX FIXME: Allocate multi-level tables on PHB3 */

	/*

	 * Allocate contiguous DMA32 segments. We begin with the expected

	 * number of segments. With one more attempt, the number of DMA32

	 * segments to be allocated is decreased by one until one segment

	 * is allocated successfully.

 Grab a 32-bit TCE table */

	/* XXX Currently, we allocate one big contiguous table for the

	 * TCEs. We only really need one chunk per 256M of TCE space

	 * (ie per segment) but that's an optimization for later, it

	 * requires some added smarts with our get/put_tce implementation

	 *

	 * Each TCE page is 4KB in size and each TCE entry occupies 8

	 * bytes

 Configure HW */

 Setup DMA32 segment mapping */

 Setup linux iommu table */

 XXX Failure: Try to fallback to 64-bit only ? */

	/*

	 * Map TCE table through TVT. The TVE index is the PE number

	 * shifted by 1 bit for 32-bits DMA space.

	/*

	 * crashkernel= specifies the kdump kernel's maximum memory at

	 * some offset and there is no guaranteed the result is a power

	 * of 2, which will cause errors later.

	/*

	 * In memory constrained environments, e.g. kdump kernel, the

	 * DMA window can be larger than available memory, which will

	 * cause errors later.

	/*

	 * We create the default window as big as we can. The constraint is

	 * the max order of allocation possible. The TCE table is likely to

	 * end up being multilevel and with on-demand allocation in place,

	 * the initial use is not going to be huge as the default window aims

	 * to support crippled devices (i.e. not fully 64bit DMAble) only.

 iommu_table::it_map uses 1 bit per IOMMU page, hence 8 */

 Each TCE level cannot exceed maxblock so go multilevel if needed */

	/*

	 * We try to stick to default levels (which is >1 at the moment) in

	 * order to save memory by relying on on-demain TCE level allocation.

 We use top part of 32bit space for MMIO so exclude it from DMA */

 This clears iommu_table_base below */

	/*

	 * Set table base for the case of IOMMU DMA use. Usually this is done

	 * from dma_dev_setup() which is not called when a device is returned

	 * from VFIO so do it here.

 levels */, 0
 table size */, 0
 Calculate a direct table size from window_size and levels */

 one for HW table, one for userspace copy */

 Store @tbl as pnv_pci_ioda2_unset_window() resets it */

 TVE #1 is selected by PCI address bit 59 */

 The PE will reserve all possible 32-bits space */

 Setup linux iommu table */

/*

 * Called from KVM in real mode to EOI passthru interrupts. The ICP

 * EOI is handled directly in KVM in kvmppc_deliver_irq_passthru().

 *

 * The IRQ data is mapped in the PCI-MSI domain and the EOI OPAL call

 * needs an HW IRQ number mapped in the XICS IRQ domain. The HW IRQ

 * numbers of the in-the-middle MSI domain are vector numbers and it's

 * good enough for OPAL. Use that.

/*

 * The IRQ data is mapped in the XICS domain, with OPAL HW IRQ numbers

 P8/CXL only */

 The MSI EOI OPAL call is only needed on PHB3 */

		/*

		 * First time we setup an MSI IRQ, we need to setup the

		 * corresponding IRQ chip to route correctly.

/*

 * Returns true iff chip is something that we could call

 * pnv_opal_pci_msi_eoi for.

 No PE assigned ? bail out ... no MSI for you ! */

 Check if we have an MVE */

 Force 32-bit MSI on some broken devices */

 Assign XIVE to PE */

/*

 * The msi_free() op is called before irq_domain_free_irqs_top() when

 * the handler data is still available. Use that to clear the XIVE

 * controller.

/*

 * The IRQ data is mapped in the MSI domain in which HW IRQ numbers

 * correspond to vector numbers.

		/*

		 * The EOI OPAL call takes an OPAL HW IRQ number but

		 * since it is translated into a vector number in

		 * OPAL, use that directly.

 XIVE domain is cleared through ->msi_free() */

 BML Fallback */

/*

 * This function is supposed to be called on basis of PE from top

 * to bottom style. So the the I/O or MMIO segment assigned to

 * parent PE could be overridden by its child PEs if necessary.

	/*

	 * NOTE: We only care PCI bus based PE for now. For PCI

	 * device based PE, for example SRIOV sensitive VF should

	 * be figured out later.

		/*

		 * If the PE contains all subordinate PCI buses, the

		 * windows of the child bridges should be mapped to

		 * the PE as well.

 Retrieve the diag data from firmware */

 Print the diag data to the kernel log */

 CONFIG_DEBUG_FS */

 CONFIG_DEBUG_FS */

 Empty bus ? bail */

	/*

	 * If there's a bridge associated with that bus enable it. This works

	 * around races in the generic code if the enabling is done during

	 * parallel probing. This can be removed once those races have been

	 * fixed.

 Perform the same to child busses */

/*

 * Returns the alignment for I/O or memory windows for P2P

 * bridges. That actually depends on how PEs are segmented.

 * For now, we return I/O or M32 segment size for PE sensitive

 * P2P bridges. Otherwise, the default values (4KiB for I/O,

 * 1MiB for memory) will be returned.

 *

 * The current PCI bus might be put into one PE, which was

 * create against the parent PCI bridge. For that case, we

 * needn't enlarge the alignment so that we can save some

 * resources.

	/*

	 * We fall back to M32 if M64 isn't supported. We enforce the M64

	 * alignment for any 64-bit resource, PCIe doesn't care and

	 * bridges only do 64-bit prefetchable anyway.

/*

 * We are updating root port or the upstream port of the

 * bridge behind the root port with PHB's windows in order

 * to accommodate the changes on required resources during

 * PCI (slot) hotplug, which is connected to either root

 * port or the downstream ports of PCIe switch behind the

 * root port.

 Check if we need apply fixup to the bridge's windows */

 Fixup the resources */

		/* The 64KB 32-bits MSI region shouldn't be included in

		 * the 32-bits bridge window. Otherwise, we can see strange

		 * issues. One of them is EEH error observed on Garrison.

		 *

		 * Exclude top 1MB region which is the minimal alignment of

		 * 32-bits bridge window.

 Don't assign PE to PCI bus, which doesn't have subordinate devices */

 Reserve PEs according to used M64 resources */

	/*

	 * Assign PE. We might run here because of partial hotplug.

	 * For the case, we just pick up the existing PE and should

	 * not allocate resources again.

/* Prevent enabling devices for which we couldn't properly

 * assign a PE

 M64 is pre-configured by pnv_ioda1_init_m64() */

 Release slave PEs in the compound PE */

	/*

	 * The PE for root bus can be removed because of hotplug in EEH

	 * recovery for fenced PHB error. We need to mark the PE dead so

	 * that it can be populated again in PCI hot add path. The PE

	 * shouldn't be destroyed as it's the global reserved resource.

 The VF PE state is torn down when sriov_disable() is called */

	/*

	 * FIXME: Try move this to sriov_disable(). It's here since we allocate

	 * the iov state at probe time since we need to fiddle with the IOV

	 * resources.

	/*

	 * PCI hotplug can happen as part of EEH error recovery. The @pdn

	 * isn't removed and added afterwards in this scenario. We should

	 * set the PE number in @pdn to an invalid one. Otherwise, the PE's

	 * device count is decreased on removing devices while failing to

	 * be increased on adding devices. It leads to unbalanced PE's device

	 * count and eventually make normal PCI hotplug path broken.

 Allocate PCI controller */

 Detect specific models for error handling */

 Initialize diagnostic data buffer */

 Parse 32-bit and IO ranges (if any) */

 Get registers */

 Initialize more IODA stuff */

 Invalidate RID to PE# mapping */

 Parse 64-bit MMIO range */

 FW Has already off top 64k of M32 space (MSI space) */

 XXX calculate this ? */

 Calculate how many 32-bit TCE segments we have */

 Allocate aux data & arrays. We don't have IO ports on PHB3 */

	/*

	 * Choose PE number for root bus, which shouldn't have

	 * M64 resources consumed by its child devices. To pick

	 * the PE number adjacent to the reserved one if possible.

 otherwise just allocate one */

 Calculate how many 32-bit TCE segments we have */

 We should really do that ... */

 Setup MSI support */

	/*

	 * We pass the PCI probe flag PCI_REASSIGN_ALL_RSRC here

	 * to let the PCI core do resource assignment. It's supposed

	 * that the PCI core will do correct I/O and MMIO alignment

	 * for the P2P bridge bars so that each PCI bus (excluding

	 * the child P2P bridges) can form individual PE.

 Reset IODA tables to a clean state */

	/*

	 * If we're running in kdump kernel, the previous kernel never

	 * shutdown PCI devices correctly. We already got IODA table

	 * cleaned out. So we have to issue PHB reset to stop all PCI

	 * transactions from previous kernel. The ppc_pci_reset_phbs

	 * kernel parameter will force this reset too. Additionally,

	 * if the IODA reset above failed then use a bigger hammer.

	 * This can happen if we get a PHB fatal error in very early

	 * boot.

 Remove M64 resource if we can't configure it successfully */

 create pci_dn's for DT nodes under this PHB */

 Count child PHBs */

 Look for IODA1 PHBs */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2016-17 IBM Corp.

 ensure window is not unmapped */

 ensure window is not unmapped */

/*

 * Set up the "root" VAS debugfs dir. Return if we already set it up

 * (or failed to) in an earlier instance of VAS.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * This file implements an irqchip for OPAL events. Whenever there is

 * an interrupt that is handled by OPAL we get passed a list of events

 * that Linux needs to do something about. These basically look like

 * interrupts to Linux so we implement an irqchip to handle them.

 *

 * Copyright Alistair Popple, IBM Corporation 2014.

 Maximum number of events supported by OPAL firmware */

	/*

	 * For now we only support level triggered events. The irq

	 * handler will be called continuously until the event has

	 * been cleared in OPAL.

 First free interrupts, which will also mask them */

	/* If dn is NULL it means the domain won't be linked to a DT

	 * node so therefore irq_of_parse_and_map(...) wont work. But

	 * that shouldn't be problem because if we're running a

	 * version of skiboot that doesn't have the dn then the

	 * devices won't have the correct properties and will have to

	 * fall back to the legacy method (opal_event_request(...))

 Look for new-style (standard) "interrupts" property */

 Absent ? Look for the old one */

 Get opal-interrupts property and names if present */

 No interrupts ? Bail out */

 Allocate an IRQ resources array */

 Build the resources array */

 Old style "opal-interrupts" property */

 new style standard "interrupts" property */

 Install interrupt handlers */

 Prefix name */

 Install interrupt handler */

/**

 * opal_event_request(unsigned int opal_event_nr) - Request an event

 * @opal_event_nr: the opal event number to request

 *

 * This routine can be used to find the linux virq number which can

 * then be passed to request_irq to assign a handler for a particular

 * opal event. This should only be used by legacy devices which don't

 * have proper device tree bindings. Most devices should use

 * irq_of_parse_and_map() instead.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV Real Time Clock.

 *

 * Copyright 2011 IBM Corp.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) IBM Corporation, 2014, 2017

 * Anton Blanchard, Rashmica Gupta.

 This enables us to keep track of the memory removed from each node. */

/**

 * flush_dcache_range_chunked(): Write any modified data cache blocks out to

 * memory and invalidate them, in chunks of up to FLUSH_CHUNK_SIZE

 * Does not invalidate the corresponding instruction cache blocks.

 *

 * @start: the start address

 * @stop: the stop address (exclusive)

 * @chunk: the max size of the chunks

 As HIGHMEM does not apply, use clear_page() directly. */

	/*

	 * Before we go ahead and use this range as cache inhibited range

	 * flush the cache.

	/*

	 * Trace memory needs to be aligned to the size, which is guaranteed

	 * by alloc_contig_pages().

	/*

	 * Clear the range while we still have a linear mapping.

	 *

	 * TODO: use __GFP_ZERO with alloc_contig_pages() once supported.

	/*

	 * Set pages PageOffline(), to indicate that nobody (e.g., hibernation,

	 * dumping, ...) should be touching these pages.

		/*

		 * A node might not have any local memory, so warn but

		 * continue on.

 Warn but continue on */

/*

 * Iterate through the chunks of memory we allocated and attempt to expose

 * them back to the kernel.

 We have freed this chunk previously */

 Remove from io mappings */

		/*

		 * Memory was freed successfully so clean up references to it

		 * so on reentry we can tell that this chunk was freed.

 If all chunks of memory were freed successfully, reset globals */

	/*

	 * Don't attempt to do anything if size isn't aligned to a memory

	 * block or equal to zero.

 Free all previously allocated memory. */

 Allocate memory. */

 SPDX-License-Identifier: GPL-2.0+

/*

 * VAS Fault handling.

 * Copyright 2019, IBM Corporation

/*

 * The maximum FIFO size for fault window can be 8MB

 * (VAS_RX_FIFO_SIZE_MAX). Using 4MB FIFO since each VAS

 * instance will be having fault window.

 * 8MB FIFO can be used if expects more faults for each VAS

 * instance.

 Dump 10 CRB entries or until end of FIFO */

/*

 * Process valid CRBs in fault FIFO.

 * NX process user space requests, return credit and update the status

 * in CRB. If it encounters transalation error when accessing CRB or

 * request buffers, raises interrupt on the CPU to handle the fault.

 * It takes credit on fault window, updates nx_fault_stamp in CRB with

 * the following information and pastes CRB in fault FIFO.

 *

 * pswid - window ID of the window on which the request is sent.

 * fault_storage_addr - fault address

 *

 * It can raise a single interrupt for multiple faults. Expects OS to

 * process all valid faults and return credit for each fault on user

 * space and fault windows. This fault FIFO control will be done with

 * credit mechanism. NX can continuously paste CRBs until credits are not

 * available on fault window. Otherwise, returns with RMA_reject.

 *

 * Total credits available on fault window: FIFO_SIZE(4MB)/CRBS_SIZE(128)

 *

	/*

	 * VAS can interrupt with multiple page faults. So process all

	 * valid CRBs within fault FIFO until reaches invalid CRB.

	 * We use CCW[0] and pswid to validate validate CRBs:

	 *

	 * CCW[0]	Reserved bit. When NX pastes CRB, CCW[0]=0

	 *		OS sets this bit to 1 after reading CRB.

	 * pswid	NX assigns window ID. Set pswid to -1 after

	 *		reading CRB from fault FIFO.

	 *

	 * We exit this function if no valid CRBs are available to process.

	 * So acquire fault_lock and reset fifo_in_progress to 0 before

	 * exit.

	 * In case kernel receives another interrupt with different page

	 * fault, interrupt handler returns with IRQ_HANDLED if

	 * fifo_in_progress is set. Means these new faults will be

	 * handled by the current thread. Otherwise set fifo_in_progress

	 * and return IRQ_WAKE_THREAD to wake up thread.

		/*

		 * Advance the fault fifo pointer to next CRB.

		 * Use CRB_SIZE rather than sizeof(*crb) since the latter is

		 * aligned to CRB_ALIGN (256) but the CRB written to by VAS is

		 * only CRB_SIZE in len.

		/*

		 * Return credit for the fault window.

			/*

			 * We got an interrupt about a specific send

			 * window but we can't find that window and we can't

			 * even clean it up (return credit on user space

			 * window).

			 * But we should not get here.

			 * TODO: Disable IRQ.

			/*

			 * NX sees faults only with user space windows.

			/*

			 * Return credit for send window after processing

			 * fault CRB.

	/*

	 * NX can generate an interrupt for multiple faults. So the

	 * fault handler thread process all CRBs until finds invalid

	 * entry. In case if NX sees continuous faults, it is possible

	 * that the thread function entered with the first interrupt

	 * can execute and process all valid CRBs.

	 * So wake up thread only if the fault thread is not in progress.

/*

 * Fault window is opened per VAS instance. NX pastes fault CRB in fault

 * FIFO upon page faults.

	/*

	 * Invalidate all CRB entries. NX pastes valid entry for each fault.

	/*

	 * Max creds is based on number of CRBs can fit in the FIFO.

	 * (fault_fifo_size/CRB_SIZE). If 8MB FIFO is used, max creds

	 * will be 0xffff since the receive creds field is 16bits wide.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV Platform dependent EEH operations

 *

 * Copyright Benjamin Herrenschmidt & Gavin Shan, IBM Corporation 2013.

	/*

	 * We simply send a special EEH event if EEH has been

	 * enabled. We don't care about EEH events until we've

	 * finished processing the outstanding ones. Event processing

	 * gets unmasked in next_error() if EEH is enabled.

 Copy over argument buffer */

 Retrieve parameters */

 Retrieve PE */

 Do error injection */

 CONFIG_DEBUG_FS */

		/*

		 * If EEH is enabled, we're going to rely on that.

		 * Otherwise, we restore to conventional mechanism

		 * to clear frozen PE during PCI config access.

/**

 * pnv_eeh_post_init - EEH platform dependent post initialization

 *

 * EEH platform dependent post initialization on powernv. When

 * the function is called, the EEH PEs and devices should have

 * been built. If the I/O cache staff has been built, EEH is

 * ready to supply service.

 Register OPAL event notifier */

 Create debugfs entries */

 CONFIG_DEBUG_FS */

 Maximal number of capabilities */

 Check if the device supports capabilities */

 Found */

 Next one */

 for VFs we use the PF's PE as the upstream PE */

 otherwise use the PE of our parent bridge */

/**

 * pnv_eeh_probe - Do probe on PCI device

 * @pdev: pci_dev to probe

 *

 * Create, or find the existing, eeh_dev for this pci_dev.

	/*

	 * When probing the root bridge, which doesn't have any

	 * subordinate PCI devices. We don't have OF node for

	 * the root bridge. So it's not reasonable to continue

	 * the probing.

 already configured? */

 Skip for PCI-ISA bridge */

 Initialize eeh device */

 Create PE */

	/*

	 * If the PE contains any one of following adapters, the

	 * PCI config space can't be accessed when dumping EEH log.

	 * Otherwise, we will run into fenced PHB caused by shortage

	 * of outbound credits in the adapter. The PCI config access

	 * should be blocked until PE reset. MMIO access is dropped

	 * by hardware certainly. In order to drop PCI config requests,

	 * one more flag (EEH_PE_CFG_RESTRICTED) is introduced, which

	 * will be checked in the backend for PE state retrival. If

	 * the PE becomes frozen for the first time and the flag has

	 * been set for the PE, we will set EEH_PE_CFG_BLOCKED for

	 * that PE to block its config space.

	 *

	 * Broadcom BCM5718 2-ports NICs (14e4:1656)

	 * Broadcom Austin 4-ports NICs (14e4:1657)

	 * Broadcom Shiner 4-ports 1G NICs (14e4:168a)

	 * Broadcom Shiner 2-ports 10G NICs (14e4:168e)

	/*

	 * Cache the PE primary bus, which can't be fetched when

	 * full hotplug is in progress. In that case, all child

	 * PCI devices of the PE are expected to be removed prior

	 * to PE reset.

	/*

	 * Enable EEH explicitly so that we will do EEH check

	 * while accessing I/O stuff

 Save memory bars */

/**

 * pnv_eeh_set_option - Initialize EEH or MMIO/DMA reenable

 * @pe: EEH PE

 * @option: operation to be issued

 *

 * The function is used to control the EEH functionality globally.

 * Currently, following options are support according to PAPR:

 * Enable EEH, Disable EEH, Enable MMIO and Enable DMA

 Freeze master and slave PEs if PHB supports compound PEs */

 Unfreeze master and slave PEs if PHB supports */

	/*

	 * Check PHB state. If the PHB is frozen for the

	 * first time, to dump the PHB diag-data.

	/*

	 * We don't clobber hardware frozen state until PE

	 * reset is completed. In order to keep EEH core

	 * moving forward, we have to return operational

	 * state during PE reset.

	/*

	 * Fetch PE state from hardware. If the PHB

	 * supports compound PE, let it handle that.

 Figure out state */

	/*

	 * If PHB supports compound PE, to freeze all

	 * slave PEs for consistency.

	 *

	 * If the PE is switching to frozen state for the

	 * first time, to dump the PHB diag-data.

/**

 * pnv_eeh_get_state - Retrieve PE state

 * @pe: EEH PE

 * @delay: delay while PE state is temporarily unavailable

 *

 * Retrieve the state of the specified PE. For IODA-compitable

 * platform, it should be retrieved from IODA table. Therefore,

 * we prefer passing down to hardware implementation to handle

 * it.

	/*

	 * If the PE state is temporarily unavailable,

	 * to inform the EEH core delay for default

	 * period (1 second)

 Issue PHB complete reset request */

	/*

	 * Poll state of the PHB until the request is done

	 * successfully. The PHB reset is usually PHB complete

	 * reset followed by hot reset on root bus. So we also

	 * need the PCI bus settlement delay.

	/*

	 * During the reset deassert time, we needn't care

	 * the reset scope because the firmware does nothing

	 * for fundamental or hot reset during deassert phase.

 Poll state of the PHB until the request is done */

 Don't report linkDown event */

 Continue reporting linkDown event */

 Hot reset to the bus if firmware cannot handle */

 Wait for Transaction Pending bit to be cleared */

		/*

		 * Wait for Transaction Pending bit to clear. A word-aligned

		 * test is used, so we use the conrol offset rather than status

		 * and shift the test bit to match.

 The VF PE should have only one child device */

/**

 * pnv_eeh_reset - Reset the specified PE

 * @pe: EEH PE

 * @option: reset option

 *

 * Do reset on the indicated PE. For PCI bus sensitive PE,

 * we need to reset the parent p2p bridge. The PHB has to

 * be reinitialized if the p2p bridge is root bridge. For

 * PCI device sensitive PE, we will try to reset the device

 * through FLR. For now, we don't have OPAL APIs to do HARD

 * reset yet, so all reset would be SOFT (HOT) reset.

	/*

	 * For PHB reset, we always have complete reset. For those PEs whose

	 * primary bus derived from root complex (root bus) or root port

	 * (usually bus#1), we apply hot or fundamental reset on the root port.

	 * For other PEs, we always have hot reset on the PE primary bus.

	 *

	 * Here, we have different design to pHyp, which always clear the

	 * frozen state during PE reset. However, the good idea here from

	 * benh is to keep frozen state before we get PE reset done completely

	 * (until BAR restore). With the frozen state, HW drops illegal IO

	 * or MMIO access, which can incur recrusive frozen PE during PE

	 * reset. The side effect is that EEH core has to clear the frozen

	 * state explicitly after BAR restore.

	/*

	 * The frozen PE might be caused by PAPR error injection

	 * registers, which are expected to be cleared after hitting

	 * frozen PE as stated in the hardware spec. Unfortunately,

	 * that's not true on P7IOC. So we have to clear it manually

	 * to avoid recursive EEH errors during recovery.

	/*

	 * For hot resets try use the generic PCI error recovery reset

	 * functions. These correctly handles the case where the secondary

	 * bus is behind a hotplug slot and it will use the slot provided

	 * reset methods to prevent spurious hotplug events during the reset.

	 *

	 * Fundemental resets need to be handled internally to EEH since the

	 * PCI core doesn't really have a concept of a fundemental reset,

	 * mainly because there's no standard way to generate one. Only a

	 * few devices require an FRESET so it should be fine.

		/*

		 * NB: Skiboot and pnv_eeh_bridge_reset() also no-op the

		 *     de-assert step. It's like the OPAL reset API was

		 *     poorly designed or something...

 otherwise, use the generic bridge reset. this might call into FW */

/**

 * pnv_eeh_get_log - Retrieve error log

 * @pe: EEH PE

 * @severity: temporary or permanent error log

 * @drv_log: driver log to be combined with retrieved error log

 * @len: length of driver log

 *

 * Retrieve the temporary or permanent error from the PE.

/**

 * pnv_eeh_configure_bridge - Configure PCI bridges in the indicated PE

 * @pe: EEH PE

 *

 * The function will be called to reconfigure the bridges included

 * in the specified PE so that the mulfunctional PE would be recovered

 * again.

/**

 * pnv_pe_err_inject - Inject specified error to the indicated PE

 * @pe: the indicated PE

 * @type: error type

 * @func: specific error type

 * @addr: address

 * @mask: address mask

 *

 * The routine is called to inject specified error, which is

 * determined by @type and @func, to the indicated PE for

 * testing purpose.

 Firmware supports error injection ? */

 Do error injection */

	/*

	 * We will issue FLR or AF FLR to all VFs, which are contained

	 * in VF PE. It relies on the EEH PCI config accessors. So we

	 * can't block them during the window.

 GEM */

 LEM */

	/*

	 * If PHB supports compound PE, to fetch

	 * the master PE because slave PE is invisible

	 * to EEH core.

 Find the PE according to PE# */

 Freeze the (compound) PE */

	/*

	 * At this point, we're sure the (compound) PE should

	 * have been frozen. However, we still need poke until

	 * hitting the frozen PE on top level.

 Frozen parent PE */

 Next one */

/**

 * pnv_eeh_next_error - Retrieve next EEH error to handle

 * @pe: Affected PE

 *

 * The function is expected to be called by EEH core while it gets

 * special EEH event (without binding PE). The function calls to

 * OPAL APIs for next error to handle. The informational error is

 * handled internally by platform. However, the dead IOC, dead PHB,

 * fenced PHB and frozen PE should be handled by EEH core eventually.

	/*

	 * While running here, it's safe to purge the event queue. The

	 * event should still be masked.

		/*

		 * If the subordinate PCI buses of the PHB has been

		 * removed or is exactly under error recovery, we

		 * needn't take care of it any more.

 If the PHB doesn't have error, stop processing */

		/*

		 * Processing the error. We're expecting the error with

		 * highest priority reported upon multiple errors on the

		 * specific PHB.

			/*

			 * If we can't find the corresponding PE, we

			 * just try to unfreeze.

 Dump PHB diag-data */

 Try best to clear it */

		/*

		 * EEH core will try recover from fenced PHB or

		 * frozen PE. In the time for frozen PE, EEH core

		 * enable IO path for that before collecting logs,

		 * but it ruins the site. So we have to dump the

		 * log in advance here.

		/*

		 * We probably have the frozen parent PE out there and

		 * we need have to handle frozen parent PE firstly.

 Hit the ceiling ? */

 Frozen parent PE ? */

 Next parent level */

 We possibly migrate to another PE */

		/*

		 * If we have no errors on the specific PHB or only

		 * informative error there, we continue poking it.

		 * Otherwise, we need actions to be taken by upper

		 * layer.

 Unmask the event */

 Synchronize MPS for VF and PF */

 CONFIG_PCI_IOV */

/**

 * eeh_powernv_init - Register platform dependent EEH operations

 *

 * EEH initialization on powernv platform. This function should be

 * called before any EEH related functions.

 Set probe mode */

	/*

	 * P7IOC blocks PCI config access to frozen PE, but PHB3

	 * doesn't do that. So we have to selectively enable I/O

	 * prior to collecting error log.

	/*

	 * eeh_init() allocates the eeh_pe and its aux data buf so the

	 * size needs to be set before calling eeh_init().

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV system parameter code

 *

 * Copyright (C) 2013 IBM

 MAX_PARAM_DATA_LEN is sizeof(param_data_buf) */

 Some systems do not use sysparams; this is not an error */

 Allocate big enough buffer for any get/set transactions */

 Number of parameters exposed through DT */

 For each of the parameters, populate the parameter attributes */

 If the parameter is read-only or read-write */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerNV SCOM bus debugfs interface

 *

 * Copyright 2010 Benjamin Herrenschmidt, IBM Corp

 *                <benh@kernel.crashing.org>

 *     and        David Gibson, IBM Corporation.

 * Copyright 2013 IBM Corp.

	/*

	 * XSCOM addresses use the top nibble to set indirect mode and

	 * its form.  Bits 4-11 are always 0.

	 *

	 * Because the debugfs interface uses signed offsets and shifts

	 * the address left by 3, we basically cannot use the top 4 bits

	 * of the 64-bit address, and thus cannot use the indirect bit.

	 *

	 * To deal with that, we support the indirect bits being in

	 * bits 4-7 (IBM notation) instead of bit 0-3 in this API, we

	 * do the conversion here.

	 *

	 * For in-kernel use, we don't need to do this mangling.  In

	 * kernel won't have bits 4-7 set.

	 *

	 * So:

	 *   debugfs will always   set 0-3 = 0 and clear 4-7

	 *    kernel will always clear 0-3 = 0 and   set 4-7

 SPDX-License-Identifier: GPL-2.0

/*

 * We optimise OPAL calls by placing opal_tracepoint_refcount

 * directly in the TOC so we can check if the opal tracepoints are

 * enabled via a single load.

 NB: reg/unreg are called while guarded with the tracepoints_mutex */

/*

 * Since the tracing code might execute OPAL calls we need to guard against

 * recursion.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2014-2016 IBM Corp.

/* Find PHB for cxl dev and allocate MSI hwirqs?

 * Returns the absolute hardware IRQ number

 0 is reserved for the multiplexed PSL DSI interrupt */

 Assign XIVE to PE */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/platforms/embedded6xx/gamecube.c

 *

 * Nintendo GameCube board-specific support

 * Copyright (C) 2004-2009 The GameCube Linux Team

 * Copyright (C) 2007,2008,2009 Albert Herranz

 spin until power button pressed */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/platforms/embedded6xx/hlwd-pic.c

 *

 * Nintendo Wii "Hollywood" interrupt controller support.

 * Copyright (C) 2009 The GameCube Linux Team

 * Copyright (C) 2009 Albert Herranz

/*

 * Each interrupt has a corresponding bit in both

 * the Interrupt Cause (ICR) and Interrupt Mask (IMR) registers.

 *

 * Enabling/disabling an interrupt line involves asserting/clearing

 * the corresponding bit in IMR. ACK'ing a request simply involves

 * asserting the corresponding bit in ICR.

/*

 * IRQ chip hooks.

 *

 Make sure the ARM (aka. Starlet) doesn't handle this interrupt. */

/*

 * IRQ host hooks.

 *

 no more IRQs pending */

 IRQ_LEVEL */

 IRQ_LEVEL */

/*

 * Platform hooks.

 *

 mask and ack all IRQs */

/*

 * Probe function.

 *

/**

 * hlwd_quiesce() - quiesce hollywood irq controller

 *

 * Mask and ack all interrupt sources.

 *

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/platforms/embedded6xx/flipper-pic.c

 *

 * Nintendo GameCube/Wii "Flipper" interrupt controller support.

 * Copyright (C) 2004-2009 The GameCube Linux Team

 * Copyright (C) 2007,2008,2009 Albert Herranz

/*

 * Each interrupt has a corresponding bit in both

 * the Interrupt Cause (ICR) and Interrupt Mask (IMR) registers.

 *

 * Enabling/disabling an interrupt line involves setting/clearing

 * the corresponding bit in IMR.

 * Except for the RSW interrupt, all interrupts get deasserted automatically

 * when the source deasserts the interrupt.

 reset switch state */

/*

 * IRQ chip hooks.

 *

 this is at least needed for RSW */

 this is at least needed for RSW */

/*

 * IRQ host hooks.

 *

/*

 * Platform hooks.

 *

 mask and ack all IRQs */

 no more IRQs pending */

/*

 * Probe function.

 *

/*

 * Misc functions related to the flipper chipset.

 *

/**

 * flipper_quiesce() - quiesce flipper irq controller

 *

 * Mask and ack all interrupt sources.

 *

/*

 * Resets the platform.

/*

 * Returns non-zero if the reset button is pressed.

/*

 * AVR power-management chip interface for the Buffalo Linkstation /

 * Kurobox Platform.

 *

 * Author: 2006 (c) G. Liakhovetski

 *	 g.liakhovetski@gmx.de

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2.  This program is licensed "as is" without any warranty of

 * any kind, whether express or implied.

				/* Read "OK" back: 4ms for the last "KKKK"

 initialise UART */

 Set character format */

 set DLAB */

 LS of divisor */

 MS of divisor */

 reset DLAB */

 enable FIFO */

 enable FIFO */

 clear FIFOs */

 Clear up interrupts */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * mpc7448_hpc2.c

 *

 * Board setup routines for the Freescale mpc7448hpc2(taiga) platform

 *

 * Author: Jacob Pan

 *	 jacob.pan@freescale.com

 * Author: Xianghua Xiao

 *       x.xiao@freescale.com

 * Maintainer: Roy Zang <tie-fei.zang@freescale.com>

 * 	Add Flat Device Tree support fot mpc7448hpc2 board

 *

 * Copyright 2004-2006 Freescale Semiconductor, Inc.

 setup PCI host bridge */

/*

 * Interrupt setup and service.  Interrupts on the mpc7448_hpc2 come

 * from the four external INT pins, PCI interrupts are routed via

 * PCI interrupt control registers, it generates internal IRQ23

 *

 * Interrupt routing on the Taiga Board:

 * TSI108:PB_INT[0] -> CPU0:INT#

 * TSI108:PB_INT[1] -> CPU0:MCP#

 * TSI108:PB_INT[2] -> N/C

 * TSI108:PB_INT[3] -> N/C

 Configure MPIC outputs to CPU0 */

 Set exception prefix high - to the firmware */

 Spin until reset happens */

/*

 * Called very early, device-tree isn't unflattened

 Are we prepared to handle this fault */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Board setup routines for the Motorola/Emerson MVME5100.

 *

 * Copyright 2013 CSC Australia Pty. Ltd.

 *

 * Based on earlier code by:

 *

 *    Matt Porter, MontaVista Software Inc.

 *    Copyright 2001 MontaVista Software Inc.

 *

 * Author: Stephen Chivers <schivers@csc.com>

 Board register addresses. */

/*

 * Setup the architecture

/*

 * Called very early, device-tree isn't unflattened

/*

 * Board setup routines for the Buffalo Linkstation / Kurobox Platform.

 *

 * Copyright (C) 2006 G. Liakhovetski (g.liakhovetski@gmx.de)

 *

 * Based on sandpoint.c by Mark A. Greer

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2.  This program is licensed "as is" without any warranty of

 * any kind, whether express or implied.

 Interpret the "ranges" property */

 This also maps the I/O region and sets isa_io/mem_base */

 Lookup PCI host bridges */

/*

 * Interrupt setup and service.  Interrupts on the linkstation come

 * from the four PCI slots plus onboard 8241 devices: I2C, DUART.

 PCI IRQs */

 I2C */

 ttyS0, ttyS1 */

 Reset system via AVR */

 Send reboot command */

 Spin until reset happens */

 "kick" */

 Power down system via AVR */

 send shutdown command */

 Spin until power-off happens */

 "kick" */

 NOTREACHED */

 NOTREACHED */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/platforms/embedded6xx/usbgecko_udbg.c

 *

 * udbg serial input/output routines for the USB Gecko adapter.

 * Copyright (C) 2008-2009 The GameCube Linux Team

 * Copyright (C) 2008,2009 Albert Herranz

 Chip Select 001 */

/*

 * Performs one input/output transaction between the exi host and the usbgecko.

 select */

 read/write */

 deselect */

 result */

/*

 * Returns true if an usbgecko adapter is found.

/*

 * Returns true if the TX fifo is ready for transmission.

/*

 * Tries to transmit a character.

 * If the TX fifo is not ready the result is undefined.

/*

 * Transmits a character.

 * It silently fails if the TX fifo is not ready after a number of retries.

/*

 * Returns true if the RX fifo is ready for transmission.

/*

 * Tries to receive a character.

 * If a character is unavailable the function returns -1.

/*

 * Receives a character.

 * It fails if the RX fifo is not ready after a number of retries.

/*

 * udbg functions.

 *

/*

 * Transmits a character.

/*

 * Receives a character. Waits until a character is available.

/*

 * Receives a character. If a character is not available, returns -1.

/*

 * Retrieves and prepares the virtual address needed to access the hardware.

/*

 * Checks if a USB Gecko adapter is inserted in any memory card slot.

 look for a usbgecko on memcard slots A and B */

/*

 * USB Gecko udbg support initialization.

/*

 * USB Gecko early debug support initialization for udbg.

	/*

	 * At this point we have a BAT already setup that enables I/O

	 * to the EXI hardware.

	 *

	 * The BAT uses a virtual address range reserved at the fixmap.

	 * This must match the virtual address configured in

	 * head_32.S:setup_usbgecko_bat().

 try to detect a USB Gecko */

 we found a USB Gecko, load udbg hooks */

	/*

	 * Prepare again the same BAT for MMU_init.

	 * This allows udbg I/O to continue working after the MMU is

	 * turned on for real.

	 * It is safe to continue using the same virtual address as it is

	 * a reserved fixmap area.

 CONFIG_PPC_EARLY_DEBUG_USBGECKO */

/*

 * Board setup routines for the storcenter

 *

 * Copyright 2007 (C) Oyvind Repvik (nail@nslu2-linux.org)

 * Copyright 2007 Andy Wilcox, Jon Loeliger

 *

 * Based on linkstation.c by G. Liakhovetski

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2.  This program is licensed "as is" without any warranty of

 * any kind, whether express or implied.

 Interpret the "ranges" property */

 This also maps the I/O region and sets isa_io/mem_base */

 Lookup PCI host bridges */

/*

 * Interrupt setup and service.  Interrupts on the turbostation come

 * from the four PCI slots plus onboard 8241 devices: I2C, DUART.

	/*

	 * 16 Serial Interrupts followed by 16 Internal Interrupts.

	 * I2C is the second internal, so it is at 17, 0x11020.

 Set exception prefix high - to the firmware */

 Wait for reset to happen */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Board setup routines for the IBM 750GX/CL platform w/ TSI10x bridge

 *

 * Copyright 2007 IBM Corporation

 *

 * Stephen Winiecki <stevewin@us.ibm.com>

 * Josh Boyer <jwboyer@linux.vnet.ibm.com>

 *

 * Based on code from mpc7448_hpc2.c

	/* Re-init the PCI bridge and LUT registers to have mappings that don't

	 * rely on PIBS

 Reserve the last LUT entry for PCI I/O space */

 Map PCI I/O space */

 Map PCI CFG space */

 We don't need MEM32 and PRM remapping so disable them */

 Set P2O_BAR0 */

 Init the PCI LUTs to do no remapping */

 Set 64-bit PCI bus address for system memory */

 setup PCI host bridge */

/*

 * Interrupt setup and service.  Interrupts on the holly come

 * from the four external INT pins, PCI interrupts are routed via

 * PCI interrupt control registers, it generates internal IRQ23

 *

 * Interrupt routing on the Holly Board:

 * TSI108:PB_INT[0] -> CPU0:INT#

 * TSI108:PB_INT[1] -> CPU0:MCP#

 * TSI108:PB_INT[2] -> N/C

 * TSI108:PB_INT[3] -> N/C

 Configure MPIC outputs to CPU0 */

	/* Turn on the BOOT bit so the addresses are correctly

 Set SRR0 to the reset vector and turn on MSR_IP */

	/* Do an rfi to jump back to firmware.  Somewhat evil,

	 * but it works

 Spin until reset happens.  Shouldn't really get here */

/*

 * Called very early, device-tree isn't unflattened

 Are we prepared to handle this fault */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/platforms/embedded6xx/wii.c

 *

 * Nintendo Wii board-specific support

 * Copyright (C) 2008-2009 The GameCube Linux Team

 * Copyright (C) 2008,2009 Albert Herranz

 control block */

 gpio */

 turn off the front blue led and IR light */

 clear the system reset pin to cause a reset */

		/*

		 * set the owner of the shutdown pin to ARM, because it is

		 * accessed through the registers for the ARM, below

 make sure that the poweroff GPIO is configured as output */

 drive the poweroff GPIO high */

/*

 *

 * Programmable Interrupt Controller functions for the Freescale MPC52xx.

 *

 * Copyright (C) 2008 Secret Lab Technologies Ltd.

 * Copyright (C) 2006 bplan GmbH

 * Copyright (C) 2004 Sylvain Munaut <tnt@246tNt.com>

 * Copyright (C) 2003 Montavista Software, Inc

 *

 * Based on the code from the 2.4 kernel by

 * Dale Farnsworth <dfarnsworth@mvista.com> and Kent Borg.

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2. This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

 *

/*

 * This is the device driver for the MPC5200 interrupt controller.

 *

 * hardware overview

 * -----------------

 * The MPC5200 interrupt controller groups the all interrupt sources into

 * three groups called 'critical', 'main', and 'peripheral'.  The critical

 * group has 3 irqs, External IRQ0, slice timer 0 irq, and wake from deep

 * sleep.  Main group include the other 3 external IRQs, slice timer 1, RTC,

 * gpios, and the general purpose timers.  Peripheral group contains the

 * remaining irq sources from all of the on-chip peripherals (PSCs, Ethernet,

 * USB, DMA, etc).

 *

 * virqs

 * -----

 * The Linux IRQ subsystem requires that each irq source be assigned a

 * system wide unique IRQ number starting at 1 (0 means no irq).  Since

 * systems can have multiple interrupt controllers, the virtual IRQ (virq)

 * infrastructure lets each interrupt controller to define a local set

 * of IRQ numbers and the virq infrastructure maps those numbers into

 * a unique range of the global IRQ# space.

 *

 * To define a range of virq numbers for this controller, this driver first

 * assigns a number to each of the irq groups (called the level 1 or L1

 * value).  Within each group individual irq sources are also assigned a

 * number, as defined by the MPC5200 user guide, and refers to it as the

 * level 2 or L2 value.  The virq number is determined by shifting up the

 * L1 value by MPC52xx_IRQ_L1_OFFSET and ORing it with the L2 value.

 *

 * For example, the TMR0 interrupt is irq 9 in the main group.  The

 * virq for TMR0 is calculated by ((1 << MPC52xx_IRQ_L1_OFFSET) | 9).

 *

 * The observant reader will also notice that this driver defines a 4th

 * interrupt group called 'bestcomm'.  The bestcomm group isn't physically

 * part of the MPC5200 interrupt controller, but it is used here to assign

 * a separate virq number for each bestcomm task (since any of the 16

 * bestcomm tasks can cause the bestcomm interrupt to be raised).  When a

 * bestcomm interrupt occurs (peripheral group, irq 0) this driver determines

 * which task needs servicing and returns the irq number for that task.  This

 * allows drivers which use bestcomm to define their own interrupt handlers.

 *

 * irq_chip structures

 * -------------------

 * For actually manipulating IRQs (masking, enabling, clearing, etc) this

 * driver defines four separate 'irq_chip' structures, one for the main

 * group, one for the peripherals group, one for the bestcomm group and one

 * for external interrupts.  The irq_chip structures provide the hooks needed

 * to manipulate each IRQ source, and since each group is has a separate set

 * of registers for controlling the irq, it makes sense to divide up the

 * hooks along those lines.

 *

 * You'll notice that there is not an irq_chip for the critical group and

 * you'll also notice that there is an irq_chip defined for external

 * interrupts even though there is no external interrupt group.  The reason

 * for this is that the four external interrupts are all managed with the same

 * register even though one of the external IRQs is in the critical group and

 * the other three are in the main group.  For this reason it makes sense for

 * the 4 external irqs to be managed using a separate set of hooks.  The

 * reason there is no crit irq_chip is that of the 3 irqs in the critical

 * group, only external interrupt is actually support at this time by this

 * driver and since external interrupt is the only one used, it can just

 * be directed to make use of the external irq irq_chip.

 *

 * device tree bindings

 * --------------------

 * The device tree bindings for this controller reflect the two level

 * organization of irqs in the device.  #interrupt-cells = <3> where the

 * first cell is the group number [0..3], the second cell is the irq

 * number in the group, and the third cell is the sense type (level/edge).

 * For reference, the following is a list of the interrupt property values

 * associated with external interrupt sources on the MPC5200 (just because

 * it is non-obvious to determine what the interrupts property should be

 * when reading the mpc5200 manual and it is a frequently asked question).

 *

 * External interrupts:

 * <0 0 n>	external irq0, n is sense	(n=0: level high,

 * <1 1 n>	external irq1, n is sense	 n=1: edge rising,

 * <1 2 n>	external irq2, n is sense	 n=2: edge falling,

 * <1 3 n>	external irq3, n is sense	 n=3: level low)

 HW IRQ mapping */

 MPC5200 device tree match tables */

 Utility functions */

/*

 * IRQ[0-3] interrupt irq_chip

/*

 * Main interrupt irq_chip

 Do nothing so that the sense mask will get updated */

/*

 * Peripherals interrupt irq_chip

/*

 * SDMA interrupt irq_chip

/**

 * mpc52xx_is_extirq - Returns true if hwirq number is for an external IRQ

/**

 * mpc52xx_irqhost_xlate - translate virq# from device tree interrupts property

/**

 * mpc52xx_irqhost_map - Hook to map from virq to an irq_chip structure

	/*

	 * External IRQs are handled differently by the hardware so they are

	 * handled by a dedicated irq_chip structure.

 It is an internal SOC irq.  Choose the correct irq_chip */

/**

 * mpc52xx_init_irq - Initialize and register with the virq subsystem

 *

 * Hook for setting up IRQs on an mpc5200 system.  A pointer to this function

 * is to be put into the machine definition structure.

 *

 * This function searches the device tree for an MPC5200 interrupt controller,

 * initializes it, and registers it with the virq subsystem.

 Remap the necessary zones */

 Disable all interrupt sources. */

 1 means clear pending */

 1 means disabled */

 1 means disabled */

 1 means disabled */

 Keeps IRQ[0-3] config */

 clear IRQ 0-3 */

 MEE master external enable */

 0 means disable IRQ 0-3 */

 CEb route critical normally */

 Zero a bunch of the priority settings. */

	/*

	 * As last step, add an irq host to translate the real

	 * hw irq information provided by the ofw to linux virq

/**

 * mpc52xx_get_irq - Get pending interrupt number hook function

 *

 * Called by the interrupt handler to determine what IRQ handler needs to be

 * executed.

 *

 * Status of pending interrupts is determined by reading the encoded status

 * register.  The encoded status register has three fields; one for each of the

 * types of interrupts defined by the controller - 'critical', 'main' and

 * 'peripheral'.  This function reads the status register and returns the IRQ

 * number associated with the highest priority pending interrupt.  'Critical'

 * interrupts have the highest priority, followed by 'main' interrupts, and

 * then 'peripheral'.

 *

 * The mpc5200 interrupt controller can be configured to boost the priority

 * of individual 'peripheral' interrupts.  If this is the case then a special

 * value will appear in either the crit or main fields indicating a high

 * or medium priority peripheral irq has occurred.

 *

 * This function checks each of the 3 irq request fields and returns the

 * first pending interrupt that it finds.

 *

 * This function also identifies a 4th type of interrupt; 'bestcomm'.  Each

 * bestcomm DMA task can raise the bestcomm peripheral interrupt.  When this

 * occurs at task-specific IRQ# is decoded so that each task can have its

 * own IRQ handler.

 critical */

 high priority peripheral */

 main */

 low priority peripheral */

 peripheral */

 bestcomm */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Freescale Lite5200 board support

 *

 * Written by: Grant Likely <grant.likely@secretlab.ca>

 *

 * Copyright (C) Secret Lab Technologies Ltd. 2006. All rights reserved.

 * Copyright 2006 Freescale Semiconductor, Inc. All rights reserved.

 *

 * Description:

/* ************************************************************************

 *

 * Setup the architecture

 *

 mpc5200 device tree match tables */

/*

 * Fix clock configuration.

 *

 * Firmware is supposed to be responsible for this.  If you are creating a

 * new board port, do *NOT* duplicate this code.  Fix your boot firmware

 * to set it correctly in the first place

 Map zones */

 Use internal 48 Mhz */

 Assumes 33Mhz clock */

 Unmap the regs */

/*

 * Fix setting of port_config register.

 *

 * Firmware is supposed to be responsible for this.  If you are creating a

 * new board port, do *NOT* duplicate this code.  Fix your boot firmware

 * to set it correctly in the first place

 Set port config */

 48Mhz internal, pin is GPIO	*/

 USB port : Differential mode	*/

            USB 1 only	*/

 ATA CS is on csb_4/5		*/

 Unmap zone */

 GPIO_WKUP_1 (GPIO_PSC2_4) */

 wakeup on low level */

	/*

	 * power down usb port

	 * this needs to be called before of-ohci suspend code

	/* set ports to "power switched" and "powered at the same time"

 USB Rh status: LPS = 1 - turn off power */

 USB Rh status: LPSC = 1 - turn on power */

 Map important registers from the internal memory map */

 Some mpc5200 & mpc5200b related configuration */

 Fix things that firmware should have done. */

/*

 * Called very early, MMU is off, device-tree isn't unflattened

/*

 * Efika 5K2 platform code

 * Some code really inspired from the lite5200b platform.

 *

 * Copyright (C) 2006 bplan GmbH

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2. This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

 ------------------------------------------------------------------------ */

 PCI accesses thru RTAS                                                   */

 ------------------------------------------------------------------------ */

/*

 * Access functions for PCI config space using RTAS calls.

 ------------------------------------------------------------------------ */

 Platform setup                                                           */

 ------------------------------------------------------------------------ */

 GPIO_WKUP_4 (GPIO_PSC6_0 - IRDA_RX) */

 wakeup on high level */

 IOW. to wake it up, short pins 1 and 3 on IRDA connector */

 Map important registers from the internal memory map */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Support for 'media5200-platform' compatible boards.

 *

 * Copyright (C) 2008 Secret Lab Technologies Ltd.

 *

 * Description:

 * This code implements support for the Freescape Media5200 platform

 * (built around the MPC5200 SoC).

 *

 * Notable characteristic of the Media5200 is the presence of an FPGA

 * that has all external IRQ lines routed through it.  This file implements

 * a cascaded interrupt controller driver which attaches itself to the

 * Virtual IRQ subsystem after the primary mpc5200 interrupt controller

 * is initialized.

 FPGA register set */

 Mask off the cascaded IRQ */

	/* Ask the FPGA for IRQ status.  If 'val' is 0, then no irqs

		/* pr_debug("%s: virq=%i s=%.8x e=%.8x hwirq=%i\n",

		 *          __func__, virq, status, enable, val - 1);

 Processing done; can reenable the cascade now */

/*

 * Setup Media5200 IRQ mapping

 First setup the regular MPC5200 interrupt controller */

 Now find the FPGA IRQ */

 Disable all FPGA IRQs */

/*

 * Setup the architecture

 Map important registers from the internal memory map */

 Some mpc5200 & mpc5200b related configuration */

 Set port config */

 ATA CS is on csb_4/5		*/

 Unmap zone */

 list of the supported boards */

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-only

/*

 * LocalPlus Bus FIFO driver for the Freescale MPC52xx.

 *

 * Copyright (C) 2009 Secret Lab Technologies Ltd.

 *

 * Todo:

 * - Add support for multiple requests to be queued.

 Current state data */

 The MPC5200 has only one fifo, so only need one instance structure */

/**

 * mpc52xx_lpbfifo_kick - Trigger the next block of data to be transferred

 Set and clear the reset bits; is good practice in User Manual */

 set master enable bit */

		/* While the FIFO can be setup for transfer sizes as large as

		 * 16M-1, the FIFO itself is only 512 bytes deep and it does

		 * not generate interrupts for FIFO full events (only transfer

		 * complete will raise an IRQ).  Therefore when not using

		 * Bestcomm to drive the FIFO it needs to either be polled, or

		 * transfers need to constrained to the size of the fifo.

		 *

		 * This driver restricts the size of the transfer

 Load the FIFO with data */

 Unmask both error and completion irqs */

		/* Choose the correct direction

		 *

		 * Configure the watermarks so DMA will always complete correctly.

		 * It may be worth experimenting with the ALARM value to see if

		 * there is a performance impacit.  However, if it is wrong there

		 * is a risk of DMA not transferring the last chunk of data

			/*

			 * In the DMA read case, the DMA doesn't complete,

			 * possibly due to incorrect watermarks in the ALARM

			 * and CONTROL regs. For now instead of trying to

			 * determine the right watermarks that will make this

			 * work, just increase the number of bytes the FIFO is

			 * expecting.

			 *

			 * When submitting another operation, the FIFO will get

			 * reset, so the condition of the FIFO waiting for a

			 * non-existent 4 bytes will get cleared.

 BLECH! */

 error irq & master enabled bit */

 Unmask irqs */

 completion irq too */

 Set transfer size, width, chip select and READ mode */

 read mode */

 Kick it off */

/**

 * mpc52xx_lpbfifo_irq - IRQ handler for LPB FIFO

 *

 * On transmit, the dma completion irq triggers before the fifo completion

 * triggers.  Handle the dma completion here instead of the LPB FIFO Bestcomm

 * task completion irq because everything is not really done until the LPB FIFO

 * completion irq triggers.

 *

 * In other words:

 * For DMA, on receive, the "Fat Lady" is the bestcom completion irq. on

 * transmit, the fifo completion irq is the "Fat Lady". The opera (or in this

 * case the DMA/FIFO operation) is not finished until the "Fat Lady" sings.

 *

 * Reasons for entering this routine:

 * 1) PIO mode rx and tx completion irq

 * 2) DMA interrupt mode tx completion irq

 * 3) DMA polled mode tx

 *

 * Exit conditions:

 * 1) Transfer aborted

 * 2) FIFO complete without DMA; more data to do

 * 3) FIFO complete without DMA; all data transferred

 * 4) FIFO complete using DMA

 *

 * Condition 1 can occur regardless of whether or not DMA is used.

 * It requires executing the callback to report the error and exiting

 * immediately.

 *

 * Condition 2 requires programming the FIFO with the next block of data

 *

 * Condition 3 requires executing the callback to report completion

 *

 * Condition 4 means the same as 3, except that we also retrieve the bcom

 * buffer so DMA doesn't get clogged up.

 *

 * To make things trickier, the spinlock must be dropped before

 * executing the callback, otherwise we could end up with a deadlock

 * or nested spinlock condition.  The out path is non-trivial, so

 * extra fiddling is done to make sure all paths lead to the same

 * outbound code.

 check abort bit */

 Read result from hardware */

 copy the data out of the FIFO */

 Update transfer position and count */

 Decide what to do next */

 more work to do */

 Clear the IRQ */

		/*

		 * Count the DMA as complete only when the FIFO completion

		 * status or abort bits are set.

		 *

		 * (status & 0x01) should always be the case except sometimes

		 * when using polled DMA.

		 *

		 * (status & 0x10) {transfer aborted}: This case needs more

		 * testing.

	/* When the do_callback flag is set; it means the transfer is finished

 don't increment on polled case */

 Spinlock is released; it is now safe to call the callback */

/**

 * mpc52xx_lpbfifo_bcom_irq - IRQ handler for LPB FIFO Bestcomm task

 *

 * Only used when receiving data.

 don't increment on polled case */

 Mark the FIFO as idle */

 Release the lock before calling out to the callback. */

/**

 * mpc52xx_lpbfifo_bcom_poll - Poll for DMA completion

	/*

	 * For more information, see comments on the "Fat Lady" 

/**

 * mpc52xx_lpbfifo_submit - Submit an LPB FIFO transfer request.

 * @req: Pointer to request structure

 If the req pointer is already set, then a transfer is in progress */

 Setup the transfer */

	/*

	 * If the req pointer is already set and a transfer was

	 * started on submit, then this transfer is in progress

	/*

	 * If the req was previously submitted but not

	 * started, start it now

 Put it into reset and clear the state */

 Put FIFO into reset */

 Register the interrupt handler */

 Request the Bestcomm receive (fifo --> memory) task and IRQ */

 Request the Bestcomm transmit (memory --> fifo) task and IRQ */

 Put FIFO in reset */

 Release the bestcomm transmit task */

 Release the bestcomm receive task */

/*

 *

 * Utility functions for the Freescale MPC52xx.

 *

 * Copyright (C) 2006 Sylvain Munaut <tnt@246tNt.com>

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2. This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

 *

 MPC5200 device tree match tables */

 depreciated matches; shouldn't be used in new device trees */

 efika */

 lite5200 */

/*

 * This variable is mapped in mpc52xx_map_wdt() and used in mpc52xx_restart().

 * Permanent mapping is required because mpc52xx_restart() can be called

 * from interrupt context while node mapping (which calls ioremap())

 * cannot be used at such point.

/*

 * Configure the XLB arbiter settings to match what Linux expects.

 Configure the XLB Arbiter priorities */

	/*

	 * Disable XLB pipelining

	 * (cfr errate 292. We could do this only just before ATA PIO

	 *  transaction and re-enable it afterwards ...)

	 * Not needed on MPC5200B.

/*

 * This variable is mapped in mpc52xx_map_common_devices and

 * used in mpc5200_psc_ac97_gpio_reset().

/**

 * mpc52xx_declare_of_platform_devices: register internal devices and children

 *					of the localplus bus to the of_platform

 *					bus.

 Find all the 'platform' devices and register them. */

/*

 * match tables used by mpc52xx_map_common_devices()

 old */

 old */

/**

 * mpc52xx_map_common_devices: iomap devices required by common code

	/* mpc52xx_wdt is mapped here and used in mpc52xx_restart,

	 * possibly from a interrupt context. wdt is only implement

	 * on a gpt0, so check has-wdt property before mapping.

 Clock Distribution Module, used by PSC clock setting function */

 simple_gpio registers */

 wkup_gpio registers */

/**

 * mpc52xx_set_psc_clkdiv: Set clock divider in the CDM for PSC ports

 *

 * @psc_id: id of psc port; must be 1,2,3 or 6

 * @clkdiv: clock divider value to put into CDM PSC register.

 Set the rate and enable the clock */

/**

 * mpc52xx_get_xtal_freq - Get SYS_XTAL_IN frequency for a device

 *

 * @node: device node

 *

 * Returns the frequency of the external oscillator clock connected

 * to the SYS_XTAL_IN pin, or 0 if it cannot be determined.

/**

 * mpc52xx_restart: ppc_md->restart hook for mpc5200 using the watchdog timer

	/* Turn on the watchdog and wait for it to expire.

/**

 * mpc5200_psc_ac97_gpio_reset: Use gpio pins to reset the ac97 bus

 *

 * @psc: psc number to reset (only psc 1 and 2 support ac97)

 AC97_1_RES */

 AC97_1_SYNC */

 AC97_1_SDATA_OUT */

 AC97_2_RES */

 AC97_2_SYNC */

 AC97_2_SDATA_OUT */

 Reconfiure pin-muxing to gpio */

 enable gpio pins for output */

 Assert cold reset */

 wait for 1 us */

 Deassert reset */

 wait at least 200ns */

 7 ~= (200ns * timebase) / ns2sec */

 Restore pin-muxing */

/*

 * PCI code for the Freescale MPC52xx embedded CPU.

 *

 * Copyright (C) 2006 Secret Lab Technologies Ltd.

 *                        Grant Likely <grant.likely@secretlab.ca>

 * Copyright (C) 2004 Sylvain Munaut <tnt@246tNt.com>

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2. This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

 ======================================================================== */

 Structures mapping & Defines for PCI Unit                                */

 ======================================================================== */

 PCI + 0x00 */

 PCI + 0x04 */

 PCI + 0x08 */

 PCI + 0x0C */

 PCI + 0x10 */

 PCI + 0x14 */

 PCI + 0x18 */

 PCI + 0x28 */

 PCI + 0x2C */

 PCI + 0x30 */

 PCI + 0x34 */

 PCI + 0x38 */

 PCI + 0x3C */

 PCI + 0x40 */

 PCI + 0x60 */

 PCI + 0x64 */

 PCI + 0x68 */

 PCI + 0x6C */

 PCI + 0x70 */

 PCI + 0x74 */

 PCI + 0x78 */

 PCI + 0x7C */

 PCI + 0x80 */

 PCI + 0x84 */

 PCI + 0x88 */

 PCI + 0x8C */

 PCI + 0x90 */

 PCI + 0xF8 */

 PCI + 0xFC */

 MPC5200 device tree match tables */

 ======================================================================== */

 PCI configuration access                                                 */

 ======================================================================== */

		/* workaround for the bug 435 of the MPC5200 (L25R);

		/* workaround for the bug 435 of the MPC5200 (L25R);

 ======================================================================== */

 PCI setup                                                                */

 ======================================================================== */

	/* pci_process_bridge_OF_ranges() found all our addresses for us;

 Control regs */

 Memory windows */

 IO resources */

 Set all the IWCR fields at once; they're in the same reg */

 Map IMMR onto PCI bus */

 bar0 has only 14 significant bits */

 Map memory onto PCI bus */

 Reset the exteral bus ( internal PCI controller is NOT reset ) */

	/* Not necessary and can be a bad thing if for example the bootloader

	   is displaying a splash screen or ... Just left here for

 Make sure the PCI bridge is out of reset */

	/* We don't rely on boot loader for PCI and resets all

 Only valid resources */

	/* The PCI Host bridge of MPC52xx has a prefetch memory resource

	/* There are some PCI quirks on the 52xx, register the hook to

	/* Alloc and initialize the pci controller.  Values in the device

	 * tree are needed to configure the 52xx PCI controller.  Rather

	 * than parse the tree here, let pci_process_bridge_OF_ranges()

	/* Finish setting up PCI using values obtained by

 SPDX-License-Identifier: GPL-2.0

 defined in lite5200_sleep.S and only used here */

 16 kBytes */

 lite5200 */

 efika */

 deep sleep? let mpc52xx code handle that */

 map registers */

 save and restore registers not bound to any real devices */

 PCI Configuration */

	/*

	 * GPIOs. Interrupt Master Enable has higher address then other

	 * registers, so just memcpy is ok.

 XLB Arbitrer */

 enable */

 CDM - Clock Distribution Module */

 BESTCOMM */

 restore tasks */

 enable interrupts */

 PIC */

 unmask and enable interrupts */

 deep sleep? let mpc52xx code handle that */

 effectively save FP regs */

 deep sleep? let mpc52xx code handle that */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Support for 'mpc5200-simple-platform' compatible boards.

 *

 * Written by Marian Balakowicz <m8@semihalf.com>

 * Copyright (C) 2007 Semihalf

 *

 * Description:

 * This code implements support for a simple MPC52xx based boards which

 * do not need a custom platform specific setup. Such boards are

 * supported assuming the following:

 *

 * - GPIO pins are configured by the firmware,

 * - CDM configuration (clocking) is setup correctly by firmware,

 * - if the 'fsl,has-wdt' property is present in one of the

 *   gpt nodes, then it is safe to use such gpt to reset the board,

 * - PCI is supported if enabled in the kernel configuration

 *   and if there is a PCI bus node defined in the device tree.

 *

 * Boards that are compatible with this generic platform support

 * are listed in a 'board' table.

/*

 * Setup the architecture

 Map important registers from the internal memory map */

 Some mpc5200 & mpc5200b related configuration */

 list of the supported boards */

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MPC5200 General Purpose Timer device driver

 *

 * Copyright (c) 2009 Secret Lab Technologies Ltd.

 * Copyright (c) 2008 Sascha Hauer <s.hauer@pengutronix.de>, Pengutronix

 *

 * This file is a driver for the the General Purpose Timer (gpt) devices

 * found on the MPC5200 SoC.  Each timer has an IO pin which can be used

 * for GPIO or can be used to raise interrupts.  The timer function can

 * be used independently from the IO pin, or it can be used to control

 * output signals or measure input signals.

 *

 * This driver supports the GPIO and IRQ controller functions of the GPT

 * device.  Timer functions are not yet supported.

 *

 * The timer gpt0 can be used as watchdog (wdt).  If the wdt mode is used,

 * this prevents the use of any gpt0 gpt function (i.e. they will fail with

 * -EBUSY).  Thus, the safety wdt function always has precedence over the gpt

 * function.  If the kernel has been compiled with CONFIG_WATCHDOG_NOWAYOUT,

 * this means that gpt0 is locked in wdt mode until the next reboot - this

 * may be a requirement in safety applications.

 *

 * To use the GPIO function, the following two properties must be added

 * to the device tree node for the gpt device (typically in the .dts file

 * for the board):

 * 	gpio-controller;

 * 	#gpio-cells = < 2 >;

 * This driver will register the GPIO pin if it finds the gpio-controller

 * property in the device tree.

 *

 * To use the IRQ controller function, the following two properties must

 * be added to the device tree node for the gpt device:

 * 	interrupt-controller;

 * 	#interrupt-cells = < 1 >;

 * The IRQ controller binding only uses one cell to specify the interrupt,

 * and the IRQ flags are encoded in the cell.  A cell is not used to encode

 * the IRQ number because the GPT only has a single IRQ source.  For flags,

 * a value of '1' means rising edge sensitive and '2' means falling edge.

 *

 * The GPIO and the IRQ controller functions can be used at the same time,

 * but in this use case the IO line will only work as an input.  Trying to

 * use it as a GPIO output will not work.

 *

 * When using the GPIO line as an output, it can either be driven as normal

 * IO, or it can be an Open Collector (OC) output.  At the moment it is the

 * responsibility of either the bootloader or the platform setup code to set

 * the output mode.  This driver does not change the output mode setting.

/**

 * struct mpc52xx_gpt - Private data structure for MPC52xx GPT driver

 * @dev: pointer to device structure

 * @regs: virtual address of GPT registers

 * @lock: spinlock to coordinate between different functions.

 * @gc: gpio_chip instance structure; used when GPIO is enabled

 * @irqhost: Pointer to irq_domain instance; used when IRQ mode is supported

 * @wdt_mode: only relevant for gpt0: bit 0 (MPC52xx_GPT_CAN_WDT) indicates

 *   if the gpt may be used as wdt, bit 1 (MPC52xx_GPT_IS_WDT) indicates

 *   if the timer is actively used as wdt which blocks gpt functions

 List of all GPT devices */

/* ---------------------------------------------------------------------

 * Cascaded interrupt controller hooks

 The GPT only has 1 IRQ line */

	/* If the GPT is currently disabled, then change it to be in Input

	 * Capture mode.  If the mode is non-zero, then the pin could be

/* ---------------------------------------------------------------------

 * GPIOLIB hooks

	/* Only setup GPIO if the device tree claims the GPT is

 Setup external pin in GPIO mode */

 defined(CONFIG_GPIOLIB) */

 defined(CONFIG_GPIOLIB) */

/***********************************************************************

 * Timer API

/**

 * mpc52xx_gpt_from_irq - Return the GPT device associated with an IRQ number

 * @irq: irq of timer.

 Iterate over the list of timers looking for a matching device */

	/* Determine the number of clocks in the requested period.  64 bit

	 * arithmatic is done here to preserve the precision until the value

	 * is scaled back down into the u32 range.  Period is in 'ns', bus

 Scale it down to ns range */

 This device cannot handle a clock count greater than 32 bits */

	/* Calculate the prescaler and count values from the clocks value.

	 * 'clocks' is the number of clock ticks in the period.  The timer

	 * has 16 bit precision and a 16 bit prescaler.  Prescaler is

	 * calculated by integer dividing the clocks by 0x10000 (shifting

	 * down 16 bits) to obtain the smallest possible divisor for clocks

	 * to get a 16 bit count value.

	 *

	 * Note: the prescale register is '1' based, not '0' based.  ie. a

	 * value of '1' means divide the clock by one.  0xffff divides the

	 * clock by 0xffff.  '0x0000' does not divide by zero, but wraps

	 * around and divides by 0x10000.  That is why prescale must be

 Set and enable the timer, reject an attempt to use a wdt as gpt */

/**

 * mpc52xx_gpt_start_timer - Set and enable the GPT timer

 * @gpt: Pointer to gpt private data structure

 * @period: period of timer in ns; max. ~130s @ 33MHz IPB clock

 * @continuous: set to 1 to make timer continuous free running

 *

 * An interrupt will be generated every time the timer fires

/**

 * mpc52xx_gpt_stop_timer - Stop a gpt

 * @gpt: Pointer to gpt private data structure

 *

 * Returns an error if attempting to stop a wdt

 reject the operation if the timer is used as watchdog (gpt 0 only) */

/**

 * mpc52xx_gpt_timer_period - Read the timer period

 * @gpt: Pointer to gpt private data structure

 *

 * Returns the timer period in ns

/***********************************************************************

 * Watchdog API for gpt0

 wdt_is_active stores whether or not the /dev/watchdog device is opened */

 wdt-capable gpt */

 low-level wdt functions */

 wdt misc device api */

 fall through and return the timeout */

		/* we need to round here as to avoid e.g. the following

		 * situation:

		 * - timeout requested is 1 second;

		 * - real timeout @33MHz is 999997090ns

		 * - the int divide by 10^9 will return 0.

 sanity check */

 /dev/watchdog can only be opened once */

 Set and activate the watchdog with 30 seconds timeout */

 note: releasing the wdt in NOWAYOUT-mode does not stop it */

 try to register the watchdog misc device */

 remember the gpt for the wdt operation */

 configure the wdt if the device tree contained a timeout */

  CONFIG_MPC5200_WDT	*/

/* ---------------------------------------------------------------------

 * of_platform bus binding code

 check if this device could be a watchdog */

 Depreciated compatible values; don't use for new dts files */

 Make sure GPIOs and IRQs get set up before anyone tries to use them */

 SPDX-License-Identifier: GPL-2.0

 these are defined in mpc52xx_sleep.S, and only used here */

 enable gpio */

 set as input */

 enable deep sleep interrupt */

 low/high level creates wakeup interrupt */

 master enable */

 lite5200 */

 efika */

 map the whole register space */

 we should map whole region including SRAM */

 these offsets are from mpc5200 users manual */

 Those will be handled by the */

 bestcomm driver soon */

 call board suspend code, if applicable */

 disable all interrupts in PIC */

 don't let DEC expire any time soon */

 save SRAM */

 copy low level suspend code to sram */

 disable all but SDRAM and bestcomm (SRAM) clocks */

 disable power management */

 enable sleep mode, disable others */

 save original, copy our irq handler, flush from dcache and invalidate icache */

 call low-level sleep code */

 restore original irq handler */

 restore old power mode */

 restore SRAM */

 reenable interrupts in PIC */

 call board resume code */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006-2007 PA Semi, Inc

 *

 * Common functions for DMA access on PA Semi PWRficient

 Bitmaps to handle allocation of channels */

/* pasemi_read_iob_reg - read IOB register

 * @reg: Register to read (offset into PCI CFG space)

/* pasemi_write_iob_reg - write IOB register

 * @reg: Register to write to (offset into PCI CFG space)

 * @val: Value to write

/* pasemi_read_mac_reg - read MAC register

 * @intf: MAC interface

 * @reg: Register to read (offset into PCI CFG space)

/* pasemi_write_mac_reg - write MAC register

 * @intf: MAC interface

 * @reg: Register to write to (offset into PCI CFG space)

 * @val: Value to write

/* pasemi_read_dma_reg - read DMA register

 * @reg: Register to read (offset into PCI CFG space)

/* pasemi_write_dma_reg - write DMA register

 * @reg: Register to write to (offset into PCI CFG space)

 * @val: Value to write

/* pasemi_dma_alloc_chan - Allocate a DMA channel

 * @type: Type of channel to allocate

 * @total_size: Total size of structure to allocate (to allow for more

 *		room behind the structure to be used by the client)

 * @offset: Offset in bytes from start of the total structure to the beginning

 *	    of struct pasemi_dmachan. Needed when struct pasemi_dmachan is

 *	    not the first member of the client structure.

 *

 * pasemi_dma_alloc_chan allocates a DMA channel for use by a client. The

 * type argument specifies whether it's a RX or TX channel, and in the case

 * of TX channels which group it needs to belong to (if any).

 *

 * Returns a pointer to the total structure allocated on success, NULL

 * on failure.

/* pasemi_dma_free_chan - Free a previously allocated channel

 * @chan: Channel to free

 *

 * Frees a previously allocated channel. It will also deallocate any

 * descriptor ring associated with the channel, if allocated.

/* pasemi_dma_alloc_ring - Allocate descriptor ring for a channel

 * @chan: Channel for which to allocate

 * @ring_size: Ring size in 64-bit (8-byte) words

 *

 * Allocate a descriptor ring for a channel. Returns 0 on success, errno

 * on failure. The passed in struct pasemi_dmachan is updated with the

 * virtual and DMA addresses of the ring.

/* pasemi_dma_free_ring - Free an allocated descriptor ring for a channel

 * @chan: Channel for which to free the descriptor ring

 *

 * Frees a previously allocated descriptor ring for a channel.

/* pasemi_dma_start_chan - Start a DMA channel

 * @chan: Channel to start

 * @cmdsta: Additional CCMDSTA/TCMDSTA bits to write

 *

 * Enables (starts) a DMA channel with optional additional arguments.

/* pasemi_dma_stop_chan - Stop a DMA channel

 * @chan: Channel to stop

 *

 * Stops (disables) a DMA channel. This is done by setting the ST bit in the

 * CMDSTA register and waiting on the ACT (active) bit to clear, then

 * finally disabling the whole channel.

 *

 * This function will only try for a short while for the channel to stop, if

 * it doesn't it will return failure.

 *

 * Returns 1 on success, 0 on failure.

/* pasemi_dma_alloc_buf - Allocate a buffer to use for DMA

 * @chan: Channel to allocate for

 * @size: Size of buffer in bytes

 * @handle: DMA handle

 *

 * Allocate a buffer to be used by the DMA engine for read/write,

 * similar to dma_alloc_coherent().

 *

 * Returns the virtual address of the buffer, or NULL in case of failure.

/* pasemi_dma_free_buf - Free a buffer used for DMA

 * @chan: Channel the buffer was allocated for

 * @size: Size of buffer in bytes

 * @handle: DMA handle

 *

 * Frees a previously allocated buffer.

/* pasemi_dma_alloc_flag - Allocate a flag (event) for channel synchronization

 *

 * Allocates a flag for use with channel synchronization (event descriptors).

 * Returns allocated flag (0-63), < 0 on error.

/* pasemi_dma_free_flag - Deallocates a flag (event)

 * @flag: Flag number to deallocate

 *

 * Frees up a flag so it can be reused for other purposes.

/* pasemi_dma_set_flag - Sets a flag (event) to 1

 * @flag: Flag number to set active

 *

 * Sets the flag provided to 1.

/* pasemi_dma_clear_flag - Sets a flag (event) to 0

 * @flag: Flag number to set inactive

 *

 * Sets the flag provided to 0.

/* pasemi_dma_alloc_fun - Allocate a function engine

 *

 * Allocates a function engine to use for crypto/checksum offload

 * Returns allocated engine (0-8), < 0 on error.

/* pasemi_dma_free_fun - Deallocates a function engine

 * @flag: Engine number to deallocate

 *

 * Frees up a function engine so it can be used for other purposes.

	/* This is hardcoded and ugly, but we have some firmware versions

	 * that don't provide the register space in the device tree. Luckily

	 * they are at well-known locations so we can just do the math here.

/* pasemi_dma_init - Initialize the PA Semi DMA library

 *

 * This function initializes the DMA library. It must be called before

 * any other function in the library.

 *

 * Returns 0 on success, errno on failure.

 Make sure we haven't already initialized */

 Fallback for old firmware */

 setup resource allocations for the different DMA sections */

 enable tx section */

 enable rx section */

 clear all status flags */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006-2007 PA Semi, Inc

 *

 * Authors: Kip Walker, PA Semi

 *	    Olof Johansson, PA Semi

 *

 * Maintained by: Olof Johansson <olof@lixom.net>

 *

 * Based on arch/powerpc/platforms/maple/setup.c

 SDC reset register, must be pre-mapped at reset time */

 Various error status registers, must be pre-mapped at MCE time */

 Need to put others cpu in hold loop so they're not sleeping */

 Set the PLD bit that makes the SB600 think the power button is being pressed */

 RTC platform device structure as is not in device tree */

 CONFIG_SMP */

 Setup SMP callback */

 Remap SDC register for doing reset */

 XXXOJN This should maybe come out of the device tree */

 Remap various SoC status registers for use by the MCE handler */

 Connect the SB600's legacy i8259 controller */

 Find address list in /platform-open-pic */

 The NMI/MCK source needs to be prio 15 */

 SRR1[62] is from MSR[62] if recoverable, so pass that back */

 Unfortunately needed for legacy firmwares */

 These are the proper entries, which newer firmware uses */

 Publish OF platform devices for SDC and other non-PCI devices */

/*

 * Called very early, MMU is off, device-tree isn't unflattened

	/*

	 * Check for the Nemo motherboard here, if we are running on one

	 * change the machine definition to fit

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006 PA Semi, Inc

 *

 * Maintained by: Olof Johansson <olof@lixom.net>

 Let's just return a fake date right now */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006-2007 PA Semi, Inc

 *

 * Maintained by: Olof Johansson <olof@lixom.net>

	/* If we were woken up from power savings, we need to return

	 * to the calling function, since nip is not saved across

	 * all modes.

		/*

		 * Handle these when interrupts get re-enabled and we take

		 * them as regular exceptions. We are in an NMI context

		 * and can't handle these here.

 do system reset */

 Set higher astate since we come out of power savings at 0 */

 everything handled */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005-2008, PA Semi, Inc

 *

 * Maintained by: Olof Johansson <olof@lixom.net>

 Configuration registers */

 Enable IOB address translation */

 Address decode configuration register */

 IOBCOM_AD_REG fields */

 Direct mapping settings */

 Translation window size / enable */

 Base of the 64 4-byte L1 registers */

 Register to invalidate TLB entries */

 The top two bits of the level 1 entry contains valid and type flags */

 For big page entries, the bottom two bits contains flags */

 For regular level 2 entries, top 2 bits contain valid and cache flags */

 invalidate tlb, can be optimized more */

 invalidate tlb, can be optimized more */

 it_size is in number of entries */

 Initialize the common IOMMU code */

	/* XXXOJN tune this to avoid IOB cache invals.

	 * Should probably be 8 (64 bytes)

	/* For non-LPAR environment, don't translate anything for the DMA

	 * engine. The exception to this is if the user has enabled

	 * CONFIG_PPC_PASEMI_IOMMU_DMA_FORCE at build time.

		/*

		 * Set the coherent DMA mask to prevent the iommu

		 * being used unnecessarily

 For 2G space, 8x64 pages (2^21 bytes) is max total l2 size */

 Allocate a spare page to map all invalid IOTLB pages. */

 Empty l1 is marked invalid */

 Empty l2 is mapped to dummy page */

 setup direct mapping of the L1 entries */

 Each L1 covers 32MB, i.e. 8K entries = 32K of ram */

 set 2GB translation window, based at 0 */

 Enable translation */

 These are called very early. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006-2007 PA Semi, Inc

 *

 * Author: Olof Johansson, PA Semi

 *

 * Maintained by: Olof Johansson <olof@lixom.net>

 *

 * Based on drivers/net/fs_enet/mii-bitbang.c.

 Utility to send the preamble, address, and register (common to read and write). */

 CFE uses a really long preamble (40 bits). We'll do the same. */

 send the start bit (01) and the read opcode (10) or write (10) */

 send the PHY address */

 send the register address */

 tri-state our MDIO I/O pin so we can read */

 read 16 bits of register data, MSB first */

 send the turnaround (10) */

 write 16 bits of register data, MSB first */

	/*

	 * Tri-state the MDIO line.

nothing here - dunno how to reset it*/

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2007, Olof Johansson, PA Semi

 *

 * Based on arch/powerpc/sysdev/mpic_u3msi.c:

 *

 * Copyright 2006, Segher Boessenkool, IBM Corporation.

 * Copyright 2006-2007, Michael Ellerman, IBM Corporation.

/* Allocate 16 interrupts per device, to give an alignment of 16,

 * since that's the size of the grouping w.r.t. affinity. If someone

 * needs more than 32 MSI's down the road we'll have to rethink this,

 * but it should be OK for now.

 A bit ugly, can we get this from the pci_dev somehow? */

		/* Allocate 16 interrupts for now, since that's the grouping for

		 * affinity. This can be changed later if it turns out 32 is too

		 * few MSIs for someone, but restrictions will apply to how the

		 * sources can be changed independently.

		/* Vector on MSI is really an offset, the hardware adds

		 * it to the value written at the magic address. So set

		 * it to 0 to remain sane.

		/* Likewise, the device writes [0...511] into the target

		 * register to generate MSI [512...1023]

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2007 PA Semi, Inc

 *

 * Parts based on arch/powerpc/sysdev/fsl_soc.c:

 *

 * 2006 (c) MontaVista Software, Inc.

/* The below is from fsl_soc.c.  It's copied because since there are no

 * official bus bindings at this time it doesn't make sense to share across

 * the platforms, even though they happen to be common.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006 PA Semi, Inc

 *

 * Authors: Kip Walker, PA Semi

 *	    Olof Johansson, PA Semi

 *

 * Maintained by: Olof Johansson <olof@lixom.net>

 *

 * Based on arch/powerpc/platforms/maple/pci.c

	/* Device 0 Function 0 is special: It's config space spans function 1 as

	 * well, so allow larger offset. It's really a two-function device but the

	 * second function does not probe.

	/* Workaround bug 5945: write 0 to a dummy register before reading,

	 * and write back what we read. We must read/write the full 32-bit

	 * contents so we need to shift and mask by hand.

			/*

			 * This is the SB600's bus, tell the PCI-e root port

			 * to allow non-zero devices to enumerate.

			/*

			 * Only scan device 0 on other busses

	/*

	 * Note: the caller has already checked that offset is

	 * suitably aligned and that len is 1, 2 or 4.

	/*

	 * Note: the caller has already checked that offset is

	 * suitably aligned and that len is 1, 2 or 4.

 Interpret the "ranges" property */

	/*

	 * Scan for an isa bridge. This is needed to find the SB600 on the nemo

	 * and does nothing on machines without one.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PPC4xx gpio driver

 *

 * Copyright (c) 2008 Harris Corporation

 * Copyright (c) 2008 Sascha Hauer <s.hauer@pengutronix.de>, Pengutronix

 * Copyright (c) MontaVista Software, Inc. 2008.

 *

 * Author: Steve Falco <sfalco@harris.com>

 Physical GPIO register layout */

/*

 * GPIO LIB API implementation for GPIOs

 *

 * There are a maximum of 32 gpios in each gpio controller.

 Disable open-drain function */

 Float the pin */

 Bits 0-15 use TSRL/OSRL, bits 16-31 use TSRH/OSRH */

 First set initial value */

 Disable open-drain function */

 Drive the pin */

 Bits 0-15 use TSRL, bits 16-31 use TSRH */

 try others anyway */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MSI support for PPC4xx SoCs using High Speed Transfer Assist (HSTA) for

 * generation of the interrupt.

 *

 * Copyright © 2013 Alistair Popple <alistair@popple.id.au> IBM Corporation

 The ioremapped HSTA MSI IO space */

 Physical address of HSTA MSI IO space */

 An array mapping offsets to hardware IRQs */

 Number of hwirqs supported */

 We don't support MSI-X */

		/*

		 * HSTA generates interrupts on writes to 128-bit aligned

		 * addresses.

 Data is not used by the HSTA. */

 Find the offset given the hwirq */

 entry->irq should always be in irq_map */

 Setup a mapping from irq offsets to hardware irq numbers */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Adding PCI-E MSI support for PPC4XX SoCs.

 *

 * Copyright (c) 2010, Applied Micro Circuits Corporation

 * Authors:	Tirumala R Marri <tmarri@apm.com>

 *		Feng Kan <fkan@apm.com>

 Setup msi address space */

HIGH addr */

 Low addr */

 Progam the Interrupt handler Termination addr registers */

 Program MSI Expected data and Mask bits */

 Get MSI ranges */

/*

 * PCI / PCI-X / PCI-Express support for 4xx parts

 *

 * Copyright 2007 Ben. Herrenschmidt <benh@kernel.crashing.org>, IBM Corp.

 *

 * Most PCI Express code is coming from Stefan Roese implementation for

 * arch/ppc in the Denx tree, slightly reworked by me.

 *

 * Copyright 2007 DENX Software Engineering, Stefan Roese <sr@denx.de>

 *

 * Some of that comes itself from a previous implementation for 440SPE only

 * by Roland Dreier:

 *

 * Copyright (c) 2005 Cisco Systems.  All rights reserved.

 * Roland Dreier <rolandd@cisco.com>

 *

 Catch both 440SPe variants, with and without RAID6 support */

	/* Hide the PCI host BARs from the kernel as their content doesn't

	 * fit well in the resource management

 Default */

 Get dma-ranges property */

 Walk it */

 We only care about memory */

		/* We currently only support memory at 0, and pci_addr

		 * within 32 bits space

 Check if not prefetchable */

 Use that */

 Beware of 32 bits resources */

 We only support one global DMA offset */

	/* Check that we can fit all of memory as we don't support

	 * DMA bounce buffers

 Check we are a power of 2 size and that base is a multiple of size*/

	/* Check that we are fully contained within 32 bits space if we are not

	 * running on a 460sx or 476fpe which have 64 bit bus addresses.

/*

 * 4xx PCI 2.x part

	/* Hack warning ! The "old" PCI 2.x cell only let us configure the low

	 * 32-bit of incoming PLB addresses. The top 4 bits of the 36-bit

	 * address are actually hard wired to a value that appears to depend

	 * on the specific SoC. For example, it's 0 on 440EP and 1 on 440EPx.

	 *

	 * The trick here is we just crop those top bits and ignore them when

	 * programming the chip. That means the device-tree has to be right

	 * for the specific part used (we don't print a warning if it's wrong

	 * but on the other hand, you'll crash quickly enough), but at least

	 * this code should work whatever the hard coded value is

	/* Note: Due to the above hack, the test below doesn't actually test

	 * if you address is above 4G, but it tests that address and

	 * (address + size) are both contained in the same 4G

 Setup outbound memory windows */

 we only care about memory windows */

 Configure the resource */

			/* If the resource PCI address is 0 then we have our

			 * ISA memory hole

 Handle ISA memory hole if not already covered */

 Calculate window size */

 RAM is always at 0 local for now */

 Map on PCI side */

 NYI */

 Check if device is enabled */

 Fetch config space registers address */

 Fetch host bridge internal registers address */

 Check if primary bridge */

 Get bus range if any */

 Map registers */

 Allocate the host controller data structure */

 Setup config space */

 Disable all windows */

 Parse outbound mapping resources */

 Parse inbound mapping resources */

 Configure outbound ranges POMs */

 Configure inbound ranges PIMs */

 We don't need the registers anymore */

/*

 * 4xx PCI-X part

 Calculate register values */

 Program register values */

 Setup outbound memory windows */

 we only care about memory windows */

 Configure the resource */

			/* If the resource PCI address is 0 then we have our

			 * ISA memory hole

 Handle ISA memory hole if not already covered */

 RAM is always at 0 */

 Calculate window size */

 Map on PCI side */

 Fetch config space registers address */

 Fetch host bridge internal registers address */

 Check if it supports large PIMs (440GX) */

 Check if we should enable MSIs inbound hole */

 Check if primary bridge */

 Get bus range if any */

 Map registers */

 Allocate the host controller data structure */

 Setup config space */

 Disable all windows */

 Parse outbound mapping resources */

 Parse inbound mapping resources */

 Configure outbound ranges POMs */

 Configure inbound ranges PIMs */

 We don't need the registers anymore */

/*

 * 4xx PCI-Express part

 *

 * We support 3 parts currently based on the compatible property:

 *

 * ibm,plb-pciex-440spe

 * ibm,plb-pciex-405ex

 * ibm,plb-pciex-460ex

 *

 * Anything else will be rejected for now as they are all subtly

 * different unfortunately.

 *

 Wait for reset to complete */

	/* Check for card presence detect if supported, if not, just wait for

	 * link unconditionally.

	 *

	 * note that we don't fail if there is no link, we just filter out

	 * config space accesses. That way, it will be easier to implement

	 * hotplug later on.

 Check various reset bits of the 440SPe PCIe core */

 SDR0_PEGPLLLCT1 reset */

		/*

		 * the PCIe core was probably already initialised

		 * by firmware - let's re-reset RCSSET regs

		 *

		 * -- Shouldn't we also re-reset the whole thing ? -- BenH

 SDR0_PExRCSSET rstgu */

 SDR0_PExRCSSET rstdl */

 SDR0_PExRCSSET rstpyn */

 SDR0_PExRCSSET hldplb */

 SDR0_PExRCSSET rdy */

 SDR0_PExRCSSET shutdown */

 Global PCIe core initializations for 440SPe core */

 Set PLL clock receiver to LVPECL */

 Shouldn't we do all the calibration stuff etc... here ? */

 De-assert reset of PCIe PLL, wait for lock */

 XXX Check what that value means... I hate magic */

	/*

	 * Set buffer allocations and then assert VRB and TXE.

 Report CRS to the operating system */

 Nothing to do, return 2 ports */

 Poll for PHY reset */

 XXX FIXME add timeout */

	/*

	 * Set buffer allocations and then assert VRB and TXE.

 Return the number of pcie port */

	/*

	 * Do a software reset on PCIe ports.

	 * This code is to fix the issue that pci drivers doesn't re-assign

	 * bus number for PCIE devices after Uboot

	 * scanned and configured all the buses (eg. PCIE NIC IntelPro/1000

	 * PT quad port, SAS LSI 1064E)

 Poll for PHY reset */

 HSS drive amplitude */

 HSS TX pre-emphasis */

 HSS TX calibration control */

 HSS TX slew control */

 Set HSS PRBS enabled */

 De-assert PLLRESET */

 Reset DL, UTL, GPL before configuration */

	/*

	 * If bifurcation is not enabled, u-boot would have disabled the

	 * third PCIe port

 Max 128 Bytes */

 Assert VRB and TXE - per datasheet turn off addr validation */

 CONFIG_44x */

 Nothing to do, return 2 ports */

 Assert the PE0_PHY reset */

 deassert the PE0_hotreset */

 poll for phy !reset */

 XXX FIXME add timeout */

 deassert the PE0_gpl_utl_reset */

	/*

	 * Only reset the PHY when no link is currently established.

	 * This is for the Atheros PCIe board which has problems to establish

	 * the link (again) after this PHY reset. All other currently tested

	 * PCIe boards don't show this problem.

	 * This has to be re-tested and fixed in a later release!

 guarded on */

	/*

	 * Set buffer allocations and then assert VRB and TXE.

 CONFIG_40x */

 CONFIG_476FPE */

 Check that the core has been initied and if not, do it */

 CONFIG_44x    */

 We map PCI Express configuration based on the reg property */

 XXX FIXME: Use size from reg property. For now, map 512M */

 We map UTL registers based on the reg property */

 XXX FIXME: Use size from reg property */

 Disable all other outbound windows */

 Init HW */

	/*

	 * Initialize mapping: disable all regions and configure

	 * CFG and REG regions based on resources in the device tree

	/*

	 * Map UTL

	/*

	 * Setup UTL registers --BenH.

	/*

	 * Check for VC0 active or PLL Locked and assert RDY.

 Endpoint can not generate upstream(remote) config cycles */

 Check we are within the mapped range */

 The root complex has only one device / function */

 The other side of the RC has only one device as well */

 Check if we have a link */

	/* Remove the casts when we finally remove the stupid volatile

	 * in struct pci_controller

	/*

	 * Reading from configuration space of non-existing device can

	 * generate transaction errors. For the read duration we suppress

	 * assertion of machine check exceptions to avoid those.

 Make sure no CRS is recorded */

 Check for CRS (440SPe rev B does that for us but heh ..) */

	/*

	 * Reading from configuration space of non-existing device can

	 * generate transaction errors. For the read duration we suppress

	 * assertion of machine check exceptions to avoid those.

 Calculate register values */

 Program register values */

Enabled and single region */

 Note that 3 here means enabled | IO space !!! */

 Setup outbound memory windows */

 we only care about memory windows */

 Configure the resource */

			/* If the resource PCI address is 0 then we have our

			 * ISA memory hole

 Handle ISA memory hole if not already covered */

	/* Configure IO, always 64K starting at 0. We hard wire it to 64K !

	 * Note also that it -has- to be region index 2 on this HW

		/* Currently we map a fixed 64MByte window to PLB address

		 * 0 (SDRAM). This should probably be configurable via a dts

		 * property.

 Calculate window size */

 Setup BAR0 */

 Disable BAR1 & BAR2 */

 Calculate window size */

		/* The setup of the split looks weird to me ... let's see

		 * if it works

 Enable inbound mapping */

 Enable I/O, Mem, and Busmaster cycles */

 Check if primary bridge */

 Get bus range if any */

 Allocate the host controller data structure */

	/* We stick the port number in "indirect_type" so the config space

	 * ops can retrieve the port data structure easily

 Get bus range */

	/* Because of how big mapping the config space is (1M per bus), we

	 * limit how many busses we support. In the long run, we could replace

	 * that with something akin to kmap_atomic instead. We set aside 1 bus

	 * for the host itself too.

 This is off by 1 */

		/* Only map the external config space in cfg_data for

		 * PCIe root-complexes. External space is 1M per bus

	/* Always map the host config space in cfg_addr.

	 * Internal space is 4K

 Setup config space */

		/*

		 * Set bus numbers on our root port

	/*

	 * OMRs are already reset, also disable PIMs

 Parse outbound mapping resources */

 Parse inbound mapping resources */

 Configure outbound ranges POMs */

 Configure inbound ranges PIMs */

	/* The root complex doesn't show up if we don't set some vendor

	 * and device IDs into it. The defaults below are the same bogus

	 * one that the initial code in arch/ppc had. This can be

	 * overwritten by setting the "vendor-id/device-id" properties

	 * in the pciex node.

 Get the (optional) vendor-/device-id from the device-tree */

 Enable Bus master, memory, and io space */

 Set Class Code to PCI-PCI bridge and Revision Id to 1 */

 Set Class Code to Processor/PPC */

	/* First, proceed to core initialization as we assume there's

	 * only one PCIe core in the system

 Get the port number from the device-tree */

	/*

	 * Check if device is enabled

	/* Check if device_type property is set to "pci" or "pci-endpoint".

	 * Resulting from this setup this PCIe port will be configured

	 * as root-complex or as endpoint.

 Fetch config space registers address */

 Fetch host bridge internal registers address */

 Map DCRs */

 Initialize the port specific registers */

 Setup the linux hose data structure */

 CONFIG_PPC4xx_PCI_EXPRESS */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/sysdev/uic.c

 *

 * IBM PowerPC 4xx Universal Interrupt Controller

 *

 * Copyright 2007 David Gibson <dwg@au1.ibm.com>, IBM Corporation.

 The remapper for this UIC */

 ack level-triggered interrupts here */

 	/* On the UIC, acking (i.e. clearing the SR bit)

	 * a level irq will have no effect if the interrupt

	 * is still asserted by the device, even if

	 * the interrupt is already masked. Therefore

	 * we only ack the egde interrupts here, while

	 * level interrupts are ack'ed after the actual

	 * isr call in the uic_unmask_irq()

	/* Despite the name, handle_level_irq() works for both level

 Set default irq type */

 spurious interrupt */

 FIXME: panic? */

 FIXME: panic? */

 Start with all interrupts disabled, level and non-critical */

 Clear any pending interrupts, in case the firmware left some */

 First locate and initialize the top-level UIC */

	BUG_ON(!np); /* uic_init_tree() assumes there's a UIC as the

 The scan again for cascaded UICs */

 Secondary UIC */

 FIXME: setup critical cascade?? */

 Return an interrupt vector or 0 if no interrupt is pending. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * IBM/AMCC PPC4xx SoC setup code

 *

 * Copyright 2008 DENX Software Engineering, Stefan Roese <sr@denx.de>

 *

 * L2 cache routines cloned from arch/ppc/syslib/ibm440gx_common.c which is:

 *   Eugene Surovegin <eugene.surovegin@zultys.com> or <ebs@ebshome.net>

 *   Copyright (c) 2003 - 2006 Zultys Technologies

/*

 * L2-cache

 Issue L2C diagnostic command */

 Read cache trapped address */

 Read tag trapped address */

 Clear parity errors */

 Get l2 cache size */

 Map DCRs */

 Get and map irq number from device tree */

 Install error handler */

 Disable SRAM */

 Enable L2_MODE without ICU/DCU */

 Hardware Clear Command */

 Clear Cache Parity and Tag Errors */

 Enable 64G snoop region starting at 0 */

 Enable ICU/DCU ports */

 Check for 460EX/GT special handling */

/*

 * Apply a system reset. Alternatively a board specific value may be

 * provided via the "reset-type" property in the cpu node.

		/*

		 * Check if property exists and if it is in range:

		 * 1 - PPC4xx core reset

		 * 2 - PPC4xx chip reset

		 * 3 - PPC4xx system reset (default)

 Just in case the reset doesn't work */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerPC 4xx Clock and Power Management

 *

 * Copyright (C) 2010, Applied Micro Circuits Corporation

 * Victor Gallardo (vgallardo@apm.com)

 *

 * Based on arch/powerpc/platforms/44x/idle.c:

 * Jerone Young <jyoung5@us.ibm.com>

 * Copyright 2008 IBM Corp.

 *

 * Based on arch/powerpc/sysdev/fsl_pmc.c:

 * Anton Vorontsov <avorontsov@ru.mvista.com>

 * Copyright 2009  MontaVista Software, Inc.

 *

 * See file CREDITS for list of people who contributed to this

 * project.

 default */

	/* CPM controller supports 3 different types of sleep interface

	 * known as class 1, 2 and 3. For class 1 units, they are

	 * unconditionally put to sleep when the corresponding CPM bit is

	 * set. For class 2 and 3 units this is not case; if they can be

	 * put to to sleep, they will. Here we do not verify, we just

	 * set them and expect them to eventually go off when they can.

 return old state, to restore later if needed */

 save off initial state */

 sync required when CPM0_ER[CPU] is set */

 set wait state MSR */

 return to initial state */

 update CPM_ER state */

 go to wait state so that CPM0_ER[CPU] can take effect */

 restore CPM_ER state */

 convert the last space to a newline */

 disable decrement interrupt */

 go to sleep state */

 restore decrement interrupt */

	/* All 4xx SoCs with a CPM controller have one of two

	 * different order for the CPM registers. Some have the

	 * CPM registers in the following order (ER,FR,SR). The

	 * others have them in the following order (SR,ER,FR).

 Now let's see what IPs to turn off for the following modes */

 If some IPs are unused let's turn them off now */

 Now let's export interfaces */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MPC8360E-RDK board file.

 *

 * Copyright (c) 2006  Freescale Semiconductor, Inc.

 * Copyright (c) 2007-2008  MontaVista Software, Inc.

 *

 * Author: Anton Vorontsov <avorontsov@ru.mvista.com>

/*

 * Called very early, MMU is off, device-tree isn't unflattened.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/platforms/83xx/mpc831x_rdb.c

 *

 * Description: MPC831x RDB board specific routines.

 * This file is based on mpc834x_sys.c

 * Author: Lo Wlison <r43300@freescale.com>

 *

 * Copyright (C) Freescale Semiconductor, Inc. 2006. All rights reserved.

/*

 * Setup the architecture

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Freescale 83xx USB SOC setup code

 *

 * Copyright (C) 2007 Freescale Semiconductor, Inc.

 * Author: Li Yang

 Read registers */

 Note: DR and MPH must use the same clock setting in SCCR */

 1:3 */

 1:3 */

 Write back */

 CONFIG_PPC_MPC834x */

 Map IMMR space for pin and clock settings */

 Configure clock */

 Configure pin mux for ULPI.  There is no pin mux for UTMI */

 Map USB SOC space */

 Using on-chip PHY */

 Set UTMI_PHY_EN and REFSEL */

 Using external UPLI PHY */

 Set PHY_CLK_SEL to ULPI */

 Set OTG_PORT */

 CONFIG_USB_OTG */

 CONFIG_PPC_MPC831x */

 Map IMMR space for pin and clock settings */

 Configure clock */

 Configure pin mux for ULPI/serial */

 CONFIG_PPC_MPC837x */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * misc setup functions for MPC83xx

 *

 * Maintainer: Kumar Gala <galak@kernel.crashing.org>

 map reset restart_reg_baseister space */

 enable software reset "RSTE" */

 set software hard reset */

 looking for fsl,pq2pro-pic which is asl compatible with fsl,ipic */

	/* Initialize the default interrupt mapping priorities,

	 * in case the boot rom changed something on us.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/platforms/83xx/mpc837x_rdb.c

 *

 * Copyright (C) 2007 Freescale Semiconductor, Inc. All rights reserved.

 *

 * MPC837x RDB board specific routines

	/*

	 * On RDB boards (in contrast to MDS) USBB pins are used for SD only,

	 * so we can safely mux them away from the USB block.

/* ************************************************************************

 *

 * Setup the architecture

 *

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2008-2011 DENX Software Engineering GmbH

 * Author: Heiko Schocher <hs@denx.de>

 *

 * Description:

 * Keymile 83xx platform specific routines.

 Revision field */

	/*

	 * handle mpc8360E Erratum QE_ENET10:

	 * RGMII AC values do not meet the specification

 Map Parallel I/O ports registers */

	/*

	 * set output delay adjustments to default values according

	 * table 5 in Errata Rev. 5, 9/2011:

	 *

	 * write 0b01 to UCC1 bits 18:19

	 * write 0b01 to UCC2 option 1 bits 4:5

	 * write 0b01 to UCC2 option 2 bits 16:17

	/*

	 * set output delay adjustments to default values according

	 * table 3-13 in Reference Manual Rev.3 05/2010:

	 *

	 * write 0b01 to UCC2 option 2 bits 16:17

	 * write 0b0101 to UCC1 bits 20:23

	 * write 0b0101 to UCC2 option 1 bits 24:27

		/*

		 * UCC2 option 1: write 0b1010 to bits 24:27

		 * at address IMMRBAR+0x14AC

		/*

		 * UCC1: write 0b11 to bits 18:19

		 * at address IMMRBAR+0x14A8

		/*

		 * UCC2 option 1: write 0b11 to bits 4:5

		 * at address IMMRBAR+0x14A8

		/*

		 * UCC2 option 2: write 0b11 to bits 16:17

		 * at address IMMRBAR+0x14AC

/* ************************************************************************

 *

 * Setup the architecture

 *

 Only apply this quirk when par_io is available */

 CONFIG_QUICC_ENGINE */

 list of the supported boards */

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/platforms/83xx/mpc832x_rdb.c

 *

 * Copyright (C) Freescale Semiconductor, Inc. 2007. All rights reserved.

 *

 * Description:

 * MPC832x RDB board specific routines.

 * This file is based on mpc832x_mds.c and mpc8313_rdb.c

 * Author: Michael Barkowski <michael.barkowski@freescale.com>

 SPI controller is either clocked from QE or SoC clock */

 SPI1 MOSI, I/O */

 SPI1 MISO, I/O */

 SPI1 CLK,  I/O */

 SPI1 SEL,  I   */

 !SD_CS,    O */

 SD_INSERT, I */

 SD_PROTECT,I */

	/*

	 * Don't bother with legacy stuff when device tree contains

	 * mmc-spi-slot node.

 CONFIG_QUICC_ENGINE */

/* ************************************************************************

 *

 * Setup the architecture

 *

 CONFIG_QUICC_ENGINE */

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/platforms/83xx/mpc834x_itx.c

 *

 * MPC834x ITX board specific routines

 *

 * Maintainer: Kumar Gala <galak@kernel.crashing.org>

/* ************************************************************************

 *

 * Setup the architecture

 *

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/platforms/83xx/mpc834x_mds.c

 *

 * MPC834x MDS board specific routines

 *

 * Maintainer: Kumar Gala <galak@kernel.crashing.org>

 Map BCSR area */

	/*

	 * if Processor Board is plugged into PIB board,

	 * force to use the PHY on Processor Board

/* ************************************************************************

 *

 * Setup the architecture

 *

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/platforms/83xx/asp834x.c

 *

 * Analogue & Micro ASP8347 board specific routines

 * clone of mpc834x_itx

 *

 * Copyright 2008 Codehermit

 *

 * Maintainer: Bryan O'Donoghue <bodonoghue@codhermit.ie>

/* ************************************************************************

 *

 * Setup the architecture

 *

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Power Management and GPIO expander driver for MPC8349E-mITX-compatible MCU

 *

 * Copyright (c) 2008  MontaVista Software, Inc.

 *

 * Author: Anton Vorontsov <avorontsov@ru.mvista.com>

/*

 * I don't have specifications for the MCU firmware, I found this register

 * and bits positions by the trial&error method.

 XXX: this is potentially racy, but there is no lock for pm_power_off */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2006 Freescale Semiconductor, Inc. All rights reserved.

 *

 * Author: Li Yang <LeoLi@freescale.com>

 *	   Yin Olivia <Hong-hua.Yin@freescale.com>

 *

 * Description:

 * MPC8360E MDS board specific routines.

 *

 * Changelog:

 * Jun 21, 2006	Initial version

/* ************************************************************************

 *

 * Setup the architecture

 *

 Map BCSR area */

 Must fixup Par IO before QE GPIO chips are registered. */

 USBOE  */

 USBTP  */

 USBTN  */

 USBRXD */

 USBRP  */

 USBRN  */

 CLK21  */

 CONFIG_QE_USB */

 Reset the Ethernet PHY */

 handle mpc8360ea rev.2.1 erratum 2: RGMII Timing */

			/*

			 * IMMR + 0x14A8[4:5] = 11 (clk delay for UCC 2)

			 * IMMR + 0x14A8[18:19] = 11 (clk delay for UCC 1)

			/*

			 * IMMR + 0x14AC[20:27] = 10101010

			 * (data delay for both UCC's)

 CONFIG_QUICC_ENGINE */

	/*

	 * Default is GMII (2), but we should set it to RGMII (0) if we use

	 * USB (Eth PHY is in RGMII mode anyway).

 1 - Disable, 0 - Enable			*/

 1 - Full, 0 - Low			*/

 1 - Host, 0 - Function			*/

 1 - gets VBUS, 0 - supplies VBUS 	*/

 CONFIG_QE_USB */

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2006 Freescale Semiconductor, Inc. All rights reserved.

 *

 * Description:

 * MPC832xE MDS board specific routines.

/* ************************************************************************

 *

 * Setup the architecture

 *

 Map BCSR area */

 Reset the Ethernet PHYs */

 CONFIG_QUICC_ENGINE */

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/platforms/83xx/mpc837x_mds.c

 *

 * Copyright (C) 2007 Freescale Semiconductor, Inc. All rights reserved.

 *

 * MPC837x MDS board specific routines

 Map BCSR area */

/* ************************************************************************

 *

 * Setup the architecture

 *

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-only

/*

 * MPC83xx suspend support

 *

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Copyright (c) 2006-2007 Freescale Semiconductor, Inc.

 Next state for power management */

 Current state for power management*/

 DDR SDRAM low power enable */

 System low power enable */

 All but PMCI are deep-sleep only */

 deep-sleep only */

 deep-sleep only */

	/* Don't go to sleep if there's a race where pci_pm_state changes

	 * between the agent thread checking it and the PM code disabling

	 * interrupts.

	/* Put the system into low-power mode and the RAM

	 * into self-refresh mode once the core goes to

	 * sleep.

	/* If it has deep sleep (i.e. it's an 831x or compatible),

	 * disable power to the core upon entering sleep mode.  This will

	 * require going through the boot firmware upon a wakeup event.

		/* With a preemptible kernel (or SMP), this could race with

		 * a userspace-driven suspend request.  It's probably best

		 * to avoid mixing the two with such a configuration (or

		 * else fix it by adding a mutex to state_store that we can

		 * synchronize with).

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/platforms/83xx/mpc830x_rdb.c

 *

 * Description: MPC830x RDB board specific routines.

 * This file is based on mpc831x_rdb.c

 *

 * Copyright (C) Freescale Semiconductor, Inc. 2009. All rights reserved.

 * Copyright (C) 2010. Ilya Yanok, Emcraft Systems, yanok@emcraft.com

/*

 * Setup the architecture

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2009 Extreme Engineering Solutions, Inc.

 *

 * X-ES board-specific functionality

 *

 * Based on mpc85xx_ds code from Freescale Semiconductor, Inc.

 *

 * Author: Nate Case <ncase@xes-inc.com>

 A few bit definitions needed for fixups on some boards */

 L2 enable */

 L2 flash invalidate */

 L2 SRAM size (R/O) */

	/*

	 * xMon may have enabled part of L2 as SRAM, so we need to set it

	 * up for all cache mode just to be safe.

		/*

		 * Assume L2 SRAM is used fully for cache, so set

		 * L2BLKSZ (bits 4:5) to match L2SIZ (bits 2:3).

	/*

	 * Legacy xMon firmware on some X-ES boards does not enable L2

	 * as cache.  We must ensure that they get enabled here.

 Only MPC8548, MPC8540, and MPC8560 boards are affected */

/*

 * Setup the architecture

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * P1010RDB Board Setup

 *

 * Copyright 2011 Freescale Semiconductor Inc.

/*

 * Setup the architecture

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Based on MPC8560 ADS and arch/ppc stx_gp3 ports

 *

 * Maintained by Kumar Gala (see MAINTAINERS for contact information)

 *

 * Copyright 2008 Freescale Semiconductor Inc.

 *

 * Dan Malek <dan@embeddededge.com>

 * Copyright 2004 Embedded Edge, LLC

 *

 * Copied from mpc8560_ads.c

 * Copyright 2002, 2003 Motorola Inc.

 *

 * Ported to 2.6, Matt Porter <mporter@kernel.crashing.org>

 * Copyright 2004-2005 MontaVista Software, Inc.

 CONFIG_CPM2 */

/*

 * Setup the architecture

 Display cpu Pll setting */

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MPC85xx DS Board Setup

 *

 * Author Xianghua Xiao (x.xiao@freescale.com)

 * Roy Zang <tie-fei.zang@freescale.com>

 * 	- Add PCI/PCI Exprees support

 * Copyright 2007 Freescale Semiconductor Inc.

 CONFIG_PPC_I8259 */

 Initialize the i8259 controller */

 CONFIG_PPC_I8259 */

 CONFIG_PCI */

 See if we have a ULI under the primary */

/*

 * Setup the architecture

/*

 * Called very early, device-tree isn't unflattened

/*

 * Called very early, device-tree isn't unflattened

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Based on MPC8560 ADS and arch/ppc tqm85xx ports

 *

 * Maintained by Kumar Gala (see MAINTAINERS for contact information)

 *

 * Copyright 2008 Freescale Semiconductor Inc.

 *

 * Copyright (c) 2005-2006 DENX Software Engineering

 * Stefan Roese <sr@denx.de>

 *

 * Based on original work by

 * 	Kumar Gala <kumar.gala@freescale.com>

 *      Copyright 2004 Freescale Semiconductor Inc.

 CONFIG_CPM2 */

/*

 * Setup the architecture

 Display cpu Pll setting */

 Do not do the fixup on other platforms! */

	/*

	 * Enable P2CCLK bit in system control register

	 * to enable CLOCK output to power chip

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MPC85xx RDB Board Setup

 *

 * Copyright 2009,2012-2013 Freescale Semiconductor Inc.

/*

 * Setup the architecture

			/* P1025 has pins muxed for QE and other functions. To

			* enable QE UEC mode, we need to set bit QE0 for UCC1

			* in Eth mode, QE0 and QE3 for UCC5 in Eth mode, QE9

			* and QE12 for QE MII management singals in PMUXCR

			* register.

 CONFIG_QUICC_ENGINE */

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright (C) 2008 Ilya Yanok, Emcraft Systems

/*

 * The FPGA supports 9 interrupt sources, which can be routed to 3

 * interrupt request lines of the MPIC. The line to be used can be

 * specified through the third cell of FDT property  "interrupts".

/*

 * Interrupt routing and type table

 *

 * IRQ_TYPE_NONE means the interrupt type is configurable,

 * otherwise it's fixed to the specified value.

 Check irq line routed to the MPIC */

	/*

	 * See if we actually have an interrupt, call generic handling code if

	 * we do.

 All interrupts are LEVEL sensitive */

 type is configurable */

 type is fixed */

 Use specified interrupt routing */

 Setup an irq_domain structure */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MPC8536 DS Board Setup

 *

 * Copyright 2008 Freescale Semiconductor, Inc.

/*

 * Setup the architecture

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2008 Emcraft Systems

 * Sergei Poselenov <sposelenov@emcraft.com>

 *

 * Based on MPC8560 ADS and arch/ppc tqm85xx ports

 *

 * Maintained by Kumar Gala (see MAINTAINERS for contact information)

 *

 * Copyright 2008 Freescale Semiconductor Inc.

 *

 * Copyright (c) 2005-2006 DENX Software Engineering

 * Stefan Roese <sr@denx.de>

 *

 * Based on original work by

 * 	Kumar Gala <kumar.gala@freescale.com>

 *      Copyright 2004 Freescale Semiconductor Inc.

/*

 * Setup the architecture

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Paravirt target for a generic QEMU e500 machine

 *

 * This is intended to be a flexible device-tree-driven platform, not fixed

 * to a particular piece of hardware or a particular spec of virtual hardware,

 * beyond the assumption of an e500-family CPU.  Some things are still hardcoded

 * here, such as MPIC, but this is a limitation of the current code rather than

 * an interface contract with QEMU.

 *

 * Copyright 2012 Freescale Semiconductor Inc.

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2006-2010, 2012-2013 Freescale Semiconductor, Inc.

 * All rights reserved.

 *

 * Author: Andy Fleming <afleming@freescale.com>

 *

 * Based on 83xx/mpc8360e_pb.c by:

 *	   Li Yang <LeoLi@freescale.com>

 *	   Yin Olivia <Hong-hua.Yin@freescale.com>

 *

 * Description:

 * MPC85xx MDS board specific routines.

 Workaround for the 125 CLK Toggle */

 Errata */

 Disable automatic MDI/MDIX selection */

/* ************************************************************************

 *

 * Setup the architecture

 *

 Map BCSR area */

 Turn off UCC1 & UCC2 */

 Mode is RGMII, all bits clear */

 Turn UCC1 & UCC2 on */

		/*

		 * U-Boot mangles interrupt polarity for Marvell PHYs,

		 * so reset built-in and UEM Marvell PHYs, this puts

		 * the PHYs into their normal state.

 Reset Micrel PHY */

			/* P1021 has pins muxed for QE and other functions. To

			 * enable QE UEC mode, we need to set bit QE0 for UCC1

			 * in Eth mode, QE0 and QE3 for UCC5 in Eth mode, QE9

			 * and QE12 for QE MII management signals in PMUXCR

			 * register.

 CONFIG_QUICC_ENGINE */

 Register a workaround for errata */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * BSC913xQDS Board Setup

 *

 * Author:

 *   Harninder Rai <harninder.rai@freescale.com>

 *   Priyanka Jain <Priyanka.Jain@freescale.com>

 *

 * Copyright 2014 Freescale Semiconductor Inc.

/*

 * Setup the architecture

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * C293PCIE Board Setup

 *

 * Copyright 2013 Freescale Semiconductor Inc.

/*

 * Setup the architecture

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Servergy CTS-1000 Setup

 *

 * Maintained by Ben Collins <ben.c@servergy.com>

 *

 * Copyright 2012 by Servergy, Inc.

 Likely wont return */

 Probably wont return */

/* This IRQ means someone pressed the power button and it is waiting for us

 If there's no matching child, this isn't really an error */

	/* Technically we could just read the first one, but punish

 Get the gpio number relative to the dynamic base. */

 Now get the IRQ which tells us when the power button is hit */

 Register our halt function */

	/* We match on the gpio bus itself and scan the children since they

	 * wont be matched against us. We know the bus wont match until it

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ppa8548 setup and early boot code.

 *

 * Copyright 2009 Prodrive B.V..

 *

 * By Stef van Os (see MAINTAINERS for contact information)

 *

 * Based on the SBC8548 support - Copyright 2007 Wind River Systems Inc.

 * Based on the MPC8548CDS support - Copyright 2005 Freescale Inc.

/*

 * Setup the architecture

 Display cpu Pll setting */

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MPC85xx setup and early boot code plus other random bits.

 *

 * Maintained by Kumar Gala (see MAINTAINERS for contact information)

 *

 * Copyright 2005 Freescale Semiconductor Inc.

/*

 * Setup the architecture

 SCC1 */

 SCC2 */

 FCC2 */

 CLK14 */

 CLK13 */

 FCC3 */

 CLK16 */

 CLK15 */

 Display cpu Pll setting */

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MPC85xx PM operators

 *

 * Copyright 2015 Freescale Semiconductor Inc.

 Enter NAP mode. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * BSC913xRDB Board Setup

 *

 * Author: Priyanka Jain <Priyanka.Jain@freescale.com>

 *

 * Copyright 2011-2012 Freescale Semiconductor Inc.

/*

 * Setup the architecture

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Author: Andy Fleming <afleming@freescale.com>

 * 	   Kumar Gala <galak@kernel.crashing.org>

 *

 * Copyright 2006-2008, 2011-2012, 2015 Freescale Semiconductor Inc.

	/*

	 * e5500/e6500 have a workaround for erratum A-006958 in place

	 * that will reread the timebase until TBL is non-zero.

	 * That would be a bad thing when the timebase is frozen.

	 *

	 * Thus, we read it manually, and instead of checking that

	 * TBL is non-zero, we ensure that TB does not change.  We don't

	 * do that for the main mftb implementation, because it requires

	 * a scratch register

 mask all irqs to prevent cpu wakeup */

/*

 * To keep it compatible with old boot program which uses

 * cache-inhibit spin table, we need to flush the cache

 * before accessing spin table to invalidate any staled data.

 * We also need to flush the cache after writing to spin

 * table to push data out.

	/*

	 * A secondary core could be in a spinloop in the bootpage

	 * (0xfffff000), somewhere in highmem, or somewhere in lowmem.

	 * The bootpage and highmem can be accessed via ioremap(), but

	 * we need to directly access the spinloop if its in lowmem.

 Map the spin table */

 if cpu is not spinning, reset it */

		/*

		 * We don't set the BPTR register here since it already points

		 * to the boot page properly.

		/*

		 * wait until core is ready...

		 * We need to invalidate the stale data, in case the boot

		 * loader uses a cache-inhibited spin table.

	/*

	 * We need also to write addr_h to spin table for systems

	 * in which their physical memory start address was configured

	 * to above 4G, otherwise the secondary core can not get

	 * correct entry to start from.

		/*

		 * If either thread in the core is online, use it to start

		 * the other.

		/*

		 * If getting here, it means both threads in the core are

		 * offline. So start the primary thread, then it will start

		 * the thread specified in booting_thread_hwid, the one

		 * corresponding to nr.

		/*

		 * If one core has only one thread, set booting_thread_hwid to

		 * an invalid value.

 loop forever */

		/*

		 * We enter the crash kernel on whatever cpu crashed,

		 * even if it's a secondary thread.  If that's the case,

		 * disable the corresponding primary thread.

 CONFIG_KEXEC_CORE */

		/*

		 * If left NULL, .message_pass defaults to

		 * smp_muxed_ipi_message_pass

 Assign a value to qoriq_pm_ops on PPC_E500MC */

 Assign a value to qoriq_pm_ops on !PPC_E500MC */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2010-2011, 2013 Freescale Semiconductor, Inc.

 *

 * Author: Michael Johnston <michael.johnston@freescale.com>

 *

 * Description:

 * TWR-P102x Board Setup

/* ************************************************************************

 *

 * Setup the architecture

 *

			/* P1025 has pins muxed for QE and other functions. To

			 * enable QE UEC mode, we need to set bit QE0 for UCC1

			 * in Eth mode, QE0 and QE3 for UCC5 in Eth mode, QE9

			 * and QE12 for QE MII management signals in PMUXCR

			 * register.

			/* On P1025TWR board, the UCC7 acted as UART port.

			 * However, The UCC7's CTS pin is low level in default,

			 * it will impact the transmission in full duplex

			 * communication. So disable the Flow control pin PA18.

			 * The UCC7 UART just can use RXD and TXD pins.

			/* Drive PB29 to CPLD low - CPLD will then change

 CONFIG_QUICC_ENGINE */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Corenet based SoC DS Setup

 *

 * Maintained by Kumar Gala (see MAINTAINERS for contact information)

 *

 * Copyright 2009-2011 Freescale Semiconductor Inc.

/*

 * Setup the architecture

 The following two are for the Freescale hypervisor */

/*

 * Called very early, device-tree isn't unflattened

 Check if we're running under the Freescale hypervisor */

			/*

			 * Disable the timebase sync operations because we

			 * can't write to the timebase registers under the

			 * hypervisor.

/*

 * Core reset may cause issues if using the proxy mode of MPIC.

 * So, use the mixed mode of MPIC if enabling CPU hotplug.

 *

 * Likewise, problems have been seen with kexec when coreint is enabled.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2010-2011, 2013 Freescale Semiconductor, Inc.

 *

 * Author: Roy Zang <tie-fei.zang@freescale.com>

 *

 * Description:

 * P1023 RDB Board Setup

/* ************************************************************************

 *

 * Setup the architecture

 *

 Map BCSR area */

/*

 * Note: Accessing exclusively i2c devices.

 *

 * The i2c controller selects initially ID EEPROM in the u-boot;

 * but if menu configuration selects RTC support in the kernel,

 * the i2c controller switches to select RTC chip in the kernel.

 Enable RTC chip on the segment #2 of i2c */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * T1042 platform DIU operation

 *

 * Copyright 2014 Freescale Semiconductor Inc.

DIU Pixel ClockCR offset in scfg*/

 DIU Pixel Clock bits of the PIXCLKCR */

 Some CPLD register definitions */

/**

 * t1042rdb_set_monitor_port: switch the output to a different monitor port

		/* Enable the DVI(HDMI) port, disable the DFP and

		 * the backlight

		/*

		 * LVDS also needs backlight enabled, otherwise the display

		 * will be blank.

 Enable the DFP port, disable the DVI*/

/**

 * t1042rdb_set_pixel_clock: program the DIU's clock

 * @pixclock: pixel clock in ps (pico seconds)

 Convert pixclock into frequency */

	/*

	 * 'pxclk' is the ratio of the platform clock to the pixel clock.

	 * This number is programmed into the PIXCLKCR register, and the valid

	 * range of values is 2-255.

 Disable the pixel clock, and set it to non-inverted and no delay */

 Enable the clock and set the pxclk */

/**

 * t1042rdb_valid_monitor_port: set the monitor port for sysfs

 Dual-link LVDS is not supported */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MPC85xx setup and early boot code plus other random bits.

 *

 * Maintained by Kumar Gala (see MAINTAINERS for contact information)

 *

 * Copyright 2005, 2011-2012 Freescale Semiconductor Inc.

/*

 * The CDS board contains an FPGA/CPLD called "Cadmus", which collects

 * various logic and performs system control functions.

 * Here is the FPGA/CPLD register map.

 Board version */

 General control/status */

 Reset control */

 High speed clock */

 High speed clock extended */

 LED data */

 PCI control/status */

 DMA control */

 Total 256 bytes */

 We explicitly do not go past the Tundra 320 Bridge */

 Use the VIA Super Southbridge to force a PCI reset */

 Flush the outbound PCI write queues */

		/*

		 *  At this point, the hardware reset should have triggered.

		 *  However, if it doesn't work for some mysterious reason,

		 *  just fall through to the default reset below.

	/*

	 *  If we can't find the VIA chip (maybe the P2P bridge is

	 *  disabled) or the VIA chip reset didn't work, just return

	 *  and let default reset sequence happen.

			/*

			 * U-Boot does not set the enable bits

			 * for the IDE device. Force them on here.

 IDE: Chip Enable Bits */

			/*

			 * Since only primary interface works, force the

			 * IDE function to standard primary IDE interrupt

			 * w/ 8259 offset

		/*

		 * Force legacy USB interrupt routing

		/* There are two USB controllers.

		 * Identify them by functon number

	/* Make it an error to skip the fake bridge

/*

 * Fix Tsi310 PCI-X bridge resource.

 * Force the bridge to open a window from 0x0000-0x1fff in PCI I/O space.

 * This allows legacy I/O(i8259, etc) on the VIA southbridge to be accessed.

 handle an interrupt from the 8259 */

 check for any interrupts from the shared IRQ line */

 PPC_I8259 */

 CONFIG_PCI */

 Initialize the i8259 controller */

	/*

	 *  Hook the interrupt to make sure desc->action is never NULL.

	 *  This is required to ensure that the interrupt does not get

	 *  disabled when the last user of the shared IRQ line frees their

	 *  interrupt.

 Success. Connect our low-level cascade handler. */

 CONFIG_PPC_I8259 */

	/*

	 * MPC85xx_CDS has ISA bridge but unfortunately there is no

	 * isa node in device tree. We now looking for i8259 node as

	 * a workaround for such a broken device tree. This routine

	 * is for complying to all device trees.

/*

 * Setup the architecture

 Display cpu Pll setting */

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * GE IMP3A Board Setup

 *

 * Author Martyn Welch <martyn.welch@ge.com>

 *

 * Copyright 2010 GE Intelligent Platforms Embedded Systems, Inc.

 *

 * Based on: mpc85xx_ds.c (MPC85xx DS Board Setup)

 * Copyright 2007 Freescale Semiconductor Inc.

	/*

	 * There is a simple interrupt handler in the main FPGA, this needs

	 * to be cascaded into the MPIC

/*

 * Setup the architecture

 Remap basic board registers */

 Return the PCB revision */

 Return the board (software) revision */

 Return the FPGA revision */

 Return compactPCI Geographical Address */

 Return compactPCI System Controller Status */

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Routines common to most mpc85xx-based boards.

 So that the DMA channel nodes can be probed individually: */

 For the PMC driver */

 Probably unnecessary? */

 For all PCI controllers */

 Setup CPM2 PIC */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Board setup routines for the Emerson/Artesyn MVME2500

 *

 * Copyright 2014 Elettra-Sincrotrone Trieste S.C.p.A.

 *

 * Based on earlier code by:

 *

 *	Xianghua Xiao (x.xiao@freescale.com)

 *	Tom Armistead (tom.armistead@emerson.com)

 *	Copyright 2012 Emerson

 *

 * Author Alessio Igor Bogani <alessio.bogani@elettra.eu>

/*

 * Setup the architecture

/*

 * Called very early, device-tree isn't unflattened

/*

 * P1022DS board specific routines

 *

 * Authors: Travis Wheatley <travis.wheatley@freescale.com>

 *          Dave Liu <daveliu@freescale.com>

 *          Timur Tabi <timur@freescale.com>

 *

 * Copyright 2010 Freescale Semiconductor, Inc.

 *

 * This file is taken from the Freescale P1022DS BSP, with modifications:

 * 2) No AMP support

 * 3) No PCI endpoint support

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2.  This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

/*

 * Board-specific initialization of the DIU.  This code should probably be

 * executed when the DIU is opened, rather than in arch code, but the DIU

 * driver does not have a mechanism for this (yet).

 *

 * This is especially problematic on the P1022DS because the local bus (eLBC)

 * and the DIU video signals share the same pins, which means that enabling the

 * DIU will disable access to NOR flash.

 DIU Pixel Clock bits of the CLKDVDR Global Utilities register */

 Some ngPIXIS register definitions */

/*

 * DIU Area Descriptor

 *

 * Note that we need to byte-swap the value before it's written to the AD

 * register.  So even though the registers don't look like they're in the same

 * bit positions as they are on the MPC8610, the same value is written to the

 * AD register on the MPC8610 and on the P1022.

/*

 * Map a BRx value to a physical address

 *

 * The localbus BRx registers only store the lower 32 bits of the address.  To

 * obtain the upper four bits, we need to scan the LAW table.  The entry which

 * maps to the localbus will contain the upper four bits.

	/*

	 * If we only have 32-bit addressing, then the BRx address *is* the

	 * physical address.

 Extract the upper four bits */

/**

 * p1022ds_set_monitor_port: switch the output to a different monitor port

 Map the global utilities registers. */

	/*

	 * Indirect mode requires both BR0 and BR1 to be set to "GPCM",

	 * otherwise writes to these addresses won't actually appear on the

	 * local bus, and so the PIXIS won't see them.

	 *

	 * In FCM mode, writes go to the NAND controller, which does not pass

	 * them to the localbus directly.  So we force BR0 and BR1 into GPCM

	 * mode, since we don't care about what's behind the localbus any

	 * more.

 Make sure CS0 and CS1 are programmed */

	/*

	 * Use the existing BRx/ORx values if it's already GPCM. Otherwise,

	 * force the values to simple 32KB GPCM windows with the most

	 * conservative timing.

 Make sure we're in indirect mode first. */

 Enable indirect PIXIS mode.  */

 Switch the board mux to the DIU */

 BRDCFG0 */

 Set the chip mux to DIU mode. */

 Enable the DVI port, disable the DFP and the backlight */

		/*

		 * LVDS also needs backlight enabled, otherwise the display

		 * will be blank.

 Enable the DFP port, disable the DVI and the backlight */

/**

 * p1022ds_set_pixel_clock: program the DIU's clock

 *

 * @pixclock: the wavelength, in picoseconds, of the clock

 Map the global utilities registers. */

 Convert pixclock from a wavelength to a frequency */

	/*

	 * 'pxclk' is the ratio of the platform clock to the pixel clock.

	 * This number is programmed into the CLKDVDR register, and the valid

	 * range of values is 2-255.

 Disable the pixel clock, and set it to non-inverted and no delay */

 Enable the clock and set the pxclk */

/**

 * p1022ds_valid_monitor_port: set the monitor port for sysfs

 Dual-link LVDS is not supported */

 TRUE if there is a "video=fslfb" command-line parameter. */

/*

 * Search for a "video=fslfb" command-line parameter, and set 'fslfb' to

 * true if we find it.

 *

 * We need to use early_param() instead of __setup() because the normal

 * __setup() gets called to late.  However, early_param() gets called very

 * early, before the device tree is unflattened, so all we can do now is set a

 * global variable.  Later on, p1022_ds_setup_arch() will use that variable

 * to determine if we need to update the device tree.

/*

 * Setup the architecture

	/*

	 * Disable the NOR and NAND flash nodes if there is video=fslfb...

	 * command-line parameter.  When the DIU is active, the localbus is

	 * unavailable, so we have to disable these nodes before the MTD

	 * driver loads.

				/*

				 * of_update_property() is called before

				 * kmalloc() is available, so the 'new' object

				 * should be allocated in the global area.

				 * The easiest way is to do that is to

				 * allocate one static local variable for each

				 * call to this function.

/*

 * Called very early, device-tree isn't unflattened

/*

 * Board setup routines for the Emerson KSI8560

 *

 * Author: Alexandr Smirnov <asmirnov@ru.mvista.com>

 *

 * Based on mpc85xx_ads.c maintained by Kumar Gala

 *

 * 2008 (c) MontaVista, Software, Inc.  This file is licensed under

 * the terms of the GNU General Public License version 2.  This program

 * is licensed "as is" without any warranty of any kind, whether express

 * or implied.

 *

 Hardware Version Register */

 PLD Version Register */

 Reset Command Register 1 */

 CPU Hard Reset */

/*

 * Setup I/O ports

 SCC1 */

 SCC2 */

 FCC1 */

 CLK9 */

 CLK10 */

/*

 * Setup the architecture

 Display cpu Pll setting */

/*

 * Called very early, device-tree isn't unflattened

/*

 * P1022 RDK board specific routines

 *

 * Copyright 2012 Freescale Semiconductor, Inc.

 *

 * Author: Timur Tabi <timur@freescale.com>

 *

 * Based on p1022_ds.c

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2.  This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

 DIU Pixel Clock bits of the CLKDVDR Global Utilities register */

/**

 * p1022rdk_set_pixel_clock: program the DIU's clock

 *

 * @pixclock: the wavelength, in picoseconds, of the clock

 Map the global utilities registers. */

 Convert pixclock from a wavelength to a frequency */

	/*

	 * 'pxclk' is the ratio of the platform clock to the pixel clock.

	 * This number is programmed into the CLKDVDR register, and the valid

	 * range of values is 2-255.

 Disable the pixel clock, and set it to non-inverted and no delay */

 Enable the clock and set the pxclk */

/**

 * p1022rdk_valid_monitor_port: set the monitor port for sysfs

/*

 * Setup the architecture

/*

 * Called very early, device-tree isn't unflattened

 only external IRQ senses are programmable */

	/* For MPC8xx, read the SIVEC register and shift the bits down

	 * to get the irq number.

 Set default irq handle */

/*

 * Platform setup for the Embedded Planet EP88xC board

 *

 * Author: Scott Wood <scottwood@freescale.com>

 * Copyright 2007 Freescale Semiconductor, Inc.

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2. This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

 SMC1 */

 RX */

 TX */

 SCC2 */

 TX */

 RX */

 CD */

 CTS */

 RTS */

 MII1 */

 MII2 */

 USB */

 CLK2 */

 USBOE */

 USBRXD */

 USBTXN */

 USBTXP */

 USBRXN */

 USBRXP */

 Misc */

 BRGO2 */

 BRGO1 */

 USB */

 Publish the QE devices */

/*

 * Platform setup for the Freescale mpc885ads board

 *

 * Vitaly Bordug <vbordug@ru.mvista.com>

 *

 * Copyright 2005 MontaVista Software Inc.

 *

 * Heavily modified by Scott Wood <scottwood@freescale.com>

 * Copyright 2007 Freescale Semiconductor, Inc.

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2. This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

 SMC1 */

 RX */

 TX */

 SMC2 */

 RX */

 TX */

 SCC3 */

 RX */

 TX */

 RENA */

 CLSN */

 TENA */

 CLK5 */

 CLK6 */

 MII1 */

 MII2 */

 I2C */

 Set FEC1 and FEC2 to MII mode */

	/* The SCC3 enet registers overlap the SMC1 registers, so

	 * one of the two must be removed from the device tree.

 Publish the QE devices */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 1995  Linus Torvalds

 *  Adapted from 'alpha' version by Gary Thomas

 *  Modified by Cort Dougan (cort@cs.nmt.edu)

 *  Modified for MBX using prep/chrp/pmac functions by Dan (dmalek@jlc.net)

 *  Further modified for generic 8xx by Dan.

/*

 * bootup setup stuff..

 A place holder for time base interrupts, if they are ever enabled. */

 per-board overridable init_internal_rtc() function. */

 Disable the RTC one second and alarm interrupts. */

 Enable the RTC */

 The cpu node should have timebase and clock frequency properties */

/* The decrementer counts at the system (internal) clock frequency divided by

 * sixteen, or external oscillator divided by four.  We force the processor

 * to use system clock divided by sixteen.

 Unlock the SCCR. */

 Force all 8xx processors to use divide by 16 processor clock. */

	/* Processor frequency is MHz.

	/* Perform some more timer/timebase initialization.  This used

	 * to be done elsewhere, but other changes caused it to get

	 * called more than once....that is a bad thing.

	 *

	 * First, unlock all of the registers we are going to modify.

	 * To protect them from corruption during power down, registers

	 * that are maintained by keep alive power are "locked".  To

	 * modify these registers we have to write the key value to

	 * the key location associated with the register.

	 * Some boards power up with these unlocked, while others

	 * are locked.  Writing anything (including the unlock code?)

	 * to the unlocked registers will lock them again.  So, here

	 * we guarantee the registers are locked, then we unlock them

	 * for our use.

	/* Enabling the decrementer also enables the timebase interrupts

	 * (or from the other point of view, to get decrementer interrupts

	 * we have to enable the timebase).  The decrementer interrupt

	 * is wired into the vector table, nothing to do here for that.

/* The RTC on the MPC8xx is an internal register.

 * We want to protect this during power down, so we need to unlock,

 * modify, and re-lock.

 Get time from the RTC. */

	/* Clear the ME bit in MSR to cause checkstop on machine check

/* Initialize the internal interrupt controllers.  The number of

 * interrupts supported can vary with the processor type, and the

 * 82xx family can have up to 64.

 * External interrupts can be either edge or level triggered, and

 * need to be initialized by the appropriate driver.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

	/* the qspan pci read routines can cause machine checks -- Cort

	 *

	 * yuck !!! that totally needs to go away ! There are better ways

	 * to deal with that than having a wart in the mcheck handler.

	 * -- BenH

 SPDX-License-Identifier: GPL-2.0

/*

 * General Purpose functions for the global management of the

 * Communication Processor Module.

 * Copyright (c) 1997 Dan error_act (dmalek@jlc.net)

 *

 * In addition to the individual control of the communication

 * channels, there are a few functions that globally affect the

 * communication processor.

 *

 * Buffer descriptors must be allocated from the dual ported memory

 * space.  The allocator for that is here.  When the communication

 * process is reset, we reclaim the memory available.  There is

 * currently no deallocator for this memory.

 * The amount of space available is platform dependent.  On the

 * MBX, the EPPC software loads additional microcode into the

 * communication processor, and uses some of the DP ram for this

 * purpose.  Current, the first 512 bytes and the last 256 bytes of

 * memory are used.  Right now I am conservative and only use the

 * memory that can never be used for microcode.  If there are

 * applications that require more DP ram, we can expand the boundaries

 * but then we have to be careful of any downloaded microcode.

 Pointer to comm processor space */

	/*

	 * Get the vector by setting the ACK bit and then reading

	 * the register.

/*

 * The CPM can generate the error interrupt when there is a race condition

 * between generating and masking interrupts.  All we have to do is ACK it

 * and return.  This is a no-op function so we don't need any special

 * tests in the interrupt handler.

 Initialize the CPM interrupt controller. */

 Install our own error handler. */

 Perform a reset. */

 Wait for it. */

	/*

	 * Set SDMA Bus Request priority 5.

	 * On 860T, this also enables FEC priority 6.  I am not sure

	 * this is what we really want for some applications, but the

	 * manual recommends it.

	 * Bit 25, FAM can also be set to use FEC aggressive mode (860T).

 MPC885 */

/*

 * Set a baud rate generator.  This needs lots of work.  There are

 * four BRGs, any of which can be wired to any channel.

 * The internal baud rate clock is the system clock divided by 16.

 * This assumes the baudrate is 16x oversampled by the uart.

 This is good enough to get SMCs running..... */

	/*

	 * The BRG has a 12-bit counter.  For really slow baud rates (or

	 * really fast processors), we may have to further divide by 16.

/*

 * GPIO LIB API implementation

 shadowed data register to clear/set bits safely */

 IRQ associated with Pins when relevant */

 shadowed data register to clear/set bits safely */

 CONFIG_8xx_GPIO */

/*

 * Platform setup for the MPC8xx based boards from TQM.

 *

 * Heiko Schocher <hs@denx.de>

 * Copyright 2010 DENX Software Engineering GmbH

 *

 * based on:

 * Vitaly Bordug <vbordug@ru.mvista.com>

 *

 * Copyright 2005 MontaVista Software Inc.

 *

 * Heavily modified by Scott Wood <scottwood@freescale.com>

 * Copyright 2007 Freescale Semiconductor, Inc.

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2. This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

 SMC1 */

 RX */

 TX */

 SCC1 */

 CLK1 */

 CLK2 */

 TX */

 RX */

 TENA */

 MII */

 init FEC pins */

 SPDX-License-Identifier: GPL-2.0-only

/* Analogue & Micro Adder MPC875 board support

 *

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 SMC1 */

 RX */

 TX */

 MII1 */

 MII2 */

 Set FEC1 and FEC2 to MII mode */

 SPDX-License-Identifier: GPL-2.0

/*

 * Microcode patches for the CPM as supplied by Motorola.

 * This is the one for IIC/SPI.  There is a newer one that

 * also relocates SMC2, but this would require additional changes

 * to uart.c, so I am holding off on that for a moment.

/*

 * I2C/SPI relocation patch arrays.

/*

 * I2C/SPI/SMC1 relocation patch arrays.

/*

 *  USB SOF patch arrays.

/*

 * SMC relocation patch arrays.

 Put SPI above the IIC, also 32-byte aligned. */

/*arch/powerpc/platforms/8xx/mpc86xads_setup.c

 *

 * Platform setup for the Freescale mpc86xads board

 *

 * Vitaly Bordug <vbordug@ru.mvista.com>

 *

 * Copyright 2005 MontaVista Software Inc.

 *

 * Heavily modified by Scott Wood <scottwood@freescale.com>

 * Copyright 2007 Freescale Semiconductor, Inc.

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2. This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

 SMC1 */

 RX */

 TX */

 SMC2 */

 RX */

 TX */

 SCC1 */

 CLK1 */

 CLK2 */

 TX */

 RX */

 TENA */

 RENA */

 CLSN */

 MII */

 I2C */

 Set FEC1 and FEC2 to MII mode */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Common PowerQUICC II code.

 *

 * Author: Scott Wood <scottwood@freescale.com>

 * Copyright (c) 2007 Freescale Semiconductor

 *

 * Based on code by Vitaly Bordug <vbordug@ru.mvista.com>

 * pq2_restart fix by Wade Farnsworth <wfarnsworth@mvista.com>

 * Copyright (c) 2006 MontaVista Software, Inc.

 Clear the ME,EE,IR & DR bits in MSR to cause checkstop */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PQ2FADS board support

 *

 * Copyright 2007 Freescale Semiconductor, Inc.

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Loosely based on mp82xx ADS support by Vitaly Bordug <vbordug@ru.mvista.com>

 * Copyright (c) 2006 MontaVista Software, Inc.

 Initialize stuff for the 82xx CPLD IC and install demux  */

 SCC1 */

 SCC2 */

 FCC2 */

 FCC3 */

 Enable the serial and ethernet ports */

 Enable external IRQs */

/*

 * Called very early, device-tree isn't unflattened

 Publish the QE devices */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PQ2 ADS-style PCI interrupt controller

 *

 * Copyright 2007 Freescale Semiconductor, Inc.

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Loosely based on mpc82xx ADS support by Vitaly Bordug <vbordug@ru.mvista.com>

 * Copyright (c) 2006 MontaVista Software, Inc.

 PCI interrupt controller registers: status and mask */

 mask all PCI interrupts */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MPC8272 ADS board support

 *

 * Copyright 2007 Freescale Semiconductor, Inc.

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Based on code by Vitaly Bordug <vbordug@ru.mvista.com>

 * Copyright (c) 2006 MontaVista Software, Inc.

 Initialize stuff for the 82xx CPLD IC and install demux  */

 SCC1 */

 SCC4 */

 FCC1 */

 FCC2 */

 I2C */

 USB */

 Publish the QE devices */

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Embedded Planet EP8248E support

 *

 * Copyright 2007 Freescale Semiconductor, Inc.

 * Author: Scott Wood <scottwood@freescale.com>

 Read back to flush the write. */

 Read back to flush the write. */

 Read back to flush the write. */

 SMC1 */

 SCC1 */

 FCC1 */

 FCC2 */

 I2C */

 USB */

 USB */

	/* When this is set, snooping CPM DMA from RAM causes

	 * machine checks.  See erratum SIU18.

/*

 * Called very early, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Keymile km82xx support

 * Copyright 2008-2011 DENX Software Engineering GmbH

 * Author: Heiko Schocher <hs@denx.de>

 *

 * based on code from:

 * Copyright 2007 Freescale Semiconductor, Inc.

 * Author: Scott Wood <scottwood@freescale.com>

 SMC1 */

 SMC2 */

 SCC1 */

 SCC4 */

 FCC1 */

 FCC2 */

 MDC */

 I2C */

 USB */

 FULL_SPEED */

	{0, 11, CPM_PIN_OUTPUT | CPM_PIN_GPIO},    /*/SLAVE */

	{2, 10, CPM_PIN_INPUT  | CPM_PIN_PRIMARY}, /* RXN */

	{2, 11, CPM_PIN_INPUT  | CPM_PIN_PRIMARY}, /* RXP */

	{2, 20, CPM_PIN_OUTPUT | CPM_PIN_PRIMARY}, /* /OE */

	{2, 27, CPM_PIN_INPUT  | CPM_PIN_PRIMARY}, /* RXCLK */

	{3, 23, CPM_PIN_OUTPUT | CPM_PIN_PRIMARY}, /* TXP */

	{3, 24, CPM_PIN_OUTPUT | CPM_PIN_PRIMARY}, /* TXN */

	{3, 25, CPM_PIN_INPUT  | CPM_PIN_PRIMARY}, /* RXD */



	/* SPI */

	{3, 16, CPM_PIN_INPUT | CPM_PIN_SECONDARY},/* SPI_MISO PD16 */

	{3, 17, CPM_PIN_INPUT | CPM_PIN_SECONDARY},/* SPI_MOSI PD17 */

	{3, 18, CPM_PIN_INPUT | CPM_PIN_SECONDARY},/* SPI_CLK PD18 */

};



static void __init init_ioports(void)

{

	int i;



	for (i = 0; i < ARRAY_SIZE(km82xx_pins); i++) {

		const struct cpm_pin *pin = &km82xx_pins[i];

		cpm2_set_pin(pin->port, pin->pin, pin->flags);

	}



	cpm2_smc_clk_setup(CPM_CLK_SMC2, CPM_BRG8);

	cpm2_smc_clk_setup(CPM_CLK_SMC1, CPM_BRG7);

	cpm2_clk_setup(CPM_CLK_SCC1, CPM_CLK11, CPM_CLK_RX);

	cpm2_clk_setup(CPM_CLK_SCC1, CPM_CLK11, CPM_CLK_TX);

	cpm2_clk_setup(CPM_CLK_SCC3, CPM_CLK5, CPM_CLK_RTX);

	cpm2_clk_setup(CPM_CLK_SCC4, CPM_CLK7, CPM_CLK_RX);

	cpm2_clk_setup(CPM_CLK_SCC4, CPM_CLK8, CPM_CLK_TX);

	cpm2_clk_setup(CPM_CLK_FCC1, CPM_CLK10, CPM_CLK_RX);

	cpm2_clk_setup(CPM_CLK_FCC1, CPM_CLK9,  CPM_CLK_TX);

	cpm2_clk_setup(CPM_CLK_FCC2, CPM_CLK13, CPM_CLK_RX);

	cpm2_clk_setup(CPM_CLK_FCC2, CPM_CLK14, CPM_CLK_TX);



	/* Force USB FULL SPEED bit to '1' */

	setbits32(&cpm2_immr->im_ioport.iop_pdata, 1 << (31 - 10));

	/* clear USB_SLAVE */

	clrbits32(&cpm2_immr->im_ioport.iop_pdata, 1 << (31 - 11));

}



static void __init km82xx_setup_arch(void)

{

	if (ppc_md.progress)

		ppc_md.progress("km82xx_setup_arch()", 0);



	cpm2_reset();



 When this is set, snooping CPM DMA from RAM causes

	 */

	clrbits32(&cpm2_immr->im_siu_conf.siu_82xx.sc_bcr, MPC82XX_BCR_PLDP);



	init_ioports();



	if (ppc_md.progress)

		ppc_md.progress("km82xx_setup_arch(), finish", 0);

}



static const struct of_device_id of_bus_ids[] __initconst = {

	{ .compatible = "simple-bus", },

	{},

};



static int __init declare_of_platform_devices(void)

{

	of_platform_bus_probe(NULL, of_bus_ids, NULL);



	return 0;

}

machine_device_initcall(km82xx, declare_of_platform_devices);





 */

static int __init km82xx_probe(void)

{

	return of_machine_is_compatible("keymile,km82xx");

}



define_machine(km82xx)

{

	.name = "Keymile km82xx",

	.probe = km82xx_probe,

	.setup_arch = km82xx_setup_arch,

	.init_IRQ = km82xx_pic_init,

	.get_irq = cpm2_get_irq,

	.calibrate_decr = generic_calibrate_decr,

	.restart = pq2_restart,

	.progress = udbg_progress,

};

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * VAS user space API for its accelerators (Only NX-GZIP is supported now)

 * Copyright (C) 2019 Haren Myneni, IBM Corp

/*

 * The driver creates the device node that can be used as follows:

 * For NX-GZIP

 *

 *	fd = open("/dev/crypto/nx-gzip", O_RDWR);

 *	rc = ioctl(fd, VAS_TX_WIN_OPEN, &attr);

 *	paste_addr = mmap(NULL, PAGE_SIZE, prot, MAP_SHARED, fd, 0ULL).

 *	vas_copy(&crb, 0, 1);

 *	vas_paste(paste_addr, 0, 1);

 *	close(fd) or exit process to close window.

 *

 * where "vas_copy" and "vas_paste" are defined in copy-paste.h.

 * copy/paste returns to the user space directly. So refer NX hardware

 * documententation for exact copy/paste usage and completion / error

 * conditions.

/*

 * Wrapper object for the nx-gzip device - there is just one instance of

 * this node for the whole system.

/*

 * Take reference to pid and mm

	/*

	 * Window opened by a child thread may not be closed when

	 * it exits. So take reference to its pid and release it

	 * when the window is free by parent thread.

	 * Acquire a reference to the task's pid to make sure

	 * pid will not be re-used - needed only for multithread

	 * applications.

	/*

	 * Acquire a reference to the task's mm.

	/*

	 * Process closes window during exit. In the case of

	 * multithread application, the child thread can open

	 * window and can exit without closing it. So takes tgid

	 * reference until window closed to make sure tgid is not

	 * reused.

/*

 * Successful return must release the task reference with

 * put_task_struct

		/*

		 * Parent thread (tgid) will be closing window when it

		 * exits. So should not get here.

 Return if the task is exiting. */

/*

 * Update the CSB to indicate a translation error.

 *

 * User space will be polling on CSB after the request is issued.

 * If NX can handle the request without any issues, it updates CSB.

 * Whereas if NX encounters page fault, the kernel will handle the

 * fault and update CSB with translation error.

 *

 * If we are unable to update the CSB means copy_to_user failed due to

 * invalid csb_addr, send a signal to the process.

	/*

	 * NX user space windows can not be opened for task->mm=NULL

	 * and faults will not be generated for kernel requests.

	/*

	 * NX operates and returns in BE format as defined CRB struct.

	 * So saves fault_storage_addr in BE as NX pastes in FIFO and

	 * expects user space to convert to CPU format.

	/*

	 * Process closes send window after all pending NX requests are

	 * completed. In multi-thread applications, a child thread can

	 * open a window and can exit without closing it. May be some

	 * requests are pending or this window can be used by other

	 * threads later. We should handle faults if NX encounters

	 * pages faults on these requests. Update CSB with translation

	 * error and fault address. If csb_addr passed by user space is

	 * invalid, send SEGV signal to pid saved in window. If the

	 * child thread is not running, send the signal to tgid.

	 * Parent thread (tgid) will close this window upon its exit.

	 *

	 * pid and mm references are taken when window is opened by

	 * process (pid). So tgid is used only when child thread opens

	 * a window and exits without closing it.

	/*

	 * User space polls on csb.flags (first byte). So add barrier

	 * then copy first byte with csb flags update.

 Make sure update to csb.flags is visible now */

 Success */

	/*

	 * process will be polling on csb.flags after request is sent to

	 * NX. So generally CSB update should not fail except when an

	 * application passes invalid csb_addr. So an error message will

	 * be displayed and leave it to user space whether to ignore or

	 * handle this signal.

	/*

	 * One window for file descriptor

	/*

	 * We don't know here if user has other receive windows

	 * open, so we can't really call clear_thread_tidr().

	 * So, once the process calls set_thread_tidr(), the

	 * TIDR value sticks around until process exits, resulting

	 * in an extra copy in restore_sprs().

 Ensure instance has an open send window */

 flags, page_prot from cxl_mmap(), except we want cachable */

/*

 * Supporting only nx-gzip coprocessor type now, but this API code

 * extended to other coprocessor types later.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Author: Xianghua Xiao <x.xiao@freescale.com>

 *         Zhang Wei <wei.zhang@freescale.com>

 *

 * Copyright 2006 Freescale Semiconductor Inc.

 Offset from CCSRBAR */

	/*

	 * Startup Core #nr.

 Save reset vector */

 Setup fake reset vector to call __secondary_start_mpc86xx. */

 Kick that CPU */

 Wait a bit for the CPU to take the exception. */

 Restore the exception vector */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2008 Freescale Semiconductor, Inc.

 CONFIG_PPC_I8259 */

 Initialize i8259 controller */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * GE PPC9A board support

 *

 * Author: Martyn Welch <martyn.welch@ge.com>

 *

 * Copyright 2008 GE Intelligent Platforms Embedded Systems, Inc.

 *

 * Based on: mpc86xx_hpcn.c (MPC86xx HPCN board specific routines)

 * Copyright 2006 Freescale Semiconductor Inc.

 *

 * NEC fixup adapted from arch/mips/pci/fixup-lm2e.c

	/*

	 * There is a simple interrupt handler in the main FPGA, this needs

	 * to be cascaded into the MPIC

 Remap basic board registers */

 Return the PCB revision */

 Return the board (software) revision */

 Return the FPGA revision */

 Return VME Geographical Address */

 Return VME System Controller Status */

 Do not do the fixup on other platforms! */

 Ensure ports 1, 2, 3, 4 & 5 are enabled */

 System clock is 48-MHz Oscillator and EHCI Enabled. */

/*

 * Called very early, device-tree isn't unflattened

 *

 * This function is called to determine whether the BSP is compatible with the

 * supplied device-tree, which is assumed to be the correct one for the actual

 * board. It is expected thati, in the future, a kernel may support multiple

 * boards.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * GE SBC610 board support

 *

 * Author: Martyn Welch <martyn.welch@ge.com>

 *

 * Copyright 2008 GE Intelligent Platforms Embedded Systems, Inc.

 *

 * Based on: mpc86xx_hpcn.c (MPC86xx HPCN board specific routines)

 * Copyright 2006 Freescale Semiconductor Inc.

 *

 * NEC fixup adapted from arch/mips/pci/fixup-lm2e.c

	/*

	 * There is a simple interrupt handler in the main FPGA, this needs

	 * to be cascaded into the MPIC

 Remap basic board registers */

 Return the PCB revision */

 Return the board (software) revision */

 Return the FPGA revision */

 Do not do the fixup on other platforms! */

 Ensure ports 1, 2, 3, 4 & 5 are enabled */

 System clock is 48-MHz Oscillator and EHCI Enabled. */

/*

 * Called very early, device-tree isn't unflattened

 *

 * This function is called to determine whether the BSP is compatible with the

 * supplied device-tree, which is assumed to be the correct one for the actual

 * board. It is expected thati, in the future, a kernel may support multiple

 * boards.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MPC8610 HPCD board specific routines

 *

 * Initial author: Xianghua Xiao <x.xiao@freescale.com>

 * Recode: Jason Jin <jason.jin@freescale.com>

 *         York Sun <yorksun@freescale.com>

 *

 * Rewrite the interrupt routing. remove the 8259PIC support,

 * All the integrated device in ULI use sideband interrupt.

 *

 * Copyright 2008 Freescale Semiconductor Inc.

 DIU Pixel Clock bits of the CLKDVDR Global Utilities register */

 CONFIG_SUSPEND */

 So that the DMA channel nodes can be probed individually: */

 PCI controllers */

 Enable wakeup on PIXIS' event IRQ. */

 Without this call, the SSI device driver won't get probed. */

/*

 * DIU Area Descriptor

 *

 * The MPC8610 reference manual shows the bits of the AD register in

 * little-endian order, which causes the BLUE_C field to be split into two

 * parts. To simplify the definition of the MAKE_AD() macro, we define the

 * fields in big-endian order and byte-swap the result.

 *

 * So even though the registers don't look like they're in the

 * same bit positions as they are on the P1022, the same value is written to

 * the AD register on the MPC8610 and on the P1022.

 The DVI port is mis-wired on revision 1 of this board. */

/**

 * mpc8610hpcd_set_pixel_clock: program the DIU's clock

 *

 * @pixclock: the wavelength, in picoseconds, of the clock

 Map the global utilities registers. */

 Convert pixclock from a wavelength to a frequency */

	/*

	 * 'pxclk' is the ratio of the platform clock to the pixel clock.

	 * On the MPC8610, the value programmed into CLKDVDR is the ratio

	 * minus one.  The valid range of values is 2-31.

 Disable the pixel clock, and set it to non-inverted and no delay */

 Enable the clock and set the pxclk */

/*

 * Called very early, device-tree isn't unflattened

 Looks good */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Board setup routines for the Emerson/Artesyn MVME7100

 *

 * Copyright 2016 Elettra-Sincrotrone Trieste S.C.p.A.

 *

 * Author: Alessio Igor Bogani <alessio.bogani@elettra.eu>

 *

 * Based on earlier code by:

 *

 *	Ajit Prem <ajit.prem@emerson.com>

 *	Copyright 2008 Emerson

 *

 * USB host fixup is borrowed by:

 *

 *	Martyn Welch <martyn.welch@ge.com>

 *	Copyright 2008 GE Intelligent Platforms Embedded Systems, Inc.

/*

 * Setup the architecture

 Remap BCSR registers */

 Disable ds1375, max6649, and abort interrupts */

/*

 * Called very early, device-tree isn't unflattened

 Ensure only ports 1 & 2 are enabled */

 System clock is 48-MHz Oscillator and EHCI Enabled. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * GE SBC310 board support

 *

 * Author: Martyn Welch <martyn.welch@ge.com>

 *

 * Copyright 2008 GE Intelligent Platforms Embedded Systems, Inc.

 *

 * Based on: mpc86xx_hpcn.c (MPC86xx HPCN board specific routines)

 * Copyright 2006 Freescale Semiconductor Inc.

 *

 * NEC fixup adapted from arch/mips/pci/fixup-lm2e.c

	/*

	 * There is a simple interrupt handler in the main FPGA, this needs

	 * to be cascaded into the MPIC

 Remap basic board registers */

 Return the PCB revision */

 Return the PCB revision */

 Return the board (software) revision */

 Return the FPGA revision */

 Do not do the fixup on other platforms! */

 Ensure only ports 1 & 2 are enabled */

 System clock is 48-MHz Oscillator and EHCI Enabled. */

/*

 * Called very early, device-tree isn't unflattened

 *

 * This function is called to determine whether the BSP is compatible with the

 * supplied device-tree, which is assumed to be the correct one for the actual

 * board. It is expected thati, in the future, a kernel may support multiple

 * boards.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MPC86xx HPCN board specific routines

 *

 * Recode: ZHANG WEI <wei.zhang@freescale.com>

 * Initial author: Xianghua Xiao <x.xiao@freescale.com>

 *

 * Copyright 2006 Freescale Semiconductor Inc.

 CONFIG_PCI */

/*

 * Called very early, device-tree isn't unflattened

 Looks good */

 Be nice and don't give silent boot death.  Delete this in 2.6.27 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Routines common to most mpc86xx-based boards.

 Set the time base to zero */

 SPDX-License-Identifier: GPL-2.0

 DIMM health bitmap bitmap indicators */

 SCM device is unable to persist memory contents */

 SCM device failed to persist memory contents */

 SCM device contents are persisted from previous IPL */

 SCM device contents are not persisted from previous IPL */

 SCM device memory life remaining is critically low */

 SCM device will be garded off next IPL due to failure */

 SCM contents cannot persist due to current platform health status */

 SCM device is unable to persist memory contents in certain conditions */

 SCM device is encrypted */

 SCM device has been scrubbed and locked */

 Bits status indicators for health bitmap indicating unarmed dimm */

 Bits status indicators for health bitmap indicating unflushed dimm */

 Bits status indicators for health bitmap indicating unrestored dimm */

 Bit status indicators for smart event notification */

 Struct holding a single performance metric */

 Struct exchanged between kernel and PHYP for fetching drc perf stats */

 Should be PAPR_SCM_PERF_STATS_VERSION */

 Number of stats following */

 zero or more performance matrics */

 private struct associated with each region */

 Protect dimm health data from concurrent read/writes */

 Last time the health information of the dimm was updated */

 Health information for the dimm */

 Holds the last known dirty shutdown counter value */

 length of the stat buffer as expected by phyp */

 Check if we are stalled for some time */

	/*

	 * When the hypervisor cannot map all the requested memory in a single

	 * hcall it returns H_BUSY and we call again with the token until

	 * we get H_SUCCESS. Aborting the retry loop before getting H_SUCCESS

	 * leave the system in an undefined state, so we wait.

 NB: unbind has the same retry requirements as drc_pmem_bind() */

 Unbind of all SCM resources associated with drcIndex */

 Check if we are stalled for some time */

 Make sure the full region is bound. */

/*

 * Query the Dimm performance stats from PHYP and copy them (if returned) to

 * provided struct papr_scm_perf_stats instance 'stats' that can hold atleast

 * (num_stats + header) bytes.

 * - If buff_stats == NULL the return value is the size in bytes of the buffer

 * needed to hold all supported performance-statistics.

 * - If buff_stats != NULL and num_stats == 0 then we copy all known

 * performance-statistics to 'buff_stat' and expect to be large enough to

 * hold them.

 * - if buff_stats != NULL and num_stats > 0 then copy the requested

 * performance-statistics to buff_stats.

 Setup the out buffer */

		/*

		 * Calculate the buffer size based on num-stats provided

		 * or use the prefetched max buffer length

 Calculate size from the num_stats */

 In case of no out buffer ignore the size */

 Do the HCALL asking PHYP for info */

 Check if the error was due to an unknown stat-id */

 Handle case where stat buffer size was requested */

 Successfully fetched the requested stats from phyp */

/*

 * Issue hcall to retrieve dimm health info and populate papr_scm_priv with the

 * health information.

 issue the hcall */

 Min interval in seconds for assuming stable dimm health */

 Query cached health info and if needed call drc_pmem_query_health */

 Protect concurrent modifications to papr_scm_priv */

 Jiffies offset for which the health data is assumed to be same */

 Fetch new health info is its older than MIN_HEALTH_QUERY_INTERVAL */

 Assume cached health data is valid */

 bad DRC index */

 other invalid parameter */

 bad DRC index */

 other invalid parameter */

/*

 * Do a sanity checks on the inputs args to dimm-control function and return

 * '0' if valid. Validation of PDSM payloads happens later in

 * papr_scm_service_pdsm.

 Only dimm-specific calls are supported atm */

 get the provider data from struct nvdimm */

 For CMD_CALL verify pdsm request */

 Verify the envelope and envelop size */

 Verify that the nd_cmd_pkg.nd_family is correct */

 Verify if the pdsm command is valid */

 Have enough space to hold returned 'nd_pkg_pdsm' header */

 Let the command be further processed */

 Silently fail if fetching performance metrics isn't  supported */

 Allocate request buffer enough to hold single performance stat */

 Fetch the fuel gauge and populate it in payload */

 Add the dirty-shutdown-counter value to the pdsm */

 Fetch the DIMM health info and populate it in provided package. */

 Ensure dimm health mutex is taken preventing concurrent access */

 Always fetch upto date dimm health data ignoring cached values */

 update health struct with various flags derived from health bitmap */

 Update field dimm_health based on health_bitmap flags */

 struct populated hence can release the mutex now */

 Populate the fuel gauge meter in the payload */

 Populate the dirty-shutdown-counter field */

/*

 * 'struct pdsm_cmd_desc'

 * Identifies supported PDSMs' expected length of in/out payloads

 * and pdsm service function.

 *

 * size_in	: Size of input payload if any in the PDSM request.

 * size_out	: Size of output payload if any in the PDSM request.

 * service	: Service function for the PDSM request. Return semantics:

 *		  rc < 0 : Error servicing PDSM and rc indicates the error.

 *		  rc >=0 : Serviced successfully and 'rc' indicate number of

 *			bytes written to payload.

 Holds all supported PDSMs' command descriptors */

 New PDSM command descriptors to be added below */

 Empty */

 Given a valid pdsm cmd return its command descriptor else return NULL */

/*

 * For a given pdsm request call an appropriate service function.

 * Returns errors if any while handling the pdsm command package.

 Get the PDSM header and PDSM command */

 Fetch corresponding pdsm descriptor for validation and servicing */

 Validate pdsm descriptor */

 Ensure that reserved fields are 0 */

 If pdsm expects some input, then ensure that the size_in matches */

 If pdsm wants to return data, then ensure that  size_out matches */

 Service the pdsm */

 error encountered while servicing pdsm */

 pdsm serviced and 'rc' bytes written to payload */

 Use a local variable in case cmd_rc pointer is NULL */

 Allocate the buffer for phyp where stats are written */

 Ask phyp to return all dimm perf stats */

	/*

	 * Go through the returned output buffer and print stats and

	 * values. Since stat_id is essentially a char string of

	 * 8 bytes, simply use the string format specifier to print it.

 Copy health_bitmap locally, check masks & update out buffer */

 For if perf-stats not available remove perf_stats sysfs */

 papr_scm specific dimm attributes */

 Set the dimm command family mask to accept PDSMs */

	/*

	 * Check if the nvdimm is unarmed. No locking needed as we are still

	 * initializing. Ignore error encountered if any.

 now add the region */

 XXX: potential overflow?

	/*

	 * The physical address obtained here is PAGE_SIZE aligned, so get the

	 * exact address from the effective address

 mce notifier is called from a process context, so mutex is safe */

 check we have all the required DT properties */

 Initialize the dimm mutex */

 optional DT properties */

 We just need to ensure that set cookies are unique across */

	/*

	 * The cookie1 and cookie2 are not really little endian.

	 * We store a raw buffer representation of the

	 * uuid string so that we can compare this with the label

	 * area cookie irrespective of the endian configuration

	 * with which the kernel is built.

	 *

	 * Historically we stored the cookie in the below format.

	 * for a uuid string 72511b67-0b3b-42fd-8d1d-5be3cae8bcaa

	 *	cookie1 was 0xfd423b0b671b5172

	 *	cookie2 was 0xaabce8cae35b1d8d

 might be zero */

 request the hypervisor to bind this region to somewhere in memory */

 If phyp says drc memory still bound then force unbound and retry */

 setup the resource for the newly bound range */

 Try retrieving the stat buffer and see if its supported */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Confidential Computing Platform Capability checks

 *

 * Copyright (C) 2021 Advanced Micro Devices, Inc.

 *

 * Author: Tom Lendacky <thomas.lendacky@amd.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  c 2001 PPC 64 Team, IBM Corp

 *

 * /dev/nvram driver for PPC64

 Max bytes to read/write in one go */

 assume this is in the first 4GB */

 See clobbering_unread_rtas_event() */

 seconds */

 timestamp */

/* nvram_write_error_log

 *

 * We need to buffer the error logs into nvram to ensure that we have

 * the failure information to decode.

/* nvram_read_error_log

 *

 * Reads nvram for error log for at most 'length'

/* This doesn't actually zero anything, but it sets the event_logged

 * word to tell that this event is safely in syslog.

/*

 * Are we using the ibm,rtas-log for oops/panic reports?  And if so,

 * would logging this oops/panic overwrite an RTAS event that rtas_errd

 * hasn't had a chance to read and process?  Return 1 if so, else 0.

 *

 * We assume that if rtas_errd hasn't read the RTAS event in

 * NVRAM_RTAS_READ_TIMEOUT seconds, it's probably not going to.

 Scan nvram for partitions */

 SPDX-License-Identifier: GPL-2.0

/*

 * Handles hot and cold plug of persistent memory regions on pseries.

 for idle_task_exit */

 NB: The of reconfig notifier creates platform device from the node */

 * NB: tears down the ibm,pmemory device as a side-effect */

 slim chance, but we might get a hotplug event while booting */

	/*

	 * Only supported on POWER8 and above.

	/*

	 * The generic OF bus probe/populate handles creating platform devices

	 * from the child (ibm,pmemory) nodes. The generic code registers an of

	 * reconfig notifier to handle the hot-add/remove cases too.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  64-bit pSeries and RS/6000 setup code.

 *

 *  Copyright (C) 1995  Linus Torvalds

 *  Adapted from 'alpha' version by Gary Thomas

 *  Modified by Cort Dougan (cort@cs.nmt.edu)

 *  Modified by PPC64 Team, IBM Corp

/*

 * bootup setup stuff..

 TRUE if an FWNMI handler is present */

/* Initialize firmware assisted non-maskable interrupts if

 * the firmware supports this feature.

	/* If the kernel's not linked at zero we point the firmware at low

	/*

	 * Allocate a chunk for per cpu buffer to hold rtas errorlog.

	 * It will be used in real mode mce handler, hence it needs to be

	 * below RMA.

 Allocate per cpu area to save old slb contents during MCE */

 Try using a XIVE if available, otherwise use a XICS */

/*

 * Allocate space for the dispatch trace log for all possible cpus

 * and register the buffers with the hypervisor.  This is used for

 * computing time stolen by the hypervisor.

 Register the DTL for the current (boot) cpu */

 !CONFIG_VIRT_CPU_ACCOUNTING_NATIVE */

 CONFIG_VIRT_CPU_ACCOUNTING_NATIVE */

	/*

	 * Default handler to go into low thread priority and possibly

	 * low power mode by ceding processor to hypervisor

 Indicate to hypervisor that we are idle. */

	/*

	 * Yield the processor to the hypervisor.  We return if

	 * an external interrupt occurs (which are driven prior

	 * to returning here) or if a prod occurs from another

	 * processor. When returning here, external interrupts

	 * are enabled.

/*

 * Enable relocation on during exceptions. This has partition wide scope and

 * may take a while to complete, if it takes longer than one second we will

 * just give up rather than wasting any more time on this - if that turns out

 * to ever be a problem in practice we can move this into a kernel thread to

 * finish off the process later in boot.

	/*

	 * At this point it is unlikely panic() will get anything

	 * out to the user, since this is called very late in kexec

	 * but at least this will stop us from continuing on further

	 * and creating an even more difficult to debug situation.

	 *

	 * There is a known problem when kdump'ing, if cpus are offline

	 * the above call will fail. Rather than panicking again, keep

	 * going and hope the kdump kernel is also little endian, which

	 * it usually is.

 create pci_dn's for DT nodes under this PHB */

	/*

	 * PCI_PROBE_ONLY and PCI_REASSIGN_ALL_BUS can be set via properties

	 * in chosen.

	/*

	 * The features below are disabled by default, so we instead look to see

	 * if firmware has *enabled* them, and set them if so.

	/*

	 * The features below are enabled by default, so we instead look to see

	 * if firmware has *disabled* them, and clear them if so.

	 * H_CPU_BEHAV_FAVOUR_SECURITY_H could be set only if

	 * H_CPU_BEHAV_FAVOUR_SECURITY is.

	/*

	 * Set features to the defaults assumed by init_cpu_char_feature_flags()

	 * so it can set/clear again any features that might have changed after

	 * migration, and in case the hypercall fails and it is not even called.

	/*

	 * We're the guest so this doesn't apply to us, clear it to simplify

	 * handling of it elsewhere.

 Number of Resources */

 Lowest 32 bits of Address */

 Always start of entry */

 Start of entry+ to  Aperture Size */

 Start of entry+ to Window Size */

 Go to next entry on array */

  Get Bar Address */

  Get Aperture Size */

  Get Window Size */

	/*

	 * First element in the array is the number of Bars

	 * returned.  Search through the list to find the matching

	 * bar

 or an errror */

	/*

	 * First element in the array is the number of Bars

	 * returned.  Search through the list to find the matching

	 * bars assign them from firmware into resources structure.

Firmware must support open sriov otherwise dont configure*/

Firmware must support open sriov otherwise dont configure*/

Firmware must support open sriov otherwise report regular alignment*/

 Discover PIC type and setup ppc_md accordingly */

 openpic global configuration register (64-bit format). */

 openpic Interrupt Source Unit pointer (64-bit format). */

 python0 facility area (mmio) (64-bit format) REAL address. */

 init to some ~sane value until calibrate_delay() runs */

 By default, only probe PCI (can be overridden by rtas_pci) */

 Find and initialize PCI host bridges */

 No special idle routine */

 Manually leave the kernel version on the panel. */

 Have to set at least one bit in the DABRX according to PAPR */

 PAPR says we can only set kernel and user bits */

 PAPR says we can't set HYP */

/**

 * fw_cmo_feature_init - FW_FEATURE_CMO is not stored in ibm,hypertas-functions,

 * handle that here. (Stolen from parse_system_parameter_string)

 step over strlen value */

		/* Separate the key and value by replacing '=' with '\0' and

		 * point the value at the string after the '='

 Terminate the string containing the key/value pair */

 Never found a '=', end processing */

	/* Page size is returned as the power of 2 of the page size,

	 * convert to the page size in bytes before returning

/*

 * Early initialization.  Relocation is on but do not reference unbolted pages

/**

 * pseries_power_off - tell firmware about how to power off the system.

 *

 * This function calls either the power-off rtas token in normal cases

 * or the ibm,power-off-ups token (if present & requested) in case of

 * a power failure. If power-off token is used, power on will only be

 * possible with power button press. If ibm,power-off-ups token is used

 * it will allow auto poweron after power is restored.

	/* Cell blades firmware claims to be chrp while it's not. Until this

	 * is fixed, we need to avoid those here.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * IBM PowerPC Virtual I/O Infrastructure Support.

 *

 *    Copyright (c) 2003,2008 IBM Corp.

 *     Dave Engebretsen engebret@us.ibm.com

 *     Santiago Leon santil@us.ibm.com

 *     Hollis Blanchard <hollisb@us.ibm.com>

 *     Stephen Rothwell

 *     Robert Jennings <rcjenn@us.ibm.com>

 fake "parent" device */

/**

 * vio_cmo_pool - A pool of IO memory for CMO use

 *

 * @size: The size of the pool in bytes

 * @free: The amount of free memory in the pool

 How many ms to delay queued balance work */

 Portion out IO memory to CMO devices by this chunk size */

/**

 * vio_cmo_dev_entry - A device that is CMO-enabled and requires entitlement

 *

 * @vio_dev: struct vio_dev pointer

 * @list: pointer to other devices on bus that are being tracked

/**

 * vio_cmo - VIO bus accounting structure for CMO entitlement

 *

 * @lock: spinlock for entire structure

 * @balance_q: work queue for balancing system entitlement

 * @device_list: list of CMO-enabled devices requiring entitlement

 * @entitled: total system entitlement in bytes

 * @reserve: pool of memory from which devices reserve entitlement, incl. spare

 * @excess: pool of excess entitlement not needed for device reserves or spare

 * @spare: IO memory for device hotplug functionality

 * @min: minimum necessary for system operation

 * @desired: desired memory for system operation

 * @curr: bytes currently allocated

 * @high: high water mark for IO data usage

/**

 * vio_cmo_OF_devices - Count the number of OF devices that have DMA windows

	/*

	 * Count the number of vdevice entries with an

	 * ibm,my-dma-window OF property

/**

 * vio_cmo_alloc - allocate IO memory for CMO-enable devices

 *

 * @viodev: VIO device requesting IO memory

 * @size: size of allocation requested

 *

 * Allocations come from memory reserved for the devices and any excess

 * IO memory available to all devices.  The spare pool used to service

 * hotplug must be equal to %VIO_CMO_MIN_ENT for the excess pool to be

 * made available.

 *

 * Return codes:

 *  0 for successful allocation and -ENOMEM for a failure

 Determine the amount of free entitlement available in reserve */

 If spare is not fulfilled, the excess pool can not be used. */

 The request can be satisfied */

/**

 * vio_cmo_dealloc - deallocate IO memory from CMO-enable devices

 * @viodev: VIO device freeing IO memory

 * @size: size of deallocation

 *

 * IO memory is freed by the device back to the correct memory pools.

 * The spare pool is replenished first from either memory pool, then

 * the reserve pool is used to reduce device entitlement, the excess

 * pool is used to increase the reserve pool toward the desired entitlement

 * target, and then the remaining memory is returned to the pools.

 *

 Amount of memory freed from the excess pool */

 Remove allocation from device */

 Spare is a subset of the reserve pool, replenish it first. */

	/*

	 * Replenish the spare in the reserve pool from the excess pool.

	 * This moves entitlement into the reserve pool.

	/*

	 * Replenish the spare in the reserve pool from the reserve pool.

	 * This removes entitlement from the device down to VIO_CMO_MIN_ENT,

	 * if needed, and gives it to the spare pool. The amount of used

	 * memory in this pool does not change.

	/*

	 * Increase the reserve pool until the desired allocation is met.

	 * Move an allocation freed from the excess pool into the reserve

	 * pool and schedule a balance operation.

 Return memory from the excess pool to that pool */

/**

 * vio_cmo_entitlement_update - Manage system entitlement changes

 *

 * @new_entitlement: new system entitlement to attempt to accommodate

 *

 * Increases in entitlement will be used to fulfill the spare entitlement

 * and the rest is given to the excess pool.  Decreases, if they are

 * possible, come from the excess pool and from unused device entitlement

 *

 * Returns: 0 on success, -ENOMEM when change can not be made

 Entitlement increases */

 Fulfill spare allocation */

 Remaining new allocation goes to the excess pool */

 Entitlement decreases */

	/*

	 * Need to check how much unused entitlement each device can

	 * sacrifice to fulfill entitlement change.

 Take entitlement from the excess pool first */

		/*

		 * Remove all but VIO_CMO_MIN_ENT bytes from devices

		 * until entitlement change is served

/**

 * vio_cmo_balance - Balance entitlement among devices

 *

 * @work: work queue structure for this operation

 *

 * Any system entitlement above the minimum needed for devices, or

 * already allocated to devices, can be distributed to the devices.

 * The list of devices is iterated through to recalculate the desired

 * entitlement level and to determine how much entitlement above the

 * minimum entitlement is allocated to devices.

 *

 * Small chunks of the available entitlement are given to devices until

 * their requirements are fulfilled or there is no entitlement left to give.

 * Upon completion sizes of the reserve and excess pools are calculated.

 *

 * The system minimum entitlement level is also recalculated here.

 * Entitlement will be reserved for devices even after vio_bus_remove to

 * accommodate reloading the driver.  The OF tree is walked to count the

 * number of devices present and this will remove entitlement for devices

 * that have actually left the system after having vio_bus_remove called.

 Calculate minimum entitlement and fulfill spare */

	/*

	 * Determine how much entitlement is available and reset device

	 * entitlements

	/*

	 * Having provided each device with the minimum entitlement, loop

	 * over the devices portioning out the remaining entitlement

	 * until there is nothing left.

			/*

			 * Give the device up to VIO_CMO_BALANCE_CHUNK

			 * bytes of entitlement, but do not exceed the

			 * desired level of entitlement for the device.

			/*

			 * If the memory for this entitlement increase was

			 * already allocated to the device it does not come

			 * from the available pool being portioned out.

 Calculate new reserve and excess pool sizes */

 Calculated reserve size above the minimum entitlement */

 Calculated used excess entitlement */

/**

 * vio_cmo_set_dev_desired - Set desired entitlement for a device

 *

 * @viodev: struct vio_dev for device to alter

 * @desired: new desired entitlement level in bytes

 *

 * For use by devices to request a change to their entitlement at runtime or

 * through sysfs.  The desired entitlement level is changed and a balancing

 * of system resources is scheduled to run in the future.

	/*

	 * Changes will not be made for devices not in the device list.

	 * If it is not in the device list, then no driver is loaded

	 * for the device and it can not receive entitlement.

 Increase/decrease in desired device entitlement */

 Just bump the bus and device values prior to a balance*/

 Decrease bus and device values for desired entitlement */

		/*

		 * If less entitlement is desired than current entitlement, move

		 * any reserve memory in the change region to the excess pool.

			/*

			 * If entitlement moving from the reserve pool to the

			 * excess pool is currently unused, add to the excess

			 * free counter.

/**

 * vio_cmo_bus_probe - Handle CMO specific bus probe activities

 *

 * @viodev - Pointer to struct vio_dev for device

 *

 * Determine the devices IO memory entitlement needs, attempting

 * to satisfy the system minimum entitlement at first and scheduling

 * a balance operation to take care of the rest at a later time.

 *

 * Returns: 0 on success, -EINVAL when device doesn't support CMO, and

 *          -ENOMEM when entitlement is not available for device or

 *          device entry.

 *

 A device requires entitlement if it has a DMA window property */

 Configure entitlement for the device. */

 Check that the driver is CMO enabled and get desired DMA */

	/*

	 * If the needs for vio_cmo.min have not changed since they

	 * were last set, the number of devices in the OF tree has

	 * been constant and the IO memory for this is already in

	 * the reserve pool.

 Updated desired entitlement if device requires it */

 Use excess pool first to fulfill request */

 Use spare if excess pool was insufficient */

 Update bus accounting */

/**

 * vio_cmo_bus_remove - Handle CMO specific bus removal activities

 *

 * @viodev - Pointer to struct vio_dev for device

 *

 * Remove the device from the cmo device list.  The minimum entitlement

 * will be reserved for the device as long as it is in the system.  The

 * rest of the entitlement the device had been allocated will be returned

 * to the system.

	/*

	 * Remove the device from the device list being maintained for

	 * CMO enabled devices.

	/*

	 * Devices may not require any entitlement and they do not need

	 * to be processed.  Otherwise, return the device's entitlement

	 * back to the pools.

		/*

		 * This device has not yet left the OF tree, it's

		 * minimum entitlement remains in vio_cmo.min and

		 * vio_cmo.desired

		/*

		 * Save min allocation for device in reserve as long

		 * as it exists in OF tree as determined by later

		 * balance operation

 Replenish spare from freed reserve pool */

 Remaining reserve goes to excess pool */

		/*

		 * Until the device is removed it will keep a

		 * minimum entitlement; this will guarantee that

		 * a module unload/load will result in a success.

/**

 * vio_cmo_bus_init - CMO entitlement initialization at bus init time

 *

 * Set up the reserve and excess entitlement pools based on available

 * system entitlement and the number of devices in the OF tree that

 * require entitlement in the reserve pool.

 Get current system entitlement */

	/*

	 * On failure, continue with entitlement set to 0, will panic()

	 * later when spare is reserved.

 Set reservation and check against entitlement */

 Set the remaining accounting variables */

 sysfs device functions and data structures for CMO */

 sysfs bus functions and data structures for CMO */

 CONFIG_PPC_SMLPAR */

 CONFIG_PPC_SMLPAR */

/*

 * Platform Facilities Option (PFO) support

/**

 * vio_h_cop_sync - Perform a synchronous PFO co-processor operation

 *

 * @vdev - Pointer to a struct vio_dev for device

 * @op - Pointer to a struct vio_pfo_op for the operation parameters

 *

 * Calls the hypervisor to synchronously perform the PFO operation

 * described in @op.  In the case of a busy response from the hypervisor,

 * the operation will be re-submitted indefinitely unless a non-zero timeout

 * is specified or an error occurs. The timeout places a limit on when to

 * stop re-submitting a operation, the total time can be exceeded if an

 * operation is in progress.

 *

 * If op->hcall_ret is not NULL, this will be set to the return from the

 * last h_cop_op call or it will be 0 if an error not involving the h_call

 * was encountered.

 *

 * Returns:

 *	0 on success,

 *	-EINVAL if the h_call fails due to an invalid parameter,

 *	-E2BIG if the h_call can not be performed synchronously,

 *	-EBUSY if a timeout is specified and has elapsed,

 *	-EACCES if the memory area for data/status has been rescinded, or

 *	-EPERM if a hardware fault has been indicated

 TCE table size - measured in tce entries */

 offset for VIO should always be 0 */

/**

 * vio_match_device: - Tell if a VIO device has a matching

 *			VIO device id structure.

 * @ids:	array of VIO device id structures to search in

 * @dev:	the VIO device structure to match against

 *

 * Used by a driver to check whether a VIO device present in the

 * system is in its list of supported devices. Returns the matching

 * vio_device_id structure or NULL if there is no match.

/*

 * Convert from struct device to struct vio_dev and pass to driver.

 * dev->driver has already been set by generic code because vio_bus_match

 * succeeded.

 convert from struct device to struct vio_dev and pass to driver. */

	/*

	 * Hold a reference to the device after the remove function is called

	 * to allow for CMO accounting cleanup for the device.

/**

 * vio_register_driver: - Register a new vio driver

 * @viodrv:	The vio_driver structure to be registered.

 vio_bus_type is only initialised for pseries

 fill in 'struct driver' fields */

/**

 * vio_unregister_driver - Remove registration of vio driver.

 * @viodrv:	The vio_driver struct to be removed form registration

 vio_dev refcount hit 0 */

/**

 * vio_register_device_node: - Register a new vio device.

 * @of_node:	The OF node for this device.

 *

 * Creates and initializes a vio_dev structure from the data in

 * of_node and adds it to the list of virtual devices.

 * Returns a pointer to the created vio_dev or NULL if node has

 * NULL device_type or compatible fields.

	/*

	 * Determine if this node is a under the /vdevice node or under the

	 * /ibm,platform-facilities node.  This decides the device's family.

 allocate a vio_dev for this node */

 we need the 'device_type' property, in order to match with drivers */

		/* PFO devices need their resource_id for submitting COP_OPs

		 * This is an optional field for devices, but is required when

 init generic 'struct device' fields: */

		/* needed to ensure proper operation of coherent allocations

 register with generic device framework */

 Use this exit point for any return prior to device_register */

/*

 * vio_bus_scan_for_devices - Scan OF and register each child device

 * @root_name - OF node name for the root of the subtree to search.

 *		This must be non-NULL

 *

 * Starting from the root node provide, register the device node for

 * each child beneath the root.

		/*

		 * Create struct vio_devices for each virtual device in

		 * the device tree. Drivers will associate with them later.

/**

 * vio_bus_init: - Initialize the virtual IO bus

	/*

	 * The fake parent of all vio devices, just to give us

	 * a nice directory

/**

 * vio_get_attribute: - get attribute for virtual device

 * @vdev:	The vio device to get property.

 * @which:	The property/attribute to be extracted.

 * @length:	Pointer to length of returned data size (unused if NULL).

 *

 * Calls prom.c's of_get_property() to return the value of the

 * attribute specified by @which

/* vio_find_name() - internal because only vio.c knows how we formatted the

 * kobject name

/**

 * vio_find_node - find an already-registered vio_dev

 * @vnode: device_node of the virtual device we're looking for

 *

 * Takes a reference to the embedded struct device which needs to be dropped

 * after use.

 construct the kobject name from the device node */

/*

 * IBM PowerPC IBM eBus Infrastructure Support.

 *

 * Copyright (c) 2005 IBM Corporation

 *  Joachim Fenkes <fenkes@de.ibm.com>

 *  Heiko J Schick <schickhj@de.ibm.com>

 *

 * All rights reserved.

 *

 * This source code is distributed under a dual license of GPL v2.0 and OpenIB

 * BSD.

 *

 * OpenIB BSD License

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions are met:

 *

 * Redistributions of source code must retain the above copyright notice, this

 * list of conditions and the following disclaimer.

 *

 * Redistributions in binary form must reproduce the above copyright notice,

 * this list of conditions and the following disclaimer in the documentation

 * and/or other materials

 * provided with the distribution.

 *

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE

 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF

 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR

 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER

 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)

 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE

 * POSSIBILITY OF SUCH DAMAGE.

 fake "parent" device */

 These devices will automatically be added to the bus during init */

 If the driver uses devices that ibmebus doesn't know, add them */

/*

 * ibmebus_bus_device_attrs

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2020-21 IBM Corp.

 The hypervisor allows one credit per window right now */

 Check if we are stalled for some time */

/*

 * Allocate VAS window hcall

/*

 * Deallocate VAS window hcall.

/*

 * Modify VAS window.

 * After the window is opened with allocate window hcall, configure it

 * with flags and LPAR PID before using.

	/*

	 * AMR value is not supported in Linux VAS implementation.

	 * The hypervisor ignores it if 0 is passed.

/*

 * This hcall is used to determine the capabilities from the hypervisor.

 * @hcall: H_QUERY_VAS_CAPABILITIES or H_QUERY_NX_CAPABILITIES

 * @query_type: If 0 is passed, the hypervisor returns the overall

 *		capabilities which provides all feature(s) that are

 *		available. Then query the hypervisor to get the

 *		corresponding capabilities for the specific feature.

 *		Example: H_QUERY_VAS_CAPABILITIES provides VAS GZIP QoS

 *			and VAS GZIP Default capabilities.

 *			H_QUERY_NX_CAPABILITIES provides NX GZIP

 *			capabilities.

 * @result: Return buffer to save capabilities.

/*

 * hcall to get fault CRB from the hypervisor.

/*

 * Handle the fault interrupt.

 * When the fault interrupt is received for each window, query the

 * hypervisor to get the fault CRB on the specific fault. Then

 * process the CRB by updating CSB or send signal if the user space

 * CSB is invalid.

 * Note: The hypervisor forwards an interrupt for each fault request.

 *	So one fault CRB to process for each H_GET_NX_FAULT hcall.

/*

 * Allocate window and setup IRQ mapping.

	/*

	 * On PowerVM, the hypervisor setup and forwards the fault

	 * interrupt per window. So the IRQ setup and fault handling

	 * will be done for each open window separately.

	/*

	 * A VAS window can have many credits which means that many

	 * requests can be issued simultaneously. But the hypervisor

	 * restricts one credit per window.

	 * The hypervisor introduces 2 different types of credits:

	 * Default credit type (Uses normal priority FIFO):

	 *	A limited number of credits are assigned to partitions

	 *	based on processor entitlement. But these credits may be

	 *	over-committed on a system depends on whether the CPUs

	 *	are in shared or dedicated modes - that is, more requests

	 *	may be issued across the system than NX can service at

	 *	once which can result in paste command failure (RMA_busy).

	 *	Then the process has to resend requests or fall-back to

	 *	SW compression.

	 * Quality of Service (QoS) credit type (Uses high priority FIFO):

	 *	To avoid NX HW contention, the system admins can assign

	 *	QoS credits for each LPAR so that this partition is

	 *	guaranteed access to NX resources. These credits are

	 *	assigned to partitions via the HMC.

	 *	Refer PAPR for more information.

	 *

	 * Allocate window with QoS credits if user requested. Otherwise

	 * default credits are used.

		/*

		 * The user space is requesting to allocate a window on

		 * a VAS instance where the process is executing.

		 * On PowerVM, domain values are passed to the hypervisor

		 * to select VAS instance. Useful if the process is

		 * affinity to NUMA node.

		 * The hypervisor selects VAS instance if

		 * VAS_DEFAULT_DOMAIN_ID (-1) is passed for domain values.

		 * The h_allocate_vas_window hcall is defined to take a

		 * domain values as specified by h_home_node_associativity,

		 * So no unpacking needs to be done.

	/*

	 * Allocate / Deallocate window hcalls and setup / free IRQs

	 * have to be protected with mutex.

	 * Open VAS window: Allocate window hcall and setup IRQ

	 * Close VAS window: Deallocate window hcall and free IRQ

	 *	The hypervisor waits until all NX requests are

	 *	completed before closing the window. So expects OS

	 *	to handle NX faults, means IRQ can be freed only

	 *	after the deallocate window hcall is returned.

	 * So once the window is closed with deallocate hcall before

	 * the IRQ is freed, it can be assigned to new allocate

	 * hcall with the same fault IRQ by the hypervisor. It can

	 * result in setup IRQ fail for the new window since the

	 * same fault IRQ is not freed by the OS before.

	/*

	 * Modify window and it is ready to use.

	/*

	 * Window is not operational. Free IRQ before closing

	 * window so that do not have to hold mutex.

	/*

	 * The hypervisor waits for all requests including faults

	 * are processed before closing the window - Means all

	 * credits have to be returned. In the case of fault

	 * request, a credit is returned after OS issues

	 * H_GET_NX_FAULT hcall.

	 * So free IRQ after executing H_DEALLOCATE_VAS_WINDOW

	 * hcall.

 Should not happen */

 Open and configure window */

 To do copy/paste */

 Close window */

/*

 * Supporting only nx-gzip coprocessor type now, but this API code

 * extended to other coprocessor types later.

/*

 * Get the specific capabilities based on the feature type.

 * Right now supports GZIP default and GZIP QoS capabilities.

	/*

	 * Linux supports user space COPY/PASTE only with Radix

	/*

	 * Get VAS overall capabilities by passing 0 to feature type.

	/*

	 * QOS capabilities available

	/*

	 * Default capabilities available

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PCI Dynamic LPAR, PCI Hot Plug and PCI EEH recovery code

 * for RPA-compliant PPC64 platform.

 * Copyright (C) 2003 Linda Xie <lxie@us.ibm.com>

 * Copyright (C) 2005 International Business Machines

 *

 * Updates, 2005, John Rose <johnrose@austin.ibm.com>

 * Updates, 2005, Linas Vepstas <linas@austin.ibm.com>

 Create EEH devices for the PHB */

 RPA-specific bits for removing PHBs */

 We cannot to remove a root bus that has children */

	/* We -know- there aren't any child devices anymore at this stage

	 * and thus, we can safely unmap the IO space as it's not in use

 Remove the PCI bus and unregister the bridge device from sysfs */

 Now release the IO resource */

 Release memory resources */

	/*

	 * The pci_controller data structure is freed by

	 * the pcibios_free_controller_deferred() callback;

	 * see pseries_root_bridge_prepare().

 SPDX-License-Identifier: GPL-2.0

/**

 * pseries_of_derive_parent - basically like dirname(1)

 * @path:  the full_name of a node to be added to the tree

 *

 * Returns the node which should be the parent of the node

 * described by path.  E.g., for path = "/foo/bar", returns

 * the node with full_name = "/foo".

 We do not want the trailing '/' character */

 reject if path is "/" */

 Helper Routines to convert between drc_index to cpu numbers */

 Get drc-type:encode-string */

 Get drc-name-prefix:encode-string */

 Get drc-index-start:encode-int */

 Get drc-name-suffix-start:encode-int */

 Get number-sequential-elements:encode-int */

 Get sequential-increment:encode-int */

 Get drc-power-domain:encode-int */

 Should now know end of current entry */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2001 Dave Engebretsen IBM Corporation

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2013, Michael Ellerman, IBM Corporation.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2006 Mike Kravetz IBM Corporation

 *

 * Hypervisor Call Instrumentation

 For hcall instrumentation. One structure per-hcall, per-CPU */

 number of calls (on this CPU) */

 total wall time (mftb) of calls. */

 total cpu time (PURR) of calls. */

/*

 * Routines for displaying the statistics in debugfs

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2001 Mike Corrigan & Dave Engebretsen, IBM Corporation

 *

 * Rewrite, cleanup:

 *

 * Copyright (C) 2004 Olof Johansson <olof@lixom.net>, IBM Corporation

 * Copyright (C) 2006 Olof Johansson <olof@lixom.net>

 *

 * Dynamic DMA mapping support, pSeries-specific parts, both SMP and LPAR.

 Read allowed

 can't move this out since we might cross MEMBLOCK boundary */

 to protect tcep and the page behind it */

	/* This is safe to do since interrupts are off when we're called

	 * from iommu_alloc{,_sg}()

 If allocation fails, fall back to the loop implementation */

 We can map max one pageful of TCEs at a time */

		/*

		 * Set up the page with TCE data, looping through and setting

		 * the values.

 this is compatible with cells for the device tree property */

 tce table number */

 address hi,lo */

 ilog2(tce_page_size) */

 ilog2(tce_window_size) */

 Dynamic DMA Window support */

 prevents races between memory on/offline and window creation */

 protects initializing window twice for same device */

 round back to the beginning of the tce page size */

 covert to number of tces */

		/*

		 * Set up the page with TCE data, looping through and setting

		 * the values.

 to protect tcep and the page behind it */

 round back to the beginning of the tce page size */

 covert to number of tces */

 We can map max one pageful of TCEs at a time */

		/*

		 * Set up the page with TCE data, looping through and setting

		 * the values.

 error cleanup: caller will clear whole range */

 Test if we are going over 2GB of DMA space */

/*

 * iommu_table_setparms_lpar

 *

 * Function: On pSeries LPAR systems, return TCE table info, given a pci bus.

		/* This is not a root bus, any setup will be done for the

		 * device-side of the bridge in iommu_dev_setup_pSeries().

	/* Check if the ISA bus on the system is under

	 * this PHB.

 Count number of direct PCI children of the PHB. */

	/* Calculate amount of DMA window per slot. Each window must be

	 * a power of two (due to pci_alloc_consistent requirements).

	 *

	 * Keep 256MB aside for PHBs with ISA.

 No ISA/IDE - just set window size and return */

 To be divided */

	/* If we have ISA, then we probably have an IDE

	 * controller too. Allocate a 128MB table but

	 * skip the first 128MB to avoid stepping on ISA

	 * space.

 Divide the rest (1.75GB) among the children */

	/*

	 * Find nearest ibm,dma-window (default DMA window), walking up the

	 * device tree

	/* If we're the direct child of a root bus, then we need to allocate

	 * an iommu table ourselves. The bus setup code should have setup

	 * the window sizes already.

	/* If this device is further down the bus tree, search upwards until

	 * an already allocated iommu table is found and use that.

/*

 * Call only if DMA window is clean.

 check if we already created a window and dupe that config if so */

/**

 * ddw_read_ext - Get the value of an DDW extension

 * @np:		device node from which the extension value is to be read.

 * @extnum:	index number of the extension.

 * @value:	pointer to return value, modified when extension is available.

 *

 * Checks if "ibm,ddw-extensions" exists for this node, and get the value

 * on index 'extnum'.

 * It can be used only to check if a property exists, passing value == NULL.

 *

 * Returns:

 *	0 if extension successfully read

 *	-EINVAL if the "ibm,ddw-extensions" does not exist,

 *	-ENODATA if "ibm,ddw-extensions" does not have a value, and

 *	-EOVERFLOW if "ibm,ddw-extensions" does not contain this extension.

	/*

	 * From LoPAR level 2.8, "ibm,ddw-extensions" index 3 can rule how many

	 * output parameters ibm,query-pe-dma-windows will have, ranging from

	 * 5 to 6.

	/*

	 * Get the config address and phb buid of the PE window.

	 * Rely on eeh to retrieve this for us.

	 * Retrieve them from the pci device, not the node with the

	 * dma-window property

	/*

	 * Get the config address and phb buid of the PE window.

	 * Rely on eeh to retrieve this for us.

	 * Retrieve them from the pci device, not the node with the

	 * dma-window property

 extra outputs are LIOBN and dma-addr (hi, lo) */

/*

 * Platforms supporting the DDW option starting with LoPAR level 2.7 implement

 * ibm,ddw-extensions, which carries the rtas token for

 * ibm,reset-pe-dma-windows.

 * That rtas-call can be used to restore the default DMA window for the device.

 Return largest page shift based on "IO Page Sizes" output of ibm,query-pe-dma-window. */

 Supported IO page-sizes according to LoPAR, note that 2M is out of order */

	/*

	 * On LoPAR, ibm,query-pe-dma-window outputs "IO Page Sizes" using a bit field:

	 * - bit 31 means 4k pages are supported,

	 * - bit 30 means 64k pages are supported, and so on.

	 * Larger pagesizes map more memory with the same amount of TCEs, so start probing them.

/*

 * If the PE supports dynamic dma windows, and there is space for a table

 * that can map all pages in a linear offset, then setup such a table,

 * and record the dma-offset in the struct device.

 *

 * dev: the pci device we are checking

 * pdn: the parent pe node with the ibm,dma_window property

 * Future: also check if we can remap the base window for our base page size

 *

 * returns true if can map all pages (direct mapping), false otherwise..

	/*

	 * If we already went through this for a previous function of

	 * the same device and failed, we don't want to muck with the

	 * DMA window again, as it will race with in-flight operations

	 * and can lead to EEHs. The above mutex protects access to the

	 * list.

	/*

	 * the ibm,ddw-applicable property holds the tokens for:

	 * ibm,query-pe-dma-window

	 * ibm,create-pe-dma-window

	 * ibm,remove-pe-dma-window

	 * for the given node in that order.

	 * the property is actually in the parent, not the PE

       /*

	 * Query if there is a second window of size to map the

	 * whole partition.  Query returns number of windows, largest

	 * block assigned to PE (partition endpoint), and two bitmasks

	 * of page sizes: supported and supported for migrate-dma.

	/*

	 * If there is no window available, remove the default DMA window,

	 * if it's present. This will make all the resources available to the

	 * new DDW window.

	 * If anything fails after this, we need to restore it, so also check

	 * for extensions presence.

 DDW + IOMMU on single window may fail if there is any allocation */

 Query again, to check if the window is available */

 no windows are available for this device. */

	/*

	 * The "ibm,pmemory" can appear anywhere in the address space.

	 * Assuming it is still backed by page structs, try MAX_PHYSMEM_BITS

	 * for the upper limit and fallback to max RAM otherwise but this

	 * disables device::dma_ops_bypass.

 check if the available block * number of ptes will map everything */

 DDW maps the whole partition, so enable direct DMA mapping */

 Make sure to clean DDW if any TCE was set*/

 Look for MMIO32 */

 New table for using DDW instead of the default DMA window */

 Keep default DMA window stuct if removed */

 DDW is clean, so it's ok to call this directly. */

	/*

	 * If we have persistent memory and the window size is only as big

	 * as RAM, then we failed to create a window to cover persistent

	 * memory and need to set the DMA limit.

	/* dev setup for LPAR is a little tricky, since the device tree might

	 * contain the dma-window properties per-device and not necessarily

	 * for the bus. So we need to search upwards in the tree until we

	 * either hit a dma-window property, OR find a parent with a table

	 * already allocated.

 only attempt to use a new window if 64-bit DMA is requested */

	/*

	 * the device tree might contain the dma-window properties

	 * per-device and not necessarily for the bus. So we need to

	 * search upwards in the tree until we either hit a dma-window

	 * property, OR find a parent with a table already allocated.

 XXX log error */

 XXX log error */

		/*

		 * Removing the property will invoke the reconfig

		 * notifier again, which causes dead-lock on the

		 * read-write semaphore of the notifier chain. So

		 * we have to remove the property when releasing

		 * the device node.

 These are called very early. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Virtual Processor Dispatch Trace Log

 *

 * (C) Copyright IBM Corporation 2009

 *

 * Author: Jeremy Kerr <jk@ozlabs.org>

/*

 * Size of per-cpu log buffers. Firmware requires that the buffer does

 * not cross a 4k boundary.

/*

 * The cpu accounting code controls the DTL ring buffer, and we get

 * given entries as they are processed.

 check for hypervisor ring buffer overflow, ignore this entry if so */

 incrementing write_index makes the new entry visible */

 setting write_ptr enables logging into our buffer */

 enable event logging */

 restore dtl_enable_mask */

 CONFIG_VIRT_CPU_ACCOUNTING_NATIVE */

	/* Register our dtl buffer with the hypervisor. The HV expects the

 set our initial buffer indices */

	/* ensure that our updates to the lppaca fields have occurred before

 enable event logging */

 CONFIG_VIRT_CPU_ACCOUNTING_NATIVE */

 only allow one reader */

 ensure there are no other conflicting dtl users */

 store the original allocation size for use during read */

 file interface */

 requested number of entries to read */

 actual number of entries read */

 read the tail of the buffer if we've wrapped */

 .. and now the head */

 set up common debugfs structure */

 set up the per-cpu log structures */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  c 2001 PPC 64 Team, IBM Corp

 *

 * scan-log-data driver for PPC64  Todd Inglett <tinglett@vnet.ibm.com>

 *

 * When ppc64 hardware fails the service processor dumps internal state

 * of the system.  After a reboot the operating system can access a dump

 * of this data using this driver.  A dump exists if the device-tree

 * /chosen/ibm,scan-log-data property exists.

 *

 * This driver exports /proc/powerpc/scan-log-dump which can be read.

 * The driver supports only sequential reads.

 *

 * The driver looks at a write to the driver for the single word "reset".

 * If given, the driver will reset the scanlog so the platform can free it.

 Status returns from ibm,scan-log-dump */

 RTAS token */

 The data buffer */

		/* This is the min supported by this RTAS call.  Rather

		 * than do all the buffering we insist the user code handle

		 * larger reads.  As long as cp works... :)

 default wait if no data */

 We may or may not have data yet */

 Break to sleep default time */

 Assume extended busy */

 Apparently no data yet.  Wait and try again. */

NOTREACHED*/

		/* This imperfect test stops a second copy of the

		 * data (or a reset while data is being copied)

 re-init so we restart the scan */

 Ideally we could allocate a buffer < 4G */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * pSeries_reconfig.c - support for dynamic reconfiguration (including PCI

 * Hotplug and Dynamic Logical Partitioning on RPA platforms).

 *

 * Copyright (C) 2005 Nathan Lynch

 * Copyright (C) 2005 IBM Corporation

/*

 * /proc/powerpc/ofdt - yucky binary interface for adding and removing

 * OF device nodes.  Should be deprecated as soon as we get an

 * in-kernel wrapper for the RTAS ibm,configure-connector call.

/**

 * parse_next_property - process the next property from raw input buffer

 * @buf: input buffer, must be nul-terminated

 * @end: end of the input buffer + 1, for validation

 * @name: return value; set to property name in buf

 * @length: return value; set to length of value

 * @value: return value; set to the property value in buf

 *

 * Note that the caller must make copies of the name and value returned,

 * this function does no allocation or copying of the data.  Return value

 * is set to the next name in buf, or NULL on error.

 now we're on the length */

 now we're on the value */

 and now we should be on the next name, or the end */

 rv = build_prop_list(tmp, bufsize - (tmp - buf), &proplist); */

/**

 * ofdt_write - perform operations on the Open Firmware device tree

 *

 * @file: not used

 * @buf: command and arguments

 * @count: size of the command buffer

 * @off: not used

 *

 * Operations supported at this time are addition and removal of

 * whole nodes along with their properties.  Operations on individual

 * properties are not implemented (yet).

 create /proc/powerpc/ofdt write-only by root */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * pSeries_lpar.c

 * Copyright (C) 2001 Todd Inglett, IBM Corporation

 *

 * pSeries LPAR support.

 Enables debugging of low-level hash table routines - careful! */

 Flag bits for H_BULK_REMOVE */

 in hvCall.S */

/*

 * H_BLOCK_REMOVE supported block size for this page size in segment who's base

 * page size is that page size.

 *

 * The first index is the segment base page size, the second one is the actual

 * page size.

/*

 * Due to the involved complexity, and that the current hypervisor is only

 * returning this value or 0, we are limiting the support of the H_BLOCK_REMOVE

 * buffer size to 8 size block.

 hypervisor reads buffer length from this field */

/*

 * This represents the number of cpus in the hypervisor. Since there is no

 * architected way to discover the number of processors in the host, we

 * provision for dealing with NR_CPUS. This is currently 2048 by default, and

 * is sufficient for our purposes. This will need to be tweaked if

 * CONFIG_NR_CPUS is changed.

 if we have been migrated away, we cancel ourself */

 buffer has overflowed */

 Setup dtl buffers and register those */

	/*

	 * Avoid smp_processor_id while preemptible. All CPUs should have

	 * the same value for lppaca_shared_proc.

 CONFIG_PPC_SPLPAR */

	/*

	 * The spec says it "may be problematic" if CPU x registers the VPA of

	 * CPU y. We should never do that, but wail if we ever do.

	/*

	 * PAPR says this feature is SLB-Buffer but firmware never

	 * reports that.  All SPLPAR support SLB shadow buffer.

 CONFIG_PPC_BOOK3S_64 */

	/*

	 * Register dispatch trace log, if one has been allocated.

 Now fill in the actual HPTE */

 Set CEC cookie to 0         */

 Zero page = 0               */

 I-cache Invalidate = 0      */

 I-cache synchronize = 0     */

 Exact = 0                   */

	/*

	 * Since we try and ioremap PHBs we don't own, the pte insert

	 * will fail. However we must catch the failure in hash_page

	 * or we will loop forever, so return -2 in this case.

	/* Because of iSeries, we have to pass down the secondary

	 * bucket bit here as well

 pick a random slot to start at */

 don't remove a bolted entry */

		/*

		 * The test for adjunct partition is performed before the

		 * ANDCOND test.  H_RESOURCE may be returned, so we need to

		 * check for that as well.

 Called during kexec sequence with MMU off */

	/* Read in batches of 4,

	 * invalidate only valid entries not in the VRMA

	 * hpte_count will be a multiple of 4

 Called during kexec sequence with MMU off */

 Called during kexec sequence with MMU off */

	/*

	 * Reset exceptions to big endian.

	 *

	 * FIXME this is a hack for kexec, we need to reset the exception

	 * endian before starting the new kernel and this is a convenient place

	 * to do it.

	 *

	 * This is also called on boot when a fadump happens. In that case we

	 * must not change the exception endian mode.

/*

 * NOTE: for updatepp ops we are fortunate that the linux "newpp" bits and

 * the low 3 bits of flags happen to line up.  So no transform is needed.

 * We can probably optimize here and assume the high bits of newpp are

 * already zero.  For now I am paranoid.

 Move pp0 into bit 8 (IBM 55) */

	/*

	 * We try to keep bolted entries always in primary hash

	 * But in some case we can find them in secondary too.

 Try in secondary */

 Move pp0 into bit 8 (IBM 55) */

/*

 * As defined in the PAPR's section 14.5.4.1.8

 * The control mask doesn't include the returned reference and change bit from

 * the processed PTE.

/*

 * Returned true if we are supporting this block size for the specified segment

 * base page size and actual page size.

 *

 * Currently, we only support 8 size block.

/**

 * H_BLOCK_REMOVE caller.

 * @idx should point to the latest @param entry set with a PTEX.

 * If PTE cannot be processed because another CPUs has already locked that

 * group, those entries are put back in @param starting at index 1.

 * If entries has to be retried and @retry_busy is set to true, these entries

 * are retried until success. If @retry_busy is set to false, the returned

 * is the number of entries yet to process.

 AVA */

 TS0-7 */

 Check that the unprocessed entries were 'not found' or 'busy' */

	/*

	 * If there were entries found busy, retry these entries if requested,

	 * of if all the entries have to be retried.

/*

 * Limit iterations holding pSeries_lpar_tlbie_lock to 3. We also need

 * to make sure that we avoid bouncing the hypervisor tlbie lock.

		/*

		 * Shifting 3 bits more on the right to get a

		 * 8 pages aligned virtual addresse.

			/*

			 * Need to start a new 8 pages block, flush

			 * the current one if needed.

			/*

			 * pix = 0 means that all the entries were

			 * removed, we can start a new block.

			 * Otherwise, this means that there are entries

			 * to retry, and pix points to latest one, so

			 * we should increment it and try to continue

			 * the same block.

 Assuming THP size is 16M */

 get the vpn */

			/*

			 * Now do a bluk invalidate

	/*

	 * lpar doesn't use the passed actual page size

/**

 * The hcall H_BLOCK_REMOVE implies that the virtual pages to processed are

 * "all within the same naturally aligned 8 page virtual address block".

			/*

			 * Shifting 3 bits more on the right to get a

			 * 8 pages aligned virtual addresse.

				/*

				 * Need to start a new 8 pages block, flush

				 * the current one if needed.

				/*

				 * pix = 0 means that all the entries were

				 * removed, we can start a new block.

				 * Otherwise, this means that there are entries

				 * to retry, and pix points to latest one, so

				 * we should increment it and try to continue

				 * the same block.

/*

 * TLB Block Invalidate Characteristics

 *

 * These characteristics define the size of the block the hcall H_BLOCK_REMOVE

 * is able to process for each couple segment base page size, actual page size.

 *

 * The ibm,get-system-parameter properties is returning a buffer with the

 * following layout:

 *

 * [ 2 bytes size of the RTAS buffer (excluding these 2 bytes) ]

 * -----------------

 * TLB Block Invalidate Specifiers:

 * [ 1 byte LOG base 2 of the TLB invalidate block size being specified ]

 * [ 1 byte Number of page sizes (N) that are supported for the specified

 *          TLB invalidate block size ]

 * [ 1 byte Encoded segment base page size and actual page size

 *          MSB=0 means 4k segment base page size and actual page size

 *          MSB=1 the penc value in mmu_psize_def ]

 * ...

 * -----------------

 * Next TLB Block Invalidate Specifiers...

 * -----------------

 * [ 0 ]

/*

 * Decode the Encoded segment base page size and actual page size.

 * PAPR specifies:

 *   - bit 7 is the L bit

 *   - bits 0-5 are the penc value

 * If the L bit is 0, this means 4K segment base page size and actual page size

 * otherwise the penc value should be read.

 First, check the L bit, if not set, this means 4K */

/*

 * The size of the TLB Block Invalidate Characteristics is variable. But at the

 * maximum it will be the number of possible page sizes *2 + 10 bytes.

 * Currently MMU_PAGE_COUNT is 16, which means 42 bytes. Use a cache line size

 * (128 bytes) for the buffer to get plenty of space.

	/*

	 * The first two (2) bytes of the data in the buffer are the length of

	 * the returned data, not counting these first two (2) bytes.

/*

 * Take a spinlock around flushes to avoid bouncing the hypervisor tlbie

 * lock.

				/*

				 * lpar doesn't use the passed actual page size

 ms */

 Hypervisor has transitioned the HTAB, update our globals */

/*

 * Must be called in process context. The caller must hold the

 * cpus_lock.

 prepare with shift==0 cancels an in-progress resize */

 Continue on */

	/*

	 * On POWER9, we need to do a H_REGISTER_PROC_TBL hcall

	 * to inform the hypervisor that we wish to use the HPT.

 CONFIG_PPC_SMLPAR */

 CONFIG_PPC_BOOK3S_64 */

/*

 * We optimise our hcall path by placing hcall_tracepoint_refcount

 * directly in the TOC so we can check if the hcall tracepoints are

 * enabled via a single load.

 NB: reg/unreg are called while guarded with the tracepoints_mutex */

/*

 * Keep track of hcall tracing depth and prevent recursion. Warn if any is

 * detected because it may indicate a problem. This will not catch all

 * problems with tracing code making hcalls, because the tracing might have

 * been invoked from a non-hcall, so the first hcall could recurse into it

 * without warning here, but this better than nothing.

 *

 * Hcalls with specific problems being traced should use the _notrace

 * plpar_hcall variants.

 Don't warn again on the way out */

/**

 * h_get_mpp

 * H_GET_MPP hcall returns info in 7 parms

	/*

	 * vsid outside our range.

	/*

	 * If modinv is the modular multiplicate inverse of (x % vsid_modulus)

	 * and vsid = (protovsid * x) % vsid_modulus, then we say:

	 *   protovsid = (vsid * modinv) % vsid_modulus

 Check if (vsid * modinv) overflow (63 bits) */

	/*

	 * Reserve context ids which map to reserved virtual addresses. For now

	 * we only reserve the context id which maps to the VRMA VSID. We ignore

	 * the addresses in "ibm,adjunct-virtual-addresses" because we don't

	 * enable adjunct support via the "ibm,client-architecture-support"

	 * interface.

 debugfs file interface for vpa data */

 set up the per-cpu vpa file*/

 CONFIG_DEBUG_FS */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2010 2011 Mark Nelson and Tseng-Hui (Frank) Lin, IBM Corporation

/*

 * IO event interrupt is a mechanism provided by RTAS to return

 * information about hardware error and non-error events. Device

 * drivers can register their event handlers to receive events.

 * Device drivers are expected to use atomic_notifier_chain_register()

 * and atomic_notifier_chain_unregister() to register and unregister

 * their event handlers. Since multiple IO event types and scopes

 * share an IO event interrupt, the event handlers are called one

 * by one until the IO event is claimed by one of the handlers.

 * The event handlers are expected to return NOTIFY_OK if the

 * event is handled by the event handler or NOTIFY_DONE if the

 * event does not belong to the handler.

 *

 * Usage:

 *

 * Notifier function:

 * #include <asm/io_event_irq.h>

 * int event_handler(struct notifier_block *nb, unsigned long val, void *data) {

 * 	p = (struct pseries_io_event_sect_data *) data;

 * 	if (! is_my_event(p->scope, p->event_type)) return NOTIFY_DONE;

 * 		:

 * 		:

 * 	return NOTIFY_OK;

 * }

 * struct notifier_block event_nb = {

 * 	.notifier_call = event_handler,

 * }

 *

 * Registration:

 * atomic_notifier_chain_register(&pseries_ioei_notifier_list, &event_nb);

 *

 * Unregistration:

 * atomic_notifier_chain_unregister(&pseries_ioei_notifier_list, &event_nb);

/**

 * Find the data portion of an IO Event section from event log.

 * @elog: RTAS error/event log.

 *

 * Return:

 * 	pointer to a valid IO event section data. NULL if not found.

	/* We should only ever get called for io-event interrupts, but if

	 * we do get called for another type then something went wrong so

	 * make some noise about it.

	 * RTAS_TYPE_IO only exists in extended event log version 6 or later.

	 * No need to check event log version.

/*

 * PAPR:

 * - check-exception returns the first found error or event and clear that

 *   error or event so it is reported once.

 * - Each interrupt returns one event. If a plateform chooses to report

 *   multiple events through a single interrupt, it must ensure that the

 *   interrupt remains asserted until check-exception has been used to

 *   process all out-standing events for that interrupt.

 *

 * Implementation notes:

 * - Events must be processed in the order they are returned. Hence,

 *   sequential in nature.

 * - The owner of an event is determined by combinations of scope,

 *   event type, and sub-type. There is no easy way to pre-sort clients

 *   by scope or event type alone. For example, Torrent ISR route change

 *   event is reported with scope 0x00 (Not Applicable) rather than

 *   0x3B (Torrent-hub). It is better to let the clients to identify

 *   who owns the event.

 Time Critical */,

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2006 Jake Moilanen <moilanen@austin.ibm.com>, IBM Corp.

 * Copyright 2006-2007 Michael Ellerman, IBM Corp.

 RTAS Helpers */

	/*

	 * If the RTAS call succeeded, return the number of irqs allocated.

	 * If not, make sure we return a negative error code.

	/*

	 * disabling MSI with the explicit interface also disables MSI-X

		/* 

		 * may have failed because explicit interface is not

		 * present

 Be paranoid */

 Quota calculation */

 Found our PE and assume 8 at that point. */

 Get the top level device in the PE */

 We actually want the parent */

 Hardcode of 8 for old firmwares */

		/* We don't know if a driver will try to use MSI or MSI-X,

 Work out how many devices we have below this PE */

 else, we have some more calculating to do */

	/* If the quota isn't an integer multiple of the total, we can

 Divide any spare by the number of over-quota requestors */

 And finally clamp the request to the possibly adjusted quota */

	/* There's no way for us to express to firmware that we want

	 * a discontiguous, or non-zero based, range of MSI-X entries.

	/*

	 * We should only get in here for IODA1 configs. This is based on the

	 * fact that we using RTAS for MSIs, we don't have the 32 bit MSI RTAS

	 * support, and we are in a PCIe Gen2 slot.

	/*

	 * Firmware currently refuse any non power of two allocation

	 * so we round up if the quota will allow it.

	/*

	 * Try the new more explicit firmware interface, if that fails fall

	 * back to the old interface. The old interface is known to never

	 * return MSI-Xs.

				/*

				 * We only want to run the 32 bit MSI hack below if

				 * the max bus speed is Gen2 speed

/*

 * ->msi_free() is called before irq_domain_free_irqs_top() when the

 * handler data is still available. Use that to clear the XIVE

 * controller data.

/*

 * RTAS can not disable one MSI at a time. It's all or nothing. Do it

 * at the end after all IRQs have been freed.

	/*

	 * Do not update the MSIx vector table. It's not strictly necessary

	 * because the table is initialized by the underlying hypervisor, PowerVM

	 * or QEMU/KVM. However, if the MSIx vector entry is cleared, any further

	 * activation will fail. This can happen in some drivers (eg. IPR) which

	 * deactivate an IRQ used for testing MSI support.

 TODO: handle RTAS cleanup in ->msi_finish() ? */

 XIVE domain data is cleared through ->msi_free() */

 No LSI -> leave MSIs (if any) configured */

 No MSI -> MSIs can't have been assigned by fw, leave LSI */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * POWER platform energy management driver

 * Copyright (C) 2010 IBM Corporation

 *

 * This pseries platform device driver provides access to

 * platform energy management capabilities.

 Driver flags */

 Helper routines */

 Helper Routines to convert between drc_index to cpu numbers */

 Convert logical cpu number to core number */

		/*

		 * The first element of ibm,drc-indexes array is the

		 * number of drc_indexes returned in the list.  Hence

		 * thread_index+1 will get the drc_index corresponding

		 * to core number thread_index.

		/*

		 * First element in the array is the number of drc_indexes

		 * returned.  Search through the list to find the matching

		 * drc_index and get the core number

 Convert core number to logical cpu number */

/*

 * pseries hypervisor call H_BEST_ENERGY provides hints to OS on

 * preferred logical cpus to activate or deactivate for optimized

 * energy consumption.

 Something to show */

 Suppress last comma */

 Wrapper functions */

/*

 * Create sysfs interface:

 * /sys/devices/system/cpu/pseries_activate_hint_list

 * /sys/devices/system/cpu/pseries_deactivate_hint_list

 *	Comma separated list of cpus to activate or deactivate

 * /sys/devices/system/cpu/cpuN/pseries_activate_hint

 * /sys/devices/system/cpu/cpuN/pseries_deactivate_hint

 *	Per-cpu value of the hint

 H_BEST_ENERGY hcall not supported */

 Create the sysfs files */

 Removed entries on cleanup */

 Remove the sysfs files */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Secure VM platform

 *

 * Copyright 2018 IBM Corporation

 * Author: Anshuman Khandual <khandual@linux.vnet.ibm.com>

 Don't release the SWIOTLB buffer. */

	/*

	 * Since the guest memory is inaccessible to the host, devices always

	 * need to use the SWIOTLB buffer for DMA even if dma_capable() says

	 * otherwise.

 Share the SWIOTLB buffer with the host. */

/*

 * Initialize SWIOTLB. Essentially the same as swiotlb_init(), except that it

 * can allocate the buffer anywhere in memory. Since the hypervisor doesn't have

 * any addressing limitation, we don't need to allocate it in low addresses.

 There's one dispatch log per CPU. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright 2006 Michael Ellerman, IBM Corporation

	/*

	 * Don't risk a hypervisor call if we're crashing

	 * XXX: Why? The hypervisor is not crashing. It might be better

	 * to at least attempt unregister to avoid the hypervisor stepping

	 * on our memory.

 SPDX-License-Identifier: GPL-2.0

/*

 * The associativity domain numbers are returned from the hypervisor as a

 * stream of mixed 16-bit and 32-bit fields. The stream is terminated by the

 * special value of "all ones" (aka. 0xffff) and its size may not exceed 48

 * bytes.

 *

 *    --- 16-bit fields -->

 *  _________________________

 *  |  0  |  1  |  2  |  3  |   be_packed[0]

 *  ------+-----+-----+------

 *  _________________________

 *  |  4  |  5  |  6  |  7  |   be_packed[1]

 *  -------------------------

 *            ...

 *  _________________________

 *  | 20  | 21  | 22  | 23  |   be_packed[5]

 *  -------------------------

 *

 * Convert to the sequence they would appear in the ibm,associativity property.

 Let's fix the values returned by plpar_hcall9() */

			/*

			 * Let's concatenate the 16 bits of this field to the

			 * 15 lower bits of the previous field

 This is the list terminator */

 Data is in the lower 15 bits of this field */

			/*

			 * Data is in the lower 15 bits of this field

			 * concatenated with the next 16 bit field

 The first cell contains the length of the property */

 NOTE: This file is included by a selftest and built in userspace. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PowerPC64 LPAR Configuration Information Driver

 *

 * Dave Engebretsen engebret@us.ibm.com

 *    Copyright (c) 2003 Dave Engebretsen

 * Will Schmidt willschm@us.ibm.com

 *    SPLPAR updates, Copyright (c) 2003 Will Schmidt IBM Corporation.

 *    seq_file updates, Copyright (c) 2004 Will Schmidt IBM Corporation.

 * Nathan Lynch nathanl@austin.ibm.com

 *    Added lparcfg_write, Copyright (C) 2004 Nathan Lynch IBM Corporation.

 *

 * This driver creates a proc file at /proc/ppc64/lparcfg which contains

 * keyword - value pairs that specify the configuration of the partition.

/*

 * This isn't a module but we expose that to userspace

 * via /proc so leave the definitions here

 #define LPARCFG_DEBUG */

/*

 * Track sum of all purrs across all processors. This is used to further

 * calculate usage values by different applications

/*

 * Methods used to fetch LPAR data when running on a pSeries platform.

/*

 * H_GET_PPP hcall returns info in 4 parms.

 *  entitled_capacity,unallocated_capacity,

 *  aggregation, resource_capability).

 *

 *  R4 = Entitled Processor Capacity Percentage.

 *  R5 = Unallocated Processor Capacity Percentage.

 *  R6 (AABBCCDDEEFFGGHH).

 *      XXXX - reserved (0)

 *          XXXX - reserved (0)

 *              XXXX - Group Number

 *                  XXXX - Pool Number.

 *  R7 (IIJJKKLLMMNNOOPP).

 *      XX - reserved. (0)

 *        XX - bit 0-6 reserved (0).   bit 7 is Capped indicator.

 *          XX - variable processor Capacity Weight

 *            XX - Unallocated Variable Processor Capacity Weight.

 *              XXXX - Active processors in Physical Processor Pool.

 *                  XXXX  - Processors active on platform.

 *  R8 (QQQQRRRRRRSSSSSS). if ibm,partition-performance-parameters-level >= 1

 *	XXXX - Physical platform procs allocated to virtualization.

 *	    XXXXXX - Max procs capacity % available to the partitions pool.

 *	          XXXXXX - Entitled procs capacity % available to the

 *			   partitions pool.

	/*

	 * Show the local LPAR's affinity score.

	 *

	 * 0xB1 selects the Affinity_Domain_Info_By_Partition subcall.

	 * The score is at byte 0xB in the output buffer.

 local LPAR */

 v5+ for score */

/*

 * parse_ppp_data

 * Parse out the data returned from h_get_ppp and h_pic

 pool related entries are appropriate for shared configs */

 report pool_capacity in percentage */

	/* The last bits of information returned from h_get_ppp are only

	 * valid if the ibm,partition-performance-parameters-level

	 * property is >= 1.

/**

 * parse_mpp_data

 * Parse out data returned from h_get_mpp

/**

 * parse_mpp_x_data

 * Parse out data returned from h_get_mpp_x

/*

 * parse_system_parameter_string()

 * Retrieve the potential_processors, max_entitled_capacity and friends

 * through the get-system-parameter rtas call.  Replace keyword strings as

 * necessary.

 step over strlen value */

 avoid the empty string */

 skip the comma */

				/* code here to replace workbuffer contents

 back up over strlen value */

/* Return the number of processors in the system.

 * This function reads through the device tree and counts

 * the virtual processors, this does not include threads.

 this call handles the ibm,get-system-parameter contents */

 non SPLPAR case */

 Get our current parameters */

/**

 * update_mpp

 *

 * Update the memory entitlement and weight for the partition.  Caller must

 * specify either a new entitlement or weight, not both, to be updated

 * since the h_set_mpp call takes both entitlement and weight as parameters.

		/* Check with vio to ensure the new memory entitlement

		 * can be handled.

/*

 * Interface for changing system parameters (variable capacity weight

 * and entitled capacity).  Format of input is "param_name=value";

 * anything after value is ignored.  Valid parameters at this time are

 * "partition_entitled_capacity" and "capacity_weight".  We use

 * H_SET_PPP to alter parameters.

 *

 * This function should be invoked only on systems with

 * FW_FEATURE_SPLPAR.

 Allow writing if we have FW_FEATURE_SPLPAR */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Interface for power-management for ppc64 compliant platform

 *

 *  Manish Ahuja <mahuja@us.ibm.com>

 *

 *  Feb 2007

 *

 *  Copyright (C) 2007 IBM Corporation.

 default and normal state is 0 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2001 Dave Engebretsen, IBM Corporation

 * Copyright (C) 2003 Anton Blanchard <anton@au.ibm.com>, IBM

 *

 * pSeries specific routines for PCI.

	/*

	 * Add IBM loc code (slot) as a prefix to the device names for service

 Input:  Virtual Function BAR */

 Input:  Virtual Function Router ID */

 Output: Virtual Function PE Number */

 Reserved Space */

 create firmware structure to associate pes */

 Only zero is success */

 First integer stores max config */

 Anything other than zero is failure */

 Allocate PCI data */

 Releasing pe_num_map */

 Release PCI data */

/*

 * Assume the winbond 82c105 is the IDE controller on a

 * p610/p615/p630. We should probably be more careful in case

 * someone tries to plug in a similar adapter.

 Enable LEGIRQ to use INTC instead of ISA interrupts */

 zap the 2nd function of the winbond chip */

 Rely on the pcibios_free_controller_deferred() callback. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * pseries Memory Hotplug infrastructure.

 *

 * Copyright (C) 2008 Badari Pulavarty, IBM Corporation

 This fallback really only applies to pseries */

			/* We now know the size of memory@0, use this to find

			 * the first memoryblock and get its size.

	/*

	 * The ibm,associativity-lookup-arrays property is defined to be

	 * a 32-bit value specifying the number of associativity arrays

	 * followed by a 32-bitvalue specifying the number of entries per

	 * array, followed by the associativity arrays.

 increment the number of entries in the lookup array */

 copy the new associativity into the lookup array */

	/*

	 * The associativity lookup array index for this lmb is

	 * number of entries - 1 since we added its associativity

	 * to the end of the lookup array.

 Update memory regions for memory remove */

	/*

	 * Check to see if we are actually removing memory

	/*

	 * Find the base address and size of the memblock

	/*

	 * "reg" property represents (addr,size) tuple.

	/*

	 * Don't hot-remove memory that falls in fadump boot memory area

	 * and memory that is reserved for capturing old kernel memory.

 device_offline() will determine if we can actually remove this lmb */

 Update memory regions for memory remove */

 Validate that there are enough LMBs to satisfy the request */

		/* Mark this lmb so we can add it later if all of the

		 * requested LMBs cannot be removed.

	/*

	 * Validate that all LMBs in range are not reserved. Note that it

	 * is ok if they are !ASSIGNED since our goal here is to remove the

	 * LMB range, regardless of whether some LMBs were already removed

	 * by any other reason.

	 *

	 * This is a contrast to what is done in remove_by_count() where we

	 * check for both RESERVED and !ASSIGNED (via lmb_is_removable()),

	 * because we want to remove a fixed amount of LMBs in that function.

		/*

		 * dlpar_remove_lmb() will error out if the LMB is already

		 * !ASSIGNED, but this case is a no-op for us.

			/*

			 * Setting the isolation state of an UNISOLATED/CONFIGURED

			 * device to UNISOLATE is a no-op, but the hypervisor can

			 * use it as a hint that the LMB removal failed.

 CONFIG_MEMORY_HOTREMOVE */

 Find the node id for this LMB.  Fake one if necessary. */

 Add the memory */

 Validate that there are enough LMBs to satisfy the request */

		/* Mark this lmb so we can remove it later if all of the

		 * requested LMBs cannot be added.

 Validate that the LMBs in this range are not reserved */

 Fail immediately if the whole range can't be hot-added */

	/*

	 * Check to see if we are actually adding memory

	/*

	 * Find the base and size of the memblock

	/*

	 * "reg" property represents (addr,size) tuple.

	/*

	 * Update memory region to represent the memory add

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * hvcserver.c

 * Copyright (C) 2004 Ryan S Arnold, IBM Corporation

 *

 * PPC64 virtual I/O console server support.

/*

 * Convert arch specific return codes into relevant errnos.  The hvcs

 * functions aren't performance sensitive, so this conversion isn't an

 * issue.

/**

 * hvcs_free_partner_info - free pi allocated by hvcs_get_partner_info

 * @head: list_head pointer for an allocated list of partner info structs to

 *	free.

 *

 * This function is used to free the partner info list that was returned by

 * calling hvcs_get_partner_info().

 Helper function for hvcs_get_partner_info */

/**

 * hvcs_get_partner_info - Get all of the partner info for a vty-server adapter

 * @unit_address: The unit_address of the vty-server adapter for which this

 *	function is fetching partner info.

 * @head: An initialized list_head pointer to an empty list to use to return the

 *	list of partner info fetched from the hypervisor to the caller.

 * @pi_buff: A page sized buffer pre-allocated prior to calling this function

 *	that is to be used to be used by firmware as an iterator to keep track

 *	of the partner info retrieval.

 *

 * This function returns non-zero on success, or if there is no partner info.

 *

 * The pi_buff is pre-allocated prior to calling this function because this

 * function may be called with a spin_lock held and kmalloc of a page is not

 * recommended as GFP_ATOMIC.

 *

 * The first long of this buffer is used to store a partner unit address.  The

 * second long is used to store a partner partition ID and starting at

 * pi_buff[2] is the 79 character Converged Location Code (diff size than the

 * unsigned longs, hence the casting mumbo jumbo you see later).

 *

 * Invocation of this function should always be followed by an invocation of

 * hvcs_free_partner_info() using a pointer to the SAME list head instance

 * that was passed as a parameter to this function.

	/*

	 * Dealt with as longs because of the hcall interface even though the

	 * values are uint32_t.

 invalid parameters */

			/*

			 * Don't indicate that we've failed if we have

			 * any list elements.

 This indicates that there are no further partners */

		/* This is a very small struct and will be freed soon in

 copy the Null-term char too */

/**

 * hvcs_register_connection - establish a connection between this vty-server and

 *	a vty.

 * @unit_address: The unit address of the vty-server adapter that is to be

 *	establish a connection.

 * @p_partition_ID: The partition ID of the vty adapter that is to be connected.

 * @p_unit_address: The unit address of the vty adapter to which the vty-server

 *	is to be connected.

 *

 * If this function is called once and -EINVAL is returned it may

 * indicate that the partner info needs to be refreshed for the

 * target unit address at which point the caller must invoke

 * hvcs_get_partner_info() and then call this function again.  If,

 * for a second time, -EINVAL is returned then it indicates that

 * there is probably already a partner connection registered to a

 * different vty-server adapter.  It is also possible that a second

 * -EINVAL may indicate that one of the parms is not valid, for

 * instance if the link was removed between the vty-server adapter

 * and the vty adapter that you are trying to open.  Don't shoot the

 * messenger.  Firmware implemented it this way.

/**

 * hvcs_free_connection - free the connection between a vty-server and vty

 * @unit_address: The unit address of the vty-server that is to have its

 *	connection severed.

 *

 * This function is used to free the partner connection between a vty-server

 * adapter and a vty adapter.

 *

 * If -EBUSY is returned continue to call this function until 0 is returned.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2001 Dave Engebretsen IBM Corporation

 EPOW events counter variable */

 RTAS pseries MCE errorlog section. */

	/*

	 * sub_err_type (1 byte). Bit fields depends on error_type

	 *

	 *   MSB0

	 *   |

	 *   V

	 *   01234567

	 *   XXXXXXXX

	 *

	 * For error_type == MC_ERROR_TYPE_UE

	 *   XXXXXXXX

	 *   X		1: Permanent or Transient UE.

	 *    X		1: Effective address provided.

	 *     X	1: Logical address provided.

	 *      XX	2: Reserved.

	 *        XXX	3: Type of UE error.

	 *

	 * For error_type != MC_ERROR_TYPE_UE

	 *   XXXXXXXX

	 *   X		1: Effective address provided.

	 *    XXXXX	5: Reserved.

	 *         XX	2: Type of SLB/ERAT/TLB error.

 RTAS pseries MCE error types */

 RTAS pseries MCE error sub types */

/*

 * Enable the hotplug interrupt late because processing them may touch other

 * devices or systems (e.g. hugepages) that have not been initialized at the

 * subsys stage.

 Hotplug Events */

/*

 * Initialize handlers for the set of interrupts caused by hardware errors

 * and power system events.

 Internal Errors */

 EPOW Events */

 bottom 4 bits */

 bottom 4 bits */

 Increment epow events counter variable */

	/*

	 * Since PCI hotplug is not currently supported on pseries, put PCI

	 * hotplug events on the ras_log_buf to be handled by rtas_errd.

 Handle environmental and power warning (EPOW) interrupts. */

 Time Critical */

/*

 * Handle hardware error interrupts.

 *

 * RTAS check-exception is called to collect data on the exception.  If

 * the error is deemed recoverable, we log a warning and return.

 * For nonrecoverable errors, an error is logged and we stop all processing

 * as quickly as possible in order to prevent propagation of the failure.

 Time Critical */,

 format and print the extended information */

/*

 * Some versions of FWNMI place the buffer inside the 4kB page starting at

 * 0x7000. Other versions place it inside the rtas buffer. We check both.

 * Minimum size of the buffer is 16 bytes.

 Mask top two bits */

/*

 * Get the error information for errors coming through the

 * FWNMI vectors.  The pt_regs' r3 will be updated to reflect

 * the actual r3 if possible, and a ptr to the error log entry

 * will be returned if found.

 *

 * Use one buffer mce_data_buf per cpu to store RTAS error.

 *

 * The mce_data_buf does not have any locks or protection around it,

 * if a second machine check comes in, or a system reset is done

 * before we have logged the error, then we will get corruption in the

 * error log.  This is preferable over holding off on calling

 * ibm,nmi-interlock which would result in us checkstopping if a

 * second machine check did come in.

 restore original r3 */

 Use the per cpu buffer from paca to store rtas error log */

/* Call this when done with the data returned by FWNMI_get_errinfo.

 * It will release the saved data area for other CPUs in the

 * partition to receive FWNMI errors.

	/*

	 * On pseries, the machine check stack is limited to under 4GB, so

	 * args can be on-stack.

	/*

	 * Some firmware byteswaps SRR registers and gives incorrect SRR1. Try

	 * to detect the bad SRR1 pattern here. Flip the NIP back to correct

	 * endian for reporting purposes. Unfortunately the MSR can't be fixed,

	 * so clear it. It will be missing MSR_RI so we won't try to recover.

		/*

		 * Firmware (PowerVM and KVM) saves r3 to a save area like

		 * machine check, which is not exactly what PAPR (2.9)

		 * suggests but there is no way to detect otherwise, so this

		 * is the interface now.

		 *

		 * System resets do not save any error log or require an

		 * "ibm,nmi-interlock" rtas call to release.

 restore original r3 */

 need to perform reset */

			/*

			 * Store the old slb content in paca before flushing.

			 * Print this when we go to virtual mode.

			 * There are chances that we may hit MCE again if there

			 * is a parity error on the SLB entry we trying to read

			 * for saving. Hence limit the slb saving to single

			 * level of recursion.

 Platform corrected itself but could be degraded */

	/*

	 * Enable translation as we will be accessing per-cpu variables

	 * in save_mce_event() which may fall outside RMO region, also

	 * leave it enabled because subsequently we will be queuing work

	 * to workqueues where again per-cpu variables accessed, besides

	 * fwnmi_release_errinfo() crashes when called in realmode on

	 * pseries.

	 * Note: All the realmode handling like flushing SLB entries for

	 *       SLB multihit is done by now.

	/*

	 * Queue irq work to log this rtas event later.

	 * irq_work_queue uses per-cpu variables, so do this in virt

	 * mode as well.

/*

 * Process MCE rtas errlog event.

/*

 * See if we can recover from a machine check exception.

 * This is only called on power4 (or above) and only via

 * the Firmware Non-Maskable Interrupts (fwnmi) handler

 * which provides the error analysis for us.

 *

 * Return 1 if corrected (or delivered a signal).

 * Return 0 if there is nothing we can do.

 If MSR_RI isn't set, we cannot recover */

 Platform corrected itself */

 Fatal machine check */

		/*

		 * Try to kill processes if we get a synchronous machine check

		 * (e.g., one caused by execution of this instruction). This

		 * will devolve into a panic if we try to kill init or are in

		 * an interrupt etc.

		 *

		 * TODO: Queue up this address for hwpoisioning later.

		 * TODO: This is not quite right for d-side machine

		 *       checks ->nip is not necessarily the important

		 *       address.

			/*

			 * die() would kill the kernel, so better to go via

			 * the platform reboot code that will log the

			 * machine check.

/*

 * Handle a machine check.

 *

 * Note that on Power 4 and beyond Firmware Non-Maskable Interrupts (fwnmi)

 * should be present.  If so the handler which called us tells us if the

 * error was recovered (never true if RI=0).

 *

 * On hardware prior to Power 4 these exceptions were asynchronous which

 * means we can't tell exactly where it occurred and so we can't recover.

 Print things out */

		/*

		 * Call to fwnmi_release_errinfo() in real mode causes kernel

		 * to panic. Hence we will call it as soon as we go into

		 * virtual mode.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Support for Partition Mobility/Migration

 *

 * Copyright (C) 2010 Nathan Fontenot

 * Copyright (C) 2010 IBM Corporation

	/*

	 * The drivers that bind to nodes in the platform-facilities

	 * hierarchy don't support node removal, and the removal directive

	 * from firmware is always followed by an add of an equivalent

	 * node. The capability (e.g. RNG, encryption, compression)

	 * represented by the node is never interrupted by the migration.

	 * So ignore changes to this part of the tree.

	/* A negative 'vd' value indicates that only part of the new property

	 * value is contained in the buffer and we need to call

	 * ibm,update-properties again to get the rest of the value.

	 *

	 * A negative value is also the two's compliment of the actual value.

 partial property fixup */

		/* On the first call to ibm,update-properties for a node the

		 * the first property value descriptor contains an empty

		 * property name, the property value length encoded as u32,

		 * and the property value is the node path being updated.

 name only property, nothing to do */

	/*

	 * Since delete_dt_node() ignores this node type, this is the

	 * necessary counterpart. We also know that a platform-facilities

	 * node returned from dlpar_configure_connector() has children

	 * attached, and dlpar_attach_node() only adds the parent, leaking

	 * the children. So ignore these on the add side for now.

	/*

	 * We don't want CPUs to go online/offline while the device

	 * tree is being updated.

	/*

	 * It's common for the destination firmware to replace cache

	 * nodes.  Release all of the cacheinfo hierarchy's references

	 * before updating the device tree.

 Possibly switch to a new L1 flush type */

 Reinitialise system information for hv-24x7 */

	/*

	 * Wait for transition from H_VASI_ENABLED to

	 * H_VASI_SUSPENDING. Treat anything else as an error.

	/*

	 * Proceed even if H_VASI_STATE is unavailable. If H_JOIN or

	 * ibm,suspend-me are also unimplemented, we'll recover then.

	/*

	 * The destination processor model may have fewer SLB entries

	 * than the source. We reduce mmu_slb_size to a safe minimum

	 * before suspending in order to minimize the possibility of

	 * programming non-existent entries on the destination. If

	 * suspend fails, we restore it before returning. On success

	 * the OF reconfig path will update it from the new device

	 * tree after resuming on the destination.

/**

 * struct pseries_suspend_info - State shared between CPUs for join/suspend.

 * @counter: Threads are to increment this upon resuming from suspend

 *           or if an error is received from H_JOIN. The thread which performs

 *           the first increment (i.e. sets it to 1) is responsible for

 *           waking the other threads.

 * @done: False if join/suspend is in progress. True if the operation is

 *        complete (successful or not).

 Must ensure MSR.EE off for H_JOIN. */

		/*

		 * All other CPUs are offline or in H_JOIN. This CPU

		 * attempts the suspend.

		/*

		 * The suspend is complete and this cpu has received a

		 * prod, or we've received a stray prod from unrelated

		 * code (e.g. paravirt spinlocks) and we need to join

		 * again.

		 *

		 * This barrier orders the return from H_JOIN above vs

		 * the load of info->done. It pairs with the barrier

		 * in the wakeup/prod path below.

		/*

		 * This barrier orders the store to info->done vs subsequent

		 * H_PRODs to wake the other CPUs. It pairs with the barrier

		 * in the H_SUCCESS case above.

	/*

	 * Execution may have been suspended for several seconds, so

	 * reset the watchdog.

/*

 * Abort reason code byte 0. We use only the 'Migrating partition' value.

		/*

		 * Encountered an error. If the VASI stream is still

		 * in Suspending state, it's likely a transient

		 * condition related to some device in the partition

		 * and we can retry in the hope that the cause has

		 * cleared after some delay.

		 *

		 * A better design would allow drivers etc to prepare

		 * for the suspend and avoid conditions which prevent

		 * the suspend from succeeding. For now, we have this

		 * mitigation.

/*

 * Used by drmgr to determine the kernel behavior of the migration interface.

 *

 * Version 1: Performs all PAPR requirements for migration including

 *	firmware activation and device tree update.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  pSeries firmware setup code.

 *

 *  Portions from arch/powerpc/platforms/pseries/setup.c:

 *   Copyright (C) 1995  Linus Torvalds

 *   Adapted from 'alpha' version by Gary Thomas

 *   Modified by Cort Dougan (cort@cs.nmt.edu)

 *   Modified by PPC64 Team, IBM Corp

 *

 *  Portions from arch/powerpc/kernel/firmware.c

 *   Copyright (C) 2001 Ben. Herrenschmidt (benh@kernel.crashing.org)

 *   Modifications for ppc64:

 *    Copyright (C) 2003 Dave Engebretsen <engebret@us.ibm.com>

 *    Copyright (C) 2005 Stephen Rothwell, IBM Corporation

 *

 *  Copyright 2006 IBM Corporation.

/*

 * The names in this table match names in rtas/ibm,hypertas-functions.  If the

 * entry ends in a '*', only upto the '*' is matched.  Otherwise the entire

 * string must match.

/* Build up the firmware features bitmask using the contents of

 * device-tree/ibm,hypertas-functions.  Ultimately this functionality may

 * be moved into prom.c prom_init().

			/*

			 * If there is a '*' at the end of name, only check

			 * upto there

 we have a match */

/*

 * Called very early, MMU is off, device-tree isn't unflattened

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SMP support for pSeries machines.

 *

 * Dave Engebretsen, Peter Bergner, and

 * Mike Corrigan {engebret|bergner|mikec}@us.ibm.com

 *

 * Plus various changes from other IBM teams...

/*

 * The Primary thread of each non-boot processor was started from the OF client

 * interface by prom_hold_cpus and is spinning on secondary_hold_spinloop.

 Query where a cpu is now.  Return codes #defined in plpar_wrappers.h */

/**

 * smp_startup_cpu() - start the given cpu

 *

 * At boot time, there is nothing to do for primary threads which were

 * started from Open Firmware.  For anything else, call RTAS with the

 * appropriate start location.

 *

 * Returns:

 *	0	- failure

 *	1	- success

 Already started by OF and sitting in spin loop */

 Check to see if the CPU out of FW already for kexec */

	/* 

	 * If the RTAS start-cpu token does not exist then presume the

	 * cpu is already spinning.

	/*

	 * The processor is currently spinning, waiting for the

	 * cpu_start field to become non-zero After we set cpu_start,

	 * the processor will continue on to secondary_start

 Cause IPI as setup by the interrupt controller (xics or xive) */

 Use msgsndp doorbells target is a sibling, else use interrupt controller */

 No doorbell facility, must use the interrupt controller for IPIs */

 Doorbells can only be used for IPIs between SMT siblings */

		/*

		 * KVM emulates doorbells by disabling FSCR[MSGP] so msgsndp

		 * faults to the hypervisor which then reads the instruction

		 * from guest memory, which tends to be slower than using XIVE.

		/*

		 * XICS hcalls aren't as fast, so we can use msgsndp (which

		 * also helps exercise KVM emulation), however KVM can't

		 * emulate secure guests because it can't read the instruction

		 * out of their memory.

	/*

	 * Under PowerVM, FSCR[MSGP] is enabled as guest vCPU siblings are

	 * gang scheduled on the same physical core, so doorbells are always

	 * faster than the interrupt controller, and they can be used by

	 * secure guests.

 Use smp_muxed_ipi_message_pass */

 Filled at runtime by pSeries_smp_probe() */

 This is called very early */

	/*

	 * Mark threads which are still spinning in hold loops

	 *

	 * We know prom_init will not have started them if RTAS supports

	 * query-cpu-stopped-state.

 Non-lpar has additional take/give timebase */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Support for dynamic reconfiguration for PCI, Memory, and CPU

 * Hotplug and Dynamic Logical Partitioning on RPA platforms.

 *

 * Copyright (C) 2009 Nathan Fontenot

 * Copyright (C) 2009 IBM Corporation

		/* Since we release the rtas_data_buf lock between configure

		 * connector calls we want to re-populate the rtas_data_buffer

		 * with the contents of the previous call.

 pseries error logs are in BE format, convert to cpu type */

	/*

	 * Parse out the request from the user, this will be in the form:

	 * <resource> <action> <id_type> <id>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * hvconsole.c

 * Copyright (C) 2004 Hollis Blanchard, IBM Corporation

 * Copyright (C) 2004 IBM Corporation

 *

 * Additional Author(s):

 *  Ryan S. Arnold <rsa@us.ibm.com>

 *

 * LPAR console support.

/**

 * hvc_get_chars - retrieve characters from firmware for denoted vterm adapter

 * @vtermno: The vtermno or unit_address of the adapter from which to fetch the

 *	data.

 * @buf: The character buffer into which to put the character data fetched from

 *	firmware.

 * @count: not used?

/**

 * hvc_put_chars: send characters to firmware for denoted vterm adapter

 * @vtermno: The vtermno or unit_address of the adapter from which the data

 *	originated.

 * @buf: The character buffer that contains the character data to send to

 *	firmware. Must be at least 16 bytes, even if count is less than 16.

 * @count: Send this number of characters.

 hcall will ret H_PARAMETER if 'count' exceeds firmware max.*/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * The file intends to implement the platform dependent EEH operations on pseries.

 * Actually, the pseries platform is built based on RTAS heavily. That means the

 * pseries platform dependent EEH operations will be built on RTAS calls. The functions

 * are derived from arch/powerpc/platforms/pseries/eeh.c and necessary cleanup has

 * been done.

 *

 * Copyright Benjamin Herrenschmidt & Gavin Shan, IBM Corporation 2011.

 * Copyright IBM Corporation 2001, 2005, 2006

 * Copyright Dave Engebretsen & Todd Inglett 2001

 * Copyright Linas Vepstas 2005, 2006

 RTAS tokens */

		/*

		 * Last allow unfreeze return code used for retrieval

		 * by user space in eeh-sysfs to show the last command

		 * completion from platform.

		/*

		 * FIXME: This really should be handled by choosing the right

		 *        parent PE in in pseries_eeh_init_edev().

 Remove as it is adding to bus pe */

 Add as VF PE type */

/**

 * pseries_eeh_get_pe_config_addr - Find the pe_config_addr for a device

 * @pdn: pci_dn of the input device

 *

 * The EEH RTAS calls use a tuple consisting of: (buid_hi, buid_lo,

 * pe_config_addr) as a handle to a given PE. This function finds the

 * pe_config_addr based on the device's config addr.

 *

 * Keep in mind that the pe_config_addr *might* be numerically identical to the

 * device's config addr, but the two are conceptually distinct.

 *

 * Returns the pe_config_addr, or a negative error code.

		/*

		 * First of all, use function 1 to determine if this device is

		 * part of a PE or not. ret[0] being zero indicates it's not.

 Retrieve the associated PE config address with function 0 */

	/*

	 * PAPR does describe a process for finding the pe_config_addr that was

	 * used before the ibm,get-config-addr-info calls were added. However,

	 * I haven't found *any* systems that don't have that RTAS call

	 * implemented. If you happen to find one that needs the old DT based

	 * process, patches are welcome!

/**

 * pseries_eeh_phb_reset - Reset the specified PHB

 * @phb: PCI controller

 * @config_adddr: the associated config address

 * @option: reset option

 *

 * Reset the specified PHB/PE

 Reset PE through RTAS call */

 If fundamental-reset not supported, try hot-reset */

 We need reset hold or settlement delay */

/**

 * pseries_eeh_phb_configure_bridge - Configure PCI bridges in the indicated PE

 * @phb: PCI controller

 * @config_adddr: the associated config address

 *

 * The function will be called to reconfigure the bridges included

 * in the specified PE so that the mulfunctional PE would be recovered

 * again.

 Waiting 0.2s maximum before skipping configuration */

		/*

		 * If RTAS returns a delay value that's above 100ms, cut it

		 * down to 100ms in case firmware made a mistake.  For more

		 * on how these delay values work see rtas_busy_delay_time

 PAPR defines -3 as "Parameter Error" for this function: */

/*

 * Buffer for reporting slot-error-detail rtas calls. Its here

 * in BSS, and not dynamically alloced, so that it ends up in

 * RMO where RTAS can access it.

 Maximal number of capabilities */

/**

 * pseries_eeh_pe_get_parent - Retrieve the parent PE

 * @edev: EEH device

 *

 * The whole PEs existing in the system are organized as hierarchy

 * tree. The function is used to retrieve the parent PE according

 * to the parent EEH device.

	/*

	 * It might have the case for the indirect parent

	 * EEH device already having associated PE, but

	 * the direct parent EEH device doesn't have yet.

 We're poking out of PCI territory */

/**

 * pseries_eeh_init_edev - initialise the eeh_dev and eeh_pe for a pci_dn

 *

 * @pdn: PCI device node

 *

 * When we discover a new PCI device via the device-tree we create a

 * corresponding pci_dn and we allocate, but don't initialise, an eeh_dev.

 * This function takes care of the initialisation and inserts the eeh_dev

 * into the correct eeh_pe. If no eeh_pe exists we'll allocate one.

	/*

	 * Find the eeh_dev for this pdn. The storage for the eeh_dev was

	 * allocated at the same time as the pci_dn.

	 *

	 * XXX: We should probably re-visit that.

	/*

	 * If ->pe is set then we've already probed this device. We hit

	 * this path when a pci_dev is removed and rescanned while recovering

	 * a PE (i.e. for devices where the driver doesn't support error

	 * recovery).

 Check class/vendor/device IDs */

 Skip for PCI-ISA bridge */

	/*

	 * Update class code and mode of eeh device. We need

	 * correctly reflects that current device is root port

	 * or PCIe switch downstream port.

 first up, find the pe_config_addr for the PE containing the device */

 Try enable EEH on the fake PE */

	/*

	 * If the system supports EEH on this device then the eeh_dev was

	 * configured and inserted into a PE in pseries_eeh_init_edev()

/**

 * pseries_eeh_init_edev_recursive - Enable EEH for the indicated device

 * @pdn: PCI device node

 *

 * This routine must be used to perform EEH initialization for the

 * indicated PCI device that was added after system boot (e.g.

 * hotplug, dlpar).

/**

 * pseries_eeh_set_option - Initialize EEH or MMIO/DMA reenable

 * @pe: EEH PE

 * @option: operation to be issued

 *

 * The function is used to control the EEH functionality globally.

 * Currently, following options are support according to PAPR:

 * Enable EEH, Disable EEH, Enable MMIO and Enable DMA

	/*

	 * When we're enabling or disabling EEH functioality on

	 * the particular PE, the PE config address is possibly

	 * unavailable. Therefore, we have to figure it out from

	 * the FDT node.

 Not support */

/**

 * pseries_eeh_get_state - Retrieve PE state

 * @pe: EEH PE

 * @delay: suggested time to wait if state is unavailable

 *

 * Retrieve the state of the specified PE. On RTAS compliant

 * pseries platform, there already has one dedicated RTAS function

 * for the purpose. It's notable that the associated PE config address

 * might be ready when calling the function. Therefore, endeavour to

 * use the PE config address if possible. Further more, there're 2

 * RTAS calls for the purpose, we need to try the new one and back

 * to the old one if the new one couldn't work properly.

 Fake PE unavailable info */

 Parse the result out */

/**

 * pseries_eeh_reset - Reset the specified PE

 * @pe: EEH PE

 * @option: reset option

 *

 * Reset the specified PE

/**

 * pseries_eeh_get_log - Retrieve error log

 * @pe: EEH PE

 * @severity: temporary or permanent error log

 * @drv_log: driver log to be combined with retrieved error log

 * @len: length of driver log

 *

 * Retrieve the temporary or permanent error from the PE.

 * Actually, the error will be retrieved through the dedicated

 * RTAS call.

/**

 * pseries_eeh_configure_bridge - Configure PCI bridges in the indicated PE

 * @pe: EEH PE

 *

/**

 * pseries_eeh_read_config - Read PCI config space

 * @edev: EEH device handle

 * @where: PCI config space offset

 * @size: size to read

 * @val: return value

 *

 * Read config space from the speicifed device

/**

 * pseries_eeh_write_config - Write PCI config space

 * @edev: EEH device handle

 * @where: PCI config space offset

 * @size: size to write

 * @val: value to be written

 *

 * Write config space to the specified device

 NB: configure_bridge() does this */

/**

 * eeh_pseries_init - Register platform dependent EEH operations

 *

 * EEH initialization on pseries platform. This function should be

 * called before any EEH related functions.

 figure out EEH RTAS function call tokens */

	/*

	 * ibm,configure-pe and ibm,configure-bridge have the same semantics,

	 * however ibm,configure-pe can be faster.  If we can't find

	 * ibm,configure-pe then fall back to using ibm,configure-bridge.

	/*

	 * Necessary sanity check. We needn't check "get-config-addr-info"

	 * and its variant since the old firmware probably support address

	 * of domain/bus/slot/function for EEH RTAS operations.

 Initialize error log lock and size */

 Set EEH probe mode */

 Set EEH machine dependent code */

 Skip if the slot is empty

 invalid PE config addr */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Collaborative memory management interface.

 *

 * Copyright (C) 2008 IBM Corporation

 * Author(s): Brian King (brking@linux.vnet.ibm.com),

 protected by the hotplug mutex */

/**

 * cmm_alloc_pages - Allocate pages and mark them as loaned

 * @nr:	number of pages to allocate

 *

 * Return value:

 * 	number of pages requested to be allocated which were not

 Exit if a hotplug operation is in progress or occurred */

/**

 * cmm_free_pages - Free pages and mark them as active

 * @nr:	number of pages to free

 *

 * Return value:

 * 	number of pages requested to be freed which were not

/**

 * cmm_oom_notify - OOM notifier

 * @self:	notifier block struct

 * @dummy:	not used

 * @parm:	returned - number of pages freed

 *

 * Return value:

 * 	NOTIFY_OK

/**

 * cmm_get_mpp - Read memory performance parameters

 *

 * Makes hcall to query the current page loan request from the hypervisor.

 *

 * Return value:

 * 	nothing

/**

 * cmm_thread - CMM task thread

 * @dummy:	not used

 *

 * Return value:

 * 	0

/**

 * cmm_sysfs_register - Register with sysfs

 *

 * Return value:

 * 	0 on success / other on failure

/**

 * cmm_unregister_sysfs - Unregister from sysfs

 *

/**

 * cmm_reboot_notifier - Make sure pages are not still marked as "loaned"

 *

/**

 * cmm_memory_cb - Handle memory hotplug notifier calls

 * @self:	notifier block struct

 * @action:	action to take

 * @arg:	struct memory_notify data for handler

 *

 * Return value:

 *	NOTIFY_OK or notifier error based on subfunction return value

 *

	/*

	 * loan/"inflate" the newpage first.

	 *

	 * We might race against the cmm_thread who might discover after our

	 * loan request that another page is to be unloaned. However, once

	 * the cmm_thread runs again later, this error will automatically

	 * be corrected.

 Unlikely, but possible. Tell the caller not to retry now. */

 balloon page list reference */

	/*

	 * When we migrate a page to a different zone, we have to fixup the

	 * count of both involved zones as we adjusted the managed page count

	 * when inflating.

	/*

	 * activate/"deflate" the old page. We ignore any errors just like the

	 * other callers.

 balloon page list reference */

 CONFIG_BALLOON_COMPACTION */

 CONFIG_BALLOON_COMPACTION */

/**

 * cmm_init - Module initialization

 *

 * Return value:

 * 	0 on success / other on failure

/**

 * cmm_exit - Module exit

 *

 * Return value:

 * 	nothing

/**

 * cmm_set_disable - Disable/Enable CMM

 *

 * Return value:

 * 	0 on success / other on failure

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * pseries CPU Hotplug infrastructure.

 *

 * Split out from arch/powerpc/platforms/pseries/setup.c

 *  arch/powerpc/kernel/rtas.c, and arch/powerpc/platforms/pseries/smp.c

 *

 * Peter Bergner, IBM	March 2001.

 * Copyright (C) 2001 IBM.

 * Dave Engebretsen, Peter Bergner, and

 * Mike Corrigan {engebret|bergner|mikec}@us.ibm.com

 * Plus various changes from other IBM teams...

 *

 * Copyright (C) 2006 Michael Ellerman, IBM Corporation

 for idle_task_exit */

 This version can't take the spinlock, because it never returns */

/*

 * Record the CPU ids used on each nodes.

 * Protected by cpu_add_remove_lock.

 Should never get here... */

fix boot_cpuid here*/

 FIXME: abstract this to not be platform specific later on */

/*

 * pseries_cpu_die: Wait for the cpu to die.

 * @cpu: logical processor id of the CPU whose death we're awaiting.

 *

 * This function is called from the context of the thread which is performing

 * the cpu-offline. Here we wait for long enough to allow the cpu in question

 * to self-destroy so that the cpu-offline thread can send the CPU_DEAD

 * notifications.

 *

 * OTOH, pseries_cpu_offline_self() is called by the @cpu when it wants to

 * self-destruct.

/**

 * find_cpu_id_range - found a linear ranger of @nthreads free CPU ids.

 * @nthreads : the number of threads (cpu ids)

 * @assigned_node : the node it belongs to or NUMA_NO_NODE if free ids from any

 *                  node can be peek.

 * @cpu_mask: the returned CPU mask.

 *

 * Returns 0 on success.

 Get a bitmap of unoccupied slots. */

		/*

		 * Remove free ids previously assigned on the other nodes. We

		 * can walk only online nodes because once a node became online

		 * it is not turned offlined back.

 Found a range where we can insert the new cpu(s) */

/*

 * Update cpu_present_mask and paca(s) for a new cpu node.  The wrinkle

 * here is that a cpu device node may represent multiple logical cpus

 * in the SMT case.  We must honor the assumption in other code that

 * the logical ids for sibling SMT threads x and y are adjacent, such

 * that x^1 == y and y^1 == x.

	/*

	 * Fetch from the DT nodes read by dlpar_configure_connector() the NUMA

	 * node id the added CPU belongs to.

		/*

		 * Try again, considering the free CPU ids from the other node.

 Record the newly used CPU ids for the associate node. */

	/*

	 * If node is set to NUMA_NO_NODE, CPU ids have be reused from

	 * another node, remove them from its mask.

/*

 * Update the present map for a cpu node which is going away, and set

 * the hard id in the paca(s) to -1 to be consistent with boot time

 * convention for non-present cpus.

			/*

			 * device_offline() will return -EBUSY (via cpu_down()) if there

			 * is only one CPU left. Check it here to fail earlier and with a

			 * more informative error message, while also retaining the

			 * cpu_add_remove_lock to be sure that no CPUs are being

			 * online/offlined during this check.

 Assume cpu doesn't exist */

 First value of ibm,drc-info is number of drc-info records */

	/* Note that the format of the ibm,drc-indexes array is

	 * the number of entries in the array followed by the array

	 * of drc values so we start looking at index = 1.

	/*

	 * This device node is unattached but may have siblings; open-code the

	 * traversal.

 Regardless we are done with parent now */

			/*

			 * Setting the isolation state of an UNISOLATED/CONFIGURED

			 * device to UNISOLATE is a no-op, but the hypervisor can

			 * use it as a hint that the CPU removal failed.

 CONFIG_ARCH_CPU_PROBE_RELEASE */

 CONFIG_ARCH_CPU_PROBE_RELEASE */

 Processors can be added/removed only on LPAR */

 Record ids of CPU added at boot time */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Firmware-Assisted Dump support on POWERVM platform.

 *

 * Copyright 2011, Mahesh Salgaonkar, IBM Corporation.

 * Copyright 2019, Hari Bathini, IBM Corporation.

/*

 * This function is called in the capture kernel to get configuration details

 * setup in the first kernel and passed to the f/w.

	/*

	 * Start address of reserve dump area (permanent reservation) for

	 * re-registering FADump after dump capture.

	/*

	 * Fields for disk dump option.

	 * We are not using disk dump option, hence set these fields to 0.

 set 0 to disable an automatic dump-reboot. */

 Kernel dump sections */

 cpu state data section. */

 hpte region section */

 RMA region section */

 TODO: Add upper time limit for the delay */

 TODO: Add upper time limit for the delay */

 TODO: Add upper time limit for the delay */

 get the digits at the end */

/*

 * Read CPU state dump data and convert it into ELF notes.

 * The CPU dump starts with magic number "REGSAVE". NumCpusOffset should be

 * used to access the data to allow for additional fields to be added without

 * affecting compatibility. Each list of registers for a CPU starts with

 * "CPUSTRT" and ends with "CPUEND". Each register entry is of 16 bytes,

 * 8 Byte ASCII identifier and 8 Byte register value. The register entry

 * with identifier "CPUSTRT" and "CPUEND" contains 4 byte cpu id as part

 * of register value. For more details refer to PAPR document.

 *

 * Only for the crashing cpu we ignore the CPU dump data and get exact

 * state from fadump crash info structure populated by first kernel at the

 * time of crash.

 Lower 4 bytes of reg_value contains logical cpu id */

/*

 * Validate and process the dump data stored by firmware before exporting

 * it through '/proc/vmcore'.

 Check if the dump data is valid. */

 Validate the fadump crash info header */

	/*

	 * We are done validating dump info and elfcore header is now ready

	 * to be exported. set elfcorehdr_addr so that vmcore module will

	 * export the elfcore header through '/proc/vmcore'.

 Dump is active. Show reserved area start address. */

 Call ibm,os-term rtas call to trigger firmware assisted dump */

	/*

	 * Check if Firmware Assisted dump is supported. if yes, check

	 * if dump has been initiated on last reboot.

 Firmware supports 64-bit value for size, align it to pagesize. */

	/*

	 * The 'ibm,kernel-dump' rtas node is present only if there is

	 * dump data waiting for us.

	/* Get the sizes required to store dump data for the firmware provided

	 * dump sections.

	 * For each dump section type supported, a 32bit cell which defines

	 * the ID of a supported section followed by two 32 bit cells which

	 * gives the size of the section in bytes.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

  * Copyright (C) 2010 Brian King IBM Corporation

/**

 * pseries_suspend_begin - First phase of hibernation

 *

 * Check to ensure we are in a valid state to hibernate

 *

 * Return value:

 * 	0 on success / other on failure

 Make sure the state is valid */

/**

 * pseries_suspend_enter - Final phase of hibernation

 *

 * Return value:

 * 	0 on success / other on failure

/**

 * store_hibernate - Initiate partition hibernation

 * @dev:		subsys root device

 * @attr:		device attribute struct

 * @buf:		buffer

 * @count:		buffer size

 *

 * Write the stream ID received from the HMC to this file

 * to trigger hibernating the partition

 *

 * Return value:

 * 	number of bytes printed to buffer / other on failure

/**

 * show_hibernate - Report device tree update responsibilty

 * @dev:		subsys root device

 * @attr:		device attribute struct

 * @buf:		buffer

 *

 * Report whether a device tree update is performed by the kernel after a

 * resume, or if drmgr must coordinate the update from user space.

 *

 * Return value:

 *	0 if drmgr is to initiate update, and 1 otherwise

/**

 * pseries_suspend_sysfs_register - Register with sysfs

 *

 * Return value:

 * 	0 on success / other on failure

/**

 * pseries_suspend_init - initcall for pSeries suspend

 *

 * Return value:

 * 	0 on success / other on failure

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 platform setup routines.

 *

 *  Copyright (C) 2006 Sony Computer Entertainment Inc.

 *  Copyright 2006 Sony Corp.

 mutex synchronizing GPU accesses and video mode changes */

	/*

	 * lv1_pause() puts the PPE thread into inactive state until an

	 * irq on an unmasked plug exists. MSR[EE] has no effect.

	 * flags: 0 = wake on DEC interrupt, 1 = ignore DEC interrupt.

 never returns */

 never returns */

 never returns */

 the GPU requires 1 MiB alignment */

 Have to set at least one bit in the DABRX */

 hypervisor only allows us to set BTI, Kernel and user */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 time and rtc routines.

 *

 *  Copyright (C) 2006 Sony Computer Entertainment Inc.

 *  Copyright 2006 Sony Corp.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 pagetable management routines.

 *

 *  Copyright (C) 2006 Sony Computer Entertainment Inc.

 *  Copyright 2006, 2007 Sony Corporation

/**

 * enum lpar_vas_id - id of LPAR virtual address space.

 * @lpar_vas_id_current: Current selected virtual address space

 *

 * Identify the target LPAR address space.

	/*

	 * lv1_insert_htab_entry() will search for victim

	 * entry in both primary and secondary pte group

 talk hvc to replace entries BOLTED == 0 */

 all entries bolted !*/

	/*

	 * see if the entry is inserted into secondary pteg

	/*

	 * As lv1_read_htab_entries() does not give us the RPN, we can

	 * not synthesize the new hpte_r value here, and therefore can

	 * not update the hpte with lv1_insert_htab_entry(), so we

	 * instead invalidate it and ask the caller to update it via

	 * ps3_hpte_insert() by returning a -1 value.

 not found */

 entry found, just invalidate it */

 Called during kexec sequence with MMU off */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 hvcall exports for modules.

 *

 *  Copyright (C) 2006 Sony Computer Entertainment Inc.

 *  Copyright 2006 Sony Corp.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 address space management.

 *

 *  Copyright (C) 2006 Sony Computer Entertainment Inc.

 *  Copyright 2006 Sony Corp.

 valid htab sizes are {18,19,20} = 256K, 512K, 1M */

 HV limit of 1MB */

 CPU limit of 256KB */

============================================================================*/

 virtual address space routines                                             */

============================================================================*/

/**

 * struct mem_region - memory region structure

 * @base: base address

 * @size: size in bytes

 * @offset: difference between base and rm.size

 * @destroy: flag if region should be destroyed upon shutdown

/**

 * struct map - address space state variables holder

 * @total: total memory available as reported by HV

 * @vas_id - HV virtual address space id

 * @htab_size: htab size in bytes

 *

 * The HV virtual address space (vas) allows for hotplug memory regions.

 * Memory regions can be created and destroyed in the vas at runtime.

 * @rm: real mode (bootmem) region

 * @r1: highmem region(s)

 *

 * ps3 addresses

 * virt_addr: a cpu 'translated' effective address

 * phys_addr: an address in what Linux thinks is the physical address space

 * lpar_addr: an address in the HV virtual address space

 * bus_addr: an io controller 'translated' address on a device bus

/**

 * ps3_mm_phys_to_lpar - translate a linux physical address to lpar address

 * @phys_addr: linux physical address

/**

 * ps3_mm_vas_create - create the virtual address space

/**

 * ps3_mm_vas_destroy -

 *

 * called during kexec sequence with MMU off.

 Assume a single highmem region. */

 Assume a single highmem region. */

/**

 * ps3_mm_region_create - create a memory region in the vas

 * @r: pointer to a struct mem_region to accept initialized values

 * @size: requested region size

 *

 * This implementation creates the region with the vas large page size.

 * @size is rounded down to a multiple of the vas large page size.

/**

 * ps3_mm_region_destroy - destroy a memory region

 * @r: pointer to struct mem_region

============================================================================*/

 dma routines                                                               */

============================================================================*/

/**

 * dma_sb_lpar_to_bus - Translate an lpar address to ioc mapped bus address.

 * @r: pointer to dma region structure

 * @lpar_addr: HV lpar address

  /**

 * dma_chunk - A chunk of dma pages mapped by the io controller.

 * @region - The dma region that owns this chunk.

 * @lpar_addr: Starting lpar address of the area to map.

 * @bus_addr: Starting ioc bus address of the area to map.

 * @len: Length in bytes of the area to map.

 * @link: A struct list_head used with struct ps3_dma_region.chunk_list, the

 * list of all chuncks owned by the region.

 *

 * This implementation uses a very simple dma page manager

 * based on the dma_chunk structure.  This scheme assumes

 * that all drivers use very well behaved dma ops.

 intersection */

 below */

 above */

 we don't handle the multi-chunk case for now */

 intersection */

 below */

 above */

 put INVALID entry */

/**

 * dma_sb_map_pages - Maps dma pages into the io controller bus address space.

 * @r: Pointer to a struct ps3_dma_region.

 * @phys_addr: Starting physical address of the area to map.

 * @len: Length in bytes of the area to map.

 * c_out: A pointer to receive an allocated struct dma_chunk for this area.

 *

 * This is the lowest level dma mapping routine, and is the one that will

 * make the HV call to add the pages into the io controller address space.

 allocate IO address */

 first one */

 derive from last bus addr*/

 FIXME: check whether length exceeds region size */

 build ioptes for the area */

 be sure that last allocated one is inserted at head */

/**

 * dma_sb_region_create - Create a device dma region.

 * @r: Pointer to a struct ps3_dma_region.

 *

 * This is the lowest level dma region create routine, and is the one that

 * will make the HV call to create the region.

/**

 * dma_region_free - Free a device dma region.

 * @r: Pointer to a struct ps3_dma_region.

 *

 * This is the lowest level dma region free routine, and is the one that

 * will make the HV call to free the region.

/**

 * dma_sb_map_area - Map an area of memory into a device dma region.

 * @r: Pointer to a struct ps3_dma_region.

 * @virt_addr: Starting virtual address of the area to map.

 * @len: Length in bytes of the area to map.

 * @bus_addr: A pointer to return the starting ioc bus address of the area to

 * map.

 *

 * This is the common dma mapping routine.

 FIXME */

/**

 * dma_sb_unmap_area - Unmap an area of memory from a device dma region.

 * @r: Pointer to a struct ps3_dma_region.

 * @bus_addr: The starting ioc bus address of the area to unmap.

 * @len: Length in bytes of the area to unmap.

 *

 * This is the common dma unmap routine.

/**

 * dma_sb_region_create_linear - Setup a linear dma mapping for a device.

 * @r: Pointer to a struct ps3_dma_region.

 *

 * This routine creates an HV dma region for the device and maps all available

 * ram into the io controller bus address space.

 FIXME: need proper fix */

 force 16M dma pages for linear mapping */

 Map (part of) 1st RAM chunk */

 Map (part of) 2nd RAM chunk */

/**

 * dma_sb_region_free_linear - Free a linear dma mapping for a device.

 * @r: Pointer to a struct ps3_dma_region.

 *

 * This routine will unmap all mapped areas and free the HV dma region.

 Unmap (part of) 1st RAM chunk */

 Unmap (part of) 2nd RAM chunk */

/**

 * dma_sb_map_area_linear - Map an area of memory into a device dma region.

 * @r: Pointer to a struct ps3_dma_region.

 * @virt_addr: Starting virtual address of the area to map.

 * @len: Length in bytes of the area to map.

 * @bus_addr: A pointer to return the starting ioc bus address of the area to

 * map.

 *

 * This routine just returns the corresponding bus address.  Actual mapping

 * occurs in dma_region_create_linear().

/**

 * dma_unmap_area_linear - Unmap an area of memory from a device dma region.

 * @r: Pointer to a struct ps3_dma_region.

 * @bus_addr: The starting ioc bus address of the area to unmap.

 * @len: Length in bytes of the area to unmap.

 *

 * This routine does nothing.  Unmapping occurs in dma_sb_region_free_linear().

============================================================================*/

 system startup routines                                                    */

============================================================================*/

/**

 * ps3_mm_init - initialize the address space state variables

 this implementation assumes map.rm.base is zero */

 Check if we got the highmem region from an earlier boot step */

 correct map.total for the real total amount of memory we use */

/**

 * ps3_mm_shutdown - final cleanup of address space

 *

 * called during kexec sequence with MMU off.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 interrupt routines.

 *

 *  Copyright (C) 2006 Sony Computer Entertainment Inc.

 *  Copyright 2006 Sony Corp.

/**

 * struct ps3_bmp - a per cpu irq status and mask bitmap structure

 * @status: 256 bit status bitmap indexed by plug

 * @unused_1: Alignment

 * @mask: 256 bit mask bitmap indexed by plug

 * @unused_2: Alignment

 *

 * The HV maintains per SMT thread mappings of HV outlet to HV plug on

 * behalf of the guest.  These mappings are implemented as 256 bit guest

 * supplied bitmaps indexed by plug number.  The addresses of the bitmaps

 * are registered with the HV through lv1_configure_irq_state_bitmap().

 * The HV requires that the 512 bits of status + mask not cross a page

 * boundary.  PS3_BMP_MINALIGN is used to define this minimal 64 byte

 * alignment.

 *

 * The HV supports 256 plugs per thread, assigned as {0..255}, for a total

 * of 512 plugs supported on a processor.  To simplify the logic this

 * implementation equates HV plug value to Linux virq value, constrains each

 * interrupt to have a system wide unique plug number, and limits the range

 * of the plug values to map into the first dword of the bitmaps.  This

 * gives a usable range of plug values of  {NR_IRQS_LEGACY..63}.  Note

 * that there is no constraint on how many in this set an individual thread

 * can acquire.

 *

 * The mask is declared as unsigned long so we can use set/clear_bit on it.

/**

 * struct ps3_private - a per cpu data structure

 * @bmp: ps3_bmp structure

 * @bmp_lock: Synchronize access to bmp.

 * @ipi_debug_brk_mask: Mask for debug break IPIs

 * @ppe_id: HV logical_ppe_id

 * @thread_id: HV thread_id

 * @ipi_mask: Mask of IPI virqs

/**

 * ps3_chip_mask - Set an interrupt mask bit in ps3_bmp.

 * @virq: The assigned Linux virq.

 *

 * Sets ps3_bmp.mask and calls lv1_did_update_interrupt_mask().

/**

 * ps3_chip_unmask - Clear an interrupt mask bit in ps3_bmp.

 * @virq: The assigned Linux virq.

 *

 * Clears ps3_bmp.mask and calls lv1_did_update_interrupt_mask().

/**

 * ps3_chip_eoi - HV end-of-interrupt.

 * @virq: The assigned Linux virq.

 *

 * Calls lv1_end_of_interrupt_ext().

 non-IPIs are EOIed here. */

/**

 * ps3_irq_chip - Represents the ps3_bmp as a Linux struct irq_chip.

/**

 * ps3_virq_setup - virq related setup.

 * @cpu: enum ps3_cpu_binding indicating the cpu the interrupt should be

 * serviced on.

 * @outlet: The HV outlet from the various create outlet routines.

 * @virq: The assigned Linux virq.

 *

 * Calls irq_create_mapping() to get a virq and sets the chip data to

 * ps3_private data.

 This defines the default interrupt distribution policy. */

/**

 * ps3_virq_destroy - virq related teardown.

 * @virq: The assigned Linux virq.

 *

 * Clears chip data and calls irq_dispose_mapping() for the virq.

/**

 * ps3_irq_plug_setup - Generic outlet and virq related setup.

 * @cpu: enum ps3_cpu_binding indicating the cpu the interrupt should be

 * serviced on.

 * @outlet: The HV outlet from the various create outlet routines.

 * @virq: The assigned Linux virq.

 *

 * Sets up virq and connects the irq plug.

 Binds outlet to cpu + virq. */

/**

 * ps3_irq_plug_destroy - Generic outlet and virq related teardown.

 * @virq: The assigned Linux virq.

 *

 * Disconnects the irq plug and tears down virq.

 * Do not call for system bus event interrupts setup with

 * ps3_sb_event_receive_port_setup().

/**

 * ps3_event_receive_port_setup - Setup an event receive port.

 * @cpu: enum ps3_cpu_binding indicating the cpu the interrupt should be

 * serviced on.

 * @virq: The assigned Linux virq.

 *

 * The virq can be used with lv1_connect_interrupt_event_receive_port() to

 * arrange to receive interrupts from system-bus devices, or with

 * ps3_send_event_locally() to signal events.

/**

 * ps3_event_receive_port_destroy - Destroy an event receive port.

 * @virq: The assigned Linux virq.

 *

 * Since ps3_event_receive_port_destroy destroys the receive port outlet,

 * SB devices need to call disconnect_interrupt_event_receive_port() before

 * this.

	/*

	 * Don't call ps3_virq_destroy() here since ps3_smp_cleanup_cpu()

	 * calls from interrupt context (smp_call_function) when kexecing.

/**

 * ps3_sb_event_receive_port_setup - Setup a system bus event receive port.

 * @cpu: enum ps3_cpu_binding indicating the cpu the interrupt should be

 * serviced on.

 * @dev: The system bus device instance.

 * @virq: The assigned Linux virq.

 *

 * An event irq represents a virtual device interrupt.  The interrupt_id

 * coresponds to the software interrupt number.

 this should go in system-bus.c */

 this should go in system-bus.c */

	/*

	 * ps3_event_receive_port_destroy() destroys the IRQ plug,

	 * so don't call ps3_irq_plug_destroy() here.

/**

 * ps3_io_irq_setup - Setup a system bus io irq.

 * @cpu: enum ps3_cpu_binding indicating the cpu the interrupt should be

 * serviced on.

 * @interrupt_id: The device interrupt id read from the system repository.

 * @virq: The assigned Linux virq.

 *

 * An io irq represents a non-virtualized device interrupt.  interrupt_id

 * coresponds to the interrupt number of the interrupt controller.

	/*

	 * lv1_destruct_io_irq_outlet() will destroy the IRQ plug,

	 * so call ps3_irq_plug_destroy() first.

/**

 * ps3_vuart_irq_setup - Setup the system virtual uart virq.

 * @cpu: enum ps3_cpu_binding indicating the cpu the interrupt should be

 * serviced on.

 * @virt_addr_bmp: The caller supplied virtual uart interrupt bitmap.

 * @virq: The assigned Linux virq.

 *

 * The system supports only a single virtual uart, so multiple calls without

 * freeing the interrupt will return a wrong state error.

/**

 * ps3_spe_irq_setup - Setup an spe virq.

 * @cpu: enum ps3_cpu_binding indicating the cpu the interrupt should be

 * serviced on.

 * @spe_id: The spe_id returned from lv1_construct_logical_spe().

 * @class: The spe interrupt class {0,1,2}.

 * @virq: The assigned Linux virq.

 *

 defined(DEBUG) */

 Match all */

 check for ipi break first to stop this cpu ASAP */

 IPIs are EOIed here. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 flash memory os area.

 *

 *  Copyright (C) 2006 Sony Computer Entertainment Inc.

 *  Copyright 2006 Sony Corp.

/**

 * struct os_area_header - os area header segment.

 * @magic_num: Always 'cell_ext_os_area'.

 * @hdr_version: Header format version number.

 * @db_area_offset: Starting segment number of other os database area.

 * @ldr_area_offset: Starting segment number of bootloader image area.

 * @ldr_format: HEADER_LDR_FORMAT flag.

 * @ldr_size: Size of bootloader image in bytes.

 *

 * Note that the docs refer to area offsets.  These are offsets in units of

 * segments from the start of the os area (top of the header).  These are

 * better thought of as segment numbers.  The os area of the os area is

 * reserved for the os image.

/**

 * struct os_area_params - os area params segment.

 * @boot_flag: User preference of operating system, PARAM_BOOT_FLAG flag.

 * @num_params: Number of params in this (params) segment.

 * @rtc_diff: Difference in seconds between 1970 and the ps3 rtc value.

 * @av_multi_out: User preference of AV output, PARAM_AV_MULTI_OUT flag.

 * @ctrl_button: User preference of controller button config, PARAM_CTRL_BUTTON

 *	flag.

 * @static_ip_addr: User preference of static IP address.

 * @network_mask: User preference of static network mask.

 * @default_gateway: User preference of static default gateway.

 * @dns_primary: User preference of static primary dns server.

 * @dns_secondary: User preference of static secondary dns server.

 *

 * The ps3 rtc maintains a read-only value that approximates seconds since

 * 2000-01-01 00:00:00 UTC.

 *

 * User preference of zero for static_ip_addr means use dhcp.

 param 0 */

 param 1 */

 param 2 */

/**

 * struct os_area_db - Shared flash memory database.

 * @magic_num: Always '-db-'.

 * @version: os_area_db format version number.

 * @index_64: byte offset of the database id index for 64 bit variables.

 * @count_64: number of usable 64 bit index entries

 * @index_32: byte offset of the database id index for 32 bit variables.

 * @count_32: number of usable 32 bit index entries

 * @index_16: byte offset of the database id index for 16 bit variables.

 * @count_16: number of usable 16 bit index entries

 *

 * Flash rom storage for exclusive use by guests running in the other os lpar.

 * The current system configuration allocates 1K (two segments) for other os

 * use.

/**

 * enum os_area_db_owner - Data owners.

/**

 * struct saved_params - Static working copies of data from the PS3 'os area'.

 *

 * The order of preference we use for the rtc_diff source:

 *  1) The database value.

 *  2) The game os value.

 *  3) The number of seconds from 1970 to 2000.

/**

 * os_area_set_property - Add or overwrite a saved_params value to the device tree.

 *

 * Overwrites an existing property.

/**

 * os_area_get_property - Get a saved_params value from the device tree.

 *

/**

 * db_for_each_64 - Iterator for 64 bit entries.

 *

 * A NULL value for id can be used to match all entries.

 * OS_AREA_DB_OWNER_ANY and OS_AREA_DB_KEY_ANY can be used to match all.

 Rules to check db layout. */

/**

 * update_flash_db - Helper for os_area_queue_work_handler.

 *

 Read in header and db from flash. */

 Now got a good db offset and some maybe good db data. */

 Now got good db data. */

/**

 * os_area_queue_work_handler - Asynchronous write handler.

 *

 * An asynchronous write for flash memory and the device tree.  Do not

 * call directly, use os_area_queue_work().

/**

 * ps3_os_area_save_params - Copy data from os area mirror to @saved_params.

 *

 * For the convenience of the guest the HV makes a copy of the os area in

 * flash to a high address in the boot memory region and then puts that RAM

 * address and the byte count into the repository for retrieval by the guest.

 * We copy the data we want into a static variable and allow the memory setup

 * by the HV to be claimed by the memblock manager.

 *

 * The os area mirror will not be available to a second stage kernel, and

 * the header verify will fail.  In this case, the saved_params values will

 * be set from flash memory or the passed in device tree in ps3_os_area_init().

 Second stage kernels exit here. */

/**

 * ps3_os_area_init - Setup os area device tree properties as needed.

 Second stage kernels should have a dt entry. */

/**

 * ps3_os_area_get_rtc_diff - Returns the rtc diff value.

/**

 * ps3_os_area_set_rtc_diff - Set the rtc diff value.

 *

 * An asynchronous write is needed to support writing updates from

 * the timer interrupt context.

/**

 * ps3_os_area_get_av_multi_out - Returns the default video mode.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * udbg debug output routine via GELIC UDP broadcasts

 *

 * Copyright (C) 2007 Sony Computer Entertainment Inc.

 * Copyright 2006, 2007 Sony Corporation

 * Copyright (C) 2010 Hector Martin <hector@marcansoft.com>

 * Copyright (C) 2011 Andre Heider <a.heider@gmail.com>

 as defined by the hardware */

 all zeroes for tx */

 all zeroes for tx */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 Platform spu routines.

 *

 *  Copyright (C) 2006 Sony Computer Entertainment Inc.

 *  Copyright 2006 Sony Corp.

 spu_management_ops */

/**

 * enum spe_type - Type of spe to create.

 * @spe_type_logical: Standard logical spe.

 *

 * For use with lv1_construct_logical_spe().  The current HV does not support

 * any types other than those listed.

/**

 * struct spe_shadow - logical spe shadow register area.

 *

 * Read-only shadow of spe registers.

 0x0140 */

 0x0148 */

 0x0150 */

 0x0610 */

 0x0620 */

 0x0800 */

 0x0810 */

 0x0c00 */

 0x0f00 */

/**

 * enum spe_ex_state - Logical spe execution state.

 * @spe_ex_state_unexecutable: Uninitialized.

 * @spe_ex_state_executable: Enabled, not ready.

 * @spe_ex_state_executed: Ready for use.

 *

 * The execution state (status) of the logical spe as reported in

 * struct spe_shadow:spe_execution_status.

/**

 * struct priv1_cache - Cached values of priv1 registers.

 * @masks[]: Array of cached spe interrupt masks, indexed by class.

 * @sr1: Cached mfc_sr1 register.

 * @tclass_id: Cached mfc_tclass_id register.

/**

 * struct spu_pdata - Platform state variables.

 * @spe_id: HV spe id returned by lv1_construct_logical_spe().

 * @resource_id: HV spe resource id returned by

 * 	ps3_repository_read_spe_resource_id().

 * @priv2_addr: lpar address of spe priv2 area returned by

 * 	lv1_construct_logical_spe().

 * @shadow_addr: lpar address of spe register shadow area returned by

 * 	lv1_construct_logical_spe().

 * @shadow: Virtual (ioremap) address of spe register shadow area.

 * @cache: Cached values of priv1 registers.

/**

 * setup_areas - Map the spu regions into the address space.

 *

 * The current HV requires the spu shadow regs to be mapped with the

 * PTE page protection bits set as read-only.

 Init cached reg values to HV defaults. */

 For now, just go ahead and enable it. */

 Make sure the spu is in SPE_EX_STATE_EXECUTED. */

 need something better here!!! */

	/*

	 * For now, just create logical spus equal to the number

	 * of physical spus reserved for the partition.

/**

 * ps3_enable_spu - Enable SPU run control.

 *

 * An outstanding enhancement for the PS3 would be to add a guard to check

 * for incorrect access to the spu problem state when the spu context is

 * disabled.  This check could be implemented with a flag added to the spu

 * context that would inhibit mapping problem state pages, and a routine

 * to unmap spu problem state pages.  When the spu is enabled with

 * ps3_enable_spu() the flag would be set allowing pages to be mapped,

 * and when the spu is disabled with ps3_disable_spu() the flag would be

 * cleared and the mapped problem state pages would be unmapped.

 spu_priv1_ops */

 are these serialized by caller??? */

 Note that MFC_DSISR will be cleared when class1[MF] is set. */

 No support. */

 Nothing to do, cleared in int_stat_clear(). */

 Nothing to do. */

 Check bits allowed by HV. */

 Nothing to do. */

 No support. */

 No support. */

 No support. */

 No support. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 SMP routines.

 *

 *  Copyright (C) 2006 Sony Computer Entertainment Inc.

 *  Copyright 2006 Sony Corp.

/**

  * ps3_ipi_virqs - a per cpu array of virqs for ipi use

		/*

		* Check assumptions on ps3_ipi_virqs[] indexing. If this

		* check fails, then a different mapping of PPC_MSG_

		* to index needs to be setup.

 Can't call free_irq from interrupt context. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 system bus driver.

 *

 *  Copyright (C) 2006 Sony Computer Entertainment Inc.

 *  Copyright 2006 Sony Corp.

 FIXME: need device usage counters! */

 usb 0 */

 usb 0 */

 device specific; do nothing currently */

 device specific; do nothing currently */

/* Allocates a contiguous real buffer and creates mappings over it.

 * Returns the virtual address of the buffer and sets dma_handle

 * to the dma address (mapping) of the first page.

/* Creates TCEs for a user provided buffer.  The user buffer must be

 * contiguous real kernel storage (not vmalloc).  The address passed here

 * comprises a page address and offset into that page. The dma_addr_t

 * returned will point to the same byte within the page as was passed in.

 not happned */

/**

 * ps3_system_bus_release_device - remove a device from the system bus

/**

 * ps3_system_bus_device_register - add a device to the system bus

 *

 * ps3_system_bus_device_register() expects the dev object to be allocated

 * dynamically by the caller.  The system bus takes ownership of the dev

 * object and frees the object in ps3_system_bus_release_device().

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 device registration routines.

 *

 *  Copyright (C) 2007 Sony Computer Entertainment Inc.

 *  Copyright 2007 Sony Corp.

 The current lpm driver only supports a single BE processor. */

/**

 * ps3_setup_gelic_device - Setup and register a gelic device instance.

 *

 * Allocates memory for a struct ps3_system_bus_device instance, initialises the

 * structure members, and registers the device instance with the system bus.

 av default */

 sysmgr default */

/**

 * ps3_setup_dynamic_device - Setup a dynamic device from the repository

 Some devices are not accessible from the Other OS lpar. */

/**

 * ps3_setup_static_device - Setup a static device from the repository

 Each USB device has both an EHCI and an OHCI HC */

	/*

	 * On some firmware versions (e.g. 1.90), the device may not show up

	 * in the repository immediately

 must be zero */

 OR of 1UL << enum ps3_notify_type */

 enum ps3_notify_type */

/**

 * ps3_probe_thread - Background repository probing at system startup.

 *

 * This implementation only supports background probing on a single bus.

 * It uses the hypervisor's storage device notification mechanism to wait until

 * a storage device is ready.  The device notification mechanism uses a

 * pseudo device to asynchronously notify the guest when storage devices become

 * ready.  The notification device has a block size of 512 bytes.

 dummy system bus device */

 Setup and write the request for device notification. */

 must be zero */

 Loop here processing the requested notification events. */

/**

 * ps3_stop_probe_thread - Stops the background probe thread.

 *

/**

 * ps3_start_probe_thread - Starts the background probe thread.

 *

/**

 * ps3_register_devices - Probe the system and register devices found.

 *

 * A device_initcall() routine.

 ps3_repository_dump_bus_info(); */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 repository routines.

 *

 *  Copyright (C) 2006 Sony Computer Entertainment Inc.

 *  Copyright 2006 Sony Corp.

/**

 * make_first_field - Make the first field of a repository node name.

 * @text: Text portion of the field.

 * @index: Numeric index portion of the field.  Use zero for 'don't care'.

 *

 * This routine sets the vendor id to zero (non-vendor specific).

 * Returns field value.

/**

 * make_field - Make subsequent fields of a repository node name.

 * @text: Text portion of the field.  Use "" for 'don't care'.

 * @index: Numeric index portion of the field.  Use zero for 'don't care'.

 *

 * Returns field value.

/**

 * read_node - Read a repository node from raw fields.

 * @n1: First field of node name.

 * @n2: Second field of node name.  Use zero for 'don't care'.

 * @n3: Third field of node name.  Use zero for 'don't care'.

 * @n4: Fourth field of node name.  Use zero for 'don't care'.

 * @v1: First repository value (high word).

 * @v2: Second repository value (low word).  Optional parameter, use zero

 *      for 'don't care'.

/**

 * ps3_repository_read_num_pu - Number of logical PU processors for this lpar.

/**

 * ps3_repository_read_pu_id - Read the logical PU id.

 * @pu_index: Zero based index.

 * @pu_id: The logical PU id.

/**

 * ps3_repository_read_mm_info - Read mm info for single pu system.

 * @rm_base: Real mode memory base address.

 * @rm_size: Real mode memory size.

 * @region_total: Maximum memory region size.

/**

 * ps3_repository_read_highmem_region_count - Read the number of highmem regions

 *

 * Bootloaders must arrange the repository nodes such that regions are indexed

 * with a region_index from 0 to region_count-1.

/**

 * ps3_repository_read_highmem_info - Read high memory region info

 * @region_index: Region index, {0,..,region_count-1}.

 * @highmem_base: High memory base address.

 * @highmem_size: High memory size.

 *

 * Bootloaders that preallocate highmem regions must place the

 * region info into the repository at these well known nodes.

/**

 * ps3_repository_read_num_spu_reserved - Number of physical spus reserved.

 * @num_spu: Number of physical spus.

/**

 * ps3_repository_read_num_spu_resource_id - Number of spu resource reservations.

 * @num_resource_id: Number of spu resource ids.

/**

 * ps3_repository_read_spu_resource_id - spu resource reservation id value.

 * @res_index: Resource reservation index.

 * @resource_type: Resource reservation type.

 * @resource_id: Resource reservation id.

/**

  * ps3_repository_read_boot_dat_info - Get address and size of cell_ext_os_area.

  * address: lpar address of cell_ext_os_area

  * @size: size of cell_ext_os_area

/**

 * ps3_repository_read_num_be - Number of physical BE processors in the system.

/**

 * ps3_repository_read_be_node_id - Read the physical BE processor node id.

 * @be_index: Zero based index.

 * @node_id: The BE processor node id.

/**

 * ps3_repository_read_be_id - Read the physical BE processor id.

 * @node_id: The BE processor node id.

 * @be_id: The BE processor id.

 defined(CONFIG_PS3_REPOSITORY_WRITE) */

 defined(DEBUG) */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Generic PowerPC 40x platform support

 *

 * Copyright 2008 IBM Corporation

 *

 * This implements simple platform support for PowerPC 44x chips.  This is

 * mostly used for eval boards or other simple and "generic" 44x boards.  If

 * your board has custom functions or hardware, then you will likely want to

 * implement your own board.c file to accommodate it.

/* This is the list of boards that can be supported by this simple

 * platform code.  This does _not_ mean the boards are compatible,

 * as they most certainly are not from a device tree perspective.

 * However, their differences are handled by the device tree and the

 * drivers and therefore they don't need custom board support files.

 *

 * Again, if your board needs to do things differently then create a

 * board.c file for it rather than adding it to this list.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * eBPF JIT compiler

 *

 * Copyright 2016 Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>

 *		  IBM Corporation

 *

 * Based on the powerpc classic BPF JIT compiler by Matt Evans

 Fix the branch target addresses for subprog calls */

		/*

		 * During the extra pass, only the branch target addresses for

		 * the subprog calls need to be fixed. All other instructions

		 * can left untouched.

		 *

		 * The JITed image length does not change because we already

		 * ensure that the JITed instruction sequence for these calls

		 * are of fixed length by padding them with NOPs.

			/*

			 * Save ctx->idx as this would currently point to the

			 * end of the JITed image and set it to the offset of

			 * the instruction sequence corresponding to the

			 * subprog call temporarily.

			/*

			 * Restore ctx->idx here. This is safe as the length

			 * of the JITed sequence remains unchanged.

 Make sure that the stack is quadword aligned. */

 Scouting faux-generate pass 0 */

 We hit something illegal or unsupported. */

	/*

	 * If we have seen a tail call, we need a second pass.

	 * This is because bpf_jit_emit_common_epilogue() is called

	 * from bpf_jit_emit_tail_call() with a not yet stable ctx->seen.

	/*

	 * Pretend to build prologue, given the features we've seen.  This will

	 * update ctgtx.idx as it pretends to output instructions, then we can

	 * calculate total size from idx.

		/*

		 * Do not touch the prologue and epilogue as they will remain

		 * unchanged. Only fix the branch target address for subprog

		 * calls in the body.

		 *

		 * This does not change the offsets and lengths of the subprog

		 * call instruction sequences and hence, the size of the JITed

		 * image as well.

 There is no need to perform the usual passes. */

 Code generation passes 1-2 */

 Now build the prologue, body code & epilogue for real. */

		/*

		 * Note that we output the base address of the code_base

		 * rather than image, since opcodes are in code_base.

 Function descriptor nastiness: Address + TOC */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * eBPF JIT compiler for PPC32

 *

 * Copyright 2020 Christophe Leroy <christophe.leroy@csgroup.eu>

 *		  CS GROUP France

 *

 * Based on PPC64 eBPF JIT compiler by Naveen N. Rao

/*

 * Stack layout:

 *

 *		[	prev sp		] <-------------

 *		[   nv gpr save area	] 16 * 4	|

 * fp (r31) -->	[   ebpf stack space	] upto 512	|

 *		[     frame header	] 16		|

 * sp (r1) --->	[    stack pointer	] --------------

 for gpr non volatile registers r17 to r31 (14) + tail call */

 stack frame, ensure this is quadword aligned */

 BPF register usage */

 BPF to ppc register mappings */

 function return value */

 function arguments */

 non volatile registers */

 frame pointer aka BPF_REG_10 */

 eBPF jit internal registers */

 32 bits */

 PPC NVR range -- update this if we ever use NVRs below r17 */

 Use the hole we have left for alignment */

 First arg comes in as a 32 bits pointer. */

	/*

	 * Initialize tail_call_cnt in stack frame if we do tail calls.

	 * Otherwise, put in NOPs so that it can be skipped when we are

	 * invoked through a tail call.

	/*

	 * We need a stack frame, but we don't necessarily need to

	 * save/restore LR unless we call other functions

	/*

	 * Back up non-volatile regs -- registers r18-r31

 If needed retrieve arguments 9 and 10, ie 5th 64 bits arg.*/

 Setup frame pointer to point to the bpf stack area */

 Restore NVRs */

 Tear down our stack frame */

 Load function address into r0 */

	/*

	 * By now, the eBPF program has already setup parameters in r3-r6

	 * r3-r4/BPF_REG_1 - pointer to ctx -- passed as is to the next bpf program

	 * r5-r6/BPF_REG_2 - pointer to bpf_array

	 * r7-r8/BPF_REG_3 - index in bpf_array

	/*

	 * if (index >= array->map.max_entries)

	 *   goto out;

	/*

	 * if (tail_call_cnt > MAX_TAIL_CALL_CNT)

	 *   goto out;

 tail_call_cnt++; */

 prog = array->ptrs[index]; */

	/*

	 * if (prog == NULL)

	 *   goto out;

 goto *(prog->bpf_func + prologue_size); */

 tear restore NVRs, ... */

 out: */

 Assemble the body code between the prologue & epilogue */

 Start of epilogue code - will only be valid 2nd pass onwards */

		/*

		 * addrs[] maps a BPF bytecode address into a real offset from

		 * the start of the body code.

		/*

		 * As an optimization, we note down which registers

		 * are used so that we can only save/restore those in our

		 * prologue and epilogue. We do this here regardless of whether

		 * the actual BPF instruction uses src/dst registers or not

		 * (for instance, BPF_CALL does not use them). The expectation

		 * is that those instructions will have src_reg/dst_reg set to

		 * 0. Even otherwise, we just lose some prologue/epilogue

		 * optimization but everything else should work without

		 * any issues.

		/*

		 * Arithmetic operations: ADD/SUB/MUL/DIV/MOD/NEG

 (u32) dst += (u32) src */

 dst += src */

 (u32) dst -= (u32) src */

 dst -= src */

 (u32) dst -= (u32) imm */

 (u32) dst += (u32) imm */

 dst -= imm */

 dst += imm */

 dst *= src */

 (u32) dst *= (u32) src */

 (u32) dst *= (u32) imm */

 dst *= imm */

 (u32) dst /= (u32) src */

 (u32) dst %= (u32) src */

 dst /= src */

 dst %= src */

 (u32) dst /= (u32) imm */

 (u32) dst %= (u32) imm */

 dst %= imm */

 dst /= imm */

 (u32) dst = -dst */

 dst = -dst */

		/*

		 * Logical operations: AND/OR/XOR/[A]LSH/[A]RSH

 dst = dst & src */

 (u32) dst = dst & src */

 dst = dst & imm */

 (u32) dst = dst & imm */

 dst = dst | src */

 dst = (u32) dst | (u32) src */

 dst = dst | imm */

 Sign-extended */

 dst = (u32) dst | (u32) imm */

 dst ^= src */

 (u32) dst ^= src */

 dst ^= imm */

 (u32) dst ^= (u32) imm */

 (u32) dst <<= (u32) src */

 dst <<= src; */

 (u32) dst <<= (u32) imm */

 dst <<= imm */

 (u32) dst >>= (u32) src */

 dst >>= src */

 (u32) dst >>= (u32) imm */

 dst >>= imm */

 (s32) dst >>= src */

 (s64) dst >>= src */

 (s32) dst >>= imm */

 (s64) dst >>= imm */

		/*

		 * MOV

 dst = src */

 (u32) dst = src */

 special mov32 for zext */

 dst = (s64) imm */

 (u32) dst = imm */

		/*

		 * BPF_FROM_BE/LE

 Copy 16 bits to upper part */

 Rotate 8 bits right & mask */

				/*

				 * Rotate word left by 8 bits:

				 * 2 bytes are already in their final position

				 * -- byte 2 and 4 (of bytes 1, 2, 3 and 4)

 Rotate 24 bits and insert byte 1 */

 Rotate 24 bits and insert byte 3 */

 Rotate 24 bits and insert byte 1 */

 Rotate 24 bits and insert byte 3 */

 zero-extend 16 bits into 32 bits */

 nop */

		/*

		 * BPF_ST NOSPEC (speculation barrier)

		/*

		 * BPF_ST(X)

 *(u8 *)(dst + off) = src */

 *(u8 *)(dst + off) = imm */

 (u16 *)(dst + off) = src */

 (u16 *)(dst + off) = imm */

 *(u32 *)(dst + off) = src */

 *(u32 *)(dst + off) = imm */

 (u64 *)(dst + off) = src */

 *(u64 *)(dst + off) = imm */

		/*

		 * BPF_STX ATOMIC (atomic ops)

 *(u32 *)(dst + off) += src */

 Get offset into TMP_REG */

 load value from memory into r0 */

 add value from src_reg into this */

 store result back */

 we're done if this succeeded */

 *(u64 *)(dst + off) += src */

		/*

		 * BPF_LDX

 dst = *(u8 *)(ul) (src + off) */

 dst = *(u16 *)(ul) (src + off) */

 dst = *(u32 *)(ul) (src + off) */

 dst = *(u64 *)(ul) (src + off) */

		/*

		 * Doubleword load

		 * 16 byte instruction that uses two 'struct bpf_insn'

 dst = (u64) imm */

 Adjust for two bpf instructions */

		/*

		 * Return/Exit

			/*

			 * If this isn't the very last instruction, branch to

			 * the epilogue. If we _are_ the last instruction,

			 * we'll just fall through to the epilogue.

 else fall through to the epilogue */

		/*

		 * Call kernel helper or bpf function

		/*

		 * Jumps and branches

 fallthrough; */

 unsigned comparison */

 unsigned comparison */

 signed comparison */

 signed comparison */

				/*

				 * Need sign-extended load, so only positive

				 * values can be used as imm in cmplwi

 sign-extending load ... but unsigned comparison */

 sign-extending load */

				/*

				 * signed comparison, so any 16-bit value

				 * can be used in cmpwi

 sign-extending load */

 andi does not sign-extend the immediate */

 PPC_ANDI is _only/always_ dot-form */

 andi does not sign-extend the immediate */

 PPC_ANDI is _only/always_ dot-form */

		/*

		 * Tail call

			/*

			 * The filter contains something cruel & unusual.

			 * We don't handle it, but also there shouldn't be

			 * anything missing from our list.

 Set end-of-body-code address for exit. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * bpf_jit_comp64.c: eBPF JIT compiler

 *

 * Copyright 2016 Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>

 *		  IBM Corporation

 *

 * Based on the powerpc classic BPF JIT compiler by Matt Evans

	/*

	 * We only need a stack frame if:

	 * - we call other functions (kernel helpers), or

	 * - the bpf program uses its stack area

	 * The latter condition is deduced from the usage of BPF_REG_FP

/*

 * When not setting up our own stackframe, the redzone usage is:

 *

 *		[	prev sp		] <-------------

 *		[	  ...       	] 		|

 * sp (r1) --->	[    stack pointer	] --------------

 *		[   nv gpr save area	] 5*8

 *		[    tail_call_cnt	] 8

 *		[    local_tmp_var	] 16

 *		[   unused red zone	] 208 bytes protected

	/*

	 * Initialize tail_call_cnt if we do tail calls.

	 * Otherwise, put in NOPs so that it can be skipped when we are

	 * invoked through a tail call.

 this goes in the redzone */

		/*

		 * We need a stack frame, but we don't necessarily need to

		 * save/restore LR unless we call other functions

	/*

	 * Back up non-volatile regs -- BPF registers 6-10

	 * If we haven't created our own stack frame, we save these

	 * in the protected zone below the previous stack frame

 Setup frame pointer to point to the bpf stack area */

 Restore NVRs */

 Tear down our stack frame */

 Move result to r3 */

 func points to the function descriptor */

 Load actual entry point from function descriptor */

 ... and move it to CTR */

	/*

	 * Load TOC from function descriptor at offset 8.

	 * We can clobber r2 since we get called through a

	 * function pointer (so caller will save/restore r2)

	 * and since we don't use a TOC ourself.

 We can clobber r12 */

 Load function address into r12 */

	/* For bpf-to-bpf function calls, the callee's address is unknown

	 * until the last extra pass. As seen above, we use PPC_LI64() to

	 * load the callee's address, but this may optimize the number of

	 * instructions required based on the nature of the address.

	 *

	 * Since we don't want the number of instructions emitted to change,

	 * we pad the optimized PPC_LI64() call with NOPs to guarantee that

	 * we always have a five-instruction sequence, which is the maximum

	 * that PPC_LI64() can emit.

	/*

	 * Load TOC from function descriptor at offset 8.

	 * We can clobber r2 since we get called through a

	 * function pointer (so caller will save/restore r2)

	 * and since we don't use a TOC ourself.

 Load actual entry point from function descriptor */

	/*

	 * By now, the eBPF program has already setup parameters in r3, r4 and r5

	 * r3/BPF_REG_1 - pointer to ctx -- passed as is to the next bpf program

	 * r4/BPF_REG_2 - pointer to bpf_array

	 * r5/BPF_REG_3 - index in bpf_array

	/*

	 * if (index >= array->map.max_entries)

	 *   goto out;

	/*

	 * if (tail_call_cnt > MAX_TAIL_CALL_CNT)

	 *   goto out;

	/*

	 * tail_call_cnt++;

 prog = array->ptrs[index]; */

	/*

	 * if (prog == NULL)

	 *   goto out;

 goto *(prog->bpf_func + prologue_size); */

 skip past the function descriptor */

 tear down stack, restore NVRs, ... */

 out: */

/*

 * We spill into the redzone always, even if the bpf program has its own stackframe.

 * Offsets hardcoded based on BPF_PPC_STACK_SAVE -- see bpf_jit_stack_local()

 Assemble the body code between the prologue & epilogue */

 Start of epilogue code - will only be valid 2nd pass onwards */

		/*

		 * addrs[] maps a BPF bytecode address into a real offset from

		 * the start of the body code.

		/*

		 * As an optimization, we note down which non-volatile registers

		 * are used so that we can only save/restore those in our

		 * prologue and epilogue. We do this here regardless of whether

		 * the actual BPF instruction uses src/dst registers or not

		 * (for instance, BPF_CALL does not use them). The expectation

		 * is that those instructions will have src_reg/dst_reg set to

		 * 0. Even otherwise, we just lose some prologue/epilogue

		 * optimization but everything else should work without

		 * any issues.

		/*

		 * Arithmetic operations: ADD/SUB/MUL/DIV/MOD/NEG

 (u32) dst += (u32) src */

 dst += src */

 (u32) dst -= (u32) src */

 dst -= src */

 (u32) dst += (u32) imm */

 dst += imm */

 (u32) dst -= (u32) imm */

 dst -= imm */

 (u32) dst *= (u32) src */

 dst *= src */

 (u32) dst *= (u32) imm */

 dst *= imm */

 (u32) dst /= (u32) src */

 (u32) dst %= (u32) src */

 dst /= src */

 dst %= src */

 (u32) dst %= (u32) imm */

 (u32) dst /= (u32) imm */

 dst %= imm */

 dst /= imm */

 (u32) dst = -dst */

 dst = -dst */

		/*

		 * Logical operations: AND/OR/XOR/[A]LSH/[A]RSH

 (u32) dst = dst & src */

 dst = dst & src */

 (u32) dst = dst & imm */

 dst = dst & imm */

 Sign-extended */

 dst = (u32) dst | (u32) src */

 dst = dst | src */

 dst = (u32) dst | (u32) imm */

 dst = dst | imm */

 Sign-extended */

 (u32) dst ^= src */

 dst ^= src */

 (u32) dst ^= (u32) imm */

 dst ^= imm */

 Sign-extended */

 (u32) dst <<= (u32) src */

 slw clears top 32 bits */

 skip zero extension move, but set address map. */

 dst <<= src; */

 (u32) dst <<== (u32) imm */

 with imm 0, we still need to clear top 32 bits */

 dst <<== imm */

 (u32) dst >>= (u32) src */

 dst >>= src */

 (u32) dst >>= (u32) imm */

 dst >>= imm */

 (s32) dst >>= src */

 (s64) dst >>= src */

 (s32) dst >>= imm */

 (s64) dst >>= imm */

		/*

		 * MOV

 (u32) dst = src */

 dst = src */

 special mov32 for zext */

 (u32) dst = imm */

 dst = (s64) imm */

 Truncate to 32-bits */

		/*

		 * BPF_FROM_BE/LE

 !__BIG_ENDIAN__ */

 Rotate 8 bits left & mask with 0x0000ff00 */

 Rotate 8 bits right & insert LSB to reg */

 Move result back to dst_reg */

				/*

				 * Rotate word left by 8 bits:

				 * 2 bytes are already in their final position

				 * -- byte 2 and 4 (of bytes 1, 2, 3 and 4)

 Rotate 24 bits and insert byte 1 */

 Rotate 24 bits and insert byte 3 */

				/*

				 * Way easier and faster(?) to store the value

				 * into stack and then use ldbrx

				 *

				 * ctx->seen will be reliable in pass2, but

				 * the instructions generated will remain the

				 * same across all passes

 zero-extend 16 bits into 64 bits */

 zero-extend 32 bits into 64 bits */

 nop */

		/*

		 * BPF_ST NOSPEC (speculation barrier)

		/*

		 * BPF_ST(X)

 *(u8 *)(dst + off) = src */

 *(u8 *)(dst + off) = imm */

 (u16 *)(dst + off) = src */

 (u16 *)(dst + off) = imm */

 *(u32 *)(dst + off) = src */

 *(u32 *)(dst + off) = imm */

 (u64 *)(dst + off) = src */

 *(u64 *)(dst + off) = imm */

		/*

		 * BPF_STX ATOMIC (atomic ops)

 *(u32 *)(dst + off) += src */

 Get EA into TMP_REG_1 */

 load value from memory into TMP_REG_2 */

 add value from src_reg into this */

 store result back */

 we're done if this succeeded */

 *(u64 *)(dst + off) += src */

		/*

		 * BPF_LDX

 dst = *(u8 *)(ul) (src + off) */

 dst = *(u16 *)(ul) (src + off) */

 dst = *(u32 *)(ul) (src + off) */

 dst = *(u64 *)(ul) (src + off) */

		/*

		 * Doubleword load

		 * 16 byte instruction that uses two 'struct bpf_insn'

 dst = (u64) imm */

 Adjust for two bpf instructions */

		/*

		 * Return/Exit

			/*

			 * If this isn't the very last instruction, branch to

			 * the epilogue. If we _are_ the last instruction,

			 * we'll just fall through to the epilogue.

 else fall through to the epilogue */

		/*

		 * Call kernel helper or bpf function

 move return value from r3 to BPF_REG_0 */

		/*

		 * Jumps and branches

 Fall through */

 unsigned comparison */

 signed comparison */

				/*

				 * Need sign-extended load, so only positive

				 * values can be used as imm in cmpldi

 sign-extending load */

 ... but unsigned comparison */

				/*

				 * signed comparison, so any 16-bit value

				 * can be used in cmpdi

 andi does not sign-extend the immediate */

 PPC_ANDI is _only/always_ dot-form */

		/*

		 * Tail call

			/*

			 * The filter contains something cruel & unusual.

			 * We don't handle it, but also there shouldn't be

			 * anything missing from our list.

 Set end-of-body-code address for exit. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for AmigaOne

 *

 * Author: Gerhard Pircher (gerhard_pircher@gmx.net)

 *

 *   Based on cuboot-83xx.c

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for 824x

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2007 David Gibson, IBM Corporation.

 *

 * Based on earlier code:

 *   Matt Porter <mporter@kernel.crashing.org>

 *   Copyright 2002-2005 MontaVista Software Inc.

 *

 *   Eugene Surovegin <eugene.surovegin@zultys.com> or <ebs@ebshome.net>

 *   Copyright (c) 2003, 2004 Zultys Technologies

 *

 * Copyright (C) 2009 Wind River Systems, Inc.

 *   Updated for supporting PPC405EX on Kilauea.

 *   Tiejun Chen <tiejun.chen@windriver.com>

 Read the 4xx SDRAM controller to get size of system memory. */

 Read the 440SPe MQ controller to get size of system memory. */

 open coded because I'm paranoid about invalid values */

	/* Ultimately, we should directly construct the memory node

	 * so we are able to handle holes in the memory address space

 4xx DDR1/2 Denali memory controller support */

 DDR0 registers */

 DDR0_02 */

 DDR0_08 */

 DDR0_10 */

 DDR0_14 */

 DDR0_42 */

 DDR0_43 */

/*

 * Some U-Boot versions set the number of chipselects to two

 * for Sequoia/Rainier boards while they only have one chipselect

 * hardwired. Hardcode the number of chipselects to one

 * for sequioa/rainer board models or read the actual value

 * from the memory controller register DDR0_10 otherwise.

 get CS value */

 get maximum cs col and row values */

 get data path bytes */

 32 bits */

 64 bits */

 get address pins (rows) */

 get collomn size and banks */

 8 banks */

 4 banks */

	/* Quiesce the MAL and EMAC(s) since PIBS/OpenBIOS don't

	 * do this for us

 loop until reset takes effect */

/* Read 4xx EBC bus bridge registers to get mappings of the peripheral

 Calculate 440GP clocks */

 Bypass system PLL */

 PerClk */

 CPU clock */

 FIXME: Check if this is for all 440GP, or just Ebony */

 Rev. B 440GP, use external system clock */

 Rev. C 440GP, errata force us to use internal clock */

 External UART clock */

 Internal UART clock */

 External UART clock */

 Internal UART clock */

 PLL config */

 Dividers */

 Input clocks for primary dividers */

 Resulting clocks */

 Timebase */

 Feedback path */

 PLLOUTx */

 CPU */

 PERClk */

 Bypass system PLL */

 Figure out timebase.  Either CPU or default TmrClk */

 If passed a 0 tmr_clk, force CPU clock */

 serial clocks need fixup based on int/ext */

 serial clocks need fixup based on int/ext */

 serial clocks need fixup based on int/ext */

 CPU:PLB */

 PLB:OPB */

 PLB:PCI */

 PLB:EBC */

 check for 405GPr */

 PCI async mode enable == 0 */

 New mode enable */

 New mode enable */

 PerClk synch mode */

 uart0 uses the external clock */

 uart1 uses the external clock */

 setup the timebase clock to tick at the cpu frequency */

 CPU:PLB */

 PLB:EBC */

 PLB:OPB */

 values for:  1 - 16 */

 values for:  1 - 100 */

 values for:  101 - 200 */

 values for:  201 - 255 */

 END */

 PLL config */

 Dividers */

 PLBDV0 is hardwared to 010. */

 Resulting clocks */

 PLL's VCO is the source for primary forward ? */

 Feedback path */

 PLLOUTx */

 CPU */

 PERClk */

 Bypass system PLL */

 CPU = VCO / ( FWDVA x CPUDV0) */

 PLB = VCO / ( FWDVA x PLB2XDV0 x PLBDV0) */

 OPB = PLB / OPBDV0 */

 EBC = OPB / PERDV0 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for Sequoia

 *

 * Valentine Barshak <vbarshak@ru.mvista.com>

 * Copyright 2007 MontaVista Software, Inc

 *

 * Based on Ebony code by David Gibson <david@gibson.dropbear.id.au>

 * Copyright IBM Corporation, 2007

 *

 * Based on Bamboo code by Josh Boyer <jwboyer@linux.vnet.ibm.com>

 * Copyright IBM Corporation, 2007

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2007 David Gibson, IBM Corporation.

 *

 * Based on earlier code:

 *   Copyright (C) Paul Mackerras 1997.

 *

 *   Matt Porter <mporter@kernel.crashing.org>

 *   Copyright 2002-2005 MontaVista Software Inc.

 *

 *   Eugene Surovegin <eugene.surovegin@zultys.com> or <ebs@ebshome.net>

 *   Copyright (c) 2003, 2004 Zultys Technologies

 Invert address bit 14 (IBM-endian) if FLASH_SEL fpga bit is set */

 FIXME: sysclk should be derived by reading the FPGA registers

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for Katmai

 *

 * Author: Hugh Blemings <hugh@au.ibm.com>

 *

 * Copyright 2007 Hugh Blemings, IBM Corporation.

 *   Based on cuboot-ebony.c which is:

 * Copyright 2007 David Gibson, IBM Corporation.

 *   Based on cuboot-83xx.c, which is:

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

	/* 440SP Clock logic is all but identical to 440GX

	 * so we just use that code for now at least

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for Acadia

 *

 * Author: Josh Boyer <jwboyer@linux.vnet.ibm.com>

 *

 * Copyright 2008 IBM Corporation

 SPI Clock Divider */

 PLL feedback source */

 PLL feedback divider value */

 PLL forward divider A value */

 PLL forward divider B value */

 CPU Clock Divisor Mask */

 PLB Clock Divisor Mask */

 OPB Clock Divisor Mask */

 EBC Clock Divisor Mask */

 PWM Divider Mask */

 SPI Divider Mask */

 UART 0 Divider Mask */

 UART 1 Divider Mask */

 total divisor udiv * bdiv */

 minimum udiv	*/

 smallest diff */

 best udiv */

 current diff */

 current bdiv */

 current estimate */

 read the sysclk value from the CPLD */

	/*

	 * Read PLL Mode registers

	/*

	 * Determine forward divider A

	/*

	 * Determine forward divider B

	/*

	 * Determine FBK_DIV.

	/*

	 * Read CPR_PRIMAD register

	/*

	 * Determine PLB_DIV.

	/*

	 * Determine EXTBUS_DIV.

	/*

	 * Determine OPB_DIV.

	/* There is a bug in U-Boot that prevents us from using

	 * bd.bi_opbfreq because U-Boot doesn't populate it for

	 * 405EZ.  We get to calculate it, yay!

 Assume lowest possible serial clk */

 total divisor */

 2 x OPB divisor */

 highest possible */

	/* i is the test udiv value -- start with the largest

	 * possible (256) to minimize serial clock and constrain

	 * search to umin.

 can't do better */

 best so far */

 update lowest diff*/

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PlanetCore configuration data support functions

 *

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

/* PlanetCore passes information to the OS in the form of

 * a table of key=value strings, separated by newlines.

 *

 * The list is terminated by an empty string (i.e. two

 * consecutive newlines).

 *

 * To make it easier to parse, we first convert all the

 * newlines into null bytes.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2010 Ben. Herrenschmidt, IBM Corporation.

 *

 * Based on earlier code:

 *   Copyright (C) Paul Mackerras 1997.

 *

 *   Matt Porter <mporter@kernel.crashing.org>

 *   Copyright 2002-2005 MontaVista Software Inc.

 *

 *   Eugene Surovegin <eugene.surovegin@zultys.com> or <ebs@ebshome.net>

 *   Copyright (c) 2003, 2004 Zultys Technologies

 *

 *    Copyright 2007 David Gibson, IBM Corporation.

 This assumes #address-cells = 2, #size-cells =1 and that */

 If the device tree specifies the memory range, use it */

 othersize, read it from the SDRAM controller */

 Processor Identification Register */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Program to hack in a PT_NOTE program header entry in an ELF file.

 * This is needed for OF on RS/6000s to load an image correctly.

 * Note that OF needs a program header entry for the note, not an

 * ELF section.

 *

 * Copyright 2000 Paul Mackerras.

 *

 * Adapted for 64 bit little endian images by Andrew Tauferner.

 *

 * Usage: addnote zImage

 CHRP note section */

 real-mode = true */

 real-base, i.e. where we expect OF to be */

 real-size */

 virt-base */

 virt-size */

 load-base */

 RPA note section */

/*

 * Note: setting ignore_my_client_config *should* mean that OF ignores

 * all the other fields, but there is a firmware bug which means that

 * it looks at the splpar field at least.  So these values need to be

 * reasonable.

 lparaffinity */

 min_rmo_size */

 min_rmo_percent */

 max_pft_size */

 splpar */

 min_load */

 new_mem_def */

 ignore_my_client_config */

 Structure of an ELF file */

 ELF header */

 offsets in E_IDENT area */

 ELF program header */

 Program header type = note */

 XXX check that the area we want to use is all zeroes */

 fill in the program header entry */

 fill in the note area we point to */

 XXX we should probably make this a proper section */

 fill in the second program header entry and the RPA note area */

 fill in the note area we point to */

 Update the number of program headers */

 write back */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for 8xx

 *

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OF console routines

 *

 * Copyright (C) Paul Mackerras 1997.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/boot/gamecube.c

 *

 * Nintendo GameCube bootwrapper support

 * Copyright (C) 2004-2009 The GameCube Linux Team

 * Copyright (C) 2008,2009 Albert Herranz

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for 85xx

 *

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

	/* Unfortunately, the specific model number is encoded in the

	 * soc node name in existing dts files -- once that is fixed,

	 * this can do a simple path lookup.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) Paul Mackerras 1997.

 *

 * Updates for PPC64 by Todd Inglett, Dave Engebretsen & Peter Bergner.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Motload compatibility for the Emerson/Artesyn MVME7100

 *

 * Copyright 2016 Elettra-Sincrotrone Trieste S.C.p.A.

 *

 * Author: Alessio Igor Bogani <alessio.bogani@elettra.eu>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for Esteem 195E Hotfoot CPU Board

 *

 * Author: Solomon Peachy <solomon@linux-wlan.com>

 Is this a single eth/serial board? */

 Fix up flash size in fdt for 4M boards. */

 First fix up the base addresse */

 Then the offsets */

 Delete the FeatFS node */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PowerQUICC II support functions

 *

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 System Clock Configuration Register */

 System Clock Mode Register */

/* Get various clocks from crystal frequency.

 * Returns zero on failure and non-zero on success.

 Set common device tree fields based on the given clock frequencies. */

/*

 * Generic serial console support

 *

 * Author: Mark A. Greer <mgreer@mvista.com>

 *

 * Code in serial_edit_cmdline() copied from <file:arch/ppc/boot/simple/misc.c>

 * and was written by Matt Porter <mporter@kernel.crashing.org>.

 *

 * 2001,2006 (c) MontaVista Software, Inc.  This file is licensed under

 * the terms of the GNU General Public License version 2.  This program

 * is licensed "as is" without any warranty of any kind, whether express

 * or implied.

 Test for backspace/delete */

 Test for ^x/^u (and wipe the line) */

 Exit 'timer' loop */

 1 msec */

 Node's "compatible" property determines which serial driver to use */

 Add other serial console driver calls here */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Embedded Planet EP88xC with PlanetCore firmware

 *

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * RedBoot firmware support

 *

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * stdlib functions

 *

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 Not currently supported: leading whitespace, sign, 0x prefix, zero base */

 SPDX-License-Identifier: GPL-2.0

/*

 * CPM serial console support.

 *

 * Copyright 2007 Freescale Semiconductor, Inc.

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * It is assumed that the firmware (or the platform file) has already set

 * up the port.

 Status and Control */

 Data length in buffer */

 Buffer address in host memory */

	/* For bootwrapper-compatible device trees, we assume that the first

	 * entry has at least 128 bytes, and that #address-cells/#data-cells

	 * is one for both parent and child.

	/* Store the buffer descriptors at the end of the first muram chunk.

	 * For SMC ports on CPM2-based platforms, relocate the parameter RAM

	 * just before the buffer descriptors.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for Sam440ep based off bamboo.c code

 * original copyrights below

 *

 * Author: Josh Boyer <jwboyer@linux.vnet.ibm.com>

 *

 * Copyright 2007 IBM Corporation

 *

 * Based on cuboot-ebony.c

 *

 * Modified from cuboot-bamboo.c for sam440ep:

 * Copyright 2008 Giuseppe Coviello <gicoviello@gmail.com>

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright © 2013 Tony Breeds IBM Corporation

 * Copyright © 2013 Alistair Popple IBM Corporation

 *

 * Based on earlier code:

 *   Copyright (C) Paul Mackerras 1997.

 *

 *   Matt Porter <mporter@kernel.crashing.org>

 *   Copyright 2002-2005 MontaVista Software Inc.

 *

 *   Eugene Surovegin <eugene.surovegin@zultys.com> or <ebs@ebshome.net>

 *   Copyright (c) 2003, 2004 Zultys Technologies

 *

 *    Copyright 2007 David Gibson, IBM Corporation.

 *    Copyright 2010 Ben. Herrenschmidt, IBM Corporation.

 *    Copyright © 2011 David Kleikamp IBM Corporation

 Processor Identification Register */

 Length of userdata passed in by PIBS */

 Fixup the SD timeout frequency */

 Disable SD high-speed mode (which seems to be broken) */

 Set the MAC address */

				/* We've only found a substring ending

				 * with local-mac-addr so this isn't

			/* Remove the "local-mac-addr=<...>" from the kernel

			 * command line, including the tailing space if

 Make sure FDT blob is sane */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/boot/ugecon.c

 *

 * USB Gecko bootwrapper console.

 * Copyright (C) 2008-2009 The GameCube Linux Team

 * Copyright (C) 2008,2009 Albert Herranz

 Chip Select 001 */

 virtual address base for input/output, retrieved from device tree */

 select */

 read/write */

 deselect */

 look for a usbgecko on memcard slots A and B */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * MPC8xx support functions

 *

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 PLL and Reset Control Register */

 Return system clock from crystal frequency */

 Set common device tree fields based on the given clock frequencies. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Freescale SOC support functions

 *

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Wrapper around the kernel's pre-boot decompression library.

 *

 * Copyright (C) IBM Corporation 2016.

/*

 * The decompressor_*.c files play #ifdef games so they can be used in both

 * pre-boot and regular kernel code. We need these definitions to make the

 * includes work.

/*

 * The build process will copy the required zlib source files and headers

 * out of lib/ and "fix" the includes so they do not pull in other kernel

 * headers.

 globals for tracking the state of the decompression */

/*

 * flush() is called by __decompress() when the decompressor's scratch buffer is

 * full.

	/*

	 * if we hit our decompression limit, we need to fake an error to abort

	 * the in-progress decompression.

 skip this entire block */

 skip some data at the start, but keep the rest of the block */

 suppress the "error" when we terminate the decompressor */

/**

 * partial_decompress - decompresses part or all of a compressed buffer

 * @inbuf:       input buffer

 * @input_size:  length of the input buffer

 * @outbuf:      output buffer

 * @output_size: length of the output buffer

 * @skip         number of output bytes to ignore

 *

 * This function takes compressed data from inbuf, decompresses and write it to

 * outbuf. Once output_size bytes are written to the output buffer, or the

 * stream is exhausted the function will return the number of bytes that were

 * decompressed. Otherwise it will return whatever error code the decompressor

 * reported (NB: This is specific to each decompressor type).

 *

 * The skip functionality is mainly there so the program and discover

 * the size of the compressed image so that it can ask firmware (if present)

 * for an appropriately sized buffer.

	/*

	 * The skipped bytes needs to be included in the size of data we want

	 * to decompress.

	/*

	 * If decompression was aborted due to an actual error rather than

	 * a fake error that we used to abort, then we should report it.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for MPC5200

 *

 * Author: Grant Likely <grant.likely@secretlab.ca>

 *

 * Copyright (c) 2007 Secret Lab Technologies Ltd.

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

	/* Unfortunately, the specific model number is encoded in the

	 * soc node name in existing dts files -- once that is fixed,

	 * this can do a simple path lookup.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for Yosemite

 *

 * Author: Josh Boyer <jwboyer@linux.vnet.ibm.com>

 *

 * Copyright 2008 IBM Corporation

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for PowerQUICC II

 * (a.k.a. 82xx with CPM, not the 8240 family of chips)

 *

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 must be zero */

/* Different versions of u-boot put the BCSR in different places, and

 * some don't set up the PCI PIC at all, so we assume the device tree is

 * sane and update the BRx registers appropriately.

 *

 * For any node defined as compatible with fsl,pq2-localbus,

 * #address/#size must be 2/1 for the localbus, and 1/1 for the parent bus.

 * Ranges must be for whole chip selects.

		/* If CS is already valid, use the existing flags.

		 * Otherwise, guess a sane default.

/* Older u-boots don't set PCI up properly.  Update the hardware to match

 * the device tree.  The prefetch mem region and non-prefetch mem region

 * must be contiguous in the host bus.  As required by the PCI binding,

 * PCI #addr/#size must be 3/2.  The parent bus must be 1/1.  Only

 * 32-bit PCI is supported.  All three region types (prefetchable mem,

 * non-prefetchable mem, and I/O) must be present.

 Inbound translation */

 If PCI is disabled, drive RST high to enable. */

 Tpvrh (Power valid to RST# high) 100 ms */

 Trhfa (RST# high to first cfg access) 2^25 clocks */

 Enable bus master and memory access */

	/* Park the bus on PCI, and elevate PCI's arbitration priority,

	 * as required by section 9.6 of the user's manual.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) Paul Mackerras 1997.

 Value picked to match that used by yaboot */

 only used on 64-bit systems */

 Fixme: use OF */

		/*

		 * Maintain a "magic" minimum address. This keeps some older

		 * firmware platforms running.

 Detect OF vs. ePAPR boot */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) Paul Mackerras 1997.

 nothing */;

/* The unnecessary pointer compare is there

 * to check for type safety (n must be 64bit)

 __powerpc64__ */

 pad with zero */

 unsigned/signed long */

 show plus */

 space if plus */

 left justified */

 0x */

 use 'ABCDEF' instead of 'abcdef' */

 flags to number() */

 width of output field */

	int precision;		/* min. # of digits for integers; max

 'h', 'l', or 'L' for integer fields */

 'z' support added 23/7/1999 S.H.    */

 'z' changed to 'Z' --davidm 1/25/99 */

 process flags */

 this also skips first '%' */

 get field width */

 it's the next argument */

 get the precision */

 it's the next argument */

 get the conversion qualifier */

 default base */

 integer number formats - set up the flags and "break" */

 SPDX-License-Identifier: GPL-2.0

/*

 * Makes a tree bootable image for IBM Evaluation boards.

 * Basically, just take a zImage, skip the ELF header, and stuff

 * a 32 byte header on the front.

 *

 * We use htonl, which is a network macro, to make sure we're doing

 * The Right Thing on an LE machine.  It's non-obvious, but it should

 * work on anything BSD'ish.

/* This gets tacked on the front of the image.  There are also a few

 * bytes allocated after the _start label used by the boot rom (see

 * head.S for details).

 0x0052504F */

 Target address of the image */

 Size, rounded-up, in 512 byte blks */

 Run debugger or image after load */

 The image address to start */

 32 bit checksum including header */

 If we have the optional entry point parameter, use it */

	/* We know these from the linker command.

	 * ...and then move it up into memory a little more so the

	 * relocation can happen.

	/* To be neat and tidy :-).

	/* Assume zImage is an ELF file, and skip the 64K header.

	/* And away we go......

	/* rewrite the header with the computed checksum.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * devtree.c - convenience functions for device tree manipulation

 * Copyright 2007 David Gibson, IBM Corporation.

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 *

 * Authors: David Gibson <david@gibson.dropbear.id.au>

 *	    Scott Wood <scottwood@freescale.com>

/* It is assumed that if the first byte of reg fits in a

 * range, then the whole reg block fits.

 reg must be MAX_ADDR_CELLS */

/* Currently only generic buses without special encodings are supported.

 * In particular, PCI is not supported.  Also, only the beginning of the

 * reg block is tracked; size is ignored except in ranges.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Bootwrapper for ePAPR compliant firmwares

 *

 * Copyright 2010 David Gibson <david@gibson.dropbear.id.au>, IBM Corporation.

 *

 * Based on earlier bootwrappers by:

 * (c) Benjamin Herrenschmidt <benh@kernel.crashing.org>, IBM Corp,\

 *   and

 * Scott Wood <scottwood@freescale.com>

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 FIXME: we should process reserve entries */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * The simple platform -- for booting when firmware doesn't supply a device

 *                        tree or any platform configuration information.

 *                        All data is extracted from an embedded device tree

 *                        blob.

 *

 * Authors: Scott Wood <scottwood@freescale.com>

 *          Grant Likely <grant.likely@secretlab.ca>

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 * Copyright (c) 2008 Secret Lab Technologies Ltd.

 Make sure FDT blob is sane */

 Find the #address-cells and #size-cells properties */

 Find the memory range */

 Only interested in memory based at 0 */

 get the memsize and truncate it to under 4G on 32 bit machines */

 finally, setup the timebase */

 Now we have the memory size; initialize the heap */

 prepare the device tree and find the console */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * RedBoot firmware support

 *

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 * Copyright (c) 2008 Codehermit

 SPDX-License-Identifier: GPL-2.0-or-later

	/*

	 * Disable interrupts and turn off MSR_RI, since we'll

	 * shortly be overwriting the interrupt vectors.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Motorola/Emerson MVME5100 with PPCBug firmware.

 *

 * Author: Stephen Chivers <schivers@csc.com>

 *

 * Copyright 2013 CSC Australia Pty. Ltd.

 128M */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * This file does the necessary interface mapping between the bootwrapper

 * device tree operations and the interface provided by shared source

 * files flatdevicetree.[ch].

 *

 * Copyright 2007 David Gibson, IBM Corporation.

 = NULL */

 Make sure the dt blob is the right version and so forth */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) Paul Mackerras 1997.

/* The following structure is used to communicate with open firmware.

 Address of service name string. */

 Number of input arguments. */

 Number of output arguments. */

 Input/output arguments. */

 returns true if s2 is a prefix of s1 */

/*

 * Older OF's require that when claiming a specific range of addresses,

 * we claim the physical space in the /memory node and the virtual

 * space in the chosen mmu node, and then do a map operation to

 * map virtual to physical.

 0x12 == coherent + read/write */

	/* With some older POWER4 firmware we need to claim the area the kernel

	 * will reside in.  Newer firmwares don't need this so we just ignore

	 * the return value.

/*

 * OF device tree routines

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2016 IBM Corporation.

 Global OPAL struct used by opal-call.S */

 see opal-wrappers.S */

	/*

	 * When OPAL loads the boot kernel it stashes the OPAL base and entry

	 * address in r8 and r9 so the kernel can use the OPAL console

	 * before unflattening the devicetree. While executing the wrapper will

	 * probably trash r8 and r9 so this kentry hook restores them before

	 * entering the decompressed kernel.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for 85xx

 *

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

	/* Unfortunately, the specific model number is encoded in the

	 * soc node name in existing dts files -- once that is fixed,

	 * this can do a simple path lookup.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for PPC405EX. This image is already included

 * a dtb.

 *

 * Author: Tiejun Chen <tiejun.chen@windriver.com>

 *

 * Copyright (C) 2009 Wind River Systems, Inc.

 ext. 11.059MHz clk */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for Ebony

 *

 * Author: David Gibson <david@gibson.dropbear.id.au>

 *

 * Copyright 2007 David Gibson, IBM Corporatio.

 *   Based on cuboot-83xx.c, which is:

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2007 Freescale Semiconductor, Inc. All rights reserved.

 *

 * Author: Roy Zang <tie-fei.zang@freescale.com>

 *

 * Description:

 * Old U-boot compatibility for mpc7448hpc2 board

 * Based on the code of Scott Wood <scottwood@freescale.com>

 * for 83xx and 85xx.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright IBM Corporation, 2007

 * Josh Boyer <jwboyer@linux.vnet.ibm.com>

 *

 * Based on ebony wrapper:

 * Copyright 2007 David Gibson, IBM Corporation.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2007 IBM Corporation

 *

 * Stephen Winiecki <stevewin@us.ibm.com>

 * Josh Boyer <jwboyer@linux.vnet.ibm.com>

 *

 * Based on earlier code:

 * Copyright (C) Paul Mackerras 1997.

 128M */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for Taishan

 *

 * Author: Hugh Blemings <hugh@au.ibm.com>

 *

 * Copyright 2007 Hugh Blemings, IBM Corporation.

 *   Based on cuboot-ebony.c which is:

 * Copyright 2007 David Gibson, IBM Corporation.

 *   Based on cuboot-83xx.c, which is:

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

	/* FIXME: sysclk should be derived by reading the FPGA

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for Bamboo

 *

 * Author: Josh Boyer <jwboyer@linux.vnet.ibm.com>

 *

 * Copyright 2007 IBM Corporation

 *

 * Based on cuboot-ebony.c

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2008 PIKA Technologies

 *   Sean MacLennan <smaclennan@pikatech.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for 83xx

 *

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

	/* Unfortunately, the specific model number is encoded in the

	 * soc node name in existing dts files -- once that is fixed,

	 * this can do a simple path lookup.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for Rainier

 *

 * Valentine Barshak <vbarshak@ru.mvista.com>

 * Copyright 2007 MontaVista Software, Inc

 *

 * Based on Ebony code by David Gibson <david@gibson.dropbear.id.au>

 * Copyright IBM Corporation, 2007

 *

 * Based on Bamboo code by Josh Boyer <jwboyer@linux.vnet.ibm.com>

 * Copyright IBM Corporation, 2007

 SPDX-License-Identifier: GPL-2.0

/*

 * MPC5200 PSC serial console support.

 *

 * Author: Grant Likely <grant.likely@secretlab.ca>

 *

 * Copyright (c) 2007 Secret Lab Technologies Ltd.

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 *

 * It is assumed that the firmware (or the platform file) has already set

 * up the port.

 Programmable Serial Controller (PSC) status register bits */

	/* Assume the firmware has already configured the PSC into

 Get the base address of the psc registers */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright © 2011 Tony Breeds IBM Corporation

 *

 * Based on earlier code:

 *   Copyright (C) Paul Mackerras 1997.

 *

 *   Matt Porter <mporter@kernel.crashing.org>

 *   Copyright 2002-2005 MontaVista Software Inc.

 *

 *   Eugene Surovegin <eugene.surovegin@zultys.com> or <ebs@ebshome.net>

 *   Copyright (c) 2003, 2004 Zultys Technologies

 *

 *    Copyright 2007 David Gibson, IBM Corporation.

 *    Copyright 2010 Ben. Herrenschmidt, IBM Corporation.

 *    Copyright © 2011 David Kleikamp IBM Corporation

 Processor Identification Register */

 Make sure FDT blob is sane */

 SPDX-License-Identifier: GPL-2.0

/*

 * 16550 serial console support.

 *

 * Original copied from <file:arch/ppc/boot/common/ns16550.c>

 * (which had no copyright)

 * Modifications: 2006 (c) MontaVista Software, Inc.

 *

 * Modified by: Mark A. Greer <mgreer@mvista.com>

 Out: Divisor Latch Low */

 Out: Divisor Latch High */

 Out: FIFO Control Register */

 Out: Line Control Register */

 Out: Modem Control Register */

 In:  Line Status Register */

 Transmit-hold-register empty */

 Receiver data ready */

 In:  Modem Status Register */

 I/O: Scratch Register */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Embedded Planet EP8248E with PlanetCore firmware

 *

 * Author: Scott Wood <scottwood@freescale.com>

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright IBM Corporation, 2007

 * Josh Boyer <jwboyer@linux.vnet.ibm.com>

 *

 * Based on ebony wrapper:

 * Copyright 2007 David Gibson, IBM Corporation.

 *

 * Clocking code based on code by:

 * Stefan Roese <sr@denx.de>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * hack-coff.c - hack the header of an xcoff file to fill in

 * a few fields needed by the Open Firmware xcoff loader on

 * Power Macs but not initialized by objcopy.

 *

 * Copyright (C) Paul Mackerras 1997.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * arch/powerpc/boot/wii.c

 *

 * Nintendo Wii bootwrapper support

 * Copyright (C) 2008-2009 The GameCube Linux Team

 * Copyright (C) 2008,2009 Albert Herranz

 only MEM2 addresses */

 'mini' header pointer is the last word of MEM2 memory */

 two ranges of (address, size) words */

 nothing to do */

 retrieve MEM2 boundary from 'mini' */

 if that fails use a sane value */

	/*

	 * 'mini' boots the Broadway processor with EXI disabled.

	 * We need it enabled before probing for the USB Gecko.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PS3 bootwrapper support.

 *

 *  Copyright (C) 2007 Sony Computer Entertainment Inc.

 *  Copyright 2007 Sony Corp.

/* A buffer that may be edited by tools operating on a zImage binary so as to

 * edit the command line passed to vmlinux (by setting /chosen/bootargs).

 * The buffer is put in it's own section so that tools may locate it easier.

 lv1_panic will shutdown the lpar. */

 zero = do not reboot */

	/*

	 * n1: 0000000062690000 : ....bi..

	 * n2: 7075000000000000 : pu......

	 * n3: 0000000000000001 : ........

	 * n4: 726d5f73697a6500 : rm_size.

 16MiB */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Old U-boot compatibility for Ebony

 *

 * Author: David Gibson <david@gibson.dropbear.id.au>

 *

 * Copyright 2007 David Gibson, IBM Corporatio.

 *   Based on cuboot-83xx.c, which is:

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

/*

 * Implement primitive realloc(3) functionality.

 *

 * Author: Mark A. Greer <mgreer@mvista.com>

 *

 * 2006 (c) MontaVista, Software, Inc.  This file is licensed under

 * the terms of the GNU General Public License version 2.  This program

 * is licensed "as is" without any warranty of any kind, whether express

 * or implied.

/*

 * First time an entry is used, its base and size are set.

 * An entry can be freed and re-malloc'd but its base & size don't change.

 * Should be smart enough for needs of bootwrapper.

 never been used */

 not enough space left */

 reuse an entry keeping same base & size */

/*

 * Change size of area pointed to by 'ptr' to 'size'.

 * If 'ptr' is NULL, then its a malloc().  If 'size' is 0, then its a free().

 * 'ptr' must be NULL or a pointer to a non-freed area previously returned by

 * simple_realloc() or simple_malloc().

 ptr not from simple_malloc/simple_realloc */

 fits in current block */

/*

 * Returns addr of first byte after heap so caller can see if it took

 * too much space.  If so, change args & try again.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Compatibility for old (not device tree aware) U-Boot versions

 *

 * Author: Scott Wood <scottwood@freescale.com>

 * Consolidated using macros by David Gibson <david@gibson.dropbear.id.au>

 *

 * Copyright 2007 David Gibson, IBM Corporation.

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) Paul Mackerras 1997.

 *

 * Updates for PPC64 by Todd Inglett, Dave Engebretsen & Peter Bergner.

 assume uncompressed data if -1 is returned */

	/* We need to alloc the memsize: gzip will expand the kernel

	 * text/data, then possible rubbish we don't care about. But

	 * the kernel bss must be claimed (it will be zero'd by the

	 * kernel itself)

		/*

		 * Check if the kernel image (without bss) would overwrite the

		 * bootwrapper. The device tree has been moved in fdt_init()

		 * to an area allocated with malloc() (somewhere past _end).

 Finally, decompress the kernel */

	/* If we have an image attached to us, it overrides anything

 If there's no initrd at all, we're done */

	/*

	 * If the initrd is too low it will be clobbered when the

	 * kernel relocates to its final location.  In this case,

	 * allocate a safer place and move it.

 Tell the kernel initrd address via device tree */

 Do we have an ESM (Enter Secure Mode) blob? */

	/*

	 * If the ESM blob is too low it will be clobbered when the

	 * kernel relocates to its final location.  In this case,

	 * allocate a safer place and move it.

 Tell the kernel ESM blob address via device tree. */

/* A buffer that may be edited by tools operating on a zImage binary so as to

 * edit the command line passed to vmlinux (by setting /chosen/bootargs).

 * The buffer is put in it's own section so that tools may locate it easier.

 Wait-for-input time */

 If possible, edit the command line */

 Put the command line back into the devtree for the kernel */

	/* Do this first, because malloc() could clobber the loader's

	 * command line.  Only use the loader command line if a

 Ensure that the device tree has a /chosen node */

 console closed so printf in fatal below may not work */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PPC32 code to handle Linux booting another kernel.

 *

 * Copyright (C) 2002-2003 Eric Biederman  <ebiederm@xmission.com>

 * GameCube/ppc32 port Copyright (C) 2004 Albert Herranz

 * Copyright (C) 2005 IBM Corporation.

/*

 * This is a generic machine_kexec function suitable at least for

 * non-OpenFirmware embedded platforms.

 * It merely copies the image relocation code to the control page and

 * jumps to it.

 * A platform specific function may just call this one.

 Interrupts aren't acceptable while we reboot */

	/* mask each interrupt so we are in a more sane state for the

 we need both effective and real address here */

 copy our kernel relocation code to the control code page */

 now call it */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * powerpc code to implement the kexec_file_load syscall

 *

 * Copyright (C) 2004  Adam Litke (agl@us.ibm.com)

 * Copyright (C) 2004  IBM Corp.

 * Copyright (C) 2004,2005  Milton D Miller II, IBM Corporation

 * Copyright (C) 2005  R Sharada (sharada@in.ibm.com)

 * Copyright (C) 2006  Mohan Kumar M (mohan@in.ibm.com)

 * Copyright (C) 2016  IBM Corporation

 *

 * Based on kexec-tools' kexec-elf-ppc64.c, fs2dt.c.

 * Heavily modified for the kernel by

 * Thiago Jung Bauermann <bauerman@linux.vnet.ibm.com>.

 First 0x100 bytes */

/**

 * setup_kdump_cmdline - Prepend "elfcorehdr=<addr> " to command line

 *                       of kdump kernel for exporting the core.

 * @image:               Kexec image

 * @cmdline:             Command line parameters to update.

 * @cmdline_len:         Length of the cmdline parameters.

 *

 * kdump segment must be setup before calling this function.

 *

 * Returns new cmdline buffer for kdump kernel on success, NULL otherwise.

 Ensure it's nul terminated

/**

 * setup_purgatory - initialize the purgatory's global variables

 * @image:		kexec image.

 * @slave_code:		Slave code for the purgatory.

 * @fdt:		Flattened device tree for the next kernel.

 * @kernel_load_addr:	Address where the kernel is loaded.

 * @fdt_load_addr:	Address where the flattened device tree is loaded.

 *

 * Return: 0 on success, or negative errno on error.

 Get the slave code from the new kernel and put it in purgatory. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ppc64 code to implement the kexec_file_load syscall

 *

 * Copyright (C) 2004  Adam Litke (agl@us.ibm.com)

 * Copyright (C) 2004  IBM Corp.

 * Copyright (C) 2004,2005  Milton D Miller II, IBM Corporation

 * Copyright (C) 2005  R Sharada (sharada@in.ibm.com)

 * Copyright (C) 2006  Mohan Kumar M (mohan@in.ibm.com)

 * Copyright (C) 2020  IBM Corporation

 *

 * Based on kexec-tools' kexec-ppc64.c, kexec-elf-rel-ppc64.c, fs2dt.c.

 * Heavily modified for the kernel by

 * Hari Bathini, IBM Corporation.

 data buffer for usable-memory property */

 size allocated for the data buffer */

 maximum no. of entries */

 index of current entry */

 usable memory ranges to look up */

/**

 * get_exclude_memory_ranges - Get exclude memory ranges. This list includes

 *                             regions like opal/rtas, tce-table, initrd,

 *                             kernel, htab which should be avoided while

 *                             setting up kexec load segments.

 * @mem_ranges:                Range list to add the memory ranges to.

 *

 * Returns 0 on success, negative errno on error.

 exclude memory ranges should be sorted for easy lookup */

/**

 * get_usable_memory_ranges - Get usable memory ranges. This list includes

 *                            regions like crashkernel, opal/rtas & tce-table,

 *                            that kdump kernel could use.

 * @mem_ranges:               Range list to add the memory ranges to.

 *

 * Returns 0 on success, negative errno on error.

	/*

	 * Early boot failure observed on guests when low memory (first memory

	 * block?) is not added to usable memory. So, add [0, crashk_res.end]

	 * instead of [crashk_res.start, crashk_res.end] to workaround it.

	 * Also, crashed kernel's memory must be added to reserve map to

	 * avoid kdump kernel from using it.

/**

 * get_crash_memory_ranges - Get crash memory ranges. This list includes

 *                           first/crashing kernel's memory regions that

 *                           would be exported via an elfcore.

 * @mem_ranges:              Range list to add the memory ranges to.

 *

 * Returns 0 on success, negative errno on error.

 Skip backup memory region, which needs a separate entry */

 Try merging adjacent ranges before reallocation attempt */

 Reallocate memory ranges if there is no space to split ranges */

 Exclude crashkernel region */

	/*

	 * FIXME: For now, stay in parity with kexec-tools but if RTAS/OPAL

	 *        regions are exported to save their context at the time of

	 *        crash, they should actually be backed up just like the

	 *        first 64K bytes of memory.

 create a separate program header for the backup region */

/**

 * get_reserved_memory_ranges - Get reserve memory ranges. This list includes

 *                              memory regions that should be added to the

 *                              memory reserve map to ensure the region is

 *                              protected from any mischief.

 * @mem_ranges:                 Range list to add the memory ranges to.

 *

 * Returns 0 on success, negative errno on error.

/**

 * __locate_mem_hole_top_down - Looks top down for a large enough memory hole

 *                              in the memory regions between buf_min & buf_max

 *                              for the buffer. If found, sets kbuf->mem.

 * @kbuf:                       Buffer contents and memory parameters.

 * @buf_min:                    Minimum address for the buffer.

 * @buf_max:                    Maximum address for the buffer.

 *

 * Returns 0 on success, negative errno on error.

		/*

		 * memblock uses [start, end) convention while it is

		 * [start, end] here. Fix the off-by-one to have the

		 * same convention.

 Memory hole not found */

 Adjust memory region based on the given range */

 Suitable memory range found. Set kbuf->mem */

/**

 * locate_mem_hole_top_down_ppc64 - Skip special memory regions to find a

 *                                  suitable buffer with top down approach.

 * @kbuf:                           Buffer contents and memory parameters.

 * @buf_min:                        Minimum address for the buffer.

 * @buf_max:                        Maximum address for the buffer.

 * @emem:                           Exclude memory ranges.

 *

 * Returns 0 on success, negative errno on error.

/**

 * __locate_mem_hole_bottom_up - Looks bottom up for a large enough memory hole

 *                               in the memory regions between buf_min & buf_max

 *                               for the buffer. If found, sets kbuf->mem.

 * @kbuf:                        Buffer contents and memory parameters.

 * @buf_min:                     Minimum address for the buffer.

 * @buf_max:                     Maximum address for the buffer.

 *

 * Returns 0 on success, negative errno on error.

		/*

		 * memblock uses [start, end) convention while it is

		 * [start, end] here. Fix the off-by-one to have the

		 * same convention.

 Memory hole not found */

 Adjust memory region based on the given range */

 Suitable memory range found. Set kbuf->mem */

/**

 * locate_mem_hole_bottom_up_ppc64 - Skip special memory regions to find a

 *                                   suitable buffer with bottom up approach.

 * @kbuf:                            Buffer contents and memory parameters.

 * @buf_min:                         Minimum address for the buffer.

 * @buf_max:                         Maximum address for the buffer.

 * @emem:                            Exclude memory ranges.

 *

 * Returns 0 on success, negative errno on error.

/**

 * check_realloc_usable_mem - Reallocate buffer if it can't accommodate entries

 * @um_info:                  Usable memory buffer and ranges info.

 * @cnt:                      No. of entries to accommodate.

 *

 * Frees up the old buffer if memory reallocation fails.

 *

 * Returns buffer on success, NULL on error.

/**

 * add_usable_mem - Add the usable memory ranges within the given memory range

 *                  to the buffer

 * @um_info:        Usable memory buffer and ranges info.

 * @base:           Base address of memory range to look for.

 * @end:            End address of memory range to look for.

 *

 * Returns 0 on success, negative errno on error.

/**

 * kdump_setup_usable_lmb - This is a callback function that gets called by

 *                          walk_drmem_lmbs for every LMB to set its

 *                          usable memory ranges.

 * @lmb:                    LMB info.

 * @usm:                    linux,drconf-usable-memory property value.

 * @data:                   Pointer to usable memory buffer and ranges info.

 *

 * Returns 0 on success, negative errno on error.

	/*

	 * kdump load isn't supported on kernels already booted with

	 * linux,drconf-usable-memory property.

		/*

		 * Update the no. of ranges added. Two entries (base & size)

		 * for every range added.

/**

 * add_usable_mem_property - Add usable memory property for the given

 *                           memory node.

 * @fdt:                     Flattened device tree for the kdump kernel.

 * @dn:                      Memory node.

 * @um_info:                 Usable memory buffer and ranges info.

 *

 * Returns 0 on success, negative errno on error.

 Now that we know the path, find its offset in kdump kernel's fdt */

 Get the address & size cells */

	/*

	 * "reg" property represents sequence of (addr,size) tuples

	 * each representing a memory range.

	/*

	 * No kdump kernel usable memory found in this memory node.

	 * Write (0,0) tuple in linux,usable-memory property for

	 * this region to be ignored.

/**

 * update_usable_mem_fdt - Updates kdump kernel's fdt with linux,usable-memory

 *                         and linux,drconf-usable-memory DT properties as

 *                         appropriate to restrict its memory usage.

 * @fdt:                   Flattened device tree for the kdump kernel.

 * @usable_mem:            Usable memory ranges for kdump kernel.

 *

 * Returns 0 on success, negative errno on error.

 Memory ranges to look up */

	/*

	 * Walk through each memory node and set linux,usable-memory property

	 * for the corresponding node in kdump kernel's fdt.

/**

 * load_backup_segment - Locate a memory hole to place the backup region.

 * @image:               Kexec image.

 * @kbuf:                Buffer contents and memory parameters.

 *

 * Returns 0 on success, negative errno on error.

	/*

	 * Setup a source buffer for backup segment.

	 *

	 * A source buffer has no meaning for backup region as data will

	 * be copied from backup source, after crash, in the purgatory.

	 * But as load segment code doesn't recognize such segments,

	 * setup a dummy source buffer to keep it happy for now.

/**

 * update_backup_region_phdr - Update backup region's offset for the core to

 *                             export the region appropriately.

 * @image:                     Kexec image.

 * @ehdr:                      ELF core header.

 *

 * Assumes an exclusive program header is setup for the backup region

 * in the ELF headers

 *

 * Returns nothing.

/**

 * load_elfcorehdr_segment - Setup crash memory ranges and initialize elfcorehdr

 *                           segment needed to load kdump kernel.

 * @image:                   Kexec image.

 * @kbuf:                    Buffer contents and memory parameters.

 *

 * Returns 0 on success, negative errno on error.

 Setup elfcorehdr segment */

 Fix the offset for backup region in the ELF header */

/**

 * load_crashdump_segments_ppc64 - Initialize the additional segements needed

 *                                 to load kdump kernel.

 * @image:                         Kexec image.

 * @kbuf:                          Buffer contents and memory parameters.

 *

 * Returns 0 on success, negative errno on error.

 Load backup segment - first 64K bytes of the crashing kernel */

 Load elfcorehdr segment - to export crashing kernel's vmcore */

/**

 * setup_purgatory_ppc64 - initialize PPC64 specific purgatory's global

 *                         variables and call setup_purgatory() to initialize

 *                         common global variable.

 * @image:                 kexec image.

 * @slave_code:            Slave code for the purgatory.

 * @fdt:                   Flattened device tree for the next kernel.

 * @kernel_load_addr:      Address where the kernel is loaded.

 * @fdt_load_addr:         Address where the flattened device tree is loaded.

 *

 * Returns 0 on success, negative errno on error.

		/*

		 * Tell relocatable kernel to run at load address

		 * via the word meant for that at 0x5c.

 Tell purgatory where to look for backup region */

 Setup OPAL base & entry values */

/**

 * kexec_extra_fdt_size_ppc64 - Return the estimated additional size needed to

 *                              setup FDT for kexec/kdump kernel.

 * @image:                      kexec image being loaded.

 *

 * Returns the estimated extra size needed for kexec/kdump kernel FDT.

	/*

	 * For kdump kernel, account for linux,usable-memory and

	 * linux,drconf-usable-memory properties. Get an approximate on the

	 * number of usable memory entries and use for FDT size estimation.

/**

 * add_node_props - Reads node properties from device node structure and add

 *                  them to fdt.

 * @fdt:            Flattened device tree of the kernel

 * @node_offset:    offset of the node to add a property at

 * @dn:             device node pointer

 *

 * Returns 0 on success, negative errno on error.

/**

 * update_cpus_node - Update cpus node of flattened device tree using of_root

 *                    device node.

 * @fdt:              Flattened device tree of the kernel.

 *

 * Returns 0 on success, negative errno on error.

 Add cpus node to fdt */

 Add cpus node properties */

 Loop through all subnodes of cpus and add them to fdt */

/**

 * setup_new_fdt_ppc64 - Update the flattend device-tree of the kernel

 *                       being loaded.

 * @image:               kexec image being loaded.

 * @fdt:                 Flattened device tree for the next kernel.

 * @initrd_load_addr:    Address where the next initrd will be loaded.

 * @initrd_len:          Size of the next initrd, or 0 if there will be none.

 * @cmdline:             Command line for the next kernel, or NULL if there will

 *                       be none.

 *

 * Returns 0 on success, negative errno on error.

	/*

	 * Restrict memory usage for kdump kernel by setting up

	 * usable memory ranges and memory reserve map.

		/*

		 * Ensure we don't touch crashed kernel's memory except the

		 * first 64K of RAM, which will be backed up.

 Ensure backup region is not used by kdump/capture kernel */

 Update cpus nodes information to account hotplug CPUs. */

 Update memory reserve map */

/**

 * arch_kexec_locate_mem_hole - Skip special memory regions like rtas, opal,

 *                              tce-table, reserved-ranges & such (exclude

 *                              memory ranges) as they can't be used for kexec

 *                              segment buffer. Sets kbuf->mem when a suitable

 *                              memory hole is found.

 * @kbuf:                       Buffer contents and memory parameters.

 *

 * Assumes minimum of PAGE_SIZE alignment for kbuf->memsz & kbuf->buf_align.

 *

 * Returns 0 on success, negative errno on error.

 Look up the exclude ranges list while locating the memory hole */

 Segments for kdump kernel should be within crashkernel region */

 Add the buffer allocated to the exclude list for the next lookup */

/**

 * arch_kexec_kernel_image_probe - Does additional handling needed to setup

 *                                 kexec segments.

 * @image:                         kexec image being loaded.

 * @buf:                           Buffer pointing to elf data.

 * @buf_len:                       Length of the buffer.

 *

 * Returns 0 on success, negative errno on error.

 Get exclude memory ranges needed for setting up kexec segments */

/**

 * arch_kimage_file_post_load_cleanup - Frees up all the allocations done

 *                                      while loading the image.

 * @image:                              kexec image being loaded.

 *

 * Returns 0 on success, negative errno on error.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PPC64 code to handle Linux booting another kernel.

 *

 * Copyright (C) 2004-2005, IBM Corp.

 *

 * Created by: Milton D Miller II

 _end */

 limits of segment */

 limits of blocked memory range */

	/*

	 * Since we use the kernel fault handlers and paging code to

	 * handle the virtual mode, we must make sure no destination

	 * overlaps kernel static data or bss.

 We also should not overwrite the tce tables */

 Called during kexec sequence with MMU off */

	/*

	 * We rely on kexec_load to create a lists that properly

	 * initializes these pointers before they are used.

	 * We will still crash if the list is wrong, but at least

	 * the compiler will be quiet.

 Called during kexec sequence with MMU off */

 save the ranges on the stack to efficiently flush the icache */

	/*

	 * After this call we may not use anything allocated in dynamic

	 * memory, including *image.

	 *

	 * Only globals and the stack are allowed.

	/*

	 * we need to clear the icache for all dest pages sometime,

	 * including ones that were in place on the original copy

 make sure our irqs are disabled before we say they are */

 make sure all irqs are disabled before this */

	/*

	 * Now every CPU has IRQs off, we can clear out any pending

	 * IPIs and be sure that no more will come in after this.

 NOTREACHED */

	/* Make sure each CPU has at least made it to the state we need.

	 *

	 * FIXME: There is a (slim) chance of a problem if not all of the CPUs

	 * are correctly onlined.  If somehow we start a CPU on boot with RTAS

	 * start-cpu, but somehow that CPU doesn't write callin_cpu_map[] in

	 * time, the boot CPU will timeout.  If it does eventually execute

	 * stuff, the secondary will start up (paca_ptrs[]->cpu_start was

	 * written) and get into a peculiar state.

	 * If the platform supports smp_ops->take_timebase(), the secondary CPU

	 * will probably be spinning in there.  If not (i.e. pseries), the

	 * secondary will continue on and try to online itself/idle/etc. If it

	 * survives that, we need to find these

	 * possible-but-not-online-but-should-be CPUs and chaperone them into

	 * kexec_smp_wait().

/*

 * We need to make sure each present CPU is online.  The next kernel will scan

 * the device tree and assume primary threads are online and query secondary

 * threads via RTAS to online them if required.  If we don't online primary

 * threads, they will be stuck.  However, we also online secondary threads as we

 * may be using 'cede offline'.  In this case RTAS doesn't see the secondary

 * threads as offline -- and again, these CPUs will be stuck.

 *

 * So, we online all CPUs that should be running, including secondary threads.

 wait */0);

 make sure IRQs are disabled before we say they are */

 we are sure every CPU has IRQs off at this point */

	/*

	 * Before removing MMU mappings make sure all CPUs have entered real

	 * mode:

 after we tell the others to go down */

 ! SMP */

	/*

	 * move the secondarys to us so that we can copy

	 * the new kernel 0-0x100 safely

	 *

	 * do this if kexec in setup.c ?

	 *

	 * We need to release the cpus if we are ever going from an

	 * UP to an SMP kernel.

 SMP */

/*

 * kexec thread structure and stack.

 *

 * We need to make sure that this is 16384-byte aligned due to the

 * way process stacks are handled.  It also must be statically allocated

 * or allocated as part of the kimage, because everything else may be

 * overwritten when we copy the kexec image.  We piggyback on the

 * "init_task" linker section here to statically allocate a stack.

 *

 * We could use a smaller stack if we don't care about anything using

 * current, but that audit has not been performed.

/*

 * For similar reasons to the stack above, the kexecing CPU needs to be on a

 * static PACA; we switch to kexec_paca.

 Our assembly helper, in misc_64.S */

 too late to fail here */

 prepare control code if any */

	/*

        * If the kexec boot is the normal one, need to shutdown other cpus

        * into our wait loop and quiesce interrupts.

        * Otherwise, in the case of crashed mode (crashing_cpu >= 0),

        * stopping other CPUs and collecting their pt_regs is done before

        * using debugger IPI.

	/* switch to a staticly allocated stack.  Based on irq stack code.

	 * We setup preempt_count to avoid using VMX in memcpy.

	 * XXX: the task struct will likely be invalid once we do the copy!

	/* We need a static PACA, too; copy this CPU's PACA over and switch to

	 * it. Also poison per_cpu_offset and NULL lppaca to catch anyone using

	 * non-static data.

	/*

	 * The lppaca should be unregistered at this point so the HV won't

	 * touch it. In the case of a crash, none of the lppacas are

	 * unregistered so there is not much we can do about it here.

	/*

	 * On Book3S, the copy must happen with the MMU off if we are either

	 * using Radix page tables or we are not in an LPAR since we can

	 * overwrite the page tables while copying.

	 *

	 * In an LPAR, we keep the MMU on otherwise we can't access beyond

	 * the RMA. On BookE there is no real MMU off mode, so we have to

	 * keep it enabled as well (but then we have bolted TLB entries).

	/* Some things are best done in assembly.  Finding globals with

	 * a toc is easier in C, so pass in what we can.

 NOTREACHED */

 Values we need to export to the second kernel via the device tree. */

 On machines with no htab htab_address is NULL */

 remove any stale propertys so ours can be found */

 CONFIG_PPC_BOOK3S_64 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Architecture specific (PPC64) functions for kexec based crash dumps.

 *

 * Copyright (C) 2005, IBM Corp.

 *

 * Created by: Haren Myneni

/*

 * The primary CPU waits a while for all secondary CPUs to enter. This is to

 * avoid sending an IPI if the secondary CPUs are entering

 * crash_kexec_secondary on their own (eg via a system reset).

 *

 * The secondary timeout has to be longer than the primary. Both timeouts are

 * in milliseconds.

/*

 * crash_wake_offline should be set to 1 by platforms that intend to wake

 * up offline cpus prior to jumping to a kdump kernel. Currently powernv

 * sets it to 1, since we want to avoid things from happening when an

 * offline CPU wakes up due to something like an HMI (malfunction error),

 * which propagates to all threads.

 List of shutdown handles */

	/*

	 * Starting the kdump boot.

	 * This barrier is needed to make sure that all CPUs are stopped.

 FIXME */

 NOTREACHED */

 Excluding the panic cpu */

	/*

	 * FIXME: Until we will have the way to stop other CPUs reliably,

	 * the crash CPU will send an IPI and wait for other CPUs to

	 * respond.

 Would it be better to replace the trap vector here? */

	/*

	 * If we have a panic timeout set then we can't wait indefinitely

	 * for someone to activate system reset. We also give up on the

	 * second time through if system reset fail to work.

	/*

	 * A system reset will cause all CPUs to take an 0x100 exception.

	 * The primary CPU returns here via setjmp, and the secondary

	 * CPUs reexecute the crash_kexec_secondary path.

		/*

		 * A system reset will force all CPUs to execute the

		 * crash code again. We need to reset cpus_in_crash so we

		 * wait for everyone to do this.

/*

 * This function will be called by secondary cpus.

 Wait for the primary crash CPU to signal its progress */

 No response, kdump image may not have been loaded */

 ! CONFIG_SMP */

	/*

	 * move the secondaries to us so that we can copy

	 * the new kernel 0-0x100 safely

	 *

	 * do this if kexec in setup.c ?

 FIXME */

 CONFIG_SMP */

 wait for all the CPUs to hit real mode but timeout if they don't come in */

 CONFIG_SMP && CONFIG_PPC64 */

/*

 * Register a function to be called on shutdown.  Only use this if you

 * can't reset your device in the second kernel.

 Insert handle at first empty entry */

 Shift handles down */

		/*

		 * Reset last entry to NULL now that it has been shifted down,

		 * this will allow new handles to be added here.

 Avoid hardlocking with irresponsive CPU holding logbuf_lock */

	/*

	 * This function is only called after the system

	 * has panicked or is otherwise in a critical state.

	 * The minimum amount of code to allow a kexec'd kernel

	 * to run successfully needs to happen here.

	 *

	 * In practice this means stopping other cpus in

	 * an SMP system.

	 * The kernel is broken so disable interrupts.

	/*

	 * Make a note of crashing cpu. Will be used in machine_kexec

	 * such that another IPI will not be sent.

	/*

	 * If we came in via system reset, wait a while for the secondary

	 * CPUs to enter.

	/*

	 * Call registered shutdown routines safely.  Swap out

	 * __debugger_fault_handler, and replace on exit.

			/*

			 * Insert syncs and delay to ensure

			 * instructions in the dangerous region don't

			 * leak away from this protected region.

 dangerous region */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Load ELF vmlinux file for the kexec_file_load syscall.

 *

 * Copyright (C) 2004  Adam Litke (agl@us.ibm.com)

 * Copyright (C) 2004  IBM Corp.

 * Copyright (C) 2005  R Sharada (sharada@in.ibm.com)

 * Copyright (C) 2006  Mohan Kumar M (mohan@in.ibm.com)

 * Copyright (C) 2016  IBM Corporation

 *

 * Based on kexec-tools' kexec-elf-exec.c and kexec-elf-ppc64.c.

 * Heavily modified for the kernel by

 * Thiago Jung Bauermann <bauerman@linux.vnet.ibm.com>.

 min & max buffer values for kdump case */

 Load additional segments needed for panic kernel */

 Setup cmdline for kdump kernel case */

 FDT will be freed in arch_kimage_file_post_load_cleanup */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Code to handle transition of Linux booting another kernel.

 *

 * Copyright (C) 2002-2003 Eric Biederman  <ebiederm@xmission.com>

 * GameCube/ppc32 port Copyright (C) 2004 Albert Herranz

 * Copyright (C) 2005 IBM Corporation.

/*

 * Do not allocate memory (or fail in any way) in machine_kexec().

 * We are past the point of no return, committed to rebooting now.

 Fall back to normal restart if we're still alive. */

 use common parsing */

	/* We might have got these values via the command line or the

		/*

		 * On 64bit we split the RMO in half but cap it at half of

		 * a small SLB (128MB) since the crash kernel needs to place

		 * itself and some stacks to be in the first segment.

 The crash region must not overlap the current kernel */

 Crash kernel trumps memory limit */

 Values we need to export to the second kernel via the device tree. */

	/* There might be existing crash kernel properties, but we can't

	/*

	 * memory_limit is required by the kexec-tools to limit the

	 * crash regions to the actual memory used.

 remove any stale properties so ours can be found */

 information needed by userspace when using default_machine_kexec */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * powerpc code to implement the kexec_file_load syscall

 *

 * Copyright (C) 2004  Adam Litke (agl@us.ibm.com)

 * Copyright (C) 2004  IBM Corp.

 * Copyright (C) 2004,2005  Milton D Miller II, IBM Corporation

 * Copyright (C) 2005  R Sharada (sharada@in.ibm.com)

 * Copyright (C) 2006  Mohan Kumar M (mohan@in.ibm.com)

 * Copyright (C) 2020  IBM Corporation

 *

 * Based on kexec-tools' kexec-ppc64.c, fs2dt.c.

 * Heavily modified for the kernel by

 * Hari Bathini, IBM Corporation.

/**

 * get_max_nr_ranges - Get the max no. of ranges crash_mem structure

 *                     could hold, given the size allocated for it.

 * @size:              Allocation size of crash_mem structure.

 *

 * Returns the maximum no. of ranges.

/**

 * get_mem_rngs_size - Get the allocated size of mem_rngs based on

 *                     max_nr_ranges and chunk size.

 * @mem_rngs:          Memory ranges.

 *

 * Returns the maximum size of @mem_rngs.

	/*

	 * Memory is allocated in size multiple of MEM_RANGE_CHUNK_SZ.

	 * So, align to get the actual length.

/**

 * __add_mem_range - add a memory range to memory ranges list.

 * @mem_ranges:      Range list to add the memory range to.

 * @base:            Base address of the range to add.

 * @size:            Size of the memory range to add.

 *

 * (Re)allocates memory, if needed.

 *

 * Returns 0 on success, negative errno on error.

/**

 * __merge_memory_ranges - Merges the given memory ranges list.

 * @mem_rngs:              Range list to merge.

 *

 * Assumes a sorted range list.

 *

 * Returns nothing.

 cmp_func_t callback to sort ranges with sort() */

/**

 * sort_memory_ranges - Sorts the given memory ranges list.

 * @mem_rngs:           Range list to sort.

 * @merge:              If true, merge the list after sorting.

 *

 * Returns nothing.

 Sort the ranges in-place */

 For debugging purpose */

/**

 * realloc_mem_ranges - reallocate mem_ranges with size incremented

 *                      by MEM_RANGE_CHUNK_SZ. Frees up the old memory,

 *                      if memory allocation fails.

 * @mem_ranges:         Memory ranges to reallocate.

 *

 * Returns pointer to reallocated memory on success, NULL otherwise.

/**

 * add_mem_range - Updates existing memory range, if there is an overlap.

 *                 Else, adds a new memory range.

 * @mem_ranges:    Range list to add the memory range to.

 * @base:          Base address of the range to add.

 * @size:          Size of the memory range to add.

 *

 * (Re)allocates memory, if needed.

 *

 * Returns 0 on success, negative errno on error.

/**

 * add_tce_mem_ranges - Adds tce-table range to the given memory ranges list.

 * @mem_ranges:         Range list to add the memory range(s) to.

 *

 * Returns 0 on success, negative errno on error.

			/*

			 * It is ok to have pci nodes without tce. So, ignore

			 * property does not exist error.

/**

 * add_initrd_mem_range - Adds initrd range to the given memory ranges list,

 *                        if the initrd was retained.

 * @mem_ranges:           Range list to add the memory range to.

 *

 * Returns 0 on success, negative errno on error.

 This range means something, only if initrd was retained */

/**

 * add_htab_mem_range - Adds htab range to the given memory ranges list,

 *                      if it exists

 * @mem_ranges:         Range list to add the memory range to.

 *

 * Returns 0 on success, negative errno on error.

/**

 * add_kernel_mem_range - Adds kernel text region to the given

 *                        memory ranges list.

 * @mem_ranges:           Range list to add the memory range to.

 *

 * Returns 0 on success, negative errno on error.

/**

 * add_rtas_mem_range - Adds RTAS region to the given memory ranges list.

 * @mem_ranges:         Range list to add the memory range to.

 *

 * Returns 0 on success, negative errno on error.

/**

 * add_opal_mem_range - Adds OPAL region to the given memory ranges list.

 * @mem_ranges:         Range list to add the memory range to.

 *

 * Returns 0 on success, negative errno on error.

/**

 * add_reserved_mem_ranges - Adds "/reserved-ranges" regions exported by f/w

 *                           to the given memory ranges list.

 * @mem_ranges:              Range list to add the memory ranges to.

 *

 * Returns 0 on success, negative errno on error.

 Each reserved range is an (address,size) pair */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Cryptographic API.

 *

 * powerpc implementation of the SHA1 Secure Hash Algorithm.

 *

 * Derived from cryptoapi implementation, adapted for in-place

 * scatterlist interface.

 *

 * Derived from "crypto/sha1.c"

 * Copyright (c) Alan Smithee.

 * Copyright (c) Andrew McDonald <andrew@mcdonald.org.uk>

 * Copyright (c) Jean-Francois Dive <jef@linuxbe.org>

 Add padding and return the message digest. */

 Pad out to 56 mod 64 */

 Append length */

 Store state in digest */

 Wipe context */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Glue code for AES implementation for SPE instructions (PPC)

 *

 * Based on generic implementation. The assembler module takes care

 * about the SPE registers so it can run from interrupt context.

 *

 * Copyright (c) 2015 Markus Stockhausen <stockhausen@collogia.de>

/*

 * MAX_BYTES defines the number of bytes that are allowed to be processed

 * between preempt_disable() and preempt_enable(). e500 cores can issue two

 * instructions per clock cycle using one 32/64 bit unit (SU1) and one 32

 * bit unit (SU2). One of these can be a memory access that is executed via

 * a single load and store unit (LSU). XTS-AES-256 takes ~780 operations per

 * 16 byte block block or 25 cycles per byte. Thus 768 bytes of input data

 * will need an estimated maximum of 20,000 cycles. Headroom for cache misses

 * included. Even with the low end model clocked at 667 MHz this equals to a

 * critical time window of less than 30us. The value has been chosen to

 * process a 512 byte disk block in one or a large 1400 bytes IPsec network

 * packet in two runs.

 *

 disable preemption and save users SPE registers if required */

 reenable preemption */

/*

 * Algorithm definitions. Disabling alignment (cra_alignmask=0) was chosen

 * because the e500 platform can handle unaligned reads/writes very efficently.

 * This improves IPsec thoughput by another few percent. Additionally we assume

 * that AES context is always aligned to at least 8 bytes because it is created

 * with kmalloc() in the crypto infrastructure

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Calculate a CRC T10-DIF with vpmsum acceleration

 *

 * Copyright 2017, Daniel Axtens, IBM Corporation.

 * [based on crc32c-vpmsum_glue.c]

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Glue code for SHA-256 implementation for SPE instructions (PPC)

 *

 * Based on generic implementation. The assembler module takes care 

 * about the SPE registers so it can run from interrupt context.

 *

 * Copyright (c) 2015 Markus Stockhausen <stockhausen@collogia.de>

/*

 * MAX_BYTES defines the number of bytes that are allowed to be processed

 * between preempt_disable() and preempt_enable(). SHA256 takes ~2,000

 * operations per 64 bytes. e500 cores can issue two arithmetic instructions

 * per clock cycle using one 32/64 bit unit (SU1) and one 32 bit unit (SU2).

 * Thus 1KB of input data will need an estimated maximum of 18,000 cycles.

 * Headroom for cache misses included. Even with the low end model clocked

 * at 667 MHz this equals to a critical time window of less than 27us.

 *

 We just start SPE operations and will save SPE registers later. */

 reenable preemption */

 make sure we can clear the fast way */

 cut input data into smaller blocks */

 avoid bytewise memcpy */

 clear sensitive data */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Setting the seed allows arbitrary accumulators and flexible XOR policy

 * If your algorithm starts with ~0, then XOR with ~0 before you set

 * the seed.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * CRC vpmsum tester

 * Copyright 2017 Daniel Axtens, IBM Corporation.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Glue code for MD5 implementation for PPC assembler

 *

 * Based on generic implementation.

 *

 * Copyright (c) 2015 Markus Stockhausen <stockhausen@collogia.de>

 make sure we can clear the fast way */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Glue code for SHA-1 implementation for SPE instructions (PPC)

 *

 * Based on generic implementation.

 *

 * Copyright (c) 2015 Markus Stockhausen <stockhausen@collogia.de>

/*

 * MAX_BYTES defines the number of bytes that are allowed to be processed

 * between preempt_disable() and preempt_enable(). SHA1 takes ~1000

 * operations per 64 bytes. e500 cores can issue two arithmetic instructions

 * per clock cycle using one 32/64 bit unit (SU1) and one 32 bit unit (SU2).

 * Thus 2KB of input data will need an estimated maximum of 18,000 cycles.

 * Headroom for cache misses included. Even with the low end model clocked

 * at 667 MHz this equals to a critical time window of less than 27us.

 *

 We just start SPE operations and will save SPE registers later. */

 reenable preemption */

 make sure we can clear the fast way */

 SPDX-License-Identifier: GPL-2.0-only

 MODULE */

/*

 * Emulate the floating point instruction at address PC.  Returns -1 if the

 * instruction to be emulated is illegal (such as with the opDEC trap), else

 * the SI_CODE for a SIGFPE signal, else 0 if everything's ok.

 *

 * Notice that the kernel does not and cannot use FP regs.  This is good

 * because it means that instead of saving/restoring all fp regs, we simply

 * stick the result of the operation into the appropriate register.

 destination register */

 Dynamic -- get rounding mode from fpcr.  */

			/* CMPTEQ, CMPTUN don't trap on QNaN,

			/* It is irritating that DEC encoded CVTST with

			   SRC == T_floating.  It is also interesting that

 AAHB Table B-2 says QNaN should not trigger INV */

			/* Notice: We can get here only due to an integer

			   overflow.  Such overflows are reported as invalid

			   ops.  We return the result the hw would have

 sign and msb */

 rest of the int */

	/*

	 * Take the appropriate action for each possible

	 * floating-point result:

	 *

	 *	- Set the appropriate bits in the FPCR

	 *	- If the specified exception is enabled in the FPCR,

	 *	  return.  The caller (entArith) will dispatch

	 *	  the appropriate signal to the translated program.

	 *

	 * In addition, properly track the exception state in software

	 * as described in the Alpha Architecture Handbook section 4.7.7.3.

 Record exceptions in software control word.  */

 Update hardware control register.  */

 Do we generate a signal?  */

	/* We used to write the destination register here, but DEC FORTRAN

	   requires that the result *always* be written... so we do the write

	/*

	 * Turn off the bits corresponding to registers that are the

	 * target of instructions that set bits in the exception

	 * summary register.  We have some slack doing this because a

	 * register that is the target of a trapping instruction can

	 * be written at most once in the trap shadow.

	 *

	 * Branches, jumps, TRAPBs, EXCBs and calls to PALcode all

	 * bound the trap shadow, so we need not look any further than

	 * up to the first occurrence of such an instruction.

 branches */

 Re-execute insns in the trap-shadow.  */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/alpha/mm/init.c

 *

 *  Copyright (C) 1995  Linus Torvalds

 2.3.x zone allocator, 1999 Andrea Arcangeli <andrea@suse.de> */

 max_low_pfn */

 The last PGD entry is the VPTB self-map.  */

/*

 * BAD_PAGE is the page that is used for page faults when linux

 * is out-of-memory. Older versions of linux just did a

 * do_exit(), but using this instead means there is less risk

 * for a process dying in kernel mode, possibly leaving an inode

 * unused etc..

 *

 * BAD_PAGETABLE is the accompanying page-table: it is initialized

 * to point to BAD_PAGE entries.

 *

 * ZERO_PAGE is a special page that is used for zero-initialized

 * data and COW.

 Set up initial PCB, VPTB, and other such nicities.  */

	/* Initialize the kernel's page tables.  Linux puts the vptb in

	/* Set the vptb.  This is often done by the bootloader, but 

 Also set up the real kernel PCB while we're at it.  */

 set FEN, clear everything else */

	/* Save off the contents of the original PCB so that we can

	   restore the original console's page tables for a clean reboot.



	   Note that the PCB is supposed to be a physical address, but

	   since KSEG values also happen to work, folks get confused.

 Starting at the HWRPB, locate the CRB. */

 Tell the console whither it is to be remapped. */

 "We're boned."  --Bender */

 Edit the procedure descriptors for DISPATCH and FIXUP. */

	/* Allocate one PGD and one PMD.  In the case of SRM, we'll need

	   these to actually remap the console.  There is an assumption

	   here that only one of each is needed, and this allows for 8MB.

	   On systems with larger consoles, additional pages will be

	   allocated as needed during the mapping process.



	   In the case of not SRM, but not CONFIG_ALPHA_LARGE_VMALLOC,

	   we need to allocate the PGD we use for vmalloc before we start

 calculate needed size */

 register the vm area */

		/* Set up the third level PTEs and update the virtual

				/* Newer consoles (especially on larger

				   systems) may require more pages of

/*

 * paging_init() sets up the memory map.

 Initialize mem_map[].  */

 Initialize the kernel's ZERO_PGE. */

 Move the vptb back to where the SRM console expects it.  */

 Reload the page tables that the console had in use.  */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/alpha/mm/fault.c

 *

 *  Copyright (C) 1995  Linus Torvalds

/*

 * Force a new ASN for a task.

/*

 * This routine handles page faults.  It determines the address,

 * and the problem, and then passes it off to handle_mm_fault().

 *

 * mmcsr:

 *	0 = translation not valid

 *	1 = access violation

 *	2 = fault-on-read

 *	3 = fault-on-execute

 *	4 = fault-on-write

 *

 * cause:

 *	-1 = instruction fetch

 *	0 = load

 *	1 = store

 *

 * Registers $9 through $15 are saved in a block just prior to `regs' and

 * are saved and restored around the call to allow exception code to

 * modify them.

 Macro for exception fixup code to access integer registers.  */

	/* As of EV6, a load into $31/$f31 is a prefetch, and never faults

	   (or is suppressed by the PALcode).  Support that for older CPUs

 ldq ldl ldt lds ldg ldf ldwu ldbu */

	/* If we're in an interrupt context, or have no user context,

	/* Ok, we have a good vm_area for this memory access, so

 Allow reads even for write-only mappings */

	/* If for any reason at all we couldn't handle the fault,

	   make sure we exit gracefully rather than endlessly redo

			 /* No need to mmap_read_unlock(mm) as we would

			 * have already released it in __lock_page_or_retry

			 * in mm/filemap.c.

	/* Something tried to access memory that isn't in our memory map.

 Are we prepared to handle this fault as an exception?  */

	/* Oops. The kernel tried to access some bad page. We'll have to

	/* We ran out of memory, or some other thing happened to us that

	/* Send a sigbus, regardless of whether we were in kernel

		/* Synchronize this task's top level page-table

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/alpha/kernel/process.c

 *

 *  Copyright (C) 1995  Linus Torvalds

/*

 * This file handles the architecture-dependent parts of process handling.

/*

 * Power off function, if any

/*

 * Sleep the CPU.

 * EV6, LCA45 and QEMU know how to power down, skipping N timer interrupts.

 ALPHA_WTINT */

 No point in taking interrupts anymore. */

 Clear reason to "default"; clear "bootstrap in progress". */

 Secondaries halt here. */

 "remain halted" */

 "cold bootstrap" */

			/* For SRM, we could probably set environment

			   variables to get this to work.  We'd have to

			   delay this until after srm_paging_stop unless

			   we ever got srm_fixup working.



			   At the moment, SRM will use the last boot device,

			   but the file and flags will be the defaults, when

 "warm bootstrap" */

 "remain halted" */

 Wait for the secondaries to halt. */

 If booted from SRM, reset some of the original environment. */

		/* If we've gotten here after SysRq-b, leave interrupt

 This has the effect of resetting the VGA video origin.  */

		/* Unfortunately, since MILO doesn't currently understand

		   the hwrpb bits above, we can't reliably halt the 

/* Used by sysrq-p, among others.  I don't believe r9-r15 are ever

/*

 * Re-start a thread when doing execve()

	/* Arrange for each exec'ed process to start off with a clean slate

 Clean slate for TLS.  */

/*

 * Copy architecture-specific thread state

 set FEN, clear everything else */

 kernel thread */

 function */

	/* Note: if CLONE_SETTLS is not set, then we must inherit the

	   value from the parent, which will have been set by the block

	   copy in dup_task_struct.  This is non-intuitive, but is

	   required for proper operation in the case of a threaded

 OSF/1 has some strange fork() semantics.  */

 OSF/1 has some strange fork() semantics.  */

/*

 * Fill in the user structure for a ELF core dump.

 switch stack follows right below pt_regs: */

	/* Once upon a time this was the PS value.  Which is stupid

	   since that is always 8 for usermode.  Usurped for the more

/*

 * Return saved PC of a blocked thread.  This assumes the frame

 * pointer is the 6th saved long on the kernel stack and that the

 * saved return address is the first long in the frame.  This all

 * holds provided the thread blocked through a call to schedule() ($15

 * is the frame pointer in schedule() and $15 is saved at offset 48 by

 * entry.S:do_switch_stack).

 *

 * Under heavy swap load I've seen this lose in an ugly way.  So do

 * some extra sanity checking on the ranges we expect these pointers

 * to be in so that we can fail gracefully.  This is just for ps after

 * all.  -- r~

	/*

	 * This one depends on the frame size of schedule().  Do a

	 * "disass schedule" in gdb to find the frame size.  Also, the

	 * code assumes that sleep_on() follows immediately after

	 * interruptible_sleep_on() and that add_timer() follows

	 * immediately after interruptible_sleep().  Ugly, isn't it?

	 * Maybe adding a wchan field to task_struct would be better,

	 * after all...

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/gct.c

 First check the magic number.  */

 Check against the search struct.  */

 Found it -- call out.  */

 Now walk the tree, siblings first.  */

 Then the children.  */

 SPDX-License-Identifier: GPL-2.0

 Remember if the application is TASO.  */

 SPDX-License-Identifier: GPL-2.0

/*

 * arch/alpha/kernel/traps.c

 *

 * (C) Copyright 1994 Linus Torvalds

/*

 * This file initializes the trap entry points

 Work-around for some SRMs which mishandle opDEC faults.  */

 Load the address of... */

	/* A stub instruction fault handler.  Just add 4 to the

 Install the instruction fault handler.  */

	/* With that in place, the fault from the round-to-minf fp

	   insn will arrive either at the "lda 4" insn (bad) or one

	/*

	 * debugging aid: "show_stack(NULL, NULL, KERN_EMERG);" prints the

	 * back trace for this cpu.

		/* Software-completion summary bit is set, so try to

		   emulate the instruction.  If the processor supports

			/* If CALL_PAL WTINT is totally unsupported by the

			   PALcode, e.g. MILO, "emulate" it by overwriting

 mov 0,$0 */

 ALPHA_WTINT */

 breakpoint */

 make pc point to former bpt */

 bugcheck */

 gentrap */

 opDEC */

			/* The some versions of SRM do not handle

			   the opDEC properly - they return the PC of the

			   opDEC fault, not the instruction after as the

			   Alpha architecture requires.  Here we fix it up.

			   We do this by intentionally causing an opDEC

			   fault during the boot sequence and testing if

			   we get the correct PC.  If not, we set a flag

			/* EV4 does not implement anything except normal

			   rounding.  Everything else will come here as

 FEN fault */

		/* Irritating users can call PAL_clrfen to disable the

		   FPU for the process.  The kernel will then trap in

		   do_switch_stack and undo_switch_stack when we try

		   to save and restore the FP registers.



		   Given that GCC by default generates code that uses the

		   FP registers, PAL_clrfen is not useful except for DoS

		   attacks.  So turn the bleeding FPU back on and be done

 illoc */

 unexpected instruction-fault type */

/* There is an ifdef in the PALcode in MILO that enables a 

   "kernel debugging entry point" as an unprivileged call_pal.



   We don't want to have anything to do with it, but unfortunately

   several versions of MILO included in distributions have it enabled,

/*

 * entUna has a different register layout to be reasonably simple. It

 * needs access to all the integer registers (the kernel doesn't use

 * fp-regs), and it needs to have them in order for simpler access.

 *

 * Due to the non-standard register layout (and because we don't want

 * to handle floating-point regs), user-mode unaligned accesses are

 * handled separately by do_entUnaUser below.

 *

 * Oh, btw, we don't handle the "gp" register correctly, but if we fault

 * on a gp-register unaligned load/store, something is _very_ wrong

 * in the kernel anyway..

 Macro for exception fixup code to access integer registers.  */

	/* We don't want to use the generic get/put unaligned macros as

	   we want to trap exceptions.  Only if we actually get an

 ldwu */

 ldl */

 ldq */

	/* Note that the store sequences do not indicate that they change

	   memory because it _should_ be affecting nothing in this context.

 stw */

 stl */

 stq */

	/* Ok, we caught the exception, but we don't want it.  Is there

	/*

	 * Yikes!  No one to forward the exception to.

	 * Since the registers are in a weird format, dump them ourselves.

/*

 * Convert an s-floating point value in memory format to the

 * corresponding value in register format.  The exponent

 * needs to be remapped to preserve non-finite values

 * (infinities, not-a-numbers, denormals).

 common case */

/*

 * Convert an s-floating point value in register format to the

 * corresponding value in memory format.

/*

 * Handle user-level unaligned fault.  Handling user-level unaligned

 * faults is *extremely* slow and produces nasty messages.  A user

 * program *should* fix unaligned faults ASAP.

 *

 * Notice that we have (almost) the regular kernel stack layout here,

 * so finding the appropriate registers is a little more difficult

 * than in the kernel case.

 *

 * Finally, we handle regular integer load/stores only.  In

 * particular, load-linked/store-conditionally and floating point

 * load/stores are not supported.  The former make no sense with

 * unaligned faults (they are guaranteed to fail) and I don't think

 * the latter will occur in any decent program.

 *

 * Sigh. We *do* have to handle some FP operations, because GCC will

 * uses them as temporary storage for integer memory to memory copies.

 * However, we need to deal with stt/ldt and sts/lds only.

 ldl stl */	\

 ldq stq */	\

 ldwu stw */	\

 ldbu stb */

 sts stt */	\

 stl stq */	\

 stw stb */

 r9 ... r15 are stored in front of regs.  */

	/* Check the UAC bits to decide what the user wants us to do

 Not sure why you'd want to use this, but... */

	/* Don't bother reading ds in the access check since we already

	   know that this came from the user.  Also rely on the fact that

 it's an integer load/store */

 usp in PAL regs */

 zero "register" */

	/* We don't want to use the generic get/put unaligned macros as

	   we want to trap exceptions.  Only if we actually get an

 ldwu */

 lds */

 ldt */

 ldl */

 ldq */

	/* Note that the store sequences do not indicate that they change

	   memory because it _should_ be affecting nothing in this context.

 stw */

 sts */

 stl */

 stt */

 stq */

 What instruction were you trying to use, exactly?  */

 Only integer loads should get here; everyone else returns early. */

 make pc point to faulting insn */

	/* We need to replicate some of the logic in mm/fault.c,

	   since we don't have access to the fault code in the

 Tell PAL-code what global pointer we want in the kernel.  */

	/* Hack for Multia (UDB) and JENSEN: some of their SRMs have

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/alpha/kernel/setup.c

 *

 *  Copyright (C) 1995  Linus Torvalds

 2.3.x bootmem, 1999 Andrea Arcangeli <andrea@suse.de> */

/*

 * Bootup setup stuff.

 try to do it first */

 0=minimum, 1=verbose, 2=all */

 These can be overridden via the command line, ie "verbose_mcheck=2") */

 Which processor we booted from.  */

/*

 * Using SRM callbacks for initial console output. This works from

 * setup_arch() time through the end of time_init(), as those places

 * are under our (Alpha) control.



 * "srmcons" specified in the boot command arguments allows us to

 * see kernel messages during the period of time before the true

 * console device is "registered" during console_init(). 

 * As of this version (2.5.59), console_init() will call

 * disable_early_printk() as the last action before initializing

 * the console drivers. That's the last possible time srmcons can be 

 * unregistered without interfering with console behavior.

 *

 * By default, OFF; set it with a bootcommand arg of "srmcons" or 

 * "console=srm". The meaning of these two args is:

 *     "srmcons"     - early callback prints 

 *     "console=srm" - full callback based console, including early prints

 Enforce a memory size limit; useful for testing. By default, none. */

 Set AGP GART window size (0 means disabled). */

/*

 * The format of "screen_info" is strange, and due to early

 * i386-setup code. This is just enough to make the console

 * code think we're on a VGA color display.

/*

 * The direct map I/O window, if any.  This should be the same

 * for all busses, since it's used by virt_to_bus.

/*

 * Declare all of the machine vectors.

/* GCC 2.7.2 (on alpha at least) is lame.  It does not support either 

   __attribute__((weak)) or #pragma weak.  Bypass it and talk directly

/*

 * I/O resources inherited from PeeCees.  Except for perhaps the

 * turbochannel alphas, everyone has these on some sort of SuperIO chip.

 *

 * ??? If this becomes less standard, move the struct out into the

 * machine vector.

 Fix up for the Jensen's queer RTC placement.  */

 Return the PFN of the limit. */

 Find free clusters, and init and free the bootmem accordingly.  */

		/* Bit 0 is console/PALcode reserved.  Bit 1 is

		   non-volatile memory -- we might want to mark

	/*

	 * Except for the NUMA systems (wildfire, marvel) all of the 

	 * Alpha systems we run on support 32GB of memory or less.

	 * Since the NUMA systems introduce large holes in memory addressing,

	 * we can get into a situation where there is not enough contiguous

	 * memory for the memory map. 

	 *

	 * Limit memory to the first 32GB to limit the NUMA systems to 

	 * memory on their first node (wildfire) or 2 (marvel) to avoid 

	 * not being able to produce the memory map. In order to access 

	 * all of the memory on the NUMA systems, build with discontiguous

	 * memory support.

	 *

	 * If the user specified a memory limit, let that memory limit stand.

 Reserve the kernel memory. */

 CONFIG_BLK_DEV_INITRD */

 end of kernel */

        /*

	 * Pre-process the system type to make sure it will be valid.

	 *

	 * This may restore real CABRIO and EB66+ family names, ie

	 * EB64+ and EB66.

	 *

	 * Oh, and "white box" AS800 (aka DIGITAL Server 3000 series)

	 * and AS1200 (DIGITAL Server 5000 series) have the type as

	 * the negative of the real one.

 Register a call for panic conditions. */

	/* Assume that we've booted from SRM if we haven't booted from MILO.

 Similarly, look for QEMU.  */

	/* If we are using SRM, we want to allow callbacks

	   as early as possible, so do this NOW, and then

	   they should work immediately thereafter.

	/* 

	 * Locate the command line.

	/* Hack for Jensen... since we're restricted to 8 or 16 chars for

	   boot flags depending on the boot mode, we need some shorthand.

	/* 

	 * Process command-line arguments.

 Replace the command line, now that we've killed it with strsep.  */

 If we want SRM console printk echoing early, do it now. */

		/*

		 * If "console=srm" was specified, clear the srmcons_output

		 * flag now so that time.c won't unregister_srm_console

	/* If we're using SRM, make sysrq-b halt back to the prom,

	/*

	 * Identify and reconfigure for the current system.

	/* 

	 * Sync up the HAE.

	 * Save the SRM's current value for restoration.

 Reset enable correctable error reports.  */

 Find our memory.  */

 First guess at cpu cache sizes.  Do this before init_arch.  */

	/* Initialize the machine.  Usually has to do with setting up

 Reserve standard resources.  */

	/* 

	 * Give us a default console.  TGA users will see nothing until

	 * chr_dev_init is called, rather late in the boot sequence.

 Default root filesystem to sda2.  */

 FIXME:  only set this when we actually have EISA in this box? */

 	/*

	 * Check ASN in HWRPB for validity, report if bad.

	 * FIXME: how was this failing?  Should we trust it instead,

	 * and copy the value into alpha_mv.max_asn?

	/*

	 * Identify the flock of penguins.

 0 */

 ADU */

 Cobra */

 Ruby */

 Flamingo */

 Mannequin */

 Pelican */

 Morgan */

 Sable -- see below.  */

 Medulla */

 Turbolaser */

 Mustang */

 Alcor, Bret, Maverick. HWRPB inaccurate? */

 Tradewind */

 Mikasa -- see below.  */

 EB64 */

 EB66 -- see variation.  */

 EB64+ -- see variation.  */

 K2 */

 Lynx */

 EB164 -- see variation.  */

 Noritake -- see below.  */

 Cortex */

 29 */

 XXM */

 Yukon */

 Tsunami -- see variation.  */

 Wildfire */

 CUSCO */

 Eiger */

 Titan */

 Marvel */

 100 */

 200 */

 AlphaPCI64 */

 default   */

 privateer */

 falcon    */

 granite   */

 dp264 */

 warhol */

 windjammer */

 monet */

 clipper */

 goldrush */

 webbrick */

 catamaran */

 brisbane? */

 melbourne? */

 flying clipper? */

 shark */

 ??? Do we need to distinguish between Rawhides?  */

 Search the system tables first... */

 If we've not found one, try for a variation.  */

 Member ID is a bit-field. */

 make it usable */

			/* PC164 may show as EB164 variation with EV56 CPU,

 default */

	/* If not in the tables, make it UNKNOWN,

 Set variation to "0"; if variation is zero, done.  */

 member ID is a bit-field */

 make it usable */

 select by family */

 default to variation "0" for now */

		/* PC164 may show as EB164 variation, but with EV56 CPU,

 make it PC164 */

 default */

/*

 * A change was made to the HWRPB via an ECO and the following code

 * tracks a part of the ECO.  In HWRPB versions less than 5, the ECO

 * was not implemented in the console firmware.  If it's revision 5 or

 * greater we can get the name of the platform as an ASCII string from

 * the HWRPB.  That's what this function does.  It checks the revision

 * level and if the string is in the HWRPB it returns the address of

 * the string--a pointer to the name of the platform.

 *

 * Returns:

 *      - Pointer to a ASCII string if it's in the HWRPB

 *      - Pointer to a blank string if the data is not in the HWRPB.

	/* Go to the console for the string pointer.

	 * If the rpb_vers is not 5 or greater the rpb

	 * is old and does not have this data in it.

		/* The Dynamic System Recognition struct

		 * has the system platform name starting

		 * after the character count of the string.

	/* Next two XORs introduce an explicit data dependency between

	   consecutive loads in the loop, which will give us true load

/* ??? EV5 supports up to 64M, but did the systems with more than

 Note that the offchip caches are direct mapped on all Alphas. */

 Get the first block cached. */

 Get an average load latency in cycles. */

 Fine, we exceed the cache. */

 Try to get the next block cached. */

 No BCACHE found. */

		/* BIU_CTL is a write-only Abox register.  PALcode has a

		   shadow copy, and may be available from some versions

		   of the CSERVE PALcall.  If we can get it, then



			unsigned long biu_ctl, size;

			size = 128*1024 * (1 << ((biu_ctl >> 28) & 7));

			L2 = CSHAPE (size, 5, 1);



		   Unfortunately, we can't rely on that.

 No typo -- 8 byte cacheline size.  Whodathunk.  */

 Check the line size of the Scache.  */

		/* BC_CONTROL and BC_CONFIG are write-only IPRs.  PALcode

		   has a shadow copy, and may be available from some versions

		   of the CSERVE PALcall.  If we can get it, then



			unsigned long bc_control, bc_config, size;

			size = 1024*1024 * (1 << ((bc_config & 7) - 1));

			L3 = (bc_control & 1 ? CSHAPE (size, width, 1) : -1);



		   Unfortunately, we can't rely on that.

 Nothing known about this cpu type.  */

/*

 * We show only CPU #0 info.

 FIXME FIXME FIXME */

 If we are using SRM and serial console, just hard halt here. */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_eiger.c

 *

 *	Copyright (C) 1995 David A Rusling

 *	Copyright (C) 1996, 1999 Jay A Estabrook

 *	Copyright (C) 1998, 1999 Richard Henderson

 *	Copyright (C) 1999 Iain Grant

 *

 * Code supporting the EIGER (EV6+TSUNAMI).

 Note that this interrupt code is identical to TAKARA.  */

 Note mask bit is true for DISABLED irqs.  */

	/*

	 * The PALcode will have passed us vectors 0x800 or 0x810,

	 * which are fairly arbitrary values and serve only to tell

	 * us whether an interrupt has come in on IRQ0 or IRQ1. If

	 * it's IRQ1 it's a PCI interrupt; if it's IRQ0, it's

	 * probably ISA, but PCI interrupts can come through IRQ0

	 * as well if the interrupt controller isn't in accelerated

	 * mode.

	 *

	 * OTOH, the accelerator thing doesn't seem to be working

	 * overly well, so what we'll do instead is try directly

	 * examining the Master Interrupt Register to see if it's a

	 * PCI interrupt, and if _not_ then we'll pass it on to the

	 * ISA handler.

		/*

		 * This is a PCI interrupt. Check each bit and

		 * despatch an interrupt if it's set.

	/* The SRM console has already calculated out the IRQ value's for

	   option cards. As this works lets just read in the value already

	   set and change it to a useable value by Linux.



	   All the IRQ values generated by the console are greater than 90,

 Find the number of backplane bridges.  */

 No bridges */

 1 */

 2 */

 3 */

 4 */

 Check for built-in bridges on hose 0. */

 Must be a card-based bridge.  */

 Move up the chain of bridges.  */

/*

 * The System Vectors

 SPDX-License-Identifier: GPL-2.0

/*

 *      linux/arch/alpha/kernel/irq_i8259.c

 *

 * This is the 'legacy' 8259A Programmable Interrupt Controller,

 * present in the majority of PC/AT boxes.

 *

 * Started hacking from linux-2.3.30pre6/arch/i386/kernel/i8259.c.

 Note mask bit is true for DISABLED irqs.  */

 Ack the interrupt making it the lowest priority.  */

 ack the slave */

 ack the master */

 mask all of 8259A-1 */

 mask all of 8259A-2 */

/* Note that CONFIG_ALPHA_POLARIS is intentionally left out here, since

	/*

	 * Generate a PCI interrupt acknowledge cycle.  The PIC will

	 * respond with the interrupt vector of the highest priority

	 * interrupt that is pending.  The PALcode sets up the

	 * interrupts vectors such that irq level L generates vector L.

	/*

	 * It seems to me that the probability of two or more *device*

	 * interrupts occurring at almost exactly the same time is

	 * pretty low.  So why pay the price of checking for

	 * additional interrupts here if the common case can be

	 * handled so much easier?

	/* 

	 *  The first read of gives you *all* interrupting lines.

	 *  Therefore, read the mask register and and out those lines

	 *  not enabled.  Note that some documentation has 21 and a1 

	 *  write only.  This is not true.

 read isr */

 mask out cascade & hibits */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/core_t2.c

 *

 * Written by Jay A Estabrook (jestabro@amt.tay1.dec.com).

 * December 1996.

 *

 * based on CIA code by David A Rusling (david.rusling@reo.mts.dec.com)

 *

 * Code common to all T2 core logic chips.

 For dumping initial DMA window settings. */

 For dumping final DMA window settings. */

/*

 * By default, we direct-map starting at 2GB, in order to allow the

 * maximum size direct-map window (2GB) to match the maximum amount of

 * memory (2GB) that can be present on SABLEs. But that limits the

 * floppy to DMA only via the scatter/gather window set up for 8MB

 * ISA DMA, since the maximum ISA DMA address is 2GB-1.

 *

 * For now, this seems a reasonable trade-off: even though most SABLEs

 * have less than 1GB of memory, floppy usage/performance will not

 * really be affected by forcing it to go via scatter/gather...

 The ISA scatter/gather window settings. */

/*

 * NOTE: Herein lie back-to-back mb instructions.  They are magic. 

 * One plausible explanation is that the i/o controller does not properly

 * handle the system transaction.  Another involves timing.  Ho hum.

/*

 * BIOS32-style PCI interface:

/* Place to save the DMA Window registers as set up by SRM

/*

 * Given a bus, device, and function number, compute resulting

 * configuration space address and setup the T2_HAXR2 register

 * accordingly.  It is therefore not safe to have concurrent

 * invocations to configuration space access routines, but there

 * really shouldn't be any need for this.

 *

 * Type 0:

 *

 *  3 3|3 3 2 2|2 2 2 2|2 2 2 2|1 1 1 1|1 1 1 1|1 1 

 *  3 2|1 0 9 8|7 6 5 4|3 2 1 0|9 8 7 6|5 4 3 2|1 0 9 8|7 6 5 4|3 2 1 0

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 * | | |D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|F|F|F|R|R|R|R|R|R|0|0|

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *

 *	31:11	Device select bit.

 * 	10:8	Function number

 * 	 7:2	Register number

 *

 * Type 1:

 *

 *  3 3|3 3 2 2|2 2 2 2|2 2 2 2|1 1 1 1|1 1 1 1|1 1 

 *  3 2|1 0 9 8|7 6 5 4|3 2 1 0|9 8 7 6|5 4 3 2|1 0 9 8|7 6 5 4|3 2 1 0

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 * | | | | | | | | | | |B|B|B|B|B|B|B|B|D|D|D|D|D|F|F|F|R|R|R|R|R|R|0|1|

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *

 *	31:24	reserved

 *	23:16	bus number (8 bits = 128 possible buses)

 *	15:11	Device number (5 bits)

 *	10:8	function number

 *	 7:2	register number

 *  

 * Notes:

 *	The function number selects which function of a multi-function device 

 *	(e.g., SCSI and Ethernet).

 * 

 *	The register selects a DWORD (32 bit) register offset.  Hence it

 *	doesn't get shifted by 2 bits as we want to "drop" the bottom two

 *	bits.

 Type 0 configuration cycle.  */

 Type 1 configuration cycle.  */

/*

 * NOTE: both conf_read() and conf_write() may set HAE_3 when needing

 *       to do type1 access. This is protected by the use of spinlock IRQ

 *       primitives in the wrapper functions pci_{read,write}_config_*()

 *       defined in drivers/pci/pci.c.

 If Type1 access, must set T2 CFG.  */

 Access configuration space. */

 magic */

	/* Wait for possible mcheck. Also, this lets other CPUs clear

	   their mchecks as well, as they can reliably tell when

	   another CPU is in the midst of handling a real mcheck via

 If Type1 access, must reset T2 CFG so normal IO space ops work.  */

 If Type1 access, must set T2 CFG.  */

 Access configuration space.  */

 magic */

	/* Wait for possible mcheck. Also, this lets other CPUs clear

	   their mchecks as well, as they can reliably tell when

	   this CPU is in the midst of handling a real mcheck via

 If Type1 access, must reset T2 CFG so normal IO space ops work.  */

 OR in ENABLE bit */

	/* Note we can only do 1 SG window, as the other is for direct, so

 OR in ENABLE/SG bits */

 flush TLB all */

 HW is 0 */

	/*

	 * Save the DMA Window registers.

 HW is already set to 0 */

 Enable scatter/gather TLB use.  */

 read it back to make sure */

	/*

	 * Create our single hose.

	/*

	 * Set up the PCI->physical memory translation windows.

	 *

	 * Window 1 is direct mapped.

	 * Window 2 is scatter/gather (for ISA).

 Always make an ISA DMA window. */

 Disable HOLES. */

 Zero HAE.  */

 Sparse MEM HAE */

 Sparse I/O HAE */

 Config Space HAE */

	/*

	 * We also now zero out HAE_4, the dense memory HAE, so that

	 * we need not account for its "offset" when accessing dense

	 * memory resources which we allocated in our normal way. This

	 * HAE would need to stay untouched were we to keep the SRM

	 * resource settings.

	 *

	 * Thus we can now run standard X servers on SABLE/LYNX. :-)

	/*

	 * Restore the DMA Window registers.

 READ it back to ensure WRITE occurred. */

 set the TLB Clear bit */

 read it back to make sure */

 clear the TLB Clear bit */

 read it back to make sure */

 System Event Clear */

 Clear CPU errors.  */

 magic */

/*

 * SABLE seems to have a "broadcast" style machine check, in that all

 * CPUs receive it. And, the issuing CPU, in the case of PCI Config

 * space read/write faults, will also receive a second mcheck, upon

 * lowering IPL during completion processing in pci_read_config_byte()

 * et al.

 *

 * Hence all the taken/expected/any_expected/last_taken stuff...

 Clear the error before any reporting.  */

 magic */

	/* This should not actually be done until the logout frame is

 Now, do testing for the anomalous conditions. */

		/*

		 * FUNKY: Received mcheck on a CPU and not

		 * expecting it, but another CPU is expecting one.

		 *

		 * Just dismiss it for now on this CPU...

 SPDX-License-Identifier: GPL-2.0

/*

 * Alpha IO and memory functions.

/* Out-of-line versions of the i/o routines that redirect into the 

   platform-specific version.  Note that "platform-specific" may mean

/*

 * The _relaxed functions must be ordered w.r.t. each other, but they don't

 * have to be ordered w.r.t. other memory accesses.

/*

 * Read COUNT 8-bit bytes from port PORT into memory starting at SRC.

/*

 * Read COUNT 16-bit words from port PORT into memory starting at

 * SRC.  SRC must be at least short aligned.  This is used by the

 * IDE driver to read disk sectors.  Performance is important, but

 * the interfaces seems to be slow: just using the inlined version

 * of the inw() breaks things.

/*

 * Read COUNT 32-bit words from port PORT into memory starting at

 * SRC. Now works with any alignment in SRC. Performance is important,

 * but the interfaces seems to be slow: just using the inlined version

 * of the inl() breaks things.

 Buffer 32-bit aligned.  */

/*

 * Like insb but in the opposite direction.

 * Don't worry as much about doing aligned memory transfers:

 * doing byte reads the "slow" way isn't nearly as slow as

 * doing byte writes the slow way (no r-m-w cycle).

/*

 * Like insw but in the opposite direction.  This is used by the IDE

 * driver to write disk sectors.  Performance is important, but the

 * interfaces seems to be slow: just using the inlined version of the

 * outw() breaks things.

/*

 * Like insl but in the opposite direction.  This is used by the IDE

 * driver to write disk sectors.  Works with any alignment in SRC.

 * Performance is important, but the interfaces seems to be slow:

 * just using the inlined version of the outl() breaks things.

 Buffer 32-bit aligned.  */

/*

 * Copy data from IO memory space to "real" memory space.

 * This needs to be optimized.

	/* Optimize co-aligned transfers.  Everything else gets handled

/*

 * Copy data from "real" memory space to IO memory space.

 * This needs to be optimized.

	/* Optimize co-aligned transfers.  Everything else gets handled

 FIXME -- align FROM.  */

/*

 * "memset" on IO memory space.

 Handle any initial odd byte */

 Handle any initial odd halfword */

 Handle any initial odd word */

	/* Handle all full-sized quadwords: we're aligned

 The tail is word-aligned if we still have count >= 4 */

 The tail is half-word aligned if we have count >= 2 */

 And finally, one last byte.. */

/* A version of memcpy used by the vga console routines to move data around

			/* FIXME: Should handle unaligned ops and

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/console.c

 *

 * Architecture-specific specific support for VGA device on 

 * non-0 I/O hose

 Default the select function */

 Find the console VGA device */

 Did we already initialize the correct one? Is there one? */

 Create a new VGA ioport resource WRT the hose it is on. */

 Set the VGA hose and init the new console. */

 TERM_TYPE == graphics */

 console hose # */

		/*

		 * Our hose numbering DOES match the console's, so find

		 * the right one...

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/core_marvel.c

 *

 * Code common to all Marvel based systems.

/*

 * Debug helpers

/*

 * Private data

/*

 * Helper functions

 default to disabled */

	/*

	 * Insert in pe sorted order.

 empty list */

 insert at head */

 insert at position */

 insert here */

 couldn't insert ?!? */

	/*

	 * First the IO ports.

	/*

	 * Then the common ones.

/*

 * IO7 PCI, PCI/X, AGP configuration.

 arbitrary */

	/*

	 * We don't have an isa or legacy hose, but glibc expects to be

	 * able to use the bus == 0 / dev == 0 form of the iobase syscall

	 * to determine information about the i/o system. Since XFree86 

	 * relies on glibc's determination to tell whether or not to use

	 * sparse access, we need to point the pci_isa_hose at a real hose

	 * so at least that determination is correct.

	/*

	 * Base addresses for userland consumption. Since these are going

	 * to be mapped, they are pure physical addresses.

	/*

	 * Base addresses and resource ranges for kernel consumption.

	/*

	 * Save the existing DMA window settings for later restoration.

	/*

	 * Set up the PCI to main memory translation windows.

	 *

	 * Window 0 is scatter-gather 8MB at 8MB

	 * Window 1 is direct access 1GB at 2GB

	 * Window 2 is scatter-gather (up-to) 1GB at 3GB

	 * Window 3 is disabled

	/*

	 * TBIA before modifying windows.

	/*

	 * Set up window 0 for scatter-gather 8MB at 8MB.

 cache line boundary */

	/*

	 * Set up window 1 for direct-mapped 1GB at 2GB.

	/*

	 * Set up window 2 for scatter-gather (up-to) 1GB at 3GB.

 cache line boundary */

	/*

	 * Disable window 3.

	/*

	 * Make sure that the AGP Monster Window is disabled.

	/*

	 * TBIA after modifying windows.

	/*

	 * Get the Port 7 CSR pointer.

	/*

	 * Init this IO7's hoses.

 TERM_TYPE == graphics */

 TERM_OUT_LOC, hose # */

		/* FIXME - encoding is going to have to change for Marvel

		 *         since hose will be able to overflow a byte...

		 *         need to fix this decode when the console 

		 *         changes its encoding

		/*

		 * The console's hose numbering is:

		 *

		 *	hose<n:2>: PID

		 *	hose<1:0>: PORT

		 *

		 * We need to find the hose at that pid and port

/*

 * In case the GCT is not complete, let the user specify PIDs with IO7s

 * at boot time. Syntax is 'io7=a,b,c,...,n' where a-n are the PIDs (decimal)

 * where IO7s are connected

 With multiple PCI busses, we play with I/O as physical addrs.  */

 PCI DMA Direct Mapping is 1GB at 2GB.  */

 Parse the config tree.  */

 Init the io7s.  */

 Check for graphic console location (if any).  */

/*

 * PCI Configuration Space access functions

 *

 * Configuration space addresses have the following format:

 *

 * 	|2 2 2 2|1 1 1 1|1 1 1 1|1 1 

 * 	|3 2 1 0|9 8 7 6|5 4 3 2|1 0 9 8|7 6 5 4|3 2 1 0

 * 	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 * 	|B|B|B|B|B|B|B|B|D|D|D|D|D|F|F|F|R|R|R|R|R|R|R|R|

 * 	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *

 *	 n:24	reserved for hose base

 *	23:16	bus number (8 bits = 128 possible buses)

 *	15:11	Device number (5 bits)

 *	10:8	function number

 *	 7:2	register number

 *  

 * Notes:

 *	IO7 determines whether to use a type 0 or type 1 config cycle

 *	based on the bus number. Therefore the bus number must be set 

 *	to 0 for the root bus on any hose.

 *	

 *	The function number selects which function of a multi-function device 

 *	(e.g., SCSI and Ethernet).

 * 

 Check for enabled.  */

 No parent means peer PCI bus. */

 Don't support idsel > 20 on primary bus.  */

/*

 * Other PCI helper functions.

/*

 * RTC Support

 RTC_PORT(0) */

 RTC_PORT(1) */

 GET/PUT_TOY */

/*

 * IO map support.

	/*

	 * Adjust the address.

	/*

	 * Find the hose.

	/*

	 * We have the hose - calculate the bus limits.

	/*

	 * Is it direct-mapped?

	/* 

	 * Check the scatter-gather arena.

		/*

		 * Adjust the limits (mappings must be page aligned)

		/*

		 * Map it.

 make it a true pfn */

 Assume it was already a reasonable address */

		/* this should catch other legacy addresses

		   that would normally fail on MARVEL,

		   because there really is nothing there...

/*

 * AGP GART Support.

	/*

	 * Check the requested mode against the PLL setting.

	 * The agpgart_be code has not programmed the card yet,

	 * so we can still tweak mode here.

 2x only */

		/* 

		 * The PLL is only programmed for 2x, so adjust the

		 * rate to 2x, if necessary.

 1x / 4x */

		/*

		 * The PLL is programmed for 1x or 4x.  Don't go faster

		 * than requested, so if the requested rate is 2x, use 1x.

 ??????? */

		/*

		 * Don't know what this PLL setting is, take the requested

		 * rate, but warn the user.

	/*

	 * Set the new rate, if necessary.

	/*

	 * Find the first IO7 with an AGP card.

	 *

	 * FIXME -- there should be a better way (we want to be able to

	 * specify and what if the agp card is not video???)

	/* 

	 * Get the csrs from the hose.

	/*

	 * Allocate the info structure.

	/*

	 * Fill it in.

	/*

	 * Aperture - not configured until ops.setup().

	/*

	 * Capabilities.

	 *

	 * NOTE: IO7 reports through AGP_STAT that it can support a read queue

	 *       depth of 17 (rq = 0x10). It actually only supports a depth of

	 * 	 16 (rq = 0xf).

	/*

	 * Mode.

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/core_irongate.c

 *

 * Based on code written by David A. Rusling (david.rusling@reo.mts.dec.com).

 *

 *	Copyright (C) 1999 Alpha Processor, Inc.,

 *		(David Daniel, Stig Telfer, Soohoon Lee)

 *

 * Code common to all IRONGATE core logic chips.

/*

 * BIOS32-style PCI interface:

/*

 * Given a bus, device, and function number, compute resulting

 * configuration space address accordingly.  It is therefore not safe

 * to have concurrent invocations to configuration space access

 * routines, but there really shouldn't be any need for this.

 *

 *	addr[31:24]		reserved

 *	addr[23:16]		bus number (8 bits = 128 possible buses)

 *	addr[15:11]		Device number (5 bits)

 *	addr[10: 8]		function number

 *	addr[ 7: 2]		register number

 *

 * For IRONGATE:

 *    if (bus = addr[23:16]) == 0

 *    then

 *	  type 0 config cycle:

 *	      addr_on_pci[31:11] = id selection for device = addr[15:11]

 *	      addr_on_pci[10: 2] = addr[10: 2] ???

 *	      addr_on_pci[ 1: 0] = 00

 *    else

 *	  type 1 config cycle (pass on with no decoding):

 *	      addr_on_pci[31:24] = 0

 *	      addr_on_pci[23: 2] = addr[23: 2]

 *	      addr_on_pci[ 1: 0] = 01

 *    fi

 *

 * Notes:

 *	The function number selects which function of a multi-function device

 *	(e.g., SCSI and Ethernet).

 *

 *	The register selects a DWORD (32 bit) register offset.	Hence it

 *	doesn't get shifted by 2 bits as we want to "drop" the bottom two

 *	bits.

 write again clears error bits */

 re-read to force write */

 write again clears error bits */

 re-read to force write */

 Clear ALI NMI */

/* On Albacore (aka UP1500) with 4Gb of RAM we have to reserve some

   memory for PCI. At this point we just reserve memory above 3Gb. Most

	/* Consoles earlier than A5.6-18 (OSF PALcode v1.62-2) set up

	   the CPU incorrectly (leave speculative stores enabled),

	   which causes memory corruption under certain conditions.

 Move the initrd out of the way. */

	/* Disable the GART window. AGPGART doesn't work due to yet

 Albacore? */

	/*

	 * Create our single hose.

	/* This is for userland consumption.  For some reason, the 40-bit

	   PIO bias that we use in the kernel through KSEG didn't work for

	   the page table based user mappings.  So make sure we get the

/*

 * IO map and AGP support

	/* 

	 * Check for within the AGP aperture...

		/*

		 * Check the AGP area

		/*

		 * Not found - assume legacy ioremap

 FIXME */

	/*

	 * Adjust the limits (mappings must be page aligned)

	/*

	 * Map it

 kseg map, nothing to do */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/alpha/kernel/time.c

 *

 *  Copyright (C) 1991, 1992, 1995, 1999, 2000  Linus Torvalds

 *

 * This file contains the clocksource time handling.

 * 1997-09-10	Updated NTP code according to technical memorandum Jan '96

 *		"A Kernel Model for Precision Timekeeping" by Dave Mills

 * 1997-01-09    Adrian Sun

 *      use interval timer if CONFIG_RTC=y

 * 1997-10-29    John Bowman (bowman@math.ualberta.ca)

 *      fixed tick loss calculation in timer_interrupt

 *      (round system clock to nearest tick instead of truncating)

 *      fixed algorithm in time_init for getting time from CMOS clock

 * 1999-04-16	Thorsten Kranzkowski (dl8bcu@gmx.net)

 *	fixed algorithm in do_gettimeofday() for calculating the precise time

 *	from processor cycle counter (now taking lost_ticks into account)

 * 2003-06-03	R. Scott Bailey <scott.bailey@eds.com>

 *	Tighten sanity in time_init from 1% (10,000 PPM) to 250 PPM

 CONFIG_IRQ_WORK */

 CONFIG_IRQ_WORK */

/*

 * The RTC as a clock_event_device primitive.

 Don't run the hook for UNUSED or SHUTDOWN.  */

 This hook is for oneshot mode, which we don't support.  */

/*

 * The QEMU clock as a clocksource primitive.

/*

 * The QEMU alarm as a clock_event_device primitive.

	/* The mode member of CE is updated for us in generic code.

 Reset periodic interrupt frequency.  */

	/* Test includes known working values on various platforms

 Turn on periodic interrupts.  */

 pit counter 0: system timer */

 pit counter 2: speaker */

/*

 * The RPCC as a clocksource primitive.

 *

 * While we have free-running timecounters running on all CPUs, and we make

 * a half-hearted attempt in init_rtc_rpcc_info to sync the timecounter

 * with the wall clock, that initialization isn't kept up-to-date across

 * different time counters in SMP mode.  Therefore we can only use this

 * method when there's only one CPU enabled.

 *

 * When using the WTINT PALcall, the RPCC may shift to a lower frequency,

 * or stop altogether, while waiting for the interrupt.  Therefore we cannot

 * use this method when WTINT is in use.

 ALPHA_WTINT */

/* Validate a computed cycle counter result against the known bounds for

   the given processor core.  There's too much brokenness in the way of

   timing hardware for any one method to work everywhere.  :-(



 guess */

 guess */

 guess */

 guess */

 None of the following are shipping as of 2001-11-01.  */

 guess */

 guess */

 guess */

 guess */

 Allow for some drift in the crystal.  10MHz is more than enough.  */

 If index out of bounds, no way to validate.  */

 If index contains no data, no way to validate.  */

/*

 * Calibrate CPU clock using legacy 8254 timer/counter. Stolen from

 * arch/i386/time.c.

 Set the Gate high, disable speaker */

	/*

	 * Now let's take care of CTC channel 2

	 *

	 * Set the Gate high, program CTC channel 2 for mode 0,

	 * (interrupt on terminal count mode), binary count,

	 * load 5 * LATCH count, (LSB and MSB) to begin countdown.

 binary, mode 0, LSB/MSB, Ch 2 */

 LSB of count */

 MSB of count */

 Error: ECTCNEVERSET or ECPUTOOFAST.  */

/* The Linux interpretation of the CMOS clock register contents:

   When the Update-In-Progress (UIP) flag goes from 1 to 0, the

   RTC registers show the second which has precisely just started.

 Calibrate CPU clock -- attempt #1.  */

 Calibrate CPU clock -- attempt #2.  */

		/* If the given value is within 250 PPM of what we calculated,

 See above for restrictions on using clocksource_rpcc.  */

 Startup the timer source. */

 Initialize the clock_event_device for secondary cpus.  */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_sx164.c

 *

 *	Copyright (C) 1995 David A Rusling

 *	Copyright (C) 1996 Jay A Estabrook

 *	Copyright (C) 1998, 1999, 2000 Richard Henderson

 *

 * Code supporting the SX164 (PCA56+PYXIS).

	/* Not interested in the bogus interrupts (0,3,4,5,40-47),

/*

 * PCI Fixup configuration.

 *

 * Summary @ PYXIS_INT_REQ:

 * Bit      Meaning

 * 0        RSVD

 * 1        NMI

 * 2        Halt/Reset switch

 * 3        MBZ

 * 4        RAZ

 * 5        RAZ

 * 6        Interval timer (RTC)

 * 7        PCI-ISA Bridge

 * 8        Interrupt Line A from slot 3

 * 9        Interrupt Line A from slot 2

 *10        Interrupt Line A from slot 1

 *11        Interrupt Line A from slot 0

 *12        Interrupt Line B from slot 3

 *13        Interrupt Line B from slot 2

 *14        Interrupt Line B from slot 1

 *15        Interrupt line B from slot 0

 *16        Interrupt Line C from slot 3

 *17        Interrupt Line C from slot 2

 *18        Interrupt Line C from slot 1

 *19        Interrupt Line C from slot 0

 *20        Interrupt Line D from slot 3

 *21        Interrupt Line D from slot 2

 *22        Interrupt Line D from slot 1

 *23        Interrupt Line D from slot 0

 *

 * IdSel       

 *   5  32 bit PCI option slot 2

 *   6  64 bit PCI option slot 0

 *   7  64 bit PCI option slot 1

 *   8  Cypress I/O

 *   9  32 bit PCI option slot 3

INT    INTA   INTB   INTC   INTD */

 IdSel 5 slot 2 J17 */

 IdSel 6 slot 0 J19 */

 IdSel 7 slot 1 J18 */

 IdSel 8 SIO        */

 IdSel 9 slot 3 J15 */

	/*

	 * OSF palcode v1.23 forgets to enable PCA56 Motion Video

	 * Instructions. Let's enable it.

	 * We have to check palcode revision because CSERVE interface

	 * is subject to change without notice. For example, it

	 * has been changed completely since v1.16 (found in MILO

	 * distribution). -ink

 Allow PALRES insns in kernel mode */

 hw_mfpr $0,icsr */

 set MVE bit */

 hw_mtpr $0,icsr */

 Disable PALRES insns */

/*

 * The System Vector

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_nautilus.c

 *

 *	Copyright (C) 1995 David A Rusling

 *	Copyright (C) 1998 Richard Henderson

 *	Copyright (C) 1999 Alpha Processor, Inc.,

 *		(David Daniel, Stig Telfer, Soohoon Lee)

 *

 * Code supporting NAUTILUS systems.

 *

 *

 * NAUTILUS has the following I/O features:

 *

 * a) Driven by AMD 751 aka IRONGATE (northbridge):

 *     4 PCI slots

 *     1 AGP slot

 *

 * b) Driven by ALI M1543C (southbridge)

 *     2 ISA slots

 *     2 IDE connectors

 *     1 dual drive capable FDD controller

 *     2 serial ports

 *     1 ECP/EPP/SP parallel port

 *     2 USB ports

 Preserve the IRQ set up by the console.  */

	/* UP1500: AGP INTA is actually routed to IRQ 5, not IRQ 10 as

	   console reports. Check the device id of AGP bridge to distinguish

 NOTREACHED */

 Assume M1543C */

 SLP_TYPE = 0, SLP_EN = 1 */

 M1535D/D+ */

 SLP_TYPE = 5, SLP_EN = 1 */

 Clear pending events. */

 NOTREACHED */

 Perform analysis of a machine check that arrived from the system (NMI) */

/* Machine checks can come from two sources - those on the CPU and those

	/* Now for some analysis.  Machine checks fall into two classes --

	   those picked up by the system, and those picked up by the CPU.

 Clear ALI NMI */

 Write again clears error bits.  */

 Write again clears error bits.  */

 Tell the PALcode to clear the machine check */

 Use default IO. */

	/* Irongate PCI memory aperture, calculate required size before

 Scan our single hose.  */

	/* Now we've got the size and alignment of PCI memory resources

	   stored in irongate_mem. Set up the PCI memory range: limit is

	/* Register our newly calculated PCI memory window in the resource

 Albacore? */

/*

 * The System Vectors

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/alpha/kernel/core_wildfire.c

 *

 *  Wildfire support.

 *

 *  Copyright (C) 2000 Andrea Arcangeli <andrea@suse.de> SuSE

 This is for userland consumption. */

        /*

         * Set up the PCI to main memory translation windows.

         *

         * Note: Window 3 is scatter-gather only

         * 

         * Window 0 is scatter-gather 8MB at 8MB (for isa)

	 * Window 1 is direct access 1GB at 1GB

	 * Window 2 is direct access 1GB at 2GB

         * Window 3 is scatter-gather 128MB at 3GB

         * ??? We ought to scale window 3 memory.

         *

 Flush TLB at the end. */

 Test for PCA existence first. */

 Do both hoses of the PCA. */

 Test for QBB existence first. */

 Init all PCAs here. */

 Init the HW configuration variables. */

 First, determine which QBBs are present. */

 Is there an HS? */

 Is there a GP? */

 Is there a QBB? */

 Next determine each QBBs resources. */

 Probe for PCA existence here. */

 With multiple PCI buses, we play with I/O as physical addrs.  */

 Probe the hardware for info about configuration. */

 Now init all the found QBBs. */

 Normal direct PCI DMA mapping. */ 

 magic */

 FIXME: clear pci errors */

 reading does the trick */

 No parent means peer PCI bus. */

 DUMP_REGS */

 DUMP_CONFIG */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_eb64p.c

 *

 *	Copyright (C) 1995 David A Rusling

 *	Copyright (C) 1996 Jay A Estabrook

 *	Copyright (C) 1998, 1999 Richard Henderson

 *

 * Code supporting the EB64+ and EB66.

 Note mask bit is true for DISABLED irqs.  */

 Read the interrupt summary registers */

	/*

	 * Now, for every possible bit set, work through

	 * them and call the appropriate interrupt handler.

 clear least bit set */

	/*

	 * CABRIO SRM may not set variation correctly, so here we test

	 * the high word of the interrupt summary register for the RAZ

	 * bits, and hope that a true EB64+ would read all ones...

 GENERIC */

/*

 * PCI Fixup configuration.

 *

 * There are two 8 bit external summary registers as follows:

 *

 * Summary @ 0x26:

 * Bit      Meaning

 * 0        Interrupt Line A from slot 0

 * 1        Interrupt Line A from slot 1

 * 2        Interrupt Line B from slot 0

 * 3        Interrupt Line B from slot 1

 * 4        Interrupt Line C from slot 0

 * 5        Interrupt line from the two ISA PICs

 * 6        Tulip

 * 7        NCR SCSI

 *

 * Summary @ 0x27

 * Bit      Meaning

 * 0        Interrupt Line C from slot 1

 * 1        Interrupt Line D from slot 0

 * 2        Interrupt Line D from slot 1

 * 3        RAZ

 * 4        RAZ

 * 5        RAZ

 * 6        RAZ

 * 7        RAZ

 *

 * The device to slot mapping looks like:

 *

 * Slot     Device

 *  5       NCR SCSI controller

 *  6       PCI on board slot 0

 *  7       PCI on board slot 1

 *  8       Intel SIO PCI-ISA bridge chip

 *  9       Tulip - DECchip 21040 Ethernet controller

 *   

 *

 * This two layered interrupt approach means that we allocate IRQ 16 and 

 * above for PCI interrupts.  The IRQ relates to which bit the interrupt

 * comes in on.  This makes interrupt processing much easier.

INT  INTA  INTB  INTC   INTD */

 IdSel 5,  slot ?, ?? */

 IdSel 6,  slot ?, ?? */

 IdSel 7,  slot ?, ?? */

 IdSel 8,  SIO */

 IdSel 9,  TULIP */

/*

 * The System Vector

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_cabriolet.c

 *

 *	Copyright (C) 1995 David A Rusling

 *	Copyright (C) 1996 Jay A Estabrook

 *	Copyright (C) 1998, 1999, 2000 Richard Henderson

 *

 * Code supporting the Cabriolet (AlphaPC64), EB66+, and EB164,

 * PC164 and LX164.

 Note mask bit is true for DISABLED irqs.  */

 Read the interrupt summary registers */

	/*

	 * Now for every possible bit set, work through them and call

	 * the appropriate interrupt handler.

 clear least bit set */

/* In theory, the PC164 has the same interrupt hardware as the other

   Cabriolet based systems.  However, something got screwed up late

   in the development cycle which broke the interrupt masking hardware.

   Repeat, it is not possible to mask and ack interrupts.  At all.



   In an attempt to work around this, while processing interrupts,

   we do not allow the IPL to drop below what it is currently.  This

   prevents the possibility of recursion.  



   ??? Another option might be to force all PCI devices to use edge

   triggered rather than level triggered interrupts.  That might be

/*

 * The EB66+ is very similar to the EB66 except that it does not have

 * the on-board NCR and Tulip chips.  In the code below, I have used

 * slot number to refer to the id select line and *not* the slot

 * number used in the EB66+ documentation.  However, in the table,

 * I've given the slot number, the id select line and the Jxx number

 * that's printed on the board.  The interrupt pins from the PCI slots

 * are wired into 3 interrupt summary registers at 0x804, 0x805 and

 * 0x806 ISA.

 *

 * In the table, -1 means don't assign an IRQ number.  This is usually

 * because it is the Saturn IO (SIO) PCI/ISA Bridge Chip.

INT  INTA  INTB  INTC   INTD */

 IdSel 6,  slot 0, J25 */

 IdSel 7,  slot 1, J26 */

 IdSel 8,  SIO         */

 IdSel 9,  slot 2, J27 */

 IdSel 10, slot 3, J28 */

/*

 * The AlphaPC64 is very similar to the EB66+ except that its slots

 * are numbered differently.  In the code below, I have used slot

 * number to refer to the id select line and *not* the slot number

 * used in the AlphaPC64 documentation.  However, in the table, I've

 * given the slot number, the id select line and the Jxx number that's

 * printed on the board.  The interrupt pins from the PCI slots are

 * wired into 3 interrupt summary registers at 0x804, 0x805 and 0x806

 * ISA.

 *

 * In the table, -1 means don't assign an IRQ number.  This is usually

 * because it is the Saturn IO (SIO) PCI/ISA Bridge Chip.

INT   INTA  INTB  INTC   INTD */

 IdSel 5,  slot 2, J21 */

 IdSel 6,  slot 0, J19 */

 IdSel 7,  slot 1, J20 */

 IdSel 8,  SIO         */

 IdSel 9,  slot 3, J22 */

/*

 * The PC164 and LX164 have 19 PCI interrupts, four from each of the four

 * PCI slots, the SIO, PCI/IDE, and USB.

 * 

 * Each of the interrupts can be individually masked. This is

 * accomplished by setting the appropriate bit in the mask register.

 * A bit is set by writing a "1" to the desired position in the mask

 * register and cleared by writing a "0". There are 3 mask registers

 * located at ISA address 804h, 805h and 806h.

 * 

 * An I/O read at ISA address 804h, 805h, 806h will return the

 * state of the 11 PCI interrupts and not the state of the MASKED

 * interrupts.

 * 

 * Note: A write to I/O 804h, 805h, and 806h the mask register will be

 * updated.

 * 

 * 

 * 				ISA DATA<7:0>

 * ISA     +--------------------------------------------------------------+

 * ADDRESS |   7   |   6   |   5   |   4   |   3   |   2  |   1   |   0   |

 *         +==============================================================+

 * 0x804   | INTB0 |  USB  |  IDE  |  SIO  | INTA3 |INTA2 | INTA1 | INTA0 |

 *         +--------------------------------------------------------------+

 * 0x805   | INTD0 | INTC3 | INTC2 | INTC1 | INTC0 |INTB3 | INTB2 | INTB1 |

 *         +--------------------------------------------------------------+

 * 0x806   | Rsrv  | Rsrv  | Rsrv  | Rsrv  | Rsrv  |INTD3 | INTD2 | INTD1 |

 *         +--------------------------------------------------------------+

 *         * Rsrv = reserved bits

 *         Note: The mask register is write-only.

 * 

 * IdSel	

 *   5	 32 bit PCI option slot 2

 *   6	 64 bit PCI option slot 0

 *   7	 64 bit PCI option slot 1

 *   8	 Saturn I/O

 *   9	 32 bit PCI option slot 3

 *  10	 USB

 *  11	 IDE

 * 

INT   INTA  INTB   INTC   INTD */

 IdSel  5, slot 2, J20 */

 IdSel  6, slot 0, J29 */

 IdSel  7, slot 1, J26 */

 IdSel  8, SIO */

 IdSel  9, slot 3, J19 */

 IdSel 10, USB */

 IdSel 11, IDE */

/*

 * The System Vector

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_jensen.c

 *

 *	Copyright (C) 1995 Linus Torvalds

 *	Copyright (C) 1998, 1999 Richard Henderson

 *

 * Code supporting the Jensen.

/*

 * Jensen is special: the vector is 0x8X0 for EISA interrupt X, and

 * 0x9X0 for the local motherboard interrupts.

 *

 * Note especially that those local interrupts CANNOT be masked,

 * which causes much of the pain below...

 *

 *	0x660 - NMI

 *

 *	0x800 - IRQ0  interval timer (not used, as we use the RTC timer)

 *	0x810 - IRQ1  line printer (duh..)

 *	0x860 - IRQ6  floppy disk

 *

 *	0x900 - COM1

 *	0x920 - COM2

 *	0x980 - keyboard

 *	0x990 - mouse

 *

 * PCI-based systems are more sane: they don't have the local

 * interrupts at all, and have only normal PCI interrupts from

 * devices.  Happily it's easy enough to do a sane mapping from the

 * Jensen.

 * 

 * Note that this means that we may have to do a hardware

 * "local_op" to a different interrupt than we report to the rest of the

 * world.

 the parport is really hw IRQ 1, silly Jensen.  */

 the parport is really hw IRQ 1, silly Jensen.  */

 the parport is really hw IRQ 1, silly Jensen.  */

 local device interrupts: */

 com1 -> irq 4 */

 com2 -> irq 3 */

 kbd -> irq 1 */

 mouse -> irq 9 */

 If there is no handler yet... */

 If it is a local interrupt that cannot be masked... */

 Clear keyboard/mouse state */

 Reset serial ports */

 Clear NMI */

 A useful bit of code to find out if an interrupt is going wild.  */

	/* Create a hose so that we can report i/o base addresses to

/*

 * The System Vector

/*

 * SMC 37C669 initialization code

/* File:	smcc669_def.h

 *

 * Copyright (C) 1997 by

 * Digital Equipment Corporation, Maynard, Massachusetts.

 * All rights reserved.

 *

 * This software is furnished under a license and may be used and copied

 * only  in  accordance  of  the  terms  of  such  license  and with the

 * inclusion of the above copyright notice. This software or  any  other

 * copies thereof may not be provided or otherwise made available to any

 * other person.  No title to and  ownership of the  software is  hereby

 * transferred.

 *

 * The information in this software is  subject to change without notice

 * and  should  not  be  construed  as a commitment by Digital Equipment

 * Corporation.

 *

 * Digital assumes no responsibility for the use  or  reliability of its

 * software on equipment which is not supplied by Digital.

 *

 *

 * Abstract:	

 *

 *	This file contains header definitions for the SMC37c669 

 *	Super I/O controller. 

 *

 * Author:	

 *

 *	Eric Rasmussen

 *

 * Modification History:

 *

 *	er	28-Jan-1997	Initial Entry

/*

** Macros for handling device IRQs

**

** The mask acts as a flag used in mapping actual ISA IRQs (0 - 15) 

** to device IRQs (A - H).

/*

** Macros for handling device DRQs

**

** The mask acts as a flag used in mapping actual ISA DMA

** channels to device DMA channels (A - C).

/*

** SMC37c669 Device Function Definitions

/*

** Default Device Function Mappings

/*

** Configuration On/Off Key Definitions

/*

** SMC 37c669 Device IRQs

      SMC37c669_DEVICE_IRQ_G	    *** RESERVED ***/

/*

** SMC 37c669 Device DMA Channel Definitions

/*

** Configuration Register Index Definitions

/*

** Configuration Register Alias Definitions

/*

** Configuration Register Definitions

**

** The INDEX (write only) and DATA (read/write) ports are effective 

** only when the chip is in the Configuration State.

/*

** CR00 - default value 0x28

**

**  IDE_EN (CR00<1:0>):

**	0x - 30ua pull-ups on nIDEEN, nHDCS0, NHDCS1

**	11 - IRQ_H available as IRQ output,

**	     IRRX2, IRTX2 available as alternate IR pins

**	10 - nIDEEN, nHDCS0, nHDCS1 used to control IDE

**

**  VALID (CR00<7>):

**	A high level on this software controlled bit can

**	be used to indicate that a valid configuration

**	cycle has occurred.  The control software must

**	take care to set this bit at the appropriate times.

**	Set to zero after power up.  This bit has no

**	effect on any other hardware in the chip.

**

 See note above		*/

 RAZ			*/

 1 = supply power to FDC  */

 Read as 010b		*/

 See note above		*/

/*

** CR01 - default value 0x9C

 RAZ			    */

 1 = supply power to PPT	    */

 1 = Printer mode, 0 = EPP    */

 Read as 1		    */

 RAZ			    */

 Lock CR00 - CR18		    */

/*

** CR02 - default value 0x88

 RAZ			    */

 1 = supply power to UART1    */

 RAZ			    */

 1 = supply power to UART2    */

/*

** CR03 - default value 0x78

**

**  CR03<7>	CR03<2>	    Pin 94

**  -------	-------	    ------

**     0	   X	    DRV2 (input)

**     1	   0	    ADRX

**     1	   1	    IRQ_B

**

**  CR03<6>	CR03<5>	    Op Mode

**  -------	-------	    -------

**     0	   0	    Model 30

**     0	   1	    PS/2

**     1	   0	    Reserved

**     1	   1	    AT Mode

 1 = PWRGD, 0 = GAMECS	    */

 1 = Enhanced Mode 2	    */

 See note above		    */

 RAZ			    */

 1 = high, 0 - output	    */

 See note above		    */

 See note above		    */

/*

** CR04 - default value 0x00

**

**  PP_EXT_MODE:

**	If CR01<PP_MODE> = 0 and PP_EXT_MODE =

**	    00 - Standard and Bidirectional

**	    01 - EPP mode and SPP

**	    10 - ECP mode

**		 In this mode, 2 drives can be supported

**		 directly, 3 or 4 drives must use external

**		 4 drive support.  SPP can be selected

**		 through the ECR register of ECP as mode 000.

**	    11 - ECP mode and EPP mode

**		 In this mode, 2 drives can be supported

**		 directly, 3 or 4 drives must use external

**		 4 drive support.  SPP can be selected

**		 through the ECR register of ECP as mode 000.

**		 In this mode, EPP can be selected through

**		 the ECR register of ECP as mode 100.

**

**  PP_FDC:

**	00 - Normal

**	01 - PPFD1

**	10 - PPFD2

**	11 - Reserved

**

**  MIDI1:

**	Serial Clock Select: 

**	    A low level on this bit disables MIDI support,

**	    clock = divide by 13.  A high level on this 

**	    bit enables MIDI support, clock = divide by 12.

**

**	MIDI operates at 31.25 Kbps which can be derived 

**	from 125 KHz (24 MHz / 12 = 2 MHz, 2 MHz / 16 = 125 KHz)

**

**  ALT_IO:

**	0 - Use pins IRRX, IRTX

**	1 - Use pins IRRX2, IRTX2

**

**	If this bit is set, the IR receive and transmit

**	functions will not be available on pins 25 and 26

**	unless CR00<IDE_EN> = 11.

 See note above		    */

 See note above		    */

 See note above		    */

 See note above		    */

 0 = EPP 1.9, 1 = EPP 1.7	    */

 See note above		    */

/*

** CR05 - default value 0x00

**

**  DEN_SEL:

**	00 - Densel output normal

**	01 - Reserved

**	10 - Densel output 1

**	11 - Densel output 0

**

 RAZ					*/

 0 = burst, 1 = non-burst			*/

 See note above				*/

 Swap the FDC motor selects		*/

 0 = 2 drive, 1 = external 4 drive decode	*/

 RAZ					*/

/*

** CR06 - default value 0xFF

 Type of floppy drive A	    */

 Type of floppy drive B	    */

 Type of floppy drive C	    */

 Type of floppy drive D	    */

/*

** CR07 - default value 0x00

**

**  Auto Power Management CR07<7:4>:

**	0 - Auto Powerdown disabled (default)

**	1 - Auto Powerdown enabled

**

**	This bit is reset to the default state by POR or

**	a hardware reset.

**

 0 = A:, 1 = B:		    */

 RAZ			    */

 See note above		    */

 See note above		    */

 See note above		    */

 See note above		    */

/*

** CR08 - default value 0x00

 0			    */

 ADR<7:3> for ADRx decode	    */

/*

** CR09 - default value 0x00

**

**  ADRx_CONFIG:

**	00 - ADRx disabled

**	01 - 1 byte decode A<3:0> = 0000b

**	10 - 8 byte block decode A<3:0> = 0XXXb

**	11 - 16 byte block decode A<3:0> = XXXXb

**

 ADR<10:8> for ADRx decode    */

 See note above		    */

/*

** CR0A - default value 0x00

/*

** CR0B - default value 0x00

 FDD0 Data Rate Table	    */

 FDD1 Data Rate Table	    */

 FDD2 Data Rate Table	    */

 FDD3 Data Rate Table	    */

/*

** CR0C - default value 0x00

**

**  UART2_MODE:

**	000 - Standard (default)

**	001 - IrDA (HPSIR)

**	010 - Amplitude Shift Keyed IR @500 KHz

**	011 - Reserved

**	1xx - Reserved

**

 1 = invert RX		*/

 1 = invert TX		*/

 1 = full, 0 = half	*/

 See note above		*/

 1 = high speed enabled	*/

 1 = high speed enabled	*/

/*

** CR0D - default value 0x03

**

**  Device ID Register - read only

 Returns 0x3 in this field    */

/*

** CR0E - default value 0x02

**

**  Device Revision Register - read only

 Returns 0x2 in this field    */

/*

** CR0F - default value 0x00

 Reserved - set to 0	    */

 Reserved - set to 0	    */

 Reserved - set to 0	    */

 Reserved - set t0 0	    */

 Reserved - set to 0	    */

 Reserved - set t0 0	    */

 Reserved - set t0 0	    */

 Reserved - set to 0	    */

/*

** CR10 - default value 0x00

 RAZ			    */

 1 = 3V, 2 = 5V operation    */

 1 = stop PLLs		    */

 1 = stop UART clocks	    */

 0 = 14.318 MHz, 1 = 24 MHz  */

 Enable IR test mode	    */

/*

** CR11 - default value 0x00

 Internal IR loop back		    */

 Test 10ms autopowerdown FDC timeout  */

 RAZ				    */

/*

** CR12 - CR1D are reserved registers

/*

** CR1E - default value 0x80

**

**  GAMECS:

**	00 - GAMECS disabled

**	01 - 1 byte decode ADR<3:0> = 0001b

**	10 - 8 byte block decode ADR<3:0> = 0XXXb

**	11 - 16 byte block decode ADR<3:0> = XXXXb

**

 See note above		    */

 GAMECS Addr<9:4>	    */

/*

** CR1F - default value 0x00

**

**  DT0 DT1 DRVDEN0 DRVDEN1 Drive Type

**  --- --- ------- ------- ----------

**   0   0  DENSEL  DRATE0  4/2/1 MB 3.5"

**                          2/1 MB 5.25"

**                          2/1.6/1 MB 3.5" (3-mode)

**   0   1  DRATE1  DRATE0

**   1   0  nDENSEL DRATE0  PS/2

**   1   1  DRATE0  DRATE1

**

**  Note: DENSEL, DRATE1, and DRATE0 map onto two output

**	  pins - DRVDEN0 and DRVDEN1.

**

 FDD0 drive type	    */

 FDD1 drive type	    */

 FDD2 drive type	    */

 FDD3 drive type	    */

/*

** CR20 - default value 0x3C

**

**  FDC Base Address Register

**	- To disable this decode set Addr<9:8> = 0

**	- A<10> = 0, A<3:0> = 0XXXb to access.

**

 0			    */

 FDC Addr<9:4>		    */

/*

** CR21 - default value 0x3C

**

**  IDE Base Address Register

**	- To disable this decode set Addr<9:8> = 0

**	- A<10> = 0, A<3:0> = 0XXXb to access.

**

 0			    */

 IDE Addr<9:4>		    */

/*

** CR22 - default value 0x3D

**

**  IDE Alternate Status Base Address Register

**	- To disable this decode set Addr<9:8> = 0

**	- A<10> = 0, A<3:0> = 0110b to access.

**

 0			    */

 IDE Alt Status Addr<9:4>	    */

/*

** CR23 - default value 0x00

**

**  Parallel Port Base Address Register

**	- To disable this decode set Addr<9:8> = 0

**	- A<10> = 0 to access.

**	- If EPP is enabled, A<2:0> = XXXb to access.

**	  If EPP is NOT enabled, A<1:0> = XXb to access

**

 Parallel Port Addr<9:2>	    */

/*

** CR24 - default value 0x00

**

**  UART1 Base Address Register

**	- To disable this decode set Addr<9:8> = 0

**	- A<10> = 0, A<2:0> = XXXb to access.

**

 0			    */

 UART1 Addr<9:3>		    */

/*

** CR25 - default value 0x00

**

**  UART2 Base Address Register

**	- To disable this decode set Addr<9:8> = 0

**	- A<10> = 0, A<2:0> = XXXb to access.

**

 0			    */

 UART2 Addr<9:3>		    */

/*

** CR26 - default value 0x00

**

**  Parallel Port / FDC DMA Select Register

**

**  D3 - D0	  DMA

**  D7 - D4	Selected

**  -------	--------

**   0000	 None

**   0001	 DMA_A

**   0010	 DMA_B

**   0011	 DMA_C

**

 See note above		    */

 See note above		    */

/*

** CR27 - default value 0x00

**

**  Parallel Port / FDC IRQ Select Register

**

**  D3 - D0	  IRQ

**  D7 - D4	Selected

**  -------	--------

**   0000	 None

**   0001	 IRQ_A

**   0010	 IRQ_B

**   0011	 IRQ_C

**   0100	 IRQ_D

**   0101	 IRQ_E

**   0110	 IRQ_F

**   0111	 Reserved

**   1000	 IRQ_H

**

**  Any unselected IRQ REQ is in tristate

**

 See note above		    */

 See note above		    */

/*

** CR28 - default value 0x00

**

**  UART IRQ Select Register

**

**  D3 - D0	  IRQ

**  D7 - D4	Selected

**  -------	--------

**   0000	 None

**   0001	 IRQ_A

**   0010	 IRQ_B

**   0011	 IRQ_C

**   0100	 IRQ_D

**   0101	 IRQ_E

**   0110	 IRQ_F

**   0111	 Reserved

**   1000	 IRQ_H

**   1111	 share with UART1 (only for UART2)

**

**  Any unselected IRQ REQ is in tristate

**

**  To share an IRQ between UART1 and UART2, set

**  UART1 to use the desired IRQ and set UART2 to

**  0xF to enable sharing mechanism.

**

 See note above		    */

 See note above		    */

/*

** CR29 - default value 0x00

**

**  IRQIN IRQ Select Register

**

**  D3 - D0	  IRQ

**  D7 - D4	Selected

**  -------	--------

**   0000	 None

**   0001	 IRQ_A

**   0010	 IRQ_B

**   0011	 IRQ_C

**   0100	 IRQ_D

**   0101	 IRQ_E

**   0110	 IRQ_F

**   0111	 Reserved

**   1000	 IRQ_H

**

**  Any unselected IRQ REQ is in tristate

**

 See note above		    */

 RAZ			    */

/*

** Aliases of Configuration Register formats (should match

** the set of index aliases).

**

** Note that CR24 and CR25 have the same format and are the

** base address registers for UART1 and UART2.  Because of

** this we only define 1 alias here - for CR24 - as the serial

** base address register.

**

** Note that CR21 and CR22 have the same format and are the

** base address and alternate status address registers for

** the IDE controller.  Because of this we only define 1 alias

** here - for CR21 - as the IDE address register.

**

/*

** ISA/Device IRQ Translation Table Entry Definition

/*

** ISA/Device DMA Translation Table Entry Definition

/*

** External Interface Function Prototype Declarations

 __SMC37c669_H */

/* file:	smcc669.c

 *

 * Copyright (C) 1997 by

 * Digital Equipment Corporation, Maynard, Massachusetts.

 * All rights reserved.

 *

 * This software is furnished under a license and may be used and copied

 * only  in  accordance  of  the  terms  of  such  license  and with the

 * inclusion of the above copyright notice. This software or  any  other

 * copies thereof may not be provided or otherwise made available to any

 * other person.  No title to and  ownership of the  software is  hereby

 * transferred.

 *

 * The information in this software is  subject to change without notice

 * and  should  not  be  construed  as a commitment by digital equipment

 * corporation.

 *

 * Digital assumes no responsibility for the use  or  reliability of its

 * software on equipment which is not supplied by digital.

/*

 *++

 *  FACILITY:

 *

 *      Alpha SRM Console Firmware

 *

 *  MODULE DESCRIPTION:

 *

 *	SMC37c669 Super I/O controller configuration routines.

 *

 *  AUTHORS:

 *

 *	Eric Rasmussen

 *

 *  CREATION DATE:

 *  

 *	28-Jan-1997

 *

 *  MODIFICATION HISTORY:

 *	

 *	er	01-May-1997	Fixed pointer conversion errors in 

 *				SMC37c669_get_device_config().

 *      er	28-Jan-1997	Initial version.

 *

 *--

/*

** Local storage for device configuration information.

**

** Since the SMC37c669 does not provide an explicit

** mechanism for enabling/disabling individual device 

** functions, other than unmapping the device, local 

** storage for device configuration information is 

** allocated here for use in implementing our own 

** function enable/disable scheme.

/*

** List of all possible addresses for the Super I/O chip

 Primary address	    */

 Secondary address    */

 End of list	    */

/*

** Global Pointer to the Super I/O device

/*

** IRQ Translation Table

**

** The IRQ translation table is a list of SMC37c669 device 

** and standard ISA IRQs.

**

/*

** The following definition is for the default IRQ 

** translation table.

 End of table */

/*

** The following definition is for the MONET (XP1000) IRQ 

** translation table.

 End of table */

/*

** DRQ Translation Table

**

** The DRQ translation table is a list of SMC37c669 device and

** ISA DMA channels.

**

/*

** The following definition is the default DRQ

** translation table.

 End of table */

/*

** Local Function Prototype Declarations

/*

**++

**  FUNCTIONAL DESCRIPTION:

**

**      This function detects the presence of an SMC37c669 Super I/O

**	controller.

**

**  FORMAL PARAMETERS:

**

**	None

**

**  RETURN VALUE:

**

**      Returns a pointer to the device if found, otherwise,

**	the NULL pointer is returned.

**

**  SIDE EFFECTS:

**

**      None

**

**--

/*

** Initialize the device pointer even though we don't yet know if

** the controller is at this address.  The support functions access

** the controller through this device pointer so we need to set it

** even when we are looking ...

/*

** Enter configuration mode

/*

** Read the device id

/*

** Exit configuration mode

/*

** Does the device id match?  If so, assume we have found an

** SMC37c669 controller at this address.

/*

** Initialize the IRQ and DRQ translation tables.

/*

** erfix

**

** If the platform can't use the IRQ and DRQ defaults set up in this 

** file, it should call a platform-specific external routine at this 

** point to reset the IRQ and DRQ translation table pointers to point 

** at the appropriate tables for the platform.  If the defaults are 

** acceptable, then the external routine should do nothing.

/*

** Put the chip back into configuration mode

/*

** Initialize local storage for configuration information

/*

** Exit configuration mode

/*

** SMC37c669 controller found, break out of search loop

/*

** Otherwise, we did not find an SMC37c669 controller at this

** address so set the device pointer to NULL.

/*

**++

**  FUNCTIONAL DESCRIPTION:

**

**      This function enables an SMC37c669 device function.

**

**  FORMAL PARAMETERS:

**

**      func:

**          Which device function to enable

**

**  RETURN VALUE:

**

**      Returns TRUE is the device function was enabled, otherwise, FALSE

**

**  SIDE EFFECTS:

**

**      {@description or none@}

**

**  DESIGN:

**

**      Enabling a device function in the SMC37c669 controller involves

**	setting all of its mappings (port, irq, drq ...).  A local 

**	"shadow" copy of the device configuration is kept so we can

**	just set each mapping to what the local copy says.

**

**	This function ALWAYS updates the local shadow configuration of

**	the device function being enabled, even if the device is always

**	enabled.  To avoid replication of code, functions such as

**	configure_device set up the local copy and then call this 

**	function to the update the real device.

**

**--

/*

** Put the device into configuration mode

/*

** Enable the serial 1 IRQ mapping

/*

** Enable the serial 1 port base address mapping

/*

** Enable the serial 2 IRQ mapping

/*

** Enable the serial 2 port base address mapping

/*

** Enable the parallel port DMA channel mapping

/*

** Enable the parallel port IRQ mapping

/*

** Enable the parallel port base address mapping

/*

** Enable the floppy controller DMA channel mapping

/*

** Enable the floppy controller IRQ mapping

/*

** Enable the floppy controller base address mapping

/*

** Enable the IDE alternate status base address mapping

/*

** Enable the IDE controller base address mapping

/*

** Exit configuration mode and return

/*

**++

**  FUNCTIONAL DESCRIPTION:

**

**      This function disables a device function within the

**	SMC37c669 Super I/O controller.

**

**  FORMAL PARAMETERS:

**

**      func:

**          Which function to disable

**

**  RETURN VALUE:

**

**      Return TRUE if the device function was disabled, otherwise, FALSE

**

**  SIDE EFFECTS:

**

**      {@description or none@}

**

**  DESIGN:

**

**      Disabling a function in the SMC37c669 device involves

**	disabling all the function's mappings (port, irq, drq ...).

**	A shadow copy of the device configuration is maintained

**	in local storage so we won't worry aboving saving the

**	current configuration information.

**

**--

/*

** Put the device into configuration mode

/*

** Disable the serial 1 IRQ mapping

/*

** Disable the serial 1 port base address mapping

/*

** Disable the serial 2 IRQ mapping

/*

** Disable the serial 2 port base address mapping

/*

** Disable the parallel port DMA channel mapping

/*

** Disable the parallel port IRQ mapping

/*

** Disable the parallel port base address mapping

/*

** Disable the floppy controller DMA channel mapping

/*

** Disable the floppy controller IRQ mapping

/*

** Disable the floppy controller base address mapping

/*

** Disable the IDE alternate status base address mapping

/*

** Disable the IDE controller base address mapping

/*

** Exit configuration mode and return

/*

**++

**  FUNCTIONAL DESCRIPTION:

**

**      This function configures a device function within the 

**	SMC37c669 Super I/O controller.

**

**  FORMAL PARAMETERS:

**

**      func:

**          Which device function

**       

**      port:

**          I/O port for the function to use

**	 

**      irq:

**          IRQ for the device function to use

**	 

**      drq:

**          DMA channel for the device function to use

**

**  RETURN VALUE:

**

**      Returns TRUE if the device function was configured, 

**	otherwise, FALSE.

**

**  SIDE EFFECTS:

**

**      {@description or none@}

**

**  DESIGN:

**

**	If this function returns TRUE, the local shadow copy of

**	the configuration is also updated.  If the device function

**	is currently disabled, only the local shadow copy is 

**	updated and the actual device function will be updated

**	if/when it is enabled.

**

**--

/*

** Check for a valid configuration

/*

** Configuration is valid, update the local shadow copy

/*

** If the device function is enabled, update the actual

** device configuration.

/*

**++

**  FUNCTIONAL DESCRIPTION:

**

**      This function determines whether a device function

**	within the SMC37c669 controller is enabled.

**

**  FORMAL PARAMETERS:

**

**      func:

**          Which device function

**

**  RETURN VALUE:

**

**      Returns TRUE if the device function is enabled, otherwise, FALSE

**

**  SIDE EFFECTS:

**

**      {@description or none@}

**

**  DESIGN:

**

**      To check whether a device is enabled we will only look at 

**	the port base address mapping.  According to the SMC37c669

**	specification, all of the port base address mappings are

**	disabled if the addr<9:8> (bits <7:6> of the register) are

**	zero.

**

**--

/*

** Enter configuration mode

/*

** If we have a valid device, check base_addr<7:6> to see if the

** device is enabled (mapped).

/*

** The mapping is not disabled, so assume that the function is 

** enabled.

/*

** Exit configuration mode 

/*

**++

**  FUNCTIONAL DESCRIPTION:

**

**      This function retrieves the configuration information of a 

**	device function within the SMC37c699 Super I/O controller.

**

**  FORMAL PARAMETERS:

**

**      func:

**          Which device function

**       

**      port:

**          I/O port returned

**	 

**      irq:

**          IRQ returned

**	 

**      drq:

**          DMA channel returned

**

**  RETURN VALUE:

**

**      Returns TRUE if the device configuration was successfully

**	retrieved, otherwise, FALSE.

**

**  SIDE EFFECTS:

**

**      The data pointed to by the port, irq, and drq parameters

**	my be modified even if the configuration is not successfully

**	retrieved.

**

**  DESIGN:

**

**      The device configuration is fetched from the local shadow

**	copy.  Any unused parameters will be set to -1.  Any

**	parameter which is not desired can specify the NULL

**	pointer.

**

**--

/*

** Check for a valid device configuration

/*

**++

**  FUNCTIONAL DESCRIPTION:

**

**      This function displays the current state of the SMC37c699

**	Super I/O controller's device functions.

**

**  FORMAL PARAMETERS:

**

**      None

**

**  RETURN VALUE:

**

**      None

**

**  SIDE EFFECTS:

**

**      None

**

**--

/*

**++

**  FUNCTIONAL DESCRIPTION:

**

**      This function puts the SMC37c669 Super I/O controller into,

**	and takes it out of, configuration mode.

**

**  FORMAL PARAMETERS:

**

**      enable:

**          TRUE to enter configuration mode, FALSE to exit.

**

**  RETURN VALUE:

**

**      None

**

**  SIDE EFFECTS:

**

**      The SMC37c669 controller may be left in configuration mode.

**

**--

/*

** To enter configuration mode, two writes in succession to the index

** port are required.  If a write to another address or port occurs

** between these two writes, the chip does not enter configuration

** mode.  Therefore, a spinlock is placed around the two writes to 

** guarantee that they complete uninterrupted.

/*

**++

**  FUNCTIONAL DESCRIPTION:

**

**      This function reads an SMC37c669 Super I/O controller

**	configuration register.  This function assumes that the

**	device is already in configuration mode.

**

**  FORMAL PARAMETERS:

**

**      index:

**          Index value of configuration register to read

**

**  RETURN VALUE:

**

**      Data read from configuration register

**

**  SIDE EFFECTS:

**

**      None

**

**--

/*

**++

**  FUNCTIONAL DESCRIPTION:

**

**      This function writes an SMC37c669 Super I/O controller

**	configuration register.  This function assumes that the

**	device is already in configuration mode.

**

**  FORMAL PARAMETERS:

**

**      index:

**          Index of configuration register to write

**       

**      data:

**          Data to be written

**

**  RETURN VALUE:

**

**      None

**

**  SIDE EFFECTS:

**

**      None

**

**--

/*

**++

**  FUNCTIONAL DESCRIPTION:

**

**      This function initializes the local device

**	configuration storage.  This function assumes

**	that the device is already in configuration

**	mode.

**

**  FORMAL PARAMETERS:

**

**      None

**

**  RETURN VALUE:

**

**      None

**

**  SIDE EFFECTS:

**

**      Local storage for device configuration information

**	is initialized.

**

**--

/*

** Get serial port 1 base address 

/*

** Get IRQs for serial ports 1 & 2

/*

** Store local configuration information for serial port 1

/*

** Get serial port 2 base address

/*

** Store local configuration information for serial port 2

/*

** Get parallel port base address

/*

** Get IRQs for parallel port and floppy controller

/*

** Get DRQs for parallel port and floppy controller

/*

** Store local configuration information for parallel port

/*

** Get floppy controller base address

/*

** Store local configuration information for floppy controller

/*

** Get IDE controller base address

/*

** Get IDE alternate status base address

/*

** Store local configuration information for IDE controller

/*

**++

**  FUNCTIONAL DESCRIPTION:

**

**      This function returns a pointer to the local shadow

**	configuration of the requested device function.

**

**  FORMAL PARAMETERS:

**

**      func:

**          Which device function

**

**  RETURN VALUE:

**

**      Returns a pointer to the DEVICE_CONFIG structure for the

**	requested function, otherwise, NULL.

**

**  SIDE EFFECTS:

**

**      {@description or none@}

**

**--

/*

**++

**  FUNCTIONAL DESCRIPTION:

**

**      This function translates IRQs back and forth between ISA

**	IRQs and SMC37c669 device IRQs.

**

**  FORMAL PARAMETERS:

**

**      irq:

**          The IRQ to translate

**

**  RETURN VALUE:

**

**      Returns the translated IRQ, otherwise, returns -1.

**

**  SIDE EFFECTS:

**

**      {@description or none@}

**

**--

/*

** We are translating a device IRQ to an ISA IRQ

/*

** We are translating an ISA IRQ to a device IRQ

/*

**++

**  FUNCTIONAL DESCRIPTION:

**

**      This function translates DMA channels back and forth between

**	ISA DMA channels and SMC37c669 device DMA channels.

**

**  FORMAL PARAMETERS:

**

**      drq:

**          The DMA channel to translate

**

**  RETURN VALUE:

**

**      Returns the translated DMA channel, otherwise, returns -1

**

**  SIDE EFFECTS:

**

**      {@description or none@}

**

**--

/*

** We are translating a device DMA channel to an ISA DMA channel

/*

** We are translating an ISA DMA channel to a device DMA channel

/*

** Allow multiple readers but only one writer.  ip->misc keeps track

** of the number of writers

 too many writers */

/*

** Treat the information field as a byte offset

/*

** Always access a byte at a time

/*

** Always access a byte at a time

/*+

 * ============================================================================

 * = SMC_init - SMC37c669 Super I/O controller initialization                 =

 * ============================================================================

 *

 * OVERVIEW:

 *

 *      This routine configures and enables device functions on the

 *      SMC37c669 Super I/O controller.

 *

 * FORM OF CALL:

 *

 *      SMC_init( );

 *

 * RETURNS:

 *

 *      Nothing

 *

 * ARGUMENTS:

 *

 *      None

 *

 * SIDE EFFECTS:

 *

 *      None

 *

 Wake up sometimes forgotten floppy, especially on DP264. */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/alpha/kernel/rtc.c

 *

 *  Copyright (C) 1991, 1992, 1995, 1999, 2000  Linus Torvalds

 *

 * This file contains date handling.

/*

 * Support for the RTC device.

 *

 * We don't want to use the rtc-cmos driver, because we don't want to support

 * alarms, as that would be indistinguishable from timer interrupts.

 *

 * Further, generic code is really, really tied to a 1900 epoch.  This is

 * true in __get_rtc_time as well as the users of struct rtc_time e.g.

 * rtc_tm_to_time.  Thankfully all of the other epochs in use are later

 * than 1900, and so it's easy to adjust.

 The epoch was specified on the command-line.  */

 Detect the epoch in use on this computer.  */

 PC-like is standard; used for year >= 70 */

 NT epoch */

 Digital UNIX epoch */

	/* Adjust for non-default epochs.  It's easier to depend on the

	   generic __get_rtc_time and adjust the epoch here than create

 Undo the century adjustment made in __get_rtc_time.  */

 Redo the century adjustment with the epoch in place.  */

/*

 * Similarly, except do the actual CMOS access on the boot cpu only.

 * This requires marshalling the data across an interprocessor call.

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_sable.c

 *

 *	Copyright (C) 1995 David A Rusling

 *	Copyright (C) 1996 Jay A Estabrook

 *	Copyright (C) 1998, 1999 Richard Henderson

 *

 * Code supporting the Sable, Sable-Gamma, and Lynx systems.

 Note mask bit is true for DISABLED irqs.  */

**********************************************************************/

/*

 *   For SABLE, which is really baroque, we manage 40 IRQ's, but the

 *   hardware really only supports 24, not via normal ISA PIC,

 *   but cascaded custom 8259's, etc.

 *	 0-7  (char at 536)

 *	 8-15 (char at 53a)

 *	16-23 (char at 53c)

 *

 * Summary Registers (536/53a/53c):

 *

 * Bit      Meaning               Kernel IRQ

 *------------------------------------------

 * 0        PCI slot 0			34

 * 1        NCR810 (builtin)		33

 * 2        TULIP (builtin)		32

 * 3        mouse			12

 * 4        PCI slot 1			35

 * 5        PCI slot 2			36

 * 6        keyboard			1

 * 7        floppy			6

 * 8        COM2			3

 * 9        parallel port		7

 *10        EISA irq 3			-

 *11        EISA irq 4			-

 *12        EISA irq 5			5

 *13        EISA irq 6			-

 *14        EISA irq 7			-

 *15        COM1			4

 *16        EISA irq 9			9

 *17        EISA irq 10			10

 *18        EISA irq 11			11

 *19        EISA irq 12			-

 *20        EISA irq 13			-

 *21        EISA irq 14			14

 *22        NC				15

 *23        IIC				-

 ack the slave */

 ack the master */

 pseudo PIC  0-7  */

 pseudo PIC  8-15 */

 pseudo EISA 0-7  */

 pseudo EISA 8-15  */

 pseudo PCI */

  */

  */

  */

 mask 0-7  */

 mask 8-15  */

 mask 16-23  */

  */

  */

  */

  */

  */

 slave 0 */

 slave 1 */

 slave 2 */

 enable cascades in master */

/*

 * PCI Fixup configuration for ALPHA SABLE (2100).

 *

 * The device to slot mapping looks like:

 *

 * Slot     Device

 *  0       TULIP

 *  1       SCSI

 *  2       PCI-EISA bridge

 *  3       none

 *  4       none

 *  5       none

 *  6       PCI on board slot 0

 *  7       PCI on board slot 1

 *  8       PCI on board slot 2

 *   

 *

 * This two layered interrupt approach means that we allocate IRQ 16 and 

 * above for PCI interrupts.  The IRQ relates to which bit the interrupt

 * comes in on.  This makes interrupt processing much easier.

/*

 * NOTE: the IRQ assignments below are arbitrary, but need to be consistent

 * with the values in the irq swizzling tables above.

INT    INTA   INTB   INTC   INTD */

 IdSel 0,  TULIP  */

 IdSel 1,  SCSI   */

 IdSel 2,  SIO   */

 IdSel 3,  none   */

 IdSel 4,  none   */

 IdSel 5,  none   */

 IdSel 6,  slot 0 */

 IdSel 7,  slot 1 */

 IdSel 8,  slot 2 */

 defined(CONFIG_ALPHA_GENERIC) || defined(CONFIG_ALPHA_SABLE) */

**********************************************************************/

/* LYNX hardware specifics

/*

 *   For LYNX, which is also baroque, we manage 64 IRQs, via a custom IC.

 *

 * Bit      Meaning               Kernel IRQ

 *------------------------------------------

 * 0        

 * 1        

 * 2        

 * 3        mouse			12

 * 4        

 * 5        

 * 6        keyboard			1

 * 7        floppy			6

 * 8        COM2			3

 * 9        parallel port		7

 *10        EISA irq 3			-

 *11        EISA irq 4			-

 *12        EISA irq 5			5

 *13        EISA irq 6			-

 *14        EISA irq 7			-

 *15        COM1			4

 *16        EISA irq 9			9

 *17        EISA irq 10			10

 *18        EISA irq 11			11

 *19        EISA irq 12			-

 *20        

 *21        EISA irq 14			14

 *22        EISA irq 15			15

 *23        IIC				-

 *24        VGA (builtin)               -

 *25

 *26

 *27

 *28        NCR810 (builtin)		28

 *29

 *30

 *31

 *32        PCI 0 slot 4 A primary bus  32

 *33        PCI 0 slot 4 B primary bus  33

 *34        PCI 0 slot 4 C primary bus  34

 *35        PCI 0 slot 4 D primary bus

 *36        PCI 0 slot 5 A primary bus

 *37        PCI 0 slot 5 B primary bus

 *38        PCI 0 slot 5 C primary bus

 *39        PCI 0 slot 5 D primary bus

 *40        PCI 0 slot 6 A primary bus

 *41        PCI 0 slot 6 B primary bus

 *42        PCI 0 slot 6 C primary bus

 *43        PCI 0 slot 6 D primary bus

 *44        PCI 0 slot 7 A primary bus

 *45        PCI 0 slot 7 B primary bus

 *46        PCI 0 slot 7 C primary bus

 *47        PCI 0 slot 7 D primary bus

 *48        PCI 0 slot 0 A secondary bus

 *49        PCI 0 slot 0 B secondary bus

 *50        PCI 0 slot 0 C secondary bus

 *51        PCI 0 slot 0 D secondary bus

 *52        PCI 0 slot 1 A secondary bus

 *53        PCI 0 slot 1 B secondary bus

 *54        PCI 0 slot 1 C secondary bus

 *55        PCI 0 slot 1 D secondary bus

 *56        PCI 0 slot 2 A secondary bus

 *57        PCI 0 slot 2 B secondary bus

 *58        PCI 0 slot 2 C secondary bus

 *59        PCI 0 slot 2 D secondary bus

 *60        PCI 0 slot 3 A secondary bus

 *61        PCI 0 slot 3 B secondary bus

 *62        PCI 0 slot 3 C secondary bus

 *63        PCI 0 slot 3 D secondary bus

	/*

	 * Write the AIR register on the T3/T4 with the

	 * address of the IC mask register (offset 0x40)

 re-read to force write */

 irq_to_mask */

 pseudo PIC  0-7  */

 pseudo PIC  8-15 */

 pseudo */

 pseudo */

 mask 32-39 */

 mask 40-47 */

 mask 48-55 */

 mask 56-63 */

 mask_to_irq */

 mask 0-7   */

 mask 8-15  */

 mask 16-23 */

 mask 24-31 */

 mask 32-39 */

 mask 40-47 */

 mask 48-55 */

 mask 56-63 */

/*

 * PCI Fixup configuration for ALPHA LYNX (2100A)

 *

 * The device to slot mapping looks like:

 *

 * Slot     Device

 *  0       none

 *  1       none

 *  2       PCI-EISA bridge

 *  3       PCI-PCI bridge

 *  4       NCR 810 (Demi-Lynx only)

 *  5       none

 *  6       PCI on board slot 4

 *  7       PCI on board slot 5

 *  8       PCI on board slot 6

 *  9       PCI on board slot 7

 *

 * And behind the PPB we have:

 *

 * 11       PCI on board slot 0

 * 12       PCI on board slot 1

 * 13       PCI on board slot 2

 * 14       PCI on board slot 3

/*

 * NOTE: the IRQ assignments below are arbitrary, but need to be consistent

 * with the values in the irq swizzling tables above.

INT    INTA   INTB   INTC   INTD */

 IdSel 13,  PCEB   */

 IdSel 14,  PPB    */

 IdSel 15,  NCR demi */

 IdSel 16,  none   */

 IdSel 17,  slot 4 */

 IdSel 18,  slot 5 */

 IdSel 19,  slot 6 */

 IdSel 20,  slot 7 */

 IdSel 22,  none   */

 The following are actually behind the PPB. */

 IdSel 16   none */

 IdSel 17   NCR lynx */

 IdSel 18   none */

 IdSel 19   none */

 IdSel 20   none */

 IdSel 21   none */

 IdSel 22   slot 0 */

 IdSel 23   slot 1 */

 IdSel 24   slot 2 */

 IdSel 25   slot 3 */

 Check for the built-in bridge */

 Must be a card-based bridge.  */

 Move up the chain of bridges.  */

 Slot of the next bridge.  */

 defined(CONFIG_ALPHA_GENERIC) || defined(CONFIG_ALPHA_LYNX) */

**********************************************************************/

 GENERIC irq routines */

	/* Note that the vector reported by the SRM PALcode corresponds

	   to the interrupt mask bits, but we have to manage via the

****************************************************************/

/*

 * The System Vectors

 *

 * In order that T2_HAE_ADDRESS should be a constant, we play

 * these games with GAMMA_BIAS.

 GENERIC || (SABLE && !GAMMA) */

 GENERIC || (SABLE && GAMMA) */

 GENERIC || LYNX */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/alpha/kernel/sys_wildfire.c

 *

 *  Wildfire support.

 *

 *  Copyright (C) 2000 Andrea Arcangeli <andrea@suse.de> SuSE

 ??? */

 Need to update only once for every possible PCA. */

 Only need the following for first PCI bus per PCA. */

 ??? Not sure how to do this, yet... */

 ??? */

	/*

	 * bits 10-8:	source QBB ID

	 * bits 7-6:	PCA

	 * bits 5-0:	irq in PCA

/*

 * PCI Fixup configuration.

 *

 * Summary per PCA (2 PCI or HIPPI buses):

 *

 * Bit      Meaning

 * 0-15     ISA

 *

 *32        ISA summary

 *33        SMI

 *34        NMI

 *36        builtin QLogic SCSI (or slot 0 if no IO module)

 *40        Interrupt Line A from slot 2 PCI0

 *41        Interrupt Line B from slot 2 PCI0

 *42        Interrupt Line C from slot 2 PCI0

 *43        Interrupt Line D from slot 2 PCI0

 *44        Interrupt Line A from slot 3 PCI0

 *45        Interrupt Line B from slot 3 PCI0

 *46        Interrupt Line C from slot 3 PCI0

 *47        Interrupt Line D from slot 3 PCI0

 *

 *48        Interrupt Line A from slot 4 PCI1

 *49        Interrupt Line B from slot 4 PCI1

 *50        Interrupt Line C from slot 4 PCI1

 *51        Interrupt Line D from slot 4 PCI1

 *52        Interrupt Line A from slot 5 PCI1

 *53        Interrupt Line B from slot 5 PCI1

 *54        Interrupt Line C from slot 5 PCI1

 *55        Interrupt Line D from slot 5 PCI1

 *56        Interrupt Line A from slot 6 PCI1

 *57        Interrupt Line B from slot 6 PCI1

 *58        Interrupt Line C from slot 6 PCI1

 *50        Interrupt Line D from slot 6 PCI1

 *60        Interrupt Line A from slot 7 PCI1

 *61        Interrupt Line B from slot 7 PCI1

 *62        Interrupt Line C from slot 7 PCI1

 *63        Interrupt Line D from slot 7 PCI1

 * 

 *

 * IdSel	

 *   0	 Cypress Bridge I/O (ISA summary interrupt)

 *   1	 64 bit PCI 0 option slot 1 (SCSI QLogic builtin)

 *   2	 64 bit PCI 0 option slot 2

 *   3	 64 bit PCI 0 option slot 3

 *   4	 64 bit PCI 1 option slot 4

 *   5	 64 bit PCI 1 option slot 5

 *   6	 64 bit PCI 1 option slot 6

 *   7	 64 bit PCI 1 option slot 7

INT    INTA   INTB   INTC   INTD */

 IdSel 0 ISA Bridge */

 IdSel 1 SCSI builtin */

 IdSel 2 PCI 0 slot 2 */

 IdSel 3 PCI 0 slot 3 */

 IdSel 4 PCI 1 slot 4 */

 IdSel 5 PCI 1 slot 5 */

 IdSel 6 PCI 1 slot 6 */

 IdSel 7 PCI 1 slot 7 */

/*

 * The System Vectors

 SPDX-License-Identifier: GPL-2.0

/*

 * Handle interrupts from the SRM, assuming no additional weirdness.

/*

 * Is the palcode SMP safe? In other words: can we call cserve_ena/dis

 * at the same time in multiple CPUs? To be safe I added a spinlock

 * but it can be removed trivially if the palcode is robust against smp.

 Handle interrupts from the SRM, assuming no additional weirdness.  */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/err_common.c

 *

 *	Copyright (C) 2000 Jeff Wiedemeier (Compaq Computer Corporation)

 *

 *	Error handling code supporting Alpha systems

/*

 * err_print_prefix -- error handling print routines should prefix

 * all prints with this

/*

 * Generic

/*

 * Console Data Log

 Data */

 Unknown */

	/*

	 * Process the subpackets

 return the next header */

 Termination packet, there are no more */

			/*

			 * We found the annotation

 let the console know it's ok to clear the error(s) at restart */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/core_mcpcia.c

 *

 * Based on code written by David A Rusling (david.rusling@reo.mts.dec.com).

 *

 * Code common to all MCbus-PCI Adaptor core logic chipsets

/*

 * NOTE: Herein lie back-to-back mb instructions.  They are magic. 

 * One plausible explanation is that the i/o controller does not properly

 * handle the system transaction.  Another involves timing.  Ho hum.

/*

 * BIOS32-style PCI interface:

/*

 * Given a bus, device, and function number, compute resulting

 * configuration space address and setup the MCPCIA_HAXR2 register

 * accordingly.  It is therefore not safe to have concurrent

 * invocations to configuration space access routines, but there

 * really shouldn't be any need for this.

 *

 * Type 0:

 *

 *  3 3|3 3 2 2|2 2 2 2|2 2 2 2|1 1 1 1|1 1 1 1|1 1 

 *  3 2|1 0 9 8|7 6 5 4|3 2 1 0|9 8 7 6|5 4 3 2|1 0 9 8|7 6 5 4|3 2 1 0

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 * | | |D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|F|F|F|R|R|R|R|R|R|0|0|

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *

 *	31:11	Device select bit.

 * 	10:8	Function number

 * 	 7:2	Register number

 *

 * Type 1:

 *

 *  3 3|3 3 2 2|2 2 2 2|2 2 2 2|1 1 1 1|1 1 1 1|1 1 

 *  3 2|1 0 9 8|7 6 5 4|3 2 1 0|9 8 7 6|5 4 3 2|1 0 9 8|7 6 5 4|3 2 1 0

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 * | | | | | | | | | | |B|B|B|B|B|B|B|B|D|D|D|D|D|F|F|F|R|R|R|R|R|R|0|1|

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *

 *	31:24	reserved

 *	23:16	bus number (8 bits = 128 possible buses)

 *	15:11	Device number (5 bits)

 *	10:8	function number

 *	 7:2	register number

 *  

 * Notes:

 *	The function number selects which function of a multi-function device 

 *	(e.g., SCSI and Ethernet).

 * 

 *	The register selects a DWORD (32 bit) register offset.  Hence it

 *	doesn't get shifted by 2 bits as we want to "drop" the bottom two

 *	bits.

 Reset status register to avoid losing errors.  */

 Access configuration space.  */

 magic */

 avoid getting hit by machine check */

 Reset status register to avoid losing errors.  */

 Access configuration space.  */

 magic */

 read to force the write */

 Type 1 configuration cycle for *ALL* busses.  */

 No parent means peer PCI bus. */

 swizzle for SPARSE */

 Gotta be REAL careful.  If hose is absent, we get an mcheck.  */

 indicates probing */

 Access the bus revision word. */

 magic */

 Clear them all.  */

 Re-read for force write.  */

	/* 

	 * Set up error reporting.

 master/target abort */

	/*

	 * Set up the PCI->physical memory translation windows.

	 *

	 * Window 0 is scatter-gather 8MB at 8MB (for isa)

	 * Window 1 is scatter-gather (up to) 1GB at 1GB (for pci)

	 * Window 2 is direct access 2GB at 2GB

 read it back. */

 read it back. */

 With multiple PCI busses, we play with I/O as physical addrs.  */

	/* Allocate hose 0.  That's the one that all the ISA junk hangs

	   off of, from which we'll be registering stuff here in a bit.

	   Other hose detection is done in mcpcia_init_hoses, which is

/* This is called from init_IRQ, since we cannot take interrupts

 First, find how many hoses we have.  */

 Now do init for each hose.  */

 Print PAL fields */

 magic */

		/* FIXME: how do we figure out which hose the

		/* Otherwise, we're being called from mcpcia_probe_hose

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/core_cia.c

 *

 * Written by David A Rusling (david.rusling@reo.mts.dec.com).

 * December 1995.

 *

 *	Copyright (C) 1995  David A Rusling

 *	Copyright (C) 1997, 1998  Jay Estabrook

 *	Copyright (C) 1998, 1999, 2000  Richard Henderson

 *

 * Code common to all CIA core logic chips.

/*

 * NOTE: Herein lie back-to-back mb instructions.  They are magic. 

 * One plausible explanation is that the i/o controller does not properly

 * handle the system transaction.  Another involves timing.  Ho hum.

/*

 * Given a bus, device, and function number, compute resulting

 * configuration space address.  It is therefore not safe to have

 * concurrent invocations to configuration space access routines, but

 * there really shouldn't be any need for this.

 *

 * Type 0:

 *

 *  3 3|3 3 2 2|2 2 2 2|2 2 2 2|1 1 1 1|1 1 1 1|1 1 

 *  3 2|1 0 9 8|7 6 5 4|3 2 1 0|9 8 7 6|5 4 3 2|1 0 9 8|7 6 5 4|3 2 1 0

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 * | | |D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|D|F|F|F|R|R|R|R|R|R|0|0|

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *

 *	31:11	Device select bit.

 * 	10:8	Function number

 * 	 7:2	Register number

 *

 * Type 1:

 *

 *  3 3|3 3 2 2|2 2 2 2|2 2 2 2|1 1 1 1|1 1 1 1|1 1 

 *  3 2|1 0 9 8|7 6 5 4|3 2 1 0|9 8 7 6|5 4 3 2|1 0 9 8|7 6 5 4|3 2 1 0

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 * | | | | | | | | | | |B|B|B|B|B|B|B|B|D|D|D|D|D|F|F|F|R|R|R|R|R|R|0|1|

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *

 *	31:24	reserved

 *	23:16	bus number (8 bits = 128 possible buses)

 *	15:11	Device number (5 bits)

 *	10:8	function number

 *	 7:2	register number

 *  

 * Notes:

 *	The function number selects which function of a multi-function device 

 *	(e.g., SCSI and Ethernet).

 * 

 *	The register selects a DWORD (32 bit) register offset.  Hence it

 *	doesn't get shifted by 2 bits as we want to "drop" the bottom two

 *	bits.

 Reset status register to avoid losing errors.  */

 re-read to force write */

 If Type1 access, must set CIA CFG. */

 Access configuration space.  */

 magic */

 If Type1 access, must reset IOC CFG so normal IO space ops work.  */

 Reset status register to avoid losing errors.  */

 re-read to force write */

 If Type1 access, must set CIA CFG.  */

 Access configuration space.  */

 read back to force the write */

 If Type1 access, must reset IOC CFG so normal IO space ops work.  */

/*

 * CIA Pass 1 and PYXIS Pass 1 and 2 have a broken scatter-gather tlb.

 * It cannot be invalidated.  Rather than hard code the pass numbers,

 * actually try the tbia to see if it works.

 Flush all locked and unlocked.  */

/*

 * On PYXIS, even if the tbia works, we cannot use it. It effectively locks

 * the chip (as well as direct write to the tag registers) if there is a

 * SG DMA operation in progress. This is true at least for PYXIS rev. 1,

 * so always use the method below.

/*

 * This is the method NT and NetBSD use.

 *

 * Allocate mappings, and put the chip into DMA loopback mode to read a

 * garbage page.  This works by causing TLB misses, causing old entries to

 * be purged to make room for the new entries coming in for the garbage page.

 Always called with interrupts disabled */

 Put the chip into PCI loopback mode.  */

	/* Read from PCI dense memory space at TBI_ADDR, skipping 32k on

	   each read.  This forces SG TLB misses.  NetBSD claims that the

	   TLB entries are not quite LRU, meaning that we need to read more

	   times than there are actual tags.  The 2117x docs claim strict

	/* Even better - as seen on the PYXIS rev 1 the TLB tags 0-3 can

	   be filled by the TLB misses *only once* after being invalidated

	   (by tbia or direct write). Next misses won't update them even

	   though the lock bits are cleared. Tags 4-7 are "quite LRU" though,

	   so use them and read at window 3 base exactly 4 times. Reading

 Restore normal PCI operation.  */

 Use minimal 1K map. */

 pyxis -- tbia is broken */

 Put the chip into PCI loopback mode.  */

 Write a valid entry directly into the TLB registers.  */

 Get a usable bus address */

	/* First, verify we can read back what we've written.  If

	   this fails, we can't be sure of any of the other testing

	/* ??? Actually, we could do the work with machine checks.

	   By passing this register update test, we pretty much

	   guarantee that cia_pci_tbi_try1 works.  If this test

 Second, verify we can actually do I/O through this entry.  */

 Third, try to invalidate the TLB.  */

	/* Fourth, verify the TLB snoops the EV5's caches when

	/* Fifth, verify that a previously invalid PTE entry gets

		/* Work around this bug by aligning new allocations

	/* Sixth, verify machine checks are working.  Test invalid

 Clean up after the tests.  */

 Tags 0-3 must be disabled if we use this workaraund. */

 unmap the bus addr */

 Restore normal PCI operation.  */

 Save CIA configuration data as the console had it set up.  */

 Save some important registers. */

 Save DMA windows configuration. */

 Must be pyxis. */

 ALPHA_RESTORE_SRM_SETUP */

 ALPHA_RESTORE_SRM_SETUP */

 Set up error reporting.  */

 Clear all currently pending errors.  */

 Turn on mchecks.  */

	/* Clear the CFG register, which gets used for PCI config space

	   accesses.  That is the way we want to use it, and we do not

 Zero the HAEs.  */

	/* For PYXIS, we always use BWX bus and i/o accesses.  To that end,

	   make sure they're enabled on the controller.  At the same time,

 Synchronize with all previous changes.  */

	/*

	 * Create our single hose.

	/*

	 * Set up the PCI to main memory translation windows.

	 *

	 * Window 0 is S/G 8MB at 8MB (for isa)

	 * Window 1 is S/G 1MB at 768MB (for tbia) (unused for CIA rev 1)

	 * Window 2 is direct access 2GB at 2GB

	 * Window 3 is DAC access 4GB at 8GB (or S/G for tbia if CIA rev 1)

	 *

	 * ??? NetBSD hints that page tables must be aligned to 32K,

	 * possibly due to a hardware bug.  This is over-aligned

	 * from the 8K alignment one would expect for an 8MB window. 

	 * No description of what revisions affected.

	/* On PYXIS we have the monster window, selected by bit 40, so

	   there is no need for window3 to be enabled.



	   On CIA, we don't have true arbitrary addressing -- bits <39:32>

	   are compared against W_DAC.  We can, however, directly map 4GB,

	   which is better than before.  However, due to assumptions made

	   elsewhere, we should not claim that we support DAC unless that

	   4GB covers all of physical memory.



	   On CIA rev 1, apparently W1 and W2 can't be used for SG. 

	   At least, there are reports that it doesn't work for Alcor. 

	   In that case, we have no choice but to use W3 for the TBIA 

 Prepare workaround for apparently broken tbia. */

	/* On pyxis machines we can precisely calculate the

	   CPU clock frequency using pyxis real time counter.

	   It's especially useful for SX164 with broken RTC.



	   Both CPU and chipset are driven by the single 16.666M

	   or 16.667M crystal oscillator. PYXIS_RT_COUNT clock is

 Must delay this from init_arch, as we need machine checks.  */

 re-read to force write.  */

 If this is a DMA command, also decode the PCI bits.  */

 CONFIG_VERBOSE_MCHECK */

 CIA_ERR_COR_ERR */

 CIA_ERR_UN_COR_ERR */

 CIA_ERR_CPU_PE */

 CIA_ERR_MEM_NEM */

 CIA_ERR_PCI_SERR */

 CIA_ERR_PERR */

 CIA_ERR_PCI_ADDR_PE */

 CIA_ERR_RCVD_MAS_ABT */

 CIA_ERR_RCVD_TAR_ABT */

 CIA_ERR_PA_PTE_INV */

 CIA_ERR_FROM_WRT_ERR */

 CIA_ERR_IOA_TIMEOUT */

 CONFIG_VERBOSE_MCHECK */

 Clear the error before any reporting.  */

 magic */

 reset machine check pending flag.  */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/pci-noop.c

 *

 * Stub PCI interfaces for Jensen-specific kernels.

/*

 * The PCI controller list.

 from hose or from bus.devfn */

 Special hook for ISA access.  */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/core_tsunami.c

 *

 * Based on code written by David A. Rusling (david.rusling@reo.mts.dec.com).

 *

 * Code common to all TSUNAMI core logic chips.

 Save Tsunami configuration data as the console had it set up.  */

/*

 * NOTE: Herein lie back-to-back mb instructions.  They are magic. 

 * One plausible explanation is that the I/O controller does not properly

 * handle the system transaction.  Another involves timing.  Ho hum.

/*

 * BIOS32-style PCI interface:

/*

 * Given a bus, device, and function number, compute resulting

 * configuration space address

 * accordingly.  It is therefore not safe to have concurrent

 * invocations to configuration space access routines, but there

 * really shouldn't be any need for this.

 *

 * Note that all config space accesses use Type 1 address format.

 *

 * Note also that type 1 is determined by non-zero bus number.

 *

 * Type 1:

 *

 *  3 3|3 3 2 2|2 2 2 2|2 2 2 2|1 1 1 1|1 1 1 1|1 1 

 *  3 2|1 0 9 8|7 6 5 4|3 2 1 0|9 8 7 6|5 4 3 2|1 0 9 8|7 6 5 4|3 2 1 0

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 * | | | | | | | | | | |B|B|B|B|B|B|B|B|D|D|D|D|D|F|F|F|R|R|R|R|R|R|0|1|

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *

 *	31:24	reserved

 *	23:16	bus number (8 bits = 128 possible buses)

 *	15:11	Device number (5 bits)

 *	10:8	function number

 *	 7:2	register number

 *  

 * Notes:

 *	The function number selects which function of a multi-function device 

 *	(e.g., SCSI and Ethernet).

 * 

 *	The register selects a DWORD (32 bit) register offset.  Hence it

 *	doesn't get shifted by 2 bits as we want to "drop" the bottom two

 *	bits.

 No parent means peer PCI bus. */

	/* We can invalidate up to 8 tlb entries in a go.  The flush

	/* For TBIA, it doesn't matter what value we write.  For TBI, 

 clear NXM... */

 ...and unlock NXS. */

 NXM_MACHINE_CHECKS_ON_TSUNAMI */

	/* This is for userland consumption.  For some reason, the 40-bit

	   PIO bias that we use in the kernel through KSEG didn't work for

	   the page table based user mappings.  So make sure we get the

	/*

	 * Save the existing PCI window translations.  SRM will 

	 * need them when we go to reboot.

	/*

	 * Set up the PCI to main memory translation windows.

	 *

	 * Note: Window 3 is scatter-gather only

	 * 

	 * Window 0 is scatter-gather 8MB at 8MB (for isa)

	 * Window 1 is scatter-gather (up to) 1GB at 1GB

	 * Window 2 is direct access 2GB at 2GB

	 *

	 * NOTE: we need the align_entry settings for Acer devices on ES40,

	 * specifically floppy and IDE when memory is larger than 2GB.

 Initially set for 4 PTEs, but will be overridden to 64K for ISA. */

 Tsunami caches 4 PTEs at a time */

 Enable the Monster Window to make DAC pci64 possible. */

	/* Ho hum.. init_arch is called before init_IRQ, but we need to be

	/* NXMs just don't matter to Tsunami--unless they make it

 NXM_MACHINE_CHECKS_ON_TSUNAMI */

 With multiple PCI busses, we play with I/O as physical addrs.  */

	/* Find how many hoses we have, and initialize them.  TSUNAMI

 Check for graphic console location (if any).  */

 TSUNAMI and TYPHOON can have 2, but might only have 1 (DS10) */

 Clear error before any reporting.  */

 magic */

 SPDX-License-Identifier: GPL-2.0

 Must be written twice */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/core_titan.c

 *

 * Code common to all TITAN core logic chips.

 Save Titan configuration data as the console had it set up.  */

/*

 * Is PChip 1 present? No need to query it more than once.

/*

 * BIOS32-style PCI interface:

/*

 * Routines to access TIG registers.

/*

 * Given a bus, device, and function number, compute resulting

 * configuration space address

 * accordingly.  It is therefore not safe to have concurrent

 * invocations to configuration space access routines, but there

 * really shouldn't be any need for this.

 *

 * Note that all config space accesses use Type 1 address format.

 *

 * Note also that type 1 is determined by non-zero bus number.

 *

 * Type 1:

 *

 *  3 3|3 3 2 2|2 2 2 2|2 2 2 2|1 1 1 1|1 1 1 1|1 1 

 *  3 2|1 0 9 8|7 6 5 4|3 2 1 0|9 8 7 6|5 4 3 2|1 0 9 8|7 6 5 4|3 2 1 0

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 * | | | | | | | | | | |B|B|B|B|B|B|B|B|D|D|D|D|D|F|F|F|R|R|R|R|R|R|0|1|

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *

 *	31:24	reserved

 *	23:16	bus number (8 bits = 128 possible buses)

 *	15:11	Device number (5 bits)

 *	10:8	function number

 *	 7:2	register number

 *  

 * Notes:

 *	The function number selects which function of a multi-function device 

 *	(e.g., SCSI and Ethernet).

 * 

 *	The register selects a DWORD (32 bit) register offset.  Hence it

 *	doesn't get shifted by 2 bits as we want to "drop" the bottom two

 *	bits.

 No parent means peer PCI bus. */

 Get the right hose.  */

	/* We can invalidate up to 8 tlb entries in a go.  The flush

	   matches against <31:16> in the pci address.  

	   Note that gtlbi* and atlbi* are in the same place in the g_port

	   and a_port, respectively, so the g_port offset can be used

	/* For TBIA, it doesn't matter what value we write.  For TBI, 

 set up APCTL */

	/*

	 * This is for userland consumption.  The 40-bit PIO bias that we 

	 * use in the kernel through KSEG doesn't work in the page table 

	 * based user mappings. (43-bit KSEG sign extends the physical

	 * address from bit 40 to hit the I/O bit - mapped addresses don't).

	 * So make sure we get the 43-bit PIO bias.  

	/*

	 * Save the existing PCI window translations.  SRM will 

	 * need them when we go to reboot.

	/*

	 * Set up the PCI to main memory translation windows.

	 *

	 * Note: Window 3 on Titan is Scatter-Gather ONLY.

	 *

	 * Window 0 is scatter-gather 8MB at 8MB (for isa)

	 * Window 1 is direct access 1GB at 2GB

	 * Window 2 is scatter-gather 1GB at 3GB

 64KB for ISA */

 Titan caches 4 PTEs at a time */

 Enable the Monster Window to make DAC pci64 possible.  */

	/*

	 * If it's an AGP port, initialize agplastwr.

 Init the ports in hose order... */

 hose 0 */

 hose 1 */

 hose 2 */

 hose 3 */

 With multiple PCI busses, we play with I/O as physical addrs.  */

 PCI DMA Direct Mapping is 1GB at 2GB.  */

 Init the PA chip(s).  */

 Check for graphic console location (if any).  */

/*

 * IO map support.

	/*

	 * Adjust the address and hose, if necessary.

	/*

	 * Find the hose.

	/*

	 * Is it direct-mapped?

	/* 

	 * Check the scatter-gather arena.

		/*

		 * Adjust the limits (mappings must be page aligned)

		/*

		 * Map it

 make it a true pfn */

 Assume a legacy (read: VGA) address, and return appropriately. */

/*

 * AGP GART Support.

 Side-Band Addressing? */

 AGP Rate? */

 1x */

 2x */

 4x */

 RQ Depth? */

	/*

	 * AGP Enable.

 Tell the user.  */

 Write it.  */

 And wait at least 5000 66MHz cycles (per Titan spec).  */

	/*

	 * Find the AGP port.

	/*

	 * Find the hose the port is on.

	/*

	 * Allocate the info structure.

	/*

	 * Fill it in.

	/*

	 * Aperture - not configured until ops.setup().

	 *

	 * FIXME - should we go ahead and allocate it here?

	/*

	 * Capabilities.

 2x, 1x */

 8 - 1 */

	/*

	 * Mode.

 RQ Depth? */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/err_ev6.c

 *

 *	Copyright (C) 2000 Jeff Wiedemeier (Compaq Computer Corporation)

 *

 *	Error handling code supporting Alpha systems

 both 6 and 7 indicate... */

 ...probe bc error.       */

 None right now. */

		/*

		 * Dump some additional information from the frame

 had decode -- downgrade print level for frame */

	/*

	 * Sync the processor

	/*

	 * Parse the logout frame without printing first. If the only error(s)

	 * found are have a disposition of "dismiss", then just dismiss them

	 * and don't print any message

		/*

		 * Either a nondismissable error was detected or no

		 * recognized error was detected  in the logout frame 

		 * -- report the error in either case

	/* 

	 * Release the logout frame 

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/pci.c

 *

 * Extruded from code written by

 *	Dave Rusling (david.rusling@reo.mts.dec.com)

 *	David Mosberger (davidm@cs.arizona.edu)

 2.3.x PCI/resources, 1999 Andrea Arcangeli <andrea@suse.de> */

/*

 * Nov 2000, Ivan Kokshaysky <ink@jurassic.park.msu.ru>

 *	     PCI-PCI bridges cleanup

/*

 * Some string constants used by the various core logics. 

/*

 * If PCI_PROBE_ONLY in pci_flags is set, we don't change any PCI resource

 * assignments.

/*

 * The PCI controller list.

/*

 * Quirks.

 The Notorious Cy82C693 chip.  */

	/* The generic legacy mode IDE fixup in drivers/pci/probe.c

	   doesn't work correctly with the Cypress IDE controller as

	/* The Cypress bridge responds on the PCI bus in the address range

	   0xffff0000-0xffffffff (conventional x86 BIOS ROM).  There is no

	   way to turn this off.  The bridge also supports several extended

	   BIOS ranges (disabled after power-up), and some consoles do turn

	   them on.  So if we use a large direct-map window, or a large SG

 Called for each device after PCI setup is done. */

/* Just declaring that the power-of-ten prefixes are actually the

 Make sure we start at our min on all hoses */

		/*

		 * Put everything into 0x00-0xff region modulo 0x400

 Make sure we start at our min on all hoses */

		/*

		 * The following holds at least for the Low Cost

		 * Alpha implementation of the PCI interface:

		 *

		 * In sparse memory address space, the first

		 * octant (16MB) of every 128MB segment is

		 * aliased to the very first 16 MB of the

		 * address space (i.e., it aliases the ISA

		 * memory address space).  Thus, we try to

		 * avoid allocating PCI devices in that range.

		 * Can be allocated in 2nd-7th octant only.

		 * Devices that need more than 112MB of

		 * address space must be accessed through

		 * dense memory space only!

 Align to multiple of size of minimum base.  */

 Store PCI device configuration left by SRM here. */

 No need to restore if probed only. */

 Restore SRM config. */

/*

 *  If we set up a device for bus mastering, we need to check the latency

 *  timer as certain firmware forgets to set it properly, as seen

 *  on SX164 and LX164 with SRM.

 Scan all of the recorded PCI controllers.  */

		/* Adjust hose mem_space limit to prevent PCI allocations

		/* Don't allow 8-bit bus number overflow inside the hose -

/* Provide information on locations of various I/O regions in physical

 from hose or from bus.devfn */

 Special hook for ISA access.  */

 Destroy an __iomem token.  Not copied from lib/iomap.c.  */

 FIXME: Some boxes have multiple ISA bridges! */

 SPDX-License-Identifier: GPL-2.0

/*

 * arch/alpha/kernel/pci-sysfs.c

 *

 * Copyright (C) 2009 Ivan Kokshaysky

 *

 * Alpha PCI resource files.

 *

 * Loosely based on generic HAVE_PCI_MMAP implementation in

 * drivers/pci/pci-sysfs.c

/**

 * pci_mmap_resource - map a PCI resource into user memory space

 * @kobj: kobject for mapping

 * @attr: struct bin_attribute for the file being mapped

 * @vma: struct vm_area_struct passed into the mmap

 * @sparse: address space type

 *

 * Use the bus mapping routines to map a PCI resource into userspace.

 *

 * Return: %0 on success, negative error code otherwise

/**

 * pci_remove_resource_files - cleanup resource files

 * @pdev: pci_dev to cleanup

 *

 * If we created resource files for @dev, remove them from sysfs and

 * free their resources.

	/* All core logic chips have 4G sparse address space, except

	   CIA which has 16G (see xxx_SPARSE_MEM and xxx_DENSE_MEM

	   definitions in asm/core_xxx.h files). This corresponds

 allocate attribute structure, piggyback attribute name */

 Assume bwx machine, normal resourceN files. */

 resourceN_dense */

 resourceN_dense */

 Create bwx, sparse or single dense file */

 Create dense file */

/**

 * pci_create_resource_files - create resource files in sysfs for @pdev

 * @pdev: pci_dev in question

 *

 * Walk the resources in @dev creating files for each resource available.

 *

 * Return: %0 on success, or negative error code

 Expose the PCI resources from this device as files */

 skip empty resources */

 Legacy I/O bus mapping stuff. */

/**

 * pci_adjust_legacy_attr - adjustment of legacy file attributes

 * @bus: bus to create files under

 * @mmap_type: I/O port or memory

 *

 * Adjust file name and size for sparse mappings.

 Legacy I/O bus read/write functions */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/core_lca.c

 *

 * Written by David Mosberger (davidm@cs.arizona.edu) with some code

 * taken from Dave Rusling's (david.rusling@reo.mts.dec.com) 32-bit

 * bios code.

 *

 * Code common to all LCA core logic chips.

/*

 * BIOS32-style PCI interface:

/*

 * Machine check reasons.  Defined according to PALcode sources

 * (osf.h and platform.h).

/*

 * Platform-specific machine-check reasons:

 all platforms so far */

 all platforms so far */

 all but Noname */

/*

 * Given a bus, device, and function number, compute resulting

 * configuration space address and setup the LCA_IOC_CONF register

 * accordingly.  It is therefore not safe to have concurrent

 * invocations to configuration space access routines, but there

 * really shouldn't be any need for this.

 *

 * Type 0:

 *

 *  3 3|3 3 2 2|2 2 2 2|2 2 2 2|1 1 1 1|1 1 1 1|1 1 

 *  3 2|1 0 9 8|7 6 5 4|3 2 1 0|9 8 7 6|5 4 3 2|1 0 9 8|7 6 5 4|3 2 1 0

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 * | | | | | | | | | | | | | | | | | | | | | | | |F|F|F|R|R|R|R|R|R|0|0|

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *

 *	31:11	Device select bit.

 * 	10:8	Function number

 * 	 7:2	Register number

 *

 * Type 1:

 *

 *  3 3|3 3 2 2|2 2 2 2|2 2 2 2|1 1 1 1|1 1 1 1|1 1 

 *  3 2|1 0 9 8|7 6 5 4|3 2 1 0|9 8 7 6|5 4 3 2|1 0 9 8|7 6 5 4|3 2 1 0

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 * | | | | | | | | | | |B|B|B|B|B|B|B|B|D|D|D|D|D|F|F|F|R|R|R|R|R|R|0|1|

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *

 *	31:24	reserved

 *	23:16	bus number (8 bits = 128 possible buses)

 *	15:11	Device number (5 bits)

 *	10:8	function number

 *	 7:2	register number

 *  

 * Notes:

 *	The function number selects which function of a multi-function device 

 *	(e.g., SCSI and Ethernet).

 * 

 *	The register selects a DWORD (32 bit) register offset.  Hence it

 *	doesn't get shifted by 2 bits as we want to "drop" the bottom two

 *	bits.

 Type 0 configuration cycle.  */

 Type 1 configuration cycle.  */

 Reset status register to avoid losing errors.  */

 Access configuration space.  */

 Reset error status.  */

 Reset machine check.  */

 avoid getting hit by machine check */

 Reset status register to avoid losing errors.  */

 Access configuration space.  */

 Reset error status.  */

 Reset machine check. */

	/*

	 * Create our single hose.

	/*

	 * Set up the PCI to main memory translation windows.

	 *

	 * Mimic the SRM settings for the direct-map window.

	 *   Window 0 is scatter-gather 8MB at 8MB (for isa).

	 *   Window 1 is direct access 1GB at 1GB.

	 *

	 * Note that we do not try to save any of the DMA window CSRs

	 * before setting them, since we cannot read those CSRs on LCA.

	/*

	 * Disable PCI parity for now.  The NCR53c810 chip has

	 * troubles meeting the PCI spec which results in

	 * data parity errors.

	/*

	 * Finally, set up for restoring the correct HAE if using SRM.

	 * Again, since we cannot read many of the CSRs on the LCA,

	 * one of which happens to be the HAE, we save the value that

	 * the SRM will expect...

/*

 * Constants used during machine-check handling.  I suppose these

 * could be moved into lca.h but I don't see much reason why anybody

 * else would want to use them.

 error address valid */

 correctable error */

 uncorrectable error */

 write-error */

 error source */

 cache-tag error */

 multiple soft errors */

 multiple hard errors */

 non-existent memory */

 ioc logs an error */

 reset machine check pending flag */

	/*

	 * The first quadword after the common header always seems to

	 * be the machine check reason---don't know why this isn't

	 * part of the common header instead.  In the case of a long

	 * logout frame, the upper 32 bits is the machine check

	 * revision level, which we ignore for now.

 Dump the logout area to give all info.  */

 CONFIG_VERBOSE_MCHECK */

/*

 * The following routines are needed to support the SPEED changing

 * necessary to successfully manage the thermal problem on the AlphaBook1.

 lca_norm_clock = divisor; */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/srmcons.c

 *

 * Callback based driver for SRM Console console device.

 * (TTY driver and console driver)

/* 

 * The TTY driver

 only support 1 console device */

 called with callback_lock held */

 called with callback_lock held */

		/* 

		 * Break it up into reasonable size chunks to allow a chance

		 * for input to get in

			/*

			 * Check for pending input iff a tty port was provided

 XXX proper refcounting */

 dynamic */

/*

 * The console driver

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_takara.c

 *

 *	Copyright (C) 1995 David A Rusling

 *	Copyright (C) 1996 Jay A Estabrook

 *	Copyright (C) 1998, 1999 Richard Henderson

 *

 * Code supporting the TAKARA.

 Note mask bit is true for DISABLED irqs.  */

	/*

	 * The PALcode will have passed us vectors 0x800 or 0x810,

	 * which are fairly arbitrary values and serve only to tell

	 * us whether an interrupt has come in on IRQ0 or IRQ1. If

	 * it's IRQ1 it's a PCI interrupt; if it's IRQ0, it's

	 * probably ISA, but PCI interrupts can come through IRQ0

	 * as well if the interrupt controller isn't in accelerated

	 * mode.

	 *

	 * OTOH, the accelerator thing doesn't seem to be working

	 * overly well, so what we'll do instead is try directly

	 * examining the Master Interrupt Register to see if it's a

	 * PCI interrupt, and if _not_ then we'll pass it on to the

	 * ISA handler.

		/*

		 * This is a PCI interrupt. Check each bit and

		 * despatch an interrupt if it's set.

 Return to non-accelerated mode.  */

 Enable the PCI interrupt register.  */

/*

 * The Takara has PCI devices 1, 2, and 3 configured to slots 20,

 * 19, and 18 respectively, in the default configuration. They can

 * also be jumpered to slots 8, 7, and 6 respectively, which is fun

 * because the SIO ISA bridge can also be slot 7. However, the SIO

 * doesn't explicitly generate PCI-type interrupts, so we can

 * assign it whatever the hell IRQ we like and it doesn't matter.

 slot  6 == device 3 */

 slot  7 == device 2 */

 slot  8 == device 1 */

 slot  9 == nothing */

 slot 10 == nothing */

 slot 11 == nothing */

 These are behind the bridges.  */

 slot 12 == nothing */

 slot 13 == nothing */

 slot 14 == nothing */

 slot 15 == nothing */

 slot 16 == nothing */

 slot 17= device 4 */

 slot 18= device 3 */

 slot 19= device 2 */

 slot 20= device 1 */

 Guess that we are behind a bridge.  */

 slot  6 == device 3 */

 slot  7 == device 2 */

 slot  8 == device 1 */

 slot  9 == nothing */

 slot 10 == nothing */

 slot 11 == nothing */

 slot 12 == nothing */

 slot 13 == nothing */

 slot 14 == nothing */

 slot 15 == nothing */

 slot 16 == nothing */

 slot 17 == nothing */

 slot 18 == device 3 */

 slot 19 == device 2 */

 slot 20 == device 1 */

 Check for built-in bridges.  */

 Must be a card-based bridge.  */

/*

 * The System Vector

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/core_apecs.c

 *

 * Rewritten for Apecs from the lca.c from:

 *

 * Written by David Mosberger (davidm@cs.arizona.edu) with some code

 * taken from Dave Rusling's (david.rusling@reo.mts.dec.com) 32-bit

 * bios code.

 *

 * Code common to all APECS core logic chips.

/*

 * NOTE: Herein lie back-to-back mb instructions.  They are magic. 

 * One plausible explanation is that the i/o controller does not properly

 * handle the system transaction.  Another involves timing.  Ho hum.

/*

 * BIOS32-style PCI interface:

/*

 * Given a bus, device, and function number, compute resulting

 * configuration space address and setup the APECS_HAXR2 register

 * accordingly.  It is therefore not safe to have concurrent

 * invocations to configuration space access routines, but there

 * really shouldn't be any need for this.

 *

 * Type 0:

 *

 *  3 3|3 3 2 2|2 2 2 2|2 2 2 2|1 1 1 1|1 1 1 1|1 1 

 *  3 2|1 0 9 8|7 6 5 4|3 2 1 0|9 8 7 6|5 4 3 2|1 0 9 8|7 6 5 4|3 2 1 0

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 * | | | | | | | | | | | | | | | | | | | | | | | |F|F|F|R|R|R|R|R|R|0|0|

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *

 *	31:11	Device select bit.

 * 	10:8	Function number

 * 	 7:2	Register number

 *

 * Type 1:

 *

 *  3 3|3 3 2 2|2 2 2 2|2 2 2 2|1 1 1 1|1 1 1 1|1 1 

 *  3 2|1 0 9 8|7 6 5 4|3 2 1 0|9 8 7 6|5 4 3 2|1 0 9 8|7 6 5 4|3 2 1 0

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 * | | | | | | | | | | |B|B|B|B|B|B|B|B|D|D|D|D|D|F|F|F|R|R|R|R|R|R|0|1|

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *

 *	31:24	reserved

 *	23:16	bus number (8 bits = 128 possible buses)

 *	15:11	Device number (5 bits)

 *	10:8	function number

 *	 7:2	register number

 *  

 * Notes:

 *	The function number selects which function of a multi-function device 

 *	(e.g., SCSI and Ethernet).

 * 

 *	The register selects a DWORD (32 bit) register offset.  Hence it

 *	doesn't get shifted by 2 bits as we want to "drop" the bottom two

 *	bits.

 type 0 configuration cycle: */

 type 1 configuration cycle: */

 avoid getting hit by machine check */

 Reset status register to avoid losing errors.  */

 If Type1 access, must set HAE #2. */

 Access configuration space.  */

 Some SRMs step on these registers during a machine check.  */

	/*

	 * david.rusling@reo.mts.dec.com.  This code is needed for the

	 * EB64+ as it does not generate a machine check (why I don't

	 * know).  When we build kernels for one particular platform

	 * then we can make this conditional on the type.

 Now look for any errors.  */

 Is any error bit set? */

 If not NDEV, print status.  */

 Reset error status.  */

 reset machine check */

 If Type1 access, must reset HAE #2 so normal IO space ops work.  */

 avoid getting hit by machine check */

 Reset status register to avoid losing errors.  */

 If Type1 access, must set HAE #2. */

 Access configuration space.  */

 magic */

	/*

	 * david.rusling@reo.mts.dec.com.  This code is needed for the

	 * EB64+ as it does not generate a machine check (why I don't

	 * know).  When we build kernels for one particular platform

	 * then we can make this conditional on the type.

 Now look for any errors.  */

 Is any error bit set? */

 If not NDEV, print status.  */

 Reset error status.  */

 reset machine check */

 If Type1 access, must reset HAE #2 so normal IO space ops work.  */

	/*

	 * Create our single hose.

	/*

	 * Set up the PCI to main memory translation windows.

	 *

	 * Window 1 is direct access 1GB at 1GB

	 * Window 2 is scatter-gather 8MB at 8MB (for isa)

	/*

	 * Finally, clear the HAXR2 register, which gets used

	 * for PCI Config Space accesses. That is the way

	 * we want to use it, and we do not want to depend on

	 * what ARC or SRM might have left behind...

 Clear the error before any reporting.  */

 magic */

 reset machine check pending flag */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/alpha/kernel/osf_sys.c

 *

 *  Copyright (C) 1995  Linus Torvalds

/*

 * This file handles some of the stranger OSF/1 system call interfaces.

 * Some of the system calls expect a non-C calling standard, others have

 * special parameter blocks..

/*

 * Brk needs to return an error.  Still support Linux's brk(0) query idiom,

 * which OSF programs just shouldn't be doing.  We're still not quite

 * identical to OSF as we don't return 0 on success, but doing otherwise

 * would require changes to libc.  Hopefully this is good enough.

/*

 * This is pure guess-work..

/*

 * OSF/1 directory handling functions...

 *

 * The "getdents()" interface is much more sane: the "basep" stuff is

 * braindamage (it can't really handle filesystems where the directory

 * offset differences aren't the same as "d_reclen").

 only used if we fail */

/*

 * The OSF/1 statfs structure is much larger, but this should

 * match the beginning, at least.

 mount flags */

/*

 * Uhh.. OSF/1 mount parameters aren't exactly obvious..

 *

 * Although to be frank, neither are the native Linux/i386 ones..

	/* This has lots more here, which Linux handles with the option block

/*

 * We can't actually handle ufs yet, so we translate UFS mounts to

 * ext2fs mounts. I wouldn't mind a UFS filesystem, but the UFS

 * layout is so braindead it's a major headache doing it.

 *

 * Just how long ago was it written? OTOH our UFS driver may be still

 * unhappy with OSF UFS. [CHECKME]

/*

 * For compatibility with OSF/1 only.  Use utsname(2) instead.

/*

 * The following stuff should move into a header file should it ever

 * be labeled "officially supported."  Right now, there is just enough

 * support to avoid applications (such as tar) printing error

 * messages.  The attributes are not really implemented.

/*

 * Values for Property list entry flag

#define PLE_PROPAGATE_ON_COPY		0x1	/* cp(1) will copy entry

 Valid flag values */

 All flag value */

		/* If the current stack was set with sigaltstack, don't

		/* Since we don't know the extent of the stack, and we don't

		   track onstack-ness, but rather calculate it, we must 

 instruction set architecture */

 hardware serial number */

 hardware manufacturer */

 secure RPC domain */

 Digital UNIX has a few unpublished interfaces here */

 Return current software fp control & status bits.  */

 Note that DU doesn't verify available space here.  */

		/*

		 * Not sure anybody will ever use this weird stuff.  These

		 * ops can be used (under OSF/1) to set the fpcr that should

		 * be used when a signal handler starts executing.

		/* 

		 * Alpha Architecture Handbook 4.7.7.3:

		 * To be fully IEEE compiant, we must track the current IEEE

		 * exception state in software, because spurious bits can be

		 * set in the trap shadow of a software-complete insn.

 Update software trap enable bits.  */

 Update the real fpcr.  */

 Update software trap enable bits.  */

 Update the real fpcr.  */

 		/* If any exceptions set by this call, and are unmasked,

 FIXME */

		/*

		 * Not sure anybody will ever use this weird stuff.  These

		 * ops can be used (under OSF/1) to set the fpcr that should

		 * be used when a signal handler starts executing.

/* Translations due to the fact that OSF's time_t is an int.  Which

 OSF does not copy back the remaining time.  */

 user time used */

 system time used */

 maximum resident set size */

 integral shared memory size */

 integral unshared data size */

 integral unshared stack size */

 page reclaims */

 page faults */

 swaps */

 block input operations */

 block output operations */

 messages sent */

 messages received */

 signals received */

 voluntary context switches */

 involuntary " */

/*

 * I don't know what the parameters are: the first one

 * seems to be a timeval pointer, and I suspect the second

 * one is the time remaining.. Ho humm.. No documentation.

 mode selector */

 time offset (usec) */

 frequency offset (scaled ppm) */

 maximum error (usec) */

 estimated error (usec) */

 clock command/status */

 pll time constant */

 clock precision (usec) (read only) */

	long tolerance;		/* clock frequency tolerance (ppm)

				 * (read only)

 (read only) */

 (modified) usecs between clock ticks */

 pps frequency (scaled ppm) (ro) */

 pps jitter (us) (ro) */

 interval duration (s) (shift) (ro) */

 pps stability (scaled ppm) (ro) */

 jitter limit exceeded (ro) */

 calibration intervals (ro) */

 calibration errors (ro) */

 stability limit exceeded (ro) */

 copy relevant bits of struct timex. */

 copy back to timex32 */

/* Get an address range which is currently unmapped.  Similar to the

 "32 bit" actually means 31 bit, since pointers sign extend.  */

	/* First, see if the given suggestion fits.



	   The OSF/1 loader (/sbin/loader) relies on us returning an

	   address larger than the requested if one exists, which is

	   a terribly broken way to program.



	   That said, I can see the use in being able to suggest not

	   merely specific addresses, but regions of memory -- perhaps

 Next, try allocating at TASK_UNMAPPED_BASE.  */

 Finally, try allocating in low memory.  */

/* Clear top 32 bits of iov_len in the user's buffer for

   compatibility with old versions of OSF/1 where iov_len

		/* Return value is the unbiased priority, i.e. 20 - prio.

		   This does result in negative return values, so signal

 The return values are in $0 and $20.  */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/err_marvel.c

 *

 *	Copyright (C) 2001 Jeff Wiedemeier (Compaq Computer Corporation)

 *

 CONFIG_VERBOSE_MCHECK */

 ERR_CYC + ODD_FLT + EVN_FLT */

 ERR_CYC + ODD_FLT... */

 ... + EVN_FLT        */

	/*

	 * Single bit errors aren't covered by ERR_VALID.

	/*

	 * Neither are the interrupt status bits

	/*

	 * Everything else is valid only with ERR_VALID, so skip to the end

	 * (uncrr_sym check) unless ERR_VALID is set.

	/*

	 * Since ERR_VALID is set, VICTIM_SP in uncrr_sym is valid.

	 * For bits [29:0] to also be valid, the following bits must

	 * not be set:

	 *	CR_PIO_WBYTE	CR_CSR_NXM	CR_RSP_NXM

	 *	CR_ERR_RESP	MAF_TO

	/*

	 * The black hole events.

	/*

	 * If there are any valid bits in UNCRR sym for this err, 

	 * print UNCRR_SYM as well.

	/*

	 * First the transaction summary errors

	/*

	 * POx_TRANS_SUM, if appropriate.

	/*

	 * Then TLB_ERR.

	/*

	 * And the single bit status errors.

 CONFIG_VERBOSE_MCHECK */

	/*

	 * Caller must provide the packet to fill

	/*

	 * Fill the subpacket with the console's standard fill pattern

		/*

		 * Is there at least one error? 

	/*

	 * Did we find an IO7 with an error?

	/*

	 * We have an IO7 with an error. 

	 *

	 * Fill in the IO subpacket.

		/*

		 * Ack this port's errors, if any. POx_ERR_SUM must be last.

		 *

		 * Most of the error registers get cleared and unlocked when

		 * the associated bits in POx_ERR_SUM are cleared (by writing

		 * 1). POx_TLB_ERR is an exception and must be explicitly 

		 * cleared.

	/*

	 * Ack any port 7 error(s).

	/*

	 * Correct the io7_pid.

 CONFIG_VERBOSE_MCHECK */

	/*

	 * The PALcode only builds an IO subpacket if there is a 

	 * locally connected IO7. In the cases of

	 *	1) a uniprocessor kernel

	 *	2) an mp kernel before the local secondary has called in

	 * error interrupts are all directed to the primary processor.

	 * In that case, we may not have an IO subpacket at all and, event

	 * if we do, it may not be the right now. 

	 *

	 * If the RBOX indicates an I/O error interrupt, make sure we have

	 * the correct IO7 information. If we don't have an IO subpacket

	 * or it's the wrong one, try to find the right one.

	 *

	 * RBOX I/O error interrupts are indicated by RBOX_INT<29> and

	 * RBOX_INT<10>.

		/*

		 * Either we have no IO subpacket or no error is

		 * indicated in the one we do have. Try find the

		 * one with the error.

	/*

	 * We have an IO7 indicating an error - we're going to report it

	/*

	 * Check port 7 first

	/*

	 * Then loop through the ports

 CONFIG_VERBOSE_MCHECK */

	/*

	 * I/O error? 

	/*

	 * Probing behind PCI-X bridges can cause machine checks on

	 * Marvel when the probe is handled by the bridge as a split

	 * completion transaction. The symptom is an ERROR_RESPONSE 

	 * to a CONFIG address. Since these errors will happen in

	 * normal operation, dismiss them.

	 *

	 * Dismiss if:

	 *	C_STAT		= 0x14 		(Error Response)

	 *	C_STS<3>	= 0    		(C_ADDR valid)

	 *	C_ADDR<42>	= 1    		(I/O)

	 *	C_ADDR<31:22>	= 111110xxb	(PCI Config space)

	/*

	 * Sync the processor

 Don't know it - pass it up.  */

	/*

	 * A system event or error has occurred, handle it here.

	 *

	 * Any errors in the logout frame have already been cleared by the

	 * PALcode, so just parse it.

	/* 

	 * Parse the logout frame without printing first. If the only error(s)

	 * found are classified as "dismissable", then just dismiss them and

	 * don't print any message

		/*

		 * We might not have the correct (or any) I/O subpacket.

		 * [ See marvel_process_io_error() for explanation. ]

		 * If we don't have one, point the io subpacket in

		 * lf_subpackets at scratch_io_packet so that 

		 * marvel_find_io7_with_error() will have someplace to

		 * store the info.

		/*

		 * Default io_pid to the processor reporting the error

		 * [this will get changed in marvel_find_io7_with_error()

		 * if a different one is needed]

		/*

		 * Evaluate the frames.

 Nothing to do. */

 Recognized error, report it. */

 Unknown - dump the annotated subpackets. */

 Release the logout frame.  */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_alcor.c

 *

 *	Copyright (C) 1995 David A Rusling

 *	Copyright (C) 1996 Jay A Estabrook

 *	Copyright (C) 1998, 1999 Richard Henderson

 *

 * Code supporting the ALCOR and XLT (XL-300/366/433).

 Note mask bit is true for ENABLED irqs.  */

 On ALCOR/XLT, need to dismiss interrupt via GRU. */

 On ALCOR/XLT, need to dismiss interrupt via GRU. */

 Read the interrupt summary register of the GRU */

	/*

	 * Now for every possible bit set, work through them and call

	 * the appropriate interrupt handler.

 clear least bit set */

 all disabled */

 all are level */

 ISA only HI */

 all clear */

		/* On Alcor, at least, lines 20..30 are not connected

		   and can generate spurious interrupts if we turn them

/*

 * PCI Fixup configuration.

 *

 * Summary @ GRU_INT_REQ:

 * Bit      Meaning

 * 0        Interrupt Line A from slot 2

 * 1        Interrupt Line B from slot 2

 * 2        Interrupt Line C from slot 2

 * 3        Interrupt Line D from slot 2

 * 4        Interrupt Line A from slot 1

 * 5        Interrupt line B from slot 1

 * 6        Interrupt Line C from slot 1

 * 7        Interrupt Line D from slot 1

 * 8        Interrupt Line A from slot 0

 * 9        Interrupt Line B from slot 0

 *10        Interrupt Line C from slot 0

 *11        Interrupt Line D from slot 0

 *12        Interrupt Line A from slot 4

 *13        Interrupt Line B from slot 4

 *14        Interrupt Line C from slot 4

 *15        Interrupt Line D from slot 4

 *16        Interrupt Line D from slot 3

 *17        Interrupt Line D from slot 3

 *18        Interrupt Line D from slot 3

 *19        Interrupt Line D from slot 3

 *20-30     Reserved

 *31        EISA interrupt

 *

 * The device to slot mapping looks like:

 *

 * Slot     Device

 *  6       built-in TULIP (XLT only)

 *  7       PCI on board slot 0

 *  8       PCI on board slot 3

 *  9       PCI on board slot 4

 * 10       PCEB (PCI-EISA bridge)

 * 11       PCI on board slot 2

 * 12       PCI on board slot 1

 *   

 *

 * This two layered interrupt approach means that we allocate IRQ 16 and 

 * above for PCI interrupts.  The IRQ relates to which bit the interrupt

 * comes in on.  This makes interrupt processing much easier.

INT    INTA   INTB   INTC   INTD */

 note: IDSEL 17 is XLT only */

 IdSel 17,  TULIP  */

 IdSel 18,  slot 0 */

 IdSel 19,  slot 3 */

 IdSel 20,  slot 4 */

 IdSel 21,  PCEB   */

 IdSel 22,  slot 2 */

 IdSel 23,  slot 1 */

 Who said DEC engineer's have no sense of humor? ;-)  */

	/*

	 * Now we can look to see if we are really running on an XLT-type

	 * motherboard, by looking for a 21040 TULIP in slot 6, which is

	 * built into XLT and BRET/MAVERICK, but not available on ALCOR.

/*

 * The System Vectors

/* No alpha_mv alias for XLT, since we compile it in unconditionally

 SPDX-License-Identifier: GPL-2.0

/*

 * Hardware performance events for the Alpha.

 *

 * We implement HW counts on the EV67 and subsequent CPUs only.

 *

 * (C) 2010 Michael J. Cree

 *

 * Somewhat based on the Sparc code, and to a lesser extent the PowerPC and

 * ARM code, which are copyright by their respective authors.

 The maximum number of PMCs on any Alpha CPU whatsoever. */

 For tracking PMCs and the hw events they monitor on each CPU. */

 Number of events scheduled; also number entries valid in arrays below. */

 Number events added since last hw_perf_disable(). */

 Events currently scheduled. */

 Event type of each scheduled event. */

	/* Current index of each scheduled event; if not yet determined

	 * contains PMC_NO_INDEX.

 The active PMCs' config for easy use with wrperfmon(). */

 The active counters' indices for easy use with wrperfmon(). */

/*

 * A structure to hold the description of the PMCs available on a particular

 * type of Alpha CPU.

 Mapping of the perf system hw event types to indigenous event types */

 The number of entries in the event_map */

 The number of PMCs on this Alpha */

	/*

	 * All PMC counters reside in the IBOX register PCTR.  This is the

	 * LSB of the counter.

	/*

	 * The mask that isolates the PMC bits when the LSB of the counter

	 * is shifted to bit 0.

 The maximum period the PMC can count. */

	/*

	 * The maximum value that may be written to the counter due to

	 * hardware restrictions is pmc_max_period - pmc_left.

 Subroutine for allocation of PMCs.  Enforces constraints. */

 Subroutine for checking validity of a raw event for this PMU. */

/*

 * The Alpha CPU PMU description currently in operation.  This is set during

 * the boot process to the specific CPU of the machine.

/*

 * The hardware description of the EV67, EV68, EV69, EV7 and EV79 PMUs

 * follow. Since they are identical we refer to them collectively as the

 * EV67 henceforth.

/*

 * EV67 PMC event types

 *

 * There is no one-to-one mapping of the possible hw event types to the

 * actual codes that are used to program the PMCs hence we introduce our

 * own hw event type identifiers.

 Mapping of the hw event types to the perf tool interface */

/*

 * The mapping used for one event only - these must be in same order as enum

 * ev67_pmc_event_type definition.

 EV67_CYCLES, */

 EV67_INSTRUCTIONS */

 EV67_BCACHEMISS */

 EV67_MBOXREPLAY */

/*

 * Check that a group of events can be simultaneously scheduled on to the

 * EV67 PMU.  Also allocate counter indices and config.

 MBOX replay traps must be on PMC 1 */

 Only cycles can accompany MBOX replay traps */

 Bcache misses must be on PMC 1 */

 Only instructions can accompany Bcache misses */

 Instructions must be on PMC 0 */

 By this point only cycles can accompany instructions */

 Otherwise, darn it, there is a conflict.  */

/*

 * Helper routines to ensure that we read/write only the correct PMC bits

 * when calling the wrperfmon PALcall.

 Set a new period to sample over */

	/*

	 * Hardware restrictions require that the counters must not be

	 * written with values that are too close to the maximum period.

/*

 * Calculates the count (the 'delta') since the last time the PMC was read.

 *

 * As the PMCs' full period can easily be exceeded within the perf system

 * sampling period we cannot use any high order bits as a guard bit in the

 * PMCs to detect overflow as is done by other architectures.  The code here

 * calculates the delta on the basis that there is no overflow when ovf is

 * zero.  The value passed via ovf by the interrupt handler corrects for

 * overflow.

 *

 * This can be racey on rare occasions -- a call to this routine can occur

 * with an overflowed counter just before the PMI service routine is called.

 * The check for delta negative hopefully always rectifies this situation.

	/* It is possible on very rare occasions that the PMC has overflowed

	 * but the interrupt is yet to come.  Detect and fix this situation.

/*

 * Collect all HW events into the array event[].

/*

 * Check that a group of events can be simultaneously scheduled on to the PMU.

 No HW events is possible from hw_perf_group_sched_in(). */

/*

 * If new events have been scheduled then update cpuc with the new

 * configuration.  This may involve shifting cycle counts from one PMC to

 * another.

 Find counters that are moving to another PMC and update */

 Assign to counters all unassigned events. */

/* Schedule perf HW event on to PMU.

 *  - this function is called from outside this module via the pmu struct

 *    returned from perf event initialisation.

	/*

	 * The Sparc code has the IRQ disable first followed by the perf

	 * disable, however this can lead to an overflowed counter with the

	 * PMI disabled on rare occasions.  The alpha_perf_event_update()

	 * routine should detect this situation by noting a negative delta,

	 * nevertheless we disable the PMCs first to enable a potential

	 * final PMI to occur before we disable interrupts.

 Default to error to be returned */

 Insert event on to PMU and if successful modify ret to valid return */

/* Disable performance monitoring unit

 *  - this function is called from outside this module via the pmu struct

 *    returned from perf event initialisation.

			/* Shift remaining entries down into the existing

			 * slot.

 Absorb the final count and turn off the event. */

/*

 * Check that CPU performance counters are supported.

 * - currently support EV67 and later CPUs.

 * - actually some later revisions of the EV6 have the same PMC model as the

 *     EV67 but we don't do sufficiently deep CPU detection to detect them.

 *     Bad luck to the very few people who might have one, I guess.

 Get cpu type from HW */

 Include all of EV67, EV68, EV7, EV79 and EV69 as supported. */

 Nothing to be done! */

	/* We only support a limited range of HARDWARE event types with one

	 * only programmable via a RAW event type.

	/*

	 * We place the event type in event_base here and leave calculation

	 * of the codes to programme the PMU for alpha_pmu_enable() because

	 * it is only then we will know what HW events are actually

	 * scheduled on to the PMU.  At that point the code to programme the

	 * PMU is put into config_base and the PMC to use is placed into

	 * idx.  We initialise idx (below) to PMC_NO_INDEX to indicate that

	 * it is yet to be determined.

	/* Collect events in a group together suitable for calling

	 * alpha_check_constraints() to verify that the group as a whole can

	 * be scheduled on to the PMU.

 Indicate that PMU config and idx are yet to be determined. */

	/*

	 * Most architectures reserve the PMU for their use at this point.

	 * As there is no existing mechanism to arbitrate usage and there

	 * appears to be no other user of the Alpha PMU we just assume

	 * that we can just use it, hence a NO-OP here.

	 *

	 * Maybe an alpha_reserve_pmu() routine should be implemented but is

	 * anything else ever going to use it?

/*

 * Main entry point to initialise a HW performance event.

 does not support taken branch sampling */

 Do the real initialisation work. */

/*

 * Main entry point - enable HW performance counters.

 Update cpuc with information from any new scheduled events. */

 Start counting the desired events. */

/*

 * Main entry point - disable HW performance counters.

/*

 * Main entry point - don't know when this is called but it

 * obviously dumps debug info.

/*

 * Performance Monitoring Interrupt Service Routine called when a PMC

 * overflows.  The PMC that overflowed is passed in la_ptr.

	/* Completely counting through the PMC's period to trigger a new PMC

	 * overflow interrupt while in this interrupt routine is utterly

	 * disastrous!  The EV6 and EV67 counters are sufficiently large to

	 * prevent this but to be really sure disable the PMCs.

 la_ptr is the counter that overflowed. */

 This should never occur! */

 This can occur if the event is disabled right on a PMC overflow. */

 This should never occur! */

			/* Interrupts coming too quickly; "throttle" the

			 * counter, i.e., disable it for a little while.

/*

 * Init call to initialise performance events at kernel startup.

 Override performance counter IRQ vector */

 And set up PMU specification */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_rawhide.c

 *

 *	Copyright (C) 1995 David A Rusling

 *	Copyright (C) 1996 Jay A Estabrook

 *	Copyright (C) 1998, 1999 Richard Henderson

 *

 * Code supporting the RAWHIDE.

/*

 * HACK ALERT! only the boot cpu is used for interrupts.

 Note mask bit is true for ENABLED irqs.  */

 if hose non-existent, exit */

 if hose non-existent, exit */

 if hose non-existent, exit */

 Clear the interrupt.  */

        /*

         * The RAWHIDE SRM console reports PCI interrupts with a vector

	 * 0x80 *higher* than one might expect, as PCI IRQ 0 (ie bit 0)

	 * shows up as IRQ 24, etc, etc. We adjust it down by 8 to have

	 * it line up with the actual bit numbers from the REQ registers,

	 * which is how we manage the interrupts/mask. Sigh...

	 *

	 * Also, PCI #1 interrupts are offset some more... :-(

 SCSI on PCI1 is special.  */

 Adjust by which hose it is from.  */

 Clear them all; only hoses that exist will be non-zero. */

/*

 * PCI Fixup configuration.

 *

 * Summary @ MCPCIA_PCI0_INT_REQ:

 * Bit      Meaning

 * 0        Interrupt Line A from slot 2 PCI0

 * 1        Interrupt Line B from slot 2 PCI0

 * 2        Interrupt Line C from slot 2 PCI0

 * 3        Interrupt Line D from slot 2 PCI0

 * 4        Interrupt Line A from slot 3 PCI0

 * 5        Interrupt Line B from slot 3 PCI0

 * 6        Interrupt Line C from slot 3 PCI0

 * 7        Interrupt Line D from slot 3 PCI0

 * 8        Interrupt Line A from slot 4 PCI0

 * 9        Interrupt Line B from slot 4 PCI0

 * 10       Interrupt Line C from slot 4 PCI0

 * 11       Interrupt Line D from slot 4 PCI0

 * 12       Interrupt Line A from slot 5 PCI0

 * 13       Interrupt Line B from slot 5 PCI0

 * 14       Interrupt Line C from slot 5 PCI0

 * 15       Interrupt Line D from slot 5 PCI0

 * 16       EISA interrupt (PCI 0) or SCSI interrupt (PCI 1)

 * 17-23    NA

 *

 * IdSel	

 *   1	 EISA bridge (PCI bus 0 only)

 *   2 	 PCI option slot 2

 *   3	 PCI option slot 3

 *   4   PCI option slot 4

 *   5   PCI option slot 5

 * 

INT    INTA   INTB   INTC   INTD */

 IdSel 1 SCSI PCI 1 */

 IdSel 2 slot 2 */

 IdSel 3 slot 3 */

 IdSel 4 slot 4 */

 IdSel 5 slot 5 */

/*

 * The System Vector

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/pci_iommu.c

/* Return the minimum of MAX or the first power of two larger

	/* Note that the TLB lookup logic uses bitwise concatenation,

	   not addition, so the required arena alignment is based on

	   the size of the window.  Retain the align parameter so that

	/* Align allocations to a multiple of a page size.  Not needed

 Must be called with the arena lock held */

 Search forward for the first mask-aligned sequence of N free ptes */

			/*

			 * Reached the end.  Flush the TLB and restart

			 * the search from the beginning.

	/* Success. It's the responsibility of the caller to mark them

 Search for N empty ptes */

	/* Success.  Mark them all in use, ie not zero and invalid

	   for the iommu tlb that could load them from under us.

	   The chip specific bits will fill this in with something

/*

 * True if the machine supports DAC addressing, and DEV can

 * make use of it given MASK.

 If this is not set, the machine doesn't support DAC at all.  */

 The device has to be able to address our DAC bit.  */

 If both conditions above are met, we are fine. */

/* Map a single buffer of the indicated size for PCI DMA in streaming

   mode.  The 32-bit PCI bus mastering address to use is returned.

   Once the device is given the dma address, the device owns this memory

 First check to see if we can use the direct map window.  */

 Next, use DAC if selected earlier.  */

	/* If the machine doesn't define a pci_tbi routine, we have to

	   assume it doesn't support sg mapping, and, since we tried to

 Force allocation to 64KB boundary for ISA bridges. */

 Helper for generic DMA-mapping functions. */

	/* Assume that non-PCI devices asking for DMA are either ISA or EISA,

	/* Assume non-busmaster ISA DMA when dma_mask is not set (the ISA

	/* For EISA bus masters, return isa_bridge (it might have smaller

 This assumes ISA bus master with dma_mask 0xffffff. */

/* Unmap a single streaming mode DMA translation.  The DMA_ADDR and

   SIZE must match what was provided for in a previous pci_map_single

   call.  All other usages are undefined.  After this call, reads by

   the cpu to the buffer are guaranteed to see whatever the device

 Nothing to do.  */

        /* If we're freeing ptes above the `next_entry' pointer (they

           may have snuck back into the TLB since the last wrap flush),

/* Allocate and map kernel buffer using consistent mode DMA for PCI

   device.  Returns non-NULL cpu-view pointer to the buffer if

   successful and sets *DMA_ADDRP to the pci side dma address as well,

		/* ??? Really atomic allocation?  Otherwise we could play

		/* The address doesn't fit required mask and we

/* Free and unmap a consistent DMA buffer.  CPU_ADDR and DMA_ADDR must

   be values that were returned from pci_alloc_consistent.  SIZE must

   be the same as what as passed into pci_alloc_consistent.

   References to the memory and mappings associated with CPU_ADDR or

/* Classify the elements of the scatterlist.  Write dma_address

   of each element with:

	0   : Followers all physically adjacent.

	1   : Followers all virtually adjacent.

	-1  : Not leader, physically adjacent to previous.

	-2  : Not leader, virtually adjacent to previous.

   Write dma_length of each leader with the combined lengths of

 we will not marge sg without device. */

/* Given a scatterlist leader, choose an allocation method and fill

	/* If everything is physically contiguous, and the addresses

 If physically contiguous and DAC is available, use it.  */

	/* Otherwise, we'll use the iommu to make the pages virtually

 If we attempted a direct map above but failed, die.  */

		/* Otherwise, break up the remaining virtually contiguous

	/* All virtually contiguous.  We need to find the length of each

 Fast path single entry scatterlists.  */

 First, prepare information about the entries.  */

 Second, figure out where we're going to map things.  */

	/* Third, iterate over the scatterlist leaders and allocate

 Mark the end of the list for pci_unmap_sg.  */

	/* Some allocation failed while mapping the scatterlist

/* Unmap a set of streaming mode DMA translations.  Again, cpu read

   rules concerning calls here are the same as for pci_unmap_single()

 It's a DAC address -- nothing to do.  */

 Nothing to do.  */

        /* If we're freeing ptes above the `next_entry' pointer (they

           may have snuck back into the TLB since the last wrap flush),

/* Return whether the given PCI device DMA address mask can be

	/* If there exists a direct map, and the mask fits either

	   the entire direct mapped space or the total system memory as

 Check that we have a scatter-gather arena that fits.  */

 As last resort try ZONE_DMA.  */

/*

 * AGP GART extensions to the IOMMU

 Search for N empty ptes.  */

	/* Success.  Mark them all reserved (ie not zero and invalid)

	   for the iommu tlb that could load them from under us.

 Make sure they're all reserved first... */

 SPDX-License-Identifier: GPL-2.0

/*

 * SMC 37C93X initialization code

 device "activate" register contents */

 configuration on/off keys */

 configuration space device definitions */

 Chip register offsets from base */

 KYBD/MOUS only */

 FDC/PARP only */

 values that we read back that are expected ... */

 default device addresses */

 unsigned char devRev = */ inb(dataPort);

 Primary interrupt select */

 Secondary interrupt select */

 Enable burst mode */

 Primary interrupt select */

 DMA channel select */

		/* On PC164, IDE on the SMC is not enabled;

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/smp.c

 *

 *      2001-07-09 Phil Ezolt (Phillip.Ezolt@compaq.com)

 *            Renamed modified smp_call_function to smp_call_function_on_cpu()

 *            Created an function that conforms to the old calling convention

 *            of smp_call_function().

 *

 *            This is helpful for DCPI.

 *

 A collection of per-processor data.  */

 A collection of single bit ipi messages.  */

 Set to a secondary's cpuid when it comes online.  */

 Internal processor count */

 Number that came online.  */

/*

 * Called by both boot and secondaries to move global data into

 *  per-processor storage.

/*

 * Ideally sets up per-cpu profiling hooks.  Doesn't do much now...

/*

 * Where secondaries begin a life of C.

 Turn on machine checks.  */

 Set trap vectors.  */

 Set interrupt vector.  */

 Get our local ticker going. */

 Call platform-specific callin, if specified */

 All kernel threads share the same mm context.  */

 inform the notifiers about the new cpu */

 Must have completely accurate bogos.  */

	/* Wait boot CPU to stop with irq enabled before running

 Allow master to continue only after we written loops_per_jiffy.  */

 Wait until hwrpb->txrdy is clear for cpu.  Return -1 on timeout.  */

/*

 * Send a message to a secondary's console.  "START" is one such

 * interesting message.  ;-)

 atomic test and set */

/*

 * A secondary console wants to send a message.  Receive it.

/*

 * Convince the console to have a secondary cpu begin execution.

	/* Initialize the CPU's HWPCB to something just good enough for

	   us to get started.  Immediately after starting, we'll swpctx

	   to the target idle task's pcb.  Reuse the stack in the mean

 Setup HWRPB fields that SRM uses to activate secondary CPU */

 Recalculate and update the HWRPB checksum */

	/*

	 * Send a "start" command to the specified processor.

 SRM III 3.4.1.3 */

 turn on Context Valid and Restart Capable */

 turn off Bootstrap In Progress */

 Wait 10 seconds for an ACK from the console.  */

/*

 * Bring one cpu online.

 Signal the secondary to wait a moment.  */

 Whirrr, whirrr, whirrrrrrrrr... */

 Notify the secondary CPU it can run calibrate_delay.  */

	/* We've been acked by the console; wait one second for

 We failed to boot the CPU.  */

 Another "Red Snapper". */

/*

 * Called from setup_arch.  Detect an SMP system and which processors

 * are present.

/*

 * Called by smp_init prepare the secondaries

 Take care of some initial bookkeeping.  */

 Nothing to do on a UP box, or when told not to.  */

 Order interrupt and bit testing. */

 Order bit clearing and data access. */

 Order data access and bit testing. */

 Must wait other processors to flush their icache before continue. */

	/* Although we don't have any data to pass, we do want to

 On the Alpha we always flush the whole user tlb.  */

 Include all of EV6, EV67, EV68, EV7, EV79 and EV69. */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/es1888.c

 *

 * Init the built-in ES1888 sound chip (SB16 compatible)

 Sequence of IO reads to init the audio controller */

 This sets the base address to 0x220 */

 Sequence to set DMA channels */

 reset */

 pause */

 release reset */

 wait for bit 7 to assert*/

 pause */

 enable extended mode */

 pause, also forces the write */

 wait for bit 7 to deassert */

 setup for write to Interrupt CR */

 wait for bit 7 to deassert */

 set IRQ 5 */

 wait for bit 7 to deassert */

 setup for write to DMA CR */

 wait for bit 7 to deassert */

 set DMA channel 1 */

 force the write */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/alpha/kernel/signal.c

 *

 *  Copyright (C) 1995  Linus Torvalds

 *

 *  1997-11-02  Modified for POSIX.1b signals by Richard Henderson

/*

 * The OSF/1 sigprocmask calling sequence is different from the

 * C sigprocmask() sequence..

 XXX: Don't preclude handling different sized sigset_t's.  */

/*

 * Do a signal return; undo the signal stack.

/* If this changes, userland unwinders that Know Things about our signal

   frame will break.  Do not undertake lightly.  It also implies an ABI

/* Note that this syscall is also used by setcontext(3) to install

   a given sigcontext.  This because it's impossible to set *all*

 Verify that it's a good sigcontext before using it */

 Send SIGTRAP if we're single-stepping: */

 Verify that it's a good ucontext_t before using it */

 Send SIGTRAP if we're single-stepping: */

/*

 * Set up a signal frame.

	/* Set up to return from userspace.  If provided, use a stub

 Check that everything was written properly.  */

 "Return" to the handler */

 a0: signal number */

 a1: exception code */

 a2: sigcontext pointer */

 Create the ucontext.  */

	/* Set up to return from userspace.  If provided, use a stub

 "Return" to the handler */

 a0: signal number */

 a1: siginfo pointer */

 a2: ucontext pointer */

/*

 * OK, we're invoking a handler.

 reset v0 and a3 and replay syscall */

/*

 * Note that 'init' is a special process: it doesn't get signals it doesn't

 * want to handle. Thus you cannot kill init even with a SIGKILL even by

 * mistake.

 *

 * Note that we go through the signals twice: once to check the signals that

 * the kernel can handle, and then we build all the user-level signal handling

 * stack-frames in one go after that.

 *

 * "r0" and "r19" are the registers we need to restore for system call

 * restart. "r0" is also used as an indicator whether we can restart at

 * all (if we get here from anything but a syscall return, it will be 0)

 This lets the debugger run, ... */

 ... so re-check the single stepping. */

 Whee!  Actually deliver the signal.  */

 Reset v0 and a3 and replay syscall.  */

 Set v0 to the restart_syscall and replay */

 re-set breakpoint */

 SPDX-License-Identifier: GPL-2.0

 ptrace.c */

 By Ross Biro 1/23/92 */

 edited by Linus Torvalds */

 mangled further by Bob Manson (manson@santafe.edu) */

 more mutilation by David Mosberger (davidm@azstarnet.com) */

 call_pal bpt */

/*

 * does not yet catch signals sent when the child dies.

 * in exit.c or in signal.c.

/*

 * Processes always block with the following stack-layout:

 *

 *  +================================+ <---- task + 2*PAGE_SIZE

 *  | PALcode saved frame (ps, pc,   | ^

 *  | gp, a0, a1, a2)		     | |

 *  +================================+ | struct pt_regs

 *  |	        		     | |

 *  | frame generated by SAVE_ALL    | |

 *  |	        		     | v

 *  +================================+

 *  |	        		     | ^

 *  | frame saved by do_switch_stack | | struct switch_stack

 *  |	        		     | v

 *  +================================+

/* 

 * The following table maps a register index into the stack offset at

 * which the register is saved.  Register indices are 0-31 for integer

 * regs, 32-63 for fp regs, and 64 for the pc.  Notice that sp and

 * zero have no stack-slot and need to be treated specially (see

 * get_reg/put_reg below).

/*

 * Get address of register REGNO in task TASK.

/*

 * Get contents of register REGNO in task TASK.

 Special hack for fpcr -- combine hardware and software bits.  */

/*

 * Write contents of register REGNO in task TASK.

/*

 * Set breakpoint.

		/*

		 * It's a branch: instead of trying to figure out

		 * whether the branch will be taken or not, we'll put

		 * a breakpoint at either location.  This is simpler,

		 * more reliable, and probably not a whole lot slower

		 * than the alternative approach of emulating the

		 * branch (emulation can be tricky for fp branches).

 guard against unoptimized code */

 install breakpoints: */

/*

 * Ensure no single-step breakpoint is pending.  Returns non-zero

 * value if child was being single-stepped.

 Mark single stepping.  */

/*

 * Called by kernel/ptrace.c when detaching..

 *

 * Make sure the single step bit is not set.

 When I and D space are separate, these will need to be fixed.  */

 read word at location addr. */

 Read register number ADDR. */

 When I and D space are separate, this will have to be fixed.  */

 write the word at location addr. */

 write the specified register */

 SPDX-License-Identifier: GPL-2.0

/*

 * Alpha specific irq code.

 Hack minimum IPL during interrupt processing for broken hardware.  */

/*

 * Performance counter hook.  A module can override this to

 * do something useful.

/*

 * The main interrupt entry point.

	/*

	 * Disable interrupts during IRQ handling.

	 * Note that there is no matching local_irq_enable() due to

	 * severe problems with RTI at IPL0 and some MILO PALcode

	 * (namely LX164).

	/* Just in case the platform init_irq() causes interrupts/mchecks

/*

 * machine error checks

	/*

	 * See if the machine check is due to a badaddr() and if so,

	 * ignore it.

 Machine check reasons.  Defined according to PALcode sources.  */

 System specific (these are for Alcor, at least): */

 Dump the logout area to give all info.  */

 CONFIG_VERBOSE_MCHECK */

/*

 * The special RTC interrupt type.  The interrupt itself was

 * processed by PALcode, and comes in via entInt vector 1.

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/err_titan.c

 *

 *	Copyright (C) 2000 Jeff Wiedemeier (Compaq Computer Corporation)

 *

 *	Error handling code supporting TITAN systems

 CPU 0 */

 CPU 1 */

 CPU 2 */

 CPU 3 */

 num is already the CPU number */

 Pchip 0 */

 Pchip 1 */

 reserved */

 leave num untouched */

 CONFIG_VERBOSE_MCHECK */

 CONFIG_VERBOSE_MCHECK */

 CONFIG_VERBOSE_MCHECK */

 CONFIG_VERBOSE_MCHECK */

	/*

	 * Initializing the BIOS on a video card on a bus without

	 * a south bridge (subtractive decode agent) can result in 

	 * master aborts as the BIOS probes the capabilities of the

	 * card. XFree86 does such initialization. If the error

	 * is a master abort (No DevSel as PCI Master) and the command

	 * is an I/O read or write below the address where we start

	 * assigning PCI I/O spaces (SRM uses 0x1000), then mark the

	 * error as dismissable so starting XFree86 doesn't result

	 * in a series of uncorrectable errors being reported. Also

	 * dismiss master aborts to VGA frame buffer space

	 * (0xA0000 - 0xC0000) and legacy BIOS space (0xC0000 - 0x100000)

	 * for the same reason.

	 *

	 * Also mark the error dismissible if it looks like the right

	 * error but only the Lost bit is set. Since the BIOS initialization

	 * can cause multiple master aborts and the error interrupt can

	 * be handled on a different CPU than the BIOS code is run on,

	 * it is possible for a second master abort to occur between the

	 * time the PALcode reads PERROR and the time it writes PERROR

	 * to acknowledge the error. If this timing happens, a second

	 * error will be signalled after the first, and if no additional

	 * errors occur, will look like a Lost error with no additional 

	 * errors on the same transaction as the previous error.

 CONFIG_VERBOSE_MCHECK */

 CONFIG_VERBOSE_MCHECK */

 CONFIG_VERBOSE_MCHECK */

	/*

	 * Mask of Titan interrupt sources which are reported as machine checks

	 *

	 * 63 - CChip Error

	 * 62 - PChip 0 H_Error

	 * 61 - PChip 1 H_Error

	 * 60 - PChip 0 C_Error

	 * 59 - PChip 1 C_Error

	/*

	 * Sync the processor

	/*

	 * Only handle system errors here 

	/* 

	 * It's a system error, handle it here

	 *

	 * The PALcode has already cleared the error, so just parse it

	/* 

	 * Parse the logout frame without printing first. If the only error(s)

	 * found are classified as "dismissable", then just dismiss them and

	 * don't print any message

		/*

		 * Either a nondismissable error was detected or no

		 * recognized error was detected  in the logout frame 

		 * -- report the error in either case

 CONFIG_VERBOSE_MCHECK */

		/*

		 * Convert any pending interrupts which report as system

		 * machine checks to interrupts

	/* 

	 * Release the logout frame 

/*

 * Subpacket Annotations

/*

 * Privateer

 TODO - categorize errors, for now, no error */

 TODO - decode instead of just dumping... */

 CONFIG_VERBOSE_MCHECK */

	/*

	 * Machine check codes

 630 */

 630 */

 670 */

 670 */

 670 */

 670 */

 670 */

 660 */

 620 */

 680 */

	/*

	 * Vector 630 - Processor, Correctable

		/*

		 * Fall through to vector 670 for processing...

	/*

	 * Vector 670 - Processor, Uncorrectable

	/*

	 * Vector 620 - System, Correctable

		/*

		 * Fall through to vector 660 for processing...

	/*

	 * Vector 660 - System, Uncorrectable

	/* 

	 * Vector 680 - System, Environmental

 System, Environmental */

	/* 

	 * Unknown

	/*

	 * Sync the processor.

	/* 

	 * Only handle system events here.

	/*

	 * Report the event - System Events should be reported even if no

	 * error is indicated since the event could indicate the return

	 * to normal status.

	/* 

	 * Convert any pending interrupts which report as 680 machine

	 * checks to interrupts.

	/*

	 * Dispatch the interrupt(s).

	/* 

	 * Release the logout frame.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * srm_env.c - Access to SRM environment

 *             variables through linux' procfs

 *

 * (C) 2001,2002,2006 by Jan-Benedict Glaw <jbglaw@lug-owl.de>

 *

 * This driver is a modified version of Erik Mouw's example proc

 * interface, so: thank you, Erik! He can be reached via email at

 * <J.A.K.Mouw@its.tudelft.nl>. It is based on an idea

 * provided by DEC^WCompaq^WIntel's "Jumpstart" CD. They

 * included a patch like this as well. Thanks for idea!

 Subdir in /proc/		*/

 Subdir for known variables	*/

 Subdir for all variables	*/

 Module version		*/

 Module name			*/

	/*

	 * Check system

	/*

	 * Create base directory

	/*

	 * Create per-name subdirectory

	/*

	 * Create per-number subdirectory

	/*

	 * Create all named nodes

	/*

	 * Create all numbered nodes

 SPDX-License-Identifier: GPL-2.0-or-later

/*  Kernel module help for Alpha.

    Copyright (C) 2002 Richard Henderson.



 Allocate the GOT at the end of the core sections.  */

	/* Trick: most of the ELF64_R_TYPE field is unused.  There are

	   42 valid relocation types, and a 32-bit field.  Co-opt the

	/* Find out how large the symbol table is.  Allocate one got_entry

	   head per symbol.  Normally this will be enough, but not always.

	/* Examine all LITERAL relocations to find out what GOT entries

 Free the memory we allocated.  */

	/* The small sections were sorted to the end of the segment.

 This is where to make the change.  */

		/* This is the symbol it is referring to.  Note that all

 BUG() can produce misaligned relocations. */

			/* BRSGP is only allowed to bind to local symbols.

			   If the section is undef, this means that the

 Omit the prologue. */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_rx164.c

 *

 *	Copyright (C) 1995 David A Rusling

 *	Copyright (C) 1996 Jay A Estabrook

 *	Copyright (C) 1998, 1999 Richard Henderson

 *

 * Code supporting the RX164 (PCA56+POLARIS).

 Note mask bit is true for ENABLED irqs.  */

	/* Read the interrupt summary register.  On Polaris, this is

	/*

	 * Now for every possible bit set, work through them and call

	 * the appropriate interrupt handler.

 clear least bit set */

/*

 * The RX164 changed its interrupt routing between pass1 and pass2...

 *

 * PASS1:

 *

 *      Slot    IDSEL   INTA    INTB    INTC    INTD    

 *      0       6       5       10      15      20

 *      1       7       4       9       14      19

 *      2       5       3       8       13      18

 *      3       9       2       7       12      17

 *      4       10      1       6       11      16

 *

 * PASS2:

 *      Slot    IDSEL   INTA    INTB    INTC    INTD    

 *      0       5       1       7       12      17

 *      1       6       2       8       13      18

 *      2       8       3       9       14      19

 *      3       9       4       10      15      20

 *      4       10      5       11      16      6

 *      

/*

 * IdSel       

 *   5  32 bit PCI option slot 0

 *   6  64 bit PCI option slot 1

 *   7  PCI-ISA bridge

 *   7  64 bit PCI option slot 2

 *   9  32 bit PCI option slot 3

 *  10  PCI-PCI bridge

 * 

INT   INTA  INTB  INTC   INTD */

 IdSel 5,  slot 2 */

 IdSel 6,  slot 0 */

 IdSel 7,  slot 1 */

 IdSel 8, PCI/ISA bridge */

 IdSel 9,  slot 3 */

 IdSel 10, slot 4 */

INT   INTA  INTB  INTC   INTD */

 IdSel 5,  slot 0 */

 IdSel 6,  slot 1 */

 IdSel 7, PCI/ISA bridge */

 IdSel 8,  slot 2 */

 IdSel 9,  slot 3 */

 IdSel 10, PCI-PCI */

	/* JRP - Need to figure out how to distinguish pass1 from pass2,

/*

 * The System Vector

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/err_ev7.c

 *

 *	Copyright (C) 2000 Jeff Wiedemeier (Compaq Computer Corporation)

 *

 *	Error handling code supporting Alpha systems

	/*

	 * A Marvel machine check frame is always packaged in an

	 * el_subpacket of class HEADER, type LOGOUT_FRAME.

	/*

	 * It is a logout frame header. Look at the one subpacket.

	/*

	 * It has to be class PAL, type LOGOUT_FRAME.

	/*

	 * Process the subpackets.

		/*

		 * All subpackets should be class PAL.

		/*

		 * Remember the subpacket.

			/*

			 * Don't know what kind of frame this is.

	/*

	 * Sync the processor

	/* 

	 * Release the logout frame 

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_mikasa.c

 *

 *	Copyright (C) 1995 David A Rusling

 *	Copyright (C) 1996 Jay A Estabrook

 *	Copyright (C) 1998, 1999 Richard Henderson

 *

 * Code supporting the MIKASA (AlphaServer 1000).

 Note mask bit is true for ENABLED irqs.  */

 Read the interrupt summary registers */

	/*

	 * Now for every possible bit set, work through them and call

	 * the appropriate interrupt handler.

 clear least bit set */

/*

 * PCI Fixup configuration.

 *

 * Summary @ 0x536:

 * Bit      Meaning

 * 0        Interrupt Line A from slot 0

 * 1        Interrupt Line B from slot 0

 * 2        Interrupt Line C from slot 0

 * 3        Interrupt Line D from slot 0

 * 4        Interrupt Line A from slot 1

 * 5        Interrupt line B from slot 1

 * 6        Interrupt Line C from slot 1

 * 7        Interrupt Line D from slot 1

 * 8        Interrupt Line A from slot 2

 * 9        Interrupt Line B from slot 2

 *10        Interrupt Line C from slot 2

 *11        Interrupt Line D from slot 2

 *12        NCR 810 SCSI

 *13        Power Supply Fail

 *14        Temperature Warn

 *15        Reserved

 *

 * The device to slot mapping looks like:

 *

 * Slot     Device

 *  6       NCR SCSI controller

 *  7       Intel PCI-EISA bridge chip

 * 11       PCI on board slot 0

 * 12       PCI on board slot 1

 * 13       PCI on board slot 2

 *   

 *

 * This two layered interrupt approach means that we allocate IRQ 16 and 

 * above for PCI interrupts.  The IRQ relates to which bit the interrupt

 * comes in on.  This makes interrupt processing much easier.

INT    INTA   INTB   INTC   INTD */

 IdSel 17,  SCSI */

 IdSel 18,  PCEB */

 IdSel 19,  ???? */

 IdSel 20,  ???? */

 IdSel 21,  ???? */

 IdSel 22,  slot 0 */

 IdSel 23,  slot 1 */

 IdSel 24,  slot 2 */

 Clear the error before any reporting.  */

 magic */

/*

 * The System Vector

 SPDX-License-Identifier: GPL-2.0

/*

 * linux/arch/alpha/kernel/sys_marvel.c

 *

 * Marvel / IO7 support

/*

 * Interrupt handling.

	/*

	 * Vector is 0x800 + (interrupt)

	 *

	 * where (interrupt) is:

	 *

	 *	...16|15 14|13     4|3 0

	 *	-----+-----+--------+---

	 *	  PE |  0  |   irq  | 0

	 *

	 * where (irq) is 

	 *

	 *       0x0800 - 0x0ff0	 - 0x0800 + (LSI id << 4)

	 *	 0x1000 - 0x2ff0	 - 0x1000 + (MSI_DAT<8:0> << 4)

 offset for legacy */

 not too many bits */

 merge the pid     */

 isolate the vector    */

 subtract legacy bias  */

 assume LSI */

 MSI */

 clear the target pid   */

 set the new target pid */

	/*

	 * LSI_CTL has target PID @ 14

 clear the target pid */

 set the new target pid */

	/*

	 * MSI_CTL has target PID @ 14

 clear the target pid */

 set the new target pid */

	/*

	 * LSI_CTL has target PID @ 14

	/*

	 * MSI_CTL has target PID @ 14

	/*

	 * Where should interrupts from this IO7 go?

	 *

	 * They really should be sent to the local CPU to avoid having to

	 * traverse the mesh, but if it's not an SMP kernel, they have to

	 * go to the boot CPU. Send them all to the boot CPU for now,

	 * as each secondary starts, it can redirect it's local device 

	 * interrupts.

 set up the error irqs */

 Set up the lsi irqs.  */

 Disable the implemented irqs in hardware.  */

 Set up the msi irqs.  */

 Reserve the legacy irqs.  */

 Init the io7 irqs.  */

 we use msg_data<8:0> */

 offset for lsi       */

 offset for legacy */

 merge the pid     */

 Indicate that we trust the console to configure things properly */

 Clear any io7 errors.  */

	/* 

	 * There is a local IO7 - redirect all of its interrupts here.

 Redirect the error IRQS here.  */

 Redirect the implemented LSIs here.  */

 Redirect the MSIs here.  */

/*

 * System Vectors

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_miata.c

 *

 *	Copyright (C) 1995 David A Rusling

 *	Copyright (C) 1996 Jay A Estabrook

 *	Copyright (C) 1998, 1999, 2000 Richard Henderson

 *

 * Code supporting the MIATA (EV56+PYXIS).

	/*

	 * I really hate to do this, but the MIATA SRM console ignores the

	 *  low 8 bits in the interrupt summary register, and reports the

	 *  vector 0x80 *lower* than I expected from the bit numbering in

	 *  the documentation.

	 * This was done because the low 8 summary bits really aren't used

	 *  for reporting any interrupts (the PCI-ISA bridge, bit 7, isn't

	 *  used for this purpose, as PIC interrupts are delivered as the

	 *  vectors 0x800-0x8f0).

	 * But I really don't want to change the fixup code for allocation

	 *  of IRQs, nor the alpha_irq_mask maintenance stuff, both of which

	 *  look nice and clean now.

	 * So, here's this grotty hack... :-(

 These break on MiataGL so we'll try not to do it at all.  */

 ISA/NMI HI */

 clear count */

	/* Not interested in the bogus interrupts (3,10), Fan Fault (0),

           NMI (1), or EIDE (9).



	   We also disable the risers (4,5), since we don't know how to

/*

 * PCI Fixup configuration.

 *

 * Summary @ PYXIS_INT_REQ:

 * Bit      Meaning

 * 0        Fan Fault

 * 1        NMI

 * 2        Halt/Reset switch

 * 3        none

 * 4        CID0 (Riser ID)

 * 5        CID1 (Riser ID)

 * 6        Interval timer

 * 7        PCI-ISA Bridge

 * 8        Ethernet

 * 9        EIDE (deprecated, ISA 14/15 used)

 *10        none

 *11        USB

 *12        Interrupt Line A from slot 4

 *13        Interrupt Line B from slot 4

 *14        Interrupt Line C from slot 4

 *15        Interrupt Line D from slot 4

 *16        Interrupt Line A from slot 5

 *17        Interrupt line B from slot 5

 *18        Interrupt Line C from slot 5

 *19        Interrupt Line D from slot 5

 *20        Interrupt Line A from slot 1

 *21        Interrupt Line B from slot 1

 *22        Interrupt Line C from slot 1

 *23        Interrupt Line D from slot 1

 *24        Interrupt Line A from slot 2

 *25        Interrupt Line B from slot 2

 *26        Interrupt Line C from slot 2

 *27        Interrupt Line D from slot 2

 *27        Interrupt Line A from slot 3

 *29        Interrupt Line B from slot 3

 *30        Interrupt Line C from slot 3

 *31        Interrupt Line D from slot 3

 *

 * The device to slot mapping looks like:

 *

 * Slot     Device

 *  3       DC21142 Ethernet

 *  4       EIDE CMD646

 *  5       none

 *  6       USB

 *  7       PCI-ISA bridge

 *  8       PCI-PCI Bridge      (SBU Riser)

 *  9       none

 * 10       none

 * 11       PCI on board slot 4 (SBU Riser)

 * 12       PCI on board slot 5 (SBU Riser)

 *

 *  These are behind the bridge, so I'm not sure what to do...

 *

 * 13       PCI on board slot 1 (SBU Riser)

 * 14       PCI on board slot 2 (SBU Riser)

 * 15       PCI on board slot 3 (SBU Riser)

 *   

 *

 * This two layered interrupt approach means that we allocate IRQ 16 and 

 * above for PCI interrupts.  The IRQ relates to which bit the interrupt

 * comes in on.  This makes interrupt processing much easier.

INT    INTA   INTB   INTC   INTD */

 IdSel 14,  DC21142 */

 IdSel 15,  EIDE    */

 IdSel 16,  none    */

 IdSel 17,  none    */

 IdSel 18,  PCI-ISA */

 IdSel 19,  PCI-PCI */

 IdSel 20,  none    */

 IdSel 21,  none    */

 IdSel 22,  slot 4  */

 IdSel 23,  slot 5  */

 the next 7 are actually on PCI bus 1, across the bridge */

 IdSel 24,  QLISP/GL*/

 IdSel 25,  none    */

 IdSel 26,  none    */

 IdSel 27,  none    */

 IdSel 28,  slot 1  */

 IdSel 29,  slot 2  */

 IdSel 30,  slot 3  */

 This bridge is on the main bus of the later orig MIATA */

 IdSel 31,  PCI-PCI */

	/* the USB function of the 82c693 has it's interrupt connected to 

 Check for the built-in bridge.  */

 Must be a card-based bridge.  */

 Move up the chain of bridges.  */

 Slot of the next bridge.  */

 it might be a GL (fails harmlessly if not) */

 Who said DEC engineers have no sense of humor? ;-)  */ 

/*

 * The System Vector

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/irq.c

 *

 *	Copyright (C) 1995 Linus Torvalds

 *

 * This file contains the code used by various IRQ handling routines:

 * asking for different IRQ's should be done through these routines

 * instead of just grabbing them. Thus setups with different IRQ numbers

 * shouldn't result in any weird surprises, and installing new handlers

 * should be easier.

 CONFIG_SMP */

/*

 * handle_irq handles all normal device IRQ's (the special

 * SMP cross-CPU interrupts have their own specific

 * handlers).

	/* 

	 * We ack quickly, we don't want the irq controller

	 * thinking we're snobs just because some other CPU has

	 * disabled global interrupts (we have already done the

	 * INT_ACK cycles, it's too late to try to pretend to the

	 * controller that we aren't taking the interrupt).

	 *

	 * 0 return value means that this irq is already being

	 * handled by some other CPU. (or is disabled)

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/irq_pyxis.c

 *

 * Based on code written by David A Rusling (david.rusling@reo.mts.dec.com).

 *

 * IRQ Code common to all PYXIS core logic chips.

 Note mask bit is true for ENABLED irqs.  */

 Disable the interrupt.  */

 Ack PYXIS PCI interrupt.  */

 Re-read to force both writes.  */

 Read the interrupt summary register of PYXIS */

	/*

	 * Now for every possible bit set, work through them and call

	 * the appropriate interrupt handler.

 clear least bit set */

 disable all */

 flush all */

 Send -INTA pulses to clear any pending interrupts ...*/

 SPDX-License-Identifier: GPL-2.0

/*

 *      linux/arch/alpha/kernel/core_polaris.c

 *

 * POLARIS chip-specific code

/*

 * BIOS32-style PCI interface:

/*

 * Given a bus, device, and function number, compute resulting

 * configuration space address.  This is fairly straightforward

 * on POLARIS, since the chip itself generates Type 0 or Type 1

 * cycles automatically depending on the bus number (Bus 0 is

 * hardwired to Type 0, all others are Type 1.  Peer bridges

 * are not supported).

 *

 * All types:

 *

 *  3 3 3 3|3 3 3 3|3 3 2 2|2 2 2 2|2 2 2 2|1 1 1 1|1 1 1 1|1 1 

 *  9 8 7 6|5 4 3 2|1 0 9 8|7 6 5 4|3 2 1 0|9 8 7 6|5 4 3 2|1 0 9 8|7 6 5 4|3 2 1 0

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 * |1|1|1|1|1|0|0|1|1|1|1|1|1|1|1|0|B|B|B|B|B|B|B|B|D|D|D|D|D|F|F|F|R|R|R|R|R|R|x|x|

 * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 *

 *	23:16	bus number (8 bits = 128 possible buses)

 *	15:11	Device number (5 bits)

 *	10:8	function number

 *	 7:2	register number

 *  

 * Notes:

 *	The function number selects which function of a multi-function device 

 *	(e.g., scsi and ethernet).

 * 

 *	The register selects a DWORD (32 bit) register offset.  Hence it

 *	doesn't get shifted by 2 bits as we want to "drop" the bottom two

 *	bits.

	/* May need to initialize error reporting (see PCICTL0/1), but

	 * for now assume that the firmware has done the right thing

	 * already.

	/*

	 * Create our single hose.

 The I/O window is fixed at 2G @ 2G.  */

 Write 1's to settable bits to clear errors */

 Clear the error before any reporting.  */

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_titan.c

 *

 *	Copyright (C) 1995 David A Rusling

 *	Copyright (C) 1996, 1999 Jay A Estabrook

 *	Copyright (C) 1998, 1999 Richard Henderson

 *      Copyright (C) 1999, 2000 Jeff Wiedemeier

 *

 * Code supporting TITAN systems (EV6+TITAN), currently:

 *      Privateer

 *	Falcon

 *	Granite

/*

 * Titan generic

/*

 * Titan supports up to 4 CPUs

/*

 * Mask is set (1) if enabled

/*

 * Need SMP-safe access to interrupt CSRs

      /*

       * This is a NOP interrupt handler for the purposes of

       * event counting -- just return.

 init the legacy dma controller */

 init the legacy irq controller */

 init the titan irqs */

	/*

	 * Mask down to those interrupts which are enable on this processor

	/*

	 * Dispatch all requested interrupts 

 convert to SRM vector... priority is <63> -> <0> */

 clear it out 	 */

 convert to SRM vector */

 dispatch it */

/*

 * Titan Family

	/*

	 * Enable the system error interrupts. These interrupts are 

	 * all reported to the kernel as machine checks, so the handler

	 * is a nop so it can be called to count the individual events.

	/* 

	 * Register our error handlers.

	/*

	 * Check if the console left us any error logs.

 Get the current intline.  */

 Is it explicitly routed through ISA?  */

 Offset by 16 to make room for ISA interrupts 0 - 15.  */

 	/*

 	 * This isn't really the right place, but there's some init

 	 * that needs to be done after everything is basically up.

 Indicate that we trust the console to configure things properly */

/*

 * Privateer

	/*

	 * Hook a couple of extra err interrupts that the

	 * common titan code won't.

	/*

	 * Finish with the common version.

/*

 * The System Vectors.

 64 + 16 */

 device_interrupt will be filled in by titan_init_irq */

 64 + 16 */

 device_interrupt will be filled in by titan_init_irq */

/* No alpha_mv alias for privateer since we compile it 

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_dp264.c

 *

 *	Copyright (C) 1995 David A Rusling

 *	Copyright (C) 1996, 1999 Jay A Estabrook

 *	Copyright (C) 1998, 1999 Richard Henderson

 *

 *	Modified by Christopher C. Chimelis, 2001 to

 *	add support for the addition of Shark to the

 *	Tsunami family.

 *

 * Code supporting the DP264 (EV6+TSUNAMI).

 Note mask bit is true for ENABLED irqs.  */

 dp264 boards handle at max four CPUs */

 Read the interrupt summary register of TSUNAMI */

	/*

	 * Now for every possible bit set, work through them and call

	 * the appropriate interrupt handler.

 clear least bit set */

	/*

	 * The SRM console reports PCI interrupts with a vector calculated by:

	 *

	 *	0x900 + (0x10 * DRIR-bit)

	 *

	 * So bit 16 shows up as IRQ 32, etc.

	 * 

	 * On DP264/BRICK/MONET, we adjust it down by 16 because at least

	 * that many of the low order bits of the DRIR are not used, and

	 * so we don't count them.

/*

	 * The SRM console reports PCI interrupts with a vector calculated by:

	 *

	 *	0x900 + (0x10 * DRIR-bit)

	 *

	 * So bit 16 shows up as IRQ 32, etc.

	 * 

	 * CLIPPER uses bits 8-47 for PCI interrupts, so we do not need

	 * to scale down the vector reported, we just use it.

	 *

	 * Eg IRQ 24 is DRIR bit 8, etc, etc

/*

 * PCI Fixup configuration.

 *

 * Summary @ TSUNAMI_CSR_DIM0:

 * Bit      Meaning

 * 0-17     Unused

 *18        Interrupt SCSI B (Adaptec 7895 builtin)

 *19        Interrupt SCSI A (Adaptec 7895 builtin)

 *20        Interrupt Line D from slot 2 PCI0

 *21        Interrupt Line C from slot 2 PCI0

 *22        Interrupt Line B from slot 2 PCI0

 *23        Interrupt Line A from slot 2 PCI0

 *24        Interrupt Line D from slot 1 PCI0

 *25        Interrupt Line C from slot 1 PCI0

 *26        Interrupt Line B from slot 1 PCI0

 *27        Interrupt Line A from slot 1 PCI0

 *28        Interrupt Line D from slot 0 PCI0

 *29        Interrupt Line C from slot 0 PCI0

 *30        Interrupt Line B from slot 0 PCI0

 *31        Interrupt Line A from slot 0 PCI0

 *

 *32        Interrupt Line D from slot 3 PCI1

 *33        Interrupt Line C from slot 3 PCI1

 *34        Interrupt Line B from slot 3 PCI1

 *35        Interrupt Line A from slot 3 PCI1

 *36        Interrupt Line D from slot 2 PCI1

 *37        Interrupt Line C from slot 2 PCI1

 *38        Interrupt Line B from slot 2 PCI1

 *39        Interrupt Line A from slot 2 PCI1

 *40        Interrupt Line D from slot 1 PCI1

 *41        Interrupt Line C from slot 1 PCI1

 *42        Interrupt Line B from slot 1 PCI1

 *43        Interrupt Line A from slot 1 PCI1

 *44        Interrupt Line D from slot 0 PCI1

 *45        Interrupt Line C from slot 0 PCI1

 *46        Interrupt Line B from slot 0 PCI1

 *47        Interrupt Line A from slot 0 PCI1

 *48-52     Unused

 *53        PCI0 NMI (from Cypress)

 *54        PCI0 SMI INT (from Cypress)

 *55        PCI0 ISA Interrupt (from Cypress)

 *56-60     Unused

 *61        PCI1 Bus Error

 *62        PCI0 Bus Error

 *63        Reserved

 *

 * IdSel	

 *   5	 Cypress Bridge I/O

 *   6	 SCSI Adaptec builtin

 *   7	 64 bit PCI option slot 0 (all busses)

 *   8	 64 bit PCI option slot 1 (all busses)

 *   9	 64 bit PCI option slot 2 (all busses)

 *  10	 64 bit PCI option slot 3 (not bus 0)

	/* This interrupt is routed via ISA bridge, so we'll

	   just have to trust whatever value the console might

INT    INTA   INTB   INTC   INTD */

 IdSel 5 ISA Bridge */

 IdSel 6 SCSI builtin*/

 IdSel 7 slot 0 */

 IdSel 8 slot 1 */

 IdSel 9 slot 2 */

 IdSel 10 slot 3 */

INT    INTA   INTB   INTC   INTD */

 IdSel 3 21143 PCI1 */

 IdSel 4 unused */

 IdSel 5 unused */

 IdSel 6 SCSI PCI1 */

 IdSel 7 ISA Bridge */

 IdSel 8 P2P PCI1 */

 IdSel 14 slot 4 PCI2*/

 IdSel 15 slot 5 PCI2*/

 IdSel 9 unused */

 IdSel 10 unused */

 IdSel 11 slot 1 PCI0*/

 IdSel 12 slot 2 PCI0*/

 IdSel 13 slot 3 PCI0*/

 IdSel 14 slot 4 PCI2*/

 IdSel 15 slot 5 PCI2*/

 Check for the built-in bridge on hose 1. */

 Must be a card-based bridge.  */

 Check for built-in bridge on hose 1. */

 Move up the chain of bridges.  */

 Slot of the next bridge.  */

INT    INTA   INTB   INTC   INTD */

 IdSel 7 ISA Bridge */

 IdSel 8 unused */

 IdSel 9 21143 #1 */

 IdSel 10 unused */

 IdSel 11 21143 #2 */

 IdSel 12 unused */

 IdSel 13 unused */

 IdSel 14 slot 0 */

 IdSel 15 slot 1 */

 IdSel 16 slot 2 */

 IdSel 17 slot 3 */

INT    INTA   INTB   INTC   INTD */

 IdSel 1 slot 1 */

 IdSel 2 slot 2 */

 IdSel 3 slot 3 */

 IdSel 4 slot 4 */

 IdSel 5 slot 5 */

 IdSel 6 slot 6 */

 IdSel 7 ISA Bridge */

 Tsunami caches 4 PTEs at a time; DS10 has only 1 hose. */

/*

 * The System Vectors

/* Sharks strongly resemble Clipper, at least as far

 * as interrupt routing, etc, so we're using the

 * same functions as Clipper does

/* No alpha_mv alias for webbrick/monet/clipper, since we compile them

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_noritake.c

 *

 *	Copyright (C) 1995 David A Rusling

 *	Copyright (C) 1996 Jay A Estabrook

 *	Copyright (C) 1998, 1999 Richard Henderson

 *

 * Code supporting the NORITAKE (AlphaServer 1000A), 

 * CORELLE (AlphaServer 800), and ALCOR Primo (AlphaStation 600A).

 Note mask bit is true for ENABLED irqs.  */

 Read the interrupt summary registers of NORITAKE */

	/*

	 * Now for every possible bit set, work through them and call

	 * the appropriate interrupt handler.

 clear least bit set */

	/*

	 * I really hate to do this, too, but the NORITAKE SRM console also

	 * reports PCI vectors *lower* than I expected from the bit numbers

	 * in the documentation.

	 * But I really don't want to change the fixup code for allocation

	 * of IRQs, nor the alpha_irq_mask maintenance stuff, both of which

	 * look nice and clean now.

	 * So, here's this additional grotty hack... :-(

/*

 * PCI Fixup configuration.

 *

 * Summary @ 0x542, summary register #1:

 * Bit      Meaning

 * 0        All valid ints from summary regs 2 & 3

 * 1        QLOGIC ISP1020A SCSI

 * 2        Interrupt Line A from slot 0

 * 3        Interrupt Line B from slot 0

 * 4        Interrupt Line A from slot 1

 * 5        Interrupt line B from slot 1

 * 6        Interrupt Line A from slot 2

 * 7        Interrupt Line B from slot 2

 * 8        Interrupt Line A from slot 3

 * 9        Interrupt Line B from slot 3

 *10        Interrupt Line A from slot 4

 *11        Interrupt Line B from slot 4

 *12        Interrupt Line A from slot 5

 *13        Interrupt Line B from slot 5

 *14        Interrupt Line A from slot 6

 *15        Interrupt Line B from slot 6

 *

 * Summary @ 0x544, summary register #2:

 * Bit      Meaning

 * 0        OR of all unmasked ints in SR #2

 * 1        OR of secondary bus ints

 * 2        Interrupt Line C from slot 0

 * 3        Interrupt Line D from slot 0

 * 4        Interrupt Line C from slot 1

 * 5        Interrupt line D from slot 1

 * 6        Interrupt Line C from slot 2

 * 7        Interrupt Line D from slot 2

 * 8        Interrupt Line C from slot 3

 * 9        Interrupt Line D from slot 3

 *10        Interrupt Line C from slot 4

 *11        Interrupt Line D from slot 4

 *12        Interrupt Line C from slot 5

 *13        Interrupt Line D from slot 5

 *14        Interrupt Line C from slot 6

 *15        Interrupt Line D from slot 6

 *

 * The device to slot mapping looks like:

 *

 * Slot     Device

 *  7       Intel PCI-EISA bridge chip

 *  8       DEC PCI-PCI bridge chip

 * 11       PCI on board slot 0

 * 12       PCI on board slot 1

 * 13       PCI on board slot 2

 *   

 *

 * This two layered interrupt approach means that we allocate IRQ 16 and 

 * above for PCI interrupts.  The IRQ relates to which bit the interrupt

 * comes in on.  This makes interrupt processing much easier.

INT    INTA   INTB   INTC   INTD */

 note: IDSELs 16, 17, and 25 are CORELLE only */

 IdSel 16,  QLOGIC */

 IdSel 17, S3 Trio64 */

 IdSel 18,  PCEB */

 IdSel 19,  PPB  */

 IdSel 20,  ???? */

 IdSel 21,  ???? */

 IdSel 22,  slot 0 */

 IdSel 23,  slot 1 */

 IdSel 24,  slot 2 */

 IdSel 25,  slot 3 */

		/* The following 5 are actually on PCI bus 1, which is 

 IdSel 16,  QLOGIC */

 IdSel 17,  slot 3 */

 IdSel 18,  slot 4 */

 IdSel 19,  slot 5 */

 IdSel 20,  slot 6 */

 Check for the built-in bridge */

 WAG! */

 Must be a card-based bridge.  */

 Move up the chain of bridges.  */

 Slot of the next bridge.  */

 Clear the error before any reporting.  */

 magic */

/*

 * The System Vectors

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_ruffian.c

 *

 *	Copyright (C) 1995 David A Rusling

 *	Copyright (C) 1996 Jay A Estabrook

 *	Copyright (C) 1998, 1999, 2000 Richard Henderson

 *

 * Code supporting the RUFFIAN.

 Invert 6&7 for i82371 */

 all clear */

 Finish writing the 82C59A PIC Operation Control Words */

	/* Not interested in the bogus interrupts (0,3,6),

	/* Ruffian does not have the RTC connected to the CPU timer

 Setup interval timer.  */

 binary, mode 2, LSB/MSB, ch 0 */

 LSB */

 MSB */

 pit counter 2: speaker */

 This only causes re-entry to ARCSBIOS */

 Perhaps this works for other PYXIS as well?  */

/*

 *  Interrupt routing:

 *

 *		Primary bus

 *	  IdSel		INTA	INTB	INTC	INTD

 * 21052   13		  -	  -	  -	  -

 * SIO	   14		 23	  -	  -	  -

 * 21143   15		 44	  -	  -	  -

 * Slot 0  17		 43	 42	 41	 40

 *

 *		Secondary bus

 *	  IdSel		INTA	INTB	INTC	INTD

 * Slot 0   8 (18)	 19	 18	 17	 16

 * Slot 1   9 (19)	 31	 30	 29	 28

 * Slot 2  10 (20)	 27	 26	 25	 24

 * Slot 3  11 (21)	 39	 38	 37	 36

 * Slot 4  12 (22)	 35	 34	 33	 32

 * 53c875  13 (23)	 20	  -	  -	  -

 *

INT  INTA INTB INTC INTD */

 IdSel 13,  21052	     */

 IdSel 14,  SIO	     */

 IdSel 15,  21143	     */

 IdSel 16,  none	     */

 IdSel 17,  64-bit slot */

 the next 6 are actually on PCI bus 1, across the bridge */

 IdSel  8,  slot 0	     */

 IdSel  9,  slot 1	     */

 IdSel 10,  slot 2	     */

 IdSel 11,  slot 3	     */

 IdSel 12,  slot 4	     */

 IdSel 13,  53c875	     */

 Check for the built-in bridge.  */

 Must be a card-based bridge.  */

 Move up the chain of bridges.  */

 Slot of the next bridge.  */

/*

 * The DeskStation Ruffian motherboard firmware does not place

 * the memory size in the PALimpure area.  Therefore, we use

 * the Bank Configuration Registers in PYXIS to obtain the size.

	/* Valid offsets are: 0x800, 0x840 and 0x880

 Check BANK_ENABLE */

 0x00,   1G */

 0x02, 512M */

 0x04, 256M */

 0x06, 128M */

 0x08,  64M */

 0x0a,  32M */

 0x0c,  16M */

 0x0e,   8M */

 0x10,   2G */

 BUILDING_FOR_MILO */

/*

 * The System Vector

 SPDX-License-Identifier: GPL-2.0

/*

 * Generate definitions needed by assembly language modules.

 * This code generates raw asm output which is post-processed to extract

 * and format the required data.

 SPDX-License-Identifier: GPL-2.0

/*

 *	linux/arch/alpha/kernel/sys_sio.c

 *

 *	Copyright (C) 1995 David A Rusling

 *	Copyright (C) 1996 Jay A Estabrook

 *	Copyright (C) 1998, 1999 Richard Henderson

 *

 * Code for all boards that route the PCI interrupts through the SIO

 * PCI/ISA bridge.  This includes Noname (AXPpci33), Multia (UDB),

 * Kenetics's Platform 2000, Avanti (AlphaStation), XL, and AlphaBook1.

 Save LCA configuration data as the console had it set up.  */

 for SAVE/RESTORE */

	/* The AlphaBook1 has LCD video fixed at 800x600,

/*

 * sio_route_tab selects irq routing in PCI/ISA bridge so that:

 *		PIRQ0 -> irq 15

 *		PIRQ1 -> irq  9

 *		PIRQ2 -> irq 10

 *		PIRQ3 -> irq 11

 *

 * This probably ought to be configurable via MILO.  For

 * example, sound boards seem to like using IRQ 9.

 *

 * This is NOT how we should do it. PIRQ0-X should have

 * their own IRQs, the way intel uses the IO-APIC IRQs.

 First, ALWAYS read and print the original setting. */

 Now override with desired setting. */

 Iterate through the devices, collecting IRQ levels.  */

	/*

	 * Now, make all PCI interrupts level sensitive.  Notice:

	 * these registers must be accessed byte-wise.  inw()/outw()

	 * don't work.

	 *

	 * Make sure to turn off any level bits set for IRQs 9,10,11,15,

	 *  so that the only bits getting set are for devices actually found.

	 * Note that we do preserve the remainder of the bits, which we hope

	 *  will be set correctly by ARC/SRM.

	 *

	 * Note: we at least preserve any level-set bits on AlphaBook1

	/*

	 * The Noname board has 5 PCI slots with each of the 4

	 * interrupt pins routed to different pins on the PCI/ISA

	 * bridge (PIRQ0-PIRQ3).  The table below is based on

	 * information available at:

	 *

	 *   http://ftp.digital.com/pub/DEC/axppci/ref_interrupts.txt

	 *

	 * I have no information on the Avanti interrupt routing, but

	 * the routing seems to be identical to the Noname except

	 * that the Avanti has an additional slot whose routing I'm

	 * unsure of.

	 *

	 * pirq_tab[0] is a fake entry to deal with old PCI boards

	 * that have the interrupt pin number hardwired to 0 (meaning

	 * that they use the default INTA line, if they are interrupt

	 * driven at all).

INT A   B   C   D */

 idsel  6 (53c810) */ 

 idsel  7 (SIO: PCI/ISA bridge) */

 idsel  8 (Hack: slot closest ISA) */

 idsel  9 (unused) */

 idsel 10 (unused) */

 idsel 11 KN25_PCI_SLOT0 */

 idsel 12 KN25_PCI_SLOT1 */

 idsel 13 KN25_PCI_SLOT2 */

 idsel 14 AS255 TULIP */

 Fixup IRQ level if an actual IRQ mapping is detected */

INT A   B   C   D */

 idsel  6 (53c810) */

 idsel  7 (SIO: PCI/ISA bridge) */

 idsel  8 (slot A) */

 idsel  9 (slot B) */

 idsel 10 (unused) */

 idsel 11 (unused) */

 idsel 12 (CMD0646) */

		/* Enabling things in the Super IO chip doesn't actually

		 * configure and enable things, the legacy drivers still

		 * need to do the actual configuration and enabling.

		 * This only unblocks them.

		/* Don't bother on the Avanti family.

		 * None of them had on-board IDE.

	/*

	 * On the AlphaBook1, the PCMCIA chip (Cirrus 6729)

	 * is sensitive to PCI bus bursts, so we must DISABLE

	 * burst mode for the NCR 8xx SCSI... :-(

	 *

	 * Note that the NCR810 SCSI driver must preserve the

	 * setting of the bit in order for this to work.  At the

	 * moment (2.0.29), ncr53c8xx.c does NOT do this, but

	 * 53c7,8xx.c DOES.

 Do not set *ANY* level triggers for AlphaBook1. */

 Make sure that register PR1 indicates 1Mb mem */

 read PR5  */

 unlock PR0-4 */

 read PR1 */

 write PR1 */

 (re)lock PR0-4 */

	/* Since we cannot read the PCI DMA Window CSRs, we

	 * cannot restore them here.

	 *

	 * However, we CAN read the PIRQ route register, so restore it

	 * now...

/*

 * The System Vectors

 NCR810 SCSI is 14, PCMCIA controller is 15.  */

 leave 14 for IDE, 9 for SND */

		/* For UDB, the only available PCI slot must not map to IRQ 9,

		   since that's the builtin MSS sound chip. That PCI slot

		   will map to PIRQ1 (for INTA at least), so we give it IRQ 15

		   instead.



		   Unfortunately we have to do this for NONAME as well, since

		   they are co-indicated when the platform type "Noname" is

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/alpha/lib/memcpy.c

 *

 *  Copyright (C) 1995  Linus Torvalds

/*

 * This is a reasonably optimized memcpy() routine.

/*

 * Note that the C code is written to be optimized into good assembly. However,

 * at this point gcc is unable to sanely compile "if (n >= 0)", resulting in a

 * explicit compare against 0 (instead of just using the proper "blt reg, xx" or

 * "bge reg, xx"). I hope alpha-gcc will be fixed to notice this eventually..

/*

 * This should be done in one go with ldq_u*2/mask/stq_u. Do it

 * with a macro so that we can fix it up later..

/*

 * This should similarly be done with ldq_u*2/mask/stq. The destination

 * is aligned, but we don't fill in a full quad-word

/*

 * This should be done with ldq/mask/stq. The source and destination are

 * aligned, but we don't fill in a full quad-word

/*

 * This does unaligned memory copies. We want to avoid storing to

 * an unaligned address, as that would do a read-modify-write cycle.

 * We also want to avoid double-reading the unaligned reads.

 *

 * Note the ordering to try to avoid load (and address generation) latencies.

 to avoid compare against 8 in the loop */

 I don't understand AXP assembler well enough for this. -Tim */

/*

 * Hmm.. Strange. The __asm__ here is there to make gcc use an integer register

 * for the load-store. I don't know why, but it would seem that using a floating

 * point register for the move seems to slow things down (very small difference,

 * though).

 *

 * Note the ordering to try to avoid load (and address generation) latencies.

 SPDX-License-Identifier: GPL-2.0

 lda $30,-X($30) */

 subq $30,X,$30 */

 Branches, jumps, PAL calls, and illegal opcodes end a basic block. */

 Count the bytes allocated. */

 SPDX-License-Identifier: GPL-2.0

/* 

 * arch/alpha/lib/fls.c

/* This is fls(x)-1, except zero is held to zero.  This allows most

 SPDX-License-Identifier: GPL-2.0

/*

 *	arch/alpha/lib/srm_printk.c

 count number of linefeeds in string: */

 expand each linefeed into carriage-return/linefeed: */

 SPDX-License-Identifier: GPL-2.0

/*

 * csum_partial_copy - do IP checksumming and copy

 *

 * (C) Copyright 1996 Linus Torvalds

 * accelerated versions (and 21264 assembly versions ) contributed by

 *	Rick Gorton	<rick.gorton@alpha-processor.com>

 *

 * Don't look at this too closely - you'll go mad. The things

 * we do for performance..

	/* Using extract instructions is a bit more efficient

	/* Since the bits of tmp_v.sh[3] are going to always be zero,

 Similarly, out_v.us[2] is always zero for the final add.  */

/*

 * Ok. This isn't fun, but this is the EASY case.

/*

 * This is even less fun, but this is still reasonably

 * easy.

/*

 * This is slightly less fun than the above..

/*

 * This is so totally un-fun that it's frightening. Don't

 * look at this too closely, you'll go blind.

 SPDX-License-Identifier: GPL-2.0

/*

 * arch/alpha/lib/checksum.c

 *

 * This file contains network checksum routines that are better done

 * in an architecture-specific manner due to speed..

 * Comments in other versions indicate that the algorithms are from RFC1071

 *

 * accelerated versions (and 21264 assembly versions ) contributed by

 *	Rick Gorton	<rick.gorton@alpha-processor.com>

	/* Using extract instructions is a bit more efficient

	/* Since the bits of tmp_v.sh[3] are going to always be zero,

 Similarly, out_v.us[2] is always zero for the final add.  */

/*

 * computes the checksum of the TCP/UDP pseudo-header

 * returns a 16-bit checksum, already complemented.

	/* Fold down to 32-bits so we don't lose in the typedef-less 

 64 to 33 */

 33 to 32 */

/*

 * Do a 64-bit checksum on an arbitrary memory area..

 *

 * This isn't a great routine, but it's not _horrible_ either. The

 * inner loop could be unrolled a bit further, and there are better

 * ways to do the carry, but this is reasonable.

 nr of 16-bit words.. */

 nr of 32-bit words.. */

 nr of 64-bit words.. */

/*

 *	This is a version of ip_compute_csum() optimized for IP headers,

 *	which always checksum on 4 octet boundaries.

/*

 * computes the checksum of a memory block at buff, length len,

 * and adds in "sum" (32-bit)

 *

 * returns a 32-bit number suitable for feeding into itself

 * or csum_tcpudp_magic

 *

 * this function must be called with even lengths, except

 * for the last fragment, which may be odd

 *

 * it's best to have buff aligned on a 32-bit boundary

 add in old sum, and carry.. */

 32+c bits -> 32 bits */

/*

 * this routine is used for miscellaneous IP-like checksums, mainly

 * in icmp.c

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 1993, 2000 Linus Torvalds

 *

 * Delay routines, using a pre-computed "loops_per_jiffy" value.

 for udelay's use of smp_processor_id */

/*

 * Use only for very small delays (< 1 msec). 

 *

 * The active part of our cycle counter is only 32-bits wide, and

 * we're treating the difference between two marks as signed.  On

 * a 1GHz box, that's about 2 seconds.

 SPDX-License-Identifier: GPL-2.0

/*

 *	arch/alpha/lib/srm_puts.c

 SPDX-License-Identifier: GPL-2.0

/*

 * arch/alpha/lib/fpreg.c

 *

 * (C) Copyright 1998 Linus Torvalds

 SPDX-License-Identifier: GPL-2.0

/*

 * arch/alpha/boot/bootpz.c

 *

 * Copyright (C) 1997 Jay Estabrook

 *

 * This file is used for creating a compressed BOOTP file for the

 * Linux/AXP kernel

 *

 * based significantly on the arch/alpha/boot/main.c of Linus Torvalds

 * and the decompression code from MILO.

 FIXME FIXME FIXME */

 2MB for now */

 FIXME FIXME FIXME */

/*

  WARNING NOTE



  It is very possible that turning on additional messages may cause

  kernel image corruption due to stack usage to do the printing.



/*

 * Find a physical address of a virtual object..

 *

 * This is easy using the virtual page table address.

 do some range checking for detecting an overlap... */

/*

 * This function moves into OSF/1 pal-code, and has a temporary

 * PCB for that. The kernel proper should replace this PCB with

 * the real one as soon as possible.

 *

 * The page table muckery in here depends on the fact that the boot

 * code has the L1 page table identity-map itself in the second PTE

 * in the L1 page table. Thus the L1-page is virtually addressable

 * itself (through three levels) at virtual address 0x200802000.

 Create the dummy PCB.  */

	/*

	 * a0 = 2 (OSF)

	 * a1 = return address, but we give the asm the vaddr of the PCB

	 * a2 = physical addr of PCB

	 * a3 = new virtual page table pointer

	 * a4 = KSP (but the asm sets it)

 do it directly in case we are SMP */

/*

 * Start the kernel.

 no outputs: it doesn't even return */

/* Must record the SP (it is virtual) on entry, so we can make sure

/* Calculate the kernel image address based on the end of the BOOTP

   bootstrapper (ie this program).

 Round address to next higher page boundary. */

/* Defines from include/asm-alpha/system.h



	BOOT_ADDR	Virtual address at which the consoles loads

			the BOOTP image.



	KERNEL_START    KSEG address at which the kernel is built to run,

			which includes some initial data pages before the

			code.



	START_ADDR	KSEG address of the entry point of kernel code.



	ZERO_PGE	KSEG address of page full of zeroes, but 

			upon entry to kernel, it can be expected

			to hold the parameter list and possible

			INTRD information.



   These are used in the local defines below.

/* Virtual addresses for the BOOTP image. Note that this includes the

   bootstrapper code as well as the compressed kernel image, and

   possibly the INITRD image.



   Oh, and do NOT forget the STACK, which appears to be placed virtually

   beyond the end of the loaded image.

 Virtual addresses for just the bootstrapper part of the BOOTP image. */

/* Virtual addresses for just the data part of the BOOTP

   image. This may also include the INITRD image, but always

   includes the STACK.

/* KSEG addresses for the uncompressed kernel.



   Note that the end address includes workspace for the decompression.

   Note also that the DATA_START address is ZERO_PGE, to which we write

   just before jumping to the kernel image at START_ADDR.

/* Define to where we may have to decompress the kernel image, before

   we move it to the final position, in case of overlap. This will be

   above the final position of the kernel.



   Regardless of overlap, we move the INITRD image to the end of this

   copy area, because there needs to be a buffer area after the kernel

   for "bootmem" anyway.

 Reserve one page below INITRD for the new stack. */

	/* Initialize these for the decompression-in-place situation,

	   which is the smallest amount of work and most likely to

	   occur when using the normal START_ADDR of the kernel

	   (currently set to 16MB, to clear all console code.

	/*

	 * Note that this crufty stuff with static and envval

	 * and envbuf is because:

	 *

	 * 1. Frequently, the stack is short, and we don't want to overrun;

	 * 2. Frequently the stack is where we are going to copy the kernel to;

	 * 3. A certain SRM console required the GET_ENV output to stack.

	 *    ??? A comment in the aboot sources indicates that the GET_ENV

	 *    destination must be quadword aligned.  Might this explain the

	 *    behaviour, rather than requiring output to the stack, which

	 *    seems rather far-fetched.

 Validity check the HWRPB. */

 PALcode (re)initialization. */

 Get the parameter list from the console environment variable. */

	/* Since all the SRM consoles load the BOOTP image at virtual

	 * 0x20000000, we have to ensure that the physical memory

	 * pages occupied by that image do NOT overlap the physical

	 * address range where the kernel wants to be run.  This

	 * causes real problems when attempting to cdecompress the

	 * former into the latter... :-(

	 *

	 * So, we may have to decompress/move the kernel/INITRD image

	 * virtual-to-physical someplace else first before moving

	 * kernel /INITRD to their final resting places... ;-}

	 *

	 * Sigh...

	/* First, check to see if the range of addresses occupied by

	   the bootstrapper part of the BOOTP image include any of the

	   physical pages into which the kernel will be placed for

	   execution.



	   We only need check on the final kernel image range, since we

	   will put the INITRD someplace that we can be sure is not

	   in conflict.

	/* Next, check to see if the range of addresses occupied by

	   the compressed kernel/INITRD/stack portion of the BOOTP

	   image include any of the physical pages into which the

	   decompressed kernel or the INITRD will be placed for

	   execution.

		/* Finally, check to see if the range of addresses

		   occupied by the compressed kernel/INITRD part of

		   the BOOTP image include any of the physical pages

		   into which that part is to be copied for

		   decompression.

 Keep as close as possible to end of BOOTP image. */

	/*

	 * Now, move things to their final positions, if/as required.

 First, we always move the INITRD image, if present. */

 INITRD_IMAGE_SIZE */

	/* Next, we may have to move the uncompressed kernel to the

	   final destination.

		/*

		 * Move the stack to a safe place to ensure it won't be

		 * overwritten by kernel image.

 Clear the zero page, then move the argument list in. */

 Finally, set the INITRD paramenters for the kernel. */

 INITRD_IMAGE_SIZE */

 dummy function, should never be called. */

 SPDX-License-Identifier: GPL-2.0

/*

 * arch/alpha/boot/bootp.c

 *

 * Copyright (C) 1997 Jay Estabrook

 *

 * This file is used for creating a bootp file for the Linux/AXP kernel

 *

 * based significantly on the arch/alpha/boot/main.c of Linus Torvalds

/*

 * Find a physical address of a virtual object..

 *

 * This is easy using the virtual page table address.

/*

 * This function moves into OSF/1 pal-code, and has a temporary

 * PCB for that. The kernel proper should replace this PCB with

 * the real one as soon as possible.

 *

 * The page table muckery in here depends on the fact that the boot

 * code has the L1 page table identity-map itself in the second PTE

 * in the L1 page table. Thus the L1-page is virtually addressable

 * itself (through three levels) at virtual address 0x200802000.

 Create the dummy PCB.  */

	/*

	 * a0 = 2 (OSF)

	 * a1 = return address, but we give the asm the vaddr of the PCB

	 * a2 = physical addr of PCB

	 * a3 = new virtual page table pointer

	 * a4 = KSP (but the asm sets it)

 do it directly in case we are SMP */

/*

 * Start the kernel.

 no outputs: it doesn't even return */

	/*

	 * Note that this crufty stuff with static and envval

	 * and envbuf is because:

	 *

	 * 1. Frequently, the stack is short, and we don't want to overrun;

	 * 2. Frequently the stack is where we are going to copy the kernel to;

	 * 3. A certain SRM console required the GET_ENV output to stack.

	 *    ??? A comment in the aboot sources indicates that the GET_ENV

	 *    destination must be quadword aligned.  Might this explain the

	 *    behaviour, rather than requiring output to the stack, which

	 *    seems rather far-fetched.

	/* The initrd must be page-aligned.  See below for the 

	/*

	 * Move the stack to a safe place to ensure it won't be

	 * overwritten by kernel image.

 NOTE: *no* callbacks or printouts from here on out!!! */

	/* This is a hack, as some consoles seem to get virtual 20000000 (ie

	 * where the SRM console puts the kernel bootp image) memory

	 * overlapping physical memory where the kernel wants to be put,

	 * which causes real problems when attempting to copy the former to

	 * the latter... :-(

	 *

	 * So, we first move the kernel virtual-to-physical way above where

	 * we physically want the kernel to end up, then copy it from there

	 * to its final resting place... ;-}

	 *

 SPDX-License-Identifier: GPL-2.0

/*

 * misc.c

 * 

 * This is a collection of several routines from gzip-1.0.3 

 * adapted for Linux.

 *

 * malloc by Hannu Savolainen 1993 and Matthias Urlichs 1994

 *

 * Modified for ARM Linux by Russell King

 *

 * Nicolas Pitre <nico@visuaide.com>  1999/04/14 :

 *  For this code to run directly from Flash, all constant variables must

 *  be marked with 'const' and all other variables initialized at run-time 

 *  only.  This way all non constant variables will end up in the bss segment,

 *  which should point to addresses in RAM and cleared to 0 on start.

 *  This allows for a much quicker boot time.

 *

 * Modified for Alpha, from the ARM version, by Jay Estabrook 2003.

/*

 * gzip declarations

 Window size must be at least 32k, */

 and a power of two */

 input buffer */

 Sliding window buffer */

 valid bytes in inbuf */

 index of next byte to be processed in inbuf */

 bytes in output buffer */

 gzip flag byte */

 bit 0 set: file probably ascii text */

 bit 1 set: continuation of multi-part gzip file */

 bit 2 set: extra field present */

 bit 3 set: original file name present */

 bit 4 set: file comment present */

 bit 5 set: file is encrypted */

 bit 6,7:   reserved */

 Diagnostic functions */

/* ===========================================================================

 * Fill the input buffer. This is called only when the buffer is empty

 * and at least one byte is really needed.

/* ===========================================================================

 * Write the output window window[0..outcnt-1] and update crc and bytes_out.

 * (Used for the decompressed data only.)

	puts("."); */

 Halt */

 use compressed size */

 FIXME FIXME FIXME */

 FIXME FIXME FIXME */

 put in temp area to reduce initial footprint */

	puts("Uncompressing Linux..."); */

	puts(" done, booting the kernel.\n"); */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) Paul Mackerras 1997.

 nothing */;

 pad with zero */

 unsigned/signed long */

 show plus */

 space if plus */

 left justified */

 0x */

 use 'ABCDEF' instead of 'abcdef' */

 flags to number() */

 width of output field */

	int precision;		/* min. # of digits for integers; max

 'h', 'l', or 'L' for integer fields */

 'z' support added 23/7/1999 S.H.    */

 'z' changed to 'Z' --davidm 1/25/99 */

 process flags */

 this also skips first '%' */

 get field width */

 it's the next argument */

 get the precision */

 it's the next argument */

 get the conversion qualifier */

 default base */

 integer number formats - set up the flags and "break" */

 SPDX-License-Identifier: GPL-2.0

/*

 * arch/alpha/boot/main.c

 *

 * Copyright (C) 1994, 1995 Linus Torvalds

 *

 * This file is the bootloader for the Linux/AXP kernel

/*

 * Find a physical address of a virtual object..

 *

 * This is easy using the virtual page table address.

/*

 * This function moves into OSF/1 pal-code, and has a temporary

 * PCB for that. The kernel proper should replace this PCB with

 * the real one as soon as possible.

 *

 * The page table muckery in here depends on the fact that the boot

 * code has the L1 page table identity-map itself in the second PTE

 * in the L1 page table. Thus the L1-page is virtually addressable

 * itself (through three levels) at virtual address 0x200802000.

 Create the dummy PCB.  */

	/*

	 * a0 = 2 (OSF)

	 * a1 = return address, but we give the asm the vaddr of the PCB

	 * a2 = physical addr of PCB

	 * a3 = new virtual page table pointer

	 * a4 = KSP (but the asm sets it)

 do it directly in case we are SMP */

/*

 * Start the kernel.

 no outputs: it doesn't even return */

 nothing */;

 SPDX-License-Identifier: GPL-2.0

 This utility makes a bootblock suitable for the SRM console/miniloader */

/* Usage:

 *	mkbb <device> <lxboot>

 *

 * Where <device> is the name of the device to install the bootblock on,

 * and <lxboot> is the name of a bootblock to merge in.  This bootblock

 * contains the offset and size of the bootloader.  It must be exactly

 * 512 bytes long.

/* Minimal definition of disklabel, so we don't have to include

 * asm/disklabel.h (confuses make)

 max. # of partitions */

 must be DISKLABELMAGIC */

 must be DISKLABELMAGIC */

 Make sure of the arg count */

 First, open the device and make sure it's accessible */

 Now open the lxboot and make sure it's reasonable */

 Read in the lxboot */

 Read in the bootblock from disk. */

 Swap the bootblock's disklabel into the bootloader */

 Calculate the bootblock checksum */

 Write the whole thing out! */

 SPDX-License-Identifier: GPL-2.0

/*

 * arch/alpha/boot/tools/objstrip.c

 *

 * Strip the object file headers/trailers from an executable (ELF or ECOFF).

 *

 * Copyright (C) 1996 David Mosberger-Tang.

/*

 * Converts an ECOFF or ELF object file into a bootable file.  The

 * object file must be a OMAGIC file (i.e., data and bss follow immediately

 * behind the text).  See DEC "Assembly Language Programmer's Guide"

 * documentation for details.  The SRM boot process is documented in

 * the Alpha AXP Architecture Reference Manual, Second Edition by

 * Richard L. Sites and Richard T. Witek.

 bootfile size must be multiple of BLOCK_SIZE: */

 includes file & aout header */

 program header */

 make primary bootblock */

 generate bootblock for primary loader */

 count */

 starting sector # */

 flags---must be 0 */

 read and inspect exec header: */

 work around ELF bug: */

 SPDX-License-Identifier: GPL-2.0

/*

 * Baboon Custom IC Management

 *

 * The Baboon custom IC controls the IDE, PCMCIA and media bay on the

 * PowerBook 190. It multiplexes multiple interrupt sources onto the

 * Nubus slot $C interrupt.

/*

 * Baboon initialization.

/*

 * Baboon interrupt handler.

 * XXX how do you clear a pending IRQ? is it even necessary?

/*

 * Register the Baboon interrupt dispatcher on nubus slot $C.

/*

 * The means for masking individual Baboon interrupts remains a mystery.

 * However, since we only use the IDE IRQ, we can just enable/disable all

 * Baboon interrupts. If/when we handle more than one Baboon IRQ, we must

 * either figure out how to mask them individually or else implement the

 * same workaround that's used for NuBus slots (see nubus_disabled and

 * via_nubus_irq_shutdown).

 SPDX-License-Identifier: GPL-2.0

/*

 *	6522 Versatile Interface Adapter (VIA)

 *

 *	There are two of these on the Mac II. Some IRQs are vectored

 *	via them as are assorted bits and bobs - eg RTC, ADB.

 *

 * CSA: Motorola seems to have removed documentation on the 6522 from

 * their web site; try

 *     http://nerini.drf.com/vectrex/other/text/chips/6522/

 *     http://www.zymurgy.net/classic/vic20/vicdet1.htm

 * and

 *     http://193.23.168.87/mikro_laborversuche/via_iobaustein/via6522_1.html

 * for info.  A full-text web search on 6522 AND VIA will probably also

 * net some usefulness. <cananian@alumni.princeton.edu> 20apr1999

 *

 * Additional data is here (the SY6522 was used in the Mac II etc):

 *     http://www.6502.org/documents/datasheets/synertek/synertek_sy6522.pdf

 *     http://www.6502.org/documents/datasheets/synertek/synertek_sy6522_programming_reference.pdf

 *

 * PRAM/RTC access algorithms are from the NetBSD RTC toolkit version 1.08b

 * by Erik Vogan and adapted to Linux by Joshua M. Thompson (funaho@jurai.org)

 *

/*

 * Globals for accessing the VIA chip registers without having to

 * check if we're hitting a real VIA or an RBV. Normally you could

 * just hit the combined register (ie, vIER|rIER) but that seems to

 * break on AV Macs...probably because they actually decode more than

 * eight address bits. Why can't Apple engineers at least be

 * _consistently_ lazy?                          - 1999-05-21 (jmt)

/*

 * On Macs with a genuine VIA chip there is no way to mask an individual slot

 * interrupt. This limitation also seems to apply to VIA clone logic cores in

 * Quadra-like ASICs. (RBV and OSS machines don't have this limitation.)

 *

 * We used to fake it by configuring the relevant VIA pin as an output

 * (to mask the interrupt) or input (to unmask). That scheme did not work on

 * (at least) the Quadra 700. A NuBus card's /NMRQ signal is an open-collector

 * circuit (see Designing Cards and Drivers for Macintosh II and Macintosh SE,

 * p. 10-11 etc) but VIA outputs are not (see datasheet).

 *

 * Driving these outputs high must cause the VIA to source current and the

 * card to sink current when it asserts /NMRQ. Current will flow but the pin

 * voltage is uncertain and so the /NMRQ condition may still cause a transition

 * at the VIA2 CA1 input (which explains the lost interrupts). A side effect

 * is that a disabled slot IRQ can never be tested as pending or not.

 *

 * Driving these outputs low doesn't work either. All the slot /NMRQ lines are

 * (active low) OR'd together to generate the CA1 (aka "SLOTS") interrupt (see

 * The Guide To Macintosh Family Hardware, 2nd edition p. 167). If we drive a

 * disabled /NMRQ line low, the falling edge immediately triggers a CA1

 * interrupt and all slot interrupts after that will generate no transition

 * and therefore no interrupt, even after being re-enabled.

 *

 * So we make the VIA port A I/O lines inputs and use nubus_disabled to keep

 * track of their states. When any slot IRQ becomes disabled we mask the CA1

 * umbrella interrupt. Only when all slot IRQs become enabled do we unmask

 * the CA1 interrupt. It must remain enabled even when cards have no interrupt

 * handler registered. Drivers must therefore disable a slot interrupt at the

 * device before they call free_irq (like shared and autovector interrupts).

 *

 * There is also a related problem when MacOS is used to boot Linux. A network

 * card brought up by a MacOS driver may raise an interrupt while Linux boots.

 * This can be fatal since it can't be handled until the right driver loads

 * (if such a driver exists at all). Apparently related to this hardware

 * limitation, "Designing Cards and Drivers", p. 9-8, says that a slot

 * interrupt with no driver would crash MacOS (the book was written before

 * the appearance of Macs with RBV or OSS).

/*

 * Initialize the VIAs

 *

 * First we figure out where they actually _are_ as well as what type of

 * VIA we have for VIA2 (it could be a real VIA or an RBV or even an OSS.)

 * Then we pretty much clear them out and disable all IRQ sources.

 IIci, IIsi, IIvx, IIvi (P6xx), LC series */

 on most RBVs (& unlike the VIAs), you   */

 need to set bit 7 when you write to IFR */

 in order for your clear to occur.       */

 Quadra and early MacIIs agree on the VIA locations */

	/*

	 * Shut down all IRQ sources, reset the timers, and

	 * kill the timer latch on VIA1.

 setup T1 timer with no PB7 output */

 disable port A & B latches */

	/*

	 * SE/30: disable video IRQ

		/*

		 * Set the RTC bits to a known state: all lines to outputs and

		 * RTC disabled (yes that's 0 to enable and 1 to disable).

 Everything below this point is VIA2/RBV only... */

	/*

	 * Now initialize VIA2. For RBV we just kill all interrupts;

	 * for a regular VIA we also reset the timers and stuff.

 setup T1 timer with no PB7 output */

 disable port A & B latches */

 Everything below this point is VIA2 only... */

	/*

	 * Set vPCR for control line interrupts.

	 *

	 * CA1 (SLOTS IRQ), CB1 (ASC IRQ): negative edge trigger.

	 *

	 * Macs with ESP SCSI have a negative edge triggered SCSI interrupt.

	 * Testing reveals that PowerBooks do too. However, the SE/30

	 * schematic diagram shows an active high NCR5380 IRQ line.

 CA2 (SCSI DRQ), CB2 (SCSI IRQ): indep. input, pos. edge */

 CA2 (SCSI DRQ), CB2 (SCSI IRQ): indep. input, neg. edge */

/*

 * Debugging dump, used in various places to see what's going on.

/*

 * Flush the L2 cache on Macs that have it by flipping

 * the system into 24-bit mode for an instant.

/*

 * Initialize VIA2 for Nubus access

 unlock nubus transactions */

 set the line to be an output on non-RBV machines */

 this seems to be an ADB bit on PMU machines */

 according to MkLinux.  -- jmt               */

	/*

	 * Disable the slot interrupts. On some hardware that's not possible.

	 * On some hardware it's unclear what all of these I/O lines do.

 RBV. Disable all the slot interrupts. SIER works like IER. */

 Make the port A line an input. Probably redundant. */

 The top two bits are RAM size outputs. */

 Allow NuBus slots 9 through F. */

 Ensure that the umbrella CA1 interrupt remains enabled. */

/*

 * The generic VIA interrupt routines (shamelessly stolen from Alan Cox's

 * via6522.c :-), disable/pending masks added.

/*

 * Dispatch Nubus interrupts. We are called as a secondary dispatch by the

 * VIA2 dispatcher as a fast interrupt handler.

 clear the CA1 interrupt and make certain there's no more. */

/*

 * Register the interrupt dispatchers for VIA or RBV machines only.

 software interrupt */

 via1 interrupt */

 Enable the CA1 interrupt when no slot is disabled. */

			/* On RBV, enable the slot interrupt.

			 * SIER works like IER.

 timer and clock source */

 VIA "phase 2" clock in Hz */

 clock cycles per jiffy */

 including 0 and -1 */

	/*

	 * Timer counter wrap-around is detected with the timer interrupt flag

	 * but reading the counter low byte (vT1CL) would reset the flag.

	 * Also, accessing both counter registers is essentially a data race.

	 * These problems are avoided by ignoring the low byte. Clock accuracy

	 * is 256 times worse (error can reach 0.327 ms) but CPU overhead is

	 * reduced by avoiding slow VIA register accesses.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *	Apple Peripheral System Controller (PSC)

 *

 *	The PSC is used on the AV Macs to control IO functions not handled

 *	by the VIAs (Ethernet, DSP, SCC).

 *

 * TO DO:

 *

 * Try to figure out what's going on in pIFR5 and pIFR6. There seem to be

 * persisant interrupt conditions in those registers and I have no idea what

 * they are. Granted it doesn't affect since we're not enabling any interrupts

 * on those levels at the moment, but it would be nice to know. I have a feeling

 * they aren't actually interrupt lines but data lines (to the DSP?)

/*

 * Debugging dump, used in various places to see what's going on.

/*

 * Try to kill all DMA channels on the PSC. Not sure how this his

 * supposed to work; this is code lifted from macmace.c and then

 * expanded to cover what I think are the other 7 channels.

/*

 * Initialize the PSC. For now this just involves shutting down all

 * interrupt sources using the IERs.

	/*

	 * The PSC is always at the same spot, but using psc

	 * keeps things consistent with the psc_xxxx functions.

	/*

	 * Mask and clear all possible interrupts

/*

 * PSC interrupt handler. It's a lot like the VIA interrupt handler.

/*

 * Register the PSC interrupt dispatchers for autovector interrupts 3-6.

 SPDX-License-Identifier: GPL-2.0

/*

 *	Operating System Services (OSS) chip handling

 *	Written by Joshua M. Thompson (funaho@jurai.org)

 *

 *

 *	This chip is used in the IIfx in place of VIA #2. It acts like a fancy

 *	VIA chip with prorammable interrupt levels.

 *

 * 990502 (jmt) - Major rewrite for new interrupt architecture as well as some

 *		  recent insights into OSS operational details.

 * 990610 (jmt) - Now taking full advantage of the OSS. Interrupts are mapped

 *		  to mostly match the A/UX interrupt scheme supported on the

 *		  VIA side. Also added support for enabling the ISM irq again

 *		  since we now have a functional IOP manager.

/*

 * Initialize the OSS

 Disable all interrupts. Unlike a VIA it looks like we    */

 do this by setting the source's interrupt level to zero. */

/*

 * Handle OSS interrupts.

 * XXX how do you clear a pending IRQ? is it even necessary?

/*

 * Register the OSS and NuBus interrupt dispatchers.

 *

 * This IRQ mapping is laid out with two things in mind: first, we try to keep

 * things on their own levels to avoid having to do double-dispatches. Second,

 * the levels match as closely as possible the alternate IRQ mapping mode (aka

 * "A/UX mode") available on some VIA machines.

 OSS_VIA1 gets enabled here because it has no machspec interrupt. */

/*

 * Enable an OSS interrupt

 *

 * It looks messy but it's rather straightforward. The switch() statement

 * just maps the machspec interrupt numbers to the right OSS interrupt

 * source (if the OSS handles that interrupt) and then sets the interrupt

 * level for that source to nonzero, thus enabling the interrupt.

/*

 * Disable an OSS interrupt

 *

 * Same as above except we set the source's interrupt level to zero,

 * to disable the interrupt.

 SPDX-License-Identifier: GPL-2.0

/*

 * Miscellaneous Mac68K-specific stuff

/*

 * Offset between Unix time (1970-based) and Mac time (1904-based). Cuda and PMU

 * times wrap in 2040. If we need to handle later times, the read_time functions

 * need to be changed to interpret wrapped times as post-2040.

 CONFIG_ADB_CUDA */

 CONFIG_ADB_PMU */

 CONFIG_NVRAM */

/*

 * VIA PRAM/RTC access routines

 *

 * Must be called with interrupts disabled and

 * the RTC should be enabled.

 Set the RTC data line to be an input. */

 The bits of the byte come out in MSB order */

 Return RTC data line to output state */

 The bits of the byte go in in MSB order */

/*

 * These values can be found in Inside Macintosh vol. III ch. 2

 * which has a description of the RTC chip in the original Mac.

/*

 * Inside Mac has no information about two-byte RTC commands but

 * the MAME/MESS source code has the essentials.

/*

 * Execute a VIA PRAM/RTC command. For read commands

 * data should point to a one-byte buffer for the

 * resulting data. For write commands it should point

 * to the data byte to for the command.

 *

 * This function disables all interrupts while running.

 The least significant bits must be 0b01 according to Inside Mac */

 Enable the RTC and make sure the strobe line is high */

 extended (two-byte) command */

 one-byte command */

 All done, disable the RTC */

 CONFIG_NVRAM */

/*

 * Return the current time in seconds since January 1, 1904.

 *

 * This only works on machines with the VIA-based PRAM/RTC, which

 * is basically any machine with Mac II-style ADB.

	/*

	 * The NetBSD guys say to loop until you get the same reading

	 * twice in a row.

/*

 * Set the current time to a number of seconds since January 1, 1904.

 *

 * This only works on machines with the VIA-based PRAM/RTC, which

 * is basically any machine with Mac II-style ADB.

 Clear the write protect bit */

 Set the write protect bit */

 Direction of vDirB is output */

 Send a value of 0 on that line */

 Avoid infinite polling loop when PSU is not under Cuda control */

 CONFIG_ADB_CUDA */

/*

 *-------------------------------------------------------------------

 * Below this point are the generic routines; they'll dispatch to the

 * correct routine for the hardware on which we're running.

 *-------------------------------------------------------------------

 CONFIG_NVRAM */

 need ROMBASE in booter */

 indeed, plus need to MAP THE ROM !! */

 works on some */

		/* 030-specific reset routine.  The idea is general, but the

		 * specific registers to reset are '030-specific.  Until I

		 * have a non-030 machine, I can't test anything else.

		 *  -- C. Scott Ananian <cananian@alumni.princeton.edu>

 make a 1-to-1 mapping, using the transparent tran. reg. */

 lets not screw this up, ok? */

 Now jump to physical address so we can disable MMU */

 fixup target address and stack ptr */

 jump into physical memory */

 a constant zero. */

 OK.  Now reset everything and jump to reset vector. */

 disable mmu */

 disable tt0 */

 disable tt1 */

 clear vector base register */

 disable caches */

 flush i&d caches */

 set up status register */

 load interrupt stack pointer */

 load reset vector */

 reset external devices */

 jump to the reset vector */

 should never get here */

/*

 * This function translates seconds since 1970 into a proper date.

 *

 * Algorithm cribbed from glibc2.1, __offtime().

 *

 * This is roughly same as rtc_time64_to_tm(), which we should probably

 * use here, but it's only available when CONFIG_RTC_LIB is enabled.

 How many days come before each month (0-12).  */

 Normal years.  */

 Leap years.  */

 January 1, 1970 was a Thursday. */

 Day in the week. Not currently used */

 Guess a corrected year, assuming 365 days per year.  */

 Adjust DAYS and Y to match the guessed year.  */

 day in the year.  Not currently used. */

 day in the month */

/*

 * Read/write the hardware clock.

 read */

 write */

 SPDX-License-Identifier: GPL-2.0

/*

 *	Mac bong noise generator. Note - we ought to put a boingy noise

 *	here 8)

 *

 *	----------------------------------------------------------------------

 *	16.11.98:

 *	rewrote some functions, added support for Enhanced ASC (Quadras)

 *	after the NetBSD asc.c console bell patch by Colin Wood/Frederick Bruck

 *	Juergen Mellinger (juergen.mellinger@t-online.de)

/*

 * dumb triangular wave table

/*

 * Alan's original sine table; needs interpolating to 0x800

 * (hint: interpolate or hardwire [0 -> Pi/2[, it's symmetric)

/*

 * where the ASC hides ...

/*

 * sample rate; is this a good default value?

 0..2*Pi -> 0..0x800 (wavetable size) */

/*

 * some function protos

/*

 * our timer to start/continue/stop the bell

/*

 * Sort of initialize the sound chip (called from mac_mksound on the first

 * beep).

	/*

	 * do some machine specific initialization

	 * BTW:

	 * the NetBSD Quadra patch identifies the Enhanced Apple Sound Chip via

	 *	mac_asc_regs[ 0x800 ] & 0xF0 != 0

	 * this makes no sense here, because we have to set the default sample

	 * rate anyway if we want correct frequencies

			/*

			 * The IIfx is always special ...

			/*

			 * not sure about how correct this list is

			 * machines with the EASC enhanced apple sound chip

			/*

			 * The Quadra 660AV and 840AV use the "Singer" custom ASIC for sound I/O.

			 * It appears to be similar to the "AWACS" custom ASIC in the Power Mac

			 * [678]100.  Because Singer and AWACS may have a similar hardware

			 * interface, this would imply that the code in drivers/sound/dmasound.c

			 * for AWACS could be used as a basis for Singer support.  All we have to

			 * do is figure out how to do DMA on the 660AV/840AV through the PSC and

			 * figure out where the Singer hardware sits in memory. (I'd look in the

			 * vicinity of the AWACS location in a Power Mac [678]100 first, or the

			 * current location of the Apple Sound Chip--ASC--in other Macs.)  The

			 * Power Mac [678]100 info can be found in MkLinux Mach kernel sources.

			 *

			 * Quoted from Apple's Tech Info Library, article number 16405:

			 *   "Among desktop Macintosh computers, only the 660AV, 840AV, and Power

			 *   Macintosh models have 16-bit audio input and output capability

			 *   because of the AT&T DSP3210 hardware circuitry and the 16-bit Singer

			 *   codec circuitry in the AVs.  The Audio Waveform Amplifier and

			 *   Converter (AWAC) chip in the Power Macintosh performs the same

			 *   16-bit I/O functionality.  The PowerBook 500 series computers

			 *   support 16-bit stereo output, but only mono input."

			 *

			 *   Technical Information Library (TIL) article number 16405. 

			 *   https://support.apple.com/kb/TA32601

			 *

			 * --David Kilzer

			/*

			 * Currently not implemented!

			/*

			 * Every switch needs a default

	/*

	 * init the wave table with a simple triangular wave

	 * A sine wave would sure be nicer here ...

/*

 * Called to make noise; current single entry to the boing driver.

 * Does the job for simple ASC, calls other routines else.

 * XXX Fixme:

 * Should be split into asc_mksound, easc_mksound, av_mksound and

 * function pointer set in mac_init_asc which would be called at

 * init time.

 * _This_ is rather ugly ...

 Do nothing */

/*

 * regular ASC: stop whining ..

/*

 * EASC entry; init EASC, don't load wavetable, schedule 'start whining'.

 if the bell is already ringing, ring longer */

 this is reasonably big for small frequencies */

 set the volume */

 set up the ASC registers */

 select mono mode */

 select sampled sound mode */

 ??? */

/*

 * EASC 'start/continue whining'; I'm not sure why the above function didn't

 * already load the wave table, or at least call this one...

 * This piece keeps reloading the wave table until done.

	/*

	 * we neither want a sound buffer overflow nor underflow, so we need to match

	 * the number of samples per timer interrupt as exactly as possible.

	 * using the asc interrupt will give better results in the future

	 * ...and the possibility to use a real sample (a boingy noise, maybe...)

/*

 * AV code - please fill in.

 SPDX-License-Identifier: GPL-2.0

/*

 *	Macintosh interrupts

 *

 * General design:

 * In contrary to the Amiga and Atari platforms, the Mac hardware seems to

 * exclusively use the autovector interrupts (the 'generic level0-level7'

 * interrupts with exception vectors 0x19-0x1f). The following interrupt levels

 * are used:

 *	1	- VIA1

 *		  - slot 0: one second interrupt (CA2)

 *		  - slot 1: VBlank (CA1)

 *		  - slot 2: ADB data ready (SR full)

 *		  - slot 3: ADB data  (CB2)

 *		  - slot 4: ADB clock (CB1)

 *		  - slot 5: timer 2

 *		  - slot 6: timer 1

 *		  - slot 7: status of IRQ; signals 'any enabled int.'

 *

 *	2	- VIA2 or RBV

 *		  - slot 0: SCSI DRQ (CA2)

 *		  - slot 1: NUBUS IRQ (CA1) need to read port A to find which

 *		  - slot 2: /EXP IRQ (only on IIci)

 *		  - slot 3: SCSI IRQ (CB2)

 *		  - slot 4: ASC IRQ (CB1)

 *		  - slot 5: timer 2 (not on IIci)

 *		  - slot 6: timer 1 (not on IIci)

 *		  - slot 7: status of IRQ; signals 'any enabled int.'

 *

 * Levels 3-6 vary by machine type. For VIA or RBV Macintoshes:

 *

 *	3	- unused (?)

 *

 *	4	- SCC

 *

 *	5	- unused (?)

 *		  [serial errors or special conditions seem to raise level 6

 *		  interrupts on some models (LC4xx?)]

 *

 *	6	- off switch (?)

 *

 * Machines with Quadra-like VIA hardware, except PSC and PMU machines, support

 * an alternate interrupt mapping, as used by A/UX. It spreads ethernet and

 * sound out to their own autovector IRQs and gives VIA1 a higher priority:

 *

 *	1	- unused (?)

 *

 *	3	- on-board SONIC

 *

 *	5	- Apple Sound Chip (ASC)

 *

 *	6	- VIA1

 *

 * For OSS Macintoshes (IIfx only), we apply an interrupt mapping similar to

 * the Quadra (A/UX) mapping:

 *

 *	1	- ISM IOP (ADB)

 *

 *	2	- SCSI

 *

 *	3	- NuBus

 *

 *	4	- SCC IOP

 *

 *	6	- VIA1

 *

 * For PSC Macintoshes (660AV, 840AV):

 *

 *	3	- PSC level 3

 *		  - slot 0: MACE

 *

 *	4	- PSC level 4

 *		  - slot 1: SCC channel A interrupt

 *		  - slot 2: SCC channel B interrupt

 *		  - slot 3: MACE DMA

 *

 *	5	- PSC level 5

 *

 *	6	- PSC level 6

 *

 * Finally we have good 'ole level 7, the non-maskable interrupt:

 *

 *	7	- NMI (programmer's switch on the back of some Macs)

 *		  Also RAM parity error on models which support it (IIc, IIfx?)

 *

 * The current interrupt logic looks something like this:

 *

 * - We install dispatchers for the autovector interrupts (1-7). These

 *   dispatchers are responsible for querying the hardware (the

 *   VIA/RBV/OSS/PSC chips) to determine the actual interrupt source. Using

 *   this information a machspec interrupt number is generated by placing the

 *   index of the interrupt hardware into the low three bits and the original

 *   autovector interrupt number in the upper 5 bits. The handlers for the

 *   resulting machspec interrupt are then called.

 *

 * - Nubus is a special case because its interrupts are hidden behind two

 *   layers of hardware. Nubus interrupts come in as index 1 on VIA #2,

 *   which translates to IRQ number 17. In this spot we install _another_

 *   dispatcher. This dispatcher finds the interrupting slot number (9-F) and

 *   then forms a new machspec interrupt number as above with the slot number

 *   minus 9 in the low three bits and the pseudo-level 7 in the upper five

 *   bits.  The handlers for this new machspec interrupt number are then

 *   called. This puts Nubus interrupts into the range 56-62.

 *

 * - The Baboon interrupts (used on some PowerBooks) are an even more special

 *   case. They're hidden behind the Nubus slot $C interrupt thus adding a

 *   third layer of indirection. Why oh why did the Apple engineers do that?

 *

	/*

	 * Now register the handlers for the master IRQ handlers

	 * at levels 1-7. Most of the work is done elsewhere.

/*

 *  mac_irq_enable - enable an interrupt source

 * mac_irq_disable - disable an interrupt source

 *

 * These routines are just dispatchers to the VIA/OSS/PSC routines.

/*

 *  linux/arch/m68k/mac/config.c

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * Miscellaneous linux stuff

 keyb */

 keyb */

 Mac bootinfo struct */

 The phys. video addr. - might be bogus on some machines */

/*

 * Parse a Macintosh-specific record in the bootinfo

	/*

	 * Determine hardware present

	/*

	 * AFAIK only the IIci takes a cache card.  The IIfx has onboard

	 * cache ... someone needs to figure out how to tell if it's on or

	 * not.

/*

 * Macintosh Table: hardcoded model configuration data.

 *

 * Much of this was defined by Alan, based on who knows what docs.

 * I've added a lot more, and some of that was pure guesswork based

 * on hardware pages present on the Mac web site. Possibly wildly

 * inaccurate, so look here if a new Mac model won't run. Example: if

 * a Mac crashes immediately after the VIA1 registers have been dumped

 * to the screen, it probably died attempting to read DirB on a RBV.

 * Meaning it should have MAC_VIA_IICI here :-)

	/*

	 * We'll pretend to be a Macintosh II, that's pretty safe.

 IWM */

	/*

	 * Original Mac II hardware

 IWM */

 SWIM */

 SWIM */

 SWIM */

	/*

	 * Weirdified Mac II hardware - all subtly different. Gee thanks

	 * Apple. All these boxes seem to have VIA2 in a different place to

	 * the Mac II (+1A000 rather than +4000)

	 * CSA: see http://developer.apple.com/technotes/hw/hw_09.html

 SWIM */

 SWIM */

 SWIM */

 SWIM */

 SWIM */

	/*

	 * Classic models (guessing: similar to SE/30? Nope, similar to LC...)

 SWIM */

 SWIM 2 */

 SWIM 2 */

	/*

	 * Some Mac LC machines. Basically the same as the IIci, ADB like IIsi

 SWIM */

 SWIM */

 SWIM 2 */

	/*

	 * Quadra. Video is at 0xF9000000, via is like a MacII. We label it

	 * differently as some of the stuff connected to VIA2 seems different.

	 * Better SCSI chip and onboard ethernet using a NatSemi SONIC except

	 * the 660AV and 840AV which use an AMD 79C940 (MACE).

	 * The 700, 900 and 950 have some I/O chips in the wrong place to

	 * confuse us. The 840AV has a SCSI location of its own (same as

	 * the 660AV).

 SWIM 2 */

 SWIM 2 */

 SWIM 2 */

 SWIM 2 */

 SWIM 2 */

 The Q700 does have a NS Sonic */

 SWIM */

 SWIM 2 */

 New Age */

 SWIM */

 SWIM */

	/*

	 * Performa - more LC type machines

 SWIM 2 */

 SWIM 2 */

 SWIM 2 */

 SWIM 2 */

 SWIM 2 */

 These have the comm slot, and therefore possibly SONIC ethernet */

 SWIM 2 */

 SWIM 2 */

 SWIM 2 */

 SWIM */

	/*

	 * Centris - just guessing again; maybe like Quadra.

	 * The C610 may or may not have SONIC. We probe to make sure.

 SWIM 2 */

 SWIM 2 */

 New Age */

	/*

	 * The PowerBooks all the same "Combo" custom IC for SCSI and SCC

	 * and a PMU (in two variations?) for ADB. Most of them use the

	 * Quadra-style VIAs. A few models also have IDE from hell.

 SWIM */

 SWIM */

 SWIM */

 SWIM */

 SWIM */

 SWIM */

 SWIM */

 SWIM */

 SWIM */

 SWIM 2 */

 SWIM 2 */

	/*

	 * PowerBook Duos are pretty much like normal PowerBooks

	 * All of these probably have onboard SONIC in the Dock which

	 * means we'll have to probe for it eventually.

 SWIM */

 SWIM */

 SWIM */

 SWIM */

 SWIM */

 SWIM */

	/*

	 * Other stuff?

 Penguin data useful? */

 no bootinfo model id -> NetBSD booter was used! */

 XXX FIXME: breaks for model > 31 */

 Set up serial port resources for the console initcall. */

 On non-PSC machines, the serial ports share an IRQ. */

	/*

	 * Report booter data:

	/*

	 * Serial devices

	/*

	 * Floppy device

	/*

	 * SCSI device(s)

		/* Addresses from The Guide to Mac Family Hardware.

		 * $5000 8000 - $5000 9FFF: SCSI DMA

		 * $5000 A000 - $5000 BFFF: Alternate SCSI

		 * $5000 C000 - $5000 DFFF: Alternate SCSI (DMA)

		 * $5000 E000 - $5000 FFFF: Alternate SCSI (Hsk)

		 * The A/UX header file sys/uconfig.h says $50F0 8000.

		 * The "SCSI DMA" custom IC embeds the 53C80 core and

		 * supports Programmed IO, DMA and PDMA (hardware handshake).

		/* Addresses from the Duo Dock II Developer Note.

		 * $FEE0 2000 - $FEE0 3FFF: normal mode

		 * $FEE0 4000 - $FEE0 5FFF: pseudo DMA without /DRQ

		 * $FEE0 6000 - $FEE0 7FFF: pseudo DMA with /DRQ

		 * The NetBSD code indicates that both 5380 chips share

		 * an IRQ (?) which would need careful handling (see mac_esp).

		/* Addresses from Developer Notes for Duo System,

		 * PowerBook 180 & 160, 140 & 170, Macintosh IIsi

		 * and also from The Guide to Mac Family Hardware for

		 * SE/30, II, IIx, IIcx, IIci.

		 * $5000 6000 - $5000 7FFF: pseudo-DMA with /DRQ

		 * $5001 0000 - $5001 1FFF: normal mode

		 * $5001 2000 - $5001 3FFF: pseudo-DMA without /DRQ

		 * GMFH says that $5000 0000 - $50FF FFFF "wraps

		 * $5000 0000 - $5001 FFFF eight times" (!)

		 * mess.org says IIci and Color Classic do not alias

		 * I/O address space.

		/* Addresses from Mac LC data in Designing Cards & Drivers 3ed.

		 * Also from the Developer Notes for Classic II, LC III,

		 * Color Classic and IIvx.

		 * $50F0 6000 - $50F0 7FFF: SCSI handshake

		 * $50F1 0000 - $50F1 1FFF: SCSI

		 * $50F1 2000 - $50F1 3FFF: SCSI DMA

	/*

	 * IDE device

	/*

	 * Ethernet device

/*

 * I/O Processor (IOP) management

 * Written and (C) 1999 by Joshua M. Thompson (funaho@jurai.org)

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice and this list of conditions.

 * 2. Redistributions in binary form must reproduce the above copyright

 *    notice and this list of conditions in the documentation and/or other

 *    materials provided with the distribution.

/*

 * The IOP chips are used in the IIfx and some Quadras (900, 950) to manage

 * serial and ADB. They are actually a 6502 processor and some glue logic.

 *

 * 990429 (jmt) - Initial implementation, just enough to knock the SCC IOP

 *		  into compatible mode so nobody has to fiddle with the

 *		  Serial Switch control panel anymore.

 * 990603 (jmt) - Added code to grab the correct ISM IOP interrupt for OSS

 *		  and non-OSS machines (at least I hope it's correct on a

 *		  non-OSS machine -- someone with a Q900 or Q950 needs to

 *		  check this.)

 * 990605 (jmt) - Rearranged things a bit wrt IOP detection; iop_present is

 *		  gone, IOP base addresses are now in an array and the

 *		  globally-visible functions take an IOP number instead of an

 *		  an actual base address.

 * 990610 (jmt) - Finished the message passing framework and it seems to work.

 *		  Sending _definitely_ works; my adb-bus.c mods can send

 *		  messages and receive the MSG_COMPLETED status back from the

 *		  IOP. The trick now is figuring out the message formats.

 * 990611 (jmt) - More cleanups. Fixed problem where unclaimed messages on a

 *		  receive channel were never properly acknowledged. Bracketed

 *		  the remaining debug printk's with #ifdef's and disabled

 *		  debugging. I can now type on the console.

 * 990612 (jmt) - Copyright notice added. Reworked the way replies are handled.

 *		  It turns out that replies are placed back in the send buffer

 *		  for that channel; messages on the receive channels are always

 *		  unsolicited messages from the IOP (and our replies to them

 *		  should go back in the receive channel.) Also added tracking

 *		  of device names to the listener functions ala the interrupt

 *		  handlers.

 * 990729 (jmt) - Added passing of pt_regs structure to IOP handlers. This is

 *		  used by the new unified ADB driver.

 *

 * TODO:

 *

 * o The SCC IOP has to be placed in bypass mode before the serial console

 *   gets initialized. iop_init() would be one place to do that. Or the

 *   bootloader could do that. For now, the Serial Switch control panel

 *   is needed for that -- contrary to the changelog above.

 * o Something should be periodically checking iop_alive() to make sure the

 *   IOP hasn't died.

 * o Some of the IOP manager routines need better error checking and

 *   return codes. Nothing major, just prettying up.

/*

 * -----------------------

 * IOP Message Passing 101

 * -----------------------

 *

 * The host talks to the IOPs using a rather simple message-passing scheme via

 * a shared memory area in the IOP RAM. Each IOP has seven "channels"; each

 * channel is connected to a specific software driver on the IOP. For example

 * on the SCC IOP there is one channel for each serial port. Each channel has

 * an incoming and and outgoing message queue with a depth of one.

 *

 * A message is 32 bytes plus a state byte for the channel (MSG_IDLE, MSG_NEW,

 * MSG_RCVD, MSG_COMPLETE). To send a message you copy the message into the

 * buffer, set the state to MSG_NEW and signal the IOP by setting the IRQ flag

 * in the IOP control to 1. The IOP will move the state to MSG_RCVD when it

 * receives the message and then to MSG_COMPLETE when the message processing

 * has completed. It is the host's responsibility at that point to read the

 * reply back out of the send channel buffer and reset the channel state back

 * to MSG_IDLE.

 *

 * To receive message from the IOP the same procedure is used except the roles

 * are reversed. That is, the IOP puts message in the channel with a state of

 * MSG_NEW, and the host receives the message and move its state to MSG_RCVD

 * and then to MSG_COMPLETE when processing is completed and the reply (if any)

 * has been placed back in the receive channel. The IOP will then reset the

 * channel state to MSG_IDLE.

 *

 * Two sets of host interrupts are provided, INT0 and INT1. Both appear on one

 * interrupt level; they are distinguished by a pair of bits in the IOP status

 * register. The IOP will raise INT0 when one or more messages in the send

 * channels have gone to the MSG_COMPLETE state and it will raise INT1 when one

 * or more messages on the receive channels have gone to the MSG_NEW state.

 *

 * Since each channel handles only one message we have to implement a small

 * interrupt-driven queue on our end. Messages to be sent are placed on the

 * queue for sending and contain a pointer to an optional callback function.

 * The handler for a message is called when the message state goes to

 * MSG_COMPLETE.

 *

 * For receiving message we maintain a list of handler functions to call when

 * a message is received on that IOP/channel combination. The handlers are

 * called much like an interrupt handler and are passed a copy of the message

 * from the IOP. The message state will be in MSG_RCVD while the handler runs;

 * it is the handler's responsibility to call iop_complete_message() when

 * finished; this function moves the message state to MSG_COMPLETE and signals

 * the IOP. This two-step process is provided to allow the handler to defer

 * message processing to a bottom-half handler if the processing will take

 * a significant amount of time (handlers are called at interrupt time so they

 * should execute quickly.)

 Non-zero if the IOPs are present */

 structure for tracking channel listeners */

/*

 * IOP structures for the two IOPs

 *

 * The SCC IOP controls both serial ports (A and B) as its two functions.

 * The ISM IOP controls the SWIM (floppy drive) and ADB.

/*

 * IOP message queues

/*

 * Private access functions

/*

 * Initialize the IOPs, if present.

 clears the alive flag */

 Make the whole pool available and empty the queues */

/*

 * Register the interrupt handler for the IOPs.

/*

 * Register or unregister a listener for a specific IOP and channel

 *

 * If the handler pointer is NULL the current listener (if any) is

 * unregistered. Otherwise the new listener is registered provided

 * there is no existing listener registered.

/*

 * Complete reception of a message, which just means copying the reply

 * into the buffer, setting the channel state to MSG_COMPLETE and

 * notifying the IOP.

/*

 * Actually put a message into a send channel buffer

/*

 * Handle sending a message on a channel that

 * has gone into the IOP_MSG_COMPLETE state.

/*

 * Handle reception of a message on a channel that has

 * gone into the IOP_MSG_NEW state.

 If there is a listener, call it now. Otherwise complete */

 the message ourselves to avoid possible stalls.         */

/*

 * Send a message

 *

 * The message is placed at the end of the send queue. Afterwards if the

 * channel is idle we force an immediate send of the next message in the

 * queue.

/*

 * Upload code to the shared RAM of an IOP.

/*

 * Download code from the shared RAM of an IOP.

/*

 * Compare the code in the shared RAM of an IOP with a copy in system memory

 * and return 0 on match or the first nonmatching system memory address on

 * failure.

/*

 * Handle an ISM IOP interrupt

 INT0 indicates state change on an outgoing message channel */

 INT1 for incoming messages */

/*



  fp_trig.c: floating-point math routines for the Linux-m68k

  floating point emulator.



  Copyright (c) 1998-1999 David Huggins-Daines / Roman Zippel.



  I hereby give permission, free of charge, to copy, modify, and

  redistribute this software, in source or binary form, provided that

  the above copyright notice and the following disclaimer are included

  in all such copies.



  THIS SOFTWARE IS PROVIDED "AS IS", WITH ABSOLUTELY NO WARRANTY, REAL

  OR IMPLIED.



	/*

	 *		 sqrt(m) * 2^(p)	, if e = 2*p

	 * sqrt(m*2^e) =

	 *		 sqrt(2*m) * 2^(p)	, if e = 2*p + 1

	 *

	 * So we use the last bit of the exponent to decide whether to

	 * use the m or 2*m.

	 *

	 * Since only the fractional part of the mantissa is stored and

	 * the integer part is assumed to be one, we place a 1 or 2 into

	 * the fixed point representation.

 lowest bit of exponent is set */

	/*

	 * The taylor row around a for sqrt(x) is:

	 *	sqrt(x) = sqrt(a) + 1/(2*sqrt(a))*(x-a) + R

	 * With a=1 this gives:

	 *	sqrt(x) = 1 + 1/2*(x-1)

	 *		= 1/2*(1+x)

 * 1/2 */

	/*

	 * We now apply the newton rule to the function

	 *	f(x) := x^2 - r

	 * which has a null point on x = sqrt(r).

	 *

	 * It gives:

	 *	x' := x - f(x)/f'(x)

	 *	    = x - (x^2 -r)/(2*x)

	 *	    = x - (x - r/x)/2

	 *          = (2*x - x + r/x)/2

	 *	    = (x + r/x)/2

/*



  fp_trig.c: floating-point math routines for the Linux-m68k

  floating point emulator.



  Copyright (c) 1998-1999 David Huggins-Daines / Roman Zippel.



  I hereby give permission, free of charge, to copy, modify, and

  redistribute this software, in source or binary form, provided that

  the above copyright notice and the following disclaimer are included

  in all such copies.



  THIS SOFTWARE IS PROVIDED "AS IS", WITH ABSOLUTELY NO WARRANTY, REAL

  OR IMPLIED.



 SPDX-License-Identifier: GPL-2.0-or-later

/*



   fp_arith.c: floating-point math routines for the Linux-m68k

   floating point emulator.



   Copyright (c) 1998-1999 David Huggins-Daines.



   Somewhat based on the AlphaLinux floating point emulator, by David

   Mosberger-Tang.



 let's start with the easy ones */

 Now, the slightly harder ones */

/* fp_fadd: Implements the kernel of the FADD, FSADD, FDADD, FSUB,

 infinity - infinity == NaN */

/* fp_fsub: Implements the kernel of the FSUB, FSSUB, and FDSUB

   instructions.



 calculate the correct sign now, as it's necessary for infinities */

 Handle infinities */

	/* Of course, as we all know, zero * anything = zero.  You may

	   not have known that it might be a positive or negative

	/* shift up the mantissa for denormalized numbers,

	   so that the highest bit is set, this makes the

 now, do a 64-bit multiply with expansion */

	/* normalize it back to 64 bits and stuff it back into the

/* fp_fdiv: Implements the "kernel" of the FDIV, FSDIV, FDDIV and

   FSGLDIV instructions.



   Note that the order of the operands is counter-intuitive: instead

 calculate the correct sign now, as it's necessary for infinities */

 Handle infinities */

 infinity / infinity = NaN (quiet, as always) */

 infinity / anything else = infinity (with approprate sign) */

 anything / infinity = zero (with appropriate sign) */

 zeroes */

 zero / zero = NaN */

 zero / anything else = zero */

 anything / zero = infinity (with appropriate sign) */

	/* shift up the mantissa for denormalized numbers,

	   so that the highest bit is set, this makes lots

 now, do the 64-bit divide */

	/* normalize it back to 64 bits and stuff it back into the

 calculate the correct sign now, as it's necessary for infinities */

 Handle infinities */

	/* Of course, as we all know, zero * anything = zero.  You may

	   not have known that it might be a positive or negative

 do a 32-bit multiply */

 calculate the correct sign now, as it's necessary for infinities */

 Handle infinities */

 infinity / infinity = NaN (quiet, as always) */

 infinity / anything else = infinity (with approprate sign) */

 anything / infinity = zero (with appropriate sign) */

 zeroes */

 zero / zero = NaN */

 zero / anything else = zero */

 anything / zero = infinity (with appropriate sign) */

 do the 32-bit divide */

 only for rounding */

 only for rounding */

/* fp_roundint: Internal rounding function for use by several of these

   emulated instructions.



   This one rounds off the fractional part using the rounding mode

 infinities and zeroes */

 first truncate the lower bits */

	/* We might want to normalize upwards here... however, since

	   we know that this is only called on the output of fp_fdiv,

	   or with the input to fp_fint or fp_fintrz, and the inputs

	   to all these functions are either normal or denormalized

	   (no subnormals allowed!), there's really no need.



	   In the case of fp_fdiv, observe that 0x80000000 / 0xffff =

	   0xffff8000, and the same holds for 128-bit / 64-bit. (i.e. the

	   smallest possible normal dividend and the largest possible normal

	   divisor will still produce a normal quotient, therefore, (normal

			/* As noted above, the input is always normal, so the

			   guard bit (bit 63) is always set.  therefore, the

			   only case in which we will NOT round to 1.0 is when

/* modrem_kernel: Implementation of the FREM and FMOD instructions

   (which are exactly the same, except for the rounding used on the

 Infinities and zeros */

 FIXME: there is almost certainly a smarter way to do this */

 NOTE: src might be modified */

 set the quotient byte */

/* fp_fmod: Implements the kernel of the FMOD instruction.



   Again, the argument order is backwards.  The result, as defined in

   the Motorola manuals, is:



/* fp_frem: Implements the kernel of the FREM instruction.



   frem(src,dest) = (dest - (src * round(dest / src)))

 Infinities */

 zeroes */

 Source exponent out of range */

 src must be rounded with round to zero. */

 new exponent */

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 1993 Hamish Macdonald

 *  Copyright (C) 1999 D. Jeff Dionne

 *  Copyright (C) 2001 Georges Menie, Ken Desmet

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

**************************************************************************/

/*

 *  m68328.c - 68328/68EZ328/68VZ328 specific config

 *

 *  Copyright (C) 1993 Hamish Macdonald

 *  Copyright (C) 1999 D. Jeff Dionne

 *  Copyright (C) 2001 Georges Menie, Ken Desmet

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 *

 * VZ Support/Fixes             Evan Stawnyczy <e@lineo.ca>

**************************************************************************/

**************************************************************************/

**************************************************************************/

**************************************************************************/

/*

 * ints.c - Generic interrupt controller support

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 *

 * Copyright 1996 Roman Zippel

 * Copyright 1999 D. Jeff Dionne <jeff@rt-control.com>

 assembler routines */

/* The 68k family did not have a good way to determine the source

 * of interrupts until later in the family.  The EC000 core does

 * not provide the vector number on the stack, we vector everything

 * into one vector and look in the blasted mask register...

 * This code is designed to be fast, almost constant time, not clean!

/*

 * This function should be called during kernel startup to initialize

 * the machine vector table.

 set up the vectors */

 Set DragonBall IVR (interrupt base) to 64 */

 turn off all interrupts */

**************************************************************************/

/*

 *  timers.c - Generic hardware timer support.

 *

 *  Copyright (C) 1993 Hamish Macdonald

 *  Copyright (C) 1999 D. Jeff Dionne

 *  Copyright (C) 2001 Georges Menie, Ken Desmet

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

**************************************************************************/

**************************************************************************/

 with a 33.16 MHz clock, this will give usec resolution to the time functions */

/*

 * The only thing I know is that CLK32 is not available on Xcopilot

 * I have little idea about what frequency SYSCLK has on Xcopilot.

 * The values for prescaler and compare registers were simply

 * taken from the original source

 default to using the 32Khz clock */

**************************************************************************/

 Reset Timer1 */

**************************************************************************/

**************************************************************************/

**************************************************************************/

 disable timer 1 */

 set ISR */

 Restart mode, Enable int, Set clock source */

 Enable timer 1 */

**************************************************************************/

**************************************************************************/

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright (C) 1993 Hamish Macdonald

 *  Copyright (C) 1999 D. Jeff Dionne

 *  Copyright (C) 2001 Georges Menie, Ken Desmet

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

**************************************************************************/

                        Init Drangon Engine hardware                     */

**************************************************************************/

 disable CCFL light */

 disable LCD controller */

 allow user access to internal registers */

 CSGB Init */

 CS8900 init */

 PK3: hardware sleep function pin, active low */

 select pin as I/O */

 select pin as output */

 set pin high */

 PF5: hardware reset function pin, active high */

 select pin as I/O */

 select pin as output */

 set pin low */

 cs8900 hardware reset */

 INT1 enable (cs8900 IRQ) */

 active high signal */

 IRQ enabled */

 initialize LCD controller */

 Enable LCD controller */

 Enable CCFL backlighting circuit */

 contrast control register */

/*

 *  arch/m68k/q40/config.c

 *

 *  Copyright (C) 1999 Richard Zidlicky

 *

 * originally based on:

 *

 *  linux/bvme/config.c

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file README.legal in the main directory of this archive

 * for more details.

freq*/, unsigned int 
 early debugging function:*/

=(char *)0xff020000;*/

 useful for early debugging stages - writes kernel messages into SRAM */

pr_info("using NVRAM debug, q40_mem_cptr=%p\n",q40_mem_cptr);*/

 disable a few things that SMSQ might have left enabled */

/*

 * Looks like op is non-zero for setting the clock, and zero for

 * reading the clock.

 *

 *  struct hwclk_time {

 *         unsigned        sec;       0..59

 *         unsigned        min;       0..59

 *         unsigned        hour;      0..23

 *         unsigned        day;       1..31

 *         unsigned        mon;       0..11

 *         unsigned        year;      00...

 *         int             wday;      0..6, 0 is Sunday, -1 means unknown/don't set

 * };

 Write.... */

 Read....  */

 get and set PLL calibration of RTC clock */

 the docs are a bit unclear so I am doublesetting */

 RTC_WRITE here ... */

/*

 * arch/m68k/q40/q40ints.c

 *

 * Copyright (C) 1999,2001 Richard Zidlicky

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 *

 * .. used to be loosely based on bvme6000ints.c

 *

/*

 * Q40 IRQs are defined as follows:

 *            3,4,5,6,7,10,11,14,15 : ISA dev IRQs

 *            16-31: reserved

 *            32   : keyboard int

 *            33   : frame int (50/200 Hz periodic timer)

 *            34   : sample int (10/20 KHz periodic timer)

 *

 test for ISA ints not implemented by HW */

 FIXME return -ENXIO; */

/*

 * void q40_init_IRQ (void)

 *

 * Parameters:	None

 *

 * Returns:	Nothing

 *

 * This function is called during kernel startup to initialize

 * the q40 IRQ handling routines.

 setup handler for ISA ints */

 now enable some ints.. */

 ISA IRQ 5-15 */

 make sure keyboard IRQ is disabled */

/*

 * this stuff doesn't really belong here..

 200Hz ticks since last jiffie */

 for now ignore hz, except that hz==0 switches off sound */

 simply alternate the ampl (128-SVOL)-(128+SVOL)-..-.. at 200Hz */

 sound itself is done in q40_timer_int */

 pretty long beep */

/*

 * tables to translate bits into IRQ numbers

 * it is a good idea to order the entries by priority

 *

 ser 1 */

 ser 2 */

 IDE 1 */

 IDE 2 */

 floppy, handled elsewhere */

 par */

 complain only this many times about spurious ints : */

 ISA dev IRQs*/

static int cclirq=60;*/     
 FIXME: add shared ints,mask,unmask,probing.... */

static unsigned short saved_mask;*/

static int do_tint=0;

* would be nice, but crashes ???? */
 would be nice, but crashes ???? */

 ext irq disabled by master chip? */

 how many times inside handler ?*/

 got interrupt, dispatch to ISA or keyboard/timer IRQs */

repeat:

/*

 * There is a little mess wrt which IRQ really caused this irq request. The

 * main problem is that IIRQ_REG and EIRQ_REG reflect the state when they

 * are read - which is long after the request came in. In theory IRQs should

 * not just go away but they occasionally do

aliased_irq++;*/

 some handlers do local_irq_enable() for irq latency reasons, */

 however reentering an active irq handler is not permitted */

 in theory this is the better way to do it because it still */

 lets through eg the serial irqs, unfortunately it crashes */

					/*pr_warn("IRQ_INPROGRESS detected for irq %d, disabling - %s disabled\n",

 naively enable everything, if that fails than    */

 this function will be reentered immediately thus */

 getting another chance to disable the IRQ        */

pr_info("reenabling irq %d\n", irq); */

 used to do 'goto repeat;' here, this delayed bh processing too long

 should test whether keyboard irq is really enabled, doing it in defhand */

	/* disable ISA iqs : only do something if the driver has been

	 * verified to be Q40 "compatible" - right now IDE, NE2K

	 * Any driver should not attempt to sleep across disable_irq !!

/*

 *  linux/arch/m68k/tools/amiga/dmesg.c -- Retrieve the kernel messages stored

 *					   in Chip RAM with the kernel command

 *					   line option `debug=mem'.

 *

 *  © Copyright 1996 by Geert Uytterhoeven <geert@linux-m68k.org>

 *

 *

 *  Usage:

 *

 *	dmesg

 *	dmesg <CHIPMEM_END>

 *

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of the Linux

 *  distribution for more details.

 overridden by argv[1] */

 'SAVE' */

 'KMSG' */

 SAVEKMSG_MAGIC1 */

 SAVEKMSG_MAGIC2 */

 address of magic1 */

 SPDX-License-Identifier: GPL-2.0+

/*

 * CMOS/NV-RAM driver for Atari. Adapted from drivers/char/nvram.c.

 * Copyright (C) 1997 Roman Hodek <Roman.Hodek@informatik.uni-erlangen.de>

 * idea by and with help from Richard Jelinek <rj@suse.de>

 * Portions copyright (c) 2001,2002 Sun Microsystems (thockin@sun.com)

 * Further contributions from Cesar Barros, Erik Gilling, Tim Hockin and

 * Wim Van Sebroeck.

/* It is worth noting that these functions all access bytes of general

 * purpose memory in the NVRAM - that is to say, they all add the

 * NVRAM_FIRST_BYTE offset. Pass them offsets into NVRAM as if you did not

 * know about the RTC cruft.

/* Note that *all* calls to CMOS_READ and CMOS_WRITE must be done with

 * rtc_lock held. Due to the index-port/data-port design of the RTC, we

 * don't want two different things trying to get to it at once. (e.g. the

 * periodic 11 min sync from kernel/time/ntp.c vs. this driver.)

 This races nicely with trying to read with checksum checking */

/* On Ataris, the checksum is over all bytes except the checksum bytes

 * themselves; these are at the very end.

 CONFIG_PROC_FS */

/*

 * arch/m68k/atari/ataints.c -- Atari Linux interrupt handling code

 *

 * 5/2/94 Roman Hodek:

 *  Added support for TT interrupts; setup for TT SCU (may someone has

 *  twiddled there and we won't get the right interrupts :-()

 *

 *  Major change: The device-independent code in m68k/ints.c didn't know

 *  about non-autovec ints yet. It hardcoded the number of possible ints to

 *  7 (IRQ1...IRQ7). But the Atari has lots of non-autovec ints! I made the

 *  number of possible ints a constant defined in interrupt.h, which is

 *  47 for the Atari. So we can call request_irq() for all Atari interrupts

 *  just the normal way. Additionally, all vectors >= 48 are initialized to

 *  call trap() instead of inthandler(). This must be changed here, too.

 *

 * 1995-07-16 Lars Brinkhoff <f93labr@dd.chalmers.se>:

 *  Corrected a bug in atari_add_isr() which rejected all SCC

 *  interrupt sources if there were no TT MFP!

 *

 * 12/13/95: New interface functions atari_level_triggered_int() and

 *  atari_register_vme_int() as support for level triggered VME interrupts.

 *

 * 02/12/96: (Roman)

 *  Total rewrite of Atari interrupt handling, for new scheme see comments

 *  below.

 *

 * 1996-09-03 lars brinkhoff <f93labr@dd.chalmers.se>:

 *  Added new function atari_unregister_vme_int(), and

 *  modified atari_register_vme_int() as well as IS_VALID_INTNO()

 *  to work with it.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 *

/*

 * Atari interrupt handling scheme:

 * --------------------------------

 *

 * All interrupt source have an internal number (defined in

 * <asm/atariints.h>): Autovector interrupts are 1..7, then follow ST-MFP,

 * TT-MFP, SCC, and finally VME interrupts. Vector numbers for the latter can

 * be allocated by atari_register_vme_int().

/*

 * Bitmap for free interrupt vector numbers

 * (new vectors starting from 0x70 can be allocated by

 * atari_register_vme_int())

/* GK:

 * HBL IRQ handler for Falcon. Nobody needs it :-)

 * ++andreas: raise ipl to disable further HBLANK interrupts.

 set saved ipl to 2 */

/*

 * ST-MFP timer D chained interrupts - each driver gets its own timer

 * interrupt instance.

/*

 * EtherNAT CPLD interrupt handling

 * CPLD interrupt register is at phys. 0x80000023

 * Need this mapped in at interrupt startup time

 * Possibly need this mapped on demand anyway -

 * EtherNAT USB driver needs to disable IRQ before

 * startup!

	/*

	* map CPLD interrupt register

	/*

	 * do _not_ enable the USB chip interrupt here - causes interrupt storm

	 * and triggers dead interrupt watchdog

	 * Need to reset the USB chip to a sane state in early startup before

	 * removing this hack

	/*

	* map CPLD interrupt register

	/*

	* map CPLD interrupt register

/*

 * void atari_init_IRQ (void)

 *

 * Parameters:	None

 *

 * Returns:	Nothing

 *

 * This function should be called during kernel startup to initialize

 * the atari IRQ handling routines.

 Initialize the MFP(s) */

 Software EOI-Mode */

 Automatic EOI-Mode */

 turn off MFP-Ints */

 no Masking */

 Software EOI-Mode */

 Automatic EOI-Mode */

 turn off MFP-Ints */

 no Masking */

 hardware reset */

 init the SCU if present */

		tt_scu.sys_mask = 0x10;		/* enable VBL (for the cursor) and

									 * disable HSYNC interrupts (who

									 * needs them?)  MFP and SCC are

									 * enabled in VME mask

 enable MFP and SCC ints */

		/* If no SCU and no Hades, the HSYNC interrupt needs to be

		 * disabled this way. (Else _inthandler in kernel/sys_call.S

		 * gets overruns)

		/* Initialize the LM1992 Sound Controller to enable

		   the PSG sound.  This is misplaced here, it should

 Initialize the PSG: all sounds off, both ports output */

 prepare timer D data for use as poll interrupt */

 set Timer D data Register - needs to be > 0 */

 < 100 Hz */

 start timer D, div = 1:100 */

 request timer D dispatch handler */

	/*

	 * EtherNAT ethernet / USB interrupt handlers

/*

 * atari_register_vme_int() returns the number of a free interrupt vector for

 * hardware with a programmable int vector (probably a VME board).

/*

 * Atari Keyboard driver for 680x0 Linux

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * Atari support by Robert de Vries

 * enhanced by Bjoern Brauel and Roman Hodek

 *

 * 2.6 and input cleanup (removed autorepeat stuff) for 2.6.21

 * 06/07 Michael Schmitz

 Hook for MIDI serial driver */

 Hook for keyboard inputdev  driver */

 Hook for mouse inputdev  driver */

 variables for IKBD self test: */

 state: 0: off; >0: in progress; >1: 0xf1 received */

 timestamp when last received a char */

 bitmap of keys reported as broken */

/*

 * ++roman: The following changes were applied manually:

 *

 *  - The Alt (= Meta) key works in combination with Shift and

 *    Control, e.g. Alt+Shift+a sends Meta-A (0xc1), Alt+Control+A sends

 *    Meta-Ctrl-A (0x81) ...

 *

 *  - The parentheses on the keypad send '(' and ')' with all

 *    modifiers (as would do e.g. keypad '+'), but they cannot be used as

 *    application keys (i.e. sending Esc O c).

 *

 *  - HELP and UNDO are mapped to be F21 and F24, resp, that send the

 *    codes "\E[M" and "\E[P". (This is better than the old mapping to

 *    F11 and F12, because these codes are on Shift+F1/2 anyway.) This

 *    way, applications that allow their own keyboard mappings

 *    (e.g. tcsh, X Windows) can be configured to use them in the way

 *    the label suggests (providing help or undoing).

 *

 *  - Console switching is done with Alt+Fx (consoles 1..10) and

 *    Shift+Alt+Fx (consoles 11..20).

 *

 *  - The misc. special function implemented in the kernel are mapped

 *    to the following key combinations:

 *

 *      ClrHome          -> Home/Find

 *      Shift + ClrHome  -> End/Select

 *      Shift + Up       -> Page Up

 *      Shift + Down     -> Page Down

 *      Alt + Help       -> show system status

 *      Shift + Help     -> show memory info

 *      Ctrl + Help      -> show registers

 *      Ctrl + Alt + Del -> Reboot

 *      Alt + Undo       -> switch to last console

 *      Shift + Undo     -> send interrupt

 *      Alt + Insert     -> stop/start output (same as ^S/^Q)

 *      Alt + Up         -> Scroll back console (if implemented)

 *      Alt + Down       -> Scroll forward console (if implemented)

 *      Alt + CapsLock   -> NumLock

 *

 * ++Andreas:

 *

 *  - Help mapped to K_HELP

 *  - Undo mapped to K_UNDO (= K_F246)

 *  - Keypad Left/Right Parenthesis mapped to new K_PPAREN[LR]

/* ++roman: If a keyboard overrun happened, we can't tell in general how much

 * bytes have been lost and in which state of the packet structure we are now.

 * This usually causes keyboards bytes to be interpreted as mouse movements

 * and vice versa, which is very annoying. It seems better to throw away some

 * bytes (that are usually mouse bytes) than to misinterpret them. Therefore I

 * introduced the RESYNC state for IKBD data. In this state, the bytes up to

 * one that really looks like a key event (0x04..0xf2) or the start of a mouse

 * packet (0xf8..0xfb) are thrown away, but at most 2 bytes. This at least

 * speeds up the resynchronization of the event structure, even if maybe a

 * mouse movement is lost. However, nothing is perfect. For bytes 0x01..0x03,

 * it's really hard to decide whether they're mouse or keyboard bytes. Since

 * overruns usually occur when moving the Atari mouse rapidly, they're seen as

 * mouse bytes here. If this is wrong, only a make code of the keyboard gets

 * lost, which isn't too bad. Losing a break code would be disastrous,

 * because then the keyboard repeat strikes...

 check out if the interrupt came from this ACIA */

 a very fast typist or a slow system, give a warning */

 ...happens often if interrupts were disabled for too long */

 During self test, don't do resyncing, just process the code */

			/* This code seem already to be the start of a new packet or a

 Go to RESYNC state and skip this byte */

 skip max. 1 another byte */

 received a character */

 get it or reset the ACIA, I'll get it! */

 during self-test, note that 0xf1 received */

					/* Scancodes sent during the self-test stand for broken

					 * keys (keys being down). The code *should* be a break

					 * code, but nevertheless some AT keyboard interfaces send

					 * make codes instead. Therefore, simply ignore

					 * break_flag...

 new Linux scancodes; approx. */

 not yet used */

 wake up someone waiting for this */

				/* wake up someone waiting for this.

				   But will this ever be used, as Linux keeps its own time.

 wake_up_interruptible(&clock_wait); */

 cannot happen */;

	/* handle_scancode() can take a lot of time, so check again if

	 * some character arrived

/*

 * I write to the keyboard without using interrupts, I poll instead.

 * This takes for the maximum length string allowed (7) at 7812.5 baud

 * 8 data 1 start 1 stop bit: 9.0 ms

 * If this takes too long for normal operation, interrupt driven writing

 * is the solution. (I made a feeble attempt in that direction but I

 * kept it simple for now.)

 Reset (without touching the clock) */

	/*

	 * if all's well code 0xF1 is returned, else the break codes of

	 * all keys making contact

 Set mouse button action */

 Set relative mouse position reporting */

 Set absolute mouse position reporting */

 Set mouse keycode mode */

 Set mouse threshold */

 Set mouse scale */

 Interrogate mouse position */

 wait for returning bytes */

 Load mouse position */

 Set Y=0 at bottom */

 Set Y=0 at top */

 Disable mouse */

 Set joystick event reporting */

 Set joystick interrogation mode */

 Joystick interrogation */

 This disables all other ikbd activities !!!! */

 Set joystick monitoring */

 some joystick routines not in yet (0x18-0x19) */

 Disable joysticks */

/*

 * The original code sometimes left the interrupt line of

 * the ACIAs low forever. I hope, it is fixed now.

 *

 * Martin Rogge, 20 Aug 1995

 reset IKBD ACIA */

 reset MIDI ACIA */

 divide 500kHz by 64 gives 7812.5 baud */

 8 data no parity 1 start 1 stop bit */

 receive interrupt enabled */

 RTS low (except if switch selected), transmit interrupt disabled */

 make sure the interrupt line is up */

 enable ACIA Interrupts */

	/* wait for a period of inactivity (here: 0.25s), then assume the IKBD's

 if not incremented: no 0xf1 received */

 flag init done

/*

 * linux/arch/m68k/atari/time.c

 *

 * Atari time and real time clock stuff

 *

 * Assembled of parts of former atari/config.c 97-12-18 by Roman Hodek

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 set Timer C data Register */

 start timer C, div = 1:100 */

 install interrupt service routine for MFP Timer C */

 ++andreas: gettimeoffset fixed to check for pending interrupt */

	/* Ensure that the count is monotonically decreasing, even though

	 * the result may briefly stop changing after counter wrap-around.

 prevent from reading the clock while it changed */

 prevent from writing the clock while it changed */

 write: prepare values */

 leap year register */

    ctrl = RTC_READ(RTC_CONTROL); /* control registers are

 write: prepare values */

    /* Reading/writing the clock registers is a bit critical due to

     * the regular update cycle of the RTC. While an update is in

     * progress, registers 0..9 shouldn't be touched.

     * The problem is solved like that: If an update is currently in

     * progress (the UIP bit is set), the process sleeps for a while

     * (50ms). This really should be enough, since the update cycle

     * normally needs 2 ms.

     * If the UIP bit reads as 0, we have at least 244 usecs until the

     * update starts. This should be enough... But to be sure,

     * additionally the RTC_SET bit is set to prevent an update cycle.

 read: adjust values */

/*

 * Functions for ST-RAM allocations

 *

 * Copyright 1994-97 Roman Hodek <Roman.Hodek@informatik.uni-erlangen.de>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * The ST-RAM allocator allocates memory from a pool of reserved ST-RAM of

 * configurable size, set aside on ST-RAM init.

 * As long as this pool is not exhausted, allocation of real ST-RAM can be

 * guaranteed.

 set if kernel is in ST-RAM */

/*

 * This init function is called very early by atari/config.c

 * It initializes some internal variables needed for stram_alloc()

	/*

	 * determine whether kernel code resides in ST-RAM

	 * (then ST-RAM is the first memory block at virtual 0x0)

 Should never come here! (There is always ST-Ram!) */

/*

 * This function is called from setup_arch() to reserve the pages needed for

 * ST-RAM management, if the kernel resides in ST-RAM.

/*

 * This function is called as arch initcall to reserve the pages needed for

 * ST-RAM management, if the kernel does not reside in ST-RAM.

		/*

		 * Skip page 0, as the fhe first 2 KiB are supervisor-only!

 round up */

/*

 * linux/arch/m68k/atari/atasound.c

 *

 * ++Geert: Moved almost all stuff to linux/drivers/sound/

 *

 * The author of atari_nosound, atari_mksound and atari_microwire_cmd is

 * unknown. (++roman: That's me... :-)

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 *

 * 1998-05-31 ++andreas: atari_mksound rewritten to always use the envelope,

 *			 no timer, atari_nosound removed.

 *

/*

 * stuff from the old atasound.c

 Busy wait for data being completely sent :-( */

 PSG base frequency */

 PSG envelope base frequency times 10 */

	/* Generates sound of some frequency for some number of clock

 Disable generator A in mixer control.  */

	    /* Convert from frequency value to PSG period value (base

 Set generator A frequency to hz.  */

 Set length of envelope (max 8 sec).  */

 Envelope form: max -> min single.  */

 Use envelope for generator A.  */

 Set generator A level to maximum, no envelope.  */

 Turn on generator A in mixer control.  */

/*

 *  linux/arch/m68k/atari/config.c

 *

 *  Copyright (C) 1994 Bjoern Brauel

 *

 *  5/2/94 Roman Hodek:

 *    Added setting of time_adj to get a better clock.

 *

 *  5/14/94 Roman Hodek:

 *    gettod() for TT

 *

 *  5/15/94 Roman Hodek:

 *    hard_reset_now() for Atari (and others?)

 *

 *  94/12/30 Andreas Schwab:

 *    atari_sched_init fixed to get precise clock.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * Miscellaneous atari stuff

 local function prototypes */

 atari specific irq functions */

 atari specific timer functions (in time.c) */

/* ++roman: This is a more elaborate test for an SCC chip, since the plain

 * Medusa board generates DTACK at the SCC's standard addresses, but a SCC

 * board in the Medusa is possible. Also, the addresses where the ST_ESCC

 * resides generate DTACK without the chip, too.

 * The method is to write values into the interrupt vector register, that

 * should be readable without trouble (from channel A!).

    /*

     *  Parse an Atari-specific record in the bootinfo

 Parse the Atari-specific switches= option. */

 copy string to local array, strsep works destructively... */

 parse the options */

 RTS line of IKBD ACIA */

 RTS line of MIDI ACIA */

    /*

     *  Setup the Atari configuration info

 Change size of I/O space from 64KB to 4GB. */

 Set switches as requested by the user */

	/* ++bjoern:

	 * Determine hardware present

		/* There's no Atari video hardware on the Medusa, but all the

		/* This is a temporary hack: If there is Falcon video

		 * hardware, we assume that the ST-DMA serves SCSI instead of

		 * ACSI. In the future, there should be a better method for

		 * this...

	/*

	 * The ST-DMA address registers aren't readable

	 * on all Medusas, so the test below may fail

 This test sucks! Who knows some better? */

 Assume a VME bus if there's a SCU */

 This maybe wrong */

		/* Now it seems to be safe to turn of the tt0 transparent

		 * translation (the one that must not be turned off in

		 * head.S...)

 no outputs */

 no inputs */

 allocator for memory that must reside in st-ram */

	/* Set up a mapping for the VMEbus address region:

	 *

	 * VME is either at phys. 0xfexxxxxx (TT) or 0xa00000..0xdfffff

	 * (MegaSTE) In both cases, the whole 16 MB chunk is mapped at

	 * 0xfe000000 virt., because this can be done with a single

	 * transparent translation. On the 68040, lots of often unused

	 * page tables would be needed otherwise. On a MegaSTE or similar,

	 * the highest byte is stripped off by hardware due to the 24 bit

	 * design of the bus.

		tt1_val = 0xfe008543;	/* Translate 0xfexxxxxx, enable, cache

					 * inhibit, read and write, FDC mask = 3,

			: "d" (0xfe00a040));	/* Translate 0xfexxxxxx, enable,

						 * supervisor only, non-cacheable/

 Fetch tos version at Physical 2 */

	/*

	 * We my not be able to access this address if the kernel is

	 * loaded to st ram, since the first page is unmapped.  On the

	 * Medusa this is always the case and there is nothing we can do

	 * about this, so we just assume the smaller offset.  For the TT

	 * we use the fact that in head.S we have set up a mapping

	 * 0xFFxxxxxx -> 0x00xxxxxx, so that the first 16MB is accessible

	 * in the last 16MB of the address space.

 Select PSG Port A */

/* ++roman:

 *

 * This function does a reset on machines that lack the ability to

 * assert the processor's _RESET signal somehow via hardware. It is

 * based on the fact that you can find the initial SP and PC values

 * after a reset at physical addresses 0 and 4. This works pretty well

 * for Atari machines, since the lowest 8 bytes of physical memory are

 * really ROM (mapped by hardware). For other 680x0 machines: don't

 * know if it works...

 *

 * To get the values at addresses 0 and 4, the MMU better is turned

 * off first. After that, we have to jump into physical address space

 * (the PC before the pmove statement points to the virtual address of

 * the code). Getting that physical address is not hard, but the code

 * becomes a bit complex since I've tried to ensure that the jump

 * statement after the pmove is in the cache already (otherwise the

 * processor can't fetch it!). For that, the code first jumps to the

 * jump statement with the (virtual) address of the pmove section in

 * an address register . The jump statement is surely in the cache

 * now. After that, that physical address of the reset code is loaded

 * into the same address register, pmove is done and the same jump

 * statements goes to the reset code. Since there are not many

 * statements between the two jumps, I hope it stays in the cache.

 *

 * The C code makes heavy use of the GCC features that you can get the

 * address of a C label. No hope to compile this with another compiler

 * than GCC!

 ++andreas: no need for complicated code, just depend on prefetch */

	/*

	 * On the Medusa, phys. 0x4 may contain garbage because it's no

	 * ROM.  See above for explanation why we cannot use PTOV(4).

 reset ACIA for switch off OverScan, if it's active */

	/* processor independent: turn off interrupts and reset the VBR;

	 * the caches must be left enabled, else prefetching the final jump

	 * instruction doesn't work.

 68060: clear PCR to turn off superscalar operation */

 map 16 MB, enable, cacheable */

			/* the following setup of transparent translations is needed on the

			 * Afterburner040 to successfully reboot. Other machines shouldn't

			 * care about a different tt regs setup, they also didn't care in

 whole insn space cacheable */

 whole data space non-cacheable/ser. */

 no outputs */

 no outputs */

 Medusa has TT _MCH cookie */

/*

 * MSch: initial platform device support for Atari,

 * required for EtherNAT/EtherNEC/NetUSBee drivers

/*

 * EtherNAT: SMC91C111 Ethernet chipset, handled by smc91x driver

/*

 * ISP 1160 - using the isp116x-hcd module

 (DataBusWidth16|AnalogOCEnable|DREQOutputPolarity|DownstreamPort15KRSel ) */

 Enable internal resistors on downstream ports */

 On-chip overcurrent protection */

 INT output polarity */

 INT edge or level triggered */

 WAKEUP pin connected - NOT SUPPORTED  */

 .remote_wakeup_connected = 0, */

 Wakeup by devices on usb bus enabled */

 CONFIG_ATARI_ETHERNAT */

/*

 * EtherNEC: RTL8019 (NE2000 compatible) Ethernet chipset,

 * handled by ne.c driver

/*

 * NetUSBee: ISP1160 USB host adapter via ROM-port adapter

 (DataBusWidth16|AnalogOCEnable|DREQOutputPolarity|DownstreamPort15KRSel ) */

 Enable internal resistors on downstream ports */

 On-chip overcurrent protection */

 INT output polarity */

 INT edge or level triggered */

 WAKEUP pin connected - NOT SUPPORTED  */

 .remote_wakeup_connected = 0, */

 Wakeup by devices on usb bus enabled */

 CONFIG_ATARI_ETHERNEC */

/*

 * Falcon IDE interface

/*

 *  linux/arch/m68k/atari/stmda.c

 *

 *  Copyright (C) 1994 Roman Hodek

 *

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 This file contains some function for controlling the access to the  */

 ST-DMA chip that may be shared between devices. Currently we have:  */

   TT:     Floppy and ACSI bus                                       */

   Falcon: Floppy and SCSI                                           */

                                                                     */

 The controlling functions set up a wait queue for access to the     */

 ST-DMA chip. Callers to stdma_lock() that cannot granted access are */

 put onto a queue and waked up later if the owner calls              */

 stdma_release(). Additionally, the caller gives his interrupt       */

 service routine to stdma_lock().                                    */

                                                                     */

 On the Falcon, the IDE bus uses just the ACSI/Floppy interrupt, but */

 not the ST-DMA chip itself. So falhd.c needs not to lock the        */

 chip. The interrupt is routed to falhd.c if IDE is configured, the  */

 model is a Falcon and the interrupt was caused by the HD controller */

 (can be determined by looking at its status register).              */

 the semaphore */

 int func to be called */

 data passed to isr */

 wait queue for ST-DMA */

**************************** Prototypes *****************************/

************************ End of Prototypes **************************/

/**

 * stdma_try_lock - attempt to acquire ST DMA interrupt "lock"

 * @handler: interrupt handler to use after acquisition

 *

 * Returns !0 if lock was acquired; otherwise 0.

/*

 * Function: void stdma_lock( isrfunc isr, void *data )

 *

 * Purpose: Tries to get a lock on the ST-DMA chip that is used by more

 *   then one device driver. Waits on stdma_wait until lock is free.

 *   stdma_lock() may not be called from an interrupt! You have to

 *   get the lock in your main routine and release it when your

 *   request is finished.

 *

 * Inputs: A interrupt function that is called until the lock is

 *   released.

 *

 * Returns: nothing

 *

	/* Since the DMA is used for file system purposes, we

	 have to sleep uninterruptible (there may be locked

/*

 * Function: void stdma_release( void )

 *

 * Purpose: Releases the lock on the ST-DMA chip.

 *

 * Inputs: none

 *

 * Returns: nothing

 *

/**

 * stdma_is_locked_by - allow lock holder to check whether it needs to release.

 * @handler: interrupt handler previously used to acquire lock.

 *

 * Returns !0 if locked for the given handler; 0 otherwise.

/*

 * Function: int stdma_islocked( void )

 *

 * Purpose: Check if the ST-DMA is currently locked.

 * Note: Returned status is only valid if ints are disabled while calling and

 *       as long as they remain disabled.

 *       If called with ints enabled, status can change only from locked to

 *       unlocked, because ints may not lock the ST-DMA.

 *

 * Inputs: none

 *

 * Returns: != 0 if locked, 0 otherwise

 *

/*

 * Function: void stdma_init( void )

 *

 * Purpose: Initialize the ST-DMA chip access controlling.

 *   It sets up the interrupt and its service routine. The int is registered

 *   as slow int, client devices have to live with that (no problem

 *   currently).

 *

 * Inputs: none

 *

 * Return: nothing

 *

/*

 * Function: void stdma_int()

 *

 * Purpose: The interrupt routine for the ST-DMA. It calls the isr

 *   registered by stdma_lock().

 *

/*

 * linux/arch/m68k/atari/debug.c

 *

 * Atari debugging and serial console stuff

 *

 * Assembled of parts of former atari/config.c 97-12-18 by Roman Hodek

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/* Can be set somewhere, if a SCC master reset has already be done and should

 wait for tx buf empty */

 wait for tx buf empty */

 wait for tx buf empty */

 This a some-seconds timeout in case no printer is connected */

 wait for BUSY == L */

 select port B */

 put char onto port */

 select port A */

 set strobe L */

 wait a bit */

 set strobe H */

 wait for rx buf filled */

 wait for rx buf filled */

 wait for rx buf filled */

/*

 * The following two functions do a quick'n'dirty initialization of the MFP or

 * SCC serial ports. They're used by the debugging interface, kgdb, and the

 * serial console code.

	/*

	 * timer values for 1200...115200 bps; > 38400 select 110, 134, or 150

	 * bps, resp., and work only correct if there's a RSVE or RSSPEED

 use default 9600bps for non-implemented rates */

 baud_table[] starts at 1200bps */

 disable TX */

 1:16 clk mode, 1 stop bit */

 stop timer D */

 start timer D, 1:4 */

 enable TX */

/* loops_per_jiffy isn't initialized yet, so we can't use udelay(). This does a

 reg 11: 0x50 = BRG, 0x00 = RTxC, 0x28 = TRxC */

 reg 14: 0 = RTxC, 2 = PCLK */

 reg 4: 0x40 = x16, 0x80 = x32, 0xc0 = x64 */

 reg12 (BRG low) */

 use default 9600bps for non-implemented rates */

 tables starts at 1200bps */

 special treatment for TT, where rates >= 38400 are done via TRxC */

 TRxC */

 really 76800bps */

 really 153600bps */

 assert DTR/RTS */;

 reset reg pointer */

 reset */

 extra delay after WR9 access */

 1 stopbit */ | clkmode);

 no interrupts */

 extra delay after WR9 access */

 NRZ mode */

 main clock source */

 BRG value */

 BRG high byte */

 warning 7N1 isn't possible! (instead 7O2 is used...) */

	/* 4800 selects 7812.5, 115200 selects 500000, all other (incl. 9600 as

 really 7812.5 bps */

 115200 */)

 really 500 kbps (does that work??) */

 31250 bps, standard for MIDI */

 RTS low, ints disabled */

 defaults to ser2 for a Falcon and ser1 otherwise */

 ST-MFP Modem1 serial port */

 SCC Modem2 serial port */

 MIDI port */

 parallel printer */

 avoid ints */

 select mixer control */

 sound off, ports are output */

 select port B */

 no char */

 select port A */

 strobe H */

 SPDX-License-Identifier: GPL-2.0

 */

 */

 */

 clear DMA translation table */

 program timer 1 */

 enable IRQ of PIC B */

 read */

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

 Prom access routines for the sun3x */

 prom vector table */

 Handle returning to the prom */

 Disable interrupts while we mess with things */

 Restore prom vbr */

 Restore prom NMI clock */

	sun3x_disable_intreg(5);

 Let 'er rip */

 Restore everything */

 This never returns, don't bother saving things */

 Restore prom vbr */

 Restore prom NMI clock */

 Let 'er rip */

 debug console - write-only */

 Read the vector table */

	/* point trap #14 at abort.

	 * XXX this is futile since we restore the vbr first - oops

 If debug=prom was specified, start the debug console */

 some prom functions to export */

/* Get the idprom and stuff it into buffer 'idbuf'.  Returns the

 * format type.  'num_bytes' is the number of bytes that your idbuf

 * has space for.  Returns 0xff on error.

 make a copy of the idprom structure */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/m68k/sun3x/time.c

 *

 *  Sun3x-specific time handling

 Clear the pending interrupt - pulse the enable line low */

 Pulse enable low to get the clock started */

 SPDX-License-Identifier: GPL-2.0

/*

 * Virtual DMA allocation

 *

 * (C) 1999 Thomas Bogendoerfer (tsbogend@alpha.franken.de)

 *

 * 11/26/2000 -- disabled the existing code because it didn't work for

 * me in 2.4.  Replaced with a significantly more primitive version

 * similar to the sun3 code.  the old functionality was probably more

 * desirable, but....   -- Sam Creasey (sammy@oh.verio.com)

 *

 IOMMU support */

 code to print out a dvma mapping for debugging purposes */

/* create a virtual mapping for a page assigned within the IOMMU

		if(dvma_entry_use(index))

			BUG();

		pr_info("mapping pa %lx to ba %lx\n", __pa(kaddr),

			index << DVMA_PAGE_SHIFT);

		dvma_entry_inc(index);

 SPDX-License-Identifier: GPL-2.0

/*

 * Setup kernel for a Sun3x machine

 *

 * (C) 1999 Thomas Bogendoerfer (tsbogend@alpha.franken.de)

 *

 * based on code from Oliver Jowett <oliver@jowett.manawatu.gen.nz>

/*

 *  Setup the sun3x configuration info

 only the serial console is known to work anyway... */

 SPDX-License-Identifier: GPL-2.0

/*

 *	Real Time Clock interface for Linux on the MVME16x

 *

 * Based on the PC driver by Paul Gortmaker.

 For struct rtc_time and ioctls, etc */

/*

 *	We sponge a minor off of the misc major. No need slurping

 *	up another valuable major dev number for this. If you add

 *	an ioctl, make sure you don't conflict with SPARC's RTC

 *	ioctls.

 Read the time/date from RTC	*/

 Ensure clock and real-time-mode-register are accessible */

 Set the RTC */

 tm_mon starts at zero */

/*

 * We enforce only one user at a time here with the open/close.

/*

 *	The various file operations we support.

/*

 *  arch/m68k/mvme16x/config.c

 *

 *  Copyright (C) 1995 Richard Hirst [richard@sleepie.demon.co.uk]

 *

 * Based on:

 *

 *  linux/amiga/config.c

 *

 *  Copyright (C) 1993 Hamish Macdonald

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file README.legal in the main directory of this archive

 * for more details.

	/* The string of returns is to delay the reset until the whole

/*

 * This function is called during kernel startup to initialize

 * the mvme16x IRQ handling routines.  Should probably ensure

 * that the base vectors for the VMEChip2 and PCCChip2 are valid.

*** cd2401 registers ****/

 Receive FIFO threshold */

 Ensure transmitter is enabled! */

 We have a Tx int. Acknowledge it */

 Last char of string is now output */

 Report board revision */

 Board type is only set by newer versions of vmelilo/tftplilo */

 Illegal instruction */

 Trace */

 Trap #15 */

 ABORT switch */

 ABORT switch */

 Using PCCchip2 or MC2 chip tick timer 1 */

 FIXME Setting the time is not yet supported */

 SPDX-License-Identifier: GPL-2.0

/*

 * linux/arch/m68k/mm/motorola.c

 *

 * Routines specific to the Motorola MMU, originally from:

 * linux/arch/m68k/init.c

 * which are Copyright (C) 1995 Hamish Macdonald

 *

 * Moved 8/20/1999 Sam Creasey

/*

 * Bits to add to page descriptors for "normal" caching mode.

 * For 68020/030 this is 0.

 * For 68040, this is _PAGE_CACHE040 (cachable, copyback)

/* Prior to calling these routines, the page should have been flushed

 * from both the cache and ATC, or the CPU might not notice that the

 * cache setting for the page has been changed. -jskov

/*

 * Motorola 680x0 user's manual recommends using uncached memory for address

 * translation tables.

 *

 * Seeing how the MMU can be external on (some of) these chips, that seems like

 * a very important recommendation to follow. Provide some helpers to combat

 * 'variation' amongst the users of this.

/* ++andreas: {get,free}_pointer_table rewritten to use unused fields from

   struct page instead of separately kmalloced struct.  Stolen from

 PGD, PMD */

 PTE */

 unreserve the page so it's possible to free that page */

	/*

	 * For a pointer table for a user process address space, a

	 * table is taken from a page allocated for the purpose.  Each

	 * page can hold 8 pointer tables.  The page is remapped in

	 * virtual address space to be noncacheable.

			/*

			 * m68k doesn't have SPLIT_PTE_PTLOCKS for not having

			 * SMP.

 move to end of list */

 all tables in page are free, free page */

		/*

		 * move this descriptor to the front of the list, since

		 * it has one or more free tables.

 size of memory already mapped in head.S */

		/* Find the last ptr table that was used in head.S and

		 * reuse the remaining space in that page for further

		 * ptr tables.

/*

 * paging_init() continues the virtual memory environment setup which

 * was begun by the code in arch/head.S.

 Fix the cache mode in the page descriptors for the 680[46]0.  */

 Reserve kernel text/data/bss and the memory allocated in head.S */

	/*

	 * Map the physical memory available into the kernel virtual

	 * address space. Make sure memblock will not try to allocate

	 * pages beyond the memory we already mapped in head.S

	/*

	 * initialize the bad page table and bad page to point

	 * to a couple of allocated pages

	/*

	 * Set up SFC/DFC registers

 SPDX-License-Identifier: GPL-2.0

/*

 * Based upon linux/arch/m68k/mm/sun3mmu.c

 * Based upon linux/arch/ppc/mm/mmu_context.c

 *

 * Implementations of mm routines specific to the Coldfire MMU.

 *

 * Copyright (c) 2008 Freescale Semiconductor, Inc.

/*

 * ColdFire paging_init derived from sun3.

 now change pg_table to kernel virtual addresses */

 _rambase and _ramend will be naturally page aligned */

 compute total pages in system */

 page numbers */

 Reserve kernel text/data/bss */

 setup node data */

/*

 * Initialize the context management stuff.

 * The following was taken from arch/ppc/mmu_context.c

	/*

	 * Some processors have too few contexts to reserve one for

	 * init_mm, and require using context 0 for a normal task.

	 * Other processors reserve the use of context zero for the kernel.

	 * This code assumes FIRST_CONTEXT < 32.

/*

 * Steal a context from a task that has one at the moment.

 * This isn't an LRU system, it just frees up each context in

 * turn (sort-of pseudo-random replacement :).  This would be the

 * place to implement an LRU scheme if anyone was motivated to do it.

 *  -- paulus

	/*

	 * free up context `next_mmu_context'

	 * if we shouldn't free context 0, don't...

/*

 * linux/arch/m68k/mm/sun3kmap.c

 *

 * Copyright (C) 2002 Sam Creasey <sammy@sammy.net>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 page align */

/* sun3_map_test(addr, val) -- Reads a byte from addr, storing to val,

 * trapping the potential read fault.  Returns 0 if the access faulted,

 * 1 on success.

 *

 * This function is primarily used to check addresses on the VME bus.

 *

 * Mucking with the page fault handler seems a little hackish to me, but

 * SunOS, NetBSD, and Mach all implemented this check in such a manner,

 * so I figure we're allowed.

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/m68k/mm/kmap.c

 *

 *  Copyright (C) 1997 Roman Hodek

 *

 *  10/01/99 cleaned up the code and changing to the same interface

 *	     used by other architectures		/Roman Zippel

/*

 * For 040/060 we can use the virtual memory area like other architectures,

 * but for 020/030 we want to use early termination page descriptors and we

 * can't mix this with normal page descriptors, so we have to copy that code

 * (mm/vmalloc.c) and return appropriately aligned addresses.

/*

 * __free_io_area unmaps nearly everything, so be careful

 * Currently it doesn't free pointer/page tables anymore but this

 * wasn't used anyway and might be added later.

 remove gap added in get_io_area() */

/*

 * Map some physical address range into the kernel address space.

 Rewritten by Andreas Schwab to remove all races. */

	/*

	 * Don't allow mappings that wrap..

	/*

	 * Mappings have to be aligned

	/*

	 * Ok, go for it..

	/*

	 * add cache and table flags to physical address

/*

 * Unmap an ioremap()ed region again

/*

 * Set new cache mode for some kernel address space.

 * The caller must push data for that range itself, if such data may already

 * be in the cache.

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/m68k/mm/init.c

 *

 *  Copyright (C) 1995  Hamish Macdonald

 *

 *  Contains common initialization routines, specific init code moved

 *  to motorola.c and sun3mmu.c

/*

 * ZERO_PAGE is a special page that is used for zero-initialized

 * data and COW.

 CONFIG_MMU */

/*

 * paging_init() continues the virtual memory environment setup which

 * was begun by the code in arch/head.S.

 * The parameters are pointers to where to stick the starting and ending

 * addresses of available kernel virtual memory.

	/*

	 * Make sure start_mem is page aligned, otherwise bootmem and

	 * page_alloc get different views of the world.

 CONFIG_MMU */

 CONFIG_MMU_SUN3 */

 insert pointer tables allocated so far into the tablelist */

 this will put all memory onto the freelists */

 SPDX-License-Identifier: GPL-2.0

/* Tests for presence or absence of hardware registers.

 * This code was originally in atari/config.c, but I noticed

 * that it was also in drivers/nubus/nubus.c and I wanted to

 * use it in hp300/config.c, so it seemed sensible to pull it

 * out into its own file.

 *

 * The test is for use when trying to read a hardware register

 * that isn't present would cause a bus error. We set up a

 * temporary handler so that this doesn't kill the kernel.

 *

 * There is a test-by-reading and a test-by-writing; I present

 * them here complete with the comments from the original atari

 * config.c...

 *                -- PMM <pmaydell@chiark.greenend.org.uk>, 05/1998

/* This function tests for the presence of an address, specially a

 * hardware register address. It is called very early in the kernel

 * initialization process, when the VBR register isn't set up yet. On

 * an Atari, it still points to address 0, which is unmapped. So a bus

 * error would cause another bus error while fetching the exception

 * vector, and the CPU would do nothing at all. So we needed to set up

 * a temporary VBR and a vector table for the duration of the test.

/* Basically the same, but writes a value into a word register, protected

 * by a bus error handler. Returns 1 if successful, 0 otherwise.

		/*

		 * If this nop isn't present, 'ret' may already be loaded

		 * with 1 at the time the bus error happens!

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/m68k/mm/cache.c

 *

 *  Instruction cache handling

 *

 *  Copyright (C) 1995  Hamish Macdonald

		/* The PLPAR instruction causes an access error if the translation

		 * is not possible. To catch this we use the same exception mechanism

 Push n pages at kernel virtual address and clear the icache */

 RZ: use cpush %bc instead of cpush %dc, cinv %ic */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/m68k/mm/fault.c

 *

 *  Copyright (C) 1995  Hamish Macdonald

if (signo == SIGBUS)

	force_sig_fault(si_signo, si_code, addr);

		/*

		 * Oops. The kernel tried to access some bad page. We'll have to

		 * terminate things with extreme prejudice.

error_code*/);

/*

 * This routine handles page faults.  It determines the problem, and

 * then passes it off to one of the appropriate routines.

 *

 * error_code:

 *	bit 0 == 0 means no page found, 1 means protection fault

 *	bit 1 == 0 means read, 1 means write

 *

 * If this routine detects a bad access, it returns 1, otherwise it

 * returns 0.

	/*

	 * If we're in an interrupt or have no user

	 * context, we must not take the fault..

		/* Accessing the stack below usp is always a bug.  The

		   "+ 256" is there due to some instructions doing

		   pre-decrement on the stack and that doesn't show up

/*

 * Ok, we have a good vm_area for this memory access, so

 * we can handle it..

 3: write, present */

 write, not present */

 read, present */

 read, not present */

	/*

	 * If for any reason at all we couldn't handle the fault,

	 * make sure we exit gracefully rather than endlessly redo

	 * the fault.

			/*

			 * No need to mmap_read_unlock(mm) as we would

			 * have already released it in __lock_page_or_retry

			 * in mm/filemap.c.

/*

 * We ran out of memory, or some other thing happened to us that made

 * us unable to handle the page fault gracefully.

 SPDX-License-Identifier: GPL-2.0

/*

 * linux/arch/m68k/mm/sun3mmu.c

 *

 * Implementations of mm routines specific to the sun3 MMU.

 *

 * Moved here 8/20/1999 Sam Creasey

 *

 For the sun3 we try to follow the i386 paging_init() more closely */

 start_mem and end_mem have PAGE_OFFSET added already */

 now sets up tables using sun3 PTEs rather than i386 as before. --m */

 Map whole memory from PAGE_OFFSET (0x0E000000) */

 now change pg_table to kernel virtual addresses */

 memory sizing is a hack stolen from motorola.c..  hope it works for us */

 I really wish I knew why the following change made things better...  -- Sam */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/m68k/mm/memory.c

 *

 *  Copyright (C) 1995  Hamish Macdonald

 invalidate page in both caches */

 invalidate page in i-cache */

 push page in both caches */

 RZ: cpush %bc DOES invalidate %ic, regardless of DPI */

/* push and invalidate page in both caches, must disable ints

/*

 * 040: Hit every page containing an address in the range paddr..paddr+len-1.

 * (Low order bits of the ea of a CINVP/CPUSHP are "don't care"s).

 * Hit every page until there is a page or less to go. Hit the next page,

 * and the one after that if the range hits it.

/* ++roman: A little bit more care is required here: The CINVP instruction

 * invalidates cache entries WITHOUT WRITING DIRTY DATA BACK! So the beginning

 * and the end of the region must be treated differently if they are not

 * exactly at the beginning or end of a page boundary. Else, maybe too much

 * data becomes invalidated and thus lost forever. CPUSHP does what we need:

 * it invalidates the page after pushing dirty data to memory. (Thanks to Jes

 * for discovering the problem!)

/* ... but on the '060, CPUSH doesn't invalidate (for us, since we have set

 * the DPI bit in the CACR; would it cause problems with temporarily changing

 * this?). So we have to push first and then additionally to invalidate.

/*

 * cache_clear() semantics: Clear any cache entries for the area in question,

 * without writing back dirty entries first. This is useful if the data will

 * be overwritten anyway, e.g. by DMA to memory. The range is defined by a

 * _physical_ address.

	/*

	 * We need special treatment for the first page, in case it

	 * is not page-aligned. Page align the addresses to work

	 * around bug I17 in the 68060.

 a page boundary gets crossed at the end */

 68030 or 68020 */

/*

 * cache_push() semantics: Write back any dirty cache data in the given area,

 * and invalidate the range in the instruction cache. It needs not (but may)

 * invalidate those entries also in the data cache. The range is defined by a

 * _physical_ address.

	/*

         * on 68040 or 68060, push cache lines for pages in the range;

	 * on the '040 this also invalidates the pushed lines, but not on

	 * the '060!

	/*

	 * Work around bug I17 in the 68060 affecting some instruction

	 * lines not being invalidated properly.

    /*

     * 68030/68020 have no writeback cache. On the other hand,

     * cache_push is actually a superset of cache_clear (the lines

     * get written back and invalidated), so we should make sure

     * to perform the corresponding actions. After all, this is getting

     * called in places where we've just loaded code, or whatever, so

     * flushing the icache is appropriate; flushing the dcache shouldn't

     * be required.

 68030 or 68020 */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/m68k/kernel/process.c

 *

 *  Copyright (C) 1995  Hamish Macdonald

 *

 *  68060 fixes by Jesper Skov

/*

 * This file handles the architecture-dependent parts of process handling..

 block out HSYNC on the atari (falcon) */

/*

 * Why not generic sys_clone, you ask?  m68k passes all arguments on stack.

 * And we need all registers saved, which means a bunch of stuff pushed

 * on top of pt_regs, which means that sys_clone() arguments would be

 * buried.  We could, of course, copy them, but it's too costly for no

 * good reason - generic clone() would have to copy them *again* for

 * kernel_clone() anyway.  So in this case it's actually better to pass pt_regs *

 * and extract arguments for kernel_clone() from there.  Eventually we might

 * go for calling kernel_clone() directly from the wrapper, but only after we

 * are finished with kernel_clone() prototype conversion.

 regs will be equal to current_pt_regs() */

/*

 * Because extra registers are saved on the stack after the sys_clone3()

 * arguments, this C wrapper extracts them from pt_regs * and then calls the

 * generic sys_clone3() implementation.

	/*

	 * Must save the current SFC/DFC value, NOT the value when

	 * the parent was last descheduled - RGH  10-08-96

 kernel thread */

 function */

 Copy the current fpu state */

 Restore the state in case the fpu was busy */

 CONFIG_FPU */

 Fill in the fpu structure for a core dump.  */

		/* Convert internal fpu reg representation

		 * into long double format

 First dump the fpu context to avoid protocol violation.  */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/m68k/kernel/setup.c

 *

 *  Copyright (C) 1995  Hamish Macdonald

/*

 * This file handles the architecture-dependent parts of system setup

 machine dependent irq functions */

 machine dependent timer functions */

 Already set up by head.S */

 The bootinfo is located right after the kernel */

	/* FIXME: m68k_fputype is passed in by Penguin booter, which can

	 * be confused by software FPU emulation. BEWARE.

	 * We should really do our own FPU check at startup.

	 * [what do we do with buggy 68LC040s? if we have problems

 clear the fpu if we have one */

 CONFIG_BOOTPARAM */

 !CONFIG_SUN3 */

 set ISA defs early as possible */

 !CONFIG_M68KFPU_EMU */

 CONFIG_ADB */

 CONFIG_MAC */

 CONFIG_ATARI */

/* Atari device drivers call .read (to get checksum validation) whereas

 * Mac and PowerMac device drivers just use .read_byte.

 CONFIG_NVRAM */

/*

 *  linux/arch/m68k/kernel/traps.c

 *

 *  Copyright (C) 1993, 1994 by Hamish Macdonald

 *

 *  68040 fixes by Michael Rausch

 *  68040 fixes by Martin Apel

 *  68040 fixes and writeback by Richard Zidlicky

 *  68060 fixes by Roman Hodek

 *  68060 fixes by Jesper Skov

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * Sets up all exception vectors

 is really FSLW for access error */

 branch prediction error -> clear branch cache */

 return if there's no other error */

		/* Software Emulation Error.

		 * fault during mem_read/mem_write in ifpsp060/os.S

 CONFIG_M68060 */

/* after an exception in a writeback the stack frame corresponding

 * to that exception is discarded, set a few bits in the old frame

 * to simulate what it should look like

 do the 2nd wb only if the first one was successful (except for a kernel wb) */

/*

 * called from sigreturn(), must ensure userspace code didn't

 * manipulate exception frame to circumvent protection, then complete

 * pending writebacks

 * we just clear TM2 to turn it into a userspace access

		/*

		 * The MMU status has to be determined AFTER the address

		 * has been corrected if there was a misaligned access (MA).

 MMU error, get the MMUSR info for this access */

 clear the invalid atc entry */

		/* despite what documentation seems to say, RMW

 delay writebacks after signal delivery */

			/* disable writeback into user space from kernel

			 * (if do_page_fault didn't fix the mapping,

                         * the writeback won't do good)

		/* In case of a bus error we either kill the process or expect

		 * the kernel to catch the fault, which then is also responsible

		 * for cleaning up the mess.

 CONFIG_M68040 */

 sun3 version of bus_error030 */

	/*

	 * Check if this page should be demand-mapped. This needs to go before

	 * the testing for a bad kernel-space access (demand-mapping applies

	 * to kernel accesses too).

 Check for kernel-space pagefault (BAD). */

 kernel fault must be a data fault to user space */

 try checking the kernel mappings before surrender

 instruction fault or kernel data fault! */

 was this fault incurred testing bus mappings? */

 user fault */

 not an instruction fault or data fault! BAD */

 First handle the data fault, if any.  */

 errorcode bit 0:	0 -> no page		1 -> protection fault

 errorcode bit 1:	0 -> read fault		1 -> write fault

 (buserr_type & SUN3_BUSERR_PROTERR)	-> protection fault

 (buserr_type & SUN3_BUSERR_INVALID)	-> invalid page fault

todo: wtf is RM bit? --m

 Handle page fault. */

 Retry the data fault now. */

 Now handle the instruction fault. */

 Get the fault address. */

	/* ++andreas: If a data fault and an instruction fault happen

 First handle the data fault, if any.  */

			/* Don't try to do anything further if an exception was

 probably a 020 cas fault */

 setup an ATC entry for the access about to be retried */

 no outputs */

 no outputs */

 Now handle the instruction fault. */

 get the fault address */

		/* Insn fault on same page as data fault.  But we

 setup an ATC entry for the access about to be retried */

 no outputs */

 CPU_M68020_OR_M68030 */

 !CONFIG_SUN3 */

/*

 *	The following table converts the FS encoding of a ColdFire

 *	exception stack frame into the error_code value needed by

 *	do_fault.

 0000 */

 0001 */

 0010 */

 0011 */

 0100 */

 0101 */

 0110 */

 0111 */

 1000 */

 1001 */

 1010 */

 1011 */

 1100 */

 1101 */

 1110 */

 1111 */

	/*

	 * error_code:

	 *	bit 0 == 0 means no page found, 1 means protection fault

	 *	bit 1 == 0 means read, 1 means write

 0101 TLB opword X miss */

 0110 TLB extension word X miss */

 1010 TLB W miss */

 1110 TLB R miss */

 0000 Normal  */

 0001 Reserved */

 0010 Interrupt during debug service routine */

 0011 Reserved */

 0100 X Protection */

 0111 IFP in emulator mode */

 1000 W Protection*/

 1001 Write error*/

 1011 Reserved*/

 1100 R Protection*/

 1101 R Protection*/

 1111 OEP in emulator mode*/

 rd-mod-wr access */

 bit1 - write, bit0 - protection */

 CONFIG_COLDFIRE CONFIG_MMU */

 Only set esp0 if coming from user mode */

 CONFIG_COLDFIRE && CONFIG_MMU */

 68060 access error */

 68040 access error */

		/*

		 * If the address is either in the text segment of the

		 * kernel, or in the region which contains vmalloc'ed

		 * memory, it *may* be the address of a calling

		 * routine; if so, print it so that someone tracing

		 * down the cause of the crash will be able to figure

		 * out the call path that was taken.

/*

 * The vector number returned in the frame pointer may also contain

 * the "fs" (Fault Status) bits on ColdFire. These are in the bottom

 * 2 bits, and upper 2 bits. So we need to mask out the real vector

 * number before using it in comparisons. You don't need to do this on

 * real 68k parts, but it won't hurt either.

			/* traced a trapping instruction on a 68020/30,

			 * real exception will be executed afterwards.

 send the appropriate signal to the user program */

 ptrace single step */

 breakpoint */

/*

 * This function is called if an error occur while accessing

 * user-space from the fpsp040 code.

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/arch/m68k/kernel/time.c

 *

 *  Copyright (C) 1991, 1992, 1995  Linus Torvalds

 *

 * This file contains the m68k-specific time handling details.

 * Most of the stuff is located in the machine specific files.

 *

 * 1997-09-10	Updated NTP code according to technical memorandum Jan '96

 *		"A Kernel Model for Precision Timekeeping" by Dave Mills

	/* use power LED as a heartbeat instead -- much more useful

 acts like an actual heart beat -- ie thump-thump-pause... */

		/* The hyperbolic function below modifies the heartbeat period

		 * length in dependency of the current (5min) load. It goes

		 * through the points f(0)=126, f(1)=86, f(5)=51,

 CONFIG_HEARTBEAT */

 CONFIG_RTC_DRV_GENERIC */

 CONFIG M68KCLASSIC */

/*

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 CONFIG_MMU && !CONFIG_COLDFIRE */

 SPDX-License-Identifier: GPL-2.0

/*

 * machine_kexec.c - handle transition of Linux booting another kernel

	/*

	 * we do not want to be bothered.

/*

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 *

 * Copyright (c) 2014 Finn Thain

/*

 * debug_cons_nputs() defined in arch/m68k/kernel/head.S cannot be called

 * after init sections are discarded (for platforms that use it).

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * pci.c -- basic PCI support code

 *

 * (C) Copyright 2011, Greg Ungerer <gerg@uclinux.org>

/*

 * From arch/i386/kernel/pci-i386.c:

 *

 * We need to avoid collisions with `mirrored' VGA ports

 * and other strange ISA hardware, so we always want the

 * addresses to be allocated in the 0x000-0x0ff region

 * modulo 0x400.

 *

 * Why? Because some silly external IO cards only decode

 * the low 10 bits of the IO address. The 0x00-0xff region

 * is reserved for motherboard devices that decode all 16

 * bits, so it's ok to allocate at, say, 0x2800-0x28ff,

 * but we want to try to avoid allocating at 0x2900-0x2bff

 * which might be mirrored at 0x0100-0x03ff..

/*

 * This is taken from the ARM code for this.

 Only set up the requested stuff */

	/*

	 * Bridges (eg, cardbus bridges) need to be fully enabled

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/m68knommu/kernel/setup.c

 *

 *  Copyright (C) 1999-2007  Greg Ungerer (gerg@snapgear.com)

 *  Copyright (C) 1998,1999  D. Jeff Dionne <jeff@uClinux.org>

 *  Copyleft  ()) 2000       James D. Schettine {james@telos-systems.com}

 *  Copyright (C) 1998       Kenneth Albanowski <kjahds@kjahds.com>

 *  Copyright (C) 1995       Hamish Macdonald

 *  Copyright (C) 2000       Lineo Inc. (www.lineo.com)

 *  Copyright (C) 2001 	     Lineo, Inc. <www.lineo.com>

 *

 *  68VZ328 Fixes/support    Evan Stawnyczy <e@lineo.ca>

/*

 * This file handles the architecture-dependent parts of system setup

 machine dependent timer functions */

 machine dependent reboot functions */

 CONFIG_M68000 */

/*

 * Different cores have different instruction execution timings.

 * The old/traditional 68000 cores are basically all the same, at 16.

 * The ColdFire cores vary a little, their values are defined in their

 * headers. We default to the standard 68000 value here.

 CONFIG_BOOTPARAM */

 Keep a copy of command line */

	/*

	 * Give all the memory to the bootmap allocator, tell it to put the

	 * boot mem_map at the start of memory.

 if defined(CONFIG_BLK_DEV_INITRD) */

	/*

	 * Get kmalloc into gear.

/*

 *	Get CPU information for use by the procfs.

 SPDX-License-Identifier: GPL-2.0

/*

 * Based on arch/arm/kernel/atags_proc.c

	/*

	 * This cannot go into save_bootinfo() because kmalloc and proc don't

	 * work yet when it is called.

 SPDX-License-Identifier: GPL-2.0

/*

 * linux/arch/m68k/kernel/sys_m68k.c

 *

 * This file contains various random system calls that

 * have a non-standard calling sequence on the Linux/m68k

 * platform.

	/*

	 * This is wrong for sun3 - there PAGE_SIZE is 8Kb,

	 * so we need to shift the argument down by 1; m68k mmap64(3)

	 * (in libc) expects the last argument of mmap2 in 4Kb units.

 Convert virtual (user) address VADDR to physical address PADDR */

 This nop is needed for some broken versions of the 68040.  */

      /* Find the physical address of the first mapped page in the

	      /*

	       * No need to page align here since it is done by

	       * virt_to_phys_040().

	      /* Recompute physical address when crossing a page

 XXX */					\

  /*

   * 68060 manual says:

   *  cpush %dc : flush DC, remains valid (with our %cacr setup)

   *  cpush %ic : invalidate IC

   *  cpush %bc : flush DC + invalidate IC

      /* Find the physical address of the first mapped page in the

	      /*

	       * We just want to jump to the first cache line

	       * in the next page.

	      /* Recompute physical address when crossing a page

      addr &= PAGE_MASK;	/* Workaround for bug in some

 sys_cacheflush -- flush (part of) the processor cache.  */

 Only the superuser may explicitly flush the whole cache. */

 Check for overflow.  */

		/*

		 * Verify that the specified address region actually belongs

		 * to this process.

 no outputs */

 Flush the whole cache, even if page granularity requested. */

	    /*

	     * 040 or 060: don't blindly trust 'scope', someone could

	     * try to flush a few megs of memory.

/* This syscall gets its arguments in A0 (mem), D2 (oldval) and

 This was borrowed from ARM's implementation.  */

		/*

		 * No need to check for EFAULT; we know that the page is

		 * present and writable.

		/* This is not necessarily a bad access, we can get here if

		   a memory we're trying to write to should be copied-on-write.

		   Make the kernel do the necessary page stuff, then re-iterate.

			/* The first argument of the function corresponds to

 '3' is an RMW flag.  */

				/* If the do_page_fault() failed, we don't

				   have anything meaningful to return.

				   There should be a SIGSEGV pending for

 sys_cacheflush -- flush (part of) the processor cache.  */

/* This syscall gets its arguments in A0 (mem), D2 (oldval) and

 CONFIG_MMU */

 no code needed for uniprocs */

/*

 *  vectors.c

 *

 *  Copyright (C) 1993, 1994 by Hamish Macdonald

 *

 *  68040 fixes by Michael Rausch

 *  68040 fixes by Martin Apel

 *  68040 fixes and writeback by Richard Zidlicky

 *  68060 fixes by Roman Hodek

 *  68060 fixes by Jesper Skov

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * Sets up all exception vectors

 assembler routines */

 nmi handler for the Amiga */

/*

 * this must be called very early as the kernel might

 * use some instruction that are emulated on the 060

 * and so we're prepared for early probe attempts (e.g. nf_init).

 setup the exception vector table */

 set up ISP entry points */

 set up FPSP entry points */

 set up IFPSP entry points */

 if running on an amiga, make the NMI interrupt do nothing */

/*

 * linux/arch/m68k/kernel/ints.c -- Linux/m68k general interrupt handling code

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * void init_IRQ(void)

 *

 * Parameters:	None

 *

 * Returns:	Nothing

 *

 * This function should be called during kernel startup to initialize

 * the IRQ handling routines.

/**

 * m68k_setup_auto_interrupt

 * @handler: called from auto vector interrupts

 *

 * setup the handler to be called from auto vector interrupts instead of the

 * standard do_IRQ(), it will be called with irq numbers in the range

 * from IRQ_AUTO_1 - IRQ_AUTO_7.

/**

 * m68k_setup_user_interrupt

 * @vec: first user vector interrupt to handle

 * @cnt: number of active user vector interrupts

 *

 * setup user vector interrupts, this includes activating the specified range

 * of interrupts, only then these interrupts can be requested (note: this is

 * different from auto vector interrupts).

/**

 * m68k_setup_irq_controller

 * @chip: irq chip which controls specified irq

 * @handle: flow handler which handles specified irq

 * @irq: first irq to be managed by the controller

 * @cnt: number of irqs to be managed by the controller

 *

 * Change the controller for the specified range of irq, which will be used to

 * manage these irq. auto/user irq already have a default controller, which can

 * be changed as well, but the controller probably should use m68k_irq_startup/

 * m68k_irq_shutdown.

/*

 * uboot.c -- uboot arguments support

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * parse_uboot_commandline

 *

 * Copies u-boot commandline arguments and store them in the proper linux

 * variables.

 *

 * Assumes:

 *	_init_sp global contains the address in the stack pointer when the

 *	kernel starts (see head.S::_start)

 *

 *	U-Boot calling convention:

 *	(*kernel) (kbd, initrd_start, initrd_end, cmd_start, cmd_end);

 *

 *	_init_sp can be parsed as such

 *

 *	_init_sp+00 = u-boot cmd after jsr into kernel (skip)

 *	_init_sp+04 = &kernel board_info (residual data)

 *	_init_sp+08 = &initrd_start

 *	_init_sp+12 = &initrd_end

 *	_init_sp+16 = &cmd_start

 *	_init_sp+20 = &cmd_end

 *

 *	This also assumes that the memory locations pointed to are still

 *	unmodified. U-boot places them near the end of external SDRAM.

 *

 * Argument(s):

 *	commandp = the linux commandline arg container to fill.

 *	size     = the sizeof commandp.

 *

 * Returns:

 if defined(CONFIG_BLK_DEV_INITRD) */

 Add the whitespace separator */

/*

 *  linux/arch/m68k/kernel/signal.c

 *

 *  Copyright (C) 1991, 1992  Linus Torvalds

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * Linux/m68k support by Hamish Macdonald

 *

 * 68060 fixes by Jesper Skov

 *

 * 1997-12-01  Modified for POSIX.1b signals by Andreas Schwab

 *

 * mathemu support by Roman Zippel

 *  (Note: fpstate in the signal context is completely ignored for the emulator

 *         and the internal floating point format is put on stack)

/*

 * ++roman (07/09/96): implemented signal stacks (specially for tosemu on

 * Atari :-) Current limitation: Only one sigstack can be active at one time.

 * If a second signal with SA_ONSTACK set arrives while working on a sigstack,

 * SA_ONSTACK is ignored. This behaviour avoids lots of trouble with nested

 * signal handlers!

/*

 * Handle the slight differences in classic 68k and ColdFire trap frames.

 sizeof_field(struct frame, un.fmt1), */

 sizeof_field(struct frame, un.fmt5), */

 sizeof_field(struct frame, un.fmt6), */

 sizeof_field(struct frame, un.fmt8), */

 sizeof_field(struct frame, un.fmtc), */

 sizeof_field(struct frame, un.fmtd), */

 sizeof_field(struct frame, un.fmte), */

 sizeof_field(struct frame, un.fmtf), */

 Are we prepared to handle this kernel fault? */

 Create a new four word stack frame, discarding the old one. */

	/*

	 * Using the old cache_push_v() was really a big waste.

	 *

	 * What we are trying to do is to flush 8 bytes to ram.

	 * Flushing 2 cache lines of 16 bytes is much cheaper than

	 * flushing 1 or 2 pages, as previously done in

	 * cache_push_v().

	 *                                                     Jes

		/*

		 * 68030/68020 have no writeback cache;

		 * still need to clear icache.

		 * Note that vaddr is guaranteed to be long word aligned.

 CPU_IS_COLDFIRE */

 Invalidate instruction cache for the pushed bytes */

 CONFIG_MMU */

 No frame size adjustments required on non-MMU CPUs */

	/*

	 * set format byte to make stack appear modulo 4, which it will

	 * be when doing the rte

 CONFIG_MMU */

/*

 * Do a signal return; undo the signal stack.

 *

 * Keep the return code on the stack quadword aligned!

 * That makes the cache flush below easier.

 version number of fpu, set by setup_frame */

 restore registers */

 Verify the frame format.  */

 no outputs */

 no outputs */

 restore fpu control register */

 restore all other fpu register */

 Verify the frame format.  */

 no outputs */

 no outputs */

/*

 * Set up a signal frame.

 save registers */

 Clear pending exception in 68882 idle frame */

 no inputs */

 no inputs */

 save fpu control register */

 save all other fpu register */

 Clear pending exception in 68882 idle frame */

 no inputs */

 no inputs */

 CONFIG_FPU */

/*

 * For the case with no FPU configured these all do nothing.

 CONFIG_FPU */

	/*

	 * This needs to be tested on m68k as it has a lesser

	 * alignment requirement than x86 and that can cause surprises.

 This is part of the ABI and can never change in size: */

 Ensure the known fields never change in location */

 _kill */

 _timer */

 _rt */

 _sigchld */

 _sigfault */

 _sigfault._mcerr */

 _sigfault._addr_bnd */

 _sigfault._addr_pkey */

 _sigfault._perf */

 _sigpoll */

 _sigsys */

 any new si_fields should be added here */

		/*

		 * user process trying to return with weird frame format

 on 68040 complete pending writebacks if any */

 bus error frame

 Always make any pending restarted system calls return -EINTR */

 get previous context */

 restore passed registers */

 disable syscall checks */

 Always make any pending restarted system calls return -EINTR */

 restore passed registers */

 disable syscall checks */

 Set up to return from userspace.  */

 moveq #,d0; trap #0 */

	/*

	 * This is subtle; if we build more than one sigframe, all but the

	 * first one will see frame format 0 and have fsize == 0, so we won't

	 * screw stkadj.

	/*

	 * Set up registers for signal handler.  All the state we are about

	 * to destroy is successfully copied to sigframe.

 Create the ucontext.  */

 Set up to return from userspace.  */

 movel #__NR_rt_sigreturn,d0; trap #0 */

 moveq #,d0; notb d0; trap #0 */

 CONFIG_MMU */

	/*

	 * This is subtle; if we build more than one sigframe, all but the

	 * first one will see frame format 0 and have fsize == 0, so we won't

	 * screw stkadj.

	/*

	 * Set up registers for signal handler.  All the state we are about

	 * to destroy is successfully copied to sigframe.

/*

 * OK, we're invoking a handler

 are we from a system call? */

 If so, check system call restarting.. */

 set up the stack frame */

/*

 * Note that 'init' is a special process: it doesn't get signals it doesn't

 * want to handle. Thus you cannot kill init even with a SIGKILL even by

 * mistake.

 Whee!  Actually deliver the signal.  */

 Did we come from a system call? */

 Restart the system call - no handlers present */

 If there's no signal to deliver, we just restore the saved mask.  */

/*

 *  linux/arch/m68k/kernel/ptrace.c

 *

 *  Copyright (C) 1994 by Hamish Macdonald

 *  Taken from linux/kernel/ptrace.c and modified for M680x0.

 *  linux/kernel/ptrace.c is by Ross Biro 1/23/92, edited by Linus Torvalds

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License.  See the file COPYING in the main directory of

 * this archive for more details.

/*

 * does not yet catch signals sent when the child dies.

 * in exit.c or in signal.c.

 determines which bits in the SR the user has access to. */

 1 = access 0 = no access */

 sets the trace bits. */

 Find the stack offset for a register, relative to thread.esp0. */

/* Mapping from PT_xxx to the stack offset at which the register is

   saved.  Notice that usp has no stack-slot and needs to be treated

/*

 * Get contents of register REGNO in task TASK.

 Need to take stkadj into account. */

 The sr is actually a 16 bit register.  */

/*

 * Write contents of register REGNO in task TASK.

 Need to take stkadj into account. */

 The sr is actually a 16 bit register.  */

/*

 * Make sure the single step bit is not set.

/*

 * Called by kernel/ptrace.c when detaching..

 temporary hack. */

 read the word at location addr in the USER area. */

			/* Convert internal fpu reg representation

			 * into long double format

 write the word at location addr in the USER area */

			/* Convert long double format

			 * into internal fpu reg representation

 Get all gp regs from the child. */

 Set all gp regs in the child. */

 Get the child FPU state. */

 Set the child FPU state. */

	/*

	 * this isn't the same as continuing with a signal, but it will do

	 * for normal use.  strace only continues with a signal if the

	 * stopping signal is not SIGTRAP.  -brl

 CONFIG_COLDFIRE */

/*

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 This is where to make the change */

		/* This is the symbol it is referring to.  Note that all

 We add the value into the location given */

 Add the value, subtract its position */

 This is where to make the change */

		/* This is the symbol it is referring to.  Note that all

 We add the value into the location given */

 Add the value, subtract its position */

 CONFIG_MODULES */

/*

 * irq.c

 *

 * (C) Copyright 2007, Greg Ungerer <gerg@snapgear.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 The number of spurious interrupts */

 SPDX-License-Identifier: GPL-2.0

/*

 * This program is used to generate definitions needed by

 * assembly language modules.

 *

 * We use the technique used in the OSF Mach kernel code:

 * generate asm statements containing #defines,

 * compile this file to assembler, and then extract the

 * #defines from the assembly-language output.

 offsets into the task struct */

 offsets into the thread struct */

 offsets into the thread_info struct */

 offsets into the pt_regs */

 bitfields are a bit difficult */

 offsets into the irq_cpustat_t struct */

 signal defines */

 offsets into the bi_record struct */

 offsets into the font_desc struct */

 offsets into the custom struct */

 enum m68k_fixup_type */

/*

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * INET		An implementation of the TCP/IP protocol suite for the LINUX

 *		operating system.  INET is implemented using the  BSD Socket

 *		interface as the means of communication with the user level.

 *

 *		IP/TCP/UDP checksumming routines

 *

 * Authors:	Jorge Cwik, <jorge@laser.satlink.net>

 *		Arnt Gulbrandsen, <agulbra@nvg.unit.no>

 *		Tom May, <ftom@netcom.com>

 *		Andreas Schwab, <schwab@issan.informatik.uni-dortmund.de>

 *		Lots of code moved from tcp.c and ip.c; see those files

 *		for more names.

 *

 * 03/02/96	Jes Sorensen, Andreas Schwab, Roman Hodek:

 *		Fixed some nasty bugs, causing some horrible crashes.

 *		A: At some points, the sum (%0) was used as

 *		length-counter instead of the length counter

 *		(%1). Thanks to Roman Hodek for pointing this out.

 *		B: GCC seems to mess up if one uses too many

 *		data-registers to hold input values and one tries to

 *		specify d0 and d1 as scratch registers. Letting gcc

 *		choose these registers itself solves the problem.

 *

 * 1998/8/31	Andreas Schwab:

 *		Zero out rest of buffer on exception in

 *		csum_partial_copy_from_user.

/*

 * computes a partial checksum, e.g. for TCP/UDP fragments

	  /*

	   * Experiments with ethernet and slip connections show that buff

	   * is aligned on either a 2-byte or 4-byte boundary.

 Check alignment */

 buff%4==2: treat first word */

 len was == 2, treat only rest */

 add first word to sum */

 add X bit */

 unrolled loop for the main part: do 8 longs at once */

 save len in tmp1 */

 len/32 */

 not enough... */

 add X bit */

 restore len from tmp1 */

 number of rest longs */

 loop for rest longs */

 add X bit */

 now check for rest bytes that do not fit into longs */

 clear tmp2 for rest bytes */

 have rest >= 2: get word */

 into bits 16..31 */

 another byte? */

 have odd rest: get byte */

 into bits 8..15; 16..31 untouched */

 now add rest long to sum */

 add X bit */

/*

 * copy from user space while checksumming, with exception handling.

	/*

	 * GCC doesn't like more than 10 operands for the asm

	 * statements so we have to use tmp2 for the error

	 * code.

 Check alignment */

 buff%4==2: treat first word */

 len was == 2, treat only rest */

 add first word to sum */

 add X bit */

 unrolled loop for the main part: do 8 longs at once */

 save len in tmp1 */

 len/32 */

 not enough... */

 add X bit */

 restore len from tmp1 */

 number of rest longs */

 loop for rest longs */

 add X bit */

 now check for rest bytes that do not fit into longs */

 clear tmp2 for rest bytes */

 have rest >= 2: get word */

 into bits 16..31 */

 another byte? */

 have odd rest: get byte */

 into bits 8..15; 16..31 untouched */

 now add rest long to sum */

 add X bit */

 If any exception occurs, return 0 */

/*

 * copy from kernel space while checksumming, otherwise like csum_partial

 Check alignment */

 buff%4==2: treat first word */

 len was == 2, treat only rest */

 add first word to sum */

 add X bit */

 unrolled loop for the main part: do 8 longs at once */

 save len in tmp1 */

 len/32 */

 not enough... */

 add X bit */

 restore len from tmp1 */

 number of rest longs */

 loop for rest longs */

 add X bit */

 now check for rest bytes that do not fit into longs */

 clear tmp2 for rest bytes */

 have rest >= 2: get word */

 into bits 16..31 */

 another byte? */

 have odd rest: get byte */

 into bits 8..15; 16..31 untouched */

 now add rest long to sum */

 add X bit */

/* muldi3.c extracted from gcc-2.7.2.3/libgcc2.c and 

/* Copyright (C) 1989, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.



This file is part of GNU CC.



GNU CC is free software; you can redistribute it and/or modify

it under the terms of the GNU General Public License as published by

the Free Software Foundation; either version 2, or (at your option)

any later version.



GNU CC is distributed in the hope that it will be useful,

but WITHOUT ANY WARRANTY; without even the implied warranty of

MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 this can't give carry */		\

 but this indeed can */		\

 did we get it? */			\

 yes, add it in the proper pos. */	\

/*

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 lshrdi3.c extracted from gcc-2.7.2/libgcc2.c which is: */

/* Copyright (C) 1989, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.



This file is part of GNU CC.



GNU CC is free software; you can redistribute it and/or modify

it under the terms of the GNU General Public License as published by

the Free Software Foundation; either version 2, or (at your option)

any later version.



GNU CC is distributed in the hope that it will be useful,

but WITHOUT ANY WARRANTY; without even the implied warranty of

MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

/*

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * Zero Userspace

 ashrdi3.c extracted from gcc-2.7.2/libgcc2.c which is: */

/* Copyright (C) 1989, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.



This file is part of GNU CC.



GNU CC is free software; you can redistribute it and/or modify

it under the terms of the GNU General Public License as published by

the Free Software Foundation; either version 2, or (at your option)

any later version.



GNU CC is distributed in the hope that it will be useful,

but WITHOUT ANY WARRANTY; without even the implied warranty of

MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 w.s.high = 1..1 or 0..0 */

 ashrdi3.c extracted from gcc-2.95.2/libgcc2.c which is: */

/* Copyright (C) 1989, 92-98, 1999 Free Software Foundation, Inc.



This file is part of GNU CC.



GNU CC is free software; you can redistribute it and/or modify

it under the terms of the GNU General Public License as published by

the Free Software Foundation; either version 2, or (at your option)

any later version.



GNU CC is distributed in the hope that it will be useful,

but WITHOUT ANY WARRANTY; without even the implied warranty of

MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

/*

** asm-m68k/pcmcia.c -- Amiga Linux PCMCIA support

**                      most information was found by disassembling card.resource

**                      I'm still looking for an official doc !

**

** Copyright 1997 by Alain Malek

**

** This file is subject to the terms and conditions of the GNU General Public

** License.  See the file COPYING in the main directory of this archive

** for more details.

**

** Created: 12/10/97 by Alain Malek

 gayle config byte for program voltage and access speed */

 copy a tuple, including tuple header. return nb bytes copied */

 be careful as this may trigger a GAYLE_IRQ_WR interrupt ! */

/*

 * linux/arch/m68k/amiga/amisound.c

 *

 * amiga sound driver for Linux/m68k

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

    /*

     * The minimum period for audio may be modified by the frame buffer

     * device since it depends on htotal (for OCS/ECS/AGA)

 Default for pre-OCS */

    /*

     *	Current period (set by dmasound.c)

 setup divisor */

 without amifb, turn video off and enable high quality sound */

 setup pointer to data, period, length and volume */

 50% of maxvol */

 turn on DMA for audio channel 2 */

 turn off DMA for audio channel 2 */

 restore period to previous value after beeping */

/*

 *  linux/arch/m68k/amiga/cia.c - CIA support

 *

 *  Copyright (C) 1996 Roman Zippel

 *

 *  The concept of some functions bases on the original Amiga OS function

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 *  Cause or clear CIA interrupts, return old interrupt status.

/*

 *  Enable or disable CIA interrupts, return old interrupt mask,

	/* Interrupts get disabled while the timer irq flag is cleared and

	 * the timer interrupt serviced.

/*

 * Override auto irq 2 & 6 and use them as general chain

 * for external interrupts, we link the CIA interrupt sources

 * into this chain.

 clear any pending interrupt and turn off all interrupts */

 override auto int and install CIA handler */

/*

 *  linux/arch/m68k/amiga/config.c

 *

 *  Copyright (C) 1993 Hamish Macdonald

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * Miscellaneous Amiga stuff

    /*

     *  Motherboard Resources present in all Amiga models

    /*

     *  Parse an Amiga-specific record in the bootinfo

 CONFIG_ZORRO */

 serial port period: ignored here */

    /*

     *  Identify builtin hardware

 Fill in some default values, if necessary */

 Is this correct for all models? */

 Is this correct? */

 VPOSR/VHPOSR provide at least 17 bits of data changing at 1.79 MHz */

    /*

     *  Setup the Amiga configuration info

 Yuk, we don't have PCI memory */

 Fill in the clock value (based on the 700 kHz E-Clock) */

 3.5 MHz */

 clear all DMA bits */

 ensure that the DMA master bit is set */

 don't use Z2 RAM as system memory on Z3 capable machines */

 don't cut off the branch we're sitting on */

 request all RAM */

 initialize chipram allocator */

 our beloved beeper */

	/*

	 * if it is an A3000, set the magic bit that forces

	 * a hard rekick

 turn off timer A, continuous mode, from Eclk */

	/* install interrupt service routine for CIAB Timer A

	 *

	 * Please don't change this to use ciaa, as it interferes with the

	 * SCSI code. We'll have to take a look at this later

 start timer */

 read CIA B timer A current value */

 check for pending interrupt */

		/* Setup transparent translation registers for mapping

		 * of 16 MB kernel segment before disabling translation

 map 16 MB, enable, cacheable */

 no outputs */

		/* for 680[23]0, just disable translation and jump to the physical

		 * address of the label

 no outputs */

 disable translation on '040 now */

 disable MMU */

 no outputs */

 no inputs */

	/* pickup reset address from AmigaOS ROM, reset devices and jump

	 * to reset address

 align on a longword boundary */

    /*

     *  Debugging

 'SAVE' */

 'KMSG' */

 SAVEKMSG_MAGIC1 */

 SAVEKMSG_MAGIC2 */

 address of magic1 */

 Just steal the block, the chipram allocator isn't functional yet */

 clear the interrupt, so that another character can be read */

 Check for backspace. */

 Check for enter. */

 See if line is too long. */

 Store and echo character. */

 Print enter. */

 no initialization required (?) */

    /*

     *  Amiga specific parts of /proc

 CONFIG_ZORRO */

/*

 * The Amiga keyboard driver needs key_maps, but we cannot export it in

 * drivers/char/defkeymap.c, as it is autogenerated

/*

 *  Copyright (C) 2007-2009 Geert Uytterhoeven

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 Zorro II regions (on Zorro II/III) */

 Zorro III regions (on Zorro III only) */

 !CONFIG_ZORRO */

 !CONFIG_ZORRO */

 video hardware */

 sound hardware */

 storage interfaces */

 other I/O hardware */

 real time clocks */

 SPDX-License-Identifier: GPL-2.0

/*

**  linux/amiga/chipram.c

**

**      Modified 03-May-94 by Geert Uytterhoeven <geert@linux-m68k.org>

**          - 64-bit aligned allocations for full AGA compatibility

**

**	Rewritten 15/9/2000 by Geert to use resource management

	/*

	 *  Warning:

	 *  amiga_chip_alloc_res is meant only for drivers that need to

	 *  allocate Chip RAM before kmalloc() is functional. As a consequence,

	 *  those drivers must not free that Chip RAM afterwards.

 round up */

/*

 * Amiga Linux interrupt handling code

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * Enable/disable a particular machine specific interrupt source.

 * Note that this may affect other interrupts in case of a shared interrupt.

 * This function should only be called for a _very_ short time to change some

 * internal data, that may not be changed by the interrupt at the same time.

/*

 * The builtin Amiga hardware interrupt handlers.

 if serial transmit buffer empty, interrupt */

 if floppy disk transfer complete, interrupt */

 if software interrupt set, interrupt */

 if a blitter interrupt */

 if a copper interrupt */

 if a vertical blank interrupt */

 if audio 0 interrupt */

 if audio 1 interrupt */

 if audio 2 interrupt */

 if audio 3 interrupt */

 if serial receive buffer full interrupt */

 acknowledge of IF_RBF must be done by the serial interrupt */

 if a disk sync interrupt */

/*

 * void amiga_init_IRQ(void)

 *

 * Parameters:	None

 *

 * Returns:	Nothing

 *

 * This function should be called during kernel startup to initialize

 * the amiga IRQ handling routines.

 turn off PCMCIA interrupts */

 turn off all interrupts and enable the master interrupt bit */

/*

 * stmark2.c -- Support for Sysam AMCORE open board

 *

 * (C) Copyright 2017, Angelo Dureghello <angelo@sysam.it>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * Partitioning of parallel NOR flash (39VF3201B)

 SPI controller data, SPI (0) */

 SPI controller, id = bus number */

/*

 * Note: proper pin-mux setup is mandatory for proper SPI functionality.

 DSPI0, all pins as DSPI, and using CS1 */

 Board gpio setup */

 CAN pads */

/*

 * mcf8390.c  -- platform support for 8390 ethernet on many boards

 *

 * (C) Copyright 2012, Greg Ungerer <gerg@uclinux.org>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	m5206.c  -- platform support for ColdFire 5206 based boards

 *

 *	Copyright (C) 1999-2002, Greg Ungerer (gerg@snapgear.com)

 * 	Copyright (C) 2000-2001, Lineo Inc. (www.lineo.com) 

**************************************************************************/

**************************************************************************/

**************************************************************************/

 IS_ENABLED(CONFIG_I2C_IMX) */

 Copy command line from FLASH to local buffer... */

 CONFIG_NETtel */

 Only support the external interrupts on their primary level */

**************************************************************************/

/*

 * intc.c  -- support for the old ColdFire interrupt controller

 *

 * (C) Copyright 2009, Greg Ungerer <gerg@snapgear.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * The mapping of irq number to a mask register bit is not one-to-one.

 * The irq numbers are either based on "level" of interrupt or fixed

 * for an autovector-able interrupt. So we keep a local data structure

 * that maps from irq to mask register. Not all interrupts will have

 * an IMR bit.

/*

 * Define the miniumun and maximum external interrupt numbers.

 * This is also used as the "level" interrupt numbers.

/*

 * In the early version 2 core ColdFire parts the IMR register was 16 bits

 * in size. Version 3 (and later version 2) core parts have a 32 bit

 * sized IMR register. Provide some size independent methods to access the

 * IMR register.

/*

 * Interrupts can be "vectored" on the ColdFire cores that support this old

 * interrupt controller. That is, the device raising the interrupt can also

 * supply the vector number to interrupt through. The AVR register of the

 * interrupt controller enables or disables this for each external interrupt,

 * so provide generic support for this. Setting this up is out-of-band for

 * the interrupt system API's, and needs to be done by the driver that

 * supports this device. Very few devices actually use this.

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	sltimers.c -- generic ColdFire slice timer support.

 *

 *	Copyright (C) 2009-2010, Philippe De Muyter <phdm@macqel.be>

 *	based on

 *	timers.c -- generic ColdFire hardware timer support.

 *	Copyright (C) 1999-2008, Greg Ungerer <gerg@snapgear.com>

**************************************************************************/

**************************************************************************/

/*

 *	By default use Slice Timer 1 as the profiler clock timer.

/*

 *	Choose a reasonably fast profile timer. Make it an odd value to

 *	try and get good coverage of kernel operations.

 Reset Slice Timer 1 */

 Set up TIMER 2 as high speed profile clock */

 CONFIG_HIGHPROFILE */

**************************************************************************/

/*

 *	By default use Slice Timer 0 as the system clock timer.

 Reset Slice Timer 0 */

 subtract because slice timers count down */

	/*

	 *	The coldfire slice timer (SLT) runs from STCNT to 0 included,

	 *	then STCNT again and so on.  It counts thus actually

	 *	STCNT + 1 steps for 1 tick, not STCNT.  So if you want

	 *	n cycles, initialize STCNT with n - 1.

 initialize mcfslt_cnt knowing that slice timers count down */

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	m528x.c  -- platform support for ColdFire 528x based boards

 *

 *	Sub-architcture dependent initialization code for the Freescale

 *	5280, 5281 and 5282 CPUs.

 *

 *	Copyright (C) 1999-2003, Greg Ungerer (gerg@snapgear.com)

 *	Copyright (C) 2001-2003, SnapGear Inc. (www.snapgear.com)

**************************************************************************/

**************************************************************************/

**************************************************************************/

 setup Port QS for QSPI with gpio CS control */

 IS_ENABLED(CONFIG_SPI_COLDFIRE_QSPI) */

**************************************************************************/

 setup Port AS Pin Assignment Register for I2C */

  set PASPA0 to SCL and PASPA1 to SDA */

 IS_ENABLED(CONFIG_I2C_IMX) */

**************************************************************************/

 make sure PUAPAR is set for UART0 and UART1 */

**************************************************************************/

 Set multi-function pins to ethernet mode for fec0 */

**************************************************************************/

 Set portE.5 to Digital IO */

 Make portE.5 an output */

 Now toggle portE.5 from low to high */

**************************************************************************/

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	clk.c -- general ColdFire CPU kernel clk handling

 *

 *	Copyright (C) 2009, Greg Ungerer (gerg@snapgear.com)

**************************************************************************/

/*

 *	For more advanced ColdFire parts that have clocks that can be enabled

 *	we supply enable/disable functions. These must properly define their

 *	clocks in their platform specific code.

 MCFPM_PPMCR1 */

 MCFPM_PPMCR0 */

 dummy functions, should not be called */

**************************************************************************/

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	nettel.c -- startup code support for the NETtel boards

 *

 *	Copyright (C) 2009, Greg Ungerer (gerg@snapgear.com)

**************************************************************************/

**************************************************************************/

/*

 * Define the IO and interrupt resources of the 2 SMC9196 interfaces.

/*

 * We need some access into the SMC9196 registers. Define those registers

 * we will need here (including the smc91x.h doesn't seem to give us these

 * in a simple form).

**************************************************************************/

**************************************************************************/

/*

 * Set flash contained MAC address into SMC9196 core. Make sure the flash

 * MAC address is sane, and not an empty flash. If no good use the Moreton

 * Bay default MAC address instead.

**************************************************************************/

/*

 * Re-map the address space of at least one of the SMC ethernet

 * parts. Both parts power up decoding the same address, so we

 * need to move one of them first, before doing anything else.

 Set correct chip select timing for SMC9196 accesses */

 Set the SMC interrupts to be auto-vectored */

 Set MAC addresses from flash for both interfaces */

**************************************************************************/

**************************************************************************/

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	525x.c  -- platform support for ColdFire 525x based boards

 *

 *	Copyright (C) 2012, Steven King <sfking@fdwdc.com>

**************************************************************************/

**************************************************************************/

**************************************************************************/

 set the GPIO function for the qspi cs gpios */

 FIXME: replace with pinmux/pinctl support */

 QSPI irq setup */

 IS_ENABLED(CONFIG_SPI_COLDFIRE_QSPI) */

 first I2C controller uses regular irq setup */

 second I2C controller is completely different */

 IS_ENABLED(CONFIG_I2C_IMX) */

**************************************************************************/

**************************************************************************/

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Coldfire generic GPIO support.

 *

 * (C) Copyright 2009, Steven King <sfking@fdwdc.com>

 now set the data to output */

/*

 * intc-simr.c

 *

 * Interrupt controller code for the ColdFire 5208, 5207 & 532x parts.

 *

 * (C) Copyright 2009-2011, Greg Ungerer <gerg@snapgear.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 *	The EDGE Port interrupts are the fixed 7 external interrupts.

 *	They need some special treatment, for example they need to be acked.

/*

 *	The 520x parts only support a limited range of these external

 *	interrupts, only 1, 4 and 7 (as interrupts 65, 66 and 67).

 Is not actually used, but spot reserved for it */

 EDGE Port interrupt 1 */

 EDGE Port interrupt 4 */

 EDGE Port interrupt 7 */

/*

 *	Most of the ColdFire parts with the EDGE Port module just have

 *	a strait direct mapping of the 7 external interrupts. Although

 *	there is a bit reserved for 0, it is not used.

 Is not actually used, but spot reserved for it */

 EDGE Port interrupt 1 */

 EDGE Port interrupt 7 */

/*

 *	There maybe one, two or three interrupt control units, each has 64

 *	interrupts. If there is no second or third unit then MCFINTC1_* or

 *	MCFINTC2_* defines will be 0 (and code for them optimized away).

 Set EPORT line as input */

 Set EPORT line as interrupt source */

 Level triggered */

 Mask all interrupt sources */

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	dma.c -- Freescale ColdFire DMA support

 *

 *	Copyright (C) 2007, Greg Ungerer (gerg@snapgear.com)

**************************************************************************/

**************************************************************************/

/*

 *      DMA channel base address table.

**************************************************************************/

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	m5272.c  -- platform support for ColdFire 5272 based boards

 *

 *	Copyright (C) 1999-2002, Greg Ungerer (gerg@snapgear.com)

 *	Copyright (C) 2001-2002, SnapGear Inc. (www.snapgear.com)

**************************************************************************/

**************************************************************************/

/*

 *	Some platforms need software versions of the GPIO data registers.

**************************************************************************/

**************************************************************************/

 Enable the output lines for the serial ports */

**************************************************************************/

 Set watchdog to reset, and enabled */

 wait for watchdog to timeout */;

**************************************************************************/

 Set base of device vectors to be 64 */

 Copy command line from FLASH to local buffer... */

 Copy command line from FLASH to local buffer... */

**************************************************************************/

/*

 * Some 5272 based boards have the FEC ethernet directly connected to

 * an ethernet switch. In this case we need to use the fixed phy type,

 * and we need to declare it early in boot.

**************************************************************************/

**************************************************************************/

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	m54xx.c  -- platform support for ColdFire 54xx based boards

 *

 *	Copyright (C) 2010, Philippe De Muyter <phdm@macqel.be>

**************************************************************************/

**************************************************************************/

**************************************************************************/

 enable io pins */

**************************************************************************/

 set the fec/i2c/irq pin assignment register for i2c */

 IS_ENABLED(CONFIG_I2C_IMX) */

**************************************************************************/

 disable interrupts and enable the watchdog */

**************************************************************************/

**************************************************************************/

 SPDX-License-Identifier: GPL-2.0-or-later

**************************************************************************/

/*

 *	m53xx.c -- platform support for ColdFire 53xx based boards

 *

 *	Copyright (C) 1999-2002, Greg Ungerer (gerg@snapgear.com)

 *	Copyright (C) 2000, Lineo (www.lineo.com)

 *	Yaroslav Vinogradov yaroslav.vinogradov@freescale.com

 *	Copyright Freescale Semiconductor, Inc 2006

 *	Copyright (c) 2006, emlix, Sebastian Hess <shess@hessware.de>

**************************************************************************/

**************************************************************************/

 flexbus */

 intc.0 */

 intc.1 */

 iack.0 */

 mcfuart.0 */

 mcfuart.1 */

 mcfuart.2 */

 mcftmr.0 */

 mcftmr.1 */

 mcfpit.0 */

 mcfpit.1 */

 mcfeport.0 */

 sys.0 */

 gpio.0 */

 sdram.0 */

 pll.0 */

 mcfcan.0 */

 fec.0 */

 edma */

 imx1-i2c.0 */

 mcfqspi.0 */

 mcftmr.2 */

 mcftmr.3 */

 mcfpit.2 */

 mcfpit.3 */

 mcfpwm.0 */

 mcfwdt.0 */

 mcfrtc.0 */

 mcflcd.0 */

 mcfusb-otg.0 */

 mcfusb-host.0 */

 ssi.0 */

 mdha.0 */

 skha.0 */

 rng.0 */

 make sure these clocks are enabled */

 make sure these clocks are disabled */

**************************************************************************/

 setup QSPS pins for QSPI with gpio CS control */

 IS_ENABLED(CONFIG_SPI_COLDFIRE_QSPI) */

**************************************************************************/

 setup Port AS Pin Assignment Register for I2C */

  set PASPA0 to SCL and PASPA1 to SDA */

 IS_ENABLED(CONFIG_I2C_IMX) */

**************************************************************************/

 UART GPIO initialization */

**************************************************************************/

 Set multi-function pins to ethernet mode for fec0 */

**************************************************************************/

 Copy command line from FLASH to local buffer... */

	/*

	 * Disable the BDM clocking.  This also turns off most of the rest of

	 * the BDM device.  This is good for EMC reasons. This option is not

	 * incompatible with the memory protection option.

**************************************************************************/

 Board initialization */

**************************************************************************/

/* 

 * PLL min/max specifications

 KHz */

 KHz */

 KHz */

 KHz */

 Multiplier */

 Multiplier */

 Divider */

/*

 * Low Power Divider specifications

 Divider (not encoded) */

 Divider (not encoded) */

 Divider (not encoded) */

/*

 *  SDRAM Timing Parameters

 # of beats in a burst */

 in clocks */

 CASL in clocks */

 in clocks */

 in clocks */

 in clocks */

 in ns */

 Disable watchdog timer */

 All masters are trusted */

	/* Allow supervisor/user, read/write, and trusted/untrusted

 Enable bursts */

 Latch chip select */

 Initialize latch to drive signals to inactive states */

 External SRAM */

 Boot Flash connected to FBCS0 */

	/*

	 * Check to see if the SDRAM has already been initialized

	 * by a run control tool

 SDRAM chip select initialization */

 Initialize SDRAM chip select */

	/*

	 * Basic configuration and initialization

	/*

	 * Precharge and enable write to SDMR

	/*

	 * Write extended mode register

	/*

	 * Write mode register and reset DLL

	/*

	 * Execute a PALL command

	/*

	 * Perform two REF cycles

	/*

	 * Write mode register and clear reset DLL

	/*

	 * Enable auto refresh and lock SDMR

 Enable UART0 pins */

	/*

	 * Initialize TIN3 as a GPIO output to enable the write

	 * half of the latch.

 Return current PLL output */

 Check bounds of requested system clock */

	/* Multiplying by 100 when calculating the temp value,

	   and then dividing by 100 to calculate the mfd allows

	   for exact values without needing to include floating

 Determine the output frequency for selected values */

	/*

	 * Check to see if the SDRAM has already been initialized.

	 * If it has then the SDRAM needs to be put into self refresh

	 * mode before reprogramming the PLL.

 Put SDRAM into self refresh mode */

	/*

	 * Initialize the PLL to generate the new system clock frequency.

	 * The device must be put into LIMP mode to reprogram the PLL.

 Enter LIMP mode */

 Reprogram PLL for desired fsys */

 Exit LIMP mode */

	/*

	 * Return the SDRAM to normal operation if it is in use.

 Exit self refresh mode */

 Errata - workaround for SDRAM opeartion after exiting LIMP mode */

 wait for DQS logic to relock */

 Check bounds of divider */

	/* Save of the current value of the SSIDIV so we don't

 Apply the divider to the system clock */

 Exit LIMP mode */

 Wait for PLL to lock */

 Test to see if device is in LIMP mode */

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	firebee.c -- extra startup code support for the FireBee boards

 *

 *	Copyright (C) 2011, Greg Ungerer (gerg@snapgear.com)

**************************************************************************/

**************************************************************************/

/*

 *	8MB of NOR flash fitted to the FireBee board.

 Physical address of flash */

 Size of flash */

 Start at bottom of flash */

 256k in size */

 Start after boot loader */

 Most of flash */

 Start at offset 7MB */

 1MB in size */

**************************************************************************/

**************************************************************************/

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	m527x.c  -- platform support for ColdFire 527x based boards

 *

 *	Sub-architcture dependent initialization code for the Freescale

 *	5270/5271 and 5274/5275 CPUs.

 *

 *	Copyright (C) 1999-2004, Greg Ungerer (gerg@snapgear.com)

 *	Copyright (C) 2001-2004, SnapGear Inc. (www.snapgear.com)

**************************************************************************/

**************************************************************************/

**************************************************************************/

 setup QSPS pins for QSPI with gpio CS control */

 and CS2 & CS3 as gpio */

 setup QSPS pins for QSPI with gpio CS control */

 IS_ENABLED(CONFIG_SPI_COLDFIRE_QSPI) */

**************************************************************************/

 setup Port FECI2C Pin Assignment Register for I2C */

  set PAR_SCL to SCL and PAR_SDA to SDA */

 setup Port FECI2C Pin Assignment Register for I2C */

  set PAR_SCL to SCL and PAR_SDA to SDA */

 IS_ENABLED(CONFIG_I2C_IMX) */

**************************************************************************/

	/*

	 * External Pin Mask Setting & Enable External Pin for Interface

**************************************************************************/

 Set multi-function pins to ethernet mode for fec0 */

 Set multi-function pins to ethernet mode for fec1 */

**************************************************************************/

**************************************************************************/

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *  m520x.c  -- platform support for ColdFire 520x based boards

 *

 *  Copyright (C) 2005,      Freescale (www.freescale.com)

 *  Copyright (C) 2005,      Intec Automation (mike@steroidmicros.com)

 *  Copyright (C) 1999-2007, Greg Ungerer (gerg@snapgear.com)

 *  Copyright (C) 2001-2003, SnapGear Inc. (www.snapgear.com)

**************************************************************************/

**************************************************************************/

 flexbus */

 intc.0 */

 iack.0 */

 mcfuart.0 */

 mcfuart.1 */

 mcfuart.2 */

 mcfpit.0 */

 mcfpit.1 */

 mcfeport.0 */

 pll.0 */

 sys.0 */

 gpio.0 */

 sdram.0 */

 fec.0 */

 edma */

 imx1-i2c.0 */

 mcfqspi.0 */

 mcftmr.0 */

 mcftmr.1 */

 mcftmr.2 */

 mcftmr.3 */

 mcfwdt.0 */

 make sure these clocks are enabled */

 make sure these clocks are disabled */

**************************************************************************/

 setup Port QS for QSPI with gpio CS control */

 make U1CTS and U2RTS gpio for cs_control */

 IS_ENABLED(CONFIG_SPI_COLDFIRE_QSPI) */

**************************************************************************/

 setup Port FECI2C Pin Assignment Register for I2C */

  set PAR_SCL to SCL and PAR_SDA to SDA */

 IS_ENABLED(CONFIG_I2C_IMX) */

**************************************************************************/

 UART0 and UART1 GPIO pin setup */

 UART1 GPIO pin setup */

**************************************************************************/

 Set multi-function pins to ethernet mode */

**************************************************************************/

**************************************************************************/

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	m5407.c  -- platform support for ColdFire 5407 based boards

 *

 *	Copyright (C) 1999-2002, Greg Ungerer (gerg@snapgear.com)

 *	Copyright (C) 2000, Lineo (www.lineo.com)

**************************************************************************/

**************************************************************************/

**************************************************************************/

 IS_ENABLED(CONFIG_I2C_IMX) */

**************************************************************************/

 Only support the external interrupts on their primary level */

**************************************************************************/

/*

 * pci.c -- PCI bus support for ColdFire processors

 *

 * (C) Copyright 2012, Greg Ungerer <gerg@uclinux.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * Memory and IO mappings. We use a 1:1 mapping for local host memory to

 * PCI bus memory (no reason not to really). IO space is mapped in its own

 * separate address region. The device configuration space is mapped over

 * the IO map space when we enable it in the PCICAR register.

/*

 * We need to be carefull probing on bus 0 (directly connected to host

 * bridge). We should only access the well defined possible devices in

 * use, ignore aliases and the like.

/*

 * Configuration space access functions. Configuration space access is

 * through the IO mapping window, enabling it via the PCICAR register.

/*

 * Initialize the PCI bus registers, and scan the bus.

/*

 * Interrupt mapping and setting.

 Reset the external PCI bus */

 Configure PCI arbiter */

 Set required multi-function pins for PCI bus use */

 Set up config space for local host bus controller */

	/*

	 * Set up the initiator windows for memory and IO mapping.

	 * These give the CPU bus access onto the PCI bus. One for each of

	 * PCI memory and IO address spaces.

| PCIIWCR_W0_MRDL*/ | PCIIWCR_W0_E |

	/*

	 * Set up the target windows for access from the PCI bus back to the

	 * CPU bus. All we need is access to system RAM (for mastering).

 Keep a virtual mapping to IO/config space active */

 Turn of PCI reset, and wait for devices to settle */

/*

 * intc.c  --  interrupt controller or ColdFire 5272 SoC

 *

 * (C) Copyright 2009, Greg Ungerer <gerg@snapgear.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * The 5272 ColdFire interrupt controller is nothing like any other

 * ColdFire interrupt controller - it truly is completely different.

 * Given its age it is unlikely to be used on any other ColdFire CPU.

/*

 * The masking and priproty setting of interrupts on the 5272 is done

 * via a set of 4 "Interrupt Controller Registers" (ICR). There is a

 * loose mapping of vector number to register and internal bits, but

 * a table is the easiest and quickest way to map them.

 *

 * Note that the external interrupts are edge triggered (unlike the

 * internal interrupt sources which are level triggered). Which means

 * they also need acknowledging via acknowledge bits.

MCF_IRQ_SPURIOUS*/	{ .icr = 0,           .index = 0,  .ack = 0, },

MCF_IRQ_EINT1*/	{ .icr = MCFSIM_ICR1, .index = 28, .ack = 1, },

MCF_IRQ_EINT2*/	{ .icr = MCFSIM_ICR1, .index = 24, .ack = 1, },

MCF_IRQ_EINT3*/	{ .icr = MCFSIM_ICR1, .index = 20, .ack = 1, },

MCF_IRQ_EINT4*/	{ .icr = MCFSIM_ICR1, .index = 16, .ack = 1, },

MCF_IRQ_TIMER1*/	{ .icr = MCFSIM_ICR1, .index = 12, .ack = 0, },

MCF_IRQ_TIMER2*/	{ .icr = MCFSIM_ICR1, .index = 8,  .ack = 0, },

MCF_IRQ_TIMER3*/	{ .icr = MCFSIM_ICR1, .index = 4,  .ack = 0, },

MCF_IRQ_TIMER4*/	{ .icr = MCFSIM_ICR1, .index = 0,  .ack = 0, },

MCF_IRQ_UART1*/	{ .icr = MCFSIM_ICR2, .index = 28, .ack = 0, },

MCF_IRQ_UART2*/	{ .icr = MCFSIM_ICR2, .index = 24, .ack = 0, },

MCF_IRQ_PLIP*/	{ .icr = MCFSIM_ICR2, .index = 20, .ack = 0, },

MCF_IRQ_PLIA*/	{ .icr = MCFSIM_ICR2, .index = 16, .ack = 0, },

MCF_IRQ_USB0*/	{ .icr = MCFSIM_ICR2, .index = 12, .ack = 0, },

MCF_IRQ_USB1*/	{ .icr = MCFSIM_ICR2, .index = 8,  .ack = 0, },

MCF_IRQ_USB2*/	{ .icr = MCFSIM_ICR2, .index = 4,  .ack = 0, },

MCF_IRQ_USB3*/	{ .icr = MCFSIM_ICR2, .index = 0,  .ack = 0, },

MCF_IRQ_USB4*/	{ .icr = MCFSIM_ICR3, .index = 28, .ack = 0, },

MCF_IRQ_USB5*/	{ .icr = MCFSIM_ICR3, .index = 24, .ack = 0, },

MCF_IRQ_USB6*/	{ .icr = MCFSIM_ICR3, .index = 20, .ack = 0, },

MCF_IRQ_USB7*/	{ .icr = MCFSIM_ICR3, .index = 16, .ack = 0, },

MCF_IRQ_DMA*/		{ .icr = MCFSIM_ICR3, .index = 12, .ack = 0, },

MCF_IRQ_ERX*/		{ .icr = MCFSIM_ICR3, .index = 8,  .ack = 0, },

MCF_IRQ_ETX*/		{ .icr = MCFSIM_ICR3, .index = 4,  .ack = 0, },

MCF_IRQ_ENTC*/	{ .icr = MCFSIM_ICR3, .index = 0,  .ack = 0, },

MCF_IRQ_QSPI*/	{ .icr = MCFSIM_ICR4, .index = 28, .ack = 0, },

MCF_IRQ_EINT5*/	{ .icr = MCFSIM_ICR4, .index = 24, .ack = 1, },

MCF_IRQ_EINT6*/	{ .icr = MCFSIM_ICR4, .index = 20, .ack = 1, },

MCF_IRQ_SWTO*/	{ .icr = MCFSIM_ICR4, .index = 16, .ack = 0, },

/*

 * The act of masking the interrupt also has a side effect of 'ack'ing

 * an interrupt on this irq (for the external irqs). So this mask function

 * is also an ack_mask function.

 Only external interrupts are acked */

/*

 * Simple flow handler to deal with the external edge triggered interrupts.

 * We need to be careful with the masking/acking due to the side effects

 * of masking an interrupt.

 Mask all interrupt sources */

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	vectors.c  -- high level trap setup for ColdFire

 *

 *	Copyright (C) 1999-2007, Greg Ungerer <gerg@snapgear.com>

**************************************************************************/

**************************************************************************/

**************************************************************************/

 Assembler routines */

	/*

	 *	There is a common trap handler and common interrupt

	 *	handler that handle almost every vector. We treat

	 *	the system call and bus error special, they get their

	 *	own first level handlers.

**************************************************************************/

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	timers.c -- generic ColdFire hardware timer support.

 *

 *	Copyright (C) 1999-2008, Greg Ungerer <gerg@snapgear.com>

**************************************************************************/

**************************************************************************/

/*

 *	By default use timer1 as the system clock timer.

/*

 *	These provide the underlying interrupt vector support.

 *	Unfortunately it is a little different on each ColdFire.

**************************************************************************/

 Timer1 is always used as system timer */

 Timer2 is to be used as a high speed profile timer  */

 MCFSIM_ICR_AUTOVEC */

**************************************************************************/

 Reset the ColdFire timer */

**************************************************************************/

**************************************************************************/

**************************************************************************/

	/*

	 *	The coldfire timer runs from 0 to TRR included, then 0

	 *	again and so on.  It counts thus actually TRR + 1 steps

	 *	for 1 tick, not TRR.  So if you want n cycles,

	 *	initialize TRR with n - 1.

**************************************************************************/

**************************************************************************/

/*

 *	By default use timer2 as the profiler clock timer.

/*

 *	Choose a reasonably fast profile timer. Make it an odd value to

 *	try and get good coverage of kernel operations.

/*

 *	Use the other timer to provide high accuracy profiling info.

 Reset ColdFire timer2 */

**************************************************************************/

 Set up TIMER 2 as high speed profile clock */

**************************************************************************/

 CONFIG_HIGHPROFILE */

**************************************************************************/

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	cache.c -- general ColdFire Cache maintenance code

 *

 *	Copyright (C) 2010, Greg Ungerer (gerg@snapgear.com)

**************************************************************************/

**************************************************************************/

**************************************************************************/

/*

 *	Use cpushl to push all dirty cache lines back to memory.

 *	Older versions of GAS don't seem to know how to generate the

 *	ColdFire cpushl instruction... Oh well, bit stuff it for now.

 No output */

**************************************************************************/

 CACHE_PUSH */

**************************************************************************/

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	m5249.c  -- platform support for ColdFire 5249 based boards

 *

 *	Copyright (C) 2002, Greg Ungerer (gerg@snapgear.com)

**************************************************************************/

**************************************************************************/

**************************************************************************/

 CONFIG_M5249C3 */

**************************************************************************/

 QSPI irq setup */

 IS_ENABLED(CONFIG_SPI_COLDFIRE_QSPI) */

**************************************************************************/

 first I2C controller uses regular irq setup */

 second I2C controller is completely different */

 CONFIG_I2C_IMX */

**************************************************************************/

 Set the GPIO line as interrupt source for smc91x device */

 CONFIG_M5249C3 */

**************************************************************************/

**************************************************************************/

**************************************************************************/

/*

 * amcore.c -- Support for Sysam AMCORE open board

 *

 * (C) Copyright 2016, Angelo Dureghello <angelo@sysam.it>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * DEVICES and related device RESOURCES

 physical address of the address register (CMD [A2] to 0)*/

	/*

	 * physical address of the data register (CMD [A2] to 1),

	 * driver wants a range >=4 to assume a 32bit data bus

 IRQ line the device's interrupt pin is connected to */

 Set the dm9000 interrupt to be auto-vectored */

/*

 * Partitioning of parallel NOR flash (39VF3201B)

 Add i2c RTC Dallas chip supprt */

/*

 * intc2.c  -- support for the 2nd INTC controller of the 5249

 *

 * (C) Copyright 2009, Greg Ungerer <gerg@snapgear.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 GPIO interrupt sources */

 SPDX-License-Identifier: GPL-2.0

/*

 * dma_timer.c -- Freescale ColdFire DMA Timer.

 *

 * Copyright (C) 2007, Benedikt Spranger <b.spranger@linutronix.de>

 * Copyright (C) 2008. Sebastian Siewior, Linutronix

 *

 DTMR */

	/*

	 * We setup DMA timer 0 in free run mode. This incrementing counter is

	 * used as a highly precious clock source. With MCF_CLOCK = 150 MHz we

	 * get a ~213 ns resolution and the 32bit register will overflow almost

	 * every 15 minutes.

 2^10, carefully chosen */

/*

 * device.c  -- common ColdFire SoC device support

 *

 * (C) Copyright 2011, Greg Ungerer <gerg@uclinux.org>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 *	All current ColdFire parts contain from 2, 3, 4 or 10 UARTS.

/*

 *	Some ColdFire cores contain the Fast Ethernet Controller (FEC)

 *	block. It is Freescale's own hardware block. Some ColdFires

 *	have 2 of these.

 MCFFEC_BASE1 */

 CONFIG_FEC */

/*

 *	The ColdFire QSPI module is an SPI protocol hardware block used

 *	on a number of different ColdFire CPUs.

 IS_ENABLED(CONFIG_SPI_COLDFIRE_QSPI) */

 MCFI2C_BASE1 */

 MCFI2C_BASE2 */

 MCFI2C_BASE3 */

 MCFI2C_BASE4 */

 MCFI2C_BASE5 */

 IS_ENABLED(CONFIG_I2C_IMX) */

 IS_ENABLED(CONFIG_MCF_EDMA) */

 MCFSDHC_BASE */

 IS_ENABLED(CONFIG_CAN_FLEXCAN) */

/*

 *	Some ColdFire UARTs let you set the IRQ line to use.

 UART0 interrupt setup */

 UART1 interrupt setup */

/*

 * intc-2.c

 *

 * General interrupt controller code for the many ColdFire cores that use

 * interrupt controllers with 63 interrupt sources, organized as 56 fully-

 * programmable + 7 fixed-level interrupt sources. This includes the 523x

 * family, the 5270, 5271, 5274, 5275, and the 528x family which have two such

 * controllers, and the 547x and 548x families which have only one of them.

 *

 * The external 7 fixed interrupts are part the the Edge Port unit of these

 * ColdFire parts. They can be configured as level or edge triggered.

 *

 * (C) Copyright 2009-2011, Greg Ungerer <gerg@snapgear.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 * Bit definitions for the ICR family of registers.

 Level l intr */

 Priority p intr */

/*

 *	The EDGE Port interrupts are the fixed 7 external interrupts.

 *	They need some special treatment, for example they need to be acked.

 Is not actually used, but spot reserved for it */

 EDGE Port interrupt 1 */

 EDGE Port interrupt 7 */

 Don't set the "maskall" bit! */

/*

 *	Only the external (or EDGE Port) interrupts need to be acknowledged

 *	here, as part of the IRQ handler. They only really need to be ack'ed

 *	if they are in edge triggered mode, but there is no harm in doing it

 *	for all types.

/*

 *	Each vector needs a unique priority and level associated with it.

 *	We don't really care so much what they are, we don't rely on the

 *	traditional priority interrupt scheme of the m68k/ColdFire. This

 *	only needs to be set once for an interrupt, and we will never change

 *	these values once we have set them.

 Set EPORT line as input */

 Set EPORT line as interrupt source */

 Level triggered */

 Mask all interrupt sources */

/*

 * intc2.c  -- support for the 2nd INTC controller of the 525x

 *

 * (C) Copyright 2012, Steven King <sfking@fdwdc.com>

 * (C) Copyright 2009, Greg Ungerer <gerg@snapgear.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 set the interrupt base for the second interrupt controller */

 GPIO interrupt sources */

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	m523x.c  -- platform support for ColdFire 523x based boards

 *

 *	Sub-architcture dependent initialization code for the Freescale

 *	523x CPUs.

 *

 *	Copyright (C) 1999-2005, Greg Ungerer (gerg@snapgear.com)

 *	Copyright (C) 2001-2003, SnapGear Inc. (www.snapgear.com)

**************************************************************************/

**************************************************************************/

**************************************************************************/

 setup QSPS pins for QSPI with gpio CS control */

 and CS2 & CS3 as gpio */

 IS_ENABLED(CONFIG_SPI_COLDFIRE_QSPI) */

**************************************************************************/

 setup Port AS Pin Assignment Register for I2C */

  set PASPA0 to SCL and PASPA1 to SDA */

 IS_ENABLED(CONFIG_I2C_IMX) */

**************************************************************************/

 Set multi-function pins to ethernet use */

**************************************************************************/

**************************************************************************/

/*

 * reset.c  -- common ColdFire SoC reset support

 *

 * (C) Copyright 2012, Greg Ungerer <gerg@uclinux.org>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

/*

 *	There are 2 common methods amongst the ColdFure parts for reseting

 *	the CPU. But there are couple of exceptions, the 5272 and the 547x

 *	have something completely special to them, and we let their specific

 *	subarch code handle them.

 Set watchdog to soft reset, and enabled */

 wait for watchdog to timeout */;

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	pit.c -- Freescale ColdFire PIT timer. Currently this type of

 *	         hardware timer only exists in the Freescale ColdFire

 *		 5270/5271, 5282 and 5208 CPUs. No doubt newer ColdFire

 *		 family members will probably use it too.

 *

 *	Copyright (C) 1999-2008, Greg Ungerer (gerg@snapgear.com)

 *	Copyright (C) 2001-2004, SnapGear Inc. (www.snapgear.com)

**************************************************************************/

**************************************************************************/

/*

 *	By default use timer1 as the system clock timer.

/*

 * Initialize the PIT timer.

 *

 * This is also called after resume to bring the PIT into operation again.

/*

 * Program the next event in oneshot mode

 *

 * Delta is given in PIT ticks

**************************************************************************/

 Reset the ColdFire timer */

**************************************************************************/

**************************************************************************/

**************************************************************************/

**************************************************************************/

 SPDX-License-Identifier: GPL-2.0

/*

 *	m5441x.c -- support for Coldfire m5441x processors

 *

 *	(C) Copyright Steven King <sfking@fdwdc.com>

 make sure these clocks are enabled */

 flexcan.0 */

 flexcan.1 */

 dspi.1 */

 eDMA */

 intc0 */

 intc0 */

 intc0 */

 dspi.0 */

 uart0 */

 uart1 */

 uart2 */

 uart3 */

 pit.1 */

 eport */

 pll */

 esdhc */

 CCM/reset module/Power management */

 gpio */

 i2c.1 */

 i2c.0 */

 dspi.0 */

 tmr.1 */

 tmr.2 */

 tmr.2 */

 tmr.3 */

 pit.0 */

 pit.2 */

 pit.3 */

 adc */

 dac */

 usb otg */

 usb host */

 ssi.0 */

 rng */

 ssi.1 */

 eSDHC */

 enet-fec */

 enet-fec */

 switch.0 */

 switch.1 */

 1-wire */

 i2c.2 */

 i2c.3 */

 i2c.4 */

 i2c.5 */

 uart 4 */

 uart 5 */

 uart 6 */

 uart 7 */

 uart 8 */

 uart 9 */

 make sure these clocks are disabled */

 SPDX-License-Identifier: GPL-2.0

**************************************************************************/

/*

 *	m5307.c  -- platform support for ColdFire 5307 based boards

 *

 *	Copyright (C) 1999-2002, Greg Ungerer (gerg@snapgear.com)

 *	Copyright (C) 2000, Lineo (www.lineo.com)

**************************************************************************/

**************************************************************************/

/*

 *	Some platforms need software versions of the GPIO data registers.

**************************************************************************/

**************************************************************************/

 IS_ENABLED(CONFIG_I2C_IMX) */

**************************************************************************/

 Copy command line from FLASH to local buffer... */

 Only support the external interrupts on their primary level */

	/*

	 * Disable the BDM clocking.  This also turns off most of the rest of

	 * the BDM device.  This is good for EMC reasons. This option is not

	 * incompatible with the memory protection option.

**************************************************************************/

 SPDX-License-Identifier: GPL-2.0

/*

 * idprom.c: Routines to load the idprom into kernel addresses and

 *           interpret the data contained within.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 * Sun3/3x models added by David Monro (davidm@psrg.cs.usyd.edu.au)

 Fun with Sun released architectures. */

/* Here is the master table of Sun machines which use some implementation

 * of the Sparc CPU and have a meaningful IDPROM machtype value that we

 * know about.  See asm-sparc/machines.h for empirical constants.

 First, Sun3's */

 Now, Sun3x's */

 Then, Sun4's */

 { .name = "Sun 4/100 Series",	.id_machtype = (SM_SUN4 | SM_4_110) },

 { .name = "Sun 4/200 Series",	.id_machtype = (SM_SUN4 | SM_4_260) },

 { .name = "Sun 4/300 Series",	.id_machtype = (SM_SUN4 | SM_4_330) },

 { .name = "Sun 4/400 Series",	.id_machtype = (SM_SUN4 | SM_4_470) },

 And now, Sun4c's */

 { .name = "Sun4c SparcStation 1",	.id_machtype = (SM_SUN4C | SM_4C_SS1) },

 { .name = "Sun4c SparcStation IPC",	.id_machtype = (SM_SUN4C | SM_4C_IPC) },

 { .name = "Sun4c SparcStation 1+",	.id_machtype = (SM_SUN4C | SM_4C_SS1PLUS) },

 { .name = "Sun4c SparcStation SLC",	.id_machtype = (SM_SUN4C | SM_4C_SLC) },

 { .name = "Sun4c SparcStation 2",	.id_machtype = (SM_SUN4C | SM_4C_SS2) },

 { .name = "Sun4c SparcStation ELC",	.id_machtype = (SM_SUN4C | SM_4C_ELC) },

 { .name = "Sun4c SparcStation IPX",	.id_machtype = (SM_SUN4C | SM_4C_IPX) },

 Finally, early Sun4m's */

 { .name = "Sun4m SparcSystem600",	.id_machtype = (SM_SUN4M | SM_4M_SS60) },

 { .name = "Sun4m SparcStation10/20",	.id_machtype = (SM_SUN4M | SM_4M_SS50) },

 { .name = "Sun4m SparcStation5",	.id_machtype = (SM_SUN4M | SM_4M_SS40) },

 One entry for the OBP arch's which are sun4d, sun4e, and newer sun4m's */

 { .name = "Sun4M OBP based system",	.id_machtype = (SM_SUN4M_OBP | 0x0) }

 Calculate the IDPROM checksum (xor of the data bytes). */

 Create a local IDPROM copy, verify integrity, and display information. */

 /*

 * linux/arch/m68k/sun3/sun3ints.c -- Sun-3(x) Linux interrupt handling code

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 SPDX-License-Identifier: GPL-2.0

/*

 * linux/arch/m68k/sun3/sun3dvma.c

 *

 * Copyright (C) 2000 Sam Creasey

 *

 * Contains common routines for sun3/sun3x DVMA management.

 DVMA_DEBUG */

	list_add_tail(&(hole->list), cur);

 prepare the hole cache */

		pr_err("error: kaddr %lx len %x\n", kaddr, len);

		*(int *)4 = 0;

	pr_info("using baddr %lx\n", baddr);

 check if this is a vme mapping */

 SPDX-License-Identifier: GPL-2.0

/*

** Tablewalk MMU emulator

**

** by Toshiyasu Morita

**

** Started 1/16/98 @ 2:22 am

/*

** Defines

/*

** Globals

/* pointers to the mm structs for each task in each

 has this context been mmdrop'd? */

 array of pages to be marked off for the rom when we do mem_init later */

/* 256 pages lets the rom take up to 2mb of physical ram..  I really

 Print a PTE value in symbolic form. For debugging. */

 Verbose version. */

 Terse version. More likely to fit on a line. */

 Print the PTE value for a given virtual address. For debugging. */

/*

 * Initialise the MMU emulator.

	/* pmeg align the end of bootmem, adding another pmeg,

 mark all of the pmegs used thus far as reserved */

	/* I'm thinking that most of the top pmeg's are going to be

 liberate all existing mappings in the rest of kernel space */

 the lowest mapping here is the end of our

 vmalloc region

 mark the segmap alloc'd, and reserve any

 of the first 0xbff pages the hardware is

 already using...  does any sun3 support > 24mb?

	/* blank everything below the kernel, and we've got the base

/* erase the mappings for a dead context.  Uses the pg_dir for hints

   as the pmeg tables proved somewhat unreliable, and unmapping all of

/* todo: find a better way to keep track of the pmegs used by a

/* gets an empty context.  if full, kills the next context listed to

/* This context invalidation scheme is, well, totally arbitrary, I'm

   sure it could be much more intelligent...  but it gets the job done

 todo: come up with optimized scheme for flushing contexts */

 kill someone to get our context */

 check to make sure one was really free...

/*

 * Dynamically select a `spare' PMEG and use it to map virtual `vaddr' in

 * `context'. Maintain internal PMEG management structures. This doesn't

 * actually map the physical address, but does clear the old mappings.

todo: better allocation scheme? but is extra complexity worthwhile?

todo: only clear old entries if necessary? how to tell?

 Round address to PMEG boundary. */

 Find a spare one. */

 Invalidate old mapping for the pmeg, if any */

 Update PMEG management structures. */

 don't take pmeg's away from the kernel...

 map kernel pmegs into all contexts */

 Set hardware mapping and clear the old PTE entries. */

 Consider a different one next time. */

/*

 * Handle a pagefault at virtual address `vaddr'; check if there should be a

 * page there (specifically, whether the software pagetables indicate that

 * there is). This is necessary due to the limited size of the second-level

 * Sun3 hardware pagetables (256 groups of 16 pages). If there should be a

 * mapping present, we select a `spare' PMEG and use it to create a mapping.

 * `read_flag' is nonzero for a read fault; zero for a write. Returns nonzero

 * if we successfully handled the fault.

todo: should we bump minor pagefault counter? if so, here or in caller?

todo: possibly inline this into bus_error030 in <asm/buserror.h> ?

 kernel_fault is set when a kernel page couldn't be demand mapped,

 and forces another try using the kernel page table.  basically a

 hack so that vmalloc would work correctly.

todo: next line should check for valid pmd properly.

                pr_info("mmu_emu_handle_fault: invalid pmd\n");

 Make sure this is a valid page */

 Make sure there's a pmeg allocated for the page */

 Write the pte value to hardware MMU */

 Update software copy of the pte value */

 I'm not sure this is necessary. If this is required, we ought to simply

 copy this out when we reuse the PMEG or at some other convenient time.

 Doing it here is fairly meaningless, anyway, as we only know about the

 first access to a given page. --m

 Write-protect error. */

 SPDX-License-Identifier: GPL-2.0

/*

 * linux/arch/m68k/sun3/dvma.c

 *

 * Written by Sam Creasey

 *

 * Sun3 IOMMU routines used for dvma accesses.

 *

	pr_info("dvma_remap: addr %lx -> %lx pte %08lx\n", kaddr, vaddr, pte);

/*

 * arch/m68k/sun3/intersil.c

 *

 * basic routines for accessing the intersil clock within the sun3 machines

 *

 * started 11/12/1999 Sam Creasey

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 bits to set for start/run of the intersil */

 get/set hwclock */

 set or read the clock */

 read clock */

/*

 *  linux/arch/m68k/sun3/config.c

 *

 *  Copyright (C) 1996,1997 Pekka Pietik{inen

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 mc68881 actually */

 dark  */

 magic */

 Enable FPU */

	/* This code looks suspicious, because it doesn't subtract

 Reserve important PMEGS */

 FIXME: These should be probed instead of hardcoded */

 Kernel PMEGs */

 ROM mapping  */

 AMD Ethernet */

 VB area      */

 main I/O     */

 Without this, Bad Things happen when something calls arch_reset. */

 sun3 bootmem allocation */

 align start/end to page boundaries */

 Subtract kernel memory from available memory */

 PROM seems to want the last couple of physical pages. --m

/*

 * Int: level 2 autovector

 * IO: type 1, base 0x00140000, 5 bits phys space: A<4..0>

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

/*

 * printf.c:  Internal prom library printf facility.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

/* This routine is internal to the prom library, no one else should know

 * about or use it!  It's simple and smelly anyway....

 SPDX-License-Identifier: GPL-2.0

/*

 * console.c: Routines that deal with sending and receiving IO

 *            to/from the current console device using the PROM.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

/* Non blocking get character from console input device, returns -1

 * if no input was taken.  This can be used for polling.

 Ugh, we could spin forever on unsupported proms ;( */

/* Non blocking put character to console device, returns -1 if

 * unsuccessful.

 Ugh, we could spin forever on unsupported proms ;( */

 Blocking version of get character routine above. */

 Blocking version of put character routine above. */

 Query for input device type */

 Query for output device type */

 This works on SS-2 (an early OpenFirmware) still. */

 SPDX-License-Identifier: GPL-2.0

/*

 * misc.c:  Miscellaneous prom functions that don't belong

 *          anywhere else.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 Reset and reboot the machine with the command 'bcommand'. */

/* Drop into the prom, with the chance to continue with the 'go'

 * prom command.

/* Drop into the prom, but completely terminate the program.

 * No chance of continuing.

 PROM is out to get me -DaveM */

/* Get the idprom and stuff it into buffer 'idbuf'.  Returns the

 * format type.  'num_bytes' is the number of bytes that your idbuf

 * has space for.  Returns 0xff on error.

		/* There is a problem with the GET_CONTROL_BYTE

		macro; defining the extra variable

		gets around it.

 Get the major prom version number. */

 Get the prom plugin-revision. */

 Get the prom firmware print revision. */

 SPDX-License-Identifier: GPL-2.0

/*

 * init.c:  Initialize internal variables used by the PROM

 *          library functions.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 The root node of the prom device tree. */

 Pointer to the device tree operations structure. */

/* You must call prom_init() before you attempt to use any of the

 * routines in the prom library.

 * It gets passed the pointer to the PROM vector.

 Initialization successful. */

/*

 * ARAnyM console driver

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 !MODULE */

/*

 * atari_nfeth.c - ARAnyM ethernet card driver for GNU/Linux

 *

 * Copyright (c) 2005 Milan Jurik, Petr Stehlik of ARAnyM dev team

 *

 * Based on ARAnyM driver for FreeMiNT written by Standa Opichal

 *

 * This software may be used and distributed according to the terms of

 * the GNU General Public License (GPL), incorporated herein by reference.

 no parameters, return NFAPI_VERSION in d0 */

 no parameters, return Interrupt Level in d0 */

 acknowledge interrupt from host */

 (ethX), called on 'ifup', start receiver thread */

 (ethX), called on 'ifdown', stop the thread */

 (ethX), return size of network data block to read */

 (ethX, buffer, size), read block of network data */

 (ethX, buffer, size), write block of network data */

 (ethX, buffer, size), return MAC HW addr in buffer */

 (ethX, buffer, size), return IP address of host */

 (ethX, buffer, size), return IP address of atari */

 (ethX, buffer, size), return IP netmask */

 These identify the driver base version and may not be removed. */

aranym.org/\n";

 Ready for data */

 No more data */

/*

 * Read a packet out of the adapter and pass it to the upper layers

 read packet length (excluding 32 bit crc) */

 16 Byte align  */

 make room */

 and enqueue packet */

/*

 * natfeat.c - ARAnyM hardware support via Native Features (natfeats)

 *

 * Copyright (c) 2005 Petr Stehlik of ARAnyM dev team

 *

 * Reworked for Linux by Roman Zippel <zippel@linux-m68k.org>

 *

 * This software may be used and distributed according to the terms of

 * the GNU General Public License (GPL), incorporated herein by reference.

 feature_name may be in vmalloc()ed memory, so make a copy */

/*

 * ARAnyM block device driver

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive

 * for more details.

 emulation entry points */

 skip ACSI devices */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/m68k/hp300/time.c

 *

 *  Copyright (C) 1998 Philip Blundell <philb@gnu.org>

 *

 *  This file contains the HP300-specific time handling code.

 Clock hardware definitions */

 This is for machines which generate the exact clock. */

 Turn off the network and SCSI leds */

 Read current timer 1 value */

 select CR1 */

 reset */

 select CR1 */

 enable irq */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/m68k/hp300/config.c

 *

 *  Copyright (C) 1998 Philip Blundell <philb@gnu.org>

 *

 *  This file contains the HP300-specific initialisation code.  It gets

 *  called by setup.c.

 readb() and writeb() */

 serial port address: ignored here */

 read */

/*

 *  arch/m68k/mvme147/config.c

 *

 *  Copyright (C) 1996 Dave Frascone [chaos@mindspring.com]

 *  Cloned from        Richard Hirst [richard@sleepie.demon.co.uk]

 *

 * Based on:

 *

 *  Copyright (C) 1993 Hamish Macdonald

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file README.legal in the main directory of this archive

 * for more details.

 Clear timer */

 Enable watchdog - 100ms to reset */

/*

 * This function is called during kernel startup to initialize

 * the mvme147 IRQ handling routines.

 Board type is only set by newer versions of vmelilo/tftplilo */

 Using pcc tick timer 1 */

 Init the clock with a value */

 The clock counter increments until 0xFFFF then reloads */

 FIXME Setting the time is not yet supported */

 SPDX-License-Identifier: GPL-2.0

/*

 *	Real Time Clock interface for Linux on the BVME6000

 *

 * Based on the PC driver by Paul Gortmaker.

 For struct rtc_time and ioctls, etc */

/*

 *	We sponge a minor off of the misc major. No need slurping

 *	up another valuable major dev number for this. If you add

 *	an ioctl, make sure you don't conflict with SPARC's RTC

 *	ioctls.

 Read the time/date from RTC	*/

 Ensure clock and real-time-mode-register are accessible */

 Set the RTC */

 tm_mon starts at zero */

 Ensure clock and real-time-mode-register are accessible */

/*

 * We enforce only one user at a time here with the open/close.

/*

 *	The various file operations we support.

/*

 *  arch/m68k/bvme6000/config.c

 *

 *  Copyright (C) 1997 Richard Hirst [richard@sleepie.demon.co.uk]

 *

 * Based on:

 *

 *  linux/amiga/config.c

 *

 *  Copyright (C) 1993 Hamish Macdonald

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file README.legal in the main directory of this archive

 * for more details.

	/* The string of returns is to delay the reset until the whole

 Enable the watchdog, via PIT port C bit 4 */

 WDOG enable */

/*

 * This function is called during kernel startup to initialize

 * the bvme6000 IRQ handling routines.

 Board type is only set by newer versions of vmelilo/tftplilo */

    /* Call bvme6000_set_vectors() so ABORT will work, along with BVMBug

     * debugger.  Note trap_init() will splat the abort vector, but

 Now do the PIT configuration */

 Unidirectional 8 bit, no handshake for now */

 PIACK and PIRQ functions enabled */

 Sub Mode 00, H2 i/p, no DMA */

 Just to be tidy! */

 All inputs for now (safest) */

 Sub Mode 1x, H4 i/p, no DMA */

 PRI, SYSCON?, Level3, SCC clks from xtal */

 Mostly outputs */

 PA transceiver disabled */

 WDOG disable */

 Disable snooping for Ethernet and VME accesses */

 Wait for button release */

 Illegal instruction */

 Trace */

 Trap #15 */

 ABORT switch */

 Ack the interrupt */

/*

 * Set up the RTC timer 1 to mode 2, so T1 output toggles every 5ms

 * (40000 x 125ns).  It will interrupt every 10ms, when T1 goes low.

 * So, when reading the elapsed time, you should read timer1,

 * subtract it from 39999, and then add 40000 if T1 is high.

 * That gives you the number of 125ns ticks in to the 10ms period,

 * so divide by 8 to get the microsecond result.

 Ensure timer registers accessible */

 Mode 2, ext clk */

 Route timer 1 to INTR pin */

 Access int.cntrl, etc */

 Just timer 1 ints enabled */

 INTR+T1 active lo, push-pull */

 Stop timers in standby */

 Access timer 1 control */

 Mode 2, ext clk, GO */

/*

 * NOTE:  Don't accept any readings within 5us of rollover, as

 * the T1INT bit may be a little slow getting set.  There is also

 * a fault in the chip, meaning that reads may produce invalid

 * results...

 Ensure timer registers accessible */

 Latch timer1 */

 Read timer1 */

 Read timer1 */

 If in second half cycle.. */

/*

 * Looks like op is non-zero for setting the clock, and zero for

 * reading the clock.

 *

 *  struct hwclk_time {

 *         unsigned        sec;       0..59

 *         unsigned        min;       0..59

 *         unsigned        hour;      0..23

 *         unsigned        day;       1..31

 *         unsigned        mon;       0..11

 *         unsigned        year;      00...

 *         int             wday;      0..6, 0 is Sunday, -1 means unknown/don't set

 * };

	rtc->msr = 0x40;	/* Ensure clock and real-time-mode-register

 Write.... */

 Read....  */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * This file contains the routines for handling the MMU.

 *

 *    Copyright (C) 2007 Xilinx, Inc.  All rights reserved.

 *

 *  Derived from arch/ppc/mm/4xx_mmu.c:

 *  -- paulus

 *

 *  Derived from arch/ppc/mm/init.c:

 *    Copyright (C) 1995-1996 Gary Thomas (gdt@linuxppc.org)

 *

 *  Modifications by Paul Mackerras (PowerMac) (paulus@cs.anu.edu.au)

 *  and Cort Dougan (PReP) (cort@cs.nmt.edu)

 *    Copyright (C) 1996 Paul Mackerras

 *  Amiga/APUS changes by Jesper Skov (jskov@cygnus.co.uk).

 *

 *  Derived from "arch/i386/mm/init.c"

 *    Copyright (C) 1991, 1992, 1993, 1994  Linus Torvalds

/*

 * Initialize the context management stuff.

	/*

	 * The use of context zero is reserved for the kernel.

	 * This code assumes FIRST_CONTEXT < 32.

/*

 * Steal a context from a task that has one at the moment.

 *

 * This isn't an LRU system, it just frees up each context in

 * turn (sort-of pseudo-random replacement :).  This would be the

 * place to implement an LRU scheme if anyone were motivated to do it.

 free up context `next_mmu_context' */

 if we shouldn't free context 0, don't... */

/*

 * Copyright (C) 2007-2008 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2006 Atmark Techno, Inc.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file "COPYING" in the main directory of this archive

 * for more details.

 mem_init */

 Use for MMU and noMMU because of PCI generic code */

/*

 * Initialize the bootmem system and give it all the memory we

 * have available.

 XXX gross */

 FIXME not sure about */

 CONFIG_HIGHMEM */

/*

 * paging_init() sets up the page tables - in fact we've already done this.

 Setup fixmaps */

 Clean every zones */

 We don't have holes in memory map */

	/*

	 * Kernel:

	 * start: base phys address of kernel - page align

	 * end: base phys address of kernel - page align

	 *

	 * min_low_pfn - the first page (mm/bootmem.c - node_boot_start)

	 * max_low_pfn

	 * max_mapnr - the first unused page (mm/bootmem.c - node_low_pfn)

 memory start is from the kernel end (aligned) to higher addr */

 minimum for allocation */

 RAM is assumed contiguous */

 this will put all memory onto the freelists */

/*

 * Check for command-line options that affect what MMU_init will do.

 Look for mem= option on command line */

/*

 * MMU_init_hw does the chip-specific initialization of the MMU hardware.

	/*

	 * The Zone Protection Register (ZPR) defines how protection will

	 * be applied to every page which is a member of a given zone. At

	 * present, we utilize only two of the zones.

	 * The zone index bits (of ZSEL) in the PTE are used for software

	 * indicators, except the LSB.  For user access, zone 1 is used,

	 * for kernel access, zone 0 is used.  We set all but zone 1

	 * to zero, allowing only kernel access as indicated in the PTE.

	 * For zone 1, we set a 01 binary (a value of 10 will not work)

	 * to allow user access as indicated in the PTE.  This also allows

	 * kernel access as indicated in the PTE.

/*

 * MMU_init sets up the basic memory mappings for the kernel,

 * including both RAM and possibly some I/O regions,

 * and sets up the page tables and the MMU hardware ready to go.

 called from head.S */

 Find main memory where the kernel is */

 FIXME parse args from command line - not used */

	/*

	 * Map out the kernel text/data/bss from the available physical

	 * memory.

 kernel start */

 kernel size */

 Remove the init RAM disk from the available memory. */

 CONFIG_BLK_DEV_INITRD */

 Initialize the MMU hardware */

 Map in all of RAM starting at CONFIG_KERNEL_START */

 Extend vmalloc and ioremap area as big as possible */

 Initialize the context management stuff */

 Shortly after that, the entire linear mapping will be available */

	/* This will also cause that unflatten device tree will be allocated

 CMA initialization */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Microblaze support for cache consistent memory.

 * Copyright (C) 2010 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2010 PetaLogix

 * Copyright (C) 2005 John Williams <jwilliams@itee.uq.edu.au>

/*

 *  arch/microblaze/mm/fault.c

 *

 *    Copyright (C) 2007 Xilinx, Inc.  All rights reserved.

 *

 *  Derived from "arch/ppc/mm/fault.c"

 *    Copyright (C) 1995-1996 Gary Thomas (gdt@linuxppc.org)

 *

 *  Derived from "arch/i386/mm/fault.c"

 *    Copyright (C) 1991, 1992, 1993, 1994  Linus Torvalds

 *

 *  Modified by Cort Dougan and Paul Mackerras.

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License.  See the file COPYING in the main directory of this

 * archive for more details.

 *

 updated by do_page_fault() */

 updated by do_page_fault() */

/*

 * Check whether the instruction at regs->pc is a store using

 * an update addressing form which will update r1.

 check for 1 in the rD field */

 check for store opcodes */

/*

 * bad_page_fault is called when we have a bad access from the kernel.

 * It is called from do_page_fault above and from some of the procedures

 * in traps.c.

 MS: no context */

 Are we prepared to handle this fault?  */

 kernel has accessed a bad area */

/*

 * The error_code parameter is ESR for a data fault,

 * 0 for an instruction fault.

 On a kernel SLB miss we can only check for a valid exception entry */

 for instr TLB miss and instr storage exception ESR_S is undefined */

		/* faulthandler_disabled() in user mode is really bad,

	/* When running in the kernel we expect faults to occur only to

	 * addresses in user space.  All other faults represent errors in the

	 * kernel and should generate an OOPS.  Unfortunately, in the case of an

	 * erroneous fault occurring in a code path which already holds mmap_lock

	 * we will deadlock attempting to validate the fault against the

	 * address space.  Luckily the kernel only validly references user

	 * space from well defined areas of code, which are listed in the

	 * exceptions table.

	 *

	 * As the vast majority of faults will be valid we will only perform

	 * the source reference check when there is a possibility of a deadlock.

	 * Attempt to lock the address space, if we cannot we then validate the

	 * source.  If this is invalid we can skip the address space check,

	 * thus avoiding the deadlock.

	/*

	 * N.B. The ABI allows programs to access up to

	 * a few hundred bytes below the stack pointer (TBD).

	 * The kernel signal delivery code writes up to about 1.5kB

	 * below the stack pointer (r1) before decrementing it.

	 * The exec code can write slightly over 640kB to the stack

	 * before setting the user r1.  Thus we allow the stack to

	 * expand to 1MB without further checks.

 get user regs even if this fault is in kernel mode */

		/*

		 * A user-mode access to an address a long way below

		 * the stack pointer is only valid if the instruction

		 * is one which would update the stack pointer to the

		 * address accessed if the instruction completed,

		 * i.e. either stwu rs,n(r1) or stwux rs,r1,rb

		 * (or the byte, halfword, float or double forms).

		 *

		 * If we don't check this then any write to the area

		 * between the last mapped region and the stack will

		 * expand the stack rather than segfaulting.

 a write */

 a read */

 protection fault */

	/*

	 * If for any reason at all we couldn't handle the fault,

	 * make sure we exit gracefully rather than endlessly redo

	 * the fault.

			/*

			 * No need to mmap_read_unlock(mm) as we would

			 * have already released it in __lock_page_or_retry

			 * in mm/filemap.c.

	/*

	 * keep track of tlb+htab misses that are good addrs but

	 * just need pte's created via handle_mm_fault()

	 * -- Cort

 User mode accesses cause a SIGSEGV */

/*

 * We ran out of memory, or some other thing happened to us that made

 * us unable to handle the page fault gracefully.

/*

 *  This file contains the routines setting up the linux page tables.

 *

 * Copyright (C) 2008 Michal Simek

 * Copyright (C) 2008 PetaLogix

 *

 *    Copyright (C) 2007 Xilinx, Inc.  All rights reserved.

 *

 *  Derived from arch/ppc/mm/pgtable.c:

 *    -- paulus

 *

 *  Derived from arch/ppc/mm/init.c:

 *    Copyright (C) 1995-1996 Gary Thomas (gdt@linuxppc.org)

 *

 *  Modifications by Paul Mackerras (PowerMac) (paulus@cs.anu.edu.au)

 *  and Cort Dougan (PReP) (cort@cs.nmt.edu)

 *    Copyright (C) 1996 Paul Mackerras

 *  Amiga/APUS changes by Jesper Skov (jskov@cygnus.co.uk).

 *

 *  Derived from "arch/i386/mm/init.c"

 *    Copyright (C) 1991, 1992, 1993, 1994  Linus Torvalds

 *

 *  This file is subject to the terms and conditions of the GNU General

 *  Public License.  See the file COPYING in the main directory of this

 *  archive for more details.

 *

	/*

	 * Choose an address to map it to.

	 * Once the vmalloc system is running, we use it.

	 * Before then, we use space going down from ioremap_base

	 * (ioremap_bot records where we're up to).

	/*

	 * Don't allow anybody to remap normal RAM that we're using.

	 * mem_init() sets high_memory so only do the check after that.

	 *

	 * However, allow remap of rootfs: TBD

	/*

	 * Is it already mapped? If the whole area is mapped then we're

	 * done, otherwise remap it since we want to keep the virt addrs for

	 * each request contiguous.

	 *

	 * We make the assumption here that if the bottom and top

	 * of the range we want are mapped then it's mapped to the

	 * same virt address (and this is contiguous).

	 *  -- Cort

 Use upper 10 bits of VA to index the first level map */

 Use middle 10 bits of VA to index the second-level map */

 from powerpc - pgtable.c */

 pg = pte_alloc_kernel(&init_mm, pd, va); */

/*

 * Map in all of physical memory starting at CONFIG_KERNEL_START.

			/* On the MicroBlaze, no user access

 is x a power of 2? */

/* Scan the real Linux page tables and return a PTE pointer for

 * a virtual address in a context.

 * Returns true (1) if PTE was found, zero otherwise.  The pointer to

 * the PTE pointer is unmodified if PTE is not found.

/* Find physical address for this virtual address.  Normally used by

 * I/O functions, but anyone can call it.

	/* Allow mapping of user addresses (within the thread)

	 * for DMA if necessary.

/*

 * Copyright (C) 2008-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2008-2009 PetaLogix

 * Copyright (C) 2006 Atmark Techno, Inc.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file "COPYING" in the main directory of this archive

 * for more details.

 for USER_DS macros */

		/* if we're creating a new kernel thread then just zeroing all

 fn */

	/* we should consider the fact that childregs is a copy of the parent

	 * regs which were saved immediately after entering the kernel state

	 * before enabling VM. This MSR will be restored in switch_to and

	 * RETURN() and we want to have the right machine state there

	 * specifically this state must have INTs disabled before and enabled

	 * after performing rtbd

	 * compose the right MSR for RETURN(). It will work for switch_to also

	 * excepting for VM and UMS

	 * don't touch UMS , CARRY and cache bits

 exceptions will be enabled*/

 switch_to to kernel mode */

	/*

	 *  r21 is the thread reg, r10 is 6th arg to clone

	 *  which contains TLS area

 TBD (used by procfs) */

 Set up a thread for executing a new program */

/*

 * Set up a thread for executing a new program

 MicroBlaze has no separate FPU registers */

/*

 * Stack trace support for Microblaze.

 *

 * Copyright (C) 2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2009 PetaLogix

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file "COPYING" in the main directory of this archive

 * for more details.

 Exclude our helper functions from the trace*/

/*

 * Copyright (C) 2007-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2007-2009 PetaLogix

 * Copyright (C) 2006 Atmark Techno, Inc.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file "COPYING" in the main directory of this archive

 * for more details.

 0 == entire stack */

 Pick up caller of dump_stack() */

	/*

	 * Make the first line an 'odd' size if necessary to get

	 * remaining lines to start at an address multiple of 0x10

/*

 * Copyright (C) 2007-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2007-2009 PetaLogix

 * Copyright (C) 2006 Atmark Techno, Inc.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file "COPYING" in the main directory of this archive

 * for more details.

 Saved kernel stack pointer */

 Kernel/user mode */

 Saved SP on kernel entry */

 Temp variable for entry */

 Saved current pointer */

/*

 * Placed cmd_line to .data section because can be initialized from

 * ASM code. Default position is BSS section which is cleared

 * in machine_early_init().

/* Handle both romfs and cramfs types, without generating unnecessary

 romfs */

 cramfs */

 CONFIG_MTD_UCLINUX_EBSS */

	/* If CONFIG_MTD_UCLINUX is defined, assume ROMFS is at the

	 * end of kernel. There are two position which we want to check.

	 * The first is __init_end and the second __bss_start.

 Move ROMFS out of BSS before clearing it */

 clearing bss section */

 initialize device tree for usage in early_printk */

	/* setup kernel_tlb after BSS cleaning

	/* printk("TLB1 0x%08x, TLB0 0x%08x, tlb 0x%x\n", tlb0,

 What else can we do? */

	/* Do not copy reset vectors. offset = 0x2 means skip the first

	 * two instructions. dst is pointer to MB vectors which are placed

 Initialize global data */

 We start in kernel mode */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Procedures for creating, accessing and interpreting the device tree.

 *

 * Paul Mackerras	August 1996.

 * Copyright (C) 1996-2005 Paul Mackerras.

 *

 *  Adapted for 64bit PowerPC by Dave Engebretsen and Peter Bergner.

 *    {engebret|bergner}@us.ibm.com

/*

 * HW exception handling

 *

 * Copyright (C) 2008-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2008 PetaLogix

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License.  See the file COPYING in the main directory of this

 * archive for more details.

/*

 * This file handles the architecture-dependent parts of hardware exceptions

 For KM CPU var */

	/* do_exit() should take care of panic'ing from an interrupt

	 * context so we don't handle it here

 for user application debugging */

 IEEE FP exception */

 I removed fsr variable and use code var for storing fsr */

 FIXME what to do in unexpected exception */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2009-2010 PetaLogix

 * Copyright (C) 2006 Benjamin Herrenschmidt, IBM Corporation

 *

 * Provide default implementations of the DMA mapping callbacks for

 * directly mapped busses.

/*

 * Copyright (C) 2007-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2007-2009 PetaLogix

 * Copyright (C) 2007 John Williams <john.williams@petalogix.com>

 *

 * Copyright (C) 2006 Atmark Techno, Inc.

 *	Yasushi SHOJI <yashi@atmark-techno.com>

 *	Tetsuya OHKAWA <tetsuya@atmark-techno.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file "COPYING" in the main directory of this archive

 * for more details.

/*

 * Ftrace support for Microblaze.

 *

 * Copyright (C) 2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2009 PetaLogix

 *

 * Based on MIPS and PowerPC ftrace code

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file "COPYING" in the main directory of this archive

 * for more details.

/*

 * Hook the return address and push it in the stack of return addrs

 * in current thread info.

	/*

	 * Protect against fault, even if it shouldn't

	 * happen. This tool is too much intrusive to

	 * ignore such a protection.

 CONFIG_FUNCTION_GRAPH_TRACER */

 save value to addr - it is save to do it in asm */

 if save was or not */

 saving whole imm instruction */

 There are two approaches howto solve ftrace_make nop function - look below */

 saving whole bralid instruction */

	/* we have this part of code which we are working with

	 * b000c000        imm     -16384

	 * b9fc8e30        bralid  r15, -29136     // c0008e30 <_mcount>

	 * 80000000        or      r0, r0, r0

	 *

	 * The first solution (!USE_FTRACE_NOP-could be called branch solution)

	 * b000c000        bri	12 (0xC - jump to any other instruction)

	 * b9fc8e30        bralid  r15, -29136     // c0008e30 <_mcount>

	 * 80000000        or      r0, r0, r0

	 * any other instruction

	 *

	 * The second solution (USE_FTRACE_NOP) - no jump just nops

	 * 80000000        or      r0, r0, r0

	 * 80000000        or      r0, r0, r0

	 * 80000000        or      r0, r0, r0

 USE_FTRACE_NOP */

 USE_FTRACE_NOP */

 USE_FTRACE_NOP */

 I believe that first is called ftrace_make_nop before this function */

 USE_FTRACE_NOP */

 create proper saving to ftrace_call poll */

 imm func_upper */

 addik r20, r0, func_lower */

 save upper and lower code */

 We just need to replace the rtsd r15, 8 with NOP */

 saving place for jump instruction */

 save jump over instruction */

 CONFIG_FUNCTION_GRAPH_TRACER */

 CONFIG_DYNAMIC_FTRACE */

/*

 * Copyright (C) 2007-2013 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2012-2013 Xilinx, Inc.

 * Copyright (C) 2007-2009 PetaLogix

 * Copyright (C) 2006 Atmark Techno, Inc.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file "COPYING" in the main directory of this archive

 * for more details.

 loading value to timer reg */

 load the initial value */

	/* see timer data sheet for detail

	 * !ENALL - don't enable 'em all

	 * !PWMA - disable pwm

	 * TINT - clear interrupt status

	 * ENT- enable timer itself

	 * ENIT - enable interrupt

	 * !LOAD - clear the bit to let go

	 * ARHT - auto reload

	 * !CAPT - no external trigger

	 * !GENT - no external signal

	 * UDT - set the timer as down counter

	 * !MDT0 - generate mode

 loading value to timer reg */

 load the initial value */

 reading actual value of timer 1 */

 stop timer1 */

 start timer1 - up counting without interrupt */

 register timecounter - for ftrace support */

 If there is clock-frequency property than use it */

/*

 * Backtrace support for Microblaze

 *

 * Copyright (C) 2010  Digital Design Corporation

 *

 * Based on arch/sh/kernel/cpu/sh5/unwind.c code which is:

 * Copyright (C) 2004  Paul Mundt

 * Copyright (C) 2004  Richard Curnow

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 #define DEBUG 1 */

/*

 * On Microblaze, finding the previous stack frame is a little tricky.

 * At this writing (3/2010), Microblaze does not support CONFIG_FRAME_POINTERS,

 * and even if it did, gcc (4.1.2) does not store the frame pointer at

 * a consistent offset within each frame. To determine frame size, it is

 * necessary to search for the assembly instruction that creates or reclaims

 * the frame and extract the size from it.

 *

 * Microblaze stores the stack pointer in r1, and creates a frame via

 *

 *     addik r1, r1, -FRAME_SIZE

 *

 * The frame is reclaimed via

 *

 *     addik r1, r1, FRAME_SIZE

 *

 * Frame creation occurs at or near the top of a function.

 * Depending on the compiler, reclaim may occur at the end, or before

 * a mid-function return.

 *

 * A stack frame is usually not created in a leaf function.

 *

/**

 * get_frame_size - Extract the stack adjustment from an

 *                  "addik r1, r1, adjust" instruction

 * @instr : Microblaze instruction

 *

 * Return - Number of stack bytes the instruction reserves or reclaims

/**

 * find_frame_creation - Search backward to find the instruction that creates

 *                       the stack frame (hopefully, for the same function the

 *                       initial PC is in).

 * @pc : Program counter at which to begin the search

 *

 * Return - PC at which stack frame creation occurs

 *          NULL if this cannot be found, i.e. a leaf function

	/* NOTE: Distance to search is arbitrary

	 *	 250 works well for most things,

	 *	 750 picks up things like tcp_recvmsg(),

	 *	1000 needed for fat_fill_super()

 addik r1, r1, foo ? */

 No */

/**

 * lookup_prev_stack_frame - Find the stack frame of the previous function.

 * @fp          : Frame (stack) pointer for current function

 * @pc          : Program counter within current function

 * @leaf_return : r15 value within current function. If the current function

 *		  is a leaf, this is the caller's return address.

 * @pprev_fp    : On exit, set to frame (stack) pointer for previous function

 * @pprev_pc    : On exit, set to current function caller's return address

 *

 * Return - 0 on success, -EINVAL if the previous frame cannot be found

 _switch_to is a special leaf function */

	/* NOTE: don't check kernel_text_address here, to allow display

	 *	 of userland return address

/**

 * unwind_trap - Unwind through a system trap, that stored previous state

 *		 on the stack.

 To be implemented */

/**

 * microblaze_unwind_inner - Unwind the stack from the specified point

 * @task  : Task whose stack we are to unwind (may be NULL)

 * @pc    : Program counter from which we start unwinding

 * @fp    : Frame (stack) pointer from which we start unwinding

 * @leaf_return : Value of r15 at pc. If the function is a leaf, this is

 *				  the caller's return address.

 * @trace : Where to store stack backtrace (PC values).

 *	    NULL == print backtrace to kernel log

 * @loglvl : Used for printk log level if (trace == NULL).

 Is previous function the HW exception handler? */

			/*

			 * HW exception handler doesn't save all registers,

			 * so we open-code a special case of unwind_trap()

 Is previous function a trap handler? */

 Have we reached userland? */

 Stop when we reach anything not part of the kernel */

/**

 * microblaze_unwind - Stack unwinder for Microblaze (external entry point)

 * @task  : Task whose stack we are to unwind (NULL == current)

 * @trace : Where to store stack backtrace (PC values).

 *	    NULL == print backtrace to kernel log

 * @loglvl : Used for printk log level if (trace == NULL).

 Since we are not a leaf function, use leaf_return = 0 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2008-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2008-2009 PetaLogix

/*

 * Assembly functions that may be used (directly or indirectly) by modules

/*

 * Signal handling

 *

 * Copyright (C) 2008-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2008-2009 PetaLogix

 * Copyright (C) 2003,2004 John Williams <jwilliams@itee.uq.edu.au>

 * Copyright (C) 2001 NEC Corporation

 * Copyright (C) 2001 Miles Bader <miles@gnu.org>

 * Copyright (C) 1999,2000 Niibe Yutaka & Kaz Kojima

 * Copyright (C) 1991,1992 Linus Torvalds

 *

 * 1997-11-28 Modified for POSIX.1b signals by Richard Henderson

 *

 * This file was was derived from the sh version, arch/sh/kernel/signal.c

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License. See the file COPYING in the main directory of this

 * archive for more details.

/*

 * Do a signal return; undo the signal stack.

 signal trampoline */

 signal trampoline */

 Always make any pending restarted system calls return -EINTR */

/*

 * Set up a signal frame.

/*

 * Determine which stack to use..

 Default to using normal stack */

 Create the ucontext. */

	/* Set up to return from userspace. If provided, use a stub

 minus 8 is offset to cater for "rtsd r15,8" */

 addi r12, r0, __NR_sigreturn */

 brki r14, 0x8 */

	/* Return from sighandler will jump to the tramp.

 MS: I need add offset in page */

 MS address is virtual */

 Set up registers for signal handler */

 Signal handler args: */

 arg 0: signum */

 arg 1: siginfo */

 arg2: ucontext */

 Offset to handle microblaze rtid r14, 0 */

 Handle restarting system calls */

 offset of 4 bytes to re-execute trap (brki) instruction */

/*

 * OK, we're invoking a handler

 Set up the stack frame */

/*

 * Note that 'init' is a special process: it doesn't get signals it doesn't

 * want to handle. Thus you cannot kill init even with a SIGKILL even by

 * mistake.

 *

 * Note that we go through the signals twice: once to check the signals that

 * the kernel can handle, and then we build all the user-level signal handling

 * stack-frames in one go after that.

 Whee! Actually deliver the signal. */

	/*

	 * If there's no signal to deliver, we just put the saved sigmask

	 * back.

/*

 * Microblaze KGDB support

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 mfs can't read it */

 keep pvr separately because it is unchangeble */

 registers r0 - r31, pc, msr, ear, esr, fsr + do not save pt_mode */

 Branch target register can't be changed */

 pvr part  - we have 11 pvr regs */

 read special registers - can't be changed */

	/* pt_regs and gdb_regs have the same 37 values.

	 * The rest of gdb_regs are unused and can't be changed.

	/* Jump over the first arch_kgdb_breakpoint which is barrier to

 untested */

 registers r0 - r31, pc, msr, ear, esr, fsr + do not save pt_mode */

 pvr part  - we have 11 pvr regs */

 handle the optional parameter */

 this means that we do not want to exit from the handler */

 Fill PVR structure */

 Nothing to do */

/*

 * Global data

 brki r16, 0x18 */

 brki r16, 0x18 */

/*

 * `ptrace' system call

 *

 * Copyright (C) 2008-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2007-2009 PetaLogix

 * Copyright (C) 2004-2007 John Williams <john.williams@petalogix.com>

 *

 * derived from arch/v850/kernel/ptrace.c

 *

 * Copyright (C) 2002,03 NEC Electronics Corporation

 * Copyright (C) 2002,03 Miles Bader <miles@gnu.org>

 *

 * Derived from arch/mips/kernel/ptrace.c:

 *

 * Copyright (C) 1992 Ross Biro

 * Copyright (C) Linus Torvalds

 * Copyright (C) 1994, 95, 96, 97, 98, 2000 Ralf Baechle

 * Copyright (C) 1996 David S. Miller

 * Kevin D. Kissell, kevink@mips.com and Carsten Langgaard, carstenl@mips.com

 * Copyright (C) 1999 MIPS Technologies, Inc.

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License. See the file COPYING in the main directory of this

 * archive for more details.

 Returns the address where the register at REG_OFFS in P is stashed away. */

	/*

	 * Three basic cases:

	 *

	 * (1)	A register normally saved before calling the scheduler, is

	 *	available in the kernel entry pt_regs structure at the top

	 *	of the kernel stack. The kernel trap/irq exit path takes

	 *	care to save/restore almost all registers for ptrace'd

	 *	processes.

	 *

	 * (2)	A call-clobbered register, where the process P entered the

	 *	kernel via [syscall] trap, is not stored anywhere; that's

	 *	OK, because such registers are not expected to be preserved

	 *	when the trap returns anyway (so we don't actually bother to

	 *	test for this case).

	 *

	 * (3)	A few registers not used at all by the kernel, and so

	 *	normally never saved except by context-switches, are in the

	 *	context switch state.

 Register saved during kernel entry (or not available). */

 Read/write the word at location ADDR in the registers. */

			/*

			 * Special requests that don't actually correspond

			 * to offsets in struct pt_regs.

				/* MS potential problem on WB system

				 * Be aware that reg_addr is virtual address

				 * virt_to_phys conversion is necessary.

				 * This could be sensible solution.

		/*

		 * Tracing decided this syscall should not happen.

		 * We'll return a bogus call number to get an ENOSYS

		 * error, but leave the original number in regs->regs[0].

 nothing to do */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2007-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2007-2009 PetaLogix

		/*

		 * Be careful! mb-gcc / mb-ld splits the relocs between the

		 * text and the reloc table. In general this means we must

		 * read the current contents of (*location), add any offset

		 * then store the result back in

/*

 * Copyright (C) 2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2009 PetaLogix

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file "COPYING" in the main directory of this archive

 * for more details.

 Give the restart hook 1 s to take us down */

/*

 * Copyright (C) 2007-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2007-2009 PetaLogix

 * Copyright (C) 2006 Atmark Techno, Inc.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file "COPYING" in the main directory of this archive

 * for more details.

 process the entire interrupt tree in one go */

/*

 * Copyright (C) 2007-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2007-2009 PetaLogix

 * Copyright (C) 2006 Atmark Techno, Inc.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file "COPYING" in the main directory of this archive

 * for more details.

 struct pt_regs */

 Magic offsets for PTRACE PEEK/POKE etc */

 struct task_struct */

 struct thread_info */

 struct cpu_context */

 r1 */

 dedicated registers */

 non-volatile registers */

 special purpose registers */

/*

 * Copyright (C) 2007-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2007-2009 PetaLogix

 * Copyright (C) 2007 John Williams <john.williams@petalogix.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file "COPYING" in the main directory of this archive

 * for more details.

 These key value are as per MBV field in PVR0 */

/*

 * FIXME Not sure if the actual key is defined by Xilinx in the PVR

 FIXME There is no key code defined for spartan2 */

/* FIXME I found weird behavior with MB 7.00.a/b 7.10.a

 take timebase-frequency from DTS */

/*

 * CPU-version specific code

 *

 * Copyright (C) 2007-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2006-2009 PetaLogix

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file "COPYING" in the main directory of this archive

 * for more details.

 Denormalised to get the fpga family string */

 Denormalised to get the hw version string */

/*

 * Support for MicroBlaze PVR (processor version register)

 *

 * Copyright (C) 2007-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2007-2009 PetaLogix

 * Copyright (C) 2007 John Williams <john.williams@petalogix.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file "COPYING" in the main directory of this archive

 * for more details.

/*

 * Helper macro to map between fields in our struct cpuinfo, and

 * the PVR macros in pvr.h.

 for saving temp value */

/*

 * Support for MicroBlaze PVR (processor version register)

 *

 * Copyright (C) 2007-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2007-2009 PetaLogix

 * Copyright (C) 2007 John Williams <john.williams@petalogix.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file "COPYING" in the main directory of this archive

 * for more details.

/*

 * Until we get an assembler that knows about the pvr registers,

 * this horrible cruft will have to do.

 * That hardcoded opcode is mfs r3, rpvrNN

 Prevent warning about unused */	\

/*

 * Does the CPU support the PVR register?

 * return value:

 * 0: no PVR

 * 1: simple PVR

 * 2: full PVR

 *

 * This must work on all CPU versions, including those before the

 * PVR was even an option.

 PVR bit in MSR tells us if there is any support */

 for partial PVR use static cpuinfo */

/*

 * Cache control for MicroBlaze cache memories

 *

 * Copyright (C) 2007-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2007-2009 PetaLogix

 * Copyright (C) 2007-2009 John Williams <john.williams@petalogix.com>

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License. See the file COPYING in the main directory of this

 * archive for more details.

/* Helper macro for computing the limits of cache range loops

 *

 * End address can be unaligned which is OK for C implementation.

 * ASM implementation align it in ASM macros

/*

 * Helper macro to loop over the specified cache_size/line_length and

 * execute 'op' on that cacheline

/* Used for wdc.flush/clear which can use rB for offset which is not possible

 * to use for simple wdc or wic.

 *

 * start address is cache aligned

 * end address is not aligned, if end is aligned then I have to subtract

 * cacheline length because I can't flush/invalidate the next cacheline.

 * If is not, I align it because I will flush/invalidate whole line.

 It is used only first parameter for OP - for wic, wdc */

/*

 * FIXME It is blindly invalidation as is expected

 * but can't be called on noMMU in microblaze_cache_init below

 *

 * MS: noMMU kernel won't boot if simple wdc is used

 * The reason should be that there are discared data which kernel needs

 struct for wb caches and for wt caches */

 new wb cache model */

 There is only difference in ie, id, de, dd functions */

 Old wt cache model with disabling irq and turn off cache */

 New wt cache model for newer Microblaze versions */

 CPU version code for 7.20.c - see arch/microblaze/kernel/cpu/cpuinfo.c */

 MS: problem with signal handling - hw bug */

 MS: problem with signal handling - hw bug */

	/*

	 * FIXME Invalidation is done in U-BOOT

	 * WT cache: Data is already written to main memory

	 * WB cache: Discard data on noMMU which caused that kernel doesn't boot

 invalidate_dcache(); */

/*

 * Copyright (C) 2007-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2007-2009 PetaLogix

 * Copyright (C) 2007 John Williams <john.williams@petalogix.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License. See the file "COPYING" in the main directory of this archive

 * for more details.

 Do various fixups based on CPU version and FPGA family strings */

 Resolved the CPU version code */

 Resolved the fpga family code */

 FIXME - mb3 and spartan2 do not exist in PVR */

 This is mb3 and on a non Spartan2 */

 Hardware Multiplier in use */

/*

 * Copyright (C) 2008-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2008-2009 PetaLogix

 * Copyright (C) 2007 John Williams

 *

 * Reasonably optimised generic C-code for memcpy on Microblaze

 * This is generic C code to do efficient, alignment-aware memcpy.

 *

 * It is based on demo code originally Copyright 2001 by Intel Corp, taken from

 * http://www.embedded.com/showArticle.jhtml?articleID=19205567

 *

 * Attempts were made, unsuccessfully, to contact the original

 * author of this code (Michael Morrow, Intel).  Below is the original

 * copyright notice.

 *

 * This software has been developed by Intel Corporation.

 * Intel specifically disclaims all warranties, express or

 * implied, and all liability, including consequential and

 * other indirect damages, for the use of this program, including

 * liability for infringement of any proprietary rights,

 * and including the warranties of merchantability and fitness

 * for a particular purpose. Intel does not assume any

 * responsibility for and errors which may appear in this program

 * not any responsibility to update it.

 Simple, byte oriented memcpy. */

 CONFIG_OPT_LIB_FUNCTION */

	/* The following code tries to optimize the copy by using unsigned

	 * alignment. This will work fine if both source and destination are

	 * aligned on the same boundary. However, if they are aligned on

	 * different boundaries shifts will be necessary. This might result in

	 * bad performance on MicroBlaze systems without a barrel shifter.

 Align the destination to a word boundary. */

 This is done in an endian independent manner. */

 Choose a copy scheme based on the source */

 alignment relative to destination. */

 Both byte offsets are aligned */

 Unaligned - Off by 1 */

 Word align the source */

 Load the holding buffer */

 Load the holding buffer */

 Realign the source */

 Unaligned - Off by 2 */

 Word align the source */

 Load the holding buffer */

 Load the holding buffer */

 Realign the source */

 Unaligned - Off by 3 */

 Word align the source */

 Load the holding buffer */

 Load the holding buffer */

 Realign the source */

 Finish off any remaining bytes */

 simple fast copy, ... unless a cache boundary is crossed */

 CONFIG_OPT_LIB_FUNCTION */

 __HAVE_ARCH_MEMCPY */

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

 If we still don't have umul_ppmm, define it using plain C.  */

 this can't give carry */\

 but this indeed can */			\

 did we get it? */			\

 yes, add it in the proper pos */	\

/*

 * Copyright (C) 2008-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2008-2009 PetaLogix

 * Copyright (C) 2007 John Williams

 *

 * Reasonably optimised generic C-code for memset on Microblaze

 * This is generic C code to do efficient, alignment-aware memcpy.

 *

 * It is based on demo code originally Copyright 2001 by Intel Corp, taken from

 * http://www.embedded.com/showArticle.jhtml?articleID=19205567

 *

 * Attempts were made, unsuccessfully, to contact the original

 * author of this code (Michael Morrow, Intel).  Below is the original

 * copyright notice.

 *

 * This software has been developed by Intel Corporation.

 * Intel specifically disclaims all warranties, express or

 * implied, and all liability, including consequential and

 * other indirect damages, for the use of this program, including

 * liability for infringement of any proprietary rights,

 * and including the warranties of merchantability and fitness

 * for a particular purpose. Intel does not assume any

 * responsibility for and errors which may appear in this program

 * not any responsibility to update it.

 Truncate c to 8 bits */

 Simple, byte oriented memset or the rest of count. */

 CONFIG_OPT_LIB_FUNCTION */

 Truncate c to 8 bits */

 Make a repeating word out of it */

 Align the destination to a word boundary */

 This is done in an endian independent manner */

 Do as many full-word copies as we can */

 Simple, byte oriented memset or the rest of count. */

 CONFIG_OPT_LIB_FUNCTION */

 __HAVE_ARCH_MEMSET */

/*

 * Copyright (C) 2008-2009 Michal Simek <monstr@monstr.eu>

 * Copyright (C) 2008-2009 PetaLogix

 * Copyright (C) 2007 John Williams

 *

 * Reasonably optimised generic C-code for memcpy on Microblaze

 * This is generic C code to do efficient, alignment-aware memmove.

 *

 * It is based on demo code originally Copyright 2001 by Intel Corp, taken from

 * http://www.embedded.com/showArticle.jhtml?articleID=19205567

 *

 * Attempts were made, unsuccessfully, to contact the original

 * author of this code (Michael Morrow, Intel).  Below is the original

 * copyright notice.

 *

 * This software has been developed by Intel Corporation.

 * Intel specifically disclaims all warranties, express or

 * implied, and all liability, including consequential and

 * other indirect damages, for the use of this program, including

 * liability for infringement of any proprietary rights,

 * and including the warranties of merchantability and fitness

 * for a particular purpose. Intel does not assume any

 * responsibility for and errors which may appear in this program

 * not any responsibility to update it.

 Use memcpy when source is higher than dest */

 copy backwards, from end to beginning */

 Simple, byte oriented memmove. */

 CONFIG_OPT_LIB_FUNCTION */

 Use memcpy when source is higher than dest */

	/* The following code tries to optimize the copy by using unsigned

	 * alignment. This will work fine if both source and destination are

	 * aligned on the same boundary. However, if they are aligned on

	 * different boundaries shifts will be necessary. This might result in

	 * bad performance on MicroBlaze systems without a barrel shifter.

 FIXME this part needs more test */

 Do a descending copy - this is a bit trickier! */

 Align the destination to a word boundary. */

 This is done in an endian independent manner. */

 Choose a copy scheme based on the source */

 alignment relative to dstination. */

 Both byte offsets are aligned */

 Unaligned - Off by 1 */

 Word align the source */

 Load the holding buffer */

 Load the holding buffer */

 Realign the source */

 Unaligned - Off by 2 */

 Word align the source */

 Load the holding buffer */

 Load the holding buffer */

 Realign the source */

 Unaligned - Off by 3 */

 Word align the source */

 Load the holding buffer */

 Load the holding buffer */

 Realign the source */

 simple fast copy, ... unless a cache boundary is crossed */

 Finish off any remaining bytes */

 CONFIG_OPT_LIB_FUNCTION */

 __HAVE_ARCH_MEMMOVE */

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

 w.s.high = 1..1 or 0..0 */

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Contains common pci routines for ALL ppc platform

 * (based on pci_32.c and pci_64.c)

 *

 * Port for PPC64 David Engebretsen, IBM Corp.

 * Contains common pci routines for ppc64 platform, pSeries and iSeries brands.

 *

 * Copyright (C) 2003 Anton Blanchard <anton@au.ibm.com>, IBM

 *   Rework, based on alpha PCI code.

 *

 * Common pmac/prep/chrp pci routines. -- Cort

 XXX kill that some day ... */

 Global phb counter */

 ISA Memory physical address */

/* This routine is meant to be used early during boot, when the

 * PCI bus numbers have not yet been assigned, and you need to

 * issue PCI config cycles to an OF device.

 * It could also be used to "fix" RTAS config cycles if you want

 * to set pci_assign_all_buses to 1 and still use RTAS for PCI

 * config cycles.

 No special bus mastering setup handling */

/*

 * Platform support for /proc/bus/pci/X/Y mmap()s.

 should never happen */

 Convert to an offset within this PCI controller */

/*

 * This one is used by /dev/mem and fbdev who have no clue about the

 * PCI device, it tries to find the PCI device first and calls the

 * above routine

 Active and same type? */

 In the range of this resource? */

 This provides legacy IO read access on a bus */

	/* Check if port can be supported by that bus. We only check

	 * the ranges of the PHB though, not the bus itself as the rules

	 * for forwarding legacy cycles down bridges are not our problem

	 * here. So if the host bridge supports it, we do it.

 This provides legacy IO write access on a bus */

	/* Check if port can be supported by that bus. We only check

	 * the ranges of the PHB though, not the bus itself as the rules

	 * for forwarding legacy cycles down bridges are not our problem

	 * here. So if the host bridge supports it, we do it.

	/* WARNING: The generic code is idiotic. It gets passed a pointer

	 * to what can be a 1, 2 or 4 byte quantity and always reads that

	 * as a u32, which means that we have to correct the location of

	 * the data read within those 32 bits for size 1 and 2

 This provides legacy IO or memory mmap access on a bus */

		/* Hack alert !

		 *

		 * Because X is lame and can fail starting if it gets an error

		 * trying to mmap legacy_mem (instead of just moving on without

		 * legacy memory access) we fake it here by giving it anonymous

		 * memory, effectively behaving just like /dev/zero

	/* We pass a CPU physical address to userland for MMIO instead of a

	 * BAR value because X is lame and expects to be able to use that

	 * to pass to /dev/mem!

	 *

	 * That means we may have 64-bit values where some apps only expect

	 * 32 (like X itself since it thinks only Sparc has 64-bit MMIO).

/**

 * pci_process_bridge_OF_ranges - Parse PCI bridge resources from device tree

 * @hose: newly allocated pci_controller to be setup

 * @dev: device node of the host bridge

 * @primary: set if primary bus (32 bits only, soon to be deprecated)

 *

 * This function will parse the "ranges" property of a PCI host bridge device

 * node and setup the resource mapping of a pci controller based on its

 * content.

 *

 * Life would be boring if it wasn't for a few issues that we have to deal

 * with here:

 *

 *   - We can only cope with one IO space range and up to 3 Memory space

 *     ranges. However, some machines (thanks Apple !) tend to split their

 *     space into lots of small contiguous ranges. So we have to coalesce.

 *

 *   - We can only cope with all memory ranges having the same offset

 *     between CPU addresses and PCI addresses. Unfortunately, some bridges

 *     are setup for a large 1:1 mapping along with a small "window" which

 *     maps PCI address 0 to some arbitrary high address of the CPU space in

 *     order to give access to the ISA memory hole.

 *     The way out of here that I've chosen for now is to always set the

 *     offset based on the first resource found, then override it if we

 *     have a different offset and the previous was set by an ISA hole.

 *

 *   - Some busses have IO space not starting at 0, which causes trouble with

 *     the way we do our IO resource renumbering. The code somewhat deals with

 *     it for 64 bits but I would expect problems on 32 bits.

 *

 *   - Some 32 bits platforms such as 4xx can have physical space larger than

 *     32 bits so we need to use 64 bits values for the parsing

 Check for ranges property */

 Read next ranges element */

		/* If we failed translation or got a zero-sized region

		 * (some FW try to feed us with non sensical zero sized regions

		 * such as power3 which look like some kind of attempt

		 * at exposing the VGA memory hole)

 Act based on address space type */

 We support only one IO range */

 On 32 bits, limit I/O space to 16MB */

 32 bits needs to map IOs here */

 Expect trouble if pci_addr is not 0 */

			/* pci_io_size and io_base_phys always represent IO

			 * space starting at 0 so we factor in pci_addr

 Build resource */

 We support only 3 memory ranges */

 Handles ISA memory hole space here */

			/* We get the PCI/Mem offset from the first range or

			 * the, current one if the offset came from an ISA

			 * hole. If they don't match, bugger.

 Build resource */

	/* If there's an ISA hole and the pci_mem_offset is -not- matching

	 * the ISA hole offset, then we need to remove the ISA hole from

	 * the resource list for that brige

 Display the domain number in /proc */

/* This header fixup will do the resource fixup for all devices as they are

 * probed, but not for bridge ranges

/*

 * Reparent resource children of pr that conflict with res

 * under res, and make res replace those children.

 not completely contained */

 didn't find any conflicting entries? */

/*

 *  Handle resources of PCI devices.  If the world were perfect, we could

 *  just allocate all the resource regions and do nothing more.  It isn't.

 *  On the other hand, we cannot just re-allocate all devices, as it would

 *  require us to know lots of host bridge internals.  So we attempt to

 *  keep as much of the original configuration as possible, but tweak it

 *  when it's found to be wrong.

 *

 *  Known BIOS problems we have to work around:

 *	- I/O or memory regions not configured

 *	- regions configured, but not enabled in the command register

 *	- bogus I/O addresses above 64K used

 *	- expansion ROMs left enabled (this may sound harmless, but given

 *	  the fact the PCI specs explicitly allow address decoders to be

 *	  shared between expansion ROMs and other resource regions, it's

 *	  at least dangerous)

 *

 *  Our solution:

 *	(1) Allocate resources for all buses behind PCI-to-PCI bridges.

 *	    This gives us fixed barriers on where we can allocate.

 *	(2) Allocate resources for all enabled devices.  If there is

 *	    a collision, just mark the resource as unallocated. Also

 *	    disable expansion ROMs during this step.

 *	(3) Try to allocate resources for disabled devices.  If the

 *	    resources were assigned correctly, everything goes well,

 *	    if they weren't, they won't disturb allocation of other

 *	    resources.

 *	(4) Assign new addresses to resources which were either

 *	    not configured at all or misconfigured.  If explicitly

 *	    requested by the user, configure expansion ROM address

 *	    as well.

			/* Don't bother with non-root busses when

			 * re-assigning all resources. We clear the

			 * resource flags as if they were colliding

			 * and as such ensure proper re-allocation

			 * later.

				/* this happens when the generic PCI

				 * code (wrongly) decides that this

				 * bridge is transparent  -- paulus

			/*

			 * Must be a conflict with an existing entry.

			 * Move that entry (or entries) under the

			 * bridge resource and try again.

 We'll assign a new address later */

 Already allocated */

 Not assigned at all */

			/* We only allocate ROMs on pass 1 just in case they

			 * have been screwed up by firmware

			/* Turn the ROM off, leave the resource region,

			 * but keep it unregistered.

 Check for IO */

 Check for memory */

	/* Allocate and assign resources. If we re-assign everything, then

	 * we skip the allocate phase

	/* Before we start assigning unassigned resource, we try to reserve

	 * the low IO area and the VGA memory area if they intersect the

	 * bus available resources to avoid allocating things on top of them

 Now proceed to assigning things that were left unassigned */

 Hookup PHB IO resource */

 Fixup IO space offset */

 Workaround for lack of IO resource only on 32-bit */

 Hookup PHB Memory resources */

 Workaround for lack of MEM resource only on 32-bit */

 Scan all of the recorded PCI controllers.  */

 Call common code to handle resource allocation */

/* Provide information on locations of various I/O regions in physical

 * memory.  Do this on a per-card basis so that we choose the right

 * root bridge.

 * Note that the returned IO or memory base is a physical address

/*

 * Null PCI config access functions, for the case when we can't

 * find a hose.

/*

 * These functions are used early on before PCI scanning is done

 * and all of the pci_dev and pci_bus structures have been created.

 SPDX-License-Identifier: GPL-2.0

/*

 * ppc64 "iomap" interface implementation.

 *

 * (C) Copyright 2004 Linus Torvalds

/*

 * PCI support for Xilinx plbv46_pci soft-core which can be used on

 * Xilinx Virtex ML410 / ML510 boards.

 *

 * Copyright 2009 Roderick Colenbrander

 * Copyright 2009 Secret Lab Technologies Ltd.

 *

 * The pci bridge fixup code was copied from ppc4xx_pci.c and was written

 * by Benjamin Herrenschmidt.

 * Copyright 2007 Ben. Herrenschmidt <benh@kernel.crashing.org>, IBM Corp.

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2. This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

/**

 * xilinx_pci_fixup_bridge - Block Xilinx PHB configuration.

	/* Hide the PCI host BARs from the kernel as their content doesn't

	 * fit well in the resource management

/**

 * xilinx_pci_exclude_device - Don't do config access for non-root bus

 *

 * This is a hack.  Config access to any bus other than bus 0 does not

 * currently work on the ML510 so we prevent it here.

/**

 * xilinx_early_pci_scan - List pci config space for available devices

 *

 * List pci devices in very early phase.

 Currently we have only 2 device connected - up-to 32 devices */

 List only first function number - up-to 8 functions */

 read the first 64 standardized bytes */

 Up-to 192 bytes can be list of capabilities */

/**

 * xilinx_pci_init - Find and register a Xilinx PCI host bridge

 Setup config space */

	/* According to the xilinx plbv46_pci documentation the soft-core starts

	 * a self-init when the bus master enable bit is set. Without this bit

	 * set the pci bus can't be scanned.

 Set the max latency timer to 255 */

 Set the max bus number to 255, and bus/subbus no's to 0 */

 Register the host bridge with the linux kernel! */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Support for indirect PCI bridges.

 *

 * Copyright (C) 1998 Gabriel Paubert.

 Only 3 bits for function */

	/*

	 * Note: the caller has already checked that offset is

	 * suitably aligned and that len is 1, 2 or 4.

 Only 3 bits for function */

 suppress setting of PCI_PRIMARY_BUS */

 Workaround for PCI_28 Errata in 440EPx/GRx */

	/*

	 * Note: the caller has already checked that offset is

	 * suitably aligned and that len is 1, 2 or 4.

 SPDX-License-Identifier: GPL-2.0

/*

 * arch/sparc64/math-emu/math.c

 *

 * Copyright (C) 1997,1999 Jakub Jelinek (jj@ultra.linux.cz)

 * Copyright (C) 1999 David S. Miller (davem@redhat.com)

 *

 * Emulation routines originate from soft-fp package, which is part

 * of glibc and has appropriate copyrights in it.

 QUAD - ftt == 3 */

 SUBNORMAL - ftt == 2 */

 Only Ultra-III generates this. */

 Only Ultra-III generates this. */

 Optimized inline in sparc64/kernel/entry.S */

 Only Ultra-III generates this. */

 Only Ultra-III generates this. */

 FPOP2 */

/* All routines returning an exception to raise should detect

 * such exceptions _before_ rounding to be consistent with

 * the behavior of the hardware in the implemented cases

 * (and thus with the recommendations in the V9 architecture

 * manual).

 *

 * We return 0 if a SIGFPE should be sent, 1 otherwise.

 Determine if this exception would have generated a trap. */

 If trapping, we only want to signal one bit. */

	/* Set CEXC, here is the rule:

	 *

	 *    In general all FPU ops will set one and only one

	 *    bit in the CEXC field, this is always the case

	 *    when the IEEE exception trap is enabled in TEM.

	/* Set the AEXC field, rule is:

	 *

	 *    If a trap would not be generated, the

	 *    CEXC just generated is OR'd into the

	 *    existing value of AEXC.

 If trapping, indicate fault trap type IEEE. */

	/* If we will not trap, advance the program counter over

	 * the instruction being handled.

	/* ftt tells which ftt it may happen in, r is rd, b is rs2 and a is rs1. The *u arg tells

	   whether the argument should be packed/unpacked (0 - do not unpack/pack, 1 - unpack/pack)

 FPOP1 */ {

 QUAD - ftt == 3 */

			/* We can get either unimplemented or unfinished

			 * for these cases.  Pre-Niagara systems generate

			 * unfinished fpop for SUBNORMAL cases, and Niagara

			 * always gives unimplemented fpop for fsqrt{s,d}.

 SUBNORMAL - ftt == 2 */

 Only Ultra-III generates these */

 Optimized inline in sparc64/kernel/entry.S */

 FPOP2 */ {

 Now the conditional fmovq support */

 fmovq %fccX, %fY, %fZ */

 case 0: IR = 0; break; */			
 Not Equal */

 Less or Greater */

 Unordered or Less */

 Less */

 Unordered or Greater */

 Greater */

 Unordered */

 fmovq %[ix]cc, %fY, %fZ */

 case 0: IR = 0; break; */			
 Equal */

 Less or Equal */

 Less */

 Less or Equal Unsigned */

 Carry Set */

 Negative */

 Overflow Set */

 Register Zero */

 Register Less Than or Equal to Zero */

 Register Less Than Zero */

 The fmov test was false. Do a nop instead */

 Change the instruction into plain fmovq */

		/* Starting with UltraSPARC-T2, the cpu does not set the FP Trap

		 * Type field in the %fsr to unimplemented_FPop.  Nor does it

		 * use the fp_exception_other trap.  Instead it signals an

		 * illegal instruction and leaves the FP trap type field of

		 * the %fsr unchanged.

 invalid_fp_register */;

 invalid_fp_register */;

 invalid_fp_register */;

 + */

 - */

 * */

 / */

 sqrt */

 mov */

 float to int */

 int to float */

 Only Ultra-III generates these */

 Optimized inline in sparc64/kernel/entry.S */

 float to float */

 comparison */

 fcc0, 1, 2, 3 */

 Success and no exceptions detected. */

 SPDX-License-Identifier: GPL-2.0

/*

 * arch/sparc/math-emu/math.c

 *

 * Copyright (C) 1998 Peter Maydell (pmaydell@chiark.greenend.org.uk)

 * Copyright (C) 1997, 1999 Jakub Jelinek (jj@ultra.linux.cz)

 * Copyright (C) 1999 David S. Miller (davem@redhat.com)

 *

 * This is a good place to start if you're trying to understand the

 * emulation code, because it's pretty simple. What we do is

 * essentially analyse the instruction to work out what the operation

 * is and which registers are involved. We then execute the appropriate

 * FXXXX function. [The floating point queue introduces a minor wrinkle;

 * see below...]

 * The fxxxxx.c files each emulate a single insn. They look relatively

 * simple because the complexity is hidden away in an unholy tangle

 * of preprocessor macros.

 *

 * The first layer of macros is single.h, double.h, quad.h. Generally

 * these files define macros for working with floating point numbers

 * of the three IEEE formats. FP_ADD_D(R,A,B) is for adding doubles,

 * for instance. These macros are usually defined as calls to more

 * generic macros (in this case _FP_ADD(D,2,R,X,Y) where the number

 * of machine words required to store the given IEEE format is passed

 * as a parameter. [double.h and co check the number of bits in a word

 * and define FP_ADD_D & co appropriately].

 * The generic macros are defined in op-common.h. This is where all

 * the grotty stuff like handling NaNs is coded. To handle the possible

 * word sizes macros in op-common.h use macros like _FP_FRAC_SLL_##wc()

 * where wc is the 'number of machine words' parameter (here 2).

 * These are defined in the third layer of macros: op-1.h, op-2.h

 * and op-4.h. These handle operations on floating point numbers composed

 * of 1,2 and 4 machine words respectively. [For example, on sparc64

 * doubles are one machine word so macros in double.h eventually use

 * constructs in op-1.h, but on sparc32 they use op-2.h definitions.]

 * soft-fp.h is on the same level as op-common.h, and defines some

 * macros which are independent of both word size and FP format.

 * Finally, sfp-machine.h is the machine dependent part of the

 * code: it defines the word size and what type a word is. It also

 * defines how _FP_MUL_MEAT_t() maps to _FP_MUL_MEAT_n_* : op-n.h

 * provide several possible flavours of multiply algorithm, most

 * of which require that you supply some form of asm or C primitive to

 * do the actual multiply. (such asm primitives should be defined

 * in sfp-machine.h too). udivmodti4.c is the same sort of thing.

 *

 * There may be some errors here because I'm working from a

 * SPARC architecture manual V9, and what I really want is V8...

 * Also, the insns which can generate exceptions seem to be a

 * greater subset of the FPops than for V9 (for example, FCMPED

 * has to be emulated on V8). So I think I'm going to have

 * to emulate them all just to be on the safe side...

 *

 * Emulation routines originate from soft-fp package, which is

 * part of glibc and has appropriate copyrights in it (allegedly).

 *

 * NB: on sparc int == long == 4 bytes, long long == 8 bytes.

 * Most bits of the kernel seem to go for long rather than int,

 * so we follow that practice...

/* TODO:

 * fpsave() saves the FP queue but fpload() doesn't reload it.

 * Therefore when we context switch or change FPU ownership

 * we have to check to see if the queue had anything in it and

 * emulate it if it did. This is going to be a pain.

/* The Vn labels indicate what version of the SPARC architecture gas thinks

 * each insn is. This is from the binutils source :->

 quadword instructions */

 v8 */

 v8 */

 v8 */

 v8 */

 v8 */

 v8 */

 v8 */

 v8 */

 v8 */

 v8 */

 v8 */

 v8 */

 v8 */

 v8 */

 single/double instructions (subnormal): should all work */

 v7 */

 v7 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

 v6 */

/* Unlike the Sparc64 version (which has a struct fpustate), we

 * pass the taskstruct corresponding to the task which currently owns the

 * FPU. This is partly because we don't have the fpustate struct and

 * partly because the task owning the FPU isn't always current (as is

 * the case for the Sparc64 port). This is probably SMP-related...

 * This function returns 1 if all queued insns were emulated successfully.

 * The test for unimplemented FPop in kernel mode has been moved into

 * kernel/traps.c for simplicity.

	/* regs->pc isn't necessarily the PC at which the offending insn is sitting.

	 * The FPU maintains a queue of FPops which cause traps.

	 * When it hits an instruction that requires that the trapped op succeeded

	 * (usually because it reads a reg. that the trapped op wrote) then it

	 * causes this exception. We need to emulate all the insns on the queue

	 * and then allow the op to proceed.

	 * This code should also handle the case where the trap was precise,

	 * in which case the queue length is zero and regs->pc points at the

	 * single FPop to be emulated. (this case is untested, though :->)

	 * You'll need this case if you want to be able to emulate all FPops

	 * because the FPU either doesn't exist or has been software-disabled.

	 * [The UltraSPARC makes FP a precise trap; this isn't as stupid as it

	 * might sound because the Ultra does funky things with a superscalar

	 * architecture.]

 You wouldn't believe how often I typed 'ftp' when I meant 'fpt' :-> */

 assume all succeed */

 no queue, guilty insn is at regs->pc */

 in this case we need to fix up PC & nPC */

 Normal case: need to empty the queue... */

 insn failed, no point doing any more */

 Now empty the queue and clear the queue_not_empty flag */

/* All routines returning an exception to raise should detect

 * such exceptions _before_ rounding to be consistent with

 * the behavior of the hardware in the implemented cases

 * (and thus with the recommendations in the V9 architecture

 * manual).

 *

 * We return 0 if a SIGFPE should be sent, 1 otherwise.

 Determine if this exception would have generated a trap. */

 If trapping, we only want to signal one bit. */

	/* Set CEXC, here is the rule:

	 *

	 *    In general all FPU ops will set one and only one

	 *    bit in the CEXC field, this is always the case

	 *    when the IEEE exception trap is enabled in TEM.

	/* Set the AEXC field, rule is:

	 *

	 *    If a trap would not be generated, the

	 *    CEXC just generated is OR'd into the

	 *    existing value of AEXC.

 If trapping, indicate fault trap type IEEE. */

 Emulate the given insn, updating fsr and fregs appropriately. */

	/* r is rd, b is rs2 and a is rs1. The *u arg tells

	   whether the argument should be packed/unpacked (0 - do not unpack/pack, 1 - unpack/pack)

 FPOP1 */ {

 FPOP2 */ {

 oops, didn't recognise that FPop */

 Decode the registers to be used */

 clear the traptype bits */

 is rs1 single, double or quad? */

 quadwords must have bits 4&5 of the */

 encoded reg. number set to zero. */

 simulate invalid_fp_register exception */

 doublewords must have bit 5 zeroed */

 same again for rs2 */

 quadwords must have bits 4&5 of the */

 encoded reg. number set to zero. */

 simulate invalid_fp_register exception */

 doublewords must have bit 5 zeroed */

 and finally rd. This one's a bit different */

 dest is fcc. (this must be FCMPQ or FCMPEQ) */

 V8 has only one set of condition codes, so */

 anything but 0 in the rd field is an error */

 (should probably flag as invalid opcode */

 but SIGFPE will do :-> ) */

 quadwords must have bits 4&5 of the */

 encoded reg. number set to zero. */

 simulate invalid_fp_register exception */

 doublewords must have bit 5 zeroed */

 do the Right Thing */

 + */

 - */

 * */

 / */

 sqrt */

 mov */

 float to int */

 int to float */

 float to float */

 comparison */

 fcc is always fcc0 */

 success! */

 SPDX-License-Identifier: GPL-2.0

/* arch/sparc64/mm/tsb.c

 *

 * Copyright (C) 2006, 2008 David S. Miller <davem@davemloft.net>

/* TSB flushes need only occur on the processor initiating the address

 * space modification, not on each cpu the address space has run on.

 * Only the TLB flush needs that treatment.

	/* Use the smallest page size that can map the whole TSB

	 * in one TLB entry.

 Physical mapping, no locked TLB entry for TSB.  */

 Setup the Hypervisor TSB descriptor.  */

/* When the RSS of an address space exceeds tsb_rss_limit for a TSB,

 * do_sparc64_fault() invokes this routine to try and grow it.

 *

 * When we reach the maximum TSB size supported, we stick ~0UL into

 * tsb_rss_limit for that TSB so the grow checks in do_sparc64_fault()

 * will not trigger any longer.

 *

 * The TSB can be anywhere from 8K to 1MB in size, in increasing powers

 * of two.  The TSB must be aligned to it's size, so f.e. a 512K TSB

 * must be 512K aligned.  It also must be physically contiguous, so we

 * cannot use vmalloc().

 *

 * The idea here is to grow the TSB when the RSS of the process approaches

 * the number of entries that the current TSB can hold at once.  Currently,

 * we trigger when the RSS hits 3/4 of the TSB capacity.

		/* Not being able to fork due to a high-order TSB

		 * allocation failure is very bad behavior.  Just back

		 * down to a 0-order allocation and force no TSB

		 * growing for this address space.

		/* If we failed on a TSB grow, we are under serious

		 * memory pressure so don't try to grow any more.

 Mark all tags as invalid.  */

	/* Ok, we are about to commit the changes.  If we are

	 * growing an existing TSB the locking is very tricky,

	 * so WATCH OUT!

	 *

	 * We have to hold mm->context.lock while committing to the

	 * new TSB, this synchronizes us with processors in

	 * flush_tsb_user() and switch_mm() for this address space.

	 *

	 * But even with that lock held, processors run asynchronously

	 * accessing the old TSB via TLB miss handling.  This is OK

	 * because those actions are just propagating state from the

	 * Linux page tables into the TSB, page table mappings are not

	 * being changed.  If a real fault occurs, the processor will

	 * synchronize with us when it hits flush_tsb_user(), this is

	 * also true for the case where vmscan is modifying the page

	 * tables.  The only thing we need to be careful with is to

	 * skip any locked TSB entries during copy_tsb().

	 *

	 * When we finish committing to the new TSB, we have to drop

	 * the lock and ask all other cpus running this address space

	 * to run tsb_context_switch() to see the new TSB table.

	/* Handle multiple threads trying to grow the TSB at the same time.

	 * One will get in here first, and bump the size and the RSS limit.

	 * The others will get in here next and hit this check.

	/* If old_tsb is NULL, we're being invoked for the first time

	 * from init_new_context().

 Reload it on the local cpu.  */

 Now force other processors to do the same.  */

 Now it is safe to free the old tsb.  */

	/* We reset them to zero because the fork() page copying

	 * will re-increment the counters as the parent PTEs are

	 * copied into the child address space.

	/* copy_mm() copies over the parent's mm_struct before calling

	 * us, so we need to zero out the TSB pointer or else tsb_grow()

	 * will be confused and think there is an older TSB to free up.

	/* If this is fork, inherit the parent's TSB size.  We would

	 * grow it to that size on the first page fault anyways.

 If ADI tag storage was allocated for this task, free it */

 SPDX-License-Identifier: GPL-2.0

/*

 * io-unit.c:  IO-UNIT specific routines for memory management.

 *

 * Copyright (C) 1997,1998 Jakub Jelinek    (jj@sunsite.mff.cuni.cz)

 #define IOUNIT_DEBUG */

 One has to hold iounit->lock to call this */

 A tiny bit of magic ingredience :) */

 XXX So what is maxphys for us and how do drivers know it? */

 FIXME: Cache some resolved pages - often several sg entries are to the same page */

 XXX So what is maxphys for us and how do drivers know it? */

 XXX Somebody please fill this in */

 SPDX-License-Identifier: GPL-2.0

/*

 * arch/sparc64/mm/fault.c: Page fault handlers for the 64-bit Sparc.

 *

 * Copyright (C) 1996, 2008 David S. Miller (davem@davemloft.net)

 * Copyright (C) 1997, 1999 Jakub Jelinek (jj@ultra.linux.cz)

/*

 * We now make sure that mmap_lock is held in all paths that call

 * this. Additionally, to prevent kswapd from ripping ptes from

 * under us, raise interrupts around the time that we look at the

 * pte, kswapd will have to wait to get his smp ipi response from

 * us. vmtruncate likewise. This saves us having to get pte lock.

 This disables preemption for us as well. */

 Use phys bypass so we don't pollute dtlb/dcache. */

 Use phys bypass so we don't pollute dtlb/dcache. */

		/* If we were able to probe the faulting instruction, use it

		 * to compute a precise fault address.  Otherwise use the fault

		 * time provided address which may only have page granularity.

	/* If user insn could be read (thus insn is zero), that

	 * is fine.  We will just gun down the process with a signal

	 * in that case.

				/* This was a non-faulting load. Just clear the

				 * destination register(s) and continue with the next

				 * instruction. -jj

 Is this in ex_table? */

		/* The si_code was set to make clear whether

		 * this was a SEGV_MAPERR or SEGV_ACCERR fault.

 Sanity check the PC. */

 Valid, no problems... */

	/*

	 * If we're in an interrupt or have no user

	 * context, we must not take the fault..

	/* Pure DTLB misses do not tell us whether the fault causing

	 * load/store/atomic was a write or not, it only says that there

	 * was no match.  So in such a case we (carefully) read the

	 * instruction to try and figure this out.  It's an optimization

	 * so it's ok if we can't do this.

	 *

	 * Special hack, window spill/fill knows the exact fault type.

		/* All loads, stores and atomics have bits 30 and 31 both set

		 * in the instruction.  Bit 21 is set in all stores, but we

		 * have to avoid prefetches which also have bit 21 set.

			/* Don't bother updating thread struct value,

			 * because update_mmu_cache only cares which tlb

			 * the access came from.

 Non-faulting loads shouldn't expand stack. */

	/*

	 * Ok, we have a good vm_area for this memory access, so

	 * we can handle it..

	/* If we took a ITLB miss on a non-executable page, catch

	 * that here.

		/* Spitfire has an icache which does not snoop

		 * processor stores.  Later processors do...

 Allow reads even for write-only mappings */

			/* No need to mmap_read_unlock(mm) as we would

			 * have already released it in __lock_page_or_retry

			 * in mm/filemap.c.

	/*

	 * Something tried to access memory that isn't in our memory map..

	 * Fix it, but check if it's kernel or user first..

/*

 * We ran out of memory, or some other thing happened to us that made

 * us unable to handle the page fault gracefully.

	/*

	 * Send a sigbus, regardless of whether we were in kernel

	 * or user mode.

 Kernel mode? Handle exceptions or die */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/sparc/mm/init.c

 *

 *  Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 *  Copyright (C) 1995 Eddie C. Dost (ecd@skynet.be)

 *  Copyright (C) 1998 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 *  Copyright (C) 2000 Anton Blanchard (anton@samba.org)

 Initial ramdisk setup */

	/* Now have to check initial ramdisk, so that it won't pass

	 * the end of memory

 Reserve the initrd image area. */

	/* Start with page aligned address of last symbol in kernel

	 * image.

 Now shift down to get the real physical page frame number. */

 Reserve the kernel text/data/bss. */

 Only allow low memory to be allocated via memblock allocation */

/*

 * paging_init() sets up the page tables: We call the MMU specific

 * init routine based upon the Sun model type on the Sparc.

 *

 Saves us work later. */

 SPDX-License-Identifier: GPL-2.0

/* arch/sparc64/mm/tlb.c

 *

 * Copyright (C) 2004 David S. Miller <davem@redhat.com>

 Heavily inspired by the ppc64 code.  */

 A real file page? */

		/*

		 * Note that this routine only sets pmds for THP pages.

		 * Hugetlb pages are handled elsewhere.  We need to check

		 * for huge zero page.  Huge zero pages are like hugetlb

		 * pages in that there is no RSS, but there is the need

		 * for TSB entries.  So, huge zero page counts go into

		 * hugetlb_pte_count.

		/* Do not try to allocate the TSB hash table if we

		 * don't have one already.  We have various locks held

		 * and thus we'll end up doing a GFP_KERNEL allocation

		 * in an atomic context.

		 *

		 * Instead, we let the first TLB miss on a hugepage

		 * take care of this.

/*

 * This routine is only called when splitting a THP

	/*

	 * set_pmd_at() will not be called in a way to decrement

	 * thp_pte_count when splitting a THP, so do it now.

	 * Sanity check pmd before doing the actual decrement.

 FIFO */

 FIFO */

 CONFIG_TRANSPARENT_HUGEPAGE */

 SPDX-License-Identifier: GPL-2.0

/*

 * srmmu.c:  SRMMU specific routines for memory management.

 *

 * Copyright (C) 1995 David S. Miller  (davem@caip.rutgers.edu)

 * Copyright (C) 1995,2002 Pete Zaitcev (zaitcev@yahoo.com)

 * Copyright (C) 1996 Eddie C. Dost    (ecd@skynet.be)

 * Copyright (C) 1997,1998 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 * Copyright (C) 1999,2000 Anton Blanchard (anton@samba.org)

 Now the cpu specific definitions. */

 these will be initialized in srmmu_nocache_calcsize() */

 1 bit <=> 256 bytes of nocache <=> 64 PTEs */

 The context table is a nocache user with the biggest alignment needs. */

 XXX should we hyper_flush_whole_icache here - Anton */

/*

 * Locations of MSI Registers.

 MBus Arbiter Enable register */

/*

 * Useful bits in the MSI Registers.

 Operate the MSI asynchronously */

/*

 * size: bytes to allocate in the nocache area.

 * align: bytes, number to align at.

 * Returns the virtual address of the allocated area.

 Return how much physical memory we have.  */

/*

 * Reserve nocache dynamically proportionally to the amount of

 * system RAM. -- Tomas Szepe <szepe@pinerecords.com>, June 2002

 P3 XXX The 4x overuse: corroborated by /proc/meminfo. */

 if (srmmu_nocache_npages < 256) srmmu_nocache_npages = 256;

 anything above 1280 blows up */

/*

 * Hardware needs alignment to 256 only, but we align to whole page size

 * to reduce fragmentation problems due to the buddy principle.

 * XXX Provide actual fragmentation statistics in /proc.

 *

 * Alignments up to the page size are the same for physical and virtual

 * addresses of the nocache area.

 context handling - a dynamically sized pool is used */

 At boot time we determine the number of contexts */

 Low level IO area allocation on the SRMMU. */

	/* I need to test whether this is consistent over all

	 * sun4m's.  The bus_type represents the upper 4 bits of

	 * 36-bit physical address on the I/O space lines...

 No need to flush uncacheable page. */

 tsunami.S */

 swift.S */

 P3: deadwood to debug precise flushes on Swift. */

 Is context # ever different from current context? P3 */

 Rm. prot. bits from virt. c. */

 swift_flush_cache_all(); */

 swift_flush_cache_page(vma, page); */

 same as above: srmmu_flush_tlb_page() */

/*

 * The following are all MBUS based SRMMU modules, and therefore could

 * be found in a multiprocessor configuration.  On the whole, these

 * chips seems to be much more touchy about DVMA and page tables

 * with respect to cache coherency.

 viking.S */

 hypersparc.S */

/*

 * NOTE: All of this startup code assumes the low 16mb (approx.) of

 *       kernel mappings are done with one single contiguous chunk of

 *       ram.  On small ram machines (classics mainly) we only get

 *       around 8mb mapped for us.

 These flush types are not available on all chips... */

/*

 * This is much cleaner than poking around physical address space

 * looking at the prom's page table directly which is what most

 * other OS's do.  Yuck... this is much better.

 0 = normal-pte, 1 = pmd-level pte, 2 = pgd-level pte */

 probably wrap around */

 continue probing until we find an entry */

 A red snapper, see what it really is. */

 Create a third-level SRMMU 16MB page mapping. */

 Map sp_bank entry SP_ENTRY, starting at virtual address VBASE. */

 Map "low" memory only */

 16MB of IOSPACE on all sun4m's. */

 We know it is Viking */

 Find the number of contexts on the srmmu. */

 ctx table has to be physically aligned to its size */

 Stop from hanging here... */

 Init various srmmu chip types. */

FIXME: cpus not contiguous!!

 XXX I think this is bad news... -DaveM */

 Clear any crap from the cache or else... */

 Enable I & D caches */

	/*

	 * The Swift branch folding logic is completely broken.  At

	 * trap time, if things are just right, if can mistakenly

	 * think that a trap is coming from kernel mode when in fact

	 * it is coming from user mode (it mis-executes the branch in

	 * the trap code).  So you see things like crashme completely

	 * hosing your machine which is completely unacceptable.  Turn

	 * this shit off... nice job Fujitsu.

		/*

		 * Gee george, I wonder why Sun is so hush hush about

		 * this hardware bug... really braindamage stuff going

		 * on here.  However I think we can find a way to avoid

		 * all of the workaround overhead under Linux.  Basically,

		 * any page fault can cause kernel pages to become user

		 * accessible (the mmu gets confused and clears some of

		 * the ACC bits in kernel ptes).  Aha, sounds pretty

		 * horrible eh?  But wait, after extensive testing it appears

		 * that if you use pgd_t level large kernel pte's (like the

		 * 4MB pages on the Pentium) the bug does not get tripped

		 * at all.  This avoids almost all of the major overhead.

		 * Welcome to a world where your vendor tells you to,

		 * "apply this kernel patch" instead of "sorry for the

		 * broken hardware, send it back and we'll give you

		 * properly functioning parts"

		/*

		 * You see Sun allude to this hardware bug but never

		 * admit things directly, they'll say things like,

		 * "the Swift chip cache problems" or similar.

	/*

	 * Are you now convinced that the Swift is one of the

	 * biggest VLSI abortions of all time?  Bravo Fujitsu!

	 * Fujitsu, the !#?!%$'d up processor people.  I bet if

	 * you examined the microcode of the Swift you'd find

	 * XXX's all over the place.

 TurboSparc is copy-back, if we turn it on, but this does not work. */

 Clear any crap from the cache or else... */

 Temporarily disable I & D caches */

 Don't check parity */

 Do DVMA snooping in Dcache */

			/* Write-back D-cache, emulate VLSI

 For now let's play safe, optimize later */

 Do DVMA snooping in Dcache, Write-thru D-cache */

 Emulate VLSI abortion number three, not number one */

 No SE cache */

 Test mode */

 I & D caches on */

 Icache snooping on */

	/*

	 * Tsunami's pretty sane, Sun and TI actually got it

	 * somewhat right this time.  Fujitsu should have

	 * taken some lessons from them.

		/*

		 * We don't need memory parity checks.

		 * XXX This is a mess, have to dig out later. ecd.

		viking_mxcc_turn_off_parity(&mreg, &mxcc_control);

 We do cache ptables on MXCC. */

 Must disable mixed-cmd mode here for other cpu's. */

 Just in case PROM does something funny. */

/* On sun4d the cpu broadcasts local TLB flushes, so we can just

 * perform the local TLB flush and all the other cpus will see it.

 * But, unfortunately, there is a bug in the sun4d XBUS backplane

 * that requires that we add some synchronization to these flushes.

 *

 * The bug is that the fifo which keeps track of all the pending TLB

 * broadcasts in the system is an entry or two too small, so if we

 * have too many going at once we'll overflow that fifo and lose a TLB

 * flush resulting in corruption.

 *

 * Our workaround is to take a global spinlock around the TLB flushes,

 * which guarentees we won't ever have too many pending.  It's a big

 * hammer, but a semaphore like system to make sure we only have N TLB

 * flushes going at once will require SMP locking anyways so there's

 * no real value in trying any harder than this.

 Ahhh, the viking.  SRMMU VLSI abortion number two... */

		/*

		 * We need this to make sure old viking takes no hits

		 * on it's cache for dma snoops to workaround the

		 * "load from non-cacheable memory" interrupt bug.

		 * This is only necessary because of the new way in

		 * which we use the IOMMU.

 Probe for the srmmu chip version. */

 First, check for sparc-leon. */

 Second, check for HyperSparc or Cypress. */

 UP or MP Hypersparc */

	/* Now Fujitsu TurboSparc. It might happen that it is

	 * in Swift emulation mode, so we will check later...

 Next check for Fujitsu Swift. */

 Look if it is not a TurboSparc emulating Swift... */

 Now the Viking family of srmmu. */

 Finally the Tsunami. */

 Oh well */

 Local cross-calls. */

	/* Current theory is that those who call this are the one's

	 * who have just dirtied their cache with the pages contents

	 * in kernel space, therefore we only run this on local cpu.

	 *

	 * XXX This experiment failed, research further... -DaveM

 Load up routines and constants for sun4m and sun4d mmu */

 Functions */

 El switcheroo... */

 Avoid unnecessary cross calls. */

 It really is const after this point. */

 SPDX-License-Identifier: GPL-2.0

/*

 * iommu.c:  IOMMU specific routines for memory management.

 *

 * Copyright (C) 1995 David S. Miller  (davem@caip.rutgers.edu)

 * Copyright (C) 1995,2002 Pete Zaitcev     (zaitcev@yahoo.com)

 * Copyright (C) 1996 Eddie C. Dost    (ecd@skynet.be)

 * Copyright (C) 1997,1998 Jakub Jelinek    (jj@sunsite.mff.cuni.cz)

/*

 * This can be sized dynamically, but we will do this

 * only when we have a guidance about actual I/O pressures.

 64K PTEs, 256KB */

 4096 * (1<<6) */

 viking.S */

/*

 * Values precomputed according to CPU type.

 Consistent mapping iopte flags */

 Consistent mapping pte flags */

 Allocate IOMMU page table */

	/* Stupid alignment constraints give me a headache. 

	   We need 256K or 512K or 1M or 2M area aligned to

           its size and current gfp will fortunately give

 Initialize new table. */

	/* To be coherent on HyperSparc, the page color of DVMA

	 * and physical addresses must match.

 Flush the iotlb entries to ram. */

 This could be better if we didn't have to flush whole pages. */

 XXX So what is maxphys for us and how do drivers know it? */

	/*

	 * We expect unmapped highmem pages to be not in the cache.

	 * XXX Is this a good assumption?

	 * XXX What if someone else unmaps it here and races us?

 page color = pfn of page */

 XXX So what is maxphys for us and how do drivers know it? */

 page color = physical address */

	/* P3: why do we need this?

	 *

	 * DAVEM: Because there are several aspects, none of which

	 *        are handled by a single interface.  Some cpus are

	 *        completely not I/O DMA coherent, and some have

	 *        virtually indexed caches.  The driver DMA flushing

	 *        methods handle the former case, but here during

	 *        IOMMU page table modifications, and usage of non-cacheable

	 *        cpu mappings of pages potentially in the cpu caches, we have

	 *        to handle the latter case as well.

 SPDX-License-Identifier: GPL-2.0

/*

 * fault.c:  Page fault handlers for the Sparc.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 * Copyright (C) 1996 Eddie C. Dost (ecd@skynet.be)

 * Copyright (C) 1997 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

	/*

	 * We fault-in kernel-space virtual memory on-demand. The

	 * 'reference' page table is init_mm.pgd.

	 *

	 * NOTE! We MUST NOT take any locks for this case. We may

	 * be in an interrupt or a critical region, and should

	 * only copy the information from the master page table,

	 * nothing more.

	/*

	 * If we're in an interrupt or have no user

	 * context, we must not take the fault..

	/*

	 * Ok, we have a good vm_area for this memory access, so

	 * we can handle it..

 Allow reads even for write-only mappings */

	/*

	 * If for any reason at all we couldn't handle the fault,

	 * make sure we exit gracefully rather than endlessly redo

	 * the fault.

			/* No need to mmap_read_unlock(mm) as we would

			 * have already released it in __lock_page_or_retry

			 * in mm/filemap.c.

	/*

	 * Something tried to access memory that isn't in our memory map..

	 * Fix it, but check if it's kernel or user first..

 User mode accesses just cause a SIGSEGV */

 Is this in ex_table? */

/*

 * We ran out of memory, or some other thing happened to us that made

 * us unable to handle the page fault gracefully.

		/*

		 * Synchronize this task's top level page-table

		 * with the 'reference' page table.

 This always deals with user addresses. */

 SPDX-License-Identifier: GPL-2.0

/*

 *  arch/sparc64/mm/init.c

 *

 *  Copyright (C) 1996-1999 David S. Miller (davem@caip.rutgers.edu)

 *  Copyright (C) 1997-1999 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

/* A bitmap, two bits for every 256MB of physical memory.  These two

 * bits determine what page size we use for kernel linear

 * translations.  They form an index into kern_linear_pte_xor[].  The

 * value in the indexed slot is XOR'd with the TLB miss virtual

 * address to form the resulting TTE.  The mapping is:

 *

 *	0	==>	4MB

 *	1	==>	256MB

 *	2	==>	2GB

 *	3	==>	16GB

 *

 * All sun4v chips support 256MB pages.  Only SPARC-T4 and later

 * support 2GB pages, and hopefully future cpus will support the 16GB

 * pages as well.  For slots 2 and 3, we encode a 256MB TTE xor there

 * if these larger page sizes are not supported by the cpu.

 *

 * It would be nice to determine this from the machine description

 * 'cpu' properties, but we need to have this table setup before the

 * MDESC is initialized.

/* A special kernel TSB for 4MB, 256MB, 2GB and 16GB linear mappings.

 * Space is allocated for this right after the trap table in

 * arch/sparc64/kernel/head.S

	/* Sanitize what we got from the firmware, by page aligning

	 * everything.

			/* If it is empty, simply get rid of it.

			 * This simplifies the logic of the other

			 * functions that process these arrays.

 Kernel physical address base and size in bytes.  */

 Initial ramdisk setup */

 no outputs */

 no outputs */

			/* This is just to optimize away some function calls

			 * in the SMP case.

 mm->context.lock must be held */

 CONFIG_HUGETLB_PAGE */

 Don't insert a non-valid PTE into the TSB, we'll deadlock.  */

			/* Transfer bits [32:22] from address to resolve

			 * at 4M granularity.

			/* We are fabricating 8MB pages using 4MB

			 * real hw pages.

	/* Do not bother with the expensive D-cache flush if it

	 * is merely the zero page.  The 'bigcore' testcase in GDB

	 * causes this case to run millions of times.

		/* We could delay the flush for the !page_mapping

		 * case too.  But that case is for exec env/arg

		 * pages and those are %99 certainly going to get

		 * faulted into the tlb (and thus flushed) anyways.

 Cheetah and Hypervisor platform cpus have coherent I-cache. */

		/* This code only runs on Spitfire cpus so this is

		 * why we can assume _PAGE_PADDR_4U.

 CONFIG_SMP */

 CONFIG_DEBUG_DCFLUSH */

/* The obp translations are saved based on 8k pagesize, since obp can

 * use a mixture of pagesizes. Misses to the LOW_OBP_ADDRESS ->

 * HI_OBP_ADDRESS range are handled in ktlb.S.

 Read OBP translations property into 'prom_trans[]'.  */

 Now kick out all the non-OBP entries.  */

 Clear diag TTE bits. */

 Force execute bit on.  */

 Now lock us into the TLBs via Hypervisor or OBP. */

 Now fixup OBP's idea about where we really are mapped. */

 no outputs */

 get_new_mmu_context() uses "cache + 1".  */

 Reserve kernel context */

	/*

	 * Make sure that any new mm that are added into per_cpu_secondary_mm,

	 * are going to go through get_new_mmu_context() path.

	/*

	 * Updated versions to current on those CPUs that had valid secondary

	 * contexts

		/*

		 * If a new mm is stored after we took this mm from the array,

		 * it will go into get_new_mmu_context() path, because we

		 * already bumped the version in tlb_context_cache.

/* Caller does TLB context flushing on local CPU if necessary.

 * The caller also ensures that CTX_VALID(mm->context) is false.

 *

 * We must be careful about boundary cases so that we never

 * let the user have CTX 0 (nucleus) or we ever use a CTX

 * version of zero (and thus NO_CONTEXT would not be caught

 * by version mis-match tests in mmu_context.h).

 *

 * Always invoked with interrupts disabled.

 wrap might have happened, test again if our context became valid */

		/* Older versions of the bootloader only supported a

		 * 32-bit physical address for the ramdisk image

		 * location, stored at sparc_ramdisk_image.  Newer

		 * SILO versions set sparc_ramdisk_image to zero and

		 * provide a full 64-bit physical address at

		 * sparc_ramdisk_image64.

		/* Another bootloader quirk.  The bootloader normalizes

		 * the physical address to KERNBASE, so we have to

		 * factor that back out and add in the lowest valid

		 * physical page address to get the true physical address.

 RA-to-PA */

		/* We could not find NUMA group, so default to 0, but lets

		 * search for latency group, so we could calculate the correct

		 * end address that we return

	/*

	 * Each latency group has match and mask, and each memory block has an

	 * offset.  An address belongs to a latency group if its address matches

	 * the following formula: ((addr + offset) & mask) == match

	 * It is, however, slow to check every single page if it matches a

	 * particular latency group. As optimization we calculate end value by

	 * using bit arithmetics.

/* This must be invoked after performing all of the necessary

 * memblock_set_node() calls for 'nid'.  We need to be able to get

 * correct data from get_pfn_range_for_nid().

	/* This is the right thing to do on currently supported

	 * SUN4U NUMA platforms as well, as the PCI controller does

	 * not sit behind any particular memory controller.

		/* The address-congruence-offset property is optional.

		 * Explicity zero it be identifty this.

 Normalize numa latency matrix according to ACPI SLIT spec. */

	/* NUMA node id is encoded in bits 36 and higher, and there is

	 * a 1-to-1 mapping from CPU ID to NUMA node ID.

 Some sane defaults for numa latency values */

 Dump memblock with node info. */

 XXX cpu notifier XXX */

 Each PUD is 8GB */

 Each PMD is 8MB */

 nop */

	/* we should perform an IPI and flush all tlbs,

	 * but that can deadlock->flush only current cpu.

		/* Cheetah/Panther support a full 64-bit virtual

		 * address, so we can use all that our page tables

		 * support.

 T1 and T2 support 48-bit virtual addresses.  */

 T3 supports 48-bit virtual addresses.  */

 T4 and later support 52-bit virtual addresses.  */

 M7 and later support 52-bit virtual addresses.  */

			/* M8 and later support 54-bit virtual addresses.

			 * However, restricting M8 and above VA bits to 53

			 * as 4-level page table cannot support more than

			 * 53 VA bits.

 no outputs */

 no outputs */

 Don't mark as init, we give this to the Hypervisor.  */

/* The swapper TSBs are loaded with a base sequence of:

 *

 *	sethi	%uhi(SYMBOL), REG1

 *	sethi	%hi(SYMBOL), REG2

 *	or	REG1, %ulo(SYMBOL), REG1

 *	or	REG2, %lo(SYMBOL), REG2

 *	sllx	REG1, 32, REG1

 *	or	REG1, REG2, REG1

 *

 * When we use physical addressing for the TSB accesses, we patch the

 * first four instructions in the above sequence.

 First KTSB for PAGE_SIZE mappings.  */

 Second KTSB for 4MB/256MB/2GB/16GB mappings.  */

	/* This is where we would add Panther support for

	 * 32MB and 256MB pages.

	/* Bit 9 of TTE is no longer CV bit on M7 processor and it instead

	 * enables MCD error. Do not set bit 9 on M7 processor.

 paging_init() sets up the page tables */

/* We need to exclude reserved regions. This exclusion will include

 * vmlinux and initrd. To be more precise the initrd size could be used to

 * compute a new lower limit because it is freed later during initialization.

	/* These build time checkes make sure that the dcache_dirty_cpu()

	 * page->flags usage will work.

	 *

	 * When a page gets marked as dcache-dirty, we store the

	 * cpu number starting at bit 32 in the page->flags.  Also,

	 * functions like clear_dcache_dirty_cpu use the cpu mask

	 * in 13-bit signed-immediate instruction fields.

	/*

	 * Page flags must not reach into upper 32 bits that are used

	 * for the cpu number

	/*

	 * The bit fields placed in the high range must not reach below

	 * the 32 bit boundary. Otherwise we cannot place the cpu field

	 * at the 32 bit boundary.

 Invalidate both kernel TSBs.  */

	/* TTE.cv bit on sparc v9 occupies the same position as TTE.mcde

	 * bit on M7 processor. This is a conflicting usage of the same

	 * bit. Enabling TTE.cv on M7 would turn on Memory Corruption

	 * Detection error on all pages and this will lead to problems

	 * later. Kernel does not run with MCD enabled and hence rest

	 * of the required steps to fully configure memory corruption

	 * detection are not taken. We need to ensure TTE.mcde is not

	 * set on M7 processor. Compute the value of cacheability

	 * flag for use later taking this into consideration.

	/* Find available physical memory...

	 *

	 * Read it twice in order to work around a bug in openfirmware.

	 * The call to grab this table itself can cause openfirmware to

	 * allocate memory, which in turn can take away some space from

	 * the list of available memory.  Reading it twice makes sure

	 * we really do get the final value.

	/* Set kernel pgd to upper alias so physical page computations

	 * work.

 Ok, we can use our TLB miss and window trap handlers safely.  */

	/* Flush the TLBs and the 4M TSB so that the updated linear

	 * pte XOR settings are realized for all mappings.

 Setup bootmem... */

	/*

	 * Must be done after boot memory is put on freelist, because here we

	 * might set fields in deferred struct pages that have not yet been

	 * initialized, and memblock_free_all() initializes all the reserved

	 * deferred pages for us.

	/*

	 * Set up the zero page, mark it reserved, so that page count

	 * is not manipulated when freeing the page from user ptes.

	/* If the physical memory maps were trimmed by kernel command

	 * line options, don't even try freeing this initmem stuff up.

	 * The kernel image could have been in the trimmed out region

	 * and if so the freeing below will free invalid page structs.

	/*

	 * The init section is aligned to 8k in vmlinux.lds. Page align for >8k pagesizes.

 CONFIG_SPARSEMEM_VMEMMAP */

 If not locked, zap it. */

 Spitfire Errata #32 workaround */

			/* NOTE: Always runs on spitfire, so no

			 *       cheetah+ page size encodings.

 No outputs */

 no outputs */

 Spitfire Errata #32 workaround */

			/* NOTE: Always runs on spitfire, so no

			 *       cheetah+ page size encodings.

 No outputs */

 no outputs */

 Don't insert a non-valid PMD into the TSB, we'll deadlock.  */

 We are fabricating 8MB pages using 4MB real hw pages.  */

 CONFIG_TRANSPARENT_HUGEPAGE */

	/* On UltraSPARC-III+ and later, configure the second half of

	 * the Data-TLB for huge pages.

			/* When changing the page size fields, we

			 * must perform a context flush so that no

			 * stale entries match.  This flush must

			 * occur with the original context register

			 * settings.

			/* Reload the context register of all processors

			 * also executing in this address space.

	/* If this page has ADI enabled, copy over any ADI tags

	 * as well

	/* If this platform is ADI enabled, copy any ADI tags

	 * as well

 SPDX-License-Identifier: GPL-2.0

/*

 * SPARC64 Huge TLB page support.

 *

 * Copyright (C) 2002, 2003, 2006 David S. Miller (davem@davemloft.net)

/* Slightly simplified from the non-hugepage variant because by

 * definition we don't have to worry about any page coloring stuff

 This should only ever run for 32-bit processes.  */

	/*

	 * A failed mmap() very likely causes application failure,

	 * so fall back to the bottom-up function here. This scenario

	 * can happen with large stack limits and large mmap()

	 * allocations.

	/* If this vma has ADI enabled on it, turn on TTE.mcd

 An HPAGE_SIZE'ed page is composed of two REAL_HPAGE_SIZE'ed pages */

 An HPAGE_SIZE'ed page is composed of two REAL_HPAGE_SIZE'ed pages */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/sparc/mm/leon_m.c

 *

 * Copyright (C) 2004 Konrad Eisele (eiselekd@web.de, konrad@gaisler.com) Gaisler Research

 * Copyright (C) 2009 Daniel Hellstrom (daniel@gaisler.com) Aeroflex Gaisler AB

 * Copyright (C) 2009 Konrad Eisele (konrad@gaisler.com) Aeroflex Gaisler AB

 *

 * do srmmu probe in software

 *

iflush*/

iflush*/

 get all cache regs */

 Get Cache regs from "Cache ASI" address 0x0, 0x8 and 0xC */

 output */

 input */

 clobber list */

/* Due to virtual cache we need to check cache configuration if

 * it is possible to skip flushing in some cases.

 *

 * Leon2 and Leon3 differ in their way of telling cache information

 *

 leon 3 */

 (ssize=>realsize) 0=>1k, 1=>2k, 2=>4k, 3=>8k ... */

		/* Set Size <= Page size  ==>

 SPDX-License-Identifier: GPL-2.0

/* auxio.c: Probing for the Sparc AUXIO register at boot time.

 *

 * Copyright (C) 1996 David S. Miller (davem@caip.rutgers.edu)

 *

 * Refactoring for unified NCR/PCIO support 2002 Eric Brower (ebrower@usa.net)

/* Must be after subsys_initcall() so that busses are probed.  Must

 * be before device_initcall() because things like the floppy driver

 * need to use the AUXIO register.

 SPDX-License-Identifier: GPL-2.0

/*

 * This file handles the architecture independent parts of process handling..

 Reuse the parent's stack for the child. */

	/* If we get an error and potentially restart the system

	 * call, we're screwed because copy_thread() clobbered

	 * the parent's %o1.  So detect that case and restore it

	 * here.

 Reuse the parent's stack for the child. */

	/* If we get an error and potentially restart the system

	 * call, we're screwed because copy_thread() clobbered

	 * the parent's %o1.  So detect that case and restore it

	 * here.

	/* Did userspace give setup a separate stack for the child or are we

	 * reusing the parent's?

	/* If we get an error and potentially restart the system

	 * call, we're screwed because copy_thread() clobbered

	 * the parent's %o1.  So detect that case and restore it

	 * here.

 SPDX-License-Identifier: GPL-2.0

/*

 * SS1000/SC2000 interrupt handling.

 *

 *  Copyright (C) 1997,1998 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 *  Heavily based on arch/sparc/kernel/irq.c.

/* Sun4d interrupts fall roughly into two categories.  SBUS and

 * cpu local.  CPU local interrupts cover the timer interrupts

 * and whatnot, and we encode those as normal PILs between

 * 0 and 15.

 * SBUS interrupts are encodes as a combination of board, level and slot.

 target cpu */

 interrupt level */

/* Specify which cpu handle interrupts from which board.

 * Index is board - value is cpu.

 Exported for sun4d_smp.c */

/* SBUS interrupts are encoded integers including the board number

 * (plus one), the SBUS level, and the SBUS slot number.  Sun4D

 * IRQ dispatch is done by:

 *

 * 1) Reading the BW local interrupt table in order to get the bus

 *    interrupt mask.

 *

 *    This table is indexed by SBUS interrupt level which can be

 *    derived from the PIL we got interrupted on.

 *

 * 2) For each bus showing interrupt pending from #1, read the

 *    SBI interrupt state register.  This will indicate which slots

 *    have interrupts pending for that SBUS interrupt level.

 *

 * 3) Call the genreric IRQ support.

 Loop for each pending SBI */

		/* XXX This seems to ACK the irq twice.  acquire_sbi()

		 * XXX uses swap, therefore this writes 0xf << sbil,

		 * XXX then later release_sbi() will write the individual

		 * XXX bits which were set again.

 Loop for each pending SBI slot */

 SBUS IRQ level (1 - 7) */

 FIXME: Is this necessary?? */

	/*

	 * Check IPI data structures after IRQ has been cleared. Hard and Soft

	 * IRQ can happen at the same time, so both cases are always handled.

 cpu interrupt */

 SBUS interrupt */

 Setup IRQ distribution scheme. */

	/*

	 * If Bus nodes parent is not io-unit/cpu-unit or the io-unit/cpu-unit

	 * lacks a "board#" property, something is very wrong.

 Adjust so that we jump directly to smp4d_ticker */

	/* For SMP we use the level 14 ticker, however the bootup code

	 * has copied the firmware's level 14 vector into the boot cpu's

	 * trap table, we must fix this now or we get squashed.

 NOP out the branch */

	/* Which cpu-unit we use is arbitrary, we can view the bootbus timer

	 * registers via any cpu's mapping.  The first 'reg' property is the

	 * bootbus.

 2 seconds */

 1/HZ sec  */

 Get rid of pending irqs from PROM */

 Cannot enable interrupts until OBP ticker is disabled. */

 SPDX-License-Identifier: GPL-2.0

/*

 * arch/sparc/kernel/traps.c

 *

 * Copyright 1995, 2008 David S. Miller (davem@davemloft.net)

 * Copyright 2000 Jakub Jelinek (jakub@redhat.com)

/*

 * I hate traps on the sparc, grrr...

 #define TRAP_DEBUG */

 Amuse the user. */

		/* Stop the back trace when we hit userland or we

		 * find some badly aligned kernel stack. Set an upper

		 * bound in case our stack is trashed and we loop.

 Sun OS's puke from bad traps, Linux survives! */

 XXX User may want to be allowed to do this. XXX */

 die_if_kernel("Kernel MNA access", regs); */

 FIXME: Should dig out mna address */ (void *)0,

 Sanity check... */

 Allow FPU ops. */

 Other processes fpu state, save away */

 Set initial sane state. */

	/* If nobody owns the fpu right now, just clear the

	 * error into our fake static buffer and hope it don't

	 * happen again.  Thank you crashme...

 switch on the contents of the ftt [floating point trap type] field */

 unfinished_FPop (underflow & co) */

 unimplemented_FPop (quad stuff, maybe sqrt) */

 DEBUG_FPU */

 If we successfully emulated the FPop, we pretend the trap never happened :-> */

 nope, better SIGFPE the offending process... */

		/* The first fsr store/load we tried trapped,

		 * the second one will not (we hope).

 bust_spinlocks(1);   XXX Not in our original BUG()

/* Since we have our mappings set up, on multiprocessors we can spin them

 * up here so that timer interrupts work during initialization.

 Force linker to barf if mismatched */

 Attach to the address space of init_task. */

	/* NOTE: Other cpus have this done as they are started

	 *       up on SMP.

 SPDX-License-Identifier: GPL-2.0

/*

 * sbus.c: UltraSparc SBUS controller support.

 *

 * Copyright (C) 1999 David S. Miller (davem@redhat.com)

 Offsets from iommu_regs */

 IOMMU control register */

 TSB base address register */

 IOMMU flush register */

 SBUS virtual address diagnostic */

 TLB tag compare diagnostics */

 IOMMU LRU queue diagnostics */

 TLB tag diagnostics */

 TLB data RAM diagnostics */

 Offsets from strbuf_regs */

 Control */

 Page flush/invalidate */

 Flush synchronization */

 data RAM diagnostic */

 error status diagnostics */

 Page tag diagnostics */

 Line tag diagnostics */

 Enable 64-bit DVMA mode for the given device. */

 Extended transfer mode already enabled. */

/* INO number to IMAP register offset for SYSIO external IRQ's.

 * This should conform to both Sunfire/Wildfire server and Fusion

 * desktop designs.

 SBUS Slot 0 --> 3, level 1 --> 7 */

 Onboard devices (not relevant/used on SunFire). */

/* Convert Interrupt Mapping register pointer to associated

 * Interrupt Clear register pointer, SYSIO specific version.

	/* SYSIO inconsistency.  For external SLOTS, we have to select

	 * the right ICLR register based upon the lower SBUS irq level

	 * bits.

 Error interrupt handling. */

 Primary PIO cause         */

 Primary DVMA read cause   */

 Primary DVMA write cause  */

 Secondary PIO is cause    */

 Secondary DVMA read cause */

 Secondary DVMA write cause*/

 Reserved                  */

 Doubleword Offset         */

 Bad transfer size 2^SIZE  */

 UPA MID causing the fault */

 Reserved                  */

 Latch error status. */

 Clear primary/secondary error status bits. */

 Log the error. */

 Primary PIO cause         */

 Primary DVMA read cause   */

 Primary DVMA write cause  */

 Secondary PIO cause       */

 Secondary DVMA read cause */

 Secondary DVMA write cause*/

 Reserved                  */

 Syndrome Bits             */

 Double Offset             */

 Bad transfer size 2^SIZE  */

 UPA MID causing the fault */

 Reserved                  */

 Latch error status. */

 Clear primary/secondary error status bits. */

	/* XXX Use syndrome and afar to print out module string just like

	 * XXX UDB CE trap handler does... -DaveM

 Primary Late PIO Error    */

 Primary SBUS Timeout      */

 Primary SBUS Error ACK    */

 Secondary Late PIO Error  */

 Secondary SBUS Timeout    */

 Secondary SBUS Error ACK  */

 Reserved                  */

 Primary was late PIO read */

 Reserved                  */

 Size of transfer          */

 MID causing the error     */

 Reserved                  */

 Clear primary/secondary error status bits. */

 Log the error. */

 XXX check iommu/strbuf for further error status XXX */

 Enable ECC Checking   */

 Enable UE Interrupts  */

 Enable CE Interrupts  */

 Now turn the error interrupts on and also enable ECC checking. */

 SBUS Error Interrupt Enable */

 Boot time initialization. */

	/* The SYSIO SBUS control register is used for dummy reads

	 * in order to ensure write completion.

 Setup for TSB_SIZE=7, TBW_SIZE=0, MMU_DE=1, MMU_EN=1 */

	/* Clean out any cruft in the IOMMU using

	 * diagnostic accesses.

 Give the TSB to SYSIO. */

 Setup streaming buffer, DE=1 SB_EN=1 */

 Clear out the tags using diagnostics. */

 Enable DVMA arbitration for all devices/slots. */

 Now some Xfire specific grot... */

 SPDX-License-Identifier: GPL-2.0

/* kgdb.c: KGDB support for 32-bit sparc.

 *

 * Copyright (C) 2008 David S. Miller <davem@davemloft.net>

	/* If the PSR register is changing, we have to preserve

	 * the CWP field, otherwise window save/restore explodes.

 try to read optional parameter, pc unchanged if no parm */

 Breakpoint instruction: ta 0x7d */

 SPDX-License-Identifier: GPL-2.0

/* sys_sparc32.c: Conversion between 32bit and 64bit native syscalls.

 *

 * Copyright (C) 1997,1998 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 * Copyright (C) 1997, 2007 David S. Miller (davem@davemloft.net)

 *

 * These routines maintain argument size conversion between 32bit and 64bit

 * environment.

 XXX: Don't preclude handling different sized sigset_t's.  */

 SPDX-License-Identifier: GPL-2.0

/* smp.c: Sparc64 SMP support.

 *

 * Copyright (C) 1997, 2007, 2008 David S. Miller (davem@davemloft.net)

	/* Clear this or we will die instantly when we

	 * schedule back to this idler...

 Attach to the address space of init_task. */

 inform the notifiers about the new cpu */

/* This tick register synchronization scheme is taken entirely from

 * the ia64 port, see arch/ia64/kernel/smpboot.c for details and credit.

 *

 * The only change I've made is to rework it so that the master

 * initiates the synchonization instead of the slave. -DaveM

 magic value */

 likewise */

 average best_t0 and best_t1 without overflow: */

 roundtrip time */

 master's timestamp */

 difference between midpoint and master's timestamp */

 estimate of itc adjustment latency */

 let's lock on to this... */

 wait for client to be ready */

 now let the client proceed into his loop */

/* The OBP cpu startup callback truncates the 3rd arg cookie to

 * 32-bits (I think) so to be safe we have it read the pointer

 * contained here so we work on >4GB machines. -DaveM

 map to real upaid */

	/* Ok, this is the real Spitfire Errata #54.

	 * One must read back from a UDB internal register

	 * after writes to the UDB interrupt dispatch, but

	 * before the membar Sync for that write.

	 * So we use the high UDB control register (ASI 0x7f,

	 * ADDR 0x20) for the dummy read. -DaveM

 NOTE: PSTATE_IE is still clear. */

/* Cheetah now allows to send the whole 64-bytes of data in the interrupt

 * packet, but we have no use for that.  However we do take advantage of

 * the new pipelining feature (ie. dispatch to multiple cpus simultaneously).

	/* Unfortunately, someone at Sun had the brilliant idea to make the

	 * busy/nack fields hard-coded by ITID number for this Ultra-III

	 * derivative processor.

 Setup the dispatch data registers. */

 no outputs */

 no outputs */

 Now, poll for completion. */

			/* Busy bits will not clear, continue instead

			 * of freezing up on this cpu.

			/* Delay some random time with interrupts enabled

			 * to prevent deadlock.

			/* Clear out the mask bits for cpus which did not

			 * NACK us.

/* Multi-cpu list version.

 *

 * Deliver xcalls to 'cnt' number of cpus in 'cpu_list'.

 * Sometimes not all cpus receive the mondo, requiring us to re-send

 * the mondo until all cpus have received, or cpus are truly stuck

 * unable to receive mondo, and we timeout.

 * Occasionally a target cpu strand is borrowed briefly by hypervisor to

 * perform guest service, such as PCIe error handling. Consider the

 * service time, 1 second overall wait is reasonable for 1 cpu.

 * Here two in-between mondo check wait time are defined: 2 usec for

 * single cpu quick turn around and up to 100usec for large cpu count.

 * Deliver mondo to large number of cpus could take longer, we adjusts

 * the retry count as long as target cpus are making forward progress.

 HV_EOK means all cpus received the xcall, we're done.  */

 If not these non-fatal errors, panic */

		/* First, see if we made any forward progress.

		 *

		 * Go through the cpu_list, count the target cpus that have

		 * received our mondo (n_sent), and those that did not (rem).

		 * Re-pack cpu_list with the cpus remain to be retried in the

		 * front - this simplifies tracking the truly stalled cpus.

		 *

		 * The hypervisor indicates successful sends by setting

		 * cpu list entries to the value 0xffff.

		 *

		 * EWOULDBLOCK means some target cpus did not receive the

		 * mondo and retry usually helps.

		 *

		 * ECPUERROR means at least one target cpu is in error state,

		 * it's usually safe to skip the faulty cpu and retry.

		 *

		 * ENOCPU means one of the target cpu doesn't belong to the

		 * domain, perhaps offlined which is unexpected, but not

		 * fatal and it's okay to skip the offlined cpu.

 No cpu remained, we're done. */

 Otherwise, update the cpu count for retry. */

		/* Record the overall number of mondos received by the

		 * first of the remaining cpus.

 Was any mondo delivered successfully? */

 or, was any target cpu busy processing other mondos? */

		/* Retry count is for no progress. If we're making progress,

		 * reset the retry count.

		/* Delay a little bit to let other cpus catch up on

		 * their cpu mondo queue work.

 fatal errors include bad alignment, etc */

 some cpus being non-responsive to the cpu mondo */

	/* We have to do this whole thing with interrupts fully disabled.

	 * Otherwise if we send an xcall from interrupt context it will

	 * corrupt both our mondo block and cpu list state.

	 *

	 * One consequence of this is that we cannot use timeout mechanisms

	 * that depend upon interrupts being delivered locally.  So, for

	 * example, we cannot sample jiffies and expect it to advance.

	 *

	 * Fortunately, udelay() uses %stick/%tick so we can use that.

 Setup the initial cpu list.  */

/* Send cross call to all processors mentioned in MASK_P

 * except self.  Really, there are only two cases currently,

 * "cpu_online_mask" and "mm_cpumask(mm)".

 Send cross call to all processors except self. */

	/* It is not valid to test "current->active_mm == mm" here.

	 *

	 * The value of "current" is not changed atomically with

	 * switch_mm().  But that's OK, we just need to check the

	 * current cpu's trap block PGD physical address.

/* We know that the window frames of the user have been flushed

 * to the stack before we get here because all callers of us

 * are flush_tlb_*() routines, and these run after flush_cache_*()

 * which performs the flushw.

 *

 * mm->cpu_vm_mask is a bit mask of which cpus an address

 * space has (potentially) executed on, this is the heuristic

 * we use to limit cross calls.

/* This currently is only used by the hugetlb arch pre-fault

 * hook on UltraSPARC-III+ and later when changing the pagesize

 * bits of the context register for an address space.

 CPU capture. */

 #define CAPTURE_DEBUG */

/* Imprisoned penguins run with %pil == PIL_NORMAL_MAX, but PSTATE_IE

 * set, so they can service tlb flush xcalls...

 /proc/profile writes can call this, don't __init it please. */

			/* On SUN4V, writes to %tick and %stick are

			 * not allowed.

 Make sure no interrupts point to this cpu.  */

 Use cpu poke to resume idle cpu if supported. */

	/* Use IPI in following cases:

	 * - cpu poke not supported

	 * - cpu not idle

	 * - send_cpu_poke() returns with error

 CPU POKE is registered. */

/**

 * pcpu_alloc_bootmem - NUMA friendly alloc_bootmem wrapper for percpu

 * @cpu: cpu to allocate for

 * @size: size allocation in bytes

 * @align: alignment

 *

 * Allocate @size bytes aligned at @align for cpu @cpu.  This wrapper

 * does the right thing for NUMA regardless of the current

 * configuration.

 *

 * RETURNS:

 * Pointer to the allocated area on success, NULL on failure.

 Setup %g5 for the boot cpu.  */

 SPDX-License-Identifier: GPL-2.0

/* pci_msi.c: Sparc64 MSI support common layer.

 *

 * Copyright (C) 2007 David S. Miller (davem@davemloft.net)

 XXX affinity XXX */

 SPDX-License-Identifier: GPL-2.0

/* auxio.c: Probing for the Sparc AUXIO register at boot time.

 *

 * Copyright (C) 1996 David S. Miller (davem@caip.rutgers.edu)

 memset(), Linux has no bzero() */

 Probe and map in the Auxiliary I/O register */

/* auxio_register is not static because it is referenced 

 * in entry.S::floppy_tdone

 There may be auxio on Ebus */

 VME chassis sun4m machine, no auxio exists. */

 Map the register both read and write */

 Fix the address on sun4m. */

 VME chassis sun4m, no auxio. */

 sun4m power control register (AUXIO2) */

 Attempt to find the sun4m power control node. */

 Map the power control register. */

 Display a quick message on the console. */

 SPDX-License-Identifier: GPL-2.0-only

 SPDX-License-Identifier: GPL-2.0

/*

 * PCI bus specific translator

		/* Do not do PCI specific frobbing if the

		 * PCI bridge lacks a ranges property.  We

		 * want to pass it through up to the next

		 * parent as-is, not with the PCI translate

		 * method which chops off the top address cell.

	/* Treat PCI busses lacking ranges property just like

	 * simba.

 Check address type match */

	/* Special exception, we can map a 64-bit address into

	 * a 32-bit range.

 Start with the parent range base.  */

 Add in the child address offset, skipping high cell.  */

 For PCI, we override whatever child busses may have used.  */

 32 bits */

 64 bits */

/*

 * FHC/Central bus specific translator.

 *

 * This is just needed to hard-code the address and size cell

 * counts.  'fhc' and 'central' nodes lack the #address-cells and

 * #size-cells properties, and if you walk to the root on such

 * Enterprise boxes all you'll get is a #size-cells of 2 which is

 * not what we want to use.

/*

 * Array of bus specific translators

 PCI */

 SIMBA */

 SBUS */

 FHC */

 Default */

 Now walk through the ranges */

	/* When we miss an I/O space match on PCI, just pass it up

	 * to the next PCI bridge and/or controller.

 If we have a ranges property in the parent, use it.  */

	/* If the parent is the dma node of an ISA bus, pass

	 * the translation up to the root.

	 *

	 * Some SBUS devices use intermediate nodes to express

	 * hierarchy within the device itself.  These aren't

	 * real bus nodes, and don't have a 'ranges' property.

	 * But, we should still pass the translation work up

	 * to the SBUS itself.

	/* Similarly for all PCI bridges, if we get this far

	 * it lacks a ranges property, and this will include

	 * cases like Simba.

 Convert to num-cells.  */

 Convert to num-entries.  */

 Prevent overrunning the op->resources[] array.  */

		/* Psycho and Sabre PCI controllers can have 'interrupt-map'

		 * properties that do not include the on-board device

		 * interrupts.  Instead, the device's 'interrupts' property

		 * is already a fully specified INO value.

		 *

		 * Handle this by deciding that, if we didn't get a

		 * match in the parent's 'interrupt-map', and the

		 * parent is an IRQ translator, then use the parent as

		 * our IRQ controller.

		/* Derived from Table 8-3, U2P User's Manual.  This branch

		 * is handling a PCI controller that lacks a proper set of

		 * interrupt-map and interrupt-map-mask properties.  The

		 * Ultra-E450 is one example.

		 *

		 * The bit layout is BSSLL, where:

		 * B: 0 on bus A, 1 on bus B

		 * D: 2-bit slot number, derived from PCI device number as

		 *    (dev - 1) for bus A, or (dev - 2) for bus B

		 * L: 2-bit line number

 PBM-A */

 PBM-B */

		/* Going through a PCI-PCI bridge that lacks a set of

		 * interrupt-map and interrupt-map-mask properties.

	/* Something more complicated.  Walk up to the root, applying

	 * interrupt-map or bus specific translations, until we hit

	 * an IRQ translator.

	 *

	 * If we hit a bus type or situation we cannot handle, we

	 * stop and assume that the original IRQ number was in a

	 * format which has special meaning to it's immediate parent.

 Prevent overrunning the op->irqs[] array.  */

 SPDX-License-Identifier: GPL-2.0

/*

 * idprom.c: Routines to load the idprom into kernel addresses and

 *           interpret the data contained within.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 Fun with Sun released architectures. */

/* Here is the master table of Sun machines which use some implementation

 * of the Sparc CPU and have a meaningful IDPROM machtype value that we

 * know about.  See asm-sparc/machines.h for empirical constants.

 First, Leon */

 Finally, early Sun4m's */

 One entry for the OBP arch's which are sun4d, sun4e, and newer sun4m's */

 Calculate the IDPROM checksum (xor of the data bytes). */

 Create a local IDPROM copy, verify integrity, and display information. */

 SPDX-License-Identifier: GPL-2.0

/* leon_pmc.c: LEON Power-down cpu_idle() handler

 *

 * Copyright (C) 2011 Daniel Hellstrom (daniel@gaisler.com) Aeroflex Gaisler AB

 List of Systems that need fixup instructions around power-down instruction */

/*

 * CPU idle callback function for systems that need some extra handling

 * See .../arch/sparc/kernel/process.c

	/* Prepare an address to a non-cachable region. APB is always

	 * none-cachable. One instruction is executed after the Sleep

	 * instruction, we make sure to read the bus and throw away the

	 * value by accessing a non-cachable area, also we make sure the

	 * MMU does not get a TLB miss here by using the MMU BYPASS ASI.

 Interrupts need to be enabled to not hang the CPU */

/*

 * CPU idle callback function

 * See .../arch/sparc/kernel/process.c

 Interrupts need to be enabled to not hang the CPU */

 For systems without power-down, this will be no-op */

 Install LEON Power Down function */

 Assign power management IDLE handler */

/* This driver is not critical to the boot process, don't care

 * if initialized late.

 SPDX-License-Identifier: GPL-2.0

/* vio.c: Virtual I/O channel devices probing infrastructure.

 *

 *    Copyright (c) 2003-2005 IBM Corp.

 *     Dave Engebretsen engebret@us.ibm.com

 *     Santiago Leon santil@us.ibm.com

 *     Hollis Blanchard <hollisb@us.ibm.com>

 *     Stephen Rothwell

 *

 * Adapted to sparc64 by David S. Miller davem@davemloft.net

 alloc irqs (unless the driver specified not to) */

		/*

		 * Ideally, we would remove/deallocate tx/rx virqs

		 * here - however, there are currently no support

		 * routines to do so at the moment. TBD

/**

 * vio_vdev_node() - Find VDEV node in MD

 * @hp:  Handle to the MD

 * @vdev:  Pointer to VDEV

 *

 * Find the node in the current MD which matches the given vio_dev. This

 * must be done dynamically since the node value can change if the MD

 * is updated.

 *

 * NOTE: the MD must be locked, using mdesc_grab(), when calling this routine

 *

 * Return: The VDEV node in MDESC

	/*

	 * node_name is NULL for the parent/channel-devices node and

	 * the parent doesn't require the MD node info.

/* We are only interested in domain service ports under the

 * "domain-services" node.  On control nodes there is another port

 * under "openboot" that we should not mess with as aparently that is

 * reserved exclusively for OBP use.

 SPDX-License-Identifier: GPL-2.0

/*

 * IOMMU mmap management and range allocation functions.

 * Based almost entirely upon the powerpc iommu allocator.

/*

 * Initialize iommu_pool entries for the iommu_map_table. `num_entries'

 * is the number of table entries. If `large_pool' is set to true,

 * the top 1/4 of the table will be set aside for pool allocations

 * of more than iommu_large_alloc pages.

 start for next pool */

 initialize large_pool */

 Sanity check */

 to keep compiler happy */

 pick out pool_nr */

	/* The case below can happen if we have a small segment appended

	 * to a large, or when the previous alloc was at the very end of

	 * the available space. If so, go back to the beginning. If a

	 * flush is needed, it will get done based on the return value

	 * from iommu_area_alloc() below.

		/* If we're constrained on address range, first try

		 * at the masked hint to avoid O(n) search complexity,

		 * but on second pass, start at 0 in pool 0.

	/*

	 * if the skip_span_boundary_check had been set during init, we set

	 * things up so that iommu_is_span_boundary() merely checks if the

	 * (index + npages) < num_tsb_entries

 First failure, rescan from the beginning.  */

 give up */

 Update handle for SG allocations */

 The large pool is the last pool at the top of the table */

/* Caller supplies the index of the entry into the iommu map table

 * itself when the mapping from dma_addr to the entry is not the

 * default addr->entry mapping below.

 use default addr->entry mapping */

 SPDX-License-Identifier: GPL-2.0

/* windows.c: Routines to deal with register window management

 *            at the C-code level.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 Do save's until all user register windows are out of the cpu. */

/* Place as many of the user's current register windows 

 * on the stack that we can.  Even if the %sp is unaligned

 * we still copy the window there, the only case that we don't

 * succeed is if the %sp points to a bum mapping altogether.

 * setup_frame() and do_sigreturn() use this before shifting

 * the user stack around.  Future instruction and hardware

 * bug workaround routines will need this functionality as

 * well.

 Ok, there is some dirty work to do. */

 Ok, let it rip. */

 An optimization. */

/* Try to push the windows in a threads window buffer to the

 * user stack.  Unaligned %sp's are not allowed here.

 SPDX-License-Identifier: GPL-2.0-only

/* Take the archdata values for IOMMU, STC, and HOSTDATA found in

 * BUS and propagate to all child platform_device objects.

/*

 * Default translator (generic bus)

/* Make sure the least significant 64-bits are in-range.  Even

 * for 3 or 4 cell values it is a good enough approximation.

 Start with the parent range base.  */

 Add in the child address offset.  */

/*

 * SBUS bus specific translator

		/* Have a look at use_1to1_mapping().  We're trying

		 * to match SBUS if that's the top-level bus and we

		 * don't have some intervening real bus that provides

		 * ranges based translations.

 SPDX-License-Identifier: GPL-2.0

/*  linux/arch/sparc/kernel/signal.c

 *

 *  Copyright (C) 1991, 1992  Linus Torvalds

 *  Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 *  Copyright (C) 1996 Miguel de Icaza (miguel@nuclecu.unam.mx)

 *  Copyright (C) 1997 Eddie C. Dost   (ecd@skynet.be)

 do_coredum */

 flush_sig_insns */

 Should be 0 */

 Should be 0 */

 Align macros */

/* Checks if the fp is valid.  We always build signal frames which are

 * 16-byte aligned, therefore we can always enforce that the restore

 * frame has that property as well.

 Always make any pending restarted system calls return -EINTR */

 1. Make sure we are not getting garbage from the user */

 2. Restore the state */

 User can only change condition codes and FPU enabling in %psr. */

 Prevent syscall restart.  */

	/* This is pretty much atomic, no amount locking would prevent

	 * the races which exist anyways.

 Prevent syscall restart.  */

	/*

	 * If we are on the alternate signal stack and would overflow it, don't.

	 * Return an always-bogus address instead so we will die with SIGSEGV.

 This is the X/Open sanctioned signal stack switching.  */

	/* Always align the stack frame.  This handles two cases.  First,

	 * sigaltstack need not be mindful of platform specific stack

	 * alignment.  Second, if we took this signal because the stack

	 * is not aligned properly, we'd like to take the signal cleanly

	 * and report that.

 1. Make sure everything is clean */

 2. Save the current process state */

 3. signal handler back-trampoline and parameters */

 4. signal handler */

 5. return to kernel instructions */

 mov __NR_sigreturn, %g1 */

 t 0x10 */

 Flush instruction space. */

 Setup sigaltstack */

 mov __NR_rt_sigreturn, %g1 */

 t 0x10 */

 Flush instruction space. */

/* Note that 'init' is a special process: it doesn't get signals it doesn't

 * want to handle. Thus you cannot kill init even with a SIGKILL even by

 * mistake.

	/* It's a lot of work and synchronization to add a new ptrace

	 * register for GDB to save and restore in order to get

	 * orig_i0 correct for syscall restarts when debugging.

	 *

	 * Although it should be the case that most of the global

	 * registers are volatile across a system call, glibc already

	 * depends upon that fact that we preserve them.  So we can't

	 * just use any global register to save away the orig_i0 value.

	 *

	 * In particular %g2, %g3, %g4, and %g5 are all assumed to be

	 * preserved across a system call trap by various pieces of

	 * code in glibc.

	 *

	 * %g7 is used as the "thread register".   %g6 is not used in

	 * any fixed manner.  %g6 is used as a scratch register and

	 * a compiler temporary, but it's value is never used across

	 * a system call.  Therefore %g6 is usable for orig_i0 storage.

	/* If the debugger messes with the program counter, it clears

	 * the software "in syscall" bit, directing us to not perform

	 * a syscall restart.

 replay the system call when we are done */

 First see if old state is wanted. */

 Now see if we want to update the new state. */

		/* If the current stack was set with sigaltstack, don't

		/* Since we don't know the extent of the stack, and we don't

		   track onstack-ness, but rather calculate it, we must

 SPDX-License-Identifier: GPL-2.0

/*

 * unaligned.c: Unaligned load/store trap handling with special

 *              cases for the kernel to do them more quickly.

 *

 * Copyright (C) 1996 David S. Miller (davem@caip.rutgers.edu)

 * Copyright (C) 1996 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 ld, ldd, ldh, ldsh */

 st, std, sth, stsh */

 Swap, ldstub, etc. */

 8 = double-word, 4 = word, 2 = half-word */

 just to keep gcc happy. */

 0x400000 = signed, 0 = unsigned */

 Wheee... */

 Ho hum, the slightly complicated case. */

 yes, I know what this does... */

 Ho hum, the slightly complicated case. */

 This is just to make gcc think panic does return... */

 una_asm.S */

 Not reached */

 Not reached... */

 SPDX-License-Identifier: GPL-2.0-only

 maximum chars written to proc file */

 reschedule */

 blink according to load */

 blink at user specified interval */

 work around \n when echo'ing into proc */

	/* before we change anything we want to stop any running timers,

	 * otherwise calls such as on will have no persistent effect

/*

 * arch/sparc/kernel/ksyms.c: Sparc specific ksyms support.

 *

 * Copyright (C) 1996 David S. Miller (davem@caip.rutgers.edu)

 * Copyright (C) 1996 Eddie C. Dost (ecd@skynet.be)

 This is needed only for drivers/sbus/char/openprom.c */

 SPDX-License-Identifier: GPL-2.0-only

/* pcr.c: Generic sparc64 performance counter infrastructure.

 *

 * Copyright (C) 2009 David S. Miller (davem@davemloft.net)

/* This code is shared between various users of the performance

 * counters.  Users will be oprofile, pseudo-NMI watchdog, and the

 * perf_event support layer.

/* Performance counter interrupts run unmasked at PIL level 15.

 * Therefore we can't do things like wakeups and other work

 * that expects IRQ disabling to be adhered to in locking etc.

 *

 * Therefore in such situations we defer the work by signalling

 * a lower level cpu IRQ.

	/* Blackbird errata workaround.  See commentary in

	 * arch/sparc64/kernel/smp.c:smp_percpu_timer_interrupt()

	 * for more information.

 no outputs */

		/* UltraSPARC-I/II and derivatives lack a profile

		 * counter overflow interrupt so we can't make use of

		 * their hardware currently.

 SPDX-License-Identifier: GPL-2.0

/* viohs.c: LDOM Virtual I/O handshake helper layer.

 *

 * Copyright (C) 2007 David S. Miller <davem@davemloft.net>

	/* XXX Put policy here...  Perhaps start a timer to fire

	 * XXX in 100 ms, which will bring the link up and retry

	 * XXX the handshake.

 XXX Perhaps invoke start_handshake? XXX */

 v1.6 and higher, ACK with desired, supported mode, or NACK */

/* The issue is that the Solaris virtual disk server just mirrors the

 * SID values it gets from the client peer.  So we work around that

 * here in vio_{validate,send}_sid() so that the drivers don't need

 * to be aware of this crap.

	/* Always let VERSION+INFO packets through unchecked, they

	 * define the new SID.

 Ok, now figure out which SID to use.  */

 SPDX-License-Identifier: GPL-2.0

/*

 * Procedures for drawing on the screen early on in the boot process.

 *

 * Benjamin Herrenschmidt <benh@kernel.crashing.org>

	/* FIXME: Add support for PCI reg properties. Right now, only

	 * reliable on macs

 Calc the base address of a given point (x,y) */

 ndef NO_SCROLL */

	/* wrap around from bottom to top of screen so we don't

 SPDX-License-Identifier: GPL-2.0

/* leon_smp.c: Sparc-Leon SMP support.

 *

 * based on sun4m_smp.c

 * Copyright (C) 1996 David S. Miller (davem@caip.rutgers.edu)

 * Copyright (C) 2009 Daniel Hellstrom (daniel@gaisler.com) Aeroflex Gaisler AB

 * Copyright (C) 2009 Konrad Eisele (konrad@gaisler.com) Aeroflex Gaisler AB

 IRQ number of LEON IPIs */

	/* Allow master to continue. The master will then give us the

	 * go-ahead by setting the smp_commenced_mask and will wait without

	 * timeouts until our setup is completed fully (signified by

	 * our bit being set in the cpu_online_mask).

 Fix idle thread fields. */

 paranoid */);

 Attach to the address space of init_task. */

/*

 *	Cycle through the processors asking the PROM to start each one.

 Setup IPI */

	/* See trampoline.S:leon_smp_cpu_startup for details...

	 * Initialize the contexts table

	 * Since the call to prom_startcpu() trashes the structure,

	 * we need to re-initialize it for each cpu

 whirrr, whirrr, whirrrrrrrrr... */

 Make sure all IRQs are of from the start for this new CPU */

 Wake one CPU */

 wheee... it's going... */

 setup cpu list for irq rotation */

 Free unneeded trap tables */

 Ok, they are spinning and ready to go. */

/* Initialize IPIs on the LEON, in order to save IRQ resources only one IRQ

 * is used for all three types of IPIs.

 Find IPI IRQ or stick with default value */

 Adjust so that we jump directly to smpleon_ipi */

 Mark work */

 Generate IRQ on the CPU */

 Mark work */

 Generate IRQ on the CPU */

 Mark work */

 Generate IRQ on the CPU (any IRQ will cause resched) */

 Set when ipi entered. */

 Set when ipi exited. */

 Cross calls must be serialized, at least currently. */

 If you make changes here, make sure gcc generates proper code... */

 Init receive/complete mapping, plus fire the IPI's off. */

 Running cross calls. */

 Patch ipi15 trap table */

 SPDX-License-Identifier: GPL-2.0

/* devices.c: Initial scan of the prom device tree for important

 *	      Sparc device nodes which we need to find.

 *

 * This is based on the sparc64 version, but sun4m doesn't always use

 * the hardware MIDs, so be careful.

 *

 * Copyright (C) 1996 David S. Miller (davem@caip.rutgers.edu)

/* sun4m uses truncated mids since we base the cpuid on the ttable/irqset

 * address (0-3).  This gives us the true hardware mid, which might have

 * some other bits set.  On 4d hardware and software mids are the same.

 Probably a sun4e, Sun is trying to trick us ;-) */

 !CONFIG_SMP */

 SPDX-License-Identifier: GPL-2.0

/* ptrace.c: Sparc process tracing support.

 *

 * Copyright (C) 1996, 2008 David S. Miller (davem@davemloft.net)

 *

 * Based upon code written by Ross Biro, Linus Torvalds, Bob Manson,

 * and David Mosberger.

 *

 * Added Linux support -miguel (weird, eh?, the original code was meant

 * to emulate SunOS).

 #define ALLOW_INIT_TRACING */

/*

 * Called by kernel/ptrace.c when detaching..

 *

 * Make sure single step bits etc are not set.

 nothing to do */

	/* Format is:

	 * 	G0 --> G7

	 *	O0 --> O7

	 *	L0 --> L7

	 *	I0 --> I7

	 *	PSR, PC, nPC, Y, WIM, TBR

	/* Format is:

	 *	F0 --> F31

	 *	empty 32-bit word

	 *	FSR (32--bit word)

	 *	FPU QUEUE COUNT (8-bit char)

	 *	FPU QUEUE ENTRYSIZE (8-bit char)

	 *	FPU ENABLED (8-bit char)

	 *	empty 8-bit char

	 *	FPU QUEUE (64 32-bit ints)

 SPDX-License-Identifier: GPL-2.0

/*

 * PCI bus specific translator

		/* Do not do PCI specific frobbing if the

		 * PCI bridge lacks a ranges property.  We

		 * want to pass it through up to the next

		 * parent as-is, not with the PCI translate

		 * method which chops off the top address cell.

 Check address type match */

 Start with the parent range base.  */

 Add in the child address offset, skipping high cell.  */

 For PCI, we override whatever child busses may have used.  */

 32 bits */

 64 bits */

 /*

 * AMBAPP bus specific translator

/*

 * Array of bus specific translators

 PCI */

 SBUS */

 AMBA */

 Default */

 Now walk through the ranges */

 If we have a ranges property in the parent, use it.  */

	/* Some SBUS devices use intermediate nodes to express

	 * hierarchy within the device itself.  These aren't

	 * real bus nodes, and don't have a 'ranges' property.

	 * But, we should still pass the translation work up

	 * to the SBUS itself.

 Convert to num-cells.  */

 Conver to num-entries.  */

 SPDX-License-Identifier: GPL-2.0

/* linux/arch/sparc/kernel/time.c

 *

 * Copyright (C) 1995 David S. Miller (davem@davemloft.net)

 * Copyright (C) 1996 Thomas K. Dyas (tdyas@eden.rutgers.edu)

 *

 * Chris Davis (cdavis@cois.on.ca) 03/27/1998

 * Added support for the intersil on the sun4/4200

 *

 * Gleb Raiko (rajko@mech.math.msu.su) 08/18/1998

 * Support for MicroSPARC-IIep, PCI CPU.

 *

 * This file handles the Sparc specific time handling details.

 *

 * 1997-09-10	Updated NTP code according to technical memorandum Jan '96

 *		"A Kernel Model for Precision Timekeeping" by Dave Mills

 Limit hit? */

 Count absolute cycles */

 resource is set at runtime */

 Only the primary RTC has an address property */

 Map the clock register io area read-only */

 Probe for the mostek real time clock chip. */

/* Must be after subsys_initcall() so that busses are probed.  Must

 * be before device_initcall() because things like the RTC driver

 * need to see the clock registers.

 SPDX-License-Identifier: GPL-2.0

/* iommu.c: Generic sparc64 IOMMU support.

 *

 * Copyright (C) 1999, 2007, 2008 David S. Miller (davem@davemloft.net)

 * Copyright (C) 1999, 2000 Jakub Jelinek (jakub@redhat.com)

 no outputs */ \

 Must be invoked under the IOMMU lock. */

 Ensure completion of previous PIO writes. */

/* Existing mappings are never marked invalid, instead they

 * are pointed to a dummy page.

 Setup initial software IOMMU state. */

 Allocate and initialize the free area map.  */

	/* Allocate and initialize the dummy page which we

	 * set inactive IO PTEs to point to.

 Now allocate and setup the IOMMU page table itself.  */

	/* If the device could not have possibly put dirty data into

	 * the streaming cache, no flush-flag synchronization needs

	 * to be performed.

 Record the context, if any. */

 Step 1: Kick data out of streaming buffers if necessary. */

 Step 2: Clear out TSB entries. */

 Init first segment length for backout at failure */

 Sanity check */

 Allocate iommu entries for that segment */

 Handle failure */

 Convert entry to a dma_addr_t */

 Insert into HW table */

 If we are in an open segment, try merging */

			/* We cannot merge if:

			 * - allocated dma_addr isn't contiguous to previous allocation

 Can't merge: create a new segment */

 This is a new segment, fill entries */

 Calculate next page pointer for contiguous check */

/* If contexts are being used, they are the same in all of the mappings

 * we make for a particular SG.

 Step 1: Record the context, if any. */

 Step 2: Kick data out of streaming buffers. */

 Step 1: Record the context, if any. */

 Step 2: Kick data out of streaming buffers. */

 SPDX-License-Identifier: GPL-2.0

/*

 * leon_pci_grpci1.c: GRPCI1 Host PCI driver

 *

 * Copyright (C) 2013 Aeroflex Gaisler AB

 *

 * This GRPCI1 driver does not support PCI interrupts taken from

 * GPIO pins. Interrupt generation at PCI parity and system error

 * detection is by default turned off since some GRPCI1 cores does

 * not support detection. It can be turned on from the bootloader

 * using the all_pci_errors property.

 *

 * Contributors: Daniel Hellstrom <daniel@gaisler.com>

 Enable/Disable Debugging Configuration Space Access */

/*

 * GRPCI1 APB Register MAP

 0x00 Configuration / Status */

 0x04 BAR0 (RO) */

 0x08 PAGE0 (RO) */

 0x0C BAR1 (RO) */

 0x10 PAGE1 */

 0x14 IO Map */

 0x18 PCI Status & Command (RO) */

 0x1C Interrupt register */

 must be on top of this structure */

 GRPCI register map */

 STATUS register error mask */

 LEON irqctrl GRPCI IRQ */

 GRPCI nexus PCI INTX# IRQs */

 GRPCI nexus Virt Error IRQ */

 AHB PCI Windows */

 MEMORY */

 I/O */

 CONFIGURATION */

 Use default IRQ decoding on PCI BUS0 according slot numbering */

 start at AD16=Device0 */

 special case: bridge controller itself */

 Select bus */

 do read access */

 check if master abort was received */

 Clear Master abort bit in PCI cfg space (is set) */

 Bus always little endian (unaffected by byte-swapping) */

 start at AD16=Device0 */

 special case: bridge controller itself */

 Select bus */

/* Read from Configuration Space. When entering here the PCI layer has taken

 * the pci_lock spinlock and IRQ is off.

/* Write to Configuration Space. When entering here the PCI layer has taken

 * the pci_lock spinlock and IRQ is off.

/* GENIRQ IRQ chip implementation for grpci1 irqmode=0..2. In configuration

 * 3 where all PCI Interrupts has a separate IRQ on the system IRQ controller

 * this is not needed and the standard IRQ controller can be used.

 only mask PCI interrupts here */

 only unmask PCI interrupts here */

 Handle one or multiple IRQs from the PCI core */

 Error Interrupt? */

 PCI Interrupt? */

 Call respective PCI Interrupt handler */

	/*

	 * Call "first level" IRQ chip end-of-irq handler. It will ACK LEON IRQ

	 * Controller, this must be done after IRQ sources have been handled to

	 * avoid double IRQ generation

 Create a virtual IRQ */

/*

 * Initialize mappings AMBA<->PCI, clear IRQ state, setup PCI interface

 *

 * Target BARs:

 *  BAR0: unused in this implementation

 *  BAR1: peripheral DMA to host's memory (size at least 256MByte)

 *  BAR2..BAR5: not implemented in hardware

 set 1:1 mapping between AHB -> PCI memory space */

 map PCI accesses to target BAR1 to Linux kernel memory 1:1 */

 translate I/O accesses to 0, I/O Space always @ PCI low 64Kbytes */

 disable and clear pending interrupts */

	/* Setup BAR0 outside access range so that it does not conflict with

	 * peripheral DMA. There is no need to set up the PAGE0 register.

	/*

	 * Setup the Host's PCI Target BAR1 for other peripherals to access,

	 * and do DMA to the host's memory.

	/*

	 * Setup Latency Timer and cache line size. Default cache line

	 * size will result in poor performance (256 word fetches), 0xff

	 * will set it according to the max size of the PCI FIFO.

 set as bus master, enable pci memory responses, clear status bits */

 Handle GRPCI1 Error Interrupt */

 Clear handled INT TYPE IRQs */

 find device register base address */

	/*

	 * check that we're in Host Slot and that we can act as a Host Bridge

	 * and not only as target/peripheral.

 check that BAR1 support 256 MByte so that we can map kernel space */

 hardware must support little-endian PCI (byte-twisting) */

 Find PCI Memory, I/O and Configuration Space Windows */

	/*

	 * I/O Space resources in I/O Window mapped into Virtual Adr Space

	 * We never use low 4KB because some devices seem have problems using

	 * address 0.

	/*

	 * grpci1 has no prefetchable memory, map everything as

	 * non-prefetchable memory

 setup maximum supported PCI buses */

 Initialize hardware */

	/*

	 * Get PCI Interrupt to System IRQ mapping and setup IRQ handling

	 * Error IRQ. All PCI and PCI-Error interrupts are shared using the

	 * same system IRQ.

 Enable IRQs on LEON IRQ controller */

 Setup IRQ handler for access errors */

	/*

	 * Enable Error Interrupts. PCI interrupts are unmasked once request_irq

	 * is called by the PCI Device drivers

 Init common layer and scan buses */

 SPDX-License-Identifier: GPL-2.0-only

/* arch/sparc64/kernel/traps.c

 *

 * Copyright (C) 1995,1997,2008,2009,2012 David S. Miller (davem@davemloft.net)

 * Copyright (C) 1997,1999,2000 Jakub Jelinek (jakub@redhat.com)

/*

 * I like traps on v9, :))))

/* When an irrecoverable trap occurs at tl > 0, the trap entry

 * code logs the trap state registers at every level in the trap

 * stack.  It is found at (pt_regs + sizeof(pt_regs)) and the layout

 * is as follows:

	/*

	 * Must do a little instruction decoding here in order to

	 * decide on a course of action. The bits of interest are:

	 *  insn[31:30] = op, where 3 indicates the load/store group

	 *  insn[24:19] = op3, which identifies individual opcodes

	 *  insn[13] indicates an immediate offset

	 *  op3[4]=1 identifies alternate space instructions

	 *  op3[5:4]=3 identifies floating point instructions

	 *  op3[2]=1 identifies stores

	 * See "Opcode Maps" in the appendix of any Sparc V9

	 * architecture spec for full details.

 op=3, op3[4]=1   */

 immediate offset */

 saved %asi       */

 immediate asi    */

 op3[2], stores   */

 op3[5:4]=3 (fp)  */

 Test if this comes from uaccess places. */

 Ouch, somebody is trying VM hole tricks on us... */

 Shit... */

 Test if this comes from uaccess places. */

 Ouch, somebody is trying VM hole tricks on us... */

	/* MCD (Memory Corruption Detection) disabled trap (TT=0x19) in HV

	 * is vectored thorugh data access exception trap with fault type

	 * set to HV_FAULT_TYPE_MCD_DIS. Check for MCD disabled trap.

	 * Accessing an address with invalid ASI for the address, for

	 * example setting an ADI tag on an address with ASI_MCD_PRIMARY

	 * when TTE.mcd is not set for the VA, is also vectored into

	 * kerbel by HV as data access exception with fault type set to

	 * HV_FAULT_TYPE_INV_ASI.

 When access exceptions happen, we must do this. */

 Clean 'em. */

 Re-enable in LSU. */

 no outputs */

 no outputs */

	/* We always log it, even if someone is listening for this

	 * trap.

	/* The Correctable ECC Error trap does not disable I/D caches.  So

	 * we only have to restore the ESTATE Error Enable register.

	/* XXX add more human friendly logging of the error status

	 * XXX as is implemented for cheetah

	/* We always log it, even if someone is listening for this

	 * trap.

	/* XXX need more intelligent processing here, such as is implemented

	 * XXX for cheetah errors, in fact if the E-cache still holds the

	 * XXX line with bad parity this will loop

		/* Handle the case where we took a CEE trap, but ACK'd

		 * only the UE state in the UDB error registers.

 no outputs */

 no outputs */

 no outputs */

 Cheetah error trap handling. */

/* This table is ordered in priority of errors and matches the

 * AFAR overwrite policy as well.

 These two do not update the AFAR. */

 These two do not update the AFAR. */

 These two do not update the AFAR. */

	/* Scan all cpu device tree nodes, note two values:

	 * 1) largest E-cache size

	 * 2) smallest E-cache line size

 Now allocate error trap reporting scoreboard. */

	/* Mark all AFSRs as invalid so that the trap handler will

	 * log new new information there.

 Now patch trap tables. */

 no outputs */

/* Unfortunately, the diagnostic access to the I-cache tags we need to

 * use to clear the thing interferes with I-cache coherency transactions.

 *

 * So we must only flush the I-cache when it is disabled.

 Clear the valid bits in all the tags. */

 no outputs */

 Save current DCU, disable I-cache. */

 Restore DCU register */

 no outputs */

 no outputs */

/* In order to make the even parity correct we must do two things.

 * First, we clear DC_data_parity and set DC_utag to an appropriate value.

 * Next, we clear out all 32-bytes of data for that line.  Data of

 * all-zero + tag parity value of zero == correct parity.

 no outputs */

 no outputs */

/* Conversion tables used to frob Cheetah AFSR syndrome values into

 * something palatable to the memory controller driver get_unumber

 * routine.

00*/NONE, C0, C1, M2, C2, M2, M3, 47, C3, M2, M2, 53, M2, 41, 29, M,

01*/C4, M, M, 50, M2, 38, 25, M2, M2, 33, 24, M2, 11, M, M2, 16,

02*/C5, M, M, 46, M2, 37, 19, M2, M, 31, 32, M, 7, M2, M2, 10,

03*/M2, 40, 13, M2, 59, M, M2, 66, M, M2, M2, 0, M2, 67, 71, M,

04*/C6, M, M, 43, M, 36, 18, M, M2, 49, 15, M, 63, M2, M2, 6,

05*/M2, 44, 28, M2, M, M2, M2, 52, 68, M2, M2, 62, M2, M3, M3, M4,

06*/M2, 26, 106, M2, 64, M, M2, 2, 120, M, M2, M3, M, M3, M3, M4,

07*/116, M2, M2, M3, M2, M3, M, M4, M2, 58, 54, M2, M, M4, M4, M3,

08*/C7, M2, M, 42, M, 35, 17, M2, M, 45, 14, M2, 21, M2, M2, 5,

09*/M, 27, M, M, 99, M, M, 3, 114, M2, M2, 20, M2, M3, M3, M,

0a*/M2, 23, 113, M2, 112, M2, M, 51, 95, M, M2, M3, M2, M3, M3, M2,

0b*/103, M, M2, M3, M2, M3, M3, M4, M2, 48, M, M, 73, M2, M, M3,

0c*/M2, 22, 110, M2, 109, M2, M, 9, 108, M2, M, M3, M2, M3, M3, M,

0d*/102, M2, M, M, M2, M3, M3, M, M2, M3, M3, M2, M, M4, M, M3,

0e*/98, M, M2, M3, M2, M, M3, M4, M2, M3, M3, M4, M3, M, M, M,

0f*/M2, M3, M3, M, M3, M, M, M, 56, M4, M, M3, M4, M, M, M,

10*/C8, M, M2, 39, M, 34, 105, M2, M, 30, 104, M, 101, M, M, 4,

11*/M, M, 100, M, 83, M, M2, 12, 87, M, M, 57, M2, M, M3, M,

12*/M2, 97, 82, M2, 78, M2, M2, 1, 96, M, M, M, M, M, M3, M2,

13*/94, M, M2, M3, M2, M, M3, M, M2, M, 79, M, 69, M, M4, M,

14*/M2, 93, 92, M, 91, M, M2, 8, 90, M2, M2, M, M, M, M, M4,

15*/89, M, M, M3, M2, M3, M3, M, M, M, M3, M2, M3, M2, M, M3,

16*/86, M, M2, M3, M2, M, M3, M, M2, M, M3, M, M3, M, M, M3,

17*/M, M, M3, M2, M3, M2, M4, M, 60, M, M2, M3, M4, M, M, M2,

18*/M2, 88, 85, M2, 84, M, M2, 55, 81, M2, M2, M3, M2, M3, M3, M4,

19*/77, M, M, M, M2, M3, M, M, M2, M3, M3, M4, M3, M2, M, M,

1a*/74, M, M2, M3, M, M, M3, M, M, M, M3, M, M3, M, M4, M3,

1b*/M2, 70, 107, M4, 65, M2, M2, M, 127, M, M, M, M2, M3, M3, M,

1c*/80, M2, M2, 72, M, 119, 118, M, M2, 126, 76, M, 125, M, M4, M3,

1d*/M2, 115, 124, M, 75, M, M, M3, 61, M, M4, M, M4, M, M, M,

1e*/M, 123, 122, M4, 121, M4, M, M3, 117, M2, M2, M3, M4, M3, M, M,

1f*/111, M, M, M, M4, M3, M3, M, M, M, M3, M, M3, M2, M, M

 Return the highest priority error conditon mentioned. */

 Try to get unumber if relevant. */

 Now dump the cache snapshots. */

 Flush E-cache */

 Grab snapshot of logged error. */

	/* If the current trap snapshot does not match what the

	 * trap handler passed along into our args, big trouble.

	 * In such a case, mark the local copy as invalid.

	 *

	 * Else, it matches and we mark the afsr in the non-local

	 * copy as invalid so we may log new error traps there.

 Re-enable I-cache/D-cache */

 no outputs */

 Re-enable error reporting */

 no outputs */

	/* Decide if we can continue after handling this trap and

	 * logging the error.

	/* Re-check AFSR/AFAR.  What we are looking for here is whether a new

	 * error was logged while we had error reporting traps disabled.

 If we got a new asynchronous error, die... */

 Log errors. */

 Flush E-cache to kick the error trap handlers out. */

/* Try to fix a correctable error by pushing the line out from

 * the E-cache.  Recheck error reporting registers to see if the

 * problem is intermittent.

 Make sure correctable error traps are disabled. */

	/* We calculate alias addresses that will force the

	 * cache line in question out of the E-cache.  Then

	 * we bring it back in with an atomic instruction so

	 * that we get it in some modified/exclusive state,

	 * then we displace it again to try and get proper ECC

	 * pushed back into the system.

 no outputs */

 Did that trigger another error? */

 Try one more time. */

 No new error, intermittent problem. */

 Restore error enables. */

 Return non-zero if PADDR is a valid physical memory address. */

 Grab snapshot of logged error. */

	/* If the current trap snapshot does not match what the

	 * trap handler passed along into our args, big trouble.

	 * In such a case, mark the local copy as invalid.

	 *

	 * Else, it matches and we mark the afsr in the non-local

	 * copy as invalid so we may log new error traps there.

		/* XXX Might want to log the results of this operation

		 * XXX somewhere... -DaveM

 Trap handler only disabled I-cache, flush it. */

 Re-enable I-cache */

 no outputs */

 Re-enable error reporting */

 no outputs */

	/* Decide if we can continue after handling this trap and

	 * logging the error.

 Re-check AFSR/AFAR */

 Log errors. */

 Check for the special PCI poke sequence. */

 Re-enable I-cache/D-cache */

 no outputs */

 Re-enable error reporting */

 no outputs */

 Grab snapshot of logged error. */

	/* If the current trap snapshot does not match what the

	 * trap handler passed along into our args, big trouble.

	 * In such a case, mark the local copy as invalid.

	 *

	 * Else, it matches and we mark the afsr in the non-local

	 * copy as invalid so we may log new error traps there.

 Re-enable I/D caches */

 no outputs */

 Re-enable error reporting */

 no outputs */

	/* Decide if we can continue after handling this trap and

	 * logging the error.

	/* Re-check AFSR/AFAR.  What we are looking for here is whether a new

	 * error was logged while we had error reporting traps disabled.

 If we got a new asynchronous error, die... */

 Log errors. */

	/* "Recoverable" here means we try to yank the page from ever

	 * being newly used again.  This depends upon a few things:

	 * 1) Must be main memory, and AFAR must be valid.

	 * 2) If we trapped from user, OK.

	 * 3) Else, if we trapped from kernel we must find exception

	 *    table entry (ie. we have to have been accessing user

	 *    space).

	 *

	 * If AFAR is not in main memory, or we trapped from kernel

	 * and cannot find an exception table entry, it is unacceptable

	 * to try and continue.

 OK, usermode access. */

 OK, kernel access to userspace. */

 BAD, privileged state is corrupted. */

				/* Only perform fixup if we still have a

				 * recoverable condition.

/* Handle a D/I cache parity error trap.  TYPE is encoded as:

 *

 * Bit0:	0=dcache,1=icache

 * Bit1:	0=recoverable,1=unrecoverable

 *

 * The hardware has disabled both the I-cache and D-cache in

 * the %dcr register.  

 Re-enable I-cache/D-cache */

 no outputs */

 Unique error handle */

0x00*/u64		err_handle;

 %stick value at the time of the error */

0x08*/u64		err_stick;

0x10*/u8		reserved_1[3];

 Error type */

0x13*/u8		err_type;

 Error attributes */

0x14*/u32		err_attrs;

 Real address of the memory region or PIO transaction */

0x18*/u64		err_raddr;

 Size of the operation triggering the error, in bytes */

0x20*/u32		err_size;

 ID of the CPU */

0x24*/u16		err_cpu;

 Grace periof for shutdown, in seconds */

0x26*/u16		err_secs;

 Value of the %asi register */

0x28*/u8		err_asi;

0x29*/u8		reserved_2;

 Value of the ASR register number */

0x2a*/u16		err_asr;

0x2c*/u32		reserved_3;

0x30*/u64		reserved_4;

0x38*/u64		reserved_5;

/* When the report contains a real-address of "-1" it means that the

 * hardware did not provide the address.  So we compute the effective

 * address of the load or store instruction at regs->tpc and report

 * that.  Usually when this happens it's a PIO and in such a case we

 * are using physical addresses with bypass ASIs anyways, so what we

 * report here is exactly what we want.

	/* Various fields in the error report are only valid if

	 * certain attribute bits are set.

/* Handle memory corruption detected error which is vectored in

 * through resumable error trap.

		/* MCD exception could happen because the task was

		 * running a system call with MCD enabled and passed a

		 * non-versioned pointer or pointer with bad version

		 * tag to the system call. In such cases, hypervisor

		 * places the address of offending instruction in the

		 * resumable error report. This is a deferred error,

		 * so the read/write that caused the trap was potentially

		 * retired long time back and we may have no choice

		 * but to send SIGSEGV to the process.

 Looks like a bad syscall parameter */

	/* Send SIGSEGV to the userspace process with the right signal

	 * code

/* We run with %pil set to PIL_NORMAL_MAX and PSTATE_IE enabled in %pstate.

 * Log the event and clear the first word of the entry.

 We have a local copy now, so release the entry.  */

		/* We should really take the seconds field of

		 * the error report and use it for the shutdown

		 * invocation, but for now do the same thing we

		 * do for a DS shutdown request.

	/* If this is a memory corruption detected error vectored in

	 * by HV through resumable error trap, call the handler

/* If we try to printk() we'll probably make matters worse, by trying

 * to retake locks this cpu already holds or causing more errors. So

 * just bump a counter, and we'll report these counter bumps above.

/* Given a set of registers, get the virtual addressi that was being accessed

 * by the faulting instructions at tpc.

/* Attempt to handle non-resumable errors generated from userspace.

 * Returns true if the signal was handled, false otherwise.

 This seems highly unlikely to ever occur */

 Break the unfortunate news. */

 Default to doing nothing */

/* We run with %pil set to PIL_NORMAL_MAX and PSTATE_IE enabled in %pstate.

 * Log the event, clear the first word of the entry, and die.

 We have a local copy now, so release the entry.  */

 DON'T PANIC: This userspace error was handled. */

 Check for the special PCI poke sequence. */

/* If we try to printk() we'll probably make matters worse, by trying

 * to retake locks this cpu already holds or causing more errors. So

 * just bump a counter, and we'll report these counter bumps above.

	/* XXX Actually even this can make not that much sense.  Perhaps

	 * XXX we should just pull the plug and panic directly from here?

 unfinished_FPop */

 unimplemented_FPop */

 Amuse the user. */

		/* Stop the back trace when we hit userland or we

		 * find some badly aligned kernel stack.

 POPC */ {

 LDQ/STQ */ {

				/* On UltraSPARC T2 and later, FPU insns which

				 * are not implemented in HW signal an illegal

				 * instruction trap and do not set the FP Trap

				 * Trap in the %fsr to unimplemented_FPop.

/* sun4v_mem_corrupt_detect_precise() - Handle precise exception on an ADI

 * tag mismatch.

 *

 * ADI version tag mismatch on a load from memory always results in a

 * precise exception. Tag mismatch on a store to memory will result in

 * precise exception if MCDPER or PMCDPER is set to 1.

		/* MCD exception could happen because the task was running

		 * a system call with MCD enabled and passed a non-versioned

		 * pointer or pointer with bad version tag to  the system

		 * call.

 Looks like a bad syscall parameter */

 Trap level 1 stuff or other traps we should never see... */

/* This can get invoked before sched_init() so play it super safe

 * and use hard_smp_processor_id().

 Only invoked on boot processor. */

 Compile time sanity check. */

	/* Attach to the address space of init_task.  On SMP we

	 * do this in smp.c:smp_callin for other cpus.

 SPDX-License-Identifier: GPL-2.0

/* cpu.c: Dinky routines to look for the kind of Sparc cpu

 *        we are on.

 *

 * Copyright (C) 1996 David S. Miller (davem@caip.rutgers.edu)

 Sun4/100, 4/200, SLC */

 borned STP1012PGA */

 SparcStation SLC, SparcStation1 */

 SPARCstation-5 */

 SparcStation2, SparcServer 490 & 690 */

 SparcStation2 */

 Embedded controller */

 Ross Technologies HyperSparc */

 ECL Implementation, CRAY S-MP Supercomputer... AIEEE! */

 Someone please write the code to support this beast! ;) */

 SparcClassic  --  borned STP1010TAB-50*/

 SuperSparc 50 module */

 SparcClassic */

 Gallium arsenide 200MHz, BOOOOGOOOOMIPS!!! */

 Aeroflex Gaisler */

/* In order to get the fpu type correct, you need to take the IDPROM's

 * machine type value into consideration too.  I will fix this.

 CONFIG_SPARC32 */

 CONFIG_SPARC64 */

	/* The pointer we are returning is arbitrary,

	 * it just has to be non-NULL and not IS_ERR

	 * in the success case.

 CONFIG_SPARC32 */

 CONFIG_SPARC64 */

 SPDX-License-Identifier: GPL-2.0

/* pci_sabre.c: Sabre specific PCI controller support.

 *

 * Copyright (C) 1997, 1998, 1999, 2007 David S. Miller (davem@davemloft.net)

 * Copyright (C) 1998, 1999 Eddie C. Dost   (ecd@skynet.be)

 * Copyright (C) 1999 Jakub Jelinek   (jakub@redhat.com)

 SABRE PCI controller register offsets and definitions. */

 Primary PCI DMA Read */

 Primary PCI DMA Write */

 Secondary PCI DMA Read */

 Secondary PCI DMA Write */

 Secondary DMA Translation Error */

 Primary DMA Translation Error */

 Bytemask */

 Offset (AFAR bits [5:3] */

 Was block operation */

 Primary PCI DMA Read */

 Primary PCI DMA Write */

 Secondary PCI DMA Read */

 Secondary PCI DMA Write */

 ECC Syndrome */

 Bytemask */

 Offset */

 Was block operation */

 Aliases to 0x0038 */

 Error status bits */

 Error present in IOTLB */

 IOTLB lock enable */

 IOTLB lock pointer */

 TSB Size */

 TSB assumed page size */

 Diagnostic Mode Enable */

 IOMMU Enable */

 Use MemoryReadLine for block loads/stores */

 Set when SERR asserted on PCI bus */

 Bus Parking 0=Ultra-IIi 1=prev-bus-owner */

 Ultra-IIi granted every other bus cycle */

 Slot which is granted every other bus cycle */

 PCI Error Interrupt Enable */

 DMA Flow Control 0=wait-if-possible 1=retry */

 Slot PCI arbitration enables */

 Primary Master Abort */

 Primary Target Abort */

 Primary Excessive Retries */

 Primary Parity Error */

 Secondary Master Abort */

 Secondary Target Abort */

 Secondary Excessive Retries */

 Secondary Parity Error */

 Byte Mask */

 Was Block Operation */

 Disable PIO Retry Limit */

 Invert PIO Address Parity */

 Invert PIO Data Parity */

 Invert DMA Data Parity */

 Loopback Enable - not supported */

 Respond to 0xe0000000-0xffffffff */

 Respond to 0xc0000000-0xdfffffff */

 Respond to 0xa0000000-0xbfffffff */

 Respond to 0x80000000-0x9fffffff */

 Respond to 0x60000000-0x7fffffff */

 Respond to 0x40000000-0x5fffffff */

 Respond to 0x20000000-0x3fffffff */

 Respond to 0x00000000-0x1fffffff */

 Aliases to 0x1098 */

 Aliases to 0x10a0 */

 Error status bits */

 Error present */

 Page is writable */

 Streamable bit - unused */

 0=8k 1=16k */

 Virtual Page Number [31:13] */

 Valid */

 Used (for LRU algorithm) */

 Cacheable */

 Physical Page Number [33:13] */

 Slave P_RQST queue size */

 Slave supports one outstanding read */

 Refresh Enable */

 Enable all ECC functions */

 Enable 11-bit column addressing */

 DIMM Pair Present Bits */

 Refresh Interval */

 Advance Memdata Clock */

 Advance DRAM Read Data Clock */

 CAS to RAS delay for CBR refresh */

 CAS length for read/write */

 RAS to CAS delay */

 CAS Precharge */

 RAS Precharge */

 Length of RAS for refresh */

 Must be same as CASRW */

 RAS after CAS hold time */

 Latch uncorrectable error status. */

 Clear the primary/secondary error status bits. */

 Log the error. */

 Interrogate IOMMU for error status. */

 Latch error status. */

 Clear primary/secondary error status bits. */

 Log the error. */

	/* XXX Use syndrome and afar to print out module string just like

	 * XXX UDB CE trap handler does... -DaveM

	/* Sabre/Hummingbird IRQ property layout is:

	 * 0: PCI ERR

	 * 1: UE ERR

	 * 2: CE ERR

	 * 3: POWER FAIL

	/* We clear the error bits in the appropriate AFSR before

	 * registering the handler so that we don't get spurious

	 * interrupts.

 Status register bits are "write 1 to clear". */

			/* Use a primary/seconday latency timer value

			 * of 64.

			/* Enable reporting/forwarding of master aborts,

			 * parity, and SERR.

	/* The APB bridge speaks to the Sabre host PCI bridge

	 * at 66Mhz, but the front side of APB runs at 33Mhz

	 * for both segments.

	 *

	 * Hummingbird systems do not use APB, so they run

	 * at 66MHZ.

	/* This driver has not been verified to handle

	 * multiple SABREs yet, so trap this.

	 *

	 * Also note that the SABRE host bridge is hardwired

	 * to live at bus 0.

		/* Of course, Sun has to encode things a thousand

		 * different ways, inconsistently.

	/*

	 * Map in SABRE register set and report the presence of this SABRE.

	/*

	 * First REG in property is base of entire SABRE register space.

 Clear interrupts */

 PCI first */

 Then OBIO */

 Error interrupts are enabled later after the bus scan. */

 Now map in PCI config space for entire SABRE. */

	/*

	 * Look for APB underneath.

 SPDX-License-Identifier: GPL-2.0

/* pci_psycho.c: PSYCHO/U2P specific PCI controller support.

 *

 * Copyright (C) 1997, 1998, 1999, 2007 David S. Miller (davem@davemloft.net)

 * Copyright (C) 1998, 1999 Eddie C. Dost   (ecd@skynet.be)

 * Copyright (C) 1999 Jakub Jelinek   (jakub@redhat.com)

 Misc. PSYCHO PCI controller register offsets and definitions. */

 Implementation of this PSYCHO*/

 Version of this PSYCHO       */

 UPA Module ID of PSYCHO      */

 Interrupt Group Number       */

 Reserved                     */

 Address Parity Check Enable  */

 Incoming System Addr Parerr  */

 Invert UPA Parity            */

 PSYCHO clock mode            */

 Reserved                     */

 Streaming byte hole error    */

 SERR signal asserted         */

 PCI speed (1 is U2P clock)   */

 Reserved                     */

 PCI arbitration parking      */

 Reserved                     */

 Streaming byte hole int enab */

 Power Mgmt Wake Enable       */

 PCI Error Interrupt Enable   */

 Reserved                     */

 PCI DVMA Arbitration Enable  */

 PSYCHO error handling support. */

/* Helper function of IOMMU error checking, which checks out

 * the state of the streaming buffers.  The IOMMU lock is

 * held when this is called.

 *

 * For the PCI error case we know which PBM (and thus which

 * streaming buffer) caused the error, but for the uncorrectable

 * error case we do not.  So we always check both streaming caches.

 LRU Lock Pointer */

 LRU Lock Enable */

 Rerun Disable */

 Diagnostic Mode Enable */

 Streaming Buffer Enable */

/* When an Uncorrectable Error or a PCI Error happens, we

 * interrogate the IOMMU state to see if it is the cause.

 Reserved                      */

 Translation Error Status      */

 Translation Error encountered */

 Enable translation locking    */

 Translation lock pointer      */

 TSB Size                      */

 TSB Table 1024 8-byte entries */

 TSB Table 2048 8-byte entries */

 TSB Table 4096 8-byte entries */

 TSB Table 8192 8-byte entries */

 TSB Table 16k 8-byte entries  */

 TSB Table 32k 8-byte entries  */

 TSB Table 64k 8-byte entries  */

 TSB Table 128k 8-byte entries */

 Reserved                      */

 Assumed page size, 0=8k 1=64k */

 Diagnostic mode enable        */

 IOMMU Enable                  */

/* Uncorrectable Errors.  Cause of the error and the address are

 * recorded in the UE_AFSR and UE_AFAR of PSYCHO.  They are errors

 * relating to UPA interface transactions.

 Primary PIO is cause         */

 Primary DVMA read is cause   */

 Primary DVMA write is cause  */

 Secondary PIO is cause       */

 Secondary DVMA read is cause */

 Secondary DVMA write is cause*/

 Reserved                     */

 Bytemask of failed transfer  */

 Doubleword Offset            */

 UPA MID causing the fault    */

 Trans was block operation    */

 Reserved                     */

 Latch uncorrectable error status. */

 Clear the primary/secondary error status bits. */

 Log the error. */

 Interrogate both IOMMUs for error status. */

 Correctable Errors. */

 Primary PIO is cause         */

 Primary DVMA read is cause   */

 Primary DVMA write is cause  */

 Secondary PIO is cause       */

 Secondary DVMA read is cause */

 Secondary DVMA write is cause*/

 Reserved                     */

 Syndrome Bits                */

 Bytemask of failed transfer  */

 Double Offset                */

 UPA MID causing the fault    */

 Trans was block operation    */

 Reserved                     */

 Latch error status. */

 Clear primary/secondary error status bits. */

 Log the error. */

	/* XXX Use syndrome and afar to print out module string just like

	 * XXX UDB CE trap handler does... -DaveM

/* PCI Errors.  They are signalled by the PCI bus module since they

 * are associated with a specific bus segment.

 XXX What about PowerFail/PowerManagement??? -DaveM */

 Enable ECC Checking */

 Enable UE Interrupts */

 Enable CE INterrupts */

	/* Psycho interrupt property order is:

	 * 0: PCIERR INO for this PBM

	 * 1: UE ERR

	 * 2: CE ERR

	 * 3: POWER FAIL

	 * 4: SPARE HARDWARE

	 * 5: POWER MANAGEMENT

	/* We really mean to ignore the return result here.  Two

	 * PCI controller share the same interrupt numbers and

	 * drive the same front-end hardware.

	/* This one, however, ought not to fail.  We can just warn

	 * about it since the system can still operate properly even

	 * if this fails.

 Enable UE and CE interrupts for controller. */

	/* Enable PCI Error interrupts and clear error

	 * bits for each PBM.

 PSYCHO boot time probing and initialization. */

	/* Set cache-line size to 64 bytes, this is actually

	 * a nop but I do it for completeness.

 Set PBM latency timer to 64 PCI clocks. */

	/* After the PCI bus scan is complete, we can register

	 * the error interrupt handlers.

 Reserved                     */

 Disable retry limit          */

 Disable DMA wr / irq sync    */

 Disable DMA wr / PIO rd sync */

 Invert DMA data parity       */

 Invert PIO data parity       */

 Invert PIO address parity    */

 Enable loopback mode         */

 Enable arbiter for all PCI slots. */

	/* Disable DMA write / PIO read synchronization on

	 * both PCI bus segments.

	 * [ U2P Erratum 1243770, STP2223BGA data sheet ]

 PSYCHO's streaming buffer lacks ctx flushing. */

	/* Enable the streaming buffer.  We have to be careful

	 * just in case OBP left it with LRU locking enabled.

	 *

	 * It is possible to control if PBM will be rerun on

	 * line misses.  Currently I just retain whatever setting

	 * OBP left us with.  All checks so far show it having

	 * a value of zero.

 If necessary, hook us up for starfire IRQ translations. */

 SPDX-License-Identifier: GPL-2.0

/* irq.c: UltraSparc IRQ handling/init/registry.

 *

 * Copyright (C) 1997, 2007, 2008 David S. Miller (davem@davemloft.net)

 * Copyright (C) 1998  Eddie C. Dost    (ecd@skynet.be)

 * Copyright (C) 1998  Jakub Jelinek    (jj@ultra.linux.cz)

/* On several sun4u processors, it is illegal to mix bypass and

 * non-bypass accesses.  Therefore we access all INO buckets

 * using bypass accesses only.

 no outputs */

 no outputs */

/* Major version 2.0 of HV_GRP_INTR added support for the VIRQ cookie

 * based interfaces, but:

 *

 * 1) Several OSs, Solaris and Linux included, use them even when only

 *    negotiating version 1.0 (or failing to negotiate at all).  So the

 *    hypervisor has a workaround that provides the VIRQ interfaces even

 *    when only verion 1.0 of the API is in use.

 *

 * 2) Second, and more importantly, with major version 2.0 these VIRQ

 *    interfaces only were actually hooked up for LDC interrupts, even

 *    though the Hypervisor specification clearly stated:

 *

 *	The new interrupt API functions will be available to a guest

 *	when it negotiates version 2.0 in the interrupt API group 0x2. When

 *	a guest negotiates version 2.0, all interrupt sources will only

 *	support using the cookie interface, and any attempt to use the

 *	version 1.0 interrupt APIs numbered 0xa0 to 0xa6 will result in the

 *	ENOTSUPPORTED error being returned.

 *

 *   with an emphasis on "all interrupt sources".

 *

 * To correct this, major version 3.0 was created which does actually

 * support VIRQs for all interrupt sources (not just LDC devices).  So

 * if we want to move completely over the cookie based VIRQs we must

 * negotiate major version 3.0 or later of HV_GRP_INTR.

 This function is for the timer interrupt.*/

 Athena's devhandle|devino is large.*/

/*

 * /proc/interrupts printing:

/* Don't do anything.  The desc->status check for IRQ_DISABLED in

 * handler_irq() will skip the handler call and that will leave the

 * interrupt in the sent state.  The next ->enable() call will hit the

 * ICLR register to reset the state machine.

 *

 * This scheme is necessary, instead of clearing the Valid bit in the

 * IMAP register, to handle the case of IMAP registers being shared by

 * multiple INOs (and thus ICLR registers).  Since we use a different

 * virtual IRQ for each shared IMAP instance, the generic code thinks

 * there is only one user so it prematurely calls ->disable() on

 * free_irq().

 *

 * We have to provide an explicit ->disable() method instead of using

 * NULL to get the default.  The reason is that if the generic code

 * sees that, it also hooks up a default ->shutdown method which

 * invokes ->mask() which we do not want.  See irq_chip_set_defaults().

	/* handler_irq needs to find the irq. cookie is seen signed in

	 * sun4v_dev_mondo and treated as a non ivector_table delivery.

	/* This is borrowed from the original function.

 Grab an atomic snapshot of the pending IVECs.  */

 PROM timer node hangs out in the top level of device siblings... */

	/* Assume if node is not present, PROM uses different tick mechanism

	 * which we should not care about.

 If PROM is really using this, it must be mapped by him. */

 Save them away for later. */

	/* Just as in sun4c PROM uses timer which ticks at IRQ 14.

	 * We turn both off here just to be paranoid.

 Wheee, eat the interrupt packet too... */

 no outputs */

/* Please be very careful with register_one_mondo() and

 * sun4v_register_mondo_queues().

 *

 * On SMP this gets invoked from the CPU trampoline before

 * the cpu has fully taken over the trap table from OBP,

 * and it's kernel stack + %g6 thread register state is

 * not fully cooked yet.

 *

 * Therefore you cannot make any OBP calls, not even prom_printf,

 * from these two routines.

/* Each queue region must be a power of 2 multiple of 64 bytes in

 * size.  The base real address must be aligned to the size of the

 * region.  Thus, an 8KB queue must be 8KB aligned, for example.

 Make sure mondo block is 64byte aligned */

 Allocate mondo and error queues for all possible cpus.  */

	/* If we are doing cookie only VIRQs then we do not need the ivector

	 * table to process interrupts.

 Only invoked on boot processor.*/

 Load up the boot cpu's entries.  */

	/* We need to clear any IRQ's pending in the soft interrupt

	 * registers, a spurious one could be left around from the

	 * PROM timer which we just disabled.

	/* Now that ivector table is initialized, it is safe

	 * to receive IRQ vector traps.  We will normally take

	 * one or two right now, in case some device PROM used

	 * to boot us wants to speak to us.  We just ignore them.

 No outputs */

 SPDX-License-Identifier: GPL-2.0

/* pci_schizo.c: SCHIZO/TOMATILLO specific PCI controller support.

 *

 * Copyright (C) 2001, 2002, 2003, 2007, 2008 David S. Miller (davem@davemloft.net)

/* This is a convention that at least Excalibur and Merlin

 * follow.  I suppose the SCHIZO used in Starcat and friends

 * will do similar.

 *

 * The only way I could see this changing is if the newlink

 * block requires more space in Schizo's address space than

 * they predicted, thus requiring an address space reorg when

 * the newer Schizo is taped out.

 Streaming buffer control register. */

 LRU Lock Pointer */

 LRU Lock Enable */

 Rerun Disable */

 Diagnostic Mode Enable */

 Streaming Buffer Enable */

 IOMMU control register. */

 Reserved                      */

 Translation Error Status      */

 Translation Error encountered */

 Enable translation locking    */

 Translation lock pointer      */

 TSB Size                      */

 TSB Table 1024 8-byte entries */

 TSB Table 2048 8-byte entries */

 TSB Table 4096 8-byte entries */

 TSB Table 8192 8-byte entries */

 TSB Table 16k 8-byte entries  */

 TSB Table 32k 8-byte entries  */

 TSB Table 64k 8-byte entries  */

 TSB Table 128k 8-byte entries */

 Reserved                      */

 Assumed page size, 0=8k 1=64k */

 Diagnostic mode enable        */

 IOMMU Enable                  */

/* Schizo config space address format is nearly identical to

 * that of PSYCHO:

 *

 *  32             24 23 16 15    11 10       8 7   2  1 0

 * ---------------------------------------------------------

 * |0 0 0 0 0 0 0 0 0| bus | device | function | reg | 0 0 |

 * ---------------------------------------------------------

 SCHIZO error handling support. */

 Uncorrectable ECC error */

 Correctable ECC error */

 PBM A PCI bus error */

 PBM B PCI bus error */

 Safari interface error */

 --> 0xba00 */

 --> 0xba80 */

 --> 0xbb80 */

	/* This is __REALLY__ dangerous.  When we put the

	 * streaming buffer into diagnostic mode to probe

	 * it's tags and error status, we _must_ clear all

	 * of the line tag valid bits before re-enabling

	 * the streaming buffer.  If any dirty data lives

	 * in the STC when we do this, we will end up

	 * invalidating it before it has a chance to reach

	 * main memory.

 OK, state is logged, exit diagnostic mode. */

 XXX Should spit out per-bank error information... -DaveM */

/* IOMMU is per-PBM in Schizo, so interrogate both for anonymous

 * controller level errors.

 Clear the error encountered bit. */

		/* Put the IOMMU into diagnostic mode and probe

		 * it's TLB for entries with error status.

		 *

		 * It is very possible for another DVMA to occur

		 * while we do this probe, and corrupt the system

		 * further.  But we are so screwed at this point

		 * that we are likely to crash hard anyways, so

		 * get as much diagnostic information to the

		 * console as we can.

 Now clear out the entry. */

 Leave diagnostic mode. */

 Uncorrectable ECC error status gathering. */

 Safari */

 Safari/Tomatillo */

 Safari */

 Safari */

 Safari/Tomatillo */

 Safari */

 Safari */

 Safari/Tomatillo */

 Safari/Tomatillo */

 Safari */

 Safari */

 Safari */

 Safari */

 Safari */

 Latch uncorrectable error status. */

	/* If either of the error pending bits are set in the

	 * AFSR, the error status is being actively updated by

	 * the hardware and we must re-read to get a clean value.

 Clear the primary/secondary error status bits. */

 Log the error. */

 Interrogate IOMMU for error status. */

 Latch error status. */

	/* If either of the error pending bits are set in the

	 * AFSR, the error status is being actively updated by

	 * the hardware and we must re-read to get a clean value.

 Clear primary/secondary error status bits. */

 Log the error. */

	/* XXX Use syndrome and afar to print out module string just like

	 * XXX UDB CE trap handler does... -DaveM

 Schizo/Tomatillo */

 Schizo/Tomatillo */

 Schizo/Tomatillo */

 Schizo/Tomatillo */

 Schizo/Tomatillo */

 Schizo */

 Schizo/Tomatillo */

 Schizo/Tomatillo */

 Schizo/Tomatillo */

 Schizo/Tomatillo */

 Schizo/Tomatillo */

 Schizo */

 Schizo/Tomatillo */

 Schizo/Tomatillo */

 Schizo/Tomatillo */

 Schizo/Tomatillo */

 Schizo/Tomatillo */

 Safari */

 Tomatillo */

 Tomatillo */

 Safari */

 Safari */

 Safari/Tomatillo */

 Safari/Tomatillo */

 Safari/Tomatillo */

 Safari */

 Safari/Tomatillo */

 Safari */

 Tomatillo */

 Tomatillo */

 Tomatillo */

 Safari/Tomatillo */

 Tomatillo */

 Tomatillo */

 Safari */

 Tomatillo */

 Safari */

 Tomatillo */

 Safari/Tomatillo */

 Safari/Tomatillo */

 Safari */

 Safari */

 Tomatillo */

 Clear the errors.  */

 Log 'em.  */

 Latch error status. */

 Clear primary/secondary error status bits. */

 Log the error. */

	/* For the error types shown, scan PBM's PCI bus for devices

	 * which have logged that error type.

	/* If we see a Target Abort, this could be the result of an

	 * IOMMU translation error of some sort.  It is extremely

	 * useful to log this information as usually it indicates

	 * a bug in the IOMMU support code or a PCI device driver.

	/* For excessive retries, PSYCHO/PBM will abort the device

	 * and there is no way to specifically check for excessive

	 * retries in the config space status registers.  So what

	 * we hope is that we'll catch it via the master/target

	 * abort events.

 Schizo/Tomatillo */

 Safari */

 Safari */

 Safari */

 Safari */

 Tomatillo */

 Tomatillo */

 Tomatillo */

 Tomatillo */

 Tomatillo */

 Tomatillo */

 Tomatillo */

 Safari */

 Tomatillo */

 Safari */

 Tomatillo */

 Safari */

 Tomatillo */

 Safari */

 Tomatillo */

 Safari */

 Safari */

 Tomatillo */

 Safari */

 Safari */

 Tomatillo */

 Safari/Tomatillo */

 Safari/Tomatillo */

 Safari/Tomatillo */

 Safari/Tomatillo */

 Safari */

/* We only expect UNMAP errors here.  The rest of the Safari errors

 * are marked fatal and thus cause a system reset.

 Nearly identical to PSYCHO equivalents... */

 Enable ECC Checking */

 Enable UE Interrupts */

 Enable CE INterrupts */

/* How the Tomatillo IRQs are routed around is pure guesswork here.

 *

 * All the Tomatillo devices I see in prtconf dumps seem to have only

 * a single PCI bus unit attached to it.  It would seem they are separate

 * devices because their PortID (ie. JBUS ID) values are all different

 * and thus the registers are mapped to totally different locations.

 *

 * However, two Tomatillo's look "similar" in that the only difference

 * in their PortID is the lowest bit.

 *

 * So if we were to ignore this lower bit, it certainly looks like two

 * PCI bus units of the same Tomatillo.  I still have not really

 * figured this out...

	/* Tomatillo IRQ property layout is:

	 * 0: PCIERR

	 * 1: UE ERR

	 * 2: CE ERR

	 * 3: SERR

	 * 4: POWER FAIL?

 Enable UE and CE interrupts for controller. */

	/* Enable PCI Error interrupts and clear error

	 * bits.

	/* Schizo IRQ property layout is:

	 * 0: PCIERR

	 * 1: UE ERR

	 * 2: CE ERR

	 * 3: SERR

	 * 4: POWER FAIL?

 Enable UE and CE interrupts for controller. */

	/* Enable PCI Error interrupts and clear error

	 * bits for each PBM.

	/* Make all Safari error conditions fatal except unmapped

	 * errors which we make generate interrupts.

	/* XXX Something wrong with some Excalibur systems

	 * XXX Sun is shipping.  The behavior on a 2-cpu

	 * XXX machine is that both CPU1 parity error bits

	 * XXX are set and are immediately set again when

	 * XXX their error status bits are cleared.  Just

	 * XXX ignore them for now.  -DaveM

	/* Set cache-line size to 64 bytes, this is actually

	 * a nop but I do it for completeness.

 Set PBM latency timer to 64 PCI clocks. */

 TOMATILLO lacks streaming cache.  */

 SCHIZO has context flushing. */

	/* Turn off LRU locking and diag mode, enable the

	 * streaming buffer and leave the rerun-disable

	 * setting however OBP set it.

 Register addresses, SCHIZO has iommu ctx flushing. */

	/* We use the main control/status register of SCHIZO as the write

	 * completion register.

	/*

	 * Invalidate TLB Entries.

	/* Leave diag mode enabled for full-flushing done

	 * in pci_iommu.c

 Disable BAD ECC errors (Schizo) */

 Disable MMU bypass mode (Schizo/Tomatillo) */

 Disable TTO errors (Schizo/Tomatillo) */

 Disable retry arbitration (Schizo) */

 Disable retry limit (Schizo/Tomatillo) */

 Disable interrupt/DMA synch (Schizo/Tomatillo) */

 Invert DMA parity (Schizo/Tomatillo) */

 Invert PIO data parity (Schizo/Tomatillo) */

 Invert PIO address parity (Schizo/Tomatillo) */

 Enable arbiter for all PCI slots.  */

		/* Clear prefetch lengths to workaround a bug in

		 * Jalapeno...

	/* For SCHIZO, three OBP regs:

	 * 1) PBM controller regs

	 * 2) Schizo front-end controller regs (same for both PBMs)

	 * 3) PBM PCI config space

	 *

	 * For TOMATILLO, four OBP regs:

	 * 1) PBM controller regs

	 * 2) Tomatillo front-end controller regs

	 * 3) PBM PCI config space

	 * 4) Ichip regs

/* The ordering of this table is very important.  Some Tomatillo

 * nodes announce that they are compatible with both pci108e,a801

 * and pci108e,8001.  So list the chips in reverse chronological

 * order.

 SPDX-License-Identifier: GPL-2.0

 PSYCHO interrupt mapping support. */

 PCI slot */

 Onboard device */

 Now build the IRQ bucket. */

/* When a device lives behind a bridge deeper in the PCI bus topology

 * than APB, a special sequence must run to make sure all pending DMA

 * transfers at the time of IRQ delivery are visible in the coherency

 * domain by the cpu.  This sequence is to perform a read on the far

 * side of the non-APB bridge, then perform a read of Sabre's DMA

 * write-sync register.

	/* This traversal up towards the root is meant to

	 * handle two cases:

	 *

	 * 1) non-PCI bus sitting under PCI, such as 'ebus'

	 * 2) the PCI controller interrupts themselves, which

	 *    will use the sabre_irq_build but do not need

	 *    the DMA synchronization handling

 PCI slot */

 onboard device */

 Now build the IRQ bucket. */

	/* If the parent device is a PCI<->PCI bridge other than

	 * APB, we have to install a pre-handler to ensure that

	 * all pending DMA is drained before the interrupt handler

	 * is run.

/* SCHIZO interrupt mapping support.  Unlike Psycho, for this controller the

 * imap/iclr registers are per-PBM.

 no outputs */ \

 Now build the IRQ bucket. */

	/* On Schizo, no inofixup occurs.  This is because each

	 * INO has it's own IMAP register.  On Psycho and Sabre

	 * there is only one IMAP register for each PCI slot even

	 * though four different INOs can be generated by each

	 * PCI slot.

	 *

	 * But, for JBUS variants (essentially, Tomatillo), we have

	 * to fixup the lowest bit of the interrupt group number.

 Now build the IRQ bucket. */

 Set the interrupt controller number.  */

	/* The interrupt map registers do not have an INO field

	 * like other chips do.  They return zero in the INO

	 * field, and the interrupt controller number is controlled

	 * in bits 6 to 9.  So in order for build_irq() to get

	 * the INO right we pass it in as part of the fixup

	 * which will get added to the map register zero value

	 * read by build_irq().

 CONFIG_PCI */

/* INO number to IMAP register offset for SYSIO external IRQ's.

 * This should conform to both Sunfire/Wildfire server and Fusion

 * desktop designs.

 SBUS Slot 0 --> 3, level 1 --> 7 */

 Onboard devices (not relevant/used on SunFire). */

/* Convert Interrupt Mapping register pointer to associated

 * Interrupt Clear register pointer, SYSIO specific version.

	/* SYSIO inconsistency.  For external SLOTS, we have to select

	 * the right ICLR register based upon the lower SBUS irq level

	 * bits.

 CONFIG_SBUS */

 Set the INO state to idle, and disable.  */

 SPDX-License-Identifier: GPL-2.0

 WDISP19 - target is . + immed << 2 */

 ba,pt %xcc, . + off */

 WDISP22 - target is . + immed << 2 */

 ba . + off */

 SPDX-License-Identifier: GPL-2.0

 !CONFIG_DYNAMIC_FTRACE */

/*

 * Hook the return address and push it in the stack of return addrs

 * in current thread info.

 CONFIG_FUNCTION_GRAPH_TRACER */

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

/*

 *  sun4m SMP support.

 *

 * Copyright (C) 1996 David S. Miller (davem@caip.rutgers.edu)

	/* Allow master to continue. The master will then give us the

	 * go-ahead by setting the smp_commenced_mask and will wait without

	 * timeouts until our setup is completed fully (signified by

	 * our bit being set in the cpu_online_mask).

 XXX: What's up with all the flushes? */

 Fix idle thread fields. */

 paranoid */);

 Attach to the address space of init_task. */

/*

 *	Cycle through the processors asking the PROM to start each one.

 See trampoline.S for details... */

	/*

	 * Initialize the contexts table

	 * Since the call to prom_startcpu() trashes the structure,

	 * we need to re-initialize it for each cpu

 whirrr, whirrr, whirrrrrrrrr... */

 wheee... it's going... */

 setup cpu list for irq rotation */

 Ok, they are spinning and ready to go. */

 Set when ipi entered. */

 Set when ipi exited. */

 Cross calls must be serialized, at least currently. */

 Init function glue. */

 Init receive/complete mapping, plus fire the IPI's off. */

 Running cross calls. */

 Is this needless? */

 SPDX-License-Identifier: GPL-2.0

/*

 * leon_pci.c: LEON Host PCI support

 *

 * Copyright (C) 2011 Aeroflex Gaisler AB, Daniel Hellstrom

 *

 * Code is partially derived from pcic.c

/* The LEON architecture does not rely on a BIOS or bootloader to setup

 * PCI for us. The Linux generic routines are used to setup resources,

 * reset values of configuration-space register settings are preserved.

 *

 * PCI Memory and Prefetchable Memory is direct-mapped. However I/O Space is

 * accessed through a Window which is translated to low 64KB in PCI space, the

 * first 4KB is not used so 60KB is available.

 Assign devices with resources */

 Only set up the requested stuff */

 SPDX-License-Identifier: GPL-2.0

/*  arch/sparc64/kernel/process.c

 *

 *  Copyright (C) 1995, 1996, 2008 David S. Miller (davem@davemloft.net)

 *  Copyright (C) 1996       Eddie C. Dost   (ecd@skynet.be)

 *  Copyright (C) 1997, 1998 Jakub Jelinek   (jj@sunsite.mff.cuni.cz)

/*

 * This file handles the architecture-dependent parts of process handling..

 Idle loop support on sparc64. */

                /* The sun4v sleeping code requires that we have PSTATE.IE cleared over

                 * the cpu sleep hypervisor call.

			/* If resumed by cpu_poke then we need to explicitly

			 * call scheduler_ipi().

 Re-enable interrupts. */

/* In order to avoid hangs we do not try to synchronize with the

 * global register dump client cpus.  The last store they make is to

 * the thread pointer, so do a short poll waiting for that to become

 * non-NULL.

 Free current thread data structures etc.. */

 Clear FPU register state. */

 It's a bit more tricky when 64-bit tasks are involved... */

	/* Now align the stack as this is mandatory in the Sparc ABI

	 * due to how register windows work.  This hides the

	 * restriction from thread libraries etc.

 Standard stuff. */

/* Copy a Sparc thread.  The fork() return value conventions

 * under SunOS are nothing short of bletcherous:

 * Parent -->  %o0 == childs  pid, %o1 == 0

 * Child  -->  %o0 == parents pid, %o1 == 1

 Calculate offset to stack_frame & pt_regs */

 function */

 Set the return value for the child. */

 Set the second return value for the parent. */

/* TIF_MCDPER in thread info flags for current task is updated lazily upon

 * a context switch. Update this flag in current task's thread flags

 * before dup so the dup'd task will inherit the current TIF_MCDPER flag.

 rd  %mcdper, %g1 */

 SPDX-License-Identifier: GPL-2.0

/* pci_fire.c: Sun4u platform PCI-E controller support.

 *

 * Copyright (C) 2007 David S. Miller (davem@davemloft.net)

 No virtual-dma property on these guys, use largest size.  */

 base */

 size */

 Register addresses. */

	/* We use the main control/status register of FIRE as the write

	 * completion register.

	/*

	 * Invalidate TLB Entries.

 TSB cache snoop enable */	|

 Cache mode */			|

 Bypass enable */		|

 Translation enable */);

 All MSI registers are offset from pbm->pbm_regs */

 Clear the entry.  */

 Go to next entry in ring.  */

 XXX iterate amongst the 4 IRQ controllers XXX */

 CONFIG_PCI_MSI */

 !(CONFIG_PCI_MSI) */

 Based at pbm->controller_regs */

 Based at pbm->pbm_regs */

 XXX register error interrupt handlers XXX */

 SPDX-License-Identifier: GPL-2.0-only

/* chmc.c: Driver for UltraSPARC-III memory controller.

 *

 * Copyright (C) 2001, 2007, 2008 David S. Miller (davem@davemloft.net)

 OBP memory-layout property format. */

	/* One max 8-byte string label per DIMM.  Usually

	 * this matches the label on the motherboard where

	 * that DIMM resides.

	/* If symmetric use map[0], else it is

	 * asymmetric and map[1] should be used.

	/* One max 8-byte string label per DIMM.  Usually

	 * this matches the label on the motherboard where

	 * that DIMM resides.

	/* If symmetric use map[0], else it is

	 * asymmetric and map[1] should be used.

/* Covert syndrome code into the way the bits are positioned

 * on the bus.

/* All this magic has to do with how a cache line comes over the wire

 * on Safari and JBUS.  A 64-bit line comes over in 1 or more quadword

 * cycles, each of which transmit ECC/MTAG info as well as the actual

 * data.

 JBUS */

 Safari */

		/* Multi-bit error, we just dump out all the

		 * dimm labels associated with this dimm group.

 Does BANK decode PHYS_ADDR? */

 Bank must be enabled to match. */

 Would BANK match upper bits? */

 What bits are different? */

 Invert. */

 What bits don't matter for matching? */

 Invert. */

 Would BANK match lower bits? */

 What bits are different? */

 Invert. */

 What bits don't matter for matching? */

 Invert. */

 I always knew you'd be the one. */

 Given PHYS_ADDR, search memory controller banks for a match. */

 This is the main purpose of this driver. */

		/* Multi-bit error, we just dump out all the

		 * dimm labels associated with this bank.

/* Accessing the registers is slightly complicated.  If you want

 * to get at the memory controller which is on the same processor

 * the code is executing, you must use special ASI load/store else

 * you go through the global mapping.

 currently unused */

	/* UK[10] is reserved, and UK[11] is not set for the SDRAM

	 * bank size definition.

 SPDX-License-Identifier: GPL-2.0

/* power.c: Power management driver.

 *

 * Copyright (C) 1999, 2007, 2008 David S. Miller (davem@davemloft.net)

 FIXME: Check registers for status... */

 SPDX-License-Identifier: GPL-2.0

/* pci.c: UltraSparc PCI controller support.

 *

 * Copyright (C) 1997, 1998, 1999 David S. Miller (davem@redhat.com)

 * Copyright (C) 1998, 1999 Eddie C. Dost   (ecd@skynet.be)

 * Copyright (C) 1999 Jakub Jelinek   (jj@ultra.linux.cz)

 *

 * OF tree based PCI bus probing taken from the PowerPC port

 * with minor modifications, see there for credits.

 List of all PCI controllers found in the system. */

 Each PBM found gets a unique index. */

 no outputs */

 no outputs */

 no outputs */

/* The of_device layer has translated all of the assigned-address properties

 * into physical address resources, we only have to figure out the register

 * mapping.

 maybe a lie? */

	/* We can't actually use the firmware value, we have

	 * to read what is in the register right now.  One

	 * reason is that in the case of IDE interfaces the

	 * firmware can sample the value before the the IDE

	 * interface is programmed into native mode.

	/* I have seen IDE devices which will not respond to

	 * the bmdma simplex check reads if bus mastering is

	 * disabled.

 unknown power state */

 a PCI-PCI bridge */

/* Cook up fake bus resources for SUNW,simba PCI bridges which lack

 * a proper 'ranges' property.

 parse bus-range property */

 parse ranges property, or cook one up by hand for Simba */

 PCI #address-cells == 3 and #size-cells == 2 always */

		/* On PCI-Express systems, PCI bridges that have no devices downstream

		 * have a bogus size value where the first 32-bit cell is 0xffffffff.

		 * This results in a bogus range where start + size overflows.

		 *

		 * Just skip these otherwise the kernel will complain when the resource

		 * tries to be claimed.

		/* This is a workaround for some device trees

		 * which list PCI devices twice.  On the V100

		 * for example, device number 3 is listed twice.

		 * Once as "pm" and once again as "lomp".

 create a new pci_dev for this device */

		/* we don't really care if we can create this file or

		 * not, but we need to assign the result of the call

		 * or the world will fall under alien invasion and

		 * everybody will be frozen on a spaceship ready to be

		 * eaten on alpha centauri by some green and jelly

		 * humanoid.

 Only set up the requested stuff */

 Platform support for /proc/bus/pci/X/Y mmap()s. */

/* If the user uses a host-bridge as the PCI device, he may use

 * this to perform a raw mmap() of the I/O or MEM space behind

 * that controller.

 *

 * This can be useful for execution of x86 PCI bios initialization code

 * on a PCI card, like the xfree86 int10 stuff does.

 Make sure the request is in range. */

/* Adjust vm_pgoff of VMA such that it is the physical page offset

 * corresponding to the 32-bit pci bus offset for DEV requested by the user.

 *

 * Basically, the user finds the base address for his device which he wishes

 * to mmap.  They read the 32-bit value from the config space base register,

 * add whatever PAGE_SIZE multiple offset they wish, and feed this into the

 * offset parameter of mmap on /proc/bus/pci/XXX for that device.

 *

 * Returns negative error code on failure, zero on success.

	/* First compute the physical address in vma->vm_pgoff,

	 * making sure the user offset is within range in the

	 * appropriate PCI space.

	/* If this is a mapping on a host bridge, any address

	 * is OK.

	/* Otherwise make sure it's in the range for one of the

	 * device's resources.

 Active? */

 Same type? */

		/* Align the resource end to the next page address.

		 * PAGE_SIZE intentionally added instead of (PAGE_SIZE - 1),

		 * because actually we need the address of the next byte

		 * after rp->end.

/* Set vm_page_prot of VMA, as appropriate for this architecture, for a pci

 * device mapping.

 Our io_remap_pfn_range takes care of this, do nothing.  */

/* Perform the actual remap of the pages for a PCI device mapping, as appropriate

 * for this architecture.  The region in the process to map is described by vm_start

 * and vm_end members of VMA, the base physical address is found in vm_pgoff.

 * The pci device structure is provided so that architectures may make mapping

 * decisions on a per-device or per-bus basis.

 *

 * Returns a negative error code on failure, zero on success.

 Return the domain number for this pci bus */

 !(CONFIG_PCI_MSI) */

/* ALI sound chips generate 31-bits of DMA, a special register

 * determines what bit 31 is emitted as.

	/*

	 * "User" addresses are shown in /sys/devices/pci.../.../resource

	 * and /proc/bus/pci/devices and used as mmap offsets for

	 * /proc/bus/pci/BB/DD.F files (see proc_bus_pci_mmap()).

	 *

	 * On sparc, these are PCI bus addresses, i.e., raw BAR values.

 No special bus mastering setup handling */

	/* Add sriov arch specific initialization here.

	 * Copy dev_archdata from PF to VF

 CONFIG_PCI_IOV */

 Max decimal digits + null in u32 */

 PCI->PCI bridge */

 Host PCI controller */

 SPDX-License-Identifier: GPL-2.0

/* central.c: Central FHC driver for Sunfire/Starfire/Wildfire.

 *

 * Copyright (C) 1997, 1999, 2008 David S. Miller (davem@davemloft.net)

 SPDX-License-Identifier: GPL-2.0

/* psycho_common.c: Code common to PSYCHO and derivative PCI controllers.

 *

 * Copyright (C) 2008 David S. Miller <davem@davemloft.net>

	/* This is __REALLY__ dangerous.  When we put the streaming

	 * buffer into diagnostic mode to probe it's tags and error

	 * status, we _must_ clear all of the line tag valid bits

	 * before re-enabling the streaming buffer.  If any dirty data

	 * lives in the STC when we do this, we will end up

	 * invalidating it before it has a chance to reach main

	 * memory.

 OK, state is logged, exit diagnostic mode. */

 Now clear out the entry. */

		/* It is very possible for another DVMA to occur while

		 * we do this probe, and corrupt the system further.

		 * But we are so screwed at this point that we are

		 * likely to crash hard anyways, so get as much

		 * diagnostic information to the console as we can.

 Clear the errors.  */

 Log 'em.  */

 Leave diag mode enabled for full-flushing done in pci_iommu.c */

 SPDX-License-Identifier: GPL-2.0-only

/* ptrace.c: Sparc process tracing support.

 *

 * Copyright (C) 1996, 2008 David S. Miller (davem@davemloft.net)

 * Copyright (C) 1997 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 *

 * Based upon code written by Ross Biro, Linus Torvalds, Bob Manson,

 * and David Mosberger.

 *

 * Added Linux support -miguel (weird, eh?, the original code was meant

 * to emulate SunOS).

 #define ALLOW_INIT_TRACING */

/*

 * Called by kernel/ptrace.c when detaching..

 *

 * Make sure single step bits etc are not set.

 nothing to do */

/* To get the necessary page struct, access_process_vm() first calls

 * get_user_pages().  This has done a flush_dcache_page() on the

 * accessed page.  Then our caller (copy_{to,from}_user_page()) did

 * to memcpy to read/write the data from that page.

 *

 * Now, the only thing we have to do is:

 * 1) flush the D-cache if it's possible than an illegal alias

 *    has been created

 * 2) flush the I-cache if this is pre-cheetah and we did a write

	/* If bit 13 of the kernel address we used to access the

	 * user page is the same as the virtual address that page

	 * is mapped to in the user's address space, we can skip the

	 * D-cache flush.

 no outputs */

 TSTATE, TPC, TNPC */

 TSTATE */

			/* Only the condition codes and the "in syscall"

			 * state can be modified in the %tstate register.

 TPC, TNPC */

	/* Format is:

	 * 	G0 --> G7

	 *	O0 --> O7

	 *	L0 --> L7

	 *	I0 --> I7

	 *	TSTATE, TPC, TNPC, Y

	/* Format is:

	 *	F0 --> F63

	 *	FSR

	 *	GSR

	 *	FPRS

 TSTATE */

	/* Only the condition codes and the "in syscall"

	 * state can be modified in the %tstate register.

 TPC, TNPC */

 Y */

	/* Format is:

	 *      G1 --> G7

	 *      O0 --> O7

	 *	0

	 *      TSTATE, TPC, TNPC, Y

 PSR */

 PC */

 NPC */

 Y */

 WIM */

 TBR */

	/* Format is:

	 * 	G0 --> G7

	 *	O0 --> O7

	 *	L0 --> L7

	 *	I0 --> I7

	 *	PSR, PC, nPC, Y, WIM, TBR

	/* Format is:

	 *	F0 --> F31

	 *	empty 32-bit word

	 *	FSR (32--bit word)

	 *	FPU QUEUE COUNT (8-bit char)

	 *	FPU QUEUE ENTRYSIZE (8-bit char)

	 *	FPU ENABLED (8-bit char)

	 *	empty 8-bit char

	 *	FPU QUEUE (64 32-bit ints)

 CONFIG_COMPAT */

 CONFIG_COMPAT */

 do the secure computing check first */

/**

 * regs_query_register_offset() - query register offset from its name

 * @name:	the name of a register

 *

 * regs_query_register_offset() returns the offset of a register in struct

 * pt_regs from its name. If the name is invalid, this returns -EINVAL;

/**

 * regs_within_kernel_stack() - check the address in the stack

 * @regs:	pt_regs which contains kernel stack pointer.

 * @addr:	address which is checked.

 *

 * regs_within_kernel_stack() checks @addr is within the kernel stack page(s).

 * If @addr is within the kernel stack, it returns true. If not, returns false.

/**

 * regs_get_kernel_stack_nth() - get Nth entry of the stack

 * @regs:	pt_regs which contains kernel stack pointer.

 * @n:		stack entry number.

 *

 * regs_get_kernel_stack_nth() returns @n th entry of the kernel stack which

 * is specified by @regs. If the @n th entry is NOT in the kernel stack,

 * this returns 0.

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/sparc64/kernel/setup.c

 *

 *  Copyright (C) 1995,1996  David S. Miller (davem@caip.rutgers.edu)

 *  Copyright (C) 1997       Jakub Jelinek (jj@sunsite.mff.cuni.cz)

/* Used to synchronize accesses to NatSemi SUPER I/O chip configure

 * operations in asm/ns87303.h

 orig-x, orig-y */

 unused */

 orig-video-page */

 orig-video-mode */

 orig-video-cols */

 unused, ega_bx, unused */

 orig-video-lines */

 orig-video-isVGA */

 orig-video-points */

 Exported for mm/init.c:paging_init. */

/*

 * Process kernel command line switches that are specific to the

 * SPARC or that require special low-level processing.

 Force UltraSPARC-III P-Cache on. */

 Move to the start of the next "argument". */

 Process any command switches, otherwise skip it. */

 On Ultra, we support all of the v8 capabilities. */

	/* These strings are as they appear in the machine description

	 * 'hwcap-list' property for cpu nodes.

reserved for crypto */,

/* This yields a mask that user programs can use to figure out what

 * instruction set this cpu supports.

 Initialize PROM console and command line. */

 Get boot processor trap_block[] setup.  */

	/*

	 * Once the OF device tree and MDESC have been setup and nr_cpus has

	 * been parsed, we know the list of possible cpus.  Therefore we can

	 * allocate the IRQ stacks.

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Procedures for creating, accessing and interpreting the device tree.

 *

 * Paul Mackerras	August 1996.

 * Copyright (C) 1996-2005 Paul Mackerras.

 * 

 *  Adapted for 64bit PowerPC by Dave Engebretsen and Peter Bergner.

 *    {engebret|bergner}@us.ibm.com 

 *

 *  Adapted for sparc32 by David S. Miller davem@davemloft.net

/* The following routines deal with the black magic of fully naming a

 * node.

 *

 * Certain well known named nodes are just the simple name string.

 *

 * Actual devices have an address specifier appended to the base name

 * string, like this "foo@addr".  The "addr" can be in any number of

 * formats, and the platform plus the type of the node determine the

 * format and how it is constructed.

 *

 * For children of the ROOT node, the naming convention is fixed and

 * determined by whether this is a sun4u or sun4v system.

 *

 * For children of other nodes, it is bus type specific.  So

 * we walk up the tree until we discover a "device_type" property

 * we recognize and we go from there.

 "name@slot,offset"  */

 "name@devnum[,func]" */

 "name@addrhi,addrlo" */

 "name@irq,addrlo" */

	/* In order to get a unique ID in the device tree (multiple AMBA devices

	 * may have the same name) the node number is printed

 Not all cores have Interrupt */

 IRQ0 does not exist */

 "isa" is handled with platform naming */

 Use platform naming convention.  */

 SPDX-License-Identifier: GPL-2.0

/*

 * pcic.c: MicroSPARC-IIep PCI controller support

 *

 * Copyright (C) 1998 V. Roganov and G. Raiko

 *

 * Code is derived from Ultra/PCI PSYCHO controller support, see that

 * for author info.

 *

 * Support for diverse IIep based platforms by Pete Zaitcev.

 * CP-1200 by Eric Brower.

 for cache flushing. */

/*

 * I studied different documents and many live PROMs both from 2.30

 * family and 3.xx versions. I came to the amazing conclusion: there is

 * absolutely no way to route interrupts in IIep systems relying on

 * information which PROM presents. We must hardcode interrupt routing

 * schematics. And this actually sucks.   -- zaitcev 1999/05/12

 *

 * To find irq for a device we determine which routing map

 * is in effect or, in other words, on which machine we are running.

 * We use PROM name for this although other techniques may be used

 * in special cases (Gleb reports a PROMless IIep based system).

 * Once we know the map we take device configuration address and

 * find PCIC pin number where INT line goes. Then we may either program

 * preferred irq into the PCIC or supply the preexisting irq to the device.

 PCI bus number */

 Configuration address */

 PCIC external interrupt pin */

 Preferred IRQ (mappable in PCIC) */

 Enforce preferred IRQ */

/*

 * JavaEngine-1 apparently has different versions.

 *

 * According to communications with Sun folks, for P2 build 501-4628-03:

 * pin 0 - parallel, audio;

 * pin 1 - Ethernet;

 * pin 2 - su;

 * pin 3 - PS/2 kbd and mouse.

 *

 * OEM manual (805-1486):

 * pin 0: Ethernet

 * pin 1: All EBus

 * pin 2: IGA (unused)

 * pin 3: Not connected

 * OEM manual says that 501-4628 & 501-4811 are the same thing,

 * only the latter has NAND flash in place.

 *

 * So far unofficial Sun wins over the OEM manual. Poor OEMs...

 501-4811-03 */

 EBus: hogs all */

 Happy Meal */

 IGA (unused) */

 XXX JS-E entry is incomplete - PCI Slot 2 address (pin 7)? */

 Ebus - serial and keyboard */

 hme */

 VGA - we hope not used :) */

 PCI INTA# in Slot 1 */

 PCI INTA# in Slot 2, shared w. RTC */

 All ISA devices. Read 8259. */

 EIDE */

 {0,0x88, 0,0,0} - unknown device... PMU? Probably no interrupt. */

 USB */

	/*

	 * Some pins belong to non-PCI devices, we hardcode them in drivers.

	 * sun4m timers - irq 10, 14

	 * PC style RTC - pin 7, irq 4 ?

	 * Smart card, Parallel - pin 4 shared with USB, ISA

	 * audio - pin 3, irq 5 ?

/* SPARCengine-6 was the original release name of CP1200.

 * The documentation differs between the two versions

 SCSI	*/

 HME	*/

 EBus	*/

/*

 * Krups (courtesy of Varol Kaptan)

 * No documentation available, but it was easy to guess

 * because it was very similar to Espresso.

 *  

 * pin 0 - kbd, mouse, serial;

 * pin 1 - Ethernet;

 * pin 2 - igs (we do not use it);

 * pin 3 - audio;

 * pin 4,5,6 - unused;

 * pin 7 - RTC (from P2 onwards as David B. says).

 Ebus - serial and keyboard */

 hme */

/*

 * Several entries in this list may point to the same routing map

 * as several PROMs may be installed on the same physical board.

 JE1, PROM 2.32 */

 PROLL JavaStation-E */

 SPARCengine-6/CP-1200 */

 PROLL JavaStation-NC */

 OBP JavaStation-NC */

/*

 * Only one PCIC per IIep,

 * and since we have no SMP IIep, only one per system.

 forward */

 does not fail here */

 does not fail here */

/*

 * On sparc64 pcibios_init() calls pci_controller_probe().

 * We want PCIC probed little ahead so that interrupt controller

 * would be operational.

	/*

	 * Map in PCIC register set, config space, and IO base

	/*

	 * Docs say three least significant bits in address and data

	 * must be the same. Thus, we need adjust size of data.

		/*

		 * We do not panic here for the sake of embedded systems.

 deadwood transplanted from sparc64 */

/*

 * Main entry point from the PCI subsystem.

	/*

	 * PCIC should be initialized at start of the timer.

	 * So, here we report the presence of PCIC and do some magic passes.

	/*

	 *      Switch off IOTLB translation.

	/*

	 *      Increase mapped size for PCI memory space (DMA access).

	 *      Should be done in that order (size first, address second).

	 *      Why we couldn't set up 4GB and forget about it? XXX

 are sequential */

				/*

				 * A device responds to I/O cycles on PCI.

				 * We generate these cycles with memory

				 * access into the fixed map (phys 0x30000000).

				 *

				 * Since a device driver does not want to

				 * do ioremap() before accessing PC-style I/O,

				 * we supply virtual, ready to access address.

				 *

				 * Note that request_region()

				 * works for these devices.

				 *

				 * XXX Neat trick, but it's a *bad* idea

				 * to shit into regions like that.

				 * What if we want to allocate one more

				 * PCI base address...

 XXX */

				/*

				 * OOPS... PCI Spec allows this. Sun does

				 * not have any devices getting above 64K

				 * so it must be user with a weird I/O

				 * board in a PCI slot. We must remap it

				 * under 64K but it is not done yet. XXX

 Corrupted map */

 P3 */ 
	/* real_irq means PROM did not bother to program the upper

	 * half of PCIC. This happens on JS-E with PROM 3.11, for instance.

 Corrupted map */

/*

 * Normally called from {do_}pci_scan_bus...

 struct linux_pbm_info* pbm = &pcic->pbm; */

	/*

	 * Next crud is an equivalent of pbm = pcic_bus_to_pbm(bus);

 cookies */

 fixing I/O to look like memory */

 Only set up the requested stuff */

 Makes compiler happy */

 CPU frequency is 100 MHz, timer increments every 4 CPU clocks */

	/*

	 * We divide all by HZ

	 * to have microsecond resolution and to avoid overflow

 Coordinate with the sparc_config.clock_rate setting */

	/*

	 * The clock_rate is in SBUS dimension.

	 * We take into account this in pcic_cycles_offset()

 PROM should set appropriate irq */

/*

 * NMI

		/*

		 * XXX On CP-1200 PCI #SERR may happen, we do not know

		 * what to do about it yet.

 SPDX-License-Identifier: GPL-2.0

/* Performance event support for sparc64.

 *

 * Copyright (C) 2009, 2010 David S. Miller <davem@davemloft.net>

 *

 * This code is based almost entirely upon the x86 perf event

 * code, which is:

 *

 *  Copyright (C) 2008 Thomas Gleixner <tglx@linutronix.de>

 *  Copyright (C) 2008-2009 Red Hat, Inc., Ingo Molnar

 *  Copyright (C) 2009 Jaswinder Singh Rajput

 *  Copyright (C) 2009 Advanced Micro Devices, Inc., Robert Richter

 *  Copyright (C) 2008-2009 Red Hat, Inc., Peter Zijlstra

/* Two classes of sparc64 chips currently exist.  All of which have

 * 32-bit counters which can generate overflow interrupts on the

 * transition from 0xffffffff to 0.

 *

 * All chips upto and including SPARC-T3 have two performance

 * counters.  The two 32-bit counters are accessed in one go using a

 * single 64-bit register.

 *

 * On these older chips both counters are controlled using a single

 * control register.  The only way to stop all sampling is to clear

 * all of the context (user, supervisor, hypervisor) sampling enable

 * bits.  But these bits apply to both counters, thus the two counters

 * can't be enabled/disabled individually.

 *

 * Furthermore, the control register on these older chips have two

 * event fields, one for each of the two counters.  It's thus nearly

 * impossible to have one counter going while keeping the other one

 * stopped.  Therefore it is possible to get overflow interrupts for

 * counters not currently "in use" and that condition must be checked

 * in the overflow interrupt handler.

 *

 * So we use a hack, in that we program inactive counters with the

 * "sw_count0" and "sw_count1" events.  These count how many times

 * the instruction "sethi %hi(0xfc000), %g0" is executed.  It's an

 * unusual way to encode a NOP and therefore will not trigger in

 * normal code.

 *

 * Starting with SPARC-T4 we have one control register per counter.

 * And the counters are stored in individual registers.  The registers

 * for the counters are 64-bit but only a 32-bit counter is

 * implemented.  The event selections on SPARC-T4 lack any

 * restrictions, therefore we can elide all of the complicated

 * conflict resolution code we have for SPARC-T3 and earlier chips.

	/* Number of events currently scheduled onto this cpu.

	 * This tells how many entries in the arrays below

	 * are valid.

	/* Number of new events added since the last hw_perf_disable().

	 * This works because the perf event layer always adds new

	 * events inside of a perf_{disable,enable}() sequence.

 Array of events current scheduled on this cpu.  */

	/* Array of encoded longs, specifying the %pcr register

	 * encoding and the mask of PIC counters this even can

	 * be scheduled on.  See perf_event_encode() et al.

	/* The current counter index assigned to an event.  When the

	 * event hasn't been programmed into the cpu yet, this will

	 * hold PIC_NO_INDEX.  The event->hw.idx value tells us where

	 * we ought to schedule the event.

 Software copy of %pcr register(s) on this cpu.  */

 Enabled/disable state.  */

/* An event map describes the characteristics of a performance

 * counter event.  In particular it gives the encoding as well as

 * a mask telling which counters the event can be measured on.

 *

 * The mask is unused on SPARC-T4 and later.

 Encode a perf_event_map entry into a long.  */

/* Niagara1 is very limited.  The upper PIC is hard-locked to count

 * only instructions, so it is free running which creates all kinds of

 * problems.  Some hardware designs make one wonder if the creator

 * even looked at how this stuff gets used by software.

 ensure ov and ntc are reset */

	/* We explicitly don't support hypervisor tracing.  The T4

	 * generates the overflow event for precise events via a trap

	 * which will not be generated (ie. it's completely lost) if

	 * we happen to be in the hypervisor when the event triggers.

	 * Essentially, the overflow event reporting is completely

	 * unusable when you have hypervisor mode tracing enabled.

 We explicitly don't support hypervisor tracing. */

 The period may have been changed by PERF_EVENT_IOC_PERIOD */

/* On this PMU all PICs are programmed using a single PCR.  Calculate

 * the combined control register value.

 *

 * For such chips we require that all of the events have the same

 * configuration, so just fetch the settings from the first entry.

 Assign to counters all unassigned events.  */

 On this PMU each PIC has it's own PCR control register.  */

/* If performance event entries have been added, move existing events

 * around (if necessary) and then assign new entries to counters.

			/* Absorb the final count and turn off the

			 * event.

			/* Shift remaining entries down into

			 * the existing slot.

/* Make sure all events can be scheduled into the hardware at

 * the same time.  This is simplified by the fact that we only

 * need to support 2 simultaneous HW events.

 *

 * As a side effect, the evts[]->hw.idx values will be assigned

 * on success.  These are pending indexes.  When the events are

 * actually programmed into the chip, these values will propagate

 * to the per-cpu cpuc->current_idx[] slots, see the code in

 * maybe_change_configuration() for details.

	/* This case is possible when we are invoked from

	 * hw_perf_group_sched_in().

 If both events can go on any counter, OK.  */

	/* If one event is limited to a specific counter,

	 * and the other can go on both, OK.

 If the events are fixed to different counters, OK.  */

 Otherwise, there is a conflict.  */

	/*

	 * If group events scheduling transaction was started,

	 * skip the schedulability test here, it will be performed

	 * at commit time(->commit_txn) as a whole

 does not support taken branch sampling */

		/*

		 * User gives us "(encoding << 16) | pic_mask" for

		 * PERF_TYPE_RAW events.

 We save the enable bits in the config_base.  */

	/* Try to do all error checking before this point, as unwinding

	 * state after grabbing the PMC is difficult.

/*

 * Start group events scheduling transaction

 * Set the flag to make pmu::enable() not perform the

 * schedulability test, it will be performed at commit time

 txn already in flight */

/*

 * Stop group events scheduling transaction

 * Clear the flag and pmu::enable() will perform the

 * schedulability test.

 no txn in flight */

/*

 * Commit group events scheduling transaction

 * Perform the group schedulability test as a whole

 * Return 0 if success

 no txn in flight */

	/* If the PMU has the TOE IRQ enable bits, we need to do a

	 * dummy write to the %pcr to clear the overflow bits and thus

	 * the interrupt.

	 *

	 * Do this before we peek at the counters to determine

	 * overflow so we don't lose any events.

 addresses should be at least 4-byte aligned */

 SPDX-License-Identifier: GPL-2.0

/* pmc - Driver implementation for power management functions

 * of Power Management Controller (PMC) on SPARCstation-Voyager.

 *

 * Copyright (c) 2002 Eric Brower (ebrower@usa.net)

/* Debug

 *

 * #define PMC_DEBUG_LED

 * #define PMC_NO_IDLE

/*

 * CPU idle callback function

 * See .../arch/sparc/kernel/process.c

 Assign power management IDLE handler */

/* This driver is not critical to the boot process

 * and is easiest to ioremap when SBus is already

 * initialized, so we install ourselves thusly:

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2009 Daniel Hellstrom (daniel@gaisler.com) Aeroflex Gaisler AB

 * Copyright (C) 2009 Konrad Eisele (konrad@gaisler.com) Aeroflex Gaisler AB

 interrupt controller base address */

 timer controller base address */

 Timer Index (0..6) within Timer Core */

 For clearing pending bit */

 interrupt controller irq number */

/* Return the last ACKed IRQ by the Extended IRQ controller. It has already

 * been (automatically) ACKed when the CPU takes the trap.

 Handle one or multiple IRQs from the extended interrupt controller */

 bit4 tells if IRQ happened */

 The extended IRQ controller has been found, this function registers it */

	/*

	 * Unmask the Extended IRQ, the IRQs routed through the Ext-IRQ

	 * controller have a mask-bit of their own, so this is safe.

 unmask on old CPU first before enabling on the selected CPU */

 Used by external level sensitive IRQ handlers on the LEON: ACK IRQ ctrl */

/*

 * Build a LEON IRQ for the edge triggered LEON IRQ controller:

 *  Edge (normal) IRQ           - handle_simple_irq, ack=DON'T-CARE, never ack

 *  Level IRQ (PCI|Level-GPIO)  - handle_fasteoi_irq, ack=1, ack after ISR

 *  Per-CPU Edge                - handle_percpu_irq, ack=0

 smp clockevent irq */

 CONFIG_SMP */

 Find System ID: GRLIB build ID and optional CHIP ID */

 Find IRQMP IRQ Controller Registers base adr otherwise bail out */

 Find GPTIMER Timer Registers base address otherwise bail out. */

			/* Skip this instance, resource already

 Select Timer-Instance on Timer Core. Default is zero */

	/*

	 * The IRQ controller may (if implemented) consist of multiple

	 * IRQ controllers, each mapped on a 4Kb boundary.

	 * Each CPU may be routed to different IRQCTRLs, however

	 * we assume that all CPUs (in SMP system) is routed to the

	 * same IRQ Controller, and for non-SMP only one IRQCTRL is

	 * accessed anyway.

	 * In AMP systems, Linux must run on CPU0 for the time being.

 Mask all IRQs on boot-cpu IRQ controller */

 Probe extended IRQ controller */

		/*

		 * In SMP, sun4m adds a IPI handler to IRQ trap handler that

		 * LEON never must take, sun4d and LEON overwrites the branch

		 * with a NOP.

 NOP out the branch */

 Install per-cpu IRQ handler for broadcasted ticker */

 SPDX-License-Identifier: GPL-2.0

/*  arch/sparc64/kernel/signal32.c

 *

 *  Copyright (C) 1991, 1992  Linus Torvalds

 *  Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 *  Copyright (C) 1996 Miguel de Icaza (miguel@nuclecu.unam.mx)

 *  Copyright (C) 1997 Eddie C. Dost   (ecd@skynet.be)

 *  Copyright (C) 1997,1998 Jakub Jelinek   (jj@sunsite.mff.cuni.cz)

/* This magic should be in g_upper[0] for all upper parts

 * to be valid.

 __siginfo_fpu_t * */ u32 fpu_save;

 Should be sizeof(siginfo_extra_v8plus_t) */

 Only valid if (info.si_regs.psr & (PSR_VERS|PSR_IMPL)) == PSR_V8PLUS */

 __siginfo_rwin_t * */u32 rwin_save;

 __siginfo_fpu_t * */ u32 fpu_save;

 Should be sizeof(siginfo_extra_v8plus_t) */

 Only valid if (regs.psr & (PSR_VERS|PSR_IMPL)) == PSR_V8PLUS */

 __siginfo_rwin_t * */u32 rwin_save;

/* Checks if the fp is valid.  We always build signal frames which are

 * 16-byte aligned, therefore we can always enforce that the restore

 * frame has that property as well.

 Always make any pending restarted system calls return -EINTR */

 1. Make sure we are not getting garbage from the user */

 2. Restore the state */

 User can only change condition codes in %tstate. */

 Prevent syscall restart.  */

 Always make any pending restarted system calls return -EINTR */

 1. Make sure we are not getting garbage from the user */

 2. Restore the state */

 User can only change condition codes in %tstate. */

 Prevent syscall restart.  */

	/*

	 * If we are on the alternate signal stack and would overflow it, don't.

	 * Return an always-bogus address instead so we will die with SIGSEGV.

 This is the X/Open sanctioned signal stack switching.  */

	/* Always align the stack frame.  This handles two cases.  First,

	 * sigaltstack need not be mindful of platform specific stack

	 * alignment.  Second, if we took this signal because the stack

	 * is not aligned properly, we'd like to take the signal cleanly

	 * and report that.

/* The I-cache flush instruction only works in the primary ASI, which

 * right now is the nucleus, aka. kernel space.

 *

 * Therefore we have to kick the instructions out using the kernel

 * side linear mapping of the physical address backing the user

 * instructions.

 Commit all stores of the instructions we are about to flush.  */

	/* Disable cross-call reception.  In this way even a very wide

	 * munmap() on another cpu can't tear down the page table

	 * hierarchy from underneath us, since that can't complete

	 * until the IPI tlb flush returns.

 no outputs */

 1. Make sure everything is clean */

 2. Save the current process state */

 If these change we need to know - assignments to seta relies on these sizes */

 3. signal handler back-trampoline and parameters */

 4. signal handler */

 5. return to kernel instructions */

mov __NR_sigreturn, %g1*/

t 0x10*/

 1. Make sure everything is clean */

 2. Save the current process state */

 Update the siginfo structure.  */

 Setup sigaltstack */

 3. signal handler back-trampoline and parameters */

 4. signal handler */

 5. return to kernel instructions */

 mov __NR_rt_sigreturn, %g1 */

 t 0x10 */

/* Note that 'init' is a special process: it doesn't get signals it doesn't

 * want to handle. Thus you cannot kill init even with a SIGKILL even by

 * mistake.

 replay the system call when we are done */

 First see if old state is wanted. */

 Now see if we want to update the new state. */

		/* If the current stack was set with sigaltstack, don't

		 * swap stacks while we are on it.

		/* Since we don't know the extent of the stack, and we don't

		 * track onstack-ness, but rather calculate it, we must

		 * presume a size.  Ho hum this interface is lossy.

/*

 * Compile-time assertions for siginfo_t offsets. Check NSIG* as well, as

 * changes likely come with new fields that should be added below.

 SPDX-License-Identifier: GPL-2.0

/* hvapi.c: Hypervisor API management.

 *

 * Copyright (C) 2007 David S. Miller <davem@davemloft.net>

/* If the hypervisor indicates that the API setting

 * calls are unsupported, by returning HV_EBADTRAP or

 * HV_ENOTSUPPORTED, we assume that API groups with the

 * PRE_API flag set are major 1 minor 0.

/* Register a hypervisor API specification.  It indicates the

 * API group and desired major+minor.

 *

 * If an existing API registration exists '0' (success) will

 * be returned if it is compatible with the one being registered.

 * Otherwise a negative error code will be returned.

 *

 * Otherwise an attempt will be made to negotiate the requested

 * API group/major/minor with the hypervisor, and errors returned

 * if that does not succeed.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Procedures for creating, accessing and interpreting the device tree.

 *

 * Paul Mackerras	August 1996.

 * Copyright (C) 1996-2005 Paul Mackerras.

 * 

 *  Adapted for 64bit PowerPC by Dave Engebretsen and Peter Bergner.

 *    {engebret|bergner}@us.ibm.com 

 *

 *  Adapted for sparc64 by David S. Miller davem@davemloft.net

/* The following routines deal with the black magic of fully naming a

 * node.

 *

 * Certain well known named nodes are just the simple name string.

 *

 * Actual devices have an address specifier appended to the base name

 * string, like this "foo@addr".  The "addr" can be in any number of

 * formats, and the platform plus the type of the node determine the

 * format and how it is constructed.

 *

 * For children of the ROOT node, the naming convention is fixed and

 * determined by whether this is a sun4u or sun4v system.

 *

 * For children of other nodes, it is bus type specific.  So

 * we walk up the tree until we discover a "device_type" property

 * we recognize and we go from there.

 *

 * As an example, the boot device on my workstation has a full path:

 *

 *	/pci@1e,600000/ide@d/disk@0,0:c

 "name@slot,offset"  */

 "name@devnum[,func]" */

 "name@UPA_PORTID,offset" */

 "name@reg" */

 "name@addrhi,addrlo" */

 "name@bus,addr" */

	/* This actually isn't right... should look at the #address-cells

	 * property of the i2c bus node etc. etc.

 "name@reg0[,reg1]" */

 "name@reg0reg1[,reg2reg3]" */

 "isa" is handled with platform naming */

 Use platform naming convention.  */

	/* On hypervisor based platforms we interrogate the 'reg'

	 * property.  On everything else we look for a 'upa-portid',

	 * 'portid', or 'cpuid' property.

			/* On sparc64, the cpu thread information is obtained

			 * either from OBP or the machine description.  We've

			 * actually probed this information already long before

			 * this interface gets called so instead of interrogating

			 * both the OF node and the MDESC again, just use what

			 * we discovered already.

	/* On uniprocessor we only want the values for the

	 * real physical cpu the kernel booted onto, however

	 * cpu_data() only has one entry at index 0.

 SPDX-License-Identifier: GPL-2.0

/* sstate.c: System soft state support.

 *

 * Copyright (C) 2007, 2008 David S. Miller <davem@davemloft.net>

 SPDX-License-Identifier: GPL-2.0

/* cpumap.c: used for optimizing CPU assignment

 *

 * Copyright (C) 2009 Hong H. Pham <hong.pham@windriver.com>

 Increment rover every time level is visited */

 Increment parent's rover every time rover wraps around */

 Number of CPUs in this hierarchy */

 Array index of the first child node */

 Array index of the last child node */

 Child node iterator */

 Index of first node of a level in a cpuinfo tree */

 Index of last node of a level in a cpuinfo tree */

 Number of nodes in a level in a cpuinfo tree */

 Offsets into nodes[] for each level of the tree */

 Niagara optimized cpuinfo tree traversal. */

	/* Strands (or virtual CPUs) within a core may not run concurrently

	 * on the Niagara, as instruction pipeline(s) are shared.  Distribute

	 * work to strands in different cores first for better concurrency.

	 * Go to next NUMA node when all cores are used.

	/* Strands are grouped together by proc_id in cpuinfo_sparc, i.e.

	 * a proc_id represents an instruction pipeline.  Distribute work to

	 * strands in different proc_id groups if the core has multiple

	 * instruction pipelines (e.g. the Niagara 2/2+ has two).

 Pick the next strand in the proc_id group. */

/* Generic cpuinfo tree traversal.  Distribute work round robin across NUMA

 * nodes.

/*

 * Enumerate the CPU information in __cpu_data to determine the start index,

 * end index, and number of nodes for each level in the cpuinfo tree.  The

 * total number of cpuinfo nodes required to build the tree is returned.

 Include the root node */

/* Build a tree representation of the CPU hierarchy using the per CPU

 * information in __cpu_data.  Entries in __cpu_data[0..NR_CPUS] are

 * assumed to be sorted in ascending order based on node, core_id, and

 * proc_id (in order of significance).

 Initialize all levels in the tree with the first CPU */

 Connect tree node to parent */

 Initialize the next node in the same level */

 Connect node to child */

 If parent's rover does not need to be adjusted, stop here. */

	/* Build CPU distribution map that spans all online CPUs.  No need

	 * to check if the CPU is online, as that is done when the cpuinfo

	 * tree is being built.

/* Fallback if the cpuinfo tree could not be built.  CPU mapping is linear

 * round robin.

 Impossible, since num_online_cpus() <= num_possible_cpus() */

 SPDX-License-Identifier: GPL-2.0

/*

 * unaligned.c: Unaligned load/store trap handling with special

 *              cases for the kernel to do them more quickly.

 *

 * Copyright (C) 1996,2008 David S. Miller (davem@davemloft.net)

 * Copyright (C) 1996,1997 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 ld, ldd, ldh, ldsh */

 st, std, sth, stsh */

 Swap, ldstub, cas, ... */

 swap* */

 16 = double-word, 8 = extra-word, 4 = word, 2 = half-word */

 ldx/stx */

 ldd/std - Although it is actually 8 */

		/* GCC should never warn that control reaches the end

		 * of this function without returning a value because

		 * die_if_kernel() is marked with attribute 'noreturn'.

		 * Alas, some versions do...

 %asi */

 imm_asi */

 0x400000 = signed, 0 = unsigned */

 This is just to make gcc think die_if_kernel does return... */

 Not reached */

	/* If this is a {get,put}_user() on an unaligned userspace pointer,

	 * just signal a fault and do not log the event.

 Not reached... */

 STQ */

 invalid_fp_register */;

 Need to convert endians */

 LDF, LDDF, LDQF */

 NF */)) {

 Little */ {

 Little */

 SPDX-License-Identifier: GPL-2.0

/*

 * sun4m irq support

 *

 *  djhr: Hacked out of irq.c into a CPU dependent version.

 *

 *  Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 *  Copyright (C) 1995 Miguel de Icaza (miguel@nuclecu.unam.mx)

 *  Copyright (C) 1995 Pete A. Zaitcev (zaitcev@yahoo.com)

 *  Copyright (C) 1996 Dave Redman (djhr@tadpole.co.uk)

/* Sample sun4m IRQ layout:

 *

 * 0x22 - Power

 * 0x24 - ESP SCSI

 * 0x26 - Lance ethernet

 * 0x2b - Floppy

 * 0x2c - Zilog uart

 * 0x32 - SBUS level 0

 * 0x33 - Parallel port, SBUS level 1

 * 0x35 - SBUS level 2

 * 0x37 - SBUS level 3

 * 0x39 - Audio, Graphics card, SBUS level 4

 * 0x3b - SBUS level 5

 * 0x3d - SBUS level 6

 *

 * Each interrupt source has a mask bit in the interrupt registers.

 * When the mask bit is set, this blocks interrupt deliver.  So you

 * clear the bit to enable the interrupt.

 *

 * Interrupts numbered less than 0x10 are software triggered interrupts

 * and unused by Linux.

 *

 * Interrupt level assignment on sun4m:

 *

 *	level		source

 * ------------------------------------------------------------

 *	  1		softint-1

 *	  2		softint-2, VME/SBUS level 1

 *	  3		softint-3, VME/SBUS level 2

 *	  4		softint-4, onboard SCSI

 *	  5		softint-5, VME/SBUS level 3

 *	  6		softint-6, onboard ETHERNET

 *	  7		softint-7, VME/SBUS level 4

 *	  8		softint-8, onboard VIDEO

 *	  9		softint-9, VME/SBUS level 5, Module Interrupt

 *	 10		softint-10, system counter/timer

 *	 11		softint-11, VME/SBUS level 6, Floppy

 *	 12		softint-12, Keyboard/Mouse, Serial

 *	 13		softint-13, VME/SBUS level 7, ISDN Audio

 *	 14		softint-14, per-processor counter/timer

 *	 15		softint-15, Asynchronous Errors (broadcast)

 *

 * Each interrupt source is masked distinctly in the sun4m interrupt

 * registers.  The PIL level alone is therefore ambiguous, since multiple

 * interrupt sources map to a single PIL.

 *

 * This ambiguity is resolved in the 'intr' property for device nodes

 * in the OF device tree.  Each 'intr' property entry is composed of

 * two 32-bit words.  The first word is the IRQ priority value, which

 * is what we're intersted in.  The second word is the IRQ vector, which

 * is unused.

 *

 * The low 4 bits of the IRQ priority indicate the PIL, and the upper

 * 4 bits indicate onboard vs. SBUS leveled vs. VME leveled.  0x20

 * means onboard, 0x30 means SBUS leveled, and 0x40 means VME leveled.

 *

 * For example, an 'intr' IRQ priority value of 0x24 is onboard SCSI

 * whereas a value of 0x33 is SBUS level 2.  Here are some sample

 * 'intr' property IRQ priority values from ss4, ss5, ss10, ss20, and

 * Tadpole S3 GX systems.

 *

 * esp:		0x24	onboard ESP SCSI

 * le:		0x26	onboard Lance ETHERNET

 * p9100:	0x32	SBUS level 1 P9100 video

 * bpp:		0x33	SBUS level 2 BPP parallel port device

 * DBRI:	0x39	SBUS level 5 DBRI ISDN audio

 * SUNW,leo:	0x39	SBUS level 5 LEO video

 * pcmcia:	0x3b	SBUS level 6 PCMCIA controller

 * uctrl:	0x3b	SBUS level 6 UCTRL device

 * modem:	0x3d	SBUS level 7 MODEM

 * zs:		0x2c	onboard keyboard/mouse/serial

 * floppy:	0x2b	onboard Floppy

 * power:	0x22	onboard power device (XXX unknown mask bit XXX)

 Code in entry.S needs to get at these register mappings.  */

/* Dave Redman (djhr@tadpole.co.uk)

 * The sun4m interrupt registers.

 mask all interrupts */

 module error */

 write buffer error */

 ecc memory error */

 vme async error */

 floppy disk */

 module interrupt */

 onboard video */

 system timer */

 onboard scsi */

 audio/isdn */

 onboard ethernet */

 serial ports */

 keyboard/mouse */

 sbus int bits */

 vme int bits */

 Interrupt levels used by OBP */

 0x00 - SMP */

 0x10 - soft */

 0x20 - onboard */

 0x30 - sbus */

 0x40 - vme */

 XXX HyperSparc hack XXX */

 Every per-cpu timer works in timer mode */

 2 seconds */

 1/HZ sec  */

		/* For SMP we use the level 14 ticker, however the bootup code

		 * has copied the firmware's level 14 vector into the boot cpu's

		 * trap table, we must fix this now or we get squashed.

 Cannot enable interrupts until OBP ticker is disabled. */

 SPDX-License-Identifier: GPL-2.0

/*

 * leon_pci_grpci2.c: GRPCI2 Host PCI driver

 *

 * Copyright (C) 2011 Aeroflex Gaisler AB, Daniel Hellstrom

 *

 PCI Space Address */

 PCI Base address mapped to this AHB addr */

/* Device Node Configuration options:

 *  - barcfgs    : Custom Configuration of Host's 6 target BARs

 *  - irq_mask   : Limit which PCI interrupts are enabled

 *  - do_reset   : Force PCI Reset on startup

 *

 * barcfgs

 * =======

 *

 * Optional custom Target BAR configuration (see struct grpci2_barcfg). All

 * addresses are physical. Array always contains 6 elements (len=2*4*6 bytes)

 *

 * -1 means not configured (let host driver do default setup).

 *

 * [i*2+0] = PCI Address of BAR[i] on target interface

 * [i*2+1] = Accessing PCI address of BAR[i] result in this AMBA address

 *

 *

 * irq_mask

 * ========

 *

 * Limit which PCI interrupts are enabled. 0=Disable, 1=Enable. By default

 * all are enabled. Use this when PCI interrupt pins are floating on PCB.

 * int, len=4.

 *  bit0 = PCI INTA#

 *  bit1 = PCI INTB#

 *  bit2 = PCI INTC#

 *  bit3 = PCI INTD#

 *

 *

 * reset

 * =====

 *

 * Force PCI reset on startup. int, len=4

 Enable Debugging Configuration Space Access */

/*

 * GRPCI2 APB Register MAP

 0x00 Control */

 0x04 Status / Capabilities */

 0x08 */

 0x0C I/O Map address */

 0x10 DMA */

 0x14 DMA */

 0x18 */

 0x20 read-only PCI BARs */

 0x38 */

 0x40 AHB->PCI Map per AHB Master */

 PCI Trace Buffer Registers (OPTIONAL) */

 0x80 */

 0x84 */

 0x88 */

 0x8C */

 0x90 */

 0x94 */

 0x98 */

 0x9C */

 0x00 DMA Control */

 0x04 Next DMA Channel Address */

 0x08 Next Data Descriptor in chan */

 0x0C Reserved */

 0x00 DMA Data Control */

 0x04 PCI Start Address */

 0x08 AHB Start address */

 0x0C Next Data Descriptor in chan */

 GRPCI2 Capability */

 must be on top of this structure */

 IRQ Mode from CAPSTS REG */

 PCI ID of Host */

 Virtual IRQ numbers */

 AHB PCI Windows */

 MEMORY */

 I/O */

 CONFIGURATION */

 Use default IRQ decoding on PCI BUS0 according slot numbering */

 start at AD16=Device0 */

 special case: bridge controller itself */

 Select bus */

 clear old status */

	/* Wait until GRPCI2 signals that CFG access is done, it should be

	 * done instantaneously unless a DMA operation is ongoing...

 Bus always little endian (unaffected by byte-swapping) */

 start at AD16=Device0 */

 special case: bridge controller itself */

 Select bus */

 clear old status */

	/* Wait until GRPCI2 signals that CFG access is done, it should be

	 * done instantaneously unless a DMA operation is ongoing...

/* Read from Configuration Space. When entering here the PCI layer has taken

 * the pci_lock spinlock and IRQ is off.

/* Write to Configuration Space. When entering here the PCI layer has taken

 * the pci_lock spinlock and IRQ is off.

/* GENIRQ IRQ chip implementation for GRPCI2 irqmode=0..2. In configuration

 * 3 where all PCI Interrupts has a separate IRQ on the system IRQ controller

 * this is not needed and the standard IRQ controller can be used.

 only mask PCI interrupts here */

 only unmask PCI interrupts here */

 Handle one or multiple IRQs from the PCI core */

 Error Interrupt? */

 PCI Interrupt? */

 Call respective PCI Interrupt handler */

	/*

	 * Decode DMA Interrupt only when shared with Err and PCI INTX#, when

	 * the DMA is a unique IRQ the DMA interrupts doesn't end up here, they

	 * goes directly to DMA ISR.

	/*

	 * Call "first level" IRQ chip end-of-irq handler. It will ACK LEON IRQ

	 * Controller, this must be done after IRQ sources have been handled to

	 * avoid double IRQ generation

 Create a virtual IRQ */

 Reset any earlier setup */

 Wait for boards to settle */

 Clear Status */

 Translate I/O accesses to 0, I/O Space always @ PCI low 64Kbytes */

	/* set 1:1 mapping between AHB -> PCI memory space, for all Masters

	 * Each AHB master has it's own mapping registers. Max 16 AHB masters.

 Get the GRPCI2 Host PCI ID */

 Get address to first (always defined) capability structure */

 Enable/Disable Byte twisting */

	/* Setup the Host's PCI Target BARs for other peripherals to access,

	 * and do DMA to the host's memory. The target BARs can be sized and

	 * enabled individually.

	 *

	 * User may set custom target BARs, but default is:

	 * The first BARs is used to map kernel low (DMA is part of normal

	 * region on sparc which is SRMMU_MAXMEM big) main memory 1:1 to the

	 * PCI bus, the other BARs are disabled. We assume that the first BAR

	 * is always available.

 Target BARs must have the proper alignment */

 Map main memory */

 256MB prefetchable */

 set as bus master and enable pci memory responses */

 Enable Error respone (CPU-TRAP) on illegal memory access. */

 Handle GRPCI2 Error Interrupt */

 Clear handled INT TYPE IRQs */

 Find Device Address */

	/*

	 * Check that we're in Host Slot and that we can act as a Host Bridge

	 * and not only as target.

 BASE IRQ */

 Byte twisting should be made configurable from kernel command line */

 Let user do custom Target BAR assignment */

 Limit IRQ unmasking in irq_mode 2 and 3 */

 Optional PCI reset. Force PCI reset on startup */

 Find PCI Memory, I/O and Configuration Space Windows */

	/*

	 * I/O Space resources in I/O Window mapped into Virtual Adr Space

	 * We never use low 4KB because some devices seem have problems using

	 * address 0.

	/*

	 * GRPCI2 has no prefetchable memory, map everything as

	 * non-prefetchable memory

 setup maximum supported PCI buses */

	/*

	 * Get PCI Interrupt to System IRQ mapping and setup IRQ handling

	 * Error IRQ always on PCI INTA.

 All PCI interrupts are shared using the same system IRQ */

 Enable IRQs on LEON IRQ controller */

 All PCI interrupts have an unique IRQ interrupt */

 Make LEON IRQ layer handle level IRQ by acking */

 Unmask all PCI interrupts, request_irq will not do that */

 Setup IRQ handler for non-configuration space access errors */

	/*

	 * Enable Error Interrupts. PCI interrupts are unmasked once request_irq

	 * is called by the PCI Device drivers

 Init common layer and scan buses */

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-only

/* adi_64.c: support for ADI (Application Data Integrity) feature on

 * sparc m7 and newer processors. This feature is also known as

 * SSM (Silicon Secured Memory).

 *

 * Copyright (C) 2016 Oracle and/or its affiliates. All rights reserved.

 * Author: Khalid Aziz (khalid.aziz@oracle.com)

/* Each page of storage for ADI tags can accommodate tags for 128

 * pages. When ADI enabled pages are being swapped out, it would be

 * prudent to allocate at least enough tag storage space to accommodate

 * SWAPFILE_CLUSTER number of pages. Allocate enough tag storage to

 * store tags for four SWAPFILE_CLUSTER pages to reduce need for

 * further allocations for same vma.

/* mdesc_adi_init() : Parse machine description provided by the

 *	hypervisor to detect ADI capabilities

 *

 * Hypervisor reports ADI capabilities of platform in "hwcap-list" property

 * for "cpu" node. If the platform supports ADI, "hwcap-list" property

 * contains the keyword "adp". If the platform supports ADI, "platform"

 * node will contain "adp-blksz", "adp-nbits" and "ue-on-adp" properties

 * to describe the ADI capabilities.

	/*

	 * Look for "adp" keyword in hwcap-list which would indicate

	 * ADI support

	/* Find the ADI properties in "platform" node. If all ADI

	 * properties are not found, ADI support is incomplete and

	 * do not enable ADI in the kernel.

	/* Some of the code to support swapping ADI tags is written

	 * assumption that two ADI tags can fit inside one byte. If

	 * this assumption is broken by a future architecture change,

	 * that code will have to be revisited. If that were to happen,

	 * disable ADI support so we do not get unpredictable results

	 * with programs trying to use ADI and their pages getting

	 * swapped out

	/* Check if this vma already has tag storage descriptor

	 * allocated for it.

		/* If no matching entries were found, this must be a

		 * freshly allocated page

	/* Check if this vma already has tag storage descriptor

	 * allocated for it.

		/* Look for a matching entry for this address. While doing

		 * that, look for the first open slot as well and find

		 * the hole in already allocated range where this request

		 * will fit in.

 Check if we ran out of tag storage descriptors */

 Mark this tag descriptor slot in use and then initialize it */

	/* Tag storage has not been allocated for this vma and space

	 * is available in tag storage descriptor. Since this page is

	 * being swapped out, there is high probability subsequent pages

	 * in the VMA will be swapped out as well. Allocate pages to

	 * store tags for as many pages in this vma as possible but not

	 * more than TAG_STORAGE_PAGES. Each byte in tag space holds

	 * two ADI tags since each ADI tag is 4 bits. Each ADI tag

	 * covers adi_blksize() worth of addresses. Check if the hole is

	 * big enough to accommodate full address range for using

	 * TAG_STORAGE_PAGES number of tag pages.

 Check for overflow. If overflow occurs, allocate only one page */

		/* If overflow happens with the minimum tag storage

		 * allocation as well, adjust ending address for this

		 * tag storage.

		/* Available hole is too small on the upper end of

		 * address. Can we expand the range towards the lower

		 * address and maximize use of this slot?

		/* Check for underflow. If underflow occurs, allocate

		 * only one page for storing ADI tags

			/* If underflow happens with the minimum tag storage

			 * allocation as well, adjust starting address for

			 * this tag storage.

			/* Available hole is restricted on lower address

			 * end as well

		/* Do not free up the tag storage space allocated

		 * by the first descriptor. This is persistent

		 * emergency tag storage space for the task.

/* Retrieve any saved ADI tags for the page being swapped back in and

 * restore these tags to the newly allocated physical page.

	/* Check if the swapped out page has an ADI version

	 * saved. If yes, restore version tag to the newly

	 * allocated page.

	/* Check and mark this tag space for release later if

	 * the swapped in page was the last user of tag space

/* A page is about to be swapped out. Save any ADI tags associated with

 * this physical page so they can be restored later when the page is swapped

 * back in.

 SPDX-License-Identifier: GPL-2.0

/* sysfs.c: Topology sysfs support code for sparc64.

 *

 * Copyright (C) 2007 David S. Miller <davem@davemloft.net>

 SPDX-License-Identifier: GPL-2.0

/* ldc.c: Logical Domain Channel link-layer protocol driver.

 *

 * Copyright (C) 2007, 2008 David S. Miller <davem@davemloft.net>

/* Packet header layout for unreliable and reliable mode frames.

 * When in RAW mode, packets are simply straight 64-byte payloads

 * with no headers.

 Link Version		*/

 Request To Send		*/

 Ready To Receive	*/

 Ready for Data eXchange	*/

 Ordered from largest major to lowest.  */

 Protects ldc_unmap.  */

 Protects all operations that depend upon channel state.  */

/* When we are in reliable or stream mode, have to track the next packet

 * we haven't gotten an ACK for in the TX queue using tx_acked.  We have

 * to be careful not to stomp over the queue past that point.  During

 * the handshake, we don't have TX data packets pending in the queue

 * and that's why handshake_get_tx_packet() need not be mindful of

 * lp->tx_acked.

/* This just updates the head value in the hypervisor using

 * a polling loop with a timeout.  The caller takes care of

 * upating software state representing the head change, if any.

	/* We report but do not act upon the hypervisor errors because

	 * there really isn't much we can do if they fail at this point.

	/* Refetch the RX queue state as well, because we could be invoked

	 * here in the queue processing context.

	/* We should probably check for hypervisor errors here and

	 * reset the LDC channel if we get one.

		/*

		 * Generate an LDC_EVENT_UP event if the channel

		 * was not already up.

	/* If we are in reset state, flush the RX queue and ignore

	 * everything.

	/* Once we finish the handshake, we let the ldc_read()

	 * paths do all of the control frame and state management.

	 * Just trigger the callback.

	/* We should probably check for hypervisor errors here and

	 * reset the LDC channel if we get one.

		/*

		 * Generate an LDC_EVENT_UP event if the channel

		 * was not already up.

/* XXX ldc_alloc() and ldc_free() needs to run under a mutex so

 * XXX that addition and removal from the ldc_channel_list has

 * XXX atomicity, otherwise the __ldc_channel_exists() check is

 * XXX totally pointless as another thread can slip into ldc_alloc()

 * XXX and add a channel with the same ID.  There also needs to be

 * XXX a spinlock for ldc_channel_list.

 struct ldc_iommu *ldc_iommu = (struct ldc_iommu *)arg; */

 XXX Make this configurable... XXX */

 no large pool */,

 npools */,

 skip span boundary check */);

	/* XXX allow setting via ldc_channel_config to override defaults

	 * XXX or use some formula based upon mtu

/* Bind the channel.  This registers the LDC queues with

 * the hypervisor and puts the channel into a pseudo-listening

 * state.  This does not initiate a handshake, ldc_connect() does

 * that.

		/*

		 * There is no handshake in RAW mode, so handshake

		 * is completed.

		/*

		 * If this is a control-only packet, there is nothing

		 * else to do but advance the rx queue since the packet

		 * was already processed above.

		/* Every initial packet starts with the START bit set.

		 *

		 * Singleton packets will have both START+STOP set.

		 *

		 * Fragments will have START set in the first frame, STOP

		 * set in the last frame, and neither bit set in middle

		 * frames of the packet.

		 *

		 * Therefore if we are at the beginning of a packet and

		 * we don't see START, or we are in the middle of a fragmented

		 * packet and do see START, we are unsynchronized and should

		 * flush the RX queue.

			/* User didn't give us a big enough buffer,

			 * what to do?  This is a pretty serious error.

			 *

			 * Since we haven't updated the RX ring head to

			 * consume any of the packets, signal the error

			 * to the user and just leave the RX ring alone.

			 *

			 * This seems the best behavior because this allows

			 * a user of the LDC layer to start with a small

			 * RX buffer for ldc_read() calls and use -EMSGSIZE

			 * as a cue to enlarge it's read buffer.

 Ok, we are gonna eat this one.  */

	/* It is caller policy what to do about short copies.

	 * For example, a networking driver can declare the

	 * packet a runt and drop it.

 SPDX-License-Identifier: GPL-2.0

/*  linux/arch/sparc/kernel/process.c

 *

 *  Copyright (C) 1995, 2008 David S. Miller (davem@davemloft.net)

 *  Copyright (C) 1996 Eddie C. Dost   (ecd@skynet.be)

/*

 * This file handles the architecture-dependent parts of process handling..

/* 

 * Power management idle function 

 * Set in pm platform drivers (apc.c and pmc.c)

/* 

 * Power-off handler instantiation for pm.h compliance

 * This is done via auxio, but could be used as a fallback

 * handler when auxio is not present-- unused for now...

/*

 * sysctl - toggle power-off restriction for serial console 

 * systems in machine_power_off()

 Idle loop support. */

 XXX cli/sti -> local_irq_xxx here, check this works once SMP is fixed. */

/*

 * The show_stack() is external API which we do not use ourselves.

 * The oops is printed in die_if_kernel.

 Bogus frame pointer? */

/*

 * Free current thread data structures etc..

 Keep process from leaving FPU in a bogon state. */

 Clean the fpu. */

	/* do_fork() grabs the parent semaphore, we must release it

	 * temporarily so we can build the child clone stack frame

	 * without deadlocking.

/* Copy a Sparc thread.  The fork() return value conventions

 * under SunOS are nothing short of bletcherous:

 * Parent -->  %o0 == childs  pid, %o1 == 0

 * Child  -->  %o0 == parents pid, %o1 == 1

 *

 * NOTE: We have a separate fork kpsr/kwim because

 *       the parent could change these values between

 *       sys_fork invocation and when we reach here

 *       if the parent should sleep while trying to

 *       allocate the task_struct and kernel stack in

 *       do_fork().

 * XXX See comment above sys_vfork in sparc64. todo.

	/*

	 *  p->thread_info         new_stack   childregs stack bottom

	 *  !                      !           !             !

	 *  V                      V (stk.fr.) V  (pt_regs)  V

	 *  +----- - - - - - ------+===========+=============+

	/*

	 * A new process must start with interrupts disabled, see schedule_tail()

	 * and finish_task_switch(). (If we do not do it and if a timer interrupt

	 * hits before we unlock and attempts to take the rq->lock, we deadlock.)

	 *

	 * Thus, kpsr |= PSR_PIL.

 function */

		/*

		 * This is a clone() call with supplied user stack.

		 * Set some valid stack frames to give to the child.

 FPU must be disabled on SMP. */

 Set the return value for the child. */

 Set the return value for the parent. */

 Bogus frame pointer? */

 SPDX-License-Identifier: GPL-2.0

/*

 * Interrupt request handling routines. On the

 * Sparc the IRQs are basically 'cast in stone'

 * and you are supposed to probe the prom's device

 * node trees to find out who's got which IRQ.

 *

 *  Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 *  Copyright (C) 1995 Miguel de Icaza (miguel@nuclecu.unam.mx)

 *  Copyright (C) 1995,2002 Pete A. Zaitcev (zaitcev@yahoo.com)

 *  Copyright (C) 1996 Dave Redman (djhr@tadpole.co.uk)

 *  Copyright (C) 1998-2000 Anton Blanchard (anton@samba.org)

 platform specific irq setup */

/*

 * Dave Redman (djhr@tadpole.co.uk)

 *

 * IRQ numbers.. These are no longer restricted to 15..

 *

 * this is done to enable SBUS cards and onboard IO to be masked

 * correctly. using the interrupt level isn't good enough.

 *

 * For example:

 *   A device interrupting at sbus level6 and the Floppy both come in

 *   at IRQ11, but enabling and disabling them requires writing to

 *   different bits in the SLAVIO/SEC.

 *

 * As a result of these changes sun4m machines could now support

 * directed CPU interrupts using the existing enable/disable irq code

 * with tweaks.

 *

 * Sun4d complicates things even further.  IRQ numbers are arbitrary

 * 32-bit values in that case.  Since this is similar to sparc64,

 * we adopt a virtual IRQ numbering scheme as is done there.

 * Virutal interrupt numbers are allocated by build_irq().  So NR_IRQS

 * just becomes a limit of how many interrupt sources we can handle in

 * a single system.  Even fully loaded SS2000 machines top off at

 * about 32 interrupt sources or so, therefore a NR_IRQS value of 64

 * is more than enough.

  *

 * We keep a map of per-PIL enable interrupts.  These get wired

 * up via the irq_chip->startup() method which gets invoked by

 * the generic IRQ layer during request_irq().

 Table of allocated irqs. Unused entries has irq == 0 */

 Protect access to irq_table */

 Map between the irq identifier used in hw to the irq_bucket. */

 Protect access to irq_map */

 Allocate a new irq from the irq_table */

/* Based on a single pil handler_irq may need to call several

 * interrupt handlers. Use irq_map as entry to irq_table,

 * and let each entry in irq_table point to the next entry.

 /proc/interrupts printing */

 Save for later use in floppy interrupt handler */

 Dork with trap table if we get this far. */

	/*

	 * XXX Correct thing whould be to flush only I- and D-cache lines

	 * which contain the handler in question. But as of time of the

	 * writing we have no CPU-neutral interface to fine-grained flushes.

/*

 * These variables are used to access state from the assembler

 * interrupt handler, floppy_hardint, so we cannot put these in

 * the floppy driver image because that would not work in the

 * modular case.

/* Use the generic irq support to call floppy_interrupt

 * which was setup using request_irq() in sparc_floppy_request_irq().

 * We only have one floppy interrupt so we do not need to check

 * for additional handlers being wired up by irq_link()

/* djhr

 * This could probably be made indirect too and assigned in the CPU

 * bits of the code. That would be much nicer I think and would also

 * fit in with the idea of being able to tune your kernel for your machine

 * by removing unrequired machine and device support.

 *

 SPDX-License-Identifier: GPL-2.0

/* kgdb.c: KGDB support for 64-bit sparc.

 *

 * Copyright (C) 2008 David S. Miller <davem@davemloft.net>

	/* If the TSTATE register is changing, we have to preserve

	 * the CWP field, otherwise window save/restore explodes.

 try to read optional parameter, pc unchanged if no parm */

 Breakpoint instruction: ta 0x72 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * User-space Probes (UProbes) for sparc

 *

 * Copyright (C) 2013 Oracle Inc.

 *

 * Authors:

 *	Jose E. Marchesi <jose.marchesi@oracle.com>

 *	Eric Saint Etienne <eric.saint.etienne@oracle.com>

 For struct task_struct */

/* Compute the address of the breakpoint instruction and return it.

 *

 * Note that uprobe_get_swbp_addr is defined as a weak symbol in

 * kernel/events/uprobe.c.

/* Fill in the xol area with the probed instruction followed by the

 * single-step trap.  Some fixups in the copied instruction are

 * performed at this point.

 *

 * Note that uprobe_xol_copy is defined as a weak symbol in

 * kernel/events/uprobe.c.

	/* Branches annulling their delay slot must be fixed to not do

	 * so.  Clearing the annul bit on these instructions we can be

	 * sure the single-step breakpoint in the XOL slot will be

	 * executed.

/* Instruction analysis/validity.

 *

 * This function returns 0 on success or a -ve number on error.

 Any unsupported instruction?  Then return -EINVAL  */

/* If INSN is a relative control transfer instruction, return the

 * corrected branch destination value.

 *

 * Note that regs->tpc and regs->tnpc still hold the values of the

 * program counters at the time of the single-step trap due to the

 * execution of the UPROBE_STP_INSN at utask->xol_vaddr + 4.

 *

 Branch not taken, no mods necessary.  */

	/* The three cases are call, branch w/prediction,

	 * and traditional branch.

		/* The instruction did all the work for us

		 * already, just apply the offset to the correct

		 * instruction location.

	/* It is jmpl or some other absolute PC modification instruction,

	 * leave NPC as-is.

/* If INSN is an instruction which writes its PC location

 * into a destination register, fix that up.

 Simplest case is 'call', which always uses %o7 */

 'jmpl' encodes the register inside of the opcode */

 Hard case, it goes onto the stack. */

/* Single-stepping can be avoided for certain instructions: NOPs and

 * instructions that can be emulated.  This function determines

 * whether the instruction where the uprobe is installed falls in one

 * of these cases and emulates it.

 *

 * This function returns true if the single-stepping can be skipped,

 * false otherwise.

	/* We currently only emulate NOP instructions.

/* Prepare to execute out of line.  At this point

 * current->utask->xol_vaddr points to an allocated XOL slot properly

 * initialized with the original instruction and the single-stepping

 * trap instruction.

 *

 * This function returns 0 on success, any other number on error.

	/* Save the current program counters so they can be restored

	 * later.

	/* Adjust PC and NPC so the first instruction in the XOL slot

	 * will be executed by the user task.

/* Prepare to resume execution after the single-step.  Called after

 * single-stepping. To avoid the SMP problems that can occur when we

 * temporarily put back the original opcode to single-step, we

 * single-stepped a copy of the instruction.

 *

 * This function returns 0 on success, any other number on error.

/* Handler for uprobe traps.  This is called from the traps table and

 * triggers the proper die notification.

	/* We are only interested in user-mode code.  Uprobe traps

	 * shall not be present in kernel code.

	/* trap_level == 0x173 --> ta 0x73

	 * trap_level == 0x174 --> ta 0x74

/* Callback routine for handling die notifications.

 We are only interested in userspace traps */

/* This function gets called when a XOL instruction either gets

 * trapped or the thread has a fatal signal, so reset the instruction

 * pointer to its probed address.

/* If xol insn itself traps and generates a signal(Say,

 * SIGILL/SIGSEGV/etc), then detect the case where a singlestepped

 * instruction jumps back to its own address.

 SPDX-License-Identifier: GPL-2.0

/* linux/arch/sparc64/kernel/sys_sparc.c

 *

 * This file contains various random system calls that

 * have a non-standard calling sequence on the Linux/sparc

 * platform.

 #define DEBUG_UNIMP_SYSCALL */

/* Does addr --> addr+len fall within 4GB of the VA-space hole or

 * overflow past the end of the 64-bit address space?

/* These functions differ from the default implementations in

 * mm/mmap.c in two ways:

 *

 * 1) For file backed MAP_SHARED mmap()'s we D-cache color align,

 *    for fixed such mappings we just validate what the user gave us.

 * 2) For 64-bit tasks we avoid mapping anything within 4GB of

 *    the spitfire/niagara VA-hole.

		/* We do not accept a shared mapping if it would violate

		 * cache aliasing constraints.

 This should only ever run for 32-bit processes.  */

		/* We do not accept a shared mapping if it would violate

		 * cache aliasing constraints.

 requesting a specific address */

	/*

	 * A failed mmap() very likely causes application failure,

	 * so fall back to the bottom-up function here. This scenario

	 * can happen with large stack limits and large mmap()

	 * allocations.

 Try to align mapping such that we align it as much as possible. */

 Ok, don't mess with it. */

	/* Mapping is smaller than 64K or larger areas could not

	 * be obtained.

 Essentially the same as PowerPC.  */

	/*

	 * Fall back to the standard layout if the personality

	 * bit is set, or if the expected stack growth is unlimited:

 We know it's 32-bit */

/*

 * sys_pipe() is the normal C calling standard for creating

 * a pipe. It's not the way unix traditionally does this, though.

/*

 * sys_ipc() is the de-multiplexer for the SysV IPC calls..

 *

 * This is really horribly ugly.

 No need for backward compatibility. We can start fresh... */

 Linux version of mmap */

 Don't make the system unusable, if someone goes stuck */

 #define DEBUG_SPARC_BREAKPOINT */

	/* Copy the user data space into the kernel copy

	 * structure. But bear in mind that the structures

	 * may change

	/*

	 * override for sparc64 specific timeval type: tv_usec

	 * is 32 bit wide instead of 64-bit in __kernel_timex

	/* Copy the user data space into the kernel copy

	 * structure. But bear in mind that the structures

	 * may change

	/*

	 * override for sparc64 specific timeval type: tv_usec

	 * is 32 bit wide instead of 64-bit in __kernel_timex

 XXX: Don't preclude handling different sized sigset_t's.  */

 SPDX-License-Identifier: GPL-2.0

/* time.c: UltraSparc timer and TOD clock support.

 *

 * Copyright (C) 1997, 2008 David S. Miller (davem@davemloft.net)

 * Copyright (C) 1998 Eddie C. Dost   (ecd@skynet.be)

 *

 * Based largely on code which is:

 *

 * Copyright (C) 1996 Thomas K. Dyas (tdyas@eden.rutgers.edu)

	/* Set things up so user can access tick register for profiling

	 * purposes.  Also workaround BB_ERRATA_1 by doing a dummy

	 * read back of %tick after writing it.

 no outputs */

 no outputs */

	/* Workaround for Spitfire Errata (#54 I think??), I discovered

	 * this via Sun BugID 4008234, mentioned in Solaris-2.5.1 patch

	 * number 103640.

	 *

	 * On Blackbird writes to %tick_cmpr can fail, the

	 * workaround seems to be to execute the wr instruction

	 * at the start of an I-cache line, and perform a dummy

	 * read back from %tick_cmpr right after writing to it. -DaveM

 Also need to handle Blackbird bug here too. */

 Searches for cpu clock frequency with given cpuid in OpenBoot tree */

 try upa-portid then cpuid to get cpuid, see prom_64.c */

 no outputs */

	/* Writes to the %tick and %stick register are not

	 * allowed on sun4v.  The Hypervisor controls that

	 * bit, per-strand.

 Let the user get at STICK too. */

 no outputs */

 no outputs */

/* On Hummingbird the STICK/STICK_CMPR register is implemented

 * in I/O space.  There are two 64-bit registers each, the

 * first holds the low 32-bits of the value and the second holds

 * the high 32-bits.

 *

 * Since STICK is constantly updating, we have to access it carefully.

 *

 * The sequence we use to read is:

 * 1) read high

 * 2) read low

 * 3) read high again, if it rolled re-read both low and high again.

 *

 * Writing STICK safely is also tricky:

 * 1) write low to zero

 * 2) write high

 * 3) write low

	/* XXX This seems to be necessary to 'jumpstart' Hummingbird

	 * XXX into actually sending STICK interrupts.  I think because

	 * XXX of how we store %tick_cmpr in head.S this somehow resets the

	 * XXX {TICK + STICK} interrupt mux.  -DaveM

	/* The CMOS RTC driver only accepts IORESOURCE_IO, so cons

	 * up a fake resource so that the probe works for all cases.

	 * When the RTC is behind an ISA bus it will have IORESOURCE_IO

	 * already, whereas when it's behind EBUS is will be IORESOURCE_MEM.

	/* On an Enterprise system there can be multiple mostek clocks.

	 * We should only match the one that is on the central FHC bus.

/* Must be after subsys_initcall() so that busses are probed.  Must

 * be before device_initcall() because things like the RTC driver

 * need to see the clock registers.

 Return true if this is Hummingbird, aka Ultra-IIe */

 CONFIG_CPU_FREQ */

	/* Guarantee that the following sequences execute

	 * uninterrupted.

 Restore PSTATE_IE. */

 no outputs */

 ensure that address is modified before flush */

	/* Use barrier so the compiler emits the loads first and overlaps load

	 * latency with reading tick, because reading %tick/%stick is a

	 * post-sync instruction that will flush and restart subsequent

	 * instructions after it commits.

 SPDX-License-Identifier: GPL-2.0

/* arch/sparc64/kernel/kprobes.c

 *

 * Copyright (C) 2004 David S. Miller <davem@davemloft.net>

/* We do not have hardware single-stepping on sparc64.

 * So we implement software single-stepping with breakpoint

 * traps.  The top-level scheme is similar to that used

 * in the x86 kprobes implementation.

 *

 * In the kprobe->ainsn.insn[] array we store the original

 * instruction at index zero and a break instruction at

 * index one.

 *

 * When we hit a kprobe we:

 * - Run the pre-handler

 * - Remember "regs->tnpc" and interrupt level stored in

 *   "regs->tstate" so we can restore them later

 * - Disable PIL interrupts

 * - Set regs->tpc to point to kprobe->ainsn.insn[0]

 * - Set regs->tnpc to point to kprobe->ainsn.insn[1]

 * - Mark that we are actively in a kprobe

 *

 * At this point we wait for the second breakpoint at

 * kprobe->ainsn.insn[1] to hit.  When it does we:

 * - Run the post-handler

 * - Set regs->tpc to "remembered" regs->tnpc stored above,

 *   restore the PIL interrupt level in "regs->tstate" as well

 * - Make any adjustments necessary to regs->tnpc in order

 *   to handle relative branches correctly.  See below.

 * - Mark that we are no longer actively in a kprobe.

single step inline, if it a breakpoint instruction*/

	/*

	 * We don't want to be preempted for the entire

	 * duration of kprobe processing

			/* We have reentered the kprobe_handler(), since

			 * another probe was hit while within the handler.

			 * We here save the original kprobes variables and

			 * just single step on the instruction of the new probe

			 * without calling any user handlers.

			/* The breakpoint instruction was removed by

			 * another cpu right after we hit, no further

			 * handling of this interrupt is appropriate

			/*

			 * The breakpoint instruction was removed right

			 * after we hit it.  Another cpu has removed

			 * either a probepoint or a debugger breakpoint

			 * at this address.  In either case, no further

			 * handling of this interrupt is appropriate.

 Not one of ours: let kernel handle it */

/* If INSN is a relative control transfer instruction,

 * return the corrected branch destination value.

 *

 * regs->tpc and regs->tnpc still hold the values of the

 * program counters at the time of trap due to the execution

 * of the BREAKPOINT_INSTRUCTION_2 at p->ainsn.insn[1]

 * 

 Branch not taken, no mods necessary.  */

	/* The three cases are call, branch w/prediction,

	 * and traditional branch.

		/* The instruction did all the work for us

		 * already, just apply the offset to the correct

		 * instruction location.

	/* It is jmpl or some other absolute PC modification instruction,

	 * leave NPC as-is.

/* If INSN is an instruction which writes it's PC location

 * into a destination register, fix that up.

 Simplest case is 'call', which always uses %o7 */

 'jmpl' encodes the register inside of the opcode */

 Hard case, it goes onto the stack. */

/*

 * Called after single-stepping.  p->addr is the address of the

 * instruction which has been replaced by the breakpoint

 * instruction.  To avoid the SMP problems that can occur when we

 * temporarily put back the original opcode to single-step, we

 * single-stepped a copy of the instruction.  The address of this

 * copy is &p->ainsn.insn[0].

 *

 * This function prepares to return from the post-single-step

 * breakpoint trap.

 This assignment must occur after relbranch_fixup() */

Restore back the original saved kprobes variables and continue. */

		/*

		 * We are here because the instruction being single

		 * stepped caused a page fault. We reset the current

		 * kprobe and the tpc points back to the probe address

		 * and allow the page fault handler to continue as a

		 * normal page fault.

		/*

		 * In case the user-specified fault handler returned

		 * zero, try to fix up.

		/*

		 * fixup_exception() could not handle it,

		 * Let do_page_fault() fix it.

/*

 * Wrapper routine to for handling exceptions.

	/* trap_level == 0x170 --> ta 0x70

	 * trap_level == 0x171 --> ta 0x71

/* The value stored in the return address register is actually 2

 * instructions before where the callee will return to.

 * Sequences usually look something like this

 *

 *		call	some_function	<--- return register points here

 *		 nop			<--- call delay slot

 *		whatever		<--- where callee returns to

 *

 * To keep trampoline_probe_handler logic simpler, we normalize the

 * value kept in ri->ret_addr so we don't need to keep adjusting it

 * back and forth.

 Replace the return addr with trampoline addr */

/*

 * Called when the probe at kretprobe trampoline is hit

	/*

	 * By returning a non-zero value, we are telling

	 * kprobe_handler() that we don't want the post_handler

	 * to run (and have re-enabled preemption)

 SPDX-License-Identifier: GPL-2.0

/*

 *  arch/sparc64/kernel/signal.c

 *

 *  Copyright (C) 1991, 1992  Linus Torvalds

 *  Copyright (C) 1995, 2008 David S. Miller (davem@davemloft.net)

 *  Copyright (C) 1996 Miguel de Icaza (miguel@nuclecu.unam.mx)

 *  Copyright (C) 1997 Eddie C. Dost   (ecd@skynet.be)

 *  Copyright (C) 1997,1998 Jakub Jelinek   (jj@sunsite.mff.cuni.cz)

 {set, get}context() needed for 64-bit SparcLinux userland. */

 Skip %g7 as that's the thread register in userspace.  */

 IMO get_context is like any other system call, thus modifies FPU state -jj */

 Skip over the trap instruction, first. */

/* Checks if the fp is valid.  We always build rt signal frames which

 * are 16-byte aligned, therefore we can always enforce that the

 * restore frame has that property as well.

 Always make any pending restarted system calls return -EINTR */

 1. Make sure we are not getting garbage from the user */

 2. Restore the state */

 User can only change condition codes and %asi in %tstate. */

 Prevent syscall restart.  */

	/*

	 * If we are on the alternate signal stack and would overflow it, don't.

	 * Return an always-bogus address instead so we will die with SIGSEGV.

 This is the X/Open sanctioned signal stack switching.  */

	/* Always align the stack frame.  This handles two cases.  First,

	 * sigaltstack need not be mindful of platform specific stack

	 * alignment.  Second, if we took this signal because the stack

	 * is not aligned properly, we'd like to take the signal cleanly

	 * and report that.

 1. Make sure everything is clean */

 2. Save the current process state */

 Setup sigaltstack */

 3. signal handler back-trampoline and parameters */

	/* The sigcontext is passed in this way because of how it

	 * is defined in GLIBC's /usr/include/bits/sigcontext.h

	 * for sparc64.  It includes the 128 bytes of siginfo_t.

 5. signal handler */

 4. return to kernel instructions */

/* Note that 'init' is a special process: it doesn't get signals it doesn't

 * want to handle. Thus you cannot kill init even with a SIGKILL even by

 * mistake.

	/* It's a lot of work and synchronization to add a new ptrace

	 * register for GDB to save and restore in order to get

	 * orig_i0 correct for syscall restarts when debugging.

	 *

	 * Although it should be the case that most of the global

	 * registers are volatile across a system call, glibc already

	 * depends upon that fact that we preserve them.  So we can't

	 * just use any global register to save away the orig_i0 value.

	 *

	 * In particular %g2, %g3, %g4, and %g5 are all assumed to be

	 * preserved across a system call trap by various pieces of

	 * code in glibc.

	 *

	 * %g7 is used as the "thread register".   %g6 is not used in

	 * any fixed manner.  %g6 is used as a scratch register and

	 * a compiler temporary, but it's value is never used across

	 * a system call.  Therefore %g6 is usable for orig_i0 storage.

 replay the system call when we are done */

/*

 * Compile-time assertions for siginfo_t offsets. Check NSIG* as well, as

 * changes likely come with new fields that should be added below.

 SPDX-License-Identifier: GPL-2.0

/*

 * starfire.c: Starfire/E10000 support.

 *

 * Copyright (C) 1998 David S. Miller (davem@redhat.com)

 * Copyright (C) 2000 Anton Blanchard (anton@samba.org)

/*

 * A few places around the kernel check this to see if

 * they need to call us to do things in a Starfire specific

 * way.

/*

 * Each Starfire board has 32 registers which perform translation

 * and delivery of traditional interrupt packets into the extended

 * Starfire hardware format.  Essentially UPAID's now have 2 more

 * bits than in all previous Sun5 systems.

 Beam me up Scott(McNeil)y... */

 Lets play it safe and not overwrite existing mappings */

 map to real upaid */

 SPDX-License-Identifier: GPL-2.0

/* Kernel module help for sparc64.

 *

 * Copyright (C) 2001 Rusty Russell.

 * Copyright (C) 2002 David S. Miller.

 CONFIG_SPARC64 */

 Make generic code ignore STT_REGISTER dummy undefined symbols.  */

 This is where to make the change */

 CONFIG_SPARC64 */

		/* This is the symbol it is referring to.  Note that all

 CONFIG_SPARC64 */

 make jump label nops */

 Cheetah's I-cache is fully coherent.  */

 CONFIG_SPARC64 */

 SPDX-License-Identifier: GPL-2.0-only

/* ds.c: Domain Services driver for Logical Domains

 *

 * Copyright (C) 2007, 2008 David S. Miller <davem@davemloft.net>

 Result codes */

 Responses */

 CPU not present in MD */

 CPU did not call in successfully */

 Redistribute IRQs, taking into account the new cpus.  */

 CONFIG_HOTPLUG_CPU */

	/* Don't bother with any of this if the boot_command

	 * is empty.

 SPDX-License-Identifier: GPL-2.0

/* pci_common.c: PCI controller common support.

 *

 * Copyright (C) 1999, 2007 David S. Miller (davem@davemloft.net)

/* At least on Sabre, it is necessary to access all PCI host controller

 * registers at their natural size, otherwise zeros are returned.

 * Strange but true, and I see no language in the UltraSPARC-IIi

 * programmer's manual that mentions this even indirectly.

 Do nothing. */

		/* We don't check for hypervisor errors here, but perhaps

		 * we should and influence our return value depending upon

		 * what kind of error is thrown.

 Corresponding generic code in of_pci_get_host_bridge_resources() */

 PCI config space, 16MB */

 16-bit IO space, 16MB */

 32-bit MEM space, 2GB */

 64-bit MEM handling */

 Generic helper routines for PCI error reporting. */

 SPDX-License-Identifier: GPL-2.0-or-later

/* prom_common.c: OF device tree support common code.

 *

 * Paul Mackerras	August 1996.

 * Copyright (C) 1996-2005 Paul Mackerras.

 *

 *  Adapted for 64bit PowerPC by Dave Engebretsen and Peter Bergner.

 *    {engebret|bergner}@us.ibm.com

 *

 *  Adapted for sparc by David S. Miller davem@davemloft.net

 XXX Upate procfs if necessary... */

/*

 * SPARC32 and SPARC64's prom_nextprop() do things differently

 * here, despite sharing the same interface.  SPARC32 doesn't fill in 'buf',

 * returning NULL on an error.  SPARC64 fills in 'buf', but sets it to an

 * empty string upon error.

 SPDX-License-Identifier: GPL-2.0

/* smp.c: Sparc SMP support.

 *

 * Copyright (C) 1996 David S. Miller (davem@caip.rutgers.edu)

 * Copyright (C) 1998 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 * Copyright (C) 2004 Keith M Wesolowski (wesolows@foobazco.org)

/* The only guaranteed locking primitive available on all Sparc

 * processors is 'ldstub [%reg + immediate], %dest_reg' which atomically

 * places the current byte at the effective address into dest_reg and

 * places 0xff there afterwards.  Pretty lame locking primitive

 * compared to the Alpha and the Intel no?  Most Sparcs have 'swap'

 * instruction which is much better...

	/*

	 * CPU model dependent way of implementing IPI generation targeting

	 * a single CPU. The trap handler needs only to do trap entry/return

	 * to call schedule.

 trigger one IPI single call on one CPU */

 trigger IPI mask call on each CPU */

 re-schedule routine called by interrupt return code. */

 i = number of cpus */

/* Set this up early so that things like the scheduler can init

 * properly.  We use the same cpu mask for both the present and

 * possible cpu map.

	/*

	 * SMP booting is extremely fragile in some architectures. So run

	 * the cpu initialization code first before anything else.

 Set the CPU in the cpu_online_mask */

 Enable local interrupts now */

 We should never reach here! */

/*

 *  Copyright (C) 2001 Andrea Arcangeli <andrea@suse.de> SuSE

 *  Copyright 2003 Andi Kleen, SuSE Labs.

 *

 *  Thanks to hpa@transmeta.com for some useful hint.

 *  Special thanks to Ingo Molnar for his early experience with

 *  a different vsyscall implementation for Linux/IA32 and for the name.

 SPDX-License-Identifier: GPL-2.0

/* pci_sun4v.c: SUN4V specific PCI controller support.

 *

 * Copyright (C) 2006, 2007, 2008 David S. Miller (davem@davemloft.net)

 Ordered from largest major to lowest */

 Device mapping is for.	*/

 IOMMU page protections	*/

 Index into IOTSB.		*/

 List of physical pages	*/

 Number of pages in list.	*/

 Interrupts must be disabled.  */

 Interrupts must be disabled.  */

 VPCI maj=1, min=[0,1] only supports read and write */

 Interrupts must be disabled.  */

 Interrupts must be disabled.  */

 No need to bind pci bridge */

			/* If bind fails for one device it is going to fail

			 * for rest of the devices because we are sharing

			 * IOTSB. So in case of failure simply return with

			 * error.

 we don't care for legacy iommu */

 we don't care for legacy iommu */

 Init first segment length for backout at failure */

 Sanity check */

 Allocate iommu entries for that segment */

 Handle failure */

 Convert entry to a dma_addr_t */

 Insert into HW table */

 If we are in an open segment, try merging */

			/* We cannot merge if:

			 * - allocated dma_addr isn't contiguous to previous allocation

 Can't merge: create a new segment */

 This is a new segment, fill entries */

 Calculate next page pointer for contiguous check */

 XXX demap? XXX */

 we don't care for legacy iommu */

 XXX register error interrupt handlers XXX */

 calculate size of IOTSB */

 configure and register IOTSB with HV */

	/* There are 4 iommu-address-ranges supported. Each range is pair of

	 * {base, size}. The ranges[0] and ranges[1] are 32bit address space

	 * while ranges[2] and ranges[3] are 64bit space.  We want to use 64bit

	 * address ranges to support 64bit addressing. Because 'size' for

	 * address ranges[2] and ranges[3] are same we can select either of

	 * ranges[2] or ranges[3] for mapping. However due to 'size' is too

	 * large for OS to allocate IOTSB we are using fix size 32G

	 * (ATU_64_SPACE_SIZE) which is more than enough for all PCIe devices

	 * to share.

 Create IOTSB */

	/* Create ATU iommu map.

	 * One bit represents one iotte in IOTSB table.

 no large_pool */,

 default npools */,

 want span boundary checking */);

 Setup initial software IOMMU state. */

 Allocate and initialize the free area map.  */

 no large_pool */,

 default npools */,

 want span boundary checking */);

 bus/device/func */

	/* The format of this value is message type dependent.

	 * For MSI bits 15:0 are the data from the MSI packet.

	 * For MSI-X bits 31:0 are the data from the MSI packet.

	 * For MSG, the message code and message routing code where:

	 * 	bits 39:32 is the bus/device/fn of the msg target-id

	 *	bits 18:16 is the message routing code

	 *	bits 7:0 is the message code

	 * For INTx the low order 2-bits are:

	 *	00 - INTA

	 *	01 - INTB

	 *	10 - INTC

	 *	11 - INTD

 Note: void pointer arithmetic, 'head' is a byte offset  */

 msi_num */,

 Clear the entry.  */

 CONFIG_PCI_MSI */

 !(CONFIG_PCI_MSI) */

	/* if atu_init fails its not complete failure.

	 * we can still continue using legacy iommu.

			/* don't return an error if we fail to register the

			 * ATU group, but ATU hcalls won't be available.

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/arch/sparc/kernel/setup.c

 *

 *  Copyright (C) 1995  David S. Miller (davem@caip.rutgers.edu)

 *  Copyright (C) 2000  Anton Blanchard (anton@samba.org)

 orig-x, orig-y */

 unused */

 orig-video-page */

 orig-video-mode */

 orig-video-cols */

 ega_ax, ega_bx, ega_cx */

 orig-video-lines */

 orig-video-isVGA */

 orig-video-points */

/* Typing sync at the prom prompt calls the function pointed to by

 * romvec->pv_synchook which I set to the following function.

 * This should sync all filesystems and return, for now it just

 * prints out pretty messages and returns.

 Pretty sick eh? */

 XXX Badly broken. FIX! - Anton */

 Exported for mm/init.c:paging_init. */

 which CPU booted us (0xff = not set) */

 0xff will make it into DATA section... */

/* 

 * Process kernel command line switches that are specific to the

 * SPARC or that require special low-level processing.

 Move to the start of the next "argument". */

 Process any command switches, otherwise skip it. */

			/*

			 * "mem=XXX[kKmM] overrides the PROM-reported

			 * memory size.

		/* Nothing to do, this is what the unpatched code

		 * targets.

 Default instruction is leon - no patching */

/* Called from head_32.S - before we have setup anything

 * in the kernel. Be very careful with what you do here.

 Set sparc_cpu_model */

 CP-1200 with PROM 2.30 -E */

 Initialize PROM console and command line. */

 Run-time patch instructions to match the cpu model */

	/* Count the number of physically present processors in

	 * the machine, even on uniprocessor, so that /proc/cpuinfo

	 * output is consistent with 2.4.x

 SPDX-License-Identifier: GPL-2.0

/* visemul.c: Emulation of VIS instructions.

 *

 * Copyright (C) 2006 David S. Miller (davem@davemloft.net)

 OPF field of various VIS instructions.  */

 000111011 - four 16-bit packs  */

 000111010 - two 32-bit packs  */

 000111101 - four 16-bit packs  */

 001001101 - four 16-bit expands  */

 001001011 - two 32-bit merges */

 000110001 - 8-by-16-bit partitioned product  */

 000110011 - 8-by-16-bit upper alpha partitioned product  */

 000110101 - 8-by-16-bit lower alpha partitioned product  */

 000110110 - upper 8-by-16-bit partitioned product  */

 000110111 - lower 8-by-16-bit partitioned product  */

 000111000 - upper 8-by-16-bit partitioned product  */

 000111001 - lower unsigned 8-by-16-bit partitioned product  */

 000101000 - four 16-bit compare; set rd if src1 > src2  */

 000101100 - two 32-bit compare; set rd if src1 > src2  */

 000100000 - four 16-bit compare; set rd if src1 <= src2  */

 000100100 - two 32-bit compare; set rd if src1 <= src2  */

 000100010 - four 16-bit compare; set rd if src1 != src2  */

 000100110 - two 32-bit compare; set rd if src1 != src2  */

 000101010 - four 16-bit compare; set rd if src1 == src2  */

 000101110 - two 32-bit compare; set rd if src1 == src2  */

 000000000 - Eight 8-bit edge boundary processing  */

 000000001 - Eight 8-bit edge boundary processing, no CC */

 000000010 - Eight 8-bit edge boundary processing, little-endian  */

 000000011 - Eight 8-bit edge boundary processing, little-endian, no CC  */

 000000100 - Four 16-bit edge boundary processing  */

 000000101 - Four 16-bit edge boundary processing, no CC  */

 000000110 - Four 16-bit edge boundary processing, little-endian  */

 000000111 - Four 16-bit edge boundary processing, little-endian, no CC  */

 000001000 - Two 32-bit edge boundary processing  */

 000001001 - Two 32-bit edge boundary processing, no CC  */

 000001010 - Two 32-bit edge boundary processing, little-endian  */

 000001011 - Two 32-bit edge boundary processing, little-endian, no CC  */

 000111110 - distance between 8 8-bit components  */

 000010000 - convert 8-bit 3-D address to blocked byte address  */

 000010010 - convert 16-bit 3-D address to blocked byte address  */

 000010100 - convert 32-bit 3-D address to blocked byte address  */

 000011001 - Set the GSR.MASK field in preparation for a BSHUFFLE  */

 001001100 - Permute bytes as specified by GSR.MASK  */

 Absolute value of difference. */

 Round up.  */

 Round up.  */

 Round up.  */

 Round up.  */

/* Emulate the VIS instructions which are not implemented in

 * hardware on Niagara.

 Pixel Formatting Instructions.  */

 Partitioned Multiply Instructions  */

 Pixel Compare Instructions  */

 Edge Handling Instructions  */

 Pixel Component Distance  */

 Three-Dimensional Array Addressing Instructions  */

 Byte Mask and Shuffle Instructions  */

 SPDX-License-Identifier: GPL-2.0

/* apc - Driver implementation for power management functions

 * of Aurora Personality Chip (APC) on SPARCstation-4/5 and

 * derivatives.

 *

 * Copyright (c) 2002 Eric Brower (ebrower@usa.net)

/* Debugging

 * 

 * #define APC_DEBUG_LED

/* Specify "apc=noidle" on the kernel command line to 

 * disable APC CPU standby support.  Certain prototype

 * systems (SPARCstation-Fox) do not play well with APC

 * CPU idle, so disable this if your system has APC and 

 * crashes randomly.

/* 

 * CPU idle callback function

 * See .../arch/sparc/kernel/process.c

 Assign power management IDLE handler */

/* This driver is not critical to the boot process

 * and is easiest to ioremap when SBus is already

 * initialized, so we install ourselves thusly:

 SPDX-License-Identifier: GPL-2.0-only

/* Pseudo NMI support on sparc64 systems.

 *

 * Copyright (C) 2009 David S. Miller <davem@davemloft.net>

 *

 * The NMI watchdog support and infrastructure is based almost

 * entirely upon the x86 NMI support code.

/* We don't have a real NMI on sparc64, but we can fake one

 * up using profiling counter overflow interrupts and interrupt

 * levels.

 *

 * The profile overflow interrupts at level 15, so we use

 * level 14 as our IRQ off level.

/* nmi_active:

 * >0: the NMI watchdog is active, but can be disabled

 * <0: the NMI watchdog has not been set up, and cannot be enabled

 *  0: the NMI watchdog is disabled, but can be enabled

 oprofile uses this */

 wait 20 ticks */

/*

 * sparc specific NMI watchdog enable function.

 * Enables watchdog if it is not enabled already.

	/*

	 * watchdog thread could start even before nmi_init is called.

	 * Just Return in that case. Let nmi_init finish the init

	 * process first.

/*

 * sparc specific NMI watchdog disable function.

 * Disables watchdog if it is not disabled already.

 SPDX-License-Identifier: GPL-2.0

/* reboot.c: reboot/shutdown/halt/poweroff handling

 *

 * Copyright (C) 2008 David S. Miller <davem@davemloft.net>

/* sysctl - toggle power-off restriction for serial console

 * systems in machine_power_off()

/* This isn't actually used, it exists merely to satisfy the

 * reference in kernel/sys.c

 SPDX-License-Identifier: GPL-2.0

/*

 * ioport.c:  Simple io mapping allocator.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 * Copyright (C) 1995 Miguel de Icaza (miguel@nuclecu.unam.mx)

 *

 * 1996: sparc_free_io, 1999: ioremap()/iounmap() by Pete Zaitcev.

 *

 * 2000/01/29

 * <rth> zait: as long as pci_alloc_consistent produces something addressable, 

 *	things are ok.

 * <zaitcev> rth: no, it is relevant, because get_free_pages returns you a

 *	pointer into the big page mapping

 * <rth> zait: so what?

 * <rth> zait: remap_it_my_way(virt_to_phys(get_free_page()))

 * <zaitcev> Hmm

 * <zaitcev> Suppose I did this remap_it_my_way(virt_to_phys(get_free_page())).

 *	So far so good.

 * <zaitcev> Now, driver calls pci_free_consistent(with result of

 *	remap_it_my_way()).

 * <zaitcev> How do you find the address to pass to free_pages()?

 * <rth> zait: walk the page tables?  It's only two or three level after all.

 * <rth> zait: you have to walk them anyway to remove the mapping.

 * <zaitcev> Hmm

 * <zaitcev> Sounds reasonable

 struct pci_dev */

 This points to the next to use virtual memory for DVMA mappings */

 This points to the start of I/O mappings, cluable from outside. */

ext*/ struct resource sparc_iomap = {

/*

 * Our mini-allocator...

 * Boy this is gross! We need it because we must map I/O for

 * timers and interrupt controller before the kmalloc is available.

 SS-10 uses 8 */

 Must be first */

 1 == used */

/*

 * These are typically used in PCI drivers

 * which are trying to be cross-platform.

 *

 * Bus type is always zero on IIep.

/*

 * Complementary to ioremap().

	/*

	 * XXX Too slow. Can have 8192 DVMA pages on sun4m in the worst case.

	 * This probably warrants some sort of hashing.

/*

 * Meat of mapping

 P3 diag */

 printk("ioremap(0x%x:%08lx[0x%lx])=%p\n", busno, phys, size, va); */ 
/*

 Usually we cannot see printks in this case. */

/*

 * Complementary to _sparc_ioremap().

 CONFIG_SBUS */

/*

 * IIep is write-through, not flushing on cpu to device transfer.

 *

 * On LEON systems without cache snooping, the entire D-CACHE must be flushed to

 * make DMA to cacheable memory coherent.

 CONFIG_PROC_FS */

 SPDX-License-Identifier: GPL-2.0

/* linux/arch/sparc/kernel/sys_sparc.c

 *

 * This file contains various random system calls that

 * have a non-standard calling sequence on the Linux/sparc

 * platform.

 #define DEBUG_UNIMP_SYSCALL */

/* XXX Make this per-binary type, this way we can detect the type of

 * XXX a binary.  Every Sparc executable calls this very early on.

 Possibly older binaries want 8192 on sun4's? */

		/* We do not accept a shared mapping if it would violate

		 * cache aliasing constraints.

 See asm-sparc/uaccess.h */

/*

 * sys_pipe() is the normal C calling standard for creating

 * a pipe. It's not the way unix traditionally does this, though.

 See asm-sparc/uaccess.h */

 Linux version of mmap */

	/* Make sure the shift for mmap2 is constant (12), no matter what PAGE_SIZE

 no alignment check? */

	/* This works on an existing mmap so we don't need to validate

	 * the range as that was done at the original mmap call.

 #define DEBUG_SPARC_BREAKPOINT */

 XXX: Don't preclude handling different sized sigset_t's.  */

 SPDX-License-Identifier: GPL-2.0

/* ebus.c: EBUS DMA library code.

 *

 * Copyright (C) 1997  Eddie C. Dost  (ecd@skynet.be)

 * Copyright (C) 1999  David S. Miller (davem@redhat.com)

 Control/Status */

 DMA Address */

 DMA Count */

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

/*

 * This program is used to generate definitions needed by

 * assembly language modules.

 *

 * We use the technique used in the OSF Mach kernel code:

 * generate asm statements containing #defines,

 * compile this file to assembler, and then extract the

 * #defines from the assembly-language output.

 *

 * On sparc, thread_info data is static and TI_XXX offsets are computed by hand.

 #include <linux/mm.h>

 DEFINE(NUM_USER_SEGMENTS, TASK_SIZE>>28); */

 SPDX-License-Identifier: GPL-2.0

/* Sparc SS1000/SC2000 SMP support.

 *

 * Copyright (C) 1998 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 *

 * Based on sun4m's smp.c, which is:

 * Copyright (C) 1996 David S. Miller (davem@caip.rutgers.edu)

 Show we are alive */

 Enable level15 interrupt, disable level14 interrupt for now */

	/* Unblock the master CPU _only_ when the scheduler state

	 * of all secondary CPUs will be up-to-date, so after

	 * the SMP initialization the master will be just allowed

	 * to call the scheduler code.

 Fix idle thread fields. */

 paranoid */);

 Attach to the address space of init_task. */

 Allow PIL 14 as well */

/*

 *	Cycle through the processors asking the PROM to start each one.

	/*

	 * Initialize the contexts table

	 * Since the call to prom_startcpu() trashes the structure,

	 * we need to re-initialize it for each cpu

 whirrr, whirrr, whirrrrrrrrr... */

 wheee... it's going... */

 setup cpu list for irq rotation */

 Ok, they are spinning and ready to go. */

 Memory structure giving interrupt handler information about IPI generated */

 Initialize IPIs on the SUN4D SMP machine */

/* +-------+-------------+-----------+------------------------------------+

 * | bcast |  devid      |   sid     |              levels mask           |

 * +-------+-------------+-----------+------------------------------------+

 *  31      30         23 22       15 14                                 0

 Mark work */

 Generate IRQ on the CPU */

 Mark work */

 Generate IRQ on the CPU */

 Mark work */

 Generate IRQ on the CPU (any IRQ will cause resched) */

 Set when ipi entered. */

 Set when ipi exited. */

 Cross calls must be serialized, at least currently. */

			/*

			 * If you make changes here, make sure

			 * gcc generates proper code...

 Init receive/complete mapping, plus fire the IPI's off. */

 Running cross calls. */

 INTR_TABLE[0] & 1 is Profile IRQ */

 Patch ipi15 trap table */

 SPDX-License-Identifier: GPL-2.0

/* mdesc.c: Sun4V machine description handling.

 *

 * Copyright (C) 2007, 2008 David S. Miller <davem@davemloft.net>

/* Unlike the OBP device tree, the machine description is a full-on

 * DAG.  An arbitrary number of ARCs are possible from one

 * node to other nodes and thus we can't use the OBP device_node

 * data structure to represent these nodes inside of the kernel.

 *

 * Actually, it isn't even a DAG, because there are back pointers

 * which create cycles in the graph.

 *

 * mdesc_hdr and mdesc_elem describe the layout of the data structure

 * we get from the Hypervisor.

 Transport version */

 node block size */

 name block size */

 data block size */

 supported node types which can be registered */

 check to see if the node is supported for registration */

	/*

	 * Virtual device nodes are distinguished by:

	 * 1. "id" property

	 * 2. "name" property

	 * 3. parent node "cfg-handle" property

 DS port nodes use the "id" property to distinguish them */

 Run 'func' on nodes which are in A but not in B.  */

	/*

	 * Find the get_info, rel_info and node_match ops for the given

	 * node name

 If we didn't find a match, the node type is not supported */

 Check each node in B for node matching a_node */

 Find the ops for the given node name */

 If we didn't find ops for the given node name, it is not supported */

 Find the get_info op for the given node name */

 If we didn't find a get_info_func, the node name is not supported */

 Since we have an estimate of recursion depth, do a sanity check. */

		/**

		 * On systems without explicit socket descriptions socket

		 * is max_cache_id

	/* Identify unique cores by looking for cpus backpointed to by

	 * level 1 instruction caches.

	/**

	 * Identify unique highest level of shared cache by looking for cpus

	 * backpointed to by shared level N caches.

	/**

	 * Find the highest level of shared cache which pre-T7 is also

	 * the socket.

 If machine description exposes sockets data use it.*/

	/* On uniprocessor we only want the values for the

	 * real physical cpu the kernel booted onto, however

	 * cpu_data() only has one entry at index 0.

/* mdesc_open() - Grab a reference to mdesc_handle when /dev/mdesc is

 * opened. Hold this reference until /dev/mdesc is closed to ensure

 * mdesc data structure is not released underneath us. Store the

 * pointer to mdesc structure in private_data for read and seek to use

/* mdesc_close() - /dev/mdesc is being closed, release the reference to

 * mdesc structure.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Set up the VMAs to tell the VM about the vDSO.

 * Copyright 2007 Andi Kleen, SUSE Labs.

/*

 * Copyright (c) 2017 Oracle and/or its affiliates. All rights reserved.

/*

 * Allocate pages for the vdso and vvar, and copy in the vdso text from the

 * kernel image.

	/*

	 * First, the vdso text.  This is initialied data, an integral number of

	 * pages long.

	/*

	 * Now the vvar page.  This is uninitialized data.

 Shuffle the vdso up a bit, randomly. */

 This loses some more bits than a modulo, but is cheaper */

	/*

	 * First, get an unmapped region: then randomize it, and make sure that

	 * region is free.

	/*

	 * MAYWRITE to allow gdb to COW and set breakpoints

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2006 Andi Kleen, SUSE Labs.

 *

 * Fast user context implementation of clock_gettime, gettimeofday, and time.

 *

 * The code should have no internal unresolved relocations.

 * Check with readelf after changing.

 * Also alternative() doesn't work.

/*

 * Copyright (c) 2017 Oracle and/or its affiliates. All rights reserved.

/*

 * Compute the vvar page's address in the process address space, and return it

 * as a pointer to the vvar_data.

	/*

	 * vdso data page is the first vDSO page so grab the PC

	 * and move up a page to get to the data page.

	/*

	 * Unknown clock ID ? Fall back to the syscall.

	/*

	 * Unknown clock ID ? Fall back to the syscall.

			/*

			 * Assign before dividing to ensure that the division is

			 * done in the type of tv_usec, not tv_nsec.

			 *

			 * There cannot be > 1 billion usec in a second:

			 * do_realtime() has already distributed such overflow

			 * into tv_sec.  So we can assign it to an int safely.

 Avoid memcpy. Some old compilers fail to inline it */

			/*

			 * Assign before dividing to ensure that the division is

			 * done in the type of tv_usec, not tv_nsec.

			 *

			 * There cannot be > 1 billion usec in a second:

			 * do_realtime() has already distributed such overflow

			 * into tv_sec.  So we can assign it to an int safely.

 Avoid memcpy. Some old compilers fail to inline it */

/*

 * vdso2c - A vdso image preparation tool

 * Copyright (c) 2014 Andy Lutomirski and others

 * Licensed under the GPL v2

 *

 * vdso2c requires stripped and unstripped input.  It would be trivial

 * to fully strip the input in here, but, for reasons described below,

 * we need to write a section table.  Doing this is more or less

 * equivalent to dropping all non-allocatable sections, but it's

 * easier to let objcopy handle that instead of doing it ourselves.

 * If we ever need to do something fancier than what objcopy provides,

 * it would be straightforward to add here.

 *

 * We keep a section table for a few reasons:

 *

 * Binutils has issues debugging the vDSO: it reads the section table to

 * find SHT_NOTE; it won't look at PT_NOTE for the in-memory vDSO, which

 * would break build-id if we removed the section table.  Binutils

 * also requires that shstrndx != 0.  See:

 * https://sourceware.org/bugzilla/show_bug.cgi?id=17064

 *

 * elfutils might not look for PT_NOTE if there is a section table at

 * all.  I don't know whether this matters for any practical purpose.

 *

 * For simplicity, rather than hacking up a partial section table, we

 * just write a mostly complete one.  We omit non-dynamic symbols,

 * though, since they're rather large.

 *

 * Once binutils gets fixed, we might be able to drop this for all but

 * the 64-bit vdso, since build-id only works in kernel RPMs, and

 * systems that update to new enough kernel RPMs will likely update

 * binutils in sync.  build-id has never worked for home-built kernel

 * RPMs without manual symlinking, and I suspect that no one ever does

 * that.

/*

 * Copyright (c) 2017 Oracle and/or its affiliates. All rights reserved.

 Symbols that we need in vdso2c. */

/*

 * Evil macros for big-endian reads and writes

	/*

	 * Figure out the struct name.  If we're writing to a .so file,

	 * generate raw output insted.

/*

 * Copyright (c) 2017 Oracle and/or its affiliates. All rights reserved.

/*

 * in case of a 32 bit VDSO for a 64 bit kernel fake a 32 bit kernel

 * configuration

 SPDX-License-Identifier: GPL-2.0

/*

 * bitext.c: kernel little helper (of bit shuffling variety).

 *

 * Copyright (C) 2002 Pete Zaitcev <zaitcev@yahoo.com>

 *

 * The algorithm to search a zero bit string is geared towards its application.

 * We expect a couple of fixed sizes of requests, so a rotating counter, reset

 * by align size, should provide fast enough search while maintaining low

 * fragmentation.

/**

 * bit_map_string_get - find and set a bit string in bit map.

 * @t: the bit map.

 * @len: requested string length

 * @align: requested alignment

 *

 * Returns offset in the map or -1 if out of space.

 *

 * Not safe to call from an interrupt (uses spin_lock).

 siamese twins */

 align is overloaded to be the page color */

 P3 */ printk(KERN_ERR

 Much too late to do any good, but alas... */

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

/*

 * Implement the sparc iomap interfaces

 Create a virtual mapping cookie for an IO port range */

 Nothing to do */

 nothing to do */

 SPDX-License-Identifier: GPL-2.0

/*

 * atomic32.c: 32-bit atomic_t implementation

 *

 * Copyright (C) 2004 Keith M Wesolowski

 * Copyright (C) 2007 Kyle McMartin

 * 

 * Based on asm-parisc/atomic.h Copyright (C) 2000 Philipp Rumpf

 SMP */

 SMP */

 Atomic operations are already serializing */

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

/*

 * PeeCeeI.c: The emerging standard...

 *

 * Copyright (C) 1997 David S. Miller (davem@caip.rutgers.edu)

 src is naturally aligned */

 2-byte alignment */

 Hold three bytes in l each time, grab a byte from l2 */

 Hold a byte in l each time, grab 3 bytes from l2 */

 SPDX-License-Identifier: GPL-2.0

/*

 * printf.c:  Internal prom library printf facility.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 * Copyright (C) 1997 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 * Copyright (c) 2002 Pete Zaitcev (zaitcev@yahoo.com)

 *

 * We used to warn all over the code: DO NOT USE prom_printf(),

 * and yet people do. Anton's banking code was outputting banks

 * with prom_printf for most of the 2.4 lifetime. Since an effective

 * stick is not available, we deployed a carrot: an early printk

 * through PROM by means of -p boot option. This ought to fix it.

 * USE printk; if you need, deploy -p.

 SPDX-License-Identifier: GPL-2.0

/*

 * init.c:  Initialize internal variables used by the PROM

 *          library functions.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 * Copyright (C) 1998 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 The root node of the prom device tree. */

 Pointer to the device tree operations structure. */

/* You must call prom_init() before you attempt to use any of the

 * routines in the prom library.

 * It gets passed the pointer to the PROM vector.

 Initialization successful. */

 SPDX-License-Identifier: GPL-2.0

/*

 * p1275.c: Sun IEEE 1275 PROM low level interface routines

 *

 * Copyright (C) 1996,1997 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 0x00 */

 0x08 */

/*

 * This provides SMP safety on the p1275buf.

 SPDX-License-Identifier: GPL-2.0

/* console.c: Routines that deal with sending and receiving IO

 *            to/from the current console device using the PROM.

 *

 * Copyright (C) 1995 David S. Miller (davem@davemloft.net)

 * Copyright (C) 1996,1997 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 SPDX-License-Identifier: GPL-2.0

/*

 * misc.c:  Miscellaneous prom functions that don't belong

 *          anywhere else.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 * Copyright (C) 1996,1997 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 Reset and reboot the machine with the command 'bcommand'. */

 Forth evaluate the expression contained in 'fstring'. */

/* Drop into the prom, with the chance to continue with the 'go'

 * prom command.

/* Drop into the prom, but completely terminate the program.

 * No chance of continuing.

 PROM is out to get me -DaveM */

 if nothing else helps, we just halt */

/* Get the idprom and stuff it into buffer 'idbuf'.  Returns the

 * format type.  'num_bytes' is the number of bytes that your idbuf

 * has space for.  Returns 0xff on error.

 Load explicit I/D TLB entries. */

/* Set aside physical memory which is not touched or modified

 * across soft resets.

	/* Next we get "phys_high" then "phys_low".  On 64-bit

	 * the phys_high cell is don't care since the phys_low

	 * cell has the full value.

/* Get "Unumber" string for the SIMM at the given

 * memory address.  Usually this will be of the form

 * "Uxxxx" where xxxx is a decimal number which is

 * etched into the motherboard next to the SIMM slot

 * in question.

 Power management extensions. */

 SPDX-License-Identifier: GPL-2.0

/*

 * init.c:  Initialize internal variables used by the PROM

 *          library functions.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 * Copyright (C) 1996,1997 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 OBP version string. */

 The root node of the prom device tree. */

/* You must call prom_init() before you attempt to use any of the

 * routines in the prom library.

 * It gets passed the pointer to the PROM vector.

 SPDX-License-Identifier: GPL-2.0

/*

 * tree.c: Basic device tree traversal/scanning for the Linux

 *         prom library.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 Internal version of prom_getchild that does not alter return values. */

/* Return the child of node 'node' or zero if no this node has no

 * direct descendent.

 Internal version of prom_getsibling that does not alter return values. */

/* Return the next sibling of node 'node' or zero if no more siblings

 * at this level of depth in the tree.

/* Return the length in bytes of property 'prop' at node 'node'.

 * Return -1 on error.

/* Acquire a property 'prop' at node 'node' and place it in

 * 'buffer' which has a size of 'bufsize'.  If the acquisition

 * was successful the length will be returned, else -1 is returned.

 Ok, things seem all right. */

/* Acquire an integer property and return its value.  Returns -1

 * on failure.

/* Acquire an integer property, upon error return the passed default

 * integer.

 Acquire a boolean property, 1=TRUE 0=FALSE. */

/* Acquire a property whose value is a string, returns a null

 * string on error.  The char pointer is the user supplied string

 * buffer.

/* Search siblings at 'node_start' for a node with name

 * 'nodename'.  Return node if successful, zero if not.

 Should this ever happen? */

 Interal version of nextprop that does not alter return values. */

/* Return the property type string after property type 'oprop'

 * at node 'node' .  Returns empty string if no more

 * property types for this node.

 path '.../' is legal */

/* Set property 'pname' at node 'node' to value 'value' which has a length

 * of 'size' bytes.  Return the number of bytes the prom accepted.

 SPDX-License-Identifier: GPL-2.0

/*

 * console.c: Routines that deal with sending and receiving IO

 *            to/from the current console device using the PROM.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 * Copyright (C) 1998 Pete Zaitcev <zaitcev@yahoo.com>

/* Non blocking put character to console device, returns -1 if

 * unsuccessful.

 Ugh, we could spin forever on unsupported proms ;( */

 SPDX-License-Identifier: GPL-2.0

/*

 * bootstr.c:  Boot string/argument acquisition from the PROM.

 *

 * Copyright(C) 1995 David S. Miller (davem@caip.rutgers.edu)

 This check saves us from a panic when bootfd patches args. */

 Start from 1 and go over fd(0,0,0)kernel */

 Leave place for space and null. */

 We might issue a warning here. */

 We might issue a warning here. */

		/*

		 * V3 PROM cannot supply as with more than 128 bytes

		 * of an argument. But a smart bootstrap loader can.

 SPDX-License-Identifier: GPL-2.0

/*

 * misc.c:  Miscellaneous prom functions that don't belong

 *          anywhere else.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 Reset and reboot the machine with the command 'bcommand'. */

 Never get here. */

 Forth evaluate the expression contained in 'fstring'. */

/* Drop into the prom, with the chance to continue with the 'go'

 * prom command.

/* Drop into the prom, but completely terminate the program.

 * No chance of continuing.

 Never get here. */

 PROM is out to get me -DaveM */

 Set prom sync handler to call function 'funcp'. */

/* Get the idprom and stuff it into buffer 'idbuf'.  Returns the

 * format type.  'num_bytes' is the number of bytes that your idbuf

 * has space for.  Returns 0xff on error.

 Get the major prom version number. */

 Get the prom plugin-revision. */

 Get the prom firmware print revision. */

 SPDX-License-Identifier: GPL-2.0

/*

 * ranges.c: Handle ranges in newer proms for obio/sbus.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 * Copyright (C) 1997 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 Adjust register values based upon the ranges parameters. */

 Fount it */

 oops */

 oops */

 Apply probed obio ranges to registers passed, if no ranges return. */

 Check for obio and sbus ranges. */

 SPDX-License-Identifier: GPL-2.0

/*

 * mp.c:  OpenBoot Prom Multiprocessor support routines.  Don't call

 *        these on a UP or else you will halt and catch fire. ;)

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

/* Start cpu with prom-tree node 'cpunode' using context described

 * by 'ctable_reg' in context 'ctx' at program counter 'pc'.

 *

 * XXX Have to look into what the return values mean. XXX

 SPDX-License-Identifier: GPL-2.0

/*

 * tree.c: Basic device tree traversal/scanning for the Linux

 *         prom library.

 *

 * Copyright (C) 1995 David S. Miller (davem@caip.rutgers.edu)

 * Copyright (C) 1996,1997 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

/* Return the child of node 'node' or zero if no this node has no

 * direct descendent.

/* Return the next sibling of node 'node' or zero if no more siblings

 * at this level of depth in the tree.

/* Return the length in bytes of property 'prop' at node 'node'.

 * Return -1 on error.

/* Acquire a property 'prop' at node 'node' and place it in

 * 'buffer' which has a size of 'bufsize'.  If the acquisition

 * was successful the length will be returned, else -1 is returned.

/* Acquire an integer property and return its value.  Returns -1

 * on failure.

/* Acquire an integer property, upon error return the passed default

 * integer.

 Acquire a boolean property, 1=TRUE 0=FALSE. */

/* Acquire a property whose value is a string, returns a null

 * string on error.  The char pointer is the user supplied string

 * buffer.

/* Does the device at node 'node' have name 'name'?

 * YES = 1   NO = 0

/* Search siblings at 'node_start' for a node with name

 * 'nodename'.  Return node if successful, zero if not.

 Should this ever happen? */

/* Return the first property type for node 'node'.

 * buffer should be at least 32B in length

/* Return the property type string after property type 'oprop'

 * at node 'node' .  Returns NULL string if no more

 * property types for this node.

/* Set property 'pname' at node 'node' to value 'value' which has a length

 * of 'size' bytes.  Return the number of bytes the prom accepted.

 SPDX-License-Identifier: GPL-2.0

/*

 * bootstr.c:  Boot string/argument acquisition from the PROM.

 *

 * Copyright(C) 1995 David S. Miller (davem@caip.rutgers.edu)

 * Copyright(C) 1996,1998 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

/* WARNING: The boot loader knows that these next three variables come one right

 *          after another in the .data section.  Do not move this stuff into

 *          the .bss section or it will break things.

/* We limit BARG_LEN to 1024 because this is the size of the

 * 'barg_out' command line buffer in the SILO bootloader.

 This check saves us from a panic when bootfd patches args. */

 SPDX-License-Identifier: GPL-2.0

/* memory.c: Prom routine for acquiring various bits of information

 *           about RAM on the machine, both virtual and physical.

 *

 * Copyright (C) 1995, 2008 David S. Miller (davem@davemloft.net)

 * Copyright (C) 1997 Michael A. Griffith (grif@acm.org)

 Initialize the memory lists based upon the prom version. */

 Sentinel.  */

 SPDX-License-Identifier: GPL-2.0

 Cheetah's I-cache is fully coherent.  */

 The 10-bit branch displacement for CBCOND is split into two fields */

 Map BPF registers to SPARC registers */

 return value from in-kernel function, and exit value from eBPF */

 arguments from eBPF program to in-kernel function */

 callee saved registers that in-kernel function will preserve */

 read-only frame pointer to access stack */

 temporary register for internal BPF JIT */

 Emit 32-bit constant, zero extended. */

 Emit 32-bit constant, sign extended. */

 or %g0, K, DEST */

 or %g0, K, DEST */

 or %g0, K, DEST */

 Now shift it up into place.  */

	/* If there is a low immediate part piece, finish up by

	 * putting that in as well.

	/* These two tests also take care of all of the one

	 * instruction cases.

	/* 1) mov	-1, %reg

	 *    sllx	%reg, shift, %reg

	 * 2) mov	-1, %reg

	 *    srlx	%reg, shift, %reg

	 * 3) mov	some_small_const, %reg

	 *    sllx	%reg, shift, %reg

	/* Now a range of 22 or less bits set somewhere.

	 * 1) sethi	%hi(focus_bits), %reg

	 *    sllx	%reg, shift, %reg

	 * 2) sethi	%hi(focus_bits), %reg

	 *    srlx	%reg, shift, %reg

		/* If lowest_bit_set == 10 then a sethi alone could

		 * have done it.

 Ok, now 3 instruction sequences.  */

	/* We may be able to do something quick

	 * when the constant is negated, so try that.

		/* NOTE: The trailing bits get XOR'd so we need the

		 * non-negated bits, not the negated ones.

	/* 1) sethi	%hi(xxx), %reg

	 *    or	%reg, %lo(xxx), %reg

	 *    sllx	%reg, yyy, %reg

		/* So what we know is that the set bits straddle the

		 * middle of the 64-bit word.

	/* 1) sethi	%hi(high_bits), %reg

	 *    or	%reg, %lo(high_bits), %reg

	 *    sllx	%reg, 32, %reg

	 *    or	%reg, low_bits, %reg

 Oh well, we tried... Do a full 64-bit decomposition.  */

			/* Make sure we dont leak kernel information to the

			 * user.

			/* Make sure we dont leak kernel information to the

			 * user.

 Just skip the save instruction and the ctx register move.  */

 save %sp, -176, %sp */

 tail_call_cnt = 0 */

 If you add anything here, adjust BPF_TAILCALL_PROLOGUE_SKIP above. */

 ret (jmpl %i7 + 8, %g0) */

 restore %i5, %g0, %o0 */

 dst = src */

 dst = dst OP src */

 dst = -dst */

 nop */

 dst = BSWAP##imm(dst) */

 tmp  = dst >> 24 */

 tmp2 = dst >> 16 */

 tmp2 = tmp2 & 0xff */

 tmp2 = tmp2 << 8 */

 tmp  = tmp | tmp2 */

 tmp2 = dst >> 8 */

 tmp2 = tmp2 & 0xff */

 tmp2 = tmp2 << 16 */

 tmp  = tmp | tmp2 */

 dst	= dst & 0xff */

 dst  = dst << 24 */

 dst  = dst | tmp */

 dst = imm */

 dst = dst OP imm */

 JUMP off */

 IF (dst COND src) JUMP off */

 IF (dst COND imm) JUMP off */

 function call */

 tail call */

 function return */

		/* Optimization: when last instruction is EXIT,

 dst = imm64 */

 LDX: dst = *(size *)(src + off) */

 speculation barrier */

 ST: *(size *)(dst + off) = imm */

 STX: *(size *)(dst + off) = src */

 lock *(u32 *)(dst + off) += src */

 STX XADD: lock *(u64 *)(dst + off) += src */

 We are guaranteed to have aligned memory. */

 ta 5 */

	/* If blinding was requested and we failed during blinding,

	 * we must fall back to the interpreter.

	/* Longest sequence emitted is for bswap32, 12 instructions.  Pre-cook

	 * the offset array so that we converge faster.

 Now we know the actual image size. */

 SPDX-License-Identifier: GPL-2.0

 might call external helpers */

 ebx is used */

 use mem[] for temporary storage */

 umul */

 udiv */

 sub %g0, r_A, r_A */				\

 or %g0, FROM, TO */				\

 or %g0, %g0, REG */				\

 sethi %hi(K), REG */					\

 or REG, %lo(K), REG */				\

	/* Emit

	 *

	 *	OP	r_A, r_X, r_A

	/* Emit either:

	 *

	 *	OP	r_A, K, r_A

	 *

	 * or

	 *

	 *	sethi	%hi(K), r_TMP

	 *	or	r_TMP, %lo(K), r_TMP

	 *	OP	r_A, r_TMP, r_A

	 *

	 * depending upon whether K fits in a signed 13-bit

	 * immediate instruction field.  Emit nothing if K

	 * is zero.

 or %g0, K, DEST */					\

/* A note about branch offset calculations.  The addrs[] array,

 * indexed by BPF instruction, records the address after all the

 * sparc instructions emitted for that BPF instruction.

 *

 * The most common case is to emit a branch at the end of such

 * a code sequence.  So this would be two instructions, the

 * branch and it's delay slot.

 *

 * Therefore by default the branch emitters calculate the branch

 * offset field as:

 *

 *	destination - (addrs[i] - 8)

 *

 * This "addrs[i] - 8" is the address of the branch itself or

 * what "." would be in assembler notation.  The "8" part is

 * how we take into consideration the branch and it's delay

 * slot mentioned above.

 *

 * Sometimes we need to emit a branch earlier in the code

 * sequence.  And in these situations we adjust "destination"

 * to accommodate this difference.  For example, if we needed

 * to emit a branch (and it's delay slot) right before the

 * final instruction emitted for a BPF opcode, we'd use

 * "destination + 4" instead of just plain "destination" above.

 *

 * This is why you see all of these funny emit_branch() and

 * emit_jump() calls with adjusted offsets.

	/* Before first pass, make a rough estimation of addrs[]

	 * each bpf instruction is translated to less than 64 bytes

 epilogue address */

 no prologue/epilogue for trivial filters (RET something) */

 Prologue */

 Make sure we dont leek kernel memory. */

			/* If this filter needs to access skb data,

			 * load %o4 and %o5 with:

			 *  %o4 = skb->len - skb->data_len

			 *  %o5 = skb->data

			 * And also back up %o7 into r_saved_O7 so we can

			 * invoke the stubs using 'call'.

 Make sure we dont leak kernel information to the user. */

 A = 0 */

 A += X; */

 A += K; */

 A -= X; */

 A -= K */

 A &= X */

 A &= K */

 A |= X */

 A |= K */

 A ^= X; */

 A ^= K */

 A <<= X */

 A <<= K */

 A >>= X */

 A >>= K */

 A *= X; */

 A *= K */

 A /= K with K != 0*/

				/* The Sparc v8 architecture requires

				 * three instructions between a %y

				 * register write and the first use.

 A /= X; */

 delay slot */

				/* The Sparc v8 architecture requires

				 * three instructions between a %y

				 * register write and the first use.

 jmpl %r_saved_O7 + 8, %g0 */

 delay slot */

 same targets, can avoid doing the test :) */

 delay slot */

 delay slot */

 hmm, too complex filter, give up with jit compiler */

		/* last bpf instruction is always a RET :

		 * use it to give the cleanup instruction(s) addr

 jmpl; mov r_A,%o0; */

 add %sp, X, %sp; */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

   Simple utility to make a single-image install kernel with initial ramdisk

   for Sparc tftpbooting without need to set up nfs.



   Copyright (C) 1996,1997 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

   Pete Zaitcev <zaitcev@yahoo.com> endian fixes for cross-compiles, 2000.

   Copyright (C) 2011 Sam Ravnborg <sam@ravnborg.org>



/*

 * Note: run this on an a.out kernel (use elftoaout for it),

 * as PROM looks for a.out image only.

 align to power-of-two size */

 read two bytes as big endian */

 save 4 bytes as big endian */

 fs_img.gz is an image of initial ramdisk. */

/*

 * Find address for start and end in System.map.

 * The file looks like this:

 * f0004000 ... _start

 * f0379f79 ... _end

 * 1234567890123456

 * ^coloumn 1

 * There is support for 64 bit addresses too.

 *

 * Return 0 if either start or end is not found

/*

 * Find the HdrS entry from head_32/head_64.

 * We check if it is at the beginning of the file (sparc64 case)

 * and if not we search for it.

 * When we search do so in steps of 4 as HdrS is on a 4-byte aligned

 * address (it is on same alignment as sparc instructions)

 * Return the offset to the HdrS entry (as off_t)

  Find the gokernel label */

 Decode offset from branch instruction */

 Go back 512 bytes so we do not miss HdrS */

 skip a.out header */

	/*

	 * We need to fill in values for

	 * sparc_ramdisk_image + sparc_ramdisk_size

	 * To locate these symbols search for the "HdrS" text which appear

	 * in the image a little before the gokernel symbol.

	 * See definition of these in init_32.S

 skip HdrS + LINUX_VERSION_CODE + HdrS version */

	/*

	 * root_flags = 0

	 * root_dev = 1 (RAMDISK_MAJOR)

	 * ram_flags = 0

	 * sparc_ramdisk_image = "PAGE aligned address after _end")

	 * sparc_ramdisk_size = size of image

 For sparc64 update a_text and clear a_data + a_bss */

 a_text */

 a_data */

 a_bss */

 seek page aligned boundary in the image file and add boot image */

 SPDX-License-Identifier: GPL-2.0

/*

 * hibernate.c:  Hibernaton support specific for sparc64.

 *

 * Copyright (C) 2013 Kirill V Tkhai (tkhai@yandex.ru)

/*

 *	pfn_is_nosave - check if given pfn is in the 'nosave' section

 SPDX-License-Identifier: GPL-2.0

/* This is a dummy device table linked into all of the crypto

 * opcode drivers.  It serves to trigger the module autoloading

 * mechanisms in userspace which scan the OF device tree and

 * load any modules which have device table entries that

 * match OF device nodes.

 SPDX-License-Identifier: GPL-2.0-only

/* Glue code for AES encryption optimized for sparc64 crypto opcodes.

 *

 * This is based largely upon arch/x86/crypto/aesni-intel_glue.c

 *

 * Copyright (C) 2008, Intel Corp.

 *    Author: Huang Ying <ying.huang@intel.com>

 *

 * Added RFC4106 AES-GCM support for 128-bit keys under the AEAD

 * interface for 64-bit kernels.

 *    Authors: Adrian Hoban <adrian.hoban@intel.com>

 *             Gabriele Paoloni <gabriele.paoloni@intel.com>

 *             Tadeusz Struk (tadeusz.struk@intel.com)

 *             Aidan O'Mahony (aidan.o.mahony@intel.com)

 *    Copyright (c) 2010, Intel Corporation.

 SPDX-License-Identifier: GPL-2.0-only

/* Glue code for SHA1 hashing optimized for sparc64 crypto opcodes.

 *

 * This is based largely upon arch/x86/crypto/sha1_ssse3_glue.c

 *

 * Copyright (c) Alan Smithee.

 * Copyright (c) Andrew McDonald <andrew@mcdonald.org.uk>

 * Copyright (c) Jean-Francois Dive <jef@linuxbe.org>

 * Copyright (c) Mathias Krause <minipli@googlemail.com>

 Handle the fast case right here */

 Add padding and return the message digest. */

 Pad out to 56 mod 64 and append length */

 We need to fill a whole block for __sha1_sparc64_update() */

 Store state in digest */

 Wipe context */

 SPDX-License-Identifier: GPL-2.0-only

/* Glue code for CRC32C optimized for sparc64 crypto opcodes.

 *

 * This is based largely upon arch/x86/crypto/crc32c-intel.c

 *

 * Copyright (C) 2008 Intel Corporation

 * Authors: Austin Zhang <austin_zhang@linux.intel.com>

 *          Kent Liu <kent.liu@intel.com>

/*

 * Setting the seed allows arbitrary accumulators and flexible XOR policy

 * If your algorithm starts with ~0, then XOR with ~0 before you set

 * the seed.

 SPDX-License-Identifier: GPL-2.0-only

/* Glue code for MD5 hashing optimized for sparc64 crypto opcodes.

 *

 * This is based largely upon arch/x86/crypto/sha1_ssse3_glue.c

 * and crypto/md5.c which are:

 *

 * Copyright (c) Alan Smithee.

 * Copyright (c) Andrew McDonald <andrew@mcdonald.org.uk>

 * Copyright (c) Jean-Francois Dive <jef@linuxbe.org>

 * Copyright (c) Mathias Krause <minipli@googlemail.com>

 * Copyright (c) Cryptoapi developers.

 * Copyright (c) 2002 James Morris <jmorris@intercode.com.au>

 Handle the fast case right here */

 Add padding and return the message digest. */

 Pad out to 56 mod 64 and append length */

 We need to fill a whole block for __md5_sparc64_update() */

 Store state in digest */

 Wipe context */

 SPDX-License-Identifier: GPL-2.0-only

/* Glue code for DES encryption optimized for sparc64 crypto opcodes.

 *

 * Copyright (C) 2012 David S. Miller <davem@davemloft.net>

	/* Even though we have special instructions for key expansion,

	 * we call des_verify_key() so that we don't have to write our own

	 * weak key detection code.

 SPDX-License-Identifier: GPL-2.0-only

/* Glue code for SHA256 hashing optimized for sparc64 crypto opcodes.

 *

 * This is based largely upon crypto/sha256_generic.c

 *

 * Copyright (c) Jean-Luc Cooke <jlcooke@certainkey.com>

 * Copyright (c) Andrew McDonald <andrew@mcdonald.org.uk>

 * Copyright (c) 2002 James Morris <jmorris@intercode.com.au>

 * SHA224 Support Copyright 2007 Intel Corporation <jonathan.lynch@intel.com>

 Handle the fast case right here */

 Pad out to 56 mod 64 and append length */

 We need to fill a whole block for __sha256_sparc64_update() */

 Store state in digest */

 Wipe context */

 SPDX-License-Identifier: GPL-2.0-only

/* Glue code for CAMELLIA encryption optimized for sparc64 crypto opcodes.

 *

 * Copyright (C) 2012 David S. Miller <davem@davemloft.net>

 SPDX-License-Identifier: GPL-2.0-only

/* Glue code for SHA512 hashing optimized for sparc64 crypto opcodes.

 *

 * This is based largely upon crypto/sha512_generic.c

 *

 * Copyright (c) Jean-Luc Cooke <jlcooke@certainkey.com>

 * Copyright (c) Andrew McDonald <andrew@mcdonald.org.uk>

 * Copyright (c) 2003 Kyle McMartin <kyle@debian.org>

 Handle the fast case right here */

 Save number of bits */

 Pad out to 112 mod 128 and append length */

 We need to fill a whole block for __sha512_sparc64_update() */

 Store state in digest */

 Wipe context */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC tlb.c

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2003 Matjaz Breskvar <phoenix@bsemi.com>

 * Copyright (C) 2010-2011 Julius Baxter <julius.baxter@orsoc.se>

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

/*

 * Invalidate all TLB entries.

 *

 * This comes down to setting the 'valid' bit for all xTLBMR registers to 0.

 * Easiest way to accomplish this is to just zero out the xTLBMR register

 * completely.

 *

 Determine number of sets for IMMU. */

 FIXME: Assumption is I & D nsets equal. */

/*

 * Invalidate a single page.  This is what the xTLBEIR register is for.

 *

 * There's no point in checking the vma for PAGE_EXEC to determine whether it's

 * the data or instruction TLB that should be flushed... that would take more

 * than the few instructions that the following compiles down to!

 *

 * The case where we don't have the xTLBEIR register really only works for

 * MMU's with a single way and is hard-coded that way.

/*

 * Invalidate the selected mm context only.

 *

 * FIXME: Due to some bug here, we're flushing everything for now.

 * This should be changed to loop over over mm and call flush_tlb_range.

	/* Was seeing bugs with the mm struct passed to us. Scrapped most of

 Several architctures do this */

 called in schedule() just before actually doing the switch_to */

	/* remember the pgd for the fault handlers

	 * this is similar to the pgd register in some other CPU's.

	 * we need our own copy of it because current and active_mm

	 * might be invalid at points where we still need to derefer

	 * the pgd.

	/* We don't have context support implemented, so flush all

	 * entries belonging to previous map

/*

 * Initialize the context related info for a new mm_struct

 * instance.

/* called by __exit_mm to destroy the used MMU context if any before

 * destroying the mm itself. this is only called when the last user of the mm

 * drops it.

 called once during VM initialization, from init.c */

 Do nothing... */

 invalidate the entire TLB */

 flush_tlb_all(); */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC idle.c

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2003 Matjaz Breskvar <phoenix@bsemi.com>

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

	/*

	 * We use only ZONE_NORMAL

/*

 * Map all physical memory into kernel's address space.

 *

 * This is explicitly coded for two-level page tables, so if you need

 * something else then this needs to change.

	/* These mark extents of read-only kernel pages...

	 * ...from vmlinux.lds.S

 Alloc one page for holding PTE's... */

 Fill the newly allocated page with PTE'S */

 clear out the init_mm.pgd that will contain the kernel's mappings */

	/* make sure the current pgd table points to something sane

	 * (even if it is most probably not used until the next

	 *  switch_mm)

 self modifying code ;) */

	/* Since the old TLB miss handler has been running up until now,

	 * the kernel pages are still all RW, so we can still modify the

	 * text directly... after this change and a TLB flush, the kernel

	 * pages will become RO.

		/* Soft ordering constraint to ensure that dtlb_vector is

		 * the last thing updated

	/* Soft ordering constraint to ensure that cache invalidation and

	 * TLB flush really happen _after_ code has been modified.

 Invalidate instruction caches after code modification */

	/* New TLB miss handlers and kernel page tables are in now place.

	 * Make sure that page flags get updated for all pages in TLB by

	 * flushing the TLB and forcing all TLB entries to be recreated

	 * from their page table flags.

 References to section boundaries */

 clear the zero-page */

 this will put all low memory onto the freelists */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC cache.c

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2015 Jan Henrik Weinstock <jan.weinstock@rwth-aachen.de>

	/*

	 * Since icaches do not snoop for updated data on OpenRISC, we

	 * must write back and invalidate any dirty pages manually. We

	 * can skip data pages, since they will not end up in icaches.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC fault.c

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2003 Matjaz Breskvar <phoenix@bsemi.com>

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

 updated by do_page_fault() */

 updated by do_page_fault() */

/* __PHX__ :: - check the vmalloc_fault in do_page_fault()

 *            - also look into include/asm/mmu_context.h

/*

 * This routine handles page faults.  It determines the address,

 * and the problem, and then passes it off to one of the appropriate

 * routines.

 *

 * If this routine detects a bad access, it returns 1, otherwise it

 * returns 0.

	/*

	 * We fault-in kernel-space virtual memory on-demand. The

	 * 'reference' page table is init_mm.pgd.

	 *

	 * NOTE! We MUST NOT take any locks for this case. We may

	 * be in an interrupt or a critical region, and should

	 * only copy the information from the master page table,

	 * nothing more.

	 *

	 * NOTE2: This is done so that, when updating the vmalloc

	 * mappings we don't have to walk all processes pgdirs and

	 * add the high mappings all at once. Instead we do it as they

	 * are used. However vmalloc'ed page entries have the PAGE_GLOBAL

	 * bit set so sometimes the TLB can use a lingering entry.

	 *

	 * This verifies that the fault happens in kernel space

	 * and that the fault was not a protection error.

 If exceptions were enabled, we can reenable them here */

 Exception was in userspace: reenable interrupts */

		/* If exception was in a syscall, then IRQ's may have

		 * been enabled or disabled.  If they were enabled,

		 * reenable them.

	/*

	 * If we're in an interrupt or have no user

	 * context, we must not take the fault..

		/*

		 * accessing the stack below usp is always a bug.

		 * we get page-aligned addresses so we can only check

		 * if we're within a page from usp, but that might be

		 * enough to catch brutal errors at least.

	/*

	 * Ok, we have a good vm_area for this memory access, so

	 * we can handle it..

 first do some preliminary protection checks */

 not present */

 are we trying to execute nonexecutable area */

	/*

	 * If for any reason at all we couldn't handle the fault,

	 * make sure we exit gracefully rather than endlessly redo

	 * the fault.

RGD modeled on Cris */

			 /* No need to mmap_read_unlock(mm) as we would

			 * have already released it in __lock_page_or_retry

			 * in mm/filemap.c.

	/*

	 * Something tried to access memory that isn't in our memory map..

	 * Fix it, but check if it's kernel or user first..

 User mode accesses just cause a SIGSEGV */

	/* Are we prepared to handle this kernel fault?

	 *

	 * (The kernel has valid exception-points in the source

	 *  when it acesses user-memory. When it fails in one

	 *  of those points, we find it in a table and do a jump

	 *  to some fixup code that loads an appropriate error

	 *  code)

 Adjust the instruction pointer in the stackframe */

	/*

	 * Oops. The kernel tried to access some bad page. We'll have to

	 * terminate things with extreme prejudice.

	/*

	 * We ran out of memory, or some other thing happened to us that made

	 * us unable to handle the page fault gracefully.

	/*

	 * Send a sigbus, regardless of whether we were in kernel

	 * or user mode.

 Kernel mode? Handle exceptions or die */

		/*

		 * Synchronize this task's top level page-table

		 * with the 'reference' page table.

		 *

		 * Use current_pgd instead of tsk->active_mm->pgd

		 * since the latter might be unavailable if this

		 * code is executed in a misfortunately run irq

		 * (like inside schedule() between switch_mm and

		 *  switch_to...).

/*

		phx_warn("do_page_fault(): vmalloc_fault will not work, "

			 "since current_pgd assign a proper value somewhere\n"

			 "anyhow we don't need this at the moment\n");



		phx_mmu("vmalloc_fault");

		/* Since we're two-level, we don't need to do both

		 * set_pgd and set_pmd (they do the same thing). If

		 * we go three-level at some point, do the right thing

		 * with pgd_present and set_pgd here.

		 *

		 * Also, since the vmalloc area is global, we don't

		 * need to copy individual PTE's, it is enough to

		 * copy the pgd pointer into the pte page of the

		 * root task. If that is there, we'll find our pte if

		 * it exists.

		/* Make sure the actual PTE exists as well to

		 * catch kernel vmalloc-area accesses to non-mapped

		 * addresses. If we don't do this, this will just

		 * silently loop forever.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC ioremap.c

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2003 Matjaz Breskvar <phoenix@bsemi.com>

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

/*

 * Remap an arbitrary physical address space into the kernel virtual

 * address space. Needed when the kernel wants to access high addresses

 * directly.

 *

 * NOTE! We need to allow non-page-aligned mappings too: we will obviously

 * have to convert them into an offset in a page-aligned mapping, but the

 * caller shouldn't need to know that small detail.

 Don't allow wraparound or zero size */

	/*

	 * Mappings have to be page-aligned

	/* If the page is from the fixmap pool then we just clear out

	 * the fixmap mapping.

		/* This is a bit broken... we don't really know

		 * how big the area is so it's difficult to know

		 * how many fixed pages to invalidate...

		 * just flush tlb and hope for the best...

		 * consider this a FIXME

		 *

		 * Really we should be clearing out one or more page

		 * table entries for these virtual addresses so that

		 * future references cause a page fault... for now, we

		 * rely on two things:

		 *   i)  this code never gets called on known boards

		 *   ii) invalid accesses to the freed areas aren't made

/**

 * OK, this one's a bit tricky... ioremap can get called before memory is

 * initialized (early serial console does this) and will want to alloc a page

 * for its mapping.  No userspace pages will ever get allocated before memory

 * is initialized so this applies only to kernel pages.  In the event that

 * this is called before memory is initialized we allocate the page using

 * the memblock infrastructure.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC process.c

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2003 Matjaz Breskvar <phoenix@bsemi.com>

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

 *

 * This file handles the architecture-dependent parts of process handling...

/*

 * Pointer to Current thread info structure.

 *

 * Used at user space -> kernel transitions.

 Give a grace period for failure to restart of 1s */

 Whoops - the platform was unable to reboot. Tell the user! */

/*

 * Similar to machine_power_off, but don't shut off power.  Add code

 * here to freeze the system for e.g. post-mortem debug purpose when

 * possible.  This halt has nothing to do with the idle halt.

 If or when software power-off is implemented, add code here.  */

/*

 * Send the doze signal to the cpu if available.

 * Make sure, that all interrupts are enabled

/*

 * When a process does an "exec", machine state like FPU and debug

 * registers need to be reset.  This is a hook function for that.

 * Currently we don't have any such state to reset, so this is empty.

 __PHX__ cleanup this mess */

/*

 * Copy the thread-specific (arch specific) info from the current

 * process to the new one p

/*

 * copy_thread

 * @clone_flags: flags

 * @usp: user stack pointer or fn for kernel thread

 * @arg: arg to fn for kernel thread; always NULL for userspace thread

 * @p: the newly created task

 * @tls: the Thread Local Storage pointer for the new process

 *

 * At the top of a newly initialized kernel stack are two stacked pt_reg

 * structures.  The first (topmost) is the userspace context of the thread.

 * The second is the kernelspace context of the thread.

 *

 * A kernel thread will not be returning to userspace, so the topmost pt_regs

 * struct can be uninitialized; it _does_ need to exist, though, because

 * a kernel thread can become a userspace thread by doing a kernel_execve, in

 * which case the topmost context will be initialized and used for 'returning'

 * to userspace.

 *

 * The second pt_reg struct needs to be initialized to 'return' to

 * ret_from_fork.  A kernel thread will need to set r20 to the address of

 * a function to call into (with arg in r22); userspace threads need to set

 * r20 to NULL in which case ret_from_fork will just continue a return to

 * userspace.

 *

 * A kernel thread 'fn' may return; this is effectively what happens when

 * kernel_execve is called.  In that case, the userspace pt_regs must have

 * been initialized (which kernel_execve takes care of, see start_thread

 * below); ret_from_fork will then continue its execution causing the

 * 'kernel thread' to return to userspace as a userspace thread.

 Locate userspace context on stack... */

 redzone */

 ...and kernel context */

 redzone */

 fn, kernel thread */

		/*

		 * For CLONE_SETTLS set "tp" (r10) to the TLS pointer.

 Result from fork() */

 Userspace thread */

	/*

	 * _switch wants the kernel stack page in pt_regs->sp so that it

	 * can restore it to thread_info->ksp... see _switch for details.

/*

 * Set up a thread for executing a new program

	/* current_set is an array of saved current pointers

	 * (one for each cpu). we need them at user->kernel transition,

	 * while we save them at kernel->user transition

/*

 * Write out registers in core dump format, as defined by the

 * struct user_regs_struct

 r0 */

 TODO */

/*

 * Stack trace utility for OpenRISC

 *

 * Copyright (C) 2017 Stafford Horne <shorne@gmail.com>

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2.  This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

 *

 * Losely based on work from sh and powerpc.

/*

 * Save stack-backtrace addresses into a stack_trace buffer.

 Locate stack from kernel context */

 redzone */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC traps.c

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2003 Matjaz Breskvar <phoenix@bsemi.com>

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

 *

 *  Here we handle the break vectors not used by the system call

 *  mechanism, as well as some general stack/register dumping

 *  things.

 displays a short stack trace */

	/*

	 * When in-kernel, we also print out the stack and code at the

	 * time of the fault..

 This is normally the 'Oops' routine */

 shut down interrupts */

 This is normally the 'Oops' routine */

 Send a SIGBUS */

 Send a SIGBUS */

 Kernel mode */

 No delay slot flag, do the old way */

 l.j */

 l.jal */

 l.bnf */

 l.bf */

 l.jr */

 l.jalr */

 In delay slot, instruction at pc is a branch, simulate it */

 l.j */

 l.jal */

 l.bnf */

 l.bf */

 l.jr */

 l.jalr */

 kernel access in kernel space, load it directly */

 kernel access in kernel space, store it directly */

 Send a SIGILL */

 Kernel mode */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC setup.c

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2003 Matjaz Breskvar <phoenix@bsemi.com>

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

 *

 * This file handles the architecture-dependent parts of initialization

 Find main memory where is the kernel, we assume its the only one */

 setup bootmem globals (we use no_bootmem, but mm still depends on this) */

	/*

	 * initialize the boot-time allocator (with low memory only).

	 *

	 * This makes the memory from the end of the kernel to the end of

	 * RAM usable.

 Then reserve the initrd, if any */

 CONFIG_BLK_DEV_INITRD */

/**

 * or1k_early_setup

 * @fdt: pointer to the start of the device tree in memory or NULL

 *

 * Handles the pointer to the device tree that this kernel is to use

 * for establishing the available platform devices.

 *

 * Falls back on built-in device tree in case null pointer is passed.

/*

 * calibrate_delay

 *

 * Lightweight calibrate_delay implementation that calculates loops_per_jiffy

 * from the clock frequency passed in via the device tree

 *

 process 1's initial memory region is the kernel code/data */

 setup memblock allocator */

 paging_init() sets up the MMU and marks all pages as reserved */

openrisc.io\n");

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC prom.c

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

 *

 * Architecture specific procedures for creating, accessing and

 * interpreting the device tree.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC time.c

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

 Test the timer ticks to count, used in sync routine */

 Set the timer to trigger in delta cycles */

	/* Read 32-bit counter value, add delta, mask off the low 28 bits.

	 * We're guaranteed delta won't be bigger than 28 bits because the

	 * generic timekeeping code ensures that for us.

	/* Set counter and enable interrupt.

	 * Keep timer in continuous mode always.

/* This is the clock event device based on the OR1K tick timer.

 * As the timer is being used as a continuous clock-source (required for HR

 * timers) we cannot enable the PERIODIC feature.  The tick timer can run using

 * one-shot events, so no problem.

 We only have 28 bits */

 Clear the IP bit and disable further interrupts */

	/* This can be done very simply... we just need to keep the timer

	   running, so just maintain the CR bits while clearing the rest

	   of the register

/*

 * The timer interrupt is mostly handled in generic code nowadays... this

 * function just acknowledges the interrupt and fires the event handler that

 * has been set on the clockevent device by the generic time management code.

 *

 * This function needs to be called by the timer exception handler and that's

 * all the exception handler needs to do.

	/*

	 * update_process_times() expects us to have called irq_enter().

/*

 * Clocksource: Based on OpenRISC timer/counter

 *

 * This sets up the OpenRISC Tick Timer as a clock source.  The tick timer

 * is 32 bits wide and runs at the CPU clock frequency.

 Enable the incrementer: 'continuous' mode with interrupt disabled */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC or32_ksyms.c

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2003 Matjaz Breskvar <phoenix@bsemi.com>

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

 compiler generated symbols */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC Linux

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2003 Matjaz Breskvar <phoenix@bsemi.com>

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

 *

 * DMA mapping callbacks...

	/*

	 * Flush the page out of the TLB so that the new page flags get

	 * picked up next time there's an access

 Flush page out of dcache */

	/*

	 * Flush the page out of the TLB so that the new page flags get

	 * picked up next time there's an access

	/*

	 * We need to iterate through the pages, clearing the dcache for

	 * them and setting the cache-inhibit bit.

 walk_page_range shouldn't be able to fail here */

 Flush the dcache for the requested range */

 Invalidate the dcache for the requested range */

		/*

		 * NOTE: If dir == DMA_BIDIRECTIONAL then there's no need to

		 * flush nor invalidate the cache here as the area will need

		 * to be manually synced anyway.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC sys_call_table.c

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

/*

 * Copyright (C) 2014 Stefan Kristiansson <stefan.kristiansson@saunalahti.fi>

 * Copyright (C) 2017 Stafford Horne <shorne@gmail.com>

 *

 * Based on arm64 and arc implementations

 * Copyright (C) 2013 ARM Ltd.

 * Copyright (C) 2004, 2007-2010, 2011-2012 Synopsys, Inc. (www.synopsys.com)

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2.  This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

	/*

	 * set synchronisation state between this boot processor

	 * and the secondary one

	/*

	 * now the secondary core is starting up let it run its

	 * calibrations, then wait for it to finish

	/*

	 * Initialise the present map, which describes the set of CPUs

	 * actually populated at the present time.

	/*

	 * All kernel threads share the same mm context; grab a

	 * reference and switch to it.

	/*

	 * OK, now it's safe to let the boot CPU continue

	/*

	 * OK, it's off to the idle thread for us

 Remove this CPU */

 CPU Doze */

 If that didn't work, infinite loop */

 not supported, yet */

 TLB flush operations - Performed on each CPU*/

 local cpu is the only cpu present in cpumask */

 local cpu is the only cpu present in cpumask */

 Instruction cache invalidate - performed on each cpu */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC signal.c

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2003 Matjaz Breskvar <phoenix@bsemi.com>

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

 trampoline code */

 Always make any pending restarted system calls return -EINTR */

	/*

	 * Restore the regs from &sc->regs.

	 * (sc is already checked since the sigframe was

	 *  checked in sys_sigreturn previously)

 make sure the SM-bit is cleared so user-mode cannot fool us */

 Avoid syscall restart checks */

	/* TODO: the other ports use regs->orig_XX to disable syscall checks

	 * after this completes, but we don't use that mechanism. maybe we can

	 * use it now ?

	/*

	 * Since we stacked the signal on a dword boundary,

	 * then frame should be dword aligned here.  If it's

	 * not, then the user is trying to mess with us.

/*

 * Set up a signal frame.

 copy the regs */

	/* There should be no need to save callee-saved registers here...

	 * ...but we save them anyway.  Revisit this

/*

 * Work out where the signal frame should go.  It's either on the user stack

 * or the alternate stack.

 redzone */

/* grab and setup a signal frame.

 *

 * basically we stack a lot of state info, and arrange for the

 * user-mode program to return to the kernel using either a

 * trampoline which performs the syscall sigreturn, or a provided

 * user-mode trampoline.

 Create siginfo.  */

 Create the ucontext.  */

 trampoline - the desired return ip is the retcode itself */

	/* This is:

		l.ori r11,r0,__NR_sigreturn

		l.sys 1

 Set up registers for signal handler */

 what we enter NOW */

 what we enter LATER */

 arg 1: signo */

 arg 2: (siginfo_t*) */

 arg 3: ucontext */

 actually move the usp to reflect the stacked frame */

/*

 * Note that 'init' is a special process: it doesn't get signals it doesn't

 * want to handle. Thus you cannot kill init even with a SIGKILL even by

 * mistake.

 *

 * Also note that the regs structure given here as an argument, is the latest

 * pushed pt_regs. It may or may not be the same as the first pushed registers

 * when the initial usermode->kernelmode transition took place. Therefore

 * we can use user_mode(regs) to see if we came directly from kernel or user

 * mode below.

		/*

		 * Setup syscall restart here so that a debugger will

		 * see the already changed PC.

	/*

	 * Get the signal to deliver.  During the call to get_signal the

	 * debugger may change all our registers so we may need to revert

	 * the decision to restart the syscall; specifically, if the PC is

	 * changed, don't restart the syscall.

 No automatic restart */

 no handler */

		/*

		 * Restore pt_regs PC as syscall restart will be handled by

		 * kernel without return to userspace

					/*

					 * Restart without handlers.

					 * Deal with it without leaving

					 * the kernel space.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC ptrace.c

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2003 Matjaz Breskvar <phoenix@bsemi.com>

 * Copyright (C) 2005 Gyorgy Jeney <nog@bsemi.com>

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

/*

 * Copy the thread state to a regset that can be interpreted by userspace.

 *

 * It doesn't matter what our internal pt_regs structure looks like.  The

 * important thing is that we export a consistent view of the thread state

 * to userspace.  As such, we need to make sure that the regset remains

 * ABI compatible as defined by the struct user_regs_struct:

 *

 * (Each item is a 32-bit word)

 * r0 = 0 (exported for clarity)

 * 31 GPRS r1-r31

 * PC (Program counter)

 * SR (Supervision register)

 r0 */

/*

 * Set the thread state from a regset passed in via ptrace

 ignore r0 */

 r1 - r31 */

 PC */

	/*

	 * Skip SR and padding... userspace isn't allowed to changes bits in

	 * the Supervision register

/*

 * Define the register sets available on OpenRISC under Linux

/*

 * does not yet catch signals sent when the child dies.

 * in exit.c or in signal.c.

/*

 * Called by kernel/ptrace.c when detaching..

 *

 * Make sure the single step bit is not set.

/*

 * Notification of system call entry/exit

 * - triggered by current->work.syscall_trace

		/*

		 * Tracing decided this syscall should not happen.

		 * We'll return a bogus call number to get an ENOSYS

		 * error, but leave the original number in <something>.

/*

 * OR1K timer synchronisation

 *

 * Based on work from MIPS implementation.

 *

 * All CPUs will have their count registers synchronised to the CPU0 next time

 * value. This can cause a small timewarp for CPU0. All other CPU's should

 * not have done anything significant (but they may have had interrupts

 * enabled briefly - prom_smp_finish() should not be responsible for enabling

 * interrupts...)

	/*

	 * We loop a few times to get a primed instruction cache,

	 * then the last pass is more or less synchronised and

	 * the master and slaves each set their cycle counters to a known

	 * value all at once. This reduces the chance of having random offsets

	 * between the processors, and guarantees that the maximum

	 * delay between the cycle counters is never bigger than

	 * the latency of information-passing (cachelines) between

	 * two CPUs.

 slaves loop on '!= 2' */

 Let the slave writes its count register */

 Count will be initialised to current timer */

		/*

		 * Everyone initialises count in the last loop:

		/*

		 * Wait for slave to leave the synchronization point:

 Arrange for an interrupt in a short while */

	/*

	 * i386 code reported the skew here, but the

	 * count registers were almost certainly out of sync

	 * so no point in alarming people

	/*

	 * Not every cpu is online at the time this gets called,

	 * so we first wait for the master to say everyone is ready

		/*

		 * Everyone initialises count in the last loop:

 Arrange for an interrupt in a short while */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC module.c

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

 This is where to make the change */

		/* This is the symbol it is referring to.  Note that all

/*

 * OpenRISC unwinder.c

 *

 * Reusable arch specific api for unwinding stacks.

 *

 * Copyright (C) 2017 Stafford Horne <shorne@gmail.com>

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2.  This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

/*

 * Verify a frameinfo structure.  The return address should be a valid text

 * address.  The frame pointer may be null if its the last frame, otherwise

 * the frame pointer should point to a location in the stack after the the

 * top of the next frame up.

/*

 * Create a stack trace doing scanning which is frame pointer aware. We can

 * get reliable stack traces by matching the previously found frame

 * pointer with the top of the stack address every time we find a valid

 * or1k_frameinfo.

 *

 * Ideally the stack parameter will be passed as FP, but it can not be

 * guaranteed.  Therefore we scan each address looking for the first sign

 * of a return address.

 *

 * The OpenRISC stack frame looks something like the following.  The

 * location SP is held in r1 and location FP is held in r2 when frame pointers

 * enabled.

 *

 * SP   -> (top of stack)

 *      -  (callee saved registers)

 *      -  (local variables)

 * FP-8 -> previous FP             \

 * FP-4 -> return address          |- or1k_frameinfo

 * FP   -> (previous top of stack) /

 CONFIG_FRAME_POINTER */

/*

 * Create a stack trace by doing a simple scan treating all text addresses

 * as return addresses.

 CONFIG_FRAME_POINTER */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC irq.c

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

 read interrupt enabled status */

 set interrupt enabled status */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenRISC asm-offsets.c

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2003 Matjaz Breskvar <phoenix@bsemi.com>

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

 *

 * This program is used to generate definitions needed by

 * assembly language modules.

 *

 * We use the technique used in the OSF Mach kernel code:

 * generate asm statements containing #defines,

 * compile this file to assembler, and then extract the

 * #defines from the assembly-language output.

 offsets into the task_struct */

 offsets into thread_info */

 Interrupt register frame */

 SPDX-License-Identifier: GPL-2.0

/*

 * arch/openrisc/lib/memcpy.c

 *

 * Optimized memory copy routines for openrisc.  These are mostly copied

 * from ohter sources but slightly entended based on ideas discuassed in

 * #openrisc.

 *

 * The word unroll implementation is an extension to the arm byte

 * unrolled implementation, but using word copies (if things are

 * properly aligned)

 *

 * The great arm loop unroll algorithm can be found at:

 *  arch/arm/boot/compressed/string.c

/*

 * Do memcpy with word copies and loop unrolling. This gives the

 * best performance on the OR1200 and MOR1KX archirectures

 If both source and dest are word aligned copy words */

 Copy 32 bytes per loop */

/*

 * Use word copies but no loop unrolling as we cannot assume there

 * will be benefits on the archirecture

 If both source and dest are word aligned copy words */

 For remaining or if not aligned, copy bytes */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * OpenRISC Linux

 *

 * Linux architectural port borrowing liberally from similar works of

 * others.  All original copyrights apply as per the original source

 * declaration.

 *

 * Modifications for the OpenRISC architecture:

 * Copyright (C) 2010-2011 Jonas Bonn <jonas@southpole.se>

 *

 * Precise Delay Loops

 2**32 / 1000000 (rounded up) */

 2**32 / 1000000000 (rounded up) */

 SPDX-License-Identifier: GPL-2.0

/*

 * in-kernel handling for sie intercepts

 *

 * Copyright IBM Corp. 2008, 2020

 *

 *    Author(s): Carsten Otte <cotte@de.ibm.com>

 *               Christian Borntraeger <borntraeger@de.ibm.com>

 instruction only stored for these icptcodes */

 Use the length of the EXECUTE instruction if necessary */

 bit 1+2 of pgmilc are the ilc, so we directly get ilen */

 delay the stop if any non-stop irq is pending */

 avoid races with the injection/SIGP STOP code */

	/*

	 * no need to check the return value of vcpu_stop as it can only have

	 * an error for protvirt, but protvirt means user cpu state

 do not warn on invalid runtime instrumentation mode */

 the PSW has already been rewound */

/*

 * restore ITDB to program-interruption TDB in guest lowcore

 * and set TX abort indication if required

	/*

	 * Intercept 8 indicates a loop of specification exceptions

	 * for protected guests.

 the interrupt might have been filtered out completely */

 Avoid endless loops of specification exceptions */

/**

 * handle_external_interrupt - used for external interruption interceptions

 * @vcpu: virtual cpu

 *

 * This interception only occurs if the CPUSTAT_EXT_INT bit was set, or if

 * the new PSW does not have external interrupts disabled. In the first case,

 * we've got to deliver the interrupt manually, and in the second case, we

 * drop to userspace to handle the situation there.

 We can not handle clock comparator or timer interrupt with bad PSW */

 ignore if another external call is already pending */

/**

 * handle_mvpg_pei - Handle MOVE PAGE partial execution interception.

 * @vcpu: virtual cpu

 *

 * This interception can only happen for guests with DAT disabled and

 * addresses that are currently not mapped in the host. Thus we try to

 * set up the mappings for the corresponding user pages here (or throw

 * addressing exceptions in case of illegal guest addresses).

 Make sure that the source is paged-in */

 Make sure that the destination is paged-in */

 MVPG */

 SIGP */

/*

 * Handle the sthyi instruction that provides the guest with system

 * information, like current CPU resources available at each level of

 * the machine.

	/*

	 * Avoid endless loops of operation exceptions, if the pgm new

	 * PSW will cause a new operation exception.

	 * The heuristic checks if the pgm new psw is within 6 bytes before

	 * the faulting psw address (with same DAT, AS settings) and the

	 * new psw is not a wait psw and the fault was not triggered by

	 * problem state.

	/*

	 * 2 cases:

	 * a: an sccb answering interrupt was already pending or in flight.

	 *    As the sccb value is not known we can simply set some value to

	 *    trigger delivery of a saved SCCB. UV will then use its saved

	 *    copy of the SCCB value.

	 * b: an error SCCB interrupt needs to be injected so we also inject

	 *    a fake SCCB address. Firmware will use the proper one.

	 * This makes sure, that both errors and real sccb returns will only

	 * be delivered after a notification intercept (instruction has

	 * finished) but not after others.

	/*

	 * If the unpin did not succeed, the guest will exit again for the UVC

	 * and we will retry the unpin.

	/*

	 * If we got -EAGAIN here, we simply return it. It will eventually

	 * get propagated all the way to userspace, which should then try

	 * again.

		/*

		 * PSW bit 13 or a CR (0, 6, 14) changed and we might

		 * now be able to deliver interrupts. The pre-run code

		 * will take care of this.

 process PER, also if the instrution is processed in user space */

 SPDX-License-Identifier: GPL-2.0

/*

 * Hosting Protected Virtual Machines

 *

 * Copyright IBM Corp. 2019, 2020

 *    Author(s): Janosch Frank <frankja@linux.ibm.com>

 Intended memory leak for something that should never happen. */

	/*

	 * The sidad field (for sdf == 2) is now the gbea field (for sdf == 0).

	 * Use the reset value of gbea to avoid leaking the kernel pointer of

	 * the just freed sida.

 Input */

 Alloc Secure Instruction Data Area Designation */

 Output */

 only free resources when the destroy was successful */

	/*

	 * Calculate current guest storage for allocation of the

	 * variable storage, which is based on the length in MB.

	 *

	 * Slots are sorted by GFN

 Allocate variable storage */

	/*

	 * The Create Secure Configuration Ultravisor Call does not support

	 * using large pages for the virtual memory area.

	 * This is a hardware limitation.

 this should not fail, but if it does, we must not free the donated memory */

 make all pages accessible before destroying the guest */

 Inteded memory leak on "impossible" error */

 Inputs */

 MSO is 0 for KVM */

 Outputs */

 SPDX-License-Identifier: GPL-2.0

/*

 * kvm nested virtualization support for s390x

 *

 * Copyright IBM Corp. 2016, 2018

 *

 *    Author(s): David Hildenbrand <dahi@linux.vnet.ibm.com>

 0x0000 */

	/*

	 * the backup info for machine check. ensure it's at

	 * the same offset as that in struct sie_page!

 0x0200 */

	/*

	 * The pinned original scb. Be aware that other VCPUs can modify

	 * it while we read from it. Values that are used for conditions or

	 * are reused conditionally, should be accessed via READ_ONCE.

 0x0218 */

 the shadow gmap in use by the vsie_page */

 0x0220 */

 address of the last reported fault to guest2 */

 0x0228 */

 calculated guest addresses of satellite control blocks */

 0x0230 */

 0x0238 */

 0x0240 */

 0x0248 */

 0x0250 */

 0x0258 */

 0x0700 */

 0x0800 */

 trigger a validity icpt for the given scb */

 mark the prefix as unmapped, this will block the VSIE */

 mark the prefix as unmapped and wait until the VSIE has been left */

 mark the prefix as mapped, this will allow the VSIE to run */

 test if the prefix is mapped into the gmap shadow */

 copy the updated intervention request bits into the shadow scb */

 shadow (filter and validate) the cpuflags  */

 we don't allow ESA/390 guests */

 intervention requests will be set later */

 Copy to APCB FORMAT1 from APCB FORMAT0 */

/**

 * setup_apcb00 - Copy to APCB FORMAT0 from APCB FORMAT0

 * @vcpu: pointer to the virtual CPU

 * @apcb_s: pointer to start of apcb in the shadow crycb

 * @apcb_o: pointer to start of original apcb in the guest2

 * @apcb_h: pointer to start of apcb in the guest1

 *

 * Returns 0 and -EFAULT on error reading guest apcb

/**

 * setup_apcb11 - Copy the FORMAT1 APCB from the guest to the shadow CRYCB

 * @vcpu: pointer to the virtual CPU

 * @apcb_s: pointer to start of apcb in the shadow crycb

 * @apcb_o: pointer to start of original guest apcb

 * @apcb_h: pointer to start of apcb in the host

 *

 * Returns 0 and -EFAULT on error reading guest apcb

/**

 * setup_apcb - Create a shadow copy of the apcb.

 * @vcpu: pointer to the virtual CPU

 * @crycb_s: pointer to shadow crycb

 * @crycb_o: pointer to original guest crycb

 * @crycb_h: pointer to the host crycb

 * @fmt_o: format of the original guest crycb.

 * @fmt_h: format of the host crycb.

 *

 * Checks the compatibility between the guest and host crycb and calls the

 * appropriate copy function.

 *

 * Return 0 or an error number if the guest and host crycb are incompatible.

/**

 * shadow_crycb - Create a shadow copy of the crycb block

 * @vcpu: a pointer to the virtual CPU

 * @vsie_page: a pointer to internal date used for the vSIE

 *

 * Create a shadow copy of the crycb block and setup key wrapping, if

 * requested for guest 3 and enabled for guest 2.

 *

 * We accept format-1 or format-2, but we convert format-1 into format-2

 * in the shadow CRYCB.

 * Using format-2 enables the firmware to choose the right format when

 * scheduling the SIE.

 * There is nothing to do for format-0.

 *

 * This function centralize the issuing of set_validity_icpt() for all

 * the subfunctions working on the crycb.

 *

 * Returns: - 0 if shadowed or nothing to do

 *          - > 0 if control has to be given to guest 2

 we may only allow it if enabled for guest 2 */

 copy only the wrapping keys */

 xor both blocks in one run */

 as 56%8 == 0, bitmap_xor won't overwrite any data */

 shadow (round up/down) the ibc to avoid validity icpt */

 READ_ONCE does not work on bitfields - use a temporary variable */

 ibc installed in g2 and requested for g3 */

 takte care of the minimum ibc level of the machine */

 take care of the maximum ibc level set for the guest */

 unshadow the scb, copying parameters back to the real scb */

 interception */

 timer */

 guest state */

 branch prediction */

 interrupt intercept */

/*

 * Setup the shadow scb by copying and checking the relevant parts of the g2

 * provided scb.

 *

 * Returns: - 0 if the scb has been shadowed

 *          - > 0 if control has to be given to guest 2

 READ_ONCE does not work on bitfields - use a temporary variable */

 make sure we don't have any leftovers when reusing the scb */

 timer */

 guest state */

 interception / execution handling */

	/*

	 * SKEY handling functions can't deal with false setting of PTE invalid

	 * bits. Therefore we cannot provide interpretation and would later

	 * have to provide own emulation handlers.

 if the hva of the prefix changes, we have to remap the prefix */

 SIE will do mso/msl validity and exception checks for us */

 We have to definetly flush the tlb if this scb never ran */

 MVPG and Protection Exception Interpretation are always available */

 Host-protection-interruption introduced with ESOP */

 transactional execution */

 remap the prefix is tx is toggled on */

 specification exception interpretation */

 branch prediction */

 SIMD */

 Run-time-Instrumentation */

 Instruction Execution Prevention */

 Guarded Storage */

 Epoch Extension */

 etoken */

 We are only interested in prefix pages */

	/*

	 * Only new shadow blocks are added to the list during runtime,

	 * therefore we can safely reference them all the time.

 with mso/msl, the prefix lies at an offset */

/*

 * Map the first prefix page and if tx is enabled also the second prefix page.

 *

 * The prefix will be protected, a gmap notifier will inform about unmaps.

 * The shadow scb must not be executed until the prefix is remapped, this is

 * guaranteed by properly handling PROG_REQUEST.

 *

 * Returns: - 0 on if successfully mapped or already mapped

 *          - > 0 if control has to be given to guest 2

 *          - -EAGAIN if the caller can retry immediately

 *          - -ENOMEM if out of memory

 mark it as mapped so we can catch any concurrent unmappers */

 with mso/msl, the prefix lies at offset *mso* */

	/*

	 * We don't have to mprotect, we will be called for all unshadows.

	 * SIE will detect if protection applies and trigger a validity.

/*

 * Pin the guest page given by gpa and set hpa to the pinned host address.

 * Will always be pinned writable.

 *

 * Returns: - 0 on success

 *          - -EINVAL if the gpa is not valid guest storage

 Unpins a page previously pinned via pin_guest_page, marking it as dirty. */

 mark the page always as dirty for migration */

 unpin all blocks previously pinned by pin_blocks(), marking them dirty */

/*

 * Instead of shadowing some blocks, we can simply forward them because the

 * addresses in the scb are 64 bit long.

 *

 * This works as long as the data lies in one page. If blocks ever exceed one

 * page, we have to fall back to shadowing.

 *

 * As we reuse the sca, the vcpu pointers contained in it are invalid. We must

 * therefore not enable any facilities that access these pointers (e.g. SIGPIF).

 *

 * Returns: - 0 if all blocks were pinned.

 *          - > 0 if control has to be given to guest 2

 *          - -ENOMEM if out of memory

 256 bytes cannot cross page boundaries */

		/*

		 * 512 bytes vector registers cannot cross page boundaries

		 * if this block gets bigger, we have to shadow it.

 64 bytes cannot cross page boundaries */

 Validity 0x0044 will be checked by SIE */

		/* Due to alignment rules (checked above) this cannot

		 * cross page boundaries

 unpin the scb provided by guest 2, marking it as dirty */

/*

 * Pin the scb at gpa provided by guest 2 at vsie_page->scb_o.

 *

 * Returns: - 0 if the scb was pinned.

 *          - > 0 if control has to be given to guest 2

/*

 * Inject a fault into guest 2.

 *

 * Returns: - > 0 if control has to be given to guest 2

 *            < 0 if an error occurred during injection.

 0-51: virtual address */

 52-53: store / fetch */

 62-63: asce id (alway primary == 0) */

 always primary */

 not MVPG */

/*

 * Handle a fault during vsie execution on a gmap shadow.

 *

 * Returns: - 0 if the fault was resolved

 *          - > 0 if control has to be given to guest 2

 *          - < 0 if an error occurred

 we can directly forward all protection exceptions */

/*

 * Retry the previous fault that required guest 2 intervention. This avoids

 * one superfluous SIE re-entry and direct exit.

 *

 * Will ignore any errors. The next SIE fault will do proper fault handling.

 rewind the psw and clear the vsie icpt, so we can retry execution */

 take care of EXECUTE instructions */

/*

 * Try to shadow + enable the guest 2 provided facility list.

 * Retry instruction execution if enabled for and provided by guest 2.

 *

 * Returns: - 0 if handled (retry or guest 2 icpt)

 *          - > 0 if control has to be given to guest 2

/*

 * Get a register for a nested guest.

 * @vcpu the vcpu of the guest

 * @vsie_page the vsie_page for the nested guest

 * @reg the register number, the upper 4 bits are ignored.

 * returns: the value of the register.

 no need to validate the parameter and/or perform error handling */

	/*

	 * Either everything went well, or something non-critical went wrong

	 * e.g. because of a race. In either case, simply retry.

 Something more serious went wrong, propagate the error */

 The only possible suppressing exception: just deliver it */

	/*

	 * Forward the PEI intercept to the guest if it was a page fault, or

	 * also for segment and region table faults if EDAT applies.

	/*

	 * The host has edat, and the guest does not, or it was an ASCE type

	 * exception. The host needs to inject the appropriate DAT interrupts

	 * into the guest.

/*

 * Run the vsie on a shadow scb and a shadow gmap, without any further

 * sanity checks, handling SIE faults.

 *

 * Returns: - 0 everything went fine

 *          - > 0 if control has to be given to guest 2

 *          - < 0 if an error occurred

 save current guest state of bp isolation override */

	/*

	 * The guest is running with BPBC, so we have to force it on for our

	 * nested guest. This is done by enabling BPBC globally, so the BPBC

	 * control in the SCB (which the nested guest can modify) is simply

	 * ignored.

	/*

	 * Simulate a SIE entry of the VCPU (see sie64a), so VCPU blocking

	 * and VCPU requests also hinder the vSIE from running and lead

	 * to an immediate exit. kvm_s390_vsie_kick() has to be used to

	 * also kick the vSIE.

 restore guest state for bp isolation override */

 we could still have an icpt */

 stop not requested by g2 - must have been a kick */

	/*

	 * ASCE or EDAT could have changed since last icpt, or the gmap

	 * we're holding has been unshadowed. If the gmap is still valid,

	 * we can safely reuse it.

 release the old shadow - if any, and mark the prefix as unmapped */

/*

 * Register the shadow scb at the VCPU, e.g. for kicking out of vsie.

	/*

	 * External calls have to lead to a kick of the vcpu and

	 * therefore the vsie -> Simulate Wait state.

	/*

	 * We have to adjust the g3 epoch by the g2 epoch. The epoch will

	 * automatically be adjusted on tod clock changes via kvm_sync_clock.

/*

 * Unregister a shadow scb from a VCPU.

/*

 * Run the vsie on a shadowed scb, managing the gmap shadow, handling

 * prefix pages and faults.

 *

 * Returns: - 0 if no errors occurred

 *          - > 0 if control has to be given to guest 2

 *          - -ENOMEM if out of memory

		/*

		 * Addressing exceptions are always presentes as intercepts.

		 * As addressing exceptions are suppressing and our guest 3 PSW

		 * points at the responsible instruction, we have to

		 * forward the PSW and set the ilc. If we can't read guest 3

		 * instruction, we can use an arbitrary ilc. Let's always use

		 * ilen = 4 for now, so we can avoid reading in guest 3 virtual

		 * memory. (we could also fake the shadow so the hardware

		 * handles it).

/*

 * Get or create a vsie page for a scb address.

 *

 * Returns: - address of a vsie page (cached or new one)

 *          - NULL if the same scb address is already used by another VCPU

 *          - ERR_PTR(-ENOMEM) if out of memory

	/*

	 * We want at least #online_vcpus shadows, so every VCPU can execute

	 * the VSIE in parallel.

 reuse an existing entry that belongs to nobody */

 double use of the same address */

 put a vsie page acquired via get_vsie_page */

 512 byte alignment */

 double use of sie control block - simply do nothing */

 Init the vsie data structures. To be called when a vm is initialized. */

 Destroy the vsie data structures. To be called when a vm is destroyed. */

 free the radix tree entry */

	/*

	 * Even if the VCPU lets go of the shadow sie block reference, it is

	 * still valid in the cache. So we can safely kick it.

 SPDX-License-Identifier: GPL-2.0

/*

 * handling privileged instructions

 *

 * Copyright IBM Corp. 2008, 2020

 *

 *    Author(s): Carsten Otte <cotte@de.ibm.com>

 *               Christian Borntraeger <borntraeger@de.ibm.com>

 Handle SCK (SET CLOCK) interception */

 Operand must be on a doubleword boundary */

 must be word boundary */

 get the value */

	/*

	 * Make sure the new value is valid memory. We only need to check the

	 * first page, since address is 8k aligned and memory pieces are always

	 * at least 1MB aligned and have at least a size of 1MB.

 must be word boundary */

 get the value */

 Already enabled? */

 with storage-key facility, SIE interprets it for us */

 start already designates an absolute address */

 skey in reg1 is unpredictable */

	/*

	 * We don't expect errors on modern systems, and do not care

	 * about storage keys (yet), so let's just clear the page.

		/*

		 * Store the two-word I/O interruption code into the

		 * provided area.

		/*

		 * Store the three-word I/O interruption code into

		 * the appropriate lowcore area.

 failed writes to the low core are not recoverable */

 irq was successfully handed to the guest */

	/*

	 * If we encounter a problem storing the interruption code, the

	 * instruction is suppressed from the guest's view: reinject the

	 * interrupt.

 don't set the cc, a pgm irq was injected or we drop to user space */

 all iscs set */

 a valid schid has at least one bit set */

	/*

	 * Prepare exit to userspace.

	 * We indicate whether we dequeued a pending I/O interrupt

	 * so that userspace can re-inject it if the instruction gets

	 * a program check. While this may re-order the pending I/O

	 * interrupts, this is no problem since the priority is kept

	 * intact.

		/*

		 * Most I/O instructions will be handled by userspace.

		 * Exceptions are tpi and the interrupt portion of tsch.

 Handle in userspace. */

		/*

		 * Set condition code 3 to stop the guest from issuing channel

		 * I/O instructions.

/*

 * handle_pqap: Handling pqap interception

 * @vcpu: the vcpu having issue the pqap instruction

 *

 * We now support PQAP/AQIC instructions and we need to correctly

 * answer the guest even if no dedicated driver's hook is available.

 *

 * The intercepting code calls a dedicated callback for this instruction

 * if a driver did register one in the CRYPTO satellite of the

 * SIE block.

 *

 * If no callback is available, the queues are not available, return this

 * response code to the caller and set CC to 3.

 * Else return the response code returned by the callback.

 Verify that the AP instruction are available */

 Verify that the guest is allowed to use AP instructions */

	/*

	 * The only possibly intercepted functions when AP instructions are

	 * available for the guest are AQIC and TAPQ with the t bit set

	 * since we do not set IC.3 (FIII) we currently will only intercept

	 * the AQIC function code.

	 * Note: running nested under z/VM can result in intercepts for other

	 * function codes, e.g. PQAP(QCI). We do not support this and bail out.

 PQAP instruction is allowed for guest kernel only */

 Common PQAP instruction specification exceptions */

 bits 41-47 must all be zeros */

 APFT not install and T bit set */

 APXA not installed and APID greater 64 or APQI greater 16 */

 AQIC function code specific exception */

 facility 65 not present for AQIC function code */

	/*

	 * If the hook callback is registered, there will be a pointer to the

	 * hook function pointer in the kvm_s390_crypto structure. Lock the

	 * owner, retrieve the hook function pointer and call the hook.

	/*

	 * A vfio_driver must register a hook.

	 * No hook means no driver to enable the SIE CRYCB and no queues.

	 * We send this response to the guest.

	/*

	 * We need to shift the lower 32 facility bits (bit 0-31) from a u64

	 * into a u32 memory representation. They will remain bits 0-31.

 deal with other level 3 hypervisors */

 same handling for 1 and 2 */

 This basically extracts the mask half of the psw. */

 Only provide non-quiescing support if enabled for the guest */

 Only provide conditional-SSKE support if enabled for the guest */

 only 4k frames specify a real address */

		/* only support 2G frame size if EDAT2 is available and we are

 Translate guest address to host address */

/*

 * Must be called with relevant read locks held (kvm->mm->mmap_lock, kvm->srcu)

	/*

	 * We don't need to set SD.FPF.SK to 1 here, because if we have a

	 * machine check here we either handle it or crash

 Exception Indication */

	/*

	 * Set the block-content state part of the result. 0 means resident, so

	 * nothing to do if the page is valid. 2 is for preserved pages

	 * (non-present and non-zero), and 3 for zero pages (non-present and

	 * zero).

	/*

	 * It is possible that all the normal 511 slots were full, in which case

	 * we will now write in the 512th slot, which is reserved for host use.

	 * In both cases we let the normal essa handling code process all the

	 * slots, including the reserved one, if needed.

 Increment only if we are really flipping the bit */

 entries expected to be 1FF */

 Check for invalid operation request code */

 ORCs 0-6 are always valid */

		/*

		 * CMMA is enabled in the KVM settings, but is disabled in

		 * the SIE block and in the mm_context, and we are not doing

		 * a migration. Enable CMMA in the mm_context.

		 * Since we need to take a write lock to write to the context

		 * to avoid races with storage keys handling, we check if the

		 * value really needs to be written to; if the value is

		 * already correct, we do nothing and avoid the lock.

		/*

		 * If we are here, we are supposed to have CMMA enabled in

		 * the SIE block. Enabling CMMA works on a per-CPU basis,

		 * while the context use_cmma flag is per process.

		 * It's possible that the context flag is enabled and the

		 * SIE flag is not, so we set the flag always; if it was

		 * already set, nothing changes, otherwise we enable it

		 * on this CPU too.

 Retry the ESSA instruction */

 Account for the possible extra cbrl entry */

 reset nceo */

	/* we only handle the Linux memory detection case:

	 * access key == 0

 Write protected? Try again with read-only... */

 Translation not available */

 Write not permitted ==> read-only */

 Note: CC2 only occurs for storage keys (not supported yet) */

 we don't emulate any control instructions yet */

 SPDX-License-Identifier: GPL-2.0

/*

 * handling kvm guest interrupts

 *

 * Copyright IBM Corp. 2008, 2020

 *

 *    Author(s): Carsten Otte <cotte@de.ibm.com>

 handle external calls via sigp interpretation facility */

 another external call is pending */

 cannot clear? */

 No timer interrupts when single stepping */

/*

 * To use atomic bitmap functions, we have to provide a bitmap address

 * that is u64 aligned. However, the ipm might be u32 aligned.

 * Therefore, we logically start the bitmap at the very beginning of the

 * struct and fixup the bit number.

/**

 * gisa_set_iam - change the GISA interruption alert mask

 *

 * @gisa: gisa to operate on

 * @iam: new IAM value to use

 *

 * Change the IAM atomically with the next alert address and the IPM

 * of the GISA if the GISA is not part of the GIB alert list. All three

 * fields are located in the first long word of the GISA.

 *

 * Returns: 0 on success

 *          -EBUSY in case the gisa is part of the alert list

/**

 * gisa_clear_ipm - clear the GISA interruption pending mask

 *

 * @gisa: gisa to operate on

 *

 * Clear the IPM atomically with the next alert address and the IAM

 * of the GISA unconditionally. All three fields are located in the

 * first long word of the GISA.

/**

 * gisa_get_ipm_or_restore_iam - return IPM or restore GISA IAM

 *

 * @gi: gisa interrupt struct to work on

 *

 * Atomically restores the interruption alert mask if none of the

 * relevant ISCs are pending and return the IPM.

 *

 * Returns: the relevant pending ISCs

 PV guest cpus can have a single interruption injected at a time. */

	/*

	 * Check both floating and local interrupt's cr14 because

	 * bit IRQ_PEND_MCHK_REP could be set in both cases.

	/*

	 * STOP irqs will never be actively delivered. They are triggered via

	 * intercept requests and cleared when the stop intercept is performed.

 Set interception request for non-deliverable interrupts */

	/*

	 * All other possible payload for a machine check (e.g. the register

	 * contents in the save area) will be handled by the ultravisor, as

	 * the hypervisor does not not have the needed information for

	 * protected guests.

 take care of lazy register loading */

 Extended save area */

 Only bits 0 through 63-LC are used for address formation */

 General interruption information */

 Register-save areas */

 Extended interruption information */

		/*

		 * If there was an exigent machine check pending, then any

		 * repressible machine checks that might have been pending

		 * are indicated along with it, so always clear bits for

		 * repressible and exigent interrupts

	/*

	 * We indicate floating repressible conditions along with

	 * other pending conditions. Channel Report Pending and Channel

	 * Subsystem damage are the only two and and are indicated by

	 * bits in mcic and masked in cr14.

 PER is handled by the ultravisor */

 bit 1+2 of the target are the ilc, so we can directly use ilen */

 only clear the event bit */

		/*

		 * in case an adapter interrupt was not delivered

		 * in SIE context KVM will handle the delivery

 Check whether an external call is pending (deliverable or not) */

 external call pending and deliverable */

 already expired */

 already expired? */

 already expired? */

 fast path */

 disabled wait */

	/*

	 * The VCPU might not be sleeping but rather executing VSIE. Let's

	 * kick it, so it leaves the SIE to process the request.

	/*

	 * If the monotonic clock runs faster than the tod clock we might be

	 * woken up too early and have to go back to sleep to avoid deadlocks.

 pending ckc conditions might have been invalidated */

 pending cpu timer conditions might have been invalidated */

 bits are in the reverse order of interrupt priority */

 auto detection if no valid ILC was given */

 only modify PER related information */

 only modify non-PER information */

 sending vcpu invalid */

 sending vcpu invalid */

	/*

	 * Because repressible machine checks can be indicated along with

	 * exigent machine checks (PoP, Chapter 11, Interruption action)

	 * we need to combine cr14, mcic and external damage code.

	 * Failing storage address and the logout area should not be or'ed

	 * together, we just indicate the last occurrence of the corresponding

	 * machine check

 found an appropriate entry */

/*

 * Dequeue and return an I/O interrupt matching any of the interruption

 * subclasses as designated by the isc mask in cr6 and the schid (if != 0).

 * Take into account the interrupts pending in the interrupt list and in GISA.

 *

 * Note that for a guest that does not enable I/O interrupts

 * but relies on TPI, a flood of classic interrupts may starve

 * out adapter interrupts on the same isc. Linux does not do

 * that, and it is possible to work around the issue by configuring

 * different iscs for classic and adapter interrupts in the guest,

 * but we may want to revisit this in the future.

 no AI in GISA */

 AI in GISA but no classical IO int */

 both types of interrupts present */

 classical IO int with higher priority */

 We always allow events, track them separately from the sccb ints */

	/*

	 * Early versions of the QEMU s390 bios will inject several

	 * service interrupts after another without handling a

	 * condition code indicating busy.

	 * We will silently ignore those superfluous sccb values.

	 * A future version of QEMU will take care of serialization

	 * of servc requests

	/*

	 * Do not make use of gisa in protected mode. We do not use the lock

	 * checking variant as this is just a performance optimization and we

	 * do not hold the lock here. This is ok as the code will pick

	 * interrupts from both "lists" for delivery.

/*

 * Find a destination VCPU for a floating irq and kick it.

 find idle VCPUs first, then round robin */

 avoid endless loops if all vcpus are stopped */

 make the VCPU drop out of the SIE, or wake it up if sleeping */

 upper bits are not used */

	/*

	 * We are already using -ENOMEM to signal

	 * userspace it may retry with a bigger buffer,

	 * so we need to use something else for this case

 signal userspace to try again */

 signal userspace to try again */

 signal userspace to try again */

 signal userspace to try again */

	/*

	 * The following operations are no longer needed and therefore no-ops.

	 * The gpa to hva translation is done when an IRQ route is set up. The

	 * set_irq code uses get_user_pages_remote() to do the actual write.

 all iscs set */

	/*

	 * If userspace is conforming to the architecture, we can have at most

	 * one pending I/O interrupt per subchannel, so this is effectively a

	 * clear all.

		/*

		 * Make sure no async faults are in transition when

		 * clearing the queues. So we don't need to worry

		 * about late coming workers.

 s390 floating irq controller (flic) */

/*

 * < 0 - not injected due to error

 * = 0 - coalesced, summary indicator already active

 * > 0 - injected interrupt

 We're only interested in the 0->1 transition. */

/*

 * Inject the machine check to the guest.

 upper bits are not used */

 Inject the floating machine check */

 Inject the machine check to specified vcpu */

 we store the userspace addresses instead of the guest addresses */

	/*

	 * Don't allow setting the interrupt state

	 * when there are already interrupts pending

 lately kicked but not yet running */

		/*

		 * If the NONE_GISA_ADDR is still stored in the alert list

		 * origin, we will leave the outer loop. No further GISA has

		 * been added to the alert list by millicode while processing

		 * the current alert list.

		/*

		 * Cut off the alert list and store the NONE_GISA_ADDR in the

		 * alert list origin to avoid further GAL interruptions.

		 * A new alert list can be build up by millicode in parallel

		 * for guests not in the yet cut-off alert list. When in the

		 * final loop, store the NULL_GISA_ADDR instead. This will re-

		 * enable GAL interruptions on the host again.

		/*

		 * Loop through the just cut-off alert list and start the

		 * gisa timers to kick idle vcpus to consume the pending

		 * interruptions asap.

 50 usec */

/**

 * kvm_s390_gisc_register - register a guest ISC

 *

 * @kvm:  the kernel vm to work with

 * @gisc: the guest interruption sub class to register

 *

 * The function extends the vm specific alert mask to use.

 * The effective IAM mask in the GISA is updated as well

 * in case the GISA is not part of the GIB alert list.

 * It will be updated latest when the IAM gets restored

 * by gisa_get_ipm_or_restore_iam().

 *

 * Returns: the nonspecific ISC (NISC) the gib alert mechanism

 *          has registered with the channel subsystem.

 *          -ENODEV in case the vm uses no GISA

 *          -ERANGE in case the guest ISC is invalid

/**

 * kvm_s390_gisc_unregister - unregister a guest ISC

 *

 * @kvm:  the kernel vm to work with

 * @gisc: the guest interruption sub class to register

 *

 * The function reduces the vm specific alert mask to use.

 * The effective IAM mask in the GISA is updated as well

 * in case the GISA is not part of the GIB alert list.

 * It will be updated latest when the IAM gets restored

 * by gisa_get_ipm_or_restore_iam().

 *

 * Returns: the nonspecific ISC (NISC) the gib alert mechanism

 *          has registered with the channel subsystem.

 *          -ENODEV in case the vm uses no GISA

 *          -ERANGE in case the guest ISC is invalid

 *          -EINVAL in case the guest ISC is not registered

 SPDX-License-Identifier: GPL-2.0

/*

 * hosting IBM Z kernel virtual machines (s390x)

 *

 * Copyright IBM Corp. 2008, 2020

 *

 *    Author(s): Carsten Otte <cotte@de.ibm.com>

 *               Christian Borntraeger <borntraeger@de.ibm.com>

 *               Heiko Carstens <heiko.carstens@de.ibm.com>

 *               Christian Ehrhardt <ehrhardt@de.ibm.com>

 *               Jason J. Herne <jjherne@us.ibm.com>

 Maximum transfer size for KVM_S390_MEM_OP */

 allow nested virtualization in KVM (if enabled by user space) */

 allow 1m huge page guest backing, if !nested */

 maximum percentage of steal time for polling.  >100 is treated like 100 */

 if set to true, the GISA will be initialized and used if available */

 maximum diag9c forwarding per second */

/*

 * For now we handle at most 16 double words as this is what the s390 base

 * kernel handles and stores in the prefix page. If we ever need to go beyond

 * this, this requires changes to code, but the external uapi can stay.

/*

 * Base feature mask that defines default mask for facilities. Consists of the

 * defines in FACILITIES_KVM and the non-hypervisor managed bits.

/*

 * Extended feature mask. Consists of the defines in FACILITIES_KVM_CPUMODEL

 * and defines the facilities that can be enabled via a cpu model.

 available cpu features supported by kvm */

 available subfunctions indicated via query / "test bit" */

 Section: not file related */

 every s390 is virtualization enabled ;-) */

 forward declarations */

	/*

	 * The TOD jumps by delta, we have to compensate this by adding

	 * -delta to the epoch.

 sign-extension - we're adding to signed values below */

/*

 * This callback is executed during stop_machine(). All CPUs are therefore

 * temporarily stopped. In order not to change guest behavior, we have to

 * disable preemption whenever we touch the epoch of kvm and the VCPUs,

 * so a CPU won't be stopped while calculating with the epoch.

 Parameter registers are ignored for "test bit" */

 Parameter registers are ignored */

 TOD-clock steering */

 MSA */

 MSA3 */

 MSA4 */

 MSA5 */

 MSA8 */

 MSA9 */

 SORTL */

 DFLTCC */

	/*

	 * We need SIE support, ESOP (PROT_READ protection for gmap_shadow),

	 * 64bit SCAO (SCA passthrough) and IDTE (for gmap_shadow unshadowing).

	/*

	 * KVM_S390_VM_CPU_FEAT_SKEY: Wrong shadow of PTE.I bits will make

	 * all skey handling functions read/set the skey from the PGSTE

	 * instead of the real storage key.

	 *

	 * KVM_S390_VM_CPU_FEAT_CMMA: Wrong shadow of PTE.I bits will make

	 * pages being detected as preserved although they are resident.

	 *

	 * KVM_S390_VM_CPU_FEAT_PFMFI: Wrong shadow of PTE.I bits will

	 * have the same effect as for KVM_S390_VM_CPU_FEAT_SKEY.

	 *

	 * For KVM_S390_VM_CPU_FEAT_SKEY, KVM_S390_VM_CPU_FEAT_CMMA and

	 * KVM_S390_VM_CPU_FEAT_PFMFI, all PTE.I and PGSTE bits have to be

	 * correctly shadowed. We can do that for the PGSTE but not for PTE.I.

	 *

	 * KVM_S390_VM_CPU_FEAT_SIGPIF: Wrong SCB addresses in the SCA. We

	 * cannot easily shadow the SCA because of the ipte lock.

 Register floating interrupt controller interface. */

 Section: device related */

 Loop over all guest segments */

 Section: vm related */

/*

 * Get (and clear) the dirty memory log for a memory slot.

 Clear the dirty log */

			/*

			 * We might have to create fake 4k page

			 * tables. To avoid that the hardware works on

			 * stale PGSTEs, we emulate these instructions.

 Not compatible with cmma. */

 gmap_create takes last usable address */

 gmap_create will round the limit up */

 recreate the shadow crycb by leaving the VSIE handler */

/*

 * Must be called with kvm->srcu held to avoid races on memslots, and with

 * kvm->slots_lock to avoid races with ourselves and kvm_s390_vm_stop_migration.

 migration mode already enabled */

 mark all the pages in active slots as dirty */

		/*

		 * The second half of the bitmap is only used on x86,

		 * and would be wasted otherwise, so we put it to good

		 * use here to keep track of the state of the storage

		 * attributes.

/*

 * Must be called with kvm->slots_lock to avoid races with ourselves and

 * kvm_s390_vm_start_migration.

 migration mode already disabled */

 Is this guest using storage keys? */

 Enforce sane limit on memory allocation */

 Enforce sane limit on memory allocation */

 Enable storage key handling for the guest */

 Lowest order bit is reserved */

/*

 * Base address and length must be sent at the start of each block, therefore

 * it's cheaper to send some clean data, as long as it's less than the size of

 * two longs.

 for consistency */

/*

 * Similar to gfn_to_memslot, but returns the index of a memslot also when the

 * address falls in a hole. In that case the index of one of the memslots

 * bordering the hole is returned.

		/*

		 * We return an error if the first value was invalid, but we

		 * return successfully if at least one value was copied.

 If we are above the highest slot, wrap around */

 Decrement only if we actually flipped the bit to 0 */

 Save the value */

 If the next bit is too far away, stop. */

 If we reached the previous "next", find the next one */

 Reached the end of memory or of the buffer, stop */

 Reached the end of the current memslot, take the next one. */

/*

 * This function searches for the next page with dirty CMMA attributes, and

 * saves the attributes in the buffer up to either the end of the buffer or

 * until a block of at least KVM_S390_MAX_BIT_DISTANCE clean bits is found;

 * no trailing clean bytes are saved.

 * In case no dirty bits were found, or if CMMA was not enabled or used, the

 * output buffer will indicate 0 as length.

 Invalid/unsupported flags were specified */

 Migration mode query, and we are not doing a migration */

 CMMA is disabled or was not used, or the buffer has length zero */

 We are not peeking, and there are no dirty pages */

/*

 * This function sets the CMMA attributes for the given pages. If the input

 * buffer has zero length, no action is taken, otherwise the attributes are

 * set and the mm->context.uses_cmm flag is set.

 invalid/unsupported flags */

 Enforce sane limit on memory allocation */

 Nothing to do */

	/*

	 * We ignore failures and try to destroy as many CPUs as possible.

	 * At the same time we must not free the assigned resources when

	 * this fails, as the ultravisor has still access to that memory.

	 * So kvm_s390_pv_destroy_cpu can leave a "wanted" memory leak

	 * behind.

	 * We want to return the first failure rc and rrc, though.

		/*

		 *  FMT 4 SIE needs esca. As we never switch back to bsca from

		 *  esca, we need no cleanup in the error cases below

 we need to block service interrupts from now on */

		/*

		 * If a CPU could not be destroyed, destroy VM will also fail.

		 * There is no point in trying to destroy it. Instead return

		 * the rc and rrc from the first CPU that failed destroying.

 no need to block service interrupts any more */

 Currently restricted to 8KB */

 Set up dummy routing. */

 protvirt means user cpu state */

/*

 * The format of the crypto control block (CRYCB) is specified in the 3 low

 * order bits of the CRYCB designation (CRYCBD) field as follows:

 * Format 0: Neither the message security assist extension 3 (MSAX3) nor the

 *	     AP extended addressing (APXA) facility are installed.

 * Format 1: The APXA facility is not installed but the MSAX3 facility is.

 * Format 2: Both the APXA and MSAX3 facilities are installed

 Clear the CRYCB format bits - i.e., set format 0 by default */

 Check whether MSAX3 is installed */

/*

 * kvm_arch_crypto_set_masks

 *

 * @kvm: pointer to the target guest's KVM struct containing the crypto masks

 *	 to be set.

 * @apm: the mask identifying the accessible AP adapters

 * @aqm: the mask identifying the accessible AP domains

 * @adm: the mask identifying the accessible AP control domains

 *

 * Set the masks that identify the adapters, domains and control domains to

 * which the KVM guest is granted access.

 *

 * Note: The kvm->lock mutex must be locked by the caller before invoking this

 *	 function.

 APCB1 use 256 bits */

 Fall through both use APCB0 */

 Can not happen */

 recreate the shadow crycb for each vcpu */

/*

 * kvm_arch_crypto_clear_masks

 *

 * @kvm: pointer to the target guest's KVM struct containing the crypto masks

 *	 to be cleared.

 *

 * Clear the masks that identify the adapters, domains and control domains to

 * which the KVM guest is granted access.

 *

 * Note: The kvm->lock mutex must be locked by the caller before invoking this

 *	 function.

 recreate the shadow crycb for each vcpu */

 Enable AES/DEA protected key functions by default */

 start with basic SCA */

 we are always in czam mode - even on pre z14 machines */

 we emulate STHYI in kvm */

 We can not hold the vcpu mutex here, we are already dying */

	/*

	 * We are already at the end of life and kvm->lock is not taken.

	 * This is ok as the file descriptor is closed by now and nobody

	 * can mess with the pv state. To avoid lockdep_assert_held from

	 * complaining we do not use kvm_s390_pv_is_protected.

 Section: vcpu related */

 we still need the basic sca for the ipte control */

 Basic SCA to Extended SCA data copy routines */

 needs disabled preemption to protect from TOD sync and vcpu_load/put */

 needs disabled preemption to protect from TOD sync and vcpu_load/put */

 needs disabled preemption to protect from TOD sync and vcpu_load/put */

 needs disabled preemption to protect from TOD sync and vcpu_load/put */

 protect from TOD sync and vcpu_load/put */

 protect from TOD sync and vcpu_load/put */

 set the cpu timer - may only be called from the VCPU thread itself */

 protect from TOD sync and vcpu_load/put */

 update and get the cpu timer - can also be called from other VCPU threads */

 protect from TOD sync and vcpu_load/put */

		/*

		 * If the writer would ever execute a read in the critical

		 * section, e.g. in irq context, we have a deadlock.

 if cputm_start is 0, accounting is being started/stopped */

 make vcpu_load load the right gmap on the first trigger */

 At least one ECC subfunction must be present */

	/*

	 * If the AP instructions are not being interpreted and the MSAX3

	 * facility is not configured for the guest, there is nothing to set up.

 Set up protected key support */

 ecc is also wrapped with AES key */

 pgste_set_pte has special handling for !MACHINE_HAS_ESOP */

 the real guest size will always be smaller than msl */

	/* fprs can be synchronized via vrs, even if the guest has no vx. With

	 * MACHINE_HAS_VX, (load|store)_fpu_regs() will work with vrs format.

/*

 * Kick a guest cpu out of (v)SIE and wait until (v)SIE is not running.

 * If the CPU is not running (e.g. waiting as idle) the function will

 Kick a guest cpu out of SIE to process a request synchronously */

 We are only interested in prefix pages */

 match against both prefix pages */

 do not poll with more than halt_poll_max_steal percent of steal time */

 kvm common code refers to this, but never calls it */

 Initial reset is a superset of the normal reset */

	/*

	 * This equals initial cpu reset in pop, but we don't switch to ESA.

	 * We do not only reset the internal data, but also ...

 ... the data in sync regs */

	/*

	 * Do not reset these registers in the protected case, as some of

	 * them are overlayed and they are not accessible in this case

	 * anyway.

 Clear reset is a superset of the initial reset */

 make sure we have the latest values */

 not implemented yet */

 enforce guest PER */

 CHECK_STOP and LOAD are not supported yet */

 user space knows about this interface - let it control the state */

 CHECK_STOP and LOAD are not supported yet */

	/*

	 * We use MMU_RELOAD just to re-arm the ipte notifier for the

	 * guest prefix page. gmap_mprotect_notify will wait on the ptl lock.

	 * This ensures that the ipte instruction for this request has

	 * already finished. We might race against a second unmapper that

	 * wants to set the blocking bit. Lets just retry the request loop.

		/*

		 * Disable CMM virtualization; we will emulate the ESSA

		 * instruction manually, in order to provide additional

		 * functionalities needed for live migration.

		/*

		 * Re-enable CMM virtualization if CMMA is available and

		 * CMM has been used.

 nothing to do, just clear the request */

 we left the vsie handler, nothing to do, just clear the request */

/**

 * kvm_arch_fault_in_page - fault-in guest page if necessary

 * @vcpu: The corresponding virtual cpu

 * @gpa: Guest physical address

 * @writable: Whether the page should be writable or not

 *

 * Make sure that a guest page has been faulted-in on the host.

 *

 * Return: Zero on success, negative error code otherwise.

 s390 will always inject the page directly */

	/*

	 * s390 will always inject the page directly,

	 * but we still want check_async_completion to cleanup

	/*

	 * On s390 notifications for arriving pages will be delivered directly

	 * to the guest but the house keeping for completed pfaults is

	 * handled outside the worker.

	/*

	 * We want to inject an addressing exception, which is defined as a

	 * suppressing or terminating exception. However, since we came here

	 * by a DAT access exception, the PSW still points to the faulting

	 * instruction since DAT exceptions are nullifying. So we've got

	 * to look up the current opcode to get the length of the instruction

	 * to be able to forward the PSW.

		/* Instruction-Fetching Exceptions - we can't detect the ilen.

		 * Forward by arbitrary ilc, injection will take care of

		 * nullification if necessary.

	/*

	 * We try to hold kvm->srcu during most of vcpu_run (except when run-

	 * ning the guest), so that memslots (and other stuff) are protected

		/*

		 * As PF_VCPU will be used in fault handler, between

		 * guest_enter and guest_exit should be no uaccess.

			/*

			 * We're not allowed to inject interrupts on intercepts

			 * that leave the guest state in an "in-between" state

			 * where the next SIE entry will do a continuation.

			 * Fence interrupts in our "internal" PSW.

	/*

	 * If userspace sets the riccb (e.g. after migration) to a valid state,

	 * we should enable RI here instead of doing the lazy enablement.

	/*

	 * If userspace sets the gscb (e.g. after migration) to non-zero,

	 * we should enable GS here instead of doing the lazy enablement.

 SIE will load etoken directly from SDNX and therefore kvm_run */

 some control register changes require a tlb flush */

 save host (userspace) fprs/vrs */

 User space provided an invalid FPC, let's clear it */

 Sync fmt2 only data */

		/*

		 * In several places we have to modify our internal view to

		 * not do things that are disallowed by the ultravisor. For

		 * example we must not inject interrupts after specific exits

		 * (e.g. 112 prefix page not secure). We do this by turning

		 * off the machine check, external and I/O interrupt bits

		 * of our PSW copy. To avoid getting validity intercepts, we

		 * do only accept the condition code from userspace.

 SIE will save etoken directly into SDNX and therefore kvm_run */

 Save guest register state */

 Restore will be done lazily at return */

	/*

	 * no need to check the return value of vcpu_start as it can only have

	 * an error for protvirt, but protvirt means user cpu state

 userspace support is needed, kvm_run has been prepared */

/*

 * store status at address

 * we use have two special cases:

 * KVM_S390_STORE_STATUS_NOADDR: -> 0x1200 on 64 bit

 * KVM_S390_STORE_STATUS_PREFIXED: -> prefix

 manually convert vector registers if necessary */

	/*

	 * The guest FPRS and ACRS are in the host FPRS/ACRS due to the lazy

	 * switch in the run ioctl. Let's update our copies before we save

	 * it into the save area

 Only one cpu at a time may enter/leave the STOPPED state. */

 Let's tell the UV that we want to change into the operating state */

 we're the only active VCPU -> speed it up */

		/*

		 * As we are starting a second VCPU, we have to disable

		 * the IBS facility on all VCPUs to remove potentially

		 * outstanding ENABLE requests.

	/*

	 * The real PSW might have changed due to a RESTART interpreted by the

	 * ultravisor. We block all interrupts and let the next sie exit

	 * refresh our view.

	/*

	 * Another VCPU might have used IBS while we were offline.

	 * Let's play safe and flush the VCPU at startup.

 Only one cpu at a time may enter/leave the STOPPED state. */

 Let's tell the UV that we want to change into the stopped state */

 SIGP STOP and SIGP STOP AND STORE STATUS has been fully processed */

		/*

		 * As we only have one VCPU left, we want to enable the

		 * IBS facility for that VCPU to speed it up.

 we are locked against sida going away by the vcpu->mutex */

 do not use irq_state.flags, it will break old QEMUs */

 do not use irq_state.flags, it will break old QEMUs */

 Section: memory related */

	/* A few sanity checks. We can have memory slots which have to be

	   located/ended at a segment boundary (1MB). The memory in userland is

	   ok to be fragmented into various different vmas. It is okay to mmap()

 When we are protected, we should not change the memory slots */

/*

 * Enable autoloading of the kvm module.

 * Note that we add the module alias here instead of virt/kvm/kvm_main.c

 * since x86 takes a different approach.

 SPDX-License-Identifier: GPL-2.0

/*

 * guest access functions

 *

 * Copyright IBM Corp. 2014

 *

 Region- or Segment-Table Origin */

 Subspace Group Control */

 Private Space Control */

 Storage-Alteration-Event Control */

 Space-Switch-Event Control */

 Real-Space Control */

 Designation-Type Control */

 Region- or Segment-Table Length */

 Region-Table Origin */

 DAT-Protection Bit */

 Region-Second-Table Offset */

 Region-Invalid Bit */

 Table-Type Bits */

 Region-Second-Table Length */

 Region-Table Origin */

 DAT-Protection Bit */

 Region-Third-Table Offset */

 Region-Invalid Bit */

 Table-Type Bits */

 Region-Third-Table Length */

 Segment-Table Origin */

 Format-Control */

 DAT-Protection Bit */

 Segment-Table Offset */

 Region-Invalid Bit */

 Common-Region Bit */

 Table-Type Bits */

 Segment-Table Length */

 Region-Frame Absolute Address */

 ACCF-Validity Control */

 Access-Control Bits */

 Fetch-Protection Bit */

 Format-Control */

 DAT-Protection Bit */

 Instruction-Execution-Protection */

 Region-Invalid Bit */

 Common-Region Bit */

 Table-Type Bits */

 Format-Control */

 Region-Invalid Bit */

 Common-Region Bit */

 Table-Type Bits */

 Page-Table Origin */

 Format-Control */

 DAT-Protection Bit */

 Segment-Invalid Bit */

 Common-Segment Bit */

 Table-Type Bits */

 Segment-Frame Absolute Address */

 ACCF-Validity Control */

 Access-Control Bits */

 Fetch-Protection Bit */

 Format-Control */

 DAT-Protection Bit */

 Instruction-Execution-Protection */

 Segment-Invalid Bit */

 Common-Segment Bit */

 Table-Type Bits */

 Format-Control */

 Segment-Invalid Bit */

 Common-Segment Bit */

 Table-Type Bits */

 Page-Frame Real Address */

 Zero Bit */

 Page-Invalid Bit */

 DAT-Protection Bit */

 Instruction-Execution-Protection */

/*

 * vaddress union in order to easily decode a virtual address into its

 * region first index, region second index etc. parts.

/*

 * raddress union which will contain the result (real or absolute address)

 * after a page table walk. The rfaa, sfaa and pfra members are used to

 * simply assign them the value of a region, segment or page table entry.

 Region-Frame Absolute Address */

 Segment-Frame Absolute Address */

 Page-Frame Real Address */

 ALEN-Invalid Bit */

 Fetch-Only Bit */

 Private Bit */

 Access-List-Entry Sequence Number */

 Access-List-Entry Authorization Index */

 ASN-Second-Table-Entry Origin */

 ASTE Sequence Number */

 ASX-Invalid Bit */

 Authority-Table Origin */

 Base-Space Bit */

 Authorization Index */

 Authority-Table Length */

 Controlled-ASN Bit */

 Reusable-ASN Bit */

 Address-Space-Control Element */

 .. more fields there */

 Translation-exception Address */

 Access Exception Fetch/Store Indication */

 ASCE Identifier */

 Unknown wether fetch or store */

 Exception was due to store operation */

 Exception was due to fetch operation */

		/*

		 * op_access_id only applies to MOVE_PAGE -> set bit 61

		 * exc_access_id has to be set to 0 for some instructions. Both

		 * cases have to be handled by the caller.

		/*

		 * We can always store exc_access_id, as it is

		 * undefined for non-ar cases. It is undefined for

		 * most DAT protection exceptions.

/**

 * guest_translate - translate a guest virtual into a guest absolute address

 * @vcpu: virtual cpu

 * @gva: guest virtual address

 * @gpa: points to where guest physical (absolute) address should be stored

 * @asce: effective asce

 * @mode: indicates the access mode to be used

 * @prot: returns the type for protection exceptions

 *

 * Translate a guest virtual address into a guest absolute address by means

 * of dynamic address translation as specified by the architecture.

 * If the resulting absolute address is not available in the configuration

 * an addressing exception is indicated and @gpa will not be changed.

 *

 * Returns: - zero on success; @gpa contains the resulting absolute address

 *	    - a negative value if guest access failed due to e.g. broken

 *	      guest mapping

 *	    - a positve value if an access exception happened. In this case

 *	      the returned value is the program interruption code as defined

 *	      by the architecture

 Check for address ranges 0..511 and 4096..4607 */

/**

 * guest_translate_address - translate guest logical into guest absolute address

 * @vcpu: virtual cpu

 * @gva: Guest virtual address

 * @ar: Access register

 * @gpa: Guest physical address

 * @mode: Translation access mode

 *

 * Parameter semantics are the same as the ones from guest_translate.

 * The memory contents at the guest address are not changed.

 *

 * Note: The IPTE lock is not taken during this function, so the caller

 * has to take care of this.

 Use DAT? */

/**

 * check_gva_range - test a range of guest virtual addresses for accessibility

 * @vcpu: virtual cpu

 * @gva: Guest virtual address

 * @ar: Access register

 * @length: Length of test range

 * @mode: Translation access mode

/**

 * kvm_s390_check_low_addr_prot_real - check for low-address protection

 * @vcpu: virtual cpu

 * @gra: Guest real address

 *

 * Checks whether an address is subject to low-address protection and set

 * up vcpu->arch.pgm accordingly if necessary.

 *

 * Return: 0 if no protection exception, or PGM_PROTECTION if protected.

/**

 * kvm_s390_shadow_tables - walk the guest page table and create shadow tables

 * @sg: pointer to the shadow guest address space structure

 * @saddr: faulting address in the shadow gmap

 * @pgt: pointer to the beginning of the page table for the given address if

 *	 successful (return value 0), or to the first invalid DAT entry in

 *	 case of exceptions (return value > 0)

 * @dat_protection: referenced memory is write protected

 * @fake: pgt references contiguous guest memory block, not a pgtable

 Return the parent address of the page table */

/**

 * kvm_s390_shadow_fault - handle fault on a shadow page table

 * @vcpu: virtual cpu

 * @sg: pointer to the shadow guest address space structure

 * @saddr: faulting address in the shadow gmap

 * @datptr: will contain the address of the faulting DAT table entry, or of

 *	    the valid leaf, plus some flags

 *

 * Returns: - 0 if the shadow fault was successfully resolved

 *	    - > 0 (pgm exception code) on exceptions while faulting

 *	    - -EAGAIN if the caller can retry immediately

 *	    - -EFAULT when accessing invalid guest addresses

 *	    - -ENOMEM if out of memory

	/*

	 * We don't want any guest-2 tables to change - so the parent

	 * tables/pointers we read stay valid - unshadowing is however

	 * always possible - only guest_table_lock protects us.

 SPDX-License-Identifier: GPL-2.0

/*

 * handling interprocessor communication

 *

 * Copyright IBM Corp. 2008, 2013

 *

 *    Author(s): Carsten Otte <cotte@de.ibm.com>

 *               Christian Borntraeger <borntraeger@de.ibm.com>

 *               Christian Ehrhardt <ehrhardt@de.ibm.com>

 Primary ASN */

 Secondary ASN */

 Inject the emergency signal? */

 Reject set arch order, with czam we're always in z/Arch mode. */

	/*

	 * Make sure the new value is valid memory. We only need to check the

	 * first page, since address is 8k aligned and memory pieces are always

	 * at least 1MB aligned and have at least a size of 1MB.

 running */

 not running */

 handle (RE)START in user space */

 make sure we don't race with STOP irq injection */

 handle (INITIAL) CPU RESET in user space */

 handle unknown orders in user space */

 update counters as we're directly dropping to user space */

 sigp in userspace can exit */

/*

 * Handle SIGP partial execution interception.

 *

 * This interception will occur at the source cpu when a source cpu sends an

 * external call to a target cpu and the target cpu has the WAIT bit set in

 * its cpuflags. Interception will occurr after the interrupt indicator bits at

 * the target cpu have been set. All error cases will lead to instruction

 * interception, therefore nothing is to be checked or prepared.

 SPDX-License-Identifier: GPL-2.0

/*

 * handling diagnose instructions

 *

 * Copyright IBM Corp. 2008, 2020

 *

 *    Author(s): Carsten Otte <cotte@de.ibm.com>

 *               Christian Borntraeger <borntraeger@de.ibm.com>

	/*

	 * We checked for start >= end above, so lets check for the

	 * fast path (no prefix swap page involved)

		/*

		 * This is slow path.  gmap_discard will check for start

		 * so lets split this into before prefix, prefix, after

		 * prefix and let gmap_discard make some of these calls

		 * NOPs.

 TOKEN */

			/*

			 * If the pagefault handshake is already activated,

			 * the token must not be changed.  We have to return

			 * decimal 8 instead, as mandated in SC24-6084.

	case 1: /*

		 * CANCEL

		 * Specification allows to let already pending tokens survive

		 * the cancel, therefore to reduce code complexity, we assume

		 * all outstanding tokens are already pending.

		/*

		 * If the pfault handling was not established or is already

		 * canceled SC24-6084 requests to return decimal 4.

 Reset the count on a new slice */

 yield to self */

 yield to invalid */

 target guest VCPU already running */

 target host CPU already running */

	/*

	 * no need to check the return value of vcpu_stop as it can only have

	 * an error for protvirt, but protvirt means user cpu state

 No virtio-ccw notification? Get out quickly. */

	/*

	 * The layout is as follows:

	 * - gpr 2 contains the subchannel id (passed as addr)

	 * - gpr 3 contains the virtqueue index (passed as datamatch)

	 * - gpr 4 contains the index on the bus (optionally)

	/*

	 * Return cookie in gpr 2, but don't overwrite the register if the

	 * diagnose will be handled by userspace.

 kvm_io_bus_write_cookie returns -EOPNOTSUPP if it found no match. */

 SPDX-License-Identifier: GPL-2.0

/*

 * kvm guest debug support

 *

 * Copyright IBM Corp. 2014

 *

 *    Author(s): David Hildenbrand <dahi@linux.vnet.ibm.com>

/*

 * Extends the address range given by *start and *stop to include the address

 * range starting with estart and the length len. Takes care of overflowing

 * intervals and tries to minimize the overall interval size.

 0-0 range represents "not set" */

 increase the existing range */

 "overflowing" interval, whereby *stop > *start */

 minimize the range */

	/*

	 * If the guest is not interested in branching events, we can safely

	 * limit them to the PER address range.

		/*

		 * The instruction in front of the desired bp has to

		 * report instruction-fetching events

	/* if host uses storage alternation for special address

	/*

	 * TODO: if guest psw has per enabled, otherwise 0s!

	 * This reduces the amount of reported events.

	 * Need to intercept all psw changes!

 disable timer (clock-comparator) interrupts */

 TODO: Instruction-fetching-nullification not allowed for now */

 try to backup the original value */

 "overflowing" interval */

 addr is directly the start or in the range of a bp */

 refetch the wp data and compare it to the old value */

 remove duplicate events if PC==PER address */

 breakpoint missed */

 PER address references the fetched or the execute instr */

		/*

		 * Manually detect if we have an EXECUTE instruction. As

		 * instructions are always 2 byte aligned we can read the

		 * first two bytes unconditionally

 instr was suppressed, calculate the responsible instr */

 read the complete EXECUTE instr to detect the fetched addr */

 EXECUTE RELATIVE LONG - RIL-b format */

 rl is a _signed_ 32 bit value specifying halfwords */

 EXECUTE - RX-a format */

	/*

	 * The PSW points to the next instruction, therefore the intercepted

	 * instruction generated a PER i-fetch event. PER address therefore

	 * points at the previous PSW address (could be an EXECUTE function).

 instruction-fetching exceptions */

 filter all events, demanded by the guest */

 filter "successful-branching" events */

 filter "instruction-fetching" events */

		/*

		 * Don't inject an irq on exceptions. This would make handling

		 * on icpt code 8 very complex (as PSW was already rewound).

 All other PER events will be given to the guest */

 TODO: Check altered address/address space */

	/*

	 * Only RP, SAC, SACF, PT, PTI, PR, PC instructions can trigger

	 * a space-switch event. PER events enforce space-switch events

	 * for these instructions. So if no PER event for the guest is left,

	 * we might have to filter the space-switch element out, too.

		/*

		 * If the AS changed from / to home, we had RP, SAC or SACF

		 * instruction. Check primary and home space-switch-event

		 * controls. (theoretically home -> home produced no event)

		/*

		 * PT, PTI, PR, PC instruction operate on primary AS only. Check

		 * if the primary-space-switch-event control was or got set.

 SPDX-License-Identifier: GPL-2.0 */

/*

 * Generate opcode table initializers for the in-kernel disassembler.

 *

 *    Copyright IBM Corp. 2017

 *

/*

 * Table of instruction format types. Each opcode is defined with at

 * least one byte (two nibbles), three nibbles, or two bytes (four

 * nibbles).

 * The byte member of each instruction format type entry defines

 * within which byte of an instruction the third (and fourth) nibble

 * of an opcode can be found. The mask member is the and-mask that

 * needs to be applied on this byte in order to get the third (and

 * fourth) nibble of the opcode.

 * The format array defines all instruction formats (as defined in the

 * Principles of Operation) which have the same position of the opcode

 * nibbles.

 * A special case are instruction formats with 1-byte opcodes. In this

 * case the byte member always is zero, so that the mask is applied on

 * the (only) byte that contains the opcode.

 %d */\n\n", count);

 %d */\n\n", count);

 %.2s */ \\\n", opcode);

 1-byte opcode instructions */ \\\n");

	printf("/*\n");

	printf(" * DO NOT MODIFY.\n");

	printf(" *\n");

	printf(" * This file was generated by %s\n", __FILE__);

 SPDX-License-Identifier: GPL-2.0

/*

 * Simple program to generate defines out of facility lists that use the bit

 * numbering scheme from the Princples of Operations: most significant bit

 * has bit number 0.

 *

 *    Copyright IBM Corp. 2015, 2018

 *

		/*

		 * FACILITIES_ALS contains the list of facilities that are

		 * required to run a kernel that is compiled e.g. with

		 * -march=<machine>.

 N3 instructions */

 z/Arch mode installed */

 long displacement facility */

 extended-immediate facility */

 store clock fast */

 mvcos */

 compare and swap and store */

 compare and swap and store 2 */

 general instructions extension */

 execute extensions */

 fast-BCR, etc. */

 misc-instruction-extensions */

 interlocked facility 2 */

 load-and-zero-rightmost-byte, etc. */

 miscellaneous-instruction-extension 2 */

 miscellaneous-instruction-extension 3 */

 END */

		/*

		 * FACILITIES_KVM contains the list of facilities that are part

		 * of the default facility mask and list that are passed to the

		 * initial CPU model. If no CPU model is used, this, together

		 * with the non-hypervisor managed bits, is the maximum list of

		 * guest facilities supported by KVM.

 N3 instructions */

 z/Arch mode installed */

 z/Arch mode active */

 DAT-enhancement */

 idte segment table */

 idte region table */

 ASN-and-LX reuse */

 stfle */

 enhanced-DAT 1 */

 sense-running-status */

 conditional sske */

 ipte-range */

 nonquiescing key-setting */

 transactional execution */

 access-exception-fetch/store indication */

 msa extension 3 */

 msa extension 4 */

 enhanced-DAT 2 */

 instruction-execution-protection */

 enhanced-SOP 2 and side-effect */

 multiple epoch facility */

 msa extension 8 */

 enhanced sort */

 deflate conversion */

 msa extension 9 */

 END */

		/*

		 * FACILITIES_KVM_CPUMODEL contains the list of facilities

		 * that can be enabled by CPU model code if the host supports

		 * it. These facilities are not passed to the guest without

		 * CPU model support.

 AP Query Configuration Information */

 AP Facilities Test */

 etoken facility */

 nnpa facility */

 bear enhancement facility */

 rdp enhancement facility */

 processor activity instrumentation facility */

 END */

	printf("/*\n");

	printf(" * DO NOT MODIFY.\n");

	printf(" *\n");

	printf(" * This file was generated by %s\n", __FILE__);

 SPDX-License-Identifier: GPL-2.0

	/*

	 * The first 1MB of 1:1 mapping is mapped with 4KB pages

 should never happen */

	/*

	 * Kasan currently supports standby memory but only if it follows

	 * online memory (default allocation), i.e. no memory holes.

	 * - memsize represents end of online memory

	 * - ident_map_size represents online + standby and memory limits

	 *   accounted.

	 * Kasan maps "memsize" right away.

	 * [0, memsize]			- as identity mapping

	 * [__sha(0), __sha(memsize)]	- shadow memory for identity mapping

	 * The rest [memsize, ident_map_size] if memsize < ident_map_size

	 * could be mapped/unmapped dynamically later during memory hotplug.

 init kasan zero shadow */

	/*

	 * Current memory layout:

	 * +- 0 -------------+	   +- shadow start -+

	 * | 1:1 ram mapping |	  /| 1/8 ram	    |

	 * |		     |	 / |		    |

	 * +- end of ram ----+	/  +----------------+

	 * | ... gap ...     | /   |		    |

	 * |		     |/    |	kasan	    |

	 * +- shadow start --+	   |	zero	    |

	 * | 1/8 addr space  |	   |	page	    |

	 * +- shadow end    -+	   |	mapping	    |

	 * | ... gap ...     |\    |  (untracked)   |

	 * +- vmalloc area  -+ \   |		    |

	 * | vmalloc_size    |	\  |		    |

	 * +- modules vaddr -+	 \ +----------------+

	 * | 2Gb	     |	  \|	  unmapped  | allocated per module

	 * +-----------------+	   +- shadow end ---+

	 *

	 * Current memory layout (KASAN_VMALLOC):

	 * +- 0 -------------+	   +- shadow start -+

	 * | 1:1 ram mapping |	  /| 1/8 ram	    |

	 * |		     |	 / |		    |

	 * +- end of ram ----+	/  +----------------+

	 * | ... gap ...     | /   |	kasan	    |

	 * |		     |/    |	zero	    |

	 * +- shadow start --+	   |	page	    |

	 * | 1/8 addr space  |	   |	mapping     |

	 * +- shadow end    -+	   |  (untracked)   |

	 * | ... gap ...     |\    |		    |

	 * +- vmalloc area  -+ \   +- vmalloc area -+

	 * | vmalloc_size    |	\  |shallow populate|

	 * +- modules vaddr -+	 \ +- modules area -+

	 * | 2Gb	     |	  \|shallow populate|

	 * +-----------------+	   +- shadow end ---+

 populate kasan shadow (for identity mapping and zero page mapping) */

 shallowly populate kasan shadow for vmalloc and modules */

 populate kasan shadow for untracked memory */

 memory allocated for identity mapping structs will be freed later */

 populate identity mapping */

 enable kasan */

	/*

	 * At this point we are still running on early pages setup early_pg_dir,

	 * while swapper_pg_dir has just been initialized with identity mapping.

	 * Carry over shadow memory region from early_pg_dir to swapper_pg_dir.

 SPDX-License-Identifier: GPL-2.0

/*

 *  Page table allocation functions

 *

 *    Copyright IBM Corp. 2016

 *    Author(s): Martin Schwidefsky <schwidefsky@de.ibm.com>

 CONFIG_PGSTE */

 change all active ASCEs to avoid the creation of new TLBs */

 upgrade should only happen from 3 to 4, 3 to 5, or 4 to 5 levels */

	/*

	 * This routine gets called with mmap_lock lock held and there is

	 * no reason to optimize for the case of otherwise. However, if

	 * that would ever change, the below check will let us know.

 CONFIG_PGSTE */

/*

 * page table entry allocation/free routines.

 Try to get a fragment of a 4K page as a 2K page table */

 =1 -> second 2K */

 Allocate a fresh page */

 Initialize page table */

 Return 4K page table with PGSTEs */

 Return the first 2K fragment of the page */

 Free 2K page table fragment of a 4K page */

 pmd, pud, or p4d */

 lower 2K of a 4K page table */

 higher 2K of a 4K page table */

 4K page table with pgstes */

/*

 * Base infrastructure required to generate basic asces, region, segment,

 * and page tables that do not make use of enhanced features like EDAT1.

/**

 * base_asce_free - free asce and tables returned from base_asce_alloc()

 * @asce: asce to be freed

 *

 * Frees all region, segment, and page tables that were allocated with a

 * corresponding base_asce_alloc() call.

/**

 * base_asce_alloc - create kernel mapping without enhanced DAT features

 * @addr: virtual start address of kernel mapping

 * @num_pages: number of consecutive pages

 *

 * Generate an asce, including all required region, segment and page tables,

 * that can be used to access the virtual kernel mapping. The difference is

 * that the returned asce does not make use of any enhanced DAT features like

 * e.g. large pages. This is required for some I/O functions that pass an

 * asce, like e.g. some service call requests.

 *

 * Note: the returned asce may NEVER be attached to any cpu. It may only be

 *	 used for I/O requests. tlb entries that might result because the

 *	 asce was attached to a cpu won't be cleared.

 SPDX-License-Identifier: GPL-2.0+

/*

 *  flexible mmap layout support

 *

 * Copyright 2003-2004 Red Hat Inc., Durham, North Carolina.

 * All Rights Reserved.

 *

 * Started by Ingo Molnar <mingo@elte.hu>

 Values close to RLIM_INFINITY can overflow. */

	/*

	 * Top of mmap area (just below the process stack).

	 * Leave at least a ~32 MB hole.

 requested length too big for entire address space */

 requesting a specific address */

	/*

	 * A failed mmap() very likely causes application failure,

	 * so fall back to the bottom-up function here. This scenario

	 * can happen with large stack limits and large mmap()

	 * allocations.

/*

 * This function, called very early during the creation of a new

 * process VM image, sets up which VM layout function to use:

	/*

	 * Fall back to the standard layout if the personality

	 * bit is set, or if the expected stack growth is unlimited:

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright IBM Corp. 2011

 * Author(s): Jan Glauber <jang@linux.vnet.ibm.com>

 set storage keys for a 1MB frame */

 CONFIG_PROC_FS */

 CONFIG_DEBUG_PAGEALLOC */

 SPDX-License-Identifier: GPL-2.0

/*

 *  KVM guest address space mapping code

 *

 *    Copyright IBM Corp. 2007, 2020

 *    Author(s): Martin Schwidefsky <schwidefsky@de.ibm.com>

 *		 David Hildenbrand <david@redhat.com>

 *		 Janosch Frank <frankja@linux.vnet.ibm.com>

/**

 * gmap_alloc - allocate and initialize a guest address space

 * @limit: maximum address of the gmap address space

 *

 * Returns a guest address space structure.

/**

 * gmap_create - create a guest address space

 * @mm: pointer to the parent mm_struct

 * @limit: maximum size of the gmap address space

 *

 * Returns a guest address space structure.

 A radix tree is freed by deleting all of its entries */

 A radix tree is freed by deleting all of its entries */

/**

 * gmap_free - free a guest address space

 * @gmap: pointer to the guest address space structure

 *

 * No locks required. There are no references to this gmap anymore.

 Flush tlb of all gmaps (if not already done for shadows) */

 Free all segment & region tables. */

 Free additional data for a shadow gmap */

 Free all page tables. */

 Release reference to the parent */

/**

 * gmap_get - increase reference counter for guest address space

 * @gmap: pointer to the guest address space structure

 *

 * Returns the gmap pointer

/**

 * gmap_put - decrease reference counter for guest address space

 * @gmap: pointer to the guest address space structure

 *

 * If the reference counter reaches zero the guest address space is freed.

/**

 * gmap_remove - remove a guest address space but do not free it yet

 * @gmap: pointer to the guest address space structure

 Remove all shadow gmaps linked to this gmap */

 Remove gmap from the pre-mm list */

 Put reference */

/**

 * gmap_enable - switch primary space to the guest address space

 * @gmap: pointer to the guest address space structure

/**

 * gmap_disable - switch back to the standard primary address space

 * @gmap: pointer to the guest address space structure

/**

 * gmap_get_enabled - get a pointer to the currently enabled gmap

 *

 * Returns a pointer to the currently enabled gmap. 0 if none is enabled.

/*

 * gmap_alloc_table is assumed to be called with mmap_lock held

 since we dont free the gmap table until gmap_free we can unlock */

/**

 * __gmap_segment_gaddr - find virtual address from segment pointer

 * @entry: pointer to a segment table entry in the guest address space

 *

 * Returns the virtual address in the guest address space for the segment

/**

 * __gmap_unlink_by_vmaddr - unlink a single segment via a host address

 * @gmap: pointer to the guest address space structure

 * @vmaddr: address in the host process address space

 *

 * Returns 1 if a TLB flush is required

/**

 * __gmap_unmap_by_gaddr - unmap a single segment via a guest address

 * @gmap: pointer to the guest address space structure

 * @gaddr: address in the guest address space

 *

 * Returns 1 if a TLB flush is required

/**

 * gmap_unmap_segment - unmap segment from the guest address space

 * @gmap: pointer to the guest address space structure

 * @to: address in the guest address space

 * @len: length of the memory area to unmap

 *

 * Returns 0 if the unmap succeeded, -EINVAL if not.

/**

 * gmap_map_segment - map a segment to the guest address space

 * @gmap: pointer to the guest address space structure

 * @from: source address in the parent address space

 * @to: target address in the guest address space

 * @len: length of the memory area to map

 *

 * Returns 0 if the mmap succeeded, -EINVAL or -ENOMEM if not.

 Remove old translation */

 Store new translation */

/**

 * __gmap_translate - translate a guest address to a user space address

 * @gmap: pointer to guest mapping meta data structure

 * @gaddr: guest address

 *

 * Returns user space address which corresponds to the guest address or

 * -EFAULT if no such mapping exists.

 * This function does not establish potentially missing page table entries.

 * The mmap_lock of the mm that belongs to the address space must be held

 * when this function gets called.

 *

 * Note: Can also be called for shadow gmaps.

 Note: guest_to_host is empty for a shadow gmap */

/**

 * gmap_translate - translate a guest address to a user space address

 * @gmap: pointer to guest mapping meta data structure

 * @gaddr: guest address

 *

 * Returns user space address which corresponds to the guest address or

 * -EFAULT if no such mapping exists.

 * This function does not establish potentially missing page table entries.

/**

 * gmap_unlink - disconnect a page table from the gmap shadow tables

 * @mm: pointer to the parent mm_struct

 * @table: pointer to the host page table

 * @vmaddr: vm address associated with the host page table

/**

 * __gmap_link - set up shadow page tables to connect a host to a guest address

 * @gmap: pointer to guest mapping meta data structure

 * @gaddr: guest address

 * @vmaddr: vm address

 *

 * Returns 0 on success, -ENOMEM for out of memory conditions, and -EFAULT

 * if the vm address is already mapped to a different guest segment.

 * The mmap_lock of the mm that belongs to the address space must be held

 * when this function gets called.

 Create higher level tables in the gmap page table */

 Walk the parent mm page table */

 large puds cannot yet be handled */

 Are we allowed to use huge pages? */

 Link gmap segment table entry location to page table. */

/**

 * gmap_fault - resolve a fault on a guest address

 * @gmap: pointer to guest mapping meta data structure

 * @gaddr: guest address

 * @fault_flags: flags to pass down to handle_mm_fault()

 *

 * Returns 0 on success, -ENOMEM for out of memory conditions, and -EFAULT

 * if the vm address is already mapped to a different guest segment.

	/*

	 * In the case that fixup_user_fault unlocked the mmap_lock during

	 * faultin redo __gmap_translate to not race with a map/unmap_segment.

/*

 * this function is assumed to be called with mmap_lock held

 Find the vm address for the guest address */

 Get pointer to the page table entry */

 Find the vm address for the guest address */

 Find vma in the parent mm */

		/*

		 * We do not discard pages that are backed by

		 * hugetlbfs, so we don't have to refault them.

/**

 * gmap_register_pte_notifier - register a pte invalidation callback

 * @nb: pointer to the gmap notifier block

/**

 * gmap_unregister_pte_notifier - remove a pte invalidation callback

 * @nb: pointer to the gmap notifier block

/**

 * gmap_call_notifier - call all registered invalidation callbacks

 * @gmap: pointer to guest mapping meta data structure

 * @start: start virtual address in the guest address space

 * @end: end virtual address in the guest address space

/**

 * gmap_table_walk - walk the gmap page tables

 * @gmap: pointer to guest mapping meta data structure

 * @gaddr: virtual address in the guest address space

 * @level: page table level to stop at

 *

 * Returns a table entry pointer for the given guest address and @level

 * @level=0 : returns a pointer to a page table table entry (or NULL)

 * @level=1 : returns a pointer to a segment table entry (or NULL)

 * @level=2 : returns a pointer to a region-3 table entry (or NULL)

 * @level=3 : returns a pointer to a region-2 table entry (or NULL)

 * @level=4 : returns a pointer to a region-1 table entry (or NULL)

 *

 * Returns NULL if the gmap page tables could not be walked to the

 * requested level.

 *

 * Note: Can also be called for shadow gmaps.

/**

 * gmap_pte_op_walk - walk the gmap page table, get the page table lock

 *		      and return the pte pointer

 * @gmap: pointer to guest mapping meta data structure

 * @gaddr: virtual address in the guest address space

 * @ptl: pointer to the spinlock pointer

 *

 * Returns a pointer to the locked pte for a guest address, or NULL

 Walk the gmap page table, lock and get pte pointer */

 get segment pointer */

/**

 * gmap_pte_op_fixup - force a page in and connect the gmap page table

 * @gmap: pointer to guest mapping meta data structure

 * @gaddr: virtual address in the guest address space

 * @vmaddr: address in the host process address space

 * @prot: indicates access rights: PROT_NONE, PROT_READ or PROT_WRITE

 *

 * Returns 0 if the caller can retry __gmap_translate (might fail again),

 * -ENOMEM if out of memory and -EFAULT if anything goes wrong while fixing

 * up or connecting the gmap page table.

 lost mmap_lock, caller has to retry __gmap_translate */

 Connect the page tables */

/**

 * gmap_pte_op_end - release the page table lock

 * @ptl: pointer to the spinlock pointer

/**

 * gmap_pmd_op_walk - walk the gmap tables, get the guest table lock

 *		      and return the pmd pointer

 * @gmap: pointer to guest mapping meta data structure

 * @gaddr: virtual address in the guest address space

 *

 * Returns a pointer to the pmd for a guest address, or NULL

 without huge pages, there is no need to take the table lock */

 4k page table entries are locked via the pte (pte_alloc_map_lock). */

/**

 * gmap_pmd_op_end - release the guest_table_lock if needed

 * @gmap: pointer to the guest mapping meta data structure

 * @pmdp: pointer to the pmd

/*

 * gmap_protect_pmd - remove access rights to memory and set pmd notification bits

 * @pmdp: pointer to the pmd to be protected

 * @prot: indicates access rights: PROT_NONE, PROT_READ or PROT_WRITE

 * @bits: notification bits to set

 *

 * Returns:

 * 0 if successfully protected

 * -EAGAIN if a fixup is needed

 * -EINVAL if unsupported notifier bits have been specified

 *

 * Expected to be called with sg->mm->mmap_lock in read and

 * guest_table_lock held.

 Fixup needed */

 Shadow GMAP protection needs split PMDs */

/*

 * gmap_protect_pte - remove access rights to memory and set pgste bits

 * @gmap: pointer to guest mapping meta data structure

 * @gaddr: virtual address in the guest address space

 * @pmdp: pointer to the pmd associated with the pte

 * @prot: indicates access rights: PROT_NONE, PROT_READ or PROT_WRITE

 * @bits: notification bits to set

 *

 * Returns 0 if successfully protected, -ENOMEM if out of memory and

 * -EAGAIN if a fixup is needed.

 *

 * Expected to be called with sg->mm->mmap_lock in read

 Protect and unlock. */

/*

 * gmap_protect_range - remove access rights to memory and set pgste bits

 * @gmap: pointer to guest mapping meta data structure

 * @gaddr: virtual address in the guest address space

 * @len: size of area

 * @prot: indicates access rights: PROT_NONE, PROT_READ or PROT_WRITE

 * @bits: pgste notification bits to set

 *

 * Returns 0 if successfully protected, -ENOMEM if out of memory and

 * -EFAULT if gaddr is invalid (or mapping for shadows is missing).

 *

 * Called with sg->mm->mmap_lock in read.

 -EAGAIN, fixup of userspace mm and gmap */

/**

 * gmap_mprotect_notify - change access rights for a range of ptes and

 *                        call the notifier if any pte changes again

 * @gmap: pointer to guest mapping meta data structure

 * @gaddr: virtual address in the guest address space

 * @len: size of area

 * @prot: indicates access rights: PROT_NONE, PROT_READ or PROT_WRITE

 *

 * Returns 0 if for each page in the given range a gmap mapping exists,

 * the new access rights could be set and the notifier could be armed.

 * If the gmap mapping is missing for one or more pages -EFAULT is

 * returned. If no memory could be allocated -ENOMEM is returned.

 * This function establishes missing page table entries.

/**

 * gmap_read_table - get an unsigned long value from a guest page table using

 *                   absolute addressing, without marking the page referenced.

 * @gmap: pointer to guest mapping meta data structure

 * @gaddr: virtual address in the guest address space

 * @val: pointer to the unsigned long value to return

 *

 * Returns 0 if the value was read, -ENOMEM if out of memory and -EFAULT

 * if reading using the virtual address failed. -EINVAL if called on a gmap

 * shadow.

 *

 * Called with gmap->mm->mmap_lock in read.

 Do *NOT* clear the _PAGE_INVALID bit! */

/**

 * gmap_insert_rmap - add a rmap to the host_to_rmap radix tree

 * @sg: pointer to the shadow guest address space structure

 * @vmaddr: vm address associated with the rmap

 * @rmap: pointer to the rmap structure

 *

 * Called with the sg->guest_table_lock

/**

 * gmap_protect_rmap - restrict access rights to memory (RO) and create an rmap

 * @sg: pointer to the shadow guest address space structure

 * @raddr: rmap address in the shadow gmap

 * @paddr: address in the parent guest address space

 * @len: length of the memory area to protect

 *

 * Returns 0 if successfully protected and the rmap was created, -ENOMEM

 * if out of memory and -EFAULT if paddr is invalid.

/**

 * gmap_idte_one - invalidate a single region or segment table entry

 * @asce: region or segment table *origin* + table-type bits

 * @vaddr: virtual address to identify the table entry to flush

 *

 * The invalid bit of a single region or segment table entry is set

 * and the associated TLB entries depending on the entry are flushed.

 * The table-type of the @asce identifies the portion of the @vaddr

 * that is used as the invalidation index.

/**

 * gmap_unshadow_page - remove a page from a shadow page table

 * @sg: pointer to the shadow guest address space structure

 * @raddr: rmap address in the shadow guest address space

 *

 * Called with the sg->guest_table_lock

 get page table pointer */

/**

 * __gmap_unshadow_pgt - remove all entries from a shadow page table

 * @sg: pointer to the shadow guest address space structure

 * @raddr: rmap address in the shadow guest address space

 * @pgt: pointer to the start of a shadow page table

 *

 * Called with the sg->guest_table_lock

/**

 * gmap_unshadow_pgt - remove a shadow page table from a segment entry

 * @sg: pointer to the shadow guest address space structure

 * @raddr: address in the shadow guest address space

 *

 * Called with the sg->guest_table_lock

 get segment pointer */

 Free page table */

/**

 * __gmap_unshadow_sgt - remove all entries from a shadow segment table

 * @sg: pointer to the shadow guest address space structure

 * @raddr: rmap address in the shadow guest address space

 * @sgt: pointer to the start of a shadow segment table

 *

 * Called with the sg->guest_table_lock

 Free page table */

/**

 * gmap_unshadow_sgt - remove a shadow segment table from a region-3 entry

 * @sg: pointer to the shadow guest address space structure

 * @raddr: rmap address in the shadow guest address space

 *

 * Called with the shadow->guest_table_lock

 get region-3 pointer */

 Free segment table */

/**

 * __gmap_unshadow_r3t - remove all entries from a shadow region-3 table

 * @sg: pointer to the shadow guest address space structure

 * @raddr: address in the shadow guest address space

 * @r3t: pointer to the start of a shadow region-3 table

 *

 * Called with the sg->guest_table_lock

 Free segment table */

/**

 * gmap_unshadow_r3t - remove a shadow region-3 table from a region-2 entry

 * @sg: pointer to the shadow guest address space structure

 * @raddr: rmap address in the shadow guest address space

 *

 * Called with the sg->guest_table_lock

 get region-2 pointer */

 Free region 3 table */

/**

 * __gmap_unshadow_r2t - remove all entries from a shadow region-2 table

 * @sg: pointer to the shadow guest address space structure

 * @raddr: rmap address in the shadow guest address space

 * @r2t: pointer to the start of a shadow region-2 table

 *

 * Called with the sg->guest_table_lock

 Free region 3 table */

/**

 * gmap_unshadow_r2t - remove a shadow region-2 table from a region-1 entry

 * @sg: pointer to the shadow guest address space structure

 * @raddr: rmap address in the shadow guest address space

 *

 * Called with the sg->guest_table_lock

 get region-1 pointer */

 Free region 2 table */

/**

 * __gmap_unshadow_r1t - remove all entries from a shadow region-1 table

 * @sg: pointer to the shadow guest address space structure

 * @raddr: rmap address in the shadow guest address space

 * @r1t: pointer to the start of a shadow region-1 table

 *

 * Called with the shadow->guest_table_lock

 Clear entry and flush translation r1t -> r2t */

 Free region 2 table */

/**

 * gmap_unshadow - remove a shadow page table completely

 * @sg: pointer to the shadow guest address space structure

 *

 * Called with sg->guest_table_lock

/**

 * gmap_find_shadow - find a specific asce in the list of shadow tables

 * @parent: pointer to the parent gmap

 * @asce: ASCE for which the shadow table is created

 * @edat_level: edat level to be used for the shadow translation

 *

 * Returns the pointer to a gmap if a shadow table with the given asce is

 * already available, ERR_PTR(-EAGAIN) if another one is just being created,

 * otherwise NULL

/**

 * gmap_shadow_valid - check if a shadow guest address space matches the

 *                     given properties and is still valid

 * @sg: pointer to the shadow guest address space structure

 * @asce: ASCE for which the shadow table is requested

 * @edat_level: edat level to be used for the shadow translation

 *

 * Returns 1 if the gmap shadow is still valid and matches the given

 * properties, the caller can continue using it. Returns 0 otherwise, the

 * caller has to request a new shadow gmap in this case.

 *

/**

 * gmap_shadow - create/find a shadow guest address space

 * @parent: pointer to the parent gmap

 * @asce: ASCE for which the shadow table is created

 * @edat_level: edat level to be used for the shadow translation

 *

 * The pages of the top level page table referred by the asce parameter

 * will be set to read-only and marked in the PGSTEs of the kvm process.

 * The shadow table will be removed automatically on any change to the

 * PTE mapping for the source table.

 *

 * Returns a guest address space structure, ERR_PTR(-ENOMEM) if out of memory,

 * ERR_PTR(-EAGAIN) if the caller has to retry and ERR_PTR(-EFAULT) if the

 * parent gmap table could not be protected.

 Create a new shadow gmap */

 Recheck if another CPU created the same shadow */

 only allow one real-space gmap shadow */

 nothing to protect, return right away */

 protect after insertion, so it will get properly invalidated */

/**

 * gmap_shadow_r2t - create an empty shadow region 2 table

 * @sg: pointer to the shadow guest address space structure

 * @saddr: faulting address in the shadow gmap

 * @r2t: parent gmap address of the region 2 table to get shadowed

 * @fake: r2t references contiguous guest memory block, not a r2t

 *

 * The r2t parameter specifies the address of the source table. The

 * four pages of the source table are made read-only in the parent gmap

 * address space. A write to the source table area @r2t will automatically

 * remove the shadow r2 table and all of its decendents.

 *

 * Returns 0 if successfully shadowed or already shadowed, -EAGAIN if the

 * shadow table structure is incomplete, -ENOMEM if out of memory and

 * -EFAULT if an address in the parent gmap could not be resolved.

 *

 * Called with sg->mm->mmap_lock in read.

 Allocate a shadow region second table */

 Install shadow region second table */

 get region-1 pointer */

 Race with unshadow */

 Already established */

 Race with shadow */

 mark as invalid as long as the parent table is not protected */

 nothing to protect for fake tables */

 Make r2t read-only in parent gmap page table */

 Race with unshadow */

/**

 * gmap_shadow_r3t - create a shadow region 3 table

 * @sg: pointer to the shadow guest address space structure

 * @saddr: faulting address in the shadow gmap

 * @r3t: parent gmap address of the region 3 table to get shadowed

 * @fake: r3t references contiguous guest memory block, not a r3t

 *

 * Returns 0 if successfully shadowed or already shadowed, -EAGAIN if the

 * shadow table structure is incomplete, -ENOMEM if out of memory and

 * -EFAULT if an address in the parent gmap could not be resolved.

 *

 * Called with sg->mm->mmap_lock in read.

 Allocate a shadow region second table */

 Install shadow region second table */

 get region-2 pointer */

 Race with unshadow */

 Already established */

 Race with shadow */

 mark as invalid as long as the parent table is not protected */

 nothing to protect for fake tables */

 Make r3t read-only in parent gmap page table */

 Race with unshadow */

/**

 * gmap_shadow_sgt - create a shadow segment table

 * @sg: pointer to the shadow guest address space structure

 * @saddr: faulting address in the shadow gmap

 * @sgt: parent gmap address of the segment table to get shadowed

 * @fake: sgt references contiguous guest memory block, not a sgt

 *

 * Returns: 0 if successfully shadowed or already shadowed, -EAGAIN if the

 * shadow table structure is incomplete, -ENOMEM if out of memory and

 * -EFAULT if an address in the parent gmap could not be resolved.

 *

 * Called with sg->mm->mmap_lock in read.

 Allocate a shadow segment table */

 Install shadow region second table */

 get region-3 pointer */

 Race with unshadow */

 Already established */

 Race with shadow */

 mark as invalid as long as the parent table is not protected */

 nothing to protect for fake tables */

 Make sgt read-only in parent gmap page table */

 Race with unshadow */

/**

 * gmap_shadow_pgt_lookup - find a shadow page table

 * @sg: pointer to the shadow guest address space structure

 * @saddr: the address in the shadow aguest address space

 * @pgt: parent gmap address of the page table to get shadowed

 * @dat_protection: if the pgtable is marked as protected by dat

 * @fake: pgt references contiguous guest memory block, not a pgtable

 *

 * Returns 0 if the shadow page table was found and -EAGAIN if the page

 * table was not found.

 *

 * Called with sg->mm->mmap_lock in read.

 get segment pointer */

 Shadow page tables are full pages (pte+pgste) */

/**

 * gmap_shadow_pgt - instantiate a shadow page table

 * @sg: pointer to the shadow guest address space structure

 * @saddr: faulting address in the shadow gmap

 * @pgt: parent gmap address of the page table to get shadowed

 * @fake: pgt references contiguous guest memory block, not a pgtable

 *

 * Returns 0 if successfully shadowed or already shadowed, -EAGAIN if the

 * shadow table structure is incomplete, -ENOMEM if out of memory,

 * -EFAULT if an address in the parent gmap could not be resolved and

 *

 * Called with gmap->mm->mmap_lock in read

 Allocate a shadow page table */

 Install shadow page table */

 get segment pointer */

 Race with unshadow */

 Already established */

 Race with shadow */

 mark as invalid as long as the parent table is not protected */

 nothing to protect for fake tables */

 Make pgt read-only in parent gmap page table (not the pgste) */

 Race with unshadow */

/**

 * gmap_shadow_page - create a shadow page mapping

 * @sg: pointer to the shadow guest address space structure

 * @saddr: faulting address in the shadow gmap

 * @pte: pte in parent gmap address space to get shadowed

 *

 * Returns 0 if successfully shadowed or already shadowed, -EAGAIN if the

 * shadow table structure is incomplete, -ENOMEM if out of memory and

 * -EFAULT if an address in the parent gmap could not be resolved.

 *

 * Called with sg->mm->mmap_lock in read.

 Get page table pointer */

 Success and a new mapping */

/*

 * gmap_shadow_notify - handle notifications for shadow gmap

 *

 * Called with sg->parent->shadow_lock.

 Check for top level table */

 The complete shadow table has to go */

 Remove the page table tree from on specific entry */

/**

 * ptep_notify - call all invalidation callbacks for a specific pte.

 * @mm: pointer to the process mm_struct

 * @vmaddr: virtual address in the process address space

 * @pte: pointer to the page table entry

 * @bits: bits from the pgste that caused the notify call

 *

 * This function is assumed to be called with the page table lock held

 * for the pte to notify.

/**

 * gmap_pmdp_xchg - exchange a gmap pmd with another

 * @gmap: pointer to the guest address space structure

 * @pmdp: pointer to the pmd entry

 * @new: replacement entry

 * @gaddr: the affected guest address

 *

 * This function is assumed to be called with the guest_table_lock

 * held.

/**

 * gmap_pmdp_invalidate - invalidate all affected guest pmd entries without

 *                        flushing

 * @mm: pointer to the process mm_struct

 * @vmaddr: virtual address in the process address space

/**

 * gmap_pmdp_csp - csp all affected guest pmd entries

 * @mm: pointer to the process mm_struct

 * @vmaddr: virtual address in the process address space

/**

 * gmap_pmdp_idte_local - invalidate and clear a guest pmd entry

 * @mm: pointer to the process mm_struct

 * @vmaddr: virtual address in the process address space

/**

 * gmap_pmdp_idte_global - invalidate and clear a guest pmd entry

 * @mm: pointer to the process mm_struct

 * @vmaddr: virtual address in the process address space

/**

 * gmap_test_and_clear_dirty_pmd - test and reset segment dirty status

 * @gmap: pointer to guest address space

 * @pmdp: pointer to the pmd to be tested

 * @gaddr: virtual address in the guest address space

 *

 * This function is assumed to be called with the guest_table_lock

 * held.

 Already protected memory, which did not change is clean */

 Clear UC indication and reset protection */

/**

 * gmap_sync_dirty_log_pmd - set bitmap based on dirty status of segment

 * @gmap: pointer to guest address space

 * @bitmap: dirty bitmap for this pmd

 * @gaddr: virtual address in the guest address space

 * @vmaddr: virtual address in the host address space

 *

 * This function is assumed to be called with the guest_table_lock

 * held.

 CONFIG_TRANSPARENT_HUGEPAGE */

/*

 * Remove all empty zero pages from the mapping for lazy refaulting

 * - This must be called after mm->context.has_pgste is set, to avoid

 *   future creation of zero pages

 * - This must be called after THP was enabled

/*

 * switch on pgstes for its userspace process (for kvm)

 Do we have pgstes? if yes, we are done */

 Fail if the page tables are 2K */

 split thp mappings and disable thp for future mappings */

/*

 * Enable storage key handling from now on and initialize the storage

 * keys with the default key.

 Clear storage key */

	/*

	 * The write check makes sure we do not set a key on shared

	 * memory. This is needed as the walker does not differentiate

	 * between actual guest memory and the process executable or

	 * shared libraries.

/*

 * Reset CMMA state, make all pages stable again.

/*

 * make inaccessible pages accessible again

 There is a reference through the mapping */

	/*

	 * we might be called during

	 * reset:                             we walk the pages and clear

	 * close of all kvm file descriptors: we walk the pages and clear

	 * exit of process on fd closure:     vma already gone, do nothing

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright IBM Corp. 2008

 *

 * Guest page hinting for unused pages.

 *

 * Author(s): Martin Schwidefsky <schwidefsky@de.ibm.com>

 test ESSA_GET_STATE */

 Mark pages used in kernel page tables */

 Set all kernel pages not used for page tables to stable/no-dat */

 skip page table pages */

 skip free pages */

 SPDX-License-Identifier: GPL-2.0

/*

 *  S390 version

 *    Copyright IBM Corp. 1999

 *    Author(s): Hartmut Penner (hp@de.ibm.com)

 *

 *  Derived from "arch/i386/mm/init.c"

 *    Copyright (C) 1995  Linus Torvalds

 Latest machines require a mapping granularity of 512KB */

 Limit number of empty zero pages for small memory sizes */

/*

 * paging_init() sets up the page tables

 enable virtual mapping in kernel mode */

 make specified pages unshared, (swiotlb, dma_free) */

 make specified pages shared (swiotlb, dma_alloca) */

 are we a protected virtualization guest? */

 protected virtualization */

 make sure bounce buffers are shared */

 Setup guest page hinting */

 this will put all low memory onto the freelists */

 Setup zeroed pages. */

	/*

	 * Make sure the memory block size is always greater

	 * or equal than the memory increment size.

 Prevent memory blocks which contain cma regions from going offline */

 CONFIG_CMA */

 CONFIG_MEMORY_HOTPLUG */

 SPDX-License-Identifier: GPL-2.0

/*

 *  S390 version

 *    Copyright IBM Corp. 1999

 *    Author(s): Hartmut Penner (hp@de.ibm.com)

 *               Ulrich Weigand (uweigand@de.ibm.com)

 *

 *  Derived from "arch/i386/mm/fault.c"

 *    Copyright (C) 1995  Linus Torvalds

/*

 * Find out which address space caused the exception.

 primary space exception */

 access register mode, not used in the kernel */

 home space exception -> access via kernel ASCE */

/*

 * Send SIGSEGV to task.  This is an external routine

 * to keep the stack usage of do_page_fault small.

 Are we prepared to handle this kernel fault?  */

	/*

	 * Oops. The kernel tried to access some bad page. We'll have to

	 * terminate things with extreme prejudice.

	/* Low-address protection hit in kernel mode means

 Low-address protection hit in user mode 'cannot happen'. */

	/*

	 * Send a sigbus, regardless of whether we were in kernel

	 * or user mode.

 Bad memory access. Check if it is kernel or user space. */

 User mode accesses just cause a SIGSEGV */

 fault & VM_FAULT_ERROR */

 Kernel mode? Handle exceptions or die */

 Kernel mode? Handle exceptions or die */

/*

 * This routine handles page faults.  It determines the address,

 * and the problem, and then passes it off to one of the appropriate

 * routines.

 *

 * interruption code (int_code):

 *   04       Protection           ->  Write-Protection  (suppression)

 *   10       Segment translation  ->  Not present       (nullification)

 *   11       Page translation     ->  Not present       (nullification)

 *   3b       Region third trans.  ->  Not present       (nullification)

	/*

	 * The instruction that caused the program check has

	 * been nullified. Don't signal single step via SIGTRAP.

	/*

	 * Verify that the fault happened in user space, that

	 * we are not in an interrupt and that there is a 

	 * user context.

	/*

	 * Ok, we have a good vm_area for this memory access, so

	 * we can handle it..

	/*

	 * If for any reason at all we couldn't handle the fault,

	 * make sure we exit gracefully rather than endlessly redo

	 * the fault.

				/* FAULT_FLAG_RETRY_NOWAIT has been set,

	/*

	 * Protection exceptions are suppressing, decrement psw address.

	 * The exception to this rule are aborted transactions, for these

	 * the PSW already points to the correct location.

	/*

	 * Check for low-address protection.  This needs to be treated

	 * as a special case because the translation exception code

	 * field is not guaranteed to contain valid data in this case.

/*

 * 'pfault' pseudo page faults routines.

/*

 * The mechanism of our pfault code: if Linux is running as guest, runs a user

 * space process and the user space process accesses a page that the host has

 * paged out we get a pfault interrupt.

 *

 * This allows us, within the guest, to schedule a different process. Without

 * this mechanism the host would have to suspend the whole virtual cpu until

 * the page has been paged in.

 *

 * So when we get such an interrupt then we set the state of the current task

 * to uninterruptible and also set the need_resched flag. Both happens within

 * interrupt context(!). If we later on want to return to user space we

 * recognize the need_resched flag and then call schedule().  It's not very

 * obvious how this works...

 *

 * Of course we have a lot of additional fun with the completion interrupt (->

 * host signals that a page of a process has been paged in and the process can

 * continue to run). This interrupt can arrive on any cpu and, since we have

 * virtual cpus, actually appear before the interrupt that signals that a page

 * is missing.

	/*

	 * Get the external interruption subcode & pfault initial/completion

	 * signal bit. VM stores this in the 'cpu address' field associated

	 * with the external interrupt.

 Get the token (= pid of the affected task). */

 signal bit is set -> a page has been swapped in by VM */

			/* Initial interrupt was faster than the completion

			 * interrupt. pfault_wait is valid. Set pfault_wait

			 * back to zero and wake up the process. This can

			 * safely be done because the task is still sleeping

			/* Completion interrupt was faster than initial

			 * interrupt. Set pfault_wait to -1 so the initial

			 * interrupt doesn't put the task to sleep.

			 * If the task is not running, ignore the completion

			 * interrupt since it must be a leftover of a PFAULT

			 * CANCEL operation which didn't remove all pending

 signal bit not set -> a real page is missing. */

 Already on the list with a reference: put to sleep */

			/* Completion interrupt was faster than the initial

			 * interrupt (pfault_wait == -1). Set pfault_wait

			/* Initial interrupt arrived before completion

			 * interrupt. Let the task sleep.

			 * An extra task reference is needed since a different

			 * cpu may set the task state to TASK_RUNNING again

			/* Since this must be a userspace fault, there

			 * is no kernel task state to trample. Rely on the

 CONFIG_PFAULT */

	/*

	 * bit 61 tells us if the address is valid, if it's not we

	 * have a major problem and should stop the kernel or send a

	 * SIGSEGV to the process. Unfortunately bit 61 is not

	 * reliable without the misc UV feature so we need to check

	 * for that as well.

		/*

		 * When this happens, userspace did something that it

		 * was not supposed to do, e.g. branching into secure

		 * memory. Trigger a segmentation fault.

		/*

		 * The kernel should never run into this case and we

		 * have no way out of this situation.

	/*

	 * Either KVM messed up the secure guest mapping or the same

	 * page is mapped into multiple secure guests.

	 *

	 * This exception is only triggered when a guest 2 is running

	 * and can therefore never occur in kernel context.

 CONFIG_PGSTE */

 SPDX-License-Identifier: GPL-2.0

/*

 *  IBM System z Huge TLB Page Support for Kernel.

 *

 *    Copyright IBM Corp. 2007,2020

 *    Author(s): Gerald Schaefer <gerald.schaefer@de.ibm.com>

/*

 * If the bit selected by single-bit bitmask "a" is set within "x", move

 * it to the position indicated by single-bit bitmask "b".

	/*

	 * Convert encoding		  pte bits	pmd / pud bits

	 *				lIR.uswrdy.p	dy..R...I...wr

	 * empty			010.000000.0 -> 00..0...1...00

	 * prot-none, clean, old	111.000000.1 -> 00..1...1...00

	 * prot-none, clean, young	111.000001.1 -> 01..1...1...00

	 * prot-none, dirty, old	111.000010.1 -> 10..1...1...00

	 * prot-none, dirty, young	111.000011.1 -> 11..1...1...00

	 * read-only, clean, old	111.000100.1 -> 00..1...1...01

	 * read-only, clean, young	101.000101.1 -> 01..1...0...01

	 * read-only, dirty, old	111.000110.1 -> 10..1...1...01

	 * read-only, dirty, young	101.000111.1 -> 11..1...0...01

	 * read-write, clean, old	111.001100.1 -> 00..1...1...11

	 * read-write, clean, young	101.001101.1 -> 01..1...0...11

	 * read-write, dirty, old	110.001110.1 -> 10..0...1...11

	 * read-write, dirty, young	100.001111.1 -> 11..0...0...11

	 * HW-bits: R read-only, I invalid

	 * SW-bits: p present, y young, d dirty, r read, w write, s special,

	 *	    u unused, l large

	/*

	 * Convert encoding		pmd / pud bits	    pte bits

	 *				dy..R...I...wr	  lIR.uswrdy.p

	 * empty			00..0...1...00 -> 010.000000.0

	 * prot-none, clean, old	00..1...1...00 -> 111.000000.1

	 * prot-none, clean, young	01..1...1...00 -> 111.000001.1

	 * prot-none, dirty, old	10..1...1...00 -> 111.000010.1

	 * prot-none, dirty, young	11..1...1...00 -> 111.000011.1

	 * read-only, clean, old	00..1...1...01 -> 111.000100.1

	 * read-only, clean, young	01..1...0...01 -> 101.000101.1

	 * read-only, dirty, old	10..1...1...01 -> 111.000110.1

	 * read-only, dirty, young	11..1...0...01 -> 101.000111.1

	 * read-write, clean, old	00..1...1...11 -> 111.001100.1

	 * read-write, clean, young	01..1...0...11 -> 101.001101.1

	 * read-write, dirty, old	10..0...1...11 -> 110.001110.1

	 * read-write, dirty, young	11..0...0...11 -> 100.001111.1

	 * HW-bits: R read-only, I invalid

	 * SW-bits: p present, y young, d dirty, r read, w write, s special,

	 *	    u unused, l large

 Set correct table type for 2G hugepages */

	/*

	 * A failed mmap() very likely causes application failure,

	 * so fall back to the bottom-up function here. This scenario

	 * can happen with large stack limits and large mmap()

	 * allocations.

 SPDX-License-Identifier: GPL-2.0

/*

 *    Copyright IBM Corp. 2007, 2011

 *    Author(s): Martin Schwidefsky <schwidefsky@de.ibm.com>

	/*

	 * mio_wb_bit_mask may be set on a different CPU, but it is only set

	 * once at init and only read afterwards.

	/*

	 * mio_wb_bit_mask may be set on a different CPU, but it is only set

	 * once at init and only read afterwards.

 clear PCL bit in old */

 set PCL bit in new */

 clear PCL bit */

 Transfer page changed & referenced bit to guest bits in pgste */

 GR bit & GC bit */

 Copy page access key and fetch protection bit to pgste */

	/*

	 * Set page access key and fetch protection bit from pgste.

	 * The guest C/R information is still in the PGSTE, set real

	 * key C/R to 0.

			/*

			 * Without enhanced suppression-on-protection force

			 * the dirty bit on for all writable ptes.

 This pte allows write access, set user-dirty */

 We need a valid VMA, otherwise this is clearly a fault. */

 Large PUDs are not supported yet. */

		/*

		 * Invalid bit position is the same for pmd and pud, so we can

		 * re-use _pmd_csp() here

 FIFO */

 FIFO */

 CONFIG_TRANSPARENT_HUGEPAGE */

 the mm_has_pgste() check is done in set_pte_at() */

/**

 * ptep_force_prot - change access rights of a locked pte

 * @mm: pointer to the process mm_struct

 * @addr: virtual address in the guest address space

 * @ptep: pointer to the page table entry

 * @prot: indicates guest access rights: PROT_NONE, PROT_READ or PROT_WRITE

 * @bit: pgste bit to set (e.g. for notification)

 *

 * Returns 0 if the access rights were changed and -EAGAIN if the current

 * and requested access rights are incompatible.

 Check pte entry after all locks have been acquired */

 Change access rights and set pgste bit */

 already shadowed */

 don't touch the storage key - it belongs to parent pgste */

 notifier is called by the caller */

 don't touch the storage key - it belongs to parent pgste */

 Zap unused and logically-zero pages */

 Clear storage key ACC and F, but set R/C */

/*

 * Test and reset if a guest page is dirty

	/*

	 * If we don't have a PTE table and if there is no huge page mapped,

	 * we can ignore attempts to set the key to 0, because it already is 0.

		/*

		 * Huge pmds need quiescing operations, they are

		 * always mapped.

 Set storage key ACC and FP */

 Merge host changed & referenced into pgste  */

 changing the guest storage key is considered a change of the page */

/*

 * Conditionally set a guest storage key (handling csske).

 * oldkey will be updated when either mr or mc is set and a pointer is given.

 *

 * Returns 0 if a guests storage key update wasn't necessary, 1 if the guest

 * storage key was updated and -EFAULT on access errors.

 we can drop the pgste lock between getting and setting the key */

/*

 * Reset a guest reference bit (rrbe), returning the reference and changed bit.

 *

 * Returns < 0 in case of error, otherwise the cc to be reported to the guest.

	/*

	 * If we don't have a PTE table and if there is no huge page mapped,

	 * the storage key is 0 and there is nothing for us to do.

 Reset guest reference bit only */

 Merge real referenced bit into host-set */

 Reflect guest's logical view, not physical */

 Changing the guest storage key is considered a change of the page */

	/*

	 * If we don't have a PTE table and if there is no huge page mapped,

	 * the storage key is 0.

 Reflect guest's logical view, not physical */

/**

 * pgste_perform_essa - perform ESSA actions on the PGSTE.

 * @mm: the memory context. It must have PGSTEs, no check is performed here!

 * @hva: the host virtual address of the page whose PGSTE is to be processed

 * @orc: the specific action to perform, see the ESSA_SET_* macros.

 * @oldpte: the PTE will be saved there if the pointer is not NULL.

 * @oldpgste: the old PGSTE will be saved there if the pointer is not NULL.

 *

 * Return: 1 if the page is to be added to the CBRL, otherwise 0,

 *	   or < 0 in case of error. -EINVAL is returned for invalid values

 *	   of orc, -EFAULT for invalid addresses.

		/*

		 * Since the resident state can go away any time after this

		 * call, we will not make this page resident. We can revisit

		 * this decision if a guest will ever start using this.

 we should never get here! */

 If we are discarding a page, set it to logical zero */

/**

 * set_pgste_bits - set specific PGSTE bits.

 * @mm: the memory context. It must have PGSTEs, no check is performed here!

 * @hva: the host virtual address of the page whose PGSTE is to be processed

 * @bits: a bitmask representing the bits that will be touched

 * @value: the values of the bits to be written. Only the bits in the mask

 *	   will be written.

 *

 * Return: 0 on success, < 0 in case of error.

/**

 * get_pgste - get the current PGSTE for the given address.

 * @mm: the memory context. It must have PGSTEs, no check is performed here!

 * @hva: the host virtual address of the page whose PGSTE is to be processed

 * @pgstep: will be written with the current PGSTE for the given address.

 *

 * Return: 0 on success, < 0 in case of error.

 SPDX-License-Identifier: GPL-2.0

/*

 * Author(s)......: Carsten Otte <cotte@de.ibm.com>

 * 		    Rob M van der Heij <rvdheij@nl.ibm.com>

 * 		    Steven Shultz <shultzss@us.ibm.com>

 * Bugreports.to..: <Linux390@de.ibm.com>

 * Copyright IBM Corp. 2002, 2004

 last byte type */

 last byte reserved */

/*

 * Create the 8 bytes, ebcdic VM segment name from

 * an ascii name.

/*

 * search all segments in dcss_list, and return the one

 * namend *name. If not found, return NULL.

/*

 * Perform a function on a dcss segment.

/* do a diag to get info about a segment.

 * fills start_address, end and vm_segtype fields

 initialize diag input parameters */

		/* multi-part segment. only one type supported here:

		    - all parts are contiguous

		    - all parts are either EW or EN type

 analyze diag output and update seg */

/*

 * get info about a segment

 * possible return values:

 * -ENOSYS  : we are not running on VM

 * -EIO     : could not perform query diagnose

 * -ENOENT  : no such segment

 * -EOPNOTSUPP: multi-part segment cannot be used with linux

 * -ENOMEM  : out of memory

 * 0 .. 6   : type of segment as defined in include/asm-s390/extmem.h

/*

 * check if segment collides with other segments that are currently loaded

 * returns 1 if this is the case, 0 if no collision was found

/*

 * real segment loading function, called from segment_load

 Check for overlapping resources before adding the mapping. */

/*

 * this function loads a DCSS segment

 * name         : name of the DCSS

 * do_nonshared : 0 indicates that the dcss should be shared with other linux images

 *                1 indicates that the dcss should be exclusive for this linux image

 * addr         : will be filled with start address of the segment

 * end          : will be filled with end address of the segment

 * return values:

 * -ENOSYS  : we are not running on VM

 * -EIO     : could not perform query or load diagnose

 * -ENOENT  : no such segment

 * -EOPNOTSUPP: multi-part segment cannot be used with linux

 * -EBUSY   : segment cannot be used (overlaps with dcss or storage)

 * -ERANGE  : segment cannot be used (exceeds kernel mapping range)

 * -EPERM   : segment is currently loaded with incompatible permissions

 * -ENOMEM  : out of memory

 * 0 .. 6   : type of segment as defined in include/asm-s390/extmem.h

/*

 * this function modifies the shared state of a DCSS segment. note that

 * name         : name of the DCSS

 * do_nonshared : 0 indicates that the dcss should be shared with other linux images

 *                1 indicates that the dcss should be exclusive for this linux image

 * return values:

 * -EIO     : could not perform load diagnose (segment gone!)

 * -ENOENT  : no such segment (segment gone!)

 * -EAGAIN  : segment is in use by other exploiters, try later

 * -EINVAL  : no segment with the given name is currently loaded - name invalid

 * -EBUSY   : segment can temporarily not be used (overlaps with dcss)

 * 0	    : operation succeeded

/*

 * Decrease the use count of a DCSS segment and remove

 * it from the address space if nobody is using it

 * any longer.

/*

 * save segment content permanently

/*

 * print appropriate error message for segment_load()/segment_type()

 * return code

 SPDX-License-Identifier: GPL-2.0

/*

 *  Collaborative memory management interface.

 *

 *    Copyright IBM Corp 2003, 2010

 *    Author(s): Martin Schwidefsky <schwidefsky@de.ibm.com>,

 *

 Need a new page for the page list. */

 convert sender to uppercase characters */

 SPDX-License-Identifier: GPL-2.0

/*

 * Access kernel memory without faulting -- s390 specific implementation.

 *

 * Copyright IBM Corp. 2009, 2015

 *

 *   Author(s): Heiko Carstens <heiko.carstens@de.ibm.com>,

 *

/*

 * s390_kernel_write - write to kernel memory bypassing DAT

 * @dst: destination address

 * @src: source address

 * @size: number of bytes to copy

 *

 * This function writes to kernel memory bypassing DAT and possible page table

 * write protection. It writes to the destination using the sturg instruction.

 * Therefore we have a read-modify-write sequence: the function reads eight

 * bytes from destination at an eight byte boundary, modifies the bytes

 * requested and writes the result back in a loop.

 disable DAT

 enable DAT

/*

 * Copy memory in real mode (kernel to kernel)

	/*

	 * This is a really early memcpy_real call, the stacks are

	 * not set up yet. Just call _memcpy_real on the early boot

	 * stack

/*

 * Copy memory in absolute mode (kernel to kernel)

 disable lowcore protection */

/*

 * Copy memory from kernel (real) to user (virtual)

/*

 * Check if physical address is within prefix or zero page

/*

 * Convert a physical pointer for /dev/mem access

 *

 * For swapped prefix pages a new buffer is returned that contains a copy of

 * the absolute memory. The buffer size is maximum one page large.

/*

 * Free converted buffer for /dev/mem access (if necessary)

 SPDX-License-Identifier: GPL-2.0

	/*

	 * The first lowcore page is W+X if spectre mitigations are using

	 * trampolines or the BEAR enhancements facility is not installed,

	 * in which case we have two lpswe instructions in lowcore that need

	 * to be executable.

 CONFIG_DEBUG_WX */

 For pmd_none() & friends val gets passed as zero. */

 Final flush from generic code. */

 CONFIG_DEBUG_WX */

 CONFIG_PTDUMP_DEBUGFS */

/*

 * Heapsort from lib/sort.c is not a stable sorting algorithm, do a simple

 * insertion sort to preserve the original order of markers with the same

 * start address.

	/*

	 * Figure out the maximum virtual address being accessible with the

	 * kernel ASCE. We need this to keep the page table walker functions

	 * from accessing non-existent entries.

 CONFIG_PTDUMP_DEBUGFS */

 SPDX-License-Identifier: GPL-2.0

/*

 *    Copyright IBM Corp. 2006

 *    Author(s): Heiko Carstens <heiko.carstens@de.ibm.com>

 We don't expect boot memory to be removed ever. */

 We don't expect boot memory to be removed ever. */

/*

 * The unused vmemmap range, which was not yet memset(PAGE_UNUSED) ranges

 * from unused_sub_pmd_start to next PMD_SIZE boundary.

	/*

	 * As we expect to add in the same granularity as we remove, it's

	 * sufficient to mark only some piece used to block the memmap page from

	 * getting removed (just in case the memmap never gets initialized,

	 * e.g., because the memory block never gets onlined).

	/*

	 * We only optimize if the new used range directly follows the

	 * previously unused range (esp., when populating consecutive sections).

 Could be our memmap page is filled with PAGE_UNUSED already ... */

 Mark the unused parts of the new memmap page PAGE_UNUSED. */

	/*

	 * We want to avoid memset(PAGE_UNUSED) when populating the vmemmap of

	 * consecutive sections. Remember for the last added PMD the last

	 * unused range in the populated PMD.

 Returns true if the PMD is completely unused and can be freed. */

 __ref: we'll only call vmemmap_alloc_block() via vmemmap_populate() */

 We can safely assume this is fully in 1:1 mapping & vmemmap area */

 __ref: we'll only call vmemmap_alloc_block() via vmemmap_populate() */

				/*

				 * Use 1MB frames for vmemmap if available. We

				 * always use large frames even if they are only

				 * partially used. Otherwise we would have also

				 * page tables since vmemmap_populate gets

				 * called for each section separately.

 Don't mess with any tables not fully in 1:1 mapping & vmemmap area */

 Don't mess with any tables not fully in 1:1 mapping & vmemmap area */

 Don't mess with any tables not fully in 1:1 mapping & vmemmap area */

/*

 * Add a physical memory range to the 1:1 mapping.

/*

 * Remove a physical memory range from the 1:1 mapping.

/*

 * Add a backed mem_map array to the virtual mem_map array.

 We don't care about the node, just use NUMA_NO_NODE on allocations */

/*

 * map whole physical memory to virtual memory (identity mapping)

 * we reserve enough space in the vmalloc area for vmemmap to hotplug

 * additional memory segments.

		/*

		 * Lowcore must be executable for LPSWE

		 * and expoline trampoline branch instructions.

 SPDX-License-Identifier: GPL-2.0

/*

 * This file handles the architecture dependent parts of process handling.

 *

 *    Copyright IBM Corp. 1999, 2009

 *    Author(s): Martin Schwidefsky <schwidefsky@de.ibm.com>,

 *		 Hartmut Penner <hp@de.ibm.com>,

 *		 Denis Joseph Barrow,

 Kernel thread */

	/*

	 * Save the floating-point or vector register state of the current

	 * task and set the CIF_FPU flag to lazy restore the FPU register

	 * state when returning to user space.

 Save access registers to new thread structure. */

 start new process with ar4 pointing to the correct address space */

 Don't copy debug registers */

 Initialize per thread user and system timer values */

 new return point is ret_from_fork */

 fake return stack for resume(), don't go back to schedule */

 Store access registers to kernel stack of new process. */

 kernel thread */

 function */

 child returns 0 on fork. */

 Don't copy runtime instrumentation info */

 Don't copy guarded storage control block */

 Set a new TLS ?  */

	/*

	 * s390 stores the svc return address in arch_data when calling

	 * sigreturn()/restart_syscall() via vdso. 1 means no valid address

	 * stored.

 SPDX-License-Identifier: GPL-2.0

/*

 *  S390 version

 *    Copyright IBM Corp. 1999, 2000

 *    Author(s): Martin Schwidefsky (schwidefsky@de.ibm.com),

 *               Thomas Spatzier (tspat@de.ibm.com)

 *

 *  Derived from "arch/i386/kernel/sys_i386.c"

 *

 *  This file contains various random system calls that

 *  have a non-standard calling sequence on the Linux/s390

 *  platform.

/*

 * Perform the mmap() system call. Linux for S/390 isn't able to handle more

 * than 5 system call parameters, so this system call uses a memory block

 * for parameter passing.

/*

 * sys_ipc() is the de-multiplexer for the SysV IPC calls.

	/* The s390 sys_ipc variant has only five parameters instead of six

	 * like the generic variant. The only difference is the handling of

	 * the SEMTIMEDOP subcall where on s390 the third parameter is used

	 * as a pointer to a struct timespec where the generic variant uses

	 * the fifth parameter.

	 * Therefore we can call the generic variant by simply passing the

	 * third parameter also as fifth parameter.

 CONFIG_SYSVIPC */

	/*

	 * In the s390 ptrace ABI, both the syscall number and the return value

	 * use gpr2. However, userspace puts the syscall number either in the

	 * svc instruction itself, or uses gpr1. To make at least skipping syscalls

	 * work, the ptrace code sets PIF_SYSCALL_RET_SET, which is checked here

	 * and if set, the syscall will be skipped.

 SPDX-License-Identifier: GPL-2.0

/*

 * Stack trace management functions

 *

 *  Copyright IBM Corp. 2006

 *  Author(s): Heiko Carstens <heiko.carstens@de.ibm.com>

		/*

		 * Mark stacktraces with kretprobed functions on them

		 * as unreliable.

 Check for stack corruption */

 SPDX-License-Identifier: GPL-2.0

/*

 *  S390 version

 *    Copyright IBM Corp. 1999, 2000

 *    Author(s): Martin Schwidefsky (schwidefsky@de.ibm.com),

 *               Denis Joseph Barrow (djbarrow@de.ibm.com,barrow_dj@yahoo.com),

 *

 *  Derived from "arch/i386/kernel/traps.c"

 *    Copyright (C) 1991, 1992 Linus Torvalds

/*

 * 'Traps.c' handles hardware traps and faults after we have saved some

 * state in 'asm.s'.

 FPC[2] is Data Exception Code */

 bits 6 and 7 of DXC are 0 iff IEEE exception */

 invalid fp operation */

 div by 0 */

 overflow */

 underflow */

 inexact */

 May never happen. */

	/*

	 * We got either an illegal op in kernel mode, or user space trapped

	 * on a uprobes illegal instruction. See if kprobes or uprobes picks

	 * it up. If not, SIGILL.

 get vector interrupt code from fpc */

 invalid vector operation */

 division by zero */

 overflow */

 underflow */

 inexact */

 unknown cause */

 Set user psw back to home space mode. */

 Send SIGILL. */

 transaction abort */

 PER event in kernel is kprobes */

/*

 * The program check table contains exactly 128 (0x00-0x7f) entries. Each

 * line defines the function to be called corresponding to the program check

 * interruption code.

 SPDX-License-Identifier: GPL-2.0

/*

 *  S390 version

 *    Copyright IBM Corp. 1999, 2012

 *    Author(s): Hartmut Penner (hp@de.ibm.com),

 *               Martin Schwidefsky (schwidefsky@de.ibm.com)

 *

 *  Derived from "arch/i386/kernel/setup.c"

 *    Copyright (C) 1995, Linus Torvalds

/*

 * This file handles the architecture-dependent parts of initialization

/*

 * Machine setup..

/*

 * Some code and data needs to stay below 2 GB, even when the kernel would be

 * relocated above 2 GB, because it has to use 31 bit addresses.

 * Such code and data is part of the .amode31 section.

/*

 * Control registers CR2, CR5 and CR15 are initialized with addresses

 * of tables that must be placed below 2G which is handled by the AMODE31

 * sections.

 * Because the AMODE31 sections are relocated below 2G at startup,

 * the content of control registers CR2, CR5 and CR15 must be updated

 * with new addresses after the relocation. The initial initialization of

 * control registers occurs in head64.S and then gets updated again after AMODE31

 * relocation. We must access the relevant AMODE31 tables indirectly via

 * pointers placed in the .amode31.refs linker section. Those pointers get

 * updated automatically during AMODE31 relocation and always contain a valid

 * address within AMODE31 sections.

 An array with a pointer to the lowcore of every CPU. */

/*

 * The Write Back bit position in the physaddr is given by the SLPC PCI.

 * Leaving the mask zero always uses write through which is safe

/*

 * This is set up by the setup-routine at boot-time

 * for S390 need to find out, what we have to setup

 * using address 0x10400 ...

/*

 * condev= and conmode= setup parameter.

		/*

		 * Set the conmode to 3215 so that the device recognition 

		 * will set the cu_type of the console to 3215. If the

		 * conmode is 3270 and we don't set it back then both

		 * 3215 and the 3270 driver will try to access the console

		 * device (3215 as console and 3270 as normal tty).

 CONFIG_CRASH_DUMP */

 /*

 * Reboot, halt and power_off stubs. They just call _machine_restart,

 * _machine_halt or _machine_power_off. 

		/*

		 * Only unblank the console if we are called in enabled

		 * context or a bust_spinlocks cleared the way for us.

		/*

		 * Only unblank the console if we are called in enabled

		 * context or a bust_spinlocks cleared the way for us.

		/*

		 * Only unblank the console if we are called in enabled

		 * context or a bust_spinlocks cleared the way for us.

/*

 * Dummy power off function.

	/*

	 * Setup lowcore for boot cpu

	/*

	 * Allocate the global restart stack which is the same for

	 * all CPUs in cast *one* of them does a PSW restart.

	/*

	 * Set up PSW restart to call ipl.c:do_restart(). Copy the relevant

	 * restart data to the absolute zero lowcore. This is necessary if

	 * PSW restart is done on an offline CPU that has lowcore zero.

 Setup absolute zero lowcore */

 br %r1 */

		/*

		 * In memblock, end points to the first byte after the

		 * range while in resourses, end points to the last byte in

		 * the range.

	/*

	 * Re-add removed crash kernel memory as reserved memory. This makes

	 * sure it will be mapped with the identity mapping and struct pages

	 * will be created, so it can be resized later on.

	 * However add it later since the crash kernel resource should not be

	 * part of the System RAM resource.

/*

 * When kdump is enabled, we have to ensure that no memory from the area

 * [0 - crashkernel memory size] is set offline - it will be exchanged with

 * the crashkernel memory region when kdump is triggered. The crashkernel

 * memory region can never get offlined (pages are unmovable).

/*

 * Reserve memory for kdump kernel to be loaded with kexec

 The crashkernel fits into OLDMEM, reuse OLDMEM */

 Find suitable area in free memory */

/*

 * Reserve the initrd from being used by memblock

/*

 * Reserve the memory area used to pass the certificate lists

 keep memblock lists close to the kernel */

/*

 * Check for initrd being in usable memory

/*

 * Reserve memory used for lowcore/command line/kernel image.

	/*

	 * Init storage key for present memory

 Move original AMODE31 section to the new one */

 Zero out the old AMODE31 section to catch invalid accesses within it */

 Update all AMODE31 region references */

 This must be called after AMODE31 relocation */

 Update control registers CR2, CR5 and CR15 */

/*

 * Add system information as device randomness

/*

 * Find the correct size for the task_struct. This depends on

 * the size of the struct fpu at the end of the thread_struct

 * which is embedded in the task_struct.

/*

 * Issue diagnose 318 to set the control program name and

 * version codes.

/*

 * Print the component list from the IPL report

/*

 * Setup function called from init/main.c just after the banner

 * was printed.

        /*

         * print what head.S has found out about the machine

 Have one command line that is parsed and saved in /proc/cmdline */

 boot_command_line has been already set up in early.c */

 Deactivate elfcorehdr= kernel parameter */

 Do some memory reservations *before* memory is added to memblock */

 Get information about *all* installed memory */

	/*

	 * Be aware that smp_save_dump_cpus() triggers a system reset.

	 * Therefore CPU and device initialization should be done afterwards.

	/*

	 * Create kernel page tables and switch to virtual addressing.

	/*

	 * After paging_init created the kernel page table, the new PSWs

	 * in lowcore can now run with DAT enabled.

 Setup default console */

 Setup zfcp/nvme dump support */

 Add system specific data to the random pool */

 SPDX-License-Identifier: GPL-2.0

		/*

		 * The user explicitely requested nobp=1, enable it and

		 * disable the expoline support.

		/*

		 * The machine supports etokens.

		 * Disable expolines and disable nobp.

		/*

		 * The kernel has been compiled with expolines.

		 * Keep expolines enabled and disable nobp.

	/*

	 * If the kernel has not been compiled with expolines the

	 * nobp setting decides what is done, this depends on the

	 * CONFIG_KERNEL_NP option and the nobp/nospec parameters.

 Second part of the instruction replace is always a nop */

 brcl instruction */

 brasl instruction */

 exrl %r0,<target-br> */

 larl %rx,<target br> + ex %r0,0(%rx) */

 Check for unconditional branch 0x07f? or 0x47f???? */

 brcl to b, replace with bc + nopr */

 brcl to br, replace with bcr + nop */

 brasl to b, replace with bas + nopr */

 brasl to br, replace with basr + nop */

 CONFIG_EXPOLINE */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright IBM Corp. 2016

 * Author(s): Martin Schwidefsky <schwidefsky@de.ibm.com>

 SPDX-License-Identifier: GPL-2.0

/*

 *    Time of day based timer functions.

 *

 *  S390 version

 *    Copyright IBM Corp. 1999, 2008

 *    Author(s): Hartmut Penner (hp@de.ibm.com),

 *               Martin Schwidefsky (schwidefsky@de.ibm.com),

 *               Denis Joseph Barrow (djbarrow@de.ibm.com,barrow_dj@yahoo.com)

 *

 *  Derived from "arch/i386/kernel/time.c"

 *    Copyright (C) 1991, 1992, 1995  Linus Torvalds

/*

 * Get time offsets with PTFF

 Initialize TOD steering parameters */

 get LPAR offset */

 get initial leap seconds */

/*

 * Scheduler clock - returns current time in nanosec units.

/*

 * Set up lowcore and control register of the current cpu to

 * enable TOD clock and clock comparator interrupts.

 Enable clock comparator timer interrupt. */

 Always allow the timing alert external interrupt. */

 protect from changes to steering parameters */

		/*

		 * manually steer by 1 cycle every 2^16 cycles. This

		 * corresponds to shifting the tod delta by 15. 1s is

		 * therefore steered in ~9h. The adjust will decrease

		 * over time, until it finally reaches 0.

/*

 * Initialize the TOD clock and the CPU timer of

 * the boot cpu.

 Reset time synchronization interfaces. */

 request the clock comparator external interrupt */

 request the timing alert external interrupt */

 Enable TOD clock interrupts on the boot cpu. */

 Enable cpu timer interrupts on the boot cpu. */

/*

 * The get_clock function for the physical clock. It will get the current

 * TOD clock, subtract the LPAR offset and write the result to *clock.

 * The function returns 0 if the clock is in sync with the external time

 * source. If the clock mode is local it will return -EOPNOTSUPP and

 * -EAGAIN if the clock is not in sync with the external reference.

 Success: time is in sync. */

/*

 * Make get_phys_clock() return -EAGAIN.

	/*

	 * Clear the in-sync bit 2^31. All get_phys_clock calls will

	 * fail until the sync bit is turned back on. In addition

	 * increase the "sequence" counter to avoid the race of an

	 * stp event and the complete recovery against get_phys_clock.

/*

 * Make get_phys_clock() return 0 again.

 * Needs to be called from a context disabled for preemption.

/*

 * Function to check if the clock is in sync.

/*

 * Apply clock delta to the global data structures.

 * This is called once on the CPU that performed the clock sync.

 Fixup the monotonic sched clock. */

 Adjust TOD steering parameters. */

 Calculate how much of the old adjustment is left. */

 Update LPAR offset. */

 Call the TOD clock change notifier. */

/*

 * Apply clock delta to the per-CPU data structures of this CPU.

 * This is called for each online CPU after the call to clock_sync_global.

 Add the delta to the clock comparator. */

 Adjust the last_update_clock time-stamp. */

 Single threaded workqueue used for stp sync events */

/*

 * Server Time Protocol (STP) code.

/*

 * Reset STP attachment.

/*

 * STP timing alert. There are three causes:

 * 1) timing status change

 * 2) link availability change

 * 3) time control parameter change

 * In all three cases we are only interested in the clock source state.

 * If a STP clock source is now available use it.

/*

 * STP sync check machine check. This is called when the timing state

 * changes from the synchronized state to the unsynchronized state.

 * After a STP sync check the clock is not in sync. The machine check

 * is broadcasted to all cpus at the same time.

/*

 * STP island condition machine check. This is called when an attached

 * server  attempts to communicate over an STP link and the servers

 * have matching CTN ids and have a valid stratum-1 configuration

 * but the configurations do not match.

 Wait until all other cpus entered the sync function. */

 Slave */

 Wait for in_sync to be set. */

 Didn't work. Clear per-cpu in sync bit again. */

 Apply clock delta to per-CPU fields of this CPU. */

		/*

		 * Either a scheduled leap second was removed by the operator,

		 * or STP is out of sync. In both cases, clear the leap second

		 * kernel flags.

 arm Timer to clear leap second flags */

		/* The day the leap second is scheduled for hasn't been reached. Retry

		 * in one hour.

/*

 * STP work. Check for the STP state and take over the clock

 * synchronization if the STP clock source is usable.

 prevent multiple execution. */

 Skip synchronization if the clock is already in sync. */

		/*

		 * There is a usable clock but the synchonization failed.

		 * Retry after a second.

/*

 * STP subsys sysfs interface functions

/*

 * Can't use DEVICE_ATTR because the attribute should be named

 * stp/online but dev_attr_online already exists in this file ..

 SPDX-License-Identifier: GPL-2.0

/*

 * Idle functions for s390.

 *

 * Copyright IBM Corp. 2014

 *

 * Author(s): Martin Schwidefsky <schwidefsky@de.ibm.com>

 Wait for external, I/O or machine check interrupt. */

 psw_idle() returns with interrupts disabled. */

 Account time spent with enabled wait psw loaded as idle time. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright IBM Corp. 2005, 2011

 *

 * Author(s): Rolf Adelsberger,

 *	      Heiko Carstens <heiko.carstens@de.ibm.com>

 *	      Michael Holzheu <holzheu@linux.vnet.ibm.com>

/*

 * Reset the system, copy boot CPU registers to absolute zero,

 * and jump to the kdump image

 store_status() saved the prefix register to lowcore */

 Now do the reset  */

	/*

	 * Copy dump CPU store status info to absolute zero.

	 * This need to be done *after* s390_reset_system set the

	 * prefix register of this CPU to zero

 Die if start_kdump returns */

/*

 * Start kdump: create a LGR log entry, store status of all CPUs and

 * branch to __do_machine_kdump.

 Get status of the other CPUs */

 Store status of the boot CPU */

	/*

	 * To create a good backchain for this CPU in the dump store_status

	 * is passed the address of a function. The address is saved into

	 * the PSW save area of the boot CPU and the function is invoked as

	 * a tail call of store_status. The backchain in the dump will look

	 * like this:

	 *   restart_int_handler ->  __machine_kexec -> __do_machine_kdump

	 * The call to store_status() will not return.

 disable DAT */

 enable DAT */

 CONFIG_CRASH_DUMP */

/*

 * Check if kdump checksums are valid: We call purgatory with parameter "0"

/*

 * Give back memory to hypervisor before new kdump is loaded

 We don't support anything but the default image type for now. */

 Get the destination where the assembler code should be copied to.*/

 Then copy it */

/*

 * Do normal kexec

 disable DAT - avoid no-execute */

 Call the moving routine */

 Die if kexec returns */

/*

 * Reset system and call either kdump or normal kexec

/*

 * Do either kdump or normal kexec. In case of kdump we first ask

 * purgatory, if kdump checksums are valid.

 SPDX-License-Identifier: GPL-2.0

/*

 * Perf PMU sysfs events attributes for available CPU-measurement counters

 *

 BEGIN: CPUM_CF COUNTER DEFINITIONS =================================== */

 END: CPUM_CF COUNTER DEFINITIONS ===================================== */

 Determine generic counters set(s) */

 Determine version specific crypto set */

 Determine model-specific counter set(s) */

 SPDX-License-Identifier: GPL-2.0

/*

 *    Copyright IBM Corp. 2017

 Accept only "earlyprintk" and "earlyprintk=sclp" */

 SPDX-License-Identifier: GPL-2.0

/*

 * OS info memory interface

 *

 * Copyright IBM Corp. 2012

 * Author(s): Michael Holzheu <holzheu@linux.vnet.ibm.com>

/*

 * OS info structure has to be page aligned

/*

 * Compute checksum over OS info structure

/*

 * Add crashkernel info to OS info and update checksum

/*

 * Add OS info entry and update checksum

/*

 * Initialize OS info structure and set lowcore pointer

/*

 * Allocate and copy OS info entry from oldmem

/*

 * Initialize os info and os info entries from oldmem

/*

 * Return pointer to os infor entry and its size

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

/*

 *    Copyright IBM Corp. 2007, 2011

 *    Author(s): Heiko Carstens <heiko.carstens@de.ibm.com>

/*

 * Socket/Book linked lists and cpu_topology updates are

 * protected by "sched_domains_mutex".

	/* This is racy, but it doesn't matter since it is just a heuristic.

	 * Worst case is that we poll in a higher frequency for a bit longer.

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright IBM Corp. 2001, 2009

 *  Author(s): Ulrich Weigand <Ulrich.Weigand@de.ibm.com>,

 *	       Martin Schwidefsky <schwidefsky@de.ibm.com>,

/*

 * stsi - store system information

 *

 * Returns the current configuration level if function code 0 was specified.

 * Otherwise returns 0 on success or a negative value on error.

 EBCDIC */

 UTF-8 */

	/*

	 * Sigh: the model field has been renamed with System z9

	 * to model_capacity and a new model field has been added

	 * after the plant field. To avoid confusing older programs

	 * the "Model:" prints "model_capacity model" or just

	 * "model_capacity" if the model string is empty .

	/*

	 * Sigh 2. According to the specification the alternate

	 * capability field is a 32 bit floating point number

	 * if the higher order 8 bits are not zero. Printing

	 * a floating point number in the kernel is a no-no,

	 * always print the number as 32 bit unsigned integer.

	 * The user-space needs to know about the strange

	 * encoding of the alternate cpu capability.

 CONFIG_PROC_FS */

/*

 * Service levels interface.

/*

 * CPU capability might have changed. Therefore recalculate loops_per_jiffy.

		/*

		 * Major sigh. The cpu capability encoding is "special".

		 * If the first 9 bits of info->capability are 0 then it

		 * is a 32 bit unsigned integer in the range 0 .. 2^23.

		 * If the first 9 bits are != 0 then it is a 32 bit float.

		 * In addition a lower value indicates a proportionally

		 * higher cpu capacity. Bogomips are the other way round.

		 * To get to a halfway suitable number we divide 1e7

		 * by the cpu capability number. Yes, that means a floating

		 * point division ..

		/*

		 * Really old machine without stsi block for basic

		 * cpu information. Report 42.0 bogomips.

/*

 * calibrate the delay loop

 Print the good old Bogomips line .. */

 CONFIG_DEBUG_FS */

 SPDX-License-Identifier: GPL-2.0

/*

 *    Virtual cpu timer based timer functions.

 *

 *    Copyright IBM Corp. 2004, 2012

 *    Author(s): Jan Glauber <jan.glauber@de.ibm.com>

 Store current cpu timer value */

 Set new value imm. afterwards */

 Update scaling factor */

/*

 * Update process times based on virtual cpu times stored by entry.S

 * to the lowcore fields user_timer, system_timer & steal_clock.

 Use STORE CLOCK by default, STORE CLOCK FAST if available. */

 Update MT utilization calculation */

 Calculate cputime delta */

 Push account value */

/*

 * In s390, accounting pending user time also implies

 * accounting system time in order to correctly compute

 * the stolen time accounting.

/*

 * Update process times based on virtual cpu times stored by entry.S

 * to the lowcore fields user_timer, system_timer & steal_clock.

/*

 * Sorted add to a list. List is linear searched until first bigger

 * element is found.

/*

 * Handler for expired virtual CPU timer.

 walk timer list, fire all expired timers */

 move expired timer to the callback queue */

 Do callbacks and recharge periodic timers */

 Recharge interval timer */

 First timer, just program it. */

 Update timer against current base. */

 The new timer expires before the current timer. */

 Insert new timer into the list. */

/*

 * add_virt_timer - add a oneshot virtual CPU timer

/*

 * add_virt_timer_int - add an interval virtual CPU timer

/*

 * returns whether it has modified a pending timer (1) or not (0)

/*

 * returns whether it has modified a pending timer (1) or not (0)

/*

 * Delete a virtual timer.

 *

 * returns whether the deleted timer was pending (1) or not (0)

/*

 * Start the virtual CPU timer on the current CPU.

 set initial cpu timer */

 Setup initial MT scaling values */

 SPDX-License-Identifier: GPL-2.0

/*

 * In-kernel vector facility support functions

 *

 * Copyright IBM Corp. 2015

 * Author(s): Hendrik Brueckner <brueckner@linux.vnet.ibm.com>

	/*

	 * Limit the save to the FPU/vector registers already

	 * in use by the previous context

 Save floating point control */

 Save floating-point registers */

 Test and save vector registers */

		/*

		 * Test if any vector register must be saved and, if so,

		 * test if all register can be saved.

 load save area */

 KERNEL_VXR */

 no work -> done */

 -> save V0..V31 */

		/*

		 * Test for special case KERNEL_FPU_MID only. In this

		 * case a vstm V8..V23 is the best instruction

 KERNEL_VXR_MID */

 -> save V8..V23 */

 vstm %v8,%v23,128(%r1) */

 Test and save the first half of 16 vector registers */

 KERNEL_VXR_LOW */

 -> KERNEL_VXR_HIGH */

 11 -> save V0..V15 */

 10 -> save V8..V15 */

 vstm %v0,%v7,0(%r1) */

 vstm %v8,%v15,128(%r1) */

 vstm %v0,%v15,0(%r1) */

 Test and save the second half of 16 vector registers */

 KERNEL_VXR_HIGH */

 11 -> save V16..V31 */

 10 -> save V24..V31 */

 vstm %v16,%v23,256(%r1) */

 vstm %v24,%v31,384(%r1) */

 vstm %v0,%v15,0(%r1) */

 vstm %v16,%v31,256(%r1) */

	/*

	 * Limit the restore to the FPU/vector registers of the

	 * previous context that have been overwritte by the

	 * current context

 Restore floating-point controls */

 Restore floating-point registers */

 Test and restore (load) vector registers */

		/*

		 * Test if any vector register must be loaded and, if so,

		 * test if all registers can be loaded at once.

 load restore area */

 KERNEL_VXR */

 no work -> done */

 -> restore V0..V31 */

		/*

		 * Test for special case KERNEL_FPU_MID only. In this

		 * case a vlm V8..V23 is the best instruction

 KERNEL_VXR_MID */

 -> restore V8..V23 */

 vlm %v8,%v23,128(%r1) */

 Test and restore the first half of 16 vector registers */

 KERNEL_VXR_LOW */

 -> KERNEL_VXR_HIGH */

 11 -> restore V0..V15 */

 10 -> restore V8..V15 */

 vlm %v0,%v7,0(%r1) */

 vlm %v8,%v15,128(%r1) */

 vlm %v0,%v15,0(%r1) */

 Test and restore the second half of 16 vector registers */

 KERNEL_VXR_HIGH */

 11 -> restore V16..V31 */

 10 -> restore V24..V31 */

 vlm %v16,%v23,256(%r1) */

 vlm %v24,%v31,384(%r1) */

 vlm %v0,%v15,0(%r1) */

 vlm %v16,%v31,256(%r1) */

 SPDX-License-Identifier: GPL-2.0

/*

 * Jump label s390 support

 *

 * Copyright IBM Corp. 2011

 * Author(s): Jan Glauber <jang@linux.vnet.ibm.com>

 brcl 0,offset */

 brcl 15,offset */

 SPDX-License-Identifier: GPL-2.0

/*

 * Dynamic function tracer architecture backend.

 *

 * Copyright IBM Corp. 2009,2014

 *

 *   Author(s): Heiko Carstens <heiko.carstens@de.ibm.com>,

 *		Martin Schwidefsky <schwidefsky@de.ibm.com>

/*

 * To generate function prologue either gcc's hotpatch feature (since gcc 4.8)

 * or a combination of -pg -mrecord-mcount -mnop-mcount -mfentry flags

 * (since gcc 9 / clang 10) is used.

 * In both cases the original and also the disabled function prologue contains

 * only a single six byte instruction and looks like this:

 * >	brcl	0,0			# offset 0

 * To enable ftrace the code gets patched like above and afterwards looks

 * like this:

 * >	brasl	%r0,ftrace_caller	# offset 0

 *

 * The instruction will be patched by ftrace_make_call / ftrace_make_nop.

 * The ftrace function gets called with a non-standard C function call ABI

 * where r0 contains the return address. It is also expected that the called

 * function only clobbers r0 and r1, but restores r2-r15.

 * For module code we can't directly jump to ftrace caller, but need a

 * trampoline (ftrace_plt), which clobbers also r1.

 exrl */

 CONFIG_EXPOLINE */

 CONFIG_MODULES */

 exrl */

 CONFIG_EXPOLINE */

 Check for the compiler-generated fentry nop (brcl 0, .). */

 Generate the trampoline. */

 brasl %r1, shared */

 Generate a jump to the trampoline. */

 set mask field to zero */

 set mask field to all ones */

	/*

	 * Flush any pre-fetched instructions on all

	 * CPUs to make the new code visible.

 CONFIG_MODULES */

/*

 * Hook the return address and push it in the stack of return addresses

 * in current thread info.

/*

 * Patch the kernel code at ftrace_graph_caller location. The instruction

 * there is branch relative on condition. To enable the ftrace graph code

 * block, we simply patch the mask field of the instruction to zero and

 * turn the instruction into a nop.

 * To disable the ftrace graph code the mask field will be patched to

 * all ones, which turns the instruction into an unconditional branch.

 CONFIG_FUNCTION_GRAPH_TRACER */

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

/*

 * CPU-Measurement Counter Facility Support - Common Layer

 *

 *  Copyright IBM Corp. 2019

 *  Author(s): Hendrik Brueckner <brueckner@linux.ibm.com>

 Per-CPU event structure for the counter facility */

 Indicator whether the CPU-Measurement Counter Facility Support is ready */

 CPU-measurement alerts for the counter facility */

	/* Measurement alerts are shared and might happen when the PMU

 counter authorization change alert */

 loss of counter data alert */

 loss of MT counter data alert */

 store alert for special handling by in-kernel users */

 Disable CPU counter sets */

 Initialize the CPU-measurement counter facility */

 Obtain the CPU-measurement alerts for the counter facility */

 Release the CPU-measurement counter facility */

/* Return the maximum possible counter set size (in number of 8 byte counters)

 * depending on type and model number.

	/* clear bit 15 of cr0 to unauthorize problem-state to

 register handler for measurement-alert interruptions */

 SPDX-License-Identifier: GPL-2.0

/*

 * Stack dumping functions

 *

 *  Copyright IBM Corp. 1999, 2013

 Sanity check: ABI requires SP to be aligned 8 bytes. */

 Check per-task stack */

 Check per-cpu stacks */

	/*

	 * Make sure we don't iterate through any given stack more than once.

	 * If it comes up a second time then there's something wrong going on:

	 * just break out and report an unknown stack type.

 Show stack backtrace if pt_regs is from kernel mode */

 SPDX-License-Identifier: GPL-2.0

 VM IPL PARM routines */

		/* If at least one character is lowercase, we assume mixed

		 * case; otherwise we convert everything to lowercase.

 a-i */

 j-r */

 s-z */

 SPDX-License-Identifier: GPL-2.0 */

 New stack pointer leaves the current stack */

 'sp' does not point to a valid stack */

 user mode or kernel thread pt_regs at the bottom of task stack */

 user mode pt_regs at the bottom of irq stack */

 skip bogus %r14 */

 Non-zero back-chain points to the previous frame */

 No back-chain, look for a pt_regs structure */

 Sanity check: ABI requires SP to be aligned 8 bytes. */

 Update unwind state */

 Don't even attempt to start from user mode regs: */

 Get the instruction pointer from pt_regs or the stack frame */

 Get current stack pointer and initialize stack info */

 Something is wrong with the stack pointer */

 Stack frame is within valid stack */

 Update unwind state */

 Skip through the call chain to the specified starting frame */

 SPDX-License-Identifier: GPL-2.0

/*

 * store hypervisor information instruction emulation functions.

 *

 * Copyright IBM Corp. 2016

 * Author(s): Janosch Frank <frankja@linux.vnet.ibm.com>

/*

 * CP and IFL as EBCDIC strings, SP/0x40 determines the end of string

 * as they are justified with spaces.

 reserved */

 reserved */

 reserved */

 reserved */

 reserved */

 reserved */

 reserved */

 reserved */

/*

 * STHYI requires extensive locking in the higher hypervisors

 * and is very computational/memory expensive. Therefore we

 * cache the retrieved data whose valid period is 1s.

/*

 * Scales the cpu capping from the lpar range to the one expected in

 * sthyi data.

 *

 * diag204 reports a cap in hundredths of processor units.

 * z/VM's range for one core is 0 - 0x10000.

 Errors are handled through the validity bits in the response. */

 Returns a pointer to the the next partition block. */

 Errors are handled through the validity bits in the response. */

		/*

		 * For the calling lpar we also need to get the cpu

		 * caps and weights. The time information block header

		 * specifies the offset to the partition block of the

		 * caller lpar, so we know when we process its data.

	/*

	 * Everything below needs global performance data to be

	 * meaningful.

 subcode */

	/*

	 * If the facility is on, we don't want to emulate the instruction.

	 * We ask the hypervisor to provide the data.

 expired */

/*

 * sthyi_fill - Fill page with data returned by the STHYI instruction

 *

 * @dst: Pointer to zeroed page

 * @rc:  Pointer for storing the return code of the instruction

 *

 * Fills the destination with system information returned by the STHYI

 * instruction. The data is generated by emulation or execution of STHYI,

 * if available. The return value is the condition code that would be

 * returned, the rc parameter is the return code which is passed in

 * register R2 + 1.

 cache expired */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright IBM Corp. 2012

 * Author(s): Jan Glauber <jang@linux.vnet.ibm.com>

 empty control block to disable RI by loading it */

	/*

	 * Make sure the RI bit is deleted from the PSW. If the user did not

	 * switch off RI before the system call the process will get a

	 * specification exception otherwise.

/*

 * The signum argument is unused. In older kernels it was used to

 * specify a real-time signal. For backwards compatibility user space

 * should pass a valid real-time signal number (the signum argument

 * was checked in older kernels).

 now load the control block to make it available */

 SPDX-License-Identifier: GPL-2.0

/*

 * Performance event support for the System z CPU-measurement Sampling Facility

 *

 * Copyright IBM Corp. 2013, 2018

 * Author(s): Hendrik Brueckner <brueckner@linux.vnet.ibm.com>

/* Minimum number of sample-data-block-tables:

 * At least one table is required for the sampling buffer structure.

 * A single table contains up to 511 pointers to sample-data-blocks.

/* Number of sample-data-blocks per sample-data-block-table (SDBT):

 * A table contains SDB pointers (8 bytes) and one table-link entry

 * that points to the origin of the next SDBT.

/* Maximum page offset for an SDBT table-link entry:

 * If this page offset is reached, a table-link entry to the next SDBT

 * must be added.

/* Minimum and maximum sampling buffer sizes:

 *

 * This number represents the maximum size of the sampling buffer taking

 * the number of sample-data-block-tables into account.  Note that these

 * numbers apply to the basic-sampling function only.

 * The maximum number of SDBs is increased by CPUM_SF_SDB_DIAG_FACTOR if

 * the diagnostic-sampling function is active.

 *

 * Sampling buffer size		Buffer characteristics

 * ---------------------------------------------------

 *	 64KB		    ==	  16 pages (4KB per page)

 *				   1 page  for SDB-tables

 *				  15 pages for SDBs

 *

 *  32MB		    ==	8192 pages (4KB per page)

 *				  16 pages for SDB-tables

 *				8176 pages for SDBs

 Sample-data-block-table origin */

 buffer characteristics (required for buffer increments) */

 Number of sample-data-blocks */

 Number of sample-data-block-tables */

 last sample-data-block-table */

 index of SDB of buffer head */

 index of SDB of alert request position */

 mark of SDB not marked full */

 SDB address for fast lookup */

 SDBT address for fast lookup */

 CPU-measurement sampling information block */

 CPU-measurement sampling control block */

 Sampling buffer */

 Status flags */

 Scheduled perf event */

 AUX buffer output handle */

 Debug feature */

/*

 * sf_disable() - Switch off sampling facility

/*

 * sf_buffer_available() - Check for an allocated sampling buffer

/*

 * deallocate sampling facility buffer

 Free the SDBT after all SDBs are processed... */

 Process table-link entries */

 If the origin is reached, sampling buffer is freed */

 Process SDB pointer */

 Allocate and initialize sample-data-block */

 Link SDB into the sample-data-block-table */

/*

 * realloc_sampling_buffer() - extend sampler memory

 *

 * Allocates new sample-data-blocks and adds them to the specified sampling

 * buffer memory.

 *

 * Important: This modifies the sampling buffer and must be called when the

 *	      sampling facility is disabled.

 *

 * Returns zero on success, non-zero otherwise.

	/* Append to the existing sampling buffer, overwriting the table-link

	 * register.

	 * The tail variables always points to the "tail" (last and table-link)

	 * entry in an SDB-table.

	/* Do a sanity check whether the table-link entry points to

	 * the sampling buffer origin.

 Allocate remaining SDBs */

 Allocate a new SDB-table if it is full. */

 Link current page to tail of chain */

		/* Allocate a new sample-data-block.

		 * If there is not enough memory, stop the realloc process

		 * and simply use what was allocated.  If this is a temporary

		 * issue, a new realloc call (if required) might succeed.

			/* Undo last SDBT. An SDBT with no SDB at its first

			 * entry but with an SDBT entry instead can not be

			 * handled by the interrupt handler code.

			 * Avoid this situation.

 Allocated at least one SBD */

 Link sampling buffer to its origin */

/*

 * allocate_sampling_buffer() - allocate sampler memory

 *

 * Allocates and initializes a sampling buffer structure using the

 * specified number of sample-data-blocks (SDB).  For each allocation,

 * a 4K page is used.  The number of sample-data-block-tables (SDBT)

 * are calculated from SDBs.

 * Also set the ALERT_REQ mask in each SDBs trailer.

 *

 * Returns zero on success, non-zero otherwise.

 Allocate the sample-data-block-table origin */

	/* Link the table origin to point to itself to prepare for

	 * realloc_sampling_buffer() invocation.

 Allocate requested number of sample-data-blocks */

 Limit the number of SDBs to not exceed the maximum */

	/* Calculate sampling buffers using 4K pages

	 *

	 *    1. The sampling size is 32 bytes for basic sampling. This size

	 *	 is the same for all machine types. Diagnostic

	 *	 sampling uses auxlilary data buffer setup which provides the

	 *	 memory for SDBs using linux common code auxiliary trace

	 *	 setup.

	 *

	 *    2. Function alloc_sampling_buffer() sets the Alert Request

	 *	 Control indicator to trigger a measurement-alert to harvest

	 *	 sample-data-blocks (SDB). This is done per SDB. This

	 *	 measurement alert interrupt fires quick enough to handle

	 *	 one SDB, on very high frequency and work loads there might

	 *	 be 2 to 3 SBDs available for sample processing.

	 *	 Currently there is no need for setup alert request on every

	 *	 n-th page. This is counterproductive as one IRQ triggers

	 *	 a very high number of samples to be processed at one IRQ.

	 *

	 *    3. Use the sampling frequency as input.

	 *	 Compute the number of SDBs and ensure a minimum

	 *	 of CPUM_SF_MIN_SDB.  Depending on frequency add some more

	 *	 SDBs to handle a higher sampling rate.

	 *	 Use a minimum of CPUM_SF_MIN_SDB and allow for 100 samples

	 *	 (one SDB) for every 10000 HZ frequency increment.

	 *

	 *    4. Compute the number of sample-data-block-tables (SDBT) and

	 *	 ensure a minimum of CPUM_SF_MIN_SDBT (one table can manage up

	 *	 to 511 SDBs).

	/* If there is already a sampling buffer allocated, it is very likely

	 * that the sampling facility is enabled too.  If the event to be

	 * initialized requires a greater sampling buffer, the allocation must

	 * be postponed.  Changing the sampling buffer requires the sampling

	 * facility to be in the disabled state.  So, account the number of

	 * required SDBs and let cpumsf_pmu_enable() resize the buffer just

	 * before the event is started.

	/* Use a percentage-based approach to extend the sampling facility

	 * buffer.  Accept up to 5% sample data loss.

	 * Vary the extents between 1% to 5% of the current number of

	 * sample-data-blocks.

	/* The sample_overflow contains the average number of sample data

	 * that has been lost because sample-data-blocks were full.

	 *

	 * Calculate the total number of sample data entries that has been

	 * discarded.  Then calculate the ratio of lost samples to total samples

	 * per second in percent.

 Compute number of sample-data-blocks */

/* extend_sampling_buffer() - Extend sampling buffer

 * @sfb:	Sampling buffer structure (for local CPU)

 * @hwc:	Perf event hardware structure

 *

 * Use this function to extend the sampling buffer based on the overflow counter

 * and postponed allocation extents stored in the specified Perf event hardware.

 *

 * Important: This function disables the sampling facility in order to safely

 *	      change the sampling buffer structure.  Do not call this function

 *	      when the PMU is active.

	/* Disable the sampling facility to reset any states and also

	 * clear pending measurement alerts.

	/* Extend the sampling buffer.

	 * This memory allocation typically happens in an atomic context when

	 * called by perf.  Because this is a reallocation, it is fine if the

	 * new SDB-request cannot be satisfied immediately.

 Number of perf events counting hardware events */

 Used to avoid races in calling reserve/release_cpumf_hardware */

 Release PMC if this is the last perf event */

 Idle process */

		/*

		 * Only top level events contain the pid namespace in which

		 * they are created.

		/*

		 * See also 1d953111b648

		 * "perf/core: Don't report zero PIDs for exiting tasks".

	/*

	 * Obtain the PID from the basic-sampling data entry and

	 * correct the data->tid_entry.pid value.

 Protect callchain buffers, tasks */

 Update the process ID (see also kernel/events/core.c) */

		/* The min/max sampling rates specifies the valid range

		 * of sample periods.  If the specified sample period is

		 * out of range, limit the period to the range boundary.

		/* The perf core maintains a maximum sample rate that is

		 * configurable through the sysctl interface.  Ensure the

		 * sampling rate does not exceed this value.  This also helps

		 * to avoid throttling when pushing samples with

		 * perf_event_overflow().

/* The sampling information (si) contains information about the

 * min/max sampling intervals and the CPU speed.  So calculate the

 * correct sampling interval and avoid the whole period adjust

 * feedback loop.

 *

 * Since the CPU Measurement sampling facility can not handle frequency

 * calculate the sampling interval when frequency is specified using

 * this formula:

 *	interval := cpu_speed * 1000000 / sample_freq

 *

 * Returns errno on bad input and zero on success with parameter interval

 * set to the correct sampling rate.

 *

 * Note: This function turns off freq bit to avoid calling function

 * perf_adjust_period(). This causes frequency adjustment in the common

 * code part which causes tremendous variations in the counter values.

 Don't call  perf_adjust_period() */

 Reserve CPU-measurement sampling facility */

 Access per-CPU sampling information (query sampling info) */

	/*

	 * The event->cpu value can be -1 to count on every CPU, for example,

	 * when attaching to a task.  If this is specified, use the query

	 * sampling info from the current CPU, otherwise use event->cpu to

	 * retrieve the per-CPU information.

	 * Later, cpuhw indicates whether to allocate sampling buffers for a

	 * particular CPU (cpuhw!=NULL) or each online CPU (cpuw==NULL).

		/* Event is pinned to a particular CPU, retrieve the per-CPU

		 * sampling structure for accessing the CPU-specific QSI.

	/* Check sampling facility authorization and, if not authorized,

	 * fall back to other PMUs.  It is safe to check any CPU because

	 * the authorization is identical for all configured CPUs.

 Always enable basic sampling */

	/* Check if diagnostic sampling is requested.  Deny if the required

	 * sampling authorization is missing.

 Check and set other sampling flags */

 Initialize sample data overflow accounting */

 Use AUX buffer. No need to allocate it by ourself */

	/* Allocate the per-CPU sampling buffer using the CPU information

	 * from the event.  If the event is not pinned to a particular

	 * CPU (event->cpu == -1; or cpuhw == NULL), allocate sampling

	 * buffers for each online CPU.

 Event is pinned to a particular CPU */

		/* Event is not pinned, allocate sampling buffer on

		 * each online CPU

	/* If PID/TID sampling is active, replace the default overflow

	 * handler to extract and resolve the PIDs from the basic-sampling

	 * data entries.

 No support for taken branch sampling */

 No support for callchain, stacks and registers */

		/* Support sampling of CPU cycles in addition to the

		 * counter facility.  However, the counter facility

		 * is more precise and, hence, restrict this PMU to

		 * sampling events only.

 Check online status of the CPU to which the event is pinned */

	/* Force reset of idle/hv excludes regardless of what the

	 * user requested.

	/* Check whether to extent the sampling buffer.

	 *

	 * Two conditions trigger an increase of the sampling buffer for a

	 * perf event:

	 *    1. Postponed buffer allocations from the event initialization.

	 *    2. Sampling overflows that contribute to pending allocations.

	 *

	 * Note that the extend_sampling_buffer() function disables the sampling

	 * facility, but it can be fully re-enabled using sampling controls that

	 * have been saved in cpumsf_pmu_disable().

			/*

			 * Account number of overflow-designated

			 * buffer extents

 Rate may be adjusted with ioctl() */

 (Re)enable the PMU and sampling facility */

 Load current program parameter */

 Switch off sampling activation control */

 Save state of TEAR and DEAR register contents */

		/* TEAR/DEAR values are valid only if the sampling facility is

		 * enabled.  Note that cpumsf_pmu_disable() might be called even

		 * for a disabled sampling facility because cpumsf_pmu_enable()

		 * controls the enable/disable state.

/* perf_exclude_event() - Filter event

 * @event:	The perf event

 * @regs:	pt_regs structure

 * @sde_regs:	Sample-data-entry (sde) regs structure

 *

 * Filter perf events according to their exclude specification.

 *

 * Return non-zero if the event shall be excluded.

/* perf_push_sample() - Push samples to perf

 * @event:	The perf event

 * @sample:	Hardware sample data

 *

 * Use the hardware sample data to create perf event sample.  The sample

 * is the pushed to the event subsystem and the function checks for

 * possible event overflows.  If an event overflow occurs, the PMU is

 * stopped.

 *

 * Return non-zero if an event overflow occurred.

 Setup perf sample */

	/* Setup pt_regs to look like an CPU-measurement external interrupt

	 * using the Program Request Alert code.  The regs.int_parm_long

	 * field which is unused contains additional sample-data-entry related

	 * indicators.

	/*

	 * Use the hardware provided configuration level to decide if the

	 * sample belongs to a guest or host. If that is not available,

	 * fall back to the following heuristics:

	 * A non-zero guest program parameter always indicates a guest

	 * sample. Some early samples or samples from guests without

	 * lpp usage would be misaccounted to the host. We use the asn

	 * value as an addon heuristic to detect most of these guest samples.

	 * If the value differs from 0xffff (the host value), we assume to

	 * be a KVM guest.

 logical partition */

 virtual machine */

 old machine, use heuristics */

	/*

	 * Store the PID value from the sample-data-entry to be

	 * processed and resolved by cpumsf_output_event_pid().

/* hw_collect_samples() - Walk through a sample-data-block and collect samples

 * @event:	The perf event

 * @sdbt:	Sample-data-block table

 * @overflow:	Event overflow counter

 *

 * Walks through a sample-data-block and collects sampling data entries that are

 * then pushed to the perf event subsystem.  Depending on the sampling function,

 * there can be either basic-sampling or combined-sampling data entries.  A

 * combined-sampling data entry consists of a basic- and a diagnostic-sampling

 * data entry.	The sampling function is determined by the flags in the perf

 * event hardware structure.  The function always works with a combined-sampling

 * data entry but ignores the the diagnostic portion if it is not available.

 *

 * Note that the implementation focuses on basic-sampling data entries and, if

 * such an entry is not valid, the entire combined-sampling data entry is

 * ignored.

 *

 * The overflow variables counts the number of samples that has been discarded

 * due to a perf event overflow.

 Check for an empty sample */

 Update perf event period */

 Check whether sample is valid */

			/* If an event overflow occurred, the PMU is stopped to

			 * throttle event delivery.  Remaining sample data is

			 * discarded.

 Check whether sample is consistent */

 Deliver sample data to perf */

 Count discarded samples */

			/* Sample slot is not yet written or other record.

			 *

			 * This condition can occur if the buffer was reused

			 * from a combined basic- and diagnostic-sampling.

			 * If only basic-sampling is then active, entries are

			 * written into the larger diagnostic entries.

			 * This is typically the case for sample-data-blocks

			 * that are not full.  Stop processing if the first

			 * invalid format was detected.

 Reset sample slot and advance to next sample */

/* hw_perf_event_update() - Process sampling buffer

 * @event:	The perf event

 * @flush_all:	Flag to also flush partially filled sample-data-blocks

 *

 * Processes the sampling buffer and create perf event samples.

 * The sampling buffer position are retrieved and saved in the TEAR_REG

 * register of the specified perf event.

 *

 * Only full sample-data-blocks are processed.	Specify the flash_all flag

 * to also walk through partially filled sample-data-blocks.  It is ignored

 * if PERF_CPUM_SF_FULL_BLOCKS is set.	The PERF_CPUM_SF_FULL_BLOCKS flag

 * enforces the processing of full sample-data-blocks only (trailer entries

 * with the block-full-indicator bit set).

	/*

	 * AUX buffer is used when in diagnostic sampling mode.

	 * No perf events/samples are created.

 Get the trailer entry of the sample-data-block */

 Leave loop if no more work to do (block full indicator) */

 Check the sample overflow count */

			/* Account sample overflows and, if a particular limit

			 * is reached, extend the sampling buffer.

			 * For details, see sfb_account_overflows().

 Timestamps are valid for full sample-data-blocks only */

		/* Collect all samples from a single sample-data-block and

		 * flag if an (perf) event overflow happened.  If so, the PMU

		 * is stopped and remaining samples will be discarded.

 Reset trailer (using compare-double-and-swap) */

 Advance to next sample-data-block */

 Update event hardware registers */

		/* Stop processing sample-data if all samples of the current

		 * sample-data-block were flushed even if it was not full.

 Account sample overflows in the event hardware structure */

	/* Perf_event_overflow() and perf_event_account_interrupt() limit

	 * the interrupt rate to an upper limit. Roughly 1000 samples per

	 * task tick.

	 * Hitting this limit results in a large number

	 * of throttled REF_REPORT_THROTTLE entries and the samples

	 * are dropped.

	 * Slightly increase the interval to avoid hitting this limit.

/*

 * Get trailer entry by index of SDB.

/*

 * Finish sampling on the cpu. Called by cpumsf_pmu_del() with pmu

 * disabled. Collect the full SDBs in AUX buffer which have not reached

 * the point of alert indicator. And ignore the SDBs which are not

 * full.

 *

 * 1. Scan SDBs to see how much data is there and consume them.

 * 2. Remove alert indicator in the buffer.

 i is num of SDBs which are full */

 Remove alert indicators in the buffer */

/*

 * Start sampling on the CPU. Called by cpumsf_pmu_add() when an event

 * is first added to the CPU or rescheduled again to the CPU. It is called

 * with pmu disabled.

 *

 * 1. Reset the trailer of SDBs to get ready for new data.

 * 2. Tell the hardware where to put the data by reset the SDBs buffer

 *    head(tear/dear).

	/*

	 * SDBs between aux->head and aux->empty_mark are already ready

	 * for new data. range_scan is num of SDBs not within them.

 Save the position of empty SDBs */

 Set alert indicator */

 Reset hardware buffer head */

/*

 * Set alert indicator on SDB at index @alert_index while sampler is running.

 *

 * Return true if successfully.

 * Return false if full indicator is already set by hardware sampler.

			/*

			 * SDB is already set by hardware.

			 * Abort and try to set somewhere

			 * behind.

/*

 * aux_reset_buffer() - Scan and setup SDBs for new samples

 * @aux:	The AUX buffer to set

 * @range:	The range of SDBs to scan started from aux->head

 * @overflow:	Set to overflow count

 *

 * Set alert indicator on the SDB at index of aux->alert_mark. If this SDB is

 * marked as empty, check if it is already set full by the hardware sampler.

 * If yes, that means new data is already there before we can set an alert

 * indicator. Caller should try to set alert indicator to some position behind.

 *

 * Scan the SDBs in AUX buffer from behind aux->empty_mark. They are used

 * previously and have already been consumed by user space. Reset these SDBs

 * (clear full indicator and alert indicator) for new data.

 * If aux->alert_mark fall in this area, just set it. Overflow count is

 * recorded while scanning.

 *

 * SDBs between aux->head and aux->empty_mark are already reset at last time.

 * and ready for new samples. So scanning on this area could be skipped.

 *

 * Return true if alert indicator is set successfully and false if not.

		/*

		 * No need to scan. All SDBs in range are marked as empty.

		 * Just set alert indicator. Should check race with hardware

		 * sampler.

		/*

		 * Set alert indicator on empty SDB. Should check race

		 * with hardware sampler.

	/*

	 * Scan the SDBs to clear full and alert indicator used previously.

	 * Start scanning from one SDB behind empty_mark. If the new alert

	 * indicator fall into this range, set it.

 Update empty_mark to new position */

/*

 * Measurement alert handler for diagnostic mode sampling.

 Inform user space new data arrived */

 Get an output handle */

 Update head and alert_mark to new position */

/*

 * Callback when freeing AUX buffers.

 Free SDBT. SDB is freed by the caller */

 Save clock base */

/*

 * aux_buffer_setup() - Setup AUX buffer for diagnostic mode sampling

 * @event:	Event the buffer is setup for, event->cpu == -1 means current

 * @pages:	Array of pointers to buffer pages passed from perf core

 * @nr_pages:	Total pages

 * @snapshot:	Flag for snapshot mode

 *

 * This is the callback when setup an event using AUX buffer. Perf tool can

 * trigger this by an additional mmap() call on the event. Unlike the buffer

 * for basic samples, AUX buffer belongs to the event. It is scheduled with

 * the task among online cpus when it is a per-thread event.

 *

 * Return the private AUX buffer structure if success or NULL if fails.

 Allocate aux_buffer struct for the event */

 Allocate sdbt_index for fast reference */

 Allocate sdb_index for fast reference */

 Allocate the first SDBT */

	/*

	 * Link the provided pages of AUX buffer to SDBT.

	 * Allocate SDBT if needed.

 Link current page to tail of chain */

 Tail is the entry in a SDBT */

 Link the last entry in the SDBT to the first SDBT */

	/*

	 * Initial all SDBs are zeroed. Mark it as empty.

	 * So there is no need to clear the full indicator

	 * when this event is first added.

 SDBs (AUX buffer pages) are freed by caller */

 Nothing to do ... updates are interrupt-driven */

/* Check if the new sampling period/freqeuncy is appropriate.

 *

 * Return non-zero on error and zero on passed checks.

		/* Event is pinned to a particular CPU, retrieve the per-CPU

		 * sampling structure for accessing the CPU-specific QSI.

/* Activate sampling control.

 * Next call of pmu_enable() starts sampling.

/* Deactivate sampling control.

 * Next call of pmu_enable() stops sampling.

	/* Set up sampling controls.  Always program the sampling register

	 * using the SDB-table start.  Reset TEAR_REG event hardware register

	 * that is used by hw_perf_event_update() to store the sampling buffer

	 * position after samples have been flushed.

	/* Ensure sampling functions are in the disabled state.  If disabled,

 Set in_use flag and store event */

/* Attribute list for CPU_SF.

 *

 * The availablitiy depends on the CPU_MF sampling facility authorization

 * for basic + diagnositic samples. This is determined at initialization

 * time by the sampling facility device driver.

 * If the authorization for basic samples is turned off, it should be

 * also turned off for diagnostic sampling.

 *

 * During initialization of the device driver, check the authorization

 * level for diagnostic sampling and installs the attribute

 * file for diagnostic sampling if necessary.

 *

 * For now install a placeholder to reference all possible attributes:

 * SF_CYCLES_BASIC and SF_CYCLES_BASIC_DIAG.

 * Add another entry for the final NULL pointer.

	/* Measurement alerts are shared and might happen when the PMU

	/* The processing below must take care of multiple alert events that

 Program alert request */

 Report measurement alerts only for non-PRA codes */

 Sampling authorization change request */

 Loss of sample data due to high-priority machine activities */

 Invalid sampling buffer entry */

	/* Ignore the notification if no events are scheduled on the PMU.

	 * This might be racy...

 Valid parameter values: "min,max" or "max" */

		/* Sampling of diagnostic data authorized,

		 * install event into attribute list of PMU device.

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

/*

 *  Copyright IBM Corp. 2008

 *  Author(s): Martin Schwidefsky (schwidefsky@de.ibm.com)

/*

 * cpu_init - initializes state that is per-CPU.

/*

 * cpu_have_feature - Test CPU features on module initialization

 instructions named N3, "backported" to esa-mode */

 z/Architecture mode active */

 store-facility-list-extended */

 message-security assist */

 long-displacement */

 extended-immediate */

 extended-translation facility 3 enhancement */

 decimal floating point & perform floating point operation */

 huge page support */

 64-bit register support for 31-bit processes */

 transactional execution */

	/*

	 * Vector extension can be disabled with the "novx" parameter.

	 * Use MACHINE_HAS_VX instead of facility bit 129.

 guarded storage */

 virtualization support */

 Use "z900" as default for 64 bit kernels. */

 CONFIG_SCHED_TOPOLOGY */

/*

 * show_cpuinfo - Get information on one CPU for use by procfs.

 SPDX-License-Identifier: GPL-2.0

/*

 * ELF loader for kexec_file_load system call.

 *

 * Copyright IBM Corp. 2018

 *

 * Author(s): Philipp Rudo <prudo@linux.vnet.ibm.com>

 image->fobs->probe already checked for valid ELF magic number. */

	/* Only check the ELF magic number here and do proper validity check

	 * in the loader. Any check here that fails would send the erroneous

	 * ELF file to the image loader that does not care what it gets.

	 * (Most likely) causing behavior not intended by the user.

 CONFIG_KEXEC_SIG */

 SPDX-License-Identifier: GPL-2.0

/*

 * s390 code for kexec_file_load system call

 *

 * Copyright IBM Corp. 2018

 *

 * Author(s): Philipp Rudo <prudo@linux.vnet.ibm.com>

 Skip signature verification when not secure IPLed. */

 CONFIG_KEXEC_SIG */

 symbol to relocate */

 final location after relocation */

 relocated symbol value */

 tmp location to modify */

 SPDX-License-Identifier: GPL-2.0

/*

 * Image loader for kexec_file_load system call.

 *

 * Copyright IBM Corp. 2018

 *

 * Author(s): Philipp Rudo <prudo@linux.vnet.ibm.com>

	/* Can't reliably tell if an image is valid.  Therefore give the

	 * user whatever he wants.

 CONFIG_KEXEC_SIG */

 SPDX-License-Identifier: GPL-2.0

/*

 * NUMA support for s390

 *

 * Implement NUMA core code.

 *

 * Copyright IBM Corp. 2015

 SPDX-License-Identifier: GPL-2.0

/*

 * Performance event support for s390x

 *

 *  Copyright IBM Corp. 2012, 2013

 *  Author(s): Hendrik Brueckner <brueckner@linux.vnet.ibm.com>

	/* Check if the cpum_sf PMU has created the pt_regs structure.

	 * In this case, perf misc flags can be easily extracted.  Otherwise,

	 * do regular checks on the pt_regs content.

 Service level infrastructure */

 Perf definitions for PMU event attributes in sysfs */

 SPDX-License-Identifier: GPL-2.0

/*

 * Disassemble s390 instructions.

 *

 * Copyright IBM Corp. 2007

 * Author(s): Martin Schwidefsky (schwidefsky@de.ibm.com),

 Type of operand */

 Operand printed as %rx */

 Operand printed as %fx */

 Operand printed as %ax */

 Operand printed as %cx */

 Operand printed as %vx */

 Operand printed as displacement */

 Operand printed as base register */

 Operand printed as index register */

 Operand printed as pc-relative symbol */

 Operand printed as signed value */

 Operand printed as length (+1) */

 The number of bits in the operand. */

 The number of bits to shift. */

 One bit syntax flags. */

 Access reg. starting at position 8 */

 Access reg. starting at position 12 */

 Access reg. starting at position 24 */

 Access reg. starting at position 28 */

 Base register starting at position 16 */

 Base register starting at position 32 */

 Control reg. starting at position 8 */

 Control reg. starting at position 12 */

 20 bit displacement starting at 20 */

 Displacement starting at position 20 */

 Displacement starting at position 36 */

 FPR starting at position 8 */

 FPR starting at position 12 */

 FPR starting at position 16 */

 FPR starting at position 24 */

 FPR starting at position 28 */

 FPR starting at position 32 */

 8 bit signed value starting at 8 */

 8 bit signed value starting at 32 */

 16 bit signed value starting at 16 */

 16 bit signed value starting at 32 */

 32 bit signed value starting at 16 */

 12 bit PC relative offset at 12 */

 16 bit PC relative offset at 16 */

 16 bit PC relative offset at 32 */

 24 bit PC relative offset at 24 */

 32 bit PC relative offset at 16 */

 4 bit length starting at position 8 */

 4 bit length starting at position 12 */

 8 bit length starting at position 8 */

 GPR starting at position 8 */

 GPR starting at position 12 */

 GPR starting at position 16 */

 GPR starting at position 24 */

 GPR starting at position 28 */

 4 bit unsigned value starting at 8 */

 4 bit unsigned value starting at 12 */

 4 bit unsigned value starting at 16 */

 4 bit unsigned value starting at 20 */

 4 bit unsigned value starting at 24 */

 4 bit unsigned value starting at 28 */

 4 bit unsigned value starting at 32 */

 4 bit unsigned value starting at 36 */

 8 bit unsigned value starting at 8 */

 8 bit unsigned value starting at 16 */

 8 bit unsigned value starting at 24 */

 8 bit unsigned value starting at 28 */

 8 bit unsigned value starting at 32 */

 12 bit unsigned value starting at 16 */

 16 bit unsigned value starting at 16 */

 16 bit unsigned value starting at 32 */

 32 bit unsigned value starting at 16 */

 Vector index register starting at position 12 */

 Vector reg. starting at position 8 */

 Vector reg. starting at position 12 */

 Vector reg. starting at position 16 */

 Vector reg. starting at position 32 */

 Index register starting at position 12 */

 Extracts an operand value from an instruction.  */

 Extract fragments of the operand byte for byte.  */

 Check for special long displacement case.  */

 Check for register extensions bits for vector registers. */

 Sign extend value if the operand is signed or pc relative.  */

 Double value if the operand is pc relative.	*/

 Length x in an instructions has real length x + 1.  */

	/* Search the opcode offset table to find an entry which

	 * matches the beginning of the opcode. If there is no match

	 * the last entry will be used, which is the default entry for

	 * unknown instructions as well as 1-byte opcode instructions.

 Extract the operands. */

 Get a snapshot of the 64 bytes surrounding the fault address. */

 Code snapshot useable ? */

 Find a starting point for the disassembly. */

 Looks good, sequence ends at PSW. */

 Decode the instructions. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Performance event support for s390x - CPU-measurement Counter Facility

 *

 *  Copyright IBM Corp. 2012, 2021

 *  Author(s): Hendrik Brueckner <brueckner@linux.ibm.com>

 *	       Thomas Richter <tmricht@linux.ibm.com>

 CPU speed for CF_DIAG trailer */

 Counter set header mark */

 interval in seconds */

/* Counter sets are stored as data stream in a page sized memory buffer and

 * exported to user space via raw data attached to the event sample data.

 * Each counter set starts with an eight byte header consisting of:

 * - a two byte eye catcher (0xfeef)

 * - a one byte counter set number

 * - a two byte counter set size (indicates the number of counters in this set)

 * - a three byte reserved value (must be zero) to make the header the same

 *   size as a counter value.

 * All counter values are eight byte in size.

 *

 * All counter sets are followed by a 64 byte trailer.

 * The trailer consists of a:

 * - flag field indicating valid fields when corresponding bit set

 * - the counter facility first and second version number

 * - the CPU speed if nonzero

 * - the time stamp the counter sets have been collected

 * - the time of day (TOD) base value

 * - the machine type.

 *

 * The counter sets are saved when the process is prepared to be executed on a

 * CPU and saved again when the process is going to be removed from a CPU.

 * The difference of both counter sets are calculated and stored in the event

 * sample data area.

 CPU-M CF counter set entry (8 byte) */

 0-15  Data Entry Format */

 16-31 Counter set identifier */

 32-47 Number of stored counters */

 48-63 Reserved */

 CPU-M CF_DIAG trailer (64 byte) */

 0 - 7 */

 TOD clock base set */

 CPU speed set */

 Measurement alerts */

 Loss of MT ctr. data alert */

 Counter auth. change alert */

 Loss of counter data alert */

 0-63    All indicators */

 8 - 15 */

 64-79   Ctr First Version */

 80-95   Ctr Second Version */

 96-127  CPU speed */

 16 - 23 */

 128-191 Timestamp (TOD) */

 24 - 55 */

 56 - 63 */

 Machine type */

 Reserved */

 Reserved */

 Create the trailer data at the end of a page. */

 Counter version numbers */

 Machine type */

 Save clock base */

/* Read a counter set. The counter set number determines the counter set and

 * the CPUM-CF first and second version number determine the number of

 * available counters in each counter set.

 * Each counter set starts with header containing the counter set number and

 * the number of eight byte counters.

 *

 * The functions returns the number of bytes occupied by this counter set

 * including the header.

 * If there is no counter in the counter set, this counter set is useless and

 * zero is returned on this case.

 *

 * Note that the counter sets may not be enabled or active and the stcctm

 * instruction might return error 3. Depending on error_ok value this is ok,

 * for example when called from cpumf_pmu_start() call back function.

 Assume write failure */

 Save data */

/* Read out all counter sets and save them in the provided data buffer.

 * The last 64 byte host an artificial trailer entry.

 Always room for trailer */

 Counter set not authorized */

 Calculate the difference for each counter in a counter set. */

/* Scan the counter sets and calculate the difference of each counter

 * in each set. The result is the increment of each counter during the

 * period the counter set has been activated.

 *

 * Return true on success.

 Save time_stamp from start of event in stop's trailer */

 check required version for counter sets */

		/*

		 * MT-diagnostic counters are read-only.  The counter set

		 * is automatically enabled and activated on all CPUs with

		 * multithreading (SMT).  Deactivation of multithreading

		 * also disables the counter set.  State changes are ignored

		 * by lcctl().	Because Linux controls SMT enablement through

		 * a kernel parameter only, the counter set is either disabled

		 * or enabled and active.

		 *

		 * Thus, the counters can only be used if SMT is on and the

		 * counter set is enabled and active.

	/* Check authorization for cpu counter sets.

	 * If the particular CPU counter set is not authorized,

	 * return with -ENOENT in order to fall back to other

	 * PMUs that might suffice the event request.

/*

 * Change the CPUMF state to active.

 * Enable and activate the CPU-counter sets according

 * to the per-cpu control state.

/*

 * Change the CPUMF state to inactive.

 * Disable and enable (inactive) the CPU-counter sets according

 * to the per-cpu control state.

 Number of perf events counting hardware events */

 Used to avoid races in calling reserve/release_cpumf_hardware */

 Release the PMU if event is the last perf event */

 CPUMF <-> perf event mappings for kernel+userspace (basic set) */

 CPUMF <-> perf event mappings for userspace (problem-state set) */

		/* Raw events are used to access counters directly,

 No sampling support */

 Count user space (problem-state) only */

 No support for kernel space counters only */

 Count user and kernel space */

 Obtain the counter set to which the specified counter belongs */

		/*

		 * Use the hardware perf event structure to store the

		 * counter number in the 'config' member and the counter

		 * set number in the 'config_base' as bit mask.

		 * It is later used to enable/disable the counter(s).

 The counter could not be associated to a counter set */

 Initialize for using the CPU-measurement counter facility */

 Finally, validate version and authorization of the counter set */

 Registered as unknown PMU */

			/* The counter is not (yet) available. This

			 * might happen if the counter set to which

			 * this counter belongs is in the disabled

			 * state.

 overflow */

 (Re-)enable and activate the counter set */

	/* The counter set to which this counter belongs can be already active.

	 * Because all counters in a set are active, the event->hw.prev_count

	 * needs to be synchronized.  At this point, the counter set can be in

	 * the inactive or disabled state.

 Increment refcount for counter sets */

/* Create perf event sample with the counter sets as raw data.	The sample

 * is then pushed to the event subsystem and the function checks for

 * possible event overflows. If an event overflow occurs, the PMU is

 * stopped.

 *

 * Return non-zero if an event overflow occurred.

 Setup perf sample */

		/* Decrement reference count for this counter set and if this

		 * is the last used counter in the set, clear activation

		 * control and set the counter set state to inactive.

 Only update when PMU not hotplugged off */

	/* Check if any counter in the counter set is still used.  If not used,

	 * change the counter set to the disabled state.  This also clears the

	 * content of all counters in the set.

	 *

	 * When a new perf event has been added but not yet started, this can

	 * clear enable control and resets all counters in a set.  Therefore,

	 * cpumf_pmu_start() always has to reenable a counter set.

 Performance monitoring unit for s390x */

 Setup s390dbf facility */

 Setup counter set device */

/* Support for the CPU Measurement Facility counter set extraction using

 * device /dev/hwctr. This allows user space programs to extract complete

 * counter set via normal file operations.

 Access count */

 Synchronize access to hardware */

 Parm struct for smp_call_on_cpu */

 Counter set bit mask */

 # CPUs successfully executed func */

 CPUs and counter set bit mask */

 Head of list of active processes */

 CPUs and counter set bit mask */

 Bit mask of counter set to read */

 CPU mask to read from */

 Chain to cfset_session.head */

/* Remove current request from global bookkeeping. Maintain a counter set bit

 * mask on a per CPU basis.

 * Done in process context under mutex protection.

/* Add current request to global bookkeeping. Maintain a counter set bit mask

 * on a per CPU basis.

 * Done in process context under mutex protection.

/* The /dev/hwctr device access uses PMU_F_IN_USE to mark the device access

 * path is currently used.

 * The cpu_cf_events::dev_state is used to denote counter sets in use by this

 * interface. It is always or'ed in. If this interface is not active, its

 * value is zero and no additional counter sets will be included.

 *

 * The cpu_cf_events::state is used by the perf_event_open SVC and remains

 * unchanged.

 *

 * perf_pmu_enable() and perf_pmu_enable() and its call backs

 * cpumf_pmu_enable() and  cpumf_pmu_disable() are called by the

 * performance measurement subsystem to enable per process

 * CPU Measurement counter facility.

 * The XXX_enable() and XXX_disable functions are used to turn off

 * x86 performance monitoring interrupt (PMI) during scheduling.

 * s390 uses these calls to temporarily stop and resume the active CPU

 * counters sets during scheduling.

 *

 * We do allow concurrent access of perf_event_open() SVC and /dev/hwctr

 * device access.  The perf_event_open() SVC interface makes a lot of effort

 * to only run the counters while the calling process is actively scheduled

 * to run.

 * When /dev/hwctr interface is also used at the same time, the counter sets

 * will keep running, even when the process is scheduled off a CPU.

 * However this is not a problem and does not lead to wrong counter values

 * for the perf_event_open() SVC. The current counter value will be recorded

 * during schedule-in. At schedule-out time the current counter value is

 * extracted again and the delta is calculated and added to the event.

 Stop all counter sets via ioctl interface */

 Check if any counter set used by /dev/hwc */

 Keep perf_event_open counter sets */

 Start counter sets on particular CPU */

 Start counter sets */

 Keep perf_event_open counter sets */

/* This modifies the process CPU mask to adopt it to the currently online

 * CPUs. Offline CPUs can not be addresses. This call terminates the access

 * and is usually followed by close() or a new iotcl(..., START, ...) which

 * creates a new request structure.

/* Release function is also called when application gets terminated without

 * doing a proper ioctl(..., S390_HWCTR_STOP, ...) command.

 Open followed by close/exit has no private_data */

 nonseekable_open() never fails */

/* Return the maximum required space for all possible CPUs in case one

 * CPU will be onlined during the START, READ, STOP cycles.

 * To find out the size of the counter sets, any one CPU will do. They

 * all have the same counter sets.

 Nothing stored */

 Read all counter sets. */

 No data saved yet */

 Scan the counter sets */

 Counter set not in list */

 Invalid counter set */

 No counter set at all? */

/* Entry point to the /dev/hwctr device interface.

 * The ioctl system call supports three subcommands:

 * S390_HWCTR_START: Start the specified counter sets on a CPU list. The

 *    counter set keeps running until explicitly stopped. Returns the number

 *    of bytes needed to store the counter values. If another S390_HWCTR_START

 *    ioctl subcommand is called without a previous S390_HWCTR_STOP stop

 *    command on the same file descriptor, -EBUSY is returned.

 * S390_HWCTR_READ: Read the counter set values from specified CPU list given

 *    with the S390_HWCTR_START command.

 * S390_HWCTR_STOP: Stops the counter sets on the CPU list given with the

 *    previous S390_HWCTR_START subcommand.

/* Hotplug add of a CPU. Scan through all active processes and add

 * that CPU to the list of CPUs supplied with ioctl(..., START, ...).

/* Hotplug remove of a CPU. Scan through all active processes and clear

 * that CPU from the list of CPUs supplied with ioctl(..., START, ...).

/* Setup the event. Test for authorized counter sets and only include counter

 * sets which are authorized at the time of the setup. Including unauthorized

 * counter sets result in specification exception (and panic).

 Set sample_period to indicate sampling */

	/* Add all authorized counter sets to config_base. The

	 * the hardware init function is either called per-cpu or just once

	 * for all CPUS (event->cpu == -1).  This depends on the whether

	 * counting is started for all CPUs or on a per workload base where

	 * the perf event moves from one CPU to another CPU.

	 * Checking the authorization on any CPU is fine as the hardware

	 * applies the same authorization settings to all CPUs.

 No authorized counter sets, nothing to count/sample */

	/* Raw events are used to access counters directly,

	 * hence do not permit excludes.

	 * This event is useless without PERF_SAMPLE_RAW to return counter set

	 * values as raw data.

 Initialize for using the CPU-measurement counter facility */

/* Create cf_diag/events/CF_DIAG event sysfs file. This counter is used

 * to collect the complete counter sets for a scheduled process. Target

 * are complete counter sets attached as raw data to the artificial event.

 * This results in complete counter sets available when a process is

 * scheduled. Contains the delta of every counter while the process was

 * running.

/* Performance monitoring unit for event CF_DIAG. Since this event

 * is also started and stopped via the perf_event_open() system call, use

 * the same event enable/disable call back functions. They do not

 * have a pointer to the perf_event strcture as first parameter.

 *

 * The functions XXX_add, XXX_del, XXX_start and XXX_stop are also common.

 * Reuse them and distinguish the event (always first parameter) via

 * 'config' member.

/* Calculate memory needed to store all counter sets together with header and

 * trailer data. This is independent of the counter set authorization which

 * can vary depending on the configuration.

 Get the CPU speed, try sampling facility first and CPU attributes second. */

 Sampling facility first */

	/* Fallback: CPU speed extract static part. Used in case

	 * CPU Measurement Sampling Facility is turned off.

 Make sure the counter set data fits into predefined buffer. */

 SPDX-License-Identifier: GPL-2.0

/*

 *  S390 version

 *    Copyright IBM Corp. 2000

 *    Author(s): Martin Schwidefsky (schwidefsky@de.ibm.com),

 *               Gerhard Tonn (ton@de.ibm.com)   

 *               Thomas Spatzier (tspat@de.ibm.com)

 *

 *  Conversion between 31bit and 64bit native syscalls.

 *

 * Heavily inspired by the 32-bit Sparc compat code which is 

 * Copyright (C) 1997,1998 Jakub Jelinek (jj@sunsite.mff.cuni.cz)

 * Copyright (C) 1997 David S. Miller (davem@caip.rutgers.edu)

 *

 hack for backward compatibility */

 future possible st_blocks high bits */

 Number 512-byte blocks allocated. */

 will be high 32 bits of ctime someday */

/*

 * Linux/i386 didn't use to be able to handle more than

 * 4 system call parameters, so these system calls used a memory

 * block for parameter passing..

/*

 * 31 bit emulation wrapper functions for sys_fadvise64/fadvise64_64.

 * These need to rewrite the advise values for POSIX_FADV_{DONTNEED,NOREUSE}

 * because the 31 bit values differ from the 64 bit values.

 SPDX-License-Identifier: GPL-2.0

/*

 *  SMP related functions

 *

 *    Copyright IBM Corp. 1999, 2012

 *    Author(s): Denis Joseph Barrow,

 *		 Martin Schwidefsky <schwidefsky@de.ibm.com>,

 *		 Heiko Carstens <heiko.carstens@de.ibm.com>,

 *

 *  based on other smp stuff by

 *    (c) 1995 Alan Cox, CymruNET Ltd  <alan@cymru.net>

 *    (c) 1998 Ingo Molnar

 *

 * The code outside of smp.c uses logical cpu numbers, only smp.c does

 * the translation of logical to physical cpu ids. All new code that

 * operates on physical cpu numbers needs to go into smp.c.

 bit mask for ec_xxx functions */

 sigp timestamp for ec_xxx */

 physical cpu state */

 physical polarization */

 physical cpu address */

/*

 * The smp_cpu_state_mutex must be held when changing the state or polarization

 * member of a pcpu data structure within the pcpu_devices arreay.

/*

 * Signal processor helper functions.

 Status stored condition code is equivalent to cpu not running. */

/*

 * Find struct pcpu by cpu address.

 br %r1 */

/*

 * Call function via PSW restart on pcpu and stop the current cpu.

 should not return */

 Stop target cpu (if func returns this stops the current cpu). */

 Restart func on the target cpu and stop the current cpu. */

/*

 * Enable additional logical cpus for multi-threading.

/*

 * Call function on an online CPU.

 Use the current cpu if it is online. */

 Use the first online cpu. */

/*

 * Call function on the ipl CPU.

/*

 * Send cpus emergency shutdown signal. This gives the cpus the

 * opportunity to complete outstanding interrupts.

/*

 * Stop all cpus but the current one.

 Disable all interrupts/machine checks */

 stop all processors */

/*

 * This is the main routine where commands issued by other

 * cpus are handled.

 handle bit signal external calls */

/*

 * this function sends a 'reschedule' IPI to another CPU.

 * it goes straight through and wastes no time serializing

 * anything. Worst case is that we lose a reschedule ...

/*

 * parameter area for the set/clear control bit callbacks

/*

 * callback for setting/clearing control bits

/*

 * Set a bit in a control register of all cpus

/*

 * Clear a bit in a control register of all cpus

/*

 * Collect CPU state of the previous, crashed system.

 * There are four cases:

 * 1) standard zfcp/nvme dump

 *    condition: OLDMEM_BASE == NULL && is_ipl_type_dump() == true

 *    The state for all CPUs except the boot CPU needs to be collected

 *    with sigp stop-and-store-status. The boot CPU state is located in

 *    the absolute lowcore of the memory stored in the HSA. The zcore code

 *    will copy the boot CPU state from the HSA.

 * 2) stand-alone kdump for SCSI/NVMe (zfcp/nvme dump with swapped memory)

 *    condition: OLDMEM_BASE != NULL && is_ipl_type_dump() == true

 *    The state for all CPUs except the boot CPU needs to be collected

 *    with sigp stop-and-store-status. The firmware or the boot-loader

 *    stored the registers of the boot CPU in the absolute lowcore in the

 *    memory of the old system.

 * 3) kdump and the old kernel did not store the CPU state,

 *    or stand-alone kdump for DASD

 *    condition: OLDMEM_BASE != NULL && !is_kdump_kernel()

 *    The state for all CPUs except the boot CPU needs to be collected

 *    with sigp stop-and-store-status. The kexec code or the boot-loader

 *    stored the registers of the boot CPU in the memory of the old system.

 * 4) kdump and the old kernel stored the CPU state

 *    condition: OLDMEM_BASE != NULL && is_kdump_kernel()

 *    This case does not exist for s390 anymore, setup_arch explicitly

 *    deactivates the elfcorehdr= kernel parameter

 No previous system present, normal boot. */

 Allocate a page as dumping area for the store status sigps */

 Set multi-threading state to the previous system. */

 Allocate save area */

 Get the vector registers */

		/*

		 * For a zfcp/nvme dump OLDMEM_BASE == NULL and the registers

		 * of the boot CPU are stored in the HSA. To retrieve

		 * these registers an SCLP request is required which is

		 * done by drivers/s390/char/zcore.c:init_cpu_info()

 Get the CPU registers */

 CONFIG_CRASH_DUMP */

	/*

	 * Add IPL core first (which got logical CPU number 0) to make sure

	 * that all SMT threads get subsequent logical CPU numbers.

 Get CPU information */

 Find boot CPU type */

 The boot cpu dictates the cpu type. */

 Set multi-threading state for the current system */

 Print number of CPUs */

 Add CPUs present at boot */

/*

 *	Activate a secondary processor.

 Upping and downing of CPUs */

 Wait until cpu puts itself in the online & active maps */

 Handle possible pending IPIs */

 Disable pseudo page faults on this cpu. */

 Disable interrupt sources via control register. */

 disable all external interrupts */

 disable all I/O interrupts */

 disable most machine checks */

 Wait until target cpu is down */

 request the 0x1201 emergency signal external interrupt */

 request the 0x1202 external call external interrupt */

/*

 * the frequency of the profiling timer can be changed

 * by writing a multiplier value into /proc/profile.

 *

 * usually you want to run this on all CPUs ;)

 disallow configuration changes of online cpus and cpu 0 */

 SPDX-License-Identifier: GPL-2.0

/*

 *    ipl/reipl/dump support for Linux on s390.

 *

 *    Copyright IBM Corp. 2005, 2012

 *    Author(s): Michael Holzheu <holzheu@de.ibm.com>

 *		 Heiko Carstens <heiko.carstens@de.ibm.com>

 *		 Volker Sameske <sameske@de.ibm.com>

/*

 * Four shutdown trigger types are supported:

 * - panic

 * - halt

 * - power off

 * - reipl

 * - restart

/*

 * The following shutdown action types are supported:

 SYSFS */

/*

 * ipl section

 FCP ipl device attributes */

 NVMe ipl device attributes */

 CCW ipl device attributes */

 UNKNOWN ipl device attributes */

/*

 * reipl shutdown action: Reboot Linux on shutdown.

 VM IPL PARM attributes */

 ignore trailing newline */

 parm is used to store kernel options, check for common chars */

 NSS wrapper */

 CCW wrapper */

 FCP reipl device attributes */

 ignore trailing newline */

 loadparm can have max 8 characters and must not start with a blank */

 loadparm can only contain "a-z,A-Z,0-9,SP,." */

 initialize loadparm with blanks */

 copy and convert to ebcdic */

 FCP wrapper */

 NVME reipl device attributes */

 nvme wrapper */

 CCW reipl device attributes */

 NSS wrapper */

 CCW wrapper */

 NSS reipl device attributes */

 ignore trailing newline */

 reipl type */

 LOADPARM */

 check if read scp info worked and set loadparm */

 read scp info failed: set empty loadparm (EBCDIC blanks) */

 VM PARM */

 sysfs: create fcp kset for mixing attr group and bin attrs */

		/*

		 * Fix loadparm: There are systems where the (SCSI) LOADPARM

		 * is invalid in the SCSI IPL parameter block, so take it

		 * always from sclp_ipl_info.

 sysfs: create kset for mixing attr group and bin attrs */

		/*

		 * Fix loadparm: There are systems where the (SCSI) LOADPARM

		 * is invalid in the IPL parameter block, so take it

		 * always from sclp_ipl_info.

	/*

	 * If we have an OS info reipl block, this will be used

/*

 * dump shutdown action: Dump Linux on shutdown.

 FCP dump device attributes */

 NVME dump device attributes */

 CCW dump device attributes */

 dump type */

 LDIPL DUMP is not installed */

 LDIPL DUMP is not installed */

/*

 * vmcmd shutdown action: Trigger vm command on shutdown.

/*

 * stop shutdown action: Stop Linux on shutdown.

 action list */

/*

 * Trigger section

 on reipl */

 on panic */

 on restart */

 on halt */

 on power off */

	/*

	 * Fix loadparm: There are systems where the (SCSI) LOADPARM

	 * returned by read SCP info is invalid (contains EBCDIC blanks)

	 * when the system has been booted via diag308. In that case we use

	 * the value from diag308, if available.

	 *

	 * There are also systems where diag308 store does not work in

	 * case the system is booted from HMC. Fortunately in this case

	 * READ SCP info provides the correct value.

 We have no info to copy */

 Disable prefixing */

 Disable lowcore protection */

 SPDX-License-Identifier: GPL-2.0

/*

 *    ECBDIC -> ASCII, ASCII -> ECBDIC,

 *    upper to lower case (EBCDIC) conversion tables.

 *

 *  S390 version

 *    Copyright IBM Corp. 1999

 *    Author(s): Martin Schwidefsky <schwidefsky@de.ibm.com>

 *               Martin Peschke <peschke@fh-brandenburg.de>

/*

 * ASCII (IBM PC 437)  -> EBCDIC 037

00 NUL   SOH   STX   ETX   EOT   ENQ   ACK   BEL */

08  BS    HT    LF    VT    FF    CR    SO    SI */

              ->NL                               */

10 DLE   DC1   DC2   DC3   DC4   NAK   SYN   ETB */

18 CAN    EM   SUB   ESC    FS    GS    RS    US */

                               ->IGS ->IRS ->IUS */

20  SP     !     "     #     $     %     &     ' */

28   (     )     *     +     ,     -    .      / */

30   0     1     2     3     4     5     6     7 */

38   8     9     :     ;     <     =     >     ? */

40   @     A     B     C     D     E     F     G */

48   H     I     J     K     L     M     N     O */

50   P     Q     R     S     T     U     V     W */

58   X     Y     Z     [     \     ]     ^     _ */

60   `     a     b     c     d     e     f     g */

68   h     i     j     k     l     m     n     o */

70   p     q     r     s     t     u     v     w */

78   x     y     z     {     |     }     ~    DL */

80*/

88*/

90*/

98*/

A0*/

A8*/

B0*/

B8*/

C0*/

C8*/

D0*/

D8*/

E0        sz						*/

E8*/

F0*/

F8*/

/*

 * EBCDIC 037 -> ASCII (IBM PC 437)

 0x00   NUL   SOH   STX   ETX  *SEL    HT  *RNL   DEL */

 0x08   -GE  -SPS  -RPT    VT    FF    CR    SO    SI */

 /* 0x10   DLE   DC1   DC2   DC3  -RES   -NL    BS  -POC

 /* 0x18   CAN    EM  -UBS  -CU1  -IFS  -IGS  -IRS  -ITB

 /* 0x20   -DS  -SOS    FS  -WUS  -BYP    LF   ETB   ESC

 /* 0x28   -SA  -SFE   -SM  -CSP  -MFA   ENQ   ACK   BEL

 0x30  ----  ----   SYN   -IR   -PP  -TRN  -NBS   EOT */

 0x38  -SBS   -IT  -RFF  -CU3   DC4   NAK  ----   SUB */

 0x40    SP   RSP           ä              ----       */

 0x48                       .     <     (     +     | */

 0x50     &                                      ---- */

 0x58           ß     !     $     *     )     ;       */

 0x60     -     /  ----     Ä  ----  ----  ----       */

 0x68              ----     ,     %     _     >     ? */ 

 0x70  ----        ----  ----  ----  ----  ----  ---- */

 0x78     *     `     :     #     @     '     =     " */

 0x80     *     a     b     c     d     e     f     g */

 0x88     h     i              ----  ----  ----       */

 0x90     °     j     k     l     m     n     o     p */

 0x98     q     r                    ----        ---- */

 0xA0           ~     s     t     u     v     w     x */

 0xA8     y     z              ----  ----  ----  ---- */

 0xB0     ^                    ----     §  ----       */

 0xB8        ----     [     ]  ----  ----  ----  ---- */

 0xC0     {     A     B     C     D     E     F     G */

 0xC8     H     I  ----           ö              ---- */

 0xD0     }     J     K     L     M     N     O     P */

 0xD8     Q     R  ----           ü                   */

 0xE0     \           S     T     U     V     W     X */

 0xE8     Y     Z        ----     Ö  ----  ----  ---- */

 0xF0     0     1     2     3     4     5     6     7 */

 0xF8     8     9  ----  ----     Ü  ----  ----  ---- */

/*

 * ASCII (IBM PC 437)  -> EBCDIC 500

00 NUL   SOH   STX   ETX   EOT   ENQ   ACK   BEL */

08  BS    HT    LF    VT    FF    CR    SO    SI */

              ->NL                               */

10 DLE   DC1   DC2   DC3   DC4   NAK   SYN   ETB */

18 CAN    EM   SUB   ESC    FS    GS    RS    US */

                               ->IGS ->IRS ->IUS */

20  SP     !     "     #     $     %     &     ' */

28   (     )     *     +     ,     -    .      / */

30   0     1     2     3     4     5     6     7 */

38   8     9     :     ;     <     =     >     ? */

40   @     A     B     C     D     E     F     G */

48   H     I     J     K     L     M     N     O */

50   P     Q     R     S     T     U     V     W */

58   X     Y     Z     [     \     ]     ^     _ */

60   `     a     b     c     d     e     f     g */

68   h     i     j     k     l     m     n     o */

70   p     q     r     s     t     u     v     w */

78   x     y     z     {     |     }     ~    DL */

80*/

88*/

90*/

98*/

A0*/

A8*/

B0*/

B8*/

C0*/

C8*/

D0*/

D8*/

E0        sz						*/

E8*/

F0*/

F8*/

/*

 * EBCDIC 500 -> ASCII (IBM PC 437)

 0x00   NUL   SOH   STX   ETX  *SEL    HT  *RNL   DEL */

 0x08   -GE  -SPS  -RPT    VT    FF    CR    SO    SI */

 /* 0x10   DLE   DC1   DC2   DC3  -RES   -NL    BS  -POC

 /* 0x18   CAN    EM  -UBS  -CU1  -IFS  -IGS  -IRS  -ITB

 /* 0x20   -DS  -SOS    FS  -WUS  -BYP    LF   ETB   ESC

 /* 0x28   -SA  -SFE   -SM  -CSP  -MFA   ENQ   ACK   BEL

 0x30  ----  ----   SYN   -IR   -PP  -TRN  -NBS   EOT */

 0x38  -SBS   -IT  -RFF  -CU3   DC4   NAK  ----   SUB */

 0x40    SP   RSP           ä              ----       */

 0x48                 [     .     <     (     +     ! */

 0x50     &                                      ---- */

 0x58           ß     ]     $     *     )     ;     ^ */

 0x60     -     /  ----     Ä  ----  ----  ----       */

 0x68              ----     ,     %     _     >     ? */ 

 0x70  ----        ----  ----  ----  ----  ----  ---- */

 0x78     *     `     :     #     @     '     =     " */

 0x80     *     a     b     c     d     e     f     g */

 0x88     h     i              ----  ----  ----       */

 0x90     °     j     k     l     m     n     o     p */

 0x98     q     r                    ----        ---- */

 0xA0           ~     s     t     u     v     w     x */

 0xA8     y     z              ----  ----  ----  ---- */

 0xB0                          ----     §  ----       */

 0xB8        ----           |  ----  ----  ----  ---- */

 0xC0     {     A     B     C     D     E     F     G */

 0xC8     H     I  ----           ö              ---- */

 0xD0     }     J     K     L     M     N     O     P */

 0xD8     Q     R  ----           ü                   */

 0xE0     \           S     T     U     V     W     X */

 0xE8     Y     Z        ----     Ö  ----  ----  ---- */

 0xF0     0     1     2     3     4     5     6     7 */

 0xF8     8     9  ----  ----     Ü  ----  ----  ---- */

/*

 * EBCDIC 037/500 conversion table:

 * from upper to lower case

/*

 * EBCDIC 037/500 conversion table:

 * from lower to upper case

 SPDX-License-Identifier: GPL-2.0

/*

 * Extract CPU cache information and expose them via sysfs.

 *

 *    Copyright IBM Corp. 2012

 *    Author(s): Heiko Carstens <heiko.carstens@de.ibm.com>

 Separate instruction and data caches */

 SPDX-License-Identifier: GPL-2.0

/*

 * Linux Guest Relocation (LGR) detection

 *

 * Copyright IBM Corp. 2012

 * Author(s): Michael Holzheu <holzheu@linux.vnet.ibm.com>

 Maximum is 8, but we only record two levels */

/*

 * LGR info: Contains stfle and stsi data

 Bit field with facility information: 4 DWORDs are stored */

 Level of system (1 = CEC, 2 = LPAR, 3 = z/VM */

 Level 1: CEC info (stsi 1.1.1) */

 Level 2: LPAR info (stsi 2.2.2) */

 Level 3: VM info (stsi 3.2.2) */

/*

 * LGR globals

/*

 * Copy buffer and then convert it to ASCII

/*

 * Fill LGR info with 1.1.1 stsi data

/*

 * Fill LGR info with 2.2.2 stsi data

/*

 * Fill LGR info with 3.2.2 stsi data

/*

 * Fill LGR info with current data

/*

 * Check if LGR info has changed and if yes log new LGR info to s390dbf

/*

 * LGR timer callback

/*

 * Setup next LGR timer

/*

 * Initialize LGR: Add s390dbf, write initial lgr_info and setup timer

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

/*

 *    Copyright IBM Corp. 1999, 2006

 *    Author(s): Denis Joseph Barrow (djbarrow@de.ibm.com,barrow_dj@yahoo.com)

 *

 *    Based on Intel version

 * 

 *  Copyright (C) 1991, 1992  Linus Torvalds

 *

 *  1997-11-28  Modified for POSIX.1b signals by Richard Henderson

/*

 * Layout of an old-style signal-frame:

 *	-----------------------------------------

 *	| save area (_SIGNAL_FRAMESIZE)		|

 *	-----------------------------------------

 *	| struct sigcontext			|

 *	|	oldmask				|

 *	|	_sigregs *			|

 *	-----------------------------------------

 *	| _sigregs with				|

 *	|	_s390_regs_common		|

 *	|	_s390_fp_regs			|

 *	-----------------------------------------

 *	| int signo				|

 *	-----------------------------------------

 *	| _sigregs_ext with			|

 *	|	gprs_high 64 byte (opt)		|

 *	|	vxrs_low 128 byte (opt)		|

 *	|	vxrs_high 256 byte (opt)	|

 *	|	reserved 128 byte (opt)		|

 *	-----------------------------------------

 *	| __u16 svc_insn			|

 *	-----------------------------------------

 * The svc_insn entry with the sigreturn system call opcode does not

 * have a fixed position and moves if gprs_high or vxrs exist.

 * Future extensions will be added to _sigregs_ext.

 Offset of svc_insn is NOT fixed! */

/*

 * Layout of an rt signal-frame:

 *	-----------------------------------------

 *	| save area (_SIGNAL_FRAMESIZE)		|

 *	-----------------------------------------

 *	| svc __NR_rt_sigreturn 2 byte		|

 *	-----------------------------------------

 *	| struct siginfo			|

 *	-----------------------------------------

 *	| struct ucontext_extended with		|

 *	|	unsigned long uc_flags		|

 *	|	struct ucontext *uc_link	|

 *	|	stack_t uc_stack		|

 *	|	_sigregs uc_mcontext with	|

 *	|		_s390_regs_common	|

 *	|		_s390_fp_regs		|

 *	|	sigset_t uc_sigmask		|

 *	|	_sigregs_ext uc_mcontext_ext	|

 *	|		gprs_high 64 byte (opt)	|

 *	|		vxrs_low 128 byte (opt)	|

 *	|		vxrs_high 256 byte (opt)|

 *	|		reserved 128 byte (opt)	|

 *	-----------------------------------------

 * Future extensions will be added to _sigregs_ext.

 Store registers needed to create the signal frame */

 Load registers after signal return */

 Returns non-zero on fault. */

	/* Copy a 'clean' PSW mask to the user to avoid leaking

 Alwys make any pending restarted system call return -EINTR */

 Test the floating-point-control word. */

 Use regs->psw.mask instead of PSW_USER_BITS to preserve PER bit. */

 Check for invalid user address space control. */

 Check for invalid amode */

 No longer in a system call */

 Returns non-zero on fault. */

 Save vector registers to signal stack */

 Restore vector registers from signal stack */

/*

 * Determine which stack to use..

 Default to using normal stack */

 Overflow on alternate signal stack gives SIGSEGV. */

 This is the X/Open sanctioned signal stack switching.  */

	/*

	 * gprs_high are only present for a 31-bit task running on

	 * a 64-bit kernel (see compat_signal.c) but the space for

	 * gprs_high need to be allocated if vector registers are

	 * included in the signal frame on a 31-bit system.

 Set up backchain. */

 Create struct sigcontext on the signal stack */

 Store registers needed to create the signal frame */

 Create _sigregs on the signal stack */

 Place signal number on stack to allow backtrace from handler.  */

 Create _sigregs_ext on the signal stack */

	/* Set up to return from userspace.  If provided, use a stub

 Set up registers for signal handler */

 Force default amode and default user address space control. */

	/* We forgot to include these in the sigcontext.

 set extra registers only for synchronous signals */

	/*

	 * gprs_high are only present for a 31-bit task running on

	 * a 64-bit kernel (see compat_signal.c) but the space for

	 * gprs_high need to be allocated if vector registers are

	 * included in the signal frame on a 31-bit system.

 Set up backchain. */

	/* Set up to return from userspace.  If provided, use a stub

 Create siginfo on the signal stack */

 Store registers needed to create the signal frame */

 Create ucontext on the signal stack. */

 Set up registers for signal handler */

 Force default amode and default user address space control. */

 Set up the stack frame */

/*

 * Note that 'init' is a special process: it doesn't get signals it doesn't

 * want to handle. Thus you cannot kill init even with a SIGKILL even by

 * mistake.

 *

 * Note that we go through the signals twice: once to check the signals that

 * the kernel can handle, and then we build all the user-level signal handling

 * stack-frames in one go after that.

	/*

	 * Get signal to deliver. When running under ptrace, at this point

	 * the debugger may change all our registers, including the system

	 * call information.

 Whee!  Actually deliver the signal.  */

 Check for system call restarting. */

 No longer in a system call */

 No handlers present - check for system call restart */

 Restart with sys_restart_syscall */

	/*

	 * If there's no signal to deliver, we just put the saved sigmask back.

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

/*

 *  Ptrace user space interface.

 *

 *    Copyright IBM Corp. 1999, 2010

 *    Author(s): Denis Joseph Barrow

 *               Martin Schwidefsky (schwidefsky@de.ibm.com)

 Take care of the enable/disable of transactional execution. */

 Set or clear transaction execution TXC bit 8. */

 Set or clear transaction execution TDC bits 62 and 63. */

 Take care of enable/disable of guarded storage. */

 Load control register 0/2 iff changed */

 Copy user specified PER registers */

 merge TIF_SINGLE_STEP into user specified PER registers. */

 Take care of the PER enablement bit in the PSW. */

/*

 * Called by kernel/ptrace.c when detaching..

 *

 * Clear all debugging related fields.

 Control bits of the active per set. */

 Start address of the active per set. */

 End address of the active per set. */

 Single-step bit. */

 Start address of the user specified per set. */

 End address of the user specified per set. */

 PER code, ATMID and AI of the last PER trap */

 Address of the last PER trap */

 Access id of the last PER trap */

/*

 * Read the word at offset addr from the user area of a process. The

 * trouble here is that the information is littered over different

 * locations. The process registers are found on the kernel stack,

 * the floating point stuff and the trace settings are stored in

 * the task structure. In addition the different structures in

 * struct user contain pad bytes that should be read as zeroes.

 * Lovely...

		/*

		 * psw and gprs are stored on the stack

 Return a clean psw mask. */

		/*

		 * access registers are stored in the thread structure

		/*

		 * Very special case: old & broken 64 bit gdb reading

		 * from acrs[15]. Result is a 64 bit value. Read the

		 * 32 bit acrs[15] value and shift it by 32. Sick...

		/*

		 * orig_gpr2 is stored on the kernel stack

		/*

		 * prevent reads of padding hole between

		 * orig_gpr2 and fp_regs on s390.

		/*

		 * floating point control reg. is in the thread structure

		/*

		 * floating point regs. are either in child->thread.fpu

		 * or the child->thread.fpu.vxrs array

		/*

		 * Handle access to the per_info structure.

	/*

	 * Stupid gdb peeks/pokes the access registers in 64 bit with

	 * an alignment of 4. Programmers from hell...

	/*

	 * There are only three fields in the per_info struct that the

	 * debugger user can write to.

	 * 1) cr9: the debugger wants to set a new PER event mask

	 * 2) starting_addr: the debugger wants to set a new starting

	 *    address to use with the PER event mask.

	 * 3) ending_addr: the debugger wants to set a new ending

	 *    address to use with the PER event mask.

	 * The user specified PER event mask and the start and end

	 * addresses are used only if single stepping is not in effect.

	 * Writes to any other field in per_info are ignored.

 PER event mask of the user specified per set. */

 Starting address of the user specified per set. */

 Ending address of the user specified per set. */

/*

 * Write a word to the user area of a process at location addr. This

 * operation does have an additional problem compared to peek_user.

 * Stores to the program status word and on the floating point

 * control register needs to get checked for validity.

		/*

		 * psw and gprs are stored on the stack

 Invalid psw mask. */

 Invalid address-space-control bits */

 Invalid addressing mode bits */

		/*

		 * access registers are stored in the thread structure

		/*

		 * Very special case: old & broken 64 bit gdb writing

		 * to acrs[15] with a 64 bit value. Ignore the lower

		 * half of the value and write the upper 32 bit to

		 * acrs[15]. Sick...

		/*

		 * orig_gpr2 is stored on the kernel stack

		/*

		 * prevent writes of padding hole between

		 * orig_gpr2 and fp_regs on s390.

		/*

		 * floating point control reg. is in the thread structure

		/*

		 * floating point regs. are either in child->thread.fpu

		 * or the child->thread.fpu.vxrs array

		/*

		 * Handle access to the per_info structure.

	/*

	 * Stupid gdb peeks/pokes the access registers in 64 bit with

	 * an alignment of 4. Programmers from hell indeed...

 read the word at location addr in the USER area. */

 write the word at location addr in the USER area */

/*

 * Now the fun part starts... a 31 bit program running in the

 * 31 bit emulation tracing another program. PTRACE_PEEKTEXT,

 * PTRACE_PEEKDATA, PTRACE_POKETEXT and PTRACE_POKEDATA are easy

 * to handle, the difference to the 64 bit versions of the requests

 * is that the access is done in multiples of 4 byte instead of

 * 8 bytes (sizeof(unsigned long) on 31/64 bit).

 * The ugly part are PTRACE_PEEKUSR, PTRACE_PEEKUSR_AREA,

 * PTRACE_POKEUSR and PTRACE_POKEUSR_AREA. If the traced program

 * is a 31 bit program too, the content of struct user can be

 * emulated. A 31 bit program peeking into the struct user of

 * a 64 bit program is a no-no.

/*

 * Same as peek_user_per but for a 31 bit program.

 Control bits of the active per set. */

 Start address of the active per set. */

 End address of the active per set. */

 Single-step bit. */

 Start address of the user specified per set. */

 End address of the user specified per set. */

 PER code, ATMID and AI of the last PER trap */

 Address of the last PER trap */

 Access id of the last PER trap */

/*

 * Same as peek_user but for a 31 bit program.

		/*

		 * psw and gprs are stored on the stack

 Fake a 31 bit psw mask. */

 Fake a 31 bit psw address. */

 gpr 0-15 */

		/*

		 * access registers are stored in the thread structure

		/*

		 * orig_gpr2 is stored on the kernel stack

		/*

		 * prevent reads of padding hole between

		 * orig_gpr2 and fp_regs on s390.

		/*

		 * floating point control reg. is in the thread structure

		/*

		 * floating point regs. are either in child->thread.fpu

		 * or the child->thread.fpu.vxrs array

		/*

		 * Handle access to the per_info structure.

/*

 * Same as poke_user_per but for a 31 bit program.

 PER event mask of the user specified per set. */

 Starting address of the user specified per set. */

 Ending address of the user specified per set. */

/*

 * Same as poke_user but for a 31 bit program.

		/*

		 * psw, gprs, acrs and orig_gpr2 are stored on the stack

 Build a 64 bit psw mask from 31 bit mask. */

 Invalid psw mask. */

 Invalid address-space-control bits */

 Build a 64 bit psw address from 31 bit address. */

 Transfer 31 bit amode bit to psw mask. */

 gpr 0-15 */

		/*

		 * access registers are stored in the thread structure

		/*

		 * orig_gpr2 is stored on the kernel stack

		/*

		 * prevent writess of padding hole between

		 * orig_gpr2 and fp_regs on s390.

		/*

		 * floating point control reg. is in the thread structure

		/*

		 * floating point regs. are either in child->thread.fpu

		 * or the child->thread.fpu.vxrs array

		/*

		 * Handle access to the per_info structure.

 read the word at location addr in the USER area. */

 write the word at location addr in the USER area */

/*

 * user_regset definitions.

 If setting FPC, must validate it first. */

	/*

	 * Override access key in any case, since user space should

	 * not be able to set it, nor should it care about it.

/**

 * regs_get_kernel_stack_nth() - get Nth entry of the stack

 * @regs:pt_regs which contains kernel stack pointer.

 * @n:stack entry number.

 *

 * regs_get_kernel_stack_nth() returns @n th entry of the kernel stack which

 * is specifined by @regs. If the @n th entry is NOT in the kernel stack,

 * this returns 0.

 SPDX-License-Identifier: GPL-2.0

/*

 * Implementation of s390 diagnose codes

 *

 * Copyright IBM Corp. 2007

 * Author(s): Michael Holzheu <holzheu@de.ibm.com>

/*

 * Diagnose 14: Input spool file manipulation

/*

 * Diagnose 210: Get information about a virtual device

/*

 * Diagnose 26C: Access Certain System Information

 SPDX-License-Identifier: GPL-2.0

/*

 *   S/390 debug facility

 *

 *    Copyright IBM Corp. 1999, 2020

 *

 *    Author(s): Michael Holzheu (holzheu@de.ibm.com),

 *		 Holger Smolinski (Holger.Smolinski@de.ibm.com)

 *

 *    Bugreports to: <Linux390@de.ibm.com>

 copy all debug areas */

 copy no debug areas */

 typedefs */

 offset of last read in file */

 number of last formated area */

 act page in given area */

 last formated entry (offset */

 relative to beginning of last */

 formated page) */

 up to this offset we copied */

 in last read the last formated */

 entry to userland */

 buffer for output */

 original debug information */

 snapshot of debug information */

 used view of debug info */

	/*

	 * This assumes that all args are converted into longs

	 * on L/390 this is the case for all types of parameter

	 * except of floats, and long long (32 bit)

	 *

 internal function prototyes */

 globals */

 used by dump analysis tools to determine version of debug feature */

 static globals */

 functions */

/*

 * debug_areas_alloc

 * - Debug areas are implemented as a threedimensonal array:

 *   areas[areanumber][pagenumber][pageoffset]

 GFP_NOWARN to avoid user triggerable WARN, we handle fails */

/*

 * debug_info_alloc

 * - alloc new debug-info

 alloc everything */

 initialize members */

/*

 * debug_areas_free

 * - free all debug areas

/*

 * debug_info_free

 * - free memory debug-info

/*

 * debug_info_create

 * - create new debug-info

/*

 * debug_info_copy

 * - copy debug-info

 get a consistent copy of the debug areas */

 has something changed in the meantime ? */

/*

 * debug_info_get

 * - increments reference count for debug-info

/*

 * debug_info_put:

 * - decreases reference count for debug-info and frees it if necessary

/*

 * debug_format_entry:

 * - format one debug entry and return size of formated data

 print prolog */

 this is true, if we have a prolog only view */

 or if 'pages_per_area' is 0 */

 empty entry */

/*

 * debug_next_entry:

 * - goto next entry in p_info

 switch to next page, if we reached the end of the page  */

 next page */

 next area */

/*

 * debug_output:

 * - called for user read()

 * - copies formated debug entries to the user buffer

 file descriptor */

 user buffer */

 length of buffer */

 offset in the file */

/*

 * debug_input:

 * - called for user write()

 * - calls input function of view

 number of input characters */

/*

 * debug_open:

 * - called for user open()

 * - copies formated output to private_data area of the file

 *   handle

 find debug view */

 found view ! */

 no entry found */

 Make snapshot of current debug areas to get it consistent.	  */

 To copy all the areas is only needed, if we have a view which  */

 formats the debug areas. */

/*

 * debug_close:

 * - called for user close()

 * - deletes  private_data area of the file handle

 success */

 Create debugfs entries and add to internal list. */

 create root directory */

 append new element to linked list */

 first element in list */

 append element to end of list */

/**

 * debug_register_mode() - creates and initializes debug area.

 *

 * @name:	Name of debug log (e.g. used for debugfs entry)

 * @pages_per_area:	Number of pages, which will be allocated per area

 * @nr_areas:	Number of debug areas

 * @buf_size:	Size of data area in each debug entry

 * @mode:	File mode for debugfs files. E.g. S_IRWXUGO

 * @uid:	User ID for debugfs files. Currently only 0 is supported.

 * @gid:	Group ID for debugfs files. Currently only 0 is supported.

 *

 * Return:

 * - Handle for generated debug area

 * - %NULL if register failed

 *

 * Allocates memory for a debug log.

 * Must not be called within an interrupt handler.

 Since debugfs currently does not support uid/gid other than root, */

 we do not allow gid/uid != 0 until we get support for that. */

 create new debug_info */

/**

 * debug_register() - creates and initializes debug area with default file mode.

 *

 * @name:	Name of debug log (e.g. used for debugfs entry)

 * @pages_per_area:	Number of pages, which will be allocated per area

 * @nr_areas:	Number of debug areas

 * @buf_size:	Size of data area in each debug entry

 *

 * Return:

 * - Handle for generated debug area

 * - %NULL if register failed

 *

 * Allocates memory for a debug log.

 * The debugfs file mode access permissions are read and write for user.

 * Must not be called within an interrupt handler.

/**

 * debug_register_static() - registers a static debug area

 *

 * @id: Handle for static debug area

 * @pages_per_area: Number of pages per area

 * @nr_areas: Number of debug areas

 *

 * Register debug_info_t defined using DEFINE_STATIC_DEBUG_INFO.

 *

 * Note: This function is called automatically via an initcall generated by

 *	 DEFINE_STATIC_DEBUG_INFO.

 Clear pointers to prevent tracing into released initdata. */

 Replace static trace area with dynamic copy. */

 Clear pointers to initdata and discard copy. */

 Remove debugfs entries and remove from internal list. */

/**

 * debug_unregister() - give back debug area.

 *

 * @id:		handle for debug log

 *

 * Return:

 *    none

/*

 * debug_set_size:

 * - set area size (number of pages) and number of areas

/**

 * debug_set_level() - Sets new actual debug level if new_level is valid.

 *

 * @id:		handle for debug log

 * @new_level:	new debug level

 *

 * Return:

 *    none

/*

 * proceed_active_entry:

 * - set active entry to next in the ring buffer

/*

 * proceed_active_area:

 * - set active area to next in the ring buffer

/*

 * get_active_entry:

 Swap debug areas of a and b. */

 Append all debug events in active area from source to destination log. */

 Loop over all entries in src, starting with oldest. */

/*

 * debug_finish_entry:

 * - set timestamp, caller address, cpu number etc.

/*

 * proc handler for the running debug_active sysctl

 * always allow read, allow write only if debug_stoppable is set or

 * if debug_active is already off

/**

 * debug_stop_all() - stops the debug feature if stopping is allowed.

 *

 * Return:

 * -   none

 *

 * Currently used in case of a kernel oops.

/**

 * debug_set_critical() - event/exception functions try lock instead of spin.

 *

 * Return:

 * -   none

 *

 * Currently used in case of stopping all CPUs but the current one.

 * Once in this state, functions to write a debug entry for an

 * event or exception no longer spin on the debug area lock,

 * but only try to get it and fail if they do not get the lock.

/*

 * debug_event_common:

 * - write debug entry with given size

/*

 * debug_exception_common:

 * - write debug entry with given size and switch to next debug area

/*

 * counts arguments in format string for sprintf view

/*

 * debug_sprintf_event:

/*

 * debug_sprintf_exception:

/**

 * debug_register_view() - registers new debug view and creates debugfs

 *			   dir entry

 *

 * @id:		handle for debug log

 * @view:	pointer to debug view struct

 *

 * Return:

 * -   0  : ok

 * -   < 0: Error

/**

 * debug_unregister_view() - unregisters debug view and removes debugfs

 *			     dir entry

 *

 * @id:		handle for debug log

 * @view:	pointer to debug view struct

 *

 * Return:

 * -   0  : ok

 * -   < 0: Error

 got the string, now strip linefeed. */

/*

 * functions for debug-views

 ***********************************

/*

 * prints out actual debug level

/*

 * reads new size (number of pages per debug area)

 number of input characters */

/*

 * prints out actual debug level

/*

 * reads new debug level

 number of input characters */

/*

 * flushes debug areas

/*

 * view function: flushes debug areas

 number of input characters */

/*

 * prints debug data in hex/ascii format

/*

 * prints header for debug entry

/*

 * prints debug data sprintf-formated:

 * debug_sprinf_event/exception calls must be used together with this view

 count of longs fit into one entry */

 bufsize of entry too small */

 no args, we use only the string */

 number of arguments used for sprintf (without the format string) */

/*

 * debug_init:

 * - is called exactly once to initialize the debug feature

 SPDX-License-Identifier: GPL-2.0

	/*

	 * Use the regs from the first interruption and let

	 * perf_sample_regs_intr() handle interrupts (regs == get_irq_regs()).

	 *

	 * Also save FPU registers for user-space tasks only.

 SPDX-License-Identifier: GPL-2.0

/*

 *  User-space Probes (UProbes) for s390

 *

 *    Copyright IBM Corp. 2014

 *    Author(s): Jan Willeke,

 user space single step */

 over indication for storage alteration */

 all branches */

 branch into selected range */

 fix per address */

 trigger per event */

 Trap during transaction */

 Instruction Emulation */

/*

 * If user per registers are setup to trace storage alterations and an

 * emulated store took place on a fitting address a user trap is generated.

/*

 * pc relative instructions are emulated, since parameters may not be

 * accessible from the xol area due to range limitations.

 larl */

 llhrl */

 lghrl */

 lhrl */

 llghrl */

 lgrl */

 lgfrl */

 lrl */

 llgfrl */

 sthrl */

 stgrl */

 strl */

 pfdrl */

 cghrl */

 chrl */

 clghrl */

 clhrl */

 cgrl */

 clgrl */

 cgfrl */

 crl */

 clgfrl */

 clrl */

