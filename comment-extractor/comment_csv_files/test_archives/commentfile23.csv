 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright (C) 2003 Russell King, All Rights Reserved.

 *  Copyright 2006-2007 Pierre Ossman

 Allow only 1 DCMD at a time */

 The request has gone already */

 Timeout is handled by mmc core */

 granularity must not be greater than max. discard */

		/*

		 * For MMC host software queue, we only allow 2 requests in

		 * flight to avoid a long latency.

		/*

		 * Timeouts are handled by mmc core, and we don't have a host

		 * API to abort requests, so we can't handle the timeout anyway.

		 * However, when the timeout happens, blk_mq_complete_request()

		 * no longer works (to stop the request disappearing under us).

		 * To avoid racing with that, set a large timeout.

 Parallel dispatch of requests is not supported at the moment */

	/*

	 * After blk_queue_can_use_dma_map_merging() was called with succeed,

	 * since it calls blk_queue_virt_boundary(), the mmc should not call

	 * both blk_queue_max_segment_size().

 Set queue depth to get a reasonable value for q->nr_requests */

/**

 * mmc_init_queue - initialise a queue structure.

 * @mq: mmc queue

 * @card: mmc card to attach this queue

 *

 * Initialise a MMC card request queue.

	/*

	 * The queue depth for CQE must match the hardware because the request

	 * tag is used to index the hardware queue.

	/*

	 * Since blk_mq_alloc_tag_set() calls .init_request() of mmc_mq_ops,

	 * the host->can_dma_map_merge should be set before to get max_segs

	 * from mmc_get_max_segments().

	/*

	 * The host remains claimed while there are outstanding requests, so

	 * simply claiming and releasing here ensures there are none.

	/*

	 * The legacy code handled the possibility of being suspended,

	 * so do that here too.

	/*

	 * A request can be completed before the next request, potentially

	 * leaving a complete_work with nothing to do. Such a work item might

	 * still be queued at this point. Flush it.

/*

 * Prepare the sg list(s) to be handed of to the host driver

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  linux/drivers/mmc/core/sdio_bus.c

 *

 *  Copyright 2007 Pierre Ossman

 *

 * SDIO function driver model

 show configuration fields */

	/* Unbound SDIO functions are always suspended.

	 * During probe, the function is set active and the usage count

	 * is incremented.  If the driver supports runtime PM,

	 * it should call pm_runtime_put_noidle() in its probe routine and

	 * pm_runtime_get_noresume() in its remove routine.

	/* Set the default block size so the driver is sure it's something

 Make sure card is powered before invoking ->remove() */

 First, undo the increment made directly above */

 Then undo the runtime PM settings in sdio_bus_probe() */

/**

 *	sdio_register_driver - register a function driver

 *	@drv: SDIO function driver

/**

 *	sdio_unregister_driver - unregister a function driver

 *	@drv: SDIO function driver

/*

 * Allocate and initialise a new SDIO function structure.

	/*

	 * allocate buffer separately to make sure it's properly aligned for

	 * DMA usage (incl. 64 bit DMA)

/*

 * Register a new SDIO function with the driver model.

/*

 * Unregister a SDIO function with the driver model, and

 * (eventually) free it.

 * This function can be called through error paths where sdio_add_func() was

 * never executed (because a failure occurred at an earlier point).

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/mmc/core/host.c

 *

 *  Copyright (C) 2003 Russell King, All Rights Reserved.

 *  Copyright (C) 2007-2008 Pierre Ossman

 *  Copyright (C) 2010 Linus Walleij

 *

 *  MMC host class device management

	/*

	 * It's safe to access the bus_ops pointer, as both userspace and the

	 * workqueue for detecting cards are frozen at this point.

 Validate conditions for system suspend. */

/**

 * mmc_retune_enable() - enter a transfer mode that requires retuning

 * @host: host which should retune now

/*

 * Pause re-tuning for a small set of operations.  The pause begins after the

 * next command and after first doing re-tuning.

/**

 * mmc_retune_disable() - exit a transfer mode that requires retuning

 * @host: host which should not retune anymore

 *

 * It is not meant for temporarily preventing retuning!

/**

 * mmc_of_parse() - parse host's device properties

 * @host: host whose properties should be parsed.

 *

 * To keep the rest of the MMC subsystem unaware of whether DT has been

 * used to to instantiate and configure this host instance or not, we

 * parse the properties and set respective generic mmc-host flags and

 * parameters.

 "bus-width" is translated to MMC_CAP_*_BIT_DATA flags */

 Hosts capable of 8-bit can also do 4 bits */

 f_max is obtained from the optional "max-frequency" property */

	/*

	 * Configure CD and WP pins. They are both by default active low to

	 * match the SDHCI spec. If GPIOs are provided for CD and / or WP, the

	 * mmc-gpio helpers are used to attach, configure and use them. If

	 * polarity inversion is specified in DT, one of MMC_CAP2_CD_ACTIVE_HIGH

	 * and MMC_CAP2_RO_ACTIVE_HIGH capability-2 flags is set. If the

	 * "broken-cd" property is provided, the MMC_CAP_NEEDS_POLL capability

	 * is set. If the "non-removable" property is found, the

	 * MMC_CAP_NONREMOVABLE capability is set and no card-detection

	 * configuration is performed.

 Parse Card Detection */

 Parse Write Protection */

 legacy */

 Must be after "non-removable" check */

/**

 * mmc_of_parse_voltage - return mask of supported voltages

 * @host: host whose properties should be parsed.

 * @mask: mask of voltages available for MMC/SD/SDIO

 *

 * Parse the "voltage-ranges" property, returning zero if it is not

 * found, negative errno if the voltage-range specification is invalid,

 * or one if the voltage-range is specified and successfully parsed.

/**

 * mmc_first_nonreserved_index() - get the first index that is not reserved

/**

 *	mmc_alloc_host - initialise the per-host structure.

 *	@extra: sizeof private data structure

 *	@dev: pointer to host device model structure

 *

 *	Initialise the per-host structure.

 scanning will be enabled when we're ready */

	/*

	 * By default, hosts do not support SGIO or large requests.

	 * They have to set these according to their abilities.

/**

 *	mmc_add_host - initialise host hardware

 *	@host: mmc host

 *

 *	Register the host with the driver model. The host must be

 *	prepared to start servicing requests before this function

 *	completes.

/**

 *	mmc_remove_host - remove host hardware

 *	@host: mmc host

 *

 *	Unregister and remove all cards associated with this host,

 *	and power down the MMC bus. No new requests will be issued

 *	after this function has returned.

/**

 *	mmc_free_host - free the host structure

 *	@host: mmc host

 *

 *	Free the host once all references to it have been dropped.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/mmc/core/mmc.c

 *

 *  Copyright (C) 2003-2004 Russell King, All Rights Reserved.

 *  Copyright (C) 2005-2007 Pierre Ossman, All Rights Reserved.

 *  MMCv4 support Copyright (C) 2006 Philip Langdale, All Rights Reserved.

 30s */

/*

 * Given the decoded CSD structure, decode the raw CID to our CID structure.

	/*

	 * The selection of the format here is based upon published

	 * specs from sandisk and from what people have reported.

 MMC v1.0 - v1.2 */

 MMC v1.4 */

 MMC v2.0 - v2.2 */

 MMC v3.1 - v3.3 */

 MMC v4 */

/*

 * Given a 128-bit response, decode to our card CSD structure.

	/*

	 * We only understand CSD structure v1.1 and v1.2.

	 * v1.2 has extra information in bits 15, 11 and 10.

	 * We also support eMMC v4.4 & v4.41.

	/*

	 * Disable these attributes by default

	/*

	 * Enhanced area feature support -- check whether the eMMC

	 * card has the Enhanced area enabled.  If so, export enhanced

	 * area offset and size to user by adding sysfs interface.

			/*

			 * calculate the enhanced data area offset, in bytes

			/*

			 * calculate the enhanced data area size, in kilobytes

	/*

	 * General purpose partition feature support --

	 * If ext_csd has the size of general purpose partitions,

	 * set size, part_cfg, partition name in mmc_part.

 Minimum partition switch timeout in milliseconds */

/*

 * Decode extended CSD.

 Version is coded in the CSD_STRUCTURE byte in the EXT_CSD register */

	/*

	 * The EXT_CSD format is meant to be forward compatible. As long

	 * as CSD_STRUCTURE does not change, all values for EXT_CSD_REV

	 * are authorized, see JEDEC JESD84-B50 section B.8.

 fixup device after ext_csd revision field is updated */

 Cards with density > 2GiB are sector addressed */

 EXT_CSD value is in units of 10ms, but we store in ms */

 Sleep / awake timeout in 100ns units */

		/*

		 * There are two boot regions of equal size, defined in

		 * multiples of 128K.

		/*

		 * Note that the call to mmc_part_add above defaults to read

		 * only. If this default assumption is changed, the call must

		 * take into account the value of boot_locked below.

 Save power class values */

 Adjust production date as per JEDEC JESD84-B451 */

 check whether the eMMC card supports BKOPS */

 check whether the eMMC card supports HPI */

			/*

			 * Indicate the maximum timeout to close

			 * a command interrupted by HPI

		/*

		 * RPMB regions are defined in multiples of 128K.

 eMMC v4.5 or later */

	/*

	 * GENERIC_CMD6_TIME is to be used "unless a specific timeout is defined

	 * when accessing a specific field", so use it here if there is no

	 * PARTITION_SWITCH_TIME.

 Some eMMC set the value too low so set a minimum */

 eMMC v5 or later */

 eMMC v5.1 or later */

 Exclude inefficiently small queue depths */

		/* If the host or the card can't do the switch,

		/*

		 * High capacity cards should have this "magic" size

		 * stored in their CSD.

 only compare read only fields */

 return default DSR value */

/*

 * Select the PowerClass for the current bus width

 * If power class is defined for 4/8 bit bus in the

 * extended CSD register, select it by executing the

 * mmc_switch command.

 If the power class is different from the default value */

 Power class selection is supported for versions >= 4.0 */

 Power class values are defined only for 4/8 bit bus */

/*

 * Set the bus speed for the selected speed mode.

/*

 * Select the bus width amoung 4-bit and 8-bit(SDR).

 * If the bus width is changed successfully, return the selected width value.

 * Zero is returned instead of error value if the wide width is not supported.

	/*

	 * Unlike SD, MMC cards dont have a configuration register to notify

	 * supported bus width. So bus test command should be run to identify

	 * the supported bus width or compare the ext csd values of current

	 * bus width and ext csd values of 1 bit mode read earlier.

		/*

		 * Host is capable of 8bit transfer, then switch

		 * the device to work in 8bit transfer mode. If the

		 * mmc switch command returns error then switch to

		 * 4bit transfer mode. On success set the corresponding

		 * bus width on the host.

		/*

		 * If controller can't handle bus width test,

		 * compare ext_csd previously read in 1 bit mode

		 * against ext_csd at new bus width

/*

 * Switch to the high-speed mode

/*

 * Activate wide bus and DDR if supported.

	/*

	 * eMMC cards can support 3.3V to 1.2V i/o (vccq)

	 * signaling.

	 *

	 * EXT_CSD_CARD_TYPE_DDR_1_8V means 3.3V or 1.8V vccq.

	 *

	 * 1.8V vccq at 3.3V core voltage (vcc) is not required

	 * in the JEDEC spec for DDR.

	 *

	 * Even (e)MMC card can support 3.3v to 1.2v vccq, but not all

	 * host controller can support this, like some of the SDHCI

	 * controller which connect to an eMMC device. Some of these

	 * host controller still needs to use 1.8v vccq for supporting

	 * DDR mode.

	 *

	 * So the sequence will be:

	 * if (host and device can both support 1.2v IO)

	 *	use 1.2v IO;

	 * else if (host and device can both support 1.8v IO)

	 *	use 1.8v IO;

	 * so if host and device can only support 3.3v IO, this is the

	 * last choice.

	 *

	 * WARNING: eMMC rules are NOT the same as SD DDR

 make sure vccq is 3.3v after switching disaster */

	/*

	 * HS400 mode requires 8-bit bus width

 Switch card to HS mode */

 Prepare host to downgrade to HS timing */

 Set host controller to HS timing */

 Reduce frequency to HS frequency */

 Switch card to DDR */

 Switch card to HS400 */

 Set host controller to HS400 timing and frequency */

 Reduce frequency to HS */

 Switch HS400 to HS DDR */

 Switch HS DDR to HS */

 Switch HS to HS200 */

	/*

	 * For HS200, CRC errors are not a reliable way to know the switch

	 * failed. If there really is a problem, we would expect tuning will

	 * fail and the result ends up the same.

 Prepare tuning for HS400 mode. */

 If fails try again during next card power cycle */

 Switch card to HS mode */

 Switch card to DDR with strobe bit */

 Switch card to HS400 */

 Set host controller to HS400 timing and frequency */

 Controller enable enhanced strobe function */

/*

 * For device supporting HS200 mode, the following sequence

 * should be done before executing the tuning process.

 * 1. set the desired bus width(4-bit or 8-bit, 1-bit is not supported)

 * 2. switch to HS200 mode

 * 3. set the clock to > 52Mhz and <=200MHz

 If fails try again during next card power cycle */

	/*

	 * Set the bus width(4 or 8) with host's support and

	 * switch to HS200 mode if bus width is set successfully.

		/*

		 * For HS200, CRC errors are not a reliable way to know the

		 * switch failed. If there really is a problem, we would expect

		 * tuning will fail and the result ends up the same.

		/*

		 * mmc_select_timing() assumes timing has not changed if

		 * it is a switch error.

 fall back to the old signal voltage, if fails report error */

/*

 * Activate High Speed, HS200 or HS400ES mode if supported.

	/*

	 * Set the bus speed to the selected bus timing.

	 * If timing is not selected, backward compatible is the default.

/*

 * Execute tuning sequence to seek the proper bus operating

 * conditions for HS200 and HS400, which sends CMD21 to the device.

	/*

	 * Timing should be adjusted to the HS400 target

	 * operation frequency for tuning process

/*

 * Handle the detection and initialisation of a card.

 *

 * In the case of a resume, "oldcard" will contain the card

 * we're trying to reinitialise.

 Set correct bus mode for MMC before attempting init */

	/*

	 * Since we're changing the OCR value, we seem to

	 * need to tell some cards to go back to the idle

	 * state.  We wait 1ms to give cards time to

	 * respond.

	 * mmc_go_idle is needed for eMMC that are asleep

 The extra bit indicates that we support high capacity */

	/*

	 * For SPI, enable CRC as appropriate.

	/*

	 * Fetch CID from card.

		/*

		 * Allocate card structure.

	/*

	 * Call the optional HC's init_card function to handle quirks.

	/*

	 * For native busses:  set card RCA and quit open drain mode.

		/*

		 * Fetch CSD from card.

	/*

	 * handling only for cards supporting DSR and hosts requesting

	 * DSR configuration

	/*

	 * Select card, as all following commands rely on that.

 Read extended CSD. */

		/*

		 * If doing byte addressing, check if required to do sector

		 * addressing.  Handle the case of <2GB cards needing sector

		 * addressing.  See section 8.1 JEDEC Standard JED84-A441;

		 * ocr register has bit 30 set for sector addressing.

 Erase size depends on CSD and Extended CSD */

 Enable ERASE_GRP_DEF. This bit is lost after a reset or power off. */

			/*

			 * Just disable enhanced area off & sz

			 * will try to enable ERASE_GROUP_DEF

			 * during next time reinit

			/*

			 * enable ERASE_GRP_DEF successfully.

			 * This will affect the erase size, so

			 * here need to reset erase size

	/*

	 * Ensure eMMC user default partition is enabled

	/*

	 * Enable power_off_notification byte in the ext_csd register

		/*

		 * The err can be -EBADMSG or 0,

		 * so check for success and update the flag

 set erase_arg */

	/*

	 * Select timing interface

 Select the desired bus width optionally */

	/*

	 * Choose the power class with selected bus interface

	/*

	 * Enable HPI feature (if supported)

	/*

	 * If cache size is higher than 0, this indicates the existence of cache

	 * and it can be turned on. Note that some eMMCs from Micron has been

	 * reported to need ~800 ms timeout, while enabling the cache after

	 * sudden power failure tests. Let's extend the timeout to a minimum of

	 * DEFAULT_CACHE_EN_TIMEOUT_MS and do it for all cards.

		/*

		 * Only if no error, cache is turned on successfully.

	/*

	 * Enable Command Queue if supported. Note that Packed Commands cannot

	 * be used with Command Queue.

	/*

	 * In some cases (e.g. RPMB or mmc_test), the Command Queue must be

	 * disabled for a time, so a flag is needed to indicate to re-enable the

	 * Command Queue.

 Re-tuning can't be done once the card is deselected */

	/*

	 * If the host does not wait while the card signals busy, then we can

	 * try to poll, but only if the host supports HW polling, as the

	 * SEND_STATUS cmd is not allowed. If we can't poll, then we simply need

	 * to wait the sleep/awake timeout.

 Use EXT_CSD_POWER_OFF_SHORT as default notification type. */

 Disable the power off notification after the switch operation. */

/*

 * Host is being removed. Free up the current card.

/*

 * Card detection - card is alive.

/*

 * Card detection callback from host.

	/*

	 * Just check if our card has been removed.

/*

 * Flush the internal cache of the eMMC to non-volatile storage.

/*

 * Suspend callback

/*

 * This function tries to determine if the same card is still present

 * and, if so, restore all state to it.

/*

 * Shutdown callback

	/*

	 * In a specific case for poweroff notify, we need to resume the card

	 * before we can shutdown it properly.

/*

 * Callback for resume.

/*

 * Callback for runtime_suspend.

/*

 * Callback for runtime_resume.

	/*

	 * In the case of recovery, we can't expect flushing the cache to work

	 * always, but we have a go and ignore errors.

 If the card accept RST_n signal, send it. */

 Set initial state and call mmc_set_ios */

 Do a brute force power cycle */

/*

 * Starting point for MMC card init.

 Set correct bus mode for MMC before attempting attach */

	/*

	 * We need to get OCR a different way for SPI.

	/*

	 * Can we support the voltage of the card?

	/*

	 * Detect and init the card.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  linux/drivers/mmc/core/sdio_io.c

 *

 *  Copyright 2007-2008 Pierre Ossman

/**

 *	sdio_claim_host - exclusively claim a bus for a certain SDIO function

 *	@func: SDIO function that will be accessed

 *

 *	Claim a bus for a set of operations. The SDIO function given

 *	is used to figure out which bus is relevant.

/**

 *	sdio_release_host - release a bus for a certain SDIO function

 *	@func: SDIO function that was accessed

 *

 *	Release a bus, allowing others to claim the bus for their

 *	operations.

/**

 *	sdio_enable_func - enables a SDIO function for usage

 *	@func: SDIO function to enable

 *

 *	Powers up and activates a SDIO function so that register

 *	access is possible.

/**

 *	sdio_disable_func - disable a SDIO function

 *	@func: SDIO function to disable

 *

 *	Powers down and deactivates a SDIO function. Register access

 *	to this function will fail until the function is reenabled.

/**

 *	sdio_set_block_size - set the block size of an SDIO function

 *	@func: SDIO function to change

 *	@blksz: new block size or 0 to use the default.

 *

 *	The default block size is the largest supported by both the function

 *	and the host, with a maximum of 512 to ensure that arbitrarily sized

 *	data transfer use the optimal (least) number of commands.

 *

 *	A driver may call this to override the default block size set by the

 *	core. This can be used to set a block size greater than the maximum

 *	that reported by the card; it is the driver's responsibility to ensure

 *	it uses a value that the card supports.

 *

 *	Returns 0 on success, -EINVAL if the host does not support the

 *	requested block size, or -EIO (etc.) if one of the resultant FBR block

 *	size register writes failed.

 *

/*

 * Calculate the maximum byte mode transfer size

 maximum size for byte mode */

/*

 * This is legacy code, which needs to be re-worked some day. Basically we need

 * to take into account the properties of the host, as to enable the SDIO func

 * driver layer to allocate optimal buffers.

	/*

	 * FIXME: We don't have a system for the controller to tell

	 * the core about its problems yet, so for now we just 32-bit

	 * align the size.

/**

 *	sdio_align_size - pads a transfer size to a more optimal value

 *	@func: SDIO function

 *	@sz: original transfer size

 *

 *	Pads the original data size with a number of extra bytes in

 *	order to avoid controller bugs and/or performance hits

 *	(e.g. some controllers revert to PIO for certain sizes).

 *

 *	If possible, it will also adjust the size so that it can be

 *	handled in just a single request.

 *

 *	Returns the improved size, which might be unmodified.

	/*

	 * Do a first check with the controller, in case it

	 * wants to increase the size up to a point where it

	 * might need more than one block.

	/*

	 * If we can still do this with just a byte transfer, then

	 * we're done.

		/*

		 * Check if the transfer is already block aligned

		/*

		 * Realign it so that it can be done with one request,

		 * and recheck if the controller still likes it.

		/*

		 * This value is only good if it is still just

		 * one request.

		/*

		 * We failed to do one request, but at least try to

		 * pad the remainder properly.

		/*

		 * We need multiple requests, so first check that the

		 * controller can handle the chunk size;

			/*

			 * Fix up the size of the remainder (if any)

	/*

	 * The controller is simply incapable of transferring the size

	 * we want in decent manner, so just return the original size.

/* Split an arbitrarily sized data transfer into several

 Do the bulk of the transfer using block mode (if supported). */

		/* Blocks per command is limited by host count, host transfer

 Write the remainder using byte mode. */

 Indicate byte mode by setting "blocks" = 0 */

/**

 *	sdio_readb - read a single byte from a SDIO function

 *	@func: SDIO function to access

 *	@addr: address to read

 *	@err_ret: optional status value from transfer

 *

 *	Reads a single byte from the address space of a given SDIO

 *	function. If there is a problem reading the address, 0xff

 *	is returned and @err_ret will contain the error code.

/**

 *	sdio_writeb - write a single byte to a SDIO function

 *	@func: SDIO function to access

 *	@b: byte to write

 *	@addr: address to write to

 *	@err_ret: optional status value from transfer

 *

 *	Writes a single byte to the address space of a given SDIO

 *	function. @err_ret will contain the status of the actual

 *	transfer.

/**

 *	sdio_writeb_readb - write and read a byte from SDIO function

 *	@func: SDIO function to access

 *	@write_byte: byte to write

 *	@addr: address to write to

 *	@err_ret: optional status value from transfer

 *

 *	Performs a RAW (Read after Write) operation as defined by SDIO spec -

 *	single byte is written to address space of a given SDIO function and

 *	response is read back from the same address, both using single request.

 *	If there is a problem with the operation, 0xff is returned and

 *	@err_ret will contain the error code.

/**

 *	sdio_memcpy_fromio - read a chunk of memory from a SDIO function

 *	@func: SDIO function to access

 *	@dst: buffer to store the data

 *	@addr: address to begin reading from

 *	@count: number of bytes to read

 *

 *	Reads from the address space of a given SDIO function. Return

 *	value indicates if the transfer succeeded or not.

/**

 *	sdio_memcpy_toio - write a chunk of memory to a SDIO function

 *	@func: SDIO function to access

 *	@addr: address to start writing to

 *	@src: buffer that contains the data to write

 *	@count: number of bytes to write

 *

 *	Writes to the address space of a given SDIO function. Return

 *	value indicates if the transfer succeeded or not.

/**

 *	sdio_readsb - read from a FIFO on a SDIO function

 *	@func: SDIO function to access

 *	@dst: buffer to store the data

 *	@addr: address of (single byte) FIFO

 *	@count: number of bytes to read

 *

 *	Reads from the specified FIFO of a given SDIO function. Return

 *	value indicates if the transfer succeeded or not.

/**

 *	sdio_writesb - write to a FIFO of a SDIO function

 *	@func: SDIO function to access

 *	@addr: address of (single byte) FIFO

 *	@src: buffer that contains the data to write

 *	@count: number of bytes to write

 *

 *	Writes to the specified FIFO of a given SDIO function. Return

 *	value indicates if the transfer succeeded or not.

/**

 *	sdio_readw - read a 16 bit integer from a SDIO function

 *	@func: SDIO function to access

 *	@addr: address to read

 *	@err_ret: optional status value from transfer

 *

 *	Reads a 16 bit integer from the address space of a given SDIO

 *	function. If there is a problem reading the address, 0xffff

 *	is returned and @err_ret will contain the error code.

/**

 *	sdio_writew - write a 16 bit integer to a SDIO function

 *	@func: SDIO function to access

 *	@b: integer to write

 *	@addr: address to write to

 *	@err_ret: optional status value from transfer

 *

 *	Writes a 16 bit integer to the address space of a given SDIO

 *	function. @err_ret will contain the status of the actual

 *	transfer.

/**

 *	sdio_readl - read a 32 bit integer from a SDIO function

 *	@func: SDIO function to access

 *	@addr: address to read

 *	@err_ret: optional status value from transfer

 *

 *	Reads a 32 bit integer from the address space of a given SDIO

 *	function. If there is a problem reading the address,

 *	0xffffffff is returned and @err_ret will contain the error

 *	code.

/**

 *	sdio_writel - write a 32 bit integer to a SDIO function

 *	@func: SDIO function to access

 *	@b: integer to write

 *	@addr: address to write to

 *	@err_ret: optional status value from transfer

 *

 *	Writes a 32 bit integer to the address space of a given SDIO

 *	function. @err_ret will contain the status of the actual

 *	transfer.

/**

 *	sdio_f0_readb - read a single byte from SDIO function 0

 *	@func: an SDIO function of the card

 *	@addr: address to read

 *	@err_ret: optional status value from transfer

 *

 *	Reads a single byte from the address space of SDIO function 0.

 *	If there is a problem reading the address, 0xff is returned

 *	and @err_ret will contain the error code.

/**

 *	sdio_f0_writeb - write a single byte to SDIO function 0

 *	@func: an SDIO function of the card

 *	@b: byte to write

 *	@addr: address to write to

 *	@err_ret: optional status value from transfer

 *

 *	Writes a single byte to the address space of SDIO function 0.

 *	@err_ret will contain the status of the actual transfer.

 *

 *	Only writes to the vendor specific CCCR registers (0xF0 -

 *	0xFF) are permiited; @err_ret will be set to -EINVAL for *

 *	writes outside this range.

/**

 *	sdio_get_host_pm_caps - get host power management capabilities

 *	@func: SDIO function attached to host

 *

 *	Returns a capability bitmask corresponding to power management

 *	features supported by the host controller that the card function

 *	might rely upon during a system suspend.  The host doesn't need

 *	to be claimed, nor the function active, for this information to be

 *	obtained.

/**

 *	sdio_set_host_pm_flags - set wanted host power management capabilities

 *	@func: SDIO function attached to host

 *	@flags: Power Management flags to set

 *

 *	Set a capability bitmask corresponding to wanted host controller

 *	power management features for the upcoming suspend state.

 *	This must be called, if needed, each time the suspend method of

 *	the function driver is called, and must contain only bits that

 *	were returned by sdio_get_host_pm_caps().

 *	The host doesn't need to be claimed, nor the function active,

 *	for this information to be set.

 function suspend methods are serialized, hence no lock needed */

/**

 *	sdio_retune_crc_disable - temporarily disable retuning on CRC errors

 *	@func: SDIO function attached to host

 *

 *	If the SDIO card is known to be in a state where it might produce

 *	CRC errors on the bus in response to commands (like if we know it is

 *	transitioning between power states), an SDIO function driver can

 *	call this function to temporarily disable the SD/MMC core behavior of

 *	triggering an automatic retuning.

 *

 *	This function should be called while the host is claimed and the host

 *	should remain claimed until sdio_retune_crc_enable() is called.

 *	Specifically, the expected sequence of calls is:

 *	- sdio_claim_host()

 *	- sdio_retune_crc_disable()

 *	- some number of calls like sdio_writeb() and sdio_readb()

 *	- sdio_retune_crc_enable()

 *	- sdio_release_host()

/**

 *	sdio_retune_crc_enable - re-enable retuning on CRC errors

 *	@func: SDIO function attached to host

 *

 *	This is the compement to sdio_retune_crc_disable().

/**

 *	sdio_retune_hold_now - start deferring retuning requests till release

 *	@func: SDIO function attached to host

 *

 *	This function can be called if it's currently a bad time to do

 *	a retune of the SDIO card.  Retune requests made during this time

 *	will be held and we'll actually do the retune sometime after the

 *	release.

 *

 *	This function could be useful if an SDIO card is in a power state

 *	where it can respond to a small subset of commands that doesn't

 *	include the retuning command.  Care should be taken when using

 *	this function since (presumably) the retuning request we might be

 *	deferring was made for a good reason.

 *

 *	This function should be called while the host is claimed.

/**

 *	sdio_retune_release - signal that it's OK to retune now

 *	@func: SDIO function attached to host

 *

 *	This is the complement to sdio_retune_hold_now().  Calling this

 *	function won't make a retune happen right away but will allow

 *	them to be scheduled normally.

 *

 *	This function should be called while the host is claimed.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  tifm_sd.c - TI FlashMedia driver

 *

 *  Copyright (C) 2006 Alex Dubov <oakad@yahoo.com>

 *

 * Special thanks to Brad Campbell for extensive testing of this driver.

 Constants here are mostly from OMAP5912 datasheet */

 rx dma enable */

 tx dma enable */

 set bits: AE, AF */

 data timeout counted in kilocycles */

 abort / initialize command */

 set bits: CCRC, CTO, DCRC, DTO */

 end of command phase  */

 card detect           */

 card enter busy state */

 block received/sent   */

 card exit busy state  */

 data time-out         */

 data crc error        */

 command time-out      */

 command crc error     */

 fifo almost full      */

 fifo almost empty     */

 OCR busy              */

 card irq (cmd40/sdio) */

 card status error     */

 open drain / extended timeout */

 card is read-only     */

 for some reason, host won't respond correctly to readw/writew */

 Called from interrupt handler */

 Called from interrupt handler */

 set to unlimited */

 chip_select : maybe later */

vdd

power is set before probe / after remove

 wait up to 0.51 sec for reset */

 command timeout fixed to 64 clocks for now

	/*

	 * We use a fixed request timeout of 1s, hence inform the core about it.

	 * A future improvement should instead respect the cmd->busy_timeout.

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2014-2015 MediaTek Inc.

 * Author: Chaotian.Jing <chaotian.jing@mediatek.com>

--------------------------------------------------------------------------*/

 Common Definition                                                        */

--------------------------------------------------------------------------*/

--------------------------------------------------------------------------*/

 Register Offset                                                          */

--------------------------------------------------------------------------*/

--------------------------------------------------------------------------*/

 Top Pad Register Offset                                                  */

--------------------------------------------------------------------------*/

--------------------------------------------------------------------------*/

 Register Mask                                                            */

--------------------------------------------------------------------------*/

 MSDC_CFG mask */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 R  */

 R  */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 MSDC_IOCON mask */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 MSDC_PS mask */

 RW */

 R  */

 RW */

 R  */

 R  */

 R  */

 R  */

 MSDC_INT mask */

 W1C */

 W1C */

 W1C */

 W1C */

 W1C */

 W1C */

 W1C */

 W1C */

 W1C */

 W1C */

 R */

 W1C */

 W1C */

 W1C */

 W1C */

 W1C */

 W1C */

 W1C */

 W1C */

 W1C */

 MSDC_INTEN mask */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 MSDC_FIFOCS mask */

 R */

 R */

 RW */

 SDC_CFG mask */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 SDC_STS mask */

 RW */

 RW */

 RW */

 RW */

 SDC_ADV_CFG0 mask */

 RW */

 DMA_SA_H4BIT mask */

 RW */

 MSDC_DMA_CTRL mask */

 W */

 W */

 W */

 RW */

 RW */

 RW */

 MSDC_DMA_CFG mask */

 R */

 RW */

 RW */

 RW */

 RW */

 MSDC_PATCH_BIT mask */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 EMMC51_CFG0 mask */

 RW */

 RW */

 RW */

 RW */

 RW */

 EMMC50_CFG1 mask */

 RW */

 RW */

 RW */

 RW */

 CQHCI_SETTING */

 RW */

 RW */

 EMMC_TOP_CONTROL mask */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 RW */

 TW */

 EMMC_TOP_CMD mask */

 RW */

 RW */

 RW */

 RW */

 RW */

 EMMC50_PAD_DS_TUNE mask */

 RW */

 RW */

 RW */

 100ms x5 */

 1000ms x5 */

 8 cycles CD debounce */

 PAD delay cells */

--------------------------------------------------------------------------*/

 Descriptor Structure                                                     */

--------------------------------------------------------------------------*/

 bit8 ~ bit15 */

 bit0 ~ bit15 */

 bit16 ~ bit23 */

 bit8 ~ bit15 */

 bit0 ~ bit15 */

 bit0 ~ bit23 */

 I/O scatter list */

 pointer to gpd array */

 pointer to bd array */

 the physical address of gpd array */

 the physical address of bd array */

 only used for MT8173 */

 host base address */

 host top register base address */

 dma channel */

 data timeout ns */

 data timeout clks */

 host interrupt */

 msdc source clock */

 msdc h_clk */

 bus clock which used to access register */

 msdc source clock control gate */

 msdc subsys clock control gate */

 mmc subsystem clock frequency */

 source clock frequency */

 cmd internal delay for HS200/SDR104 */

 cmd internal delay for HS400 */

 cmd response sample selection for HS400 */

 current eMMC will run at hs400 mode */

 hs400 mode online tuning */

 Use internal card-detect logic */

 support eMMC hw cmdq */

 used when gate HCLK */

 default tune setting */

 tune result of CMD21/CMD19 */

 modify gpd */

 need to clear first. use these bits to calc checksum */

 modify bd */

 init bd */

 the last bd */

 checksume need to clear first */

 in 1048576 sclk cycle unit */

DDR mode will double the clk cycles for data timeout */

 clock control primitives */

 ddr mode and use divisor */

 mean div = 1/4 */

 sclk = clk / 4 */

 div is ignore when bit18 is set */

 no divisor */

 use divisor */

 mean div = 1/2 */

 sclk = clk / 2 */

	/*

	 * As src_clk/HCLK use the same bit to gate/ungate,

	 * So if want to only gate src_clk, need gate its parent(mux).

 need because clk changed. */

	/*

	 * mmc_select_hs400() will drop to 50Mhz and High speed mode,

	 * tune result of hs200/200Mhz is not suitable for 50Mhz

 Actually, R1, R5, R6, R7 are the same */

	/* rawcmd :

	 * vol_swt << 30 | auto_cmd << 28 | blklen << 16 | go_irq << 15 |

	 * stop << 14 | rw << 13 | dtype << 11 | rsptyp << 7 | brk << 6 | opcode

 AutoCMD23 */

 Always use dma mode */

/*

 * msdc_recheck_sdio_irq - recheck whether the SDIO irq is lost

 *

 * Host controller may lost interrupt in some special case.

 * Add SDIO irq recheck mechanism to make sure all interrupts

 * can be processed immediately

	/*

	 * No need check the return value of cancel_delayed_work, as only ONE

	 * path will go here!

 returns true if command is fully handled; returns false otherwise */

			/*

			 * should not clear fifo/interrupt as the tune data

			 * may have alreay come when cmd19/cmd21 gets response

			 * CRC error.

/* It is the core layer's responsibility to ensure card status

 * is correct before issue a request. but host design do below

 * checks recommended.

 The max busy time we can endure is 20ms */

 R1B or with data, should check SDCBUSY */

	/* if SBC is required, we have HW option and SW option.

	 * if HW option is enabled, and SBC does not have "special" flags,

	 * use HW option,  otherwise use SW option

 Apply different pinctrl settings for different signal voltage */

 only check if data0 is low */

 simulate HW timeout status */

 clear interrupts */

 clear interrupts */

 Configure to MMC/SD mode, clock free running */

 Reset */

 Disable and clear all interrupts */

 Configure card detection */

 use async fifo, then no need tune internal delay */

 choose clock tune */

	/* Configure to enable SDIO mode.

	 * it's must otherwise sdio cmd5 failed

 Config SDIO device detect interrupt function */

 Configure to default data timeout */

 Disabled card-detect */

 Disable and clear all interrupts */

 init gpd and bd list in msdc_drv_probe */

 hwo, cs, bd pointer */

	/* gpd->next is must set for desc DMA

	 * That's why must alloc 2 gpd structure.

 physical address */

 Suspend/Resume will do power off/on */

 The rule is that to find the smallest delay cell */

		/*

		 * Using the same parameters, it may sometimes pass the test,

		 * but sometimes it may fail. To make sure the parameters are

		 * more stable, we test each set of parameters 3 times.

 if rising edge has enough margin, then do not scan falling edge */

		/*

		 * Using the same parameters, it may sometimes pass the test,

		 * but sometimes it may fail. To make sure the parameters are

		 * more stable, we test each set of parameters 3 times.

 select EMMC50 PAD CMD tune */

		/*

		 * Using the same parameters, it may sometimes pass the test,

		 * but sometimes it may fail. To make sure the parameters are

		 * more stable, we test each set of parameters 3 times.

 if rising edge has enough margin, then do not scan falling edge */

/*

 * MSDC IP which supports data tune + async fifo can do CMD/DAT tune

 * together, which can save the tuning time.

 if rising edge has enough margin, then do not scan falling edge */

 hs400 mode must set it to 0 */

 to improve read performance, set outstanding to 2 */

 10us is enough */

 enable cmdq irq */

 enable busy check */

 default write data / busy timeout 20s */

 default read data timeout 1s */

 disable cmdq irq */

 disable busy check */

source clock control gate is optional clock*/

 If present, always enable for this clock gate */

 Allocate MMC host for this device */

 Set host parameters to mmc */

		/*

		 * Is removable but no GPIO declared, so

		 * use internal functionality.

 MMC core transfer sizes tunable parameters */

 cqhci 16bit length */

 0 size, means 65536 so we don't have to -1 here */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Marvell MMC/SD/SDIO driver

 *

 * Authors: Maen Suleiman, Nicolas Pitre

 * Copyright (C) 2008-2009 Marvell Ltd.

	/*

	 * Hardware weirdness.  The FIFO_EMPTY bit of the HW_STATE

	 * register is sometimes not set before a while when some

	 * "unusual" data block sizes are used (such as with the SWITCH

	 * command), even despite the fact that the XFER_DONE interrupt

	 * was raised.  And if another data transfer starts before

	 * this bit comes to good sense (which eventually happens by

	 * itself) then the new transfer simply fails with a timeout.

 If timeout=0 then maximum timeout index is used. */

		/*

		 * We cannot do DMA on a buffer which offset or size

		 * is not aligned on a 4-byte boundary.

		 *

		 * It also appears the host to card DMA can corrupt

		 * data when the buffer is not aligned on a 64 byte

		 * boundary.

 PIO section of mvsd_irq has comments on those bits */

 We can't be sure about the last block when errors are detected */

 Handle Auto cmd 12 response */

	/*

	 * It looks like, SDIO IP can issue one late, spurious irq

	 * although all irqs should be disabled. To work around this,

	 * bail out early, if we didn't expect any irqs to occur.

 PIO handling, if needed. Messy business... */

		/*

		 * Normally we'd use < 32 here, but the RX_FIFO_8W bit

		 * doesn't appear to assert when there is exactly 32 bytes

		 * (8 words) left to fetch in a transfer.

		/*

		 * The TX_FIFO_8W bit is unreliable. When set, bursting

		 * 16 halfwords all at once in the FIFO drops data. Actually

		 * TX_AVAIL does go off after only one word is pushed even if

		 * TX_FIFO_8W remains set.

 default transfer mode */

 default to maximum timeout */

	/*

	 * The HI_SPEED_EN bit is causing trouble with many (but not all)

	 * high speed SD, SDHC and SDIO cards.  Not enabling that bit

	 * makes all cards work.  So let's just ignore that bit for now

	 * and revisit this issue if problems for not enabling this bit

	 * are ever reported.

	/*

	 * Some non-DT platforms do not pass a clock, and the clock

	 * frequency is passed through platform_data. On DT platforms,

	 * a clock must always be passed, even if there is no gatable

	 * clock associated to the SDIO interface (it can simply be a

	 * fixed rate clock).

 (Re-)program MBUS remapping windows if we are asked to. */

 sentinel */ }

 maximum card clock frequency (default 50MHz) */

 force PIO transfers all the time */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/mmc/host/sdhci-msm.c - Qualcomm SDHCI Platform driver

 *

 * Copyright (c) 2013-2014, The Linux Foundation. All rights reserved.

 Timeout value to avoid infinite waiting for pwr_irq */

 Max load for eMMC Vdd-io supply */

 CQHCI vendor specific registers */

 Applicable to sdcc minor ver < 0x49 */

 Present on SDCC5.1 onwards */

/*

 * From V5, register spaces have changed. Wrap this info in a structure

 * and choose the data_structure based on version info mentioned in DT.

 MSM SDCC mapped address */

 MSM ICE mapped address (if available) */

 power irq */

 SDHC bus voter clock */

 TCXO clk needed for FLL feature of cm_dll*/

 core, iface, cal, sleep, and ice clocks */

/*

 * APIs to read/write to vendor specific registers which were there in the

 * core_mem region before MCI was removed.

	/*

	 * The SDHC requires internal clock frequency to be double the

	 * actual clock that will be set for DDR mode. The controller

	 * uses the faster clock(100/400MHz) for some of its parts and

	 * send the actual required clock (50/200MHz) to the card.

	/*

	 * Qualcomm clock drivers by default round clock _up_ if they can't

	 * make the requested rate.  This is not good for SD.  Yell if we

	 * encounter it.

 Stash the rate we requested to use in sdhci_msm_runtime_resume() */

 Platform specific tuning */

 Poll for CK_OUT_EN bit.  max. poll time = 50us */

 Wait until CK_OUT_EN bit of DLL_CONFIG register becomes '0' */

	/*

	 * Write the selected DLL clock output phase (0 ... 15)

	 * to CDR_SELEXT bit field of DLL_CONFIG register.

 Wait until CK_OUT_EN bit of DLL_CONFIG register becomes '1' */

/*

 * Find out the greatest range of consecuitive selected

 * DLL clock output phases that can be used as sampling

 * setting for SD3.0 UHS-I card read operation (in SDR104

 * timing mode) or for eMMC4.5 card read operation (in

 * HS400/HS200 timing mode).

 * Select the 3/4 of the range and configure the DLL with the

 * selected DLL clock output phase.

 check if next phase in phase_table is consecutive or not */

 Check if phase-0 is present in first valid window? */

 Check if cycle exist between 2 valid windows */

 If 2 valid windows form cycle then merge them as single window */

 number of phases in raw where phase 0 is present */

 number of phases in raw where phase 15 is present */

			/*

			 * If there are more than 1 phase windows then total

			 * number of phases in both the windows should not be

			 * more than or equal to MAX_PHASES.

 Merge 2 cyclic windows */

 Program the MCLK value to MCLK_FREQ bit field */

 Initialize the DLL (Programmable Delay Line) */

	/*

	 * Make sure that clock is always enabled when DLL

	 * tuning is in progress. Keeping PWRSAVE ON may

	 * turn off the clock.

 wait for 5us before enabling DLL clock */

	/*

	 * Configure DLL user control register to enable DLL status.

	 * This setting is applicable to SDCC v5.1 onwards only.

 Wait until DLL_LOCK bit of DLL_STATUS register becomes '1' */

 max. wait for 50us sec for LOCK bit to be set */

	/*

	 * Disable HC_SELECT_IN to be able to use the UHS mode select

	 * configuration from Host Control2 register for all other

	 * modes.

	 * Write 0 to HC_SELECT_IN and HC_SELECT_IN_EN field

	 * in VENDOR_SPEC_FUNC

	/*

	 * Make sure above writes impacting free running MCLK are completed

	 * before changing the clk_rate at GCC.

 Select the divided clock (free running MCLK/2) */

	/*

	 * Select HS400 mode using the HC_SELECT_IN from VENDOR SPEC

	 * register

		/*

		 * Poll on DLL_LOCK or DDR_DLL_LOCK bits in

		 * core_dll_status to be set. This should get set

		 * within 15 us at 200 MHz.

	/*

	 * Make sure above writes impacting free running MCLK are completed

	 * before changing the clk_rate at GCC.

/*

 * sdhci_msm_hc_select_mode :- In general all timing modes are

 * controlled via UHS mode select in Host Control2 register.

 * eMMC specific HS200/HS400 doesn't have their respective modes

 * defined here, hence we use these values.

 *

 * HS200 - SDR104 (Since they both are equivalent in functionality)

 * HS400 - This involves multiple configurations

 *		Initially SDR104 - when tuning is required as HS200

 *		Then when switching to DDR @ 400MHz (HS400) we use

 *		the vendor specific HC_SELECT_IN to control the mode.

 *

 * In addition to controlling the modes we also need to select the

 * correct input clock for DLL depending on the mode.

 *

 * HS400 - divided clock (free running MCLK/2)

 * All other modes - default (free running MCLK)

	/*

	 * Retuning in HS400 (DDR mode) will fail, just reset the

	 * tuning block and restore the saved tuning phase.

 Set the selected phase in delay line hw block */

 Perform CDC Register Initialization Sequence */

 CDC HW Calibration */

	/*

	 * Currently the core_ddr_config register defaults to desired

	 * configuration on reset. Currently reprogramming the power on

	 * reset (POR) value in case it might have been modified by

	 * bootloaders. In the future, if this changes, then the desired

	 * values will need to be programmed appropriately.

	/*

	 * Set CORE_PWRSAVE_DLL bit in CORE_VENDOR_SPEC3.

	 * When MCLK is gated OFF, it is not gated for less than 0.5us

	 * and MCLK must be switched on for at-least 1us before DATA

	 * starts coming. Controllers with 14lpp and later tech DLL cannot

	 * guarantee above requirement. So PWRSAVE_DLL should not be

	 * turned on for host controllers using this DLL.

	/*

	 * Drain writebuffer to ensure above DLL calibration

	 * and PWRSAVE DLL is enabled.

	/*

	 * Retuning in HS400 (DDR mode) will fail, just reset the

	 * tuning block and restore the saved tuning phase.

 Set the selected phase in delay line hw block */

	/*

	 * Tuning is required for SDR104, HS200 and HS400 cards and

	 * if clock frequency is greater than 100MHz in these modes.

	/*

	 * SDR DLL comes into picture only for timing modes which needs

	 * tuning.

 Reset the tuning block */

 Restore the tuning block */

 Clock-Data-Recovery used to dynamically adjust RX sampling point */

	/*

	 * Clear tuning_done flag before tuning to ensure proper

	 * HS400 settings.

	/*

	 * For HS400 tuning in HS200 timing requires:

	 * - select MCLK/2 in VENDOR_SPEC

	 * - program MCLK to 400MHz (or nearest supported) in GCC

 First of all reset the tuning block */

 Set the phase in delay line hw block */

 Tuning is successful at this tuning point */

			/*

			 * All phases valid is _almost_ as bad as no phases

			 * valid.  Probably all phases are not really reliable

			 * but we didn't detect where the unreliable place is.

			 * That means we'll essentially be guessing and hoping

			 * we get a good phase.  Better to try a few times.

		/*

		 * Finally set the selected phase in delay

		 * line hw block.

 Tuning failed */

/*

 * sdhci_msm_hs400 - Calibrate the DLL for HS400 bus speed mode operation.

 * This needs to be done for both tuning and enhanced_strobe mode.

 * DLL operation is only needed for clock > 100MHz. For clock <= 100MHz

 * fixed feedback clock is used.

 Select Bus Speed Mode for host */

	/*

	 * When clock frequency is less than 100MHz, the feedback clock must be

	 * provided and DLL must not be used so that tuning can be skipped. To

	 * provide feedback clock, the mode selection can be any value less

	 * than 3'b011 in bits [2:0] of HOST CONTROL2 register.

		/*

		 * DLL is not required for clock <= 100MHz

		 * Thus, make sure DLL it is disabled when not required

		/*

		 * The DLL needs to be restored and CDCLP533 recalibrated

		 * when the clock frequency is set back to 400MHz.

 Set the IO voltage regulator to default voltage level */

	/*

	 * For eMMC don't turn off Vqmmc, Instead just configure it in LPM

	 * and HPM modes by setting the corresponding load.

	 *

	 * Till eMMC is initialized (i.e. always_on == 0), just turn on/off

	 * Vqmmc. Vqmmc gets turned off only if init fails and mmc_power_off

	 * gets invoked. Once eMMC is initialized (i.e. always_on == 1),

	 * Vqmmc should remain ON, So just set the load instead of turning it

	 * off/on.

/*

 * sdhci_msm_check_power_status API should be called when registers writes

 * which can toggle sdhci IO bus ON/OFF or change IO lines HIGH/LOW happens.

 * To what state the register writes will change the IO lines should be passed

 * as the argument req_type. This API will check whether the IO line's state

 * is already the expected state and will wait for power irq only if

 * power irq is expected to be triggered based on the current IO line state

 * and expected IO line state.

	/*

	 * The power interrupt will not be generated for signal voltage

	 * switches if SWITCHABLE_SIGNALING_VOLTAGE in MCI_GENERICS is not set.

	 * Since sdhci-msm-v5, this bit has been removed and SW must consider

	 * it as always set.

	/*

	 * The IRQ for request type IO High/LOW will be generated when -

	 * there is a state change in 1.8V enable bit (bit 3) of

	 * SDHCI_HOST_CONTROL2 register. The reset state of that bit is 0

	 * which indicates 3.3V IO voltage. So, when MMC core layer tries

	 * to set it to 3.3V before card detection happens, the

	 * IRQ doesn't get triggered as there is no state change in this bit.

	 * The driver already handles this case by changing the IO voltage

	 * level to high as part of controller power up sequence. Hence, check

	 * for host->pwr to handle a case where IO voltage high request is

	 * issued even before controller power up.

	/*

	 * This is needed here to handle cases where register writes will

	 * not change the current bus state or io level of the controller.

	 * In this case, no power irq will be triggerred and we should

	 * not wait.

	/*

	 * There is a rare HW scenario where the first clear pulse could be

	 * lost when actual reset and clear/read of status register is

	 * happening at a time. Hence, retry for at least 10 times to make

	 * sure status register is cleared. Otherwise, this will result in

	 * a spurious power IRQ resulting in system instability.

 Handle BUS ON/OFF*/

 Handle IO LOW/HIGH */

	/*

	 * The driver has to acknowledge the interrupt, switch voltages and

	 * report back if it succeded or not to this register. The voltage

	 * switches are handled by the sdhci core, so just report success.

	/*

	 * If we don't have info regarding the voltage levels supported by

	 * regulators, don't change the IO PAD PWR SWITCH.

		/*

		 * We should unset IO PAD PWR switch only if the register write

		 * can set IO lines high and the regulator also switches to 3 V.

		 * Else, we should keep the IO PAD PWR switch set.

		 * This is applicable to certain targets where eMMC vccq supply

		 * is only 1.8V. In such targets, even during REQ_IO_HIGH, the

		 * IO PAD PWR switch must be kept set to reflect actual

		 * regulator voltage. This way, during initialization of

		 * controllers with only 1.8V, we will set the IO PAD bit

		 * without waiting for a REQ_IO_LOW.

/*

 * __sdhci_msm_set_clock - sdhci_msm clock control.

 *

 * Description:

 * MSM controller does not use internal divider and

 * instead directly control the GCC clock as per

 * HW recommendation.

	/*

	 * MSM controller do not use clock divider.

	 * Thus read SDHCI_CLOCK_CONTROL and only enable

	 * clock with no divider value programmed.

 sdhci_msm_set_clock - Called with (host->lock) spinlock held. */

/*****************************************************************************\

 *                                                                           *

 * Inline Crypto Engine (ICE) support                                        *

 *                                                                           *

 QCOM ICE registers */

 For now this driver only supports ICE version 3. */

 If fuses are blown, ICE might not work in the standard way. */

	/*

	 * Enable low power mode sequence

	 * [0]-0, [1]-0, [2]-0, [3]-E, [4]-0, [5]-0, [6]-0, [7]-0

 ICE Optimizations Enable Sequence */

 ICE HPG requires delay before writing */

/*

 * Wait until the ICE BIST (built-in self-test) has completed.

 *

 * This may be necessary before ICE can be used.

 *

 * Note that we don't really care whether the BIST passed or failed; we really

 * just want to make sure that it isn't still running.  This is because (a) the

 * BIST is a FIPS compliance thing that never fails in practice, (b) ICE is

 * documented to reject crypto requests if the BIST fails, so we needn't do it

 * in software too, and (c) properly testing storage encryption requires testing

 * the full storage stack anyway, and not relying on hardware-level self-tests.

/*

 * Program a key into a QC ICE keyslot, or evict a keyslot.  QC ICE requires

 * vendor-specific SCM calls for this; it doesn't support the standard way.

 Only AES-256-XTS has been tested so far. */

	/*

	 * The SCM call byte-swaps the 32-bit words of the key.  So we have to

	 * do the same, in order for the final key be correct.

 CONFIG_MMC_CRYPTO */

 !CONFIG_MMC_CRYPTO */

/*****************************************************************************\

 *                                                                           *

 * MSM Command Queue Engine (CQE)                                            *

 *                                                                           *

	/*

	 * When CQE is halted, the legacy SDHCI path operates only

	 * on 16-byte descriptors in 64bit mode.

	/*

	 * During CQE command transfers, command complete bit gets latched.

	 * So s/w should clear command complete interrupt status when CQE is

	 * either halted or disabled. Otherwise unexpected SDCHI legacy

	 * interrupt gets triggered when CQE is halted/disabled.

	/*

	 * Update software timeout value if its value is less than hardware data

	 * timeout value. Qcom SoC hardware data timeout value was calculated

	 * using 4 * MCLK * 2^(count + 13). where MCLK = 1 / host->clock.

	/*

	 * When CQE is halted, SDHC operates only on 16byte ADMA descriptors.

	 * So ensure ADMA table is allocated for 16byte descriptors.

 Disable cqe reset due to cqe enable signal */

	/*

	 * SDHC expects 12byte ADMA descriptors till CQE is enabled.

	 * So limit desc_sz to 12 so that the data commands that are sent

	 * during card initialization (before CQE gets enabled) would

	 * get executed without any issues.

/*

 * Platform specific register write functions. This is so that, if any

 * register write needs to be followed up by platform specific actions,

 * they can be added here. These functions can go to sleep when writes

 * to certain registers are done.

 * These functions are relying on sdhci_set_ios not using spinlock.

		/*

		 * Since this register write may trigger a power irq, ensure

		 * all previous register writes are complete by this point.

 This function may sleep*/

 This function may sleep*/

		/*

		 * Set the PAD_PWR_SWITCH_EN bit so that the PAD_PWR_SWITCH

		 * bit can be used as required later on.

	/*

	 * Signal Voltage Switching is only applicable for Host Controllers

	 * v3.00 and above.

 Set 1.8V Signal Enable in the Host Control2 register to 0 */

 Enable 1.8V Signal Enable in the Host Control2 register */

 Wait for 5ms */

 regulator output should be stable within 5 ms */

	/*

	 * Based on the compatible string, load the required msm host info from

	 * the data associated with the version info.

 Setup SDCC bus voter clock. */

 Vote for max. clk rate for max. performance */

 Setup main peripheral bus clock */

 Setup SDC MMC clock */

 Check for optional interconnect paths */

 OPP table is optional */

 Vote for maximum clock rate for maximum performance */

	/*

	 * xo clock is needed for FLL feature of cm_dll.

	 * In case if xo clock is not mentioned in DT, warn and proceed.

 Reset the vendor spec register to power on reset state */

 Set HC_MODE_EN bit in HC_MODE register */

	/*

	 * SDCC 5 controller with major version 1, minor version 0x34 and later

	 * with HS 400 mode support will use CM DLL instead of CDC LP 533 DLL.

	/*

	 * Support for some capabilities is not advertised by newer

	 * controller versions and must be explicitly enabled.

	/*

	 * Power on reset state may trigger power irq if previous status of

	 * PWRCTL was either BUS_ON or IO_HIGH_V. So before enabling pwr irq

	 * interrupt in GIC, any pending power irq interrupt should be

	 * acknowledged. Otherwise power irq interrupt handler would be

	 * fired prematurely.

	/*

	 * Ensure that above writes are propogated before interrupt enablement

	 * in GIC.

 Setup IRQ for handling power/voltage tasks with PMIC */

 Enable pwr irq interrupts */

 Set the timeout value to max possible */

 Drop the performance vote */

	/*

	 * Whenever core-clock is gated dynamically, it's needed to

	 * restore the SDR DLL settings when the clock is ungated.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * davinci_mmc.c - TI DaVinci MMC/SD/SDIO driver

 *

 * Copyright (C) 2006 Texas Instruments.

 *       Original author: Purushotam Kumar

 * Copyright (C) 2009 David Brownell

/*

 * Register Definitions

 Control Register                  */

 Memory Clock Control Register     */

 Status Register 0                 */

 Status Register 1                 */

 Interrupt Mask Register           */

 Response Time-Out Register        */

 Data Read Time-Out Register       */

 Block Length Register             */

 Number of Blocks Register         */

 Number of Blocks Counter Register */

 Data Receive Register             */

 Data Transmit Register            */

 Command Register                  */

 Argument Register                 */

 Response Register 0 and 1         */

 Response Register 0 and 1         */

 Response Register 0 and 1         */

 Response Register 0 and 1         */

 Data Response Register            */

 Command Index Register            */

 FIFO Control Register             */

 DAVINCI_MMCCTL definitions */

 DAVINCI_MMCCLK definitions */

 IRQ bit definitions, for DAVINCI_MMCST0 and DAVINCI_MMCIM */

 data done */

 busy done */

 command done */

 data read timeout */

 command response timeout */

 data write CRC error */

 data read CRC error */

 command response CRC error */

 data transmit ready (fifo empty) */

 data receive ready (data in fifo)*/

 DAT3 edge detect */

 transfer done */

 DAVINCI_MMCST1 definitions */

 DAVINCI_MMCCMD definitions */

 DAVINCI_MMCFIFOCTL definitions */

 0 = 128 bits, 1 = 256 bits */

 access width of 4 bytes    */

 access width of 3 bytes    */

 access width of 2 bytes    */

 access width of 1 byte     */

 DAVINCI_SDIOST0 definitions */

 DAVINCI_SDIOIEN definitions */

 DAVINCI_SDIOIST definitions */

 MMCSD Init clock in Hz in opendrain mode */

/*

 * One scatterlist dma "segment" is at most MAX_CCNT rw_threshold units,

 * and we handle up to MAX_NR_SG segments.  MMC_BLOCK_BOUNCE kicks in only

 * for drivers with max_segs == 1, making the segments bigger (64KB)

 * than the page or two that's otherwise typical. nr_sg (passed from

 * platform data) == 16 gives at least the same throughput boost, using

 * EDMA transfer linkage instead of spending CPU time copying pages.

	/* buffer is used during PIO of one scatterlist segment, and

	 * is updated along with buffer_bytes_left.  bytes_left applies

	 * to all N blocks of the PIO transfer.

 For PIO we walk scatterlists one segment at a time. */

 Version of the MMC/SD controller */

 for ns in one cycle calculation */

 Number of sg segments */

 PIO only */

	/* NOTE:  we never transfer more than rw_threshold bytes

	 * to/from the fifo here; there's no I/O overlap.

	 * This also assumes that access width( i.e. ACCWD) is 4 bytes

		/* There's some spec confusion about when R1B is

		 * allowed, but if the card doesn't issue a BUSY

		 * then it's harmless for us to allow it.

 48 bits, CRC */

 136 bits, CRC */

 48 bits, no CRC */

 Set command index */

 Enable EDMA transfer triggers */

 Setting whether command involves data transfer or not */

 Setting whether data read or write */

 set Command timeout */

 Enable interrupt (calculate here, defer until FIFO is stuffed). */

	/*

	 * Before non-DMA WRITE commands the controller needs priming:

	 * FIFO should be populated with 32 bytes i.e. whatever is the FIFO size

----------------------------------------------------------------------*/

 DMA infrastructure */

 no individual DMA segment should need a partial FIFO */

----------------------------------------------------------------------*/

 Configure the FIFO */

	/* For now we try to use DMA whenever we won't need partial FIFO

	 * reads or writes, either for the whole transfer (as tested here)

	 * or for any individual scatterlist segment (tested when we call

	 * start_dma_transfer).

	 *

	 * While we *could* change that, unusual block sizes are rarely

	 * used.  The occasional fallback to PIO should't hurt.

 zero this to ensure we take no PIO paths */

 Revert to CPU Copy */

	/* Card may still be sending BUSY after a previous operation,

	 * typically some kind of write.  If so, we can't proceed yet.

 Convert ns to clock cycles */

		/* Ignoring the init clock value passed for fixing the inter

		 * operability with different cards.

 Convert ns to clock cycles */

 Send clock cycles, poll completion */

 FIXME on power OFF, reset things ... */

		/*

		 * SDIO Interrupt Detection work-around as suggested by

		 * Davinci Errata (TMS320DM355 Silicon Revision 1.1 Errata

		 * 2.1.6): Signal SDIO interrupt only if it is enabled by core

 response type 2 */

 response types 1, 1b, 3, 4, 5, 6 */

 reset */

 enable */

 Disable the interrupt from mmcsd */

	/* handle FIFO first when using PIO for data.

	 * bytes_left will decrease to zero as I/O progress and status will

	 * read zero over iteration because this controller status

	 * register(MMCST0) reports any status only once and it is cleared

	 * by read. So, it is not unbouned loop even in the case of

	 * non-dma.

		/*

		 * If interrupts fire during the following loop, they will be

		 * handled by the handler, but the PIC will still buffer these.

		 * As a result, the handler will be called again to serve these

		 * needlessly. In order to avoid these spurious interrupts,

		 * keep interrupts masked during the loop.

		/*

		 * If an interrupt is pending, it is assumed it will fire when

		 * it is unmasked. This assumption is also taken when the MMCIM

		 * is first set. Otherwise, writing to MMCIM after reading the

		 * status is race-prone.

 All blocks sent/received, and CRC checks passed */

				/* if datasize < rw_threshold

				 * no RX ints are generated

 Read data timeout */

 Data CRC error */

		/* NOTE:  this controller uses CRCWR to report both CRC

		 * errors and timeouts (on writes).  MMCDRSP values are

		 * only weakly documented, but 0x9f was clearly a timeout

		 * case and the two three-bit patterns in various SD specs

		 * (101, 010) aren't part of it ...

 Command timeout */

 Command CRC error */

 End of command phase */

----------------------------------------------------------------------*/

 Register a cd gpio, if there is not one, enable polling */

 Important */

	/* With no iommu coalescing pages, each phys_seg is a hw_seg.

	 * Each hw_seg uses one EDMA parameter RAM slot, always one

	 * channel and then usually some linked slots.

 EDMA limit per hw segment (one or two MBytes) */

 MMC/SD controller limits for multiblock requests */

 BLEN is 12 bits */

 NBLK is 16 bits */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2019 Genesys Logic, Inc.

 *

 * Authors: Ben Chuang <ben.chuang@genesyslogic.com.tw>

 *

 * Version: v0.9.0 (2019-08-08)

  Genesys Logic extra registers */

 Genesys Logic chipset */

 reset the tuning flow after reinit and before starting tuning */

 disable tuned clk */

 enable tuning parameters control */

 write tuning parameters */

 disable tuning parameters control */

 clear tuned clk */

 Success! */

 wait for pll stable */

 set pll to 205MHz and enable ssc */

 set ASPM L1 entry delay to 7.9us */

 wait for pll stable */

 set pll to 205MHz and enable ssc */

 enable short circuit protection */

 set ASPM L1 entry delay to 7.9us */

	/*

	 * According to Section 3.6.1 signal voltage switch procedure in

	 * SD Host Controller Simplified Spec. 4.20, steps 6~8 are as

	 * follows:

	 * (6) Set 1.8V Signal Enable in the Host Control 2 register.

	 * (7) Wait 5ms. 1.8V voltage regulator shall be stable within this

	 *     period.

	 * (8) If 1.8V Signal Enable is cleared by Host Controller, go to

	 *     step (12).

	 *

	 * Wait 5ms after set 1.8V signal enable in Host Control 2 register

	 * to ensure 1.8V signal enable bit is set by GL9750/GL9755.

	 *

	 * ...however, the controller in the NUC10i3FNK4 (a 9755) requires

	 * slightly longer than 5ms before the control register reports that

	 * 1.8V is ready, and far longer still before the card will actually

	 * work reliably.

 set ASPM L1 entry delay to 21us */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) STMicroelectronics 2018 - All Rights Reserved

 * Author: Ludovic.barre@st.com for STMicroelectronics.

	/*

	 * idma has constraints on idmabase & idmasize for each element

	 * excepted the last element which has no constraint on idmasize

 Check if job is already prepared. */

 notice the end of link list */

	/*

	 * cclk = mclk / (2 * clkdiv)

	 * clkdiv 0 => bypass

	 * in ddr mode bypass is not possible

		/*

		 * while power-on phase the clock can't be define to 0,

		 * Only power-off and power-cyc deactivate the clock.

		 * if desired clock is 0, set max divider

 Set actual clock for debug */

	/*

	 * SDMMC_FBCK is selected when an external Delay Block is needed

	 * with SDR104.

 Output clock = Input clock */

 adds OF options */

 Only a reset could power-off sdmmc */

		/*

		 * Set the SDMMC in Power-cycle state.

		 * This will make that the SDMMC_D[7:0], SDMMC_CMD and SDMMC_CK

		 * are driven low, to prevent the Card from being supplied

		 * through the signal lines.

		/*

		 * After power-off (reset): the irq mask defined in probe

		 * functionis lost

		 * ault irq mask (probe) must be activated

 preserves voltage switch bits */

		/*

		 * After a power-cycle state, we must set the SDMMC in

		 * Power-off. The SDMMC_D[7:0], SDMMC_CMD and SDMMC_CK are

		 * driven high. Then we can set the SDMMC to Power-on state

 complete if there is an error or busy_d0end */

	/*

	 * On response the busy signaling is reflected in the BUSYD0 flag.

	 * if busy_d0 is in-progress we must activate busyd0end interrupt

	 * to wait this completion. Else this request has no busy step.

 clear the voltage switch completion flag */

 enable Voltage switch procedure */

 wait voltage switch completion while 10ms */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Copyright (c) 2011, The Linux Foundation. All rights reserved.

 Registers */

 other definitions */

 Read operation: configure DML for producer operation */

 Set producer CRCI-x and disable consumer CRCI */

 Set the Producer BAM block size */

 Set Producer BAM Transaction size */

 Set Producer Transaction End bit */

 Trigger producer */

 Write operation: configure DML for consumer operation */

 Set consumer CRCI-x and disable producer CRCI*/

 Clear Producer Transaction End bit */

 Trigger consumer */

 make sure the dml is configured before dma is triggered */

 Initialize the dml hardware connected to SD Card controller */

 Reset the DML block */

 Disable the producer and consumer CRCI */

	/*

	 * Disable the bypass mode. Bypass mode will only be used

	 * if data transfer is to happen in PIO mode and don't

	 * want the BAM interface to connect with SDCC-DML.

	/*

	 * Disable direct mode as we don't DML to MASTER the AHB bus.

	 * BAM connected with DML should MASTER the AHB bus.

	/*

	 * Disable infinite mode transfer as we won't be doing any

	 * infinite size data transfers. All data transfer will be

	 * of finite data size.

	/*

	 * Initialize the logical BAM pipe size for producer

	 * and consumer.

 Initialize Producer/consumer pipe id */

 Make sure dml initialization is finished */

/*

 * Driver for MMC and SSD cards for Cavium ThunderX SOCs.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 *

 * Copyright (C) 2016 Cavium Inc.

 register interrupts */

 On ThunderX these are identical */

	/*

	 * Clear out any pending interrupts that may be left over from

	 * bootloader. Writing 1 to the bits clears them.

 Clear DMA FIFO */

		/*

		 * mmc_of_parse and devm* require one device per slot.

		 * Create a dummy device per slot and set the node pointer to

		 * the slot. The easiest way to get this is using

		 * of_platform_device_create.

 end of table */

/*

 * Support of SDHCI platform devices for Microchip PIC32.

 *

 * Copyright (C) 2015 Microchip

 * Andrei Pistirica, Paul Thacker

 *

 * Inspired by sdhci-pltfm.c

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 CD select and test bits must be set for errata workaround. */

	/*

	 * The SDHCI_WRITE_PROTECT bit is unstable on current hardware so we

	 * can't depend on its value in any way.

 select first clock */

 select first interrupt */

 Check card slot connected on shared bus. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/mmc/host/pxa.c - PXA MMCI driver

 *

 *  Copyright (C) 2003 Russell King, All Rights Reserved.

 *

 *  This hardware is really sick:

 *   - No way to clear interrupts.

 *   - Have to turn off the clock whenever we touch the device.

 *   - Doesn't tell you how many data blocks were transferred.

 *  Yuck!

 *

 *	1 and 3 byte data transfers not supported

 *	max block length up to 1023

 fall-back to platform data */

	/*

	 * workaround for erratum #91:

	 * only start DMA now if we are doing a read,

	 * otherwise we wait until CMD/RESP has finished

	 * before starting DMA.

 r1, r1b, r6, r7 */

	/*

	 * Did I mention this is Sick.  We always need to

	 * discard the upper 8 bits of the first 16-bit word.

		/*

		 * workaround for erratum #42:

		 * Intel PXA27x Family Processor Specification Update Rev 001

		 * A bogus CRC error can appear if the msb of a 136 bit

		 * response is a one.

		/*

		 * workaround for erratum #91, if doing write

		 * enable DMA late

	/*

	 * There appears to be a hardware design bug here.  There seems to

	 * be no way to find out how much data was transferred to the card.

	 * This means that if there was an error on any block, we mark all

	 * data blocks as being in error.

	/*

	 * Board doesn't support read only detection; let the mmc core

	 * decide what to do.

 to support 26MHz */

 to handle (19.5MHz, 26MHz) */

			/*

			 * clk might result in a lower divisor than we

			 * desire.  check for that condition and adjust

			 * as appropriate.

		/*

		 * we write clkrt on the next command

			/*

			 * The .set_ios() function in the mmc_host_ops

			 * struct return void, and failing to set the

			 * power should be rare so we print an error and

			 * return here.

 pxa-mmc specific */

	/*

	 * We can do SG-DMA, but we don't because we never know how much

	 * data we successfully wrote to the card.

	/*

	 * Our hardware DMA can handle a maximum of one page per SG entry.

	/*

	 * Block length register is only 10 bits before PXA27x.

	/*

	 * Block count register is 16 bits.

	/*

	 * Calculate minimum clock rate, rounding up.

	/*

	 * Ensure that the host controller is shut down, and setup

	 * with our defaults.

 FIXME: should we pass detection delay to debounce? */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Support for SDHCI on STMicroelectronics SoCs

 *

 * Copyright (C) 2014 STMicroelectronics Ltd

 * Author: Giuseppe Cavallaro <peppe.cavallaro@st.com>

 * Contributors: Peter Griffin <peter.griffin@linaro.org>

 *

 * Based on sdhci-cns3xxx.c

 MMCSS glue logic to setup the HC on some ST SoCs (e.g. STiH407 family) */

 I/O configuration for Arasan IP */

 TOP config registers to manage static and dynamic delay */

 MMC delay control register */

 register to provide the phase-shift value for DLL */

 phase shift delay on the tx clk 2.188ns */

/*

 * For clock speeds greater than 90MHz, we need to check that the

 * DLL procedure has finished before switching to ultra-speed modes.

/**

 * st_mmcss_cconfig: configure the Arasan HC inside the flashSS.

 * @np: dt device node.

 * @host: sdhci host

 * Description: this function is to configure the Arasan host controller.

 * On some ST SoCs, i.e. STiH407 family, the MMC devices inside a dedicated

 * flashSS sub-system which needs to be configured to be compliant to eMMC 4.5

 * or eMMC4.3.  This has to be done before registering the sdhci host.

	/* Set clock frequency, default to 50MHz if max-frequency is not

 CARD _D ET_CTRL */

 use 1.8V */

 Use tuning */

 Max timeout for retuning */

		/*

		 * SDR104 implies the HC can support HS200 mode, so

		 * it's mandatory to use 1.8V

 Max timeout for retuning */

 Checks if the DLL procedure is finished */

 Select Bus Speed Mode for host */

	/*

	 * Set V18_EN -- UHS modes do not work without this.

	 * does not change signaling voltage

 Support 3.3V and 1.8V */

 ICN clock isn't compulsory, but use it if it's provided. */

 Configure the FlashSS Top registers for setting eMMC TX/RX delay */

 Configure the Arasan HC inside the flashSS */

 SPDX-License-Identifier: GPL-2.0

/*

 * DMA support use of SYS DMAC with SDHI SD/SDIO controller

 *

 * Copyright (C) 2016-19 Renesas Electronics Corporation

 * Copyright (C) 2016-19 Sang Engineering, Wolfram Sang

 * Copyright (C) 2017 Horms Solutions, Simon Horman

 * Copyright (C) 2010-2011 Guennadi Liakhovetski

 Definitions for sampling clocks */

 The only sg element can be unaligned, use our bounce buffer then */

 DMA failed, fall back to PIO */

 Free the Tx channel too */

 The only sg element can be unaligned, use our bounce buffer then */

 DMA failed, fall back to PIO */

 Free the Rx channel too */

 We can only either use DMA for both Tx and Rx or not use it at all */

 SPDX-License-Identifier: GPL-2.0

/*

 * MMCIF eMMC driver.

 *

 * Copyright (C) 2010 Renesas Solutions Corp.

 * Yusuke Goda <yusuke.goda.sx@renesas.com>

/*

 * The MMCIF driver is now processing MMC requests asynchronously, according

 * to the Linux MMC API requirement.

 *

 * The MMCIF driver processes MMC requests in up to 3 stages: command, optional

 * data, and optional stop. To achieve asynchronous processing each of these

 * stages is split into two halves: a top and a bottom half. The top half

 * initialises the hardware, installs a timeout handler to handle completion

 * timeouts, and returns. In case of the command stage this immediately returns

 * control to the caller, leaving all further processing to run asynchronously.

 * All further request processing is performed by the bottom halves.

 *

 * The bottom half further consists of a "hard" IRQ handler, an IRQ handler

 * thread, a DMA completion callback, if DMA is used, a timeout work, and

 * request- and stage-specific handler methods.

 *

 * Each bottom half run begins with either a hardware interrupt, a DMA callback

 * invocation, or a timeout work run. In case of an error or a successful

 * processing completion, the MMC core is informed and the request processing is

 * finished. In case processing has to continue, i.e., if data has to be read

 * from or written to the card, or if a stop command has to be sent, the next

 * top half is called, which performs the necessary hardware handling and

 * reschedules the timeout work. This returns the driver state machine into the

 * bottom half waiting state.

 CE_CMD_SET */

 R1/R1b/R3/R4/R5 */

 R2 */

 R1b */

 1: on data, 0: no data */

 1: write, 0: read */

 1: multi block trans, 0: single */

 1: CMD12 auto issue */

 index check */

 check bits check */

 no check */

 CRC7 check*/

 check bits check*/

 internal CRC7 check*/

 0: CRC16 check*/

 1: not receive CRC status */

 1: tran mission bit "Low" */

 1: open/drain */

 Dual Data Rate */

 1bit */

 4bit */

 8bit */

 CE_CMD_CTRL */

 CE_BLOCK_SET */

 CE_INT */

 CE_INT_MASK */

 CE_HOST_STS1 */

 CE_HOST_STS2 */

 52 MHz */

 20 MHz */

 400 kHz */

/*

 * difference for each SoC

 protect sh_mmcif_host::state */

 Command Completion Signal support */

 see CE_CLK_CTRL::CLKDIV */

 DMA support */

 DMA failed, fall back to PIO */

 Free the Tx channel too */

 DMA failed, fall back to PIO */

 Free the Rx channel too */

 We can only either use DMA for both Tx and Rx or not use it at all */

 Descriptors are freed automatically */

			/*

			 * clk = parent_freq / div

			 * -> parent_freq = clk x div

 byte swap on */

 data->sg->length must be a multiple of host->blocksize? */

 buf read enable */

 buffer read end */

 buf write enable */

 buffer write end */

 Response Type check */

 WDAT / DATW */

			/*

			 * MMC core will only set this timing, if the host

			 * advertises the MMC_CAP_1_8V_DDR/MMC_CAP_1_2V_DDR

			 * capability. MMCIF implementations with this

			 * capability, e.g. sh73a0, will have to set it

			 * in their platform data.

 DWEN */

 CMLTE/CMD12EN */

 RIDXC[1:0] check bits */

 RCRC7C[1:0] check bits */

 RCRC7C[1:0] internal CRC7 */

 set arg */

 set cmd */

		/*

		 * This driver assumes this SoC is R-Car Gen2 or later

	/*

	 * Completion can be signalled from DMA callback and error, so, have to

	 * reset here, before setting .dma_active

 Running in the IRQ thread, can sleep */

 Woken up by an error IRQ: abort DMA */

 Abort DMA */

	/*

	 * All handlers return true, if processing continues, and false, if the

	 * request has to be completed - successfully or not

 We're too late, the timeout has already kicked in */

 Wait for data? */

 Wait for more data? */

 Wait for data end? */

 Wait data to write? */

 Wait for data end? */

 Wait for more data */

 Don't run after mmc_remove_host() */

	/*

	 * Handle races with cancel_delayed_work(), unless

	 * cancel_delayed_work_sync() is used

	/*

	 * FIXME: cancel_delayed_work(_sync)() and free_irq() race with the

	 * mmc_remove_host() call above. But swapping order doesn't help either

	 * (a query on the linux-mmc mailing list didn't bring any replies).

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Marvell Xenon SDHC as a platform device

 *

 * Copyright (C) 2016 Marvell, All Rights Reserved.

 *

 * Author:	Hu Ziji <huziji@marvell.com>

 * Date:	2016-8-24

 *

 * Inspired by Jisheng Zhang <jszhang@marvell.com>

 * Special thanks to Video BG4 project team.

 Wait max 20 ms */

 Set SDCLK-off-while-idle */

 Get the bit shift basing on the SDHC index */

 Enable/Disable the Auto Clock Gating function */

 Enable this SDHC */

	/*

	 * Force to clear BUS_TEST to

	 * skip bus_test_pre and bus_test_post

 Disable this SDHC */

 Enable Parallel Transfer Mode */

 Mask command conflict error */

 Disable the Re-Tuning Request functionality */

 Disable the Re-tuning Interrupt */

 Force to use Tuning Mode 1 */

 Set re-tuning period */

/*

 * Operations inside struct sdhci_ops

 Recover the Register Setting cleared during SOFTWARE_RESET_ALL */

 Only SOFTWARE RESET ALL will clear the register setting */

 Disable tuning request and auto-retuning again */

	/*

	 * The ACG should be turned off at the early init time, in order

	 * to solve a possible issues with the 1.8V regulator stabilization.

	 * The feature is enabled in later stage.

/*

 * Xenon defines different values for HS200 and HS400

 * in Host_Control_2

 Select Bus Speed Mode for host */

 Wait for 5ms after set 1.8V signal enable bit */

	/*

	 * For some reason the controller's Host Control2 register reports

	 * the bit representing 1.8V signaling as 0 when read after it was

	 * written as 1. Subsequent read reports 1.

	 *

	 * Since this may cause some issues, do an empty read of the Host

	 * Control2 register here to circumvent this.

/*

 * Xenon Specific Operations in mmc_host_ops

	/*

	 * HS400/HS200/eMMC HS doesn't have Preset Value register.

	 * However, sdhci_set_ios will read HS400/HS200 Preset register.

	 * Disable Preset Value register for HS400/HS200.

	 * eMMC HS with preset_enabled set will trigger a bug in

	 * get_preset_value().

	/*

	 * Before SD/SDIO set signal voltage, SD bus clock should be

	 * disabled. However, sdhci_set_clock will also disable the Internal

	 * clock in mmc_set_signal_voltage().

	 * If Internal clock is disabled, the 3.3V/1.8V bit can not be updated.

	 * Thus here manually enable internal clock.

	 *

	 * After switch completes, it is unnecessary to disable internal clock,

	 * since keeping internal clock active obeys SD spec.

	/*

	 * If Vqmmc is fixed on platform, vqmmc regulator should be unavailable.

	 * Thus SDHCI_CTRL_VDD_180 bit might not work then.

	 * Skip the standard voltage switch to avoid any issue.

/*

 * Update card type.

 * priv->init_card_type will be used in PHY timing adjustment.

 Update card type*/

	/*

	 * Currently force Xenon driver back to support mode 1 only,

	 * even though Xenon might claim to support mode 2 or mode 3.

	 * It requires more time to test mode 2/mode 3 on more platforms.

		/*

		 * Set SDIO Card Inserted indication

		 * to enable detecting SDIO async irq.

 Clear SDIO Card Inserted indication */

/*

 * Parse Xenon specific DT properties:

 * sdhc-id: the index of current SDHC.

 *	    Refer to XENON_SYS_CFG_INFO register

 * tun-count: the interval between re-tuning

 Disable HS200 on Armada AP806 */

 Enable SDHC */

 Enable ACG */

 Enable Parallel Transfer Mode */

 Disable SDCLK-Off-While-Idle before card init */

 disable SDHC */

	/*

	 * Link Xenon specific mmc_host_ops function,

	 * to replace standard ones in sdhci_ops.

 Xenon specific parameters parse */

	/*

	 * Need to update the priv->clock here, or when runtime resume

	 * back, phy don't aware the clock change and won't adjust phy

	 * which will cause cmd err

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Actions Semi Owl SoCs SD/MMC driver

 *

 * Copyright (c) 2014 Actions Semi Inc.

 * Copyright (c) 2019 Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>

 *

 * TODO: SDIO support

/*

 * SDC registers

 SD_EN Bits */

 SD_CTL Bits */

 SD_STATE Bits */

 Should never be NULL */

 Finally finish request */

 Keep current WDELAY and RDELAY */

 Start to send corresponding command type */

 Set LBE to send clk at the end of last read block */

 Start transfer */

 Set RDELAY and WDELAY based on the clock */

 DDR50 mode has special delay chain */

 Enable transfer end IRQ */

 Send init clk */

 Reset the SDC controller to clear all previous states */

 Enable DDR mode if requested */

 It is enough to change the pad ctrl bit for voltage switch */

 100kHz ~ 52MHz */

 sentinel */ }

/*

 * MOXA ART MMC host driver.

 *

 * Copyright (C) 2014 Jonas Jensen

 *

 * Jonas Jensen <jonas.jensen@gmail.com>

 *

 * Based on code from

 * Moxa Technologies Co., Ltd. <www.moxa.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 REG_COMMAND */

 REG_RESPONSE_COMMAND */

 REG_DATA_CONTROL */

 REG_DATA_LENGTH */

 REG_STATUS */

 1-10 below can be sent to either registers, interrupt or clear. */

 REG_POWER_CONTROL */

 REG_CLOCK_CONTROL */

 REG_BUS_WIDTH */

 SCR data must be read in big endian. */

 PIO transfers start from interrupt. */

 Support 2.0v - 3.6v power. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2016 Socionext Inc.

 *   Author: Masahiro Yamada <yamada.masahiro@socionext.com>

 HRS - Host Register Set (specific to Cadence) */

 PHY access port */

 eMMC control */

 SRS - Slot Register Set (SDHCI-compatible) */

 PHY */

/*

 * The tuned val register is 6 bit-wide, but not the whole of the range is

 * available.  The range 0-42 seems to be available (then 43 wraps around to 0)

 * but I am not quite sure if it is official.  Use only 0 to 39 for safety.

	/*

	 * Cadence's spec says the Timeout Clock Frequency is the same as the

	 * Base Clock Frequency.

 The speed mode for eMMC is selected by HRS06 register */

	/*

	 * Workaround for IP errata:

	 * The IP6116 SD/eMMC PHY design has a timing issue on receive data

	 * path. Send tune request twice.

/*

 * In SD mode, software must not use the hardware tuning and instead perform

 * an almost identical procedure to eMMC.

	/*

	 * Do not execute tuning for UHS_SDR50 or UHS_DDR50.

	 * The delay is set by probe, based on the DT properties.

 bad */

 good */

 For SD, fall back to the default handler */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0



 Copyright (C) 2017-2018 Socionext Inc.

   Author: Masahiro Yamada <yamada.masahiro@socionext.com>

 auto SDCLK stop

 3.3V signal

 1.8V signal

 1: inc, 0: fixed

 start DMA (auto cleared)

/*

 * IP is extended to support various features: built-in DMA engine,

 * 1/1024 divisor, etc.

 RX channel of the built-in DMA controller is broken (Pro5) */

 external DMA engine */

		/*

		 * When the external DMA engine is enabled, strangely enough,

		 * the DATAEND flag can be asserted even if the DMA engine has

		 * not been kicked yet.  Enable the TMIO_STAT_DATAEND irq only

		 * after we make sure the DMA engine finishes the transfer,

		 * hence, in this callback.

 just use PIO even for -EPROBE_DEFER */

 this driver uses a single channel for both RX an TX */

	/*

	 * Due to a hardware bug, Pro5 cannot use DMA for RX.

	 * We can still use DMA for TX, but PIO for RX.

 Each value is set to zero to assume "disabling" each DMA */

 If max-frequency property is set, use it. */

	/*

	 * 1/512 is the finest divisor in the original IP.  Newer versions

	 * also supports 1/1024 divisor. (UniPhier-specific extension)

 For eMMC, minimum is 1us but give it 9us for good measure */

 For eMMC, minimum is 200us but give it 300us for good measure */

 stop the clock before changing its rate to avoid a glitch signal */

	/*

	 * In the original IP, bit[7:0] represents the divisor.

	 * bit7 set: 1/512, ... bit0 set:1/4, all bits clear: 1/2

	 *

	 * The IP does not define a way to achieve 1/1.  For UniPhier variants,

	 * bit10 is used for 1/1.  Newer versions of UniPhier variants use

	 * bit16 for 1/1024.

	/*

	 * Connected to 32bit AXI.

	 * This register holds settings for SoC-specific internal bus

	 * connection.  What is worse, the register spec was changed,

	 * breaking the backward compatibility.  Write an appropriate

	 * value depending on a flag associated with a compatible string.

	/*

	 * If supported, the controller can automatically

	 * enable/disable the clock line to the card.

 old version has one more reset */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for sunxi SD/MMC host controllers

 * (C) Copyright 2007-2011 Reuuimlla Technology Co., Ltd.

 * (C) Copyright 2007-2011 Aaron Maoye <leafy.myeh@reuuimllatech.com>

 * (C) Copyright 2013-2014 O2S GmbH <www.o2s.ch>

 * (C) Copyright 2013-2014 David Lanzendörfer <david.lanzendoerfer@o2s.ch>

 * (C) Copyright 2013-2014 Hans de Goede <hdegoede@redhat.com>

 * (C) Copyright 2017 Sootech SA

 register offset definitions */

 SMC Global Control Register */

 SMC Clock Control Register */

 SMC Time Out Register */

 SMC Bus Width Register */

 SMC Block Size Register */

 SMC Byte Count Register */

 SMC Command Register */

 SMC Argument Register */

 SMC Response Register 0 */

 SMC Response Register 1 */

 SMC Response Register 2 */

 SMC Response Register 3 */

 SMC Interrupt Mask Register */

 SMC Masked Interrupt Status Register */

 SMC Raw Interrupt Status Register */

 SMC Status Register */

 SMC FIFO Threshold Watermark Registe */

 SMC Function Select Register */

 SMC CIU Byte Count Register */

 SMC BIU Byte Count Register */

 SMC Debug Enable Register */

 SMC Card Hardware Reset for Register */

 SMC IDMAC Control Register */

 SMC IDMAC Descriptor List Base Addre */

 SMC IDMAC Status Register */

 SMC IDMAC Interrupt Enable Register */

 New registers introduced in A64 */

 SMC Auto Command 12 Register */

 SMC New Timing Set Register */

 Drive Delay Control Register */

 SMC sample delay control */

 SMC data strobe delay control */

 global control register bits */

 clock control bits */

 bus width */

 smc command bits */

 interrupt bits */

 status */

 Function select */

 IDMA controller bus mod bit field */

 IDMA status bit field */

/*

* If the idma-des-size-bits of property is ie 13, bufsize bits are:

*  Bits  0-12: buf1 size

*  Bits 13-25: buf2 size

*  Bits 26-31: not used

* Since we only ever set buf1 size, we can simply store it directly.

 disable interrupt on completion */

 last descriptor */

 first descriptor */

 chain mode */

 end of ring */

 card error summary */

 1-idma owns it, 0-host owns it */

 in seconds, 3s is enough*/

 does the IP block support autocalibration? */

 Does DATA0 needs to be masked while the clock is updated */

	/*

	 * hardware only supports new timing mode, either due to lack of

	 * a mode switch in the clock controller, or the mmc controller

	 * is permanently configured in the new timing mode, without the

	 * NTSR mode switch.

 clock hardware can switch between old and new timing modes */

 IO mapping base */

 clock management */

 irq */

 dma */

 vqmmc */

 timings */

	/*

	 * Burst 8 transfers, RX trigger level: 7, TX trigger level: 8

	 *

	 * TODO: sun9i has a larger FIFO and supports higher trigger values

 Maximum timeout value */

 Unmask SDIO interrupt if needed */

 Clear all pending interrupts */

 Debug register? undocumented */

 Enable CEATA support */

 Set DMA descriptor list base address */

 Undocumented, but found in Allwinner code */

 0 == max_len */

	/*

	 * Avoid the io-store starting the idmac hitting io-mem before the

	 * descriptors hit the main-mem.

 For some cmds timeout is normal with sd/mmc cards */

 Called in interrupt context! */

 Wait for COMMAND_DONE on RESPONSE_TIMEOUT before finalize */

 Don't wait for dma on error */

	/*

	 * We will never have more than one outstanding request,

	 * and we do not complete the request until after

	 * we've cleared host->manual_stop_mrq so we do not need to

	 * spin lock this function.

	 * Additionally we have wait states within this function

	 * so having it in a lock is a very bad idea.

 clear irq status bits set by the command */

	/*

	 * FIXME:

	 * This is not clear how the calibration is supposed to work

	 * yet. The best rate have been obtained by simply setting the

	 * delay to 0, as Allwinner does in its BSP.

	 *

	 * The only mode that doesn't have such a delay is HS400, that

	 * is in itself a TODO.

 clk controller delays not used under new timings mode */

 some old controllers don't support delays */

 determine delays */

 Our clock is gated now */

	/*

	 * Under the old timing mode, 8 bit DDR requires the module

	 * clock to be double the card clock. Under the new timing

	 * mode, all DDR modes require a doubled module clock.

	 *

	 * We currently only support the standard MMC DDR52 mode.

	 * This block should be updated once support for other DDR

	 * modes is added.

 setting clock rate */

 set internal divider */

 update card clock rate to account for internal divider */

	/*

	 * Configure the controller to use the new timing mode if needed.

	 * On controllers that only support the new timing mode, such as

	 * the eMMC controller on the A64, this register does not exist,

	 * and any writes to it are ignored.

 Don't touch the delay bits */

 sunxi_mmc_clk_set_phase expects the actual card clock rate */

	/*

	 * FIXME:

	 *

	 * In HS400 we'll also need to calibrate the data strobe

	 * signal. This should only happen on the MMC2 controller (at

	 * least on the A64).

 And we just enabled our clock back */

 set ddr mode */

 Android code had a usleep_range(50000, 55000); here */

 vqmmc regulator is available */

 no vqmmc regulator, assume fixed regulator at 3/3.3V */

 Check for set_ios errors (should never happen) */

 Value from A83T "new timing mode". Works but might not be right. */

 sentinel */ }

	/*

	 * Sometimes the controller asserts the irq on boot for some reason,

	 * make sure the controller is in a sane state before enabling irqs.

		/*

		 * Supports both old and new timing modes.

		 * Try setting the clk to new timing mode.

 And check the result */

			/*

			 * For whatever reason we were not able to get

			 * the current active mode. Default to old mode.

 Supports new timing mode only */

 400kHz ~ 52MHz */

	/*

	 * Some H5 devices do not have signal traces precise enough to

	 * use HS DDR mode for their eMMC chips.

	 *

	 * We still enable HS DDR modes for all the other controller

	 * variants that support them.

	/*

	 * If we don't support delay chains in the SoC, we can't use any

	 * of the higher speed modes. Mask them out in case the device

	 * tree specifies the properties for them, which gets added to

	 * the caps by mmc_of_parse() above.

 TODO: This driver doesn't support HS400 mode yet */

	/*

	 * When clocks are off, it's possible receiving

	 * fake interrupts, which will stall the system.

	 * Disabling the irq  will prevent this.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  linux/drivers/mmc/host/wbsd.c - Winbond W83L51xD SD/MMC driver

 *

 *  Copyright (C) 2004-2007 Pierre Ossman, All Rights Reserved.

 *

 * Warning!

 *

 * Changes to the FIFO system should be done with extreme care since

 * the hardware is full of bugs related to the FIFO. Known issues are:

 *

 * - FIFO size field in FSR is always zero.

 *

 * - FIFO interrupts tend not to work as they should. Interrupts are

 *   triggered only for full/empty events, not for threshold values.

 *

 * - On APIC systems the FIFO empty interrupt is sometimes lost.

/*

 * Device resources

 CONFIG_PNP */

/*

 * Basic functions

/*

 * Common routines

	/*

	 * Reset chip (SD/MMC part) and fifo.

	/*

	 * Set DAT3 to input

	/*

	 * Read back default clock.

	/*

	 * Power down port.

	/*

	 * Set maximum timeout.

	/*

	 * Test for card presence

	/*

	 * Enable interesting interrupts.

	/*

	 * Clear interrupts.

	/*

	 * Soft reset of chip (SD/MMC part).

		/*

		 * Release ISA DMA controller.

		/*

		 * Disable DMA on host.

	/*

	 * MMC layer might call back into the driver so first unlock.

/*

 * Scatter/gather functions

	/*

	 * Get info. about SG list from data structure.

	/*

	 * Skip to next SG entry.

	/*

	 * Any entries left?

/*

 * Command handling

	/*

	 * Correct response type?

	/*

	 * Correct response type?

	/*

	 * Clear accumulated ISR. The interrupt routine

	 * will fill this one with events that occur during

	 * transfer.

	/*

	 * Send the command (CRC calculated by host).

	/*

	 * Wait for the request to complete.

	/*

	 * Do we expect a reply?

		/*

		 * Read back status.

 Card removed? */

 Timeout? */

 CRC? */

 All ok */

/*

 * Data functions

	/*

	 * Handle excessive data.

	/*

	 * Drain the fifo. This has a tendency to loop longer

	 * than the FIFO length (usually one block).

		/*

		 * The size field in the FSR is broken so we have to

		 * do some guessing.

			/*

			 * End of scatter list entry?

				/*

				 * Get next entry. Check if last.

	/*

	 * This is a very dirty hack to solve a

	 * hardware problem. The chip doesn't trigger

	 * FIFO threshold interrupts properly.

	/*

	 * Check that we aren't being called after the

	 * entire buffer has been transferred.

	/*

	 * Fill the fifo. This has a tendency to loop longer

	 * than the FIFO length (usually one block).

		/*

		 * The size field in the FSR is broken so we have to

		 * do some guessing.

			/*

			 * End of scatter list entry?

				/*

				 * Get next entry. Check if last.

	/*

	 * The controller stops sending interrupts for

	 * 'FIFO empty' under certain conditions. So we

	 * need to be a bit more pro-active.

	/*

	 * Calculate size.

	/*

	 * Check timeout values for overflow.

	 * (Yes, some cards cause this value to overflow).

	/*

	 * Inform the chip of how large blocks will be

	 * sent. It needs this to determine when to

	 * calculate CRC.

	 *

	 * Space for CRC must be included in the size.

	 * Two bytes are needed for each data line.

	/*

	 * Clear the FIFO. This is needed even for DMA

	 * transfers since the chip still uses the FIFO

	 * internally.

	/*

	 * DMA transfer?

		/*

		 * The buffer for DMA is only 64 kB.

		/*

		 * Transfer data from the SG list to

		 * the DMA buffer.

		/*

		 * Initialise the ISA DMA controller.

		/*

		 * Enable DMA on the host.

		/*

		 * This flag is used to keep printk

		 * output to a minimum.

		/*

		 * Initialise the SG list.

		/*

		 * Turn off DMA.

		/*

		 * Set up FIFO threshold levels (and fill

		 * buffer if doing a write).

	/*

	 * Send a stop command if needed.

	/*

	 * Wait for the controller to leave data

	 * transfer state.

	/*

	 * DMA transfer?

		/*

		 * Disable DMA on the host.

		/*

		 * Turn of ISA DMA controller.

		/*

		 * Any leftover data?

			/*

			 * Transfer data from DMA buffer to

			 * SG list.

/*****************************************************************************\

 *                                                                           *

 * MMC layer callbacks                                                       *

 *                                                                           *

	/*

	 * Disable tasklets to avoid a deadlock.

	/*

	 * Check that there is actually a card in the slot.

		/*

		 * The hardware is so delightfully stupid that it has a list

		 * of "data" commands. If a command isn't on this list, it'll

		 * just go back to the idle state and won't send any data

		 * interrupts.

		/* ACMDs. We don't keep track of state, so we just treat them

	/*

	 * Does the request include data?

	/*

	 * If this is a data transfer the request

	 * will be finished after the data has

	 * transferred.

		/*

		 * Dirty fix for hardware bug.

	/*

	 * Reset the chip on each power off.

	 * Should clear out any weird states.

	/*

	 * Only write to the clock register when

	 * there is an actual change.

	/*

	 * Power up card.

	/*

	 * MMC cards need to have pin 1 high during init.

	 * It wreaks havoc with the card detection though so

	 * that needs to be disabled.

			/*

			 * We cannot resume card detection immediately

			 * because of capacitance and delays in the chip.

	/*

	 * Store bus width for later. Will be used when

	 * setting up the data transfer.

/*****************************************************************************\

 *                                                                           *

 * Interrupt handling                                                        *

 *                                                                           *

/*

 * Helper function to reset detection ignore

	/*

	 * Card status might have changed during the

	 * blackout.

/*

 * Tasklets

	/*

	 * Unlock first since we might get a call back.

	/*

	 * Done?

/*

 * Interrupt handling

	/*

	 * Was it actually our hardware that caused the interrupt?

	/*

	 * Schedule tasklets as needed.

/*****************************************************************************\

 *                                                                           *

 * Device initialisation and shutdown                                        *

 *                                                                           *

/*

 * Allocate/free MMC structure.

	/*

	 * Allocate MMC structure.

	/*

	 * Set host parameters.

	/*

	 * Set up timers

	/*

	 * Maximum number of segments. Worst case is one sector per segment

	 * so this will be 64kB/512.

	/*

	 * Maximum request size. Also limited by 64KiB buffer.

	/*

	 * Maximum segment size. Could be one segment with the maximum number

	 * of bytes.

	/*

	 * Maximum block size. We have 12 bits (= 4095) but have to subtract

	 * space for CRC. So the maximum is 4095 - 4*2 = 4087.

	/*

	 * Maximum block count. There is no real limit so the maximum

	 * request size will be the only restriction.

/*

 * Scan for known chip id:s

	/*

	 * Iterate through all ports, all codes to

	 * find hardware that is in our known list.

/*

 * Allocate/free io port ranges

/*

 * Allocate/free DMA port and buffer

	/*

	 * We need to allocate a special buffer in

	 * order for ISA to be able to DMA to it.

	/*

	 * Translate the address to a physical address.

	/*

	 * ISA DMA must be aligned on a 64k basis.

	/*

	 * ISA cannot access memory above 16 MB.

	/*

	 * If we've gotten here then there is some kind of alignment bug

	/*

	 * host->dma_addr is valid here iff host->dma_buffer is not NULL.

/*

 * Allocate/free IRQ.

	/*

	 * Set up tasklets. Must be done before requesting interrupt.

	/*

	 * Allocate interrupt.

/*

 * Allocate all resources for the host.

	/*

	 * Allocate I/O ports.

	/*

	 * Allocate interrupt.

	/*

	 * Allocate DMA.

/*

 * Release all resources for the host.

/*

 * Configure the resources the chip should use.

	/*

	 * Reset the chip.

	/*

	 * Select SD/MMC function.

	/*

	 * Set up card detection.

	/*

	 * Configure chip

	/*

	 * Enable and power up chip.

/*

 * Check that configured resources are correct.

	/*

	 * Select SD/MMC function.

	/*

	 * Read configuration.

	/*

	 * Validate against given configuration.

/*

 * Powers down the SD function

/*****************************************************************************\

 *                                                                           *

 * Devices setup and shutdown                                                *

 *                                                                           *

	/*

	 * Scan for hardware.

	/*

	 * Request resources.

	/*

	 * See if chip needs to be configured.

	/*

	 * Power Management stuff. No idea how this works.

	 * Not tested.

	/*

	 * Allow device to initialise itself properly.

	/*

	 * Reset the chip into a known state.

	/*

	 * Power down the SD/MMC function.

/*

 * Non-PnP

 Use the module parameters for resources */

/*

 * PnP

	/*

	 * Get resources from PnP layer.

 CONFIG_PNP */

/*

 * Power management

	/*

	 * Allow device to initialise itself properly.

	/*

	 * See if chip needs to be configured.

	/*

	 * Allow device to initialise itself properly.

 CONFIG_PNP */

 CONFIG_PM */

 CONFIG_PM */

 CONFIG_PNP */

/*

 * Module loading/unloading

 CONFIG_PNP */

 CONFIG_PNP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Synopsys DesignWare Multimedia Card Interface driver

 *

 * Copyright (C) 2009 NXP Semiconductors

 * Copyright (C) 2009, 2010 Imagination Technologies Ltd.

 Get registers' physical base address */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2013-2014 Renesas Electronics Europe Ltd.

 * Author: Guennadi Liakhovetski <g.liakhovetski@gmx.de>

 Also R5, R6, R7 */

 R1b */

 Also R4 */

 mapped page */

 SG memory handling */

 Common for multiple and single block requests */

 current page from an SG */

 either a mapped page, or the bounce buffer */

 offset within a page, including sg->offset */

 Blocks, crossing a page boundary */

 A bounce buffer for unaligned blocks or blocks, crossing a page boundary */

 Multiple block requests only */

 current SG segment */

 page index within an SG segment */

 Timeout handling */

 DMA support */

 Pin control */

			I/O primitives					*/

 Mask all except card hotplug */

 Response timeout is often normal, don't spam the log */

			Scatter-Gather management			*/

/*

 * In PIO mode we have to map each page separately, using kmap(). That way

 * adjacent pages are mapped to non-adjacent virtual addresses. That's why we

 * have to use a bounce buffer for blocks, crossing page boundaries. Such blocks

 * have been observed with an SDIO WiFi card (b43 driver).

 Only called for multiple block IO */

 TODO: if we always map, this is redundant */

 Map the first page in an SG segment: common for multiple and single block IO */

	/*

	 * Block size must be a power of 2 for multi-block transfers,

	 * therefore blk_head is equal for all pages in this SG

		/*

		 * The first block in the SG crosses a page boundary.

		 * Max blksz = 512, so blocks can only span 2 pages

 Unmap the current page: common for multiple and single block IO */

 Previous block was cross-page boundary */

 More blocks in this SG, don't unmap the next page */

 Called from MMC_WRITE_MULTIPLE_BLOCK or MMC_READ_MULTIPLE_BLOCK */

 New offset: set at the end of the previous block */

 Finished a cross-page block, jump to the new page */

 The completed block didn't cross a page boundary */

 If required, we'll map the page below */

	/*

	 * Now host->blk_page + host->offset point at the end of our last block

	 * and host->page_idx is the index of the page, in which our new block

	 * is located, if any

 More blocks in this page */

 We approached at a block, that spans 2 pages */

 Finished current page or an SG segment */

		/*

		 * End of an SG segment or the complete SG: jump to the next

		 * segment, we'll map it later in usdhi6_blk_read() or

		 * usdhi6_blk_write()

 We cannot get here after crossing a page border */

 Next page in the same SG */

			DMA handling					*/

 DMA failed, fall back to PIO */

 Abort DMA */

	/*

	 * The datasheet tells us to check a response from the card, whereas

	 * responses only come after the command phase, not after the data

	 * phase. Let's check anyway.

 128 words * 4 bytes = 512 bytes */

 128 words * 4 bytes = 512 bytes */

			API helpers					*/

 Cannot have 1-to-1 clock in DDR mode */

	/*

	 * if old or new rate is equal to input rate, have to switch the clock

	 * off before changing and on after

 Errors ignored... */

		/*

		 * We only also touch USDHI6_SD_OPTION from .request(), which

		 * cannot race with MMC_POWER_UP

		/*

		 * The eMMC standard only allows 4 or 8 bits in the DDR mode,

		 * the same probably holds for SD cards. We check here anyway,

		 * since the datasheet explicitly requires 4 bits for DDR.

 This is data timeout. Response timeout is fixed to 640 clock cycles */

 Max timeout */

 Min timeout */

 Timeout Counter mask: 0xf0 */

 Disable DMA */

 Enable DMA for USDHI6_MIN_DMA bytes or more */

 We have to get a command completion interrupt with DMA too */

 SEC bit is required to enable block counting by the core */

 Kick command execution */

 Read is atomic, no need to lock */

/*

 *	level	status.CD	CD_ACTIVE_HIGH	card present

 *	1	0		0		0

 *	1	0		1		1

 *	0	1		0		1

 *	0	1		1		0

 No locking as above */

/*

 *	level	status.WP	RO_ACTIVE_HIGH	card read-only

 *	1	0		0		0

 *	1	0		1		1

 *	0	1		0		1

 *	0	1		1		0

 Card is busy if it is pulling dat[0] low */

			State machine handlers				*/

/*

 * RSP10	39-8

 * RSP32	71-40

 * RSP54	103-72

 * RSP76	127-104

 * R2-type response:

 * resp[0]	= r[127..96]

 * resp[1]	= r[95..64]

 * resp[2]	= r[63..32]

 * resp[3]	= r[31..0]

 * Other responses:

 * resp[0]	= r[39..8]

 Read RSP54 to avoid conflict with auto CMD12 */

 Unsupported STOP command */

 ACCESS_END IRQ is already unmasked */

	/*

	 * Have to force unmapping both pages: the single block could have been

	 * cross-page, in which case for single-block IO host->page_idx == 0.

	 * So, if we don't force, the second page won't be unmapped.

 See comment in usdhi6_read_block() */

			Interrupt & timeout handlers			*/

 We're too late, the timeout has already kicked in */

 Wait for data? */

 Wait for more data? */

 Wait for data end? */

 Wait data to write? */

 Wait for data end? */

 Wait for more data or ACCESS_END */

 Sending STOP */

 Data error: might need to unmap the last page */

 Ack / clear interrupts */

 In error cases BWE and BRE aren't cleared automatically */

 Don't pollute the log with unsupported command timeouts */

 We're only interested in hotplug events here */

 Ack */

/*

 * Actually this should not be needed, if the built-in timeout works reliably in

 * the both PIO cases and DMA never fails. But if DMA does fail, a timeout

 * handler might be the only way to catch the error.

 mrq can be NULL, but is impossible */

 page unmapped in USDHI6_WAIT_FOR_DATA_END */

			 Probe / release				*/

	/*

	 * We use a fixed timeout of 4s, hence inform the core about it. A

	 * future improvement should instead respect the cmd->busy_timeout.

 Set .max_segs to some random number. Feel free to adjust. */

	/*

	 * Setting .max_seg_size to 1 page would simplify our page-mapping code,

	 * But OTOH, having large segments makes DMA more efficient. We could

	 * check, whether we managed to get DMA and fall back to 1 page

	 * segments, but if we do manage to obtain DMA and then it fails at

	 * run-time and we fall back to PIO, we will continue getting large

	 * segments. So, we wouldn't be able to get rid of the code anyway.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * drivers/mmc/host/sdhci-of-sparx5.c

 *

 * MCHP Sparx5 SoC Secure Digital Host Controller Interface.

 *

 * Copyright (c) 2019 Microchip Inc.

 *

 * Author: Lars Povlsen <lars.povlsen@microchip.com>

 Off 0x140, reg 0x0 */

 Off 0x140, reg 0x1 */

 Off 0x140, reg 0xB */

/*

 * If DMA addr spans 128MB boundary, we split the DMA transfer into two

 * so that each DMA transfer doesn't exceed the boundary.

 Update ACP caching attributes in HW */

 Update DLY_CC in HW */

 For eMMC, minimum is 1us but give it 10us for good measure */

 For eMMC, minimum is 200us but give it 300us for good measure */

 Be sure CARD_IS_EMMC stays set */

 Controller issue */

 No sdr104, ddr50, etc */

	/*

	 * extra adma table cnt for cross 128M boundary handling.

 Do a HW reset of eMMC card */

 Update EMMC_CTRL */

 If eMMC, disable SD and SDIO */

 Set AXI bus master to use un-cached access (for DMA) */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * sdhci-brcmstb.c Support for SDHCI on Broadcom BRCMSTB SoC's

 *

 * Copyright (C) 2015 Broadcom Corporation

 Select Bus Speed Mode for host */

 Non-standard */

 Map in the non-standard CFG registers */

	/*

	 * If the chip has enhanced strobe and it's enabled, add

	 * callback

	/*

	 * Supply the existing CAPS, but clear the UHS modes. This

	 * will allow these modes to be specified by device tree

	 * properties through mmc_of_parse().

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/mmc/host/au1xmmc.c - AU1XX0 MMC driver

 *

 *  Copyright (c) 2005, Advanced Micro Devices, Inc.

 *

 *  Developed with help from the 2.4.30 MMC AU1XXX controller including

 *  the following copyright notices:

 *     Copyright (c) 2003-2004 Embedded Edge, LLC.

 *     Portions Copyright (C) 2002 Embedix, Inc

 *     Copyright 2002 Hewlett-Packard Company



 *  2.6 version of this driver inspired by:

 *     (drivers/mmc/wbsd.c) Copyright (C) 2004-2005 Pierre Ossman,

 *     All Rights Reserved.

 *     (drivers/mmc/pxa.c) Copyright (C) 2003 Russell King,

 *     All Rights Reserved.

 *



/* Why don't we use the SD controllers' carddetect feature?

 *

 * From the AU1100 MMC application guide:

 * If the Au1100-based design is intended to support both MultiMediaCards

 * and 1- or 4-data bit SecureDigital cards, then the solution is to

 * connect a weak (560KOhm) pull-up resistor to connector pin 1.

 * In doing so, a MMC card never enters SPI-mode communications,

 * but now the SecureDigital card-detect feature of CD/DAT3 is ineffective

 * (the low to high transition will not occur).

 Set this to enable special debugging macros */

 #define DEBUG */

 Hardware definitions */

 max DMA seg size: 64KB on Au1100, 4MB on Au1200 */

/* This gives us a hard value for the stop command that we can write directly

 * to the command register.

 This is the set of interrupts that we configure by default. */

 The poll event (looking for insert/remove events runs twice a second. */

 Status flags used by the host structure */

 Easy access macros */

 drain writebuffer */

 drain writebuffer */

 SEND_STOP will turn off clock control - this re-enables it */

 drain writebuffer */

 drain writebuffer */

 drain writebuffer */

 Send the stop command */

 drain writebuffer */

 drain writebuffer */

 drain writebuffer */

 Wait for the command to go on the line */

 nop */;

 The transaction is really over when the SD_STATUS_DB bit is clear */

 Process any errors */

 Clear the CRC bits */

 This is the pointer to the data buffer */

 This is the space left inside the buffer */

 Check if we need less than the size of the sg_buffer */

 drain writebuffer */

 This is the space left inside the buffer */

 Check if we need less than the size of the sg_buffer */

 IRQ_OFF(host, SD_CONFIG_RA | SD_CONFIG_RF); */

/* This is called when a command has been completed - grab the response

 * and check for errors.  Then start the data transfer if it is indicated.

			/* The CRC is omitted from the response, so really

			 * we only got 120 bytes, but the engine expects

			 * 128 bits, so we have to shift things up.

			/* Techincally, we should be getting all 48 bits of

			 * the response (SD_RESP1 + SD_RESP2), but because

			 * our response omits the CRC, our data ends up

			 * being shifted 8 bits to the right.  In this case,

			 * that means that the OSR data starts at bit 31,

			 * so we can just read RESP0 and return that.

 Figure out errors */

 Start the DBDMA as soon as the buffer gets something in it */

 drain writebuffer */

 IRQ_ON(host, SD_CONFIG_RA | SD_CONFIG_RF); */

 This actually starts a command or data transaction */

 fail request immediately if no card is present */

 Apply the clock */

 drain writebuffer */

 drain writebuffer */

 drain writebuffer */

 drain writebuffer */

 drain writebuffer */

 drain writebuffer */

 drain writebuffer */

 Configure interrupts */

 drain writebuffer */

 drain writebuffer */

 not ours */

 SDIO */

 In PIO mode, interrupts might still be enabled */

 IRQ_OFF(host, SD_CONFIG_TH | SD_CONFIG_RA | SD_CONFIG_RF); */

 Sometimes we get a DD before a NE in PIO mode */

 tasklet_schedule(&host->data_task); */

 drain writebuffer */

 8bit memory DMA device */

 Avoid spurious interrupts */

 DBDMA is good to go */

 Au1100/Au1200: one int for both ctrls */

 nothing is shared */

 board-specific carddetect setup, if any */

 platform may not be able to use all advertised caps */

 all ok */

 drain writebuffer */

 drain writebuffer */

 drain writebuffer */

		/* DSCR_CMD0_ALWAYS has a stride of 32 bits, we need a stride

		* of 8 bits.  And since devices are shared, we need to create

		* our own to avoid freaking out other devices.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  linux/drivers/mmc/host/sdhci.c - Secure Digital Host Controller Interface driver

 *

 *  Copyright (C) 2005-2008 Pierre Ossman, All Rights Reserved.

 *

 * Thanks to the following companies for their support:

 *

 *     - JMicron (hardware and technical support)

/*****************************************************************************\

 *                                                                           *

 * Low level functions                                                       *

 *                                                                           *

/*

 * This can be called before sdhci_add_host() by Vendor's host controller

 * driver to enable v4 mode if supported.

 Reset-all turns off SD Bus Power */

 Wait max 100 ms */

 hw clears the bit when it's done */

 Resetting the controller clears many */

	/*

	 * Always adjust the DMA selection as some controllers

	 * (e.g. JMicron) can't do PIO properly when the selection

	 * is ADMA.

 Note if DMA Select is zero then SDMA is selected */

		/*

		 * If v4 mode, all supported DMA can be 64-bit addressing if

		 * controller supports 64-bit system address, otherwise only

		 * ADMA can support 64-bit addressing.

			/*

			 * Don't need to undo SDHCI_CTRL_ADMA32 in order to

			 * set SDHCI_CTRL_ADMA64.

 force clock reconfiguration */

	/*

	 * A change to the card detect bits indicates a change in present state,

	 * refer sdhci_set_card_detection(). A card detect interrupt might have

	 * been missed while the host controller was being reset, so trigger a

	 * rescan to check.

/*****************************************************************************\

 *                                                                           *

 * Core functions                                                            *

 *                                                                           *

	/*

	 * Some controllers (JMicron JMB38x) mess up the buffer bits

	 * for transfers < 4 bytes. As long as it is just one block,

	 * we can ignore the bits.

	/*

	 * If the data buffers are already mapped, return the previous

	 * dma_map_sg() result.

 Bounce write requests to the bounce buffer */

 Copy the data to the bounce buffer */

 Switch ownership to the DMA */

 Just a dummy value */

 Just access the data directly from memory */

 32-bit and 64-bit descriptors have these members in same position */

 32-bit and 64-bit descriptors have 'cmd' in same position */

	/*

	 * The spec does not specify endianness of descriptor table.

	 * We currently guess that it is LE.

		/*

		 * The SDHCI specification states that ADMA addresses must

		 * be 32-bit aligned. If they aren't, then we use a bounce

		 * buffer for the (up to three) bytes that screw up the

		 * alignment.

 tran, valid */

 tran, valid */

		/*

		 * If this triggers then we have a calculation bug

		 * somewhere. :/

 Mark the last descriptor as the terminating descriptor */

 Add a terminating entry - nop, end, valid */

 Do a quick scan of the SG list for any unaligned mappings */

 timeout in us */

			/*

			 * data->timeout_clks is in units of clock cycles.

			 * host->clock is in Hz.  target_timeout is in us.

			 * Hence, us = 1000000 * cycles / Hz.  Round up.

 multiply by '2' to account for any unknowns */

 calculate timeout for the entire data */

	/*

	 * If the host controller provides us with an incorrect timeout

	 * value, just skip the check and use the maximum. The hardware may take

	 * longer to time out, but that's much better than having a too-short

	 * timeout value.

 Unspecified command, assume max */

 Unspecified timeout, assume max */

 timeout in us */

	/*

	 * Figure out needed cycles.

	 * We do this in steps in order to fit inside a 32 bit int.

	 * The first step is the minimum timeout, which will have a

	 * minimum resolution of 6 bits:

	 * (1) 2^13*1000 > 2^22,

	 * (2) host->timeout_clk < 2^16

	 *     =>

	 *     (1) / (2) > 2^6

 Sanity checks */

 Set the DMA boundary value and block size */

	/*

	 * For Version 4.10 onwards, if v4 mode is enabled, 32-bit Block Count

	 * can be supported, in that case 16-bit block count register must be 0.

		/*

		 * FIXME: This doesn't account for merging when mapping the

		 * scatterlist.

		 *

		 * The assumption here being that alignment and lengths are

		 * the same after DMA mapping to device address space.

				/*

				 * As we use up to 3 byte chunks to work

				 * around alignment problems, we need to

				 * check the offset as well.

			/*

			 * This only happens when someone fed

			 * us an invalid request.

 Sanity check: all the SG entries must be aligned by block size. */

 This should never happen */

	/*

	 * In case of Version 4.10 or later, use of 'Auto CMD Auto

	 * Select' is recommended rather than use of 'Auto CMD12

	 * Enable' or 'Auto CMD23 Enable'. We require Version 4 Mode

	 * here because some controllers (e.g sdhci-of-dwmshc) expect it.

	/*

	 * If we are sending CMD23, CMD12 never gets sent

	 * on successful completion (so no Auto-CMD12).

 must not clear SDHCI_TRANSFER_MODE when tuning */

 clear Auto CMD settings for no data CMDs */

	/*

	 * The controller needs a reset of internal state machines upon error

	 * conditions.

	/*

	 * The specification states that the block count register must

	 * be updated, but it does not specify at what point in the

	 * data flow. That makes the register entirely useless to read

	 * back so we have to assume that nothing made it to the card

	 * in the event of an error.

	/*

	 * Need to send CMD12 if -

	 * a) open-ended multiblock transfer not using auto CMD12 (no CMD23)

	 * b) error in multiblock transfer

		/*

		 * 'cap_cmd_during_tfr' request must not use the command line

		 * after mmc_command_done() has been called. It is upper layer's

		 * responsibility to send the stop command if required.

 Avoid triggering warning in sdhci_send_command() */

					/*

					 * This is anyway a sw data timeout, so

					 * give up now.

 Initially, a command has no error */

	/* We shouldn't wait for data inihibit for stop commands, even

		/*

		 * This does not happen in practice because 136-bit response

		 * commands never have busy waiting, so rather than complicate

		 * the error path, just remove busy waiting and continue.

 CMD19 is special in that the Data Present Select should be set */

 Approx. 10 ms */

 A deferred command might disappear, handle that */

 CRC is stripped so we need to do some shifting */

	/*

	 * The host can send and interrupt when the busy state has

	 * ended, allowing us to wait without wasting CPU cycles.

	 * The busy signal uses DAT0 so this is similar to waiting

	 * for data to complete.

	 *

	 * Note: The 1.0 specification is a bit ambiguous about this

	 *       feature so there might be some problems with older

	 *       controllers.

 Command complete before busy is ended */

 Finished CMD23, now send actual command. */

 Processed actual command. */

 Initialized for compiler warning */

		/*

		 * Check if the Host Controller supports Programmable Clock

		 * Mode.

				/*

				 * Set Programmable Clock Mode in the Clock

				 * Control register.

				/*

				 * Divisor can be too small to reach clock

				 * speed requirement. Then use the base clock.

 Version 3.00 divisors must be a multiple of 2. */

 Version 2.00 divisors must be a power of 2. */

 Wait max 150 ms */

 Wait max 150 ms */

		/*

		 * Without a regulator, SDHCI does not support 2.0v

		 * so we only get here if the driver deliberately

		 * added the 2.0v range to ocr_avail. Map it to 1.8v

		 * for the purpose of turning on the power.

		/*

		 * 3.4 ~ 3.6V are valid only for those platforms where it's

		 * known that the voltage range is supported by hardware.

		/*

		 * Spec says that we should clear the power reg before setting

		 * a new value. Some controllers don't seem to like this though.

		/*

		 * At least the Marvell CaFe chip gets confused if we set the

		 * voltage and set turn on power at the same time, so set the

		 * voltage first.

		/*

		 * Some controllers need an extra 10ms delay of 10ms before

		 * they can apply clock after applying power

/*

 * Some controllers need to configure a valid bus voltage on their power

 * register regardless of whether an external regulator is taking care of power

 * supply. This helper function takes care of it if set as the controller's

 * sdhci_ops.set_power callback.

/*****************************************************************************\

 *                                                                           *

 * MMC callbacks                                                             *

 *                                                                           *

 Firstly check card presence */

	/*

	 * The HSQ may send a command in interrupt context without polling

	 * the busy signaling, which means we should return BUSY if controller

	 * has not released inhibit bits to allow HSQ trying to send request

	 * again in non-atomic context. So we should not finish this request

	 * here.

 Select Bus Speed Mode for host */

 Non-standard */

	/*

	 * Reset the chip on each power off.

	 * Should clear out any weird states.

			/*

			 * We only need to set Driver Strength if the

			 * preset value enable is not set.

			/*

			 * According to SDHC Spec v3.00, if the Preset Value

			 * Enable in the Host Control 2 register is set, we

			 * need to reset SD Clock Enable before changing High

			 * Speed Enable to avoid generating clock gliches.

 Reset SD Clock Enable */

 Re-enable SD Clock */

 Reset SD Clock Enable */

 Re-enable SD Clock */

	/*

	 * Some (ENE) controllers go apeshit on some ios operation,

	 * signalling timeout and CRC errors even on CMD0. Resetting

	 * it on each ios seems to solve the problem.

 If nonremovable, assume that the card is always present. */

	/*

	 * Try slot gpio detect, if defined it take precedence

	 * over build in controller functionality

 If polling, assume that the card is always present. */

 Host native card detect */

 This quirk needs to be replaced by a callback-function later */

	/*

	 * Signal Voltage Switching is only applicable for Host Controllers

	 * v3.00 and above.

 Set 1.8V Signal Enable in the Host Control2 register to 0 */

 Wait for 5ms */

 3.3V regulator output should be stable within 5 ms */

		/*

		 * Enable 1.8V Signal Enable in the Host Control2

		 * register

 Some controller need to do more when switching */

 1.8V regulator output should be stable within 5 ms */

 No signal voltage switch required */

 Check whether DAT[0] is 0 */

	/*

	 * As per the Host Controller spec v3.00, tuning command

	 * generates Buffer Read Ready interrupt, so enable that.

	 *

	 * Note: The spec clearly says that when tuning sequence

	 * is being performed, the controller does not generate

	 * interrupts other than Buffer Read Ready interrupt. But

	 * to make sure we don't hit a controller bug, we _only_

	 * enable Buffer Read Ready interrupt here.

/*

 * We use sdhci_send_tuning() because mmc_send_tuning() is not a good fit. SDHCI

 * tuning command does not have a data payload (or rather the hardware does it

 * automatically) so mmc_send_tuning() will return -EIO. Also the tuning command

 * interrupt setup is different to other commands and there is no timeout

 * interrupt so special handling is needed.

	/*

	 * In response to CMD19, the card sends 64 bytes of tuning

	 * block to the Host Controller. So we set the block size

	 * to 64 here.

	/*

	 * The tuning block is sent by the card to the host controller.

	 * So we set the TRNS_READ bit in the Transfer Mode register.

	 * This also takes care of setting DMA Enable and Multi Block

	 * Select in the same register to 0.

 Wait for Buffer Read Ready interrupt */

	/*

	 * Issue opcode repeatedly till Execute Tuning is set to 0 or the number

	 * of loops reaches tuning loop count.

 Spec does not require a delay between tuning cycles */

 Success! */

	/*

	 * The Host Controller needs tuning in case of SDR104 and DDR50

	 * mode, and for SDR50 mode when Use Tuning for SDR50 is set in

	 * the Capabilities register.

	 * If the Host Controller supports the HS200 mode then the

	 * tuning function has to be executed.

 HS400 tuning is done in HS200 mode */

		/*

		 * Periodic re-tuning for HS400 is not expected to be needed, so

		 * disable it here.

 Host Controller v3.00 defines preset value registers */

	/*

	 * We only enable or disable Preset Value if they are not already

	 * enabled or disabled respectively. Otherwise, we bail out.

	/*

	 * No pre-mapping in the pre hook if we're using the bounce buffer,

	 * for that we would need two bounce buffers since one buffer is

	 * in flight when this is getting called.

 First check if client has provided their own card event */

 Check sdhci_has_requests() first in case we are runtime suspended */

/*****************************************************************************\

 *                                                                           *

 * Request done                                                              *

 *                                                                           *

	/*

	 * The controller needs a reset of internal state machines

	 * upon error conditions.

		/*

		 * Do not finish until command and data lines are available for

		 * reset. Note there can only be one other mrq, so it cannot

		 * also be in mrqs_done, otherwise host->cmd and host->data_cmd

		 * would both be null.

 Some controllers need this kick or reset won't work here */

 This is to force an update */

		/*

		 * Spec says we should do both at the same time, but Ricoh

		 * controllers do not like that.

	/*

	 * Always unmap the data buffers if they were mapped by

	 * sdhci_prepare_data() whenever we finish with a request.

	 * This avoids leaking DMA mappings on error.

				/*

				 * On reads, copy the bounced data into the

				 * sglist

 Cap it down and continue */

 No copying, just switch ownership */

 Unmap the raw data */

/*****************************************************************************\

 *                                                                           *

 * Interrupt handling                                                        *

 *                                                                           *

 Handle auto-CMD12 error */

 Treat auto-CMD12 error the same as data error */

		/*

		 * SDHCI recovers from errors by resetting the cmd and data

		 * circuits.  Until that is done, there very well might be more

		 * interrupts, so ignore them in that case.

 Treat data command CRC error the same as data CRC error */

 Handle auto-CMD23 error */

	/*

	 * CMD19 generates _only_ Buffer Read Ready interrupt if

	 * use sdhci_send_tuning.

	 * Need to exclude this case: PIO mode and use mmc_send_tuning,

	 * If not, sdhci_transfer_pio will never be called, make the

	 * SDHCI_INT_DATA_AVAIL always there, stuck in irq storm.

		/*

		 * The "data complete" interrupt is also used to

		 * indicate that a busy state has ended. See comment

		 * above in sdhci_cmd_irq().

				/*

				 * Some cards handle busy-end interrupt

				 * before the command completed, so make

				 * sure we do things in the proper order.

		/*

		 * SDHCI recovers from errors by resetting the cmd and data

		 * circuits. Until that is done, there very well might be more

		 * interrupts, so ignore them in that case.

		/*

		 * We currently don't do anything fancy with DMA

		 * boundaries, but as we can't disable the feature

		 * we need to at least restart the transfer.

		 *

		 * According to the spec sdhci_readl(host, SDHCI_DMA_ADDRESS)

		 * should return a valid address to continue from, but as

		 * some controllers are faulty, don't trust them.

			/*

			 * Force update to the next DMA block boundary.

				/*

				 * Data managed to finish before the

				 * command completed. Make sure we do

				 * things in the proper order.

 Clear selected interrupts. */

			/*

			 * There is a observation on i.mx esdhc.  INSERT

			 * bit will be immediately set again when it gets

			 * cleared, if a card is inserted.  We have to mask

			 * the irq to prevent interrupt storm which will

			 * freeze the system.  And the REMOVE gets the

			 * same situation.

			 *

			 * More testing are needed here to ensure it works

			 * for other platforms though.

 Determine if mrqs can be completed immediately */

 Process mrqs ready for immediate completion */

/*****************************************************************************\

 *                                                                           *

 * Suspend/resume                                                            *

 *                                                                           *

/*

 * To enable wakeup events, the corresponding events have to be enabled in

 * the Interrupt Status Enable register too. See 'Table 1-6: Wakeup Signal

 * Table' in the SD Host Controller Standard Specification.

 * It is useless to restore SDHCI_INT_ENABLE state in

 * sdhci_disable_irq_wakeups() since it will be set by

 * sdhci_enable_card_detection() or sdhci_init().

 Card keeps power but host controller does not */

 Force clock and power re-program */

 Enable SDIO IRQ */

 Enable Card Detection */

 CONFIG_PM */

/*****************************************************************************\

 *                                                                           *

 * Command Queue Engine (CQE) helpers                                        *

 *                                                                           *

	/*

	 * Host from V4.10 supports ADMA3 DMA type.

	 * ADMA3 performs integrated descriptor which is more suitable

	 * for cmd queuing to fetch both command and transfer descriptors.

 Set maximum timeout */

 Clear selected interrupts. */

/*****************************************************************************\

 *                                                                           *

 * Device allocation/registration                                            *

 *                                                                           *

	/*

	 * The DMA table descriptor count is calculated as the maximum

	 * number of segments times 2, to allow for an alignment

	 * descriptor for each segment, plus 1 for a nop end descriptor.

 Try 64-bit mask if hardware is capable  of it */

 32-bit mask as default & fallback */

	/*

	 * Cap the bounce buffer at 64KB. Using a bigger bounce buffer

	 * has diminishing returns, this is probably because SD/MMC

	 * cards are usually optimized to handle this size of requests.

	/*

	 * Adjust downwards to maximum request size if this is less

	 * than our segment size, else hammer down the maximum

	 * request size to the maximum buffer size.

	/*

	 * When we just support one segment, we can get significant

	 * speedups by the help of a bounce buffer to group scattered

	 * reads/writes together.

		/*

		 * Exiting with zero here makes sure we proceed with

		 * mmc->max_segs == 1.

 Again fall back to max_segs == 1 */

 Lie about this since we're bouncing */

	/*

	 * According to SD Host Controller spec v4.10, bit[27] added from

	 * version 4.10 in Capabilities Register is used as 64-bit System

	 * Address support for V4 mode.

	/*

	 * If there are external regulators, get them. Note this must be done

	 * early before resetting the host and reading the capabilities so that

	 * the host can take the appropriate action if regulators are not

	 * available.

		/*

		 * Fall back to use the DMA/PIO integrated in standard SDHCI

		 * instead of external DMA devices.

 Disable internal DMA sources */

 SDMA does not support 64-bit DMA if v4 mode not set */

		/*

		 * Use zalloc to zero the reserved high 32-bits of 128-bit

		 * descriptors so that they never need to be written.

	/*

	 * If we use DMA, then it's up to the caller to set the DMA

	 * mask, but PIO does not need the hw shim so we set a new

	 * mask here in that case.

	/*

	 * In case of Host Controller v3.00, find out whether clock

	 * multiplier is supported.

	/*

	 * In case the value in Clock Multiplier is 0, then programmable

	 * clock mode is not supported, otherwise the actual clock

	 * multiplier is one more than the value of Clock Multiplier

	 * in the Capabilities Register.

	/*

	 * Set host parameters.

		/*

		 * Divided Clock Mode minimum clock rate is always less than

		 * Programmable Clock Mode minimum clock rate.

	/*

	 * For v3 mode, Auto-CMD23 stuff only works in ADMA or PIO.

	 * For v4 mode, SDMA may use Auto-CMD23 as well.

	/*

	 * A controller may support 8-bit width, but the board itself

	 * might not have the pins brought out.  Boards that support

	 * 8-bit width must set "mmc->caps |= MMC_CAP_8_BIT_DATA;" in

	 * their platform code before calling sdhci_add_host(), and we

	 * won't assume 8-bit width for hosts without that CAP.

 If vqmmc provides no 1.8V signalling, then there's no UHS */

 In eMMC case vqmmc might be a fixed 1.8V regulator */

		/*

		 * The SDHCI controller in a SoC might support HS200/HS400

		 * (indicated using mmc-hs200-1_8v/mmc-hs400-1_8v dt property),

		 * but if the board is modeled such that the IO lines are not

		 * connected to 1.8v then HS200/HS400 cannot be supported.

		 * Disable HS200/HS400 if the board does not have 1.8v connected

		 * to the IO lines. (Applicable for other modes in 1.8v)

 Any UHS-I mode in caps implies SDR12 and SDR25 support. */

 SDR104 supports also implies SDR50 support */

		/* SD3.0: SDR104 is supported so (for eMMC) the caps2

		 * field can be promoted to support HS200.

 Does the host need tuning for SDR50? */

 Driver Type(s) (A, C, D) supported by the host */

 Initial value for re-tuning timer count */

	/*

	 * In case Re-tuning Timer is not disabled, the actual value of

	 * re-tuning timer will be 2 ^ (n - 1).

 Re-tuning mode supported by the Host Controller */

	/*

	 * According to SD Host Controller spec v3.00, if the Host System

	 * can afford more than 150mA, Host Driver should set XPC to 1. Also

	 * the value is meaningful only if Voltage Support in the Capabilities

	 * register is set. The actual current value is 4 times the register

	 * value.

 convert to SDHCI_MAX_CURRENT format */

 convert to mA */

 If OCR set by host, use it instead. */

 If OCR set by external regulators, give it highest prio. */

 normal SD controllers don't support 1.8V */

	/*

	 * Maximum number of sectors in one transfer. Limited by SDMA boundary

	 * size (512KiB). Note some tuning modes impose a 4MiB limit, but this

	 * is less anyway.

	/*

	 * Maximum number of segments. Depends on if the hardware

	 * can do scatter/gather or not.

 PIO */

	/*

	 * Maximum segment size. Could be one segment with the maximum number

	 * of bytes. When doing hardware scatter/gather, each entry cannot

	 * be larger than 64 KiB though.

	/*

	 * Maximum block size. This varies from controller to controller and

	 * is specified in the capabilities register.

	/*

	 * Maximum block count.

 This may alter mmc->*_blk_* parameters */

/*****************************************************************************\

 *                                                                           *

 * Driver init/exit                                                          *

 *                                                                           *

/*

 * Shared part of driver for MMC/SDHC controller on Cavium OCTEON and

 * ThunderX SOCs.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 *

 * Copyright (C) 2012-2017 Cavium Inc.

 * Authors:

 *   David Daney <david.daney@cavium.com>

 *   Peter Swain <pswain@cavium.com>

 *   Steven J. Hill <steven.hill@cavium.com>

 *   Jan Glauber <jglauber@cavium.com>

/*

 * The Cavium MMC host hardware assumes that all commands have fixed

 * command and response types.  These are correct if MMC devices are

 * being used.  However, non-MMC devices like SD use command and

 * response types that are unexpected by the host hardware.

 *

 * The command and response types can be overridden by supplying an

 * XOR value that is applied to the type.  We calculate the XOR value

 * from the values in this table and the flags passed from the MMC

 * core.

 CMD0 */

 CMD1 */

 CMD2 */

 CMD3 */

 CMD4 */

 CMD5 */

 CMD6 */

 CMD7 */

 CMD8 */

 CMD9 */

 CMD10 */

 CMD11 */

 CMD12 */

 CMD13 */

 CMD14 */

 CMD15 */

 CMD16 */

 CMD17 */

 CMD18 */

 CMD19 */

 CMD20 */

 CMD21 */

 CMD22 */

 CMD23 */

 CMD24 */

 CMD25 */

 CMD26 */

 CMD27 */

 CMD28 */

 CMD29 */

 CMD30 */

 CMD31 */

 CMD32 */

 CMD33 */

 CMD34 */

 CMD35 */

 CMD36 */

 CMD37 */

 CMD38 */

 CMD39 */

 CMD40 */

 CMD41 */

 CMD42 */

 CMD43 */

 CMD44 */

 CMD45 */

 CMD46 */

 CMD47 */

 CMD48 */

 CMD49 */

 CMD50 */

 CMD51 */

 CMD52 */

 CMD53 */

 CMD54 */

 CMD55 */

 CMD56 */

 CMD57 */

 CMD58 */

 CMD59 */

 CMD60 */

 CMD61 */

 CMD62 */

 CMD63 */

 MMC_RSP_R5, MMC_RSP_R6, MMC_RSP_R7 */

 MMC_RSP_R4 */

/*

 * We never set the switch_exe bit since that would interfere

 * with the commands send by the MMC core.

	/*

	 * Modes setting only taken from slot 0. Work around that hardware

	 * issue by first switching to slot 0.

 wait for the switch to finish */

 Match BUS_ID, HS_TIMING, BUS_WIDTH, POWER_CLASS, CLK_HI, CLK_LO */

 Switch to another slot if needed */

 Auto inc from offset zero */

 Check if there are any pending requests left */

 Clear and disable FIFO */

 Try to clean up failed DMA. */

 Clear interrupt bits (write 1 clears ). */

	/*

	 * dma_val set means DMA is still in progress. Don't touch

	 * the request and wait for the interrupt indicating that

	 * the DMA is finished.

/*

 * Program DMA_CFG and if needed DMA_ADR.

 * Returns 0 on error, DMA address otherwise.

/*

 * Queue complete sg list into the FIFO.

 * Returns 0 on error, 1 otherwise.

 Enable FIFO by removing CLR bit */

 Program DMA address */

		/*

		 * If we have scatter-gather support we also have an extra

		 * register for the DMA addr, so no need to check

		 * host->big_dma_addr here.

 enable interrupts on the last element */

		/*

		 * The write copies the address and the command to the FIFO

		 * and increments the FIFO's COUNT field.

	/*

	 * In difference to prepare_dma_single we don't return the

	 * address here, as it would not make sense for scatter-gather.

	 * The dma fixup is only required on models that don't support

	 * scatter-gather, so that is not a problem.

 Disable FIFO */

	/*

	 * If we have a valid SD card in the slot, we set the response

	 * bit mask to check for CRC errors and timeouts only.

	 * Otherwise, use the default power reset value.

 Copy data to the xmit buffer before issuing the command. */

 Auto inc from offset zero, dbuf zero */

	/*

	 * Note about locking:

	 * All MMC devices share the same bus and controller. Allow only a

	 * single user of the bootbus/MMC bus at a time. The lock is acquired

	 * on all entry points from the MMC layer.

	 *

	 * For requests the lock is only released after the completion

	 * interrupt!

 Set the power state */

 Convert bus width to HW definition */

 DDR is available for 4/8 bit bus width */

 Change the clock frequency. */

 Enable this bus slot. */

 Program initial clock speed and power. */

 Make the changes take effect on this bus slot. */

	/*

	 * Set watchdog timeout value and default reset value

	 * for the mask register. Finally, set the CARD_RCA

	 * bit so that we can get the card address relative

	 * to the CMD register for CMD7 transactions.

	/*

	 * Legacy Octeon firmware has no regulator entry, fall-back to

	 * a hard-coded voltage to get a sane OCR.

 Common MMC bindings */

 Set bus width */

 Set maximum and minimum frequency */

 Sampling register settings, period in picoseconds */

 Set up host parameters */

	/*

	 * We only have a 3.3v supply, we cannot support any

	 * of the UHS modes. We do support the high speed DDR

	 * modes up to 52MHz.

	 *

	 * Disable bounce buffers for max_segs = 1

 DMA size field can address up to 8 MB */

 External DMA is in 512 byte blocks */

 DMA block count field is 15 bits */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018 Mellanox Technologies.

 Update the Drive and Sample fields in register UHS_REG_EXT. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Atmel SDMMC controller driver.

 *

 * Copyright (C) 2015 Atmel,

 *		 2015 Ludovic Desroches <ludovic.desroches@atmel.com>

 drv type B, programmable clock mode */

	/*

	 * There is no requirement to disable the internal clock before

	 * changing the SD clock configuration. Moreover, disabling the

	 * internal clock, changing the configuration and re-enabling the

	 * internal clock causes some bugs. It can prevent to get the internal

	 * clock stable flag ready and an unexpected switch to the base clock

	 * when using presets.

 Wait max 20 ms */

 Set capabilities in r/w mode. */

 Set capabilities in ro mode. */

	/*

	 * We have to set preset values because it depends on the clk_mul

	 * value. Moreover, SDR104 is supported in a degraded mode since the

	 * maximum sd clock value is 120 MHz instead of 208 MHz. For that

	 * reason, we need to use presets to support SDR104.

 CONFIG_PM_SLEEP */

 CONFIG_PM */

	/*

	 * if SDCAL pin is wrongly connected, we must enable

	 * the analog calibration cell permanently.

 HS200 is broken at this moment */

	/*

	 * When calling sdhci_runtime_suspend_host(), the sdhci layer makes

	 * the assumption that all the clocks of the controller are disabled.

	 * It means we can't get irq from it when it is runtime suspended.

	 * For that reason, it is not planned to wake-up on a card detect irq

	 * from the controller.

	 * If we want to use runtime PM and to be able to wake-up on card

	 * insertion, we have to use a GPIO for the card detection or we can

	 * use polling. Be aware that using polling will resume/suspend the

	 * controller between each attempt.

	 * Disable SDHCI_QUIRK_BROKEN_CARD_DETECTION to be sure nobody tries

	 * to enable polling via device tree with broken-cd property.

	/*

	 * If the device attached to the MMC bus is not removable, it is safer

	 * to set the Force Card Detect bit. People often don't connect the

	 * card detect signal and use this pin for another purpose. If the card

	 * detect pin is not muxed to SDHCI controller, a default value is

	 * used. This value can be different from a SoC revision to another

	 * one. Problems come when this default value is not card present. To

	 * avoid this case, if the device is non removable then the card

	 * detection procedure using the SDMCC_CD signal is bypassed.

	 * This bit is reset when a software reset for all command is performed

	 * so we need to implement our own reset function to set back this bit.

	 *

	 * WA: SAMA5D2 doesn't drive CMD if using CD GPIO line.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/mmc/host/mmci.c - ARM PrimeCell MMCI PL180/1 driver

 *

 *  Copyright (C) 2003 Deep Blue Solutions, Ltd, All Rights Reserved.

 *  Copyright (C) 2010 ST-Ericsson SA

 Busy detection for the ST Micro variant */

	/*

	 * According to the spec, at least three feedback clock cycles

	 * of max 52 MHz must pass between two writes to the MMCICLOCK reg.

	 * Three MCLK clock cycles must pass between two MMCIPOWER reg writes.

	 * Worst delay time during card init is at 100 kHz => 30 us.

	 * Worst delay time when up and running is at 25 MHz => 120 ns.

/*

 * This must be called with host->lock held

/*

 * This must be called with host->lock held

/*

 * This must be called with host->lock held

 Keep busy mode in DPSM if enabled */

/*

 * This must be called with host->lock held

 Make sure cclk reflects the current calculated clock */

			/*

			 * DB8500 TRM says f = mclk / (clkdiv + 2)

			 * => clkdiv = (mclk / f) - 2

			 * Round the divider up so we don't exceed the max

			 * frequency

			/*

			 * PL180 TRM says f = mclk / (2 * (clkdiv + 1))

			 * => clkdiv = mclk / (2 * f) - 1

 This hasn't proven to be worthwhile */

 clk |= MCI_CLK_PWRSAVE; */

 Set actual clock for debug */

 initialize pre request cookie */

/*

 * Validate mmc prerequisites

 Okay, go for it. */

 Trigger the DMA transfer */

	/*

	 * Let the MMCI say when the data is ended and it's time

	 * to fire next DMA request. When that happens, MMCI will

	 * call mmci_data_end()

	/*

	 * Before unmasking for the busy end IRQ, confirm that the

	 * command was sent successfully. To keep track of having a

	 * command in-progress, waiting for busy signaling to end,

	 * store the status in host->busy_status.

	 *

	 * Note that, the card may need a couple of clock cycles before

	 * it starts signaling busy on DAT0, hence re-read the

	 * MMCISTATUS register here, to allow the busy bit to be set.

	 * Potentially we may even need to poll the register for a

	 * while, to allow it to be set, but tests indicates that it

	 * isn't needed.

	/*

	 * If there is a command in-progress that has been successfully

	 * sent, then bail out if busy status is set and wait for the

	 * busy end IRQ.

	 *

	 * Note that, the HW triggers an IRQ on both edges while

	 * monitoring DAT0 for busy completion, but there is only one

	 * status bit in MMCISTATUS for the busy state. Therefore

	 * both the start and the end interrupts needs to be cleared,

	 * one after the other. So, clear the busy start IRQ here.

	/*

	 * If there is a command in-progress that has been successfully

	 * sent and the busy bit isn't set, it means we have received

	 * the busy end IRQ. Clear and mask the IRQ, then continue to

	 * process the command.

/*

 * All the DMA operation mode stuff goes inside this ifdef.

 * This assumes that you have a generic DMA device interface,

 * no custom DMA interfaces are supported.

	/*

	 * If only an RX channel is specified, the driver will

	 * attempt to use it bidirectionally, however if it is

	 * is specified but cannot be located, DMA will be disabled.

	/*

	 * Limit the maximum segment size in any SG entry according to

	 * the parameters of the DMA engine device.

/*

 * This is used in or so inline it

 * so it can be discarded.

 Wait up to 1ms for the DMA to complete */

	/*

	 * Check to see whether we still have some data left in the FIFO -

	 * this catches DMA controllers which are unable to monitor the

	 * DMALBREQ and DMALSREQ signals while allowing us to DMA to non-

	 * contiguous buffers.  On TX, we'll get a FIFO underrun error.

	/*

	 * Use of DMA with scatter-gather is impossible.

	 * Give up with DMA and switch back to PIO mode.

 prepares DMA channel and DMA descriptor, returns non-zero on failure */

 # of words */

 # of words */

 If there's no DMA channel, fall back to PIO */

 If less than or equal to the fifo size, don't bother with DMA */

	/*

	 * This is necessary to get SDIO working on the Ux500. We do not yet

	 * know if this is a bug in:

	 * - The Ux500 DMA controller (DMA40)

	 * - The MMCI DMA interface on the Ux500

	 * some power of two blocks (such as 64 bytes) are sent regularly

	 * during SDIO traffic and those work fine so for these we enable DMA

	 * transfers.

 Check if next job is already prepared. */

 No job were prepared thus do it now. */

		/*

		 * The ST Micro variant for SDIO small write transfers

		 * needs to have clock H/W flow control disabled,

		 * otherwise the transfer will not start. The threshold

		 * depends on the rate of MCLK.

	/*

	 * Attempt to use DMA operation mode, if this

	 * should fail, fall back to PIO mode

 IRQ mode, map the SG list for CPU reading/writing */

		/*

		 * If we have less than the fifo 'half-full' threshold to

		 * transfer, trigger a PIO interrupt as soon as any data

		 * is available.

		/*

		 * We don't actually need to include "FIFO empty" here

		 * since its implicit in "FIFO half empty".

interrupt*/0)

 Make sure we have data to handle */

 First check for errors */

 Terminate the DMA transfer */

		/*

		 * Calculate how far we are into the transfer.  Note that

		 * the data counter gives the number of bytes transferred

		 * on the MMC bus, not on the host side.  On reads, this

		 * can be as much as a FIFO-worth of data ahead.  This

		 * matters for FIFO overruns only.

 Last block was not successful */

 The error clause is handled above, success! */

	/*

	 * We need to be one of these interrupts to be considered worth

	 * handling. Note that we tag on any latent IRQs postponed

	 * due to waiting for busy status.

 Handle busy detection on DAT0 if the variant supports it. */

		/*

		 * This will wake up mmci_irq_thread() which will issue

		 * a hardware reset of the MMCI block.

 Terminate the DMA transfer */

	/*

	 * on qcom SDCC4 only 8 words are used in each burst so only 8 addresses

	 * from the fifo range should be used

		/*

		 * SDIO especially may want to send something that is

		 * not divisible by 4 (as opposed to card sectors

		 * etc). Therefore make sure to always read the last bytes

		 * while only doing full 32-bit reads towards the FIFO.

		/*

		 * SDIO especially may want to send something that is

		 * not divisible by 4 (as opposed to card sectors

		 * etc), and the FIFO only accept full 32-bit writes.

		 * So compensate by adding +3 on the count, a single

		 * byte become a 32bit write, 7 bytes will be two

		 * 32bit writes etc.

/*

 * PIO data transfer IRQ handler.

		/*

		 * For write, we only need to test the half-empty flag

		 * here - if the FIFO is completely empty, then by

		 * definition it is more than half empty.

		 *

		 * For read, check for data available.

	/*

	 * If we have less than the fifo 'half-full' threshold to transfer,

	 * trigger a PIO interrupt as soon as any data is available.

	/*

	 * If we run out of data, disable the data IRQs; this

	 * prevents a race where the FIFO becomes empty before

	 * the chip itself has disabled the data path, and

	 * stops us racing with our data end IRQ.

/*

 * Handle completion of command and data transfers.

		/*

		 * Busy detection is managed by mmci_cmd_irq(), including to

		 * clear the corresponding IRQ.

		/*

		 * Busy detection has been handled by mmci_cmd_irq() above.

		 * Clear the status bit to prevent polling in IRQ context.

/*

 * mmci_irq_thread() - A threaded IRQ handler that manages a reset of the HW.

 *

 * A reset is needed for some variants, where a datatimeout for a R1B request

 * causes the DPSM to stay busy (non-functional).

		/*

		 * The ST Micro variant doesn't have the PL180s MCI_PWR_UP

		 * and instead uses MCI_PWR_ON so apply whatever value is

		 * configured in the variant data.

		/*

		 * The ST Micro variant has some additional bits

		 * indicating signal direction for the signals in

		 * the SD/MMC bus and feedback-clock usage.

		/*

		 * If the variant cannot configure the pads by its own, then we

		 * expect the pinctrl to be able to do that for us

	/*

	 * If clock = 0 and the variant requires the MMCIPOWER to be used for

	 * gating the clock, the MCI_PWR_ON bit is cleared.

 Assume always present */

	/*

	 * Assume the level translator is present if st,use-ckin is set.

	 * This is to cater for DTs which do not implement this test.

 All GPIOs are valid, test whether level translator works */

 Sample CKIN */

 Set CK low */

 Sample CKIN */

 Tristate all */

 Level translator is present if CK signal is propagated to CKIN */

 Must have platform data or Device Tree. */

	/*

	 * Some variant (STM32) doesn't have opendrain bit, nevertheless

	 * pins can be set accordingly using pinctrl

	/*

	 * According to the spec, mclk is max 100 MHz,

	 * so we try to adjust the clock down to this,

	 * (if possible).

	/*

	 * The ARM and ST versions of the block have slightly different

	 * clock divider equations which means that the minimum divider

	 * differs too.

	 * on Qualcomm like controllers get the nearest minimum clock to 100Khz

	/*

	 * If no maximum operating frequency is supplied, fall back to use

	 * the module parameter, which has a (low) default value in case it

	 * is not specified. Either value must not exceed the clock rate into

	 * the block, of course.

 Get regulators and the supported OCR mask */

 We support these capabilities. */

	/*

	 * Enable busy detection.

		/*

		 * Not all variants have a flag to enable busy detection

		 * in the DPSM, but if they do, set it here.

 Variants with mandatory busy timeout in HW needs R1B responses. */

 Prepare a CMD12 - needed to clear the DPSM on some variants. */

 We support these PM capabilities. */

	/*

	 * We can do SGIO

	/*

	 * Since only a certain number of bits are valid in the data length

	 * register, we must ensure that we don't exceed 2^num-1 bytes in a

	 * single request.

	/*

	 * Set the maximum segment size.  Since we aren't doing DMA

	 * (yet) we are only limited by the data length register.

	/*

	 * Block size can be up to 2048 bytes, but must be a power of two.

	/*

	 * Limit the number of blocks transferred so that we don't overflow

	 * the maximum request size.

	/*

	 * If:

	 * - not using DT but using a descriptor table, or

	 * - using a table of descriptors ALONGSIDE DT, or

	 * look up these descriptors named "cd" and "wp" right here, fail

	 * silently of these do not exist

		/*

		 * Undo pm_runtime_put() in probe.  We use the _sync

		 * version here so that we can access the primecell.

 ST Micro variants */

 Qualcomm variants */

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (c) 2015, The Linux Foundation. All rights reserved.

/*

 * The allocated descriptor table for task, link & transfer descriptors

 * looks like:

 * |----------|

 * |task desc |  |->|----------|

 * |----------|  |  |trans desc|

 * |link desc-|->|  |----------|

 * |----------|          .

 *      .                .

 *  no. of slots      max-segs

 *      .           |----------|

 * |----------|

 * The idea here is to create the [task+trans] table and mark & point the

 * link desc to the transfer desc table on a per slot basis.

 task descriptor can be 64/128 bit irrespective of arch */

	/*

	 * 96 bits length of transfer desc instead of 128 bits which means

	 * ADMA would expect next valid descriptor at the 96th bit

	 * or 128th bit

 total size of a slot: 1 task & 1 transfer (link) */

	/*

	 * allocate a dma-mapped chunk of memory for the descriptors

	 * allocate a dma-mapped chunk of memory for link descriptors

	 * setup each link-desc memory offset per slot-number to

	 * the descriptor table.

 Configuration must not be changed while enabled */

 Ensure all writes are done before interrupts are enabled */

 Re-enable is done upon first request */

 CQHCI is idle and should halt immediately, so set a small timeout */

 First request after resume has to re-enable */

 Make sure descriptors are ready before ringing the doorbell */

 Forget about errors when recovery has already been triggered */

	/*

	 * Handle ICCE ("Invalid Crypto Configuration Error").  This should

	 * never happen, since the block layer ensures that all crypto-enabled

	 * I/O requests have a valid keyslot before they reach the driver.

	 *

	 * Note that GCE ("General Crypto Error") is different; it already got

	 * handled above by checking TERRI.

		/*

		 * The only way to guarantee forward progress is to mark at

		 * least one task in error, so if none is indicated, pick one.

 No completions allowed during recovery */

 read TCN and complete the request */

 complete the corresponding mrq */

/*

 * After halting we expect to be able to use the command line. We interpret the

 * failure to halt to mean the data lines might still be in use (and the upper

 * layers will need to send a STOP command), so we set the timeout based on a

 * generous command timeout.

 CRC errors might indicate re-tuning so prefer to report that */

/*

 * By now the command and data lines should be unused so there is no reason for

 * CQHCI to take a long time to halt, but if it doesn't halt there could be

 * problems clearing tasks, so be generous.

 CQHCI could be expected to clear it's internal state pretty quickly */

	/*

	 * The specification contradicts itself, by saying that tasks cannot be

	 * cleared if CQHCI does not halt, but if CQHCI does not halt, it should

	 * be disabled/re-enabled, but not to disable before clearing tasks.

	 * Have a go anyway.

 Be sure that there are no tasks */

 Ensure all writes are done before interrupts are re-enabled */

 check and setup CMDQ interface */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * drivers/mmc/host/sdhci-of-hlwd.c

 *

 * Nintendo Wii Secure Digital Host Controller Interface.

 * Copyright (C) 2009 The GameCube Linux Team

 * Copyright (C) 2009 Albert Herranz

 *

 * Based on sdhci-of-esdhc.c

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 * Copyright (c) 2009 MontaVista Software, Inc.

 *

 * Authors: Xiaobo Xie <X.Xie@freescale.com>

 *	    Anton Vorontsov <avorontsov@ru.mvista.com>

/*

 * Ops and quirks for the Nintendo Wii SDHCI controllers.

/*

 * We need a small delay after each write, or things go horribly wrong.

 usecs */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for the MMC / SD / SDIO IP found in:

 *

 * TC6393XB, TC6391XB, TC6387XB, T7L66XB, ASIC3, SH-Mobile SoCs

 *

 * Copyright (C) 2015-19 Renesas Electronics Corporation

 * Copyright (C) 2016-19 Sang Engineering, Wolfram Sang

 * Copyright (C) 2017 Horms Solutions, Simon Horman

 * Copyright (C) 2011 Guennadi Liakhovetski

 * Copyright (C) 2007 Ian Molton

 * Copyright (C) 2004 Ian Molton

 *

 * This driver draws mainly on scattered spec sheets, Reverse engineering

 * of the toshiba e800  SD driver and some parts of the 2.4 ASIC3 driver (4 bit

 * support). (Further 4 bit support from a later datasheet).

 *

 * TODO:

 *   Investigate using a workqueue for PIO transfers

 *   Eliminate FIXMEs

 *   Better Power management

 *   Handle MMC errors better

 *   double buffer support

 *

 Keep device active while SDIO irq is enabled */

 Clear obsolete interrupts before enabling */

 reg now applies to MMC_BUS_WIDTH_4 */

 FIXME - should we set stop clock reg here */

	/*

	 * is request already finished? Since we use a non-blocking

	 * cancel_delayed_work(), it can happen, that a .set_ios() call preempts

	 * us, so, have to check for IS_ERR(host->mrq)

 Ready for new calls */

/* These are the bitmasks the tmio chip requires to implement the MMC response

 TMIO_MMC_HAVE_CMD12_CTRL */

/* FIXME - this seems to be ok commented out but the spec suggest this bit

 *         should be set when issuing app commands.

 *	if(cmd->flags & MMC_FLAG_ACMD)

 *		c |= APP_CMD;

			/*

			 * Disable auto CMD12 at IO_RW_EXTENDED and

			 * SET_BLOCK_COUNT when doing multiple block transfer

 Fire off the command */

	/*

	 * Transfer the data

 if count was multiple of 4 */

 if count was even number */

 if count was odd number */

	/*

	 * FIXME

	 *

	 * driver and this function are assuming that

	 * it is used as little endian

/*

 * This chip always returns (at least?) as much data as you ask for.

 * I'm unsure what happens if you ask for less than a block. This should be

 * looked into to ensure that a funny length read doesn't hose the controller.

 Transfer the data */

 needs to be called with host->lock held */

 FIXME - return correct transfer count on errors */

	/*

	 * FIXME: other drivers allow an optional stop command of any given type

	 *        which we dont do, as the chip can auto generate them.

	 *        Perhaps we can be smarter about when to use auto CMD12 and

	 *        only issue the auto request when we know this is the desired

	 *        stop command, allowing fallback to the stop command the

	 *        upper layers expect. For now, we do what works.

 fill in response from auto CMD12 */

		/*

		 * Has all data been written out yet? Testing on SuperH showed,

		 * that in most cases the first interrupt comes already with the

		 * BUSY status bit clear, but on some operations, like mount or

		 * in the beginning of a write / sync / umount, there is one

		 * DATAEND interrupt with the BUSY bit set, in this cases

		 * waiting for one more interrupt fixes the problem.

	/* This controller is sicker than the PXA one. Not only do we need to

	 * drop the top 8 bits of the first response word, we also need to

	 * modify the order of the response for short response command types.

	/* If there is data to handle we enable data IRQs here, and

	 * we will ultimatley finish the request in the data_end handler.

	 * If theres no data or we encountered an error, finish now.

 Card insert / remove attempts */

 Command completion */

 Data transfer */

 Data transfer completion */

 Clear the status except the interrupt status */

 Some hardware cannot perform 2 byte requests in 4/8 bit mode */

 Set transfer length / blocksize */

 Process requests from the MMC layer */

 If not SET_BLOCK_COUNT, clear old data */

 Clear all */

 Error means retune, but executed command was still successful */

 If SET_BLOCK_COUNT, continue with main command */

 .set_ios() is returning void, so, no chance to report an error */

		/*

		 * Attention: empiric value. With a b43 WiFi SDIO card this

		 * delay proved necessary for reliable card-insertion probing.

		 * 100us were not enough. Is this the same 140us delay, as in

		 * tmio_mmc_set_ios()?

	/*

	 * It seems, VccQ should be switched on after Vcc, this is also what the

	 * omap_hsmmc.c driver does.

/* Set MMC clock / power.

 * Note: This controller uses a simple divider scheme therefore it cannot

 * run a MMC card at full speed (20MHz). The max clock is 24MHz on SD, but as

 * MMC wont run that fast, it has to be clocked at 12MHz which is the next

 * slowest setting.

 For R-Car Gen2+, we need to reset SDHI specific SCC */

 Let things settle. delay taken from winCE driver */

 use ocr_mask if no regulator */

	/*

	 * try again.

	 * There is possibility that regulator has not been probed

	/*

	 * DEPRECATED:

	 * For new platforms, please use "disable-wp" instead of

	 * "toshiba,mmc-wrprotect-disable"

	/*

	 * Check the sanity of mmc->f_min to prevent host->set_clock() from

	 * looping forever...

	/*

	 * Look for a card detect GPIO, if it fails with anything

	 * else than a probe deferral, just live without it.

	/*

	 * While using internal tmio hardware logic for card detection, we need

	 * to ensure it stays powered for it to work.

 Init delayed work for request timeouts */

 See if we also get DMA */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  drivers/mmc/host/via-sdmmc.c - VIA SD/MMC Card Reader driver

 *  Copyright (c) 2008, VIA Technologies Inc. All Rights Reserved.

/*

 * PCI registers

/*

 * SDC MMIO Registers

/*

 * Bit 0 -Bit 10 : Block length. So, the maximum block length should be 2048.

 * Bit 11 - Bit 13 : Reserved.

 * GPIDET : Select GPI pin to detect card, GPI means CR_CD# in top design.

 * INTEN : Enable SD host interrupt.

 * Bit 16 - Bit 31 : Block count. So, the maximun block count should be 65536.

/*

 * MBDIE : Multiple Blocks transfer Done Interrupt Enable

 * BDDIE : Block Data transfer Done Interrupt Enable

 * CIRIE : Card Insertion or Removal Interrupt Enable

 * CRDIE : Command-Response transfer Done Interrupt Enable

 * CRTOIE : Command-Response response TimeOut Interrupt Enable

 * ASCRDIE : Auto Stop Command-Response transfer Done Interrupt Enable

 * DTIE : Data access Timeout Interrupt Enable

 * SCIE : reSponse CRC error Interrupt Enable

 * RCIE : Read data CRC error Interrupt Enable

 * WCIE : Write data CRC error Interrupt Enable

/*

 * CECC : Reserved

 * WP : SD card Write Protect status

 * SLOTD : Reserved

 * SLOTG : SD SLOT status(Gpi pin status)

 * MBD : Multiple Blocks transfer Done interrupt status

 * BDD : Block Data transfer Done interrupt status

 * CD : Reserved

 * CIR : Card Insertion or Removal interrupt detected on GPI pin

 * IO : Reserved

 * CRD : Command-Response transfer Done interrupt status

 * CRTO : Command-Response response TimeOut interrupt status

 * ASCRDIE : Auto Stop Command-Response transfer Done interrupt status

 * DT : Data access Timeout interrupt status

 * SC : reSponse CRC error interrupt status

 * RC : Read data CRC error interrupt status

 * WC : Write data CRC error interrupt status

/*

 * CFE : Enable SD host automatic Clock FReezing

 0x38-0xFF reserved */

/*

 * Data DMA Control Registers

/*

 * DIR :Transaction Direction

 * 0 : From card to memory

 * 1 : From memory to card

0x14-0xFF reserved*/

/*

 * PCI Control Registers

0x0 - 0x1 reserved*/

/*

 * SFTRST :

 * 0 : Soft reset all the controller and it will be de-asserted automatically

 * 1 : Soft reset is de-asserted

/*

 * 3V3 : Pad power select

 * 0 : 1.8V

 * 1 : 3.3V

 * NOTE : No mater what the actual value should be, this bit always

 * read as 0. This is a hardware bug.

/*

 * PAD_PWRON : Pad Power on/off select

 * 0 : Power off

 * 1 : Power on

  * NOTE : No mater what the actual value should be, this bit always

 * read as 0. This is a hardware bug.

0xB-0xFF reserved*/

 some devices need a very long delay for power to stabilize */

 It seems that our DMA can not work normally with 375kHz clock */

 FIXME: don't brute-force 8MHz but use PIO at 375kHz !! */

 Sanity checks */

Command index*/

Response type*/

Command control*/

Hardware cannot do scatter lists*/

 device-specific quirks */

 Ensure we don't accept more commands from mmc layer */

 Disable generating further interrupts */

 make sure all DMA is stopped */

 switch off power */

 SPDX-License-Identifier: GPL-2.0-only

/* linux/drivers/mmc/host/sdhci-s3c.c

 *

 * Copyright 2008 Openmoko Inc.

 * Copyright 2008 Simtec Electronics

 *      Ben Dooks <ben@simtec.co.uk>

 *      http://armlinux.simtec.co.uk/

 *

 * SDHCI (HSMMC) support for Samsung SoC

/**

 * struct sdhci_s3c - S3C SDHCI instance

 * @host: The SDHCI host created

 * @pdev: The platform device we where created from.

 * @ioarea: The resource created when we claimed the IO area.

 * @pdata: The platform data for this controller.

 * @cur_clk: The index of the current bus clock.

 * @ext_cd_irq: External card detect interrupt.

 * @clk_io: The clock for the internal bus interface.

 * @clk_rates: Clock frequencies.

 * @clk_bus: The clocks that are available for the SD/MMC bus clock.

 * @no_divider: No or non-standard internal clock divider.

/**

 * struct sdhci_s3c_drv_data - S3C SDHCI platform specific driver data

 * @sdhci_quirks: sdhci host specific quirks.

 * @no_divider: no or non-standard internal clock divider.

 *

 * Specifies platform specific configuration of sdhci controller.

 * Note: A structure for driver specific platform data is used for future

 * expansion of its usage.

/**

 * sdhci_s3c_get_max_clk - callback to get maximum clock frequency.

 * @host: The SDHCI host instance.

 *

 * Callback to return the maximum clock rate acheivable by the controller.

/**

 * sdhci_s3c_consider_clock - consider one the bus clocks for current setting

 * @ourhost: Our SDHCI instance.

 * @src: The source clock index.

 * @wanted: The clock frequency wanted.

	/*

	 * If controller uses a non-standard clock division, find the best clock

	 * speed possible with selected clock source and skip the division.

/**

 * sdhci_s3c_set_clock - callback on clock change

 * @host: The SDHCI host being changed

 * @clock: The clock rate being requested.

 *

 * When the card's clock is going to be changed, look at the new frequency

 * and find the best clock source to go with it.

 don't bother if the clock is going off. */

 select the new clock source */

 turn clock off to card before changing clock source */

 reprogram default hardware configuration */

 reconfigure the controller for new clock rate */

/**

 * sdhci_s3c_get_min_clock - callback to get minimal supported clock value

 * @host: The SDHCI host being queried

 *

 * To init mmc host properly a minimal clock value is needed. For high system

 * bus clock's values the standard formula gives values out of allowed range.

 * The clock still can be set to lower values, if clock source other then

 * system bus is selected.

 sdhci_cmu_get_max_clk - callback to get maximum clock frequency.*/

 sdhci_cmu_get_min_clock - callback to get minimal supported clock value. */

 sdhci_cmu_set_clock - callback on clock change.*/

 If the clock is going off, set to 0 at clock control register */

 Reset SD Clock Enable */

 Wait max 20 ms */

 if the bus-width property is not specified, assume width as 1 */

 get the card detection method */

 assuming internal card detect that will be configured by pinctrl */

 enable the local io clock and keep it running for the moment. */

 Ensure we have minimal gpio selected CMD/CLK/Detect */

 Setup quirks for the controller */

	/* we currently see overruns on errors, so disable the SDMA

 CONFIG_MMC_SDHCI_S3C_DMA */

	/* It seems we do not get an DATA transfer complete on non-busy

	 * transfers, not sure if this is a problem with this specific

 This host supports the Auto CMD12 */

 Samsung SoCs need BROKEN_ADMA_ZEROLEN_DESC */

 HSMMC on Samsung SoCs uses SDCLK as timeout clock */

	/*

	 * If controller does not have internal clock divider,

	 * we can use overriding functions instead of default.

 It supports additional host capabilities if needed */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  sdricoh_cs.c - driver for Ricoh Secure Digital Card Readers that can be

 *     found on some Ricoh RL5c476 II cardbus bridge

 *

 *  Copyright (C) 2006 - 2008 Sascha Sommer <saschasommer@freenet.de>

/*

#define DEBUG

#define VERBOSE_DEBUG

 i/o region */

 registers */

 flags for the R21C_STATUS register */

 timeouts */

 list of supported pcmcia devices */

 vendor and device strings followed by their crc32 hashes */

 mmc privdata */

 MMC structure */

**************** register i/o helper functions *****************************/

 do not do this check in the loop as some commands fail otherwise */

 reset status reg? */

 MMC_APP_CMDs need some special handling */

 fill parameters */

 wait for command completion */

	/*

	 * Don't check for timeout status in the loop, as it's not always reset

	 * correctly.

 status register ? */

 wait until the data is available */

 read data */

 write data */

 read/write commands seem to require this */

 read response buffer */

 CRC is stripped so we need to do some shifting. */

 transfer data */

 enter data reading mode */

 FIXME check busy flag */

 some notebooks seem to have the locked flag switched */

 initialize the control and register it to the mmc framework */

 map iomem */

 check version? */

 allocate privdata */

	/* FIXME: frequency and voltage handling is done by the controller

 reset the controller */

 search for supported mmc controllers */

 search pci cardbus bridge that contains the mmc controller */

 the io region is already claimed by yenta_socket... */

 try to init the device */

 remove mmc host */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/mmc/host/omap.c

 *

 *  Copyright (C) 2004 Nokia Corporation

 *  Written by Tuukka Tikkanen and Juha Yrjölä<juha.yrjola@nokia.com>

 *  Misc hacks here and there by Tony Lindgren <tony@atomide.com>

 *  Other hacks (DMA, SD, etc) by David Brownell

/*

 * Command types

/* Specifies how often in millisecs to poll for card status changes

 16xx chips have 2 MMC blocks */

 for changing enabled state */

		/* Doing the dummy read here seems to work around some bug

		 * at least in OMAP24xx silicon where the command would not

 Keeps clock running for at least 8 cycles on valid freq */

 Check for any pending requests */

 The current slot should not have a request in queue */

 Our hardware needs to know exact type */

 resp 1, 1b, 6, 7 */

 Claim nothing transferred on error... */

	/* NOTE:  MMC layer will sometimes poll-wait CMD13 next, issuing

	 * dozens of requests until the card finishes writing data.

	 * It'd be cheaper to just wait till an EOFB interrupt arrives...

 Sending abort takes 80 clocks. Have some extra and round up */

 response type 2 */

 response types 1, 1b, 3, 4, 5, 6 */

/*

 * Abort stuck command. Can occur when card is removed while it is being

 * read.

 PIO only */

 PIO only */

 Round up to handle odd number of bytes to transfer */

 Timeouts are routine with some commands */

		/*

		 * NOTE: On 1610 the END_OF_CMD may come too early when

		 * starting a write

 Other subsystems can call in here before we're initialised. */

	/*

	 * If no card is inserted, we postpone polling until

	 * the cover has been closed.

 If we got to the end of DMA, assume everything went well */

 Set maximum timeout */

 Check if we need to use timeout multiplier register */

	/* cope with calling layer confusion; it issues "single

	 * block" writes using multi-block scatterlists.

 Only do DMA for entire blocks */

		/*

		 * FIFO is 16x2 bytes on 15xx, and 32x2 bytes on 16xx

		 * and 24xx. Use 16 or 32 word frames when the

		 * blocksize is at least that large. Blocksize is

		 * usually 512 bytes; but not for some SD reads.

 Only reconfigure if we have a different burst size */

 Revert to PIO? */

 only touch fifo AFTER the controller readies it */

 Cannot touch dsor yet, just power up MMC */

	/* On insanely high arm_per frequencies something sometimes

	 * goes somehow out of sync, and the POW bit is not being set,

	 * which results in the while loop below getting stuck.

 worst case at 400kHz, 80 cycles makes 200 microsecs */

 Send clock cycles, poll completion */

	/* Use scatterlist DMA to reduce per-transfer costs.

	 * NOTE max_seg_size assumption that small blocks aren't

	 * normally used (except e.g. for reading SD registers).

 BLEN is 11 bits (+1) */

 NBLK is 11 bits (+1) */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2010 Google, Inc.

 Tegra SDHOST controller vendor register definitions */

/*

 * HAS_PADCALIB NVQUIRK is for SoC's supporting auto calibration of pads

 * drive strength.

/*

 * NEEDS_PAD_CONTROL NVQUIRK is for SoC's having separate 3V3 and 1V8 pads.

 * 3V3/1V8 pad selection happens through pinctrl state selection depending

 * on the signaling mode.

/*

 * NVQUIRK_HAS_TMCLK is for SoC's having separate timeout clock for Tegra

 * SDMMC hardware data timeout.

 SDMMC CQE Base Address for Tegra Host Ver 4.1 and Higher */

 Magic pull up and pull down pad calibration offsets */

 Erratum: Version register is invalid in HW. */

		/*

		 * Postpone this write, we must do it together with a

		 * command write that is down below.

	/* Seems like we're getting spurious timeout and crc errors, so

	 * disable signalling of them. In case of real errors software

	 * timers should take care of eventually detecting them.

 Erratum: Must enable block gap interrupt detection */

	/*

	 * Write-enable shall be assumed if GPIO is missing in a board's

	 * device-tree because SDHCI's WRITE_PROTECT bit doesn't work on

	 * Tegra.

	/*

	 * The SoCs which have NVQUIRK_NEEDS_PAD_CONTROL require software pad

	 * voltage configuration in order to perform voltage switching. This

	 * means that valid pinctrl info is required on SDHCI instances capable

	 * of performing voltage switching. Whether or not an SDHCI instance is

	 * capable of voltage switching is determined based on the regulator.

 Fixed voltage, no pad control required. */

	/*

	 * Touching the tap values is a bit tricky on some SoC generations.

	 * The quirk enables a workaround for a glitch that sometimes occurs if

	 * the tap values are changed.

 Erratum: Enable SDHCI spec v3.00 support */

 Advertise UHS modes as supported by host */

	/*

	 * Enable or disable the additional I/O pad used by the drive strength

	 * calibration process.

 PADS Drive Strength */

 Dual Voltage PADS Voltage selection */

 Set initial offset before auto-calibration */

 10 ms timeout */

 Disable automatic cal and use fixed Drive Strengths */

	/*

	 * Different fail-safe drive strength values based on the signaling

	 * voltage are applicable for SoCs supporting 3V3 and 1V8 pad controls.

	 * So, avoid reading below device tree properties for SoCs that don't

	 * have NVQUIRK_NEEDS_PAD_CONTROL.

 100 ms calibration interval is specified in the TRM */

	/*

	 * In DDR50/52 modes the Tegra SDHCI controllers require the SDHCI

	 * divider to be configured to divided the host clock by two. The SDHCI

	 * clock divider is calculated as part of sdhci_set_clock() by

	 * sdhci_calc_clk(). The divider is calculated from host->max_clk and

	 * the requested clock rate.

	 *

	 * By setting the host->max_clk to clock * 2 the divider calculation

	 * will always result in the correct value for DDR50/52 modes,

	 * regardless of clock rate rounding, which may happen if the value

	 * from clk_get_rate() is used.

 1 ms sleep, 5 ms timeout */

	/*

	 * Read auto-tuned results and extract good valid passing window by

	 * filtering out un-wanted bubble/partial/merged windows.

 discard merged window and bubble window */

 set tap at middle of valid window */

 set tap location at fixed tap relative to the first edge */

 retain HW tuned tap to use incase if no correction is needed */

		/*

		 * Upper and Lower bound thresholds used to detect merged and

		 * bubble windows

		/*

		 * fixed tap is used when HW tuning result contains single edge

		 * and tap is set at fixed tap delay relative to the first edge

		/*

		 * partial window includes edges of the tuning range.

		 * merged window includes more taps so window width is higher

		 * than upper threshold.

 Don't set default tap on tunable modes. */

	/*

	 * Start search for minimum tap value at 10, as smaller values are

	 * may wrongly be reported as working but fail at higher speeds,

	 * according to the TRM.

 Find the maximum tap value that still passes. */

 The TRM states the ideal tap value is at 75% in the passing range. */

	/*

	 * During CQE resume/unhalt, CQHCI driver unhalts CQE prior to

	 * cqhci_host_ops enable where SDHCI DMA and BLOCK_SIZE registers need

	 * to be re-configured.

	 * Tegra CQHCI/SDHCI prevents write access to block size register when

	 * CQE is unhalted. So handling CQE resume sequence here to configure

	 * SDHCI block registers prior to exiting CQE halt state.

		/*

		 * CQE usually resumes very quick, but incase if Tegra CQE

		 * doesn't resume retry unhalt.

	/*

	 * Tegra CQHCI/SDMMC design prevents write access to sdhci block size

	 * register when CQE is enabled and unhalted.

	 * CQHCI driver enables CQE prior to activation, so disable CQE before

	 * programming block size in sdhci controller and enable it back.

	/*

	 * CMD CRC errors are seen sometimes with some eMMC devices when status

	 * command is sent during transfer of last data block which is the

	 * default case as send status command block counter (CBC) is 1.

	 * Recommended fix to set CBC to 0 allowing send status command only

	 * when data lines are idle.

	/*

	 * HW busy detection timeout is based on programmed data timeout

	 * counter and maximum supported timeout is 11s which may not be

	 * enough for long operations like cache flush, sleep awake, erase.

	 *

	 * ERASE_TIMEOUT_LIMIT bit of VENDOR_MISC_CTRL register allows

	 * host controller to wait for busy state until the card is busy

	 * without HW timeout.

	 *

	 * So, use infinite busy wait mode for operations that may take

	 * more than maximum HW busy timeout of 11s otherwise use finite

	 * busy wait mode.

		   /*

		    * Auto-CMD23 leads to "Got command interrupt 0x00010000 even

		    * though no command operation was in progress."

		    *

		    * The exact reason is unknown, as the same hardware seems

		    * to support Auto CMD23 on a downstream 3.1 kernel.

 Hook to periodically rerun pad calibration */

 HW busy detection is supported, but R1B responses are required. */

	/*

	 * Tegra210 has a separate SDMMC_LEGACY_TM clock used for host

	 * timeout clock and SW can choose TMCLK or SDCLK for hardware

	 * data timeout through the bit USE_TMCLK_FOR_DATA_TIMEOUT of

	 * the register SDHCI_TEGRA_VENDOR_SYS_SW_CTRL.

	 *

	 * USE_TMCLK_FOR_DATA_TIMEOUT bit default is set to 1 and SDMMC uses

	 * 12Mhz TMCLK which is advertised in host capability register.

	 * With TMCLK of 12Mhz provides maximum data timeout period that can

	 * be achieved is 11s better than using SDCLK for data timeout.

	 *

	 * So, TMCLK is set to 12Mhz and kept enabled all the time on SoC's

	 * supporting separate TMCLK.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Atmel MultiMedia Card Interface driver

 *

 * Copyright (C) 2004-2008 Atmel Corporation

/*

 * Superset of MCI IP registers integrated in Atmel AT91 Processor

 * Registers and bitfields marked with [2] are only available in MCI2

 MCI Register Definitions */

 Control */

 MCI Enable */

 MCI Disable */

 Power Save Enable */

 Power Save Disable */

 Software Reset */

 Mode */

 Clock Divider */

 Power Saving Divider */

 Read Proof */

 Write Proof */

 Force Byte Transfer */

 Padding Value */

 PDC-oriented Mode */

 LSB of Clock Divider */

 Data Timeout */

 Data Timeout Cycles */

 Data Timeout Multiplier */

 SD Card / SDIO */

 Select SD slot A */

 Select SD slot A */

 1-bit data bus */

 4-bit data bus */

 8-bit data bus[2] */

 Command Argument */

 Command */

 Command Opcode */

 No response */

 48-bit response */

 136-bit response */

 Initialization command */

 Synchronized command */

 Interrupt command */

 Interrupt response */

 Open Drain */

 Max latency 5 cycles */

 Max latency 64 cycles */

 Start data transfer */

 Stop data transfer */

 Write data */

 Read data */

 Single-block transfer */

 Multi-block transfer */

 MMC Stream transfer */

 SDIO Byte transfer */

 SDIO Block transfer */

 SDIO Suspend Command */

 SDIO Resume Command */

 Block */

 Data Block Count */

 Data Block Length */

 Completion Signal Timeout[2] */

 CST cycles */

 CST multiplier */

 Response 0 */

 Response 1 */

 Response 2 */

 Response 3 */

 Receive Data */

 Transmit Data */

 Status */

 Interrupt Enable */

 Interrupt Disable */

 Interrupt Mask */

 Command Ready */

 Receiver Ready */

 Transmitter Ready */

 Data Block Ended */

 Data Transfer In Progress */

 Data Not Busy */

 End of RX Buffer */

 End of TX Buffer */

 SDIO IRQ in slot A */

 SDIO IRQ in slot B */

 SDIO Read Wait Operation Status */

 CE-ATA Completion Signal Received */

 RX Buffer Full */

 TX Buffer Empty */

 Response Index Error */

 Response Direction Error */

 Response CRC Error */

 Response End Bit Error */

 Response Time-Out Error */

 Data CRC Error */

 Data Time-Out Error */

 Completion Signal Time-out Error */

 DMA Block Overrun Error */

 DMA Transfer Done */

 FIFO Empty Flag */

 Transfer Done Flag */

 Boot Operation Acknowledge Received */

 Boot Operation Acknowledge Error */

 RX Overrun Error */

 TX Underrun Error */

 DMA Configuration[2] */

 DMA Write Buffer Offset */

 DMA Channel Read and Write Chunk Size */

 DMA Hardware Handshaking Enable */

 Configuration[2] */

 MCI Internal FIFO control mode */

 Flow Error flag reset control mode */

 High Speed Mode */

 Synchronize on the last block */

 Write Protection Mode[2] */

 WP Enable */

 WP Key */

 Write Protection Status[2] */

 Version */

 FIFO Aperture[2] */

 This is not including the FIFO Aperture on MCI2 */

 Register access macros */

/**

 * struct atmel_mci - MMC controller state shared between all slots

 * @lock: Spinlock protecting the queue and associated data.

 * @regs: Pointer to MMIO registers.

 * @sg: Scatterlist entry currently being processed by PIO or PDC code.

 * @sg_len: Size of the scatterlist

 * @pio_offset: Offset into the current scatterlist entry.

 * @buffer: Buffer used if we don't have the r/w proof capability. We

 *      don't have the time to switch pdc buffers so we have to use only

 *      one buffer for the full transaction.

 * @buf_size: size of the buffer.

 * @buf_phys_addr: buffer address needed for pdc.

 * @cur_slot: The slot which is currently using the controller.

 * @mrq: The request currently being processed on @cur_slot,

 *	or NULL if the controller is idle.

 * @cmd: The command currently being sent to the card, or NULL.

 * @data: The data currently being transferred, or NULL if no data

 *	transfer is in progress.

 * @data_size: just data->blocks * data->blksz.

 * @dma: DMA client state.

 * @data_chan: DMA channel being used for the current data transfer.

 * @dma_conf: Configuration for the DMA slave

 * @cmd_status: Snapshot of SR taken upon completion of the current

 *	command. Only valid when EVENT_CMD_COMPLETE is pending.

 * @data_status: Snapshot of SR taken upon completion of the current

 *	data transfer. Only valid when EVENT_DATA_COMPLETE or

 *	EVENT_DATA_ERROR is pending.

 * @stop_cmdr: Value to be loaded into CMDR when the stop command is

 *	to be sent.

 * @tasklet: Tasklet running the request state machine.

 * @pending_events: Bitmask of events flagged by the interrupt handler

 *	to be processed by the tasklet.

 * @completed_events: Bitmask of events which the state machine has

 *	processed.

 * @state: Tasklet state.

 * @queue: List of slots waiting for access to the controller.

 * @need_clock_update: Update the clock rate before the next request.

 * @need_reset: Reset controller before next request.

 * @timer: Timer to balance the data timeout error flag which cannot rise.

 * @mode_reg: Value of the MR register.

 * @cfg_reg: Value of the CFG register.

 * @bus_hz: The rate of @mck in Hz. This forms the basis for MMC bus

 *	rate and timeout calculations.

 * @mapbase: Physical address of the MMIO registers.

 * @mck: The peripheral bus clock hooked up to the MMC controller.

 * @pdev: Platform device associated with the MMC controller.

 * @slot: Slots sharing this MMC controller.

 * @caps: MCI capabilities depending on MCI version.

 * @prepare_data: function to setup MCI before data transfer which

 * depends on MCI capabilities.

 * @submit_data: function to start data transfer which depends on MCI

 * capabilities.

 * @stop_transfer: function to stop data transfer which depends on MCI

 * capabilities.

 *

 * Locking

 * =======

 *

 * @lock is a softirq-safe spinlock protecting @queue as well as

 * @cur_slot, @mrq and @state. These must always be updated

 * at the same time while holding @lock.

 *

 * @lock also protects mode_reg and need_clock_update since these are

 * used to synchronize mode register updates with the queue

 * processing.

 *

 * The @mrq field of struct atmel_mci_slot is also protected by @lock,

 * and must always be written at the same time as the slot is added to

 * @queue.

 *

 * @pending_events and @completed_events are accessed using atomic bit

 * operations, so they don't need any locking.

 *

 * None of the fields touched by the interrupt handler need any

 * locking. However, ordering is important: Before EVENT_DATA_ERROR or

 * EVENT_DATA_COMPLETE is set in @pending_events, all data-related

 * interrupts must be disabled and @data_status updated with a

 * snapshot of SR. Similarly, before EVENT_CMD_COMPLETE is set, the

 * CMDRDY interrupt must be disabled and @cmd_status updated with a

 * snapshot of SR, and before EVENT_XFER_COMPLETE can be set, the

 * bytes_xfered field of @data must be written. This is ensured by

 * using barriers.

/**

 * struct atmel_mci_slot - MMC slot state

 * @mmc: The mmc_host representing this slot.

 * @host: The MMC controller this slot is using.

 * @sdc_reg: Value of SDCR to be written before using this slot.

 * @sdio_irq: SDIO irq mask for this slot.

 * @mrq: mmc_request currently being processed or waiting to be

 *	processed, or NULL when the slot is idle.

 * @queue_node: List node for placing this node in the @queue list of

 *	&struct atmel_mci.

 * @clock: Clock rate configured by set_ios(). Protected by host->lock.

 * @flags: Random state bits associated with the slot.

 * @detect_pin: GPIO pin used for card detection, or negative if not

 *	available.

 * @wp_pin: GPIO pin used for card write protect sending, or negative

 *	if not available.

 * @detect_is_active_high: The state of the detect pin when it is active.

 * @detect_timer: Timer used for debouncing @detect_pin interrupts.

/*

 * The debugfs stuff below is mostly optimized away when

 * CONFIG_DEBUG_FS is not set.

 Make sure we get a consistent snapshot */

	/*

	 * Grab a more or less consistent snapshot. Note that we're

	 * not disabling interrupts, so IMR and SR may not be

	 * consistent.

 Don't read RSPR and RDR; it will consume the data there */

 sentinel */ }

 CONFIG_OF */

/*

 * Fix sconfig's burst size according to atmel MCI. We need to convert them as:

 * 1 -> 0, 4 -> 1, 8 -> 2, 16 -> 3.

 * With version 0x600, we need to convert them as: 1 -> 0, 2 -> 1, 4 -> 2,

 * 8 -> 3, 16 -> 4.

 *

 * This can be done by finding most significant bit set.

		/*

		 * With some SDIO modules, sometimes DMA transfer hangs. If

		 * stop_transfer() is not called then the DMA request is not

		 * removed, following ones are queued and never computed.

	/*

	 * It is easier here to use us instead of ns for the timeout,

	 * it prevents from overflows during calculation.

 Maximum clock frequency is host->bus_hz/2 */

/*

 * Return mask with command flags to be enabled for this command.

	/*

	 * This should really be MAXLAT_5 for CMD2 and ACMD41, but

	 * it's too difficult to determine whether this is an ACMD or

	 * not. Better make it 64.

/*

 * Configure given PDC buffer taking care of alignement issues.

 * Update host->data_size and host->sg.

 If size is different from modulo 4, transfer bytes */

 Else transfer 32-bits words */

 We assume the size of a page is 32-bits aligned */

/*

 * Configure PDC buffer according to the data size ie configuring one or two

 * buffers. Don't use this function if you want to configure only the second

 * buffer. In this case, use atmci_pdc_set_single_buf.

/*

 * Unmap sg lists, called when transfer is finished.

/*

 * Disable PDC transfers. Update pending flags to EVENT_XFER_COMPLETE after

 * having received ATMCI_TXBUFE or ATMCI_RXBUFF interrupt. Enable ATMCI_NOTBUSY

 * interrupt needed for both transfer directions.

/*

 * This function is called by the DMA driver from tasklet context.

 Disable DMA hardware handshaking on MCI */

	/*

	 * If the card was removed, data will be NULL. No point trying

	 * to send the stop command or waiting for NBUSY in this case.

		/*

		 * Regardless of what the documentation says, we have

		 * to wait for NOTBUSY even after block read

		 * operations.

		 *

		 * When the DMA transfer is complete, the controller

		 * may still be reading the CRC from the card, i.e.

		 * the data transfer is still in progress and we

		 * haven't seen all the potential error bits yet.

		 *

		 * The interrupt handler will schedule a different

		 * tasklet to finish things up when the data transfer

		 * is completely done.

		 *

		 * We may not complete the mmc request here anyway

		 * because the mmc layer may call back and cause us to

		 * violate the "don't submit new operations from the

		 * completion callback" rule of the dma engine

		 * framework.

/*

 * Returns a mask of interrupt flags to be enabled after the whole

 * request has been prepared.

	/*

	 * Errata: MMC data write operation with less than 12

	 * bytes is impossible.

	 *

	 * Errata: MCI Transmit Data Register (TDR) FIFO

	 * corruption when length is not multiple of 4.

/*

 * Set interrupt flags and set block length into the MCI mode register even

 * if this value is also accessible in the MCI block register. It seems to be

 * necessary before the High Speed MCI version. It also map sg and configure

 * PDC registers.

 Enable pdc mode */

 Set BLKLEN */

 Configure PDC */

	/*

	 * We don't do DMA on "complex" transfers, i.e. with

	 * non-word-aligned buffers or lengths. Also, we don't bother

	 * with all the DMA setup overhead for short transfers.

 If we don't have a channel, we can't do DMA */

/*

 * Start PDC according to transfer direction.

/*

 * Stop data transfer because error(s) occurred.

 Data transfer was stopped by the interrupt handler */

/*

 * Start a request: prepare data if needed, prepare the command and activate

 * interrupts.

 Send init sequence (74 clock cycles) */

 Must set block count/size before sending command */

	/*

	 * DMA transfer should be started before sending the command to avoid

	 * unexpected errors especially for read operations in SDIO mode.

	 * Unfortunately, in PDC mode, command has to be sent before starting

	 * the transfer.

	/*

	 * We could have enabled interrupts earlier, but I suspect

	 * that would open up a nice can of interesting race

	 * conditions (e.g. command and data complete, but stop not

	 * prepared yet.)

	/*

	 * We may "know" the card is gone even though there's still an

	 * electrical connection. If so, we really need to communicate

	 * this to the MMC core since there won't be any more

	 * interrupts as the card is completely removed. Otherwise,

	 * the MMC core might believe the card is still there even

	 * though the card was just removed very slowly.

 We don't support multiple blocks of weird lengths. */

		/*

		 * Use mirror of ios->clock to prevent race with mmc

		 * core ios update when finding the minimum.

 Calculate clock divider */

		/*

		 * WRPROOF and RDPROOF prevent overruns/underruns by

		 * stopping the clock when the FIFO is full/empty.

		 * This state is not expected to last for long.

 setup High Speed mode in relation with card capacity */

 Called with host->lock held */

	/*

	 * Update the MMC clock rate if necessary. This may be

	 * necessary if set_ios() is called when a different slot is

	 * busy transferring data.

 Read the response from the card (up to 16 bytes) */

	/*

	 * atmci_cleanup_slot() sets the ATMCI_SHUTDOWN flag before

	 * freeing the interrupt. We must not re-enable the interrupt

	 * if it has been freed, and if we're shutting down, it

	 * doesn't really matter whether the card is present or not.

 Clean up queue if present */

				/*

				 * Reset controller to terminate any ongoing

				 * commands or data transfers.

			/*

			 * Command has been sent, we are waiting for command

			 * ready. Then we have three next states possible:

			 * END_REQUEST by default, WAITING_NOTBUSY if it's a

			 * command needing it or DATA_XFER if there is data.

				/*

				 * If there is a command error don't start

				 * data transfer.

			/*

			 * A data transfer is in progress. The event expected

			 * to move to the next state depends of data transfer

			 * type (PDC or DMA). Once transfer done we can move

			 * to the next step which is WAITING_NOTBUSY in write

			 * case and directly SENDING_STOP in read case.

			/*

			 * We can be in the state for two reasons: a command

			 * requiring waiting not busy signal (stop command

			 * included) or a write operation. In the latest case,

			 * we need to send a stop command.

				/*

				 * For some commands such as CMD53, even if

				 * there is data transfer, there is no stop

				 * command to send.

			/*

			 * In this state, it is important to set host->data to

			 * NULL (which is tested in the waiting notbusy state)

			 * in order to go to the end request state instead of

			 * sending stop again.

 atmci_request_end() sets host->state */

			/*

			 * We can receive this interruption before having configured

			 * the second pdc buffer, so we need to reconfigure first and

			 * second buffers again

			/*

			 * We can receive this interruption before having configured

			 * the second pdc buffer, so we need to reconfigure first and

			 * second buffers again

		/*

		 * First mci IPs, so mainly the ones having pdc, have some

		 * issues with the notbusy signal. You can't get it after

		 * data transmission if you have not sent a stop command.

		 * The appropriate workaround is to use the BLKE signal.

	/*

	 * Disable interrupts until the pin has stabilized and check

	 * the state then. Use mod_timer() since we may be in the

	 * middle of the timer routine when this interrupt triggers.

	/*

	 * Without the read/write proof capability, it is strongly suggested to

	 * use only one bit for data to prevent fifo underruns and overruns

	 * which will corrupt data.

 Assume card is present initially */

 Debugfs stuff is cleaned up by mmc core */

/*

 * HSMCI (High Speed MCI) module is not fully compatible with MCI module.

 * HSMCI provides DMA support and a new config register but no more supports

 * PDC.

 keep only major version number */

 Get MCI capabilities and set operations according to it */

 We need at least one slot to succeed */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Freescale eSDHC controller driver.

 *

 * Copyright (c) 2007, 2010, 2012 Freescale Semiconductor, Inc.

 * Copyright (c) 2009 MontaVista Software, Inc.

 * Copyright 2020 NXP

 *

 * Authors: Xiaobo Xie <X.Xie@freescale.com>

 *	    Anton Vorontsov <avorontsov@ru.mvista.com>

/**

 * esdhc_read*_fixup - Fixup the value read from incompatible eSDHC register

 *		       to make it compatible with SD spec.

 *

 * @host: pointer to sdhci_host

 * @spec_reg: SD spec register address

 * @value: 32bit eSDHC register value on spec_reg address

 *

 * In SD spec, there are 8/16/32/64 bits registers, while all of eSDHC

 * registers are 32 bits. There are differences in register size, register

 * address, register function, bit position and function between eSDHC spec

 * and SD spec.

 *

 * Return a fixed up register value

	/*

	 * The bit of ADMA flag in eSDHC is not compatible with standard

	 * SDHC register, so set fake flag SDHCI_CAN_DO_ADMA2 when ADMA is

	 * supported by eSDHC.

	 * And for many FSL eSDHC controller, the reset value of field

	 * SDHCI_CAN_DO_ADMA1 is 1, but some of them can't support ADMA,

	 * only these vendor version is greater than 2.2/0x12 support ADMA.

	/*

	 * The DAT[3:0] line signal levels and the CMD line signal level are

	 * not compatible with standard SDHC register. The line signal levels

	 * DAT[7:0] are at bits 31:24 and the command line signal level is at

	 * bit 23. All other bits are the same as in the standard SDHC

	 * register.

	/*

	 * DTS properties of mmc host are used to enable each speed mode

	 * according to soc and board capability. So clean up

	 * SDR50/SDR104/DDR50 support bits here.

	/*

	 * Some controllers have unreliable Data Line Active

	 * bit for commands with busy signal. This affects

	 * Command Inhibit (data) bit. Just ignore it since

	 * MMC core driver has already polled card status

	 * with CMD13 after any command with busy siganl.

	/* Workaround for T4240-R1.0-R2.0 eSDHC which has incorrect

	 * vendor version and spec version information.

	/*

	 * "DMA select" locates at offset 0x28 in SD specification, but on

	 * P5020 or P3041, it locates at 0x29.

 DMA select is 22,23 bits in Protocol Control Register */

 fixup the result */

/**

 * esdhc_write*_fixup - Fixup the SD spec register value so that it could be

 *			written into eSDHC register.

 *

 * @host: pointer to sdhci_host

 * @spec_reg: SD spec register address

 * @value: 8/16/32bit SD spec register value that would be written

 * @old_value: 32bit eSDHC register value on spec_reg address

 *

 * In SD spec, there are 8/16/32/64 bits registers, while all of eSDHC

 * registers are 32 bits. There are differences in register size, register

 * address, register function, bit position and function between eSDHC spec

 * and SD spec.

 *

 * Return a fixed up register value

	/*

	 * Enabling IRQSTATEN[BGESEN] is just to set IRQSTAT[BGE]

	 * when SYSCTL[RSTD] is set for some special operations.

	 * No any impact on other operation.

		/*

		 * Postpone this write, we must do it together with a

		 * command write that is down below. Return old value.

		/*

		 * Two last DMA bits are reserved, and first one is used for

		 * non-standard blksz of 4096 bytes that we don't support

		 * yet. So clear the DMA boundary bits.

	/*

	 * eSDHC doesn't have a standard power control register, so we do

	 * nothing here to avoid incorrect operation.

	/*

	 * "DMA select" location is offset 0x28 in SD specification, but on

	 * P5020 or P3041, it's located at 0x29.

		/*

		 * If host control register is not standard, exit

		 * this function

 DMA select is 22,23 bits in Protocol Control Register */

 Prevent SDHCI core from writing reserved bits (e.g. HISPD) */

	/* Starting SW tuning requires ESDHC_SMPCLKSEL to be set

	 * 1us later after ESDHC_EXTN is set.

	/* Starting SW tuning requires ESDHC_SMPCLKSEL to be set

	 * 1us later after ESDHC_EXTN is set.

/*

 * For Abort or Suspend after Stop at Block Gap, ignore the ADMA

 * error(IRQSTAT[ADMAE]) if both Transfer Complete(IRQSTAT[TC])

 * and Block Gap Event(IRQSTAT[BGE]) are also set.

 * For Continue, apply soft reset for data(SYSCTL[RSTD]);

 * and re-issue the entire read transaction from beginning.

	/*

	 * Force update to the next DMA block boundary.

	/*

	 * IPGEN/HCKEN/PEREN bits exist on eSDHC whose vendor version

	 * is 2.2 or lower.

	/*

	 * Wait max 20 ms. If vendor version is 2.2 or lower, do not

	 * wait clock stable bit which does not exist.

 Wait max 20 ms */

 Start pre_div at 2 for vendor version < 2.3. */

 Fix clock value. */

 Calculate pre_div and div. */

 Limit clock division for HS400 200MHz clock for quirk. */

 Set clock division into register. */

	/*

	 * Wait max 20 ms. If vendor version is 2.2 or lower, do not

	 * wait clock stable bit which does not exist.

 Additional setting for HS400. */

 Wait max 20 ms */

	/*

	 * Add delay to make sure all the DMA transfers are finished

	 * for quirk.

	/*

	 * Save bus-width for eSDHC whose vendor version is 2.2

	 * or lower for data reset.

	/*

	 * Restore bus-width setting and interrupt registers for eSDHC

	 * whose vendor version is 2.2 or lower for data reset.

	/*

	 * Some bits have to be cleaned manually for eSDHC whose spec

	 * version is higher than 3.0 for all reset.

		/*

		 * Initialize eSDHC_DLLCFG1[DLL_PD_PULSE_STRETCH_SEL] to

		 * 0 for quirk.

/* The SCFG, Supplemental Configuration Unit, provides SoC specific

 * configuration and status registers for the device. There is a

 * SDHC IO VSEL control register on SCFG for some platforms. It's

 * used to support SDHC IO voltage switching.

 SDHC IO VSEL control register definition */

	/*

	 * Signal Voltage Switching is only applicable for Host Controllers

	 * v3.00 and above.

 Write TBCTL[11:8]=4'h8 */

 Read TBCTL[31:0] register and rewrite again */

 Read the TBSTAT[31:0] register twice */

 Reset data lines by setting ESDHCCTL[RSTD] */

 Write 32'hFFFF_FFFF to IRQSTAT register */

	/* If TBSTAT[15:8]-TBSTAT[7:0] > (4 * div_ratio) + 2

	 * or TBSTAT[7:0]-TBSTAT[15:8] > (4 * div_ratio) + 2,

	 * then program TBPTR[TB_WNDW_END_PTR] = 4 * div_ratio

	 * and program TBPTR[TB_WNDW_START_PTR] = 8 * div_ratio.

 Program TBPTR[TB_WNDW_END_PTR] and TBPTR[TB_WNDW_START_PTR] */

 Program the software tuning mode by setting TBCTL[TB_MODE]=2'h3 */

	/* For tuning mode, the sd clock divisor value

	 * must be larger than 3 according to reference manual.

	/*

	 * The eSDHC controller takes the data timeout value into account

	 * during tuning. If the SD card is too slow sending the response, the

	 * timer will expire and a "Buffer Read Ready" interrupt without data

	 * is triggered. This leads to tuning errors.

	 *

	 * Just set the timeout to the maximum value because the core will

	 * already take care of it in sdhci_send_tuning().

 Do HW tuning */

		/* For type2 affected platforms of the tuning erratum,

		 * tuning may succeed although eSDHC might not have

		 * tuned properly. Need to check tuning window.

		/* If HW tuning fails and triggers erratum,

		 * try workaround.

 Recover HS400 tuning flag */

 Do SW tuning */

 Retry both HW/SW tuning with reduced clock. */

 Recover HS400 tuning flag */

	/*

	 * There are specific registers setting for HS400 mode.

	 * Clean all of them if controller is in HS400 mode to

	 * exit HS400 mode before re-setting any speed mode.

 Isn't this already done by sdhci_resume_host() ? --rmk */

		/*

		 * esdhc->peripheral_clock would be assigned with a value

		 * which is eSDHC base clock when use periperal clock.

		 * For some platforms, the clock value got by common clk

		 * API is peripheral clock while the eSDHC base clock is

		 * 1/2 peripheral clock.

	/*

	 * This bit is not able to be reset by SDHCI_RESET_ALL. Need to

	 * initialize it as 1 or 0 once, to override the different value

	 * which may be configured in bootloader.

		/*

		 * Freescale messed up with P2020 as it has a non-standard

		 * host control register

 call to generic mmc_of_parse to support additional capabilities */

 SPDX-License-Identifier: GPL-2.0

/*

 * Freescale eSDHC ColdFire family controller driver, platform bus.

 *

 * Copyright (c) 2020 Timesys Corporation

 *   Author: Angelo Dureghello <angelo.dureghello@timesys.it>

/*

 * Freescale eSDHC has DMA ERR flag at bit 28, not as std spec says, bit 25.

/*

 * Note: mcf is big-endian, single bytes need to be accessed at big endian

 * offsets.

		/*

		 * Recomposition needed, restore always endianness and

		 * keep D3CD and AI, just setting bus width.

		/*

		 * As for the fsl driver,

		 * we have to set the mode in a single write here.

	/*

	 * For SDHCI_HOST_VERSION, sdhci specs defines 0xFE,

	 * a wrong offset for us, we are at 0xFC.

	/*

	 * RM (25.3.9) sd pin clock must never exceed 25Mhz.

	 * So forcing legacy mode at 25Mhz.

 Use maximum timeout counter */

	/*

	 * ColdFire eSDHC clock.s

	 *

	 * pll -+-> / outdiv1 --> fsys

	 *      +-> / outdiv3 --> eSDHC clock ---> / SDCCLKFS / DVS

	 *

	 * mcf5441x datasheet says:

	 * (8.1.2) eSDHC should be 40 MHz max

	 * (25.3.9) eSDHC input is, as example, 96 Mhz ...

	 * (25.3.9) sd pin clock must never exceed 25Mhz

	 *

	 * fvco = fsys * outdvi1 + 1

	 * fshdc = fvco / outdiv3 + 1

	/*

	 * Apply divisors and re-enable all the clocks

	/*

	 * On mcf5441x there is no hw sdma option/flag to select the dma

	 * transfer endiannes. A swap after the transfer is needed.

		 /*

		  * Mandatory quirk,

		  * controller does not support cmd23,

		  * without, on > 8G cards cmd23 is used, and

		  * driver times out.

 Card_detect */

 We have a working card_detect back */

 SPDX-License-Identifier: GPL-2.0

/*

 * sdhci_am654.c - SDHCI driver for TI's AM654 SOCs

 *

 * Copyright (C) 2018 Texas Instruments Incorporated - https://www.ti.com

 *

 CTL_CFG Registers */

 PHY Registers */

 Command Queue Host Controller Interface Base address */

 Disable delay chain mode */

 Configure PHY DLL frequency */

 Configure DLL TRIM */

 Configure DLL driver strength */

 Enable DLL */

	/*

	 * Poll for DLL ready. Use a one second timeout.

	 * Works in all experiments done so far

 Set ITAPCHGWIN before writing to ITAPDLY */

 Setup DLL Output TAP delay */

 Write to STRBSEL for HS400 speed mode */

 Setup DLL Output TAP delay */

 us */

		/*

		 * According to the data manual, HISPD bit

		 * should not be set in these speed modes.

		/*

		 * Power on will not happen until the card detect debounce

		 * timer expires. Wait at least 1.5 seconds for the power on

		 * bit to be set

	/*

	 * Tuning data remains in the buffer after tuning.

	 * Do a command and data reset to get rid of it

 Enable ITAPDLY */

	/*

	 * Having determined the length of the failing window and start of

	 * the passing window calculate the length of the passing window and

	 * set the final value halfway through it considering the range as a

	 * circular buffer

 sentinel */}

		/*

		 * ti,otap-del-sel-legacy is mandatory, look for old binding

		 * if not found.

			/*

			 * Remove the corresponding capability

			 * if an otap-del-sel value is not found

 Reset OTAP to default value */

 Calibrate IO lines */

 Enable pins by setting IO mux to 0 */

 Set slot type based on SD or eMMC */

 Enable tuning for SDR50 */

 sentinel */ }

 Update drvdata based on SoC revision */

 Clocks are enabled using pm_runtime */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2013 BayHub Technology Ltd.

 *

 * Authors: Peter Guo <peter.guo@bayhubtech.com>

 *          Adam Lee <adam.lee@canonical.com>

 *          Ernest Zhang <ernest.zhang@bayhubtech.com>

/*

 * O2Micro device registers

 Wait max 50 ms */

 PLL software reset */

 PLL force active */

 Wait max 20 ms */

 Wait for card detect finish */

 Cancel PLL force active */

/*

 * This function is used to detect dll lock status.

 * Since the dll lock status bit will toggle randomly

 * with very short interval which needs to be polled

 * as fast as possible. Set sleep_us as 1 microsecond.

 enable hardware tuning */

/*

 * This function is used to fix o2 dll shift issue.

 * It isn't necessary to detect card present before recovery.

 * Firstly, it is used by bht emmc card, which is embedded.

 * Second, before call recovery card present will be detected

 * outside of the execute tuning function.

 UnLock WP */

 Disable clock */

 PLL software reset */

 Enable Base Clk setting change */

 Enable internal clock */

			/*

			 * need wait at least 5ms for dll status stable,

			 * after enable internal clock

 Lock WP */

	/*

	 * This handler only implements the eMMC tuning that is specific to

	 * this controller.  Fall back to the standard method for other TIMING.

 Force power mode enter L0 */

 wait DLL lock, timeout value 5ms */

	/*

	 * Judge the tuning reason, whether caused by dll shift

	 * If cause by dll shift, should call sdhci_o2_dll_recovery

	/*

	 * o2 sdhci host didn't support 8bit emmc tuning

 Cancel force power mode enter L0 */

 Set led of SD host function enable */

 Improve write performance for SD3.0 */

 Enable Link abnormal reset generating Reset */

 set card power over current protection */

 adjust the output delay for SD mode */

 Set the output voltage setting of Aux 1.2v LDO */

 Set Max power supply capability of SD host */

 Set DLL Tuning Window */

 Set UHS2 T_EIDLE */

 Set UHS2 Termination */

 Set L1 Entrance Timer */

 Enable internal clock */

	/*

	 * mmc_select_bus_width() will test the bus to determine the actual bus

	 * width.

 set dll watch dog timer */

 This extra setup is required due to broken ADMA. */

 Set Multi 3 to VCC3V# */

 Disable CLK_REQ# support after media DET */

		/* Choose capabilities, enable SDMA.  We have to write 0x01

		 * to the capabilities register first to unlock it.

 Disable ADMA1/2 */

 Disable the infinite transfer mode */

 Lock WP */

 UnLock WP */

 DevId=8520 subId= 0x11 or 0x12  Type Chip support */

 Check Whether subId is 0x11 or 0x12 */

 Enable Base Clk setting change */

 Set Tuning Window to 4 */

 Enable 8520 led function */

 Set timeout CLK */

 Disable UHS1 funciton */

 Lock WP */

 UnLock WP */

 Set Tuning Windows to 5 */

 Lock WP */

/*

 * Copyright (C) 2013 Broadcom Corporation

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 protect back to back writes */

 This timeout should be sufficent for core to reset */

 reset the host using the top level reset */

 bring the host out of reset */

	/*

	 * Back-to-Back register write needs a delay of 1ms at bootup (min 10uS)

	 * Back-to-Back writes to same register needs delay when SD bus clock

	 * is very low w.r.t AHB clock, mainly during boot-time and during card

	 * insert-removal.

 enable the interrupt from the IP core */

 Enable the AHB clock gating module to the host */

	/*

	 * Back-to-Back register write needs a delay of 1ms at bootup (min 10uS)

	 * Back-to-Back writes to same register needs delay when SD bus clock

	 * is very low w.r.t AHB clock, mainly during boot-time and during card

	 * insert-removal.

/*

 * Software emulation of the SD card insertion/removal. Set insert=1 for insert

 * and insert=0 for removal. The card detection is done by GPIO. For Broadcom

 * IP to function properly the bit 0 of CORESTAT register needs to be set/reset

 * to generate the CD IRQ handled in sdhci.c which schedules card_tasklet.

	/*

	 * Back-to-Back register write needs a delay of min 10uS.

	 * Back-to-Back writes to same register needs delay when SD bus clock

	 * is very low w.r.t AHB clock, mainly during boot-time and during card

	 * insert-removal.

	 * We keep 20uS

/*

 * SD card interrupt event callback

	/*

	 *  JEDEC and SD spec specify supplying 74 continuous clocks to

	 * device after power up. With minimum bus (100KHz) that

	 * that translates to 740us

 deprecated name */

 Get and enable the core clock */

 if device is eMMC, emulate card insert right here */

	/*

	 * Since the card detection GPIO interrupt is configured to be

	 * edge sensitive, check the initial GPIO value here, emulate

	 * only if the card is present

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2013 Linaro Ltd.

 * Copyright (c) 2013 HiSilicon Limited.

/*

 * hi6220 sd only support io voltage 1.8v and 3v

 * Also need config AO_SCTRL_SEL18 accordingly

 reserved */ },

 SD */

 0: LEGACY 400k */

 1: MMC_HS */

 2: SD_HS */

 3: SDR12 */

 4: SDR25 */

 5: SDR50 */

 6: SDR104 */

 7: DDR50 */

 8: DDR52 */

 9: HS200 */

 SDIO */

 0: LEGACY 400k */

 1: MMC_HS */

 2: SD_HS */

 3: SDR12 */

 4: SDR25 */

 5: SDR50 */

 6: SDR104 */

 7: DDR50 */

 8: DDR52 */

 9: HS200 */

 We should delay 1ms wait for timing setting finished. */

	/*

	* A clock cycle is divided into 32 phases,

	* each of which is represented by a bit,

	* finding the optimal phase.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Secure Digital Host Controller Interface ACPI driver.

 *

 * Copyright (c) 2012, Intel Corporation.

 For eMMC, minimum is 1us but give it 9us for good measure */

 For eMMC, minimum is 200us but give it 300us for good measure */

/*

 * GPDwin uses PCI wifi which conflicts with SDIO's use of

 * acpi_device_fix_up_power() on child device nodes. Identifying GPDwin is

 * problematic, but since SDIO is only used for wifi, the presence of the PCI

 * wifi card in the expected slot with an ACPI companion node, is used to

 * indicate that acpi_device_fix_up_power() should be avoided.

 1000 kHz i.e. 1 MHz */

 AMD sdhci reset dll register. */

	/*

	 * This method is only called by mmc_select_hs200 so we only need to

	 * read from the HS200 (SDR104) preset register.

	 *

	 * Firmware that has "invalid/default" presets return a driver strength

	 * of A. This matches the previously hard coded value.

	/*

	 * We want the controller driver strength to match the card's driver

	 * strength so they have similar rise/fall times.

	 *

	 * The controller driver strength set by this method is sticky for all

	 * timings after this method is called. This unfortunately means that

	 * while HS400 tuning is in progress we end up with mismatched driver

	 * strengths between the controller and the card. HS400 tuning requires

	 * switching from HS400->DDR52->HS->HS200->HS400. So the driver mismatch

	 * happens while in DDR52 and HS modes. This has not been observed to

	 * cause problems. Enabling presets would fix this issue.

	/*

	 * The resulting card driver strength is only set when switching the

	 * card's timing to HS200 or HS400. The card will use the default driver

	 * strength (B) for any other mode.

 AMD Platform requires dll setting */

/*

 * The initialization sequence for HS400 is:

 *     HS->HS200->Perform Tuning->HS->HS400

 *

 * The re-tuning sequence is:

 *     HS400->DDR52->HS->HS200->Perform Tuning->HS->HS400

 *

 * The AMD eMMC Controller can only use the tuned clock while in HS200 and HS400

 * mode. If we switch to a different mode, we need to disable the tuned clock.

 * If we have previously performed tuning and switch back to HS200 or

 * HS400, we can re-enable the tuned clock.

 *

 DLL is only required for HS400 */

	/*

	 * There are two types of presets out in the wild:

	 * 1) Default/broken presets.

	 *    These presets have two sets of problems:

	 *    a) The clock divisor for SDR12, SDR25, and SDR50 is too small.

	 *       This results in clock frequencies that are 2x higher than

	 *       acceptable. i.e., SDR12 = 25 MHz, SDR25 = 50 MHz, SDR50 =

	 *       100 MHz.x

	 *    b) The HS200 and HS400 driver strengths don't match.

	 *       By default, the SDR104 preset register has a driver strength of

	 *       A, but the (internal) HS400 preset register has a driver

	 *       strength of B. As part of initializing HS400, HS200 tuning

	 *       needs to be performed. Having different driver strengths

	 *       between tuning and operation is wrong. It results in different

	 *       rise/fall times that lead to incorrect sampling.

	 * 2) Firmware with properly initialized presets.

	 *    These presets have proper clock divisors. i.e., SDR12 => 12MHz,

	 *    SDR25 => 25 MHz, SDR50 => 50 MHz. Additionally the HS200 and

	 *    HS400 preset driver strengths match.

	 *

	 *    Enabling presets for HS400 doesn't work for the following reasons:

	 *    1) sdhci_set_ios has a hard coded list of timings that are used

	 *       to determine if presets should be enabled.

	 *    2) sdhci_get_preset_value is using a non-standard register to

	 *       read out HS400 presets. The AMD controller doesn't support this

	 *       non-standard register. In fact, it doesn't expose the HS400

	 *       preset register anywhere in the SDHCI memory map. This results

	 *       in reading a garbage value and using the wrong presets.

	 *

	 *       Since HS400 and HS200 presets must be identical, we could

	 *       instead use the the SDR104 preset register.

	 *

	 *    If the above issues are resolved we could remove this quirk for

	 *    firmware that that has valid presets (i.e., SDR12 <= 12 MHz).

		/*

		 * The Lenovo Miix 320-10ICR has a bug in the _PS0 method of

		 * the SHC1 ACPI device, this bug causes it to reprogram the

		 * wrong LDO (DLDO3) to 1.8V if 1.8V modes are used and the

		 * card is (runtime) suspended + resumed. DLDO3 is used for

		 * the LCD and setting it to 1.8V causes the LCD to go black.

		/*

		 * The Acer Aspire Switch 10 (SW5-012) microSD slot always

		 * reports the card being write-protected even though microSD

		 * cards do not have a write-protect switch at all.

		/*

		 * The Toshiba WT8-B's microSD slot always reports the card being

		 * write-protected.

 Terminating entry */

 Power on the SDHCI controller and its children */

 SPDX-License-Identifier: GPL-2.0-only

/**

 * SDHCI Controller driver for TI's OMAP SoCs

 *

 * Copyright (C) 2017 Texas Instruments

 * Author: Kishon Vijay Abraham I <kishon@ti.com>

/*

 * Note that the register offsets used here are from omap_regs

 * base which is 0x100 for omap4 and later, and 0 for omap3 and

 * earlier.

 1 msec */

 180000 uV */

 300000 uV */

 330000 uV */

 sdhci-omap controller flags */

 Offset for omap regs from base */

 Offset for SDHCI regs from base */

 Offset for omap specific registers from base */

 Omap specific context save */

 Pick the right voltage to allow 3.0V for 3.3V nominal PBIAS */

 wait 1ms */

 clock tuning is not needed for upto 52MHz */

	/*

	 * OMAP5/DRA74X/DRA72x Errata i802:

	 * DCRC error interrupts (MMCHS_STAT[21] DCRC=0x1) can occur

	 * during the tuning procedure. So disable it during the

	 * tuning procedure.

	/*

	 * Stage 1: Search for a maximum pass window ignoring any

	 * any single point failures. If the tuning value ends up

	 * near it, move away from it in stage 2 below

 ignore single point failure */

	/*

	 * Assign tuning value as a ratio of maximum pass window based

	 * on temperature

	/*

	 * Stage 2: Search for a single point failure near the chosen tuning

	 * value in two steps. First in the +3 to +10 range and then in the

	 * +2 to -10 range. If found, move away from it in the appropriate

	 * direction by the appropriate amount depending on the temperature.

 Reenable forbidden interrupt */

	/*

	 * Delay is required for PSTATE to correctly reflect

	 * DLEV/CLEV values after PADEN is set.

/*

 * MMCHS_HL_HWINFO has the MADMA_EN bit set if the controller instance

 * is connected to L3 interconnect and is bus master capable. Note that

 * the MMCHS_HL_HWINFO register is in the module registers before the

 * omap registers and sdhci registers. The offset can vary for omap

 * registers depending on the SoC. Do not use sdhci_omap_readl() here.

 MMCHS_HL_HWINFO register is only available on omap4 and later */

 Switch to DMA slave mode when using external DMA */

 wait 1ms */

 20000 micro Sec */

 Save target module sysconfig configured by SoC PM layer */

 Don't reset data lines during tuning operation */

		/*

		 * Since we are not resetting data lines during tuning

		 * operation, data error or data complete interrupts

		 * might still arrive. Mark this request as a failure

		 * but still wait for the data interrupt

		/*

		 * Sometimes command error interrupts and command complete

		 * interrupt will arrive together. Clear all command related

		 * interrupts here.

	/*

	 * Quirk handling to allow 3.0V vqmmc with a valid 3.3V PBIAS. This is

	 * needed for 3.0V ldo9_reg on omap5 at least.

 voltage capabilities might be set by boot loader, clear it */

 sentinel */

 Prevent invalid restore on first resume */

	/*

	 * omap_device_pm_domain has callbacks to enable the main

	 * functional clock, interface clock and also configure the

	 * SYSCONFIG register of omap devices. The callback will be invoked

	 * as part of pm_runtime_get_sync.

	/*

	 * Switch to external DMA only if there is the "dmas" property and

	 * ADMA is not available on the controller instance.

 R1B responses is required to properly manage HW busy detection. */

 Allow card power off and runtime PM for eMMC/SD card devices */

	/*

	 * SDIO devices can use the dat1 pin as a wake-up interrupt. Some

	 * devices like wl1xxx, use an out-of-band GPIO interrupt instead.

 Ensure device gets disabled despite userspace sysfs config */

 Order matters here, HCTL must be restored in two phases */

/*

 * drivers/mmc/host/omap_hsmmc.c

 *

 * Driver for OMAP2430/3430 MMC controller.

 *

 * Copyright (C) 2007 Texas Instruments.

 *

 * Authors:

 *	Syed Mohammed Khasim	<x0khasim@ti.com>

 *	Madhusudhan		<madhu.cr@ti.com>

 *	Mohit Jalori		<mjalori@ti.com>

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2. This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

 OMAP HSMMC Host Controller Registers */

 max clock divisor: 1023 */

 PSTATE */

 Interrupt masks for IE and ISE register */

 20 mSec */

 20000 micro Sec */

/*

 * One controller can have multiple slots, like on some omap boards using

 * omap.c controller driver. Luckily this is not currently done on any known

 * omap_hsmmc.c device.

/*

 * MMC Host controller read/write API's

 Prevent races with irq handler */

 Auto CMD23 support */

 SDIO irq enabled */

 Enable interface voltage rail, if needed */

	/*

	 * If we don't see a Vcc regulator, assume it's a fixed

	 * voltage always-on regulator.

	/*

	 * Assume Vcc regulator is used only to power the card ... OMAP

	 * VDDS is used to power the pins, optionally with a transceiver to

	 * support cards using voltages other than VDDS (1.8V nominal).  When a

	 * transceiver is used, DAT3..7 are muxed as transceiver control pins.

	 *

	 * In some cases this regulator won't support enable/disable;

	 * e.g. it's a fixed rail for a WLAN chip.

	 *

	 * In other cases vcc_aux switches interface power.  Example, for

	 * eMMC cards it represents VccQ.  Sometimes transceivers or SDIO

	 * chips/cards need an interface voltage rail too.

	/*

	 * disable regulators enabled during boot and get the usecount

	 * right so that regulators can be enabled/disabled by checking

	 * the return value of regulator_is_enabled

 Allow an aux regulator */

 For eMMC do not power off when not in sleep state */

/*

 * Start clock to the card

/*

 * Stop clock to the card

 Disable timeout for erases */

 latch pending CIRQ, but don't signal MMC core */

 no transfer running but need to keep cirq if enabled */

 Calculate divisor for the given clock frequency */

 Wait till the ICS bit is set */

	/*

	 * Enable High-Speed Support

	 * Pre-Requisites

	 *	- Controller should support High-Speed-Enable Bit

	 *	- Controller should not be using DDR Mode

	 *	- Controller should advertise that it supports High Speed

	 *	  in capabilities register

	 *	- MMC/SD clock coming out of controller > 25MHz

 configure in DDR mode */

/*

 * Restore the MMC host context, if it was lost as result of a

 * power state change.

 Do not initialize card-specific things if the power is off */

/*

 * Save the MMC host context (store the number of power state changes so far).

/*

 * Send init stream sequence to card

 * before sending IDLE command

/*

 * Configure the response type and send the cmd.

	/*

	 * Unlike OMAP1 controller, the cmdtype does not seem to be based on

	 * ac, bc, adtc, bcr. Only commands ending an open ended transfer need

	 * a val of 0x3, rest 0x0.

 Do not complete the request if DMA is still in progress */

/*

 * Notify the transfer complete to MMC core

 TC before CC from CMD6 - don't know why, but it happens */

/*

 * Notify the core about command completion

 response type 2 */

 response types 1, 1b, 3, 4, 5, 6 */

/*

 * DMA clean up for command errors

/*

 * Readable error output

 --- means reserved bit without definition at documentation */

 CONFIG_MMC_DEBUG */

/*

 * MMC controller internal state machines reset

 *

 * Used to reset command or data internal state machines, using respectively

 *  SRC or SRD bit of SYSCTL register

 * Can be called from interrupt context

	/*

	 * OMAP4 ES2 and greater has an updated reset logic.

	 * Monitor a 0->1 transition first

/*

 * MMC controller IRQ handler

 Flush posted write */

/*

 * Switch MMC interface voltage ... only relevant for MMC1.

 *

 * MMC2 and MMC3 use fixed 1.8V levels, and maybe a transceiver.

 * The MMC2 transceiver controls are used instead of DAT4..DAT7.

 * Some chips, like eMMC ones, use internal transceivers.

 Disable the clocks */

 Turn the power off */

 Turn the power ON with given VDD 1.8 or 3.0v */

	/*

	 * If a MMC dual voltage card is detected, the set_ios fn calls

	 * this fn with VDD bit set for 1.8V. Upon card removal from the

	 * slot, omap_hsmmc_set_ios sets the VDD back to 3V on MMC_POWER_OFF.

	 *

	 * Cope with a bit of slop in the range ... per data sheets:

	 *  - "1.8V" for vdds_mmc1/vdds_mmc1a can be up to 2.45V max,

	 *    but recommended values are 1.71V to 1.89V

	 *  - "3.0V" for vdds_mmc1/vdds_mmc1a can be up to 3.5V max,

	 *    but recommended values are 2.7V to 3.3V

	 *

	 * Board setup code shouldn't permit anything very out-of-range.

	 * TWL4030-family VMMC1 and VSIM regulators are fine (avoiding the

	 * middle range) but VSIM can't power DAT4..DAT7 at more than 3V.

 If DMA has finished after TC, complete the request */

 Check if next job is already prepared */

/*

 * Routine to configure and start DMA for the MMC card

 Sanity check: all the SG entries must be aligned by block size. */

		/* REVISIT: The MMC buffer increments only when MSB is written.

		 * Return error for blksz which is non multiple of four.

 FIXME: cleanup */

 Does not fail */

/*

 * Configure block length for MMC/SD cards and initiate the transfer.

			/*

			 * Set an arbitrary 100ms data timeout for commands with

			 * busy signal and no indication of busy_timeout.

/*

 * Request function. for read/write operation

 Routine to configure clock values. Exposed API to core */

 FIXME: set registers based only on changes to ios */

		/* Only MMC1 can interface at 3V without some flavor

		 * of external transceiver; but they all handle 1.8V.

				/*

				 * The mmc_select_voltage fn of the core does

				 * not seem to set the power_mode to

				 * MMC_POWER_UP upon recalculating the voltage.

				 * vdd 1.8v.

		/*

		 * REVISIT: should be moved to sdio core and made more

		 * general e.g. by expanding the DT bindings of child nodes

		 * to provide a mechanism to provide this information:

		 * Documentation/devicetree/bindings/mmc/mmc-card.yaml

			/*

			 * We have TI wl1251 attached to MMC3. Pass this

			 * information to the SDIO core because it can't be

			 * probed by normal methods.

	/*

	 * if enable, piggy back detection on current request

	 * but always disable immediately

 flush posted write */

	/*

	 * For omaps with wake-up path, wakeirq will be irq from pinctrl and

	 * for other omaps, wakeirq will be from GPIO (dat line remuxed to

	 * gpio). wakeirq is needed to detect sdio irq in runtime suspend state

	 * with functional clock disabled.

	/*

	 * Some omaps don't have wake-up path from deeper idle states

	 * and need to remux SDIO DAT1 to GPIO for wake-up from idle.

 Only MMC1 supports 3.0V */

 Set SD bus power bit */

 This controller can't do multiblock reads due to hw bugs */

 See 35xx errata 2.1.1.128 in SPRZ278F */

 out of memory */

	/*

	 * MMC can still work without debounce clock.

	/* Set this to a value that allows allocating an entire descriptor

 Block Length at max can be 1024 */

 No. of Blocks is 16 bits */

	/*

	 * Limit the maximum segment size to the lower of the request size

	 * and the DMA engine device segment size limits.  In reality, with

	 * 32-bit transfers, the DMA engine can do longer segments than this

	 * but there is no way to represent that in the DMA model - if we

	 * increase this figure here, we get warnings from the DMA API debug.

 Request IRQ for MMC operations */

	/*

	 * For now, only support SDIO interrupt if we have a separate

	 * wake-up interrupt configured from device tree. This is because

	 * the wake-up interrupt is needed for idle state and some

	 * platforms need special quirks. And we don't want to add new

	 * legacy mux platform init code callbacks any longer as we

	 * are moving to DT based booting anyways.

 Routine to resume the MMC device */

 disable sdio irq handling to prevent race */

			/*

			 * dat1 line low, pending sdio irq

			 * race condition: possible irq handler running on

			 * multi-core, abort

 irq lost, if pinmux incorrect */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for Synopsys DesignWare Cores Mobile Storage Host Controller

 *

 * Copyright (C) 2018 Synaptics Incorporated

 *

 * Author: Jisheng Zhang <jszhang@kernel.org>

 DWCMSHC specific Mode Select value */

 DWC IP vendor area 1 pointer */

 Offset inside the  vendor area 1 */

 Rockchip specific Registers */

 Rockchip specified optional clocks */

 P_VENDOR_SPECIFIC_AREA reg */

 pointer to SoC private stuff */

/*

 * If DMA addr spans 128MB boundary, we split the DMA transfer into two

 * so that each DMA transfer doesn't exceed the boundary.

	/*

	 * No matter V4 is enabled or not, ARGUMENT2 register is 32-bit

	 * block count register which doesn't support stuff bits of

	 * CMD23 argument on dwcmsch host controller.

 Select Bus Speed Mode for host */

	/*

	 * DO NOT TOUCH THIS SETTING. RX clk inverter unit is enabled

	 * by default, but it shouldn't be enabled. We should anyway

	 * disable it before issuing any cmds.

 Rockchip platform only support 375KHz for identify mode */

 Disable cmd conflict check */

 Disable DLL to reset sample clock */

 Reset DLL */

 Init DLL settings */

 tune clock stop en */

 pre-change delay */

 post-change delay */

 Disable cmd conflict check */

 Reset previous settings */

	/*

	 * extra adma table cnt for cross 128M boundary handling.

 SPDX-License-Identifier: GPL-2.0-or-later

 Copyright (C) 2019 ASPEED Technology Inc. */

 Copyright (C) 2019 IBM Corp. */

 SDIO{10,20} */

 SDIO{14,24} */

/*

 * The function sets the mirror register for updating

 * capbilities of the current slot.

 *

 *   slot | capability  | caps_reg | mirror_reg

 *   -----|-------------|----------|------------

 *     0  | CAP1_1_8V   | SDIO140  |   SDIO10

 *     0  | CAP2_SDR104 | SDIO144  |   SDIO14

 *     1  | CAP1_1_8V   | SDIO240  |   SDIO20

 *     1  | CAP2_SDR104 | SDIO244  |   SDIO24

 Set/clear 8 bit mode */

 Measured value with *handwave* environmentals and static loading */

	/*

	 * Regarding the AST2600:

	 *

	 * If (EMMC12C[7:6], EMMC12C[15:8] == 0) then

	 *   period of SDCLK = period of SDMCLK.

	 *

	 * If (EMMC12C[7:6], EMMC12C[15:8] != 0) then

	 *   period of SDCLK = period of SDMCLK * 2 * (EMMC12C[7:6], EMMC[15:8])

	 *

	 * If you keep EMMC12C[7:6] = 0 and EMMC12C[15:8] as one-hot,

	 * 0x1/0x2/0x4/etc, you will find it is compatible to AST2400 or AST2500

	 *

	 * Keep the one-hot behaviour for backwards compatibility except for

	 * supporting the value 0 in (EMMC12C[7:6], EMMC12C[15:8]), and capture

	 * the 0-value capability in clk_div_start.

 Set/clear 8-bit mode */

 Set/clear 1 or 4 bit mode */

 SDHCI/Slot 0 */

 SDHCI/Slot 1 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Toshiba PCI Secure Digital Host Controller Interface driver

 *

 *  Copyright (C) 2014 Ondrej Zary

 *  Copyright (C) 2007 Richard Betts, All Rights Reserved.

 *

 *	Based on asic3_mmc.c, copyright (c) 2005 SDG Systems, LLC and,

 *	sdhci.c, copyright (C) 2005-2006 Pierre Ossman

 end: all zeroes */ },

 enable clock */

 reset */

 assert */

 deassert */

 Clear card registers */

 SDIO clock? */

 enable LED */

 set interrupt masks */

/* Set MMC clock / power.

 * Note: This controller uses a simple divider scheme therefore it cannot run

 * SD/MMC cards at full speed (24/20MHz). HCLK (=33MHz PCI clock?) is too high

 * and the next slowest is 16MHz (div=2).

 disable the divider */

 Write something to end the command */

	/* Ensure we dont read more than one block. The chip will interrupt us

	 * When the next block is available.

 Transfer the data */

 R2 */

 R1, R1B, R3, R6, R7 */

	/* If there is data to handle we will

 nothing to do: it's not our IRQ */

 Card insert/remove. The mmc controlling code is stateless. */

 Data transfer */

 Command completion */

 Data transfer completion */

 removed from ipaq-asic3.h for some reason */

 MMC_DATA_WRITE does not require a bit to be set */

 Send the command */

 Set transfer length and blocksize */

 Process requests from the MMC layer */

 abort if card not present */

 active low */

 mask all interrupts */

 disable card clock */

 power down card */

 disable clock */

 CONFIG_PM_SLEEP */

 Set MMC host parameters */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Synopsys DesignWare Multimedia Card Interface driver

 *  (Based on NXP driver for lpc 31xx)

 *

 * Copyright (C) 2009 NXP Semiconductors

 * Copyright (C) 2009, 2010 Imagination Technologies Ltd.

 Common flag combinations */

 unit: HZ */

 unit: HZ */

 Control Descriptor */

 Reserved */

Buffer sizes */

 Reserved */

 Lower 32-bits of Buffer Address Pointer 1*/

 Upper 32-bits of Buffer Address Pointer 1*/

 Lower 32-bits of Next Descriptor Address */

 Upper 32-bits of Next Descriptor Address */

 Control Descriptor */

 Buffer sizes */

 buffer 1 physical address */

 buffer 2 physical address */

 Each descriptor can transfer up to 4KB of data in chained mode */

 Make sure we get a consistent snapshot */

 defined(CONFIG_DEBUG_FS) */

 wait till resets clear */

	/*

	 * Databook says that before issuing a new data transfer command

	 * we need to check to see if the card is busy.  Data transfer commands

	 * all have SDMMC_CMD_PRV_DAT_WAIT set, so we'll key off that.

	 *

	 * ...also allow sending for SDMMC_CMD_VOLT_SWITCH where busy is

	 * expected.

 drain writebuffer */

 Special bit makes CMD11 not die */

 Change state to continue to handle CMD11 weirdness */

		/*

		 * We need to disable low power mode (automatic clock stop)

		 * while doing voltage switch so we don't confuse the card,

		 * since stopping the clock is a specific part of the UHS

		 * voltage change dance.

		 *

		 * Note that low power mode (SDMMC_CLKEN_LOW_PWR) will be

		 * unconditionally turned back on in dw_mci_setup_bus() if it's

		 * ever called with a non-zero clock.  That shouldn't happen

		 * until the voltage change is all done.

 We expect a response, so set this bit */

 add a bit spare time */

	/*

	 * The durations we're working with are fairly short so we have to be

	 * extra careful about synchronization here.  Specifically in hardware a

	 * command timeout is _at most_ 5.1 ms, so that means we expect an

	 * interrupt (either command done or timeout) to come rather quickly

	 * after the mci_writel.  ...but just in case we have a long interrupt

	 * latency let's add a bit of paranoia.

	 *

	 * In general we'll assume that at least an interrupt will be asserted

	 * in hardware by the time the cto_timer runs.  ...and if it hasn't

	 * been asserted in hardware by that time then we'll assume it'll never

	 * come.

 drain writebuffer */

 response expected command only */

 DMA interface functions */

 Data transfer was stopped by the interrupt handler */

 Software reset of DMA */

 Disable and reset the IDMAC interface */

 Stop the IDMAC running */

 Invalidate cache after read */

	/*

	 * If the card was removed, data will be NULL. No point in trying to

	 * send the stop command or waiting for NBUSY in this case.

 Number of descriptors in the ring buffer */

 Forward link the descriptor list */

 Initialize reserved and buffer size fields to "0" */

 Set the last descriptor as the end-of-ring descriptor */

 Number of descriptors in the ring buffer */

 Forward link the descriptor list */

 Set the last descriptor as the end-of-ring descriptor */

 Mask out interrupts - get Tx & Rx complete only */

 Set the descriptor base address */

 Mask out interrupts - get Tx & Rx complete only */

 Set the descriptor base address */

			/*

			 * Wait for the former clear OWN bit operation

			 * of IDMAC to make sure that this descriptor

			 * isn't still owned by IDMAC as IDMAC's write

			 * ops and CPU's read ops are asynchronous.

			/*

			 * Set the OWN bit and disable interrupts

			 * for this descriptor

 Buffer length */

 Physical address to DMA to/from */

 Update physical address for the next desc */

 Save pointer to the last descriptor */

 Set first descriptor */

 Set last descriptor */

 restore the descriptor chain as it's polluted */

			/*

			 * Wait for the former clear OWN bit operation

			 * of IDMAC to make sure that this descriptor

			 * isn't still owned by IDMAC as IDMAC's write

			 * ops and CPU's read ops are asynchronous.

			/*

			 * Set the OWN bit and disable interrupts

			 * for this descriptor

 Buffer length */

 Physical address to DMA to/from */

 Update physical address for the next desc */

 Save pointer to the last descriptor */

 Set first descriptor */

 Set last descriptor */

 restore the descriptor chain as it's polluted */

 drain writebuffer */

 Make sure to reset DMA in case we did PIO before this */

 Select IDMAC interface */

 drain writebuffer */

 Enable the IDMAC */

 Start it running */

 Set external dma config: burst size, burst width */

 Match burst msize with external dma config */

 Set dw_mci_dmac_complete_dma as callback */

 Flush cache before write */

 Request external dma channel */

	/*

	 * We don't do DMA on "complex" transfers, i.e. with

	 * non-word-aligned buffers or lengths. Also, we don't bother

	 * with all the DMA setup overhead for short transfers.

 This data might be unmapped at this time */

 Use platform get_cd function, else try onboard card detect */

 pio should ship this scenario */

	/*

	 * MSIZE is '1',

	 * if blksz is not a multiple of the FIFO width

	/*

	 * If idx is '0', it won't be tried

	 * Thus, initial values are uesed

	/*

	 * CDTHRCTL doesn't exist prior to 240A (in fact that register offset is

	 * in the FIFO region, so we really shouldn't access it).

	/*

	 * Card write Threshold is introduced since 2.80a

	 * It's used when HS400 mode is enabled.

	/*

	 * If (blksz_depth) >= (fifo_depth >> 1), should be 'thld_size <= blksz'

	 * If (blksz_depth) <  (fifo_depth >> 1), should be thld_size = blksz

	 * Currently just choose blksz.

 If we don't have a channel, we can't do DMA */

	/*

	 * Decide the MSIZE and RX/TX Watermark.

	 * If current block size is same with previous size,

	 * no need to update fifoth.

 Enable the DMA interface */

 Disable RX/TX IRQs, let DMA handle it */

 We can't do DMA, try PIO for this one */

		/*

		 * Use the initial fifoth_val for PIO mode. If wm_algined

		 * is set, we set watermark same as data size.

		 * If next issued data may be transfered by DMA mode,

		 * prev_blksz should be invalidated.

		/*

		 * Keep the current block size.

		 * It will be used to decide whether to update

		 * fifoth register next time.

 We must continue to set bit 28 in CMD until the change is complete */

			/*

			 * move the + 1 after the divide to prevent

			 * over-clocking the card.

 Silent the verbose log if calling from PM context */

			/*

			 * If card is polling, display the message only

			 * one time at boot time.

 disable clock */

 inform CIU */

 set clock to desired speed */

 inform CIU */

 enable clock; only low power if no SDIO */

 inform CIU */

 keep the last clock value that was requested from core */

 Set the current slot bus width */

 this is the first command, send the initialization clock */

 drain writebuffer */

		/*

		 * Databook says to fail after 2ms w/ no response, but evidence

		 * shows that sometimes the cmd11 interrupt takes over 130ms.

		 * We'll set to 500ms, plus an extra jiffy just in case jiffies

		 * is just about to roll over.

		 *

		 * We do this whole thing under spinlock and only if the

		 * command hasn't already completed (indicating the the irq

		 * already ran so we don't want the timeout).

 must be called with host->lock held */

		/*

		 * this case isn't expected to happen, so we can

		 * either crash here or just try to continue on

		 * in the closest possible state

	/*

	 * The check for card presence and queueing of the request must be

	 * atomic, otherwise the card could be removed in between and the

	 * request wouldn't fail until another card was inserted.

 set default 1 bit mode */

 DDR mode set */

	/*

	 * Use mirror of ios->clock to prevent race with mmc

	 * core ios update when finding the minimum.

return, if failed turn on vmmc*/

 Keep track so we don't reset again */

 Reset our state machine after powering on */

 Adjust clock / bus width after power is up */

 Turn clock off before power goes down */

	/*

	 * Check the busy bit which is low when DAT[3:0]

	 * (the data lines) are 0000

	/*

	 * Program the voltage.  Note that some instances of dw_mmc may use

	 * the UHS_REG for this.  For other instances (like exynos) the UHS_REG

	 * does no harm but you need to set the regulator directly.  Try both.

 Use platform get_ro function, else try on board write protect */

	/*

	 * According to eMMC spec, card reset procedure:

	 * tRstW >= 1us:   RST_n pulse width

	 * tRSCA >= 200us: RST_n to Command time

	 * tRSTH >= 1us:   RST_n high period

	/*

	 * Low power mode will stop the card clock when idle.  According to the

	 * description of the CLKENA register we should disable low power mode

	 * for SDIO cards if we need SDIO interrupts to work.

 Enable/disable Slot Specific SDIO interrupt */

 Avoid runtime suspending the device when SDIO IRQ is enabled */

	/*

	 * Resetting generates a block interrupt, hence setting

	 * the scatter-gather pointer to NULL.

		/*

		 * In all cases we clear the RAWINTS

		 * register to clear any interrupts.

 Wait for dma_req to be cleared */

 when using DMA next we reset the fifo again */

 if the controller reset bit did clear, then set clock regs */

 It is also required that we reinit idmac */

 After a CTRL reset we need to have CIU set clock registers  */

	/*

	 * Only inject an error if we haven't already got an error or data over

	 * interrupt.

	/*

	 * Try to inject the error at random points during the data transfer.

 Read the response from the card (up to 16 bytes) */

				/*

				 * No data CRC status was returned.

				 * The number of bytes transferred

				 * will be exaggerated in PIO mode.

 SDMMC_INT_SBE is included */

		/*

		 * After an error, there may be data lingering

		 * in the FIFO

 add a bit spare time */

	/*

	 * Really be certain that the timer has stopped.  This is a bit of

	 * paranoia and could only really happen if we had really bad

	 * interrupt latency and the interrupt routine and timeout were

	 * running concurrently so that the del_timer() in the interrupt

	 * handler couldn't run.

 Extra paranoia just like dw_mci_clear_pending_cmd_complete() */

				/*

				 * During UHS tuning sequence, sending the stop

				 * command after the response CRC error would

				 * throw the system into a confused state

				 * causing all future tuning phases to report

				 * failure.

				 *

				 * In such case controller will move into a data

				 * transfer state after a response error or

				 * response CRC error. Let's let that finish

				 * before trying to send a stop, so we'll go to

				 * STATE_SENDING_DATA.

				 *

				 * Although letting the data transfer take place

				 * will waste a bit of time (we already know

				 * the command was bad), it can't cause any

				 * errors since it's possible it would have

				 * taken place anyway if this tasklet got

				 * delayed. Allowing the transfer to take place

				 * avoids races and keeps things simple.

			/*

			 * We could get a data error and never a transfer

			 * complete so we'd better check for it here.

			 *

			 * Note that we don't really care if we also got a

			 * transfer complete; stopping the DMA and sending an

			 * abort won't hurt.

				/*

				 * If all data-related interrupts don't come

				 * within the given time in reading data state.

			/*

			 * Handle an EVENT_DATA_ERROR that might have shown up

			 * before the transfer completed.  This might not have

			 * been caught by the check above because the interrupt

			 * could have gone off between the previous check and

			 * the check for transfer complete.

			 *

			 * Technically this ought not be needed assuming we

			 * get a DATA_COMPLETE eventually (we'll notice the

			 * error and end the request), but it shouldn't hurt.

			 *

			 * This has the advantage of sending the stop command.

				/*

				 * If data error interrupt comes but data over

				 * interrupt doesn't come within the given time.

				 * in reading data state.

 stop command for open-ended transfer*/

				/*

				 * If we don't have a command complete now we'll

				 * never get one since we just reset everything;

				 * better end the request.

				 *

				 * If we do have a command complete we'll fall

				 * through to the SENDING_STOP command and

				 * everything will be peachy keen.

			/*

			 * If err has non-zero,

			 * stop-abort command has been already issued.

 CMD error in data command */

 push final bytes to part_buf, only use during push */

 append bytes to part_buf, only use during push */

 pull first bytes from part_buf, only use during pull */

 pull final bytes from the part_buf, assuming it's just been filled */

 try and push anything in the part_buf */

 memcpy from input buffer into aligned buffer */

 push data from aligned buffer into fifo */

 put anything remaining in the part_buf */

 Push data if we have reached the expected data length */

 pull data from fifo into aligned buffer */

 memcpy from aligned buffer into output buffer */

 try and push anything in the part_buf */

 memcpy from input buffer into aligned buffer */

 push data from aligned buffer into fifo */

 put anything remaining in the part_buf */

 Push data if we have reached the expected data length */

 pull data from fifo into aligned buffer */

 memcpy from aligned buffer into output buffer */

 try and push anything in the part_buf */

 memcpy from input buffer into aligned buffer */

 push data from aligned buffer into fifo */

 put anything remaining in the part_buf */

 Push data if we have reached the expected data length */

 pull data from fifo into aligned buffer */

 memcpy from aligned buffer into output buffer */

 get remaining partial bytes */

 get the rest of the data */

 if the RXDR is ready read again */

 drain writebuffer */

 if TXDR write again */

 drain writebuffer */

 drain writebuffer */

 read-only mask reg */

 Check volt switch first, since it can look like an error */

			/*

			 * Hold the lock; we know cmd11_timer can't be kicked

			 * off after the lock is released, so safe to delete.

 drain writebuffer */

 if there is an error report DATA_ERROR */

 drain writebuffer */

 drain writebuffer */

 Handle IDMA interrupts */

 Process SDIO IRQs through the sdio_irq_work. */

if there are external regulators, get them*/

 Useful defaults if platform data is unset. */

 TRANS_MODE_PIO */

 BLKSIZ is 16 bits */

 Debugfs stuff is cleaned up by mmc core */

	/*

	* Check tansfer mode from HCON[17:16]

	* Clear the ambiguous description of dw_mmc databook:

	* 2b'00: No DMA Interface -> Actually means using Internal DMA block

	* 2b'01: DesignWare DMA Interface -> Synopsys DW-DMA block

	* 2b'10: Generic DMA Interface -> non-Synopsys generic DMA block

	* 2b'11: Non DW DMA Interface -> pio only

	* Compared to DesignWare DMA Interface, Generic DMA Interface has a

	* simpler request/acknowledge handshake mechanism and both of them

	* are regarded as external dma master for dw_mmc.

 Determine which DMA interface to use */

		/*

		* Check ADDR_CONFIG bit in HCON to find

		* IDMAC address bus width

 host supports IDMAC in 64-bit address mode */

 host supports IDMAC in 32-bit address mode */

 Alloc memory for sg translation */

 TRANS_MODE_EDMAC: check dma bindings again */

	/*

	 * If somehow we have very bad interrupt latency it's remotely possible

	 * that the timer could fire while the interrupt is still pending or

	 * while the interrupt is midway through running.  Let's be paranoid

	 * and detect those two cases.  Note that this is paranoia is somewhat

	 * justified because in this function we don't actually cancel the

	 * pending command in the controller--we just assume it will never come.

 read-only mask reg */

 The interrupt should fire; no need to act but we can warn */

 Presumably interrupt handler couldn't delete the timer */

	/*

	 * Continued paranoia to make sure we're in the state we expect.

	 * This paranoia isn't really justified but it seems good to be safe.

		/*

		 * If CMD_DONE interrupt does NOT come in sending command

		 * state, we should notify the driver to terminate current

		 * transfer and report a command timeout to the core.

	/*

	 * The DTO timer is much longer than the CTO timer, so it's even less

	 * likely that we'll these cases, but it pays to be paranoid.

 read-only mask reg */

 The interrupt should fire; no need to act but we can warn */

 Presumably interrupt handler couldn't delete the timer */

	/*

	 * Continued paranoia to make sure we're in the state we expect.

	 * This paranoia isn't really justified but it seems good to be safe.

		/*

		 * If DTO interrupt does NOT come in sending data state,

		 * we should notify the driver to terminate current transfer

		 * and report a data timeout to the core.

 find reset controller when exist */

 CONFIG_OF */

 CONFIG_OF */

	/*

	 * No need for CD if all slots have a non-error GPIO

	 * as well as broken card detection is found.

	/*

	 * Get the host data width - this assumes that HCON has been set with

	 * the correct values.

 Check for a reserved value, and warn if it is */

 Reset all blocks */

 Clear the interrupts for the host controller */

 disable all mmc interrupt first */

 Put in max timeout */

	/*

	 * FIFO threshold settings  RxMark  = fifo_size / 2 - 1,

	 *                          Tx Mark = fifo_size / 2 DMA Size = 8

		/*

		 * Power-on value of RX_WMark is FIFO_DEPTH-1, but this may

		 * have been overwritten by the bootloader, just like we're

		 * about to do, so if you know the value for your hardware, you

		 * should put it in the platform data.

 disable clock to CIU */

	/*

	 * In 2.40a spec, Data offset is changed.

	 * Need to check the version-id and set data-offset for DATA register.

	/*

	 * Enable interrupts for command done, data over, data empty,

	 * receive ready and error such as transmit, receive timeout, crc error

 Enable mci interrupt */

 We need at least one slot to succeed */

 Now that slots are all setup, we can enable card detect */

 disable all mmc interrupt first */

 disable clock to CIU */

	/*

	 * Restore the initial value at FIFOTH register

	 * And Invalidate the prev_blksz with zero

 Put in max timeout */

 Force setup bus to guarantee available clock output */

 Re-enable SDIO interrupts. */

 Now that slots are all setup, we can enable card detect */

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Amlogic Meson6/Meson8/Meson8b/Meson8m2 SDHC MMC host controller driver.

 *

 * Copyright (C) 2020 Martin Blumenstingl <martin.blumenstingl@googlemail.com>

		/*

		 * If command with no data, just wait response done

		 * interrupt(int[0]), and if command with data transfer, just

		 * wait dma done interrupt(int[11]), don't need care about

		 * dat0 busy or not.

 hardware flush: */

 software flush: */

 enable the new IRQs and mask all pending ones */

		/*

		 * according to Amlogic the following latching points are

		 * selected with empirical values, there is no (known) formula

		 * to calculate these.

 reset the current window */

 the last window is the best (or possibly only) window */

 there was a better window than the last */

 no window was found at all, reset to the original phase */

 disable interrupts and mask all pending ones */

			/*

			 * If MESON_SDHC_PDMA_RXFIFO_MANUAL_FLUSH was

			 * previously 0x1 then it has to be set to 0x3. If it

			 * was 0x0 before then it has to be set to 0x2. Without

			 * this reading SD cards sometimes transfers garbage,

			 * which results in cards not being detected due to:

			 *   unrecognised SCR structure version <random number>

		/*

		 * Clear the FIFOs after completing data transfers to prevent

		 * corrupting data on write access. It's not clear why this is

		 * needed (for reads and writes), but it mimics what the BSP

		 * kernel did.

	/*

	 * start with a valid divider and enable the memory (un-setting

	 * MESON_SDHC_CLKC_MEM_PWR_OFF).

 some initialization bits depend on the SoC: */

 disable and mask all interrupts: */

 accessing any register requires the module clock to be enabled: */

 Get regulators and the supported OCR mask */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

 Copyright (C) 2020 IBM Corp. */

/*

 * drivers/mmc/host/sdhci-spear.c

 *

 * Support of SDHCI platform devices for spear soc family

 *

 * Copyright (C) 2010 ST Microelectronics

 * Viresh Kumar <vireshk@kernel.org>

 *

 * Inspired by sdhci-pltfm.c

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 sdhci ops */

 clk enable */

	/*

	 * It is optional to use GPIOs for sdhci card detection. If we

	 * find a descriptor using slot GPIO, we use it.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Arasan Secure Digital Host Controller Interface.

 * Copyright (C) 2011 - 2012 Michal Simek <monstr@monstr.eu>

 * Copyright (c) 2012 Wind River Systems, Inc.

 * Copyright (C) 2013 Pengutronix e.K.

 * Copyright (C) 2013 Xilinx Inc.

 *

 * Based on sdhci-of-esdhc.c

 *

 * Copyright (c) 2007 Freescale Semiconductor, Inc.

 * Copyright (c) 2009 MontaVista Software, Inc.

 *

 * Authors: Xiaobo Xie <X.Xie@freescale.com>

 *	    Anton Vorontsov <avorontsov@ru.mvista.com>

 Default settings for ZynqMP Clock Phases */

/*

 * On some SoCs the syscon area has a feature where the upper 16-bits of

 * each 32-bit register act as a write mask for the lower 16-bits.  This allows

 * atomic updates of the register without locking.  This macro is used on SoCs

 * that have that feature.

/**

 * struct sdhci_arasan_soc_ctl_field - Field used in sdhci_arasan_soc_ctl_map

 *

 * @reg:	Offset within the syscon of the register containing this field

 * @width:	Number of bits for this field

 * @shift:	Bit offset within @reg of this field (or -1 if not avail)

/**

 * struct sdhci_arasan_soc_ctl_map - Map in syscon to corecfg registers

 *

 * @baseclkfreq:	Where to find corecfg_baseclkfreq

 * @clockmultiplier:	Where to find corecfg_clockmultiplier

 * @support64b:		Where to find SUPPORT64B bit

 * @hiword_update:	If true, use HIWORD_UPDATE to access the syscon

 *

 * It's up to the licensee of the Arsan IP block to make these available

 * somewhere if needed.  Presumably these will be scattered somewhere that's

 * accessible via the syscon API.

/**

 * struct sdhci_arasan_clk_ops - Clock Operations for Arasan SD controller

 *

 * @sdcardclk_ops:	The output clock related operations

 * @sampleclk_ops:	The sample clock related operations

/**

 * struct sdhci_arasan_clk_data - Arasan Controller Clock Data.

 *

 * @sdcardclk_hw:	Struct for the clock we might provide to a PHY.

 * @sdcardclk:		Pointer to normal 'struct clock' for sdcardclk_hw.

 * @sampleclk_hw:	Struct for the clock we might provide to a PHY.

 * @sampleclk:		Pointer to normal 'struct clock' for sampleclk_hw.

 * @clk_phase_in:	Array of Input Clock Phase Delays for all speed modes

 * @clk_phase_out:	Array of Output Clock Phase Delays for all speed modes

 * @set_clk_delays:	Function pointer for setting Clock Delays

 * @clk_of_data:	Platform specific runtime clock data storage pointer

/**

 * struct sdhci_arasan_data - Arasan Controller Data

 *

 * @host:		Pointer to the main SDHCI host structure.

 * @clk_ahb:		Pointer to the AHB clock

 * @phy:		Pointer to the generic phy

 * @is_phy_on:		True if the PHY is on; false if not.

 * @has_cqe:		True if controller has command queuing engine.

 * @clk_data:		Struct for the Arasan Controller Clock Data.

 * @clk_ops:		Struct for the Arasan Controller Clock Operations.

 * @soc_ctl_base:	Pointer to regmap for syscon for soc_ctl registers.

 * @soc_ctl_map:	Map to get offsets into soc_ctl registers.

 * @quirks:		Arasan deviations from spec.

 Controller does not have CD wired and will not function normally without */

/* Controller immediately reports SDHCI_CLOCK_INT_STABLE after enabling the

/*

 * Some of the Arasan variations might not have timing requirements

 * met at 25MHz for Default Speed mode, those controllers work at

 * 19MHz instead

/**

 * sdhci_arasan_syscon_write - Write to a field in soc_ctl registers

 *

 * @host:	The sdhci_host

 * @fld:	The field to write to

 * @val:	The value to write

 *

 * This function allows writing to fields in sdhci_arasan_soc_ctl_map.

 * Note that if a field is specified as not available (shift < 0) then

 * this function will silently return an error code.  It will be noisy

 * and print errors for any other (unexpected) errors.

 *

 * Return: 0 on success and error value on error

	/*

	 * Silently return errors for shift < 0 so caller doesn't have

	 * to check for fields which are optional.  For fields that

	 * are required then caller needs to do something special

	 * anyway.

 Yell about (unexpected) regmap errors */

			/*

			 * If PHY off, set clock to max speed and power PHY on.

			 *

			 * Although PHY docs apparently suggest power cycling

			 * when changing the clock the PHY doesn't like to be

			 * powered on while at low speeds like those used in ID

			 * mode.  Even worse is powering the PHY on while the

			 * clock is off.

			 *

			 * To workaround the PHY limitations, the best we can

			 * do is to power it on at a faster speed and then slam

			 * through low speeds without power cycling.

			/*

			 * We'll now fall through to the below case with

			 * ctrl_phy = false (so we won't turn off/on).  The

			 * sdhci_set_clock() will set the real clock.

			/*

			 * At higher clock speeds the PHY is fine being power

			 * cycled and docs say you _should_ power cycle when

			 * changing clock speeds.

		/*

		 * Some of the Arasan variations might not have timing

		 * requirements met at 25MHz for Default Speed mode,

		 * those controllers work at 19MHz instead.

 Set the Input and Output Clock Phase Delays */

		/*

		 * Some controllers immediately report SDHCI_CLOCK_INT_STABLE

		 * after enabling the clock even though the clock is not

		 * stable. Trying to use a clock without waiting here results

		 * in EILSEQ while detecting some older/slower cards. The

		 * chosen delay is the maximum delay from sdhci_set_clock.

		/*

		 * Plese don't switch to 1V8 as arasan,5.1 doesn't

		 * actually refer to this setting to indicate the

		 * signal voltage and the state machine will be broken

		 * actually if we force to enable 1V8. That's something

		 * like broken quirk but we could work around here.

 We don't support 3V3 and 1V2 */

/**

 * sdhci_arasan_suspend - Suspend method for the driver

 * @dev:	Address of the device structure

 *

 * Put the device in a low power state.

 *

 * Return: 0 on success and error value on error

/**

 * sdhci_arasan_resume - Resume method for the driver

 * @dev:	Address of the device structure

 *

 * Resume operation after suspend

 *

 * Return: 0 on success and error value on error

 ! CONFIG_PM_SLEEP */

/**

 * sdhci_arasan_sdcardclk_recalc_rate - Return the card clock rate

 *

 * @hw:			Pointer to the hardware clock structure.

 * @parent_rate:		The parent rate (should be rate of clk_xin).

 *

 * Return the current actual rate of the SD card clock.  This can be used

 * to communicate with out PHY.

 *

 * Return: The card clock rate.

/**

 * sdhci_arasan_sampleclk_recalc_rate - Return the sampling clock rate

 *

 * @hw:			Pointer to the hardware clock structure.

 * @parent_rate:		The parent rate (should be rate of clk_xin).

 *

 * Return the current actual rate of the sampling clock.  This can be used

 * to communicate with out PHY.

 *

 * Return: The sample clock rate.

/**

 * sdhci_zynqmp_sdcardclk_set_phase - Set the SD Output Clock Tap Delays

 *

 * @hw:			Pointer to the hardware clock structure.

 * @degrees:		The clock phase shift between 0 - 359.

 *

 * Set the SD Output Clock Tap Delays for Output path

 *

 * Return: 0 on success and error value on error

 This is applicable for SDHCI_SPEC_300 and above */

 For 50MHz clock, 30 Taps are available */

 For 100MHz clock, 15 Taps are available */

 For 200MHz clock, 8 Taps are available */

 Set the Clock Phase */

 Release DLL Reset */

/**

 * sdhci_zynqmp_sampleclk_set_phase - Set the SD Input Clock Tap Delays

 *

 * @hw:			Pointer to the hardware clock structure.

 * @degrees:		The clock phase shift between 0 - 359.

 *

 * Set the SD Input Clock Tap Delays for Input path

 *

 * Return: 0 on success and error value on error

 This is applicable for SDHCI_SPEC_300 and above */

 Assert DLL Reset */

 For 50MHz clock, 120 Taps are available */

 For 100MHz clock, 60 Taps are available */

 For 200MHz clock, 30 Taps are available */

 Set the Clock Phase */

/**

 * sdhci_versal_sdcardclk_set_phase - Set the SD Output Clock Tap Delays

 *

 * @hw:			Pointer to the hardware clock structure.

 * @degrees:		The clock phase shift between 0 - 359.

 *

 * Set the SD Output Clock Tap Delays for Output path

 *

 * Return: 0 on success and error value on error

 This is applicable for SDHCI_SPEC_300 and above */

 For 50MHz clock, 30 Taps are available */

 For 100MHz clock, 15 Taps are available */

 For 200MHz clock, 8 Taps are available */

 Set the Clock Phase */

/**

 * sdhci_versal_sampleclk_set_phase - Set the SD Input Clock Tap Delays

 *

 * @hw:			Pointer to the hardware clock structure.

 * @degrees:		The clock phase shift between 0 - 359.

 *

 * Set the SD Input Clock Tap Delays for Input path

 *

 * Return: 0 on success and error value on error

 This is applicable for SDHCI_SPEC_300 and above */

 For 50MHz clock, 120 Taps are available */

 For 100MHz clock, 60 Taps are available */

 For 200MHz clock, 30 Taps are available */

 Set the Clock Phase */

 Issue DLL Reset */

 ZynqMP SD controller does not perform auto tuning in DDR50 mode */

/**

 * sdhci_arasan_update_clockmultiplier - Set corecfg_clockmultiplier

 *

 * @host:		The sdhci_host

 * @value:		The value to write

 *

 * The corecfg_clockmultiplier is supposed to contain clock multiplier

 * value of programmable clock generator.

 *

 * NOTES:

 * - Many existing devices don't seem to do this and work fine.  To keep

 *   compatibility for old hardware where the device tree doesn't provide a

 *   register map, this function is a noop if a soc_ctl_map hasn't been provided

 *   for this platform.

 * - The value of corecfg_clockmultiplier should sync with that of corresponding

 *   value reading from sdhci_capability_register. So this function is called

 *   once at probe time and never called again.

 Having a map is optional */

 If we have a map, we expect to have a syscon */

/**

 * sdhci_arasan_update_baseclkfreq - Set corecfg_baseclkfreq

 *

 * @host:		The sdhci_host

 *

 * The corecfg_baseclkfreq is supposed to contain the MHz of clk_xin.  This

 * function can be used to make that happen.

 *

 * NOTES:

 * - Many existing devices don't seem to do this and work fine.  To keep

 *   compatibility for old hardware where the device tree doesn't provide a

 *   register map, this function is a noop if a soc_ctl_map hasn't been provided

 *   for this platform.

 * - It's assumed that clk_xin is not dynamic and that we use the SDHCI divider

 *   to achieve lower clock rates.  That means that this function is called once

 *   at probe time and never called again.

 Having a map is optional */

 If we have a map, we expect to have a syscon */

	/*

	 * Read Tap Delay values from DT, if the DT does not contain the

	 * Tap Values then use the pre-defined values.

 The values read are Input and Output Clock Delays in order */

/**

 * arasan_dt_parse_clk_phases - Read Clock Delay values from DT

 *

 * @dev:		Pointer to our struct device.

 * @clk_data:		Pointer to the Clock Data structure

 *

 * Called at initialization to parse the values of Clock Delays.

	/*

	 * This has been kept as a pointer and is assigned a function here.

	 * So that different controller variants can assign their own handling

	 * function.

 SoC-specific compatible strings w/ soc_ctl_map */

 Generic compatible below here */

 sentinel */ }

/**

 * sdhci_arasan_register_sdcardclk - Register the sdcardclk for a PHY to use

 *

 * @sdhci_arasan:	Our private data structure.

 * @clk_xin:		Pointer to the functional clock

 * @dev:		Pointer to our struct device.

 *

 * Some PHY devices need to know what the actual card clock is.  In order for

 * them to find out, we'll provide a clock through the common clock framework

 * for them to query.

 *

 * Return: 0 on success and error value on error

/**

 * sdhci_arasan_register_sampleclk - Register the sampleclk for a PHY to use

 *

 * @sdhci_arasan:	Our private data structure.

 * @clk_xin:		Pointer to the functional clock

 * @dev:		Pointer to our struct device.

 *

 * Some PHY devices need to know what the actual card clock is.  In order for

 * them to find out, we'll provide a clock through the common clock framework

 * for them to query.

 *

 * Return: 0 on success and error value on error

/**

 * sdhci_arasan_unregister_sdclk - Undoes sdhci_arasan_register_sdclk()

 *

 * @dev:		Pointer to our struct device.

 *

 * Should be called any time we're exiting and sdhci_arasan_register_sdclk()

 * returned success.

/**

 * sdhci_arasan_update_support64b - Set SUPPORT_64B (64-bit System Bus Support)

 * @host:		The sdhci_host

 * @value:		The value to write

 *

 * This should be set based on the System Address Bus.

 * 0: the Core supports only 32-bit System Address Bus.

 * 1: the Core supports 64-bit System Address Bus.

 *

 * NOTE:

 * For Keem Bay, it is required to clear this bit. Its default value is 1'b1.

 * Keem Bay does not support 64-bit access.

 Having a map is optional */

 If we have a map, we expect to have a syscon */

/**

 * sdhci_arasan_register_sdclk - Register the sdcardclk for a PHY to use

 *

 * @sdhci_arasan:	Our private data structure.

 * @clk_xin:		Pointer to the functional clock

 * @dev:		Pointer to our struct device.

 *

 * Some PHY devices need to know what the actual card clock is.  In order for

 * them to find out, we'll provide a clock through the common clock framework

 * for them to query.

 *

 * Note: without seriously re-architecting SDHCI's clock code and testing on

 * all platforms, there's no way to create a totally beautiful clock here

 * with all clock ops implemented.  Instead, we'll just create a clock that can

 * be queried and set the CLK_GET_RATE_NOCACHE attribute to tell common clock

 * framework that we're doing things behind its back.  This should be sufficient

 * to create nice clean device tree bindings and later (if needed) we can try

 * re-architecting SDHCI if we see some benefit to it.

 *

 * Return: 0 on success and error value on error

 Providing a clock to the PHY is optional; no error if missing */

 If clock-frequency property is set, use the provided value */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * CQHCI crypto engine (inline encryption) support

 *

 * Copyright 2020 Google LLC

 Map from blk-crypto modes to CQHCI crypto algorithm IDs and key sizes */

 Clear CFGE */

 Write the key */

 Write dword 17 */

 Write dword 16, which includes the new value of CFGE */

 In XTS mode, the blk_crypto_key's size is already doubled */

	/*

	 * Clear the crypto cfg on the device. Clearing CFGE

	 * might not be sufficient, so just clear the entire cfg.

/*

 * The keyslot management operations for CQHCI crypto.

 *

 * Note that the block layer ensures that these are never called while the host

 * controller is runtime-suspended.  However, the CQE won't necessarily be

 * "enabled" when these are called, i.e. CQHCI_ENABLE might not be set in the

 * CQHCI_CFG register.  But the hardware allows that.

/**

 * cqhci_crypto_init - initialize CQHCI crypto support

 * @cq_host: a cqhci host

 *

 * If the driver previously set MMC_CAP2_CRYPTO and the CQE declares

 * CQHCI_CAP_CS, initialize the crypto support.  This involves reading the

 * crypto capability registers, initializing the blk_crypto_profile, clearing

 * all keyslots, and enabling 128-bit task descriptors.

 *

 * Return: 0 if crypto was initialized or isn't supported; whether

 *	   MMC_CAP2_CRYPTO remains set indicates which one of those cases it is.

 *	   Also can return a negative errno value on unexpected error.

	/*

	 * CCAP.CFGC is off by one, so the actual number of crypto

	 * configurations (a.k.a. keyslots) is CCAP.CFGC + 1.

 Unfortunately, CQHCI crypto only supports 32 DUN bits. */

	/*

	 * Cache all the crypto capabilities and advertise the supported crypto

	 * modes and data unit sizes to the block layer.

 Clear all the keyslots so that we start in a known state. */

 CQHCI crypto requires the use of 128-bit task descriptors. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2010 Marvell International Ltd.

 *		Zhangfei Gao <zhangfei.gao@marvell.com>

 *		Kevin Wang <dwang4@marvell.com>

 *		Jun Nie <njun@marvell.com>

 *		Qiming Wu <wuqm@marvell.com>

 *		Philip Rakity <prakity@marvell.com>

 Turn on/off Dynamic SD Clock Gating */

 Disable/enable Clock Gate */

 Clock Gate Control */

		/*

		 * tune timing of read data/command when crc error happen

		 * no performance impact

 on-chip device */

 If slot design supports 8 bit data, indicate this to MMC. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Access SD/MMC cards through SPI master controllers

 *

 * (C) Copyright 2005, Intec Automation,

 *		Mike Lavender (mike@steroidmicros)

 * (C) Copyright 2006-2007, David Brownell

 * (C) Copyright 2007, Axis Communications,

 *		Hans-Peter Nilsson (hp@axis.com)

 * (C) Copyright 2007, ATRON electronic GmbH,

 *		Jan Nikitenko <jan.nikitenko@gmail.com>

 for R1_SPI_* bit values */

/* NOTES:

 *

 * - For now, we won't try to interoperate with a real mmc/sd/sdio

 *   controller, although some of them do have hardware support for

 *   SPI protocol.  The main reason for such configs would be mmc-ish

 *   cards like DataFlash, which don't support that "native" protocol.

 *

 *   We don't have a "DataFlash/MMC/SD/SDIO card slot" abstraction to

 *   switch between driver stacks, and in any case if "native" mode

 *   is available, it will be faster and hence preferable.

 *

 * - MMC depends on a different chipselect management policy than the

 *   SPI interface currently supports for shared bus segments:  it needs

 *   to issue multiple spi_message requests with the chipselect active,

 *   using the results of one message to decide the next one to issue.

 *

 *   Pending updates to the programming interface, this driver expects

 *   that it not share the bus with other drivers (precluding conflicts).

 *

 * - We tell the controller to keep the chipselect active from the

 *   beginning of an mmc_host_ops.request until the end.  So beware

 *   of SPI controller drivers that mis-handle the cs_change flag!

 *

 *   However, many cards seem OK with chipselect flapping up/down

 *   during that time ... at least on unshared bus segments.

/*

 * Local protocol constants, internal to data block protocols.

 Response tokens used to ack each block written: */

/* Read and write blocks start with these tokens and end with crc;

 * on error, read tokens act like a subset of R2_SPI_* values.

 single block r/w, multiblock read */

 multiblock write */

 terminate multiblock write */

/* One of the critical speed parameters is the amount of data which may

 * be transferred in one command. If this value is too low, the SD card

 * controller has to do multiple partial block writes (argggh!). With

 * today (2008) SD cards there is little speed gain if we transfer more

 * than 64 KBytes at a time. So use this value until there is any indication

 * that we should do more here.

***************************************************************************/

/*

 * Local Data Structures

 "scratch" is per-{command,block} data exchanged with the card */

 for bulk data transfers */

 for status readback */

 underlying DMA-aware controller, or null */

 buffer used for commands and for message "overhead" */

	/* Specs say to write ones most of the time, even when the card

	 * has no need to read its input data; and many cards won't care.

	 * This is our source of those ones.

***************************************************************************/

/*

 * MMC-over-SPI protocol glue, used by the MMC stack interface

 chipselect will always be inactive after setup() */

 If we need long timeouts, we may release the CPU */

/*

 * Note that for SPI, cmd->resp[0] is not the same data as "native" protocol

 * hosts return!  The low byte holds R1_SPI bits.  The next byte may hold

 * R2_SPI bits ... for SEND_STATUS, or after data read errors.

 *

 * cmd->resp[1] holds any four-byte response, for R3 (READ_OCR) and on

 * newer cards R7 (IF_COND).

 return zero, else negative errno after setting cmd->error */

	/* Except for data block reads, the whole response will already

	 * be stored in the scratch buffer.  It's somewhere after the

	 * command and the first byte we read after it.  We ignore that

	 * first byte.  After STOP_TRANSMISSION command it may include

	 * two data bits, but otherwise it's all ones.

 Data block reads (R1 response types) may need more data... */

		/* Card sends N(CR) (== 1..8) bytes of all-ones then one

		 * status byte ... and we already scanned 2 bytes.

		 *

		 * REVISIT block read paths use nasty byte-at-a-time I/O

		 * so it can always DMA directly into the target buffer.

		 * It'd probably be better to memcpy() the first chunk and

		 * avoid extra i/o calls...

		 *

		 * Note we check for more than 8 bytes, because in practice,

		 * some SD cards are slow...

 Houston, we have an ugly card with a bit-shifted response */

 read the next byte */

 Status byte: the entire seven-bit R1 response.  */

 Bad address */

 Function not implemented */

 Illegal byte sequence */

 I/O error */

 else R1_SPI_IDLE, "it's resetting" */

	/* SPI R1B == R1 + busy; STOP_TRANSMISSION (for multiblock reads)

	 * and less-common stuff like various erase operations.

 maybe we read all the busy tokens already */

	/* SPI R2 == R1 + second status byte; SEND_STATUS

	 * SPI R5 == R1 + data byte; IO_RW_DIRECT

 read the next byte */

 SPI R3, R4, or R7 == R1 + 4 bytes */

 read the next byte */

 SPI R1 == just one status byte */

 disable chipselect on errors and some success cases */

/* Issue command and read its response.

 * Returns zero on success, negative for error.

 *

 * On error, caller must cope with mmc core retry mechanism.  That

 * means immediate low-level resubmit, which affects the bus lock...

	/* We can handle most commands (except block reads) in one full

	 * duplex I/O operation before either starting the next transfer

	 * (data block or command) or else deselecting the card.

	 *

	 * First, write 7 bytes:

	 *  - an all-ones byte to ensure the card is ready

	 *  - opcode byte (plus start and transmission bits)

	 *  - four bytes of big-endian argument

	 *  - crc7 (plus end bit) ... always computed, it's cheap

	 *

	 * We init the whole buffer to all-ones, which is what we need

	 * to write while we're reading (later) response data.

	/* Then, read up to 13 bytes (while writing all-ones):

	 *  - N(CR) (== 1..8) bytes of all-ones

	 *  - status byte (for all response types)

	 *  - the rest of the response, either:

	 *      + nothing, for R1 or R1B responses

	 *	+ second status byte, for R2 responses

	 *	+ four data bytes, for R3 and R7 responses

	 *

	 * Finally, read some more bytes ... in the nice cases we know in

	 * advance how many, and reading 1 more is always OK:

	 *  - N(EC) (== 0..N) bytes of all-ones, before deselect/finish

	 *  - N(RC) (== 1..N) bytes of all-ones, before next command

	 *  - N(WR) (== 1..N) bytes of all-ones, before data write

	 *

	 * So in those cases one full duplex I/O of at most 21 bytes will

	 * handle the whole command, leaving the card ready to receive a

	 * data block or new command.  We do that whenever we can, shaving

	 * CPU and IRQ costs (especially when using DMA or FIFOs).

	 *

	 * There are two other cases, where it's not generally practical

	 * to rely on a single I/O:

	 *

	 *  - R1B responses need at least N(EC) bytes of all-zeroes.

	 *

	 *    In this case we can *try* to fit it into one I/O, then

	 *    maybe read more data later.

	 *

	 *  - Data block reads are more troublesome, since a variable

	 *    number of padding bytes precede the token and data.

	 *      + N(CX) (== 0..8) bytes of all-ones, before CSD or CID

	 *      + N(AC) (== 1..many) bytes of all-ones

	 *

	 *    In this case we currently only have minimal speedups here:

	 *    when N(CR) == 1 we can avoid I/O in response_get().

 min(N(CR)) + status */

 R1 */

 max(N(CR)) + status + min(N(RC),N(WR)) */

 R2/R5 */

 R3/R4/R7 */

 R1B */

 else:  R1 (most commands) */

 send command, leaving chipselect active */

 after no-data commands and STOP_TRANSMISSION, chipselect off */

/* Build data message with up to four separate transfers.  For TX, we

 * start by writing the data token.  And in most cases, we finish with

 * a status transfer.

 *

 * We always provide TX data for data and CRC.  The MMC/SD protocol

 * requires us to write ones; but Linux defaults to writing zeroes;

 * so we explicitly initialize it to all ones on RX paths.

 *

 * We also handle DMA mapping, so the underlying SPI controller does

 * not need to (re)do it for each message.

	/* for reads, readblock() skips 0xff bytes before finding

	 * the token; for writes, this transfer issues that token.

	/* Body of transfer is buffer, then CRC ...

	 * either TX-only, or RX with TX-ones.

 length and actual buffer info are written later */

 the actual CRC may get written later */

	/*

	 * A single block read is followed by N(EC) [0+] all-ones bytes

	 * before deselect ... don't bother.

	 *

	 * Multiblock reads are followed by N(AC) [1+] all-ones bytes before

	 * the next block is read, or a STOP_TRANSMISSION is issued.  We'll

	 * collect that single byte, so readblock() doesn't need to.

	 *

	 * For a write, the one-byte data response follows immediately, then

	 * come zero or more busy bytes, then N(WR) [1+] all-ones bytes.

	 * Then single block reads may deselect, and multiblock ones issue

	 * the next token (next data block, or STOP_TRAN).  We can try to

	 * minimize I/O ops by using a single read to collect end-of-busy.

/*

 * Write one block:

 *  - caller handled preceding N(WR) [1+] all-ones bytes

 *  - data block

 *	+ token

 *	+ data bytes

 *	+ crc16

 *  - an all-ones byte ... card writes a data-response byte

 *  - followed by N(EC) [0+] all-ones bytes, card writes zero/'busy'

 *

 * Return negative errno, else success.

	/*

	 * Get the transmission data-response reply.  It must follow

	 * immediately after the data block we transferred.  This reply

	 * doesn't necessarily tell whether the write operation succeeded;

	 * it just says if the transmission was ok and whether *earlier*

	 * writes succeeded; see the standard.

	 *

	 * In practice, there are (even modern SDHC-)cards which are late

	 * in sending the response, and miss the time frame by a few bits,

	 * so we have to cope with this situation and check the response

	 * bit-by-bit. Arggh!!!

 First 3 bit of pattern are undefined */

 left-adjust to leading 0 bit */

 right-adjust for pattern matching. Code is in bit 4..0 now. */

 host shall then issue MMC_STOP_TRANSMISSION */

		/* host shall then issue MMC_STOP_TRANSMISSION,

		 * and should MMC_SEND_STATUS to sort it out

	/* Return when not busy.  If we didn't collect that status yet,

	 * we'll need some more I/O.

 card is non-busy if the most recent bit is 1 */

/*

 * Read one block:

 *  - skip leading all-ones bytes ... either

 *      + N(AC) [1..f(clock,CSD)] usually, else

 *      + N(CX) [0..8] when reading CSD or CID

 *  - data block

 *	+ token ... if error token, no data or crc

 *	+ data bytes

 *	+ crc16

 *

 * After single block reads, we're done; N(EC) [0+] all-ones bytes follow

 * before dropping chipselect.

 *

 * For multiblock reads, caller either reads the next block or issues a

 * STOP_TRANSMISSION command.

	/* At least one SD card sends an all-zeroes byte when N(CX)

	 * applies, before the all-ones bytes ... just cope with that.

	/* The token may be bit-shifted...

	 * the first 0-bit precedes the data stream.

		/* Walk through the data and the crc and do

		 * all the magic to get byte-aligned data.

/*

 * An MMC/SD data stage includes one or more blocks, optional CRCs,

 * and inline handshaking.  That handhaking makes it unlike most

 * other SPI protocol stacks.

	/* Handle scatterlist segments one at a time, with synch for

	 * each 512-byte block

		/* set up dma mapping for controller drivers that might

		 * use DMA ... though they may fall back to PIO

 never invalidate whole *shared* pages ... */

 allow pio too; we don't allow highmem */

 transfer each block, and update request status */

 discard mappings */

	/* NOTE some docs describe an MMC-only SET_BLOCK_COUNT (CMD23) that

	 * can be issued before multiblock writes.  Unlike its more widely

	 * documented analogue for SD cards (SET_WR_BLK_ERASE_COUNT, ACMD23),

	 * that can affect the STOP_TRAN logic.   Complete (and current)

	 * MMC specs should sort that out before Linux starts using CMD23.

		/* Tweak the per-block message we set up earlier by morphing

		 * it to hold single buffer with the token followed by some

		 * all-ones bytes ... skip N(BR) (0..1), scan the rest for

		 * "not busy any longer" status, and leave chip selected.

		/* Ideally we collected "not busy" status with one I/O,

		 * avoiding wasteful byte-at-a-time scanning... but more

		 * I/O is often needed.

***************************************************************************/

/*

 * MMC driver implementation -- the interface to the MMC stack

 MMC core and layered drivers *MUST* issue SPI-aware commands */

 request exclusive bus access */

 issue command; then optionally data and stop */

		/*

		 * The SPI bus is not always reliable for large data transfers.

		 * If an occasional crc error is reported by the SD device with

		 * data read/write over SPI, it may be recovered by repeating

		 * the last SD command again. The retry count is set to 5 to

		 * ensure the driver passes stress tests.

 release the bus */

/* See Section 6.4.1, in SD "Simplified Physical Layer Specification 2.0"

 *

 * NOTE that here we can't know that the card has just been powered up;

 * not all MMC/SD sockets support power switching.

 *

 * FIXME when the card is still in SPI mode, e.g. from a previous kernel,

 * this doesn't seem to do the right thing at all...

	/* Try to be very sure any previous command has completed;

	 * wait till not-busy, skip debris from any old commands.

	/*

	 * Do a burst with chipselect active-high.  We need to do this to

	 * meet the requirement of 74 clock cycles with both chipselect

	 * and CMD (MOSI) high before CMD0 ... after the card has been

	 * powered up to Vdd(min), and so is ready to take commands.

	 *

	 * Some cards are particularly needy of this (e.g. Viking "SD256")

	 * while most others don't seem to care.

	 *

	 * Note that this is one of the places MMC/SD plays games with the

	 * SPI protocol.  Another is that when chipselect is released while

	 * the card returns BUSY status, the clock must issue several cycles

	 * with chipselect high before the card will stop driving its output.

	 *

	 * SPI_CS_HIGH means "asserted" here. In some cases like when using

	 * GPIOs for chip select, SPI_CS_HIGH is set but this will be logically

	 * inverted by gpiolib, so if we want to ascertain to drive it high

	 * we should toggle the default with an XOR as we do here.

 Just warn; most cards work without it. */

 Wot, we can't get the same setup we had before? */

		/* switch power on/off if possible, accounting for

		 * max 250msec powerup time if needed.

 See 6.4.1 in the simplified SD card physical spec 2.0 */

		/* If powering down, ground all card inputs to avoid power

		 * delivery from data lines!  On a shared SPI bus, this

		 * will probably be temporary; 6.4.2 of the simplified SD

		 * spec says this must last at least 1msec.

		 *

		 *   - Clock low means CPOL 0, e.g. mode 0

		 *   - MOSI low comes from writing zero

		 *   - Chipselect is usually active low...

			/*

			 * Now clock should be low due to spi mode 0;

			 * MOSI should be low because of written 0x00;

			 * chipselect should be low (it is active low)

			 * power supply is off, so now MMC is off too!

			 *

			 * FIXME no, chipselect can be high since the

			 * device is inactive and SPI_CS_HIGH is clear...

***************************************************************************/

/*

 * SPI driver implementation

	/* We rely on full duplex transfers, mostly to reduce

	 * per-transfer overheads (by making fewer transfers).

	/* MMC and SD specs only seem to care that sampling is on the

	 * rising edge ... meaning SPI modes 0 or 3.  So either SPI mode

	 * should be legit.  We'll use mode 0 since the steady state is 0,

	 * which is appropriate for hotplugging, unless the platform data

	 * specify mode 3 (if hardware is not compatible to mode 0).

	/* We need a supply of ones to transmit.  This is the only time

	 * the CPU touches these, so cache coherency isn't a concern.

	 *

	 * NOTE if many systems use more than one MMC-over-SPI connector

	 * it'd save some memory to share this.  That's evidently rare.

	/* SPI doesn't need the lowspeed device identification thing for

	 * MMC or SD cards, since it never comes up in open drain mode.

	 * That's good; some SPI masters can't handle very low speeds!

	 *

	 * However, low speed SDIO cards need not handle over 400 KHz;

	 * that's the only reason not to use a few MHz for f_min (until

	 * the upper layer reads the target frequency from the CSD).

	/* Platform data is used to hook up things like card sensing

	 * and power switching gpios.

 preallocate dma buffers */

 setup message for status/busy readback */

 register card detect irq */

 pass platform capabilities, if any */

	/*

	 * Index 0 is card detect

	 * Old boardfiles were specifying 1 ms as debounce

		/*

		 * The platform has a CD GPIO signal that may support

		 * interrupts, so let mmc_gpiod_request_cd_irq() decide

		 * if polling is needed or not.

 Index 1 is write protect/read only */

 prevent new mmc_detect_change() calls */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * SDHCI support for CNS3xxx SoC

 *

 * Copyright 2008 Cavium Networks

 * Copyright 2010 MontaVista Software, LLC.

 *

 * Authors: Scott Shu

 *	    Anton Vorontsov <avorontsov@mvista.com>

		/*

		 * On CNS3xxx divider grows linearly up to 4, and then

		 * exponentially up to 256.

 Divide by 3 is special. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Freescale eSDHC i.MX controller driver for the platform bus.

 *

 * derived from the OF-version.

 *

 * Copyright (c) 2010 Pengutronix e.K.

 *   Author: Wolfram Sang <kernel@pengutronix.de>

 VENDOR SPEC register */

 Bits 3 and 6 are not SDHCI standard definitions */

 Tuning bits */

 dll control register */

 tune control register */

 strobe dll register */

 NOTE: the minimum valid tuning start tap for mx6sl is 1 */

 pinctrl state */

/*

 * Our interpretation of the SDHCI_HOST_CONTROL register

/*

 * There is an INT DMA ERR mismatch between eSDHC and STD SDHC SPEC:

 * Bit25 is used in STD SPEC, and is reserved in fsl eSDHC design,

 * but bit28 is used as the INT DMA ERR in fsl eSDHC design.

 * Define this macro DMA error INT for fsl eSDHC

 the address offset of CQHCI */

/*

 * The CMDTYPE of the CMD register (offset 0xE) should be set to

 * "11" when the STOP CMD12 is issued on imx53 to abort one

 * open ended multi-blk IO. Otherwise the TC INT wouldn't

 * be generated.

 * In exact block transfer, the controller doesn't complete the

 * operations automatically as required at the end of the

 * transfer and remains on hold if the abort command is not sent.

 * As a result, the TC flag is not asserted and SW received timeout

 * exception. Bit1 of Vendor Spec register is used to fix it.

/*

 * The flag tells that the ESDHC controller is an USDHC block that is

 * integrated on the i.MX6 series.

 The IP supports manual tuning process */

 The IP supports standard tuning process */

 The IP has SDHCI_CAPABILITIES_1 register */

/*

 * The IP has erratum ERR004536

 * uSDHC: ADMA Length Mismatch Error occurs if the AHB read access is slow,

 * when reading data from the card

 * This flag is also set for i.MX25 and i.MX35 in order to get

 * SDHCI_QUIRK_BROKEN_ADMA, but for different reasons (ADMA capability bits).

 The IP supports HS200 mode */

 The IP supports HS400 mode */

/*

 * The IP has errata ERR010450

 * uSDHC: Due to the I/O timing limit, for SDR mode, SD card clock can't

 * exceed 150MHz, for DDR mode, SD card clock can't exceed 45MHz.

 The IP supports HS400ES mode */

 The IP has Host Controller Interface for Command Queuing */

 need request pmqos during low power */

 The IP state got lost in low power mode */

 The IP lost clock rate in PM_RUNTIME */

/*

 * The IP do not support the ACMD23 feature completely when use ADMA mode.

 * In ADMA mode, it only use the 16 bit block count of the register 0x4

 * (BLOCK_ATT) as the CMD23's argument for ACMD23 mode, which means it will

 * ignore the upper 16 bit of the CMD23's argument. This will block the reliable

 * write operation in RPMB, because RPMB reliable write need to set the bit31

 * of the CMD23's argument.

 * imx6qpdl/imx6sx/imx6sl/imx7d has this limitation only for ADMA mode, SDMA

 * do not has this limitation. so when these SoC use ADMA mode, it need to

 * disable the ACMD23 feature.

 ERR004536 is not applicable for the IP  */

 no WP, neither controller nor gpio */

 mmc controller internal WP */

 external gpio pin for WP */

 no CD, neither controller nor gpio */

 mmc controller internal CD */

 external gpio pin for CD */

 no CD, card permanently wired to host */

/*

 * struct esdhc_platform_data - platform data for esdhc on i.MX

 *

 * ESDHC_WP(CD)_CONTROLLER type is not available on i.MX25/35.

 *

 * @wp_type:	type of write_protect method (see wp_types enum above)

 * @cd_type:	type of card_detect method (see cd_types enum above)

 The delay cell steps in tuning procedure */

 The start delay cell point in tuning procedure */

 The delay cell for strobe pad (read clock) */

 no multiblock command pending */

 exact multiblock cmd in process */

 sent CMD12, waiting for response INT */

 sentinel */ }

 Enable the auto tuning circuit to check the CMD line and BUS line */

 1BITBUS */

 save the least 20 bits */

 move dat[0-3] bits */

 move cmd line bit */

 ignore bit[0-15] as it stores cap_1 register val for mx6sl */

		/* In FSL esdhc IC module, only bit20 is used to indicate the

		 * ADMA2 capability of esdhc, but this bit is messed up on

		 * some SOCs (e.g. on MX25, MX35 this bit is set, but they

		 * don't actually support ADMA2). So set the BROKEN_ADMA

		 * quirk on MX25/35 platforms.

 imx6q/dl does not have cap_1 register, fake one */

			/*

			 * Do not advertise faster UHS modes if there are no

			 * pinctrl states for 100MHz/200MHz.

		/*

		 * mask off the interrupt we get in response to the manually

		 * sent CMD12

			/*

			 * Clear and then set D3CD bit to avoid missing the

			 * card interrupt. This is an eSDHC controller problem

			 * so we need to apply the following workaround: clear

			 * and set D3CD bit will make eSDHC re-sample the card

			 * interrupt. In case a card interrupt was lost,

			 * re-sample it by the following steps.

 send a manual CMD12 with RESPTYP=none */

			/*

			 * The usdhc register returns a wrong host version.

			 * Correct it here.

 the std tuning bits is in ACMD12_ERR for imx6sl */

 Swap AC23 bit */

 Swap AC23 bit */

			/* Set watermark levels for PIO access to maximum value

			 * (128 words) to accommodate full 512 bytes buffer.

			 * For DMA access restore the levels to default value.

				/*

				 * Since already disable DMA mode, so also need

				 * to clear the DMASEL. Otherwise, for standard

				 * tuning, when send tuning command, usdhc will

				 * still prefetch the ADMA script from wrong

				 * DMA address, then we will see IOMMU report

				 * some error which show lack of TLB mapping.

			/*

			 * Postpone this write, we must do it together with a

			 * command write that is down below.

		/*

		 * FSL put some DMA bits here

		 * If your board has a regulator, code should be here

 FSL messed up here, so we need to manually compose it. */

 ensure the endianness */

 bits 8&9 are reserved on mx25 */

 DMA mode bits are shifted */

		/*

		 * Do not touch buswidth bits here. This is done in

		 * esdhc_pltfm_bus_width.

		 * Do not touch the D3CD bit either which is used for the

		 * SDIO interrupt erratum workaround.

			/*

			 * The esdhc has a design violation to SDHC spec which

			 * tells that software reset should not affect card

			 * detection circuit. But esdhc clears its SYSCTL

			 * register bits [0..2] during the software reset. This

			 * will stop those clocks that card detection circuit

			 * relies on. To work around it, we turn the clocks on

			 * back to keep card detection circuit functional.

			/*

			 * The reset on usdhc fails to clear MIX_CTRL register.

			 * Do it manually here.

				/*

				 * the tuning bits should be kept during reset

			/*

			 * The eSDHC DAT line software reset clears at least the

			 * data transfer width on i.MX25, so make sure that the

			 * Host Control register is unaffected.

 For i.MX53 eSDHCv3, SYSCTL.SDCLKFS may not be set to 0. */

		/*

		 * According to the i.MX53 reference manual, if DLLCTRL[10] can

		 * be set, then the controller is eSDHCv3, else it is eSDHCv2.

 need to wait the bit 3 of the PRSSTAT to be set, make sure card clock is stable */

	/*

	 * i.MX uSDHC internally already uses a fixed optimized timing for

	 * DDR50, normally does not require tuning for DDR50 mode.

 FIXME: delay a bit for card to be ready for next tuning due to errors */

 IC suggest to reset USDHC before every tuning command */

 find the mininum delay first which can pass tuning */

 find the maxinum delay which can not pass tuning */

 use average delay to get the best timing */

 back to default state for other legacy timing */

/*

 * For HS400 eMMC, there is a data_strobe line. This signal is generated

 * by the device and used for data output and CRC status response output

 * in HS400 mode. The frequency of this signal follows the frequency of

 * CLK generated by host. The host receives the data which is aligned to the

 * edge of data_strobe line. Due to the time delay between CLK line and

 * data_strobe line, if the delay time is larger than one clock cycle,

 * then CLK and data_strobe line will be misaligned, read error shows up.

 disable clock before enabling strobe dll */

 force a reset on strobe dll */

 clear the reset bit on strobe dll before any setting */

	/*

	 * enable strobe dll ctrl and adjust the delay target

	 * for the uSDHC loopback read clock

 wait max 50us to get the REF/SLV lock */

 Reset the tuning circuit */

 Make sure ESDHC_MIX_CTRL_EXE_TUNE cleared */

			/*

			 * SDHCI_INT_DATA_AVAIL is W1C bit, set this bit will clear the

			 * usdhc IP internal logic flag execute_tuning_with_clr_buf, which

			 * will finally make sure the normal data transfer logic correct.

 disable ddr mode and disable HS400 mode */

 update clock after enable DDR for strobe DLL lock */

 Doc Erratum: the uSDHC actual maximum timeout count is 1 << 29 */

 use maximum timeout counter */

		/*

		 * The imx6q ROM code will change the default watermark

		 * level setting to something insane.  Change it back here.

		/*

		 * ROM code will change the bit burst_length_enable setting

		 * to zero if this usdhc is chosen to boot system. Change

		 * it back here, otherwise it will impact the performance a

		 * lot. This bit is used to enable/disable the burst length

		 * for the external AHB2AXI bridge. It's useful especially

		 * for INCR transfer because without burst length indicator,

		 * the AHB2AXI bridge does not know the burst length in

		 * advance. And without burst length indicator, AHB INCR

		 * transfer can only be converted to singles on the AXI side.

		/*

		 * erratum ESDHC_FLAG_ERR004536 fix for MX6Q TO1.2 and MX6DL

		 * TO1.1, it's harmless for MX6SL

 disable DLL_CTRL delay line settings */

		/*

		 * For the case of command with busy, if set the bit

		 * ESDHC_VEND_SPEC2_EN_BUSY_IRQ, USDHC will generate a

		 * transfer complete interrupt when busy is deasserted.

		 * When CQHCI use DCMD to send a CMD need R1b respons,

		 * CQHCI require to set ESDHC_VEND_SPEC2_EN_BUSY_IRQ,

		 * otherwise DCMD will always meet timeout waiting for

		 * hardware interrupt issue.

			/* Disable the CMD CRC check for tuning, if not, need to

			 * add some delay after every tuning command, because

			 * hardware standard tuning logic will directly go to next

			 * step once it detect the CMD CRC error, will not wait for

			 * the card side to finally send out the tuning data, trigger

			 * the buffer read ready interrupt immediately. If usdhc send

			 * the next tuning command some eMMC card will stuck, can't

			 * response, block the tuning procedure or the first command

			 * after the whole tuning procedure always can't get any response.

			/*

			 * ESDHC_STD_TUNING_EN may be configed in bootloader

			 * or ROM code, so clear this bit here to make sure

			 * the manual tuning can work.

		/*

		 * On i.MX8MM, we are running Dual Linux OS, with 1st Linux using SD Card

		 * as rootfs storage, 2nd Linux using eMMC as rootfs storage. We let the

		 * the 1st linux configure power/clock for the 2nd Linux.

		 *

		 * When the 2nd Linux is booting into rootfs stage, we let the 1st Linux

		 * to destroy the 2nd linux, then restart the 2nd linux, we met SDHCI dump.

		 * After we clear the pending interrupt and halt CQCTL, issue gone.

	/*

	 * CQE gets stuck if it sees Buffer Read Enable bit set, which can be

	 * the case after tuning, so ensure the buffer is drained.

	/*

	 * Runtime resume will reset the entire host controller, which

	 * will also clear the DMAEN/BCEN of register ESDHC_MIX_CTRL.

	 * Here set DMAEN and BCEN when enable CMDQ.

	/*

	 * Though Runtime resume reset the entire host controller,

	 * but do not impact the CQHCI side, need to clear the

	 * HALT bit, avoid CQHCI stuck in the first request when

	 * system resume back.

	/*

	 * If we have this property, then activate WP check.

	 * Retrieveing and requesting the actual WP GPIO will happen

	 * in the call to mmc_of_parse().

 call to generic mmc_of_parse to support additional capabilities */

 GPIO CD can be set as a wakeup source */

 clear tuning bits in case ROM has set it already */

		/*

		 * Link usdhc specific mmc_host_ops execute_tuning function,

		 * to replace the standard one in sdhci_ops.

	/*

	 * Setup the wakeup capability here, let user to decide

	 * whether need to enable this wakeup through sysfs interface.

 re-initialize hw state in case it's lost in low power mode */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018 HiSilicon Technologies Co., Ltd.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Exynos Specific Extensions for Synopsys DW Multimedia Card Interface driver

 *

 * Copyright (C) 2012, Samsung Electronics Co., Ltd.

 Variations in Exynos specific dw-mshc controller */

 Exynos implementation specific driver private data */

	/*

	 * If Exynos is provided the Security management,

	 * set for non-ecryption mode at this time.

	/*

	 * Exynos4412 and Exynos5250 extends the use of CMD register with the

	 * use of bit 29 (which is reserved on standard MSHC controllers) for

	 * optionally bypassing the HOLD register for command and data. The

	 * HOLD register should be bypassed in case there is no phase shift

	 * applied on CMD/DATA that is sent to the card.

 CONFIG_PM */

/**

 * dw_mci_exynos_suspend_noirq - Exynos-specific suspend code

 * @dev: Device to suspend (this device)

 *

 * This ensures that device will be in runtime active state in

 * dw_mci_exynos_resume_noirq after calling pm_runtime_force_resume()

/**

 * dw_mci_exynos_resume_noirq - Exynos-specific resume code

 * @dev: Device to resume (this device)

 *

 * On exynos5420 there is a silicon errata that will sometimes leave the

 * WAKEUP_INT bit in the CLKSEL register asserted.  This bit is 1 to indicate

 * that it fired and we can clear it by writing a 1 back.  Clear it to prevent

 * interrupts from going off constantly.

 *

 * We run this code on all exynos variants because it doesn't hurt.

 CONFIG_PM_SLEEP */

	/*

	 * Not supported to configure register

	 * related to HS400

	/*

	 * Don't care if wanted clock is zero or

	 * ciu clock is unavailable

 Guaranteed minimum frequency for cclkin */

 Update tuned sample timing */

 Should be double rate for DDR mode */

 Set clock timing for the requested speed mode*/

 Configure setting for HS400 */

 Configure clock rate */

	/*

	 * If there is no cadiates value, then it needs to return -EIO.

	 * If there are candidates values and don't find bset clk sample value,

	 * then use a first candidates clock sample value.

 Common capabilities of Exynos4/Exynos5 SoC */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * meson-mx-sdio.c - Meson6, Meson8 and Meson8b SDIO/MMC Host Controller

 *

 * Copyright (C) 2015 Endless Mobile, Inc.

 * Author: Carlo Caione <carlo@endlessm.com>

 * Copyright (C) 2017 Martin Blumenstingl <martin.blumenstingl@googlemail.com>

 7 (CMD) + 32 (response) + 7 (CRC) -1 */

 7 (CMD) + 120 (response) + 7 (CRC) -1 */

 enable the CMD done interrupt */

 clear pending interrupts */

	/*

	 * NOTE: even though it shouldn't happen we sometimes get command

	 * interrupts twice (at least this is what it looks like). Ideally

	 * we find out why this happens and warn here as soon as it occurs.

 finally ACK all pending interrupts */

 disable the CMD interrupt */

	/*

	 * skip the timeout handling if the interrupt handler already processed

	 * the command.

	/*

	 * TODO: the MMC core framework currently does not support

	 * controllers with multiple slots properly. So we only register

	 * the first slot for now

 Get regulators and the supported OCR mask */

 Get the min and max supported clock rates */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * DMA support for Internal DMAC with SDHI SD/SDIO controller

 *

 * Copyright (C) 2016-19 Renesas Electronics Corporation

 * Copyright (C) 2016-17 Horms Solutions, Simon Horman

 * Copyright (C) 2018-19 Sang Engineering, Wolfram Sang

 DM_CM_DTRAN_MODE */

 "downstream" = for write commands */

 "upstream" = for read commands */

 1 = Increment address, 0 = Fixed */

 DM_CM_DTRAN_CTRL */

 DM_CM_RST */

 DM_CM_INFO1 and DM_CM_INFO1_MASK */

 DM_CM_INFO2 and DM_CM_INFO2_MASK */

/*

 * Specification of this driver:

 * - host->chan_{rx,tx} will be used as a flag of enabling/disabling the dma

 * - Since this SDHI DMAC register set has 16 but 32-bit width, we

 *   need a custom accessor.

/*

 * Workaround for avoiding to use RX DMAC by multiple channels.

 * On R-Car H3 ES1.* and M3-W ES1.0, when multiple SDHI channels use

 * RX DMAC simultaneously, sometimes hundreds of bytes data are not

 * stored into the system memory even if the DMAC interrupt happened.

 * So, this driver then uses one RX DMAC channel only.

 RZ/A2 does not have the ADRR_MODE bit */

 Definitions for sampling clocks */

 DMAC can handle 32bit blk count but only 1 segment */

 DMAC can handle 32bit blk count but only 1 segment */

/*

 * Note for r8a7796 / r8a774a1: we can't distinguish ES1.1 and 1.2 as of now.

 * So, we want to treat them equally and only have a match for ES1.2 to enforce

 * this if there ever will be a way to distinguish ES1.2.

 Sentinel. */ },

/*

 * renesas_sdhi_internal_dmac_map() will be called with two difference

 * sg pointers in two mmc_data by .pre_req(), but tmio host can have a single

 * sg_ptr only. So, renesas_sdhi_internal_dmac_{un}map() should use a sg

 * pointer in a mmc_data instead of host->sg_ptr.

 This DMAC cannot handle if buffer is not 128-bytes alignment */

 set dma parameters */

 start the DMAC */

 Disable DMAC interrupts, we don't use them */

 Each value is set to non-zero to assume "enabling" each DMA */

 Add pre_req and post_req */

 Each value is set to zero to assume "disabling" each DMA */

/*

 * Whitelist of specific R-Car Gen3 SoC ES versions to use this DMAC

 * implementation as others may use a different implementation.

 sentinel */ }

 value is max of SD_SECCNT. Confirmed by HW engineers */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2018 Oleksij Rempel <linux@rempel-privat.de>

 *

 * Driver for Alcor Micro AU6601 and AU6621 controllers

/* Note: this driver was created without any documentation. Based

 * on sniffing, testing and in some cases mimic of original driver.

 * As soon as some one with documentation or more experience in SD/MMC, or

 * reverse engineering then me, please review this driver and question every

 * thing what I did. 2018 Oleksij Rempel <linux@rempel-privat.de>

 SG state for PIO */

 remaining PIO blocks */

 MHZ,		CLK src,		max div, min div */

/* As soon as irqs are masked, some status updates may be missed.

 * Use this with care.

/*

 * Perform DMA I/O of a single page.

		/*

		 * For DMA transfers, this function is called just once,

		 * at the start of the operation. The hardware can only

		 * perform DMA I/O on a single page at a time, so here

		 * we kick off the transfer with the first page, and expect

		 * subsequent pages to be transferred upon IRQ events

		 * indicating that the single-page DMA was completed.

		/*

		 * For PIO transfers, we break down each operation

		 * into several sector-sized transfers. When one sector has

		 * complete, the IRQ handler will call this function again

		 * to kick off the transfer of the next sector.

	/*

	 * If this work gets rescheduled while running, it will

	 * be run again afterwards but without any active request.

	/*

	 * The specification states that the block count register must

	 * be updated, but it does not specify at what point in the

	 * data flow. That makes the register entirely useless to read

	 * back so we have to assume that nothing made it to the card

	 * in the event of an error.

	/*

	 * Need to send CMD12 if -

	 * a) open-ended multiblock transfer (no CMD23)

	 * b) error in multiblock transfer

		/*

		 * The controller needs a reset of internal state machines

		 * upon error conditions.

	/* got CMD_END but no CMD is in progress, wake thread an process the

	 * error

 Processed actual command. */

 Processed actual command. */

 nothing here to do */

	/* we was too fast and got DATA_END after it was processed?

	 * lets ignore it for now.

 looks like an error, so lets handle it. */

 some thing bad */

 use fast path for simple tasks */

 Check whether dat[0:3] low */

 check if card is present then send command and data */

 get write protect pin status */

 check if card is present then send command and data */

 FIXME: looks like the DMA engine works only with CMD18 */

	/*

	 * We don't do DMA on "complex" transfers, i.e. with

	 * non-word-aligned buffers or lengths. A future improvement

	 * could be made to use temporary DMA bounce-buffers when these

	 * requirements are not met.

	 *

	 * Also, we don't bother with all the DMA setup overhead for

	 * short transfers.

 This data might be unmapped at this time */

 set all pins to input */

 turn of VDD */

		/* This is most trickiest part. The order and timings of

		 * instructions seems to play important role. Any changes may

		 * confuse internal state engine if this HW.

		 * FIXME: If we will ever get access to documentation, then this

		 * part should be reviewed again.

 enable SD card mode */

 set signal voltage to 3.3V */

		/* no documentation about clk delay, for now just try to mimic

		 * original driver.

 set BUS width to 1 bit */

 set CLK first time */

 power on VDD */

 wait until the CLK will get stable */

 set CLK again, mimic original driver. */

 enable output */

		/* The clk will not work on au6621. We need to trigger data

		 * transfer.

 configure timeout. Not clear what exactly it means. */

 No signal voltage switch required */

	/* FIXME: This part is a mimics HW init of original driver.

	 * If we will ever get access to documentation, then this part

	 * should be reviewed again.

 reset command state engine */

 enable sd card mode */

 set BUS width to 1 bit */

 reset data state engine */

 Not sure if a voodoo with AU6601_DMA_BOUNDARY is really needed */

 not clear what we are doing here. */

	/* for 6601 - dma_boundary; for 6621 - dma_page_cnt

	 * exact meaning of this register is not clear.

 make sure all pins are set to input and VDD is off */

 now we should be safe to enable IRQs */

	/* The hardware does DMA data transfer of 4096 bytes to/from a single

	 * buffer address. Scatterlists are not supported at the hardware

	 * level, however we can work with them at the driver level,

	 * provided that each segment is exactly 4096 bytes in size.

	 * Upon DMA completion of a single segment (signalled via IRQ), we

	 * immediately proceed to transfer the next segment from the

	 * scatterlist.

	 *

	 * The overall request is limited to 240 sectors, matching the

	 * original vendor driver.

 make sure irqs are disabled */

 CONFIG_PM_SLEEP */

 sentinel */

 SPDX-License-Identifier: GPL-2.0

/*

 * SDHCI driver for Synopsys DWC_MSHC controller

 *

 * Copyright (C) 2018 Synopsys, Inc. (www.synopsys.com)

 *

 * Authors:

 *	Prabu Thangamuthu <prabu.t@synopsys.com>

 *	Manjunath M B <manjumb@synopsys.com>

 Synopsys vendor specific registers */

 MMCM DRP */

 Disable software managed rx tuning */

 Assert reset to MMCM */

 Configure MMCM */

 De-assert reset to MMCM */

 Enable clock */

 SPDX-License-Identifier: GPL-2.0

/*

 *

 * MMC software queue support based on command queue interfaces

 *

 * Copyright (C) 2019 Linaro, Inc.

 * Author: Baolin Wang <baolin.wang@linaro.org>

 Make sure we are not already running a request now */

 Make sure there are remain requests need to pump */

	/*

	 * If returning BUSY from request_atomic(), which means the card

	 * may be busy now, and we should change to non-atomic context to

	 * try again for this unusual case, to avoid time-consuming operations

	 * in the atomic context.

	 *

	 * Note: we just give a warning for other error cases, since the host

	 * driver will handle them.

	/*

	 * If there are no remain requests in software queue, then set a invalid

	 * tag.

	/*

	 * Increasing the next tag and check if the corresponding request is

	 * available, if yes, then we found a candidate request.

 Othersie we should iterate all slots to find a available tag. */

 Update the next available tag to be queued. */

 Do not pump new request in recovery mode. */

	 /*

	  * Try to pump new request to host controller as fast as possible,

	  * after completing previous request.

/**

 * mmc_hsq_finalize_request - finalize one request if the request is done

 * @mmc: the host controller

 * @mrq: the request need to be finalized

 *

 * Return true if we finalized the corresponding request in software queue,

 * otherwise return false.

	/*

	 * Clear current completed slot request to make a room for new request.

	/*

	 * Try to pump new request if there are request pending in software

	 * queue after finishing recovery.

 Do not queue any new requests in recovery mode. */

	/*

	 * Set the next tag as current request tag if no available

	 * next tag.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Amlogic Meson SDHC clock controller

 *

 * Copyright (C) 2020 Martin Blumenstingl <martin.blumenstingl@googlemail.com>

 sentinel */ }

	/*

	 * TODO: Replace clk_hw.clk with devm_clk_hw_get_clk() once that is

	 * available.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2009-2010, Lars-Peter Clausen <lars@metafoo.de>

 *  Copyright (C) 2013, Imagination Technologies

 *

 *  JZ4740 SD/MMC controller driver

/*

 * The MMC core allows to prepare a mmc_request while another mmc_request

 * is in-flight. This is used via the pre_req/post_req hooks.

 * This driver uses the pre_req/post_req hooks to map/unmap the mmc_request.

 * Following what other drivers do (sdhci, dw_mmc) we use the following cookie

 * flags to keep track of the mmc_request mapping state.

 *

 * COOKIE_UNMAPPED: the request is not mapped.

 * COOKIE_PREMAPPED: the request was mapped in pre_req,

 * and should be unmapped in post_req.

 * COOKIE_MAPPED: the request was mapped in the irq handler,

 * and should be unmapped before mmc_request_done is called..

 DMA support */

/* The DMA trigger level is 8 words, that is to say, the DMA read

 * trigger is when data words in MSC_RXFIFO is >= 8 and the DMA write

 * trigger is when data words in MSC_TXFIFO is < 8.

----------------------------------------------------------------------------*/

 DMA infrastructure */

/* Prepares DMA data for current or next transfer.

 * A request can be in-flight when this is called.

----------------------------------------------------------------------------*/

	/* For whatever reason there is sometime one word more in the fifo then

			/*

			 * The JZ4780's MMC controller has integrated DMA ability

			 * in addition to being able to use the external DMA

			 * controller. It moves DMA control bits to a separate

			 * register. The DMA_SEL bit chooses the external

			 * controller over the integrated one. Earlier SoCs

			 * can only use the external controller, and have a

			 * single DMA enable bit in CMDAT.

			/* Use DMA if enabled.

			 * Data transfer direction is defined later by

			 * relying on data flags in

			 * jz4740_mmc_prepare_dma_data() and

			 * jz4740_mmc_start_dma_transfer().

			/* Use PIO if DMA is not enabled.

			 * Data transfer direction was defined before

			 * by relying on data flags in

			 * jz_mmc_prepare_data_transfer().

 JZ4740 should be the only one using legacy probe */

	/*

	 * We use a fixed timeout of 5s, hence inform the core about it. A

	 * future improvement should instead respect the cmd->busy_timeout.

 SPDX-License-Identifier: GPL-2.0-or-later

/*  linux/drivers/mmc/host/sdhci-pci.c - SDHCI on PCI bus interface

 *

 *  Copyright (C) 2005-2008 Pierre Ossman, All Rights Reserved.

 *

 * Thanks to the following companies for their support:

 *

 *     - JMicron (hardware and technical support)

/*****************************************************************************\

 *                                                                           *

 * Hardware specific quirk handling                                          *

 *                                                                           *

 Apply a delay to allow controller to settle */

	/* Otherwise it becomes confused if card state changed

/*

 * ADMA operation is disabled for Moorestown platform due to

 * hardware bugs.

	/*

	 * slots number is fixed here for MRST as SDIO3/5 are never used and

	 * have hardware bugs.

 For eMMC, minimum is 1us but give it 9us for good measure */

 For eMMC, minimum is 200us but give it 300us for good measure */

	/*

	 * Bus power may control card power, but a full reset still may not

	 * reset the power, whereas a direct write to SDHCI_POWER_CONTROL can.

	 * That might be needed to initialize correctly, if the card was left

	 * powered on previously.

	/*

	 * Bus power might not enable after D3 -> D0 transition due to the

	 * present state not yet having propagated. Retry for up to 2ms.

 Set UHS timing to SDR25 for High Speed mode */

	/*

	 * Tuning can leave the IP in an active state (Buffer Read Enable bit

	 * set) which prevents the entry to low power states (i.e. S0i3). Data

	 * reset will clear it.

	/*

	 * Program latency tolerance (LTR) accordingly what has been asked

	 * by the PM QoS layer or disable it in case we were passed

	 * negative value or PM_QOS_LATENCY_ANY.

 Cache the values into lpss structure */

 1000 kHz i.e. 1 MHz */

 Workaround firmware failing to restore the tuning value */

 Define Host controllers for Intel Merrifield platform */

		/*

		 * There are two PCB designs of SD card slot with the opposite

		 * card detection sense. Quirk this out by ignoring GPIO state

		 * completely in the custom ->get_cd() callback.

 Advertise 2.0v for compatibility with the SDIO card's OCR */

	/*

	 * Turn PMOS on [bit 0], set over current detection to 2.4 V

	 * [bit 1:2] and enable over current debouncing [bit 6].

	/*

	 * JMicron chips can have two interfaces to the same hardware

	 * in order to work around limitations in Microsoft's driver.

	 * We need to make sure we only bind to one of them.

	 *

	 * This code assumes two things:

	 *

	 * 1. The PCI code adds subfunctions in order.

	 *

	 * 2. The MMC interface has a lower subfunction number

	 *    than the SD interface.

	/*

	 * JMicron chips need a bit of a nudge to enable the power

	 * output pins.

 quirk for unsable RO-detection on JM388 chips */

		/*

		 * Older versions of the chip have lots of nasty glitches

		 * in the ADMA engine. It's best just to avoid it

		 * completely.

 JM388 MMC doesn't support 1.8V while SD supports it */

 allow 1.8V */

 no 1.8V for MMC */

	/*

	 * The secondary interface requires a bit set to get the

	 * interrupts.

 SysKonnect CardBus2SDIO extra registers */

 Wait max 1 ms */

AMD chipset generation*/

 AMD registers */

 AMD requires custom HS200 tuning */

 Otherwise perform standard SDHCI tuning */

	/*

	 * SDHC 0x7906 requires a hard reset to clear all internal state.

	 * Otherwise it can get into a bad state where the DATA lines are always

	 * read as zeros.

		/*

		 * SDHCI_RESET_ALL says the card detect logic should not be

		 * reset, but since we need to reset the entire controller

		 * we should wait until the card detect logic has stabilized.

		 *

		 * This normally takes about 40ms.

 Generic SD host controller */

 end: all zeroes */ },

/*****************************************************************************\

 *                                                                           *

 * SDHCI core callbacks                                                      *

 *                                                                           *

/*****************************************************************************\

 *                                                                           *

 * Suspend/resume                                                            *

 *                                                                           *

/*****************************************************************************\

 *                                                                           *

 * Device probing/removal                                                    *

 *                                                                           *

	/*

	 * Check if the chip needs a separate GPIO for card detect to wake up

	 * from runtime suspend.  If it is not there, don't allow runtime PM.

 Stay active until mmc core scans for a card */

 Quirk may have changed this */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * sdhci-dove.c Support for SDHCI on Marvell's Dove SoC

 *

 * Author: Saeed Bishara <saeed@marvell.com>

 *	   Mike Rapoport <mike@compulab.co.il>

 * Based on sdhci-cns3xxx.c

 those registers don't exist */

 Mask the support for 3.0V */

 SPDX-License-Identifier: GPL-2.0



 Secure Digital Host Controller



 Copyright (C) 2018 Spreadtrum, Inc.

 Author: Chunyan Zhang <chunyan.zhang@unisoc.com>

 SDHCI_ARGUMENT2 register high 16bit */

 SDHCI_HOST_CONTROL2 */

/*

 * According to the standard specification, BIT(3) of SDHCI_SOFTWARE_RESET is

 * reserved, and only used on Spreadtrum's design, the hardware cannot work

 * if this bit is cleared.

 * 1 : normal work

 * 0 : hardware reset

 backup of host attribute */

 set dll backup mode */

 SDHCI_MAX_CURRENT is reserved on Spreadtrum's platform */

 SDHCI_BLOCK_COUNT is Read Only on Spreadtrum's platform */

	/*

	 * Since BIT(3) of SDHCI_SOFTWARE_RESET is reserved according to the

	 * standard specification, sdhci_reset() write this register directly

	 * without checking other reserved bits, that will clear BIT(3) which

	 * is defined as hardware reset on Spreadtrum's platform and clearing

	 * it by mistake will lead the card not work. So here we need to work

	 * around it.

 select 2x clock source */

 enable auto gate sdhc_enable_auto_gate */

 wait 1ms */

 wait 1ms */

 wait 1ms */

	/*

	 * According to the Spreadtrum SD host specification, when we changed

	 * the clock to be more than 52M, we should enable the PHY DLL which

	 * is used to track the clock frequency to make the clock work more

	 * stable. Otherwise deviation may occur of the higher clock.

 Select Bus Speed Mode for host */

	/*

	 * Note: don't use sdhci_writeb() API here since it is redirected to

	 * sdhci_sprd_writeb() in which we have a workaround for

	 * SDHCI_SOFTWARE_RESET which would make bit SDHCI_HW_RESET_CARD can

	 * not be cleared.

 wait for 10 us */

 The Spredtrum controller actual maximum timeout count is 1 << 31 */

 Validate if the request was from software queue firstly. */

	/*

	 * From version 4.10 onward, ARGUMENT2 register is also as 32-bit

	 * block count register which doesn't support stuff bits of

	 * CMD23 argument on Spreadtrum's sd host controller.

 Wait for 300 ~ 500 us for pin state stable */

 Set HS400 enhanced strobe mode */

 Set the PHY DLL delay value for HS400 enhanced strobe mode */

	/*

	 * We can not use the standard ops to change and detect the voltage

	 * signal for Spreadtrum SD host controller, since our voltage regulator

	 * for I/O is fixed in hardware, that means we do not need control

	 * the standard SD host controller to change the I/O voltage.

	/*

	 * Supply the existing CAPS, but clear the UHS-I modes. This

	 * will allow these modes to be specified only by device

	 * tree properties through mmc_of_parse().

 SPDX-License-Identifier: GPL-2.0-or-later

/* Realtek PCI-Express SD/MMC Card Interface driver

 *

 * Copyright(c) 2009-2013 Realtek Semiconductor Corp. All rights reserved.

 *

 * Author:

 *   Wei WANG <wei_wang@realsil.com.cn>

 DEBUG */

/*

 * sd_pre_dma_transfer - do dma_map_sg() or using cookie

 *

 * @pre: if called in pre_req()

 * return:

 *	0 - do dma_map_sg()

 *	1 - using cookie

 Read data from ping-pong buffer */

 Read data from SD_CMDx registers */

 Eliminate returned value of CHECK_REG_CMD */

 Check (Start,Transmission) bit of Response */

 Check CRC7 */

		/*

		 * The controller offloads the last byte {CRC-7, end bit 1'b1}

		 * of response type R2. Assign dummy CRC, 0, and end bit to the

		 * byte(ptr[16], goes into the LSB of resp[3] later).

 Wait till SD DATA IDLE */

		/*

		 * If test mode is set switch to SD Express mandatorily,

		 * this is only for factory testing.

		/*

		 * HW read wp status when resuming from S3/S4,

		 * and then picks SD legacy interface if it's set

		 * in read-only mode.

 Check SD mechanical write-protect switch */

 Check SD card detect */

	/* Reference to Signal Voltage Switch Sequence in SD spec.

	 * Wait for a period of time so that the card can drive SD_CMD and

	 * SD_DAT[3:0] to low after sending back CMD11 response.

	/* SD_CMD, SD_DAT[3:0] should be driven to low by card;

	 * If either one of SD_CMD,SD_DAT[3:0] is not low,

	 * abort the voltage switch sequence;

 Stop toggle SD clock */

 Wait 1.8V output of voltage regulator in card stable */

 Toggle SD clock again */

	/* Wait for a period of time so that the card can drive

	 * SD_DAT[3:0] to high at 1.8V

 SD_CMD, SD_DAT[3:0] should be pulled high by host */

 Stop toggle SD clock in idle */

 Set initial TX phase */

 Tuning RX phase */

 Set relink_time for changing to PCIe card */

 For PCIe/NVMe mode can't enter delink issue */

 sentinel */

 SPDX-License-Identifier: GPL-2.0

/*

 * Renesas SDHI

 *

 * Copyright (C) 2015-19 Renesas Electronics Corporation

 * Copyright (C) 2016-19 Sang Engineering, Wolfram Sang

 * Copyright (C) 2016-17 Horms Solutions, Simon Horman

 * Copyright (C) 2009 Magnus Damm

 *

 * Based on "Compaq ASIC3 support":

 *

 * Copyright 2001 Compaq Computer Corporation.

 * Copyright 2004-2005 Phil Blundell

 * Copyright 2007-2008 OpenedHand Ltd.

 *

 * Authors: Phil Blundell <pb@handhelds.org>,

 *	    Samuel Ortiz <sameo@openedhand.com>

 *

 very old datasheets said 0x490c for SDR104, too. They are wrong! */

	/*

	 * see also

	 *	renesas_sdhi_of_data :: dma_buswidth

 nothing to do */

	/*

	 * The clock driver may not know what maximum frequency

	 * actually works, so it should be set with the max-frequency

	 * property which will already have been read to f_max.  If it

	 * was missing, assume the current frequency is the maximum.

	/*

	 * Minimum frequency is the minimum input clock frequency

	 * divided by our maximum divider.

 enable 16bit data access on SDBUF as default */

	/*

	 * We simply return the current rate if a) we are not on a R-Car Gen2+

	 * SoC (may work for others, but untested) or b) if the SCC needs its

	 * clock during tuning, so we don't change the external clock setup.

	/*

	 * We want the bus clock to be as close as possible to, but no

	 * greater than, new_clock.  As we can divide by 1 << i for

	 * any i in [0, 9] we want the input clock to be as close as

	 * possible, but no greater than, new_clock << i.

 Too fast; look for a slightly slower option */

 1/1 clock is option */

 HW engineers overrode docs: no sleep needed on R-Car2+ */

	/*

	 * If anything is missing, assume signal voltage is fixed at

	 * 3.3V and succeed/fail accordingly.

 SCC registers */

 Definitions for values the SH_MOBILE_SDHI_SCC_TMPPORT4 register */

 Definitions for values the SH_MOBILE_SDHI_SCC_TMPPORT5 register */

 Definitions for values the SH_MOBILE_SDHI_SCC register */

 Initialize SCC */

 set sampling clock selection range */

 Read TAPNUM */

 Set HS400 mode */

 Gen3 can't do automatic tap correction with HS400, so disable it */

 Set the sampling clock selection range of HS400 mode */

 Avoid bad TAP */

 read mode */

 access start and stop */

 write mode */

 access start and stop */

 disable write protect */

 read calibration code and adjust */

 set offset value to TMPPORT3, hardcoded to OFFSET0 (= 0x3) for now */

 adjustment done, clear flag */

 disable write protect */

 disable manual calibration */

 clear offset value of TMPPORT3 */

 Reset HS400 mode */

 only populated for TMIO_MMC_MIN_RCAR2 */

 Unknown why but without polling reset status, it will hang */

 At least SDHI_VER_GEN2_SDR50 needs manual release of reset */

	/*

	 * When tuning CMD19 is issued twice for each tap, merge the

	 * result requiring the tap to be good in both runs before

	 * considering it for tuning selection.

	/*

	 * If all TAP are OK, the sampling clock position is selected by

	 * identifying the change point of data.

	/*

	 * Find the longest consecutive run of successful probes. If that

	 * is at least SH_MOBILE_SDHI_MIN_TAP_ROW probes long then use the

	 * center index as the tap, otherwise bail out.

 Set SCC */

 Enable auto re-tuning */

 Tuning is not supported */

 Issue CMD19 twice for each tap */

 Set sampling clock position */

 Change TAP position according to correction status */

		/*

		 * With HS400, the DAT signal is based on DS, not CLK.

		 * Therefore, use only CMD status.

 no error in CMD signal */

 need retune */

		/*

		 * When new_tap is a bad tap, we cannot change. Then, we compare

		 * with the HS200 tuning result. When smpcmp[error_tap] is OK,

		 * we can at least retune.

 need retune */

 Check SCC error */

	/*

	 * Skip checking SCC errors when running on 4 taps in HS400 mode as

	 * any retuning would still result in the same 4 taps being used.

 CBSY is set when busy, SCLKDIVEN is cleared when busy */

	/*

	 * In Renesas controllers, when performing a

	 * multiple block read of one or two blocks,

	 * depending on the timing with which the

	 * response register is read, the response

	 * value may not be read properly.

	 * Use single block read for this HW bug

 Iff regs are 8 byte apart, sdbuf is 64 bit. Otherwise always 32. */

	/*

	 * Some controllers provide a 2nd clock just to run the internal card

	 * detection logic. Unfortunately, the existing driver architecture does

	 * not support a separation of clocks for runtime PM usage. When

	 * native hotplug is used, the tmio driver assumes that the core

	 * must continue to run for card detect to stay active, so we cannot

	 * disable it.

	 * Additionally, it is prohibited to supply a clock to the core but not

	 * to the card detect circuit. That leaves us with if separate clocks

	 * are presented, we must treat them both as virtually 1 clock.

 For some SoC, we disable internal WP. GPIO may override this */

 SDR speeds are only available on Gen2+ */

 card_busy caused issues on r8a73a4 (pre-Gen2) CD-less SDHI */

 Orginally registers were 16 bit apart, could be 32 or 64 nowadays */

 old way to determine the shift */

 2-byte alignment */

	/*

	 * All SDHI blocks support 2-byte and larger block sizes in 4-bit

	 * bus width mode.

	/*

	 * All SDHI blocks support SDIO IRQ signalling.

 All SDHI have CMD12 control bit */

 All SDHI have SDIO status bits which must be 1 */

 All SDHI support HW busy detection */

 GEN2_SDR104 is first known SDHI to use 32bit block count */

 One Gen2 SDHI incarnation does NOT have a CBSY bit */

 these have an EXTOP bit */

 Enable tuning iff we have an SCC and a supported mode */

 There must be at least one IRQ source */

/*

 * Copyright (C) 2014 Broadcom Corporation

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

/*

 * iProc SDHCI platform driver

 Get the saved transfer mode */

 Get the saved block info */

 Round up to micro-second four SD clock delay */

/*

 * The Arasan has a bugette whereby it may lose the content of successive

 * writes to the same register that are within two SD-card clock cycles of

 * each other (a clock domain crossing problem). The data

 * register does not have this problem, which is just as well - otherwise we'd

 * have to nobble the DMA engine too.

 *

 * This wouldn't be a problem with the code except that we can only write the

 * controller with 32-bit writes.  So two different 16-bit registers are

 * written back to back creates the problem.

 *

 * In reality, this only happens when SDHCI_BLOCK_SIZE and SDHCI_BLOCK_COUNT

 * are written followed by SDHCI_TRANSFER_MODE and SDHCI_COMMAND.

 * The BLOCK_SIZE and BLOCK_COUNT are meaningless until a command issued so

 * the work around can be further optimized. We can keep shadow values of

 * BLOCK_SIZE, BLOCK_COUNT, and TRANSFER_MODE until a COMMAND is issued.

 * Then, write the BLOCK_SIZE+BLOCK_COUNT in a single 32-bit write followed

 * by the TRANSFER+COMMAND in another 32-bit write.

 Write the block now as we are issuing a command */

 Block size and count are stored in shadow reg */

 Read reg, all other registers are not shadowed */

 Save the transfer mode until the command is issued */

 Save the block info until the command is issued */

 Command or other regular 32-bit write */

/*

 * There is a known bug on BCM2711's SDHCI core integration where the

 * controller will hang when the difference between the core clock and the bus

 * clock is too great. Specifically this can be reproduced under the following

 * conditions:

 *

 *  - No SD card plugged in, polling thread is running, probing cards at

 *    100 kHz.

 *  - BCM2711's core clock configured at 500MHz or more

 *

 * So we set 200kHz as the minimum clock frequency available for that SoC.

/*

 * This is a duplicate of bcm2835_(pltfrm_)data without caps quirks

 * which are provided by the ACPI table.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Remote VUB300 SDIO/SDmem Host Controller Driver

 *

 * Copyright (C) 2010 Elan Digital Systems Limited

 *

 * based on USB Skeleton driver - 2.2

 *

 * Copyright (C) 2001-2004 Greg Kroah-Hartman (greg@kroah.com)

 *

 * VUB300: is a USB 2.0 client device with a single SDIO/SDmem/MMC slot

 *         Any SDIO/SDmem/MMC device plugged into the VUB300 will appear,

 *         by virtue of this driver, to have been plugged into a local

 *         SDIO host controller, similar to, say, a PCI Ricoh controller

 *         This is because this kernel device driver is both a USB 2.0

 *         client device driver AND an MMC host controller driver. Thus

 *         if there is an existing driver for the inserted SDIO/SDmem/MMC

 *         device then that driver will be used by the kernel to manage

 *         the device in exactly the same fashion as if it had been

 *         directly plugged into, say, a local pci bus Ricoh controller

 *

 * RANT: this driver was written using a display 128x48 - converting it

 *       to a line width of 80 makes it very difficult to support. In

 *       particular functions have been broken down into sub functions

 *       and the original meaningful names have been shortened into

 *       cryptic ones.

 *       The problem is that executing a fragment of code subject to

 *       two conditions means an indentation of 24, thus leaving only

 *       56 characters for a C statement. And that is quite ridiculous!

 *

 * Data types: data passed to/from the VUB300 is fixed to a number of

 *             bits and driver data fields reflect that limit by using

 *             u8, u16, u32

 Bit7 - Rd/Wr */

 ReadSize + ReadSize */

 to pad out to 64 bytes */

 Bit7 - Rd/Wr */

 don't ask why !! */

 to pad out to 64 bytes */

 Terminating entry */

 max of 7 sdio fn's */

 EndPoint for commands */

 EndPoint for responses */

 EndPoint for out data */

 EndPoint for inp data */

 ApplicationSpecific */

 by the MMC CORE */

 in the firmware */

 Function Block Size */

 kref callback - softirq */

	/*

	 * and hence also frees vub300

	 * which is contained at the end of struct mmc

		/*

		 * then the cmndworkqueue was not previously

		 * running and the above get ref is obvious

		 * required and will be put when the thread

		 * terminates by a specific call

		/*

		 * the cmndworkqueue was already running from

		 * a previous invocation and thus to keep the

		 * kref counts correct we must undo the get

		/*

		 * then the pollworkqueue was not previously

		 * running and the above get ref is obvious

		 * required and will be put when the thread

		 * terminates by a specific call

		/*

		 * the pollworkqueue was already running from

		 * a previous invocation and thus to keep the

		 * kref counts correct we must undo the get

		/*

		 * then the deadworkqueue was not previously

		 * running and the above get ref is obvious

		 * required and will be put when the thread

		 * terminates by a specific call

		/*

		 * the deadworkqueue was already running from

		 * a previous invocation and thus to keep the

		 * kref counts correct we must undo the get

 urb completion handler - hardirq */

 urb completion handler - hardirq */

 cmd_mutex is held by vub300_pollwork_thread */

 no change */

	/*

	 * cmd_mutex is held by vub300_pollwork_thread,

	 * vub300_deadwork_thread or vub300_cmndwork_thread

 cmd_mutex is held by vub300_pollwork_thread */

 cmd_mutex is held by vub300_pollwork_thread */

 no need to do anything */

 commretval > 0 */

/* this thread runs only when the driver

 * is trying to poll the device for an IRQ

 NOT irq */

 no need to do anything */

 vub300->card_present */

 NOT vub300->irqs_queued */

 NOT irq */

		/*

		 * a command got in as the inactivity

		 * timer expired - so we just let the

		 * processing of the command show if

		 * the device is dead

		/*

		 * the MMC core must not have responded

		 * to the previous indication - lets

		 * hope that it eventually does so we

		 * will just ignore this for now

 softirq */

 urb completion handler - hardirq */

 we have to let the initiator handle the error */

		/*

		 * we have seen this happen once or twice and

		 * we suspect a buggy USB host controller

 this means that the command (typically CMD52) succeeded */

		/*

		 * this is an error response from the VUB300 chip

		 * and we let the initiator handle it

 got_response_in */

 urb completion handler - hardirq */

			/*

			 * the urb completion handler will call

			 * our completion handler

			/*

			 * and thus we only call it directly

			 * when it will not be called

/*

 * the STUFF bits are masked out for the comparisons

 cmd_mutex is held by vub300_cmndwork_thread */

	/*

	 * it is a shame that we can not use "sizeof(struct sd_command_header)"

	 * this is because the packet _must_ be padded to 64 bytes

 "0" means port 1 */

 standard read command */

 BLOCK MODE */

 BYTE MODE */

/*

 * timer callback runs in atomic mode

 *       so it cannot call usb_kill_urb()

/*

 * this is a separate function to solve the 80 column width restriction

 skip comment */

/*

 * if the binary containing the EMPTY PseudoCode can not be found

 * vub300->vub_name is set anyway in order to prevent an automatic retry

 urb completion handler - hardirq */

 cmd_mutex is held by vub300_cmndwork_thread */

 cmd_mutex is held by vub300_cmndwork_thread */

 cmd_mutex is held by vub300_cmndwork_thread */

 don't you just love these work-rounds */

 no data padding required */

 cmd_mutex is held by vub300_cmndwork_thread */

 TIMED OUT */

 we don't know which of "out" and "res" if any failed */

 we don't know which of "out" and "res" if any failed */

		/*

		 * the error occurred sending the command

		 * or receiving the response

		/*

		 * the command completed successfully

		 * and there was no piggybacked data

 this thread runs only when there is an upper level command req outstanding */

			/*

			 * the name of the EMPTY Pseudo firmware file

			 * is used as a flag to indicate that the file

			 * has been already downloaded to the VUB300 chip

 cmd_mutex is held by vub300_mmc_request */

 because it does not match the first one */

 cmd_mutex is held by vub300_mmc_request */

				/*

				 * a write to a dynamic register

				 * nullifies our offloaded value

 NOT irq */

		/*

		 * for performance we have to return immediately

		 * if the requested data has been offloaded

			/*

			 * the kernel lock diagnostics complain

			 * if the cmd_mutex * is "passed on"

			 * to the cmndwork thread,

			 * so we must release it now

			 * and re-acquire it in the cmndwork thread

 ARRAY_SIZE(buf) does not work !!! */

 NOT irq */

 must wait for the VUB300 u-proc to boot up */

 this should mean no change of state */

 NOT irq */

 this should not happen, so we will just ignore it */

 NOT irq */

 this also allocates memory for our VUB300 mmc host device */

 MMC core transfer sizes tunable parameters */

	/*

	 * MMC_CAP_NEEDS_POLL causes core.c:mmc_rescan() to poll

	 * for devices which results in spurious CMD7's being

	 * issued which stops some SDIO cards from working

	/*

	 *      set up the endpoint information

	 *

	 * use the first pair of bulk-in and bulk-out

	 *     endpoints for Command/Response+Interrupt

	 *

	 * use the second pair of bulk-in and bulk-out

	 *     endpoints for Data In/Out

 we have the expected EndPoints */

	/*

	 * and hence also frees vub300

	 * which is contained at the end of struct mmc

 NOT irq */

 prevent more I/O from starting */

 NOT irq */

 NOT irq */

 we are sure no URBs are active - no locking needed */

 NOT irq */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * sdhci-pltfm.c Support for SDHCI platform devices

 * Copyright (c) 2009 Intel Corporation

 *

 * Copyright (c) 2007, 2011 Freescale Semiconductor, Inc.

 * Copyright (c) 2009 MontaVista Software, Inc.

 *

 * Authors: Xiaobo Xie <X.Xie@freescale.com>

 *	    Anton Vorontsov <avorontsov@ru.mvista.com>

/* Supports:

 * SDHCI platform devices

 *

 * Inspired by sdhci-pci.c, by Pierre Ossman

 Old device trees don't have the wp-inverted property. */

 CONFIG_PPC */

 CONFIG_OF */

 legacy */

 SPDX-License-Identifier: GPL-2.0

/*

 * sdhci-pci-arasan.c - Driver for Arasan PCI Controller with

 * integrated phy.

 *

 * Copyright (C) 2017 Arasan Chip Systems Inc.

 *

 * Author: Atul Garg <agarg@arasan.com>

 Extra registers for Arasan SD/SDIO/MMC Host Controller with PHY */

 PHY Specific Registers */

 Mode Controls */

/*

 * Controller has no specific bits for HS200/HS.

 * Used BIT(4), BIT(5) for software programming.

 Arasan private data */

 Masking valid data bits */

 Initialize the Arasan PHY */

 Program IOPADs and wait for calibration to be done */

 Program CMD/Data lines */

 Set Arasan PHY for different modes */

 Change phy settings for the new clock */

/*

 * Driver for MMC and SSD cards for Cavium OCTEON SOCs.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 *

 * Copyright (C) 2012-2017 Cavium Inc.

/*

 * The l2c* functions below are used for the EMMC-17978 workaround.

 *

 * Due to a bug in the design of the MMC bus hardware, the 2nd to last

 * cache block of a DMA read must be locked into the L2 Cache.

 * Otherwise, data corruption may occur.

 XKPHYS */

/*

 * Lock a single line into L2. The line is zeroed before locking

 * to make sure no dram accesses are made.

 Unlock the line */

 Unlock a single line in the L2 cache. */

 Unlock the line */

 Locks a memory region in the L2 cache. */

 Round start/end to cache line boundaries */

 Unlock a memory region in the L2 cache. */

 Round start/end to cache line boundaries */

 For CN70XX, switch the MMC controller onto the bus. */

		/*

		 * First seven are the EMM_INT bits 0..6, then two for

		 * the EMM_DMA_INT bits

 work around legacy u-boot device trees */

 First one is EMM second DMA */

	/*

	 * To keep the register addresses shared we intentionaly use

	 * a negative offset here, first register used on Octeon therefore

	 * starts at 0x20 (MIO_EMM_DMA_CFG).

	/*

	 * Clear out any pending interrupts that may be left over from

	 * bootloader.

 Only CMD_DONE, DMA_DONE, CMD_ERR, DMA_ERR */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  cb710/mmc.c

 *

 *  Copyright by Michał Mirosław, 2008-2009

	1, 2, 4, 8, 16, 32, 128, 512 */

	/* on CB710 in HP nx9500:

	 *   src_freq_idx == 0

	 *   indexes 1-7 work as written in the table

	 *   indexes 0,8-15 give no clock output

	/* clear global IE

	/* look like interrupt is fired whenever

	 * WORD[0x0C] & WORD[0x10] != 0;

	 * -> bit 15 port 0x0C seems to be global interrupt enable

 this is the only thing irq_lock protects */

 it is just a guess, so log it */

 'what' is a bit in MMC_STATUS1 */

 FIXME: real timeout */

 FIXME: real timeout */

 without this, received data is prepended with 8-bytes of zeroes */

	/* TODO: I don't know how/if the hardware handles non-16B-boundary blocks

	/* TODO: I don't know how/if the hardware handles multiple

	/* Windows driver returned 0 for commands for which no response

	 * is expected. It happened that there were only two such commands

	 * used: MMC_GO_IDLE_STATE and MMC_GO_INACTIVE_STATE so it might

	 * as well be a bug in that driver.

	 *

	 * Original driver set bit 14 for MMC/SD application

	 * commands. There's no difference 'on the wire' and

	 * it apparently works without it anyway.

		/* Windows driver set 01 at bits 4,3 except for

		 * MMC_SET_BLOCKLEN where it set 10. Maybe the

		 * hardware can do something special about this

		 * command? The original driver looks buggy/incomplete

		 * anyway so we ignore this for now.

		 *

		 * I assume that 00 here means no response is expected.

 Looks like final byte with CRC is always stripped (same as SDHCI) */

 a lot of magic for now */

	/* This port behaves weird: quick byte reads of 0x08,0x09 return

	 * 0xFF,0x00 after writing 0xFFFF to 0x08; it works correctly when

	 * read/written from userspace...  What am I missing here?

 ignore */

 ack the event */

 CONFIG_PM */

 harmless (maybe) magic */

	/*

	 * In cb710_wait_for_event() we use a fixed timeout of ~2s, hence let's

	 * inform the core about it. A future improvement should instead make

	 * use of the cmd->busy_timeout.

 IRQs should be disabled now, but let's stay on the safe side */

 clear config ports - just in case */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  WM8505/WM8650 SD/MMC Host Controller

 *

 *  Copyright (C) 2010 Tony Prisk

 *  Copyright (C) 2008 WonderMedia Technologies, Inc.

 MMC/SD controller registers */

 VT8500 only */

 SDMMC_CTLR bit fields */

 SDMMC_BUSMODE bit fields */

 SDMMC_BLKLEN bit fields */

 SDMMC_INTMASK0 bit fields */

 SDMMC_INTMASK1 bit fields */

 SDMMC_STS0 bit fields */

 SDMMC_STS1 bit fields */

 SDMMC_STS2 bit fields */

 SDMMC_EXTCTRL bit fields */

 MMC/SD DMA Controller Registers */

 SDDMA_GCR bit fields */

 SDDMA_IER bit fields */

 SDDMA_ISR bit fields */

 SDDMA_RBR bit fields */

 SDDMA_CCR bit fields */

 SDDMA_CCR event status */

 write command, arg, resptype registers */

 reset response FIFO */

 ensure clock enabled - VT3465 */

 clear status bits */

 set command type */

 unmap the DMA pages used for write data */

 Check if the DMA ISR returned a data error */

 single-block read/write requests end here */

			/*

			 * we change the priv->cmd variable so the response is

			 * stored in the stop struct rather than the original

			 * calling command struct

			/*

			 * if the command (regular) interrupt has already

			 * completed, finish off the request otherwise we wait

			 * for the command interrupt and finish from there.

 Check for card insertion */

 handle non-data & stop_transmission requests */

 handle data requests */

			/*

			 * If the dma interrupt has already completed, finish

			 * off the request; otherwise we wait for the DMA

			 * interrupt and finish from there.

 reset controller */

 reset response FIFO */

 enable GPI pin to detect card */

 clear interrupt status */

 setup interrupts */

 set the DMA timeout */

 auto clock freezing enable */

 set a default clock speed of 400Khz */

 Enable DMA Interrupts */

 Write DMA Descriptor Pointer Register */

	/*

	 * Use the cmd variable to pass a pointer to the resp[] structure

	 * This is required on multi-block requests to pass the pointer to the

	 * stop command

 rsptype=7 only valid for SPI commands - should be =2 for SD */

 rsptype=21 is R1B, convert for controller */

 completion is now handled in the regular_isr() */

 set controller data length */

 set controller block count */

 Controller capabilities */

 Sentinel */ },

 alloc some DMA buffers for descriptors/transfers */

 configure the controller to a known 'ready' state */

 reset SD controller */

 release the dma buffers */

 !CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OpenFirmware bindings for the MMC-over-SPI driver

 *

 * Copyright (c) MontaVista Software, Inc. 2008.

 *

 * Author: Anton Vorontsov <avorontsov@ru.mvista.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Synopsys DesignWare Multimedia Card PCI Interface driver

 *

 * Copyright (C) 2012 Vayavya Labs Pvt. Ltd.

 Defining the Capabilities */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2014, Fuzhou Rockchip Electronics Co., Ltd

	/*

	 * cclkin: source clock of mmc controller

	 * bus_hz: card interface clock generated by CLKGEN

	 * bus_hz = cclkin / RK3288_CLKGEN_DIV

	 * ios->clock = (div == 0) ? bus_hz : (bus_hz / (2 * div))

	 *

	 * Note: div can only be 0 or 1, but div must be set to 1 for eMMC

	 * DDR52 8-bit mode.

 force dw_mci_setup_bus() */

 Make sure we use phases which we can enumerate with */

	/*

	 * Set the drive phase offset based on speed mode to achieve hold times.

	 *

	 * NOTE: this is _not_ a value that is dynamically tuned and is also

	 * _not_ a value that will vary from board to board.  It is a value

	 * that could vary between different SoC models if they had massively

	 * different output clock delays inside their dw_mmc IP block (delay_o),

	 * but since it's OK to overshoot a little we don't need to do complex

	 * calculations and can pick values that will just work for everyone.

	 *

	 * When picking values we'll stick with picking 0/90/180/270 since

	 * those can be made very accurately on all known Rockchip SoCs.

	 *

	 * Note that these values match values from the DesignWare Databook

	 * tables for the most part except for SDR12 and "ID mode".  For those

	 * two modes the databook calculations assume a clock in of 50MHz.  As

	 * seen above, we always use a clock in rate that is exactly the

	 * card's input clock (times RK3288_CLKGEN_DIV, but that gets divided

	 * back out before the controller sees it).

	 *

	 * From measurement of a single device, it appears that delay_o is

	 * about .5 ns.  Since we try to leave a bit of margin, it's expected

	 * that numbers here will be fine even with much larger delay_o

	 * (the 1.4 ns assumed by the DesignWare Databook would result in the

	 * same results, for instance).

		/*

		 * In almost all cases a 90 degree phase offset will provide

		 * sufficient hold times across all valid input clock rates

		 * assuming delay_o is not absurd for a given SoC.  We'll use

		 * that as a default.

			/*

			 * Since clock in rate with MMC_DDR52 is doubled when

			 * bus width is 8 we need to double the phase offset

			 * to get the same timings.

			/*

			 * In the case of 150 MHz clock (typical max for

			 * Rockchip SoCs), 90 degree offset will add a delay

			 * of 1.67 ns.  That will meet min hold time of .8 ns

			 * as long as clock output delay is < .87 ns.  On

			 * SoCs measured this seems to be OK, but it doesn't

			 * hurt to give margin here, so we use 180.

 inclusive */

 Try each phase and extract good ranges */

 No extra skipping rules if we're at the end */

			/*

			 * No need to check too close to an invalid

			 * one since testing bad phases is slow.  Skip

			 * 20 degrees.

 Always test the last one */

 wrap around case, merge the end points */

 Find the longest range */

 It is slot 8 on Rockchip SoCs */

 Common capabilities of RK3288 SoC */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Amlogic SD/eMMC driver for the GX/S905 family SoCs

 *

 * Copyright (c) 2016 BayLibre, SAS.

 * Author: Kevin Hilman <khilman@baylibre.com>

 internal buffer max: 512 bytes */

 in clock cycles */

 in ms */

 in ms */

 in clock cycles */

 max. 2^15 ms */

	/*

	 * When Controller DMA cannot directly access DDR memory, disable

	 * support for Chain Mode to directly use the internal SRAM using

	 * the bounce buffer mode.

 SD_IO_RW_EXTENDED (CMD53) can also use block mode under the hood */

		/*

		 * In block mode DMA descriptor format, "length" field indicates

		 * number of blocks and there is no way to pass DMA size that

		 * is not multiple of SDIO block size, making it impossible to

		 * tie more than one memory buffer with single SDIO block.

		 * Block mode sg buffer size should be aligned with SDIO block

		 * size, otherwise chain mode could not be used.

 check for 8 byte alignment */

/*

 * Gating the clock on this controller is tricky.  It seems the mmc clock

 * is also used by the controller.  It may crash during some operation if the

 * clock is stopped.  The safest thing to do, whenever possible, is to keep

 * clock running at stop it at the pad using the pinmux.

		/*

		 * If the pinmux is not provided - default to the classic and

		 * unsafe method

 Make sure the clock is not stopped in the controller */

 Same request - bail-out */

 stop clock */

 return with clock being stopped */

 Stop the clock during rate change to avoid glitches */

 DDR modes require higher module clock */

 We should report the real output frequency of the controller */

 (re)start clock */

/*

 * The SD/eMMC IP block has an internal mux and divider used for

 * generating the MMC clock.  Use the clock framework to create and

 * manage these clocks.

 init SD_EMMC_CLOCK to sane defaults w/min clock rate */

 get the mux parents */

 create the mux */

 create the divider */

 init SD_EMMC_CLOCK to sane defaults w/min clock rate */

 Resampling is done using the source clock */

	/*

	 * GPIO regulator, only controls switching between 1v8 and

	 * 3v3, doesn't support MMC_POWER_OFF, MMC_POWER_ON.

 Bus width */

 check if block-size matches, if not update */

 ensure descriptor is written before kicked */

 local sg copy for dram_access_quirk */

 Setup descriptors */

 owned by CPU */

 stop in case of error */

 data? */

 Last descriptor */

 ensure descriptor is written before kicked */

 Reject request if any element offset or size is not 32bit aligned */

	/*

	 * The memory at the end of the controller used as bounce buffer for

	 * the dram_access_quirk only accepts 32bit read/write access,

	 * check the aligment and length of the data before starting the request.

 Stop execution */

 ack all raised interrupts */

 Stop desc in case of errors */

	/*

	 * It may sometimes take a while for it to actually halt. Here, we

	 * are giving it 5ms to comply

	 *

	 * If we don't confirm the descriptor is stopped, it might raise new

	 * IRQs after we have called mmc_request_done() which is bad.

/*

 * NOTE: we only need this until the GPIO/pinctrl driver can handle

 * interrupts.  For now, the MMC core will use this for polling.

 assume present */

 abort chain on R/W errors */

 We are only interrested in lines 0 to 3, so mask the other ones */

 vqmmc regulator is available */

		/*

		 * The usual amlogic setup uses a GPIO to switch from one

		 * regulator to the other. While the voltage ramp up is

		 * pretty fast, care must be taken when switching from 3.3v

		 * to 1.8v. Please make sure the regulator framework is aware

		 * of your own regulator constraints

 no vqmmc regulator, assume fixed regulator at 3/3.3V */

 The G12A SDIO Controller needs an SRAM bounce buffer */

 Get regulators and the supported OCR mask */

 set config to sane default */

 Stop execution */

 clear, ack and enable interrupts */

 Limit segments to 1 due to low available sram memory */

 Limit to the available sram memory */

	/*

	 * At the moment, we don't know how to reliably enable HS400.

	 * From the different datasheets, it is not even clear if this mode

	 * is officially supported by any of the SoCs

		/*

		 * The MMC Controller embeds 1,5KiB of internal SRAM

		 * that can be used to be used as bounce buffer.

		 * In the case of the G12A SDIO controller, use these

		 * instead of the DDR memory

 data bounce buffer */

 disable interrupts */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2010 Marvell International Ltd.

 *		Zhangfei Gao <zhangfei.gao@marvell.com>

 *		Kevin Wang <dwang4@marvell.com>

 *		Mingwei Wang <mwwang@marvell.com>

 *		Philip Rakity <prakity@marvell.com>

 *		Mark Brown <markb@marvell.com>

/*

 * These registers are relative to the second register region, for the

 * MBus bridge.

/*

 * Fields below belong to SDIO3 Configuration Register (third register

 * region for the Armada 38x flavor)

 Write size, attributes and target id to control register */

 Write base address to base register */

		/*

		 * According to erratum 'FE-2946959' both SDR50 and DDR50

		 * modes require specific clock adjustments in SDIO3

		 * Configuration register, if the adjustment is not done,

		 * remove them from the capabilities.

	/*

	 * According to erratum 'ERR-7878951' Armada 38x SDHCI

	 * controller has different capabilities than the ones shown

	 * in its registers

		/*

		 * tune timing of read data/command when crc error happen

		 * no performance impact

 set we want notice of when 74 clocks are sent */

 start sending the 74 clocks */

 slowest speed is about 100KHz or 10usec per clock */

 clear the interrupt bit if posted */

	/*

	 * Set V18_EN -- UHS modes do not work without this.

	 * does not change signaling voltage

 Select Bus Speed Mode for host */

	/*

	 * Update SDIO3 Configuration register according to erratum

	 * FE-2946959

 enable 1/8V DDR capable */

 on-chip device */

 If slot design supports 8 bit data, indicate this to MMC. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PHY support for Xenon SDHC

 *

 * Copyright (C) 2016 Marvell, All Rights Reserved.

 *

 * Author:	Hu Ziji <huziji@marvell.com>

 * Date:	2016-8-24

 Register base for eMMC PHY 5.0 Version */

 Register base for eMMC PHY 5.1 Version */

/* Preferred ZNR and ZPR value vary between different boards.

 * The specific ZNR and ZPR value should be defined here

 * according to board actual timing.

/*

 * List offset of PHY registers and some special register values

 * in eMMC PHY 5.0 or eMMC PHY 5.1

 Offset of Timing Adjust register */

 Offset of Func Control register */

 Offset of Pad Control register */

 Offset of Pad Control register 2 */

 Offset of DLL Control register */

 Offset of Logic Timing Adjust register */

 DLL Update Enable bit */

 value in Logic Timing Adjustment register */

 Register address of SoC PHY PAD ctrl */

 SoC PHY PAD ctrl type */

 SoC specific operation to set SoC PHY PAD */

/*

 * eMMC PHY configuration and operations

 Nr of consecutive Sampling Points of a Valid Sampling Window */

 Divider for calculating Tuning Step */

/*

 * eMMC 5.0/5.1 PHY init/re-init.

 * eMMC PHY init should be executed after:

 * 1. SDCLK frequency changes.

 * 2. SDCLK is stopped and re-enabled.

 * 3. config in emmc_phy_regs->timing_adj and emmc_phy_regs->func_ctrl

 * are changed

 Add duration of FC_SYNC_RST */

 Add interval between FC_SYNC_EN and FC_SYNC_RST */

 Add duration of asserting FC_SYNC_EN */

 Add duration of waiting for PHY */

 4 additional bus clock and 4 AXI bus clock are required */

 Use the possibly slowest bus frequency value */

 get the wait time */

 wait for host eMMC PHY init completes */

/*

 * Set SoC PHY voltage PAD control register,

 * according to the operation voltage on PAD.

 * The detailed operation depends on SoC implementation.

/*

 * Enable eMMC PHY HW DLL

 * DLL should be enabled and stable before HS200/SDR104 tuning,

 * and before HS400 data strobe setting.

 Enable DLL */

	/*

	 * Set Phase as 90 degree, which is most common value.

	 * Might set another value if necessary.

	 * The granularity is 1 degree.

 Wait max 32 ms */

/*

 * Config to eMMC PHY to prepare for tuning.

 * Enable HW DLL and set the TUNING_STEP

 Achieve TUNING_STEP with HW DLL help */

 Set TUNING_STEP for later tuning */

 Disable both SDHC Data Strobe and Enhanced Strobe */

 Clear Strobe line Pull down or Pull up */

 Set HS400 Data Strobe and Enhanced Strobe */

 Enable SDHC Data Strobe */

	/*

	 * Enable SDHC Enhanced Strobe if supported

	 * Xenon Enhanced Strobe should be enabled only when

	 * 1. card is in HS400 mode and

	 * 2. SDCLK is higher than 52MHz

	 * 3. DLL is enabled

 Set Data Strobe Pull down */

/*

 * If eMMC PHY Slow Mode is required in lower speed mode (SDCLK < 55MHz)

 * in SDR mode, enable Slow Mode to bypass eMMC PHY.

 * SDIO slower SDR mode also requires Slow Mode.

 *

 * If Slow Mode is enabled, return true.

 * Otherwise, return false.

	/* When in slower SDR mode, enable Slow Mode for SDIO

	 * or when Slow Mode flag is set

		/*

		 * If Slow Mode is required, enable Slow Mode by default

		 * in early init phase to avoid any potential issue.

/*

 * Set-up eMMC 5.0/5.1 PHY.

 * Specific configuration depends on the current speed mode in use.

 Setup pad, set bit[28] and bits[26:24] */

 All FC_XX_RECEIVCE should be set as CMOS Type */

 Set CMD and DQ Pull Up */

	/*

	 * If SDIO card, set SDIO Mode

	 * Otherwise, clear SDIO Mode

	/*

	 * Set preferred ZNR and ZPR value

	 * The ZNR and ZPR value vary between different boards.

	 * Define them both in sdhci-xenon-emmc-phy.h.

	/*

	 * When setting EMMC_PHY_FUNC_CONTROL register,

	 * SD clock should be disabled

 Enable bus clock */

 Hardware team recommend a value for HS400 */

 Set SoC PHY Voltage PAD */

/*

 * Setting PHY when card is working in High Speed Mode.

 * HS400 set Data Strobe and Enhanced Strobe if it is supported.

 * HS200/SDR104 set tuning config to prepare for tuning.

		/*

		 * DDR Mode requires driver to scan Sampling Fixed Delay Line,

		 * to find out a perfect operation sampling point.

		 * It is hard to implement such a scan in host driver

		 * since initiating commands by host driver is not safe.

		 * Thus so far just keep PHY Sampling Fixed Delay in

		 * default value of DDR mode.

		 *

		 * If any timing issue occurs in DDR mode on Marvell products,

		 * please contact maintainer for internal support in Marvell.

/*

 * Adjust PHY setting.

 * PHY setting should be adjusted when SDCLK frequency, Bus Width

 * or Speed Mode is changed.

 * Additional config are required when card is working in High Speed mode,

 * after leaving Legacy Mode.

	/*

	 * The timing, frequency or bus width is changed,

	 * better to set eMMC PHY based on current setting

	 * and adjust Xenon SDHC delay.

 Update the record */

 Legacy mode is a special case */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Portions copyright (C) 2003 Russell King, PXA MMCI Driver

 * Portions copyright (C) 2004-2005 Pierre Ossman, W83L51xD SD/MMC driver

 *

 * Copyright 2008 Embedded Alley Solutions, Inc.

 * Copyright 2009-2011 Freescale Semiconductor, Inc.

 card detect polling timeout */

 Finished CMD23, now send actual command. */

		/*

		 * If there was an error on any block, we mark all

		 * data blocks as being in error.

 data */

 pio */

	/*

	 * Calculate ticks in ms since ns are large numbers

	 * and might overflow

 get logarithm to base 2 of block size for setting register */

	/*

	 * take special care of the case that data size from data->sg

	 * is not equal to blocks x blksz

 xfer count, block size and count need to be set differently */

 set the timeout count */

 pio */

 append data sg */

 sentinel */ }

 set mmc core parameters */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2013 - 2015 Fujitsu Semiconductor, Ltd

 *              Vincent Yang <vincent.yang@tw.fujitsu.com>

 * Copyright (C) 2015 Linaro Ltd  Andy Green <andy.green@linaro.org>

 * Copyright (C) 2019 Socionext Inc.

 *              Takao Orito <orito.takao@socionext.com>

 milbeaut bridge controller register */

 IO_SDIO_CR_SET should be set while reset */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/mmc/host/sdhci_f_sdh30.c

 *

 * Copyright (C) 2013 - 2015 Fujitsu Semiconductor, Ltd

 *              Vincent Yang <vincent.yang@tw.fujitsu.com>

 * Copyright (C) 2015 Linaro Ltd  Andy Green <andy.green@linaro.org>

 init vendor specific regs */

 sentinel */ }

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/* Realtek USB SD/MMC Card Interface driver

 *

 * Copyright(c) 2009-2013 Realtek Semiconductor Corp. All rights reserved.

 *

 * Author:

 *   Roger Tseng <rogerable@realtek.com>

 DEBUG */

 2-byte aligned part */

 unaligned byte */

	/* Response type:

	 * R0

	 * R1, R5, R6, R7

	 * R1b

	 * R2

	 * R3, R4

 Read data from ping-pong buffer */

 Read data from SD_CMDx registers */

 Skip result of CHECK_REG_CMD */

 Check (Start,Transmission) bit of Response */

 Check CRC7 */

		/*

		 * The controller offloads the last byte {CRC-7, end bit 1'b1}

		 * of response type R2. Assign dummy CRC, 0, and end bit to the

		 * byte(ptr[16], goes into the LSB of resp[3] later).

 Wait till SD DATA IDLE */

 setting fixed default TX phase */

 tuning RX phase */

 Check SD card detect */

 Treat failed detection as non-ro */

 Check SD card detect */

 Treat failed detection as non-exist */

		/*

		 * detect card when fail to update card existence state and

		 * speed up card removal when retry

	/* Let mmc core do the busy checking, simply stop the forced-toggle

	 * clock(while issuing CMD11) and switch voltage.

 check if any pin between dat[0:3] is low */

 sentinel */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for the MMC / SD / SDIO cell found in:

 *

 * TC6393XB TC6391XB TC6387XB T7L66XB ASIC3

 *

 * Copyright (C) 2017 Renesas Electronics Corporation

 * Copyright (C) 2017 Horms Solutions, Simon Horman

 * Copyright (C) 2007 Ian Molton

 * Copyright (C) 2004 Ian Molton

 Registers specific to this variant */

 bit7 set: 1/512, ... bit0 set: 1/4, all bits clear: 1/2 */

 Tell MFD core it can disable us now.*/

 Tell the MFD core we are ready to be enabled */

 Tell the MFD core we are ready to be enabled */

 SD control register space size is 0x200, 0x400 for bus_shift=1 */

 ------------------- device registration ----------------------- */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/mmc/host/mxcmmc.c - Freescale i.MX MMCI driver

 *

 *  This is a driver for the SDHC controller found in Freescale MX2/MX3

 *  SoCs. It is basically the same hardware as found on MX1 (imxmmc.c).

 *  Unlike the hardware found on MX1, this hardware just works and does

 *  not need all the quirks found in imxmmc.c, hence the separate driver.

 *

 *  Copyright (C) 2008 Sascha Hauer, Pengutronix <s.hauer@pengutronix.de>

 *  Copyright (C) 2006 Pavel Pisa, PiKRON <ppisa@pikron.com>

 *

 *  derived from pxamci.c by Russell King

 sentinel */

 reset sequence */

 Fall back to PIO */

 short CRC, OPCODE */

 short CRC, OPCODE, BUSY */

 long 136 bit + CRC */

 short */

 No CRC response */

 we will handle finish req below */

	/* For the DMA case the DMA engine handles the data transfer

	 * automatically. For non DMA we have to do it ourselves.

	 * Don't do it in interrupt context though.

	/*

	 * use burstlen of 64 (16 words) in 4 bit mode (--> reg value  0)

	 * use burstlen of 16 (4 words) in 1 bit mode (--> reg value 16)

	/*

	 * If board doesn't support read only detection (no mmc_gpio

	 * context or gpio is invalid), then let the mmc core decide

	 * what to do.

	/*

	 * MX3 SoCs have a silicon bug which corrupts CRC calculation of

	 * multi-block transfers when connected SDIO peripheral doesn't

	 * drive the BUSY line as required by the specs.

	 * One way to prevent this is to only allow 1-bit transfers.

 Mark transfer as erroneus and inform the upper layers */

 For devicetree parsing, the bus width is read from devicetree */

 MMC core transfer sizes tunable parameters */

 adjust max_segs after devtype detection */

 recommended in data sheet */

 Ignore errors to fall back to PIO mode */

 SPDX-License-Identifier: GPL-2.0

/*

 * bcm2835 sdhost driver.

 *

 * The 2835 has two SD controllers: The Arasan sdhci controller

 * (supported by the iproc driver) and a custom sdhost controller

 * (supported by this driver).

 *

 * The sdhci controller supports both sdcard and sdio.  The sdhost

 * controller supports the sdcard only, but has better performance.

 * Also note that the rpi3 has sdio wifi, so driving the sdcard with

 * the sdhost controller allows to use the sdhci controller for wifi

 * support.

 *

 * The configuration is done by devicetree via pin muxing.  Both

 * SD controller are available on the same pins (2 pin groups = pin 22

 * to 27 + pin 48 to 53).  So it's possible to use both SD controllers

 * at the same time with different pin groups.

 *

 * Author:      Phil Elwell <phil@raspberrypi.org>

 *              Copyright (C) 2015-2016 Raspberry Pi (Trading) Ltd.

 *

 * Based on

 *  mmc-bcm2835.c by Gellert Weisz

 * which is, in turn, based on

 *  sdhci-bcm2708.c by Broadcom

 *  sdhci-bcm2835.c by Stephen Warren and Oleksandr Tymoshenko

 *  sdhci.c and sdhci-pci.c by Pierre Ossman

 Command to SD card              - 16 R/W */

 Argument to SD card             - 32 R/W */

 Start value for timeout counter - 32 R/W */

 Start value for clock divider   - 11 R/W */

 SD card response (31:0)         - 32 R   */

 SD card response (63:32)        - 32 R   */

 SD card response (95:64)        - 32 R   */

 SD card response (127:96)       - 32 R   */

 SD host status                  - 11 R/W */

 SD card power control           -  1 R/W */

 Emergency Debug Mode            - 13 R/W */

 Host configuration              -  2 R/W */

 Host byte count (debug)         - 32 R/W */

 Data to/from SD card            - 32 R/W */

 Host block count (SDIO/SDHC)    -  9 R/W */

 Reserved */

 Reserved */

 Maximum block count for PIO (0 = always DMA) */

 Current clock speed */

 Max possible freq */

 Timer for timeouts */

 SG state for PIO */

 remaining PIO blocks */

 Device IRQ */

 cached registers */

 Current request */

 Current command */

 Current data request */

 Data finished before cmd */

 Wait for busy interrupt */

 Send CMD23 */

 for threaded irq handler */

 DMA part */

 Write 1s to clear */

 Limit fifo usage due to silicon bug */

	/* The block doesn't manage the FIFO DREQs properly for

	 * multi-block transfers, so don't attempt to DMA the final

	 * few words.  Unfortunately this requires the final sg entry

	 * to be trimmed.  N.B. This code demands that the overspill

	 * is contained in a single sg entry.

 The parameters have already been validated, so this will not fail */

 Use PIO */

 if it takes a while make poll interval bigger */

 Clear any error flags */

	/* Need to send CMD12 if -

	 * a) open-ended multiblock transfer (no CMD23)

	 * b) error in multiblock transfer

 No busy, so poll for completion */

		/* Data managed to finish before the

		 * command completed. Make sure we do

		 * things in the proper order.

 Check for errors */

 Clear the errors */

 Kick the FSM out of its wait */

 Finished CMD23, now send actual command. */

				/* DMA transfer starts now, PIO starts

				 * after irq

 Finished CMD12 */

 Processed actual command. */

	/* There are no dedicated data/space available interrupt

	 * status bits, so it is necessary to use the single shared

	 * data/space available FIFO status bits. It is therefore not

	 * an error to get here when there is no data transfer in

	 * progress.

 Use the block interrupt for writes after the first block */

	/* There is no true data interrupt status bit, so it is

	 * necessary to qualify the data flag with the interrupt

	 * enable bit.

	/* The SDCDIV register has 11 bits, and holds (div - 2).  But

	 * in data mode the max is 50MHz wihout a minimum, and only

	 * the bottom 3 bits are used. Since the switch over is

	 * automatic (unless we have marked the card as slow...),

	 * chosen values have to make sense in both modes.  Ident mode

	 * must be 100-400KHz, so can range check the requested

	 * clock. CMD15 must be used to return to data mode, so this

	 * can be monitored.

	 *

	 * clock 250MHz -> 0->125MHz, 1->83.3MHz, 2->62.5MHz, 3->50.0MHz

	 *                 4->41.7MHz, 5->35.7MHz, 6->31.3MHz, 7->27.8MHz

	 *

	 *		 623->400KHz/27.8MHz

	 *		 reset value (507)->491159/50MHz

	 *

	 * BUT, the 3-bit clock divisor in data mode is too small if

	 * the core clock is higher than 250MHz, so instead use the

	 * SLOW_CARD configuration bit to force the use of the ident

	 * clock divisor at all times.

		/* Can't stop the clock, but make it as slow as possible

		 * to show willing

 Calibrate some delays */

 Set the timeout to 500ms */

 Reset the error statuses in case this is a retry */

 DMA transfer starts now, PIO starts after irq */

 set bus width */

 Disable clever clock switching, to cope with fast core clocks */

 host controller capabilities */

 DREQ channel */

 DREQ channel */

 report supported voltage ranges */

 Set interrupt enables */

	/* Parse OF address directly to get the physical address for

	 * DMA to our registers.

 Ignore errors to fall back to PIO mode */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/drivers/mmc/s3cmci.h - Samsung S3C MCI driver

 *

 *  Copyright (C) 2004-2006 maintech GmbH, Thomas Kleffel <tk@maintech.de>

 *

 * Current driver maintained by Ben Dooks and Simtec Electronics

 *  Copyright (C) 2008 Simtec Electronics <ben-linux@fluff.org>

 CONFIG_MMC_DEBUG */

/**

 * s3cmci_host_usedma - return whether the host is using dma or pio

 * @host: The host state

 *

 * Return true if the host is using DMA to transfer data, else false

 * to use PIO mode. Will return static data depending on the driver

 * configuration.

 CONFIG_MMC_S3C_DMA */

 preserve the SDIO IRQ mask state */

/**

 * s3cmci_check_sdio_irq - test whether the SDIO IRQ is being signalled

 * @host: The host to check.

 *

 * Test to see if the SDIO interrupt is being signalled in case the

 * controller has failed to re-detect a card interrupt. Read GPE8 and

 * see if it is low and if so, signal a SDIO interrupt.

 *

 * This is currently called if a request is finished (we assume that the

 * bus is now idle) and when the SDIO IRQ is enabled in case the IRQ is

 * already being indicated.

/**

 * s3cmci_enable_irq - enable IRQ, after having disabled it.

 * @host: The device state.

 * @more: True if more IRQs are expected from transfer.

 *

 * Enable the main IRQ if needed after it has been disabled.

 *

 * The IRQ can be one of the following states:

 *	- disabled during IDLE

 *	- disabled whilst processing data

 *	- enabled during transfer

 *	- enabled whilst awaiting SDIO interrupt detection

 pr_debug("%s: transfer %d\n", __func__, transfer); */

 write real prescaler to host, it might be set slow to fix */

		/* If we have reached the end of the block, we can

		 * read a word and get 1 to 3 bytes.  If we in the

		 * middle of the block, we have to read full words,

		 * otherwise we will write garbage, so round down to

		/* If we have reached the end of the block, we have to

		 * write exactly the remaining number of bytes.  If we

		 * in the middle of the block, we have to write full

/*

 * ISR for SDI Interface IRQ

 * Communication between driver and ISR works as follows:

 *   host->mrq 			points to current request

 *   host->complete_what	Indicates when the request is considered done

 *     COMPLETION_CMDSENT	  when the command was sent

 *     COMPLETION_RSPFIN          when a response was received

 *     COMPLETION_XFERFINISH	  when the data transfer is finished

 *     COMPLETION_XFERFINISH_RSPFIN both of the above.

 *   host->complete_request	is the completion-object the driver waits for

 *

 * 1) Driver sets up host->mrq and host->complete_what

 * 2) Driver prepares the transfer

 * 3) Driver enables interrupts

 * 4) Driver starts transfer

 * 5) Driver waits for host->complete_rquest

 * 6) ISR checks for request status (errors and success)

 * 6) ISR sets host->mrq->cmd->error and host->mrq->data->error

 * 7) ISR completes host->complete_request

 * 8) ISR disables interrupts

 * 9) Driver wakes up and takes care of the request

 *

 * Note: "->error"-fields are expected to be set to 0 before the request

 *       was issued by mmc.c - therefore they are only set, when an error

 *       contition comes up

				/* note, we used to fail the transfer

				 * here, but it seems that this is just

				 * the hardware getting it wrong.

				 *

				 * cmd->error = -EILSEQ;

				 * host->status = "error: bad command crc";

				 * goto fail_transfer;

	/* errors handled after this point are only relevant

 Check for FIFO failure */

 Read response from controller. */

 Cleanup controller */

 If we have no data transfer we are finished here */

 Calculate the amout of bytes transfer if there was no error */

	/* If we had an error while transferring data we flush the

 Clear failure register and reset fifo. */

 reset fifo */

		/* We cannot deal with unaligned blocks with more than

 write BSIZE register */

 add to IMASK register */

 write TIMER register */

 FIX: set slow clock to prevent timeouts on read */

 Restore prescaler value */

	/* Clear command, data and fifo status registers

	   Fifo clear only necessary on 2440, but doesn't hurt on 2410

 Send command */

 Enable Interrupt */

 Set clock */

 If requested clock is 0, real_rate will be 0, too */

 Set the power state */

 Set CLOCK_ENABLE */

 CONFIG_DEBUG_FS */

 If we get -ENOENT we have no card detect GPIO line */

 Depending on the dma state, get a DMA channel to use. */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * USB SD Host Controller (USHC) controller driver.

 *

 * Copyright (C) 2010 Cambridge Silicon Radio Ltd.

 *

 * Notes:

 *   - Only version 2 devices are supported.

 *   - Version 2 devices only support SDIO cards/devices (R2 response is

 *     unsupported).

 *

 * References:

 *   [USHC] USB SD Host Controller specification (CS-118793-SP)

	/*

	 * Ignore the card interrupt status on interrupt transfers that

	 * were submitted while card interrupts where disabled.

	 *

	 * This avoid occasional spurious interrupts when enabling

	 * interrupts immediately after clearing the source on the card.

 Version 2 firmware doesn't support the R2 response format. */

	/* The Astoria's data FIFOs don't work with clock speeds < 5MHz so

 Start cmd with CBW. */

 Submit data (if any). */

 Submit CSW. */

 Hardware can't detect interrupts while the clock is off. */

 Read capabilities. */

 CSR USB SD Host Controller */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Parse the EFI PCDP table to locate the console device.

 *

 * (c) Copyright 2002, 2003, 2004 Hewlett-Packard Development Company, L.P.

 *	Khalid Aziz <khalid.aziz@hp.com>

 *	Alex Williamson <alex.williamson@hp.com>

 *	Bjorn Helgaas <bjorn.helgaas@hp.com>

 struct copy since ifptr might not be correctly aligned */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Export SMBIOS/DMI info via sysfs to userspace

 *

 * Copyright 2007, Lennart Poettering

 Filter out characters we don't want to see in the modalias string */

	/*

	 * Note new fields need to be added at the end to keep compatibility

	 * with udev's hwdb which does matches on "`cat dmi/id/modalias`*".

 Initialization */

/* In a separate function to keep gcc 3.2 happy - do NOT merge this in

	/* Not necessarily all DMI fields are available on all

	 * systems, hence let's built an attribute table of just

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2018-2019, Intel Corporation

/**

 * struct stratix10_rsu_priv - rsu data structure

 * @chan: pointer to the allocated service channel

 * @client: active service client

 * @completion: state for callback completion

 * @lock: a mutex to protect callback completion state

 * @status.current_image: address of image currently running in flash

 * @status.fail_image: address of failed image in flash

 * @status.version: the interface version number of RSU firmware

 * @status.state: the state of RSU system

 * @status.error_details: error code

 * @status.error_location: the error offset inside the image that failed

 * @dcmf_version.dcmf0: Quartus dcmf0 version

 * @dcmf_version.dcmf1: Quartus dcmf1 version

 * @dcmf_version.dcmf2: Quartus dcmf2 version

 * @dcmf_version.dcmf3: Quartus dcmf3 version

 * @retry_counter: the current image's retry counter

 * @max_retry: the preset max retry value

/**

 * rsu_status_callback() - Status callback from Intel Service Layer

 * @client: pointer to service client

 * @data: pointer to callback data structure

 *

 * Callback from Intel service layer for RSU status request. Status is

 * only updated after a system reboot, so a get updated status call is

 * made during driver probe.

/**

 * rsu_command_callback() - Update callback from Intel Service Layer

 * @client: pointer to client

 * @data: pointer to callback data structure

 *

 * Callback from Intel service layer for RSU commands.

/**

 * rsu_retry_callback() - Callback from Intel service layer for getting

 * the current image's retry counter from the firmware

 * @client: pointer to client

 * @data: pointer to callback data structure

 *

 * Callback from Intel service layer for retry counter, which is used by

 * user to know how many times the images is still allowed to reload

 * itself before giving up and starting RSU fail-over flow.

/**

 * rsu_max_retry_callback() - Callback from Intel service layer for getting

 * the max retry value from the firmware

 * @client: pointer to client

 * @data: pointer to callback data structure

 *

 * Callback from Intel service layer for max retry.

/**

 * rsu_dcmf_version_callback() - Callback from Intel service layer for getting

 * the DCMF version

 * @client: pointer to client

 * @data: pointer to callback data structure

 *

 * Callback from Intel service layer for DCMF version number

/**

 * rsu_send_msg() - send a message to Intel service layer

 * @priv: pointer to rsu private data

 * @command: RSU status or update command

 * @arg: the request argument, the bitstream address or notify status

 * @callback: function pointer for the callback (status or update)

 *

 * Start an Intel service layer transaction to perform the SMC call that

 * is necessary to get RSU boot log or set the address of bitstream to

 * boot after reboot.

 *

 * Returns 0 on success or -ETIMEDOUT on error.

/*

 * This driver exposes some optional features of the Intel Stratix 10 SoC FPGA.

 * The sysfs interfaces exposed here are FPGA Remote System Update (RSU)

 * related. They allow user space software to query the configuration system

 * status and to request optional reboot behavior specific to Intel FPGAs.

 to get the updated state */

 get the initial state from firmware */

 get DCMF version from firmware */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * DMI stands for "Desktop Management Interface".  It is part

 * of and an antecedent to, SMBIOS, which stands for System

 * Management BIOS.  See further: https://www.dmtf.org/standards

 DMI system identification string used during boot */

 bytes */

 DDR2, DDR3, DDR4 etc */

 Strings containing only spaces are considered empty */

/*

 *	We have to be cautious here. We have seen BIOSes with DMI pointers

 *	pointing to completely the wrong place for example

	/*

	 * Stop when we have seen all the items the table claimed to have

	 * (SMBIOS < 3.0 only) OR we reach an end-of-table marker (SMBIOS

	 * >= 3.0 only) OR we run off the end of the table (should never

	 * happen but sometimes does on bogus implementations.)

		/*

		 *  We want to know the total length (formatted area and

		 *  strings) before decoding to make sure we won't run off the

		 *  table in dmi_decode or dmi_string

		/*

		 * 7.45 End-of-Table (Type 127) [SMBIOS reference spec v3.0.0]

		 * For tables behind a 64-bit entry point, we have no item

		 * count and no exact table length, so stop on end-of-table

		 * marker. For tables behind a 32-bit entry point, we have

		 * seen OEM structures behind the end-of-table marker on

		 * some systems, so don't trust it.

 Trim DMI table length if needed */

/*

 *	Save a DMI string

 If the table doesn't have the field, let's return */

	/* As per the spec, if the system doesn't support this field,

	 * the value is FF

	/*

	 * As of version 2.6 of the SMBIOS specification, the first 3 fields of

	 * the UUID are supposed to be little-endian encoded.  The specification

	 * says that this is the defacto standard.

 No duplicate device */

 Skip disabled device */

 Ignore invalid values */

 Skip disabled device */

 Need SMBIOS 2.6+ structure */

/*

 *	Process a DMI table entry. Right now all we care about are the BIOS

 *	and machine entries. For 2.5 we should pull the smbus controller info

 *	out of here.

 BIOS Information */

 System Information */

 Base Board Information */

 Chassis Information */

 System Slots */

 Onboard Devices Information */

 OEM Strings */

 IPMI Device Information */

 Onboard Devices Extended Information */

 Board Name is optional */

/*

 * Check for DMI/SMBIOS headers in the system firmware image.  Any

 * SMBIOS header must start 16 bytes before the DMI header, so take a

 * 32 byte buffer and check for DMI at offset 16 and SMBIOS at offset

 * 0.  If the DMI header is present, set dmi_ver accordingly (SMBIOS

 * takes precedence) and return 0.  Otherwise return 1.

 Some BIOS report weird SMBIOS version, fix that up */

/*

 * Check for the SMBIOS 3.0 64-bit entry point signature. Unlike the legacy

 * 32-bit entry point, there is no embedded DMI header (_DMI_) in here.

 No longer specified */

		/*

		 * According to the DMTF SMBIOS reference spec v3.0.0, it is

		 * allowed to define both the 64-bit entry point (smbios3) and

		 * the 32-bit entry point (smbios), in which case they should

		 * either both point to the same SMBIOS structure table, or the

		 * table pointed to by the 64-bit entry point should contain a

		 * superset of the table contents pointed to by the 32-bit entry

		 * point (section 5.2)

		 * This implies that the 64-bit entry point should have

		 * precedence if it is defined and supported by the OS. If we

		 * have the 64-bit entry point, but fail to decode it, fall

		 * back to the legacy one (if available)

		/* This is called as a core_initcall() because it isn't

		 * needed during early boot.  This also means we can

		 * iounmap the space when we're done with it.

		/*

		 * Same logic as above, look for a 64-bit entry point

		 * first, and if not found, fall back to 32-bit entry point.

		/*

		 * Iterate over all possible DMI header addresses q.

		 * Maintain the 32 bytes around q in buf.  On the

		 * first iteration, substitute zero for the

		 * out-of-range bytes so there is no chance of falsely

		 * detecting an SMBIOS header.

	/*

	 * Set up dmi directory at /sys/firmware/dmi. This entry should stay

	 * even after farther error, as it can be used by other modules like

	 * dmi-sysfs.

/**

 *	dmi_setup - scan and setup DMI system information

 *

 *	Scan the DMI system information. This setups DMI identifiers

 *	(dmi_system_id) for printing it out on task dumps and prepares

 *	DIMM entry information (dmi_memdev_info) from the SMBIOS table

 *	for using this when reporting memory errors.

/**

 *	dmi_matches - check if dmi_system_id structure matches system DMI data

 *	@dmi: pointer to the dmi_system_id structure to check

 DMI_OEM_STRING must be exact match */

 No match */

/**

 *	dmi_is_end_of_table - check for end-of-table marker

 *	@dmi: pointer to the dmi_system_id structure to check

/**

 *	dmi_check_system - check system DMI data

 *	@list: array of dmi_system_id structures to match against

 *		All non-null elements of the list must match

 *		their slot's (field index's) data (i.e., each

 *		list string must be a substring of the specified

 *		DMI slot's string data) to be considered a

 *		successful match.

 *

 *	Walk the blacklist table running matching functions until someone

 *	returns non zero or we hit the end. Callback function is called for

 *	each successful match. Returns the number of matches.

 *

 *	dmi_setup must be called before this function is called.

/**

 *	dmi_first_match - find dmi_system_id structure matching system DMI data

 *	@list: array of dmi_system_id structures to match against

 *		All non-null elements of the list must match

 *		their slot's (field index's) data (i.e., each

 *		list string must be a substring of the specified

 *		DMI slot's string data) to be considered a

 *		successful match.

 *

 *	Walk the blacklist table until the first match is found.  Return the

 *	pointer to the matching entry or NULL if there's no match.

 *

 *	dmi_setup must be called before this function is called.

/**

 *	dmi_get_system_info - return DMI data value

 *	@field: data index (see enum dmi_field)

 *

 *	Returns one DMI data value, can be used to perform

 *	complex DMI data checks.

/**

 * dmi_name_in_serial - Check if string is in the DMI product serial information

 * @str: string to check for

/**

 *	dmi_name_in_vendors - Check if string is in the DMI system or board vendor name

 *	@str: Case sensitive Name

/**

 *	dmi_find_device - find onboard device by type/name

 *	@type: device type or %DMI_DEV_TYPE_ANY to match all device types

 *	@name: device name string or %NULL to match all

 *	@from: previous device found in search, or %NULL for new search.

 *

 *	Iterates through the list of known onboard devices. If a device is

 *	found with a matching @type and @name, a pointer to its device

 *	structure is returned.  Otherwise, %NULL is returned.

 *	A new search is initiated by passing %NULL as the @from argument.

 *	If @from is not %NULL, searches continue from next device.

/**

 *	dmi_get_date - parse a DMI date

 *	@field:	data index (see enum dmi_field)

 *	@yearp: optional out parameter for the year

 *	@monthp: optional out parameter for the month

 *	@dayp: optional out parameter for the day

 *

 *	The date field is assumed to be in the form resembling

 *	[mm[/dd]]/yy[yy] and the result is stored in the out

 *	parameters any or all of which can be omitted.

 *

 *	If the field doesn't exist, all out parameters are set to zero

 *	and false is returned.  Otherwise, true is returned with any

 *	invalid part of date set to zero.

 *

 *	On return, year, month and day are guaranteed to be in the

 *	range of [0,9999], [0,12] and [0,31] respectively.

	/*

	 * Determine year first.  We assume the date string resembles

	 * mm/dd/yy[yy] but the original code extracted only the year

	 * from the end.  Keep the behavior in the spirit of no

	 * surprises.

 2-digit year */

 no dates < spec 1.0 */

 year should fit in %04d */

 parse the mm and dd */

/**

 *	dmi_get_bios_year - get a year out of DMI_BIOS_DATE field

 *

 *	Returns year on success, -ENXIO if DMI is not selected,

 *	or a different negative error code if DMI field is not present

 *	or not parseable.

/**

 *	dmi_walk - Walk the DMI table and get called back for every record

 *	@decode: Callback function

 *	@private_data: Private data to be passed to the callback function

 *

 *	Returns 0 on success, -ENXIO if DMI is not selected or not present,

 *	or a different negative error code if DMI walking fails.

/**

 * dmi_match - compare a string to the dmi field (if exists)

 * @f: DMI field identifier

 * @str: string to compare the DMI field to

 *

 * Returns true if the requested field equals to the str (including NULL).

/**

 * dmi_memdev_type - get the memory type

 * @handle: DMI structure handle

 *

 * Return the DMI memory type of the module in the slot associated with the

 * given DMI handle, or 0x0 if no such DMI handle exists.

 Not a valid value */

/**

 *	dmi_memdev_handle - get the DMI handle of a memory slot

 *	@slot: slot number

 *

 *	Return the DMI handle associated with a given memory slot, or %0xFFFF

 *      if there is no such slot.

 Not a valid value */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * System Control and Power Interface (SCPI) Message Protocol driver

 *

 * SCPI Message Protocol is used between the System Control Processor(SCP)

 * and the Application Processors(AP). The Message Handling Unit(MHU)

 * provides a mechanism for inter-processor communication between SCP's

 * Cortex M3 and AP.

 *

 * SCP offers control and management of the core/cluster power states,

 * various power domain DVFS including the core/cluster, certain system

 * clocks configuration, thermal sensors and many others.

 *

 * Copyright (C) 2015 ARM Ltd.

 Success */

 Invalid parameter(s) */

 Invalid alignment */

 Invalid size */

 Invalid handler/callback */

 Invalid access/permission denied */

 Value out of range */

 Timeout has occurred */

 Invalid memory area or pointer */

 Invalid power state */

 Not supported or disabled */

 Device error */

 Device busy */

 SCPI Standard commands */

 SCPI Legacy Commands */

 List all commands that are required to go through the high priority link */

 List all commands used by this driver, used as indexes */

 GET_CLOCK_INFO */

 SET_DEVICE_PWR_STATE */

 GET_DEVICE_PWR_STATE */

 has to be first element */

 locking for the rx pending list */

/*

 * The SCP firmware only executes in little-endian mode, so any buffers

 * shared through SCPI should have their contents converted to little-endian

 better than switch case as long as return value is continuous */

 SCPI_SUCCESS */

 SCPI_ERR_PARAM */

 SCPI_ERR_ALIGN */

 SCPI_ERR_SIZE */

 SCPI_ERR_HANDLER */

 SCPI_ERR_ACCESS */

 SCPI_ERR_RANGE */

 SCPI_ERR_TIMEOUT */

 SCPI_ERR_NOMEM */

 SCPI_ERR_PWRSTATE */

 SCPI_ERR_SUPPORT */

 SCPI_ERR_DEVICE */

 SCPI_ERR_BUSY */

	/* Command type is not replied by the SCP Firmware in legacy Mode

	 * We should consider that command is the head of pending RX commands

	 * if the list is not empty. In TX only mode, the list would be empty.

 check if wait_for_completion is in progress or timed-out */

 RX Length is not replied by the legacy Firmware */

 first status word */

 remove entry from the list if timed-out */

 SCPI error codes > 0, translate them to Linux scale*/

 data already populated */

 uS to nS */

 only 32-bits supported, upper 32 bits can be junk */

 Ignore error if not implemented */

 stop exporting SCPI ops through get_scpi_ops */

 controller can't ack */

 Replace with legacy variants */

 Fill priority bitmap */

 SPDX-License-Identifier: GPL-2.0

/*

 * Defines interfaces for interacting with the Raspberry Pi firmware's

 * property channel.

 *

 * Copyright © 2015 Broadcom

 The property channel. */

/*

 * Sends a request to the firmware through the BCM2835 mailbox driver,

 * and synchronously waits for the reply.

/**

 * rpi_firmware_property_list - Submit firmware property list

 * @fw:		Pointer to firmware structure from rpi_firmware_get().

 * @data:	Buffer holding tags.

 * @tag_size:	Size of tags buffer.

 *

 * Submits a set of concatenated tags to the VPU firmware through the

 * mailbox property interface.

 *

 * The buffer header and the ending tag are added by this function and

 * don't need to be supplied, just the actual tags for your operation.

 * See struct rpi_firmware_property_tag_header for the per-tag

 * structure.

 Packets are processed a dword at a time. */

 The firmware will error out without parsing in this case. */

		/*

		 * The tag name here might not be the one causing the

		 * error, if there were multiple tags in the request.

		 * But single-tag is the most common, so go with it.

/**

 * rpi_firmware_property - Submit single firmware property

 * @fw:		Pointer to firmware structure from rpi_firmware_get().

 * @tag:	One of enum_mbox_property_tag.

 * @tag_data:	Tag data buffer.

 * @buf_size:	Buffer size.

 *

 * Submits a single tag to the VPU firmware through the mailbox

 * property interface.

 *

 * This is a convenience wrapper around

 * rpi_firmware_property_list() to avoid some of the

 * boilerplate in property calls.

	/* Some mailboxes can use over 1k bytes. Rather than checking

	 * size and using stack or kmalloc depending on requirements,

	 * just use kmalloc. Mailboxes don't get called enough to worry

	 * too much about the time taken in the allocation.

 This is not compatible with y2038 */

	/*

	 * Earlier DTs don't have a node for the firmware clocks but

	 * rely on us creating a platform device by hand. If we do

	 * have a node for the firmware clocks, just bail out here.

	/*

	 * Memory will be freed by rpi_firmware_delete() once all users have

	 * released their firmware handles. Don't use devm_kzalloc() here.

/**

 * rpi_firmware_get - Get pointer to rpi_firmware structure.

 * @firmware_node:    Pointer to the firmware Device Tree node.

 *

 * The reference to rpi_firmware has to be released with rpi_firmware_put().

 *

 * Returns NULL is the firmware device is not ready.

/**

 * devm_rpi_firmware_get - Get pointer to rpi_firmware structure.

 * @firmware_node:    Pointer to the firmware Device Tree node.

 *

 * Returns NULL is the firmware device is not ready.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Generic System Framebuffers

 * Copyright (c) 2012-2013 David Herrmann <dh.herrmann@gmail.com>

/*

 * simple-framebuffer probing

 * Try to convert "screen_info" into a "simple-framebuffer" compatible mode.

 * If the mode is incompatible, we return "false" and let the caller create

 * legacy nodes instead.

 try parsing screen_info into a simple-framebuffer mode struct */

	/*

	 * If the 64BIT_BASE capability is set, ext_lfb_base will contain the

	 * upper half of the base address. Assemble the address, then make sure

	 * it is valid and we can actually access it.

	/*

	 * Don't use lfb_size as IORESOURCE size, since it may contain the

	 * entire VMEM, and thus require huge mappings. Use just the part we

	 * need, that is, the part where the framebuffer is located. But verify

	 * that it does not exceed the advertised VMEM.

	 * Note that in case of VBE, the lfb_size is shifted by 16 bits for

	 * historical reasons.

 setup IORESOURCE_MEM as framebuffer memory */

 SPDX-License-Identifier: GPL-2.0

/*

 * Turris Mox rWTM firmware driver

 *

 * Copyright (C) 2019 Marek Behún <kabel@kernel.org>

/*

 * The macros and constants below come from Turris Mox's rWTM firmware code.

 * This firmware is open source and it's sources can be found at

 * https://gitlab.labs.nic.cz/turris/mox-boot-builder/tree/master/wtmi.

 board information */

 public key burned in eFuse */

	/*

	 * Signature process. This is currently done via debugfs, because it

	 * does not conform to the sysfs standard "one file per attribute".

	 * It should be rewritten via crypto API once akcipher API is available

	 * from userspace.

 only allow one read, of 136 bytes, from position 0 */

 2 arrays of 17 32-bit words are 136 bytes */

 the input is a SHA-512 hash, so exactly 64 bytes have to be read */

 if last result is not zero user has not read that information yet */

	/*

	 * Here we have to send:

	 *   1. Address of the input to sign.

	 *      The input is an array of 17 32-bit words, the first (most

	 *      significat) is 0, the rest 16 words are copied from the SHA-512

	 *      hash given by the user and converted from BE to LE.

	 *   2. Address of the buffer where ECDSA signature value R shall be

	 *      stored by the rWTM firmware.

	 *   3. Address of the buffer where ECDSA signature value S shall be

	 *      stored by the rWTM firmware.

	/*

	 * Here we read the R and S values of the ECDSA signature

	 * computed by the rWTM firmware and convert their words from

	 * LE to BE.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Generic System Framebuffers

 * Copyright (c) 2012-2013 David Herrmann <dh.herrmann@gmail.com>

/*

 * Simple-Framebuffer support

 * Create a platform-device for any available boot framebuffer. The

 * simple-framebuffer platform device is already available on DT systems, so

 * this module parses the global "screen_info" object and creates a suitable

 * platform device compatible with the "simple-framebuffer" DT object. If

 * the framebuffer is incompatible, we instead create a legacy

 * "vesa-framebuffer", "efi-framebuffer" or "platform-framebuffer" device and

 * pass the screen_info as platform_data. This allows legacy drivers

 * to pick these devices up without messing with simple-framebuffer drivers.

 * The global "screen_info" is still valid at all times.

 *

 * If CONFIG_SYSFB_SIMPLEFB is not selected, never register "simple-framebuffer"

 * platform devices, but only use legacy framebuffer devices for

 * backwards compatibility.

 *

 * TODO: We set the dev_id field of all platform-devices to 0. This allows

 * other OF/DT parsers to create such devices, too. However, they must

 * start at offset 1 for this to work.

 try to create a simple-framebuffer device */

 if the FB is incompatible, create a legacy framebuffer device */

 must execute after PCI subsystem for EFI quirks */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * SCPI Generic power domain support.

 *

 * Copyright (C) 2016 ARM Ltd.

/*

 * These device power state values are not well-defined in the specification.

 * In case, different implementations use different values, we can make these

 * specific to compatibles rather than getting these values from device tree.

		/*

		 * Treat all power domains as off at boot.

		 *

		 * The SCP firmware itself may have switched on some domains,

		 * but for reference counting purpose, keep it this way.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright 2007-2010 Red Hat, Inc.

 *  by Peter Jones <pjones@redhat.com>

 *  Copyright 2007 IBM, Inc.

 *  by Konrad Rzeszutek <konradr@linux.vnet.ibm.com>

 *  Copyright 2008

 *  by Konrad Rzeszutek <ketuzsezr@darnok.org>

 *

 * This code finds the iSCSI Boot Format Table.

/*

 * Physical location of iSCSI Boot Format Table.

 Broadcom iSCSI Offload */

 512kB */

 1MB */

 VGA buffer */

 128kB */

/*

 * Routine used to find and reserve the iSCSI Boot Format Table

	/* iBFT 1.03 section 1.4.3.1 mandates that UEFI machines will

	 * only use ACPI for this

		/* The table can't be inside the VGA BIOS reserved space,

				/* if the length of the table extends past 1M,

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Trusted Foundations support for ARM CPUs

 *

 * Copyright (c) 2013, NVIDIA Corporation.

 CONFIG_CACHE_L2X0 */

	/*

	 * we are not using version information for now since currently

	 * supported SMCs are compatible with all TF releases

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2017-2018, Intel Corporation

/**

 * SVC_NUM_DATA_IN_FIFO - number of struct stratix10_svc_data in the FIFO

 *

 * SVC_NUM_CHANNEL - number of channel supported by service layer driver

 *

 * FPGA_CONFIG_DATA_CLAIM_TIMEOUT_MS - claim back the submitted buffer(s)

 * from the secure world for FPGA manager to reuse, or to free the buffer(s)

 * when all bit-stream data had be send.

 *

 * FPGA_CONFIG_STATUS_TIMEOUT_SEC - poll the FPGA configuration status,

 * service layer will return error to FPGA manager when timeout occurs,

 * timeout is set to 30 seconds (30 * 1000) at Intel Stratix10 SoC.

 stratix10 service layer clients */

/**

 * struct stratix10_svc - svc private data

 * @stratix10_svc_rsu: pointer to stratix10 RSU device

/**

 * struct stratix10_svc_sh_memory - service shared memory structure

 * @sync_complete: state for a completion

 * @addr: physical address of shared memory block

 * @size: size of shared memory block

 * @invoke_fn: function to issue secure monitor or hypervisor call

 *

 * This struct is used to save physical address and size of shared memory

 * block. The shared memory blocked is allocated by secure monitor software

 * at secure world.

 *

 * Service layer driver uses the physical address and size to create a memory

 * pool, then allocates data buffer from that memory pool for service client.

/**

 * struct stratix10_svc_data_mem - service memory structure

 * @vaddr: virtual address

 * @paddr: physical address

 * @size: size of memory

 * @node: link list head node

 *

 * This struct is used in a list that keeps track of buffers which have

 * been allocated or freed from the memory pool. Service layer driver also

 * uses this struct to transfer physical address to virtual address.

/**

 * struct stratix10_svc_data - service data structure

 * @chan: service channel

 * @paddr: playload physical address

 * @size: playload size

 * @command: service command requested by client

 * @flag: configuration type (full or partial)

 * @arg: args to be passed via registers and not physically mapped buffers

 *

 * This struct is used in service FIFO for inter-process communication.

/**

 * struct stratix10_svc_controller - service controller

 * @dev: device

 * @chans: array of service channels

 * @num_chans: number of channels in 'chans' array

 * @num_active_client: number of active service client

 * @node: list management

 * @genpool: memory pool pointing to the memory region

 * @task: pointer to the thread task which handles SMC or HVC call

 * @svc_fifo: a queue for storing service message data

 * @complete_status: state for completion

 * @svc_fifo_lock: protect access to service message data queue

 * @invoke_fn: function to issue secure monitor call or hypervisor call

 *

 * This struct is used to create communication channels for service clients, to

 * handle secure monitor or hypervisor call.

/**

 * struct stratix10_svc_chan - service communication channel

 * @ctrl: pointer to service controller which is the provider of this channel

 * @scl: pointer to service client which owns the channel

 * @name: service client name associated with the channel

 * @lock: protect access to the channel

 *

 * This struct is used by service client to communicate with service layer, each

 * service client has its own channel created by service controller.

/**

 * svc_pa_to_va() - translate physical address to virtual address

 * @addr: to be translated physical address

 *

 * Return: valid virtual address or NULL if the provided physical

 * address doesn't exist.

 physical address is not found */

/**

 * svc_thread_cmd_data_claim() - claim back buffer from the secure world

 * @ctrl: pointer to service layer controller

 * @p_data: pointer to service data structure

 * @cb_data: pointer to callback data structure to service client

 *

 * Claim back the submitted buffers from the secure world and pass buffer

 * back to service client (FPGA manager, etc) for reuse.

/**

 * svc_thread_cmd_config_status() - check configuration status

 * @ctrl: pointer to service layer controller

 * @p_data: pointer to service data structure

 * @cb_data: pointer to callback data structure to service client

 *

 * Check whether the secure firmware at secure world has finished the FPGA

 * configuration, and then inform FPGA manager the configuration status.

		/*

		 * configuration is still in progress, wait one second then

		 * poll again

/**

 * svc_thread_recv_status_ok() - handle the successful status

 * @p_data: pointer to service data structure

 * @cb_data: pointer to callback data structure to service client

 * @res: result from SMC or HVC call

 *

 * Send back the correspond status to the service clients.

/**

 * svc_normal_to_secure_thread() - the function to run in the kthread

 * @data: data pointer for kthread function

 *

 * Service layer driver creates stratix10_svc_smc_hvc_call kthread on CPU

 * node 0, its function stratix10_svc_secure_call_thread is used to handle

 * SMC or HVC calls between kernel driver and secure monitor software.

 *

 * Return: 0 for success or -ENOMEM on error.

 default set, to remove build warning */

			/*

			 * be compatible with older version firmware which

			 * doesn't support RSU notify or retry

/**

 * svc_normal_to_secure_shm_thread() - the function to run in the kthread

 * @data: data pointer for kthread function

 *

 * Service layer driver creates stratix10_svc_smc_hvc_shm kthread on CPU

 * node 0, its function stratix10_svc_secure_shm_thread is used to query the

 * physical address of memory block reserved by secure monitor software at

 * secure world.

 *

 * svc_normal_to_secure_shm_thread() terminates directly since it is a

 * standlone thread for which no one will call kthread_stop() or return when

 * 'kthread_should_stop()' is true.

 SMC or HVC call to get shared memory info from secure world */

/**

 * svc_get_sh_memory() - get memory block reserved by secure monitor SW

 * @pdev: pointer to service layer device

 * @sh_memory: pointer to service shared memory structure

 *

 * Return: zero for successfully getting the physical address of memory block

 * reserved by secure monitor software, or negative value on error.

 smc or hvc call happens on cpu 0 bound kthread */

/**

 * svc_create_memory_pool() - create a memory pool from reserved memory block

 * @pdev: pointer to service layer device

 * @sh_memory: pointer to service shared memory structure

 *

 * Return: pool allocated from reserved memory block or ERR_PTR() on error.

/**

 * svc_smccc_smc() - secure monitor call between normal and secure world

 * @a0: argument passed in registers 0

 * @a1: argument passed in registers 1

 * @a2: argument passed in registers 2

 * @a3: argument passed in registers 3

 * @a4: argument passed in registers 4

 * @a5: argument passed in registers 5

 * @a6: argument passed in registers 6

 * @a7: argument passed in registers 7

 * @res: result values from register 0 to 3

/**

 * svc_smccc_hvc() - hypervisor call between normal and secure world

 * @a0: argument passed in registers 0

 * @a1: argument passed in registers 1

 * @a2: argument passed in registers 2

 * @a3: argument passed in registers 3

 * @a4: argument passed in registers 4

 * @a5: argument passed in registers 5

 * @a6: argument passed in registers 6

 * @a7: argument passed in registers 7

 * @res: result values from register 0 to 3

/**

 * get_invoke_func() - invoke SMC or HVC call

 * @dev: pointer to device

 *

 * Return: function pointer to svc_smccc_smc or svc_smccc_hvc.

/**

 * stratix10_svc_request_channel_byname() - request a service channel

 * @client: pointer to service client

 * @name: service client name

 *

 * This function is used by service client to request a service channel.

 *

 * Return: a pointer to channel assigned to the client on success,

 * or ERR_PTR() on error.

 if probe was called after client's, or error on probe */

 if there was no channel match */

/**

 * stratix10_svc_free_channel() - free service channel

 * @chan: service channel to be freed

 *

 * This function is used by service client to free a service channel.

/**

 * stratix10_svc_send() - send a message data to the remote

 * @chan: service channel assigned to the client

 * @msg: message data to be sent, in the format of

 * "struct stratix10_svc_client_msg"

 *

 * This function is used by service client to add a message to the service

 * layer driver's queue for being sent to the secure world.

 *

 * Return: 0 for success, -ENOMEM or -ENOBUFS on error.

 first client will create kernel thread */

/**

 * stratix10_svc_done() - complete service request transactions

 * @chan: service channel assigned to the client

 *

 * This function should be called when client has finished its request

 * or there is an error in the request process. It allows the service layer

 * to stop the running thread to have maximize savings in kernel resources.

 stop thread when thread is running AND only one active client */

/**

 * stratix10_svc_allocate_memory() - allocate memory

 * @chan: service channel assigned to the client

 * @size: memory size requested by a specific service client

 *

 * Service layer allocates the requested number of bytes buffer from the

 * memory pool, service client uses this function to get allocated buffers.

 *

 * Return: address of allocated memory on success, or ERR_PTR() on error.

/**

 * stratix10_svc_free_memory() - free allocated memory

 * @chan: service channel assigned to the client

 * @kaddr: memory to be freed

 *

 * This function is used by service client to free allocated buffers.

 get SMC or HVC function */

 allocate service controller and supporting channel */

 add svc client device(s) */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * dmi-sysfs.c

 *

 * This module exports the DMI tables read-only to userspace through the

 * sysfs file system.

 *

 * Data is currently found below

 *    /sys/firmware/dmi/...

 *

 * DMI attributes are presented in attribute files with names

 * formatted using %d-%d, so that the first integer indicates the

 * structure type (0-255), and the second field is the instance of that

 * entry.

 *

 * Copyright 2011 Google, Inc.

#define MAX_ENTRY_TYPE 255 /* Most of these aren't used, but we consider

/*

 * Global list of dmi_sysfs_entry.  Even though this should only be

 * manipulated at setup and teardown, the lazy nature of the kobject

 * system means we get lazy removes.

 dmi_sysfs_attribute - Top level attribute. used by all entries. */

/*

 * dmi_sysfs_mapped_attribute - Attribute where we require the entry be

 * mapped in.  Use in conjunction with dmi_sysfs_specialize_attr_ops.

/*************************************************

 * Generic DMI entry support.

 DMI stuff is only ever admin visible */

 Is this the entry we want? */

 try the next instance? */

	/*

	 * Don't ever revisit the instance.  Short circuit later

	 * instances by letting the instance_countdown run negative

 Found the entry */

 State for passing the read parameters through dmi_find_entry() */

 To signal the entry disappeared */

 This shouldn't happen, but just in case. */

/*

 * Calculate and return the byte length of the dmi entry identified by

 * dh.  This includes both the formatted portion as well as the

 * unformatted string space, including the two trailing nul characters.

/*************************************************

 * Support bits for specialized DMI entry support

	/* Find the entry according to our parent and call the

/*************************************************

 * Specialized DMI entry support.

** Type 15 - System Event Table ***/

/*************************************************

 * Generic DMI entry support.

 Global count of all instances seen.  Only for setup */

 Global positional count of all entries seen.  Only for setup */

 If a previous entry saw an error, short circuit */

 Allocate and register a new entry into the entries set */

 Set the key */

 Thread on the global list for cleanup */

 Handle specializations by type */

 No specialization */

 Create the raw binary file to access the entry */

 No locks, we are on our way out */

 clean up everything. */

/*

 * drivers/firmware/qemu_fw_cfg.c

 *

 * Copyright 2015 Carnegie Mellon University

 *

 * Expose entries from QEMU's firmware configuration (fw_cfg) device in

 * sysfs (read-only, under "/sys/firmware/qemu_fw_cfg/...").

 *

 * The fw_cfg device may be instantiated via either an ACPI node (on x86

 * and select subsets of aarch64), a Device Tree node (on arm), or using

 * a kernel module (or command line) parameter with the following syntax:

 *

 *      [qemu_fw_cfg.]ioport=<size>@<base>[:<ctrl_off>:<data_off>[:<dma_off>]]

 * or

 *      [qemu_fw_cfg.]mmio=<size>@<base>[:<ctrl_off>:<data_off>[:<dma_off>]]

 *

 * where:

 *      <size>     := size of ioport or mmio range

 *      <base>     := physical base address of ioport or mmio range

 *      <ctrl_off> := (optional) offset of control register

 *      <data_off> := (optional) offset of data register

 *      <dma_off> := (optional) offset of dma register

 *

 * e.g.:

 *      qemu_fw_cfg.ioport=12@0x510:0:1:4	(the default on x86)

 * or

 *      qemu_fw_cfg.mmio=16@0x9020000:8:0:16	(the default on arm)

 fw_cfg revision attribute, in /sys/firmware/qemu_fw_cfg top-level dir. */

 fw_cfg device i/o register addresses */

 atomic access to fw_cfg device (potentially slow i/o, so using mutex) */

 pick appropriate endianness for selector key */

 qemu fw_cfg device is sync today, but spec says it may become async */

 do not reorder the read to d->control */

 fw_cfg device does not need IOMMU protection, so use physical addresses */

 force memory to sync before notifying device via MMIO */

 read chunk of given fw_cfg blob (caller responsible for sanity-check) */

	/* If we have ACPI, ensure mutual exclusion against any potential

	 * device access by the firmware, e.g. via AML methods:

 Should never get here */

 write chunk of given fw_cfg blob (caller responsible for sanity-check) */

	/* If we have ACPI, ensure mutual exclusion against any potential

	 * device access by the firmware, e.g. via AML methods:

 Should never get here */

 CONFIG_CRASH_CORE */

 clean up fw_cfg device i/o */

 arch-specific ctrl & data register offsets are not available in ACPI, DT */

 parisc */

 ppc/mac,sun4m */

 x86, sun4u */

 initialize fw_cfg device i/o from platform data */

 acquire i/o range details */

 were custom register offsets provided (e.g. on the command line)? */

 use architecture-specific offsets */

 verify fw_cfg device signature */

 fw_cfg_sysfs_entry type */

	/* spare ourself reading host format support for now since we

	 * don't know what else to format - host may ignore ours

 CONFIG_CRASH_CORE */

 get fw_cfg_sysfs_entry from kobject member */

 fw_cfg_sysfs_attribute type */

 get fw_cfg_sysfs_attribute from attribute member */

 global cache of fw_cfg_sysfs_entry objects */

 kobjects removed lazily by kernel, mutual exclusion needed */

		/* will end up invoking fw_cfg_sysfs_cache_delist()

		 * via each object's release() method (i.e. destructor)

 default_attrs: per-entry attributes and show methods */

 sysfs_ops: find fw_cfg_[entry, attribute] and call appropriate show method */

 release: destructor, to be called via kobject_put() */

 kobj_type: ties together all properties required to register an entry */

 raw-read method and attribute */

/*

 * Create a kset subdirectory matching each '/' delimited dirname token

 * in 'name', starting with sysfs kset/folder 'dir'; At the end, create

 * a symlink directed at the given 'target'.

 * NOTE: We do this on a best-effort basis, since 'name' is not guaranteed

 * to be a well-behaved path name. Whenever a symlink vs. kset directory

 * name collision occurs, the kernel will issue big scary warnings while

 * refusing to add the offending link or directory. We follow up with our

 * own, slightly less scary error messages explaining the situation :)

 clone a copy of name for parsing */

 create folders for each dirname token, then symlink for basename */

 last (basename) token? If so, add symlink here */

 does the current dir contain an item named after tok ? */

 drop reference added by kset_find_obj */

 ko MUST be a kset - we're about to use it as one ! */

 descend into already existing subdirectory */

 create new subdirectory kset */

 descend into newly created subdirectory */

 we're done with cloned copy of name */

 recursively unregister fw_cfg/by_name/ kset directory tree */

 all set members are ksets too, but check just in case... */

 symlinks are cleanly and automatically removed with the directory */

 kobjects & kset representing top-level, by_key, and by_name folders */

 register an individual fw_cfg file */

 allocate new entry */

 set file entry information */

 register entry under "/sys/firmware/qemu_fw_cfg/by_key/" */

 add raw binary content access */

 try adding "/sys/firmware/qemu_fw_cfg/by_name/" symlink */

 success, add entry to global cache */

 iterate over all fw_cfg directory entries, registering each one */

 unregister top-level or by_key folder */

	/* NOTE: If we supported multiple fw_cfg devices, we'd first create

	 * a subdirectory named after e.g. pdev->id, then hang per-device

	 * by_key (and by_name) subdirectories underneath it. However, only

	 * one fw_cfg device exist system-wide, so if one was already found

	 * earlier, we might as well stop here.

 create by_key and by_name subdirs of /sys/firmware/qemu_fw_cfg/ */

 initialize fw_cfg device i/o from platform data */

 get revision number, add matching top-level attribute */

 process fw_cfg file directory entry, registering each file */

 success */

/* this probably belongs in e.g. include/linux/types.h,

 * but right now we are the only ones doing it...

 use special scanf/printf modifier for phys_addr_t, resource_size_t */

	/* only one fw_cfg device can exist system-wide, so if one

	 * was processed on the command line already, we might as

	 * well stop here.

 avoid leaking previously registered device */

 consume "<size>" portion of command line argument */

 get "@<base>[:<ctrl_off>:<data_off>[:<dma_off>]]" chunks */

	/* sscanf() must process precisely 1, 3 or 4 chunks:

	 * <base> is mandatory, optionally followed by <ctrl_off>

	 * and <data_off>, and <dma_off>;

	 * there must be no extra characters after the last chunk,

	 * so str[consumed] must be '\0'.

 insert register offsets, if provided */

	/* "processed" happens to nicely match the number of resources

	 * we need to pass in to this platform device.

	/* stay silent if device was not configured via the command

	 * line, or if the parameter name (ioport/mmio) doesn't match

	 * the device setting

 Should never get here */

 CONFIG_FW_CFG_SYSFS_CMDLINE */

 create /sys/firmware/qemu_fw_cfg/ top level directory */

 clean up /sys/firmware/qemu_fw_cfg/ */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/firmware/memmap.c

 *  Copyright (C) 2008 SUSE LINUX Products GmbH

 *  by Bernhard Walle <bernhard.walle@gmx.de>

/*

 * Data types ------------------------------------------------------------------

/*

 * Firmware map entry. Because firmware memory maps are flat and not

 * hierarchical, it's ok to organise them in a linked list. No parent

 * information is necessary as for the resource tree.

	/*

	 * start and end must be u64 rather than resource_size_t, because e820

	 * resources can lie at addresses above 4G.

 start of the memory range */

 end of the memory range (incl.) */

 type of the memory range */

 entry for the linked list */

 kobject for each entry */

/*

 * Forward declarations --------------------------------------------------------

/*

 * Static data -----------------------------------------------------------------

/*

 * These are default attributes that are added for every memmap entry.

 Firmware memory map entries. */

/*

 * For memory hotplug, there is no way to free memory map entries allocated

 * by boot mem after the system is up. So when we hot-remove memory whose

 * map entry is allocated by bootmem, we need to remember the storage and

 * reuse it when the memory is hot-added again.

		/*

		 * Remember the storage allocated by bootmem, and reuse it when

		 * the memory is hot-added again. The entry will be added to

		 * map_entries_bootmem here, and deleted from &map_entries in

		 * firmware_map_remove_entry().

/*

 * Registration functions ------------------------------------------------------

/**

 * firmware_map_add_entry() - Does the real work to add a firmware memmap entry.

 * @start: Start of the memory range.

 * @end:   End of the memory range (exclusive).

 * @type:  Type of the memory range.

 * @entry: Pre-allocated (either kmalloc() or bootmem allocator), uninitialised

 *         entry.

 *

 * Common implementation of firmware_map_add() and firmware_map_add_early()

 * which expects a pre-allocated struct firmware_map_entry.

 *

 * Return: 0 always

/**

 * firmware_map_remove_entry() - Does the real work to remove a firmware

 * memmap entry.

 * @entry: removed entry.

 *

 * The caller must hold map_entries_lock, and release it properly.

/*

 * Add memmap entry on sysfs

/*

 * Remove memmap entry on sysfs

/**

 * firmware_map_find_entry_in_list() - Search memmap entry in a given list.

 * @start: Start of the memory range.

 * @end:   End of the memory range (exclusive).

 * @type:  Type of the memory range.

 * @list:  In which to find the entry.

 *

 * This function is to find the memmap entey of a given memory range in a

 * given list. The caller must hold map_entries_lock, and must not release

 * the lock until the processing of the returned entry has completed.

 *

 * Return: Pointer to the entry to be found on success, or NULL on failure.

/**

 * firmware_map_find_entry() - Search memmap entry in map_entries.

 * @start: Start of the memory range.

 * @end:   End of the memory range (exclusive).

 * @type:  Type of the memory range.

 *

 * This function is to find the memmap entey of a given memory range.

 * The caller must hold map_entries_lock, and must not release the lock

 * until the processing of the returned entry has completed.

 *

 * Return: Pointer to the entry to be found on success, or NULL on failure.

/**

 * firmware_map_find_entry_bootmem() - Search memmap entry in map_entries_bootmem.

 * @start: Start of the memory range.

 * @end:   End of the memory range (exclusive).

 * @type:  Type of the memory range.

 *

 * This function is similar to firmware_map_find_entry except that it find the

 * given entry in map_entries_bootmem.

 *

 * Return: Pointer to the entry to be found on success, or NULL on failure.

/**

 * firmware_map_add_hotplug() - Adds a firmware mapping entry when we do

 * memory hotplug.

 * @start: Start of the memory range.

 * @end:   End of the memory range (exclusive)

 * @type:  Type of the memory range.

 *

 * Adds a firmware mapping entry. This function is for memory hotplug, it is

 * similar to function firmware_map_add_early(). The only difference is that

 * it will create the syfs entry dynamically.

 *

 * Return: 0 on success, or -ENOMEM if no memory could be allocated.

 Reuse storage allocated by bootmem. */

 create the memmap entry */

/**

 * firmware_map_add_early() - Adds a firmware mapping entry.

 * @start: Start of the memory range.

 * @end:   End of the memory range.

 * @type:  Type of the memory range.

 *

 * Adds a firmware mapping entry. This function uses the bootmem allocator

 * for memory allocation.

 *

 * That function must be called before late_initcall.

 *

 * Return: 0 on success, or -ENOMEM if no memory could be allocated.

/**

 * firmware_map_remove() - remove a firmware mapping entry

 * @start: Start of the memory range.

 * @end:   End of the memory range.

 * @type:  Type of the memory range.

 *

 * removes a firmware mapping entry.

 *

 * Return: 0 on success, or -EINVAL if no entry.

 remove the memmap entry */

/*

 * Sysfs functions -------------------------------------------------------------

/*

 * Initialises stuff and adds the entries in the map_entries list to

 * sysfs. Important is that firmware_map_add() and firmware_map_add_early()

 * must be called before late_initcall. That's just because that function

 * is called as late_initcall() function, which means that if you call

 * firmware_map_add() or firmware_map_add_early() afterwards, the entries

 * are not added to sysfs.

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (c) 2010,2015,2019 The Linux Foundation. All rights reserved.

 * Copyright (C) 2015 Linaro Ltd.

	/*

	 * Device isn't required as there is only one argument - no device

	 * needed to dma_map_single to secure world

	/*

	 * Some SC7180 firmwares didn't implement the

	 * QCOM_SCM_INFO_IS_CALL_AVAIL call, so we fallback to forcing ARM_64

	 * calling conventions on these firmwares. Luckily we don't make any

	 * early calls into the firmware on these SoCs so the device pointer

	 * will be valid here to check if the compatible matches.

/**

 * qcom_scm_call() - Invoke a syscall in the secure world

 * @dev:	device

 * @svc_id:	service identifier

 * @cmd_id:	command identifier

 * @desc:	Descriptor structure containing arguments and return values

 *

 * Sends a command to the SCM and waits for the command to finish processing.

 * This should *only* be called in pre-emptible context.

/**

 * qcom_scm_call_atomic() - atomic variation of qcom_scm_call()

 * @dev:	device

 * @svc_id:	service identifier

 * @cmd_id:	command identifier

 * @desc:	Descriptor structure containing arguments and return values

 * @res:	Structure containing results from SMC/HVC call

 *

 * Sends a command to the SCM and waits for the command to finish processing.

 * This can be called in atomic context.

/**

 * qcom_scm_set_warm_boot_addr() - Set the warm boot address for cpus

 * @entry: Entry point function for the cpus

 * @cpus: The cpumask of cpus that will use the entry point

 *

 * Set the Linux entry point for the SCM to transfer control to when coming

 * out of a power down. CPU power down may be executed on cpuidle or hotplug.

	/*

	 * Reassign only if we are switching from hotplug entry point

	 * to cpuidle entry point or vice versa.

 No change in entry function */

/**

 * qcom_scm_set_cold_boot_addr() - Set the cold boot address for cpus

 * @entry: Entry point function for the cpus

 * @cpus: The cpumask of cpus that will use the entry point

 *

 * Set the cold boot address of the cpus. Any cpu outside the supported

 * range would be removed from the cpu present mask.

/**

 * qcom_scm_cpu_power_down() - Power down the cpu

 * @flags - Flags to flush cache

 *

 * This is an end point to power down cpu. If there was a pending interrupt,

 * the control would return from this function, otherwise, the cpu jumps to the

 * warm boot entry point set for this cpu upon reset.

/**

 * qcom_scm_pas_init_image() - Initialize peripheral authentication service

 *			       state machine for a given peripheral, using the

 *			       metadata

 * @peripheral: peripheral id

 * @metadata:	pointer to memory containing ELF header, program header table

 *		and optional blob of data used for authenticating the metadata

 *		and the rest of the firmware

 * @size:	size of the metadata

 *

 * Returns 0 on success.

	/*

	 * During the scm call memory protection will be enabled for the meta

	 * data blob, so make sure it's physically contiguous, 4K aligned and

	 * non-cachable to avoid XPU violations.

/**

 * qcom_scm_pas_mem_setup() - Prepare the memory related to a given peripheral

 *			      for firmware loading

 * @peripheral:	peripheral id

 * @addr:	start address of memory area to prepare

 * @size:	size of the memory area to prepare

 *

 * Returns 0 on success.

/**

 * qcom_scm_pas_auth_and_reset() - Authenticate the given peripheral firmware

 *				   and reset the remote processor

 * @peripheral:	peripheral id

 *

 * Return 0 on success.

/**

 * qcom_scm_pas_shutdown() - Shut down the remote processor

 * @peripheral: peripheral id

 *

 * Returns 0 on success.

/**

 * qcom_scm_pas_supported() - Check if the peripheral authentication service is

 *			      available for the given peripherial

 * @peripheral:	peripheral id

 *

 * Returns true if PAS is supported for this peripheral, otherwise false.

/**

 * qcom_scm_restore_sec_cfg_available() - Check if secure environment

 * supports restore security config interface.

 *

 * Return true if restore-cfg interface is supported, false if not.

 the pg table has been initialized already, ignore the error */

/**

 * qcom_scm_assign_mem() - Make a secure call to reassign memory ownership

 * @mem_addr: mem region whose ownership need to be reassigned

 * @mem_sz:   size of the region.

 * @srcvm:    vmid for current set of owners, each set bit in

 *            flag indicate a unique owner

 * @newvm:    array having new owners and corresponding permission

 *            flags

 * @dest_cnt: number of owners in next set.

 *

 * Return negative errno on failure or 0 on success with @srcvm updated.

 Fill source vmid detail */

 Fill details of mem buff to map */

 Fill details of next vmid detail */

/**

 * qcom_scm_ocmem_lock_available() - is OCMEM lock/unlock interface available

/**

 * qcom_scm_ocmem_lock() - call OCMEM lock interface to assign an OCMEM

 * region to the specified initiator

 *

 * @id:     tz initiator id

 * @offset: OCMEM offset

 * @size:   OCMEM size

 * @mode:   access mode (WIDE/NARROW)

/**

 * qcom_scm_ocmem_unlock() - call OCMEM unlock interface to release an OCMEM

 * region from the specified initiator

 *

 * @id:     tz initiator id

 * @offset: OCMEM offset

 * @size:   OCMEM size

/**

 * qcom_scm_ice_available() - Is the ICE key programming interface available?

 *

 * Return: true iff the SCM calls wrapped by qcom_scm_ice_invalidate_key() and

 *	   qcom_scm_ice_set_key() are available.

/**

 * qcom_scm_ice_invalidate_key() - Invalidate an inline encryption key

 * @index: the keyslot to invalidate

 *

 * The UFSHCI and eMMC standards define a standard way to do this, but it

 * doesn't work on these SoCs; only this SCM call does.

 *

 * It is assumed that the SoC has only one ICE instance being used, as this SCM

 * call doesn't specify which ICE instance the keyslot belongs to.

 *

 * Return: 0 on success; -errno on failure.

/**

 * qcom_scm_ice_set_key() - Set an inline encryption key

 * @index: the keyslot into which to set the key

 * @key: the key to program

 * @key_size: the size of the key in bytes

 * @cipher: the encryption algorithm the key is for

 * @data_unit_size: the encryption data unit size, i.e. the size of each

 *		    individual plaintext and ciphertext.  Given in 512-byte

 *		    units, e.g. 1 = 512 bytes, 8 = 4096 bytes, etc.

 *

 * Program a key into a keyslot of Qualcomm ICE (Inline Crypto Engine), where it

 * can then be used to encrypt/decrypt UFS or eMMC I/O requests inline.

 *

 * The UFSHCI and eMMC standards define a standard way to do this, but it

 * doesn't work on these SoCs; only this SCM call does.

 *

 * It is assumed that the SoC has only one ICE instance being used, as this SCM

 * call doesn't specify which ICE instance the keyslot belongs to.

 *

 * Return: 0 on success; -errno on failure.

	/*

	 * 'key' may point to vmalloc()'ed memory, but we need to pass a

	 * physical address that's been properly flushed.  The sanctioned way to

	 * do this is by using the DMA API.  But as is best practice for crypto

	 * keys, we also must wipe the key after use.  This makes kmemdup() +

	 * dma_map_single() not clearly correct, since the DMA API can use

	 * bounce buffers.  Instead, just use dma_alloc_coherent().  Programming

	 * keys is normally rare and thus not performance-critical.

/**

 * qcom_scm_hdcp_available() - Check if secure environment supports HDCP.

 *

 * Return true if HDCP is supported, false if not.

/**

 * qcom_scm_hdcp_req() - Send HDCP request.

 * @req: HDCP request array

 * @req_cnt: HDCP request array count

 * @resp: response buffer passed to SCM

 *

 * Write HDCP register(s) through SCM.

/**

 * qcom_scm_is_available() - Checks if SCM is available

 vote for max clk rate for highest performance */

	/*

	 * If requested enable "download mode", from this point on warmboot

	 * will cause the the boot stages to enter download mode, unless

	 * disabled below by a clean shutdown/reboot.

 Clean shutdown, disable download mode to allow normal restart */

 FIXME: This should have .data = (void *) SCM_HAS_CORE_CLK */

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (c) 2015,2019 The Linux Foundation. All rights reserved.

/**

 * struct arm_smccc_args

 * @args:	The array of values used in registers in smc instruction

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (c) 2010,2015,2019 The Linux Foundation. All rights reserved.

 * Copyright (C) 2015 Linaro Ltd.

/**

 * struct arm_smccc_args

 * @args:	The array of values used in registers in smc instruction

/**

 * struct scm_legacy_command - one SCM command buffer

 * @len: total available memory for command and response

 * @buf_offset: start of command buffer

 * @resp_hdr_offset: start of response buffer

 * @id: command to be executed

 * @buf: buffer returned from scm_legacy_get_command_buffer()

 *

 * An SCM command is laid out in memory as follows:

 *

 *	------------------- <--- struct scm_legacy_command

 *	| command header  |

 *	------------------- <--- scm_legacy_get_command_buffer()

 *	| command buffer  |

 *	------------------- <--- struct scm_legacy_response and

 *	| response header |      scm_legacy_command_to_response()

 *	------------------- <--- scm_legacy_get_response_buffer()

 *	| response buffer |

 *	-------------------

 *

 * There can be arbitrary padding between the headers and buffers so

 * you should always use the appropriate scm_legacy_get_*_buffer() routines

 * to access the buffers in a safe manner.

/**

 * struct scm_legacy_response - one SCM response buffer

 * @len: total available memory for response

 * @buf_offset: start of response data relative to start of scm_legacy_response

 * @is_complete: indicates if the command has finished processing

/**

 * scm_legacy_command_to_response() - Get a pointer to a scm_legacy_response

 * @cmd: command

 *

 * Returns a pointer to a response for a command.

/**

 * scm_legacy_get_command_buffer() - Get a pointer to a command buffer

 * @cmd: command

 *

 * Returns a pointer to the command buffer of a command.

/**

 * scm_legacy_get_response_buffer() - Get a pointer to a response buffer

 * @rsp: response

 *

 * Returns a pointer to a response buffer of a response.

/**

 * scm_legacy_call() - Sends a command to the SCM and waits for the command to

 * finish processing.

 *

 * A note on cache maintenance:

 * Note that any buffers that are expected to be accessed by the secure world

 * must be flushed before invoking qcom_scm_call and invalidated in the cache

 * immediately after qcom_scm_call returns. Cache maintenance on the command

 * and response buffers is taken care of by qcom_scm_call; however, callers are

 * responsible for any other cached buffers passed over to the secure world.

/**

 * scm_legacy_call_atomic() - Send an atomic SCM command with up to 5 arguments

 * and 3 return values

 * @desc: SCM call descriptor containing arguments

 * @res:  SCM call return values

 *

 * This shall only be used with commands that are guaranteed to be

 * uninterruptable, atomic and SMP safe.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/firmware/edd.c

 *  Copyright (C) 2002, 2003, 2004 Dell Inc.

 *  by Matt Domsch <Matt_Domsch@dell.com>

 *  disk signature by Matt Domsch, Andrew Wilks, and Sandeep K. Shandilya

 *  legacy CHS by Patrick J. LoPresti <patl@users.sourceforge.net>

 *

 * BIOS Enhanced Disk Drive Services (EDD)

 * conformant to T13 Committee www.t13.org

 *   projects 1572D, 1484D, 1386D, 1226DT

 *

 * This code takes information provided by BIOS EDD calls

 * fn41 - Check Extensions Present and

 * fn48 - Get Device Parameters with EDD extensions

 * made in setup.S, copied to safe structures in setup.c,

 * and presents it in sysfs.

 *

 * Please see http://linux.dell.com/edd/results.html for

 * the list of BIOSs which have been reported to implement EDD.

 forward declarations */

/**

 * edd_show_raw_data() - copies raw data to buffer for userspace to parse

 * @edev: target edd_device

 * @buf: output buffer

 *

 * Returns: number of bytes written, or -EINVAL on failure

 In case of buggy BIOSs */

/*

 * Some device instances may not have all the above attributes,

 * or the attribute values may be meaningless (i.e. if

 * the device is < EDD 3.0, it won't have host_bus and interface

 * information), so don't bother making files for them.  Likewise

 * if the default_{cylinders,heads,sectors_per_track} values

 * are zero, the BIOS doesn't provide sane values, don't bother

 * creating files for them either.

 We support only T13 spec */

/* These are default attributes that are added for every edd

 * device discovered.  There are none.

 These attributes are conditional and only added for some devices. */

/**

 *	edd_release - free edd structure

 *	@kobj:	kobject of edd structure

 *

 *	This is called when the refcount of the edd structure

 *	reaches 0. This should happen right after we unregister,

 *	but just in case, we use the release callback anyway.

/**

 * edd_dev_is_type() - is this EDD device a 'type' device?

 * @edev: target edd_device

 * @type: a host bus or interface identifier string per the EDD spec

 *

 * Returns 1 (TRUE) if it is a 'type' device, 0 otherwise.

/**

 * edd_get_pci_dev() - finds pci_dev that matches edev

 * @edev: edd_device

 *

 * Returns pci_dev if found, or NULL

/**

 * edd_init() - creates sysfs tree of EDD data

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright 2007-2010 Red Hat, Inc.

 *  by Peter Jones <pjones@redhat.com>

 *  Copyright 2008 IBM, Inc.

 *  by Konrad Rzeszutek <konradr@linux.vnet.ibm.com>

 *  Copyright 2008

 *  by Konrad Rzeszutek <ketuzsezr@darnok.org>

 *

 * This code exposes the iSCSI Boot Format Table to userland via sysfs.

 *

 * Changelog:

 *

 *  06 Jan 2010 - Peter Jones <pjones@redhat.com>

 *    New changelog entries are in the git log from now on.  Not here.

 *

 *  14 Mar 2008 - Konrad Rzeszutek <ketuzsezr@darnok.org>

 *    Updated comments and copyrights. (v0.4.9)

 *

 *  11 Feb 2008 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>

 *    Converted to using ibft_addr. (v0.4.8)

 *

 *   8 Feb 2008 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>

 *    Combined two functions in one: reserve_ibft_region. (v0.4.7)

 *

 *  30 Jan 2008 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>

 *   Added logic to handle IPv6 addresses. (v0.4.6)

 *

 *  25 Jan 2008 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>

 *   Added logic to handle badly not-to-spec iBFT. (v0.4.5)

 *

 *   4 Jan 2008 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>

 *   Added __init to function declarations. (v0.4.4)

 *

 *  21 Dec 2007 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>

 *   Updated kobject registration, combined unregister functions in one

 *   and code and style cleanup. (v0.4.3)

 *

 *   5 Dec 2007 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>

 *   Added end-markers to enums and re-organized kobject registration. (v0.4.2)

 *

 *   4 Dec 2007 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>

 *   Created 'device' sysfs link to the NIC and style cleanup. (v0.4.1)

 *

 *  28 Nov 2007 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>

 *   Added sysfs-ibft documentation, moved 'find_ibft' function to

 *   in its own file and added text attributes for every struct field.  (v0.4)

 *

 *  21 Nov 2007 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>

 *   Added text attributes emulating OpenFirmware /proc/device-tree naming.

 *   Removed binary /sysfs interface (v0.3)

 *

 *  29 Aug 2007 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>

 *   Added functionality in setup.c to reserve iBFT region. (v0.2)

 *

 *  27 Aug 2007 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>

 *   First version exposing iBFT data via a binary /sysfs. (v0.1)

/*

 * The kobject different types and its names.

 *

 We don't support. */

 Should show up only once and is not exported. */

 We don't support. */

/*

 * The kobject and attribute structures.

 fully null address */

 IPv4-mapped IPv6 ::ffff:0.0.0.0 */

/*

 * Helper functions to parse data properly.

		/*

		 * IPV4

		/*

		 * IPv6

/*

 * Helper function to verify the IBFT header.

/*

 *  Routines for parsing the iBFT data to be human readable.

 Sanity checking of iBFT. */

/*

 * Helper routiners to check to determine if the entry is valid

 * in the proper iBFT structure.

/*

 * Helper function for ibft_register_kobjects.

 Fields which we don't support. Ignore them */

 Skip adding this kobject, but exit with non-fatal error. */

		/*

		* We don't search for the device in other domains than

		* zero. This is because on x86 platforms the BIOS

		* executes only devices which are in domain 0. Furthermore, the

		* iBFT spec doesn't have a domain id field :-(

/*

 * Scan the IBFT table structure for the NIC and Target fields. When

 * found add them on the passed-in list. We do not support the other

 * fields at this point, so they are skipped.

 iBFT table safety checking */

for ibft_unregister*/

	/*

	 * One spec says "IBFT", the other says "iBFT". We have to check

	 * for both.

 Broadcom iSCSI Offload */

/*

 * ibft_init() - creates sysfs tree entries for the iBFT data.

	/*

	   As on UEFI systems the setup_arch()/reserve_ibft_region()

	   is called before ACPI tables are parsed and it only does

	   legacy finding.

 Scan the IBFT for data and register the kobjects. */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2017 Arm Ltd.

/*

 * The call to use to reach the firmware.

 entry point from firmware to arch asm code */

 These three are protected by the sdei_list_lock */

 This pointer is handed to firmware as the event argument. */

 Shared events */

 CPU private events */

 Take the mutex for any API call or modification. Take the mutex first. */

 and then hold this when modifying the list */

 Private events are registered/enabled via IPI passing one of these */

		/*

		 * !sdei_firmware_call means we failed to probe or called

		 * sdei_mark_interface_broken(). -EIO is not an error returned

		 * by sdei_to_linux_errno() and is used to suppress messages

		 * from this driver.

 Called directly by the hotplug callbacks */

 Called directly by the hotplug callbacks */

/*

 * unregister events, but don't destroy them as they are re-registered by

 * sdei_reregister_shared().

 Called directly by the hotplug callbacks */

 un-register private events */

 re-register/enable private events */

 When entering idle, mask/unmask events for this cpu */

/*

 * We need all events to be reregistered when we resume from hibernate.

 *

 * The sequence is freeze->thaw. Reboot. freeze->restore. We unregister

 * events during freeze, then re-register and re-enable them during thaw

 * and restore.

 unregister private events */

 re-register shared events */

/*

 * Mask all CPUs and unregister all events on panic, reboot or kexec.

	/*

	 * We are going to reset the interface, after this there is no point

	 * doing work when we take CPUs offline.

		/*

		 * Event 0 is reserved by the specification for

		 * SDEI_EVENT_SIGNAL.

	/*

	 * The event may be running on another CPU. Disable it

	 * to stop new events, then try to unregister a few times.

 Not supported due to hardware or boot configuration */

/*

 * On an ACPI system SDEI needs to be ready before HEST:GHES tries to register

 * its events. ACPI is initialised from a subsys_initcall(), GHES is initialised

 * by device_initcall(). We want to be called in the middle.

 SPDX-License-Identifier: GPL-2.0

/*

 * Texas Instruments System Control Interface Protocol Driver

 *

 * Copyright (C) 2015-2016 Texas Instruments Incorporated - https://www.ti.com/

 *	Nishanth Menon

 List of all TI SCI devices active in system */

 Protection for the entire list */

/**

 * struct ti_sci_xfer - Structure representing a message flow

 * @tx_message:	Transmit message

 * @rx_len:	Receive message length

 * @xfer_buf:	Preallocated buffer to store receive message

 *		Since we work with request-ACK protocol, we can

 *		reuse the same buffer for the rx path as we

 *		use for the tx path.

 * @done:	completion event

/**

 * struct ti_sci_xfers_info - Structure to manage transfer information

 * @sem_xfer_count:	Counting Semaphore for managing max simultaneous

 *			Messages.

 * @xfer_block:		Preallocated Message array

 * @xfer_alloc_table:	Bitmap table for allocated messages.

 *			Index of this bitmap table is also used for message

 *			sequence identifier.

 * @xfer_lock:		Protection for message allocation

 protect transfer allocation */

/**

 * struct ti_sci_desc - Description of SoC integration

 * @default_host_id:	Host identifier representing the compute entity

 * @max_rx_timeout_ms:	Timeout for communication with SoC (in Milliseconds)

 * @max_msgs: Maximum number of messages that can be pending

 *		  simultaneously in the system

 * @max_msg_size: Maximum size of data per message that can be handled.

/**

 * struct ti_sci_info - Structure representing a TI SCI instance

 * @dev:	Device pointer

 * @desc:	SoC description for this instance

 * @nb:	Reboot Notifier block

 * @d:		Debugfs file entry

 * @debug_region: Memory region where the debug message are available

 * @debug_region_size: Debug region size

 * @debug_buffer: Buffer allocated to copy debug messages.

 * @handle:	Instance of TI SCI handle to send to clients.

 * @cl:		Mailbox Client

 * @chan_tx:	Transmit mailbox channel

 * @chan_rx:	Receive mailbox channel

 * @minfo:	Message info

 * @node:	list head

 * @host_id:	Host ID

 * @users:	Number of users of this instance

 protected by ti_sci_list_mutex */

/**

 * ti_sci_debug_show() - Helper to dump the debug log

 * @s:	sequence file pointer

 * @unused:	unused.

 *

 * Return: 0

	/*

	 * We don't trust firmware to leave NULL terminated last byte (hence

	 * we have allocated 1 extra 0 byte). Since we cannot guarantee any

	 * specific data format for debug messages, We just present the data

	 * in the buffer as is - we expect the messages to be self explanatory.

 Provide the log file operations interface*/

/**

 * ti_sci_debugfs_create() - Create log debug file

 * @pdev:	platform device pointer

 * @info:	Pointer to SCI entity information

 *

 * Return: 0 if all went fine, else corresponding error.

 Debug region is optional */

 Setup NULL termination */

/**

 * ti_sci_debugfs_destroy() - clean up log debug file

 * @pdev:	platform device pointer

 * @info:	Pointer to SCI entity information

 CONFIG_DEBUG_FS */

 CONFIG_DEBUG_FS */

/**

 * ti_sci_dump_header_dbg() - Helper to dump a message header.

 * @dev:	Device pointer corresponding to the SCI entity

 * @hdr:	pointer to header.

/**

 * ti_sci_rx_callback() - mailbox client callback for receive messages

 * @cl:	client pointer

 * @m:	mailbox message

 *

 * Processes one received message to appropriate transfer information and

 * signals completion of the transfer.

 *

 * NOTE: This function will be invoked in IRQ context, hence should be

 * as optimal as possible.

	/*

	 * Are we even expecting this?

	 * NOTE: barriers were implicit in locks used for modifying the bitmap

 Is the message of valid length? */

 Take a copy to the rx buffer.. */

/**

 * ti_sci_get_one_xfer() - Allocate one message

 * @info:	Pointer to SCI entity information

 * @msg_type:	Message type

 * @msg_flags:	Flag to set for the message

 * @tx_message_size: transmit message size

 * @rx_message_size: receive message size

 *

 * Helper function which is used by various command functions that are

 * exposed to clients of this driver for allocating a message traffic event.

 *

 * This function can sleep depending on pending requests already in the system

 * for the SCI entity. Further, this also holds a spinlock to maintain integrity

 * of internal data structures.

 *

 * Return: 0 if all went fine, else corresponding error.

 Ensure we have sane transfer sizes */

	/*

	 * Ensure we have only controlled number of pending messages.

	 * Ideally, we might just have to wait a single message, be

	 * conservative and wait 5 times that..

 Keep the locked section as small as possible */

	/*

	 * We already ensured in probe that we can have max messages that can

	 * fit in  hdr.seq - NOTE: this improves access latencies

	 * to predictable O(1) access, BUT, it opens us to risk if

	 * remote misbehaves with corrupted message sequence responses.

	 * If that happens, we are going to be messed up anyways..

/**

 * ti_sci_put_one_xfer() - Release a message

 * @minfo:	transfer info pointer

 * @xfer:	message that was reserved by ti_sci_get_one_xfer

 *

 * This holds a spinlock to maintain integrity of internal data structures.

	/*

	 * Keep the locked section as small as possible

	 * NOTE: we might escape with smp_mb and no lock here..

	 * but just be conservative and symmetric.

 Increment the count for the next user to get through */

/**

 * ti_sci_do_xfer() - Do one transfer

 * @info:	Pointer to SCI entity information

 * @xfer:	Transfer to initiate and wait for response

 *

 * Return: -ETIMEDOUT in case of no response, if transmit error,

 *	   return corresponding error, else if all goes well,

 *	   return 0.

 And we wait for the response. */

	/*

	 * NOTE: we might prefer not to need the mailbox ticker to manage the

	 * transfer queueing since the protocol layer queues things by itself.

	 * Unfortunately, we have to kick the mailbox framework after we have

	 * received our message.

/**

 * ti_sci_cmd_get_revision() - command to get the revision of the SCI entity

 * @info:	Pointer to SCI entity information

 *

 * Updates the SCI information in the internal data structure.

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_is_response_ack() - Generic ACK/NACK message checkup

 * @r:	pointer to response buffer

 *

 * Return: true if the response was an ACK, else returns false.

/**

 * ti_sci_set_device_state() - Set device state helper

 * @handle:	pointer to TI SCI handle

 * @id:		Device identifier

 * @flags:	flags to setup for the device

 * @state:	State to move the device to

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_get_device_state() - Get device state helper

 * @handle:	Handle to the device

 * @id:		Device Identifier

 * @clcnt:	Pointer to Context Loss Count

 * @resets:	pointer to resets

 * @p_state:	pointer to p_state

 * @c_state:	pointer to c_state

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_get_device() - command to request for device managed by TISCI

 *			     that can be shared with other hosts.

 * @handle:	Pointer to TISCI handle as retrieved by *ti_sci_get_handle

 * @id:		Device Identifier

 *

 * Request for the device - NOTE: the client MUST maintain integrity of

 * usage count by balancing get_device with put_device. No refcounting is

 * managed by driver for that purpose.

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_get_device_exclusive() - command to request for device managed by

 *				       TISCI that is exclusively owned by the

 *				       requesting host.

 * @handle:	Pointer to TISCI handle as retrieved by *ti_sci_get_handle

 * @id:		Device Identifier

 *

 * Request for the device - NOTE: the client MUST maintain integrity of

 * usage count by balancing get_device with put_device. No refcounting is

 * managed by driver for that purpose.

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_idle_device() - Command to idle a device managed by TISCI

 * @handle:	Pointer to TISCI handle as retrieved by *ti_sci_get_handle

 * @id:		Device Identifier

 *

 * Request for the device - NOTE: the client MUST maintain integrity of

 * usage count by balancing get_device with put_device. No refcounting is

 * managed by driver for that purpose.

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_idle_device_exclusive() - Command to idle a device managed by

 *					TISCI that is exclusively owned by

 *					requesting host.

 * @handle:	Pointer to TISCI handle as retrieved by *ti_sci_get_handle

 * @id:		Device Identifier

 *

 * Request for the device - NOTE: the client MUST maintain integrity of

 * usage count by balancing get_device with put_device. No refcounting is

 * managed by driver for that purpose.

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_put_device() - command to release a device managed by TISCI

 * @handle:	Pointer to TISCI handle as retrieved by *ti_sci_get_handle

 * @id:		Device Identifier

 *

 * Request for the device - NOTE: the client MUST maintain integrity of

 * usage count by balancing get_device with put_device. No refcounting is

 * managed by driver for that purpose.

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_dev_is_valid() - Is the device valid

 * @handle:	Pointer to TISCI handle as retrieved by *ti_sci_get_handle

 * @id:		Device Identifier

 *

 * Return: 0 if all went fine and the device ID is valid, else return

 * appropriate error.

 check the device state which will also tell us if the ID is valid */

/**

 * ti_sci_cmd_dev_get_clcnt() - Get context loss counter

 * @handle:	Pointer to TISCI handle

 * @id:		Device Identifier

 * @count:	Pointer to Context Loss counter to populate

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_dev_is_idle() - Check if the device is requested to be idle

 * @handle:	Pointer to TISCI handle

 * @id:		Device Identifier

 * @r_state:	true if requested to be idle

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_dev_is_stop() - Check if the device is requested to be stopped

 * @handle:	Pointer to TISCI handle

 * @id:		Device Identifier

 * @r_state:	true if requested to be stopped

 * @curr_state:	true if currently stopped.

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_dev_is_on() - Check if the device is requested to be ON

 * @handle:	Pointer to TISCI handle

 * @id:		Device Identifier

 * @r_state:	true if requested to be ON

 * @curr_state:	true if currently ON and active

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_dev_is_trans() - Check if the device is currently transitioning

 * @handle:	Pointer to TISCI handle

 * @id:		Device Identifier

 * @curr_state:	true if currently transitioning.

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_set_device_resets() - command to set resets for device managed

 *				    by TISCI

 * @handle:	Pointer to TISCI handle as retrieved by *ti_sci_get_handle

 * @id:		Device Identifier

 * @reset_state: Device specific reset bit field

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_get_device_resets() - Get reset state for device managed

 *				    by TISCI

 * @handle:		Pointer to TISCI handle

 * @id:			Device Identifier

 * @reset_state:	Pointer to reset state to populate

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_set_clock_state() - Set clock state helper

 * @handle:	pointer to TI SCI handle

 * @dev_id:	Device identifier this request is for

 * @clk_id:	Clock identifier for the device for this request.

 *		Each device has it's own set of clock inputs. This indexes

 *		which clock input to modify.

 * @flags:	Header flags as needed

 * @state:	State to request for the clock.

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_get_clock_state() - Get clock state helper

 * @handle:	pointer to TI SCI handle

 * @dev_id:	Device identifier this request is for

 * @clk_id:	Clock identifier for the device for this request.

 *		Each device has it's own set of clock inputs. This indexes

 *		which clock input to modify.

 * @programmed_state:	State requested for clock to move to

 * @current_state:	State that the clock is currently in

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_get_clock() - Get control of a clock from TI SCI

 * @handle:	pointer to TI SCI handle

 * @dev_id:	Device identifier this request is for

 * @clk_id:	Clock identifier for the device for this request.

 *		Each device has it's own set of clock inputs. This indexes

 *		which clock input to modify.

 * @needs_ssc: 'true' if Spread Spectrum clock is desired, else 'false'

 * @can_change_freq: 'true' if frequency change is desired, else 'false'

 * @enable_input_term: 'true' if input termination is desired, else 'false'

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_idle_clock() - Idle a clock which is in our control

 * @handle:	pointer to TI SCI handle

 * @dev_id:	Device identifier this request is for

 * @clk_id:	Clock identifier for the device for this request.

 *		Each device has it's own set of clock inputs. This indexes

 *		which clock input to modify.

 *

 * NOTE: This clock must have been requested by get_clock previously.

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_put_clock() - Release a clock from our control back to TISCI

 * @handle:	pointer to TI SCI handle

 * @dev_id:	Device identifier this request is for

 * @clk_id:	Clock identifier for the device for this request.

 *		Each device has it's own set of clock inputs. This indexes

 *		which clock input to modify.

 *

 * NOTE: This clock must have been requested by get_clock previously.

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_clk_is_auto() - Is the clock being auto managed

 * @handle:	pointer to TI SCI handle

 * @dev_id:	Device identifier this request is for

 * @clk_id:	Clock identifier for the device for this request.

 *		Each device has it's own set of clock inputs. This indexes

 *		which clock input to modify.

 * @req_state: state indicating if the clock is auto managed

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_clk_is_on() - Is the clock ON

 * @handle:	pointer to TI SCI handle

 * @dev_id:	Device identifier this request is for

 * @clk_id:	Clock identifier for the device for this request.

 *		Each device has it's own set of clock inputs. This indexes

 *		which clock input to modify.

 * @req_state: state indicating if the clock is managed by us and enabled

 * @curr_state: state indicating if the clock is ready for operation

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_clk_is_off() - Is the clock OFF

 * @handle:	pointer to TI SCI handle

 * @dev_id:	Device identifier this request is for

 * @clk_id:	Clock identifier for the device for this request.

 *		Each device has it's own set of clock inputs. This indexes

 *		which clock input to modify.

 * @req_state: state indicating if the clock is managed by us and disabled

 * @curr_state: state indicating if the clock is NOT ready for operation

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_clk_set_parent() - Set the clock source of a specific device clock

 * @handle:	pointer to TI SCI handle

 * @dev_id:	Device identifier this request is for

 * @clk_id:	Clock identifier for the device for this request.

 *		Each device has it's own set of clock inputs. This indexes

 *		which clock input to modify.

 * @parent_id:	Parent clock identifier to set

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_clk_get_parent() - Get current parent clock source

 * @handle:	pointer to TI SCI handle

 * @dev_id:	Device identifier this request is for

 * @clk_id:	Clock identifier for the device for this request.

 *		Each device has it's own set of clock inputs. This indexes

 *		which clock input to modify.

 * @parent_id:	Current clock parent

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_clk_get_num_parents() - Get num parents of the current clk source

 * @handle:	pointer to TI SCI handle

 * @dev_id:	Device identifier this request is for

 * @clk_id:	Clock identifier for the device for this request.

 *		Each device has it's own set of clock inputs. This indexes

 *		which clock input to modify.

 * @num_parents: Returns he number of parents to the current clock.

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_clk_get_match_freq() - Find a good match for frequency

 * @handle:	pointer to TI SCI handle

 * @dev_id:	Device identifier this request is for

 * @clk_id:	Clock identifier for the device for this request.

 *		Each device has it's own set of clock inputs. This indexes

 *		which clock input to modify.

 * @min_freq:	The minimum allowable frequency in Hz. This is the minimum

 *		allowable programmed frequency and does not account for clock

 *		tolerances and jitter.

 * @target_freq: The target clock frequency in Hz. A frequency will be

 *		processed as close to this target frequency as possible.

 * @max_freq:	The maximum allowable frequency in Hz. This is the maximum

 *		allowable programmed frequency and does not account for clock

 *		tolerances and jitter.

 * @match_freq:	Frequency match in Hz response.

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_clk_set_freq() - Set a frequency for clock

 * @handle:	pointer to TI SCI handle

 * @dev_id:	Device identifier this request is for

 * @clk_id:	Clock identifier for the device for this request.

 *		Each device has it's own set of clock inputs. This indexes

 *		which clock input to modify.

 * @min_freq:	The minimum allowable frequency in Hz. This is the minimum

 *		allowable programmed frequency and does not account for clock

 *		tolerances and jitter.

 * @target_freq: The target clock frequency in Hz. A frequency will be

 *		processed as close to this target frequency as possible.

 * @max_freq:	The maximum allowable frequency in Hz. This is the maximum

 *		allowable programmed frequency and does not account for clock

 *		tolerances and jitter.

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_clk_get_freq() - Get current frequency

 * @handle:	pointer to TI SCI handle

 * @dev_id:	Device identifier this request is for

 * @clk_id:	Clock identifier for the device for this request.

 *		Each device has it's own set of clock inputs. This indexes

 *		which clock input to modify.

 * @freq:	Currently frequency in Hz

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_get_resource_range - Helper to get a range of resources assigned

 *			       to a host. Resource is uniquely identified by

 *			       type and subtype.

 * @handle:		Pointer to TISCI handle.

 * @dev_id:		TISCI device ID.

 * @subtype:		Resource assignment subtype that is being requested

 *			from the given device.

 * @s_host:		Host processor ID to which the resources are allocated

 * @desc:		Pointer to ti_sci_resource_desc to be updated with the

 *			resource range start index and number of resources

 *

 * Return: 0 if all went fine, else return appropriate error.

 Neither of the two resource range is valid */

/**

 * ti_sci_cmd_get_resource_range - Get a range of resources assigned to host

 *				   that is same as ti sci interface host.

 * @handle:		Pointer to TISCI handle.

 * @dev_id:		TISCI device ID.

 * @subtype:		Resource assignment subtype that is being requested

 *			from the given device.

 * @desc:		Pointer to ti_sci_resource_desc to be updated with the

 *			resource range start index and number of resources

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_get_resource_range_from_shost - Get a range of resources

 *					      assigned to a specified host.

 * @handle:		Pointer to TISCI handle.

 * @dev_id:		TISCI device ID.

 * @subtype:		Resource assignment subtype that is being requested

 *			from the given device.

 * @s_host:		Host processor ID to which the resources are allocated

 * @desc:		Pointer to ti_sci_resource_desc to be updated with the

 *			resource range start index and number of resources

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_manage_irq() - Helper api to configure/release the irq route between

 *			 the requested source and destination

 * @handle:		Pointer to TISCI handle.

 * @valid_params:	Bit fields defining the validity of certain params

 * @src_id:		Device ID of the IRQ source

 * @src_index:		IRQ source index within the source device

 * @dst_id:		Device ID of the IRQ destination

 * @dst_host_irq:	IRQ number of the destination device

 * @ia_id:		Device ID of the IA, if the IRQ flows through this IA

 * @vint:		Virtual interrupt to be used within the IA

 * @global_event:	Global event number to be used for the requesting event

 * @vint_status_bit:	Virtual interrupt status bit to be used for the event

 * @s_host:		Secondary host ID to which the irq/event is being

 *			requested for.

 * @type:		Request type irq set or release.

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_set_irq() - Helper api to configure the irq route between the

 *		      requested source and destination

 * @handle:		Pointer to TISCI handle.

 * @valid_params:	Bit fields defining the validity of certain params

 * @src_id:		Device ID of the IRQ source

 * @src_index:		IRQ source index within the source device

 * @dst_id:		Device ID of the IRQ destination

 * @dst_host_irq:	IRQ number of the destination device

 * @ia_id:		Device ID of the IA, if the IRQ flows through this IA

 * @vint:		Virtual interrupt to be used within the IA

 * @global_event:	Global event number to be used for the requesting event

 * @vint_status_bit:	Virtual interrupt status bit to be used for the event

 * @s_host:		Secondary host ID to which the irq/event is being

 *			requested for.

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_free_irq() - Helper api to free the irq route between the

 *			   requested source and destination

 * @handle:		Pointer to TISCI handle.

 * @valid_params:	Bit fields defining the validity of certain params

 * @src_id:		Device ID of the IRQ source

 * @src_index:		IRQ source index within the source device

 * @dst_id:		Device ID of the IRQ destination

 * @dst_host_irq:	IRQ number of the destination device

 * @ia_id:		Device ID of the IA, if the IRQ flows through this IA

 * @vint:		Virtual interrupt to be used within the IA

 * @global_event:	Global event number to be used for the requesting event

 * @vint_status_bit:	Virtual interrupt status bit to be used for the event

 * @s_host:		Secondary host ID to which the irq/event is being

 *			requested for.

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_set_irq() - Configure a host irq route between the requested

 *			  source and destination.

 * @handle:		Pointer to TISCI handle.

 * @src_id:		Device ID of the IRQ source

 * @src_index:		IRQ source index within the source device

 * @dst_id:		Device ID of the IRQ destination

 * @dst_host_irq:	IRQ number of the destination device

 * @vint_irq:		Boolean specifying if this interrupt belongs to

 *			Interrupt Aggregator.

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_set_event_map() - Configure an event based irq route between the

 *				requested source and Interrupt Aggregator.

 * @handle:		Pointer to TISCI handle.

 * @src_id:		Device ID of the IRQ source

 * @src_index:		IRQ source index within the source device

 * @ia_id:		Device ID of the IA, if the IRQ flows through this IA

 * @vint:		Virtual interrupt to be used within the IA

 * @global_event:	Global event number to be used for the requesting event

 * @vint_status_bit:	Virtual interrupt status bit to be used for the event

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_free_irq() - Free a host irq route between the between the

 *			   requested source and destination.

 * @handle:		Pointer to TISCI handle.

 * @src_id:		Device ID of the IRQ source

 * @src_index:		IRQ source index within the source device

 * @dst_id:		Device ID of the IRQ destination

 * @dst_host_irq:	IRQ number of the destination device

 * @vint_irq:		Boolean specifying if this interrupt belongs to

 *			Interrupt Aggregator.

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_free_event_map() - Free an event map between the requested source

 *				 and Interrupt Aggregator.

 * @handle:		Pointer to TISCI handle.

 * @src_id:		Device ID of the IRQ source

 * @src_index:		IRQ source index within the source device

 * @ia_id:		Device ID of the IA, if the IRQ flows through this IA

 * @vint:		Virtual interrupt to be used within the IA

 * @global_event:	Global event number to be used for the requesting event

 * @vint_status_bit:	Virtual interrupt status bit to be used for the event

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * ti_sci_cmd_rm_ring_cfg() - Configure a NAVSS ring

 * @handle:	Pointer to TI SCI handle.

 * @params:	Pointer to ti_sci_msg_rm_ring_cfg ring config structure

 *

 * Return: 0 if all went well, else returns appropriate error value.

 *

 * See @ti_sci_msg_rm_ring_cfg and @ti_sci_msg_rm_ring_cfg_req for

 * more info.

/**

 * ti_sci_cmd_rm_psil_pair() - Pair PSI-L source to destination thread

 * @handle:	Pointer to TI SCI handle.

 * @nav_id:	Device ID of Navigator Subsystem which should be used for

 *		pairing

 * @src_thread:	Source PSI-L thread ID

 * @dst_thread: Destination PSI-L thread ID

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_rm_psil_unpair() - Unpair PSI-L source from destination thread

 * @handle:	Pointer to TI SCI handle.

 * @nav_id:	Device ID of Navigator Subsystem which should be used for

 *		unpairing

 * @src_thread:	Source PSI-L thread ID

 * @dst_thread:	Destination PSI-L thread ID

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_rm_udmap_tx_ch_cfg() - Configure a UDMAP TX channel

 * @handle:	Pointer to TI SCI handle.

 * @params:	Pointer to ti_sci_msg_rm_udmap_tx_ch_cfg TX channel config

 *		structure

 *

 * Return: 0 if all went well, else returns appropriate error value.

 *

 * See @ti_sci_msg_rm_udmap_tx_ch_cfg and @ti_sci_msg_rm_udmap_tx_ch_cfg_req for

 * more info.

/**

 * ti_sci_cmd_rm_udmap_rx_ch_cfg() - Configure a UDMAP RX channel

 * @handle:	Pointer to TI SCI handle.

 * @params:	Pointer to ti_sci_msg_rm_udmap_rx_ch_cfg RX channel config

 *		structure

 *

 * Return: 0 if all went well, else returns appropriate error value.

 *

 * See @ti_sci_msg_rm_udmap_rx_ch_cfg and @ti_sci_msg_rm_udmap_rx_ch_cfg_req for

 * more info.

/**

 * ti_sci_cmd_rm_udmap_rx_flow_cfg() - Configure UDMAP RX FLOW

 * @handle:	Pointer to TI SCI handle.

 * @params:	Pointer to ti_sci_msg_rm_udmap_flow_cfg RX FLOW config

 *		structure

 *

 * Return: 0 if all went well, else returns appropriate error value.

 *

 * See @ti_sci_msg_rm_udmap_flow_cfg and @ti_sci_msg_rm_udmap_flow_cfg_req for

 * more info.

/**

 * ti_sci_cmd_proc_request() - Command to request a physical processor control

 * @handle:	Pointer to TI SCI handle

 * @proc_id:	Processor ID this request is for

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_proc_release() - Command to release a physical processor control

 * @handle:	Pointer to TI SCI handle

 * @proc_id:	Processor ID this request is for

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_proc_handover() - Command to handover a physical processor

 *				control to a host in the processor's access

 *				control list.

 * @handle:	Pointer to TI SCI handle

 * @proc_id:	Processor ID this request is for

 * @host_id:	Host ID to get the control of the processor

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_proc_set_config() - Command to set the processor boot

 *				    configuration flags

 * @handle:		Pointer to TI SCI handle

 * @proc_id:		Processor ID this request is for

 * @config_flags_set:	Configuration flags to be set

 * @config_flags_clear:	Configuration flags to be cleared.

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_proc_set_control() - Command to set the processor boot

 *				     control flags

 * @handle:			Pointer to TI SCI handle

 * @proc_id:			Processor ID this request is for

 * @control_flags_set:		Control flags to be set

 * @control_flags_clear:	Control flags to be cleared

 *

 * Return: 0 if all went well, else returns appropriate error value.

/**

 * ti_sci_cmd_get_boot_status() - Command to get the processor boot status

 * @handle:	Pointer to TI SCI handle

 * @proc_id:	Processor ID this request is for

 *

 * Return: 0 if all went well, else returns appropriate error value.

/*

 * ti_sci_setup_ops() - Setup the operations structures

 * @info:	pointer to TISCI pointer

/**

 * ti_sci_get_handle() - Get the TI SCI handle for a device

 * @dev:	Pointer to device for which we want SCI handle

 *

 * NOTE: The function does not track individual clients of the framework

 * and is expected to be maintained by caller of TI SCI protocol library.

 * ti_sci_put_handle must be balanced with successful ti_sci_get_handle

 * Return: pointer to handle if successful, else:

 * -EPROBE_DEFER if the instance is not ready

 * -ENODEV if the required node handler is missing

 * -EINVAL if invalid conditions are encountered.

/**

 * ti_sci_put_handle() - Release the handle acquired by ti_sci_get_handle

 * @handle:	Handle acquired by ti_sci_get_handle

 *

 * NOTE: The function does not track individual clients of the framework

 * and is expected to be maintained by caller of TI SCI protocol library.

 * ti_sci_put_handle must be balanced with successful ti_sci_get_handle

 *

 * Return: 0 is successfully released

 * if an error pointer was passed, it returns the error value back,

 * if null was passed, it returns -EINVAL;

/**

 * devm_ti_sci_get_handle() - Managed get handle

 * @dev:	device for which we want SCI handle for.

 *

 * NOTE: This releases the handle once the device resources are

 * no longer needed. MUST NOT BE released with ti_sci_put_handle.

 * The function does not track individual clients of the framework

 * and is expected to be maintained by caller of TI SCI protocol library.

 *

 * Return: 0 if all went fine, else corresponding error.

/**

 * ti_sci_get_by_phandle() - Get the TI SCI handle using DT phandle

 * @np:		device node

 * @property:	property name containing phandle on TISCI node

 *

 * NOTE: The function does not track individual clients of the framework

 * and is expected to be maintained by caller of TI SCI protocol library.

 * ti_sci_put_handle must be balanced with successful ti_sci_get_by_phandle

 * Return: pointer to handle if successful, else:

 * -EPROBE_DEFER if the instance is not ready

 * -ENODEV if the required node handler is missing

 * -EINVAL if invalid conditions are encountered.

/**

 * devm_ti_sci_get_by_phandle() - Managed get handle using phandle

 * @dev:	Device pointer requesting TISCI handle

 * @property:	property name containing phandle on TISCI node

 *

 * NOTE: This releases the handle once the device resources are

 * no longer needed. MUST NOT BE released with ti_sci_put_handle.

 * The function does not track individual clients of the framework

 * and is expected to be maintained by caller of TI SCI protocol library.

 *

 * Return: 0 if all went fine, else corresponding error.

/**

 * ti_sci_get_free_resource() - Get a free resource from TISCI resource.

 * @res:	Pointer to the TISCI resource

 *

 * Return: resource num if all went ok else TI_SCI_RESOURCE_NULL.

/**

 * ti_sci_release_resource() - Release a resource from TISCI resource.

 * @res:	Pointer to the TISCI resource

 * @id:		Resource id to be released.

/**

 * ti_sci_get_num_resources() - Get the number of resources in TISCI resource

 * @res:	Pointer to the TISCI resource

 *

 * Return: Total number of available resources.

/**

 * devm_ti_sci_get_resource_sets() - Get a TISCI resources assigned to a device

 * @handle:	TISCI handle

 * @dev:	Device pointer to which the resource is assigned

 * @dev_id:	TISCI device id to which the resource is assigned

 * @sub_types:	Array of sub_types assigned corresponding to device

 * @sets:	Number of sub_types

 *

 * Return: Pointer to ti_sci_resource if all went well else appropriate

 *	   error pointer.

/**

 * devm_ti_sci_get_of_resource() - Get a TISCI resource assigned to a device

 * @handle:	TISCI handle

 * @dev:	Device pointer to which the resource is assigned

 * @dev_id:	TISCI device id to which the resource is assigned

 * @of_prop:	property name by which the resource are represented

 *

 * Return: Pointer to ti_sci_resource if all went well else appropriate

 *	   error pointer.

/**

 * devm_ti_sci_get_resource() - Get a resource range assigned to the device

 * @handle:	TISCI handle

 * @dev:	Device pointer to which the resource is assigned

 * @dev_id:	TISCI device id to which the resource is assigned

 * @suub_type:	TISCI resource subytpe representing the resource.

 *

 * Return: Pointer to ti_sci_resource if all went well else appropriate

 *	   error pointer.

 call fail OR pass, we should not be here in the first place */

 Description for K2G */

 Conservative duration */

 Limited by MBOX_TX_QUEUE_LEN. K2G can handle upto 128 messages! */

 Description for AM654 */

 Conservative duration */

 Limited by MBOX_TX_QUEUE_LEN. K2G can handle upto 128 messages! */

 Sentinel */ },

 if the property is not present in DT, use a default from desc */

	/*

	 * Pre-allocate messages

	 * NEVER allocate more than what we can indicate in hdr.seq

	 * if we have data description bug, force a fix..

 Pre-initialize the buffer pointer to pre-allocated buffers */

 Safe to free channels since no more users */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 Broadcom.

	/*

	 * TA_CMD_BNXT_FASTBOOT - boot bnxt device by copying f/w into sram

	 *

	 *	param[0] unused

	 *	param[1] unused

	 *	param[2] unused

	 *	param[3] unused

	 *

	 * Result:

	 *	TEE_SUCCESS - Invoke command success

	 *	TEE_ERROR_ITEM_NOT_FOUND - Corrupt f/w image found on memory

	/*

	 * TA_CMD_BNXT_COPY_COREDUMP - copy the core dump into shm

	 *

	 *	param[0] (inout memref) - Coredump buffer memory reference

	 *	param[1] (in value) - value.a: offset, data to be copied from

	 *			      value.b: size of data to be copied

	 *	param[2] unused

	 *	param[3] unused

	 *

	 * Result:

	 *	TEE_SUCCESS - Invoke command success

	 *	TEE_ERROR_BAD_PARAMETERS - Incorrect input param

	 *	TEE_ERROR_ITEM_NOT_FOUND - Corrupt core dump

/**

 * struct tee_bnxt_fw_private - OP-TEE bnxt private data

 * @dev:		OP-TEE based bnxt device.

 * @ctx:		OP-TEE context handler.

 * @session_id:		TA session identifier.

 Fill invoke cmd params */

 Nothing to do */

/**

 * tee_bnxt_fw_load() - Load the bnxt firmware

 *		    Uses an OP-TEE call to start a secure

 *		    boot process.

 * Returns 0 on success, negative errno otherwise.

/**

 * tee_bnxt_copy_coredump() - Copy coredump from the allocated memory

 *			    Uses an OP-TEE call to copy coredump

 * @buf:	destination buffer where core dump is copied into

 * @offset:	offset from the base address of core dump area

 * @size:	size of the dump

 *

 * Returns 0 on success, negative errno otherwise.

 Fill additional invoke cmd params */

 Open context with TEE driver */

 Open session with Bnxt load Trusted App */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * BCM947xx nvram variable access

 *

 * Copyright (C) 2005 Broadcom Corporation

 * Copyright (C) 2006 Felix Fietkau <nbd@openwrt.org>

 * Copyright (C) 2010-2012 Hauke Mehrtens <hauke@hauke-m.de>

 'FLSH' */

 Minimum flash size */

 0:7 crc, 8:15 ver, 16:31 sdram_init */

 0:15 sdram_config, 16:31 sdram_refresh */

 ncdl values for memc */

/**

 * bcm47xx_nvram_is_valid - check for a valid NVRAM at specified memory

/**

 * bcm47xx_nvram_copy - copy NVRAM to internal buffer

/**

 * bcm47xx_nvram_find_and_copy - find NVRAM on flash mapping & copy it

 TODO: when nvram is on nand flash check for bad blocks first. */

 Try every possible flash size and check for NVRAM at its end */

 Try embedded NVRAM at 4 KB and 1 KB as last resorts */

/*

 * On bcm47xx we need access to the NVRAM very early, so we can't use mtd

 * subsystem to access flash. We can't even use platform device / driver to

 * store memory offset.

 * To handle this we provide following symbol. It's supposed to be called as

 * soon as we get info about flash device, before any NVRAM entry is needed.

 Look for name=value and return value */

 TODO: Optimize it to don't call getenv so many times */

/*

 *  Copyright (C) 2004 Florian Schirmer <jolt@tuxbox.org>

 *  Copyright (C) 2006 Felix Fietkau <nbd@openwrt.org>

 *  Copyright (C) 2006 Michael Buesch <m@bues.ch>

 *  Copyright (C) 2010 Waldemar Brodkorb <wbx@openadk.org>

 *  Copyright (C) 2010-2012 Hauke Mehrtens <hauke@hauke-m.de>

 *

 *  This program is free software; you can redistribute  it and/or modify it

 *  under  the terms of  the GNU General  Public License as published by the

 *  Free Software Foundation;  either version 2 of the  License, or (at your

 *  option) any later version.

 *

 *  THIS  SOFTWARE  IS PROVIDED   ``AS  IS'' AND   ANY  EXPRESS OR IMPLIED

 *  WARRANTIES,   INCLUDING, BUT NOT  LIMITED  TO, THE IMPLIED WARRANTIES OF

 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN

 *  NO  EVENT  SHALL   THE AUTHOR  BE    LIABLE FOR ANY   DIRECT, INDIRECT,

 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT

 *  NOT LIMITED   TO, PROCUREMENT OF  SUBSTITUTE GOODS  OR SERVICES; LOSS OF

 *  USE, DATA,  OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON

 *  ANY THEORY OF LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT

 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF

 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *

 *  You should have received a copy of the  GNU General Public License along

 *  with this program; if not, write  to the Free Software Foundation, Inc.,

 *  675 Mass Ave, Cambridge, MA 02139, USA.

 This is one-function-only macro, it uses local "sprom" variable! */

/*

 * Special version of filling function that can be safely called for any SPROM

 * revision. For every NVRAM to SPROM mapping it contains bitmask of revisions

 * for which the mapping is valid.

 * It obviously requires some hexadecimal/bitmasks knowledge, but allows

 * writing cleaner code (easy revisions handling).

 * Note that while SPROM revision 0 was never used, we still keep BIT(0)

 * reserved for it, just to keep numbering sane.

 Broadcom extracts it for rev 8+ but it was found on 2 and 4 too */

 TODO: rev 11 support */

 TODO: rev 11 support */

 It's specififc, uses local variable, don't use it (again). */

	/* The address prefix 00:90:4C is used by Broadcom in their initial

	 * configuration. When a mac address with the prefix 00:90:4C is used

	 * all devices from the same series are sharing the same mac address.

	 * To prevent mac address collisions we replace them with a mac address

	 * based on the base address.

 Entries requiring custom functions */

/*

 * Having many NVRAM entries for PCI devices led to repeating prefixes like

 * pci/1/1/ all the time and wasting flash space. So at some point Broadcom

 * decided to introduce prefixes like 0: 1: 2: etc.

 * If we find e.g. devpath0=pci/2/1 or devpath0=pci/2/1/ we should use 0:

 * instead of pci/2/1/.

 Passed prefix has to end with a slash */

 On BCM47XX all PCI buses share the same domain */

/*

 * On bcm47xx we need to register SPROM fallback handler very early, so we can't

 * use anything like platform device / driver for this.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Amlogic Secure Monitor driver

 *

 * Copyright (C) 2016 Endless Mobile, Inc.

 * Author: Carlo Caione <carlo@endlessm.com>

 sentinel */ },

/**

 * meson_sm_call - generic SMC32 call to the secure-monitor

 *

 * @fw:		Pointer to secure-monitor firmware

 * @cmd_index:	Index of the SMC32 function ID

 * @ret:	Returned value

 * @arg0:	SMC32 Argument 0

 * @arg1:	SMC32 Argument 1

 * @arg2:	SMC32 Argument 2

 * @arg3:	SMC32 Argument 3

 * @arg4:	SMC32 Argument 4

 *

 * Return:	0 on success, a negative value on error

/**

 * meson_sm_call_read - retrieve data from secure-monitor

 *

 * @fw:		Pointer to secure-monitor firmware

 * @buffer:	Buffer to store the retrieved data

 * @bsize:	Size of the buffer

 * @cmd_index:	Index of the SMC32 function ID

 * @arg0:	SMC32 Argument 0

 * @arg1:	SMC32 Argument 1

 * @arg2:	SMC32 Argument 2

 * @arg3:	SMC32 Argument 3

 * @arg4:	SMC32 Argument 4

 *

 * Return:	size of read data on success, a negative value on error

 *		When 0 is returned there is no guarantee about the amount of

 *		data read and bsize bytes are copied in buffer.

/**

 * meson_sm_call_write - send data to secure-monitor

 *

 * @fw:		Pointer to secure-monitor firmware

 * @buffer:	Buffer containing data to send

 * @size:	Size of the data to send

 * @cmd_index:	Index of the SMC32 function ID

 * @arg0:	SMC32 Argument 0

 * @arg1:	SMC32 Argument 1

 * @arg2:	SMC32 Argument 2

 * @arg3:	SMC32 Argument 3

 * @arg4:	SMC32 Argument 4

 *

 * Return:	size of sent data on success, a negative value on error

/**

 * meson_sm_get - get pointer to meson_sm_firmware structure.

 *

 * @sm_node:		Pointer to the secure-monitor Device Tree node.

 *

 * Return:		NULL is the secure-monitor device is not ready.

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/*

 * Xilinx Zynq MPSoC Firmware layer for debugfs APIs

 *

 *  Copyright (C) 2014-2018 Xilinx, Inc.

 *

 *  Michal Simek <michal.simek@xilinx.com>

 *  Davorin Mista <davorin.mista@aggios.com>

 *  Jolly Shah <jollys@xilinx.com>

 *  Rajan Vaja <rajanv@xilinx.com>

/**

 * zynqmp_pm_argument_value() - Extract argument value from a PM-API request

 * @arg:	Entered PM-API argument in string format

 *

 * Return: Argument value in unsigned integer format on success

 *	   0 otherwise

/**

 * get_pm_api_id() - Extract API-ID from a PM-API request

 * @pm_api_req:		Entered PM-API argument in string format

 * @pm_id:		API-ID

 *

 * Return: 0 on success else error code

 If no name was entered look for PM-API ID instead */

/**

 * zynqmp_pm_debugfs_api_write() - debugfs write function

 * @file:	User file

 * @ptr:	User entered PM-API string

 * @len:	Length of the userspace buffer

 * @off:	Offset within the file

 *

 * Used for triggering pm api functions by writing

 * echo <pm_api_id>	> /sys/kernel/debug/zynqmp_pm/power or

 * echo <pm_api_name>	> /sys/kernel/debug/zynqmp_pm/power

 *

 * Return: Number of bytes copied if PM-API request succeeds,

 *	   the corresponding error code otherwise

 Return values from PM APIs calls */

 Read the API name from a user request */

 Read node_id and arguments from the PM-API request */

/**

 * zynqmp_pm_debugfs_api_read() - debugfs read function

 * @file:	User file

 * @ptr:	Requested pm_api_version string

 * @len:	Length of the userspace buffer

 * @off:	Offset within the file

 *

 * Return: Length of the version string on success

 *	   else error code

 Setup debugfs fops */

/**

 * zynqmp_pm_api_debugfs_init - Initialize debugfs interface

 *

 * Return:	None

 Initialize debugfs interface */

/**

 * zynqmp_pm_api_debugfs_exit - Remove debugfs interface

 *

 * Return:	None

 SPDX-License-Identifier: GPL-2.0

/*

 * Xilinx Zynq MPSoC Firmware layer

 *

 *  Copyright (C) 2014-2021 Xilinx, Inc.

 *

 *  Michal Simek <michal.simek@xilinx.com>

 *  Davorin Mista <davorin.mista@aggios.com>

 *  Jolly Shah <jollys@xilinx.com>

 *  Rajan Vaja <rajanv@xilinx.com>

 Max HashMap Order for PM API feature check (1<<7 = 128) */

 CRL registers and bitfields */

 BOOT_PIN_CTRL- Used to control the mode pins after boot */

 BOOT_PIN_CTRL_MASK- out_val[11:8], out_en[3:0] */

/**

 * struct pm_api_feature_data - PM API Feature data

 * @pm_api_id:		PM API Id, used as key to index into hashmap

 * @feature_status:	status of PM API feature: valid, invalid

 * @hentry:		hlist_node that hooks this entry into hashtable

/**

 * zynqmp_pm_ret_code() - Convert PMU-FW error codes to Linux error codes

 * @ret_status:		PMUFW return code

 *

 * Return: corresponding Linux error code

/*

 * PM function call wrapper

 * Invoke do_fw_call_smc or do_fw_call_hvc, depending on the configuration

/**

 * do_fw_call_smc() - Call system-level platform management layer (SMC)

 * @arg0:		Argument 0 to SMC call

 * @arg1:		Argument 1 to SMC call

 * @arg2:		Argument 2 to SMC call

 * @ret_payload:	Returned value array

 *

 * Invoke platform management function via SMC call (no hypervisor present).

 *

 * Return: Returns status, either success or error+reason

/**

 * do_fw_call_hvc() - Call system-level platform management layer (HVC)

 * @arg0:		Argument 0 to HVC call

 * @arg1:		Argument 1 to HVC call

 * @arg2:		Argument 2 to HVC call

 * @ret_payload:	Returned value array

 *

 * Invoke platform management function via HVC

 * HVC-based for communication through hypervisor

 * (no direct communication with ATF).

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_feature() - Check weather given feature is supported or not

 * @api_id:		API ID to check

 *

 * Return: Returns status, either success or error+reason

 Check for existing entry in hash table for given api */

 Add new entry if not present */

/**

 * zynqmp_pm_invoke_fn() - Invoke the system-level platform management layer

 *			   caller function depending on the configuration

 * @pm_api_id:		Requested PM-API call

 * @arg0:		Argument 0 to requested PM-API call

 * @arg1:		Argument 1 to requested PM-API call

 * @arg2:		Argument 2 to requested PM-API call

 * @arg3:		Argument 3 to requested PM-API call

 * @ret_payload:	Returned value array

 *

 * Invoke platform management function for SMC or HVC call, depending on

 * configuration.

 * Following SMC Calling Convention (SMCCC) for SMC64:

 * Pm Function Identifier,

 * PM_SIP_SVC + PM_API_ID =

 *	((SMC_TYPE_FAST << FUNCID_TYPE_SHIFT)

 *	((SMC_64) << FUNCID_CC_SHIFT)

 *	((SIP_START) << FUNCID_OEN_SHIFT)

 *	((PM_API_ID) & FUNCID_NUM_MASK))

 *

 * PM_SIP_SVC	- Registered ZynqMP SIP Service Call.

 * PM_API_ID	- Platform Management API ID.

 *

 * Return: Returns status, either success or error+reason

	/*

	 * Added SIP service call Function Identifier

	 * Make sure to stay in x0 register

 Check if feature is supported or not */

/**

 * zynqmp_pm_get_api_version() - Get version number of PMU PM firmware

 * @version:	Returned version value

 *

 * Return: Returns status, either success or error+reason

 Check is PM API version already verified */

/**

 * zynqmp_pm_get_chipid - Get silicon ID registers

 * @idcode:     IDCODE register

 * @version:    version register

 *

 * Return:      Returns the status of the operation and the idcode and version

 *              registers in @idcode and @version.

/**

 * zynqmp_pm_get_trustzone_version() - Get secure trustzone firmware version

 * @version:	Returned version value

 *

 * Return: Returns status, either success or error+reason

 Check is PM trustzone version already verified */

/**

 * get_set_conduit_method() - Choose SMC or HVC based communication

 * @np:		Pointer to the device_node structure

 *

 * Use SMC or HVC-based functions to communicate with EL2/EL3.

 *

 * Return: Returns 0 on success or error code

/**

 * zynqmp_pm_query_data() - Get query data from firmware

 * @qdata:	Variable to the zynqmp_pm_query_data structure

 * @out:	Returned output value

 *

 * Return: Returns status, either success or error+reason

	/*

	 * For clock name query, all bytes in SMC response are clock name

	 * characters and return code is always success. For invalid clocks,

	 * clock name bytes would be zeros.

/**

 * zynqmp_pm_clock_enable() - Enable the clock for given id

 * @clock_id:	ID of the clock to be enabled

 *

 * This function is used by master to enable the clock

 * including peripherals and PLL clocks.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_clock_disable() - Disable the clock for given id

 * @clock_id:	ID of the clock to be disable

 *

 * This function is used by master to disable the clock

 * including peripherals and PLL clocks.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_clock_getstate() - Get the clock state for given id

 * @clock_id:	ID of the clock to be queried

 * @state:	1/0 (Enabled/Disabled)

 *

 * This function is used by master to get the state of clock

 * including peripherals and PLL clocks.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_clock_setdivider() - Set the clock divider for given id

 * @clock_id:	ID of the clock

 * @divider:	divider value

 *

 * This function is used by master to set divider for any clock

 * to achieve desired rate.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_clock_getdivider() - Get the clock divider for given id

 * @clock_id:	ID of the clock

 * @divider:	divider value

 *

 * This function is used by master to get divider values

 * for any clock.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_clock_setrate() - Set the clock rate for given id

 * @clock_id:	ID of the clock

 * @rate:	rate value in hz

 *

 * This function is used by master to set rate for any clock.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_clock_getrate() - Get the clock rate for given id

 * @clock_id:	ID of the clock

 * @rate:	rate value in hz

 *

 * This function is used by master to get rate

 * for any clock.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_clock_setparent() - Set the clock parent for given id

 * @clock_id:	ID of the clock

 * @parent_id:	parent id

 *

 * This function is used by master to set parent for any clock.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_clock_getparent() - Get the clock parent for given id

 * @clock_id:	ID of the clock

 * @parent_id:	parent id

 *

 * This function is used by master to get parent index

 * for any clock.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_set_pll_frac_mode() - PM API for set PLL mode

 *

 * @clk_id:	PLL clock ID

 * @mode:	PLL mode (PLL_MODE_FRAC/PLL_MODE_INT)

 *

 * This function sets PLL mode

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_get_pll_frac_mode() - PM API for get PLL mode

 *

 * @clk_id:	PLL clock ID

 * @mode:	PLL mode

 *

 * This function return current PLL mode

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_set_pll_frac_data() - PM API for setting pll fraction data

 *

 * @clk_id:	PLL clock ID

 * @data:	fraction data

 *

 * This function sets fraction data.

 * It is valid for fraction mode only.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_get_pll_frac_data() - PM API for getting pll fraction data

 *

 * @clk_id:	PLL clock ID

 * @data:	fraction data

 *

 * This function returns fraction data value.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_set_sd_tapdelay() -  Set tap delay for the SD device

 *

 * @node_id:	Node ID of the device

 * @type:	Type of tap delay to set (input/output)

 * @value:	Value to set fot the tap delay

 *

 * This function sets input/output tap delay for the SD device.

 *

 * Return:	Returns status, either success or error+reason

/**

 * zynqmp_pm_sd_dll_reset() - Reset DLL logic

 *

 * @node_id:	Node ID of the device

 * @type:	Reset type

 *

 * This function resets DLL logic for the SD device.

 *

 * Return:	Returns status, either success or error+reason

/**

 * zynqmp_pm_ospi_mux_select() - OSPI Mux selection

 *

 * @dev_id:	Device Id of the OSPI device.

 * @select:	OSPI Mux select value.

 *

 * This function select the OSPI Mux.

 *

 * Return:	Returns status, either success or error+reason

/**

 * zynqmp_pm_write_ggs() - PM API for writing global general storage (ggs)

 * @index:	GGS register index

 * @value:	Register value to be written

 *

 * This function writes value to GGS register.

 *

 * Return:      Returns status, either success or error+reason

/**

 * zynqmp_pm_read_ggs() - PM API for reading global general storage (ggs)

 * @index:	GGS register index

 * @value:	Register value to be written

 *

 * This function returns GGS register value.

 *

 * Return:	Returns status, either success or error+reason

/**

 * zynqmp_pm_write_pggs() - PM API for writing persistent global general

 *			     storage (pggs)

 * @index:	PGGS register index

 * @value:	Register value to be written

 *

 * This function writes value to PGGS register.

 *

 * Return:	Returns status, either success or error+reason

/**

 * zynqmp_pm_read_pggs() - PM API for reading persistent global general

 *			     storage (pggs)

 * @index:	PGGS register index

 * @value:	Register value to be written

 *

 * This function returns PGGS register value.

 *

 * Return:	Returns status, either success or error+reason

/**

 * zynqmp_pm_set_boot_health_status() - PM API for setting healthy boot status

 * @value:	Status value to be written

 *

 * This function sets healthy bit value to indicate boot health status

 * to firmware.

 *

 * Return:	Returns status, either success or error+reason

/**

 * zynqmp_pm_reset_assert - Request setting of reset (1 - assert, 0 - release)

 * @reset:		Reset to be configured

 * @assert_flag:	Flag stating should reset be asserted (1) or

 *			released (0)

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_reset_get_status - Get status of the reset

 * @reset:      Reset whose status should be returned

 * @status:     Returned status

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_fpga_load - Perform the fpga load

 * @address:	Address to write to

 * @size:	pl bitstream size

 * @flags:	Bitstream type

 *	-XILINX_ZYNQMP_PM_FPGA_FULL:  FPGA full reconfiguration

 *	-XILINX_ZYNQMP_PM_FPGA_PARTIAL: FPGA partial reconfiguration

 *

 * This function provides access to pmufw. To transfer

 * the required bitstream into PL.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_fpga_get_status - Read value from PCAP status register

 * @value: Value to read

 *

 * This function provides access to the pmufw to get the PCAP

 * status

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_pinctrl_request - Request Pin from firmware

 * @pin: Pin number to request

 *

 * This function requests pin from firmware.

 *

 * Return: Returns status, either success or error+reason.

/**

 * zynqmp_pm_pinctrl_release - Inform firmware that Pin control is released

 * @pin: Pin number to release

 *

 * This function release pin from firmware.

 *

 * Return: Returns status, either success or error+reason.

/**

 * zynqmp_pm_pinctrl_get_function - Read function id set for the given pin

 * @pin: Pin number

 * @id: Buffer to store function ID

 *

 * This function provides the function currently set for the given pin.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_pinctrl_set_function - Set requested function for the pin

 * @pin: Pin number

 * @id: Function ID to set

 *

 * This function sets requested function for the given pin.

 *

 * Return: Returns status, either success or error+reason.

/**

 * zynqmp_pm_pinctrl_get_config - Get configuration parameter for the pin

 * @pin: Pin number

 * @param: Parameter to get

 * @value: Buffer to store parameter value

 *

 * This function gets requested configuration parameter for the given pin.

 *

 * Return: Returns status, either success or error+reason.

/**

 * zynqmp_pm_pinctrl_set_config - Set configuration parameter for the pin

 * @pin: Pin number

 * @param: Parameter to set

 * @value: Parameter value to set

 *

 * This function sets requested configuration parameter for the given pin.

 *

 * Return: Returns status, either success or error+reason.

/**

 * zynqmp_pm_bootmode_read() - PM Config API for read bootpin status

 * @ps_mode: Returned output value of ps_mode

 *

 * This API function is to be used for notify the power management controller

 * to read bootpin status.

 *

 * Return: status, either success or error+reason

/**

 * zynqmp_pm_bootmode_write() - PM Config API for Configure bootpin

 * @ps_mode: Value to be written to the bootpin ctrl register

 *

 * This API function is to be used for notify the power management controller

 * to configure bootpin.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_init_finalize() - PM call to inform firmware that the caller

 *			       master has initialized its own power management

 *

 * Return: Returns status, either success or error+reason

 *

 * This API function is to be used for notify the power management controller

 * about the completed power management initialization.

/**

 * zynqmp_pm_set_suspend_mode()	- Set system suspend mode

 * @mode:	Mode to set for system suspend

 *

 * This API function is used to set mode of system suspend.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_request_node() - Request a node with specific capabilities

 * @node:		Node ID of the slave

 * @capabilities:	Requested capabilities of the slave

 * @qos:		Quality of service (not supported)

 * @ack:		Flag to specify whether acknowledge is requested

 *

 * This function is used by master to request particular node from firmware.

 * Every master must request node before using it.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_release_node() - Release a node

 * @node:	Node ID of the slave

 *

 * This function is used by master to inform firmware that master

 * has released node. Once released, master must not use that node

 * without re-request.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_set_requirement() - PM call to set requirement for PM slaves

 * @node:		Node ID of the slave

 * @capabilities:	Requested capabilities of the slave

 * @qos:		Quality of service (not supported)

 * @ack:		Flag to specify whether acknowledge is requested

 *

 * This API function is to be used for slaves a PU already has requested

 * to change its capabilities.

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_load_pdi - Load and process PDI

 * @src:       Source device where PDI is located

 * @address:   PDI src address

 *

 * This function provides support to load PDI from linux

 *

 * Return: Returns status, either success or error+reason

/**

 * zynqmp_pm_aes_engine - Access AES hardware to encrypt/decrypt the data using

 * AES-GCM core.

 * @address:	Address of the AesParams structure.

 * @out:	Returned output value

 *

 * Return:	Returns status, either success or error code.

/**

 * zynqmp_pm_system_shutdown - PM call to request a system shutdown or restart

 * @type:	Shutdown or restart? 0 for shutdown, 1 for restart

 * @subtype:	Specifies which system should be restarted or shut down

 *

 * Return:	Returns status, either success or error+reason

/**

 * struct zynqmp_pm_shutdown_scope - Struct for shutdown scope

 * @subtype:	Shutdown subtype

 * @name:	Matching string for scope argument

 *

 * This struct encapsulates mapping between shutdown scope ID and string.

/**

 * zynqmp_pm_is_shutdown_scope_valid - Check if shutdown scope string is valid

 * @scope_string:	Shutdown scope string

 *

 * Return:		Return pointer to matching shutdown scope struct from

 *			array of available options in system if string is valid,

 *			otherwise returns NULL.

 GGS register show functions */

 GGS register store function */

 PGGS register show functions */

 PGGS register store functions */

 GGS register attributes */

 PGGS register attributes */

 Check PM API version number */

 Check trustzone version number */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2020 Arm Limited

/*

 * As per the SMC Calling Convention specification v1.2 (ARM DEN 0028C)

 * Section 7.4 SMCCC_ARCH_SOC_ID bits[23:16] are JEP-106 identification

 * code with parity bit for the SiP. We can drop the parity bit.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020 Arm Limited

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

/*

 * dev-path-parser.c - EFI Device Path parser

 * Copyright (C) 2016 Lukas Wunner <lukas@wunner.de>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License (version 2) as

 * published by the Free Software Foundation.

 UINT_MAX + null byte */

/*

 * Insert parsers for further node types here.

 *

 * Each parser takes a pointer to the @node and to the @parent (will be NULL

 * for the first device path node). If a device corresponding to @node was

 * found below @parent, its reference count should be incremented and the

 * device returned in @child.

 *

 * The return value should be 0 on success or a negative int on failure.

 * The special return values 0x01 (EFI_DEV_END_INSTANCE) and 0xFF

 * (EFI_DEV_END_ENTIRE) signal the end of the device path, only

 * parse_end_path() is supposed to return this.

 *

 * Be sure to validate the node length and contents before commencing the

 * search for a device.

/**

 * efi_get_device_by_path - find device by EFI Device Path

 * @node: EFI Device Path

 * @len: maximum length of EFI Device Path in bytes

 *

 * Parse a series of EFI Device Path nodes at @node and find the corresponding

 * device.  If the device was found, its reference count is incremented and a

 * pointer to it is returned.  The caller needs to drop the reference with

 * put_device() after use.  The @node pointer is updated to point to the

 * location immediately after the "End of Hardware Device Path" node.

 *

 * If another Device Path instance follows, @len is decremented by the number

 * of bytes consumed.  Otherwise @len is set to %0.

 *

 * If a Device Path node is malformed or its corresponding device is not found,

 * @node is updated to point to this offending node and an ERR_PTR is returned.

 *

 * If @len is initially %0, the function returns %NULL.  Thus, to iterate over

 * all instances in a path, the following idiom may be used:

 *

 *	while (!IS_ERR_OR_NULL(dev = efi_get_device_by_path(&node, &len))) {

 *		// do something with dev

 *		put_device(dev);

 *	}

 *	if (IS_ERR(dev))

 *		// report error

 *

 * Devices can only be found if they're already instantiated. Most buses

 * instantiate devices in the "subsys" initcall level, hence the earliest

 * initcall level in which this function should be called is "fs".

 *

 * Returns the device on success or

 *	%ERR_PTR(-ENODEV) if no device was found,

 *	%ERR_PTR(-EINVAL) if a node is malformed or exceeds @len,

 *	%ERR_PTR(-ENOTSUPP) if support for a node type is not yet implemented.

 SPDX-License-Identifier: GPL-2.0

/*

 * apple-properties.c - EFI device properties on Macs

 * Copyright (C) 2016 Lukas Wunner <lukas@wunner.de>

 *

 * Properties are stored either as:

 * u8 arrays which can be retrieved with device_property_read_u8_array() or

 * booleans which can be queried with device_property_present().

	/*

	 * followed by key/value pairs, each key and value preceded by u32 len,

	 * len includes itself, value may be empty (in which case its len is 4)

 4 bytes to accommodate UTF-8 code points + null byte */

		/*

		 * Can only free the setup_data payload but not its header

		 * to avoid breaking the chain of ->next pointers.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * efi.c - EFI subsystem

 *

 * Copyright (C) 2001,2003,2004 Dell <Matt_Domsch@dell.com>

 * Copyright (C) 2004 Intel Corporation <matthew.e.tolentino@intel.com>

 * Copyright (C) 2013 Tom Gundersen <teg@jklm.no>

 *

 * This code registers /sys/firmware/efi{,/efivars} when EFI is supported,

 * allowing the efivarfs to be mounted or the efivars module to be loaded.

 * The existance of /sys/firmware/efi may also be used by userspace to

 * determine that the system supports EFI.

/*

 * Let's not leave out systab information that snuck into

 * the efivars driver

 * Note, do not add more fields in systab sysfs file as it breaks sysfs

 * one value per file rule!

	/*

	 * If both SMBIOS and SMBIOS3 entry points are implemented, the

	 * SMBIOS3 entry point shall be preferred, so we list it first to

	 * let applications stop parsing after the first match.

/*

 * We register the efi subsystem with the firmware subsystem and the

 * efivars subsystem with the efi subsystem, if the system was booted with

 * EFI.

		/*

		 * Since we process only one efi_runtime_service() at a time, an

		 * ordered workqueue (which creates only one execution context)

		 * should suffice for all our needs.

 We register the efi directory at /sys/firmware/efi */

 and the standard mountpoint for efivarfs */

/*

 * Find the efi memory descriptor for a given physical address.  Given a

 * physical address, determine if it exists within an EFI Memory Map entry,

 * and if so, populate the supplied memory descriptor with the appropriate

 * data.

/*

 * Calculate the highest address of an efi memory descriptor.

/**

 * efi_mem_reserve - Reserve an EFI memory region

 * @addr: Physical address to reserve

 * @size: Size of reservation

 *

 * Mark a region as reserved from general kernel allocation and

 * prevent it being released by efi_free_boot_services().

 *

 * This function should be called drivers once they've parsed EFI

 * configuration tables to figure out where their data lives, e.g.

 * efi_esrt_init().

	/*

	 * Some architectures (x86) reserve all boot services ranges

	 * until efi_free_boot_services() because of buggy firmware

	 * implementations. This means the above memblock_reserve() is

	 * superfluous on x86 and instead what it needs to do is

	 * ensure the @start, @size is not freed.

			/*

			 * Just map a full page: that is what we will get

			 * anyway, and it permits us to map the entire entry

			 * before knowing its size.

 reserve the entry itself */

/*

 * IA64 has a funky EFI memory map that doesn't work the same way as

 * other architectures.

/*

 * efi_mem_attributes - lookup memmap attributes for physical address

 * @phys_addr: the physical address to lookup

 *

 * Search in the EFI memory map for the region covering

 * @phys_addr. Returns the EFI memory attributes if the region

 * was found in the memory map, 0 otherwise.

/*

 * efi_mem_type - lookup memmap type for physical address

 * @phys_addr: the physical address to lookup

 *

 * Search in the EFI memory map for the region covering @phys_addr.

 * Returns the EFI memory type if the region was found in the memory

 * map, -EINVAL otherwise.

 we expect a conflict with a 'System RAM' region */

	/*

	 * Given that efi_mem_reserve_iomem() can be called at any

	 * time, only call memblock_reserve() if the architecture

	 * keeps the infrastructure around.

 first try to find a slot in an existing linked list entry */

 no slot found - allocate a new linked list entry */

	/*

	 * The memremap() call above assumes that a linux_efi_memreserve entry

	 * never crosses a page boundary, so let's ensure that this remains true

	 * even when kexec'ing a 4k pages kernel from a >4k pages kernel, by

	 * using SZ_4K explicitly in the size calculation below.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Generic System Framebuffers

 * Copyright (c) 2012-2013 David Herrmann <dh.herrmann@gmail.com>

 *

 * EFI Quirks Copyright (c) 2006 Edgar Hucek <gimli@dark-green.com>

/*

 * EFI Quirks

 * Several EFI systems do not correctly advertise their boot framebuffers.

 * Hence, we use this static table of known broken machines and fix up the

 * information so framebuffer drivers can load correctly.

 guess */

 guess */

 11" Macbook Air 3,1 passes the wrong stride */

 placeholder */

 Trust the bootloader over the DMI tables */

			/* make sure that the address in the table is actually

 At least one of these two will be right; maybe both? */

 At least one of these two will be right; maybe both? */

 At least one of these two will be right; maybe both? */

 At least one of these two will be right; maybe both? */

/*

 * Some devices have a portrait LCD but advertise a landscape resolution (and

 * pitch). We simply swap width and height for these devices so that we can

 * correctly deal with some of them coming with multiple resolutions.

		/*

		 * Lenovo MIIX310-10ICR, only some batches have the troublesome

		 * 800x1280 portrait screen. Luckily the portrait version has

		 * its own BIOS version, so we match on that.

 Lenovo MIIX 320-10ICR with 800x1280 portrait screen */

 Lenovo D330 with 800x1280 or 1200x1920 portrait screen */

/*

 * If the efifb framebuffer is backed by a PCI graphics controller, we have

 * to ensure that this relation is expressed using a device link when

 * running in DT mode, or the probe order may be reversed, resulting in a

 * resource reservation conflict on the memory window that the efifb

 * framebuffer steals from the PCIe host bridge.

	/*

	 * If there's no PCI graphics controller backing the efifb, we are

	 * done here.

 SPDX-License-Identifier: GPL-2.0-only

  <-------17------>

  <-----------26----------->

 saturate

 SPDX-License-Identifier: GPL-2.0

/*

 * EFI capsule support.

 *

 * Copyright 2013 Intel Corporation; author Matt Fleming

/*

 * capsule_mutex serialises access to both capsule_pending and

 * efi_reset_type and stop_capsules.

/**

 * efi_capsule_pending - has a capsule been passed to the firmware?

 * @reset_type: store the type of EFI reset if capsule is pending

 *

 * To ensure that the registered capsule is processed correctly by the

 * firmware we need to perform a specific type of reset. If a capsule is

 * pending return the reset type in @reset_type.

 *

 * This function will race with callers of efi_capsule_update(), for

 * example, calling this function while somebody else is in

 * efi_capsule_update() but hasn't reached efi_capsue_update_locked()

 * will miss the updates to capsule_pending and efi_reset_type after

 * efi_capsule_update_locked() completes.

 *

 * A non-racy use is from platform reboot code because we use

 * system_state to ensure no capsules can be sent to the firmware once

 * we're at SYSTEM_RESTART. See efi_capsule_update_locked().

/*

 * Whitelist of EFI capsule flags that we support.

 *

 * We do not handle EFI_CAPSULE_INITIATE_RESET because that would

 * require us to prepare the kernel for reboot. Refuse to load any

 * capsules with that flag and any other flags that we do not know how

 * to handle.

/**

 * efi_capsule_supported - does the firmware support the capsule?

 * @guid: vendor guid of capsule

 * @flags: capsule flags

 * @size: size of capsule data

 * @reset: the reset type required for this capsule

 *

 * Check whether a capsule with @flags is supported by the firmware

 * and that @size doesn't exceed the maximum size for a capsule.

 *

 * No attempt is made to check @reset against the reset type required

 * by any pending capsules because of the races involved.

/*

 * Every scatter gather list (block descriptor) page must end with a

 * continuation pointer. The last continuation pointer of the last

 * page must be zero to mark the end of the chain.

/*

 * How many scatter gather list (block descriptor) pages do we need

 * to map @count pages?

/**

 * efi_capsule_update_locked - pass a single capsule to the firmware

 * @capsule: capsule to send to the firmware

 * @sg_pages: array of scatter gather (block descriptor) pages

 * @reset: the reset type required for @capsule

 *

 * Since this function must be called under capsule_mutex check

 * whether efi_reset_type will conflict with @reset, and atomically

 * set it and capsule_pending if a capsule was successfully sent to

 * the firmware.

 *

 * We also check to see if the system is about to restart, and if so,

 * abort. This avoids races between efi_capsule_update() and

 * efi_capsule_pending().

	/*

	 * If someone has already registered a capsule that requires a

	 * different reset type, we're out of luck and must abort.

	/*

	 * If the system is getting ready to restart it may have

	 * called efi_capsule_pending() to make decisions (such as

	 * whether to force an EFI reboot), and we're racing against

	 * that call. Abort in that case.

/**

 * efi_capsule_update - send a capsule to the firmware

 * @capsule: capsule to send to firmware

 * @pages: an array of capsule data pages

 *

 * Build a scatter gather list with EFI capsule block descriptors to

 * map the capsule described by @capsule with its data in @pages and

 * send it to the firmware via the UpdateCapsule() runtime service.

 *

 * @capsule must be a virtual mapping of the complete capsule update in the

 * kernel address space, as the capsule can be consumed immediately.

 * A capsule_header_t that describes the entire contents of the capsule

 * must be at the start of the first data page.

 *

 * Even though this function will validate that the firmware supports

 * the capsule guid, users will likely want to check that

 * efi_capsule_supported() returns true before calling this function

 * because it makes it easier to print helpful error messages.

 *

 * If the capsule is successfully submitted to the firmware, any

 * subsequent calls to efi_capsule_pending() will return true. @pages

 * must not be released or modified if this function returns

 * successfully.

 *

 * Callers must be prepared for this function to fail, which can

 * happen if we raced with system reboot or if there is already a

 * pending capsule that has a reset type that conflicts with the one

 * required by @capsule. Do NOT use efi_capsule_pending() to detect

 * this conflict since that would be racy. Instead, submit the capsule

 * to efi_capsule_update() and check the return value.

 *

 * Return 0 on success, a converted EFI status code on failure.

 Continuation pointer */

		/*

		 * At runtime, the firmware has no way to find out where the

		 * sglist elements are mapped, if they are mapped in the first

		 * place. Therefore, on architectures that can only perform

		 * cache maintenance by virtual address, the firmware is unable

		 * to perform this maintenance, and so it is up to the OS to do

		 * it instead.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2017 Google, Inc.

 *     Thiebaud Weksteen <tweek@google.com>

/*

 * Reserve the memory associated with the TPM Event Log configuration table.

		/*

		 * We can't calculate the size of the final events without the

		 * first entry in the TPM log, so bail here.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Originally from efivars.c

 *

 * Copyright (C) 2001,2003,2004 Dell <Matt_Domsch@dell.com>

 * Copyright (C) 2004 Intel Corporation <matthew.e.tolentino@intel.com>

 Private pointer to registered efivars */

/*

 * efivars_lock protects three things:

 * 1) efivarfs_list and efivars_sysfs_list

 * 2) ->ops calls

 * 3) (un)registration of __efivars

	/*

	 * If we're here then either node->length pointed past the end

	 * of the buffer or we reached the end of the buffer without

	 * finding a device path end node.

 An array of 16-bit integers */

 Either "Boot" or "Driver" followed by four digits of hex */

 Reject it if there's 4 digits of hex and then further content */

 A valid entry must be at least 8 bytes */

	/*

	 * There's no stored length for the description, so it has to be

	 * found by hand

 Each boot entry must have a descriptor */

	/*

	 * If the sum of the length of the description, the claimed filepath

	 * length and the original header are greater than the length of the

	 * variable, it's malformed

	/*

	 * And, finally, check the filepath

 A single 16-bit integer */

/*

 * This is the list of variables we need to validate, as well as the

 * whitelist for what we think is safe not to default to immutable.

 *

 * If it has a validate() method that's not NULL, it'll go into the

 * validation routine.  If not, it is assumed valid, but still used for

 * whitelisting.

 *

 * Note that it's sorted by {vendor,name}, but globbed names must come after

 * any other name with the same prefix.

/*

 * Check if @var_name matches the pattern given in @match_name.

 *

 * @var_name: an array of @len non-NUL characters.

 * @match_name: a NUL-terminated pattern string, optionally ending in "*". A

 *              final "*" character matches any trailing characters @var_name,

 *              including the case when there are none left in @var_name.

 * @match: on output, the number of non-wildcard characters in @match_name

 *         that @var_name matches, regardless of the return value.

 * @return: whether @var_name fully matches @match_name.

 Wildcard in @match_name means we've matched. */

 @match_name has ended. Has @var_name too? */

			/*

			 * We've reached a non-wildcard char in @match_name.

			 * Continue only if there's an identical character in

			 * @var_name.

	/*

	 * Check if our variable is in the validated variables list

	/*

	 * If it's in our list, it is removable.

/*

 * Returns the size of variable_name, in bytes, including the

 * terminating NULL character, or variable_name_size if no NULL

 * character is found among the first variable_name_size bytes.

	/*

	 * The variable name is, by definition, a NULL-terminated

	 * string, so make absolutely sure that variable_name_size is

	 * the value we expect it to be. If not, return the real size.

/*

 * Print a warning when duplicate EFI variables are encountered and

 * disable the sysfs workqueue since the firmware is buggy.

/**

 * efivar_init - build the initial list of EFI variables

 * @func: callback function to invoke for every variable

 * @data: function-specific data to pass to @func

 * @duplicates: error if we encounter duplicates on @head?

 * @head: initialised head of variable list

 *

 * Get every EFI variable from the firmware and invoke @func. @func

 * should call efivar_entry_add() to build the list of variables.

 *

 * Returns 0 on success, or a kernel error code on failure.

	/*

	 * Per EFI spec, the maximum storage allocated for both

	 * the variable name and variable data is 1024 bytes.

			/*

			 * Some firmware implementations return the

			 * same variable name on multiple calls to

			 * get_next_variable(). Terminate the loop

			 * immediately as there is no guarantee that

			 * we'll ever see a different variable name,

			 * and may end up looping here forever.

/**

 * efivar_entry_add - add entry to variable list

 * @entry: entry to add to list

 * @head: list head

 *

 * Returns 0 on success, or a kernel error code on failure.

/**

 * efivar_entry_remove - remove entry from variable list

 * @entry: entry to remove from list

 *

 * Returns 0 on success, or a kernel error code on failure.

/*

 * efivar_entry_list_del_unlock - remove entry from variable list

 * @entry: entry to remove

 *

 * Remove @entry from the variable list and release the list lock.

 *

 * NOTE: slightly weird locking semantics here - we expect to be

 * called with the efivars lock already held, and we release it before

 * returning. This is because this function is usually called after

 * set_variable() while the lock is still held.

/**

 * __efivar_entry_delete - delete an EFI variable

 * @entry: entry containing EFI variable to delete

 *

 * Delete the variable from the firmware but leave @entry on the

 * variable list.

 *

 * This function differs from efivar_entry_delete() because it does

 * not remove @entry from the variable list. Also, it is safe to be

 * called from within a efivar_entry_iter_begin() and

 * efivar_entry_iter_end() region, unlike efivar_entry_delete().

 *

 * Returns 0 on success, or a converted EFI status code if

 * set_variable() fails.

/**

 * efivar_entry_delete - delete variable and remove entry from list

 * @entry: entry containing variable to delete

 *

 * Delete the variable from the firmware and remove @entry from the

 * variable list. It is the caller's responsibility to free @entry

 * once we return.

 *

 * Returns 0 on success, -EINTR if we can't grab the semaphore,

 * converted EFI status code if set_variable() fails.

/**

 * efivar_entry_set - call set_variable()

 * @entry: entry containing the EFI variable to write

 * @attributes: variable attributes

 * @size: size of @data buffer

 * @data: buffer containing variable data

 * @head: head of variable list

 *

 * Calls set_variable() for an EFI variable. If creating a new EFI

 * variable, this function is usually followed by efivar_entry_add().

 *

 * Before writing the variable, the remaining EFI variable storage

 * space is checked to ensure there is enough room available.

 *

 * If @head is not NULL a lookup is performed to determine whether

 * the entry is already on the list.

 *

 * Returns 0 on success, -EINTR if we can't grab the semaphore,

 * -EEXIST if a lookup is performed and the entry already exists on

 * the list, or a converted EFI status code if set_variable() fails.

/*

 * efivar_entry_set_nonblocking - call set_variable_nonblocking()

 *

 * This function is guaranteed to not block and is suitable for calling

 * from crash/panic handlers.

 *

 * Crucially, this function will not block if it cannot acquire

 * efivars_lock. Instead, it returns -EBUSY.

/**

 * efivar_entry_set_safe - call set_variable() if enough space in firmware

 * @name: buffer containing the variable name

 * @vendor: variable vendor guid

 * @attributes: variable attributes

 * @block: can we block in this context?

 * @size: size of @data buffer

 * @data: buffer containing variable data

 *

 * Ensures there is enough free storage in the firmware for this variable, and

 * if so, calls set_variable(). If creating a new EFI variable, this function

 * is usually followed by efivar_entry_add().

 *

 * Returns 0 on success, -ENOSPC if the firmware does not have enough

 * space for set_variable() to succeed, or a converted EFI status code

 * if set_variable() fails.

	/*

	 * If the EFI variable backend provides a non-blocking

	 * ->set_variable() operation and we're in a context where we

	 * cannot block, then we need to use it to avoid live-locks,

	 * since the implication is that the regular ->set_variable()

	 * will block.

	 *

	 * If no ->set_variable_nonblocking() is provided then

	 * ->set_variable() is assumed to be non-blocking.

/**

 * efivar_entry_find - search for an entry

 * @name: the EFI variable name

 * @guid: the EFI variable vendor's guid

 * @head: head of the variable list

 * @remove: should we remove the entry from the list?

 *

 * Search for an entry on the variable list that has the EFI variable

 * name @name and vendor guid @guid. If an entry is found on the list

 * and @remove is true, the entry is removed from the list.

 *

 * The caller MUST call efivar_entry_iter_begin() and

 * efivar_entry_iter_end() before and after the invocation of this

 * function, respectively.

 *

 * Returns the entry if found on the list, %NULL otherwise.

			/*

			 * The entry will be deleted

			 * after scanning is completed.

/**

 * efivar_entry_size - obtain the size of a variable

 * @entry: entry for this variable

 * @size: location to store the variable's size

/**

 * __efivar_entry_get - call get_variable()

 * @entry: read data for this variable

 * @attributes: variable attributes

 * @size: size of @data buffer

 * @data: buffer to store variable data

 *

 * The caller MUST call efivar_entry_iter_begin() and

 * efivar_entry_iter_end() before and after the invocation of this

 * function, respectively.

/**

 * efivar_entry_get - call get_variable()

 * @entry: read data for this variable

 * @attributes: variable attributes

 * @size: size of @data buffer

 * @data: buffer to store variable data

/**

 * efivar_entry_set_get_size - call set_variable() and get new size (atomic)

 * @entry: entry containing variable to set and get

 * @attributes: attributes of variable to be written

 * @size: size of data buffer

 * @data: buffer containing data to write

 * @set: did the set_variable() call succeed?

 *

 * This is a pretty special (complex) function. See efivarfs_file_write().

 *

 * Atomically call set_variable() for @entry and if the call is

 * successful, return the new size of the variable from get_variable()

 * in @size. The success of set_variable() is indicated by @set.

 *

 * Returns 0 on success, -EINVAL if the variable data is invalid,

 * -ENOSPC if the firmware does not have enough available space, or a

 * converted EFI status code if either of set_variable() or

 * get_variable() fail.

 *

 * If the EFI variable does not exist when calling set_variable()

 * (EFI_NOT_FOUND), @entry is removed from the variable list.

	/*

	 * The lock here protects the get_variable call, the conditional

	 * set_variable call, and removal of the variable from the efivars

	 * list (in the case of an authenticated delete).

	/*

	 * Ensure that the available space hasn't shrunk below the safe level

	/*

	 * Writing to the variable may have caused a change in size (which

	 * could either be an append or an overwrite), or the variable to be

	 * deleted. Perform a GetVariable() so we can tell what actually

	 * happened.

/**

 * efivar_entry_iter_begin - begin iterating the variable list

 *

 * Lock the variable list to prevent entry insertion and removal until

 * efivar_entry_iter_end() is called. This function is usually used in

 * conjunction with __efivar_entry_iter() or efivar_entry_iter().

/**

 * efivar_entry_iter_end - finish iterating the variable list

 *

 * Unlock the variable list and allow modifications to the list again.

/**

 * __efivar_entry_iter - iterate over variable list

 * @func: callback function

 * @head: head of the variable list

 * @data: function-specific data to pass to callback

 * @prev: entry to begin iterating from

 *

 * Iterate over the list of EFI variables and call @func with every

 * entry on the list. It is safe for @func to remove entries in the

 * list via efivar_entry_delete().

 *

 * You MUST call efivar_entry_iter_begin() before this function, and

 * efivar_entry_iter_end() afterwards.

 *

 * It is possible to begin iteration from an arbitrary entry within

 * the list by passing @prev. @prev is updated on return to point to

 * the last entry passed to @func. To begin iterating from the

 * beginning of the list @prev must be %NULL.

 *

 * The restrictions for @func are the same as documented for

 * efivar_entry_iter().

/**

 * efivar_entry_iter - iterate over variable list

 * @func: callback function

 * @head: head of variable list

 * @data: function-specific data to pass to callback

 *

 * Iterate over the list of EFI variables and call @func with every

 * entry on the list. It is safe for @func to remove entries in the

 * list via efivar_entry_delete() while iterating.

 *

 * Some notes for the callback function:

 *  - a non-zero return value indicates an error and terminates the loop

 *  - @func is called from atomic context

/**

 * efivars_kobject - get the kobject for the registered efivars

 *

 * If efivars_register() has not been called we return NULL,

 * otherwise return the kobject used at registration time.

/**

 * efivars_register - register an efivars

 * @efivars: efivars to register

 * @ops: efivars operations

 * @kobject: @efivars-specific kobject

 *

 * Only a single efivars can be registered at any time.

/**

 * efivars_unregister - unregister an efivars

 * @efivars: efivars to unregister

 *

 * The caller must have already removed every entry from the list,

 * failure to do so is an error.

 SPDX-License-Identifier: GPL-2.0

/*

 * linux/drivers/efi/runtime-map.c

 * Copyright (C) 2013 Red Hat, Inc., Dave Young <dyoung@redhat.com>

 kobject for each entry */

/*

 * These are default attributes that are added for every memmap entry.

 SPDX-License-Identifier: GPL-2.0

/*

 * mokvar-table.c

 *

 * Copyright (c) 2020 Red Hat

 * Author: Lenny Szubowicz <lszubowi@redhat.com>

 *

 * This module contains the kernel support for the Linux EFI Machine

 * Owner Key (MOK) variable configuration table, which is identified by

 * the LINUX_EFI_MOK_VARIABLE_TABLE_GUID.

 *

 * This EFI configuration table provides a more robust alternative to

 * EFI volatile variables by which an EFI boot loader can pass the

 * contents of the Machine Owner Key (MOK) certificate stores to the

 * kernel during boot. If both the EFI MOK config table and corresponding

 * EFI MOK variables are present, the table should be considered as

 * more authoritative.

 *

 * This module includes code that validates and maps the EFI MOK table,

 * if it's presence was detected very early in boot.

 *

 * Kernel interface routines are provided to walk through all the

 * entries in the MOK config table or to search for a specific named

 * entry.

 *

 * The contents of the individual named MOK config table entries are

 * made available to user space via read-only sysfs binary files under:

 *

 * /sys/firmware/efi/mok-variables/

 *

/*

 * The LINUX_EFI_MOK_VARIABLE_TABLE_GUID config table is a packed

 * sequence of struct efi_mokvar_table_entry, one for each named

 * MOK variable. The sequence is terminated by an entry with a

 * completely NULL name and 0 data size.

 *

 * efi_mokvar_table_size is set to the computed size of the

 * MOK config table by efi_mokvar_table_init(). This will be

 * non-zero if and only if the table if present and has been

 * validated by efi_mokvar_table_init().

/*

 * efi_mokvar_table_va is the kernel virtual address at which the

 * EFI MOK config table has been mapped by efi_mokvar_sysfs_init().

/*

 * Each /sys/firmware/efi/mok-variables/ sysfs file is represented by

 * an instance of struct efi_mokvar_sysfs_attr on efi_mokvar_sysfs_list.

 * bin_attr.private points to the associated EFI MOK config table entry.

 *

 * This list is created during boot and then remains unchanged.

 * So no synchronization is currently required to walk the list.

/*

 * efi_mokvar_table_init() - Early boot validation of EFI MOK config table

 *

 * If present, validate and compute the size of the EFI MOK variable

 * configuration table. This table may be provided by an EFI boot loader

 * as an alternative to ordinary EFI variables, due to platform-dependent

 * limitations. The memory occupied by this table is marked as reserved.

 *

 * This routine must be called before efi_free_boot_services() in order

 * to guarantee that it can mark the table as reserved.

 *

 * Implicit inputs:

 * efi.mokvar_table:	Physical address of EFI MOK variable config table

 *			or special value that indicates no such table.

 *

 * Implicit outputs:

 * efi_mokvar_table_size: Computed size of EFI MOK variable config table.

 *			The table is considered present and valid if this

 *			is non-zero.

	/*

	 * The EFI MOK config table must fit within a single EFI memory

	 * descriptor range.

	/*

	 * Validate the MOK config table. Since there is no table header

	 * from which we could get the total size of the MOK config table,

	 * we compute the total size as we validate each variably sized

	 * entry, remapping as necessary.

			/*

			 * Map a little more than the fixed size entry

			 * header, anticipating some data. It's safe to

			 * do so as long as we stay within current memory

			 * descriptor.

 Check for last sentinel entry */

 Sanity check that the name is null terminated */

 Advance to the next entry */

/*

 * efi_mokvar_entry_next() - Get next entry in the EFI MOK config table

 *

 * mokvar_entry:	Pointer to current EFI MOK config table entry

 *			or null. Null indicates get first entry.

 *			Passed by reference. This is updated to the

 *			same value as the return value.

 *

 * Returns:		Pointer to next EFI MOK config table entry

 *			or null, if there are no more entries.

 *			Same value is returned in the mokvar_entry

 *			parameter.

 *

 * This routine depends on the EFI MOK config table being entirely

 * mapped with it's starting virtual address in efi_mokvar_table_va.

/*

 * efi_mokvar_entry_find() - Find EFI MOK config entry by name

 *

 * name:	Name of the entry to look for.

 *

 * Returns:	Pointer to EFI MOK config table entry if found;

 *		null otherwise.

 *

 * This routine depends on the EFI MOK config table being entirely

 * mapped with it's starting virtual address in efi_mokvar_table_va.

/*

 * efi_mokvar_sysfs_read() - sysfs binary file read routine

 *

 * Returns:	Count of bytes read.

 *

 * Copy EFI MOK config table entry data for this mokvar sysfs binary file

 * to the supplied buffer, starting at the specified offset into mokvar table

 * entry data, for the specified count bytes. The copy is limited by the

 * amount of data in this mokvar config table entry.

/*

 * efi_mokvar_sysfs_init() - Map EFI MOK config table and create sysfs

 *

 * Map the EFI MOK variable config table for run-time use by the kernel

 * and create the sysfs entries in /sys/firmware/efi/mok-variables/

 *

 * This routine just returns if a valid EFI MOK variable config table

 * was not found earlier during boot.

 *

 * This routine must be called during a "middle" initcall phase, i.e.

 * after efi_mokvar_table_init() but before UEFI certs are loaded

 * during late init.

 *

 * Implicit inputs:

 * efi.mokvar_table:	Physical address of EFI MOK variable config table

 *			or special value that indicates no such table.

 *

 * efi_mokvar_table_size: Computed size of EFI MOK variable config table.

 *			The table is considered present and valid if this

 *			is non-zero.

 *

 * Implicit outputs:

 * efi_mokvar_table_va:	Start virtual address of the EFI MOK config table.

 SPDX-License-Identifier: GPL-2.0

/*

 * Export Runtime Configuration Interface Table Version 2 (RCI2)

 * to sysfs

 *

 * Copyright (C) 2019 Dell Inc

 * by Narendra K <Narendra.K@dell.com>

 *

 * System firmware advertises the address of the RCI2 Table via

 * an EFI Configuration Table entry. This code retrieves the RCI2

 * table from the address and exports it to sysfs as a binary

 * attribute 'rci2' under /sys/firmware/efi/tables directory.

 SPDX-License-Identifier: GPL-2.0

/*

 * UEFI Common Platform Error Record (CPER) support

 *

 * Copyright (C) 2017, The Linux Foundation. All rights reserved.

 If the type is unknown, bail. */

	/*

	 * Vendor type errors have error information values that are vendor

	 * specific.

 The rest of the fields are specific to bus errors */

 SPDX-License-Identifier: GPL-2.0

/*

 * Support for extracting embedded firmware for peripherals from EFI code,

 *

 * Copyright (c) 2018 Hans de Goede <hdegoede@redhat.com>

 Exported for use by lib/test_firmware.c only */

/*

 * Note the efi_check_for_embedded_firmwares() code currently makes the

 * following 2 assumptions. This may needs to be revisited if embedded firmware

 * is found where this is not true:

 * 1) The firmware is only found in EFI_BOOT_SERVICES_CODE memory segments

 * 2) The firmware always starts at an offset which is a multiple of 8 bytes

		/*

		 * In some drivers the struct driver_data contains may contain

		 * other driver specific data after the fw_desc struct; and

		 * the fw_desc struct itself may be empty, skip these.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2013 Intel Corporation; author Matt Fleming

/*

 * EFI earlycon needs to use early_memremap() to map the framebuffer.

 * But early_memremap() is not usable for 'earlycon=efifb keep_bootcon',

 * memremap() should be used instead. memremap() will be available after

 * paging_init() which is earlier than initcall callbacks. Thus adding this

 * early initcall function early_efi_map_fb() to map the whole EFI framebuffer.

 bail if there is no bootconsole or it has been disabled already */

 unmap the bootconsole fb unless keep_bootcon has left it enabled */

	/*

	 * efi_earlycon_write_char() implicitly assumes a framebuffer with

	 * 32 bits per pixel.

 SPDX-License-Identifier: GPL-2.0

/*

 * UEFI Common Platform Error Record (CPER) support

 *

 * Copyright (C) 2010, Intel Corp.

 *	Author: Huang Ying <ying.huang@intel.com>

 *

 * CPER is the format used to describe platform hardware error by

 * various tables, such as ERST, BERT and HEST etc.

 *

 * For more information about CPER, please refer to Appendix N of UEFI

 * Specification version 2.4.

/*

 * CPER record ID need to be unique even after reboot, because record

 * ID is used as index for ERST storage, while CPER records from

 * multiple boot may co-exist in ERST.

		/*

		 * This code is unlikely to still be needed in year 2106,

		 * but just in case, let's use a few more bits for timestamps

		 * after y2038 to be sure they keep increasing monotonically

		 * for the next few hundred years...

/*

 * cper_print_bits - print strings for set bits

 * @pfx: prefix for each line, including log level and prefix string

 * @bits: bit mask

 * @strs: string array, indexed by bit position

 * @strs_size: size of the string array: @strs

 *

 * For each set bit in @bits, print the corresponding string in @strs.

 * If the output length is longer than 80, multiple line will be

 * printed, with @pfx is printed at the beginning of each line.

 Don't trust UEFI 2.1/2.2 structure with bad validation bits */

 Fatal errors call __ghes_panic() before AER handler prints this */

 Record Type based on UEFI 2.7 */

	/*

	 * The FW error record may contain trailing data beyond the

	 * structure defined by the specification. As the fields

	 * defined (and hence the offset of any trailing data) vary

	 * with the revision, set the offset to account for this

	 * variation.

 record_identifier_guid not defined */

 record_identifier not defined */

 The minimal FW Error Record contains 16 bytes */

 SPDX-License-Identifier: GPL-2.0

/*

 * Extensible Firmware Interface

 *

 * Based on Extensible Firmware Interface Specification version 2.4

 *

 * Copyright (C) 2013 - 2015 Linaro Ltd.

/*

 * Translate a EFI virtual address into a physical address: this is necessary,

 * as some data members of the EFI system table are virtually remapped after

 * SetVirtualAddressMap() has been called.

 no virtual mapping has been installed by the stub */

 dummycon on ARM needs non-zero values for columns/lines */

/*

 * Return true for regions that can be used as System RAM.

		/*

		 * Special purpose memory is 'soft reserved', which means it

		 * is set aside initially, but can be hotplugged back in or

		 * be assigned to the dax driver after boot.

		/*

		 * According to the spec, these regions are no longer reserved

		 * after calling ExitBootServices(). However, we can only use

		 * them as System RAM if they can be mapped writeback cacheable.

	/*

	 * Discard memblocks discovered so far: if there are any at this

	 * point, they originate from memory nodes in the DT, and UEFI

	 * uses its own memory map instead.

 keep ACPI reclaim memory intact for kexec etc. */

 Grab UEFI information placed in FDT by stub */

		/*

		* If we are booting via UEFI, the UEFI memory map is the only

		* description of memory we have, so there is little point in

		* proceeding if we cannot access it.

 ARM does not permit early mappings to persist across paging_init() */

 SPDX-License-Identifier: GPL-2.0

/*

 * efibc: control EFI bootloaders which obey LoaderEntryOneShot var

 * Copyright (c) 2013-2016, Intel Corporation.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2016 Linaro Ltd. <ard.biesheuvel@linaro.org>

/*

 * Reserve the memory associated with the Memory Attributes configuration

 * table, if it exists.

/*

 * Returns a copy @out of the UEFI memory descriptor @in if it is covered

 * entirely by a UEFI memory map entry with matching attributes. The virtual

 * address of @out is set according to the matching entry that was found.

		/*

		 * Since arm64 may execute with page sizes of up to 64 KB, the

		 * UEFI spec mandates that RuntimeServices memory regions must

		 * be 64 KB aligned. We need to validate this here since we will

		 * not be able to tighten permissions on such regions without

		 * affecting adjacent regions.

 no virtual mapping has been installed by the stub */

		/*

		 * This entry covers the start of @in, check whether

		 * it covers the end as well.

/*

 * To be called after the EFI page tables have been populated. If a memory

 * attributes table is available, its contents will be used to update the

 * mappings with tightened permissions as described by the table.

 * This requires the UEFI memory map to have already been populated with

 * virtual addresses.

	/*

	 * We need the EFI memory map to be setup so we can use it to

	 * lookup the virtual addresses of all entries in the  of EFI

	 * Memory Attributes table. If it isn't available, this

	 * function should not be called.

 SPDX-License-Identifier: GPL-2.0

/*

 * fake_mem.c

 *

 * Copyright (C) 2015 FUJITSU LIMITED

 * Author: Taku Izumi <izumi.taku@jp.fujitsu.com>

 *

 * This code introduces new boot option named "efi_fake_mem"

 * By specifying this parameter, you can add arbitrary attribute to

 * specific memory range by updating original (firmware provided) EFI

 * memmap.

 count up the number of EFI memory descriptor */

 allocate memory for new EFI memmap */

 create new EFI memmap */

 swap into new EFI memmap */

 print new EFI memmap */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * runtime-wrappers.c - Runtime Services function call wrappers

 *

 * Implementation summary:

 * -----------------------

 * 1. When user/kernel thread requests to execute efi_runtime_service(),

 * enqueue work to efi_rts_wq.

 * 2. Caller thread waits for completion until the work is finished

 * because it's dependent on the return status and execution of

 * efi_runtime_service().

 * For instance, get_variable() and get_next_variable().

 *

 * Copyright (C) 2014 Linaro Ltd. <ard.biesheuvel@linaro.org>

 *

 * Split off from arch/x86/platform/efi/efi.c

 *

 * Copyright (C) 1999 VA Linux Systems

 * Copyright (C) 1999 Walt Drummond <drummond@valinux.com>

 * Copyright (C) 1999-2002 Hewlett-Packard Co.

 * Copyright (C) 2005-2008 Intel Co.

 * Copyright (C) 2013 SuSE Labs

/*

 * Wrap around the new efi_call_virt_generic() macros so that the

 * code doesn't get too cluttered:

/*

 * efi_queue_work:	Queue efi_runtime_service() and wait until it's done

 * @rts:		efi_runtime_service() function identifier

 * @rts_arg<1-5>:	efi_runtime_service() function arguments

 *

 * Accesses to efi_runtime_services() are serialized by a binary

 * semaphore (efi_runtime_lock) and caller waits until the work is

 * finished, hence _only_ one work is queued at a time and the caller

 * thread waits for completion.

	/*								\

	 * queue_work() returns 0 if work was already on queue,         \

	 * _ideally_ this should never happen.                          \

/*

 * According to section 7.1 of the UEFI spec, Runtime Services are not fully

 * reentrant, and there are particular combinations of calls that need to be

 * serialized. (source: UEFI Specification v2.4A)

 *

 * Table 31. Rules for Reentry Into Runtime Services

 * +------------------------------------+-------------------------------+

 * | If previous call is busy in	| Forbidden to call		|

 * +------------------------------------+-------------------------------+

 * | Any				| SetVirtualAddressMap()	|

 * +------------------------------------+-------------------------------+

 * | ConvertPointer()			| ConvertPointer()		|

 * +------------------------------------+-------------------------------+

 * | SetVariable()			| ResetSystem()			|

 * | UpdateCapsule()			|				|

 * | SetTime()				|				|

 * | SetWakeupTime()			|				|

 * | GetNextHighMonotonicCount()	|				|

 * +------------------------------------+-------------------------------+

 * | GetVariable()			| GetVariable()			|

 * | GetNextVariableName()		| GetNextVariableName()		|

 * | SetVariable()			| SetVariable()			|

 * | QueryVariableInfo()		| QueryVariableInfo()		|

 * | UpdateCapsule()			| UpdateCapsule()		|

 * | QueryCapsuleCapabilities()		| QueryCapsuleCapabilities()	|

 * | GetNextHighMonotonicCount()	| GetNextHighMonotonicCount()	|

 * +------------------------------------+-------------------------------+

 * | GetTime()				| GetTime()			|

 * | SetTime()				| SetTime()			|

 * | GetWakeupTime()			| GetWakeupTime()		|

 * | SetWakeupTime()			| SetWakeupTime()		|

 * +------------------------------------+-------------------------------+

 *

 * Due to the fact that the EFI pstore may write to the variable store in

 * interrupt context, we need to use a lock for at least the groups that

 * contain SetVariable() and QueryVariableInfo(). That leaves little else, as

 * none of the remaining functions are actually ever called at runtime.

 * So let's just use a single lock to serialize all Runtime Services calls.

/*

 * Expose the EFI runtime lock to the UV platform

/*

 * Calls the appropriate efi_runtime_service() with the appropriate

 * arguments.

 *

 * Semantics followed by efi_call_rts() to understand efi_runtime_work:

 * 1. If argument was a pointer, recast it from void pointer to original

 * pointer type.

 * 2. If argument was a value, recast it from void pointer to original

 * pointer type and dereference it.

		/*

		 * Ideally, we should never reach here because a caller of this

		 * function should have put the right efi_runtime_service()

		 * function identifier into efi_rts_work->efi_rts_id

 SPDX-License-Identifier: GPL-2.0

/*

 * Extensible Firmware Interface

 *

 * Copyright (C) 2020 Western Digital Corporation or its affiliates.

 *

 * Based on Extensible Firmware Interface Specification version 2.4

 * Adapted from drivers/firmware/efi/arm-runtime.c

 *

/*

 * Enable the UEFI Runtime Services if all prerequisites are in place, i.e.,

 * non-early mapping of the UEFI system table and virtual mappings for all

 * EFI_MEMORY_RUNTIME regions.

 Set up runtime services function pointers */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Originally from efivars.c,

 *

 * Copyright (C) 2001,2003,2004 Dell <Matt_Domsch@dell.com>

 * Copyright (C) 2004 Intel Corporation <matthew.e.tolentino@intel.com>

 *

 * This code takes all variables accessible from EFI runtime and

 *  exports them via sysfs

/*

 * Prototype for sysfs creation function

	/*

	 * If only updating the variable data, then the name

	 * and guid should remain the same

/*

 * We allow each variable to be edited via rewriting the

 * entire efi variable structure.

/*

 * Generic read/write functions that call the specific functions of

 * the attributes...

 It's dead Jim.... */

/**

 * efivar_create_sysfs_entry - create a new entry in sysfs

 * @new_var: efivar entry to create

 *

 * Returns 0 on success, negative error code on failure

	/*

	 * Length of the variable bytes in UTF8, plus the '-' separator,

	 * plus the GUID, plus trailing NUL

	/* This is ugly, but necessary to separate one vendor's

 new_var */

 del_var */

 Register */

 Remove all entries and destroy */

 No efivars has been registered yet */

 SPDX-License-Identifier: GPL-2.0+

		/*

		 * Check if an old format,

		 * which doesn't support holding

		 * multiple logs, remains.

/**

 * efi_pstore_scan_sysfs_enter

 * @pos: scanning entry

 * @next: next entry

 * @head: list head

/**

 * __efi_pstore_scan_sysfs_exit

 * @entry: deleting entry

 * @turn_off_scanning: Check if a scanning flag should be turned off

/**

 * efi_pstore_scan_sysfs_exit

 * @pos: scanning entry

 * @next: next entry

 * @head: list head

 * @stop: a flag checking if scanning will stop

/**

 * efi_pstore_sysfs_entry_iter

 *

 * @record: pstore record to pass to callback

 *

 * You MUST call efivar_entry_iter_begin() before this function, and

 * efivar_entry_iter_end() afterwards.

 *

/**

 * efi_pstore_read

 *

 * This function returns a size of NVRAM entry logged via efi_pstore_write().

 * The meaning and behavior of efi_pstore/pstore are as below.

 *

 * size > 0: Got data of an entry logged via efi_pstore_write() successfully,

 *           and pstore filesystem will continue reading subsequent entries.

 * size == 0: Entry was not logged via efi_pstore_write(),

 *            and efi_pstore driver will continue reading subsequent entries.

 * size < 0: Failed to get data of entry logging via efi_pstore_write(),

 *           and pstore will stop reading entry.

 Since we copy the entire length of name, make sure it is wiped. */

/*

 * Clean up an entry with the same name

		/*

		 * Skip deletion because this entry will be deleted

		 * after scanning is completed.

 found */

 Add new sysfs entries */

 SPDX-License-Identifier: GPL-2.0

/*

 * Common EFI memory map functions.

/**

 * efi_memmap_alloc - Allocate memory for the EFI memory map

 * @num_entries: Number of entries in the allocated map.

 * @data: efi memmap installation parameters

 *

 * Depending on whether mm_init() has already been invoked or not,

 * either memblock or "normal" page allocation is used.

 *

 * Returns the physical address of the allocated memory map on

 * success, zero on failure.

 Expect allocation parameters are zero initialized */

/**

 * __efi_memmap_init - Common code for mapping the EFI memory map

 * @data: EFI memory map data

 *

 * This function takes care of figuring out which function to use to

 * map the EFI memory map in efi.memmap based on how far into the boot

 * we are.

 *

 * During bootup EFI_MEMMAP_LATE in data->flags should be clear since we

 * only have access to the early_memremap*() functions as the vmalloc

 * space isn't setup.  Once the kernel is fully booted we can fallback

 * to the more robust memremap*() API.

 *

 * Returns zero on success, a negative error code on failure.

 NOP if data->flags & (EFI_MEMMAP_MEMBLOCK | EFI_MEMMAP_SLAB) == 0 */

/**

 * efi_memmap_init_early - Map the EFI memory map data structure

 * @data: EFI memory map data

 *

 * Use early_memremap() to map the passed in EFI memory map and assign

 * it to efi.memmap.

 Cannot go backwards */

/**

 * efi_memmap_init_late - Map efi.memmap with memremap()

 * @phys_addr: Physical address of the new EFI memory map

 * @size: Size in bytes of the new EFI memory map

 *

 * Setup a mapping of the EFI memory map using ioremap_cache(). This

 * function should only be called once the vmalloc space has been

 * setup and is therefore not suitable for calling during early EFI

 * initialise, e.g. in efi_init(). Additionally, it expects

 * efi_memmap_init_early() to have already been called.

 *

 * The reason there are two EFI memmap initialisation

 * (efi_memmap_init_early() and this late version) is because the

 * early EFI memmap should be explicitly unmapped once EFI

 * initialisation is complete as the fixmap space used to map the EFI

 * memmap (via early_memremap()) is a scarce resource.

 *

 * This late mapping is intended to persist for the duration of

 * runtime so that things like efi_mem_desc_lookup() and

 * efi_mem_attributes() always work.

 *

 * Returns zero on success, a negative error code on failure.

 Did we forget to unmap the early EFI memmap? */

 Were we already called? */

	/*

	 * It makes no sense to allow callers to register different

	 * values for the following fields. Copy them out of the

	 * existing early EFI memmap.

/**

 * efi_memmap_install - Install a new EFI memory map in efi.memmap

 * @ctx: map allocation parameters (address, size, flags)

 *

 * Unlike efi_memmap_init_*(), this function does not allow the caller

 * to switch from early to late mappings. It simply uses the existing

 * mapping function and installs the new memmap.

 *

 * Returns zero on success, a negative error code on failure.

/**

 * efi_memmap_split_count - Count number of additional EFI memmap entries

 * @md: EFI memory descriptor to split

 * @range: Address range (start, end) to split around

 *

 * Returns the number of additional EFI memmap entries required to

 * accomodate @range.

 modifying range */

 split into 2 parts */

 split into 3 parts */

 split into 2 parts */

/**

 * efi_memmap_insert - Insert a memory region in an EFI memmap

 * @old_memmap: The existing EFI memory map structure

 * @buf: Address of buffer to store new map

 * @mem: Memory map entry to insert

 *

 * It is suggested that you call efi_memmap_split_count() first

 * to see how large @buf needs to be.

 modifying range */

	/*

	 * The EFI memory map deals with regions in EFI_PAGE_SIZE

	 * units. Ensure that the region described by 'mem' is aligned

	 * correctly.

 copy original EFI memory descriptor */

 first part */

 latter part */

 first part */

 middle part */

 last part */

 first part */

 latter part */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2014 Intel Corporation; author Matt Fleming

 * Copyright (c) 2014 Red Hat, Inc., Mark Salter <msalter@redhat.com>

	/*

	 * If a quirk forced an EFI reset mode, always use that.

	/*

	 * The above call should not return, if it does fall back to

	 * the original power off method (typically ACPI poweroff).

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2012 Intel Corporation

 * Author: Josh Triplett <josh@joshtriplett.org>

 *

 * Based on the bgrt driver:

 * Copyright 2012 Red Hat, Inc <mjg@redhat.com>

 * Author: Matthew Garrett

	/*

	 * Only version 1 is defined but some older laptops (seen on Lenovo

	 * Ivy Bridge models) have a correct version 1 BGRT table with the

	 * version set to 0, so we accept version 0 and 1.

 SPDX-License-Identifier: GPL-2.0

/*

 * EFI capsule loader driver.

 *

 * Copyright 2015 Intel Corporation

/**

 * efi_free_all_buff_pages - free all previous allocated buffer pages

 * @cap_info: pointer to current instance of capsule_info structure

 *

 *	In addition to freeing buffer pages, it flags NO_FURTHER_WRITE_ACTION

 *	to cease processing data in subsequent write(2) calls until close(2)

 *	is called.

 Check if the capsule binary supported */

/**

 * efi_capsule_setup_info - obtain the efi capsule header in the binary and

 *			    setup capsule_info structure

 * @cap_info: pointer to current instance of capsule_info structure

 * @kbuff: a mapped first page buffer pointer

 * @hdr_bytes: the total received number of bytes for efi header

 *

 * Platforms with non-standard capsule update mechanisms can override

 * this __weak function so they can perform any required capsule

 * image munging. See quark_quirk_function() for an example.

 Only process data block that is larger than efi header size */

/**

 * efi_capsule_submit_update - invoke the efi_capsule_update API once binary

 *			       upload done

 * @cap_info: pointer to current instance of capsule_info structure

	/*

	 * cap_info->capsule may have been assigned already by a quirk

	 * handler, so only overwrite it if it is NULL

 Indicate capsule binary uploading is done */

/**

 * efi_capsule_write - store the capsule binary and pass it to

 *		       efi_capsule_update() API

 * @file: file pointer

 * @buff: buffer pointer

 * @count: number of bytes in @buff

 * @offp: not used

 *

 *	Expectation:

 *	- A user space tool should start at the beginning of capsule binary and

 *	  pass data in sequentially.

 *	- Users should close and re-open this file note in order to upload more

 *	  capsules.

 *	- After an error returned, user should close the file and restart the

 *	  operation for the next try otherwise -EIO will be returned until the

 *	  file is closed.

 *	- An EFI capsule header must be located at the beginning of capsule

 *	  binary file and passed in as first block data of write operation.

 Return error while NO_FURTHER_WRITE_ACTION is flagged */

 Only alloc a new page when previous page is full */

 Copy capsule binary data from user space to kernel space buffer */

 Setup capsule binary info structure */

 Submit the full binary to efi_capsule_update() API */

/**

 * efi_capsule_flush - called by file close or file flush

 * @file: file pointer

 * @id: not used

 *

 *	If a capsule is being partially uploaded then calling this function

 *	will be treated as upload termination and will free those completed

 *	buffer pages and -ECANCELED will be returned.

/**

 * efi_capsule_release - called by file close

 * @inode: not used

 * @file: file pointer

 *

 *	We will not free successfully submitted pages since efi update

 *	requires data to be maintained across system reboot.

/**

 * efi_capsule_open - called by file open

 * @inode: not used

 * @file: file pointer

 *

 *	Will allocate each capsule_info memory for each file open call.

 *	This provided the capability to support multiple file open feature

 *	where user is not needed to wait for others to finish in order to

 *	upload their capsule binary.

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2018, Advanced Micro Devices, Inc.

/*

 * We don't need a "CPER_IA" prefix since these are all locally defined.

 * This will save us a lot of line space.

	/*

	 * The MS Check structure varies a lot from the others, so use a

	 * separate function for decoding.

		/*

		 * CACHE has more operation types than TLB or BUS, though the

		 * name and the order are the same.

 MSRs are 8 bytes wide. */

 SPDX-License-Identifier: GPL-2.0

 Copyright(c) 2019 Intel Corporation. All rights reserved. */

	/*

	 * The late efi_fake_mem() call can handle all requests if

	 * EFI_MEMORY_SP support is disabled.

	/*

	 * Given that efi_fake_memmap() needs to perform memblock

	 * allocations it needs to run after e820__memblock_setup().

	 * However, if efi_fake_mem specifies EFI_MEMORY_SP for a given

	 * address range that potentially needs to mark the memory as

	 * reserved prior to e820__memblock_setup(). Update e820

	 * directly if EFI_MEMORY_SP is specified for an

	 * EFI_CONVENTIONAL_MEMORY descriptor.

 fake range overlaps descriptor */;

			/*

			 * Trim the boundary of the e820 update to the

			 * descriptor in case the fake range overlaps

			 * !EFI_CONVENTIONAL_MEMORY

			/*

			 * Ensure each efi_fake_mem instance results in

			 * a unique e820 resource

 SPDX-License-Identifier: GPL-2.0

/*

 * Extensible Firmware Interface

 *

 * Based on Extensible Firmware Interface Specification version 2.4

 *

 * Copyright (C) 2013, 2014 Linaro Ltd.

/*

 * Enable the UEFI Runtime Services if all prerequisites are in place, i.e.,

 * non-early mapping of the UEFI system table and virtual mappings for all

 * EFI_MEMORY_RUNTIME regions.

 Set up runtime services function pointers */

	/*

	 * On arm64/ARM, DMI depends on UEFI, and dmi_setup() needs to

	 * be called early because dmi_id_init(), which is an arch_initcall

	 * itself, depends on dmi_scan_machine() having been called already.

 SPDX-License-Identifier: GPL-2.0+

/*

 * esrt.c

 *

 * This module exports EFI System Resource Table (ESRT) entries into userspace

 * through the sysfs file system. The ESRT provides a read-only catalog of

 * system components for which the system accepts firmware upgrades via UEFI's

 * "Capsule Update" feature. This module allows userland utilities to evaluate

 * what firmware updates can be applied to this system, and potentially arrange

 * for those updates to occur.

 *

 * Data is currently found below /sys/firmware/efi/esrt/...

/*

 * _count and _version are what they seem like.  _max is actually just

 * accounting info for the firmware when creating the table; it should never

 * have been exposed to us.  To wit, the spec says:

 * The maximum number of resource array entries that can be within the

 * table without reallocating the table, must not be zero.

 * Since there's no guidance about what that means in terms of memory layout,

 * it means nothing to us.

 global list of esre_entry. */

 entry attribute */

 Don't tell normal users what firmware versions we've got... */

 Generic ESRT Entry ("ESRE") support. */

 support for displaying ESRT fields at the top level */

/*

 * remap the table, validate it, mark it reserved and unmap it.

	/*

	 * The format doesn't really give us any boundary to test here,

	 * so I'm making up 128 as the max number of individually updatable

	 * components we support.

	 * 128 should be pretty excessive, but there's still some chance

	 * somebody will do that someday and we'll need to raise this.

	/*

	 * We know it can't be larger than N * sizeof() here, and N is limited

	 * by the previous test to a small number, so there's no overflow.

/*

MODULE_AUTHOR("Peter Jones <pjones@redhat.com>");

MODULE_DESCRIPTION("EFI System Resource Table support");

MODULE_LICENSE("GPL");

 SPDX-License-Identifier: GPL-2.0+

/*

 * EFI Test Driver for Runtime Services

 *

 * Copyright(C) 2012-2016 Canonical Ltd.

 *

 * This driver exports EFI runtime services interfaces into userspace, which

 * allow to use and test UEFI runtime services provided by firmware.

 *

/*

 * Count the bytes in 'str', including the terminating NULL.

 *

 * Note this function returns the number of *bytes*, not the number of

 * ucs2 characters.

 Include terminating NULL */

 Can't read userspace memory for size */

 Can't read userspace memory for size */

/*

 * Allocate a buffer and copy a ucs2 string from user space into it.

/*

 * Count the bytes in 'str', including the terminating NULL.

 *

 * Just a wrap for user_ucs2_strsize

/*

 * Calculate the required buffer allocation size and copy a ucs2 string

 * from user space into it.

 *

 * This function differs from copy_ucs2_from_user_len() because it

 * calculates the size of the buffer to allocate by taking the length of

 * the string 'src'.

 *

 * If a non-zero value is returned, the caller MUST NOT access 'dst'.

 *

 * It is the caller's responsibility to free 'dst'.

/*

 * Copy a ucs2 string to a user buffer.

 *

 * This function is a simple wrapper around copy_to_user() that does

 * nothing if 'src' is NULL, which is useful for reducing the amount of

 * NULL checking the caller has to do.

 *

 * 'len' specifies the number of bytes to copy.

		/*

		 * The name_size may be smaller than the real buffer size where

		 * variable name located in some use cases. The most typical

		 * case is passing a 0 to get the required buffer size for the

		 * 1st time call. So we need to copy the content from user

		 * space for at least the string size of variable name, or else

		 * the name passed to UEFI may not be terminated as we expected.

		/*

		 * We cannot dereference qcaps.capsule_header_array directly to

		 * obtain the address of the capsule as it resides in the

		 * user space

	/*

	 * nothing special to do here

	 * We do accept multiple open files at the same time as we

	 * synchronize on the per call operation.

/*

 *	The various file operations we support.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * EFI stub implementation that is shared by arm and arm64 architectures.

 * This should be #included by the EFI stub implementation files.

 *

 * Copyright (C) 2013,2014 Linaro Limited

 *     Roy Franz <roy.franz@linaro.org

 * Copyright (C) 2013 Red Hat, Inc.

 *     Mark Salter <msalter@redhat.com>

/*

 * This is the base address at which to start allocating virtual memory ranges

 * for UEFI Runtime Services.

 *

 * For ARM/ARM64:

 * This is in the low TTBR0 range so that we can use

 * any allocation we choose, and eliminate the risk of a conflict after kexec.

 * The value chosen is the largest non-zero power of 2 suitable for this purpose

 * both on 32-bit and 64-bit ARM CPUs, to maximize the likelihood that it can

 * be mapped efficiently.

 * Since 32-bit ARM could potentially execute with a 1G/3G user/kernel split,

 * map everything below 1 GB. (512 MB is a reasonable upper bound for the

 * entire footprint of the UEFI runtime services memory regions)

 *

 * For RISC-V:

 * There is no specific reason for which, this address (512MB) can't be used

 * EFI runtime virtual address for RISC-V. It also helps to use EFI runtime

 * services on both RV32/RV64. Keep the same runtime virtual address for RISC-V

 * as well to minimize the code churn.

/*

 * EFI entry point for the arm/arm64 EFI stubs.  This is the entrypoint

 * that is described in the PE/COFF header.  Most of the code is the same

 * for both archictectures, with the arch-specific code provided in the

 * handle_kernel_image() function.

 addr/point and size pairs for memory management*/

 Original DTB */

 Check if we were booted by the EFI firmware */

	/*

	 * Get a handle to the loaded image protocol.  This is used to get

	 * information about the running image, such as size and the command

	 * line.

	/*

	 * Get the command line from EFI, using the LOADED_IMAGE

	 * protocol. We are going to copy the command line into the

	 * device tree, so this can be allocated anywhere.

 Ask the firmware to clear memory on unclean shutdown */

	/*

	 * Unauthenticated device tree data is a security hazard, so ignore

	 * 'dtb=' unless UEFI Secure Boot is disabled.  We assume that secure

	 * boot is enabled if we can't determine its state.

 Look for a device tree configuration table entry. */

	/*

	 * If the NX PE data feature is enabled in the properties table, we

	 * should take care not to create a virtual mapping that changes the

	 * relative placement of runtime services code and data regions, as

	 * they may belong to the same PE/COFF executable image in memory.

	 * The easiest way to achieve that is to simply use a 1:1 mapping.

 force efi_novamap if SetVirtualAddressMap() is unsupported */

 hibernation expects the runtime regions to stay in the same place */

		/*

		 * Randomize the base of the UEFI runtime services region.

		 * Preserve the 2 MB alignment of the region by taking a

		 * shift of 21 bit positions into account when scaling

		 * the headroom value using a 32-bit random value.

 not reached */

/*

 * efi_get_virtmap() - create a virtual mapping for the EFI memory map

 *

 * This function populates the virt_addr fields of all memory region descriptors

 * in @memory_map whose EFI_MEMORY_RUNTIME attribute is set. Those descriptors

 * are also copied to @runtime_map, and their total count is returned in @count.

		/*

		 * Make the mapping compatible with 64k pages: this allows

		 * a 4k page size kernel to kexec a 64k page size kernel and

		 * vice versa.

			/*

			 * Avoid wasting memory on PTEs by choosing a virtual

			 * base that is compatible with section mappings if this

			 * region has the appropriate size and physical

			 * alignment. (Sections are 2 MB on 4k granule kernels)

 SPDX-License-Identifier: GPL-2.0

/**

 * efi_low_alloc_above() - allocate pages at or above given address

 * @size:	size of the memory area to allocate

 * @align:	minimum alignment of the allocated memory area. It should

 *		a power of two.

 * @addr:	on exit the address of the allocated memory

 * @min:	minimum address to used for the memory allocation

 *

 * Allocate at the lowest possible address that is not below @min as

 * EFI_LOADER_DATA. The allocated pages are aligned according to @align but at

 * least EFI_ALLOC_ALIGN. The first allocated page will not below the address

 * given by @min.

 *

 * Return:	status code

	/*

	 * Enforce minimum alignment that EFI or Linux requires when

	 * requesting a specific address.  We are doing page-based (or

	 * larger) allocations, and both the address and size must meet

	 * alignment constraints.

/**

 * efi_relocate_kernel() - copy memory area

 * @image_addr:		pointer to address of memory area to copy

 * @image_size:		size of memory area to copy

 * @alloc_size:		minimum size of memory to allocate, must be greater or

 *			equal to image_size

 * @preferred_addr:	preferred target address

 * @alignment:		minimum alignment of the allocated memory area. It

 *			should be a power of two.

 * @min_addr:		minimum target address

 *

 * Copy a memory area to a newly allocated memory area aligned according

 * to @alignment but at least EFI_ALLOC_ALIGN. If the preferred address

 * is not available, the allocated address will not be below @min_addr.

 * On exit, @image_addr is updated to the target copy address that was used.

 *

 * This function is used to copy the Linux kernel verbatim. It does not apply

 * any relocation changes.

 *

 * Return:		status code

	/*

	 * The EFI firmware loader could have placed the kernel image

	 * anywhere in memory, but the kernel has restrictions on the

	 * max physical address it can run at.  Some architectures

	 * also have a preferred address, so first try to relocate

	 * to the preferred address.  If that fails, allocate as low

	 * as possible while respecting the required alignment.

	/*

	 * If preferred address allocation failed allocate as low as

	 * possible.

	/*

	 * We know source/dest won't overlap since both memory ranges

	 * have been allocated by UEFI, so we can safely use memcpy.

 Return the new address of the relocated image. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2020 Western Digital Corporation or its affiliates.

/*

 * RISC-V requires the kernel image to placed 2 MB aligned base for 64 bit and

 * 4MB for 32 bit.

	/*

	 * Jump to real kernel here with following constraints.

	 * 1. MMU should be disabled.

	 * 2. a0 should contain hartid

	 * 3. a1 should DT address

	/*

	 * RISC-V kernel maps PAGE_OFFSET virtual address to the same physical

	 * address where kernel is booted. That's why kernel should boot from

	 * as low as possible to avoid wastage of memory. Currently, dram_base

	 * is occupied by the firmware. So the preferred address for kernel to

	 * boot is next aligned address. If preferred address is not available,

	 * relocate_kernel will fall back to efi_low_alloc_above to allocate

	 * lowest possible memory region as long as the address and size meets

	 * the alignment constraints.

 SPDX-License-Identifier: GPL-2.0

/*

 * FDT related Helper functions used by the EFI stub on multiple

 * architectures. This should be #included by the EFI stub

 * implementation files.

 *

 * Copyright 2013 Linaro Limited; author Roy Franz

 Set the #address-cells and #size-cells values for an empty tree */

 Do some checks on provided FDT, if it exists: */

		/*

		 * We don't get the size of the FDT if we get if from a

		 * configuration table:

			/*

			 * Any failure from the following function is

			 * non-critical:

	/*

	 * Delete all memory reserve map entries. When booting via UEFI,

	 * kernel will use the UEFI memory map to find reserved regions.

 'node' is an error code when negative: */

 Set initrd address/end in device tree, if present */

 Add FDT entries for EFI runtime services in chosen node. */

 placeholder */

 placeholder */

 Shrink the FDT back to its minimum size: */

	/*

	 * Update the memory map with virtual addresses. The function will also

	 * populate @runtime_map with copies of just the EFI_MEMORY_RUNTIME

	 * entries so that we can pass it straight to SetVirtualAddressMap()

/*

 * Allocate memory for a new FDT, then add EFI, commandline, and

 * initrd related fields to the FDT.  This routine increases the

 * FDT allocation size until the allocated memory is large

 * enough.  EFI allocations are in EFI_PAGE_SIZE granules,

 * which are fixed at 4K bytes, so in most cases the first

 * allocation should succeed.

 * EFI boot services are exited at the end of this function.

 * There must be no allocations between the get_memory_map()

 * call and the exit_boot_services() call, so the exiting of

 * boot services is very tightly tied to the creation of the FDT

 * with the final memory map in it.

	/*

	 * Get a copy of the current memory map that we will use to prepare

	 * the input for SetVirtualAddressMap(). We don't have to worry about

	 * subsequent allocations adding entries, since they could not affect

	 * the number of EFI_MEMORY_RUNTIME regions.

	/*

	 * Now that we have done our final memory allocation (and free)

	 * we can get the memory map key needed for exit_boot_services().

 Install the new virtual address map */

		/*

		 * We are beyond the point of no return here, so if the call to

		 * SetVirtualAddressMap() failed, we need to signal that to the

		 * incoming kernel but proceed normally otherwise.

			/*

			 * Set the virtual address field of all

			 * EFI_MEMORY_RUNTIME entries to 0. This will signal

			 * the incoming kernel that no virtual translation has

			 * been installed.

 SPDX-License-Identifier: GPL-2.0

/**

 * efi_allocate_pages_aligned() - Allocate memory pages

 * @size:	minimum number of bytes to allocate

 * @addr:	On return the address of the first allocated page. The first

 *		allocated page has alignment EFI_ALLOC_ALIGN which is an

 *		architecture dependent multiple of the page size.

 * @max:	the address that the last allocated memory page shall not

 *		exceed

 * @align:	minimum alignment of the base of the allocation

 *

 * Allocate pages as EFI_LOADER_DATA. The allocated pages are aligned according

 * to @align, which should be >= EFI_ALLOC_ALIGN. The last allocated page will

 * not exceed the address given by @max.

 *

 * Return:	status code

 SPDX-License-Identifier: GPL-2.0

/*

 * TPM handling.

 *

 * Copyright (C) 2016 CoreOS, Inc

 * Copyright (C) 2017 Google, Inc.

 *     Matthew Garrett <mjg59@google.com>

 *     Thiebaud Weksteen <tweek@google.com>

/*

 * Enable reboot attack mitigation. This requests that the firmware clear the

 * RAM on next reboot before proceeding with boot, ensuring that any secrets

 * are cleared. If userland has ensured that all secrets have been removed

 * from RAM before reboot it can simply reset this variable.

	/*

	 * We populate the EFI table even if the logs are empty.

		/*

		 * get_event_log only returns the address of the last entry.

		 * We need to calculate its size to deduce the full size of

		 * the logs.

			/*

			 * The TCG2 log format has variable length entries,

			 * and the information to decode the hash algorithms

			 * back into a size is contained in the first entry -

			 * pass a pointer to the final entry (to calculate its

			 * size) and the first entry (so we know how long each

			 * digest is)

 Allocate space for the logs and copy them. */

	/*

	 * Figure out whether any events have already been logged to the

	 * final events structure, and if so how much space they take up

 SPDX-License-Identifier: GPL-2.0

/*

 * Secure boot handling.

 *

 * Copyright (C) 2013,2014 Linaro Limited

 *     Roy Franz <roy.franz@linaro.org

 * Copyright (C) 2013 Red Hat, Inc.

 *     Mark Salter <msalter@redhat.com>

 SHIM variables */

/*

 * Determine whether we're in secure boot mode.

	/*

	 * See if a user has put the shim into insecure mode. If so, and if the

	 * variable doesn't have the runtime attribute set, we might as well

	 * honor that.

 If it fails, we don't care why. Default to secure */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2016 Linaro Ltd;  <ard.biesheuvel@linaro.org>

/*

 * Return the number of slots covered by this entry, i.e., the number of

 * addresses it covers that are suitably aligned and supply enough room

 * for the allocation.

/*

 * The UEFI memory descriptors have a virtual address field that is only used

 * when installing the virtual mapping using SetVirtualAddressMap(). Since it

 * is unused here, we can reuse it to keep track of each descriptor's slot

 * count.

 count the suitable slots in each memory map entry */

 find a random number between 0 and total_slots */

	/*

	 * target_slot is now a value in the range [0, total_slots), and so

	 * it corresponds with exactly one of the suitable slots we recorded

	 * when iterating over the memory map the first time around.

	 *

	 * So iterate over the memory map again, subtracting the number of

	 * slots of each entry at each iteration, until we have found the entry

	 * that covers our chosen slot. Use the residual value of target_slot

	 * to calculate the randomly chosen address, and allocate it directly

	 * using EFI_ALLOCATE_ADDRESS.

 SPDX-License-Identifier: GPL-2.0

/* -----------------------------------------------------------------------

 *

 *   Copyright 2011 Intel Corporation; author Matt Fleming

 *

 UEFI spec guarantees that the set bits are contiguous */

 PIXEL_BGR_RESERVED_8BIT_PER_COLOR */ {

		/*

		 * Systems that use the UEFI Console Splitter may

		 * provide multiple GOP devices, not all of which are

		 * backed by real hardware. The workaround is to search

		 * for a GOP implementing the ConOut protocol, and if

		 * one isn't found, to just fall back to the first GOP.

		 *

		 * Once we've found a GOP supporting ConOut,

		 * don't bother looking any further.

 Did we find any GOPs? */

 Change mode if requested */

 EFI framebuffer */

/*

 * See if we have Graphics Output Protocol

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2016 Linaro Ltd;  <ard.biesheuvel@linaro.org>

/**

 * efi_get_random_bytes() - fill a buffer with random bytes

 * @size:	size of the buffer

 * @out:	caller allocated buffer to receive the random bytes

 *

 * The call will fail if either the firmware does not implement the

 * EFI_RNG_PROTOCOL or there are not enough random bytes available to fill

 * the buffer.

 *

 * Return:	status code

/**

 * efi_random_get_seed() - provide random seed as configuration table

 *

 * The EFI_RNG_PROTOCOL is used to read random bytes. These random bytes are

 * saved as a configuration table which can be used as entropy by the kernel

 * for the initialization of its pseudo random number generator.

 *

 * If the EFI_RNG_PROTOCOL is not available or there are not enough random bytes

 * available, the configuration table will not be installed and an error code

 * will be returned.

 *

 * Return:	status code

		/*

		 * Use whatever algorithm we have available if the raw algorithm

		 * is not implemented.

 SPDX-License-Identifier: GPL-2.0

/*

 * PCI-related functions used by the EFI stub on multiple

 * architectures.

 *

 * Copyright 2019 Google, LLC

		/*

		 * Disregard devices living on bus 0 - these are not behind a

		 * bridge so no point in disconnecting them from their drivers.

		/*

		 * Don't disconnect VGA controllers so we don't risk losing

		 * access to the framebuffer. Drivers for true PCIe graphics

		 * controllers that are behind a PCIe root port do not use

		 * DMA to implement the GOP framebuffer anyway [although they

		 * may use it in their implementation of Gop->Blt()], and so

		 * disabling DMA in the PCI bridge should not interfere with

		 * normal operation of the device.

 Disconnect this handle from all its drivers */

 Disable busmastering */

 SPDX-License-Identifier: GPL-2.0

/*

 * Helper functions used by the EFI stub on multiple

 * architectures. This should be #included by the EFI stub

 * implementation files.

 *

 * Copyright 2011 Intel Corporation; author Matt Fleming

/*

 * Some firmware implementations have problems reading files in one go.

 * A read chunk size of 1MB seems to work for most platforms.

 *

 * Unfortunately, reading files in chunks triggers *other* bugs on some

 * platforms, so we provide a way to disable this workaround, which can

 * be done by passing "efi=nochunk" on the EFI boot stub command line.

 *

 * If you experience issues with initrd images being corrupt it's worth

 * trying efi=nochunk, but chunking is enabled by default on x86 because

 * there are far more machines that require the workaround than those that

 * break with it enabled.

 Skip any leading slashes */

 Replace UNIX dir separators with EFI standard ones */

/*

 * Check the cmdline for a LILO-style file= arguments.

 *

 * We only support loading a file from the same filesystem as

 * the kernel image.

		/*

		 * Check whether the existing allocation can contain the next

		 * file. This condition will also trigger naturally during the

		 * first (and typically only) iteration of the loop, given that

		 * alloc_size == 0 in that case.

				/*

				 * This is not the first time we've gone

				 * around this loop, and so we are loading

				 * multiple files that need to be concatenated

				 * and returned in a single buffer.

 SPDX-License-Identifier: GPL-2.0

/*

 * Taken from:

 *  linux/lib/string.c

 *

 *  Copyright (C) 1991, 1992  Linus Torvalds

/**

 * strstr - Find the first substring in a %NUL terminated string

 * @s1: The string to be searched

 * @s2: The string to search for

/**

 * strncmp - Compare two length-limited strings

 * @cs: One string

 * @ct: Another string

 * @count: The maximum number of bytes to compare

 Works only for digits and letters, but small and fast */

/**

 * simple_strtoull - convert a string to an unsigned long long

 * @cp: The start of the string

 * @endp: A pointer to the end of the parsed string will be placed here

 * @base: The number base to use

 SPDX-License-Identifier: GPL-2.0

/*

 * Helper functions used by the EFI stub on multiple

 * architectures. This should be #included by the EFI stub

 * implementation files.

 *

 * Copyright 2011 Intel Corporation; author Matt Fleming

 For CONSOLE_LOGLEVEL_* */

/**

 * efi_char16_puts() - Write a UCS-2 encoded string to the console

 * @str:	UCS-2 encoded string

	/*

	 * The position of the most-significant 0 bit gives us the length of

	 * a multi-octet encoding.

	/*

	 * If the 0 bit is in position 8, this is a valid single-octet

	 * encoding. If the 0 bit is in position 7 or positions 1-3, the

	 * encoding is invalid.

	 * In either case, we just return the first octet.

 Get the bits from the first octet. */

 Trailing octets must have 10 in most significant bits. */

	/*

	 * Check for validity:

	 * - The character must be in the Unicode range.

	 * - It must not be a surrogate.

	 * - It must be encoded using the correct number of octets.

/**

 * efi_puts() - Write a UTF-8 encoded string to the console

 * @str:	UTF-8 encoded string

 Characters in plane 0 use a single word. */

			/*

			 * Characters in other planes encode into a surrogate

			 * pair.

/**

 * efi_printk() - Print a kernel message

 * @fmt:	format string

 *

 * The first letter of the format string is used to determine the logging level

 * of the message. If the level is less then the current EFI logging level, the

 * message is suppressed. The message will be truncated to 255 bytes.

 *

 * Return:	number of printed characters

		/*

		 * Use loglevel -1 for cases where we just want to print to

		 * the screen.

/**

 * efi_parse_options() - Parse EFI command line options

 * @cmdline:	kernel command line

 *

 * Parse the ASCII string @cmdline for EFI options, denoted by the efi=

 * option, e.g. efi=nochunk.

 *

 * It should be noted that efi= is parsed in two very different

 * environments, first in the early boot environment of the EFI boot

 * stub, and subsequently during the kernel boot.

 *

 * Return:	status code

/*

 * The EFI_LOAD_OPTION descriptor has the following layout:

 *	u32 Attributes;

 *	u16 FilePathListLength;

 *	u16 Description[];

 *	efi_device_path_protocol_t FilePathList[];

 *	u8 OptionalData[];

 *

 * This function validates and unpacks the variable-size data fields.

 Scan description. */

 Scan file_path_list. */

/*

 * At least some versions of Dell firmware pass the entire contents of the

 * Boot#### variable, i.e. the EFI_LOAD_OPTION descriptor, rather than just the

 * OptionalData field.

 *

 * Detect this case and extract OptionalData.

/*

 * Convert the unicode UEFI command line to ASCII to pass to kernel.

 * Size of memory allocated return in *cmd_line_len.

 * Returns NULL on error.

 UTF-8 bytes */

			/*

			 * Get the number of UTF-8 bytes corresponding to a

			 * UTF-16 character.

			 * The first part handles everything in the BMP.

			/*

			 * Add one more byte for valid surrogate pairs. Invalid

			 * surrogates will be replaced with 0xfffd and take up

			 * only 3 bytes.

				/*

				 * If the very last word is a high surrogate,

				 * we must ignore it since we can't access the

				 * low surrogate.

 NUL termination */

/**

 * efi_exit_boot_services() - Exit boot services

 * @handle:	handle of the exiting image

 * @map:	pointer to receive the memory map

 * @priv:	argument to be passed to @priv_func

 * @priv_func:	function to process the memory map before exiting boot services

 *

 * Handle calling ExitBootServices according to the requirements set out by the

 * spec.  Obtains the current memory map, and returns that info after calling

 * ExitBootServices.  The client must specify a function to perform any

 * processing of the memory map data prior to ExitBootServices.  A client

 * specific structure may be passed to the function via priv.  The client

 * function may be called multiple times.

 *

 * Return:	status code

		/*

		 * The memory map changed between efi_get_memory_map() and

		 * exit_boot_services().  Per the UEFI Spec v2.6, Section 6.4:

		 * EFI_BOOT_SERVICES.ExitBootServices we need to get the

		 * updated map, and try again.  The spec implies one retry

		 * should be sufficent, which is confirmed against the EDK2

		 * implementation.  Per the spec, we can only invoke

		 * get_memory_map() and exit_boot_services() - we cannot alloc

		 * so efi_get_memory_map() cannot be used, and we must reuse

		 * the buffer.  For all practical purposes, the headroom in the

		 * buffer should account for any changes in the map so the call

		 * to get_memory_map() is expected to succeed here.

 exit_boot_services() was called, thus cannot free */

 exit_boot_services() was called, thus cannot free */

 exit_boot_services() was called, thus cannot free */

/**

 * get_efi_config_table() - retrieve UEFI configuration table

 * @guid:	GUID of the configuration table to be retrieved

 * Return:	pointer to the configuration table or NULL

/*

 * The LINUX_EFI_INITRD_MEDIA_GUID vendor media device path below provides a way

 * for the firmware or bootloader to expose the initrd data directly to the stub

 * via the trivial LoadFile2 protocol, which is defined in the UEFI spec, and is

 * very easy to implement. It is a simple Linux initrd specific conduit between

 * kernel and firmware, allowing us to put the EFI stub (being part of the

 * kernel) in charge of where and when to load the initrd, while leaving it up

 * to the firmware to decide whether it needs to expose its filesystem hierarchy

 * via EFI protocols.

/**

 * efi_load_initrd_dev_path() - load the initrd from the Linux initrd device path

 * @load_addr:	pointer to store the address where the initrd was loaded

 * @load_size:	pointer to store the size of the loaded initrd

 * @max:	upper limit for the initrd memory allocation

 *

 * Return:

 * * %EFI_SUCCESS if the initrd was loaded successfully, in which

 *   case @load_addr and @load_size are assigned accordingly

 * * %EFI_NOT_FOUND if no LoadFile2 protocol exists on the initrd device path

 * * %EFI_INVALID_PARAMETER if load_addr == NULL or load_size == NULL

 * * %EFI_OUT_OF_RESOURCES if memory allocation failed

 * * %EFI_LOAD_ERROR in all other cases

/**

 * efi_load_initrd() - Load initial RAM disk

 * @image:	EFI loaded image protocol

 * @load_addr:	pointer to loaded initrd

 * @load_size:	size of loaded initrd

 * @soft_limit:	preferred address for loading the initrd

 * @hard_limit:	upper limit address for loading the initrd

 *

 * Return:	status code

/**

 * efi_wait_for_key() - Wait for key stroke

 * @usec:	number of microseconds to wait for key stroke

 * @key:	key entered

 *

 * Wait for up to @usec microseconds for a key stroke.

 *

 * Return:	status code, EFI_SUCCESS if key received

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2013, 2014 Linaro Ltd;  <roy.franz@linaro.org>

 *

 * This file implements the EFI boot stub for the arm64 kernel.

 * Adapted from ARM version by Mark Salter <msalter@redhat.com>

 UEFI mandates support for 4 KB granularity, no need to check */

/*

 * Distro versions of GRUB may ignore the BSS allocation entirely (i.e., fail

 * to provide space, and fail to zero it). Check for this condition by double

 * checking that the first and the last byte of the image are covered by the

 * same EFI memory map entry.

		/*

		 * Find the region that covers base, and return whether

		 * it covers base+size bytes.

	/*

	 * Although relocatable kernels can fix up the misalignment with

	 * respect to MIN_KIMG_ALIGN, the resulting virtual text addresses are

	 * subtly out of sync with those recorded in the vmlinux when kaslr is

	 * disabled but the image required relocation anyway. Therefore retain

	 * 2M alignment if KASLR was explicitly disabled, even if it was not

	 * going to be activated to begin with.

		/*

		 * If KASLR is enabled, and we have some randomness available,

		 * locate the kernel at a randomized offset in physical memory.

			/*

			 * Just execute from wherever we were loaded by the

			 * UEFI PE/COFF loader if the alignment is suitable.

 SPDX-License-Identifier: GPL-2.0-only

/* -----------------------------------------------------------------------

 *

 *   Copyright 2011 Intel Corporation; author Matt Fleming

 *

 Maximum physical address for 64-bit kernel with 4-level paging */

	/*

	 * Some firmware images contain EFI function pointers at the place where

	 * the romimage and romsize fields are supposed to be. Typically the EFI

	 * code is mapped at high addresses, translating to an unrealistically

	 * large romsize. The UEFI spec limits the size of option ROMs to 16

	 * MiB so we reject any ROMs over 16 MiB in size to catch this.

/*

 * There's no way to return an informative status from this function,

 * because any analysis (and printing of error messages) needs to be

 * done directly at the EFI function call-site.

 *

 * For example, EFI_INVALID_PARAMETER could indicate a bug or maybe we

 * just didn't find any PCI devices, but there's no way to tell outside

 * the context of the call.

/*

 * See if we have Universal Graphics Adapter (UGA) protocol

			/*

			 * Once we've found a UGA supporting PCIIO,

			 * don't bother looking any further.

 EFI framebuffer */

/*

 * Because the x86 boot code expects to be passed a boot_params we

 * need to create one ourselves (usually the bootloader would create

 * one for us).

 Check if we were booted by the EFI firmware */

 Copy the setup header from the second sector to boot_params */

	/*

	 * Fill out some of the header fields ourselves because the

	 * EFI firmware loader doesn't load the first sector.

 Convert unicode cmdline to ascii */

 not reached */

 Merge adjacent mappings */

 boot_params map full, switch to e820 extended */

 Only need the size of the mem map and size of each mem descriptor */

 Might as well exit boot services now */

 Historic? */

/*

 * On success, we return the address of startup_32, which has potentially been

 * relocated by efi_relocate_kernel.

 * On failure, we exit to the firmware via efi_exit instead of returning.

 Check if we were booted by the EFI firmware */

	/*

	 * If the kernel isn't already loaded at a suitable address,

	 * relocate it.

	 *

	 * It must be loaded above LOAD_PHYSICAL_ADDR.

	 *

	 * The maximum address for 64-bit is 1 << 46 for 4-level paging. This

	 * is defined as the macro MAXMEM, but unfortunately that is not a

	 * compile-time constant if 5-level paging is configured, so we instead

	 * define our own macro for use here.

	 *

	 * For 32-bit, the maximum address is complicated to figure out, for

	 * now use KERNEL_IMAGE_SIZE, which will be 512MiB, the same as what

	 * KASLR uses.

	 *

	 * Also relocate it if image_offset is zero, i.e. the kernel wasn't

	 * loaded by LoadImage, but rather by a bootloader that called the

	 * handover entry. The reason we must always relocate in this case is

	 * to handle the case of systemd-boot booting a unified kernel image,

	 * which is a PE executable that contains the bzImage and an initrd as

	 * COFF sections. The initrd section is placed after the bzImage

	 * without ensuring that there are at least init_size bytes available

	 * for the bzImage, and thus the compressed kernel's startup code may

	 * overwrite the initrd unless it is moved out of the way.

		/*

		 * Now that we've copied the kernel elsewhere, we no longer

		 * have a set up block before startup_32(), so reset image_offset

		 * to zero in case it was set earlier.

	/*

	 * At this point, an initrd may already have been loaded by the

	 * bootloader and passed via bootparams. We permit an initrd loaded

	 * from the LINUX_EFI_INITRD_MEDIA_GUID device path to supersede it.

	 *

	 * If the device path is not present, any command-line initrd=

	 * arguments will be processed only if image is not NULL, which will be

	 * the case only if we were loaded via the PE entry point.

	/*

	 * If the boot loader gave us a value for secure_boot then we use that,

	 * otherwise we ask the BIOS.

 Ask the firmware to clear memory on unclean shutdown */

 SPDX-License-Identifier: GPL-2.0-only

/* -*- linux-c -*- ------------------------------------------------------- *

 *

 *   Copyright (C) 1991, 1992 Linus Torvalds

 *   Copyright 2007 rPath, Inc. - All Rights Reserved

 *

/*

 * Oh, it's a waste of space, but oh-so-yummy for debugging.

/*

 * put_dec_full4 handles numbers in the range 0 <= r < 10000.

 * The multiplier 0xccd is round(2^15/10), and the approximation

 * r/10 == (r * 0xccd) >> 15 is exact for all r < 16389.

 put_dec is copied from lib/vsprintf.c with small modifications */

/*

 * Call put_dec_full4 on x % 10000, return x / 10000.

 * The approximation x/10000 == (x * 0x346DC5D7) >> 43

 * holds for all x < 1,128,869,999.  The largest value this

 * helper will ever be asked to convert is 1,125,520,955.

 * (second call in the put_dec code, assuming n is all-ones).

/* Based on code by Douglas W. Jones found at

 * <http://www.cs.uiowa.edu/~jones/bcd/decimal.html#sixtyfour>

 * (with permission from the author).

 * Performs no 64-bit division and hence should be fast on 32-bit machines.

 implicit "& 0xffff" */

 implicit "& 0xffff" */

	/* n = 2^48 d3 + 2^32 d2 + 2^16 d1 + d0

 strip off the extra 0's we printed */

	/*

	 * locase = 0 or 0x20. ORing digits or letters with 'locase'

	 * produces same digits or (maybe lowercased) letters

 we are called with base 8, 10 or 16, only, thus don't need "G..."  */

 "GHIJKLMNOPQRSTUVWXYZ"; */

 pad with zero */

 unsigned/signed long */

 show plus */

 space if plus */

 left justified */

 Must be 32 == 0x20 */

 0x */

 UTF-16 string */

 it's the next argument */

 First, get the length for a BMP character */

		/*

		 * If this is a high surrogate, and we're already at maxlen, we

		 * can't include the character if it's a valid surrogate pair.

		 * Avoid accessing one extra word just to check if it's valid

		 * or not.

 not a surrogate */

 invalid: low surrogate instead of high */

 invalid: missing low surrogate */

 valid surrogate pair */

 The maximum space required is to print a 64-bit number in octal */

 flags to number() */

 width of output field */

	int precision;		/* min. # of digits for integers; max

 'h', 'hh', 'l' or 'll' for integer fields */

	/*

	 * We want to pass our input va_list to helper functions by reference,

	 * but there's an annoying edge case. If va_list was originally passed

	 * to us by value, we could just pass &ap down to the helpers. This is

	 * the case on, for example, X86_32.

	 * However, on X86_64 (and possibly others), va_list is actually a

	 * size-1 array containing a structure. Our function parameter ap has

	 * decayed from T[1] to T*, and &ap has type T** rather than T(*)[1],

	 * which is what will be expected by a function taking a va_list *

	 * parameter.

	 * One standard way to solve this mess is by creating a copy in a local

	 * variable of type va_list and then passing a pointer to that local

	 * copy instead, which is what we do here.

 process flags */

 get field width */

 get the precision */

 get the conversion qualifier */

 integer number formats - set up the flags and "break" */

			/*

			 * Bail out if the conversion specifier is invalid.

			 * There's probably a typo in the format string and the

			 * remaining specifiers are unlikely to match up with

			 * the arguments.

 default precision is 1 */

 precision is minimum number of digits to print */

			/*

			 * For octal, a leading 0 is printed only if necessary,

			 * i.e. if it's not already there because of the

			 * precision.

			/*

			 * For hexadecimal, the leading 0x is skipped if the

			 * output is empty, i.e. both the number and the

			 * precision are 0.

		/*

		 * For zero padding, increase the precision to fill the field

		 * width.

 Calculate the padding necessary */

 Leading padding with ' ' */

 sign */

 0x/0X for hexadecimal */

 Zero padding and excess precision */

 Actual output */

 Number of trailing octets */

 Avoid writing partial character */

 Set high bits of leading octet */

 Write trailing octets in reverse order */

 Set low bits of leading octet */

 Trailing padding with ' ' */

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

/**

 * efi_get_memory_map() - get memory map

 * @map:	on return pointer to memory map

 *

 * Retrieve the UEFI memory map. The allocated memory leaves room for

 * up to EFI_MMAP_NR_SLACK_SLOTS additional memory map entries.

 *

 * Return:	status code

		/*

		 * Make sure there is some entries of headroom so that the

		 * buffer can be reused for a new map after allocations are

		 * no longer permitted.  Its unlikely that the map will grow to

		 * exceed this headroom once we are ready to trigger

		 * ExitBootServices()

/**

 * efi_allocate_pages() - Allocate memory pages

 * @size:	minimum number of bytes to allocate

 * @addr:	On return the address of the first allocated page. The first

 *		allocated page has alignment EFI_ALLOC_ALIGN which is an

 *		architecture dependent multiple of the page size.

 * @max:	the address that the last allocated memory page shall not

 *		exceed

 *

 * Allocate pages as EFI_LOADER_DATA. The allocated pages are aligned according

 * to EFI_ALLOC_ALIGN. The last allocated page will not exceed the address

 * given by @max.

 *

 * Return:	status code

/**

 * efi_free() - free memory pages

 * @size:	size of the memory area to free in bytes

 * @addr:	start of the memory area to free (must be EFI_PAGE_SIZE

 *		aligned)

 *

 * @size is rounded up to a multiple of EFI_ALLOC_ALIGN which is an

 * architecture specific multiple of EFI_PAGE_SIZE. So this function should

 * only be used to return pages allocated with efi_allocate_pages() or

 * efi_low_alloc_above().

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2013 Linaro Ltd;  <roy.franz@linaro.org>

 non-LPAE kernels can run anywhere */

 LPAE kernels need compatible hardware */

	/*

	 * Unlike on arm64, where we can directly fill out the screen_info

	 * structure from the stub, we need to allocate a buffer to hold

	 * its contents while we hand over to the kernel proper from the

	 * decompressor.

	/*

	 * Allocate space for the decompressed kernel as low as possible.

	 * The region should be 16 MiB aligned, but the first 'slack' bytes

	 * are not used by Linux, so we allow those to be occupied by the

	 * firmware.

		/*

		 * More than 'slack' bytes are already occupied at the base of

		 * the allocation, so we need to advance to the next 16 MiB block.

 now free the parts that we will not use */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cs_dsp.c  --  Cirrus Logic DSP firmware support

 *

 * Based on sound/soc/codecs/wm_adsp.c

 *

 * Copyright 2012 Wolfson Microelectronics plc

 * Copyright (C) 2015-2021 Cirrus Logic, Inc. and

 *                         Cirrus Logic International Semiconductor Ltd.

/*

 * ADSP1 Control 19

 DSP1_WDMA_BUFFER_LENGTH - [7:0] */

 DSP1_WDMA_BUFFER_LENGTH - [7:0] */

 DSP1_WDMA_BUFFER_LENGTH - [7:0] */

/*

 * ADSP1 Control 30

 DSP1_DBG_CLK_ENA */

 DSP1_DBG_CLK_ENA */

 DSP1_DBG_CLK_ENA */

 DSP1_DBG_CLK_ENA */

 DSP1_SYS_ENA */

 DSP1_SYS_ENA */

 DSP1_SYS_ENA */

 DSP1_SYS_ENA */

 DSP1_CORE_ENA */

 DSP1_CORE_ENA */

 DSP1_CORE_ENA */

 DSP1_CORE_ENA */

 DSP1_START */

 DSP1_START */

 DSP1_START */

 DSP1_START */

/*

 * ADSP1 Control 31

 CLK_SEL_ENA */

 CLK_SEL_ENA */

 CLK_SEL_ENA */

/*

 * ADSP2 Control

 DSP1_MEM_ENA */

 DSP1_MEM_ENA */

 DSP1_MEM_ENA */

 DSP1_MEM_ENA */

 DSP1_SYS_ENA */

 DSP1_SYS_ENA */

 DSP1_SYS_ENA */

 DSP1_SYS_ENA */

 DSP1_CORE_ENA */

 DSP1_CORE_ENA */

 DSP1_CORE_ENA */

 DSP1_CORE_ENA */

 DSP1_START */

 DSP1_START */

 DSP1_START */

 DSP1_START */

/*

 * ADSP2 clocking

 CLK_SEL_ENA */

 CLK_SEL_ENA */

 CLK_SEL_ENA */

/*

 * ADSP2V2 clocking

 CLK_SEL_ENA */

 CLK_SEL_ENA */

 CLK_SEL_ENA */

 DSP_RATE */

 DSP_RATE */

 DSP_RATE */

/*

 * ADSP2 Status 1

/*

 * ADSP2 Lock support

/*

 * Event control messages

/*

 * HALO system info

/*

 * HALO core

/*

 * HALO MPU banks

/*

 * HALO_AHBM_WINDOW_DEBUG_1

/*

 * HALO_CCM_CORE_CONTROL

/*

 * HALO_CORE_SOFT_RESET

/*

 * HALO_WDT_CONTROL

/*

 * HALO_MPU_?M_VIO_STATUS

/**

 * cs_dsp_mem_region_name() - Return a name string for a memory type

 * @type: the memory type to match

 *

 * Return: A const string identifying the memory region.

/**

 * cs_dsp_init_debugfs() - Create and populate DSP representation in debugfs

 * @dsp: pointer to DSP structure

 * @debugfs_root: pointer to debugfs directory in which to create this DSP

 *                representation

/**

 * cs_dsp_cleanup_debugfs() - Removes DSP representation from debugfs

 * @dsp: pointer to DSP structure

/**

 * cs_dsp_coeff_write_acked_control() - Sends event_id to the acked control

 * @ctl: pointer to acked coefficient control

 * @event_id: the value to write to the given acked control

 *

 * Once the value has been written to the control the function shall block

 * until the running firmware acknowledges the write or timeout is exceeded.

 *

 * Must be called with pwr_lock held.

 *

 * Return: Zero for success, a negative number on error.

	/*

	 * Poll for ack, we initially poll at ~1ms intervals for firmwares

	 * that respond quickly, then go to ~10ms polls. A firmware is unlikely

	 * to ack instantly so we do the first 1ms delay before reading the

	 * control to avoid a pointless bus transaction

/**

 * cs_dsp_coeff_write_ctrl() - Writes the given buffer to the given coefficient control

 * @ctl: pointer to coefficient control

 * @buf: the buffer to write to the given control

 * @len: the length of the buffer

 *

 * Must be called with pwr_lock held.

 *

 * Return: Zero for success, a negative number on error.

/**

 * cs_dsp_coeff_read_ctrl() - Reads the given coefficient control into the given buffer

 * @ctl: pointer to coefficient control

 * @buf: the buffer to store to the given control

 * @len: the length of the buffer

 *

 * Must be called with pwr_lock held.

 *

 * Return: Zero for success, a negative number on error.

		/*

		 * For readable controls populate the cache from the DSP memory.

		 * For non-readable controls the cache was zero-filled when

		 * created so we don't need to do anything.

 ignore */

/**

 * cs_dsp_get_ctl() - Finds a matching coefficient control

 * @dsp: pointer to DSP structure

 * @name: pointer to string to match with a control's subname

 * @type: the algorithm type to match

 * @alg: the algorithm id to match

 *

 * Find cs_dsp_coeff_ctl with input name as its subname

 *

 * Return: pointer to the control on success, NULL if not found

 Read the terminator first to validate the length */

 Convert length from DSP words to bytes */

/**

 * cs_dsp_find_alg_region() - Finds a matching algorithm region

 * @dsp: pointer to DSP structure

 * @type: the algorithm type to match

 * @id: the algorithm id to match

 *

 * Return: Pointer to matching algorithm region, or NULL if not found.

 Calculate offset and length in DSP words */

 Calculate offset and length in DSP words */

 Calculate offset and length in DSP words */

			/*

			 * Old files may use this for global

			 * coefficients.

/**

 * cs_dsp_adsp1_init() - Initialise a cs_dsp structure representing a ADSP1 device

 * @dsp: pointer to DSP structure

 *

 * Return: Zero for success, a negative number on error.

/**

 * cs_dsp_adsp1_power_up() - Load and start the named firmware

 * @dsp: pointer to DSP structure

 * @wmfw_firmware: the firmware to be sent

 * @wmfw_filename: file name of firmware to be sent

 * @coeff_firmware: the coefficient data to be sent

 * @coeff_filename: file name of coefficient to data be sent

 * @fw_name: the user-friendly firmware name

 *

 * Return: Zero for success, a negative number on error.

	/*

	 * For simplicity set the DSP clock rate to be the

	 * SYSCLK rate rather than making it configurable.

 Initialize caches for enabled and unset controls */

 Sync set controls */

 Start the core running */

/**

 * cs_dsp_adsp1_power_down() - Halts the DSP

 * @dsp: pointer to DSP structure

 Halt the core */

 Wait for the RAM to start, should be near instantaneous */

/**

 * cs_dsp_set_dspclk() - Applies the given frequency to the given cs_dsp

 * @dsp: pointer to DSP structure

 * @freq: clock rate to set

 *

 * This is only for use on ADSP2 cores.

 *

 * Return: Zero for success, a negative number on error.

/**

 * cs_dsp_power_up() - Downloads firmware to the DSP

 * @dsp: pointer to DSP structure

 * @wmfw_firmware: the firmware to be sent

 * @wmfw_filename: file name of firmware to be sent

 * @coeff_firmware: the coefficient data to be sent

 * @coeff_filename: file name of coefficient to data be sent

 * @fw_name: the user-friendly firmware name

 *

 * This function is used on ADSP2 and Halo DSP cores, it powers-up the DSP core

 * and downloads the firmware but does not start the firmware running. The

 * cs_dsp booted flag will be set once completed and if the core has a low-power

 * memory retention mode it will be put into this state after the firmware is

 * downloaded.

 *

 * Return: Zero for success, a negative number on error.

 Initialize caches for enabled and unset controls */

/**

 * cs_dsp_power_down() - Powers-down the DSP

 * @dsp: pointer to DSP structure

 *

 * cs_dsp_stop() must have been called before this function. The core will be

 * fully powered down and so the memory will not be retained.

/**

 * cs_dsp_run() - Starts the firmware running

 * @dsp: pointer to DSP structure

 *

 * cs_dsp_power_up() must have previously been called successfully.

 *

 * Return: Zero for success, a negative number on error.

 Sync set controls */

/**

 * cs_dsp_stop() - Stops the firmware

 * @dsp: pointer to DSP structure

 *

 * Memory will not be disabled so firmware will remain loaded.

 Tell the firmware to cleanup */

 Log firmware state, it can be useful for analysis */

 reset halo core with CORE_SOFT_RESET */

/**

 * cs_dsp_adsp2_init() - Initialise a cs_dsp structure representing a ADSP2 core

 * @dsp: pointer to DSP structure

 *

 * Return: Zero for success, a negative number on error.

		/*

		 * Disable the DSP memory by default when in reset for a small

		 * power saving.

/**

 * cs_dsp_halo_init() - Initialise a cs_dsp structure representing a HALO Core DSP

 * @dsp: pointer to DSP structure

 *

 * Return: Zero for success, a negative number on error.

/**

 * cs_dsp_remove() - Clean a cs_dsp before deletion

 * @dsp: pointer to DSP structure

/**

 * cs_dsp_read_raw_data_block() - Reads a block of data from DSP memory

 * @dsp: pointer to DSP structure

 * @mem_type: the type of DSP memory containing the data to be read

 * @mem_addr: the address of the data within the memory region

 * @num_words: the length of the data to read

 * @data: a buffer to store the fetched data

 *

 * If this is used to read unpacked 24-bit memory, each 24-bit DSP word will

 * occupy 32-bits in data (MSbyte will be 0). This padding can be removed using

 * cs_dsp_remove_padding()

 *

 * Return: Zero for success, a negative number on error.

/**

 * cs_dsp_read_data_word() - Reads a word from DSP memory

 * @dsp: pointer to DSP structure

 * @mem_type: the type of DSP memory containing the data to be read

 * @mem_addr: the address of the data within the memory region

 * @data: a buffer to store the fetched data

 *

 * Return: Zero for success, a negative number on error.

/**

 * cs_dsp_write_data_word() - Writes a word to DSP memory

 * @dsp: pointer to DSP structure

 * @mem_type: the type of DSP memory containing the data to be written

 * @mem_addr: the address of the data within the memory region

 * @data: the data to be written

 *

 * Return: Zero for success, a negative number on error.

/**

 * cs_dsp_remove_padding() - Convert unpacked words to packed bytes

 * @buf: buffer containing DSP words read from DSP memory

 * @nwords: number of words to convert

 *

 * DSP words from the register map have pad bytes and the data bytes

 * are in swapped order. This swaps to the native endian order and

 * strips the pad bytes.

/**

 * cs_dsp_adsp2_bus_error() - Handle a DSP bus error interrupt

 * @dsp: pointer to DSP structure

 *

 * The firmware and DSP state will be logged for future analysis.

/**

 * cs_dsp_halo_bus_error() - Handle a DSP bus error interrupt

 * @dsp: pointer to DSP structure

 *

 * The firmware and DSP state will be logged for future analysis.

/**

 * cs_dsp_halo_wdt_expire() - Handle DSP watchdog expiry

 * @dsp: pointer to DSP structure

 *

 * This is logged for future analysis.

 SPDX-License-Identifier: GPL-2.0

/*

 * System Control and Management Interface (SCMI) Performance Protocol

 *

 * Copyright (C) 2018-2021 ARM Ltd.

 CPUFreq converts to kHz, hence default 1000 */

 Set the number of OPPs to be skipped/already read */

		/*

		 * check for both returned and remaining to avoid infinite

		 * loop due to buggy firmware

 db->width == 8 */

 Device specific ops */

 uS to nS */

 SPDX-License-Identifier: GPL-2.0

/*

 * For transport using shared mem structure.

 *

 * Copyright (C) 2019 ARM Ltd.

/*

 * SCMI specification requires all parameters, message headers, return

 * arguments or any protocol data to be expressed in little endian

 * format only.

	/*

	 * Ideally channel must be free by now unless OS timeout last

	 * request and platform continued to process the same, wait

	 * until it releases the shared memory, otherwise we may endup

	 * overwriting its response with new message payload or vice-versa

 Mark channel busy + clear error */

 Skip the length of header and status in shmem area i.e 8 bytes */

 Take a copy to the rx buffer.. */

 Skip only the length of header in shmem area i.e 4 bytes */

 Take a copy to the rx buffer.. */

 SPDX-License-Identifier: GPL-2.0

/*

 * System Control and Management Interface (SCMI) Message Protocol driver

 *

 * SCMI Message Protocol is used between the System Control Processor(SCP)

 * and the Application Processors(AP). The Message Handling Unit(MHU)

 * provides a mechanism for inter-processor communication between SCP's

 * Cortex M3 and AP.

 *

 * SCP offers control and management of the core/cluster power states,

 * various power domain DVFS including the core/cluster, certain system

 * clocks configuration, thermal sensors and many others.

 *

 * Copyright (C) 2018-2021 ARM Ltd.

 Success */

 Not supported */

 Invalid Parameters */

 Invalid access/permission denied */

 Not found */

 Value out of range */

 Device busy */

 Communication Error */

 Generic Error */

 Hardware Error */

 Protocol Error */

 List of all SCMI devices active in system */

 Protection for the entire list */

 Track the unique id for the transfers for debug & profiling purpose */

/**

 * struct scmi_xfers_info - Structure to manage transfer information

 *

 * @xfer_alloc_table: Bitmap table for allocated messages.

 *	Index of this bitmap table is also used for message

 *	sequence identifier.

 * @xfer_lock: Protection for message allocation

 * @max_msg: Maximum number of messages that can be pending

 * @free_xfers: A free list for available to use xfers. It is initialized with

 *		a number of xfers equal to the maximum allowed in-flight

 *		messages.

 * @pending_xfers: An hashtable, indexed by msg_hdr.seq, used to keep all the

 *		   currently in-flight messages.

/**

 * struct scmi_protocol_instance  - Describe an initialized protocol instance.

 * @handle: Reference to the SCMI handle associated to this protocol instance.

 * @proto: A reference to the protocol descriptor.

 * @gid: A reference for per-protocol devres management.

 * @users: A refcount to track effective users of this protocol.

 * @priv: Reference for optional protocol private data.

 * @ph: An embedded protocol handle that will be passed down to protocol

 *	initialization code to identify this instance.

 *

 * Each protocol is initialized independently once for each SCMI platform in

 * which is defined by DT and implemented by the SCMI server fw.

/**

 * struct scmi_info - Structure representing a SCMI instance

 *

 * @dev: Device pointer

 * @desc: SoC description for this instance

 * @version: SCMI revision information containing protocol version,

 *	implementation version and (sub-)vendor identification.

 * @handle: Instance of SCMI handle to send to clients

 * @tx_minfo: Universal Transmit Message management info

 * @rx_minfo: Universal Receive Message management info

 * @tx_idr: IDR object to map protocol id to Tx channel info pointer

 * @rx_idr: IDR object to map protocol id to Rx channel info pointer

 * @protocols: IDR for protocols' instance descriptors initialized for

 *	       this SCMI instance: populated on protocol's first attempted

 *	       usage.

 * @protocols_mtx: A mutex to protect protocols instances initialization.

 * @protocols_imp: List of protocols implemented, currently maximum of

 *	MAX_PROTOCOLS_IMP elements allocated by the base protocol

 * @active_protocols: IDR storing device_nodes for protocols actually defined

 *		      in the DT and confirmed as implemented by fw.

 * @notify_priv: Pointer to private data structure specific to notifications.

 * @node: List head

 * @users: Number of users of this instance

 Ensure mutual exclusive access to protocols instance array */

 better than switch case as long as return value is continuous */

 SCMI_SUCCESS */

 SCMI_ERR_SUPPORT */

 SCMI_ERR_PARAM */

 SCMI_ERR_ACCESS */

 SCMI_ERR_ENTRY */

 SCMI_ERR_RANGE */

 SCMI_ERR_BUSY */

 SCMI_ERR_COMMS */

 SCMI_ERR_GENERIC */

 SCMI_ERR_HARDWARE */

 SCMI_ERR_PROTOCOL */

 Ensure updated protocol private date are visible */

 Ensure protocols_private_data has been updated */

/**

 * scmi_xfer_token_set  - Reserve and set new token for the xfer at hand

 *

 * @minfo: Pointer to Tx/Rx Message management info based on channel type

 * @xfer: The xfer to act upon

 *

 * Pick the next unused monotonically increasing token and set it into

 * xfer->hdr.seq: picking a monotonically increasing value avoids immediate

 * reuse of freshly completed or timed-out xfers, thus mitigating the risk

 * of incorrect association of a late and expired xfer with a live in-flight

 * transaction, both happening to re-use the same token identifier.

 *

 * Since platform is NOT required to answer our request in-order we should

 * account for a few rare but possible scenarios:

 *

 *  - exactly 'next_token' may be NOT available so pick xfer_id >= next_token

 *    using find_next_zero_bit() starting from candidate next_token bit

 *

 *  - all tokens ahead upto (MSG_TOKEN_ID_MASK - 1) are used in-flight but we

 *    are plenty of free tokens at start, so try a second pass using

 *    find_next_zero_bit() and starting from 0.

 *

 *  X = used in-flight

 *

 * Normal

 * ------

 *

 *		|- xfer_id picked

 *   -----------+----------------------------------------------------------

 *   | | |X|X|X| | | | | | ... ... ... ... ... ... ... ... ... ... ...|X|X|

 *   ----------------------------------------------------------------------

 *		^

 *		|- next_token

 *

 * Out-of-order pending at start

 * -----------------------------

 *

 *	  |- xfer_id picked, last_token fixed

 *   -----+----------------------------------------------------------------

 *   |X|X| | | | |X|X| ... ... ... ... ... ... ... ... ... ... ... ...|X| |

 *   ----------------------------------------------------------------------

 *    ^

 *    |- next_token

 *

 *

 * Out-of-order pending at end

 * ---------------------------

 *

 *	  |- xfer_id picked, last_token fixed

 *   -----+----------------------------------------------------------------

 *   |X|X| | | | |X|X| ... ... ... ... ... ... ... ... ... ... |X|X|X||X|X|

 *   ----------------------------------------------------------------------

 *								^

 *								|- next_token

 *

 * Context: Assumes to be called with @xfer_lock already acquired.

 *

 * Return: 0 on Success or error

	/*

	 * Pick a candidate monotonic token in range [0, MSG_TOKEN_MAX - 1]

	 * using the pre-allocated transfer_id as a base.

	 * Note that the global transfer_id is shared across all message types

	 * so there could be holes in the allocated set of monotonic sequence

	 * numbers, but that is going to limit the effectiveness of the

	 * mitigation only in very rare limit conditions.

 Pick the next available xfer_id >= next_token */

		/*

		 * After heavily out-of-order responses, there are no free

		 * tokens ahead, but only at start of xfer_alloc_table so

		 * try again from the beginning.

		/*

		 * Something is wrong if we got here since there can be a

		 * maximum number of (MSG_TOKEN_MAX - 1) in-flight messages

		 * but we have not found any free token [0, MSG_TOKEN_MAX - 1].

 Update +/- last_token accordingly if we skipped some hole */

 Set in-flight */

/**

 * scmi_xfer_token_clear  - Release the token

 *

 * @minfo: Pointer to Tx/Rx Message management info based on channel type

 * @xfer: The xfer to act upon

/**

 * scmi_xfer_get() - Allocate one message

 *

 * @handle: Pointer to SCMI entity handle

 * @minfo: Pointer to Tx/Rx Message management info based on channel type

 * @set_pending: If true a monotonic token is picked and the xfer is added to

 *		 the pending hash table.

 *

 * Helper function which is used by various message functions that are

 * exposed to clients of this driver for allocating a message traffic event.

 *

 * Picks an xfer from the free list @free_xfers (if any available) and, if

 * required, sets a monotonically increasing token and stores the inflight xfer

 * into the @pending_xfers hashtable for later retrieval.

 *

 * The successfully initialized xfer is refcounted.

 *

 * Context: Holds @xfer_lock while manipulating @xfer_alloc_table and

 *	    @free_xfers.

 *

 * Return: 0 if all went fine, else corresponding error.

 grab an xfer from the free_list */

	/*

	 * Allocate transfer_id early so that can be used also as base for

	 * monotonic sequence number generation if needed.

 Pick and set monotonic token */

/**

 * __scmi_xfer_put() - Release a message

 *

 * @minfo: Pointer to Tx/Rx Message management info based on channel type

 * @xfer: message that was reserved by scmi_xfer_get

 *

 * After refcount check, possibly release an xfer, clearing the token slot,

 * removing xfer from @pending_xfers and putting it back into free_xfers.

 *

 * This holds a spinlock to maintain integrity of internal data structures.

/**

 * scmi_xfer_lookup_unlocked  -  Helper to lookup an xfer_id

 *

 * @minfo: Pointer to Tx/Rx Message management info based on channel type

 * @xfer_id: Token ID to lookup in @pending_xfers

 *

 * Refcounting is untouched.

 *

 * Context: Assumes to be called with @xfer_lock already acquired.

 *

 * Return: A valid xfer on Success or error otherwise

/**

 * scmi_msg_response_validate  - Validate message type against state of related

 * xfer

 *

 * @cinfo: A reference to the channel descriptor.

 * @msg_type: Message type to check

 * @xfer: A reference to the xfer to validate against @msg_type

 *

 * This function checks if @msg_type is congruent with the current state of

 * a pending @xfer; if an asynchronous delayed response is received before the

 * related synchronous response (Out-of-Order Delayed Response) the missing

 * synchronous response is assumed to be OK and completed, carrying on with the

 * Delayed Response: this is done to address the case in which the underlying

 * SCMI transport can deliver such out-of-order responses.

 *

 * Context: Assumes to be called with xfer->lock already acquired.

 *

 * Return: 0 on Success, error otherwise

	/*

	 * Even if a response was indeed expected on this slot at this point,

	 * a buggy platform could wrongly reply feeding us an unexpected

	 * delayed response we're not prepared to handle: bail-out safely

	 * blaming firmware.

			/*

			 * Delayed Response expected but delivered earlier.

			 * Assume message RESPONSE was OK and skip state.

 No further message expected once in SCMI_XFER_DRESP_OK */

/**

 * scmi_xfer_state_update  - Update xfer state

 *

 * @xfer: A reference to the xfer to update

 * @msg_type: Type of message being processed.

 *

 * Note that this message is assumed to have been already successfully validated

 * by @scmi_msg_response_validate(), so here we just update the state.

 *

 * Context: Assumes to be called on an xfer exclusively acquired using the

 *	    busy flag.

 Unknown command types were already discarded earlier */

/**

 * scmi_xfer_command_acquire  -  Helper to lookup and acquire a command xfer

 *

 * @cinfo: A reference to the channel descriptor.

 * @msg_hdr: A message header to use as lookup key

 *

 * When a valid xfer is found for the sequence number embedded in the provided

 * msg_hdr, reference counting is properly updated and exclusive access to this

 * xfer is granted till released with @scmi_xfer_command_release.

 *

 * Return: A valid @xfer on Success or error otherwise.

 Are we even expecting this? */

	/*

	 * If a pending xfer was found which was also in a congruent state with

	 * the received message, acquire exclusive access to it setting the busy

	 * flag.

	 * Spins only on the rare limit condition of concurrent reception of

	 * RESP and DRESP for the same xfer.

 On error the refcount incremented above has to be dropped */

 rx.len could be shrunk in the sync do_xfer, so reset to maxsz */

/**

 * scmi_rx_callback() - callback for receiving messages

 *

 * @cinfo: SCMI channel info

 * @msg_hdr: Message header

 * @priv: Transport specific private data.

 *

 * Processes one received message to appropriate transfer information and

 * signals completion of the transfer.

 *

 * NOTE: This function will be invoked in IRQ context, hence should be

 * as optimal as possible.

/**

 * xfer_put() - Release a transmit message

 *

 * @ph: Pointer to SCMI protocol handle

 * @xfer: message that was reserved by xfer_get_init

	/*

	 * Poll also on xfer->done so that polling can be forcibly terminated

	 * in case of out-of-order receptions of delayed responses

/**

 * do_xfer() - Do one transfer

 *

 * @ph: Pointer to SCMI protocol handle

 * @xfer: Transfer to initiate and wait for response

 *

 * Return: -ETIMEDOUT in case of no response, if transmit error,

 *	return corresponding error, else if all goes well,

 *	return 0.

	/*

	 * Initialise protocol id now from protocol handle to avoid it being

	 * overridden by mistake (or malice) by the protocol code mangling with

	 * the scmi_xfer structure prior to this.

	/*

	 * Even though spinlocking is not needed here since no race is possible

	 * on xfer->state due to the monotonically increasing tokens allocation,

	 * we must anyway ensure xfer->state initialization is not re-ordered

	 * after the .send_message() to be sure that on the RX path an early

	 * ISR calling scmi_rx_callback() cannot see an old stale xfer->state.

			/*

			 * Do not fetch_response if an out-of-order delayed

			 * response is being processed.

 And we wait for the response. */

/**

 * do_xfer_with_response() - Do one transfer and wait until the delayed

 *	response is received

 *

 * @ph: Pointer to SCMI protocol handle

 * @xfer: Transfer to initiate and wait for response

 *

 * Return: -ETIMEDOUT in case of no delayed response, if transmit error,

 *	return corresponding error, else if all goes well, return 0.

/**

 * xfer_get_init() - Allocate and initialise one message for transmit

 *

 * @ph: Pointer to SCMI protocol handle

 * @msg_id: Message identifier

 * @tx_size: transmit message size

 * @rx_size: receive message size

 * @p: pointer to the allocated and initialised message

 *

 * This function allocates the message using @scmi_xfer_get and

 * initialise the header.

 *

 * Return: 0 if all went fine with @p pointing to message, else

 *	corresponding error.

 Ensure we have sane transfer sizes */

/**

 * version_get() - command to get the revision of the SCMI entity

 *

 * @ph: Pointer to SCMI protocol handle

 * @version: Holds returned version of protocol.

 *

 * Updates the SCMI information in the internal data structure.

 *

 * Return: 0 if all went fine, else return appropriate error.

/**

 * scmi_set_protocol_priv  - Set protocol specific data at init time

 *

 * @ph: A reference to the protocol handle.

 * @priv: The private data to set.

 *

 * Return: 0 on Success

/**

 * scmi_get_protocol_priv  - Set protocol specific data at init time

 *

 * @ph: A reference to the protocol handle.

 *

 * Return: Protocol private data if any was set.

/**

 * scmi_revision_area_get  - Retrieve version memory area.

 *

 * @ph: A reference to the protocol handle.

 *

 * A helper to grab the version memory area reference during SCMI Base protocol

 * initialization.

 *

 * Return: A reference to the version memory area associated to the SCMI

 *	   instance underlying this protocol handle.

/**

 * scmi_alloc_init_protocol_instance  - Allocate and initialize a protocol

 * instance descriptor.

 * @info: The reference to the related SCMI instance.

 * @proto: The protocol descriptor.

 *

 * Allocate a new protocol instance descriptor, using the provided @proto

 * description, against the specified SCMI instance @info, and initialize it;

 * all resources management is handled via a dedicated per-protocol devres

 * group.

 *

 * Context: Assumes to be called with @protocols_mtx already acquired.

 * Return: A reference to a freshly allocated and initialized protocol instance

 *	   or ERR_PTR on failure. On failure the @proto reference is at first

 *	   put using @scmi_protocol_put() before releasing all the devres group.

 Protocol specific devres group */

 proto->init is assured NON NULL by scmi_protocol_register */

	/*

	 * Warn but ignore events registration errors since we do not want

	 * to skip whole protocols if their notifications are messed up.

 Take care to put the protocol module's owner before releasing all */

/**

 * scmi_get_protocol_instance  - Protocol initialization helper.

 * @handle: A reference to the SCMI platform instance.

 * @protocol_id: The protocol being requested.

 *

 * In case the required protocol has never been requested before for this

 * instance, allocate and initialize all the needed structures while handling

 * resource allocation with a dedicated per-protocol devres subgroup.

 *

 * Return: A reference to an initialized protocol instance or error on failure:

 *	   in particular returns -EPROBE_DEFER when the desired protocol could

 *	   NOT be found.

 Fails if protocol not registered on bus */

/**

 * scmi_protocol_acquire  - Protocol acquire

 * @handle: A reference to the SCMI platform instance.

 * @protocol_id: The protocol being requested.

 *

 * Register a new user for the requested protocol on the specified SCMI

 * platform instance, possibly triggering its initialization on first user.

 *

 * Return: 0 if protocol was acquired successfully.

/**

 * scmi_protocol_release  - Protocol de-initialization helper.

 * @handle: A reference to the SCMI platform instance.

 * @protocol_id: The protocol being requested.

 *

 * Remove one user for the specified protocol and triggers de-initialization

 * and resources de-allocation once the last user has gone.

/**

 * scmi_devm_protocol_get  - Devres managed get protocol operations and handle

 * @sdev: A reference to an scmi_device whose embedded struct device is to

 *	  be used for devres accounting.

 * @protocol_id: The protocol being requested.

 * @ph: A pointer reference used to pass back the associated protocol handle.

 *

 * Get hold of a protocol accounting for its usage, eventually triggering its

 * initialization, and returning the protocol specific operations and related

 * protocol handle which will be used as first argument in most of the

 * protocols operations methods.

 * Being a devres based managed method, protocol hold will be automatically

 * released, and possibly de-initialized on last user, once the SCMI driver

 * owning the scmi_device is unbound from it.

 *

 * Return: A reference to the requested protocol operations or error.

 *	   Must be checked for errors by caller.

/**

 * scmi_devm_protocol_put  - Devres managed put protocol operations and handle

 * @sdev: A reference to an scmi_device whose embedded struct device is to

 *	  be used for devres accounting.

 * @protocol_id: The protocol being requested.

 *

 * Explicitly release a protocol hold previously obtained calling the above

 * @scmi_devm_protocol_get.

/**

 * scmi_handle_get() - Get the SCMI handle for a device

 *

 * @dev: pointer to device for which we want SCMI handle

 *

 * NOTE: The function does not track individual clients of the framework

 * and is expected to be maintained by caller of SCMI protocol library.

 * scmi_handle_put must be balanced with successful scmi_handle_get

 *

 * Return: pointer to handle if successful, NULL on error

/**

 * scmi_handle_put() - Release the handle acquired by scmi_handle_get

 *

 * @handle: handle acquired by scmi_handle_get

 *

 * NOTE: The function does not track individual clients of the framework

 * and is expected to be maintained by caller of SCMI protocol library.

 * scmi_handle_put must be balanced with successful scmi_handle_get

 *

 * Return: 0 is successfully released

 *	if null was passed, it returns -EINVAL;

 Pre-allocated messages, no more than what hdr.seq can support */

 Allocate a bitmask sized to hold MSG_TOKEN_MAX tokens */

	/*

	 * Preallocate a number of xfers equal to max inflight messages,

	 * pre-initialize the buffer pointer to pre-allocated buffers and

	 * attach all of them to the free list

 Add initialized xfer to the free list */

 RX channel is optional so can be skipped */

 Transmit channel is first entry i.e. index 0 */

 check if already allocated, used for multiple device per protocol */

 Possible only if platform has no Rx */

 Rx is optional, hence no error check */

/**

 * scmi_get_protocol_device  - Helper to get/create an SCMI device.

 *

 * @np: A device node representing a valid active protocols for the referred

 * SCMI instance.

 * @info: The referred SCMI instance for which we are getting/creating this

 * device.

 * @prot_id: The protocol ID.

 * @name: The device name.

 *

 * Referring to the specific SCMI instance identified by @info, this helper

 * takes care to return a properly initialized device matching the requested

 * @proto_id and @name: if device was still not existent it is created as a

 * child of the specified SCMI instance @info and its transport properly

 * initialized as usual.

 *

 * Return: A properly initialized scmi device, NULL otherwise.

 Already created for this parent SCMI instance ? */

 setup handle now as the transport is ready */

/**

 * scmi_create_protocol_devices  - Create devices for all pending requests for

 * this SCMI instance.

 *

 * @np: The device node describing the protocol

 * @info: The SCMI instance descriptor

 * @prot_id: The protocol ID

 *

 * All devices previously requested for this instance (if any) are found and

 * created by scanning the proper @&scmi_requested_devices entry.

/**

 * scmi_protocol_device_request  - Helper to request a device

 *

 * @id_table: A protocol/name pair descriptor for the device to be created.

 *

 * This helper let an SCMI driver request specific devices identified by the

 * @id_table to be created for each active SCMI instance.

 *

 * The requested device name MUST NOT be already existent for any protocol;

 * at first the freshly requested @id_table is annotated in the IDR table

 * @scmi_requested_devices, then a matching device is created for each already

 * active SCMI instance. (if any)

 *

 * This way the requested device is created straight-away for all the already

 * initialized(probed) SCMI instances (handles) and it remains also annotated

 * as pending creation if the requesting SCMI driver was loaded before some

 * SCMI instance and related transports were available: when such late instance

 * is probed, its probe will take care to scan the list of pending requested

 * devices and create those on its own (see @scmi_create_protocol_devices and

 * its enclosing loop)

 *

 * Return: 0 on Success

	/*

	 * Search for the matching protocol rdev list and then search

	 * of any existent equally named device...fails if any duplicate found.

 A list found registered in the IDR is never empty */

	/*

	 * No duplicate found for requested id_table, so let's create a new

	 * requested device entry for this new valid request.

	/*

	 * Append the new requested device table descriptor to the head of the

	 * related protocol list, eventually creating such head if not already

	 * there.

	/*

	 * Now effectively create and initialize the requested device for every

	 * already initialized SCMI instance which has registered the requested

	 * protocol as a valid active one: i.e. defined in DT and supported by

	 * current platform FW.

 Set handle if not already set: device existed */

/**

 * scmi_protocol_device_unrequest  - Helper to unrequest a device

 *

 * @id_table: A protocol/name pair descriptor for the device to be unrequested.

 *

 * An helper to let an SCMI driver release its request about devices; note that

 * devices are created and initialized once the first SCMI driver request them

 * but they destroyed only on SCMI core unloading/unbinding.

 *

 * The current SCMI transport layer uses such devices as internal references and

 * as such they could be shared as same transport between multiple drivers so

 * that cannot be safely destroyed till the whole SCMI stack is removed.

 * (unless adding further burden of refcounting.)

	/*

	 * Trigger SCMI Base protocol initialization.

	 * It's mandatory and won't be ever released/deinit until the

	 * SCMI stack is shutdown/unloaded as a whole.

		/*

		 * Save this valid DT protocol descriptor amongst

		 * @active_protocols for this SCMI instance/

 Safe to free channels since no more users */

 Each compatible listed below must have descriptor associated with it */

 Sentinel */ },

/**

 * __scmi_transports_setup  - Common helper to call transport-specific

 * .init/.exit code if provided.

 *

 * @init: A flag to distinguish between init and exit.

 *

 * Note that, if provided, we invoke .init/.exit functions for all the

 * transports currently compiled in.

 *

 * Return: 0 on Success.

 Bail out if no SCMI transport was configured */

 Initialize any compiled-in transport which provided an init/exit */

 SPDX-License-Identifier: GPL-2.0

/*

 * System Control and Management Interface (SCMI) Message Protocol bus layer

 *

 * Copyright (C) 2018-2021 ARM Ltd.

 SPDX-License-Identifier: GPL-2.0

/*

 * System Control and Management Interface (SCMI) Clock Protocol

 *

 * Copyright (C) 2018-2021 ARM Ltd.

 Set the number of rates to be skipped/already read */

		/*

		 * check for both returned and remaining to avoid infinite

		 * loop due to buggy firmware

 SPDX-License-Identifier: GPL-2.0

/*

 * System Control and Management Interface (SCMI) System Power Protocol

 *

 * Copyright (C) 2020-2021 ARM Ltd.

 SPDX-License-Identifier: GPL-2.0

/*

 * System Control and Management Interface (SCMI) Notification support

 *

 * Copyright (C) 2020-2021 ARM Ltd.

/**

 * DOC: Theory of operation

 *

 * SCMI Protocol specification allows the platform to signal events to

 * interested agents via notification messages: this is an implementation

 * of the dispatch and delivery of such notifications to the interested users

 * inside the Linux kernel.

 *

 * An SCMI Notification core instance is initialized for each active platform

 * instance identified by the means of the usual &struct scmi_handle.

 *

 * Each SCMI Protocol implementation, during its initialization, registers with

 * this core its set of supported events using scmi_register_protocol_events():

 * all the needed descriptors are stored in the &struct registered_protocols and

 * &struct registered_events arrays.

 *

 * Kernel users interested in some specific event can register their callbacks

 * providing the usual notifier_block descriptor, since this core implements

 * events' delivery using the standard Kernel notification chains machinery.

 *

 * Given the number of possible events defined by SCMI and the extensibility

 * of the SCMI Protocol itself, the underlying notification chains are created

 * and destroyed dynamically on demand depending on the number of users

 * effectively registered for an event, so that no support structures or chains

 * are allocated until at least one user has registered a notifier_block for

 * such event. Similarly, events' generation itself is enabled at the platform

 * level only after at least one user has registered, and it is shutdown after

 * the last user for that event has gone.

 *

 * All users provided callbacks and allocated notification-chains are stored in

 * the @registered_events_handlers hashtable. Callbacks' registration requests

 * for still to be registered events are instead kept in the dedicated common

 * hashtable @pending_events_handlers.

 *

 * An event is identified univocally by the tuple (proto_id, evt_id, src_id)

 * and is served by its own dedicated notification chain; information contained

 * in such tuples is used, in a few different ways, to generate the needed

 * hash-keys.

 *

 * Here proto_id and evt_id are simply the protocol_id and message_id numbers

 * as described in the SCMI Protocol specification, while src_id represents an

 * optional, protocol dependent, source identifier (like domain_id, perf_id

 * or sensor_id and so forth).

 *

 * Upon reception of a notification message from the platform the SCMI RX ISR

 * passes the received message payload and some ancillary information (including

 * an arrival timestamp in nanoseconds) to the core via @scmi_notify() which

 * pushes the event-data itself on a protocol-dedicated kfifo queue for further

 * deferred processing as specified in @scmi_events_dispatcher().

 *

 * Each protocol has it own dedicated work_struct and worker which, once kicked

 * by the ISR, takes care to empty its own dedicated queue, deliverying the

 * queued items into the proper notification-chain: notifications processing can

 * proceed concurrently on distinct workers only between events belonging to

 * different protocols while delivery of events within the same protocol is

 * still strictly sequentially ordered by time of arrival.

 *

 * Events' information is then extracted from the SCMI Notification messages and

 * conveyed, converted into a custom per-event report struct, as the void *data

 * param to the user callback provided by the registered notifier_block, so that

 * from the user perspective his callback will look invoked like:

 *

 * int user_cb(struct notifier_block *nb, unsigned long event_id, void *report)

 *

/*

 * Builds an unsigned 32bit key from the given input tuple to be used

 * as a key in hashtables.

/*

 * Assumes that the stored obj includes its own hash-key in a field named 'key':

 * with this simplification this macro can be equally used for all the objects'

 * types hashed by this implementation.

 *

 * @__ht: The hashtable name

 * @__obj: A pointer to the object type to be retrieved from the hashtable;

 *	   it will be used as a cursor while scanning the hastable and it will

 *	   be possibly left as NULL when @__k is not found

 * @__k: The key to search for

/*

 * A set of macros used to access safely @registered_protocols and

 * @registered_events arrays; these are fixed in size and each entry is possibly

 * populated at protocols' registration time and then only read but NEVER

 * modified or removed.

 A couple of utility macros to limit cruft when calling protocols' helpers */

/**

 * struct scmi_notify_instance  - Represents an instance of the notification

 * core

 * @gid: GroupID used for devres

 * @handle: A reference to the platform instance

 * @init_work: A work item to perform final initializations of pending handlers

 * @notify_wq: A reference to the allocated Kernel cmwq

 * @pending_mtx: A mutex to protect @pending_events_handlers

 * @registered_protocols: A statically allocated array containing pointers to

 *			  all the registered protocol-level specific information

 *			  related to events' handling

 * @pending_events_handlers: An hashtable containing all pending events'

 *			     handlers descriptors

 *

 * Each platform instance, represented by a handle, has its own instance of

 * the notification subsystem represented by this structure.

 lock to protect pending_events_handlers */

/**

 * struct events_queue  - Describes a queue and its associated worker

 * @sz: Size in bytes of the related kfifo

 * @kfifo: A dedicated Kernel kfifo descriptor

 * @notify_work: A custom work item bound to this queue

 * @wq: A reference to the associated workqueue

 *

 * Each protocol has its own dedicated events_queue descriptor.

/**

 * struct scmi_event_header  - A utility header

 * @timestamp: The timestamp, in nanoseconds (boottime), which was associated

 *	       to this event as soon as it entered the SCMI RX ISR

 * @payld_sz: Effective size of the embedded message payload which follows

 * @evt_id: Event ID (corresponds to the Event MsgID for this Protocol)

 * @payld: A reference to the embedded event payload

 *

 * This header is prepended to each received event message payload before

 * queueing it on the related &struct events_queue.

/**

 * struct scmi_registered_events_desc  - Protocol Specific information

 * @id: Protocol ID

 * @ops: Protocol specific and event-related operations

 * @equeue: The embedded per-protocol events_queue

 * @ni: A reference to the initialized instance descriptor

 * @eh: A reference to pre-allocated buffer to be used as a scratch area by the

 *	deferred worker when fetching data from the kfifo

 * @eh_sz: Size of the pre-allocated buffer @eh

 * @in_flight: A reference to an in flight &struct scmi_registered_event

 * @num_events: Number of events in @registered_events

 * @registered_events: A dynamically allocated array holding all the registered

 *		       events' descriptors, whose fixed-size is determined at

 *		       compile time.

 * @registered_mtx: A mutex to protect @registered_events_handlers

 * @ph: SCMI protocol handle reference

 * @registered_events_handlers: An hashtable containing all events' handlers

 *				descriptors registered for this protocol

 *

 * All protocols that register at least one event have their protocol-specific

 * information stored here, together with the embedded allocated events_queue.

 * These descriptors are stored in the @registered_protocols array at protocol

 * registration time.

 *

 * Once these descriptors are successfully registered, they are NEVER again

 * removed or modified since protocols do not unregister ever, so that, once

 * we safely grab a NON-NULL reference from the array we can keep it and use it.

 mutex to protect registered_events_handlers */

/**

 * struct scmi_registered_event  - Event Specific Information

 * @proto: A reference to the associated protocol descriptor

 * @evt: A reference to the associated event descriptor (as provided at

 *       registration time)

 * @report: A pre-allocated buffer used by the deferred worker to fill a

 *	    customized event report

 * @num_sources: The number of possible sources for this event as stated at

 *		 events' registration time

 * @sources: A reference to a dynamically allocated array used to refcount the

 *	     events' enable requests for all the existing sources

 * @sources_mtx: A mutex to serialize the access to @sources

 *

 * All registered events are represented by one of these structures that are

 * stored in the @registered_events array at protocol registration time.

 *

 * Once these descriptors are successfully registered, they are NEVER again

 * removed or modified since protocols do not unregister ever, so that once we

 * safely grab a NON-NULL reference from the table we can keep it and use it.

 locking to serialize the access to sources */

/**

 * struct scmi_event_handler  - Event handler information

 * @key: The used hashkey

 * @users: A reference count for number of active users for this handler

 * @r_evt: A reference to the associated registered event; when this is NULL

 *	   this handler is pending, which means that identifies a set of

 *	   callbacks intended to be attached to an event which is still not

 *	   known nor registered by any protocol at that point in time

 * @chain: The notification chain dedicated to this specific event tuple

 * @hash: The hlist_node used for collision handling

 * @enabled: A boolean which records if event's generation has been already

 *	     enabled for this handler as a whole

 *

 * This structure collects all the information needed to process a received

 * event identified by the tuple (proto_id, evt_id, src_id).

 * These descriptors are stored in a per-protocol @registered_events_handlers

 * table using as a key a value derived from that tuple.

/**

 * scmi_lookup_and_call_event_chain()  - Lookup the proper chain and call it

 * @ni: A reference to the notification instance to use

 * @evt_key: The key to use to lookup the related notification chain

 * @report: The customized event-specific report to pass down to the callbacks

 *	    as their *data parameter.

	/*

	 * Here ensure the event handler cannot vanish while using it.

	 * It is legitimate, though, for an handler not to be found at all here,

	 * e.g. when it has been unregistered by the user after some events had

	 * already been queued.

 Notifiers are NOT supposed to cut the chain ... */

/**

 * scmi_process_event_header()  - Dequeue and process an event header

 * @eq: The queue to use

 * @pd: The protocol descriptor to use

 *

 * Read an event header from the protocol queue into the dedicated scratch

 * buffer and looks for a matching registered event; in case an anomalously

 * sized read is detected just flush the queue.

 *

 * Return:

 * * a reference to the matching registered event when found

 * * ERR_PTR(-EINVAL) when NO registered event could be found

 * * NULL when the queue is empty

/**

 * scmi_process_event_payload()  - Dequeue and process an event payload

 * @eq: The queue to use

 * @pd: The protocol descriptor to use

 * @r_evt: The registered event descriptor to use

 *

 * Read an event payload from the protocol queue into the dedicated scratch

 * buffer, fills a custom report and then look for matching event handlers and

 * call them; skip any unknown event (as marked by scmi_process_event_header())

 * and in case an anomalously sized read is detected just flush the queue.

 *

 * Return: False when the queue is empty

 Any in-flight event has now been officially processed */

 At first search for a generic ALL src_ids handler... */

 ...then search for any specific src_id */

/**

 * scmi_events_dispatcher()  - Common worker logic for all work items.

 * @work: The work item to use, which is associated to a dedicated events_queue

 *

 * Logic:

 *  1. dequeue one pending RX notification (queued in SCMI RX ISR context)

 *  2. generate a custom event report from the received event message

 *  3. lookup for any registered ALL_SRC_IDs handler:

 *    - > call the related notification chain passing in the report

 *  4. lookup for any registered specific SRC_ID handler:

 *    - > call the related notification chain passing in the report

 *

 * Note that:

 * * a dedicated per-protocol kfifo queue is used: in this way an anomalous

 *   flood of events cannot saturate other protocols' queues.

 * * each per-protocol queue is associated to a distinct work_item, which

 *   means, in turn, that:

 *   + all protocols can process their dedicated queues concurrently

 *     (since notify_wq:max_active != 1)

 *   + anyway at most one worker instance is allowed to run on the same queue

 *     concurrently: this ensures that we can have only one concurrent

 *     reader/writer on the associated kfifo, so that we can use it lock-less

 *

 * Context: Process context.

	/*

	 * In order to keep the queue lock-less and the number of memcopies

	 * to the bare minimum needed, the dispatcher accounts for the

	 * possibility of per-protocol in-flight events: i.e. an event whose

	 * reception could end up being split across two subsequent runs of this

	 * worker, first the header, then the payload.

/**

 * scmi_notify()  - Queues a notification for further deferred processing

 * @handle: The handle identifying the platform instance from which the

 *	    dispatched event is generated

 * @proto_id: Protocol ID

 * @evt_id: Event ID (msgID)

 * @buf: Event Message Payload (without the header)

 * @len: Event Message Payload size

 * @ts: RX Timestamp in nanoseconds (boottime)

 *

 * Context: Called in interrupt context to queue a received event for

 * deferred processing.

 *

 * Return: 0 on Success

	/*

	 * Header and payload are enqueued with two distinct kfifo_in() (so non

	 * atomic), but this situation is handled properly on the consumer side

	 * with in-flight events tracking.

	/*

	 * Don't care about return value here since we just want to ensure that

	 * a work is queued all the times whenever some items have been pushed

	 * on the kfifo:

	 * - if work was already queued it will simply fail to queue a new one

	 *   since it is not needed

	 * - if work was not queued already it will be now, even in case work

	 *   was in fact already running: this behavior avoids any possible race

	 *   when this function pushes new items onto the kfifos after the

	 *   related executing worker had already determined the kfifo to be

	 *   empty and it was terminating.

/**

 * scmi_kfifo_free()  - Devres action helper to free the kfifo

 * @kfifo: The kfifo to free

/**

 * scmi_initialize_events_queue()  - Allocate/Initialize a kfifo buffer

 * @ni: A reference to the notification instance to use

 * @equeue: The events_queue to initialize

 * @sz: Size of the kfifo buffer to allocate

 *

 * Allocate a buffer for the kfifo and initialize it.

 *

 * Return: 0 on Success

 Size could have been roundup to power-of-two */

/**

 * scmi_allocate_registered_events_desc()  - Allocate a registered events'

 * descriptor

 * @ni: A reference to the &struct scmi_notify_instance notification instance

 *	to use

 * @proto_id: Protocol ID

 * @queue_sz: Size of the associated queue to allocate

 * @eh_sz: Size of the event header scratch area to pre-allocate

 * @num_events: Number of events to support (size of @registered_events)

 * @ops: Pointer to a struct holding references to protocol specific helpers

 *	 needed during events handling

 *

 * It is supposed to be called only once for each protocol at protocol

 * initialization time, so it warns if the requested protocol is found already

 * registered.

 *

 * Return: The allocated and registered descriptor on Success

 Ensure protocols are up to date */

 Initialize per protocol handlers table */

/**

 * scmi_register_protocol_events()  - Register Protocol Events with the core

 * @handle: The handle identifying the platform instance against which the

 *	    protocol's events are registered

 * @proto_id: Protocol ID

 * @ph: SCMI protocol handle.

 * @ee: A structure describing the events supported by this protocol.

 *

 * Used by SCMI Protocols initialization code to register with the notification

 * core the list of supported events and their descriptors: takes care to

 * pre-allocate and store all needed descriptors, scratch buffers and event

 * queues.

 *

 * Return: 0 on Success

 num_sources cannot be <= 0 */

 Ensure events are updated */

 Register protocol and events...it will never be removed */

 Ensure protocols are updated */

	/*

	 * Finalize any pending events' handler which could have been waiting

	 * for this protocol's events registration.

/**

 * scmi_deregister_protocol_events  - Deregister protocol events with the core

 * @handle: The handle identifying the platform instance against which the

 *	    protocol's events are registered

 * @proto_id: Protocol ID

 Ensure protocols are updated */

/**

 * scmi_allocate_event_handler()  - Allocate Event handler

 * @ni: A reference to the notification instance to use

 * @evt_key: 32bit key uniquely bind to the event identified by the tuple

 *	     (proto_id, evt_id, src_id)

 *

 * Allocate an event handler and related notification chain associated with

 * the provided event handler key.

 * Note that, at this point, a related registered_event is still to be

 * associated to this handler descriptor (hndl->r_evt == NULL), so the handler

 * is initialized as pending.

 *

 * Context: Assumes to be called with @pending_mtx already acquired.

 * Return: the freshly allocated structure on Success

 New handlers are created pending */

/**

 * scmi_free_event_handler()  - Free the provided Event handler

 * @hndl: The event handler structure to free

 *

 * Context: Assumes to be called with proper locking acquired depending

 *	    on the situation.

/**

 * scmi_bind_event_handler()  - Helper to attempt binding an handler to an event

 * @ni: A reference to the notification instance to use

 * @hndl: The event handler to bind

 *

 * If an associated registered event is found, move the handler from the pending

 * into the registered table.

 *

 * Context: Assumes to be called with @pending_mtx already acquired.

 *

 * Return: 0 on Success

	/*

	 * Remove from pending and insert into registered while getting hold

	 * of protocol instance.

	/*

	 * Acquire protocols only for NON pending handlers, so as NOT to trigger

	 * protocol initialization when a notifier is registered against a still

	 * not registered protocol, since it would make little sense to force init

	 * protocols for which still no SCMI driver user exists: they wouldn't

	 * emit any event anyway till some SCMI driver starts using it.

/**

 * scmi_valid_pending_handler()  - Helper to check pending status of handlers

 * @ni: A reference to the notification instance to use

 * @hndl: The event handler to check

 *

 * An handler is considered pending when its r_evt == NULL, because the related

 * event was still unknown at handler's registration time; anyway, since all

 * protocols register their supported events once for all at protocols'

 * initialization time, a pending handler cannot be considered valid anymore if

 * the underlying event (which it is waiting for), belongs to an already

 * initialized and registered protocol.

 *

 * Return: 0 on Success

/**

 * scmi_register_event_handler()  - Register whenever possible an Event handler

 * @ni: A reference to the notification instance to use

 * @hndl: The event handler to register

 *

 * At first try to bind an event handler to its associated event, then check if

 * it was at least a valid pending handler: if it was not bound nor valid return

 * false.

 *

 * Valid pending incomplete bindings will be periodically retried by a dedicated

 * worker which is kicked each time a new protocol completes its own

 * registration phase.

 *

 * Context: Assumes to be called with @pending_mtx acquired.

 *

 * Return: 0 on Success

/**

 * __scmi_event_handler_get_ops()  - Utility to get or create an event handler

 * @ni: A reference to the notification instance to use

 * @evt_key: The event key to use

 * @create: A boolean flag to specify if a handler must be created when

 *	    not already existent

 *

 * Search for the desired handler matching the key in both the per-protocol

 * registered table and the common pending table:

 * * if found adjust users refcount

 * * if not found and @create is true, create and register the new handler:

 *   handler could end up being registered as pending if no matching event

 *   could be found.

 *

 * An handler is guaranteed to reside in one and only one of the tables at

 * any one time; to ensure this the whole search and create is performed

 * holding the @pending_mtx lock, with @registered_mtx additionally acquired

 * if needed.

 *

 * Note that when a nested acquisition of these mutexes is needed the locking

 * order is always (same as in @init_work):

 * 1. pending_mtx

 * 2. registered_mtx

 *

 * Events generation is NOT enabled right after creation within this routine

 * since at creation time we usually want to have all setup and ready before

 * events really start flowing.

 *

 * Return: A properly refcounted handler on Success, NULL on Failure

 Search registered events at first ... if possible at all */

 ...then amongst pending. */

 Create if still not found and required */

 this hndl can be only a pending one */

/**

 * scmi_get_active_handler()  - Helper to get active handlers only

 * @ni: A reference to the notification instance to use

 * @evt_key: The event key to use

 *

 * Search for the desired handler matching the key only in the per-protocol

 * table of registered handlers: this is called only from the dispatching path

 * so want to be as quick as possible and do not care about pending.

 *

 * Return: A properly refcounted active handler

/**

 * __scmi_enable_evt()  - Enable/disable events generation

 * @r_evt: The registered event to act upon

 * @src_id: The src_id to act upon

 * @enable: The action to perform: true->Enable, false->Disable

 *

 * Takes care of proper refcounting while performing enable/disable: handles

 * the special case of ALL sources requests by itself.

 * Returns successfully if at least one of the required src_id has been

 * successfully enabled/disabled.

 *

 * Return: 0 on Success

/**

 * scmi_put_handler_unlocked()  - Put an event handler

 * @ni: A reference to the notification instance to use

 * @hndl: The event handler to act upon

 *

 * After having got exclusive access to the registered handlers hashtable,

 * update the refcount and if @hndl is no more in use by anyone:

 * * ask for events' generation disabling

 * * unregister and free the handler itself

 *

 * Context: Assumes all the proper locking has been managed by the caller.

 *

 * Return: True if handler was freed (users dropped to zero)

		/*

		 * Only registered handler acquired protocol; must be here

		 * released only AFTER unlocking registered_mtx, since

		 * releasing a protocol can trigger its de-initialization

		 * (ie. including r_evt and registered_mtx)

/**

 * scmi_event_handler_enable_events()  - Enable events associated to an handler

 * @hndl: The Event handler to act upon

 *

 * Return: 0 on Success

/**

 * scmi_notifier_register()  - Register a notifier_block for an event

 * @handle: The handle identifying the platform instance against which the

 *	    callback is registered

 * @proto_id: Protocol ID

 * @evt_id: Event ID

 * @src_id: Source ID, when NULL register for events coming form ALL possible

 *	    sources

 * @nb: A standard notifier block to register for the specified event

 *

 * Generic helper to register a notifier_block against a protocol event.

 *

 * A notifier_block @nb will be registered for each distinct event identified

 * by the tuple (proto_id, evt_id, src_id) on a dedicated notification chain

 * so that:

 *

 *	(proto_X, evt_Y, src_Z) --> chain_X_Y_Z

 *

 * @src_id meaning is protocol specific and identifies the origin of the event

 * (like domain_id, sensor_id and so forth).

 *

 * @src_id can be NULL to signify that the caller is interested in receiving

 * notifications from ALL the available sources for that protocol OR simply that

 * the protocol does not support distinct sources.

 *

 * As soon as one user for the specified tuple appears, an handler is created,

 * and that specific event's generation is enabled at the platform level, unless

 * an associated registered event is found missing, meaning that the needed

 * protocol is still to be initialized and the handler has just been registered

 * as still pending.

 *

 * Return: 0 on Success

 Enable events for not pending handlers */

/**

 * scmi_notifier_unregister()  - Unregister a notifier_block for an event

 * @handle: The handle identifying the platform instance against which the

 *	    callback is unregistered

 * @proto_id: Protocol ID

 * @evt_id: Event ID

 * @src_id: Source ID

 * @nb: The notifier_block to unregister

 *

 * Takes care to unregister the provided @nb from the notification chain

 * associated to the specified event and, if there are no more users for the

 * event handler, frees also the associated event handler structures.

 * (this could possibly cause disabling of event's generation at platform level)

 *

 * Return: 0 on Success

	/*

	 * Note that this chain unregistration call is safe on its own

	 * being internally protected by an rwsem.

	/*

	 * This balances the initial get issued in @scmi_notifier_register.

	 * If this notifier_block happened to be the last known user callback

	 * for this event, the handler is here freed and the event's generation

	 * stopped.

	 *

	 * Note that, an ongoing concurrent lookup on the delivery workqueue

	 * path could still hold the refcount to 1 even after this routine

	 * completes: in such a case it will be the final put on the delivery

	 * path which will finally free this unused handler.

/**

 * scmi_devm_notifier_register()  - Managed registration of a notifier_block

 * for an event

 * @sdev: A reference to an scmi_device whose embedded struct device is to

 *	  be used for devres accounting.

 * @proto_id: Protocol ID

 * @evt_id: Event ID

 * @src_id: Source ID, when NULL register for events coming form ALL possible

 *	    sources

 * @nb: A standard notifier block to register for the specified event

 *

 * Generic devres managed helper to register a notifier_block against a

 * protocol event.

 *

 * Return: 0 on Success

/**

 * scmi_devm_notifier_unregister()  - Managed un-registration of a

 * notifier_block for an event

 * @sdev: A reference to an scmi_device whose embedded struct device is to

 *	  be used for devres accounting.

 * @proto_id: Protocol ID

 * @evt_id: Event ID

 * @src_id: Source ID, when NULL register for events coming form ALL possible

 *	    sources

 * @nb: A standard notifier block to register for the specified event

 *

 * Generic devres managed helper to explicitly un-register a notifier_block

 * against a protocol event, which was previously registered using the above

 * @scmi_devm_notifier_register.

 *

 * Return: 0 on Success

/**

 * scmi_protocols_late_init()  - Worker for late initialization

 * @work: The work item to use associated to the proper SCMI instance

 *

 * This kicks in whenever a new protocol has completed its own registration via

 * scmi_register_protocol_events(): it is in charge of scanning the table of

 * pending handlers (registered by users while the related protocol was still

 * not initialized) and finalizing their initialization whenever possible;

 * invalid pending handlers are purged at this point in time.

 Ensure protocols and events are up to date */

 this hndl can be only a pending one */

/*

 * notify_ops are attached to the handle so that can be accessed

 * directly from an scmi_driver to register its own notifiers.

/**

 * scmi_notification_init()  - Initializes Notification Core Support

 * @handle: The handle identifying the platform instance to initialize

 *

 * This function lays out all the basic resources needed by the notification

 * core instance identified by the provided handle: once done, all of the

 * SCMI Protocols can register their events with the core during their own

 * initializations.

 *

 * Note that failing to initialize the core notifications support does not

 * cause the whole SCMI Protocols stack to fail its initialization.

 *

 * SCMI Notification Initialization happens in 2 steps:

 * * initialization: basic common allocations (this function)

 * * registration: protocols asynchronously come into life and registers their

 *		   own supported list of events with the core; this causes

 *		   further per-protocol allocations

 *

 * Any user's callback registration attempt, referring a still not registered

 * event, will be registered as pending and finalized later (if possible)

 * by scmi_protocols_late_init() work.

 * This allows for lazy initialization of SCMI Protocols due to late (or

 * missing) SCMI drivers' modules loading.

 *

 * Return: 0 on Success

 Ensure handle is up to date */

/**

 * scmi_notification_exit()  - Shutdown and clean Notification core

 * @handle: The handle identifying the platform instance to shutdown

 Destroy while letting pending work complete */

 SPDX-License-Identifier: GPL-2.0

/*

 * System Control and Management Interface (SCMI) Sensor Protocol

 *

 * Copyright (C) 2018-2021 ARM Ltd.

 v3 attributes_low macros */

 v2 attributes_high macros */

 v3 attributes_high macros */

 v3 resolution macros */

 Common attributes_low macros */

 Common attributes_high macros */

 only for version > 2.0 */

 Base scmi_sensor_descriptor size excluding extended attrs after name */

 Sign extend to a full s32 */

 Base scmi_axis_descriptor size excluding extended attrs after name */

 Set the number of sensors to be skipped/already read */

		/*

		 * Max intervals is not declared previously anywhere so we

		 * assume it's returned+remaining.

 segmented intervals are reported in one triplet */

 Direct allocation when exceeding pre-allocated */

		/*

		 * check for both returned and remaining to avoid infinite

		 * loop due to buggy firmware

 Set the number of sensors to be skipped/already read */

		/*

		 * check for both returned and remaining to avoid infinite

		 * loop due to buggy firmware

 Set the number of sensors to be skipped/already read */

 common bitfields parsing */

			/**

			 * only SCMIv3.0 specific bitfield below.

			 * Such bitfields are assumed to be zeroed on non

			 * relevant fw versions...assuming fw not buggy !

 common bitfields parsing */

 Use pre-allocated pool wherever possible */

				/*

				 * Convert SCMIv2.0 update interval format to

				 * SCMIv3.0 to be used as the common exposed

				 * descriptor, accessible via common macros.

				/*

				 * From SCMIv3.0 update intervals are retrieved

				 * via a dedicated (optional) command.

				 * Since the command is optional, on error carry

				 * on without any update interval.

			/**

			 * only > SCMIv2.0 specific bitfield below.

			 * Such bitfields are assumed to be zeroed on non

			 * relevant fw versions...assuming fw not buggy !

 Only for sensors reporting scalar values */

		/*

		 * check for both returned and remaining to avoid infinite

		 * loop due to buggy firmware

/**

 * scmi_sensor_reading_get  - Read scalar sensor value

 * @ph: Protocol handle

 * @sensor_id: Sensor ID

 * @value: The 64bit value sensor reading

 *

 * This function returns a single 64 bit reading value representing the sensor

 * value; if the platform SCMI Protocol implementation and the sensor support

 * multiple axis and timestamped-reads, this just returns the first axis while

 * dropping the timestamp value.

 * Use instead the @scmi_sensor_reading_get_timestamped to retrieve the array of

 * timestamped multi-axis values.

 *

 * Return: 0 on Success

/**

 * scmi_sensor_reading_get_timestamped  - Read multiple-axis timestamped values

 * @ph: Protocol handle

 * @sensor_id: Sensor ID

 * @count: The length of the provided @readings array

 * @readings: An array of elements each representing a timestamped per-axis

 *	      reading of type @struct scmi_sensor_reading.

 *	      Returned readings are ordered as the @axis descriptors array

 *	      included in @struct scmi_sensor_info and the max number of

 *	      returned elements is min(@count, @num_axis); ideally the provided

 *	      array should be of length @count equal to @num_axis.

 *

 * Return: 0 on Success

 Retrieve only the number of requested axis anyway */

 payld_sz is variable for this event */

		/*

		 * The generated report r (@struct scmi_sensor_update_report)

		 * was pre-allocated to contain up to SCMI_MAX_NUM_SENSOR_AXIS

		 * readings: here it is filled with the effective @num_axis

		 * readings defined for this sensor or 1 for scalar sensors.

 SPDX-License-Identifier: GPL-2.0

/*

 * System Control and Management Interface (SCMI) Message SMC/HVC

 * Transport driver

 *

 * Copyright 2020 NXP

/**

 * struct scmi_smc - Structure representing a SCMI smc transport

 *

 * @cinfo: SCMI channel info

 * @shmem: Transmit/Receive shared memory area

 * @shmem_lock: Lock to protect access to Tx/Rx shared memory area

 * @func_id: smc/hvc call function id

 * @irq: Optional; employed when platforms indicates msg completion by intr.

 * @tx_complete: Optional, employed only when irq is valid.

	/*

	 * If there is an interrupt named "a2p", then the service and

	 * completion of a message is signaled by an interrupt rather than by

	 * the return of the SMC call.

 Only SMCCC_RET_NOT_SUPPORTED is valid error code */

 SPDX-License-Identifier: GPL-2.0

/*

 * System Control and Management Interface (SCMI) Base Protocol

 *

 * Copyright (C) 2018-2021 ARM Ltd.

/**

 * scmi_base_attributes_get() - gets the implementation details

 *	that are associated with the base protocol.

 *

 * @ph: SCMI protocol handle

 *

 * Return: 0 on success, else appropriate SCMI error.

/**

 * scmi_base_vendor_id_get() - gets vendor/subvendor identifier ASCII string.

 *

 * @ph: SCMI protocol handle

 * @sub_vendor: specify true if sub-vendor ID is needed

 *

 * Return: 0 on success, else appropriate SCMI error.

/**

 * scmi_base_implementation_version_get() - gets a vendor-specific

 *	implementation 32-bit version. The format of the version number is

 *	vendor-specific

 *

 * @ph: SCMI protocol handle

 *

 * Return: 0 on success, else appropriate SCMI error.

/**

 * scmi_base_implementation_list_get() - gets the list of protocols it is

 *	OSPM is allowed to access

 *

 * @ph: SCMI protocol handle

 * @protocols_imp: pointer to hold the list of protocol identifiers

 *

 * Return: 0 on success, else appropriate SCMI error.

 Set the number of protocols to be skipped/already read */

/**

 * scmi_base_discover_agent_get() - discover the name of an agent

 *

 * @ph: SCMI protocol handle

 * @id: Agent identifier

 * @name: Agent identifier ASCII string

 *

 * An agent id of 0 is reserved to identify the platform itself.

 * Generally operating system is represented as "OSPM"

 *

 * Return: 0 on success, else appropriate SCMI error.

	/*

	 * BaseError notification payload is variable in size but

	 * up to a maximum length determined by the struct ponted by p.

	 * Instead payld_sz is the effective length of this notification

	 * payload so cannot be greater of the maximum allowed size as

	 * pointed by p.

 SPDX-License-Identifier: GPL-2.0

/*

 * System Control and Management Interface (SCMI) Power Protocol

 *

 * Copyright (C) 2018-2021 ARM Ltd.

 SPDX-License-Identifier: GPL-2.0

/*

 * System Control and Management Interface (SCMI) Voltage Protocol

 *

 * Copyright (C) 2020-2021 ARM Ltd.

	/*

	 * segmented levels entries are represented by a single triplet

	 * returned all in one go.

 Retrieve domain attributes at first ... */

 Skip domain on comms error */

 ...then retrieve domain levels descriptions */

 Allocate space for num_levels if not already done */

 check both to avoid infinite loop due to buggy fw */

 SPDX-License-Identifier: GPL-2.0

/*

 * SCMI Generic power domain support.

 *

 * Copyright (C) 2018-2021 ARM Ltd.

 SPDX-License-Identifier: GPL-2.0

/*

 * System Control and Management Interface (SCMI) Message Mailbox Transport

 * driver.

 *

 * Copyright (C) 2019 ARM Ltd.

/**

 * struct scmi_mailbox - Structure representing a SCMI mailbox transport

 *

 * @cl: Mailbox Client

 * @chan: Transmit/Receive mailbox channel

 * @cinfo: SCMI channel info

 * @shmem: Transmit/Receive shared memory area

 mbox_send_message returns non-negative value on success, so reset */

	/*

	 * NOTE: we might prefer not to need the mailbox ticker to manage the

	 * transfer queueing since the protocol layer queues things by itself.

	 * Unfortunately, we have to kick the mailbox framework after we have

	 * received our message.

 We may increase this if required */

 Limited by MBOX_TX_QUEUE_LEN */

 SPDX-License-Identifier: GPL-2.0

/*

 * For transports using message passing.

 *

 * Derived from shm.c.

 *

 * Copyright (C) 2019-2021 ARM Ltd.

 * Copyright (C) 2020-2021 OpenSynergy GmbH

/*

 * struct scmi_msg_payld - Transport SDU layout

 *

 * The SCMI specification requires all parameters, message headers, return

 * arguments or any protocol data to be expressed in little endian format only.

/**

 * msg_command_size() - Actual size of transport SDU for command.

 *

 * @xfer: message which core has prepared for sending

 *

 * Return: transport SDU size.

/**

 * msg_response_size() - Maximum size of transport SDU for response.

 *

 * @xfer: message which core has prepared for sending

 *

 * Return: transport SDU size.

/**

 * msg_tx_prepare() - Set up transport SDU for command.

 *

 * @msg: transport SDU for command

 * @xfer: message which is being sent

/**

 * msg_read_header() - Read SCMI header from transport SDU.

 *

 * @msg: transport SDU

 *

 * Return: SCMI header

/**

 * msg_fetch_response() - Fetch response SCMI payload from transport SDU.

 *

 * @msg: transport SDU with response

 * @len: transport SDU size

 * @xfer: message being responded to

 Take a copy to the rx buffer.. */

/**

 * msg_fetch_notification() - Fetch notification payload from transport SDU.

 *

 * @msg: transport SDU with notification

 * @len: transport SDU size

 * @max_len: maximum SCMI payload size to fetch

 * @xfer: notification message

 Take a copy to the rx buffer.. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Virtio Transport driver for Arm System Control and Management Interface

 * (SCMI).

 *

 * Copyright (C) 2020-2021 OpenSynergy.

 * Copyright (C) 2021 ARM Ltd.

/**

 * DOC: Theory of Operation

 *

 * The scmi-virtio transport implements a driver for the virtio SCMI device.

 *

 * There is one Tx channel (virtio cmdq, A2P channel) and at most one Rx

 * channel (virtio eventq, P2A channel). Each channel is implemented through a

 * virtqueue. Access to each virtqueue is protected by spinlocks.

 Value may be increased. */

/**

 * struct scmi_vio_channel - Transport channel information

 *

 * @vqueue: Associated virtqueue

 * @cinfo: SCMI Tx or Rx channel

 * @free_list: List of unused scmi_vio_msg, maintained for Tx channels only

 * @is_rx: Whether channel is an Rx channel

 * @ready: Whether transport user is ready to hear about channel

 * @max_msg: Maximum number of pending messages for this channel.

 * @lock: Protects access to all members except ready.

 * @ready_lock: Protects access to ready. If required, it must be taken before

 *              lock.

 lock to protect access to all members except ready. */

 lock to rotects access to ready flag. */

/**

 * struct scmi_vio_msg - Transport PDU information

 *

 * @request: SDU used for commands

 * @input: SDU used for (delayed) responses and notifications

 * @list: List which scmi_vio_msg may be part of

 * @rx_len: Input SDU size in bytes, once input has been received

 Only one SCMI VirtIO device can possibly exist */

 Here IRQs are assumed to be already disabled by the caller */

 IRQs already disabled here no need to irqsave */

		/*

		 * Release ready_lock and re-enable IRQs between loop iterations

		 * to allow virtio_chan_free() to possibly kick in and set the

		 * flag vioch->ready to false even in between processing of

		 * messages, so as to force outstanding messages to be ignored

		 * when system is shutting down.

 Indirectly setting channel not available any more */

 Only one SCMI VirtiO device allowed */

 Tx messages need multiple descriptors. */

 Ensure initialized scmi_vdev is visible */

	/*

	 * Once we get here, virtio_chan_free() will have already been called by

	 * the SCMI core for any existing channel and, as a consequence, all the

	 * virtio channels will have been already marked NOT ready, causing any

	 * outstanding message on any vqueue to be ignored by complete_cb: now

	 * we can just stop processing buffers and destroy the vqueues.

 Ensure scmi_vdev is visible as NULL */

 for non-realtime virtio devices */

 overridden by virtio_get_max_msg() */

 SPDX-License-Identifier: GPL-2.0

/*

 * System Control and Management Interface (SCMI) Reset Protocol

 *

 * Copyright (C) 2019-2021 ARM Ltd.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * coreboot_table.c

 *

 * Module providing coreboot table access.

 *

 * Copyright 2017 Google Inc.

 * Copyright 2017 Samuel Holland <samuel@sholland.org>

 Check just the header first to make sure things are sane */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * memconsole-x86-legacy.c

 *

 * EBDA specific parts of the memory based BIOS console.

 *

 * Copyright 2017 Google Inc.

 Misdocumented as number of pages! */

/*

 * Search through the EBDA for the BIOS Memory Console, and

 * set the global variables to point to it.  Return true if found.

 EBDA length is byte 0 of EBDA (in KB) */

 convert to bytes */

	/*

	 * Search through EBDA for BIOS memory console structure

	 * note: signature is not necessarily dword-aligned

 memconsole v1 */

 memconsole v2 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vpd.c

 *

 * Driver for exporting VPD content to sysfs.

 *

 * Copyright 2017 Google Inc.

 the string name_raw */

 vpd/name directory */

 vpd/name_raw bin_attribute */

 key/value in vpd_attrib_info list */

/*

 * vpd_section_check_key_name()

 *

 * The VPD specification supports only [a-zA-Z0-9_]+ characters in key names but

 * old firmware versions may have entries like "S/N" which are problematic when

 * exporting them as sysfs attributes. These keys present in old firmwares are

 * ignored.

 *

 * Returns VPD_OK for a valid key name, VPD_FAIL otherwise.

 *

 * @key: The key name to check

 * @key_len: key name length

	/*

	 * Return VPD_OK immediately to decode next entry if the current key

	 * name contains invalid characters.

 We want to export the raw partition with name ${name}_raw */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * framebuffer-coreboot.c

 *

 * Memory based framebuffer accessed through coreboot table.

 *

 * Copyright 2012-2013 David Herrmann <dh.herrmann@gmail.com>

 * Copyright 2017 Google Inc.

 * Copyright 2017 Samuel Holland <samuel@sholland.org>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2010 Google Inc. All Rights Reserved.

 * Author: dlaurie@google.com (Duncan Laurie)

 *

 * Re-worked to expose sysfs APIs by mikew@google.com (Mike Waychison)

 *

 * EFI SMI interface for Google platforms

 Clean Shutdown */

 TODO(mikew@google.com): Tie in HARDLOCKUP_DETECTOR with NMIWDT */

 NMI Watchdog */

 Panic */

 Oops */

 Die -- No longer meaningful */

 Machine Check */

 Software Watchdog */

 Uncorrected ECC */

 Triple Fault */

 SMI return codes */

 Internally used commands passed to the firmware */

 Magic entry type for kernel events */

 SMI buffers must be in 32bit physical address space */

 start of buffer */

 length of buffer */

 physical address of buffer */

 platform device */

 variable name buffer */

 generic data buffer */

 parameter buffer */

 serialize access to SMIs */

 SMI command port */

 firmware handler interlock type */

 kmem cache for gsmi_buf allocations */

 Packed structures for communicating with the firmware */

 Event log formats */

/*

 * Some platforms don't have explicit SMI handshake

 * and need to wait for SMI to complete.

/*

 * Some older platforms with Apollo Lake chipsets do not support S0ix logging

 * in their GSMI handlers, and behaved poorly when resuming via power button

 * press if the logging was attempted. Updated firmware with proper behavior

 * has long since shipped, removing the need for this opt-in parameter. It

 * now exists as an opt-out parameter for folks defiantly running old

 * firmware, or unforeseen circumstances. After the change from opt-in to

 * opt-out has baked sufficiently, this parameter should probably be removed

 * entirely.

 allocate buffer in 32bit address space */

 fill in the buffer handle */

/*

 * Make a call to gsmi func(sub).  GSMI error codes are translated to

 * in-kernel errnos (0 on success, -ERRNO on error).

	/*

	 * AH  : Subfunction number

	 * AL  : Function number

	 * EBX : Parameter block address

	 * DX  : SMI command port

	 *

	 * Three protocols here. See also the comment in gsmi_init().

		/*

		 * If handshake_type == HANDSHAKE_CF then set CF on the

		 * way in and wait for the handler to clear it; this avoids

		 * corrupting register state on those chipsets which have

		 * a delay between writing the SMI trigger register and

		 * entering SMM.

		/*

		 * If handshake_type == HANDSHAKE_SPIN we spin a

		 * hundred-ish usecs to ensure the SMI has triggered.

		/*

		 * If handshake_type == HANDSHAKE_NONE we do nothing;

		 * either we don't need to or it's legacy firmware that

		 * doesn't understand the CF protocol.

 check return code from SMI handler */

 not really an error, but let the caller know */

 Vendor guid */

 variable name, already in UTF-16 */

 data pointer */

 parameter buffer */

 variable was not found */

 Get the arguments back */

 The size reported is the min of all of our buffers */

 Copy data back to return buffer. */

 All variables are have the following attributes */

 For the moment, only support buffers that exactly match in size */

 Let's make sure the thing is at least null-terminated */

 guid */

 variable name, already in UTF-16 */

 parameter buffer */

 variable not found -- end of list */

 copy variable data back to return buffer */

 Copy the name back */

 copy guid to return buffer */

 guid */

 variable name, already in UTF-16 */

 data pointer */

 parameter buffer */

 CONFIG_EFI */

 Pull the type out */

 The remaining buffer is the data payload */

 data pointer */

 parameter buffer */

	/*

	 * Value entered is a percentage, 0 through 100, anything else

	 * is invalid.

 data_type here selects the smbios event log. */

 parameter buffer */

 clear parameter buffer */

 avoid duplicate entries in the log */

 data pointer */

 parameter buffer */

/*

 * This hash function was blatantly copied from include/linux/hash.h.

 * It is used by this driver to obfuscate a board name that requires a

 * quirk within this driver.

 *

 * Please do not remove this copy of the function as any changes to the

 * global utility hash_64() function would break this driver's ability

 * to identify a board and provide the appropriate quirk -- mikew@google.com

  Sigh, gcc can't optimise this alone like it does for 32 bits. */

 High bits are more random, so use them. */

	/*

	 * Only newer firmware supports the gsmi interface.  All older

	 * firmware that didn't support this interface used to plug the

	 * table name in the first four bytes of the oem_table_id field.

	 * Newer firmware doesn't do that though, so use that as the

	 * discriminant factor.  We have to do this in order to

	 * whitewash our board names out of the public driver.

 Disable on board with 1.0 BIOS due to Google bug 2602657 */

 check for valid SMI command port in ACPI FADT */

	/* Test the smihandler with a bogus command. If it leaves the

	 * calling argument in %ax untouched, there is no handler for

	 * GSMI commands.

 Found */

 SMI callbacks require 32bit addresses */

	/*

	 * If platform has not enabled S0ix logging, then no action is

	 * necessary.

	/*

	 * If system is not suspending via firmware using the standard ACPI Sx

	 * types, then make a GSMI call to log the suspend info.

	/*

	 * Always return success, since we do not want suspend

	 * to fail just because of logging failure.

	/*

	 * If system did not resume via firmware, then make a GSMI call to log

	 * the resume info and wake source.

	/*

	 * Always return success, since we do not want resume

	 * to fail just because of logging failure.

 register device */

 SMI access needs to be serialized */

	/*

	 * SLAB cache is created using SLAB_CACHE_DMA32 to ensure that the

	 * allocations for gsmi_buf come from the DMA32 memory zone. These

	 * buffers have nothing to do with DMA. They are required for

	 * communication with firmware executing in SMI mode which can only

	 * access the bottom 4GiB of physical memory. Since DMA32 memory zone

	 * guarantees allocation under the 4GiB boundary, this driver creates

	 * a SLAB cache with SLAB_CACHE_DMA32 flag.

	/*

	 * pre-allocate buffers because sometimes we are called when

	 * this is not feasible: oops, panic, die, mce, etc

	/*

	 * Determine type of handshake used to serialize the SMI

	 * entry. See also gsmi_exec().

	 *

	 * There's a "behavior" present on some chipsets where writing the

	 * SMI trigger register in the southbridge doesn't result in an

	 * immediate SMI. Rather, the processor can execute "a few" more

	 * instructions before the SMI takes effect. To ensure synchronous

	 * behavior, implement a handshake between the kernel driver and the

	 * firmware handler to spin until released. This ioctl determines

	 * the type of handshake.

	 *

	 * NONE: The firmware handler does not implement any

	 * handshake. Either it doesn't need to, or it's legacy firmware

	 * that doesn't know it needs to and never will.

	 *

	 * CF: The firmware handler will clear the CF in the saved

	 * state before returning. The driver may set the CF and test for

	 * it to clear before proceeding.

	 *

	 * SPIN: The firmware handler does not implement any handshake

	 * but the driver should spin for a hundred or so microseconds

	 * to ensure the SMI has triggered.

	 *

	 * Finally, the handler will return -ENOSYS if

	 * GSMI_CMD_HANDSHAKE_TYPE is unimplemented, which implies

	 * HANDSHAKE_NONE.

 Remove and clean up gsmi if the handshake could not complete. */

 Register in the firmware directory */

 Setup eventlog access */

 Other attributes */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * memconsole-coreboot.c

 *

 * Memory based BIOS console accessed through coreboot table.

 *

 * Copyright 2017 Google Inc.

 CBMEM firmware console log descriptor. */

/*

 * The cbmem_console structure is read again on every access because it may

 * change at any time if runtime firmware logs new messages. This may rarely

 * lead to race conditions where the firmware overwrites the beginning of the

 * ring buffer with more lines after we have already read |cursor|. It should be

 * rare and harmless enough that we don't spend extra effort working around it.

 describes ring buffer segments in logical order */

 physical offset from start of mem buffer */

 length of segment */

 Shouldn't really happen, but... */

 Read size only once to prevent overrun attack through /dev/mem. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * memconsole.c

 *

 * Architecture-independent parts of the memory based BIOS console.

 *

 * Copyright 2017 Google Inc.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * vpd_decode.c

 *

 * Google VPD decoding routines.

 *

 * Copyright 2017 Google Inc.

 entry_len is untrusted data and must be checked again. */

 type */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Arm Firmware Framework for ARMv8-A(FFA) interface driver

 *

 * The Arm FFA specification[1] describes a software architecture to

 * leverages the virtualization extension to isolate software images

 * provided by an ecosystem of vendors from each other and describes

 * interfaces that standardize communication between the various software

 * images including communication between images in the Secure world and

 * Normal world. Any Hypervisor could use the FFA interfaces to enable

 * communication between VMs it manages.

 *

 * The Hypervisor a.k.a Partition managers in FFA terminology can assign

 * system resources(Memory regions, Devices, CPU cycles) to the partitions

 * and manage isolation amongst them.

 *

 * [1] https://developer.arm.com/docs/den0077/latest

 *

 * Copyright (C) 2021 ARM Ltd.

/*

 * For some calls it is necessary to use SMC64 to pass or return 64-bit values.

 * For such calls FFA_FN_NATIVE(name) will choose the appropriate

 * (native-width) function ID.

 FFA error codes. */

/*

 * FF-A specification mentions explicitly about '4K pages'. This should

 * not be confused with the kernel PAGE_SIZE, which is the translation

 * granule kernel is configured and may be one among 4K, 16K and 64K.

/*

 * Keeping RX TX buffer size as 4K for now

 * 64K may be preferred to keep it min a page in 64K PAGE_SIZE config

 better than switch case as long as return value is continuous */

 FFA_RET_SUCCESS */

 FFA_RET_NOT_SUPPORTED */

 FFA_RET_INVALID_PARAMETERS */

 FFA_RET_NO_MEMORY */

 FFA_RET_BUSY */

 FFA_RET_INTERRUPTED */

 FFA_RET_DENIED */

 FFA_RET_RETRY */

 FFA_RET_ABORTED */

 lock to protect Rx buffer */

 lock to protect Tx buffer */

/*

 * The driver must be able to support all the versions from the earliest

 * supported FFA_MIN_VERSION to the latest supported FFA_DRIVER_VERSION.

 * The specification states that if firmware supports a FFA implementation

 * that is incompatible with and at a greater version number than specified

 * by the caller(FFA_DRIVER_VERSION passed as parameter to FFA_VERSION),

 * it must return the NOT_SUPPORTED error code.

 check for ret.a0 == FFA_RX_RELEASE ? */

 buffer must be sizeof(struct ffa_partition_info) * num_partitions */

 buffer is allocated and caller must free the same if returned count > 0 */

	/* Note that upon a successful MEM_LEND request the caller

	 * must ensure that the memory region specified is not accessed

	 * until a successful MEM_RECALIM call has been made.

	 * On systems with a hypervisor present this will been enforced,

	 * however on systems without a hypervisor the responsibility

	 * falls to the calling kernel driver to prevent access.

		/* Note that the &uuid_null parameter will require

		 * ffa_device_match() to find the UUID of this partition id

		 * with help of ffa_device_match_uuid(). Once the FF-A spec

		 * is updated to provide correct UUID here for each partition

		 * as part of the discovery API, we need to pass the

		 * discovered UUID here instead.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2021 ARM Ltd.

		/*

		 * FF-A v1.0 doesn't provide discovery of UUIDs, just the

		 * partition IDs, so fetch the partitions IDs for this

		 * id_table UUID and assign the UUID to the device if the

		 * partition ID matches

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2021 ARM Ltd.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018, NVIDIA CORPORATION.

 reset the channel state */

 sync the channel state with BPMP */

 mbox registration */

 reset message channels */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018, NVIDIA CORPORATION.

	/*

	 * Tegra Legacy Interrupt Controller (LIC) is used to notify BPMP of

	 * available messages

 Retrieve channel base address from BPMP */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2017, NVIDIA CORPORATION.  All rights reserved.

 map filename in Linux debugfs to corresponding entry in BPMP */

 go up a level */

 malformed data received from BPMP */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2014-2016, NVIDIA CORPORATION.  All rights reserved.

/*

 * IVC channel reset protocol.

 *

 * Each end uses its tx_channel.state to indicate its synchronization state.

	/*

	 * This value is zero for backwards compatibility with services that

	 * assume channels to be initially zeroed. Such channels are in an

	 * initially valid state, but cannot be asynchronously reset, and must

	 * maintain a valid state at all times.

	 *

	 * The transmitting end can enter the established state from the sync or

	 * ack state when it observes the receiving endpoint in the ack or

	 * established state, indicating that has cleared the counters in our

	 * rx_channel.

	/*

	 * If an endpoint is observed in the sync state, the remote endpoint is

	 * allowed to clear the counters it owns asynchronously with respect to

	 * the current endpoint. Therefore, the current endpoint is no longer

	 * allowed to communicate.

	/*

	 * When the transmitting end observes the receiving end in the sync

	 * state, it can clear the w_count and r_count and transition to the ack

	 * state. If the remote endpoint observes us in the ack state, it can

	 * return to the established state once it has cleared its counters.

/*

 * This structure is divided into two-cache aligned parts, the first is only

 * written through the tx.channel pointer, while the second is only written

 * through the rx.channel pointer. This delineates ownership of the cache

 * lines, which is critical to performance and necessary in non-cache coherent

 * implementations.

 fields owned by the transmitting end */

 fields owned by the receiving end */

	/*

	 * This function performs multiple checks on the same values with

	 * security implications, so create snapshots with READ_ONCE() to

	 * ensure that these checks use the same values.

	/*

	 * Perform an over-full check to prevent denial of service attacks

	 * where a server could be easily fooled into believing that there's

	 * an extremely large number of frames ready, since receivers are not

	 * expected to check for full or over-full conditions.

	 *

	 * Although the channel isn't empty, this is an invalid case caused by

	 * a potentially malicious peer, so returning empty is safer, because

	 * it gives the impression that the channel has gone silent.

	/*

	 * Invalid cases where the counters indicate that the queue is over

	 * capacity also appear full.

	/*

	 * This function isn't expected to be used in scenarios where an

	 * over-full situation can lead to denial of service attacks. See the

	 * comment in tegra_ivc_empty() for an explanation about special

	 * over-full considerations.

	/*

	 * tx.channel->state is set locally, so it is not synchronized with

	 * state from the remote peer. The remote peer cannot reset its

	 * transmit counters until we've acknowledged its synchronization

	 * request, so no additional synchronization is required because an

	 * asynchronous transition of rx.channel->state to

	 * TEGRA_IVC_STATE_ACK is not allowed.

	/*

	 * Avoid unnecessary invalidations when performing repeated accesses

	 * to an IVC channel by checking the old queue pointers first.

	 *

	 * Synchronization is only necessary when these pointers indicate

	 * empty or full.

 directly peek at the next frame rx'ed */

	/*

	 * Order observation of ivc->rx.position potentially indicating new

	 * data before data read.

	/*

	 * No read barriers or synchronization here: the caller is expected to

	 * have already observed the channel non-empty. This check is just to

	 * catch programming errors.

	/*

	 * Ensure our write to ivc->rx.position occurs before our read from

	 * ivc->tx.position.

	/*

	 * Notify only upon transition from full to non-full. The available

	 * count can only asynchronously increase, so the worst possible

	 * side-effect will be a spurious notification.

 directly poke at the next frame to be tx'ed */

 advance the tx buffer */

	/*

	 * Order any possible stores to the frame before update of

	 * ivc->tx.position.

	/*

	 * Ensure our write to ivc->tx.position occurs before our read from

	 * ivc->rx.position.

	/*

	 * Notify only upon transition from empty to non-empty. The available

	 * count can only asynchronously decrease, so the worst possible

	 * side-effect will be a spurious notification.

/*

 * =======================================================

 *  IVC State Transition Table - see tegra_ivc_notified()

 * =======================================================

 *

 *	local	remote	action

 *	-----	------	-----------------------------------

 *	SYNC	EST	<none>

 *	SYNC	ACK	reset counters; move to EST; notify

 *	SYNC	SYNC	reset counters; move to ACK; notify

 *	ACK	EST	move to EST; notify

 *	ACK	ACK	move to EST; notify

 *	ACK	SYNC	reset counters; move to ACK; notify

 *	EST	EST	<none>

 *	EST	ACK	<none>

 *	EST	SYNC	reset counters; move to ACK; notify

 *

 * ===============================================================

 Copy the receiver's state out of shared memory. */

		/*

		 * Order observation of TEGRA_IVC_STATE_SYNC before stores

		 * clearing tx.channel.

		/*

		 * Reset tx.channel counters. The remote end is in the SYNC

		 * state and won't make progress until we change our state,

		 * so the counters are not in use at this time.

		/*

		 * Ensure that counters appear cleared before new state can be

		 * observed.

		/*

		 * Move to ACK state. We have just cleared our counters, so it

		 * is now safe for the remote end to start using these values.

		/*

		 * Notify remote end to observe state transition.

		/*

		 * Order observation of ivc_state_sync before stores clearing

		 * tx_channel.

		/*

		 * Reset tx.channel counters. The remote end is in the ACK

		 * state and won't make progress until we change our state,

		 * so the counters are not in use at this time.

		/*

		 * Ensure that counters appear cleared before new state can be

		 * observed.

		/*

		 * Move to ESTABLISHED state. We know that the remote end has

		 * already cleared its counters, so it is safe to start

		 * writing/reading on this channel.

		/*

		 * Notify remote end to observe state transition.

		/*

		 * At this point, we have observed the peer to be in either

		 * the ACK or ESTABLISHED state. Next, order observation of

		 * peer state before storing to tx.channel.

		/*

		 * Move to ESTABLISHED state. We know that we have previously

		 * cleared our counters, and we know that the remote end has

		 * cleared its counters, so it is safe to start writing/reading

		 * on this channel.

		/*

		 * Notify remote end to observe state transition.

		/*

		 * There is no need to handle any further action. Either the

		 * channel is already fully established, or we are waiting for

		 * the remote end to catch up with our current state. Refer

		 * to the diagram in "IVC State Transition Table" above.

	/*

	 * The headers must at least be aligned enough for counters

	 * to be accessed atomically.

	/*

	 * All sizes that can be returned by communication functions should

	 * fit in an int.

	/*

	 * These values aren't necessarily correct until the channel has been

	 * reset.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2016, NVIDIA CORPORATION.  All rights reserved.

 deprecated version of tag query */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright 2019 NXP

 *  Author: Daniel Baluta <daniel.baluta@nxp.com>

 *

 * Implementation of the DSP IPC interface (host side)

/*

 * imx_dsp_ring_doorbell - triggers an interrupt on the other side (DSP)

 *

 * @dsp: DSP IPC handle

 * @chan_idx: index of the channel where to trigger the interrupt

 *

 * Returns non-negative value for success, negative value for error

/*

 * imx_dsp_handle_rx - rx callback used by imx mailbox

 *

 * @c: mbox client

 * @msg: message received

 *

 * Users of DSP IPC will need to privde handle_reply and handle_request

 * callbacks.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2016 Freescale Semiconductor, Inc.

 * Copyright 2017~2018 NXP

 *  Author: Dong Aisheng <aisheng.dong@nxp.com>

 *

 * File containing client-side RPC functions for the MISC service. These

 * function are ported to clients that communicate to the SC.

 *

/*

 * This function sets a miscellaneous control value.

 *

 * @param[in]     ipc         IPC handle

 * @param[in]     resource    resource the control is associated with

 * @param[in]     ctrl        control to change

 * @param[in]     val         value to apply to the control

 *

 * @return Returns 0 for success and < 0 for errors.

/*

 * This function gets a miscellaneous control value.

 *

 * @param[in]     ipc         IPC handle

 * @param[in]     resource    resource the control is associated with

 * @param[in]     ctrl        control to get

 * @param[out]    val         pointer to return the control value

 *

 * @return Returns 0 for success and < 0 for errors.

/*

 * This function starts/stops a CPU identified by @resource

 *

 * @param[in]     ipc         IPC handle

 * @param[in]     resource    resource the control is associated with

 * @param[in]     enable      true for start, false for stop

 * @param[in]     phys_addr   initial instruction address to be executed

 *

 * @return Returns 0 for success and < 0 for errors.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2016 Freescale Semiconductor, Inc.

 * Copyright 2017-2018 NXP

 *	Dong Aisheng <aisheng.dong@nxp.com>

 *

 * Implementation of the SCU based Power Domains

 *

 * NOTE: a better implementation suggested by Ulf Hansson is using a

 * single global power domain and implement the ->attach|detach_dev()

 * callback for the genpd and use the regular of_genpd_add_provider_simple().

 * From within the ->attach_dev(), we could get the OF node for

 * the device that is being attached and then parse the power-domain

 * cell containing the "resource id" and store that in the per device

 * struct generic_pm_domain_data (we have void pointer there for

 * storing these kind of things).

 *

 * Additionally, we need to implement the ->stop() and ->start()

 * callbacks of genpd, which is where you "power on/off" devices,

 * rather than using the above ->power_on|off() callbacks.

 *

 * However, there're two known issues:

 * 1. The ->attach_dev() of power domain infrastructure still does

 *    not support multi domains case as the struct device *dev passed

 *    in is a virtual PD device, it does not help for parsing the real

 *    device resource id from device tree, so it's unware of which

 *    real sub power domain of device should be attached.

 *

 *    The framework needs some proper extension to support multi power

 *    domain cases.

 *

 *    Update: Genpd assigns the ->of_node for the virtual device before it

 *    invokes ->attach_dev() callback, hence parsing for device resources via

 *    DT should work fine.

 *

 * 2. It also breaks most of current drivers as the driver probe sequence

 *    behavior changed if removing ->power_on|off() callback and use

 *    ->start() and ->stop() instead. genpd_dev_pm_attach will only power

 *    up the domain and attach device, but will not call .start() which

 *    relies on device runtime pm. That means the device power is still

 *    not up before running driver probe function. For SCU enabled

 *    platforms, all device drivers accessing registers/clock without power

 *    domain enabled will trigger a HW access error. That means we need fix

 *    most drivers probe sequence with proper runtime pm.

 *

 *    Update: Runtime PM support isn't necessary. Instead, this can easily be

 *    fixed in drivers by adding a call to dev_pm_domain_start() during probe.

 *

 * In summary, the second part needs to be addressed via minor updates to the

 * relevant drivers, before the "single global power domain" model can be used.

 *

 SCU Power Mode Protocol definition */

 add domain index */

 LSIO SS */

 CONN SS */

 AUDIO SS */

 DMA SS */

 VPU SS */

 GPU SS */

 HSIO SS */

 MIPI SS */

 LVDS SS */

 DC SS */

 CM40 SS */

 CM41 SS */

 IMAGE SS */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright 2019 NXP

 *

 * Implementation of the SCU IRQ functions using MU.

 *

 SCU general IRQ uses general interrupt channel 3 */

 use mu1 as general mu irq channel if failed */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright 2018 NXP

 *  Author: Dong Aisheng <aisheng.dong@nxp.com>

 *

 * Implementation of the SCU IPC functions using MUs (client side).

 *

 SCU uses 4 Tx and 4 Rx channels */

 temporarily store the SCU msg */

/*

 * This type is used to indicate error response for most functions.

 Success */

 Incompatible API version */

 Configuration error */

 Bad parameter */

 Permission error (no access) */

 Permission error (locked) */

 Unavailable (out of resources) */

 Not found */

 No power */

 Generic IPC error */

 Resource is currently busy/active */

 General I/O failure */

 IMX_SC_ERR_NONE */

 IMX_SC_ERR_VERSION */

 IMX_SC_ERR_CONFIG */

 IMX_SC_ERR_PARM */

 IMX_SC_ERR_NOACCESS */

 IMX_SC_ERR_LOCKED */

 IMX_SC_ERR_UNAVAILABLE */

 IMX_SC_ERR_NOTFOUND */

 IMX_SC_ERR_NOPOWER */

 IMX_SC_ERR_IPC */

 IMX_SC_ERR_BUSY */

 IMX_SC_ERR_FAIL */

/*

 * Get the default handle used by SCU

 Callback called when the word of a message is ack-ed, eg read by SCU */

 Check size */

		/*

		 * SCU requires that all messages words are written

		 * sequentially but linux MU driver implements multiple

		 * independent channels for each register so ordering between

		 * different channels must be ensured by SCU API interface.

		 *

		 * Wait for tx_done before every send to ensure that no

		 * queueing happens at the mailbox channel level.

/*

 * RPC command/response

 response status is stored in hdr->func field */

		/*

		 * Some special SCU firmware APIs do NOT have return value

		 * in hdr->func, but they do have response data, those special

		 * APIs are defined as void function in SCU firmware, so they

		 * should be treated as return success always.

 Initial tx_done completion as "done" */

 chan_name is not used anymore by framework */

 Sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright 2020 NXP

 *

 * File containing client-side RPC functions for the RM service. These

 * function are ported to clients that communicate to the SC.

/*

 * This function check @resource is owned by current partition or not

 *

 * @param[in]     ipc         IPC handle

 * @param[in]     resource    resource the control is associated with

 *

 * @return Returns 0 for not owned and 1 for owned.

	/*

	 * SCU firmware only returns value 0 or 1

	 * for resource owned check which means not owned or owned.

	 * So it is always successful.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 NXP.

 format soc_id value passed from SCU firmware */

 format revision value passed from SCU firmware */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Copyright (C) 2015 ARM Limited

/*

 * While a 64-bit OS can make calls with SMC32 calling conventions, for some

 * calls it is necessary to use SMC64 to pass or return 64-bit values.

 * For such calls PSCI_FN_NATIVE(version, name) will choose the appropriate

 * (native-width) function ID.

/*

 * The CPU any Trusted OS is resident on. The trusted OS may reject CPU_OFF

 * calls to its resident CPU, so we must avoid issuing those. We never migrate

 * a Trusted OS even if it claims to be capable of migration -- doing so will

 * require cooperation with a Trusted OS driver.

		/*

		 * reset_type[31] = 0 (architectural)

		 * reset_type[30:0] = 0 (SYSTEM_WARM_RESET)

		 * cookie = 0 (ignored by the implementation)

/*

 * Detect the presence of a resident Trusted OS which may cause CPU_OFF to

 * return DENIED (which would be fatal).

	/*

	 * Conveniently, the SMCCC and PSCI versions are encoded the

	 * same way. No, this isn't accidental.

/*

 * Probe function for PSCI firmware versions >= 0.2

/*

 * PSCI init function for PSCI versions >=0.2

 *

 * Probe based on PSCI PSCI_VERSION function

	/*

	 * Starting with v0.2, the PSCI specification introduced a call

	 * (PSCI_VERSION) that allows probing the firmware version, so

	 * that PSCI function IDs and version specific initialization

	 * can be carried out according to the specific version reported

	 * by firmware

/*

 * PSCI < v0.2 get PSCI Function IDs via DT.

 Default to PC mode. */

/*

 * We use PSCI 0.2+ when ACPI is deployed on ARM64 and it's

 * explicitly clarified in SBBR

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Copyright (C) 2016 ARM Limited

/*

 * We assume that PSCI operations are used if they are available. This is not

 * necessarily true on arm64, since the decision is based on the

 * "enable-method" property of each CPU in the DT, but given that there is no

 * arch-specific way to check this, we assume that the DT is sensible.

 There is a UP Trusted OS, find on which core it resides. */

/*

 * offlined_cpus is a temporary array but passing it as an argument avoids

 * multiple allocations.

 Try to power down all CPUs in the mask. */

		/*

		 * cpu_down() checks the number of online CPUs before the TOS

		 * resident CPU.

 Try to power up all the CPUs that have been offlined. */

	/*

	 * Something went bad at some point and some CPUs could not be turned

	 * back on.

	/*

	 * Of course the last CPU cannot be powered down and cpu_down() should

	 * refuse doing that.

	/*

	 * Take down CPUs by cpu group this time. When the last CPU is turned

	 * off, the cpu group itself should shut down.

 Remove trailing newline. */

		/*

		 * The local timer will be shut down, we need to enter tick

		 * broadcast.

			/*

			 * In the absence of hardware broadcast mechanism,

			 * this CPU might be used to broadcast wakeups, which

			 * may be why entering tick broadcast has failed.

			 * There is little the kernel can do to work around

			 * that, so enter WFI instead (idle state 0).

 No need for an actual callback, we just want to wake up the CPU. */

 Wait for the main thread to give the start signal. */

 Set maximum priority to preempt all other threads on this CPU. */

		/*

		 * Test all possible states, except 0 (which is usually WFI and

		 * doesn't use PSCI).

			/*

			 * Set the timer to wake this CPU up in some time (which

			 * should be largely sufficient for entering suspend).

			 * If the local tick is disabled when entering suspend,

			 * suspend_cpu() takes care of switching to a broadcast

			 * tick, so the timer will still wake us up.

 IRQs must be disabled during suspend operations. */

			/*

			 * We have woken up. Re-enable IRQs to handle any

			 * pending interrupt, do not wait until the end of the

			 * loop.

 We did not enter the expected state. */

	/*

	 * Disable the timer to make sure that the timer will not trigger

	 * later.

 Needs to be set first to avoid missing a wakeup. */

	/*

	 * Stop cpuidle to prevent the idle tasks from entering a deep sleep

	 * mode, as it might interfere with the suspend threads on other CPUs.

	 * This does not prevent the suspend threads from using cpuidle (only

	 * the idle tasks check this status). Take the idle lock so that

	 * the cpuidle driver and device look-up can be carried out safely.

 Check that cpuidle is available on that CPU. */

	/*

	 * Wake up the suspend threads. To avoid the main thread being preempted

	 * before all the threads have been unparked, the suspend threads will

	 * wait for the completion of suspend_threads_started.

 Stop and destroy all threads, get return status. */

	/*

	 * Since we're in an initcall, we assume that all the CPUs that all

	 * CPUs that can be onlined have been onlined.

	 *

	 * The tests assume that hotplug is enabled but nobody else is using it,

	 * otherwise the results will be unpredictable. However, since there

	 * is no userspace yet in initcalls, that should be fine, as long as

	 * no torture test is running at the same time (see Kconfig).

 Check PSCI operations are set up and working. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Renesas RZ/A Series WDT Driver

 *

 * Copyright (C) 2017 Renesas Electronics America, Inc.

 * Copyright (C) 2017 Chris Brandt

 Watchdog Timer Registers */

 special value */

 The maximum CKS register setting value to get the longest timeout */

 Clock divider when CKS = 0x7 */

 Clock divider when CKS = 0xF */

		/*

		 * Since max_timeout was set in probe, we know that the timeout

		 * value passed will never calculate to a tick value greater

		 * than 256.

 Start timer with longest timeout */

 Stop timer */

 Must dummy read WRCSR:WOVF at least once before clearing */

 Stop timer */

 Must dummy read WRCSR:WOVF at least once before clearing */

	/*

	 * Start timer with fastest clock source and only 1 clock left before

	 * overflow with reset option enabled.

	/*

	 * Actually make sure the above sequence hits hardware before sleeping.

 Wait for WDT overflow (reset) */

 Assume slowest clock rate possible (CKS=0xF) */

 Assume slowest clock rate possible (CKS=7) */

		/*

		 * Since the max possible timeout of our 8-bit count

		 * register is less than a second, we must use

		 * max_hw_heartbeat_ms.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	Xen Watchdog Driver

 *

 *	(c) Copyright 2010 Novell, Inc.

 in seconds */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * drivers/watchdog/shwdt.c

 *

 * Watchdog driver for integrated watchdog in the SuperH processors.

 *

 * Copyright (C) 2001 - 2012  Paul Mundt <lethal@linux-sh.org>

 *

 * 14-Dec-2001 Matt Domsch <Matt_Domsch@dell.com>

 *     Added nowayout module option to override CONFIG_WATCHDOG_NOWAYOUT

 *

 * 19-Apr-2002 Rob Radez <rob@osinvestor.com>

 *     Added expect close support, made emulated timeout runtime changeable

 *     general cleanups, add some ioctls

/*

 * Default clock division ratio is 5.25 msecs. For an additional table of

 * values, consult the asm-sh/watchdog.h. Overload this at module load

 * time.

 *

 * In order for this to work reliably we need to have HZ set to 1000 or

 * something quite higher than 100 (or we need a proper high-res timer

 * implementation that will deal with this properly), otherwise the 10ms

 * resolution of a jiffy is enough to trigger the overflow. For things like

 * the SH-4 and SH-5, this isn't necessarily that big of a problem, though

 * for the SH-2 and SH-3, this isn't recommended unless the WDT is absolutely

 * necssary.

 *

 * As a result of this timing problem, the only modes that are particularly

 * feasible are the 4096 and the 2048 divisors, which yield 5.25 and 2.62ms

 * overflow periods respectively.

 *

 * Also, since we can't really expect userspace to be responsive enough

 * before the overflow happens, we maintain two separate timers .. One in

 * the kernel for clearing out WOVF every 2ms or so (again, this depends on

 * HZ == 1000), and another for monitoring userspace writes to the WDT device.

 *

 * As such, we currently use a configurable heartbeat interval which defaults

 * to 30s. In this case, the userspace daemon is only responsible for periodic

 * writes to the device before the next heartbeat is scheduled. If the daemon

 * misses its deadline, the kernel timer will allow the WDT to overflow.

 30 sec default heartbeat */

 in seconds */

	/*

	 * These processors have a bit of an inconsistent initialization

	 * process.. starting with SH-3, RSTS was moved to WTCSR, and the

	 * RSTCSR register was removed.

	 *

	 * On the SH-2 however, in addition with bits being in different

	 * locations, we must deal with RSTCSR outright..

 arbitrary upper limit */

	/*

	 * As this driver only covers the global watchdog case, reject

	 * any attempts to register per-CPU watchdogs.

		/*

		 * Clock framework support is optional, continue on

		 * anyways if we don't find a matching clock.

 Default timeout if invalid */

 SPDX-License-Identifier: GPL-2.0+

/*

 *	Berkshire USB-PC Watchdog Card Driver

 *

 *	(c) Copyright 2004-2007 Wim Van Sebroeck <wim@iguana.be>.

 *

 *	Based on source code of the following authors:

 *	  Ken Hollis <kenji@bitgate.com>,

 *	  Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *	  Matt Domsch <Matt_Domsch@dell.com>,

 *	  Rob Radez <rob@osinvestor.com>,

 *	  Greg Kroah-Hartman <greg@kroah.com>

 *

 *	Neither Wim Van Sebroeck nor Iguana vzw. admit liability nor

 *	provide warranty for any of this software. This material is

 *	provided "AS-IS" and at no charge.

 *

 *	Thanks also to Simon Machell at Berkshire Products Inc. for

 *	providing the test hardware. More info is available at

 *	http://www.berkprod.com/ or http://www.pcwatchdog.com/

 For module specific items */

 For new moduleparam's */

 For standard types (like size_t) */

 For the -ENODEV/... values */

 For printk/panic/... */

 For mdelay function */

 For struct miscdevice */

 For the watchdog specific items */

 For notifier support */

 For reboot_notifier stuff */

 For __init/__exit/... */

 For file operations */

 For USB functions */

 For kmalloc, ... */

 For mutex locking */

 For HID_REQ_SET_REPORT & HID_DT_REPORT */

 For copy_to_user/put_user/... */

 Module and Version Information */

#define WATCHDOG_HEARTBEAT 0	/* default heartbeat =

 The vendor and product id's for the USB-PC Watchdog card */

 table of devices that work with this driver */

 Terminating entry */

/* according to documentation max. time to process a command for the USB

 Watchdog's internal commands */

#define CMD_READ_TEMP			0x02	/* Read Temperature;

 Get Status Information */

 Get Firmware Version */

 Get Dip Switch Settings */

 Read Current Watchdog Time */

 Write Current WatchdogTime */

 Enable / Disable Watchdog */

 Watchdog's Dip Switch heartbeat values */

 OFF-OFF-OFF	=  5 Sec  */

 OFF-OFF-ON	= 10 Sec  */

 OFF-ON-OFF	= 30 Sec  */

 OFF-ON-ON	=  1 Min  */

 ON-OFF-OFF	=  5 Min  */

 ON-OFF-ON	= 10 Min  */

 ON-ON-OFF	= 30 Min  */

 ON-ON-ON	=  1 hour */

 We can only use 1 card due to the /dev/watchdog restriction */

 some internal variables */

 Structure to hold all of our device specific stuff */

 save off the usb device pointer */

 the interface for this device */

 the interface number used for cmd's */

 the buffer to intr data */

 the dma address for the intr buffer */

 the size of the intr buffer */

 the urb used for the intr pipe */

 The command that is reported back */

 The data MSB that is reported back */

 The data LSB that is reported back */

 true if we received a report after a command */

 Wether or not the device exists */

 locks this structure */

 prevent races between open() and disconnect() */

 local function prototypes */

 usb specific object needed to register this driver with the usb subsystem */

 success */

 unlink */

 this urb is terminated, clean up */

 -EPIPE:  should clear the halt */

 error */

 notify anyone waiting that the cmd has finished */

	/* We will not send any commands if the USB PCWD device does

	/* The USB PC Watchdog uses a 6 byte report format.

 Byte 0 = CMD */

 Byte 1 = Data MSB */

 Byte 2 = Data LSB */

 All other bytes not used */

	/* wait till the usb card processed the command,

 read back response */

 Enable Watchdog */

 Disable Watchdog */

 Re-trigger Watchdog */

 Write new heartbeat to watchdog */

	/*

	 * Convert celsius to fahrenheit, since this was

	 * the decided 'standard' for this return value.

 Read the time that's left before rebooting */

 Note: if the board is not yet armed then we will read 0xFFFF */

/*

 *	/dev/watchdog handling

 See if we got the magic character 'V' and reload the timer */

			/* note: just in case someone wrote the magic character

			/* scan to see whether or not we got the

 someone wrote to us, we should reload the timer */

 /dev/watchdog can only be opened once */

 Activate */

	/*

	 *      Shut off the timer.

/*

 *	/dev/temperature handling

/*

 *	Notify system

 Turn the WDT off */

/*

 *	Kernel Interfaces

/**

 *	usb_pcwd_delete

/**

 *	usb_pcwd_probe

 *

 *	Called by the usb core when a new device is connected that it thinks

 *	this driver might be interested in.

 get the active interface descriptor */

 check out that we have a HID device */

 check out the endpoint: it has to be Interrupt & IN */

 we didn't find a Interrupt endpoint with direction IN */

 get a handle to the interrupt data pipe */

 allocate memory for our device and initialize it */

 set up the memory buffer's */

 allocate the urb's */

 initialise the intr urb's */

 register our interrupt URB with the USB system */

 failure */

 The device exists and can be communicated with */

 disable card */

 Get the Firmware Version */

 Get switch settings */

 If heartbeat = 0 then we use the heartbeat from the dip-switches */

	/* Check that the heartbeat value is within it's range ;

 we can register the device now, as it is ready */

/**

 *	usb_pcwd_disconnect

 *

 *	Called by the usb core when the device is removed from the system.

 *

 *	This routine guarantees that the driver will not submit any more urbs

 *	by clearing dev->udev.

 prevent races with open() */

 Stop the timer before we leave */

 We should now stop communicating with the USB PCWD device */

 Deregister */

 Delete the USB PCWD device */

 SPDX-License-Identifier: GPL-2.0+

/*

 *	watchdog_core.c

 *

 *	(c) Copyright 2008-2011 Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *						All Rights Reserved.

 *

 *	(c) Copyright 2008-2011 Wim Van Sebroeck <wim@iguana.be>.

 *

 *	This source code is part of the generic code that can be used

 *	by all the watchdog timer drivers.

 *

 *	Based on source code of the following authors:

 *	  Matt Domsch <Matt_Domsch@dell.com>,

 *	  Rob Radez <rob@osinvestor.com>,

 *	  Rusty Lynch <rusty@linux.co.intel.com>

 *	  Satyam Sharma <satyam@infradead.org>

 *	  Randy Dunlap <randy.dunlap@oracle.com>

 *

 *	Neither Alan Cox, CymruNet Ltd., Wim Van Sebroeck nor Iguana vzw.

 *	admit liability nor provide warranty for any of this software.

 *	This material is provided "AS-IS" and at no charge.

 For EXPORT_SYMBOL/module stuff/... */

 For standard types */

 For the -ENODEV/... values */

 For printk/panic/... */

 For restart handler */

 For watchdog specific items */

 For __init/__exit/... */

 For ida_* macros */

 For IS_ERR macros */

 For of_get_timeout_sec */

 For watchdog_dev_register/... */

/*

 * Deferred Registration infrastructure.

 *

 * Sometimes watchdog drivers needs to be loaded as soon as possible,

 * for example when it's impossible to disable it. To do so,

 * raising the initcall level of the watchdog driver is a solution.

 * But in such case, the miscdev is maybe not ready (subsys_initcall), and

 * watchdog_core need miscdev to register the watchdog as a char device.

 *

 * The deferred registration infrastructure offer a way for the watchdog

 * subsystem to register a watchdog properly, even before miscdev is ready.

	/*

	 * Check that we have valid min and max timeout values, if

	 * not reset them both to 0 (=not used or unknown)

/**

 * watchdog_init_timeout() - initialize the timeout field

 * @wdd: watchdog device

 * @timeout_parm: timeout module parameter

 * @dev: Device that stores the timeout-sec property

 *

 * Initialize the timeout field of the watchdog_device struct with either the

 * timeout module parameter (if it is valid value) or the timeout-sec property

 * (only if it is a valid value and the timeout_parm is out of bounds).

 * If none of them are valid then we keep the old value (which should normally

 * be the default timeout value). Note that for the module parameter, '0' means

 * 'use default' while it is an invalid value for the timeout-sec property.

 * It should simply be dropped if you want to use the default value then.

 *

 * A zero is returned on success or -EINVAL if all provided values are out of

 * bounds.

 check the driver supplied value (likely a module parameter) first */

 try to get the timeout_sec property */

/**

 * watchdog_set_restart_priority - Change priority of restart handler

 * @wdd: watchdog device

 * @priority: priority of the restart handler, should follow these guidelines:

 *   0:   use watchdog's restart function as last resort, has limited restart

 *        capabilies

 *   128: default restart handler, use if no other handler is expected to be

 *        available and/or if restart is sufficient to restart the entire system

 *   255: preempt all other handlers

 *

 * If a wdd->ops->restart function is provided when watchdog_register_device is

 * called, it will be registered as a restart handler with the priority given

 * here.

 Mandatory operations need to be supported */

	/*

	 * Note: now that all watchdog_device data has been verified, we

	 * will not check this anymore in other functions. If data gets

	 * corrupted in a later stage then we expect a kernel panic!

 Use alias for watchdog id if possible */

 Retry in case a legacy watchdog module exists */

 Module parameter to force watchdog policy on reboot. */

/**

 * watchdog_register_device() - register a watchdog device

 * @wdd: watchdog device

 *

 * Register a watchdog device with the kernel so that the

 * watchdog timer can be accessed from userspace.

 *

 * A zero is returned on success and a negative errno code for

 * failure.

/**

 * watchdog_unregister_device() - unregister a watchdog device

 * @wdd: watchdog device to unregister

 *

 * Unregister a watchdog device that was previously successfully

 * registered with watchdog_register_device().

/**

 * devm_watchdog_register_device() - resource managed watchdog_register_device()

 * @dev: device that is registering this watchdog device

 * @wdd: watchdog device

 *

 * Managed watchdog_register_device(). For watchdog device registered by this

 * function,  watchdog_unregister_device() is automatically called on driver

 * detach. See watchdog_register_device() for more information.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2016 National Instruments Corp.

 Ignore unsupported resources, e.g. IRQ */

 Switch from boot mode to user mode */

 SPDX-License-Identifier: GPL-2.0

/*

 * (c) Copyright 2021 Hewlett Packard Enterprise Development LP.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  IDT Interprise 79RC32434 watchdog driver

 *

 *  Copyright (C) 2006, Ondrej Zajicek <santiago@crfreenet.org>

 *  Copyright (C) 2008, Florian Fainelli <florian@openwrt.org>

 *

 *  based on

 *  SoftDog 0.05:	A Software Watchdog Device

 *

 *  (c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *					All Rights Reserved.

 For module specific items */

 For new moduleparam's */

 For standard types (like size_t) */

 For the -ENODEV/... values */

 For printk/panic/... */

 For file operations */

 For struct miscdevice */

 For the watchdog specific items */

 For __init/__exit/... */

 For platform_driver framework */

 For spin_lock/spin_unlock/... */

 For copy_to_user/put_user/... */

 For devm_ioremap */

 For the Watchdog registers */

/* Board internal clock speed in Hz,

 translate wtcompare value to seconds and vice versa */

/* Use a default timeout of 20s. This should be

 * safe for CPU clock speeds up to 400MHz, as

 apply or and nand masks to data read from addr and write back */

 zero the counter before enabling */

	/* don't generate a non-maskable interrupt,

 reset the ERRCS timeout bit in case it's set */

 set the timeout (either default or based on module param) */

 reset WTC timeout bit and enable WDT */

 Disable WDT */

 In case it was set long ago */

 Make sure the watchdog is not running */

	/* Check that the heartbeat value is within it's range;

 SPDX-License-Identifier: GPL-2.0

/*

 * drivers/char/watchdog/pnx4008_wdt.c

 *

 * Watchdog driver for PNX4008 board

 *

 * Authors: Dmitry Chigirev <source@mvista.com>,

 *	    Vitaly Wool <vitalywool@gmail.com>

 * Based on sa1100 driver,

 * Copyright (C) 2000 Oleg Drokin <green@crimea.edu>

 *

 * 2005-2006 (c) MontaVista Software, Inc.

 *

 * (C) 2012 Wolfram Sang, Pengutronix

 WatchDog Timer - Chapter 23 Page 207 */

 Watchdog timer register set definition */

 WDTIM_INT bit definitions */

 WDTIM_CTRL bit definitions */

 WDTIM_MCTRL bit definitions */

 WDTIM_EMR bit definitions */

a MATCH_CTRL setting */

 WDTIM_RES bit definitions */

 read only */

the counter clock is 13 MHz fixed */

 stop counter, initiate counter reset */

wait for reset to complete. 100% guarantee event */

 internal and external reset, stop after that */

 configure match output */

 clear interrupt, just in case */

 the longest pulse period 65541/(13*10^6) seconds ~ 5 ms. */

enable counter, stop when debugger active */

stop counter */

	/*

	 * Verify if a "cmd" passed from the userspace program rebooting

	 * the system; if available, handle it.

	 * - For details, see the 'reboot' syscall in kernel/reboot.c

	 * - If the received "cmd" is not supported, use the default mode.

 Force match output active */

 Internal reset on match output (RESOUT_N not asserted) */

 Instant assert of RESETOUT_N with pulse length 1mS */

 Wait for watchdog to reset system */

 SPDX-License-Identifier: GPL-2.0+

/*

 *	Industrial Computer Source WDT501 driver

 *

 *	(c) Copyright 1996-1997 Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *						All Rights Reserved.

 *

 *	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide

 *	warranty for any of this software. This material is provided

 *	"AS-IS" and at no charge.

 *

 *	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>

 *

 *	Release 0.10.

 *

 *	Fixes

 *		Dave Gregorich	:	Modularisation and minor bugs

 *		Alan Cox	:	Added the watchdog ioctl() stuff

 *		Alan Cox	:	Fixed the reboot problem (as noted by

 *					Matt Crocker).

 *		Alan Cox	:	Added wdt= boot option

 *		Alan Cox	:	Cleaned up copy/user stuff

 *		Tim Hockin	:	Added insmod parameters, comment

 *					cleanup, parameterized timeout

 *		Tigran Aivazian	:	Restructured wdt_init() to handle

 *					failures

 *		Joel Becker	:	Added WDIOC_GET/SETTIMEOUT

 *		Matt Domsch	:	Added nowayout module option

/*

 *	Module parameters

 Default heartbeat = 60 seconds */

 You must set these - there is no sane way to probe for this board. */

 Support for the Fan Tachometer on the WDT501-P */

/*

 *	Programming support

/**

 *	wdt_start:

 *

 *	Start the watchdog driver.

 Disable watchdog */

	wdt_ctr_mode(0, 3);		/* Program CTR0 for Mode 3:

	wdt_ctr_mode(1, 2);		/* Program CTR1 for Mode 2:

	wdt_ctr_mode(2, 0);		/* Program CTR2 for Mode 0:

 Count at 100Hz */

 Heartbeat */

 Length of reset pulse */

 Enable watchdog */

/**

 *	wdt_stop:

 *

 *	Stop the watchdog driver.

 Turn the card off */

 Disable watchdog */

 0 length reset pulses now */

/**

 *	wdt_ping:

 *

 *	Reload counter one with the watchdog heartbeat. We don't bother

 *	reloading the cascade counter.

 Write a watchdog value */

 Disable watchdog */

	wdt_ctr_mode(1, 2);		/* Re-Program CTR1 for Mode 2:

 Heartbeat */

 Enable watchdog */

/**

 *	wdt_set_heartbeat:

 *	@t:		the new heartbeat value that needs to be set.

 *

 *	Set a new heartbeat value for the watchdog device. If the heartbeat

 *	value is incorrect we keep the old value and return -EINVAL. If

 *	successful we return 0.

/**

 *	wdt_get_status:

 *

 *	Extract the status information from a WDT watchdog device. There are

 *	several board variants so we have to know which bits are valid. Some

 *	bits default to one and some to zero in order to be maximally painful.

 *

 *	we then map the bits onto the status ioctl flags.

/**

 *	wdt_get_temperature:

 *

 *	Reports the temperature in degrees Fahrenheit. The API is in

 *	farenheit. It was designed by an imperial measurement luddite.

/**

 *	wdt_interrupt:

 *	@irq:		Interrupt number

 *	@dev_id:	Unused as we don't allow multiple devices.

 *

 *	Handle an interrupt from the board. These are raised when the status

 *	map changes in what the board considers an interesting way. That means

 *	a failure condition occurring.

	/*

	 *	Read the status register see what is up and

	 *	then printk it.

/**

 *	wdt_write:

 *	@file: file handle to the watchdog

 *	@buf: buffer to write (unused as data does not matter here

 *	@count: count of bytes

 *	@ppos: pointer to the position to write. No seeks allowed

 *

 *	A write to a watchdog device is defined as a keepalive signal. Any

 *	write of data will do, as we we don't define content meaning.

 In case it was set long ago */

/**

 *	wdt_ioctl:

 *	@file: file handle to the device

 *	@cmd: watchdog command

 *	@arg: argument pointer

 *

 *	The watchdog API defines a common set of functions for all watchdogs

 *	according to their available features. We only actually usefully support

 *	querying capabilities and current status.

 Add options according to the card we have */

/**

 *	wdt_open:

 *	@inode: inode of device

 *	@file: file handle to device

 *

 *	The watchdog device has been opened. The watchdog device is single

 *	open and on opening we load the counters. Counter zero is a 100Hz

 *	cascade, into counter 1 which downcounts to reboot. When the counter

 *	triggers counter 2 downcounts the length of the reset pulse which

 *	set set to be as long as possible.

	/*

	 *	Activate

/**

 *	wdt_release:

 *	@inode: inode to board

 *	@file: file handle to board

 *

 *	The watchdog has a configurable API. There is a religious dispute

 *	between people who want their watchdog to be able to shut down and

 *	those who want to be sure if the watchdog manager dies the machine

 *	reboots. In the former case we disable the counters, in the latter

 *	case you have to open it again very soon.

/**

 *	wdt_temp_read:

 *	@file: file handle to the watchdog board

 *	@buf: buffer to write 1 byte into

 *	@count: length of buffer

 *	@ptr: offset (no seek allowed)

 *

 *	Temp_read reports the temperature in degrees Fahrenheit. The API is in

 *	farenheit. It was designed by an imperial measurement luddite.

/**

 *	wdt_temp_open:

 *	@inode: inode of device

 *	@file: file handle to device

 *

 *	The temperature device has been opened.

/**

 *	wdt_temp_release:

 *	@inode: inode to board

 *	@file: file handle to board

 *

 *	The temperature device has been closed.

/**

 *	wdt_notify_sys:

 *	@this: our notifier block

 *	@code: the event being reported

 *	@unused: unused

 *

 *	Our notifier is called on system shutdowns. We want to turn the card

 *	off at reboot otherwise the machine will reboot again during memory

 *	test or worse yet during the following fsck. This would suck, in fact

 *	trust me - if it happens it does suck.

/*

 *	Kernel Interfaces

/*

 *	The WDT card needs to learn about soft shutdowns in order to

 *	turn the timebomb registers off.

/**

 *	wdt_exit:

 *

 *	Unload the watchdog. You cannot do this with any file handles open.

 *	If your watchdog is set to continue ticking on close and you unload

 *	it, well it keeps ticking. We won't get the interrupt but the board

 *	will not touch PC memory so all is fine. You just have to load a new

 *	module in 60 seconds or reboot.

/**

 *	wdt_init:

 *

 *	Set up the WDT watchdog board. All we have to do is grab the

 *	resources we require and bitch if anyone beat us to them.

 *	The open() function will actually kick the board off.

	/* Check that the heartbeat value is within it's range;

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2010-2011 Picochip Ltd., Jamie Iles

 * https://www.picochip.com

 *

 * This file implements a driver for the Synopsys DesignWare watchdog device

 * in the many subsystems. The watchdog has 16 different timeout periods

 * and these are a function of the input clock frequency.

 *

 * The DesignWare watchdog cannot be stopped once it has been started so we

 * do not implement a stop function. The watchdog core will continue to send

 * heartbeat requests after the watchdog device has been closed.

 There are sixteen TOPs (timeout periods) that can be set in the watchdog. */

 Save/restore */

	/*

	 * Find a TOP with timeout greater or equal to the requested number.

	 * Note we'll select a TOP with maximum timeout if the requested

	 * timeout couldn't be reached.

	/*

	 * We'll find a timeout greater or equal to one second anyway because

	 * the driver probe would have failed if there was none.

	/*

	 * In IRQ mode due to the two stages counter, the actual timeout is

	 * twice greater than the TOP setting.

	/*

	 * Note IRQ mode being enabled means having a non-zero pre-timeout

	 * setup. In this case we try to find a TOP as close to the half of the

	 * requested timeout as possible since DW Watchdog IRQ mode is designed

	 * in two stages way - first timeout rises the pre-timeout interrupt,

	 * second timeout performs the system reset. So basically the effective

	 * watchdog-caused reset happens after two watchdog TOPs elapsed.

	/*

	 * Set the new value in the watchdog.  Some versions of dw_wdt

	 * have have TOPINIT in the TIMEOUT_RANGE register (as per

	 * CP_WDT_DUAL_TOP in WDT_COMP_PARAMS_1).  On those we

	 * effectively get a pat of the watchdog right here.

 Kick new TOP value into the watchdog counter if activated. */

	/*

	 * In case users set bigger timeout value than HW can support,

	 * kernel(watchdog_dev.c) helps to feed watchdog before

	 * wdd->max_hw_heartbeat_ms

	/*

	 * We ignore actual value of the timeout passed from user-space

	 * using it as a flag whether the pretimeout functionality is intended

	 * to be activated.

 Disable/enable interrupt mode depending on the RMOD flag. */

 Enable watchdog. */

 wait for reset to assert... */

	/*

	 * We don't clear the IRQ status. It's supposed to be done by the

	 * following ping operations.

 CONFIG_PM_SLEEP */

/*

 * In case if DW WDT IP core is synthesized with fixed TOP feature disabled the

 * TOPs array can be arbitrary ordered with nearly any sixteen uint numbers

 * depending on the system engineer imagination. The next method handles the

 * passed TOPs array to pre-calculate the effective timeouts and to sort the

 * TOP items out in the ascending order with respect to the timeouts.

	/*

	 * We walk over the passed TOPs array and calculate corresponding

	 * timeouts in seconds and milliseconds. The milliseconds granularity

	 * is needed to distinguish the TOPs with very close timeouts and to

	 * set the watchdog max heartbeat setting further.

		/*

		 * Find a suitable place for the current TOP in the timeouts

		 * array so that the list is remained in the ascending order.

	/*

	 * Retrieve custom or fixed counter values depending on the

	 * WDT_USE_FIX_TOP flag found in the component specific parameters

	 * #1 register.

 Convert the specified TOPs into an array of watchdog timeouts. */

 !CONFIG_DEBUG_FS */

 !CONFIG_DEBUG_FS */

	/*

	 * Try to request the watchdog dedicated timer clock source. It must

	 * be supplied if asynchronous mode is enabled. Otherwise fallback

	 * to the common timer/bus clocks configuration, in which the very

	 * first found clock supply both timer and APB signals.

	/*

	 * Request APB clock if device is configured with async clocks mode.

	 * In this case both tclk and pclk clocks are supposed to be specified.

	 * Alas we can't know for sure whether async mode was really activated,

	 * so the pclk phandle reference is left optional. If it couldn't be

	 * found we consider the device configured in synchronous clocks mode.

 Enable normal reset without pre-timeout by default. */

	/*

	 * Pre-timeout IRQ is optional, since some hardware may lack support

	 * of it. Note we must request rising-edge IRQ, since the lane is left

	 * pending either until the next watchdog kick event or up to the

	 * system reset.

	/*

	 * If the watchdog is already running, use its already configured

	 * timeout. Otherwise use the default or the value provided through

	 * devicetree.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 *	Berkshire PCI-PC Watchdog Card Driver

 *

 *	(c) Copyright 2003-2007 Wim Van Sebroeck <wim@iguana.be>.

 *

 *	Based on source code of the following authors:

 *	  Ken Hollis <kenji@bitgate.com>,

 *	  Lindsay Harris <lindsay@bluegum.com>,

 *	  Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *	  Matt Domsch <Matt_Domsch@dell.com>,

 *	  Rob Radez <rob@osinvestor.com>

 *

 *	Neither Wim Van Sebroeck nor Iguana vzw. admit liability nor

 *	provide warranty for any of this software. This material is

 *	provided "AS-IS" and at no charge.

/*

 *	A bells and whistles driver is available from:

 *	http://www.kernel.org/pub/linux/kernel/people/wim/pcwd/pcwd_pci/

 *

 *	More info available at

 *	http://www.berkprod.com/ or http://www.pcwatchdog.com/

/*

 *	Includes, defines, variables, module parameters, ...

 For module specific items */

 For new moduleparam's */

 For standard types (like size_t) */

 For the -ENODEV/... values */

 For printk/panic/... */

 For mdelay function */

 For struct miscdevice */

 For the watchdog specific items */

 For notifier support */

 For reboot_notifier stuff */

 For __init/__exit/... */

 For file operations */

 For pci functions */

 For io-port access */

 For spin_lock/spin_unlock/... */

 For copy_to_user/put_user/... */

 For inb/outb/... */

 Module and version information */

 Stuff for the PCI ID's  */

/*

 * These are the defines that describe the control status bits for the

 * PCI-PC Watchdog card.

 Port 1 : Control Status #1 */

 Watchdog Trip status */

 Watchdog Heartbeat */

 Temperature Trip status */

 Relay 2 Active */

 Relay 1 Active */

#define WD_PCI_R2DS		0x40	/* Relay 2 Disable Temperature-trip /

 Activate Relay 2 on the board */

 Port 2 : Control Status #2 */

 Watchdog Disable */

 Enable Temperature Trip Reset */

 Watchdog wrote response */

 PC has sent command */

/* according to documentation max. time to process a command for the pci

 Watchdog's internal commands */

 Watchdog's Dip Switch heartbeat values */

 OFF-OFF-OFF	=  5 Sec  */

 OFF-OFF-ON	= 10 Sec  */

 OFF-ON-OFF	= 30 Sec  */

 OFF-ON-ON	=  1 Min  */

 ON-OFF-OFF	=  5 Min  */

 ON-OFF-ON	= 10 Min  */

 ON-ON-OFF	= 30 Min  */

 ON-ON-ON	=  1 hour */

 We can only use 1 card due to the /dev/watchdog restriction */

 internal variables */

 this is private data for each PCI-PC watchdog card */

 Wether or not the card has a temperature device */

 The card's boot status */

 The cards I/O address */

 the lock for io operations */

 the PCI-device */

 module parameters */

 Default */

 Verbose */

 print fancy stuff too */

#define WATCHDOG_HEARTBEAT 0	/* default heartbeat =

/*

 *	Internal functions

	/* If a command requires data it should be written first.

	 * Data for commands with 8 bits of data should be written to port 4.

	 * Commands with 16 bits of data, should be written as LSB to port 4

	 * and MSB to port 5.

	 * After the required data has been written then write the command to

	/* wait till the pci card processed the command, signaled by

	 * the WRSP bit in port 2 and give it a max. timeout of

 read back response */

 clear WRSP bit */

 The cards firmware version */

 Get switch settings */

 Re-trigger watchdog by writing to port 0 */

 send out any data */

 Write new heartbeat to watchdog */

 clear trip status & LED and keep mode of relay 2 */

 clear reset counter */

	/*

	 * Convert celsius to fahrenheit, since this was

	 * the decided 'standard' for this return value.

 Read the time that's left before rebooting */

 Note: if the board is not yet armed then we will read 0xFFFF */

/*

 *	/dev/watchdog handling

 See if we got the magic character 'V' and reload the timer */

			/* note: just in case someone wrote the magic character

			/* scan to see whether or not we got the

 someone wrote to us, we should reload the timer */

 /dev/watchdog can only be opened once */

 Activate */

	/*

	 *      Shut off the timer.

/*

 *	/dev/temperature handling

/*

 *	Notify system

 Turn the WDT off */

/*

 *	Kernel Interfaces

/*

 *	Init & exit routines

 get the boot_status */

 clear the "card caused reboot" flag */

 disable card */

 Check whether or not the card supports the temperature device */

 Show info about the card itself */

 If heartbeat = 0 then we use the heartbeat from the dip-switches */

	/* Check that the heartbeat value is within it's range ;

 Stop the timer before we leave */

 Deregister */

 End of list */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Retu watchdog driver

 *

 * Copyright (C) 2004, 2005 Nokia Corporation

 *

 * Based on code written by Amit Kucheria and Michael Buesch.

 * Rewritten by Aaro Koskinen.

 Watchdog timer values in seconds */

/*

 * Since Retu watchdog cannot be disabled in hardware, we must kick it

 * with a timer until userspace watchdog software takes over. If

 * CONFIG_WATCHDOG_NOWAYOUT is set, we never start the feeding.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Imagination Technologies PowerDown Controller Watchdog Timer.

 *

 * Copyright (c) 2014 Imagination Technologies Ltd.

 *

 * Based on drivers/watchdog/sunxi_wdt.c Copyright (c) 2013 Carlo Caione

 *                                                     2012 Henrik Nordstrom

 *

 * Notes

 * -----

 * The timeout value is rounded to the next power of two clock cycles.

 * This is configured using the PDC_WDT_CONFIG register, according to this

 * formula:

 *

 *     timeout = 2^(delay + 1) clock cycles

 *

 * Where 'delay' is the value written in PDC_WDT_CONFIG register.

 *

 * Therefore, the hardware only allows to program watchdog timeouts, expressed

 * as a power of two number of watchdog clock cycles. The current implementation

 * guarantees that the actual watchdog timeout will be _at least_ the value

 * programmed in the imgpdg_wdt driver.

 *

 * The following table shows how the user-configured timeout relates

 * to the actual hardware timeout (watchdog clock @ 40000 Hz):

 *

 * input timeout | WD_DELAY | actual timeout

 * -----------------------------------

 *      10       |   18     |  13 seconds

 *      20       |   19     |  26 seconds

 *      30       |   20     |  52 seconds

 *      60       |   21     |  104 seconds

 *

 * Albeit coarse, this granularity would suffice most watchdog uses.

 * If the platform allows it, the user should be able to change the watchdog

 * clock rate and achieve a finer timeout granularity.

 registers */

 Hard reset */

 Timeout */

 Tickled incorrectly */

 Soft reset */

 User reset */

 Timeout values are in seconds */

 Must tickle to finish the stop */

 Start the watchdog timer (delay should already be set) */

 Assert SOFT_RESET */

 We use the clock rate to calculate the max timeout */

 Find what caused the last reset */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2014, NVIDIA CORPORATION.  All rights reserved.

 minimum and maximum watchdog trigger timeout, in seconds */

/*

 * Base of the WDT registers, from the timer base address.  There are

 * actually 5 watchdogs that can be configured (by pairing with an available

 * timer), at bases 0x100 + (WDT ID) * 0x20, where WDT ID is 0 through 4.

 * This driver only configures the first watchdog (WDT ID 0).

/*

 * Register base of the timer that's selected for pairing with the watchdog.

 * This driver arbitrarily uses timer 5, which is currently unused by

 * other drivers (in particular, the Tegra clocksource driver).  If this

 * needs to change, take care that the new timer is not used by the

 * clocksource driver.

 WDT registers */

 Timer registers */

	/*

	 * This thing has a fixed 1MHz clock.  Normally, we would set the

	 * period to 1 second by writing 1000000ul, but the watchdog system

	 * reset actually occurs on the 4th expiration of this counter,

	 * so we set the period to 1/4 of this amount.

	/*

	 * Set number of periods and start counter.

	 *

	 * Interrupt handler is not required for user space

	 * WDT accesses, since the caller is responsible to ping the

	 * WDT to reset the counter before expiration, through ioctls.

 Current countdown (from timeout) */

 Number of expirations (we are waiting for the 4th expiration) */

	/*

	 * The entire thing is divided by 4 because we are ticking down 4 times

	 * faster due to needing to wait for the 4th expiration.

 This is the timer base. */

	/*

	 * Allocate our watchdog driver data, which has the

	 * struct watchdog_device nested within it.

 Initialize struct tegra_wdt. */

 Initialize struct watchdog_device. */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Watchdog driver for Atmel AT91RM9200 (Thunder)

 *

 *  Copyright (C) 2003 SAN People (Pty) Ltd

 *

 seconds */

 seconds */

 ......................................................................... */

	/*

	 * Perform a hardware reset with the use of the Watchdog timer.

/*

 * Disable the watchdog.

/*

 * Enable and reset the watchdog.

/*

 * Reload the watchdog timer.  (ie, pat the watchdog)

 ......................................................................... */

/*

 * Watchdog device is opened, and watchdog starts running.

/*

 * Close the watchdog device.

 * If CONFIG_WATCHDOG_NOWAYOUT is NOT defined then the watchdog is also

 *  disabled.

 Disable the watchdog when file is closed */

/*

 * Change the watchdog time interval.

	/*

	 * All counting occurs at SLOW_CLOCK / 128 = 256 Hz

	 *

	 * Since WDV is a 16-bit counter, the maximum period is

	 * 65536 / 256 = 256 seconds.

	/* Set new watchdog time. It will be used when

/*

 * Handle commands from user-space.

 pat the watchdog */

 Enable new time value */

 Return current value */

/*

 * Pat the watchdog whenever device is written to.

 pat the watchdog */

 ......................................................................... */

 sentinel */ }

	/* Check that the heartbeat value is within range;

 SPDX-License-Identifier: GPL-2.0+

/*

 * Octeon Watchdog driver

 *

 * Copyright (C) 2007-2017 Cavium, Inc.

 *

 * Converted to use WATCHDOG_CORE by Aaro Koskinen <aaro.koskinen@iki.fi>.

 *

 * Some parts derived from wdt.c

 *

 *	(c) Copyright 1996-1997 Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *						All Rights Reserved.

 *

 *	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide

 *	warranty for any of this software. This material is provided

 *	"AS-IS" and at no charge.

 *

 *	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>

 *

 * The OCTEON watchdog has a maximum timeout of 2^32 * io_clock.

 * For most systems this is less than 10 seconds, so to allow for

 * software to request longer watchdog heartbeats, we maintain software

 * counters to count multiples of the base rate.  If the system locks

 * up in such a manner that we can not run the software counters, the

 * only result is a watchdog reset sooner than was requested.  But

 * that is OK, because in this case userspace would likely not be able

 * to do anything anyhow.

 *

 * The hardware watchdog interval we call the period.  The OCTEON

 * watchdog goes through several stages, after the first period an

 * irq is asserted, then if it is not reset, after the next period NMI

 * is asserted, then after an additional period a chip wide soft reset.

 * So for the software counters, we reset watchdog after each period

 * and decrement the counter.  But for the last two periods we need to

 * let the watchdog progress to the NMI stage so we disable the irq

 * and let it proceed.  Once in the NMI, we print the register state

 * to the serial port and then wait for the reset.

 *

 * A watchdog is maintained for each CPU in the system, that way if

 * one CPU suffers a lockup, we also get a register dump and reset.

 * The userspace ping resets the watchdog on all CPUs.

 *

 * Before userspace opens the watchdog device, we still run the

 * watchdogs to catch any lockups that may be kernel related.

 *

 Watchdog interrupt major block number (8 MSBs of intsn) */

 The count needed to achieve timeout_sec. */

 The maximum period supported. */

 The current period.  */

 Set to non-zero when userspace countdown mode active */

 Default heartbeat = 60 seconds */

/**

 * octeon_wdt_poke_irq - Poke the watchdog when an interrupt is received

 *

 * @cpl:

 * @dev_id:

 *

 * Returns

 We're alive, poke the watchdog */

 Bad news, you are about to reboot. */

 Not open, just ping away... */

 From setup.c */

/**

 * octeon_wdt_write_string - Write a string to the uart

 *

 * @str:        String to write

 Just loop writing one byte at a time */

/**

 * octeon_wdt_write_hex() - Write a hex number out of the uart

 *

 * @value:      Number to display

 * @digits:     Number of digits to print (1 to 16)

/**

 * octeon_wdt_nmi_stage3:

 *

 * NMI stage 3 handler. NMIs are handled in the following manner:

 * 1) The first NMI handler enables CVMSEG and transfers from

 * the bootbus region into normal memory. It is careful to not

 * destroy any registers.

 * 2) The second stage handler uses CVMSEG to save the registers

 * and create a stack for C code. It then calls the third level

 * handler with one argument, a pointer to the register values.

 * 3) The third, and final, level handler is the following C

 * function that prints out some useful infomration.

 *

 * @reg:    Pointer to register state before the NMI

	/*

	 * Save status and cause early to get them before any changes

	 * might happen.

 Delay so output from all cores output is not jumbled together. */

 The CIU register is different for each Octeon model. */

	/*

	 * G-30204: We must trigger a soft reset before watchdog

	 * does an incomplete job of doing it.

		/*

		 * Wait for other cores to print out information, but

		 * not too long.  Do the soft reset before watchdog

		 * can trigger it.

 Indicate watchdog in bit 11 */

 Poke the watchdog to clear out its state */

 Disable the hardware. */

 Disable it before doing anything with the interrupts. */

 Must get the domain for the watchdog block */

 Get a irq for the wd intsn (hardware interrupt) */

 Must set the irq affinity here */

 Poke the watchdog to clear out its state */

 Finally enable the watchdog now that all handlers are installed */

 3 = Interrupt + NMI + Soft-Reset */

 We have to enable the irq */

	/*

	 * Find the largest interrupt period, that can evenly divide

	 * the requested heartbeat time.

	/*

	 * The last two periods are after the irq is disabled, and

	 * then to the nmi, so we subtract them off.

 3 = Interrupt + NMI + Soft-Reset */

 Get the irqs back on. */

/**

 * octeon_wdt_init - Module/ driver initialization.

 *

 * Returns Zero on success

	/*

	 * Watchdog time expiration length = The 16 bits of LEN

	 * represent the most significant bits of a 24 bit decrementer

	 * that decrements every divisor cycle.

	 *

	 * Try for a timeout of 5 sec, if that fails a smaller number

	 * of even seconds,

/**

 * octeon_wdt_cleanup - Module / driver shutdown

	/*

	 * Disable the boot-bus memory, the code it points to is soon

	 * to go missing.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Mediatek Watchdog Driver

 *

 * Copyright (C) 2014 Matthias Brugger

 *

 * Matthias Brugger <matthias.bgg@gmail.com>

 *

 * Based on sunxi_wdt.c

 protects WDT_SWSYSRST reg */

	/*

	 * In dual mode, irq will be triggered at timeout / 2

	 * the real timeout occurs at timeout

	/*

	 * One bit is the value of 512 ticks

	 * The clock has 32 KHz

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	i6300esb:	Watchdog timer driver for Intel 6300ESB chipset

 *

 *	(c) Copyright 2004 Google Inc.

 *	(c) Copyright 2005 David Härdeman <david@2gen.com>

 *

 *	based on i810-tco.c which is in turn based on softdog.c

 *

 *	The timer is implemented in the following I/O controller hubs:

 *	(See the intel documentation on http://developer.intel.com.)

 *	6300ESB chip : document number 300641-004

 *

 *  2004YYZZ Ross Biro

 *	Initial version 0.01

 *  2004YYZZ Ross Biro

 *	Version 0.02

 *  20050210 David Härdeman <david@2gen.com>

 *	Ported driver to kernel 2.6

 *  20171016 Radu Rendec <rrendec@arista.com>

 *	Change driver to use the watchdog subsystem

 *	Add support for multiple 6300ESB devices

/*

 *      Includes, defines, variables, module parameters, ...

 Module and version information */

 PCI configuration registers */

 Config register                   */

 WDT lock register                 */

 Memory mapped registers */

 Timer1 value after each reset */

 Timer2 value after each reset */

 General Interrupt Status Reg  */

 Reload register               */

 Lock register bits */

 Watchdog functionality            */

 Enable WDT                        */

 Lock (nowayout)                   */

 Config register bits */

 Enable reboot on timeout          */

 Decrement frequency               */

 Interrupt type on timer1 timeout  */

 Reload register bits */

 Watchdog timed out                */

 prevent timeout                   */

 Magic constants */

 Step 1 to unlock reset registers  */

 Step 2 to unlock reset registers  */

 module parameters */

 30 sec default heartbeat (1 < heartbeat < 2*1023) */

 in seconds */

 internal variables */

/*

 * Some i6300ESB specific functions

/*

 * Prepare for reloading the timer by unlocking the proper registers.

 * This is performed by first writing 0x80 followed by 0x86 to the

 * reload register. After this the appropriate registers can be written

 * to once before they need to be unlocked again.

 Enable or Enable + Lock? */

 First, reset timers as suggested by the docs */

 Then disable the WDT */

 Returns 0 if the timer was disabled, non-zero otherwise */

 FIXME: Do we need to flush anything here? */

	/* We shift by 9, so if we are passed a value of 1 sec,

	 * val will be 1 << 9 = 512, then write that to two

	 * timers => 2 * 512 = 1024 (which is decremented at 1KHz)

 Write timer 1 */

 Write timer 2 */

 Reload */

 FIXME: Do we need to flush everything out? */

 Done */

/*

 * Watchdog Subsystem Interfaces

/*

 * Data for PCI driver interface

 End of list */

/*

 *      Init & exit routines

 Something's wrong here, BASEADDR has to be set */

 Done */

	/*

	 * Config register:

	 * Bit    5 : 0 = Enable WDT_OUTPUT

	 * Bit    2 : 0 = set the timer frequency to the PCI clock

	 * divided by 2^15 (approx 1KHz).

	 * Bits 1:0 : 11 = WDT_INT_TYPE Disabled.

	 * The watchdog has two timers, it can be setup so that the

	 * expiry of timer1 results in an interrupt and the expiry of

	 * timer2 results in a reboot. We set it to not generate

	 * any interrupts as there is not much we can do with it

	 * right now.

 Check that the WDT isn't already locked */

 Set the timer to watchdog mode and disable it for now */

 Check if the watchdog was previously triggered */

 Reset WDT_TIMEOUT flag and timers */

 And set the correct timeout value */

 Check whether or not the hardware watchdog is there */

 Initialize the watchdog and make sure it does not run */

 Register the watchdog so that userspace has access to it */

 SPDX-License-Identifier: GPL-2.0

/*

 * drivers/char/watchdog/davinci_wdt.c

 *

 * Watchdog driver for DaVinci DM644x/DM646x processors

 *

 * Copyright (C) 2006-2013 Texas Instruments.

 *

 * 2007 (c) MontaVista Software, Inc.

 really the max margin is 264/27MHz*/

 Timer register set definition */

 TCR bit definitions */

 TGCR bit definitions */

 WDTCR bit definitions */

/*

 * struct to hold data for each WDT device

 * @base - base io address of WD device

 * @clk - source clock of WDT

 * @wdd - hold watchdog device as is in WDT core

 disable, internal clock source */

 reset timer, set mode to 64-bit watchdog, and unreset */

 clear counter regs */

 set timeout period */

 enable run continuously */

	/* Once the WDT is in pre-active state write to

	 * TIM12, TIM34, PRD12, PRD34, TCR, TGCR, WDTCR are

	 * write protected (except for the WDKEY field)

 put watchdog in pre-active state */

 put watchdog in active state */

 put watchdog in service state */

 put watchdog in active state */

 if timeout has occured then return 0 */

 disable, internal clock source */

 reset timer, set mode to 64-bit watchdog, and unreset */

 clear counter and period regs */

 put watchdog in pre-active state */

 put watchdog in active state */

 write an invalid value to the WDKEY field to trigger a restart */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Cadence WDT driver - Used by Xilinx Zynq

 *

 * Copyright (C) 2010 - 2014 Xilinx, Inc.

 *

 Supports 1 - 516 sec */

 Restart key */

 Counter register access key */

 Counter value divisor */

 Clock prescaler value and selection */

 Input clock frequency */

 Counter maximum value */

/**

 * struct cdns_wdt - Watchdog device structure

 * @regs: baseaddress of device

 * @rst: reset flag

 * @clk: struct clk * of a clock source

 * @prescaler: for saving prescaler value

 * @ctrl_clksel: counter clock prescaler selection

 * @io_lock: spinlock for IO register access

 * @cdns_wdt_device: watchdog device structure

 *

 * Structure containing parameters specific to cadence watchdog.

 Write access to Registers */

************************Register Map**************************************/

 Register Offsets for the WDT */

 Zero Mode Register */

 Counter Control Register */

 Restart Register */

 Status Register */

/*

 * Zero Mode Register - This register controls how the time out is indicated

 * and also contains the access code to allow writes to the register (0xABC).

 Enable the WDT */

 Enable the reset output */

 Enable IRQ output */

 Reset pulse of 16 pclk cycles */

 Access key, 0xABC << 12 */

/*

 * Counter Control register - This register controls how fast the timer runs

 * and the reset value and also contains the access code to allow writes to

 * the register.

 Counter reset value */

/**

 * cdns_wdt_stop - Stop the watchdog.

 *

 * @wdd: watchdog device

 *

 * Read the contents of the ZMR register, clear the WDEN bit

 * in the register and set the access key for successful write.

 *

 * Return: always 0

/**

 * cdns_wdt_reload - Reload the watchdog timer (i.e. pat the watchdog).

 *

 * @wdd: watchdog device

 *

 * Write the restart key value (0x00001999) to the restart register.

 *

 * Return: always 0

/**

 * cdns_wdt_start - Enable and start the watchdog.

 *

 * @wdd: watchdog device

 *

 * The counter value is calculated according to the formula:

 *		calculated count = (timeout * clock) / prescaler + 1.

 * The calculated count is divided by 0x1000 to obtain the field value

 * to write to counter control register.

 * Clears the contents of prescaler and counter reset value. Sets the

 * prescaler to 4096 and the calculated count and access key

 * to write to CCR Register.

 * Sets the WDT (WDEN bit) and either the Reset signal(RSTEN bit)

 * or Interrupt signal(IRQEN) with a specified cycles and the access

 * key to write to ZMR Register.

 *

 * Return: always 0

	/*

	 * Counter value divisor to obtain the value of

	 * counter reset to be written to control register.

 Write counter access key first to be able write to register */

 Reset on timeout if specified in device tree. */

/**

 * cdns_wdt_settimeout - Set a new timeout value for the watchdog device.

 *

 * @wdd: watchdog device

 * @new_time: new timeout value that needs to be set

 * Return: 0 on success

 *

 * Update the watchdog_device timeout with new value which is used when

 * cdns_wdt_start is called.

/**

 * cdns_wdt_irq_handler - Notifies of watchdog timeout.

 *

 * @irq: interrupt number

 * @dev_id: pointer to a platform device structure

 * Return: IRQ_HANDLED

 *

 * The handler is invoked when the watchdog times out and a

 * reset on timeout has not been enabled.

/*

 * Info structure used to indicate the features supported by the device

 * to the upper layers. This is defined in watchdog.h header file.

 Watchdog Core Ops */

***********************Platform Operations*****************************/

/**

 * cdns_wdt_probe - Probe call for the device.

 *

 * @pdev: handle to the platform device structure.

 * Return: 0 on success, negative error otherwise.

 *

 * It does all the memory allocation and registration for the device.

 Register the interrupt */

 Initialize the members of cdns_wdt structure */

/**

 * cdns_wdt_suspend - Stop the device.

 *

 * @dev: handle to the device structure.

 * Return: 0 always.

/**

 * cdns_wdt_resume - Resume the device.

 *

 * @dev: handle to the device structure.

 * Return: 0 on success, errno otherwise.

 end of table */ }

 Driver Structure */

 SPDX-License-Identifier: GPL-2.0+

/*

 *	watchdog_dev.c

 *

 *	(c) Copyright 2008-2011 Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *						All Rights Reserved.

 *

 *	(c) Copyright 2008-2011 Wim Van Sebroeck <wim@iguana.be>.

 *

 *	(c) Copyright 2021 Hewlett Packard Enterprise Development LP.

 *

 *	This source code is part of the generic code that can be used

 *	by all the watchdog timer drivers.

 *

 *	This part of the generic code takes care of the following

 *	misc device: /dev/watchdog.

 *

 *	Based on source code of the following authors:

 *	  Matt Domsch <Matt_Domsch@dell.com>,

 *	  Rob Radez <rob@osinvestor.com>,

 *	  Rusty Lynch <rusty@linux.co.intel.com>

 *	  Satyam Sharma <satyam@infradead.org>

 *	  Randy Dunlap <randy.dunlap@oracle.com>

 *

 *	Neither Alan Cox, CymruNet Ltd., Wim Van Sebroeck nor Iguana vzw.

 *	admit liability nor provide warranty for any of this software.

 *	This material is provided "AS-IS" and at no charge.

 For character device */

 For the -ENODEV/... values */

 For file operations */

 For __init/__exit/... */

 For hrtimers */

 For printk/panic/... */

 For kthread_work */

 For handling misc devices */

 For module stuff/... */

 For mutexes */

 For memory functions */

 For standard types (like size_t) */

 For watchdog specific items */

 For copy_to_user/put_user/... */

 the dev_t structure to store the dynamically allocated watchdog devices */

 Reference to watchdog device behind /dev/watchdog */

 All variables in milli-seconds */

	/*

	 * A worker to generate heartbeat requests is needed if all of the

	 * following conditions are true.

	 * - Userspace activated the watchdog.

	 * - The driver provided a value for the maximum hardware timeout, and

	 *   thus is aware that the framework supports generating heartbeat

	 *   requests.

	 * - Userspace requests a longer timeout than the hardware can handle.

	 *

	 * Alternatively, if userspace has not opened the watchdog

	 * device, we take care of feeding the watchdog if it is

	 * running.

	/*

	 * To ensure that the watchdog times out wdd->timeout seconds

	 * after the most recent ping from userspace, the last

	 * worker ping has to come in hw_heartbeat_ms before this timeout.

 ping the watchdog */

 restart watchdog */

/*

 *	watchdog_ping: ping the watchdog.

 *	@wdd: the watchdog device to ping

 *

 *	The caller must hold wd_data->lock.

 *

 *	If the watchdog has no own ping operation then it needs to be

 *	restarted via the start operation. This wrapper function does

 *	exactly that.

 *	We only ping when the watchdog device is running.

/*

 *	watchdog_start: wrapper to start the watchdog.

 *	@wdd: the watchdog device to start

 *

 *	The caller must hold wd_data->lock.

 *

 *	Start the watchdog if it is not active and mark it active.

 *	This function returns zero on success or a negative errno code for

 *	failure.

/*

 *	watchdog_stop: wrapper to stop the watchdog.

 *	@wdd: the watchdog device to stop

 *

 *	The caller must hold wd_data->lock.

 *

 *	Stop the watchdog if it is still active and unmark it active.

 *	This function returns zero on success or a negative errno code for

 *	failure.

 *	If the 'nowayout' feature was set, the watchdog cannot be stopped.

/*

 *	watchdog_get_status: wrapper to get the watchdog status

 *	@wdd: the watchdog device to get the status from

 *

 *	The caller must hold wd_data->lock.

 *

 *	Get the watchdog's status flags.

/*

 *	watchdog_set_timeout: set the watchdog timer timeout

 *	@wdd: the watchdog device to set the timeout for

 *	@timeout: timeout to set in seconds

 *

 *	The caller must hold wd_data->lock.

 Disable pretimeout if it doesn't fit the new timeout */

/*

 *	watchdog_set_pretimeout: set the watchdog timer pretimeout

 *	@wdd: the watchdog device to set the timeout for

 *	@timeout: pretimeout to set in seconds

/*

 *	watchdog_get_timeleft: wrapper to get the time left before a reboot

 *	@wdd: the watchdog device to get the remaining time from

 *	@timeleft: the time that's left

 *

 *	The caller must hold wd_data->lock.

 *

 *	Get the time before a watchdog will reboot (if not pinged).

 nowayout cannot be disabled once set */

/*

 *	watchdog_ioctl_op: call the watchdog drivers ioctl op if defined

 *	@wdd: the watchdog device to do the ioctl on

 *	@cmd: watchdog command

 *	@arg: argument pointer

 *

 *	The caller must hold wd_data->lock.

/*

 *	watchdog_write: writes to the watchdog.

 *	@file: file from VFS

 *	@data: user address of data

 *	@len: length of data

 *	@ppos: pointer to the file offset

 *

 *	A write to a watchdog device is defined as a keepalive ping.

 *	Writing the magic 'V' sequence allows the next close to turn

 *	off the watchdog (if 'nowayout' is not set).

	/*

	 * Note: just in case someone wrote the magic character

	 * five months ago...

 scan to see whether or not we got the magic character */

 someone wrote to us, so we send the watchdog a keepalive ping */

/*

 *	watchdog_ioctl: handle the different ioctl's for the watchdog device.

 *	@file: file handle to the device

 *	@cmd: watchdog command

 *	@arg: argument pointer

 *

 *	The watchdog API defines a common set of functions for all watchdogs

 *	according to their available features.

		/* If the watchdog is active then we send a keepalive ping

		 * to make sure that the watchdog keep's running (and if

 timeout == 0 means that we don't know the timeout */

/*

 *	watchdog_open: open the /dev/watchdog* devices.

 *	@inode: inode of device

 *	@file: file handle to device

 *

 *	When the /dev/watchdog* device gets opened, we start the watchdog.

 *	Watch out: the /dev/watchdog device is single open, so we make sure

 *	it can only be opened once.

 Get the corresponding watchdog device */

 the watchdog is single open! */

	/*

	 * If the /dev/watchdog device is open, we don't want the module

	 * to be unloaded.

	/*

	 * open_timeout only applies for the first open from

	 * userspace. Set open_deadline to infinity so that the kernel

	 * will take care of an always-running hardware watchdog in

	 * case the device gets magic-closed or WDIOS_DISABLECARD is

	 * applied.

 dev/watchdog is a virtual (and thus non-seekable) filesystem */

/*

 *	watchdog_release: release the watchdog device.

 *	@inode: inode of device

 *	@file: file handle to device

 *

 *	This is the code for when /dev/watchdog gets closed. We will only

 *	stop the watchdog when we have received the magic char (and nowayout

 *	was not set), else the watchdog will keep running.

	/*

	 * We only stop the watchdog if we received the magic character

	 * or if WDIOF_MAGICCLOSE is not set. If nowayout was set then

	 * watchdog_stop will fail.

 If the watchdog was not stopped, send a keepalive ping */

 make sure that /dev/watchdog can be re-opened */

	/*

	 * Allow the owner module to be unloaded again unless the watchdog

	 * is still running. If the watchdog is still running, it can not

	 * be stopped, and its driver must not be unloaded.

/*

 *	watchdog_cdev_register: register watchdog character device

 *	@wdd: watchdog device

 *

 *	Register a watchdog character device including handling the legacy

 *	/dev/watchdog node. /dev/watchdog is actually a miscdevice and

 *	thus we set it up like that.

 Fill in the data structures */

 Add the device */

 Record time of most recent heartbeat as 'just before now'. */

	/*

	 * If the watchdog is running, prevent its driver from being unloaded,

	 * and schedule an immediate ping.

/*

 *	watchdog_cdev_unregister: unregister watchdog character device

 *	@watchdog: watchdog device

 *

 *	Unregister watchdog character device and if needed the legacy

 *	/dev/watchdog device.

/*

 *	watchdog_dev_register: register a watchdog device

 *	@wdd: watchdog device

 *

 *	Register a watchdog device including handling the legacy

 *	/dev/watchdog node. /dev/watchdog is actually a miscdevice and

 *	thus we set it up like that.

/*

 *	watchdog_dev_unregister: unregister a watchdog device

 *	@watchdog: watchdog device

 *

 *	Unregister watchdog device and if needed the legacy

 *	/dev/watchdog device.

/*

 *	watchdog_set_last_hw_keepalive: set last HW keepalive time for watchdog

 *	@wdd: watchdog device

 *	@last_ping_ms: time since last HW heartbeat

 *

 *	Adjusts the last known HW keepalive time for a watchdog timer.

 *	This is needed if the watchdog is already running when the probe

 *	function is called, and it can't be pinged immediately. This

 *	function must be called immediately after watchdog registration,

 *	and min_hw_heartbeat_ms must be set for this to be useful.

/*

 *	watchdog_dev_init: init dev part of watchdog core

 *

 *	Allocate a range of chardev nodes to use for watchdog devices

/*

 *	watchdog_dev_exit: exit dev part of watchdog core

 *

 *	Release the range of chardev nodes used for watchdog devices

 ping for the last time before suspend */

	/*

	 * make sure that watchdog worker will not kick in when the wdog is

	 * suspended

	/*

	 * __watchdog_ping will also retrigger hrtimer and therefore restore the

	 * ping worker if needed.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * sma cpu5 watchdog driver

 *

 * Copyright (C) 2003 Heiko Ronsdorf <hero@ihg.uni-duisburg.de>

 adjustable parameters */

 some device data */

 generic helper functions */

 keep watchdog alive */

 requeue?? */

 ticks doesn't matter anyway */

 if process dies, counter is not decremented */

 filesystem operations */

 init/exit function */

 watchdog reboot? */

 module entry points */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Watchdog driver for Broadcom BCM2835

 *

 * "bcm2708_wdog" driver written by Luke Diamand that was obtained from

 * branch "rpi-3.6.y" of git://github.com/raspberrypi/linux.git was used

 * as a hardware reference for the Broadcom BCM2835 watchdog timer.

 *

 * Copyright (C) 2013 Lubomir Rintel <lkundrak@v3.sk>

 *

/*

 * The Raspberry Pi firmware uses the RSTS register to know which partition

 * to boot from. The partition value is spread into bits 0, 2, 4, 6, 8, 10.

 * Partition 63 is a special partition used by the firmware to indicate halt.

 use a timeout of 10 ticks (~150us) */

 No sleeping, possibly atomic. */

/*

 * We can't really power off, but if we do the normal reset scheme, and

 * indicate to bootcode.bin not to reboot, then most of the chip will be

 * powered off.

	/*

	 * We set the watchdog hard reset bit here to distinguish this reset

	 * from the normal (full) reset. bootcode.bin will not reboot after a

	 * hard reset.

 Continue with normal reset mechanism */

		/*

		 * The currently active timeout value (set by the

		 * bootloader) may be different from the module

		 * heartbeat parameter or the value in device

		 * tree. But we just need to set WDOG_HW_RUNNING,

		 * because then the framework will "immediately" ping

		 * the device, updating the timeout.

 SPDX-License-Identifier: GPL-2.0+

/*

 *      NS pc87413-wdt Watchdog Timer driver for Linux 2.6.x.x

 *

 *      This code is based on wdt.c with original copyright.

 *

 *      (C) Copyright 2006 Sven Anders, <anders@anduras.de>

 *                     and Marcus Junker, <junker@anduras.de>

 *

 *      Neither Sven Anders, Marcus Junker nor ANDURAS AG

 *      admit liability nor provide warranty for any of this software.

 *      This material is provided "AS-IS" and at no charge.

 *

 *      Release 1.1

 #define DEBUG 1 */

 1 minute */

 I/O port base (index register) */

 Serial IO register */

 Watchdog-Timer-Control-Register */

 Watchdog timeout register */

 Watchdog config register */

 Address used on Portwell Boards */

 timeout value */

 is the timer enabled? */

 is the close expected? */

 to guard us from io races */

 -- Low level function ----------------------------------------*/

 Select pins for Watchdog output */

 Step 1: Select multiple pin,pin55,as WDT output */

 Set Bit7 to 1*/

 Enable SWC functions */

 Step 2: Enable SWC functions */

 Point SWC_LDN (LDN=4) */

 Read Index 0x30 First */

 Set Bit0 to 1 */

 Index0x30_bit0P1 */

 Read SWC I/O base address */

 Step 3: Read SWC I/O Base Address */

 Read Index 0x60 */

 Read Index 0x61 */

 Select Bank 3 of SWC */

 Step 4: Select Bank3 of SWC */

 Set watchdog timeout to x minutes */

 Step 5: Programm WDTO, Twd. */

 Enable WDEN */

 Step 6: Enable WDEN */

 Enable SW_WD_TREN */

 Enable SW_WD_TREN */

 Disable SW_WD_TREN */

 Disable SW_WD_TREN */

 Enable SW_WD_TRG */

 Enable SW_WD_TRG */

 Disable SW_WD_TRG */

 Disable SW_WD_TRG */

 -- Higher level functions ------------------------------------*/

 Enable the watchdog */

 Disable the watchdog */

 Refresh the watchdog */

 -- File operations -------------------------------------------*/

/**

 *	pc87413_open:

 *	@inode: inode of device

 *	@file: file handle to device

 *

 /dev/watchdog can only be opened once */

 Reload and activate timer */

/**

 *	pc87413_release:

 *	@inode: inode to board

 *	@file: file handle to board

 *

 *	The watchdog has a configurable API. There is a religious dispute

 *	between people who want their watchdog to be able to shut down and

 *	those who want to be sure if the watchdog manager dies the machine

 *	reboots. In the former case we disable the counters, in the latter

 *	case you have to open it again very soon.

 Shut off the timer. */

/**

 *	pc87413_status:

 *

 *      return, if the watchdog is enabled (timeout is set...)

 currently not supported */

/**

 *	pc87413_write:

 *	@file: file handle to the watchdog

 *	@data: data buffer to write

 *	@len: length in bytes

 *	@ppos: pointer to the position to write. No seeks allowed

 *

 *	A write to a watchdog device is defined as a keepalive signal. Any

 *	write of data will do, as we we don't define content meaning.

 See if we got the magic character 'V' and reload the timer */

 reset expect flag */

			/* scan to see whether or not we got the

 someone wrote to us, we should reload the timer */

/**

 *	pc87413_ioctl:

 *	@file: file handle to the device

 *	@cmd: watchdog command

 *	@arg: argument pointer

 *

 *	The watchdog API defines a common set of functions for all watchdogs

 *	according to their available features. We only actually usefully support

 *	querying capabilities and current status.

 the API states this is given in secs */

 and return the new timeout */

 -- Notifier funtions -----------------------------------------*/

/**

 *	pc87413_notify_sys:

 *	@this: our notifier block

 *	@code: the event being reported

 *	@unused: unused

 *

 *	Our notifier is called on system shutdowns. We want to turn the card

 *	off at reboot otherwise the machine will reboot again during memory

 *	test or worse yet during the following fsck. This would suck, in fact

 *	trust me - if it happens it does suck.

 Turn the card off */

 -- Module's structures ---------------------------------------*/

 -- Module init functions -------------------------------------*/

/**

 *	pc87413_init: module's "constructor"

 *

 *	Set up the WDT watchdog board. All we have to do is grab the

 *	resources we require and bitch if anyone beat us to them.

 *	The open() function will actually kick the board off.

/**

 *	pc87413_exit: module's "destructor"

 *

 *	Unload the watchdog. You cannot do this with any file handles open.

 *	If your watchdog is set to continue ticking on close and you unload

 *	it, well it keeps ticking. We won't get the interrupt but the board

 *	will not touch PC memory so all is fine. You just have to load a new

 *	module in 60 seconds or reboot.

 Stop the timer before we leave */

/*

 * MOXA ART SoCs watchdog driver.

 *

 * Copyright (C) 2013 Jonas Jensen

 *

 * Jonas Jensen <jonas.jensen@gmail.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 SPDX-License-Identifier: GPL-2.0+

/*

 *	Industrial Computer Source PCI-WDT500/501 driver

 *

 *	(c) Copyright 1996-1997 Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *						All Rights Reserved.

 *

 *	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide

 *	warranty for any of this software. This material is provided

 *	"AS-IS" and at no charge.

 *

 *	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>

 *

 *	Release 0.10.

 *

 *	Fixes

 *		Dave Gregorich	:	Modularisation and minor bugs

 *		Alan Cox	:	Added the watchdog ioctl() stuff

 *		Alan Cox	:	Fixed the reboot problem (as noted by

 *					Matt Crocker).

 *		Alan Cox	:	Added wdt= boot option

 *		Alan Cox	:	Cleaned up copy/user stuff

 *		Tim Hockin	:	Added insmod parameters, comment cleanup

 *					Parameterized timeout

 *		JP Nollmann	:	Added support for PCI wdt501p

 *		Alan Cox	:	Split ISA and PCI cards into two drivers

 *		Jeff Garzik	:	PCI cleanups

 *		Tigran Aivazian	:	Restructured wdtpci_init_one() to handle

 *					failures

 *		Joel Becker	:	Added WDIOC_GET/SETTIMEOUT

 *		Zwane Mwaikambo	:	Magic char closing, locking changes,

 *					cleanups

 *		Matt Domsch	:	nowayout module option

 We can only use 1 card due to the /dev/watchdog restriction */

 Default timeout */

 Default heartbeat = 60 seconds */

 Support for the Fan Tachometer on the PCI-WDT501 */

/*

 *	Programming support

/**

 *	wdtpci_start:

 *

 *	Start the watchdog driver.

	/*

	 * "pet" the watchdog, as Access says.

	 * This resets the clock outputs.

 Disable watchdog */

	wdtpci_ctr_mode(2, 0);		/* Program CTR2 for Mode 0:

 Enable watchdog */

 Disable watchdog */

 2.0833MHz clock */

 disable */

 disable */

 disable */

 disable */

	wdtpci_ctr_mode(0, 3);		/* Program CTR0 for Mode 3:

	wdtpci_ctr_mode(1, 2);		/* Program CTR1 for Mode 2:

	wdtpci_ctr_mode(2, 1);		/* Program CTR2 for Mode 1:

 count at 100Hz */

 Heartbeat */

 DO NOT LOAD CTR2 on PCI card! -- JPN */

 Enable watchdog */

/**

 *	wdtpci_stop:

 *

 *	Stop the watchdog driver.

 Turn the card off */

 Disable watchdog */

 0 length reset pulses now */

/**

 *	wdtpci_ping:

 *

 *	Reload counter one with the watchdog heartbeat. We don't bother

 *	reloading the cascade counter.

 Write a watchdog value */

 Disable watchdog */

	wdtpci_ctr_mode(1, 2);		/* Re-Program CTR1 for Mode 2:

 Heartbeat */

 Enable watchdog */

/**

 *	wdtpci_set_heartbeat:

 *	@t:		the new heartbeat value that needs to be set.

 *

 *	Set a new heartbeat value for the watchdog device. If the heartbeat

 *	value is incorrect we keep the old value and return -EINVAL.

 *	If successful we return 0.

 Arbitrary, can't find the card's limits */

/**

 *	wdtpci_get_status:

 *	@status:		the new status.

 *

 *	Extract the status information from a WDT watchdog device. There are

 *	several board variants so we have to know which bits are valid. Some

 *	bits default to one and some to zero in order to be maximally painful.

 *

 *	we then map the bits onto the status ioctl flags.

/**

 *	wdtpci_get_temperature:

 *

 *	Reports the temperature in degrees Fahrenheit. The API is in

 *	farenheit. It was designed by an imperial measurement luddite.

/**

 *	wdtpci_interrupt:

 *	@irq:		Interrupt number

 *	@dev_id:	Unused as we don't allow multiple devices.

 *

 *	Handle an interrupt from the board. These are raised when the status

 *	map changes in what the board considers an interesting way. That means

 *	a failure condition occurring.

	/*

	 *	Read the status register see what is up and

	 *	then printk it.

/**

 *	wdtpci_write:

 *	@file: file handle to the watchdog

 *	@buf: buffer to write (unused as data does not matter here

 *	@count: count of bytes

 *	@ppos: pointer to the position to write. No seeks allowed

 *

 *	A write to a watchdog device is defined as a keepalive signal. Any

 *	write of data will do, as we we don't define content meaning.

 In case it was set long ago */

/**

 *	wdtpci_ioctl:

 *	@file: file handle to the device

 *	@cmd: watchdog command

 *	@arg: argument pointer

 *

 *	The watchdog API defines a common set of functions for all watchdogs

 *	according to their available features. We only actually usefully support

 *	querying capabilities and current status.

 Add options according to the card we have */

/**

 *	wdtpci_open:

 *	@inode: inode of device

 *	@file: file handle to device

 *

 *	The watchdog device has been opened. The watchdog device is single

 *	open and on opening we load the counters. Counter zero is a 100Hz

 *	cascade, into counter 1 which downcounts to reboot. When the counter

 *	triggers counter 2 downcounts the length of the reset pulse which

 *	set set to be as long as possible.

	/*

	 *	Activate

/**

 *	wdtpci_release:

 *	@inode: inode to board

 *	@file: file handle to board

 *

 *	The watchdog has a configurable API. There is a religious dispute

 *	between people who want their watchdog to be able to shut down and

 *	those who want to be sure if the watchdog manager dies the machine

 *	reboots. In the former case we disable the counters, in the latter

 *	case you have to open it again very soon.

/**

 *	wdtpci_temp_read:

 *	@file: file handle to the watchdog board

 *	@buf: buffer to write 1 byte into

 *	@count: length of buffer

 *	@ptr: offset (no seek allowed)

 *

 *	Read reports the temperature in degrees Fahrenheit. The API is in

 *	fahrenheit. It was designed by an imperial measurement luddite.

/**

 *	wdtpci_temp_open:

 *	@inode: inode of device

 *	@file: file handle to device

 *

 *	The temperature device has been opened.

/**

 *	wdtpci_temp_release:

 *	@inode: inode to board

 *	@file: file handle to board

 *

 *	The temperature device has been closed.

/**

 *	wdtpci_notify_sys:

 *	@this: our notifier block

 *	@code: the event being reported

 *	@unused: unused

 *

 *	Our notifier is called on system shutdowns. We want to turn the card

 *	off at reboot otherwise the machine will reboot again during memory

 *	test or worse yet during the following fsck. This would suck, in fact

 *	trust me - if it happens it does suck.

/*

 *	Kernel Interfaces

/*

 *	The WDT card needs to learn about soft shutdowns in order to

 *	turn the timebomb registers off.

	/* Check that the heartbeat value is within its range;

	/* here we assume only one device will ever have

 terminate list */

 SPDX-License-Identifier: GPL-2.0+

/*

 *	ICP Wafer 5823 Single Board Computer WDT driver

 *	http://www.icpamerica.com/wafer_5823.php

 *	May also work on other similar models

 *

 *	(c) Copyright 2002 Justin Cormack <justin@street-vision.com>

 *

 *	Release 0.02

 *

 *	Based on advantechwdt.c which is based on wdt.c.

 *	Original copyright messages:

 *

 *	(c) Copyright 1996-1997 Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *						All Rights Reserved.

 *

 *	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide

 *	warranty for any of this software. This material is provided

 *	"AS-IS" and at no charge.

 *

 *	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>

 *

 60 sec default timeout */

/*

 *	You must set these - there is no sane way to probe for this board.

 *

 *	To enable, write the timeout value in seconds (1 to 255) to I/O

 *	port WDT_START, then read the port to start the watchdog. To pat

 *	the dog, read port WDT_STOP to stop the timer, then read WDT_START

 *	to restart it again.

 in seconds */

 pat watchdog */

 start up watchdog */

 stop watchdog */

 See if we got the magic character 'V' and reload the timer */

 In case it was set long ago */

			/* scan to see whether or not we got the magic

		/* Well, anyhow someone wrote to us, we should

	/*

	 *      Activate

/*

 *	Notifier for system down

/*

 *	Kernel Interfaces

/*

 *	The WDT needs to learn about soft shutdowns in order to

 *	turn the timebomb registers off.

 end of wafer5823wdt.c */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Watchdog driver for z/VM and LPAR using the diag 288 interface.

 *

 * Under z/VM, expiration of the watchdog will send a "system restart" command

 * to CP.

 *

 * The command can be altered using the module parameter "cmd". This is

 * not recommended because it's only supported on z/VM but not whith LPAR.

 *

 * On LPAR, the watchdog will always trigger a system restart. the module

 * paramter cmd is meaningless here.

 *

 *

 * Copyright IBM Corp. 2004, 2013

 * Author(s): Arnd Bergmann (arndb@de.ibm.com)

 *	      Philipp Hachtmann (phacht@de.ibm.com)

 *

 Minimal time supported by diag88 */

 One hour should be enough - pure estimation */

 Function codes - init, change, cancel */

 Action codes for LPAR watchdog */

		/*

		 * It seems to be ok to z/VM to use the init function to

		 * retrigger the watchdog. On LPAR WDT_FUNC_CHANGE must

		 * be used when the watchdog is running.

/*

 * It makes no sense to go into suspend while the watchdog is running.

 * Depending on the memory size, the watchdog might trigger, while we

 * are still saving the memory.

/*

 * drivers/char/watchdog/max63xx_wdt.c

 *

 * Driver for max63{69,70,71,72,73,74} watchdog timers

 *

 * Copyright (C) 2009 Marc Zyngier <maz@misterjones.org>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 *

 * This driver assumes the watchdog pins are memory mapped (as it is

 * the case for the Arcom Zeus). Should it be connected over GPIOs or

 * another interface, some abstraction will have to be introduced.

/*

 * Memory mapping: a single byte, 3 first lower bits to select bit 3

 * to ping the watchdog.

 memory mapping */

 WDI and WSET bits write access routines */

/*

 * The timeout values used are actually the absolute minimum the chip

 * offers. Typical values on my board are slightly over twice as long

 * (10s setting ends up with a 25s timeout), and can be up to 3 times

 * the nominal setting (according to the datasheet). So please take

 * these values with a grain of salt. Same goes for the initial delay

 * "feature". Only max6373/74 have a few settings without this initial

 * delay (selected with the "nodelay" parameter).

 *

 * I also decided to remove from the tables any timeout smaller than a

 * second, as it looked completly overkill...

 Timeouts in second */

 check for a edge triggered startup */

 Attempt to use fwnode first */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  MachZ ZF-Logic Watchdog Timer driver for Linux

 *

 *  The author does NOT admit liability nor provide warranty for

 *  any of this software. This material is provided "AS-IS" in

 *  the hope that it may be useful for others.

 *

 *  Author: Fernando Fuganti <fuganti@conectiva.com.br>

 *

 *  Based on sbc60xxwdt.c by Jakob Oestergaard

 *

 *  We have two timers (wd#1, wd#2) driven by a 32 KHz clock with the

 *  following periods:

 *      wd#1 - 2 seconds;

 *      wd#2 - 7.2 ms;

 *  After the expiration of wd#1, it can generate a NMI, SCI, SMI, or

 *  a system RESET and it starts wd#2 that unconditionally will RESET

 *  the system when the counter reaches zero.

 *

 *  14-Dec-2001 Matt Domsch <Matt_Domsch@dell.com>

 *      Added nowayout module option to override CONFIG_WATCHDOG_NOWAYOUT

 ports */

 indexes */			
 16   */

 16   */

 8    */

 16   */

 8    */

 8    */

 controls */

 utilities */

/*

 * action refers to action taken when watchdog resets

 * 0 = GEN_RESET

 * 1 = GEN_SMI

 * 2 = GEN_NMI

 * 3 = GEN_SCI

 * defaults to GEN_RESET (0)

 timeout for user land heart beat (10 seconds) */

 timeout for hardware watchdog (~500ms) */

 number of ticks on WD#1 (driven by a 32KHz clock, 2s) */

 CONTROL register functions */

 WD#? counter functions */

/*

 *	Just set counter value

/*

 * stop hardware timer

 stop internal ping */

 stop watchdog timer */

 disable wd1 and wd2 */

/*

 * start hardware timer

 user land ping */

 start the timer for internal ping */

 start watchdog timer */

		/*

		 * reset event is activated by transition from 0 to 1 on

		 * RESET_WD1 bit and we assume that it is already zero...

 ...and nothing changes until here */

 See if we got the magic character */

		/*

		 * no need to check for close confirmation

		 * no way to disable watchdog ;)

			/*

			 * note: just in case someone wrote the magic character

			 * five months ago...

 now scan */

		/*

		 * Well, anyhow someone wrote to us,

		 * we should return that favour

/*

 * Notifier for system down

/*

 * The device needs to learn about soft shutdowns in order to

 * turn the timebomb registers off.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2018-2019 NXP.

/*

 * Software timer tick implemented in scfw side, support 10ms to 0xffffffff ms

 * in theory, but for normal case, 1s~128s is enough, you can change this max

 * value in case it's not enough.

	/*

	 * SCU firmware calculates pretimeout based on current time

	 * stamp instead of watchdog timeout stamp, need to convert

	 * the pretimeout to SCU firmware's timeout value.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 *      Driver for the MTX-1 Watchdog.

 *

 *      (C) Copyright 2005 4G Systems <info@4g-systems.biz>,

 *							All Rights Reserved.

 *                              http://www.4g-systems.biz

 *

 *	(C) Copyright 2007 OpenWrt.org, Florian Fainelli <florian@openwrt.org>

 *      (c) Copyright 2005    4G Systems <info@4g-systems.biz>

 *

 *      Release 0.01.

 *      Author: Michael Stickel  michael.stickel@4g-systems.biz

 *

 *      Release 0.02.

 *	Author: Florian Fainelli florian@openwrt.org

 *		use the Linux watchdog/timer APIs

 *

 *      The Watchdog is configured to reset the MTX-1

 *      if it is not triggered for 100 seconds.

 *      It should not be triggered more often than 1.6 seconds.

 *

 *      A timer triggers the watchdog every 5 seconds, until

 *      it is opened for the first time. After the first open

 *      it MUST be triggered every 2..95 seconds.

 toggle wdt gpio */

 Filesystem functions */

 FIXME: do we need to lock this test ? */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2015-2016 Mentor Graphics

 Default watchdog pretimeout governor */

 The spinlock protects default_gov, wdd->gov and pretimeout_list */

 List of watchdog devices, which can generate a pretimeout event */

 The mutex protects governor list and serializes external interfaces */

 List of the registered watchdog pretimeout governors */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	SMsC 37B787 Watchdog Timer driver for Linux 2.6.x.x

 *

 *	Based on acquirewdt.c by Alan Cox <alan@lxorguk.ukuu.org.uk>

 *	and some other existing drivers

 *

 *	The authors do NOT admit liability nor provide warranty for

 *	any of this software. This material is provided "AS-IS" in

 *	the hope that it may be useful for others.

 *

 *	(C) Copyright 2003-2006  Sven Anders <anders@anduras.de>

 *

 *  History:

 *	2003 - Created version 1.0 for Linux 2.4.x.

 *	2006 - Ported to Linux 2.6, added nowayout and MAGICCLOSE

 *	       features. Released version 1.1

 *

 *  Theory of operation:

 *

 *	A Watchdog Timer (WDT) is a hardware circuit that can

 *	reset the computer system in case of a software fault.

 *	You probably knew that already.

 *

 *	Usually a userspace daemon will notify the kernel WDT driver

 *	via the /dev/watchdog special device file that userspace is

 *	still alive, at regular intervals.  When such a notification

 *	occurs, the driver will usually tell the hardware watchdog

 *	that everything is in order, and that the watchdog should wait

 *	for yet another little while to reset the system.

 *	If userspace fails (RAM error, kernel bug, whatever), the

 *	notifications cease to occur, and the hardware watchdog will

 *	reset the system (causing a reboot) after the timeout occurs.

 *

 * Create device with:

 *  mknod /dev/watchdog c 10 130

 *

 * For an example userspace keep-alive daemon, see:

 *   Documentation/watchdog/wdt.rst

 enable support for minutes as units? */

 (does not always work correctly, so disabled by default!) */

 timer's unit */

 timeout value: default is 60 "units" */

 is the timer enabled? */

 is the close expected? */

 to guard the watchdog from io races */

 -- Low level function ----------------------------------------*/

 unlock the IO chip */

 lock the IO chip */

 select the IO device */

 write to the control register */

 read from the control register */

 -- Medium level functions ------------------------------------*/

	/* -- General Purpose I/O Bit 1.2 --

	 * Bit 0,   In/Out: 0 = Output, 1 = Input

	 * Bit 1,   Polarity: 0 = No Invert, 1 = Invert

	 * Bit 2,   Group Enable Intr.: 0 = Disable, 1 = Enable

	 * Bit 3/4, Function select: 00 = GPI/O, 01 = WDT, 10 = P17,

	 *                           11 = Either Edge Triggered Intr. 2

	 * Bit 5/6  (Reserved)

	 * Bit 7,   Output Type: 0 = Push Pull Bit, 1 = Open Drain

	/* -- General Purpose I/O Bit 1.3 --

	 * Bit 0,  In/Out: 0 = Output, 1 = Input

	 * Bit 1,  Polarity: 0 = No Invert, 1 = Invert

	 * Bit 2,  Group Enable Intr.: 0 = Disable, 1 = Enable

	 * Bit 3,  Function select: 0 = GPI/O, 1 = LED

	 * Bit 4-6 (Reserved)

	 * Bit 7,  Output Type: 0 = Push Pull Bit, 1 = Open Drain

	/* -- Watchdog timer units --

	 * Bit 0-6 (Reserved)

	 * Bit 7,  WDT Time-out Value Units Select

	 *         (0 = Minutes, 1 = Seconds)

	/* -- Watchdog Timer Time-out Value --

	 * Bit 0-7 Binary coded units (0=Disabled, 1..255)

	/* -- Watchdog timer configuration --

	 * Bit 0   Joystick enable: 0* = No Reset, 1 = Reset WDT upon

	 *							Gameport I/O

	 * Bit 1   Keyboard enable: 0* = No Reset, 1 = Reset WDT upon KBD Intr.

	 * Bit 2   Mouse enable: 0* = No Reset, 1 = Reset WDT upon Mouse Intr

	 * Bit 3   Reset the timer

	 *         (Wrong in SMsC documentation? Given as: PowerLED Timout

	 *							Enabled)

	 * Bit 4-7 WDT Interrupt Mapping: (0000* = Disabled,

	 *            0001=IRQ1, 0010=(Invalid), 0011=IRQ3 to 1111=IRQ15)

	/* -- Watchdog timer control --

	 * Bit 0   Status Bit: 0 = Timer counting, 1 = Timeout occurred

	 * Bit 1   Power LED Toggle: 0 = Disable Toggle, 1 = Toggle at 1 Hz

	 * Bit 2   Force Timeout: 1 = Forces WD timeout event (self-cleaning)

	 * Bit 3   P20 Force Timeout enabled:

	 *          0 = P20 activity does not generate the WD timeout event

	 *          1 = P20 Allows rising edge of P20, from the keyboard

	 *              controller, to force the WD timeout event.

	 * Bit 4   (Reserved)

	 * -- Soft power management --

	 * Bit 5   Stop Counter: 1 = Stop software power down counter

	 *            set via register 0xB8, (self-cleaning)

	 *            (Upon read: 0 = Counter running, 1 = Counter stopped)

	 * Bit 6   Restart Counter: 1 = Restart software power down counter

	 *            set via register 0xB8, (self-cleaning)

	 * Bit 7   SPOFF: 1 = Force software power down (self-cleaning)

 -- Higher level functions ------------------------------------*/

 initialize watchdog */

 enable the watchdog */

 Select pin 80 = LED not GPIO */

	gpio_bit12(0x0A);  /* Set pin 79 = WDT not

 disable the timeout */

 reset control register */

 reset configuration register */

 read old (timer units) register */

 set to seconds */

 set the watchdog timer units */

 shutdown the watchdog */

 disable the watchdog */

 reset watchdog config register */

 reset watchdog control register */

 disable timeout */

 set timeout => enable watchdog */

 set Power LED to blink, if we enable the timeout */

 set timeout value */

 get timeout */

 disable watchdog */

 set the timeout to 0 to disable the watchdog */

 enable watchdog by setting the current timeout */

 set the current timeout... */

 reset the timer */

 reset the timer */

 return, if the watchdog is enabled (timeout is set...) */

 -- File operations -------------------------------------------*/

 open => enable watchdog and set initial timeout */

 /dev/watchdog can only be opened once */

 Reload and activate timer */

 close => shut off the timer */

 Shut off the timer. */

 write => update the timer to keep the machine alive */

 See if we got the magic character 'V' and reload the timer */

 reset expect flag */

			/* scan to see whether or not we got the

 someone wrote to us, we should reload the timer */

 ioctl => control interface */

 the API states this is given in secs */

 and return the new timeout */

 -- Notifier funtions -----------------------------------------*/

 set timeout to 0, to avoid possible race-condition */

 -- Module's structures ---------------------------------------*/

 -- Module init functions -------------------------------------*/

 module's "constructor" */

 set new maximum, if it's too big */

 init the watchdog timer */

 output info */

 module's "destructor" */

 Stop the timer before we leave */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Watchdog driver for Ricoh RN5T618 PMIC

 *

 * Copyright (C) 2014 Beniamino Galvani <b.galvani@gmail.com>

/*

 * This array encodes the values of WDOGTIM field for the supported

 * watchdog expiration times. If the watchdog is not accessed before

 * the timer expiration, the PMU generates an interrupt and if the CPU

 * doesn't clear it within one second the system is restarted.

 enable repower-on */

 enable watchdog */

 enable watchdog interrupt */

 The counter is restarted after a R/W access to watchdog register */

 Clear pending watchdog interrupt */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 *  Copyright (C) 2010 John Crispin <john@phrozen.org>

 *  Copyright (C) 2017 Hauke Mehrtens <hauke@hauke-m.de>

 *  Based on EP93xx wdt driver

 CPU0 Reset Source Register */

 reset cause mask */

/*

 * Section 3.4 of the datasheet

 * The password sequence protects the WDT control register from unintended

 * write actions, which might cause malfunction of the WDT.

 *

 * essentially the following two magic passwords need to be written to allow

 * IO access to the WDT core

 watchdog control register */

 enable bit */

 Pre-warning limit set to 1/16 of max WDT period */

 set clock divider to 0x40000 */

 Password field */

 The reload field is 16 bit */

 watchdog status register */

 Enable */

 Timer value */

 write the second magic plus the configuration and new timeout */

 write the second magic plus the configuration and new timeout */

 we do not need to enable the clock as it is always running */

		/*

		 * If the watchdog is already running overwrite it with our

		 * new settings. Stop is not needed as the start call will

		 * replace all settings anyway.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Watchdog Device Driver for Xilinx axi/xps_timebase_wdt

 *

 * (C) Copyright 2013 - 2014 Xilinx, Inc.

 * (C) Copyright 2011 (Alejandro Cabrera <aldaya@gmail.com>)

 Register offsets for the Wdt device */

 Control/Status Register0 */

 Control/Status Register1 */

 Timebase Register Offset */

 Control/Status Register Masks  */

 Reset status */

 Timer state  */

 Enable bit 1 */

 Control/Status Register 0/1 bits  */

 Enable bit 2 */

 SelfTest constants */

 spinlock for register handling */

 Clean previous status and enable the watchdog timer */

		/*

		 * Clock framework support is optional, continue on

		 * anyways if we don't find a matching clock.

	/*

	 * Twice of the 2^wdt_interval / freq  because the first wdt overflow is

	 * ignored (interrupt), reset is only generated at second wdt overflow

/**

 * xwdt_suspend - Suspend the device.

 *

 * @dev: handle to the device structure.

 * Return: 0 always.

/**

 * xwdt_resume - Resume the device.

 *

 * @dev: handle to the device structure.

 * Return: 0 on success, errno otherwise.

 Match table for of_platform binding */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MixCom Watchdog: A Simple Hardware Watchdog Device

 * Based on Softdog driver by Alan Cox and PC Watchdog driver by Ken Hollis

 *

 * Author: Gergely Madarasz <gorgo@itc.hu>

 *

 * Copyright (c) 1999 ITConsult-Pro Co. <info@itc.hu>

 *

 * Version 0.1 (99/04/15):

 *		- first version

 *

 * Version 0.2 (99/06/16):

 *		- added kernel timer watchdog ping after close

 *		  since the hardware does not support watchdog shutdown

 *

 * Version 0.3 (99/06/21):

 *		- added WDIOC_GETSTATUS and WDIOC_GETSUPPORT ioctl calls

 *

 * Version 0.3.1 (99/06/22):

 *		- allow module removal while internal timer is active,

 *		  print warning about probable reset

 *

 * Version 0.4 (99/11/15):

 *		- support for one more type board

 *

 * Version 0.5 (2001/12/14) Matt Domsch <Matt_Domsch@dell.com>

 *		- added nowayout module option to override

 *		  CONFIG_WATCHDOG_NOWAYOUT

 *

 * Version 0.6 (2002/04/12): Rob Radez <rob@osinvestor.com>

 *		- make mixcomwd_opened unsigned,

 *		  removed lock_kernel/unlock_kernel from mixcomwd_release,

 *		  modified ioctl a bit to conform to API

/*

 * We have two types of cards that can be probed:

 * 1) The Mixcom cards: these cards can be found at addresses

 *    0x180, 0x280, 0x380 with an additional offset of 0xc10.

 *    (Or 0xd90, 0xe90, 0xf90).

 * 2) The FlashCOM cards: these cards can be set up at

 *    0x300 -> 0x378, in 0x8 jumps with an offset of 0x04.

 *    (Or 0x304 -> 0x37c in 0x8 jumps).

 *    Each card has it's own ID.

 The Mixcom cards */

 The FlashCOM cards */

 The end of the list */

 long req'd for setbit --RR */

/*

 *	Allow only one person to hold it open

		/*

		 * fops_get() code via open() has already done

		 * a try_module_get() so it is safe to do the

		 * __module_get().

 In case it was set long ago */

 SPDX-License-Identifier: GPL-2.0-or-later

/* drivers/char/watchdog/scx200_wdt.c



   National Semiconductor SCx200 Watchdog support



   Copyright (c) 2001,2002 Christer Weinigel <wingel@nano-system.com>



   Some code taken from:

   National Semiconductor PC87307/PC97307 (ala SC1200) WDT driver

   (c) Copyright 2002 Zwane Mwaikambo <zwane@commfireservices.com>





   The author(s) of this software shall not be held liable for damages

   of any nature resulting due to the use of this software. This

 in seconds */

 Bits of the WDCNFG register */

 Enable watchdog */

 Disable watchdog */

 The scaling factor for the timer, this depends on the value of W_ENABLE */

 only allow one at a time */

 check for a magic close character */

 check that we have found the configuration block */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ARM Secure Monitor Call watchdog driver

 *

 * Copyright 2020 Google LLC.

 * Julius Werner <jwerner@chromium.org>

 * Based on mtk_wdt.c

 get_timeleft is optional */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2015 Zodiac Inflight Innovations

 *

 * Author: Martyn Welch <martyn.welch@collabora.co.uk>

 *

 * Based on twl4030_wdt.c by Timo Kokkonen <timo.t.kokkonen at nokia.com>:

 *

 * Copyright (C) Nokia Corporation

 Received and ready for next Download packet. */

 Firmware commands */

/*

 * ziirave_firm_write_pkt() - Build and write a firmware packet

 *

 * A packet to send to the firmware is composed by following bytes:

 *     Length | Addr0 | Addr1 | Data0 .. Data15 | Checksum |

 * Where,

 *     Length: A data byte containing the length of the data.

 *     Addr0: Low byte of the address.

 *     Addr1: High byte of the address.

 *     Data0 .. Data15: Array of 16 bytes of data.

 *     Checksum: Checksum byte to verify data integrity.

 Check max data size */

	/*

	 * Ignore packets that are targeting program memory outisde of

	 * app partition, since they will be ignored by the

	 * bootloader. At the same time, we need to make sure we'll

	 * allow zero length packet that will be sent as the last step

	 * of firmware update

 Packet length */

 Packet address */

 Packet checksum */

		/*

		 * If data crossed page boundary we need to split this

		 * write in two

	/*

	 * Finish firmware download process by sending a zero length

	 * payload

 This sleep seems to be required */

 Start firmware verification */

 End download operation */

 Reset the processor */

 Update firmware version */

 Restore the watchdog timeout */

 See if the reset pulse duration is provided in an of_node */

	/*

	 * The default value set in the watchdog should be perfectly valid, so

	 * pass that in if we haven't provided one via the module parameter or

	 * of property.

 If in unconfigured state, set to stopped */

 SPDX-License-Identifier: GPL-2.0+

/*

 *	Eurotech CPU-1220/1410/1420 on board WDT driver

 *

 *	(c) Copyright 2001 Ascensit <support@ascensit.com>

 *	(c) Copyright 2001 Rodolfo Giometti <giometti@ascensit.com>

 *	(c) Copyright 2002 Rob Radez <rob@osinvestor.com>

 *

 *	Based on wdt.c.

 *	Original copyright messages:

 *

 *	(c) Copyright 1996-1997 Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *						All Rights Reserved.

 *

 *	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide

 *	warranty for any of this software. This material is provided

 *	"AS-IS" and at no charge.

 *

 *	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>*

/* Changelog:

 *

 * 2001 - Rodolfo Giometti

 *	Initial release

 *

 * 2002/04/25 - Rob Radez

 *	clean up #includes

 *	clean up locking

 *	make __setup param unique

 *	proper options in watchdog_info

 *	add WDIOC_GETSTATUS and WDIOC_SETOPTIONS ioctls

 *	add expect_close support

 *

 * 2002.05.30 - Joel Becker <joel.becker@oracle.com>

 *	Added Matt Domsch's nowayout module option.

/*

 *	The eurotech CPU-1220/1410/1420's watchdog is a part

 *	of the on-board SUPER I/O device SMSC FDC 37B782.

/*

 * You must set these - there is no sane way to probe for this board.

 1 minute */

/*

 * Some symbolic names

/*

 * Programming support

 set the logical device */

 activate the WDT */

 Setting interrupt line */

 if invalid we disable interrupt */

 we use seconds */

 the default timeout */

/*

 * Kernel methods.

/**

 * eurwdt_ping:

 *

 * Reload counter one with the watchdog timeout.

 Write the watchdog default value */

/**

 * eurwdt_write:

 * @file: file handle to the watchdog

 * @buf: buffer to write (unused as data does not matter here

 * @count: count of bytes

 * @ppos: pointer to the position to write. No seeks allowed

 *

 * A write to a watchdog device is defined as a keepalive signal. Any

 * write of data will do, as we we don't define content meaning.

 the default timeout */

/**

 * eurwdt_ioctl:

 * @file: file handle to the device

 * @cmd: watchdog command

 * @arg: argument pointer

 *

 * The watchdog API defines a common set of functions for all watchdogs

 * according to their available features.

 Sanity check */

/**

 * eurwdt_open:

 * @inode: inode of device

 * @file: file handle to device

 *

 * The misc device has been opened. The watchdog device is single

 * open and on opening we load the counter.

 initial timeout */

 Activate the WDT */

/**

 * eurwdt_release:

 * @inode: inode to board

 * @file: file handle to board

 *

 * The watchdog has a configurable API. There is a religious dispute

 * between people who want their watchdog to be able to shut down and

 * those who want to be sure if the watchdog manager dies the machine

 * reboots. In the former case we disable the counters, in the latter

 * case you have to open it again very soon.

/**

 * eurwdt_notify_sys:

 * @this: our notifier block

 * @code: the event being reported

 * @unused: unused

 *

 * Our notifier is called on system shutdowns. We want to turn the card

 * off at reboot otherwise the machine will reboot again during memory

 * test or worse yet during the following fsck. This would suck, in fact

 * trust me - if it happens it does suck.

 Turn the card off */

/*

 * Kernel Interfaces

/*

 * The WDT card needs to learn about soft shutdowns in order to

 * turn the timebomb registers off.

/**

 * eurwdt_exit:

 *

 * Unload the watchdog. You cannot do this with any file handles open.

 * If your watchdog is set to continue ticking on close and you unload

 * it, well it keeps ticking. We won't get the interrupt but the board

 * will not touch PC memory so all is fine. You just have to load a new

 * module in 60 seconds or reboot.

/**

 * eurwdt_init:

 *

 * Set up the WDT watchdog board. After grabbing the resources

 * we require we need also to unlock the device.

 * The open() function will actually kick the board off.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	Wdt977	0.04:	A Watchdog Device for Netwinder W83977AF chip

 *

 *	(c) Copyright 1998 Rebel.com (Woody Suwalski <woody@netwinder.org>)

 *

 *			-----------------------

 *

 *			-----------------------

 *      14-Dec-2001 Matt Domsch <Matt_Domsch@dell.com>

 *           Added nowayout module option to override CONFIG_WATCHDOG_NOWAYOUT

 *	19-Dec-2001 Woody Suwalski: Netwinder fixes, ioctl interface

 *	06-Jan-2002 Woody Suwalski: For compatibility, convert all timeouts

 *				    from minutes to seconds.

 *      07-Jul-2003 Daniele Bellucci: Audit return code of misc_register in

 *                                    nwwatchdog_init.

 *      25-Oct-2005 Woody Suwalski: Convert addresses to #defs, add spinlocks

 *				    remove limitiation to be used on

 *				    Netwinders only

 on some systems it can be 0x3F0 */

 default timeout in seconds */

 timeout in minutes */

/*

 * Start the watchdog

 unlock the SuperIO chip */

	/* select device Aux2 (device=8) and set watchdog regs F2, F3 and F4

	 * F2 has the timeout in minutes

	 * F3 could be set to the POWER LED blink (with GP17 set to PowerLed)

	 *   at timeout, and to reset timer on kbd/mouse activity (not impl.)

	 * F4 is used to just clear the TIMEOUT'ed state (bit 0)

	outb_p(0x00, IO_DATA_PORT);	/* another setting is 0E for

	/* At last select device Aux1 (dev=7) and set GP16 as a

	 * watchdog output. In test mode watch the bit 1 on F4 to

	 * indicate "triggered"

 lock the SuperIO chip */

/*

 * Stop the watchdog

 unlock the SuperIO chip */

	/* select device Aux2 (device=8) and set watchdog regs F2,F3 and F4

	* F3 is reset to its default state

	* F4 can clear the TIMEOUT'ed state (bit 0) - back to default

	* We can not use GP17 as a PowerLed, as we use its usage as a RedLed

	/* at last select device Aux1 (dev=7) and set

 lock the SuperIO chip */

/*

 * Send a keepalive ping to the watchdog

 * This is done by simply re-writing the timeout to reg. 0xF2

 unlock the SuperIO chip */

 select device Aux2 (device=8) and kicks watchdog reg F2 */

 F2 has the timeout in minutes */

 lock the SuperIO chip */

/*

 * Set the watchdog timeout value

 convert seconds to minutes, rounding up */

		/* we have a hw bug somewhere, so each 977 minute is actually

		 * only 30sec. This limits the max timeout to half of device

		 * max of 255 minutes...

	/* timeout is the timeout in seconds, timeoutM is

/*

 * Get the watchdog status

 unlock the SuperIO chip */

 select device Aux2 (device=8) and read watchdog reg F4 */

 lock the SuperIO chip */

/*

 *	/dev/watchdog handling

 If the watchdog is alive we don't need to start it again */

	/*

	 *	Shut off the timer.

	 *	Lock it in if it's a module and we set nowayout

/*

 *      wdt977_write:

 *      @file: file handle to the watchdog

 *      @buf: buffer to write (unused as data does not matter here

 *      @count: count of bytes

 *      @ppos: pointer to the position to write. No seeks allowed

 *

 *      A write to a watchdog device is defined as a keepalive signal. Any

 *      write of data will do, as we we don't define content meaning.

 In case it was set long ago */

 someone wrote to us, we should restart timer */

/*

 *      wdt977_ioctl:

 *      @inode: inode of the device

 *      @file: file handle to the device

 *      @cmd: watchdog command

 *      @arg: argument pointer

 *

 *      The watchdog API defines a common set of functions for all watchdogs

 *      according to their available features.

	/* Check that the timeout value is within its range;

	/* on Netwinder the IOports are already reserved by

	 * arch/arm/mach-footbridge/netwinder-hw.c

 SPDX-License-Identifier: GPL-2.0+

/*

 *	Acquire Single Board Computer Watchdog Timer driver

 *

 *	Based on wdt.c. Original copyright messages:

 *

 *	(c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *						All Rights Reserved.

 *

 *	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide

 *	warranty for any of this software. This material is provided

 *	"AS-IS" and at no charge.

 *

 *	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>

 *

 *	14-Dec-2001 Matt Domsch <Matt_Domsch@dell.com>

 *	    Added nowayout module option to override CONFIG_WATCHDOG_NOWAYOUT

 *	    Can't add timeout - driver doesn't allow changing value

/*

 *	Theory of Operation:

 *		The Watch-Dog Timer is provided to ensure that standalone

 *		Systems can always recover from catastrophic conditions that

 *		caused the CPU to crash. This condition may have occurred by

 *		external EMI or a software bug. When the CPU stops working

 *		correctly, hardware on the board will either perform a hardware

 *		reset (cold boot) or a non-maskable interrupt (NMI) to bring the

 *		system back to a known state.

 *

 *		The Watch-Dog Timer is controlled by two I/O Ports.

 *		  443 hex	- Read	- Enable or refresh the Watch-Dog Timer

 *		  043 hex	- Read	- Disable the Watch-Dog Timer

 *

 *		To enable the Watch-Dog Timer, a read from I/O port 443h must

 *		be performed. This will enable and activate the countdown timer

 *		which will eventually time out and either reset the CPU or cause

 *		an NMI depending on the setting of a jumper. To ensure that this

 *		reset condition does not occur, the Watch-Dog Timer must be

 *		periodically refreshed by reading the same I/O port 443h.

 *		The Watch-Dog Timer is disabled by reading I/O port 043h.

 *

 *		The Watch-Dog Timer Time-Out Period is set via jumpers.

 *		It can be 1, 2, 10, 20, 110 or 220 seconds.

/*

 *	Includes, defines, variables, module parameters, ...

 Includes */

 For module specific items */

 For new moduleparam's */

 For standard types (like size_t) */

 For the -ENODEV/... values */

 For printk/panic/... */

 For struct miscdevice */

 For the watchdog specific items */

 For file operations */

 For io-port access */

 For platform_driver framework */

 For __init/__exit/... */

 For copy_to_user/put_user/... */

 For inb/outb/... */

 Module information */

 There is no way to see what the correct time-out period is */

 internal variables */

 the watchdog platform device */

 module parameters */

 You must set this - there is no sane way to probe for this board. */

 You must set this - there is no sane way to probe for this board. */

/*

 *	Watchdog Operations

 Write a watchdog value */

 Turn the card off */

/*

 *	/dev/watchdog handling

 See if we got the magic character 'V' and reload the timer */

			/* note: just in case someone wrote the magic character

			/* scan to see whether or not we got the

		/* Well, anyhow someone wrote to us, we should

 Activate */

/*

 *	Kernel Interfaces

/*

 *	Init & exit routines

 Turn the WDT off if we have a soft shutdown */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) STMicroelectronics 2018

 Author: Pascal Paillet <p.paillet@st.com> for STMicroelectronics.

 WATCHDOG CONTROL REGISTER bit */

 timeout is equal to register value + 1 */

 SPDX-License-Identifier: GPL-2.0-only

/* cpwd.c - driver implementation for hardware watchdog

 * timers found on Sun Microsystems CP1400 and CP1500 boards.

 *

 * This device supports both the generic Linux watchdog

 * interface and Solaris-compatible ioctls as best it is

 * able.

 *

 * NOTE:	CP1400 systems appear to have a defective intr_mask

 *			register on the PLD, preventing the disabling of

 *			timer interrupts.  We use a timer to periodically

 *			reset 'stopped' watchdogs on affected platforms.

 *

 * Copyright (c) 2000 Eric Brower (ebrower@usa.net)

 * Copyright (C) 2008 David S. Miller <davem@davemloft.net>

 Internal driver definitions.  */

 Watchdog timer is initialized	*/

 Watchdog timer is brokenstopped	*/

 Watchdog interrupt occurred		*/

/* Register value definitions

 Watchdog device interrupt masks	*/

 Watchdog device status running	*/

 Watchdog device status expired	*/

/* Sun uses Altera PLD EPF8820ATC144-4

 * providing three hardware watchdogs:

 *

 * 1) RIC - sends an interrupt when triggered

 * 2) XIR - asserts XIR_B_RESET when triggered, resets CPU

 * 3) POR - asserts POR_B_RESET when triggered, resets CPU, backplane, board

 *

 *** Timer register block definition (struct wd_timer_regblk)

 *

 * dcntr and limit registers (halfword access):

 * -------------------

 * | 15 | ...| 1 | 0 |

 * -------------------

 * |-  counter val  -|

 * -------------------

 * dcntr -	Current 16-bit downcounter value.

 *			When downcounter reaches '0' watchdog expires.

 *			Reading this register resets downcounter with

 *			'limit' value.

 * limit -	16-bit countdown value in 1/10th second increments.

 *			Writing this register begins countdown with input value.

 *			Reading from this register does not affect counter.

 * NOTES:	After watchdog reset, dcntr and limit contain '1'

 *

 * status register (byte access):

 * ---------------------------

 * | 7 | ... | 2 |  1  |  0  |

 * --------------+------------

 * |-   UNUSED  -| EXP | RUN |

 * ---------------------------

 * status-	Bit 0 - Watchdog is running

 *			Bit 1 - Watchdog has expired

 *

 *** PLD register block definition (struct wd_pld_regblk)

 *

 * intr_mask register (byte access):

 * ---------------------------------

 * | 7 | ... | 3 |  2  |  1  |  0  |

 * +-------------+------------------

 * |-   UNUSED  -| WD3 | WD2 | WD1 |

 * ---------------------------------

 * WD3 -  1 == Interrupt disabled for watchdog 3

 * WD2 -  1 == Interrupt disabled for watchdog 2

 * WD1 -  1 == Interrupt disabled for watchdog 1

 *

 * pld_status register (byte access):

 * UNKNOWN, MAGICAL MYSTERY REGISTER

 *

/* Enable or disable watchdog interrupts

 * Because of the CP1400 defect this should only be

 * called during initialzation or by wd_[start|stop]timer()

 *

 * index	- sub-device index, or -1 for 'all'

 * enable	- non-zero to enable interrupts, zero to disable

/* Restarts timer with maximum limit value and

 * does not unset 'brokenstop' value.

/* Timer method called to reset stopped watchdogs--

 * because of the PLD bug on CP1400, we cannot mask

 * interrupts within the PLD so me must continually

 * reset the timers ad infinitum.

	/* kill a running timer instance, in case we

	 * were called directly instead of by kernel timer

 there is at least one timer brokenstopped-- reschedule */

/* Reset countdown timer with 'limit' value and continue countdown.

 * This will not start a stopped timer.

/* Stop a running watchdog timer-- the timer actually keeps

 * running, but the interrupt is masked so that no action is

 * taken upon expiration.

/* Start a watchdog timer with the specified limit value

 * If the watchdog is running, it will be restarted with

 * the provided limit value.

 *

 * This function will enable interrupts on the specified

 * watchdog.

 determine STOPPED */

 determine EXPIRED vs FREERUN vs RUNNING */

			/* Fudge WD_EXPIRED status for defective CP1400--

			 * IF timer is running

			 *	AND brokenstop is set

			 *	AND an interrupt has been serviced

			 * we are WD_EXPIRED.

			 *

			 * IF timer is running

			 *	AND brokenstop is set

			 *	AND no interrupt has been serviced

			 * we are WD_FREERUN.

					/* we could as well pretend

 determine SERVICED */

	/* Only WD0 will interrupt-- others are NMI and we won't

	 * see them here....

 Register IRQ on first open of device */

 Generic Linux IOCTLs */

 Solaris-compatible IOCTLs */

	/* CP1400s seem to have broken PLD implementations-- the

	 * interrupt_mask register cannot be written, so no timer

	 * interrupts can be masked within the PLD.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) Nokia Corporation

 *

 * Written by Timo Kokkonen <timo.t.kokkonen at nokia.com>

 SPDX-License-Identifier: GPL-2.0+

/*

 * Watchdog driver for TQMx86 PLD.

 *

 * The watchdog supports power of 2 timeouts from 1 to 4096sec.

 * Once started, it cannot be stopped.

 *

 * Based on the vendor code written by Vadim V.Vlasov

 * <vvlasov@dev.rtsoft.ru>

 default timeout (secs) */

 Watchdog Configuration Register */

 Watchdog Config/Status Register */

 values 0,1,2 correspond to 0.125,0.25,0.5s timeouts */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *      Meson Watchdog Driver

 *

 *      Copyright (c) 2014 Carlo Caione

 10 us */

 128 us */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 *	IB700 Single Board Computer WDT driver

 *

 *	(c) Copyright 2001 Charles Howes <chowes@vsol.net>

 *

 *	Based on advantechwdt.c which is based on acquirewdt.c which

 *	is based on wdt.c.

 *

 *	(c) Copyright 2000-2001 Marek Michalkiewicz <marekm@linux.org.pl>

 *

 *	Based on acquirewdt.c which is based on wdt.c.

 *	Original copyright messages:

 *

 *	(c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *						All Rights Reserved.

 *

 *	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide

 *	warranty for any of this software. This material is provided

 *	"AS-IS" and at no charge.

 *

 *	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>

 *

 *	14-Dec-2001 Matt Domsch <Matt_Domsch@dell.com>

 *	     Added nowayout module option to override CONFIG_WATCHDOG_NOWAYOUT

 *	     Added timeout module option to override default

 *

 Module information */

/*

 *

 * Watchdog Timer Configuration

 *

 * The function of the watchdog timer is to reset the system

 * automatically and is defined at I/O port 0443H.  To enable the

 * watchdog timer and allow the system to reset, write I/O port 0443H.

 * To disable the timer, write I/O port 0441H for the system to stop the

 * watchdog function.  The timer has a tolerance of 20% for its

 * intervals.

 *

 * The following describes how the timer should be programmed.

 *

 * Enabling Watchdog:

 * MOV AX,000FH (Choose the values from 0 to F)

 * MOV DX,0443H

 * OUT DX,AX

 *

 * Disabling Watchdog:

 * MOV AX,000FH (Any value is fine.)

 * MOV DX,0441H

 * OUT DX,AX

 *

 * Watchdog timer control table:

 * Level   Value  Time/sec | Level Value Time/sec

 *   1       F       0     |   9     7      16

 *   2       E       2     |   10    6      18

 *   3       D       4     |   11    5      20

 *   4       C       6     |   12    4      22

 *   5       B       8     |   13    3      24

 *   6       A       10    |   14    2      26

 *   7       9       12    |   15    1      28

 *   8       8       14    |   16    0      30

 *

 Default timeout */

 30 seconds +/- 20% */

 in seconds */

/*

 *	Watchdog Operations

 Write a watchdog value */

/*

 *	/dev/watchdog handling

 In case it was set long ago */

 Activate */

/*

 *	Kernel Interfaces

/*

 *	Init & exit routines

	/* Check that the heartbeat value is within it's range ;

 Turn the WDT off if we have a soft shutdown */

 end of ib700wdt.c */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Watchdog driver for the A21 VME CPU Boards

 *

 * Copyright (C) 2013 MEN Mikro Elektronik Nuernberg GmbH

 *

 Request the used GPIOs */

		/*

		 * Retrieve the initial value from the GPIOs that should be

		 * output, then set up the line as output with that value.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	sun4v watchdog timer

 *	(c) Copyright 2016 Oracle Corporation

 *

 *	Implement a simple watchdog driver using the built-in sun4v hypervisor

 *	watchdog support. If time expires, the hypervisor stops or bounces

 *	the guest domain.

 1 second */

	/*

	 * HV watchdog timer will round up the timeout

	 * passed in to the nearest multiple of the

	 * watchdog resolution in milliseconds.

	/*

	 * There are 2 properties that can be set from the control

	 * domain for the watchdog.

	 * watchdog-resolution

	 * watchdog-max-timeout

	 *

	 * We can expect a handle to be returned otherwise something

	 * serious is wrong. Correct to return -ENODEV here.

	/*

	 * This is a safe way to validate if we are on the right

	 * platform.

 Allow value of watchdog-resolution up to 1s (default) */

		/*

		 * If the property value (in ms) is smaller than

		 * min_timeout, return -EINVAL.

		/*

		 * If the property value is smaller than

		 * default max_timeout  then set watchdog max_timeout to

		 * the value of the property in seconds.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2016 Yang Ling <gnaygnil@gmail.com>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PIC32 deadman timer driver

 *

 * Purna Chandra Mandal <purna.mandal@microchip.com>

 * Copyright (c) 2016, Microchip Technology Inc.

 Deadman Timer Regs */

 Deadman Timer Regs fields */

 Reset Control Register fields for watchdog */

	/*

	 * Cannot touch registers in the CPU cycle following clearing the

	 * ON bit.

 set pre-clear key */

 wait for DMT window to open */

 apply key2 */

 check whether keys are latched correctly */

 sentinel */ }

/*

 * IBM Automatic Server Restart driver.

 *

 * Copyright (c) 2005 Andrey Panin <pazke@donpac.ru>

 *

 * Based on driver written by Pete Reynolds.

 * Copyright (c) IBM Corporation, 1998-2004.

 *

 * This software may be used and distributed according to the terms

 * of the GNU Public License, incorporated herein by reference.

 PEARL ASR S/W REGISTER SUPERIO PORT ADDRESSES */

 bit 7: disable = 1, enable = 0 */

 bit 6: 0, then 1, then 0 */

 JASPER OFFSET FROM SIO BASE ADDR TO ASR S/W REGISTERS. */

 bit 0: disable = 1, enable = 0 */

 bit 1: 0, then 1, then 0 */

 Base address of Juniper ASR */

 bit 0: disable = 1 enable = 0 */

 bit 1: 0, then 1, then 0 */

 Base address of Spruce ASR */

 bit 1: disable = 1 enable = 0 */

 bit 0: 0, then 1, then 0 */

 asr_write_addr == asr_read_addr */

		/*

		 * First make sure the hardware timer is reset by toggling

		 * ASR hardware timer line.

 asr_write_addr == asr_read_addr */

		/* SELECT SuperIO CHIP FOR QUERYING

 SELECT AND READ THE HIGH-NIBBLE OF THE GPIO BASE ADDRESS */

 SELECT AND READ THE LOW-NIBBLE OF THE GPIO BASE ADDRESS */

 Suggested fix */

		/* FIXME: need to use pci_config_lock here,

		spin_lock_irqsave(&pci_config_lock, flags);*/

 Select the SuperIO chip in the PCI I/O port register */

 BUS 0, Slot 1F, fnc 0, offset 58 */

		/*

		 * Read the base address for the SuperIO chip.

		 * Only the lower 16 bits are valid, but the address is word

		 * aligned so the last bit must be masked off.

		spin_unlock_irqrestore(&pci_config_lock, flags);*/

 In case it was set long ago */

	/*

	 * The hardware has a fixed timeout value, so no WDIOC_SETTIMEOUT

	 * and WDIOC_GETTIMEOUT always returns 256.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * drivers/char/watchdog/ixp4xx_wdt.c

 *

 * Watchdog driver for Intel IXP4xx network processors

 *

 * Author: Deepak Saxena <dsaxena@plexity.net>

 * Author: Linus Walleij <linus.walleij@linaro.org>

 *

 * Copyright 2004 (c) MontaVista, Software, Inc.

 * Based on sa1100 driver, Copyright (C) 2000 Oleg Drokin <green@crimea.edu>

 Fallback if we do not have a clock for this */

 Registers after the timer registers */

 Watchdog Timer */

 Watchdog Enable */

 Watchdog Key */

 Timer Status */

 Devres-handled clock disablement */

	/*

	 * Retrieve rate from a fixed clock from the device tree if

	 * the parent has that, else use the default clock rate.

 Default to 60 seconds */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Watchdog driver for Atmel AT91SAM9x processors.

 *

 * Copyright (C) 2008 Renaud CERRATO r.cerrato@til-technologies.fr

 *

/*

 * The Watchdog Timer Mode Register can be only written to once. If the

 * timeout need to be set from Linux, be sure that the bootstrap or the

 * bootloader doesn't write to this register.

/* AT91SAM9 watchdog runs a 12bit counter @ 256Hz,

 * use this to convert a watchdog

 * value from/to milliseconds.

 Watchdog max counter value in ticks */

 Watchdog max delta/value in secs */

 Hardware timeout in seconds */

 Timer heartbeat (500ms) */

 User land timeout */

 the next_heartbeat for the timer */

 The timer that pings the watchdog */

 WDT heartbeat in jiffies */

 ......................................................................... */

/*

 * Reload the watchdog timer.  (ie, pat the watchdog)

/*

 * Timer tick

 calculate when the next userspace timeout will be */

 The watchdog timer hardware can not be stopped... */

	/*

	 * Try to reset the watchdog counter 4 or 2 times more often than

	 * actually requested, to avoid spurious watchdog reset.

	 * If this is not possible because of the min_heartbeat value, reset

	 * it at the min_heartbeat period.

	/*

	 * Use min_heartbeat the first time to avoid spurious watchdog reset:

	 * we don't know for how long the watchdog counter is running, and

	 *  - resetting it right now might trigger a watchdog fault reset

	 *  - waiting for heartbeat time might lead to a watchdog timeout

	 *    reset

 Try to set timeout from device tree first */

 ......................................................................... */

 Get the interrupts property */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PC Watchdog Driver

 * by Ken Hollis (khollis@bitgate.com)

 *

 * Permission granted from Simon Machell (smachell@berkprod.com)

 * Written for the Linux Kernel, and GPLed by Ken Hollis

 *

 * 960107	Added request_region routines, modulized the whole thing.

 * 960108	Fixed end-of-file pointer (Thanks to Dan Hollis), added

 *		WD_TIMEOUT define.

 * 960216	Added eof marker on the file, and changed verbose messages.

 * 960716	Made functional and cosmetic changes to the source for

 *		inclusion in Linux 2.0.x kernels, thanks to Alan Cox.

 * 960717	Removed read/seek routines, replaced with ioctl.  Also, added

 *		check_region command due to Alan's suggestion.

 * 960821	Made changes to compile in newer 2.0.x kernels.  Added

 *		"cold reboot sense" entry.

 * 960825	Made a few changes to code, deleted some defines and made

 *		typedefs to replace them.  Made heartbeat reset only available

 *		via ioctl, and removed the write routine.

 * 960828	Added new items for PC Watchdog Rev.C card.

 * 960829	Changed around all of the IOCTLs, added new features,

 *		added watchdog disable/re-enable routines.  Added firmware

 *		version reporting.  Added read routine for temperature.

 *		Removed some extra defines, added an autodetect Revision

 *		routine.

 * 961006	Revised some documentation, fixed some cosmetic bugs.  Made

 *		drivers to panic the system if it's overheating at bootup.

 * 961118	Changed some verbiage on some of the output, tidied up

 *		code bits, and added compatibility to 2.1.x.

 * 970912	Enabled board on open and disable on close.

 * 971107	Took account of recent VFS changes (broke read).

 * 971210	Disable board on initialisation in case board already ticking.

 * 971222	Changed open/close for temperature handling

 *		Michael Meskes <meskes@debian.org>.

 * 980112	Used minor numbers from include/linux/miscdevice.h

 * 990403	Clear reset status after reading control status register in

 *		pcwd_showprevstate(). [Marc Boucher <marc@mbsi.ca>]

 * 990605	Made changes to code to support Firmware 1.22a, added

 *		fairly useless proc entry.

 * 990610	removed said useless proc code for the merge <alan>

 * 000403	Removed last traces of proc code. <davej>

 * 011214	Added nowayout module option to override

 *		CONFIG_WATCHDOG_NOWAYOUT <Matt_Domsch@dell.com>

 *		Added timeout module option to override default

/*

 *	A bells and whistles driver is available from http://www.pcwd.de/

 *	More info available at http://www.berkprod.com/ or

 *	http://www.pcwatchdog.com/

 For module specific items */

 For new moduleparam's */

 For standard types (like size_t) */

 For the -ENODEV/... values */

 For printk/panic/... */

 For mdelay function */

 For timer related operations */

 For jiffies stuff */

 For struct miscdevice */

 For the watchdog specific items */

 For kernel_power_off() */

 For __init/__exit/... */

 For file operations */

 For isa devices */

 For io-port access */

 For spin_lock/spin_unlock/... */

 For copy_to_user/put_user/... */

 For inb/outb/... */

 Module and version information */

/*

 * It should be noted that PCWD_REVISION_B was removed because A and B

 * are essentially the same types of card, with the exception that B

 * has temperature reporting.  Since I didn't receive a Rev.B card,

 * the Rev.B card is not supported.  (It's a good thing too, as they

 * are no longer in production.)

/*

 * These are the auto-probe addresses available.

 *

 * Revision A only uses ports 0x270 and 0x370.  Revision C introduced 0x350.

 * Revision A has an address range of 2 addresses, while Revision C has 4.

/*

 * These are the defines that describe the control status bits for the

 * PCI-PC Watchdog card.

 Port 1 : Control Status #1 for the PC Watchdog card, revision A. */

 Previously reset state */

 Temperature overheat sense */

 Heartbeat sense */

 External relay triggered */

 Software external relay triggered */

 Port 1 : Control Status #1 for the PC Watchdog card, revision C. */

 Watchdog Trip status */

 Watchdog Heartbeat */

 Temperature Trip status */

#define WD_REVC_RL2A		0x08	/* Relay 2 activated by

 Relay 1 active */

 Relay 2 disable */

 Relay 2 activated? */

 Port 2 : Control Status #2 */

 Watchdog Disabled */

 Watchdog Enable Temperature Trip */

#define WD_SSEL			0x40	/* Watchdog Switch Select

 Watchdog Command Mode */

 max. time we give an ISA watchdog card to process a command */

 500ms for each 4 bit response (according to spec.) */

 Watchdog's internal commands */

 Watchdog's Dip Switch heartbeat values */

 OFF-OFF-OFF	= 20 Sec  */

 OFF-OFF-ON	= 40 Sec  */

 OFF-ON-OFF	=  1 Min  */

 OFF-ON-ON	=  5 Min  */

 ON-OFF-OFF	= 10 Min  */

 ON-OFF-ON	= 30 Min  */

 ON-ON-OFF	=  1 Hour */

 ON-ON-ON	=  2 hour */

/*

 * We are using an kernel timer to do the pinging of the watchdog

 * every ~500ms. We try to set the internal heartbeat of the

 * watchdog to 2 ms.

 We can only use 1 card due to the /dev/watchdog restriction */

 internal variables */

 this is private data for each ISA-PC watchdog card */

 The cards firmware version */

 The card's revision */

	int supports_temp;		/* Whether or not the card has

	int command_mode;		/* Whether or not the card is in

 The card's boot status */

 The cards I/O address */

 the lock for io operations */

 The timer that pings the watchdog */

 the next_heartbeat for the timer */

 module parameters */

 Default */

 Verbose */

 print fancy stuff too */

 default heartbeat = delay-time from dip-switches */

/*

 *	Internal functions

 Double read for stabilising */

 The WCMD bit must be 1 and the command is only 4 bits in size */

 Data is stable */

 Set the card into command mode */

 Card does not like what we've done to it */

 Spec says wait 1ms */

 Set the card into normal mode */

 Get switch settings */

 Get some extra info from the hardware (in command/debug/diag mode) */

 Reprogram internal heartbeat to 2 seconds */

	/* If we got a heartbeat pulse within the WDT_INTERVAL

 Ping the watchdog */

			/*  Rev A cards are reset by setting the

 Re-trigger watchdog by writing to port 0 */

 Re-set the timer interval */

 Start the timer */

 Enable the port */

 Stop the timer */

  Disable the board  */

 user land ping */

 arbitrary upper limit */

		/* Rev A cards return status information from

		 * the base register, which is used for the

		/* Rev C cards return card status in the base

		 * address + 1 register. And use different bits

		 * to indicate a card initiated reset, and an

		 * over-temperature condition. And the reboot

 clear reset status & Keep Relay 2 disable state as it is */

 check that port 0 gives temperature info and no command results */

	/*

	 * Convert celsius to fahrenheit, since this was

	 * the decided 'standard' for this return value.

/*

 *	/dev/watchdog handling

 In case it was set long ago */

 Activate */

/*

 *	/dev/temperature handling

/*

 *	Kernel Interfaces

/*

 *	Init & exit routines

	/* REV A cards use only 2 io ports; test

/*

 *  The ISA cards have a heartbeat bit in one of the registers, which

 *  register is card dependent.  The heartbeat bit is monitored, and if

 *  found, is considered proof that a Berkshire card has been found.

 *  The initial rate is once per second at board start up, then twice

 *  per second for normal operation.

 Reg 0, in case it's REV A */

 Register 1 for REV C cards */

 For REV A boards */

 For REV C boards */

 Not an 'ff' from a floating bus, so must be a card! */

 Has either hearbeat bit changed?  */

 Check card's revision */

 Initial variables */

 get the boot_status */

 clear the "card caused reboot" flag */

  Disable the board  */

  Check whether or not the card supports the temperature device */

 Show info about the card itself */

 If heartbeat = 0 then we use the heartbeat from the dip-switches */

	/* Check that the heartbeat value is within it's range;

  Disable the board  */

 Deregister */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Watchdog timer for machines with the CS5535/CS5536 companion chip

 *

 * Copyright (C) 2006-2007, Advanced Micro Devices, Inc.

 * Copyright (C) 2009  Andres Salomon <dilinger@collabora.co.uk>

 Stop the counter */

 Reset the counter */

 Enable the counter */

 Set up the timer */

 Set up comparator 2 to reset when the event fires */

 Set up the initial timeout */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PIC32 watchdog driver

 *

 * Joshua Henderson <joshua.henderson@microchip.com>

 * Copyright (c) 2016, Microchip Technology Inc.

 Watchdog Timer Registers */

 Watchdog Timer Control Register fields */

 Reset Control Register fields for watchdog */

 default, prescaler of 32 (i.e. div-by-32) is implicit. */

 calculate terminal count from postscaler. */

 find time taken (in secs) to reach terminal count */

 write key through single half-word */

	/*

	 * Cannot touch registers in the CPU cycle following clearing the

	 * ON bit.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Kontron PLD watchdog driver

 *

 * Copyright (c) 2010-2013 Kontron Europe GmbH

 * Author: Michael Brunner <michael.brunner@kontron.com>

 *

 * Note: From the PLD watchdog point of view timeout and pretimeout are

 *       defined differently than in the kernel.

 *       First the pretimeout stage runs out before the timeout stage gets

 *       active.

 *

 * Kernel/API:                     P-----| pretimeout

 *               |-----------------------T timeout

 * Watchdog:     |-----------------P       pretimeout_stage

 *                                 |-----T timeout_stage

 seconds */

/*

 * kempld_get_mutex must be called prior to calling this function.

 Check if the watchdog was enabled */

 Check if the watchdog was disabled */

 Probe each byte individually. */

 A failed write means this byte is reserved */

 Assign available stages to timeout and pretimeout */

 Enable nowayout if watchdog is already locked */

 Check if watchdog is already enabled */

 Get current watchdog settings */

 Disable watchdog if it is active during suspend */

 Enable watchdog and configure it if necessary */

	/*

	 * If watchdog was stopped before suspend be sure it gets disabled

	 * again, for the case BIOS has enabled it during resume

 SPDX-License-Identifier: GPL-2.0

/*

 * omap_wdt.c

 *

 * Watchdog driver for the TI OMAP 16xx & 24xx/34xx 32KHz (non-secure) watchdog

 *

 * Author: MontaVista Software, Inc.

 *	 <gdavis@mvista.com> or <source@mvista.com>

 *

 * 2003 (c) MontaVista Software, Inc.

 *

 * History:

 *

 * 20030527: George G. Davis <gdavis@mvista.com>

 *	Initially based on linux-2.4.19-rmk7-pxa1/drivers/char/sa1100_wdt.c

 *	(c) Copyright 2000 Oleg Drokin <green@crimea.edu>

 *	Based on SoftDog driver by Alan Cox <alan@lxorguk.ukuu.org.uk>

 *

 * Copyright (c) 2004 Texas Instruments.

 *	1. Modified to support OMAP1610 32-KHz watchdog timer

 *	2. Ported to 2.6 kernel

 *

 * Copyright (c) 2005 David Brownell

 *	Use the driver model and standard identifiers; handle bigger timeouts.

 physical */

 to avoid races with PM */

 wait for posted write to complete */

 wait for posted write to complete */

 reloaded WCRR from WLDR */

 Sequence to enable the watchdog */

 sequence required to disable watchdog */

 TIMER_MODE */

 TIMER_MODE */

 just count up at 32 KHz */

	/*

	 * Make sure the watchdog is disabled. This is unfortunately required

	 * because writing to various registers with the watchdog running has no

	 * effect.

 initialize prescaler */

 trigger loading of new timeout value */

 reserve static register mappings */

/* REVISIT ... not clear this is the best way to handle system suspend; and

 * it's very inappropriate for selective device suspend (e.g. suspending this

 * through sysfs rather than by stopping the watchdog daemon).  Also, this

 * may not play well enough with NOWAYOUT...

 SPDX-License-Identifier: GPL-2.0+

/*

 *	intel TCO Watchdog Driver

 *

 *	(c) Copyright 2006-2011 Wim Van Sebroeck <wim@iguana.be>.

 *

 *	Neither Wim Van Sebroeck nor Iguana vzw. admit liability nor

 *	provide warranty for any of this software. This material is

 *	provided "AS-IS" and at no charge.

 *

 *	The TCO watchdog is implemented in the following I/O controller hubs:

 *	(See the intel documentation on http://developer.intel.com.)

 *	document number 290655-003, 290677-014: 82801AA (ICH), 82801AB (ICHO)

 *	document number 290687-002, 298242-027: 82801BA (ICH2)

 *	document number 290733-003, 290739-013: 82801CA (ICH3-S)

 *	document number 290716-001, 290718-007: 82801CAM (ICH3-M)

 *	document number 290744-001, 290745-025: 82801DB (ICH4)

 *	document number 252337-001, 252663-008: 82801DBM (ICH4-M)

 *	document number 273599-001, 273645-002: 82801E (C-ICH)

 *	document number 252516-001, 252517-028: 82801EB (ICH5), 82801ER (ICH5R)

 *	document number 300641-004, 300884-013: 6300ESB

 *	document number 301473-002, 301474-026: 82801F (ICH6)

 *	document number 313082-001, 313075-006: 631xESB, 632xESB

 *	document number 307013-003, 307014-024: 82801G (ICH7)

 *	document number 322896-001, 322897-001: NM10

 *	document number 313056-003, 313057-017: 82801H (ICH8)

 *	document number 316972-004, 316973-012: 82801I (ICH9)

 *	document number 319973-002, 319974-002: 82801J (ICH10)

 *	document number 322169-001, 322170-003: 5 Series, 3400 Series (PCH)

 *	document number 320066-003, 320257-008: EP80597 (IICH)

 *	document number 324645-001, 324646-001: Cougar Point (CPT)

 *	document number TBD                   : Patsburg (PBG)

 *	document number TBD                   : DH89xxCC

 *	document number TBD                   : Panther Point

 *	document number TBD                   : Lynx Point

 *	document number TBD                   : Lynx Point-LP

/*

 *	Includes, defines, variables, module parameters, ...

 Module and version information */

 Includes */

 For ACPI support */

 For BIT() */

 For module specific items */

 For new moduleparam's */

 For standard types (like size_t) */

 For the -ENODEV/... values */

 For printk/panic/... */

 For the watchdog specific items */

 For __init/__exit/... */

 For file operations */

 For platform_driver framework */

 For pci functions */

 For io-port access */

 For spin_lock/spin_unlock/... */

 For copy_to_user/put_user/... */

 For inb/outb/... */

 Address definitions for the TCO */

 TCO base address */

 SMI Control and Enable Register */

 TCO Timer Reload/Curr. Value */

 TCOv1 Timer Initial Value*/

 TCO Data In Register	*/

 TCO Data Out Register	*/

 TCO1 Status Register	*/

 TCO2 Status Register	*/

 TCO1 Control Register	*/

 TCO2 Control Register	*/

 TCOv2 Timer Initial Value*/

 internal variables */

 TCO version/generation */

	/*

	 * NO_REBOOT flag is Memory-Mapped GCS register bit 5 (TCO version 2),

	 * or memory-mapped PMC register bit 4 (TCO version 3).

 the lock for io operations */

 the PCI-device */

 whether or not the watchdog has been suspended */

 no reboot API private data */

 no reboot update function pointer */

 module parameters */

 30 sec default heartbeat */

 in seconds */

/*

 * Some TCO specific functions

/*

 * The iTCO v1 and v2's internal timer is stored as ticks which decrement

 * every 0.6 seconds.  v3's internal timer is stored as seconds (some

 * datasheets incorrectly state 0.6 seconds).

 make sure the update is successful */

 make sure the update is successful */

 make sure the update is successful */

 disable chipset's NO_REBOOT bit */

	/* Force the timer to its reload value by writing to the TCO_RLD

 Bit 11: TCO Timer Halt -> 0 = The TCO timer is enabled to count */

 Bit 11: TCO Timer Halt -> 1 = The TCO timer is disabled */

 Set the NO_REBOOT bit to prevent later reboots, just for sure */

 Reload the timer by writing to the TCO Timer Counter register */

		/* Reset the timeout status bit so that the timer

 write 1 to clear bit */

 For TCO v1 the timer counts down twice before rebooting */

 from the specs: */

 "Values of 0h-3h are ignored and should not be attempted" */

 Write new heartbeat to watchdog */

 read the TCO Timer */

 Bit 11: TCO Timer Halt -> 0 = The TCO timer is * enabled */

/*

 *	Kernel Interfaces

/*

 *	Init & exit routines

 The TCO logic uses the TCO_EN bit in the SMI_EN register */

	/*

	 * Get the Memory-Mapped GCS or PMC register, we need it for the

	 * NO_REBOOT flag (TCO v2 and v3).

 Check chipset's NO_REBOOT bit */

 Cannot reset NO_REBOOT bit */

 Set the NO_REBOOT bit to prevent later reboots, just for sure */

		/*

		 * Bit 13: TCO_EN -> 0

		 * Disables TCO logic generating an SMI#

 Turn off SMI clearing watchdog */

 Clear out the (probably old) status */

 Clear the Time Out Status bit */

 Clear SECOND_TO_STS bit */

 Clear the Time Out Status bit */

 Clear SECOND_TO_STS bit */

 Clear BOOT_STS bit */

	/* Check that the heartbeat value is within it's range;

/*

 * Suspend-to-idle requires this, because it stops the ticks and timekeeping, so

 * the watchdog cannot be pinged while in that state.  In ACPI sleep states the

 * watchdog is stopped by the platform firmware.

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0+

/*

 *	intel TCO vendor specific watchdog driver support

 *

 *	(c) Copyright 2006-2009 Wim Van Sebroeck <wim@iguana.be>.

 *

 *	Neither Wim Van Sebroeck nor Iguana vzw. admit liability nor

 *	provide warranty for any of this software. This material is

 *	provided "AS-IS" and at no charge.

/*

 *	Includes, defines, variables, module parameters, ...

 Module and version information */

 Includes */

 For module specific items */

 For new moduleparam's */

 For standard types (like size_t) */

 For the -ENODEV/... values */

 For printk/panic/... */

 For __init/__exit/... */

 For io-port access */

 For inb/outb/... */

 List of vendor support modes */

 SuperMicro Pentium 3 Era 370SSE+-OEM1/P3TSSE */

 SuperMicro Pentium 4 / Xeon 4 / EMT64T Era Systems - no longer supported */

 Broken BIOS */

/*

 *	Vendor Specific Support

/*

 *	Vendor Support: 1

 *	Board: Super Micro Computer Inc. 370SSE+-OEM1/P3TSSE

 *	iTCO chipset: ICH2

 *

 *	Code contributed by: R. Seretny <lkpatches@paypc.com>

 *	Documentation obtained by R. Seretny from SuperMicro Technical Support

 *

 *	To enable Watchdog function:

 *	    BIOS setup -> Power -> TCO Logic SMI Enable -> Within5Minutes

 *	    This setting enables SMI to clear the watchdog expired flag.

 *	    If BIOS or CPU fail which may cause SMI hang, then system will

 *	    reboot. When application starts to use watchdog function,

 *	    application has to take over the control from SMI.

 *

 *	    For P3TSSE, J36 jumper needs to be removed to enable the Watchdog

 *	    function.

 *

 *	    Note: The system will reboot when Expire Flag is set TWICE.

 *	    So, if the watchdog timer is 20 seconds, then the maximum hang

 *	    time is about 40 seconds, and the minimum hang time is about

 *	    20.6 seconds.

 Bit 13: TCO_EN -> 0 = Disables TCO logic generating an SMI# */

 Turn off SMI clearing watchdog */

 Needed to activate watchdog */

 Bit 13: TCO_EN -> 1 = Enables the TCO logic to generate SMI# */

 Turn on SMI clearing watchdog */

 Needed to deactivate watchdog */

/*

 *	Vendor Support: 911

 *	Board: Some Intel ICHx based motherboards

 *	iTCO chipset: ICH7+

 *

 *	Some Intel motherboards have a broken BIOS implementation: i.e.

 *	the SMI handler clear's the TIMEOUT bit in the TC01_STS register

 *	and does not reload the time. Thus the TCO watchdog does not reboot

 *	the system.

 *

 *	These are the conclusions of Andriy Gapon <avg@icyb.net.ua> after

 *	debugging: the SMI handler is quite simple - it tests value in

 *	TCO1_CNT against 0x800, i.e. checks TCO_TMR_HLT. If the bit is set

 *	the handler goes into an infinite loop, apparently to allow the

 *	second timeout and reboot. Otherwise it simply clears TIMEOUT bit

 *	in TCO1_STS and that's it.

 *	So the logic seems to be reversed, because it is hard to see how

 *	TIMEOUT can get set to 1 and SMI generated when TCO_TMR_HLT is set

 *	(other than a transitional effect).

 *

 *	The only fix found to get the motherboard(s) to reboot is to put

 *	the glb_smi_en bit to 0. This is a dirty hack that bypasses the

 *	broken code by disabling Global SMI.

 *

 *	WARNING: globally disabling SMI could possibly lead to dramatic

 *	problems, especially on laptops! I.e. various ACPI things where

 *	SMI is used for communication between OS and firmware.

 *

 *	Don't use this fix if you don't need to!!!

	/* Bit 13: TCO_EN     -> 0 = Disables TCO logic generating an SMI#

	/* Bit 13: TCO_EN     -> 1 = Enables TCO logic generating an SMI#

/*

 *	Generic Support Functions

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Watchdog timer for PowerPC Book-E systems

 *

 * Author: Matthew McClintock

 * Maintainer: Kumar Gala <galak@kernel.crashing.org>

 *

 * Copyright 2005, 2008, 2010-2011 Freescale Semiconductor Inc.

/* If the kernel parameter wdt=1, the watchdog will be enabled at boot.

 * Also, the wdt_period sets the watchdog timer period timeout.

 * For E500 cpus the wdt_period sets which bit changing from 0->1 will

 * trigger a watchdog timeout. This watchdog timeout will occur 3 times, the

 * first time nothing will happen, the second time a watchdog exception will

 * occur, and the final time the board will reset.

/* For the specified period, determine the number of seconds

 * corresponding to the reset time.  There will be a watchdog

 * exception at approximately 3/5 of this time.

 *

 * The formula to calculate this is given by:

 * 2.5 * (2^(63-period+1)) / timebase_freq

 *

 * In order to simplify things, we assume that period is

 * at least 1.  This will still result in a very long timeout.

	/* tmp may be a very large number and we don't want to overflow,

	 * so divide the timebase freq instead of multiplying tmp

/*

 * This procedure will find the highest period which will give a timeout

 * greater than the one required. e.g. for a bus speed of 66666666 and

 * and a parameter of 2 secs, then this procedure will return a value of 38.

 CONFIG_PPC_FSL_BOOK3E */

 from Kconfig */

 !CONFIG_PPC_FSL_BOOK3E */

 clear status before enabling watchdog */

/**

 * __booke_wdt_disable - disable the watchdog on the given CPU

 *

 * This function is called on each CPU.  It disables the watchdog on that CPU.

 *

 * TCR[WRC] cannot be changed once it has been set to non-zero, but we can

 * effectively disable the watchdog by setting its period to the maximum value.

 clear status to make sure nothing is pending */

 SPDX-License-Identifier: GPL-2.0+

/*

 *	Watchdog driver for the SA11x0/PXA2xx

 *

 *	(c) Copyright 2000 Oleg Drokin <green@crimea.edu>

 *	    Based on SoftDog driver by Alan Cox <alan@lxorguk.ukuu.org.uk>

 *

 *	Neither Oleg Drokin nor iXcelerator.com admit liability nor provide

 *	warranty for any of this software. This material is provided

 *	"AS-IS" and at no charge.

 *

 *	(c) Copyright 2000           Oleg Drokin <green@crimea.edu>

 *

 *	27/11/2000 Initial release

/*

 *	Allow only one person to hold it open

 Activate SA1100 Watchdog timer */

/*

 * The watchdog cannot be disabled.

 *

 * Previous comments suggested that turning off the interrupt by

 * clearing OIER[E3] would prevent the watchdog timing out but this

 * does not appear to be true (at least on the PXA255).

 Refresh OSMR3 timer. */

 (secs) Default is 1 minute */

	/*

	 * Read the reset status, and save it for later.  If

	 * we suspend, RCSR will be cleared, and the watchdog

	 * reset reason will be lost.

 SPDX-License-Identifier: GPL-2.0

/*

 *	NANO7240 SBC Watchdog device driver

 *

 *	Based on w83877f.c by Scott Jennings,

 *

 *	(c) Copyright 2007  Gilles GIGAN <gilles.gigan@jcu.edu.au>

 in seconds */

/*

 * Utility routines

 disable the watchdog */

 enable the watchdog */

 set the timeout */

 Whack the dog */

/*

 * /dev/watchdog handling

 is there a magic char ? */

/*

 *	Notifier for system down

	/* The IO port 0x043 used to disable the watchdog

	 * is already claimed by the system timer, so we

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	W83877F Computer Watchdog Timer driver

 *

 *      Based on acquirewdt.c by Alan Cox,

 *           and sbc60xxwdt.c by Jakob Oestergaard <jakob@unthought.net>

 *

 *	The authors do NOT admit liability nor provide warranty for

 *	any of this software. This material is provided "AS-IS" in

 *      the hope that it may be useful for others.

 *

 *	(c) Copyright 2001    Scott Jennings <linuxdrivers@oro.net>

 *

 *           4/19 - 2001      [Initial revision]

 *           9/27 - 2001      Added spinlocking

 *           4/12 - 2002      [rob@osinvestor.com] Eliminate extra comments

 *                            Eliminate fop_read

 *                            Eliminate extra spin_unlock

 *                            Added KERN_* tags to printks

 *                            add CONFIG_WATCHDOG_NOWAYOUT support

 *                            fix possible wdt_is_open race

 *                            changed watchdog_info to correctly reflect what

 *			      the driver offers

 *                            added WDIOC_GETSTATUS, WDIOC_GETBOOTSTATUS,

 *			      WDIOC_SETTIMEOUT,

 *                            WDIOC_GETTIMEOUT, and WDIOC_SETOPTIONS ioctls

 *           09/8 - 2003      [wim@iguana.be] cleanup of trailing spaces

 *                            added extra printk's for startup problems

 *                            use module_param

 *                            made timeout (the emulated heartbeat) a

 *			      module_param

 *                            made the keepalive ping an internal subroutine

 *

 *  This WDT driver is different from most other Linux WDT

 *  drivers in that the driver will ping the watchdog by itself,

 *  because this particular WDT has a very short timeout (1.6

 *  seconds) and it would be insane to count on any userspace

 *  daemon always getting scheduled within that time frame.

/*

 * The W83877F seems to be fixed at 1.6s timeout (at least on the

 * EMACS PC-104 board I'm using). If we reset the watchdog every

/*

 * We must not require too good response from the userspace daemon.

 * Here we require the userspace daemon to send us a heartbeat

 * char to /dev/watchdog every 30 seconds.

 30 sec default timeout */

 in seconds, will be multiplied by HZ to get seconds to wait for a ping */

/*

 *	Whack the dog

	/* If we got a heartbeat pulse within the WDT_US_INTERVAL

	 * we agree to ping the WDT

 Ping the WDT */

 Ping the WDT by reading from WDT_PING */

 Re-set the timer interval */

/*

 * Utility routines

 buy some time */

 make W83877F available */

 enable watchdog */

 lock the W8387FF away */

 Start the timer */

 Stop the timer */

 user land ping */

/*

 * /dev/watchdog handling

 See if we got the magic character 'V' and reload the timer */

			/* note: just in case someone wrote the magic

			/* scan to see whether or not we got the

 someone wrote to us, we should restart timer */

 Just in case we're already talking to someone... */

 Good, fire up the show */

 arbitrary upper limit */

/*

 *	Notifier for system down

/*

 *	The WDT needs to learn about soft shutdowns in order to

 *	turn the timebomb registers off.

 Deregister */

 arbitrary upper limit */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * NXP LPC18xx Watchdog Timer (WDT)

 *

 * Copyright (c) 2015 Ariel D'Alessandro <ariel@vanguardiasur.com>

 *

 * Notes

 * -----

 * The Watchdog consists of a fixed divide-by-4 clock pre-scaler and a 24-bit

 * counter which decrements on every clock cycle.

 Registers */

 Clock pre-scaler */

 Timeout values in seconds */

	/*

	 * An abort condition will occur if an interrupt happens during the feed

	 * sequence.

 Use safe value (1/2 of real timeout) */

/*

 * Since LPC18xx Watchdog cannot be disabled in hardware, we must keep feeding

 * it with a timer until userspace watchdog software takes over.

	/*

	 * Setting the WDEN bit in the WDMOD register is not sufficient to

	 * enable the Watchdog. A valid feed sequence must be completed after

	 * setting WDEN before the Watchdog is capable of generating a reset.

	/*

	 * Incorrect feed sequence causes immediate watchdog reset if enabled.

 We use the clock rate to calculate timeouts */

/*

 * drivers/watchdog/m54xx_wdt.c

 *

 * Watchdog driver for ColdFire MCF547x & MCF548x processors

 * Copyright 2010 (c) Philippe De Muyter <phdm@macqel.be>

 *

 * Adapted from the IXP4xx watchdog driver, which carries these notices:

 *

 *  Author: Deepak Saxena <dsaxena@plexity.net>

 *

 *  Copyright 2004 (c) MontaVista, Software, Inc.

 *  Based on sa1100 driver, Copyright (C) 2000 Oleg Drokin <green@crimea.edu>

 *

 * This file is licensed under  the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 (secs) Default is 0.5 minute */

 preserve GPIO usage, if any */

 disable watchdog */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Watchdog device driver for DA9062 and DA9061 PMICs

 * Copyright (C) 2015  Dialog Semiconductor Ltd.

 *

	/*

	 * Prevent pings from occurring late in system poweroff/reboot sequence

	 * and possibly locking out restart handler from accessing i2c bus.

 Don't use regmap because it is not atomic safe */

 wait for reset to assert... */

 Set timeout from DT value if available */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 NXP.

 wait for wdog to fire */

 unlock the wdog for reconfiguration */

 set an initial timeout value in TOVAL */

 enable 32bit command sequence and reconfigure */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Atmel SAMA5D4 Watchdog Timer

 *

 * Copyright (C) 2015-2019 Microchip Technology Inc. and its subsidiaries

 minimum and maximum watchdog timeout, in seconds */

 4 slow clock periods is 4/32768 = 122.07µs*/

	/*

	 * WDT_CR and WDT_MR must not be modified within three slow clock

	 * periods following a restart of the watchdog performed by a write

	 * access in WDT_CR.

	/*

	 * WDDIS has to be 0 when updating WDD/WDV. The datasheet states: When

	 * setting the WDDIS bit, and while it is set, the fields WDV and WDD

	 * must not be modified.

	 * If the watchdog is enabled, then the timeout can be updated. Else,

	 * wait that the user enables it.

	/*

	 * When booting and resuming, the bootloader may have changed the

	 * watchdog configuration.

	 * If the watchdog is already running, we can safely update it.

	 * Else, we have to disable it properly.

	/*

	 * FIXME: writing MR also pings the watchdog which may not be desired.

	 * This should only be done when the registers are lost on suspend but

	 * there is no way to get this information right now.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	60xx Single Board Computer Watchdog Timer driver for Linux 2.2.x

 *

 *	Based on acquirewdt.c by Alan Cox.

 *

 *	The author does NOT admit liability nor provide warranty for

 *	any of this software. This material is provided "AS-IS" in

 *	the hope that it may be useful for others.

 *

 *	(c) Copyright 2000    Jakob Oestergaard <jakob@unthought.net>

 *

 *           12/4 - 2000      [Initial revision]

 *           25/4 - 2000      Added /dev/watchdog support

 *           09/5 - 2001      [smj@oro.net] fixed fop_write to "return 1"

 *					on success

 *           12/4 - 2002      [rob@osinvestor.com] eliminate fop_read

 *                            fix possible wdt_is_open race

 *                            add CONFIG_WATCHDOG_NOWAYOUT support

 *                            remove lock_kernel/unlock_kernel pairs

 *                            added KERN_* to printk's

 *                            got rid of extraneous comments

 *                            changed watchdog_info to correctly reflect what

 *			      the driver offers

 *			      added WDIOC_GETSTATUS, WDIOC_GETBOOTSTATUS,

 *			      WDIOC_SETTIMEOUT, WDIOC_GETTIMEOUT, and

 *			      WDIOC_SETOPTIONS ioctls

 *           09/8 - 2003      [wim@iguana.be] cleanup of trailing spaces

 *                            use module_param

 *                            made timeout (the emulated heartbeat) a

 *			      module_param

 *                            made the keepalive ping an internal subroutine

 *                            made wdt_stop and wdt_start module params

 *                            added extra printk's for startup problems

 *                            added MODULE_AUTHOR and MODULE_DESCRIPTION info

 *

 *  This WDT driver is different from the other Linux WDT

 *  drivers in the following ways:

 *  *)  The driver will ping the watchdog by itself, because this

 *      particular WDT has a very short timeout (one second) and it

 *      would be insane to count on any userspace daemon always

 *      getting scheduled within that time frame.

/*

 * You must set these - The driver cannot probe for the settings

/*

 * The 60xx board can use watchdog timeout values from one second

 * to several minutes.  The default is one second, so if we reset

 * the watchdog every ~250ms we should be safe.

/*

 * We must not require too good response from the userspace daemon.

 * Here we require the userspace daemon to send us a heartbeat

 * char to /dev/watchdog every 30 seconds.

 * If the daemon pulses us every 25 seconds, we can still afford

 * a 5 second scheduling delay on the (high priority) daemon. That

 * should be sufficient for a box under any load.

 30 sec default timeout */

static int timeout = WATCHDOG_TIMEOUT;	/* in seconds, multiplied by HZ to

/*

 *	Whack the dog

	/* If we got a heartbeat pulse within the WDT_US_INTERVAL

	 * we agree to ping the WDT

 Ping the WDT by reading from wdt_start */

 Re-set the timer interval */

/*

 * Utility routines

 Start the timer */

 Stop the timer */

 user land ping */

/*

 * /dev/watchdog handling

 See if we got the magic character 'V' and reload the timer */

			/* note: just in case someone wrote the

			/* scan to see whether or not we got the

		/* Well, anyhow someone wrote to us, we should

 Just in case we're already talking to someone... */

 Good, fire up the show */

 arbitrary upper limit */

/*

 *	Notifier for system down

/*

 *	The WDT needs to learn about soft shutdowns in order to

 *	turn the timebomb registers off.

 Deregister */

 arbitrary upper limit */

 We cannot reserve 0x45 - the kernel already has! */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Watchdog driver for Intel Keem Bay non-secure watchdog.

 *

 * Copyright (C) 2020 Intel Corporation

 Non-secure watchdog register offsets */

/*

 * SMC call is used to clear the interrupt bits, because the TIM_GEN_CONFIG

 * register is in the secure bank.

 we do not need to enable the clock as it is enabled by default */

 SPDX-License-Identifier: GPL-2.0+

/*

 *	SoftDog:	A Software Watchdog Device

 *

 *	(c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *							All Rights Reserved.

 *

 *	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide

 *	warranty for any of this software. This material is provided

 *	"AS-IS" and at no charge.

 *

 *	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>

 *

 *	Software only watchdog driver. Unlike its big brother the WDT501P

 *	driver this won't always recover a failed machine.

 Default is 60 seconds */

 in seconds */

 Should not reach here */

			/*

			 * The 'kernel_restart' is a 'might-sleep' operation.

			 * Also, executing it in system-wide workqueues blocks

			 * any driver from using the same workqueue in its

			 * shutdown callback function. Thus, we should execute

			 * the 'kernel_restart' in a standalone kernel thread.

			 * But since starting a kernel thread is also a

			 * 'might-sleep' operation, so the 'reboot_work' is

			 * required as a launcher of the kernel thread.

			 *

			 * After request the reboot, restart the timer to

			 * schedule an 'emergency_restart' reboot after

			 * 'TIMER_MARGIN' seconds. It's because if the softdog

			 * hangs, it might be because of scheduling issues. And

			 * if that is the case, both 'schedule_work' and

			 * 'kernel_restart' may possibly be malfunctional at the

			 * same time.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	Watchdog Timer Driver

 *	   for ITE IT87xx Environment Control - Low Pin Count Input / Output

 *

 *	(c) Copyright 2007  Oliver Schuster <olivers137@aol.com>

 *

 *	Based on softdog.c	by Alan Cox,

 *		 83977f_wdt.c	by Jose Goncalves,

 *		 it87.c		by Chris Gauthron, Jean Delvare

 *

 *	Data-sheets: Publicly available at the ITE website

 *		    http://www.ite.com.tw/

 *

 *	Support of the watchdog timers, which are available on

 *	IT8607, IT8620, IT8622, IT8625, IT8628, IT8655, IT8665, IT8686,

 *	IT8702, IT8712, IT8716, IT8718, IT8720, IT8721, IT8726, IT8728,

 *	IT8772, IT8783 and IT8784.

 Defaults for Module Parameter */

 IO Ports */

 Logical device Numbers LDN */

 Configuration Registers and Functions */

 Chip Id numbers */

 the data sheet suggest wrongly 0x8716 */

 GPIO Configuration Registers LDN=0x07 */

 GPIO Bits WDTCFG */

 not in it8721 */

 Superio Chip */

	/*

	 * Try to reserve REG and REG + 1 for exclusive access.

 Internal function, should be called after superio_select(GPIO) */

 watchdog timer handling */

/**

 *	wdt_set_timeout - set a new timeout value with watchdog ioctl

 *	@t: timeout value in seconds

 *

 *	The hardware device has a 8 or 16 bit watchdog timer (depends on

 *	chip version) that can be configured to count seconds or minutes.

 *

 *	Used within WDIOC_SETTIMEOUT watchdog device ioctl.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * RDC321x watchdog driver

 *

 * Copyright (C) 2007-2010 Florian Fainelli <florian@openwrt.org>

 *

 * This driver is highly inspired from the cpu5_wdt driver

 Mask */

 Enable bit */

 Generate CPU reset/NMI/WDT on timeout */

 Reset bit */

 WDT IRQ Flag */

 IRQ Routing table */

 WDT count */

 Clear timer */

 some device data */

 generic helper functions */

 keep watchdog alive */

 requeue?? */

 ticks doesn't matter anyway */

 Clear the timer */

 Enable watchdog and set the timeout to 81.92 us */

 if process dies, counter is not decremented */

 filesystem operations */

 Read the value from the DATA register */

 Reset the watchdog */

 SPDX-License-Identifier: GPL-2.0

/*

 * Watchdog driver for Renesas WDT watchdog

 *

 * Copyright (C) 2015-17 Wolfram Sang, Sang Engineering <wsa@sang-engineering.com>

 * Copyright (C) 2015-17 Renesas Electronics Corporation

/*

 * In probe, clk_rate is checked to be not more than 16 bit * biggest clock

 * divider (12 bits). d is only a factor to fully utilize the WDT counter and

 * will not exceed its 16 bits. Thus, no overflow, we stay below 32 bits.

 d is 16 bit, clk_divs 12 bit -> no 32 bit overflow */

 Stop the timer before we modify any register */

 Delay 2 cycles before setting watchdog counter */

 Delay 3 cycles before disabling module clock */

 needs to be atomic - no RPM, no usleep_range, no scheduling! */

 Stop the timer before we modify any register */

 Delay 2 cycles before setting watchdog counter */

 smallest divider to reboot soon */

 wait 2 cycles, so watchdog will trigger */

/*

 * Watchdog-reset integration is broken on early revisions of R-Car Gen2 SoCs

 needs single CPU */

 needs single CPU */

 needs SMP disabled */

 sentinel */ }

 !CONFIG_ARCH_RCAR_GEN2 || !CONFIG_SMP */

 !CONFIG_ARCH_RCAR_GEN2 || !CONFIG_SMP */

 This overrides the default timeout only if DT configuration was found */

 Check if FW enabled the watchdog */

 Ensure properly initialized dividers */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+

/*

 * Watchdog driver for DA9063 PMICs.

 *

 * Copyright(c) 2012 Dialog Semiconductor Ltd.

 *

 * Author: Mariusz Wojtasik <mariusz.wojtasik@diasemi.com>

 *

/*

 * Watchdog selector to timeout in seconds.

 *   0: WDT disabled;

 *   others: timeout = 2048 ms * 2^(TWDSCALE-1).

/*

 * Read the currently active timeout.

 * Zero means the watchdog is disabled.

	/*

	 * The watchdog triggers a reboot if a timeout value is already

	 * programmed because the timeout value combines two functions

	 * in one: indicating the counter limit and starting the watchdog.

	 * The watchdog must be disabled to be able to change the timeout

	 * value if the watchdog is already running. Then we can set the

	 * new timeout value which enables the watchdog again.

	/*

	 * Prevent pings from occurring late in system poweroff/reboot sequence

	 * and possibly locking out restart handler from accessing i2c bus.

	/*

	 * There are two cases when a set_timeout() will be called:

	 * 1. The watchdog is off and someone wants to set the timeout for the

	 *    further use.

	 * 2. The watchdog is already running and a new timeout value should be

	 *    set.

	 *

	 * The watchdog can't store a timeout value not equal zero without

	 * enabling the watchdog, so the timeout must be buffered by the driver.

 Use pre-configured timeout if watchdog is already running. */

 Set timeout, maybe override it with DT value, scale it */

 Update timeout if the watchdog is already running. */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Watchdog driver for Marvell Armada 37xx SoCs

 *

 * Author: Marek Behún <kabel@kernel.org>

/*

 * There are four counters that can be used for watchdog on Armada 37xx.

 * The addresses for counter control registers are register base plus ID*0x10,

 * where ID is 0, 1, 2 or 3.

 *

 * In this driver we use IDs 0 and 1. Counter ID 1 is used as watchdog counter,

 * while counter ID 0 is used to implement pinging the watchdog: counter ID 1 is

 * set to restart counting from initial value on counter ID 0 end count event.

 * Pinging is done by forcing immediate end count event on counter ID 0.

 * If only one counter was used, pinging would have to be implemented by

 * disabling and enabling the counter, leaving the system in a vulnerable state

 * for a (really) short period of time.

 *

 * Counters ID 2 and 3 are enabled by default even before U-Boot loads,

 * therefore this driver does not provide a way to use them, eg. by setting a

 * property in device tree.

 relative to cpu_misc */

 relative to reg */

 in clock ticks */

	/*

	 * when low is read, high is latched into flip-flops so that it can be

	 * read consistently without using software debouncing

 set mode */

 set prescaler to the min value */

 set trigger source */

 counter 1 is retriggered by forcing end count on counter 0 */

	/*

	 * Compute the timeout in clock rate. We use smallest possible

	 * prescaler, which divides the clock rate by 2

	 * (CNTR_CTRL_PRESCALE_MIN).

 select counter 1 as watchdog counter */

 init counter 0 as retrigger counter for counter 1 */

 init counter 1 to be retriggerable by counter 0 end count */

 enable counter 1 */

 start counter 1 by forcing immediate end count on counter 0 */

 init clock */

	/*

	 * Since the timeout in seconds is given as 32 bit unsigned int, and

	 * the counters hold 64 bit values, even after multiplication by clock

	 * rate the counter can hold timeout of UINT_MAX seconds.

 default value, possibly override by module parameter or dtb */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2016 National Instruments Corp.

 Unlock WDT register */

 Lock WDT register */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	IndyDog	0.3	A Hardware Watchdog Device for SGI IP22

 *

 *	(c) Copyright 2002 Guido Guenther <agx@sigxcpu.org>,

 *						All Rights Reserved.

 *

 *	based on softdog.c by Alan Cox <alan@lxorguk.ukuu.org.uk>

 30 sec default timeout */

/*

 *	Allow only one person to hold it open

 Activate timer */

	/* Shut off the timer.

 Turn the WDT off */

 Refresh the timer. */

 Turn the WDT off */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Watchdog driver for the wm831x PMICs

 *

 * Copyright (C) 2009 Wolfson Microelectronics

/* We can't use the sub-second values here but they're included

 Seconds */

 WDOG_TO value */

 Actually 32.768s so include both, others round down */

 Apply any configuration */

/*

 * Watchdog driver for Cirrus Logic EP93xx family of devices.

 *

 * Copyright (c) 2004 Ray Lehtiniemi

 * Copyright (c) 2006 Tower Technologies

 * Based on ep93xx driver, bits from alim7101_wdt.c

 *

 * Authors: Ray Lehtiniemi <rayl@mail.com>,

 *	Alessandro Zummo <a.zummo@towertech.it>

 *

 * Copyright (c) 2012 H Hartley Sweeten <hsweeten@visionengravers.com>

 *	Convert to a platform device and use the watchdog framework API

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 *

 * This watchdog fires after 250msec, which is a too short interval

 * for us to rely on the user space daemon alone. So we ping the

 * wdt each ~200msec and eventually stop doing it if the user space

 * daemon dies.

 default timeout (secs) */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ACPI Hardware Watchdog (WDAT) driver.

 *

 * Copyright (C) 2016, Intel Corporation

 * Author: Mika Westerberg <mika.westerberg@linux.intel.com>

/**

 * struct wdat_instruction - Single ACPI WDAT instruction

 * @entry: Copy of the ACPI table instruction

 * @reg: Register the instruction is accessing

 * @node: Next instruction in action sequence

/**

 * struct wdat_wdt - ACPI WDAT watchdog device

 * @pdev: Parent platform device

 * @wdd: Watchdog core device

 * @period: How long is one watchdog period in ms

 * @stopped_in_sleep: Is this watchdog stopped by the firmware in S1-S5

 * @stopped: Was the watchdog stopped by the driver in suspend

 * @instructions: An array of instruction lists indexed by an action number from

 *                the WDAT table. There can be %NULL entries for not implemented

 *                actions.

 Run each instruction sequentially */

	/*

	 * WDAT specification says that the watchdog is required to reboot

	 * the system when it fires. However, it also states that it is

	 * recommended to make it configurable through hardware register. We

	 * enable reboot now if it is configurable, just in case.

 Clear the boot status in case BIOS did not do it */

 WDAT specification wants to have >= 1ms period */

 Request and map all resources */

 Find the matching resource */

	/*

	 * Set initial timeout so that userspace has time to configure the

	 * watchdog properly after it has opened the device. In some cases

	 * the BIOS default is too short and causes immediate reboot.

	/*

	 * We need to stop the watchdog if firmware is not doing it or if we

	 * are going suspend to idle (where firmware is not involved). If

	 * firmware is stopping the watchdog we kick it here one more time

	 * to give it some time.

		/*

		 * Looks like the boot firmware reinitializes the watchdog

		 * before it hands off to the OS on resume from sleep so we

		 * stop and reprogram the watchdog here.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * VIA Chipset Watchdog Driver

 *

 * Copyright (C) 2011 Sigfox

 * Author: Marc Vertes <marc.vertes@sigfox.com>

 * Based on a preliminary version from Harald Welte <HaraldWelte@viatech.com>

 * Timer code by Wim Van Sebroeck <wim@iguana.be>

 *

 * Caveat: PnP must be enabled in BIOS to allow full access to watchdog

 * control registers. If not, the watchdog must be configured in BIOS manually.

 Configuration registers relative to the pci device */

 MMIO region base address */

 watchdog enable state */

 Relevant bits for the VIA_WDT_CONF register */

 1: enable watchdog */

 1: enable watchdog MMIO */

/*

 * The MMIO region contains the watchdog control register and the

 * hardware timer counter.

 MMIO region length in bytes */

 MMIO addr+0: state/control reg. */

 MMIO addr+4: timer counter reg. */

 Bits for the VIA_WDT_CTL register */

 0: stop, 1: running */

 1: restarted by expired watchdog */

 0: reset, 1: poweroff */

 1: timer is disabled */

 1: start a new countdown */

 Hardware heartbeat in seconds */

 Timer heartbeat (500ms) */

 should be <= ((WDT_HW_HEARTBEAT*HZ)/2) */

 User space timeout in seconds */

 approx. 17 min. */

 The timer that pings the watchdog */

 the next_heartbeat for the timer */

/*

 * Timer tick: the timer will make sure that the watchdog timer hardware

 * is being reset in time. The conditions to do this are:

 *  1) the watchdog timer has been started and /dev/watchdog is open

 *     and there is still time left before userspace should send the

 *     next heartbeat/ping. (note: the internal heartbeat is much smaller

 *     then the external/userspace heartbeat).

 *  2) the watchdog timer has been stopped by userspace.

 calculate when the next userspace timeout will be */

	/*

	 * Allocate a MMIO region which contains watchdog control register

	 * and counter, then configure the watchdog to use this region.

	 * This is possible only if PnP is properly enabled in BIOS.

	 * If not, the watchdog must be configured in BIOS manually.

 start triggering, in case of watchdog already enabled by BIOS */

/*

 * Watchdog driver for Technologic Systems TS-72xx based SBCs

 * (TS-7200, TS-7250 and TS-7260). These boards have external

 * glue logic CPLD chip, which includes programmable watchdog

 * timer.

 *

 * Copyright (c) 2009 Mika Westerberg <mika.westerberg@iki.fi>

 *

 * This driver is based on ep93xx_wdt and wm831x_wdt drivers.

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 priv->control_reg */

 priv->feed_reg */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2015 Broadcom Corporation

 *

 seconds */

 seconds */

	/* MIPS chips strapped for BE will automagically configure the

	 * peripheral registers for CPU-native byte order.

 Can't modify timeout value if watchdog timer is running */

 If unable to get clock, use default frequency */

 Prevent divide-by-zero exception */

 SPDX-License-Identifier: GPL-2.0

	/*

	 * The pm8916-pon-wdt is a child of the pon device, which is a child

	 * of the pm8916 mfd device. We want access to the pm8916 registers.

	 * Retrieve regmap from pm8916 (parent->parent) and base address

	 * from pm8916-pon (pon).

 Configure watchdog to hard-reset mode */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  MEN 14F021P00 Board Management Controller (BMC) Watchdog Driver.

 *

 *  Copyright (C) 2014 MEN Mikro Elektronik Nuernberg GmbH

 in sec */

 in sec */

	/*

	 *  BMC Watchdog does have a resolution of 100ms.

	 *  Watchdog API defines the timeout in seconds, so we have to

	 *  multiply the value.

	/*

	 * Get the current wdt timeout value from the BMC because

	 * the BMC will save the value set before if the system restarts.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2015-2016 Mentor Graphics

/**

 * pretimeout_noop - No operation on watchdog pretimeout event

 * @wdd - watchdog_device

 *

 * This function prints a message about pretimeout to kernel log.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Spreadtrum watchdog driver

 * Copyright (C) 2017 Spreadtrum - http://www.spreadtrum.com

 WDT_CTRL */

 WDT_INT_CLR */

 WDT_INT_RAW */

 1s equal to 32768 counter steps */

	/*

	 * Checking busy bit to make sure the previous loading operation is

	 * done. According to the specification, the busy bit would be set

	 * after a new loading operation and last 2 or 3 RTC clock

	 * cycles (about 60us~92us).

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (c) 2004 Simtec Electronics

 *	Ben Dooks <ben@simtec.co.uk>

 *

 * S3C2410 Watchdog Timer Support

 *

 * Based on, softdog.c by Alan Cox,

 *     (c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>

 These quirks require that we have a PMU register map */

/**

 * struct s3c2410_wdt_variant - Per-variant config data

 *

 * @disable_reg: Offset in pmureg for the register that disables the watchdog

 * timer reset functionality.

 * @mask_reset_reg: Offset in pmureg for the register that masks the watchdog

 * timer reset functionality.

 * @mask_bit: Bit number for the watchdog timer in the disable register and the

 * mask reset register.

 * @rst_stat_reg: Offset in pmureg for the register that has the reset status.

 * @rst_stat_bit: Bit number in the rst_stat register indicating a watchdog

 * reset.

 * @quirks: A bitfield of quirks.

 A57 WDTRESET */

 functions */

 No need to do anything if no PMU CONFIG needed */

	/* if the count is bigger than the watchdog register,

	   then work out what we need to do (and if) we can

	   actually make this value

 update the pre-scaler */

 disable watchdog, to be safe  */

 put initial values into count and data */

 set the watchdog to go and reset... */

 wait for reset to assert... */

 interrupt handler code */

		/* To ensure that over the change we don't cause the

		 * watchdog to trigger, we perform an keep-alive if

		 * the watchdog is running.

 Device matched by platform_device_id */

 get the memory region for the watchdog timer */

	/* see if we can actually set the requested timer margin, and if

		/* if we're not enabling the watchdog, then ensure it is

		 * disabled if it has been left running from the bootloader

 print out a statement of readiness */

 Save watchdog state, and turn it off. */

 Note that WTCNT doesn't need to be saved. */

 Restore watchdog state. */

 Reset count */

/*

 * Realtek RTD129x watchdog

 *

 * Copyright (c) 2017 Andreas Färber

 *

 * SPDX-License-Identifier: GPL-2.0+

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2018 Nuvoton Technology corporation.

 Copyright (c) 2018 IBM Corp.

 Clock divider */

 Enable */

 Enable irq */

 Interval selection */

 Interrupt flag*/

 Reset flag */

 Reset enable */

 Reset counter */

/*

 * Watchdog timeouts

 *

 * 170     msec:    WTCLK=01 WTIS=00     VAL= 0x400

 * 670     msec:    WTCLK=01 WTIS=01     VAL= 0x410

 * 1360    msec:    WTCLK=10 WTIS=00     VAL= 0x800

 * 2700    msec:    WTCLK=01 WTIS=10     VAL= 0x420

 * 5360    msec:    WTCLK=10 WTIS=01     VAL= 0x810

 * 10700   msec:    WTCLK=01 WTIS=11     VAL= 0x430

 * 21600   msec:    WTCLK=10 WTIS=10     VAL= 0x820

 * 43000   msec:    WTCLK=11 WTIS=00     VAL= 0xC00

 * 85600   msec:    WTCLK=10 WTIS=11     VAL= 0x830

 * 172000  msec:    WTCLK=11 WTIS=01     VAL= 0xC10

 * 687000  msec:    WTCLK=11 WTIS=10     VAL= 0xC20

 * 2750000 msec:    WTCLK=11 WTIS=11     VAL= 0xC30

 Ensure timeout is able to be represented by the hardware */

 Restart with the default or device-tree specified timeout */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	W83977F Watchdog Timer Driver for Winbond W83977F I/O Chip

 *

 *	(c) Copyright 2005  Jose Goncalves <jose.goncalves@inov.pt>

 *

 *      Based on w83877f_wdt.c by Scott Jennings,

 *           and wdt977.c by Woody Suwalski

 *

 *			-----------------------

 default timeout in seconds */

 timeout in watchdog counter units */

/*

 * Start the watchdog

 Unlock the SuperIO chip */

	/*

	 * Select device Aux2 (device=8) to set watchdog regs F2, F3 and F4.

	 * F2 has the timeout in watchdog counter units.

	 * F3 is set to enable watchdog LED blink at timeout.

	 * F4 is used to just clear the TIMEOUT'ed state (bit 0).

 Set device Aux2 active */

	/*

	 * Select device Aux1 (dev=7) to set GP16 as the watchdog output

	 * (in reg E6) and GP13 as the watchdog LED output (in reg E3).

	 * Map GP16 at pin 119.

	 * In test mode watch the bit 0 on F4 to indicate "triggered" or

	 * check watchdog LED on SBC.

 Set device Aux1 active */

 Lock the SuperIO chip */

/*

 * Stop the watchdog

 Unlock the SuperIO chip */

	/*

	 * Select device Aux2 (device=8) to set watchdog regs F2, F3 and F4.

	 * F2 is reset to its default value (watchdog timer disabled).

	 * F3 is reset to its default state.

	 * F4 clears the TIMEOUT'ed state (bit 0) - back to default.

	/*

	 * Select device Aux1 (dev=7) to set GP16 (in reg E6) and

	 * Gp13 (in reg E3) as inputs.

 Lock the SuperIO chip */

/*

 * Send a keepalive ping to the watchdog

 * This is done by simply re-writing the timeout to reg. 0xF2

 Unlock the SuperIO chip */

 Select device Aux2 (device=8) to kick watchdog reg F2 */

 Lock the SuperIO chip */

/*

 * Set the watchdog timeout value

	/*

	 * Convert seconds to watchdog counter time units, rounding up.

	 * On PCM-5335 watchdog units are 30 seconds/step with 15 sec startup

	 * value. This information is supplied in the PCM-5335 manual and was

	 * checked by me on a real board. This is a bit strange because W83977f

	 * datasheet says counter unit is in minutes!

	/*

	 * timeout is the timeout in seconds,

	 * timeoutW is the timeout in watchdog counter units.

/*

 * Get the watchdog status

 Unlock the SuperIO chip */

 Select device Aux2 (device=8) to read watchdog reg F4 */

 Lock the SuperIO chip */

/*

 *	/dev/watchdog handling

 If the watchdog is alive we don't need to start it again */

	/*

	 * Shut off the timer.

	 * Lock it in if it's a module and we set nowayout

/*

 *      wdt_write:

 *      @file: file handle to the watchdog

 *      @buf: buffer to write (unused as data does not matter here

 *      @count: count of bytes

 *      @ppos: pointer to the position to write. No seeks allowed

 *

 *      A write to a watchdog device is defined as a keepalive signal. Any

 *      write of data will do, as we we don't define content meaning.

 See if we got the magic character 'V' and reload the timer */

			/* note: just in case someone wrote the

			/* scan to see whether or not we got the

 someone wrote to us, we should restart timer */

/*

 *      wdt_ioctl:

 *      @inode: inode of the device

 *      @file: file handle to the device

 *      @cmd: watchdog command

 *      @arg: argument pointer

 *

 *      The watchdog API defines a common set of functions for all watchdogs

 *      according to their available features.

	/*

	 * Check that the timeout value is within it's range;

	 * if not reset to the default

 SPDX-License-Identifier: GPL-2.0+

/*

 *	w83627hf/thf WDT driver

 *

 *	(c) Copyright 2013 Guenter Roeck

 *		converted to watchdog infrastructure

 *

 *	(c) Copyright 2007 Vlad Drukker <vlad@storewiz.com>

 *		added support for W83627THF.

 *

 *	(c) Copyright 2003,2007 Pádraig Brady <P@draigBrady.com>

 *

 *	Based on advantechwdt.c which is based on wdt.c.

 *	Original copyright messages:

 *

 *	(c) Copyright 2000-2001 Marek Michalkiewicz <marekm@linux.org.pl>

 *

 *	(c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *						All Rights Reserved.

 *

 *	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide

 *	warranty for any of this software. This material is provided

 *	"AS-IS" and at no charge.

 *

 *	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>

 60 sec default timeout */

 WDT timeout register */

 WDT control register */

 WDT control & status register */

 key to unlock configuration space */

 key to lock configuration space */

 in seconds */

/*

 *	Kernel methods.

 Extended Function Enable Registers */

#define WDT_EFIR (wdt_io+0)   /* Extended Function Index Register

 Extended Function Data Register */

 also NCT9697D, NCT9698D */

 Enter extended function mode */

 Again according to manual */

 Leave extended function mode */

 set CR30 bit 0 to activate GPIO2 */

 set GPIO24 to WDT0 */

 Set pin 119 to WDTO# mode (= CR29, WDT0) */

 Set pin 118 to WDTO# mode */

 set GPIO3 to WDT0 */

 PIN77 -> WDT0# */

 set GPIO5 to WDT0 */

		t |= 0x02;	/* enable the WDTO# output low pulse

 PIN47 -> WDT0# */

		/*

		 * These chips have a fixed WDTO# output pin (W83627UHG),

		 * or support more than one WDTO# output pin.

		 * Don't touch its configuration, and hope the BIOS

		 * does the right thing.

		t |= 0x02;	/* enable the WDTO# output low pulse

 set second mode & disable keyboard turning off watchdog */

 reset trigger, disable keyboard & mouse turning off watchdog */

/*

 *	Kernel Interfaces

/*

 *	The WDT needs to learn about soft shutdowns in order to

 *	turn the timebomb registers off.

/*

 * On some systems, the NCT6791D comes with a companion chip and the

 * watchdog function is in this companion chip. We must use a different

 * unlocking sequence to access the companion chip.

 Apply system-specific quirks */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Mellanox watchdog driver

 *

 * Copyright (C) 2019 Mellanox Technologies

 * Copyright (C) 2019 Michael Shych <mshych@mellanox.com>

/**

 * struct mlxreg_wdt - wd private data:

 *

 * @wdd:	watchdog device;

 * @device:	basic device;

 * @pdata:	data received from platform driver;

 * @regmap:	register map of parent device;

 * @timeout:	defined timeout in sec.;

 * @action_idx:	index for direct access to action register;

 * @timeout_idx:index for direct access to TO register;

 * @tleft_idx:	index for direct access to time left register;

 * @ping_idx:	index for direct access to ping register;

 * @reset_idx:	index for direct access to reset cause register;

 * @wd_type:	watchdog HW type;

 Rowndown to actual closest number of sec. */

 WD_TYPE3 has 2B set time register */

		/*

		 * Restart watchdog with new timeout period

		 * if watchdog is already started.

 WD_TYPE3 has 2 byte timeleft register */

 Return 0 timeleft in case of failure register read. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Watchdog driver for IMX2 and later processors

 *

 *  Copyright (C) 2010 Wolfram Sang, Pengutronix e.K. <kernel@pengutronix.de>

 *  Copyright (C) 2014 Freescale Semiconductor, Inc.

 *

 * some parts adapted by similar drivers from Darius Augulis and Vladimir

 * Zapolskiy, additional improvements by Wim Van Sebroeck.

 *

 * NOTE: MX1 has a slightly different Watchdog than MX2 and later:

 *

 *			MX1:		MX2+:

 *			----		-----

 * Registers:		32-bit		16-bit

 * Stopable timer:	Yes		No

 * Need to enable clk:	No		Yes

 * Halt on suspend:	Manual		Can be automatic

 Control Register */

 -> Watchdog Timeout Field */

 -> External Reset WDOG_B */

 -> Software Reset Signal */

 -> WDOG Reset Enable */

 -> Watchdog Enable */

 -> Watchdog timer Suspend */

 Service Register */

 -> service sequence 1 */

 -> service sequence 2 */

 Reset Status Register */

 -> Reset due to Timeout */

 Interrupt Control Register */

 -> Interrupt Enable */

 -> Interrupt Status */

 -> Interrupt Count Timeout */

 Misc Register */

 in seconds */

 Use internal reset or external - not both */

 do not assert int reset */

 do not assert ext-reset */

 Assert SRS signal */

	/*

	 * Due to imx6q errata ERR004346 (WDOG: WDOG SRS bit requires to be

	 * written twice), we add another two writes to ensure there must be at

	 * least two writes happen in the same one 32kHz clock period.  We save

	 * the target check here, since the writes shouldn't be a huge burden

	 * for other platforms.

 wait for reset to assert... */

 Suspend timer in low power mode, write once-only */

 Strip the old watchdog Time-Out value */

 Generate internal chip-level reset if WDOG times out */

 Or if external-reset assert WDOG_B reset only on time-out */

 Keep Watchdog Disabled */

 Set the watchdog's Time-Out value */

 enable the watchdog */

	/*

	 * Disable the watchdog power down counter at boot. Otherwise the power

	 * down counter will pull down the #WDOG interrupt line for one clock

	 * cycle.

		/*

		 * We are running, configure max timeout before reboot

		 * will take place.

 Disable watchdog if it is active or non-active but still running */

 The watchdog IP block is running */

		/*

		 * Don't update wdog->timeout, we'll restore the current value

		 * during resume.

 Enable watchdog and configure it if necessary */

		/*

		 * If the watchdog is still active and resumes

		 * from deep sleep state, need to restart the

		 * watchdog again.

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Watchdog driver for the K3 RTI module

 *

 * (c) Copyright 2019-2020 Texas Instruments Inc.

 * All rights reserved.

 Max heartbeat is calculated at 32kHz source clock */

 Timer register set definition */

/*

 * struct to hold data for each WDT device

 * @base - base io address of WD device

 * @freq - source clock frequency of WDT

 * @wdd  - hold watchdog device as is in WDT core

 set timeout period */

	/*

	 * RTI only supports a windowed mode, where the watchdog can only

	 * be petted during the open window; not too early or not too late.

	 * The HW configuration options only allow for the open window size

	 * to be 50% or less than that; we obviouly want to configure the open

	 * window as large as possible so we select the 50% option.

 Generate NMI when wdt expires */

 Open window size 50%; this is the largest window size available */

 enable watchdog */

 put watchdog in service state */

 put watchdog in active state */

	/*

	 * RTI only supports a windowed mode, where the watchdog can only

	 * be petted during the open window; not too early or not too late.

	 * The HW configuration options only allow for the open window size

	 * to be 50% or less than that.

 50% open window => 50% min heartbeat */

 25% open window => 75% min heartbeat */

 12.5% open window => 87.5% min heartbeat */

 6.5% open window => 93.5% min heartbeat */

 3.125% open window => 96.9% min heartbeat */

 if timeout has occurred then return 0 */

	/*

	 * If watchdog is running at 32k clock, it is not accurate.

	 * Adjust frequency down in this case so that we don't pet

	 * the watchdog too often.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2020 TOSHIBA CORPORATION

 * Copyright (c) 2020 Toshiba Electronic Devices & Storage Corporation

 * Copyright (c) 2020 Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>

 2MHz */

 in seconds */

 Clear counter before setting timeout because WDT expires */

 Initialize struct watchdog_device. */

 This overrides the default timeout only if DT configuration was found */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PIKA FPGA based Watchdog Timer

 *

 * Copyright (c) 2008 PIKA Technologies

 *   Sean MacLennan <smaclennan@pikatech.com>

 Hardware timeout in seconds */

 Timer heartbeat (500ms) */

 User land timeout */

 the next_heartbeat for the timer */

 The timer that pings the watchdog */

/*

 * Reload the watchdog timer.  (ie, pat the watchdog)

	/* -- FPGA: Reset Control Register (32bit R/W) (Offset: 0x14) --

	 * Bit 7,    WTCHDG_EN: When set to 1, the watchdog timer is enabled.

	 *           Once enabled, it cannot be disabled. The watchdog can be

	 *           kicked by performing any write access to the reset

	 *           control register (this register).

	 * Bit 8-11, WTCHDG_TIMEOUT_SEC: Sets the watchdog timeout value in

	 *           seconds. Valid ranges are 1 to 15 seconds. The value can

	 *           be modified dynamically.

 enable with max timeout - 15 seconds */

/*

 * Timer tick

/*

 * Watchdog device is opened, and watchdog starts running.

 /dev/watchdog can only be opened once */

/*

 * Close the watchdog device.

 stop internal ping */

/*

 * Pat the watchdog whenever device is written to.

 Scan for magic character */

/*

 * Handle commands from user-space.

 return current value */

 POST information is in the sd area. */

	/* -- FPGA: POST Test Results Register 1 (32bit R/W) (Offset: 0x4040) --

	 * Bit 31,   WDOG: Set to 1 when the last reset was caused by a watchdog

	 *           timeout.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	nv_tco 0.01:	TCO timer driver for NV chipsets

 *

 *	(c) Copyright 2005 Google Inc., All Rights Reserved.

 *

 *	Based off i8xx_tco.c:

 *	(c) Copyright 2000 kernel concepts <nils@kernelconcepts.de>, All Rights

 *	Reserved.

 *				https://www.kernelconcepts.de

 *

 *	TCO timer driver for NV chipsets

 *	based on softdog.c by Alan Cox <alan@redhat.com>

/*

 *	Includes, defines, variables, module parameters, ...

 Module and version information */

 internal variables */

 Guards the hardware */

 the watchdog platform device */

 module parameters */

 30 sec default heartbeat (2<heartbeat<39) */

 in seconds */

/*

 * Some TCO specific functions

	/* the internal timer is stored as ticks which decrement

	/*

	 * note seconds_to_ticks(t) > t, so if t > 0x3f, so is

	 * tmrval=seconds_to_ticks(t).  Check that the count in seconds isn't

	 * out of range on it's own (to avoid overflow in tmrval).

 "Values of 0h-3h are ignored and should not be attempted" */

 Write new heartbeat to watchdog */

/*

 *	/dev/watchdog handling

 /dev/watchdog can only be opened once */

 Reload and activate timer */

 Shut off the timer */

 See if we got the magic character 'V' and reload the timer */

			/*

			 * note: just in case someone wrote the magic character

			 * five months ago...

			/*

			 * scan to see whether or not we got the magic

			 * character

 someone wrote to us, we should reload the timer */

/*

 *	Kernel Interfaces

/*

 * Data for PCI driver interface

 *

 * This data only exists for exporting the supported

 * PCI ids via MODULE_DEVICE_TABLE.  We do not actually

 * register a pci_driver, because someone else might one day

 * want to register another driver on the same PCI id.

 End of list */

/*

 *	Init & exit routines

 Find the PCI device */

 Find the base io port */

 Something is wrong here, bar isn't setup */

 Set a reasonable heartbeat before we stop the timer */

	/*

	 * Stop the TCO before we change anything so we don't race with

	 * a zeroed timer.

 Disable SMI caused by TCO */

 Check chipset's NO_REBOOT bit */

 Check whether or not the hardware watchdog is there */

 Check to see if last reboot was due to watchdog timeout */

 Clear out the old status */

	/*

	 * Check that the heartbeat value is within it's range.

	 * If not, reset to the default.

 Stop the timer before we leave */

 Set the NO_REBOOT bit to prevent later reboots, just for sure */

 Deregister */

	/* Some BIOSes fail the POST (once) if the NO_REBOOT flag is not

 SPDX-License-Identifier: GPL-2.0

/*

 * Watchdog driver for the RTC based watchdog in STMP3xxx and i.MX23/28

 *

 * Author: Wolfram Sang <kernel@pengutronix.de>

 *

 * Copyright (C) 2011-12 Wolfram Sang, Pengutronix

 1 kHz clock */

 keep enabled, system might crash while going down */

 allow the system to actually halt */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for STM32 Independent Watchdog

 *

 * Copyright (C) STMicroelectronics 2017

 * Author: Yannick Fertre <yannick.fertre@st.com> for STMicroelectronics.

 *

 * This driver is based on tegra_wdt.c

 *

 IWDG registers */

 Key register */

 Prescaler Register */

 ReLoad Register */

 Status Register */

 Windows Register */

 IWDG_KR register bit mask */

 reload counter enable */

 peripheral enable */

 write access enable */

 write access disable */

 IWDG_PR register */

 IWDG_RLR register values */

 min value recommended */

 max value of reload register */

 IWDG_SR register bit mask */

 Watchdog prescaler value update */

 Watchdog counter reload value update */

 set timeout to 100000 us */

 The prescaler is align on power of 2 and start at 2 ^ PR_SHIFT. */

 enable write access */

 set prescaler & reload registers */

 wait for the registers to be updated (max 100ms) */

 reload watchdog */

 reload watchdog */

 optional peripheral clock */

 end node */ }

 This is the timer base. */

 Initialize struct watchdog_device. */

	/*

	 * In case of CONFIG_WATCHDOG_HANDLE_BOOT_ENABLED is set

	 * (Means U-Boot/bootloaders leaves the watchdog running)

	 * When we get here we should make a decision to prevent

	 * any side effects before user space daemon will take care of it.

	 * The best option, taking into consideration that there is no

	 * way to read values back from hardware, is to enforce watchdog

	 * being run with deterministic values.

 Make sure the watchdog is serviced */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Ralink MT7621/MT7628 built-in hardware watchdog timer

 *

 * Copyright (C) 2014 John Crispin <john@phrozen.org>

 *

 * This driver was based on: drivers/watchdog/rt2880_wdt.c

 set the prescaler to 1ms == 1000us */

		/*

		 * Make sure to apply timeout from watchdog core, taking

		 * the prescaler of this driver here into account (the

		 * boot loader might be using a different prescaler).

		 *

		 * To avoid spurious resets because of different scaling,

		 * we first disable the watchdog, set the new prescaler

		 * and timeout, and then re-enable the watchdog.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *	HPE WatchDog Driver

 *	based on

 *

 *	SoftDog	0.05:	A Software Watchdog Device

 *

 *	(c) Copyright 2018 Hewlett Packard Enterprise Development LP

 *	Thomas Mingarelli <thomas.mingarelli@hpe.com>

 in seconds */

 the PCI-memory address */

 iLO2 */

 iLO3 */

 PCtrl */

 terminate list */

 auxilary iLO */

 CL */

 terminate list */

/*

 *	Watchdog operations

/*

 *	NMI Handler

 CONFIG_HPWDT_NMI_DECODING */

/*

 *	Kernel interfaces

/*

 *	Init & Exit

	/*

	 * Only one function can register for NMI_UNKNOWN

 CONFIG_HPWDT_NMI_DECODING */

	/*

	 * First let's find out if we are on an iLO2+ server. We will

	 * not run on a legacy ASM box.

	 * So we only support the G5 ProLiant servers and higher.

 Have the core update running timer until user space is ready */

 Initialize NMI Decoding functionality */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Ralink RT288x/RT3xxx/MT76xx built-in hardware watchdog timer

 *

 * Copyright (C) 2011 Gabor Juhos <juhosg@openwrt.org>

 * Copyright (C) 2013 John Crispin <john@phrozen.org>

 *

 * This driver was based on: drivers/watchdog/softdog.c

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	Intel 21285 watchdog driver

 *	Copyright (c) Phil Blundell <pb@nexus.co.uk>, 1998

 *

 *	based on

 *

 *	SoftDog	0.05:	A Software Watchdog Device

 *

 *	(c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *						All Rights Reserved.

/*

 * Define this to stop the watchdog actually rebooting the machine.

 in seconds */

/*

 *	If the timer expires..

/*

 *	Refresh the timer.

/*

 *	Allow only one person to hold it open

	/*

	 * Setting this bit is irreversible; once enabled, there is

	 * no way to disable the watchdog.

/*

 *	Shut off the timer.

 *	Note: if we really have enabled the watchdog, there

 *	is no way to turn off.

	/*

	 *	Refresh the timer.

 Arbitrary, can't find the card's limits */

/*

 * Watchdog driver for SBC-FITPC2 board

 *

 * Author: Denis Turischev <denis@compulab.co.il>

 *

 * Adapted from the IXP2000 watchdog driver by Deepak Saxena.

 *

 * This file is licensed under  the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 (secs) Default is 1 minute */

/*

 * drivers/char/watchdog/sp805-wdt.c

 *

 * Watchdog driver for ARM SP805 watchdog module

 *

 * Copyright (C) 2010 ST Microelectronics

 * Viresh Kumar <vireshk@kernel.org>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2 or later. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 default timeout in seconds */

 watchdog register offsets and masks */

 control register masks */

/**

 * struct sp805_wdt: sp805 wdt device structure

 * @wdd: instance of struct watchdog_device

 * @lock: spin lock protecting dev structure and io access

 * @base: base address of wdt

 * @clk: (optional) clock structure of wdt

 * @rate: (optional) clock rate when provided via properties

 * @adev: amba device structure of wdt

 * @status: current status of wdt

 * @load_val: load value to be set for current timeout

 returns true if wdt is running; otherwise returns false */

 This routine finds load value that will reset system in required timout */

	/*

	 * sp805 runs counter with given value twice, after the end of first

	 * counter it gives an interrupt and then starts counter again. If

	 * interrupt already occurred then it resets the system. This is why

	 * load is half of what should be required.

 roundup timeout to closest positive integer value */

 returns number of seconds left for reset to occur */

If the interrupt is inactive then time left is WDTValue + WDTLoad. */

 Flush posted writes. */

 Flush posted writes. */

 enables watchdog timers reset */

 disables watchdog timers reset */

 Flush posted writes. */

	/*

	 * When driver probe with ACPI device, clock devices

	 * are not available, so watchdog rate get from

	 * clock-frequency property given in _DSD object.

	/*

	 * If 'timeout-sec' devicetree property is specified, use that.

	 * Otherwise, use DEFAULT_TIMEOUT

	/*

	 * If HW is already running, enable/reset the wdt and set the running

	 * bit to tell the wdt subsystem

 SPDX-License-Identifier: GPL-2.0+

/*

 *	sch311x_wdt.c - Driver for the SCH311x Super-I/O chips

 *			integrated watchdog.

 *

 *	(c) Copyright 2008 Wim Van Sebroeck <wim@iguana.be>.

 *

 *	Neither Wim Van Sebroeck nor Iguana vzw. admit liability nor

 *	provide warranty for any of this software. This material is

 *	provided "AS-IS" and at no charge.

/*

 *	Includes, defines, variables, module parameters, ...

 Includes */

 For module specific items */

 For new moduleparam's */

 For standard types (like size_t) */

 For the -ENODEV/... values */

 For printk/... */

 For struct miscdevice */

 For the watchdog specific items */

 For __init/__exit/... */

 For file operations */

 For platform_driver framework */

 For io-port access */

 For spin_lock/spin_unlock/... */

 For copy_to_user/put_user/... */

 For inb/outb/... */

 Module and version information */

 Runtime registers */

 internal variables */

 The devices private data */

 the Runtime Register base address */

 The card's boot status */

 the lock for io operations */

 Module load parameters */

 60 sec default timeout */

 in seconds */

/*

 *	Super-IO functions

/*

 *	Watchdog Operations

 When new timeout is bigger then 255 seconds, we will use minutes */

	/* -- Watchdog Timeout --

	 * Bit 0-6 (Reserved)

	 * Bit 7   WDT Time-out Value Units Select

	 *         (0 = Minutes, 1 = Seconds)

	/* -- Watchdog Timer Time-out Value --

	 * Bit 0-7 Binary coded units (0=Disabled, 1..255)

 set watchdog's timeout */

 enable the watchdog */

	/* -- General Purpose I/O Bit 6.0 --

	 * Bit 0,   In/Out: 0 = Output, 1 = Input

	 * Bit 1,   Polarity: 0 = No Invert, 1 = Invert

	 * Bit 2-3, Function select: 00 = GPI/O, 01 = LED1, 11 = WDT,

	 *                           10 = Either Edge Triggered Intr.4

	 * Bit 4-6  (Reserved)

	 * Bit 7,   Output Type: 0 = Push Pull Bit, 1 = Open Drain

 stop the watchdog */

 disable timeout by setting it to 0 */

	/* When new timeout is bigger then 255 seconds,

	/* -- Watchdog timer control --

	 * Bit 0   Status Bit: 0 = Timer counting, 1 = Timeout occurred

	 * Bit 1   Reserved

	 * Bit 2   Force Timeout: 1 = Forces WD timeout event (self-cleaning)

	 * Bit 3   P20 Force Timeout enabled:

	 *          0 = P20 activity does not generate the WD timeout event

	 *          1 = P20 Allows rising edge of P20, from the keyboard

	 *              controller, to force the WD timeout event.

	 * Bit 4-7 Reserved

/*

 *	/dev/watchdog handling

	/*

	 *	Activate

/*

 *	Kernel Interfaces

/*

 *	Init & exit routines

 Make sure that the watchdog is not running */

 Disable keyboard and mouse interaction and interrupt */

	/* -- Watchdog timer configuration --

	 * Bit 0   Reserved

	 * Bit 1   Keyboard enable: 0* = No Reset, 1 = Reset WDT upon KBD Intr.

	 * Bit 2   Mouse enable: 0* = No Reset, 1 = Reset WDT upon Mouse Intr

	 * Bit 3   Reserved

	 * Bit 4-7 WDT Interrupt Mapping: (0000* = Disabled,

	 *            0001=IRQ1, 0010=(Invalid), 0011=IRQ3 to 1111=IRQ15)

	/* Check that the heartbeat value is within it's range ;

 Get status at boot */

 Stop the timer before we leave */

 Deregister */

 Turn the WDT off if we have a soft shutdown */

	/* Check device ID. We currently know about:

 Select logical device A (runtime registers) */

 Check if Logical Device Register is currently active */

 Get the base address of the runtime registers */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	SBC EPX C3 0.1	A Hardware Watchdog Device for the Winsystems EPX-C3

 *	single board computer

 *

 *	(c) Copyright 2006 Calin A. Culianu <calin@ajvar.org>, All Rights

 *	Reserved.

 *

 *	based on softdog.c by Alan Cox <alan@lxorguk.ukuu.org.uk>

 1 sec default timeout */

 write 1 to enable, 0 to disable */

 write anything to pet once enabled */

/*

 *	Allow only one person to hold it open

 Activate timer */

	/* Shut off the timer.

 Turn the WDT off */

 Refresh the timer. */

 Turn the WDT off */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * SBSA(Server Base System Architecture) Generic Watchdog driver

 *

 * Copyright (c) 2015, Linaro Ltd.

 * Author: Fu Wei <fu.wei@linaro.org>

 *         Suravee Suthikulpanit <Suravee.Suthikulpanit@amd.com>

 *         Al Stone <al.stone@linaro.org>

 *         Timur Tabi <timur@codeaurora.org>

 *

 * ARM SBSA Generic Watchdog has two stage timeouts:

 * the first signal (WS0) is for alerting the system by interrupt,

 * the second one (WS1) is a real hardware reset.

 * More details about the hardware specification of this device:

 * ARM DEN0029B - Server Base System Architecture (SBSA)

 *

 * This driver can operate ARM SBSA Generic Watchdog as a single stage watchdog

 * or a two stages watchdog, it's set up by the module parameter "action".

 * In the single stage mode, when the timeout is reached, your system

 * will be reset by WS1. The first signal (WS0) is ignored.

 * In the two stages mode, when the timeout is reached, the first signal (WS0)

 * will trigger panic. If the system is getting into trouble and cannot be reset

 * by panic or restart properly by the kdump kernel(if supported), then the

 * second stage (as long as the first stage) will be reached, system will be

 * reset by WS1. This function can help administrator to backup the system

 * context info by panic console output or kdump.

 *

 * SBSA GWDT:

 * if action is 1 (the two stages mode):

 * |--------WOR-------WS0--------WOR-------WS1

 * |----timeout-----(panic)----timeout-----reset

 *

 * if action is 0 (the single stage mode):

 * |------WOR-----WS0(ignored)-----WOR------WS1

 * |--------------timeout-------------------reset

 *

 * Note: Since this watchdog timer has two stages, and each stage is determined

 * by WOR, in the single stage mode, the timeout is (WOR * 2); in the two

 * stages mode, the timeout is WOR. The maximum timeout in the two stages mode

 * is half of that in the single stage mode.

 SBSA Generic Watchdog register definitions */

 refresh frame */

 control frame */

 refresh/control frame */

 Watchdog Control and Status Register */

/**

 * struct sbsa_gwdt - Internal representation of the SBSA GWDT

 * @wdd:		kernel watchdog_device structure

 * @clk:		store the System Counter clock frequency, in Hz.

 * @version:            store the architecture version

 * @refresh_base:	Virtual address of the watchdog refresh frame

 * @control_base:	Virtual address of the watchdog control frame

 seconds */

/*

 * action refers to action taken when watchdog gets WS0

 * 0 = skip

 * 1 = panic

 * defaults to skip (0)

/*

 * Arm Base System Architecture 1.0 introduces watchdog v1 which

 * increases the length watchdog offset register to 48 bits.

 * - For version 0: WOR is 32 bits;

 * - For version 1: WOR is 48 bits which comprises the register

 * offset 0x8 and 0xC, and the bits [63:48] are reserved which are

 * Read-As-Zero and Writes-Ignored.

/*

 * watchdog operation functions

		/*

		 * In the single stage mode, The first signal (WS0) is ignored,

		 * the timeout is (WOR * 2), so the WOR should be configured

		 * to half value of timeout.

	/*

	 * In the single stage mode, if WS0 is deasserted

	 * (watchdog is in the first stage),

	 * timeleft = WOR + (WCV - system counter)

	/*

	 * Writing WRR for an explicit watchdog refresh.

	 * You can write anyting (like 0).

 writing WCS will cause an explicit watchdog refresh */

 Simply write 0 to WCS to clean WCS_EN bit */

	/*

	 * Get the frequency of system counter from the cp15 interface of ARM

	 * Generic timer. We don't need to check it, because if it returns "0",

	 * system would panic in very early stage.

			/*

			 * In case there is a pending ws0 interrupt, just ping

			 * the watchdog before registering the interrupt routine

	/*

	 * In the single stage mode, The first signal (WS0) is ignored,

	 * the timeout is (WOR * 2), so the maximum timeout should be doubled.

	/*

	 * Update timeout to WOR.

	 * Because of the explicit watchdog refresh mechanism,

	 * it's also a ping, if watchdog is enabled.

 Disable watchdog if it is active during suspend */

 Enable watchdog if necessary */

 SPDX-License-Identifier: GPL-2.0

/*

 * Watchdog driver for the UniPhier watchdog timer

 *

 * (c) Copyright 2014 Panasonic Corporation

 * (c) Copyright 2016 Socionext Inc.

 * All rights reserved.

 WDT timer setting register */

 WDT reset selection register */

 WDT control register */

 usec */

 Default is 64 seconds */

/*

 * UniPhier Watchdog operations

 Clear counter */

		/*

		 * As SoC specification, after clear counter,

		 * it needs to wait until counter status is 1.

 Setup period */

 Enable and clear watchdog */

		/*

		 * As SoC specification, after clear counter,

		 * it needs to wait until counter status is 1.

 Disable and stop watchdog */

/*

 * Kernel Interfaces

 parent should be syscon node */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * GE watchdog userspace interface

 *

 * Author:  Martyn Welch <martyn.welch@ge.com>

 *

 * Copyright 2008 GE Intelligent Platforms Embedded Systems, Inc.

 *

 * Based on: mv64x60_wdt.c (MV64X60 watchdog userspace interface)

 *   Author: James Chapman <jchapman@katalix.com>

/* TODO:

 * This driver does not provide support for the hardwares capability of sending

 * an interrupt at a programmable threshold.

 *

 * This driver currently can only support 1 watchdog - there are 2 in the

 * hardware that this driver supports. Thus one could be configured as a

 * process-based watchdog (via /dev/watchdog), the second (using the interrupt

 * capabilities) a kernel-based watchdog.

/*

 * The watchdog configuration register contains a pair of 2-bit fields,

 *   1.  a reload field, bits 27-26, which triggers a reload of

 *       the countdown register, and

 *   2.  an enable field, bits 25-24, which toggles between

 *       enabling and disabling the watchdog timer.

 * Bit 31 is a read-only field which indicates whether the

 * watchdog timer is currently enabled.

 *

 * The low 24 bits contain the timer reload value.

 Flags bits */

 only toggle the requested field if enabled state matches predicate */

 We write a 1, then a 2 -- to the appropriate field */

 maximum bus cycle count is 0xFFFFFFFF */

 Register only holds upper 24 bits, bit shifted into lower 24 */

 in MHz */

 Map devices registers into memory */

 in case timer was already running */

 SPDX-License-Identifier: GPL-2.0+

/*

 * ST's LPC Watchdog

 *

 * Copyright (C) 2014 STMicroelectronics -- All Rights Reserved

 *

 * Author: David Paris <david.paris@st.com> for STMicroelectronics

 *         Lee Jones <lee.jones@linaro.org> for STMicroelectronics

 Low Power Alarm */

 LPC as WDT */

 Type of watchdog reset - 0: Cold 1: Warm */

 Mask/unmask watchdog reset */

 LPC can either run as a Clocksource or in RTC or WDT mode */

 Init Watchdog timeout with value in DT */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Watchdog driver for Alphascale ASM9260.

 *

 * Copyright (c) 2014 Oleksij Rempel <linux@rempel-privat.de>

 Watchdog Mode register */

 Wake interrupt. Set by HW, can't be cleared. */

 This bit set if timeout reached. Cleared by SW. */

 HW Reset on timeout */

 WD enable */

/*

 * Watchdog Timer Constant register

 * Minimal value is 0xff, the meaning of this value

 * depends on used clock: T = WDCLK * (0xff + 1) * 4

 Watchdog Feed register */

 Watchdog Timer Value register */

 The only way to disable WD is to reset it. */

 init WD if it was not started */

 first pass correct sequence */

	/*

	 * Then write wrong pattern to the feed to trigger reset

	 * ASAP.

 configure AHB clock */

 wdt has internal divider */

 default mode */

	/*

	 * If 'timeout-sec' unspecified in devicetree, assume a 30 second

	 * default, unless the max timeout is less than 30 seconds, then use

	 * the max instead.

		/*

		 * Not all supported platforms specify an interrupt for the

		 * watchdog, so let's make it optional.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for watchdog device controlled through GPIO-line

 *

 * Author: 2013, Alexander Shiyan <shc_work@mail.ru>

 Eternal ping */

 Put GPIO back to tristate */

 Toggle output pin */

 Pulse */

 Disallow values lower than 2 and higher than 65535 ms */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Driver for watchdog aspect of for Zodiac Inflight Innovations RAVE

 * Supervisory Processor(SP) MCU

 *

 * Copyright (C) 2017 Zodiac Inflight Innovation

 *

/**

 * struct rave_sp_wdt_variant - RAVE SP watchdog variant

 *

 * @max_timeout:	Largest possible watchdog timeout setting

 * @min_timeout:	Smallest possible watchdog timeout setting

 *

 * @configure:		Function to send configuration command

 * @restart:		Function to send "restart" command

/**

 * struct rave_sp_wdt - RAVE SP watchdog

 *

 * @wdd:		Underlying watchdog device

 * @sp:			Pointer to parent RAVE SP device

 * @variant:		Device specific variant information

 * @reboot_notifier:	Reboot notifier implementing machine reset

/**

 * rave_sp_wdt_configure - Configure watchdog device

 *

 * @wdd:	Device to configure

 * @on:		Desired state of the watchdog timer (ON/OFF)

 *

 * This function configures two aspects of the watchdog timer:

 *

 *  - Wheither it is ON or OFF

 *  - Its timeout duration

 *

 * with first aspect specified via function argument and second via

 * the value of 'wdd->timeout'.

	/*

	 * Restart handler is called in atomic context which means we

	 * can't communicate to SP via UART. Luckily for use SP will

	 * wait 500ms before actually resetting us, so we ask it to do

	 * so here and let the rest of the system go on wrapping

	 * things up.

	/*

	 * The actual work was done by reboot notifier above. SP

	 * firmware waits 500 ms before issuing reset, so let's hang

	 * here for twice that delay and hopefuly we'd never reach

	 * the return statement.

 sentinel */ }

	/*

	 * We don't know if watchdog is running now. To be sure, let's

	 * start it and depend on watchdog core to ping it

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	Watchdog for the 7101 PMU version found in the ALi M1535 chipsets

 60 sec default timeout */

 internal variables */

 stores the computed timeout */

 Guards the hardware */

 module parameters */

/*

 *	ali_start	-	start watchdog countdown

 *

 *	Starts the timer running providing the timer has a counter

 *	configuration set.

 Mask count */

/*

 *	ali_stop	-	stop the timer countdown

 *

 *	Stop the ALi watchdog countdown

 Mask count to zero (disabled) */

 and for safety mask the reset enable */

/*

 *	ali_keepalive	-	send a keepalive to the watchdog

 *

 *	Send a keepalive to the timer (actually we restart the timer).

/*

 *	ali_settimer	-	compute the timer reload value

 *	@t: time in seconds

 *

 *	Computes the timeout values needed

/*

 *	/dev/watchdog handling

/*

 *	ali_write	-	writes to ALi watchdog

 *	@file: file from VFS

 *	@data: user address of data

 *	@len: length of data

 *	@ppos: pointer to the file offset

 *

 *	Handle a write to the ALi watchdog. Writing to the file pings

 *	the watchdog and resets it. Writing the magic 'V' sequence allows

 *	the next close to turn off the watchdog.

 See if we got the magic character 'V' and reload the timer */

			/* note: just in case someone wrote the

			/* scan to see whether or not we got

 someone wrote to us, we should reload the timer */

/*

 *	ali_ioctl	-	handle watchdog ioctls

 *	@file: VFS file pointer

 *	@cmd: ioctl number

 *	@arg: arguments to the ioctl

 *

 *	Handle the watchdog ioctls supported by the ALi driver. Really

 *	we want an extension to enable irq ack monitoring and the like

/*

 *	ali_open	-	handle open of ali watchdog

 *	@inode: inode from VFS

 *	@file: file from VFS

 *

 *	Open the ALi watchdog device. Ensure only one person opens it

 *	at a time. Also start the watchdog running.

 /dev/watchdog can only be opened once */

 Activate */

/*

 *	ali_release	-	close an ALi watchdog

 *	@inode: inode from VFS

 *	@file: file from VFS

 *

 *	Close the ALi watchdog device. Actual shutdown of the timer

 *	only occurs if the magic sequence has been set.

	/*

	 *      Shut off the timer.

/*

 *	ali_notify_sys	-	System down notifier

 *

 *	Notifier for system down

 Turn the WDT off */

/*

 *	Data for PCI driver interface

 *

 *	This data only exists for exporting the supported

 *	PCI ids via MODULE_DEVICE_TABLE.  We do not actually

 *	register a pci_driver, because someone else might one day

 *	want to register another driver on the same PCI id.

/*

 *	ali_find_watchdog	-	find a 1535 and 7101

 *

 *	Scans the PCI hardware for a 1535 series bridge and matching 7101

 *	watchdog device. This may be overtight but it is better to be safe

 Check for a 1533/1535 series bridge */

 Check for the a 7101 PMU */

	/*

	 *	Initialize the timer bits

 Timer bits */

 Issued events */

 No monitor bits */

/*

 *	Kernel Interfaces

/*

 *	watchdog_init	-	module initialiser

 *

 *	Scan for a suitable watchdog and if so initialize it. Return an error

 *	if we cannot, the error causes the module to unload

 Check whether or not the hardware watchdog is there */

	/* Check that the timeout value is within it's range;

 Calculate the watchdog's timeout */

/*

 *	watchdog_exit	-	module de-initialiser

 *

 *	Called while unloading a successfully installed watchdog module.

 Stop the timer before we leave */

 Deregister */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2011-2013

 *

 * Author: Mathieu Poirier <mathieu.poirier@linaro.org> for ST-Ericsson

 * Author: Jonas Aaberg <jonas.aberg@stericsson.com> for ST-Ericsson

 10 minutes */

 28 bit resolution in ms == 268435.455 s */

 Default to 10 minutes */

 disable auto off on sleep */

 set HW initial value */

/*

 * drivers/watchdog/orion_wdt.c

 *

 * Watchdog driver for Orion/Kirkwood processors

 *

 * Author: Sylver Bruneau <sylver.bruneau@googlemail.com>

 *

 * This file is licensed under  the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 RSTOUT mask register physical address for Orion5x, Kirkwood and Dove */

 Internal registers can be configured at any 1 MiB aligned address */

/*

 * Watchdog timer block registers.

 module parameter (seconds) */

 Setup watchdog input clock */

 Mandatory fallback for proper devicetree backward compatibility */

 Fix the wdt and timer1 clock frequency to 25MHz */

 Reload watchdog duration */

 Set watchdog duration */

 Clear the watchdog expiration bit */

 Enable watchdog timer */

 Enable reset on watchdog */

 Set watchdog duration */

 Clear the watchdog expiration bit */

 Enable watchdog timer */

 Enable reset on watchdog */

 Set watchdog duration */

 Enable watchdog timer */

 Enable reset on watchdog */

 There are some per-SoC quirks to handle */

 Disable reset on watchdog */

 Disable watchdog timer */

 Disable reset on watchdog */

 Disable watchdog timer */

 Disable reset on watchdog */

 Disable watchdog timer */

/*

 * The original devicetree binding for this driver specified only

 * one memory resource, so in order to keep DT backwards compatibility

 * we try to fallback to a hardcoded register address, if the resource

 * is missing from the devicetree.

 Each supported compatible has some RSTOUT register quirk */

 Dedicated RSTOUT register, can be requested. */

 Dedicated RSTOUT register, can be requested. */

 (seconds) */

 Default legacy match */

	/*

	 * Let's make sure the watchdog is fully stopped, unless it's

	 * explicitly enabled. This may be the case if the module was

	 * removed and re-inserted, or if the bootloader explicitly

	 * set a running watchdog before booting the kernel.

 Request the IRQ only after the watchdog is disabled */

		/*

		 * Not all supported platforms specify an interrupt for the

		 * watchdog, so let's make it optional.

 Optional 2nd interrupt for pretimeout */

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Broadcom BCM63xx SoC watchdog driver

 *

 *  Copyright (C) 2007, Miguel Gaio <miguel.gaio@efixo.com>

 *  Copyright (C) 2008, Florian Fainelli <florian@openwrt.org>

 *

 Fclk */

 seconds */

 seconds */

 HW functions */

 In case it was set long ago */

 SPDX-License-Identifier: GPL-2.0+

/*

 * System monitoring driver for DA9052 PMICs.

 *

 * Copyright(c) 2012 Dialog Semiconductor Ltd.

 *

 * Author: Anthony Olech <Anthony.Olech@diasemi.com>

 *

 Seconds */

 Actual time  32.768s so included both 32s and 33s */

 Actual time 65.536s so include both, 65s and 66s */

	/*

	 * Disable the Watchdog timer before setting

	 * new time out.

		/*

		 * To change the timeout, da9052 needs to

		 * be disabled for at least 150 us.

 Set the desired timeout */

	/*

	 * We have a minimum time for watchdog window called TWDMIN. A write

	 * to the watchdog before this elapsed time should cause an error.

 Reset the watchdog timer */

	/*

	 * FIXME: Reset the watchdog core, in general PMIC

	 * is supposed to do this

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Atheros AR71XX/AR724X/AR913X built-in hardware watchdog timer.

 *

 * Copyright (C) 2008-2011 Gabor Juhos <juhosg@openwrt.org>

 * Copyright (C) 2008 Imre Kaloz <kaloz@openwrt.org>

 *

 * This driver was based on: drivers/watchdog/ixp4xx_wdt.c

 *	Author: Deepak Saxena <dsaxena@plexity.net>

 *	Copyright 2004 (c) MontaVista, Software, Inc.

 *

 * which again was based on sa1100 driver,

 *	Copyright (C) 2000 Oleg Drokin <green@crimea.edu>

 seconds */

 no action */

 general purpose interrupt */

 NMI */

 full chip reset */

 flush write */

	/*

	 * Updating the TIMER register requires a few microseconds

	 * on the AR934x SoCs at least. Use a small delay to ensure

	 * that the TIMER register is updated within the hardware

	 * before enabling the watchdog.

 flush write */

 flush write */

 SPDX-License-Identifier: GPL-2.0-only

/* riowd.c - driver for hw watchdog inside Super I/O of RIO

 *

 * Copyright (C) 2001, 2008 David S. Miller (davem@davemloft.net)

/* RIO uses the NatSemi Super I/O power management logical device

 * as its' watchdog.

 *

 * When the watchdog triggers, it asserts a line to the BBC (Boot Bus

 * Controller) of the machine.  The BBC can only be configured to

 * trigger a power-on reset when the signal is asserted.  The BBC

 * can be configured to ignore the signal entirely as well.

 *

 * The only Super I/O device register we care about is at index

 * 0x05 (WDTO_INDEX) which is the watchdog time-out in minutes (1-255).

 * If set to zero, this disables the watchdog.  When set, the system

 * must periodically (before watchdog expires) clear (set to zero) and

 * re-set the watchdog else it will trigger.

 *

 * There are two other indexed watchdog registers inside this Super I/O

 * logical device, but they are unused.  The first, at index 0x06 is

 * the watchdog control and can be used to make the watchdog timer re-set

 * when the PS/2 mouse or serial lines show activity.  The second, at

 * index 0x07 is merely a sampling of the line from the watchdog to the

 * BBC.

 *

 * The watchdog device generates no interrupts.

 in minutes */

 Make miscdev useable right away */

 SPDX-License-Identifier: GPL-2.0

/*

 * MStar WDT driver

 *

 * Copyright (C) 2019 - 2021 Daniel Palmer

 * Copyright (C) 2021 Romain Perier

 *

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 *	ALi M7101 PMU Computer Watchdog Timer driver

 *

 *	Based on w83877f_wdt.c by Scott Jennings <linuxdrivers@oro.net>

 *	and the Cobalt kernel WDT timer driver by Tim Hockin

 *	                                      <thockin@cobaltnet.com>

 *

 *	(c)2002 Steve Hill <steve@navaho.co.uk>

 *

 *  This WDT driver is different from most other Linux WDT

 *  drivers in that the driver will ping the watchdog by itself,

 *  because this particular WDT has a very short timeout (1.6

 *  seconds) and it would be insane to count on any userspace

 *  daemon always getting scheduled within that time frame.

 *

 *  Additions:

 *   Aug 23, 2004 - Added use_gpio module parameter for use on revision a1d PMUs

 *                  found on very old cobalt hardware.

 *                  -- Mike Waychison <michael.waychison@sun.com>

/*

 * We're going to use a 1 second timeout.

/*

 * We must not require too good response from the userspace daemon.

 * Here we require the userspace daemon to send us a heartbeat

 * char to /dev/watchdog every 30 seconds.

 30 sec default timeout */

 in seconds, will be multiplied by HZ to get seconds to wait for a ping */

 Use the pic (for a1d revision alim7101) */

/*

 *	Whack the dog

	/* If we got a heartbeat pulse within the WDT_US_INTERVAL

	 * we agree to ping the WDT

 Ping the WDT (this is actually a disarm/arm sequence) */

 Re-set the timer interval */

/*

 * Utility routines

	/* We must enable before we kick off the timer in case the timer

 Start the timer */

 Stop the timer */

 user land ping */

/*

 * /dev/watchdog handling

 See if we got the magic character 'V' and reload the timer */

			/* note: just in case someone wrote the magic character

 now scan */

 someone wrote to us, we should restart timer */

 Just in case we're already talking to someone... */

 Good, fire up the show */

 wim: shouldn't there be a: del_timer(&timer); */

 arbitrary upper limit */

	/*

	 * Cobalt devices have no way of rebooting themselves other

	 * than getting the watchdog to pull reset, so we restart the

	 * watchdog on reboot with no heartbeat.

 loop until the watchdog fires */

/*

 *	Notifier for system down

/*

 *	The WDT needs to learn about soft shutdowns in order to

 *	turn the timebomb registers off.

 Deregister */

 Set the WDT in the PMU to 1 second */

 arbitrary upper limit */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *      Intel Atom E6xx Watchdog driver

 *

 *      Copyright (C) 2011 Alexander Stein

 *                <alexander.stein@systec-electronic.com>

 10 minutes */

/*

 * This is needed to write to preload and reload registers

 * struct ie6xx_wdt_data.unlock_sequence must be used

 * to prevent sequence interrupts

 Watchdog clock is PCI Clock (33MHz) */

 and the preload value is loaded into [34:15] of the down counter */

	/*

	 * Manual states preload must be one less.

	 * Does not wrap as t is at least 1

 Set ResetMode & Enable prescaler for range 10ms to 10 min */

 Enable the watchdog timer */

 Disable the watchdog timer */

 /sys/kernel/debug/ie6xx_wdt */

 Check boot parameters to verify that their initial values */

 are in range. */

 SPDX-License-Identifier: GPL-2.0+

/*

 * drivers/watchdog/ar7_wdt.c

 *

 * Copyright (C) 2007 Nicolas Thill <nico@openwrt.org>

 * Copyright (c) 2005 Enrik Berkhan <Enrik.Berkhan@akk.org>

 *

 * Some code taken from:

 * National Semiconductor SCx200 Watchdog support

 * Copyright (c) 2001,2002 Christer Weinigel <wingel@nano-system.com>

 *

 XXX currently fixed, allows max margin ~68.72 secs */

 Pointer to the remapped WDT IO space */

 only allow one at a time */

 check for a magic close character */

 SPDX-License-Identifier: GPL-2.0+

/*

 *	SBC8360 Watchdog driver

 *

 *	(c) Copyright 2005 Webcon, Inc.

 *

 *	Based on ib700wdt.c, which is based on advantechwdt.c which is based

 *	on acquirewdt.c which is based on wdt.c.

 *

 *	(c) Copyright 2001 Charles Howes <chowes@vsol.net>

 *

 *	Based on advantechwdt.c which is based on acquirewdt.c which

 *	is based on wdt.c.

 *

 *	(c) Copyright 2000-2001 Marek Michalkiewicz <marekm@linux.org.pl>

 *

 *	Based on acquirewdt.c which is based on wdt.c.

 *	Original copyright messages:

 *

 *	(c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *						All Rights Reserved.

 *

 *	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide

 *	warranty for any of this software. This material is provided

 *	"AS-IS" and at no charge.

 *

 *	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>

 *

 *	14-Dec-2001 Matt Domsch <Matt_Domsch@dell.com>

 *	     Added nowayout module option to override CONFIG_WATCHDOG_NOWAYOUT

 *	     Added timeout module option to override default

 *

/*

 *

 * Watchdog Timer Configuration

 *

 * The function of the watchdog timer is to reset the system automatically

 * and is defined at I/O port 0120H and 0121H.  To enable the watchdog timer

 * and allow the system to reset, write appropriate values from the table

 * below to I/O port 0120H and 0121H.  To disable the timer, write a zero

 * value to I/O port 0121H for the system to stop the watchdog function.

 *

 * The following describes how the timer should be programmed (according to

 * the vendor documentation)

 *

 * Enabling Watchdog:

 * MOV AX,000AH (enable, phase I)

 * MOV DX,0120H

 * OUT DX,AX

 * MOV AX,000BH (enable, phase II)

 * MOV DX,0120H

 * OUT DX,AX

 * MOV AX,000nH (set multiplier n, from 1-4)

 * MOV DX,0120H

 * OUT DX,AX

 * MOV AX,000mH (set base timer m, from 0-F)

 * MOV DX,0121H

 * OUT DX,AX

 *

 * Reset timer:

 * MOV AX,000mH (same as set base timer, above)

 * MOV DX,0121H

 * OUT DX,AX

 *

 * Disabling Watchdog:

 * MOV AX,0000H (a zero value)

 * MOV DX,0120H

 * OUT DX,AX

 *

 * Watchdog timeout configuration values:

 *		N

 *	M |	1	2	3	4

 *	--|----------------------------------

 *	0 |	0.5s	5s	50s	100s

 *	1 |	1s	10s	100s	200s

 *	2 |	1.5s	15s	150s	300s

 *	3 |	2s	20s	200s	400s

 *	4 |	2.5s	25s	250s	500s

 *	5 |	3s	30s	300s	600s

 *	6 |	3.5s	35s	350s	700s

 *	7 |	4s	40s	400s	800s

 *	8 |	4.5s	45s	450s	900s

 *	9 |	5s	50s	500s	1000s

 *	A |	5.5s	55s	550s	1100s

 *	B |	6s	60s	600s	1200s

 *	C |	6.5s	65s	650s	1300s

 *	D |	7s	70s	700s	1400s

 *	E |	7.5s	75s	750s	1500s

 *	F |	8s	80s	800s	1600s

 *

 * Another way to say the same things is:

 *  For N=1, Timeout = (M+1) * 0.5s

 *  For N=2, Timeout = (M+1) * 5s

 *  For N=3, Timeout = (M+1) * 50s

 *  For N=4, Timeout = (M+1) * 100s

 *

 0  = 0.5s */

 1  = 1s   */

 2  = 1.5s */

 3  = 2s   */

 4  = 2.5s */

 5  = 3s   */

 6  = 3.5s */

 7  = 4s   */

 8  = 4.5s */

 9  = 5s   */

 10 = 5.5s */

 11 = 6s   */

 12 = 6.5s */

 13 = 7s   */

 14 = 7.5s */

 15 = 8s   */

 16 = 5s  */

 17 = 10s */

 18 = 15s */

 19 = 20s */

 20 = 25s */

 21 = 30s */

 22 = 35s */

 23 = 40s */

 24 = 45s */

 25 = 50s */

 26 = 55s */

 27 = 60s */

 28 = 65s */

 29 = 70s */

 30 = 75s */

 31 = 80s */

 32 = 50s  */

 33 = 100s */

 34 = 150s */

 35 = 200s */

 36 = 250s */

 37 = 300s */

 38 = 350s */

 39 = 400s */

 40 = 450s */

 41 = 500s */

 42 = 550s */

 43 = 600s */

 44 = 650s */

 45 = 700s */

 46 = 750s */

 47 = 800s */

 48 = 100s */

 49 = 200s */

 50 = 300s */

 51 = 400s */

 52 = 500s */

 53 = 600s */

 54 = 700s */

 55 = 800s */

 56 = 900s */

 57 = 1000s */

 58 = 1100s */

 59 = 1200s */

 60 = 1300s */

 61 = 1400s */

 62 = 1500s */

 63 = 1600s */

/*

 *	Kernel methods.

 Activate and pre-configure watchdog */

 Enable the watchdog */

 Set timeout multiplier */

 Nothing happens until first sbc8360_ping() */

 Kernel pings watchdog */

 Write the base timer register */

 stop watchdog */

 De-activate the watchdog */

 Userspace pings kernel driver, or requests clean close */

 In case it was set long ago */

 Activate and ping once to start the countdown */

/*

 *	Notifier for system down

 Disable the SBC8360 Watchdog */

/*

 *	Kernel Interfaces

/*

 *	The SBC8360 needs to learn about soft shutdowns in order to

 *	turn the timebomb registers off.

 My kingdom for the ability to print "0.5 seconds" in the kernel! */

 end of sbc8360.c */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	IT8712F "Smart Guardian" Watchdog support

 *

 *	Copyright (c) 2006-2007 Jorge Boncompte - DTI2 <jorge@dti2.net>

 *

 *	Based on info and code taken from:

 *

 *	drivers/char/watchdog/scx200_wdt.c

 *	drivers/hwmon/it87.c

 *	IT8712F EC-LPC I/O Preliminary Specification 0.8.2

 *	IT8712F EC-LPC I/O Preliminary Specification 0.9.3

 *

 *	The author(s) of this software shall not be held liable for damages

 *	of any nature resulting due to the use of this software. This

 *	software is provided AS-IS with no warranties.

 in seconds */

 Dog Food address - We use the game port address */

 The register to read/write */

 The value to read/write */

 Register: Logical device select */

 Register: Device ID */

 Register: Device Revision */

 LDN Register: Activation */

 LDN Register: Base address */

 GPIO and Watch Dog Timer */

 Game Port */

 WDT Register: Control */

 WDT Register: Configuration */

 WDT Register: Timeout Value */

 Reset timer on read or write to game port */

 Reset timer on keyboard interrupt */

 Reset timer on mouse interrupt */

 Reset timer on consumer IR interrupt */

 If 0 in MINUTES */

 Pulse PWROK on timeout */

 Pulse reset on timeout */

	/*

	 * Try to reserve REG and REG + 1 for exclusive access.

	/* Switch to minutes precision if the configured margin

	 * value does not fit within the register width.

 else UNIT is MINUTES */

 check for a magic close character */

 only allow one at a time */

 Later revisions have 16-bit values per datasheet 0.9.1 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * txx9wdt: A Hardware Watchdog Driver for TXx9 SoCs

 *

 * Copyright (C) 2007 Atsushi Nemoto <anemo@mba.ocn.ne.jp>

 1/256 */

 Default is 60 seconds */

 in seconds */

 clear pending interrupt */

/*

 * Watchdog driver for TS-4800 based boards

 *

 * Copyright (c) 2015 - Savoir-faire Linux

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 possible feed values */

/*

 * TS-4800 supports the following timeout values:

 *

 *   value desc

 *   ---------------------

 *     0    feed for 338ms

 *     1    feed for 2.706s

 *     2    feed for 10.824s

 *     3    disable watchdog

 *

 * Keep the regmap/timeout map ordered by timeout

 allocate memory for watchdog struct */

 set regmap and offset to know where to write */

 Initialize struct watchdog_device */

	/*

	 * As this watchdog supports only a few values, ts4800_wdt_set_timeout

	 * must be called to initialize timeout and feed_val with valid values.

	 * Default to maximum timeout if none, or an invalid one, is provided in

	 * device tree.

	/*

	 * The feed register is write-only, so it is not possible to determine

	 * watchdog's state. Disable it to be in a known state.

 SPDX-License-Identifier: GPL-2.0+

/*

 *  Watchdog driver for Broadcom BCM47XX

 *

 *  Copyright (C) 2008 Aleksandar Radovanovic <biblbroks@sezampro.rs>

 *  Copyright (C) 2009 Matthieu CASTET <castet.matthieu@free.fr>

 *  Copyright (C) 2012-2013 Hauke Mehrtens <hauke@hauke-m.de>

 *

 seconds */

 seconds */

 seconds */

 SPDX-License-Identifier: GPL-2.0

/*

 * Watchdog timer driver for the WinSystems EBC-C384

 * Copyright (C) 2016 William Breathitt Gray

/*

 * The timeout value in minutes must fit in a single byte when sent to the

 * watchdog timer; the maximum timeout possible is 15300 (255 * 60) seconds.

 resolution is in minutes for timeouts greater than 255 seconds */

 resolution is in minutes for timeouts greater than 255 seconds */

 round second resolution up to minute granularity */

 set watchdog timer for minutes */

 set watchdog timer for seconds */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Maxim MAX77620 Watchdog Driver

 *

 * Copyright (C) 2016 NVIDIA CORPORATION. All rights reserved.

 *

 * Author: Laxman Dewangan <ldewangan@nvidia.com>

 Enable WD_RST_WK - WDT expire results in a restart */

 Set WDT clear in OFF and sleep mode */

 Check if WDT running and if yes then set flags properly */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * sl28cpld watchdog driver

 *

 * Copyright 2020 Kontron Europe GmbH

/*

 * Watchdog timer block registers.

 initialize struct watchdog_device */

	/*

	 * Read the status early, in case of an error, we haven't modified the

	 * hardware.

	/*

	 * Initial timeout value, may be overwritten by device tree or module

	 * parameter in watchdog_init_timeout().

	 *

	 * Reading a zero here means that either the hardware has a default

	 * value of zero (which is very unlikely and definitely a hardware

	 * bug) or the bootloader set it to zero. In any case, we handle

	 * this case gracefully and set out own timeout.

 if the watchdog is locked, we set nowayout */

	/*

	 * If watchdog is already running, keep it enabled, but make

	 * sure its mode is set correctly.

 SPDX-License-Identifier: GPL-2.0-or-later

/***************************************************************************

 *   Copyright (C) 2006 by Hans Edgington <hans@edgington.nl>              *

 *   Copyright (C) 2007-2009 Hans de Goede <hdegoede@redhat.com>           *

 *   Copyright (C) 2010 Giel van Schijndel <me@mortis.eu>                  *

 *                                                                         *

 Watchdog timer logical device */

 Key to enable Super-I/O */

 Key to disable Super-I/O */

 Logical device select */

 Device ID (2 bytes) */

 Device revision */

 Fintek ID (2 bytes) */

 Clock select */

 ROM address select */

 F81866 Multi-Function Register */

 TSI Level select */

 Multi function select 1 */

 Multi function select 2 */

 Multi function select 3 */

 F81866 GPIO1 Enable Register */

 Logical device enable */

 Logical device address (2 bytes) */

 Manufacturers ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Chipset ID */

 Default values */

 1 minute default timeout */

#define WATCHDOG_PULSE_WIDTH	125	/* 125 ms, default pulse width for

#define WATCHDOG_F71862FG_PIN	63	/* default watchdog reset output

 default timeout in seconds */

 Super-I/O Function prototypes */

 content for the wd_time register */

 pulse width flag */

 enable pulse output mode? */

 Super I/O functions */

 Don't step on other drivers' I/O space by accident */

 according to the datasheet the key must be sent twice! */

 select minutes for timer units */

 select seconds for timer units */

 Set timer value */

 Make sure we don't die as soon as the watchdog is enabled below */

 Watchdog pin configuration */

 Set pin 21 to GPIO23/WDTRST#, then to WDTRST# */

 SPI must be disabled first to use this pin! */

 GPIO14 --> WDTRST# */

 Set pin 56 to WDTRST# */

 set pin 40 to WDTRST# */

 Enable TSI Level register bank */

 Set pin 27 to WDTRST# */

 Set pin 70 to WDTRST# */

		/*

		 * GPIO1 Control Register when 27h BIT3:2 = 01 & BIT0 = 0.

		 * The PIN 70(GPIO15/WDTRST) is controlled by 2Ch:

		 *     BIT5: 0 -> WDTRST#

		 *           1 -> GPIO15

		/*

		 * 'default' label to shut up the compiler and catch

		 * programmer errors

 Select "pulse" output mode with given duration */

 Set WD_PSWIDTH bits (1:0) */

 Set WD_PULSE to "pulse" mode */

 Select "level" output mode */

	/*

	 * We don't want WDTMOUT_STS to stick around till regular reboot.

	 * Write 1 to the bit to clear it to zero.

	/*

	 * WATCHDOG_HANDLE_BOOT_ENABLED can result in keepalive being directly

	 * called without a set_timeout before, so it needs to be done here

	 * unconditionally.

 Confirmed (by datasheet) not to have a watchdog. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	National Semiconductor PC87307/PC97307 (ala SC1200) WDT driver

 *	(c) Copyright 2002 Zwane Mwaikambo <zwane@commfireservices.com>,

 *			All Rights Reserved.

 *	Based on wdt.c and wdt977.c by Alan Cox and Woody Suwalski respectively.

 *

 *	The author(s) of this software shall not be held liable for damages

 *	of any nature resulting due to the use of this software. This

 *	software is provided AS-IS with no warranties.

 *

 *	Changelog:

 *	20020220 Zwane Mwaikambo	Code based on datasheet, no hardware.

 *	20020221 Zwane Mwaikambo	Cleanups as suggested by Jeff Garzik

 *					and Alan Cox.

 *	20020222 Zwane Mwaikambo	Added probing.

 *	20020225 Zwane Mwaikambo	Added ISAPNP support.

 *	20020412 Rob Radez		Broke out start/stop functions

 *		 <rob@osinvestor.com>	Return proper status instead of

 *					temperature warning

 *					Add WDIOC_GETBOOTSTATUS and

 *					WDIOC_SETOPTIONS ioctls

 *					Fix CONFIG_WATCHDOG_NOWAYOUT

 *	20020530 Joel Becker		Add Matt Domsch's nowayout module

 *					option

 *	20030116 Adam Belay		Updated to the latest pnp code

 255 minutes */

 Power Management Index Register */

 Power Management Data Register */

 Data Register indexes */

 Function enable register 1 */

 Function enable register 2 */

 Power Management Ctrl 1 */

 Power Management Ctrl 2 */

 Power Management Ctrl 3 */

 Watchdog timeout register */

 Watchdog config register */

 Watchdog status register */

 WDCF bitfields - which devices assert WDO */

 Keyboard Controller */

 Mouse */

 Serial0 */

 Serial1 */

 5 -7 are reserved */

 for non plug and play */

 io port access serialisation */

 Read from Data Register */

 Write to Data Register */

 assert WDO when any of the following interrupts are triggered too */

 set the timeout and get the ball rolling */

 This returns the status of the WDO signal, inactive high. */

	/* If the bit is inactive, the watchdog is enabled, so return

	 * KEEPALIVEPING which is a bit of a kludge because there's nothing

	 * else for enabled/disabled status

 allow one at a time */

 the API states this is given in secs */

 and return the new timeout */

	/* The probe works by reading the PMC3 register's default value of 0x0e

	 * there is one caveat, if the device disables the parallel port or any

	 * of the UARTs we won't be able to detect it.

	 * NB. This could be done with accuracy by reading the SID registers,

	 * but we don't have access to those io regions.

 we don't want the UART busy bits */

 National Semiconductor PC87307/PC97307 watchdog component */

 this driver only supports one card at a time */

 CONFIG_PNP */

	/* now that the user has specified an IO port and we haven't detected

 ret = 0 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	sp5100_tco :	TCO timer driver for sp5100 chipsets

 *

 *	(c) Copyright 2009 Google Inc., All Rights Reserved.

 *

 *	Based on i8xx_tco.c:

 *	(c) Copyright 2000 kernel concepts <nils@kernelconcepts.de>, All Rights

 *	Reserved.

 *				https://www.kernelconcepts.de

 *

 *	See AMD Publication 43009 "AMD SB700/710/750 Register Reference Guide",

 *	    AMD Publication 44413 "AMD SP5100 Register Reference Guide"

 *	    AMD Publication 45482 "AMD SB800-Series Southbridges Register

 *	                                                      Reference Guide"

 *	    AMD Publication 48751 "BIOS and Kernel Developer’s Guide (BKDG)

 *				for AMD Family 16h Models 00h-0Fh Processors"

 *	    AMD Publication 51192 "AMD Bolton FCH Register Reference Guide"

 *	    AMD Publication 52740 "BIOS and Kernel Developer’s Guide (BKDG)

 *				for AMD Family 16h Models 30h-3Fh Processors"

 *	    AMD Publication 55570-B1-PUB "Processor Programming Reference (PPR)

 *				for AMD Family 17h Model 18h, Revision B1

 *				Processors (PUB)

 *	    AMD Publication 55772-A1-PUB "Processor Programming Reference (PPR)

 *				for AMD Family 17h Model 20h, Revision A1

 *				Processors (PUB)

/*

 *	Includes, defines, variables, module parameters, ...

 internal variables */

 the watchdog platform device */

 the associated PCI device */

 module parameters */

 60 sec default heartbeat. */

 in seconds */

/*

 * Some TCO specific functions

 Write new heartbeat to watchdog */

 For SB800 or later */

 Set the Watchdog timer resolution to 1 sec */

 Enable watchdog decode bit and watchdog timer */

 For SP5100 or SB7x0 */

 Enable watchdog decode bit */

 Enable Watchdog timer and set the resolution to 1 sec */

 Set the Watchdog timer resolution to 1 sec and enable */

 Request the IO ports used by this driver */

	/*

	 * Determine type of southbridge chipset.

		/*

		 * On Family 17h devices, the EFCH_PM_DECODEEN_WDT_TMREN bit of

		 * EFCH_PM_DECODEEN not only enables the EFCH_PM_WDT_ADDR memory

		 * region, it also enables the watchdog itself.

 Check MMIO address conflict */

			/*

			 * Secondly, Find the watchdog timer MMIO address

			 * from SBResource_MMIO register.

 Read SBResource_MMIO from PCI config(PCI_Reg: 9Ch) */

 Read SBResource_MMIO from AcpiMmioEn(PM_Reg: 24h) */

 Setup the watchdog timer */

	/*

	 * Save WatchDogFired status, because WatchDogFired flag is

	 * cleared here.

 Set watchdog action to reset the system */

 Set a reasonable heartbeat before we stop the timer */

	/*

	 * Stop the TCO before we change anything so we don't race with

	 * a zeroed timer.

 Show module parameters */

/*

 * Data for PCI driver interface

 *

 * This data only exists for exporting the supported

 * PCI ids via MODULE_DEVICE_TABLE.  We do not actually

 * register a pci_driver, because someone else might

 * want to register another driver on the same PCI id.

 End of list */

 Match the PCI device */

 SPDX-License-Identifier: GPL-2.0+

/*

 *	Advantech Single Board Computer WDT driver

 *

 *	(c) Copyright 2000-2001 Marek Michalkiewicz <marekm@linux.org.pl>

 *

 *	Based on acquirewdt.c which is based on wdt.c.

 *	Original copyright messages:

 *

 *	(c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *						All Rights Reserved.

 *

 *	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide

 *	warranty for any of this software. This material is provided

 *	"AS-IS" and at no charge.

 *

 *	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>

 *

 *	14-Dec-2001 Matt Domsch <Matt_Domsch@dell.com>

 *	    Added nowayout module option to override CONFIG_WATCHDOG_NOWAYOUT

 *

 *	16-Oct-2002 Rob Radez <rob@osinvestor.com>

 *	    Clean up ioctls, clean up init + exit, add expect close support,

 *	    add wdt_start and wdt_stop as parameters.

 60 sec default timeout */

 the watchdog platform device */

/*

 *	You must set these - there is no sane way to probe for this board.

 *

 *	To enable or restart, write the timeout value in seconds (1 to 63)

 *	to I/O port wdt_start.  To disable, read I/O port wdt_stop.

 *	Both are 0x443 for most boards (tested on a PCA-6276VE-00B1), but

 *	check your manual (at least the PCA-6159 seems to be different -

 *	the manual says wdt_stop is 0x43, not 0x443).

 *	(0x43 is also a write-only control register for the 8254 timer!)

 in seconds */

/*

 *	Watchdog Operations

 Write a watchdog value */

/*

 *	/dev/watchdog handling

	/*

	 *	Activate

/*

 *	Kernel Interfaces

/*

 *	Init & exit routines

	/* Check that the heartbeat value is within it's range ;

 Turn the WDT off if we have a soft shutdown */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	AMD Elan SC520 processor Watchdog Timer driver

 *

 *	Based on acquirewdt.c by Alan Cox,

 *	     and sbc60xxwdt.c by Jakob Oestergaard <jakob@unthought.net>

 *

 *	The authors do NOT admit liability nor provide warranty for

 *	any of this software. This material is provided "AS-IS" in

 *	the hope that it may be useful for others.

 *

 *	(c) Copyright 2001    Scott Jennings <linuxdrivers@oro.net>

 *           9/27 - 2001      [Initial release]

 *

 *	Additional fixes Alan Cox

 *	-	Fixed formatting

 *	-	Removed debug printks

 *	-	Fixed SMP built kernel deadlock

 *	-	Switched to private locks not lock_kernel

 *	-	Used ioremap/writew/readw

 *	-	Added NOWAYOUT support

 *	4/12 - 2002 Changes by Rob Radez <rob@osinvestor.com>

 *	-	Change comments

 *	-	Eliminate fop_llseek

 *	-	Change CONFIG_WATCHDOG_NOWAYOUT semantics

 *	-	Add KERN_* tags to printks

 *	-	fix possible wdt_is_open race

 *	-	Report proper capabilities in watchdog_info

 *	-	Add WDIOC_{GETSTATUS, GETBOOTSTATUS, SETTIMEOUT,

 *		GETTIMEOUT, SETOPTIONS} ioctls

 *	09/8 - 2003 Changes by Wim Van Sebroeck <wim@iguana.be>

 *	-	cleanup of trailing spaces

 *	-	added extra printk's for startup problems

 *	-	use module_param

 *	-	made timeout (the emulated heartbeat) a module_param

 *	-	made the keepalive ping an internal subroutine

 *	3/27 - 2004 Changes by Sean Young <sean@mess.org>

 *	-	set MMCR_BASE to 0xfffef000

 *	-	CBAR does not need to be read

 *	-	removed debugging printks

 *

 *  This WDT driver is different from most other Linux WDT

 *  drivers in that the driver will ping the watchdog by itself,

 *  because this particular WDT has a very short timeout (1.6

 *  seconds) and it would be insane to count on any userspace

 *  daemon always getting scheduled within that time frame.

 *

 *  This driver uses memory mapped IO, and spinlock.

/*

 * The AMD Elan SC520 timeout value is 492us times a power of 2 (0-7)

 *

 *   0: 492us    2: 1.01s    4: 4.03s   6: 16.22s

 *   1: 503ms    3: 2.01s    5: 8.05s   7: 32.21s

 *

 * We will program the SC520 watchdog for a timeout of 2.01s.

 * If we reset the watchdog every ~250ms we should be safe.

/*

 * We must not require too good response from the userspace daemon.

 * Here we require the userspace daemon to send us a heartbeat

 * char to /dev/watchdog every 30 seconds.

 30 sec default timeout */

 in seconds, will be multiplied by HZ to get seconds to wait for a ping */

/*

 * AMD Elan SC520 - Watchdog Timer Registers

 The default base address */

 Watchdog Timer Control Register */

 WDT Control Register bit definitions */

 [01] Time-out = 496 us (with 33 Mhz clk). */

 [02] Time-out = 508 ms (with 33 Mhz clk). */

 [03] Time-out = 1.02 s (with 33 Mhz clk). */

 [04] Time-out = 2.03 s (with 33 Mhz clk). */

 [05] Time-out = 4.07 s (with 33 Mhz clk). */

 [06] Time-out = 8.13 s (with 33 Mhz clk). */

 [07] Time-out = 16.27s (with 33 Mhz clk). */

 [08] Time-out = 32.54s (with 33 Mhz clk). */

 [12] Interrupt Request Flag */

 [14] Watchdog Timer Reset Enable */

 [15] Watchdog Timer Enable */

/*

 *	Whack the dog

	/* If we got a heartbeat pulse within the WDT_US_INTERVAL

	 * we agree to ping the WDT

 Ping the WDT */

 Re-set the timer interval */

/*

 *	Utility routines

 buy some time (ping) */

 ensure write synchronization */

 unlock WDT = make WDT configuration register writable one time */

 write WDT configuration register */

 Start the timer */

 Start the watchdog */

 Stop the timer */

 Stop the watchdog */

 user land ping */

 arbitrary upper limit */

/*

 *	/dev/watchdog handling

 See if we got the magic character 'V' and reload the timer */

			/* note: just in case someone wrote the magic character

 now scan */

		/* Well, anyhow someone wrote to us, we should

 Just in case we're already talking to someone... */

 Good, fire up the show */

/*

 *	Notifier for system down

/*

 *	The WDT needs to learn about soft shutdowns in order to

 *	turn the timebomb registers off.

 Deregister */

	/* Check that the timeout value is within it's range ;

 SPDX-License-Identifier: GPL-2.0+

/*

 * Watchdog driver for Conexant Digicolor

 *

 * Copyright (C) 2015 Paradox Innovation Ltd.

 *

 wait for reset to assert... */

 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause

/*

 * Copyright (c) 2016 BayLibre, SAS.

 * Author: Neil Armstrong <narmstrong@baylibre.com>

 *

 seconds */

 sentinel */ },

 Setup with 1ms timebase */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Watchdog driver for Faraday Technology FTWDT010

 *

 * Copyright (C) 2017 Linus Walleij <linus.walleij@linaro.org>

 *

 * Inspired by the out-of-tree drivers from OpenWRT:

 * Copyright (C) 2009 Paulius Zaleckas <paulius.zaleckas@teltonika.lt>

 5 MHz */

 set clock before enabling */

	/*

	 * If 'timeout-sec' unspecified in devicetree, assume a 13 second

	 * default.

 Watchdog was enabled by the bootloader, disable it. */

 Set up platform driver data */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *      sunxi Watchdog Driver

 *

 *      Copyright (c) 2013 Carlo Caione

 *                    2012 Henrik Nordstrom

 *

 *      Based on xen_wdt.c

 *      (c) Copyright 2010 Novell, Inc.

/*

 * This structure stores the register offsets for different variants

 * of Allwinner's watchdog hardware.

/*

 * wdt_timeout_map maps the watchdog timer interval value in seconds to

 * the value of the register WDT_MODE at bits .wdt_timeout_shift ~ +3

 *

 * [timeout seconds] = register value

 *

 1s  */

 2s  */

 3s  */

 4s  */

 5s  */

 6s  */

 8s  */

 10s */

 12s */

 14s */

 16s */

 Set system reset function */

 Set lowest timeout and enable watchdog */

	/*

	 * Restart the watchdog. The default (and lowest) interval

	 * value for the watchdog is 0.5s.

 Set system reset function */

 Enable watchdog */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 *      intel-mid_wdt: generic Intel MID SCU watchdog driver

 *

 *      Platforms supported so far:

 *      - Merrifield only

 *

 *      Copyright (C) 2014 Intel Corporation. All rights reserved.

 *      Contact: David Cohen <david.a.cohen@linux.intel.com>

 SCU watchdog messages */

	/*

	 * SCU expects the input size for watchdog IPC to be 2 which is the

	 * size of the structure in dwords. SCU IPC normally takes bytes

	 * but this is a special case where we specify size to be different

	 * than inlen.

 This code should not be reached */

	/*

	 * The firmware followed by U-Boot leaves the watchdog running

	 * with the default threshold which may vary. When we get here

	 * we should make a decision to prevent any side effects before

	 * user space daemon will take care of it. The best option,

	 * taking into consideration that there is no way to read values

	 * back from hardware, is to enforce watchdog being run with

	 * deterministic values.

 Make sure the watchdog is serviced */

 SPDX-License-Identifier: GPL-2.0

/*

 * Watchdog driver for the MEN z069 IP-Core

 *

 * Copyright (C) 2018 Johannes Thumshirn <jth@kernel.org>

 500 Hz */

 The watchdog trigger value toggles between 0x5555 and 0xaaaa */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2015-2016 Mentor Graphics

/**

 * pretimeout_panic - Panic on watchdog pretimeout event

 * @wdd - watchdog_device

 *

 * Panic, watchdog has not been fed till pretimeout event.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * FIXME: add wdrtas_get_status and wdrtas_get_boot_status as soon as

 * RTAS calls are available

/*

 * RTAS watchdog driver

 *

 * (C) Copyright IBM Corp. 2005

 * device driver to exploit watchdog RTAS functions

 *

 * Authors : Utz Bacher <utz.bacher@de.ibm.com>

** watchdog access functions */

/**

 * wdrtas_set_interval - sets the watchdog interval

 * @interval: new interval

 *

 * returns 0 on success, <0 on failures

 *

 * wdrtas_set_interval sets the watchdog keepalive interval by calling the

 * RTAS function set-indicator (surveillance). The unit of interval is

 * seconds.

 rtas uses minutes */

/**

 * wdrtas_get_interval - returns the current watchdog interval

 * @fallback_value: value (in seconds) to use, if the RTAS call fails

 *

 * returns the interval

 *

 * wdrtas_get_interval returns the current watchdog keepalive interval

 * as reported by the RTAS function ibm,get-system-parameter. The unit

 * of the return value is seconds.

 rtas uses minutes */

/**

 * wdrtas_timer_start - starts watchdog

 *

 * wdrtas_timer_start starts the watchdog by calling the RTAS function

 * set-interval (surveillance)

/**

 * wdrtas_timer_stop - stops watchdog

 *

 * wdrtas_timer_stop stops the watchdog timer by calling the RTAS function

 * set-interval (surveillance)

/**

 * wdrtas_timer_keepalive - resets watchdog timer to keep system alive

 *

 * wdrtas_timer_keepalive restarts the watchdog timer by calling the

 * RTAS function event-scan and repeats these calls as long as there are

 * events available. All events will be dumped.

/**

 * wdrtas_get_temperature - returns current temperature

 *

 * returns temperature or <0 on failures

 *

 * wdrtas_get_temperature returns the current temperature in Fahrenheit. It

 * uses the RTAS call get-sensor-state, token 3 to do so

 fahrenheit */

/**

 * wdrtas_get_status - returns the status of the watchdog

 *

 * returns a bitmask of defines WDIOF_... as defined in

 * include/linux/watchdog.h

 TODO */

/**

 * wdrtas_get_boot_status - returns the reason for the last boot

 *

 * returns a bitmask of defines WDIOF_... as defined in

 * include/linux/watchdog.h, indicating why the watchdog rebooted the system

 TODO */

** watchdog API and operations stuff */

/* wdrtas_write - called when watchdog device is written to

 * @file: file structure

 * @buf: user buffer with data

 * @len: amount to data written

 * @ppos: position in file

 *

 * returns the number of successfully processed characters, which is always

 * the number of bytes passed to this function

 *

 * wdrtas_write processes all the data given to it and looks for the magic

 * character 'V'. This character allows the watchdog device to be closed

 * properly.

 look for 'V' */

 allow to close device */

/**

 * wdrtas_ioctl - ioctl function for the watchdog device

 * @file: file structure

 * @cmd: command for ioctl

 * @arg: argument pointer

 *

 * returns 0 on success, <0 on failure

 *

 * wdrtas_ioctl implements the watchdog API ioctls

		/* not implemented. Done by H8

		if (i & WDIOS_TEMPPANIC) {

/**

 * wdrtas_open - open function of watchdog device

 * @inode: inode structure

 * @file: file structure

 *

 * returns 0 on success, -EBUSY if the file has been opened already, <0 on

 * other failures

 *

 * function called when watchdog device is opened

 only open once */

/**

 * wdrtas_close - close function of watchdog device

 * @inode: inode structure

 * @file: file structure

 *

 * returns 0 on success

 *

 * close function. Always succeeds

 only stop watchdog, if this was announced using 'V' before */

/**

 * wdrtas_temp_read - gives back the temperature in fahrenheit

 * @file: file structure

 * @buf: user buffer

 * @count: number of bytes to be read

 * @ppos: position in file

 *

 * returns always 1 or -EFAULT in case of user space copy failures, <0 on

 * other failures

 *

 * wdrtas_temp_read gives the temperature to the users by copying this

 * value as one byte into the user space buffer. The unit is Fahrenheit...

/**

 * wdrtas_temp_open - open function of temperature device

 * @inode: inode structure

 * @file: file structure

 *

 * returns 0 on success, <0 on failure

 *

 * function called when temperature device is opened

/**

 * wdrtas_temp_close - close function of temperature device

 * @inode: inode structure

 * @file: file structure

 *

 * returns 0 on success

 *

 * close function. Always succeeds

/**

 * wdrtas_reboot - reboot notifier function

 * @nb: notifier block structure

 * @code: reboot code

 * @ptr: unused

 *

 * returns NOTIFY_DONE

 *

 * wdrtas_reboot stops the watchdog in case of a reboot

** initialization stuff */

/**

 * wdrtas_get_tokens - reads in RTAS tokens

 *

 * returns 0 on success, <0 on failure

 *

 * wdrtas_get_tokens reads in the tokens for the RTAS calls used in

 * this watchdog driver. It tolerates, if "get-sensor-state" and

 * "ibm,get-system-parameter" are not available.

/**

 * wdrtas_unregister_devs - unregisters the misc dev handlers

 *

 * wdrtas_register_devs unregisters the watchdog and temperature watchdog

 * misc devs

/**

 * wdrtas_register_devs - registers the misc dev handlers

 *

 * returns 0 on success, <0 on failure

 *

 * wdrtas_register_devs registers the watchdog and temperature watchdog

 * misc devs

/**

 * wdrtas_init - init function of the watchdog driver

 *

 * returns 0 on success, <0 on failure

 *

 * registers the file handlers and the reboot notifier

/**

 * wdrtas_exit - exit function of the watchdog driver

 *

 * unregisters the file handlers and the reboot notifier

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (c) 2014, The Linux Foundation. All rights reserved.

	/*

	 * Trigger watchdog bite:

	 *    Setup BITE_TIME to be 128ms, and enable WDT.

	/*

	 * Actually make sure the above sequence hits hardware before sleeping.

 We use CPU0's DGT for the watchdog */

	/*

	 * We use the clock rate to calculate the max timeout, so ensure it's

	 * not zero to avoid a divide-by-zero exception.

	 *

	 * WATCHDOG_CORE assumes units of seconds, if the WDT is clocked such

	 * that it would bite before a second elapses it's usefulness is

	 * limited.  Bail if this is the case.

 check if there is pretimeout support */

	/*

	 * If 'timeout-sec' unspecified in devicetree, assume a 30 second

	 * default, unless the max timeout is less than 30 seconds, then use

	 * the max instead.

	/*

	 * If WDT is already running, call WDT start which

	 * will stop the WDT, set timeouts as bootloader

	 * might use different ones and set running bit

	 * to inform the WDT subsystem to ping the WDT

/*

 * Watchdog driver for SiByte SB1 SoCs

 *

 * Copyright (C) 2007 OnStor, Inc. * Andrew Sharp <andy.sharp@lsi.com>

 *

 * This driver is intended to make the second of two hardware watchdogs

 * on the Sibyte 12XX and 11XX SoCs available to the user.  There are two

 * such devices available on the SoC, but it seems that there isn't an

 * enumeration class for watchdogs in Linux like there is for RTCs.

 * The second is used rather than the first because it uses IRQ 1,

 * thereby avoiding all that IRQ 0 problematic nonsense.

 *

 * I have not tried this driver on a 1480 processor; it might work

 * just well enough to really screw things up.

 *

 * It is a simple timer, and there is an interrupt that is raised the

 * first time the timer expires.  The second time it expires, the chip

 * is reset and there is no way to redirect that NMI.  Which could

 * be problematic in some cases where this chip is sitting on the HT

 * bus and has just taken responsibility for providing a cache block.

 * Since the reset can't be redirected to the external reset pin, it is

 * possible that other HT connected processors might hang and not reset.

 * For Linux, a soft reset would probably be even worse than a hard reset.

 * There you have it.

 *

 * The timer takes 23 bits of a 64 bit register (?) as a count value,

 * and decrements the count every microsecond, for a max value of

 * 0x7fffff usec or about 8.3ish seconds.

 *

 * This watchdog borrows some user semantics from the softdog driver,

 * in that if you close the fd, it leaves the watchdog running, unless

 * you previously wrote a 'V' to the fd, in which case it disables

 * the watchdog when you close the fd like some other drivers.

 *

 * Based on various other watchdog drivers, which are probably all

 * loosely based on something Alan Cox wrote years ago.

 *

 *	(c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,

 *						All Rights Reserved.

 *

 *	This program is free software; you can redistribute it and/or

 *	modify it under the terms of the GNU General Public License

 *	version 1 or 2 as published by the Free Software Foundation.

 *

/*

 * set the initial count value of a timer

 *

 * wdog is the iomem address of the cfg register

/*

 * cause the timer to [re]load it's initial count and start counting

 * all over again

 *

 * wdog is the iomem address of the cfg register

 keeps it to one thread only */

 useconds: 8.3ish secs. */

/*

 * Allow only a single thread to walk the dog

	/*

	 * Activate the timer

/*

 * Put the dog back in the kennel.

/*

 * 42 - the answer

		/*

		 * restart the timer

		/*

		 * get the remaining count from the ... count register

		 * which is 1*8 before the config register

/*

 *	Notifier for system down

		/*

		 * sit and sit

/*

 * interrupt handler

 *

 * doesn't do a whole lot for user, but oh so cleverly written so kernel

 * code can use it to re-up the watchdog, thereby saving the kernel from

 * having to create and maintain a timer, just to tickle another timer,

 * which is just so wrong.

	/*

	 * if it's the second watchdog timer, it's for those users

	/*

	 * register a reboot notifier

	/*

	 * get the resources

/*

 * example code that can be put in a platform code area to utilize the

 * first watchdog timer for the kernels own purpose.



void platform_wd_setup(void)

{

	int ret;



	ret = request_irq(1, sbwdog_interrupt, IRQF_SHARED,

		"Kernel Watchdog", IOADDR(A_SCD_WDOG_CFG_0));

	if (ret) {

		pr_crit("Watchdog IRQ zero(0) failed to be requested - %d\n", ret);

	}

}





 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * mpc8xxx_wdt.c - MPC8xx/MPC83xx/MPC86xx watchdog userspace interface

 *

 * Authors: Dave Updegraff <dave@cray.org>

 *	    Kumar Gala <galak@kernel.crashing.org>

 *		Attribution: from 83xx_wst: Florian Schirmer <jolt@tuxbox.org>

 *				..and from sc520_wdt

 * Copyright (c) 2008  MontaVista Software, Inc.

 *                     Anton Vorontsov <avorontsov@ru.mvista.com>

 *

 * Note: it appears that you can only actually ENABLE or DISABLE the thing

 * once after POR. Once enabled, you cannot disable, and vice versa.

 System watchdog control register */

 Software Watchdog Time Count. */

 Software Watchdog Freeze (mpc8xx). */

 Watchdog Enable bit. */

 Software Watchdog Reset/Interrupt Select bit.*/

 Software Watchdog Counter Prescale bit. */

 System watchdog count register */

 System watchdog service register */

 Ping the WDT */

 Good, fire up the show */

 clear reset status bits related to watchdog timer */

	/*

	 * If the watchdog was previously enabled or we're running on

	 * MPC8xxx, we should ping the wdt from the kernel until the

	 * userspace handles it.

 RSR Bit SWRS */

 RSTRSCR Bit WDT_RR */

 RSR Bit SWRS */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Watchdog driver for the wm8350

 *

 * Copyright (C) 2007, 2008 Wolfson Microelectronics <linux@wolfsonmicro.com>

 Seconds */

 To be set in WM8350_SYSTEM_CONTROL_2 */

 Default to 4s timeout */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2020 ROHM Semiconductors

 *

 * ROHM BD9576MUF and BD9573MUF Watchdog driver

 Pulse */

 Unit is hundreds of uS */

 convert to 100uS */

 SPDX-License-Identifier: GPL-2.0

/*

 * Intel Management Engine Interface (Intel MEI) Linux driver

 * Copyright (c) 2015, Intel Corporation.

/*

 * iAMT Watchdog Device

 seconds */

 seconds */

 seconds */

 Commands */

 MEI Management Control version number */

 Sub Commands */

/**

 * enum mei_wdt_state - internal watchdog state

 *

 * @MEI_WDT_PROBE: wd in probing stage

 * @MEI_WDT_IDLE: wd is idle and not opened

 * @MEI_WDT_START: wd was opened, start was called

 * @MEI_WDT_RUNNING: wd is expecting keep alive pings

 * @MEI_WDT_STOPPING: wd is stopping and will move to IDLE

 * @MEI_WDT_NOT_REQUIRED: wd device is not required

/**

 * struct mei_wdt - mei watchdog driver

 * @wdd: watchdog device

 *

 * @cldev: mei watchdog client device

 * @state: watchdog internal state

 * @resp_required: ping required response

 * @response: ping response completion

 * @unregister: unregister worker

 * @reg_lock: watchdog device registration lock

 * @timeout: watchdog current timeout

 *

 * @dbgfs_dir: debugfs dir entry

 CONFIG_DEBUG_FS */

/**

 * struct mei_mc_hdr - Management Control Command Header

 *

 * @command: Management Control (0x2)

 * @bytecount: Number of bytes in the message beyond this byte

 * @subcommand: Management Control Subcommand

 * @versionnumber: Management Control Version (0x10)

/**

 * struct mei_wdt_start_request - watchdog start/ping

 *

 * @hdr: Management Control Command Header

 * @timeout: timeout value

 * @reserved: reserved (legacy)

/**

 * struct mei_wdt_start_response - watchdog start/ping response

 *

 * @hdr: Management Control Command Header

 * @status: operation status

 * @wdstate: watchdog status bit mask

/**

 * struct mei_wdt_stop_request - watchdog stop

 *

 * @hdr: Management Control Command Header

/**

 * mei_wdt_ping - send wd start/ping command

 *

 * @wdt: mei watchdog device

 *

 * Return: 0 on success,

 *         negative errno code on failure

/**

 * mei_wdt_stop - send wd stop command

 *

 * @wdt: mei watchdog device

 *

 * Return: 0 on success,

 *         negative errno code on failure

/**

 * mei_wdt_ops_start - wd start command from the watchdog core.

 *

 * @wdd: watchdog device

 *

 * Return: 0 on success or -ENODEV;

/**

 * mei_wdt_ops_stop - wd stop command from the watchdog core.

 *

 * @wdd: watchdog device

 *

 * Return: 0 if success, negative errno code for failure

/**

 * mei_wdt_ops_ping - wd ping command from the watchdog core.

 *

 * @wdd: watchdog device

 *

 * Return: 0 if success, negative errno code on failure

/**

 * mei_wdt_ops_set_timeout - wd set timeout command from the watchdog core.

 *

 * @wdd: watchdog device

 * @timeout: timeout value to set

 *

 * Return: 0 if success, negative errno code for failure

 valid value is already checked by the caller */

 not const as the firmware_version field need to be retrieved */

/**

 * __mei_wdt_is_registered - check if wdt is registered

 *

 * @wdt: mei watchdog device

 *

 * Return: true if the wdt is registered with the watchdog subsystem

 * Locking: should be called under wdt->reg_lock

/**

 * mei_wdt_unregister - unregister from the watchdog subsystem

 *

 * @wdt: mei watchdog device

/**

 * mei_wdt_register - register with the watchdog subsystem

 *

 * @wdt: mei watchdog device

 *

 * Return: 0 if success, negative errno code for failure

/**

 * mei_wdt_rx - callback for data receive

 *

 * @cldev: bus device

 Empty response can be sent on stop */

	/* Run the unregistration in a worker as this can be

	 * run only after ping completion, otherwise the flow will

	 * deadlock on watchdog core mutex.

 stop the watchdog and register watchdog device */

/**

 * mei_wdt_notif - callback for event notification

 *

 * @cldev: bus device

 CONFIG_DEBUG_FS */

	/* on legacy devices notification is not supported

 Free the caller in case of fw initiated or unexpected reset */

 required last entry */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2010, Paul Cercueil <paul@crapouillou.net>

 *  JZ4740 Watchdog driver

 Start watchdog if it wasn't started already */

 sentinel */ }

 Set smallest clock possible */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright 2016 IBM Corporation

 *

 * Joel Stanley <joel@jms.id.au>

/*

 * WDT_RESET_WIDTH controls the characteristics of the external pulse (if

 * enabled), specifically:

 *

 * * Pulse duration

 * * Drive mode: push-pull vs open-drain

 * * Polarity: Active high or active low

 *

 * Pulse duration configuration is available on both the AST2400 and AST2500,

 * though the field changes between SoCs:

 *

 * AST2400: Bits 7:0

 * AST2500: Bits 19:0

 *

 * This difference is captured in struct aspeed_wdt_config.

 *

 * The AST2500 exposes the drive mode and polarity options, but not in a

 * regular fashion. For read purposes, bit 31 represents active high or low,

 * and bit 30 represents push-pull or open-drain. With respect to write, magic

 * values need to be written to the top byte to change the state of the drive

 * mode and polarity bits. Any other value written to the top byte has no

 * effect on the state of the drive mode or polarity bits. However, the pulse

 * width value must be preserved (as desired) if written.

 32 bits at 1MHz, in milliseconds */

 access_cs0 shows if cs0 is accessible, hence the reverted bit */

/*

 * This attribute exists only if the system has booted from the alternate

 * flash with 'alt-boot' option.

 *

 * At alternate flash the 'access_cs0' sysfs node provides:

 *   ast2400: a way to get access to the primary SPI flash chip at CS0

 *            after booting from the alternate chip at CS1.

 *   ast2500: a way to restore the normal address mapping from

 *            (CS0->CS1, CS1->CS0) to (CS0->CS0, CS1->CS1).

 *

 * Clearing the boot code selection and timeout counter also resets to the

 * initial state the chip select line mapping. When the SoC is in normal

 * mapping state (i.e. booted from CS0), clearing those bits does nothing for

 * both versions of the SoC. For alternate boot mode (booted from CS1 due to

 * wdt2 expiration) the behavior differs as described above.

 *

 * This option can be used with wdt2 (watchdog1) only.

	/*

	 * On clock rates:

	 *  - ast2400 wdt can run at PCLK, or 1MHz

	 *  - ast2500 only runs at 1MHz, hard coding bit 4 to 1

	 *  - ast2600 always runs at 1MHz

	 *

	 * Set the ast2400 to run at 1MHz as it simplifies the driver.

	/*

	 * Control reset on a per-device basis to ensure the

	 * host is not affected by a BMC reboot

		/*

		 * The watchdog is running, but invoke aspeed_wdt_start() to

		 * write wdt->ctrl to WDT_CTRL to ensure the watchdog's

		 * configuration conforms to the driver's expectations.

		 * Primarily, ensure we're using the 1MHz clock source.

		/*

		 * The watchdog is always configured with a 1MHz source, so

		 * there is no need to scale the microsecond value. However we

		 * need to offset it - from the datasheet:

		 *

		 * "This register decides the asserting duration of wdt_ext and

		 * wdt_rstarm signal. The default value is 0xFF. It means the

		 * default asserting duration of wdt_ext and wdt_rstarm is

		 * 256us."

		 *

		 * This implies a value of 0 gives a 1us pulse.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2013 Broadcom Corporation

 *

	/*

	 * One watchdog tick is 1/(2^resolution) seconds. Resolution can take

	 * the values 0-15, meaning one tick can be 1s to 30.52us. Our default

	 * resolution of 4 means one tick is 62.5ms.

	 *

	 * The watchdog counter is 20 bits. Depending on resolution, the maximum

	 * counter value of 0xfffff expires after about 12 days (resolution 0)

	 * down to only 32s (resolution 15). The default resolution of 4 gives

	 * us a maximum of about 18 hours and 12 minutes before the watchdog

	 * times out.

	/*

	 * If the WD_LOAD_FLAG is set, the watchdog counter field is being

	 * updated in hardware. Once the WD timer is updated in hardware, it

	 * gets cleared.

 Remember the maximum number iterations due to WD_LOAD_FLAG */

 This is the only place we return a negative value. */

 We always mask out reserved bits. */

 CONFIG_BCM_KONA_WDT_DEBUG */

 SPDX-License-Identifier: GPL-2.0+

/*

 * System monitoring driver for DA9055 PMICs.

 *

 * Copyright(c) 2012 Dialog Semiconductor Ltd.

 *

 * Author: David Dajun Chen <dchen@diasemi.com>

 *

 In seconds */

 Actual time  32.768s so included both 32s and 33s */

 Actual time 65.536s so include both, 65s and 66s */

	/*

	 * We have a minimum time for watchdog window called TWDMIN. A write

	 * to the watchdog before this elapsed time will cause an error.

 Reset the watchdog timer */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/pcmcia/sa1111_generic.c

 *

 * We implement the generic parts of a SA1111 PCMCIA driver.  This

 * basically means we handle everything except controlling the

 * power.  Power is machine specific...

/*

 * These are offsets from the above base.

	/*

	 * Initialise the suspend state.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * at91_cf.c -- AT91 CompactFlash controller driver

 *

 * Copyright (C) 2005 David Brownell

/*

 * A0..A10 work in each range; A23 indicates I/O space;  A25 is CFRNW;

 * some other bit in {A24,A22..A11} is nREG to flag memory access

 * (vs attributes).  So more than 2KB/region would just be waste.

 * Note: These are offsets from the physical base address.

 I/O IRQ */

 Card detect */

 power switching */

 card reset */

 EBI Chip Select number */

--------------------------------------------------------------------------*/

--------------------------------------------------------------------------*/

 kick pccard as needed */

 NOTE: CF is always 3VCARD */

 RDY/nIRQ */

 switch Vcc if needed and possible */

 toggle reset if needed */

 we already mapped the I/O region */

	/*

	 * Use 16 bit accesses unless/until we need 8-bit i/o space.

	 *

	 * NOTE: this CF controller ignores IOIS16, so we can't really do

	 * MAP_AUTOSZ.  The 16bit mode allows single byte access on either

	 * D0-D7 (even addr) or D8-D15 (odd), so it's close enough for many

	 * purposes (and handles ide-cs).

	 *

	 * The 8bit mode is needed for odd byte access on D0-D7.  It seems

	 * some cards only like that way to get at the odd byte, despite

	 * CF 3.0 spec table 35 also giving the D8-D15 option.

 pcmcia layer maps/unmaps mem regions */

--------------------------------------------------------------------------*/

 sentinel */ }

 must be a GPIO; ergo must trigger on both edges */

	/*

	 * The card driver will request this irq later as needed.

	 * but it causes lots of "irqNN: nobody cared" messages

	 * unless we report that we handle everything (sigh).

	 * (Note:  DK board doesn't wire the IRQ pin...)

	/*

	 * pcmcia layer only remaps "real" memory not iospace

	 * io_offset is set to 0x10000 to avoid the check in static_find_io().

 reserve chip-select regions */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * vrc4171_card.c, NEC VRC4171 Card Controller driver for Socket Services.

 *

 * Copyright (C) 2003-2005  Yoichi Yuasa <yuasa@linux-mips.org>

 Power register */

 5V only */

 Small voltage is chosen for safety. */

 clear CardStatus change */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/pcmcia/pxa2xx_mainstone.c

 *

 * Mainstone PCMCIA specific routines.

 *

 * Created:	May 12, 2004

 * Author:	Nicolas Pitre

 * Copyright:	MontaVista Software Inc.

	/*

	 * Workaround for STSCHG which can't be deasserted:

	 * We therefore disable/enable corresponding IRQs

	 * as needed to avoid IRQ locks.

/*======================================================================



    Device driver for the PCMCIA control functionality of StrongARM

    SA-1100 microprocessors.



    The contents of this file are subject to the Mozilla Public

    License Version 1.1 (the "License"); you may not use this file

    except in compliance with the License. You may obtain a copy of

    the License at http://www.mozilla.org/MPL/



    Software distributed under the License is distributed on an "AS

    IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or

    implied. See the License for the specific language governing

    rights and limitations under the License.



    The initial developer of the original code is John G. Dorsey

    <john+@cs.cmu.edu>.  Portions created by John G. Dorsey are

    Copyright (C) 1999 John G. Dorsey.  All Rights Reserved.



    Alternatively, the contents of this file may be used under the

    terms of the GNU Public License version 2 (the "GPL"), in which

    case the provisions of the GPL are applicable instead of the

    above.  If you wish to allow the use of your version of this file

    only under the terms of the GPL and not to allow others to use

    your version of this file under the MPL, indicate your decision

    by deleting the provisions above and replace them with the notice

    and other provisions required by the GPL.  If you do not delete

    the provisions above, a recipient may use your version of this

    file under either the MPL or the GPL.



/*

 * sa1100_pcmcia_default_mecr_timing

 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

 *

 * Calculate MECR clock wait states for given CPU clock

 * speed and command wait state. This function can be over-

 * written by a board specific version.

 *

 * The default is to simply calculate the BS values as specified in

 * the INTEL SA1100 development manual

 * "Expansion Memory (PCMCIA) Configuration Register (MECR)"

 * that's section 10.2.5 in _my_ version of the manual ;)

/* sa1100_pcmcia_set_mecr()

 * ^^^^^^^^^^^^^^^^^^^^^^^^

 *

 * set MECR value for socket <sock> based on this sockets

 * io, mem and attribute space access speed.

 * Call board specific BS value calculation to allow boards

 * to tweak the BS values.

	/*

	 * set default MECR calculation if the board specific

	 * code did not specify one...

 Provide our SA11x0 specific timing routines. */

 Initialize processor specific parameters */

/*

 * Driver for the Cirrus PD6729 PCI-PCMCIA bridge.

 *

 * Based on the i82092.c driver.

 *

 * This software may be used and distributed according to the terms of

 * the GNU General Public License, incorporated herein by reference.

/*

 * simple helper functions

 * External clock time, in nanoseconds.  120 ns = 8.33 MHz

/*

 * PARAMETERS

 *  irq_mode=n

 *     Specifies the interrupt delivery mode.  The default (1) is to use PCI

 *     interrupts; a value of 0 selects ISA interrupts. This must be set for

 *     correct operation of PCI card readers.

 0 = ISA interrupt, 1 = PCI interrupt */

 basic value read/write functions */

 Interrupt handler functionality */

 card status change register */

 no events on this socket */

 For IO/CARDS, bit 0 means "read the card" */

 Check for battery/ready events */

 no more events to handle */

 socket functions */

 Interface Status Register */

	/*

	 * IO cards have a different meaning of bits 0,1

	 * Also notice the inverse-logic on the bits

 IO card */

 non I/O card */

 card is write protected */

 card is not busy */

 power is applied to the card */

 First, set the global controller options */

 Values for the IGENC register */

 The reset bit has "inverse" logic */

 IGENC, Interrupt and General Control Register */

 Power registers */

 default: disable resetdrv on resume */

 automatic power mngmnt */

 enable power */

 only write if changed */

 all interrupts are to be done as PCI interrupts */

 Enable specific interrupt events */

 management IRQ: PCI INTA# = "irq 3" */

 card IRQ: PCI INTA# = "irq 3" */

 now clear the (probably bogus) pending stuff by doing a dummy read */

 Check error conditions */

 Turn off the window before changing anything */

	/* dev_dbg(&sock->dev, "set_io_map: Setting range to %x - %x\n",

 write the new values */

 Turn the window back on if needed */

 Turn off the window before changing anything */

 write the start address */

 write the stop address */

 Take care of high byte */

 card start */

		/* dev_dbg(&sock->dev, "requesting attribute memory for "

		/* dev_dbg(&sock->dev, "requesting normal memory for "

 Enable the window if necessary */

 the pccard structure and its functions */

 just find interrupts that aren't in use */

	/*

	 * Since we have no memory BARs some firmware may not

	 * have had PCI_COMMAND_MEMORY enabled, yet the device needs it.

 fall back to ISA interrupt mode */

 Register the interrupt handler */

 poll Card status change */

 Turn off all interrupt sources */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rsrc_nonstatic.c -- Resource management routines for !SS_CAP_STATIC_MAP sockets

 *

 * The initial developer of the original code is David A. Hinds

 * <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

 * are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.

 *

 * (C) 1999		David A. Hinds

/* moved to rsrc_mgr.c

MODULE_AUTHOR("David A. Hinds, Dominik Brodowski");

MODULE_LICENSE("GPL");

 Parameters that can be set with 'insmod' */

 memory probe? */

 IO port probe? */

 for io_db and mem_db */

 Action field */

/*======================================================================



    Linux resource management extensions



/*======================================================================



    These manage the internal databases of available resources.



====================================================================*/

 Delete whole block */

 don't advance the pointer yet */

 Cut off bit from the front */

 Cut off bit from the end */

 Split the block into two pieces */

/*======================================================================



    These routines examine a region of IO or memory addresses to

    determine what ranges might be genuinely available.



 First, what does a floating port look like? */

======================================================================*/

/*

 * readable() - iomem validation function for cards with a valid CIS

 as we're only called from pcmcia.c, we're safe */

 invalidate mapping */

/*

 * checksum() - iomem validation function for simple memory cards

 Don't bother checking every word... */

/**

 * do_validate_mem() - low level validate a memory region for PCMCIA use

 * @s:		PCMCIA socket to validate

 * @base:	start address of resource to check

 * @size:	size of resource to check

 * @validate:	validation function to use

 *

 * do_validate_mem() splits up the memory region which is to be checked

 * into two parts. Both are passed to the @validate() function. If

 * @validate() returns non-zero, or the value parameter to @validate()

 * is zero, or the value parameter is different between both calls,

 * the check fails, and -EINVAL is returned. Else, 0 is returned.

 move it to the validated data set */

/**

 * do_mem_probe() - validate a memory region for PCMCIA use

 * @s:		PCMCIA socket to validate

 * @base:	start address of resource to check

 * @num:	size of resource to check

 * @validate:	validation function to use

 * @fallback:	validation function to use if validate fails

 *

 * do_mem_probe() checks a memory region for use by the PCMCIA subsystem.

 * To do so, the area is split up into sensible parts, and then passed

 * into the @validate() function. Only if @validate() and @fallback() fail,

 * the area is marked as unavaibale for use by the PCMCIA subsystem. The

 * function returns the size of the usable memory area.

 don't allow too large steps */

 cis_readable wants to map 2x map_size */

/**

 * inv_probe() - top-to-bottom search for one usuable high memory area

 * @s:		PCMCIA socket to validate

 * @m:		resource_map to check

/**

 * validate_mem() - memory probe function

 * @s:		PCMCIA socket to validate

 * @probe_mask: MEM_PROBE_LOW | MEM_PROBE_HIGH

 *

 * The memory probe.  If the memory list includes a 64K-aligned block

 * below 1MB, we probe in 64K chunks, and as soon as we accumulate at

 * least mem_limit free space, we quit. Returns 0 on usuable ports.

 We do up to four passes through the list */

 Only probe < 1 MB */

 Special probe for 64K-aligned block */

 CONFIG_PCMCIA_PROBE */

/**

 * validate_mem() - memory probe function

 * @s:		PCMCIA socket to validate

 * @probe_mask: ignored

 *

 * Returns 0 on usuable ports.

 CONFIG_PCMCIA_PROBE */

/**

 * pcmcia_nonstatic_validate_mem() - try to validate iomem for PCMCIA use

 * @s:		PCMCIA socket to validate

 *

 * This is tricky... when we set up CIS memory, we try to validate

 * the memory window space allocations.

 *

 * Locking note: Must be called with skt_mutex held!

	/*

	 * Ensure that we have the correct start address

		/*

		 * If the lower resources are not available, try aligning

		 * to this entry of the resource database to see if it'll

		 * fit here.

		/*

		 * If we're above the area which was passed in, there's

		 * no point proceeding.

	/*

	 * If we failed to find something suitable, ensure we fail.

/*

 * Adjust an existing IO region allocation, but making sure that we don't

 * encroach outside the resources which the user supplied.

/*======================================================================



    These find ranges of I/O ports or memory addresses that are not

    currently allocated by other devices.



    The 'align' field should reflect the number of bits of address

    that need to be preserved from the initial value of *base.  It

    should be a power of two, greater than or equal to 'num'.  A value

    of 0 means that all bits of *base are significant.  *base should

    also be strictly less than 'align'.



	/* Check for an already-allocated window that must conflict with

	 * what was asked for.  It is a hack because it does not catch all

	 * potential conflicts, just the most obvious ones.

 Try to extend top of window */

 Try to extend bottom of window */

	/* on x86, avoid anything < 0x100 for it is often used for

	/* If this is the root bus, the risk of hitting some strange

	 * system devices is too high: If a driver isn't loaded, the

	 * resources are not claimed; even if a driver is loaded, it

	 * may not request all resources or even the wrong one. We

	 * can neither trust the rest of the kernel nor ACPI/PNP and

	 * CRS parsing to get it right. Therefore, use several

	 * safeguards:

	 *

	 * - Do not auto-add resources if the CardBus bridge is on

	 *   the PCI root bus

	 *

	 * - Avoid any I/O ports < 0x100.

	 *

	 * - On PCI-PCI bridges, only use resources which are set up

	 *   exclusively for the secondary PCI bus: the risk of hitting

	 *   system devices is quite low, as they usually aren't

	 *   connected to the secondary PCI bus.

			/* safeguard against the root resource, where the

			 * risk of hitting any other device would be too

			/* safeguard against the root resource, where the

			 * risk of hitting any other device would be too

	/* if we got at least one of IO, and one of MEM, we can be glad and

 sysfs interface to the resource database */

/*======================================================================



    Device driver for Intel 82365 and compatible PC Card controllers.



    i82365.c 1.265 1999/11/10 18:36:21



    The contents of this file are subject to the Mozilla Public

    License Version 1.1 (the "License"); you may not use this file

    except in compliance with the License. You may obtain a copy of

    the License at http://www.mozilla.org/MPL/



    Software distributed under the License is distributed on an "AS

    IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or

    implied. See the License for the specific language governing

    rights and limitations under the License.



    The initial developer of the original code is David A. Hinds

    <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

    are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.



    Alternatively, the contents of this file may be used under the

    terms of the GNU General Public License version 2 (the "GPL"), in which

    case the provisions of the GPL are applicable instead of the

    above.  If you wish to allow the use of your version of this file

    only under the terms of the GPL and not to allow others to use

    your version of this file under the MPL, indicate your decision

    by deleting the provisions above and replace them with the notice

    and other provisions required by the GPL.  If you do not delete

    the provisions above, a recipient may use your version of this

    file under either the MPL or the GPL.

    

 ISA-bus controllers */

====================================================================*/

 Parameters that can be set with 'insmod' */

 Default base address for i82365sl and other ISA chips */

 Should we probe at 0x3e2 for an extra ISA controller? */

 Specify a socket number to ignore */

 Bit map or list of interrupts to choose from */

 The card status change interrupt -- 0 means autoselect */

 Probe for safe interrupts? */

 Poll status interval -- 0 means default to interrupt */

 External clock time, in nanoseconds.  120 ns = 8.33 MHz */

 Cirrus options */

 Vadem options */

====================================================================*/

 Where we keep track of our sockets... */

 ... */

 Default ISA interrupt mask */

 irq 15,14,12,11,10,9,7,5,4,3 */

====================================================================*/

 These definitions must match the pcic table! */

 Flags for classifying groups of controllers */

====================================================================*/

/*======================================================================



    Code to save and restore global state information for Cirrus

    PD67xx controllers, and to set and report global configuration

    options.



    The VIA controllers also use these routines, as they are mostly

    Cirrus lookalikes, without the timing registers.

    

/*======================================================================



    Code to save and restore global state information for Vadem VG468

    and VG469 controllers, and to set and report global configuration

    options.

    

/*======================================================================



    Generic routines to get and set controller options

    

/*======================================================================



    Interrupt testing code, for ISA and PCI interrupts

    

 Generate one interrupt */

 mask all interrupts */

 Don't probe level-triggered interrupts -- reserved for PCI */

 Fallback: just find interrupts that aren't in use */

 If scan failed, default to polled status */

====================================================================*/

 Time conversion functions */

====================================================================*/

 Use the next free entry in the socket table */

 Wake up a sleepy Cirrus controller */

 Pause at least 50 ms */

 Check for Vadem VG-468 chips */

 Check for Ricoh chips */

 Check for Cirrus CL-PD67xx chips */

 identify */

/*======================================================================



    See if a card is present, powered up, in IO mode, and already

    bound to a (non PC Card) Linux driver.  We leave these alone.



    We make an exception for cards that seem to be serial devices.

    

====================================================================*/

 Set host options, build basic interrupt mask */

 Scan for ISA interrupts */

 Poll if only two interrupts available */

 Only try an ISA cs_irq if this is the first controller */

 Avoid irq 12 unless it is explicitly requested */

 Update socket interrupt information, capabilities */

 add_pcic */

====================================================================*/

 Does the socket exist? */

 Check for bad socket decode */

====================================================================*/

 pcic_interrupt */

====================================================================*/

 i365_get_status */

====================================================================*/

 First set global controller options */

 IO card, RESET flag, IO interrupt */

 Chipset-specific functions */

 Speaker control */

 Card status change interrupt mask */

 i365_set_socket */

====================================================================*/

 Turn off the window before changing anything */

 Turn on the window if necessary */

 i365_set_io_map */

====================================================================*/

 Turn off the window before changing anything */

 Turn on the window if necessary */

 i365_set_mem_map */

 driver model ordering issue */

/*======================================================================



    Routines for accessing socket information and register dumps via

    /sys/class/pcmcia_socket/...

    

====================================================================*/

/* this is horribly ugly... proper locking needs to be done here at 

====================================================================*/

 Set up interrupt handler(s) */

 register sockets with the pcmcia core */

 Finally, schedule a polling interrupt */

 Turn off all interrupt sources! */

 init_i82365 */

 Turn off all interrupt sources! */

 exit_i82365 */

====================================================================*/

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/pcmcia/pxa2xx_stargate2.c

 *

 * Stargate 2 PCMCIA specific routines.

 *

 * Created:	December 6, 2005

 * Author:	Ed C. Epp

 * Copyright:	Intel Corp 2005

 *              Jonathan Cameron <jic23@cam.ac.uk> 2009

 not available - battery detect on card */

 not available */

 not available - voltage detect for card */

 not available */

 Enable card power */

 sets power ctl register high */

 sets power control register low (clear) */

 reset */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regular cardbus driver ("yenta_socket")

 *

 * (C) Copyright 1999, 2000 Linus Torvalds

 *

 * Changelog:

 * Aug 2002: Manfred Spraul <manfred@colorfullife.com>

 * 	Dynamically adjust the size of the bridge resource

 *

 * May 2003: Dominik Brodowski <linux@brodo.de>

 * 	Merge pci_socket.c and yenta.c into one file

/*

 * Only probe "regular" interrupts, don't

 * touch dangerous spots like the mouse irq,

 * because there are mice that apparently

 * get really confused if they get fondled

 * too intimately.

 *

 * Default to 11, 10, 9, 7, 6, 5, 4, 3.

 Don't ask.. */

/*

 * yenta PCI irq probing.

 * currently only used in the TI/EnE initialization code

/*

 * Generate easy-to-use ways of reading a cardbus sockets

 * regular memory space ("cb_xxx"), configuration space

 * ("config_xxx") and compatibility space ("exca_xxxx")

 avoid problems with PCI write posting */

 PCI write posting... */

 PCI write posting... */

/*

 * Ugh, mixed-mode cardbus and 16-bit pccard state: things depend

 * on what kind of card is inserted..

 some birdges require to use the ExCA registers to power 16bit cards */

 i82365SL-DF style */

 i82365SL-B style */

 CB_SC_STPCLK? */

 if powering down: do it immediately */

 ISA interrupt control? */

 CSC interrupt: no ISA irq for CSC */

 Socket event mask: get card insert/remove events.. */

 if powering up: do it as the last step when the socket is configured */

 Disable the window before changing it.. */

 Clear interrupt status for the event */

 redoes voltage interrogation if required */

 Called at resume and initialization events */

 Redo card voltage interrogation */

 Re-enable CSC interrupts */

 Disable CSC interrupts */

/*

 * Use an adaptive allocation for the memory resource,

 * sometimes the memory behind pci bridges is limited:

 * 1/8 of the size of the io window of the parent.

 * max 4 MB, min 16 kB. We try very hard to not get below

 * the "ACC" values, though.

 round size down to next power of 2 */

 Wrong type */

 Already allocated? */

 The granularity of the memory limit is 4kB, on IO it's 4 bytes */

 Approximating prefetchable by non-prefetchable */

/*

 * Allocate the bridge mappings for the device..

/*

 * Free the bridge mappings for the device..

/*

 * Close it down - release our resources and go home..

 Remove the register attributes */

 we don't want a dying socket registered */

 Disable all events so we don't die in an IRQ storm */

/*

 * Different cardbus controllers have slightly different

 * initialization sequences etc details. List them here..

	/*

	 * Probe for usable interrupts using the force

	 * register to generate bogus card status events.

/*

 * yenta PCI irq probing.

 * currently only used in the TI/EnE initialization code

 interrupt handler, only used during probing */

 Clear interrupt status for the event */

 probes the PCI interrupt, use only on override functions */

 generate interrupt, wait */

 disable interrupts */

 CONFIG_YENTA_TI */

/*

 * Set static data that doesn't need re-initializing..

/*

 * Initialize the standard cardbus registers

 MAGIC NUMBERS! Fixme */

 sec. latency timer */

 subordinate bus */

 secondary bus */

 primary bus */

	/*

	 * Set up the bridging state:

	 *  - enable write posting.

	 *  - memory window 0 prefetchable, window 1 non-prefetchable

	 *  - PCI interrupts enabled if a PCI interrupt exists..

/**

 * yenta_fixup_parent_bridge - Fix subordinate bus# of the parent bridge

 * @cardbus_bridge: The PCI bus which the CardBus bridge bridges to

 *

 * Checks if devices on the bus which the CardBus bridge bridges to would be

 * invisible during PCI scans because of a misconfigured subordinate number

 * of the parent brige - some BIOSes seem to be too lazy to set it right.

 * Does the fixup carefully by checking how far it can go without conflicts.

 * See http://bugzilla.kernel.org/show_bug.cgi?id=2944 for more information.

	/*

	 * We only check and fix the parent bridge: All systems which need

	 * this fixup that have been reviewed are laptops and the only bridge

	 * which needed fixing was the parent bridge of the CardBus bridge:

 Check bus numbers are already set up correctly: */

 The subordinate number is ok, nothing to do */

 Root bridges are ok */

 stay within the limits of the bus range of the parent: */

 check the bus ranges of all sibling bridges to prevent overlap */

		/*

		 * If the sibling has a higher secondary bus number

		 * and it's secondary is equal or smaller than our

		 * current upper limit, set the new upper limit to

		 * the bus number below the sibling's range:

 Show that the wanted subordinate number is not possible: */

 If we have room to increase the bridge's subordinate number, */

 use the highest number of the hidden bus, within limits */

 Save the new subordinate in the bus struct of the bridge */

 and update the PCI config space with the new subordinate */

/*

 * Initialize a cardbus controller. Make sure we have a usable

 * interrupt, and that we can map the cardbus area. Fill in the

 * socket information structure..

	/*

	 * If we failed to assign proper bus numbers for this cardbus

	 * controller during PCI probe, its subordinate pci_bus is NULL.

	 * Bail out if so.

 prepare pcmcia_socket */

 prepare struct yenta_socket */

	/*

	 * Do some basic sanity checking..

	/*

	 * Ok, start setup.. Map the cardbus registers,

	 * and request the IRQ.

	/*

	 * report the subsystem vendor and device for help debugging

	 * the irq stuff...

 Disable all events */

 Set up the bridge regions.. */

 Do we have special options for the device? */

 We must finish initialization here */

 No IRQ or request_irq failed. Poll */

 But zero is a valid IRQ number. */

 Figure out what the dang thing can do for the PCMCIA layer... */

 Register it with the pcmcia layer.. */

 Add the yenta register attributes */

 error path... */

	/*

	 * TBD: Check if these TI variants can use more

	 * advanced overrides instead.  (I can't get the

	 * data sheets for these devices. --rmk)

 CONFIG_YENTA_TI */

 match any cardbus bridge */

 all zeroes */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * drivers/pcmcia/sa1100_jornada720.c

 *

 * Jornada720 PCMCIA specific routines

 *

/*

 * Socket 0 power: GPIO A0

 * Socket 0 3V: GPIO A2

 * Socket 1 power: GPIO A1 & GPIO A3

 * Socket 1 3V: GPIO A3

 * Does Socket 1 3V actually do anything?

 Fixme: why messing around with SA11x0's GPIO1? */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cardbus.c -- 16-bit PCMCIA core support

 *

 * The initial developer of the original code is David A. Hinds

 * <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

 * are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.

 *

 * (C) 1999		David A. Hinds

/*

 * Cardbus handling has been re-written to be more of a PCI bridge thing,

 * and the PCI code basically does all the resource handling.

 *

 *		Linus, Jan 2000

		/*

		 * Since there is only one interrupt available to

		 * CardBus devices, all devices downstream of this

		 * device must be using this IRQ.

		/*

		 * Some controllers transfer very slowly with 0 CLS.

		 * Configure it.  This may fail as CLS configuration

		 * is mandatory only for MWI.

/**

 * cb_alloc() - add CardBus device

 * @s:		the pcmcia_socket where the CardBus device is located

 *

 * cb_alloc() allocates the kernel data structures for a Cardbus device

 * and handles the lowest level PCI device setup issues.

	/*

	 * Size all resources below the CardBus controller.

 socket specific tune function */

/**

 * cb_free() - remove CardBus device

 * @s:		the pcmcia_socket where the CardBus device was located

 *

 * cb_free() handles the lowest level PCI device cleanup.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rsrc_iodyn.c -- Resource management routines for MEM-static sockets.

 *

 * The initial developer of the original code is David A. Hinds

 * <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

 * are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.

 *

 * (C) 1999		David A. Hinds

	/* Check for an already-allocated window that must conflict with

	 * what was asked for.  It is a hack because it does not catch all

	 * potential conflicts, just the most obvious ones.

 Try to extend top of window */

 Try to extend bottom of window */

 SPDX-License-Identifier: GPL-2.0

/*

 * drivers/pcmcia/sa1100_simpad.c

 *

 * PCMCIA implementation routines for simpad

 *

 Disable CF bus: */

simpad_set_cs3_bit(PCMCIA_BUFF_DIS);*/

 bvd1 might be cs3reg & PCMCIA_BVD1 */

 bvd2 might be cs3reg & PCMCIA_BVD2 */

 Murphy: see table of MIC2562a-1 */

/*

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 *

 * Copyright (C) 2008 Maxime Bizon <mbizon@freebox.fr>

/* if cardbus is used, platform device needs reference to actual pci

/*

 * read/write helper for pcmcia regs

/*

 * This callback should (re-)initialise the socket, turn on status

 * interrupts and PCMCIA bus, and wait for power to stabilise so that

 * the card status signals report correctly.

 *

 * Hardware cannot do that.

/*

 * This callback should remove power on the socket, disable IRQs from

 * the card, turn off status interrupts, and disable the PCMCIA bus.

 *

 * Hardware cannot do that.

/*

 * Implements the set_socket() operation for the in-kernel PCMCIA

 * service (formerly SS_SetSocket in Card Services). We more or

 * less punt all of this work and let the kernel handle the details

 * of power configuration, reset, &c. We also record the value of

 * `state' in order to regurgitate it to the PCMCIA core later.

	/* note: hardware cannot control socket power, so we will

 apply socket reset */

 reverse reset logic for cardbus card */

 keep requested state for event reporting */

/*

 * identity cardtype from VS[12] input, CD[12] input while only VS2 is

 * floating, and CD[12] input while only VS1 is floating

 VS1 float, VS2 float */

 VS1 grounded, VS2 float */

 VS1 grounded, VS2 grounded */

 VS1 tied to CD1, VS2 float */

 VS1 grounded, VS2 tied to CD2 */

 VS1 tied to CD2, VS2 grounded */

 VS1 float, VS2 grounded */

 VS1 float, VS2 tied to CD2 */

 VS1 float, VS2 tied to CD1 */

 VS1 tied to CD2, VS2 float */

 VS2 grounded, VS1 is tied to CD1, CD2 is grounded */

 ignore cardbay */

/*

 * poll hardware to check card insertion status

 check CD for card presence */

 if new insertion, detect cardtype */

 float VS1, float VS2 */

 wait for output to stabilize and read VS[12] */

 drive VS1 low, float VS2 */

 wait for output to stabilize and read CD[12] */

 float VS1, drive VS2 low */

 wait for output to stabilize and read CD[12] */

 guess cardtype from all this */

 drive both VS pin to 0 again */

 enable correct logic */

 report card type/voltage */

/*

 * core request to get current socket status

/*

 * socket polling timer callback

	/* keep only changed bits, and mask with required one from the

	/* this doesn't seem to be called by pcmcia layer if static

/*

 * register pcmcia socket to core

 make sure we have all resources we need */

 remap pcmcia registers */

 remap io registers */

 resources are static */

 assume common & attribute memory have the same size */

 initialize polling timer */

	/* initialize  pcmcia  control register,  drive  VS[12] to  0,

	 * leave CB IDSEL to the old  value since it is set by the PCI

	/*

	 * Hardware has only one set of timings registers, not one for

	 * each memory access type, so we configure them for the

	 * slowest one: attribute memory.

 start polling socket */

 keep pci device */

/*

 * if cardbus support is enabled, register our platform device after

 * our fake cardbus bridge has been registered

 SPDX-License-Identifier: GPL-2.0-only

/*

 * rsrc_mgr.c -- Resource management routines and/or wrappers

 *

 * The initial developer of the original code is David A. Hinds

 * <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

 * are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.

 *

 * (C) 1999		David A. Hinds

	/* the good thing about SS_CAP_STATIC_MAP sockets is

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/pcmcia/pxa/pxa_cm_x255.c

 *

 * Compulab Ltd., 2003, 2007, 2008

 * Mike Rapoport <mike@compulab.co.il>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/pcmcia/pxa2xx_palmtc.c

 *

 * Driver for Palm Tungsten|C PCMCIA

 *

 * Copyright (C) 2008 Alex Osborne <ato@meshy.org>

 * Copyright (C) 2009-2011 Marek Vasut <marek.vasut@gmail.com>

 always inserted */

 Power up the card, 1.8V first, after a while 3.3V */

 Wait till the card is ready */

 Power down the WiFi in case of error */

 Reset the card */

/*

 * Viper/Zeus PCMCIA support

 *   Copyright 2004 Arcom Control Systems

 *

 * Maintained by Marc Zyngier <maz@misterjones.org>

 *

 * Based on:

 *   iPAQ h2200 PCMCIA support

 *   Copyright 2004 Koen Kooi <koen@vestingbar.nl>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive for

 * more details.

/*

 * Release all resources.

 Can only apply 3.3V */

 Silently ignore Vpp, output enable, speaker enable. */

 Apply socket voltage */

 I can't imagine more than one device, but you never know... */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright (C) 2012 Paul Parsons <lost.distance@yahoo.com>

	/*

	 * IRQ type must be set before soc_pcmcia_hw_init() calls request_irq().

	 * The asic3 default IRQ type is level trigger low level detect, exactly

	 * the the signal present on GPIOD4_CF_nCD when a CF card is inserted.

	 * If the IRQ type is not changed, the asic3 interrupt handler will loop

	 * repeatedly because it is unable to clear the level trigger interrupt.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/pcmcia/pxa2xx_balloon3.c

 *

 * Balloon3 PCMCIA specific routines.

 *

 *  Author:	Nick Bane

 *  Created:	June, 2006

 *  Copyright:	Toby Churchill Ltd

 *  Derived from pxa2xx_mainstone.c, by Nico Pitre

 *

 * Various modification by Marek Vasut <marek.vasut@gmail.com>

 This actually reads the STATUS register */

	/*

	 * Workaround for STSCHG which can't be deasserted:

	 * We therefore disable/enable corresponding IRQs

	 * as needed to avoid IRQ locks.

 not available */

 Always true its a CF card */

 not available */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/pcmcia/pxa2xx_palmld.c

 *

 * Driver for Palm LifeDrive PCMCIA

 *

 * Copyright (C) 2006 Alex Osborne <ato@meshy.org>

 * Copyright (C) 2007-2011 Marek Vasut <marek.vasut@gmail.com>

 always inserted */

 SPDX-License-Identifier: GPL-2.0

/*

 * MAX1600 PCMCIA power switch library

 *

 * Copyright (C) 2016 Russell King

 VY */

 VX */

		/*

		 * Cirrus mode appears to be the same as Intel mode,

		 * except the VCC pins are inverted.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * omap_cf.c -- OMAP 16xx CompactFlash controller driver

 *

 * Copyright (c) 2005 David Brownell

/* NOTE:  don't expect this to support many I/O cards.  The 16xx chips have

 * hard-wired timings to support Compact Flash memory cards; they won't work

 * with various other devices (like WLAN adapters) without some external

 * logic to help out.

 *

 * NOTE:  CF controller docs disagree with address space docs as to where

 * CF_BASE really lives; this is a doc erratum.

 status; read after IRQ */

 which chipselect (CS0..CS3) is used for CF (active low) */

 card reset */

--------------------------------------------------------------------------*/

--------------------------------------------------------------------------*/

 the timer is primarily to kick this socket's pccardd */

/* This irq handler prevents "irqNNN: nobody cared" messages as drivers

 * claim the card's IRQ.  It may also detect some card insertions, but

 * not removals; it can't always eliminate timer irqs.

 NOTE CF is always 3VCARD */

 REVISIT some non-OSK boards may support power switching */

 regions are 2K each:  mem, attrib, io (and reserved-for-ide) */

--------------------------------------------------------------------------*/

/*

 * NOTE:  right now the only board-specific platform_data is

 * "what chipselect is used".  Boards could want more.

 either CFLASH.IREQ (INT_1610_CF) or some GPIO */

 this primarily just shuts up irq handling noise */

 NOTE: CS0 could be configured too ... */

 pcmcia layer only remaps "real" memory */

 NOTE:  CF conflicts with MMC1 */

	/* NOTE:  better EMIFS setup might support more cards; but the

	 * TRM only shows how to affect regular flash signals, not their

	 * CF/PCMCIA variants...

 synch mode 4 etc */

 OE hold/setup */

 CF uses armxor_ck, which is "always" available */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cs.c -- Kernel Card Services - core services

 *

 * The initial developer of the original code is David A. Hinds

 * <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

 * are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.

 *

 * (C) 1999		David A. Hinds

 Module parameters */

 centiseconds */

 centiseconds */

 centiseconds */

 centiseconds */

 usecs */

 centiseconds */

 centiseconds */

 unreset_check's */

 Access speed for attribute memory windows */

 ns */

 List of all sockets, protected by a rwsem */

/**

 * pcmcia_register_socket - add a new pcmcia socket device

 * @socket: the &socket to register

	/* try to obtain a socket number [yes, it gets ugly if we

	 * register more than 2^sizeof(unsigned int) pcmcia

	 * sockets... but the socket number is deprecated

	/*

	 * If we do not support Cardbus, ensure that

	 * the Cardbus socket capability is disabled.

 set proper values in socket->dev */

 base address = 0, map = 0 */

	/*

	 * Let's try to get the PCMCIA module for 16-bit PCMCIA support.

	 * If it fails, it doesn't matter -- we still have 32-bit CardBus

	 * support to offer, so this is not a failure mode.

 pcmcia_register_socket */

/**

 * pcmcia_unregister_socket - remove a pcmcia socket device

 * @socket: the &socket to unregister

 remove from our own list */

 wait for sysfs to drop all references */

 pcmcia_unregister_socket */

/*

 * socket_setup() and socket_shutdown() are called by the main event handler

 * when card insertion and removal events are received.

 * socket_setup() turns on socket power and resets the socket, in two stages.

 * socket_shutdown() unconfigures a socket and turns off socket power.

 Blank out the socket state */

	/* From here on we can be sure that only we (that is, the

	 * pccardd thread) accesses this socket, and all (16-bit)

	 * PCMCIA interactions are gone. Therefore, release

	 * ops_mutex so that we don't get a sysfs-related lockdep

	 * warning.

 give socket some time to power down */

	/*

	 * Decode the card voltage requirements, and apply power to the card.

	/*

	 * Wait "vcc_settle" for the supply to stabilise.

/*

 * Handle card insertion.  Setup the socket, reset the card,

 * and then tell the rest of PCMCIA that a card is present.

 store state on first suspend, but not after spurious wakeups */

/*

 * Finalize the resume. In case of a cardbus socket, we have

 * to rebind the devices as we can't be certain that it has been

 * replaced, or not.

		/* We can't be sure the CardBus card is the same

		 * as the one previously inserted. Therefore, remove

/*

 * Resume a socket.  If a card is present, verify its CIS against

 * our cached copy.  If they are different, the card has been

 * replaced, and we need to tell the drivers.

/*

 * Process a socket card detect status change.

 *

 * If we don't have a card already present, delay the detect event for

 * about 20ms (to be on the safe side) before reading the socket status.

 *

 * Some i82365-based systems send multiple SS_DETECT events during card

 * insertion, and the "card present" status bit seems to bounce.  This

 * will probably be true with GPIO-based card detection systems after

 * the product has aged.

 register with the device core */

 wait for userspace to catch up */

 make sure we are running */

 shut down socket, if a device is still present */

 remove from the device core */

/*

 * Yenta (at least) probes interrupts before registering the socket and

 * starting the handler thread.

 pcmcia_parse_events */

/**

 * pcmcia_parse_uevents() - tell pccardd to issue manual commands

 * @s:		the PCMCIA socket we wan't to command

 * @events:	events to pass to pccardd

 *

 * userspace-issued insert, eject, suspend and resume commands must be

 * handled by pccardd to avoid any sysfs-related deadlocks. Valid events

 * are PCMCIA_UEVENT_EJECT (for eject), PCMCIA_UEVENT__INSERT (for insert),

 * PCMCIA_UEVENT_RESUME (for resume), PCMCIA_UEVENT_SUSPEND (for suspend)

 * and PCMCIA_UEVENT_REQUERY (for re-querying the PCMCIA card).

 register pcmcia_callback */

 s->skt_mutex also protects s->callback */

 registration */

/* I'm not sure which "reset" function this is supposed to use,

 * but for now, it uses the low-level interface's reset, not the

 * CIS register.

 reset_card */

 dev_resume may be called with IRQs enabled */

 late suspend must be called with IRQs disabled */

 early resume must be called with IRQs disabled */

 CONFIG_PM */

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PCMCIA socket code for the MyCable XXS1500 system.

 *

 * Copyright (c) 2009 Manuel Lauss <manuel.lauss@gmail.com>

 *

/*

 * 3.3V cards only; all interfacing is done via gpios:

 *

 * 0/1:  carddetect (00 = card present, xx = huh)

 * 4:	 card irq

 * 204:  reset (high-act)

 * 205:  buffer enable (low-act)

 * 208/209: card voltage key (00,01,10,11)

 * 210:  battwarn

 * 211:  batdead

 * 214:  power (low-act)

 previous flags for set_socket() */

 power control */

 power off */

 power on */

 assert reset */

 buffers off */

 deassert reset */

 buffers on */

 check carddetects: GPIO[0:1] must both be low */

 determine card voltage: GPIO[208:209] binary value */

 3V card */

 5V card, unsupported */

 treated as unsupported in core */

 GPIO214: low active power switch */

 GPIO204: high-active reset line */

 other stuff */

 assert reset */

 disable buffers */

 power off */

 36bit PCMCIA Attribute area address */

 36bit PCMCIA Memory area address */

 36bit PCMCIA IO area address */

	/*

	 * PCMCIA client drivers use the inb/outb macros to access

	 * the IO registers.  Since mips_io_port_base is added

	 * to the access address of the mips implementation of

	 * inb/outb, we need to subtract it here because we want

	 * to access the I/O or MEM address directly, without

	 * going through this "mips_io_port_base" mechanism.

	/* setup carddetect irq: use one of the 2 GPIOs as an

	 * edge detector.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * socket_sysfs.c -- most of socket-related sysfs output

 *

 * (C) 2003 - 2004		Dominik Brodowski

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PCMCIA socket code for the Alchemy Db1xxx/Pb1xxx boards.

 *

 * Copyright (c) 2009 Manuel Lauss <manuel.lauss@gmail.com>

 *

/* This is a fairly generic PCMCIA socket driver suitable for the

 * following Alchemy Development boards:

 *  Db1000, Db/Pb1500, Db/Pb1100, Db/Pb1550, Db/Pb1200, Db1300

 *

 * The Db1000 is used as a reference:  Per-socket card-, carddetect- and

 *  statuschange IRQs connected to SoC GPIOs, control and status register

 *  bits arranged in per-socket groups in an external PLD.  All boards

 *  listed here use this layout, including bit positions and meanings.

 *  Of course there are exceptions in later boards:

 *

 *	- Pb1100/Pb1500:  single socket only; voltage key bits VS are

 *			  at STATUS[5:4] (instead of STATUS[1:0]).

 *	- Au1200-based:	  additional card-eject irqs, irqs not gpios!

 *	- Db1300:	  Db1200-like, no pwr ctrl, single socket (#1).

 socket number */

 previous flags for set_socket() */

 interrupt sources: linux irq numbers! */

 default carddetect irq */

 card-status-change irq */

 card irq */

 db1200/pb1200 have these */

 db1000 carddetect gpio */

 most boards */

 IRQs aren't gpios */

 VS bits slightly different */

 no power control */

 DB/PB1200: check CPLD SIGSTATUS register bit 10/12 */

 carddetect gpio: low-active */

/* STSCHG tends to bounce heavily when cards are inserted/ejected.

 * To avoid this, the interrupt is normally disabled and only enabled

 * after reset to a card has been de-asserted.

/* Db/Pb1200 have separate per-socket insertion and ejection

 * interrupts which stay asserted as long as the card is

 * inserted/missing.  The one which caused us to be called

 * needs to be disabled and the other one enabled.

 Wait a bit for the signals to stop bouncing. */

	/* Db/Pb1200 have separate per-socket insertion and ejection

	 * interrupts, which should show edge behaviour but don't.

	 * So interrupts are disabled until both insertion and

	 * ejection handler have been registered and the currently

	 * active one disabled.

 enable the currently silent one */

		/* all other (older) Db1x00 boards use a GPIO to show

		 * card detection status:  use both-edge triggers.

 all done */

/*

 * configure a PCMCIA socket on the Db1x00 series of boards (and

 * compatibles).

 *

 * 2 external registers are involved:

 *   pcmcia_status (offset 0x04): bits [0:1/2:3]: read card voltage id

 *   pcmcia_control(offset 0x10):

 *	bits[0:1] set vcc for card

 *	bits[2:3] set vpp for card

 *	bit 4:	enable data buffers

 *	bit 7:	reset# for card

 *	add 8 for second socket.

 card voltage setup */

 clear voltage settings */

 sanity check: Vpp must be 0, 12, or Vcc */

 create new voltage code */

 assert reset, disable io buffers */

 de-assert reset, enable io buffers */

 update PCMCIA configuration */

 reset was taken away: give card time to initialize properly */

 VCC bits at [3:2]/[11:10] */

 VS bits at [0:1]/[3:2] */

 reset bits at [7]/[15] */

 PB1100/PB1500: voltage key bits are at [5:4] */

 determine card type */

 3V card */

 5V card: set nothing */

 treated as unsupported in core */

 if Vcc is not zero, we have applied power to a card */

 DB1300: power always on, but don't tell when no card present */

 reset de-asserted? then we're ready */

	/*

	 * gather resources necessary and optional nice-to-haves to

	 * operate a socket:

	 * This includes IRQs for Carddetection/ejection, the card

	 *  itself and optional status change detection.

	 * Also, the memory areas covered by a socket.  For these

	 *  we require the real 36bit addresses (see the au1000.h

	 *  header for more information).

 card: irq assigned to the card itself. */

	/* insert: irq which triggers on card insertion/ejection

	 * BIG FAT NOTE: on DB1000/1100/1500/1550 we pass a GPIO here!

 stschg: irq which trigger on card status change (optional) */

 eject: irq which triggers on ejection (DB1200/PB1200 only) */

 36bit PCMCIA Attribute area address */

 36bit PCMCIA Memory area address */

 36bit PCMCIA IO area address */

	/*

	 * PCMCIA client drivers use the inb/outb macros to access

	 * the IO registers.  Since mips_io_port_base is added

	 * to the access address of the mips implementation of

	 * inb/outb, we need to subtract it here because we want

	 * to access the I/O or MEM address directly, without

	 * going through this "mips_io_port_base" mechanism.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PCMCIA high-level CIS access functions

 *

 * The initial developer of the original code is David A. Hinds

 * <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

 * are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.

 *

 * Copyright (C) 1999	     David A. Hinds

 * Copyright (C) 2004-2010   Dominik Brodowski

/**

 * pccard_read_tuple() - internal CIS tuple access

 * @s:		the struct pcmcia_socket where the card is inserted

 * @function:	the device function we loop for

 * @code:	which CIS code shall we look for?

 * @parse:	buffer where the tuple shall be parsed (or NULL, if no parse)

 *

 * pccard_read_tuple() reads out one tuple and attempts to parse it

/**

 * pccard_loop_tuple() - loop over tuples in the CIS

 * @s:		the struct pcmcia_socket where the card is inserted

 * @function:	the device function we loop for

 * @code:	which CIS code shall we look for?

 * @parse:	buffer where the tuple shall be parsed (or NULL, if no parse)

 * @priv_data:	private data to be passed to the loop_tuple function.

 * @loop_tuple:	function to call for each CIS entry of type @function. IT

 *		gets passed the raw tuple, the paresed tuple (if @parse is

 *		set) and @priv_data.

 *

 * pccard_loop_tuple() loops over all CIS entries of type @function, and

 * calls the @loop_tuple function for each entry. If the call to @loop_tuple

 * returns 0, the loop exits. Returns 0 on success or errorcode otherwise.

/*

 * pcmcia_io_cfg_data_width() - convert cfgtable to data path width parameter

/*

 * pcmcia_do_loop_config() - internal helper for pcmcia_loop_config()

 *

 * pcmcia_do_loop_config() is the internal callback for the call from

 * pcmcia_loop_config() to pccard_loop_tuple(). Data is transferred

 * by a struct pcmcia_cfg_mem.

 default values */

 check for matching Vcc? */

 set Vpp? */

 enable audio? */

 IO window settings? */

			/* For multifunction cards, by convention, we

			 * configure the network function with window 0,

 MEM window settings? */

 so far, we only set one memory window */

/**

 * pcmcia_loop_config() - loop over configuration options

 * @p_dev:	the struct pcmcia_device which we need to loop for.

 * @conf_check:	function to call for each configuration option.

 *		It gets passed the struct pcmcia_device and private data

 *		being passed to pcmcia_loop_config()

 * @priv_data:	private data to be passed to the conf_check function.

 *

 * pcmcia_loop_config() loops over all configuration options, and calls

 * the driver-specific conf_check() for each one, checking whether

 * it is a valid one. Returns 0 on success or errorcode otherwise.

/*

 * pcmcia_do_loop_tuple() - internal helper for pcmcia_loop_config()

 *

 * pcmcia_do_loop_tuple() is the internal callback for the call from

 * pcmcia_loop_tuple() to pccard_loop_tuple(). Data is transferred

 * by a struct pcmcia_cfg_mem.

/**

 * pcmcia_loop_tuple() - loop over tuples in the CIS

 * @p_dev:	the struct pcmcia_device which we need to loop for.

 * @code:	which CIS code shall we look for?

 * @priv_data:	private data to be passed to the loop_tuple function.

 * @loop_tuple:	function to call for each CIS entry of type @function. IT

 *		gets passed the raw tuple and @priv_data.

 *

 * pcmcia_loop_tuple() loops over all CIS entries of type @function, and

 * calls the @loop_tuple function for each entry. If the call to @loop_tuple

 * returns 0, the loop exits. Returns 0 on success or errorcode otherwise.

/*

 * pcmcia_do_get_tuple() - internal helper for pcmcia_get_tuple()

 *

 * pcmcia_do_get_tuple() is the internal callback for the call from

 * pcmcia_get_tuple() to pcmcia_loop_tuple(). As we're only interested in

 * the first tuple, return 0 unconditionally. Create a memory buffer large

 * enough to hold the content of the tuple, and fill it with the tuple data.

 * The caller is responsible to free the buffer.

/**

 * pcmcia_get_tuple() - get first tuple from CIS

 * @p_dev:	the struct pcmcia_device which we need to loop for.

 * @code:	which CIS code shall we look for?

 * @buf:        pointer to store the buffer to.

 *

 * pcmcia_get_tuple() gets the content of the first CIS entry of type @code.

 * It returns the buffer length (or zero). The caller is responsible to free

 * the buffer passed in @buf.

/*

 * pcmcia_do_get_mac() - internal helper for pcmcia_get_mac_from_cis()

 *

 * pcmcia_do_get_mac() is the internal callback for the call from

 * pcmcia_get_mac_from_cis() to pcmcia_loop_tuple(). We check whether the

 * tuple contains a proper LAN_NODE_ID of length 6, and copy the data

 * to struct net_device->dev_addr[i].

/**

 * pcmcia_get_mac_from_cis() - read out MAC address from CISTPL_FUNCE

 * @p_dev:	the struct pcmcia_device for which we want the address.

 * @dev:	a properly prepared struct net_device to store the info to.

 *

 * pcmcia_get_mac_from_cis() reads out the hardware MAC address from

 * CISTPL_FUNCE and stores it into struct net_device *dev->dev_addr which

 * must be set up properly by the driver (see examples!).

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Intel I82092AA PCI-PCMCIA bridge.

 *

 * (C) 2001 Red Hat, Inc.

 *

 * Author: Arjan Van De Ven <arjanv@redhat.com>

 * Loosly based on i82365.c from the pcmcia-cs package

 PCI core routines */

 the pccard structure and its functions */

 The card can do up to 4 sockets, allocate a structure for each of them */

		/* 0 = no socket,

		 * 1 = empty socket,

		 * 2 = card but not initialized,

		 * 3 = operational card

 base io address of the socket */

 The PCI device for the socket */

 shortcut */

 PCI Configuration Control */

 1 = present but empty */

	/* Now, specifiy that all interrupts are to be done as PCI interrupts

	 * bitmask, one bit per event, 1 = PCI interrupt, 0 = ISA interrupt

 PCI Interrupt Routing Register */

 Register the interrupt handler */

 basic value read/write functions */

 simple helper functions */

 External clock time, in nanoseconds.  120 ns = 8.33 MHz */

 Interrupt handler functionality */

 Inactive socket, should not happen */

 card status change register */

 no events on this socket */

 For IO/CARDS, bit 0 means "read the card" */

 Check for battery/ready events */

 no more events to handle */

 socket functions */

 Interface status register */

 Interface Status Register */

 IO cards have a different meaning of bits 0,1 */

 Also notice the inverse-logic on the bits */

 IO card */

 non I/O card */

 card is write protected */

 card is not busy */

 power is applied to the card */

 First, set the global controller options */

 Values for the IGENC register */

 The reset bit has "inverse" logic */

 IGENC, Interrupt and General Control Register */

 Power registers */

 default: disable resetdrv on resume */

 automatic power mngmnt */

 enable power */

 only write if changed */

 Enable specific interrupt events */

	/* now write the value and clear the (probably bogus) pending stuff

	 * by doing a dummy read

 Check error conditions */

 Turn off the window before changing anything */

 write the new values */

 Turn the window back on if needed */

 Turn off the window before changing anything */

 write the start address */

 write the stop address */

 card start */

 Enable the window if necessary */

/*======================================================================



    Common support code for the PCMCIA control functionality of

    integrated SOCs like the SA-11x0 and PXA2xx microprocessors.



    The contents of this file are subject to the Mozilla Public

    License Version 1.1 (the "License"); you may not use this file

    except in compliance with the License. You may obtain a copy of

    the License at http://www.mozilla.org/MPL/



    Software distributed under the License is distributed on an "AS

    IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or

    implied. See the License for the specific language governing

    rights and limitations under the License.



    The initial developer of the original code is John G. Dorsey

    <john+@cs.cmu.edu>.  Portions created by John G. Dorsey are

    Copyright (C) 1999 John G. Dorsey.  All Rights Reserved.



    Alternatively, the contents of this file may be used under the

    terms of the GNU Public License version 2 (the "GPL"), in which

    case the provisions of the GPL are applicable instead of the

    above.  If you wish to allow the use of your version of this file

    only under the terms of the GPL and not to allow others to use

    your version of this file under the MPL, indicate your decision

    by deleting the provisions above and replace them with the notice

    and other provisions required by the GPL.  If you do not delete

    the provisions above, a recipient may use your version of this

    file under either the MPL or the GPL.



 CD is active low by default */

/*

 * The CF 3.0 specification says that cards tie VS1 to ground and leave

 * VS2 open.  Many implementations do not wire up the VS signals, so we

 * provide hard-coded values as per the CF 3.0 spec.

 Make battery voltage state report 'good' */

	/* The power status of individual sockets is not available

	 * explicitly from the hardware, so we just remember the state

	 * and regurgitate it upon request:

/*

 * soc_common_pcmcia_config_skt

 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

 *

 * Convert PCMCIA socket state to our socket configure structure.

 restore the previous state */

		/*

		 * This really needs a better solution.  The IRQ

		 * may or may not be claimed by the driver.

/* soc_common_pcmcia_sock_init()

 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

 *

 * (Re-)Initialise the socket, turning on status interrupts

 * and PCMCIA bus.  This must wait for power to stabilise

 * so that the card status signals report correctly.

 *

 * Returns: 0

/*

 * soc_common_pcmcia_suspend()

 * ^^^^^^^^^^^^^^^^^^^^^^^^^^^

 *

 * Remove power on the socket, disable IRQs from the card.

 * Turn off status interrupts, and disable the PCMCIA bus.

 *

 * Returns: 0

 Let's poll for events in addition to IRQs since IRQ only is unreliable... */

/*

 * Service routine for socket driver interrupts (requested by the

 * low-level PCMCIA init() operation via soc_common_pcmcia_thread()).

 * The actual interrupt-servicing work is performed by

 * soc_common_pcmcia_thread(), largely because the Card Services event-

 * handling code performs scheduling operations which cannot be

 * executed from within an interrupt context.

/*

 *  Implements the get_status() operation for the in-kernel PCMCIA

 * service (formerly SS_GetStatus in Card Services). Essentially just

 * fills in bits in `status' according to internal driver state or

 * the value of the voltage detect chipselect register.

 *

 * As a debugging note, during card startup, the PCMCIA core issues

 * three set_socket() commands in a row the first with RESET deasserted,

 * the second with RESET asserted, and the last with RESET deasserted

 * again. Following the third set_socket(), a get_status() command will

 * be issued. The kernel is looking for the SS_READY flag (see

 * setup_socket(), reset_socket(), and unreset_socket() in cs.c).

 *

 * Returns: 0

/*

 * Implements the set_socket() operation for the in-kernel PCMCIA

 * service (formerly SS_SetSocket in Card Services). We more or

 * less punt all of this work and let the kernel handle the details

 * of power configuration, reset, &c. We also record the value of

 * `state' in order to regurgitate it to the PCMCIA core later.

/*

 * Implements the set_io_map() operation for the in-kernel PCMCIA

 * service (formerly SS_SetIOMap in Card Services). We configure

 * the map speed as requested, but override the address ranges

 * supplied by Card Services.

 *

 * Returns: 0 on success, -1 on error

/*

 * Implements the set_mem_map() operation for the in-kernel PCMCIA

 * service (formerly SS_SetMemMap in Card Services). We configure

 * the map speed as requested, but override the address ranges

 * supplied by Card Services.

 *

 * Returns: 0 on success, -ERRNO on error

/*

 * Implements the /sys/class/pcmcia_socket/??/status file.

 *

 * Returns: the number of characters added to the buffer

 should not be required; violates some lowlevel drivers */

	/*

	 * We initialize default socket timing here, because

	 * we are not guaranteed to see a SetIOMap operation at

	 * runtime.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/pcmcia/pxa2xx_vpac270.c

 *

 * Driver for Voipac PXA270 PCMCIA and CF sockets

 *

 * Copyright (C) 2010-2011 Marek Vasut <marek.vasut@gmail.com>

 SPDX-License-Identifier: GPL-2.0

/*

 * drivers/pcmcia/sa1100_h3600.c

 *

 * PCMCIA implementation routines for H3600

 *

 Disable CF bus: */

 Silently ignore Vpp, output enable, speaker enable. */

 Enable CF bus: */

	/*

	 * FIXME:  This doesn't fit well.  We don't have the mechanism in

	 * the generic PCMCIA layer to deal with the idea of two sockets

	 * on one bus.  We rely on the cs.c behaviour shutting down

	 * socket 0 then socket 1.

 hmm, does this suck power? */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/pcmcia/pxa2xx_colibri.c

 *

 * Driver for Toradex Colibri PXA270 CF socket

 *

 * Copyright (C) 2010 Marek Vasut <marek.vasut@gmail.com>

 Contents of this array are configured on-the-fly in init function */

 Colibri PXA270 */

 Colibri PXA320 */

 SPDX-License-Identifier: GPL-2.0

/*

 * linux/drivers/pcmcia/sa1100_neponset.c

 *

 * Neponset PCMCIA specific routines

/*

 * Neponset uses the Maxim MAX1600, with the following connections:

 *

 *   MAX1600      Neponset

 *

 *    A0VCC        SA-1111 GPIO A<1>

 *    A1VCC        SA-1111 GPIO A<0>

 *    A0VPP        CPLD NCR A0VPP

 *    A1VPP        CPLD NCR A1VPP

 *    B0VCC        SA-1111 GPIO A<2>

 *    B1VCC        SA-1111 GPIO A<3>

 *    B0VPP        ground (slot B is CF)

 *    B1VPP        ground (slot B is CF)

 *

 *     VX          VCC (5V)

 *     VY          VCC3_3 (3.3V)

 *     12INA       12V

 *     12INB       ground (slot B is CF)

 *

 * The MAX1600 CODE pin is tied to ground, placing the device in 

 * "Standard Intel code" mode. Refer to the Maxim data sheet for

 * the corresponding truth table.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/pcmcia/pxa2xx_trizeps4.c

 *

 * TRIZEPS PCMCIA specific routines.

 *

 * Author:	Jürgen Schindele

 * Created:	20 02, 2006

 * Copyright:	Jürgen Schindele

	/* we dont have voltage/card/ready detection

	 * so we dont need interrupts for it

 release the reset of this card */

 enable_irq empty */

 disable_irq empty */

 just fill in fix states */

 on ConXS we only have one slot. Second is inactive */

 we do nothing here just check a bit */

 we only have 3.3V */

 on ConXS we only have one slot. Second is inactive */

 default is on */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/pcmcia/sa1100_badge4.c

 *

 * BadgePAD 4 PCMCIA specific routines

 *

 *   Christopher Hoover <ch@hpl.hp.com>

 *

 * Copyright (C) 2002 Hewlett-Packard Company

/*

 * BadgePAD 4 Details

 *

 * PCM Vcc:

 *

 *  PCM Vcc on BadgePAD 4 can be jumpered for 3v3 (short pins 1 and 3

 *  on JP6) or 5v0 (short pins 3 and 5 on JP6).

 *

 * PCM Vpp:

 *

 *  PCM Vpp on BadgePAD 4 can be jumpered for 12v0 (short pins 4 and 6

 *  on JP6) or tied to PCM Vcc (short pins 2 and 4 on JP6).  N.B.,

 *  12v0 operation requires that the power supply actually supply 12v0

 *  via pin 7 of JP7.

 *

 * CF Vcc:

 *

 *  CF Vcc on BadgePAD 4 can be jumpered either for 3v3 (short pins 1

 *  and 2 on JP10) or 5v0 (short pins 2 and 3 on JP10).

 *

 * Unfortunately there's no way programmatically to determine how a

 * given board is jumpered.  This code assumes a default jumpering

 * as described below.

 *

 * If the defaults aren't correct, you may override them with a pcmv

 * setup argument: pcmv=<pcm vcc>,<pcm vpp>,<cf vcc>.  The units are

 * tenths of volts; e.g. pcmv=33,120,50 indicates 3v3 PCM Vcc, 12v0

 * PCM Vpp, and 5v0 CF Vcc.

 *

 pins 3 and 5 jumpered on JP6 */

 pins 2 and 4 jumpered on JP6 */

 pins 1 and 2 jumpered on JP10 */

 Apply power regardless of the jumpering.

 return -1;

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/pcmcia/pxa/pxa_cm_x270.c

 *

 * Compulab Ltd., 2003, 2007, 2008

 * Mike Rapoport <mike@compulab.co.il>

/*======================================================================



    Device driver for Databook TCIC-2 PCMCIA controller



    tcic.c 1.111 2000/02/15 04:13:12



    The contents of this file are subject to the Mozilla Public

    License Version 1.1 (the "License"); you may not use this file

    except in compliance with the License. You may obtain a copy of

    the License at http://www.mozilla.org/MPL/



    Software distributed under the License is distributed on an "AS

    IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or

    implied. See the License for the specific language governing

    rights and limitations under the License.



    The initial developer of the original code is David A. Hinds

    <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

    are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.



    Alternatively, the contents of this file may be used under the

    terms of the GNU General Public License version 2 (the "GPL"), in which

    case the provisions of the GPL are applicable instead of the

    above.  If you wish to allow the use of your version of this file

    only under the terms of the GPL and not to allow others to use

    your version of this file under the MPL, indicate your decision

    by deleting the provisions above and replace them with the notice

    and other provisions required by the GPL.  If you do not delete

    the provisions above, a recipient may use your version of this

    file under either the MPL or the GPL.

    

====================================================================*/

 Parameters that can be set with 'insmod' */

 The base port address of the TCIC-2 chip */

 Specify a socket number to ignore */

 Probe for safe interrupts? */

 Bit map of interrupts to choose from */

 The card status change interrupt -- 0 means autoselect */

 Poll status interval -- 0 means default to interrupt */

 Delay for card status double-checking */

 CCLK external clock time, in nanoseconds.  70 ns = 14.31818 MHz */

====================================================================*/

====================================================================*/

/* Trick when selecting interrupts: the TCIC sktirq pin is supposed

====================================================================*/

 Time conversion functions */

====================================================================*/

 Generate one interrupt */

 Turn off interrupts */

 Don't probe level-triggered interrupts -- reserved for PCI */

 Fallback: just find interrupts that aren't in use */

/*======================================================================



    See if a card is present, powered up, in IO mode, and already

    bound to a (non-PCMCIA) Linux driver.



    We make an exception for cards that look like serial devices.

    

 region is busy */

/*======================================================================



    This returns the revision code for the specified socket.

    

====================================================================*/

 See if resetting the controller does any good */

 only 16-bit cards, memory windows must be size-aligned */

 No PCI or CardBus support */

 irq 14, 11, 10, 7, 6, 5, 4, 3 */

 4K minimum window size */

 Set up polling */

 Build interrupt mask */

 irq 14, 11, 10, 7, 6, 5, 4, 3 */

 Scan interrupts */

 Check for only two interrupts available */

 Avoid irq 12 unless it is explicitly requested */

 jump start interrupt handler, if needed */

 init_tcic */

====================================================================*/

 exit_tcic */

====================================================================*/

 Schedule next poll, if needed */

 tcic_interrupt */

 tcic_timer */

====================================================================*/

 tcic_get_status */

====================================================================*/

 Some general setup stuff, and configure status interrupt */

 Card status change interrupt mask */

 For the ISA bus, the irq should be active-high totem-pole */

 tcic_set_socket */

====================================================================*/

 Check to see that len+1 is power of two, etc */

 tcic_set_io_map */

====================================================================*/

 tcic_set_mem_map */

====================================================================*/

====================================================================*/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2007 PA Semi, Inc

 *

 * Maintained by: Olof Johansson <olof@lixom.net>

 *

 * Based on drivers/pcmcia/omap_cf.c

 the timer is primarily to kick this socket's pccardd */

 NOTE CF is always 3VCARD */

 "reset" means no power in our case */

 enwr */

 enwr */

 reserve chip-select regions */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PCMCIA 16-bit resource management functions

 *

 * The initial developer of the original code is David A. Hinds

 * <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

 * are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.

 *

 * Copyright (C) 1999	     David A. Hinds

 * Copyright (C) 2004-2010   Dominik Brodowski

 Access speed for IO windows */

 if there is no callback, we can assume that everything is OK */

/**

 * release_io_space() - release IO ports allocated with alloc_io_space()

 * @s: pcmcia socket

 * @res: resource to release

 *

 Free the window if no one else is using it */

/**

 * alloc_io_space() - allocate IO ports for use by a PCMCIA device

 * @s: pcmcia socket

 * @res: resource to allocate (begin: begin, end: size)

 * @lines: number of IO lines decoded by the PCMCIA card

 *

 * Special stuff for managing IO windows, because they are scarce

/*

 * pcmcia_access_config() - read or write card configuration registers

 *

 * pcmcia_access_config() reads and writes configuration registers in

 * attribute memory.  Memory window 0 is reserved for this and the tuple

 * reading services. Drivers must use pcmcia_read_config_byte() or

 * pcmcia_write_config_byte().

/*

 * pcmcia_read_config_byte() - read a byte from a card configuration register

 *

 * pcmcia_read_config_byte() reads a byte from a configuration register in

 * attribute memory.

/*

 * pcmcia_write_config_byte() - write a byte to a card configuration register

 *

 * pcmcia_write_config_byte() writes a byte to a configuration register in

 * attribute memory.

/**

 * pcmcia_map_mem_page() - modify iomem window to point to a different offset

 * @p_dev: pcmcia device

 * @res: iomem resource already enabled by pcmcia_request_window()

 * @offset: card_offset to map

 *

 * pcmcia_map_mem_page() modifies what can be read and written by accessing

 * an iomem range previously enabled by pcmcia_request_window(), by setting

 * the card_offset value to @offset.

/**

 * pcmcia_fixup_iowidth() - reduce io width to 8bit

 * @p_dev: pcmcia device

 *

 * pcmcia_fixup_iowidth() allows a PCMCIA device driver to reduce the

 * IO width to 8bit after having called pcmcia_enable_device()

 * previously.

/**

 * pcmcia_fixup_vpp() - set Vpp to a new voltage level

 * @p_dev: pcmcia device

 * @new_vpp: new Vpp voltage

 *

 * pcmcia_fixup_vpp() allows a PCMCIA device driver to set Vpp to

 * a new voltage level between calls to pcmcia_enable_device()

 * and pcmcia_disable_device().

/**

 * pcmcia_release_configuration() - physically disable a PCMCIA device

 * @p_dev: pcmcia device

 *

 * pcmcia_release_configuration() is the 1:1 counterpart to

 * pcmcia_enable_device(): If a PCMCIA device is no longer used by any

 * driver, the Vpp voltage is set to 0, IRQs will no longer be generated,

 * and I/O ranges will be disabled. As pcmcia_release_io() and

 * pcmcia_release_window() still need to be called, device drivers are

 * expected to call pcmcia_disable_device() instead.

 Is this correct? */

/**

 * pcmcia_release_io() - release I/O allocated by a PCMCIA device

 * @p_dev: pcmcia device

 *

 * pcmcia_release_io() releases the I/O ranges allocated by a PCMCIA

 * device.  This may be invoked some time after a card ejection has

 * already dumped the actual socket configuration, so if the client is

 * "stale", we don't bother checking the port ranges against the

 * current socket values.

 pcmcia_release_io */

/**

 * pcmcia_release_window() - release reserved iomem for PCMCIA devices

 * @p_dev: pcmcia device

 * @res: iomem resource to release

 *

 * pcmcia_release_window() releases &struct resource *res which was

 * previously reserved by calling pcmcia_request_window().

 Shut down memory window */

 Release system memory */

 pcmcia_release_window */

/**

 * pcmcia_enable_device() - set up and activate a PCMCIA device

 * @p_dev: the associated PCMCIA device

 *

 * pcmcia_enable_device() physically enables a PCMCIA device. It parses

 * the flags passed to in @flags and stored in @p_dev->flags and sets up

 * the Vpp voltage, enables the speaker line, I/O ports and store proper

 * values to configuration registers.

 Do power control.  We don't allow changes in Vcc. */

 Pick memory or I/O card, DMA mode, interrupt */

 Set up CIS configuration registers */

 Configure I/O windows */

 pcmcia_enable_device */

/**

 * pcmcia_request_io() - attempt to reserve port ranges for PCMCIA devices

 * @p_dev: the associated PCMCIA device

 *

 * pcmcia_request_io() attempts to reserve the IO port ranges specified in

 * &struct pcmcia_device @p_dev->resource[0] and @p_dev->resource[1]. The

 * "start" value is the requested start of the IO port resource; "end"

 * reflects the number of ports requested. The number of IO lines requested

 * is specified in &struct pcmcia_device @p_dev->io_lines.

 release the previously allocated resource */

 but preserve the settings, for they worked... */

 pcmcia_request_io */

/**

 * pcmcia_request_irq() - attempt to request a IRQ for a PCMCIA device

 * @p_dev: the associated PCMCIA device

 * @handler: IRQ handler to register

 *

 * pcmcia_request_irq() is a wrapper around request_irq() which allows

 * the PCMCIA core to clean up the registration in pcmcia_disable_device().

 * Drivers are free to use request_irq() directly, but then they need to

 * call free_irq() themselfves, too. Also, only %IRQF_SHARED capable IRQ

 * handlers are allowed.

 mask of IRQs already reserved by other cards, we should avoid using them */

/**

 * pcmcia_setup_isa_irq() - determine whether an ISA IRQ can be used

 * @p_dev: the associated PCMCIA device

 * @type:  IRQ type (flags)

 *

 * locking note: must be called with ops_mutex locked.

 marked as available by driver, not blocked by userspace? */

 avoid an IRQ which is already used by another PCMCIA card */

		/* register the correct driver, if possible, to check whether

		 * registering a dummy handle works, i.e. if the IRQ isn't

 CONFIG_PCMCIA_PROBE */

 CONFIG_PCMCIA_PROBE */

/**

 * pcmcia_setup_irq() - determine IRQ to be used for device

 * @p_dev: the associated PCMCIA device

 *

 * locking note: must be called with ops_mutex locked.

 already assigned? */

 prefer an exclusive ISA irq */

 but accept a shared ISA irq */

 but use the PCI irq otherwise */

/**

 * pcmcia_request_window() - attempt to reserve iomem for PCMCIA devices

 * @p_dev: the associated PCMCIA device

 * @res: &struct resource pointing to p_dev->resource[2..5]

 * @speed: access speed

 *

 * pcmcia_request_window() attepts to reserve an iomem ranges specified in

 * &struct resource @res pointing to one of the entries in

 * &struct pcmcia_device @p_dev->resource[2..5]. The "start" value is the

 * requested start of the IO mem resource; "end" reflects the size

 * requested.

 Window size defaults to smallest available */

 Allocate system memory window */

 Configure the socket controller */

 Return window handle */

 convert to new-style resources */

 pcmcia_request_window */

/**

 * pcmcia_disable_device() - disable and clean up a PCMCIA device

 * @p_dev: the associated PCMCIA device

 *

 * pcmcia_disable_device() is the driver-callable counterpart to

 * pcmcia_enable_device(): If a PCMCIA device is no longer used,

 * drivers are expected to clean up and disable the device by calling

 * this function. Any I/O ranges (iomem and ioports) will be released,

 * the Vpp voltage will be set to 0, and IRQs will no longer be

 * generated -- at least if there is no other card function (of

 * multifunction devices) being used.

/*======================================================================



    Device driver for the PCMCIA control functionality of StrongARM

    SA-1100 microprocessors.



    The contents of this file are subject to the Mozilla Public

    License Version 1.1 (the "License"); you may not use this file

    except in compliance with the License. You may obtain a copy of

    the License at http://www.mozilla.org/MPL/



    Software distributed under the License is distributed on an "AS

    IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or

    implied. See the License for the specific language governing

    rights and limitations under the License.



    The initial developer of the original code is John G. Dorsey

    <john+@cs.cmu.edu>.  Portions created by John G. Dorsey are

    Copyright (C) 1999 John G. Dorsey.  All Rights Reserved.



    Alternatively, the contents of this file may be used under the

    terms of the GNU Public License version 2 (the "GPL"), in which

    case the provisions of the GPL are applicable instead of the

    above.  If you wish to allow the use of your version of this file

    only under the terms of the GPL and not to allow others to use

    your version of this file under the MPL, indicate your decision

    by deleting the provisions above and replace them with the notice

    and other provisions required by the GPL.  If you do not delete

    the provisions above, a recipient may use your version of this

    file under either the MPL or the GPL.

    

	/*

	 * Initialise any "on-board" PCMCIA sockets.

/* sa11x0_pcmcia_init()

 * ^^^^^^^^^^^^^^^^^^^^

 *

 * This routine performs low-level PCMCIA initialization and then

 * registers this socket driver with Card Services.

 *

 * Returns: 0 on success, -ve error code on failure

/* sa11x0_pcmcia_exit()

 * ^^^^^^^^^^^^^^^^^^^^

 * Invokes the low-level kernel service to free IRQs associated with this

 * socket controller and reset GPIO edge detection.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/pcmcia/pxa2xx_palmtx.c

 *

 * Driver for Palm T|X PCMCIA

 *

 * Copyright (C) 2007-2011 Marek Vasut <marek.vasut@gmail.com>

 always inserted */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Toshiba e740 PCMCIA specific routines.

 *

 * (c) 2004 Ian Molton <spyro@f2s.com>

 Socket off */

 socket on */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * cistpl.c -- 16-bit PCMCIA Card Information Structure parser

 *

 * The initial developer of the original code is David A. Hinds

 * <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

 * are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.

 *

 * (C) 1999		David A. Hinds

 Convert an extended speed byte to a time in nanoseconds */

 Convert a power byte to a current in 0.1 microamps */

 Upper limit on reasonable # of tuples */

 Bits in IRQInfo1 field */

 16-bit CIS? */

/*

 * set_cis_map() - map the card memory at "card_offset" into virtual space.

 *

 * If flags & MAP_ATTRIB, map the attribute space, otherwise

 * map the memory space.

 *

 * Must be called with ops_mutex held.

 Bits in attr field */

/*

 * pcmcia_read_cis_mem() - low-level function to read CIS memory

 *

 * must be called with ops_mutex held

		/* Indirect accesses use a bunch of special registers at fixed

/*

 * pcmcia_write_cis_mem() - low-level function to write CIS memory

 *

 * Probably only useful for writing one-byte registers. Must be called

 * with ops_mutex held.

		/* Indirect accesses use a bunch of special registers at fixed

/*

 * read_cis_cache() - read CIS memory or its associated cache

 *

 * This is a wrapper around read_cis_mem, with the same interface,

 * but which caches information, for cards whose CIS may not be

 * readable all the time.

 Copy data into the cache */

/**

 * destroy_cis_cache() - destroy the CIS cache

 * @s:		pcmcia_socket for which CIS cache shall be destroyed

 *

 * This destroys the CIS cache but keeps any fake CIS alive. Must be

 * called with ops_mutex held.

/*

 * verify_cis_cache() - does the CIS match what is in the CIS cache?

/*

 * pcmcia_replace_cis() - use a replacement CIS instead of the card's CIS

 *

 * For really bad cards, we provide a facility for uploading a

 * replacement CIS.

 The high-level CIS tuple services */

 Assume presence of a LONGLINK_C to address 0 */

 Get indirect link from the MFC tuple */

 Move to the next indirect link */

		/* This is ugly, but a common CIS error is to code the long

 Then, we try the wrong spot... */

 End of chain?  Follow long link if possible */

 Is this a link tuple?  Make a note of it */

 Follow all the MFC links */

 Follow exactly one of the links */

 Parsing routines for individual tuples */

/* The following routines are all used to parse the nightmarish

 * config table entries.

 Process optional features */

 Power options */

 Timing options */

 I/O window options */

 Interrupt options */

 Misc features */

/**

 * pccard_validate_cis() - check whether card has a sensible CIS

 * @s:		the struct pcmcia_socket we are to check

 * @info:	returns the number of tuples in the (valid) CIS, or 0

 *

 * This tries to determine if a card has a sensible CIS.  In @info, it

 * returns the number of tuples in the CIS, or 0 if the CIS looks bad. The

 * checks include making sure several critical tuples are present and

 * valid; seeing if the total number of tuples is reasonable; and

 * looking for tuples that use reserved codes.

 *

 * The function returns 0 on success.

 We do not want to validate the CIS cache... */

	/* First tuple should be DEVICE; we should really have either that

	/* All cards should have a MANFID tuple, and/or a VERS_1 or VERS_2

	   tuple, for card identification.  Certain old D-Link and Linksys

 invalidate CIS cache on failure */

		/* We differentiate between dev_ok, ident_ok and count

		   failures to allow for an override for anonymous cards

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ds.c -- 16-bit PCMCIA core support

 *

 * The initial developer of the original code is David A. Hinds

 * <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds

 * are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.

 *

 * (C) 1999		David A. Hinds

 * (C) 2003 - 2010	Dominik Brodowski

====================================================================*/

 Module parameters */

====================================================================*/

======================================================================*/

/**

 * new_id_store() - add a new PCMCIA device ID to this driver and re-probe devices

 * @driver: target device driver

 * @buf: buffer for scanning device ID data

 * @count: input size

 *

 * Adds a new dynamic PCMCIA device ID to this driver,

 * and causes the driver to probe for all devices again.

/**

 * pcmcia_register_driver - register a PCMCIA driver with the bus core

 * @driver: the &driver being registered

 *

 * Registers a PCMCIA driver with the PCMCIA bus core.

 initialize common fields */

/**

 * pcmcia_unregister_driver - unregister a PCMCIA driver with the bus core

 * @driver: the &driver being unregistered

 pcmcia_device handling */

 set up some more device information */

/*

 * Removes a PCMCIA card from the device tree and socket list.

 unregister all pcmcia_devices registered with this socket, except leftover */

	/* If we're removing the primary module driving a

	 * pseudo multi-function card, we need to unbind

	 * all devices

 detach the "instance" */

 check for proper unloading */

 references from pcmcia_device_probe */

/*

 * pcmcia_device_query -- determine information about a pcmcia device

		/* rule of thumb: cards with no FUNCID, but with

		 * common memory device geometry information, are

 max of 2 PFC devices */

 max of 4 devices overall */

 by default don't allow DMA */

	/*

	 * p_dev->function_config must be the same for all card functions.

	 * Note that this is serialized by ops_mutex, so that only one

	 * such struct will be created.

 Add to the list in pcmcia_bus_socket */

 try again, but later... */

 try again, but later... */

		/* Set up as an anonymous card. If we don't have anonymous

		   memory support then just error the card as there is no

		   point trying to second guess.



		   Note: some cards have just a device entry, it may be

	/* some device information might have changed because of a CIS

	 * update or because we can finally read it correctly... so

	/* if the CIS changed, we need to check whether the number of

 does this cis override add or remove functions? */

 we need to re-start */

	/* If the PCMCIA device consists of two pseudo devices,

	 * call pcmcia_device_add() -- which will fail if both

	/* we re-scan all devices, not just the ones connected to this

/**

 * pcmcia_load_firmware - load CIS from userspace if device-provided is broken

 * @dev: the pcmcia device which needs a CIS override

 * @filename: requested filename in /lib/firmware/

 *

 * This uses the in-kernel firmware loading mechanism to use a "fake CIS" if

 * the one provided by the card is broken. The firmware files reside in

 * /lib/firmware/ in userspace.

 we need to re-start if the number of functions changed */

 update information */

 requery (as number of functions might have changed) */

 !CONFIG_PCMCIA_LOAD_CIS */

		/* if this is a pseudo-multi-function device,

		/* also, FUNC_ID matching needs to be activated by userspace

		 * after it has re-checked that there is no possible module

		 * with a prod_id/manf_id/card_id match.

 match dynamic devices first */

 calculate hashes */

*********************** runtime PM support ***************************/

*********************** per-device sysfs output ***************************/

 calculate hashes */

 PM support, also needed for reset */

 to be on the safe side... */

 first, remove the card */

 now, add the new card */

/*

 * NOTE: This is racy. There's no guarantee the card will still be

 * physically present, even if the call to this function returns

 * non-NULL. Furthermore, the device driver most likely is unbound

 * almost immediately, so the timeframe where pcmcia_dev_present

 * returns NULL is probably really really small.

 unregister any unbound devices */

 the pcmcia_bus_interface is used to handle pcmcia socket devices */

fs_initcall(init_pcmcia_bus); /* one level after subsys_initcall so that

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/pcmcia/pxa/pxa_cm_x2xx.c

 *

 * Compulab Ltd., 2003, 2007, 2008

 * Mike Rapoport <mike@compulab.co.il>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/pcmcia/pxa2xx_lubbock.c

 *

 * Author:	George Davis

 * Created:	Jan 10, 2002

 * Copyright:	MontaVista Software Inc.

 *

 * Originally based upon linux/drivers/pcmcia/sa1100_neponset.c

 *

 * Lubbock PCMCIA specific routines.

	/* Lubbock uses the Maxim MAX1602, with the following connections:

	 *

	 * Socket 0 (PCMCIA):

	 *	MAX1602	Lubbock		Register

	 *	Pin	Signal

	 *	-----	-------		----------------------

	 *	A0VPP	S0_PWR0		SA-1111 GPIO A<0>

	 *	A1VPP	S0_PWR1		SA-1111 GPIO A<1>

	 *	A0VCC	S0_PWR2		SA-1111 GPIO A<2>

	 *	A1VCC	S0_PWR3		SA-1111 GPIO A<3>

	 *	VX	VCC

	 *	VY	+3.3V

	 *	12IN	+12V

	 *	CODE	+3.3V		Cirrus  Code, CODE = High (VY)

	 *

	 * Socket 1 (CF):

	 *	MAX1602	Lubbock		Register

	 *	Pin	Signal

	 *	-----	-------		----------------------

	 *	A0VPP	GND		VPP is not connected

	 *	A1VPP	GND		VPP is not connected

	 *	A0VCC	S1_PWR0		MISC_WR<14>

	 *	A1VCC	S1_PWR1		MISC_WR<15>

	 *	VX	VCC

	 *	VY	+3.3V

	 *	12IN	GND		VPP is not connected

	 *	CODE	+3.3V		Cirrus  Code, CODE = High (VY)

	 *

		/*

		 * HACK ALERT:

		 * We can't sense the voltage properly on Lubbock before

		 * actually applying some power to the socket (catch 22).

		 * Resense the socket Voltage Sense pins after applying

		 * socket power.

		 *

		 * Note: It takes about 2.5ms for the MAX1602 VCC output

		 * to rise.

			/*

			 * Switch to 5V,  Configure socket with 5V voltage

			/*

			 * It takes about 100ms to turn off Vcc.

			/*

			 * We need to hack around the const qualifier as

			 * well to keep this ugly workaround localized and

			 * not force it to the rest of the code. Barf bags

			 * available in the seat pocket in front of you!

 SPDX-License-Identifier: GPL-2.0-only

/*======================================================================



  Device driver for the PCMCIA control functionality of PXA2xx

  microprocessors.





    (c) Ian Molton (spyro@f2s.com) 2003

    (c) Stefan Eletzhofer (stefan.eletzhofer@inquant.de) 2003,4



    derived from sa11xx_base.c



     Portions created by John G. Dorsey are

     Copyright (C) 1999 John G. Dorsey.



/*

 * Personal Computer Memory Card International Association (PCMCIA) sockets

 PCMCIA Partition Space [byte]   */

 PCMCIA Space [byte]             */

 PCMCIA I/O Space [byte]         */

 PCMCIA Attribute Space [byte]   */

 PCMCIA Memory Space [byte]      */

 PCMCIA 0 Space [byte]           */

 PCMCIA 0 I/O Space [byte]       */

 PCMCIA 0 Attribute Space [byte] */

 PCMCIA 0 Memory Space [byte]    */

 PCMCIA 1 Space [byte]           */

 PCMCIA 1 I/O Space [byte]       */

 PCMCIA 1 Attribute Space [byte] */

 PCMCIA 1 Memory Space [byte]    */

 PCMCIA [0..1]                   */ \

 PCMCIA I/O [0..1]               */

 PCMCIA Attribute [0..1]         */ \

 PCMCIA Memory [0..1]            */ \

 PCMCIA 0                        */

 PCMCIA 0 I/O                    */

 PCMCIA 0 Attribute              */

 PCMCIA 0 Memory                 */

 PCMCIA 1                        */

 PCMCIA 1 I/O                    */

 PCMCIA 1 Attribute              */

 PCMCIA 1 Memory                 */

/* This function returns the (approximate) command assertion period, in

 * nanoseconds, for a given CPU clock frequency and MCXX_ASST value:

	/*

	 * We have at least one socket, so set MECR:CIT

	 * (Card Is There)

 Set MECR:NOS (Number Of Sockets) */

 Provide our PXA2xx specific timing routines. */

 Initialize processor specific parameters */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Sharp SL-C7xx Series PCMCIA routines

 *

 * Copyright (c) 2004-2005 Richard Purdie

 *

 * Based on Sharp's 2.4 kernel patches and pxa2xx_mainstone.c

 Shared power controls need to be handled carefully */

 card eject */

 keep vs1,vs2 */

 power on */

 card detect */

 Enable interrupt */

/*

 * Freescale Hypervisor Management Driver



 * Copyright (C) 2008-2011 Freescale Semiconductor, Inc.

 * Author: Timur Tabi <timur@freescale.com>

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2.  This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

 *

 * The Freescale hypervisor management driver provides several services to

 * drivers and applications related to the Freescale hypervisor:

 *

 * 1. An ioctl interface for querying and managing partitions.

 *

 * 2. A file interface to reading incoming doorbells.

 *

 * 3. An interrupt handler for shutting down the partition upon receiving the

 *    shutdown doorbell from a manager partition.

 *

 * 4. A kernel interface for receiving callbacks when a managed partition

 *    shuts down.

/*

 * Ioctl interface for FSL_HV_IOCTL_PARTITION_RESTART

 *

 * Restart a running partition

 Get the parameters from the user */

/*

 * Ioctl interface for FSL_HV_IOCTL_PARTITION_STATUS

 *

 * Query the status of a partition

 Get the parameters from the user */

/*

 * Ioctl interface for FSL_HV_IOCTL_PARTITION_START

 *

 * Start a stopped partition.

 Get the parameters from the user */

/*

 * Ioctl interface for FSL_HV_IOCTL_PARTITION_STOP

 *

 * Stop a running partition

 Get the parameters from the user */

/*

 * Ioctl interface for FSL_HV_IOCTL_MEMCPY

 *

 * The FH_MEMCPY hypercall takes an array of address/address/size structures

 * to represent the data being copied.  As a convenience to the user, this

 * ioctl takes a user-create buffer and a pointer to a guest physically

 * contiguous buffer in the remote partition, and creates the

 * address/address/size array for the hypercall.

 Offset within a page of the local buffer */

 return value from get_user_pages_fast() */

 The next address in the remote buffer */

 The number of bytes left to copy */

 Get the parameters from the user */

	/*

	 * One partition must be local, the other must be remote.  In other

	 * words, if source and target are both -1, or are both not -1, then

	 * return an error.

	/*

	 * The array of pages returned by get_user_pages_fast() covers only

	 * page-aligned memory.  Since the user buffer is probably not

	 * page-aligned, we need to handle the discrepancy.

	 *

	 * We calculate the offset within a page of the S/G list, and make

	 * adjustments accordingly.  This will result in a page list that looks

	 * like this:

	 *

	 *      ----    <-- first page starts before the buffer

	 *     |    |

	 *     |////|-> ----

	 *     |////|  |    |

	 *      ----   |    |

	 *             |    |

	 *      ----   |    |

	 *     |////|  |    |

	 *     |////|  |    |

	 *     |////|  |    |

	 *      ----   |    |

	 *             |    |

	 *      ----   |    |

	 *     |////|  |    |

	 *     |////|  |    |

	 *     |////|  |    |

	 *      ----   |    |

	 *             |    |

	 *      ----   |    |

	 *     |////|  |    |

	 *     |////|-> ----

	 *     |    |   <-- last page ends after the buffer

	 *      ----

	 *

	 * The distance between the start of the first page and the start of the

	 * buffer is lb_offset.  The hashed (///) areas are the parts of the

	 * page list that contain the actual buffer.

	 *

	 * The advantage of this approach is that the number of pages is

	 * equal to the number of entries in the S/G list that we give to the

	 * hypervisor.

 Allocate the buffers we need */

	/*

	 * 'pages' is an array of struct page pointers that's initialized by

	 * get_user_pages_fast().

	/*

	 * sg_list is the list of fh_sg_list objects that we pass to the

	 * hypervisor.

 Get the physical addresses of the source buffer */

	/*

	 * Build the fh_sg_list[] array.  The first page is special

	 * because it's misaligned.

 local to remote */

 remote to local */

/*

 * Ioctl interface for FSL_HV_IOCTL_DOORBELL

 *

 * Ring a doorbell

 Get the parameters from the user. */

 Get the parameters from the user. */

/*

 * Ioctl main entry point

 Linked list of processes that have us open */

 spinlock for db_list */

 The size of the doorbell event queue.  This must be a power of two. */

 Returns the next head/tail pointer, wrapping around the queue if necessary */

 Per-open data structure */

 Linked list of ISRs that we registered */

 Per-ISR data structure */

 The doorbell handle */

 The partition handle, if used */

/*

 * Add a doorbell to all of the doorbell queues

 Prevent another core from modifying db_list */

			/*

			 * This memory barrier eliminates the need to grab

			 * the spinlock for dbq.

/*

 * Interrupt handler for all doorbells

 *

 * We use the same interrupt handler for all doorbells.  Whenever a doorbell

 * is rung, and we receive an interrupt, we just put the handle for that

 * doorbell (passed to us as *data) into all of the queues.

/*

 * State change thread function

 *

 * The state change notification arrives in an interrupt, but we can't call

 * blocking_notifier_call_chain() in an interrupt handler.  We could call

 * atomic_notifier_call_chain(), but that would require the clients' call-back

 * function to run in interrupt context.  Since we don't want to impose that

 * restriction on the clients, we use a threaded IRQ to process the

 * notification in kernel context.

/*

 * Interrupt handler for state-change doorbells

 It's still a doorbell, so add it to all the queues. */

 Determine the new state, and if it's stopped, notify the clients. */

/*

 * Returns a bitmask indicating whether a read will block

/*

 * Return the handles for any incoming doorbells

 *

 * If there are doorbell handles in the queue for this open instance, then

 * return them to the caller as an array of 32-bit integers.  Otherwise,

 * block until there is at least one handle to return.

 for put_user() */

 Make sure we stop when the user buffer is full. */

 Local copy of doorbell queue data */

		/*

		 * If the queue is empty, then either we're done or we need

		 * to block.  If the application specified O_NONBLOCK, then

		 * we return the appropriate error code.

		/*

		 * Even though we have an smp_wmb() in the ISR, the core

		 * might speculatively execute the "dbell = ..." below while

		 * it's evaluating the if-statement above.  In that case, the

		 * value put into dbell could be stale if the core accepts the

		 * speculation. To prevent that, we need a read memory barrier

		 * here as well.

		/* Copy the data to a temporary local buffer, because

		 * we can't call copy_to_user() from inside a spinlock

/*

 * Open the driver and prepare for reading doorbells.

 *

 * Every time an application opens the driver, we create a doorbell queue

 * for that file handle.  This queue is used for any incoming doorbells.

/*

 * Close the driver

/*

 * Returns the handle of the parent of the given node

 *

 * The handle is the value of the 'hv-handle' property

 It's not really possible for this to fail */

	/*

	 * The proper name for the handle property is "hv-handle", but some

	 * older versions of the hypervisor used "reg".

 This can happen only if the node is malformed */

/*

 * Register a callback for failover events

 *

 * This function is called by device drivers to register their callback

 * functions for fail-over events.

/*

 * Unregister a callback for failover events

/*

 * Return TRUE if we're running under FSL hypervisor

 *

 * This function checks to see if we're running under the Freescale

 * hypervisor, and returns zero if we're not, or non-zero if we are.

 *

 * First, it checks if MSR[GS]==1, which means we're running under some

 * hypervisor.  Then it checks if there is a hypervisor node in the device

 * tree.  Currently, that means there needs to be a node in the root called

 * "hypervisor" and which has a property named "fsl,hv-version".

/*

 * Freescale hypervisor management driver init

 *

 * This function is called when this module is loaded.

 *

 * Register ourselves as a miscellaneous driver.  This will register the

 * fops structure and create the right sysfs entries for udev.

 The shutdown doorbell gets its own ISR */

			/*

			 * The state change doorbell triggers a notification if

			 * the state of the managed partition changes to

			 * "stopped". We need a separate interrupt handler for

			 * that, and we also need to know the handle of the

			 * target partition, not just the handle of the

			 * doorbell.

/*

 * Freescale hypervisor management driver termination

 *

 * This function is called when this driver is unloaded.

 SPDX-License-Identifier: (GPL-2.0 OR CDDL-1.0) */

/*

 * vboxguest vmm-req and hgcm-call code, VBoxGuestR0LibHGCMInternal.cpp,

 * VBoxGuestR0LibGenericRequest.cpp and RTErrConvertToErrno.cpp in vbox svn.

 *

 * Copyright (C) 2006-2016 Oracle Corporation

 Get the pointer to the first parameter of a HGCM call request. */

 The max parameter buffer size for a user request. */

 The max parameter buffer size for a kernel request. */

 This protects vbg_log_buf and serializes VBG_DEBUG_PORT accesses */

 Note this function returns a VBox status code, not a negative errno!! */

	/*

	 * The host changes the request as a result of the outl, make sure

	 * the outl and any reads of the req happen in the correct order.

/**

 * Preprocesses the HGCM call, validate parameters, alloc bounce buffers and

 * figure out how much extra storage we need for page lists.

 * Return: 0 or negative errno value.

 * @src_parm:         Pointer to source function call parameters

 * @parm_count:       Number of function call parameters.

 * @bounce_bufs_ret:  Where to return the allocated bouncebuffer array

 * @extra:            Where to return the extra request space needed for

 *                    physical page lists.

/**

 * Translates linear address types to page list direction flags.

 *

 * Return: page list flags.

 * @type:  The type.

/**

 * Initializes the call request that we're sending to the host.

 * @call:            The call to initialize.

 * @client_id:       The client ID of the caller.

 * @function:        The function number of the function to call.

 * @src_parm:        Pointer to source function call parameters.

 * @parm_count:      Number of function call parameters.

 * @bounce_bufs:     The bouncebuffer array.

/**

 * Tries to cancel a pending HGCM call.

 *

 * Return: VBox status code

	/*

	 * We use a pre-allocated request for cancellations, which is

	 * protected by cancel_req_mutex. This means that all cancellations

	 * get serialized, this should be fine since they should be rare.

/**

 * Performs the call and completion wait.

 * Return: 0 or negative errno value.

 * @gdev:        The VBoxGuest device extension.

 * @call:        The call to execute.

 * @timeout_ms:  Timeout in ms.

 * @leak_it:     Where to return the leak it / free it, indicator.

 *               Cancellation fun.

	/*

	 * If the call failed, then pretend success. Upper layers will

	 * interpret the result code in the packet.

 Host decided to process the request asynchronously, wait for it */

 timeout > 0 means hgcm_req_done has returned true, so success */

 Cancel the request */

	/*

	 * Failed to cancel, this should mean that the cancel has lost the

	 * race with normal completion, wait while the host completes it.

 We really should never get here */

 The call has completed normally after all */

/**

 * Copies the result of the call back to the caller info structure and user

 * buffers.

 * Return: 0 or negative errno value.

 * @call:            HGCM call request.

 * @dst_parm:        Pointer to function call parameters destination.

 * @parm_count:      Number of function call parameters.

 * @bounce_bufs:     The bouncebuffer array.

 Copy back parameters. */

	/*

	 * Validate and buffer the parameters for the call. This also increases

	 * call_size with the amount of extra space needed for page lists.

 Even on error bounce bufs may still have been allocated */

 KISS allocate a temporary request and convert the parameters. */

 Copy back. */

 SPDX-License-Identifier: (GPL-2.0 OR CDDL-1.0) */

/*

 * vboxguest core guest-device handling code, VBoxGuest.cpp in upstream svn.

 *

 * Copyright (C) 2007-2016 Oracle Corporation

 Get the pointer to the first HGCM parameter. */

 Get the pointer to the first HGCM parameter in a 32-bit request. */

/**

 * Reserves memory in which the VMM can relocate any guest mappings

 * that are floating around.

 *

 * This operation is a little bit tricky since the VMM might not accept

 * just any address because of address clashes between the three contexts

 * it operates in, so we try several times.

 *

 * Failure to reserve the guest mappings is ignored.

 *

 * @gdev:		The Guest extension device.

 Query the required space. */

	/*

	 * The VMM will report back if there is nothing it wants to map, like

	 * for instance in VT-x and AMD-V mode.

 Add 4M so that we can align the vmap to 4MiB as the host requires. */

	/*

	 * Try several times, the VMM might not accept some addresses because

	 * of address clashes between the three contexts.

 Free vmap's from failed attempts. */

 On failure free the dummy-page backing the vmap */

/**

 * Undo what vbg_guest_mappings_init did.

 *

 * @gdev:		The Guest extension device.

	/*

	 * Tell the host that we're going to free the memory we reserved for

	 * it, the free it up. (Leak the memory if anything goes wrong here.)

/**

 * Report the guest information to the host.

 * Return: 0 or negative errno value.

 * @gdev:		The Guest extension device.

	/*

	 * Allocate and fill in the two guest info reports.

	/*

	 * There are two protocols here:

	 *      1. INFO2 + INFO1. Supported by >=3.2.51.

	 *      2. INFO1 and optionally INFO2. The old protocol.

	 *

	 * We try protocol 2 first.  It will fail with VERR_NOT_SUPPORTED

	 * if not supported by the VMMDev (message ordering requirement).

/**

 * Report the guest driver status to the host.

 * Return: 0 or negative errno value.

 * @gdev:		The Guest extension device.

 * @active:		Flag whether the driver is now active or not.

 Compatibility with older hosts. */

/**

 * Inflate the balloon by one chunk. The caller owns the balloon mutex.

 * Return: 0 or negative errno value.

 * @gdev:		The Guest extension device.

 * @chunk_idx:		Index of the chunk.

/**

 * Deflate the balloon by one chunk. The caller owns the balloon mutex.

 * Return: 0 or negative errno value.

 * @gdev:		The Guest extension device.

 * @chunk_idx:		Index of the chunk.

/**

 * Respond to VMMDEV_EVENT_BALLOON_CHANGE_REQUEST events, query the size

 * the host wants the balloon to be and adjust accordingly.

	/*

	 * Setting this bit means that we request the value from the host and

	 * change the guest memory balloon according to the returned value.

	/*

	 * The host always returns the same maximum amount of chunks, so

	 * we do this once.

 inflate */

 deflate */

/**

 * Callback for heartbeat timer.

/**

 * Configure the host to check guest's heartbeat

 * and get heartbeat interval from the host.

 * Return: 0 or negative errno value.

 * @gdev:		The Guest extension device.

 * @enabled:		Set true to enable guest heartbeat checks on host.

 ns -> ms */

/**

 * Initializes the heartbeat timer. This feature may be disabled by the host.

 * Return: 0 or negative errno value.

 * @gdev:		The Guest extension device.

 Make sure that heartbeat checking is disabled if we fail. */

/**

 * Cleanup hearbeat code, stop HB timer and disable host heartbeat checking.

 * @gdev:		The Guest extension device.

/**

 * Applies a change to the bit usage tracker.

 * Return: true if the mask changed, false if not.

 * @tracker:		The bit usage tracker.

 * @changed:		The bits to change.

 * @previous:		The previous value of the bits.

/**

 * Init and termination worker for resetting the (host) event filter on the host

 * Return: 0 or negative errno value.

 * @gdev:		   The Guest extension device.

 * @fixed_events:	   Fixed events (init time).

/**

 * Changes the event filter mask for the given session.

 *

 * This is called in response to VBG_IOCTL_CHANGE_FILTER_MASK as well as to

 * do session cleanup. Takes the session mutex.

 *

 * Return: 0 or negative errno value.

 * @gdev:			The Guest extension device.

 * @session:			The session.

 * @or_mask:			The events to add.

 * @not_mask:			The events to remove.

 * @session_termination:	Set if we're called by the session cleanup code.

 *				This tweaks the error handling so we perform

 *				proper session cleanup even if the host

 *				misbehaves.

	/*

	 * Allocate a request buffer before taking the spinlock, when

	 * the session is being terminated the requestor is the kernel,

	 * as we're cleaning up.

 Ignore allocation failure, we must do session cleanup. */

 Apply the changes to the session mask. */

 If anything actually changed, update the global usage counters. */

 Failed, roll back (unless it's session termination time). */

/**

 * Init and termination worker for set guest capabilities to zero on the host.

 * Return: 0 or negative errno value.

 * @gdev:		The Guest extension device.

/**

 * Set guest capabilities on the host.

 * Must be called with gdev->session_mutex hold.

 * Return: 0 or negative errno value.

 * @gdev:			The Guest extension device.

 * @session:			The session.

 * @session_termination:	Set if we're called by the session cleanup code.

 On termination the requestor is the kernel, as we're cleaning up. */

/**

 * Acquire (get exclusive access) guest capabilities for a session.

 * Takes the session mutex.

 * Return: 0 or negative errno value.

 * @gdev:			The Guest extension device.

 * @session:			The session.

 * @flags:			Flags (VBGL_IOC_AGC_FLAGS_XXX).

 * @or_mask:			The capabilities to add.

 * @not_mask:			The capabilities to remove.

 * @session_termination:	Set if we're called by the session cleanup code.

 *				This tweaks the error handling so we perform

 *				proper session cleanup even if the host

 *				misbehaves.

	/*

	 * Mark any caps in the or_mask as now being in acquire-mode. Note

	 * once caps are in acquire_mode they always stay in this mode.

	 * This impacts event handling, so we take the event-lock.

 If we only have to switch the caps to acquire mode, we're done. */

 or_mask takes priority over not_mask */

 session->acquired_guest_caps impacts event handling, take the lock */

 Roll back on failure, unless it's session termination time. */

	/*

	 * If we added a capability, check if that means some other thread in

	 * our session should be unblocked because there are events pending

	 * (the result of vbg_get_allowed_event_mask_for_session() may change).

	 *

	 * HACK ALERT! When the seamless support capability is added we generate

	 *	a seamless change event so that the ring-3 client can sync with

	 *	the seamless state.

/**

 * Sets the guest capabilities for a session. Takes the session mutex.

 * Return: 0 or negative errno value.

 * @gdev:			The Guest extension device.

 * @session:			The session.

 * @or_mask:			The capabilities to add.

 * @not_mask:			The capabilities to remove.

 * @session_termination:	Set if we're called by the session cleanup code.

 *				This tweaks the error handling so we perform

 *				proper session cleanup even if the host

 *				misbehaves.

 Apply the changes to the session mask. */

 If anything actually changed, update the global usage counters. */

 Roll back on failure, unless it's session termination time. */

/**

 * vbg_query_host_version get the host feature mask and version information.

 * Return: 0 or negative errno value.

 * @gdev:		The Guest extension device.

/**

 * Initializes the VBoxGuest device extension when the

 * device driver is loaded.

 *

 * The native code locates the VMMDev on the PCI bus and retrieve

 * the MMIO and I/O port ranges, this function will take care of

 * mapping the MMIO memory (if present). Upon successful return

 * the native code should set up the interrupt handler.

 *

 * Return: 0 or negative errno value.

 *

 * @gdev:		The Guest extension device.

 * @fixed_events:	Events that will be enabled upon init and no client

 *			will ever be allowed to mask.

 forces a report */

 forces a report */

 These may fail without requiring the driver init to fail. */

 All Done! */

/**

 * Call this on exit to clean-up vboxguest-core managed resources.

 *

 * The native code should call this before the driver is loaded,

 * but don't call this on shutdown.

 * @gdev:		The Guest extension device.

 Clear the host flags (mouse status etc). */

/**

 * Creates a VBoxGuest user session.

 *

 * vboxguest_linux.c calls this when userspace opens the char-device.

 * Return: A pointer to the new session or an ERR_PTR on error.

 * @gdev:		The Guest extension device.

 * @requestor:		VMMDEV_REQUESTOR_* flags

/**

 * Closes a VBoxGuest session.

 * @session:		The session to close (and free).

 requestor is kernel here, as we're cleaning up. */

 Must be called with the event_lock held */

 Must be called with the event_lock held */

		/*

		 * Someone else may have consumed the event(s) first, in

		 * which case we go back to waiting.

/**

 * Checks if the VMM request is allowed in the context of the given session.

 * Return: 0 or negative errno value.

 * @gdev:		The Guest extension device.

 * @session:		The calling session.

 * @req:		The request.

 Trusted users apps only. */

 Anyone. */

 Depends on the request parameters... */

 Anything else is not allowed. */

 Find a free place in the sessions clients array and claim it */

 Validate parameter types */

	/*

	 * Validate the client id.

 E2BIG needs to be reported through the hdr.rc field. */

	/*

	 * Under Linux we handle VMMDEV_EVENT_BALLOON_CHANGE_REQUEST

	 * events entirely in the kernel, see vbg_core_isr().

/**

 * Common IOCtl for user to kernel communication.

 * Return: 0 or negative errno value.

 * @session:	The client session.

 * @req:	The requested function.

 * @data:	The i/o data buffer, minimum size sizeof(struct vbg_ioctl_hdr).

	/*

	 * hdr->version and hdr->size_in / hdr->size_out minimum size are

	 * already checked by vbg_misc_device_ioctl().

 For VMMDEV_REQUEST hdr->type != VBG_IOCTL_HDR_TYPE_DEFAULT */

 Fixed size requests. */

 Variable sized requests. */

/**

 * Report guest supported mouse-features to the host.

 *

 * Return: 0 or negative errno value.

 * @gdev:		The Guest extension device.

 * @features:		The set of features to report to the host.

* Core interrupt service routine. */

 Get and acknowlegde events. */

 SPDX-License-Identifier: GPL-2.0 */

/*

 * vboxguest linux pci driver, char-dev and input-device code,

 *

 * Copyright (C) 2006-2016 Oracle Corporation

* The device name. */

* The device name for the device node open to everyone. */

* VirtualBox PCI vendor ID. */

* VMMDev PCI card product ID. */

* Mutex protecting the global vbg_gdev pointer used by vbg_get/put_gdev. */

* Global vbg_gdev pointer used by vbg_get/put_gdev. */

 misc_open sets filp->private_data to our misc device */

 misc_open sets filp->private_data to our misc device */

/**

 * Close device.

 * Return: 0 on success, negated errno on failure.

 * @inode:		Pointer to inode info structure.

 * @filp:		Associated file pointer.

/**

 * Device I/O Control entry point.

 * Return: 0 on success, negated errno on failure.

 * @filp:		Associated file pointer.

 * @req:		The request specified to ioctl().

 * @arg:		The argument specified to ioctl().

	/*

	 * IOCTL_VMMDEV_REQUEST needs the buffer to be below 4G to avoid

	 * the need for a bounce-buffer and another copy later on.

* The file_operations structures. */

/**

 * Called when the input device is first opened.

 *

 * Sets up absolute mouse reporting.

/**

 * Called if all open handles to the input device are closed.

 *

 * Disables absolute reporting.

/**

 * Creates the kernel input device.

 *

 * Return: 0 on success, negated errno on failure.

/**

 * Does the PCI detection and init of the device.

 *

 * Return: 0 on success, negated errno on failure.

 Validate MMIO region version and size. */

	/*

	 * Note on success we keep the mutex locked until vbg_put_gdev(),

	 * this stops vbg_pci_remove from removing the device from underneath

	 * vboxsf. vboxsf will only hold a reference for a short while.

/**

 * Callback for mouse events.

 *

 * This is called at the end of the ISR, after leaving the event spinlock, if

 * VMMDEV_EVENT_MOUSE_POSITION_CHANGED was raised by the host.

 *

 * @gdev:		The device extension.

 Report events to the kernel input device */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2020-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.

/**

 * DOC: Enclave lifetime management driver for Nitro Enclaves (NE).

 * Nitro is a hypervisor that has been developed by Amazon.

/**

 * NE_CPUS_SIZE - Size for max 128 CPUs, for now, in a cpu-list string, comma

 *		  separated. The NE CPU pool includes CPUs from a single NUMA

 *		  node.

/**

 * NE_EIF_LOAD_OFFSET - The offset where to copy the Enclave Image Format (EIF)

 *			image in enclave memory.

/**

 * NE_MIN_ENCLAVE_MEM_SIZE - The minimum memory size an enclave can be launched

 *			     with.

/**

 * NE_MIN_MEM_REGION_SIZE - The minimum size of an enclave memory region.

/**

 * NE_PARENT_VM_CID - The CID for the vsock device of the primary / parent VM.

/*

 * TODO: Update logic to create new sysfs entries instead of using

 * a kernel parameter e.g. if multiple sysfs files needed.

www.kernel.org/doc/html/latest/admin-guide/kernel-parameters.html#cpu-lists */

/**

 * struct ne_cpu_pool - CPU pool used for Nitro Enclaves.

 * @avail_threads_per_core:	Available full CPU cores to be dedicated to

 *				enclave(s). The cpumasks from the array, indexed

 *				by core id, contain all the threads from the

 *				available cores, that are not set for created

 *				enclave(s). The full CPU cores are part of the

 *				NE CPU pool.

 * @mutex:			Mutex for the access to the NE CPU pool.

 * @nr_parent_vm_cores :	The size of the available threads per core array.

 *				The total number of CPU cores available on the

 *				primary / parent VM.

 * @nr_threads_per_core:	The number of threads that a full CPU core has.

 * @numa_node:			NUMA node of the CPUs in the pool.

/**

 * ne_check_enclaves_created() - Verify if at least one enclave has been created.

 * @void:	No parameters provided.

 *

 * Context: Process context.

 * Return:

 * * True if at least one enclave is created.

 * * False otherwise.

/**

 * ne_setup_cpu_pool() - Set the NE CPU pool after handling sanity checks such

 *			 as not sharing CPU cores with the primary / parent VM

 *			 or not using CPU 0, which should remain available for

 *			 the primary / parent VM. Offline the CPUs from the

 *			 pool after the checks passed.

 * @ne_cpu_list:	The CPU list used for setting NE CPU pool.

 *

 * Context: Process context.

 * Return:

 * * 0 on success.

 * * Negative return value on failure.

	/*

	 * Check if the CPUs are online, to further get info about them

	 * e.g. numa node, core id, siblings.

	/*

	 * Check if the CPUs from the NE CPU pool are from the same NUMA node.

	/*

	 * Check if CPU 0 and its siblings are included in the provided CPU pool

	 * They should remain available for the primary / parent VM.

	/*

	 * Check if CPU siblings are included in the provided CPU pool. The

	 * expectation is that full CPU cores are made available in the CPU pool

	 * for enclaves.

 Calculate the number of threads from a full CPU core. */

	/*

	 * Split the NE CPU pool in threads per core to keep the CPU topology

	 * after offlining the CPUs.

	/*

	 * CPUs that are given to enclave(s) should not be considered online

	 * by Linux anymore, as the hypervisor will degrade them to floating.

	 * The physical CPUs (full cores) are carved out of the primary / parent

	 * VM and given to the enclave VM. The same number of vCPUs would run

	 * on less pCPUs for the primary / parent VM.

	 *

	 * We offline them here, to not degrade performance and expose correct

	 * topology to Linux and user space.

/**

 * ne_teardown_cpu_pool() - Online the CPUs from the NE CPU pool and cleanup the

 *			    CPU pool.

 * @void:	No parameters provided.

 *

 * Context: Process context.

/**

 * ne_set_kernel_param() - Set the NE CPU pool value via the NE kernel parameter.

 * @val:	NE CPU pool string value.

 * @kp :	NE kernel parameter associated with the NE CPU pool.

 *

 * Context: Process context.

 * Return:

 * * 0 on success.

 * * Negative return value on failure.

/**

 * ne_donated_cpu() - Check if the provided CPU is already used by the enclave.

 * @ne_enclave :	Private data associated with the current enclave.

 * @cpu:		CPU to check if already used.

 *

 * Context: Process context. This function is called with the ne_enclave mutex held.

 * Return:

 * * True if the provided CPU is already used by the enclave.

 * * False otherwise.

/**

 * ne_get_unused_core_from_cpu_pool() - Get the id of a full core from the

 *					NE CPU pool.

 * @void:	No parameters provided.

 *

 * Context: Process context. This function is called with the ne_enclave and

 *	    ne_cpu_pool mutexes held.

 * Return:

 * * Core id.

 * * -1 if no CPU core available in the pool.

/**

 * ne_set_enclave_threads_per_core() - Set the threads of the provided core in

 *				       the enclave data structure.

 * @ne_enclave :	Private data associated with the current enclave.

 * @core_id:		Core id to get its threads from the NE CPU pool.

 * @vcpu_id:		vCPU id part of the provided core.

 *

 * Context: Process context. This function is called with the ne_enclave and

 *	    ne_cpu_pool mutexes held.

 * Return:

 * * 0 on success.

 * * Negative return value on failure.

/**

 * ne_get_cpu_from_cpu_pool() - Get a CPU from the NE CPU pool, either from the

 *				remaining sibling(s) of a CPU core or the first

 *				sibling of a new CPU core.

 * @ne_enclave :	Private data associated with the current enclave.

 * @vcpu_id:		vCPU to get from the NE CPU pool.

 *

 * Context: Process context. This function is called with the ne_enclave mutex held.

 * Return:

 * * 0 on success.

 * * Negative return value on failure.

	/*

	 * If previously allocated a thread of a core to this enclave, first

	 * check remaining sibling(s) for new CPU allocations, so that full

	 * CPU cores are used for the enclave.

	/*

	 * If no remaining siblings, get a core from the NE CPU pool and keep

	 * track of all the threads in the enclave threads per core data structure.

/**

 * ne_get_vcpu_core_from_cpu_pool() - Get from the NE CPU pool the id of the

 *				      core associated with the provided vCPU.

 * @vcpu_id:	Provided vCPU id to get its associated core id.

 *

 * Context: Process context. This function is called with the ne_enclave and

 *	    ne_cpu_pool mutexes held.

 * Return:

 * * Core id.

 * * -1 if the provided vCPU is not in the pool.

/**

 * ne_check_cpu_in_cpu_pool() - Check if the given vCPU is in the available CPUs

 *				from the pool.

 * @ne_enclave :	Private data associated with the current enclave.

 * @vcpu_id:		ID of the vCPU to check if available in the NE CPU pool.

 *

 * Context: Process context. This function is called with the ne_enclave mutex held.

 * Return:

 * * 0 on success.

 * * Negative return value on failure.

	/*

	 * If previously allocated a thread of a core to this enclave, but not

	 * the full core, first check remaining sibling(s).

	/*

	 * If no remaining siblings, get from the NE CPU pool the core

	 * associated with the vCPU and keep track of all the threads in the

	 * enclave threads per core data structure.

/**

 * ne_add_vcpu_ioctl() - Add a vCPU to the slot associated with the current

 *			 enclave.

 * @ne_enclave :	Private data associated with the current enclave.

 * @vcpu_id:		ID of the CPU to be associated with the given slot,

 *			apic id on x86.

 *

 * Context: Process context. This function is called with the ne_enclave mutex held.

 * Return:

 * * 0 on success.

 * * Negative return value on failure.

/**

 * ne_sanity_check_user_mem_region() - Sanity check the user space memory

 *				       region received during the set user

 *				       memory region ioctl call.

 * @ne_enclave :	Private data associated with the current enclave.

 * @mem_region :	User space memory region to be sanity checked.

 *

 * Context: Process context. This function is called with the ne_enclave mutex held.

 * Return:

 * * 0 on success.

 * * Negative return value on failure.

/**

 * ne_sanity_check_user_mem_region_page() - Sanity check a page from the user space

 *					    memory region received during the set

 *					    user memory region ioctl call.

 * @ne_enclave :	Private data associated with the current enclave.

 * @mem_region_page:	Page from the user space memory region to be sanity checked.

 *

 * Context: Process context. This function is called with the ne_enclave mutex held.

 * Return:

 * * 0 on success.

 * * Negative return value on failure.

/**

 * ne_set_user_memory_region_ioctl() - Add user space memory region to the slot

 *				       associated with the current enclave.

 * @ne_enclave :	Private data associated with the current enclave.

 * @mem_region :	User space memory region to be associated with the given slot.

 *

 * Context: Process context. This function is called with the ne_enclave mutex held.

 * Return:

 * * 0 on success.

 * * Negative return value on failure.

		/*

		 * TODO: Update once handled non-contiguous memory regions

		 * received from user space or contiguous physical memory regions

		 * larger than 2 MiB e.g. 8 MiB.

	/*

	 * TODO: Update once handled non-contiguous memory regions received

	 * from user space or contiguous physical memory regions larger than

	 * 2 MiB e.g. 8 MiB.

			/*

			 * Exit here without put pages as memory regions may

			 * already been added.

/**

 * ne_start_enclave_ioctl() - Trigger enclave start after the enclave resources,

 *			      such as memory and CPU, have been set.

 * @ne_enclave :		Private data associated with the current enclave.

 * @enclave_start_info :	Enclave info that includes enclave cid and flags.

 *

 * Context: Process context. This function is called with the ne_enclave mutex held.

 * Return:

 * * 0 on success.

 * * Negative return value on failure.

/**

 * ne_enclave_ioctl() - Ioctl function provided by the enclave file.

 * @file:	File associated with this ioctl function.

 * @cmd:	The command that is set for the ioctl call.

 * @arg:	The argument that is provided for the ioctl call.

 *

 * Context: Process context.

 * Return:

 * * 0 on success.

 * * Negative return value on failure.

 Use the CPU pool for choosing a CPU for the enclave. */

 Check if the provided vCPU is available in the NE CPU pool. */

		/*

		 * Do not use well-known CIDs - 0, 1, 2 - for enclaves.

		 * VMADDR_CID_ANY = -1U

		 * VMADDR_CID_HYPERVISOR = 0

		 * VMADDR_CID_LOCAL = 1

		 * VMADDR_CID_HOST = 2

		 * Note: 0 is used as a placeholder to auto-generate an enclave CID.

		 * http://man7.org/linux/man-pages/man7/vsock.7.html

		/*

		 * Do not use the CID of the primary / parent VM for enclaves.

 64-bit CIDs are not yet supported for the vsock device. */

/**

 * ne_enclave_remove_all_mem_region_entries() - Remove all memory region entries

 *						from the enclave data structure.

 * @ne_enclave :	Private data associated with the current enclave.

 *

 * Context: Process context. This function is called with the ne_enclave mutex held.

/**

 * ne_enclave_remove_all_vcpu_id_entries() - Remove all vCPU id entries from

 *					     the enclave data structure.

 * @ne_enclave :	Private data associated with the current enclave.

 *

 * Context: Process context. This function is called with the ne_enclave mutex held.

 Update the available NE CPU pool. */

/**

 * ne_pci_dev_remove_enclave_entry() - Remove the enclave entry from the data

 *				       structure that is part of the NE PCI

 *				       device private data.

 * @ne_enclave :	Private data associated with the current enclave.

 * @ne_pci_dev :	Private data associated with the PCI device.

 *

 * Context: Process context. This function is called with the ne_pci_dev enclave

 *	    mutex held.

/**

 * ne_enclave_release() - Release function provided by the enclave file.

 * @inode:	Inode associated with this file release function.

 * @file:	File associated with this release function.

 *

 * Context: Process context.

 * Return:

 * * 0 on success.

 * * Negative return value on failure.

	/*

	 * Early exit in case there is an error in the enclave creation logic

	 * and fput() is called on the cleanup path.

	/*

	 * Acquire the enclave list mutex before the enclave mutex

	 * in order to avoid deadlocks with @ref ne_event_work_handler.

/**

 * ne_enclave_poll() - Poll functionality used for enclave out-of-band events.

 * @file:	File associated with this poll function.

 * @wait:	Poll table data structure.

 *

 * Context: Process context.

 * Return:

 * * Poll mask.

/**

 * ne_create_vm_ioctl() - Alloc slot to be associated with an enclave. Create

 *			  enclave file descriptor to be further used for enclave

 *			  resources handling e.g. memory regions and CPUs.

 * @ne_pci_dev :	Private data associated with the PCI device.

 * @slot_uid:		User pointer to store the generated unique slot id

 *			associated with an enclave to.

 *

 * Context: Process context. This function is called with the ne_pci_dev enclave

 *	    mutex held.

 * Return:

 * * Enclave fd on success.

 * * Negative return value on failure.

		/*

		 * As we're holding the only reference to 'enclave_file', fput()

		 * will call ne_enclave_release() which will do a proper cleanup

		 * of all so far allocated resources, leaving only the unused fd

		 * for us to free.

/**

 * ne_ioctl() - Ioctl function provided by the NE misc device.

 * @file:	File associated with this ioctl function.

 * @cmd:	The command that is set for the ioctl call.

 * @arg:	The argument that is provided for the ioctl call.

 *

 * Context: Process context.

 * Return:

 * * Ioctl result (e.g. enclave file descriptor) on success.

 * * Negative return value on failure.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2020-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.

/**

 * DOC: Nitro Enclaves (NE) PCI device driver.

/**

 * NE_DEFAULT_TIMEOUT_MSECS - Default timeout to wait for a reply from

 *			      the NE PCI device.

 120 sec */

/**

 * ne_submit_request() - Submit command request to the PCI device based on the

 *			 command type.

 * @pdev:		PCI device to send the command to.

 * @cmd_type:		Command type of the request sent to the PCI device.

 * @cmd_request:	Command request payload.

 * @cmd_request_size:	Size of the command request payload.

 *

 * Context: Process context. This function is called with the ne_pci_dev mutex held.

/**

 * ne_retrieve_reply() - Retrieve reply from the PCI device.

 * @pdev:		PCI device to receive the reply from.

 * @cmd_reply:		Command reply payload.

 * @cmd_reply_size:	Size of the command reply payload.

 *

 * Context: Process context. This function is called with the ne_pci_dev mutex held.

/**

 * ne_wait_for_reply() - Wait for a reply of a PCI device command.

 * @pdev:	PCI device for which a reply is waited.

 *

 * Context: Process context. This function is called with the ne_pci_dev mutex held.

 * Return:

 * * 0 on success.

 * * Negative return value on failure.

	/*

	 * TODO: Update to _interruptible and handle interrupted wait event

	 * e.g. -ERESTARTSYS, incoming signals + update timeout, if needed.

	/*

	 * Use this mutex so that the PCI device handles one command request at

	 * a time.

/**

 * ne_reply_handler() - Interrupt handler for retrieving a reply matching a

 *			request sent to the PCI device for enclave lifetime

 *			management.

 * @irq:	Received interrupt for a reply sent by the PCI device.

 * @args:	PCI device private data structure.

 *

 * Context: Interrupt context.

 * Return:

 * * IRQ_HANDLED on handled interrupt.

 TODO: Update to _interruptible. */

/**

 * ne_event_work_handler() - Work queue handler for notifying enclaves on a

 *			     state change received by the event interrupt

 *			     handler.

 * @work:	Item containing the NE PCI device for which an out-of-band event

 *		was issued.

 *

 * An out-of-band event is being issued by the Nitro Hypervisor when at least

 * one enclave is changing state without client interaction.

 *

 * Context: Work queue context.

	/*

	 * Iterate over all enclaves registered for the Nitro Enclaves

	 * PCI device and determine for which enclave(s) the out-of-band event

	 * is corresponding to.

		/*

		 * Enclaves that were never started cannot receive out-of-band

		 * events.

 Notify enclave process that the enclave state changed. */

/**

 * ne_event_handler() - Interrupt handler for PCI device out-of-band events.

 *			This interrupt does not supply any data in the MMIO

 *			region. It notifies a change in the state of any of

 *			the launched enclaves.

 * @irq:	Received interrupt for an out-of-band event.

 * @args:	PCI device private data structure.

 *

 * Context: Interrupt context.

 * Return:

 * * IRQ_HANDLED on handled interrupt.

/**

 * ne_setup_msix() - Setup MSI-X vectors for the PCI device.

 * @pdev:	PCI device to setup the MSI-X for.

 *

 * Context: Process context.

 * Return:

 * * 0 on success.

 * * Negative return value on failure.

	/*

	 * This IRQ gets triggered every time the PCI device responds to a

	 * command request. The reply is then retrieved, reading from the MMIO

	 * space of the PCI device.

	/*

	 * This IRQ gets triggered every time any enclave's state changes. Its

	 * handler then scans for the changes and propagates them to the user

	 * space.

/**

 * ne_teardown_msix() - Teardown MSI-X vectors for the PCI device.

 * @pdev:	PCI device to teardown the MSI-X for.

 *

 * Context: Process context.

/**

 * ne_pci_dev_enable() - Select the PCI device version and enable it.

 * @pdev:	PCI device to select version for and then enable.

 *

 * Context: Process context.

 * Return:

 * * 0 on success.

 * * Negative return value on failure.

/**

 * ne_pci_dev_disable() - Disable the PCI device.

 * @pdev:	PCI device to disable.

 *

 * Context: Process context.

 10 ms */

	/*

	 * Check for NE_ENABLE_OFF in a loop, to handle cases when the device

	 * state is not immediately set to disabled and going through a

	 * transitory state of disabling.

/**

 * ne_pci_probe() - Probe function for the NE PCI device.

 * @pdev:	PCI device to match with the NE PCI driver.

 * @id :	PCI device id table associated with the NE PCI driver.

 *

 * Context: Process context.

 * Return:

 * * 0 on success.

 * * Negative return value on failure.

/**

 * ne_pci_remove() - Remove function for the NE PCI device.

 * @pdev:	PCI device associated with the NE PCI driver.

 *

 * Context: Process context.

/**

 * ne_pci_shutdown() - Shutdown function for the NE PCI device.

 * @pdev:	PCI device associated with the NE PCI driver.

 *

 * Context: Process context.

/*

 * TODO: Add suspend / resume functions for power management w/ CONFIG_PM, if

 * needed.

 NE PCI device driver. */

 SPDX-License-Identifier: GPL-2.0

/*

 * ACRN_HSM: Handle I/O requests

 *

 * Copyright (C) 2020 Intel Corporation. All rights reserved.

 *

 * Authors:

 *	Jason Chen CJ <jason.cj.chen@intel.com>

 *	Fengwei Yin <fengwei.yin@intel.com>

 Add barrier() to make sure the writes are done before completion */

	/*

	 * To fulfill the requirement of real-time in several industry

	 * scenarios, like automotive, ACRN can run under the partition mode,

	 * in which User VMs and Service VM are bound to dedicated CPU cores.

	 * Polling mode of handling the I/O request is introduced to achieve a

	 * faster I/O request handling. In polling mode, the hypervisor polls

	 * I/O request's completion. Once an I/O request is marked as

	 * ACRN_IOREQ_STATE_COMPLETE, hypervisor resumes from the polling point

	 * to continue the I/O request flow. Thus, the completion notification

	 * from HSM of I/O request is not needed.  Please note,

	 * completion_polling needs to be read before the I/O request being

	 * marked as ACRN_IOREQ_STATE_COMPLETE to avoid racing with the

	 * hypervisor.

/**

 * acrn_ioreq_range_add() - Add an iorange monitored by an ioreq client

 * @client:	The ioreq client

 * @type:	Type (ACRN_IOREQ_TYPE_MMIO or ACRN_IOREQ_TYPE_PORTIO)

 * @start:	Start address of iorange

 * @end:	End address of iorange

 *

 * Return: 0 on success, <0 on error

/**

 * acrn_ioreq_range_del() - Del an iorange monitored by an ioreq client

 * @client:	The ioreq client

 * @type:	Type (ACRN_IOREQ_TYPE_MMIO or ACRN_IOREQ_TYPE_PORTIO)

 * @start:	Start address of iorange

 * @end:	End address of iorange

/*

 * ioreq_task() is the execution entity of handler thread of an I/O client.

 * The handler callback of the I/O client is called within the handler thread.

	/*

	 * Lockless access to ioreqs_map is safe, because

	 * 1) set_bit() and clear_bit() are atomic operations.

	 * 2) I/O requests arrives serialized. The access flow of ioreqs_map is:

	 *	set_bit() - in ioreq_work handler

	 *	Handler callback handles corresponding I/O request

	 *	clear_bit() - in handler thread (include ACRN userspace)

	 *	Mark corresponding I/O request completed

	 *	Loop again if a new I/O request occurs

/*

 * For the non-default I/O clients, give them chance to complete the current

 * I/O requests if there are any. For the default I/O client, it is safe to

 * clear all pending I/O requests because the clearing request is from ACRN

 * userspace.

	/*

	 * IO requests of this VM will be completed directly in

	 * acrn_ioreq_dispatch if ACRN_VM_FLAG_CLEARING_IOREQ flag is set.

	/*

	 * acrn_ioreq_request_clear is only called in VM reset case. Simply

	 * wait 100ms in total for the IO requests' completion.

 Clear all ioreqs belonging to the default client */

 Clear ACRN_VM_FLAG_CLEARING_IOREQ flag after the clearing */

		/*

		 * In the default client, a user space thread waits on the

		 * waitqueue. The is_destroying() check is used to notify user

		 * space the client is going to be destroyed.

 The low 8-bit of supported pci_reg addr.*/

 The high 4-bit of supported pci_reg addr */

 Max number of supported functions */

 Max number of supported slots */

 Max number of supported buses */

/*

 * A PCI configuration space access via PIO 0xCF8 and 0xCFC normally has two

 * following steps:

 *   1) writes address into 0xCF8 port

 *   2) accesses data in/from 0xCFC

 * This function combines such paired PCI configuration space I/O requests into

 * one ACRN_IOREQ_TYPE_PCICFG type I/O request and continues the processing.

/**

 * acrn_ioreq_client_create() - Create an ioreq client

 * @vm:		The VM that this client belongs to

 * @handler:	The ioreq_handler of ioreq client acrn_hsm will create a kernel

 *		thread and call the handler to handle I/O requests.

 * @priv:	Private data for the handler

 * @is_default:	If it is the default client

 * @name:	The name of ioreq client

 *

 * Return: acrn_ioreq_client pointer on success, NULL on error

/**

 * acrn_ioreq_client_destroy() - Destroy an ioreq client

 * @client:	The ioreq client

 barrier the read of processed of acrn_io_request */

 Complete the IO request directly in clearing stage */

			/*

			 * Add barrier() to make sure the writes are done

			 * before setting ACRN_IOREQ_STATE_PROCESSING

 Flush and unarm the handler to ensure no I/O requests pending */

 Schedule after enabling in case other clients miss interrupt */

 Destroy all clients belonging to this VM */

 SPDX-License-Identifier: GPL-2.0

/*

 * ACRN: Memory mapping management

 *

 * Copyright (C) 2020 Intel Corporation. All rights reserved.

 *

 * Authors:

 *	Fei Li <lei1.li@intel.com>

 *	Shuo Liu <shuo.a.liu@intel.com>

/**

 * acrn_mm_region_add() - Set up the EPT mapping of a memory region.

 * @vm:			User VM.

 * @user_gpa:		A GPA of User VM.

 * @service_gpa:	A GPA of Service VM.

 * @size:		Size of the region.

 * @mem_type:		Combination of ACRN_MEM_TYPE_*.

 * @mem_access_right:	Combination of ACRN_MEM_ACCESS_*.

 *

 * Return: 0 on success, <0 on error.

/**

 * acrn_mm_region_del() - Del the EPT mapping of a memory region.

 * @vm:		User VM.

 * @user_gpa:	A GPA of the User VM.

 * @size:	Size of the region.

 *

 * Return: 0 on success, <0 for error.

/**

 * acrn_vm_ram_map() - Create a RAM EPT mapping of User VM.

 * @vm:		The User VM pointer

 * @memmap:	Info of the EPT mapping

 *

 * Return: 0 on success, <0 for error.

 Get the page number of the map region */

 Lock the pages of user memory map region */

 Create a kernel map for the map region */

 Record Service VM va <-> User VM pa mapping */

 Calculate count of vm_memory_region_op */

 Prepare the vm_memory_region_batch */

 Fill each vm_memory_region_op */

 Inform the ACRN Hypervisor to set up EPT mappings */

/**

 * acrn_vm_all_ram_unmap() - Destroy a RAM EPT mapping of User VM.

 * @vm:	The User VM

 SPDX-License-Identifier: GPL-2.0

/*

 * ACRN HSM irqfd: use eventfd objects to inject virtual interrupts

 *

 * Copyright (C) 2020 Intel Corporation. All rights reserved.

 *

 * Authors:

 *	Shuo Liu <shuo.a.liu@intel.com>

 *	Yakui Zhao <yakui.zhao@intel.com>

/**

 * struct hsm_irqfd - Properties of HSM irqfd

 * @vm:		Associated VM pointer

 * @wait:	Entry of wait-queue

 * @shutdown:	Async shutdown work

 * @eventfd:	Associated eventfd

 * @list:	Entry within &acrn_vm.irqfds of irqfds of a VM

 * @pt:		Structure for select/poll on the associated eventfd

 * @msi:	MSI data

 remove from wait queue */

 Called with wqh->lock held and interrupts disabled */

 An event has been signaled, inject an interrupt */

 Do shutdown work in thread to hold wqh->lock */

/*

 * Assign an eventfd to a VM and create a HSM irqfd associated with the

 * eventfd. The properties of the HSM irqfd are built from a &struct

 * acrn_irqfd.

	/*

	 * Install custom wake-up handling to be notified whenever underlying

	 * eventfd is signaled.

 Check the pending event in this stage */

 SPDX-License-Identifier: GPL-2.0

/*

 * ACRN_HSM: Virtual Machine management

 *

 * Copyright (C) 2020 Intel Corporation. All rights reserved.

 *

 * Authors:

 *	Jason Chen CJ <jason.cj.chen@intel.com>

 *	Yakui Zhao <yakui.zhao@intel.com>

 List of VMs */

/*

 * acrn_vm_list is read in a worker thread which dispatch I/O requests and

 * is wrote in VM creation ioctl. Use the rwlock mechanism to protect it.

 Remove from global VM list */

/**

 * acrn_msi_inject() - Inject a MSI interrupt into a User VM

 * @vm:		User VM

 * @msi_addr:	The MSI address

 * @msi_data:	The MSI data

 *

 * Return: 0 on success, <0 on error

 might be used in interrupt context, so use GFP_ATOMIC */

	/*

	 * msi_addr: addr[19:12] with dest vcpu id

	 * msi_data: data[7:0] with vector

 SPDX-License-Identifier: GPL-2.0

/*

 * ACRN Hypervisor Service Module (HSM)

 *

 * Copyright (C) 2020 Intel Corporation. All rights reserved.

 *

 * Authors:

 *	Fengwei Yin <fengwei.yin@intel.com>

 *	Yakui Zhao <yakui.zhao@intel.com>

/*

 * When /dev/acrn_hsm is opened, a 'struct acrn_vm' object is created to

 * represent a VM instance and continues to be associated with the opened file

 * descriptor. All ioctl operations on this file descriptor will be targeted to

 * the VM instance. Release of this file descriptor will destroy the object.

/*

 * HSM relies on hypercall layer of the ACRN hypervisor to do the

 * sanity check against the input parameters.

 SPDX-License-Identifier: GPL-2.0

/*

 * ACRN HSM eventfd - use eventfd objects to signal expected I/O requests

 *

 * Copyright (C) 2020 Intel Corporation. All rights reserved.

 *

 * Authors:

 *	Shuo Liu <shuo.a.liu@intel.com>

 *	Yakui Zhao <yakui.zhao@intel.com>

/**

 * struct hsm_ioeventfd - Properties of HSM ioeventfd

 * @list:	Entry within &acrn_vm.ioeventfds of ioeventfds of a VM

 * @eventfd:	Eventfd of the HSM ioeventfd

 * @addr:	Address of I/O range

 * @data:	Data for matching

 * @length:	Length of I/O range

 * @type:	Type of I/O range (ACRN_IOREQ_TYPE_MMIO/ACRN_IOREQ_TYPE_PORTIO)

 * @wildcard:	Data matching or not

 Either one is wildcard, the data matching will be skipped. */

/*

 * Assign an eventfd to a VM and create a HSM ioeventfd associated with the

 * eventfd. The properties of the HSM ioeventfd are built from a &struct

 * acrn_ioeventfd.

 Check for range overflow */

	/*

	 * Currently, acrn_ioeventfd is used to support vhost. 1,2,4,8 width

	 * accesses can cover vhost's requirements.

	/*

	 * ACRN_IOEVENTFD_FLAG_DATAMATCH flag is set in virtio 1.0 support, the

	 * writing of notification register of each virtqueue may trigger the

	 * notification. There is no data matching requirement.

 register the I/O range into ioreq client */

		/*

		 * I/O requests are dispatched by range check only, so a

		 * acrn_ioreq_client need process both READ and WRITE accesses

		 * of same range. READ accesses are safe to be ignored here

		 * because virtio PCI devices write the notify registers for

		 * notification.

 reading does nothing and return 0 */

 reading does nothing and return 0 */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2015-2017 Pengutronix, Uwe Kleine-König <kernel@pengutronix.de>

 reset data and clock */

 DOUT is logically inverted */

	/*

	 * Resetting dout isn't necessary protocol wise, but it makes the

	 * signals more pretty because the dout level is deterministic between

	 * cycles. Note that this only affects dout between the master and the

	 * first siox device. dout for the later devices depend on the output of

	 * the previous siox device.

 XXX: determine automatically like spi does */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2015-2017 Pengutronix, Uwe Kleine-König <kernel@pengutronix.de>

/*

 * The lowest bit in the SIOX status word signals if the in-device watchdog is

 * ok. If the bit is set, the device is functional.

 *

 * On writing the watchdog timer is reset when this bit toggles.

/*

 * Bits 1 to 3 of the status word read as the bitwise negation of what was

 * clocked in before. The value clocked in is changed in each cycle and so

 * allows to detect transmit/receive problems.

/*

 * Each Siox-Device has a 4 bit type number that is neither 0 nor 15. This is

 * available in the upper nibble of the read status.

 *

 * On write these bits are DC.

	/*

	 * bits 3:1 of status sample the respective bit in the status

	 * byte written in the previous cycle but inverted. So if you wrote the

	 * status word as 0xa before (counter = 0b101), it is expected to get

	 * back the counter bits as 0b010.

	 *

	 * So given the last status written this function toggles the there

	 * unset counter bits in the read value such that the counter bits in

	 * the return value are all zero iff the bits were read as expected to

	 * simplify error detection.

	/*

	 * If the device knows which value the type bits should have, check

	 * against this value otherwise just rule out the invalid values 0b0000

	 * and 0b1111.

/*

 * If there is a type or counter error the device is called "unsynced".

/*

 * A device is called "connected" if it is synced and the watchdog is not

 * asserted.

	/*

	 * The counter bits change in each second cycle, the watchdog bit

	 * toggles each time.

	 * The counter bits hold values from [0, 6]. 7 would be possible

	 * theoretically but the protocol designer considered that a bad idea

	 * for reasons unknown today. (Maybe that's because then the status read

	 * back has only zeros in the counter bits then which might be confused

	 * with a stuck-at-0 error. But for the same reason (with s/0/1/) 0

	 * could be skipped.)

 prepare data pushed out to devices in buf[0..setbuf_len) */

		/*

		 * If the device or a previous one is unsynced, don't pet the

		 * watchdog. This is done to ensure that the device is kept in

		 * reset when something is wrong.

			/*

			 * Don't trigger watchdog if there is no driver or a

			 * sync problem

 interpret data pulled in from devices in buf[setbuf_len..] */

		/*

		 * If the watchdog bit wasn't toggled in this cycle, report the

		 * watchdog as active to give a consistent view for drivers and

		 * sysfs consumers.

 Check counter and type bits */

 only report a new error if the last cycle was ok */

 If the device is unsynced report the watchdog as active */

 The watchdog state changed just now */

 only give data read to driver if the device is connected */

		/*

		 * Set the task to idle while holding the lock. This makes sure

		 * that we don't sleep too long when the bus is reenabled before

		 * schedule_timeout is reached.

		/*

		 * I'm not clear if/why it is important to set the state to

		 * RUNNING again, but it fixes a "do not call blocking ops when

		 * !TASK_RUNNING;"-warning.

 up to now there is only a single driver so keeping this simple */

 XXX? require to write <type> <inbytes> <outbytes> */

 remove device */

 don't care to make the buffer smaller again */

	/*

	 * This must be done without holding the master lock because we're

	 * called from device_remove_store which also holds a sysfs mutex.

	 * device_unregister tries to aquire the same lock.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2017, Linaro Ltd.

/**

 * sysmon_send_event() - send notification of other remote's SSR event

 * @sysmon:	sysmon context

 * @event:	sysmon event context

/**

 * sysmon_request_shutdown() - request graceful shutdown of remote

 * @sysmon:	sysmon context

 *

 * Return: boolean indicator of the remote processor acking the request

/**

 * ssctl_request_shutdown() - request shutdown via SSCTL QMI service

 * @sysmon:	sysmon context

 *

 * Return: boolean indicator of the remote processor acking the request

/**

 * ssctl_send_event() - send notification of other remote's SSR event

 * @sysmon:	sysmon context

 * @event:	sysmon event context

/**

 * ssctl_new_server() - QMI callback indicating a new service

 * @qmi:	QMI handle

 * @svc:	service information

 *

 * Return: 0 if we're interested in this service, -EINVAL otherwise.

/**

 * ssctl_del_server() - QMI callback indicating that @svc is removed

 * @qmi:	QMI handle

 * @svc:	service information

/**

 * sysmon_start() - start callback for the sysmon remoteproc subdevice

 * @subdev:	instance of the sysmon subdevice

 *

 * Inform all the listners of sysmon notifications that the rproc associated

 * to @subdev has booted up. The rproc that booted up also needs to know

 * which rprocs are already up and running, so send start notifications

 * on behalf of all the online rprocs.

 Don't request graceful shutdown if we've crashed */

/**

 * sysmon_notify() - notify sysmon target of another's SSR

 * @nb:		notifier_block associated with sysmon instance

 * @event:	unused

 * @data:	SSR identifier of the remote that is going down

 Skip non-running rprocs and the originating instance */

 Only SSCTL version 2 supports SSR events */

/**

 * qcom_add_sysmon_subdev() - create a sysmon subdev for the given remoteproc

 * @rproc:	rproc context to associate the subdev with

 * @name:	name of this subdev, to use in SSR

 * @ssctl_instance: instance id of the ssctl QMI service

 *

 * Return: A new qcom_sysmon object, or NULL on failure

/**

 * qcom_remove_sysmon_subdev() - release a qcom_sysmon

 * @sysmon:	sysmon context, as retrieved by qcom_add_sysmon_subdev()

/**

 * qcom_sysmon_shutdown_acked() - query the success of the last shutdown

 * @sysmon:	sysmon context

 *

 * When sysmon is used to request a graceful shutdown of the remote processor

 * this can be used by the remoteproc driver to query the success, in order to

 * know if it should fall back to other means of requesting a shutdown.

 *

 * Return: boolean indicator of the success of the last shutdown request

/**

 * sysmon_probe() - probe sys_mon channel

 * @rpdev:	rpmsg device handle

 *

 * Find the sysmon context associated with the ancestor remoteproc and assign

 * this rpmsg device with said sysmon context.

 *

 * Return: 0 on success, negative errno on failure.

/**

 * sysmon_remove() - sys_mon channel remove handler

 * @rpdev:	rpmsg device handle

 *

 * Disassociate the rpmsg device with the sysmon instance.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * OMAP Remote Processor driver

 *

 * Copyright (C) 2011-2020 Texas Instruments Incorporated - http://www.ti.com/

 * Copyright (C) 2011 Google, Inc.

 *

 * Ohad Ben-Cohen <ohad@wizery.com>

 * Brian Swetland <swetland@google.com>

 * Fernando Guzman Lugo <fernando.lugo@ti.com>

 * Mark Grosen <mgrosen@ti.com>

 * Suman Anna <s-anna@ti.com>

 * Hari Kanigeri <h-kanigeri2@ti.com>

 default auto-suspend delay (ms) */

/**

 * struct omap_rproc_boot_data - boot data structure for the DSP omap rprocs

 * @syscon: regmap handle for the system control configuration module

 * @boot_reg: boot register offset within the @syscon regmap

 * @boot_reg_shift: bit-field shift required for the boot address value in

 *		    @boot_reg

/**

 * struct omap_rproc_mem - internal memory structure

 * @cpu_addr: MPU virtual address of the memory region

 * @bus_addr: bus address used to access the memory region

 * @dev_addr: device address of the memory region from DSP view

 * @size: size of the memory region

/**

 * struct omap_rproc_timer - data structure for a timer used by a omap rproc

 * @odt: timer pointer

 * @timer_ops: OMAP dmtimer ops for @odt timer

 * @irq: timer irq

/**

 * struct omap_rproc - omap remote processor state

 * @mbox: mailbox channel handle

 * @client: mailbox client to request the mailbox channel

 * @boot_data: boot data structure for setting processor boot address

 * @mem: internal memory regions data

 * @num_mems: number of internal memory regions

 * @num_timers: number of rproc timer(s)

 * @num_wd_timers: number of rproc watchdog timers

 * @timers: timer(s) info used by rproc

 * @autosuspend_delay: auto-suspend delay value to be used for runtime pm

 * @need_resume: if true a resume is needed in the system resume callback

 * @rproc: rproc handle

 * @reset: reset handle

 * @pm_comp: completion primitive to sync for suspend response

 * @fck: functional clock for the remoteproc

 * @suspend_acked: state machine flag to store the suspend request ack

/**

 * struct omap_rproc_mem_data - memory definitions for an omap remote processor

 * @name: name for this memory entry

 * @dev_addr: device address for the memory entry

/**

 * struct omap_rproc_dev_data - device data for the omap remote processor

 * @device_name: device name of the remote processor

 * @mems: memory definitions for this remote processor

/**

 * omap_rproc_request_timer() - request a timer for a remoteproc

 * @dev: device requesting the timer

 * @np: device node pointer to the desired timer

 * @timer: handle to a struct omap_rproc_timer to return the timer handle

 *

 * This helper function is used primarily to request a timer associated with

 * a remoteproc. The returned handle is stored in the .odt field of the

 * @timer structure passed in, and is used to invoke other timer specific

 * ops (like starting a timer either during device initialization or during

 * a resume operation, or for stopping/freeing a timer).

 *

 * Return: 0 on success, otherwise an appropriate failure

 clean counter, remoteproc code will set the value */

/**

 * omap_rproc_start_timer() - start a timer for a remoteproc

 * @timer: handle to a OMAP rproc timer

 *

 * This helper function is used to start a timer associated with a remoteproc,

 * obtained using the request_timer ops. The helper function needs to be

 * invoked by the driver to start the timer (during device initialization)

 * or to just resume the timer.

 *

 * Return: 0 on success, otherwise a failure as returned by DMTimer ops

/**

 * omap_rproc_stop_timer() - stop a timer for a remoteproc

 * @timer: handle to a OMAP rproc timer

 *

 * This helper function is used to disable a timer associated with a

 * remoteproc, and needs to be called either during a device shutdown

 * or suspend operation. The separate helper function allows the driver

 * to just stop a timer without having to release the timer during a

 * suspend operation.

 *

 * Return: 0 on success, otherwise a failure as returned by DMTimer ops

/**

 * omap_rproc_release_timer() - release a timer for a remoteproc

 * @timer: handle to a OMAP rproc timer

 *

 * This helper function is used primarily to release a timer associated

 * with a remoteproc. The dmtimer will be available for other clients to

 * use once released.

 *

 * Return: 0 on success, otherwise a failure as returned by DMTimer ops

/**

 * omap_rproc_get_timer_irq() - get the irq for a timer

 * @timer: handle to a OMAP rproc timer

 *

 * This function is used to get the irq associated with a watchdog timer. The

 * function is called by the OMAP remoteproc driver to register a interrupt

 * handler to handle watchdog events on the remote processor.

 *

 * Return: irq id on success, otherwise a failure as returned by DMTimer ops

/**

 * omap_rproc_ack_timer_irq() - acknowledge a timer irq

 * @timer: handle to a OMAP rproc timer

 *

 * This function is used to clear the irq associated with a watchdog timer. The

 * The function is called by the OMAP remoteproc upon a watchdog event on the

 * remote processor to clear the interrupt status of the watchdog timer.

/**

 * omap_rproc_watchdog_isr() - Watchdog ISR handler for remoteproc device

 * @irq: IRQ number associated with a watchdog timer

 * @data: IRQ handler data

 *

 * This ISR routine executes the required necessary low-level code to

 * acknowledge a watchdog timer interrupt. There can be multiple watchdog

 * timers associated with a rproc (like IPUs which have 2 watchdog timers,

 * one per Cortex M3/M4 core), so a lookup has to be performed to identify

 * the timer to acknowledge its interrupt.

 *

 * The function also invokes rproc_report_crash to report the watchdog event

 * to the remoteproc driver core, to trigger a recovery.

 *

 * Return: IRQ_HANDLED on success, otherwise IRQ_NONE

/**

 * omap_rproc_enable_timers() - enable the timers for a remoteproc

 * @rproc: handle of a remote processor

 * @configure: boolean flag used to acquire and configure the timer handle

 *

 * This function is used primarily to enable the timers associated with

 * a remoteproc. The configure flag is provided to allow the driver to

 * to either acquire and start a timer (during device initialization) or

 * to just start a timer (during a resume operation).

 *

 * Return: 0 on success, otherwise an appropriate failure

/**

 * omap_rproc_disable_timers() - disable the timers for a remoteproc

 * @rproc: handle of a remote processor

 * @configure: boolean flag used to release the timer handle

 *

 * This function is used primarily to disable the timers associated with

 * a remoteproc. The configure flag is provided to allow the driver to

 * to either stop and release a timer (during device shutdown) or to just

 * stop a timer (during a suspend operation).

 *

 * Return: 0 on success or no timers

/**

 * omap_rproc_mbox_callback() - inbound mailbox message handler

 * @client: mailbox client pointer used for requesting the mailbox channel

 * @data: mailbox payload

 *

 * This handler is invoked by omap's mailbox driver whenever a mailbox

 * message is received. Usually, the mailbox payload simply contains

 * the index of the virtqueue that is kicked by the remote processor,

 * and we let remoteproc core handle it.

 *

 * In addition to virtqueue indices, we also have some out-of-band values

 * that indicates different events. Those values are deliberately very

 * big so they don't coincide with virtqueue indices.

		/*

		 * remoteproc detected an exception, notify the rproc core.

		 * The remoteproc core will handle the recovery.

 msg contains the index of the triggered vring */

 kick a virtqueue */

 wake up the rproc before kicking it */

 send the index of the triggered virtqueue in the mailbox payload */

/**

 * omap_rproc_write_dsp_boot_addr() - set boot address for DSP remote processor

 * @rproc: handle of a remote processor

 *

 * Set boot address for a supported DSP remote processor.

 *

 * Return: 0 on success, or -EINVAL if boot address is not aligned properly

/*

 * Power up the remote processor.

 *

 * This function will be invoked only after the firmware for this rproc

 * was loaded, parsed successfully, and all of its resource requirements

 * were met.

	/*

	 * Ping the remote processor. this is only for sanity-sake;

	 * there is no functional effect whatsoever.

	 *

	 * Note that the reply will _not_ arrive immediately: this message

	 * will wait in the mailbox fifo until the remote processor is booted.

	/*

	 * remote processor is up, so update the runtime pm status and

	 * enable the auto-suspend. The device usage count is incremented

	 * manually for balancing it for auto-suspend

 power off the remote processor */

	/*

	 * cancel any possible scheduled runtime suspend by incrementing

	 * the device usage count, and resuming the device. The remoteproc

	 * also needs to be woken up if suspended, to avoid the remoteproc

	 * OS to continue to remember any context that it has saved, and

	 * avoid potential issues in misindentifying a subsequent device

	 * reboot as a power restore boot

	/*

	 * update the runtime pm states and status now that the remoteproc

	 * has stopped

 schedule the next auto-suspend */

/**

 * omap_rproc_da_to_va() - internal memory translation helper

 * @rproc: remote processor to apply the address translation for

 * @da: device address to translate

 * @len: length of the memory buffer

 *

 * Custom function implementing the rproc .da_to_va ops to provide address

 * translation (device address to kernel virtual address) for internal RAMs

 * present in a DSP or IPU device). The translated addresses can be used

 * either by the remoteproc core for loading, or by any rpmsg bus drivers.

 *

 * Return: translated virtual address in kernel memory space on success,

 *         or NULL on failure.

 __force to make sparse happy with type conversion */

 1 sec is long enough time to let the remoteproc side suspend the device */

	/*

	 * The remoteproc side is returning the ACK message before saving the

	 * context, because the context saving is performed within a SYS/BIOS

	 * function, and it cannot have any inter-dependencies against the IPC

	 * layer. Also, as the SYS/BIOS needs to preserve properly the processor

	 * register set, sending this ACK or signalling the completion of the

	 * context save through a shared memory variable can never be the

	 * absolute last thing to be executed on the remoteproc side, and the

	 * MPU cannot use the ACK message as a sync point to put the remoteproc

	 * into reset. The only way to ensure that the remote processor has

	 * completed saving the context is to check that the module has reached

	 * STANDBY state (after saving the context, the SYS/BIOS executes the

	 * appropriate target-specific WFI instruction causing the module to

	 * enter STANDBY).

	/*

	 * IOMMUs would have to be disabled specifically for runtime suspend.

	 * They are handled automatically through System PM callbacks for

	 * regular system suspend

 ignore errors on re-enabling code */

	/*

	 * IOMMUs would have to be enabled specifically for runtime resume.

	 * They would have been already enabled automatically through System

	 * PM callbacks for regular system resume

 boot address could be lost after suspend, so restore it */

	/*

	 * remoteproc is running at the time of system suspend, so remember

	 * it so as to wake it up during system resume

	/*

	 * remoteproc was auto-suspended at the time of system suspend,

	 * so no need to wake-up the processor (leave it in suspended

	 * state, will be woken up during a subsequent runtime_resume)

	/*

	 * do not even attempt suspend if the remote processor is not

	 * idled for runtime auto-suspend

 CONFIG_PM */

 end */

	/*

	 * Timer nodes are directly used in client nodes as phandles, so

	 * retrieve the count using appropriate size

 All existing OMAP IPU and DSP processors have an MMU */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ST's Remote Processor Control Driver

 *

 * Copyright (C) 2015 STMicroelectronics - All Rights Reserved

 *

 * Author: Ludovic Barre <ludovic.barre@st.com>

 send the index of the triggered virtqueue in the mailbox payload */

 Update memory entry va */

  No need to map vdev buffer */

 Register memory region */

 Register reserved memory for vdev buffer allocation */

/*

 * Fetch state of the processor: 0 is off, 1 is on.

		/*

		 * To control a co-processor without IPC mechanism.

		 * This driver can be used without mbox and rpmsg.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TI K3 DSP Remote Processor(s) driver

 *

 * Copyright (C) 2018-2020 Texas Instruments Incorporated - https://www.ti.com/

 *	Suman Anna <s-anna@ti.com>

/**

 * struct k3_dsp_mem - internal memory structure

 * @cpu_addr: MPU virtual address of the memory region

 * @bus_addr: Bus address used to access the memory region

 * @dev_addr: Device address of the memory region from DSP view

 * @size: Size of the memory region

/**

 * struct k3_dsp_mem_data - memory definitions for a DSP

 * @name: name for this memory entry

 * @dev_addr: device address for the memory entry

/**

 * struct k3_dsp_dev_data - device data structure for a DSP

 * @mems: pointer to memory definitions for a DSP

 * @num_mems: number of memory regions in @mems

 * @boot_align_addr: boot vector address alignment granularity

 * @uses_lreset: flag to denote the need for local reset management

/**

 * struct k3_dsp_rproc - k3 DSP remote processor driver structure

 * @dev: cached device pointer

 * @rproc: remoteproc device handle

 * @mem: internal memory regions data

 * @num_mems: number of internal memory regions

 * @rmem: reserved memory regions data

 * @num_rmems: number of reserved memory regions

 * @reset: reset control handle

 * @data: pointer to DSP-specific device data

 * @tsp: TI-SCI processor control handle

 * @ti_sci: TI-SCI handle

 * @ti_sci_id: TI-SCI device identifier

 * @mbox: mailbox channel handle

 * @client: mailbox client to request the mailbox channel

/**

 * k3_dsp_rproc_mbox_callback() - inbound mailbox message handler

 * @client: mailbox client pointer used for requesting the mailbox channel

 * @data: mailbox payload

 *

 * This handler is invoked by the OMAP mailbox driver whenever a mailbox

 * message is received. Usually, the mailbox payload simply contains

 * the index of the virtqueue that is kicked by the remote processor,

 * and we let remoteproc core handle it.

 *

 * In addition to virtqueue indices, we also have some out-of-band values

 * that indicate different events. Those values are deliberately very

 * large so they don't coincide with virtqueue indices.

		/*

		 * remoteproc detected an exception, but error recovery is not

		 * supported. So, just log this for now

 silently handle all other valid messages */

 msg contains the index of the triggered vring */

/*

 * Kick the remote processor to notify about pending unprocessed messages.

 * The vqid usage is not used and is inconsequential, as the kick is performed

 * through a simulated GPIO (a bit in an IPC interrupt-triggering register),

 * the remote processor is expected to process both its Tx and Rx virtqueues.

 send the index of the triggered virtqueue in the mailbox payload */

 Put the DSP processor into reset */

 Release the DSP processor from reset */

/*

 * The C66x DSP cores have a local reset that affects only the CPU, and a

 * generic module reset that powers on the device and allows the DSP internal

 * memories to be accessed while the local reset is asserted. This function is

 * used to release the global reset on C66x DSPs to allow loading into the DSP

 * internal RAMs. The .prepare() ops is invoked by remoteproc core before any

 * firmware loading, and is followed by the .start() ops after loading to

 * actually let the C66x DSP cores run.

/*

 * This function implements the .unprepare() ops and performs the complimentary

 * operations to that of the .prepare() ops. The function is used to assert the

 * global reset on applicable C66x cores. This completes the second portion of

 * powering down the C66x DSP cores. The cores themselves are only halted in the

 * .stop() callback through the local reset, and the .unprepare() ops is invoked

 * by the remoteproc core after the remoteproc is stopped to balance the global

 * reset.

/*

 * Power up the DSP remote processor.

 *

 * This function will be invoked only after the firmware for this rproc

 * was loaded, parsed successfully, and all of its resource requirements

 * were met.

	/*

	 * Ping the remote processor, this is only for sanity-sake for now;

	 * there is no functional effect whatsoever.

	 *

	 * Note that the reply will _not_ arrive immediately: this message

	 * will wait in the mailbox fifo until the remote processor is booted.

/*

 * Stop the DSP remote processor.

 *

 * This function puts the DSP processor into reset, and finishes processing

 * of any pending messages.

/*

 * Custom function to translate a DSP device address (internal RAMs only) to a

 * kernel virtual address.  The DSPs can access their RAMs at either an internal

 * address visible only from a DSP, or at the SoC-level bus address. Both these

 * addresses need to be looked through for translation. The translated addresses

 * can be used either by the remoteproc core for loading (when using kernel

 * remoteproc loader), or by any rpmsg bus drivers.

 handle DSP-view addresses */

 handle SoC-view addresses */

 handle static DDR reserved memory regions */

 use reserved memory region 0 for vring DMA allocations */

 use remaining reserved memory regions for static carveouts */

 64-bit address regions currently not supported */

	/*

	 * ensure the DSP local reset is asserted to ensure the DSP doesn't

	 * execute bogus code in .prepare() when the module reset is released.

 C71x cores only have a L1P Cache, there are no L1P SRAMs */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2019 MediaTek Inc.

/**

 * scp_ipi_register() - register an ipi function

 *

 * @scp:	mtk_scp structure

 * @id:		IPI ID

 * @handler:	IPI handler

 * @priv:	private data for IPI handler

 *

 * Register an ipi function to receive ipi interrupt from SCP.

 *

 * Returns 0 if ipi registers successfully, -error on error.

/**

 * scp_ipi_unregister() - unregister an ipi function

 *

 * @scp:	mtk_scp structure

 * @id:		IPI ID

 *

 * Unregister an ipi function to receive ipi interrupt from SCP.

/*

 * scp_memcpy_aligned() - Copy src to dst, where dst is in SCP SRAM region.

 *

 * @dst:	Pointer to the destination buffer, should be in SCP SRAM region.

 * @src:	Pointer to the source buffer.

 * @len:	Length of the source buffer to be copied.

 *

 * Since AP access of SCP SRAM don't support byte write, this always write a

 * full word at a time, and may cause some extra bytes to be written at the

 * beginning & ending of dst.

/**

 * scp_ipi_lock() - Lock before operations of an IPI ID

 *

 * @scp:	mtk_scp structure

 * @id:		IPI ID

 *

 * Note: This should not be used by drivers other than mtk_scp.

/**

 * scp_ipi_lock() - Unlock after operations of an IPI ID

 *

 * @scp:	mtk_scp structure

 * @id:		IPI ID

 *

 * Note: This should not be used by drivers other than mtk_scp.

/**

 * scp_ipi_send() - send data from AP to scp.

 *

 * @scp:	mtk_scp structure

 * @id:		IPI ID

 * @buf:	the data buffer

 * @len:	the data buffer length

 * @wait:	number of msecs to wait for ack. 0 to skip waiting.

 *

 * This function is thread-safe. When this function returns,

 * SCP has received the data and starts the processing.

 * When the processing completes, IPI handler registered

 * by scp_ipi_register will be called in interrupt context.

 *

 * Returns 0 if sending data successfully, -error on error.

 Wait until SCP receives the last command */

 send the command to SCP */

 wait for SCP's ACK */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TI AMx3 Wakeup M3 Remote Processor driver

 *

 * Copyright (C) 2014-2015 Texas Instruments, Inc.

 *

 * Dave Gerlach <d-gerlach@ti.com>

 * Suman Anna <s-anna@ti.com>

/**

 * struct wkup_m3_mem - WkupM3 internal memory structure

 * @cpu_addr: MPU virtual address of the memory region

 * @bus_addr: Bus address used to access the memory region

 * @dev_addr: Device address from Wakeup M3 view

 * @size: Size of the memory region

/**

 * struct wkup_m3_rproc - WkupM3 remote processor state

 * @rproc: rproc handle

 * @pdev: pointer to platform device

 * @mem: WkupM3 memory information

 * @rsts: reset control

 __force to make sparse happy with type conversion */

 umem always needs to be processed first */

		/*

		 * The wkupm3 has umem at address 0 in its view, so the device

		 * addresses for each memory region is computed as a relative

		 * offset of the bus address for umem, and therefore needs to be

		 * processed first.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PRU-ICSS remoteproc driver for various TI SoCs

 *

 * Copyright (C) 2014-2020 Texas Instruments Incorporated - https://www.ti.com/

 *

 * Author(s):

 *	Suman Anna <s-anna@ti.com>

 *	Andrew F. Davis <afd@ti.com>

 *	Grzegorz Jaszczyk <grzegorz.jaszczyk@linaro.org> for Texas Instruments

 PRU_ICSS_PRU_CTRL registers */

 CTRL register bit-fields */

 PRU_ICSS_PRU_DEBUG registers */

 PRU/RTU/Tx_PRU Core IRAM address masks */

 PRU device addresses for various type of PRU RAMs */

 Instruction RAM */

 Primary Data RAM */

 Secondary Data RAM */

 Shared Data RAM */

/**

 * enum pru_iomem - PRU core memory/register range identifiers

 *

 * @PRU_IOMEM_IRAM: PRU Instruction RAM range

 * @PRU_IOMEM_CTRL: PRU Control register range

 * @PRU_IOMEM_DEBUG: PRU Debug register range

 * @PRU_IOMEM_MAX: just keep this one at the end

/**

 * enum pru_type - PRU core type identifier

 *

 * @PRU_TYPE_PRU: Programmable Real-time Unit

 * @PRU_TYPE_RTU: Auxiliary Programmable Real-Time Unit

 * @PRU_TYPE_TX_PRU: Transmit Programmable Real-Time Unit

 * @PRU_TYPE_MAX: just keep this one at the end

/**

 * struct pru_private_data - device data for a PRU core

 * @type: type of the PRU core (PRU, RTU, Tx_PRU)

 * @is_k3: flag used to identify the need for special load handling

/**

 * struct pru_rproc - PRU remoteproc structure

 * @id: id of the PRU core within the PRUSS

 * @dev: PRU core device pointer

 * @pruss: back-reference to parent PRUSS structure

 * @rproc: remoteproc pointer for this PRU core

 * @data: PRU core specific data

 * @mem_regions: data for each of the PRU memory regions

 * @fw_name: name of firmware image used during loading

 * @mapped_irq: virtual interrupt numbers of created fw specific mapping

 * @pru_interrupt_map: pointer to interrupt mapping description (firmware)

 * @pru_interrupt_map_sz: pru_interrupt_map size

 * @dbg_single_step: debug state variable to set PRU into single step mode

 * @dbg_continuous: debug state variable to restore PRU execution mode

 * @evt_count: number of mapped events

/*

 * Control PRU single-step mode

 *

 * This is a debug helper function used for controlling the single-step

 * mode of the PRU. The PRU Debug registers are not accessible when the

 * PRU is in RUNNING state.

 *

 * Writing a non-zero value sets the PRU into single-step mode irrespective

 * of its previous state. The PRU mode is saved only on the first set into

 * a single-step mode. Writing a zero value will restore the PRU into its

 * original mode.

/*

 * Create PRU-specific debugfs entries

 *

 * The entries are created only if the parent remoteproc debugfs directory

 * exists, and will be cleaned up by the remoteproc core.

/*

 * Parse the custom PRU interrupt map resource and configure the INTC

 * appropriately.

 not having pru_interrupt_map is not an error */

 currently supporting only type 0 */

	/*

	 * parse and fill in system event to interrupt channel and

	 * channel-to-host mapping. The interrupt controller to be used

	 * for these mappings for a given PRU remoteproc is always its

	 * corresponding sibling PRUSS INTC node.

	/*

	 * reset references to pru interrupt map - they will stop being valid

	 * after rproc_start returns

 dispose irq mapping - new firmware can provide new mapping */

/*

 * Convert PRU device address (data spaces only) to kernel virtual address.

 *

 * Each PRU has access to all data memories within the PRUSS, accessible at

 * different ranges. So, look through both its primary and secondary Data

 * RAMs as well as any shared Data RAM to convert a PRU device address to

 * kernel virtual address. Data RAM0 is primary Data RAM for PRU0 and Data

 * RAM1 is primary Data RAM for PRU1.

 PRU1 has its local RAM addresses reversed */

/*

 * Convert PRU device address (instruction space) to kernel virtual address.

 *

 * A PRU does not have an unified address space. Each PRU has its very own

 * private Instruction RAM, and its device address is identical to that of

 * its primary Data RAM device address.

	/*

	 * GNU binutils do not support multiple address spaces. The GNU

	 * linker's default linker script places IRAM at an arbitrary high

	 * offset, in order to differentiate it from DRAM. Hence we need to

	 * strip the artificial offset in the IRAM addresses coming from the

	 * ELF file.

	 *

	 * The TI proprietary linker would never set those higher IRAM address

	 * bits anyway. PRU architecture limits the program counter to 16-bit

	 * word-address range. This in turn corresponds to 18-bit IRAM

	 * byte-address range for ELF.

	 *

	 * Two more bits are added just in case to make the final 20-bit mask.

	 * Idea is to have a safeguard in case TI decides to add banking

	 * in future SoCs.

/*

 * Provide address translations for only PRU Data RAMs through the remoteproc

 * core for any PRU client drivers. The PRU Instruction RAM access is restricted

 * only to the PRU loader code.

 PRU-specific address translator used by PRU loader. */

/*

 * Custom memory copy implementation for ICSSG PRU/RTU/Tx_PRU Cores

 *

 * The ICSSG PRU/RTU/Tx_PRU cores have a memory copying issue with IRAM

 * memories, that is not seen on previous generation SoCs. The data is reflected

 * properly in the IRAM memories only for integer (4-byte) copies. Any unaligned

 * copies result in all the other pre-existing bytes zeroed out within that

 * 4-byte boundary, thereby resulting in wrong text/code in the IRAMs. Also, the

 * IRAM memory port interface does not allow any 8-byte copies (as commonly used

 * by ARM64 memcpy implementation) and throws an exception. The DRAM memory

 * ports do not show this behavior.

	/*

	 * TODO: relax limitation of 4-byte aligned dest addresses and copy

	 * sizes

 src offsets in ELF firmware image can be non-aligned */

 go through the available ELF segments */

 grab the kernel address for this device address */

 skip the memzero logic performed by remoteproc ELF loader */

 first, get the section header */

 compute name table section header entry in shdr array */

 finally, compute the name table section address in elf */

 make sure we have the entire irq map */

 make sure irq map has at least the header */

/*

 * Use a custom parse_fw callback function for dealing with PRU firmware

 * specific sections.

 *

 * The firmware blob can contain optional ELF sections: .resource_table section

 * and .pru_irq_map one. The second one contains the PRUSS interrupt mapping

 * description, which needs to be setup before powering on the PRU core. To

 * avoid RAM wastage this ELF section is not mapped to any ELF segment (by the

 * firmware linker) and therefore is not loaded to PRU memory.

 load optional rsc table */

 find .pru_interrupt_map section, not having it is not an error */

 preserve pointer to PRU interrupt map together with it size */

/*

 * Compute PRU id based on the IRAM addresses. The PRU IRAMs are

 * always at a particular offset within the PRUSS address space.

 use a custom load function to deal with PRU-specific quirks */

 use a custom parse function to deal with PRU-specific resources */

 error recovery is not supported for PRUs */

	/*

	 * rproc_add will auto-boot the processor normally, but this is not

	 * desired with PRU client driven boot-flow methodology. A PRU

	 * application/client driver will boot the corresponding PRU

	 * remote-processor as part of its state machine either through the

	 * remoteproc sysfs interface or through the equivalent kernel API.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Qualcomm self-authenticating modem subsystem remoteproc driver

 *

 * Copyright (C) 2016 Linaro Ltd.

 * Copyright (C) 2014 Sony Mobile Communications AB

 * Copyright (c) 2012-2013, The Linux Foundation. All rights reserved.

 RMB Status Register Values */

 PBL/MBA interface registers */

 QDSP6SS Register Offsets */

 AXI Halt Register Offsets */

 QACCEPT Register Offsets */

 QDSP6SS_RESET */

 QDSP6SS CBCR */

 QDSP6SS_GFMUX_CTL */

 QDSP6SS_PWR_CTL */

 QDSP6v56 parameters */

 QDSP6v65 parameters */

 MBA is restricted to a maximum size of 1M */

		/*

		 * When the AXI pipeline is being reset with the Q6 modem partly

		 * operational there is possibility of AXI valid signal to

		 * glitch, leading to spurious transactions and Q6 hangs. A work

		 * around is employed by asserting the AXI_GATING_VALID_OVERRIDE

		 * BIT before triggering Q6 MSS reset. AXI_GATING_VALID_OVERRIDE

		 * is withdrawn post MSS assert followed by a MSS deassert,

		 * while holding the PDC reset.

 De-assert QDSP6 stop core */

 Trigger boot FSM */

 Reset the modem so that boot FSM is in reset state */

 Turn on the XO clock needed for PLL setup */

 Configure Q6 core CBCR to auto-enable after reset sequence */

 De-assert the Q6 stop core signal */

 Wait for 10 us for any staggering logic to settle */

 Trigger the boot FSM to start the Q6 out-of-reset sequence */

 Poll the MSS_STATUS for FSM completion */

 Reset the modem so that boot FSM is in reset state */

 Override the ACC value if required */

 Assert resets, stop core */

 BHS require xo cbcr to be enabled */

 Read CLKOFF bit to go low indicating CLK is enabled */

 Enable power block headswitch and wait for it to stabilize */

 Put LDO in bypass mode */

 Deassert QDSP6 compiler memory clamp */

 Deassert memory peripheral sleep and L2 memory standby */

 Turn on L1, L2, ETB and JU memories 1 at a time */

 MSS_MSM8998 */

			/*

			 * Read back value to ensure the write is done then

			 * wait for 1us for both memory peripheral and data

			 * array to turn on.

 Remove word line clamp */

 Assert resets, stop core */

 Enable power block headswitch and wait for it to stabilize */

		/*

		 * Turn on memories. L2 banks should be done individually

		 * to minimize inrush current.

 Remove IO clamp */

 Bring core out of reset */

 Turn on core clock */

 Start core execution */

 Wait for PBL status */

 Wait for accept */

 Wait for active transactions to complete */

 Request Q-channel transaction takedown */

		/*

		 * If the request is denied, reset the Q-channel takedown request,

		 * wait for active transactions to complete and retry takedown.

 Rely on mss_restart to clear out pending transactions on takedown failure */

 Check if we're already idle */

 Assert halt request */

 Wait for halt */

 Clear halt request (port will remain halted until reset) */

 Hypervisor mapping to access metadata by modem */

 Metadata authentication done, remove modem access */

	/*

	 * Some versions of the MBA firmware will upon boot wipe the MPSS region as well, so provide

	 * the Q6 access to this region.

 Assign MBA image access in DDR to q6 */

		/*

		 * To avoid high MX current during LPASS/MSS restart.

	/* In case of failure or coredump scenario where reclaiming MBA memory

	 * could not happen reclaim it here.

 Initialize the RMB validator */

	/*

	 * In case of a modem subsystem restart on secure devices, the modem

	 * memory can be reclaimed only after MBA is loaded.

 Share ownership between Linux and MSS, during segment loading */

 Load firmware segments */

 Firmware is large enough to be non-split */

 Replace "xxx.xxx" with "xxx.bxx" */

 Transfer ownership of modem ddr region to q6 */

 Unlock mba before copying segments */

 Reset ownership back to Linux to copy segments */

 Reclaim mba after copying segments */

 Try to reset ownership back to Q6 */

 Reset Dump Segment Mask */

	/*

	 * In the absence of mba/mpss sub-child, extract the mba and mpss

	 * reserved memory regions from device's memory-region property.

 Fallback to regulators for old device trees */

 SPDX-License-Identifier: GPL-2.0

/*

 * Qualcomm Peripheral Image Loader for Q6V5

 *

 * Copyright (C) 2016-2018 Linaro Ltd.

 * Copyright (C) 2014 Sony Mobile Communications AB

 * Copyright (c) 2012-2013, The Linux Foundation. All rights reserved.

/**

 * qcom_q6v5_prepare() - reinitialize the qcom_q6v5 context before start

 * @q6v5:	reference to qcom_q6v5 context to be reinitialized

 *

 * Return: 0 on success, negative errno on failure

/**

 * qcom_q6v5_unprepare() - unprepare the qcom_q6v5 context after stop

 * @q6v5:	reference to qcom_q6v5 context to be unprepared

 *

 * Return: 0 on success, 1 if handover hasn't yet been called

 Sometimes the stop triggers a watchdog rather than a stop-ack */

/**

 * qcom_q6v5_wait_for_start() - wait for remote processor start signal

 * @q6v5:	reference to qcom_q6v5 context

 * @timeout:	timeout to wait for the event, in jiffies

 *

 * qcom_q6v5_unprepare() should not be called when this function fails.

 *

 * Return: 0 on success, -ETIMEDOUT on timeout

/**

 * qcom_q6v5_request_stop() - request the remote processor to stop

 * @q6v5:	reference to qcom_q6v5 context

 * @sysmon:	reference to the remote's sysmon instance, or NULL

 *

 * Return: 0 on success, negative errno on failure

 Don't perform SMP2P dance if sysmon already shut down the remote */

/**

 * qcom_q6v5_panic() - panic handler to invoke a stop on the remote

 * @q6v5:	reference to qcom_q6v5 context

 *

 * Set the stop bit and sleep in order to allow the remote processor to flush

 * its caches etc for post mortem debugging.

 *

 * Return: 200ms

/**

 * qcom_q6v5_init() - initializer of the q6v5 common struct

 * @q6v5:	handle to be initialized

 * @pdev:	platform_device reference for acquiring resources

 * @rproc:	associated remoteproc instance

 * @crash_reason: SMEM id for crash reason string, or 0 if none

 * @load_state: load state resource string

 * @handover:	function to be called when proxy resources should be released

 *

 * Return: 0 on success, negative errno on failure

/**

 * qcom_q6v5_deinit() - deinitialize the q6v5 common struct

 * @q6v5:	reference to qcom_q6v5 context to be deinitialized

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TI K3 R5F (MCU) Remote Processor driver

 *

 * Copyright (C) 2017-2020 Texas Instruments Incorporated - https://www.ti.com/

 *	Suman Anna <s-anna@ti.com>

 This address can either be for ATCM or BTCM with the other at address 0x0 */

 R5 TI-SCI Processor Configuration Flags */

 Available from J7200 SoCs onwards */

 Applicable to only AM64x SoCs */

 R5 TI-SCI Processor Control Flags */

 R5 TI-SCI Processor Status Flags */

 Applicable to only AM64x SoCs */

/**

 * struct k3_r5_mem - internal memory structure

 * @cpu_addr: MPU virtual address of the memory region

 * @bus_addr: Bus address used to access the memory region

 * @dev_addr: Device address from remoteproc view

 * @size: Size of the memory region

/*

 * All cluster mode values are not applicable on all SoCs. The following

 * are the modes supported on various SoCs:

 *   Split mode      : AM65x, J721E, J7200 and AM64x SoCs

 *   LockStep mode   : AM65x, J721E and J7200 SoCs

 *   Single-CPU mode : AM64x SoCs only

/**

 * struct k3_r5_soc_data - match data to handle SoC variations

 * @tcm_is_double: flag to denote the larger unified TCMs in certain modes

 * @tcm_ecc_autoinit: flag to denote the auto-initialization of TCMs for ECC

 * @single_cpu_mode: flag to denote if SoC/IP supports Single-CPU mode

/**

 * struct k3_r5_cluster - K3 R5F Cluster structure

 * @dev: cached device pointer

 * @mode: Mode to configure the Cluster - Split or LockStep

 * @cores: list of R5 cores within the cluster

 * @soc_data: SoC-specific feature data for a R5FSS

/**

 * struct k3_r5_core - K3 R5 core structure

 * @elem: linked list item

 * @dev: cached device pointer

 * @rproc: rproc handle representing this core

 * @mem: internal memory regions data

 * @sram: on-chip SRAM memory regions data

 * @num_mems: number of internal memory regions

 * @num_sram: number of on-chip SRAM memory regions

 * @reset: reset control handle

 * @tsp: TI-SCI processor control handle

 * @ti_sci: TI-SCI handle

 * @ti_sci_id: TI-SCI device identifier

 * @atcm_enable: flag to control ATCM enablement

 * @btcm_enable: flag to control BTCM enablement

 * @loczrama: flag to dictate which TCM is at device address 0x0

/**

 * struct k3_r5_rproc - K3 remote processor state

 * @dev: cached device pointer

 * @cluster: cached pointer to parent cluster structure

 * @mbox: mailbox channel handle

 * @client: mailbox client to request the mailbox channel

 * @rproc: rproc handle

 * @core: cached pointer to r5 core structure being used

 * @rmem: reserved memory regions data

 * @num_rmems: number of reserved memory regions

/**

 * k3_r5_rproc_mbox_callback() - inbound mailbox message handler

 * @client: mailbox client pointer used for requesting the mailbox channel

 * @data: mailbox payload

 *

 * This handler is invoked by the OMAP mailbox driver whenever a mailbox

 * message is received. Usually, the mailbox payload simply contains

 * the index of the virtqueue that is kicked by the remote processor,

 * and we let remoteproc core handle it.

 *

 * In addition to virtqueue indices, we also have some out-of-band values

 * that indicate different events. Those values are deliberately very

 * large so they don't coincide with virtqueue indices.

		/*

		 * remoteproc detected an exception, but error recovery is not

		 * supported. So, just log this for now

 silently handle all other valid messages */

 msg contains the index of the triggered vring */

 kick a virtqueue */

 send the index of the triggered virtqueue in the mailbox payload */

 assert local reset on all applicable cores */

 disable PSC modules on all applicable cores */

 enable PSC modules on all applicable cores */

 deassert local reset on all applicable cores */

/*

 * The R5F cores have controls for both a reset and a halt/run. The code

 * execution from DDR requires the initial boot-strapping code to be run

 * from the internal TCMs. This function is used to release the resets on

 * applicable cores to allow loading into the TCMs. The .prepare() ops is

 * invoked by remoteproc core before any firmware loading, and is followed

 * by the .start() ops after loading to actually let the R5 cores run.

 *

 * The Single-CPU mode on applicable SoCs (eg: AM64x) only uses Core0 to

 * execute code, but combines the TCMs from both cores. The resets for both

 * cores need to be released to make this possible, as the TCMs are in general

 * private to each core. Only Core0 needs to be unhalted for running the

 * cluster in this mode. The function uses the same reset logic as LockStep

 * mode for this (though the behavior is agnostic of the reset release order).

 Re-use LockStep-mode reset logic for Single-CPU mode */

	/*

	 * Newer IP revisions like on J7200 SoCs support h/w auto-initialization

	 * of TCMs, so there is no need to perform the s/w memzero. This bit is

	 * configurable through System Firmware, the default value does perform

	 * auto-init, but account for it in case it is disabled

	/*

	 * Zero out both TCMs unconditionally (access from v8 Arm core is not

	 * affected by ATCM & BTCM enable configuration values) so that ECC

	 * can be effective on all TCM addresses.

/*

 * This function implements the .unprepare() ops and performs the complimentary

 * operations to that of the .prepare() ops. The function is used to assert the

 * resets on all applicable cores for the rproc device (depending on LockStep

 * or Split mode). This completes the second portion of powering down the R5F

 * cores. The cores themselves are only halted in the .stop() ops, and the

 * .unprepare() ops is invoked by the remoteproc core after the remoteproc is

 * stopped.

 *

 * The Single-CPU mode on applicable SoCs (eg: AM64x) combines the TCMs from

 * both cores. The access is made possible only with releasing the resets for

 * both cores, but with only Core0 unhalted. This function re-uses the same

 * reset assert logic as LockStep mode for this mode (though the behavior is

 * agnostic of the reset assert order).

 Re-use LockStep-mode reset logic for Single-CPU mode */

/*

 * The R5F start sequence includes two different operations

 * 1. Configure the boot vector for R5F core(s)

 * 2. Unhalt/Run the R5F core(s)

 *

 * The sequence is different between LockStep and Split modes. The LockStep

 * mode requires the boot vector to be configured only for Core0, and then

 * unhalt both the cores to start the execution - Core1 needs to be unhalted

 * first followed by Core0. The Split-mode requires that Core0 to be maintained

 * always in a higher power state that Core1 (implying Core1 needs to be started

 * always only after Core0 is started).

 *

 * The Single-CPU mode on applicable SoCs (eg: AM64x) only uses Core0 to execute

 * code, so only Core0 needs to be unhalted. The function uses the same logic

 * flow as Split-mode for this.

	/*

	 * Ping the remote processor, this is only for sanity-sake for now;

	 * there is no functional effect whatsoever.

	 *

	 * Note that the reply will _not_ arrive immediately: this message

	 * will wait in the mailbox fifo until the remote processor is booted.

 TODO: add boot_addr sanity checking */

 boot vector need not be programmed for Core1 in LockStep mode */

 unhalt/run all applicable cores */

/*

 * The R5F stop function includes the following operations

 * 1. Halt R5F core(s)

 *

 * The sequence is different between LockStep and Split modes, and the order

 * of cores the operations are performed are also in general reverse to that

 * of the start function. The LockStep mode requires each operation to be

 * performed first on Core0 followed by Core1. The Split-mode requires that

 * Core0 to be maintained always in a higher power state that Core1 (implying

 * Core1 needs to be stopped first before Core0).

 *

 * The Single-CPU mode on applicable SoCs (eg: AM64x) only uses Core0 to execute

 * code, so only Core0 needs to be halted. The function uses the same logic

 * flow as Split-mode for this.

 *

 * Note that the R5F halt operation in general is not effective when the R5F

 * core is running, but is needed to make sure the core won't run after

 * deasserting the reset the subsequent time. The asserting of reset can

 * be done here, but is preferred to be done in the .unprepare() ops - this

 * maintains the symmetric behavior between the .start(), .stop(), .prepare()

 * and .unprepare() ops, and also balances them well between sysfs 'state'

 * flow and device bind/unbind or module removal.

 halt all applicable cores */

/*

 * Internal Memory translation helper

 *

 * Custom function implementing the rproc .da_to_va ops to provide address

 * translation (device address to kernel virtual address) for internal RAMs

 * present in a DSP or IPU device). The translated addresses can be used

 * either by the remoteproc core for loading, or by any rpmsg bus drivers.

 handle both R5 and SoC views of ATCM and BTCM */

 handle R5-view addresses of TCMs */

 handle SoC-view addresses of TCMs */

 handle any SRAM regions using SoC-view addresses */

 handle static DDR reserved memory regions */

/*

 * Internal R5F Core configuration

 *

 * Each R5FSS has a cluster-level setting for configuring the processor

 * subsystem either in a safety/fault-tolerant LockStep mode or a performance

 * oriented Split mode on most SoCs. A fewer SoCs support a non-safety mode

 * as an alternate for LockStep mode that exercises only a single R5F core

 * called Single-CPU mode. Each R5F core has a number of settings to either

 * enable/disable each of the TCMs, control which TCM appears at the R5F core's

 * address 0x0. These settings need to be configured before the resets for the

 * corresponding core are released. These settings are all protected and managed

 * by the System Processor.

 *

 * This function is used to pre-configure these settings for each R5F core, and

 * the configuration is all done through various ti_sci_proc functions that

 * communicate with the System Processor. The function also ensures that both

 * the cores are halted before the .prepare() step.

 *

 * The function is called from k3_r5_cluster_rproc_init() and is invoked either

 * once (in LockStep mode or Single-CPU modes) or twice (in Split mode). Support

 * for LockStep-mode is dictated by an eFUSE register bit, and the config

 * settings retrieved from DT are adjusted accordingly as per the permitted

 * cluster mode. Another eFUSE register bit dictates if the R5F cluster only

 * supports a Single-CPU mode. All cluster level settings like Cluster mode and

 * TEINIT (exception handling state dictating ARM or Thumb mode) can only be set

 * and retrieved using Core0.

 *

 * The function behavior is different based on the cluster mode. The R5F cores

 * are configured independently as per their individual settings in Split mode.

 * They are identically configured in LockStep mode using the primary Core0

 * settings. However, some individual settings cannot be set in LockStep mode.

 * This is overcome by switching to Split-mode initially and then programming

 * both the cores with the same settings, before reconfiguing again for

 * LockStep mode.

 check if only Single-CPU mode is supported on applicable SoCs */

 check conventional LockStep vs Split mode configuration */

 always enable ARM mode and set boot vector to 0 */

			/*

			 * Single-CPU configuration bit can only be configured

			 * on Core0 and system firmware will NACK any requests

			 * with the bit configured, so program it only on

			 * permitted cores

			/*

			 * LockStep configuration bit is Read-only on Split-mode

			 * _only_ devices and system firmware will NACK any

			 * requests with the bit configured, so program it only

			 * on permitted devices

		/*

		 * work around system firmware limitations to make sure both

		 * cores are programmed symmetrically in LockStep. LockStep

		 * and TEINIT config is only allowed with Core0.

 use reserved memory region 0 for vring DMA allocations */

 use remaining reserved memory regions for static carveouts */

		/*

		 * R5Fs do not have an MMU, but have a Region Address Translator

		 * (RAT) module that provides a fixed entry translation between

		 * the 32-bit processor addresses to 64-bit bus addresses. The

		 * RAT is programmable only by the R5F cores. Support for RAT

		 * is currently not supported, so 64-bit address regions are not

		 * supported. The absence of MMUs implies that the R5F device

		 * addresses/supported memory regions are restricted to 32-bit

		 * bus addresses, and are identical

/*

 * Each R5F core within a typical R5FSS instance has a total of 64 KB of TCMs,

 * split equally into two 32 KB banks between ATCM and BTCM. The TCMs from both

 * cores are usable in Split-mode, but only the Core0 TCMs can be used in

 * LockStep-mode. The newer revisions of the R5FSS IP maximizes these TCMs by

 * leveraging the Core1 TCMs as well in certain modes where they would have

 * otherwise been unusable (Eg: LockStep-mode on J7200 SoCs, Single-CPU mode on

 * AM64x SoCs). This is done by making a Core1 TCM visible immediately after the

 * corresponding Core0 TCM. The SoC memory map uses the larger 64 KB sizes for

 * the Core0 TCMs, and the dts representation reflects this increased size on

 * supported SoCs. The Core0 TCM sizes therefore have to be adjusted to only

 * half the original size in Split mode.

 K3 R5s have a Region Address Translator (RAT) but no MMU */

 error recovery is not supported at present */

 create only one rproc in lockstep mode or single-cpu mode */

 undo core0 upon any failures on core1 in split-mode */

	/*

	 * lockstep mode and single-cpu modes have only one rproc associated

	 * with first core, whereas split-mode has two rprocs associated with

	 * each core, and requires that core1 be powered down first

		/*

		 * TCMs are designed in general to support RAM-like backing

		 * memories. So, map these as Normal Non-Cached memories. This

		 * also avoids/fixes any potential alignment faults due to

		 * unaligned data accesses when using memcpy() or memset()

		 * functions (normally seen with device type memory).

		/*

		 * TODO:

		 * The R5F cores can place ATCM & BTCM anywhere in its address

		 * based on the corresponding Region Registers in the System

		 * Control coprocessor. For now, place ATCM and BTCM at

		 * addresses 0 and 0x41010000 (same as the bus address on AM65x

		 * SoCs) based on loczrama setting

	/*

	 * Use SoC Power-on-Reset values as default if no DT properties are

	 * used to dictate the TCM configurations

/*

 * free the resources explicitly since driver model is not being used

 * for the child R5F devices

	/*

	 * default to most common efuse configurations - Split-mode on AM64x

	 * and LockStep-mode on all others

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) STMicroelectronics 2018 - All Rights Reserved

 * Authors: Ludovic Barre <ludovic.barre@st.com> for STMicroelectronics.

 *          Fabien Dessenne <fabien.dessenne@st.com> for STMicroelectronics.

 Update memory entry va */

 Register associated reserved memory regions */

  No need to map vdev buffer */

 Register memory region */

 Register reserved memory for vdev buffer alloc */

 500 ms time out */

 200 ms time out to detach should be fair enough */

 Initialise mailbox structure table */

 clear remote proc Deep Sleep */

 Inform the remote processor of the detach */

 Allow remote processor to auto-reboot */

 request shutdown of the remote processor */

 to allow platform Standby power mode, set remote proc Deep Sleep */

 update coprocessor state to OFF if available */

 The resource table has already been mapped, nothing to do */

 no rsc table */

	/*

	 * Assuming the resource table fits in 1kB is fair.

	 * Notice for the detach, that this 1 kB memory area has to be reserved in the coprocessor

	 * firmware for the resource table. On detach, the remoteproc core re-initializes this

	 * entire area by overwriting it with the initial values stored in rproc->clean_table.

	/*

	 * if platform is secured the hold boot bit must be written by

	 * smc call and read normally.

	 * if not secure the hold boot bit could be read/write normally

	/*

	 * See if we can check the M4 status, i.e if it was started

	 * from the boot loader or not.

 remember this */

 no coprocessor state syscon (optional) */

 no need to go further */

 See if we can get the resource table */

 no rsc table syscon (optional) */

 See stm32_rproc_parse_dt() */

		/*

		 * We couldn't get the coprocessor's state, assume

		 * it is not running.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * SLIM core rproc driver

 *

 * Copyright (C) 2016 STMicroelectronics

 *

 * Author: Peter Griffin <peter.griffin@linaro.org>

 SLIM core registers */

 DMEM registers */

 peripherals registers */

/*

 * Remoteproc slim specific device handlers

 disable CPU pipeline clock & reset CPU pipeline */

 disable SLIM core STBus sync */

 enable cpu pipeline clock */

 clear int & cmd mailbox */

 enable all channels cmd & int */

 enable cpu */

 mask all (cmd & int) channels */

 disable cpu pipeline clock */

 __force to make sparse happy with type conversion */

/**

 * st_slim_rproc_alloc() - allocate and initialise slim rproc

 * @pdev: Pointer to the platform_device struct

 * @fw_name: Name of firmware for rproc to use

 *

 * Function for allocating and initialising a slim rproc for use by

 * device drivers whose IP is based around the SLIM core. It

 * obtains and enables any clocks required by the SLIM core and also

 * ioremaps the various IO.

 *

 * Returns st_slim_rproc pointer or PTR_ERR() on error.

 get imem and dmem */

 Register as a remoteproc device */

/**

  * st_slim_rproc_put() - put slim rproc resources

  * @slim_rproc: Pointer to the st_slim_rproc struct

  *

  * Function for calling respective _put() functions on slim_rproc resources.

  *

 SPDX-License-Identifier: GPL-2.0

/*

 * Qualcomm Technology Inc. ADSP Peripheral Image Loader for SDM845.

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

 time out value */

 mask values */

QDSP6SS register offsets*/

TCSR register offsets*/

 Reset the retention logic */

 QDSP6 master port needs to be explicitly halted */

 Wait for halt ACK from QDSP6 */

 Assert the LPASS PDC Reset */

 Place the LPASS processor into reset */

 wait after asserting subsystem restart from AOSS */

 Clear the halt request for the AXIM and AHBM for Q6 */

 De-assert the LPASS PDC Reset */

 Remove the LPASS reset */

 wait after de-asserting subsystem restart from AOSS */

 Enable the XO clock */

 Enable the QDSP6SS sleep clock */

 Enable the QDSP6 core clock */

 Program boot address */

 De-assert QDSP6 stop core. QDSP6 will execute after out of reset */

 Trigger boot FSM to start QDSP6 */

 Wait for core to come out of reset */

 Fall back to the  old "cc_lpass" if "restart" is absent */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Remote processor machine-specific module for DA8XX

 *

 * Copyright (C) 2013 Texas Instruments, Inc.

/*

 * OMAP-L138 Technical References:

 * http://www.ti.com/product/omap-l138

/**

 * struct da8xx_rproc_mem - internal memory structure

 * @cpu_addr: MPU virtual address of the memory region

 * @bus_addr: Bus address used to access the memory region

 * @dev_addr: Device address of the memory region from DSP view

 * @size: Size of the memory region

/**

 * struct da8xx_rproc - da8xx remote processor instance state

 * @rproc: rproc handle

 * @mem: internal memory regions data

 * @num_mems: number of internal memory regions

 * @dsp_clk: placeholder for platform's DSP clk

 * @ack_fxn: chip-specific ack function for ack'ing irq

 * @irq_data: ack_fxn function parameter

 * @chipsig: virt ptr to DSP interrupt registers (CHIPSIG & CHIPSIG_CLR)

 * @bootreg: virt ptr to DSP boot address register (HOST1CFG)

 * @irq: irq # used by this instance

/**

 * handle_event() - inbound virtqueue message workqueue function

 *

 * This function is registered as a kernel thread and is scheduled by the

 * kernel handler.

 Process incoming buffers on all our vrings */

/**

 * da8xx_rproc_callback() - inbound virtqueue message handler

 *

 * This handler is invoked directly by the kernel whenever the remote

 * core (DSP) has modified the state of a virtqueue.  There is no

 * "payload" message indicating the virtqueue index as is the case with

 * mailbox-based implementations on OMAP4.  As such, this handler "polls"

 * each known virtqueue index for every invocation.

 Clear interrupt level source */

		/*

		 * ACK intr to AINTC.

		 *

		 * It has already been ack'ed by the kernel before calling

		 * this function, but since the ARM<->DSP interrupts in the

		 * CHIPSIG register are "level" instead of "pulse" variety,

		 * we need to ack it after taking down the level else we'll

		 * be called again immediately after returning.

 hw requires the start (boot) address be on 1KB boundary */

 kick a virtqueue */

 Interrupt remote proc */

 error recovery is not supported at present */

 everything the ISR needs is now setup, so hook it up */

	/*

	 * rproc_add() can end up enabling the DSP's clk with the DSP

	 * *not* in reset, but da8xx_rproc_start() needs the DSP to be

	 * held in reset at the time it is called.

	/*

	 * The devm subsystem might end up releasing things before

	 * freeing the irq, thus allowing an interrupt to sneak in while

	 * the device is being removed.  This should prevent that.

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

 Copyright 2021 NXP */

 att flags */

 DSP own area */

 DSP instruction area */

 Definitions for i.MX8MP */

 DAP registers */

 DSP audio mix registers */

 Definitions for i.MX8ULP */

/*

 * enum - Predefined Mailbox Messages

 *

 * @RP_MBOX_SUSPEND_SYSTEM: system suspend request for the remote processor

 *

 * @RP_MBOX_SUSPEND_ACK: successful response from remote processor for a

 * suspend request

 *

 * @RP_MBOX_RESUME_SYSTEM: system resume request for the remote processor

 *

 * @RP_MBOX_RESUME_ACK: successful response from remote processor for a

 * resume request

/**

 * struct imx_dsp_rproc - DSP remote processor state

 * @regmap: regmap handler

 * @rproc: rproc handler

 * @dsp_dcfg: device configuration pointer

 * @clks: clocks needed by this device

 * @cl: mailbox client to request the mailbox channel

 * @cl_rxdb: mailbox client to request the mailbox channel for doorbell

 * @tx_ch: mailbox tx channel handle

 * @rx_ch: mailbox rx channel handle

 * @rxdb_ch: mailbox rx doorbell channel handle

 * @pd_dev: power domain device

 * @pd_dev_link: power domain device link

 * @ipc_handle: System Control Unit ipc handle

 * @rproc_work: work for processing virtio interrupts

 * @pm_comp: completion primitive to sync for suspend response

 * @num_domains: power domain number

 * @flags: control flags

/**

 * struct imx_dsp_rproc_dcfg - DSP remote processor configuration

 * @dcfg: imx_rproc_dcfg handler

 * @reset: reset callback function

 dev addr , sys addr  , size	    , flags */

 DDR (Data) */

 dev addr , sys addr  , size	    , flags */

 DDR (Data) */

 dev addr , sys addr  , size	    , flags */

 DDR (Data) */

 dev addr , sys addr  , size	    , flags */

 DDR (Data) */

 Reset function for DSP on i.MX8MP */

 Put DSP into reset and stall */

 Keep reset asserted for 10 cycles */

 Take the DSP out of reset and keep stalled for FW loading */

 Reset function for DSP on i.MX8ULP */

 Put DSP into reset and stall */

 Configure resources of DSP through TFA */

 Take the DSP out of reset and keep stalled for FW loading */

 Specific configuration for i.MX8MP */

 Specific configuration for i.MX8ULP */

 Specific configuration for i.MX8QXP */

 Specific configuration for i.MX8QM */

/*

 * Start function for rproc_ops

 *

 * There is a handshake for start procedure: when DSP starts, it

 * will send a doorbell message to this driver, then the

 * REMOTE_IS_READY flags is set, then driver will kick

 * a message to DSP.

/*

 * Stop function for rproc_ops

 * It clears the REMOTE_IS_READY flags

 Make sure work is finished */

/**

 * imx_dsp_rproc_sys_to_da() - internal memory translation helper

 * @priv: private data pointer

 * @sys: system address (DDR address)

 * @len: length of the memory buffer

 * @da: device address to translate

 *

 * Convert system address (DDR address) to device address (DSP)

 * for there may be memory remap for device.

 Parse address translation table */

/* Main virtqueue message work function

 *

 * This function is executed upon scheduling of the i.MX DSP remoteproc

 * driver's workqueue. The workqueue is scheduled by the mailbox rx

 * handler.

 *

 * This work function processes both the Tx and Rx virtqueue indices on

 * every invocation. The rproc_vq_interrupt function can detect if there

 * are new unprocessed messages or not (returns IRQ_NONE vs IRQ_HANDLED),

 * but there is no need to check for these return values. The index 0

 * triggering will process all pending Rx buffers, and the index 1 triggering

 * will process all newly available Tx buffers and will wakeup any potentially

 * blocked senders.

 *

 * NOTE:

 *    The current logic is based on an inherent design assumption of supporting

 *    only 2 vrings, but this can be changed if needed.

/**

 * imx_dsp_rproc_rx_tx_callback() - inbound mailbox message handler

 * @cl: mailbox client pointer used for requesting the mailbox channel

 * @data: mailbox payload

 *

 * This handler is invoked by mailbox driver whenever a mailbox

 * message is received. Usually, the SUSPEND and RESUME related messages

 * are handled in this function, other messages are handled by remoteproc core

/**

 * imx_dsp_rproc_rxdb_callback() - inbound mailbox message handler

 * @cl: mailbox client pointer used for requesting the mailbox channel

 * @data: mailbox payload

 *

 * For doorbell, there is no message specified, just set REMOTE_IS_READY

 * flag.

 Remote is ready after firmware is loaded and running */

/**

 * imx_dsp_rproc_mbox_init() - request mailbox channels

 * @priv: private data pointer

 *

 * Request three mailbox channels (tx, rx, rxdb).

 Channel for sending message */

 Channel for receiving message */

	/*

	 * RX door bell is used to receive the ready signal from remote

	 * after firmware loaded.

/**

 * imx_dsp_rproc_add_carveout() - request mailbox channels

 * @priv: private data pointer

 *

 * This function registers specified memory entry in @rproc carveouts list

 * The carveouts can help to mapping the memory address for DSP.

 Remap required addresses */

 Register memory region */

		/*

		 * Ignore the first memory region which will be used vdev buffer.

		 * No need to do extra handlings, rproc_add_virtio_dev will handle it.

 Register memory region */

/**

 * imx_dsp_rproc_elf_load_segments() - load firmware segments to memory

 * @rproc: remote processor which will be booted using these fw segments

 * @fw: the ELF firmware image

 *

 * This function specially checks if memsz is zero or not, otherwise it

 * is mostly same as rproc_elf_load_segments().

 go through the available ELF segments */

		/*

		 *  There is a case that with PT_LOAD type, the

		 *  filesz = memsz = 0. If memsz = 0, rproc_da_to_va

		 *  should return NULL ptr, then error is returned.

		 *  So this case should be skipped from the loop.

		 *  Add !memsz checking here.

 grab the kernel address for this device address */

 put the segment where the remote processor expects it */

		/*

		 * Zero out remaining memory for this segment.

		 *

		 * This isn't strictly required since dma_alloc_coherent already

		 * did this for us. albeit harmless, we may consider removing

		 * this.

 Prepare function for rproc_ops */

	/*

	 * Clear buffers after pm rumtime for internal ocram is not

	 * accessible if power and clock are not enabled.

 Unprepare function for rproc_ops */

 Kick function for rproc_ops */

	/*

	 * Send the index of the triggered virtqueue as the mu payload.

	 * Let remote processor know which virtqueue is used.

/**

 * imx_dsp_attach_pm_domains() - attach the power domains

 * @priv: private data pointer

 *

 * On i.MX8QM and i.MX8QXP there is multiple power domains

 * required, so need to link them.

 If only one domain, then no need to link the device */

		/*

		 * device_link_add will check priv->pd_dev[i], if it is

		 * NULL, then will break.

/**

 * imx_dsp_rproc_detect_mode() - detect DSP control mode

 * @priv: private data pointer

 *

 * Different platform has different control method for DSP, which depends

 * on how the DSP is integrated in platform.

 *

 * For i.MX8QXP and i.MX8QM, DSP should be started and stopped by System

 * Control Unit.

 * For i.MX8MP and i.MX8ULP, DSP should be started and stopped by system

 * integration module.

 DSP clocks */

 There are multiple power domains required by DSP on some platform */

 Get clocks */

 pm runtime functions */

	/*

	 * There is power domain attached with mailbox, if setup mailbox

	 * in probe(), then the power of mailbox is always enabled,

	 * the power can't be saved.

	 * So move setup of mailbox to runtime resume.

 Reset DSP if needed */

	/*

	 * Same flow as start procedure.

	 * Load the ELF segments to memory firstly.

 Start the remote processor */

 Tell DSP that suspend is happening */

	/*

	 * DSP need to save the context at suspend.

	 * Here waiting the response for DSP, then power can be disabled.

	/*

	 * The power of DSP is disabled in suspend, so force pm runtime

	 * to be suspend, then we can reenable the power and clocks at

	 * resume stage.

	/*

	 * The power of DSP is disabled at suspend, the memory of dsp

	 * is reset, the image segments are lost. So need to reload

	 * firmware and restart the DSP if it is in running state.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Ingenic JZ47xx remoteproc driver

 * Copyright 2019, Paul Cercueil <paul@crapouillou.net>

/**

 * struct vpu - Ingenic VPU remoteproc private structure

 * @irq: interrupt number

 * @clks: pointers to the VPU and AUX clocks

 * @aux_base: raw pointer to the AUX interface registers

 * @mem_info: array of struct vpu_mem_info, which contain the mapping info of

 *            each of the external memories

 * @dev: private pointer to the device

 The clocks must be enabled for the firmware to be loaded in TCSM */

 Reset the AUX and enable message IRQ */

 Keep AUX in reset mode */

 Ack the interrupt */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2017 Pengutronix, Oleksij Rempel <kernel@pengutronix.de>

 Address: 0x020D8000 */

/**

 * struct imx_rproc_mem - slim internal memory structure

 * @cpu_addr: MPU virtual address of the memory region

 * @sys_addr: Bus address used to access the memory region

 * @size: Size of the memory region

 att flags */

 M4 own area. Can be mapped at probe */

 dev addr , sys addr  , size	    , flags */

 ITCM   */

 OCRAM_S */

 OCRAM */

 OCRAM */

 OCRAM */

 QSPI Code - alias */

 DDR (Code) - alias */

 DTCM */

 OCRAM_S - alias */

 OCRAM */

 OCRAM */

 OCRAM */

 DDR (Data) */

 dev addr , sys addr  , size	    , flags */

 TCML - alias */

 OCRAM_S */

 OCRAM */

 OCRAM */

 QSPI Code - alias */

 DDR (Code) - alias */

 TCML */

 TCMU */

 OCRAM_S */

 OCRAM */

 OCRAM */

 DDR (Data) */

 dev addr , sys addr  , size	    , flags */

 OCRAM_S (M4 Boot code) - alias */

 OCRAM_S (Code) */

 OCRAM (Code) - alias */

 OCRAM_EPDC (Code) - alias */

 OCRAM_PXP (Code) - alias */

 TCML (Code) */

 DDR (Code) - alias, first part of DDR (Data) */

 TCMU (Data) */

 OCRAM (Data) */

 OCRAM_EPDC (Data) */

 OCRAM_PXP (Data) */

 DDR (Data) */

 dev addr , sys addr  , size	    , flags */

 TCML (M4 Boot Code) - alias */

 OCRAM_S (Code) */

 OCRAM_S (Code) - alias */

 TCML (Code) */

 DDR (Code) - alias, first part of DDR (Data) */

 TCMU (Data) */

 OCRAM_S (Data) - alias? */

 DDR (Data) */

 parse address translation table */

	/*

	 * On device side we have many aliases, so we need to convert device

	 * address (M4) to system bus address first.

 __force to make sparse happy with type conversion */

 Update memory entry va */

 Register associated reserved memory regions */

		/*

		 * Ignore the first memory region which will be used vdev buffer.

		 * No need to do extra handlings, rproc_add_virtio_dev will handle it.

 No need to translate pa to da, i.MX use same map */

 Register memory region */

	/*

	 * Send the index of the triggered virtqueue as the mu payload.

	 * Let remote processor know which virtqueue is used.

 The resource table has already been mapped in imx_rproc_addr_init */

 remap required addresses */

 memory-region is optional property */

 remap optional addresses */

 Not map vdevbuffer, vdevring region */

 Not use resource version, because we might share region */

 Remote core is not under control of Linux */

	/*

	 * clk for M4 block including memory. Should be

	 * enabled before .start for FW transfer.

 set some other name then imx */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Character device interface driver for Remoteproc framework.

 *

 * Copyright (c) 2020, The Linux Foundation. All rights reserved.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Qualcomm Peripheral Image Loader helpers

 *

 * Copyright (C) 2016 Linaro Ltd

 * Copyright (C) 2015 Sony Mobile Communications Inc

 * Copyright (c) 2012-2013, The Linux Foundation. All rights reserved.

/**

 * struct minidump_region - Minidump region

 * @name		: Name of the region to be dumped

 * @seq_num:		: Use to differentiate regions with same name.

 * @valid		: This entry to be dumped (if set to 1)

 * @address		: Physical address of region to be dumped

 * @size		: Size of the region

/**

 * struct minidump_subsystem_toc: Subsystem's SMEM Table of content

 * @status : Subsystem toc init status

 * @enabled : if set to 1, this region would be copied during coredump

 * @encryption_status: Encryption status for this subsystem

 * @encryption_required : Decides to encrypt the subsystem regions or not

 * @region_count : Number of regions added in this subsystem toc

 * @regions_baseptr : regions base pointer of the subsystem

/**

 * struct minidump_global_toc: Global Table of Content

 * @status : Global Minidump init status

 * @md_revision : Minidump revision

 * @enabled : Minidump enable status

 * @subsystems : Array of subsystems toc

 Get Global minidump ToC*/

 check if global table pointer exists and init is set */

 Get subsystem table of contents using the minidump id */

	/**

	 * Collect minidump if SS ToC is valid and segment table

	 * is initialized in memory and encryption status is set.

/**

 * qcom_add_glink_subdev() - try to add a GLINK subdevice to rproc

 * @rproc:	rproc handle to parent the subdevice

 * @glink:	reference to a GLINK subdev context

 * @ssr_name:	identifier of the associated remoteproc for ssr notifications

/**

 * qcom_remove_glink_subdev() - remove a GLINK subdevice from rproc

 * @rproc:	rproc handle

 * @glink:	reference to a GLINK subdev context

/**

 * qcom_register_dump_segments() - register segments for coredump

 * @rproc:	remoteproc handle

 * @fw:		firmware header

 *

 * Register all segments of the ELF in the remoteproc coredump segment list

 *

 * Return: 0 on success, negative errno on failure.

/**

 * qcom_add_smd_subdev() - try to add a SMD subdevice to rproc

 * @rproc:	rproc handle to parent the subdevice

 * @smd:	reference to a Qualcomm subdev context

/**

 * qcom_remove_smd_subdev() - remove the smd subdevice from rproc

 * @rproc:	rproc handle

 * @smd:	the SMD subdevice to remove

 Match in the global qcom_ssr_subsystem_list with name */

 Add to global notification list */

/**

 * qcom_register_ssr_notifier() - register SSR notification handler

 * @name:	Subsystem's SSR name

 * @nb:		notifier_block to be invoked upon subsystem's state change

 *

 * This registers the @nb notifier block as part the notifier chain for a

 * remoteproc associated with @name. The notifier block's callback

 * will be invoked when the remote processor's SSR events occur

 * (pre/post startup and pre/post shutdown).

 *

 * Return: a subsystem cookie on success, ERR_PTR on failure.

/**

 * qcom_unregister_ssr_notifier() - unregister SSR notification handler

 * @notify:	subsystem cookie returned from qcom_register_ssr_notifier

 * @nb:		notifier_block to unregister

 *

 * This function will unregister the notifier from the particular notifier

 * chain.

 *

 * Return: 0 on success, %ENOENT otherwise.

/**

 * qcom_add_ssr_subdev() - register subdevice as restart notification source

 * @rproc:	rproc handle

 * @ssr:	SSR subdevice handle

 * @ssr_name:	identifier to use for notifications originating from @rproc

 *

 * As the @ssr is registered with the @rproc SSR events will be sent to all

 * registered listeners for the remoteproc when it's SSR events occur

 * (pre/post startup and pre/post shutdown).

/**

 * qcom_remove_ssr_subdev() - remove subdevice as restart notification source

 * @rproc:	rproc handle

 * @ssr:	SSR subdevice handle

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2019-2020 Linaro Ltd.

/*

 * The PIL relocation information region is used to communicate memory regions

 * occupied by co-processor firmware for post mortem crash analysis.

 *

 * It consists of an array of entries with an 8 byte textual identifier of the

 * region followed by a 64 bit base address and 32 bit size, both little

 * endian.

 Already initialized? */

/**

 * qcom_pil_info_store() - store PIL information of image in IMEM

 * @image:	name of the image

 * @base:	base address of the loaded image

 * @size:	size of the loaded image

 *

 * Return: 0 on success, negative errno on failure

		/*

		 * An empty record means we didn't find it, given that the

		 * records are packed.

 Use two writel() as base is only aligned to 4 bytes on odd entries */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Remote Processor Framework

 *

 * Copyright (C) 2011 Texas Instruments, Inc.

 * Copyright (C) 2011 Google, Inc.

 *

 * Ohad Ben-Cohen <ohad@wizery.com>

 * Mark Grosen <mgrosen@ti.com>

 * Brian Swetland <swetland@google.com>

 * Fernando Guzman Lugo <fernando.lugo@ti.com>

 * Suman Anna <s-anna@ti.com>

 * Robert Tivy <rtivy@ti.com>

 * Armando Uribe De Leon <x0095078@ti.com>

 remoteproc debugfs parent dir */

/*

 * A coredump-configuration-to-string lookup table, for exposing a

 * human readable configuration via debugfs. Always keep in sync with

 * enum rproc_coredump_mechanism

 Expose the current coredump configuration via debugfs */

/*

 * By writing to the 'coredump' debugfs entry, we control the behavior of the

 * coredump mechanism dynamically. The default value of this entry is "disabled".

 *

 * The 'coredump' debugfs entry supports these commands:

 *

 * disabled:	By default coredump collection is disabled. Recovery will

 *		proceed without collecting any dump.

 *

 * enabled:	When the remoteproc crashes the entire coredump will be copied

 *		to a separate buffer and exposed to userspace.

 *

 * inline:	The coredump will not be copied to a separate buffer and the

 *		recovery process will have to wait until data is read by

 *		userspace. But this avoid usage of extra memory.

 remove end of line */

/*

 * Some remote processors may support dumping trace logs into a shared

 * memory buffer. We expose this trace buffer using debugfs, so users

 * can easily tell what's going on remotely.

 *

 * We will most probably improve the rproc tracing facilities later on,

 * but this kind of lightweight and simple mechanism is always good to have,

 * as it provides very early tracing with little to no dependencies at all.

 expose the name of the remote processor via debugfs */

 need room for the name, a newline and a terminating null */

 expose recovery flag via debugfs */

/*

 * By writing to the 'recovery' debugfs entry, we control the behavior of the

 * recovery mechanism dynamically. The default value of this entry is "enabled".

 *

 * The 'recovery' debugfs entry supports these commands:

 *

 * enabled:	When enabled, the remote processor will be automatically

 *		recovered whenever it crashes. Moreover, if the remote

 *		processor crashes while recovery is disabled, it will

 *		be automatically recovered too as soon as recovery is enabled.

 *

 * disabled:	When disabled, a remote processor will remain in a crashed

 *		state if it crashes. This is useful for debugging purposes;

 *		without it, debugging a crash is substantially harder.

 *

 * recover:	This function will trigger an immediate recovery if the

 *		remote processor is in a crashed state, without changing

 *		or checking the recovery state (enabled/disabled).

 *		This is useful during debugging sessions, when one expects

 *		additional crashes to happen after enabling recovery. In this

 *		case, enabling recovery will make it hard to debug subsequent

 *		crashes, so it's recommended to keep recovery disabled, and

 *		instead use the "recover" command as needed.

 remove end of line */

 change the flag and begin the recovery process if needed */

 begin the recovery process without changing the flag */

 expose the crash trigger via debugfs */

 Expose resource table content via debugfs */

 Expose carveout content via debugfs */

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2019 MediaTek Inc.

/**

 * scp_get() - get a reference to SCP.

 *

 * @pdev:	the platform device of the module requesting SCP platform

 *		device for using SCP API.

 *

 * Return: Return NULL if failed.  otherwise reference to SCP.

/**

 * scp_put() - "free" the SCP

 *

 * @scp:	mtk_scp structure from scp_get().

 read the ipi buf addr from FW itself first */

 use default ipi buf addr if the FW doesn't have it */

 SCP won't send another interrupt until we set SCP_TO_HOST to 0. */

		/*

		 * SCP won't send another interrupt until we clear

		 * MT8192_SCP2APMCU_IPC.

 go through the available ELF segments */

 grab the kernel address for this device address */

 put the segment where the remote processor expects it */

 Clear SCP to host interrupt */

 Reset clocks before loading FW */

 Initialize TCM before loading FW. */

 Turn on the power of SCP's SRAM before using it. */

	/*

	 * Set I-cache and D-cache size before loading SCP FW.

	 * SCP SRAM logical address may change when cache size setting differs.

 clear SPM interrupt, SCP2SPM_IPC_CLR */

 enable SRAM clock */

 enable MPU for all memory regions */

 Hold SCP in reset while loading FW. */

 optional memory region */

 optional memory region */

 Disable SCP watchdog */

 Disable SRAM clock */

 Disable SCP watchdog */

/**

 * scp_get_device() - get device struct of SCP

 *

 * @scp:	mtk_scp structure

/**

 * scp_get_rproc() - get rproc struct of SCP

 *

 * @scp:	mtk_scp structure

/**

 * scp_get_vdec_hw_capa() - get video decoder hardware capability

 *

 * @scp:	mtk_scp structure

 *

 * Return: video decoder hardware capability

/**

 * scp_get_venc_hw_capa() - get video encoder hardware capability

 *

 * @scp:	mtk_scp structure

 *

 * Return: video encoder hardware capability

/**

 * scp_mapping_dm_addr() - Mapping SRAM/DRAM to kernel virtual address

 *

 * @scp:	mtk_scp structure

 * @mem_addr:	SCP views memory address

 *

 * Mapping the SCP's SRAM address /

 * DMEM (Data Extended Memory) memory address /

 * Working buffer memory address to

 * kernel virtual address.

 *

 * Return: Return ERR_PTR(-EINVAL) if mapping failed,

 * otherwise the mapped kernel virtual address

 reserved memory is optional. */

 Reserved SCP code size */

 l1tcm is an optional memory region */

 register SCP initialization IPI */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Coredump functionality for Remoteproc framework.

 *

 * Copyright (c) 2020, The Linux Foundation. All rights reserved.

/**

 * rproc_coredump_cleanup() - clean up dump_segments list

 * @rproc: the remote processor handle

/**

 * rproc_coredump_add_segment() - add segment of device memory to coredump

 * @rproc:	handle of a remote processor

 * @da:		device address

 * @size:	size of segment

 *

 * Add device memory to the list of segments to be included in a coredump for

 * the remoteproc.

 *

 * Return: 0 on success, negative errno on error.

/**

 * rproc_coredump_add_custom_segment() - add custom coredump segment

 * @rproc:	handle of a remote processor

 * @da:		device address

 * @size:	size of segment

 * @dumpfn:	custom dump function called for each segment during coredump

 * @priv:	private data

 *

 * Add device memory to the list of segments to be included in the coredump

 * and associate the segment with the given custom dump function and private

 * data.

 *

 * Return: 0 on success, negative errno on error.

/**

 * rproc_coredump_set_elf_info() - set coredump elf information

 * @rproc:	handle of a remote processor

 * @class:	elf class for coredump elf file

 * @machine:	elf machine for coredump elf file

 *

 * Set elf information which will be used for coredump elf file.

 *

 * Return: 0 on success, negative errno on error.

 Copy the vmalloc'ed header first. */

	/*

	 * Find out the segment memory chunk to be copied based on offset.

	 * Keep copying data until count bytes are read.

 EOF check */

/**

 * rproc_coredump() - perform coredump

 * @rproc:	rproc handle

 *

 * This function will generate an ELF header for the registered segments

 * and create a devcoredump device associated with rproc. Based on the

 * coredump configuration this function will directly copy the segments

 * from device memory to userspace or copy segments from device memory to

 * a separate buffer, which can then be read by userspace.

 * The first approach avoids using extra vmalloc memory. But it will stall

 * recovery flow until dump is read by userspace.

		/*

		 * For default configuration buffer includes headers & segments.

		 * For inline dump buffer just includes headers as segments are

		 * directly read from device memory.

 e_ident field is common for both elf32 and elf64 */

 Initialize the dump state struct to be used by rproc_coredump_read */

	/*

	 * Wait until the dump is read and free is called. Data is freed

	 * by devcoredump framework automatically after 5 minutes.

/**

 * rproc_coredump_using_sections() - perform coredump using section headers

 * @rproc:	rproc handle

 *

 * This function will generate an ELF header for the registered sections of

 * segments and create a devcoredump device associated with rproc. Based on

 * the coredump configuration this function will directly copy the segments

 * from device memory to userspace or copy segments from device memory to

 * a separate buffer, which can then be read by userspace.

 * The first approach avoids using extra vmalloc memory. But it will stall

 * recovery flow until dump is read by userspace.

	/*

	 * We allocate two extra section headers. The first one is null.

	 * Second section header is for the string table. Also space is

	 * allocated for string table.

 the extra byte is for the null character at index 0 */

 e_ident field is common for both elf32 and elf64 */

	/*

	 * The zeroth index of the section header is reserved and is rarely used.

	 * Set the section header as null (SHN_UNDEF) and move to the next one.

 Initialize the string table. */

 Fill in the string table section header. */

 No need to copy segments for inline dumps */

 Initialize the dump state struct to be used by rproc_coredump_read */

	/* Wait until the dump is read and free is called. Data is freed

	 * by devcoredump framework automatically after 5 minutes.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2016-2018 Linaro Ltd.

 * Copyright (C) 2014 Sony Mobile Communications AB

 * Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.

 Q6SS Register Offsets */

 AXI Halt Register Offsets */

 Q6SS_RESET */

 Q6SS_BRC_RESET */

 Q6SS_GFMUX_CTL */

 Q6SS_PWR_CTL */

 Q6SS parameters */

 Q6SS config/status registers */

 Assert resets, stop core */

 BHS require xo cbcr to be enabled */

 Read CLKOFF bit to go low indicating CLK is enabled */

 Enable power block headswitch and wait for it to stabilize */

 Put LDO in bypass mode */

 Deassert Q6 compiler memory clamp */

 Deassert memory peripheral sleep and L2 memory standby */

 Turn on L1, L2, ETB and JU memories 1 at a time */

		/*

		 * Read back value to ensure the write is done then

		 * wait for 1us for both memory peripheral and data

		 * array to turn on.

 Remove word line clamp */

 Remove IO clamp */

 Bring core out of reset */

 Turn on core clock */

 Start core execution */

 Release Q6 and WCSS reset */

 Lithium configuration - clock gating and bus arbitration */

 Write bootaddr to EVB so that Q6WCSS will jump there after reset */

 Toggle the restart */

 Enable GCC_WDSP_Q6SS_AHBS_CBCR clock */

 Remove reset to the WCNSS QDSP6SS */

 Enable Q6SSTOP_AHBFABRIC_CBCR clock */

 Enable the LCCCSR CBC clock, Q6SSTOP_Q6SSTOP_LCC_CSR_CBCR clock */

 Enable the Q6AHBS CBC, Q6SSTOP_Q6SS_AHBS_CBCR clock */

 Enable the TCM slave CBC, Q6SSTOP_Q6SS_TCM_SLAVE_CBCR clock */

 Enable the Q6SS AHB master CBC, Q6SSTOP_Q6SS_AHBM_CBCR clock */

 Enable the Q6SS AXI master CBC, Q6SSTOP_Q6SS_AXIM_CBCR clock */

 Enable the Q6SS XO CBC */

 Read CLKOFF bit to go low indicating CLK is enabled */

 Enable QDSP6 sleep clock clock */

 Enable the Enable the Q6 AXI clock, GCC_WDSP_Q6SS_AXIM_CBCR*/

 Assert resets, stop core */

 Program the QDSP6SS PWR_CTL register */

	/*

	 * Enable memories by turning on the QDSP6 memory foot/head switch, one

	 * bank at a time to avoid in-rush current

 Enable the Q6 core clock at the GFM, Q6SSTOP_QDSP6SS_GFMUX_CTL */

 Enable sleep clock branch needed for BCR circuit */

 Start core execution */

 Check if we're already idle */

 Assert halt request */

 Wait for halt */

 Clear halt request (port will remain halted until reset) */

 assert clamps to avoid MX current inrush */

 Disable memories by turning off memory foot/headswitch */

 Clear the BHS_ON bit */

 1 - Assert WCSS/Q6 HALTREQ */

 2 - Enable WCSSAON_CONFIG */

 3 - Set SSCAON_CONFIG */

 4 - SSCAON_CONFIG 1 */

 5 - wait for SSCAON_STATUS */

 6 - De-assert WCSS_AON reset */

 7 - Disable WCSSAON_CONFIG 13 */

 8 - De-assert WCSS/Q6 HALTREQ */

 1 - Halt Q6 bus interface */

 2 - Disable Q6 Core clock */

 3 - Clamp I/O */

 4 - Clamp WL */

 5 - Clear Erase standby */

 6 - Clear Sleep RTN */

 7 - turn off Q6 memory foot/head switch one bank at a time */

 8 - Assert QMC memory RTN */

 9 - Turn off BHS */

 10 - Wait till BHS Reset is done */

 11 -  Assert WCSS reset */

 12 - Assert Q6 reset */

 WCSS powerdown */

 Q6 Power down */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Qualcomm Wireless Connectivity Subsystem Iris driver

 *

 * Copyright (C) 2016 Linaro Ltd

 * Copyright (C) 2014 Sony Mobile Communications AB

 * Copyright (c) 2012-2013, The Linux Foundation. All rights reserved.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Qualcomm Wireless Connectivity Subsystem Peripheral Image Loader

 *

 * Copyright (C) 2016 Linaro Ltd

 * Copyright (C) 2014 Sony Mobile Communications AB

 * Copyright (c) 2012-2013, The Linux Foundation. All rights reserved.

 1: in progress, 0: done */

 1: in progress, 0: done */

 Indicate NV download capability */

 Clear PMU cfg register */

 Clear XO_MODE */

 Reset IRIS */

 Wait for PMU.iris_reg_reset_sts */

 Clear IRIS reset */

 Start IRIS XO configuration */

 Wait for XO configuration to finish */

 Stop IRIS XO configuration */

 Add some delay for XO to settle */

 We have a ready_irq, but it didn't fire in time. */

	/*

	 * XXX: At this point we're supposed to release the resources that we

	 * have been holding on behalf of the WCNSS. Unfortunately this

	 * interrupt comes way before the other side seems to be done.

	 *

	 * So we're currently relying on the ready interrupt firing later then

	 * this and we just disable the resources at the end of wcnss_start().

	/*

	 * If attaching the power domains suceeded we can skip requesting

	 * the regulators for the power domains. For old device trees we need to

	 * reserve extra space to manage them through the regulator interface.

	/*

	 * We might need to fallback to regulators instead of power domains

	 * for old device trees. Don't report an error in that case.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Remote Processor Framework

 *

 * Copyright (C) 2011 Texas Instruments, Inc.

 * Copyright (C) 2011 Google, Inc.

 *

 * Ohad Ben-Cohen <ohad@wizery.com>

 * Brian Swetland <swetland@google.com>

 * Mark Grosen <mgrosen@ti.com>

 * Fernando Guzman Lugo <fernando.lugo@ti.com>

 * Suman Anna <s-anna@ti.com>

 * Robert Tivy <rtivy@ti.com>

 * Armando Uribe De Leon <x0095078@ti.com>

 XXX: pokes into bus_dma_range */

 Unique indices for remoteproc devices */

 translate rproc_crash_type to string */

/*

 * This is the IOMMU fault handler we register with the IOMMU API

 * (when relevant; not all remote processors access memory through

 * an IOMMU).

 *

 * IOMMU core will invoke this handler whenever the remote processor

 * will try to access an unmapped device address.

	/*

	 * Let the iommu core know we're not really handling this fault;

	 * we just used it as a recovery trigger.

	/*

	 * Return physical address according to virtual address location

	 * - in vmalloc: if region ioremapped or defined as dma_alloc_coherent

	 * - in kernel: if region allocated in generic dma memory pool

/**

 * rproc_da_to_va() - lookup the kernel virtual address for a remoteproc address

 * @rproc: handle of a remote processor

 * @da: remoteproc device address to translate

 * @len: length of the memory region @da is pointing to

 * @is_iomem: optional pointer filled in to indicate if @da is iomapped memory

 *

 * Some remote processors will ask us to allocate them physically contiguous

 * memory regions (which we call "carveouts"), and map them to specific

 * device addresses (which are hardcoded in the firmware). They may also have

 * dedicated memory regions internal to the processors, and use them either

 * exclusively or alongside carveouts.

 *

 * They may then ask us to copy objects into specific device addresses (e.g.

 * code/data sections) or expose us certain symbols in other device address

 * (e.g. their trace buffer).

 *

 * This function is a helper function with which we can go over the allocated

 * carveouts and translate specific device addresses to kernel virtual addresses

 * so we can access the referenced memory. This function also allows to perform

 * translations on the internal remoteproc memory regions through a platform

 * implementation specific da_to_va ops, if present.

 *

 * Note: phys_to_virt(iommu_iova_to_phys(rproc->domain, da)) will work too,

 * but only on kernel direct mapped RAM memory. Instead, we're just using

 * here the output of the DMA API for the carveouts, which should be more

 * correct.

 *

 * Return: a valid kernel address on success or NULL on failure

  Verify that carveout is allocated */

 try next carveout if da is too small */

 try next carveout if da is too large */

/**

 * rproc_find_carveout_by_name() - lookup the carveout region by a name

 * @rproc: handle of a remote processor

 * @name: carveout name to find (format string)

 * @...: optional parameters matching @name string

 *

 * Platform driver has the capability to register some pre-allacoted carveout

 * (physically contiguous memory regions) before rproc firmware loading and

 * associated resource table analysis. These regions may be dedicated memory

 * regions internal to the coprocessor or specified DDR region with specific

 * attributes

 *

 * This function is a helper function with which we can go over the

 * allocated carveouts and return associated region characteristics like

 * coprocessor address, length or processor virtual address.

 *

 * Return: a valid pointer on carveout entry on success or NULL on failure.

 Compare carveout and requested names */

/**

 * rproc_check_carveout_da() - Check specified carveout da configuration

 * @rproc: handle of a remote processor

 * @mem: pointer on carveout to check

 * @da: area device address

 * @len: associated area size

 *

 * This function is a helper function to verify requested device area (couple

 * da, len) is part of specified carveout.

 * If da is not set (defined as FW_RSC_ADDR_ANY), only requested length is

 * checked.

 *

 * Return: 0 if carveout matches request else error

 Check requested resource length */

 Address doesn't match registered carveout configuration */

 Check requested resource belongs to registered carveout */

 actual size of vring (in bytes) */

 Search for pre-registered carveout */

 Register carveout in in list */

	/*

	 * Assign an rproc-wide unique index for this vring

	 * TODO: assign a notifyid for rvdev updates as well

	 * TODO: support predefined notifyids (via resource table)

 Potentially bump max_notifyid */

 Let the rproc know the notifyid of this vring.*/

 verify queue size and vring alignment are sane */

	/*

	 * At this point rproc_stop() has been called and the installed resource

	 * table in the remote processor memory may no longer be accessible. As

	 * such and as per rproc_stop(), rproc->table_ptr points to the cached

	 * resource table (rproc->cached_table).  The cached resource table is

	 * only available when a remote processor has been booted by the

	 * remoteproc core, otherwise it is NULL.

	 *

	 * Based on the above, reset the virtio device section in the cached

	 * resource table only if there is one to work with.

/**

 * rproc_rvdev_release() - release the existence of a rvdev

 *

 * @dev: the subdevice's dev

/**

 * rproc_handle_vdev() - handle a vdev fw resource

 * @rproc: the remote processor

 * @ptr: the vring resource descriptor

 * @offset: offset of the resource entry

 * @avail: size of available data (for sanity checking the image)

 *

 * This resource entry requests the host to statically register a virtio

 * device (vdev), and setup everything needed to support it. It contains

 * everything needed to make it possible: the virtio device id, virtio

 * device features, vrings information, virtio config space, etc...

 *

 * Before registering the vdev, the vrings are allocated from non-cacheable

 * physically contiguous memory. Currently we only support two vrings per

 * remote processor (temporary limitation). We might also want to consider

 * doing the vring allocation only later when ->find_vqs() is invoked, and

 * then release them upon ->del_vqs().

 *

 * Note: @da is currently not really handled correctly: we dynamically

 * allocate it using the DMA API, ignoring requested hard coded addresses,

 * and we don't take care of any required IOMMU programming. This is all

 * going to be taken care of when the generic iommu-based DMA API will be

 * merged. Meanwhile, statically-addressed iommu-based firmware images should

 * use RSC_DEVMEM resource entries to map their required @da to the physical

 * address of their base CMA region (ouch, hacky!).

 *

 * Return: 0 on success, or an appropriate error code otherwise

 make sure resource isn't truncated */

 make sure reserved bytes are zeroes */

 we currently support only two vrings per rvdev */

 Initialise vdev subdevice */

 Make device dma capable by inheriting from parent's capabilities */

 parse the vrings */

 remember the resource offset*/

 allocate the vring resources */

/**

 * rproc_handle_trace() - handle a shared trace buffer resource

 * @rproc: the remote processor

 * @ptr: the trace resource descriptor

 * @offset: offset of the resource entry

 * @avail: size of available data (for sanity checking the image)

 *

 * In case the remote processor dumps trace logs into memory,

 * export it via debugfs.

 *

 * Currently, the 'da' member of @rsc should contain the device address

 * where the remote processor is dumping the traces. Later we could also

 * support dynamically allocating this address using the generic

 * DMA API (but currently there isn't a use case for that).

 *

 * Return: 0 on success, or an appropriate error code otherwise

 make sure reserved bytes are zeroes */

 set the trace buffer dma properties */

 set pointer on rproc device */

 make sure snprintf always null terminates, even if truncating */

 create the debugfs entry */

/**

 * rproc_handle_devmem() - handle devmem resource entry

 * @rproc: remote processor handle

 * @ptr: the devmem resource entry

 * @offset: offset of the resource entry

 * @avail: size of available data (for sanity checking the image)

 *

 * Remote processors commonly need to access certain on-chip peripherals.

 *

 * Some of these remote processors access memory via an iommu device,

 * and might require us to configure their iommu before they can access

 * the on-chip peripherals they need.

 *

 * This resource entry is a request to map such a peripheral device.

 *

 * These devmem entries will contain the physical address of the device in

 * the 'pa' member. If a specific device address is expected, then 'da' will

 * contain it (currently this is the only use case supported). 'len' will

 * contain the size of the physical region we need to map.

 *

 * Currently we just "trust" those devmem entries to contain valid physical

 * addresses, but this is going to change: we want the implementations to

 * tell us ranges of physical addresses the firmware is allowed to request,

 * and not allow firmwares to request access to physical addresses that

 * are outside those ranges.

 *

 * Return: 0 on success, or an appropriate error code otherwise

 no point in handling this resource without a valid iommu domain */

 make sure reserved bytes are zeroes */

	/*

	 * We'll need this info later when we'll want to unmap everything

	 * (e.g. on shutdown).

	 *

	 * We can't trust the remote processor not to change the resource

	 * table, so we must maintain this info independently.

/**

 * rproc_alloc_carveout() - allocated specified carveout

 * @rproc: rproc handle

 * @mem: the memory entry to allocate

 *

 * This function allocate specified memory entry @mem using

 * dma_alloc_coherent() as default allocator

 *

 * Return: 0 on success, or an appropriate error code otherwise

		/*

		 * Check requested da is equal to dma address

		 * and print a warn message in case of missalignment.

		 * Don't stop rproc_start sequence as coprocessor may

		 * build pa to da translation on its side.

	/*

	 * Ok, this is non-standard.

	 *

	 * Sometimes we can't rely on the generic iommu-based DMA API

	 * to dynamically allocate the device address and then set the IOMMU

	 * tables accordingly, because some remote processors might

	 * _require_ us to use hard coded device addresses that their

	 * firmware was compiled with.

	 *

	 * In this case, we must use the IOMMU API directly and map

	 * the memory to the device address as expected by the remote

	 * processor.

	 *

	 * Obviously such remote processor devices should not be configured

	 * to use the iommu-based DMA API: we expect 'dma' to contain the

	 * physical address in this case.

		/*

		 * We'll need this info later when we'll want to unmap

		 * everything (e.g. on shutdown).

		 *

		 * We can't trust the remote processor not to change the

		 * resource table, so we must maintain this info independently.

 Update device address as undefined by requester */

/**

 * rproc_release_carveout() - release acquired carveout

 * @rproc: rproc handle

 * @mem: the memory entry to release

 *

 * This function releases specified memory entry @mem allocated via

 * rproc_alloc_carveout() function by @rproc.

 *

 * Return: 0 on success, or an appropriate error code otherwise

 clean up carveout allocations */

/**

 * rproc_handle_carveout() - handle phys contig memory allocation requests

 * @rproc: rproc handle

 * @ptr: the resource entry

 * @offset: offset of the resource entry

 * @avail: size of available data (for image validation)

 *

 * This function will handle firmware requests for allocation of physically

 * contiguous memory regions.

 *

 * These request entries should come first in the firmware's resource table,

 * as other firmware entries might request placing other data objects inside

 * these memory regions (e.g. data/code segments, trace resource entries, ...).

 *

 * Allocating memory this way helps utilizing the reserved physical memory

 * (e.g. CMA) more efficiently, and also minimizes the number of TLB entries

 * needed to map it (in case @rproc is using an IOMMU). Reducing the TLB

 * pressure is important; it may have a substantial impact on performance.

 *

 * Return: 0 on success, or an appropriate error code otherwise

 make sure reserved bytes are zeroes */

	/*

	 * Check carveout rsc already part of a registered carveout,

	 * Search by name, then check the da and length

 Update memory carveout with resource table info */

 Register carveout in in list */

/**

 * rproc_add_carveout() - register an allocated carveout region

 * @rproc: rproc handle

 * @mem: memory entry to register

 *

 * This function registers specified memory entry in @rproc carveouts list.

 * Specified carveout should have been allocated before registering.

/**

 * rproc_mem_entry_init() - allocate and initialize rproc_mem_entry struct

 * @dev: pointer on device struct

 * @va: virtual address

 * @dma: dma address

 * @len: memory carveout length

 * @da: device address

 * @alloc: memory carveout allocation function

 * @release: memory carveout release function

 * @name: carveout name

 *

 * This function allocates a rproc_mem_entry struct and fill it with parameters

 * provided by client.

 *

 * Return: a valid pointer on success, or NULL on failure

/**

 * rproc_of_resm_mem_entry_init() - allocate and initialize rproc_mem_entry struct

 * from a reserved memory phandle

 * @dev: pointer on device struct

 * @of_resm_idx: reserved memory phandle index in "memory-region"

 * @len: memory carveout length

 * @da: device address

 * @name: carveout name

 *

 * This function allocates a rproc_mem_entry struct and fill it with parameters

 * provided by client.

 *

 * Return: a valid pointer on success, or NULL on failure

/**

 * rproc_of_parse_firmware() - parse and return the firmware-name

 * @dev: pointer on device struct representing a rproc

 * @index: index to use for the firmware-name retrieval

 * @fw_name: pointer to a character string, in which the firmware

 *           name is returned on success and unmodified otherwise.

 *

 * This is an OF helper function that parses a device's DT node for

 * the "firmware-name" property and returns the firmware name pointer

 * in @fw_name on success.

 *

 * Return: 0 on success, or an appropriate failure.

/*

 * A lookup table for resource handlers. The indices are defined in

 * enum fw_resource_type.

 handle firmware resource entries before booting the remote processor */

 make sure table isn't truncated */

/**

 * rproc_alloc_registered_carveouts() - allocate all carveouts registered

 * in the list

 * @rproc: the remote processor handle

 *

 * This function parses registered carveout list, performs allocation

 * if alloc() ops registered and updates resource table information

 * if rsc_offset set.

 *

 * Return: 0 on success

 update resource table */

			/*

			 * Some remote processors might need to know the pa

			 * even though they are behind an IOMMU. E.g., OMAP4's

			 * remote M3 processor needs this so it can control

			 * on-chip hardware accelerators that are not behind

			 * the IOMMU, and therefor must know the pa.

			 *

			 * Generally we don't want to expose physical addresses

			 * if we don't have to (remote processors are generally

			 * _not_ trusted), so we might want to do this only for

			 * remote processor that _must_ have this (e.g. OMAP4's

			 * dual M3 subsystem).

			 *

			 * Non-IOMMU processors might also want to have this info.

			 * In this case, the device address and the physical address

			 * are the same.

 Use va if defined else dma to generate pa */

/**

 * rproc_resource_cleanup() - clean up and free all acquired resources

 * @rproc: rproc handle

 *

 * This function will free all resources acquired for @rproc, and it

 * is called whenever @rproc either shuts down or fails to boot.

 clean up debugfs trace entries */

 clean up iommu mapping entries */

 nothing much to do besides complaining */

 clean up carveout allocations */

 clean up remote vdev entries */

 load the ELF segments to memory */

	/*

	 * The starting device has been given the rproc->cached_table as the

	 * resource table. The address of the vring along with the other

	 * allocated resources (carveouts etc) is stored in cached_table.

	 * In order to pass this information to the remote device we must copy

	 * this information to device memory. We also update the table_ptr so

	 * that any subsequent changes will be applied to the loaded version.

 power up the remote processor */

 Start any subdevices for the remote processor */

 Attach to the remote processor */

 Start any subdevices for the remote processor */

/*

 * take a firmware and boot a remote processor with it.

	/*

	 * if enabling an IOMMU isn't relevant for this rproc, this is

	 * just a nop

 Prepare rproc for firmware loading if needed */

 Load resource table, core dump segment list etc from the firmware */

 reset max_notifyid */

 reset handled vdev */

 handle fw resources which are required to boot rproc */

 Allocate carveout resources associated to rproc */

 release HW resources if needed */

 Not having a resource table is acceptable */

	/*

	 * If it is possible to detach the remote processor, keep an untouched

	 * copy of the resource table.  That way we can start fresh again when

	 * the remote processor is re-attached, that is:

	 *

	 *      DETACHED -> ATTACHED -> DETACHED -> ATTACHED

	 *

	 * Free'd in rproc_reset_rsc_table_on_detach() and

	 * rproc_reset_rsc_table_on_stop().

 A resource table was never retrieved, nothing to do here */

	/*

	 * If we made it to this point a clean_table _must_ have been

	 * allocated in rproc_set_rsc_table().  If one isn't present

	 * something went really wrong and we must complain.

 Remember where the external entity installed the resource table */

	/*

	 * If we made it here the remote processor was started by another

	 * entity and a cache table doesn't exist.  As such make a copy of

	 * the resource table currently used by the remote processor and

	 * use that for the rest of the shutdown process.  The memory

	 * allocated here is free'd in rproc_detach().

	/*

	 * Use a copy of the resource table for the remainder of the

	 * shutdown process.

	/*

	 * Reset the memory area where the firmware loaded the resource table

	 * to its original value.  That way when we re-attach the remote

	 * processor the resource table is clean and ready to be used again.

	/*

	 * The clean resource table is no longer needed.  Allocated in

	 * rproc_set_rsc_table().

 A resource table was never retrieved, nothing to do here */

	/*

	 * If a cache table exists the remote processor was started by

	 * the remoteproc core.  That cache table should be used for

	 * the rest of the shutdown process.

	/*

	 * If we made it here the remote processor was started by another

	 * entity and a cache table doesn't exist.  As such make a copy of

	 * the resource table currently used by the remote processor and

	 * use that for the rest of the shutdown process.  The memory

	 * allocated here is free'd in rproc_shutdown().

	/*

	 * Since the remote processor is being switched off the clean table

	 * won't be needed.  Allocated in rproc_set_rsc_table().

	/*

	 * Use a copy of the resource table for the remainder of the

	 * shutdown process.

/*

 * Attach to remote processor - similar to rproc_fw_boot() but without

 * the steps that deal with the firmware image.

	/*

	 * if enabling an IOMMU isn't relevant for this rproc, this is

	 * just a nop

 Do anything that is needed to boot the remote processor */

 reset max_notifyid */

 reset handled vdev */

	/*

	 * Handle firmware resources required to attach to a remote processor.

	 * Because we are attaching rather than booting the remote processor,

	 * we expect the platform driver to properly set rproc->table_ptr.

 Allocate carveout resources associated to rproc */

 release HW resources if needed */

/*

 * take a firmware and boot it up.

 *

 * Note: this function is called asynchronously upon registration of the

 * remote processor (so we must wait until it completes before we try

 * to unregister the device. one other option is just to use kref here,

 * that might be cleaner).

	/*

	 * Since the remote processor is in a detached state, it has already

	 * been booted by another entity.  As such there is no point in waiting

	 * for a firmware image to be loaded, we can simply initiate the process

	 * of attaching to it immediately.

	/*

	 * We're initiating an asynchronous firmware loading, so we can

	 * be built-in kernel code, without hanging the boot process.

 No need to continue if a stop() operation has not been provided */

 Stop any subdevices for the remote processor */

 the installed resource table is no longer accessible */

 power off the remote processor */

/*

 * __rproc_detach(): Does the opposite of __rproc_attach()

 No need to continue if a detach() operation has not been provided */

 Stop any subdevices for the remote processor */

 the installed resource table is no longer accessible */

 Tell the remote processor the core isn't available anymore */

/**

 * rproc_trigger_recovery() - recover a remoteproc

 * @rproc: the remote processor

 *

 * The recovery is done by resetting all the virtio devices, that way all the

 * rpmsg drivers will be reseted along with the remote processor making the

 * remoteproc functional again.

 *

 * This function can sleep, so it cannot be called from atomic context.

 *

 * Return: 0 on success or a negative value upon failure

 State could have changed before we got the mutex */

 generate coredump */

 load firmware */

 boot the remote processor up again */

/**

 * rproc_crash_handler_work() - handle a crash

 * @work: work treating the crash

 *

 * This function needs to handle everything related to a crash, like cpu

 * registers and stack dump, information to help to debug the fatal error, etc.

 handle only the first crash detected */

/**

 * rproc_boot() - boot a remote processor

 * @rproc: handle of a remote processor

 *

 * Boot a remote processor (i.e. load its firmware, power it on, ...).

 *

 * If the remote processor is already powered on, this function immediately

 * returns (successfully).

 *

 * Return: 0 on success, and an appropriate error value otherwise

 skip the boot or attach process if rproc is already powered up */

 load firmware */

/**

 * rproc_shutdown() - power off the remote processor

 * @rproc: the remote processor

 *

 * Power off a remote processor (previously booted with rproc_boot()).

 *

 * In case @rproc is still being used by an additional user(s), then

 * this function will just decrement the power refcount and exit,

 * without really powering off the device.

 *

 * Every call to rproc_boot() must (eventually) be accompanied by a call

 * to rproc_shutdown(). Calling rproc_shutdown() redundantly is a bug.

 *

 * Notes:

 * - we're not decrementing the rproc's refcount, only the power refcount.

 *   which means that the @rproc handle stays valid even after rproc_shutdown()

 *   returns, and users can still use it with a subsequent rproc_boot(), if

 *   needed.

 if the remote proc is still needed, bail out */

 clean up all acquired resources */

 release HW resources if needed */

 Free the copy of the resource table */

/**

 * rproc_detach() - Detach the remote processor from the

 * remoteproc core

 *

 * @rproc: the remote processor

 *

 * Detach a remote processor (previously attached to with rproc_attach()).

 *

 * In case @rproc is still being used by an additional user(s), then

 * this function will just decrement the power refcount and exit,

 * without disconnecting the device.

 *

 * Function rproc_detach() calls __rproc_detach() in order to let a remote

 * processor know that services provided by the application processor are

 * no longer available.  From there it should be possible to remove the

 * platform driver and even power cycle the application processor (if the HW

 * supports it) without needing to switch off the remote processor.

 *

 * Return: 0 on success, and an appropriate error value otherwise

 if the remote proc is still needed, bail out */

 clean up all acquired resources */

 release HW resources if needed */

 Free the copy of the resource table */

/**

 * rproc_get_by_phandle() - find a remote processor by phandle

 * @phandle: phandle to the rproc

 *

 * Finds an rproc handle using the remote processor's phandle, and then

 * return a handle to the rproc.

 *

 * This function increments the remote processor's refcount, so always

 * use rproc_put() to decrement it back once rproc isn't needed anymore.

 *

 * Return: rproc handle on success, and NULL on failure

 prevent underlying implementation from being removed */

/**

 * rproc_set_firmware() - assign a new firmware

 * @rproc: rproc handle to which the new firmware is being assigned

 * @fw_name: new firmware name to be assigned

 *

 * This function allows remoteproc drivers or clients to configure a custom

 * firmware name that is different from the default name used during remoteproc

 * registration. The function does not trigger a remote processor boot,

 * only sets the firmware name used for a subsequent boot. This function

 * should also be called only when the remote processor is offline.

 *

 * This allows either the userspace to configure a different name through

 * sysfs or a kernel-level remoteproc or a remoteproc client driver to set

 * a specific firmware when it is controlling the boot and shutdown of the

 * remote processor.

 *

 * Return: 0 on success or a negative value upon failure

		/*

		 * An offline processor without a start()

		 * function makes no sense.

		/*

		 * A remote processor in a detached state without an

		 * attach() function makes not sense.

		/*

		 * When attaching to a remote processor the device memory

		 * is already available and as such there is no need to have a

		 * cached table.

		/*

		 * When adding a remote processor, the state of the device

		 * can be offline or detached, nothing else.

/**

 * rproc_add() - register a remote processor

 * @rproc: the remote processor handle to register

 *

 * Registers @rproc with the remoteproc framework, after it has been

 * allocated with rproc_alloc().

 *

 * This is called by the platform-specific rproc implementation, whenever

 * a new remote processor device is probed.

 *

 * Note: this function initiates an asynchronous firmware loading

 * context, which will look for virtio devices supported by the rproc's

 * firmware.

 *

 * If found, those virtio devices will be created and added, so as a result

 * of registering this remote processor, additional virtio drivers might be

 * probed.

 *

 * Return: 0 on success and an appropriate error code otherwise

 add char device for this remoteproc */

 create debugfs entries */

 if rproc is marked always-on, request it to boot */

 expose to rproc_get_by_phandle users */

/**

 * devm_rproc_add() - resource managed rproc_add()

 * @dev: the underlying device

 * @rproc: the remote processor handle to register

 *

 * This function performs like rproc_add() but the registered rproc device will

 * automatically be removed on driver detach.

 *

 * Return: 0 on success, negative errno on failure

/**

 * rproc_type_release() - release a remote processor instance

 * @dev: the rproc's device

 *

 * This function should _never_ be called directly.

 *

 * It will be called by the driver core when no one holds a valid pointer

 * to @dev anymore.

	/*

	 * Allocate a firmware name if the caller gave us one to work

	 * with.  Otherwise construct a new one using a default pattern.

 Default to rproc_coredump if no coredump function is specified */

 Default to ELF loader if no load function is specified */

/**

 * rproc_alloc() - allocate a remote processor handle

 * @dev: the underlying device

 * @name: name of this remote processor

 * @ops: platform-specific handlers (mainly start/stop)

 * @firmware: name of firmware file to load, can be NULL

 * @len: length of private data needed by the rproc driver (in bytes)

 *

 * Allocates a new remote processor handle, but does not register

 * it yet. if @firmware is NULL, a default name is used.

 *

 * This function should be used by rproc implementations during initialization

 * of the remote processor.

 *

 * After creating an rproc handle using this function, and when ready,

 * implementations should then call rproc_add() to complete

 * the registration of the remote processor.

 *

 * Note: _never_ directly deallocate @rproc, even if it was not registered

 * yet. Instead, when you need to unroll rproc_alloc(), use rproc_free().

 *

 * Return: new rproc pointer on success, and NULL on failure

 Assign a unique device index and name */

/**

 * rproc_free() - unroll rproc_alloc()

 * @rproc: the remote processor handle

 *

 * This function decrements the rproc dev refcount.

 *

 * If no one holds any reference to rproc anymore, then its refcount would

 * now drop to zero, and it would be freed.

/**

 * rproc_put() - release rproc reference

 * @rproc: the remote processor handle

 *

 * This function decrements the rproc dev refcount.

 *

 * If no one holds any reference to rproc anymore, then its refcount would

 * now drop to zero, and it would be freed.

/**

 * rproc_del() - unregister a remote processor

 * @rproc: rproc handle to unregister

 *

 * This function should be called when the platform specific rproc

 * implementation decides to remove the rproc device. it should

 * _only_ be called if a previous invocation of rproc_add()

 * has completed successfully.

 *

 * After rproc_del() returns, @rproc isn't freed yet, because

 * of the outstanding reference created by rproc_alloc. To decrement that

 * one last refcount, one still needs to call rproc_free().

 *

 * Return: 0 on success and -EINVAL if @rproc isn't valid

 TODO: make sure this works with rproc->power > 1 */

 the rproc is downref'ed as soon as it's removed from the klist */

 Ensure that no readers of rproc_list are still active */

/**

 * devm_rproc_alloc() - resource managed rproc_alloc()

 * @dev: the underlying device

 * @name: name of this remote processor

 * @ops: platform-specific handlers (mainly start/stop)

 * @firmware: name of firmware file to load, can be NULL

 * @len: length of private data needed by the rproc driver (in bytes)

 *

 * This function performs like rproc_alloc() but the acquired rproc device will

 * automatically be released on driver detach.

 *

 * Return: new rproc instance, or NULL on failure

/**

 * rproc_add_subdev() - add a subdevice to a remoteproc

 * @rproc: rproc handle to add the subdevice to

 * @subdev: subdev handle to register

 *

 * Caller is responsible for populating optional subdevice function pointers.

/**

 * rproc_remove_subdev() - remove a subdevice from a remoteproc

 * @rproc: rproc handle to remove the subdevice from

 * @subdev: subdev handle, previously registered with rproc_add_subdev()

/**

 * rproc_get_by_child() - acquire rproc handle of @dev's ancestor

 * @dev:	child device to find ancestor of

 *

 * Return: the ancestor rproc instance, or NULL if not found

/**

 * rproc_report_crash() - rproc crash reporter function

 * @rproc: remote processor

 * @type: crash type

 *

 * This function must be called every time a crash is detected by the low-level

 * drivers implementing a specific remoteproc. This should not be called from a

 * non-remoteproc driver.

 *

 * This function can be called from atomic/interrupt context.

 Prevent suspend while the remoteproc is being recovered */

 Have a worker handle the error; ensure system is not suspended */

	/*

	 * Delay for the longest requested duration before returning. This can

	 * be used by the remoteproc drivers to give the remote processor time

	 * to perform any requested operations (such as flush caches), when

	 * it's not possible to signal the Linux side due to the panic.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Remote Processor Framework

/*

 * By writing to the 'recovery' sysfs entry, we control the behavior of the

 * recovery mechanism dynamically. The default value of this entry is "enabled".

 *

 * The 'recovery' sysfs entry supports these commands:

 *

 * enabled:	When enabled, the remote processor will be automatically

 *		recovered whenever it crashes. Moreover, if the remote

 *		processor crashes while recovery is disabled, it will

 *		be automatically recovered too as soon as recovery is enabled.

 *

 * disabled:	When disabled, a remote processor will remain in a crashed

 *		state if it crashes. This is useful for debugging purposes;

 *		without it, debugging a crash is substantially harder.

 *

 * recover:	This function will trigger an immediate recovery if the

 *		remote processor is in a crashed state, without changing

 *		or checking the recovery state (enabled/disabled).

 *		This is useful during debugging sessions, when one expects

 *		additional crashes to happen after enabling recovery. In this

 *		case, enabling recovery will make it hard to debug subsequent

 *		crashes, so it's recommended to keep recovery disabled, and

 *		instead use the "recover" command as needed.

 change the flag and begin the recovery process if needed */

 begin the recovery process without changing the flag */

/*

 * A coredump-configuration-to-string lookup table, for exposing a

 * human readable configuration via sysfs. Always keep in sync with

 * enum rproc_coredump_mechanism

 Expose the current coredump configuration via debugfs */

/*

 * By writing to the 'coredump' sysfs entry, we control the behavior of the

 * coredump mechanism dynamically. The default value of this entry is "default".

 *

 * The 'coredump' sysfs entry supports these commands:

 *

 * disabled:	This is the default coredump mechanism. Recovery will proceed

 *		without collecting any dump.

 *

 * default:	When the remoteproc crashes the entire coredump will be

 *		copied to a separate buffer and exposed to userspace.

 *

 * inline:	The coredump will not be copied to a separate buffer and the

 *		recovery process will have to wait until data is read by

 *		userspace. But this avoid usage of extra memory.

 Expose the loaded / running firmware name via sysfs */

	/*

	 * If the remote processor has been started by an external

	 * entity we have no idea of what image it is running.  As such

	 * simply display a generic string rather then rproc->firmware.

 Change firmware name via sysfs */

/*

 * A state-to-string lookup table, for exposing a human readable state

 * via sysfs. Always keep in sync with enum rproc_state

 Expose the state of the remote processor via sysfs */

 Change remote processor state via sysfs */

 Expose the name of the remote processor via sysfs */

 create remoteproc device class for sysfs */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Remote Processor Framework Elf loader

 *

 * Copyright (C) 2011 Texas Instruments, Inc.

 * Copyright (C) 2011 Google, Inc.

 *

 * Ohad Ben-Cohen <ohad@wizery.com>

 * Brian Swetland <swetland@google.com>

 * Mark Grosen <mgrosen@ti.com>

 * Fernando Guzman Lugo <fernando.lugo@ti.com>

 * Suman Anna <s-anna@ti.com>

 * Robert Tivy <rtivy@ti.com>

 * Armando Uribe De Leon <x0095078@ti.com>

 * Sjur Brændeland <sjur.brandeland@stericsson.com>

/**

 * rproc_elf_sanity_check() - Sanity Check for ELF32/ELF64 firmware image

 * @rproc: the remote processor handle

 * @fw: the ELF firmware image

 *

 * Make sure this fw image is sane (ie a correct ELF32/ELF64 file).

 *

 * Return: 0 on success and -EINVAL upon any failure

	/*

	 * Elf files are beginning with the same structure. Thus, to simplify

	 * header parsing, we can use the elf32_hdr one for both elf64 and

	 * elf32.

 We assume the firmware has the same endianness as the host */

 BIG ENDIAN */

/**

 * rproc_elf_get_boot_addr() - Get rproc's boot address.

 * @rproc: the remote processor handle

 * @fw: the ELF firmware image

 *

 * Note that the boot address is not a configurable property of all remote

 * processors. Some will always boot at a specific hard-coded address.

 *

 * Return: entry point address of the ELF image

 *

/**

 * rproc_elf_load_segments() - load firmware segments to memory

 * @rproc: remote processor which will be booted using these fw segments

 * @fw: the ELF firmware image

 *

 * This function loads the firmware segments to memory, where the remote

 * processor expects them.

 *

 * Some remote processors will expect their code and data to be placed

 * in specific device addresses, and can't have them dynamically assigned.

 *

 * We currently support only those kind of remote processors, and expect

 * the program header's paddr member to contain those addresses. We then go

 * through the physically contiguous "carveout" memory regions which we

 * allocated (and mapped) earlier on behalf of the remote processor,

 * and "translate" device address to kernel addresses, so we can copy the

 * segments where they are expected.

 *

 * Currently we only support remote processors that required carveout

 * allocations and got them mapped onto their iommus. Some processors

 * might be different: they might not have iommus, and would prefer to

 * directly allocate memory for every segment/resource. This is not yet

 * supported, though.

 *

 * Return: 0 on success and an appropriate error code otherwise

 go through the available ELF segments */

 grab the kernel address for this device address */

 put the segment where the remote processor expects it */

		/*

		 * Zero out remaining memory for this segment.

		 *

		 * This isn't strictly required since dma_alloc_coherent already

		 * did this for us. albeit harmless, we may consider removing

		 * this.

 look for the resource table and handle it */

 First, get the section header according to the elf class */

 Compute name table section header entry in shdr array */

 Finally, compute the name table section address in elf */

 make sure we have the entire table */

 make sure table has at least the header */

 we don't support any version beyond the first */

 make sure reserved bytes are zeroes */

 make sure the offsets array isn't truncated */

/**

 * rproc_elf_load_rsc_table() - load the resource table

 * @rproc: the rproc handle

 * @fw: the ELF firmware image

 *

 * This function finds the resource table inside the remote processor's

 * firmware, load it into the @cached_table and update @table_ptr.

 *

 * Return: 0 on success, negative errno on failure.

	/*

	 * Create a copy of the resource table. When a virtio device starts

	 * and calls vring_new_virtqueue() the address of the allocated vring

	 * will be stored in the cached_table. Before the device is started,

	 * cached_table will be copied into device memory.

/**

 * rproc_elf_find_loaded_rsc_table() - find the loaded resource table

 * @rproc: the rproc handle

 * @fw: the ELF firmware image

 *

 * This function finds the location of the loaded resource table. Don't

 * call this function if the table wasn't loaded yet - it's a bug if you do.

 *

 * Return: pointer to the resource table if it is found or NULL otherwise.

 * If the table wasn't loaded yet the result is unspecified.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Qualcomm ADSP/SLPI Peripheral Image Loader for MSM8974 and MSM8996

 *

 * Copyright (C) 2016 Linaro Ltd

 * Copyright (C) 2014 Sony Mobile Communications AB

 * Copyright (c) 2012-2013, The Linux Foundation. All rights reserved.

 Handle single power domain */

 Handle single power domain */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Remote processor messaging transport (OMAP platform-specific bits)

 *

 * Copyright (C) 2011 Texas Instruments, Inc.

 * Copyright (C) 2011 Google, Inc.

 *

 * Ohad Ben-Cohen <ohad@wizery.com>

 * Brian Swetland <swetland@google.com>

 kick the remote processor, and let it know which virtqueue to poke at */

/**

 * rproc_vq_interrupt() - tell remoteproc that a virtqueue is interrupted

 * @rproc: handle to the remote processor

 * @notifyid: index of the signalled virtqueue (unique per this @rproc)

 *

 * This function should be called by the platform-specific rproc driver,

 * when the remote processor signals that a specific virtqueue has pending

 * messages available.

 *

 * Return: IRQ_NONE if no message was found in the @notifyid virtqueue,

 * and otherwise returns IRQ_HANDLED.

 we're temporarily limited to two virtqueues per rvdev */

 Search allocated memory region by name */

 zero vring */

	/*

	 * Create the new vq, and tell virtio we're not interested in

	 * the 'weak' smp barriers, since we're talking with a real device.

 Update vring in resource table */

 provide the vdev features as retrieved from the firmware */

	/*

	 * Packed ring isn't enabled on remoteproc for now,

	 * because remoteproc uses vring_new_virtqueue() which

	 * creates virtio rings on preallocated memory.

 Give virtio_ring a chance to accept features */

 Give virtio_rproc a chance to accept features. */

 Make sure we don't have any features > 32 bits! */

	/*

	 * Remember the finalized features of our vdev, and provide it

	 * to the remote processor once it is powered on.

/*

 * This function is called whenever vdev is released, and is responsible

 * to decrement the remote processor's refcount which was taken when vdev was

 * added.

 *

 * Never call this function directly; it will be called by the driver

 * core when needed.

/**

 * rproc_add_virtio_dev() - register an rproc-induced virtio device

 * @rvdev: the remote vdev

 * @id: the device type identification (used to match it with a driver).

 *

 * This function registers a virtio device. This vdev's partent is

 * the rproc device.

 *

 * Return: 0 on success or an appropriate error value otherwise

 Try to find dedicated vdev buffer carveout */

 Associate reserved memory to vdev device */

 Use dma address as carveout no memmapped yet */

 Associate vdev buffer memory pool to vdev subdev */

		/*

		 * If we don't have dedicated buffer, just attempt to re-assign

		 * the reserved memory from our parent. A default memory-region

		 * at index 0 from the parent's memory-regions is assigned for

		 * the rvdev dev to allocate from. Failure is non-critical and

		 * the allocations will fall back to global pools, so don't

		 * check return value either.

 Allocate virtio device */

	/*

	 * We're indirectly making a non-temporary copy of the rproc pointer

	 * here, because drivers probed with this vdev will indirectly

	 * access the wrapping rproc.

	 *

	 * Therefore we must increment the rproc refcount here, and decrement

	 * it _only_ when the vdev is released.

 Reference the vdev and vring allocations */

/**

 * rproc_remove_virtio_dev() - remove an rproc-induced virtio device

 * @dev: the virtio device

 * @data: must be null

 *

 * This function unregisters an existing virtio device.

 *

 * Return: 0

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2020 Martin Blumenstingl <martin.blumenstingl@googlemail.com>

 Only bits [31:20] and [17:14] are usable, all other bits must be zero */

	/*

	 * The SRAM content as seen by the ARC core always starts at 0x0

	 * regardless of the value given here (this was discovered by trial and

	 * error). For SoCs older than Meson6 we probably have to set

	 * AO_REMAP_REG1_MOVE_AHB_SRAM_TO_0X0_INSTEAD_OF_DDR to achieve the

	 * same. (At least) For Meson8 and newer that bit must not be set.

	/*

	 * Convert from 0xd9000000 to 0xc9000000 as the vendor driver does.

	 * This only seems to be relevant for the AO_CPU_CNTL register. It is

	 * unknown why this is needed.

 The memory from the ARC core's perspective always starts at 0x0. */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TI Keystone DSP remoteproc driver

 *

 * Copyright (C) 2015-2017 Texas Instruments Incorporated - http://www.ti.com/

/**

 * struct keystone_rproc_mem - internal memory structure

 * @cpu_addr: MPU virtual address of the memory region

 * @bus_addr: Bus address used to access the memory region

 * @dev_addr: Device address of the memory region from DSP view

 * @size: Size of the memory region

/**

 * struct keystone_rproc - keystone remote processor driver structure

 * @dev: cached device pointer

 * @rproc: remoteproc device handle

 * @mem: internal memory regions data

 * @num_mems: number of internal memory regions

 * @dev_ctrl: device control regmap handle

 * @reset: reset control handle

 * @boot_offset: boot register offset in @dev_ctrl regmap

 * @irq_ring: irq entry for vring

 * @irq_fault: irq entry for exception

 * @kick_gpio: gpio used for virtio kicks

 * @workqueue: workqueue for processing virtio interrupts

 Put the DSP processor into reset */

 Configure the boot address and boot the DSP processor */

/*

 * Process the remoteproc exceptions

 *

 * The exception reporting on Keystone DSP remote processors is very simple

 * compared to the equivalent processors on the OMAP family, it is notified

 * through a software-designed specific interrupt source in the IPC interrupt

 * generation register.

 *

 * This function just invokes the rproc_report_crash to report the exception

 * to the remoteproc driver core, to trigger a recovery.

/*

 * Main virtqueue message workqueue function

 *

 * This function is executed upon scheduling of the keystone remoteproc

 * driver's workqueue. The workqueue is scheduled by the vring ISR handler.

 *

 * There is no payload message indicating the virtqueue index as is the

 * case with mailbox-based implementations on OMAP family. As such, this

 * handler processes both the Tx and Rx virtqueue indices on every invocation.

 * The rproc_vq_interrupt function can detect if there are new unprocessed

 * messages or not (returns IRQ_NONE vs IRQ_HANDLED), but there is no need

 * to check for these return values. The index 0 triggering will process all

 * pending Rx buffers, and the index 1 triggering will process all newly

 * available Tx buffers and will wakeup any potentially blocked senders.

 *

 * NOTE:

 * 1. A payload could be added by using some of the source bits in the

 *    IPC interrupt generation registers, but this would need additional

 *    changes to the overall IPC stack, and currently there are no benefits

 *    of adapting that approach.

 * 2. The current logic is based on an inherent design assumption of supporting

 *    only 2 vrings, but this can be changed if needed.

/*

 * Interrupt handler for processing vring kicks from remote processor

/*

 * Power up the DSP remote processor.

 *

 * This function will be invoked only after the firmware for this rproc

 * was loaded, parsed successfully, and all of its resource requirements

 * were met.

/*

 * Stop the DSP remote processor.

 *

 * This function puts the DSP processor into reset, and finishes processing

 * of any pending messages.

/*

 * Kick the remote processor to notify about pending unprocessed messages.

 * The vqid usage is not used and is inconsequential, as the kick is performed

 * through a simulated GPIO (a bit in an IPC interrupt-triggering register),

 * the remote processor is expected to process both its Tx and Rx virtqueues.

/*

 * Custom function to translate a DSP device address (internal RAMs only) to a

 * kernel virtual address.  The DSPs can access their RAMs at either an internal

 * address visible only from a DSP, or at the SoC-level bus address. Both these

 * addresses need to be looked through for translation. The translated addresses

 * can be used either by the remoteproc core for loading (when using kernel

 * remoteproc loader), or by any rpmsg bus drivers.

 handle DSP-view addresses */

 handle SoC-view addresses */

 zero out memories to start in a pristine state */

 construct a custom default fw name - subject to change in future */

 assuming a single digit alias */

 enable clock for accessing DSP internal memories */

 ensure the DSP is in reset before loading firmware */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0

/*

 * FPGA Manager Core

 *

 *  Copyright (C) 2013-2015 Altera Corporation

 *  Copyright (C) 2017 Intel Corporation

 *

 * With code from the mailing list:

 * Copyright (C) 2013 Xilinx, Inc.

/*

 * After all the FPGA image has been written, do the device specific steps to

 * finish and set the FPGA into operating mode.

/**

 * fpga_image_info_alloc - Allocate an FPGA image info struct

 * @dev: owning device

 *

 * Return: struct fpga_image_info or NULL

/**

 * fpga_image_info_free - Free an FPGA image info struct

 * @info: FPGA image info struct to free

/*

 * Call the low level driver's write_init function.  This will do the

 * device-specific things to get the FPGA into the state where it is ready to

 * receive an FPGA image. The low level driver only gets to see the first

 * initial_header_size bytes in the buffer.

	/*

	 * First try to use miter to map the first fragment to access the

	 * header, this is the typical path.

 Otherwise copy the fragments into temporary memory. */

/**

 * fpga_mgr_buf_load_sg - load fpga from image in buffer from a scatter list

 * @mgr:	fpga manager

 * @info:	fpga image specific information

 * @sgt:	scatterlist table

 *

 * Step the low level fpga manager through the device-specific steps of getting

 * an FPGA ready to be configured, writing the image to it, then doing whatever

 * post-configuration steps necessary.  This code assumes the caller got the

 * mgr pointer from of_fpga_mgr_get() or fpga_mgr_get() and checked that it is

 * not an error code.

 *

 * This is the preferred entry point for FPGA programming, it does not require

 * any contiguous kernel memory.

 *

 * Return: 0 on success, negative error code otherwise.

 Write the FPGA image to the FPGA. */

	/*

	 * Write the FPGA image to the FPGA.

/**

 * fpga_mgr_buf_load - load fpga from image in buffer

 * @mgr:	fpga manager

 * @info:	fpga image info

 * @buf:	buffer contain fpga image

 * @count:	byte count of buf

 *

 * Step the low level fpga manager through the device-specific steps of getting

 * an FPGA ready to be configured, writing the image to it, then doing whatever

 * post-configuration steps necessary.  This code assumes the caller got the

 * mgr pointer from of_fpga_mgr_get() and checked that it is not an error code.

 *

 * Return: 0 on success, negative error code otherwise.

	/*

	 * This is just a fast path if the caller has already created a

	 * contiguous kernel buffer and the driver doesn't require SG, non-SG

	 * drivers will still work on the slow path.

	/*

	 * Convert the linear kernel pointer into a sg_table of pages for use

	 * by the driver.

	/*

	 * The temporary pages list is used to code share the merging algorithm

	 * in sg_alloc_table_from_pages

/**

 * fpga_mgr_firmware_load - request firmware and load to fpga

 * @mgr:	fpga manager

 * @info:	fpga image specific information

 * @image_name:	name of image file on the firmware search path

 *

 * Request an FPGA image using the firmware class, then write out to the FPGA.

 * Update the state before each step to provide info on what step failed if

 * there is a failure.  This code assumes the caller got the mgr pointer

 * from of_fpga_mgr_get() or fpga_mgr_get() and checked that it is not an error

 * code.

 *

 * Return: 0 on success, negative error code otherwise.

/**

 * fpga_mgr_load - load FPGA from scatter/gather table, buffer, or firmware

 * @mgr:	fpga manager

 * @info:	fpga image information.

 *

 * Load the FPGA from an image which is indicated in @info.  If successful, the

 * FPGA ends up in operating mode.

 *

 * Return: 0 on success, negative error code otherwise.

 requesting FPGA image from firmware */

 Preparing FPGA to receive image */

 Writing image to FPGA */

 Finishing configuration after image has been written */

 FPGA reports to be in normal operating mode */

/**

 * fpga_mgr_get - Given a device, get a reference to an fpga mgr.

 * @dev:	parent device that fpga mgr was registered with

 *

 * Return: fpga manager struct or IS_ERR() condition containing error code.

/**

 * of_fpga_mgr_get - Given a device node, get a reference to an fpga mgr.

 *

 * @node:	device node

 *

 * Return: fpga manager struct or IS_ERR() condition containing error code.

/**

 * fpga_mgr_put - release a reference to an fpga manager

 * @mgr:	fpga manager structure

/**

 * fpga_mgr_lock - Lock FPGA manager for exclusive use

 * @mgr:	fpga manager

 *

 * Given a pointer to FPGA Manager (from fpga_mgr_get() or

 * of_fpga_mgr_put()) attempt to get the mutex. The user should call

 * fpga_mgr_lock() and verify that it returns 0 before attempting to

 * program the FPGA.  Likewise, the user should call fpga_mgr_unlock

 * when done programming the FPGA.

 *

 * Return: 0 for success or -EBUSY

/**

 * fpga_mgr_unlock - Unlock FPGA manager after done programming

 * @mgr:	fpga manager

/**

 * fpga_mgr_create - create and initialize an FPGA manager struct

 * @parent:	fpga manager device from pdev

 * @name:	fpga manager name

 * @mops:	pointer to structure of fpga manager ops

 * @priv:	fpga manager private data

 *

 * The caller of this function is responsible for freeing the struct with

 * fpga_mgr_free().  Using devm_fpga_mgr_create() instead is recommended.

 *

 * Return: pointer to struct fpga_manager or NULL

/**

 * fpga_mgr_free - free an FPGA manager created with fpga_mgr_create()

 * @mgr:	fpga manager struct

/**

 * devm_fpga_mgr_create - create and initialize a managed FPGA manager struct

 * @parent:	fpga manager device from pdev

 * @name:	fpga manager name

 * @mops:	pointer to structure of fpga manager ops

 * @priv:	fpga manager private data

 *

 * This function is intended for use in an FPGA manager driver's probe function.

 * After the manager driver creates the manager struct with

 * devm_fpga_mgr_create(), it should register it with fpga_mgr_register().  The

 * manager driver's remove function should call fpga_mgr_unregister().  The

 * manager struct allocated with this function will be freed automatically on

 * driver detach.  This includes the case of a probe function returning error

 * before calling fpga_mgr_register(), the struct will still get cleaned up.

 *

 * Return: pointer to struct fpga_manager or NULL

/**

 * fpga_mgr_register - register an FPGA manager

 * @mgr: fpga manager struct

 *

 * Return: 0 on success, negative error code otherwise.

	/*

	 * Initialize framework state by requesting low level driver read state

	 * from device.  FPGA may be in reset mode or may have been programmed

	 * by bootloader or EEPROM.

/**

 * fpga_mgr_unregister - unregister an FPGA manager

 * @mgr: fpga manager struct

 *

 * This function is intended for use in an FPGA manager driver's remove function.

	/*

	 * If the low level driver provides a method for putting fpga into

	 * a desired state upon unregister, do it.

/**

 * devm_fpga_mgr_register - resource managed variant of fpga_mgr_register()

 * @dev: managing device for this FPGA manager

 * @mgr: fpga manager struct

 *

 * This is the devres variant of fpga_mgr_register() for which the unregister

 * function will be called automatically when the managing device is detached.

	/*

	 * Make sure that the struct fpga_manager * that is passed in is

	 * managed itself.

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for FPGA Management Engine (FME) Partial Reconfiguration

 *

 * Copyright (C) 2017-2018 Intel Corporation, Inc.

 *

 * Authors:

 *   Kang Luwei <luwei.kang@intel.com>

 *   Xiao Guangrong <guangrong.xiao@linux.intel.com>

 *   Wu Hao <hao.wu@intel.com>

 *   Joseph Grecco <joe.grecco@intel.com>

 *   Enno Luebbers <enno.luebbers@intel.com>

 *   Tim Whisonant <tim.whisonant@intel.com>

 *   Ananda Ravuri <ananda.ravuri@intel.com>

 *   Christopher Rauer <christopher.rauer@intel.com>

 *   Henry Mitchel <henry.mitchel@intel.com>

 get fme header region */

 check port id */

	/*

	 * align PR buffer per PR bandwidth, as HW ignores the extra padding

	 * data automatically.

 prepare fpga_image_info for PR */

 fme device has been unregistered. */

	/*

	 * it allows userspace to reset the PR region's logic by disabling and

	 * reenabling the bridge to clear things out between acceleration runs.

	 * so no need to hold the bridges after partial reconfiguration.

/**

 * dfl_fme_create_mgr - create fpga mgr platform device as child device

 *

 * @pdata: fme platform_device's pdata

 *

 * Return: mgr platform device if successful, and error code otherwise.

	/*

	 * Each FME has only one fpga-mgr, so allocate platform device using

	 * the same FME platform device id.

/**

 * dfl_fme_destroy_mgr - destroy fpga mgr platform device

 * @pdata: fme platform device's pdata

/**

 * dfl_fme_create_bridge - create fme fpga bridge platform device as child

 *

 * @pdata: fme platform device's pdata

 * @port_id: port id for the bridge to be created.

 *

 * Return: bridge platform device if successful, and error code otherwise.

/**

 * dfl_fme_destroy_bridge - destroy fpga bridge platform device

 * @fme_br: fme bridge to destroy

/**

 * dfl_fme_destroy_bridge - destroy all fpga bridge platform device

 * @pdata: fme platform device's pdata

/**

 * dfl_fme_create_region - create fpga region platform device as child

 *

 * @pdata: fme platform device's pdata

 * @mgr: mgr platform device needed for region

 * @br: br platform device needed for region

 * @port_id: port id

 *

 * Return: fme region if successful, and error code otherwise.

	/*

	 * Each FPGA device may have more than one port, so allocate platform

	 * device using the same port platform device id.

/**

 * dfl_fme_destroy_region - destroy fme region

 * @fme_region: fme region to destroy

/**

 * dfl_fme_destroy_regions - destroy all fme regions

 * @pdata: fme platform device's pdata

 Initialize the region and bridge sub device list */

 Create fpga mgr platform device */

 Read capability register to check number of regions and bridges */

 Create bridge for each port */

 Create region for each port */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * FPGA Manager Driver for Altera Arria/Cyclone/Stratix CvP

 *

 * Copyright (C) 2017 DENX Software Engineering

 *

 * Anatolij Gustschin <agust@denx.de>

 *

 * Manage Altera FPGA firmware using PCIe CvP.

 * Firmware must be in binary "rbf" format.

 BAR used for data transfer in memory mode */

 dummy writes to clear CvP state machine */

 CVP STATUS timeout for USERMODE polling */

 Vendor Specific Extended Capability Registers */

 16bit */

 32bit */

 CVP_CONFIG_READY */

 CVP_CONFIG_ERROR */

 ctrl block is enabling CVP */

 USERMODE */

 CVP_CONFIG_DONE */

 PLD_CLK_IN_USE */

 32bit */

 CVP (1) or normal mode (0) */

 PMA (1) or fabric clock (0) */

 NUMCLKS bits offset */

 32bit */

 32bit */

 32bit */

 CVP_CONFIG_ERROR_LATCHED */

 Vendor Specific Offset V1 */

 V2 Defines */

 8bit */

 Write block sizes */

 Optional CvP config error status check for debugging */

 switches between CvP clock and internal clock */

 set 1 CVP clock cycle for every CVP Data Register Write */

 dummy data, could be any value */

 use small usleep value to re-check and break early */

 STEP 10 (optional) - check CVP_CONFIG_ERROR flag */

/*

 * CvP Version2 Functions

 * Recent Intel FPGAs use a credit mechanism to throttle incoming

 * bitstreams and a different method of clearing the state.

 Clear the START_XFER and CVP_CONFIG bits */

 Return if there is space in FIFO */

 Limit the check credit byte traffic */

 write up to 3 trailing bytes, if any */

 STEP 12 - reset START_XFER bit */

 STEP 13 - reset CVP_CONFIG bit */

	/*

	 * STEP 14

	 * - set CVP_NUMCLKS to 1 and then issue CVP_DUMMY_WR dummy

	 *   writes to the HIP

 STEP 15 - poll CVP_CONFIG_READY bit for 0 with 10us timeout */

 Determine allowed clock to data ratio */

 ratio for all compressed images */

 for uncompressed and encrypted images */

 for uncompressed and unencrypted images */

 STEP 1 - read CVP status and check CVP_EN flag */

	/*

	 * STEP 2

	 * - set HIP_CLK_SEL and CVP_MODE (must be set in the order mentioned)

 switch from fabric to PMA clock */

 set CVP mode */

	/*

	 * STEP 3

	 * - set CVP_NUMCLKS to 1 and issue CVP_DUMMY_WR dummy writes to the HIP

 STEP 4 - set CVP_CONFIG bit */

 request control block to begin transfer using CVP */

 STEP 5 - poll CVP_CONFIG READY for 1 with timeout */

	/*

	 * STEP 6

	 * - set CVP_NUMCLKS to 1 and issue CVP_DUMMY_WR dummy writes to the HIP

 STEP 7 - set START_XFER */

 STEP 8 - start transfer (set CVP_NUMCLKS for bitstream) */

 STEP 9 - write 32-bit data from RBF file to CVP data register */

 Use credit throttling if available */

		/*

		 * STEP 10 (optional) and STEP 11

		 * - check error flag

		 * - loop until data transfer completed

		 * Config images can be huge (more than 40 MiB), so

		 * only check after a new 4k data block has been written.

		 * This reduces the number of checks and speeds up the

		 * configuration process.

 STEP 16 - check CVP_CONFIG_ERROR_LATCHED bit */

 STEP 17 - reset CVP_MODE and HIP_CLK_SEL bit */

 STEP 18 - poll PLD_CLK_IN_USE and USER_MODE bits */

 Discover the Vendor Specific Offset for this device */

	/*

	 * First check if this is the expected FPGA device. PCI config

	 * space access works without enabling the PCI device, memory

	 * space access is enabled further down.

	/*

	 * Enable memory BAR access. We cannot use pci_enable_device() here

	 * because it will make the driver unusable with FPGA devices that

	 * have additional big IOMEM resources (e.g. 4GiB BARs) on 32-bit

	 * platform. Such BARs will not have an assigned address range and

	 * pci_enable_device() will fail, complaining about not claimed BAR,

	 * even if the concerned BAR is not needed for FPGA configuration

	 * at all. Thus, enable the device via PCI config space command.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Altera Passive Serial SPI Driver

 *

 *  Copyright (c) 2017 United Western Technologies, Corporation

 *

 *  Joshua Clayton <stillcompiling@gmail.com>

 *

 * Manage Altera FPGA firmware that is loaded over SPI using the passive

 * serial configuration method.

 * Firmware must be in binary "rbf" format.

 * Works on Arria 10, Cyclone V and Stratix V. Should work on Cyclone series.

 * May work on other Altera FPGAs.

/*          |   Arria 10  |   Cyclone5  |   Stratix5  |

 * t_CF2ST0 |     [; 600] |     [; 600] |     [; 600] |ns

 * t_CFG    |        [2;] |        [2;] |        [2;] |µs

 * t_STATUS | [268; 3000] | [268; 1506] | [268; 1506] |µs

 * t_CF2ST1 |    [; 3000] |    [; 1506] |    [; 1506] |µs

 * t_CF2CK  |     [3010;] |     [1506;] |     [1506;] |µs

 * t_ST2CK  |       [10;] |        [2;] |        [2;] |µs

 * t_CD2UM  |  [175; 830] |  [175; 437] |  [175; 437] |µs

 these values for Cyclone5 are compatible with Stratix5 */

 min(t_STATUS) */

 max(t_CF2ST1) */

 max { min(t_CFG), max(tCF2ST0) } */

 min(t_ST2CK) */

 Array index is enum altera_ps_devtype */

 wait min reset pulse time */

 wait for max { max(t_STATUS), max(t_CF2ST1) } */

 wait for min(t_ST2CK)*/

 set buffer to lsb first */

	/*

	 * After CONF_DONE goes high, send two additional falling edges on DCLK

	 * to begin initialization and enter user mode

 someone added a altera_ps_devtype without adding to the map array */

 Register manager with unique name */

 SPDX-License-Identifier: GPL-2.0

/*

 * FPGA Manager Driver for FPGA Management Engine (FME)

 *

 * Copyright (C) 2017-2018 Intel Corporation, Inc.

 *

 * Authors:

 *   Kang Luwei <luwei.kang@intel.com>

 *   Xiao Guangrong <guangrong.xiao@linux.intel.com>

 *   Wu Hao <hao.wu@intel.com>

 *   Joseph Grecco <joe.grecco@intel.com>

 *   Enno Luebbers <enno.luebbers@intel.com>

 *   Tim Whisonant <tim.whisonant@intel.com>

 *   Ananda Ravuri <ananda.ravuri@intel.com>

 *   Christopher Rauer <christopher.rauer@intel.com>

 *   Henry Mitchel <henry.mitchel@intel.com>

 FME Partial Reconfiguration Sub Feature Register Set */

 FME PR Control Register Bitfield */

 Reset PR engine */

 Ack for PR engine reset */

 PR Region ID */

 Start to request PR service */

 PR data push completion */

 FME PR Status Register Bitfield */

 Number of available entries in HW queue inside the PR engine. */

 PR operation status */

 Controller status */

 PR host status */

 FME PR Data Register Bitfield */

 PR data from the raw-binary file. */

 FME PR Error Register */

 PR Operation errors detected. */

 CRC error detected. */

 Incompatible PR bitstream detected. */

 PR data push protocol violated. */

 PR data fifo overflow error detected */

	/*

	 * driver can push data to PR hardware using PR_DATA register once HW

	 * has enough pr_credit (> 1), pr_credit reduces one for every 32bit

	 * pr data write to PR_DATA register. If pr_credit <= 1, driver needs

	 * to wait for enough pr_credit from hardware by polling.

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for FPGA Device Feature List (DFL) Support

 *

 * Copyright (C) 2017-2018 Intel Corporation, Inc.

 *

 * Authors:

 *   Kang Luwei <luwei.kang@intel.com>

 *   Zhang Yi <yi.z.zhang@intel.com>

 *   Wu Hao <hao.wu@intel.com>

 *   Xiao Guangrong <guangrong.xiao@linux.intel.com>

/*

 * when adding a new feature dev support in DFL framework, it's required to

 * add a new item in enum dfl_id_type and provide related information in below

 * dfl_devs table which is indexed by dfl_id_type, e.g. name string used for

 * platform device creation (define name strings in dfl.h, as they could be

 * reused by platform device drivers).

 *

 * if the new feature dev needs chardev support, then it's required to add

 * a new item in dfl_chardevs table and configure dfl_devs[i].devt_type as

 * index to dfl_chardevs table. If no chardev support just set devt_type

 * as one invalid index (DFL_FPGA_DEVT_MAX).

/**

 * dfl_dev_info - dfl feature device information.

 * @name: name string of the feature platform device.

 * @dfh_id: id value in Device Feature Header (DFH) register by DFL spec.

 * @id: idr id of the feature dev.

 * @devt_type: index to dfl_chrdevs[].

 it is indexed by dfl_id_type */

/**

 * dfl_chardev_info - chardev information of dfl feature device

 * @name: nmae string of the char device.

 * @devt: devt of the char device.

 indexed by enum dfl_fpga_devt_type */

/*

 * introduce a global port_ops list, it allows port drivers to register ops

 * in such list, then other feature devices (e.g. FME), could use the port

 * functions even related port platform device is hidden. Below is one example,

 * in virtualization case of PCIe-based FPGA DFL device, when SRIOV is

 * enabled, port (and it's AFU) is turned into VF and port platform device

 * is hidden from system but it's still required to access port to finish FPGA

 * reconfiguration function in FME.

/**

 * dfl_fpga_port_ops_get - get matched port ops from the global list

 * @pdev: platform device to match with associated port ops.

 * Return: matched port ops on success, NULL otherwise.

 *

 * Please note that must dfl_fpga_port_ops_put after use the port_ops.

 match port_ops using the name of platform device */

/**

 * dfl_fpga_port_ops_put - put port ops

 * @ops: port ops.

/**

 * dfl_fpga_port_ops_add - add port_ops to global list

 * @ops: port ops to add.

/**

 * dfl_fpga_port_ops_del - remove port_ops from global list

 * @ops: port ops to del.

/**

 * dfl_fpga_check_port_id - check the port id

 * @pdev: port platform device.

 * @pport_id: port id to compare.

 *

 * Return: 1 if port device matches with given port id, otherwise 0.

 freeing resources by put_device() after device_initialize() */

 add mmio resource */

 then add irq resource */

 calls release_dfl_dev() which does the clean up  */

/**

 * dfl_fpga_dev_feature_uinit - uinit for sub features of dfl feature device

 * @pdev: feature device.

/**

 * dfl_fpga_dev_feature_init - init for sub features of dfl feature device

 * @pdev: feature device.

 * @feature_drvs: drvs for sub features.

 *

 * This function will match sub features with given feature drvs list and

 * use matched drv to init related sub feature.

 *

 * Return: 0 on success, negative error code otherwise.

/**

 * dfl_fpga_dev_ops_register - register cdev ops for feature dev

 *

 * @pdev: feature dev.

 * @fops: file operations for feature dev's cdev.

 * @owner: owning module/driver.

 *

 * Return: 0 on success, negative error code otherwise.

	/*

	 * set parent to the feature device so that its refcount is

	 * decreased after the last refcount of cdev is gone, that

	 * makes sure the feature device is valid during device

	 * file's life-cycle.

/**

 * dfl_fpga_dev_ops_unregister - unregister cdev ops for feature dev

 * @pdev: feature dev.

/**

 * struct build_feature_devs_info - info collected during feature dev build.

 *

 * @dev: device to enumerate.

 * @cdev: the container device for all feature devices.

 * @nr_irqs: number of irqs for all feature devices.

 * @irq_table: Linux IRQ numbers for all irqs, indexed by local irq index of

 *	       this device.

 * @feature_dev: current feature device.

 * @ioaddr: header register region address of current FIU in enumeration.

 * @start: register resource start of current FIU.

 * @len: max register resource length of current FIU.

 * @sub_features: a sub features linked list for feature device in enumeration.

 * @feature_num: number of sub features for feature device in enumeration.

/**

 * struct dfl_feature_info - sub feature info collected during feature dev build

 *

 * @fid: id of this sub feature.

 * @mmio_res: mmio resource of this sub feature.

 * @ioaddr: mapped base address of mmio resource.

 * @node: node in sub_features linked list.

 * @irq_base: start of irq index in this sub feature.

 * @nr_irqs: number of irqs of this sub feature.

/*

 * register current feature device, it is called when we need to switch to

 * another feature parsing or we have parsed all features on given device

 * feature list.

	/*

	 * we do not need to care for the memory which is associated with

	 * the platform device. After calling platform_device_unregister(),

	 * it will be automatically freed by device's release() callback,

	 * platform_device_release().

	/*

	 * the count should be initialized to 0 to make sure

	 *__fpga_port_enable() following __fpga_port_disable()

	 * works properly for port device.

	 * and it should always be 0 for fme device.

 each sub feature has one MMIO resource */

 fill features and resource information for feature dev */

 save resource information for each feature */

		/*

		 * the FIU header feature has some fundamental functions (sriov

		 * set, port enable/disable) needed for the dfl bus device and

		 * other sub features. So its mmio resource should be mapped by

		 * DFL bus device. And we should not assign it to feature

		 * devices (dfl-fme/afu) again.

		/*

		 * reset it to avoid build_info_free() freeing their resource.

		 *

		 * The resource of successfully registered feature devices

		 * will be freed by platform_device_unregister(). See the

		 * comments in build_info_create_dev().

	/*

	 * we use -ENODEV as the initialization indicator which indicates

	 * whether the id need to be reclaimed

	/*

	 * it is a valid id, free it. See comments in

	 * build_info_create_dev()

 workaround for private features with invalid size, use 4K instead */

	/*

	 * Ideally DFL framework should only read info from DFL header, but

	 * current version DFL only provides mmio resources information for

	 * each feature in DFL Header, no field for interrupt resources.

	 * Interrupt resource information is provided by specific mmio

	 * registers of each private feature which supports interrupt. So in

	 * order to parse and assign irq resources, DFL framework has to look

	 * into specific capability registers of these private features.

	 *

	 * Once future DFL version supports generic interrupt resource

	 * information in common DFL headers, the generic interrupt parsing

	 * code will be added. But in order to be compatible to old version

	 * DFL, the driver may still fall back to these quirks.

/*

 * when create sub feature instances, for private features, it doesn't need

 * to provide resource size and feature id as they could be read from DFH

 * register. For afu sub feature, its register region only contains user

 * defined registers, so never trust any information from it, just use the

 * resource size information provided by its parent FIU.

 read feature size and id if inputs are invalid */

 create platform device for dfl feature dev */

	/*

	 * find and parse FIU's child AFU via its NEXT_AFU register.

	 * please note that only Port has valid NEXT_AFU pointer per spec.

/**

 * parse_feature - parse a feature on given device feature list

 *

 * @binfo: build feature devices information.

 * @ofst: offset to current FIU header

 walk through the device feature list via DFH's next DFH pointer. */

 stop parsing if EOL(End of List) is set or offset is 0 */

 commit current feature device when reach the end of list */

 remove all device feature lists in the list. */

 remove irq table */

/**

 * dfl_fpga_enum_info_add_dfl - add info of a device feature list to enum info

 *

 * @info: ptr to dfl_fpga_enum_info

 * @start: mmio resource address of the device feature list.

 * @len: mmio resource length of the device feature list.

 *

 * One FPGA device may have one or more Device Feature Lists (DFLs), use this

 * function to add information of each DFL to common data structure for next

 * step enumeration.

 *

 * Return: 0 on success, negative error code otherwise.

/**

 * dfl_fpga_enum_info_add_irq - add irq table to enum info

 *

 * @info: ptr to dfl_fpga_enum_info

 * @nr_irqs: number of irqs of the DFL fpga device to be enumerated.

 * @irq_table: Linux IRQ numbers for all irqs, indexed by local irq index of

 *	       this device.

 *

 * One FPGA device may have several interrupts. This function adds irq

 * information of the DFL fpga device to enum info for next step enumeration.

 * This function should be called before dfl_fpga_feature_devs_enumerate().

 * As we only support one irq domain for all DFLs in the same enum info, adding

 * irq table a second time for the same enum info will return error.

 *

 * If we need to enumerate DFLs which belong to different irq domains, we

 * should fill more enum info and enumerate them one by one.

 *

 * Return: 0 on success, negative error code otherwise.

/**

 * dfl_fpga_feature_devs_enumerate - enumerate feature devices

 * @info: information for enumeration.

 *

 * This function creates a container device (base FPGA region), enumerates

 * feature devices based on the enumeration info and creates platform devices

 * under the container device.

 *

 * Return: dfl_fpga_cdev struct on success, -errno on failure

 create and init build info for enumeration */

	/*

	 * start enumeration for all feature devices based on Device Feature

	 * Lists.

/**

 * dfl_fpga_feature_devs_remove - remove all feature devices

 * @cdev: fpga container device.

 *

 * Remove the container device and all feature devices under given container

 * devices.

 remove released ports */

/**

 * __dfl_fpga_cdev_find_port - find a port under given container device

 *

 * @cdev: container device

 * @data: data passed to match function

 * @match: match function used to find specific port from the port device list

 *

 * Find a port device under container device. This function needs to be

 * invoked with lock held.

 *

 * Return: pointer to port's platform device if successful, NULL otherwise.

 *

 * NOTE: you will need to drop the device reference with put_device() after use.

/**

 * dfl_fpga_cdev_release_port - release a port platform device

 *

 * @cdev: parent container device.

 * @port_id: id of the port platform device.

 *

 * This function allows user to release a port platform device. This is a

 * mandatory step before turn a port from PF into VF for SRIOV support.

 *

 * Return: 0 on success, negative error code otherwise.

/**

 * dfl_fpga_cdev_assign_port - assign a port platform device back

 *

 * @cdev: parent container device.

 * @port_id: id of the port platform device.

 *

 * This function allows user to assign a port platform device back. This is

 * a mandatory step after disable SRIOV support.

 *

 * Return: 0 on success, negative error code otherwise.

/**

 * dfl_fpga_cdev_config_ports_pf - configure ports to PF access mode

 *

 * @cdev: parent container device.

 *

 * This function is needed in sriov configuration routine. It could be used to

 * configure the all released ports from VF access mode to PF.

/**

 * dfl_fpga_cdev_config_ports_vf - configure ports to VF access mode

 *

 * @cdev: parent container device.

 * @num_vfs: VF device number.

 *

 * This function is needed in sriov configuration routine. It could be used to

 * configure the released ports from PF access mode to VF.

 *

 * Return: 0 on success, negative error code otherwise.

	/*

	 * can't turn multiple ports into 1 VF device, only 1 port for 1 VF

	 * device, so if released port number doesn't match VF device number,

	 * then reject the request with -EINVAL error code.

/**

 * dfl_fpga_set_irq_triggers - set eventfd triggers for dfl feature interrupts

 *

 * @feature: dfl sub feature.

 * @start: start of irq index in this dfl sub feature.

 * @count: number of irqs.

 * @fds: eventfds to bind with irqs. unbind related irq if fds[n] is negative.

 *	 unbind "count" specified number of irqs if fds ptr is NULL.

 *

 * Bind given eventfds with irqs in this dfl sub feature. Unbind related irq if

 * fds[n] is negative. Unbind "count" specified number of irqs if fds ptr is

 * NULL.

 *

 * Return: 0 on success, negative error code otherwise.

 overflow */

 exceeds nr_irqs */

/**

 * dfl_feature_ioctl_get_num_irqs - dfl feature _GET_IRQ_NUM ioctl interface.

 * @pdev: the feature device which has the sub feature

 * @feature: the dfl sub feature

 * @arg: ioctl argument

 *

 * Return: 0 on success, negative error code otherwise.

/**

 * dfl_feature_ioctl_set_irq - dfl feature _SET_IRQ ioctl interface.

 * @pdev: the feature device which has the sub feature

 * @feature: the dfl sub feature

 * @arg: ioctl argument

 *

 * Return: 0 on success, negative error code otherwise.

 SPDX-License-Identifier: GPL-2.0

/*

 * Lattice MachXO2 Slave SPI Driver

 *

 * Manage Lattice FPGA firmware that is loaded over SPI using

 * the slave serial configuration interface.

 *

 * Copyright (C) 2018 Paolo Pisati <p.pisati@gmail.com>

 MachXO2 Programming Guide - sysCONFIG Programming Commands */

/*

 * Max CCLK in Slave SPI mode according to 'MachXO2 Family Data

 * Sheet' sysCONFIG Port Timing Specifications (3-36)

 Status register bits, errors and error mask */

 no error */

 preamble error */

 abort error */

 overflow error */

 SDM EOF */

 check refresh status */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2011-2015 Xilinx Inc.

 * Copyright (c) 2015, National Instruments Corp.

 *

 * FPGA Manager Driver for Xilinx Zynq, heavily based on xdevcfg driver

 * in their vendor tree.

 Offsets into SLCR regmap */

 FPGA Software Reset Control */

 Level Shifters Enable */

 Constant Definitions */

 Control Register */

 Lock Register */

 Interrupt Status Register */

 Interrupt Mask Register */

 Status Register */

 DMA Source Address Register */

 DMA Destination Address Reg */

 DMA Source Transfer Length */

 DMA Destination Transfer */

 Unlock Register */

 Misc. Control Register */

 Control Register Bit definitions */

 Signal to reset FPGA */

 Enable PCAP for PR */

 Enable PCAP */

 Lower rate to allow decrypt on the fly */

 System booted in secure mode */

 Miscellaneous Control Register bit definitions */

 Internal PCAP loopback */

 Status register bit definitions */

 FPGA init status */

 Interrupt Status/Mask Register Bit definitions */

 DMA command done */

 DMA and PCAP cmd done */

 FPGA programmed */

 Miscellaneous constant values */

 Invalid DMA addr */

 Used to unlock the dev */

 Timeout for polling reset bits */

 Delay for polling reset bits */

/* Signal this is the last DMA transfer, wait for the AXI and PCAP before

 * interrupting

 Timeout for DMA completion */

 Masks for controlling stuff in SLCR */

 Disable all Level shifters */

 Enable Level shifters from PS to PL */

 Enable Level shifters from PL to PS */

 Enable global resets */

 Disable global resets */

 Cause the specified irq mask bits to generate IRQs */

 Must be called with dma_lock held */

 Feed the DMA queue until it is full. */

			/* The last transfer waits for the PCAP to finish too,

			 * notice this also changes the irq_mask to ignore

			 * IXR_DMA_DONE_MASK which ensures we do not trigger

			 * the completion too early.

	/* Once the first transfer is queued we can turn on the ISR, future

	 * calls to zynq_step_dma will happen from the ISR context. The

	 * dma_lock spinlock guarantees this handover is done coherently, the

	 * ISR enable is put at the end to avoid another CPU spinning in the

	 * ISR on this lock.

		/* The last transfer changes to DMA & PCAP mode since we do

		 * not want to continue until everything has been flushed into

		 * the PCAP.

	/* If anything other than DMA completion is reported stop and hand

	 * control back to zynq_fpga_ops_write, something went wrong,

	 * otherwise progress the DMA.

/* Sanity check the proposed bitstream. It must start with the sync word in

 * the correct byte order, and be dword aligned. The input is a Xilinx .bin

 * file with every 32 bit quantity swapped.

 check if bitstream is encrypted & and system's still secure */

 don't globally reset PL if we're doing partial reconfig */

 assert AXI interface resets */

 disable all level shifters */

 enable level shifters from PS to PL */

		/* create a rising edge on PCFG_INIT. PCFG_INIT follows

		 * PCFG_PROG_B, so we need to poll it after setting PCFG_PROG_B

		 * to make sure the rising edge actually happens.

		 * Note: PCFG_PROG_B is low active, sequence as described in

		 * UG585 v1.10 page 211

	/* set configuration register with following options:

	 * - enable PCAP interface

	 * - set throughput for maximum speed (if bistream not encrypted)

	 * - set CPU in user mode

 We expect that the command queue is empty right now. */

 ensure internal PCAP loopback is disabled */

	/* The hardware can only DMA multiples of 4 bytes, and it requires the

	 * starting addresses to be aligned to 64 bits (UG585 pg 212).

 enable clock */

 zynq_step_dma will turn on interrupts */

	/* There doesn't seem to be a way to force cancel any DMA, so if

	 * something went wrong we are relying on the hardware to have halted

	 * the DMA before we get here, if there was we could use

	 * wait_for_completion_interruptible too.

 Release 'PR' control back to the ICAP */

 for the partial reconfig case we didn't touch the level shifters */

 enable level shifters from PL to PS */

 deassert AXI interface resets */

 unlock the device */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for FPGA Accelerated Function Unit (AFU)

 *

 * Copyright (C) 2017-2018 Intel Corporation, Inc.

 *

 * Authors:

 *   Wu Hao <hao.wu@intel.com>

 *   Xiao Guangrong <guangrong.xiao@linux.intel.com>

 *   Joseph Grecco <joe.grecco@intel.com>

 *   Enno Luebbers <enno.luebbers@intel.com>

 *   Tim Whisonant <tim.whisonant@intel.com>

 *   Ananda Ravuri <ananda.ravuri@intel.com>

 *   Henry Mitchel <henry.mitchel@intel.com>

 us */

 us */

/**

 * __afu_port_enable - enable a port by clear reset

 * @pdev: port platform device.

 *

 * Enable Port by clear the port soft reset bit, which is set by default.

 * The AFU is unable to respond to any MMIO access while in reset.

 * __afu_port_enable function should only be used after __afu_port_disable

 * function.

 *

 * The caller needs to hold lock for protection.

 Clear port soft reset */

	/*

	 * HW clears the ack bit to indicate that the port is fully out

	 * of reset.

/**

 * __afu_port_disable - disable a port by hold reset

 * @pdev: port platform device.

 *

 * Disable Port by setting the port soft reset bit, it puts the port into reset.

 *

 * The caller needs to hold lock for protection.

 Set port soft reset */

	/*

	 * HW sets ack bit to 1 when all outstanding requests have been drained

	 * on this port and minimum soft reset pulse width has elapsed.

	 * Driver polls port_soft_reset_ack to determine if reset done by HW.

/*

 * This function resets the FPGA Port and its accelerator (AFU) by function

 * __port_disable and __port_enable (set port soft reset bit and then clear

 * it). Userspace can do Port reset at any time, e.g. during DMA or Partial

 * Reconfiguration. But it should never cause any system level issue, only

 * functional failure (e.g. DMA or PR operation failure) and be recoverable

 * from the failure.

 *

 * Note: the accelerator (AFU) is not accessible when its port is in reset

 * (disabled). Any attempts on MMIO access to AFU while in reset, will

 * result errors reported via port error reporting sub feature (if present).

		/*

		 * userclk sysfs interfaces are only visible in case port

		 * revision is 0, as hardware with revision >0 doesn't

		 * support this.

	/*

	 * sysfs entries are visible only if related private feature is

	 * enumerated.

 No extension support for now */

		/*

		 * Let sub-feature's ioctl function to handle the cmd

		 * Sub-feature's ioctl returns -ENODEV when cmd is not

		 * handled in this sub feature, and returns 0 and other

		 * error code if cmd is handled.

 Support debug access to the mapping */

 SPDX-License-Identifier: GPL-2.0

/*

 * FPGA to/from HPS Bridge Driver for Altera SoCFPGA Devices

 *

 *  Copyright (C) 2013-2016 Altera Corporation, All Rights Reserved.

 *

 * Includes this patch from the mailing list:

 *   fpga: altera-hps2fpga: fix HPS2FPGA bridge visibility to L3 masters

 *   Signed-off-by: Anatolij Gustschin <agust@denx.de>

/*

 * This driver manages bridges on a Altera SOCFPGA between the ARM host

 * processor system (HPS) and the embedded FPGA.

 *

 * This driver supports enabling and disabling of the configured ports, which

 * allows for safe reprogramming of the FPGA, assuming that the new FPGA image

 * uses the same port configuration.  Bridges must be disabled before

 * reprogramming the FPGA and re-enabled after the FPGA has been programmed.

 The L3 REMAP register is write only, so keep a cached value. */

 bring bridge out of reset */

 Allow bridge to be visible to L3 masters or not */

 SPDX-License-Identifier: GPL-2.0

/*

 * FPGA Region - Support for FPGA programming under Linux

 *

 *  Copyright (C) 2013-2016 Altera Corporation

 *  Copyright (C) 2017 Intel Corporation

/**

 * fpga_region_get - get an exclusive reference to an fpga region

 * @region: FPGA Region struct

 *

 * Caller should call fpga_region_put() when done with region.

 *

 * Return fpga_region struct if successful.

 * Return -EBUSY if someone already has a reference to the region.

 * Return -ENODEV if @np is not an FPGA Region.

/**

 * fpga_region_put - release a reference to a region

 *

 * @region: FPGA region

/**

 * fpga_region_program_fpga - program FPGA

 *

 * @region: FPGA region

 *

 * Program an FPGA using fpga image info (region->info).

 * If the region has a get_bridges function, the exclusive reference for the

 * bridges will be held if programming succeeds.  This is intended to prevent

 * reprogramming the region until the caller considers it safe to do so.

 * The caller will need to call fpga_bridges_put() before attempting to

 * reprogram the region.

 *

 * Return 0 for success or negative error code.

	/*

	 * In some cases, we already have a list of bridges in the

	 * fpga region struct.  Or we don't have any bridges.

/**

 * fpga_region_create - alloc and init a struct fpga_region

 * @parent: device parent

 * @mgr: manager that programs this region

 * @get_bridges: optional function to get bridges to a list

 *

 * The caller of this function is responsible for freeing the resulting region

 * struct with fpga_region_free().  Using devm_fpga_region_create() instead is

 * recommended.

 *

 * Return: struct fpga_region or NULL

/**

 * fpga_region_free - free an FPGA region created by fpga_region_create()

 * @region: FPGA region

/**

 * devm_fpga_region_create - create and initialize a managed FPGA region struct

 * @parent: device parent

 * @mgr: manager that programs this region

 * @get_bridges: optional function to get bridges to a list

 *

 * This function is intended for use in an FPGA region driver's probe function.

 * After the region driver creates the region struct with

 * devm_fpga_region_create(), it should register it with fpga_region_register().

 * The region driver's remove function should call fpga_region_unregister().

 * The region struct allocated with this function will be freed automatically on

 * driver detach.  This includes the case of a probe function returning error

 * before calling fpga_region_register(), the struct will still get cleaned up.

 *

 * Return: struct fpga_region or NULL

/**

 * fpga_region_register - register an FPGA region

 * @region: FPGA region

 *

 * Return: 0 or -errno

/**

 * fpga_region_unregister - unregister an FPGA region

 * @region: FPGA region

 *

 * This function is intended for use in an FPGA region driver's remove function.

/**

 * fpga_region_init - init function for fpga_region class

 * Creates the fpga_region class and registers a reconfig notifier.

 SPDX-License-Identifier: GPL-2.0

/*

 * FPGA to SDRAM Bridge Driver for Altera SoCFPGA Devices

 *

 *  Copyright (C) 2013-2016 Altera Corporation, All Rights Reserved.

/*

 * This driver manages a bridge between an FPGA and the SDRAM used by the ARM

 * host processor system (HPS).

 *

 * The bridge contains 4 read ports, 4 write ports, and 6 command ports.

 * Reconfiguring these ports requires that no SDRAM transactions occur during

 * reconfiguration.  The code reconfiguring the ports cannot run out of SDRAM

 * nor can the FPGA access the SDRAM during reconfiguration.  This driver does

 * not support reconfiguring the ports.  The ports are configured by code

 * running out of on chip ram before Linux is started and the configuration

 * is passed in a handoff register in the system manager.

 *

 * This driver supports enabling and disabling of the configured ports, which

 * allows for safe reprogramming of the FPGA, assuming that the new FPGA image

 * uses the same port configuration.  Bridges must be disabled before

 * reprogramming the FPGA and re-enabled after the FPGA has been programmed.

/*

 * From the Cyclone V HPS Memory Map document:

 *   These registers are used to store handoff information between the

 *   preloader and the OS. These 8 registers can be used to store any

 *   information. The contents of these registers have no impact on

 *   the state of the HPS hardware.

 Get f2s bridge configuration saved in handoff register */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for FPGA Accelerated Function Unit (AFU) Error Reporting

 *

 * Copyright 2019 Intel Corporation, Inc.

 *

 * Authors:

 *   Wu Hao <hao.wu@linux.intel.com>

 *   Xiao Guangrong <guangrong.xiao@linux.intel.com>

 *   Joseph Grecco <joe.grecco@intel.com>

 *   Enno Luebbers <enno.luebbers@intel.com>

 *   Tim Whisonant <tim.whisonant@intel.com>

 *   Ananda Ravuri <ananda.ravuri@intel.com>

 *   Mitchel Henry <henry.mitchel@intel.com>

 mask or unmask port errors by the error mask register. */

 clear port errors. */

	/*

	 * clear Port Errors

	 *

	 * - Check for AP6 State

	 * - Halt Port by keeping Port in reset

	 * - Set PORT Error mask to all 1 to mask errors

	 * - Clear all errors

	 * - Set Port mask to all 0 to enable errors

	 * - All errors start capturing new errors

	 * - Enable Port by pulling the port out of reset

 if device is still in AP6 power state, can not clear any error. */

 Halt Port by keeping Port in reset */

 Mask all errors */

 Clear errors if err input matches with current port errors.*/

 Clear mask */

 Enable the Port by clearing the reset */

	/*

	 * sysfs entries are visible only if related private feature is

	 * enumerated.

 SPDX-License-Identifier: GPL-2.0

/*

 * FPGA Bridge Driver for FPGA Management Engine (FME)

 *

 * Copyright (C) 2017-2018 Intel Corporation, Inc.

 *

 * Authors:

 *   Wu Hao <hao.wu@intel.com>

 *   Joseph Grecco <joe.grecco@intel.com>

 *   Enno Luebbers <enno.luebbers@intel.com>

 *   Tim Whisonant <tim.whisonant@intel.com>

 *   Ananda Ravuri <ananda.ravuri@intel.com>

 *   Henry Mitchel <henry.mitchel@intel.com>

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2019-2021 Xilinx, Inc.

 SPDX-License-Identifier: GPL-2.0

/*

 * FPGA Manager Driver for Altera SOCFPGA

 *

 *  Copyright (C) 2013-2015 Altera Corporation

 Register offsets */

 Register bit defines */

 SOCFPGA_FPGMGR_STAT register mode field values */

ramping*/

 This is a flag value that doesn't really happen in this register field */

 SOCFPGA_FPGMGR_CTL register */

 SOCFPGA_FPGMGR_DCLKSTAT register */

 SOCFPGA_FPGMGR_GPIO_* registers share the same bit positions */

 In power-up order. Reverse for power-down. */

 Values to set in the CTRL register */

 flag that this table entry is a valid mode */

 For SOCFPGA_FPGMGR_STAT_MSEL field */

/*

 * Set the DCLKCNT, wait for DCLKSTAT to report the count completed, and clear

 * the complete status.

 Clear any existing DONE status. */

 Issue the DCLK count. */

 Poll DCLKSTAT to see if it completed in the timeout period. */

	/*

	 * HW doesn't support an interrupt for changes in state, so poll to see

	 * if it matches the requested state within the timeout period.

 set irqs to level sensitive */

 set interrupt polarity */

 clear irqs */

 unmask interrupts */

 enable interrupts */

 clear irqs */

 success */

 disable irqs */

 Check that this MSEL setting is supported */

 get value from MSEL pins */

 Adjust CTRL for the CDRATIO */

 Set NCE to 0. */

	/*

	 * Step 1:

	 *  - Set CTRL.CFGWDTH, CTRL.CDRATIO to match cfg mode

	 *  - Set CTRL.NCE to 0

 Step 2: Set CTRL.EN to 1 */

 Step 3: Set CTRL.NCONFIGPULL to 1 to put FPGA in reset */

 Step 4: Wait for STATUS.MODE to report FPGA is in reset phase */

 Step 5: Set CONTROL.NCONFIGPULL to 0 to release FPGA from reset */

 Timeout waiting for reset */

/*

 * Prepare the FPGA to receive the configuration data.

 Steps 1 - 5: Reset the FPGA */

 Step 6: Wait for FPGA to enter configuration phase */

 Step 7: Clear nSTATUS interrupt */

 Step 8: Set CTRL.AXICFGEN to 1 to enable transfer of config data */

/*

 * Step 9: write data to the FPGA data register

 Write out the complete 32-bit chunks. */

 Write out remaining non 32-bit chunks. */

 This will never happen. */

	/*

	 * Step 10:

	 *  - Observe CONF_DONE and nSTATUS (active low)

	 *  - if CONF_DONE = 1 and nSTATUS = 1, configuration was successful

	 *  - if CONF_DONE = 0 and nSTATUS = 0, configuration failed

 Step 11: Clear CTRL.AXICFGEN to disable transfer of config data */

	/*

	 * Step 12:

	 *  - Write 4 to DCLKCNT

	 *  - Wait for STATUS.DCNTDONE = 1

	 *  - Clear W1C bit in STATUS.DCNTDONE

 Step 13: Wait for STATUS.MODE to report USER MODE */

 Step 14: Set CTRL.EN to 0 */

 Translate state register values to FPGA framework state */

 SPDX-License-Identifier: GPL-2.0

/*

 * FPGA Manager Driver for Altera Arria10 SoCFPGA

 *

 * Copyright (C) 2015-2016 Altera Corporation

 FPGA CD Ratio Value */

 Configuration width 16/32 bit */

/*

 * struct a10_fpga_priv - private data for fpga manager

 * @regmap: regmap for register access

 * @fpga_data_addr: iomap for single address data register to FPGA

 * @clk: clock

/*

 * from the register map description of cdratio in imgcfg_ctrl_02:

 *  Normal Configuration    : 32bit Passive Parallel

 *  Partial Reconfiguration : 16bit Passive Parallel

 Clear any existing DONE status. */

 Issue the DCLK regmap. */

 wait till the dclkcnt done */

 Clear DONE status. */

 Is the bitstream encrypted? */

 Is the bitstream compressed? */

	/*

	 * cd ratio is dependent on cfg width and whether the bitstream

	 * is encrypted and/or compressed.

	 *

	 * | width | encr. | compr. | cd ratio |

	 * |  16   |   0   |   0    |     1    |

	 * |  16   |   0   |   1    |     4    |

	 * |  16   |   1   |   0    |     2    |

	 * |  16   |   1   |   1    |     4    |

	 * |  32   |   0   |   0    |     1    |

	 * |  32   |   0   |   1    |     8    |

	 * |  32   |   1   |   0    |     4    |

	 * |  32   |   1   |   1    |     8    |

 If 32 bit, double the cd ratio by incrementing the field  */

 Start the FPGA programming by initialize the FPGA Manager */

 Check for passive parallel (msel == 000 or 001) */

 Make sure no external devices are interfering */

 Set cfg width */

 Determine cd ratio from bitstream header and set cd ratio */

	/*

	 * Clear s2f_nce to enable chip select.  Leave pr_request

	 * unasserted and override disabled.

 Set cfg_ctrl to enable s2f dclk and data */

	/*

	 * Disable overrides not needed for pr.

	 * s2f_config==1 leaves reset deasseted.

 Enable override for data, dclk, nce, and pr_request to CSS */

 Send some clocks to clear out any errors */

 Assert pr_request */

 Provide 2048 DCLKs before starting the config data streaming. */

 Wait for pr_ready */

/*

 * write data to the FPGA data register

 Write out the complete 32-bit chunks */

 Write out remaining non 32-bit chunks */

 This will never happen */

 Wait for pr_done */

 Clear pr_request */

 Send some clocks to clear out any errors */

 Disable s2f dclk and data */

 Deassert chip select */

 Disable data, dclk, nce, and pr_request override to CSS */

 Return any errors regarding pr_done or pr_error */

 Final check */

 First mmio base is for register access */

 Second mmio base is for writing FPGA image data */

 regmap for register access */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Xilinx Spartan6 and 7 Series Slave Serial SPI Driver

 *

 * Copyright (C) 2017 DENX Software Engineering

 *

 * Anatolij Gustschin <agust@denx.de>

 *

 * Manage Xilinx FPGA firmware that is loaded over SPI using

 * the slave serial configuration interface.

/**

 * wait_for_init_b - wait for the INIT_B pin to have a given state, or wait

 * a given delay if the pin is unavailable

 *

 * @mgr:        The FPGA manager object

 * @value:      Value INIT_B to wait for (1 = asserted = low)

 * @alt_udelay: Delay to wait if the INIT_B GPIO is not available

 *

 * Returns 0 when the INIT_B GPIO reached the given state or -ETIMEDOUT if

 * too much time passed waiting for that. If no INIT_B GPIO is available

 * then always return 0.

 min is 500 ns */

 program latency */

	/*

	 * This loop is carefully written such that if the driver is

	 * scheduled out for more than 'timeout', we still check for DONE

	 * before giving up and we apply 8 extra CCLK cycles in all cases.

 PROGRAM_B is active low */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for Altera Partial Reconfiguration IP Core

 *

 * Copyright (C) 2016-2017 Intel Corporation

 *

 * Based on socfpga-a10.c Copyright (C) 2015-2016 Altera Corporation

 *  by Alan Tull <atull@opensource.altera.com>

 Write out the complete 32-bit chunks */

 Write out remaining non 32-bit chunks */

 This will never happen */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for FPGA Management Engine Error Management

 *

 * Copyright 2019 Intel Corporation, Inc.

 *

 * Authors:

 *   Kang Luwei <luwei.kang@intel.com>

 *   Xiao Guangrong <guangrong.xiao@linux.intel.com>

 *   Wu Hao <hao.wu@intel.com>

 *   Joseph Grecco <joe.grecco@intel.com>

 *   Enno Luebbers <enno.luebbers@intel.com>

 *   Tim Whisonant <tim.whisonant@intel.com>

 *   Ananda Ravuri <ananda.ravuri@intel.com>

 *   Mitchel, Henry <henry.mitchel@intel.com>

 Workaround: disable MBP_ERROR if feature revision is 0 */

	/*

	 * sysfs entries are visible only if related private feature is

	 * enumerated.

 Workaround: keep MBP_ERROR always masked if revision is 0 */

 SPDX-License-Identifier: GPL-2.0

/*

 * DFL device driver for Nios private feature on Intel PAC (Programmable

 * Acceleration Card) N3000

 *

 * Copyright (C) 2019-2020 Intel Corporation, Inc.

 *

 * Authors:

 *   Wu Hao <hao.wu@intel.com>

 *   Xu Yilun <yilun.xu@intel.com>

/*

 * N3000 Nios private feature registers, named as NIOS_SPI_XX on spec.

 * NS is the abbreviation of NIOS_SPI.

 Nios handshake registers, indirect access */

 Mode for retimer A, link 0, the same below */

 The retimers we use on Intel PAC N3000 is Parkvale, abbreviated to PKVL */

 When GROUP MASK field == GROUP_OK  */

 loop count */

 usec */

 usec */

 FEC mode setting is not supported in early FW versions */

 If no 25G links, FEC mode setting is not supported either */

 get the valid FEC mode for 25G links */

	/*

	 * FEC mode should always be the same for all links, as we set them

	 * in this way.

	/*

	 * The SPI is shared by the Nios core inside the FPGA, Nios will use

	 * this SPI master to do some one time initialization after power up,

	 * and then release the control to OS. The driver needs to poll on

	 * INIT_DONE to see when driver could take the control.

	 *

	 * Please note that after Nios firmware version 3.0.0, INIT_START is

	 * introduced, so driver needs to trigger START firstly and then check

	 * INIT_DONE.

	/*

	 * If Nios version register is totally uninitialized(== 0x0), then the

	 * Nios firmware is missing. So host could take control of SPI master

	 * safely, but initialization work for Nios is not done. To restore the

	 * card, we need to reprogram a new Nios firmware via the BMC chip on

	 * SPI bus. So the driver doesn't error out, it continues to create the

	 * spi controller device and spi_board_info for BMC.

 read NIOS_INIT to check if retimer initialization is done */

 check if retimers are initialized already */

 configure FEC mode per module param */

		/*

		 * When the retimer is to be set to 10G mode, there is no FEC

		 * mode setting, so the REQ_FEC_MODE field will be ignored by

		 * Nios firmware in this case. But we should still fill the FEC

		 * mode field cause host could not get the retimer working mode

		 * until the Nios init is done.

		 *

		 * For now the driver doesn't support the retimer FEC mode

		 * switching per user's request. It is always set to Reed

		 * Solomon FEC.

		 *

		 * The driver will set the same FEC mode for all links.

 polls on NIOS_INIT_DONE */

		/*

		 * After INIT_DONE is detected, it still needs to check if the

		 * Nios firmware reports any error during the retimer

		 * configuration.

		/*

		 * If the retimer configuration is failed, the Nios firmware

		 * will still release the spi controller for host to

		 * communicate with the BMC. It makes possible for people to

		 * reprogram a new Nios firmware and restore the card. So the

		 * driver doesn't error out, it continues to create the spi

		 * controller device and spi_board_info for BMC.

	/*

	 * We don't use the time based timeout here for performance.

	 *

	 * The regbus read/write is on the critical path of Intel PAC N3000

	 * image programming. The time based timeout checking will add too much

	 * overhead on it. Usually the state changes in 1 or 2 loops on the

	 * test server, and we set 10000 times loop here for safety.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * FPGA Manager Driver for Lattice iCE40.

 *

 *  Copyright (c) 2016 Joel Holdsworth

 *

 * This driver adds support to the FPGA manager for configuring the SRAM of

 * Lattice iCE40 FPGAs through slave SPI.

 Hz */

 Hz */

 us (>200ns) */

 us */

 Lock the bus, assert CRESET_B and SS_B and delay >200ns */

 Come out of reset */

 Abort if the chip-select failed */

 Check CDONE is de-asserted i.e. the FPGA is reset */

 Wait for the housekeeping to complete, and release SS_B */

 Check CDONE is asserted */

 Send of zero-padding to activate the firmware */

 Check board setup data. */

 Set up the GPIOs */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Technologic Systems TS-73xx SBC FPGA loader

 *

 * Copyright (C) 2016 Florian Fainelli <f.fainelli@gmail.com>

 *

 * FPGA Manager Driver for the on-board Altera Cyclone II FPGA found on

 * TS-7300, heavily based on load_fpga.c in their vendor tree.

 us */

 us */

 us */

 Reset the FPGA */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2017, National Instruments Corp.

 * Copyright (c) 2017, Xilinx Inc

 *

 * FPGA Bridge Driver for the Xilinx LogiCORE Partial Reconfiguration

 * Decoupler IP Core.

 SPDX-License-Identifier: GPL-2.0

/*

 * FPGA Manager Driver for Intel Stratix10 SoC

 *

 *  Copyright (C) 2018 Intel Corporation

/*

 * FPGA programming requires a higher level of privilege (EL3), per the SoC

 * design.

 Indicates buffer is in use if set */

/*

 * struct s10_svc_buf

 * buf:  virtual address of buf provided by service layer

 * lock: locked if buffer is in use

/*

 * Free buffers allocated from the service layer's pool that are not in use.

 * Return true when all buffers are freed.

/*

 * Returns count of how many buffers are not in use.

/*

 * s10_unlock_bufs

 * Given the returned buffer address, match that address to our buffer struct

 * and unlock that buffer.  This marks it as available to be refilled and sent

 * (or freed).

 * priv: private data

 * kaddr: kernel address of buffer that was returned from service layer

/*

 * s10_receive_callback - callback for service layer to use to provide client

 * (this driver) messages received through the mailbox.

 * client: service layer client struct

 * data: message from service layer

	/*

	 * Here we set status bits as we receive them.  Elsewhere, we always use

	 * test_and_clear_bit() to check status in priv->status

/*

 * s10_ops_write_init - prepare for FPGA reconfiguration by requesting

 * partial reconfig and allocating buffers from the service layer.

 Allocate buffers from the service layer's pool. */

/*

 * s10_send_buf - send a buffer to the service layer queue

 * mgr: fpga manager struct

 * buf: fpga image buffer

 * count: size of buf in bytes

 * Returns # of bytes transferred or -ENOBUFS if the all the buffers are in use

 * or if the service queue is full. Never returns 0.

 get/lock a buffer that that's not being used */

/*

 * Send an FPGA image to privileged layers to write to the FPGA.  When done

 * sending, free all service layer buffers we allocated in write_init.

	/*

	 * Loop waiting for buffers to be returned.  When a buffer is returned,

	 * reuse it to send more data or free if if all data has been sent.

		/*

		 * If callback hasn't already happened, wait for buffers to be

		 * returned from service layer

 not timed out */

 Not error or timeout, so ret is # of jiffies until timeout */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2019 Xilinx, Inc.

 Constant Definitions */

/**

 * struct zynqmp_fpga_priv - Private data structure

 * @dev:	Device data structure

 * @flags:	flags which is used to identify the bitfile type

 ensure all writes are done before initiate FW call */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for FPGA Management Engine (FME) Global Performance Reporting

 *

 * Copyright 2019 Intel Corporation, Inc.

 *

 * Authors:

 *   Kang Luwei <luwei.kang@intel.com>

 *   Xiao Guangrong <guangrong.xiao@linux.intel.com>

 *   Wu Hao <hao.wu@intel.com>

 *   Xu Yilun <yilun.xu@intel.com>

 *   Joseph Grecco <joe.grecco@intel.com>

 *   Enno Luebbers <enno.luebbers@intel.com>

 *   Tim Whisonant <tim.whisonant@intel.com>

 *   Ananda Ravuri <ananda.ravuri@intel.com>

 *   Mitchel, Henry <henry.mitchel@intel.com>

/*

 * Performance Counter Registers for Cache.

 *

 * Cache Events are listed below as CACHE_EVNT_*.

/*

 * Performance Counter Registers for Fabric.

 *

 * Fabric Events are listed below as FAB_EVNT_*

/*

 * Performance Counter Registers for Clock.

 *

 * Clock Counter can't be reset or frozen by SW.

/*

 * Performance Counter Registers for IOMMU / VT-D.

 *

 * VT-D Events are listed below as VTD_EVNT_* and VTD_SIP_EVNT_*

/**

 * struct fme_perf_priv - priv data structure for fme perf driver

 *

 * @dev: parent device.

 * @ioaddr: mapped base address of mmio region.

 * @pmu: pmu data structure for fme perf counters.

 * @id: id of this fme performance report private feature.

 * @fab_users: current user number on fabric counters.

 * @fab_port_id: used to indicate current working mode of fabric counters.

 * @fab_lock: lock to protect fabric counters working mode.

 * @cpu: active CPU to which the PMU is bound for accesses.

 * @cpuhp_node: node for CPU hotplug notifier link.

 * @cpuhp_state: state for CPU hotplug notification;

/**

 * struct fme_perf_event_ops - callbacks for fme perf events

 *

 * @event_init: callback invoked during event init.

 * @event_destroy: callback invoked during event destroy.

 * @read_counter: callback to read hardware counters.

/*

 * There are no default events, but we need to create

 * "events" group (with empty attrs) before updating

 * it with detected events (using pmu->attr_update).

	/*

	 * For 64bit counter registers, the counter may increases and carries

	 * out of bit [31] between 2 32bit reads. So add extra reads to help

	 * to prevent this issue. This only happens in platforms which don't

	 * support 64bit read - readq is split into 2 readl.

 set channel access type and cache event code. */

	/*

	 * as fabric counter set only can be in either overall or port mode.

	 * In overall mode, it counts overall data for FPGA, and in port mode,

	 * it is configured to monitor on one individual port.

	 *

	 * so every time, a new event is initialized, driver checks

	 * current working mode and if someone is using this counter set.

	/*

	 * skip if current working mode matches, otherwise change the working

	 * mode per input port_id, to monitor overall data or another port.

 FME Perf Basic Events */

 FME Perf Cache Events */

 FME Perf Fabric Events */

 FME Perf VTD Events */

 FME Perf VTD SIP Events */

 test the event attr type check for PMU enumeration */

	/*

	 * fme counters are shared across all cores.

	 * Therefore, it does not support per-process mode.

	 * Also, it does not support event sampling mode.

 read and save current working mode for fabric counters */

 Register the pmu instance for cpu hotplug */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for FPGA Management Engine (FME)

 *

 * Copyright (C) 2017-2018 Intel Corporation, Inc.

 *

 * Authors:

 *   Kang Luwei <luwei.kang@intel.com>

 *   Xiao Guangrong <guangrong.xiao@linux.intel.com>

 *   Joseph Grecco <joe.grecco@intel.com>

 *   Enno Luebbers <enno.luebbers@intel.com>

 *   Tim Whisonant <tim.whisonant@intel.com>

 *   Ananda Ravuri <ananda.ravuri@intel.com>

 *   Henry Mitchel <henry.mitchel@intel.com>

/*

 * Bitstream (static FPGA region) identifier number. It contains the

 * detailed version and other information of this static FPGA region.

/*

 * Bitstream (static FPGA region) meta data. It contains the synthesis

 * date, seed and other information of this static FPGA region.

 threshold1 reached */

 threshold2 reached */

 threshold1 policy: 0 - AP2 (90% throttle) / 1 - AP1 (50% throttle) */

 temperature is always supported, and check hardware cap for others */

	/*

	 * create hwmon to allow userspace monitoring temperature and other

	 * threshold information.

	 *

	 * temp1_input      -> FPGA device temperature

	 * temp1_max        -> hardware threshold 1 -> 50% or 90% throttling

	 * temp1_crit       -> hardware threshold 2 -> 100% throttling

	 * temp1_emergency  -> hardware trip_threshold to shutdown FPGA

	 * temp1_max_alarm  -> hardware threshold 1 alarm

	 * temp1_crit_alarm -> hardware threshold 2 alarm

	 *

	 * create device specific sysfs interfaces, e.g. read temp1_max_policy

	 * to understand the actual hardware throttling action (50% vs 90%).

	 *

	 * If hardware doesn't support automatic throttling per thresholds,

	 * then all above sysfs interfaces are not visible except temp1_input

	 * for temperature.

 in Watts */

 in Watts */

 in Watts */

 in 0.1 Watts */

 in 0.1 Watts */

 No extension support for now */

		/*

		 * Let sub-feature's ioctl function to handle the cmd.

		 * Sub-feature's ioctl returns -ENODEV when cmd is not

		 * handled in this sub feature, and returns 0 or other

		 * error code if cmd is handled.

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for FPGA Accelerated Function Unit (AFU) MMIO Region Management

 *

 * Copyright (C) 2017-2018 Intel Corporation, Inc.

 *

 * Authors:

 *   Wu Hao <hao.wu@intel.com>

 *   Xiao Guangrong <guangrong.xiao@linux.intel.com>

/**

 * afu_mmio_region_init - init function for afu mmio region support

 * @pdata: afu platform device's pdata.

/**

 * afu_mmio_region_add - add a mmio region to given feature dev.

 *

 * @region_index: region index.

 * @region_size: region size.

 * @phys: region's physical address of this region.

 * @flags: region flags (access permission).

 *

 * Return: 0 on success, negative error code otherwise.

 check if @index already exists */

/**

 * afu_mmio_region_destroy - destroy all mmio regions under given feature dev.

 * @pdata: afu platform device's pdata.

/**

 * afu_mmio_region_get_by_index - find an afu region by index.

 * @pdata: afu platform device's pdata.

 * @region_index: region index.

 * @pregion: ptr to region for result.

 *

 * Return: 0 on success, negative error code otherwise.

/**

 * afu_mmio_region_get_by_offset - find an afu mmio region by offset and size

 *

 * @pdata: afu platform device's pdata.

 * @offset: region offset from start of the device fd.

 * @size: region size.

 * @pregion: ptr to region for result.

 *

 * Find the region which fully contains the region described by input

 * parameters (offset and size) from the feature dev's region linked list.

 *

 * Return: 0 on success, negative error code otherwise.

 SPDX-License-Identifier: GPL-2.0

/*

 * FPGA Region - Device Tree support for FPGA programming under Linux

 *

 *  Copyright (C) 2013-2016 Altera Corporation

 *  Copyright (C) 2017 Intel Corporation

/**

 * of_fpga_region_find - find FPGA region

 * @np: device node of FPGA Region

 *

 * Caller will need to put_device(&region->dev) when done.

 *

 * Returns FPGA Region struct or NULL

/**

 * of_fpga_region_get_mgr - get reference for FPGA manager

 * @np: device node of FPGA region

 *

 * Get FPGA Manager from "fpga-mgr" property or from ancestor region.

 *

 * Caller should call fpga_mgr_put() when done with manager.

 *

 * Return: fpga manager struct or IS_ERR() condition containing error code.

/**

 * of_fpga_region_get_bridges - create a list of bridges

 * @region: FPGA region

 *

 * Create a list of bridges including the parent bridge and the bridges

 * specified by "fpga-bridges" property.  Note that the

 * fpga_bridges_enable/disable/put functions are all fine with an empty list

 * if that happens.

 *

 * Caller should call fpga_bridges_put(&region->bridge_list) when

 * done with the bridges.

 *

 * Return 0 for success (even if there are no bridges specified)

 * or -EBUSY if any of the bridges are in use.

 If parent is a bridge, add to list */

 -EBUSY means parent is a bridge that is under use. Give up. */

 Zero return code means parent was a bridge and was added to list. */

 If overlay has a list of bridges, use it. */

 If parent bridge is in list, skip it. */

 If node is a bridge, get it and add to list */

 If any of the bridges are in use, give up */

/**

 * child_regions_with_firmware

 * @overlay: device node of the overlay

 *

 * If the overlay adds child FPGA regions, they are not allowed to have

 * firmware-name property.

 *

 * Return 0 for OK or -EINVAL if child FPGA region adds firmware-name.

/**

 * of_fpga_region_parse_ov - parse and check overlay applied to region

 *

 * @region: FPGA region

 * @overlay: overlay applied to the FPGA region

 *

 * Given an overlay applied to an FPGA region, parse the FPGA image specific

 * info in the overlay and do some checking.

 *

 * Returns:

 *   NULL if overlay doesn't direct us to program the FPGA.

 *   fpga_image_info struct if there is an image to program.

 *   error code for invalid overlay.

	/*

	 * Reject overlay if child FPGA Regions added in the overlay have

	 * firmware-name property (would mean that an FPGA region that has

	 * not been added to the live tree yet is doing FPGA programming).

 Read FPGA region properties from the overlay */

 If overlay is not programming the FPGA, don't need FPGA image info */

	/*

	 * If overlay informs us FPGA was externally programmed, specifying

	 * firmware here would be ambiguous.

/**

 * of_fpga_region_notify_pre_apply - pre-apply overlay notification

 *

 * @region: FPGA region that the overlay was applied to

 * @nd: overlay notification data

 *

 * Called when an overlay targeted to an FPGA Region is about to be applied.

 * Parses the overlay for properties that influence how the FPGA will be

 * programmed and does some checking. If the checks pass, programs the FPGA.

 * If the checks fail, overlay is rejected and does not get added to the

 * live tree.

 *

 * Returns 0 for success or negative error code for failure.

 If overlay doesn't program the FPGA, accept it anyway. */

 error; reject overlay */

/**

 * of_fpga_region_notify_post_remove - post-remove overlay notification

 *

 * @region: FPGA region that was targeted by the overlay that was removed

 * @nd: overlay notification data

 *

 * Called after an overlay has been removed if the overlay's target was a

 * FPGA region.

/**

 * of_fpga_region_notify - reconfig notifier for dynamic DT changes

 * @nb:		notifier block

 * @action:	notifier action

 * @arg:	reconfig data

 *

 * This notifier handles programming an FPGA when a "firmware-name" property is

 * added to an fpga-region.

 *

 * Returns NOTIFY_OK or error if FPGA programming fails.

 not for us */

 not for us */

 should not happen */

 Find the FPGA mgr specified by region or parent region. */

/**

 * fpga_region_init - init function for fpga_region class

 * Creates the fpga_region class and registers a reconfig notifier.

 SPDX-License-Identifier: GPL-2.0

/*

 * FPGA Freeze Bridge Controller

 *

 *  Copyright (C) 2016 Altera Corporation. All rights reserved.

/*

 * Poll status until status bit is set or we have a timeout.

/*

 * enable = 1 : allow traffic through the bridge

 * enable = 0 : disable traffic through the bridge

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for Altera Partial Reconfiguration IP Core

 *

 * Copyright (C) 2016-2017 Intel Corporation

 *

 * Based on socfpga-a10.c Copyright (C) 2015-2016 Altera Corporation

 *  by Alan Tull <atull@opensource.altera.com>

 First mmio base is for register access */

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for FPGA Device Feature List (DFL) PCIe device

 *

 * Copyright (C) 2017-2018 Intel Corporation, Inc.

 *

 * Authors:

 *   Zhang Yi <Yi.Z.Zhang@intel.com>

 *   Xiao Guangrong <guangrong.xiao@linux.intel.com>

 *   Joseph Grecco <joe.grecco@intel.com>

 *   Enno Luebbers <enno.luebbers@intel.com>

 *   Tim Whisonant <tim.whisonant@intel.com>

 *   Ananda Ravuri <ananda.ravuri@intel.com>

 *   Henry Mitchel <henry.mitchel@intel.com>

 container device */

 PCI Device ID */

 VF Device */

 remove all children feature devices */

 default method of finding dfls starting at offset 0 of bar 0 */

 start to find Device Feature List from Bar 0 */

	/*

	 * PF device has FME and Ports/AFUs, and VF device only has one

	 * Port/AFU. Check them and add related "Device Feature List" info

	 * for the next step enumeration.

		/*

		 * find more Device Feature Lists (e.g. Ports) per information

		 * indicated by FME module.

 skip ports which are not implemented. */

			/*

			 * add Port's Device Feature List information for next

			 * step enumeration.

 release I/O mappings for next step enumeration */

 enumerate feature devices under pci device */

 allocate enumeration info via pci_dev */

 add irq info for enumeration if the device support irq */

 start enumeration with prepared enumeration information */

		/*

		 * disable SRIOV and then put released ports back to default

		 * PF access mode.

		/*

		 * before enable SRIOV, put released ports into VF access mode

		 * first of all.

 SPDX-License-Identifier: GPL-2.0

/*

 * FPGA Region Driver for FPGA Management Engine (FME)

 *

 * Copyright (C) 2017-2018 Intel Corporation, Inc.

 *

 * Authors:

 *   Wu Hao <hao.wu@intel.com>

 *   Joseph Grecco <joe.grecco@intel.com>

 *   Enno Luebbers <enno.luebbers@intel.com>

 *   Tim Whisonant <tim.whisonant@intel.com>

 *   Ananda Ravuri <ananda.ravuri@intel.com>

 *   Henry Mitchel <henry.mitchel@intel.com>

 SPDX-License-Identifier: GPL-2.0

/*

 * Driver for FPGA Accelerated Function Unit (AFU) DMA Region Management

 *

 * Copyright (C) 2017-2018 Intel Corporation, Inc.

 *

 * Authors:

 *   Wu Hao <hao.wu@intel.com>

 *   Xiao Guangrong <guangrong.xiao@linux.intel.com>

/**

 * afu_dma_pin_pages - pin pages of given dma memory region

 * @pdata: feature device platform data

 * @region: dma memory region to be pinned

 *

 * Pin all the pages of given dfl_afu_dma_region.

 * Return 0 for success or negative error code.

/**

 * afu_dma_unpin_pages - unpin pages of given dma memory region

 * @pdata: feature device platform data

 * @region: dma memory region to be unpinned

 *

 * Unpin all the pages of given dfl_afu_dma_region.

 * Return 0 for success or negative error code.

/**

 * afu_dma_check_continuous_pages - check if pages are continuous

 * @region: dma memory region

 *

 * Return true if pages of given dma memory region have continuous physical

 * address, otherwise return false.

/**

 * dma_region_check_iova - check if memory area is fully contained in the region

 * @region: dma memory region

 * @iova: address of the dma memory area

 * @size: size of the dma memory area

 *

 * Compare the dma memory area defined by @iova and @size with given dma region.

 * Return true if memory area is fully contained in the region, otherwise false.

/**

 * afu_dma_region_add - add given dma region to rbtree

 * @pdata: feature device platform data

 * @region: dma region to be added

 *

 * Return 0 for success, -EEXIST if dma region has already been added.

 *

 * Needs to be called with pdata->lock heold.

/**

 * afu_dma_region_remove - remove given dma region from rbtree

 * @pdata: feature device platform data

 * @region: dma region to be removed

 *

 * Needs to be called with pdata->lock heold.

/**

 * afu_dma_region_destroy - destroy all regions in rbtree

 * @pdata: feature device platform data

 *

 * Needs to be called with pdata->lock heold.

/**

 * afu_dma_region_find - find the dma region from rbtree based on iova and size

 * @pdata: feature device platform data

 * @iova: address of the dma memory area

 * @size: size of the dma memory area

 *

 * It finds the dma region from the rbtree based on @iova and @size:

 * - if @size == 0, it finds the dma region which starts from @iova

 * - otherwise, it finds the dma region which fully contains

 *   [@iova, @iova+size)

 * If nothing is matched returns NULL.

 *

 * Needs to be called with pdata->lock held.

 the iova region is not fully covered. */

/**

 * afu_dma_region_find_iova - find the dma region from rbtree by iova

 * @pdata: feature device platform data

 * @iova: address of the dma region

 *

 * Needs to be called with pdata->lock held.

/**

 * afu_dma_map_region - map memory region for dma

 * @pdata: feature device platform data

 * @user_addr: address of the memory region

 * @length: size of the memory region

 * @iova: pointer of iova address

 *

 * Map memory region defined by @user_addr and @length, and return dma address

 * of the memory region via @iova.

 * Return 0 for success, otherwise error code.

	/*

	 * Check Inputs, only accept page-aligned user memory region with

	 * valid length.

 Check overflow */

 Pin the user memory region */

 Only accept continuous pages, return error else */

 As pages are continuous then start to do DMA mapping */

/**

 * afu_dma_unmap_region - unmap dma memory region

 * @pdata: feature device platform data

 * @iova: dma address of the region

 *

 * Unmap dma memory region based on @iova.

 * Return 0 for success, otherwise error code.

 SPDX-License-Identifier: GPL-2.0

/*

 * FPGA Bridge Framework Driver

 *

 *  Copyright (C) 2013-2016 Altera Corporation, All Rights Reserved.

 *  Copyright (C) 2017 Intel Corporation

 Lock for adding/removing bridges to linked lists*/

/**

 * fpga_bridge_enable - Enable transactions on the bridge

 *

 * @bridge: FPGA bridge

 *

 * Return: 0 for success, error code otherwise.

/**

 * fpga_bridge_disable - Disable transactions on the bridge

 *

 * @bridge: FPGA bridge

 *

 * Return: 0 for success, error code otherwise.

/**

 * of_fpga_bridge_get - get an exclusive reference to an fpga bridge

 *

 * @np: node pointer of an FPGA bridge

 * @info: fpga image specific information

 *

 * Return fpga_bridge struct if successful.

 * Return -EBUSY if someone already has a reference to the bridge.

 * Return -ENODEV if @np is not an FPGA Bridge.

/**

 * fpga_bridge_get - get an exclusive reference to an fpga bridge

 * @dev:	parent device that fpga bridge was registered with

 * @info:	fpga manager info

 *

 * Given a device, get an exclusive reference to an fpga bridge.

 *

 * Return: fpga bridge struct or IS_ERR() condition containing error code.

/**

 * fpga_bridge_put - release a reference to a bridge

 *

 * @bridge: FPGA bridge

/**

 * fpga_bridges_enable - enable bridges in a list

 * @bridge_list: list of FPGA bridges

 *

 * Enable each bridge in the list.  If list is empty, do nothing.

 *

 * Return 0 for success or empty bridge list; return error code otherwise.

/**

 * fpga_bridges_disable - disable bridges in a list

 *

 * @bridge_list: list of FPGA bridges

 *

 * Disable each bridge in the list.  If list is empty, do nothing.

 *

 * Return 0 for success or empty bridge list; return error code otherwise.

/**

 * fpga_bridges_put - put bridges

 *

 * @bridge_list: list of FPGA bridges

 *

 * For each bridge in the list, put the bridge and remove it from the list.

 * If list is empty, do nothing.

/**

 * of_fpga_bridge_get_to_list - get a bridge, add it to a list

 *

 * @np: node pointer of an FPGA bridge

 * @info: fpga image specific information

 * @bridge_list: list of FPGA bridges

 *

 * Get an exclusive reference to the bridge and it to the list.

 *

 * Return 0 for success, error code from of_fpga_bridge_get() otherwise.

/**

 * fpga_bridge_get_to_list - given device, get a bridge, add it to a list

 *

 * @dev: FPGA bridge device

 * @info: fpga image specific information

 * @bridge_list: list of FPGA bridges

 *

 * Get an exclusive reference to the bridge and it to the list.

 *

 * Return 0 for success, error code from fpga_bridge_get() otherwise.

/**

 * fpga_bridge_create - create and initialize a struct fpga_bridge

 * @parent:	FPGA bridge device from pdev

 * @name:	FPGA bridge name

 * @br_ops:	pointer to structure of fpga bridge ops

 * @priv:	FPGA bridge private data

 *

 * The caller of this function is responsible for freeing the bridge with

 * fpga_bridge_free().  Using devm_fpga_bridge_create() instead is recommended.

 *

 * Return: struct fpga_bridge or NULL

/**

 * fpga_bridge_free - free an fpga bridge created by fpga_bridge_create()

 * @bridge:	FPGA bridge struct

/**

 * devm_fpga_bridge_create - create and init a managed struct fpga_bridge

 * @parent:	FPGA bridge device from pdev

 * @name:	FPGA bridge name

 * @br_ops:	pointer to structure of fpga bridge ops

 * @priv:	FPGA bridge private data

 *

 * This function is intended for use in an FPGA bridge driver's probe function.

 * After the bridge driver creates the struct with devm_fpga_bridge_create(), it

 * should register the bridge with fpga_bridge_register().  The bridge driver's

 * remove function should call fpga_bridge_unregister().  The bridge struct

 * allocated with this function will be freed automatically on driver detach.

 * This includes the case of a probe function returning error before calling

 * fpga_bridge_register(), the struct will still get cleaned up.

 *

 *  Return: struct fpga_bridge or NULL

/**

 * fpga_bridge_register - register an FPGA bridge

 *

 * @bridge: FPGA bridge struct

 *

 * Return: 0 for success, error code otherwise.

/**

 * fpga_bridge_unregister - unregister an FPGA bridge

 *

 * @bridge: FPGA bridge struct

 *

 * This function is intended for use in an FPGA bridge driver's remove function.

	/*

	 * If the low level driver provides a method for putting bridge into

	 * a desired state upon unregister, do it.

/* $Id: capi.c,v 1.1.2.7 2004/04/28 09:48:59 armin Exp $

 *

 * CAPI 2.0 Interface for Linux

 *

 * Copyright 1996 by Carsten Paeth <calle@calle.de>

 *

 * This software may be used and distributed according to the terms

 * of the GNU General Public License, incorporated herein by reference.

 *

 -------- driver information -------------------------------------- */

 allocated */

 CONFIG_ISDN_CAPI_MIDDLEWARE */

 -------- defines ------------------------------------------------- */

 -------- data structures ----------------------------------------- */

 transmit path */

 CONFIG_ISDN_CAPI_MIDDLEWARE */

 -------- global variables ---------------------------------------- */

 -------- datahandles --------------------------------------------- */

 -------- struct capiminor ---------------------------------------- */

 Allocate the least unused minor number. */

 -------- struct capincci ----------------------------------------- */

 !CONFIG_ISDN_CAPI_MIDDLEWARE */

 !CONFIG_ISDN_CAPI_MIDDLEWARE */

 -------- handle data queue --------------------------------------- */

 fatal error, do not requeue */

 fatal error, do not requeue */

 NCCI */

 Data32 */

 Data length */

 Flags */

 ups, drop packet */

 CONFIG_ISDN_CAPI_MIDDLEWARE */

 -------- function called by lower level -------------------------- */

 CONFIG_ISDN_CAPI_MIDDLEWARE */

 Info field

 CONFIG_ISDN_CAPI_MIDDLEWARE */

 ups, let capi application handle it :-) */

 CONFIG_ISDN_CAPI_MIDDLEWARE */

 -------- file_operations for capidev ----------------------------- */

 CONFIG_ISDN_CAPI_MIDDLEWARE */

 CONFIG_ISDN_CAPI_MIDDLEWARE */

 -------- tty_operations for capincci ----------------------------- */

 !CONFIG_ISDN_CAPI_MIDDLEWARE */

 !CONFIG_ISDN_CAPI_MIDDLEWARE */

 -------- /proc functions ----------------------------------------- */

/*

 * /proc/capi/capi20:

 *  minor applid nrecvctlpkt nrecvdatapkt nsendctlpkt nsenddatapkt

/*

 * /proc/capi/capi20ncci:

 *  applid ncci

 -------- init function and module interface ---------------------- */

/* $Id: capiutil.c,v 1.13.6.4 2001/09/23 22:24:33 kai Exp $

 *

 * CAPI 2.0 convert capi message to capi message struct

 *

 * From CAPI 2.0 Development Kit AVM 1995 (msg.c)

 * Rewritten for Linux 1996 by Carsten Paeth <calle@calle.de>

 *

 * This software may be used and distributed according to the terms

 * of the GNU General Public License, incorporated herein by reference.

 *

 from CAPI2.0 DDK AVM Berlin GmbH */

00 */

01 */

02 */

03 */

04 */

05 */

06 */

07 */

08 */

09 */

0a */

0b */

0c */

0d */

0e */

0f */

10 */

11 */

12 */

13 */

14 */

15 */

16 */

17 */

18 */

19 */

1a */

1b */

1c */

1d */

1e */

1f */

20 */

21 */

22 */

23 */

24 */

25 */

26 */

27 */

28 */

29 */

2a */

2b */

2c */

2d */

2e */

2f */

 ALERT_REQ */ [0x01] = "\x03\x04\x0c\x27\x2f\x1c\x01\x01",

 CONNECT_REQ */ [0x02] = "\x03\x14\x0e\x10\x0f\x11\x0d\x06\x08\x0a\x05\x07\x09\x01\x0b\x28\x22\x04\x0c\x27\x2f\x1c\x01\x01",

 DISCONNECT_REQ */ [0x04] = "\x03\x04\x0c\x27\x2f\x1c\x01\x01",

 LISTEN_REQ */ [0x05] = "\x03\x25\x12\x13\x10\x11\x01",

 INFO_REQ */ [0x08] = "\x03\x0e\x04\x0c\x27\x2f\x1c\x01\x01",

 FACILITY_REQ */ [0x09] = "\x03\x1f\x1e\x01",

 SELECT_B_PROTOCOL_REQ */ [0x0a] = "\x03\x0d\x06\x08\x0a\x05\x07\x09\x01\x01",

 CONNECT_B3_REQ */ [0x0b] = "\x03\x2b\x01",

 DISCONNECT_B3_REQ */ [0x0d] = "\x03\x2b\x01",

 DATA_B3_REQ */ [0x0f] = "\x03\x18\x1a\x19\x20\x01",

 RESET_B3_REQ */ [0x10] = "\x03\x2b\x01",

 ALERT_CONF */ [0x13] = "\x03\x23\x01",

 CONNECT_CONF */ [0x14] = "\x03\x23\x01",

 DISCONNECT_CONF */ [0x16] = "\x03\x23\x01",

 LISTEN_CONF */ [0x17] = "\x03\x23\x01",

 MANUFACTURER_REQ */ [0x18] = "\x03\x2a\x15\x21\x29\x01",

 INFO_CONF */ [0x1a] = "\x03\x23\x01",

 FACILITY_CONF */ [0x1b] = "\x03\x23\x1f\x1b\x01",

 SELECT_B_PROTOCOL_CONF */ [0x1c] = "\x03\x23\x01",

 CONNECT_B3_CONF */ [0x1d] = "\x03\x23\x01",

 DISCONNECT_B3_CONF */ [0x1f] = "\x03\x23\x01",

 DATA_B3_CONF */ [0x21] = "\x03\x19\x23\x01",

 RESET_B3_CONF */ [0x22] = "\x03\x23\x01",

 CONNECT_IND */ [0x26] = "\x03\x14\x0e\x10\x0f\x11\x0b\x28\x22\x04\x0c\x27\x2f\x1c\x01\x01",

 CONNECT_ACTIVE_IND */ [0x27] = "\x03\x16\x17\x28\x01",

 DISCONNECT_IND */ [0x28] = "\x03\x2c\x01",

 MANUFACTURER_CONF */ [0x2a] = "\x03\x2a\x15\x21\x29\x01",

 INFO_IND */ [0x2c] = "\x03\x26\x24\x01",

 FACILITY_IND */ [0x2d] = "\x03\x1f\x1d\x01",

 CONNECT_B3_IND */ [0x2f] = "\x03\x2b\x01",

 CONNECT_B3_ACTIVE_IND */ [0x30] = "\x03\x2b\x01",

 DISCONNECT_B3_IND */ [0x31] = "\x03\x2d\x2b\x01",

 DATA_B3_IND */ [0x33] = "\x03\x18\x1a\x19\x20\x01",

 RESET_B3_IND */ [0x34] = "\x03\x2b\x01",

 CONNECT_B3_T90_ACTIVE_IND */ [0x35] = "\x03\x2b\x01",

 CONNECT_RESP */ [0x38] = "\x03\x2e\x0d\x06\x08\x0a\x05\x07\x09\x01\x16\x17\x28\x04\x0c\x27\x2f\x1c\x01\x01",

 CONNECT_ACTIVE_RESP */ [0x39] = "\x03\x01",

 DISCONNECT_RESP */ [0x3a] = "\x03\x01",

 MANUFACTURER_IND */ [0x3c] = "\x03\x2a\x15\x21\x29\x01",

 INFO_RESP */ [0x3e] = "\x03\x01",

 FACILITY_RESP */ [0x3f] = "\x03\x1f\x01",

 CONNECT_B3_RESP */ [0x41] = "\x03\x2e\x2b\x01",

 CONNECT_B3_ACTIVE_RESP */ [0x42] = "\x03\x01",

 DISCONNECT_B3_RESP */ [0x43] = "\x03\x01",

 DATA_B3_RESP */ [0x45] = "\x03\x19\x01",

 RESET_B3_RESP */ [0x46] = "\x03\x01",

 CONNECT_B3_T90_ACTIVE_RESP */ [0x47] = "\x03\x01",

 MANUFACTURER_RESP */ [0x4e] = "\x03\x2a\x15\x21\x29\x01",

-------------------------------------------------------*/

-------------------------------------------------------*/

/**

 * capi_cmd2par() - find parameter string for CAPI 2.0 command/subcommand

 * @cmd:	command number

 * @subcmd:	subcommand number

 *

 * Return value: static string, NULL if command/subcommand unknown

-------------------------------------------------------*/

 $$$$$ assert (cmsg->p); */

-------------------------------------------------------*/

/**

 * capi_cmd2str() - convert CAPI 2.0 command/subcommand number to name

 * @cmd:	command number

 * @subcmd:	subcommand number

 *

 * Return value: static string

-------------------------------------------------------*/

-------------------------------------------------------*/

00 */ NULL,

01 */ NULL,

02 */ NULL,

03 */ "Controller/PLCI/NCCI",

04 */ "AdditionalInfo",

05 */ "B1configuration",

06 */ "B1protocol",

07 */ "B2configuration",

08 */ "B2protocol",

09 */ "B3configuration",

0a */ "B3protocol",

0b */ "BC",

0c */ "BChannelinformation",

0d */ "BProtocol",

0e */ "CalledPartyNumber",

0f */ "CalledPartySubaddress",

10 */ "CallingPartyNumber",

11 */ "CallingPartySubaddress",

12 */ "CIPmask",

13 */ "CIPmask2",

14 */ "CIPValue",

15 */ "Class",

16 */ "ConnectedNumber",

17 */ "ConnectedSubaddress",

18 */ "Data32",

19 */ "DataHandle",

1a */ "DataLength",

1b */ "FacilityConfirmationParameter",

1c */ "Facilitydataarray",

1d */ "FacilityIndicationParameter",

1e */ "FacilityRequestParameter",

1f */ "FacilitySelector",

20 */ "Flags",

21 */ "Function",

22 */ "HLC",

23 */ "Info",

24 */ "InfoElement",

25 */ "InfoMask",

26 */ "InfoNumber",

27 */ "Keypadfacility",

28 */ "LLC",

29 */ "ManuData",

2a */ "ManuID",

2b */ "NCPI",

2c */ "Reason",

2d */ "Reason_B3",

2e */ "Reject",

2f */ "Useruserdata"

-------------------------------------------------------*/

 truncated, need bigger buffer */

-------------------------------------------------------*/

 invalid command/subcommand */

----- Metastruktur 0 -----*/

-------------------------------------------------------*/

/**

 * cdebbuf_free() - free CAPI debug buffer

 * @cdb:	buffer to free

/**

 * capi_message2str() - format CAPI 2.0 message for printing

 * @msg:	CAPI 2.0 message

 *

 * Allocates a CAPI debug buffer and fills it with a printable representation

 * of the CAPI 2.0 message in @msg.

 * Return value: allocated debug buffer, NULL on error

 * The returned buffer should be freed by a call to cdebbuf_free() after use.

 !CONFIG_CAPI_TRACE */

/*

 * Kernel CAPI 2.0 Module - /proc/capi handling

 *

 * Copyright 1999 by Carsten Paeth <calle@calle.de>

 * Copyright 2002 by Kai Germaschewski <kai@germaschewski.name>

 *

 * This software may be used and distributed according to the terms

 * of the GNU General Public License, incorporated herein by reference.

 *

 /proc/capi

 ===========================================================================

 /proc/capi/controller:

      cnr driver cardstate name driverinfo

 /proc/capi/contrstats:

      cnr nrecvctlpkt nrecvdatapkt nsentctlpkt nsentdatapkt

 ---------------------------------------------------------------------------

 /proc/capi/applications:

      applid l3cnt dblkcnt dblklen #ncci recvqueuelen

 /proc/capi/applstats:

      applid nrecvctlpkt nrecvdatapkt nsentctlpkt nsentdatapkt

 ---------------------------------------------------------------------------

 ---------------------------------------------------------------------------

 /proc/capi/drivers is always empty */

 ---------------------------------------------------------------------------

/* $Id: kcapi.c,v 1.1.2.8 2004/03/26 19:57:20 armin Exp $

 *

 * Kernel CAPI 2.0 Module

 *

 * Copyright 1999 by Carsten Paeth <calle@calle.de>

 * Copyright 2002 by Kai Germaschewski <kai@germaschewski.name>

 *

 * This software may be used and distributed according to the terms

 * of the GNU General Public License, incorporated herein by reference.

 *

 ------------------------------------------------------------- */

 ------------------------------------------------------------- */

 -------- controller ref counting -------------------------------------- */

 ------------------------------------------------------------- */

 -------- util functions ------------------------------------ */

 ------------------------------------------------------------ */

 -------- Receiver ------------------------------------------ */

/**

 * capi_ctr_handle_message() - handle incoming CAPI message

 * @ctr:	controller descriptor structure.

 * @appl:	application ID.

 * @skb:	message.

 *

 * Called by hardware driver to pass a CAPI message to the application.

/**

 * capi_ctr_ready() - signal CAPI controller ready

 * @ctr:	controller descriptor structure.

 *

 * Called by hardware driver to signal that the controller is up and running.

/**

 * capi_ctr_down() - signal CAPI controller not ready

 * @ctr:	controller descriptor structure.

 *

 * Called by hardware driver to signal that the controller is down and

 * unavailable for use.

 ------------------------------------------------------------- */

/**

 * attach_capi_ctr() - register CAPI controller

 * @ctr:	controller descriptor structure.

 *

 * Called by hardware driver to register a controller with the CAPI subsystem.

 * Return value: 0 on success, error code < 0 on error

/**

 * detach_capi_ctr() - unregister CAPI controller

 * @ctr:	controller descriptor structure.

 *

 * Called by hardware driver to remove the registration of a controller

 * with the CAPI subsystem.

 * Return value: 0 on success, error code < 0 on error

 ------------------------------------------------------------- */

 -------- CAPI2.0 Interface ---------------------------------- */

 ------------------------------------------------------------- */

/**

 * capi20_isinstalled() - CAPI 2.0 operation CAPI_INSTALLED

 *

 * Return value: CAPI result code (CAPI_NOERROR if at least one ISDN controller

 *	is ready for use, CAPI_REGNOTINSTALLED otherwise)

/**

 * capi20_register() - CAPI 2.0 operation CAPI_REGISTER

 * @ap:		CAPI application descriptor structure.

 *

 * Register an application's presence with CAPI.

 * A unique application ID is assigned and stored in @ap->applid.

 * After this function returns successfully, the message receive

 * callback function @ap->recv_message() may be called at any time

 * until capi20_release() has been called for the same @ap.

 * Return value: CAPI result code

/**

 * capi20_release() - CAPI 2.0 operation CAPI_RELEASE

 * @ap:		CAPI application descriptor structure.

 *

 * Terminate an application's registration with CAPI.

 * After this function returns successfully, the message receive

 * callback function @ap->recv_message() will no longer be called.

 * Return value: CAPI result code

/**

 * capi20_put_message() - CAPI 2.0 operation CAPI_PUT_MESSAGE

 * @ap:		CAPI application descriptor structure.

 * @skb:	CAPI message.

 *

 * Transfer a single message to CAPI.

 * Return value: CAPI result code

	/*

	 * The controller reference is protected by the existence of the

	 * application passed to us. We assume that the caller properly

	 * synchronizes this service with capi20_release.

/**

 * capi20_get_manufacturer() - CAPI 2.0 operation CAPI_GET_MANUFACTURER

 * @contr:	controller number.

 * @buf:	result buffer (64 bytes).

 *

 * Retrieve information about the manufacturer of the specified ISDN controller

 * or (for @contr == 0) the driver itself.

 * Return value: CAPI result code

/**

 * capi20_get_version() - CAPI 2.0 operation CAPI_GET_VERSION

 * @contr:	controller number.

 * @verp:	result structure.

 *

 * Retrieve version information for the specified ISDN controller

 * or (for @contr == 0) the driver itself.

 * Return value: CAPI result code

/**

 * capi20_get_serial() - CAPI 2.0 operation CAPI_GET_SERIAL_NUMBER

 * @contr:	controller number.

 * @serial:	result buffer (8 bytes).

 *

 * Retrieve the serial number of the specified ISDN controller

 * or (for @contr == 0) the driver itself.

 * Return value: CAPI result code

/**

 * capi20_get_profile() - CAPI 2.0 operation CAPI_GET_PROFILE

 * @contr:	controller number.

 * @profp:	result structure.

 *

 * Retrieve capability information for the specified ISDN controller

 * or (for @contr == 0) the number of installed controllers.

 * Return value: CAPI result code

/**

 * capi20_manufacturer() - CAPI 2.0 operation CAPI_MANUFACTURER

 * @cmd:	command.

 * @data:	parameter.

 *

 * Perform manufacturer specific command.

 * Return value: CAPI result code

 ------------------------------------------------------------- */

 -------- Init & Cleanup ------------------------------------- */

 ------------------------------------------------------------- */

/*

 * init / exit functions

/*

 * Audio crossconnecting/conferrencing (hardware level).

 *

 * Copyright 2002 by Andreas Eversberg (jolly@eversberg.eu)

 *

 * This software may be used and distributed according to the terms

 * of the GNU General Public License, incorporated herein by reference.

 *

/*

 * The process of adding and removing parties to/from a conference:

 *

 * There is a chain of struct dsp_conf which has one or more members in a chain

 * of struct dsp_conf_member.

 *

 * After a party is added, the conference is checked for hardware capability.

 * Also if a party is removed, the conference is checked again.

 *

 * There are 3 different solutions: -1 = software, 0 = hardware-crossconnect

 * 1-n = hardware-conference. The n will give the conference number.

 *

 * Depending on the change after removal or insertion of a party, hardware

 * commands are given.

 *

 * The current solution is stored within the struct dsp_conf entry.

/*

 * HOW THE CMX WORKS:

 *

 * There are 3 types of interaction: One member is alone, in this case only

 * data flow from upper to lower layer is done.

 * Two members will also exchange their data so they are crossconnected.

 * Three or more members will be added in a conference and will hear each

 * other but will not receive their own speech (echo) if not enabled.

 *

 * Features of CMX are:

 *  - Crossconnecting or even conference, if more than two members are together.

 *  - Force mixing of transmit data with other crossconnect/conference members.

 *  - Echo generation to benchmark the delay of audio processing.

 *  - Use hardware to minimize cpu load, disable FIFO load and minimize delay.

 *  - Dejittering and clock generation.

 *

 * There are 2 buffers:

 *

 *

 * RX-Buffer

 *                 R             W

 *                 |             |

 * ----------------+-------------+-------------------

 *

 * The rx-buffer is a ring buffer used to store the received data for each

 * individual member. This is only the case if data needs to be dejittered

 * or in case of a conference where different clocks require reclocking.

 * The transmit-clock (R) will read the buffer.

 * If the clock overruns the write-pointer, we will have a buffer underrun.

 * If the write pointer always has a certain distance from the transmit-

 * clock, we will have a delay. The delay will dynamically be increased and

 * reduced.

 *

 *

 * TX-Buffer

 *                  R        W

 *                  |        |

 * -----------------+--------+-----------------------

 *

 * The tx-buffer is a ring buffer to queue the transmit data from user space

 * until it will be mixed or sent. There are two pointers, R and W. If the write

 * pointer W would reach or overrun R, the buffer would overrun. In this case

 * (some) data is dropped so that it will not overrun.

 * Additionally a dynamic dejittering can be enabled. this allows data from

 * user space that have jitter and different clock source.

 *

 *

 * Clock:

 *

 * A Clock is not required, if the data source has exactly one clock. In this

 * case the data source is forwarded to the destination.

 *

 * A Clock is required, because the data source

 *  - has multiple clocks.

 *  - has no usable clock due to jitter or packet loss (VoIP).

 * In this case the system's clock is used. The clock resolution depends on

 * the jiffie resolution.

 *

 * If a member joins a conference:

 *

 * - If a member joins, its rx_buff is set to silence and change read pointer

 *   to transmit clock.

 *

 * The procedure of received data from card is explained in cmx_receive.

 * The procedure of received data from user space is explained in cmx_transmit.

 * The procedure of transmit data to card is cmx_send.

 *

 *

 * Interaction with other features:

 *

 * DTMF:

 * DTMF decoding is done before the data is crossconnected.

 *

 * Volume change:

 * Changing rx-volume is done before the data is crossconnected. The tx-volume

 * must be changed whenever data is transmitted to the card by the cmx.

 *

 * Tones:

 * If a tone is enabled, it will be processed whenever data is transmitted to

 * the card. It will replace the tx-data from the user space.

 * If tones are generated by hardware, this conference member is removed for

 * this time.

 *

 * Disable rx-data:

 * If cmx is realized in hardware, rx data will be disabled if requested by

 * the upper layer. If dtmf decoding is done by software and enabled, rx data

 * will not be disabled but blocked to the upper layer.

 *

 * HFC conference engine:

 * If it is possible to realize all features using hardware, hardware will be

 * used if not forbidden by control command. Disabling rx-data provides

 * absolutely traffic free audio processing. (except for the quick 1-frame

 * upload of a tone loop, only once for a new tone)

 *

 delay.h is required for hw_lock.h */

/*

 * debugging of multi party conference,

 * by using conference even with two members

 #define CMX_CONF_DEBUG */

#define CMX_DEBUG * massive read/write pointer output */

#define CMX_DELAY_DEBUG * gives rx-buffer delay overview */

#define CMX_TX_DEBUG * massive read/write on tx-buffer with content */

/*

 * debug cmx memory structure

/*

 * search conference

 search conference */

/*

 * add member to conference

 clear rx buffer */

 rx_W and rx_R will be adjusted on first frame */

/*

 * del member from conference

 find us in conf */

/*

 * new conference

/*

 * del conference

/*

 * send HW message to hfc card

/*

 * do hardware update and set the software/hardware flag

 *

 * either a conference or a dsp instance can be given

 * if only dsp instance is given, the instance is not associated with a conf

 * and therefore removed. if a conference is given, the dsp is expected to

 * be member of that conference.

 dsp gets updated (no conf) */

 remove HFC conference if enabled */

 process hw echo */

 NO ECHO: remove PCM slot if assigned */

 echo is enabled, find out if we use soft or hardware */

 ECHO: already echo */

 ECHO: if slot already assigned */

 2 means loop */

 ECHO: find slot */

 no more slots available */

 assign free slot */

 loop */

 conf gets updated (all members) */

 check all members in our conference */

 check if member uses mixing */

 remove HFC conference if enabled */

 remove PCM slot if assigned */

 check if member has echo turned on */

 check if member has tx_mix turned on */

 check if member changes volume at an not suppoted level */

 check if tx-data turned on */

 check if pipeline exists */

 check if encryption is enabled */

 check if member is on a card with PCM support */

 check if relations are on the same PCM bus */

 determine if members are on the same hfc chip */

 if there are members already in a conference */

 if any member is not in a conference */

 if no member, this is an error */

 one member */

	/*

	 * ok, now we are sure that all members are on the same pcm.

	 * now we will see if we have only two members, so we can do

	 * crossconnections, which don't have any limitations.

 if we have only two members */

 remove HFC conference if enabled */

 if members have two banks (and not on the same chip) */

 if both members have same slots with crossed banks */

 all members have same slot */

 find a new slot */

 no more slots available */

 assign free slot */

 if members have one bank (or on the same chip) */

 if both members have different crossed slots */

 all members have same slot */

 find two new slot */

 no more slots available */

 no more slots available */

 assign free slots */

	/*

	 * if we have more than two, we may check if we have a conference

	 * unit available on the chip. also all members must be on the same

 if not the same HFC chip */

 for more than two members.. */

 if all members already have the same conference */

	/*

	 * if there is an existing conference, but not all members have joined

			/* if no conference engine on our chip, change to

 in case of hdlc, change to software */

 join to current conference */

 get a free timeslot first */

				/*

				 * not checking current member, because

				 * slot will be overwritten.

 dsp must be on the same PCM */

 dsp must be on a slot */

 no more slots available */

 assign free slot & set PCM & join conf */

 loop */

	/*

	 * no member is in a conference yet, so we find a free one

 dsp must be on the same chip */

 dsp must have joined a HW conference */

 slot must be within range */

 no more conferences available */

 join all members */

/*

 * conf_id != 0: join or change conference

 * conf_id == 0: split from conference if not already

 if conference doesn't change */

 first remove us from current conf */

 remove us from conf */

 update hardware */

 conf now empty? */

 update members left on conf */

 if split */

 now add us to conf */

 the conference doesn't exist, so we create */

 add conference member */

 if we are alone, we do nothing! */

 update hardware */

 update members on conf */

/*

 * audio data is received from card

 check if we have sompen */

 half of the buffer should be larger than maximum packet size */

	/*

	 * initialize pointers if not already -

	 * also add delay if requested by PH_SIGNAL

 if frame contains time code, write directly */

 printk(KERN_DEBUG "%s %08x\n", dsp->name, hh->id); */

	/*

	 * if we underrun (or maybe overrun),

	 * we set our new read pointer, and write silence to buffer

 flush rx buffer and set delay to dsp_poll / 2 */

 if we have reached double delay, jump back to middle */

 flush buffer */

 show where to write */

 write data into rx_buffer */

 increase write-pointer */

/*

 * send (mixed) audio data to card and control jitter

 don't process if: */

 if not active */

 hardware conf */

 OR hardware echo */

 AND no tx-data */

 AND not soft tones */

 no tx_data for user space required */

 preload if we have delay set */

 PREPARE RESULT */

 set pointers, indexes and stuff */

 transmit data */

 received data */

 result */

 tx-pointers */

 rx-pointers */

 preload with silence, if required */

 PROCESS TONES/TX-DATA ONLY */

 -> copy tone */

 clear tx buffer */

 if we have tx-data but do not use mixing */

 -> send tx-data and continue when not enough */

 write tx_buff */

 PROCESS DATA (one member / no conf) */

 -> if echo is NOT enabled */

 -> send tx-data if available or use 0-volume */

 write tx_buff */

 -> if echo is enabled */

			/*

			 * -> mix tx-data with echo if available,

			 * or use echo only

 echo */

 PROCESS DATA (two members) */

 "other" becomes other party */

 received data */

 end of rx-pointer */

 start rx-pointer at current read position*/

 -> if echo is NOT enabled */

			/*

			 * -> copy other member's rx-data,

			 * if tx-data is available, mix

 -> if echo is enabled */

			/*

			 * -> mix other member's rx-data with echo,

			 * if tx-data is available, mix

 tx-data + rx_data + echo */

 PROCESS DATA (three or more members) */

 -> if echo is NOT enabled */

		/*

		 * -> subtract rx-data from conf-data,

		 * if tx-data is available, mix

 conf-rx+tx */

 conf-rx */

 -> if echo is enabled */

		/*

		 * -> encode conf-data, if tx-data

		 * is available, mix

 conf(echo)+tx */

 conf(echo) */

	/*

	 * send tx-data if enabled - don't filter,

	 * because we want what we send, not what we filtered

 queue and trigger */

 exit because only tx_data is used */

 queue (trigger later) */

 send data only to card, if we don't just calculated tx_data */

 adjust volume */

 pipeline */

 crypt */

 queue and trigger */

 counter for jitter check */

 calculate the next time to fire */

 last sample count */

 if we have last sample count */

 lock */

 printk(KERN_DEBUG "len=%d dsp_count=0x%x\n", length, dsp_count); */

	/*

	 * check if jitter needs to be checked (this is every second)

 loop all members that do not require conference mixing */

 transmission required */

			/*

			 * unused mixbuffer is given to prevent a

			 * potential null-pointer-bug

 loop all members that require conference mixing */

 count members and check hardware */

 check for hdlc conf */

 mix all data */

 get range of data to mix */

 add member's data */

 process each member */

 transmission */

 delete rx-data, increment buffers, change pointers */

 move receive pointer when receiving */

 delete rx-data */

 increment rx-buffer pointer */

 write incremented read pointer */

 check current rx_delay */

 will be the delay before next write */

 check for lower delay */

 check current tx_delay */

 will be the delay before next write */

 check for lower delay */

 find the lowest of all rx_delays */

			/*

			 * remove rx_delay only if we have delay AND we

			 * have not preset cmx_delay AND

			 * the delay is greater dsp_poll

 delete rx-data */

 increment rx-buffer pointer */

 write incremented read pointer */

 find the lowest of all tx_delays */

			/*

			 * remove delay only if we have delay AND we

			 * have enabled tx_dejitter

 delete tx-data */

 increment rx-buffer pointer */

 write incremented read pointer */

 scroll up delays */

 (infinite) delay */

 (infinite) delay */

 if next event would be in the past ... */

 unlock */

/*

 * audio data is transmitted from upper layer to the dsp

 todo: , l = skb->len; */

 check if there is enough space, and then copy */

 write-pointer should not overrun nor reach read pointer */

 write to the space we have left */

 end one byte prior tx_R */

 write until all byte are copied */

 show current buffer */

 copy transmit data to tx-buffer */

/*

 * hdlc data is received from card and sent to all members.

 not if not active */

 check if we have sompen */

 no conf */

 in case of software echo */

 in case of hardware conference */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2008  by Andreas Eversberg <andreas@eversberg.eu>

 *

 * Quick API description:

 *

 * A clock source registers using mISDN_register_clock:

 *	name = text string to name clock source

 *	priority = value to priorize clock sources (0 = default)

 *	ctl = callback function to enable/disable clock source

 *	priv = private pointer of clock source

 *	return = pointer to clock source structure;

 *

 * Note: Callback 'ctl' can be called before mISDN_register_clock returns!

 *       Also it can be called during mISDN_unregister_clock.

 *

 * A clock source calls mISDN_clock_update with given samples elapsed, if

 * enabled. If function call is delayed, tv must be set with the timestamp

 * of the actual event.

 *

 * A clock source unregisters using mISDN_unregister_clock.

 *

 * To get current clock, call mISDN_clock_get. The signed short value

 * counts the number of samples since. Time since last clock event is added.

 counter of last clock */

 time stamp of last clock */

 already received one timestamp */

 last used clock source still exists but changes, disable */

 new clock source selected, enable */

 no clock received yet */

 increment sample counter by given samples */

 timestamp must be set, if function call is delayed */

 calc elapsed time by system clock */

 timestamp must be set, if function call is delayed */

 add elapsed time to counter and set new timestamp */

 calc elapsed time by system clock */

 add elapsed time to counter */

/*

 * Blowfish encryption/decryption for mISDN_dsp.

 *

 * Copyright Andreas Eversberg (jolly@eversberg.eu)

 *

 * This software may be used and distributed according to the terms

 * of the GNU General Public License, incorporated herein by reference.

 *

/*

 * how to encode a sample stream to 64-bit blocks that will be encryped

 *

 * first of all, data is collected until a block of 9 samples are received.

 * of course, a packet may have much more than 9 sample, but is may have

 * not excacly the multiple of 9 samples. if there is a rest, the next

 * received data will complete the block.

 *

 * the block is then converted to 9 uLAW samples without the least sigificant

 * bit. the result is a 7-bit encoded sample.

 *

 * the samples will be reoganised to form 8 bytes of data:

 * (5(6) means: encoded sample no. 5, bit 6)

 *

 * 0(6) 0(5) 0(4) 0(3) 0(2) 0(1) 0(0) 1(6)

 * 1(5) 1(4) 1(3) 1(2) 1(1) 1(0) 2(6) 2(5)

 * 2(4) 2(3) 2(2) 2(1) 2(0) 3(6) 3(5) 3(4)

 * 3(3) 3(2) 3(1) 3(0) 4(6) 4(5) 4(4) 4(3)

 * 4(2) 4(1) 4(0) 5(6) 5(5) 5(4) 5(3) 5(2)

 * 5(1) 5(0) 6(6) 6(5) 6(4) 6(3) 6(2) 6(1)

 * 6(0) 7(6) 7(5) 7(4) 7(3) 7(2) 7(1) 7(0)

 * 8(6) 8(5) 8(4) 8(3) 8(2) 8(1) 8(0)

 *

 * the missing bit 0 of the last byte is filled with some

 * random noise, to fill all 8 bytes.

 *

 * the 8 bytes will be encrypted using blowfish.

 *

 * the result will be converted into 9 bytes. the bit 7 is used for

 * checksumme (CS) for sync (0, 1) and for the last bit:

 * (5(6) means: crypted byte 5, bit 6)

 *

 * 1    0(7) 0(6) 0(5) 0(4) 0(3) 0(2) 0(1)

 * 0    0(0) 1(7) 1(6) 1(5) 1(4) 1(3) 1(2)

 * 0    1(1) 1(0) 2(7) 2(6) 2(5) 2(4) 2(3)

 * 0    2(2) 2(1) 2(0) 3(7) 3(6) 3(5) 3(4)

 * 0    3(3) 3(2) 3(1) 3(0) 4(7) 4(6) 4(5)

 * CS   4(4) 4(3) 4(2) 4(1) 4(0) 5(7) 5(6)

 * CS   5(5) 5(4) 5(3) 5(2) 5(1) 5(0) 6(7)

 * CS   6(6) 6(5) 6(4) 6(3) 6(2) 6(1) 6(0)

 * 7(0) 7(6) 7(5) 7(4) 7(3) 7(2) 7(1) 7(0)

 *

 * the checksum is used to detect transmission errors and frame drops.

 *

 * synchronisation of received block is done by shifting the upper bit of each

 * byte (bit 7) to a shift register. if the rigister has the first five bits

 * (10000), this is used to find the sync. only if sync has been found, the

 * current block of 9 received bytes are decrypted. before that the check

 * sum is calculated. if it is incorrect the block is dropped.

 * this will avoid loud noise due to corrupt encrypted data.

 *

 * if the last block is corrupt, the current decoded block is repeated

 * until a valid block has been received.

/*

 *  some blowfish parts are taken from the

 * crypto-api for faster implementation

/*

 * Round loop unrolling macros, S is a pointer to a S-Box array

 * organized in 4 unsigned longs at a row.

/*

 * encrypt isdn data frame

 * every block with 9 samples is encrypted

 collect a block of 9 samples */

 transcode 9 samples xlaw to 8 bytes */

 fill unused bit with random noise of audio input */

 encrypt */

 calculate 3-bit checksumme */

		/*

		 * transcode 8 crypted bytes to 9 data bytes with sync

		 * and checksum information

 write current count */

/*

 * decrypt isdn data frame

 * every block with 9 bytes is decrypted

		/*

		 * shift upper bit and rotate data to buffer ring

		 * send current decrypted data

 repeat if no sync has been found */

 check if not in sync */

 transcode receive data to 64 bit block of encrypted data */

 bit7 = 0 */

 bit7 = 0 */

 bit7 = 0 */

 bit7 = 0 */

 calculate 3-bit checksumme */

 check if frame is valid */

 decrypt */

 transcode 8 crypted bytes to 9 sample bytes */

 start with new decoded frame */

 write current count and sync */

 used to encrypt S and P boxes */

/*

 * initialize the dsp for encryption and decryption using the same key

 * Calculates the blowfish S and P boxes for encryption and decryption.

 * The margin of keylen must be 4-56 bytes.

 * returns 0 if ok.

 Set dsp states */

 Copy the initialization s-boxes */

 Set the p-boxes */

 Actual subkey generation */

/*

 * turn encryption off

 SPDX-License-Identifier: GPL-2.0-or-later

/*



 * l1oip.c  low level driver for tunneling layer 1 over IP

 *

 * NOTE: It is not compatible with TDMoIP nor "ISDN over IP".

 *

 * Author	Andreas Eversberg (jolly@eversberg.eu)

/* module parameters:

 * type:

 Value 1	= BRI

 Value 2	= PRI

 Value 3 = BRI (multi channel frame, not supported yet)

 Value 4 = PRI (multi channel frame, not supported yet)

 A multi channel frame reduces overhead to a single frame for all

 b-channels, but increases delay.

 (NOTE: Multi channel frames are not implemented yet.)



 * codec:

 Value 0 = transparent (default)

 Value 1 = transfer ALAW

 Value 2 = transfer ULAW

 Value 3 = transfer generic 4 bit compression.



 * ulaw:

 0 = we use a-Law (default)

 1 = we use u-Law



 * limit:

 limitation of B-channels to control bandwidth (1...126)

 BRI: 1 or 2

 PRI: 1-30, 31-126 (126, because dchannel ist not counted here)

 Also limited ressources are used for stack, resulting in less channels.

 It is possible to have more channels than 30 in PRI mode, this must

 be supported by the application.



 * ip:

 byte representation of remote ip address (127.0.0.1 -> 127,0,0,1)

 If not given or four 0, no remote address is set.

 For multiple interfaces, concat ip addresses. (127,0,0,1,127,0,0,1)



 * port:

 port number (local interface)

 If not given or 0, port 931 is used for fist instance, 932 for next...

 For multiple interfaces, different ports must be given.



 * remoteport:

 port number (remote interface)

 If not given or 0, remote port equals local port

 For multiple interfaces on equal sites, different ports must be given.



 * ondemand:

 0 = fixed (always transmit packets, even when remote side timed out)

 1 = on demand (only transmit packets, when remote side is detected)

 the default is 0

 NOTE: ID must also be set for on demand.



 * id:

 optional value to identify frames. This value must be equal on both

 peers and should be random. If omitted or 0, no ID is transmitted.



 * debug:

 NOTE: only one debug value must be given for all cards

 enable debugging (see l1oip.h for debug options)





 Special mISDN controls:



 op = MISDN_CTRL_SETPEER*

 p1 = bytes 0-3 : remote IP address in network order (left element first)

 p2 = bytes 1-2 : remote port in network order (high byte first)

 optional:

 p2 = bytes 3-4 : local port in network order (high byte first)



 op = MISDN_CTRL_UNSETPEER*



 * Use l1oipctrl for comfortable setting or removing ip address.

 (Layer 1 Over IP CTRL)





 L1oIP-Protocol

 --------------



 Frame Header:



 7 6 5 4 3 2 1 0

 +---------------+

 |Ver|T|I|Coding |

 +---------------+

 |  ID byte 3 *  |

 +---------------+

 |  ID byte 2 *  |

 +---------------+

 |  ID byte 1 *  |

 +---------------+

 |  ID byte 0 *  |

 +---------------+

 |M|   Channel   |

 +---------------+

 |    Length *   |

 +---------------+

 | Time Base MSB |

 +---------------+

 | Time Base LSB |

 +---------------+

 | Data....	|



 ...



 |               |

 +---------------+

 |M|   Channel   |

 +---------------+

 |    Length *   |

 +---------------+

 | Time Base MSB |

 +---------------+

 | Time Base LSB |

 +---------------+

 | Data....	|



 ...





 * Only included in some cases.



 - Ver = Version

 If version is missmatch, the frame must be ignored.



 - T = Type of interface

 Must be 0 for S0 or 1 for E1.



 - I = Id present

 If bit is set, four ID bytes are included in frame.



 - ID = Connection ID

 Additional ID to prevent Denial of Service attacs. Also it prevents hijacking

 connections with dynamic IP. The ID should be random and must not be 0.



 - Coding = Type of codec

 Must be 0 for no transcoding. Also for D-channel and other HDLC frames.

 1 and 2 are reserved for explicitly use of a-LAW or u-LAW codec.

 3 is used for generic table compressor.



 - M = More channels to come. If this flag is 1, the following byte contains

 the length of the channel data. After the data block, the next channel will

 be defined. The flag for the last channel block (or if only one channel is

 transmitted), must be 0 and no length is given.



 - Channel = Channel number

 0 reserved

 1-3 channel data for S0 (3 is D-channel)

 1-31 channel data for E1 (16 is D-channel)

 32-127 channel data for extended E1 (16 is D-channel)



 - The length is used if the M-flag is 1. It is used to find the next channel

 inside frame.

 NOTE: A value of 0 equals 256 bytes of data.

 -> For larger data blocks, a single frame must be used.

 -> For larger streams, a single frame or multiple blocks with same channel ID

 must be used.



 - Time Base = Timestamp of first sample in frame

 The "Time Base" is used to rearange packets and to detect packet loss.

 The 16 bits are sent in network order (MSB first) and count 1/8000 th of a

 second. This causes a wrap around each 8,192 seconds. There is no requirement

 for the initial "Time Base", but 0 should be used for the first packet.

 In case of HDLC data, this timestamp counts the packet or byte number.





 Two Timers:



 After initialisation, a timer of 15 seconds is started. Whenever a packet is

 transmitted, the timer is reset to 15 seconds again. If the timer expires, an

 empty packet is transmitted. This keep the connection alive.



 When a valid packet is received, a timer 65 seconds is started. The interface

 become ACTIVE. If the timer expires, the interface becomes INACTIVE.





 Dynamic IP handling:



 To allow dynamic IP, the ID must be non 0. In this case, any packet with the

 correct port number and ID will be accepted. If the remote side changes its IP

 the new IP is used for all transmitted packets until it changes again.





 On Demand:



 If the ondemand parameter is given, the remote IP is set to 0 on timeout.

 This will stop keepalive traffic to remote. If the remote is online again,

 traffic will continue to the remote address. This is useful for road warriors.

 This feature only works with ID set, otherwhise it is highly unsecure.





 Socket and Thread

 -----------------



 The complete socket opening and closing is done by a thread.

 When the thread opened a socket, the hc->socket descriptor is set. Whenever a

 packet shall be sent to the socket, the hc->socket must be checked whether not

 NULL. To prevent change in socket descriptor, the hc->socket_lock must be used.

 To change the socket, a recall of l1oip_socket_open() will safely kill the

 socket process and create a new one.



 0...3 */

/*

 * send a frame via socket, if open and restart timer

 restart timer */

 drop if we have no remote ip or port */

 assemble frame */

 version and coding */

 type */

 id */

 id */

 m-flag, channel */

 time base */

 add data to frame */

 check for socket in safe condition */

 seize socket */

 send packet */

 give socket back */

 no locking required */

/*

 * receive channel data from socket

 prepare message */

 send message up */

 expand 16 bit sequence number to 32 bit sequence number */

 time has changed forward */

 time has changed backwards */

/*

 * parse frame and extract channel data

 initial frame length */

 check length */

 check version */

 check type */

 get id flag */

 check coding */

 check packet_id */

 get channel and multiframe flag */

 check length on multiframe */

 single frame, subtract timebase */

 get time base */

 if inactive, we send up a PH_ACTIVATE and activate */

 distribute packet */

 multiframe */

 restart timer */

 only adjust timer */

 if ip or source port changes */

/*

 * socket stuff

 allocate buffer memory */

 make daemon */

 create socket */

 set incoming address */

 set outgoing address */

 bind to incoming port */

 check sk */

 build send message */

 give away socket */

 read loop */

 get socket back, check first if in use, maybe by send function */

 if hc->socket is NULL, it is in use until it is given back */

 free recvbuf */

 close socket */

 if we got killed, signal completion */

 show termination of thread */

 kill thread */

 if active, we send up a PH_DEACTIVATE and deactivate */

 in case of reopen, we need to close first */

 create receive process */

 send an empty l1oip frame at D-channel */

/*

 * timer stuff

 state that timer must be initialized next time */

 if timeout, we send up a PH_DEACTIVATE and deactivate */

 if we have ondemand set, we remove ip address */

/*

 * message handling

 send frame */

			/*

			 * This is technically bounded by L1OIP_MAX_PERFRAME but

			 * MAX_DFRAME_LEN_L1 < L1OIP_MAX_PERFRAME

 BRI: 1=B1 2=B2  PRI: 1..15,17.. */

 b-channel can be only open once */

 check for AIS / ulaw-silence */

 check for silence */

 send frame */

			/*

			 * This is technically bounded by L1OIP_MAX_PERFRAME but

			 * MAX_DFRAME_LEN_L1 < L1OIP_MAX_PERFRAME

 fill features structure */

 create confirm */

/*

 * cleanup module and stack

/*

 * module and stack init

 as is */

 alaw */

 ulaw */

 4bit */

 TODO: create a parent device for this driver */

 two seconds first time */

 state that we have timer off */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * finite state machine implementation

 *

 * Author       Karsten Keil <kkeil@novell.com>

 *

 * Thanks to    Jan den Ouden

 *              Fritz Elfert

 * Copyright 2008  by Karsten Keil <kkeil@novell.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Author	Karsten Keil <kkeil@novell.com>

 *

 * Copyright 2008  by Karsten Keil <kkeil@novell.com>

 have still activ TEI */

 All TEI are inactiv */

 restart da timer */

 check again */

 have still activ TEI */

 All TEI are inactiv */

 only net send UI */

 SAPI 0 C/R = 1 */

 TEI 127 */

 UI frame */

 CR:=1 for net command */

 same tei is in use */

 same tei is in use */

 and it wasn't our request */

 duplicate assignment; remove */

 T202  2 sec */

 We need open here L1 for the manager as well (refcounting) */

 Extension bit != 1 */

 3GPP TS 08.56 6.1.11.2 */

 not for us */

 EA0 formal error */

 EA1 formal error */

 not for us */

 not UI */

 not tei entity */

 dyn tei */

 T201  1 sec */

 T202  2 sec */

 We need open here L1 for the manager as well (refcounting) */

 not locked lock is taken in release tei */

 currently we only have one option */

 This function does create a L2 for fixed TEI in NT Mode */

 EA0 and CR must be  0 */

 invalid EA1 */

 not a fixed tei */

 We got a SABME for a fixed TEI */

 not locked lock is taken in release tei */

 save original header behind normal header */

 SPDX-License-Identifier: GPL-2.0-or-later

/*



 * l1oip_codec.c  generic codec using lookup table

 *  -> conversion from a-Law to u-Law

 *  -> conversion from u-Law to a-Law

 *  -> compression by reducing the number of sample resolution to 4

 *

 * NOTE: It is not compatible with any standard codec like ADPCM.

 *

 * Author	Andreas Eversberg (jolly@eversberg.eu)

 *



/*



  How the codec works:

  --------------------



  The volume is increased to increase the dynamic range of the audio signal.

  Each sample is converted to a-LAW with only 16 steps of level resolution.

  A pair of two samples are stored in one byte.



  The first byte is stored in the upper bits, the second byte is stored in the

  lower bits.



  To speed up compression and decompression, two lookup tables are formed:



  - 16 bits index for two samples (law encoded) with 8 bit compressed result.

  - 8 bits index for one compressed data with 16 bits decompressed result.



  NOTE: The bytes are handled as they are law-encoded.



 definitions of codec. don't use calculations, code may run slower. */

 alaw -> ulaw */

 ulaw -> alaw */

 alaw -> 4bit compression */

 4bit -> alaw decompression */

 ulaw -> 4bit compression */

 4bit -> ulaw decompression */

/*

 * Compresses data to the result buffer

 * The result size must be at least half of the input buffer.

 * The number of samples also must be even!

 send saved byte and first input byte */

 if len has an odd number, we save byte for next call */

/* Decompress data to the result buffer

 * The result size must be the number of sample in packet. (2 * input data)

 * The number of samples in the result are even!

/*

 * law conversion

/*

 * generate/free compression and decompression table

 in case, it is called again */

 alloc conversion tables */

 generate compression table */

 generate decompression table */

/*

 * Audio support data for ISDN4Linux.

 *

 * Copyright Andreas Eversberg (jolly@eversberg.eu)

 *

 * This software may be used and distributed according to the terms

 * of the GNU General Public License, incorporated herein by reference.

 *

**************/

 tones loops */

**************/

 all tones are alaw encoded */

 the last sample+1 is in phase with the first sample. the error is low */

/***********************************

 * generate ulaw from alaw samples *

/****************************

 * tone sequence definition *

/******************

 * copy tone data *

/* an sk_buff is generated from the number of samples needed.

 * the count will be changed and may begin from 0 each pattern period.

 * the clue is to precalculate the pointers and legths to use only one

 * memcpy per function call, or two memcpy if the tone sequence changes.

 *

 * pattern - the type of the pattern

 * count - the sample from the beginning of the pattern (phase)

 * len - the number of bytes

 *

 * return - the sk_buff with the sample

 *

 * if tones has finished (e.g. knocking tone), dsp->tones is turned off

 if we have no tone, we copy silence */

 process pattern */

 points to the current pattern */

 gives current sequence index */

 gives current sample */

 copy sample */

 find sample to start with */

 wrap around */

 check if we are currently playing this tone */

 calculate start and number of samples */

 copy memory */

 reduce length */

 return sk_buff */

/*******************************

 * send HW message to hfc card *

 unlocking is not required, because we don't expect a response */

/*****************

 * timer expires *

 set next tone */

 set timer */

/********************

 * set/release tone *

/*

 * tones are relaized by streaming or by special loop commands if supported

 * by hardware. when hardware is used, the patterns will be controlled by

 * timers.

 we turn off the tone */

 set first tone */

 set timer */

/*

 * Audio support data for mISDN_dsp.

 *

 * Copyright 2002/2003 by Andreas Eversberg (jolly@eversberg.eu)

 * Rewritten by Peter

 *

 * This software may be used and distributed according to the terms

 * of the GNU General Public License, incorporated herein by reference.

 *

 ulaw[unsigned char] -> signed 16-bit */

 alaw[unsigned char] -> signed 16-bit */

 signed 16-bit -> law */

 alaw -> ulaw */

 ulaw -> alaw */

/*****************************************************

 * generate table for conversion of s16 to alaw/ulaw *

 Sign (7th) bit = 1 */

 Sign bit = 0 */

 Convert the scaled magnitude to segment number. */

 Combine the sign, segment, and quantization bits. */

 rounding error */;

!< define the add-in bias for 16 bit samples */

 Get the sample into sign-magnitude. */

 set aside the sign */

 get magnitude */

 Convert from 16 bit linear to ulaw. */

 generating ulaw-table */

 generating alaw-table */

/*

 * the seven bit sample is the number of every second alaw-sample ordered by

 * aplitude. 0x00 is negative, 0x7f is positive amplitude.

/********************************************************************

 * generate table for conversion law from/to 7-bit alaw-like sample *

 generate alaw table, sorted by the linear value */

 generate tabels */

 spl is the source: the law-sample (converted to alaw) */

 find the 7-bit-sample */

 write 7-bit audio value */

 mix 2*law -> law */

/******************************************************

 * generate mix table to mix two law samples into one *

/*************************************

 * generate different volume changes *

/**************************************

 * change the volume of the given skb *

/* this is a helper function for changing volume of skb. the range may be

 * -8 to 8, which is a shift to the power of 2. 0 == no volume, 3 == volume*8

 get correct conversion table */

 change volume */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Author	Karsten Keil <kkeil@novell.com>

 *

 * Copyright 2008  by Karsten Keil <kkeil@novell.com>

 L2 for all */

 broadcast not handled yet */

 test if a race happens */

 can't fail */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Author	Karsten Keil <kkeil@novell.com>

 *

 * Copyright 2008  by Karsten Keil <kkeil@novell.com>

 do not force anything here, we need send INFO 0 */

 Tell HW to send INFO 1 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2008  by Karsten Keil <kkeil@novell.com>

 nothing to do: the device is part of its parent's data structure */

 hangs */

 do nothing, it's static */

 sysfs_remove_link(&dev->dev.kobj, "device"); */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * general timer device for using in ISDN stacks

 *

 * Author	Karsten Keil <kkeil@novell.com>

 *

 * Copyright 2008  by Karsten Keil <kkeil@novell.com>

 protect lists */

 it might have been moved to ->expired */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * dsp_pipeline.c: pipelined audio processing

 *

 * Copyright (C) 2007, Nadi Sarrar

 *

 * Nadi Sarrar <nadi@beronet.com>

 sysfs */

					/* This is a hack to make the hwec

/*

 * Author       Andreas Eversberg (jolly@eversberg.eu)

 * Based on source code structure by

 *		Karsten Keil (keil@isdn4linux.de)

 *

 *		This file is (c) under GNU PUBLIC LICENSE

 *

 * Thanks to    Karsten Keil (great drivers)

 *              Cologne Chip (great chips)

 *

 * This module does:

 *		Real-time tone generation

 *		DTMF detection

 *		Real-time cross-connection and conferrence

 *		Compensate jitter due to system load and hardware fault.

 *		All features are done in kernel space and will be realized

 *		using hardware, if available and supported by chip set.

 *		Blowfish encryption/decryption

/* STRUCTURE:

 *

 * The dsp module provides layer 2 for b-channels (64kbit). It provides

 * transparent audio forwarding with special digital signal processing:

 *

 * - (1) generation of tones

 * - (2) detection of dtmf tones

 * - (3) crossconnecting and conferences (clocking)

 * - (4) echo generation for delay test

 * - (5) volume control

 * - (6) disable receive data

 * - (7) pipeline

 * - (8) encryption/decryption

 *

 * Look:

 *             TX            RX

 *         ------upper layer------

 *             |             ^

 *             |             |(6)

 *             v             |

 *       +-----+-------------+-----+

 *       |(3)(4)                   |

 *       |           CMX           |

 *       |                         |

 *       |           +-------------+

 *       |           |       ^

 *       |           |       |

 *       |+---------+|  +----+----+

 *       ||(1)      ||  |(2)      |

 *       ||         ||  |         |

 *       ||  Tones  ||  |  DTMF   |

 *       ||         ||  |         |

 *       ||         ||  |         |

 *       |+----+----+|  +----+----+

 *       +-----+-----+       ^

 *             |             |

 *             v             |

 *        +----+----+   +----+----+

 *        |(5)      |   |(5)      |

 *        |         |   |         |

 *        |TX Volume|   |RX Volume|

 *        |         |   |         |

 *        |         |   |         |

 *        +----+----+   +----+----+

 *             |             ^

 *             |             |

 *             v             |

 *        +----+-------------+----+

 *        |(7)                    |

 *        |                       |

 *        |  Pipeline Processing  |

 *        |                       |

 *        |                       |

 *        +----+-------------+----+

 *             |             ^

 *             |             |

 *             v             |

 *        +----+----+   +----+----+

 *        |(8)      |   |(8)      |

 *        |         |   |         |

 *        | Encrypt |   | Decrypt |

 *        |         |   |         |

 *        |         |   |         |

 *        +----+----+   +----+----+

 *             |             ^

 *             |             |

 *             v             |

 *         ------card  layer------

 *             TX            RX

 *

 * Above you can see the logical data flow. If software is used to do the

 * process, it is actually the real data flow. If hardware is used, data

 * may not flow, but hardware commands to the card, to provide the data flow

 * as shown.

 *

 * NOTE: The channel must be activated in order to make dsp work, even if

 * no data flow to the upper layer is intended. Activation can be done

 * after and before controlling the setting using PH_CONTROL requests.

 *

 * DTMF: Will be detected by hardware if possible. It is done before CMX

 * processing.

 *

 * Tones: Will be generated via software if endless looped audio fifos are

 * not supported by hardware. Tones will override all data from CMX.

 * It is not required to join a conference to use tones at any time.

 *

 * CMX: Is transparent when not used. When it is used, it will do

 * crossconnections and conferences via software if not possible through

 * hardware. If hardware capability is available, hardware is used.

 *

 * Echo: Is generated by CMX and is used to check performance of hard and

 * software CMX.

 *

 * The CMX has special functions for conferences with one, two and more

 * members. It will allow different types of data flow. Receive and transmit

 * data to/form upper layer may be switched on/off individually without losing

 * features of CMX, Tones and DTMF.

 *

 * Echo Cancellation: Sometimes we like to cancel echo from the interface.

 * Note that a VoIP call may not have echo caused by the IP phone. The echo

 * is generated by the telephone line connected to it. Because the delay

 * is high, it becomes an echo. RESULT: Echo Cachelation is required if

 * both echo AND delay is applied to an interface.

 * Remember that software CMX always generates a more or less delay.

 *

 * If all used features can be realized in hardware, and if transmit and/or

 * receive data ist disabled, the card may not send/receive any data at all.

 * Not receiving is useful if only announcements are played. Not sending is

 * useful if an answering machine records audio. Not sending and receiving is

 * useful during most states of the call. If supported by hardware, tones

 * will be played without cpu load. Small PBXs and NT-Mode applications will

 * not need expensive hardware when processing calls.

 *

 *

 * LOCKING:

 *

 * When data is received from upper or lower layer (card), the complete dsp

 * module is locked by a global lock.  This lock MUST lock irq, because it

 * must lock timer events by DSP poll timer.

 * When data is ready to be transmitted down, the data is queued and sent

 * outside lock and timer event.

 * PH_CONTROL must not change any settings, join or split conference members

 * during process of data.

 *

 * HDLC:

 *

 * It works quite the same as transparent, except that HDLC data is forwarded

 * to all other conference members if no hardware bridging is possible.

 * Send data will be writte to sendq. Sendq will be sent if confirm is received.

 * Conference cannot join, if one member is not hdlc.

 *

int spinnest = 0;*/

 global dsp lock */

 check if rx may be turned off or must be turned on */

 not disabled */

 software dtmf */

 echo in software */

 bridge in software */

	/* data is not required by user space and not required

 no conf */

 check all members in conf */

 enable "fill empty" feature */

 turn on DTMF */

 init goertzel */

 check dtmf hardware */

 turn off DTMF */

 join / update conference */

 dsp_cmx_hardware will also be called here */

 remove from conference */

 dsp_cmx_hardware will also be called here */

 play tone */

 stop tone */

 reset tx buffers (user space data) */

 change volume */

 change volume */

 enable echo */

 soft echo */

 disable echo */

 enable receive to user space */

 disable receive to user space */

 enable mixing of tx data */

 disable mixing of tx data */

 enable txdata */

 disable txdata */

	case DSP_DELAY: /* use delay algorithm instead of dynamic

 milliseconds to samples */

			/* clip to half of maximum usable buffer

	case DSP_JITTER: /* use dynamic jitter algorithm instead of

 use dynamic jitter algorithm for tx-buffer */

 use tx-buffer without dejittering*/

 turn blowfish on */

 set new cont */

 send indication if it worked to set it */

 turn blowfish off */

 FROM DOWN */

 trigger next hdlc frame, if any */

 hdlc */

 if receive is not allowed */

 decrypt if enabled */

 pipeline */

 change volume if requested */

 check if dtmf soft decoding is turned on */

 we need to process receive data if software */

 process data from card at cmx */

 send dtmf result, if any */

 if receive is not allowed */

 getting coefficients */

 change volume */

 bchannel now active */

 rx_W and rx_R will be adjusted on first frame */

 send activation to upper layer */

 bchannel now inactive */

 FROM UP */

 hdlc */

 send data to tx-buffer (if no tone is played) */

 enable fill_empty feature */

 send ph_activate */

			dsp_cmx_conf(dsp, 0); /* dsp_cmx_hardware will also be

		/* wait until workqueue has finished,

		 * must lock here, or we may hit send-process currently

 MUST not be locked, because it waits until queue is done. */

		dsp_cmx_conf(dsp, 0); /* dsp_cmx_hardware will also be called

 wait until data has been acknowledged */

 send queued data */

 in locked date, we must have still data in queue */

 flush transparent data, if not acked */

 send packet up */

 send packet down */

 default enabled */

 set frame size to start */

 current PCM id */

 current PCM id */

 current CPM slot */

 current conference number */

 set tone timer */

 init pipeline append to list */

 set packet size */

 init conversion tables */

 set sample timer */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * dsp_hwec.c:

 * builtin mISDN dsp pipeline element for enabling the hw echocanceller

 *

 * Copyright (C) 2007, Nadi Sarrar

 *

 * Nadi Sarrar <nadi@beronet.com>

/*

 * DTMF decoder.

 *

 * Copyright            by Andreas Eversberg (jolly@eversberg.eu)

 *			based on different decoders such as ISDN4Linux

 *

 * This software may be used and distributed according to the terms

 * of the GNU General Public License, incorporated herein by reference.

 *

 number of frequencies to be analyzed */

/* For DTMF recognition:

 * 2 * cos(2 * PI * k / N) precalculated for all k

 k << 15 (source: hfc-4s/8s documentation (www.colognechip.de)) */

 digit matrix */

/* dtmf detection using goertzel algorithm

 * init function

/* check for hardware or software features

 check for volume change */

 check if encryption is enabled */

 check if pipeline exists */

/*************************************************************

 * calculate the coefficients of the given sample and decode *

/* the given sample is decoded. if the sample is not long enough for a

 * complete frame, the decoding is finished and continued with the next

 * call of this function.

 *

 * the algorithm is very good for detection with a minimum of errors. i

 * tested it allot. it even works with very short tones (40ms). the only

 * disadvantage is, that it doesn't work good with different volumes of both

 * tones. this will happen, if accoustically coupled dialers are used.

 * it sometimes detects tones during speech, which is normal for decoders.

 * use sequences to given commands during calls.

 *

 * dtmf - points to a structure of the current dtmf state

 * spl and len - the sample

 * fmt - 0 = alaw, 1 = ulaw, 2 = coefficients from HFC DTMF hw-decoder

	/* Note: The function will loop until the buffer has not enough samples

	 * left to decode a full frame.

 convert samples */

 alaw */

 ulaw */

 HFC coefficients */

 compute |X(k)|**2 */

 now we have a full buffer of signed long samples - we do goertzel */

 compute |X(k)|**2 */

	/* our (squared) coefficients have been calculated, we need to process

	 * them.

 calc digit (lowgroup/highgroup) */

 tones which are not on, must be below 9 dB */

 touchtones must match within 6 dB */

 ignore */

 noise in between */

 good level found. This is allowed only one time per group */

 lowgroup */

 Bad. Another tone found. */

 higroup */

 Bad. Another tone found. */

 get digit or null */

 the tone (or no tone) must remain 3 times without change */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Author	Karsten Keil <kkeil@novell.com>

 *

 * Copyright 2008  by Karsten Keil <kkeil@novell.com>

 read back dropped byte count */

 we return the old values */

 at least 2 for sapi / tei */

 at least 2 for sapi / tei */

 if allocation did fail upper functions still may call us */

		/* we have no data to send - this may happen after recovery

		 * from overflow or too small allocation.

 confirm imediately to allow next data */

 check oversize */

 HW lock must be obtained */

 write to fifo */

 check oversize */

 HW lock must be obtained */

 check for pending next_skb */

 write to fifo */

/* The function allocates a new receive skb on demand with a size for the

 * requirements of the current protocol. It returns the tailroom of the

 * receive skb or an error.

 send what we have now and try a new buffer */

 on HDLC we have to drop too big frames */

 update current min/max length first */

 with HDLC we do not know the length yet */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Author	Karsten Keil <kkeil@novell.com>

 *

 * Copyright 2008  by Karsten Keil <kkeil@novell.com>

 tei 127 */

/*

 *		in states 1-3 for broadcast

/*		mISDN_queue_data(&l2->inst, l2->inst.id | MSG_BROADCAST,

 *		    MGR_SHORTSTATUS | INDICATION, SSTATUS_L2_ESTABLISHED,

 *		    0, NULL, 0);

 n(s)!=v(r) */

 I or S */

/*	mISDN_queue_data(&l2->inst, l2->inst.id | MSG_BROADCAST,

 *		MGR_SHORTSTATUS_IND, SSTATUS_L2_RELEASED,

 *		0, NULL, 0);

 Maybe not needed */

 not our business */

 not our business */

 I-Frame */

 S-Frame */

 saved copy */

 ETS 300-125 5.3.2.1 Test: TC13010 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Author	Karsten Keil <kkeil@novell.com>

 *

 * Copyright 2008  by Karsten Keil <kkeil@novell.com>

 if we have a address, we use it */

 use default for L2 messages */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * isac.c   ISAC specific routines

 *

 * Author       Karsten Keil <keil@isdn4linux.de>

 *

 * Copyright 2009  by Karsten Keil <keil@isdn4linux.de>

 Restart frame */

 should not happen */

 dummy to avoid warning */

 RME */

 RPF */

 XPR */

 CISQ */

 RSC - never */

 SIN - never */

 EXI */

 XMR */

 XDU */

 MOS */

 direct TX */

 skb can be freed */

 TODO: implement for IPAC_TYPE_ISACX */

 B1 */

 B2 */

 we only support IOM2 mode */

 D-Channel Busy */

 discard frame; reset transceiver */

 Transmitter reset */

 E-Channel not supported */

 Disable all IRQ */

 clear LDD */

 enable transmitter */

 transparent mode 0, RAC, stop/go */

 all HDLC IRQ unmasked */

 old isac */

 only IOM 2 Mode */

 RMC */

 RMC */

 RMC */

 !(VFR && !RDO && CRC && !RAB) */

 Do RMC */

 HSCX B */

 HSCX A */

 RRES */

 XRES */

 ISAC EXI */

 only for ISAC/HSCX without PCI IRQ test */

 B1 and ICA */

 B2 and ICB */

 init */

 rec off */

 std adj. */

 ints off */

 ex trans */

 trans */

 trans */

 hdlc,crc */

 IPAC */

 ints off */

 ex trans */

 HSCX */

 ints off */

 ex trans */

 direct TX */

 conf is default 0, but can be overwritten by card setup */

 nothing special for IPACX to do here */

 b-channel can be only open once */

 cq->channel: 0 disable, 1 B1 loop 2 B2 loop, 3 both */

		/* default values for IOM time slots

 SPDX-License-Identifier: GPL-2.0-only

/*

 * speedfax.c	low level stuff for Sedlbauer Speedfax+ cards

 *		based on the ISAR DSP

 *		Thanks to Sedlbauer AG for informations and HW

 *

 * Author       Karsten Keil <keil@isdn4linux.de>

 *

 * Copyright 2009  by Karsten Keil <keil@isdn4linux.de>

 TIGER 100 Registers */

 Tiger AUX BITs */

 1 and 5 are inputs */

 HW access lock */

 protect Cards */

 for us or shared ? */

 shared */

 cq->channel: 0 disable, 1 B1 loop 2 B2 loop, 3 both */

 RESET Receiver and Transmitter */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *

 * hfcpci.c     low level driver for CCD's hfc-pci based cards

 *

 * Author     Werner Cornelius (werner@isdn4linux.de)

 *            based on existing driver for CCD hfc ISA cards

 *            type approval valid for HFC-S PCI A based card

 *

 * Copyright 1999  by Werner Cornelius (werner@isdn-development.de)

 * Copyright 2008  by Karsten Keil <kkeil@novell.com>

 *

 * Module options:

 *

 * debug:

 *	NOTE: only one poll value must be given for all cards

 *	See hfc_pci.h for debug flags.

 *

 * poll:

 *	NOTE: only one poll value must be given for all cards

 *	Give the number of samples for each fifo process.

 *	By default 128 is used. Decrease to reduce delay, increase to

 *	reduce cpu load. If unsure, don't mess with it!

 *	A value of 128 will use controller's interrupt. Other values will

 *	use kernel timer, because the controller will not allow lower values

 *	than 128.

 *	Also note that the value depends on the kernel timer frequency.

 *	If kernel uses a frequency of 1000 Hz, steps of 8 samples are possible.

 *	If the kernel uses 100 Hz, steps of 80 samples are possible.

 *	If the kernel uses 300 Hz, steps of about 26 samples are possible.

 start of PCI IO memory */

 FIFO memory */

 marker saving last b-fifo frame count */

 number of 3.125ms interrupts (3.5s) */

 number of 3.125ms interrupts (97 ms) */

 CLKDEL in TE mode */

 CLKDEL in NT mode */

 card lock */

 Interface functions */

/*

 * free hardware resources used by driver

 disable memory mapped ports + busmaster */

/*

 * set mode (NT or TE)

 ST-Bit delay for NT-Mode */

 NT-MODE */

 G1 */

 ST-Bit delay for TE-Mode */

 TE-MODE */

 F2 */

 Deactivate */

/*

 * function called to reset the HFC PCI chip. A complete software reset of chip

 * and fifos is done.

 enable memory mapped ports, disable busmaster */

 enable memory ports + busmaster */

 Reset On */

 Timeout 10ms */

 Reset Off */

 max 50000 us */

 only D fifos enabled */

 no exchange */

 no echo connect , threshold */

 set tx_lo mode, error in datasheet ! */

 S/T Auto awake */

 HFC Master Mode */

 Clear already pending ints */

 set NT/TE mode */

	/*

	 * Init GCI/IOM2 in master mode

	 * Slots 0 and 1 are set for B-chan 1 and 2

	 * D- and monitor/CI channel are not enabled

	 * STIO1 is used as output for data, B1+B2 from ST->IOM+HFC

	 * STIO2 is used as data input, B1+B2 from IOM->ST

	 * ST B-channel send disabled -> continuous 1s

	 * The IOM slots are always enabled

 set data flow directions: connect B1,B2: HFC to/from PCM */

 set data flow directions */

/*

 * Timer function called when kernel timer expires

 WD RESET */

/*

 *	WriteReg(hc, HFCD_DATA, HFCD_CTMT, hc->hw.ctmt | 0x80);

 *	add_timer(&hc->hw.timer);

/*

 * select a b-channel entry matching and active

/*

 * clear the desired B-channel rx fifo

 init F pointers to remain constant */

/*

 * clear the desired B-channel tx fifo

 init F pointers to remain constant */

/*

 * read a complete B-frame out of the buffer

 point to Z-Regs */

 new position in fifo */

 buffer wrap */

 next buffer */

 complete transfer */

 maximum */

 start of data */

 copy data */

 rest remaining */

 start of buffer */

 rest */

 next buffer */

/*

 * D-channel receive procedure

 next buffer */

 complete transfer */

 maximum */

 start of data */

 copy data */

 rest remaining */

 start of buffer */

 rest */

 next buffer */

/*

 * check for transparent receive data and read max one 'poll' size if avail

 pointer to z reg */

 no data avail */

 bytes actually buffered */

 new position in fifo */

 buffer wrap */

 fcnt_tx contains available bytes in tx-fifo */

 remaining bytes to send (bytes in tx-fifo) */

 complete transfer */

 maximum */

 start of data */

 copy data */

 rest remaining */

 start of buffer */

 rest */

 bch, id, !force */

 new position */

/*

 * B-channel main receive routine

/*

 * D-channel send routine

 frame count actually buffered */

 if wrap around */

 now determine free bytes in FIFO buffer */

 count now contains available bytes */

 source pointer */

 end fifo */

 limit size */

 first copy */

 remaining bytes */

 start of buffer */

 new position */

 for next buffer */

 new pos actual buffer */

 next frame */

/*

 * B-channel send routine

 fcnt contains available bytes in fifo */

 new buffer Position */

 buffer wrap */

 end of fifo */

 limit size */

 first copy */

 remaining bytes */

 start of buffer */

 now send data */

 fcnt contains available bytes in fifo */

 remaining bytes to send (bytes in fifo) */

 maximum fill shall be poll*2 */

 data is suitable for fifo */

 new buffer Position */

 buffer wrap */

 source pointer */

 end of fifo */

 limit size */

 first copy */

 remaining bytes */

 start of buffer */

 new position */

 now send data */

 frame count actually buffered */

 if wrap around */

 now determine free bytes in FIFO buffer */

 count now contains available bytes */

 new buffer Position */

 buffer wrap */

 source pointer */

 end fifo */

 limit size */

 first copy */

 remaining bytes */

 start of buffer */

 new position */

 for next buffer */

 next frame */

/*

 * handle L1 state changes TE

/*

 * handle L1 state changes NT

 Clear already pending ints */

 allow G2 -> G3 transition */

/*

 * Layer 1 callback function

 HFC ST 3 */

 HFC ST 2 */

/*

 * Interrupt handler

 not initialised */

 shared */

 state machine irq */

 timer irq */

 B1 rx */

 B2 rx */

 B1 tx */

 B2 tx */

 D rx */

 D tx */

/*

 * timer callback for D-chan busy resolution. Currently no function

/*

 * activate/deactivate hardware for selected channels and mode

 PCM SLOT USE */

 B1 and B2 normal mode */

 B1 and B2 exchanged */

 B1 and B2 normal mode */

 B1 and B2 normal mode */

 used for init */

 init case */

/*

 * Layer 1 B-channel hardware access

/*

 * Layer2 -> Layer 1 Dchannel data

 direct TX */

 skb can be freed */

 prepare deactivation */

/*

 * Layer2 -> Layer 1 Bchannel data

 direct TX */

/*

 * called for card init message

		/*

		 * Finally enable IRQ output

		 * this is only allowed, if an IRQ routine is already

		 * established for this HFC, so don't do that earlier

 Timeout 80ms */

 now switch timer interrupt off */

 reinit mode reg */

 channel 0 disabled loop */

 enable IOM-loop */

 disable IOM-loop */

 disable IOM-loop */

 TODO: E-Channel */

 b-channel can be only open once */

 TODO: E-channel */

/*

 * device control function

 Allocate memory for FIFOS */

 the memory needs to be on a 32k boundary within the first 4G */

 We silently assume the address is okay if nonzero */

 enable memory mapped ports, disable busmaster */

 At this point the needed PCI config is done */

 fifos are still not enabled */

 default PCM master */

 interrupt output off ! */

 must release after free_irq! */

 private data in the PCI devices list */

 B1 rx&tx */

 B2 rx&tx */

 if next event would be in the past ... */

 indicate the use of controller's timer */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * avm_fritz.c    low level stuff for AVM FRITZ!CARD PCI ISDN cards

 *                Thanks to AVM, Berlin for informations

 *

 * Author       Karsten Keil <keil@isdn4linux.de>

 *

 * Copyright 2009  by Karsten Keil <keil@isdn4linux.de>

 Fritz PCI v2.0 */

 data struct */

 hw lock */

 protect Cards */

 Interface functions */

 dummy */

 used for init */

 all bytes the same - no worry about endian */

		/* Here we lost an TX interrupt, so

		 * restart transmitting the whole frame on HDLC

		 * in transparent mode we send the next data

 shared  IRQ from other HW */

 shared  IRQ from other HW */

 direct TX */

 disable IRQ */

 RESET Receiver and Transmitter */

 Timeout 10ms */

 cq->channel: 0 disable, 1 B1 loop 2 B2 loop, 3 both */

 b-channel can be only open once */

/*

 * device control function

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * hfcmulti.c  low level driver for hfc-4s/hfc-8s/hfc-e1 based cards

 *

 * Author	Andreas Eversberg (jolly@eversberg.eu)

 * ported to mqueue mechanism:

 *		Peter Sprenger (sprengermoving-bytes.de)

 *

 * inspired by existing hfc-pci driver:

 * Copyright 1999  by Werner Cornelius (werner@isdn-development.de)

 * Copyright 2008  by Karsten Keil (kkeil@suse.de)

 * Copyright 2008  by Andreas Eversberg (jolly@eversberg.eu)

 *

 * Thanks to Cologne Chip AG for this great controller!

/*

 * module parameters:

 * type:

 *	By default (0), the card is automatically detected.

 *	Or use the following combinations:

 *	Bit 0-7   = 0x00001 = HFC-E1 (1 port)

 * or	Bit 0-7   = 0x00004 = HFC-4S (4 ports)

 * or	Bit 0-7   = 0x00008 = HFC-8S (8 ports)

 *	Bit 8     = 0x00100 = uLaw (instead of aLaw)

 *	Bit 9     = 0x00200 = Disable DTMF detect on all B-channels via hardware

 *	Bit 10    = spare

 *	Bit 11    = 0x00800 = Force PCM bus into slave mode. (otherwhise auto)

 * or   Bit 12    = 0x01000 = Force PCM bus into master mode. (otherwhise auto)

 *	Bit 13	  = spare

 *	Bit 14    = 0x04000 = Use external ram (128K)

 *	Bit 15    = 0x08000 = Use external ram (512K)

 *	Bit 16    = 0x10000 = Use 64 timeslots instead of 32

 * or	Bit 17    = 0x20000 = Use 128 timeslots instead of anything else

 *	Bit 18    = spare

 *	Bit 19    = 0x80000 = Send the Watchdog a Signal (Dual E1 with Watchdog)

 * (all other bits are reserved and shall be 0)

 *	example: 0x20204 one HFC-4S with dtmf detection and 128 timeslots on PCM

 *		 bus (PCM master)

 *

 * port: (optional or required for all ports on all installed cards)

 *	HFC-4S/HFC-8S only bits:

 *	Bit 0	  = 0x001 = Use master clock for this S/T interface

 *			    (ony once per chip).

 *	Bit 1     = 0x002 = transmitter line setup (non capacitive mode)

 *			    Don't use this unless you know what you are doing!

 *	Bit 2     = 0x004 = Disable E-channel. (No E-channel processing)

 *	example: 0x0001,0x0000,0x0000,0x0000 one HFC-4S with master clock

 *		 received from port 1

 *

 *	HFC-E1 only bits:

 *	Bit 0     = 0x0001 = interface: 0=copper, 1=optical

 *	Bit 1     = 0x0002 = reserved (later for 32 B-channels transparent mode)

 *	Bit 2     = 0x0004 = Report LOS

 *	Bit 3     = 0x0008 = Report AIS

 *	Bit 4     = 0x0010 = Report SLIP

 *	Bit 5     = 0x0020 = Report RDI

 *	Bit 8     = 0x0100 = Turn off CRC-4 Multiframe Mode, use double frame

 *			     mode instead.

 *	Bit 9	  = 0x0200 = Force get clock from interface, even in NT mode.

 * or	Bit 10	  = 0x0400 = Force put clock to interface, even in TE mode.

 *	Bit 11    = 0x0800 = Use direct RX clock for PCM sync rather than PLL.

 *			     (E1 only)

 *	Bit 12-13 = 0xX000 = elastic jitter buffer (1-3), Set both bits to 0

 *			     for default.

 * (all other bits are reserved and shall be 0)

 *

 * debug:

 *	NOTE: only one debug value must be given for all cards

 *	enable debugging (see hfc_multi.h for debug options)

 *

 * poll:

 *	NOTE: only one poll value must be given for all cards

 *	Give the number of samples for each fifo process.

 *	By default 128 is used. Decrease to reduce delay, increase to

 *	reduce cpu load. If unsure, don't mess with it!

 *	Valid is 8, 16, 32, 64, 128, 256.

 *

 * pcm:

 *	NOTE: only one pcm value must be given for every card.

 *	The PCM bus id tells the mISDNdsp module about the connected PCM bus.

 *	By default (0), the PCM bus id is 100 for the card that is PCM master.

 *	If multiple cards are PCM master (because they are not interconnected),

 *	each card with PCM master will have increasing PCM id.

 *	All PCM busses with the same ID are expected to be connected and have

 *	common time slots slots.

 *	Only one chip of the PCM bus must be master, the others slave.

 *	-1 means no support of PCM bus not even.

 *	Omit this value, if all cards are interconnected or none is connected.

 *	If unsure, don't give this parameter.

 *

 * dmask and bmask:

 *	NOTE: One dmask value must be given for every HFC-E1 card.

 *	If omitted, the E1 card has D-channel on time slot 16, which is default.

 *	dmask is a 32 bit mask. The bit must be set for an alternate time slot.

 *	If multiple bits are set, multiple virtual card fragments are created.

 *	For each bit set, a bmask value must be given. Each bit on the bmask

 *	value stands for a B-channel. The bmask may not overlap with dmask or

 *	with other bmask values for that card.

 *	Example: dmask=0x00020002 bmask=0x0000fffc,0xfffc0000

 *		This will create one fragment with D-channel on slot 1 with

 *		B-channels on slots 2..15, and a second fragment with D-channel

 *		on slot 17 with B-channels on slot 18..31. Slot 16 is unused.

 *	If bit 0 is set (dmask=0x00000001) the D-channel is on slot 0 and will

 *	not function.

 *	Example: dmask=0x00000001 bmask=0xfffffffe

 *		This will create a port with all 31 usable timeslots as

 *		B-channels.

 *	If no bits are set on bmask, no B-channel is created for that fragment.

 *	Example: dmask=0xfffffffe bmask=0,0,0,0.... (31 0-values for bmask)

 *		This will create 31 ports with one D-channel only.

 *	If you don't know how to use it, you don't need it!

 *

 * iomode:

 *	NOTE: only one mode value must be given for every card.

 *	-> See hfc_multi.h for HFC_IO_MODE_* values

 *	By default, the IO mode is pci memory IO (MEMIO).

 *	Some cards require specific IO mode, so it cannot be changed.

 *	It may be useful to set IO mode to register io (REGIO) to solve

 *	PCI bridge problems.

 *	If unsure, don't give this parameter.

 *

 * clockdelay_nt:

 *	NOTE: only one clockdelay_nt value must be given once for all cards.

 *	Give the value of the clock control register (A_ST_CLK_DLY)

 *	of the S/T interfaces in NT mode.

 *	This register is needed for the TBR3 certification, so don't change it.

 *

 * clockdelay_te:

 *	NOTE: only one clockdelay_te value must be given once

 *	Give the value of the clock control register (A_ST_CLK_DLY)

 *	of the S/T interfaces in TE mode.

 *	This register is needed for the TBR3 certification, so don't change it.

 *

 * clock:

 *	NOTE: only one clock value must be given once

 *	Selects interface with clock source for mISDN and applications.

 *	Set to card number starting with 1. Set to -1 to disable.

 *	By default, the first card is used as clock source.

 *

 * hwid:

 *	NOTE: only one hwid value must be given once

 *	Enable special embedded devices with XHFC controllers.

/*

 * debug register access (never use this, it will flood your system log)

 * #define HFC_REGISTER_DEBUG

/*

  #define IRQCOUNT_DEBUG

  #define IRQ_DEBUG

 global hfc list lock */

 if we have a master card (yet) */

 may not acquire other lock inside */

 default = 128 samples = 16ms */

 number of POLL_TIMER interrupts for G2 timeout (ca 1s) */

 CLKDEL in TE mode */

#define	CLKDEL_NT	0x6c	/* CLKDEL in NT mode

 DIP Switches for Beronet 1S/2S/4S cards */

 DIP Switches for Beronet 8S+ cards */

 DIP Switches for Beronet E1 cards */

/*

 * module stuff

 The hardware ID */

 HFC_IO_MODE_PCIMEM */

 HFC_IO_MODE_REGIO */

 write fifo data (REGIO) */

 write fifo data (PCIMEM) */

 read fifo data (REGIO) */

 read fifo data (PCIMEM) */

 was _io before */

 was _io before */

 slow down a PCI read access by 1 PCI clock cycle */

was _io before*/

 select local bridge port address by writing to CIP port */

 data = HFC_inb(c, cipv); * was _io before */

 restore R_CTRL for normal PCI read cycle speed */

 was _io before */

 select local bridge port address by writing to CIP port */

 define a 32 bit dword with 4 identical bytes for write sequence */

	/*

	 * write this 32 bit dword to the bridge data port

	 * this will initiate a write sequence of up to 4 writes to the same

	 * address on the local bus interface the number of write accesses

	 * is undefined but >=1 and depends on the next PCI transaction

	 * during write sequence on the local bus

 Do data pin read low byte */

 Do data pin read low byte */

 Setup GPIO's */

 GPIO out */

 GPIO dir */

 GPIO sel */

 Setup TDM path - sets fsync and tdm_clk as inputs */

 misc_con */

 Setup Echo length (256 taps) */

 Setup timeslots */

 Setup the tdm channel masks for all chips */

 Setup convergence rate */

vpm_out(wc, x, 0x20, (0x00 | 0x08 | 0x20 | 0x10)); */

 Initialize echo cans */

		/*

		 * ARM arch at least disallows a udelay of

		 * more than 2ms... it gives a fake "__bad_udelay"

		 * reference at link-time.

		 * long delays in kernel code are pretty sucky anyway

		 * for now work around it using 5 x 2ms instead of 1 x 10ms

 Put in bypass mode */

 Enable bypass */

 UNUSED */

/*

 * Interface to enable/disable the HW Echocan

 *

 * these functions are called within a spin_lock_irqsave on

 * the channel instance lock, so we are not disturbed by irqs

 *

 * we can later easily change the interface to make  other

 * things configurable, for now we configure the taps

 *

 FILLME */

/*

 * Speech Design resync feature

 * NOTE: This is called sometimes outside interrupt handler.

 * We must lock irqsave, so no other interrupt (other card) will occur!

 * Also multiple interrupts may nest, so must lock each access (lists, card)!

 must be locked inside other locks */

 select new master */

 Disable sync of all cards */

 get SYNC_I */

 Enable new sync master */

 switch to jatt PLL, if not disabled by RX_SYNC */

 switch to jatt */

				/* Use the crystal clock for the PCM

 switch quartz */

 This must be called AND hc must be locked irqsave!!! */

/*

 * free hardware resources used by driver

 soft reset also masks all interrupts */

 instead of 'wait' that may cause locking */

 release Speech Design card, if PLX was initialized */

 Termination off */

 Disconnect the PCM */

 Put the DSP in Reset */

 disable memory mapped ports / io ports */

 prevent resync */

/*

 * function called to reset the HFC chip. A complete software reset of chip

 * and fifos is done. All configuration of the chip is done.

 reset all registers */

 revision check */

 set s-ram size */

 Speech Design PLX bridge */

 The first and the last cards are terminating the PCM bus */

 hc is currently the last */

 Disconnect the PCM */

 Put the DSP in Reset */

		/*

		 * If we are the 3rd PLXSD card or higher, we must turn

		 * termination of last PLXSD card off.

 shift clock for DSP */

 shift clock for DSP */

 we only want the real Z2 read-pointer for revision > 0 */

 select pcm mode */

 soft reset */

 R_FIFO_THRES */,

 16 Bytes TX/RX */);

 Speech Design PLX bridge pcm and sync mode */

 Connect PCM */

 PCM setup */

 sync via SYNC_I / O */

 V_C2O_EN */

 sync from interface */

 set clock speed */

 R_CLK_CFG */, 0x40 
 B410P GPIO */

 check if R_F0_CNT counts (8 kHz frame count) */

 Timeout minimum 10ms */

 1 ms */

 it counts, so we keep the pcm mode */

 does not count */

 only one pcm master */

 retry with master clock */

 Timeout min. 10ms */

 1 ms */

 Release the DSP Reset */

 pcm id */

 SD has proprietary bridging */

 set up timer */

 set E1 state machine IRQ */

 set DTMF detection */

 conference engine */

 setting leds */

 HFC-E1 OEM */

 HFC-4S OEM */

 V_AUTO_SYNCI */

 set master clock */

 setting misc irq */

 RAM access test */

/*

 * control the watchdog

 printk("Sending Watchdog Kill %x\n",hc->wdbyte); */

/*

 * output leds

 HFC-E1 OEM */

		/* 2 red steady:       LOS

		 * 1 red steady:       L1 not active

		 * 2 green steady:     L1 active

		 * 1st green flashing: activity on TX

		 * 2nd green flashing: activity on RX

 leds are inverted */

 HFC-4S OEM */

		/* red steady:     PH_DEACTIVATE

		 * green steady:   PH_ACTIVATE

		 * green flashing: activity on TX

 led green */

 led off */

 led red */

 led off */

green*/

red*/

 HFC 1S/2S Beronet */

		/* red steady:     PH_DEACTIVATE

		 * green steady:   PH_ACTIVATE

		 * green flashing: activity on TX

 led green */

 led off */

 led red */

 led off */

 HFC 8S+ Beronet */

		/* off:      PH_DEACTIVATE

		 * steady:   PH_ACTIVATE

		 * flashing: activity on TX

 leds off */

 led on */

 led off */

			/* HFC_outb(hc, R_BRG_PCM_CFG, 1);

 was _io before */

/*

 * read dtmf coefficients

 only process enabled B-channels */

 read W(n-1) coefficient */

 decode float (see chip doc) */

 store coefficient */

 read W(n) coefficient */

 decode float (see chip doc) */

 store coefficient */

 restart DTMF processing */

/*

 * fill fifo as much as possible

 must be int for calculation */

 no data */

 reset fifo */

 repeat until F2 is equal */

		/*

		 * Old FIFO handling doesn't give us the current Z2 read

		 * pointer, so we cannot send the next frame before the fifo

		 * is empty. It makes no difference except for a slightly

		 * lower performance.

 one frame only for ST D-channels, to allow resending */

 F-counter full condition */

 repeat unti Z2 is equal */

 keep not too full, so pointers will not overrun */

 fill transparent data only to maxinum transparent load (minus 4) */

 no space of 4 bytes */

 if no data */

 empty */

 if done with FIFO audio data during PCM connection */

 connect slot */

 Enable FIFO, no interrupt */

 Enable FIFO, no interrupt */

 no data */

 "fill fifo if empty" feature */

 fill buffer, to prevent future underrun */

 if audio data and connected slot */

 disconnect slot */

 Enable FIFO, no interrupt */

 Enable FIFO, no interrupt */

 show activity */

 fill fifo to what we have left */

 Have to prep the audio data */

 if not all data has been written */

 NOTE: fifo is started by the calling function */

 if all data has been written, terminate frame */

 increment f-counter */

 check for next frame */

	/*

	 * now we have no more data, so in case of transparent,

	 * we set the last byte in fifo to 'silence' in case we will get

	 * no more data at all. this prevents sending an undefined value.

 NOTE: only called if E1 card is in active state */

 = 0, to make GCC happy */

 = 0, to make GCC happy */

	/* on first AND before getting next valid frame, R_FIFO must be written

 ignore if rx is off BUT change fifo (above) to start pending TX */

 not exact but fair enough */

 repeat until F1 is equal */

 repeat until Z1 is equal */

 complete hdlc frame */

 if buffer is empty */

 Dchannel */

 show activity */

 empty fifo with what we have */

 HDLC */

 increment Z2,F2-counter */

 check size */

 there is at least one complete frame, check crc */

 there is an incomplete frame */

 transparent */

 only bch is transparent */

/*

 * Interrupt handler

 manager address */

 process queued resync jobs */

 lock, so e1_resync gets not changed */

 disable JATT, if RX_SYNC is set */

 set jatt to quartz */

 switch to JATT, in case it is not already */

 fifo is started when switching to rx-fifo */

 LOS */

 AIS */

 SLIP */

 RDI */

 state machine */

 undocumented: delay after R_ST_SEL */

 undocumented: status changes during read */

 repeat */

 Speech Design TE-sync indication */

 start fifo */

 start fifo */

 irq is not for us */

 LOST IRQ */

 clear irq! */

 misc IRQ */

 ignore disabled irqs */

 state machine */

 undocumented: status changes during read */

 repeat */

 broadcast state change to all fragments */

 FIFO IRQ */

/*

 * timer callback for D-chan busy resolution. Currently no function

/*

 * activate/deactivate hardware for selected channels and mode

 *

 * configure B-channel with the given protocol

 * ch eqals to the HFC-channel (0-31)

 * ch is the number of channel (0-4,4-7,8-11,12-15,16-19,20-23,24-27,28-31

 * for S/T, 1-31 for E1)

 * the hdlc interrupts will be set/unset

 remove from slot */

 remove from slot */

 FIFO->ST */

 disable pcm slot */

 set pcm slot */

 FIFO->ST */

 PCM->ST */

 put on slot */

 loop */

 disable pcm slot */

 ST->FIFO */

 set pcm slot */

 ST->FIFO */

 ST->(FIFO,PCM) */

 put on slot */

 reversed */

 loop */

 disable TX fifo */

 disable RX fifo */

 undocumented: delay after R_ST_SEL */

 B-channel */

 rx path */

 S/T -> PCM */

 PCM -> FIFO */

 tx path */

 PCM -> S/T */

 FIFO -> PCM */

 tx silence */

 enable TX fifo */

 Enable FIFO, no interrupt */

 tx silence */

 enable RX fifo */

 Enable FIFO, no interrupt*/

 undocumented: delay after R_ST_SEL */

 B-channel */

 D-channel */

 enable TX fifo */

 E1 or B-channel */

 D-Channel without HDLC fill flags */

 enable RX fifo */

 full 8 bits */

 2 bits dchannel */

 undocumented: delay after R_ST_SEL */

/*

 * connect/disconnect PCM

 disable PCM */

 enable pcm */

/*

 * set/disable conference

/*

 * set/disable sample loop

 NOTE: this function is experimental and therefore disabled */

/*

 * Layer 1 callback function

 start activation */

 undocumented: delay after R_ST_SEL */

 F3 */

 wait at least 5,21us */

 activate */

 start deactivation */

 undocumented: delay after R_ST_SEL */

 deactivate */

 undocumented: delay after R_ST_SEL */

 activate */

 wait at least 5,21us */

 activate */

/*

 * Layer2 -> Layer 1 Transfer

 direct TX */

 skb can be freed */

 start fifo */

 start activation */

 undocumented: delay after R_ST_SEL */

 G1 */

 wait at least 5,21us */

 activate */

 start deactivation */

 undocumented: delay after R_ST_SEL */

 deactivate */

 direct TX */

 start fifo */

 activate B-channel if not already activated */

 start decoder */

 set sample loop */

 set silence */

 locked there */

/*

 * bchannel control function

 turn off / on rx stream */

 reset fifo on rx on */

 fill features structure */

 create confirm */

 connect to pcm timeslot (0..N) */

 release interface from pcm timeslot */

 join conference (0..7) */

 split conference */

 locked there */

/*

 * handle D-channel events

 *

 * handle state change event

 reset fifos on e1 activation */

 undocumented: delay after R_ST_SEL */

 G4 */

 wait at least 5,21us */

 one extra count for the next event */

 undocumented: delay after R_ST_SEL */

 allow G2 -> G3 transition */

/*

 * called for card mode init message

 E1 */

 skip unused chan */

 E1, port 0 */

 2 ms */

 512 ms */

 G0 */

 F0 */

 SLAVE (clock master) */

 MASTER (clock slave) */

 MASTER (clock master) */

 undoc register */

 state machine setup */

 wait at least 5,21us */

 ST */

 select interface */

 undocumented: delay after R_ST_SEL */

 clock delay */

 G1 */

 clock delay */

 F2 */

 V_ST_PU_CTRL */;

 A_ST_CTRL3 */,

 V_ST_PULSE */);

 line setup */

 disable E-channel */

 enable B-channel receive */

 state machine setup */

 wait at least 5,21us */

 state machine interrupts */

 unset sync on port */

 b-channel can be only open once */

/*

 * device control function

 init the watchdog */

 set the watchdog timer */

 V_WD_EN */;

 init the watchdog register and reset the counter */

 enable the watchdog output for Speech-Design */

 reset the watchdog counter */

 locked there */

 locked there */

/*

 * initialize the card

/*

 * start timer irq, wait some time and check if we have interrupts.

 * if not, reset chip and try again.

 set interrupts but leave global interrupt disabled */

 enable PCI & LINT1 irq */

	/*

	 * Finally enable IRQ output

	 * this is only allowed, if an IRQ routine is already

	 * established for this HFC, so don't do that earlier

 printk(KERN_DEBUG "no master irq set!!!\n"); */

 Timeout 100ms */

 turn IRQ off until chip is completely initialized */

disable IRQs*/

/*

 * find pci device and set it up

 set memory access methods */

 use mode from card config */

 required */

 MEMBASE 1 is PLX PCI Bridge */

 MEMBASE 1 is PLX PCI Bridge */

 At this point the needed PCI config is done */

 fifos are still not enabled */

/*

 * remove port

 E1 */

 remove sync */

 free channels */

 skip unused chan */

 remove sync */

 free channels */

 unregister clock source */

 disable and free irq */

 disable D-channels & B-channels */

 dimm leds */

 release hardware */

 set optical line type */

 set LOS report */

 set AIS report */

 set SLIP report */

 set RDI report */

 set CRC-4 Mode */

 set forced clock */

 set JATT PLL */

 set elastic jitter buffer */

 default */

 skip unused channel */

 set master clock */

 set transmitter line to non capacitive */

 disable E-channel */

 dip settings, port mode Jumpers */

 allocate card+fifo structure */

 fragment card */

 default card layout */

 set chip specific features */

 ulaw silence */

 alaw silence */

 setup pci, hc->slots may change due to PLXSD */

 create channels */

 release already registered ports */

 for each S0 port */

 for each E1 port */

 disp switches */

		/*

		 * Get DIP setting for beroNet 1S/2S/4S cards

		 * DIP Setting: (collect GPIO 13/14/15 (R_GPIO_IN1) +

		 * GPI 19/23 (R_GPI_IN2))

 Port mode (TE/NT) jumpers */

		/*

		 * Get DIP Setting for beroNet 8S0+ cards

		 * Enable PCI auxbridge function

 prepare access to auxport */

		/*

		 * some dummy reads are required to

		 * read valid DIP switch data

 disable PCI auxbridge function */

		/*

		 * get DIP Setting for beroNet E1 cards

		 * DIP Setting: collect GPI 4/5/6/7 (R_GPI_IN0)

 add to list */

 use as clock source */

 initialize hardware */

 start IRQ and return */

0*/	{VENDOR_BN, "HFC-1S Card (mini PCI)", 4, 1, 1, 3, 0, DIP_4S, 0, 0},

1*/	{VENDOR_BN, "HFC-2S Card", 4, 2, 1, 3, 0, DIP_4S, 0, 0},

2*/	{VENDOR_BN, "HFC-2S Card (mini PCI)", 4, 2, 1, 3, 0, DIP_4S, 0, 0},

3*/	{VENDOR_BN, "HFC-4S Card", 4, 4, 1, 2, 0, DIP_4S, 0, 0},

4*/	{VENDOR_BN, "HFC-4S Card (mini PCI)", 4, 4, 1, 2, 0, 0, 0, 0},

5*/	{VENDOR_CCD, "HFC-4S Eval (old)", 4, 4, 0, 0, 0, 0, 0, 0},

6*/	{VENDOR_CCD, "HFC-4S IOB4ST", 4, 4, 1, 2, 0, DIP_4S, 0, 0},

7*/	{VENDOR_CCD, "HFC-4S", 4, 4, 1, 2, 0, 0, 0, 0},

8*/	{VENDOR_DIG, "HFC-4S Card", 4, 4, 0, 2, 0, 0, HFC_IO_MODE_REGIO, 0},

9*/	{VENDOR_CCD, "HFC-4S Swyx 4xS0 SX2 QuadBri", 4, 4, 1, 2, 0, 0, 0, 0},

10*/	{VENDOR_JH, "HFC-4S (junghanns 2.0)", 4, 4, 1, 2, 0, 0, 0, 0},

11*/	{VENDOR_PRIM, "HFC-2S Primux Card", 4, 2, 0, 0, 0, 0, 0, 0},

12*/	{VENDOR_BN, "HFC-8S Card", 8, 8, 1, 0, 0, 0, 0, 0},

13*/	{VENDOR_BN, "HFC-8S Card (+)", 8, 8, 1, 8, 0, DIP_8S,

14*/	{VENDOR_CCD, "HFC-8S Eval (old)", 8, 8, 0, 0, 0, 0, 0, 0},

15*/	{VENDOR_CCD, "HFC-8S IOB4ST Recording", 8, 8, 1, 0, 0, 0, 0, 0},

16*/	{VENDOR_CCD, "HFC-8S IOB8ST", 8, 8, 1, 0, 0, 0, 0, 0},

17*/	{VENDOR_CCD, "HFC-8S", 8, 8, 1, 0, 0, 0, 0, 0},

18*/	{VENDOR_CCD, "HFC-8S", 8, 8, 1, 0, 0, 0, 0, 0},

19*/	{VENDOR_BN, "HFC-E1 Card", 1, 1, 0, 1, 0, DIP_E1, 0, 0},

20*/	{VENDOR_BN, "HFC-E1 Card (mini PCI)", 1, 1, 0, 1, 0, 0, 0, 0},

21*/	{VENDOR_BN, "HFC-E1+ Card (Dual)", 1, 1, 0, 1, 0, DIP_E1, 0, 0},

22*/	{VENDOR_BN, "HFC-E1 Card (Dual)", 1, 1, 0, 1, 0, DIP_E1, 0, 0},

23*/	{VENDOR_CCD, "HFC-E1 Eval (old)", 1, 1, 0, 0, 0, 0, 0, 0},

24*/	{VENDOR_CCD, "HFC-E1 IOB1E1", 1, 1, 0, 1, 0, 0, 0, 0},

25*/	{VENDOR_CCD, "HFC-E1", 1, 1, 0, 1, 0, 0, 0, 0},

26*/	{VENDOR_CCD, "HFC-4S Speech Design", 4, 4, 0, 0, 0, 0,

27*/	{VENDOR_CCD, "HFC-E1 Speech Design", 1, 1, 0, 0, 0, 0,

28*/	{VENDOR_CCD, "HFC-4S OpenVox", 4, 4, 1, 0, 0, 0, 0, 0},

29*/	{VENDOR_CCD, "HFC-2S OpenVox", 4, 2, 1, 0, 0, 0, 0, 0},

30*/	{VENDOR_CCD, "HFC-8S OpenVox", 8, 8, 1, 0, 0, 0, 0, 0},

31*/	{VENDOR_CCD, "XHFC-4S Speech Design", 5, 4, 0, 0, 0, 0,

32*/	{VENDOR_JH, "HFC-8S (junghanns)", 8, 8, 1, 0, 0, 0, 0, 0},

33*/	{VENDOR_BN, "HFC-2S Beronet Card PCIe", 4, 2, 1, 3, 0, DIP_4S, 0, 0},

34*/	{VENDOR_BN, "HFC-4S Beronet Card PCIe", 4, 4, 1, 2, 0, DIP_4S, 0, 0},

 Cards with HFC-4S Chip */

 BN1S mini PCI */

 BN2S */

 BN2S mini PCI */

 BN4S */

 BN4S mini PCI */

 Old Eval */

 IOB4ST */

 4S */

 4S Swyx */

 Primux */

 OpenVox 4 */

 OpenVox 2 */

 BN2S PCIe */

 BN4S PCIe */

 Cards with HFC-8S Chip */

 BN8S */

 BN8S+ */

 old Eval */

 IOB8ST Recording */

 IOB8ST  */

 IOB8ST  */

 8S */

 OpenVox 8 */

 Junganns 8S  */

 Cards with HFC-E1 Chip */

 BNE1 */

 BNE1 mini PCI */

 BNE1 + (Dual) */

 BNE1 (Dual) */

 Old Eval */

 IOB1E1 */

 E1 */

 PLX PCI Bridge */

 PLX PCI Bridge */

 Junghanns E1 */

 get rid of all devices of this driver */

	/* Register the embedded devices.

 Register the PCI cards */

 SPDX-License-Identifier: GPL-2.0-or-later

/* hfcsusb.c

 * mISDN driver for Colognechip HFC-S USB chip

 *

 * Copyright 2001 by Peter Sprenger (sprenger@moving-bytes.de)

 * Copyright 2008 by Martin Bachem (info@bachem-it.com)

 *

 * module params

 *   debug=<n>, default=0, with n=0xHHHHGGGG

 *      H - l1 driver flags described in hfcsusb.h

 *      G - common mISDN debug flags described at mISDNhw.h

 *

 *   poll=<n>, default 128

 *     n : burst size of PH_DATA_IND at transparent rx data

 *

 * Revision: 0.3.3 (socket), 2008-11-05

 some function prototypes */

 start next background transfer for control channel */

/*

 * queue a control transfer request to write HFC-S USB

 * chip register using CTRL resuest queue

 control completion routine handling background control cmds */

 decrement actual count */

 pointer wrap */

 start next transfer */

 handle LED bits   */

 handle LED requests  */

/*

 * Layer2 -> Layer 1 Bchannel data

/*

 * send full D/B channel status information

 * as MPH_INFORMATION_IND

/*

 * Layer2 -> Layer 1 Dchannel data

/*

 * Layer 1 callback function

 E-Channel logging */

 b-channel can be only open once */

/*

 * device control function

/*

 * S0 TE state change event handler

/*

 * S0 NT state change event handler

 allow G2 -> G3 transition */

/*

 * disable/enable BChannel for desired protocoll

 setup val for CON_HDLC */

 enable FIFO */

 used for init */

 already in idle state */

 force sending sending INFO1 */

 start l1 activation */

/*

 * Layer 1 B-channel hardware access

 collect data from incoming interrupt or isochron USB data */

 D/E-Channel SKB range check */

 we have a complete hdlc packet */

 remove CRC & status */

 deliver transparent data to layer2 */

 receive completion routine for all ISO tx fifos   */

	/*

	 * ISO transfer only partially completed,

	 * look at individual frame status for details

 clear status, so go on with ISO transfers */

 USB data log for every D ISO in */

					/*

					 * save fifo fill-level threshold bits

					 * to use them later in TX ISO URB

					 * completions

 signal S0 layer1 state change */

 receive completion routine for all interrupt rx fifos */

 cancel automatic rescheduling */

 USB data log for every D INT in */

 the threshold mask is in the 2nd status byte */

 signal S0 layer1 state change */

 if we have more than the 2 status bytes -> collect data */

 transmit completion routine for all ISO tx fifos */

	/*

	 * ISO transfer only partially completed,

	 * look at individual frame status for details

 clear status, so go on with ISO transfers */

 is FifoFull-threshold set for our channel? */

 predict dataflow to avoid fifo overflow */

 analyze tx success of previous ISO packets */

 Generate next ISO Packets */

 > not complete */

 how much bit do we put on the line? */

 signal frame completion */

						/* add 2 byte flags and 16bit

 copy tx data to iso-urb buffer */

 USB data log for every D ISO out */

 we lower data margin every msec */

		/*

		 * abuse DChannel tx iso completion to trigger NT mode state

		 * changes tx_iso_complete is assumed to be called every

		 * fifo->intervall (ms)

/*

 * allocs urbs and start isoc transfer with two pending urbs to avoid

 * gaps in the transfer chain

 allocate Memory for Iso out Urbs */

 Init the first iso */

 start the interrupt transfer for the given fifo */

 do Chip reset */

 aux = output, reset off */

 set USB_SIZE to match the wMaxPacketSize for INT or BULK transfers */

 set USB_SIZE_I to match the the wMaxPacketSize for ISO transfers */

 enable PCM/GCI master mode */

 set default values */

 enable master mode */

 init the fifos */

 select the desired fifo */

 set 2 bit for D- & E-channel */

 enable all fifos */

 reset the fifo */

 disable both B receivers */

 start USB data pipes dependand on device's endpoint configuration */

 quick check if endpoint already running */

 start rx endpoints using USB INT IN method */

 start rx endpoints using USB ISO IN method */

 start tx endpoints using USB ISO OUT method */

 stop USB data pipes dependand on device's endpoint configuration */

 quick check if endpoint currently running */

 rx endpoints using USB INT IN method */

 rx endpoints using USB ISO IN method */

 tx endpoints using USB ISO OUT method */

 Hardware Initialization */

 check the chip id */

 first set the needed config, interface and alternate */

 init the background machinery for control requests */

	/*

	 * stop all endpoints gracefully

	 * TODO: mISDN_core should generate CLOSE_CHANNEL

	 *       signals after calling mISDN_unregister_device()

/*

 * Layer 1 B-channel hardware access

 enable E-Channel logging */

 if vendor and product ID is OK, start probing alternate settings */

 default settings */

 check for all endpoints in this alternate setting */

 get endpoint base */

 (alt_idx < intf->num_altsetting) */

 not found a valid USB Ta Endpoint config */

 got no mem */

 get endpoint base */

 init Endpoints */

 save device */

 save used interface */

 and alternate config */

 control size */

 store used config */

 store found vendor */

 create the control pipes needed for register access */

 function called when an active device is removed */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * w6692.c     mISDN driver for Winbond w6692 based cards

 *

 * Author      Karsten Keil <kkeil@suse.de>

 *             based on the w6692 I4L driver from Petr Novak <petr.novak@i.cz>

 *

 * Copyright 2009  by Karsten Keil <keil@isdn4linux.de>

 private data in the PCI devices list */

 feature mask - bit set per card nr */

 hw lock */

 protect Cards */

  LED ON */

  LED OFF */

 Restart frame */

 should not happen */

 Transmit underrun/collision */

 RDOV */

 TIN2 - never */

 MOC - not supported */

 ISC - Level1 change */

 only if it is not handled yet */

 resend */

 handle XDOW only once */

 resend - no XRST needed */

 possible a shared  IRQ reqest */

 XINT0/1 - never */

 End IRQ Handler */

 D-Channel Busy */

 discard frame; reset transceiver */

 Transmitter reset */

 enable all IRQ but extern */

 Reset D-chan receiver and transmitter */

 Reset B-chan receiver and transmitter */

 enable peripheral */

		/* seems that USR implemented some power control features

		 * Pin 79 is connected to the oscilator circuit so we

		 * have to handle it here

 all sw off */

  POWER UP/ LED OFF / ALAW */

 LED OFF */

 Timeout 10ms */

 direct TX */

 b-channel can be only open once */

 direct TX */

 skb can be freed */

 E-Channel not supported */

  LED OFF */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * NETJet mISDN driver

 *

 * Author       Karsten Keil <keil@isdn4linux.de>

 *

 * Copyright 2009  by Karsten Keil <keil@isdn4linux.de>

 lock HW */

 protect Cards */

 only stop dma and interrupts if both channels NULL */

 Reset On */

 now edge triggered for TJ320 GE 13/07/00 */

 see comment in IRQ function */

 TJ320 */

 Reset Off and status read clear */

 Reset Off and status read clear */

 configure AUX pins (all output except ISAC IRQ pin) */

 only transparent use the count here, HDLC overun is detected later */

 valid frame received */

 Note receive is via the WRITE DMA channel */

 sync with current DMA address at start or after exception */

	/* currently we simple sync to the next complete free area

	 * this hast the advantage that we have always maximum time to

	 * handle TX irq

 Note send is via the READ DMA channel */

 shared IRQ */

 write to clear */

 set bits in sval to indicate which page is free */

 the 2nd write area is free */

 the 1st write area is free */

 the 2nd read area is free */

 the 1st read area is free */

 test if we have a DMA interrupt */

 got a write dma int */

 got a read dma int */

 direct TX */

 cq->channel: 0 disable, 1 B1 loop 2 B2 loop, 3 both */

 b-channel can be only open once */

/*

 * device control function

	/* the TJ300 and TJ320 must be detected, the IRQ handling is different

	 * unfortunately the chips use the same device ID, but the TJ320 has

	 * the bit20 in status PCI cfg register set

/* We cannot select cards with PCI_SUB... IDs, since here are cards with

 * SUB IDs set to PCI_ANY_ID, so we need to match all and reject

 SPDX-License-Identifier: GPL-2.0-only

/*

 * mISDNinfineon.c

 *		Support for cards based on following Infineon ISDN chipsets

 *		- ISAC + HSCX

 *		- IPAC and IPAC-X

 *		- ISAC-SX + HSCX

 *

 * Supported cards:

 *		- Dialogic Diva 2.0

 *		- Dialogic Diva 2.0U

 *		- Dialogic Diva 2.01

 *		- Dialogic Diva 2.02

 *		- Sedlbauer Speedwin

 *		- HST Saphir3

 *		- Develo (former ELSA) Microlink PCI (Quickstep 1000)

 *		- Develo (former ELSA) Quickstep 3000

 *		- Berkom Scitel BRIX Quadro

 *		- Dr.Neuhaus (Sagem) Niccy

 *

 * Author       Karsten Keil <keil@isdn4linux.de>

 *

 * Copyright 2009  by Karsten Keil <keil@isdn4linux.de>

 HW access lock */

 slave cards */

 PCI interface specific defines */

 Diva 2.0/2.0U */

 DIVA_PCI_CTRL bits */

 Diva 2.01/2.02 */

 Siemens PITA */

 TIGER 100 Registers */

 Tiger AUX BITs */

 1 and 5 are inputs */

 ELSA (now Develo) PCI cards */

 Dr Neuhaus/Sagem Niccy */

 Scitel PLX */

 Gazel */

 Gazel PLX */

 protect Cards */

 Interface functions */

 for us or shared ? */

 shared */

 for us or shared ? */

 shared */

 ACK PITA INT0 */

 for us or shared ? */

 shared */

 shared */

 for us or shared ? */

 shared */

 shared */

 Workaround PCI9060 */

 IOM off */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * isdnhdlc.c  --  General purpose ISDN HDLC decoder.

 *

 * Copyright (C)

 *	2009	Karsten Keil		<keil@b1-systems.de>

 *	2002	Wolfgang Mües		<wolfgang@iksw-muees.de>

 *	2001	Frode Isaksen		<fisaksen@bewan.com>

 *      2001	Kai Germaschewski	<kai.germaschewski@gmx.de>

-------------------------------------------------------------------*/

-------------------------------------------------------------------*/

 too small - framing error */

 crc error */

 remove CRC */

 good frame */

/*

  isdnhdlc_decode - decodes HDLC frames from a transparent bit stream.



  The source buffer is scanned for valid HDLC frames looking for

  flags (01111110) to indicate the start of a frame. If the start of

  the frame is found, the bit stuffing is removed (0 after 5 1's).

  When a new flag is found, the complete frame has been received

  and the CRC is checked.

  If a valid frame is found, the function returns the frame length

  excluding the CRC with the bit HDLC_END_OF_FRAME set.

  If the beginning of a valid frame is found, the function returns

  the length.

  If a framing error is found (too many 1s and not a flag) the function

  returns the length with the bit HDLC_FRAMING_ERROR set.

  If a CRC error is found the function returns the length with the

  bit HDLC_CRC_ERROR set.

  If the frame length exceeds the destination buffer size, the function

  returns the length with the bit HDLC_LENGTH_ERROR set.



  src - source buffer

  slen - source buffer length

  count - number of bytes removed (decoded) from the source buffer

  dst _ destination buffer

  dsize - destination buffer size

  returns - number of decoded bytes in the destination buffer and status

  flag.

 the code is for bitreverse streams */

 bad frame */

 good byte received */

 frame too long */

/*

  isdnhdlc_encode - encodes HDLC frames to a transparent bit stream.



  The bit stream starts with a beginning flag (01111110). After

  that each byte is added to the bit stream with bit stuffing added

  (0 after 5 1's).

  When the last byte has been removed from the source buffer, the

  CRC (2 bytes is added) and the frame terminates with the ending flag.

  For the dchannel, the idle character (all 1's) is also added at the end.

  If this function is called with empty source buffer (slen=0), flags or

  idle character will be generated.



  src - source buffer

  slen - source buffer length

  count - number of bytes removed (encoded) from source buffer

  dst _ destination buffer

  dsize - destination buffer size

  returns - number of encoded bytes in the destination buffer

 special handling for one byte frames */

 closing sequence, CRC + flag(s) */

 the code is for bitreverse streams */

 Finished this frame, send flags */

 the code is for bitreverse streams */

 the code is for bitreverse streams */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * mISDNisar.c   ISAR (Siemens PSB 7110) specific functions

 *

 * Author Karsten Keil (keil@isdn4linux.de)

 *

 * Copyright 2009  by Karsten Keil <keil@isdn4linux.de>

/* define this to enable static debug messages, if you kernel supports

 * dynamic debugging, you should use debugfs for this

 #define DEBUG */

/*

 * send msg to ISAR mailbox

 * if msg is NULL use isar->buf

/*

 * receive message from ISAR mailbox

 * if msg is NULL use isar->buf

/*

 * poll answer message from ISAR mailbox

 * should be used only with ISAR IRQs disabled before DSP was started

 *

 disable ISAR IRQ */

 disable ISAR IRQ */

 the ISAR is big endian */

 10ms delay */

 NORMAL mode entered */

 Enable IRQs of ISAR */

 max 1s */

 10ms delay */

 max 100 ms */

 max 300 ms */

 disable ISAR IRQ */

 last 2 are the FCS */

 ABORT */

 set_skb_flag(skb, DF_NOMOREDATA); */

 PCTRL_CMD_FRH */

 last 2 are the FCS */

 ABORT */

 use the card buffer */

 last frame */

 1s (200 ms) Flags before data */

 ignore in STFAX_SILDET */

 TOA 5 db */

 REL -46 dbm */

 6 db */

 6 db */

 dummy slot */

 Here we are selecting the best datapath for requested protocol */

 New Setup */

 init */

 no init for dpath 0 */

 best is datapath 2 */

 only datapath 1 */

 Clear resources */

 Dpath 1, 2 */

 Buffer Config */

 direct TX */

 b-channel can be only open once */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015-2016, Linaro Limited

 Refuse sharing shared memory provided by application */

 teedev has been detached from driver */

/**

 * tee_shm_alloc_kernel_buf() - Allocate shared memory for kernel buffer

 * @ctx:	Context that allocates the shared memory

 * @size:	Requested size of shared memory

 *

 * The returned memory registered in secure world and is suitable to be

 * passed as a memory buffer in parameter argument to

 * tee_client_invoke_func(). The memory allocated is later freed with a

 * call to tee_shm_free().

 *

 * @returns a pointer to 'struct tee_shm'

/**

 * tee_shm_get_fd() - Increase reference count and return file descriptor

 * @shm:	Shared memory handle

 * @returns user space file descriptor to shared memory

/**

 * tee_shm_free() - Free shared memory

 * @shm:	Handle to shared memory to free

	/*

	 * dma_buf_put() decreases the dmabuf reference counter and will

	 * call tee_shm_release() when the last reference is gone.

	 *

	 * In the case of driver private memory we call tee_shm_release

	 * directly instead as it doesn't have a reference counter.

/**

 * tee_shm_va2pa() - Get physical address of a virtual address

 * @shm:	Shared memory handle

 * @va:		Virtual address to tranlsate

 * @pa:		Returned physical address

 * @returns 0 on success and < 0 on failure

 Check that we're in the range of the shm */

/**

 * tee_shm_pa2va() - Get virtual address of a physical address

 * @shm:	Shared memory handle

 * @pa:		Physical address to tranlsate

 * @va:		Returned virtual address

 * @returns 0 on success and < 0 on failure

 Check that we're in the range of the shm */

/**

 * tee_shm_get_va() - Get virtual address of a shared memory plus an offset

 * @shm:	Shared memory handle

 * @offs:	Offset from start of this shared memory

 * @returns virtual address of the shared memory + offs if offs is within

 *	the bounds of this shared memory, else an ERR_PTR

/**

 * tee_shm_get_pa() - Get physical address of a shared memory plus an offset

 * @shm:	Shared memory handle

 * @offs:	Offset from start of this shared memory

 * @pa:		Physical address to return

 * @returns 0 if offs is within the bounds of this shared memory, else an

 *	error code.

/**

 * tee_shm_get_from_id() - Find shared memory object and increase reference

 * count

 * @ctx:	Context owning the shared memory

 * @id:		Id of shared memory object

 * @returns a pointer to 'struct tee_shm' on success or an ERR_PTR on failure

/**

 * tee_shm_put() - Decrease reference count on a shared memory handle

 * @shm:	Shared memory handle

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015, Linaro Limited

/**

 * tee_shm_pool_alloc_res_mem() - Create a shared memory pool from reserved

 * memory range

 * @priv_info:	Information for driver private shared memory pool

 * @dmabuf_info: Information for dma-buf shared memory pool

 *

 * Start and end of pools will must be page aligned.

 *

 * Allocation with the flag TEE_SHM_DMA_BUF set will use the range supplied

 * in @dmabuf, others will use the range provided by @priv.

 *

 * @returns pointer to a 'struct tee_shm_pool' or an ERR_PTR on failure.

	/*

	 * Create the pool for driver private shared memory

 8 byte aligned */);

	/*

	 * Create the pool for dma_buf shared memory

 Start and end must be page aligned */

/**

 * tee_shm_pool_free() - Free a shared memory pool

 * @pool:	The shared memory pool to free

 *

 * There must be no remaining shared memory allocated from this pool when

 * this function is called.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015-2016, Linaro Limited

/*

 * TEE Client UUID name space identifier (UUIDv4)

 *

 * Value here is random UUID that is allocated as name space identifier for

 * forming Client UUID's for TEE environment using UUIDv5 scheme.

/*

 * Unprivileged devices in the lower half range and privileged devices in

 * the upper half range.

	/*

	 * Default user-space behaviour is to wait for tee-supplicant

	 * if not present for any requests in this context.

/**

 * uuid_v5() - Calculate UUIDv5

 * @uuid: Resulting UUID

 * @ns: Name space ID for UUIDv5 function

 * @name: Name for UUIDv5 function

 * @size: Size of name

 *

 * UUIDv5 is specific in RFC 4122.

 *

 * This implements section (for SHA-1):

 * 4.3.  Algorithm for Creating a Name-Based UUID

 Tag for version 5 */

 Nil UUID to be passed to TEE environment */

	/*

	 * In Linux environment client UUID is based on UUIDv5.

	 *

	 * Determine client UUID with following semantics for 'name':

	 *

	 * For TEEC_LOGIN_USER:

	 * uid=<uid>

	 *

	 * For TEEC_LOGIN_GROUP:

	 * gid=<gid>

	 *

 Currently no input flags are supported */

	/*

	 * When user space closes the file descriptor the shared memory

	 * should be freed or if tee_shm_get_fd() failed then it will

	 * be freed immediately.

 Currently no input flags are supported */

	/*

	 * When user space closes the file descriptor the shared memory

	 * should be freed or if tee_shm_get_fd() failed then it will

	 * be freed immediately.

 All unused attribute bits has to be zero */

			/*

			 * If a NULL pointer is passed to a TA in the TEE,

			 * the ip.c IOCTL parameters is set to TEE_MEMREF_NULL

			 * indicating a NULL memory reference.

				/*

				 * If we fail to get a pointer to a shared

				 * memory object (and increase the ref count)

				 * from an identifier we return an error. All

				 * pointers that has been added in params have

				 * an increased ref count. It's the callers

				 * responibility to do tee_shm_put() on all

				 * resolved pointers.

				/*

				 * Ensure offset + size does not overflow

				 * offset and does not overflow the size of

				 * the referred shared memory object.

 Pass NULL pointer to OP-TEE */

 Unknown attribute */

	/*

	 * If we've succeeded to open the session but failed to communicate

	 * it back to user space, close the session again to avoid leakage.

 Decrease ref count for all valid shared memory pointers */

 Decrease ref count for all valid shared memory pointers */

 invalid shm id */

 All unused attribute bits has to be zero */

 Only out and in/out values can be updated */

			/*

			 * Only the size of the memref can be updated.

			 * Since we don't have access to the original

			 * parameters here, only store the supplied size.

			 * The driver will copy the updated size into the

			 * original parameters.

 Not valid for this driver */

/**

 * tee_device_alloc() - Allocate a new struct tee_device instance

 * @teedesc:	Descriptor for this driver

 * @dev:	Parent device for this device

 * @pool:	Shared memory pool, NULL if not used

 * @driver_data: Private driver data for this device

 *

 * Allocates a new struct tee_device instance. The device is

 * removed by tee_device_unregister().

 *

 * @returns a pointer to a 'struct tee_device' or an ERR_PTR on failure

 1 as tee_device_unregister() does one final tee_device_put() */

/**

 * tee_device_register() - Registers a TEE device

 * @teedev:	Device to register

 *

 * tee_device_unregister() need to be called to remove the @teedev if

 * this function fails.

 *

 * @returns < 0 on failure

 Shouldn't put in this state */

/**

 * tee_device_unregister() - Removes a TEE device

 * @teedev:	Device to unregister

 *

 * This function should be called to remove the @teedev even if

 * tee_device_register() hasn't been called yet. Does nothing if

 * @teedev is NULL.

	/*

	 * No need to take a mutex any longer now since teedev->desc was

	 * set to NULL before teedev->c_no_users was completed.

/**

 * tee_get_drvdata() - Return driver_data pointer

 * @teedev:	Device containing the driver_data pointer

 * @returns the driver_data pointer supplied to tee_register().

	/*

	 * Default behaviour for in kernel client is to not wait for

	 * tee-supplicant if not present for any requests in this context.

	 * Also this flag could be configured again before call to

	 * tee_client_open_session() if any in kernel client requires

	 * different behaviour.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2021, Linaro Limited

/*

 * This file implement the FF-A ABI used when communicating with secure world

 * OP-TEE OS via FF-A.

 * This file is divided into the following sections:

 * 1. Maintain a hash table for lookup of a global FF-A memory handle

 * 2. Convert between struct tee_param and struct optee_msg_param

 * 3. Low level support functions to register shared memory in secure world

 * 4. Dynamic shared memory pool based on alloc_pages()

 * 5. Do a normal scheduled call into secure world

 * 6. Driver initialization.

/*

 * 1. Maintain a hash table for lookup of a global FF-A memory handle

 *

 * FF-A assigns a global memory handle for each piece shared memory.

 * This handle is then used when communicating with secure world.

 *

 * Main functions are optee_shm_add_ffa_handle() and optee_shm_rem_ffa_handle()

/*

 * 2. Convert between struct tee_param and struct optee_msg_param

 *

 * optee_ffa_from_msg_param() and optee_ffa_to_msg_param() are the main

 * functions.

/**

 * optee_ffa_from_msg_param() - convert from OPTEE_MSG parameters to

 *				struct tee_param

 * @optee:	main service struct

 * @params:	subsystem internal parameter representation

 * @num_params:	number of elements in the parameter arrays

 * @msg_params:	OPTEE_MSG parameters

 *

 * Returns 0 on success or <0 on failure

 Check that the entire offset could be stored. */

/**

 * optee_ffa_to_msg_param() - convert from struct tee_params to OPTEE_MSG

 *			      parameters

 * @optee:	main service struct

 * @msg_params:	OPTEE_MSG parameters

 * @num_params:	number of elements in the parameter arrays

 * @params:	subsystem itnernal parameter representation

 * Returns 0 on success or <0 on failure

/*

 * 3. Low level support functions to register shared memory in secure world

 *

 * Functions to register and unregister shared memory both for normal

 * clients and for tee-supplicant.

	/*

	 * We're skipping the OPTEE_FFA_YIELDING_CALL_UNREGISTER_SHM call

	 * since this is OP-TEE freeing via RPC so it has already retired

	 * this ID.

/*

 * 4. Dynamic shared memory pool based on alloc_pages()

 *

 * Implements an OP-TEE specific shared memory pool.

 * The main function is optee_ffa_shm_pool_alloc_pages().

/**

 * optee_ffa_shm_pool_alloc_pages() - create page-based allocator pool

 *

 * This pool is used with OP-TEE over FF-A. In this case command buffers

 * and such are allocated from kernel's own memory.

/*

 * 5. Do a normal scheduled call into secure world

 *

 * The function optee_ffa_do_call_with_arg() performs a normal scheduled

 * call into secure world. During this call may normal world request help

 * from normal world using RPCs, Remote Procedure Calls. This includes

 * delivery of non-secure interrupts to for instance allow rescheduling of

 * the current task.

 Interrupt delivered by now */

 Initialize waiter */

			/*

			 * Out of threads in secure world, wait for a thread

			 * become available.

		/*

		 * OP-TEE has returned with a RPC request.

		 *

		 * Note that data->data4 (passed in register w7) is already

		 * filled in by ffa_ops->sync_send_receive() returning

		 * above.

	/*

	 * We're done with our thread in secure world, if there's any

	 * thread waiters wake up one.

/**

 * optee_ffa_do_call_with_arg() - Do a FF-A call to enter OP-TEE in secure world

 * @ctx:	calling context

 * @shm:	shared memory holding the message to pass to secure world

 *

 * Does a FF-A call to OP-TEE in secure world and handles eventual resulting

 * Remote Procedure Calls (RPC) from OP-TEE.

 *

 * Returns return code from FF-A, 0 is OK

/*

 * 6. Driver initialization

 *

 * During driver inititialization is the OP-TEE Secure Partition is probed

 * to find out which features it supports so the driver can be initialized

 * with a matching configuration.

 same as for clnt ops */

	/*

	 * tee_device_unregister() is safe to call even if the

	 * devices hasn't been registered with

	 * tee_device_register() yet.

 486178e0-e7f8-11e3-bc5e0002a5d5c51b */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015-2021, Linaro Limited

 * Copyright (c) 2016, EPAM Systems

/*

 * This file implement the SMC ABI used when communicating with secure world

 * OP-TEE OS via raw SMCs.

 * This file is divided into the following sections:

 * 1. Convert between struct tee_param and struct optee_msg_param

 * 2. Low level support functions to register shared memory in secure world

 * 3. Dynamic shared memory pool based on alloc_pages()

 * 4. Do a normal scheduled call into secure world

 * 5. Driver initialization.

/*

 * 1. Convert between struct tee_param and struct optee_msg_param

 *

 * optee_from_msg_param() and optee_to_msg_param() are the main

 * functions.

 Check that the memref is covered by the shm object */

/**

 * optee_from_msg_param() - convert from OPTEE_MSG parameters to

 *			    struct tee_param

 * @optee:	main service struct

 * @params:	subsystem internal parameter representation

 * @num_params:	number of elements in the parameter arrays

 * @msg_params:	OPTEE_MSG parameters

 * Returns 0 on success or <0 on failure

/**

 * optee_to_msg_param() - convert from struct tee_params to OPTEE_MSG parameters

 * @optee:	main service struct

 * @msg_params:	OPTEE_MSG parameters

 * @num_params:	number of elements in the parameter arrays

 * @params:	subsystem itnernal parameter representation

 * Returns 0 on success or <0 on failure

/*

 * 2. Low level support functions to register shared memory in secure world

 *

 * Functions to enable/disable shared memory caching in secure world, that

 * is, lazy freeing of previously allocated shared memory. Freeing is

 * performed when a request has been compled.

 *

 * Functions to register and unregister shared memory both for normal

 * clients and for tee-supplicant.

/**

 * optee_enable_shm_cache() - Enables caching of some shared memory allocation

 *			      in OP-TEE

 * @optee:	main service struct

 We need to retry until secure world isn't busy. */

/**

 * __optee_disable_shm_cache() - Disables caching of some shared memory

 *				 allocation in OP-TEE

 * @optee:	main service struct

 * @is_mapped:	true if the cached shared memory addresses were mapped by this

 *		kernel, are safe to dereference, and should be freed

 We need to retry until secure world isn't busy. */

 All shm's freed */

			/*

			 * Shared memory references that were not mapped by

			 * this kernel must be ignored to prevent a crash.

/**

 * optee_disable_shm_cache() - Disables caching of mapped shared memory

 *			       allocations in OP-TEE

 * @optee:	main service struct

/**

 * optee_disable_unmapped_shm_cache() - Disables caching of shared memory

 *					allocations in OP-TEE which are not

 *					currently mapped

 * @optee:	main service struct

/*

 * The final entry in each pagelist page is a pointer to the next

 * pagelist page.

/**

 * optee_fill_pages_list() - write list of user pages to given shared

 * buffer.

 *

 * @dst: page-aligned buffer where list of pages will be stored

 * @pages: array of pages that represents shared buffer

 * @num_pages: number of entries in @pages

 * @page_offset: offset of user buffer from page start

 *

 * @dst should be big enough to hold list of user page addresses and

 *	links to the next pages of buffer

	/*

	 * Refer to OPTEE_MSG_ATTR_NONCONTIG description in optee_msg.h

	 * for details.

	/*

	 * Currently OP-TEE uses 4k page size and it does not looks

	 * like this will change in the future.  On other hand, there are

	 * no know ARM architectures with page size < 4k.

	 * Thus the next built assert looks redundant. But the following

	 * code heavily relies on this assumption, so it is better be

	 * safe than sorry.

	/*

	 * If linux page is bigger than 4k, and user buffer offset is

	 * larger than 4k/8k/12k/etc this will skip first 4k pages,

	 * because they bear no value data for OP-TEE.

	/*

	 * In the least bits of msg_arg->params->u.tmem.buf_ptr we

	 * store buffer offset from 4k page, as described in OP-TEE ABI.

	/*

	 * We don't want to register supplicant memory in OP-TEE.

	 * Instead information about it will be passed in RPC code.

/*

 * 3. Dynamic shared memory pool based on alloc_pages()

 *

 * Implements an OP-TEE specific shared memory pool which is used

 * when dynamic shared memory is supported by secure world.

 *

 * The main function is optee_shm_pool_alloc_pages().

	/*

	 * Shared memory private to the OP-TEE driver doesn't need

	 * to be registered with OP-TEE.

/**

 * optee_shm_pool_alloc_pages() - create page-based allocator pool

 *

 * This pool is used when OP-TEE supports dymanic SHM. In this case

 * command buffers and such are allocated from kernel's own memory.

/*

 * 4. Do a normal scheduled call into secure world

 *

 * The function optee_smc_do_call_with_arg() performs a normal scheduled

 * call into secure world. During this call may normal world request help

 * from normal world using RPCs, Remote Procedure Calls. This includes

 * delivery of non-secure interrupts to for instance allow rescheduling of

 * the current task.

		/*

		 * In the least bits of u.tmem.buf_ptr we store buffer offset

		 * from 4k page, as described in OP-TEE ABI.

/**

 * optee_handle_rpc() - handle RPC from secure world

 * @ctx:	context doing the RPC

 * @param:	value of registers for the RPC

 * @call_ctx:	call context. Preserved during one OP-TEE invocation

 *

 * Result of RPC is written back into @param.

		/*

		 * A foreign interrupt was raised while secure world was

		 * executing, since they are handled in Linux a dummy RPC is

		 * performed to let Linux take the interrupt through the normal

		 * vector.

/**

 * optee_smc_do_call_with_arg() - Do an SMC to OP-TEE in secure world

 * @ctx:	calling context

 * @arg:	shared memory holding the message to pass to secure world

 *

 * Does and SMC to OP-TEE in secure world and handles eventual resulting

 * Remote Procedure Calls (RPC) from OP-TEE.

 *

 * Returns return code from secure world, 0 is OK

 Initialize waiter */

			/*

			 * Out of threads in secure world, wait for a thread

			 * become available.

	/*

	 * We're done with our thread in secure world, if there's any

	 * thread waiters wake up one.

/*

 * 5. Driver initialization

 *

 * During driver inititialization is secure world probed to find out which

 * features it supports so the driver can be initialized with a matching

 * configuration. This involves for instance support for dynamic shared

 * memory instead of a static memory carvout.

	/*

	 * TODO This isn't enough to tell if it's UP system (from kernel

	 * point of view) or not, is_smp() returns the information

	 * needed, but can't be called directly from here.

 8 bytes aligned */);

 Simple wrapper functions to be able to use a function pointer */

/* optee_remove - Device Removal Routine

 * @pdev: platform device information struct

 *

 * optee_remove is called by platform subsystem to alert the driver

 * that it should release the device

	/*

	 * Ask OP-TEE to free all cached shared memory objects to decrease

	 * reference counters and also avoid wild pointers in secure world

	 * into the old shared memory range.

/* optee_shutdown - Device Removal Routine

 * @pdev: platform device information struct

 *

 * platform_shutdown is called by the platform subsystem to alert

 * the driver that a shutdown, reboot, or kexec is happening and

 * device must be disabled.

	/*

	 * Try to use dynamic shared memory if possible

	/*

	 * If dynamic shared memory is not available or failed - try static one

	/*

	 * Ensure that there are no pre-existing shm objects before enabling

	 * the shm cache so that there's no chance of receiving an invalid

	 * address during shutdown. This could occur, for example, if we're

	 * kexec booting from an older kernel that did not properly cleanup the

	 * shm cache.

		/*

		 * tee_device_unregister() is safe to call even if the

		 * devices hasn't been registered with

		 * tee_device_register() yet.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015-2021, Linaro Limited

 Go to interruptible sleep */

 Increases count as secure world doesn't have a reference */

	/*

	 * Match the tee_shm_get_from_id() in cmd_alloc_suppl() as secure

	 * world has released its reference.

	 *

	 * It's better to do this before sending the request to supplicant

	 * as we'd like to let the process doing the initial allocation to

	 * do release the last reference too in order to avoid stacking

	 * many pending fput() on the client process. This could otherwise

	 * happen if secure world does many allocate and free in a single

	 * invoke.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015-2021, Linaro Limited

 * Copyright (c) 2016, EPAM Systems

 Unregister OP-TEE specific client devices on TEE bus */

	/*

	 * The two devices have to be unregistered before we can free the

	 * other resources.

	/*

	 * The kernel may have crashed at the same time that all available

	 * secure world threads were suspended and we cannot reschedule the

	 * suspended threads without access to the crashed kernel's wait_queue.

	 * Therefore, we cannot reliably initialize the OP-TEE driver in the

	 * kdump kernel.

 If both failed there's no point with this module */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2019 Linaro Ltd.

 Fill invoke cmd params */

 Open context with OP-TEE driver */

 Open session with device enumeration pseudo TA */

 Device enumeration pseudo TA not found */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015, Linaro Limited

 Abort all request retrieved by supplicant */

 Abort all queued requests */

/**

 * optee_supp_thrd_req() - request service from supplicant

 * @ctx:	context doing the request

 * @func:	function requested

 * @num_params:	number of elements in @param array

 * @param:	parameters for function

 *

 * Returns result of operation to be passed to secure world

	/*

	 * Return in case there is no supplicant available and

	 * non-blocking request.

 Insert the request in the request list */

 Tell an eventual waiter there's a new request */

	/*

	 * Wait for supplicant to process and return result, once we've

	 * returned from wait_for_completion(&req->c) successfully we have

	 * exclusive access again.

			/*

			 * There's no supplicant available and since the

			 * supp->mutex currently is held none can

			 * become available until the mutex released

			 * again.

			 *

			 * Interrupting an RPC to supplicant is only

			 * allowed as a way of slightly improving the user

			 * experience in case the supplicant hasn't been

			 * started yet. During normal operation the supplicant

			 * will serve all requests in a timely manner and

			 * interrupting then wouldn't make sense.

		/*

		 * Supplicant should not mix synchronous and asnynchronous

		 * requests.

 Not enough room for parameters */

	/*

	 * If there's memrefs we need to decrease those as they where

	 * increased earlier and we'll even refuse to accept any below.

	/*

	 * We only expect parameters as TEE_IOCTL_PARAM_ATTR_TYPE_NONE with

	 * or without the TEE_IOCTL_PARAM_ATTR_META bit set.

 At most we'll need one meta parameter so no need to check for more */

/**

 * optee_supp_recv() - receive request for supplicant

 * @ctx:	context receiving the request

 * @func:	requested function in supplicant

 * @num_params:	number of elements allocated in @param, updated with number

 *		used elements

 * @param:	space for parameters for @func

 *

 * Returns 0 on success or <0 on failure

		/*

		 * If we didn't get a request we'll block in

		 * wait_for_completion() to avoid needless spinning.

		 *

		 * This is where supplicant will be hanging most of

		 * the time, let's make this interruptable so we

		 * can easily restart supplicant if needed.

		/*

		 * tee-supplicant support meta parameters -> requsts can be

		 * processed asynchronously.

/**

 * optee_supp_send() - send result of request from supplicant

 * @ctx:	context sending result

 * @ret:	return value of request

 * @num_params:	number of parameters returned

 * @param:	returned parameters

 *

 * Returns 0 on success or <0 on failure.

 Something is wrong, let supplicant restart. */

 Update out and in/out parameters */

 Let the requesting thread continue */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015-2021, Linaro Limited

	/*

	 * We're preparing to make a call to secure world. In case we can't

	 * allocate a thread in secure world we'll end up waiting in

	 * optee_cq_wait_for_completion().

	 *

	 * Normally if there's no contention in secure world the call will

	 * complete and we can cleanup directly with optee_cq_wait_final().

	/*

	 * We add ourselves to the queue, but we don't wait. This

	 * guarantees that we don't lose a completion if secure world

	 * returns busy and another thread just exited and try to complete

	 * someone.

 Move to end of list to get out of the way for other waiters */

	/*

	 * We're done with the call to secure world. The thread in secure

	 * world that was used for this call is now available for some

	 * other task to use.

 Get out of the list */

 Wake up one eventual waiting task */

	/*

	 * If we're completed we've got a completion from another task that

	 * was just done with its call to secure world. Since yet another

	 * thread now is available in secure world wake up another eventual

	 * waiting task.

 Requires the filpstate mutex to be held */

	/*

	 * rpc_arg_count is set to the number of allocated parameters in

	 * the RPC argument struct if a second MSG arg struct is expected.

	 * The second arg struct will then be used for RPC.

 +2 for the meta parameters added below */

	/*

	 * Initialize and add the meta parameters needed when opening a

	 * session.

 A new session has been created, add it to the list. */

 Close session again to avoid leakage */

 Check that the session is valid and remove it from the list */

 Check that the session is valid */

 Check that the session is valid */

	/*

	 * Allow kernel address to register with OP-TEE as kernel

	 * pages are configured as normal memory only.

 SPDX-License-Identifier: MIT

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 Map the allocated memory in to TEE */

 Unmap the shared memory from TEE */

 SPDX-License-Identifier: MIT

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 Close any open session */

 Check if session entry 'i' is valid */

/**

 * alloc_session() - Allocate a session structure

 * @ctxdata:    TEE Context data structure

 * @session:    Session ID for which 'struct amdtee_session' structure is to be

 *              allocated.

 *

 * Scans the TEE context's session list to check if TA is already loaded in to

 * TEE. If yes, returns the 'session' structure for that TA. Else allocates,

 * initializes a new 'session' structure and adds it to context's session list.

 *

 * The caller must hold a mutex.

 *

 * Returns:

 * 'struct amdtee_session *' on success and NULL on failure.

 Scan session list to check if TA is already loaded in to TEE */

 Allocate a new session and add to list */

 Requires mutex to be held */

 Load the TA binary into TEE environment */

 Find an empty session index for the given TA */

 Open session with loaded TA */

	/*

	 * Check that the session is valid and clear the session

	 * usage bit

 Close the session */

	/*

	 * Send a MAP command to TEE and get the corresponding

	 * buffer Id

 Unmap the shared memory from TEE */

 Check that the session is valid */

 SPDX-License-Identifier: MIT

/*

 * Copyright 2019 Advanced Micro Devices, Inc.

 AMD TEE does not support meta parameter */

 It is assumed that all values are within 2^32-1 */

 Assumes amd->param_types is valid */

		/*

		 * It is assumed that buf_id remains unchanged for

		 * both open_session and invoke_cmd call

 field 'c' not supported by AMD TEE */

 Caller must hold a mutex */

 Caller must hold a mutex */

 Size must be page aligned */

 Create buffer list */

 Unload the TA on error */

/*

 * Runtime PM support code

 *

 *  Copyright (C) 2009-2010 Magnus Damm

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

/*

 * drivers/sh/superhyway/superhyway.c

 *

 * SuperHyway Bus Driver

 *

 * Copyright (C) 2004, 2005  Paul Mundt <lethal@linux-sh.org>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

/**

 * superhyway_add_device - Add a SuperHyway module

 * @base: Physical address where module is mapped.

 * @sdev: SuperHyway device to add, or NULL to allocate a new one.

 * @bus: Bus where SuperHyway module resides.

 *

 * This is responsible for adding a new SuperHyway module. This sets up a new

 * struct superhyway_device for the module being added if @sdev == NULL.

 *

 * Devices are initially added in the order that they are scanned (from the

 * top-down of the memory map), and are assigned an ID based on the order that

 * they are added. Any manual addition of a module will thus get the ID after

 * the devices already discovered regardless of where it resides in memory.

 *

 * Further work can and should be done in superhyway_scan_bus(), to be sure

 * that any new modules are properly discovered and subsequently registered.

/**

 * superhyway_register_driver - Register a new SuperHyway driver

 * @drv: SuperHyway driver to register.

 *

 * This registers the passed in @drv. Any devices matching the id table will

 * automatically be populated and handed off to the driver's specified probe

 * routine.

/**

 * superhyway_unregister_driver - Unregister a SuperHyway driver

 * @drv: SuperHyway driver to unregister.

 *

 * This cleans up after superhyway_register_driver(), and should be invoked in

 * the exit path of any module drivers.

/*

 * drivers/sh/superhyway/superhyway-sysfs.c

 *

 * SuperHyway Bus sysfs interface

 *

 * Copyright (C) 2004, 2005  Paul Mundt <lethal@linux-sh.org>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 VCR flags */

 Misc */

/*

 * Core maple bus functionality

 *

 *  Copyright (C) 2007 - 2009 Adrian McMenamin

 *  Copyright (C) 2001 - 2008 Paul Mundt

 *  Copyright (C) 2000 - 2001 YAEGASHI Takeshi

 *  Copyright (C) 2001 M. R. Brown

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 mutex to protect queue of waiting packets */

/**

 * maple_driver_register - register a maple driver

 * @drv: maple driver to be registered.

 *

 * Registers the passed in @drv, while updating the bus type.

 * Devices with matching function IDs will be automatically probed.

/**

 * maple_driver_unregister - unregister a maple driver.

 * @drv: maple driver to unregister.

 *

 * Cleans up after maple_driver_register(). To be invoked in the exit

 * path of any module drivers.

 set hardware registers to enable next round of dma */

 set trig type to 0 for software trigger, 1 for hardware (VBLANK) */

	/*

	* Maple system register

	* bits 31 - 16	timeout in units of 20nsec

	* bit 12	hard trigger - set 0 to keep responding to VBLANK

	* bits 9 - 8	set 00 for 2 Mbps, 01 for 1 Mbps

	* bits 3 - 0	delay (in 1.3ms) between VBLANK and start of DMA

	* max delay is 11

/**

 * maple_getcond_callback - setup handling MAPLE_COMMAND_GETCOND

 * @dev: device responding

 * @callback: handler callback

 * @interval: interval in jiffies between callbacks

 * @function: the function code for the device

/**

 * maple_add_packet - add a single instruction to the maple bus queue

 * @mdev: maple device

 * @function: function on device being queried

 * @command: maple command to add

 * @length: length of command string (in 32 bit words)

 * @data: remainder of command string

	/* zero this out to avoid kobj subsystem

/* process the command queue into a maple command block

 * terminating command has bit 32 of first long set to 0

 build up command queue */

 disable DMA */

 check if there is a driver registered likely to match this device */

 process initial MAPLE_COMMAND_DEVINFO for each device or port */

	/* copy the data as individual elements in

 Do this silently - as not a real device */

 Driver does not exist yet */

/*

 * if device has been registered for the given

 * port and unit then return 1 - allows identification

 * of which devices need to be attached or detached

 bounce if we cannot add */

			/* Ensure we don't have block reads and devinfo

			* calls interfering with one another - so flag the

 VBLANK bottom half - implemented via workqueue */

	/*

	* Set up essential commands - to fetch data and

	* check devices are still present

		/*

		* Scan the empty ports - bus is flakey and may have

		* mis-reported emptyness

 handle devices added via hotplugs - placing them on queue for DEVINFO */

 mark that we are checking sub devices */

 mark a device as removed */

 handle empty port or hotplug removal */

		/*

		* Block devices play up

		* and give the impression they have

		* been removed even when still in place or

		* trip the mtd layer when they have

		* really gone - this code traps that eventuality

		* and ensures we aren't overloaded with useless

		* error messages

 Some hardware devices generate false detach messages on unit 0 */

 preprocess hotplugs or scans */

 maple dma end bottom half - implemented via workqueue */

 if scanning is 1 then we have subdevices to check */

check if we have actually tested all ports yet */

 mark that we have been through the first scan */

 Load everything into the bottom half */

 Trap empty port case */

/*

 * maple_bus_type - core maple bus structure

 allocate memory for maple bus dma */

 set up DMA interrupt handler */

 set up VBLANK interrupt handler */

 setup maple ports */

 prepare initial queue */

 Push init to later to ensure hardware gets detected */

/*

 * Helper routines for SuperH Clock Pulse Generator blocks (CPG).

 *

 *  Copyright (C) 2010  Magnus Damm

 *  Copyright (C) 2010 - 2012  Paul Mundt

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

/*

 * Div/mult table lookup helpers

/*

 * Common div ops

 XXX: Should use a post-change notifier */

	/*

	 * div6 clocks require the divisor field to be non-zero or the

	 * above CKSTP toggle silently fails. Ensure that the divisor

	 * array is reset to its initial state on disable.

/*

 * div6 support

 Search the parent */

 Rebuild the frequency table */

/*

 * div4 support

	/* we really need a better way to determine parent index, but for

	 * now assume internal parent comes with CLK_ENABLE_ON_INIT set,

	 * no CLK_ENABLE_ON_INIT means external clock...

 Rebiuld the frequency table */

 FSI-DIV */

 clks[i].enable_reg came from SH_CLK_FSIDIV() */

 remove .enable_reg */

/*

 * SuperH clock framework

 *

 *  Copyright (C) 2005 - 2010  Paul Mundt

 *

 * This clock framework is derived from the OMAP version by:

 *

 *	Copyright (C) 2004 - 2008 Nokia Corporation

 *	Written by Tuukka Tikkanen <tuukka.tikkanen@elektrobit.com>

 *

 *  Modified for omap shared clock framework by Tony Lindgren <tony@atomide.com>

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 clock disable operations are not passed on to hardware during boot */

 Termination entry */

 Used for clocks that always have same value as the parent clock */

 Propagate rate to children */

/**

 * recalculate_root_clocks - recalculate and propagate all root clocks

 *

 * Recalculates all root clocks (clocks with no parent), which if the

 * clock's .recalc is set correctly, should also propagate their rates.

 * Called at init.

	/*

	 * Propagate mappings.

		/*

		 * dummy mapping for root clocks with no specified ranges

		/*

		 * If we're on a child clock and it provides no mapping of its

		 * own, inherit the mapping from its root clock.

	/*

	 * Establish initial mapping.

		/*

		 * Bump the refcount for an existing mapping

 Nothing to do */

	/*

	 * trap out already registered clocks

 disable all clocks with zero use count */

 from now on allow clock disable operations */

/*

 * IRQ domain support for SH INTC subsystem

 *

 * Copyright (C) 2012  Paul Mundt

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

/**

 * intc_irq_domain_evt_xlate() - Generic xlate for vectored IRQs.

 *

 * This takes care of exception vector to hwirq translation through

 * by way of evt2irq() translation.

 *

 * Note: For platforms that use a flat vector space without INTEVT this

 * basically just mimics irq_domain_xlate_onecell() by way of a nopped

 * out evt2irq() implementation.

	/*

	 * Quick linear revmap check

	/*

	 * Linear domains have a hard-wired assertion that IRQs start at

	 * 0 in order to make some performance optimizations. Lamely

	 * restrict the linear case to these conditions here, taking the

	 * tree penalty for linear cases with non-zero hwirq bases.

/*

 * IRQ chip definitions for INTC IRQs.

 *

 * Copyright (C) 2007, 2008 Magnus Damm

 * Copyright (C) 2009 - 2012 Paul Mundt

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

/*

 * This is held with the irq desc lock held, so we don't require any

 * additional locking here at the intc desc level. The affinity mask is

 * later tested in the enable/disable paths.

 read register and write zero only to the associated bit */

 8bit */

 16bit */

 32bit */

		/*

		 * only set secondary masking method directly

		 * primary masking method is using intc_prio_level[irq]

		 * priority level will be set during next enable()

 SH7706, SH7707 and SH7709 do not support high level triggered */

 all recent SH-Mobile / R-Mobile ARM support this */

 PINT has 2-bit sense registers, should fail on EDGE_BOTH */

/*

 * Common INTC2 register accessors

 *

 * Copyright (C) 2007, 2008 Magnus Damm

 * Copyright (C) 2009, 2010 Paul Mundt

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 scan through physical windows and convert address */

 no windows defined, register must be 1:1 mapped virt:phys */

 Defeat write posting */

 Defeat write posting */

 Defeat write posting */

 Defeat write posting */

 Defeat write posting */

 Defeat write posting */

/*

 * Support for hardware-assisted userspace interrupt masking.

 *

 * Copyright (C) 2010  Paul Mundt

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

	/*

	 * Minimal acceptable IRQ levels are in the 2 - 16 range, but

	 * these are chomped so as to not interfere with normal IRQs.

	 *

	 * Level 1 is a special case on some CPUs in that it's not

	 * directly settable, but given that USERIMASK cuts off below a

	 * certain level, we don't care about this limitation here.

	 * Level 0 on the other hand equates to user masking disabled.

	 *

	 * We use the default priority level as a cut off so that only

	 * special case opt-in IRQs can be mangled.

/*

 * Support for hardware-managed IRQ auto-distribution.

 *

 * Copyright (C) 2010  Paul Mundt

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

		/*

		 * Skip this entry if there's no auto-distribution

		 * register associated with it.

	/*

	 * It's possible we've gotten here with no distribution options

	 * available for the IRQ in question, so we just skip over those.

	/*

	 * Nothing to do for this IRQ.

/*

 * Support for virtual IRQ subgroups.

 *

 * Copyright (C) 2010  Paul Mundt

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

/*

 * Tags for the radix tree

		/*

		 * Catch early lookups for subgroup VIRQs that have not

		 * yet been allocated an IRQ. This already includes a

		 * fast-path out if the tree is untagged, so there is no

		 * need to explicitly test the root tree.

 scan for duplicates */

		/*

		 * Set the virtual IRQ as non-threadable.

 Set handler data before installing the handler */

/*

 * Support for virtual IRQ subgroups debugfs mapping.

 *

 * Copyright (C) 2010  Paul Mundt

 *

 * Modelled after arch/powerpc/kernel/irq.c.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

	/*

	 * XXX.. use arch_debugfs_dir here when all of the intc users are

	 * converted.

/*

 * Shared interrupt handling code for IPR and INTC2 types of IRQs.

 *

 * Copyright (C) 2007, 2008 Magnus Damm

 * Copyright (C) 2009 - 2012 Paul Mundt

 *

 * Based on intc2.c and ipr.c

 *

 * Copyright (C) 1999  Niibe Yutaka & Takeshi Yaegashi

 * Copyright (C) 2000  Kazumoto Kojima

 * Copyright (C) 2001  David J. Mckay (david.mckay@st.com)

 * Copyright (C) 2003  Takashi Kusuda <kusuda-takashi@hitachi-ul.co.jp>

 * Copyright (C) 2005, 2006  Paul Mundt

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

/*

 * Default priority level

 * - this needs to be at least 2 for 5-bit priorities on 7780

 2 - 16 */

 for now */

	/*

	 * Prefer single interrupt source bitmap over other combinations:

	 *

	 * 1. bitmap, single interrupt source

	 * 2. priority, single interrupt source

	 * 3. bitmap, multiple interrupt sources (groups)

	 * 4. priority, multiple interrupt sources (groups)

 must have primary masking method */

	/*

	 * set priority level

 enable secondary masking method if present */

 add irq to d->prio list if priority is available */

			/*

			 * only secondary priority should access registers, so

			 * set _INTC_FN(h) = REG_FN_ERR for intc_set_priority()

 add irq to d->sense list if sense is available */

 irq should be disabled by default */

 disable bits matching force_disable before registering irqs */

 disable bits matching force_enable before registering irqs */

 _INTC_ADDR_E() and _INTC_ADDR_D() are 8 bits */

 register the vectors one by one */

			/*

			 * In the case of multi-evt handling and sparse

			 * IRQ support, each vector still needs to have

			 * its own backing irq_desc.

 redirect this interrupts to the first one */

 enable bits matching force_enable after registering irqs */

 enable wakeup irqs belonging to this intc controller */

			/*

			 * This will catch the redirect and VIRQ cases

			 * due to the dummy_irq_chip being inserted.

/*

 * Shared interrupt handling code for IPR and INTC2 types of IRQs.

 *

 * Copyright (C) 2007, 2008 Magnus Damm

 * Copyright (C) 2009, 2010 Paul Mundt

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 go through and enable/disable all mask bits */

 go through and enable/disable all priority fields */

	/*

	 * Nothing to do for this IRQ.

 SPDX-License-Identifier: GPL-2.0

/*

 * Allwinner A64 Display Engine 2.0 Bus Driver

 *

 * Copyright (C) 2018 Icenowy Zheng <icenowy@aosc.io>

 sentinel */ }

/*

 * Simple Power-Managed Bus Driver

 *

 * Copyright (C) 2014-2015 Glider bvba

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

	/*

	 * Allow user to use driver_override to bind this driver to a

	 * transparent bus device which has a different compatible string

	 * that's not listed in simple_pm_bus_of_match. We don't want to do any

	 * of the simple-pm-bus tasks for these devices, so return early.

	/*

	 * These are transparent bus devices (not simple-pm-bus matches) that

	 * have their child nodes populated automatically.  So, don't need to

	 * do anything more. We only match with the device if this driver is

	 * the most specific match because we don't want to incorrectly bind to

	 * a device that has a more specific driver.

 Match if the device is only a bus. */

 sentinel */ }

/*

 * Bus driver for MIPS Common Device Memory Map (CDMM).

 *

 * Copyright (C) 2014-2015 Imagination Technologies Ltd.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 Access control and status register fields */

 Each block of device registers is 64 bytes */

 Default physical base address */

 Bus operations */

 Device attributes */

/*

 * Standard driver callback helpers.

 *

 * All the CDMM driver callbacks need to be executed on the appropriate CPU from

 * workqueues. For the standard driver callbacks we need a work function

 * (mips_cdmm_{void,int}_work()) to do the actual call from the right CPU, and a

 * wrapper function (generated with BUILD_PERCPU_HELPER) to arrange for the work

 * function to be called on that CPU.

/**

 * struct mips_cdmm_work_dev - Data for per-device call work.

 * @fn:		CDMM driver callback function to call for the device.

 * @dev:	CDMM device to pass to @fn.

/**

 * mips_cdmm_void_work() - Call a void returning CDMM driver callback.

 * @data:	struct mips_cdmm_work_dev pointer.

 *

 * A work_on_cpu() callback function to call an arbitrary CDMM driver callback

 * function which doesn't return a value.

/**

 * mips_cdmm_int_work() - Call an int returning CDMM driver callback.

 * @data:	struct mips_cdmm_work_dev pointer.

 *

 * A work_on_cpu() callback function to call an arbitrary CDMM driver callback

 * function which returns an int.

/**

 * BUILD_PERCPU_HELPER() - Helper to call a CDMM driver callback on right CPU.

 * @_ret:	Return type (void or int).

 * @_name:	Name of CDMM driver callback function.

 *

 * Generates a specific device callback function to call a CDMM driver callback

 * function on the appropriate CPU for the device, and if applicable return the

 * result.

 Driver callback functions */

 int mips_cdmm_probe(struct device) */

 int mips_cdmm_remove(struct device) */

 void mips_cdmm_shutdown(struct device) */

 Driver registration */

/**

 * mips_cdmm_driver_register() - Register a CDMM driver.

 * @drv:	CDMM driver information.

 *

 * Register a CDMM driver with the CDMM subsystem. The driver will be informed

 * of matching devices which are discovered.

 *

 * Returns:	0 on success.

/**

 * mips_cdmm_driver_unregister() - Unregister a CDMM driver.

 * @drv:	CDMM driver information.

 *

 * Unregister a CDMM driver from the CDMM subsystem.

 CDMM initialisation and bus discovery */

/**

 * struct mips_cdmm_bus - Info about CDMM bus.

 * @phys:		Physical address at which it is mapped.

 * @regs:		Virtual address where registers can be accessed.

 * @drbs:		Total number of DRBs.

 * @drbs_reserved:	Number of DRBs reserved.

 * @discovered:		Whether the devices on the bus have been discovered yet.

 * @offline:		Whether the CDMM bus is going offline (or very early

 *			coming back online), in which case it should be

 *			reconfigured each time.

/**

 * mips_cdmm_get_bus() - Get the per-CPU CDMM bus information.

 *

 * Get information about the per-CPU CDMM bus, if the bus is present.

 *

 * The caller must prevent migration to another CPU, either by disabling

 * pre-emption or by running from a pinned kernel thread.

 *

 * Returns:	Pointer to CDMM bus information for the current CPU.

 *		May return ERR_PTR(-errno) in case of error, so check with

 *		IS_ERR().

 Avoid early use of per-cpu primitives before initialised */

 Get bus pointer */

 Attempt allocation if NULL */

/**

 * mips_cdmm_cur_base() - Find current physical base address of CDMM region.

 *

 * Returns:	Physical base address of CDMM region according to cdmmbase CP0

 *		register, or 0 if the CDMM region is disabled.

/**

 * mips_cdmm_phys_base() - Choose a physical base address for CDMM region.

 *

 * Picking a suitable physical address at which to map the CDMM region is

 * platform specific, so this weak function can be overridden by platform

 * code to pick a suitable value if none is configured by the bootloader.

 * By default this method tries to find a CDMM-specific node in the system

 * dtb. Note that this won't work for early serial console.

/**

 * mips_cdmm_setup() - Ensure the CDMM bus is initialised and usable.

 * @bus:	Pointer to bus information for current CPU.

 *		IS_ERR(bus) is checked, so no need for caller to check.

 *

 * The caller must prevent migration to another CPU, either by disabling

 * pre-emption or by running from a pinned kernel thread.

 *

 * Returns	0 on success, -errno on failure.

 Don't set up bus a second time unless marked offline */

 If CDMM region is still set up, nothing to do */

		/*

		 * The CDMM region isn't set up as expected, so it needs

		 * reconfiguring, but then we can stop checking it.

 If the CDMM region is already configured, inherit that setup */

 Otherwise, ask platform code for suggestions */

 Otherwise, copy what other CPUs have done */

 Otherwise, complain once */

		/*

		 * If you hit this, either your bootloader needs to set up the

		 * CDMM on the boot CPU, or else you need to implement

		 * mips_cdmm_phys_base() for your platform (see asm/cdmm.h).

 Already complained? */

 Record our success for other CPUs to copy */

 Enable CDMM */

/**

 * mips_cdmm_early_probe() - Minimally probe for a specific device on CDMM.

 * @dev_type:	CDMM type code to look for.

 *

 * Minimally configure the in-CPU Common Device Memory Map (CDMM) and look for a

 * specific device. This can be used to find a device very early in boot for

 * example to configure an early FDC console device.

 *

 * The caller must prevent migration to another CPU, either by disabling

 * pre-emption or by running from a pinned kernel thread.

 *

 * Returns:	MMIO pointer to device memory. The caller can read the ACSR

 *		register to find more information about the device (such as the

 *		version number or the number of blocks).

 *		May return IOMEM_ERR_PTR(-errno) in case of error, so check with

 *		IS_ERR().

 Skip the first block if it's reserved for more registers */

 Look for a specific device type */

/**

 * mips_cdmm_release() - Release a removed CDMM device.

 * @dev:	Device object

 *

 * Clean up the struct mips_cdmm_device for an unused CDMM device. This is

 * called automatically by the driver core when a device is removed.

/**

 * mips_cdmm_bus_discover() - Discover the devices on the CDMM bus.

 * @bus:	CDMM bus information, must already be set up.

 Skip the first block if it's reserved for more registers */

 Discover devices */

/*

 * CPU hotplug and initialisation

 *

 * All the CDMM driver callbacks need to be executed on the appropriate CPU from

 * workqueues. For the CPU callbacks, they need to be called for all devices on

 * that CPU, so the work function calls bus_for_each_dev, using a helper

 * (generated with BUILD_PERDEV_HELPER) to call the driver callback if the

 * device's CPU matches.

/**

 * BUILD_PERDEV_HELPER() - Helper to call a CDMM driver callback if CPU matches.

 * @_name:	Name of CDMM driver callback function.

 *

 * Generates a bus_for_each_dev callback function to call a specific CDMM driver

 * callback function for the device if the device's CPU matches that pointed to

 * by the data argument.

 *

 * This is used for informing drivers for all devices on a given CPU of some

 * event (such as the CPU going online/offline).

 *

 * It is expected to already be called from the appropriate CPU.

 bus_for_each_dev callback helper functions */

 int mips_cdmm_cpu_down_helper(...) */

 int mips_cdmm_cpu_up_helper(...) */

/**

 * mips_cdmm_cpu_down_prep() - Callback for CPUHP DOWN_PREP:

 *			       Tear down the CDMM bus.

 * @cpu:	unsigned int CPU number.

 *

 * This function is executed on the hotplugged CPU and calls the CDMM

 * driver cpu_down callback for all devices on that CPU.

 Inform all the devices on the bus */

	/*

	 * While bus is offline, each use of it should reconfigure it just in

	 * case it is first use when coming back online again.

/**

 * mips_cdmm_cpu_online() - Callback for CPUHP ONLINE: Bring up the CDMM bus.

 * @cpu:	unsigned int CPU number.

 *

 * This work_on_cpu callback function is executed on a given CPU to discover

 * CDMM devices on that CPU, or to call the CDMM driver cpu_up callback for all

 * devices already discovered on that CPU.

 *

 * It is used as work_on_cpu callback function during

 * initialisation. When CPUs are brought online the function is

 * invoked directly on the hotplugged CPU.

 Bus now set up, so we can drop the offline flag if still set */

 Inform all the devices on the bus */

/**

 * mips_cdmm_init() - Initialise CDMM bus.

 *

 * Initialise CDMM bus, discover CDMM devices for online CPUs, and arrange for

 * hotplug notifications so the CDMM drivers can be kept up to date.

 Register the bus */

 We want to be notified about new CPUs */

/*

 * NBUS driver for TS-4600 based boards

 *

 * Copyright (c) 2016 - Savoir-faire Linux

 * Author: Sebastien Bourdelin <sebastien.bourdelin@savoirfairelinux.com>

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 *

 * This driver implements a GPIOs bit-banged bus, called the NBUS by Technologic

 * Systems. It is used to communicate with the peripherals in the FPGA on the

 * TS-4600 SoM.

/*

 * request all gpios required by the bus.

/*

 * the data gpios are used for reading and writing values, their directions

 * should be adjusted accordingly.

			/* when used as output the default state of the data

/*

 * reset the bus in its initial state.

 * The data, csn, strobe and ale lines must be zero'ed to let the FPGA knows a

 * new transaction can be process.

/*

 * let the FPGA knows it can process.

/*

 * read a byte value from the data gpios.

 * return 0 on success or negative errno on failure.

/*

 * set the data gpios accordingly to the byte value.

/*

 * reading the bus consists of resetting the bus, then notifying the FPGA to

 * send the data in the data gpios and return the read value.

 * return 0 on success or negative errno on failure.

/*

 * writing to the bus consists of resetting the bus, then define the type of

 * command (address/value), write the data and notify the FPGA to retrieve the

 * value in the data gpios.

/*

 * read the value in the FPGA register at the given address.

 * return 0 on success or negative errno on failure.

 bus access must be atomic */

 set the bus in read mode */

 write address */

 set the data gpios direction as input before reading */

 reading value MSB first */

 read a byte from the bus, leave on error */

 append the byte read to the final value */

 restore the data gpios direction as output after reading */

/*

 * write the desired value in the FPGA register at the given address.

 bus access must be atomic */

 set the bus in write mode */

 write address */

 writing value MSB first */

 wait for completion */

	/*

	 * FIXME: pwm_apply_args() should be removed when switching to

	 * the atomic PWM API.

	/*

	 * we can now start the FPGA and populate the peripherals.

	/*

	 * let the child nodes retrieve this instance of the ts-nbus.

 shutdown the FPGA */

/*

 * Tegra ACONNECT Bus Driver

 *

 * Copyright (C) 2016, NVIDIA CORPORATION.  All rights reserved.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file "COPYING" in the main directory of this archive

 * for more details.

 SPDX-License-Identifier: GPL-2.0

/*

 * ti-sysc.c - Texas Instruments sysc interconnect target driver

 disabled and restored modules list lock */

/**

 * struct sysc - TI sysc interconnect target module registers and capabilities

 * @dev: struct device pointer

 * @module_pa: physical address of the interconnect target module

 * @module_size: size of the interconnect target module

 * @module_va: virtual address of the interconnect target module

 * @offsets: register offsets from module base

 * @mdata: ti-sysc to hwmod translation data for a module

 * @clocks: clocks used by the interconnect target module

 * @clock_roles: clock role names for the found clocks

 * @nr_clocks: number of clocks used by the interconnect target module

 * @rsts: resets used by the interconnect target module

 * @legacy_mode: configured for legacy mode if set

 * @cap: interconnect target module capabilities

 * @cfg: interconnect target module configuration

 * @cookie: data used by legacy platform callbacks

 * @name: name if available

 * @revision: interconnect target module revision

 * @reserved: target module is reserved and already in use

 * @enabled: sysc runtime enabled status

 * @needs_resume: runtime resume needed on resume from suspend

 * @child_needs_resume: runtime resume needed for child on resume from suspend

 * @disable_on_idle: status flag used for disabling modules with resets

 * @idle_work: work structure used to perform delayed idle on a module

 * @pre_reset_quirk: module specific pre-reset quirk

 * @post_reset_quirk: module specific post-reset quirk

 * @reset_done_quirk: module specific reset done quirk

 * @module_enable_quirk: module specific enable quirk

 * @module_disable_quirk: module specific disable quirk

 * @module_unlock_quirk: module specific sysconfig unlock quirk

 * @module_lock_quirk: module specific sysconfig lock quirk

 Only i2c revision has LO and HI register with stride of 4 */

 Only i2c revision has LO and HI register with stride of 4 */

 Account for udelay flakeyness */

 Account for udelay flakeyness */

 Poll on reset status */

 Does the clock alias already exist? */

	/*

	 * Use clkdev_add() instead of clkdev_alloc() to avoid the MAX_DEV_ID

	 * limit for clk_get(). If cl ever needs to be freed, it should be done

	 * with clkdev_drop().

 Always add a slot for main clocks fck and ick even if unused */

 Main clocks may not have ick */

 Main clocks may not have ick */

 Assume no holes for opt clocks */

 Assume no holes for opt clocks */

/**

 * sysc_init_resets - init rstctrl reset line if configured

 * @ddata: device driver data

 *

 * See sysc_rstctrl_reset_deassert().

/**

 * sysc_parse_and_check_child_range - parses module IO region from ranges

 * @ddata: device driver data

 *

 * In general we only need rev, syss, and sysc registers and not the whole

 * module range. But we do want the offsets for these registers from the

 * module base. This allows us to check them against the legacy hwmod

 * platform data. Let's also check the ranges are configured properly.

 Interconnect instances to probe before l4_per instances */

 am3/4 l4_wkup */

 omap4/5 and dra7 l4_cfg */

 omap4 l4_wkup */

 omap5 and dra7 l4_wkup without dra7 dcan segment */

/**

 * sysc_defer_non_critical - defer non_critical interconnect probing

 * @ddata: device driver data

 *

 * We want to probe l4_cfg and l4_wkup interconnect instances before any

 * l4_per instances as l4_per instances depend on resources on l4_cfg and

 * l4_wkup interconnects.

/**

 * sysc_check_one_child - check child configuration

 * @ddata: device driver data

 * @np: child device node

 *

 * Let's avoid messy situations where we have new interconnect target

 * node but children have "ti,hwmods". These belong to the interconnect

 * target node and are managed by this driver.

/*

 * So far only I2C uses 16-bit read access with clockactivity with revision

 * in two registers with stride of 4. We can detect this based on the rev

 * register size to configure things far enough to be able to properly read

 * the revision register.

/**

 * sysc_parse_one - parses the interconnect target module registers

 * @ddata: device driver data

 * @reg: register to parse

/**

 * sysc_check_registers - check for misconfigured register overlaps

 * @ddata: device driver data

/**

 * sysc_ioremap - ioremap register space for the interconnect target module

 * @ddata: device driver data

 *

 * Note that the interconnect target module registers can be anywhere

 * within the interconnect target module range. For example, SGX has

 * them at offset 0x1fc00 in the 32MB module address space. And cpsw

 * has them at offset 0x1200 in the CPSW_WR child. Usually the

 * the interconnect target module registers are at the beginning of

 * the module range though.

/**

 * sysc_map_and_check_registers - ioremap and check device registers

 * @ddata: device driver data

/**

 * sysc_show_rev - read and show interconnect target module revision

 * @bufp: buffer to print the information to

 * @ddata: device driver data

/**

 * sysc_show_registers - show information about interconnect target module

 * @ddata: device driver data

/**

 * sysc_write_sysconfig - handle sysconfig quirks for register write

 * @ddata: device driver data

 * @value: register value

 Caller needs to manage sysc_clkdm_deny_idle() and sysc_clkdm_allow_idle() */

	/*

	 * Some modules like DSS reset automatically on idle. Enable optional

	 * reset clocks and wait for OCP softreset to complete.

	/*

	 * Some modules like i2c and hdq1w have unusable reset status unless

	 * the module reset quirk is enabled. Skip status check on enable.

	/*

	 * Some subsystem private interconnects, like DSS top level module,

	 * need only the automatic OCP softreset handling with no sysconfig

	 * register bits to configure.

	/*

	 * Set CLOCKACTIVITY, we only use it for ick. And we only configure it

	 * based on the SYSC_QUIRK_USE_CLOCKACT flag, not based on the hardware

	 * capabilities. See the old HWMOD_SET_DEFAULT_CLOCKACT flag.

 Set SIDLE mode */

 Set WAKEUP */

 Set MIDLE mode */

 Autoidle bit must enabled separately if available */

 Save context and flush posted write */

 Caller needs to manage sysc_clkdm_deny_idle() and sysc_clkdm_allow_idle() */

 Set MIDLE mode */

 Set SIDLE mode */

 Save context and flush posted write */

/*

 * Checks if device context was lost. Assumes the sysconfig register value

 * after lost context is different from the configured value. Only works for

 * enabled devices.

 *

 * Eventually we may want to also add support to using the context lost

 * registers that some SoCs have.

 Nothing to do if enabled and context not lost */

 Disable target module if it is enabled */

 Enable target module */

 Some modules like am335x gpmc need reset and restore of sysconfig */

 Disable target module if no leave_enabled was set */

 Module revision register based quirks */

 These drivers need to be fixed to not use pm_runtime_irq_safe() */

 Uarts on omap4 and later */

 Quirks that need to be set based on the module address */

 Quirks that need to be set based on detected module */

 Errata i893 handling for dra7 dcan1 and 2 */

 PRUSS on am3, am4 and am5 */

 Watchdog on am3 and am4 */

 Some timers on omap4 and later */

/*

 * Early quirks based on module base and register offsets only that are

 * needed before the module revision can be read

 Quirks that also consider the revision register value */

/*

 * DSS needs dispc outputs disabled to reset modules. Returns mask of

 * enabled DSS interrupts. Eventually we may be able to do this on

 * dispc init rather than top-level DSS init.

 Remap the whole module range to be able to reset dispc outputs */

 DISP_CONTROL */

 FRAMEDONE */

 FRAMEDONETV */

 EVSYNC bits */

 DISPC_CONTROL2 */

 FRAMEDONE2 */

 DISPC_CONTROL3 */

 FRAMEDONE3 */

 DSS needs child outputs disabled and SDI registers cleared for reset */

 Get enabled outputs */

 Clear IRQSTATUS */

 Disable outputs */

 Poll IRQSTATUS */

 Clear DSS_SDI_CONTROL */

 Clear DSS_PLL_CONTROL */

 Clear DSS_CONTROL to switch DSS clock sources to PRCM if not */

 1-wire needs module's internal clocks enabled for reset */

 HDQ_CTRL_STATUS */

 AESS (Audio Engine SubSystem) needs autogating set after enable */

 AESS_AUTO_GATING_ENABLE */

 I2C needs to be disabled for reset */

 I2C_CON, omap2/3 is different from omap4 and later */

 I2C_EN */

 RTC on am3 and 4 needs to be unlocked and locked for sysconfig */

 RTC_STATUS BUSY bit may stay active for 1/32768 seconds (~30 usec) */

 Now we have ~15 microseconds to read/write various registers */

 OTG omap2430 glue layer up to omap4 needs OTG_FORCESTDBY configured */

 OTG_FORCESTDBY */

 OTG_FORCESTDBY */

 ENABLEFORCE */

 36xx SGX needs a quirk for to bypass OCP IPG interrupt logic */

 OCP_DEBUG_CONFIG */

 THALIA_INT_BYPASS */

 Watchdog timer needs a disable sequence after reset */

 PRUSS needs to set MSTANDBY_INIT inorder to idle properly */

/*

 * Note that pdata->init_module() typically does a reset first. After

 * pdata->init_module() is done, PM runtime can be used for the interconnect

 * target module.

/*

 * Note that the caller must ensure the interconnect target module is enabled

 * before calling reset. Otherwise reset will not complete.

/*

 * At this point the module is configured enough to read the revision but

 * module may not be completely configured yet to use PM runtime. Enable

 * all clocks directly during init to configure the quirks needed for PM

 * runtime based on the revision register.

	/*

	 * Always enable clocks. The bootloader may or may not have enabled

	 * the related clocks.

 No re-enable of clockdomain autoidle to prevent module autoidle */

/*

 * Only some devices on omap4 and later have SYSCONFIG reset done

 * bit. We can detect this if there is no SYSSTATUS at all, or the

 * SYSTATUS bit 0 is not used. Note that some SYSSTATUS registers

 * have multiple bits for the child devices like OHCI and EHCI.

 * Depends on SYSC being parsed first.

/*

 * Many child device drivers need to have fck and opt clocks available

 * to get the clock rate for device internal configuration etc.

 Caller needs to take list_lock if ever used outside of cpu_pm */

/**

 * sysc_context_notifier - optionally reset and restore module after idle

 * @nb: notifier block

 * @cmd: unused

 * @v: unused

 *

 * Some interconnect target modules need to be restored, or reset and restored

 * on CPU_PM CPU_PM_CLUSTER_EXIT notifier. This is needed at least for am335x

 * OTG and GPMC target modules even if the modules are unused.

 No need to restore context */

/**

 * sysc_add_restored - optionally add reset and restore quirk hanlling

 * @ddata: device data

/**

 * sysc_legacy_idle_quirk - handle children in omap_device compatible way

 * @ddata: device driver data

 * @child: child device driver

 *

 * Allow idle for child devices as done with _od_runtime_suspend().

 * Otherwise many child devices will not idle because of the permanent

 * parent usecount set in pm_runtime_irq_safe().

 *

 * Note that the long term solution is to just modify the child device

 * drivers to not set pm_runtime_irq_safe() and then this can be just

 * dropped.

 Device tree configured quirks */

/*

 * Common sysc register bits found on omap2, also known as type1

 All omap2 and 3 timers, and timers 1, 2 & 10 on omap 4 and 5 */

/*

 * SHAM2 (SHA1/MD5) sysc found on omap3, a variant of sysc_regbits_omap2

 * with different sidle position

/*

 * AES register bits found on omap3 and later, a variant of

 * sysc_regbits_omap2 with different sidle position

/*

 * Common sysc register bits found on omap4, also known as type2

/*

 * Common sysc register bits found on omap4, also known as type3

/*

 * SmartReflex sysc found on omap34xx

/*

 * SmartReflex sysc found on omap36xx and later

/*

 * McASP register bits found on omap4 and later

/*

 * McASP found on dra7 and later

/*

 * FS USB host found on omap4 and later

/*

 * PRUSS found on some AM33xx, AM437x and AM57xx SoCs

	/*

	 * One time decrement of clock usage counts if left on from init.

	 * Note that we disable opt clocks unconditionally in this case

	 * as they are enabled unconditionally during init without

	 * considering sysc_opt_clks_needed() at that point.

 Keep permanent PM runtime usage count for SYSC_QUIRK_NO_IDLE */

	/*

	 * Decrement PM runtime usage count for SYSC_QUIRK_NO_IDLE_ON_INIT

	 * and SYSC_QUIRK_NO_RESET_ON_INIT

/*

 * SoC model and features detection. Only needed for SoCs that need

 * special handling for quirks, no need to list others.

 sentinel */ },

/*

 * List of SoCs variants with disabled features. By default we assume all

 * devices in the device tree are available so no need to list those SoCs.

 OMAP3430/3530 and AM3517 variants with some accelerators disabled */

 OMAP3630/DM3730 variants with some accelerators disabled */

 sentinel */ },

/*

 * One time init to detect the booted SoC, disable unavailable features

 * and initialize list for optional cpu_pm notifier.

 *

 * Note that we initialize static data shared across all ti-sysc instances

 * so ddata is only used for SoC type. This can be called from module_init

 * once we no longer need to rely on platform data.

	/*

	 * Check and warn about possible old incomplete dtb. We now want to see

	 * simple-pm-bus instead of simple-bus in the dtb for genpd using SoCs.

 Ignore devices that are not available on HS and EMU SoCs */

 timer12 */

 rng */

	/*

	 * Add disabled devices to the list based on the module base.

	 * Note that this must be done before we attempt to access the

	 * device and have module revision checks working.

/*

 * Ignore timers tagged with no-reset and no-idle. These are likely in use,

 * for example by drivers/clocksource/timer-ti-dm-systimer.c. If more checks

 * are needed, we could also look at the timer register configuration.

 sentinel */ },

 Balance use counts as PM runtime should have enabled these all */

 At least earlycon won't survive without deferred idle */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OMAP3XXX L3 Interconnect Driver

 *

 * Copyright (C) 2011 Texas Corporation

 *	Felipe Balbi <balbi@ti.com>

 *	Santosh Shilimkar <santosh.shilimkar@ti.com>

 *	Sricharan <r.sricharan@ti.com>

/*

 * omap3_l3_block_irq - handles a register block's irq

 * @l3: struct omap3_l3 *

 * @base: register block base address

 * @error: L3_ERROR_LOG register of our block

 *

 * Called in hard-irq context. Caller should take care of locking

 *

 * OMAP36xx TRM gives, on page 2001, Figure 9-10, the Typical Error

 * Analysis Sequence, we are following that sequence here, please

 * refer to that Figure for more information on the subject.

		/*

		 * if we have a timeout error, there's nothing we can

		 * do besides rebooting the board. So let's BUG on any

		 * of such errors and handle the others. timeout error

		 * is severe and not expected to occur.

 No timeout error for debug sources */

 identify the error source */

 Clear the status register */

 clear the error log register */

/*

 * Address map functions for Marvell EBU SoCs (Kirkwood, Armada

 * 370/XP, Dove, Orion5x and MV78xx0)

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2.  This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 *

 * The Marvell EBU SoCs have a configurable physical address space:

 * the physical address at which certain devices (PCIe, NOR, NAND,

 * etc.) sit can be configured. The configuration takes place through

 * two sets of registers:

 *

 * - One to configure the access of the CPU to the devices. Depending

 *   on the families, there are between 8 and 20 configurable windows,

 *   each can be use to create a physical memory window that maps to a

 *   specific device. Devices are identified by a tuple (target,

 *   attribute).

 *

 * - One to configure the access to the CPU to the SDRAM. There are

 *   either 2 (for Dove) or 4 (for other families) windows to map the

 *   SDRAM into the physical address space.

 *

 * This driver:

 *

 * - Reads out the SDRAM address decoding windows at initialization

 *   time, and fills the mvebu_mbus_dram_info structure with these

 *   informations. The exported function mv_mbus_dram_info() allow

 *   device drivers to get those informations related to the SDRAM

 *   address decoding windows. This is because devices also have their

 *   own windows (configured through registers that are part of each

 *   device register space), and therefore the drivers for Marvell

 *   devices have to configure those device -> SDRAM windows to ensure

 *   that DMA works properly.

 *

 * - Provides an API for platform code or device drivers to

 *   dynamically add or remove address decoding windows for the CPU ->

 *   device accesses. This API is mvebu_mbus_add_window_by_id(),

 *   mvebu_mbus_add_window_remap_by_id() and

 *   mvebu_mbus_del_window().

 *

 * - Provides a debugfs interface in /sys/kernel/debug/mvebu-mbus/ to

 *   see the list of CPU -> SDRAM windows and their configuration

 *   (file 'sdram') and the list of CPU -> devices windows and their

 *   configuration (file 'devices').

/*

 * DDR target is the same on all platforms.

/*

 * CPU Address Decode Windows registers

 Only on HW I/O coherency capable platforms */

 Relative to mbusbridge_base */

 Maximum number of windows, for all known platforms */

/*

 * Used to store the state of one MBus window accross suspend/resume.

 Used during suspend/resume */

/*

 * We provide two variants of the mv_mbus_dram_info() function:

 *

 * - The normal one, where the described DRAM ranges may overlap with

 *   the I/O windows, but for which the DRAM ranges are guaranteed to

 *   have a power of two size. Such ranges are suitable for the DMA

 *   masters that only DMA between the RAM and the device, which is

 *   actually all devices except the crypto engines.

 *

 * - The 'nooverlap' one, where the described DRAM ranges are

 *   guaranteed to not overlap with the I/O windows, but for which the

 *   DRAM ranges will not have power of two sizes. They will only be

 *   aligned on a 64 KB boundary, and have a size multiple of 64

 *   KB. Such ranges are suitable for the DMA masters that DMA between

 *   the crypto SRAM (which is mapped through an I/O window) and a

 *   device. This is the case for the crypto engines.

 Checks whether the given window has remap capability */

/*

 * Functions to manipulate the address decoding windows

 Checks whether the given window number is available */

/*

 * Checks whether the given (base, base+size) area doesn't overlap an

 * existing region

		/*

		 * Check if the current window overlaps with the

		 * proposed physical range

 Skip window if need remap but is not supported */

/*

 * Debugfs debugging

 Common function used for Dove, Kirkwood, Armada 370/XP and Orion 5x */

 Special function for Dove */

/*

 * SoC-specific functions and definitions

	/* The register layout is a bit annoying and the below code

	 * tries to cope with it.

	 * - At offset 0x0, there are the registers for the first 8

	 *   windows, with 4 registers of 32 bits per window (ctrl,

	 *   base, remap low, remap high)

	 * - Then at offset 0x80, there is a hole of 0x10 bytes for

	 *   the internal registers base address and internal units

	 *   sync barrier register.

	 * - Then at offset 0x90, there the registers for 12

	 *   windows, with only 2 registers of 32 bits per window

	 *   (ctrl, base).

/*

 * Use the memblock information to find the MBus bridge hole in the

 * physical address space.

		/*

		 * This part of the memory is above 4 GB, so we don't

		 * care for the MBus bridge hole.

		/*

		 * The MBus bridge hole is at the end of the RAM under

		 * the 4 GB limit.

/*

 * This function fills in the mvebu_mbus_dram_info_nooverlap data

 * structure, by looking at the mvebu_mbus_dram_info data, and

 * removing the parts of it that overlap with I/O windows.

		/*

		 * The CS is fully enclosed inside the MBus bridge

		 * area, so ignore it.

		/*

		 * Beginning of CS overlaps with end of MBus, raise CS

		 * base address, and shrink its size.

		/*

		 * End of CS overlaps with beginning of MBus, shrink

		 * CS size.

		/*

		 * We only take care of entries for which the chip

		 * select is enabled, and that don't have high base

		 * address bits set (devices can only access the first

		 * 32 bits of the memory).

 We've written 16 words to the store address */

		/*

		 * Chip select enabled?

 CS address decoding done inside */

 the DDR controller, no need to  */

 provide attributes */

 We've written 4 words to the store address */

/*

 * Some variants of Orion5x have 4 remappable windows, some other have

 * only two of them.

/*

 * Public API of the driver

 Get dram info */

 Try to find matching DRAM window for phyaddr */

	/*

	 * If no base has been initialized, doesn't make sense to

	 * register the debugfs entries. We may be on a multiplatform

	 * kernel that isn't running a Marvell EBU SoC.

/*

 * The window IDs in the ranges DT property have the following format:

 *  - bits 28 to 31: MBus custom field

 *  - bits 24 to 27: window target ID

 *  - bits 16 to 23: window attribute ID

 *  - bits  0 to 15: unused

 Allow a node with no 'ranges' property */

		/*

		 * An entry with a non-zero custom field do not

		 * correspond to a static window, so skip it.

	/*

	 * These are optional, so we make sure that resource_size(x) will

	 * return 0.

	/*

	 * Set the resource to 0 so that it can be left unmapped by

	 * mvebu_mbus_common_init() if the DT doesn't carry the

	 * necessary information. This is needed to preserve backward

	 * compatibility.

 Get optional pcie-{mem,io}-aperture properties */

 Setup statically declared windows in the DT */

/*

 * CCI cache coherent interconnect driver

 *

 * Copyright (C) 2013 ARM Ltd.

 * Author: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License version 2 as

 * published by the Free Software Foundation.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

/*

 * Use the port MSB as valid flag, shift can be made dynamic

 * by computing number of bits required for port indexes.

 * Code disabling CCI cpu ports runs with D-cache invalidated

 * and SCTLR bit clear so data accesses must be kept to a minimum

 * to improve performance; for now shift is left static to

 * avoid one more data access while disabling the CCI port.

/**

 * __cci_ace_get_port - Function to retrieve the port index connected to

 *			a cpu or device.

 *

 * @dn: device node of the device to look-up

 * @type: port type

 *

 * Return value:

 *	- CCI port index if success

 *	- -ENODEV if failure

	/*

	 * Port index look-up speeds up the function disabling ports by CPU,

	 * since the logical to port index mapping is done once and does

	 * not change after system boot.

	 * The stashed index array is initialized for all possible CPUs

	 * at probe time.

 too early to use cpu->of_node */

/*

 * Functions to enable/disable a CCI interconnect slave port

 *

 * They are called by low-level power management code to disable slave

 * interfaces snoops and DVM broadcast.

 * Since they may execute with cache data allocation disabled and

 * after the caches have been cleaned and invalidated the functions provide

 * no explicit locking since they may run with D-cache disabled, so normal

 * cacheable kernel locks based on ldrex/strex may not work.

 * Locking has to be provided by BSP implementations to ensure proper

 * operations.

/**

 * cci_port_control() - function to control a CCI port

 *

 * @port: index of the port to setup

 * @enable: if true enables the port, if false disables it

	/*

	 * This function is called from power down procedures

	 * and must not execute any instruction that might

	 * cause the processor to be put in a quiescent state

	 * (eg wfi). Hence, cpu_relax() can not be added to this

	 * read loop to optimize power, since it might hide possibly

	 * disruptive operations.

/**

 * cci_disable_port_by_cpu() - function to disable a CCI port by CPU

 *			       reference

 *

 * @mpidr: mpidr of the CPU whose CCI port should be disabled

 *

 * Disabling a CCI port for a CPU implies disabling the CCI port

 * controlling that CPU cluster. Code disabling CPU CCI ports

 * must make sure that the CPU running the code is the last active CPU

 * in the cluster ie all other CPUs are quiescent in a low power state.

 *

 * Return:

 *	0 on success

 *	-ENODEV on port look-up failure

/**

 * cci_enable_port_for_self() - enable a CCI port for calling CPU

 *

 * Enabling a CCI port for the calling CPU implies enabling the CCI

 * port controlling that CPU's cluster. Caller must make sure that the

 * CPU running the code is the first active CPU in the cluster and all

 * other CPUs are quiescent in a low power state  or waiting for this CPU

 * to complete the CCI initialization.

 *

 * Because this is called when the MMU is still off and with no stack,

 * the code must be position independent and ideally rely on callee

 * clobbered registers only.  To achieve this we must code this function

 * entirely in assembler.

 *

 * On success this returns with the proper CCI port enabled.  In case of

 * any failure this never returns as the inability to enable the CCI is

 * fatal and there is no possible recovery at this stage.

 Loop over the cpu_port array looking for a matching MPIDR */

 Found a match, now test port validity */

 no match, loop with the next cpu_port entry */

 CCI port not found -- cheaply try to stall this CPU */

 Use matched port index to look up the corresponding ports entry */

 Enable the CCI port */

 poll the status reg for completion */

/**

 * __cci_control_port_by_device() - function to control a CCI port by device

 *				    reference

 *

 * @dn: device node pointer of the device whose CCI port should be

 *      controlled

 * @enable: if true enables the port, if false disables it

 *

 * Return:

 *	0 on success

 *	-ENODEV on port look-up failure

/**

 * __cci_control_port_by_index() - function to control a CCI port by port index

 *

 * @port: port index previously retrieved with cci_ace_get_port()

 * @enable: if true enables the port, if false disables it

 *

 * Return:

 *	0 on success

 *	-ENODEV on port index out of range

 *	-EPERM if operation carried out on an ACE PORT

	/*

	 * CCI control for ports connected to CPUS is extremely fragile

	 * and must be made to go through a specific and controlled

	 * interface (ie cci_disable_port_by_cpu(); control by general purpose

	 * indexing is therefore disabled for ACE ports.

	/*

	 * If there is no CCI port that is under kernel control

	 * return early and report probe status.

 initialize a stashed array of ACE ports to speed-up look-up */

	/*

	 * Multi-cluster systems may need this data when non-coherent, during

	 * cluster power-up/power-down. Make sure it reaches main memory.

 !CONFIG_ARM_CCI400_PORT_CTRL */

 CONFIG_ARM_CCI400_PORT_CTRL */

/*

 * To sort out early init calls ordering a helper function is provided to

 * check if the CCI driver has beed initialized. Function check if the driver

 * has been initialized, if not it calls the init function that probes

 * the driver and updates the return value.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Qualcomm External Bus Interface 2 (EBI2) driver

 * an older version of the Qualcomm Parallel Interface Controller (QPIC)

 *

 * Copyright (C) 2016 Linaro Ltd.

 *

 * Author: Linus Walleij <linus.walleij@linaro.org>

 *

 * See the device tree bindings for this block for more details on the

 * hardware.

/*

 * CS0, CS1, CS4 and CS5 are two bits wide, CS2 and CS3 are one bit.

 Power management etc */

/*

 * SLOW CSn CFG

 *

 * Bits 31-28: RECOVERY recovery cycles (0 = 1, 1 = 2 etc) this is the time the

 *             memory continues to drive the data bus after OE is de-asserted.

 *             Inserted when reading one CS and switching to another CS or read

 *             followed by write on the same CS. Valid values 0 thru 15.

 * Bits 27-24: WR_HOLD write hold cycles, these are extra cycles inserted after

 *             every write minimum 1. The data out is driven from the time WE is

 *             asserted until CS is asserted. With a hold of 1, the CS stays

 *             active for 1 extra cycle etc. Valid values 0 thru 15.

 * Bits 23-16: WR_DELTA initial latency for write cycles inserted for the first

 *             write to a page or burst memory

 * Bits 15-8:  RD_DELTA initial latency for read cycles inserted for the first

 *             read to a page or burst memory

 * Bits 7-4:   WR_WAIT number of wait cycles for every write access, 0=1 cycle

 *             so 1 thru 16 cycles.

 * Bits 3-0:   RD_WAIT number of wait cycles for every read access, 0=1 cycle

 *             so 1 thru 16 cycles.

/*

 * FAST CSn CFG

 * Bits 31-28: ?

 * Bits 27-24: RD_HOLD: the length in cycles of the first segment of a read

 *             transfer. For a single read trandfer this will be the time

 *             from CS assertion to OE assertion.

 * Bits 18-24: ?

 * Bits 17-16: ADV_OE_RECOVERY, the number of cycles elapsed before an OE

 *             assertion, with respect to the cycle where ADV is asserted.

 *             2 means 2 cycles between ADV and OE. Values 0, 1, 2 or 3.

 * Bits 5:     ADDR_HOLD_ENA, The address is held for an extra cycle to meet

 *             hold time requirements with ADV assertion.

 *

 * The manual mentions "write precharge cycles" and "precharge cycles".

 * We have not been able to figure out which bit fields these correspond to

 * in the hardware, or what valid values exist. The current hypothesis is that

 * this is something just used on the FAST chip selects. There is also a "byte

 * device enable" flag somewhere for 8bit memories.

/**

 * struct cs_data - struct with info on a chipselect setting

 * @enable_mask: mask to enable the chipselect in the EBI2 config

 * @slow_cfg: offset to XMEMC slow CS config

 * @fast_cfg: offset to XMEMC fast CS config

 CS0 */

 CS1 */

 CS2 */

 CS3 */

 CS4 */

 CS5 */

/**

 * struct ebi2_xmem_prop - describes an XMEM config property

 * @prop: the device tree binding name

 * @max: maximum value for the property

 * @slowreg: true if this property is in the SLOW CS config register

 * else it is assumed to be in the FAST config register

 * @shift: the bit field start in the SLOW or FAST register for this

 * property

 boolean prop */

 Next set up the XMEMC */

 All are regular u32 values */

 First check boolean props */

 We're dealing with an u32 */

 Allegedly this turns the power save mode off */

 Disable all chipselects */

 Walk over the child nodes and see what chipselects we use */

 Figure out the chipselect */

 We have at least one child */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ARM Integrator Logical Module bus driver

 * Copyright (C) 2020 Linaro Ltd.

 * Author: Linus Walleij <linus.walleij@linaro.org>

 *

 * See the device tree bindings for this block for more details on the

 * hardware.

 All information about the connected logic modules are in here */

 Base address for the expansion modules */

 Walk over the child nodes and see what chipselects we use */

 First populate the syscon then any devices */

 Look up the system controller */

 Loop over the connected modules */

/*

 * RSB (Reduced Serial Bus) driver.

 *

 * Author: Chen-Yu Tsai <wens@csie.org>

 *

 * This file is licensed under the terms of the GNU General Public License

 * version 2.  This program is licensed "as is" without any warranty of any

 * kind, whether express or implied.

 *

 * The RSB controller looks like an SMBus controller which only supports

 * byte and word data transfers. But, it differs from standard SMBus

 * protocol on several aspects:

 * - it uses addresses set at runtime to address slaves. Runtime addresses

 *   are sent to slaves using their 12bit hardware addresses. Up to 15

 *   runtime addresses are available.

 * - it adds a parity bit every 8bits of data and address for read and

 *   write accesses; this replaces the ack bit

 * - only one read access is required to read a byte (instead of a write

 *   followed by a read access in standard SMBus protocol)

 * - there's no Ack bit after each read access

 *

 * This means this bus cannot be used to interface with standard SMBus

 * devices. Devices known to support this interface include the AXP223,

 * AXP809, and AXP806 PMICs, and the AC100 audio codec, all from X-Powers.

 *

 * A description of the operation and wire protocol can be found in the

 * RSB section of Allwinner's A80 user manual, which can be found at

 *

 *     https://github.com/allwinner-zh/documents/tree/master/A80

 *

 * This document is officially released by Allwinner.

 *

 * This driver is based on i2c-sun6i-p2wi.c, the P2WI bus driver.

 *

 RSB registers */

 Global control */

 Clock control */

 Interrupt controls */

 Interrupt status */

 Address to send with read/write command */

 Data to read/write */

 Line control */

 Device mode (init) control */

 RSB Command */

 Device address / runtime address */

 CTRL fields */

 CLK CTRL fields */

 STATUS fields */

 LINE CTRL fields*/

 DEVICE MODE CTRL field values */

 CMD values */

 DAR fields */

 bus / slave device related functions */

/**

 * sunxi_rsb_device_create() - allocate and add an RSB device

 * @rsb:	RSB controller

 * @node:	RSB slave device node

 * @hwaddr:	RSB slave hardware address

 * @rtaddr:	RSB slave runtime address

/**

 * sunxi_rsb_device_unregister(): unregister an RSB device

 * @rdev:	rsb_device to be removed

/**

 * sunxi_rsb_driver_register() - Register device driver with RSB core

 * @rdrv:	device driver to be associated with slave-device.

 *

 * This API will register the client driver with the RSB framework.

 * It is typically called from the driver's module-init function.

 common code that starts a transfer */

 abort the transfer */

 clear any interrupt flags */

 RSB regmap functions */

 RSB controller driver functions */

 Clear interrupts */

 send init sequence */

 clear interrupt status bits */

/*

 * There are 15 valid runtime addresses, though Allwinner typically

 * skips the first, for unknown reasons, and uses the following three.

 *

 * 0x17, 0x2d, 0x3a, 0x4e, 0x59, 0x63, 0x74, 0x8b,

 * 0x9c, 0xa6, 0xb1, 0xc5, 0xd2, 0xe8, 0xff

 *

 * No designs with 2 RSB slave devices sharing identical hardware

 * addresses on the same bus have been seen in the wild. All designs

 * use 0x2d for the primary PMIC, 0x3a for the secondary PMIC if

 * there is one, and 0x45 for peripheral ICs.

 *

 * The hardware does not seem to support re-setting runtime addresses.

 * Attempts to do so result in the slave devices returning a NACK.

 * Hence we just hardcode the mapping here, like Allwinner does.

 Primary PMIC: AXP223, AXP809, AXP81X, ... */

 Secondary PMIC: AXP806, ... */

 Peripheral IC: AC100, ... */

 0 is an invalid runtime address */

 Runtime addresses for all slaves should be set first */

		/*

		 * Since no devices have been registered yet, we are the

		 * only ones using the bus, we can skip locking the bus.

 setup command parameters */

 send command */

 Then we start adding devices and probing them */

 reset the controller */

	/*

	 * Clock frequency and delay calculation code is from

	 * Allwinner U-boot sources.

	 *

	 * From A83 user manual:

	 * bus clock frequency = parent clock frequency / (2 * (divider + 1))

 Keep the clock and PM reference counts consistent. */

 initialize all devices on the bus into RSB mode */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * omap-ocp2scp.c - transform ocp interface protocol to scp protocol

 *

 * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com

 * Author: Kishon Vijay Abraham I <kishon@ti.com>

	/*

	 * As per AM572x TRM: http://www.ti.com/lit/ug/spruhz6/spruhz6.pdf

	 * under section 26.3.2.2, table 26-26 OCP2SCP TIMING Caution;

	 * As per OMAP4430 TRM: http://www.ti.com/lit/ug/swpu231ap/swpu231ap.pdf

	 * under section 23.12.6.2.2 , Table 23-1213 OCP2SCP TIMING Caution;

	 * As per OMAP4460 TRM: http://www.ti.com/lit/ug/swpu235ab/swpu235ab.pdf

	 * under section 23.12.6.2.2, Table 23-1213 OCP2SCP TIMING Caution;

	 * As per OMAP543x TRM http://www.ti.com/lit/pdf/swpu249

	 * under section 27.3.2.2, Table 27-27 OCP2SCP TIMING Caution;

	 *

	 * Read path of OCP2SCP is not working properly due to low reset value

	 * of SYNC2 parameter in OCP2SCP. Suggested reset value is 0x6 or more.

/*

 * Driver for NVIDIA Generic Memory Interface

 *

 * Copyright (C) 2016 Host Mobility AB. All rights reserved.

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 stop GMI operation */

	/*

	 * We currently only support one child device due to lack of

	 * chip-select address decoding. Which means that we only have one

	 * chip-select line from the GMI controller.

 Decode the CS# */

 Invalid binding */

		/*

		 * If we reach here it means that the child node has an empty

		 * ranges or it does not exist at all. Attempt to decode the

		 * CS# from the reg property instead.

 Valid chip selects are CS0-CS7 */

 The default values that are provided below are reset values */

/*

 * OMAP L3 Interconnect error handling driver

 *

 * Copyright (C) 2011-2015 Texas Instruments Incorporated - http://www.ti.com/

 *	Santosh Shilimkar <santosh.shilimkar@ti.com>

 *	Sricharan <r.sricharan@ti.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License version 2 as

 * published by the Free Software Foundation.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

/**

 * l3_handle_target() - Handle Target specific parse and reporting

 * @l3:		pointer to l3 struct

 * @base:	base address of clkdm

 * @flag_mux:	flagmux corresponding to the event

 * @err_src:	error source index of the slave (target)

 *

 * This does the second part of the error interrupt handling:

 *	3) Parse in the slave information

 *	4) Print the logged information.

 *	5) Add dump stack to provide kernel trace.

 *	6) Clear the source if known.

 *

 * This handles two types of errors:

 *	1) Custom errors in L3 :

 *		Target like DMM/FW/EMIF generates SRESP=ERR error

 *	2) Standard L3 error:

 *		- Unsupported CMD.

 *			L3 tries to access target while it is idle

 *		- OCP disconnect.

 *		- Address hole error:

 *			If DSS/ISS/FDIF/USBHOSTFS access a target where they

 *			do not have connectivity, the error is logged in

 *			their default target which is DMM2.

 *

 *	On High Secure devices, firewall errors are possible and those

 *	can be trapped as well. But the trapping is implemented as part

 *	secure software and hence need not be implemented here.

 We DONOT expect err_src to go out of bounds */

 Read the stderrlog_main_source from clk domain */

 Nothing to be handled here as of now */

 STDERRLOG_MSTADDR Stores the NTTP master address. */

 clear the std error log*/

/**

 * l3_interrupt_handler() - interrupt handler for l3 events

 * @irq:	irq number

 * @_l3:	pointer to l3 structure

 *

 * Interrupt Handler for L3 error detection.

 *	1) Identify the L3 clockdomain partition to which the error belongs to.

 *	2) Identify the slave where the error information is logged

 *	... handle the slave event..

 *	7) if the slave is unknown, mask out the slave.

 Get the Type of interrupt */

		/*

		 * Read the regerr register of the clock domain

		 * to determine the source

 Get the corresponding error and analyse */

 Identify the source from control status register */

			/*

			 * Certain plaforms may have "undocumented" status

			 * pending on boot. So dont generate a severe warning

			 * here. Just mask it off to prevent the error from

			 * reoccuring and locking up the system.

 Mark these bits as to be ignored */

 Error found so break the for loop */

 Get mem resources */

 First entry cannot be submodule */

	/*

	 * Setup interrupt Handlers

/**

 * l3_resume_noirq() - resume function for l3_noc

 * @dev:	pointer to l3_noc device structure

 *

 * We only have the resume handler only since we

 * have already maintained the delta register

 * configuration as part of configuring the system

 Dummy read to force OCP barrier */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TI da8xx master peripheral priority driver

 *

 * Copyright (C) 2016 BayLibre SAS

 *

 * Author:

 *   Bartosz Golaszewski <bgolaszewski@baylibre.com>

/*

 * REVISIT: Linux doesn't have a good framework for the kind of performance

 * knobs this driver controls. We can't use device tree properties as it deals

 * with hardware configuration rather than description. We also don't want to

 * commit to maintaining some random sysfs attributes.

 *

 * For now we just hardcode the register values for the boards that need

 * some changes (as is the case for the LCD controller on da850-lcdk - the

 * first board we support here). When linux gets an appropriate framework,

 * we'll easily convert the driver to it.

/*

 * Default memory settings of da850 do not meet the throughput/latency

 * requirements of tilcdc. This results in the image displayed being

 * incorrect and the following warning being displayed by the LCDC

 * drm driver:

 *

 *   tilcdc da8xx_lcdc.0: tilcdc_crtc_irq(0x00000020): FIFO underfow

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020 BAIKAL ELECTRONICS, JSC

 *

 * Authors:

 *   Serge Semin <Sergey.Semin@baikalelectronics.ru>

 *

 * Baikal-T1 AXI-bus driver

/*

 * struct bt1_axi - Baikal-T1 AXI-bus private data

 * @dev: Pointer to the device structure.

 * @qos_regs: AXI Interconnect QoS tuning registers.

 * @sys_regs: Baikal-T1 System Controller registers map.

 * @irq: Errors IRQ number.

 * @aclk: AXI reference clock.

 * @arst: AXI Interconnect reset line.

 * @count: Number of errors detected.

	/*

	 * Print backtrace on each CPU. This might be pointless if the fault

	 * has happened on the same CPU as the IRQ handler is executed or

	 * the other core proceeded further execution despite the error.

	 * But if it's not, by looking at the trace we would get straight to

	 * the cause of the problem.

	/*

	 * Performing unaligned read from the memory will cause the CM2 bus

	 * error while unaligned writing - the AXI bus write error handled

	 * by this driver.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2020 BAIKAL ELECTRONICS, JSC

 *

 * Authors:

 *   Serge Semin <Sergey.Semin@baikalelectronics.ru>

 *

 * Baikal-T1 APB-bus driver

/*

 * struct bt1_apb - Baikal-T1 APB EHB private data

 * @dev: Pointer to the device structure.

 * @regs: APB EHB registers map.

 * @res: No-device error injection memory region.

 * @irq: Errors IRQ number.

 * @rate: APB-bus reference clock rate.

 * @pclk: APB-reference clock.

 * @prst: APB domain reset line.

 * @count: Number of errors detected.

	/*

	 * Print backtrace on each CPU. This might be pointless if the fault

	 * has happened on the same CPU as the IRQ handler is executed or

	 * the other core proceeded further execution despite the error.

	 * But if it's not, by looking at the trace we would get straight to

	 * the cause of the problem.

 Unmask IRQ and clear it' pending flag. */

	/*

	 * Either dummy read from the unmapped address in the APB IO area

	 * or manually set the IRQ status.

/*

 * EIM driver for Freescale's i.MX chips

 *

 * Copyright (C) 2013 Freescale Semiconductor, Inc.

 *

 * This file is licensed under the terms of the GNU General Public

 * License version 2. This program is licensed "as is" without any

 * warranty of any kind, whether express or implied.

 i.MX1/21 */

 i.MX25/27/31/35 */

 i.MX50/53/6Q */

 i.MX51 */

 CS0(128M) CS1(0M)  CS2(0M)  CS3(0M)  */

 CS0(64M)  CS1(64M) CS2(0M)  CS3(0M)  */

 CS0(64M)  CS1(32M) CS2(32M) CS3(0M)  */

 CS0(32M)  CS1(32M) CS2(32M) CS3(32M) */

 Found it. Set up IOMUXC_GPR1[11:0] with it. */

 Parse and set the timing for this device. */

	/*

	 * the child node's "reg" property may contain multiple address ranges,

	 * extract the chip select for each.

 get the CS index from this child node's "reg" property. */

 prevent re-configuring a CS that's already been configured */

 set the timing for WEIM */

 get the resource */

 get the clock */

 parse the device node */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2015 Masahiro Yamada <yamada.masahiro@socionext.com>

 System Bus Controller registers */

 base address of bank0 space */

 bank_enable */

 timing parameter 0 of bank0 */

 timing parameter 1 of bank0 */

 timing parameter 2 of bank0 */

 timing parameter 3 of bank0 */

 timing parameter 4 of bank0 */

 register stride to next bank */

 number of banks (chip select) */

 data to squash bank 0, 1 */

	/*

	 * If BOOT_SWAP was asserted on power-on-reset, the CS0 and CS1 are

	 * swapped.  In this case, bank0 and bank1 should be swapped as well.

			/*

			 * If SBC_BASE0 or SBC_BASE1 is set to zero, the access

			 * to anywhere in the system bus space is routed to

			 * bank 0 (if boot swap if off) or bank 1 (if boot swap

			 * if on).  It means that CPUs cannot get access to

			 * bank 2 or later.  In other words, bank 0/1 cannot

			 * be disabled even if its bank_enable bits is cleared.

			 * This seems odd, but it is how this hardware goes.

			 * As a workaround, dummy data (0xffffffff) should be

			 * set when the bank 0/1 is unused.  As for bank 2 and

			 * later, they can be simply disable by clearing the

			 * bank_enable bit.

 Now, the bus is configured.  Populate platform_devices below it */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Turris Mox module configuration bus driver

 *

 * Copyright (C) 2019 Marek Behún <kabel@kernel.org>

/*

 * @name:	module name for sysfs

 * @hwirq_base:	base index for IRQ for this module (-1 if no IRQs)

 * @nirqs:	how many interrupts does the shift register provide

 * @desc:	module description for kernel log

 do not change order of this array! */

/*

 * @nsame:	how many modules with same id are already in moxtet->modules

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2014-2021 Broadcom

 return 1 if the hardware doesn't have ARB_ERR_CAP_MASTER */

 Invalid captured address, bail out */

 Read the address and master */

 clear the GISB error */

 Invalid captured address, bail out */

 Invalid captured address, bail out */

 Read the address and master */

 clear the GISB error */

/*

 * Dump out gisb errors on die or panic.

 iterate over each GISB arb registered handlers */

 Interrupt is optional */

 If we do not have a valid mask, assume all masters are enabled */

	/* Proceed with reading the litteral names if we agree on the

	 * number of masters

/* Make sure we provide the same timeout value that was configured before, and

 * do this before the GISB timeout interrupt handler has any chance to run.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Intel IXP4xx Expansion Bus Controller

 * Copyright (C) 2021 Linaro Ltd.

 *

 * Author: Linus Walleij <linus.walleij@linaro.org>

 Bits inside each CS timing register */

 Only on IXP45x and IXP46x */

 Always zero */

 Only on IXP43x */

 Only on IXP43x */

 Only on IXP42x */

 Always zero */

 Fuses on the IXP43x */

 Number of device tree values in "reg" */

 Several chip selects can be joined into one device */

	/*

	 * The following will read/modify/write the configuration for one

	 * chipselect, attempting to leave the boot defaults in place unless

	 * something is explicitly defined.

 Size set-up first align to 2^9 .. 2^24 */

 All are regular u32 values */

 Handle bools (single bits) first */

 This assumes max value fills all the assigned bits (and it does) */

		/*

		 * This bit for Intel strata flash is currently unused, but let's

		 * report it if we find one.

	/*

	 * If several chip selects are joined together into one big

	 * device area, we call ourselves recursively for each successive

	 * chip select. For a 32MB flash chip this results in two calls

	 * for example.

		/*

		 * The memory window always starts from CS base so we need to add

		 * the start and size to get to the size from the start of the CS

		 * base. For example if CS0 is at 0x50000000 and the reg is

		 * <0 0xe40000 0x40000> the size is e80000.

		 *

		 * Roof this if we have several regs setting the same CS.

 Just this one, so set it up and return */

 We check that the regmap work only on first read */

 Check some fuses */

 Walk over the child nodes and see what chipselects we use */

 We have at least one child */

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2017 Hisilicon Limited, All Rights Reserved.

 * Author: Zhichang Yuan <yuanzhichang@hisilicon.com>

 * Author: Zou Rongrong <zourongrong@huawei.com>

 * Author: John Garry <john.garry@huawei.com>

/*

 * Setting this bit means each IO operation will target a different port

 * address; 0 means repeated IO operations will use the same port,

 * such as BT.

 data length of each operation */

 The max IO cycle counts supported is four per operation at maximum */

 LPC cycles count per start */

 0: read, 1: write */

 target address */

 write FIFO */

 read FIFO */

 The minimal nanosecond interval for each query on LPC cycle status */

/*

 * The maximum waiting time is about 128us.  It is specific for stream I/O,

 * such as ins.

 *

 * The fastest IO cycle time is about 390ns, but the worst case will wait

 * for extra 256 lpc clocks, so (256 + 13) * 30ns = 8 us. The maximum burst

 * cycles is 16. So, the maximum waiting time is about 128us under worst

 * case.

 *

 * Choose 1300 as the maximum.

 About 10us. This is specific for single IO operations, such as inb */

/*

 * hisi_lpc_target_in - trigger a series of LPC cycles for read operation

 * @lpcdev: pointer to hisi lpc device

 * @para: some parameters used to control the lpc I/O operations

 * @addr: the lpc I/O target port address

 * @buf: where the read back data is stored

 * @opcnt: how many I/O operations required, i.e. data width

 *

 * Returns 0 on success, non-zero on fail.

 IO mode, Read */

 whole operation must be atomic */

 whether the operation is finished */

/*

 * hisi_lpc_target_out - trigger a series of LPC cycles for write operation

 * @lpcdev: pointer to hisi lpc device

 * @para: some parameters used to control the lpc I/O operations

 * @addr: the lpc I/O target port address

 * @buf: where the data to be written is stored

 * @opcnt: how many I/O operations required, i.e. data width

 *

 * Returns 0 on success, non-zero on fail.

 default is increasing address */

 IO mode, write */

 whether the operation is finished */

/*

 * hisi_lpc_comm_in - input the data in a single operation

 * @hostdata: pointer to the device information relevant to LPC controller

 * @pio: the target I/O port address

 * @dwidth: the data length required to read from the target I/O port

 *

 * When success, data is returned. Otherwise, ~0 is returned.

/*

 * hisi_lpc_comm_out - output the data in a single operation

 * @hostdata: pointer to the device information relevant to LPC controller

 * @pio: the target I/O port address

 * @val: a value to be output from caller, maximum is four bytes

 * @dwidth: the data width required writing to the target I/O port

 *

 * This function corresponds to out(b,w,l) only.

/*

 * hisi_lpc_comm_ins - input the data in the buffer in multiple operations

 * @hostdata: pointer to the device information relevant to LPC controller

 * @pio: the target I/O port address

 * @buffer: a buffer where read/input data bytes are stored

 * @dwidth: the data width required writing to the target I/O port

 * @count: how many data units whose length is dwidth will be read

 *

 * When success, the data read back is stored in buffer pointed by buffer.

 * Returns 0 on success, -errno otherwise.

/*

 * hisi_lpc_comm_outs - output the data in the buffer in multiple operations

 * @hostdata: pointer to the device information relevant to LPC controller

 * @pio: the target I/O port address

 * @buffer: a buffer where write/output data bytes are stored

 * @dwidth: the data width required writing to the target I/O port

 * @count: how many data units whose length is dwidth will be written

/*

 * Released firmware describes the IO port max address as 0x3fff, which is

 * the max host bus address. Fixup to a proper range. This will probably

 * never be fixed in firmware.

/*

 * hisi_lpc_acpi_set_io_res - set the resources for a child

 * @child: the device node to be updated the I/O resource

 * @hostdev: the device node associated with host controller

 * @res: double pointer to be set to the address of translated resources

 * @num_res: pointer to variable to hold the number of translated resources

 *

 * Returns 0 when successful, and a negative value for failure.

 *

 * For a given host controller, each child device will have an associated

 * host-relative address resource.  This function will return the translated

 * logical PIO addresses for each child devices resources.

	/*

	 * The following code segment to retrieve the resources is common to

	 * acpi_create_platform_device(), so consider a common helper function

	 * in future.

 translate the I/O resources */

/*

 * hisi_lpc_acpi_probe - probe children for ACPI FW

 * @hostdev: LPC host device pointer

 *

 * Returns 0 when successful, and a negative value for failure.

 *

 * Create a platform device per child, fixing up the resources

 * from bus addresses to Logical PIO addresses.

 *

 Only consider the children of the host */

 ipmi */

 8250-compatible uart */

 CONFIG_ACPI

/*

 * hisi_lpc_probe - the probe callback function for hisi lpc host,

 *		   will finish all the initialization.

 * @pdev: the platform device corresponding to hisi lpc host

 *

 * Returns 0 on success, non-zero on fail.

 register the LPC host PIO resources */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * TI PWM Subsystem driver

 *

 * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/

 Populate all the child nodes here... */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *

 * Copyright (C) 2014 ARM Limited

 Keep it last! */

 Default value */

 Use a canary for reads */

 The operation can take ages... Go to sleep, 100us initially */

	/*

	 * "arm,vexpress-energy" function used to be described

	 * by its first device only, now it requires both

 Confirm board type against DT property, if available */

 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)

/*

 * Copyright 2013-2016 Freescale Semiconductor Inc.

 *

/**

 * dpcon_open() - Open a control session for the specified object

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @dpcon_id:	DPCON unique ID

 * @token:	Returned token; use in subsequent API calls

 *

 * This function can be used to open a control session for an

 * already created object; an object may have been declared in

 * the DPL or by calling the dpcon_create() function.

 * This function returns a unique authentication token,

 * associated with the specific object ID and the specific MC

 * portal; this token must be used in all subsequent commands for

 * this specific object.

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

 retrieve response parameters */

/**

 * dpcon_close() - Close the control session of the object

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPCON object

 *

 * After this function is called, no further operations are

 * allowed on the object without opening a new control session.

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

/**

 * dpcon_enable() - Enable the DPCON

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPCON object

 *

 * Return:	'0' on Success; Error code otherwise

 prepare command */

 send command to mc*/

/**

 * dpcon_disable() - Disable the DPCON

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPCON object

 *

 * Return:	'0' on Success; Error code otherwise

 prepare command */

 send command to mc*/

/**

 * dpcon_reset() - Reset the DPCON, returns the object to initial state.

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPCON object

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

/**

 * dpcon_get_attributes() - Retrieve DPCON attributes.

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPCON object

 * @attr:	Object's attributes

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

 retrieve response parameters */

/**

 * dpcon_set_notification() - Set DPCON notification destination

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPCON object

 * @cfg:	Notification parameters

 *

 * Return:	'0' on Success; Error code otherwise

 prepare command */

 send command to mc*/

 SPDX-License-Identifier: GPL-2.0

/*

 * Management Complex (MC) userspace support

 *

 * Copyright 2021 NXP

 *

 Common commands amongst all types of objects. Must be checked last. */

 Check if this is an accepted MC command */

	/* Check if the size of the command is honored. Anything beyond the

	 * last valid byte of the command should be zeroed.

	/* Some MC commands request a token to be passed so that object

	 * identification is possible. Check if the token passed in the command

	 * is as expected.

 If needed, check if the module ID passed is valid */

 The module ID is represented by bits [4:9] from the cmdid */

	/* Some commands alter how hardware resources are managed. For these

	 * commands, check for CAP_NET_ADMIN.

 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)

/*

 * Copyright 2013-2016 Freescale Semiconductor Inc.

 *

/**

 * fsl_create_mc_io() - Creates an MC I/O object

 *

 * @dev: device to be associated with the MC I/O object

 * @mc_portal_phys_addr: physical address of the MC portal to use

 * @mc_portal_size: size in bytes of the MC portal

 * @dpmcp_dev: Pointer to the DPMCP object associated with this MC I/O

 * object or NULL if none.

 * @flags: flags for the new MC I/O object

 * @new_mc_io: Area to return pointer to newly created MC I/O object

 *

 * Returns '0' on Success; Error code otherwise.

/**

 * fsl_destroy_mc_io() - Destroys an MC I/O object

 *

 * @mc_io: MC I/O object to destroy

/**

 * fsl_mc_portal_allocate - Allocates an MC portal

 *

 * @mc_dev: MC device for which the MC portal is to be allocated

 * @mc_io_flags: Flags for the fsl_mc_io object that wraps the allocated

 * MC portal.

 * @new_mc_io: Pointer to area where the pointer to the fsl_mc_io object

 * that wraps the allocated MC portal is to be returned

 *

 * This function allocates an MC portal from the device's parent DPRC,

 * from the corresponding MC bus' pool of MC portals and wraps

 * it in a new fsl_mc_io object. If 'mc_dev' is a DPRC itself, the

 * portal is allocated from its own MC bus.

/**

 * fsl_mc_portal_free - Returns an MC portal to the pool of free MC portals

 * of a given MC bus

 *

 * @mc_io: Pointer to the fsl_mc_io object that wraps the MC portal to free

	/*

	 * Every mc_io obtained by calling fsl_mc_portal_allocate() is supposed

	 * to have a DPMCP object associated with.

/**

 * fsl_mc_portal_reset - Resets the dpmcp object for a given fsl_mc_io object

 *

 * @mc_io: Pointer to the fsl_mc_io object that wraps the MC portal to free

 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)

/*

 * Copyright 2013-2016 Freescale Semiconductor Inc.

 *

 * I/O services to send MC commands to the MC hardware

 *

/*

 * Timeout in milliseconds to wait for the completion of an MC command

/*

 * usleep_range() min and max values used to throttle down polling

 * iterations while waiting for MC command completion

/**

 * mc_write_command - writes a command to a Management Complex (MC) portal

 *

 * @portal: pointer to an MC portal

 * @cmd: pointer to a filled command

 copy command parameters into the portal */

		/*

		 * Data is already in the expected LE byte-order. Do an

		 * extra LE -> CPU conversion so that the CPU -> LE done in

		 * the device io write api puts it back in the right order.

 submit the command by writing the header */

/**

 * mc_read_response - reads the response for the last MC command from a

 * Management Complex (MC) portal

 *

 * @portal: pointer to an MC portal

 * @resp: pointer to command response buffer

 *

 * Returns MC_CMD_STATUS_OK on Success; Error code otherwise.

 Copy command response header from MC portal: */

 Copy command response data from MC portal: */

		/*

		 * Data is expected to be in LE byte-order. Do an

		 * extra CPU -> LE to revert the LE -> CPU done in

		 * the device io read api.

/**

 * mc_polling_wait_preemptible() - Waits for the completion of an MC

 *                                 command doing preemptible polling.

 *                                 uslepp_range() is called between

 *                                 polling iterations.

 * @mc_io: MC I/O object to be used

 * @cmd: command buffer to receive MC response

 * @mc_status: MC command completion status

	/*

	 * Wait for response from the MC hardware:

		/*

		 * TODO: When MC command completion interrupts are supported

		 * call wait function here instead of usleep_range()

/**

 * mc_polling_wait_atomic() - Waits for the completion of an MC command

 *                            doing atomic polling. udelay() is called

 *                            between polling iterations.

 * @mc_io: MC I/O object to be used

 * @cmd: command buffer to receive MC response

 * @mc_status: MC command completion status

/**

 * mc_send_command() - Sends a command to the MC device using the given

 *                     MC I/O object

 * @mc_io: MC I/O object to be used

 * @cmd: command to be sent

 *

 * Returns '0' on Success; Error code otherwise.

	/*

	 * Send command to the MC hardware:

	/*

	 * Wait for response from the MC hardware:

 SPDX-License-Identifier: GPL-2.0

/*

 * fsl-mc object allocator driver

 *

 * Copyright (C) 2013-2016 Freescale Semiconductor, Inc.

 *

/**

 * fsl_mc_resource_pool_add_device - add allocatable object to a resource

 * pool of a given fsl-mc bus

 *

 * @mc_bus: pointer to the fsl-mc bus

 * @pool_type: pool type

 * @mc_dev: pointer to allocatable fsl-mc device

/**

 * fsl_mc_resource_pool_remove_device - remove an allocatable device from a

 * resource pool

 *

 * @mc_dev: pointer to allocatable fsl-mc device

 *

 * It permanently removes an allocatable fsl-mc device from the resource

 * pool. It's an error if the device is in use.

	/*

	 * If the device is currently allocated, its resource is not

	 * in the free list and thus, the device cannot be removed.

/**

 * fsl_mc_object_allocate - Allocates an fsl-mc object of the given

 * pool type from a given fsl-mc bus instance

 *

 * @mc_dev: fsl-mc device which is used in conjunction with the

 * allocated object

 * @pool_type: pool type

 * @new_mc_adev: pointer to area where the pointer to the allocated device

 * is to be returned

 *

 * Allocatable objects are always used in conjunction with some functional

 * device.  This function allocates an object of the specified type from

 * the DPRC containing the functional device.

 *

 * NOTE: pool_type must be different from FSL_MC_POOL_MCP, since MC

 * portals are allocated using fsl_mc_portal_allocate(), instead of

 * this function.

/**

 * fsl_mc_object_free - Returns an fsl-mc object to the resource

 * pool where it came from.

 * @mc_adev: Pointer to the fsl-mc device

/*

 * A DPRC and the devices in the DPRC all share the same GIC-ITS device

 * ID.  A block of IRQs is pre-allocated and maintained in a pool

 * from which devices can allocate them when needed.

/*

 * Initialize the interrupt pool associated with an fsl-mc bus.

 * It allocates a block of IRQs from the GIC-ITS.

 do nothing if the IRQ pool is already populated */

		/*

		 * NOTE: This mc_dev_irq's MSI addr/value pair will be set

		 * by the fsl_mc_msi_write_msg() callback

/*

 * Teardown the interrupt pool associated with an fsl-mc bus.

 * It frees the IRQs that were allocated to the pool, back to the GIC-ITS.

/*

 * Allocate the IRQs required by a given fsl-mc device.

/*

 * Frees the IRQs that were allocated for an fsl-mc device.

/*

 * fsl_mc_allocator_probe - callback invoked when an allocatable device is

 * being added to the system

/*

 * fsl_mc_allocator_remove - callback invoked when an allocatable device is

 * being removed from the system

 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)

/*

 * Copyright 2013-2016 Freescale Semiconductor Inc.

 * Copyright 2020 NXP

 *

/*

 * cache the DPRC version to reduce the number of commands

 * towards the mc firmware

/**

 * dprc_open() - Open DPRC object for use

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @container_id: Container ID to open

 * @token:	Returned token of DPRC object

 *

 * Return:	'0' on Success; Error code otherwise.

 *

 * @warning	Required before any operation on the object.

 prepare command */

 send command to mc*/

 retrieve response parameters */

/**

 * dprc_close() - Close the control session of the object

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPRC object

 *

 * After this function is called, no further operations are

 * allowed on the object without opening a new control session.

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

/**

 * dprc_reset_container - Reset child container.

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPRC object

 * @child_container_id:	ID of the container to reset

 * @options: 32 bit options:

 *   - 0 (no bits set) - all the objects inside the container are

 *     reset. The child containers are entered recursively and the

 *     objects reset. All the objects (including the child containers)

 *     are closed.

 *   - bit 0 set - all the objects inside the container are reset.

 *     However the child containers are not entered recursively.

 *     This option is supported for API versions >= 6.5

 * In case a software context crashes or becomes non-responsive, the parent

 * may wish to reset its resources container before the software context is

 * restarted.

 *

 * This routine informs all objects assigned to the child container that the

 * container is being reset, so they may perform any cleanup operations that are

 * needed. All objects handles that were owned by the child container shall be

 * closed.

 *

 * Note that such request may be submitted even if the child software context

 * has not crashed, but the resulting object cleanup operations will not be

 * aware of that.

 *

 * Return:	'0' on Success; Error code otherwise.

	/*

	 * If the DPRC object version was not yet cached, cache it now.

	 * Otherwise use the already cached value.

	/*

	 * MC API 6.5 introduced a new field in the command used to pass

	 * some flags.

	 * Bit 0 indicates that the child containers are not recursively reset.

 prepare command */

 send command to mc*/

/**

 * dprc_set_irq() - Set IRQ information for the DPRC to trigger an interrupt.

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPRC object

 * @irq_index:	Identifies the interrupt index to configure

 * @irq_cfg:	IRQ configuration

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

/**

 * dprc_set_irq_enable() - Set overall interrupt state.

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPRC object

 * @irq_index:	The interrupt index to configure

 * @en:		Interrupt state - enable = 1, disable = 0

 *

 * Allows GPP software to control when interrupts are generated.

 * Each interrupt can have up to 32 causes.  The enable/disable control's the

 * overall interrupt state. if the interrupt is disabled no causes will cause

 * an interrupt.

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

/**

 * dprc_set_irq_mask() - Set interrupt mask.

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPRC object

 * @irq_index:	The interrupt index to configure

 * @mask:	event mask to trigger interrupt;

 *			each bit:

 *				0 = ignore event

 *				1 = consider event for asserting irq

 *

 * Every interrupt can have up to 32 causes and the interrupt model supports

 * masking/unmasking each cause independently

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

/**

 * dprc_get_irq_status() - Get the current status of any pending interrupts.

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPRC object

 * @irq_index:	The interrupt index to configure

 * @status:	Returned interrupts status - one bit per cause:

 *			0 = no interrupt pending

 *			1 = interrupt pending

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

 retrieve response parameters */

/**

 * dprc_clear_irq_status() - Clear a pending interrupt's status

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPRC object

 * @irq_index:	The interrupt index to configure

 * @status:	bits to clear (W1C) - one bit per cause:

 *					0 = don't change

 *					1 = clear status bit

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

/**

 * dprc_get_attributes() - Obtains container attributes

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPRC object

 * @attr:	Returned container attributes

 *

 * Return:     '0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

 retrieve response parameters */

/**

 * dprc_get_obj_count() - Obtains the number of objects in the DPRC

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPRC object

 * @obj_count:	Number of objects assigned to the DPRC

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

 retrieve response parameters */

/**

 * dprc_get_obj() - Get general information on an object

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPRC object

 * @obj_index:	Index of the object to be queried (< obj_count)

 * @obj_desc:	Returns the requested object descriptor

 *

 * The object descriptors are retrieved one by one by incrementing

 * obj_index up to (not including) the value of obj_count returned

 * from dprc_get_obj_count(). dprc_get_obj_count() must

 * be called prior to dprc_get_obj().

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

 retrieve response parameters */

/**

 * dprc_set_obj_irq() - Set IRQ information for object to trigger an interrupt.

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPRC object

 * @obj_type:	Type of the object to set its IRQ

 * @obj_id:	ID of the object to set its IRQ

 * @irq_index:	The interrupt index to configure

 * @irq_cfg:	IRQ configuration

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

/**

 * dprc_get_obj_region() - Get region information for a specified object.

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPRC object

 * @obj_type:	Object type as returned in dprc_get_obj()

 * @obj_id:	Unique object instance as returned in dprc_get_obj()

 * @region_index: The specific region to query

 * @region_desc:  Returns the requested region descriptor

 *

 * Return:	'0' on Success; Error code otherwise.

    /*

     * If the DPRC object version was not yet cached, cache it now.

     * Otherwise use the already cached value.

		/*

		 * MC API version 6.6 changed the size of the MC portals and software

		 * portals to 64K (as implemented by hardware). If older API is in use the

		 * size reported is less (64 bytes for mc portals and 4K for software

		 * portals).

		/*

		 * MC API version 6.3 introduced a new field to the region

		 * descriptor: base_address. If the older API is in use then the base

		 * address is set to zero to indicate it needs to be obtained elsewhere

		 * (typically the device tree).

 send command to mc*/

 retrieve response parameters */

/**

 * dprc_get_api_version - Get Data Path Resource Container API version

 * @mc_io:	Pointer to Mc portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @major_ver:	Major version of Data Path Resource Container API

 * @minor_ver:	Minor version of Data Path Resource Container API

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc */

 retrieve response parameters */

/**

 * dprc_get_container_id - Get container ID associated with a given portal.

 * @mc_io:		Pointer to Mc portal's I/O object

 * @cmd_flags:		Command flags; one or more of 'MC_CMD_FLAG_'

 * @container_id:	Requested container id

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

 retrieve response parameters */

/**

 * dprc_get_connection() - Get connected endpoint and link status if connection

 *			exists.

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPRC object

 * @endpoint1:	Endpoint 1 configuration parameters

 * @endpoint2:	Returned endpoint 2 configuration parameters

 * @state:	Returned link state:

 *		1 - link is up;

 *		0 - link is down;

 *		-1 - no connection (endpoint2 information is irrelevant)

 *

 * Return:     '0' on Success; -ENOTCONN if connection does not exist.

 prepare command */

 send command to mc */

 retrieve response parameters */

 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)

/*

 * Copyright 2013-2016 Freescale Semiconductor Inc.

 *

/**

 * dpmcp_open() - Open a control session for the specified object.

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @dpmcp_id:	DPMCP unique ID

 * @token:	Returned token; use in subsequent API calls

 *

 * This function can be used to open a control session for an

 * already created object; an object may have been declared in

 * the DPL or by calling the dpmcp_create function.

 * This function returns a unique authentication token,

 * associated with the specific object ID and the specific MC

 * portal; this token must be used in all subsequent commands for

 * this specific object

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

 retrieve response parameters */

/**

 * dpmcp_close() - Close the control session of the object

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPMCP object

 *

 * After this function is called, no further operations are

 * allowed on the object without opening a new control session.

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

/**

 * dpmcp_reset() - Reset the DPMCP, returns the object to initial state.

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPMCP object

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)

/*

 * Copyright 2013-2016 Freescale Semiconductor Inc.

 *

/**

 * dpbp_open() - Open a control session for the specified object.

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @dpbp_id:	DPBP unique ID

 * @token:	Returned token; use in subsequent API calls

 *

 * This function can be used to open a control session for an

 * already created object; an object may have been declared in

 * the DPL or by calling the dpbp_create function.

 * This function returns a unique authentication token,

 * associated with the specific object ID and the specific MC

 * portal; this token must be used in all subsequent commands for

 * this specific object

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

 retrieve response parameters */

/**

 * dpbp_close() - Close the control session of the object

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPBP object

 *

 * After this function is called, no further operations are

 * allowed on the object without opening a new control session.

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

/**

 * dpbp_enable() - Enable the DPBP.

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPBP object

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

/**

 * dpbp_disable() - Disable the DPBP.

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPBP object

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

/**

 * dpbp_reset() - Reset the DPBP, returns the object to initial state.

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPBP object

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

/**

 * dpbp_get_attributes - Retrieve DPBP attributes.

 *

 * @mc_io:	Pointer to MC portal's I/O object

 * @cmd_flags:	Command flags; one or more of 'MC_CMD_FLAG_'

 * @token:	Token of DPBP object

 * @attr:	Returned object's attributes

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

 retrieve response parameters */

 SPDX-License-Identifier: GPL-2.0

/*

 * Freescale Management Complex (MC) bus driver

 *

 * Copyright (C) 2014-2016 Freescale Semiconductor, Inc.

 * Copyright 2019-2020 NXP

 * Author: German Rivera <German.Rivera@freescale.com>

 *

/*

 * Default DMA mask for devices on a fsl-mc bus

/**

 * struct fsl_mc - Private data of a "fsl,qoriq-mc" platform device

 * @root_mc_bus_dev: fsl-mc device representing the root DPRC

 * @num_translation_ranges: number of entries in addr_translation_ranges

 * @translation_ranges: array of bus to system address translation ranges

 * @fsl_mc_regs: base address of register bank

/**

 * struct fsl_mc_addr_translation_range - bus to system address translation

 * range

 * @mc_region_type: Type of MC region for the range being translated

 * @start_mc_offset: Start MC offset of the range being translated

 * @end_mc_offset: MC offset of the first byte after the range (last MC

 * offset of the range is end_mc_offset - 1)

 * @start_phys_addr: system physical address corresponding to start_mc_addr

/**

 * fsl_mc_bus_match - device to driver matching callback

 * @dev: the fsl-mc device to match against

 * @drv: the device driver to search for matching fsl-mc object type

 * structures

 *

 * Returns 1 on success, 0 otherwise.

 When driver_override is set, only bind to the matching driver */

	/*

	 * If the object is not 'plugged' don't match.

	 * Only exception is the root DPRC, which is a special case.

	/*

	 * Traverse the match_id table of the given driver, trying to find

	 * a matching for the given device.

/*

 * fsl_mc_bus_uevent - callback invoked when a device is added

/*

 * __fsl_mc_driver_register - registers a child device driver with the

 * MC bus

 *

 * This function is implicitly invoked from the registration function of

 * fsl_mc device drivers, which is generated by the

 * module_fsl_mc_driver() macro.

/*

 * fsl_mc_driver_unregister - unregisters a device driver from the

 * MC bus

/**

 * mc_get_version() - Retrieves the Management Complex firmware

 *			version information

 * @mc_io:		Pointer to opaque I/O object

 * @cmd_flags:		Command flags; one or more of 'MC_CMD_FLAG_'

 * @mc_ver_info:	Returned version information structure

 *

 * Return:	'0' on Success; Error code otherwise.

 prepare command */

 send command to mc*/

 retrieve response parameters */

/**

 * fsl_mc_get_version - function to retrieve the MC f/w version information

 *

 * Return:	mc version when called after fsl-mc-bus probe; NULL otherwise.

/*

 * fsl_mc_get_root_dprc - function to traverse to the root dprc

		/*

		 * Do identity mapping:

		/*

		 * This function should not have been called for this MC object

		 * type, as this object type is not supposed to have MMIO

		 * regions

		/*

		 * Older MC only returned region offset and no base address

		 * If base address is in the region_desc use it otherwise

		 * revert to old mechanism

			/*

			 * Some versions of the MC firmware wrongly report

			 * 0 for register base address of the DPMCP associated

			 * with child DPRC objects thus rendering them unusable.

			 * This is particularly troublesome in ACPI boot

			 * scenarios where the legacy way of extracting this

			 * base address from the device tree does not apply.

			 * Given that DPMCPs share the same base address,

			 * workaround this by using the base address extracted

			 * from the root DPRC container.

/*

 * fsl_mc_is_root_dprc - function to check if a given device is a root dprc

/*

 * Add a newly discovered fsl-mc device to be visible in Linux

		/*

		 * Allocate an MC bus device object:

		/*

		 * Allocate a regular fsl_mc_device object:

		/*

		 * To get the DPRC's ICID, we need to open the DPRC

		 * in get_dprc_icid(). For child DPRCs, we do so using the

		 * parent DPRC's MC portal instead of the child DPRC's MC

		 * portal, in case the child DPRC is already opened with

		 * its own portal (e.g., the DPRC used by AIOP).

		 *

		 * NOTE: There cannot be more than one active open for a

		 * given MC object, using the same MC portal.

			/*

			 * device being added is a child DPRC device

			/*

			 * device being added is the root DPRC device

		/*

		 * A non-DPRC object has to be a child of a DPRC, use the

		 * parent's ICID and interrupt domain.

	/*

	 * Get MMIO regions for the device from the MC:

	 *

	 * NOTE: the root DPRC is a special case as its MMIO region is

	 * obtained from the device tree

	/*

	 * The device-specific probe callback will get invoked by device_add()

/**

 * fsl_mc_device_remove - Remove an fsl-mc device from being visible to

 * Linux

 *

 * @mc_dev: Pointer to an fsl-mc device

	/*

	 * The device-specific remove callback will get invoked by device_del()

	/*

	 * We know that the device has an endpoint because we verified by

	 * interrogating the firmware. This is the case when the device was not

	 * yet discovered by the fsl-mc bus, thus the lookup returned NULL.

	 * Force a rescan of the devices in this container and retry the lookup.

	/*

	 * This means that the endpoint might reside in a different isolation

	 * context (DPRC/container). Not much to do, so return a permssion

	 * error.

		/*

		 * Missing or empty ranges property ("ranges;") for the

		 * 'fsl,qoriq-mc' node. In this case, identity mapping

		 * will be used.

/*

 * fsl_mc_bus_probe - callback invoked when the root MC bus is being

 * added

			/*

			 * HW ORs the PL and BMT bit, places the result in bit

			 * 14 of the StreamID and ORs in the ICID. Calculate it

			 * accordingly.

		/*

		 * Some bootloaders pause the MC firmware before booting the

		 * kernel so that MC will not cause faults as soon as the

		 * SMMU probes due to the fact that there's no configuration

		 * in place for MC.

		 * At this point MC should have all its SMMU setup done so make

		 * sure it is resumed.

	/*

	 * Get physical address of MC portal for the root DPRC:

/*

 * fsl_mc_bus_remove - callback invoked when the root MC bus is being

 * removed

		/*

		 * Pause the MC firmware so that it doesn't crash in certain

		 * scenarios, such as kexec.

	/*

	 * Make sure that the MC firmware is paused before the IOMMU setup for

	 * it is done or otherwise the firmware will crash right after the SMMU

	 * gets probed and enabled.

 SPDX-License-Identifier: GPL-2.0

/*

 * Freescale data path resource container (DPRC) driver

 *

 * Copyright (C) 2014-2016 Freescale Semiconductor, Inc.

 * Copyright 2019-2020 NXP

 * Author: German Rivera <German.Rivera@freescale.com>

 *

/**

 * dprc_remove_devices - Removes devices for objects removed from a DPRC

 *

 * @mc_bus_dev: pointer to the fsl-mc device that represents a DPRC object

 * @obj_desc_array: array of object descriptors for child objects currently

 * present in the DPRC in the MC.

 * @num_child_objects_in_mc: number of entries in obj_desc_array

 *

 * Synchronizes the state of the Linux bus driver with the actual state of

 * the MC by removing devices that represent MC objects that have

 * been dynamically removed in the physical DPRC.

		/*

		 * Remove child objects that are in the DPRC in Linux,

		 * but not in the MC:

		/*

		 * There are no child objects for this DPRC in the MC.

		 * So, remove all the child devices from Linux:

/**

 * check_plugged_state_change - Check change in an MC object's plugged state

 *

 * @mc_dev: pointer to the fsl-mc device for a given MC object

 * @obj_desc: pointer to the MC object's descriptor in the MC

 *

 * If the plugged state has changed from unplugged to plugged, the fsl-mc

 * device is bound to the corresponding device driver.

 * If the plugged state has changed from plugged to unplugged, the fsl-mc

 * device is unbound from the corresponding device driver.

	/*

	 * Check if device is already known to Linux:

/**

 * dprc_add_new_devices - Adds devices to the logical bus for a DPRC

 *

 * @mc_bus_dev: pointer to the fsl-mc device that represents a DPRC object

 * @obj_desc_array: array of device descriptors for child devices currently

 * present in the physical DPRC.

 * @num_child_objects_in_mc: number of entries in obj_desc_array

 *

 * Synchronizes the state of the Linux bus driver with the actual

 * state of the MC by adding objects that have been newly discovered

 * in the physical DPRC.

 probe the allocable objects first */

/**

 * dprc_scan_objects - Discover objects in a DPRC

 *

 * @mc_bus_dev: pointer to the fsl-mc device that represents a DPRC object

 * @alloc_interrupts: if true the function allocates the interrupt pool,

 * otherwise the interrupt allocation is delayed

 *

 * Detects objects added and removed from a DPRC and synchronizes the

 * state of the Linux bus driver, MC by adding and removing

 * devices accordingly.

 * Two types of devices can be found in a DPRC: allocatable objects (e.g.,

 * dpbp, dpmcp) and non-allocatable devices (e.g., dprc, dpni).

 * All allocatable devices needed to be probed before all non-allocatable

 * devices, to ensure that device drivers for non-allocatable

 * devices can allocate any type of allocatable devices.

 * That is, we need to ensure that the corresponding resource pools are

 * populated before they can get allocation requests from probe callbacks

 * of the device drivers for the non-allocatable devices.

		/*

		 * Discover objects currently present in the physical DPRC:

				/*

				 * Mark the obj entry as "invalid", by using the

				 * empty string as obj type:

			/*

			 * add a quirk for all versions of dpsec < 4.0...none

			 * are coherent regardless of what the MC reports.

	/*

	 * Allocate IRQ's before binding the scanned devices with their

	 * respective drivers.

/**

 * dprc_scan_container - Scans a physical DPRC and synchronizes Linux bus state

 *

 * @mc_bus_dev: pointer to the fsl-mc device that represents a DPRC object

 * @alloc_interrupts: if true the function allocates the interrupt pool,

 *                    otherwise the interrupt allocation is delayed

 * Scans the physical DPRC and synchronizes the state of the Linux

 * bus driver with the actual state of the MC by adding and removing

 * devices as appropriate.

	/*

	 * Discover objects in the DPRC:

/**

 * dprc_irq0_handler - Regular ISR for DPRC interrupt 0

 *

 * @irq_num: IRQ number of the interrupt being handled

 * @arg: Pointer to device structure

/**

 * dprc_irq0_handler_thread - Handler thread function for DPRC interrupt 0

 *

 * @irq_num: IRQ number of the interrupt being handled

 * @arg: Pointer to device structure

			/*

			 * If the error is -ENXIO, we ignore it, as it indicates

			 * that the object scan was aborted, as we detected that

			 * an object was removed from the DPRC in the MC, while

			 * we were scanning the DPRC.

/*

 * Disable and clear interrupt for a given DPRC object

	/*

	 * Disable generation of interrupt, while we configure it:

	/*

	 * Disable all interrupt causes for the interrupt:

	/*

	 * Clear any leftover interrupts:

	/*

	 * NOTE: devm_request_threaded_irq() invokes the device-specific

	 * function that programs the MSI physically in the device

	/*

	 * Enable all interrupt causes for the interrupt:

	/*

	 * Enable generation of the interrupt:

/*

 * Setup interrupt for a given DPRC device

/**

 * dprc_setup - opens and creates a mc_io for DPRC

 *

 * @mc_dev: Pointer to fsl-mc device representing a DPRC

 *

 * It opens the physical DPRC in the MC.

 * It configures the DPRC portal used to communicate with MC

		/*

		 * This is a child DPRC:

/**

 * dprc_probe - callback invoked when a DPRC is being bound to this driver

 *

 * @mc_dev: Pointer to fsl-mc device representing a DPRC

 *

 * It opens the physical DPRC in the MC.

 * It scans the DPRC to discover the MC objects contained in it.

 * It creates the interrupt pool for the MC bus associated with the DPRC.

 * It configures the interrupts for the DPRC device itself.

	/*

	 * Discover MC objects in DPRC object:

	/*

	 * Configure interrupt for the DPRC object associated with this MC bus:

/*

 * Tear down interrupt for a given DPRC object

/**

 * dprc_cleanup - function that cleanups a DPRC

 *

 * @mc_dev: Pointer to fsl-mc device representing the DPRC

 *

 * It closes the DPRC device in the MC.

 * It destroys the interrupt pool associated with this MC bus.

	/* this function should be called only for DPRCs, it

	 * is an error to call it for regular objects

	/* if this step fails we cannot go further with cleanup as there is no way of

	 * communicating with the firmware

/**

 * dprc_remove - callback invoked when a DPRC is being unbound from this driver

 *

 * @mc_dev: Pointer to fsl-mc device representing the DPRC

 *

 * It removes the DPRC's child objects from Linux (not from the MC) and

 * closes the DPRC device in the MC.

 * It tears down the interrupts that were configured for the DPRC device.

 * It destroys the interrupt pool associated with this MC bus.

 SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)

/*

 * Copyright 2021 NXP

 *

 prepare command */

 send command to mc*/

 retrieve response parameters */

 prepare command */

 send command to mc*/

 prepare command */

 send command to mc*/

 SPDX-License-Identifier: GPL-2.0

/*

 * Freescale Management Complex (MC) bus driver MSI support

 *

 * Copyright (C) 2015-2016 Freescale Semiconductor, Inc.

 * Author: German Rivera <German.Rivera@freescale.com>

 *

/*

 * Generate a unique ID identifying the interrupt (only used within the MSI

 * irqdomain.  Combine the icid with the interrupt index.

	/*

	 * Make the base hwirq value for ICID*10000 so it is readable

	 * as a decimal value in /proc/interrupts.

	/*

	 * set_desc should not be set by the caller

	/*

	 * msi_desc->msg.address is 0x0 when this function is invoked in

	 * the free_irq() code path. In this case, for the MC, we don't

	 * really need to "unprogram" the MSI, so we just return.

		/*

		 * IRQ is for the mc_bus_dev's DPRC itself

		/*

		 * IRQ is for for a child device of mc_bus_dev

/*

 * NOTE: This function is invoked with interrupts disabled

	/*

	 * Program the MSI (paddr, value) pair in the device:

	/*

	 * irq_write_msi_msg should not be set by the caller

/**

 * fsl_mc_msi_create_irq_domain - Create a fsl-mc MSI interrupt domain

 * @fwnode:	Optional firmware node of the interrupt controller

 * @info:	MSI domain info

 * @parent:	Parent irq domain

 *

 * Updates the domain and chip ops and creates a fsl-mc MSI

 * interrupt domain.

 *

 * Returns:

 * A domain pointer or NULL in case of failure.

		/*

		 * if the msi-map property is missing assume that all the

		 * child containers inherit the domain from the parent

	/*

	 * NOTE: Calling this function will trigger the invocation of the

	 * its_fsl_mc_msi_prepare() callback

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * MHI PCI driver - MHI over PCI controller driver

 *

 * This module is a generic driver for registering MHI-over-PCI devices,

 * such as PCIe QCOM modems.

 *

 * Copyright (C) 2020 Linaro Ltd <loic.poulain@linaro.org>

/**

 * struct mhi_pci_dev_info - MHI PCI device specific information

 * @config: MHI controller configuration

 * @name: name of the PCI module

 * @fw: firmware path (if any)

 * @edl: emergency download mode firmware path (if any)

 * @bar_num: PCI base address register to use for MHI MMIO register space

 * @dma_data_width: DMA transfer word size (32 or 64 bits)

 * @mru_default: default MRU size for MBIM network packets

 * @sideband_wake: Devices using dedicated sideband GPIO for wakeup instead

 *		   of inband wake support (such as sdx24)

 first ring is control+data ring */

 DIAG dedicated event ring */

 Hardware channels request dedicated hardware event rings */

 The EDL firmware is a flash-programmer exposing firehose protocol */

 MBIM Control Channel */

 MBIM Data Channel */

 EM120R-GL (sdx24) */

 EM160R-GL (sdx24) */

 T99W175 (sdx55), Both for eSIM and Non-eSIM */

 DW5930e (sdx55), With eSIM, It's also T99W175 */

 DW5930e (sdx55), Non-eSIM, It's also T99W175 */

 MV31-W (Cinterion) */

 Nothing to do for now */

 no-op */

 no-op */

 no-op */

	/*

	 * Alloc one MSI vector for BHI + one vector per event ring, ideally...

	 * No explicit pci_free_irq_vectors required, done by pcim_release.

 Patch msi vectors, use only one (shared) */

	/* The runtime_get() MHI callback means:

	 *    Do whatever is requested to leave M3.

	/* The runtime_put() MHI callback means:

	 *    Device can be moved in M3 state.

 Clean up MHI state */

 reschedule in two seconds */

 mhi_pdev.mhi_cntrl must be zero-initialized */

	/* Have stored pci confspace at hand for restore in sudden PCI error.

	 * cache the state locally and discard the PCI core one.

 MHI bus does not power up the controller by default */

 start health check */

 Only allow runtime-suspend if PME capable (for wakeup) */

 balancing probe put_noidle */

 Clean up MHI state */

 cause internal device reset */

 Be sure device reset has been executed */

 Restore initial known working PCI state */

 Is device status available ? */

 Clean up MHI state */

 Nothing to do */

 Nothing to do at MHI level */

 Transition to M3 state */

 Nothing to do at MHI level */

 Exit M3, transition to M0 state */

 Resume health check */

 It can be a remote wakeup (no mhi runtime_get), update access time */

	/* Do not fail to not mess up our PCI device state, the device likely

	 * lost power (d3cold) and we simply need to reset it from the recovery

	 * procedure, trigger the recovery asynchronously to prevent system

	 * suspend exit delaying.

	/* Depending the platform, device may have lost power (d3cold), we need

	 * to resume it now to check its state and recover when necessary.

	/* We want to stop all operations, hibernation does not guarantee that

	 * device will be in the same state as before freezing, especially if

	 * the intermediate restore kernel reinitializes MHI device with new

	 * context.

 Reinitialize the device */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.

 *

/*

 * Not all MHI state transitions are synchronous. Transitions like Linkdown,

 * SYS_ERR, and shutdown can happen anytime asynchronously. This function will

 * transition to a new state only if we're allowed to.

 *

 * Priority increases as we go down. For instance, from any state in L0, the

 * transition can be made to states in L1, L2 and L3. A notable exception to

 * this rule is state DISABLE.  From DISABLE state we can only transition to

 * POR state. Also, while in L2 state, user cannot jump back to previous

 * L1 or L0 states.

 *

 * Valid transitions:

 * L0: DISABLE <--> POR

 *     POR <--> POR

 *     POR -> M0 -> M2 --> M0

 *     POR -> FW_DL_ERR

 *     FW_DL_ERR <--> FW_DL_ERR

 *     M0 <--> M0

 *     M0 -> FW_DL_ERR

 *     M0 -> M3_ENTER -> M3 -> M3_EXIT --> M0

 * L1: SYS_ERR_DETECT -> SYS_ERR_PROCESS --> POR

 * L2: SHUTDOWN_PROCESS -> LD_ERR_FATAL_DETECT

 *     SHUTDOWN_PROCESS -> DISABLE

 * L3: LD_ERR_FATAL_DETECT <--> LD_ERR_FATAL_DETECT

 *     LD_ERR_FATAL_DETECT -> DISABLE

 L0 States */

 L1 States */

 L2 States */

 L3 States */

 NOP for backward compatibility, host allowed to ring DB in M2 state */

 Handle device ready state transition */

 poll register field every 25 milliseconds */

 Check if device entered error state */

 Wait for RESET to be cleared and READY bit to be set by the device */

 Configure MMIO registers */

 Add elements to all SW event rings */

 Skip if this is an offload or HW event */

 Update all cores */

 Ring the event ring db */

 Set MHI to M0 state */

 Wake up the device */

 Ring all event rings and CMD ring only if we're in mission mode */

 Only ring primary cmd ring if ring is not empty */

 Ring channel DB registers */

 Only ring DB if ring is not empty */

/*

 * After receiving the MHI state change event from the device indicating the

 * transition to M1 state, the host can transition the device to M2 state

 * for keeping it in low power state.

 If there are any pending resources, exit M2 immediately */

 MHI M3 completion handler */

 Handle device Mission Mode transition */

 Force MHI to be in M0 state before continuing */

 Add elements to all HW event rings */

 Update to all cores */

	/*

	 * The MHI devices are only created when the client device switches its

	 * Execution Environment (EE) to either SBL or AMSS states

 Handle shutdown transitions */

 Trigger MHI RESET so that the device will not access host memory */

 Wait for the reset bit to be cleared by the device */

		/*

		 * Device will clear BHI_INTVEC as a part of RESET processing,

		 * hence re-program it

 Release lock and wait for all pending threads to complete */

 Reset the ev rings and cmd rings */

 Skip offload events */

 Move to disable state */

 Handle system error transitions */

 We must notify MHI control driver so it can clean up first */

 Wake up threads waiting for state transition */

 Trigger MHI RESET so that the device will not access host memory */

 Wait for the reset bit to be cleared by the device */

		/*

		 * Device will clear BHI_INTVEC as a part of RESET processing,

		 * hence re-program it

 Release lock and wait for all pending threads to complete */

 Reset the ev rings and cmd rings */

 Skip offload events */

 Transition to next state */

 Queue a new work item and schedule work */

 SYS_ERR worker */

 skip if controller supports RDDM */

 Device State Transition worker */

			/*

			 * The MHI devices are only created when the client

			 * device switches its Execution Environment (EE) to

			 * either SBL or AMSS states

 Return busy if there are any pending resources */

 Take MHI out of M2 state */

 Set MHI to M3 and wait for completion */

 Notify clients about entering LPM */

 Notify clients about exiting LPM */

 Set MHI to M0 and wait for completion */

 Wake up the device */

 Assert device wake db */

	/*

	 * If force flag is set, then increment the wake count value and

	 * ring wake db

		/*

		 * If resources are already requested, then just increment

		 * the wake count value and return

 De-assert device wake db */

	/*

	 * Only continue if there is a single resource, else just decrement

	 * and return

 Supply default wake routines if not provided by controller driver */

 Setup BHI INTVEC */

 Confirm that the device is in valid exec env */

		/*

		 * device cleares INTVEC as part of RESET processing,

		 * re-program it

 Transition to next state */

 Already powered down */

 If it's not a graceful shutdown, force MHI to linkdown state */

 Force link down or error fatal detected state */

 mark device inactive to avoid any further host processing */

 Wait for shutdown to complete */

 Check if device is already in RDDM */

 Wait for RDDM event */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2020, The Linux Foundation. All rights reserved.

 *

 states */

 counters */

 for transfer device types only */

 Show controller and client(s) info */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.

 *

 MHI protocol requires the transfer ring to be aligned with ring length */

 if controller driver has set irq_flags, use it */

 Setup BHI_INTVEC IRQ */

 Setup channel ctxt */

 Skip if it is an offload channel */

 Setup event context */

 Skip if it is an offload event */

		/*

		 * If the read pointer equals to the write pointer, then the

		 * ring is empty

 Setup cmd context */

 Read channel db offset */

 Setup wake db */

 Setup channel db address for each channel in tre_ring */

 Read event ring db offset */

 Setup event db address for each ev_ring */

 Setup DB register for primary CMD rings */

 Write to MMIO registers */

 Already uninitialized */

 Update to all cores */

 Update to all cores */

 Populate event ring */

 This event ring has a dedicated channel */

 Priority is fixed to 1 for now */

	/*

	 * The allocation of MHI channels can exceed 32KB in some scenarios,

	 * so to avoid any memory possible allocation failures, vzalloc is

	 * used here

 Populate channel configurations */

		/*

		 * For some channels, local ring length should be bigger than

		 * the transfer ring length due to internal logical channels

		 * in device. So host can queue much more buffers than transfer

		 * ring length. Example, RSC channels should have a larger local

		 * channel length than transfer ring length.

		/*

		 * For most channels, chtype is identical to channel directions.

		 * So, if it is not defined then assign channel direction to

		 * chtype

		/*

		 * If MHI host allocates buffers, then the channel direction

		 * should be DMA_FROM_DEVICE

		/*

		 * Bi-directional and direction less channel must be an

		 * offload channel

 Parse MHI channel configuration */

 Parse MHI event configuration */

 By default, host is allowed to ring DB in both M0 and M2 states */

 Skip for offload events */

 used in setting bei field of TRE */

 Read the MHI device info */

 Register controller with MHI bus */

 Init wakeup source */

 Drop the references to MHI devices created for channels */

		/*

		 * This controller supports RDDM, so we need to manually clear

		 * BHIE RX registers since POR values are undefined.

		/*

		 * Allocate RDDM table for debugging purpose if specified

	/*

	 * We need to set the mhi_chan->mhi_dev to NULL here since the MHI

	 * devices for the channels will only get created if the mhi_dev

	 * associated with it is NULL. This scenario will happen during the

	 * controller suspend and resume.

 for MHI client devices, parent is the MHI controller device */

 for MHI controller device, parent is the bus device (e.g. pci device) */

 Bring device out of LPM */

		/*

		 * If channel supports LPM notifications then status_cb should

		 * be provided

 For non-offload channels then xfer_cb should be provided */

		/*

		 * If channel supports LPM notifications then status_cb should

		 * be provided

 For non-offload channels then xfer_cb should be provided */

		/*

		 * If the channel event ring is managed by client, then

		 * status_cb must be provided so that the framework can

		 * notify pending data

 Call the user provided probe function */

 Skip if it is a controller device */

 Reset both channels */

 Wake all threads waiting for completion */

 Set the channel state to disabled */

 Reset the non-offload channel */

 De-init channel if it was enabled */

	/*

	 * If the device is a controller type then there is no client driver

	 * associated with it

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.

 *

 Setup RDDM vector table for RDDM transfer and program RXVEC */

 Collect RDDM buffer during kernel panic */

	/*

	 * This should only be executing during a kernel panic, we expect all

	 * other cores to shutdown while we're collecting RDDM buffer. After

	 * returning from this function, we expect the device to reset.

	 *

	 * Normaly, we read/write pm_state only after grabbing the

	 * pm_lock, since we're in a panic, skipping it. Also there is no

	 * gurantee that this state change would take effect since

	 * we're setting it w/o grabbing pm_lock

 update should take the effect immediately */

	/*

	 * Make sure device is not already in RDDM. In case the device asserts

	 * and a kernel panic follows, device will already be in RDDM.

	 * Do not trigger SYS ERR again and proceed with waiting for

	 * image download completion.

 Hardware reset so force device to enter RDDM */

 Download RDDM image from device */

 Wait for the image download to complete */

 Wait for the image download to complete */

 Wait for the image download to complete */

 Allocate memory for entries */

 Allocate and populate vector table */

 Vector table is the last entry */

 save hardware info from BHI */

 wait for ready on pass through or any other execution environment */

 SBL size provided is maximum size, not necessarily the image size */

 Download image using BHI */

 Error or in EDL mode, we're done */

 Wait for ready since EDL image was loaded */

	/*

	 * If we're doing fbc, populate vector tables while

	 * device transitioning into MHI READY state

 Load the firmware into BHIE vec table */

 Transitioning into MHI RESET->READY state */

 Vector table is the last entry */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.

 *

	/*

	 * Writes to the new ring element must be visible to the hardware

	 * before letting h/w know there is new element to fetch.

 Generic MHI SoC reset */

 smp update */

 smp update */

 Only destroy virtual devices thats attached to bus */

	/*

	 * If execution environment is specified, remove only those devices that

	 * started in them based on ee_mask for the channels as we move on to a

	 * different execution environment

	/*

	 * For the suspend and resume case, this function will get called

	 * without mhi_unregister_controller(). Hence, we need to drop the

	 * references to mhi_dev created for ul and dl channels. We can

	 * be sure that there will be no instances of mhi_dev left after

	 * this.

 Notify the client and remove the device from MHI bus */

 Bind MHI channels to MHI devices */

 We use dl_chan as offload channels */

 Check next channel if it matches */

 Channel name is same for both UL and DL */

 Init wakeup source if available */

 Only proceed if event ring has pending events */

 For client managed event ring, notify pending data */

 proceed if power down is not already in progress */

 Wake up events waiting for state change */

 Update the WP */

 Update the RP */

 Update to all cores */

	/*

	 * If it's a DB Event then we need to grab the lock

	 * with preemption disabled and as a write because we

	 * have to update db register and there are chances that

	 * another thread could be doing the same.

 Get the TRB this event points to */

 If it's the last TRE, get length from the event */

 Unmap if it's not pre-mapped by client */

 truncate to buf len if xfer_len is larger */

 notify client */

 Release the reference got from mhi_queue() */

			/*

			 * Recycle the buffer if buffer is pre-allocated,

			 * if there is an error, not much we can do apart

			 * from dropping the packet

 CC_EOT */

 switch(MHI_EV_READ_CODE(EV_TRB_CODE,event)) */

 offset to local descriptor */

 Received out of bound cookie */

 truncate to buf len if xfer_len is larger */

 notify the client */

	/*

	 * Note: We're arbitrarily incrementing RP even though, completion

	 * packet we processed might not be the same one, reason we can do this

	 * is because device guaranteed to cache descriptors in order it

	 * receive, so even though completion event is different we can re-use

	 * all descriptors in between.

	 * Example:

	 * Transfer Ring has descriptors: A, B, C, D

	 * Last descriptor host queue is D (WP) and first descriptor

	 * host queue is A (RP).

	 * The completion event we just serviced is descriptor C.

	 * Then we can safely queue descriptors to replace A, B, and C

	 * even though host did not receive any completions.

	/*

	 * This is a quick check to avoid unnecessary event processing

	 * in case MHI is already in error state, but it's still possible

	 * to transition to error state while processing events

			/*

			 * Only process the event ring elements whose channel

			 * ID is within the maximum supported range.

		/*

		 * Only process the event ring elements whose channel

		 * ID is within the maximum supported range.

 process all pending events */

	/*

	 * We can check PM state w/o a lock here because there is no way

	 * PM state can change from reg access valid to no access while this

	 * thread being executed.

		/*

		 * We may have a pending event but not allowed to

		 * process it since we are probably in a suspended state,

		 * so trigger a resume.

 Process ctrl events events */

	/*

	 * We received an IRQ but no events to process, maybe device went to

	 * SYS_ERR state? Check the state to confirm.

	/* Packet is queued, take a usage ref to exit M3 if necessary

	 * for host->device buffer, balanced put is done on buffer completion

	 * for device->host buffer, balanced put is after ringing the DB

 Assert dev_wake (to exit/prevent M1/M2)*/

 increment WP */

 prepare the cmd tre */

 queue to hardware */

 bring host and device out of suspended states */

 no more processing events for this channel */

 Check of client manages channel context for offload channels */

 Pre-allocate buffer for xfer ring */

 Prepare transfer descriptors */

 mark all stale events related to channel as STALE event */

 Reset any pending buffers */

 Release the reference got from mhi_queue() */

 Nothing to reset, client doesn't queue buffers */

 Move channel to start state */

/*

 * pbias-regulator.c

 *

 * Copyright (C) 2014 Texas Instruments Incorporated - https://www.ti.com/

 * Author: Balaji T K <balajitk@ti.com>

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 Offset from SCM general area (and syscon) base */

 SPDX-License-Identifier: GPL-2.0+



 max8998.c - Voltage regulator driver for the Maxim 8998



  Copyright (C) 2009-2010 Samsung Electronics

  Kyungmin Park <kyungmin.park@samsung.com>

  Marek Szyprowski <m.szyprowski@samsung.com>

 voltages for selection */

 index to last changed voltage */

 value in a set */

 check if requested voltage */

 value is already defined */

 no predefine regulator found */

 check if requested voltage */

 value is already defined */

 Voltage stabilization */

 lp3974 hasn't got ENRAMP bit - ramp is assumed as true */

 MAX8998 has ENRAMP bit implemented, so test it*/

 search for closest to maximum */

 Swapped as register is inverted */

 count the number of regulators to be supported in pmic */

 NOTE: */

 For unused GPIO NOT marked as -1 (thereof equal to 0)  WARN_ON */

 will be displayed */

 Check if MAX8998 voltage selection GPIOs are defined */

 Check if SET1 is not equal to 0 */

 Check if SET2 is not equal to 0 */

 Set predefined values for BUCK1 registers */

 Check if SET3 is not equal to 0 */

 Set predefined values for BUCK2 registers */

 SPDX-License-Identifier: GPL-2.0



 sky81452-regulator.c	SKY81452 regulator driver



 Copyright 2014 Skyworks Solutions Inc.

 Author : Gyungoh Yoo <jack.yoo@skyworksinc.com>

 registers */

 bit mask */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * max8907-regulator.c -- support regulators in max8907

 *

 * Copyright (C) 2010 Gyungoh Yoo <jack.yoo@maxim-ic.com>

 * Copyright (C) 2010-2012, NVIDIA CORPORATION. All rights reserved.

 *

 * Portions based on drivers/regulator/tps65910-regulator.c,

 *     Copyright 2010 Texas Instruments Inc.

 *     Author: Graeme Gregory <gg@slimlogic.co.uk>

 *     Author: Jorge Eduardo Candelaria <jedu@slimlogic.co.uk>

 Backwards compatibility with MAX8907B; SD1 uses different voltages */

 SPDX-License-Identifier: GPL-2.0



 SY8827N regulator driver



 Copyright (C) 2020 Synaptics Incorporated



 Author: Jisheng Zhang <jszhang@kernel.org>

 SPDX-License-Identifier: GPL-2.0-or-later

/* NXP PCF50633 PMIC Driver

 *

 * (C) 2006-2008 by Openmoko, Inc.

 * Author: Balaji Rao <balajirrao@openmoko.org>

 * All rights reserved.

 *

 * Broken down from monstrous PCF50633 driver mainly by

 * Harald Welte and Andy Green and Werner Almesberger

 Already set by core driver */

 SPDX-License-Identifier: GPL-2.0+



 wm831x-ldo.c  --  LDO driver for the WM831x series



 Copyright 2009 Wolfson Microelectronics PLC.



 Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

/*

 * Shared

/*

 * General purpose LDOs

 Is the regulator on? */

 Is it reporting under voltage? */

/*

 * Analogue LDOs

 Is the regulator on? */

 Is it reporting under voltage? */

/*

 * Alive LDO

 Is the regulator on? */

 Module information */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Voltage regulation driver for active-semi ACT8945A PMIC

 *

 * Copyright (C) 2015 Atmel Corporation

 *

 * Author: Wenyou Yang <wenyou.yang@atmel.com>

/**

 * ACT8945A Global Register Map.

/**

 * Field Definitions.

 ON - [7] */

 VSET - [5:0] */

/**

 * ACT8945A Voltage Number

	/*

	 * Ask the PMIC to enable/disable this output when entering hibernate

	 * mode.

 Unlock expert registers. */

	/*

	 * Ask the PMIC to enter the suspend mode on the next PWRHLD

	 * transition.

	/*

	 * Ask the PMIC to shutdown everything on the next PWRHLD transition.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2010

 *

 * Authors: Sundar Iyer <sundar.iyer@stericsson.com> for ST-Ericsson

 *          Bengt Jonsson <bengt.g.jonsson@stericsson.com> for ST-Ericsson

 *

 * UX500 common part of Power domain regulators

/*

 * power state reference count

 will initialize to zero */

 print power state count */

 print dump header */

 Access per-regulator data */

 print status */

 create directory */

 create "status" file */

 create "power-state-count" file */

/*

 * Regulator driver for TI TPS65912x PMICs

 *

 * Copyright (C) 2015 Texas Instruments Incorporated - https://www.ti.com/

 *	Andrew F. Davis <afd@ti.com>

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License version 2 as

 * published by the Free Software Foundation.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether expressed or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License version 2 for more details.

 *

 * Based on the TPS65218 driver and the previous TPS65912 driver by

 * Margarita Olaya Cabrera <magi@slimlogic.co.uk>

 Operations permitted on DCDCx */

 Operations permitted on LDOx */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2019 MediaTek Inc.

/*

 * MT6358 regulators' information

 *

 * @desc: standard fields of regulator description.

 * @qi: Mask for query enable signal status of regulators

 The array is indexed by id(MT6358_ID_XXX) */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TI LP8788 MFD - buck regulator driver

 *

 * Copyright 2012 Texas Instruments

 *

 * Author: Milo(Woogyom) Kim <milo.kim@ti.com>

 register address */

 mask/shift bits */

 Addr 0Ch */

 Addr 1Dh */

 Addr 1Eh ~ 27h */

 Addr 28h ~ 2Bh */

 Addr 2Dh */

 BUCK 1 ~ 4 voltage ranges */

 no dvs for buck3, 4 */

 no dvs platform data, then dvs will be selected by I2C registers */

/*

 * tps6507x-regulator.c

 *

 * Regulator driver for TPS65073 PMIC

 *

 * Copyright (C) 2009 Texas Instrument Incorporated - https://www.ti.com/

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any kind,

 * whether express or implied; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

 * General Public License for more details.

 DCDC's */

 LDOs */

 Number of step-down converters available */

 Number of LDO voltage regulators  available */

 Number of total regulators available */

 Supported voltage values for regulators (in microVolts) */

 The voltage mapping table for LDO2 is the same as VDCDCx */

 Does DCDC high or the low register defines output voltage? */

	/**

	 * tps_board points to pmic related constants

	 * coming from the board-evm file.

 common for all regulators */

 Register the regulators */

 SPDX-License-Identifier: GPL-2.0



 Regulator Driver for Freescale MC13892 PMIC



 Copyright 2010 Yong Shen <yong.shen@linaro.org>



 Based on draft driver from Arnaud Patard <arnaud.patard@rtp-net.org>

/*

 * Note: this table is used to derive SWxVSEL by index into

 * the array. Offset the values by the index of 1100000uV

 * to get the actual register value for that voltage selector

 * if the HI bit is to be set as well.

 Update the stored state for Power Gates. */

 Construct the new register value */

 Overwrite the PWGTxEN with the stored version */

 Power Gate enable value is 0 */

 Power Gate disable value is 1 */

	/* Power Gates state is stored in powermisc_pwgt_state

	/*

	 * Figure out if the HI bit is set inside the switcher mode register

	 * since this means the selector value we return is at a different

	 * offset into the selector table.

	 *

	 * According to the MC13892 documentation note 59 (Table 47) the SW1

	 * buck switcher does not support output range programming therefore

	 * the HI bit must always remain 0. So do not do anything strange if

	 * our register is MC13892_SWITCHERS0.

	/*

	 * Don't mess with the HI bit or support HI voltage offsets for SW1.

	 *

	 * Since the get_voltage_sel callback has given a fudged value for

	 * the selector offset, we need to back out that offset if HI is

	 * to be set so we write the correct value to the register.

	 *

	 * The HI bit addition and selector offset handling COULD be more

	 * complicated by shifting and masking off the voltage selector part

	 * of the register then logical OR it back in, but since the selector

	 * is at bits 4:0 there is very little point. This makes the whole

	 * thing more readable and we do far less work.

 enable switch auto mode (on 2.0A silicon only) */

 update mc13892_vcam ops */

 SPDX-License-Identifier: GPL-2.0



 MCP16502 PMIC driver



 Copyright (C) 2018 Microchip Technology Inc. and its subsidiaries



 Author: Andrei Stefanescu <andrei.stefanescu@microchip.com>



 Inspired from tps65086-regulator.c

/*

 * The PMIC has four sets of registers corresponding to four power modes:

 * Performance, Active, Low-power, Hibernate.

 *

 * Registers:

 * Each regulator has a register for each power mode. To access a register

 * for a specific regulator and mode BASE_* and OFFSET_* need to be added.

 *

 * Operating modes:

 * In order for the PMIC to transition to operating modes it has to be

 * controlled via GPIO lines called LPM and HPM.

 *

 * The registers are fully configurable such that you can put all regulators in

 * a low-power state while the PMIC is in Active mode. They are supposed to be

 * configured at startup and then simply transition to/from a global low-power

 * state by setting the GPIO lpm pin high/low.

 *

 * This driver keeps the PMIC in Active mode, Low-power state is set for the

 * regulators by enabling/disabling operating mode (FPWM or Auto PFM).

 *

 * The PMIC's Low-power and Hibernate modes are used during standby/suspend.

 * To enter standby/suspend the PMIC will go to Low-power mode. From there, it

 * will transition to Hibernate when the PWRHLD line is set to low by the MPU.

/*

 * This function is useful for iterating over all regulators and accessing their

 * registers in a generic way or accessing a regulator device by its id.

/**

 * enum mcp16502_reg - MCP16502 regulators's registers

 * @MCP16502_REG_A: active state register

 * @MCP16502_REG_LPM: low power mode state register

 * @MCP16502_REG_HIB: hibernate state register

 * @MCP16502_REG_SEQ: startup sequence register

 * @MCP16502_REG_CFG: configuration register

 Ramp delay (uV/us) for buck1, ldo1, ldo2. */

 Ramp delay (uV/us) for buck2, buck3, buck4. */

/*

 * struct mcp16502 - PMIC representation

 * @lpm: LPM GPIO descriptor

/*

 * mcp16502_gpio_set_mode() - set the GPIO corresponding value

 *

 * Used to prepare transitioning into hibernate or resuming from it.

/*

 * mcp16502_get_reg() - get the PMIC's state configuration register for opmode

 *

 * @rdev: the regulator whose register we are searching

 * @opmode: the PMIC's operating mode ACTIVE, Low-power, Hibernate

/*

 * mcp16502_get_mode() - return the current operating mode of a regulator

 *

 * Note: all functions that are not part of entering/exiting standby/suspend

 *	 use the Active mode registers.

 *

 * Note: this is different from the PMIC's operatig mode, it is the

 *	 MODE bit from the regulator's register.

/*

 * _mcp16502_set_mode() - helper for set_mode and set_suspend_mode

 *

 * @rdev: the regulator for which we are setting the mode

 * @mode: the regulator's mode (the one from MODE bit)

 * @opmode: the PMIC's operating mode: Active/Low-power/Hibernate

/*

 * mcp16502_set_mode() - regulator_ops set_mode

/*

 * mcp16502_get_status() - regulator_ops get_status

/*

 * mcp16502_suspend_get_target_reg() - get the reg of the target suspend PMIC

 *				       mode

/*

 * mcp16502_set_suspend_voltage() - regulator_ops set_suspend_voltage

/*

 * mcp16502_set_suspend_mode() - regulator_ops set_suspend_mode

/*

 * mcp16502_set_suspend_enable() - regulator_ops set_suspend_enable

/*

 * mcp16502_set_suspend_disable() - regulator_ops set_suspend_disable

 CONFIG_SUSPEND */

 CONFIG_SUSPEND */

/*

 * LDOs cannot change operating modes.

 CONFIG_SUSPEND */

 MCP16502_REGULATOR(_name, _id, ranges, regulator_ops, ramp_table) */

 SPDX-License-Identifier: GPL-2.0+



 da9210-regulator.c - Regulator device driver for DA9210

 Copyright (C) 2013  Dialog Semiconductor Ltd.

 Default limits measured in millivolts and milliamps */

 Current limits for buck (uA) indices corresponds with register values */

 Clear handled events */

/*

 * I2C driver interface functions

 Mask all interrupt sources to deassert interrupt line */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regulator driver for TI TPS6586x

 *

 * Copyright (C) 2010 Compulab Ltd.

 * Author: Mike Rapoport <mike@compulab.co.il>

 *

 * Based on da903x

 * Copyright (C) 2006-2008 Marvell International Ltd.

 * Copyright (C) 2008 Compulab Ltd.

 supply control and voltage setting  */

 converter settings  */

/*

 * TPS6586X has 2 enable bits that are OR'ed to determine the actual

 * regulator state. Clearing one of this bits allows switching

 * regulator on and of with single register write.

	/*

	 * The regulator is on, but it's enabled with the bit we don't

	 * want to use, so we switch the enable bits

 only SM0 and SM1 can have the slew rate settings */

 Search version specific table first */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regulator driver for tps65090 power management chip.

 *

 * Copyright (c) 2012, NVIDIA CORPORATION.  All rights reserved.



 Regulator enable bit, active high */

 Regulator wait time 0 bit */

 Regulator power good bit, 1=good */

 Regulator timeout bit, 1=wait */

 Overcurrent wait must be <= this */

/**

 * struct tps65090_regulator - Per-regulator data for a tps65090 regulator

 *

 * @dev: Pointer to our device.

 * @desc: The struct regulator_desc for the regulator.

 * @rdev: The struct regulator_dev for the regulator.

 * @overcurrent_wait_valid: True if overcurrent_wait is valid.

 * @overcurrent_wait: For FETs, the value to put in the WTFET bitfield.

/**

 * tps65090_reg_set_overcurrent_wait - Setup overcurrent wait

 *

 * This will set the overcurrent wait time based on what's in the regulator

 * info.

 *

 * @ri:		Overall regulator data

 * @rdev:	Regulator device

 *

 * Return: 0 if no error, non-zero if there was an error writing the register.

/**

 * tps65090_try_enable_fet - Try to enable a FET

 *

 * @rdev:	Regulator device

 *

 * Return: 0 if ok, -ENOTRECOVERABLE if the FET power good bit did not get

 * set, or some other -ve value if another error occurred (e.g. i2c error)

/**

 * tps65090_fet_enable - Enable a FET, trying a few times if it fails

 *

 * Some versions of the tps65090 have issues when turning on the FETs.

 * This function goes through several steps to ensure the best chance of the

 * FET going on.  Specifically:

 * - We'll make sure that we bump the "overcurrent wait" to the maximum, which

 *   increases the chances that we'll turn on properly.

 * - We'll retry turning the FET on multiple times (turning off in between).

 *

 * @rdev:	Regulator device

 *

 * Return: 0 if ok, non-zero if it fails.

	/*

	 * Try enabling multiple times until we succeed since sometimes the

	 * first try times out.

 Try turning the FET off (and then on again) */

	/*

	 * First enable output for internal control if require.

	 * And then disable external control.

		/*

		 * TPS5090 DCDC support the control from external digital input.

		 * Configure it as per platform data.

		/*

		 * Hand the GPIO descriptor management over to the regulator

		 * core, remove it from devres management.

 Enable external control if it is require */

 SPDX-License-Identifier: GPL-2.0+



 arizona-ldo1.c  --  LDO1 supply for Arizona devices



 Copyright 2012 Wolfson Microelectronics PLC.



 Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

	/* We assume that high output = regulator off

	 * Don't use devm, since we need to get against the parent device

	 * so clean up would happen at the wrong time

	/*

	 * LDO1 can only be used to supply DCVDD so if it has no

	 * consumers then DCVDD is supplied externally.

	/*

	 * Since the chip usually supplies itself we provide some

	 * default init_data for it.  This will be overridden with

	 * platform data if provided.

 Module information */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2018 ROHM Semiconductors

 bd71837-regulator.c ROHM BD71837MWV/BD71847MWV regulator driver

 Typical regulator startup times as per data sheet in uS */

/*

 * BD718(37/47/50) have two "enable control modes". ON/OFF can either be

 * controlled by software - or by PMIC internal HW state machine. Whether

 * regulator should be under SW or HW control can be defined from device-tree.

 * Let's provide separate ops for regulators to use depending on the "enable

 * control mode".

/*

 * BUCK1/2/3/4

 * BUCK1RAMPRATE[1:0] BUCK1 DVS ramp rate setting

 * 00: 10.00mV/usec 10mV 1uS

 * 01: 5.00mV/usec	10mV 2uS

 * 10: 2.50mV/usec	10mV 4uS

 * 11: 1.25mV/usec	10mV 8uS

/* These functions are used when regulators are under HW state machine control.

 * We assume PMIC is in RUN state because SW running and able to query the

 * status. Most of the regulators have fixed ON or OFF state at RUN/IDLE so for

 * them we just return a constant. BD71837 BUCK3 and BUCK4 are exceptions as

 * they support configuring the ON/OFF state for RUN.

 *

 * Note for next hacker - these PMICs have a register where the HW state can be

 * read. If assuming RUN appears to be false in your use-case - you can

 * implement state reading (although that is not going to be atomic) before

 * returning the enable state.

/*

 * On BD71837 (not on BD71847, BD71850, ...)

 * Bucks 1 to 4 support DVS. PWM mode is used when voltage is changed.

 * Bucks 5 to 8 and LDOs can use PFM and must be disabled when voltage

 * is changed. Hence we return -EBUSY for these if voltage is changed

 * when BUCK/LDO is enabled.

 *

 * On BD71847, BD71850, ... The LDO voltage can be changed when LDO is

 * enabled. But if voltage is increased the LDO power-good monitoring

 * must be disabled for the duration of changing + 1mS to ensure voltage

 * has reached the higher level before HW does next under voltage detection

 * cycle.

		/*

		 * Let's allow scheduling as we use I2C anyways. We just need to

		 * guarantee minimum of 1ms sleep - it shouldn't matter if we

		 * exceed it due to the scheduling.

		/*

		 * If we increase LDO voltage when LDO is enabled we need to

		 * disable the power-good detection until voltage has reached

		 * the new level. According to HW colleagues the maximum time

		 * it takes is 1000us. I assume that on systems with light load

		 * this might be less - and we could probably use DT to give

		 * system specific delay value if performance matters.

		 *

		 * Well, knowing we use I2C here and can add scheduling delays

		 * I don't think it is worth the hassle and I just add fixed

		 * 1ms sleep here (and allow scheduling). If this turns out to

		 * be a problem we can change it to delay and make the delay

		 * time configurable.

 We disable protection if it was enabled... */

 ...and we also want to re-enable it */

/*

 * BD71837 BUCK1/2/3/4

 * BD71847 BUCK1/2

 * 0.70 to 1.30V (10mV step)

/*

 * BD71837 BUCK5

 * 0.7V to 1.35V  (range 0)

 * and

 * 0.675 to 1.325 (range 1)

 Ranges when VOLT_SEL bit is 0 */

 Ranges when VOLT_SEL bit is 1  */

/*

 * Range selector for first 3 linear ranges is 0x0

 * and 0x1 for last 3 ranges.

/*

 * BD71847 BUCK3

 Ranges when VOLT_SEL bits are 00 */

 Ranges when VOLT_SEL bits are 01 */

 Ranges when VOLT_SEL bits are 11 */

/*

 * BUCK6

 * 3.0V to 3.3V (step 100mV)

/*

 * BD71837 BUCK7

 * BD71847 BUCK5

 * 000 = 1.605V

 * 001 = 1.695V

 * 010 = 1.755V

 * 011 = 1.8V (Initial)

 * 100 = 1.845V

 * 101 = 1.905V

 * 110 = 1.95V

 * 111 = 1.995V

/*

 * BUCK8

 * 0.8V to 1.40V (step 10mV)

/*

 * LDO1

 * 3.0 to 3.3V (100mV step)

/*

 * LDO2

 * 0.8 or 0.9V

/*

 * LDO3

 * 1.8 to 3.3V (100mV step)

/*

 * LDO4

 * 0.9 to 1.8V (100mV step)

/*

 * LDO5 for BD71837

 * 1.8 to 3.3V (100mV step)

/*

 * LDO5 for BD71837

 * 1.8 to 3.3V (100mV step)

/*

 * LDO6

 * 0.9 to 1.8V (100mV step)

/*

 * LDO7

 * 1.8 to 3.3V (100mV step)

	/*

	 * BD71837/47/50 ... (ICs supported by this driver) do not provide

	 * warnings, only protection

	/*

	 * And protection limit is not changeable. It can only be enabled

	 * or disabled

/*

 * OPS common for BD71847 and BD71850

 BD71847 and BD71850 LDO 5 is by default OFF at RUN state */

/*

 * OPS for BD71837

/*

 * BD71837 bucks 3 and 4 support defining their enable/disable state also

 * when buck enable state is under HW state machine control. In that case the

 * bit [2] in CTRL register is used to indicate if regulator should be ON.

/*

 * OPS for all of the ICs - BD718(37/47/50)

/*

 * There is a HW quirk in BD71837. The shutdown sequence timings for

 * bucks/LDOs which are controlled via register interface are changed.

 * At PMIC poweroff the voltage for BUCK6/7 is cut immediately at the

 * beginning of shut-down sequence. As bucks 6 and 7 are parent

 * supplies for LDO5 and LDO6 - this causes LDO5/6 voltage

 * monitoring to errorneously detect under voltage and force PMIC to

 * emergency state instead of poweroff. In order to avoid this we

 * disable voltage monitoring for LDO5 and LDO6

 LDO6 is supplied by buck5 */

 LDO5 is supplied by buck6 */

 LDO6 is supplied by buck7 */

/*

 * Setups where regulator (especially the buck8) output voltage is scaled

 * by adding external connection where some other regulator output is connected

 * to feedback-pin (over suitable resistors) is getting popular amongst users

 * of BD71837. (This allows for example scaling down the buck8 voltages to suit

 * lover GPU voltages for projects where buck8 is (ab)used to supply power

 * for GPU. Additionally some setups do allow DVS for buck8 but as this do

 * produce voltage spikes the HW must be evaluated to be able to survive this

 * - hence I keep the DVS disabled for non DVS bucks by default. I don't want

 * to help you burn your proto board)

 *

 * So we allow describing this external connection from DT and scale the

 * voltages accordingly. This is what the connection should look like:

 *

 * |------------|

 * |	buck 8  |-------+----->Vout

 * |		|	|

 * |------------|	|

 *	| FB pin	|

 *	|		|

 *	+-------+--R2---+

 *		|

 *		R1

 *		|

 *	V FB-pull-up

 *

 *	Here the buck output is sifted according to formula:

 *

 * Vout_o = Vo - (Vpu - Vo)*R2/R1

 * Linear_step = step_orig*(R1+R2)/R1

 *

 * where:

 * Vout_o is adjusted voltage output at vsel reg value 0

 * Vo is original voltage output at vsel reg value 0

 * Vpu is the pull-up voltage V FB-pull-up in the picture

 * R1 and R2 are resistor values.

 *

 * As a real world example for buck8 and a specific GPU:

 * VLDO = 1.6V (used as FB-pull-up)

 * R1 = 1000ohms

 * R2 = 150ohms

 * VSEL 0x0 => 0.8V – (VLDO – 0.8) * R2 / R1 = 0.68V

 * Linear Step = 10mV * (R1 + R2) / R1 = 11.5mV

	/*

	 * We do adjust the values in the global desc based on DT settings.

	 * This may not be best approach as it can cause problems if more than

	 * one PMIC is controlled from same processor. I don't see such use-case

	 * for BD718x7 now - so we spare some bits.

	 *

	 * If this will point out to be a problem - then we can allocate new

	 * bd718xx_regulator_data array at probe and just use the global

	 * array as a template where we copy initial values. Then we can

	 * use allocated descs for regultor registration and do IC specific

	 * modifications to this copy while leaving other PMICs untouched. But

	 * that means allocating new array for each PMIC - and currently I see

	 * no need for that.

 The feedback loop connection does not make sense for LDOs */

 Register LOCK release */

	/*

	 * Change the next stage from poweroff to be READY instead of SNVS

	 * for all reset types because OTP loading at READY will clear SEL

	 * bit allowing HW defaults for power rails to be used

	/*

	 * There are cases when we want to leave the enable-control for

	 * the HW state machine and use this driver only for voltage control.

	 * One special case is when we use PMIC_STBY_REQ line from SoC to PMIC

	 * in order to set the system to SUSPEND state.

	 *

	 * If regulator is taken under SW control the regulator state will not

	 * be affected by PMIC state machine - Eg. regulator is likely to stay

	 * on even in SUSPEND

		/*

		 * Regulator register gets the regulator constraints and

		 * applies them (set_machine_constraints). This should have

		 * turned the control register(s) to correct values and we

		 * can now switch the control from PMIC state machine to the

		 * register interface

		 *

		 * At poweroff transition PMIC HW disables EN bit for

		 * regulators but leaves SEL bit untouched. So if state

		 * transition from POWEROFF is done to SNVS - then all power

		 * rails controlled by SW (having SEL bit set) stay disabled

		 * as EN is cleared. This will result boot failure if any

		 * crucial systems are powered by these rails. We don't

		 * enable SW control for crucial regulators if snvs state is

		 * used

 SPDX-License-Identifier: GPL-2.0+



 wm831x-isink.c  --  Current sink driver for the WM831x series



 Copyright 2009 Wolfson Microelectronics PLC.



 Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 We have a two stage enable: first start the ISINK... */

 ...then enable drive */

	/* For current parts this is correct; probably need to revisit

	 * in future.

 Module information */

 SPDX-License-Identifier: GPL-2.0+



 Regulator device driver for DA9061 and DA9062.

 Copyright (C) 2015-2017  Dialog Semiconductor

 Regulator IDs */

 Regulator capabilities and registers description */

 Main register fields */

 Event detection bit */

 Single regulator settings */

 Encapsulates all information for the regulators driver */

 Array size to be defined during init. Keep at end. */

 Regulator operations */

/* Current limits array (in uA)

 * - DA9061_ID_[BUCK1|BUCK3]

 * - DA9062_ID_[BUCK1|BUCK2|BUCK4]

 * Entry indexes corresponds to register values.

/* Current limits array (in uA)

 * - DA9061_ID_BUCK2

 * - DA9062_ID_BUCK3

 * Entry indexes corresponds to register values.

/*

 * Bucks use single mode register field for normal operation

 * and suspend state.

 * There are 3 modes to map to: FAST, NORMAL, and STANDBY.

 Sleep flag bit decides the mode */

/*

 * LDOs use sleep flags - one for normal and one for suspend state.

 * There are 2 modes to map to: NORMAL and STANDBY (sleep) for each state.

 DA9061 Regulator information */

 DA9062 Regulator information */

 Regulator interrupt handlers */

 Allocate memory required by usable regulators */

 Initialise regulator structure */

 Register regulator */

 LDOs overcurrent event support */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regulator driver for PWM Regulators

 *

 * Copyright (C) 2014 - STMicroelectronics Inc.

 *

 * Author: Lee Jones <lee.jones@linaro.org>

  Shared */

 Voltage table */

 Continuous mode info */

 regulator descriptor */

 Enable GPIO */

/*

 * Voltage table call-backs

	/*

	 * The dutycycle for min_uV might be greater than the one for max_uV.

	 * This is happening when the user needs an inversed polarity, but the

	 * PWM device does not support inversing it in hardware.

	/*

	 * The dutycycle for min_uV might be greater than the one for max_uV.

	 * This is happening when the user needs an inversed polarity, but the

	 * PWM device does not support inversing it in hardware.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for TPS61050/61052 boost converters, typically used for white LEDs

 * or audio amplifiers.

 *

 * Copyright (C) 2011 ST-Ericsson SA

 * Written on behalf of Linaro for ST-Ericsson

 *

 * Author: Linus Walleij <linus.walleij@linaro.org>

 There is an additional 5V */

/*

 * Registers the chip as a voltage regulator

 This instance is not set for regulator mode so bail out */

 Register regulator with framework */

 SPDX-License-Identifier: GPL-2.0+



 da9211-regulator.c - Regulator device driver for DA9211/DA9212

 /DA9213/DA9223/DA9214/DA9224/DA9215/DA9225

 Copyright (C) 2015  Dialog Semiconductor Ltd.

 DEVICE IDs */

 DA9211 REGULATOR IDs */

 Default limits measured in millivolts and milliamps */

/* Current limits for DA9211 buck (uA) indices

 * corresponds with register values

/* Current limits for DA9213 buck (uA) indices

 * corresponds with register values

/* Current limits for DA9215 buck (uA) indices

 * corresponds with register values

 search for closest to maximum */

	/* select one of 16 values: 0000 (2000mA or 3000mA)

	 * to 1111 (5000mA or 6000mA).

	/* If configuration for 1/2 bucks is different between platform data

	 * and the register, driver should exit.

		/*

		 * Hand the GPIO descriptor management over to the regulator

		 * core, remove it from GPIO devres management.

/*

 * I2C driver interface functions

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TI LP8788 MFD - ldo regulator driver

 *

 * Copyright 2012 Texas Instruments

 *

 * Author: Milo(Woogyom) Kim <milo.kim@ti.com>

 register address */

 DLDO 1 ~ 8 */

 DLDO 9 ~ 12, ALDO 1 ~ 4 */

 ALDO 5 ~ 10 */

 mask/shift bits */

 Addr 0Dh ~ 0Fh */

 Addr 10h */

 Addr 2Eh ~ 43h */

 Addr 44h ~ 59h */

 DLDO 1, 2, 3, 9 voltage table */

 DLDO 4 voltage table */

 DLDO 5, 7, 8 and ALDO 6 voltage table */

 DLDO 6 voltage table */

 DLDO 10, 11 voltage table */

 ALDO 1 voltage table */

 ALDO 7 voltage table */

	/*

	 * Do not use devm* here: the regulator core takes over the

	 * lifecycle management of the GPIO descriptor.

	 * FIXME: check default mode for GPIO here: high or low?

 if no GPIO for ldo pin, then set default enable mode */

 SPDX-License-Identifier: GPL-2.0+



 Copyright (c) 2013 Samsung Electronics Co., Ltd

		http:
 Ramp delay can be enabled/disabled only for buck[1234] */

 Module information */

/*

 * Motorola CPCAP PMIC regulator driver

 *

 * Based on cpcap-regulator.c from Motorola Linux kernel tree

 * Copyright (C) 2009-2011 Motorola, Inc.

 *

 * Rewritten for mainline kernel to use device tree and regmap

 * Copyright (C) 2017 Tony Lindgren <tony@atomide.com>

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the

 * GNU General Public License for more details.

/*

 * Resource assignment register bits. These seem to control the state

 * idle modes adn are used at least for omap4.

 CPCAP_REG_ASSIGN2 bits - Resource Assignment 2 */

 CPCAP_REG_ASSIGN3 bits - Resource Assignment 3 */

 CPCAP_REG_ASSIGN4 bits - Resource Assignment 4 */

/*

 * Enable register bits. At least CPCAP_BIT_AUDIO_LOW_PWR is generic,

 * and not limited to audio regulator. Let's use the Motorola kernel

 * naming for now until we have a better understanding of the other

 * enable register bits. No idea why BIT(3) is not defined.

/*

 * Off mode configuration bit. Used currently only by SW5 on omap4. There's

 * the following comment in Motorola Linux kernel tree for it:

 *

 * When set in the regulator mode, the regulator assignment will be changed

 * to secondary when the regulator is disabled. The mode will be set back to

 * primary when the regulator is turned on.

/*

 * SoC specific configuration for CPCAP regulator. There are at least three

 * different SoCs each with their own parameters: omap3, omap4 and tegra2.

 *

 * The assign_reg and assign_mask seem to allow toggling between primary

 * and secondary mode that at least omap4 uses for off mode.

/*

 * We need to also configure regulator idle mode for SoC off mode if

 * CPCAP_REG_OFF_MODE_SEC is set.

/*

 * We need to also configure regulator idle mode for SoC off mode if

 * CPCAP_REG_OFF_MODE_SEC is set.

 Quirk: 2775000 is before 2500000 for vrf1 regulator */

/*

 * SoC specific configuration for omap4. The data below is comes from Motorola

 * Linux kernel tree. It's basically the values of cpcap_regltr_data,

 * cpcap_regulator_mode_values and cpcap_regulator_off_mode_values, see

 * CPCAP_REG macro above.

 *

 * SW1 to SW4 and SW6 seems to be unused for mapphone. Note that VSIM and

 * VSIMCARD have a shared resource assignment bit.

 sentinel */ },

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only



 DA9121 Single-channel dual-phase 10A buck converter



 Copyright (C) 2020 Axis Communications AB



 DA9130 Single-channel dual-phase 10A buck converter (Automotive)

 DA9217 Single-channel dual-phase  6A buck converter

 DA9122 Dual-channel single-phase  5A buck converter

 DA9131 Dual-channel single-phase  5A buck converter (Automotive)

 DA9220 Dual-channel single-phase  3A buck converter

 DA9132 Dual-channel single-phase  3A buck converter (Automotive)



 Copyright (C) 2020 Dialog Semiconductor

 Chip data */

/* Define ranges for different variants, enabling translation to/from

 * registers. Maximums give scope to allow for transients.

DA9121_TYPE_DA9121_DA9130

DA9121_TYPE_DA9220_DA9132

DA9121_TYPE_DA9122_DA9131

DA9121_TYPE_DA9217

 0=core, 1/2-buck */

 index for status/event/mask register selection */

 bit masks... */

 Notification for status inception */

 if NULL, notify - otherwise dev_warn this string */

 For second buck related event bits that are specific to DA9122, DA9220 variants */

/* The status signals that may need servicing, depending on device variant.

 * After assertion, they persist; so event is notified, the IRQ disabled,

 * and status polled until clear again and IRQ is reenabled.

 *

 * SG/PG1/PG2 should be set when device first powers up and should never

 * re-occur. When this driver starts, it is expected that these will have

 * self-cleared for when the IRQs are enabled, so these should never be seen.

 * If seen, the implication is that the device has reset.

 *

 * GPIO0/1/2 are not configured for use by default, so should not be seen.

 Default value of BUCK_BUCK1_0.CH1_SRC_DVC_UP */

 tBUCK_EN */

	/* Possible events are tested to be within range for the variant, potentially

	 * masked by the IRQ handler (not just warned about), as having been masked,

	 * and the respective state cleared - then flagged to unmask for next IRQ.

	/* Possible events are tested to be within range for the variant, currently

	 * enabled, and having triggered this IRQ. The event may then be notified,

	 * or a warning given for unexpected events - those from device POR, and

	 * currently unsupported GPIO configurations.

 Mask the interrupts for persistent events OV, OC, UV, WARN, CRIT */

 clear the events */

 DA9121 chip register model */

 DA9121 regmap config for 1 channel variants */

 DA9121 regmap config for 2 channel variants */

	/* Use configured subtype to select the regulator descriptor index and

	 * register map, common to both consumer and automotive grade variants

 Set these up for of_regulator_match call which may want .of_map_modes */

 SPDX-License-Identifier: GPL-2.0+



 Functions to access SY3686A power management chip voltages



 Copyright (C) 2019 reMarkable AS - http:


 Authors: Lars Ivar Miljeteig <lars.ivar.miljeteig@remarkable.com>

          Alistair Francis <alistair@alistair23.me>

 SPDX-License-Identifier: GPL-2.0

/**

 * regulator_register_fixed_name - register a no-op fixed regulator

 * @id: platform device id

 * @name: name to be used for the regulator

 * @supplies: consumers for this regulator

 * @num_supplies: number of consumers

 * @uv: voltage in microvolts

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2010

 *

 * Authors: Bengt Jonsson <bengt.g.jonsson@stericsson.com>

 *

 * This file is based on drivers/regulator/ab8500.c

 *

 * AB8500 external regulators

 *

 * ab8500-ext supports the following regulators:

 * - VextSupply3

 AB8500 external regulators */

 requires hw mode or high power mode */

 supply for VextSupply3 */

 SIM supply for 3 V SIM cards */

/*

 * AB8500 external regulators

 fixed Vbat supplies VSMPS1_EXT_1V8 */

 fixed Vbat supplies VSMPS2_EXT_1V36 and VSMPS5_EXT_1V15 */

 fixed Vbat supplies VSMPS3_EXT_3V4 and VSMPS4_EXT_3V4 */

/**

 * struct ab8500_ext_regulator_info - ab8500 regulator information

 * @dev: device pointer

 * @desc: regulator description

 * @cfg: regulator configuration (extension of regulator FW configuration)

 * @update_bank: bank to control on/off

 * @update_reg: register to control on/off

 * @update_mask: mask to enable/disable and set mode of regulator

 * @update_val: bits holding the regulator current mode

 * @update_val_hp: bits to set EN pin active (LPn pin deactive)

 *                 normally this means high power mode

 * @update_val_lp: bits to set EN pin active and LPn pin active

 *                 normally this means low power mode

 * @update_val_hw: bits to set regulator pins in HW control

 *                 SysClkReq pins and logic will choose mode

	/*

	 * To satisfy both HW high power request and SW request, the regulator

	 * must be on in high power.

	/*

	 * Set the regulator in HW request mode if configured

	/* If regulator is enabled and info->cfg->hwreq is set, the regulator

	   must be on in high power, so we don't need to write the register with

	   the same value.

 return the uV for the fixed regulators */

 check for AB8500 2.x */

 VextSupply3LPn is inverted on AB8500 2.x */

 register all regulators */

 assign per-regulator data */

 register regulator with framework */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Broadcom BCM590xx regulator driver

 *

 * Copyright 2014 Linaro Limited

 * Author: Matt Porter <mporter@linaro.org>

 I2C slave 0 registers */

 I2C slave 1 registers */

/*

 * RFLDO to VSR regulators are

 * accessed via I2C slave 0

 LDO regulator IDs */

 DCDC regulator IDs */

/*

 * GPLDO1 to VBUS regulators are

 * accessed via I2C slave 1

 LDO group A: supported voltages in microvolts */

 LDO group C: supported voltages in microvolts */

 DCDC group CSR: supported voltages in microvolts */

 DCDC group IOSR1: supported voltages in microvolts */

 DCDC group SDSR1: supported voltages in microvolts */

 Register the regulators */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * userspace-consumer.c

 *

 * Copyright 2009 CompuLab, Ltd.

 *

 * Author: Mike Rapoport <mike@compulab.co.il>

 *

 * Based of virtual consumer driver:

 *   Copyright 2008 Wolfson Microelectronics PLC.

 *   Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

	/*

	 * sysfs_streq() doesn't need the \n's, but we add them so the strings

	 * will be shared with show_state(), above.

 SPDX-License-Identifier: GPL-2.0



 Device driver for regulators in Hi6421 IC



 Copyright (c) <2011-2014> HiSilicon Technologies Co., Ltd.

              http:
 Copyright (c) <2013-2014> Linaro Ltd.

              https:


 Author: Guodong Xu <guodong.xu@linaro.org>

/*

 * struct hi6421_regulator_pdata - Hi6421 regulator data of platform device

 * @lock: mutex to serialize regulator enable

/*

 * struct hi6421_regulator_info - hi6421 regulator information

 * @desc: regulator description

 * @mode_mask: ECO mode bitmask of LDOs; for BUCKs, this masks sleep

 * @eco_microamp: eco mode load upper limit (in uA), valid for LDOs only

 HI6421 regulators */

 LDO 0, 4~7, 9~14, 16~20 have same voltage table. */

 LDO 8, 15 have same voltage table. */

 Ranges are sorted in ascending order. */

/*

 * _id - LDO id name string

 * _match - of match name string

 * v_table - voltage table

 * vreg - voltage select register

 * vmask - voltage select mask

 * ereg - enable register

 * emask - enable mask

 * odelay - off/on delay time in uS

 * ecomask - eco mode mask

 * ecoamp - eco mode load uppler limit in uA

/* HI6421 LDO1~3 are linear voltage regulators at fixed uV_step

 *

 * _id - LDO id name string

 * _match - of match name string

 * _min_uV - minimum voltage supported in uV

 * n_volt - number of votages available

 * vstep - voltage increase in each linear step in uV

 * vreg - voltage select register

 * vmask - voltage select mask

 * ereg - enable register

 * emask - enable mask

 * odelay - off/on delay time in uS

 * ecomask - eco mode mask

 * ecoamp - eco mode load uppler limit in uA

/* HI6421 LDOAUDIO is a linear voltage regulator with two 4-step ranges

 *

 * _id - LDO id name string

 * _match - of match name string

 * n_volt - number of votages available

 * volt_ranges - array of linear_range

 * vstep - voltage increase in each linear step in uV

 * vreg - voltage select register

 * vmask - voltage select mask

 * ereg - enable register

 * emask - enable mask

 * odelay - off/on delay time in uS

 * ecomask - eco mode mask

 * ecoamp - eco mode load uppler limit in uA

/* HI6421 BUCK0/1/2 are linear voltage regulators at fixed uV_step

 *

 * _id - BUCK0/1/2 id name string

 * _match - of match name string

 * vreg - voltage select register

 * vmask - voltage select mask

 * ereg - enable register

 * emask - enable mask

 * sleepmask - mask of sleep mode

 * etime - enable time

 * odelay - off/on delay time in uS

/* HI6421 BUCK3/4/5 share similar configurations as LDOs, with exception

 *  that it supports SLEEP mode, so has different .ops.

 *

 * _id - LDO id name string

 * _match - of match name string

 * v_table - voltage table

 * vreg - voltage select register

 * vmask - voltage select mask

 * ereg - enable register

 * emask - enable mask

 * odelay - off/on delay time in uS

 * sleepmask - mask of sleep mode

 HI6421 regulator information */

	/* hi6421 spec requires regulator enablement must be serialized:

	 *  - Because when BUCK, LDO switching from off to on, it will have

	 *    a huge instantaneous current; so you can not turn on two or

	 *    more LDO or BUCKs simultaneously, or it may burn the chip.

 call regulator regmap helper */

 set mode */

 set mode */

 assign per-regulator data */

 SPDX-License-Identifier: GPL-2.0



 Device driver for regulators in Hi655x IC



 Copyright (c) 2016 HiSilicon Ltd.



 Authors:

 Chen Feng <puck.chen@hisilicon.com>

 Fei  Wang <w.f@huawei.com>

 LDO7 & LDO10 */

/*

 * isl6271a-regulator.c

 *

 * Support for Intersil ISL6271A voltage regulator

 *

 * Copyright (C) 2010 Marek Vasut <marek.vasut@gmail.com>

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any kind,

 * whether express or implied; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

 * General Public License for more details.

 PMIC details */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for voltage controller regulators

 *

 * Copyright (C) 2017 Google, Inc.

 voltage rising or no OVP */

 Make sure no infinite loop even in crazy cases */

 Try to go back to original voltage */

 voltage rising or no OVP */

 Try to go back to original voltage */

 We use the value as int and as divider; sanity check */

 determine number of steps within the range of the vctrl regulator */

 create mapping control <=> output voltage */

 we rely on the table to be ordered by ascending voltage */

 pre-calculate OVP-safe downward transitions */

 use next lowest voltage */

 Use locked consumer API when not in regulator framework */

 determine current voltage selector from control voltage */

 Drop ctrl-supply here in favor of regulator core managed supply */

 SPDX-License-Identifier: GPL-2.0+



 SLG51000 High PSRR, Multi-Output Regulators

 Copyright (C) 2019  Dialog Semiconductor



 Author: Eric Jeong <eric.jeong.opensource@diasemi.com>

 to the check below */

 Read event[R0], status[R1] and mask[R2] register */

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2020 NXP.

 * NXP PCA9450 pmic driver

 dvs0 */

 dvs1 */

/*

 * BUCK1/2/3

 * BUCK1RAM[1:0] BUCK1 DVS ramp rate setting

 * 00: 25mV/1usec

 * 01: 25mV/2usec

 * 10: 25mV/4usec

 * 11: 25mV/8usec

/*

 * BUCK1/2/3

 * 0.60 to 2.1875V (12.5mV step)

/*

 * BUCK4/5/6

 * 0.6V to 3.4V (25mV step)

/*

 * LDO1

 * 1.6 to 3.3V ()

/*

 * LDO2

 * 0.8 to 1.15V (50mV step)

/*

 * LDO3/4

 * 0.8 to 3.3V (100mV step)

/*

 * LDO5

 * 1.8 to 3.3V (100mV step)

/*

 * Buck3 removed on PCA9450B and connected with Buck1 internal for dual phase

 * on PCA9450C as no Buck3.

 Check your board and dts for match the right pmic */

 Unmask all interrupt except PWRON/WDOG/RSVD */

 Clear PRESET_EN bit in BUCK123_DVS to use DVS registers */

 Set reset behavior on assertion of WDOG_B signal */

	/*

	 * The driver uses the LDO5CTRL_H register to control the LDO5 regulator.

	 * This is only valid if the SD_VSEL input of the PMIC is high. Let's

	 * check if the pin is available as GPIO and set it to high.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regulator driver for the Richtek RT5033

 *

 * Copyright (C) 2014 Samsung Electronics, Co., Ltd.

 * Author: Beomho Seo <beomho.seo@samsung.com>

 SPDX-License-Identifier: GPL-2.0+



 da9052-regulator.c: Regulator driver for DA9052



 Copyright(c) 2011 Dialog Semiconductor Ltd.



 Author: David Dajun Chen <dchen@diasemi.com>

 Buck step size */

 Bit masks */

 DA9052 REGULATOR IDs */

 DA9052-BC BUCKs */

 DA9053-AA/Bx BUCK-CORE */

	{800000, 1000000, 1200000, 1500000},	/* DA9053-AA/Bx BUCK-PRO,

						 * BUCK-MEM and BUCK-PERI

	/* Determine the even or odd position of the buck current limit

	 * register field

 Select the appropriate current limit range */

 Select the appropriate current limit range */

	/* Determine the even or odd position of the buck current limit

	 * register field

	/* Some LDOs and DCDCs are DVC controlled which requires enabling of

	 * the activate bit to implment the changes on the output.

	/* The DVC controlled LDOs and DCDCs ramp with 6.25mV/µs after enabling

	 * the activate bit.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Voltage regulator support for AMS AS3722 PMIC

 *

 * Copyright (C) 2013 ams

 *

 * Author: Florian Lobmaier <florian.lobmaier@ams.com>

 * Author: Laxman Dewangan <ldewangan@nvidia.com>

 Regulator IDs */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * reg-virtual-consumer.c

 *

 * Copyright 2008 Wolfson Microelectronics PLC.

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

	/*

	 * sysfs_streq() doesn't need the \n's, but we add them so the strings

	 * will be shared with show_mode(), above.

/*

 * tps65217-regulator.c

 *

 * Regulator driver for TPS65217 PMIC

 *

 * Copyright (C) 2011 Texas Instruments Incorporated - https://www.ti.com/

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

 Enable the regulator and password protection is level 1 */

 Disable the regulator and password protection is level 1 */

 Set the voltage based on vsel value and write protect level is 2 */

 Set GO bit for DCDCx to initiate voltage transistion */

 Operations permitted on DCDCx, LDO2, LDO3 and LDO4 */

 Operations permitted on LDO1 */

 Allocate memory for strobes */

 Register the regulators */

 Store default strobe info */

 SPDX-License-Identifier: GPL-2.0+



 wm8350.c  --  Voltage and current regulation for the Wolfson WM8350 PMIC



 Copyright 2007, 2008 Wolfson Microelectronics PLC.



 Author: Liam Girdwood

         linux@wolfsonmicro.com

 Maximum value possible for VSEL */

 Microamps */

 turn on ISINK followed by DCDC */

 all DCDCs have same mV bits */

 all LDOs have same mV bits */

 all LDOs have same mV bits */

 all LDOs have same mV bits */

 slot valid ? */

 slot valid ? */

 force continuous mode */

 active / pulse skipping */

 standby mode */

 LDO mode */

 0 - 10mA - LDO */

 10mA - 100mA - Standby */

 > 100mA - Active */

 0 - 10mA - LDO */

 10mA - 100mA - Standby */

 > 100mA - Active */

/* Query the regulator for it's most efficient mode @ uV,uA

 * WM8350 regulator efficiency is pretty similar over

 * different input and output uV.

 do any regulatior specific init */

 register regulator */

 register regulator IRQ */

/**

 * wm8350_register_led - Register a WM8350 LED output

 *

 * @wm8350: The WM8350 device to configure.

 * @lednum: LED device index to create.

 * @dcdc: The DCDC to use for the LED.

 * @isink: The ISINK to use for the LED.

 * @pdata: Configuration for the LED.

 *

 * The WM8350 supports the use of an ISINK together with a DCDC to

 * provide a power-efficient LED driver.  This function registers the

 * regulators and instantiates the platform device for a LED.  The

 * operating modes for the LED regulators must be configured using

 * wm8350_isink_set_flash(), wm8350_dcdc25_set_mode() and

 * wm8350_dcdc_set_slot() prior to calling this function.

 Module information */

 SPDX-License-Identifier: GPL-2.0+



 Copyright (c) 2012-2014 Samsung Electronics Co., Ltd

              http:
 The highest number of possible regulators for supported devices. */

	/*

	 * One bit for each S2MPS11/S2MPS13/S2MPS14/S2MPU02 regulator whether

	 * the suspend mode was enabled.

	/*

	 * Array (size: number of regulators) with GPIO-s for external

	 * sleep control.

 Ramp delay can be enabled/disabled only for buck[2346] */

 Below LDO should be always on or does not support suspend mode. */

	/*

	 * Don't enable suspend mode if regulator is already disabled because

	 * this would effectively for a short time turn on the regulator after

	 * resuming.

	 * However we still want to toggle the suspend_state bit for regulator

	 * in case if it got enabled before suspending the system.

 voltage range for s2mps15 LDO 3, 5, 15, 16, 18, 20, 23 and 27 */

 voltage range for s2mps15 LDO 2, 6, 14, 17, 19, 21, 24 and 25 */

 voltage range for s2mps15 LDO 4, 11, 12, 13, 22 and 26 */

 voltage range for s2mps15 LDO 7, 8, 9 and 10 */

 voltage range for s2mps15 LDO 1 */

 voltage range for s2mps15 BUCK 1, 2, 3, 4, 5, 6 and 7 */

 voltage range for s2mps15 BUCK 8, 9 and 10 */

		/*

		 * Hand the GPIO descriptor management over to the regulator

		 * core, remove it from devres management.

 Module information */

 SPDX-License-Identifier: GPL-2.0+



 sy8106a-regulator.c - Regulator device driver for SY8106A



 Copyright (C) 2016 Ondřej Jirman <megous@megous.com>

 Copyright (c) 2017-2018 Icenowy Zheng <icenowy@aosc.io>

/*

 * The I2C controlled voltage will only work when this bit is set; otherwise

 * it will behave like a fixed regulator.

 Enabling/disabling the regulator is not yet implemented */

 Default limits measured in millivolts */

	/*

	 * This ramp_delay is a conservative default value which works on

	 * H3/H5 boards VDD-CPUX situations.

/*

 * I2C driver interface functions

 Ensure GO_BIT is enabled when probing */

 Probe regulator */

 SPDX-License-Identifier: GPL-2.0+

 Configure PAVDD on and softstart delay time to the minimum */

 Configure NAVDD on and softstart delay time to the minimum */

 Default EN pin to high, PAVDD and NAVDD will be on */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Regulator part of Palmas PMIC Chips

 *

 * Copyright 2011-2013 Texas Instruments Inc.

 *

 * Author: Graeme Gregory <gg@slimlogic.co.uk>

 * Author: Ian Lartey <ian@slimlogic.co.uk>

 Switch the enable value to ensure this is used for enable */

 SMPS3 and SMPS7 do not have tstep_addr setting */

/*

 * setup the hardware based sleep configuration of the SMPS/LDO regulators

 * from the platform data. This is different to the software based control

 * supported by the regulator framework as it is controlled by toggling

 * pins on the PMIC such as PREQ, SYSEN, ...

 Enable externally controlled regulator */

 Enable externally controlled regulator */

 Enable externally controlled regulator */

	/*

	 * When SMPS45 is set to off and LDO8 tracking is enabled, the LDO8

	 * output is defined by the LDO8_VOLTAGE.VSEL register divided by two,

	 * and can be set from 0.45 to 1.65 V.

		/* Miss out regulators which are not available due

		 * to alternate functions.

 Register the regulators */

 Check if LDO8 is in tracking mode or not */

 LOD6 in vibrator mode will have enable time 2000us */

 Initialise sleep/init values from platform data */

		/* Miss out regulators which are not available due

		 * to alternate functions.

 Register the regulators */

			/*

			 * To be confirmed. Discussion on going with PMIC Team.

			 * It is of the order of ~60mV/uS.

 Initialise sleep/init values from platform data */

		/*

		 * Miss out regulators which are not available due

		 * to slaving configurations.

 Initialise sleep/init values from platform data */

 Register the regulators */

			/*

			 * Read and store the RANGE bit for later use

			 * This must be done before regulator is probed,

			 * otherwise we error in probe with unsupportable

			 * ranges. Read the current smps mode for later use.

 Read the smps mode for later use. */

 set_mode overrides this value */

		/*

		 * Miss out regulators which are not available due

		 * to slaving configurations.

 Initialise sleep/init values from platform data */

 Register the regulators */

		/*

		 * Read and store the RANGE bit for later use

		 * This must be done before regulator is probed,

		 * otherwise we error in probe with unsupportable

		 * ranges. Read the current smps mode for later use.

 Read the smps mode for later use. */

 set_mode overrides this value */

 EINVAL: Property not found */

 use default value, when no value is specified */

 end */ }

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2018-2021, The Linux Foundation. All rights reserved.

/**

 * enum rpmh_regulator_type - supported RPMh accelerator types

 * @VRM:	RPMh VRM accelerator which supports voting on enable, voltage,

 *		and mode of LDO, SMPS, and BOB type PMIC regulators.

 * @XOB:	RPMh XOB accelerator which supports voting on the enable state

 *		of PMIC regulators.

/**

 * struct rpmh_vreg_hw_data - RPMh regulator hardware configurations

 * @regulator_type:		RPMh accelerator type used to manage this

 *				regulator

 * @ops:			Pointer to regulator ops callback structure

 * @voltage_range:		The single range of voltages supported by this

 *				PMIC regulator type

 * @n_voltages:			The number of unique voltage set points defined

 *				by voltage_range

 * @hpm_min_load_uA:		Minimum load current in microamps that requires

 *				high power mode (HPM) operation.  This is used

 *				for LDO hardware type regulators only.

 * @pmic_mode_map:		Array indexed by regulator framework mode

 *				containing PMIC hardware modes.  Must be large

 *				enough to index all framework modes supported

 *				by this regulator hardware type.

 * @of_map_mode:		Maps an RPMH_REGULATOR_MODE_* mode value defined

 *				in device tree to a regulator framework mode

/**

 * struct rpmh_vreg - individual RPMh regulator data structure encapsulating a

 *		single regulator device

 * @dev:			Device pointer for the top-level PMIC RPMh

 *				regulator parent device.  This is used as a

 *				handle in RPMh write requests.

 * @addr:			Base address of the regulator resource within

 *				an RPMh accelerator

 * @rdesc:			Regulator descriptor

 * @hw_data:			PMIC regulator configuration data for this RPMh

 *				regulator

 * @always_wait_for_ack:	Boolean flag indicating if a request must always

 *				wait for an ACK from RPMh before continuing even

 *				if it corresponds to a strictly lower power

 *				state (e.g. enabled --> disabled).

 * @enabled:			Flag indicating if the regulator is enabled or

 *				not

 * @bypassed:			Boolean indicating if the regulator is in

 *				bypass (pass-through) mode or not.  This is

 *				only used by BOB rpmh-regulator resources.

 * @voltage_selector:		Selector used for get_voltage_sel() and

 *				set_voltage_sel() callbacks

 * @mode:			RPMh VRM regulator current framework mode

/**

 * struct rpmh_vreg_init_data - initialization data for an RPMh regulator

 * @name:			Name for the regulator which also corresponds

 *				to the device tree subnode name of the regulator

 * @resource_name:		RPMh regulator resource name format string.

 *				This must include exactly one field: '%s' which

 *				is filled at run-time with the PMIC ID provided

 *				by device tree property qcom,pmic-id.  Example:

 *				"ldo%s1" for RPMh resource "ldoa1".

 * @supply_name:		Parent supply regulator name

 * @hw_data:			Configuration data for this PMIC regulator type

/**

 * rpmh_regulator_send_request() - send the request to RPMh

 * @vreg:		Pointer to the RPMh regulator

 * @cmd:		Pointer to the RPMh command to send

 * @wait_for_ack:	Boolean indicating if execution must wait until the

 *			request has been acknowledged as complete

 *

 * Return: 0 on success, errno on failure

 VRM voltage control register is set with voltage in millivolts. */

		/*

		 * Cache the voltage and send it later when the regulator is

		 * enabled or disabled.

/**

 * rpmh_regulator_vrm_set_load() - set the regulator mode based upon the load

 *		current requested

 * @rdev:		Regulator device pointer for the rpmh-regulator

 * @load_uA:		Aggregated load current in microamps

 *

 * This function is used in the regulator_ops for VRM type RPMh regulator

 * devices.

 *

 * Return: 0 on success, errno on failure

/**

 * rpmh_regulator_init_vreg() - initialize all attributes of an rpmh-regulator

 * @vreg:		Pointer to the individual rpmh-regulator resource

 * @dev:			Pointer to the top level rpmh-regulator PMIC device

 * @node:		Pointer to the individual rpmh-regulator resource

 *			device node

 * @pmic_id:		String used to identify the top level rpmh-regulator

 *			PMIC device on the board

 * @pmic_rpmh_data:	Pointer to a null-terminated array of rpmh-regulator

 *			resources defined for the top level PMIC device

 *

 * Return: 0 on success, errno on failure

 LVS hardware does not support voltage or mode configuration. */

 smps3 - smps5 not configured */

 ldo17 not configured */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * tps65910.c  --  TI tps65910

 *

 * Copyright 2010 Texas Instruments Inc.

 *

 * Author: Graeme Gregory <gg@slimlogic.co.uk>

 * Author: Jorge Eduardo Candelaria <jedu@slimlogic.co.uk>

 supported VIO voltages in microvolts */

 VSEL tables for TPS65910 specific LDOs and dcdc's */

 supported VRTC voltages in microvolts */

 supported VDD3 voltages in microvolts */

 supported VDIG1 voltages in microvolts */

 supported VDIG2 voltages in microvolts */

 supported VPLL voltages in microvolts */

 supported VDAC voltages in microvolts */

 supported VAUX1 voltages in microvolts */

 supported VAUX2 voltages in microvolts */

 supported VAUX33 voltages in microvolts */

 supported VMMC voltages in microvolts */

 supported BBCH voltages in microvolts */

 multiplier 0 == 1 but 2,3 normal */

 normalise to valid range */

 normalise to valid range*/

 The first 5 values of the selector correspond to 1V */

 The first 3 values of the selector correspond to 1V */

 Regulator ops (except VRTC) */

	/*

	 * Regulator can not be control from multiple external input EN1, EN2

	 * and EN3 together.

 External EN1 control */

 External EN2 control */

 External EN3 control for TPS65910 LDO only */

 Return if no external control is selected */

 Clear all sleep controls */

	/*

	 * For regulator that has separate operational and sleep register make

	 * sure that operational is used and clear sleep register to turn

	 * regulator off when external control is inactive

 Give control of all register to control port */

		/* Work around silicon erratum SWCZ010: output programmed

		 * voltage level can go higher than expected or crash

		 * Workaround: use no synchronization of DCDC clocks

 Register the regulators */

		/*

		 * Failing on regulator for configuring externally control

		 * is not a serious issue, just throw warning.

 Save regulator for cleanup */

	/*

	 * Before bootloader jumps to kernel, it makes sure that required

	 * external control signals are in desired state so that given rails

	 * can be configure accordingly.

	 * If rails are configured to be controlled from external control

	 * then before shutting down/rebooting the system, the external

	 * control configuration need to be remove from the rails so that

	 * its output will be available as per register programming even

	 * if external controls are removed. This is require when the POR

	 * value of the control signals are not in active state and before

	 * bootloader initializes it, the system requires the rail output

	 * to be active for booting.

 SPDX-License-Identifier: GPL-2.0-only



 Copyright (C) 2020 MediaTek Inc.



 Author: Gene Chen <gene_chen@richtek.com>

 SPDX-License-Identifier: GPL-2.0+



 Regulator driver for DA9055 PMIC



 Copyright(c) 2012 Dialog Semiconductor Ltd.



 Author: David Dajun Chen <dchen@diasemi.com>

 DA9055 REGULATOR IDs */

 DA9055 BUCK current limit */

	/*

	 * There are two voltage register set A & B for voltage ramping but

	 * either one of then can be active therefore we first determine

	 * the active register set.

 Get the voltage for the active register set A/B */

	/*

	 * Regulator register set A/B is not selected through GPIO therefore

	 * we use default register set A for voltage ramping.

 Select register set A */

 Set the voltage */

	/*

	 * Here regulator register set A/B is selected through GPIO.

	 * Therefore we first determine the selected register set A/B and

	 * then set the desired voltage for that register set A/B.

 Set the voltage */

 Select register set B for suspend voltage ramping. */

 Select register set B for voltage ramping. */

 Diselect register set B. */

/*

 * Configures regulator to be controlled either through GPIO 1 or 2.

 * GPIO can control regulator state and/or select the regulator register

 * set A/B for voltage ramping.

		/*

		 * GPI pin is muxed with regulator to control the

		 * regulator state.

		/*

		 * Let the regulator know that its state is controlled

		 * through GPI.

		/*

		 * GPI pin is muxed with regulator to select the

		 * regulator register set A/B for voltage ramping.

		/*

		 * Let the regulator know that its register set A/B

		 * will be selected through GPI for voltage ramping.

 Only LDO 5 and 6 has got the over current interrupt */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Voltage and current regulation for AD5398 and AD5821

 *

 * Copyright 2010 Analog Devices Inc.

 *

 * Enter bugs at http://blackfin.uclinux.org/

 read chip enable bit */

 prepare register data */

 write the new current value back as well as enable bit */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/drivers/regulator/aat2870-regulator.c

 *

 * Copyright (c) 2011, NVIDIA Corporation.

 * Author: Jin Park <jinyoungp@nvidia.com>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Maxim MAX77620 Regulator driver

 *

 * Copyright (c) 2016-2018, NVIDIA CORPORATION.  All rights reserved.

 *

 * Author: Mallikarjun Kasoju <mkasoju@nvidia.com>

 *	Laxman Dewangan <ldewangan@nvidia.com>

 Power Mode */

 SD Slew Rate */

 Regulator types */

 FPS power up period setting */

 FPS power down period setting */

 Update power mode */

 If rails are externally control of FPS then enable it always. */

	/* Device specific ramp rate setting tells that platform has

	 * different ramp rate from advertised value. In this case,

	 * do not configure anything and just return success.

	/*

	 * Set of_node_reuse flag to prevent driver core from attempting to

	 * claim any pinmux resources already claimed by the parent device.

	 * Otherwise PMIC driver will fail to re-probe.

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2020, The Linux Foundation. All rights reserved.

 Clear irq latch status to avoid spurious event */

 Enable OCP HW interrupt */

/**

 * qcom_labibb_check_ocp_status - Check the Over-Current Protection status

 * @vreg: Main driver structure

 *

 * This function checks the STATUS1 register for the VREG_OK bit: if it is

 * set, then there is no Over-Current event.

 *

 * Returns: Zero if there is no over-current, 1 if in over-current or

 *          negative number for error

/**

 * qcom_labibb_ocp_recovery_worker - Handle OCP event

 * @work: OCP work structure

 *

 * This is the worker function to handle the Over Current Protection

 * hardware event; This will check if the hardware is still

 * signaling an over-current condition and will eventually stop

 * the regulator if such condition is still signaled after

 * LABIBB_MAX_OCP_COUNT times.

 *

 * If the driver that is consuming the regulator did not take action

 * for the OCP condition, or the hardware did not stabilize, a cut

 * of the LAB and IBB regulators will be forced (regulators will be

 * disabled).

 *

 * As last, if the writes to shut down the LAB/IBB regulators fail

 * for more than LABIBB_MAX_FATAL_COUNT, then a kernel panic will be

 * triggered, as a last resort to protect the hardware from burning;

 * this, however, is expected to never happen, but this is kept to

 * try to further ensure that we protect the hardware at all costs.

		/*

		 * If we tried to disable the regulator multiple times but

		 * we kept failing, there's only one last hope to save our

		 * hardware from the death: raise a kernel bug, reboot and

		 * hope that the bootloader kindly saves us. This, though

		 * is done only as paranoid checking, because failing the

		 * regmap write to disable the vreg is almost impossible,

		 * since we got here after multiple regmap R/W.

 Disable the regulator immediately to avoid damage */

 We cannot trust it without OCP enabled. */

 Everything went fine: reset the OCP count! */

/**

 * qcom_labibb_ocp_isr - Interrupt routine for OverCurrent Protection

 * @irq:  Interrupt number

 * @chip: Main driver structure

 *

 * Over Current Protection (OCP) will signal to the client driver

 * that an over-current event has happened and then will schedule

 * a recovery worker.

 *

 * Disabling and eventually re-enabling the regulator is expected

 * to be done by the driver, as some hardware may be triggering an

 * over-current condition only at first initialization or it may

 * be expected only for a very brief amount of time, after which

 * the attached hardware may be expected to stabilize its current

 * draw.

 *

 * Returns: IRQ_HANDLED for success or IRQ_NONE for failure.

 If the regulator is not enabled, this is a fake event */

 If we tried to recover for too many times it's not getting better */

	/*

	 * If we (unlikely) can't read this register, to prevent hardware

	 * damage at all costs, we assume that the overcurrent event was

	 * real; Moreover, if the status register is not signaling OCP,

	 * it was a spurious event, so it's all ok.

	/*

	 * Disable the interrupt temporarily, or it will fire continuously;

	 * we will re-enable it in the recovery worker function.

 Warn the user for overcurrent */

 Disable the interrupt to avoid hogging */

 Signal overcurrent event to drivers */

 Schedule the recovery work */

	/*

	 * labibb supports only protection - and does not support setting

	 * limit. Furthermore, we don't support disabling protection.

 If there is no OCP interrupt, there's nothing to set */

 IRQ polarities - LAB: trigger-low, IBB: trigger-high */

 Activate OCP HW level interrupt */

 Set OCP interrupt polarity */

/**

 * qcom_labibb_check_sc_status - Check the Short Circuit Protection status

 * @vreg: Main driver structure

 *

 * This function checks the STATUS1 register on both LAB and IBB regulators

 * for the ShortCircuit bit: if it is set on *any* of them, then we have

 * experienced a short-circuit event.

 *

 * Returns: Zero if there is no short-circuit, 1 if in short-circuit or

 *          negative number for error

 We have to work on both regulators due to PBS... */

/**

 * qcom_labibb_sc_recovery_worker - Handle Short Circuit event

 * @work: SC work structure

 *

 * This is the worker function to handle the Short Circuit Protection

 * hardware event; This will check if the hardware is still

 * signaling a short-circuit condition and will eventually never

 * re-enable the regulator if such condition is still signaled after

 * LABIBB_MAX_SC_COUNT times.

 *

 * If the driver that is consuming the regulator did not take action

 * for the SC condition, or the hardware did not stabilize, this

 * worker will stop rescheduling, leaving the regulators disabled

 * as already done by the Portable Batch System (PBS).

 *

 * Returns: IRQ_HANDLED for success or IRQ_NONE for failure.

	/*

	 * If we tried to check the regulator status multiple times but we

	 * kept failing, then just bail out, as the Portable Batch System

	 * (PBS) will disable the vregs for us, preventing hardware damage.

 Too many short-circuit events. Throw in the towel. */

	/*

	 * The Portable Batch System (PBS) automatically disables LAB

	 * and IBB when a short-circuit event is detected, so we have to

	 * check and work on both of them at the same time.

	/*

	 * If we have reached this point, we either have successfully

	 * recovered from the SC condition or we had a spurious SC IRQ,

	 * which means that we can re-enable the regulators, if they

	 * have ever been disabled by the PBS.

 Everything went fine: reset the OCP count! */

	/*

	 * Now that we have done basic handling of the short-circuit,

	 * reschedule this worker in the regular system workqueue, as

	 * taking action is not truly urgent anymore.

/**

 * qcom_labibb_sc_isr - Interrupt routine for Short Circuit Protection

 * @irq:  Interrupt number

 * @chip: Main driver structure

 *

 * Short Circuit Protection (SCP) will signal to the client driver

 * that a regulation-out event has happened and then will schedule

 * a recovery worker.

 *

 * The LAB and IBB regulators will be automatically disabled by the

 * Portable Batch System (PBS) and they will be enabled again by

 * the worker function if the hardware stops signaling the short

 * circuit event.

 *

 * Returns: IRQ_HANDLED for success or IRQ_NONE for failure.

 Warn the user for short circuit */

	/*

	 * Disable the interrupt temporarily, or it will fire continuously;

	 * we will re-enable it in the recovery worker function.

 Signal out of regulation event to drivers */

 Schedule the short-circuit handling as high-priority work */

 Current limit setting needs secure access */

 IBB discharge resistor values in KOhms */

 Soft start time in microseconds */

		/* Validate if the type of regulator is indeed

		 * what's mentioned in DT.

 The Short Circuit interrupt is critical */

 OverCurrent Protection IRQ is optional */

 LAB Limits: 200-1600mA */

 IBB Limits: 0-1550mA */

 No override bit */

 SPDX-License-Identifier: GPL-2.0+



 pv88060-regulator.c - Regulator device driver for PV88060

 Copyright (C) 2015  Powerventure Semiconductor Ltd.

 PV88060 REGULATOR IDs */

 BUCKs */

 LDOs */

 SWTs */

 buck configuration register */

/* Current limits array (in uA) for BUCK1

 * Entry indexes corresponds to register values.

/*

 * I2C driver interface functions

 SPDX-License-Identifier: GPL-2.0+

 HW Enable + Soft start time */

 ramp delay dividend is 12500 uV/uS, and divisor from 1 to 8 */

 xor checksum for bit 6 to 0 */

 Default over current 14A */

 Default over temperature 150'c */

 Default power good delay time 10us */

 Default slewrate 12.5mV/uS */

 Default switch frequency 800KHz */

 Default voltage 750mV */

 SPDX-License-Identifier: GPL-2.0



 Copyright (C) 2018 BayLibre SAS

 Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>



 Regulator driver for MAXIM 77650/77651 charger/power-supply.

 range index 0 */

 range index 1 */

 range index 2 */

 range index 3 */

 Special case for max77651 SBB1 - pickable linear-range voltage mapping. */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) STMicroelectronics 2019

 Authors: Gabriel Fernandez <gabriel.fernandez@st.com>

          Pascal Paillet <p.paillet@st.com>.

/*

 * Registers description

 list of supported regulators */

 use an arbitrary timeout of 20ms */

 use an arbitrary timeout of 20ms */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PCAP2 Regulator Driver

 *

 * Copyright (c) 2009 Daniel Ribeiro <drwyrm@gmail.com>

 V5 STBY and LOWPWR are on PCAP_REG_VREG2 */

 VAUX2 ... VSIM2 STBY and LOWPWR are on PCAP_REG_LOWPWR */

 SW3 STBY is on PCAP_REG_AUXVREG */

 SWxS used to control SWx voltage on standby */

/*	VREG_INFO(SW1S,  PCAP_REG_LOWPWR,  NA, 12, NA, NA),

 the regulator doesn't support voltage switching */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regulator driver for LP87565 PMIC

 *

 * Copyright (C) 2017 Texas Instruments Incorporated - https://www.ti.com/

 BUCK's */

 LP87565 BUCK current limit */

 Conservatively give a 15% margin */

 Operations permitted on BUCKs */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

/*

 * max8660.c  --  Voltage regulation for the Maxim 8660/8661

 *

 * based on max1586.c and wm8400-regulator.c

 *

 * Copyright (C) 2009 Wolfram Sang, Pengutronix e.K.

 *

 * Some info:

 *

 * Datasheet: http://datasheets.maxim-ic.com/en/ds/MAX8660-MAX8661.pdf

 *

 * This chip is a bit nasty because it is a write-only device. Thus, the driver

 * uses shadow registers to keep track of its values. The main problem appears

 * to be the initialization: When Linux boots up, we cannot know if the chip is

 * in the default state or not, so we would have to pass such information in

 * platform_data. As this adds a bit of complexity to the driver, this is left

 * out for now until it is really needed.

 *

 * [A|S|M]DTV1 registers are currently not used, but [A|S|M]DTV2.

 *

 * If the driver is feature complete, it might be worth to check if one set of

 * functions for V3-V7 is sufficient. For maximum flexibility during

 * development, they are separated for now.

 not a real register */

 as chip is write only */

/*

 * DCDC functions

 Select target voltage register and activate regulation */

/*

 * LDO5 functions

 Select target voltage register and activate regulation */

/*

 * LDO67 functions

 Simulate always on */

 Otherwise devices can be toggled via software */

	/*

	 * First, set up shadow registers to prevent glitches. As some

	 * registers are shared between regulators, everything must be properly

	 * set up for all regulators in advance.

 Finally register devices */

 Module information */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * fixed.c

 *

 * Copyright 2008 Wolfson Microelectronics PLC.

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 *

 * Copyright (c) 2009 Nokia Corporation

 * Roger Quadros <ext-roger.quadros@nokia.com>

 *

 * This is useful for systems with mixed controllable and

 * non-controllable regulators, as well as for allowing testing on

 * systems with no controllable regulators.

/**

 * of_get_fixed_voltage_config - extract fixed_voltage_config structure info

 * @dev: device requesting for fixed_voltage_config

 * @desc: regulator description

 *

 * Populates fixed_voltage_config structure by extracting data from device

 * tree node, returns a pointer to the populated structure of NULL if memory

 * alloc fails.

	/*

	 * The signal will be inverted by the GPIO core if flagged so in the

	 * descriptor.

	/*

	 * Some fixed regulators share the enable line between two

	 * regulators which makes it necessary to get a handle on the

	 * same descriptor for two different consumers. This will get

	 * the GPIO descriptor, but only the first call will initialize

	 * it so any flags such as inversion or open drain will only

	 * be set up by the first caller and assumed identical on the

	 * next caller.

	 *

	 * FIXME: find a better way to deal with this.

	/*

	 * Do not use devm* here: the regulator core takes over the

	 * lifecycle management of the GPIO descriptor.

 SPDX-License-Identifier: GPL-2.0



 Regulator controller driver for UniPhier SoC

 Copyright 2018 Socionext Inc.

 Author: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>

 USB3 controller data */

 USB VBUS */

 Sentinel */ },

/*

 * tps62360.c -- TI tps62360

 *

 * Driver for processor core supply tps62360, tps62361B, tps62362 and tps62363.

 *

 * Copyright (c) 2012, NVIDIA Corporation.

 *

 * Author: Laxman Dewangan <ldewangan@nvidia.com>

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any kind,

 * whether express or implied; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA

 * 02111-1307, USA

 Register definitions */

 tps 62360 chip information */

/*

 * find_voltage_set_register: Find new voltage configuration register

 * (VSET) id.

 * The finding of the new VSET register will be based on the LRU mechanism.

 * Each VSET register will have different voltage configured . This

 * Function will look if any of the VSET register have requested voltage set

 * or not.

 *     - If it is already there then it will make that register as most

 *       recently used and return as found so that caller need not to set

 *       the VSET register but need to set the proper gpios to select this

 *       VSET register.

 *     - If requested voltage is not found then it will use the least

 *       recently mechanism to get new VSET register for new configuration

 *       and will return not_found so that caller need to set new VSET

 *       register and then gpios (both).

	/*

	 * If gpios are available to select the VSET register then least

	 * recently used register for new configuration.

 Select proper VSET register vio gpios */

 Enable force PWM mode in FAST mode only. */

 If gpios are valid then all register set need to be control */

 Initialize internal pull up/down control */

 Reset output discharge path to reduce power consumption */

 Get ramp value from ramp control register */

 ramp mV/us = 32/(2^ramp_ctrl) */

		/*

		 * Initialize the lru index with vset_reg id

		 * The index 0 will be most recently used and

 Register the regulators */

 Configure the output discharge path */

 SPDX-License-Identifier: GPL-2.0+



 Regulator support for WM8400



 Copyright 2008 Wolfson Microelectronics PLC.



 Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 Datasheet: hibernate */

 Datasheet: standby */

 Datasheet: active with or without force PWM */

 Datasheet: active with force PWM */

 Datasheet: active */

 Datasheet: standby */

/**

 * wm8400_register_regulator - enable software control of a WM8400 regulator

 *

 * This function enables software control of a WM8400 regulator via

 * the regulator API.  It is intended to be called from the

 * platform_init() callback of the WM8400 MFD driver.

 *

 * @dev:      The WM8400 device to operate on.

 * @reg:      The regulator to control.

 * @initdata: Regulator initdata for the regulator.

 SPDX-License-Identifier: GPL-2.0+



 Regulator driver for ATC260x PMICs



 Copyright (C) 2019 Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>

 Copyright (C) 2020 Cristian Ciocaltea <cristian.ciocaltea@gmail.com>

/*

 * Note LDO8 is not documented in datasheet (v2.4), but supported

 * in the vendor's driver implementation (xapp-le-kernel).

 Instantiate the regulators */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * max1586.c  --  Voltage and current regulation for the Maxim 1586

 *

 * Copyright (C) 2008 Robert Jarzmik

 min/max V3 voltage */

/*

 * V6 voltage

 * On I2C bus, sending a "x" byte to the max1586 means :

 *   set V6 to either 0V, 1.8V, 2.5V, 3V depending on (x & 0x3)

 * As regulator framework doesn't accept voltages to be 0V, we use 1uV.

/*

 * V3 voltage

 * On I2C bus, sending a "x" byte to the max1586 means :

 *   set V3 to 0.700V + (x & 0x1f) * 0.025V

 * This voltage can be increased by external resistors

 * R24 and R25=100kOhm as described in the data sheet.

 * The gain is approximately: 1 + R24/R25 + R24/185.5kOhm

/*

 * The Maxim 1586 controls V3 and V6 voltages, but offers no way of reading back

 * the set up value.

	/*

	 * If matched is 0, ie. neither Output_V3 nor Output_V6 have been found,

	 * return 0, which signals the normal situation where no subregulator is

	 * available. This is normal because the max1586 doesn't provide any

	 * readback support, so the subregulators can't report any status

	 * anyway.  If matched < 0, return the error.

 Set curr_sel to default voltage on power-up */

 1.3V */

 Module information */

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2016 MediaTek Inc.

 Author: Chen Zhong <chen.zhong@mediatek.com>

/*

 * MT6323 regulators' information

 *

 * @desc: standard fields of regulator description.

 * @qi: Mask for query enable signal status of regulators

 * @vselon_reg: Register sections for hardware control mode of bucks

 * @vselctrl_reg: Register for controlling the buck control mode.

 * @vselctrl_mask: Mask for query buck's voltage control mode.

 The array is indexed by id(MT6323_ID_XXX) */

 Query buck controller to select activated voltage register part */

 Read PMIC chip revision to update constraints and voltage table */

 sentinel */ },

/*

 * max8973-regulator.c -- Maxim max8973A

 *

 * Regulator driver for MAXIM 8973A DC-DC step-down switching regulator.

 *

 * Copyright (c) 2012, NVIDIA Corporation.

 *

 * Author: Laxman Dewangan <ldewangan@nvidia.com>

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any kind,

 * whether express or implied; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA

 * 02111-1307, USA

 Register definitions */

 MAX8973_VOUT */

 MAX8973_VOUT_DVS */

 MAX8973_CONTROL1 */

 MAX8973_CONTROL2 */

 Maxim 8973 chip information */

/*

 * find_voltage_set_register: Find new voltage configuration register (VOUT).

 * The finding of the new VOUT register will be based on the LRU mechanism.

 * Each VOUT register will have different voltage configured . This

 * Function will look if any of the VOUT register have requested voltage set

 * or not.

 *     - If it is already there then it will make that register as most

 *       recently used and return as found so that caller need not to set

 *       the VOUT register but need to set the proper gpios to select this

 *       VOUT register.

 *     - If requested voltage is not found then it will use the least

 *       recently mechanism to get new VOUT register for new configuration

 *       and will return not_found so that caller need to set new VOUT

 *       register and then gpios (both).

	/*

	 * If gpios are available to select the VOUT register then least

	 * recently used register for new configuration.

 Select proper VOUT register vio gpios */

 Enable force PWM mode in FAST mode only. */

  Clock advance trip configuration */

 Configure inductor value */

 If external control is enabled then disable EN bit */

 +1 degC to trigger cool devive */

		/*

		 * Initialize the lru index with vout_reg id

		 * The index 0 will be most recently used and

		/*

		 * If there is no DVS GPIO, the VOUT register

		 * address is fixed.

		/*

		 * We do not let the core switch this regulator on/off,

		 * we just leave it on.

	/*

	 * Register the regulators

	 * Turn the GPIO descriptor over to the regulator core for

	 * lifecycle management if we pass an ena_gpiod.

/*

 * TI TPS65132 Regulator driver

 *

 * Copyright (C) 2017 NVIDIA CORPORATION. All rights reserved.

 *

 * Author: Venkat Reddy Talla <vreddytalla@nvidia.com>

 *		Laxman Dewangan <ldewangan@nvidia.com>

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation; either version 2 of the

 * License, or (at your option) any later version.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any kind,

 * whether express or implied; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

 * General Public License for more details.

 Hardware automatically enable discharge bit in enable */

 Ignore the error other than probe defer */

 Ignore the error other than probe defer */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2014, Sony Mobile Communications AB.

 * Copyright (c) 2012-2013, The Linux Foundation. All rights reserved.

 used if voltage is in mV */

 used if voltage is in uV */

 peak current in mA */

 pull down enable */

 average current in mA */

 force mode */

 power mode */

 pin control */

 pin function */

 NCP and switch */

 NCP */

 frequency: NCP and SMPS */

 clock source: SMPS */

 switch: control OCP and SS */

/*

 * Physically available PMIC regulator voltage ranges

/*

 * PM8018 regulators

/*

 * PM8058 regulators

/*

 * PM8901 regulators

/*

 * PM8921 regulators

		/*

		 * If force-mode is encoded as 2 bits then the

		 * possible register values are:

		 * NONE, LPM, HPM

		 * otherwise:

		 * NONE, LPM, AUTO, HPM, BYPASS

 SPDX-License-Identifier: GPL-2.0



 Copyright (C) 2021 ROHM Semiconductors

 regulator IRQ based event notification helpers



 Logic has been partially adapted from qcom-labibb driver.



 Author: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>

/*

 * Should only be called from threaded handler to prevent potential deadlock

		/*

		 * If the 'last resort' IC recovery failed we will have

		 * nothing else left to do...

		/*

		 * If h->die() was implemented we assume recovery has been

		 * attempted (probably regulator was shut down) and we

		 * just enable IRQ and bail-out.

 Driver could not get current status */

			/*

			 * IC status reading succeeded. update error info

			 * just in case the renable changed it.

			/*

			 * The IC indicated problem is still ON - no point in

			 * re-enabling the IRQ. Retry later.

	/*

	 * Either IC reported problem cleared or no status checker was provided.

	 * If problems are gone - good. If not - then the IRQ will fire again

	 * and we'll have a new nice loop. In any case we should clear error

	 * flags here and re-enable IRQs.

	/*

	 * Things have been seemingly successful => zero retry-counter.

	/*

	 * we spare a few cycles by not clearing statuses prior to this call.

	 * The IC driver must initialize the status buffers for rdevs

	 * which it indicates having active events via rdev_map.

	 *

	 * Maybe we should just to be on a safer side(?)

	/*

	 * If status reading fails (which is unlikely) we don't ack/disable

	 * IRQ but just increase fail count and retry when IRQ fires again.

	 * If retry_count exceeds the given safety limit we call IC specific die

	 * handler which can try disabling regulator(s).

	 *

	 * If no die handler is given we will just power-off as a last resort.

	 *

	 * We could try disabling all associated rdevs - but we might shoot

	 * ourselves in the head and leave the problematic regulator enabled. So

	 * if IC has no die-handler populated we just assume the regulator

	 * can't be disabled.

	/*

	 * Let's not disable IRQ if there were no status bits for us. We'd

	 * better leave spurious IRQ handling to genirq

	/*

	 * Some events are bogus if the regulator is disabled. Skip such events

	 * if all relevant regulators are disabled

			/*

			 * If any of the flagged regulators is enabled we do

			 * handle this

 Disable IRQ if HW keeps line asserted */

	/*

	 * IRQ seems to be for us. Let's fire correct notifiers / store error

	 * flags

 If we have no recovery, just try shut down straight away */

 If die() failed shut down as a last attempt to save the HW */

/**

 * regulator_irq_helper - register IRQ based regulator event/error notifier

 *

 * @dev:		device providing the IRQs

 * @d:			IRQ helper descriptor.

 * @irq:		IRQ used to inform events/errors to be notified.

 * @irq_flags:		Extra IRQ flags to be OR'ed with the default

 *			IRQF_ONESHOT when requesting the (threaded) irq.

 * @common_errs:	Errors which can be flagged by this IRQ for all rdevs.

 *			When IRQ is re-enabled these errors will be cleared

 *			from all associated regulators

 * @per_rdev_errs:	Optional error flag array describing errors specific

 *			for only some of the regulators. These errors will be

 *			or'ed with common errors. If this is given the array

 *			should contain rdev_amount flags. Can be set to NULL

 *			if there is no regulator specific error flags for this

 *			IRQ.

 * @rdev:		Array of pointers to regulators associated with this

 *			IRQ.

 * @rdev_amount:	Amount of regulators associated with this IRQ.

 *

 * Return: handle to irq_helper or an ERR_PTR() encoded error code.

/**

 * regulator_irq_helper_cancel - drop IRQ based regulator event/error notifier

 *

 * @handle:		Pointer to handle returned by a successful call to

 *			regulator_irq_helper(). Will be NULLed upon return.

 *

 * The associated IRQ is released and work is cancelled when the function

 * returns.

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2015 MediaTek Inc.

 Author: Henry Chen <henryc.chen@mediatek.com>

 Default limits measured in millivolts and milliamps */

/*

 * I2C driver interface functions

 SPDX-License-Identifier: GPL-2.0+



 Copyright (C) 2011 Freescale Semiconductor, Inc. All Rights Reserved.

 64 cycles per step */

 cycle based on 24M OSC */

 check whether need to care about LDO ramp up speed */

		/*

		 * the delay for LDO ramp up time is

		 * based on the register setting, we need

		 * to calculate how many steps LDO need to

		 * ramp up, and how much delay needed. (us)

 read LDO ramp up setting, only for core reg */

 Only core regulators have the ramp up delay configuration. */

		/*

		 * In case vddpu was disabled by the bootloader, we need to set

		 * a sane default until imx6-cpufreq was probed and changes the

		 * voltage to the correct value. In this case we set 1.25V.

 set the default voltage of the pcie phy to be 1.100v */

 register regulator */

 end */ }

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2020 ROHM Semiconductors

 ROHM BD9576MUF/BD9573MUF regulator driver

 VOUT3 and 4 has 10mV step */

 Do not overwrite ERR config with WARN */

 Internal values are already micro-amperes */

 Internal values are already micro-amperes */

 We abuse uvd fields for OCW on VoutS1 */

			/*

			 * If both warning and error are requested, prioritize

			 * ERROR configuration

	/*

	 * limits are given in uA, rfet is mOhm

	 * Divide lim_uA by 1000 to get Vfet in uV.

	 * (We expect both Rfet and limit uA to be magnitude of hundreds of

	 * milli Amperes & milli Ohms => we should still have decent accuracy)

	/*

	 * BD9576 has enable control as a special value in limit reg. Can't

	 * set limit but keep feature disabled or enable W/O given limit.

	/*

	 * Check that there is no mismatch for what the detection IRQs are to

	 * be used.

	/*

	 * BD9576 has enable control as a special value in limit reg. Can't

	 * set limit but keep feature disabled or enable W/O given limit.

	/*

	 * Check that there is no mismatch for what the detection IRQs are to

	 * be used.

	/*

	 * BD9576MUF has fixed temperature limits

	 * The detection can only be enabled/disabled

 Protection can't be disabled */

	/*

	 * Check that there is no mismatch for what the detection IRQs are to

	 * be used.

	/*

	 * If any of the regulators is interested in thermal warning we keep IRQ

	 * enabled.

		/*

		 * It seems we stil have same status. Ack and return

		 * information that we are still out of limits and core

		 * should not enable IRQ

	/*

	 * Status was changed. Either prolem was solved or we have new issues.

	 * Let's re-enable IRQs and be prepared to report problems again

	/*

	 * Go through the set status bits and report either error or warning

	 * to the notifier depending on what was flagged in DT

 There is 1 bit gap in register after Vout1 .. Vout4 statuses */

	/*

	 * We (ab)use the uvd for OCW notification. DT parsing should

	 * have added correct OCW flag to uvd_notif and uvd_err for S1

 There is 1 bit gap in register after Vout1 .. Vout4 statuses */

 Clear the sub-IRQ status */

 Clear the sub-IRQ status */

 All regulators are related to UVD and thermal IRQs... */

 ...But VoutS1 is not flagged by OVD IRQ */

 VOUT1 enable state judged by VOUT1_EN pin */

 See if we have GPIO defined */

 VOUT1_OPS gpio ctrl */

			/*

			 * Regulator core prioritizes the ena_gpio over

			 * enable/disable/is_enabled callbacks so no need to

			 * clear them. We can still use same ops

			/*

			 * In theory it is possible someone wants to set

			 * vout1-en LOW during OTP loading and set VOUT1 to be

			 * controlled by GPIO - but control the GPIO from some

			 * where else than this driver. For that to work we

			 * should unset the is_enabled callback here.

			 *

			 * I believe such case where rohm,vout1-en-low is set

			 * and vout1-en-gpios is not is likely to be a

			 * misconfiguration. So let's just err out for now.

	/*

	 * If more than one PMIC needs to be controlled by same processor then

	 * allocate the regulator data array here and use bd9576_regulators as

	 * template. At the moment I see no such use-case so I spare some

	 * bytes and use bd9576_regulators directly for non-constant configs

	 * like DDR voltage selection.

		/*

		 * Clear the VOUT1 GPIO setting - rest of the regulators do not

		 * support GPIO control

		/*

		 * We can add both the possible error and warning flags here

		 * because the core uses these only for status clearing and

		 * if we use warnings - errors are always clear and the other

		 * way around. We can also add CURRENT flag for all regulators

		 * because it is never set if it is not supported. Same applies

		 * to setting UVD for VoutS1 - it is not accidentally cleared

		 * as it is never set.

 Register notifiers - can fail if IRQ is not given */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regulator driver for National Semiconductors LP3971 PMIC chip

 *

 *  Copyright (C) 2009 Samsung Electronics

 *  Author: Marek Szyprowski <m.szyprowski@samsung.com>

 *

 * Based on wm8350.c

/* System control register 1 initial value,

/*	Voltage control registers shift:

	LP3971_BUCK1 -> 0

	LP3971_BUCK2 -> 4

	LP3971_BUCK3 -> 6

/*	Voltage control registers:

	LP3971_LDO1 -> LP3971_LDO_VOL_CONTR_BASE + 0

	LP3971_LDO2 -> LP3971_LDO_VOL_CONTR_BASE + 0

	LP3971_LDO3 -> LP3971_LDO_VOL_CONTR_BASE + 1

	LP3971_LDO4 -> LP3971_LDO_VOL_CONTR_BASE + 1

	LP3971_LDO5 -> LP3971_LDO_VOL_CONTR_BASE + 2

/*	Voltage control registers shift:

	LP3971_LDO1 -> 0, LP3971_LDO2 -> 4

	LP3971_LDO3 -> 0, LP3971_LDO4 -> 4

	LP3971_LDO5 -> 0

 Instantiate the regulators */

 Detect LP3971 */

 SPDX-License-Identifier: GPL-2.0



 Device driver for regulators in Hisi IC



 Copyright (c) 2013 Linaro Ltd.

 Copyright (c) 2011 HiSilicon Ltd.

 Copyright (c) 2020-2021 Huawei Technologies Co., Ltd.



 Guodong Xu <guodong.xu@linaro.org>

 Serialize regulator enable logic */

/**

 * HI6421V600_LDO() - specify a LDO power line

 * @_id: LDO id name string

 * @vtable: voltage table

 * @ereg: enable register

 * @emask: enable mask

 * @vreg: voltage select register

 * @odelay: off/on delay time in uS

 * @etime: enable time in uS

 * @ecomask: eco mode mask

 * @ecoamp: eco mode load uppler limit in uA

 cannot enable more than one regulator at one time */

 Avoid powering up multiple devices at the same time */

 HI6421v600 regulators with known registers */

	/*

	 * This driver is meant to be called by hi6421-spmi-core,

	 * which should first set drvdata. If this doesn't happen, hit

	 * a warn on and return.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2010

 *

 * Authors: Sundar Iyer <sundar.iyer@stericsson.com> for ST-Ericsson

 *          Bengt Jonsson <bengt.g.jonsson@stericsson.com> for ST-Ericsson

 *

 * Power domain regulators on DB8500

 db8500 regulator operations */

/*

 * EPOD control

/*

 * Regulator switch

/*

 * Regulator information

 assign per-regulator data */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regulators driver for Marvell 88PM8607

 *

 * Copyright (C) 2009 Marvell International Ltd.

 *	Haojian Zhuang <haojian.zhuang@marvell.com>

 There're resources in 88PM8607 regulator driver */

 There's no resource in 88PM8606 PREG regulator driver */

 i is used to check regulator ID */

 check DVC ramp slope double */

 SPDX-License-Identifier: GPL-2.0

/*

 * ROHM BD9571MWV-M and BD9574MWF-M regulator driver

 *

 * Copyright (C) 2017 Marek Vasut <marek.vasut+renesas@gmail.com>

 *

 * Based on the TPS65086 driver

 *

 * NOTE: VD09 is missing

 DDR Backup Power */

 from "rohm,ddr-backup-power" */

 Power switch type */

 Operations permitted on AVS voltage regulator */

 Operations permitted on voltage regulators */

 Operations permitted on voltage monitors */

	/*

	 * Configure DDR Backup Mode, to change the role of the accessory power

	 * switch from a power switch to a wake-up switch, or vice versa

 Save DDR Backup Mode */

 Enable DDR Backup Mode */

 Restore DDR Backup Mode */

 CONFIG_PM_SLEEP */

 BD9574MWF supports DVFS only */

		/*

		 * Backup mode is enabled by default in pulse mode, but needs

		 * explicit user setup in level mode.

 CONFIG_PM_SLEEP */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0+



 Regulator driver for DA9063 PMIC series



 Copyright 2012 Dialog Semiconductors Ltd.

 Copyright 2013 Philipp Zabel, Pengutronix



 Author: Krystian Garbaciak <krystian.garbaciak@diasemi.com>

 Definition for registering regmap bit fields using a mask */

 DA9063 and DA9063L regulator IDs */

 BUCKs */

 BCORE1 and BCORE2 in merged mode */

 BMEM and BIO in merged mode */

 When two BUCKs are merged, they cannot be reused separately */

 LDOs on both DA9063 and DA9063L */

 DA9063-only LDOs */

 Old regulator platform data */

 Regulator capabilities and registers description */

 DA9063 main register fields */

 buck mode of operation */

 DA9063 event detection bit */

 Macros for LDO */

 Macros for voltage DC/DC converters (BUCKs) */

 Defines asignment of regulators info table to chip model */

 Single regulator settings */

 Encapsulates all information for the regulators driver */

 Array size to be defined during init. Keep at end. */

 BUCK modes for DA9063 */

 0 */

 1 */

 2 */

 3 */

 Regulator operations */

/*

 * Current limits array (in uA) for BCORE1, BCORE2, BPRO.

 * Entry indexes corresponds to register values.

/*

 * Current limits array (in uA) for BMEM, BIO, BPERI.

 * Entry indexes corresponds to register values.

/*

 * Current limits array (in uA) for merged BCORE1 and BCORE2.

 * Entry indexes corresponds to register values.

/*

 * Current limits array (in uA) for merged BMEM and BIO.

 * Entry indexes corresponds to register values.

/*

 * Bucks use single mode register field for normal operation

 * and suspend state.

 * There are 3 modes to map to: FAST, NORMAL, and STANDBY.

 Sleep flag bit decides the mode */

/*

 * LDOs use sleep flags - one for normal and one for suspend state.

 * There are 2 modes to map to: NORMAL and STANDBY (sleep) for each state.

	/*

	 * When enabling overdrive, do it before changing the current limit to

	 * ensure sufficient supply throughout the switch.

		/*

		 * regulator_set_current_limit_regmap may have rejected the

		 * change because of unusable min_uA and/or max_uA inputs.

		 * Attempt to restore original overdrive state, ignore failure-

		 * on-failure.

	/*

	 * When disabling overdrive, do it after changing the current limit to

	 * ensure sufficient supply throughout the switch.

		/*

		 * Attempt to restore original current limit, ignore failure-

		 * on-failure.

 Info of regulators for DA9063 */

 BCORES_MERGED uses the same register fields as BCORE1 */

 BMEM_BIO_MERGED uses the same register fields as BMEM */

 The following LDOs are present only on DA9063, not on DA9063L */

 Link chip model with regulators info table */

 Regulator interrupt handlers */

/*

 * Probing and Initialisation functions

 The following LDOs are present only on DA9063, not on DA9063L */

 Find regulators set for particular device model */

 remove BCORE1, BCORE2 */

 remove BCORES_MERGED */

 remove BMEM, BIO */

 remove BMEM_BIO_MERGED */

 Allocate memory required by usable regulators */

 Register all regulators declared in platform information */

 Skip regulator IDs depending on merge mode configuration */

 Initialise regulator structure */

 Register regulator */

 LDOs overcurrent event support */

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

 Configure DSV mode to normal by default */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regulators driver for Marvell 88PM800

 *

 * Copyright (C) 2012 Marvell International Ltd.

 * Joseph(Yossi) Hanin <yhanin@marvell.com>

 * Yi Zhang <yizhang@marvell.com>

 LDO1 with DVC[0..3] */

 VOUT1 */

 BUCK1 with DVC[0..3] */

/*

 * vreg - the buck regs string.

 * ereg - the string for the enable register.

 * ebit - the bit number in the enable register.

 * amax - the current

 * Buck has 2 kinds of voltage steps. It is easy to find voltage by ranges,

 * not the constant voltage table.

 * n_volt - Number of available selectors

/*

 * vreg - the LDO regs string

 * ereg -  the string for the enable register.

 * ebit - the bit number in the enable register.

 * amax - the current

 * volt_table - the LDO voltage table

 * For all the LDOes, there are too many ranges. Using volt_table will be

 * simpler and faster.

 Ranges are sorted in ascending order. */

 BUCK 2~5 have same ranges. */

 LDO 3~17 have same voltage table. */

 LDO 18~19 have same voltage table. */

 The array is indexed by id(PM800_ID_XXX) */

 Check whether num_regulator is valid. */

 SPDX-License-Identifier: GPL-2.0



 Lochnagar regulator driver



 Copyright (c) 2017-2018 Cirrus Logic, Inc. and

                         Cirrus Logic International Semiconductor Ltd.



 Author: Charles Keepax <ckeepax@opensource.cirrus.com>

 SPDX-License-Identifier: GPL-2.0+



 pv88090-regulator.c - Regulator device driver for PV88090

 Copyright (C) 2015  Powerventure Semiconductor Ltd.

 PV88090 REGULATOR IDs */

 BUCKs */

 LDOs */

/* Current limits array (in uA) for BUCK1, BUCK2, BUCK3.

 *  Entry indexes corresponds to register values.

/*

 * I2C driver interface functions

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Split TWL6030 logic from twl-regulator.c:

 * Copyright (C) 2008 David Brownell

 *

 * Copyright (C) 2016 Nicolae Rosia <nicolae.rosia@gmail.com>

 start of regulator's PM_RECEIVER control register bank */

 twl resource ID, for resource control state machine */

 used by regulator core */

 chip specific features */

 data passed from board for external get/set voltage */

/* LDO control registers ... offset is from the base of its register bank.

 * The first three registers of all power resource banks help hardware to

 * manage the various resource groups.

 Common offset in TWL4030/6030 */

 TWL6030 register offsets */

 TWL6030 Misc register offsets */

 TWL6030 LDO register values for VREG_VOLTAGE */

 TWL6030 LDO register values for CFG_STATE */

 Flags for SMPS Voltage reading and LDO reading*/

 twl6032 SMPS EPROM values */

 generic power resource operations, which work on all regulators */

/*

 * Enable/disable regulators by joining/leaving the P1 (processor) group.

 * We assume nobody else is updating the DEV_GRP registers.

 definition for 6030 family */

 secondary processor, modem, etc */

 "peripherals" */

 CPU/Linux */

 For 6030, set the off state for all grps enabled */

 Compose the state register settings */

 We can only set the mode through state machine commands... */

/*

 * SMPS status and control

		/* Values 1..57 for vsel are linear and can be calculated

		 * values 58..62 are non linear.

		/* Values 1..57 for vsel are linear and can be calculated

		 * values 58..62 are non linear.

----------------------------------------------------------------------*/

 VUSBCP is managed *only* by the USB subchip */

 6030 REG with base as PMC Slave Misc : 0x0030 */

/* Turnon-delay and remap configuration values for 6030 are not

 6025 are renamed compared to 6030 versions */

	/* Constrain board-specific capabilities according to what

	 * this driver and the chip itself can actually do.

	/* NOTE:  many regulators support short-circuit IRQs (presentable

	 * as REGULATOR_OVER_CURRENT notifications?) configured via:

	 *  - SC_CONFIG

	 *  - SC_DETECT1 (vintana2, vmmc1/2, vaux1/2/3/4)

	 *  - SC_DETECT2 (vusb, vdac, vio, vdd1/2, vpll2)

	 *  - IT_CONFIG

	/* NOTE: short name, to work around driver model truncation of

	 * "twl_regulator.12" (and friends) to "twl_regulator.1".

 SPDX-License-Identifier: GPL-2.0+

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-or-later



 helpers.c  --  Voltage/Current Regulator framework helper functions.



 Copyright 2007, 2008 Wolfson Microelectronics PLC.

 Copyright 2008 SlimLogic Ltd.

/**

 * regulator_is_enabled_regmap - standard is_enabled() for regmap users

 *

 * @rdev: regulator to operate on

 *

 * Regulators that use regmap for their register I/O can set the

 * enable_reg and enable_mask fields in their descriptor and then use

 * this as their is_enabled operation, saving some code.

/**

 * regulator_enable_regmap - standard enable() for regmap users

 *

 * @rdev: regulator to operate on

 *

 * Regulators that use regmap for their register I/O can set the

 * enable_reg and enable_mask fields in their descriptor and then use

 * this as their enable() operation, saving some code.

/**

 * regulator_disable_regmap - standard disable() for regmap users

 *

 * @rdev: regulator to operate on

 *

 * Regulators that use regmap for their register I/O can set the

 * enable_reg and enable_mask fields in their descriptor and then use

 * this as their disable() operation, saving some code.

/**

 * regulator_get_voltage_sel_pickable_regmap - pickable range get_voltage_sel

 *

 * @rdev: regulator to operate on

 *

 * Regulators that use regmap for their register I/O and use pickable

 * ranges can set the vsel_reg, vsel_mask, vsel_range_reg and vsel_range_mask

 * fields in their descriptor and then use this as their get_voltage_vsel

 * operation, saving some code.

/**

 * regulator_set_voltage_sel_pickable_regmap - pickable range set_voltage_sel

 *

 * @rdev: regulator to operate on

 * @sel: Selector to set

 *

 * Regulators that use regmap for their register I/O and use pickable

 * ranges can set the vsel_reg, vsel_mask, vsel_range_reg and vsel_range_mask

 * fields in their descriptor and then use this as their set_voltage_vsel

 * operation, saving some code.

/**

 * regulator_get_voltage_sel_regmap - standard get_voltage_sel for regmap users

 *

 * @rdev: regulator to operate on

 *

 * Regulators that use regmap for their register I/O can set the

 * vsel_reg and vsel_mask fields in their descriptor and then use this

 * as their get_voltage_vsel operation, saving some code.

/**

 * regulator_set_voltage_sel_regmap - standard set_voltage_sel for regmap users

 *

 * @rdev: regulator to operate on

 * @sel: Selector to set

 *

 * Regulators that use regmap for their register I/O can set the

 * vsel_reg and vsel_mask fields in their descriptor and then use this

 * as their set_voltage_vsel operation, saving some code.

/**

 * regulator_map_voltage_iterate - map_voltage() based on list_voltage()

 *

 * @rdev: Regulator to operate on

 * @min_uV: Lower bound for voltage

 * @max_uV: Upper bound for voltage

 *

 * Drivers implementing set_voltage_sel() and list_voltage() can use

 * this as their map_voltage() operation.  It will find a suitable

 * voltage by calling list_voltage() until it gets something in bounds

 * for the requested voltages.

	/* Find the smallest voltage that falls within the specified

	 * range.

/**

 * regulator_map_voltage_ascend - map_voltage() for ascendant voltage list

 *

 * @rdev: Regulator to operate on

 * @min_uV: Lower bound for voltage

 * @max_uV: Upper bound for voltage

 *

 * Drivers that have ascendant voltage list can use this as their

 * map_voltage() operation.

/**

 * regulator_map_voltage_linear - map_voltage() for simple linear mappings

 *

 * @rdev: Regulator to operate on

 * @min_uV: Lower bound for voltage

 * @max_uV: Upper bound for voltage

 *

 * Drivers providing min_uV and uV_step in their regulator_desc can

 * use this as their map_voltage() operation.

 Allow uV_step to be 0 for fixed voltage */

 Map back into a voltage to verify we're still in bounds */

/**

 * regulator_map_voltage_linear_range - map_voltage() for multiple linear ranges

 *

 * @rdev: Regulator to operate on

 * @min_uV: Lower bound for voltage

 * @max_uV: Upper bound for voltage

 *

 * Drivers providing linear_ranges in their descriptor can use this as

 * their map_voltage() callback.

		/*

		 * Map back into a voltage to verify we're still in bounds.

		 * If we are not, then continue checking rest of the ranges.

/**

 * regulator_map_voltage_pickable_linear_range - map_voltage, pickable ranges

 *

 * @rdev: Regulator to operate on

 * @min_uV: Lower bound for voltage

 * @max_uV: Upper bound for voltage

 *

 * Drivers providing pickable linear_ranges in their descriptor can use

 * this as their map_voltage() callback.

		/*

		 * Map back into a voltage to verify we're still in bounds.

		 * We may have overlapping voltage ranges. Hence we don't

		 * exit but retry until we have checked all ranges.

/**

 * regulator_desc_list_voltage_linear - List voltages with simple calculation

 *

 * @desc: Regulator desc for regulator which volatges are to be listed

 * @selector: Selector to convert into a voltage

 *

 * Regulators with a simple linear mapping between voltages and

 * selectors can set min_uV and uV_step in the regulator descriptor

 * and then use this function prior regulator registration to list

 * the voltages. This is useful when voltages need to be listed during

 * device-tree parsing.

/**

 * regulator_list_voltage_linear - List voltages with simple calculation

 *

 * @rdev: Regulator device

 * @selector: Selector to convert into a voltage

 *

 * Regulators with a simple linear mapping between voltages and

 * selectors can set min_uV and uV_step in the regulator descriptor

 * and then use this function as their list_voltage() operation,

/**

 * regulator_list_voltage_pickable_linear_range - pickable range list voltages

 *

 * @rdev: Regulator device

 * @selector: Selector to convert into a voltage

 *

 * list_voltage() operation, intended to be used by drivers utilizing pickable

 * ranges helpers.

			/*

			 * As we see here, pickable ranges work only as

			 * long as the first selector for each pickable

			 * range is 0, and the each subsequent range for

			 * this 'pick' follow immediately at next unused

			 * selector (Eg. there is no gaps between ranges).

			 * I think this is fine but it probably should be

			 * documented. OTOH, whole pickable range stuff

			 * might benefit from some documentation

/**

 * regulator_desc_list_voltage_linear_range - List voltages for linear ranges

 *

 * @desc: Regulator desc for regulator which volatges are to be listed

 * @selector: Selector to convert into a voltage

 *

 * Regulators with a series of simple linear mappings between voltages

 * and selectors who have set linear_ranges in the regulator descriptor

 * can use this function prior regulator registration to list voltages.

 * This is useful when voltages need to be listed during device-tree

 * parsing.

/**

 * regulator_list_voltage_linear_range - List voltages for linear ranges

 *

 * @rdev: Regulator device

 * @selector: Selector to convert into a voltage

 *

 * Regulators with a series of simple linear mappings between voltages

 * and selectors can set linear_ranges in the regulator descriptor and

 * then use this function as their list_voltage() operation,

/**

 * regulator_list_voltage_table - List voltages with table based mapping

 *

 * @rdev: Regulator device

 * @selector: Selector to convert into a voltage

 *

 * Regulators with table based mapping between voltages and

 * selectors can set volt_table in the regulator descriptor

 * and then use this function as their list_voltage() operation.

/**

 * regulator_set_bypass_regmap - Default set_bypass() using regmap

 *

 * @rdev: device to operate on.

 * @enable: state to set.

/**

 * regulator_set_soft_start_regmap - Default set_soft_start() using regmap

 *

 * @rdev: device to operate on.

/**

 * regulator_set_pull_down_regmap - Default set_pull_down() using regmap

 *

 * @rdev: device to operate on.

/**

 * regulator_get_bypass_regmap - Default get_bypass() using regmap

 *

 * @rdev: device to operate on.

 * @enable: current state.

/**

 * regulator_set_active_discharge_regmap - Default set_active_discharge()

 *					   using regmap

 *

 * @rdev: device to operate on.

 * @enable: state to set, 0 to disable and 1 to enable.

/**

 * regulator_set_current_limit_regmap - set_current_limit for regmap users

 *

 * @rdev: regulator to operate on

 * @min_uA: Lower bound for current limit

 * @max_uA: Upper bound for current limit

 *

 * Regulators that use regmap for their register I/O can set curr_table,

 * csel_reg and csel_mask fields in their descriptor and then use this

 * as their set_current_limit operation, saving some code.

 search for closest to maximum */

/**

 * regulator_get_current_limit_regmap - get_current_limit for regmap users

 *

 * @rdev: regulator to operate on

 *

 * Regulators that use regmap for their register I/O can set the

 * csel_reg and csel_mask fields in their descriptor and then use this

 * as their get_current_limit operation, saving some code.

/**

 * regulator_bulk_set_supply_names - initialize the 'supply' fields in an array

 *                                   of regulator_bulk_data structs

 *

 * @consumers: array of regulator_bulk_data entries to initialize

 * @supply_names: array of supply name strings

 * @num_supplies: number of supply names to initialize

 *

 * Note: the 'consumers' array must be the size of 'num_supplies'.

/**

 * regulator_is_equal - test whether two regulators are the same

 *

 * @reg1: first regulator to operate on

 * @reg2: second regulator to operate on

/**

 * regulator_set_ramp_delay_regmap - set_ramp_delay() helper

 *

 * @rdev: regulator to operate on

 *

 * Regulators that use regmap for their register I/O can set the ramp_reg

 * and ramp_mask fields in their descriptor and then use this as their

 * set_ramp_delay operation, saving some code.

 SPDX-License-Identifier: GPL-2.0+



 max77802.c - Regulator driver for the Maxim 77802



 Copyright (C) 2013-2014 Google, Inc

 Simon Glass <sjg@chromium.org>



 Copyright (C) 2012 Samsung Electronics

 Chiwoong Byun <woong.byun@samsung.com>

 Jonghwa Lee <jonghwa3.lee@samsung.com>



 This driver is based on max8997.c

 Default ramp delay in case it is not manually set */

 uV/us */

 Array indexed by regulator id */

/**

 * max77802_set_suspend_disable - Disable the regulator during system suspend

 * @rdev: regulator to mark as disabled

 *

 * All regulators expect LDO 1, 3, 20 and 21 support OFF by PWRREQ.

 * Configure the regulator so the PMIC will turn it OFF during system suspend.

/*

 * Some LDOs support Low Power Mode while the system is running.

 *

 * LDOs 1, 3, 20, 21.

 ON in Low Power Mode */

 ON in Normal Mode */

/**

 * max77802_set_suspend_mode - set regulator opmode when the system is suspended

 * @rdev: regulator to change mode

 * @mode: operating mode to be set

 *

 * Will set the operating mode for the regulators during system suspend.

 * This function is valid for the three different enable control logics:

 *

 * Enable Control Logic1 by PWRREQ (BUCK 2-4 and LDOs 2, 4-19, 22-35)

 * Enable Control Logic2 by PWRREQ (LDOs 1, 20, 21)

 * Enable Control Logic3 by PWRREQ (LDO 3)

 *

 * If setting the regulator mode fails, the function only warns but does

 * not return an error code to avoid the regulator core to stop setting

 * the operating mode for the remaining regulators.

	/*

	 * If the regulator has been disabled for suspend

	 * then is invalid to try setting a suspend mode.

		/*

		 * If the regulator opmode is normal then enable

		 * ON in Low Power Mode by PWRREQ. If the mode is

		 * already Low Power then no action is required.

		/*

		 * If the regulator operating mode is Low Power then

		 * normal is not a valid opmode in suspend. If the

		 * mode is already normal then no action is required.

/*

 * LDOs 2, 4-19, 22-35

/*

 * LDOs 1, 20, 21, 3

 BUCKS 1, 6 */

 BUCKs 2-4 */

 BUCKs 5, 7-10 */

 LDOs 3-7, 9-14, 18-26, 28, 29, 32-34 */

 LDOs 1, 2, 8, 15, 17, 27, 30, 35 */

 BUCKs 1, 6 */

 BUCKS 2-4 */

 BUCK 5 */

 BUCKs 7-10 */

		/*

		 * If the regulator is disabled and the system warm rebooted,

		 * the hardware reports OFF as the regulator operating mode.

		 * Default to operating mode NORMAL in that case.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2016 Gateworks Corporation, Inc. All Rights Reserved.

 LTC3676 Registers */

 DVBB register follows right after the corresponding DVBA register */

 select DVBxA */

 select DVBxB */

 LDO3 has a fixed output */

 SW1, SW2, SW3, SW4 linear 0.8V-3.3V with scalar via R1/R2 feeback res */

 LDO1 always on fixed 0.8V-3.3V via scalar via R1/R2 feeback res */

 LDO2, LDO3 fixed (LDO2 has external scalar via R1/R2 feedback res) */

 Clear warning condition */

 LDO3 is fixed 1.8V */

 SPDX-License-Identifier: GPL-2.0



 Device driver for regulators in Hi6421V530 IC



 Copyright (c) <2017> HiSilicon Technologies Co., Ltd.

              http:
 Copyright (c) <2017> Linaro Ltd.

              https:


 Author: Wang Xiaoyin <hw.wangxiaoyin@hisilicon.com>

         Guodong Xu <guodong.xu@linaro.org>

/*

 * struct hi6421v530_regulator_info - hi6421v530 regulator information

 * @desc: regulator description

 * @mode_mask: ECO mode bitmask of LDOs; for BUCKs, this masks sleep

 * @eco_microamp: eco mode load upper limit (in uA), valid for LDOs only

 HI6421v530 regulators */

/*

 * _id - LDO id name string

 * v_table - voltage table

 * vreg - voltage select register

 * vmask - voltage select mask

 * ereg - enable register

 * emask - enable mask

 * odelay - off/on delay time in uS

 * ecomask - eco mode mask

 * ecoamp - eco mode load uppler limit in uA

 HI6421V530 regulator information */

 SPDX-License-Identifier: GPL-2.0+



 max14577.c - Regulator driver for the Maxim 14577/77836



 Copyright (C) 2013,2014 Samsung Electronics

 Krzysztof Kozlowski <krzk@kernel.org>

 MBCHOSTEN and CGMBC are on */

 TODO: add .set_suspend_mode */

/*

 * Registers for regulators of max77836 use different I2C slave addresses so

 * different regmaps must be used for them.

 *

 * Returns proper regmap for accessing regulator passed by id.

 MAX77836_LDO1 ... MAX77836_LDO2 */

		/*

		 * Index of supported_regulators[] is also the id and must

		 * match index of pdata->regulators[].

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * dummy.c

 *

 * Copyright 2010 Wolfson Microelectronics PLC.

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 *

 * This is useful for systems with mixed controllable and

 * non-controllable regulators, as well as for allowing testing on

 * systems with no controllable regulators.

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) STMicroelectronics 2019

 Author(s): Fabrice Gasnier <fabrice.gasnier@st.com>.

 STM32H7 SYSCFG register */

 STM32MP1 SYSCFG has set and clear registers */

 up to 50us to stabilize */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * max8952.c - Voltage and current regulation for the Maxim 8952

 *

 * Copyright (C) 2010 Samsung Electronics

 * MyungJoo Ham <myungjoo.ham@samsung.com>

 Registers */

 DVS not supported */

	/*

	 * Do not use devm* here: the regulator core takes over the

	 * lifecycle management of the GPIO descriptor.

 Fetch vid0 and vid1 GPIOs if available */

 If either VID GPIO is missing just disable this */

 Make sure if we have any descriptors they get set to low */

 Disable Pulldown of EN only */

		/*

		 * Disable Pulldown on EN, VID0, VID1 to reduce

		 * leakage current of MAX8952 assuming that MAX8952

		 * is turned on (EN==1). Note that without having VID0/1

		 * properly connected, turning pulldown off can be

		 * problematic. Thus, turn this off only when they are

		 * controllable by GPIO.

 SPDX-License-Identifier: GPL-2.0+



 wm831x-dcdc.c  --  DC-DC buck converter driver for the WM831x series



 Copyright 2009 Wolfson Microelectronics PLC.



 Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 Register offsets in control block */

/*

 * Shared

 First, check for errors */

 DCDC1 and DCDC2 can additionally detect high voltage/current */

 Is the regulator on? */

	/* TODO: When we handle hardware control modes so we can report the

/*

 * BUCKV specifics

	/* Should wait for DVS state change to be asserted if we have

	 * a GPIO for it, for now assume the device is configured

	 * for the fastest possible transition.

 If this value is already set then do a GPIO update if we can */

 Always set the ON status to the minimum voltage */

 Kick the voltage transition now */

	/*

	 * If this VSEL is higher than the last one we've seen then

	 * remember it as the DVS VSEL.  This is optimised for CPUfreq

	 * usage where we want to get to the highest voltage very

	 * quickly.

 Current limit options */

/*

 * Set up DVS control.  We just log errors since we can still run

 * (with reduced performance) if we fail.

	/* gpiolib won't let us read the GPIO status so pick the higher

	 * of the two existing voltages so we take it as platform data.

	/* If DVS_VSEL is set to the minimum value then raise it to ON_VSEL

	 * to make bootstrapping a bit smoother.

/*

 * BUCKP specifics

/*

 * DCDC boost convertors

 First, check for errors */

 Is the regulator on? */

/*

 * External Power Enable

 *

 * These aren't actually DCDCs but look like them in hardware so share

 * code.

	/* For current parts this is correct; probably need to revisit

	 * in future.

 Offset in DCDC registers */

 Module information */

/*

 * tps65023-regulator.c

 *

 * Supports TPS65023 Regulator

 *

 * Copyright (C) 2009 Texas Instrument Incorporated - https://www.ti.com/

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any kind,

 * whether express or implied; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

 * General Public License for more details.

 Register definitions */

 PGOODZ bitfields */

 MASK bitfields */

 REG_CTRL bitfields */

 REG_CTRL2 bitfields */

 Number of step-down converters available */

 Number of LDO voltage regulators  available */

 Number of total regulators available */

 DCDCs */

 LDOs */

 Supported voltage values for regulators */

 Supported voltage values for LDO regulators for tps65020 */

/* Supported voltage values for LDO regulators

 PMIC details */

 Struct passed as driver data */

 Operations permitted on VDCDCx */

 Operations permitted on LDOx */

 common for all regulators */

 Register the regulators */

 Enable setting output voltage by I2C */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) 2020 ROHM Semiconductors

 If voltage is set to 0 => disable */

 Some setups don't allow setting own voltage but do allow enabling */

 NOTE to next hacker - Does not support pickable ranges */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regulator driver for RICOH RC5T583 power management chip.

 *

 * Copyright (c) 2011-2012, NVIDIA CORPORATION.  All rights reserved.

 * Author: Laxman dewangan <ldewangan@nvidia.com>

 *

 * based on code

 *      Copyright (C) 2011 RICOH COMPANY,LTD

 Regulator register address.*/

 Regulator specific turn-on delay  and voltage settling time*/

 Used by regulator core */

		/*

		 * Configuring external control is not a major issue,

		 * just give warning.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TI LM363X Regulator Driver

 *

 * Copyright 2015 Texas Instruments

 *

 * Author: Milo Kim <milo.kim@ti.com>

 LM3631 */

 LM3632 */

 LM36274 */

 Common */

 LM3631 */

 LM3632 */

 LM36274 */

	/*

	 * Check LCM_EN1/2_GPIO is configured.

	 * Those pins are used for enabling VPOS/VNEG LDOs.

	 * Do not use devm* here: the regulator core takes over the

	 * lifecycle management of the GPIO descriptor.

	/*

	 * LM3632 LDOs can be controlled by external pin.

	 * Register update is required if the pin is used.

 SPDX-License-Identifier: GPL-2.0+



 max8997.c - Regulator driver for the Maxim 8997/8966



 Copyright (C) 2011 Samsung Electronics

 MyungJoo Ham <myungjoo.ham@samsung.com>



 This driver is based on max8998.c

 in mV/us */

 Voltage maps in uV */

 LDO1 ~ 18, 21 all */

 Buck1, 2, 4, 5 */

 Buck3, 7 */

 current map in uA */

 Not controllable or not exists */

/*

 * For LDO1 ~ LDO21, BUCK1~5, BUCK7, CHARGER, CHARGER_TOPOFF

 * BUCK1, 2, and 5 are available if they are not controlled by gpio

 Delay is required only if the voltage is increasing */

 No need to delay if gpio_dvs_mode */

/*

 * Assess the damage on the voltage setting of BUCK1,2,5 by the change.

 *

 * When GPIO-DVS mode is used for multiple bucks, changing the voltage value

 * of one of the bucks may affect that of another buck, which is the side

 * effect of the change (set_voltage). This function examines the GPIO-DVS

 * configurations and checks whether such side-effect exists.

 Not affected */

 NO SIDE EFFECT! Use This! */

/*

 * For Buck 1 ~ 5 and 7. If it is not controlled by GPIO, this calls

 * max8997_set_voltage_ldobuck to do the job.

 For SAFEOUT1 and SAFEOUT2 */

 Reuse max8997_set_voltage_ldobuck to set current_limit. */

 Reuse max8997_list_voltage to get current_limit. */

 count the number of regulators to be supported in pmic */

 CONFIG_OF */

 For the safety, set max voltage before setting up */

 Initialize all the DVS related BUCK registers */

	/*

	 * If buck 1, 2, and 5 do not care DVS GPIO settings, ignore them.

	 * If at least one of them cares, set gpios.

 SET1 */

 SET2 */

 SET3 */

 DVS-GPIO disabled */

 Misc Settings */

 set 10mV/us, which is the default */

 SPDX-License-Identifier: GPL-2.0



 FAN53555 Fairchild Digitally Programmable TinyBuck Regulator Driver.



 Supported Part Numbers:

 FAN53555UC00X/01X/03X/04X/05X



 Copyright (c) 2012 Marvell Technology Ltd.

 Yunfan Zhang <yfzhang@marvell.com>

 Voltage setting */

 Control register */

 IC Type */

 IC mask version */

 Monitor register */

 VSEL bit definitions */

 Chip ID and Verison */

 ID1 */

 ID2 */

 Control bit definitions */

 Numbers of voltages */

 IC Type */

 IC mask revision */

 IC Type and Rev */

 Voltage setting register */

 Voltage range and step(linear) */

 Mode */

 Sleep voltage cache */

 Slew rate */

	/* Cache the sleep voltage setting.

 Init voltage range and step */

 Init voltage range and step */

 Init voltage range and step */

 Init voltage range and step */

/* For 00,01,03,05 options:

 * VOUT = 0.60V + NSELx * 10mV, from 0.60 to 1.23V.

 * For 04 option:

 * VOUT = 0.603V + NSELx * 12.826mV, from 0.603 to 1.411V.

 Setup voltage control register */

 Setup mode control register */

 Setup voltage range */

 if no ramp constraint set, get the pdata ramp_delay */

 Get chip ID */

 Get chip revision */

 Device init */

 Register regulator */

 SPDX-License-Identifier: GPL-2.0



 Copyright (C) 2012 ARM Limited

 SPDX-License-Identifier: GPL-2.0-only



 Copyright 2014 Embest Technology Co. Ltd. Inc.

 bd71815-regulator.c ROHM BD71815 regulator driver



 Author: Tony Luo <luofc@embedinfo.com>



 Partially rewritten at 2021 by

 Matti Vaittinen <matti.vaitinen@fi.rohmeurope.com>

/*

 * Bucks 1 and 2 have two voltage selection registers where selected

 * voltage can be set. Which of the registers is used can be either controlled

 * by a control bit in register - or by HW state. If HW state specific voltages

 * are given - then we assume HW state based control should be used.

 *

 * If volatge value is updated to currently selected register - then output

 * voltage is immediately changed no matter what is set as ramp rate. Thus we

 * default changing voltage by writing new value to inactive register and

 * then updating the 'register selection' bit. This naturally only works when

 * HW state machine is not used to select the voltage.

			/*

			 * We are currently using voltage from _L.

			 * We'd better copy it to _H and switch to it to

			 * avoid shutting us down if LPSR or SUSPEND is set to

			 * disabled. _L value is at reg _H + 1

		/*

		 * DVS levels were given => use HW-state machine for voltage

		 * controls. NOTE: AFAIK, This means that if voltage is changed

		 * by SW the ramp-rate is not respected. Should we disable

		 * SW voltage control when the HW state machine is used?

/*

 * BUCK1/2

 * BUCK1RAMPRATE[1:0] BUCK1 DVS ramp rate setting

 * 00: 10.00mV/usec	10mV 1uS

 * 01: 5.00mV/usec	10mV 2uS

 * 10: 2.50mV/usec	10mV 4uS

 * 11: 1.25mV/usec	10mV 8uS

			/*

			 * HW FIX: spurious led status change detected. Toggle

			 * state as a workaround

	/*

	 * If we use HW state machine based voltage reg selection - then we

	 * return BD71815_REG_BUCK1_VOLT_H which is used at RUN.

	 * Else we do return the BD71815_REG_BUCK1_VOLT_H or

	 * BD71815_REG_BUCK1_VOLT_L depending on which is selected to be used

	 * by BD71815_BUCK_DVSSEL bit

/*

 * For Buck 1/2.

	/*

	 * If bucks 1 & 2 are controlled by state machine - then the RUN state

	 * voltage is set to BD71815_REG_BUCK1_VOLT_H. Changing SUSPEND/LPSR

	 * voltages at runtime is not supported by this driver.

 Update new voltage to the register which is not selected now */

 Select the other DVS register to be used */

	/*

	 * Let's default LDO3 to be enabled by SW. We can override ops if DT

	 * says LDO3 should be enabled by HW when DCIN is connected.

 Disable to go to ship-mode */

 SPDX-License-Identifier: GPL-2.0-only



 Qualcomm PMIC VBUS output regulator driver



 Copyright (c) 2020, The Linux Foundation. All rights reserved.

 Disable HW logic for VBUS enable */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * LP8755 High Performance Power Management Unit : System Interface Driver

 * (based on rev. 0.26)

 * Copyright 2012 Texas Instruments

 *

 * Author: Daniel(Geon Si) Jeong <daniel.jeong@ti.com>

 forced pwm mode */

 enable automatic pwm/pfm mode */

 enable automatic pwm/pfm/lppfm mode */

 forced pwm mode */

 mode fast means forced pwm mode */

 mode idle means automatic pwm/pfm/lppfm mode */

 mode normal means automatic pwm/pfm mode */

 read back  muti-phase configuration */

 set default data based on multi-phase config */

 read flag0 register */

 clear flag register to pull up int. pin */

 sent power fault detection event to specific regulator */

 read flag1 register */

 clear flag register to pull up int. pin */

 send OCP event to all regulator devices */

 send OVP event to all regulator devices */

 output disable */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regulator driver for Rockchip RK805/RK808/RK818

 *

 * Copyright (c) 2014, Fuzhou Rockchip Electronics Co., Ltd

 *

 * Author: Chris Zhong <zyw@rock-chips.com>

 * Author: Zhang Qing <zhangqing@rock-chips.com>

 *

 * Copyright (C) 2016 PHYTEC Messtechnik GmbH

 *

 * Author: Wadim Egorov <w.egorov@phytec.de>

 Field Definitions */

 Ramp rate definitions for buck1 / buck2 only */

 Offset from XXX_ON_VSEL to XXX_SLP_VSEL */

 Offset from XXX_ON_VSEL to XXX_DVS_VSEL */

 Offset from XXX_EN_REG to SLEEP_SET_OFF_XXX */

 max steps for increase voltage of Buck1/2, equal 100mv*/

 RK817 RK809 */

	/*

	 * If directly modify the register to change the voltage, we will face

	 * the risk of overshoot. Put it into a multi-step, can effectively

	 * avoid this problem, a step is 100mv here.

		/*

		 * i2c is 400kHz (2.5us per bit) and we must transmit _at least_

		 * 3 bytes (24 bits) plus start and stop so 26 bits.  So we've

		 * got more than 65 us between each voltage change and thus

		 * won't ramp faster than ~1500 uV / us.

	/*

	 * When we change the voltage register directly, the ramp rate is about

	 * 100000uv/us, wait 1us to make sure the target voltage to be stable,

	 * so we needn't wait extra time after that.

 if there is no dvs1/2 pin, we don't need wait extra time here. */

 add write mask bit */

 Instantiate the regulators */

 SPDX-License-Identifier: GPL-2.0+



 Copyright (C) 2011-2013 Freescale Semiconductor, Inc. All Rights Reserved.

 no dynamic voltage scaling for PF3001 */

 No linar case for the some switches of PFUZE3000 */

 PFUZE100 */

 PFUZE100 */

 PFUZE200 */

 PFUZE3000 */

 PFUZE3001 */

 Switch from default mode: APS/APS to APS/Off */

		/*

		 * Freescale misprogrammed 1-3% of parts prior to week 8 of 2013

		 * as ID=8 in PFUZE100

 device id NOT match with your setting */

 use the right regulators after identify the right device */

 SW2~SW4 high bit check and modify the voltage value table */

		/*

		 * Allow SW regulators to turn off. Checking it trough a flag is

		 * a workaround to keep the backward compatibility with existing

		 * old dtb's which may relay on the fact that we didn't disable

		 * the switched regulator till yet.

/*

 * tps51632-regulator.c -- TI TPS51632

 *

 * Regulator driver for TPS51632 3-2-1 Phase D-Cap Step Down Driverless

 * Controller with serial VID control and DVFS.

 *

 * Copyright (c) 2012, NVIDIA Corporation.

 *

 * Author: Laxman Dewangan <ldewangan@nvidia.com>

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any kind,

 * whether express or implied; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

 * General Public License for more details.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA

 * 02111-1307, USA

 Register definitions */

 TPS51632_DVFS_CONTROL_REG */

 TPS51632_POWER_STATE_REG */

 TPS51632 chip information */

		/**

		 * TPS51632 hw behavior: VMAX register can be write only

		 * once as it get locked after first write. The lock get

		 * reset only when device is power-reset.

		 * Write register only when lock bit is not enabled.

 Register the regulators */

 SPDX-License-Identifier: GPL-2.0+



 mp5416.c  - regulator driver for mps mp5416



 Copyright 2020 Monolithic Power Systems, Inc



 Author: Saravanan Sekar <sravanhome@gmail.com>

 values in uV */

/* Current limits array (in uA)

 * ILIM1 & ILIM3

 ILIM2 & ILIM4 */

/*

 * DVS ramp rate BUCK1 to BUCK4

 * 00: 32mV/us

 * 01: 16mV/us

 * 10: 8mV/us

 * 11: 4mV/us

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * isl9305 - Intersil ISL9305 DCDC regulator

 *

 * Copyright 2014 Linaro Ltd

 *

 * Author: Mark Brown <broonie@kernel.org>

/*

 * Registers

/*

 * DCD_PARAMETER

/*

 * SYSTEM_PARAMETER

/*

 * DCD_SRCTL

 for backward compat., don't use */

 for backward compat., don't use */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regulators driver for Maxim max8649

 *

 * Copyright (C) 2009-2010 Marvell International Ltd.

 *      Haojian Zhuang <haojian.zhuang@marvell.com>

 uV */

 uV */

 uV */

 Registers */

 Bits */

 bit[1:0] = VID1, VID0 */

 get voltage */

 get rate */

 uV/uS */

 enable VID0 & VID1 */

 enable/disable external clock synchronization */

 set external clock frequency */

 Module information */

 SPDX-License-Identifier: GPL-2.0+



 arizona-micsupp.c  --  Microphone supply for Arizona devices



 Copyright 2012 Wolfson Microelectronics PLC.



 Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 Default to regulated mode */

	/*

	 * Since the chip usually supplies itself we provide some

	 * default init_data for it.  This will be overridden with

	 * platform data if provided.

 Module information */

SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2017 Spreadtrum Communications Inc.

/*

 * SC2731 regulator lock register

/*

 * SC2731 enable register

/*

 * SC2731 enable mask

/*

 * SC2731 vsel register

/*

 * SC2731 vsel register mask

 SPDX-License-Identifier: GPL-2.0-or-later



 core.c  --  Voltage/Current Regulator framework.



 Copyright 2007, 2008 Wolfson Microelectronics PLC.

 Copyright 2008 SlimLogic Ltd.



 Author: Liam Girdwood <lrg@slimlogic.co.uk>

/*

 * struct regulator_map

 *

 * Used to provide symbolic supply names to devices.

 The dev_name() for the consumer */

/*

 * struct regulator_enable_gpio

 *

 * Management for shared enable GPIO pin

 a number of enabled shared GPIO */

 a number of requested shared GPIO */

/*

 * struct regulator_supply_alias

 *

 * Used to map lookups for a supply onto an alternative device.

/**

 * regulator_lock_nested - lock a single regulator

 * @rdev:		regulator source

 * @ww_ctx:		w/w mutex acquire context

 *

 * This function can be called many times by one task on

 * a single regulator and its mutex will be locked only

 * once. If a task, which is calling this function is other

 * than the one, which initially locked the mutex, it will

 * wait on mutex.

/**

 * regulator_lock - lock a single regulator

 * @rdev:		regulator source

 *

 * This function can be called many times by one task on

 * a single regulator and its mutex will be locked only

 * once. If a task, which is calling this function is other

 * than the one, which initially locked the mutex, it will

 * wait on mutex.

/**

 * regulator_unlock - unlock a single regulator

 * @rdev:		regulator_source

 *

 * This function unlocks the mutex when the

 * reference counter reaches 0.

 shouldn't happen */

/**

 * regulator_unlock_dependent - unlock regulator's suppliers and coupled

 *				regulators

 * @rdev:			regulator source

 * @ww_ctx:			w/w mutex acquire context

 *

 * Unlock all regulators related with rdev by coupling or supplying.

/**

 * regulator_lock_dependent - lock regulator's suppliers and coupled regulators

 * @rdev:			regulator source

 * @ww_ctx:			w/w mutex acquire context

 *

 * This function as a wrapper on regulator_lock_recursive(), which locks

 * all regulators related with rdev by coupling or supplying.

/**

 * of_get_child_regulator - get a child regulator device node

 * based on supply name

 * @parent: Parent device node

 * @prop_name: Combination regulator supply name and "-supply"

 *

 * Traverse all child nodes.

 * Extract the child regulator device node corresponding to the supply name.

 * returns the device node corresponding to the regulator if found, else

 * returns NULL.

/**

 * of_get_regulator - get a regulator device node based on supply name

 * @dev: Device pointer for the consumer (of regulator) device

 * @supply: regulator supply name

 *

 * Extract the regulator device node corresponding to the supply name.

 * returns the device node corresponding to the regulator if found, else

 * returns NULL.

 64 is max size of property name */

 Platform voltage constraint check */

 return 0 if the state is valid */

/* Make sure we select a voltage that suits the needs of all

 * regulator consumers

		/*

		 * Assume consumers that didn't say anything are OK

		 * with anything in the constraint range.

 current constraint check */

 operating mode constraint check */

	/* The modes are bitmasks, the most power hungry modes having

	 * the lowest values. If the requested mode isn't supported

	 * try higher modes.

	/* If we have no suspend mode configuration don't set anything;

	 * only warn if the driver implements set_suspend_voltage or

	 * set_suspend_mode callback.

/* Calculate the new optimum regulator operating mode based on the new total

 * consumer load. All locks held by caller

	/*

	 * first check to see if we can set modes at all, otherwise just

	 * tell the consumer everything is OK.

 calc total requested load */

 set the optimum mode for our new total regulator load */

 get output voltage */

 get input voltage */

 now get the optimum mode for our new total regulator load */

 check the new mode is allowed */

 OK if set_suspend_enable or set_suspend_disable is NULL */

 !DEBUG && !CONFIG_DYNAMIC_DEBUG */

 !DEBUG && !CONFIG_DYNAMIC_DEBUG */

 do we need to apply the constraint voltage */

 This regulator can't be read and must be initialized */

		/*

		 * If we're below the minimum voltage move up to the

		 * minimum voltage, if we're above the maximum voltage

		 * then move down to the maximum.

	/* constrain machine-level voltage specs to fit

	 * the actual range supported by this regulator.

		/* it's safe to autoconfigure fixed-voltage supplies

		 * and the constraints are used by list_voltage.

 voltage constraints are optional */

 else require explicit machine-level constraints */

 no need to loop voltages if range is continuous */

 initial: [cmin..cmax] valid, [min_uV..max_uV] not */

 maybe adjust [min_uV..max_uV] */

 final: [min_uV..max_uV] valid iff constraints valid */

 use regulator's subset of machine constraints */

 Set regulator current in constraints range */

/**

 * set_machine_constraints - sets regulator constraints

 * @rdev: regulator source

 *

 * Allows platform initialisation code to define and constrain

 * regulator circuits e.g. valid voltage/current ranges, etc.  NOTE:

 * Constraints *must* be set by platform code in order for some

 * regulator operations to proceed i.e. set_voltage, set_current_limit,

 * set_mode.

 do we need to setup our suspend state */

		/*

		 * We'll only apply the initial system load if an

		 * initial mode wasn't specified.

	/*

	 * Existing logic does not warn if over_current_protection is given as

	 * a constraint but driver does not support that. I think we should

	 * warn about this type of issues as it is possible someone changes

	 * PMIC on board to another type - and the another PMIC's driver does

	 * not support setting protection. Board composer may happily believe

	 * the DT limits are respected - especially if the new PMIC HW also

	 * supports protection but the driver does not. I won't change the logic

	 * without hearing more experienced opinion on this though.

	 *

	 * If warning is seen as a good idea then we can merge handling the

	 * over-curret protection and detection and get rid of this special

	 * handling.

	/* If the constraints say the regulator should be on at this point

	 * and we have control then make sure it is enabled.

		/* If we want to enable this regulator, make sure that we know

		 * the supplying regulator.

/**

 * set_supply - set regulator supply regulator

 * @rdev: regulator name

 * @supply_rdev: supply regulator name

 *

 * Called by platform initialisation code to set the supply regulator for this

 * regulator. This ensures that a regulators supply will also be enabled by the

 * core if it's child is enabled.

/**

 * set_consumer_device_supply - Bind a regulator to a symbolic supply

 * @rdev:         regulator source

 * @consumer_dev_name: dev_name() string for device supply applies to

 * @supply:       symbolic name for supply

 *

 * Allows platform initialisation code to map physical regulator

 * sources to symbolic names for supplies for use by devices.  Devices

 * should use these symbolic names to request regulators, avoiding the

 * need to provide board-specific regulator names as platform data.

 Add a link to the device sysfs entry */

 non-fatal */

	/*

	 * Check now if the regulator is an always on regulator - if

	 * it is then we don't need to do nearly so much work for

	 * enable/disable calls.

/**

 * regulator_dev_lookup - lookup a regulator device.

 * @dev: device for regulator "consumer".

 * @supply: Supply name or regulator ID.

 *

 * If successful, returns a struct regulator_dev that corresponds to the name

 * @supply and with the embedded struct device refcount incremented by one.

 * The refcount must be dropped by calling put_device().

 * On failure one of the following ERR-PTR-encoded values is returned:

 * -ENODEV if lookup fails permanently, -EPROBE_DEFER if lookup could succeed

 * in the future.

 first do a dt based lookup */

			/*

			 * We have a node, but there is no device.

			 * assume it has not registered yet.

 if not found, try doing it non-dt way */

 If the mapping has a device set up it must match */

 No supply to resolve? */

 Supply already resolved? (fast-path without locking contention) */

 Did the lookup explicitly defer for us? */

	/*

	 * If the supply's parent device is not the same as the

	 * regulator's parent device, then ensure the parent device

	 * is bound before we resolve the supply, in case the parent

	 * device get probe deferred and unregisters the supply.

 Recursively resolve the supply of the supply */

	/*

	 * Recheck rdev->supply with rdev->mutex lock held to avoid a race

	 * between rdev->supply null check and setting rdev->supply in

	 * set_supply() from concurrent tasks.

 Supply just resolved by a concurrent task? */

	/*

	 * In set_machine_constraints() we may have turned this regulator on

	 * but we couldn't propagate to the supply if it hadn't been resolved

	 * yet.  Do it now.

 Internal regulator request function */

		/*

		 * If regulator_dev_lookup() fails with error other

		 * than -ENODEV our job here is done, we simply return it.

			/*

			 * Assume that a regulator is physically present and

			 * enabled, even if it isn't hooked up, and just

			 * provide a dummy.

/**

 * regulator_get - lookup and obtain a reference to a regulator.

 * @dev: device for regulator "consumer"

 * @id: Supply name or regulator ID.

 *

 * Returns a struct regulator corresponding to the regulator producer,

 * or IS_ERR() condition containing errno.

 *

 * Use of supply names configured via set_consumer_device_supply() is

 * strongly encouraged.  It is recommended that the supply name used

 * should match the name used for the supply and/or the relevant

 * device pins in the datasheet.

/**

 * regulator_get_exclusive - obtain exclusive access to a regulator.

 * @dev: device for regulator "consumer"

 * @id: Supply name or regulator ID.

 *

 * Returns a struct regulator corresponding to the regulator producer,

 * or IS_ERR() condition containing errno.  Other consumers will be

 * unable to obtain this regulator while this reference is held and the

 * use count for the regulator will be initialised to reflect the current

 * state of the regulator.

 *

 * This is intended for use by consumers which cannot tolerate shared

 * use of the regulator such as those which need to force the

 * regulator off for correct operation of the hardware they are

 * controlling.

 *

 * Use of supply names configured via set_consumer_device_supply() is

 * strongly encouraged.  It is recommended that the supply name used

 * should match the name used for the supply and/or the relevant

 * device pins in the datasheet.

/**

 * regulator_get_optional - obtain optional access to a regulator.

 * @dev: device for regulator "consumer"

 * @id: Supply name or regulator ID.

 *

 * Returns a struct regulator corresponding to the regulator producer,

 * or IS_ERR() condition containing errno.

 *

 * This is intended for use by consumers for devices which can have

 * some supplies unconnected in normal use, such as some MMC devices.

 * It can allow the regulator core to provide stub supplies for other

 * supplies requested using normal regulator_get() calls without

 * disrupting the operation of drivers that can handle absent

 * supplies.

 *

 * Use of supply names configured via set_consumer_device_supply() is

 * strongly encouraged.  It is recommended that the supply name used

 * should match the name used for the supply and/or the relevant

 * device pins in the datasheet.

 remove any sysfs entries */

 regulator_list_mutex lock held by regulator_put() */

 Docs say you must disable before calling regulator_put() */

/**

 * regulator_put - "free" the regulator source

 * @regulator: regulator source

 *

 * Note: drivers must ensure that all regulator_enable calls made on this

 * regulator source are balanced by regulator_disable calls prior to calling

 * this function.

/**

 * regulator_register_supply_alias - Provide device alias for supply lookup

 *

 * @dev: device that will be given as the regulator "consumer"

 * @id: Supply name or regulator ID

 * @alias_dev: device that should be used to lookup the supply

 * @alias_id: Supply name or regulator ID that should be used to lookup the

 * supply

 *

 * All lookups for id on dev will instead be conducted for alias_id on

 * alias_dev.

/**

 * regulator_unregister_supply_alias - Remove device alias

 *

 * @dev: device that will be given as the regulator "consumer"

 * @id: Supply name or regulator ID

 *

 * Remove a lookup alias if one exists for id on dev.

/**

 * regulator_bulk_register_supply_alias - register multiple aliases

 *

 * @dev: device that will be given as the regulator "consumer"

 * @id: List of supply names or regulator IDs

 * @alias_dev: device that should be used to lookup the supply

 * @alias_id: List of supply names or regulator IDs that should be used to

 * lookup the supply

 * @num_id: Number of aliases to register

 *

 * @return 0 on success, an errno on failure.

 *

 * This helper function allows drivers to register several supply

 * aliases in one operation.  If any of the aliases cannot be

 * registered any aliases that were registered will be removed

 * before returning to the caller.

/**

 * regulator_bulk_unregister_supply_alias - unregister multiple aliases

 *

 * @dev: device that will be given as the regulator "consumer"

 * @id: List of supply names or regulator IDs

 * @num_id: Number of aliases to unregister

 *

 * This helper function allows drivers to unregister several supply

 * aliases in one operation.

 Manage enable GPIO list. Same GPIO pin can be shared among regulators */

 Free the GPIO only in case of no use */

/**

 * regulator_ena_gpio_ctrl - balance enable_count of each GPIO and actual GPIO pin control

 * @rdev: regulator_dev structure

 * @enable: enable GPIO at initial use?

 *

 * GPIO is enabled in case of initial use. (enable_count is 0)

 * GPIO is disabled when it is not shared any more. (enable_count <= 1)

 Enable GPIO at initial use */

 Disable GPIO if not used */

/**

 * _regulator_enable_delay - a delay helper function

 * @delay: time to delay in microseconds

 *

 * Delay for the requested amount of time as per the guidelines in:

 *

 *     Documentation/timers/timers-howto.rst

 *

 * The assumption here is that regulators will never be enabled in

 * atomic context and therefore sleeping functions can be used.

		/*

		 * For small enough values, handle super-millisecond

		 * delays in the usleep_range() call below.

	/*

	 * Give the scheduler some room to coalesce with any other

	 * wakeup sources. For delays shorter than 10 us, don't even

	 * bother setting up high-resolution timers and just busy-

	 * loop.

/**

 * _regulator_check_status_enabled

 *

 * A helper function to check if the regulator status can be interpreted

 * as 'regulator is enabled'.

 * @rdev: the regulator device to check

 *

 * Return:

 * * 1			- if status shows regulator is in enabled state

 * * 0			- if not enabled state

 * * Error Value	- as received from ops->get_status()

 Query before enabling in case configuration dependent.  */

		/* if needed, keep a distance of off_on_delay from last time

		 * this regulator was disabled.

	/* Allow the regulator to ramp; it would be useful to extend

	 * this for bulk operations so that the regulators can ramp

	 * together.

	/* If poll_enabled_time is set, poll upto the delay calculated

	 * above, delaying poll_enabled_time uS to check if the regulator

	 * actually got enabled.

	 * If the regulator isn't enabled after enable_delay has

	 * expired, return -ETIMEDOUT.

/**

 * _regulator_handle_consumer_enable - handle that a consumer enabled

 * @regulator: regulator source

 *

 * Some things on a regulator consumer (like the contribution towards total

 * load on the regulator) only have an effect when the consumer wants the

 * regulator enabled.  Explained in example with two consumers of the same

 * regulator:

 *   consumer A: set_load(100);       => total load = 0

 *   consumer A: regulator_enable();  => total load = 100

 *   consumer B: set_load(1000);      => total load = 100

 *   consumer B: regulator_enable();  => total load = 1100

 *   consumer A: regulator_disable(); => total_load = 1000

 *

 * This function (together with _regulator_handle_consumer_disable) is

 * responsible for keeping track of the refcount for a given regulator consumer

 * and applying / unapplying these things.

 *

 * Returns 0 upon no error; -error upon error.

/**

 * _regulator_handle_consumer_disable - handle that a consumer disabled

 * @regulator: regulator source

 *

 * The opposite of _regulator_handle_consumer_enable().

 *

 * Returns 0 upon no error; -error upon error.

 locks held by regulator_enable() */

 balance only if there are regulators coupled */

		/*

		 * The regulator may already be enabled if it's not switchable

		 * or was left on

 Fallthrough on positive return values - already enabled */

/**

 * regulator_enable - enable regulator output

 * @regulator: regulator source

 *

 * Request that the regulator be enabled with the regulator output at

 * the predefined voltage or current value.  Calls to regulator_enable()

 * must be balanced with calls to regulator_disable().

 *

 * NOTE: the output value can be set by other drivers, boot loader or may be

 * hardwired in the regulator.

 locks held by regulator_disable() */

 are we the last user and permitted to disable ? */

 we are last user */

/**

 * regulator_disable - disable regulator output

 * @regulator: regulator source

 *

 * Disable the regulator output voltage or current.  Calls to

 * regulator_enable() must be balanced with calls to

 * regulator_disable().

 *

 * NOTE: this will only disable the regulator output if no other consumer

 * devices have it enabled, the regulator device supports disabling and

 * machine constraints permit this operation.

 locks held by regulator_force_disable() */

/**

 * regulator_force_disable - force disable regulator output

 * @regulator: regulator source

 *

 * Forcibly disable the regulator output voltage or current.

 * NOTE: this *will* disable the regulator output even if other consumer

 * devices have it enabled. This should be used for situations when device

 * damage will likely occur if the regulator is not disabled (e.g. over temp).

	/*

	 * Workqueue functions queue the new work instance while the previous

	 * work instance is being processed. Cancel the queued work instance

	 * as the work instance under processing does the job of the queued

	 * work instance.

/**

 * regulator_disable_deferred - disable regulator output with delay

 * @regulator: regulator source

 * @ms: milliseconds until the regulator is disabled

 *

 * Execute regulator_disable() on the regulator after a delay.  This

 * is intended for use with devices that require some time to quiesce.

 *

 * NOTE: this will only disable the regulator output if no other consumer

 * devices have it enabled, the regulator device supports disabling and

 * machine constraints permit this operation.

 A GPIO control always takes precedence */

 If we don't know then assume that the regulator is always on */

/**

 * regulator_is_enabled - is the regulator output enabled

 * @regulator: regulator source

 *

 * Returns positive if the regulator driver backing the source/client

 * has requested that the device be enabled, zero if it hasn't, else a

 * negative errno code.

 *

 * Note that the device backing this regulator handle can have multiple

 * users, so it might be enabled even if regulator_enable() was never

 * called for this particular source.

/**

 * regulator_count_voltages - count regulator_list_voltage() selectors

 * @regulator: regulator source

 *

 * Returns number of selectors, or negative errno.  Selectors are

 * numbered starting at zero, and typically correspond to bitfields

 * in hardware registers.

/**

 * regulator_list_voltage - enumerate supported voltages

 * @regulator: regulator source

 * @selector: identify voltage to list

 * Context: can sleep

 *

 * Returns a voltage that can be passed to @regulator_set_voltage(),

 * zero if this selector code can't be used on this system, or a

 * negative errno.

/**

 * regulator_get_regmap - get the regulator's register map

 * @regulator: regulator source

 *

 * Returns the register map for the given regulator, or an ERR_PTR value

 * if the regulator doesn't use regmap.

/**

 * regulator_get_hardware_vsel_register - get the HW voltage selector register

 * @regulator: regulator source

 * @vsel_reg: voltage selector register, output parameter

 * @vsel_mask: mask for voltage selector bitfield, output parameter

 *

 * Returns the hardware register offset and bitmask used for setting the

 * regulator voltage. This might be useful when configuring voltage-scaling

 * hardware or firmware that can make I2C requests behind the kernel's back,

 * for example.

 *

 * On success, the output parameters @vsel_reg and @vsel_mask are filled in

 * and 0 is returned, otherwise a negative errno is returned.

/**

 * regulator_list_hardware_vsel - get the HW-specific register value for a selector

 * @regulator: regulator source

 * @selector: identify voltage to list

 *

 * Converts the selector to a hardware-specific voltage selector that can be

 * directly written to the regulator registers. The address of the voltage

 * register can be determined by calling @regulator_get_hardware_vsel_register.

 *

 * On error a negative errno is returned.

/**

 * regulator_get_linear_step - return the voltage step size between VSEL values

 * @regulator: regulator source

 *

 * Returns the voltage step size between VSEL values for linear

 * regulators, or return 0 if the regulator isn't a linear regulator.

/**

 * regulator_is_supported_voltage - check if a voltage range can be supported

 *

 * @regulator: Regulator to check.

 * @min_uV: Minimum required voltage in uV.

 * @max_uV: Maximum required voltage in uV.

 *

 * Returns a boolean.

 If we can't change voltage check the current voltage */

 Any voltage within constrains range is fine? */

 Stepping is only needed if the regulator is enabled. */

 No change needed. */

 Stepping up. */

			/*

			 * Call the callback directly instead of using

			 * _regulator_call_set_voltage_sel() as we don't

			 * want to notify anyone yet. Same in the branch

			 * below.

 Stepping down. */

 The final selector will trigger the notifiers. */

	/*

	 * At least try to return to the previous voltage if setting a new

	 * one failed.

	/*

	 * If we can't obtain the old selector there is not enough

	 * info to call set_voltage_time_sel().

		/*

		 * Call set_voltage_time_sel if successfully obtained

		 * old_selector

 Insert any necessary delays */

	/* If we're setting the same range as last time the change

	 * should be a noop (some cpufreq implementations use the same

	 * voltage for multiple frequencies, for example).

	/* If we're trying to set a range that overlaps the current voltage,

	 * return successfully even though the regulator does not support

	 * changing the voltage.

 sanity check */

 constraints check */

 restore original values in case of error */

 for not coupled regulators this will just set the voltage */

 No need to fail here */

 Limit voltage change only if necessary */

 Clamp target voltage within the given step */

	/*

	 * If there are no coupled regulators, simply set the voltage

	 * demanded by consumers.

		/*

		 * If consumers don't provide any demands, set voltage

		 * to min_uV

 Find highest min desired voltage */

	/*

	 * Let target_uV be equal to the desired one if possible.

	 * If not, set it to minimum voltage, allowed by other coupled

	 * regulators.

	/*

	 * Find min and max voltages, which currently aren't violating

	 * max_spread.

 There aren't any other regulators enabled */

		/*

		 * Correct target voltage, so as it currently isn't

		 * violating max_spread

 Apply max_uV_step constraint if necessary */

 Set current_uV if wasn't done earlier in the code and if necessary */

	/*

	 * Find the best possible voltage change on each loop. Leave the loop

	 * if there isn't any possible change.

		/*

		 * Find highest difference between optimal voltage

		 * and current voltage.

			/*

			 * optimal_uV is the best voltage that can be set for

			 * i-th regulator at the moment without violating

			 * max_spread constraint in order to balance

			 * the coupled voltages.

 Nothing to change, return successfully */

	/*

	 * If system is in a state other than PM_SUSPEND_ON, don't check

	 * other coupled regulators.

 Invoke custom balancer for customized couplers */

/**

 * regulator_set_voltage - set regulator output voltage

 * @regulator: regulator source

 * @min_uV: Minimum required voltage in uV

 * @max_uV: Maximum acceptable voltage in uV

 *

 * Sets a voltage regulator to the desired output voltage. This can be set

 * during any regulator state. IOW, regulator can be disabled or enabled.

 *

 * If the regulator is enabled then the voltage will change to the new value

 * immediately otherwise if the regulator is disabled the regulator will

 * output at the new voltage when enabled.

 *

 * NOTE: If the regulator is shared between several devices then the lowest

 * request voltage that meets the system constraints will be used.

 * Regulator system constraints must be set for this regulator before

 * calling this function otherwise this call will fail.

	/*

	 * if any consumer wants this regulator device keeping on in

	 * suspend states, don't set it as disabled.

 PM_SUSPEND_ON is handled by regulator_set_voltage() */

/**

 * regulator_set_voltage_time - get raise/fall time

 * @regulator: regulator source

 * @old_uV: starting voltage in microvolts

 * @new_uV: target voltage in microvolts

 *

 * Provided with the starting and ending voltage, this function attempts to

 * calculate the time in microseconds required to rise or fall to this new

 * voltage.

 Currently requires operations to do this */

 We only look for exact voltage matches here */

/**

 * regulator_set_voltage_time_sel - get raise/fall time

 * @rdev: regulator source device

 * @old_selector: selector for starting voltage

 * @new_selector: selector for target voltage

 *

 * Provided with the starting and target voltage selectors, this function

 * returns time in microseconds required to rise or fall to this new voltage

 *

 * Drivers providing ramp_delay in regulation_constraints can use this as their

 * set_voltage_time_sel() operation.

 sanity check */

 balance only, if regulator is coupled */

/**

 * regulator_sync_voltage - re-apply last regulator output voltage

 * @regulator: regulator source

 *

 * Re-apply the last configured voltage.  This is intended to be used

 * where some external control source the consumer is cooperating with

 * has caused the configured voltage to change.

 This is only going to work if we've had a voltage configured. */

 This should be a paranoia check... */

 balance only, if regulator is coupled */

 if bypassed the regulator must have a supply */

/**

 * regulator_get_voltage - get regulator output voltage

 * @regulator: regulator source

 *

 * This returns the current regulator voltage in uV.

 *

 * NOTE: If the regulator is disabled it will return the voltage value. This

 * function should not be used to determine regulator state.

/**

 * regulator_set_current_limit - set regulator output current limit

 * @regulator: regulator source

 * @min_uA: Minimum supported current in uA

 * @max_uA: Maximum supported current in uA

 *

 * Sets current sink to the desired output current. This can be set during

 * any regulator state. IOW, regulator can be disabled or enabled.

 *

 * If the regulator is enabled then the current will change to the new value

 * immediately otherwise if the regulator is disabled the regulator will

 * output at the new current when enabled.

 *

 * NOTE: Regulator system constraints must be set for this regulator before

 * calling this function otherwise this call will fail.

 sanity check */

 constraints check */

 sanity check */

/**

 * regulator_get_current_limit - get regulator output current

 * @regulator: regulator source

 *

 * This returns the current supplied by the specified current sink in uA.

 *

 * NOTE: If the regulator is disabled it will return the current value. This

 * function should not be used to determine regulator state.

/**

 * regulator_set_mode - set regulator operating mode

 * @regulator: regulator source

 * @mode: operating mode - one of the REGULATOR_MODE constants

 *

 * Set regulator operating mode to increase regulator efficiency or improve

 * regulation performance.

 *

 * NOTE: Regulator system constraints must be set for this regulator before

 * calling this function otherwise this call will fail.

 sanity check */

 return if the same mode is requested */

 constraints check */

 sanity check */

/**

 * regulator_get_mode - get regulator operating mode

 * @regulator: regulator source

 *

 * Get the current regulator operating mode.

/**

 * regulator_get_error_flags - get regulator error information

 * @regulator: regulator source

 * @flags: pointer to store error flags

 *

 * Get the current regulator error information.

/**

 * regulator_set_load - set regulator load

 * @regulator: regulator source

 * @uA_load: load current

 *

 * Notifies the regulator core of a new device load. This is then used by

 * DRMS (if enabled by constraints) to set the most efficient regulator

 * operating mode for the new regulator loading.

 *

 * Consumer devices notify their supply regulator of the maximum power

 * they will require (can be taken from device datasheet in the power

 * consumption tables) when they change operational status and hence power

 * state. Examples of operational state changes that can affect power

 * consumption are :-

 *

 *    o Device is opened / closed.

 *    o Device I/O is about to begin or has just finished.

 *    o Device is idling in between work.

 *

 * This information is also exported via sysfs to userspace.

 *

 * DRMS will sum the total requested load on the regulator and change

 * to the most efficient operating mode if platform constraints allow.

 *

 * NOTE: when a regulator consumer requests to have a regulator

 * disabled then any load that consumer requested no longer counts

 * toward the total requested load.  If the regulator is re-enabled

 * then the previously requested load will start counting again.

 *

 * If a regulator is an always-on regulator then an individual consumer's

 * load will still be removed if that consumer is fully disabled.

 *

 * On error a negative errno is returned.

/**

 * regulator_allow_bypass - allow the regulator to go into bypass mode

 *

 * @regulator: Regulator to configure

 * @enable: enable or disable bypass mode

 *

 * Allow the regulator to go into bypass mode if all other consumers

 * for the regulator also enable bypass mode and the machine

 * constraints allow this.  Bypass mode means that the regulator is

 * simply passing the input directly to the output with no regulation.

/**

 * regulator_register_notifier - register regulator event notifier

 * @regulator: regulator source

 * @nb: notifier block

 *

 * Register notifier block to receive regulator events.

/**

 * regulator_unregister_notifier - unregister regulator event notifier

 * @regulator: regulator source

 * @nb: notifier block

 *

 * Unregister regulator event notifier block.

/* notify regulator consumers and downstream regulator consumers.

 * Note mutex must be held by caller.

 call rdev chain first */

/**

 * regulator_bulk_get - get multiple regulator consumers

 *

 * @dev:           Device to supply

 * @num_consumers: Number of consumers to register

 * @consumers:     Configuration of consumers; clients are stored here.

 *

 * @return 0 on success, an errno on failure.

 *

 * This helper function allows drivers to get several regulator

 * consumers in one operation.  If any of the regulators cannot be

 * acquired then any regulators that were allocated will be freed

 * before returning to the caller.

/**

 * regulator_bulk_enable - enable multiple regulator consumers

 *

 * @num_consumers: Number of consumers

 * @consumers:     Consumer data; clients are stored here.

 * @return         0 on success, an errno on failure

 *

 * This convenience API allows consumers to enable multiple regulator

 * clients in a single API call.  If any consumers cannot be enabled

 * then any others that were enabled will be disabled again prior to

 * return.

 If any consumer failed we need to unwind any that succeeded */

/**

 * regulator_bulk_disable - disable multiple regulator consumers

 *

 * @num_consumers: Number of consumers

 * @consumers:     Consumer data; clients are stored here.

 * @return         0 on success, an errno on failure

 *

 * This convenience API allows consumers to disable multiple regulator

 * clients in a single API call.  If any consumers cannot be disabled

 * then any others that were disabled will be enabled again prior to

 * return.

/**

 * regulator_bulk_force_disable - force disable multiple regulator consumers

 *

 * @num_consumers: Number of consumers

 * @consumers:     Consumer data; clients are stored here.

 * @return         0 on success, an errno on failure

 *

 * This convenience API allows consumers to forcibly disable multiple regulator

 * clients in a single API call.

 * NOTE: This should be used for situations when device damage will

 * likely occur if the regulators are not disabled (e.g. over temp).

 * Although regulator_force_disable function call for some consumers can

 * return error numbers, the function is called for all consumers.

 Store first error for reporting */

/**

 * regulator_bulk_free - free multiple regulator consumers

 *

 * @num_consumers: Number of consumers

 * @consumers:     Consumer data; clients are stored here.

 *

 * This convenience API allows consumers to free multiple regulator

 * clients in a single API call.

/**

 * regulator_notifier_call_chain - call regulator event notifier

 * @rdev: regulator source

 * @event: notifier block

 * @data: callback-specific data.

 *

 * Called by regulator drivers to notify clients a regulator event has

 * occurred.

/**

 * regulator_mode_to_status - convert a regulator mode into a status

 *

 * @mode: Mode to convert

 *

 * Convert a regulator mode into a status.

/*

 * To avoid cluttering sysfs (and memory) with useless state, only

 * create attributes that can be meaningfully displayed.

 these three are always present */

 some attributes need specific methods to be displayed */

 constraints need specific supporting methods */

 Avoid duplicate debugfs directory names */

	/*

	 * Note that regulators are appended to the list and the generic

	 * coupler is registered first, hence it will be attached at last

	 * if nobody cared.

 already resolved */

	/*

	 * Every regulator should always have coupling descriptor filled with

	 * at least pointer to itself.

 regulator isn't coupled */

/**

 * regulator_register - register regulator

 * @regulator_desc: regulator to register

 * @cfg: runtime configuration for regulator

 *

 * Called by regulator drivers to register a regulator.

 * Returns a valid pointer to struct regulator_dev on success

 * or an ERR_PTR() on error.

 Only one of each should be implemented */

 If we're using selectors we must implement list_voltage. */

	/*

	 * Duplicate the config so the driver could override it after

	 * parsing init data.

	/*

	 * Sometimes not all resources are probed already so we need to take

	 * that into account. This happens most the time if the ena_gpiod comes

	 * from a gpio extender or something else.

	/*

	 * We need to keep track of any GPIO descriptor coming from the

	 * device tree until we have handled it over to the core. If the

	 * config that was passed in to this function DOES NOT contain

	 * a descriptor, and the config after this call DOES contain

	 * a descriptor, we definitely got one from parsing the device

	 * tree.

 preform any regulator specific init */

 The regulator core took over the GPIO descriptor */

 register with sysfs */

 set regulator constraints */

		/* Regulator might be in bypass mode and so needs its supply

		 * to set the constraints

		/* FIXME: this currently triggers a chicken-and-egg problem

		 * when creating -SUPPLY symlink in sysfs to a regulator

		 * that is just being created

 add consumers devices */

 try to resolve regulators coupling since a new one was registered */

 try to resolve regulators supply since a new one was registered */

/**

 * regulator_unregister - unregister regulator

 * @rdev: regulator to unregister

 *

 * Called by regulator drivers to unregister a regulator.

/**

 * regulator_suspend - prepare regulators for system wide suspend

 * @dev: ``&struct device`` pointer that is passed to _regulator_suspend()

 *

 * Configure each regulator with it's suspend operating parameters for state.

 Avoid grabbing the lock if we don't need to */

 !CONFIG_SUSPEND */

 !CONFIG_SUSPEND */

/**

 * regulator_has_full_constraints - the system has fully specified constraints

 *

 * Calling this function will cause the regulator API to disable all

 * regulators which have a zero use count and don't have an always_on

 * constraint in a late_initcall.

 *

 * The intention is that this will become the default behaviour in a

 * future kernel release so users are encouraged to use this facility

 * now.

/**

 * rdev_get_drvdata - get rdev regulator driver data

 * @rdev: regulator

 *

 * Get rdev regulator driver private data. This call can be used in the

 * regulator driver context.

/**

 * regulator_get_drvdata - get regulator driver data

 * @regulator: regulator

 *

 * Get regulator driver private data. This call can be used in the consumer

 * driver context when non API regulator specific functions need to be called.

/**

 * regulator_set_drvdata - set regulator driver data

 * @regulator: regulator

 * @data: data

/**

 * rdev_get_id - get regulator ID

 * @rdev: regulator

 CONFIG_DEBUG_FS */

 init early to allow our consumers to complete system booting */

 If we can't read the status assume it's always on. */

 But if reading the status failed, assume that it's off. */

		/* We log since this may kill the system if it goes

		 * wrong.

		/* The intention is that in future we will

		 * assume that full constraints are provided

		 * so warn even if we aren't going to do

		 * anything here.

	/*

	 * Regulators may had failed to resolve their input supplies

	 * when were registered, either because the input supply was

	 * not registered yet or because its parent device was not

	 * bound yet. So attempt to resolve the input supplies for

	 * pending regulators before trying to disable unused ones.

	/* If we have a full configuration then disable any regulators

	 * we have permission to change the status for and which are

	 * not in use or always_on.  This is effectively the default

	 * for DT and ACPI as they have full constraints.

	/*

	 * Since DT doesn't provide an idiomatic mechanism for

	 * enabling full constraints and since it's much more natural

	 * with DT to provide them just assume that a DT enabled

	 * system has full constraints.

	/*

	 * We punt completion for an arbitrary amount of time since

	 * systems like distros will load many drivers from userspace

	 * so consumers might not always be ready yet, this is

	 * particularly an issue with laptops where this might bounce

	 * the display off then on.  Ideally we'd get a notification

	 * from userspace when this happens but we don't so just wait

	 * a bit and hope we waited long enough.  It'd be better if

	 * we'd only do this on systems that need it, and a kernel

	 * command line option might be useful.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OF helpers for regulator framework

 *

 * Copyright (C) 2011 Texas Instruments, Inc.

 * Rajendra Nayak <rnayak@ti.com>

 Protection limits: */

 Voltage change possible? */

 Do we have a voltage range, if so try to apply it? */

 Current change possible? */

 status change should be possible. */

 otherwise use min_uV as default suspend voltage */

/**

 * of_get_regulator_init_data - extract regulator_init_data structure info

 * @dev: device requesting for regulator_init_data

 * @node: regulator device node

 * @desc: regulator description

 *

 * Populates regulator_init_data structure by extracting data from device

 * tree node, returns a pointer to the populated structure or NULL if memory

 * alloc fails.

 Out of memory? */

/**

 * of_regulator_match - extract multiple regulator init data from device tree.

 * @dev: device requesting the data

 * @node: parent device node of the regulators

 * @matches: match table for the regulators

 * @num_matches: number of entries in match table

 *

 * This function uses a match table specified by the regulator driver to

 * parse regulator init data from the device tree. @node is expected to

 * contain a set of child nodes, each providing the init data for one

 * regulator. The data parsed from a child node will be matched to a regulator

 * based on either the deprecated property regulator-compatible if present,

 * or otherwise the child node's name. Note that the match table is modified

 * in place and an additional of_node reference is taken for each matched

 * regulator.

 *

 * Returns the number of matches found or a negative error code on failure.

			/*

			 * 'of_node_get(child)' is already performed by the

			 * for_each loop.

/*

 * Returns number of regulators coupled with rdev.

 Looks for "to_find" device_node in src's "regulator-coupled-with" property */

 found */

/**

 * of_check_coupling_data - Parse rdev's coupling properties and check data

 *			    consistency

 * @rdev: pointer to regulator_dev whose data is checked

 *

 * Function checks if all the following conditions are met:

 * - rdev's max_spread is greater than 0

 * - all coupled regulators have the same max_spread

 * - all coupled regulators have the same number of regulator_dev phandles

 * - all regulators are linked to each other

 *

 * Returns true if all conditions are met.

 iterate over rdev's phandles */

/**

 * of_parse_coupled regulator - Get regulator_dev pointer from rdev's property

 * @rdev: Pointer to regulator_dev, whose DTS is used as a source to parse

 *	  "regulator-coupled-with" property

 * @index: Index in phandles array

 *

 * Returns the regulator_dev pointer parsed from DTS. If it has not been yet

 * registered, returns NULL

 SPDX-License-Identifier: GPL-2.0-only



 Copyright 2020 Google LLC.

	/*

	 * This can happen when the given range [min_uV, max_uV] doesn't

	 * contain any voltage that can be represented exactly in mV.

 Make sure the returned name is always a valid string */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2012-2015, The Linux Foundation. All rights reserved.

 Pin control enable input pins. */

 Pin control high power mode input pins. */

/*

 * Used with enable parameters to specify that hardware default register values

 * should be left unaltered.

 Soft start strength of a voltage switch type regulator */

/**

 * struct spmi_regulator_init_data - spmi-regulator initialization data

 * @pin_ctrl_enable:        Bit mask specifying which hardware pins should be

 *				used to enable the regulator, if any

 *			    Value should be an ORing of

 *				SPMI_REGULATOR_PIN_CTRL_ENABLE_* constants.  If

 *				the bit specified by

 *				SPMI_REGULATOR_PIN_CTRL_ENABLE_HW_DEFAULT is

 *				set, then pin control enable hardware registers

 *				will not be modified.

 * @pin_ctrl_hpm:           Bit mask specifying which hardware pins should be

 *				used to force the regulator into high power

 *				mode, if any

 *			    Value should be an ORing of

 *				SPMI_REGULATOR_PIN_CTRL_HPM_* constants.  If

 *				the bit specified by

 *				SPMI_REGULATOR_PIN_CTRL_HPM_HW_DEFAULT is

 *				set, then pin control mode hardware registers

 *				will not be modified.

 * @vs_soft_start_strength: This parameter sets the soft start strength for

 *				voltage switch type regulators.  Its value

 *				should be one of SPMI_VS_SOFT_START_STR_*.  If

 *				its value is SPMI_VS_SOFT_START_STR_HW_DEFAULT,

 *				then the soft start strength will be left at its

 *				default hardware value.

 These types correspond to unique register layouts. */

/*

 * Second common register layout used by newer devices starting with ftsmps426

 * Note that some of the registers from the first common layout remain

 * unchanged and their definition is not duplicated.

 Used for indexing into ctrl_reg.  These are offets from 0x40 */

 Common regulator control register layout */

 Common regulator mode register layout */

 Common regulator pull down control register layout */

 LDO regulator current limit control register layout */

 LDO regulator soft start control register layout */

 VS regulator over current protection control register layout */

 VS regulator soft start control register layout */

 Boost regulator current limit control register layout */

 Clock rate in kHz of the FTSMPS regulator reference clock. */

 Minimum voltage stepper delay for each step. */

/*

 * The ratio SPMI_FTSMPS_STEP_MARGIN_NUM/SPMI_FTSMPS_STEP_MARGIN_DEN is used to

 * adjust the step rate in order to account for oscillator variance.

 Clock rate in kHz of the FTSMPS426 regulator reference clock. */

 Minimum voltage stepper delay for each step. */

/*

 * The ratio SPMI_FTSMPS426_STEP_MARGIN_NUM/SPMI_FTSMPS426_STEP_MARGIN_DEN is

 * used to adjust the step rate in order to account for oscillator variance.

 VSET value to decide the range of ULT SMPS */

/**

 * struct spmi_voltage_range - regulator set point voltage mapping description

 * @min_uV:		Minimum programmable output voltage resulting from

 *			set point register value 0x00

 * @max_uV:		Maximum programmable output voltage

 * @step_uV:		Output voltage increase resulting from the set point

 *			register value increasing by 1

 * @set_point_min_uV:	Minimum allowed voltage

 * @set_point_max_uV:	Maximum allowed voltage.  This may be tweaked in order

 *			to pick which range should be used in the case of

 *			overlapping set points.

 * @n_voltages:		Number of preferred voltage set points present in this

 *			range

 * @range_sel:		Voltage range register value corresponding to this range

 *

 * The following relationships must be true for the values used in this struct:

 * (max_uV - min_uV) % step_uV == 0

 * (set_point_min_uV - min_uV) % step_uV == 0*

 * (set_point_max_uV - min_uV) % step_uV == 0*

 * n_voltages = (set_point_max_uV - set_point_min_uV) / step_uV + 1

 *

 * *Note, set_point_min_uV == set_point_max_uV == 0 is allowed in order to

 * specify that the voltage range has meaning, but is not preferred.

/*

 * The ranges specified in the spmi_voltage_set_points struct must be listed

 * so that range[i].set_point_max_uV < range[i+1].set_point_min_uV.

/*

 * These tables contain the physically available PMIC regulator voltage setpoint

 * ranges.  Where two ranges overlap in hardware, one of the ranges is trimmed

 * to ensure that the setpoints available to software are monotonically

 * increasing and unique.  The set_voltage callback functions expect these

 * properties to hold.

 Check if request voltage is outside of physically settable range. */

 Find the range which uV is inside of. */

	/*

	 * Force uV to be an allowed set point by applying a ceiling function to

	 * the uV value.

			/*

			 * hardware selectors between set point min and real

			 * min are invalid so we ignore them

			/*

			 * hardware selectors between set point min and real

			 * min and between set point max and real max are

			 * invalid so we return an error if they're

			 * programmed into the hardware

 Current range doesn't support the requested voltage. */

	/*

	 * Force uV to be an allowed set point by applying a ceiling function to

	 * the uV value.

		/*

		 * No set point in the current voltage range is within the

		 * requested min_uV to max_uV range.

	/*

	 * Favor staying in the current voltage range if possible.  This avoids

	 * voltage spikes that occur when changing the voltage range.

	/*

	 * Certain types of regulators do not have a range select register so

	 * only voltage set register needs to be written.

	/*

	 * Calculate VSET based on range

	 * In case of range 0: voltage_sel is a 7 bit value, can be written

	 *			witout any modification.

	 * In case of range 1: voltage_sel is a 5 bit value, bits[7-5] set to

	 *			[011].

	/*

	 * Reset the OCP count if there is a large delay between switch enable

	 * and when OCP triggers.  This is indicative of a hotplug event as

	 * opposed to a fault.

 Wait for switch output to settle back to 0 V after OCP triggered. */

 Immediately clear the over current condition. */

 Schedule the over current clear task to run later. */

 select the band */

 If AVS is enabled, switch it off during the voltage change */

 After successful voltage change, switch the AVS back on */

 Always do the SAW register writes on the first CPU */

 Maximum possible digital major revision value */

           type subtype dig_min dig_max ltype ops setpoints hpm_min */

 slew_rate has units of uV/us */

 Ensure that the slew rate is greater than 0 */

 slew_rate has units of uV/us */

 Ensure that the slew rate is greater than 0 */

 Set up enable pin control. */

 Set up mode pin control. */

 Write back any control register values that were modified. */

 Set soft start strength and over current protection for VS. */

	/*

	 * Initialize configuration parameters to use hardware default in case

	 * no value is specified via device tree.

 These bindings are optional, so it is okay if they aren't found. */

 l4 is unaccessible on PM660 */

 since there is only one range */

 SPDX-License-Identifier: GPL-2.0+

 SPDX-License-Identifier: GPL-2.0



 MP8867/MP8869 regulator driver



 Copyright (C) 2020 Synaptics Incorporated



 Author: Jisheng Zhang <jszhang@kernel.org>

 SPDX-License-Identifier: GPL-2.0+

 Extension for proprietary register and mask */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * gpio-regulator.c

 *

 * Copyright 2011 Heiko Stuebner <heiko@sntech.de>

 *

 * based on fixed.c

 *

 * Copyright 2008 Wolfson Microelectronics PLC.

 *

 * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

 *

 * Copyright (c) 2009 Nokia Corporation

 * Roger Quadros <ext-roger.quadros@nokia.com>

 *

 * This is useful for systems with mixed controllable and

 * non-controllable regulators, as well as for allowing testing on

 * systems with no controllable regulators.

	/*

	 * Do not use: undocumented device tree property.

	 * This is kept around solely for device tree ABI stability.

 Fetch GPIO init levels */

 Default to high per specification */

 Fetch states. */

 This is good to know */

 handle regulator type*/

 build initial state from gpio init data. */

	/*

	 * The signal will be inverted by the GPIO core if flagged so in the

	 * descriptor.

 SPDX-License-Identifier: GPL-2.0+



 max77693.c - Regulator driver for the Maxim 77693 and 77843



 Copyright (C) 2013-2015 Samsung Electronics

 Jonghwa Lee <jonghwa3.lee@samsung.com>

 Krzysztof Kozlowski <krzk@kernel.org>



 This driver is based on max77686.c

/*

 * ID for MAX77843 regulators.

 * There is no need for such for MAX77693.

 Register differences between chargers: MAX77693 and MAX77843 */

/*

 * MAX77693 CHARGER regulator - Min : 20mA, Max : 2580mA, step : 20mA

 * 0x00, 0x01, 0x2, 0x03	= 60 mA

 * 0x04 ~ 0x7E			= (60 + (X - 3) * 20) mA

 * Actually for MAX77693 the driver manipulates the maximum input current,

 * not the fast charge current (output). This should be fixed.

 *

 * On MAX77843 the calculation formula is the same (except values).

 * Fortunately it properly manipulates the fast charge current.

 the first four codes for charger current are all 60mA */

 the first four codes for charger current are all 60mA */

 end of CHARGER regulator ops */

 Returns regmap suitable for given regulator on chosen device */

 Else: TYPE_MAX77843 */

 SPDX-License-Identifier: GPL-2.0

 Copyright (C) STMicroelectronics 2018

 Author: Pascal Paillet <p.paillet@st.com> for STMicroelectronics.

/**

 * struct stpmic1 regulator description: this structure is used as driver data

 * @desc: regulator framework description

 * @mask_reset_reg: mask reset register address

 * @mask_reset_mask: mask rank and mask reset register mask

 * @icc_reg: icc register address

 * @icc_mask: icc register mask

 Enable time worst case is 5000mV/(2250uV/uS) */

 Ramp delay worst case is (2250uV/uS) */

 with index 31 LDO3 is in DDR mode */

	/*

	 * The code seems like one bit in a register controls whether OCP is

	 * enabled. So we might be able to turn it off here is if that

	 * was requested. I won't support this because I don't have the HW.

	 * Feel free to try and implement if you have the HW and need kernel

	 * to disable this.

	 *

	 * Also, I don't know if limit can be configured or if we support

	 * error/warning instead of protect. So I just keep existing logic

	 * and assume no.

 enable switch off in case of over current */

 Send an overcurrent notification */

 set mask reset */

 setup an irq handler for over-current detection */

 SPDX-License-Identifier: GPL-2.0



 System Control and Management Interface (SCMI) based regulator driver



 Copyright (C) 2020-2021 ARM Ltd.



 Implements a regulator driver on top of the SCMI Voltage Protocol.



 The ARM SCMI Protocol aims in general to hide as much as possible all the

 underlying operational details while providing an abstracted interface for

 its users to operate upon: as a consequence the resulting operational

 capabilities and configurability of this regulator device are much more

 limited than the ones usually available on a standard physical regulator.



 The supported SCMI regulator ops are restricted to the bare minimum:



  - 'status_ops': enable/disable/is_enabled

  - 'voltage_ops': get_voltage_sel/set_voltage_sel

		     list_voltage/map_voltage



 Each SCMI regulator instance is associated, through the means of a proper DT

 entry description, to a specific SCMI Voltage Domain.

	/*

	 * Note that SCMI voltage domains describable by linear ranges

	 * (segments) {low, high, step} are guaranteed to come in one single

	 * triplet by the SCMI Voltage Domain protocol support itself.

 Rule out buggy negative-intervals answers from fw */

 Just one fixed voltage exposed by SCMI */

 One simple linear mapping. */

 Discrete non linear levels are mapped to volt_table */

	/*

	 * Regulator framework does not fully support negative voltages

	 * so we discard any voltage domain reported as supporting negative

	 * voltages: as a consequence each levels_uv entry is guaranteed to

	 * be non-negative from here on.

	/*

	 * Using the scmi device here to have DT searched from Voltage

	 * protocol node down.

 Store for later retrieval via rdev_get_drvdata() */

 get hold of good nodes */

 Allocate pointers array for all possible domains */

	/*

	 * Start collecting into rinfo->sregv possibly good SCMI Regulators as

	 * described by a well-formed DT entry and associated with an existing

	 * plausible SCMI Voltage Domain number, all belonging to this SCMI

	 * platform instance node (handle->dev->of_node).

 abort on any mem issue */

	/*

	 * Register a regulator for each valid regulator-DT-entry that we

	 * can successfully reach via SCMI and has a valid associated voltage

	 * domain.

 Skip empty slots */

 Skip invalid voltage domains */

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2021 MediaTek Inc.

 sentinel */

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2019 five technologies GmbH

 Author: Markus Reichl <m.reichl@fivetechno.de>

 Register definitions */

3 lo Bits

8 hi Bits

/*

 * AXP20x regulators driver.

 *

 * Copyright (C) 2013 Carlo Caione <carlo@caione.org>

 *

 * This file is subject to the terms and conditions of the GNU General

 * Public License. See the file "COPYING" in the main directory of this

 * archive for more details.

 *

 * This program is distributed in the hope that it will be useful,

 * but WITHOUT ANY WARRANTY; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the

 * GNU General Public License for more details.

 Not supported for this regulator */

			/*

			 * On some boards, the LDO3 can be overloaded when

			 * turning on, causing the entire PMIC to shutdown

			 * without warning. Turning it on at the minimal voltage

			 * and then setting the voltage to the requested value

			 * works reliably.

			/*

			 * A small pause is needed between

			 * setting the voltage and enabling the LDO to give the

			 * internal state machine time to process the request.

 No quirks */

 secondary switchable output of DCDC1 */

 LDO regulator internally chained to DCDC5 */

	/* Note the datasheet only guarantees reliable operation up to

	/* Note the datasheet only guarantees reliable operation up to

 DCDC ranges shared with AXP813 */

 AXP806's CLDO2 and AXP809's DLDO1 share the same range */

 secondary switchable output of DCDC1 */

 secondary switchable output of DCDC1 */

 LDO regulator internally chained to DCDC5 */

	/*

	 * Note the datasheet only guarantees reliable operation up to

	 * 3.3V, this needs to be enforced via dts provided constraints

	/*

	 * Note the datasheet only guarantees reliable operation up to

	 * 3.3V, this needs to be enforced via dts provided constraints

 to do / check ... */

	/*

	 * TODO: FLDO3 = {DCDC5, FLDOIN} / 2

	 *

	 * This means FLDO3 effectively switches supplies at runtime,

	 * something the regulator subsystem does not support.

		/*

		 * AXP803/AXP813 DCDC work frequency setting has the same

		 * range and step as AXP22X, but at a different register.

		 * (See include/linux/mfd/axp20x.h)

 to the check below */

		/*

		 * AXP806 also have DCDC work frequency setting register at a

		 * different position.

		/*

		 * AXP806 DCDC regulator IDs have the same range as AXP22X.

		 * (See include/linux/mfd/axp20x.h)

 to the check below */

 should not happen */

/*

 * This function checks whether a regulator is part of a poly-phase

 * output setup based on the registers settings. Returns true if it is.

	/*

	 * Currently in our supported AXP variants, only AXP803, AXP806,

	 * and AXP813 have polyphase regulators.

 This only sets the dcdc freq. Ignore any errors */

		/*

		 * If this regulator is a slave in a poly-phase setup,

		 * skip it, as its controls are bound to the master

		 * regulator and won't work.

 Support for AXP813's FLDO3 is not implemented */

		/*

		 * Regulators DC1SW and DC5LDO are connected internally,

		 * so we have to handle their supply names separately.

		 *

		 * We always register the regulators in proper sequence,

		 * so the supply names are correctly read. See the last

		 * part of this loop to see where we save the DT defined

		 * name.

		/*

		 * Save AXP22X DCDC1 / DCDC5 regulator names for later.

 Change N_VBUSEN sense pin to DRIVEVBUS output pin */

 SPDX-License-Identifier: GPL-2.0+



 mpq7920.c  - regulator driver for mps mpq7920



 Copyright 2019 Monolithic Power Systems, Inc



 Author: Saravanan Sekar <sravanhome@gmail.com>

 LDORTC */

/* Current limits array (in uA)

 * ILIM1 & ILIM3

 ILIM2 & ILIM4 */

 LDO4 & LDO5 */

 RTCLDO not controllable, always ON */

/*

 * DVS ramp rate BUCK1 to BUCK4

 * 00-01: Reserved

 * 10: 8mV/us

 * 11: 4mV/us

 SPDX-License-Identifier: GPL-2.0+



 Copyright (c) 2019 Mantas Pucka <mantas@8devices.com>

 Copyright (c) 2019 Robert Marko <robert.marko@sartura.hr>



 Driver for IPQ4019 SD/MMC controller's I/O LDO voltage regulator

 SPDX-License-Identifier: GPL-2.0+



 Copyright (c) 2011 Samsung Electronics Co., Ltd

              http:
 {OFF, ON, LOWPOWER, SUSPEND} */

 LDO1 ... LDO28 */

 LDO1 */

 LDO5 */

 LDO10 */

 LDO15 */

 LDO20 */

 LDO25 */

 LDO28 */

 BUCK1 ... BUCK9 */

 BUCK1 */

 BUCK5 */

 BUCK9 */

 buck234_vol != NULL means to control buck234 voltage via DVS GPIO */

/*

 * Enable GPIO control over BUCK9 in regulator_config for that regulator.

 Check if opmode for regulator matches S5M8767_ENCTRL_USE_GPIO */

/*

 * Turn on GPIO control over BUCK9.

 count the number of regulators to be supported in pmic */

 CONFIG_OF */

 SET1 GPIO */

 SET2 GPIO */

 SET3 GPIO */

 DS2 GPIO */

 DS3 GPIO */

 DS4 GPIO */

 Initialize GPIO DVS registers */

 Assigns config.ena_gpiod */

			/*

			 * Hand the GPIO descriptor management over to the

			 * regulator core, remove it from devres management.

 Module information */

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (C) 2019 ROHM Semiconductors

 bd71828-regulator.c ROHM BD71828GW-DS1 regulator driver



	/*

	 * DVS Buck voltages can be changed by register values or via GPIO.

	 * Use register accesses by default.

			/*

			 * LPSR voltage is same as SUSPEND voltage. Allow

			 * setting it so that regulator can be set enabled at

			 * LPSR state

			/*

			 * BUCK3 only supports single voltage for all states.

			 * voltage can be individually enabled for each state

			 * though => allow setting all states to support

			 * enabling power rail on different states.

			/*

			 * BUCK4 only supports single voltage for all states.

			 * voltage can be individually enabled for each state

			 * though => allow setting all states to support

			 * enabling power rail on different states.

			/*

			 * BUCK5 only supports single voltage for all states.

			 * voltage can be individually enabled for each state

			 * though => allow setting all states to support

			 * enabling power rail on different states.

			/*

			 * LDO1 only supports single voltage for all states.

			 * voltage can be individually enabled for each state

			 * though => allow setting all states to support

			 * enabling power rail on different states.

			/*

			 * LDO2 only supports single voltage for all states.

			 * voltage can be individually enabled for each state

			 * though => allow setting all states to support

			 * enabling power rail on different states.

			/*

			 * LDO3 only supports single voltage for all states.

			 * voltage can be individually enabled for each state

			 * though => allow setting all states to support

			 * enabling power rail on different states.

			/*

			 * LDO1 only supports single voltage for all states.

			 * voltage can be individually enabled for each state

			 * though => allow setting all states to support

			 * enabling power rail on different states.

		/*

		 * LDO5 is special. It can choose vsel settings to be configured

		 * from 2 different registers (by GPIO).

		 *

		 * This driver supports only configuration where

		 * BD71828_REG_LDO5_VOLT_L is used.

			/*

			 * LDO6 only supports enable/disable for all states.

			 * Voltage for LDO6 is fixed.

 SNVS LDO in data-sheet */

			/*

			 * LDO7 only supports single voltage for all states.

			 * voltage can be individually enabled for each state

			 * though => allow setting all states to support

			 * enabling power rail on different states.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regulator driver for STw4810/STw4811 VMMC regulator.

 *

 * Copyright (C) 2013 ST-Ericsson SA

 * Written on behalf of Linaro for ST-Ericsson

 *

 * Author: Linus Walleij <linus.walleij@linaro.org>

 FIXME: look this up */

 First disable the external VMMC if it's active */

 Register VMMC regulator */

/*

 * Texas Instruments SoC Adaptive Body Bias(ABB) Regulator

 *

 * Copyright (C) 2011 Texas Instruments, Inc.

 * Mike Turquette <mturquette@ti.com>

 *

 * Copyright (C) 2012-2013 Texas Instruments, Inc.

 * Andrii Tseglytskyi <andrii.tseglytskyi@ti.com>

 * Nishanth Menon <nm@ti.com>

 *

 * This program is free software; you can redistribute it and/or modify

 * it under the terms of the GNU General Public License version 2 as

 * published by the Free Software Foundation.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether express or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License for more details.

/*

 * ABB LDO operating states:

 * NOMINAL_OPP:	bypasses the ABB LDO

 * FAST_OPP:	sets ABB LDO to Forward Body-Bias

 * SLOW_OPP:	sets ABB LDO to Reverse Body-Bias

/**

 * struct ti_abb_info - ABB information per voltage setting

 * @opp_sel:	one of TI_ABB macro

 * @vset:	(optional) vset value that LDOVBB needs to be overriden with.

 *

 * Array of per voltage entries organized in the same order as regulator_desc's

 * volt_table list. (selector is used to index from this array)

/**

 * struct ti_abb_reg - Register description for ABB block

 * @setup_off:			setup register offset from base

 * @control_off:		control register offset from base

 * @sr2_wtcnt_value_mask:	setup register- sr2_wtcnt_value mask

 * @fbb_sel_mask:		setup register- FBB sel mask

 * @rbb_sel_mask:		setup register- RBB sel mask

 * @sr2_en_mask:		setup register- enable mask

 * @opp_change_mask:		control register - mask to trigger LDOVBB change

 * @opp_sel_mask:		control register - mask for mode to operate

 Setup register fields */

 Control register fields */

/**

 * struct ti_abb - ABB instance data

 * @rdesc:			regulator descriptor

 * @clk:			clock(usually sysclk) supplying ABB block

 * @base:			base address of ABB block

 * @setup_reg:			setup register of ABB block

 * @control_reg:		control register of ABB block

 * @int_base:			interrupt register base address

 * @efuse_base:			(optional) efuse base address for ABB modes

 * @ldo_base:			(optional) LDOVBB vset override base address

 * @regs:			pointer to struct ti_abb_reg for ABB block

 * @txdone_mask:		mask on int_base for tranxdone interrupt

 * @ldovbb_override_mask:	mask to ldo_base for overriding default LDO VBB

 *				vset with value from efuse

 * @ldovbb_vset_mask:		mask to ldo_base for providing the VSET override

 * @info:			array to per voltage ABB configuration

 * @current_info_idx:		current index to info

 * @settling_time:		SoC specific settling time for LDO VBB

/**

 * ti_abb_rmw() - handy wrapper to set specific register bits

 * @mask:	mask for register field

 * @value:	value shifted to mask location and written

 * @reg:	register address

 *

 * Return: final register value (may be unused)

/**

 * ti_abb_check_txdone() - handy wrapper to check ABB tranxdone status

 * @abb:	pointer to the abb instance

 *

 * Return: true or false

/**

 * ti_abb_clear_txdone() - handy wrapper to clear ABB tranxdone status

 * @abb:	pointer to the abb instance

/**

 * ti_abb_wait_tranx() - waits for ABB tranxdone event

 * @dev:	device

 * @abb:	pointer to the abb instance

 *

 * Return: 0 on success or -ETIMEDOUT if the event is not cleared on time.

/**

 * ti_abb_clear_all_txdone() - clears ABB tranxdone event

 * @dev:	device

 * @abb:	pointer to the abb instance

 *

 * Return: 0 on success or -ETIMEDOUT if the event is not cleared on time.

/**

 * ti_abb_program_ldovbb() - program LDOVBB register for override value

 * @dev:	device

 * @abb:	pointer to the abb instance

 * @info:	ABB info to program

 clear up previous values */

/**

 * ti_abb_set_opp() - Setup ABB and LDO VBB for required bias

 * @rdev:	regulator device

 * @abb:	pointer to the abb instance

 * @info:	ABB info to program

 *

 * Return: 0 on success or appropriate error value when fails

 program next state of ABB ldo */

	/*

	 * program LDO VBB vset override if needed for !bypass mode

	 * XXX: Do not switch sequence - for !bypass, LDO override reset *must*

	 * be performed *before* switch to bias mode else VBB glitches.

 Initiate ABB ldo change */

 Wait for ABB LDO to complete transition to new Bias setting */

	/*

	 * Reset LDO VBB vset override bypass mode

	 * XXX: Do not switch sequence - for bypass, LDO override reset *must*

	 * be performed *after* switch to bypass else VBB glitches.

/**

 * ti_abb_set_voltage_sel() - regulator accessor function to set ABB LDO

 * @rdev:	regulator device

 * @sel:	selector to index into required ABB LDO settings (maps to

 *		regulator descriptor's volt_table)

 *

 * Return: 0 on success or appropriate error value when fails

 If we are in the same index as we were, nothing to do here! */

	/*

	 * When Linux kernel is starting up, we are'nt sure of the

	 * Bias configuration that bootloader has configured.

	 * So, we get to know the actual setting the first time

	 * we are asked to transition.

 If data is exactly the same, then just update index, no change */

/**

 * ti_abb_get_voltage_sel() - Regulator accessor to get current ABB LDO setting

 * @rdev:	regulator device

 *

 * Return: 0 on success or appropriate error value when fails

/**

 * ti_abb_init_timings() - setup ABB clock timing for the current platform

 * @dev:	device

 * @abb:	pointer to the abb instance

 *

 * Return: 0 if timing is updated, else returns error result.

 read device tree properties */

 ABB LDO cannot be settle in 0 time */

 ABB LDO cannot be settle in 0 clock cycles */

	/*

	 * SR2_WTCNT_VALUE is the settling time for the ABB ldo after a

	 * transition and must be programmed with the correct time at boot.

	 * The value programmed into the register is the number of SYS_CLK

	 * clock cycles that match a given wall time profiled for the ldo.

	 * This value depends on:

	 * settling time of ldo in micro-seconds (varies per OMAP family)

	 * # of clock cycles per SYS_CLK period (varies per OMAP family)

	 * the SYS_CLK frequency in MHz (varies per board)

	 * The formula is:

	 *

	 *                      ldo settling time (in micro-seconds)

	 * SR2_WTCNT_VALUE = ------------------------------------------

	 *                   (# system clock cycles) * (sys_clk period)

	 *

	 * Put another way:

	 *

	 * SR2_WTCNT_VALUE = settling time / (# SYS_CLK cycles / SYS_CLK rate))

	 *

	 * To avoid dividing by zero multiply both "# clock cycles" and

	 * "settling time" by 10 such that the final result is the one we want.

 Convert SYS_CLK rate to MHz & prevent divide by zero */

 Calculate cycle rate */

 Calulate SR2_WTCNT_VALUE */

/**

 * ti_abb_init_table() - Initialize ABB table from device tree

 * @dev:	device

 * @abb:	pointer to the abb instance

 * @rinit_data:	regulator initdata

 *

 * Return: 0 on success or appropriate error value when fails

	/*

	 * Each abb_info is a set of n-tuple, where n is num_values, consisting

	 * of voltage and a set of detection logic for ABB information for that

	 * voltage to apply.

 We do not know where the OPP voltage is at the moment */

 NOTE: num_values should equal to entries picked up here */

 Find min/max for voltage set */

 Ignore invalid data, but warn to help cleanup */

 Use ABB recommendation from Efuse */

 Use recommended Vset bits from Efuse */

 Valid values */

 Setup the min/max voltage constraints from the supported list */

 Default ABB block offsets, IF this changes in future, create new one */

 WARNING: registers are wrongly documented in TRM */

/**

 * ti_abb_probe() - Initialize an ABB ldo instance

 * @pdev: ABB platform device

 *

 * Initializes an individual ABB LDO for required Body-Bias. ABB is used to

 * addional bias supply to SoC modules for power savings or mandatory stability

 * configuration at certain Operating Performance Points(OPPs).

 *

 * Return: 0 on success or appropriate error value when fails

 We do not expect this to happen */

 Map ABB resources */

 Map Optional resources */

	/*

	 * We may have shared efuse register offsets which are read-only

	 * between domains

 IF ldo_base is set, the following are mandatory */

 init ABB opp_sel table */

 init ABB timing */

 Enable the ldo if not already done by bootloader */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * twl-regulator.c -- support regulators in twl4030/twl6030 family chips

 *

 * Copyright (C) 2008 David Brownell

/*

 * The TWL4030/TW5030/TPS659x0 family chips include power management, a

 * USB OTG transceiver, an RTC, ADC, PWM, and lots more.  Some versions

 * include an audio codec, battery charger, and more voltage regulators.

 * These chips are often used in OMAP-based systems.

 *

 * This driver implements software-based resource control for various

 * voltage regulators.  This is usually augmented with state machine

 * based control.

 start of regulator's PM_RECEIVER control register bank */

 twl resource ID, for resource control state machine */

 voltage in mV = table[VSEL]; table_len must be a power-of-two */

 State REMAP default configuration */

 used by regulator core */

 chip specific features */

 data passed from board for external get/set voltage */

/* LDO control registers ... offset is from the base of its register bank.

 * The first three registers of all power resource banks help hardware to

 * manage the various resource groups.

 Common offset in TWL4030/6030 */

 TWL4030 register offsets */

 LDO control */

 TWL6030 register offsets */

----------------------------------------------------------------------*/

 generic power resource operations, which work on all regulators */

/*

 * Enable/disable regulators by joining/leaving the P1 (processor) group.

 * We assume nobody else is updating the DEV_GRP registers.

 definition for 4030 family */

 "peripherals" */

 secondary processor, modem, etc */

 CPU/Linux */

 definition for 6030 family */

 secondary processor, modem, etc */

 "peripherals" */

 CPU/Linux */

 Wait until buffer empty/ready to send a word on power bus. */

 Send a word over the powerbus */

 save powerbus configuration */

 Enable i2c access to powerbus */

 Restore powerbus configuration */

 assume state != WARM_RESET; we'd not be running...  */

 We can only set the mode through state machine commands... */

----------------------------------------------------------------------*/

/*

 * Support for adjustable-voltage LDOs uses a four bit (or less) voltage

 * select field in its control register.   We use tables indexed by VSEL

 * to record voltages in milliVolts.  (Accuracy is about three percent.)

 *

 * Note that VSEL values for VAUX2 changed in twl5030 and newer silicon;

 * currently handled by listing two slightly different VAUX2 regulators,

 * only one of which will be configured.

 *

 * VSEL values documented as "TI cannot support these values" are flagged

 * in these tables as UNSUP() values; we normally won't assign them.

 *

 * VAUX3 at 3V is incorrectly listed in some TI manuals as unsupported.

 * TI are revising the twl5030/tps659x0 specs to support that 3.0V setting.

 600mV to 1450mV in 12.5 mV steps */

 600mV to 1450mV in 12.5 mV steps, everything above = 1500mV */

----------------------------------------------------------------------*/

----------------------------------------------------------------------*/

/*

 * We list regulators here if systems need some level of

 * software control over them after boot.

 VUSBCP is managed *only* by the USB subchip */

	/* Constrain board-specific capabilities according to what

	 * this driver and the chip itself can actually do.

	/* NOTE:  many regulators support short-circuit IRQs (presentable

	 * as REGULATOR_OVER_CURRENT notifications?) configured via:

	 *  - SC_CONFIG

	 *  - SC_DETECT1 (vintana2, vmmc1/2, vaux1/2/3/4)

	 *  - SC_DETECT2 (vusb, vdac, vio, vdd1/2, vpll2)

	 *  - IT_CONFIG

	/* NOTE: short name, to work around driver model truncation of

	 * "twl_regulator.12" (and friends) to "twl_regulator.1".

 SPDX-License-Identifier: GPL-2.0



 Regulator Driver for Freescale MC13xxx PMIC



 Copyright 2010 Yong Shen <yong.shen@linaro.org>



 Based on mc13783 regulator driver :

 Copyright (C) 2008 Sascha Hauer, Pengutronix <s.hauer@pengutronix.de>

 Copyright 2009 Alberto Panizzo <maramaopercheseimorto@gmail.com>



 Regs infos taken from mc13xxx drivers from freescale and mc13xxx.pdf file

 from freescale

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0+

 bootloader will on, driver only reconfigure enable to all output high */

 initialize volt_sel variable */

 SPDX-License-Identifier: GPL-2.0+



 max77686.c - Regulator driver for the Maxim 77686



 Copyright (C) 2012 Samsung Electronics

 Chiwoong Byun <woong.byun@samsung.com>

 Jonghwa Lee <jonghwa3.lee@samsung.com>



 This driver is based on max8997.c

 us */

 us */

 uV/us */

 uV/us */

/*

 * Value for configuring buck[89] and LDO{20,21,22} as GPIO control.

 * It is the same as 'off' for other regulators.

/*

 * Values used for configuring LDOs and bucks.

 * Forcing low power mode: LDO1, 3-5, 9, 13, 17-26

/*

 * On/off controlled by PWRREQ:

 *  - LDO2, 6-8, 10-12, 14-16

 *  - buck[1234]

 Low power mode controlled by PWRREQ: All LDOs */

 Forcing low power mode: buck[234] */

 Array indexed by regulator id */

 all LDOs */

/*

 * When regulator is configured for GPIO control then it

 * replaces "normal" mode. Any change from low power mode to normal

 * should actually change to GPIO control.

 * Map normal mode to proper value for such regulators.

 Some BUCKs and LDOs supports Normal[ON/OFF] mode during suspend */

 Some LDOs supports [LPM/Normal]ON mode during suspend state */

 BUCK[5-9] doesn't support this feature */

 ON in LP Mode */

 ON in Normal Mode */

 Some LDOs supports LPM-ON/OFF/Normal-ON mode during suspend state */

 switch off */

 ON in LP Mode */

 ON in Normal Mode */

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2017 MediaTek Inc.

 Author: Chenglin Xu <chenglin.xu@mediatek.com>

 PMIC Registers */

/*

 * mt6380 regulators' information

 *

 * @desc: standard fields of regulator description

 * @vselon_reg: Register sections for hardware control mode of bucks

 * @modeset_reg: Register for controlling the buck/LDO control mode

 * @modeset_mask: Mask for controlling the buck/LDO control mode

 The array is indexed by id(MT6380_ID_XXX) */

 sentinel */ },

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regulator driver for National Semiconductors LP3972 PMIC chip

 *

 * Based on lp3971.c

 LP3972 Control Registers */

/* System control register 1 initial value,

 LDO output enable mask */

/*	LDO voltage control registers shift:

	LP3972_LDO1 -> 0, LP3972_LDO2 -> 4

	LP3972_LDO3 -> 0, LP3972_LDO4 -> 4

	LP3972_LDO5 -> 0

	/*

	 * LDO1 and LDO5 support voltage control by either target voltage1

	 * or target voltage2 register.

	 * We use target voltage1 register for LDO1 and LDO5 in this driver.

	 * We need to update voltage change control register(0x20) to enable

	 * LDO1 and LDO5 to change to their programmed target values.

 Instantiate the regulators */

 Detect LP3972 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015, Sony Mobile Communications AB.

 * Copyright (c) 2012-2013, The Linux Foundation. All rights reserved.

 "swen" */

 "uv" */

 "ma" */

 l4 is unaccessible on PM660 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regulator driver for Ricoh RN5T618 PMIC

 *

 * Copyright (C) 2014 Beniamino Galvani <b.galvani@gmail.com>

 DCDC */

 LDO */

 LDO RTC */

 DCDC */

 LDO */

 LDO RTC */

 DCDC */

 LDO */

 LDO RTC */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regulators driver for Maxim max8925

 *

 * Copyright (C) 2009 Marvell International Ltd.

 *      Haojian Zhuang <haojian.zhuang@marvell.com>

 SDCTL1 bit5 */

 SDV1 bit 6 */

 bit definitions in LDO control registers */

 Power U/D by i2c */

 Power U/D sequence mask */

 Power U/D sequence offset */

 Enable by i2c */

 Enable mask by i2c */

 Enable offset by i2c */

 SPDX-License-Identifier: GPL-2.0-or-later



 max77826-regulator.c  - regulator driver for Maxim MAX77826



 Author: Iskren Chernev <iskren.chernev@gmail.com>

 0x0E - 0x0F: Reserved */

 0x15 - 0x1F: Reserved */

 0x2F: Reserved */

 0x34 - 0x3F: Reserved */

 0x42 - 0xCE: Reserved */

 values in mV */

 for LDO1-3 */

 for LDO4-15 */

 for BUCK */

 for BUCKBOOST */

 sentinel */ }

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0



 Regulators driver for Dialog Semiconductor DA903x



 Copyright (C) 2006-2008 Marvell International Ltd.

 Copyright (C) 2008 Compulab Ltd.

 DA9030 Registers */

 DA9034 Registers */

 DA9035 Registers. DA9034 Registers are comptabile to DA9035. */

 DA9030/DA9034 common operations */

 DA9030 specific operations */

 have to set UNLOCK bits */

 write twice */

 DA9034 specific operations */

 NOTE: this is dedicated for the insane DA9030 LDO14 */

 NOTE: this is dedicated for the DA9030 LDO1 and LDO15 that have locks  */

 NOTE: this is dedicated for the insane LDO12 */

 DA9030 */

 fixed @2.1V */

 DA9034 */

 fixed @3.1V */

 DA9035 */

 Workaround for the weird LDO12 voltage setting */

/*

 * Regulator driver for TPS6524x PMIC

 *

 * Copyright (C) 2010 Texas Instruments

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License as

 * published by the Free Software Foundation version 2.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any kind,

 * whether express or implied; without even the implied warranty of

 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

 * General Public License for more details.

 0 = 400-800, 1 = 900-1500 */

 SPDX-License-Identifier: GPL-2.0+

 Wait for I2C can be accessed */

 HW re-enable, disable cache only and sync regcache here */

 Mark the regcache as dirty and cache only before HW disabled */

 Ensure the selected setting is still in range */

 If significant bit is over 8, two byte access, others one */

 Before regmap register, configure HW enable to make I2C accessible */

 Wait for I2C can be accessed */

	/*

	 * keep in shutdown mode to minimize the current consumption

	 * and also mark regcache as dirty

 Unmask all events before IRQ registered */

	/*

	 * When system suspend, disable irq to prevent interrupt trigger

	 * during I2C bus suspend

 Enable irq after I2C bus already resume */

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2014 MediaTek Inc.

 Author: Flora Fu <flora.fu@mediatek.com>

/*

 * MT6397 regulators' information

 *

 * @desc: standard fields of regulator description.

 * @qi: Mask for query enable signal status of regulators

 * @vselon_reg: Register sections for hardware control mode of bucks

 * @vselctrl_reg: Register for controlling the buck control mode.

 * @vselctrl_mask: Mask for query buck's voltage control mode.

 The array is indexed by id(MT6397_ID_XXX) */

 Query buck controller to select activated voltage register part */

 Read PMIC chip revision to update constraints and voltage table */

 sentinel */ },

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0



 Regulator Driver for Freescale MC13783 PMIC



 Copyright 2010 Yong Shen <yong.shen@linaro.org>

 Copyright (C) 2008 Sascha Hauer, Pengutronix <s.hauer@pengutronix.de>

 Copyright 2009 Alberto Panizzo <maramaopercheseimorto@gmail.com>

 Enable does not exist for SW1A */

 Enable does not exist for SW1B */

 Enable does not exist for SW2A */

 Enable does not exist for SW2B */

 Voltage Values */

 Update the stored state for Power Gates. */

 Construct the new register value */

 Overwrite the PWGTxEN with the stored version */

 Power Gate enable value is 0 */

 Power Gate disable value is 1 */

	/* Power Gates state is stored in powermisc_pwgt_state

 SPDX-License-Identifier: GPL-2.0+



 wm8994-regulator.c  --  Regulator driver for the WM8994



 Copyright 2009 Wolfson Microelectronics PLC.



 Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

	/*

	 * Look up LDO enable GPIO from the parent device node, we don't

	 * use devm because the regulator core will free the GPIO

 Use default constraints if none set up */

	/*

	 * At this point the GPIO descriptor is handled over to the

	 * regulator core and we need not worry about it on the

	 * error path.

 Module information */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * act8865-regulator.c - Voltage regulation for active-semi ACT88xx PMUs

 *

 * http://www.active-semi.com/products/power-management-units/act88xx/

 *

 * Copyright (C) 2013 Atmel Corporation

/*

 * ACT8600 Global Register Map.

/*

 * ACT8846 Global Register Map.

/*

 * ACT8865 Global Register Map.

/*

 * Field Definitions.

 ON - [7] */

 DIS - [6] */

 VSET - [5:0] */

 ON - [6] */

 SUDCDC VSET - [7:0] */

/*

 * ACT8865 voltage number

	/*

	 * Ask the PMIC to enable/disable this output when entering hibernate

	 * mode.

 Finally register devices */

 Unlock expert registers for ACT8865. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * devres.c  --  Voltage/Current Regulator framework devres implementation.

 *

 * Copyright 2013 Linaro Ltd

/**

 * devm_regulator_get - Resource managed regulator_get()

 * @dev: device to supply

 * @id:  supply name or regulator ID.

 *

 * Managed regulator_get(). Regulators returned from this function are

 * automatically regulator_put() on driver detach. See regulator_get() for more

 * information.

/**

 * devm_regulator_get_exclusive - Resource managed regulator_get_exclusive()

 * @dev: device to supply

 * @id:  supply name or regulator ID.

 *

 * Managed regulator_get_exclusive(). Regulators returned from this function

 * are automatically regulator_put() on driver detach. See regulator_get() for

 * more information.

/**

 * devm_regulator_get_optional - Resource managed regulator_get_optional()

 * @dev: device to supply

 * @id:  supply name or regulator ID.

 *

 * Managed regulator_get_optional(). Regulators returned from this

 * function are automatically regulator_put() on driver detach. See

 * regulator_get_optional() for more information.

/**

 * devm_regulator_put - Resource managed regulator_put()

 * @regulator: regulator to free

 *

 * Deallocate a regulator allocated with devm_regulator_get(). Normally

 * this function will not need to be called and the resource management

 * code will ensure that the resource is freed.

/**

 * devm_regulator_bulk_get - managed get multiple regulator consumers

 *

 * @dev:           device to supply

 * @num_consumers: number of consumers to register

 * @consumers:     configuration of consumers; clients are stored here.

 *

 * @return 0 on success, an errno on failure.

 *

 * This helper function allows drivers to get several regulator

 * consumers in one operation with management, the regulators will

 * automatically be freed when the device is unbound.  If any of the

 * regulators cannot be acquired then any regulators that were

 * allocated will be freed before returning to the caller.

/**

 * devm_regulator_register - Resource managed regulator_register()

 * @dev:            device to supply

 * @regulator_desc: regulator to register

 * @config:         runtime configuration for regulator

 *

 * Called by regulator drivers to register a regulator.  Returns a

 * valid pointer to struct regulator_dev on success or an ERR_PTR() on

 * error.  The regulator will automatically be released when the device

 * is unbound.

/**

 * devm_regulator_register_supply_alias - Resource managed

 * regulator_register_supply_alias()

 *

 * @dev:       device to supply

 * @id:        supply name or regulator ID

 * @alias_dev: device that should be used to lookup the supply

 * @alias_id:  supply name or regulator ID that should be used to lookup the

 * supply

 *

 * The supply alias will automatically be unregistered when the source

 * device is unbound.

/**

 * devm_regulator_bulk_register_supply_alias - Managed register

 * multiple aliases

 *

 * @dev:       device to supply

 * @id:        list of supply names or regulator IDs

 * @alias_dev: device that should be used to lookup the supply

 * @alias_id:  list of supply names or regulator IDs that should be used to

 *             lookup the supply

 * @num_id:    number of aliases to register

 *

 * @return 0 on success, an errno on failure.

 *

 * This helper function allows drivers to register several supply

 * aliases in one operation, the aliases will be automatically

 * unregisters when the source device is unbound.  If any of the

 * aliases cannot be registered any aliases that were registered

 * will be removed before returning to the caller.

/**

 * devm_regulator_register_notifier - Resource managed

 * regulator_register_notifier

 *

 * @regulator: regulator source

 * @nb:        notifier block

 *

 * The notifier will be registers under the consumer device and be

 * automatically be unregistered when the source device is unbound.

/**

 * devm_regulator_unregister_notifier - Resource managed

 * regulator_unregister_notifier()

 *

 * @regulator: regulator source

 * @nb:        notifier block

 *

 * Unregister a notifier registered with devm_regulator_register_notifier().

 * Normally this function will not need to be called and the resource

 * management code will ensure that the resource is freed.

/**

 * devm_regulator_irq_helper - resource managed registration of IRQ based

 * regulator event/error notifier

 *

 * @dev:		device to which lifetime the helper's lifetime is

 *			bound.

 * @d:			IRQ helper descriptor.

 * @irq:		IRQ used to inform events/errors to be notified.

 * @irq_flags:		Extra IRQ flags to be OR'ed with the default

 *			IRQF_ONESHOT when requesting the (threaded) irq.

 * @common_errs:	Errors which can be flagged by this IRQ for all rdevs.

 *			When IRQ is re-enabled these errors will be cleared

 *			from all associated regulators

 * @per_rdev_errs:	Optional error flag array describing errors specific

 *			for only some of the regulators. These errors will be

 *			or'ed with common errors. If this is given the array

 *			should contain rdev_amount flags. Can be set to NULL

 *			if there is no regulator specific error flags for this

 *			IRQ.

 * @rdev:		Array of pointers to regulators associated with this

 *			IRQ.

 * @rdev_amount:	Amount of regulators associated with this IRQ.

 *

 * Return: handle to irq_helper or an ERR_PTR() encoded error code.

 SPDX-License-Identifier: GPL-2.0+

/*

 * Copyright (C) 2017 NXP

 * Copyright (C) 2019 Boundary Devices

 * Copyright (C) 2020 Amarula Solutions(India)

 registers */

 regulators */

 VLDOx output: 1.5V to 5.0V */

 Output: 2.1A to 4.5A */

 Output: 0.4V to 1.8V */

 Output: 1.0V to 4.1V */

 Output: 1.8V, 3.0V, or 3.3V */

/*

 * tps65218-regulator.c

 *

 * Regulator driver for TPS65218 PMIC

 *

 * Copyright (C) 2014 Texas Instruments Incorporated - https://www.ti.com/

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License version 2 as

 * published by the Free Software Foundation.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether expressed or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License version 2 for more details.

 Set the voltage based on vsel value and write protect level is 2 */

 Set GO bit for DCDC1/2 to initiate voltage transistion */

 Enable the regulator and password protection is level 1 */

 Disable the regulator and password protection is level 1 */

	/*

	 * Certain revisions of TPS65218 will need to have DCDC3 regulator

	 * enabled always, otherwise an immediate system reboot will occur

	 * during poweroff.

 Operations permitted on DCDC1, DCDC2 */

 Operations permitted on DCDC3, DCDC4 and LDO1 */

 Operations permitted on DCDC5, DCDC6 */

 Allocate memory for strobes */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-only

 Mark regcache as dirty and cache only before HW disabled */

 SPDX-License-Identifier: GPL-2.0+



 pv88080-regulator.c - Regulator device driver for PV88080

 Copyright (C) 2016  Powerventure Semiconductor Ltd.

 PV88080 REGULATOR IDs */

 BUCKs */

 REGS */

 MASKS */

 BUCK1, 2, 3 */

 HVBUCK */

/* Current limits array (in uA) for BUCK1, BUCK2, BUCK3.

 * Entry indexes corresponds to register values.

 BUCK1 */

 BUCK2 */

 BUCK3 */

 HVBUCK */

 BUCK1 */

 BUCK2 */

 BUCK3 */

 HVBUCK */

/*

 * I2C driver interface functions

 Registeration for BUCK1, 2, 3 */

 Registeration for HVBUCK */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) STMicroelectronics 2017

 *

 * Author: Fabrice Gasnier <fabrice.gasnier@st.com>

 STM32 VREFBUF registers */

 STM32 VREFBUF CSR bitfields */

 Matches resp. VRS = 000b, 001b, 010b, 011b */

	/*

	 * Vrefbuf startup time depends on external capacitor: wait here for

	 * VRR to be set. That means output has reached expected value.

	 * ~650us sleep should be enough for caps up to 1.5uF. Use 10ms as

	 * arbitrary timeout.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright 2012 Texas Instruments

 *

 * Author: Milo(Woogyom) Kim <milo.kim@ti.com>

 Registers : LP8720/8725 shared */

 Registers : LP8720 */

 Registers : LP8725 */

 Mask/shift : LP8720/LP8725 shared */

 Mask/shift : LP8720 */

 Addr 00h */

 Addr 07h */

 Addr 08h */

 Mask/shift : LP8725 */

 Addr 00h */

 Addr 09h, 0Bh */

 Addr 0Ch */

 Addr 0Dh */

 PWM mode */

 Default DVS Mode */

 dump registers in regmap-debugfs */

 LP8720/LP8725 shared voltage table for LDOs */

 LP8720 LDO4 voltage table */

 LP8725 LILO(Low Input Low Output) voltage table */

 LP8720 BUCK voltage table */

 external resistor divider */

 LP8725 BUCK voltage table */

 LP8725 BUCK current limit */

 Always set enable GPIO high. */

 Each chip has a different enable delay. */

/*

 * Copyright (C) 2015 Texas Instruments Incorporated - https://www.ti.com/

 *

 * Author: Andrew F. Davis <afd@ti.com>

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License version 2 as

 * published by the Free Software Foundation.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether expressed or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License version 2 for more details.

 *

 * Based on the TPS65912 driver

 Operations permitted on regulators */

 Operations permitted on load switches */

 Check for 25mV step mode */

 Check for decay mode */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (C) 2020 Marek Vasut <marex@denx.de>

 *

 * Based on rpi_touchscreen.c by Eric Anholt <eric@anholt.net>

 I2C registers of the Atmel microcontroller. */

 Wait for nPWRDWN to go low to indicate poweron is done. */

	/* Default to the same orientation as the closed source

	 * firmware used for the panel.  Runtime rotation

	 * configuration will be supported using VC4's plane

	 * orientation bits.

/*

 * I2C driver interface functions

 ver 1 */

 ver 2 */

 SPDX-License-Identifier: GPL-2.0



 SY8824C/SY8824E regulator driver



 Copyright (C) 2019 Synaptics Incorporated



 Author: Jisheng Zhang <jszhang@kernel.org>

 registers */

 Voltage range and step(linear) */

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2021 MediaTek Inc.

/*

 * MT6359 regulators' information

 *

 * @desc: standard fields of regulator description.

 * @status_reg: for query status of regulators.

 * @qi: Mask for query enable signal status of regulators.

 * @modeset_reg: for operating AUTO/PWM mode register.

 * @modeset_mask: MASK for operating modeset register.

 If HW trapping is 0, use VEMC_VOSEL_0 */

 If HW trapping is 1, use VEMC_VOSEL_1 */

 If HW trapping is 0, use VEMC_VOSEL_0 */

 If HW trapping is 1, use VEMC_VOSEL_1 */

 The array is indexed by id(MT6359_ID_XXX) */

 sentinel */ },

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) ST-Ericsson SA 2010

 *

 * Authors: Sundar Iyer <sundar.iyer@stericsson.com> for ST-Ericsson

 *          Bengt Jonsson <bengt.g.jonsson@stericsson.com> for ST-Ericsson

 *          Daniel Willerud <daniel.willerud@stericsson.com> for ST-Ericsson

 *

 * AB8500 peripheral regulators

 *

 * AB8500 supports the following regulators:

 *   VAUX1/2/3, VINTCORE, VTVOUT, VUSB, VAUDIO, VAMIC1/2, VDMIC, VANA

 *

 * AB8505 supports the following regulators:

 *   VAUX1/2/3/4/5/6, VINTCORE, VADC, VUSB, VAUDIO, VAMIC1/2, VDMIC, VANA

 AB8500 regulators */

 AB8505 regulators */

 AB8500 registers */

 AB8505 registers */

 NOTE! PRCMU register */

 NOTE! PRCMU register */

 NOTE! PRCMU register */

 NOTE! PRCMU register */

/**

 * struct ab8500_shared_mode - is used when mode is shared between

 * two regulators.

 * @shared_regulator: pointer to the other sharing regulator

 * @lp_mode_req: low power mode requested by this regulator

/**

 * struct ab8500_regulator_info - ab8500 regulator information

 * @dev: device pointer

 * @desc: regulator description

 * @shared_mode: used when mode is shared between two regulators

 * @load_lp_uA: maximum load in idle (low power) mode

 * @update_bank: bank to control on/off

 * @update_reg: register to control on/off

 * @update_mask: mask to enable/disable and set mode of regulator

 * @update_val: bits holding the regulator current mode

 * @update_val_idle: bits to enable the regulator in idle (low power) mode

 * @update_val_normal: bits to enable the regulator in normal (high power) mode

 * @mode_bank: bank with location of mode register

 * @mode_reg: mode register

 * @mode_mask: mask for setting mode

 * @mode_val_idle: mode setting for low power

 * @mode_val_normal: mode setting for normal power

 * @voltage_bank: bank to control regulator voltage

 * @voltage_reg: register to control regulator voltage

 * @voltage_mask: mask to control regulator voltage

 * @expand_register: 

 voltage tables for the vauxn/vintcore supplies */

 Duplicated in Vaudio and IsoUicc Control register. */

 Other regulator prevent LP mode */

 Need special handling for shared mode */

 Dedicated register for handling mode */

 Mode register same as enable register */

 set the registers for the request */

 AB8500 regulator information */

	/*

	 * Variable Voltage Regulators

	 *   name, min mV, max mV,

	 *   update bank, reg, mask, enable val

	 *   volt bank, reg, mask

	/*

	 * Fixed Voltage Regulators

	 *   name, fixed mV,

	 *   update bank, reg, mask, enable val

	/*

	 * Regulators with fixed voltage and normal/idle modes

 AB8505 regulator information */

	/*

	 * Variable Voltage Regulators

	 *   name, min mV, max mV,

	 *   update bank, reg, mask, enable val

	 *   volt bank, reg, mask

 values for Vaux4Regu register */

 values for Vaux4SEL register */

 values for CtrlVaux5 register */

 values for CtrlVaux6 register */

	/*

	 * Fixed Voltage Regulators

	 *   name, fixed mV,

	 *   update bank, reg, mask, enable val

	/*

	 * Regulators with fixed voltage and normal/idle modes

 AB8500 register init */

	/*

	 * 0x30, VanaRequestCtrl

	 * 0xc0, VextSupply1RequestCtrl

	/*

	 * 0x03, VextSupply2RequestCtrl

	 * 0x0c, VextSupply3RequestCtrl

	 * 0x30, Vaux1RequestCtrl

	 * 0xc0, Vaux2RequestCtrl

	/*

	 * 0x03, Vaux3RequestCtrl

	 * 0x04, SwHPReq

	/*

	 * 0x08, VanaSysClkReq1HPValid

	 * 0x20, Vaux1SysClkReq1HPValid

	 * 0x40, Vaux2SysClkReq1HPValid

	 * 0x80, Vaux3SysClkReq1HPValid

	/*

	 * 0x10, VextSupply1SysClkReq1HPValid

	 * 0x20, VextSupply2SysClkReq1HPValid

	 * 0x40, VextSupply3SysClkReq1HPValid

	/*

	 * 0x08, VanaHwHPReq1Valid

	 * 0x20, Vaux1HwHPReq1Valid

	 * 0x40, Vaux2HwHPReq1Valid

	 * 0x80, Vaux3HwHPReq1Valid

	/*

	 * 0x01, VextSupply1HwHPReq1Valid

	 * 0x02, VextSupply2HwHPReq1Valid

	 * 0x04, VextSupply3HwHPReq1Valid

	/*

	 * 0x08, VanaHwHPReq2Valid

	 * 0x20, Vaux1HwHPReq2Valid

	 * 0x40, Vaux2HwHPReq2Valid

	 * 0x80, Vaux3HwHPReq2Valid

	/*

	 * 0x01, VextSupply1HwHPReq2Valid

	 * 0x02, VextSupply2HwHPReq2Valid

	 * 0x04, VextSupply3HwHPReq2Valid

	/*

	 * 0x20, VanaSwHPReqValid

	 * 0x80, Vaux1SwHPReqValid

	/*

	 * 0x01, Vaux2SwHPReqValid

	 * 0x02, Vaux3SwHPReqValid

	 * 0x04, VextSupply1SwHPReqValid

	 * 0x08, VextSupply2SwHPReqValid

	 * 0x10, VextSupply3SwHPReqValid

	/*

	 * 0x02, SysClkReq2Valid1

	 * 0x04, SysClkReq3Valid1

	 * 0x08, SysClkReq4Valid1

	 * 0x10, SysClkReq5Valid1

	 * 0x20, SysClkReq6Valid1

	 * 0x40, SysClkReq7Valid1

	 * 0x80, SysClkReq8Valid1

	/*

	 * 0x02, SysClkReq2Valid2

	 * 0x04, SysClkReq3Valid2

	 * 0x08, SysClkReq4Valid2

	 * 0x10, SysClkReq5Valid2

	 * 0x20, SysClkReq6Valid2

	 * 0x40, SysClkReq7Valid2

	 * 0x80, SysClkReq8Valid2

	/*

	 * 0x02, VTVoutEna

	 * 0x04, Vintcore12Ena

	 * 0x38, Vintcore12Sel

	 * 0x40, Vintcore12LP

	 * 0x80, VTVoutLP

	/*

	 * 0x02, VaudioEna

	 * 0x04, VdmicEna

	 * 0x08, Vamic1Ena

	 * 0x10, Vamic2Ena

	/*

	 * 0x01, Vamic1_dzout

	 * 0x02, Vamic2_dzout

	/*

	 * 0x03, VpllRegu (NOTE! PRCMU register bits)

	 * 0x0c, VanaRegu

	/*

	 * 0x01, VrefDDREna

	 * 0x02, VrefDDRSleepMode

	/*

	 * 0x03, VextSupply1Regu

	 * 0x0c, VextSupply2Regu

	 * 0x30, VextSupply3Regu

	 * 0x40, ExtSupply2Bypass

	 * 0x80, ExtSupply3Bypass

	/*

	 * 0x03, Vaux1Regu

	 * 0x0c, Vaux2Regu

	/*

	 * 0x03, Vaux3Regu

	/*

	 * 0x0f, Vaux1Sel

	/*

	 * 0x0f, Vaux2Sel

	/*

	 * 0x07, Vaux3Sel

	/*

	 * 0x01, VextSupply12LP

	/*

	 * 0x04, Vaux1Disch

	 * 0x08, Vaux2Disch

	 * 0x10, Vaux3Disch

	 * 0x20, Vintcore12Disch

	 * 0x40, VTVoutDisch

	 * 0x80, VaudioDisch

	/*

	 * 0x02, VanaDisch

	 * 0x04, VdmicPullDownEna

	 * 0x10, VdmicDisch

 AB8505 register init */

	/*

	 * 0x03, VarmRequestCtrl

	 * 0x0c, VsmpsCRequestCtrl

	 * 0x30, VsmpsARequestCtrl

	 * 0xc0, VsmpsBRequestCtrl

	/*

	 * 0x03, VsafeRequestCtrl

	 * 0x0c, VpllRequestCtrl

	 * 0x30, VanaRequestCtrl

	/*

	 * 0x30, Vaux1RequestCtrl

	 * 0xc0, Vaux2RequestCtrl

	/*

	 * 0x03, Vaux3RequestCtrl

	 * 0x04, SwHPReq

	/*

	 * 0x01, VsmpsASysClkReq1HPValid

	 * 0x02, VsmpsBSysClkReq1HPValid

	 * 0x04, VsafeSysClkReq1HPValid

	 * 0x08, VanaSysClkReq1HPValid

	 * 0x10, VpllSysClkReq1HPValid

	 * 0x20, Vaux1SysClkReq1HPValid

	 * 0x40, Vaux2SysClkReq1HPValid

	 * 0x80, Vaux3SysClkReq1HPValid

	/*

	 * 0x01, VsmpsCSysClkReq1HPValid

	 * 0x02, VarmSysClkReq1HPValid

	 * 0x04, VbbSysClkReq1HPValid

	 * 0x08, VsmpsMSysClkReq1HPValid

	/*

	 * 0x01, VsmpsAHwHPReq1Valid

	 * 0x02, VsmpsBHwHPReq1Valid

	 * 0x04, VsafeHwHPReq1Valid

	 * 0x08, VanaHwHPReq1Valid

	 * 0x10, VpllHwHPReq1Valid

	 * 0x20, Vaux1HwHPReq1Valid

	 * 0x40, Vaux2HwHPReq1Valid

	 * 0x80, Vaux3HwHPReq1Valid

	/*

	 * 0x08, VsmpsMHwHPReq1Valid

	/*

	 * 0x01, VsmpsAHwHPReq2Valid

	 * 0x02, VsmpsBHwHPReq2Valid

	 * 0x04, VsafeHwHPReq2Valid

	 * 0x08, VanaHwHPReq2Valid

	 * 0x10, VpllHwHPReq2Valid

	 * 0x20, Vaux1HwHPReq2Valid

	 * 0x40, Vaux2HwHPReq2Valid

	 * 0x80, Vaux3HwHPReq2Valid

	/*

	 * 0x08, VsmpsMHwHPReq2Valid

	/*

	 * 0x01, VsmpsCSwHPReqValid

	 * 0x02, VarmSwHPReqValid

	 * 0x04, VsmpsASwHPReqValid

	 * 0x08, VsmpsBSwHPReqValid

	 * 0x10, VsafeSwHPReqValid

	 * 0x20, VanaSwHPReqValid

	 * 0x40, VpllSwHPReqValid

	 * 0x80, Vaux1SwHPReqValid

	/*

	 * 0x01, Vaux2SwHPReqValid

	 * 0x02, Vaux3SwHPReqValid

	 * 0x20, VsmpsMSwHPReqValid

	/*

	 * 0x02, SysClkReq2Valid1

	 * 0x04, SysClkReq3Valid1

	 * 0x08, SysClkReq4Valid1

	/*

	 * 0x02, SysClkReq2Valid2

	 * 0x04, SysClkReq3Valid2

	 * 0x08, SysClkReq4Valid2

	/*

	 * 0x01, Vaux4SwHPReqValid

	 * 0x02, Vaux4HwHPReq2Valid

	 * 0x04, Vaux4HwHPReq1Valid

	 * 0x08, Vaux4SysClkReq1HPValid

	/*

	 * 0x02, VadcEna

	 * 0x04, VintCore12Ena

	 * 0x38, VintCore12Sel

	 * 0x40, VintCore12LP

	 * 0x80, VadcLP

	/*

	 * 0x02, VaudioEna

	 * 0x04, VdmicEna

	 * 0x08, Vamic1Ena

	 * 0x10, Vamic2Ena

	/*

	 * 0x01, Vamic1_dzout

	 * 0x02, Vamic2_dzout

	/*

	 * 0x03, VsmpsARegu

	 * 0x0c, VsmpsASelCtrl

	 * 0x10, VsmpsAAutoMode

	 * 0x20, VsmpsAPWMMode

	/*

	 * 0x03, VsmpsBRegu

	 * 0x0c, VsmpsBSelCtrl

	 * 0x10, VsmpsBAutoMode

	 * 0x20, VsmpsBPWMMode

	/*

	 * 0x03, VsafeRegu

	 * 0x0c, VsafeSelCtrl

	 * 0x10, VsafeAutoMode

	 * 0x20, VsafePWMMode

	/*

	 * 0x03, VpllRegu (NOTE! PRCMU register bits)

	 * 0x0c, VanaRegu

	/*

	 * 0x03, VextSupply1Regu

	 * 0x0c, VextSupply2Regu

	 * 0x30, VextSupply3Regu

	 * 0x40, ExtSupply2Bypass

	 * 0x80, ExtSupply3Bypass

	/*

	 * 0x03, Vaux1Regu

	 * 0x0c, Vaux2Regu

	/*

	 * 0x0f, Vaux3Regu

	/*

	 * 0x3f, VsmpsASel1

	/*

	 * 0x3f, VsmpsASel2

	/*

	 * 0x3f, VsmpsASel3

	/*

	 * 0x3f, VsmpsBSel1

	/*

	 * 0x3f, VsmpsBSel2

	/*

	 * 0x3f, VsmpsBSel3

	/*

	 * 0x7f, VsafeSel1

	/*

	 * 0x3f, VsafeSel2

	/*

	 * 0x3f, VsafeSel3

	/*

	 * 0x0f, Vaux1Sel

	/*

	 * 0x0f, Vaux2Sel

	/*

	 * 0x07, Vaux3Sel

	 * 0x30, VRF1Sel

	/*

	 * 0x03, Vaux4RequestCtrl

	/*

	 * 0x03, Vaux4Regu

	/*

	 * 0x0f, Vaux4Sel

	/*

	 * 0x04, Vaux1Disch

	 * 0x08, Vaux2Disch

	 * 0x10, Vaux3Disch

	 * 0x20, Vintcore12Disch

	 * 0x40, VTVoutDisch

	 * 0x80, VaudioDisch

	/*

	 * 0x02, VanaDisch

	 * 0x04, VdmicPullDownEna

	 * 0x10, VdmicDisch

	/*

	 * 0x01, Vaux4Disch

	/*

	 * 0x07, Vaux5Sel

	 * 0x08, Vaux5LP

	 * 0x10, Vaux5Ena

	 * 0x20, Vaux5Disch

	 * 0x40, Vaux5DisSfst

	 * 0x80, Vaux5DisPulld

	/*

	 * 0x07, Vaux6Sel

	 * 0x08, Vaux6LP

	 * 0x10, Vaux6Ena

	 * 0x80, Vaux6DisPulld

 assign per-regulator data */

 fix for hardware before ab8500v2.0 */

 register regulator with framework */

 SPDX-License-Identifier: GPL-2.0

/*

 * AS3711 PMIC regulator driver, using DCDC Step Down and LDO supplies

 *

 * Copyright (C) 2012 Renesas Electronics Corporation

 * Author: Guennadi Liakhovetski, <g.liakhovetski@gmx.de>

/*

 * The regulator API supports 4 modes of operataion: FAST, NORMAL, IDLE and

 * STANDBY. We map them in the following way to AS3711 SD1-4 DCDC modes:

 * FAST:	sdX_fast=1

 * NORMAL:	low_noise=1

 * IDLE:	low_noise=0

 StepUp output voltage depends on supplying regulator */

/*

 * Regulator driver for LP873X PMIC

 *

 * Copyright (C) 2016 Texas Instruments Incorporated - https://www.ti.com/

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public License version 2 as

 * published by the Free Software Foundation.

 *

 * This program is distributed "as is" WITHOUT ANY WARRANTY of any

 * kind, whether expressed or implied; without even the implied warranty

 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 * GNU General Public License version 2 for more details.

 LP873X BUCK current limit */

 Operations permitted on BUCK0, BUCK1 */

 Operations permitted on LDO0 and LDO1 */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2020 MediaTek Inc.

/*

 * DVFSRC regulators' information

 *

 * @desc: standard fields of regulator description.

 * @voltage_selector:  Selector used for get_voltage_sel() and

 *			   set_voltage_sel() callbacks

/*

 * MTK DVFSRC regulators' init data

 *

 * @size: num of regulators

 * @regulator_info: regulator info.

 sentinel */

 SPDX-License-Identifier: GPL-2.0



 Linear Technology LTC3589,LTC3589-1 regulator support



 Copyright (c) 2014 Philipp Zabel <p.zabel@pengutronix.de>, Pengutronix

 DTV2 register follows right after the corresponding DTV1 register */

 VCCR reference selects are right next to the VCCR go bits */

 Select DTV2 */

 SW1, SW2, SW3, LDO2 */

 BB_OUT, LDO3 */

 LDO1 */

 LDO4 */

 Parse feedback voltage dividers. LDO3 and LDO4 don't have them */

 Clear warning condition */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * kernel API

 *

 * Copyright (C) 2005-2009   Rodolfo Giometti <giometti@linux.it>

/*

 * Local functions

/*

 * Exported functions

/* pps_register_source - add a PPS source in the system

 * @info: the PPS info struct

 * @default_params: the default PPS parameters of the new source

 *

 * This function is used to add a new PPS source in the system. The new

 * source is described by info's fields and it will have, as default PPS

 * parameters, the ones specified into default_params.

 *

 * The function returns, in case of success, the PPS device. Otherwise

 * ERR_PTR(errno).

 Sanity checks */

 Allocate memory for the new PPS source struct */

	/* These initializations must be done before calling idr_alloc()

	 * in order to avoid reces into pps_event().

 check for default echo function */

 Create the char device */

/* pps_unregister_source - remove a PPS source from the system

 * @pps: the PPS source

 *

 * This function is used to remove a previously registered PPS source from

 * the system.

	/* don't have to kfree(pps) here because it will be done on

/* pps_event - register a PPS event into the system

 * @pps: the PPS device

 * @ts: the event timestamp

 * @event: the event type

 * @data: userdef pointer

 *

 * This function is used by each PPS client in order to register a new

 * PPS event into the system (it's usually called inside an IRQ handler).

 *

 * If an echo function is associated with the PPS device it will be called

 * as:

 *	pps->info.echo(pps, event, data);

 check event type */

 Must call the echo function? */

 Check the event */

 We have to add an offset? */

 Save the time stamp */

 We have to add an offset? */

 Save the time stamp */

 Wake up if captured something */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PPS core file

 *

 * Copyright (C) 2005-2009   Rodolfo Giometti <giometti@linux.it>

/*

 * Local variables

/*

 * Char device methods

 Manage the timeout */

 Check for pending signals */

 Get the current parameters */

 Check the capabilities */

 Check for supported capabilities */

 Save the new parameters */

 Restore the read only parameters */

 section 3.3 of RFC 2783 interpreted */

		/*

		 * Clear unused fields of pps_kparams to avoid leaking

		 * uninitialized data of the PPS_SETPARAMS caller via

		 * PPS_GETPARAMS

 Return the fetched timestamp */

 Check the capabilities */

 Check for supported capabilities */

 Validate parameters roughly */

 Return the fetched timestamp */

/*

 * Char device stuff

 Now we can release the ID for re-use */

	/*

	 * Get new ID for the new PPS source.  After idr_alloc() calling

	 * the new source will be freely available into the kernel.

 Override the release function with our own */

/*

 * Look up a pps device by magic cookie.

 * The cookie is usually a pointer to some enclosing device, but this

 * code doesn't care; you should never be dereferencing it.

 *

 * This is a bit of a kludge that is currently used only by the PPS

 * serial line discipline.  It may need to be tweaked when a second user

 * is found.

 *

 * There is no function interface for setting the lookup_cookie field.

 * It's initialized to NULL when the pps device is created, and if a

 * client wants to use it, just fill it in afterward.

 *

 * The cookie is automatically set to NULL in pps_unregister_source()

 * so that it will not be used again, even if the pps device cannot

 * be removed from the idr due to pending references holding the minor

 * number in use.

/*

 * Module stuff

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PPS kernel consumer API

 *

 * Copyright (C) 2009-2010   Alexander Gordeev <lasaine@lvk.cs.msu.su>

/*

 * Global variables

 state variables to bind kernel consumer */

 PPS API (RFC 2783): current source and mode for kernel consumer */

 unique pointer to device */

 mode bits for kernel consumer */

/* pps_kc_bind - control PPS kernel consumer binding

 * @pps: the PPS source

 * @bind_args: kernel consumer bind parameters

 *

 * This function is used to bind or unbind PPS kernel consumer according to

 * supplied parameters. Should not be called in interrupt context.

 Check if another consumer is already bound */

/* pps_kc_remove - unbind kernel consumer on PPS source removal

 * @pps: the PPS source

 *

 * This function is used to disable kernel consumer on PPS source removal

 * if this source was bound to PPS kernel consumer. Can be called on any

 * source safely. Should not be called in interrupt context.

/* pps_kc_event - call hardpps() on PPS event

 * @pps: the PPS source

 * @ts: PPS event timestamp

 * @event: PPS event edge

 *

 * This function calls hardpps() when an event from bound PPS source occurs.

 Pass some events to kernel consumer if activated */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PPS sysfs support

 *

 * Copyright (C) 2007-2009   Rodolfo Giometti <giometti@linux.it>

/*

 * Attribute functions

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * pps-ldisc.c -- PPS line discipline

 *

 * Copyright (C) 2008	Rodolfo Giometti <giometti@linux.it>

	/*

	 * This should never fail, but the ldisc locking is very

	 * convoluted, so don't crash just in case.

 Now do the PPS event report */

 Now open the base class N_TTY ldisc */

/*

 * Module stuff

 Inherit the N_TTY's ops */

 Save N_TTY's open()/close() methods */

 Init PPS_TTY data */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * pps_parport.c -- kernel parallel port PPS client

 *

 * Copyright (C) 2009   Alexander Gordeev <lasaine@lvk.cs.msu.su>

/*

 * TODO:

 * implement echo over SEL pin

 module parameters */

 internal per port structure */

 parport device */

 PPS device */

 port clear timeout */

 number of timeouts */

 device number */

 parport interrupt handler */

 first of all we get the time stamp... */

 clear edge capture disabled */

 try capture the clear edge */

	/* We have to disable interrupts here. The idea is to prevent

	 * other interrupts on the same processor to introduce random

	 * lags while polling the port. Reading from IO port is known

	 * to take approximately 1us while other interrupt handlers can

	 * take much more potentially.

	 *

	 * Interrupts won't be disabled for a long time because the

	 * number of polls is limited by clear_wait parameter which is

	 * kept rather low. So it should never be an issue.

 check the signal (no signal means the pulse is lost this time) */

 poll the port until the signal is unset */

 timeout */

 fire assert event */

 fire assert event */

 fire clear event */

 FIXME: oooh, this is ugly! */

 not our port */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * pps-gpio.c -- PPS client driver using GPIO

 *

 * Copyright (C) 2010 Ricardo Martins <rasm@fe.up.pt>

 * Copyright (C) 2011 James Nuss <jamesnuss@nanometrics.ca>

 Info for each registered platform device */

 IRQ used as PPS source */

 PPS source device */

 PPS source information */

 GPIO port descriptors */

 timer to reset echo active state */

 PPS echo active duration */

 timer timeout value in jiffies */

/*

 * Report the PPS event

 Get the time stamp first */

 This function will only be called when an ECHO GPIO is defined */

 add_timer() needs to write into info->echo_timer */

 fire the timer */

 Timer callback to reset the echo pin to the inactive state */

 sanity check on echo_active_ms */

 allocate space for device info */

 GPIO setup */

 IRQ setup */

 initialize PPS specific parts of the bookkeeping data structure. */

 register PPS source */

 register IRQ interrupt handler */

 reset echo pin in any case */

 sentinel */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * pps-ktimer.c -- kernel timer test client

 *

 * Copyright (C) 2005-2006   Rodolfo Giometti <giometti@linux.it>

/*

 * Global variables

/*

 * The kernel timer

 First of all we get the time stamp... */

/*

 * The PPS info struct

/*

 * Module staff

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * pps_gen_parport.c -- kernel parallel port PPS signal generator

 *

 * Copyright (C) 2009   Alexander Gordeev <lasaine@lvk.cs.msu.su>

/*

 * TODO:

 * fix issues when realtime clock is adjusted in a leap

 module parameters */

 set the hrtimer earlier for safety (ns) */

 internal per port structure */

 parport device */

 calibrated port write time (ns) */

 calibrated time between a hrtimer event and the reaction */

 the kernel hrtimer event */

	/* We have to disable interrupts here. The idea is to prevent

	 * other interrupts on the same processor to introduce random

	 * lags while polling the clock. ktime_get_real_ts64() takes <1us on

	 * most machines while other interrupt handlers can take much

	 * more potentially.

	 *

	 * NB: approx time with blocked interrupts =

	 * send_delay + 3 * SAFETY_INTERVAL

 first of all we get the time stamp... */

 check if we are late */

 busy loop until the time is right for an assert edge */

 set the signal */

 busy loop until the time is right for a clear edge */

 unset the signal */

 update calibrated port write time */

 update calibrated hrtimer error */

	/* If the new error value is bigger then the old, use the new

	 * value, if not then slowly move towards the new value. This

	 * way it should be safe in bad conditions and efficient in

	 * good conditions.

 update the hrtimer expire time */

 calibrate port write time */

 we already have a port */

 not our port */

 module staff */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  step_wise.c - A step-by-step Thermal throttling governor

 *

 *  Copyright (C) 2012 Intel Corp

 *  Copyright (C) 2012 Durgadoss R <durgadoss.r@intel.com>

 *

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/*

 * If the temperature is higher than a trip point,

 *    a. if the trend is THERMAL_TREND_RAISING, use higher cooling

 *       state for this trip point

 *    b. if the trend is THERMAL_TREND_DROPPING, do nothing

 *    c. if the trend is THERMAL_TREND_RAISE_FULL, use upper limit

 *       for this trip point

 *    d. if the trend is THERMAL_TREND_DROP_FULL, use lower limit

 *       for this trip point

 * If the temperature is lower than a trip point,

 *    a. if the trend is THERMAL_TREND_RAISING, do nothing

 *    b. if the trend is THERMAL_TREND_DROPPING, use lower cooling

 *       state for this trip point, if the cooling state already

 *       equals lower limit, deactivate the thermal instance

 *    c. if the trend is THERMAL_TREND_RAISE_FULL, do nothing

 *    d. if the trend is THERMAL_TREND_DROP_FULL, use lower limit,

 *       if the cooling state already equals lower limit,

 *       deactivate the thermal instance

	/*

	 * We keep this instance the way it is by default.

	 * Otherwise, we use the current state of the

	 * cdev in use to determine the next_target.

	/*

	 * If value is +1, activate a passive instance.

	 * If value is -1, deactivate a passive instance.

 Activate a passive thermal instance */

 Deactivate a passive thermal instance */

 cdev needs update */

/**

 * step_wise_throttle - throttles devices associated with the given zone

 * @tz: thermal_zone_device

 * @trip: trip point index

 *

 * Throttling Logic: This uses the trend of the thermal zone to throttle.

 * If the thermal zone is 'heating up' this throttles all the cooling

 * devices associated with the zone and its particular trip point, by one

 * step. If the zone is 'cooling down' it brings back the performance of

 * the devices by one step.

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2020 Linaro Limited

 *

 * Author: Daniel Lezcano <daniel.lezcano@linaro.org>

 *

 * Generic netlink for thermal management framework

 Thermal zone */

 Governor(s) */

 Cooling devices */

************************* Sampling encoding *******************************/

*************************** Event encoding *********************************/

/*

 * Generic netlink event encoding

************************** Command encoding ********************************/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * db8500_thermal.c - DB8500 Thermal Management Implementation

 *

 * Copyright (C) 2012 ST-Ericsson

 * Copyright (C) 2012-2019 Linaro Ltd.

 *

 * Authors: Hongbo Zhang, Linus Walleij

/**

 * db8500_thermal_points - the interpolation points that trigger

 * interrupts

	/*

	 * This is where things start to get really bad for the

	 * SoC and the thermal zones should be set up to trigger

	 * critical temperature at 85000 mC so we don't get above

	 * this point.

 Callback to get current temperature */

	/*

	 * TODO: There is no PRCMU interface to get temperature data currently,

	 * so a pseudo temperature is returned , it works for thermal framework

	 * and this will be fixed when the PRCMU interface is available.

 Callback to get temperature changing trend */

	/*

	 * The PRCMU accept absolute temperatures in celsius so divide

	 * down the millicelsius with 1000

 Meaningless for thermal management, ignoring it */

 So we roof out 1 degree over the max point */

 register of thermal sensor and get info from DT */

 Start measuring at the lowest point */

 Resume and start measuring at the lowest point */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Khadas MCU Controlled FAN driver

 *

 * Copyright (C) 2020 BayLibre SAS

 * Author(s): Neil Armstrong <narmstrong@baylibre.com>

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Kirkwood thermal sensor driver

 *

 * Copyright (C) 2012 Nobuhiro Iwamatsu <iwamatsu@nigauri.org>

 Kirkwood Thermal Sensor Dev Structure */

 Valid check */

	/*

	 * Calculate temperature. According to Marvell internal

	 * documentation the formula for this is:

	 * Celsius = (322-reg)/1.3625

 SPDX-License-Identifier: GPL-2.0

/*

 * devfreq_cooling: Thermal cooling device implementation for devices using

 *                  devfreq

 *

 * Copyright (C) 2014-2015 ARM Limited

 *

 * TODO:

 *    - If OPPs are added or removed after devfreq cooling has

 *      registered, the devfreq cooling won't react to it.

/**

 * struct devfreq_cooling_device - Devfreq cooling device

 *		devfreq_cooling_device registered.

 * @cdev:	Pointer to associated thermal cooling device.

 * @devfreq:	Pointer to associated devfreq device.

 * @cooling_state:	Current cooling state.

 * @freq_table:	Pointer to a table with the frequencies sorted in descending

 *		order.  You can index the table by cooling device state

 * @max_state:	It is the last index, that is, one less than the number of the

 *		OPPs

 * @power_ops:	Pointer to devfreq_cooling_power, a more precised model.

 * @res_util:	Resource utilization scaling factor for the power.

 *		It is multiplied by 100 to minimize the error. It is used

 *		for estimation of the power budget instead of using

 *		'utilization' (which is	'busy_time' / 'total_time').

 *		The 'res_util' range is from 100 to power * 100	for the

 *		corresponding 'state'.

 * @capped_state:	index to cooling state with in dynamic power budget

 * @req_max_freq:	PM QoS request for limiting the maximum frequency

 *			of the devfreq device.

 * @em_pd:		Energy Model for the associated Devfreq device

/**

 * get_perf_idx() - get the performance index corresponding to a frequency

 * @em_pd:	Pointer to device's Energy Model

 * @freq:	frequency in kHz

 *

 * Return: the performance index associated with the @freq, or

 * -EINVAL if it wasn't found.

 mV */

 Energy Model frequencies are in kHz */

 Scale power for utilization */

 It is safe to set max in this case */

 Scale for resource utilization */

 Scale dynamic power for utilization */

	/*

	 * Find the first cooling state that is within the power

	 * budget. The EM power table is sorted ascending.

/**

 * devfreq_cooling_gen_tables() - Generate frequency table.

 * @dfc:	Pointer to devfreq cooling device.

 * @num_opps:	Number of OPPs

 *

 * Generate frequency table which holds the frequencies in descending

 * order. That way its indexed by cooling device state. This is for

 * compatibility with drivers which do not register Energy Model.

 *

 * Return: 0 on success, negative error code on failure.

/**

 * of_devfreq_cooling_register_power() - Register devfreq cooling device,

 *                                      with OF and power information.

 * @np:	Pointer to OF device_node.

 * @df:	Pointer to devfreq device.

 * @dfc_power:	Pointer to devfreq_cooling_power.

 *

 * Register a devfreq cooling device.  The available OPPs must be

 * registered on the device.

 *

 * If @dfc_power is provided, the cooling device is registered with the

 * power extensions.  For the power extensions to work correctly,

 * devfreq should use the simple_ondemand governor, other governors

 * are not currently supported.

 Backward compatibility for drivers which do not use IPA */

 max_state is an index, not a counter */

/**

 * of_devfreq_cooling_register() - Register devfreq cooling device,

 *                                with OF information.

 * @np: Pointer to OF device_node.

 * @df: Pointer to devfreq device.

/**

 * devfreq_cooling_register() - Register devfreq cooling device.

 * @df: Pointer to devfreq device.

/**

 * devfreq_cooling_em_register() - Register devfreq cooling device with

 *		power information and automatically register Energy Model (EM)

 * @df:		Pointer to devfreq device.

 * @dfc_power:	Pointer to devfreq_cooling_power.

 *

 * Register a devfreq cooling device and automatically register EM. The

 * available OPPs must be registered for the device.

 *

 * If @dfc_power is provided, the cooling device is registered with the

 * power extensions. It is using the simple Energy Model which requires

 * "dynamic-power-coefficient" a devicetree property. To not break drivers

 * which miss that DT property, the function won't bail out when the EM

 * registration failed. The cooling device will be registered if everything

 * else is OK.

/**

 * devfreq_cooling_unregister() - Unregister devfreq cooling device.

 * @cdev: Pointer to devfreq cooling device to unregister.

 *

 * Unregisters devfreq cooling device and related Energy Model if it was

 * present.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  fair_share.c - A simple weight based Thermal governor

 *

 *  Copyright (C) 2012 Intel Corp

 *  Copyright (C) 2012 Durgadoss R <durgadoss.r@intel.com>

 *

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/**

 * get_trip_level: - obtains the current trip level for a zone

 * @tz:		thermal zone device

	/*

	 * count > 0 only if temperature is greater than first trip

	 * point, in which case, trip_point = count - 1

/**

 * fair_share_throttle - throttles devices associated with the given zone

 * @tz: thermal_zone_device

 * @trip: trip point index

 *

 * Throttling Logic: This uses three parameters to calculate the new

 * throttle state of the cooling devices associated with the given zone.

 *

 * Parameters used for Throttling:

 * P1. max_state: Maximum throttle state exposed by the cooling device.

 * P2. percentage[i]/100:

 *	How 'effective' the 'i'th device is, in cooling the given zone.

 * P3. cur_trip_level/max_no_of_trips:

 *	This describes the extent to which the devices should be throttled.

 *	We do not want to throttle too much when we trip a lower temperature,

 *	whereas the throttling is at full swing if we trip critical levels.

 *	(Heavily assumes the trip points are in ascending order)

 * new_state of cooling device = P3 * P2 * P1

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Generic ADC thermal driver

 *

 * Copyright (C) 2016 NVIDIA CORPORATION. All rights reserved.

 *

 * Author: Laxman Dewangan <ldewangan@nvidia.com>

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright 2020 NXP.

 *

 * Author: Anson Huang <Anson.Huang@nxp.com>

 TMU enable */

 TMU immediate temp */

 negative */

 disable the monitor during initialization */

 enable all the probes for V2 TMU */

 enable the monitor */

 disable TMU */

 SPDX-License-Identifier: GPL-2.0

/*

 *  thermal.c - Generic Thermal Management Sysfs support.

 *

 *  Copyright (C) 2008 Intel Corp

 *  Copyright (C) 2008 Zhang Rui <rui.zhang@intel.com>

 *  Copyright (C) 2008 Sujith Thomas <sujith.thomas@intel.com>

/*

 * Governor section: set of functions to handle thermal governors

 *

 * Functions to help in the life cycle of thermal governors within

 * the thermal core and by the thermal governor code.

/**

 * bind_previous_governor() - bind the previous governor of the thermal zone

 * @tz:		a valid pointer to a struct thermal_zone_device

 * @failed_gov_name:	the name of the governor that failed to register

 *

 * Register the previous governor of the thermal zone after a new

 * governor has failed to be bound.

/**

 * thermal_set_governor() - Switch to another governor

 * @tz:		a valid pointer to a struct thermal_zone_device

 * @new_gov:	pointer to the new governor

 *

 * Change the governor of thermal zone @tz.

 *

 * Return: 0 on success, an error if the new governor's bind_to_tz() failed.

		/*

		 * only thermal zones with specified tz->tzp->governor_name

		 * may run with tz->govenor unset

/*

 * Zone update section: main control loop applied to each zone while monitoring

 *

 * in polling mode. The monitoring is done using a workqueue.

 * Same update may be done on a zone by calling thermal_zone_device_update().

 *

 * An update means:

 * - Non-critical trips will invoke the governor responsible for that zone;

 * - Hot trips will produce a notification to userspace;

 * - Critical trip point will cause a system shutdown.

	/*

	 * poweroff_delay_ms must be a carefully profiled positive value.

	 * Its a must for forced_emergency_poweroff_work to be scheduled.

 If we have not crossed the trip_temp, we do not care. */

 Ignore disabled trip points */

	/*

	 * Alright, we handled this trip successfully.

	 * So, start monitoring again.

 do nothing if mode isn't changing */

/*

 * Device management section: cooling devices, zones devices, and binding

 *

 * Set of functions provided by the thermal core for:

 * - cooling devices lifecycle: registration, unregistration,

 *				binding, and unbinding.

 * - thermal zone devices lifecycle: registration, unregistration,

 *				     binding, and unbinding.

/**

 * thermal_zone_bind_cooling_device() - bind a cooling device to a thermal zone

 * @tz:		pointer to struct thermal_zone_device

 * @trip:	indicates which trip point the cooling devices is

 *		associated with in this thermal zone.

 * @cdev:	pointer to struct thermal_cooling_device

 * @upper:	the Maximum cooling state for this trip point.

 *		THERMAL_NO_LIMIT means no upper limit,

 *		and the cooling device can be in max_state.

 * @lower:	the Minimum cooling state can be used for this trip point.

 *		THERMAL_NO_LIMIT means no lower limit,

 *		and the cooling device can be in cooling state 0.

 * @weight:	The weight of the cooling device to be bound to the

 *		thermal zone. Use THERMAL_WEIGHT_DEFAULT for the

 *		default value

 *

 * This interface function bind a thermal cooling device to the certain trip

 * point of a thermal zone device.

 * This function is usually called in the thermal zone device .bind callback.

 *

 * Return: 0 on success, the proper error value otherwise.

 lower default 0, upper default max_state */

/**

 * thermal_zone_unbind_cooling_device() - unbind a cooling device from a

 *					  thermal zone.

 * @tz:		pointer to a struct thermal_zone_device.

 * @trip:	indicates which trip point the cooling devices is

 *		associated with in this thermal zone.

 * @cdev:	pointer to a struct thermal_cooling_device.

 *

 * This interface function unbind a thermal cooling device from the certain

 * trip point of a thermal zone device.

 * This function is usually called in the thermal zone device .unbind callback.

 *

 * Return: 0 on success, the proper error value otherwise.

/**

 * __thermal_cooling_device_register() - register a new thermal cooling device

 * @np:		a pointer to a device tree node.

 * @type:	the thermal cooling device type.

 * @devdata:	device private data.

 * @ops:		standard thermal cooling devices callbacks.

 *

 * This interface function adds a new thermal cooling device (fan/processor/...)

 * to /sys/class/thermal/ folder as cooling_device[0-*]. It tries to bind itself

 * to all the thermal zone devices registered at the same time.

 * It also gives the opportunity to link the cooling device to a device tree

 * node, so that it can be bound to a thermal zone created out of device tree.

 *

 * Return: a pointer to the created struct thermal_cooling_device or an

 * ERR_PTR. Caller must check return value with IS_ERR*() helpers.

 Add 'this' new cdev to the global cdev list */

 Update binding information for 'this' new cdev */

/**

 * thermal_cooling_device_register() - register a new thermal cooling device

 * @type:	the thermal cooling device type.

 * @devdata:	device private data.

 * @ops:		standard thermal cooling devices callbacks.

 *

 * This interface function adds a new thermal cooling device (fan/processor/...)

 * to /sys/class/thermal/ folder as cooling_device[0-*]. It tries to bind itself

 * to all the thermal zone devices registered at the same time.

 *

 * Return: a pointer to the created struct thermal_cooling_device or an

 * ERR_PTR. Caller must check return value with IS_ERR*() helpers.

/**

 * thermal_of_cooling_device_register() - register an OF thermal cooling device

 * @np:		a pointer to a device tree node.

 * @type:	the thermal cooling device type.

 * @devdata:	device private data.

 * @ops:		standard thermal cooling devices callbacks.

 *

 * This function will register a cooling device with device tree node reference.

 * This interface function adds a new thermal cooling device (fan/processor/...)

 * to /sys/class/thermal/ folder as cooling_device[0-*]. It tries to bind itself

 * to all the thermal zone devices registered at the same time.

 *

 * Return: a pointer to the created struct thermal_cooling_device or an

 * ERR_PTR. Caller must check return value with IS_ERR*() helpers.

/**

 * devm_thermal_of_cooling_device_register() - register an OF thermal cooling

 *					       device

 * @dev:	a valid struct device pointer of a sensor device.

 * @np:		a pointer to a device tree node.

 * @type:	the thermal cooling device type.

 * @devdata:	device private data.

 * @ops:	standard thermal cooling devices callbacks.

 *

 * This function will register a cooling device with device tree node reference.

 * This interface function adds a new thermal cooling device (fan/processor/...)

 * to /sys/class/thermal/ folder as cooling_device[0-*]. It tries to bind itself

 * to all the thermal zone devices registered at the same time.

 *

 * Return: a pointer to the created struct thermal_cooling_device or an

 * ERR_PTR. Caller must check return value with IS_ERR*() helpers.

/**

 * thermal_cooling_device_unregister - removes a thermal cooling device

 * @cdev:	the thermal cooling device to remove.

 *

 * thermal_cooling_device_unregister() must be called when a registered

 * thermal cooling device is no longer needed.

 thermal cooling device not found */

 Unbind all thermal zones associated with 'this' cdev */

 If there is ops->bind, try to use ops->bind */

/**

 * thermal_zone_device_register() - register a new thermal zone device

 * @type:	the thermal zone device type

 * @trips:	the number of trip points the thermal zone support

 * @mask:	a bit string indicating the writeablility of trip points

 * @devdata:	private device data

 * @ops:	standard thermal zone device callbacks

 * @tzp:	thermal zone platform parameters

 * @passive_delay: number of milliseconds to wait between polls when

 *		   performing passive cooling

 * @polling_delay: number of milliseconds to wait between polls when checking

 *		   whether trip points have been crossed (0 for interrupt

 *		   driven systems)

 *

 * This interface function adds a new thermal zone device (sensor) to

 * /sys/class/thermal folder as thermal_zone[0-*]. It tries to bind all the

 * thermal cooling devices registered at the same time.

 * thermal_zone_device_unregister() must be called when the device is no

 * longer needed. The passive cooling depends on the .get_trend() return value.

 *

 * Return: a pointer to the created struct thermal_zone_device or an

 * in case of error, an ERR_PTR. Caller must check return value with

 * IS_ERR*() helpers.

 sys I/F */

 Add nodes that are always present via .groups */

 A new thermal zone needs to be updated anyway. */

 Update 'this' zone's governor information */

 Bind cooling devices for this zone */

 Update the new thermal zone and mark it as already updated. */

/**

 * thermal_zone_device_unregister - removes the registered thermal zone device

 * @tz: the thermal zone device to remove

 thermal zone device not found */

 Unbind all cdevs associated with 'this' thermal zone */

/**

 * thermal_zone_get_zone_by_name() - search for a zone and returns its ref

 * @name: thermal zone name to fetch the temperature

 *

 * When only one zone is found with the passed name, returns a reference to it.

 *

 * Return: On success returns a reference to an unique thermal zone with

 * matching name equals to @name, an ERR_PTR otherwise (-EINVAL for invalid

 * paramenters, -ENODEV for not found and -EEXIST for multiple matches).

 nothing has been found, thus an error code for it */

 Success only when an unique zone is found */

