 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

*******************************************************************************

**

**  Copyright (C) Sistina Software, Inc.  1997-2003  All rights reserved.

**  Copyright (C) 2004-2011 Red Hat, Inc.  All rights reserved.

**

**

*******************************************************************************

	/* dlm_controld will see the uevent, do the necessary group management

 Thread for sending/receiving messages for all lockspace's */

	/* ls_exflags are forced to match among nodes, and we don't

	/* Due backwards compatibility with 3.1 we need to use maximum

	 * possible dlm message size to be sure the message will fit and

	 * not having out of bounds issues. However on sending side 3.2

	 * might send less.

	/*

	 * Once started, dlm_recoverd first looks for ls in lslist, then

	 * initializes ls_in_recovery as locked in "down" mode.  We need

	 * to wait for the wakeup from dlm_recoverd because in_recovery

	 * has to start out in down mode.

 let kobject handle freeing of ls if there's an error */

	/* This uevent triggers dlm_controld in userspace to add us to the

	   group of nodes that are members of this lockspace (managed by the

	   cluster infrastructure.)  Once it's done that, it tells us who the

	   current lockspace members are (via configfs) and then tells the

/* NOTE: We check the lkbidr here rather than the resource table.

   This is because there may be LKBs queued as ASTs that have been unlinked

 remove_lockspace takes ls off lslist */

	/*

	 * Free all lkb's in idr

	/*

	 * Free all rsb's on rsbtbl[] lists

	/*

	 * Free structures on any other lists

 The ls structure will be freed when the kobject is done with */

/*

 * Called when a system has released all its locks and is not going to use the

 * lockspace any longer.  We free everything we're managing for this lockspace.

 * Remaining nodes will go through the recovery process as if we'd died.  The

 * lockspace must continue to function as usual, participating in recoveries,

 * until this returns.

 *

 * Force has 4 possible values:

 * 0 - don't destroy locksapce if it has any LKBs

 * 1 - destroy lockspace if it has remote LKBs but not if it has local LKBs

 * 2 - destroy lockspace regardless of LKBs

 * 3 - destroy lockspace as part of a forced shutdown

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

*******************************************************************************

**

**  Copyright (C) 2005-2009 Red Hat, Inc.  All rights reserved.

**

**

*******************************************************************************

 Print the LVB: */

 Print the locks attached to this resource */

 microseconds since lkb was added to current queue */

	/* id nodeid remid pid xid exflags flags sts grmode rqmode time_us

/*

 * If the buffer is full, seq_printf can be called again, but it

 * does nothing.  So, the these printing routines periodically check

 * seq_has_overflowed to avoid wasting too much time trying to print to

 * a full buffer.

	/*

	 * move to the first rsb in the next non-empty bucket

 zero the entry */

	/*

	 * move to the next rsb in the same bucket

	/*

	 * move to the first rsb in the next non-empty bucket

 zero the entry */

 the dlm_ls */

 the dlm_ls */

 the dlm_ls */

 the dlm_ls */

/*

 * dump lkb's on the ls_waiters list

 format 1 */

 format 2 */

 format 3 */

 format 4 */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

*******************************************************************************

**

**  Copyright (C) Sistina Software, Inc.  1997-2003  All rights reserved.

**  Copyright (C) 2005-2008 Red Hat, Inc.  All rights reserved.

**

**

*******************************************************************************

/* When replying to a status request, a node also sends back its

   configuration values.  The requesting node then checks that the remote

/*

 * low nodeid gathers one slot value at a time from each node.

 * it sets need_slots=0, and saves rf_our_slot returned from each

 * rcom_config.

 *

 * other nodes gather all slot values at once from the low nodeid.

 * they set need_slots=1, and ignore the rf_our_slot returned from each

 * rcom_config.  they use the rf_num_slots returned from the low

 * node's rcom_config.

 we pretend the remote lockspace exists with 0 status */

 the caller looks at rc_result for the remote recovery status */

 Old code would send this special id to trigger a debug dump. */

	/* FIXME: might we have an lvb without DLM_LKF_VALBLK set ?

 needs at least dlm_rcom + rcom_lock */

	/* We send back the same rcom_lock struct we received, but

/* If the lockspace doesn't exist then still send a status message

/*

 * Ignore messages for stage Y before we set

 * recover_status bit for stage X:

 *

 * recover_status = 0

 *

 * dlm_recover_members()

 * - send nothing

 * - recv nothing

 * - ignore NAMES, NAMES_REPLY

 * - ignore LOOKUP, LOOKUP_REPLY

 * - ignore LOCK, LOCK_REPLY

 *

 * recover_status |= NODES

 *

 * dlm_recover_members_wait()

 *

 * dlm_recover_directory()

 * - send NAMES

 * - recv NAMES_REPLY

 * - ignore LOOKUP, LOOKUP_REPLY

 * - ignore LOCK, LOCK_REPLY

 *

 * recover_status |= DIR

 *

 * dlm_recover_directory_wait()

 *

 * dlm_recover_masters()

 * - send LOOKUP

 * - recv LOOKUP_REPLY

 *

 * dlm_recover_locks()

 * - send LOCKS

 * - recv LOCKS_REPLY

 *

 * recover_status |= LOCKS

 *

 * dlm_recover_locks_wait()

 *

 * recover_status |= DONE

/* Called by dlm_recv; corresponds to dlm_receive_message() but special

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

*******************************************************************************

**

**  Copyright (C) Sistina Software, Inc.  1997-2003  All rights reserved.

**  Copyright (C) 2004-2005 Red Hat, Inc.  All rights reserved.

**

**

*******************************************************************************

/*

 * We use the upper 16 bits of the hash value to select the directory node.

 * Low bits are used for distribution of rsb's among hash buckets on each node.

 *

 * To give the exact range wanted (0 to num_nodes-1), we apply a modulus of

 * num_nodes to the hash value.  This value in the desired range is used as an

 * offset into the sorted list of nodeid's to give the particular nodeid.

			/*

			 * pick namelen/name pairs out of received buffer

				/* namelen of 0xFFFFF marks end of names for

				   this node; namelen of 0 marks end of the

				/* The name was found in rsbtbl, but the

				 * master nodeid is different from

				 * memb->nodeid which says it is the master.

				/* The name was found in rsbtbl, and the

				/* The name was not found in rsbtbl and was

/* Find the rsb where we left off (or start again), then send rsb names

   for rsb's we're master of and whose directory node matches the requesting

		/*

		 * The block ends when we can't fit the following in the

		 * remaining buffer space:

		 * namelen (uint16_t) +

		 * name (r->res_length) +

		 * end-of-block record 0x0000 (uint16_t)

 Write end-of-block record */

	/*

	 * If we've reached the end of the list (and there's room) write a

	 * terminating record.

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

*******************************************************************************

**

**  Copyright (C) Sistina Software, Inc.  1997-2003  All rights reserved.

**  Copyright (C) 2004-2005 Red Hat, Inc.  All rights reserved.

**

**

*******************************************************************************

/*

 * Recovery waiting routines: these functions wait for a particular reply from

 * a remote node, or for the remote node to report a certain status.  They need

 * to abort if the lockspace is stopped indicating a node has failed (perhaps

 * the one being waited for).

/*

 * Wait until given function returns non-zero or lockspace is stopped

 * (LS_RECOVERY_STOP set due to failure of a node in ls_nodes).  When another

 * function thinks it could have completed the waited-on task, they should wake

 * up ls_wait_general to get an immediate response rather than waiting for the

 * timeout.  This uses a timeout so it can check periodically if the wait

 * should abort due to node failure (which doesn't cause a wake_up).

 * This should only be called by the dlm_recoverd thread.

/*

 * An efficient way for all nodes to wait for all others to have a certain

 * status.  The node with the lowest nodeid polls all the others for their

 * status (wait_status_all) and all the others poll the node with the low id

 * for its accumulated result (wait_status_low).  When all nodes have set

 * status flag X, then status flag X_ALL will be set on the low nodeid.

 slots array is sparse, slots_size may be > num_slots */

/*

 * The recover_list contains all the rsb's for which we've requested the new

 * master nodeid.  As replies are returned from the resource directories the

 * rsb's are removed from the list.  When the list is empty we're done.

 *

 * The recover_list is later similarly used for all rsb's for which we've sent

 * new lkb's and need to receive new corresponding lkid's.

 *

 * We use the address of the rsb struct as a simple local identifier for the

 * rsb so we can match an rcom reply with the rsb it was sent for.

/* Master recovery: find new master node for rsb's that were

   mastered on nodes that have been removed.



   dlm_recover_masters

   recover_master

   dlm_send_rcom_lookup            ->  receive_rcom_lookup

                                       dlm_dir_lookup

   receive_rcom_lookup_reply       <-

   dlm_recover_master_reply

   set_new_master

   set_master_lkbs

   set_lock_master

/*

 * Set the lock master for all LKBs in a lock queue

 * If we are the new master of the rsb, we may have received new

 * MSTCPY locks from other nodes already which we need to ignore

 * when setting the new nodeid.

/*

 * Propagate the new master nodeid to locks

 * The NEW_MASTER flag tells dlm_recover_locks() which rsb's to consider.

 * The NEW_MASTER2 flag tells recover_lvb() and recover_grant() which

 * rsb's to consider.

/*

 * We do async lookups on rsb's that need new masters.  The rsb's

 * waiting for a lookup reply are kept on the recover_list.

 *

 * Another node recovering the master may have sent us a rcom lookup,

 * and our dlm_master_lookup() set it as the new master, along with

 * NEW_MASTER so that we'll recover it here (this implies dir_nodeid

 * equals our_nodeid below).

		/* set master of lkbs to ourself when is_removed, or to

		   another new master which we set along with NEW_MASTER

/*

 * All MSTCPY locks are purged and rebuilt, even if the master stayed the same.

 * This is necessary because recovery can be started, aborted and restarted,

 * causing the master nodeid to briefly change during the aborted recovery, and

 * change back to the original value in the second recovery.  The MSTCPY locks

 * may or may not have been purged during the aborted recovery.  Another node

 * with an outstanding request in waiters list and a request reply saved in the

 * requestqueue, cannot know whether it should ignore the reply and resend the

 * request, or accept the reply and complete the request.  It must do the

 * former if the remote node purged MSTCPY locks, and it must do the later if

 * the remote node did not.  This is solved by always purging MSTCPY locks, in

 * which case, the request reply would always be ignored and the request

 * resent.

/*

 * Go through local root resources and for each rsb which has a master which

 * has departed, get the new master nodeid from the directory.  The dir will

 * assign mastery to the first node to look up the new master.  That means

 * we'll discover in this lookup if we're the new master of any rsb's.

 *

 * We fire off all the dir lookup requests individually and asynchronously to

 * the correct dir node.

/* Lock recovery: rebuild the process-copy locks we hold on a

   remastered rsb on the new rsb master.



   dlm_recover_locks

   recover_locks

   recover_locks_queue

   dlm_send_rcom_lock              ->  receive_rcom_lock

                                       dlm_recover_master_copy

   receive_rcom_lock_reply         <-

   dlm_recover_process_copy

/*

 * keep a count of the number of lkb's we send to the new master; when we get

 * an equal number of replies then recovery for the rsb is done

/*

 * The lvb needs to be recovered on all master rsb's.  This includes setting

 * the VALNOTVALID flag if necessary, and determining the correct lvb contents

 * based on the lvb's of the locks held on the rsb.

 *

 * RSB_VALNOTVALID is set in two cases:

 *

 * 1. we are master, but not new, and we purged an EX/PW lock held by a

 * failed node (in dlm_recover_purge which set RSB_RECOVER_LVB_INVAL)

 *

 * 2. we are a new master, and there are only NL/CR locks left.

 * (We could probably improve this by only invaliding in this way when

 * the previous master left uncleanly.  VMS docs mention that.)

 *

 * The LVB contents are only considered for changing when this is a new master

 * of the rsb (NEW_MASTER2).  Then, the rsb's lvb is taken from any lkb with

 * mode > CR.  If no lkb's exist with mode above CR, the lvb contents are taken

 * from the lkb with the largest lvb sequence number.

 case 1 above */

	/* we are the new master, so figure out if VALNOTVALID should

 lvb is invalidated if only NL/CR locks remain */

/* All master rsb's flagged RECOVER_CONVERT need to be looked at.  The locks

/* We've become the new master for this rsb and waiting/converting locks may

   need to be granted in dlm_recover_grant() due to locks that may have

			/* recover lvb before granting locks so the updated

 Create a single list of all root rsb's to be used during recovery */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

*******************************************************************************

**

**  Copyright (C) 2005-2011 Red Hat, Inc.  All rights reserved.

**

**

*******************************************************************************

 ls_slots array is sparse, but not rcom_slots */

/* for any nodes that do not support slots, we will not have set memb->slot

   in wait_status_all(), so memb->slot will remain -1, and we will not

 our own memb struct will have slot -1 gen 0 */

 node doesn't support slots */

 node needs a slot assigned */

 node has a slot assigned */

 sanity check, once slot is assigned it shouldn't change */

 fill in slots (offsets) that are used */

 assign new slots from unused offsets */

 FIXME: can use list macro here */

 all nodes revert to weight of 1 if all have weight 0 */

 send a status request to all members just to establish comms connections */

	/* if there is no comms connection with this node

	   or the present comms connection is newer

	   than the one when this member was added, then

	   we consider the node to have failed (versus

	/* previously removed members that we've not finished removing need to

 move departed members from ls_nodes to ls_nodes_gone */

 removed and re-added */

 add new members to ls_nodes */

	/* error -EINTR means that a new recovery action is triggered.

	 * We ignore this recovery action and let run the new one which might

	 * have new member configuration.

	/* new_lockspace() may be waiting to know if the config

	 * is good or bad

/* Userspace guarantees that dlm_ls_stop() has completed on all nodes before

	/*

	 * Prevent dlm_recv from being in the middle of something when we do

	 * the stop.  This includes ensuring dlm_recv isn't processing a

	 * recovery message (rcom), while dlm_recoverd is aborting and

	 * resetting things from an in-progress recovery.  i.e. we want

	 * dlm_recoverd to abort its recovery without worrying about dlm_recv

	 * processing an rcom at the same time.  Stopping dlm_recv also makes

	 * it easy for dlm_receive_message() to check locking stopped and add a

	 * message to the requestqueue without races.

	/*

	 * Abort any recovery that's in progress (see RECOVER_STOP,

	 * dlm_recovery_stopped()) and tell any other threads running in the

	 * dlm to quit any processing (see RUNNING, dlm_locking_stopped()).

	/*

	 * Let dlm_recv run again, now any normal messages will be saved on the

	 * requestqueue for later.

	/*

	 * This in_recovery lock does two things:

	 * 1) Keeps this function from returning until all threads are out

	 *    of locking routines and locking is truly stopped.

	 * 2) Keeps any new requests from being processed until it's unlocked

	 *    when recovery is complete.

	/*

	 * The recoverd suspend/resume makes sure that dlm_recoverd (if

	 * running) has noticed RECOVER_STOP above and quit processing the

	 * previous recovery.

 the lockspace needs to be stopped before it can be started */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

*******************************************************************************

**

**  Copyright (C) Sistina Software, Inc.  1997-2003  All rights reserved.

**  Copyright (C) 2004-2010 Red Hat, Inc.  All rights reserved.

**

**

*******************************************************************************

		/*

		 * Suppress some redundant basts here, do more on removal.

		 * Don't even add a bast if the callback just before it

		 * is a bast for the same mode or a more restrictive mode.

		 * (the addional > PR check is needed for PR/CW inversion)

 oldest undelivered cb is callbacks[0] */

 shift others down */

	/* if cb is a bast, it should be skipped if the blocking mode is

 no callback work exists, shouldn't happen */

 cbs remain, loop should have removed all, shouldn't happen */

 undo kref_get from dlm_add_callback, may cause lkb to be freed */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

*******************************************************************************

**

**  Copyright (C) 2005-2008 Red Hat, Inc.  All rights reserved.

**

**

*******************************************************************************

 does it for others u32 in union as well */

 does it for others u32 in union as well */

/* higher errno values are inconsistent across architectures, so select

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

*******************************************************************************

**

**  Copyright (C) Sistina Software, Inc.  1997-2003  All rights reserved.

**  Copyright (C) 2004-2011 Red Hat, Inc.  All rights reserved.

**

**

*******************************************************************************

/*

 * /config/dlm/<cluster>/spaces/<space>/nodes/<node>/nodeid

 * /config/dlm/<cluster>/spaces/<space>/nodes/<node>/weight

 * /config/dlm/<cluster>/comms/<comm>/nodeid

 * /config/dlm/<cluster>/comms/<comm>/local

 * /config/dlm/<cluster>/comms/<comm>/addr      (write only)

 * /config/dlm/<cluster>/comms/<comm>/addr_list (read only)

 * The <cluster> level is useless, but I haven't figured out how to avoid it.

 TCP */

 SCTP */

 space->members */

 copy of cm->seq when nd->nodeid is set */

 assert list_empty(&sp->members) */

 default weight of 1 if none is set */

 set to 0 once it's been read by dlm_nodeid_list() */

/*

 * Functions for user space to read/write attributes

 Taken from ip6_addr_string() defined in lib/vsprintf.c */

 Derived from SIMPLE_ATTR_SIZE of fs/configfs/file.c */

/*

 * Functions for the dlm to get the info that's been configured

 caller must free mem */

 num 0 is first addr, num 1 is second addr */

 Config file defaults */

 5 sec = 500 centiseconds */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

*******************************************************************************

**

**  Copyright (C) 2005-2010 Red Hat, Inc.  All rights reserved.

**

**

*******************************************************************************

/* Central locking logic has four stages:



   dlm_lock()

   dlm_unlock()



   request_lock(ls, lkb)

   convert_lock(ls, lkb)

   unlock_lock(ls, lkb)

   cancel_lock(ls, lkb)



   _request_lock(r, lkb)

   _convert_lock(r, lkb)

   _unlock_lock(r, lkb)

   _cancel_lock(r, lkb)



   do_request(r, lkb)

   do_convert(r, lkb)

   do_unlock(r, lkb)

   do_cancel(r, lkb)



   Stage 1 (lock, unlock) is mainly about checking input args and

   splitting into one of the four main operations:



       dlm_lock          = request_lock

       dlm_lock+CONVERT  = convert_lock

       dlm_unlock        = unlock_lock

       dlm_unlock+CANCEL = cancel_lock



   Stage 2, xxxx_lock(), just finds and locks the relevant rsb which is

   provided to the next stage.



   Stage 3, _xxxx_lock(), determines if the operation is local or remote.

   When remote, it calls send_xxxx(), when local it calls do_xxxx().



   Stage 4, do_xxxx(), is the guts of the operation.  It manipulates the

   given rsb and lkb and queues callbacks.



   For remote operations, send_xxxx() results in the corresponding do_xxxx()

   function being executed on the remote node.  The connecting send/receive

   calls on local (L) and remote (R) nodes:



   L: send_xxxx()              ->  R: receive_xxxx()

                                   R: do_xxxx()

   L: receive_xxxx_reply()     <-  R: send_xxxx_reply()

/*

 * Lock compatibilty matrix - thanks Steve

 * UN = Unlocked state. Not really a state, used as a flag

 * PD = Padding. Used to make the matrix a nice power of two in size

 * Other states are the same as the VMS DLM.

 * Usage: matrix[grmode+1][rqmode+1]  (although m[rq+1][gr+1] is the same)

 UN NL CR CW PR PW EX PD */

 UN */

 NL */

 CR */

 CW */

 PR */

 PW */

 EX */

 PD */

/*

 * This defines the direction of transfer of LVB data.

 * Granted mode is the row; requested mode is the column.

 * Usage: matrix[grmode+1][rqmode+1]

 * 1 = LVB is returned to the caller

 * 0 = LVB is written to the resource

 * -1 = nothing happens to the LVB

 UN   NL  CR  CW  PR  PW  EX  PD*/

 UN */

 NL */

 CR */

 CW */

 PR */

 PW */

 EX */

 PD */

/*

 * Compatibility matrix for conversions with QUECVT set.

 * Granted mode is the row; requested mode is the column.

 * Usage: matrix[grmode+1][rqmode+1]

 UN NL CR CW PR PW EX PD */

 UN */

 NL */

 CR */

 CW */

 PR */

 PW */

 EX */

 PD */

 Threads cannot use the lockspace while it's being recovered */

	/* if the operation was a cancel, then return -DLM_ECANCEL, if a

/*

 * Basic operations on rsb's and lkb's

/* This is only called to add a reference when the code already holds

/* When all references to the rsb are gone it's transferred to

/* If ls->ls_new_rsb is empty, return -EAGAIN, so the caller can

   unlock any spinlocks, go back and call pre_rsb_struct again.

 Convert the empty list_head to a NULL rb_node for tree usage: */

/*

 * Find rsb in rsbtbl and potentially create/add one

 *

 * Delaying the release of rsb's has a similar benefit to applications keeping

 * NL locks on an rsb, but without the guarantee that the cached master value

 * will still be valid when the rsb is reused.  Apps aren't always smart enough

 * to keep NL locks on an rsb that they may lock again shortly; this can lead

 * to excessive master lookups and removals if we don't delay the release.

 *

 * Searching for an rsb means looking through both the normal list and toss

 * list.  When found on the toss list the rsb is moved to the normal list with

 * ref count of 1; when found on normal list the ref count is incremented.

 *

 * rsb's on the keep list are being used locally and refcounted.

 * rsb's on the toss list are not being used locally, and are not refcounted.

 *

 * The toss list rsb's were either

 * - previously used locally but not any more (were on keep list, then

 *   moved to toss list when last refcount dropped)

 * - created and put on toss list as a directory record for a lookup

 *   (we are the dir node for the res, but are not using the res right now,

 *   but some other node is)

 *

 * The purpose of find_rsb() is to return a refcounted rsb for local use.

 * So, if the given rsb is on the toss list, it is moved to the keep list

 * before being returned.

 *

 * toss_rsb() happens when all local usage of the rsb is done, i.e. no

 * more refcounts exist, so the rsb is moved from the keep list to the

 * toss list.

 *

 * rsb's on both keep and toss lists are used for doing a name to master

 * lookups.  rsb's that are in use locally (and being refcounted) are on

 * the keep list, rsb's that are not in use locally (not refcounted) and

 * only exist for name/master lookups are on the toss list.

 *

 * rsb's on the toss list who's dir_nodeid is not local can have stale

 * name/master mappings.  So, remote requests on such rsb's can potentially

 * return with an error, which means the mapping is stale and needs to

 * be updated with a new lookup.  (The idea behind MASTER UNCERTAIN and

 * first_lkid is to keep only a single outstanding request on an rsb

 * while that rsb has a potentially stale master.)

	/*

	 * flags & R_RECEIVE_RECOVER is from dlm_recover_master_copy, so

	 * from_nodeid has sent us a lock in dlm_recover_locks, believing

	 * we're the new master.  Our local recovery may not have set

	 * res_master_nodeid to our_nodeid yet, so allow either.  Don't

	 * create the rsb; dlm_recover_process_copy() will handle EBADR

	 * by resending.

	 *

	 * If someone sends us a request, we are the dir node, and we do

	 * not find the rsb anywhere, then recreate it.  This happens if

	 * someone sends us a request after we have removed/freed an rsb

	 * from our toss list.  (They sent a request instead of lookup

	 * because they are using an rsb from their toss list.)

	/*

	 * rsb is active, so we can't check master_nodeid without lock_rsb.

	/*

	 * rsb found inactive (master_nodeid may be out of date unless

	 * we are the dir_nodeid or were the master)  No other thread

	 * is using this rsb because it's on the toss list, so we can

	 * look at or update res_master_nodeid without lock_rsb.

		/* our rsb was not master, and another node (not the dir node)

 don't think this should ever happen */

 fix it and go on */

		/* Because we have held no locks on this rsb,

	/*

	 * rsb not found

 want to see how often this happens */

 should never happen */

		/* When we are the dir nodeid, we can set the master

 set_master will send_lookup to dir_nodeid */

/* During recovery, other nodes can send us new MSTCPY locks (from

   dlm_recover_locks) before we've made ourself master (in

	/*

	 * rsb is active, so we can't check master_nodeid without lock_rsb.

	/*

	 * rsb found inactive. No other thread is using this rsb because

	 * it's on the toss list, so we can look at or update

	 * res_master_nodeid without lock_rsb.

		/* our rsb is not master, and another node has sent us a

		/* our rsb is not master, and we are dir; may as well fix it;

	/*

	 * rsb not found

/* we have received a request and found that res_master_nodeid != our_nodeid,

		/* our rsb is not master, and another node (not the dir node)

	   	   has sent us a request.  this is much more common when our

		/* our rsb is not master, but the dir nodeid has sent us a

/*

 * We're the dir node for this res and another node wants to know the

 * master nodeid.  During normal operation (non recovery) this is only

 * called from receive_lookup(); master lookups when the local node is

 * the dir node are done by find_rsb().

 *

 * normal operation, we are the dir node for a resource

 * . _request_lock

 * . set_master

 * . send_lookup

 * . receive_lookup

 * . dlm_master_lookup flags 0

 *

 * recover directory, we are rebuilding dir for all resources

 * . dlm_recover_directory

 * . dlm_rcom_names

 *   remote node sends back the rsb names it is master of and we are dir of

 * . dlm_master_lookup RECOVER_DIR (fix_master 0, from_master 1)

 *   we either create new rsb setting remote node as master, or find existing

 *   rsb and set master to be the remote node.

 *

 * recover masters, we are finding the new master for resources

 * . dlm_recover_masters

 * . recover_master

 * . dlm_send_rcom_lookup

 * . receive_rcom_lookup

 * . dlm_master_lookup RECOVER_MASTER (fix_master 1, from_master 0)

		/* because the rsb is active, we need to lock_rsb before

	/* because the rsb is inactive (on toss list), it's not refcounted

 should not happen, but may as well fix it and carry on */

		/* Recovery uses this function to set a new master when

		   the previous master failed.  Setting NEW_MASTER will

		   force dlm_recover_masters to call recover_master on this

 I don't think we should ever find it on toss list. */

		/* this will happen if from_nodeid became master during

		   a previous recovery cycle, and we aborted the previous

		/* this will happen if recovery happens while we're looking

		/* this can happen when the master sends remove, the dir node

		   finds the rsb on the keep list and ignores the remove,

 the rsb was inactive (on toss list) */

 the rsb was active */

 should never happen */

 See comment for unhold_lkb */

	/* All work is done after the return from kref_put() so we

/* Attaching/detaching lkb's from rsb's is for rsb reference counting.

	/* All work is done after the return from kref_put() so we

/* __put_lkb() is used when an lkb may not have an rsb attached to

 for local/process lkbs, lvbptr points to caller's lksb */

/* This is only called to add a reference when the code already holds

/* This is called when we need to remove a reference and are certain

   it's not the last ref.  e.g. del_lkb is always called between a

   find_lkb/put_lkb and is always the inverse of a previous add_lkb.

 add/remove lkb to rsb's grant/convert/wait queue */

 convention says granted locks kept in order of grmode */

/* add/remove lkb from global waiters list of lkb's waiting for

 for debugging */

/* We clear the RESEND flag because we might be taking an lkb off the waiters

   list as part of process_requestqueue (e.g. a lookup that has an optimized

   request reply on the requestqueue) between dlm_recover_waiters_pre() which

	/* Cancel state was preemptively cleared by a successful convert,

	/* Remove for the convert reply, and premptively remove for the

	   cancel reply.  A convert has been granted while there's still

	   an outstanding cancel on it (the cancel is moot and the result

	   in the cancel reply should be 0).  We preempt the cancel reply

	   because the app gets the convert result and then can follow up

	   with another op, like convert.  This subsequent op would see the

	/* N.B. type of reply may not always correspond to type of original

	/* the force-unlock/cancel has completed and we haven't recvd a reply

	   to the op that was in progress prior to the unlock/cancel; we

	   give up on any reply to the earlier op.  FIXME: not sure when/how

/* Handles situations where we might be processing a "fake" or "stub" reply in

/* If there's an rsb for the same resource being removed, ensure

   that the remove message is sent before the new lookup message.

   It should be rare to need a delay here, but if not, then it may

/*

 * ls_remove_spin protects ls_remove_name and ls_remove_len which are

 * read by other threads in wait_pending_remove.  ls_remove_names

 * and ls_remove_lens are only used by the scan thread, so they do

 * not need protection.

		/* If we're the directory record for this rsb, and

		   we're not the master of it, then we need to wait

		   for the master node to send us a dir remove for

			/* We're the master of this rsb but we're not

			   the directory record, so we need to tell the

	/*

	 * While searching for rsb's to free, we found some that require

	 * remote removal.  We leave them in place and find them again here

	 * so there is a very small gap between removing them from the toss

	 * list and sending the removal.  Keeping this gap small is

	 * important to keep us (the master node) from being out of sync

	 * with the remote dir node for very long.

	 *

	 * From the time the rsb is removed from toss until just after

	 * send_remove, the rsb name is saved in ls_remove_name.  A new

	 * lookup checks this to ensure that a new lookup message for the

	 * same resource name is not sent just before the remove message.

 should never happen */

 block lookup of same name until we've sent remove */

 allow lookup of name again */

/* FIXME: is it safe to look at lkb_exflags, lkb_flags, lkb_timestamp, and

   lkb_lksb_timeout without lock_rsb?  Note: we can't lock timeout_mutex

   and then lock rsb because of lock ordering in add_timeout.  We may need

   to specify some special timeout-related bits in the lkb that are just to

 clear flag so we only warn once */

/* This is only called by dlm_recoverd, and we rely on dlm_ls_stop() stopping

 lkb is master or local copy */

	/* b=1 lvb returned to caller

	   b=0 lvb written to rsb or invalidated

 lkb is process copy (pc) */

/* Manipulate lkb's on rsb's convert/granted/waiting queues

   remove_lock -- used for unlock, removes lkb from granted

   revert_lock -- used for cancel, moves lkb from convert to granted

   grant_lock  -- used for request and convert, adds lkb to granted or

                  moves lkb from convert or waiting to granted



   Each of these is used for master or local copy lkb's.  There is

   also a _pc() variation used to make the corresponding change on

	/* this unhold undoes the original ref from create_lkb()

/* returns: 0 did nothing

	    1 moved lock to granted

		/* this unhold undoes the original ref from create_lkb()

/* called by grant_pending_locks() which means an async grant message must

   be sent to the requesting node in addition to granting the lock if the

/* The special CONVDEADLK, ALTPR and ALTCW flags allow the master to

   change the granted/requested modes.  We're munging things accordingly in

   the process copy.

   CONVDEADLK: our grmode may have been forced down to NL to resolve a

   conversion deadlock

   ALTPR/ALTCW: our rqmode may have been changed to PR or CW to become

 Check if the given lkb conflicts with another lkb on the queue. */

/*

 * "A conversion deadlock arises with a pair of lock requests in the converting

 * queue for one resource.  The granted mode of each lock blocks the requested

 * mode of the other lock."

 *

 * Part 2: if the granted mode of lkb is preventing an earlier lkb in the

 * convert queue from being granted, then deadlk/demote lkb.

 *

 * Example:

 * Granted Queue: empty

 * Convert Queue: NL->EX (first lock)

 *                PR->EX (second lock)

 *

 * The first lock can't be granted because of the granted mode of the second

 * lock and the second lock can't be granted because it's not first in the

 * list.  We either cancel lkb's conversion (PR->EX) and return EDEADLK, or we

 * demote the granted mode of lkb (from PR to NL) if it has the CONVDEADLK

 * flag set and return DEMOTED in the lksb flags.

 *

 * Originally, this function detected conv-deadlk in a more limited scope:

 * - if !modes_compat(lkb1, lkb2) && !modes_compat(lkb2, lkb1), or

 * - if lkb1 was the first entry in the queue (not just earlier), and was

 *   blocked by the granted mode of lkb2, and there was nothing on the

 *   granted queue preventing lkb1 from being granted immediately, i.e.

 *   lkb2 was the only thing preventing lkb1 from being granted.

 *

 * That second condition meant we'd only say there was conv-deadlk if

 * resolving it (by demotion) would lead to the first lock on the convert

 * queue being granted right away.  It allowed conversion deadlocks to exist

 * between locks on the convert queue while they couldn't be granted anyway.

 *

 * Now, we detect and take action on conversion deadlocks immediately when

 * they're created, even if they may not be immediately consequential.  If

 * lkb1 exists anywhere in the convert queue and lkb2 comes in with a granted

 * mode that would prevent lkb1's conversion from being granted, we do a

 * deadlk/demote on lkb2 right away and don't let it onto the convert queue.

 * I think this means that the lkb_is_ahead condition below should always

 * be zero, i.e. there will never be conv-deadlk between two locks that are

 * both already on the convert queue.

/*

 * Return 1 if the lock can be granted, 0 otherwise.

 * Also detect and resolve conversion deadlocks.

 *

 * lkb is the lock to be granted

 *

 * now is 1 if the function is being called in the context of the

 * immediate request, it is 0 if called later, after the lock has been

 * queued.

 *

 * recover is 1 if dlm_recover_grant() is trying to grant conversions

 * after recovery.

 *

 * References are from chapter 6 of "VAXcluster Principles" by Roy Davis

	/*

	 * 6-10: Version 5.4 introduced an option to address the phenomenon of

	 * a new request for a NL mode lock being blocked.

	 *

	 * 6-11: If the optional EXPEDITE flag is used with the new NL mode

	 * request, then it would be granted.  In essence, the use of this flag

	 * tells the Lock Manager to expedite theis request by not considering

	 * what may be in the CONVERTING or WAITING queues...  As of this

	 * writing, the EXPEDITE flag can be used only with new requests for NL

	 * mode locks.  This flag is not valid for conversion requests.

	 *

	 * A shortcut.  Earlier checks return an error if EXPEDITE is used in a

	 * conversion or used with a non-NL requested mode.  We also know an

	 * EXPEDITE request is always granted immediately, so now must always

	 * be 1.  The full condition to grant an expedite request: (now &&

	 * !conv && lkb->rqmode == DLM_LOCK_NL && (flags & EXPEDITE)) can

	 * therefore be shortened to just checking the flag.

	/*

	 * A shortcut. Without this, !queue_conflict(grantqueue, lkb) would be

	 * added to the remaining conditions.

	/*

	 * 6-3: By default, a conversion request is immediately granted if the

	 * requested mode is compatible with the modes of all other granted

	 * locks

	/*

	 * The RECOVER_GRANT flag means dlm_recover_grant() is granting

	 * locks for a recovered rsb, on which lkb's have been rebuilt.

	 * The lkb's may have been rebuilt on the queues in a different

	 * order than they were in on the previous master.  So, granting

	 * queued conversions in order after recovery doesn't make sense

	 * since the order hasn't been preserved anyway.  The new order

	 * could also have created a new "in place" conversion deadlock.

	 * (e.g. old, failed master held granted EX, with PR->EX, NL->EX.

	 * After recovery, there would be no granted locks, and possibly

	 * NL->EX, PR->EX, an in-place conversion deadlock.)  So, after

	 * recovery, grant conversions without considering order.

	/*

	 * 6-5: But the default algorithm for deciding whether to grant or

	 * queue conversion requests does not by itself guarantee that such

	 * requests are serviced on a "first come first serve" basis.  This, in

	 * turn, can lead to a phenomenon known as "indefinate postponement".

	 *

	 * 6-7: This issue is dealt with by using the optional QUECVT flag with

	 * the system service employed to request a lock conversion.  This flag

	 * forces certain conversion requests to be queued, even if they are

	 * compatible with the granted modes of other locks on the same

	 * resource.  Thus, the use of this flag results in conversion requests

	 * being ordered on a "first come first servce" basis.

	 *

	 * DCT: This condition is all about new conversions being able to occur

	 * "in place" while the lock remains on the granted queue (assuming

	 * nothing else conflicts.)  IOW if QUECVT isn't set, a conversion

	 * doesn't _have_ to go onto the convert queue where it's processed in

	 * order.  The "now" variable is necessary to distinguish converts

	 * being received and processed for the first time now, because once a

	 * convert is moved to the conversion queue the condition below applies

	 * requiring fifo granting.

	/*

	 * Even if the convert is compat with all granted locks,

	 * QUECVT forces it behind other locks on the convert queue.

	/*

	 * The NOORDER flag is set to avoid the standard vms rules on grant

	 * order.

	/*

	 * 6-3: Once in that queue [CONVERTING], a conversion request cannot be

	 * granted until all other conversion requests ahead of it are granted

	 * and/or canceled.

	/*

	 * 6-4: By default, a new request is immediately granted only if all

	 * three of the following conditions are satisfied when the request is

	 * issued:

	 * - The queue of ungranted conversion requests for the resource is

	 *   empty.

	 * - The queue of ungranted new requests for the resource is empty.

	 * - The mode of the new request is compatible with the most

	 *   restrictive mode of all granted locks on the resource.

	/*

	 * 6-4: Once a lock request is in the queue of ungranted new requests,

	 * it cannot be granted until the queue of ungranted conversion

	 * requests is empty, all ungranted new requests ahead of it are

	 * granted and/or canceled, and it is compatible with the granted mode

	 * of the most restrictive lock granted on the resource.

	/*

	 * The CONVDEADLK flag is non-standard and tells the dlm to resolve

	 * conversion deadlocks by demoting grmode to NL, otherwise the dlm

	 * cancels one of the locks.

	/*

	 * The ALTPR and ALTCW flags are non-standard and tell the dlm to try

	 * to grant a request in a mode other than the normal rqmode.  It's a

	 * simple way to provide a big optimization to applications that can

	 * use them.

/* Returns the highest requested mode of all blocked conversions; sets

			/*

			 * If DLM_LKB_NODLKWT flag is set and conversion

			 * deadlock is detected, we request blocking AST and

			 * down (or cancel) conversion.

/* cw of 1 means there's a lock with a rqmode of DLM_LOCK_CW that's blocked

   on either the convert or waiting queue.

   high is the largest rqmode of all locks blocked on the convert or

	/*

	 * If there are locks left on the wait/convert queue then send blocking

	 * ASTs to granted locks based on the largest requested mode (high)

	 * found above.

 skip self when sending basts to convertqueue */

/* set_master(r, lkb) -- set the master nodeid of a resource



   The purpose of this function is to set the nodeid field in the given

   lkb using the nodeid field in the given rsb.  If the rsb's nodeid is

   known, it can just be copied to the lkb and the function will return

   0.  If the rsb's nodeid is _not_ known, it needs to be looked up

   before it can be copied to the lkb.



   When the rsb nodeid is being looked up remotely, the initial lkb

   causing the lookup is kept on the ls_waiters list waiting for the

   lookup reply.  Other lkb's waiting for the same rsb lookup are kept

   on the rsb's res_lookup list until the master is verified.



   Return values:

   0: nodeid is set in rsb/lkb and the caller should go ahead and use it

   1: the rsb master is not available and the lkb has been placed on

      a wait queue

		/* This is a somewhat unusual case; find_rsb will usually

		   have set res_master_nodeid when dir nodeid is local, but

		   there are cases where we become the dir node after we've

		   past find_rsb and go through _request_lock again.

		   confirm_master() or process_lookup_list() needs to be

 confirm_master -- confirm (or deny) an rsb's master nodeid */

		/* the remote request failed and won't be retried (it was

		   a NOQUEUE, or has been canceled/unlocked); make a waiting

 check for invalid arg usage */

	/* these args will be copied to the lkb in validate_lock_args,

	   it cannot be done now because when converting locks, fields in

/* when dlm_unlock() sees -EBUSY with CANCEL/FORCEUNLOCK it returns 0

/* note: it's valid for lkb_nodeid/res_nodeid to be -1 when we get here

   because there may be a lookup in progress and it's valid to do

	/* an lkb may still exist even though the lock is EOL'ed due to a

	   cancel, unlock or failed noqueue request; an app can't use these

	/* an lkb may be waiting for an rsb lookup to complete where the

 undoes create_lkb() */

 caller changes -EBUSY to 0 for CANCEL and FORCEUNLOCK */

 cancel not allowed with another cancel/unlock in progress */

 don't let scand try to do a cancel */

 there's nothing to cancel */

 add_to_waiters() will set OVERLAP_CANCEL */

	/* do we need to allow a force-unlock if there's a normal unlock

	   already in progress?  in what conditions could the normal unlock

 don't let scand try to do a cancel */

 add_to_waiters() will set OVERLAP_UNLOCK */

 normal unlock not allowed if there's any op in progress */

 an overlapping op shouldn't blow away exflags from other op */

/*

 * Four stage 4 varieties:

 * do_request(), do_convert(), do_unlock(), do_cancel()

 * These are called on the master node for the given lock and

 * from the central locking logic.

 changing an existing lock may allow others to be granted */

	/* can_be_granted() detected that this lock would block in a conversion

	   deadlock, so we leave it on the granted queue and return EDEADLK in

 it's left on the granted queue */

	/* is_demoted() means the can_be_granted() above set the grmode

	   to NL, and left us on the granted queue.  This auto-demotion

	   (due to CONVDEADLK) might mean other locks, and/or this lock, are

	   now grantable.  We have to try to grant other converting locks

 else fall through and move to convert queue */

 grant_pending_locks also sends basts */

 returns: 0 did nothing, -DLM_ECANCEL canceled lock */

/*

 * Four stage 3 varieties:

 * _request_lock(), _convert_lock(), _unlock_lock(), _cancel_lock()

 add a new lkb to a possibly new rsb, called by requesting process */

 set_master: sets lkb nodeid from r */

 receive_request() calls do_request() on remote node */

		/* for remote locks the request_reply is sent

 change some property of an existing lkb, e.g. mode */

 receive_convert() calls do_convert() on remote node */

		/* for remote locks the convert_reply is sent

 remove an existing lkb from the granted queue */

 receive_unlock() calls do_unlock() on remote node */

		/* for remote locks the unlock_reply is sent

 remove an existing lkb from the convert or wait queue */

 receive_cancel() calls do_cancel() on remote node */

		/* for remote locks the cancel_reply is sent

/*

 * Four stage 2 varieties:

 * request_lock(), convert_lock(), unlock_lock(), cancel_lock()

/*

 * Two stage 1 varieties:  dlm_lock() and dlm_unlock()

/*

 * send/receive routines for remote operations and replies

 *

 * send_args

 * send_common

 * send_request			receive_request

 * send_convert			receive_convert

 * send_unlock			receive_unlock

 * send_cancel			receive_cancel

 * send_grant			receive_grant

 * send_bast			receive_bast

 * send_lookup			receive_lookup

 * send_remove			receive_remove

 *

 * 				send_common_reply

 * receive_request_reply	send_request_reply

 * receive_convert_reply	send_convert_reply

 * receive_unlock_reply		send_unlock_reply

 * receive_cancel_reply		send_cancel_reply

 * receive_lookup_reply		send_lookup_reply

	/* get_buffer gives us a message handle (mh) that we need to

	   pass into midcomms_commit and a message buffer (mb) that we

/* further lowcomms enhancements or alternate implementations may make

	/* m_result and m_bastmode are set from function args,

	/* compare with switch in create_message; send_remove() doesn't

 down conversions go without a reply from the master */

/* FIXME: if this lkb is the only lock we hold on the rsb, then set

   MASTER_UNCERTAIN to force the next request on the rsb to confirm

/* which args we save from a received message depends heavily on the type

   of message, unlike the send side where we can safely send everything about

 lkb was just created so there won't be an lvb yet */

/* We fill in the stub-lkb fields with the info that send_xxxx_reply()

/* This is called after the rsb is locked so that we can safely inspect

 use ls->remove_name2 to avoid conflict with shrink? */

	/* The dir node is the authority on whether we are the master

	   for this rsb or not, so if the master sends us a request, we should

	   recreate the rsb if we've destroyed it.   This race happens when we

	   send a remove message to the dir node at the same time that the dir

	/* TODO: instead of returning ENOTBLK, add the lkb to res_lookup

	   and do this receive_request again from process_lookup_list once

	   we get the lookup reply.  This would avoid a many repeated

	   ENOTBLK request failures when the lookup reply designating us

	/* We could repeatedly return -EBADR here if our send_remove() is

	   delayed in being sent/arriving/being processed on the dir node.

	   Another node would repeatedly lookup up the master, and the dir

	   node would continue returning our nodeid until our send_remove

	   took effect.



	   We send another remove message in case our previous send_remove

 Optimization: we're master so treat lookup as a request */

	/* Look for name on rsbtbl.toss, if it's there, kill it.

	   If it's on rsbtbl.keep, it's being used, and we should ignore this

	   message.  This is an expected race between the dir node sending a

	   request to the master node at the same time as the master node sends

	   a remove to the dir node.  The resolution to that race is for the

	   dir node to ignore the remove message, and the master node to

	   recreate the master rsb when it gets a request from the dir node for

 verify the rsb is on keep list per comment above */

 should not happen */

 should not happen */

	/* Optimization: the dir node was also the master, so it took our

 this is the value returned from do_request() on the master */

 request would block (be queued) on remote master */

 undoes create_lkb() */

 request was queued or granted on remote master */

 find_rsb failed to find rsb or rsb wasn't master */

 cause _request_lock->set_master->send_lookup */

 we'll ignore error in cancel/unlock reply */

 undoes create_lkb() */

 this is the value returned from do_convert() on the master */

 convert would block (be queued) on remote master */

 convert was queued on remote master */

 convert was granted on remote master */

 stub reply can happen with waiters_mutex held */

 stub reply can happen with waiters_mutex held */

 this is the value returned from do_unlock() on the master */

 stub reply can happen with waiters_mutex held */

 this is the value returned from do_cancel() on the master */

	/* ms->m_result is the value returned by dlm_master_lookup on dir node

	/* We sometimes receive a request from the dir node for this

	   rsb before we've received the dir node's loookup_reply for it.

	   The request from the dir node implies we're the master, so we set

	   ourself as master in receive_request_reply, and verify here that

 This should never happen */

 the remote node doesn't believe it's the dir node */

 set_master() will set lkb_nodeid from r */

 undoes create_lkb() */

 messages sent to a master node */

 messages sent from a master node (replies to above) */

 messages sent from a master node (only two types of async msg) */

 messages sent to a dir node */

 messages sent from a dir node (remove has no reply) */

 other messages */

	/*

	 * When checking for ENOENT, we're checking the result of

	 * find_lkb(m_remid):

	 *

	 * The lock id referenced in the message wasn't found.  This may

	 * happen in normal usage for the async messages and cancel, so

	 * only use log_debug for them.

	 *

	 * Some errors are expected and normal.

/* If the lockspace is in recovery mode (locking stopped), then normal

   messages are saved on the requestqueue for processing after recovery is

   done.  When not in recovery mode, we wait for dlm_recoverd to drain saved

   messages off the requestqueue before we process new ones. This occurs right

   after recovery completes when we transition from saving all messages on

   requestqueue, to processing all the saved messages, to processing new

		/* If we were a member of this lockspace, left, and rejoined,

		   other nodes may still be sending us messages from the

/* This is called by dlm_recoverd to process messages that were saved on

/* This is called by the midcomms layer when something is received for

   the lockspace.  It could be either a MSG (normal message sent as part of

   standard locking activity) or an RCOM (recovery message sent as part of

	/* this rwsem allows dlm_ls_stop() to wait for all dlm_recv threads to

 Same special case as in receive_rcom_lock_args() */

	/* lkb->lkb_rqmode < lkb->lkb_grmode shouldn't happen since down

/* A waiting lkb needs recovery if the master node has failed, or

/* Recovery for locks that are waiting for replies from nodes that are now

   gone.  We can just complete unlocks and cancels by faking a reply from the

   dead node.  Requests and up-conversions we flag to be resent after

   recovery.  Down-conversions can just be completed with a fake reply like

		/* exclude debug messages about unlocks because there can be so

		/* all outstanding lookups, regardless of destination  will be

		/* Main reply may have been received leaving a zero wait_type,

		   but a reply for the overlapping op may not have been

		   received.  In that case we need to fake the appropriate

/* Deal with lookups and lkb's marked RESEND from _pre.  We may now be the

   master or dir-node for r.  Processing the lkb may result in it being placed

/* We do this after normal locking has been enabled and any saved messages

   (in requestqueue) have been processed.  We should be confident that at

   this point we won't get or process a reply to any of these waiting

   operations.  But, new ops may be coming in on the rsbs/locks here from

/* there may have been an overlap unlock/cancel prior to recovery or after

   recovery.  if before, the lkb may still have a pos wait_count; if after, the

   overlap flag would just have been set and nothing new sent.  we can be

   confident here than any replies to either the initial op or overlap ops

		/* At this point we assume that we won't get a reply to any

		   previous op or overlap op on this lock.  First, do a big

 for waiters list */

 do an unlock or cancel instead of resending */

 undoes create_lkb() */

		/* don't purge lkbs we've added in recover_master_copy for

 this put should free the lkb */

			/* tell recover_lvb to invalidate the lvb

 this put should free the lkb */

 Get rid of locks held by nodes that are gone. */

	/* cache one removed nodeid to optimize the common

/*

 * Attempt to grant locks on resources that we are the master of.

 * Locks may have become grantable during recovery because locks

 * from departed nodes have been purged (or not rebuilt), allowing

 * previously blocked locks to now be granted.  The subset of rsb's

 * we are interested in are those with lkb's on either the convert or

 * waiting queues.

 *

 * Simplest would be to go through each master rsb and check for non-empty

 * convert or waiting queues, and attempt to grant on those rsbs.

 * Checking the queues requires lock_rsb, though, for which we'd need

 * to release the rsbtbl lock.  This would make iterating through all

 * rsb's very inefficient.  So, we rely on earlier recovery routines

 * to set RECOVER_GRANT on any rsb's that we should attempt to grant

 * locks for.

 the RECOVER_GRANT flag is checked in the grant path */

 needs at least dlm_rcom + rcom_lock */

 don't set lkb_status because add_lkb wants to itself */

	/* Conversions between PR and CW (middle modes) need special handling.

	   The real granted mode of these converting locks cannot be determined

/* This lkb may have been recovered in a previous aborted recovery so we need

   to check if the rsb already has an lkb with the given remote nodeid/lkid.

   If so we just send back a standard reply.  If not, we create a new lkb with

   the given values and send back our lkid.  We send back our lkid by sending

 needs at least dlm_rcom + rcom_lock */

	/* In general we expect the rsb returned to be R_MASTER, but we don't

	   have to require it.  Recovery of masters on one node can overlap

	   recovery of locks on another node, so one node can send us MSTCPY

	   locks before we've made ourselves master of this rsb.  We can still

	   add new MSTCPY locks that we receive here without any harm; when

	   we make ourselves master, dlm_recover_masters() won't touch the

	/* this is the new value returned to the lock holder for

 needs at least dlm_rcom + rcom_lock */

		/* There's a chance the new master received our lock before

		   dlm_recover_master_reply(), this wouldn't happen if we did

	/* an ack for dlm_recover_locks() which waits for replies from

	/* After ua is attached to lkb it will be freed by dlm_free_lkb().

	   When DLM_IFL_USER is set, the dlm knows that this is a userspace

 add this new lkb to the per-process list of locks */

	/* user can change the params on its lock when it converts it, or

/*

 * The caller asks for an orphan lock on a given resource with a given mode.

 * If a matching lock exists, it's moved to the owner's list of locks and

 * the lkid is returned.

	/*

	 * The lkb reference from the ls_orphans list was not

	 * removed above, and is now considered the reference

	 * for the proc locks list.

 from validate_unlock_args() */

 dlm_user_add_cb() may have already taken lkb off the proc list */

 from validate_unlock_args() */

 same as cancel_lock(), but set DEADLOCK_CANCEL after lock_rsb */

 from validate_unlock_args() */

/* lkb's that are removed from the waiters list by revert are just left on the

 reference for the ls_orphans list */

/* The FORCEUNLOCK flag allows the unlock to go ahead even if the lkb isn't

   granted.  Regardless of what rsb queue the lock is on, it's removed and

   freed.  The IVVALBLK flag causes the lvb on the resource to be invalidated

/* We have to release clear_proc_locks mutex before calling unlock_proc_lock()

   (which does lock_rsb) due to deadlock with receiving a message that does

/* The ls_clear_proc_locks mutex protects against dlm_user_add_cb() which

   1) references lkb->ua which we free here and 2) adds lkbs to proc->asts,

/* proc CLOSING flag is set so no more device_reads should look at proc->asts

   list, and no more device_writes should add lkb's to proc->locks list; so we

   shouldn't need to take asts_spin or locks_spin here.  this assumes that

   device reads/writes/closes are serialized -- FIXME: we may need to serialize

		/* this removes the reference for the proc->locks list

		   added by dlm_user_request, it may result in the lkb

 in-progress unlocks */

 ref from proc->locks list */

 pid of 0 means purge all orphans */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2007 Red Hat, Inc.  All rights reserved.

 add the message headers */

 why this? */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2006-2010 Red Hat, Inc.  All rights reserved.

 Offsets may be zero if no data is present */

/* Figure out if this lock is at the end of its life and no longer

   available for the application to use.  The lkb still exists until

   the final ast is read.  A lock becomes EOL in three situations:

     1. a noqueue request fails with EAGAIN

     2. an unlock completes with EUNLOCK

     3. a cancel of a waiting request completes with ECANCEL/EDEADLK

   An EOL lock needs to be removed from the process's list of locks.

   And we can't allow any new operation on an EOL lock.  This is

   not related to the lifetime of the lkb struct which is managed

/* we could possibly check if the cancel of an orphan has resulted in the lkb

	/* If ORPHAN/DEAD flag is set, it means the process is dead so an ast

	   can't be delivered.  For ORPHAN's, dlm_clear_proc_locks() freed

	   lkb->ua so we can't try to use it.  This second check is necessary

	   for cases where a completion ast is received for an operation that

 N.B. spin_lock locks_spin, not asts_spin */

	/* The device is already registered.  This happens when the

		/* this has to be set to NULL

		 * to avoid a double-free in dlm_device_deregister

	/* The device is not registered.  This happens when the lockspace

	   was never used from userspace, or when device_create_lockspace()

	/* The final dlm_release_lockspace waits for references to go to

	   zero, so all processes will need to close their device for the

	   ls before the release will proceed.  release also calls the

	   device_deregister above.  Converting a positive return value

	   from release to zero means that userspace won't know when its

 Check the user's version matches ours */

/*

 * device_write

 *

 *   device_user_lock

 *     dlm_user_request -> request_lock

 *     dlm_user_convert -> convert_lock

 *

 *   device_user_unlock

 *     dlm_user_unlock -> unlock_lock

 *     dlm_user_cancel -> cancel_lock

 *

 *   device_create_lockspace

 *     dlm_new_lockspace

 *

 *   device_remove_lockspace

 *     dlm_release_lockspace

/* a write to a lockspace device is a lock or unlock request, a write

	/*

	 * can't compare against COMPAT/dlm_write_request32 because

	 * we don't yet know if is64bit is zero

 add 1 after namelen so that the name string is terminated */

 do we really need this? can a write happen after a close? */

/* Every process that opens the lockspace device has its own "proc" structure

   hanging off the open file that's used to keep track of locks owned by the

	/* at this point no more lkb's should exist for this lockspace,

	   so there's no chance of dlm_user_add_ast() being called and

 for the find in device_open() */

	/* FIXME: AUTOFREE: if this ls is no longer used do

	/* FIXME: dlm1 provides for the user's bastparam/addr to not be updated

	   in a conversion unless the conversion is successful.  See code

	   in dlm_user_convert() for updating ua from ua_tmp.  OpenVMS, though,

	   notes that a new blocking AST address and parameter are set even if

	/* copy lvb to userspace if there is one, it's been updated, and

 a read returns a single ast described in a struct dlm_lock_result */

 do we really need this? can a read happen after a close? */

	/* if we empty lkb_callbacks, we don't want to unlock the spinlock

	   without removing lkb_cb_list; so empty lkb_cb_list is always

 rem_lkb_callback sets a new lkb_last_cast */

		/* this shouldn't happen; lkb should have been removed from

 removes ref for proc->asts, may cause lkb to be freed */

 removes ref for proc->asts, may cause lkb to be freed */

 removes ref for proc->asts, may cause lkb to be freed */

	/* dlm_controld hasn't started (or, has started, but not

	/* This is to deal with versions of dlm_controld that don't

	   know about the monitor device.  We assume that if the

	   dlm_controld was started (above), but the monitor device

	   was never opened, that it's an old version.  dlm_controld

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

*******************************************************************************

**

**  Copyright (C) 2005-2007 Red Hat, Inc.  All rights reserved.

**

**

*******************************************************************************

/*

 * Requests received while the lockspace is in recovery get added to the

 * request queue and processed when recovery is complete.  This happens when

 * the lockspace is suspended on some nodes before it is on others, or the

 * lockspace is enabled on some while still suspended on others.

/*

 * Called by dlm_recoverd to process normal messages saved while recovery was

 * happening.  Normal locking has been enabled before this is called.  dlm_recv

 * upon receiving a message, will wait for all saved messages to be drained

 * here before processing the message it got.  If a new dlm_ls_stop() arrives

 * while we're processing these saved messages, it may block trying to suspend

 * dlm_recv if dlm_recv is waiting for us in dlm_wait_requestqueue.  In that

 * case, we don't abort since locking_stopped is still 0.  If dlm_recv is not

 * waiting for us, then this processing may be aborted due to locking_stopped.

/*

 * After recovery is done, locking is resumed and dlm_recoverd takes all the

 * saved requests and processes them as they would have been by dlm_recv.  At

 * the same time, dlm_recv will start receiving new requests from remote nodes.

 * We want to delay dlm_recv processing new requests until dlm_recoverd has

 * finished processing the old saved requests.  We don't check for locking

 * stopped here because dlm_ls_stop won't stop locking until it's suspended us

 * (dlm_recv).

 the ls is being cleaned up and freed by release_lockspace */

	/* directory operations are always purged because the directory is

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2005-2008 Red Hat, Inc.  All rights reserved.

/* If a process was killed while waiting for the only plock on a file,

   locks_remove_posix will not see any lock on the file so it won't

   send an unlock-close to us to pass on to userspace to clean up the

   abandoned waiter.  So, we have to insert the unlock-close when the

		/* fl_owner is lockd which doesn't distinguish

 Returns failure iff a successful lock operation should be canceled */

 check if the following 2 are still valid or make a copy */

 got fs lock; bookkeep locally as well: */

		/*

		 * This can only happen in the case of kmalloc() failure.

		 * The filesystem's own lock is the authoritative lock,

		 * so a failure to get the lock locally is not a disaster.

		 * As long as the fs cannot reliably cancel locks (especially

		 * in a low-memory situation), we're better off ignoring

		 * this failure than trying to recover.

 XXX: We need to cancel the fs lock here: */

 cause the vfs unlock to return ENOENT if lock is not found */

	/* info.rv from userspace is 1 for conflict, 0 for no-conflict,

 a read copies out one plock request from the send list */

	/* there is no need to get a reply from userspace for unlocks

	   that were generated by the vfs cleaning up for a close

/* a write copies in one plock result that should match a plock_op

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

*******************************************************************************

**

**  Copyright (C) Sistina Software, Inc.  1997-2003  All rights reserved.

**  Copyright (C) 2004-2009 Red Hat, Inc.  All rights reserved.

**

**

*******************************************************************************

/*

 * lowcomms.c

 *

 * This is the "low-level" comms layer.

 *

 * It is responsible for sending/receiving messages

 * from other nodes in the cluster.

 *

 * Cluster nodes are referred to by their nodeids. nodeids are

 * simply 32 bit numbers to the locking module - if they need to

 * be expanded for the cluster infrastructure then that is its

 * responsibility. It is this layer's

 * responsibility to resolve these into IP address or

 * whatever it needs for inter-node communication.

 *

 * The comms level is two kernel threads that deal mainly with

 * the receiving of messages from other nodes and passing them

 * up to the mid-level comms layer (which understands the

 * message format) for execution by the locking core, and

 * a send thread which does all the setting up of connections

 * to remote nodes and the sending of data. Threads are not allowed

 * to send their own data because it may cause them to wait in times

 * of high load. Also, this way, the sending thread can collect together

 * messages bound for one node and send them in one block.

 *

 * lowcomms will choose to use either TCP or SCTP as its transport layer

 * depending on the configuration variable 'protocol'. This should be set

 * to 0 (default) for TCP or 1 for SCTP. It should be configured using a

 * cluster-wide mechanism as it must be the same on all nodes of the cluster

 * for the DLM to function.

 *

 Number of messages to send before rescheduling */

 NULL if not connected */

 So we know who we are in the list */

 List of outgoing writequeue_entries */

 Receive workqueue */

 Send workqueue */

 wait for graceful shutdown */

 An entry waiting to be sent */

 new()/commit() idx exchange */

 What to do to shutdown */

 What to do to eof check */

 Work queues */

 need to held writequeue_lock */

/*

 * If 'allocation' is zero then we don't attempt to create a new

 * connection structure for this node.

	/* Because multiple workqueues/threads calls this function it can

	 * race on multiple cpu's. Instead of locking hot path __find_con()

	 * we just check in rare cases of recently added nodes again

	 * under protection of connections_lock. If this is the case we

	 * abort our connection creation and return the existing connection.

 Loop round all connections */

 caller need to held dlm_node_addrs_spin lock */

 Data available on socket or listen socket received a connect */

	/* SCTP layer is not calling sk_data_ready when the connection

	 * is done, so we catch the signal through here. Also, it

	 * doesn't switch socket state when entering shutdown, so we

	 * skip the write in that case.

 below sendcon only handling */

 Note: sk_callback_lock must be locked before calling this function. */

 Install a data_ready callback */

 Make a socket active */

 Install a data_ready callback */

/* Add the port number to an IPv6 or 4 sockaddr and return the address

 Close a remote connection and tidy up */

 Will only re-enter once. */

	/* if we send a writequeue entry only a half way, we drop the

	 * whole entry because reconnection and that we not start of the

	 * middle of a msg which will confuse the other end.

	 *

	 * we can always drop messages because retransmits, but what we

	 * cannot allow is to transmit half messages which may be processed

	 * at the other side.

	 *

	 * our policy is to start on a clean state when disconnects, we don't

	 * know what's send/received on transport layer in this case.

 nothing to shutdown */

 copy any leftover from last receive */

 swap to new buffer space */

 Data received from remote end */

 realloc if we get new buffer size to read out */

		/* calculate new buffer parameter regarding last receive and

		 * possible leftover bytes

 new buflen according readed bytes and leftover from last receive */

		/* calculate leftover bytes from process and put it into begin of

		 * the receive buffer, so next receive we have the full message

		 * at the start address of the receive buffer.

 handling for tcp shutdown */

 signal to breaking receive worker */

 Listening socket is busy, accept a connection */

 Get the connected socket's peer */

 Get the new node's NODEID */

	/*  Check to see if we already have a connection to this node. This

	 *  could happen if the two nodes initiate a connection at roughly

	 *  the same time and the connections cross on the wire.

	 *  In this case we store the incoming one in "othercon"

 close other sock con if we have something new */

		/* accept copies the sk after we've saved the callbacks, so we

		   don't want to save them a second time or comm errors will

	/*

	 * Add it to the active queue in case we got data

	 * between processing the accept adding the socket

	 * to the read_sockets list

/*

 * writequeue_entry_complete - try to delete and free write queue entry

 * @e: write queue entry to try to delete

 * @completed: bytes completed

 *

 * writequeue_lock must be held.

 signal that page was half way transmitted */

/*

 * sctp_bind_addrs - bind a SCTP socket to all our addresses

 Get local addresses */

	/* this mutex is being used as a wait to avoid multiple "fast"

	 * new writequeue page list entry allocs in new_wq_entry in

	 * normal operation which is sleepable context. Without it

	 * we could end in multiple writequeue entries with one

	 * dlm message because multiple callers were waiting at

	 * the writequeue_lock in new_wq_entry().

 we assume if successful commit must called */

 does not held connections_srcu, usage workqueue only */

 Send a message */

				/* Notify TCP that we're limited by the

				 * application window size.

 Don't starve people filling buffers */

 close if we got EOF */

 handling for tcp shutdown */

/* Called from recovery when it knows that a node has

 Receive workqueue function */

 Some odd races can cause double-connects, ignore them */

 Create a socket to communicate with */

	/*

	 * Some errors are fatal and this list might need adjusting. For other

	 * errors we try again until the max number of retries is reached.

 Send workqueue function */

	/* Set all the flags to prevent any

	 * socket activity.

	/* Bind to our cluster-known address connecting to avoid

	 * routing problems.

 This *may* not indicate a critical error */

 We don't support multi-homed hosts */

 Turn off Nagle's algorithm */

 Bind to our port */

	/*

	 * Make sock->ops->connect() function return in specified time,

	 * since O_NONBLOCK argument in connect() function does not work here,

	 * then, we should restore the default value of this attribute.

 Turn off Nagle's algorithm */

 Start listening */

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

*******************************************************************************

**

**  Copyright (C) Sistina Software, Inc.  1997-2003  All rights reserved.

**  Copyright (C) 2004-2011 Red Hat, Inc.  All rights reserved.

**

**

*******************************************************************************

/* If the start for which we're re-enabling locking (seq) has been superseded

   by a newer stop (ls_recover_seq), we need to leave locking disabled.



   We suspend dlm_recv threads here to avoid the race where dlm_recv a) sees

   locking stopped and b) adds a message to the requestqueue, but dlm_recoverd

 unblocks processes waiting to enter the dlm */

	/*

	 * This list of root rsb's will be the basis of most of the recovery

	 * routines.

	/*

	 * Add or remove nodes from the lockspace's ls_nodes list.

	/*

	 * Rebuild our own share of the directory by collecting from all other

	 * nodes their master rsb names that hash to us.

	/*

	 * We may have outstanding operations that are waiting for a reply from

	 * a failed node.  Mark these to be resent after recovery.  Unlock and

	 * cancel ops can just be completed.

		/*

		 * Clear lkb's for departed nodes.

		/*

		 * Get new master nodeid's for rsb's that were mastered on

		 * departed nodes.

		/*

		 * Send our locks on remastered rsb's to the new masters.

		/*

		 * Finalize state in master rsb's now that all locks can be

		 * checked.  This includes conversion resolution and lvb

		 * settings.

		/*

		 * Other lockspace members may be going through the "neg" steps

		 * while also adding us to the lockspace, in which case they'll

		 * be doing the recover_locks (RS_LOCKS) barrier.

	/*

	 * Purge directory-related requests that are saved in requestqueue.

	 * All dir requests from before recovery are invalid now due to the dir

	 * rebuild and will be resent by the requesting nodes.

/* The dlm_ls_start() that created the rv we take here may already have been

   stopped via dlm_ls_stop(); in that case we need to leave the RECOVERY_STOP

		/*

		 * We call kthread_should_stop() after set_current_state().

		 * This is because it works correctly if kthread_stop() is

		 * called just before set_current_state().

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

*******************************************************************************

**

**  Copyright (C) Sistina Software, Inc.  1997-2003  All rights reserved.

**  Copyright (C) 2004-2007 Red Hat, Inc.  All rights reserved.

**

**

*******************************************************************************

 SPDX-License-Identifier: GPL-2.0-only

/******************************************************************************

*******************************************************************************

**

**  Copyright (C) Sistina Software, Inc.  1997-2003  All rights reserved.

**  Copyright (C) 2004-2007 Red Hat, Inc.  All rights reserved.

**

**

*******************************************************************************

 SPDX-License-Identifier: MIT

/*

 * VirtualBox Guest Shared Folders support: Virtual File System.

 *

 * Module initialization/finalization

 * File system registration/deregistration

 * Superblock reading

 * Few utility functions

 *

 * Copyright (C) 2006-2018 Oracle Corporation

 'VBox' little endian */

 forward declaration */

 Load nls if not utf8 */

 Turn source into a shfl_string and map the folder */

	/*

	 * vboxsf_free_inode uses the idr, make sure all delayed rcu free

	 * inodes are flushed.

	/*

	 * Don't return 0 here since the guest may then think that it is not

	 * possible to create any more files.

 Apply changed options to the root inode */

 Module initialization/finalization handlers */

		/*

		 * Make sure all delayed rcu free inodes are flushed

		 * before we destroy the cache.

 SPDX-License-Identifier: MIT

/*

 * VirtualBox Guest Shared Folders support: Directory inode and file operations

 *

 * Copyright (C) 2006-2018 Oracle Corporation

		/*

		 * Note the vboxsf_dir_info objects we are iterating over here

		 * are variable sized, so the info pointer may end up being

		 * unaligned. This is how we get the data from the host.

		 * Since vboxsf is only supported on x86 machines this is not

		 * a problem.

 Only happens if the host gives us corrupt data */

 Info now points to the right entry, emit it. */

		/*

		 * On 32-bit systems pos is 64-bit signed, while ino is 32-bit

		 * unsigned so fake_ino may overflow, check for this.

 skip erroneous entry and proceed */

/*

 * This is called during name resolution/lookup to check if the @dentry in

 * the cache is still valid. the job is handled by vboxsf_inode_revalidate.

 iops */

 The host may have given us different attr then requested */

 parent directory access/change time changed */

 Only creates */

 This also closes the handle passed to vboxsf_create_sf_handle() */

 parent directory access/change time changed */

 parent directories access/change time changed */

 -EROFS means symlinks are note support -> -EPERM */

 parent directory access/change time changed */

 SPDX-License-Identifier: MIT

/*

 * VirtualBox Guest Shared Folders support: Utility functions.

 * Mainly conversion from/to VirtualBox/Linux data structures.

 *

 * Copyright (C) 2006-2018 Oracle Corporation

 set [inode] attributes based on [info], uid/gid based on [sbi] */

 We use the host-side values for these */

			/*

			 * XXX: this probably should be set to the number of entries

			 * in the directory plus two (. ..)

 i_blocks always in units of 512 bytes! */

	/*

	 * If the file was changed on the host side we need to invalidate the

	 * page-cache for it.  Note this also gets triggered by our own writes,

	 * this is unavoidable.

 this is at least required for Posix hosts */

	/*

	 * Setting the file size and setting the other attributes has to

	 * be handled separately.

		/*

		 * Ignore ctime (inode change time) as it can't be set

		 * from userland anyway.

 the host may have given us different attr then requested */

 the host may have given us different attr then requested */

 Update the inode with what the host has actually given us. */

/*

 * [dentry] contains string encoded in coding system that corresponds

 * to [sbi]->nls, we must convert it to UTF8 here.

 * Returns a shfl_string allocated through __getname (must be freed using

 * __putname), or an ERR_PTR on error.

		/*

		 * dentry_path stores the name at the end of buf, but the

		 * shfl_string string we return must be properly aligned.

 Reserve space for terminating 0 */

 vboxsf_dirinfo returns 1 on end of dir */

 -EILSEQ means the host could not translate a filename, ignore */

 SPDX-License-Identifier: MIT

/*

 * VirtualBox Guest Shared Folders support: Regular file inode and file ops.

 *

 * Copyright (C) 2006-2018 Oracle Corporation

 the host may have given us different attr then requested */

 init our handle struct and add it to the inode's handles list */

	/*

	 * We check the value of params.handle afterwards to find out if

	 * the call succeeded or failed, as the API does not seem to cleanly

	 * distinguish error and informational messages.

	 *

	 * Furthermore, we must set params.handle to SHFL_HANDLE_NIL to

	 * make the shared folders host service use our mode parameter.

		/*

		 * We ignore O_EXCL, as the Linux kernel seems to call create

		 * beforehand itself, so O_EXCL should always fail.

	/*

	 * When a file is closed on our (the guest) side, we want any subsequent

	 * accesses done on the host side to see all changes done from our side.

/*

 * Write back dirty pages now, because there may not be any suitable

 * open files later

/*

 * Note that since we are accessing files on the host's filesystem, files

 * may always be changed underneath us by the host!

 *

 * The vboxsf API between the guest and the host does not offer any functions

 * to deal with this. There is no inode-generation to check for changes, no

 * events / callback on changes and no way to lock files.

 *

 * To avoid returning stale data when a file gets *opened* on our (the guest)

 * side, we do a "stat" on the host side, then compare the mtime with the

 * last known mtime and invalidate the page-cache if they differ.

 * This is done from vboxsf_inode_revalidate().

 *

 * When reads are done through the read_iter fop, it is possible to do

 * further cache revalidation then, there are 3 options to deal with this:

 *

 * 1)  Rely solely on the revalidation done at open time

 * 2)  Do another "stat" and compare mtime again. Unfortunately the vboxsf

 *     host API does not allow stat on handles, so we would need to use

 *     file->f_path.dentry and the stat will then fail if the file was unlinked

 *     or renamed (and there is no thing like NFS' silly-rename). So we get:

 * 2a) "stat" and compare mtime, on stat failure invalidate the cache

 * 2b) "stat" and compare mtime, on stat failure do nothing

 * 3)  Simply always call invalidate_inode_pages2_range on the range of the read

 *

 * Currently we are keeping things KISS and using option 1. this allows

 * directly using generic_file_read_iter without wrapping it.

 *

 * This means that only data written on the host side before open() on

 * the guest side is guaranteed to be seen by the guest. If necessary

 * we may provide other read-cache strategies in the future and make this

 * configurable through a mount option.

 mtime changed */

 zero the stale part of the page if we did a short copy */

 mtime changed */

/*

 * Note simple_write_begin does not read the page from disk on partial writes

 * this is ok since vboxsf_write_end only writes the written parts of the

 * page and it does not call SetPageUptodate for partial writes.

 SPDX-License-Identifier: MIT

/*

 * Wrapper functions for the shfl host calls.

 *

 * Copyright (C) 2006-2018 Oracle Corporation

 No guest-device */

 guest-device is gone, already disconnected */

 guest-dev removed underneath us */

/**

 * vboxsf_create - Create a new file or folder

 * @root:         Root of the shared folder in which to create the file

 * @parsed_path:  The path of the file or folder relative to the shared folder

 * @param:        create_parms Parameters for file/folder creation.

 *

 * Create a new file or folder or open an existing one in a shared folder.

 * Note this function always returns 0 / success unless an exceptional condition

 * occurs - out of memory, invalid arguments, etc. If the file or folder could

 * not be opened or created, create_parms->handle will be set to

 * SHFL_HANDLE_NIL on return.  In this case the value in create_parms->result

 * provides information as to why (e.g. SHFL_FILE_EXISTS), create_parms->result

 * is also set on success as additional information.

 *

 * Returns:

 * 0 or negative errno value.

 Returns 0 on success, 1 on end-of-dir, negative errno otherwise */

 out parameter only */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2016 Namjae Jeon <linkinjeon@kernel.org>

 *   Copyright (C) 2018 Samsung Electronics Co., Ltd.

/*

 * Fixed format data defining GSS header and fixed string

 * "not_defined_in_RFC4178@please_ignore".

 * So sec blob data in neg phase could be generated statically.

/**

 * ksmbd_gen_sess_key() - function to generate session key

 * @sess:	session of connection

 * @hash:	source hash value to be used for find session key

 * @hmac:	source hmac value to be used for finding session key

 *

 convert user_name to unicode */

 Convert domain name or conn name to unicode and uppercase */

/**

 * ksmbd_auth_ntlmv2() - NTLMv2 authentication handler

 * @sess:	session of connection

 * @ntlmv2:		NTLMv2 challenge response

 * @blen:		NTLMv2 blob length

 * @domain_name:	domain name

 *

 * Return:	0 on success, error number on error

/**

 * ksmbd_decode_ntlmssp_auth_blob() - helper function to construct

 * authenticate blob

 * @authblob:	authenticate blob source pointer

 * @usr:	user details

 * @sess:	session of connection

 *

 * Return:	0 on success, error number on error

 TODO : use domain name that imported from configuration file */

 process NTLMv2 authentication */

/**

 * ksmbd_decode_ntlmssp_neg_blob() - helper function to construct

 * negotiate blob

 * @negblob: negotiate blob source pointer

 * @rsp:     response header pointer to be updated

 * @sess:    session of connection

 *

/**

 * ksmbd_build_ntlmssp_challenge_blob() - helper function to construct

 * challenge blob

 * @chgblob: challenge blob source pointer to initialize

 * @rsp:     response header pointer to be updated

 * @sess:    session of connection

 *

 Initialize random conn challenge */

 Add Target Information to security buffer */

 Add target info list for NetBIOS/DNS settings */

 Add terminator subblock */

/**

 * ksmbd_sign_smb2_pdu() - function to generate packet signing

 * @conn:	connection

 * @key:	signing key

 * @iov:        buffer iov array

 * @n_vec:	number of iovecs

 * @sig:	signature value generated for client request packet

 *

/**

 * ksmbd_sign_smb3_pdu() - function to generate packet signing

 * @conn:	connection

 * @key:	signing key

 * @iov:        buffer iov array

 * @n_vec:	number of iovecs

 * @sig:	signature value generated for client request packet

 *

 Add two entries for transform header and signature */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2016 Namjae Jeon <linkinjeon@kernel.org>

 *   Copyright (C) 2018 Samsung Electronics Co., Ltd.

 for vfs_path_lookup */

/**

 * ksmbd_vfs_lock_parent() - lock parent dentry if it is stable

 *

 * the parent dentry got by dget_parent or @parent could be

 * unstable, we try to lock a parent inode and lookup the

 * child dentry again.

 *

 * the reference count of @parent isn't incremented.

/**

 * ksmbd_vfs_create() - vfs helper for smb create file

 * @work:	work

 * @name:	file name that is relative to share

 * @mode:	file create mode

 *

 * Return:	0 on success, otherwise error

/**

 * ksmbd_vfs_mkdir() - vfs helper for smb create directory

 * @work:	work

 * @name:	directory name that is relative to share

 * @mode:	directory create mode

 *

 * Return:	0 on success, otherwise error

/**

 * check_lock_range() - vfs helper for smb byte range file locking

 * @filp:	the file to apply the lock to

 * @start:	lock start byte offset

 * @end:	lock end byte offset

 * @type:	byte range type read/write

 *

 * Return:	0 on success, otherwise error

 check conflict locks */

 check owner in lock */

/**

 * ksmbd_vfs_read() - vfs helper for smb file read

 * @work:	smb work

 * @fid:	file id of open file

 * @count:	read byte count

 * @pos:	file pos

 *

 * Return:	number of read bytes on success, otherwise error

/**

 * ksmbd_vfs_write() - vfs helper for smb file write

 * @work:	work

 * @fid:	file id of open file

 * @buf:	buf containing data for writing

 * @count:	read byte count

 * @pos:	file pos

 * @sync:	fsync after write

 * @written:	number of bytes written

 *

 * Return:	0 on success, otherwise error

 Do we need to break any of a levelII oplock? */

/**

 * ksmbd_vfs_getattr() - vfs helper for smb getattr

 * @work:	work

 * @fid:	file id of open file

 * @attrs:	inode attributes

 *

 * Return:	0 on success, otherwise error

/**

 * ksmbd_vfs_fsync() - vfs helper for smb fsync

 * @work:	work

 * @fid:	file id of open file

 *

 * Return:	0 on success, otherwise error

/**

 * ksmbd_vfs_remove_file() - vfs helper for smb rmdir or unlink

 * @name:	directory or file name that is relative to share

 *

 * Return:	0 on success, otherwise error

/**

 * ksmbd_vfs_link() - vfs helper for creating smb hardlink

 * @oldname:	source file name

 * @newname:	hardlink name that is relative to share

 *

 * Return:	0 on success, otherwise error

/**

 * ksmbd_vfs_truncate() - vfs helper for smb file truncate

 * @work:	work

 * @fid:	file id of old file

 * @size:	truncate to given size

 *

 * Return:	0 on success, otherwise error

 Do we need to break any of a levelII oplock? */

/**

 * ksmbd_vfs_listxattr() - vfs helper for smb list extended attributes

 * @dentry:	dentry of file for listing xattrs

 * @list:	destination buffer

 * @size:	destination buffer length

 *

 * Return:	xattr list length on success, otherwise error

/**

 * ksmbd_vfs_getxattr() - vfs helper for smb get extended attributes value

 * @user_ns:	user namespace

 * @dentry:	dentry of file for getting xattrs

 * @xattr_name:	name of xattr name to query

 * @xattr_buf:	destination buffer xattr value

 *

 * Return:	read xattr value length on success, otherwise error

/**

 * ksmbd_vfs_setxattr() - vfs helper for smb set extended attributes value

 * @user_ns:	user namespace

 * @dentry:	dentry to set XATTR at

 * @name:	xattr name for setxattr

 * @value:	xattr value to set

 * @size:	size of xattr value

 * @flags:	destination buffer length

 *

 * Return:	0 on success, otherwise error

/**

 * ksmbd_vfs_set_fadvise() - convert smb IO caching options to linux options

 * @filp:	file pointer for IO

 * @options:	smb IO options

	/*

	 * Shrink request scope to what the fs can actually handle.

/**

 * ksmbd_vfs_empty_dir() - check for empty directory

 * @fp:	ksmbd file pointer

 *

 * Return:	true if directory empty, otherwise false

/**

 * ksmbd_vfs_lookup_in_dir() - lookup a file in a directory

 * @dir:	path info

 * @name:	filename to lookup

 * @namelen:	filename length

 *

 * Return:	0 on success, otherwise error

/**

 * ksmbd_vfs_kern_path() - lookup a file and get path info

 * @name:	file path that is relative to share

 * @flags:	lookup flags

 * @path:	if lookup succeed, return path info

 * @caseless:	caseless filename lookup

 *

 * Return:	0 on success, otherwise error

/**

 * ksmbd_vfs_init_kstat() - convert unix stat information to smb stat format

 * @p:          destination buffer

 * @ksmbd_kstat:      ksmbd kstat wrapper

	/*

	 * set default value for the case that store dos attributes is not yes

	 * or that acl is disable in server's filesystem and the config is yes.

 Set default owner group */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2019 Samsung Electronics Co., Ltd.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2019 Samsung Electronics Co., Ltd.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2016 Namjae Jeon <linkinjeon@kernel.org>

 *   Copyright (C) 2018 Samsung Electronics Co., Ltd.

/**

 * alloc_opinfo() - allocate a new opinfo object for oplock info

 * @work:	smb work

 * @id:		fid of open file

 * @Tid:	tree id of connection

 *

 * Return:      allocated opinfo object on success, otherwise NULL

/**

 * opinfo_write_to_read() - convert a write oplock to read oplock

 * @opinfo:		current oplock info

 *

 * Return:      0 on success, otherwise -EINVAL

/**

 * opinfo_read_handle_to_read() - convert a read/handle oplock to read oplock

 * @opinfo:		current oplock info

 *

 * Return:      0 on success, otherwise -EINVAL

/**

 * opinfo_write_to_none() - convert a write oplock to none

 * @opinfo:	current oplock info

 *

 * Return:      0 on success, otherwise -EINVAL

/**

 * opinfo_read_to_none() - convert a write read to none

 * @opinfo:	current oplock info

 *

 * Return:      0 on success, otherwise -EINVAL

/**

 * lease_read_to_write() - upgrade lease state from read to write

 * @opinfo:	current lease info

 *

 * Return:      0 on success, otherwise -EINVAL

/**

 * lease_none_upgrade() - upgrade lease state from none

 * @opinfo:	current lease info

 * @new_state:	new lease state

 *

 * Return:	0 on success, otherwise -EINVAL

/**

 * close_id_del_oplock() - release oplock object at file close time

 * @fp:		ksmbd file pointer

/**

 * grant_write_oplock() - grant exclusive/batch oplock or write lease

 * @opinfo_new:	new oplock info object

 * @req_oplock: request oplock

 * @lctx:	lease context information

 *

 * Return:      0

/**

 * grant_read_oplock() - grant level2 oplock or read lease

 * @opinfo_new:	new oplock info object

 * @lctx:	lease context information

 *

 * Return:      0

/**

 * grant_none_oplock() - grant none oplock or none lease

 * @opinfo_new:	new oplock info object

 * @lctx:	lease context information

 *

 * Return:      0

/**

 * same_client_has_lease() - check whether current lease request is

 *		from lease owner of file

 * @ci:		master file pointer

 * @client_guid:	Client GUID

 * @lctx:		lease context information

 *

 * Return:      oplock(lease) object on success, otherwise NULL

	/*

	 * Compare lease key and client_guid to know request from same owner

	 * of same client

 skip upgrading lease about breaking lease */

 upgrading lease */

 is this a timeout ? */

 memory barrier is needed for wake_up_bit() */

 Not immediately break to none. */

/**

 * __smb2_oplock_break_noti() - send smb2 oplock break cmd from conn

 * to client

 * @wk:     smb work object

 *

 * There are two ways this function can be called. 1- while file open we break

 * from exclusive/batch lock to levelII oplock and 2- while file write/truncate

 * we break from levelII oplock no oplock.

 * work->request_buf contains oplock_info.

/**

 * smb2_oplock_break_noti() - send smb2 exclusive/batch to level2 oplock

 *		break command from server to client

 * @opinfo:		oplock info object

 *

 * Return:      0 on success, otherwise error

/**

 * __smb2_lease_break_noti() - send lease break command from server

 * to client

 * @wk:     smb work object

/**

 * smb2_lease_break_noti() - break lease when a new client request

 *			write lease

 * @opinfo:		conains lease state information

 *

 * Return:	0 on success, otherwise error

 Need to break exclusive/batch oplock, write lease or overwrite_if */

			/*

			 * Create overwrite break trigger the lease break to

			 * none.

/**

 * smb_grant_oplock() - handle oplock/lease request on file open

 * @work:		smb work

 * @req_op_level:	oplock level

 * @pid:		id of open file

 * @fp:			ksmbd file pointer

 * @tid:		Tree id of connection

 * @lctx:		lease context information on file open

 * @share_ret:		share mode

 *

 * Return:      0 on success, otherwise error

 not support directory lease */

 ci does not have any oplock */

 grant none-oplock if second open is trunc */

 is lease already granted ? */

 Check all oplock was freed by close */

 grant fixed oplock on stacked locking between lease and oplock */

/**

 * smb_break_all_write_oplock() - break batch/exclusive oplock to level2

 * @work:	smb work

 * @fp:		ksmbd file pointer

 * @is_trunc:	truncate on open

/**

 * smb_break_all_levII_oplock() - send level2 oplock or read lease break command

 *	from server to client

 * @work:	smb work

 * @fp:		ksmbd file pointer

 * @is_trunc:	truncate on open

 Skip oplock being break to none */

/**

 * smb_break_all_oplock() - break both batch/exclusive and level2 oplock

 * @work:	smb work

 * @fp:		ksmbd file pointer

/**

 * smb2_map_lease_to_oplock() - map lease state to corresponding oplock type

 * @lease_state:     lease type

 *

 * Return:      0 if no mapping, otherwise corresponding oplock type

/**

 * create_lease_buf() - create lease context for open cmd response

 * @rbuf:	buffer to create lease context response

 * @lease:	buffer to stored parsed lease state information

/**

 * parse_lease_state() - parse lease context containted in file open request

 * @open_req:	buffer containing smb2 file open(create) request

 *

 * Return:  oplock state, -ENOENT if create lease context not found

/**

 * smb2_find_context_vals() - find a particular context info in open request

 * @open_req:	buffer containing smb2 file open(create) request

 * @tag:	context name to search for

 *

 * Return:	pointer to requested context, NULL if @str context not found

 *		or error pointer if name length is invalid.

	/*

	 * CreateContextsOffset and CreateContextsLength are guaranteed to

	 * be valid because of ksmbd_smb2_check_message().

/**

 * create_durable_rsp_buf() - create durable handle context

 * @cc:	buffer to create durable context response

 SMB2_CREATE_DURABLE_HANDLE_RESPONSE is "DHnQ" */

/**

 * create_durable_v2_rsp_buf() - create durable handle v2 context

 * @cc:	buffer to create durable context response

 * @fp: ksmbd file pointer

 SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 is "DH2Q" */

/**

 * create_mxac_rsp_buf() - create query maximal access context

 * @cc:			buffer to create maximal access context response

 * @maximal_access:	maximal access

 SMB2_CREATE_QUERY_MAXIMAL_ACCESS_RESPONSE is "MxAc" */

 SMB2_CREATE_QUERY_ON_DISK_ID_RESPONSE is "QFid" */

/**

 * create_posix_rsp_buf() - create posix extension context

 * @cc:	buffer to create posix on posix response

 * @fp: ksmbd file pointer

 SMB2_CREATE_TAG_POSIX is "0x93AD25509CB411E7B42383DE968BCD7C" */

/*

 * Find lease object(opinfo) for given lease key/fid from lease

 * break/file close path.

/**

 * lookup_lease_in_table() - find a matching lease info object

 * @conn:	connection instance

 * @lease_key:	lease key to be searched for

 *

 * Return:      opinfo if found matching opinfo, otherwise NULL

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2016 Namjae Jeon <linkinjeon@kernel.org>

 *   Copyright (C) 2018 Samsung Electronics Co., Ltd.

	/*

	 * Make sure that this really is an SMB, that it is a response.

/*

 *  The following table defines the expected "StructureSize" of SMB2 requests

 *  in order by SMB2 command.  This is similar to "wct" in SMB/CIFS requests.

 *

 *  Note that commands are defined in smb2pdu.h in le16 but the array below is

 *  indexed by command in host byte order

 SMB2_NEGOTIATE */ cpu_to_le16(36),

 SMB2_SESSION_SETUP */ cpu_to_le16(25),

 SMB2_LOGOFF */ cpu_to_le16(4),

 SMB2_TREE_CONNECT */ cpu_to_le16(9),

 SMB2_TREE_DISCONNECT */ cpu_to_le16(4),

 SMB2_CREATE */ cpu_to_le16(57),

 SMB2_CLOSE */ cpu_to_le16(24),

 SMB2_FLUSH */ cpu_to_le16(24),

 SMB2_READ */ cpu_to_le16(49),

 SMB2_WRITE */ cpu_to_le16(49),

 SMB2_LOCK */ cpu_to_le16(48),

 SMB2_IOCTL */ cpu_to_le16(57),

 SMB2_CANCEL */ cpu_to_le16(4),

 SMB2_ECHO */ cpu_to_le16(4),

 SMB2_QUERY_DIRECTORY */ cpu_to_le16(33),

 SMB2_CHANGE_NOTIFY */ cpu_to_le16(32),

 SMB2_QUERY_INFO */ cpu_to_le16(41),

 SMB2_SET_INFO */ cpu_to_le16(33),

 use 44 for lease break */

 SMB2_OPLOCK_BREAK */ cpu_to_le16(36)

/*

 * The size of the variable area depends on the offset and length fields

 * located in different fields for various SMB2 requests. SMB2 requests

 * with no variable length info, show an offset of zero for the offset field.

 SMB2_NEGOTIATE */ true,

 SMB2_SESSION_SETUP */ true,

 SMB2_LOGOFF */ false,

 SMB2_TREE_CONNECT */	true,

 SMB2_TREE_DISCONNECT */ false,

 SMB2_CREATE */ true,

 SMB2_CLOSE */ false,

 SMB2_FLUSH */ false,

 SMB2_READ */	true,

 SMB2_WRITE */ true,

 SMB2_LOCK */	true,

 SMB2_IOCTL */ true,

 SMB2_CANCEL */ false, 
 SMB2_ECHO */ false,

 SMB2_QUERY_DIRECTORY */ true,

 SMB2_CHANGE_NOTIFY */ false,

 SMB2_QUERY_INFO */ true,

 SMB2_SET_INFO */ true,

 SMB2_OPLOCK_BREAK */ false

/*

 * Set length of the data area and the offset to arguments.

 * if they are invalid, return error.

 error reqeusts do not have data area */

	/*

	 * Following commands have data areas so we have to get the location

	 * of the data buffer offset and data buffer length for the particular

	 * command.

		/*

		 * smb2_lock request size is 48 included single

		 * smb2_lock_element structure size.

/*

 * Calculate the size of the SMB message based on the fixed header

 * portion, the number of word parameters and the data portion of the message.

 the offset from the beginning of SMB to data area */

 the length of the variable length data area */

 Structure Size has already been checked to make sure it is 64 */

	/*

	 * StructureSize2, ie length of fixed parameter area has already

	 * been checked to make sure it is the correct length.

	/*

	 * StructureSize2 of smb2_lock pdu is set to 48, indicating

	 * the size of smb2 lock request with single smb2_lock_element

	 * regardless of number of locks. Subtract single

	 * smb2_lock_element for correct buffer size check.

		/*

		 * Check to make sure that data area begins after fixed area,

		 * Note that last byte of the fixed area is part of data area

		 * for some commands, typically those with odd StructureSize,

		 * so we must add one to the calculation.

 calculated length */

 error packets have 9 byte structure size */

 special case for SMB2.1 lease break message */

 client can return one byte more due to implied bcc[0] */

		/*

		 * Some windows servers (win2016) will pad also the final

		 * PDU in a compound to 8 bytes.

		/*

		 * windows client also pad up to 8 bytes when compounding.

		 * If pad is longer than eight bytes, log the server behavior

		 * (once), since may indicate a problem but allow it and

		 * continue since the frame is parseable.

 SPDX-License-Identifier: LGPL-2.1+

/*

 *   Copyright (C) International Business Machines  Corp., 2007,2008

 *   Author(s): Steve French (sfrench@us.ibm.com)

 *   Copyright (C) 2020 Samsung Electronics Co., Ltd.

 *   Author(s): Namjae Jeon <linkinjeon@kernel.org>

 security id for everyone/world system group */

 security id for everyone/world system group */

 security id for everyone/world system group */

 security id for Authenticated Users system group */

 S-1-22-1 Unmapped Unix users */

 S-1-22-2 Unmapped Unix groups */

/*

 * See http://technet.microsoft.com/en-us/library/hh509017(v=ws.10).aspx

 S-1-5-88 MS NFS and Apple style UID/GID/mode */

 S-1-5-88-1 Unix uid */

 S-1-5-88-2 Unix gid */

 S-1-5-88-3 Unix mode */

/*

 * if the two SIDs (roughly equivalent to a UUID for a user or group) are

 * the same returns zero, if they do not match returns non-zero.

 compare the revision */

 compare all of the six auth values */

 compare all of the subauth values if any */

 sids compare/match */

/*

 * change posix mode to reflect permissions

 * pmode is the existing mode (we only want to overwrite part of this

 * bits to set can be: S_IRWXU, S_IRWXG or S_IRWXO ie 00700 or 00070 or 00007

/*

 * Generate access flags to reflect permissions mode is the existing mode.

 * This function is called for every ACE in the DACL whose SID matches

 * with either owner or group or everyone.

 reset access mask */

 bits to use are either S_IRWXU or S_IRWXG or S_IRWXO */

	/*

	 * check for R/W/X UGO since we do not know whose flags

	 * is this but we have cleared all the bits sans RWX for

	 * either user or group or other as per bits_to_use

 RID */

	/*

	 * If we have too many subauthorities, then something is really wrong.

	 * Just return an error.

		/*

		 * Translate raw sid into kuid in the server's user

		 * namespace.

 If this is an idmapped mount, apply the idmapping. */

		/*

		 * Translate raw sid into kgid in the server's user

		 * namespace.

 If this is an idmapped mount, apply the idmapping. */

	/*

	 * In the worst case, each individual acl could be for a distinct

	 * named user or group, but we don't know which, so we allocate

	 * enough space for either:

 validate that we do not go past end of acl */

	/*

	 * reset rwx permissions for user/group/other.

	 * Also, if num_aces is 0 i.e. DACL has no ACEs,

	 * user/group/other have no permissions

 The owner must be set to at least read-only. */

 owner RID */

 Group RID */

 creator owner */

 creator group */

 other */

	/*

	 * validate that we do not go past end of ACL - sid must be at least 8

	 * bytes long (assuming no sub-auths - e.g. the null SID

 Convert CIFS ACL to POSIX form */

 no need for SACL ptr */

 Convert permission bits from mode to equivalent CIFS ACL */

 no need for SACL ptr */

 Update posix acls */

 Check it only calling from SD BUFFER context */

 Update WinACL in xattr */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2016 Namjae Jeon <linkinjeon@kernel.org>

 *   Copyright (C) 2018 Samsung Electronics Co., Ltd.

/**

 * match_pattern() - compare a string with a pattern which might include

 * wildcard '*' and '?'

 * TODO : implement consideration about DOS_DOT, DOS_QM and DOS_STAR

 *

 * @string:	string to compare with a pattern

 * @len:	string length

 * @pattern:	pattern string which might include wildcard '*' and '?'

 *

 * Return:	0 if pattern matched with the string, otherwise non zero value

/*

 * is_char_allowed() - check for valid character

 * @ch:		input character to be checked

 *

 * Return:	1 if char is allowed, otherwise 0

 check for control chars, wildcards etc. */

/**

 * convert_to_nt_pathname() - extract and return windows path string

 *      whose share directory prefix was removed from file path

 * @filename : unix filename

 * @sharepath: share path string

 *

 * Return : windows path string or error

/**

 * ksmbd_extract_sharename() - get share name from tree connect request

 * @treename:	buffer containing tree name and share name

 *

 * Return:      share name on success, otherwise error

 caller has to free the memory */

/**

 * convert_to_unix_name() - convert windows name to unix format

 * @path:	name to be converted

 * @tid:	tree id of mathing share

 *

 * Return:	converted name on success, otherwise NULL

 XXX */

 We allocate buffer twice bigger than needed. */

/*

 * Convert the NT UTC (based 1601-01-01, in hundred nanosecond units)

 * into Unix UTC (based 1970-01-01, in seconds).

 Subtract the NTFS time offset, then convert to 1s intervals. */

	/*

	 * Unfortunately can not use normal 64 bit division on 32 bit arch, but

	 * the alternative, do_div, does not work with negative numbers so have

	 * to special case them

 Convert the Unix UTC into NT UTC. */

 Convert to 100ns intervals and then add the NTFS time offset. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2018 Samsung Electronics Co., Ltd.

 *   Copyright (C) 2018 Namjae Jeon <linkinjeon@kernel.org>

for shortname implementation */

/**

 * ksmbd_verify_smb_message() - check for valid smb2 request header

 * @work:	smb work

 *

 * check for valid smb signature and packet direction(request/response)

 *

 * Return:      0 on success, otherwise -EINVAL

/**

 * ksmbd_smb_request() - check for valid smb request type

 * @conn:	connection instance

 *

 * Return:      true on success, otherwise false

 fill dot entry info */

/**

 * ksmbd_extract_shortname() - get shortname from long filename

 * @conn:	connection instance

 * @longname:	source long filename

 * @shortname:	destination short filename

 *

 * Return:	shortname length or 0 when source long name is '.' or '..'

 * TODO: Though this function comforms the restriction of 8.3 Filename spec,

 * but the result is different with Windows 7's one. need to check.

no mangling required */

name starts with a dot*/

	/*

	 * Lookup fp in master fp list, and check desired access and

	 * shared mode between previous open and current open.

		/*

		 * Only check FILE_SHARE_DELETE if stream opened and

		 * normal file opened.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2016 Namjae Jeon <linkinjeon@kernel.org>

 *   Copyright (C) 2018 Samsung Electronics Co., Ltd.

/**

 * check_conn_state() - check state of server thread connection

 * @work:     smb work containing server thread information

 *

 * Return:	0 on valid connection, otherwise 1 to reconnect

 AndX commands - chained request can return positive values */

 either uid or tid is not correct */

		/*

		 * Call smb2_set_rsp_credits() function to set number of credits

		 * granted in hdr of smb2 response.

/**

 * handle_ksmbd_work() - process pending smb work requests

 * @wk:	smb work containing request command buffer

 *

 * called by kworker threads to processing remaining smb work requests

/**

 * queue_ksmbd_work() - queue a smb request to worker thread queue

 *		for proccessing smb command and sending response

 * @conn:	connection instance

 *

 * read remaining data from socket create and submit work.

 update activity on connection */

	/*

	 * Inc this each time you change stats output format,

	 * so user space will know what to do.

/**

 * ksmbd_server_exit() - shutdown forker thread and free memory at module exit

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Some of the source code in this file came from fs/cifs/cifs_unicode.c

 *

 *   Copyright (c) International Business Machines  Corp., 2000,2009

 *   Modified by Steve French (sfrench@us.ibm.com)

 *   Modified by Namjae Jeon (linkinjeon@kernel.org)

/*

 * smb_utf16_bytes() - how long will a string be after conversion?

 * @from:	pointer to input string

 * @maxbytes:	don't go past this many bytes of input string

 * @codepage:	destination codepage

 *

 * Walk a utf16le string and return the number of bytes that the string will

 * be after being converted to the given charset, not including any null

 * termination required. Don't walk past maxbytes in the source buffer.

 *

 * Return:	string length after conversion

/*

 * cifs_mapchar() - convert a host-endian char to proper char in codepage

 * @target:	where converted character should be copied

 * @src_char:	2 byte host-endian source character

 * @cp:		codepage to which character should be converted

 * @mapchar:	should character be mapped according to mapchars mount option?

 *

 * This function handles the conversion of a single character. It is the

 * responsibility of the caller to ensure that the target buffer is large

 * enough to hold the result of the conversion (at least NLS_MAX_CHARSET_SIZE).

 *

 * Return:	string length after conversion

	/*

	 * BB: Cannot handle remapping UNI_SLASH until all the calls to

	 *     build_path_from_dentry are modified, as they use slash as

	 *     separator.

/*

 * is_char_allowed() - check for valid character

 * @ch:		input character to be checked

 *

 * Return:	1 if char is allowed, otherwise 0

 check for control chars, wildcards etc. */

/*

 * smb_from_utf16() - convert utf16le string to local charset

 * @to:		destination buffer

 * @from:	source buffer

 * @tolen:	destination buffer size (in bytes)

 * @fromlen:	source buffer size (in bytes)

 * @codepage:	codepage to which characters should be converted

 * @mapchar:	should characters be remapped according to the mapchars option?

 *

 * Convert a little-endian utf16le string (as sent by the server) to a string

 * in the provided codepage. The tolen and fromlen parameters are to ensure

 * that the code doesn't walk off of the end of the buffer (which is always

 * a danger if the alignment of the source buffer is off). The destination

 * string is always properly null terminated and fits in the destination

 * buffer. Returns the length of the destination string in bytes (including

 * null terminator).

 *

 * Note that some windows versions actually send multiword UTF-16 characters

 * instead of straight UTF16-2. The linux nls routines however aren't able to

 * deal with those characters properly. In the event that we get some of

 * those characters, they won't be translated properly.

 *

 * Return:	string length after conversion

	/*

	 * because the chars can be of varying widths, we need to take care

	 * not to overflow the destination buffer when we get close to the

	 * end of it. Until we get to this offset, we don't need to check

	 * for overflow however.

		/*

		 * check to see if converting this character might make the

		 * conversion bleed into the null terminator

 put converted char into 'to' buffer */

 properly null-terminate string */

/*

 * smb_strtoUTF16() - Convert character string to unicode string

 * @to:		destination buffer

 * @from:	source buffer

 * @len:	destination buffer size (in bytes)

 * @codepage:	codepage to which characters should be converted

 *

 * Return:	string length after conversion

 needed to quiet sparse */

 special case for utf8 to handle no plane0 chars */

		/*

		 * convert utf8 -> utf16, we assume we have enough space

		 * as caller should have assumed conversion does not overflow

		 * in destination len is length in wchar_t units (16bits)

 if success terminate and exit */

		/*

		 * if fails fall back to UCS encoding as this

		 * function should not return negative values

		 * currently can fail only if source contains

		 * invalid encoded characters

 A question mark */

/*

 * smb_strndup_from_utf16() - copy a string from wire format to the local

 *		codepage

 * @src:	source string

 * @maxlen:	don't walk past this many bytes in the source string

 * @is_unicode:	is this a unicode string?

 * @codepage:	destination codepage

 *

 * Take a string given by the server, convert it to the local codepage and

 * put it in a new buffer. Returns a pointer to the new string or NULL on

 * error.

 *

 * Return:	destination string buffer or error ptr

/*

 * Convert 16 bit Unicode pathname to wire format from string in current code

 * page. Conversion may involve remapping up the six characters that are

 * only legal in POSIX-like OS (if they are present in the string). Path

 * names are little endian 16 bit Unicode on the wire

/*

 * smbConvertToUTF16() - convert string from local charset to utf16

 * @target:	destination buffer

 * @source:	source buffer

 * @srclen:	source buffer size (in bytes)

 * @cp:		codepage to which characters should be converted

 * @mapchar:	should characters be remapped according to the mapchars option?

 *

 * Convert 16 bit Unicode pathname to wire format from string in current code

 * page. Conversion may involve remapping up the six characters that are

 * only legal in POSIX-like OS (if they are present in the string). Path

 * names are little endian 16 bit Unicode on the wire

 *

 * Return:	char length after conversion

		/*

		 * FIXME: We can not handle remapping backslash (UNI_SLASH)

		 * until all the calls to build_path_from_dentry are modified,

		 * as they use backslash as separator.

			/*

			 * if no match, use question mark, which at least in

			 * some cases serves as wild card

		/*

		 * character may take more than one byte in the source string,

		 * but will take exactly two bytes in the target string

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2016 Namjae Jeon <linkinjeon@kernel.org>

 *   Copyright (C) 2018 Samsung Electronics Co., Ltd.

/**

 * init_smb2_1_server() - initialize a smb server connection with smb2.1

 *			command dispatcher

 * @conn:	connection instance

/**

 * init_smb3_0_server() - initialize a smb server connection with smb3.0

 *			command dispatcher

 * @conn:	connection instance

/**

 * init_smb3_02_server() - initialize a smb server connection with smb3.02

 *			command dispatcher

 * @conn:	connection instance

/**

 * init_smb3_11_server() - initialize a smb server connection with smb3.11

 *			command dispatcher

 * @conn:	connection instance

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2018 Samsung Electronics Co., Ltd.

		/*

		 * Response message type value should be equal to

		 * request message type + 1.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2021 Samsung Electronics Co., Ltd.

 *   Author(s): Namjae Jeon <linkinjeon@kernel.org>

 push permission */

 ACL ACCESS */

 DEFAULT ACL ACCESS */

 push hash type and hash 64bytes */

 push ndr for security descriptor */

 Read Level */

 Read Ref Id */

 Read Time */

 Read Posix ACL hash */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2016 Namjae Jeon <linkinjeon@kernel.org>

 *   Copyright (C) 2018 Samsung Electronics Co., Ltd.

/**

 * kvec_array_init() - initialize a IO vector segment

 * @new:	IO vector to be initialized

 * @iov:	base IO vector

 * @nr_segs:	number of segments in base iov

 * @bytes:	total iovec length so far for read

 *

 * Return:	Number of IO segments

/**

 * get_conn_iovec() - get connection iovec for reading from socket

 * @t:		TCP transport instance

 * @nr_segs:	number of segments in iov

 *

 * Return:	return existing or newly allocate iovec

 not big enough -- allocate a new one and release the old */

/**

 * ksmbd_tcp_new_connection() - create a new tcp session on mount

 * @client_sk:	socket associated with new connection

 *

 * whenever a new connection is requested, create a conn thread

 * (session thread) to handle new incoming smb requests from the connection

 *

 * Return:	0 on success, otherwise error

/**

 * ksmbd_kthread_fn() - listen to new SMB connections and callback server

 * @p:		arguments to forker thread

 *

 * Return:	0 on success, error number otherwise

 check for new connections every 100 msecs */

/**

 * ksmbd_tcp_run_kthread() - start forker thread

 * @iface: pointer to struct interface

 *

 * start forker thread(ksmbd/0) at module init time to listen

 * on port 445 for new SMB connection requests. It creates per connection

 * server threads(ksmbd/x)

 *

 * Return:	0 on success or error number

/**

 * ksmbd_tcp_readv() - read data from socket in given iovec

 * @t:		TCP transport instance

 * @iov_orig:	base IO vector

 * @nr_segs:	number of segments in base iov

 * @to_read:	number of bytes to read from socket

 *

 * Return:	on success return number of bytes read from socket,

 *		otherwise return error number

/**

 * ksmbd_tcp_read() - read data from socket in given buffer

 * @t:		TCP transport instance

 * @buf:	buffer to store read data from socket

 * @to_read:	number of bytes to read from socket

 *

 * Return:	on success return number of bytes read from socket,

 *		otherwise return error number

 set zero to timeout */

/**

 * create_socket - create socket for ksmbd/0

 *

 * Return:	0 on success, error number otherwise

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2016 Namjae Jeon <namjae.jeon@protocolfreedom.org>

 *   Copyright (C) 2018 Samsung Electronics Co., Ltd.

/**

 * ksmbd_conn_free() - free resources of the connection instance

 *

 * @conn:	connection instance to be cleand up

 *

 * During the thread termination, the corresponding conn instance

 * resources(sock/memory) are released and finally the conn object is freed.

/**

 * ksmbd_conn_alloc() - initialize a new connection instance

 *

 * Return:	ksmbd_conn struct on success, otherwise NULL

	/*

	 * Stop current session if the time that get last request from client

	 * is bigger than deadtime user configured and opening file count is

	 * zero.

/**

 * ksmbd_conn_handler_loop() - session thread to listen on new smb requests

 * @p:		connection instance

 *

 * One thread each per connection

 *

 * Return:	0 on success

		/*

		 * Check if pdu size is valid (min : smb header size,

		 * max : 0x00FFFFFF).

 4 for rfc1002 length field */

		/*

		 * We already read 4 bytes to find out PDU size, now

		 * read in PDU

 Wait till all reference dropped to the Server object*/

 100ms */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2016 Namjae Jeon <linkinjeon@kernel.org>

 * Copyright (C) 2019 Samsung Electronics Co., Ltd.

/*

 * INODE hash

 init master fp hash table */

	/* because the reference count of fp is 0, it is guaranteed that

	 * there are not accesses to fp->lock_list.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2016 Namjae Jeon <linkinjeon@kernel.org>

 *   Copyright (C) 2018 Samsung Electronics Co., Ltd.

/**

 * check_session_id() - check for valid session id in smb header

 * @conn:	connection instance

 * @id:		session id from smb header

 *

 * Return:      1 if valid session id, otherwise 0

/**

 * smb2_get_ksmbd_tcon() - get tree connection information using a tree id.

 * @work:	smb work

 *

 * Return:	0 if there is a tree connection matched or these are

 *		skipable commands, otherwise error

/**

 * smb2_set_err_rsp() - set error response code on smb response

 * @work:	smb work containing response buffer

/**

 * is_smb2_neg_cmd() - is it smb2 negotiation command

 * @work:	smb work containing smb header

 *

 * Return:      true if smb2 negotiation command, otherwise false

 is it SMB2 header ? */

 make sure it is request not response message */

/**

 * is_smb2_rsp() - is it smb2 response

 * @work:	smb work containing smb response buffer

 *

 * Return:      true if smb2 response, otherwise false

 is it SMB2 header ? */

 make sure it is response not request message */

/**

 * get_smb2_cmd_val() - get smb command code from smb header

 * @work:	smb work containing smb request buffer

 *

 * Return:      smb2 request command value

/**

 * set_smb2_rsp_status() - set error response code on smb2 header

 * @work:	smb work containing response buffer

 * @err:	error response code

/**

 * init_smb2_neg_rsp() - initialize smb2 response for negotiate command

 * @work:	smb work containing smb request buffer

 *

 * smb2 negotiate response is sent in reply of smb1 negotiate command for

 * dialect auto-negotiation.

	/* Not setting conn guid rsp->ServerGUID, as it

	 * not used by client for identifying connection

 Default Max Message Size till SMB2.0, 64K*/

/**

 * smb2_set_rsp_credits() - set number of credits in response buffer

 * @work:	smb work containing smb response buffer

	/* according to smb2.credits smbtorture, Windows server

	 * 2016 or later grant up to 8192 credits at once.

	 *

	 * TODO: Need to adjuct CreditRequest value according to

	 * current cpu load

 Update CreditRequest in last request */

/**

 * init_chained_smb2_rsp() - initialize smb2 chained response

 * @work:	smb work containing smb response buffer

	/* Len of this response = updated RFC len - offset of previous cmd

	 * in the compound rsp

	/* Storing the current local FID which may be needed by subsequent

	 * command in the compound request

	/*

	 * Message is response. We don't grant oplock yet.

/**

 * is_chained_smb2_message() - check for chained command

 * @work:	smb work containing smb request buffer

 *

 * Return:      true if chained request, otherwise false

		/*

		 * This is last request in chained command,

		 * align response to 8 byte

/**

 * init_smb2_rsp_hdr() - initialize smb2 response

 * @work:	smb work containing smb request buffer

 *

 * Return:      0

	/*

	 * Message is response. We don't grant oplock yet.

/**

 * smb2_allocate_rsp_buf() - allocate smb2 response buffer

 * @work:	smb work containing smb request buffer

 *

 * Return:      0 on success, otherwise -ENOMEM

 allocate large response buf for chained commands */

/**

 * smb2_check_user_session() - check for valid session for a user

 * @work:	smb work containing smb request buffer

 *

 * Return:      0 on success, otherwise error

	/*

	 * SMB2_ECHO, SMB2_NEGOTIATE, SMB2_SESSION_SETUP command do not

	 * require a session id, so no need to validate user session's for

	 * these commands.

 Check for validity of user session */

/**

 * smb2_get_name() - get filename string from on the wire smb format

 * @share:	ksmbd_share_config pointer

 * @src:	source buffer

 * @maxlen:	maxlen of source string

 * @nls_table:	nls_table pointer

 *

 * Return:      matching converted filename on success, otherwise error ptr

/**

 * smb2_get_dos_mode() - get file mode in dos format from unix mode

 * @stat:	kstat containing file mode

 * @attribute:	attribute flags

 *

 * Return:      converted dos mode

 SMB2_CREATE_TAG_POSIX is "0x93AD25509CB411E7B42383DE968BCD7C" */

 Round to 8 byte boundary */

 Round to 8 byte boundary */

 Temporarily set to SMB3_COMPRESS_NONE */

 Round to 8 byte boundary */

 Round to 8 byte boundary */

 +4 is to account for the RFC1001 len field */

 check that offset is not beyond end of SMB */

 offsets must be 8 byte aligned */

/**

 * smb2_handle_negotiate() - handler for smb2 negotiate command

 * @work:	smb work containing smb request buffer

 *

 * Return:      0

 For stats */

	/* Not setting conn guid rsp->ServerGUID, as it

	 * not used by client for identifying server

 Check for previous session */

		/*

		 * Reuse session if anonymous try to connect

		 * on reauthetication.

		/*

		 * If session state is SMB2_SESSION_VALID, We can assume

		 * that it is reauthentication. And the user/password

		 * has been verified, so return it here.

			/*

			 * signing is disable if encryption is enable

			 * on this session

 Check previous session */

				/*

				 * Note: here total size -1 is done as an

				 * adjustment for 0 size blob

 TODO: need one more negotiation */

		/*

		 * SecurityBufferOffset should be set to zero

		 * in session setup error response.

			/*

			 * To avoid dictionary attacks (repeated session setups rapidly sent) to

			 * connect to server, ksmbd make a delay of a 5 seconds on session setup

			 * failure to make it harder to send enough random connection requests

			 * to break into a server.

/**

 * smb2_tree_connect() - handler for smb2 tree connect command

 * @work:	smb work containing smb request buffer

 *

 * Return:      0 on success, otherwise error

 default manual caching */

/**

 * smb2_create_open_flags() - convert smb open flags to unix open flags

 * @file_present:	is file already present

 * @access:		file access flags

 * @disposition:	file disposition flags

 * @may_flags:		set with MAY_ flags

 *

 * Return:      file open flags

/**

 * smb2_tree_disconnect() - handler for smb tree connect request

 * @work:	smb work containing request buffer

 *

 * Return:      0

/**

 * smb2_session_logoff() - handler for session log off request

 * @work:	smb work containing request buffer

 *

 * Return:      0

 Got a valid session, set connection state */

 setting CifsExiting here may race with start_tcp_sess */

 let start_tcp_sess free connection info now */

/**

 * create_smb2_pipe() - create IPC pipe

 * @work:	smb work containing request buffer

 *

 * Return:      0 on success, otherwise error

 StructureSize - 1*/

/**

 * smb2_set_ea() - handler for setting extended attributes using set

 *		info command

 * @eabuf:	set info command buffer

 * @buf_len:	set info command buffer length

 * @path:	dentry path for get ea

 *

 * Return:	0 on success, otherwise error

 delete the EA only when it exits */

 if the EA doesn't exist, just do nothing. */

 Check if there is stream prefix in xattr space */

 get FileAttributes from XATTR_NAME_DOS_ATTRIBUTE */

 Parse SD BUFFER create contexts */

/**

 * smb2_open() - handler for smb file open request

 * @work:	smb work containing request buffer

 *

 * Return:      0 on success, otherwise error

 Parse non-durable handle create contexts */

			/*

			 * If file exists with under flags, return access

			 * denied error.

create file if not present */

		/* FILE_READ_ATTRIBUTE is allowed without inode_permission,

		 * because execute(search) permission on a parent directory,

		 * is already granted.

 Obtain Volatile-ID */

 Get Persistent-ID */

 Set default windows and posix acls if creating new file */

	/* fp should be searchable through ksmbd_inode.m_fp_list

	 * after daccess, saccess, attrib_only, and stream are

	 * initialized.

 Check delete pending among previous fp before oplock break */

 StructureSize - 1*/

 If lease is request send lease context response */

/**

 * smb2_populate_readdir_entry() - encode directory entry in smb2 response

 * buffer

 * @conn:	connection instance

 * @info_level:	smb information level

 * @d_info:	structure included variables for query dir

 * @user_ns:	user namespace

 * @ksmbd_kstat:	ksmbd wrapper of dirent stat information

 *

 * if directory has many entries, find first can't read it fully.

 * find next might be called multiple times to read remaining dir entries

 *

 * Return:	0 on success, otherwise error

 Somehow the name has only terminating NULL bytes */

 switch (info_level) */

 switch (info_level) */

 dot and dotdot entries are already reserved */

	/*

	 * reserve dot and dotdot entries in head of buffer

	 * in first response

/**

 * buffer_check_err() - helper function to check buffer errors

 * @reqOutputBufferLength:	max buffer length expected in command response

 * @rsp:		query info response buffer contains output buffer length

 * @infoclass_size:	query info class response buffer size

 *

 * Return:	0 on success, otherwise error

 any unique number */

	/*

	 * Windows can sometime send query file info request on

	 * pipe without opening it, checking error condition here

/**

 * smb2_get_ea() - handler for smb2 get extended attribute command

 * @work:	smb work containing query info command buffer

 * @fp:		ksmbd_file pointer

 * @req:	get extended attribute request

 * @rsp:	response buffer pointer

 * @rsp_org:	base response buffer pointer in case of chained response

 *

 * Return:	0 on success, otherwise error

 single EA entry is requested with given user.* name */

 need to send all EAs, if no specific EA is requested*/

 there is no EA in the file */

		/*

		 * CIFS does not support EA other than user.* namespace,

		 * still keep the framework generic, to list other attrs

		 * in future.

 bailout if xattr can't fit in buf_free_len */

 align next xattr entry at 4 byte bundary */

 no more ea entries */

 plus : size */

 last entry offset should be 0 */

 smb2 info file called for pipe */

 Taking dummy value of serial number*/

		/*

		 * TODO : The current implementation is based on

		 * test result with win7(NTFS) server. It's need to

		 * modify this to get valid Quota values

		 * from Linux kernel

/**

 * smb2_query_info() - handler for smb2 query info command

 * @work:	smb work containing query info request buffer

 *

 * Return:	0 on success, otherwise error

/**

 * smb2_close_pipe() - handler for closing IPC pipe

 * @work:	smb work containing close request buffer

 *

 * Return:	0

/**

 * smb2_close() - handler for smb2 close file command

 * @work:	smb work containing close request buffer

 *

 * Return:	0

 file already closed, return FILE_CLOSED */

 file closed, stored id is not valid anymore */

/**

 * smb2_echo() - handler for smb2 echo(ping) command

 * @work:	smb work containing echo request buffer

 *

 * Return:	0

	/*

	 * TODO : It's working fine only when store dos attributes

	 * is not yes. need to implement a logic which works

	 * properly with any smb.conf option

		/*

		 * Allocation size could be smaller than original one

		 * which means allocated blocks in file should be

		 * deallocated. use truncate to cut out it, but inode

		 * size is also updated with truncate offset.

		 * inode size is retained by backup inode size.

	/*

	 * If FILE_END_OF_FILE_INFORMATION of set_info_file is called

	 * on FAT32 shared device, truncate execution time is too long

	 * and network error could cause from windows client. because

	 * truncate of some filesystem like FAT32 fill zero data in

	 * truncated range.

	/*

	 * TODO : need to implement consideration for

	 * FILE_SYNCHRONOUS_IO_ALERT and FILE_SYNCHRONOUS_IO_NONALERT

/**

 * smb2_set_info_file() - handler for smb2 set info command

 * @work:	smb work containing set info command buffer

 * @fp:		ksmbd_file pointer

 * @info_class:	smb2 set info class

 * @share:	ksmbd_share_config pointer

 *

 * Return:	0 on success, otherwise error

 * TODO: need to implement an error handling for STATUS_INFO_LENGTH_MISMATCH

/**

 * smb2_set_info() - handler for smb2 set info command handler

 * @work:	smb work containing set info request buffer

 *

 * Return:	0 on success, otherwise error

/**

 * smb2_read_pipe() - handler for smb2 read from IPC pipe

 * @work:	smb work containing read IPC pipe command buffer

 *

 * Return:	0 on success, otherwise error

/**

 * smb2_read() - handler for smb2 read from file

 * @work:	smb work containing read command buffer

 *

 * Return:	0 on success, otherwise error

 write data to the client using rdma channel */

/**

 * smb2_write_pipe() - handler for smb2 write on IPC pipe

 * @work:	smb work containing write IPC pipe command buffer

 *

 * Return:	0 on success, otherwise error

/**

 * smb2_write() - handler for smb2 write from file

 * @work:	smb work containing write command buffer

 *

 * Return:	0 on success, otherwise error

		/* read data from the client using rdma channel, and

		 * write the data.

/**

 * smb2_flush() - handler for smb2 flush file - fsync

 * @work:	smb work containing flush command buffer

 *

 * Return:	0 on success, otherwise error

/**

 * smb2_cancel() - handler for smb2 cancel command

 * @work:	smb work containing cancel command buffer

 *

 * Return:	0 on success, otherwise error

 For SMB2_CANCEL command itself send no response*/

 Checking for wrong flag combination during lock request*/

 check pending lock waiters */

/**

 * smb2_lock() - handler for smb2 file lock command

 * @work:	smb work containing lock command buffer

 *

 * Return:	0 on success, otherwise error

 Check conflict locks in one request */

 check locks in connection list */

 check zero byte lock range */

 verify the SRV_COPYCHUNK_COPY packet */

	/*

	 * FILE_READ_DATA should only be included in

	 * the FSCTL_COPYCHUNK case

 zero if this is last one */

			/*

			 * set STATUS_SOME_NOT_MAPPED response

			 * for unknown domain sid.

/**

 * smb2_ioctl() - handler for smb2 ioctl command

 * @work:	smb work containing ioctl command buffer

 *

 * Return:	0 on success, otherwise error

 Not support DFS yet */

		/*

		 * TODO: This is dummy implementation to pass smbtorture

		 * Need to check correct response later

/**

 * smb20_oplock_break_ack() - handler for smb2.0 oplock break command

 * @work:	smb work containing oplock break command buffer

 *

 * Return:	0

/**

 * smb21_lease_break_ack() - handler for smb2.1 lease break command

 * @work:	smb work containing lease break command buffer

 *

 * Return:	0

 check for bad lease state */

 valid lease state changes */

/**

 * smb2_oplock_break() - dispatcher for smb2.0 and 2.1 oplock/lease break

 * @work:	smb work containing oplock/lease break command buffer

 *

 * Return:	0

/**

 * smb2_notify() - handler for smb2 notify request

 * @work:   smb work containing notify command buffer

 *

 * Return:      0

/**

 * smb2_is_sign_req() - handler for checking packet signing status

 * @work:	smb work containing notify command buffer

 * @command:	SMB2 command id

 *

 * Return:	true if packed is signed, false otherwise

/**

 * smb2_check_sign_req() - handler for req packet sign processing

 * @work:   smb work containing notify command buffer

 *

 * Return:	1 on success, 0 otherwise

/**

 * smb2_set_sign_rsp() - handler for rsp packet sign processing

 * @work:   smb work containing notify command buffer

 *

/**

 * smb3_check_sign_req() - handler for req packet sign processing

 * @work:   smb work containing notify command buffer

 *

 * Return:	1 on success, 0 otherwise

/**

 * smb3_set_sign_rsp() - handler for rsp packet sign processing

 * @work:   smb work containing notify command buffer

 *

/**

 * smb3_preauth_hash_rsp() - handler for computing preauth hash on response

 * @work:   smb work containing response buffer

 *

 fill transform header */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * The ASB.1/BER parsing code is derived from ip_nat_snmp_basic.c which was in

 * turn derived from the gxsnmp package by Gregory McLean & Jochen Friedrich

 *

 * Copyright (c) 2000 RP Internet (www.rpi.net.au).

 insert tag */

 insert seq */

 insert main gss header */

 insert neg result */

 insert oid */

 insert response token - ntlmssp blob */

 insert main gss header */

 insert neg result */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2017, Microsoft Corporation.

 *   Copyright (C) 2018, LG Electronics.

 *

 *   Author(s): Long Li <longli@microsoft.com>,

 *		Hyunchul Lee <hyc.lee@gmail.com>

 *

 *   This program is free software;  you can redistribute it and/or modify

 *   it under the terms of the GNU General Public License as published by

 *   the Free Software Foundation; either version 2 of the License, or

 *   (at your option) any later version.

 *

 *   This program is distributed in the hope that it will be useful,

 *   but WITHOUT ANY WARRANTY;  without even the implied warranty of

 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See

 *   the GNU General Public License for more details.

 SMB_DIRECT negotiation timeout in seconds */

/*

 * Default maximum number of RDMA read/write outstanding on this connection

 * This value is possibly decreased during QP creation on hardware limit

 Maximum number of retries on data transfer operations */

 No need to retry on Receiver Not Ready since SMB_DIRECT manages credits */

/*

 * User configurable initial values per SMB_DIRECT transport connection

 * as defined in [MS-SMBD] 3.1.1.1

 * Those may change after a SMB_DIRECT negotiation

 The local peer's maximum number of credits to grant to the peer */

 The remote peer's credit request of local peer */

 The maximum single message size can be sent to remote peer */

  The maximum fragmented upper-layer payload receive size supported */

  The maximum single-message size which can be received */

	/*

	 * Make sure reassembly_data_length is updated after list and

	 * reassembly_queue_length are updated. On the dequeue side

	 * reassembly_data_length is checked without a lock to determine

	 * if reassembly_queue_length and list is up to date

	/*

	 * No need to hold the reassembly queue lock all the time as we are

	 * the only one reading from the front of the queue. The transport

	 * may add more entries to the back of the queue at the same time

		/*

		 * Need to make sure reassembly_data_length is read before

		 * reading reassembly_queue_length and calling

		 * get_first_reassembly. This call is lock free

		 * as we never read at the end of the queue which are being

		 * updated in SOFTIRQ as more data is received

			/*

			 * The upper layer expects RFC1002 length at the

			 * beginning of the payload. Return it to indicate

			 * the total length of the packet. This minimize the

			 * change to upper layer packet processing logic. This

			 * will be eventually remove when an intermediate

			 * transport layer is added

 move on to the next buffer? */

				/*

				 * No need to lock if we are not at the

				 * end of the queue

	/* iterate and free the list of messages in reverse. the list's head

	 * is invalid.

 Fill in the packet header */

 Map the packet to DMA */

 If this is a packet without payload, don't send padding */

FIXME: skip RFC1002 header..

 iov[start] is too big, break it */

 send out all remaining vecs */

	/*

	 * As an optimization, we don't wait for individual I/O to finish

	 * before sending the next one.

	 * Send them all and wait for pending send count to get to 0

	 * that means all the I/Os have been out and we are good to return

 TODO: mempool */

	/* need 2 more sge. because a SMB_DIRECT header will be mapped,

	 * and maybe a send buffer could be not page aligned.

	/*

	 * allow smb_direct_max_outstanding_rw_ops of in-flight RDMA

	 * read/writes. HCA guarantees at least max_send_sge of sges for

	 * a RDMA read/write work request, and if memory registration is used,

	 * we need reg_mr, local_inv wrs for each read/write.

	/* When a client is running out of send credits, the credits are

	 * granted by the server's sending a packet using this queue.

	 * This avoids the situation that a clients cannot send packets

	 * for lack of credits

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2018 Samsung Electronics Co., Ltd.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2018 Samsung Electronics Co., Ltd.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2018 Samsung Electronics Co., Ltd.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2018 Samsung Electronics Co., Ltd.

 Avoid put_path() */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (C) 2018 Samsung Electronics Co., Ltd.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  inode.c - part of tracefs, a pseudo file system for activating tracing

 *

 * Based on debugfs by: Greg Kroah-Hartman <greg@kroah.com>

 *

 *  Copyright (C) 2014 Red Hat Inc, author: Steven Rostedt <srostedt@redhat.com>

 *

 * tracefs is the file system that is used by the tracing infrastructure.

	/*

	 * The mkdir call can call the generic functions that create

	 * the files within the tracefs system. It is up to the individual

	 * mkdir routine to handle races.

	/*

	 * The rmdir call can call the generic functions that create

	 * the files within the tracefs system. It is up to the individual

	 * rmdir routine to handle races.

	 * This time we need to unlock not only the parent (inode) but

	 * also the directory that is being deleted.

		/*

		 * We might like to report bad mount options here;

		 * but traditionally tracefs has ignored all mount options

	/* If the parent is not specified, we create it in the root.

	 * We need the root dentry to do this, which is in the super

	 * block. A pointer to that is in the struct vfsmount that we

	 * have around.

/**

 * tracefs_create_file - create a file in the tracefs filesystem

 * @name: a pointer to a string containing the name of the file to create.

 * @mode: the permission that the file should have.

 * @parent: a pointer to the parent dentry for this file.  This should be a

 *          directory dentry if set.  If this parameter is NULL, then the

 *          file will be created in the root of the tracefs filesystem.

 * @data: a pointer to something that the caller will want to get to later

 *        on.  The inode.i_private pointer will point to this value on

 *        the open() call.

 * @fops: a pointer to a struct file_operations that should be used for

 *        this file.

 *

 * This is the basic "create a file" function for tracefs.  It allows for a

 * wide range of flexibility in creating a file, or a directory (if you want

 * to create a directory, the tracefs_create_dir() function is

 * recommended to be used instead.)

 *

 * This function will return a pointer to a dentry if it succeeds.  This

 * pointer must be passed to the tracefs_remove() function when the file is

 * to be removed (no automatic cleanup happens if your module is unloaded,

 * you are responsible here.)  If an error occurs, %NULL will be returned.

 *

 * If tracefs is not enabled in the kernel, the value -%ENODEV will be

 * returned.

 Do not set bits for OTH */

 directory inodes start off with i_nlink == 2 (for "." entry) */

/**

 * tracefs_create_dir - create a directory in the tracefs filesystem

 * @name: a pointer to a string containing the name of the directory to

 *        create.

 * @parent: a pointer to the parent dentry for this file.  This should be a

 *          directory dentry if set.  If this parameter is NULL, then the

 *          directory will be created in the root of the tracefs filesystem.

 *

 * This function creates a directory in tracefs with the given name.

 *

 * This function will return a pointer to a dentry if it succeeds.  This

 * pointer must be passed to the tracefs_remove() function when the file is

 * to be removed. If an error occurs, %NULL will be returned.

 *

 * If tracing is not enabled in the kernel, the value -%ENODEV will be

 * returned.

/**

 * tracefs_create_instance_dir - create the tracing instances directory

 * @name: The name of the instances directory to create

 * @parent: The parent directory that the instances directory will exist

 * @mkdir: The function to call when a mkdir is performed.

 * @rmdir: The function to call when a rmdir is performed.

 *

 * Only one instances directory is allowed.

 *

 * The instances directory is special as it allows for mkdir and rmdir to

 * to be done by userspace. When a mkdir or rmdir is performed, the inode

 * locks are released and the methods passed in (@mkdir and @rmdir) are

 * called without locks and with the name of the directory being created

 * within the instances directory.

 *

 * Returns the dentry of the instances directory.

 Only allow one instance of the instances directory. */

/**

 * tracefs_remove - recursively removes a directory

 * @dentry: a pointer to a the dentry of the directory to be removed.

 *

 * This function recursively removes a directory tree in tracefs that

 * was previously created with a call to another tracefs function

 * (like tracefs_create_file() or variants thereof.)

/**

 * tracefs_initialized - Tells whether tracefs has been registered

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012 Red Hat, Inc.

 * Copyright (C) 2012 Jeremy Kerr <jeremy.kerr@canonical.com>

/*

 * Compare two efivarfs file names.

 *

 * An efivarfs filename is composed of two parts,

 *

 *	1. A case-sensitive variable name

 *	2. A case-insensitive GUID

 *

 * So we need to perform a case-sensitive match on part 1 and a

 * case-insensitive match on part 2.

 Case-sensitive compare for the variable name */

 Case-insensitive compare for the GUID */

 GUID is case-insensitive. */

 name, plus '-', plus GUID, plus NUL*/

 replace invalid slashes like kobject_set_name_vargs does for /sys/firmware/efi/vars. */

 copied by the above to local storage in the dentry. */

 Remove all entries and destroy */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012 Red Hat, Inc.

 * Copyright (C) 2012 Jeremy Kerr <jeremy.kerr@canonical.com>

/*

 * Return true if 'str' is a valid efivarfs filename of the form,

 *

 *	VariableName-12345678-1234-1234-1234-1234567891bc

	/*

	 * We need a GUID, plus at least one letter for the variable name,

	 * plus the '-' separator

 GUID must be preceded by a '-' */

	/*

	 * Validate that 's' is of the correct format, e.g.

	 *

	 *	12345678-1234-1234-1234-123456789abc

 length of the variable name itself: remove GUID and separator */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012 Red Hat, Inc.

 * Copyright (C) 2012 Jeremy Kerr <jeremy.kerr@canonical.com>

	/*

	 * efivarfs represents uncommitted variables with

	 * zero-length files. Reading them should return EOF.

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/fs/minix/namei.c

 *

 *  Copyright (C) 1991, 1992  Linus Torvalds

/*

 * directories can handle most operations...

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/fs/minix/inode.c

 *

 *  Copyright (C) 1991, 1992  Linus Torvalds

 *

 *  Copyright (C) 1996  Gertjan van Wingerde

 *	Minix V2 fs support.

 *

 *  Modified for 680x0 by Andreas Schwab

 *  Updated to filesystem version 3 by Daniel Aragones

 s_state is now out from V3 sb */

	/*

	 * Make sure all delayed rcu free inodes are flushed before we

	 * destroy cache.

 Mounting a rw partition read-only. */

 Mount a partition which is read-only, read-write. */

	/*

	 * s_max_size must not exceed the block mapping limitation.  This check

	 * is only needed for V1 filesystems, since V2/V3 support an extra level

	 * of indirect blocks which places the limit well above U32_MAX.

	/*

	 * Allocate the buffer map to keep the superblock small.

	/* Apparently minix can create filesystems that allocate more blocks for

	 * the bitmaps than needed.  We simply ignore that, but verify it didn't

	 * create one with not enough blocks and bail out if so.

 set up enough so that it can read an inode */

 s_state is now out from V3 sb */

/*

 * The minix V1 function to read an inode.

/*

 * The minix V2 function to read an inode.

/*

 * The global function to read an inode.

/*

 * The minix V1 function to synchronize an inode.

/*

 * The minix V2 function to synchronize an inode.

/*

 * The function that is called for file truncation.

 SPDX-License-Identifier: GPL-2.0

 Generic part */

 i_data is not going away, no lock needed */

 Allocate the next block */

 Allocation failed, free what we already allocated */

 Verify that place we are splicing to is still there and vacant */

 We are done with atomic stuff, now do the rest of housekeeping */

 had we spliced it onto indirect block? */

 Simplest case - block found, no allocation needed */

 Clean up and exit */

 the whole chain */

 Next simple case - plain lookup or failed read of indirect block */

	/*

	 * Indirect block might be removed by truncate while we were

	 * reading it. Handling of that case (forget what we've got and

	 * reread) is taken out of the main path.

 Clear the ends of indirect blocks on the shared branch */

 Kill the remaining (whole) subtrees */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/fs/minix/dir.c

 *

 *  Copyright (C) 1991, 1992 Linus Torvalds

 *

 *  minix directory handling functions

 *

 *  Updated to filesystem version 3 by Daniel Aragones

/*

 * Return the offset into page `page_nr' of the last valid

 * byte in that page, plus one.

/*

 *	minix_find_entry()

 *

 * finds an entry in the specified directory with the wanted name. It

 * returns the cache buffer in which the entry was found, and the entry

 * itself (as a parameter - res_dir). It does NOT read the inode of the

 * entry - you'll have to do that yourself if you want to.

	/*

	 * We take care of directory expansion in the same loop

	 * This code plays outside i_size, so it locks the page

	 * to protect that region.

 We hit i_size */

/*

 * routine to check that the specified directory is empty (for rmdir)

 check for . and .. */

 Releases the page */

 SPDX-License-Identifier: GPL-2.0

 Have triple indirect */

 32 bit, host order */

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/fs/minix/file.c

 *

 *  Copyright (C) 1991, 1992 Linus Torvalds

 *

 *  minix regular file handling primitives

/*

 * We have mostly NULLs here: the current defaults are OK for

 * the minix filesystem.

 SPDX-License-Identifier: GPL-2.0

/*

 *  linux/fs/minix/bitmap.c

 *

 *  Copyright (C) 1991, 1992  Linus Torvalds

/*

 * Modified for 680x0 by Hamish Macdonald

 * Fixed for 680x0 by Andreas Schwab

 bitmap.c contains the code that handles the inode and block bitmaps */

/*

 * bitmap consists of blocks filled with 16bit words

 * bit set == busy, bit clear == free

 * endianness is a mess, but for counting zero bits it really doesn't matter...

 Clear the link count and mode of a deleted inode on disk. */

 clear on-disk copy */

 shouldn't happen */

 SPDX-License-Identifier: GPL-2.0

 Only double indirect */

 16 bit, host order */

 SPDX-License-Identifier: GPL-2.0+

/*

 * linux/fs/jbd2/commit.c

 *

 * Written by Stephen C. Tweedie <sct@redhat.com>, 1998

 *

 * Copyright 1998 Red Hat corp --- All Rights Reserved

 *

 * Journal commit routines for the generic filesystem journaling code;

 * part of the ext2fs journaling system.

/*

 * IO end handler for temporary buffer_heads handling writes to the journal.

/*

 * When an ext4 file is truncated, it is possible that some pages are not

 * successfully freed, because they are attached to a committing transaction.

 * After the transaction commits, these pages are left on the LRU, with no

 * ->mapping, and with attached buffers.  These pages are trivially reclaimable

 * by the VM, but their apparent absence upsets the VM accounting, and it makes

 * the numbers in /proc/meminfo look odd.

 *

 * So here, we have a buffer which has just come off the forget list.  Look to

 * see if we can strip all buffers from the backing page.

 *

 * Called under lock_journal(), and possibly under journal_datalist_lock.  The

 * caller provided us with a ref against the buffer, and we drop that here.

 OK, it's a truncated page */

/*

 * Done it all: now submit the commit record.  We should have

 * cleaned up our previous buffers by now, so if we are in abort

 * mode we can now just skip the rest of the journal write

 * entirely.

 *

 * Returns 1 if the journal needs to be aborted or 0 on success

/*

 * This function along with journal_submit_commit_record

 * allows to write the commit record asynchronously.

 One for getblk() */

/*

 * write the filemap data using writepage() address_space_operations.

 * We don't do block allocation here even for delalloc. We don't

 * use writepages() because with delayed allocation we may be doing

 * block allocation in writepages().

	/*

	 * submit the inode data buffers. We use writepage

	 * instead of writepages. Because writepages can do

	 * block allocation with delalloc. We need to write

	 * only allocated blocks here.

 Send all the data buffers related to an inode */

/*

 * Submit all the data buffers of inode associated with the transaction to

 * disk.

 *

 * We are in a committing transaction. Therefore no new inode can be added to

 * our inode list. We use JI_COMMIT_RUNNING flag to protect inode we currently

 * operate on from being released while we write out pages.

 submit the inode data buffers. */

/*

 * Wait for data submitted for writeout, refile inodes to proper

 * transaction if needed.

 *

 For locking, see the comment in journal_submit_data_buffers() */

 wait for the inode data buffers writeout. */

 Now refile inode to proper lists */

/*

 * jbd2_journal_commit_transaction

 *

 * The primary function for committing a transaction to the log.  This

 * function is called by the journal thread to begin a complete commit.

 For transactional checksums */

 Tail of the journal */

	/*

	 * First job: lock down the current transaction and wait for

	 * all outstanding updates to complete.

 Do we need to erase the effects of a prior jbd2_journal_flush? */

		/*

		 * We hold j_checkpoint_mutex so tail cannot change under us.

		 * We don't need any special data guarantees for writing sb

		 * since journal is empty and it is ok for write to be

		 * flushed only with transaction commit.

		/*

		 * TODO: by blocking fast commits here, we are increasing

		 * fsync() latency slightly. Strictly speaking, we don't need

		 * to block fast commits until the transaction enters T_FLUSH

		 * state. So an optimization is possible where we block new fast

		 * commits here and wait for existing ones to complete

		 * just before we enter T_FLUSH. That way, the existing fast

		 * commits and this full commit can proceed parallely.

	/*

	 * First thing we are allowed to do is to discard any remaining

	 * BJ_Reserved buffers.  Note, it is _not_ permissible to assume

	 * that there are no such buffers: if a large filesystem

	 * operation like a truncate needs to split itself over multiple

	 * transactions, then it may try to do a jbd2_journal_restart() while

	 * there are still BJ_Reserved buffers outstanding.  These must

	 * be released cleanly from the current transaction.

	 *

	 * In this case, the filesystem must still reserve write access

	 * again before modifying the buffer in the new transaction, but

	 * we do not require it to remember exactly which old buffers it

	 * has reserved.  This is consistent with the existing behaviour

	 * that multiple jbd2_journal_get_write_access() calls to the same

	 * buffer are perfectly permissible.

		/*

		 * A jbd2_journal_get_undo_access()+jbd2_journal_release_buffer() may

		 * leave undo-committed data.

	/*

	 * Now try to drop any written-back buffers from the journal's

	 * checkpoint lists.  We do this *before* commit because it potentially

	 * frees some memory

	/*

	 * Clear revoked flag to reflect there is no revoked buffers

	 * in the next transaction which is going to be started.

	/*

	 * Switch to a new revoke table.

	/*

	 * Reserved credits cannot be claimed anymore, free them

	/*

	 * Now start flushing things to disk, in the order they appear

	 * on the transaction lists.  Data blocks go first.

	/*

	 * Way to go: we have now written out all of the data for a

	 * transaction!  Now comes the tricky part: we need to write out

	 * metadata.  Loop over the transaction's entire buffer list:

 Find the next buffer to be journaled... */

		/* If we're in abort mode, we just un-journal the buffer and

			/* If that was the last one, we need to clean up

			 * any descriptor buffers which may have been

			 * already allocated, even if we are now

		/* Make sure we have a descriptor block in which to

			/* Record it so that we can wait for IO

 Where is the buffer to be written? */

		/* If the block mapping failed, just abandon the buffer

		   and repeat this loop: we'll fall into the

		/*

		 * start_this_handle() uses t_outstanding_credits to determine

		 * the free space in the log.

		/* Bump b_count to prevent truncate from stumbling over

                   the shadowed buffer!  @@@ This can go if we ever get

		/*

		 * Make a temporary IO buffer with which to write it out

		 * (this will requeue the metadata buffer to BJ_Shadow).

		/* Record the new block's tag in the current descriptor

		/* If there's no more to do, or if the descriptor is full,

			/* Write an end-of-descriptor marker before

                           submitting the IOs.  "tag" still points to

				/*

				 * Compute checksum.

			/* Force a new descriptor to be generated next

	/*

	 * Get current oldest transaction in the log before we issue flush

	 * to the filesystem device. After the flush we can be sure that

	 * blocks of all older transactions are checkpointed to persistent

	 * storage and we will be safe to update journal start in the

	 * superblock with the numbers we get here.

 Update tail only if we free significant amount of space */

	/* 

	 * If the journal is not located on the file system device,

	 * then we must flush the file system device before we issue

	 * the commit record

 Done it all: now write the commit record asynchronously. */

	/* Lo and behold: we have just managed to send a transaction to

           the log.  Before we can commit it, wait for the IO so far to

           complete.  Control buffers being written are on the

           transaction's t_log_list queue, and metadata buffers are on

           the io_bufs list.



	   Wait for the buffers in reverse order.  That way we are

	   less likely to be woken up until all IOs have completed, and

	   so we incur less scheduling load.

		/*

		 * The list contains temporary buffer heads created by

		 * jbd2_journal_write_metadata_buffer().

 We also have to refile the corresponding shadowed buffer */

		/* The metadata is now released for reuse, but we need

                   to remember it against this transaction so that when

                   we finally commit, we can do any checkpointing

 Here we wait for the revoke record and descriptor record buffers */

 One for getblk */

 AKPM: bforget here */

	/*

	 * Now disk caches for filesystem device are flushed so we are safe to

	 * erase checkpointed transactions from the log by updating journal

	 * superblock.

	/* End of a transaction!  Finally, we can do checkpoint

           processing: any buffers committed as a result of this

           transaction can be removed from any checkpoint list it was on

	/*

	 * As there are other places (journal_unmap_buffer()) adding buffers

	 * to this list we have to be careful and hold the j_list_lock.

		/*

		 * Get a reference so that bh cannot be freed before we are

		 * done with it.

		/*

		 * If there is undo-protected committed data against

		 * this buffer, then we can remove it now.  If it is a

		 * buffer needing such protection, the old frozen_data

		 * field now points to a committed version of the

		 * buffer, so rotate that field to the new committed

		 * data.

		 *

		 * Otherwise, we can just throw away the frozen data now.

		 *

		 * We also know that the frozen data has already fired

		 * its triggers if they exist, so we can clear that too.

		/* Only re-checkpoint the buffer_head if it is marked

		 * dirty.  If the buffer was added to the BJ_Forget list

		 * by jbd2_journal_forget, it may no longer be dirty and

		 * there's no point in keeping a checkpoint record for

		/*

		 * A buffer which has been freed while still being journaled

		 * by a previous transaction, refile the buffer to BJ_Forget of

		 * the running transaction. If the just committed transaction

		 * contains "add to orphan" operation, we can completely

		 * invalidate the buffer now. We are rather through in that

		 * since the buffer may be still accessible when blocksize <

		 * pagesize and it is attached to the last partial page.

			/*

			 * Block device buffers need to stay mapped all the

			 * time, so it is enough to clear buffer_jbddirty and

			 * buffer_freed bits. For the file mapping buffers (i.e.

			 * journalled data) we need to unmap buffer and clear

			 * more bits. We also need to be careful about the check

			 * because the data page mapping can get cleared under

			 * our hands. Note that if mapping == NULL, we don't

			 * need to make buffer unmapped because the page is

			 * already detached from the mapping and buffers cannot

			 * get reused.

			/*

			 * The buffer on BJ_Forget list and not jbddirty means

			 * it has been freed by this transaction and hence it

			 * could not have been reallocated until this

			 * transaction has committed. *BUT* it could be

			 * reallocated once we have written all the data to

			 * disk and before we process the buffer on BJ_Forget

			 * list.

 Drops bh reference */

	/*

	 * This is a bit sleazy.  We use j_list_lock to protect transition

	 * of a transaction into T_FINISHED state and calling

	 * __jbd2_journal_drop_transaction(). Otherwise we could race with

	 * other checkpointing code processing the transaction...

	/*

	 * Now recheck if some buffers did not get attached to the transaction

	 * while the lock was dropped...

	/* Add the transaction to the checkpoint list

	 * __journal_remove_checkpoint() can not destroy transaction

 Done with this transaction! */

	/*

	 * File the transaction statistics

	/*

	 * weight the commit time higher than the average time so we don't

	 * react too strongly to vast changes in the commit time

 Check if the transaction can be dropped now that we are finished */

	/*

	 * Calculate overall stats

 SPDX-License-Identifier: GPL-2.0+

/*

 * linux/fs/jbd2/journal.c

 *

 * Written by Stephen C. Tweedie <sct@redhat.com>, 1998

 *

 * Copyright 1998 Red Hat corp --- All Rights Reserved

 *

 * Generic filesystem journal-writing code; part of the ext2fs

 * journaling system.

 *

 * This file manages journals: areas of disk reserved for logging

 * transactional updates.  This includes the kernel journaling thread

 * which is responsible for scheduling updates to the log.

 *

 * We do not actually manage the physical storage of the journal in this

 * file: that is left to a per-journal policy function, which allows us

 * to store the journal within a filesystem-specified area for ext2

 * journaling (ext2 can use a reserved inode for storing the log).

 Checksumming functions */

/*

 * Helper function used to manage commit timeouts

/*

 * kjournald2: The main thread function used to manage a logging device

 * journal.

 *

 * This kernel thread is responsible for two things:

 *

 * 1) COMMIT:  Every so often we need to commit the current state of the

 *    filesystem to disk.  The journal thread is responsible for writing

 *    all of the metadata buffers to disk. If a fast commit is ongoing

 *    journal thread waits until it's done and then continues from

 *    there on.

 *

 * 2) CHECKPOINT: We cannot reuse a used section of the log file until all

 *    of the data in that part of the log has been rewritten elsewhere on

 *    the disk.  Flushing these old buffers to reclaim space in the log is

 *    known as checkpointing, and this thread is responsible for that job.

	/*

	 * Set up an interval timer which can be used to trigger a commit wakeup

	 * after the commit interval expires

 Record that the journal thread is running */

	/*

	 * Make sure that no allocations from this kernel thread will ever

	 * recurse to the fs layer because we are responsible for the

	 * transaction commit and any fs involvement might get stuck waiting for

	 * the trasn. commit.

	/*

	 * And now, wait forever for commit wakeup events.

		/*

		 * The simpler the better. Flushing journal isn't a

		 * good idea, because that depends on threads that may

		 * be already stopped.

		/*

		 * We assume on resume that commits are already there,

		 * so we don't sleep

	/*

	 * Were we woken up by a commit wakeup event?

/*

 * jbd2_journal_write_metadata_buffer: write a metadata buffer to the journal.

 *

 * Writes a metadata buffer to a given disk block.  The actual IO is not

 * performed but a new buffer_head is constructed which labels the data

 * to be written with the correct destination disk block.

 *

 * Any magic-number escaping which needs to be done will cause a

 * copy-out here.  If the buffer happens to start with the

 * JBD2_MAGIC_NUMBER, then we can't write it to the log directly: the

 * magic number is only written to the log for descripter blocks.  In

 * this case, we copy the data and replace the first word with 0, and we

 * return a result code which indicates that this buffer needs to be

 * marked as an escaped buffer in the corresponding log descriptor

 * block.  The missing word can then be restored when the block is read

 * during recovery.

 *

 * If the source buffer has already been modified by a new transaction

 * since we took the last commit snapshot, we use the frozen copy of

 * that data for IO. If we end up using the existing buffer_head's data

 * for the write, then we have to make sure nobody modifies it while the

 * IO is in progress. do_get_write_access() handles this.

 *

 * The function returns a pointer to the buffer_head to be used for IO.

 *

 *

 * Return value:

 *  <0: Error

 * >=0: Finished OK

 *

 * On success:

 * Bit 0 set == escape performed on the data

 * Bit 1 set == buffer copy-out performed (kfree the data after IO)

	/*

	 * The buffer really shouldn't be locked: only the current committing

	 * transaction is allowed to write it, so nobody else is allowed

	 * to do any IO.

	 *

	 * akpm: except if we're journalling data, and write() output is

	 * also part of a shared mapping, and another thread has

	 * decided to launch a writepage() against this buffer.

 keep subsequent assertions sane */

	/*

	 * If a new transaction has already done a buffer copy-out, then

	 * we use that version of the data for the commit.

	/*

	 * Fire data frozen trigger if data already wasn't frozen.  Do this

	 * before checking for escaping, as the trigger may modify the magic

	 * offset.  If a copy-out happens afterwards, it will have the correct

	 * data in the buffer.

	/*

	 * Check for escaping

	/*

	 * Do we need to do a data copy?

		/*

		 * This isn't strictly necessary, as we're using frozen

		 * data for the escaping, but it keeps consistency with

		 * b_frozen_data usage.

	/*

	 * Did we need to do an escaping?  Now we've done all the

	 * copying, we can finally do so.

	/*

	 * The to-be-written buffer needs to get moved to the io queue,

	 * and the original buffer whose contents we are shadowing or

	 * copying is moved to the transaction's shadow queue.

/*

 * Allocation code for the journal file.  Manage the space left in the

 * journal, so that we can begin checkpointing when appropriate.

/*

 * Called with j_state_lock locked for writing.

 * Returns true if a transaction commit was started.

 Return if the txn has already requested to be committed */

	/*

	 * The only transaction we can possibly wait upon is the

	 * currently running transaction (if it exists).  Otherwise,

	 * the target tid must be an old one.

		/*

		 * We want a new commit: OK, mark the request and wakeup the

		 * commit thread.  We do _not_ do the commit ourselves.

		/* This should never happen, but if it does, preserve

		   the evidence before kjournald goes into a loop and

/*

 * Force and wait any uncommitted transactions.  We can only force the running

 * transaction if we don't have an active handle, otherwise, we will deadlock.

 * Returns: <0 in case of error,

 *           0 if nothing to commit,

 *           1 if transaction was successfully committed.

 Nothing to commit */

/**

 * jbd2_journal_force_commit_nested - Force and wait upon a commit if the

 * calling process is not within transaction.

 *

 * @journal: journal to force

 * Returns true if progress was made.

 *

 * This is used for forcing out undo-protected data which contains

 * bitmaps, when the fs is running out of space.

/**

 * jbd2_journal_force_commit() - force any uncommitted transactions

 * @journal: journal to force

 *

 * Caller want unconditional commit. We can only force the running transaction

 * if we don't have an active handle, otherwise, we will deadlock.

/*

 * Start a commit of the current running transaction (if any).  Returns true

 * if a transaction is going to be committed (or is currently already

 * committing), and fills its tid in at *ptid

		/* There's a running transaction and we've just made sure

		/*

		 * If commit has been started, then we have to wait for

		 * completion of that transaction.

/*

 * Return 1 if a given transaction has not yet sent barrier request

 * connected with a transaction commit. If 0 is returned, transaction

 * may or may not have sent the barrier. Used to avoid sending barrier

 * twice in common cases.

 Transaction already committed? */

	/*

	 * Transaction is being committed and we already proceeded to

	 * submitting a flush to fs partition?

/*

 * Wait for a specified commit to complete.

 * The caller may not hold the journal lock.

	/*

	 * Some callers make sure transaction is already committing and in that

	 * case we cannot block on open handles anymore. So don't warn in that

	 * case.

/*

 * Start a fast commit. If there's an ongoing fast or full commit wait for

 * it to complete. Returns 0 if a new fast commit was started. Returns -EALREADY

 * if a fast commit is not needed, either because there's an already a commit

 * going on or this tid has already been committed. Returns -EINVAL if no jbd2

 * commit has yet been performed.

	/*

	 * Fast commits only allowed if at least one full commit has

	 * been processed.

/*

 * Stop a fast commit. If fallback is set, this function starts commit of

 * TID tid before any other fast commit can start.

 Return 1 when transaction with given tid has already committed. */

/*

 * When this function returns the transaction corresponding to tid

 * will be completed.  If the transaction has currently running, start

 * committing that transaction before waiting for it to complete.  If

 * the transaction id is stale, it is by definition already completed,

 * so just return SUCCESS.

 transaction not yet started, so request it */

/*

 * Log buffer allocation routines:

 Map one fast commit buffer for use by the file system */

/*

 * Wait on fast commit buffers that were allocated by jbd2_fc_get_buf

 * for completion.

	/*

	 * Wait in reverse order to minimize chances of us being woken up before

	 * all IOs have completed

/*

 * Conversion of logical to physical block numbers for the journal

 *

 * On external journals the journal blocks are identity-mapped, so

 * this is a no-op.  If needed, we can use j_blk_offset - everything is

 * ready.

 +journal->j_blk_offset */

/*

 * We play buffer_head aliasing tricks to write data/metadata blocks to

 * the journal without copying their contents, but for journal

 * descriptor blocks we do need to generate bona fide buffers.

 *

 * After the caller of jbd2_journal_get_descriptor_buffer() has finished modifying

 * the buffer's contents they really should run flush_dcache_page(bh->b_page).

 * But we don't bother doing that, so there will be coherency problems with

 * mmaps of blockdevs which hold live JBD-controlled filesystems.

/*

 * Return tid of the oldest transaction in the journal and block in the journal

 * where the transaction starts.

 *

 * If the journal is now empty, return which will be the next transaction ID

 * we will write and where will that transaction start.

 *

 * The return value is 0 if journal tail cannot be pushed any further, 1 if

 * it can.

/*

 * Update information in journal structure and in on disk journal superblock

 * about log tail. This function does not check whether information passed in

 * really pushes log tail further. It's responsibility of the caller to make

 * sure provided log tail information is valid (e.g. by holding

 * j_checkpoint_mutex all the time between computing log tail and calling this

 * function as is the case with jbd2_cleanup_journal_tail()).

 *

 * Requires j_checkpoint_mutex

	/*

	 * We cannot afford for write to remain in drive's caches since as

	 * soon as we update j_tail, next transaction can start reusing journal

	 * space and if we lose sb update during power failure we'd replay

	 * old transaction with possibly newly overwritten data.

/*

 * This is a variation of __jbd2_update_log_tail which checks for validity of

 * provided log tail and locks j_checkpoint_mutex. So it is safe against races

 * with other threads updating log tail.

 Minimum size of descriptor tag */

	/*

	 * Tag with 32-bit block numbers does not use last four bytes of the

	 * structure

/**

 * jbd2_journal_shrink_scan()

 *

 * Scan the checkpointed buffer on the checkpoint list and release the

 * journal_head.

/**

 * jbd2_journal_shrink_count()

 *

 * Count the number of checkpoint buffers on the checkpoint list.

/*

 * Management for journal control blocks: functions to create and

 * destroy journal_t structures, and to initialise and read existing

/* First: create and setup a journal_t object in memory.  We initialise

 * very few fields yet: that has to wait until we have created the

 15ms */

 The journal is marked for error until we succeed with recovery! */

 Set up a default-sized revoke table for the new mount. */

 journal descriptor can store up to n blocks -bzzz */

 We need enough buffers to write out full descriptor block. */

/* jbd2_journal_init_dev and jbd2_journal_init_inode:

 *

 * Create a journal structure assigned some fixed set of disk blocks to

 * the journal.  We don't actually touch those disk blocks yet, but we

 * need to set up all of the mapping information to tell the journaling

 * system where the journal blocks are.

 *

/**

 *  journal_t * jbd2_journal_init_dev() - creates and initialises a journal structure

 *  @bdev: Block device on which to create the journal

 *  @fs_dev: Device which hold journalled filesystem for this journal.

 *  @start: Block nr Start of journal.

 *  @len:  Length of the journal in blocks.

 *  @blocksize: blocksize of journalling device

 *

 *  Returns: a newly created journal_t *

 *

 *  jbd2_journal_init_dev creates a journal which maps a fixed contiguous

 *  range of blocks on an arbitrary block device.

 *

/**

 *  journal_t * jbd2_journal_init_inode () - creates a journal which maps to a inode.

 *  @inode: An inode to create the journal in

 *

 * jbd2_journal_init_inode creates a journal which maps an on-disk inode as

 * the journal.  The inode must exist already, must support bmap() and

 * must have all data blocks preallocated.

/*

 * If the journal init or create aborts, we need to mark the journal

 * superblock as being NULL to prevent the journal destroy from writing

 * back a bogus superblock.

/*

 * Given a journal_t structure, initialise the various fields for

 * startup of a new journaling session.  We use this both when creating

 * a journal, and after recovering an old journal to reset it for

 * subsequent use.

	/*

	 * Now that journal recovery is done, turn fast commits off here. This

	 * way, if fast commit was enabled before the crash but if now FS has

	 * disabled it, we don't enable fast commits.

	/*

	 * As a special case, if the on-disk copy is already marked as needing

	 * no recovery (s_start == 0), then we can safely defer the superblock

	 * update until the next commit by setting JBD2_FLUSHED.  This avoids

	 * attempting a write to a potential-readonly device.

 Lock here to make assertions happy... */

		/*

		 * Update log tail information. We use REQ_FUA since new

		 * transaction will start reusing journal space and so we

		 * must make sure information about current log tail is on

		 * disk before that.

/*

 * This function expects that the caller will have locked the journal

 * buffer head, and will return with it unlocked

 Buffer got discarded which means block device got invalidated */

		/*

		 * Oh, dear.  A previous attempt to write the journal

		 * superblock failed.  This could happen because the

		 * USB device was yanked out.  Or it could happen to

		 * be a transient write error and maybe the block will

		 * be remapped.  Nothing we can do but to retry the

		 * write and hope for the best.

/**

 * jbd2_journal_update_sb_log_tail() - Update log tail in journal sb on disk.

 * @journal: The journal to update.

 * @tail_tid: TID of the new transaction at the tail of the log

 * @tail_block: The first block of the transaction at the tail of the log

 * @write_op: With which operation should we write the journal sb

 *

 * Update a journal's superblock information about log tail and write it to

 * disk, waiting for the IO to complete.

 Log is no longer empty */

/**

 * jbd2_mark_journal_empty() - Mark on disk journal as empty.

 * @journal: The journal to update.

 * @write_op: With which operation should we write the journal sb

 *

 * Update a journal's dynamic superblock fields to show that journal is empty.

 * Write updated superblock to disk waiting for IO to complete.

 Is it already empty? */

		/*

		 * When journal is clean, no need to commit fast commit flag and

		 * make file system incompatible with older kernels.

 Log is no longer empty */

/**

 * __jbd2_journal_erase() - Discard or zeroout journal blocks (excluding superblock)

 * @journal: The journal to erase.

 * @flags: A discard/zeroout request is sent for each physically contigous

 *	region of the journal. Either JBD2_JOURNAL_FLUSH_DISCARD or

 *	JBD2_JOURNAL_FLUSH_ZEROOUT must be set to determine which operation

 *	to perform.

 *

 * Note: JBD2_JOURNAL_FLUSH_ZEROOUT attempts to use hardware offload. Zeroes

 * will be explicitly written if no hardware offload is available, see

 * blkdev_issue_zeroout for more details.

 logical */

 physical */

 flags must be set to either discard or zeroout */

	/*

	 * lookup block mapping and issue discard/zeroout for each

	 * contiguous region

		/*

		 * last block not contiguous with current block,

		 * process last contiguous region and return to this block on

		 * next loop

			/*

			 * if this isn't the last block of journal,

			 * no need to process now because next block may also

			 * be part of this contiguous region

		/*

		 * end of contiguous region or this is last block of journal,

		 * take care of the region

 reset start and stop after processing a region */

/**

 * jbd2_journal_update_sb_errno() - Update error in the journal.

 * @journal: The journal to update.

 *

 * Update a journal's errno.  Write updated superblock to disk waiting for IO

 * to complete.

/*

 * Read the superblock for a given journal, performing initial

 * validation of the format.

 Can't have checksum v2 and v3 at the same time! */

 Can't have checksum v1 and v2 on at the same time! */

 Load the checksum driver */

 Check superblock checksum */

 Precompute checksum seed for all metadata */

/*

 * Load the on-disk journal superblock and read the key fields into the

 * journal_t.

/**

 * jbd2_journal_load() - Read journal from disk.

 * @journal: Journal to act on.

 *

 * Given a journal_t structure which tells us which disk blocks contain

 * a journal, read the journal from disk to initialise the in-memory

 * structures.

	/* If this is a V2 superblock, then we have to check the

	/*

	 * Create a slab for this blocksize

	/* Let the recovery code check whether it needs to recover any

	/*

	 * clear JBD2_ABORT flag initialized in journal_init_common

	 * here to update log tail information with the newest seq.

	/* OK, we've finished with the dynamic journal bits:

	 * reinitialise the dynamic contents of the superblock in memory

/**

 * jbd2_journal_destroy() - Release a journal_t structure.

 * @journal: Journal to act on.

 *

 * Release a journal_t structure once it is no longer in use by the

 * journaled object.

 * Return <0 if we couldn't clean up the journal.

 Wait for the commit thread to wake up and die. */

 Force a final log commit */

 Force any old transactions to disk */

 Totally anal locking here... */

		/*

		 * If checkpointing failed, just free the buffers to avoid

		 * looping forever

	/*

	 * OK, all checkpoint transactions have been checked, now check the

	 * write out io error flag and abort the journal if some buffer failed

	 * to write back to the original location, otherwise the filesystem

	 * may become inconsistent.

/**

 * jbd2_journal_check_used_features() - Check if features specified are used.

 * @journal: Journal to check.

 * @compat: bitmask of compatible features

 * @ro: bitmask of features that force read-only mount

 * @incompat: bitmask of incompatible features

 *

 * Check whether the journal uses all of a given set of

 * features.  Return true (non-zero) if it does.

 Load journal superblock if it is not loaded yet. */

/**

 * jbd2_journal_check_available_features() - Check feature set in journalling layer

 * @journal: Journal to check.

 * @compat: bitmask of compatible features

 * @ro: bitmask of features that force read-only mount

 * @incompat: bitmask of incompatible features

 *

 * Check whether the journaling code supports the use of

 * all of a given set of features on this journal.  Return true

	/* We can support any known requested features iff the

	 * superblock is in version 2.  Otherwise we fail to support any

 Are we called twice? */

/**

 * jbd2_journal_set_features() - Mark a given journal feature in the superblock

 * @journal: Journal to act on.

 * @compat: bitmask of compatible features

 * @ro: bitmask of features that force read-only mount

 * @incompat: bitmask of incompatible features

 *

 * Mark a given journal feature as present on the

 * superblock.  Returns true if the requested features could be set.

 *

 If enabling v2 checksums, turn on v3 instead */

 Asking for checksumming v3 and v1?  Only give them v3. */

 Load the checksum driver if necessary */

 Precompute checksum seed for all metadata */

 If enabling v3 checksums, update superblock */

 If enabling v1 checksums, downgrade superblock */

/*

 * jbd2_journal_clear_features() - Clear a given journal feature in the

 * 				    superblock

 * @journal: Journal to act on.

 * @compat: bitmask of compatible features

 * @ro: bitmask of features that force read-only mount

 * @incompat: bitmask of incompatible features

 *

 * Clear a given journal feature as present on the

 * superblock.

/**

 * jbd2_journal_flush() - Flush journal

 * @journal: Journal to act on.

 * @flags: optional operation on the journal blocks after the flush (see below)

 *

 * Flush all data for a given journal to disk and empty the journal.

 * Filesystems can use this when remounting readonly to ensure that

 * recovery does not need to happen on remount. Optionally, a discard or zeroout

 * can be issued on the journal blocks after flushing.

 *

 * flags:

 *	JBD2_JOURNAL_FLUSH_DISCARD: issues discards for the journal blocks

 *	JBD2_JOURNAL_FLUSH_ZEROOUT: issues zeroouts for the journal blocks

 Force everything buffered to the log... */

 Wait for the log commit to complete... */

 ...and flush everything in the log out to disk. */

	/* Finally, mark the journal as really needing no recovery.

	 * This sets s_start==0 in the underlying superblock, which is

	 * the magic code for a fully-recovered superblock.  Any future

	 * commits of data to the journal will restore the current

/**

 * jbd2_journal_wipe() - Wipe journal contents

 * @journal: Journal to act on.

 * @write: flag (see below)

 *

 * Wipe out all of the contents of a journal, safely.  This will produce

 * a warning if the journal contains any valid recovery information.

 * Must be called between journal_init_*() and jbd2_journal_load().

 *

 * If 'write' is non-zero, then we wipe out the journal on disk; otherwise

 * we merely suppress recovery.

 Lock to make assertions happy... */

/**

 * jbd2_journal_abort () - Shutdown the journal immediately.

 * @journal: the journal to shutdown.

 * @errno:   an error number to record in the journal indicating

 *           the reason for the shutdown.

 *

 * Perform a complete, immediate shutdown of the ENTIRE

 * journal (not of a single transaction).  This operation cannot be

 * undone without closing and reopening the journal.

 *

 * The jbd2_journal_abort function is intended to support higher level error

 * recovery mechanisms such as the ext2/ext3 remount-readonly error

 * mode.

 *

 * Journal abort has very specific semantics.  Any existing dirty,

 * unjournaled buffers in the main filesystem will still be written to

 * disk by bdflush, but the journaling mechanism will be suspended

 * immediately and no further transaction commits will be honoured.

 *

 * Any dirty, journaled buffers will be written back to disk without

 * hitting the journal.  Atomicity cannot be guaranteed on an aborted

 * filesystem, but we _do_ attempt to leave as much data as possible

 * behind for fsck to use for cleanup.

 *

 * Any attempt to get a new transaction handle on a journal which is in

 * ABORT state will just result in an -EROFS error return.  A

 * jbd2_journal_stop on an existing handle will return -EIO if we have

 * entered abort state during the update.

 *

 * Recursive transactions are not disturbed by journal abort until the

 * final jbd2_journal_stop, which will receive the -EIO error.

 *

 * Finally, the jbd2_journal_abort call allows the caller to supply an errno

 * which will be recorded (if possible) in the journal superblock.  This

 * allows a client to record failure conditions in the middle of a

 * transaction without having to complete the transaction to record the

 * failure to disk.  ext3_error, for example, now uses this

 * functionality.

 *

	/*

	 * Lock the aborting procedure until everything is done, this avoid

	 * races between filesystem's error handling flow (e.g. ext4_abort()),

	 * ensure panic after the error info is written into journal's

	 * superblock.

	/*

	 * ESHUTDOWN always takes precedence because a file system check

	 * caused by any other journal abort error is not required after

	 * a shutdown triggered.

	/*

	 * Mark the abort as occurred and start current running transaction

	 * to release all journaled buffer.

	/*

	 * Record errno to the journal super block, so that fsck and jbd2

	 * layer could realise that a filesystem check is needed.

/**

 * jbd2_journal_errno() - returns the journal's error state.

 * @journal: journal to examine.

 *

 * This is the errno number set with jbd2_journal_abort(), the last

 * time the journal was mounted - if the journal was stopped

 * without calling abort this will be 0.

 *

 * If the journal has been aborted on this mount time -EROFS will

 * be returned.

/**

 * jbd2_journal_clear_err() - clears the journal's error state

 * @journal: journal to act on.

 *

 * An error must be cleared or acked to take a FS out of readonly

 * mode.

/**

 * jbd2_journal_ack_err() - Ack journal err.

 * @journal: journal to act on.

 *

 * An error must be cleared or acked to take a FS out of readonly

 * mode.

/*

 * helper functions to deal with 32 or 64bit block numbers.

/*

 * JBD memory management

 *

 * These functions are used to allocate block-sized chunks of memory

 * used for making copies of buffer_head data.  Very often it will be

 * page-sized chunks of data, but sometimes it will be in

 * sub-page-size chunks.  (For example, 16k pages on Power systems

 * with a 4k block file system.)  For blocks smaller than a page, we

 * use a SLAB allocator.  There are slab caches for each block size,

 * which are allocated at mount time, if necessary, and we only free

 * (all of) the slab caches when/if the jbd2 module is unloaded.  For

 * this reason we don't need to a mutex to protect access to

 * jbd2_slab[] allocating or releasing memory; only in

 * jbd2_journal_create_slab().

 Already created */

 Must be a power of 2 */

	/* Check alignment; SLUB has gotten this wrong in the past,

/*

 * Journal_head storage management

 offset */

 ctor */

/*

 * journal_head splicing and dicing

/*

 * A journal_head is attached to a buffer_head whenever JBD has an

 * interest in the buffer.

 *

 * Whenever a buffer has an attached journal_head, its ->b_state:BH_JBD bit

 * is set.  This bit is tested in core kernel code where we need to take

 * JBD-specific actions.  Testing the zeroness of ->b_private is not reliable

 * there.

 *

 * When a buffer has its BH_JBD bit set, its ->b_count is elevated by one.

 *

 * When a buffer has its BH_JBD bit set it is immune from being released by

 * core kernel code, mainly via ->b_count.

 *

 * A journal_head is detached from its buffer_head when the journal_head's

 * b_jcount reaches zero. Running transaction (b_transaction) and checkpoint

 * transaction (b_cp_transaction) hold their references to b_jcount.

 *

 * Various places in the kernel want to attach a journal_head to a buffer_head

 * _before_ attaching the journal_head to a transaction.  To protect the

 * journal_head in this situation, jbd2_journal_add_journal_head elevates the

 * journal_head's b_jcount refcount by one.  The caller must call

 * jbd2_journal_put_journal_head() to undo this.

 *

 * So the typical usage would be:

 *

 *	(Attach a journal_head if needed.  Increments b_jcount)

 *	struct journal_head *jh = jbd2_journal_add_journal_head(bh);

 *	...

 *      (Get another reference for transaction)

 *	jbd2_journal_grab_journal_head(bh);

 *	jh->b_transaction = xxx;

 *	(Put original reference)

 *	jbd2_journal_put_journal_head(jh);

/*

 * Give a buffer_head a journal_head.

 *

 * May sleep.

 We consumed it */

/*

 * Grab a ref against this buffer_head's journal_head.  If it ended up not

 * having a journal_head, return NULL

 Unlink before dropping the lock */

 debug, really */

/*

 * Drop a reference on the passed journal_head.  If it fell to zero then

 * release the journal_head from the buffer_head.

/*

 * Initialize jbd inode head

/*

 * Function to be called before we start removing inode from memory (i.e.,

 * clear_inode() is a fine place to be called from). It removes inode from

 * transaction's lists.

 Is commit writing out inode - we have to wait */

/*

 * Module startup and shutdown

 SPDX-License-Identifier: GPL-2.0+

/*

 * linux/fs/jbd2/revoke.c

 *

 * Written by Stephen C. Tweedie <sct@redhat.com>, 2000

 *

 * Copyright 2000 Red Hat corp --- All Rights Reserved

 *

 * Journal revoke routines for the generic filesystem journaling code;

 * part of the ext2fs journaling system.

 *

 * Revoke is the mechanism used to prevent old log records for deleted

 * metadata from being replayed on top of newer data using the same

 * blocks.  The revoke mechanism is used in two separate places:

 *

 * + Commit: during commit we write the entire list of the current

 *   transaction's revoked blocks to the journal

 *

 * + Recovery: during recovery we record the transaction ID of all

 *   revoked blocks.  If there are multiple revoke records in the log

 *   for a single block, only the last one counts, and if there is a log

 *   entry for a block beyond the last revoke, then that log entry still

 *   gets replayed.

 *

 * We can get interactions between revokes and new log data within a

 * single transaction:

 *

 * Block is revoked and then journaled:

 *   The desired end result is the journaling of the new block, so we

 *   cancel the revoke before the transaction commits.

 *

 * Block is journaled and then revoked:

 *   The revoke must take precedence over the write of the block, so we

 *   need either to cancel the journal entry or to write the revoke

 *   later in the log than the log block.  In this case, we choose the

 *   latter: journaling a block cancels any revoke record for that block

 *   in the current transaction, so any revoke for that block in the

 *   transaction must have happened after the block was journaled and so

 *   the revoke must take precedence.

 *

 * Block is revoked and then written as data:

 *   The data write is allowed to succeed, but the revoke is _not_

 *   cancelled.  We still need to prevent old log records from

 *   overwriting the new data.  We don't even need to clear the revoke

 *   bit here.

 *

 * We cache revoke status of a buffer in the current transaction in b_states

 * bits.  As the name says, revokevalid flag indicates that the cached revoke

 * status of a buffer is valid and we can rely on the cached status.

 *

 * Revoke information on buffers is a tri-state value:

 *

 * RevokeValid clear:	no cached revoke status, need to look it up

 * RevokeValid set, Revoked clear:

 *			buffer has not been revoked, and cancel_revoke

 *			need do nothing.

 * RevokeValid set, Revoked set:

 *			buffer has been revoked.

 *

 * Locking rules:

 * We keep two hash tables of revoke records. One hashtable belongs to the

 * running transaction (is pointed to by journal->j_revoke), the other one

 * belongs to the committing transaction. Accesses to the second hash table

 * happen only from the kjournald and no other thread touches this table.  Also

 * journal_switch_revoke_table() which switches which hashtable belongs to the

 * running and which to the committing transaction is called only from

 * kjournald. Therefore we need no locks when accessing the hashtable belonging

 * to the committing transaction.

 *

 * All users operating on the hash table belonging to the running transaction

 * have a handle to the transaction. Therefore they are safe from kjournald

 * switching hash tables under them. For operations on the lists of entries in

 * the hash table j_revoke_lock is used.

 *

 * Finally, also replay code uses the hash tables but at this moment no one else

 * can touch them (filesystem isn't mounted yet) and hence no locking is

 * needed.

/* Each revoke record represents one single revoked block.  During

   journal replay, this involves recording the transaction ID of the

 Used for recovery only */

 The revoke table is just a simple hash table of revoke records. */

	/* It is conceivable that we might want a larger hash table

 Utility functions to maintain the revoke table */

 Find a revoke record in the journal's hash table. */

 Initialise the revoke table for a given journal to a given size. */

 Destroy a journal's revoke table.  The table must already be empty! */

/*

 * jbd2_journal_revoke: revoke a given buffer_head from the journal.  This

 * prevents the block from being replayed during recovery if we take a

 * crash after this current transaction commits.  Any subsequent

 * metadata writes of the buffer in this transaction cancel the

 * revoke.

 *

 * Note that this call may block --- it is up to the caller to make

 * sure that there are no further calls to journal_write_metadata

 * before the revoke is complete.  In ext3, this implies calling the

 * revoke before clearing the block bitmap when we are deleting

 * metadata.

 *

 * Revoke performs a jbd2_journal_forget on any buffer_head passed in as a

 * parameter, but does _not_ forget the buffer_head if the bh was only

 * found implicitly.

 *

 * bh_in may not be a journalled buffer - it may have come off

 * the hash tables without an attached journal_head.

 *

 * If bh_in is non-zero, jbd2_journal_revoke() will decrement its b_count

 * by one.

		/* If there is a different buffer_head lying around in

 ... and it has RevokeValid status... */

				/* ...then it better be revoked too,

				 * since it's illegal to create a revoke

				 * record against a buffer_head which is

				 * not marked revoked --- that would

				 * risk missing a subsequent revoke

	/* We really ought not ever to revoke twice in a row without

           first having the revoke cancelled: it's illegal to free a

/*

 * Cancel an outstanding revoke.  For use only internally by the

 * journaling code (called from jbd2_journal_get_write_access).

 *

 * We trust buffer_revoked() on the buffer if the buffer is already

 * being journaled: if there is no revoke pending on the buffer, then we

 * don't do anything here.

 *

 * This would break if it were possible for a buffer to be revoked and

 * discarded, and then reallocated within the same transaction.  In such

 * a case we would have lost the revoked bit, but when we arrived here

 * the second time we would still have a pending revoke to cancel.  So,

 * do not trust the Revoked bit on buffers unless RevokeValid is also

 * set.

 akpm: debug */

	/* Is the existing Revoke bit valid?  If so, we trust it, and

	 * only perform the full cancel if the revoke bit is set.  If

	 * not, we can't trust the revoke bit, and we need to do the

 There better not be one left behind by now! */

	/* Finally, have we just cleared revoke on an unhashed

	 * buffer_head?  If so, we'd better make sure we clear the

	 * revoked status on any hashed alias too, otherwise the revoke

/*

 * journal_clear_revoked_flag clears revoked flag of buffers in

 * revoke table to reflect there is no revoked buffers in the next

 * transaction which is going to be started.

/* journal_switch_revoke table select j_revoke for next transaction

 * we do not want to suspend any processing until all revokes are

 * written -bzzz

/*

 * Write revoke records to the journal for all entries in the current

 * revoke hash, deleting the entries as we go.

 select revoke table for committing transaction */

/*

 * Write out one revoke record.  We need to create a new descriptor

 * block if the old one is full or if we have not already created one.

	/* If we are already aborting, this all becomes a noop.  We

           still need to go round the loop in

           jbd2_journal_write_revoke_records in order to free all of the

 Do we need to leave space at the end for a checksum? */

 Make sure we have a descriptor with space left for the record */

 Record it so that we can wait for IO completion later */

/*

 * Flush a revoke descriptor out to the journal.  If we are aborting,

 * this is a noop; otherwise we are generating a buffer which needs to

 * be waited for during commit, so it has to go onto the appropriate

 * journal buffer list.

/*

 * Revoke support for recovery.

 *

 * Recovery needs to be able to:

 *

 *  record all revoke records, including the tid of the latest instance

 *  of each revoke in the journal

 *

 *  check whether a given block in a given transaction should be replayed

 *  (ie. has not been revoked by a revoke record in that or a subsequent

 *  transaction)

 *

 *  empty the revoke table after recovery.

/*

 * First, setting revoke records.  We create a new revoke record for

 * every block ever revoked in the log as we scan it for recovery, and

 * we update the existing records if we find multiple revokes for a

 * single block.

		/* If we have multiple occurrences, only record the

/*

 * Test revoke records.  For a given block referenced in the log, has

 * that block been revoked?  A revoke record with a given transaction

 * sequence number revokes all blocks in that transaction and earlier

 * ones, but later transactions still need replayed.

/*

 * Finally, once recovery is over, we need to clear the revoke table so

 * that it can be reused by the running filesystem.

 SPDX-License-Identifier: GPL-2.0+

/*

 * linux/fs/jbd2/checkpoint.c

 *

 * Written by Stephen C. Tweedie <sct@redhat.com>, 1999

 *

 * Copyright 1999 Red Hat Software --- All Rights Reserved

 *

 * Checkpoint routines for the generic filesystem journaling code.

 * Part of the ext2fs journaling system.

 *

 * Checkpointing is the process of ensuring that a section of the log is

 * committed fully to disk, so that that portion of the log can be

 * reused.

/*

 * Unlink a buffer from a transaction checkpoint list.

 *

 * Called with j_list_lock held.

/*

 * Unlink a buffer from a transaction checkpoint(io) list.

 *

 * Called with j_list_lock held.

/*

 * Move a buffer from the checkpoint list to the checkpoint io list

 *

 * Called with j_list_lock held

/*

 * Check a checkpoint buffer could be release or not.

 *

 * Requires j_list_lock

/*

 * __jbd2_log_wait_for_space: wait until there is space in the journal.

 *

 * Called under j-state_lock *only*.  It will be unlocked if we have to wait

 * for a checkpoint to free up some space in the log.

 assert_spin_locked(&journal->j_state_lock); */

		/*

		 * Test again, another process may have checkpointed while we

		 * were waiting for the checkpoint lock. If there are no

		 * transactions ready to be checkpointed, try to recover

		 * journal space by calling cleanup_journal_tail(), and if

		 * that doesn't work, by waiting for the currently committing

		 * transaction to complete.  If there is absolutely no way

		 * to make progress, this is either a BUG or corrupted

		 * filesystem, so abort the journal and leave a stack

		 * trace for forensic evidence.

 We were able to recover space; yay! */

				/*

				 * jbd2_journal_commit_transaction() may want

				 * to take the checkpoint_mutex if JBD2_FLUSHED

				 * is set.  So we need to temporarily drop it.

/*

 * Perform an actual checkpoint. We take the first transaction on the

 * list of transactions to be checkpointed and send all its buffers

 * to disk. We submit larger chunks of data at once.

 *

 * The journal should be locked before calling this function.

 * Called with j_checkpoint_mutex held.

	/*

	 * First thing: if there are any transactions in the log which

	 * don't need checkpointing, just eliminate them from the

	 * journal straight away.

	/*

	 * OK, we need to start writing disk blocks.  Take one transaction

	 * and write it.

	/*

	 * If someone cleaned up this transaction while we slept, we're

	 * done (maybe it's a new transaction, but it fell at the same

	 * address).

 checkpoint all of the transaction's buffers */

 the journal_head may have gone by now */

				/*

				 * The journal thread is dead; so

				 * starting and waiting for a commit

				 * to finish will cause us to wait for

				 * a _very_ long time.

			/*

			 * jbd2_journal_commit_transaction() may want

			 * to take the checkpoint_mutex if JBD2_FLUSHED

			 * is set, jbd2_update_log_tail() called by

			 * jbd2_journal_commit_transaction() may also take

			 * checkpoint_mutex.  So we need to temporarily

			 * drop it.

 The transaction was released; we're done */

		/*

		 * Important: we are about to write the buffer, and

		 * possibly block, while still holding the journal

		 * lock.  We cannot afford to let the transaction

		 * logic start messing around with this buffer before

		 * we write it to disk, as that would break

		 * recoverability.

	/*

	 * Now we issued all of the transaction's buffers, let's deal

	 * with the buffers that are out for I/O.

 Did somebody clean up the transaction in the meanwhile? */

 the journal_head may have gone by now */

		/*

		 * Now in whatever state the buffer currently is, we

		 * know that it has been written out and so we can

		 * drop it from the list

/*

 * Check the list of checkpoint transactions for the journal to see if

 * we have already got rid of any since the last update of the log tail

 * in the journal superblock.  If so, we can instantly roll the

 * superblock forward to remove those transactions from the log.

 *

 * Return <0 on error, 0 on success, 1 if there was nothing to clean up.

 *

 * Called with the journal lock held.

 *

 * This is the only part of the journaling code which really needs to be

 * aware of transaction aborts.  Checkpointing involves writing to the

 * main filesystem area rather than to the journal, so it can proceed

 * even in abort state, but we must not update the super block if

 * checkpointing may have failed.  Otherwise, we would lose some metadata

 * buffers which should be written-back to the filesystem.

	/*

	 * We need to make sure that any blocks that were recently written out

	 * --- perhaps by jbd2_log_do_checkpoint() --- are flushed out before

	 * we drop the transactions from the journal. It's unlikely this will

	 * be necessary, especially with an appropriately sized journal, but we

	 * need this to guarantee correctness.  Fortunately

	 * jbd2_cleanup_journal_tail() doesn't get called all that often.

 Checkpoint list management */

/*

 * journal_clean_one_cp_list

 *

 * Find all the written-back checkpoint buffers in the given list and

 * release them. If 'destroy' is set, clean all buffers unconditionally.

 *

 * Called with j_list_lock held.

 * Returns 1 if we freed the transaction, 0 otherwise.

		/*

		 * This function only frees up some memory

		 * if possible so we dont have an obligation

		 * to finish processing. Bail out if preemption

		 * requested:

/*

 * journal_shrink_one_cp_list

 *

 * Find 'nr_to_scan' written-back checkpoint buffers in the given list

 * and try to release them. If the whole transaction is released, set

 * the 'released' parameter. Return the number of released checkpointed

 * buffers.

 *

 * Called with j_list_lock held.

/*

 * jbd2_journal_shrink_checkpoint_list

 *

 * Find 'nr_to_scan' written-back checkpoint buffers in the journal

 * and try to release them. Return the number of released checkpointed

 * buffers.

 *

 * Called with j_list_lock held.

	/*

	 * Get next shrink transaction, resume previous scan or start

	 * over again. If some others do checkpoint and drop transaction

	 * from the checkpoint list, we ignore saved j_shrink_transaction

	 * and start over unconditionally.

/*

 * journal_clean_checkpoint_list

 *

 * Find all the written-back checkpoint buffers in the journal and release them.

 * If 'destroy' is set, release all buffers unconditionally.

 *

 * Called with j_list_lock held.

		/*

		 * This function only frees up some memory if possible so we

		 * dont have an obligation to finish processing. Bail out if

		 * preemption requested:

		/*

		 * It is essential that we are as careful as in the case of

		 * t_checkpoint_list with removing the buffer from the list as

		 * we can possibly see not yet submitted buffers on io_list

		/*

		 * Stop scanning if we couldn't free the transaction. This

		 * avoids pointless scanning of transactions which still

		 * weren't checkpointed.

/*

 * Remove buffers from all checkpoint lists as journal is aborted and we just

 * need to free memory

	/*

	 * We loop because __jbd2_journal_clean_checkpoint_list() may abort

	 * early due to a need of rescheduling.

/*

 * journal_remove_checkpoint: called after a buffer has been committed

 * to disk (either by being write-back flushed to disk, or being

 * committed to the log).

 *

 * We cannot safely clean a transaction out of the log until all of the

 * buffer updates committed in that transaction have safely been stored

 * elsewhere on disk.  To achieve this, all of the buffers in a

 * transaction need to be maintained on the transaction's checkpoint

 * lists until they have been rewritten, at which point this function is

 * called to remove the buffer from the existing transaction's

 * checkpoint lists.

 *

 * The function returns 1 if it frees the transaction, 0 otherwise.

 * The function can free jh and bh.

 *

 * This function is called with j_list_lock held.

	/*

	 * If we have failed to write the buffer out to disk, the filesystem

	 * may become inconsistent. We cannot abort the journal here since

	 * we hold j_list_lock and we have to be careful about races with

	 * jbd2_journal_destroy(). So mark the writeback IO error in the

	 * journal here and we abort the journal later from a better context.

 Is this transaction empty? */

	/*

	 * There is one special case to worry about: if we have just pulled the

	 * buffer off a running or committing transaction's checkpoing list,

	 * then even if the checkpoint list is empty, the transaction obviously

	 * cannot be dropped!

	 *

	 * The locking here around t_state is a bit sleazy.

	 * See the comment at the end of jbd2_journal_commit_transaction().

	/*

	 * OK, that was the last buffer for the transaction, we can now

	 * safely remove this transaction from the log.

/*

 * journal_insert_checkpoint: put a committed buffer onto a checkpoint

 * list so that we know when it is safe to clean the transaction out of

 * the log.

 *

 * Called with the journal locked.

 * Called with j_list_lock held.

 Get reference for checkpointing transaction */

/*

 * We've finished with this transaction structure: adios...

 *

 * The transaction must have no links except for the checkpoint by this

 * point.

 *

 * Called with the journal locked.

 * Called with j_list_lock held.

 SPDX-License-Identifier: GPL-2.0+

/*

 * linux/fs/jbd2/transaction.c

 *

 * Written by Stephen C. Tweedie <sct@redhat.com>, 1998

 *

 * Copyright 1998 Red Hat corp --- All Rights Reserved

 *

 * Generic filesystem transaction handling code; part of the ext2fs

 * journaling system.

 *

 * This file manages transactions (compound commits managed by the

 * journaling code) and handles (individual atomic operations by the

 * filesystem).

/*

 * Base amount of descriptor blocks we reserve for each transaction.

 Subtract UUID */

 Commit code leaves a slack space of 16 bytes at the end of block */

	/*

	 * Revoke descriptors are accounted separately so we need to reserve

	 * space for commit block and normal transaction descriptor blocks.

/*

 * jbd2_get_transaction: obtain a new transaction_t object.

 *

 * Simply initialise a new transaction. Initialize it in

 * RUNNING state and add it to the current journal (which should not

 * have an existing running transaction: we only make a new transaction

 * once we have started to commit the old one).

 *

 * Preconditions:

 *	The journal MUST be locked.  We don't perform atomic mallocs on the

 *	new transaction	and we can't block without protecting against other

 *	processes trying to touch the journal while it is in transition.

 *

 Set up the commit timer for the new transaction. */

/*

 * Handle management.

 *

 * A handle_t is an object which represents a single atomic update to a

 * filesystem, and which tracks all of the modifications which form part

 * of that one update.

/*

 * Update transaction's maximum wait time, if debugging is enabled.

 *

 * In order for t_max_wait to be reliable, it must be protected by a

 * lock.  But doing so will mean that start_this_handle() can not be

 * run in parallel on SMP systems, which limits our scalability.  So

 * unless debugging is enabled, we no longer update t_max_wait, which

 * means that maximum wait time reported by the jbd2_run_stats

 * tracepoint will always be zero.

/*

 * Wait until running transaction passes to T_FLUSH state and new transaction

 * can thus be started. Also starts the commit if needed. The function expects

 * running transaction to exist and releases j_state_lock.

/*

 * Wait until running transaction transitions from T_SWITCH to T_FLUSH

 * state and new transaction can thus be started. The function releases

 * j_state_lock.

	/*

	 * We don't call jbd2_might_wait_for_commit() here as there's no

	 * waiting for outstanding handles happening anymore in T_SWITCH state

	 * and handling of reserved handles actually relies on that for

	 * correctness.

/*

 * Wait until we can add credits for handle to the running transaction.  Called

 * with j_state_lock held for reading. Returns 0 if handle joined the running

 * transaction. Returns 1 if we had to wait, j_state_lock is dropped, and

 * caller must retry.

 *

 * Note: because j_state_lock may be dropped depending on the return

 * value, we need to fake out sparse so ti doesn't complain about a

 * locking imbalance.  Callers of add_transaction_credits will need to

 * make a similar accomodation.

	/*

	 * If the current transaction is locked down for commit, wait

	 * for the lock to be released.

 fake out sparse */

	/*

	 * If there is not enough space left in the log to write all

	 * potential buffers requested by this operation, we need to

	 * stall pending a log checkpoint to free some more log space.

		/*

		 * If the current transaction is already too large,

		 * then start to commit it: we can then go back and

		 * attach this handle to a new transaction.

		/*

		 * Is the number of reserved credits in the current transaction too

		 * big to fit this handle? Wait until reserved credits are freed.

 fake out sparse */

 fake out sparse */

	/*

	 * The commit code assumes that it can get enough log space

	 * without forcing a checkpoint.  This is *critical* for

	 * correctness: a checkpoint of a buffer which is also

	 * associated with a committing transaction creates a deadlock,

	 * so commit simply cannot force through checkpoints.

	 *

	 * We must therefore ensure the necessary space in the journal

	 * *before* starting to dirty potentially checkpointed buffers

	 * in the new transaction.

 fake out sparse */

 No reservation? We are done... */

 We allow at most half of a transaction to be reserved */

 fake out sparse */

/*

 * start_this_handle: Given a handle, deal with any locking or stalling

 * needed to make sure that there is enough journal space for the handle

 * to begin.  Attach the handle to a transaction and set up the

 * transaction's buffer credits.

	/*

	 * Limit the number of reserved credits to 1/2 of maximum transaction

	 * size and limit the number of total credits to not exceed maximum

	 * transaction size per operation.

	/*

	 * This check is racy but it is just an optimization of allocating new

	 * transaction early if there are high chances we'll need it. If we

	 * guess wrong, we'll retry or free unused transaction.

		/*

		 * If __GFP_FS is not present, then we may be being called from

		 * inside the fs writeback layer, so we MUST NOT fail.

	/*

	 * We need to hold j_state_lock until t_updates has been incremented,

	 * for proper journal barrier handling

	/*

	 * Wait on the journal's transaction barrier if necessary. Specifically

	 * we allow reserved handles to proceed because otherwise commit could

	 * deadlock on page writeback not being able to complete.

 We may have dropped j_state_lock - restart in that case */

			/*

			 * add_transaction_credits releases

			 * j_state_lock on a non-zero return

		/*

		 * We have handle reserved so we are allowed to join T_LOCKED

		 * transaction and we don't have to check for transaction size

		 * and journal space. But we still have to wait while running

		 * transaction is being switched to a committing one as it

		 * won't wait for any handles anymore.

	/* OK, account for the buffers that this operation expects to

	 * use and add the handle to the running transaction. 

	/*

	 * Ensure that no allocations done while the transaction is open are

	 * going to recurse back to the fs layer.

 Allocate a new handle.  This should probably be in a slab... */

/**

 * jbd2_journal_start() - Obtain a new handle.

 * @journal: Journal to start transaction on.

 * @nblocks: number of block buffer we might modify

 *

 * We make sure that the transaction can guarantee at least nblocks of

 * modified buffers in the log.  We block until the log can guarantee

 * that much space. Additionally, if rsv_blocks > 0, we also create another

 * handle with rsv_blocks reserved blocks in the journal. This handle is

 * stored in h_rsv_handle. It is not attached to any particular transaction

 * and thus doesn't block transaction commit. If the caller uses this reserved

 * handle, it has to set h_rsv_handle to NULL as otherwise jbd2_journal_stop()

 * on the parent handle will dispose the reserved one. Reserved handle has to

 * be converted to a normal handle using jbd2_journal_start_reserved() before

 * it can be used.

 *

 * Return a pointer to a newly allocated handle, or an ERR_PTR() value

 * on failure.

 Get j_state_lock to pin running transaction if it exists */

/**

 * jbd2_journal_start_reserved() - start reserved handle

 * @handle: handle to start

 * @type: for handle statistics

 * @line_no: for handle statistics

 *

 * Start handle that has been previously reserved with jbd2_journal_reserve().

 * This attaches @handle to the running transaction (or creates one if there's

 * not transaction running). Unlike jbd2_journal_start() this function cannot

 * block on journal commit, checkpointing, or similar stuff. It can block on

 * memory allocation or frozen journal though.

 *

 * Return 0 on success, non-zero on error - handle is freed in that case.

 Someone passed in normal handle? Just stop it. */

	/*

	 * Usefulness of mixing of reserved and unreserved handles is

	 * questionable. So far nobody seems to need it so just error out.

	/*

	 * GFP_NOFS is here because callers are likely from writeback or

	 * similarly constrained call sites

/**

 * jbd2_journal_extend() - extend buffer credits.

 * @handle:  handle to 'extend'

 * @nblocks: nr blocks to try to extend by.

 * @revoke_records: number of revoke records to try to extend by.

 *

 * Some transactions, such as large extends and truncates, can be done

 * atomically all at once or in several stages.  The operation requests

 * a credit for a number of buffer modifications in advance, but can

 * extend its credit if it needs more.

 *

 * jbd2_journal_extend tries to give the running handle more buffer credits.

 * It does not guarantee that allocation - this is a best-effort only.

 * The calling process MUST be able to deal cleanly with a failure to

 * extend here.

 *

 * Return 0 on success, non-zero on failure.

 *

 * return code < 0 implies an error

 * return code > 0 implies normal transaction-full status.

 Don't extend a locked-down transaction! */

	/*

	 * Subtract necessary revoke descriptor blocks from handle credits. We

	 * take care to account only for revoke descriptor blocks the

	 * transaction will really need as large sequences of transactions with

	 * small numbers of revokes are relatively common.

	/*

	 * Scope of the GFP_NOFS context is over here and so we can restore the

	 * original alloc context.

/**

 * jbd2__journal_restart() - restart a handle .

 * @handle:  handle to restart

 * @nblocks: nr credits requested

 * @revoke_records: number of revoke record credits requested

 * @gfp_mask: memory allocation flags (for start_this_handle)

 *

 * Restart a handle for a multi-transaction filesystem

 * operation.

 *

 * If the jbd2_journal_extend() call above fails to grant new buffer credits

 * to a running handle, a call to jbd2_journal_restart will commit the

 * handle's transaction so far and reattach the handle to a new

 * transaction capable of guaranteeing the requested number of

 * credits. We preserve reserved handle if there's any attached to the

 * passed in handle.

	/* If we've had an abort of any type, don't even think about

	/*

	 * First unlink the handle from its current transaction, and start the

	 * commit on that.

	/*

	 * TODO: If we use READ_ONCE / WRITE_ONCE for j_commit_request we can

 	 * get rid of pointless j_state_lock traffic like this.

/**

 * jbd2_journal_lock_updates () - establish a transaction barrier.

 * @journal:  Journal to establish a barrier on.

 *

 * This locks out any further updates from being started, and blocks

 * until all existing updates have completed, returning only once the

 * journal is in a quiescent state with no updates running.

 *

 * The journal lock should not be held on entry.

 Wait until there are no reserved handles */

 Wait until there are no running updates */

	/*

	 * We have now established a barrier against other normal updates, but

	 * we also need to barrier against other jbd2_journal_lock_updates() calls

	 * to make sure that we serialise special journal-locked operations

	 * too.

/**

 * jbd2_journal_unlock_updates () - release barrier

 * @journal:  Journal to release the barrier on.

 *

 * Release a transaction barrier obtained with jbd2_journal_lock_updates().

 *

 * Should be called without the journal lock held.

 Call t_frozen trigger and copy buffer data into jh->b_frozen_data. */

 Fire data frozen trigger just before we copy the data */

	/*

	 * Now that the frozen data is saved off, we need to store any matching

	 * triggers.

/*

 * If the buffer is already part of the current transaction, then there

 * is nothing we need to do.  If it is already part of a prior

 * transaction which we are still committing to disk, then we need to

 * make sure that we do not overwrite the old copy: we do copy-out to

 * preserve the copy going to disk.  We also account the buffer against

 * the handle's metadata buffer credits (unless the buffer is already

 * part of the transaction, that is).

 *

 @@@ Need to check for errors here at some point. */

 If it takes too long to lock the buffer, trace it */

	/* We now hold the buffer lock so it is safe to query the buffer

	 * state.  Is the buffer dirty?

	 *

	 * If so, there are two possibilities.  The buffer may be

	 * non-journaled, and undergoing a quite legitimate writeback.

	 * Otherwise, it is journaled, and we don't expect dirty buffers

	 * in that state (the buffers should be marked JBD_Dirty

	 * instead.)  So either the IO is being done under our own

	 * control and this is a bug, or it's a third party IO such as

	 * dump(8) (which may leave the buffer scheduled for read ---

	 * ie. locked but not dirty) or tune2fs (which may actually have

		/*

		 * First question: is this buffer already part of the current

		 * transaction or the existing committing transaction?

		/*

		 * In any case we need to clean the dirty flag and we must

		 * do it under the buffer lock to be sure we don't race

		 * with running write-out.

	/*

	 * The buffer is already part of this transaction if b_transaction or

	 * b_next_transaction points to it

	/*

	 * this is the first time this transaction is touching this buffer,

	 * reset the modified flag

	/*

	 * If the buffer is not journaled right now, we need to make sure it

	 * doesn't get written to disk before the caller actually commits the

	 * new data

		/*

		 * Make sure all stores to jh (b_modified, b_frozen_data) are

		 * visible before attaching it to the running transaction.

		 * Paired with barrier in jbd2_write_access_granted()

	/*

	 * If there is already a copy-out version of this buffer, then we don't

	 * need to make another one

	/*

	 * There is one case we have to be very careful about.  If the

	 * committing transaction is currently writing this buffer out to disk

	 * and has NOT made a copy-out, then we cannot modify the buffer

	 * contents at all right now.  The essence of copy-out is that it is

	 * the extra copy, not the primary copy, which gets journaled.  If the

	 * primary copy is already going to disk then we cannot do copy-out

	 * here.

	/*

	 * Only do the copy if the currently-owning transaction still needs it.

	 * If buffer isn't on BJ_Metadata list, the committing transaction is

	 * past that stage (here we use the fact that BH_Shadow is set under

	 * bh_state lock together with refiling to BJ_Shadow list and at this

	 * point we know the buffer doesn't have BH_Shadow set).

	 *

	 * Subtle point, though: if this is a get_undo_access, then we will be

	 * relying on the frozen_data to contain the new value of the

	 * committed_data record after the transaction, so we HAVE to force the

	 * frozen_data copy in that case.

	/*

	 * Make sure all stores to jh (b_modified, b_frozen_data) are visible

	 * before attaching it to the running transaction. Paired with barrier

	 * in jbd2_write_access_granted()

	/*

	 * If we are about to journal a buffer, then any revoke pending on it is

	 * no longer valid

 It's usually NULL */

 Fast check whether buffer is already attached to the required transaction */

 Dirty buffers require special handling... */

	/*

	 * RCU protects us from dereferencing freed pages. So the checks we do

	 * are guaranteed not to oops. However the jh slab object can get freed

	 * & reallocated while we work with it. So we have to be careful. When

	 * we see jh attached to the running transaction, we know it must stay

	 * so until the transaction is committed. Thus jh won't be freed and

	 * will be attached to the same bh while we run.  However it can

	 * happen jh gets freed, reallocated, and attached to the transaction

	 * just after we get pointer to it from bh. So we have to be careful

	 * and recheck jh still belongs to our bh before we return success.

 This should be bh2jh() but that doesn't work with inline functions */

 For undo access buffer must have data copied */

	/*

	 * There are two reasons for the barrier here:

	 * 1) Make sure to fetch b_bh after we did previous checks so that we

	 * detect when jh went through free, realloc, attach to transaction

	 * while we were checking. Paired with implicit barrier in that path.

	 * 2) So that access to bh done after jbd2_write_access_granted()

	 * doesn't get reordered and see inconsistent state of concurrent

	 * do_get_write_access().

/**

 * jbd2_journal_get_write_access() - notify intent to modify a buffer

 *				     for metadata (not data) update.

 * @handle: transaction to add buffer modifications to

 * @bh:     bh to be used for metadata writes

 *

 * Returns: error code or 0 on success.

 *

 * In full data journalling mode the buffer may be of type BJ_AsyncData,

 * because we're ``write()ing`` a buffer which is also part of a shared mapping.

	/* We do not want to get caught playing with fields which the

	 * log thread also manipulates.  Make sure that the buffer

/*

 * When the user wants to journal a newly created buffer_head

 * (ie. getblk() returned a new buffer and we are going to populate it

 * manually rather than reading off disk), then we need to keep the

 * buffer_head locked until it has been completely filled with new

 * data.  In this case, we should be able to make the assertion that

 * the bh is not already part of an existing transaction.

 *

 * The buffer should already be locked by the caller by this point.

 * There is no lock ranking violation: it was a newly created,

/**

 * jbd2_journal_get_create_access () - notify intent to use newly created bh

 * @handle: transaction to new buffer to

 * @bh: new buffer.

 *

 * Call this if you create a new bh.

	/*

	 * The buffer may already belong to this transaction due to pre-zeroing

	 * in the filesystem's new_block code.  It may also be on the previous,

	 * committing transaction's lists, but it HAS to be in Forget state in

	 * that case: the transaction must have deleted the buffer for it to be

	 * reused here.

		/*

		 * Previous jbd2_journal_forget() could have left the buffer

		 * with jbddirty bit set because it was being committed. When

		 * the commit finished, we've filed the buffer for

		 * checkpointing and marked it dirty. Now we are reallocating

		 * the buffer so the transaction freeing it must have

		 * committed and so it's safe to clear the dirty bit.

 first access by this transaction */

 first access by this transaction */

	/*

	 * akpm: I added this.  ext3_alloc_branch can pick up new indirect

	 * blocks which contain freed but then revoked metadata.  We need

	 * to cancel the revoke in case we end up freeing it yet again

	 * and the reallocating as data - this would cause a second revoke,

	 * which hits an assertion error.

/**

 * jbd2_journal_get_undo_access() -  Notify intent to modify metadata with

 *     non-rewindable consequences

 * @handle: transaction

 * @bh: buffer to undo

 *

 * Sometimes there is a need to distinguish between metadata which has

 * been committed to disk and that which has not.  The ext3fs code uses

 * this for freeing and allocating space, we have to make sure that we

 * do not reuse freed space until the deallocation has been committed,

 * since if we overwrote that space we would make the delete

 * un-rewindable in case of a crash.

 *

 * To deal with that, jbd2_journal_get_undo_access requests write access to a

 * buffer for parts of non-rewindable operations such as delete

 * operations on the bitmaps.  The journaling code must keep a copy of

 * the buffer's contents prior to the undo_access call until such time

 * as we know that the buffer has definitely been committed to disk.

 *

 * We never need to know which transaction the committed data is part

 * of, buffers touched here are guaranteed to be dirtied later and so

 * will be committed to a new transaction in due course, at which point

 * we can discard the old committed data pointer.

 *

 * Returns error number or 0 on success.

	/*

	 * Do this first --- it can drop the journal lock, so we want to

	 * make sure that obtaining the committed_data is done

	 * atomically wrt. completion of any outstanding commits.

		/* Copy out the current buffer contents into the

/**

 * jbd2_journal_set_triggers() - Add triggers for commit writeout

 * @bh: buffer to trigger on

 * @type: struct jbd2_buffer_trigger_type containing the trigger(s).

 *

 * Set any triggers on this journal_head.  This is always safe, because

 * triggers for a committing buffer will be saved off, and triggers for

 * a running transaction will match the buffer in that transaction.

 *

 * Call with NULL to clear the triggers.

/**

 * jbd2_journal_dirty_metadata() -  mark a buffer as containing dirty metadata

 * @handle: transaction to add buffer to.

 * @bh: buffer to mark

 *

 * mark dirty metadata which needs to be journaled as part of the current

 * transaction.

 *

 * The buffer must have previously had jbd2_journal_get_write_access()

 * called so that it has a valid journal_head attached to the buffer

 * head.

 *

 * The buffer is placed on the transaction's metadata list and is marked

 * as belonging to the transaction.

 *

 * Returns error number or 0 on success.

 *

 * Special care needs to be taken if the buffer already belongs to the

 * current committing transaction (in which case we should have frozen

 * data present for that commit).  In that case, we don't relink the

 * buffer: that only gets done when the old transaction finally

 * completes its commit.

	/*

	 * We don't grab jh reference here since the buffer must be part

	 * of the running transaction.

	/*

	 * This and the following assertions are unreliable since we may see jh

	 * in inconsistent state unless we grab bh_state lock. But this is

	 * crucial to catch bugs so let's do a reliable check until the

	 * lockless handling is fully proven.

 If it's in our transaction it must be in BJ_Metadata list. */

		/*

		 * This buffer's got modified and becoming part

		 * of the transaction. This needs to be done

		 * once a transaction -bzzz

	/*

	 * fastpath, to avoid expensive locking.  If this buffer is already

	 * on the running transaction's metadata list there is nothing to do.

	 * Nobody can take it off again because there is a handle open.

	 * I _think_ we're OK here with SMP barriers - a mistaken decision will

	 * result in this test being false, so we go in and take the locks.

	/*

	 * Metadata already on the current transaction list doesn't

	 * need to be filed.  Metadata on another transaction's list must

	 * be committing, and will be refiled once the commit completes:

	 * leave it alone for now.

		/* And this case is illegal: we can't reuse another

 That test should have eliminated the following case: */

/**

 * jbd2_journal_forget() - bforget() for potentially-journaled buffers.

 * @handle: transaction handle

 * @bh:     bh to 'forget'

 *

 * We can only do the bforget if there are no commits pending against the

 * buffer.  If the buffer is dirty in the current running transaction we

 * can safely unlink it.

 *

 * bh may not be a journalled buffer at all - it may be a non-JBD

 * buffer which came off the hashtable.  Check for this.

 *

 * Decrements bh->b_count by one.

 *

 * Allow this call even if the handle has aborted --- it may be part of

 * the caller's cleanup after an abort.

	/* Critical error: attempting to delete a bitmap buffer, maybe?

 keep track of whether or not this transaction modified us */

	/*

	 * The buffer's going from the transaction, we must drop

	 * all references -bzzz

		/* If we are forgetting a buffer which is already part

		 * of this transaction, then we can just drop it from

		/*

		 * we only want to drop a reference if this transaction

		 * modified the buffer

		/*

		 * We are no longer going to journal this buffer.

		 * However, the commit of this transaction is still

		 * important to the buffer: the delete that we are now

		 * processing might obsolete an old log entry, so by

		 * committing, we can satisfy the buffer's checkpoint.

		 *

		 * So, if we have a checkpoint on the buffer, we should

		 * now refile the buffer on our BJ_Forget list so that

		 * we know to remove the checkpoint after we commit.

		/* However, if the buffer is still owned by a prior

		/* ... but we CAN drop it from the new transaction through

		 * marking the buffer as freed and set j_next_transaction to

		 * the new transaction, so that not only the commit code

		 * knows it should clear dirty bits when it is done with the

		 * buffer, but also the buffer can be checkpointed only

			/*

			 * only drop a reference if this transaction modified

			 * the buffer

		/*

		 * Finally, if the buffer is not belongs to any

		 * transaction, we can just drop it now if it has no

		 * checkpoint.

		/*

		 * Otherwise, if the buffer has been written to disk,

		 * it is safe to remove the checkpoint and drop it.

		/*

		 * The buffer is still not written to disk, we should

		 * attach this buffer to current transaction so that the

		 * buffer can be checkpointed only after the current

		 * transaction commits.

 no need to reserve log space for this block -bzzz */

/**

 * jbd2_journal_stop() - complete a transaction

 * @handle: transaction to complete.

 *

 * All done for a particular handle.

 *

 * There is not much action needed here.  We just return any remaining

 * buffer credits to the transaction and remove the handle.  The only

 * complication is that we need to start a commit operation if the

 * filesystem is marked for synchronous update.

 *

 * jbd2_journal_stop itself will not usually return an error, but it may

 * do so in unusual circumstances.  In particular, expect it to

 * return -EIO if a jbd2_journal_abort has been executed since the

 * transaction began.

		/*

		 * Handle is already detached from the transaction so there is

		 * nothing to do other than free the handle.

	/*

	 * Implement synchronous transaction batching.  If the handle

	 * was synchronous, don't force a commit immediately.  Let's

	 * yield and let another thread piggyback onto this

	 * transaction.  Keep doing that while new threads continue to

	 * arrive.  It doesn't cost much - we're about to run a commit

	 * and sleep on IO anyway.  Speeds up many-threaded, many-dir

	 * operations by 30x or more...

	 *

	 * We try and optimize the sleep time against what the

	 * underlying disk can do, instead of having a static sleep

	 * time.  This is useful for the case where our storage is so

	 * fast that it is more optimal to go ahead and force a flush

	 * and wait for the transaction to be committed than it is to

	 * wait for an arbitrary amount of time for new writers to

	 * join the transaction.  We achieve this by measuring how

	 * long it takes to commit a transaction, and compare it with

	 * how long this transaction has been running, and if run time

	 * < commit time then we sleep for the delta and commit.  This

	 * greatly helps super fast disks that would see slowdowns as

	 * more threads started doing fsyncs.

	 *

	 * But don't do this if this process was the most recent one

	 * to perform a synchronous write.  We do this to detect the

	 * case where a single process is doing a stream of sync

	 * writes.  No point in waiting for joiners in that case.

	 *

	 * Setting max_batch_time to 0 disables this completely.

	/*

	 * If the handle is marked SYNC, we need to set another commit

	 * going!  We also want to force a commit if the transaction is too

	 * old now.

		/* Do this even for aborted journals: an abort still

		 * completes the commit thread, it just doesn't write

 This is non-blocking */

		/*

		 * Special case: JBD2_SYNC synchronous updates require us

		 * to wait for the commit to complete.

	/*

	 * Once stop_this_handle() drops t_updates, the transaction could start

	 * committing on us and eventually disappear.  So we must not

	 * dereference transaction pointer again after calling

	 * stop_this_handle().

/*

 *

 * List management code snippets: various functions for manipulating the

 * transaction buffer lists.

 *

/*

 * Append a buffer to a transaction list, given the transaction's list head

 * pointer.

 *

 * j_list_lock is held.

 *

 * jh->b_state_lock is held.

 Insert at the tail of the list to preserve order */

/*

 * Remove a buffer from a transaction list, given the transaction's list

 * head pointer.

 *

 * Called with j_list_lock held, and the journal may not be locked.

 *

 * jh->b_state_lock is held.

/*

 * Remove a buffer from the appropriate transaction list.

 *

 * Note that this function can *change* the value of

 * bh->b_transaction->t_buffers, t_forget, t_shadow_list, t_log_list or

 * t_reserved_list.  If the caller is holding onto a copy of one of these

 * pointers, it could go bad.  Generally the caller needs to re-read the

 * pointer from the transaction_t.

 *

 * Called under j_list_lock.

 Expose it to the VM */

/*

 * Remove buffer from all transactions. The caller is responsible for dropping

 * the jh reference that belonged to the transaction.

 *

 * Called with bh_state lock and j_list_lock

 Get reference so that buffer cannot be freed before we unlock it */

/*

 * Called from jbd2_journal_try_to_free_buffers().

 *

 * Called under jh->b_state_lock

 written-back checkpointed metadata buffer */

/**

 * jbd2_journal_try_to_free_buffers() - try to free page buffers.

 * @journal: journal for operation

 * @page: to try and free

 *

 * For all the buffers on this page,

 * if they are fully written out ordered data, move them onto BUF_CLEAN

 * so try_to_free_buffers() can reap them.

 *

 * This function returns non-zero if we wish try_to_free_buffers()

 * to be called. We do this if the page is releasable by try_to_free_buffers().

 * We also do it if the page has locked or dirty buffers and the caller wants

 * us to perform sync or async writeout.

 *

 * This complicates JBD locking somewhat.  We aren't protected by the

 * BKL here.  We wish to remove the buffer from its committing or

 * running transaction's ->t_datalist via __jbd2_journal_unfile_buffer.

 *

 * This may *change* the value of transaction_t->t_datalist, so anyone

 * who looks at t_datalist needs to lock against this function.

 *

 * Even worse, someone may be doing a jbd2_journal_dirty_data on this

 * buffer.  So we need to lock against that.  jbd2_journal_dirty_data()

 * will come out of the lock with the buffer dirty, which makes it

 * ineligible for release here.

 *

 * Who else is affected by this?  hmm...  Really the only contender

 * is do_get_write_access() - it could be looking at the buffer while

 * journal_try_to_free_buffer() is changing its state.  But that

 * cannot happen because we never reallocate freed data as metadata

 * while the data is part of a transaction.  Yes?

 *

 * Return 0 on failure, 1 on success

		/*

		 * We take our own ref against the journal_head here to avoid

		 * having to add tons of locking around each instance of

		 * jbd2_journal_put_journal_head().

/*

 * This buffer is no longer needed.  If it is on an older transaction's

 * checkpoint list we need to record it on this transaction's forget list

 * to pin this buffer (and hence its checkpointing transaction) down until

 * this transaction commits.  If the buffer isn't on a checkpoint list, we

 * release it.

 * Returns non-zero if JBD no longer has an interest in the buffer.

 *

 * Called under j_list_lock.

 *

 * Called under jh->b_state_lock.

		/*

		 * We don't want to write the buffer anymore, clear the

		 * bit so that we don't confuse checks in

		 * __journal_file_buffer

/*

 * jbd2_journal_invalidatepage

 *

 * This code is tricky.  It has a number of cases to deal with.

 *

 * There are two invariants which this code relies on:

 *

 * i_size must be updated on disk before we start calling invalidatepage on the

 * data.

 *

 *  This is done in ext3 by defining an ext3_setattr method which

 *  updates i_size before truncate gets going.  By maintaining this

 *  invariant, we can be sure that it is safe to throw away any buffers

 *  attached to the current transaction: once the transaction commits,

 *  we know that the data will not be needed.

 *

 *  Note however that we can *not* throw away data belonging to the

 *  previous, committing transaction!

 *

 * Any disk blocks which *are* part of the previous, committing

 * transaction (and which therefore cannot be discarded immediately) are

 * not going to be reused in the new running transaction

 *

 *  The bitmap committed_data images guarantee this: any block which is

 *  allocated in one transaction and removed in the next will be marked

 *  as in-use in the committed_data bitmap, so cannot be reused until

 *  the next transaction to delete the block commits.  This means that

 *  leaving committing buffers dirty is quite safe: the disk blocks

 *  cannot be reallocated to a different file and so buffer aliasing is

 *  not possible.

 *

 *

 * The above applies mainly to ordered data mode.  In writeback mode we

 * don't make guarantees about the order in which data hits disk --- in

 * particular we don't guarantee that new dirty data is flushed before

 * transaction commit --- so it is always safe just to discard data

 * immediately in that mode.  --sct

/*

 * The journal_unmap_buffer helper function returns zero if the buffer

 * concerned remains pinned as an anonymous buffer belonging to an older

 * transaction.

 *

 * We're outside-transaction here.  Either or both of j_running_transaction

 * and j_committing_transaction may be NULL.

	/*

	 * It is safe to proceed here without the j_list_lock because the

	 * buffers cannot be stolen by try_to_free_buffers as long as we are

	 * holding the page lock. --sct

 OK, we have data buffer in journaled mode */

	/*

	 * We cannot remove the buffer from checkpoint lists until the

	 * transaction adding inode to orphan list (let's call it T)

	 * is committed.  Otherwise if the transaction changing the

	 * buffer would be cleaned from the journal before T is

	 * committed, a crash will cause that the correct contents of

	 * the buffer will be lost.  On the other hand we have to

	 * clear the buffer dirty bit at latest at the moment when the

	 * transaction marking the buffer as freed in the filesystem

	 * structures is committed because from that moment on the

	 * block can be reallocated and used by a different page.

	 * Since the block hasn't been freed yet but the inode has

	 * already been added to orphan list, it is safe for us to add

	 * the buffer to BJ_Forget list of the newest transaction.

	 *

	 * Also we have to clear buffer_mapped flag of a truncated buffer

	 * because the buffer_head may be attached to the page straddling

	 * i_size (can happen only when blocksize < pagesize) and thus the

	 * buffer_head can be reused when the file is extended again. So we end

	 * up keeping around invalidated buffers attached to transactions'

	 * BJ_Forget list just to stop checkpointing code from cleaning up

	 * the transaction this buffer was modified in.

		/* First case: not on any transaction.  If it

		 * has no checkpoint link, then we can zap it:

		 * it's a writeback-mode buffer so we don't care

 bdflush has written it.  We can drop it now */

		/* OK, it must be in the journal but still not

		 * written fully to disk: it's metadata or

			/* ... and once the current transaction has

			 * committed, the buffer won't be needed any

			/* There is no currently-running transaction. So the

			 * orphan record which we wrote for this file must have

			 * passed into commit.  We must attach this buffer to

				/* The orphan record's transaction has

		/*

		 * The buffer is committing, we simply cannot touch

		 * it. If the page is straddling i_size we have to wait

		 * for commit and try again.

		/*

		 * OK, buffer won't be reachable after truncate. We just clear

		 * b_modified to not confuse transaction credit accounting, and

		 * set j_next_transaction to the running transaction (if there

		 * is one) and mark buffer as freed so that commit code knows

		 * it should clear dirty bits when it is done with the buffer.

		/* Good, the buffer belongs to the running transaction.

		 * We are writing our own transaction's data, not any

		 * previous one's, so it is safe to throw it away

		 * (remember that we expect the filesystem to have set

		 * i_size already for this truncate so recovery will not

	/*

	 * This is tricky. Although the buffer is truncated, it may be reused

	 * if blocksize < pagesize and it is attached to the page straddling

	 * EOF. Since the buffer might have been added to BJ_Forget list of the

	 * running transaction, journal_get_write_access() won't clear

	 * b_modified and credit accounting gets confused. So clear b_modified

	 * here.

/**

 * jbd2_journal_invalidatepage()

 * @journal: journal to use for flush...

 * @page:    page to flush

 * @offset:  start of the range to invalidate

 * @length:  length of the range to invalidate

 *

 * Reap page buffers containing data after in the specified range in page.

 * Can return -EBUSY if buffers are part of the committing transaction and

 * the page is straddling i_size. Caller then has to wait for current commit

 * and try again.

	/* We will potentially be playing with lists other than just the

	 * data lists (especially for journaled data mode), so be

 This block is wholly outside the truncation point */

/*

 * File a buffer on the given transaction list.

		/*

		 * For metadata buffers, we track dirty bit in buffer_jbddirty

		 * instead of buffer_dirty. We should not see a dirty bit set

		 * here because we clear it in do_get_write_access but e.g.

		 * tune2fs can modify the sb and set the dirty bit at any time

		 * so we try to gracefully handle that.

/*

 * Remove a buffer from its current buffer list in preparation for

 * dropping it from its current transaction entirely.  If the buffer has

 * already started to be used by a subsequent transaction, refile the

 * buffer on that transaction's metadata list.

 *

 * Called under j_list_lock

 * Called under jh->b_state_lock

 *

 * When this function returns true, there's no next transaction to refile to

 * and the caller has to drop jh reference through

 * jbd2_journal_put_journal_head().

 If the buffer is now unused, just drop it. */

	/*

	 * It has been modified by a later transaction: add it to the new

	 * transaction's metadata list.

	/*

	 * b_transaction must be set, otherwise the new b_transaction won't

	 * be holding jh reference

	/*

	 * We set b_transaction here because b_next_transaction will inherit

	 * our jh reference and thus __jbd2_journal_file_buffer() must not

	 * take a new one.

/*

 * __jbd2_journal_refile_buffer() with necessary locking added. We take our

 * bh reference so that we can safely unlock bh.

 *

 * The jh and bh may be freed by this call.

/*

 * File inode in the inode list of the handle's transaction

 Is inode already attached where we need it? */

	/*

	 * We only ever set this variable to 1 so the test is safe. Since

	 * t_need_data_flush is likely to be set, we do the test to save some

	 * cacheline bouncing

	/* On some different transaction's list - should be

 Not on any transaction list... */

/*

 * File truncate and transaction commit interact with each other in a

 * non-trivial way.  If a transaction writing data block A is

 * committing, we cannot discard the data by truncate until we have

 * written them.  Otherwise if we crashed after the transaction with

 * write has committed but before the transaction with truncate has

 * committed, we could see stale data in block A.  This function is a

 * helper to solve this problem.  It starts writeout of the truncated

 * part in case it is in the committing transaction.

 *

 * Filesystem code must call this function when inode is journaled in

 * ordered mode before truncation happens and after the inode has been

 * placed on orphan list with the new inode size. The second condition

 * avoids the race that someone writes new data and we start

 * committing the transaction after this function has been called but

 * before a transaction for truncate is started (and furthermore it

 * allows us to optimize the case where the addition to orphan list

 * happens in the same transaction as write --- we don't have to write

 * any data in such case).

 This is a quick check to avoid locking if not necessary */

	/* Locks are here just to force reading of recent values, it is

	 * enough that the transaction was not committing before we started

 SPDX-License-Identifier: GPL-2.0+

/*

 * linux/fs/jbd2/recovery.c

 *

 * Written by Stephen C. Tweedie <sct@redhat.com>, 1999

 *

 * Copyright 1999-2000 Red Hat Software --- All Rights Reserved

 *

 * Journal recovery routines for the generic filesystem journaling code;

 * part of the ext2fs journaling system.

/*

 * Maintain information about the progress of the recovery job, so that

 * the different passes can carry information between them.

 Release readahead buffers after use */

/*

 * When reading from the journal, we are going through the block device

 * layer directly and so there is no readahead being done for us.  We

 * need to implement any readahead ourselves if we want it to happen at

 * all.  Recovery is basically one long sequential read, so make sure we

 * do the IO in reasonably large chunks.

 *

 * This is not so critical that we need to be enormously clever about

 * the readahead size, though.  128K is a purely arbitrary, good-enough

 * fixed value.

 Do up to 128K of readahead */

	/* Do the readahead itself.  We'll submit MAXBUF buffer_heads at

 __KERNEL__ */

/*

 * Read a block from the journal

		/* If this is a brand new buffer, start readahead.

/*

 * Count the number of in-use tags in a journal descriptor block.

 Make sure we wrap around the log correctly! */

/**

 * jbd2_journal_recover - recovers a on-disk journal

 * @journal: the journal to recover

 *

 * The primary function for recovering the log contents when mounting a

 * journaled device.

 *

 * Recovery is done in three passes.  In the first pass, we look for the

 * end of the log.  In the second, we assemble the list of revoke

 * blocks.  In the third and final pass, we replay any un-revoked blocks

 * in the log.

	/*

	 * The journal superblock's s_start field (the current log head)

	 * is always zero if, and only if, the journal was cleanly

	 * unmounted.

	/* Restart the log at the next transaction ID, thus invalidating

 Make sure all replayed data is on permanent storage */

/**

 * jbd2_journal_skip_recovery - Start journal and wipe exiting records

 * @journal: journal to startup

 *

 * Locate any valid recovery information from the journal and set up the

 * journal structures in memory to ignore it (presumably because the

 * caller has evidence that it is out of date).

 * This function doesn't appear to be exported..

 *

 * We perform one pass over the journal to allow us to tell the user how

 * much recovery information is being erased, and to let us initialise

 * the journal transaction sequence numbers to the next unused ID.

/*

 * calc_chksums calculates the checksums for the blocks described in the

 * descriptor block.

 Calculate checksum of the descriptor block. */

 Transactional Checksums */

	/*

	 * First thing is to establish what we expect to find in the log

	 * (in terms of transaction IDs), and where (in terms of log

	 * block offsets): query the superblock.

	/*

	 * Now we walk through the log, transaction by transaction,

	 * making sure that each transaction has a commit block in the

	 * expected place.  Each complete transaction gets replayed back

	 * into the main filesystem.

		/* If we already know where to stop the log traversal,

		 * check right now that we haven't gone past the end of

		/* Skip over each chunk of the transaction looking

		 * either the next descriptor block or the final commit

		/* What kind of buffer is it?

		 *

		 * If it is a descriptor block, check that it has the

		 * expected sequence number.  Otherwise, we're all done

		/* OK, we have a valid descriptor block which matches

		 * all of the sequence number checks.  What are we going

 Verify checksum first */

				/*

				 * PASS_SCAN can see stale blocks due to lazy

				 * journal init. Don't error out on those yet.

			/* If it is a valid descriptor block, replay it

			 * in pass REPLAY; if journal_checksums enabled, then

			 * calculate checksums in PASS_SCAN, otherwise,

			/* A descriptor block: we can now write all of

			 * the data blocks.  Yay, useful work is finally

					/* Recover what we can, but

					/* If the block has been

					 * revoked, then we're all done

 Look for block corruption */

					/* Find a buffer for the new

 ll_rw_block(WRITE, 1, &nbh); */

			/*     How to differentiate between interrupted commit

			 *               and journal corruption ?

			 *

			 * {nth transaction}

			 *        Checksum Verification Failed

			 *			 |

			 *		 ____________________

			 *		|		     |

			 * 	async_commit             sync_commit

			 *     		|                    |

			 *		| GO TO NEXT    "Journal Corruption"

			 *		| TRANSACTION

			 *		|

			 * {(n+1)th transanction}

			 *		|

			 * 	 _______|______________

			 * 	|	 	      |

			 * Commit block found	Commit block not found

			 *      |		      |

			 * "Journal Corruption"       |

			 *		 _____________|_________

			 *     		|	           	|

			 *	nth trans corrupt	OR   nth trans

			 *	and (n+1)th interrupted     interrupted

			 *	before commit block

			 *      could reach the disk.

			 *	(Cannot find the difference in above

			 *	 mentioned conditions. Hence assume

			 *	 "Interrupted Commit".)

			/*

			 * If need_check_commit_time is set, it means we are in

			 * PASS_SCAN and csum verify failed before. If

			 * commit_time is increasing, it's the same journal,

			 * otherwise it is stale journal block, just end this

			 * recovery.

				/*

				 * It likely does not belong to same journal,

				 * just end this recovery with success.

			/*

			 * Found an expected commit block: if checksums

			 * are present, verify them in PASS_SCAN; else not

			 * much to do other than move on to the next sequence

			 * number.

 Neither checksum match nor unused? */

			/*

			 * Check revoke block crc in pass_scan, if csum verify

			 * failed, check commit block time later.

			/* If we aren't in the REVOKE pass, then we can

	/*

	 * We broke out of the log scan loop: either we came to the

	 * known end of the log or we found an unexpected block in the

	 * log.  If the latter happened, then we know that the "current"

	 * transaction marks the end of the valid log.

		/* It's really bad news if different passes end up at

 Scan a revoke record, marking all blocks mentioned as revoked. */

/* Block- or MTD-based romfs

 *

 * Copyright © 2007 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

 *

 * Derived from: ROMFS file system, Linux implementation

 *

 * Copyright © 1997-1999  Janos Farkas <chexum@shadow.banki.hu>

 *

 * Using parts of the minix filesystem

 * Copyright © 1991, 1992  Linus Torvalds

 *

 * and parts of the affs filesystem additionally

 * Copyright © 1993  Ray Burr

 * Copyright © 1996  Hans-Joachim Widmaier

 *

 * Changes

 *					Changed for 2.1.19 modules

 *	Jan 1997			Initial release

 *	Jun 1997			2.1.43+ changes

 *					Proper page locking in readpage

 *					Changed to work with 2.1.45+ fs

 *	Jul 1997			Fixed follow_link

 *			2.1.47

 *					lookup shouldn't return -ENOENT

 *					from Horst von Brand:

 *					  fail on wrong checksum

 *					  double unlock_super was possible

 *					  correct namelen for statfs

 *					spotted by Bill Hawes:

 *					  readlink shouldn't iput()

 *	Jun 1998	2.1.106		from Avery Pennarun: glibc scandir()

 *					  exposed a problem in readdir

 *			2.1.107		code-freeze spellchecker run

 *	Aug 1998			2.1.118+ VFS changes

 *	Sep 1998	2.1.122		another VFS change (follow_link)

 *	Apr 1999	2.2.7		no more EBADF checking in

 *					  lookup/readdir, use ERR_PTR

 *	Jun 1999	2.3.6		d_alloc_root use changed

 *			2.3.9		clean up usage of ENOENT/negative

 *					  dentries in lookup

 *					clean up page flags setting

 *					  (error, uptodate, locking) in

 *					  in readpage

 *					use init_special_inode for

 *					  fifos/sockets (and streamline) in

 *					  read_inode, fix _ops table order

 *	Aug 1999	2.3.16		__initfunc() => __init change

 *	Oct 1999	2.3.24		page->owner hack obsoleted

 *	Nov 1999	2.3.27		2.3.25+ page->offset => index change

 *

 *

 * This program is free software; you can redistribute it and/or

 * modify it under the terms of the GNU General Public Licence

 * as published by the Free Software Foundation; either version

 * 2 of the Licence, or (at your option) any later version.

 hard link */

 directory */

 regular file */

 symlink */

 blockdev */

 chardev */

 socket */

 FIFO */

/*

 * read a page worth of data from the image

 32 bit warning -- but not for us :) */

/*

 * read the entries from a directory

 XXX dynamic? */

 Not really failsafe, but we are read-only... */

 Fetch inode info */

/*

 * look up an entry in a directory

 got from dentry */

	/* search all the file entries in the list starting from the one

 try to match the first 16 bytes of name */

 Hard link handling */

 next entry */

/*

 * get a romfs inode based on its position in the image (which doubles as the

 * inode number)

	/* we might have to traverse a chain of "hard link" file entries to get

 XXX: do romfs_checksum here too (with name) */

 determine the length of the filename */

 get an inode for this image position */

 precalculate the data offset */

 Hard to decide.. */

 set up mode and ops */

 depending on MBZ for sock/fifos */

/*

 * allocate a new inode

/*

 * return a spent inode to the slab cache

/*

 * get filesystem statistics

	/* When calling huge_encode_dev(),

	 * use sb->s_bdev->bd_dev when,

	 *   - CONFIG_ROMFS_ON_BLOCK defined

	 * use sb->s_dev when,

	 *   - CONFIG_ROMFS_ON_BLOCK undefined and

	 *   - CONFIG_ROMFS_ON_MTD defined

	 * leave id as 0 when,

	 *   - CONFIG_ROMFS_ON_BLOCK undefined and

	 *   - CONFIG_ROMFS_ON_MTD undefined

/*

 * remounting must involve read-only

/*

 * checksum check on part of a romfs filesystem

/*

 * fill in the superblock

 Use same dev ID from the underlying mtdblock device */

 read the image superblock and check it */

 find the root directory */

/*

 * get a superblock for mounting

/*

 * Set up the filesystem mount context.

/*

 * destroy a romfs superblock in the appropriate manner

/*

 * inode storage initialiser

/*

 * romfs module initialisation

/*

 * romfs module removal

	/*

	 * Make sure all delayed rcu free inodes are flushed before we

	 * destroy cache.

 Actually dual-licensed, but it doesn't matter for */

 SPDX-License-Identifier: GPL-2.0-or-later

/* RomFS storage access routines

 *

 * Copyright © 2007 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * read data from an romfs image on an MTD device

/*

 * determine the length of a string in a romfs image on an MTD device

 scan the string up to 16 bytes at a time */

/*

 * compare a string to one in a romfs image on MTD

 * - return 1 if matched, 0 if differ, -ve if error

	/* scan the string up to 16 bytes at a time, and attempt to grab the

 check the trailing NUL was */

 CONFIG_ROMFS_ON_MTD */

/*

 * read data from an romfs image on a block device

 copy the string up to blocksize bytes at a time */

/*

 * determine the length of a string in romfs on a block device

 scan the string up to blocksize bytes at a time */

/*

 * compare a string to one in a romfs image on a block device

 * - return 1 if matched, 0 if differ, -ve if error

 compare string up to a block at a time */

		/* the terminating NUL must be on the first byte of the next

 CONFIG_ROMFS_ON_BLOCK */

/*

 * read data from the romfs image

/*

 * determine the length of a string in romfs

/*

 * compare a string to one in romfs

 * - the string to be compared to, str, may not be NUL-terminated; instead the

 *   string is of the specified size

 * - return 1 if matched, 0 if differ, -ve if error

 SPDX-License-Identifier: GPL-2.0-or-later

/* NOMMU mmap support for RomFS on MTD devices

 *

 * Copyright © 2007 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * try to determine where a shared mapping can be made

 * - only supported for NOMMU at the moment (MMU can't doesn't copy private

 *   mappings)

 * - attempts to map through to the underlying MTD device

 the mapping mustn't extend beyond the EOF */

 the mapping mustn't extend beyond the EOF */

/*

 * permit a R/O mapping to be made directly through onto an MTD device if

 * possible

 SPDX-License-Identifier: GPL-2.0-or-later

/* -*- linux-c -*- --------------------------------------------------------- *

 *

 * linux/fs/devpts/inode.c

 *

 *  Copyright 1998-2004 H. Peter Anvin -- All Rights Reserved

 *

/*

 * ptmx is a new node in /dev/pts and will be unused in legacy (single-

 * instance) mode. To prevent surprises in user space, set permissions of

 * ptmx to 0. Use 'chmod' or remount with '-o ptmxmode' to set meaningful

 * permissions.

/*

 * sysctl support for setting limits on the number of Unix98 ptys allocated.

 * Otherwise one can eat up all kernel memory by opening /dev/ptmx repeatedly.

 Is a devpts filesystem at "pts" in the same directory? */

 Is the path the root of a devpts filesystem? */

/*

 * Try to find a suitable devpts filesystem. We support the following

 * scenarios:

 * - The ptmx device node is located in the same directory as the devpts

 *   mount where the pts device nodes are located.

 *   This is e.g. the case when calling open on the /dev/pts/ptmx device

 *   node when the devpts filesystem is mounted at /dev/pts.

 * - The ptmx device node is located outside the devpts filesystem mount

 *   where the pts device nodes are located. For example, the ptmx device

 *   is a symlink, separate device node, or bind-mount.

 *   A supported scenario is bind-mounting /dev/pts/ptmx to /dev/ptmx and

 *   then calling open on /dev/ptmx. In this case a suitable pts

 *   subdirectory can be found in the common parent directory /dev of the

 *   devpts mount and the ptmx bind-mount, after resolving the /dev/ptmx

 *   bind-mount.

 *   If no suitable pts subdirectory can be found this function will fail.

 *   This is e.g. the case when bind-mounting /dev/pts/ptmx to /ptmx.

	/* Walk upward while the start point is a bind mount of

	 * a single file.

 devpts_ptmx_path() finds a devpts fs or returns an error. */

 Has the devpts filesystem already been found? */

	/*

	 * pty code needs to hold extra references in case of last /dev/tty close

/*

 * parse_mount_options():

 *	Set @opts to mount options specified in @data. If an option is not

 *	specified in @data, set it to its default value.

 *

 * Note: @data may be NULL (in which case all options are set to default).

	/* Only allow instances mounted from the initial mount

	 * namespace to tap the reserve pool of ptys.

 If we have already created ptmx node, return */

	/*

	 * Create a new 'ptmx' node in this mount of devpts.

	/*

	 * parse_mount_options() restores options to default values

	 * before parsing and may have changed ptmxmode. So, update the

	 * mode in the inode too. Bogus options don't fail the remount,

	 * so do this even on error return.

/*

 * devpts_mount()

 *

 *     Mount a new (private) instance of devpts.  PTYs created in this

 *     instance are independent of the PTYs in other devpts instances.

/*

 * The normal naming convention is simply /dev/pts/<number>; this conforms

 * to the System V naming convention

/**

 * devpts_pty_new -- create a new inode in /dev/pts/

 * @ptmx_inode: inode of the master

 * @device: major+minor of the node to be created

 * @index: used as a name of the node

 * @priv: what's given back by devpts_get_priv

 *

 * The created inode is returned. Remove it from /dev/pts/ by devpts_pty_kill.

/**

 * devpts_get_priv -- get private data for a slave

 * @pts_inode: inode of the slave

 *

 * Returns whatever was passed as priv in devpts_pty_new for a given inode.

/**

 * devpts_pty_kill -- remove inode form /dev/pts/

 * @inode: inode of the slave to be removed

 *

 * This is an inverse operation of devpts_pty_new.

 d_alloc_name() in devpts_pty_new() */

 SPDX-License-Identifier: GPL-2.0

/*

 * Filesystem-level keyring for fscrypt

 *

 * Copyright 2019 Google LLC

/*

 * This file implements management of fscrypt master keys in the

 * filesystem-level keyring, including the ioctls:

 *

 * - FS_IOC_ADD_ENCRYPTION_KEY

 * - FS_IOC_REMOVE_ENCRYPTION_KEY

 * - FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS

 * - FS_IOC_GET_ENCRYPTION_KEY_STATUS

 *

 * See the "User API" section of Documentation/filesystems/fscrypt.rst for more

 * information about these ioctls.

/*

 * Type of key in ->s_master_keys.  Each key of this type represents a master

 * key which has been added to the filesystem.  Its payload is a

 * 'struct fscrypt_master_key'.  The "." prefix in the key type name prevents

 * users from adding keys of this type via the keyrings syscalls rather than via

 * the intended method of FS_IOC_ADD_ENCRYPTION_KEY.

	/*

	 * We just charge FSCRYPT_MAX_KEY_SIZE bytes to the user's key quota for

	 * each key, regardless of the exact key size.  The amount of memory

	 * actually used is greater than the size of the raw key anyway.

/*

 * Type of key in ->mk_users.  Each key of this type represents a particular

 * user who has added a particular master key.

 *

 * Note that the name of this key type really should be something like

 * ".fscrypt-user" instead of simply ".fscrypt".  But the shorter name is chosen

 * mainly for simplicity of presentation in /proc/keys when read by a non-root

 * user.  And it is expected to be rare that a key is actually added by multiple

 * users, since users should keep their encryption keys confidential.

 Search ->s_master_keys or ->mk_users */

	/*

	 * We need to mark the keyring reference as "possessed" so that we

	 * acquire permission to search it, via the KEY_POS_SEARCH permission.

 possessed */);

 not found */

 recently invalidated */

 Create ->s_master_keys if needed.  Synchronized by fscrypt_add_key_mutex. */

	/*

	 * Pairs with the smp_load_acquire() in fscrypt_find_master_key().

	 * I.e., here we publish ->s_master_keys with a RELEASE barrier so that

	 * concurrent tasks can ACQUIRE it.

/*

 * Find the specified master key in ->s_master_keys.

 * Returns ERR_PTR(-ENOKEY) if not found.

	/*

	 * Pairs with the smp_store_release() in allocate_filesystem_keyring().

	 * I.e., another task can publish ->s_master_keys concurrently,

	 * executing a RELEASE barrier.  We need to use smp_load_acquire() here

	 * to safely ACQUIRE the memory the other task published.

 No keyring yet, so no keys yet. */

/*

 * Find the current user's "key" in the master key's ->mk_users.

 * Returns ERR_PTR(-ENOKEY) if not found.

/*

 * Give the current user a "key" in ->mk_users.  This charges the user's quota

 * and marks the master key as added by the current user, so that it cannot be

 * removed by another user with the key.  Either the master key's key->sem must

 * be held for write, or the master key must be still undergoing initialization.

/*

 * Remove the current user's "key" from ->mk_users.

 * The master key's key->sem must be held for write.

 *

 * Returns 0 if removed, -ENOKEY if not found, or another -errno code.

/*

 * Allocate a new fscrypt_master_key which contains the given secret, set it as

 * the payload of a new 'struct key' of type fscrypt, and link the 'struct key'

 * into the given keyring.  Synchronized by fscrypt_add_key_mutex.

 secret is present */

	/*

	 * Note that we don't charge this key to anyone's quota, since when

	 * ->mk_users is in use those keys are charged instead, and otherwise

	 * (when ->mk_users isn't in use) only root can add these keys.

	/*

	 * If the current user is already in ->mk_users, then there's nothing to

	 * do.  (Not applicable for v1 policy keys, which have NULL ->mk_users.)

 If we'll be re-adding ->mk_secret, try to take the reference. */

 Add the current user to ->mk_users, if applicable. */

 Re-add the secret if needed. */

 serialize find + link */

 Didn't find the key in ->s_master_keys.  Add it. */

		/*

		 * Found the key in ->s_master_keys.  Re-add the secret if

		 * needed, and add the user to ->mk_users if needed.

 Key being removed or needs to be removed */

		/*

		 * Now that the HKDF context is initialized, the raw key is no

		 * longer needed.

 Calculate the key identifier */

/*

 * Retrieve the raw key from the Linux keyring key specified by 'key_id', and

 * store it into 'secret'.

 *

 * The key must be of type "fscrypt-provisioning" and must have the field

 * fscrypt_provisioning_key_payload::type set to 'type', indicating that it's

 * only usable with fscrypt with the particular KDF version identified by

 * 'type'.  We don't use the "logon" key type because there's no way to

 * completely restrict the use of such keys; they can be used by any kernel API

 * that accepts "logon" keys and doesn't require a specific service prefix.

 *

 * The ability to specify the key via Linux keyring key is intended for cases

 * where userspace needs to re-add keys after the filesystem is unmounted and

 * re-mounted.  Most users should just provide the raw key directly instead.

 Don't allow fscrypt v1 keys to be used as v2 keys and vice versa. */

/*

 * Add a master encryption key to the filesystem, causing all files which were

 * encrypted with it to appear "unlocked" (decrypted) when accessed.

 *

 * When adding a key for use by v1 encryption policies, this ioctl is

 * privileged, and userspace must provide the 'key_descriptor'.

 *

 * When adding a key for use by v2+ encryption policies, this ioctl is

 * unprivileged.  This is needed, in general, to allow non-root users to use

 * encryption without encountering the visibility problems of process-subscribed

 * keyrings and the inability to properly remove keys.  This works by having

 * each key identified by its cryptographically secure hash --- the

 * 'key_identifier'.  The cryptographic hash ensures that a malicious user

 * cannot add the wrong key for a given identifier.  Furthermore, each added key

 * is charged to the appropriate user's quota for the keyrings service, which

 * prevents a malicious user from adding too many keys.  Finally, we forbid a

 * user from removing a key while other users have added it too, which prevents

 * a user who knows another user's key from causing a denial-of-service by

 * removing it at an inopportune time.  (We tolerate that a user who knows a key

 * can prevent other users from removing it.)

 *

 * For more details, see the "FS_IOC_ADD_ENCRYPTION_KEY" section of

 * Documentation/filesystems/fscrypt.rst.

	/*

	 * Only root can add keys that are identified by an arbitrary descriptor

	 * rather than by a cryptographic hash --- since otherwise a malicious

	 * user could add the wrong key.

 Return the key identifier to userspace, if applicable */

/*

 * Add the key for '-o test_dummy_encryption' to the filesystem keyring.

 *

 * Use a per-boot random key to prevent people from misusing this option.

/*

 * Verify that the current user has added a master key with the given identifier

 * (returns -ENOKEY if not).  This is needed to prevent a user from encrypting

 * their files using some other user's key which they don't actually know.

 * Cryptographically this isn't much of a problem, but the semantics of this

 * would be a bit weird, so it's best to just forbid it.

 *

 * The system administrator (CAP_FOWNER) can override this, which should be

 * enough for any use cases where encryption policies are being set using keys

 * that were chosen ahead of time but aren't available at the moment.

 *

 * Note that the key may have already removed by the time this returns, but

 * that's okay; we just care whether the key was there at some point.

 *

 * Return: 0 if the key is added, -ENOKEY if it isn't, or another -errno code

/*

 * Try to evict the inode's dentries from the dentry cache.  If the inode is a

 * directory, then it can have at most one dentry; however, that dentry may be

 * pinned by child dentries, so first try to evict the children too.

 select an example file to show for debugging purposes */

 If the inode is currently being created, ino may still be 0. */

	/*

	 * An inode can't be evicted while it is dirty or has dirty pages.

	 * Thus, we first have to clean the inodes in ->mk_decrypted_inodes.

	 *

	 * Just do it the easy way: call sync_filesystem().  It's overkill, but

	 * it works, and it's more important to minimize the amount of caches we

	 * drop than the amount of data we sync.  Also, unprivileged users can

	 * already call sync_filesystem() via sys_syncfs() or sys_sync().

 If a sync error occurs, still try to evict as much as possible. */

	/*

	 * Inodes are pinned by their dentries, so we have to evict their

	 * dentries.  shrink_dcache_sb() would suffice, but would be overkill

	 * and inappropriate for use by unprivileged users.  So instead go

	 * through the inodes' alias lists and try to evict each dentry.

	/*

	 * evict_dentries_for_decrypted_inodes() already iput() each inode in

	 * the list; any inodes for which that dropped the last reference will

	 * have been evicted due to fscrypt_drop_inode() detecting the key

	 * removal and telling the VFS to evict the inode.  So to finish, we

	 * just need to check whether any inodes couldn't be evicted.

/*

 * Try to remove an fscrypt master encryption key.

 *

 * FS_IOC_REMOVE_ENCRYPTION_KEY (all_users=false) removes the current user's

 * claim to the key, then removes the key itself if no other users have claims.

 * FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS (all_users=true) always removes the

 * key itself.

 *

 * To "remove the key itself", first we wipe the actual master key secret, so

 * that no more inodes can be unlocked with it.  Then we try to evict all cached

 * inodes that had been unlocked with the key.

 *

 * If all inodes were evicted, then we unlink the fscrypt_master_key from the

 * keyring.  Otherwise it remains in the keyring in the "incompletely removed"

 * state (without the actual secret key) where it tracks the list of remaining

 * inodes.  Userspace can execute the ioctl again later to retry eviction, or

 * alternatively can re-add the secret key again.

 *

 * For more details, see the "Removing keys" section of

 * Documentation/filesystems/fscrypt.rst.

	/*

	 * Only root can add and remove keys that are identified by an arbitrary

	 * descriptor rather than by a cryptographic hash.

 Find the key being removed. */

 If relevant, remove current user's (or all users) claim to the key */

			/*

			 * Other users have still added the key too.  We removed

			 * the current user's claim to the key, but we still

			 * can't remove the key itself.

 No user claims remaining.  Go ahead and wipe the secret. */

		/*

		 * No inodes reference the key, and we wiped the secret, so the

		 * key object is free to be removed from the keyring.

 Some inodes still reference this key; try to evict them. */

	/*

	 * We return 0 if we successfully did something: removed a claim to the

	 * key, wiped the secret, or tried locking the files again.  Users need

	 * to check the informational status flags if they care whether the key

	 * has been fully removed including all files locked.

/*

 * Retrieve the status of an fscrypt master encryption key.

 *

 * We set ->status to indicate whether the key is absent, present, or

 * incompletely removed.  "Incompletely removed" means that the master key

 * secret has been removed, but some files which had been unlocked with it are

 * still in use.  This field allows applications to easily determine the state

 * of an encrypted directory without using a hack such as trying to open a

 * regular file in it (which can confuse the "incompletely removed" state with

 * absent or present).

 *

 * In addition, for v2 policy keys we allow applications to determine, via

 * ->status_flags and ->user_count, whether the key has been added by the

 * current user, by other users, or by both.  Most applications should not need

 * this, since ordinarily only one user should know a given key.  However, if a

 * secret key is shared by multiple users, applications may wish to add an

 * already-present key to prevent other users from removing it.  This ioctl can

 * be used to check whether that really is the case before the work is done to

 * add the key --- which might e.g. require prompting the user for a passphrase.

 *

 * For more details, see the "FS_IOC_GET_ENCRYPTION_KEY_STATUS" section of

 * Documentation/filesystems/fscrypt.rst.

 SPDX-License-Identifier: GPL-2.0

/*

 * This contains functions for filename crypto management

 *

 * Copyright (C) 2015, Google, Inc.

 * Copyright (C) 2015, Motorola Mobility

 *

 * Written by Uday Savagaonkar, 2014.

 * Modified by Jaegeuk Kim, 2015.

 *

 * This has not yet undergone a rigorous security audit.

/*

 * struct fscrypt_nokey_name - identifier for directory entry when key is absent

 *

 * When userspace lists an encrypted directory without access to the key, the

 * filesystem must present a unique "no-key name" for each filename that allows

 * it to find the directory entry again if requested.  Naively, that would just

 * mean using the ciphertext filenames.  However, since the ciphertext filenames

 * can contain illegal characters ('\0' and '/'), they must be encoded in some

 * way.  We use base64url.  But that can cause names to exceed NAME_MAX (255

 * bytes), so we also need to use a strong hash to abbreviate long names.

 *

 * The filesystem may also need another kind of hash, the "dirhash", to quickly

 * find the directory entry.  Since filesystems normally compute the dirhash

 * over the on-disk filename (i.e. the ciphertext), it's not computable from

 * no-key names that abbreviate the ciphertext using the strong hash to fit in

 * NAME_MAX.  It's also not computable if it's a keyed hash taken over the

 * plaintext (but it may still be available in the on-disk directory entry);

 * casefolded directories use this type of dirhash.  At least in these cases,

 * each no-key name must include the name's dirhash too.

 *

 * To meet all these requirements, we base64url-encode the following

 * variable-length structure.  It contains the dirhash, or 0's if the filesystem

 * didn't provide one; up to 149 bytes of the ciphertext name; and for

 * ciphertexts longer than 149 bytes, also the SHA-256 of the remaining bytes.

 *

 * This ensures that each no-key name contains everything needed to find the

 * directory entry again, contains only legal characters, doesn't exceed

 * NAME_MAX, is unambiguous unless there's a SHA-256 collision, and that we only

 * take the performance hit of SHA-256 on very long filenames (which are rare).

 189 bytes => 252 bytes base64url-encoded, which is <= NAME_MAX (255) */

/*

 * Decoded size of max-size no-key name, i.e. a name that was abbreviated using

 * the strong hash and thus includes the 'sha256' field.  This isn't simply

 * sizeof(struct fscrypt_nokey_name), as the padding at the end isn't included.

 Encoded size of max-size no-key name */

/**

 * fscrypt_fname_encrypt() - encrypt a filename

 * @inode: inode of the parent directory (for regular filenames)

 *	   or of the symlink (for symlink targets)

 * @iname: the filename to encrypt

 * @out: (output) the encrypted filename

 * @olen: size of the encrypted filename.  It must be at least @iname->len.

 *	  Any extra space is filled with NUL padding before encryption.

 *

 * Return: 0 on success, -errno on failure

	/*

	 * Copy the filename to the output buffer for encrypting in-place and

	 * pad it with the needed number of NUL bytes.

 Initialize the IV */

 Set up the encryption request */

 Do the encryption */

/**

 * fname_decrypt() - decrypt a filename

 * @inode: inode of the parent directory (for regular filenames)

 *	   or of the symlink (for symlink targets)

 * @iname: the encrypted filename to decrypt

 * @oname: (output) the decrypted filename.  The caller must have allocated

 *	   enough space for this, e.g. using fscrypt_fname_alloc_buffer().

 *

 * Return: 0 on success, -errno on failure

 Allocate request */

 Initialize IV */

 Create decryption request */

/**

 * fscrypt_base64url_encode() - base64url-encode some binary data

 * @src: the binary data to encode

 * @srclen: the length of @src in bytes

 * @dst: (output) the base64url-encoded string.  Not NUL-terminated.

 *

 * Encodes data using base64url encoding, i.e. the "Base 64 Encoding with URL

 * and Filename Safe Alphabet" specified by RFC 4648.  '='-padding isn't used,

 * as it's unneeded and not required by the RFC.  base64url is used instead of

 * base64 to avoid the '/' character, which isn't allowed in filenames.

 *

 * Return: the length of the resulting base64url-encoded string in bytes.

 *	   This will be equal to FSCRYPT_BASE64URL_CHARS(srclen).

/**

 * fscrypt_base64url_decode() - base64url-decode a string

 * @src: the string to decode.  Doesn't need to be NUL-terminated.

 * @srclen: the length of @src in bytes

 * @dst: (output) the decoded binary data

 *

 * Decodes a string using base64url encoding, i.e. the "Base 64 Encoding with

 * URL and Filename Safe Alphabet" specified by RFC 4648.  '='-padding isn't

 * accepted, nor are non-encoding characters such as whitespace.

 *

 * This implementation hasn't been optimized for performance.

 *

 * Return: the length of the resulting decoded binary data in bytes,

 *	   or -1 if the string isn't a valid base64url string.

/**

 * fscrypt_fname_alloc_buffer() - allocate a buffer for presented filenames

 * @max_encrypted_len: maximum length of encrypted filenames the buffer will be

 *		       used to present

 * @crypto_str: (output) buffer to allocate

 *

 * Allocate a buffer that is large enough to hold any decrypted or encoded

 * filename (null-terminated), for the given maximum encrypted filename length.

 *

 * Return: 0 on success, -errno on failure

/**

 * fscrypt_fname_free_buffer() - free a buffer for presented filenames

 * @crypto_str: the buffer to free

 *

 * Free a buffer that was allocated by fscrypt_fname_alloc_buffer().

/**

 * fscrypt_fname_disk_to_usr() - convert an encrypted filename to

 *				 user-presentable form

 * @inode: inode of the parent directory (for regular filenames)

 *	   or of the symlink (for symlink targets)

 * @hash: first part of the name's dirhash, if applicable.  This only needs to

 *	  be provided if the filename is located in an indexed directory whose

 *	  encryption key may be unavailable.  Not needed for symlink targets.

 * @minor_hash: second part of the name's dirhash, if applicable

 * @iname: encrypted filename to convert.  May also be "." or "..", which

 *	   aren't actually encrypted.

 * @oname: output buffer for the user-presentable filename.  The caller must

 *	   have allocated enough space for this, e.g. using

 *	   fscrypt_fname_alloc_buffer().

 *

 * If the key is available, we'll decrypt the disk name.  Otherwise, we'll

 * encode it for presentation in fscrypt_nokey_name format.

 * See struct fscrypt_nokey_name for details.

 *

 * Return: 0 on success, -errno on failure

 size of the unencoded no-key name */

	/*

	 * Sanity check that struct fscrypt_nokey_name doesn't have padding

	 * between fields and that its encoded size never exceeds NAME_MAX.

 Compute strong hash of remaining part of name. */

/**

 * fscrypt_setup_filename() - prepare to search a possibly encrypted directory

 * @dir: the directory that will be searched

 * @iname: the user-provided filename being searched for

 * @lookup: 1 if we're allowed to proceed without the key because it's

 *	->lookup() or we're finding the dir_entry for deletion; 0 if we cannot

 *	proceed without the key because we're going to create the dir_entry.

 * @fname: the filename information to be filled in

 *

 * Given a user-provided filename @iname, this function sets @fname->disk_name

 * to the name that would be stored in the on-disk directory entry, if possible.

 * If the directory is unencrypted this is simply @iname.  Else, if we have the

 * directory's encryption key, then @iname is the plaintext, so we encrypt it to

 * get the disk_name.

 *

 * Else, for keyless @lookup operations, @iname should be a no-key name, so we

 * decode it to get the struct fscrypt_nokey_name.  Non-@lookup operations will

 * be impossible in this case, so we fail them with ENOKEY.

 *

 * If successful, fscrypt_free_filename() must be called later to clean up.

 *

 * Return: 0 on success, -errno on failure

	/*

	 * We don't have the key and we are doing a lookup; decode the

	 * user-supplied name

 The full ciphertext filename is available. */

/**

 * fscrypt_match_name() - test whether the given name matches a directory entry

 * @fname: the name being searched for

 * @de_name: the name from the directory entry

 * @de_name_len: the length of @de_name in bytes

 *

 * Normally @fname->disk_name will be set, and in that case we simply compare

 * that to the name stored in the directory entry.  The only exception is that

 * if we don't have the key for an encrypted directory and the name we're

 * looking for is very long, then we won't have the full disk_name and instead

 * we'll need to match against a fscrypt_nokey_name that includes a strong hash.

 *

 * Return: %true if the name matches, otherwise %false.

/**

 * fscrypt_fname_siphash() - calculate the SipHash of a filename

 * @dir: the parent directory

 * @name: the filename to calculate the SipHash of

 *

 * Given a plaintext filename @name and a directory @dir which uses SipHash as

 * its dirhash method and has had its fscrypt key set up, this function

 * calculates the SipHash of that name using the directory's secret dirhash key.

 *

 * Return: the SipHash of @name using the hash key of @dir

/*

 * Validate dentries in encrypted directories to make sure we aren't potentially

 * caching stale dentries after a key has been added.

	/*

	 * Plaintext names are always valid, since fscrypt doesn't support

	 * reverting to no-key names without evicting the directory's inode

	 * -- which implies eviction of the dentries in the directory.

	/*

	 * No-key name; valid if the directory's key is still unavailable.

	 *

	 * Although fscrypt forbids rename() on no-key names, we still must use

	 * dget_parent() here rather than use ->d_parent directly.  That's

	 * because a corrupted fs image may contain directory hard links, which

	 * the VFS handles by moving the directory's dentry tree in the dcache

	 * each time ->lookup() finds the directory and it already has a dentry

	 * elsewhere.  Thus ->d_parent can be changing, and we must safely grab

	 * a reference to some ->d_parent to prevent it from being freed.

	/*

	 * Pass allow_unsupported=true, so that files with an unsupported

	 * encryption policy can be deleted.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * fs/crypto/hooks.c

 *

 * Encryption hooks for higher-level filesystem operations.

/**

 * fscrypt_file_open() - prepare to open a possibly-encrypted regular file

 * @inode: the inode being opened

 * @filp: the struct file being set up

 *

 * Currently, an encrypted regular file can only be opened if its encryption key

 * is available; access to the raw encrypted contents is not supported.

 * Therefore, we first set up the inode's encryption key (if not already done)

 * and return an error if it's unavailable.

 *

 * We also verify that if the parent directory (from the path via which the file

 * is being opened) is encrypted, then the inode being opened uses the same

 * encryption policy.  This is needed as part of the enforcement that all files

 * in an encrypted directory tree use the same encryption policy, as a

 * protection against certain types of offline attacks.  Note that this check is

 * needed even when opening an *unencrypted* file, since it's forbidden to have

 * an unencrypted file in an encrypted directory.

 *

 * Return: 0 on success, -ENOKEY if the key is missing, or another -errno code

	/*

	 * We don't need to separately check that the directory inode's key is

	 * available, as it's implied by the dentry not being a no-key name.

	/*

	 * We don't need to separately check that the directory inodes' keys are

	 * available, as it's implied by the dentries not being no-key names.

/**

 * fscrypt_prepare_setflags() - prepare to change flags with FS_IOC_SETFLAGS

 * @inode: the inode on which flags are being changed

 * @oldflags: the old flags

 * @flags: the new flags

 *

 * The caller should be holding i_rwsem for write.

 *

 * Return: 0 on success; -errno if the flags change isn't allowed or if

 *	   another error occurs.

	/*

	 * When the CASEFOLD flag is set on an encrypted directory, we must

	 * derive the secret key needed for the dirhash.  This is only possible

	 * if the directory uses a v2 encryption policy.

/**

 * fscrypt_prepare_symlink() - prepare to create a possibly-encrypted symlink

 * @dir: directory in which the symlink is being created

 * @target: plaintext symlink target

 * @len: length of @target excluding null terminator

 * @max_len: space the filesystem has available to store the symlink target

 * @disk_link: (out) the on-disk symlink target being prepared

 *

 * This function computes the size the symlink target will require on-disk,

 * stores it in @disk_link->len, and validates it against @max_len.  An

 * encrypted symlink may be longer than the original.

 *

 * Additionally, @disk_link->name is set to @target if the symlink will be

 * unencrypted, but left NULL if the symlink will be encrypted.  For encrypted

 * symlinks, the filesystem must call fscrypt_encrypt_symlink() to create the

 * on-disk target later.  (The reason for the two-step process is that some

 * filesystems need to know the size of the symlink target before creating the

 * inode, e.g. to determine whether it will be a "fast" or "slow" symlink.)

 *

 * Return: 0 on success, -ENAMETOOLONG if the symlink target is too long,

 * -ENOKEY if the encryption key is missing, or another -errno code if a problem

 * occurred while setting up the encryption key.

	/*

	 * To calculate the size of the encrypted symlink target we need to know

	 * the amount of NUL padding, which is determined by the flags set in

	 * the encryption policy which will be inherited from the directory.

 Not encrypted */

	/*

	 * Calculate the size of the encrypted symlink and verify it won't

	 * exceed max_len.  Note that for historical reasons, encrypted symlink

	 * targets are prefixed with the ciphertext length, despite this

	 * actually being redundant with i_size.  This decreases by 2 bytes the

	 * longest symlink target we can accept.

	 *

	 * We could recover 1 byte by not counting a null terminator, but

	 * counting it (even though it is meaningless for ciphertext) is simpler

	 * for now since filesystems will assume it is there and subtract it.

	/*

	 * fscrypt_prepare_new_inode() should have already set up the new

	 * symlink inode's encryption key.  We don't wait until now to do it,

	 * since we may be in a filesystem transaction now.

 filesystem-provided buffer */

	/*

	 * Null-terminating the ciphertext doesn't make sense, but we still

	 * count the null terminator in the length, so we might as well

	 * initialize it just in case the filesystem writes it out.

 Cache the plaintext symlink target for later use by get_link() */

/**

 * fscrypt_get_symlink() - get the target of an encrypted symlink

 * @inode: the symlink inode

 * @caddr: the on-disk contents of the symlink

 * @max_size: size of @caddr buffer

 * @done: if successful, will be set up to free the returned target if needed

 *

 * If the symlink's encryption key is available, we decrypt its target.

 * Otherwise, we encode its target for presentation.

 *

 * This may sleep, so the filesystem must have dropped out of RCU mode already.

 *

 * Return: the presentable symlink target or an ERR_PTR()

 This is for encrypted symlinks only */

 If the decrypted target is already cached, just return it. */

	/*

	 * Try to set up the symlink's encryption key, but we can continue

	 * regardless of whether the key is available or not.

	/*

	 * For historical reasons, encrypted symlink targets are prefixed with

	 * the ciphertext length, even though this is redundant with i_size.

	/*

	 * Cache decrypted symlink targets in i_link for later use.  Don't cache

	 * symlink targets encoded without the key, since those become outdated

	 * once the key is added.  This pairs with the READ_ONCE() above and in

	 * the VFS path lookup code.

/**

 * fscrypt_symlink_getattr() - set the correct st_size for encrypted symlinks

 * @path: the path for the encrypted symlink being queried

 * @stat: the struct being filled with the symlink's attributes

 *

 * Override st_size of encrypted symlinks to be the length of the decrypted

 * symlink target (or the no-key encoded symlink target, if the key is

 * unavailable) rather than the length of the encrypted symlink target.  This is

 * necessary for st_size to match the symlink target that userspace actually

 * sees.  POSIX requires this, and some userspace programs depend on it.

 *

 * This requires reading the symlink target from disk if needed, setting up the

 * inode's encryption key if possible, and then decrypting or encoding the

 * symlink target.  This makes lstat() more heavyweight than is normally the

 * case.  However, decrypted symlink targets will be cached in ->i_link, so

 * usually the symlink won't have to be read and decrypted again later if/when

 * it is actually followed, readlink() is called, or lstat() is called again.

 *

 * Return: 0 on success, -errno on failure

	/*

	 * To get the symlink target that userspace will see (whether it's the

	 * decrypted target or the no-key encoded target), we can just get it in

	 * the same way the VFS does during path resolution and readlink().

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This contains encryption functions for per-file encryption.

 *

 * Copyright (C) 2015, Google, Inc.

 * Copyright (C) 2015, Motorola Mobility

 *

 * Written by Michael Halcrow, 2014.

 *

 * Filename encryption additions

 *	Uday Savagaonkar, 2014

 * Encryption policy handling additions

 *	Ildar Muslukhov, 2014

 * Add fscrypt_pullback_bio_page()

 *	Jaegeuk Kim, 2015.

 *

 * This has not yet undergone a rigorous security audit.

 *

 * The usage of AES-XTS should conform to recommendations in NIST

 * Special Publication 800-38E and IEEE P1619/D16.

/**

 * fscrypt_free_bounce_page() - free a ciphertext bounce page

 * @bounce_page: the bounce page to free, or NULL

 *

 * Free a bounce page that was allocated by fscrypt_encrypt_pagecache_blocks(),

 * or by fscrypt_alloc_bounce_page() directly.

 Encrypt or decrypt a single filesystem block of file contents */

/**

 * fscrypt_encrypt_pagecache_blocks() - Encrypt filesystem blocks from a

 *					pagecache page

 * @page:      The locked pagecache page containing the block(s) to encrypt

 * @len:       Total size of the block(s) to encrypt.  Must be a nonzero

 *		multiple of the filesystem's block size.

 * @offs:      Byte offset within @page of the first block to encrypt.  Must be

 *		a multiple of the filesystem's block size.

 * @gfp_flags: Memory allocation flags.  See details below.

 *

 * A new bounce page is allocated, and the specified block(s) are encrypted into

 * it.  In the bounce page, the ciphertext block(s) will be located at the same

 * offsets at which the plaintext block(s) were located in the source page; any

 * other parts of the bounce page will be left uninitialized.  However, normally

 * blocksize == PAGE_SIZE and the whole page is encrypted at once.

 *

 * This is for use by the filesystem's ->writepages() method.

 *

 * The bounce page allocation is mempool-backed, so it will always succeed when

 * @gfp_flags includes __GFP_DIRECT_RECLAIM, e.g. when it's GFP_NOFS.  However,

 * only the first page of each bio can be allocated this way.  To prevent

 * deadlocks, for any additional pages a mask like GFP_NOWAIT must be used.

 *

 * Return: the new encrypted bounce page on success; an ERR_PTR() on failure

/**

 * fscrypt_encrypt_block_inplace() - Encrypt a filesystem block in-place

 * @inode:     The inode to which this block belongs

 * @page:      The page containing the block to encrypt

 * @len:       Size of block to encrypt.  Doesn't need to be a multiple of the

 *		fs block size, but must be a multiple of FS_CRYPTO_BLOCK_SIZE.

 * @offs:      Byte offset within @page at which the block to encrypt begins

 * @lblk_num:  Filesystem logical block number of the block, i.e. the 0-based

 *		number of the block within the file

 * @gfp_flags: Memory allocation flags

 *

 * Encrypt a possibly-compressed filesystem block that is located in an

 * arbitrary page, not necessarily in the original pagecache page.  The @inode

 * and @lblk_num must be specified, as they can't be determined from @page.

 *

 * Return: 0 on success; -errno on failure

/**

 * fscrypt_decrypt_pagecache_blocks() - Decrypt filesystem blocks in a

 *					pagecache page

 * @page:      The locked pagecache page containing the block(s) to decrypt

 * @len:       Total size of the block(s) to decrypt.  Must be a nonzero

 *		multiple of the filesystem's block size.

 * @offs:      Byte offset within @page of the first block to decrypt.  Must be

 *		a multiple of the filesystem's block size.

 *

 * The specified block(s) are decrypted in-place within the pagecache page,

 * which must still be locked and not uptodate.  Normally, blocksize ==

 * PAGE_SIZE and the whole page is decrypted at once.

 *

 * This is for use by the filesystem's ->readpages() method.

 *

 * Return: 0 on success; -errno on failure

/**

 * fscrypt_decrypt_block_inplace() - Decrypt a filesystem block in-place

 * @inode:     The inode to which this block belongs

 * @page:      The page containing the block to decrypt

 * @len:       Size of block to decrypt.  Doesn't need to be a multiple of the

 *		fs block size, but must be a multiple of FS_CRYPTO_BLOCK_SIZE.

 * @offs:      Byte offset within @page at which the block to decrypt begins

 * @lblk_num:  Filesystem logical block number of the block, i.e. the 0-based

 *		number of the block within the file

 *

 * Decrypt a possibly-compressed filesystem block that is located in an

 * arbitrary page, not necessarily in the original pagecache page.  The @inode

 * and @lblk_num must be specified, as they can't be determined from @page.

 *

 * Return: 0 on success; -errno on failure

/**

 * fscrypt_initialize() - allocate major buffers for fs encryption.

 * @cop_flags:  fscrypt operations flags

 *

 * We only call this when we start accessing encrypted files, since it

 * results in memory getting allocated that wouldn't otherwise be used.

 *

 * Return: 0 on success; -errno on failure

 No need to allocate a bounce page pool if this FS won't use it. */

/**

 * fscrypt_init() - Set up for fs encryption.

 *

 * Return: 0 on success; -errno on failure

	/*

	 * Use an unbound workqueue to allow bios to be decrypted in parallel

	 * even when they happen to complete on the same CPU.  This sacrifices

	 * locality, but it's worthwhile since decryption is CPU-intensive.

	 *

	 * Also use a high-priority workqueue to prioritize decryption work,

	 * which blocks reads from completing, over regular application tasks.

 SPDX-License-Identifier: GPL-2.0

/*

 * Implementation of HKDF ("HMAC-based Extract-and-Expand Key Derivation

 * Function"), aka RFC 5869.  See also the original paper (Krawczyk 2010):

 * "Cryptographic Extraction and Key Derivation: The HKDF Scheme".

 *

 * This is used to derive keys from the fscrypt master keys.

 *

 * Copyright 2019 Google LLC

/*

 * HKDF supports any unkeyed cryptographic hash algorithm, but fscrypt uses

 * SHA-512 because it is well-established, secure, and reasonably efficient.

 *

 * HKDF-SHA256 was also considered, as its 256-bit security strength would be

 * sufficient here.  A 512-bit security strength is "nice to have", though.

 * Also, on 64-bit CPUs, SHA-512 is usually just as fast as SHA-256.  In the

 * common case of deriving an AES-256-XTS key (512 bits), that can result in

 * HKDF-SHA512 being much faster than HKDF-SHA256, as the longer digest size of

 * SHA-512 causes HKDF-Expand to only need to do one iteration rather than two.

/*

 * HKDF consists of two steps:

 *

 * 1. HKDF-Extract: extract a pseudorandom key of length HKDF_HASHLEN bytes from

 *    the input keying material and optional salt.

 * 2. HKDF-Expand: expand the pseudorandom key into output keying material of

 *    any length, parameterized by an application-specific info string.

 *

 * HKDF-Extract can be skipped if the input is already a pseudorandom key of

 * length HKDF_HASHLEN bytes.  However, cipher modes other than AES-256-XTS take

 * shorter keys, and we don't want to force users of those modes to provide

 * unnecessarily long master keys.  Thus fscrypt still does HKDF-Extract.  No

 * salt is used, since fscrypt master keys should already be pseudorandom and

 * there's no way to persist a random salt per master key from kernel mode.

 HKDF-Extract (RFC 5869 section 2.2), unsalted */

/*

 * Compute HKDF-Extract using the given master key as the input keying material,

 * and prepare an HMAC transform object keyed by the resulting pseudorandom key.

 *

 * Afterwards, the keyed HMAC transform object can be used for HKDF-Expand many

 * times without having to recompute HKDF-Extract each time.

/*

 * HKDF-Expand (RFC 5869 section 2.3).  This expands the pseudorandom key, which

 * was already keyed into 'hkdf->hmac_tfm' by fscrypt_init_hkdf(), into 'okmlen'

 * bytes of output keying material parameterized by the application-specific

 * 'info' of length 'infolen' bytes, prefixed by "fscrypt\0" and the 'context'

 * byte.  This is thread-safe and may be called by multiple threads in parallel.

 *

 * ('context' isn't part of the HKDF specification; it's just a prefix fscrypt

 * adds to its application-specific info strings to guarantee that it doesn't

 * accidentally repeat an info string when using HKDF for different purposes.)

 so caller doesn't need to */

 SPDX-License-Identifier: GPL-2.0

/*

 * Inline encryption support for fscrypt

 *

 * Copyright 2019 Google LLC

/*

 * With "inline encryption", the block layer handles the decryption/encryption

 * as part of the bio, instead of the filesystem doing the crypto itself via

 * crypto API.  See Documentation/block/inline-encryption.rst.  fscrypt still

 * provides the key and IV to use.

 Default case: IVs are just the file logical block number */

 Enable inline encryption for this file if supported. */

 The file must need contents encryption, not filenames encryption */

 The crypto mode must have a blk-crypto counterpart */

 The filesystem must be mounted with -o inlinecrypt */

	/*

	 * When a page contains multiple logically contiguous filesystem blocks,

	 * some filesystem code only calls fscrypt_mergeable_bio() for the first

	 * block in the page. This is fine for most of fscrypt's IV generation

	 * strategies, where contiguous blocks imply contiguous IVs. But it

	 * doesn't work with IV_INO_LBLK_32. For now, simply exclude

	 * IV_INO_LBLK_32 with blocksize != PAGE_SIZE from inline encryption.

	/*

	 * On all the filesystem's devices, blk-crypto must support the crypto

	 * configuration that the file would use.

	/*

	 * We have to start using blk-crypto on all the filesystem's devices.

	 * We also have to save all the request_queue's for later so that the

	 * key can be evicted from them.  This is needed because some keys

	 * aren't destroyed until after the filesystem was already unmounted

	 * (namely, the per-mode keys in struct fscrypt_master_key).

	/*

	 * Pairs with the smp_load_acquire() in fscrypt_is_key_prepared().

	 * I.e., here we publish ->blk_key with a RELEASE barrier so that

	 * concurrent tasks can ACQUIRE it.  Note that this concurrency is only

	 * possible for per-mode keys, not for per-file keys.

/**

 * fscrypt_set_bio_crypt_ctx() - prepare a file contents bio for inline crypto

 * @bio: a bio which will eventually be submitted to the file

 * @inode: the file's inode

 * @first_lblk: the first file logical block number in the I/O

 * @gfp_mask: memory allocation flags - these must be a waiting mask so that

 *					bio_crypt_set_ctx can't fail.

 *

 * If the contents of the file should be encrypted (or decrypted) with inline

 * encryption, then assign the appropriate encryption context to the bio.

 *

 * Normally the bio should be newly allocated (i.e. no pages added yet), as

 * otherwise fscrypt_mergeable_bio() won't work as intended.

 *

 * The encryption context will be freed automatically when the bio is freed.

 Extract the inode and logical block number from a buffer_head. */

	/*

	 * The ext4 journal (jbd2) can submit a buffer_head it directly created

	 * for a non-pagecache page.  fscrypt doesn't care about these.

/**

 * fscrypt_set_bio_crypt_ctx_bh() - prepare a file contents bio for inline

 *				    crypto

 * @bio: a bio which will eventually be submitted to the file

 * @first_bh: the first buffer_head for which I/O will be submitted

 * @gfp_mask: memory allocation flags

 *

 * Same as fscrypt_set_bio_crypt_ctx(), except this takes a buffer_head instead

 * of an inode and block number directly.

/**

 * fscrypt_mergeable_bio() - test whether data can be added to a bio

 * @bio: the bio being built up

 * @inode: the inode for the next part of the I/O

 * @next_lblk: the next file logical block number in the I/O

 *

 * When building a bio which may contain data which should undergo inline

 * encryption (or decryption) via fscrypt, filesystems should call this function

 * to ensure that the resulting bio contains only contiguous data unit numbers.

 * This will return false if the next part of the I/O cannot be merged with the

 * bio because either the encryption key would be different or the encryption

 * data unit numbers would be discontiguous.

 *

 * fscrypt_set_bio_crypt_ctx() must have already been called on the bio.

 *

 * Return: true iff the I/O is mergeable

	/*

	 * Comparing the key pointers is good enough, as all I/O for each key

	 * uses the same pointer.  I.e., there's currently no need to support

	 * merging requests where the keys are the same but the pointers differ.

/**

 * fscrypt_mergeable_bio_bh() - test whether data can be added to a bio

 * @bio: the bio being built up

 * @next_bh: the next buffer_head for which I/O will be submitted

 *

 * Same as fscrypt_mergeable_bio(), except this takes a buffer_head instead of

 * an inode and block number directly.

 *

 * Return: true iff the I/O is mergeable

 SPDX-License-Identifier: GPL-2.0

/*

 * Encryption policy functions for per-file encryption support.

 *

 * Copyright (C) 2015, Google, Inc.

 * Copyright (C) 2015, Motorola Mobility.

 *

 * Originally written by Michael Halcrow, 2015.

 * Modified by Jaegeuk Kim, 2015.

 * Modified by Eric Biggers, 2019 for v2 policy support.

/**

 * fscrypt_policies_equal() - check whether two encryption policies are the same

 * @policy1: the first policy

 * @policy2: the second policy

 *

 * Return: %true if equal, else %false

	/*

	 * IV_INO_LBLK_* exist only because of hardware limitations, and

	 * currently the only known use case for them involves AES-256-XTS.

	 * That's also all we test currently.  For these reasons, for now only

	 * allow AES-256-XTS here.  This can be relaxed later if a use case for

	 * IV_INO_LBLK_* with other encryption modes arises.

	/*

	 * It's unsafe to include inode numbers in the IVs if the filesystem can

	 * potentially renumber inodes, e.g. via filesystem shrinking.

 With v1, there's no way to derive dirhash keys. */

	/*

	 * IV_INO_LBLK_32 hashes the inode number, so in principle it can

	 * support any ino_bits.  However, currently the inode number is gotten

	 * from inode::i_ino which is 'unsigned long'.  So for now the

	 * implementation limit is 32 bits.

/**

 * fscrypt_supported_policy() - check whether an encryption policy is supported

 * @policy_u: the encryption policy

 * @inode: the inode on which the policy will be used

 *

 * Given an encryption policy, check whether all its encryption modes and other

 * settings are supported by this kernel on the given inode.  (But we don't

 * currently don't check for crypto API support here, so attempting to use an

 * algorithm not configured into the crypto API will still fail later.)

 *

 * Return: %true if supported, else %false

/**

 * fscrypt_new_context() - create a new fscrypt_context

 * @ctx_u: output context

 * @policy_u: input policy

 * @nonce: nonce to use

 *

 * Create an fscrypt_context for an inode that is being assigned the given

 * encryption policy.  @nonce must be a new random nonce.

 *

 * Return: the size of the new context in bytes.

/**

 * fscrypt_policy_from_context() - convert an fscrypt_context to

 *				   an fscrypt_policy

 * @policy_u: output policy

 * @ctx_u: input context

 * @ctx_size: size of input context in bytes

 *

 * Given an fscrypt_context, build the corresponding fscrypt_policy.

 *

 * Return: 0 on success, or -EINVAL if the fscrypt_context has an unrecognized

 * version number or size.

 *

 * This does *not* validate the settings within the policy itself, e.g. the

 * modes, flags, and reserved bits.  Use fscrypt_supported_policy() for that.

 unreachable */

 Retrieve an inode's encryption policy */

 key available, use the cached policy */

		/*

		 * The original encryption policy version provided no way of

		 * verifying that the correct master key was supplied, which was

		 * insecure in scenarios where multiple users have access to the

		 * same encrypted files (even just read-only access).  The new

		 * encryption policy version fixes this and also implies use of

		 * an improved key derivation function and allows non-root users

		 * to securely remove keys.  So as long as compatibility with

		 * old kernels isn't required, it is recommended to use the new

		 * policy version for all new encrypted directories.

	/*

	 * We should just copy the remaining 'size - 1' bytes here, but a

	 * bizarre bug in gcc 7 and earlier (fixed by gcc r255731) causes gcc to

	 * think that size can be 0 here (despite the check above!) *and* that

	 * it's a compile-time constant.  Thus it would think copy_from_user()

	 * is passed compile-time constant ULONG_MAX, causing the compile-time

	 * buffer overflow check to fail, breaking the build. This only occurred

	 * when building an i386 kernel with -Os and branch profiling enabled.

	 *

	 * Work around it by just copying the first byte again...

 The file already uses a different encryption policy. */

 Original ioctl version; can only get the original policy version */

 Extended ioctl version; can get policies of any version */

 arg is policy_size, then policy */

 FS_IOC_GET_ENCRYPTION_NONCE: retrieve file's encryption nonce for testing */

/**

 * fscrypt_has_permitted_context() - is a file's encryption policy permitted

 *				     within its directory?

 *

 * @parent: inode for parent directory

 * @child: inode for file being looked up, opened, or linked into @parent

 *

 * Filesystems must call this before permitting access to an inode in a

 * situation where the parent directory is encrypted (either before allowing

 * ->lookup() to succeed, or for a regular file before allowing it to be opened)

 * and before any operation that involves linking an inode into an encrypted

 * directory, including link, rename, and cross rename.  It enforces the

 * constraint that within a given encrypted directory tree, all files use the

 * same encryption policy.  The pre-access check is needed to detect potentially

 * malicious offline violations of this constraint, while the link and rename

 * checks are needed to prevent online violations of this constraint.

 *

 * Return: 1 if permitted, 0 if forbidden.

 No restrictions on file types which are never encrypted */

 No restrictions if the parent directory is unencrypted */

 Encrypted directories must not contain unencrypted files */

	/*

	 * Both parent and child are encrypted, so verify they use the same

	 * encryption policy.  Compare the fscrypt_info structs if the keys are

	 * available, otherwise retrieve and compare the fscrypt_contexts.

	 *

	 * Note that the fscrypt_context retrieval will be required frequently

	 * when accessing an encrypted directory tree without the key.

	 * Performance-wise this is not a big deal because we already don't

	 * really optimize for file access without the key (to the extent that

	 * such access is even possible), given that any attempted access

	 * already causes a fscrypt_context retrieval and keyring search.

	 *

	 * In any case, if an unexpected error occurs, fall back to "forbidden".

	/*

	 * Allow the case where the parent and child both have an unrecognized

	 * encryption policy, so that files with an unrecognized encryption

	 * policy can be deleted.

/*

 * Return the encryption policy that new files in the directory will inherit, or

 * NULL if none, or an ERR_PTR() on error.  If the directory is encrypted, also

 * ensure that its key is set up, so that the new filename can be encrypted.

/**

 * fscrypt_set_context() - Set the fscrypt context of a new inode

 * @inode: a new inode

 * @fs_data: private data given by FS and passed to ->set_context()

 *

 * This should be called after fscrypt_prepare_new_inode(), generally during a

 * filesystem transaction.  Everything here must be %GFP_NOFS-safe.

 *

 * Return: 0 on success, -errno on failure

 fscrypt_prepare_new_inode() should have set up the key already. */

	/*

	 * This may be the first time the inode number is available, so do any

	 * delayed key setup that requires the inode number.

/**

 * fscrypt_set_test_dummy_encryption() - handle '-o test_dummy_encryption'

 * @sb: the filesystem on which test_dummy_encryption is being specified

 * @arg: the argument to the test_dummy_encryption option.  May be NULL.

 * @dummy_policy: the filesystem's current dummy policy (input/output, see

 *		  below)

 *

 * Handle the test_dummy_encryption mount option by creating a dummy encryption

 * policy, saving it in @dummy_policy, and adding the corresponding dummy

 * encryption key to the filesystem.  If the @dummy_policy is already set, then

 * instead validate that it matches @arg.  Don't support changing it via

 * remount, as that is difficult to do safely.

 *

 * Return: 0 on success (dummy policy set, or the same policy is already set);

 *         -EEXIST if a different dummy policy is already set;

 *         or another -errno value.

 key_spec.u.identifier gets filled in when adding the key */

/**

 * fscrypt_show_test_dummy_encryption() - show '-o test_dummy_encryption'

 * @seq: the seq_file to print the option to

 * @sep: the separator character to use

 * @sb: the filesystem whose options are being shown

 *

 * Show the test_dummy_encryption mount option, if it was specified.

 * This is mainly used for /proc/mounts.

 Handle numbering quirk */

 SPDX-License-Identifier: GPL-2.0

/*

 * Key setup facility for FS encryption support.

 *

 * Copyright (C) 2015, Google, Inc.

 *

 * Originally written by Michael Halcrow, Ildar Muslukhov, and Uday Savagaonkar.

 * Heavily modified since then.

 Create a symmetric cipher object for the given encryption mode and key */

		/*

		 * fscrypt performance can vary greatly depending on which

		 * crypto algorithm implementation is used.  Help people debug

		 * performance problems by logging the ->cra_driver_name the

		 * first time a mode is used.

/*

 * Prepare the crypto transform object or blk-crypto key in @prep_key, given the

 * raw key, encryption mode (@ci->ci_mode), flag indicating which encryption

 * implementation (fs-layer or blk-crypto) will be used (@ci->ci_inlinecrypt),

 * and IV generation method (@ci->ci_policy.flags).

	/*

	 * Pairs with the smp_load_acquire() in fscrypt_is_key_prepared().

	 * I.e., here we publish ->tfm with a RELEASE barrier so that

	 * concurrent tasks can ACQUIRE it.  Note that this concurrency is only

	 * possible for per-mode keys, not for per-file keys.

 Destroy a crypto transform object and/or blk-crypto key. */

 Given a per-file encryption key, set up the file's crypto transform object */

/*

 * Derive a SipHash key from the given fscrypt master key and the given

 * application-specific information string.

 *

 * Note that the KDF produces a byte array, but the SipHash APIs expect the key

 * as a pair of 64-bit words.  Therefore, on big endian CPUs we have to do an

 * endianness swap in order to get the same results as on little endian CPUs.

 pairs with smp_store_release() below */

 pairs with smp_load_acquire() above */

	/*

	 * New inodes may not have an inode number assigned yet.

	 * Hashing their inode number is delayed until later.

		/*

		 * DIRECT_KEY: instead of deriving per-file encryption keys, the

		 * per-file nonce will be included in all the IVs.  But unlike

		 * v1 policies, for v2 policies in this case we don't encrypt

		 * with the master key directly but rather derive a per-mode

		 * encryption key.  This ensures that the master key is

		 * consistently used only for HKDF, avoiding key reuse issues.

		/*

		 * IV_INO_LBLK_64: encryption keys are derived from (master_key,

		 * mode_num, filesystem_uuid), and inode number is included in

		 * the IVs.  This format is optimized for use with inline

		 * encryption hardware compliant with the UFS standard.

 Derive a secret dirhash key for directories that need it. */

/*

 * Check whether the size of the given master key (@mk) is appropriate for the

 * encryption settings which a particular file will use (@ci).

 *

 * If the file uses a v1 encryption policy, then the master key must be at least

 * as long as the derived key, as this is a requirement of the v1 KDF.

 *

 * Otherwise, the KDF can accept any size key, so we enforce a slightly looser

 * requirement: we require that the size of the master key be at least the

 * maximum security strength of any algorithm whose key will be derived from it

 * (but in practice we only need to consider @ci->ci_mode, since any other

 * possible subkeys such as DIRHASH and INODE_HASH will never increase the

 * required key size over @ci->ci_mode).  This allows AES-256-XTS keys to be

 * derived from a 256-bit master key, which is cryptographically sufficient,

 * rather than requiring a 512-bit master key which is unnecessarily long.  (We

 * still allow 512-bit master keys if the user chooses to use them, though.)

/*

 * Find the master key, then set up the inode's actual encryption key.

 *

 * If the master key is found in the filesystem-level keyring, then the

 * corresponding 'struct key' is returned in *master_key_ret with its semaphore

 * read-locked.  This is needed to ensure that only one task links the

 * fscrypt_info into ->mk_decrypted_inodes (as multiple tasks may race to create

 * an fscrypt_info for the same inode), and to synchronize the master key being

 * removed with a new inode starting to use it.

		/*

		 * As a legacy fallback for v1 policies, search for the key in

		 * the current task's subscribed keyrings too.  Don't move this

		 * to before the search of ->s_master_keys, since users

		 * shouldn't be able to override filesystem-level keys.

 Has the secret been removed (via FS_IOC_REMOVE_ENCRYPTION_KEY)? */

		/*

		 * Remove this inode from the list of inodes that were unlocked

		 * with the master key.

		 *

		 * In addition, if we're removing the last inode from a key that

		 * already had its secret removed, invalidate the key so that it

		 * gets removed from ->s_master_keys.

	/*

	 * For existing inodes, multiple tasks may race to set ->i_crypt_info.

	 * So use cmpxchg_release().  This pairs with the smp_load_acquire() in

	 * fscrypt_get_info().  I.e., here we publish ->i_crypt_info with a

	 * RELEASE barrier so that other tasks can ACQUIRE it.

		/*

		 * We won the race and set ->i_crypt_info to our crypt_info.

		 * Now link it into the master key's inode list.

/**

 * fscrypt_get_encryption_info() - set up an inode's encryption key

 * @inode: the inode to set up the key for.  Must be encrypted.

 * @allow_unsupported: if %true, treat an unsupported encryption policy (or

 *		       unrecognized encryption context) the same way as the key

 *		       being unavailable, instead of returning an error.  Use

 *		       %false unless the operation being performed is needed in

 *		       order for files (or directories) to be deleted.

 *

 * Set up ->i_crypt_info, if it hasn't already been done.

 *

 * Note: unless ->i_crypt_info is already set, this isn't %GFP_NOFS-safe.  So

 * generally this shouldn't be called from within a filesystem transaction.

 *

 * Return: 0 if ->i_crypt_info was set or was already set, *or* if the

 *	   encryption key is unavailable.  (Use fscrypt_has_encryption_key() to

 *	   distinguish these cases.)  Also can return another -errno code.

 Algorithm unavailable? */

/**

 * fscrypt_prepare_new_inode() - prepare to create a new inode in a directory

 * @dir: a possibly-encrypted directory

 * @inode: the new inode.  ->i_mode must be set already.

 *	   ->i_ino doesn't need to be set yet.

 * @encrypt_ret: (output) set to %true if the new inode will be encrypted

 *

 * If the directory is encrypted, set up its ->i_crypt_info in preparation for

 * encrypting the name of the new file.  Also, if the new inode will be

 * encrypted, set up its ->i_crypt_info and set *encrypt_ret=true.

 *

 * This isn't %GFP_NOFS-safe, and therefore it should be called before starting

 * any filesystem transaction to create the inode.  For this reason, ->i_ino

 * isn't required to be set yet, as the filesystem may not have set it yet.

 *

 * This doesn't persist the new inode's encryption context.  That still needs to

 * be done later by calling fscrypt_set_context().

 *

 * Return: 0 on success, -ENOKEY if the encryption key is missing, or another

 *	   -errno code

	/*

	 * Only regular files, directories, and symlinks are encrypted.

	 * Special files like device nodes and named pipes aren't.

/**

 * fscrypt_put_encryption_info() - free most of an inode's fscrypt data

 * @inode: an inode being evicted

 *

 * Free the inode's fscrypt_info.  Filesystems must call this when the inode is

 * being evicted.  An RCU grace period need not have elapsed yet.

/**

 * fscrypt_free_inode() - free an inode's fscrypt data requiring RCU delay

 * @inode: an inode being freed

 *

 * Free the inode's cached decrypted symlink target, if any.  Filesystems must

 * call this after an RCU grace period, just before they free the inode.

/**

 * fscrypt_drop_inode() - check whether the inode's master key has been removed

 * @inode: an inode being considered for eviction

 *

 * Filesystems supporting fscrypt must call this from their ->drop_inode()

 * method so that encrypted inodes are evicted as soon as they're no longer in

 * use and their master key has been removed.

 *

 * Return: 1 if fscrypt wants the inode to be evicted now, otherwise 0

	/*

	 * If ci is NULL, then the inode doesn't have an encryption key set up

	 * so it's irrelevant.  If ci_master_key is NULL, then the master key

	 * was provided via the legacy mechanism of the process-subscribed

	 * keyrings, so we don't know whether it's been removed or not.

	/*

	 * With proper, non-racy use of FS_IOC_REMOVE_ENCRYPTION_KEY, all inodes

	 * protected by the key were cleaned by sync_filesystem().  But if

	 * userspace is still using the files, inodes can be dirtied between

	 * then and now.  We mustn't lose any writes, so skip dirty inodes here.

	/*

	 * Note: since we aren't holding the key semaphore, the result here can

	 * immediately become outdated.  But there's no correctness problem with

	 * unnecessarily evicting.  Nor is there a correctness problem with not

	 * evicting while iput() is racing with the key being removed, since

	 * then the thread removing the key will either evict the inode itself

	 * or will correctly detect that it wasn't evicted due to the race.

 SPDX-License-Identifier: GPL-2.0

/*

 * Utility functions for file contents encryption/decryption on

 * block device-based filesystems.

 *

 * Copyright (C) 2015, Google, Inc.

 * Copyright (C) 2015, Motorola Mobility

/**

 * fscrypt_decrypt_bio() - decrypt the contents of a bio

 * @bio: the bio to decrypt

 *

 * Decrypt the contents of a "read" bio following successful completion of the

 * underlying disk read.  The bio must be reading a whole number of blocks of an

 * encrypted file directly into the page cache.  If the bio is reading the

 * ciphertext into bounce pages instead of the page cache (for example, because

 * the file is also compressed, so decompression is required after decryption),

 * then this function isn't applicable.  This function may sleep, so it must be

 * called from a workqueue rather than from the bio's bi_end_io callback.

 *

 * This function sets PG_error on any pages that contain any blocks that failed

 * to be decrypted.  The filesystem must not mark such pages uptodate.

 This always succeeds since __GFP_DIRECT_RECLAIM is set. */

/**

 * fscrypt_zeroout_range() - zero out a range of blocks in an encrypted file

 * @inode: the file's inode

 * @lblk: the first file logical block to zero out

 * @pblk: the first filesystem physical block to zero out

 * @len: number of blocks to zero out

 *

 * Zero out filesystem blocks in an encrypted regular file on-disk, i.e. write

 * ciphertext blocks which decrypt to the all-zeroes block.  The blocks must be

 * both logically and physically contiguous.  It's also assumed that the

 * filesystem only uses a single block device, ->s_bdev.

 *

 * Note that since each block uses a different IV, this involves writing a

 * different ciphertext to each block; we can't simply reuse the same one.

 *

 * Return: 0 on success; -errno on failure.

 write up to 16 pages at a time */

	/*

	 * We need at least one page for ciphertext.  Allocate the first one

	 * from a mempool, with __GFP_DIRECT_RECLAIM set so that it can't fail.

	 *

	 * Any additional page allocations are allowed to fail, as they only

	 * help performance, and waiting on the mempool for them could deadlock.

 This always succeeds since __GFP_DIRECT_RECLAIM is set. */

 SPDX-License-Identifier: GPL-2.0

/*

 * Key setup for v1 encryption policies

 *

 * Copyright 2015, 2019 Google LLC

/*

 * This file implements compatibility functions for the original encryption

 * policy version ("v1"), including:

 *

 * - Deriving per-file encryption keys using the AES-128-ECB based KDF

 *   (rather than the new method of using HKDF-SHA512)

 *

 * - Retrieving fscrypt master keys from process-subscribed keyrings

 *   (rather than the new method of using a filesystem-level keyring)

 *

 * - Handling policies with the DIRECT_KEY flag set using a master key table

 *   (rather than the new method of implementing DIRECT_KEY with per-mode keys

 *    managed alongside the master keys in the filesystem-level keyring)

 Table of keys referenced by DIRECT_KEY policies */

 6 bits = 64 buckets */

/*

 * v1 key derivation function.  This generates the derived key by encrypting the

 * master key with AES-128-ECB using the nonce as the AES key.  This provides a

 * unique derived key with sufficient entropy for each inode.  However, it's

 * nonstandard, non-extensible, doesn't evenly distribute the entropy from the

 * master key, and is trivially reversible: an attacker who compromises a

 * derived key can "decrypt" it to get back to the master key, then derive any

 * other key.  For all new code, use HKDF instead.

 *

 * The master key must be at least as long as the derived key.  If the master

 * key is longer, then only the first 'derived_keysize' bytes are used.

/*

 * Search the current task's subscribed keyrings for a "logon" key with

 * description prefix:descriptor, and if found acquire a read lock on it and

 * return a pointer to its validated payload in *payload_ret.

 was the key revoked before we acquired its semaphore? */

 Master key referenced by DIRECT_KEY policy */

/*

 * Find/insert the given key into the fscrypt_direct_keys table.  If found, it

 * is returned with elevated refcount, and 'to_insert' is freed if non-NULL.  If

 * not found, 'to_insert' is inserted and returned if it's non-NULL; otherwise

 * NULL is returned.

	/*

	 * Careful: to avoid potentially leaking secret key bytes via timing

	 * information, we must key the hash table by descriptor rather than by

	 * raw key, and use crypto_memneq() when comparing raw keys.

 using existing tfm with same (descriptor, mode, raw_key) */

 Prepare to encrypt directly using the master key in the given mode */

 Is there already a tfm for this key? */

 Nope, allocate one. */

 v1 policy, DIRECT_KEY: use the master key directly */

 v1 policy, !DIRECT_KEY: derive the file's encryption key */

	/*

	 * This cannot be a stack buffer because it will be passed to the

	 * scatterlist crypto API during derive_key_aes().

 SPDX-License-Identifier: GPL-2.0

/*

 * fs/f2fs/acl.c

 *

 * Copyright (c) 2012 Samsung Electronics Co., Ltd.

 *             http://www.samsung.com/

 *

 * Portions of this code from linux/fs/ext2/acl.c

 *

 * Copyright (C) 2001-2003 Andreas Gruenbacher, <agruen@suse.de>

/*

 * Most part of f2fs_acl_clone, f2fs_acl_create_masq, f2fs_acl_create

 * are copied from posix_acl.c

 assert(atomic_read(acl->a_refcount) == 1); */

 SPDX-License-Identifier: GPL-2.0

/*

 * fs/f2fs/namei.c

 *

 * Copyright (c) 2012 Samsung Electronics Co., Ltd.

 *             http://www.samsung.com/

 Otherwise, will be 0 */

 Inherit the compression flag in directory */

	/*

	 * filename format of multimedia file should be defined as:

	 * "filename + '.' + extension + (optional: '.' + temp extension)".

 file has no temp extension */

/*

 * Set file's temperature for hot/cold data separation

		/* Eventually we want to call d_add_ci(dentry, NULL)

		 * for negative dentries in the encoding case as

		 * well.  For now, prevent the negative dentry

		 * from being cached.

	/* VFS negative dentries are incompatible with Encoding and

	 * Case-insensitiveness. Eventually we'll want avoid

	 * invalidating the dentries here, alongside with returning the

	 * negative dentries at f2fs_lookup(), when it is better

	 * supported by the VFS for the CI case.

 this is broken symlink case */

	/*

	 * Let's flush symlink data in order to avoid broken symlink as much as

	 * possible. Nevertheless, fsyncing is the best way, but there is no

	 * way to get a file descriptor in order to flush that.

	 *

	 * Note that, it needs to do dir->fsync to make this recoverable.

	 * If the symlink path is stored into inline_data, there is no

	 * performance regression.

	/*

	 * add this non-linked tmpfile to orphan list, in this way we could

	 * remove all unused data of tmpfile after abnormal power-off.

 link_count was changed by d_tmpfile as well. */

	/*

	 * If new_inode is null, the below renaming flow will

	 * add a link in old_dir which can conver inline_dir.

	 * After then, if we failed to get the entry due to other

	 * reasons like ENOMEM, we had to remove the new entry.

	 * Instead of adding such the error handling routine, let's

	 * simply convert first here.

 adjust dir's i_pino to pass fsck check */

 prepare for updating ".." directory entry info later */

	/*

	 * If cross rename between file and directory those are not

	 * in the same directory, we will inc nlink of file's parent

	 * later, so we should check upper boundary of its nlink.

 update ".." directory entry info of old dentry */

 update ".." directory entry info of new dentry */

 update directory entry info of old dir inode */

 adjust dir's i_pino to pass fsck check */

 update directory entry info of new dir inode */

 adjust dir's i_pino to pass fsck check */

	/*

	 * VFS has already handled the new dentry existence case,

	 * here, we just deal with "RENAME_NOREPLACE" as regular rename.

 SPDX-License-Identifier: GPL-2.0

/*

 * f2fs extent cache support

 *

 * Copyright (c) 2015 Motorola Mobility

 * Copyright (c) 2015 Samsung Electronics

 * Authors: Jaegeuk Kim <jaegeuk@kernel.org>

 *          Chao Yu <chao2.yu@samsung.com>

/*

 * lookup rb entry in position of @ofs in rb-tree,

 * if hit, return the entry, otherwise, return NULL

 * @prev_ex: extent before ofs

 * @next_ex: extent after ofs

 * @insert_p: insert point for new extent at ofs

 * in order to simpfy the insertion after.

 * tree must stay unchanged between lookup and insertion.

 lookup prev node for merging backward later */

 lookup next node for merging frontward later */

/*

 * Flow to release an extent_node:

 * 1. list_del_init

 * 2. __detach_extent_node

 * 3. kmem_cache_free.

 never died until evict_inode */

 return true, if inode page is changed */

 drop largest extent */

 update in global extent list */

	/*

	 * drop largest extent before lookup, in case it's already

	 * been shrunk from extent tree

 1. lookup first extent node in range [fofs, fofs + len - 1] */

 2. invlidate all extent nodes in range [fofs, fofs + len - 1] */

 # of parts current extent split into */

		/*

		 * if original extent is split into zero or two parts, extent

		 * tree has been altered by deletion or insertion, therefore

		 * invalidate pointers regard to tree.

 3. update extent in extent cache */

 give up extent_cache, if split and small updates happen */

 it is safe here to check FI_NO_EXTENT w/o et->lock in ro image */

 1. remove unreferenced extent tree */

 2. remove LRU extent entries */

 refresh this extent node's position in extent list */

 free all extent info belong to this extent tree */

 delete extent tree entry in radix tree */

 SPDX-License-Identifier: GPL-2.0

/*

 * fs/f2fs/data.c

 *

 * Copyright (c) 2012 Samsung Electronics Co., Ltd.

 *             http://www.samsung.com/

 postprocessing steps for read bios */

 compile out the decryption-related code */

 compile out the decompression-related code */

 compile out the verity-related code */

	/*

	 * Update and unlock the bio's pagecache pages, and put the

	 * decompression context for any compressed pages.

 PG_error was set if decryption or verity failed. */

 will re-read again later */

	/*

	 * fsverity_verify_bio() may call readpages() again, and while verity

	 * will be disabled for this, decryption and/or decompression may still

	 * be needed, resulting in another bio_post_read_ctx being allocated.

	 * So to prevent deadlocks we need to release the current ctx to the

	 * mempool first.  This assumes that verity is the last post-read step.

	/*

	 * Verify the bio's pages with fs-verity.  Exclude compressed pages,

	 * as those were handled separately by f2fs_end_read_compressed_page().

/*

 * If the bio's data needs to be verified with fs-verity, then enqueue the

 * verity work for the bio.  Otherwise finish the bio now.

 *

 * Note that to avoid deadlocks, the verity work can't be done on the

 * decryption/decompression workqueue.  This is because verifying the data pages

 * can involve reading verity metadata pages from the file, and these verity

 * metadata pages may be encrypted and/or compressed.

/*

 * Handle STEP_DECOMPRESS by decompressing any compressed clusters whose last

 * remaining page was read by @ctx->bio.

 *

 * Note that a bio may span clusters (even a mix of compressed and uncompressed

 * clusters) or be for just part of a cluster.  STEP_DECOMPRESS just indicates

 * that the bio includes at least one compressed page.  The actual decompression

 * is done on a per-cluster basis, not a per-bio basis.

 PG_error was set if decryption failed. */

	/*

	 * Optimization: if all the bio's pages are compressed, then scheduling

	 * the per-bio verity work is unnecessary, as verity will be fully

	 * handled at the compression cluster level.

	/*

	 * The f2fs garbage collector sets ->encrypted_page when it wants to

	 * read/write raw data without encryption.

	/*

	 * The f2fs garbage collector sets ->encrypted_page when it wants to

	 * read/write raw data without encryption.

 fill dummy pages */

		/*

		 * In the NODE case, we lose next block address chain. So, we

		 * need to do checkpoint in f2fs_sync_file.

	/*

	 * data/node io flag bits per temp:

	 *      REQ_META     |      REQ_FUA      |

	 *    5 |    4 |   3 |    2 |    1 |   0 |

	 * Cold | Warm | Hot | Cold | Warm | Hot |

 change META to META_FLUSH in the checkpoint procedure */

 TODO: use HOT temp only for meta pages now. */

/*

 * Fill the locked page with data located in the block address.

 * A caller needs to unlock the page on failure.

 Allocate a new bio */

 IOs in bio is aligned and left space of vectors is not enough */

 page can't be merged into bio; submit the bio */

 set submitted = true as a return value */

	/*

	 * STEP_DECOMPRESS is handled specially, since a compressed file might

	 * contain both compressed and uncompressed clusters.  We'll allocate a

	 * bio_post_read_ctx if the file is compressed, but the caller is

	 * responsible for enabling STEP_DECOMPRESS if it's actually needed.

 Due to the mempool, this never fails. */

 This can handle encryption stuffs */

 wait for GCed page writeback via META_MAPPING */

 Get physical address of data block */

/*

 * Lock ordering for the change of data block address:

 * ->data_page

 *  ->node_page

 *    update block addresses in the node page

 dn->ofs_in_node will be returned with up-to-date last block pointer */

 Should keep dn->ofs_in_node unchanged */

	/*

	 * A new dentry page is allocated but not able to be written, since its

	 * new inode page couldn't be allocated due to -ENOSPC.

	 * In such the case, its blkaddr can be remained as NEW_ADDR.

	 * see, f2fs_add_link -> f2fs_get_new_data_page ->

	 * f2fs_init_inode_metadata.

/*

 * If it tries to access a hole, return an error.

 * Because, the callers, functions in dir.c and GC, should be able to know

 * whether this page exists or not.

 wait for read completion */

/*

 * Caller ensures that this data page is never allocated.

 * A new zero-filled data page is allocated in the page cache.

 *

 * Also, caller should grab and release a rwsem by calling f2fs_lock_op() and

 * f2fs_unlock_op().

 * Note that, ipage is set only by make_empty_dir, and if any error occur,

 * ipage should be released by this function.

		/*

		 * before exiting, we should make sure ipage will be released

		 * if any error occur.

 if ipage exists, blkaddr should be NEW_ADDR */

	/*

	 * i_size will be updated by direct_IO. Otherwise, we'll get stale

	 * data from unwritten block via dio_read.

/*

 * f2fs_map_blocks() tries to find or build mapping relationship which

 * maps continuous logical blocks to physical blocks, and return such

 * info via f2fs_map_blocks structure.

 it only supports block size == page size */

 for hardware encryption, but to avoid potential issue in future */

 When reading holes, we need its node page */

			/*

			 * There is one exceptional case that read_node_page()

			 * may return -ENOENT due to filesystem has been

			 * shutdown or cp_error, so force to convert error

			 * number to EIO for such case.

 use out-place-update for driect IO under LFS mode */

 for defragment case */

 preallocated unwritten block should be mapped for fiemap. */

 preallocate blocks in batch for one dnode page */

		/*

		 * for hardware encryption, but to avoid potential issue

		 * in future

 two direct node blocks */

 two indirect node blocks */

 one double indirect node block */

 HOLE */

 In a case of compressed cluster, append this to the last extent */

 just zeroing out page which is beyond EOF */

	/*

	 * Map blocks using the previous result first.

	/*

	 * Then do more f2fs_map_blocks() calls until we are

	 * done with this page.

	/*

	 * This page will go to BIO.  Do we need to send this

	 * BIO off first?

	/*

	 * If the page is under writeback, we need to wait for

	 * its completion to see the correct decrypted data.

 get rid of pages beyond EOF */

 we are done since all pages are beyond EOF */

 nothing to decompress */

/*

 * This function was originally taken from fs/mpage.c, and customized for f2fs.

 * Major change was from block_size == page_size in f2fs by default.

 there are remained comressed pages, submit them */

 last page */

 If the file has inline data, try to read it directly */

 If the file has inline data, skip readpages */

 wait for GCed page writeback via META_MAPPING */

 flush pending IOs and wait for a while in the ENOMEM case */

	/*

	 * IPU for rewrite async pages

 this is only set during fdatasync */

 swap file is migrating in aligned write mode */

 if this is cold file, we should overwrite to avoid fragmentation */

 swap file is migrating in aligned write mode */

 Deadlock due to between page->lock and f2fs_lock_op */

 This page is already truncated */

	/*

	 * If current allocation needs SSR,

	 * it had better in-place writes for updated data.

 LFS mode write path */

 we should bypass data pages to proceed the kworkder jobs */

		/*

		 * don't drop any dirty dentry pages for keeping lastest

		 * directory structure.

	/*

	 * If the offset is out-of-range of file size,

	 * this page does not have to be written to disk.

 we should not write 0'th page having journal header */

 Dentry/quota blocks are controlled by checkpoint */

		/*

		 * We need to wait for node_write to avoid block allocation during

		 * checkpoint. This can only happen to quota writes which can cause

		 * the below discard race condition.

	/*

	 * pageout() in MM traslates EAGAIN, so calls handle_write_error()

	 * -> mapping_set_error() -> set_bit(AS_EIO, ...).

	 * file_write_and_wait_range() will see EIO error, which is critical

	 * to return value of fsync() followed by atomic_write failure to user.

/*

 * This function was copied from write_cche_pages from mm/page-writeback.c.

 * The major change is making write step of cold data page separately from

 * warm/hot data page.

 Inclusive */

 prev offset */

 give a priority to WB_SYNC threads */

 someone wrote it for us */

				/*

				 * keep nr_to_write, since vfs uses this to

				 * get # of written pages.

 flush remained pages in compress cluster */

 submit cached bio of IPU write */

 to avoid deadlock in path of data flush */

 deal with chardevs and other special file */

 skip writing if there is no dirty page in this inode */

 during POR, we don't need to trigger writepage at all. */

 skip writing during file defragment */

 to avoid spliting IOs due to mixed WB_SYNC_ALL and WB_SYNC_NONE */

	/*

	 * if some pages were truncated, we cannot guarantee its mapping->host

	 * to detect pending bios.

 In the fs-verity case, f2fs_end_enable_verity() does the truncate */

	/*

	 * we already allocated all the blocks, so we don't need to get

	 * the block addresses when there is no need to fill the page.

 f2fs_lock_op avoids race between write CP and convert_inline_page */

 check inline_data */

 hole case */

 convert_inline_page can make node_changed */

	/*

	 * We should check this at this moment to avoid deadlock on inode page

	 * and #0 page. The locking rule for inline_data conversion should be:

	 * lock_page(page #0) -> lock_page(inode_page)

	/*

	 * Do not use grab_cache_page_write_begin() to avoid deadlock due to

	 * wait_for_stable_page. Will wait that below with our IO control.

 TODO: cluster can be compressed due to race with .writepage */

 The page got truncated from under us */

	/*

	 * This should be come from len == PAGE_SIZE, and we expect copied

	 * should be PAGE_SIZE. Otherwise, we treat it with zero copied and

	 * let generic_perform_write() try to copy data again through copied=0.

 overwrite compressed file */

 If this is dirty page, keep PagePrivate */

 This is atomic written page, keep Private */

		/*

		 * Previously, this page has been registered, we just

		 * return here.

 make sure allocating whole blocks */

 Block number less than F2FS MAX BLOCKS */

 migrating an atomic written page is safe with the inmem_lock hold */

 one extra reference was held for atomic_write page */

 guarantee to start from no stale private field */

	/*

	 * Map all the blocks into the extent list.  This code doesn't try

	 * to be very smart.

 hole */

 this extent is last one */

 exclude the header page */

		/*

		 * We found a PAGE_SIZE-length, PAGE_SIZE-aligned run of blocks

 force Empty message */

 SPDX-License-Identifier: GPL-2.0

/*

 * fs/f2fs/super.c

 *

 * Copyright (c) 2012 Samsung Electronics Co., Ltd.

 *             http://www.samsung.com/

 f2fs-wide shrinker description */

 limit is 0.2% */

	/*

	 * We do the test below only for project quotas. 'usrquota' and

	 * 'grpquota' mount options are allowed even without quota feature

	 * to support legacy quotas in quota files.

	/*

	 * This mount option is just for testing, and it's not worthwhile to

	 * implement the extra complexity (e.g. RCU protection) that would be

	 * needed to allow it to be set or changed during remount.  We do allow

	 * it to be specified during remount, but only if there is no change.

/*

 * 1. The same extension name cannot not appear in both compress and non-compress extension

 * at the same time.

 * 2. If the compress extension specifies all files, the types specified by the non-compress

 * extension will be treated as special cases and will not be compressed.

 * 3. Don't allow the non-compress extension specifies all files.

		/*

		 * Initialize args struct so we know whether arg was

		 * found; some options take optional arguments.

 this option mounts f2fs with ro */

	/*

	 * The BLKZONED feature indicates that the drive was formatted with

	 * zone alignment optimization. This is optional for host-aware

	 * devices, but mandatory for host-managed zoned block devices.

	/* Not pass down write hints if the number of active logs is lesser

	 * than NR_CURSEG_PERSIST_TYPE.

 Initialize f2fs-specific inode info */

 Will be used by directory only */

	/*

	 * during filesystem shutdown, if checkpoint is disabled,

	 * drop useless meta/node dirty pages.

	/*

	 * This is to avoid a deadlock condition like below.

	 * writeback_single_inode(inode)

	 *  - f2fs_write_data_page

	 *    - f2fs_gc -> iput -> evict

	 *       - inode_wait_for_writeback(inode)

 to avoid evict_inode call simultaneously */

 some remained atomic pages should discarded */

 should remain fi->extent_tree for writepage */

/*

 * f2fs_dirty_inode() is called from __mark_inode_dirty()

 *

 * We should call set_dirty_inode to write the dirty inode through write_inode.

 unregister procfs/sysfs entries in advance to avoid race case */

 prevent remaining shrinker jobs */

	/*

	 * flush all issued checkpoints and stop checkpoint issue thread.

	 * after then, all checkpoints should be done by each process context.

	/*

	 * We don't need to do checkpoint when superblock is clean.

	 * But, the previous checkpoint was not done by umount, it needs to do

	 * clean checkpoint again.

 be sure to wait for any on-going discard commands */

	/*

	 * normally superblock is clean, so we need to release this.

	 * In addition, EIO will skip do checkpoint, we need this as well.

 our cp_error case, we can wait for any writeback page */

	/*

	 * iput() can update stat information, if f2fs_write_checkpoint()

	 * above failed with error.

 destroy f2fs internal modules */

 IO error happened before */

 must be clean, since sync_filesystem() was already called */

 ensure no checkpoint required */

 init some FS parameters */

 Restore SB_RDONLY status */

 we should flush all the data to keep data consistency */

	/*

	 * Save the old mount options in case we

	 * need to restore them.

 recover superblocks we couldn't write due to previous RO mount */

 parse mount options */

	/*

	 * Previous and new state of filesystem is RO,

	 * so skip checking GC and FLUSH_MERGE conditions.

 dquot_resume needs RW */

 disallow enable atgc dynamically */

 disallow enable/disable extent_cache dynamically */

	/*

	 * We stop the GC thread if FS is mounted as RO

	 * or if background_gc = off is passed in mount

	 * option. Also sync the filesystem.

	/*

	 * We stop issue flush thread if FS is mounted as RO

	 * or if flush_merge is not passed in mount option.

 Release old quota file names */

 Update the POSIXACL Flag */

 Read data from quotafile */

 Write to quotafile */

 Don't account quota for quota files to avoid recursion */

 if we are using journalled quota */

	/*

	 * Now when everything is written we can discard the pagecache so

	 * that userspace sees the changes.

		/*

		 * do_quotactl

		 *  f2fs_quota_sync

		 *  down_read(quota_sem)

		 *  dquot_writeback_dquots()

		 *  f2fs_dquot_commit

		 *			      block_operation

		 *			      down_read(quota_sem)

 if quota sysfile exists, deny enabling quota with specific file */

	/*

	 * quotactl can shutdown journalled quota, result in inconsistence

	 * between quota record and fs data by following updates, tag the

	 * flag to let fsck be aware of it.

	/*

	 * In case of checkpoint=disable, we must flush quota blocks.

	 * This can cause NULL exception for node_inode in end_io, since

	 * put_super already dropped it.

 if we are using journalled quota */

	/*

	 * Encrypting the root directory is not allowed because fsck

	 * expects lost+found directory to exist and remain unencrypted

	 * if LOST_FOUND feature is enabled.

	 *

	/*

	 * f2fs_iget isn't quite right if the inode is currently unallocated!

	 * However f2fs_iget currently does appropriate checks to handle stale

	 * inodes so everything is OK.

 we didn't find the right inode.. */

	/*

	 * note: previously, result is equal to (DEF_ADDRS_PER_INODE -

	 * DEFAULT_INLINE_XATTR_ADDRS), but now f2fs try to reserve more

	 * space in inode.i_addr, it will be more safe to reassign

	 * result as zero.

 two direct node blocks */

 two indirect node blocks */

 one double indirect node block */

 it's rare case, we can do fua all the time */

 fix in-memory information all the time */

 Check checksum_offset and crc in superblock */

 Currently, support only 4KB block size */

 check log blocks per segment */

 Currently, support 512/1024/2048/4096 bytes sector size */

 blocks_per_seg should be 512, given the above check */

 check reserved ino info */

 check CP/SIT/NAT/SSA/MAIN_AREA area boundary */

 Get block zones type and zone-capacity */

/*

 * Read f2fs raw super block.

 * Because we have two copies of super block, so read both of them

 * to get the first valid one. If any one of them is broken, we pass

 * them recovery flag back to the caller.

 sanity checking of raw super */

 No valid superblock */

 we should update superblock crc here */

 write back-up superblock first */

 if we are in recovery path, skip writing valid superblock */

 write current valid superblock */

 Initialize single device information */

	/*

	 * Initialize multiple devices information, or single

	 * zoned block device information.

 Single zoned block device mount */

 Multi-device mount */

 to release errored devices */

 adjust parameters according to the volume size */

 allocate memory for f2fs-specific super block info */

 Load the checksum driver */

 set a block size */

 precompute checksum seed for metadata */

 parse mount options */

 init f2fs-specific super block info */

 disallow all the data/node/meta page writes */

 init per sbi slab cache */

 get an inode for meta space */

 Initialize device list */

 setup checkpoint request control and start checkpoint issue thread */

 setup f2fs internal modules */

 For write statistics */

 Read accumulated write IO statistics if exists */

 get an inode for node space */

 read root inode and dentry */

 allocate root dentry */

 Enable quota usage during mount */

 if there are any orphan inodes, free them */

 recover fsynced data */

		/*

		 * mount should be failed, when device has readonly mode, and

		 * previous checkpoint was not done by clean system shutdown.

	/*

	 * If the f2fs is not readonly and fsync data recovery succeeds,

	 * check zoned block devices' write pointer consistency.

 f2fs_recover_fsync_data() cleared this already */

	/*

	 * If filesystem is not mounted as read-only then

	 * do start the gc_thread.

 After POR, we can run background GC thread.*/

 recover broken superblock */

 safe to flush all the data */

	/*

	 * Some dirty meta pages can be produced by f2fs_recover_orphan_inodes()

	 * failed by EIO. Then, iput(node_inode) can trigger balance_fs_bg()

	 * followed by f2fs_write_checkpoint() through f2fs_write_node_pages(), which

	 * falls into an infinite loop in f2fs_sync_meta_pages().

 evict some inodes being cached by GC */

 stop discard thread before destroying node manager */

 give only one another chance */

		/*

		 * latter evict_inode() can bypass checking and invalidating

		 * compress inode cache.

	/*

	 * Make sure all delayed rcu free inodes are flushed before we

	 * destroy cache.

 SPDX-License-Identifier: GPL-2.0

/*

 * fs/f2fs/xattr.c

 *

 * Copyright (c) 2012 Samsung Electronics Co., Ltd.

 *             http://www.samsung.com/

 *

 * Portions of this code from linux/fs/ext2/xattr.c

 *

 * Copyright (C) 2001-2003 Andreas Gruenbacher <agruen@suse.de>

 *

 * Fix by Harrison Xing <harrison@mountainviewdata.com>.

 * Extended attributes for symlinks and special files added per

 *  suggestion of Luka Renko <luka.renko@hermes.si>.

 * xattr consolidation Copyright (c) 2004 James Morris <jmorris@redhat.com>,

 *  Red Hat Inc.

 inline xattr header or entry across max inline xattr size */

 The inode already has an extended attribute block. */

 read from inline xattr */

 read from xattr node block */

 read from inline xattr */

 read from xattr node block */

 never been allocated xattrs */

 write to inline xattr */

 no need to use xattr node block */

 write to xattr node block */

 find entry with wanted name. */

 1. Check space */

		/*

		 * If value is NULL, it is remove operation.

		 * In case of update operation, we calculate free.

 2. Remove old entry */

		/*

		 * If entry is found, remove old entry.

		 * If not found, remove operation is not needed.

 3. Write new entry */

		/*

		 * Before we come here, old entry is removed.

		 * We just write new entry.

 this case is only from f2fs_init_inode_metadata */

 SPDX-License-Identifier: GPL-2.0

/*

 * fs/f2fs/gc.c

 *

 * Copyright (c) 2012 Samsung Electronics Co., Ltd.

 *             http://www.samsung.com/

 give it a try one time */

		/*

		 * [GC triggering condition]

		 * 0. GC is not conducted currently.

		 * 1. There are enough dirty segments.

		 * 2. IO subsystem is idle by checking the # of writeback pages.

		 * 3. IO subsystem is idle by checking the # of requests in

		 *    bdev's request list.

		 *

		 * Note) We have to avoid triggering GCs frequently.

		 * Because it is possible that some segments can be

		 * invalidated soon after by user update or deletion.

		 * So, I'd like to wait some time to collect dirty segments.

 foreground GC was been triggered via f2fs_balance_fs() */

 if return value is not zero, no victim was selected */

 balancing f2fs's metadata periodically */

	/*

	 * adjust candidates range, should select all dirty segments for

	 * foreground GC and urgent GC cases.

 let's select beginning hot/small space first in no_heap mode*/

 SSR allocates in a segment unit */

 LFS */

 No other gc_mode */

	/*

	 * If the gc_type is FG_GC, we can select victim segments

	 * selected by background GC before.

	 * Those segments guarantee they have small valid blocks.

 Handle if the system time has changed by the user */

 alloc_mode == LFS */

 Handle if the system time has changed by the user */

 don't choose young section as candidate */

 age = 10000 * x% * 60 */

 u = 10000 * x% * 40 */

/*

 * select candidates around source section in range of

 * [target - dirty_threshold, target + dirty_threshold]

 rare case */

/*

 * This function is called from two paths.

 * One is garbage collection and the other is SSR segment selection.

 * When it is called during GC, it just gets a victim segment

 * and it does not remove it from dirty seglist.

 * When it is called from SSR segment selection, it finds a segment

 * which has minimum valid blocks and removes it from dirty seglist.

		/*

		 * skip selecting the invalid segno (that is failed due to block

		 * validity check failure during GC) to avoid endless GC loop in

		 * such cases.

 Don't touch checkpointed data */

				/*

				 * LFS is set to find source section during GC.

				 * The victim should have no checkpointed data.

				/*

				 * SSR | AT_SSR are set to find target segment

				 * for writes which can be full by checkpointed

				 * and newly written blocks.

 get victim for GC_AT/AT_SSR */

/*

 * This function compares node address got in summary with that in NAT.

 * On validity, copy that node with cold status, otherwise (invalid node)

 * ignore that.

 stop BG_GC if there is not enough free sections. */

 phase == 2 */

 block may become invalid during f2fs_get_node_page */

/*

 * Calculate start block index indicating the given node offset.

 * Be careful, caller should give this node offset only indicating direct node

 * blocks. If any node offsets, which point the other types of node blocks such

 * as indirect or double indirect node blocks, are given, it must be a caller's

 * bug.

 read page */

	/*

	 * don't cache encrypted data into meta inode until previous dirty

	 * data were writebacked to avoid racing between GC and flush.

/*

 * Move data block via META_MAPPING while keeping locked data page.

 * This can be used to move blocks, aka LBAs, directly on disk.

 do not read out */

	/*

	 * don't cache encrypted data into meta inode until previous dirty

	 * data were writebacked to avoid racing between GC and flush.

 read page */

 read source block in mpage */

 allocate block address */

 write target block */

/*

 * This function tries to get parent node of victim data block, and identifies

 * data block validity. If the block is valid, copy that with cold status and

 * modify parent node.

 * If the parent node is not valid or the data block address is different,

 * the victim data block is ignored.

 dnode info for the data */

		/*

		 * stop BG_GC if there is not enough free sections.

		 * Or, stop GC if the segment becomes fully valid caused by

		 * race condition along with SSR block allocation.

 Get an inode by ino with checking validity */

 phase 4 */

 wait for all inflight aio data */

	/*

	 * zone-capacity can be less than zone-size in zoned devices,

	 * resulting in less than expected usable segments in the zone,

	 * calculate the end segno in the zone which can be garbage collected

 readahead multi ssa blocks those have contiguous address */

 reference all summary page */

 find segment summary of victim */

		/*

		 * this is to avoid deadlock:

		 * - lock_page(sum_page)         - f2fs_replace_block

		 *  - check_valid_map()            - down_write(sentry_lock)

		 *   - down_read(sentry_lock)     - change_curseg()

		 *                                  - lock_page(sum_page)

		/*

		 * For example, if there are many prefree_segments below given

		 * threshold, we can make them free by checkpoint. Then, we

		 * secure free segments which doesn't need fggc any more.

 f2fs_balance_fs doesn't need to do BG_GC in critical path. */

 give warm/cold data area from slower device */

 Force block allocation for GC */

 Move out cursegs from the target range */

 do GC to move out valid blocks in the range */

 new fs size should align to section size */

 stop other GC */

 stop CP to protect MAIN_SEC in free_segment_range */

 SPDX-License-Identifier: GPL-2.0

/*

 * f2fs compress support

 *

 * Copyright (c) 2019 Chao Yu <chao@kernel.org>

 i_crypto_info and iv index */

	/*

	 * we do not change cc->clen to LZ4_compressBound(inputsize) to

	 * adapt worst compress case, because lz4 compressor can handle

	 * output budget properly.

	/*

	 * there is compressed data remained in intermediate buffer due to

	 * no more space in cbuf.cdata

 Now we're going to cut unnecessary tail pages */

 zero out any unused part of the last page */

/*

 * This is called when a page of a compressed cluster has been read from disk

 * (or failed to be read from disk).  It checks whether this page was the last

 * page being waited on in the cluster, and if so, it decompresses the cluster

 * (or in the case of a failure, cleans up without actually decompressing).

 beyond EOF */

 [..., COMPR_ADDR, ...] */

 [COMPR_ADDR, ..., COMPR_ADDR] */

 [COMPR_ADDR, NULL_ADDR or NEW_ADDR, valid_blkaddr] */

 return # of compressed blocks in compressed cluster */

 return # of valid blocks in compressed cluster */

 keep page reference to avoid page reclaim */

 page can be truncated */

 truncate normal cluster */

 truncate compressed cluster */

 should not be a normal cluster */

 we should bypass data pages to proceed the kworkder jobs */

		/*

		 * We need to wait for node_write to avoid block allocation during

		 * checkpoint. This can only happen to quota writes which can cause

		 * the below discard race condition.

 wait for GCed page writeback via META_MAPPING */

 cluster header */

				/*

				 * for quota file, just redirty left pages to

				 * avoid deadlock caused by cluster update race

				 * from foreground operation.

/*

 * Update and unlock the cluster's pagecache pages, and release the reference to

 * the decompress_io_ctx that was being held for I/O completion.

 PG_error was set if verity failed. */

 will re-read again later */

 Verify the cluster's decompressed pages with fs-verity. */

/*

 * This is called when a compressed cluster has been decompressed

 * (or failed to be read and/or decompressed).

		/*

		 * Note that to avoid deadlocks, the verity work can't be done

		 * on the decompression workqueue.  This is because verifying

		 * the data pages can involve reading metadata pages from the

		 * file, and these metadata pages may be compressed.

/*

 * Put a reference to a compressed page's decompress_io_ctx.

 *

 * This is called when the page is no longer needed and can be freed.

/*

 * check whether cluster blocks are contiguous, and add extent cache entry

 * only if cluster blocks are logically and physically contiguous.

 SPDX-License-Identifier: GPL-2.0

/*

 * fs/f2fs/inode.c

 *

 * Copyright (c) 2012 Samsung Electronics Co., Ltd.

 *             http://www.samsung.com/

 Check if ino is within scope */

		/*

		 * Previous inline data or directory always reserved 200 bytes

		 * in inode layout, even if inline_xattr is disabled. In order

		 * to keep inline_dentry's structure for backward compatibility,

		 * we get the space back only from inline_data.

 check data exist */

 try to recover cold bit for non-dir inode */

 get rdev by using inline_info */

 deleted inode */

	/*

	 * atime could be updated without dirtying f2fs inode in lazytime mode

	/*

	 * We need to balance fs here to prevent from producing dirty node pages

	 * during the urgent cleaning time when running out of free sections.

/*

 * Called at the last iput() if i_nlink is zero

 some remained atomic pages should discarded */

 give more chances, if ENOMEM case */

 for the case f2fs_new_inode() was failed, .i_ino is zero, skip it */

		/*

		 * If xattr nid is corrupted, we can reach out error condition,

		 * err & !f2fs_exist_written_data(sbi, inode->i_ino, ORPHAN_INO)).

		 * In that case, f2fs_check_nid_range() is enough to give a clue.

 caller should call f2fs_lock_op() */

	/*

	 * clear nlink of inode in order to release resource of inode

	 * immediately.

	/*

	 * we must call this to avoid inode being remained as dirty, resulting

	 * in a panic when flushing dirty inodes in gdirty_list.

 don't make bad inode, since it becomes a regular file. */

	/*

	 * Note: we should add inode to orphan list before f2fs_unlock_op()

	 * so we can prevent losing this orphan when encoutering checkpoint

	 * and following suddenly power-off.

 iput will drop the inode object */

 SPDX-License-Identifier: GPL-2.0

/*

 * fs/f2fs/segment.c

 *

 * Copyright (c) 2012 Samsung Electronics Co., Ltd.

 *             http://www.samsung.com/

/*

 * __reverse_ffs is copied from include/asm-generic/bitops/__ffs.h since

 * MSB and LSB are reversed in a byte by f2fs_set_bit.

/*

 * __find_rev_next(_zero)_bit is copied from lib/find_next_bit.c because

 * f2fs_set_bit makes MSB and LSB reversed in a byte.

 * @size must be integral times of unsigned long.

 * Example:

 *                             MSB <--> LSB

 *   f2fs_set_bit(0, bitmap) => 1000 0000

 *   f2fs_set_bit(7, bitmap) => 0000 0001

 add atomic page indices to the list */

 increase reference count with clean state */

			/*

			 * to avoid deadlock in between page lock and

			 * inmem_lock.

 we don't need to invalidate this in the sccessful status */

 record old blkaddr for revoking */

		/*

		 * try to revoke all committed pages, but still we could fail

		 * due to no memory or other reason, if that happened, EAGAIN

		 * will be returned, which means in such case, transaction is

		 * already not integrity, caller should use journal to do the

		 * recovery or rewrite & commit last transaction. For other

		 * error number, revoking was done by filesystem itself.

 drop all uncommitted pages */

/*

 * This function balances dirty node and dentry pages.

 * In addition, it controls garbage collection.

 balance_fs_bg is able to be pending */

	/*

	 * We should do GC or end up with checkpoint, if there are so many dirty

	 * dir/node pages without enough free segments.

 try to shrink extent cache when there is no enough memory */

 check the # of cached NAT entries */

 there is background inflight IO or foreground operation recently */

 exceed periodical checkpoint timeout threshold */

 checkpoint is the only way to shrink partial cached entries */

	/*

	 * update issue_list before we wake up issue_flush thread, this

	 * smp_mb() pairs with another barrier in ___wait_event(), see

	 * more details in comments of waitqueue_active().

 need not be added */

/*

 * Should not occur error such as -ENOMEM.

 * Adding dirty entry into seglist is not critical operation.

 * If a given segment is one of current working segments, it won't be added.

 Recovery routine with SSR needs this */

 This moves currently empty dirty blocks to prefree. Must hold seglist_lock */

 DATA and NODE */

 This is only used by SBI_CP_DISABLED */

 common policy */

 we need to issue all to keep CP_TRIMMED_FLAG */

 this function is copied from blkdev_issue_discard from block/blk-lib.c */

		/*

		 * should keep before submission to avoid D_DONE

		 * right away

 sanity check on discard range */

 wait all */

 This should be covered by global mutex, &sit_i->sentry_lock */

 This comes from f2fs_put_super */

 just to make sure there is no pending discard commands */

 clean up pending candidates before going to sleep */

 For sequential zones, reset the zone write pointer */

 For conventional zones, use regular discard if supported */

 SIT_VBLOCK_MAP_SIZE should be multiple of sizeof(unsigned long) */

 drop caches */

/*

 * Should call f2fs_clear_prefree_segments after checkpoint is done.

 send small discards */

	/*

	 * Recovery can cache discard commands, so in error path of

	 * fill_super(), it needs to give a chance to handle them.

 Update valid block bitmap */

		/*

		 * SSR should never reuse block which is checkpointed

		 * or newly invalidated.

			/*

			 * If checkpoints are off, we must not reuse data that

			 * was used in the previous checkpoint. If it was used

			 * before, we must track that to know how much space we

			 * really have.

 update total number of valid blocks to be written in ckpt area */

 add it into sit main buffer */

 add it into dirty seglist */

/*

 * This function should be resided under the curseg_mutex lock

/*

 * Calculate the number of current summary pages for writing

/*

 * Caller should put this summary page

/*

 * Find a new segment from the free segments bitmap to right order

 * This function should be returned with success, otherwise BUG

 give up on finding another zone */

 zone is in user, try another */

 set it as dirty segment in free segmap */

 if segs_per_sec is large than 1, we need to keep original policy. */

 inmem log may not locate on any segment after mount */

 find segments from 0 to reuse freed segments */

/*

 * Allocate a current working segment.

 * This function always allocates a free segment in LFS manner.

/*

 * If a segment is written by LFS manner, next block offset is just obtained

 * by increasing the current block offset. However, if a segment is written by

 * SSR manner, next block offset obtained by calling __next_free_blkoff

 To allocate block chunks in different sizes, use random number */

/*

 * This function always allocates a used segment(from dirty seglist) by SSR

 * manner, so it should recover the existing segment information of valid blocks

 GC won't be able to use stale summary pages by cp_error */

 allocate cold segment by default */

 f2fs_need_SSR() already forces to do this */

 For node segments, let's do SSR more intensively */

 find valid_blocks=0 in dirty list */

/*

 * flush out current segment and replace it with new segment

 * This function should be returned with success, otherwise BUG

 start/end segment number in main_area */

	/*

	 * We filed discard candidates, but actually we don't need to wait for

	 * all of them, since they'll be issued in idle time along with runtime

	 * discard option. User configuration looks like using runtime discard

	 * or periodic fstrim instead of it.

/* This returns write hints for each segment type. This hints will be

 * passed down to block layer. There are mapping tables which depend on

 * the mount option 'whint_mode'.

 *

 * 1) whint_mode=off. F2FS only passes down WRITE_LIFE_NOT_SET.

 *

 * 2) whint_mode=user-based. F2FS tries to pass down hints given by users.

 *

 * User                  F2FS                     Block

 * ----                  ----                     -----

 *                       META                     WRITE_LIFE_NOT_SET

 *                       HOT_NODE                 "

 *                       WARM_NODE                "

 *                       COLD_NODE                "

 * ioctl(COLD)           COLD_DATA                WRITE_LIFE_EXTREME

 * extension list        "                        "

 *

 * -- buffered io

 * WRITE_LIFE_EXTREME    COLD_DATA                WRITE_LIFE_EXTREME

 * WRITE_LIFE_SHORT      HOT_DATA                 WRITE_LIFE_SHORT

 * WRITE_LIFE_NOT_SET    WARM_DATA                WRITE_LIFE_NOT_SET

 * WRITE_LIFE_NONE       "                        "

 * WRITE_LIFE_MEDIUM     "                        "

 * WRITE_LIFE_LONG       "                        "

 *

 * -- direct io

 * WRITE_LIFE_EXTREME    COLD_DATA                WRITE_LIFE_EXTREME

 * WRITE_LIFE_SHORT      HOT_DATA                 WRITE_LIFE_SHORT

 * WRITE_LIFE_NOT_SET    WARM_DATA                WRITE_LIFE_NOT_SET

 * WRITE_LIFE_NONE       "                        WRITE_LIFE_NONE

 * WRITE_LIFE_MEDIUM     "                        WRITE_LIFE_MEDIUM

 * WRITE_LIFE_LONG       "                        WRITE_LIFE_LONG

 *

 * 3) whint_mode=fs-based. F2FS passes down hints with its policy.

 *

 * User                  F2FS                     Block

 * ----                  ----                     -----

 *                       META                     WRITE_LIFE_MEDIUM;

 *                       HOT_NODE                 WRITE_LIFE_NOT_SET

 *                       WARM_NODE                "

 *                       COLD_NODE                WRITE_LIFE_NONE

 * ioctl(COLD)           COLD_DATA                WRITE_LIFE_EXTREME

 * extension list        "                        "

 *

 * -- buffered io

 * WRITE_LIFE_EXTREME    COLD_DATA                WRITE_LIFE_EXTREME

 * WRITE_LIFE_SHORT      HOT_DATA                 WRITE_LIFE_SHORT

 * WRITE_LIFE_NOT_SET    WARM_DATA                WRITE_LIFE_LONG

 * WRITE_LIFE_NONE       "                        "

 * WRITE_LIFE_MEDIUM     "                        "

 * WRITE_LIFE_LONG       "                        "

 *

 * -- direct io

 * WRITE_LIFE_EXTREME    COLD_DATA                WRITE_LIFE_EXTREME

 * WRITE_LIFE_SHORT      HOT_DATA                 WRITE_LIFE_SHORT

 * WRITE_LIFE_NOT_SET    WARM_DATA                WRITE_LIFE_NOT_SET

 * WRITE_LIFE_NONE       "                        WRITE_LIFE_NONE

 * WRITE_LIFE_MEDIUM     "                        WRITE_LIFE_MEDIUM

 * WRITE_LIFE_LONG       "                        WRITE_LIFE_LONG

	/*

	 * __add_sum_entry should be resided under the curseg_mutex

	 * because, this function updates a summary entry in the

	 * current summary block.

	/*

	 * SIT information should be updated before segment allocation,

	 * since SSR needs latest valid block information.

	/*

	 * segment dirty status should be updated after segment allocation,

	 * so we just need to update status only one time after previous

	 * segment being closed.

 update device state for fsync */

 update device state for checkpoint */

 writeout dirty page into bdev */

 i/o temperature is needed for passing down write hints */

 for recovery flow */

 se->type is volatile as SSR allocation */

 change the current segment */

 submit cached LFS IO */

 sbumit cached IPU IO */

 Step 1: restore nat cache */

 Step 2: restore sit cache */

 Step 3: restore summary entries */

 get segment number and block addr */

 set uncompleted segment to curseg */

 update journal info */

 restore for compacted data summary */

 sanity check for summary blocks */

 Step 1: write nat cache */

 Step 2: write sit cache */

 Step 3: write summary entries */

/*

 * CP calls this function, which flushes SIT entries including sit_journal,

 * and moves prefree segs to free segs.

	/*

	 * add and account sit entries of dirty bitmap in sit entry

	 * set temporarily

	/*

	 * if there are no enough space in journal to store dirty sit

	 * entries, remove all entries from journal and add and account

	 * them in sit entry set.

	/*

	 * there are two steps to flush sit entries:

	 * #1, flush sit entries to journal in current cold data summary block.

	 * #2, flush sit entries to sit page.

 flush dirty sit entries in region of current sit set */

 add discard candidates */

 allocate memory for SIT information */

 get information related with SIT */

 setup SIT bitmap from ckeckpoint pack */

 init SIT information */

 allocate memory for free segmap information */

 set all segments as dirty temporarily */

 init free segmap information */

 build discard map only one time */

 set use the current segments */

 find dirty segment based on free segmap */

 allocate memory for dirty segments list information */

	/*

	 * In LFS/SSR curseg, .next_blkoff should point to an unused blkaddr;

	 * In LFS curseg, all blkaddr after .next_blkoff should be unused.

	/*

	 * Skip check of zones cursegs point to, since

	 * fix_curseg_write_pointer() checks them.

	/*

	 * Get last valid block of the zone.

	/*

	 * If last valid block is beyond the write pointer, report the

	 * inconsistency. This inconsistency does not cause write error

	 * because the zone will not be selected for write operation until

	 * it get discarded. Just report it.

	/*

	 * If there is no valid block in the zone and if write pointer is

	 * not at zone start, reset the write pointer.

 report zone for the sector the curseg points to */

 check consistency of the zone curseg pointed to */

 check newly assigned zone */

 Return the zone index in the given device */

/*

 * Return the usable segments in a section based on the zone's

 * corresponding zone capacity. Zone is equal to a section.

 Conventional zone's capacity is always equal to zone size */

	/*

	 * If the zone_capacity_blocks array is NULL, then zone capacity

	 * is equal to the zone size for all zones

 Get the segment count beyond zone capacity block */

/*

 * Return the number of usable blocks in a segment. The number of blocks

 * returned is always equal to the number of blocks in a segment for

 * segments fully contained within a sequential zone capacity or a

 * conventional zone. For segments partially contained in a sequential

 * zone capacity, the number of usable blocks up to the zone capacity

 * is returned. 0 is returned in all other cases.

	/*

	 * Conventional zone's capacity is always equal to zone size,

	 * so, blocks per segment is unchanged.

	/*

	 * If segment starts before zone capacity and spans beyond

	 * zone capacity, then usable blocks are from seg start to

	 * zone capacity. If the segment starts after the zone capacity,

	 * then there are no usable blocks.

/*

 * Update min, max modified time for cost-benefit GC algorithm

 init sm info */

 reinit free segmap based on SIT */

 discard pre-free/dirty segments list */

 SPDX-License-Identifier: GPL-2.0

/*

 * fs/f2fs/dir.c

 *

 * Copyright (c) 2012 Samsung Electronics Co., Ltd.

 *             http://www.samsung.com/

 If @dir is casefolded, initialize @fname->cf_name from @fname->usr_fname. */

 fall back to treating name as opaque byte sequence */

 hash was decoded from the no-key name */

/*

 * Prepare to search for @iname in @dir.  This is similar to

 * fscrypt_setup_filename(), but this also handles computing the casefolded name

 * and the f2fs dirhash if needed, then packing all the information about this

 * filename up into a 'struct f2fs_filename'.

/*

 * Prepare to look up @dentry in @dir.  This is similar to

 * fscrypt_prepare_lookup(), but this also handles computing the casefolded name

 * and the f2fs dirhash if needed, then packing all the information about this

 * filename up into a 'struct f2fs_filename'.

/*

 * Test whether a case-insensitive directory entry matches the filename

 * being searched for.

 *

 * Returns 1 for a match, 0 for no match, and -errno on an error.

	/*

	 * In strict mode, ignore invalid names.  In non-strict mode,

	 * fall back to treating them as opaque byte sequences.

 utf8_strncasecmp_folded returns 0 on match */

 CONFIG_UNICODE */

 no need to allocate new dentry pages to all the indices */

 This is to increase the speed of f2fs_create */

/*

 * Find an entry in the specified directory with the wanted name.

 * It returns the page where the entry was found (as a parameter - res_page),

 * and the entry itself. Page is returned mapped and unlocked.

 * Entry is guaranteed to be valid.

 tmpfile case? */

 copy name info. to this inode page */

		/*

		 * Roll-forward recovery doesn't have encryption keys available,

		 * so it can't compute the dirhash for encrypted+casefolded

		 * filenames.  Append it to i_name if possible.  Else, disable

		 * roll-forward recovery of the dentry (i.e., make fsync'ing the

		 * file force a checkpoint) by setting LOST_PINO.

 update dirent of "." */

 update dirent of ".." */

 in order to handle error case */

	/*

	 * This file should be checkpointed during fsync.

	 * We lost i_pino from now on.

		/*

		 * If link the tmpfile to alias through linkat path,

		 * we should remove this inode from orphan list.

 avoid wrong garbage data for readdir */

 Increase the depth, if required */

 Move to next level to find the empty slot for new dentry */

 synchronize inode page's data from inode cache */

/*

 * Caller should grab and release a rwsem by calling f2fs_lock_op() and

 * f2fs_unlock_op().

	/*

	 * An immature stackable filesystem shows a race condition between lookup

	 * and create. If we have same task when doing lookup and create, it's

	 * definitely fine as expected by VFS normally. Otherwise, let's just

	 * verify on-disk dentry one more time, which guarantees filesystem

	 * consistency more.

/*

 * It only removes the dentry from the dentry page, corresponding name

 * entry in name page does not need to be touched during deletion.

 Let's check and deallocate this dentry page */

 check memory boundary before moving forward */

 allow readdir() to be interrupted */

 readahead for multi pages of dir */

 SPDX-License-Identifier: GPL-2.0

/*

 * fs/f2fs/checkpoint.c

 *

 * Copyright (c) 2012 Samsung Electronics Co., Ltd.

 *             http://www.samsung.com/

/*

 * We guarantee no failure on the returned page.

 for POR only */

/*

 * Readahead CP/NAT/SIT/SSA/POR pages

 get nat block addr */

 get sit block addr */

 collect a number of dirty meta pages and write together */

 if locked failed, cp will flush dirty pages instead */

 someone wrote it for us */

 add new dirty ino entry into list */

 remove dirty ino entry from list */

 mode should be APPEND_INO, UPDATE_INO or TRANS_DIR_INO */

 add new orphan ino entry into list */

 remove orphan entry from orphan list */

		/*

		 * there should be a bug that we can't find the entry

		 * to orphan inode.

 truncate all the data during iput */

 ENOMEM was fully retried in f2fs_evict_inode. */

	/*

	 * Turn on quotas which were not enabled for read-only mounts if

	 * filesystem has quota feature, so that they are updated correctly.

 clear Orphan Flag */

 Turn quotas off */

 Restore SB_RDONLY status */

	/*

	 * we don't need to do spin_lock(&im->ino_lock) here, since all the

	 * orphan inode operations are covered under f2fs_lock_op().

	 * And, spin_lock should be avoided due to page operations below.

 loop for each orphan inode entry and write them in Jornal block */

			/*

			 * an orphan block is full of 1020 entries,

			 * then we need to flush current orphan blocks

			 * and bring another one in memory

	/*

	 * Finding out valid cp block involves read both

	 * sets( cp pack 1 and cp pack 2)

 The second checkpoint pack should start at the next segment */

 Sanity checking of checkpoint */

 We need to give cpu to another writers. */

		/*

		 * We should submit bio, since it exists several

		 * wribacking dentry pages in the freeing inode.

 it's on eviction */

/*

 * Freeze all the FS-operations for checkpoint.

	/*

	 * Let's flush inline_data in dirty node pages.

 only failed during mount/umount/freeze/quotactl */

 write all the dirty dentry pages */

	/*

	 * POR: we should ensure that there are no dirty node pages

	 * until finishing nat/sit flush. inode->i_blocks can be updated.

	/*

	 * sbi->node_change is used only for AIO write_begin path which produces

	 * dirty node blocks and some checkpoint values by block allocation.

 set this flag to activate crc|cp_ver for recovery */

	/*

	 * pagevec_lookup_tag and lock_page again will take

	 * some extra time. Therefore, f2fs_update_meta_pages and

	 * f2fs_sync_meta_pages are combined in this function.

 writeout cp pack 2 page */

 submit checkpoint (with barrier if NOBARRIER is not set) */

 Flush all the NAT/SIT pages */

 start to update checkpoint, cp ver is already updated previously */

 2 cp + n data seg summary + orphan inode blocks */

 update ckpt flag for checkpoint */

 update SIT/NAT bitmap */

 write nat bits */

 write out checkpoint buffer at block 0 */

 Record write statistics in the hot node summary */

 update user_block_counts */

 Here, we have one bio having CP pack except cp pack 2 page */

 Wait for all dirty meta pages to be submitted for IO */

 wait for previous submitted meta pages writeback */

 flush all device cache */

 barrier and flush checkpoint cp pack 2 page if it can */

	/*

	 * invalidate intermediate page cache borrowed from meta inode which are

	 * used for migration of encrypted, verity or compressed inode's blocks.

	/*

	 * redirty superblock if metadata like node page or inode cache is

	 * updated during writing checkpoint.

 this is the case of multiple fstrims without any changes */

	/*

	 * update checkpoint pack index

	 * Increase the version number so that

	 * SIT entries and seg summaries are written at correct place

 write cached NAT/SIT entries to NAT/SIT area */

 save inmem log status */

 update CP_TIME to trigger checkpoint periodically */

 already dispatched by issue_checkpoint_thread */

	/*

	 * update issue_list before we wake up issue_checkpoint thread,

	 * this smp_mb() pairs with another barrier in ___wait_event(),

	 * see more details in comments of waitqueue_active().

 SPDX-License-Identifier: GPL-2.0

/*

 * fs/f2fs/file.c

 *

 * Copyright (c) 2012 Samsung Electronics Co., Ltd.

 *             http://www.samsung.com/

 should do out of any locked page */

 block allocation */

 wait for GCed page writeback via META_MAPPING */

	/*

	 * check to see if the page is mapped already (no holes)

 page is wholly or partially inside EOF */

	/*

	 * Make sure to get the non-deleted alias.  The alias associated with

	 * the open file descriptor being fsync()'ed may be deleted already.

 But we need to avoid that there are some inode updates */

 if fdatasync is triggered, let's do in-place-update */

 if the inode is dirty, let's recover all the time */

	/*

	 * if there is no written data, don't waste time to write recovery info.

 it may call write_inode just prior to fsync */

		/*

		 * for OPU case, during fsync(), node can be persisted before

		 * data when lower device doesn't support write barrier, result

		 * in data corruption after SPO.

		 * So for strict fsync mode, force to use atomic write sematics

		 * to keep write order in between data/node and last node to

		 * avoid potential data corruption.

	/*

	 * Both of fdatasync() and fsync() are able to be recovered from

	 * sudden-power-off.

 all the dirty node pages should be flushed for POR */

		/*

		 * We've secured consistency through sync_fs. Following pino

		 * will be used only for fsynced inodes after checkpoint.

 if cp_error was enabled, we should avoid infinite loop */

	/*

	 * If it's atomic_write, it's just fine to keep write ordering. So

	 * here we don't need to wait for node write completion, since we use

	 * node chain which serializes node blocks. If one of node writes are

	 * reordered, we can see simply broken chain, resulting in stopping

	 * roll-forward recovery. It means we'll recover all or none node blocks

	 * given fsync mark.

 once recovery info is written, don't need to tack this */

 handle inline data case */

 direct node does not exists */

 find data/hole in dnode block */

 Assumption: truncateion starts with cluster */

		/*

		 * once we invalidate valid blkaddr in range [ofs, ofs + count],

		 * we will invalidate all blkaddr in the whole range.

 An encrypted inode should have a key and truncate the last page. */

 lastly zero out the first data page */

	/*

	 * for compressed file, only support cluster size

	 * aligned truncation.

	/*

	 * For compressed file, after release compress blocks, don't allow write

	 * direct, but we should allow write direct after truncate to zero.

 we should check inline_data size */

 we need to show initial sectors used for inline_data/dentries */

		/*

		 * update uid/gid under lock_op(), so that dquot and inode can

		 * be updated atomically.

			/*

			 * should convert inline inode before i_size_write to

			 * keep smaller than inline_data size with inline flag.

		/*

		 * do not trim all blocks after i_size if target size is

		 * larger than i_size.

 file size may changed here */

 inode change will produce dirty node pages flushed by checkpoint */

 do not invalidate this block address */

 avoid gc operation during block exchange */

 collapse range should be aligned to block size of f2fs. */

 write out all dirty pages from offset */

 write out all moved pages, if possible */

		/*

		 * f2fs_reserve_new_blocks will not guarantee entire block

		 * allocation.

 insert range should be aligned to block size of f2fs. */

 write out all dirty pages from offset */

 avoid gc operation during block exchange */

 write out all moved pages, if possible */

 update new size to the failed position */

 f2fs only support ->fallocate for regular file */

	/*

	 * f2fs_relase_file is called at every close calls. So we should

	 * not drop any inmemory pages by close called by other process.

 some remained atomic pages should discarded */

	/*

	 * If the process doing a transaction is crashed, we should do

	 * roll-back. Otherwise, other reader/write can see corrupted database

	 * until all the writers close its file. Since this should be done

	 * before dropping file lock, it needs to do in ->flush.

 mask can be shrunk by flags_valid selector */

 Is it quota file? Do not allow user to mess with it */

 FS_IOC_[GS]ETFLAGS and FS_IOC_FS[GS]ETXATTR support */

/*

 * To make a new on-disk f2fs i_flag gettable via FS_IOC_GETFLAGS, add an entry

 * for it to f2fs_fsflags_map[], and add its FS_*_FL equivalent to

 * F2FS_GETTABLE_FS_FL.  To also make it settable via FS_IOC_SETFLAGS, also add

 * its FS_*_FL equivalent to F2FS_SETTABLE_FS_FL.

 *

 * Translating flags to fsx_flags value used by FS_IOC_FSGETXATTR and

 * FS_IOC_FSSETXATTR is done by the VFS.

 Convert f2fs on-disk i_flags to FS_IOC_{GET,SET}FLAGS flags */

 Convert FS_IOC_{GET,SET}FLAGS flags to f2fs on-disk i_flags */

	/*

	 * Should wait end_io to count F2FS_WB_CP_DATA correctly by

	 * f2fs_is_atomic_file.

 add inode in inmem_list first and set atomic_file */

 do checkpoint only */

 do checkpoint only */

 update superblock with uuid */

 undo new data */

 if in-place-update policy is enabled, don't waste time here */

 writeback all dirty pages in the range */

	/*

	 * lookup mapping info in extent cache, skip defragmenting if physical

	 * block addresses are continuous.

	/*

	 * lookup mapping info in dnode page cache, skip defragmenting if all

	 * physical block addresses are continuous even if there are hole(s)

	 * in logical blocks.

 record total count of block that we're going to move */

	/*

	 * make sure there are enough free section for LFS allocation, this can

	 * avoid defragment running in SSR mode when free section are allocated

	 * intensively

 verify alignment of offset & size */

 verify the end result is block aligned */

 write out all dirty pages from offset */

 Must validate to set it with SQLite behavior in Android. */

 Is it quota file? Do not allow user to mess with it */

 Use i_gc_failures for normal file as a risk signal. */

			/*

			 * Convert inline data for Direct I/O before entering

			 * f2fs_direct_IO().

			/*

			 * If force_buffere_io() is true, we have to allocate

			 * blocks all the time, since f2fs_direct_IO will fall

			 * back to buffered IO.

 if we couldn't write data, we should deallocate blocks. */

 SPDX-License-Identifier: GPL-2.0

/*

 * f2fs iostat support

 *

 * Copyright 2021 Google LLC

 * Author: Daeho Jeong <daehojeong@google.com>

 print app write IOs */

 print fs write IOs */

 print app read IOs */

 print fs read IOs */

 print other IOs */

 Need double check under the lock */

 Due to the mempool, this never fails. */

 init iostat info */

 SPDX-License-Identifier: GPL-2.0

/*

 * f2fs shrinker support

 *   the basic infra was copied from fs/ubifs/shrinker.c

 *

 * Copyright (c) 2015 Motorola Mobility

 * Copyright (c) 2015 Jaegeuk Kim <jaegeuk@kernel.org>

 stop f2fs_put_super */

 count extent cache entries */

 count clean nat cache entries */

 count free nids cache entries */

 stop f2fs_put_super */

 shrink extent cache entries */

 shrink clean nat cache entries */

 shrink free nids cache entries */

 SPDX-License-Identifier: GPL-2.0

/*

 * fs/f2fs/recovery.c

 *

 * Copyright (c) 2012 Samsung Electronics Co., Ltd.

 *             http://www.samsung.com/

/*

 * Roll forward recovery scenarios.

 *

 * [Term] F: fsync_mark, D: dentry_mark

 *

 * 1. inode(x) | CP | inode(x) | dnode(F)

 * -> Update the latest inode(x).

 *

 * 2. inode(x) | CP | inode(F) | dnode(F)

 * -> No problem.

 *

 * 3. inode(x) | CP | dnode(F) | inode(x)

 * -> Recover to the latest dnode(F), and drop the last inode(x)

 *

 * 4. inode(x) | CP | dnode(F) | inode(F)

 * -> No problem.

 *

 * 5. CP | inode(x) | dnode(F)

 * -> The inode(DF) was missing. Should drop this dnode(F).

 *

 * 6. CP | inode(DF) | dnode(F)

 * -> No problem.

 *

 * 7. CP | dnode(F) | inode(DF)

 * -> If f2fs_iget fails, then goto next to find inode(DF).

 *

 * 8. CP | dnode(F) | inode(x)

 * -> If f2fs_iget fails, then goto next to find inode(DF).

 *    But it will fail due to no inode(DF).

 inode should not be recovered, drop it */

 Compute the hash of the filename */

		/*

		 * In this case the hash isn't computable without the key, so it

		 * was saved on-disk.

 Case-sensitive match is fine for recovery */

 get node pages in the current segment */

			/*

			 * CP | dnode(F) | inode(DF)

			 * For this case, we should not give up now.

 sanity check in order to detect looped node chain */

 check next segment */

 Get the previous summary */

 Use the locked dnode page and inode */

 Get the node page */

 Deallocate previous index in the node page */

	/*

	 * if inode page is locked, unlock temporarily, but its reference

	 * count keeps alive.

 step 1: recover xattr */

 step 2: recover inline data */

 step 3: recover data indices */

 skip recovering if dest is the same as src */

 dest is invalid, just invalidate src block */

		/*

		 * dest is reserved block, invalidate src block

		 * and then reserve one new block in dnode page.

 dest is valid block, try to recover from src to dest */

 We should not get -ENOSPC */

 Check the previous node page having this index */

 write dummy data page */

 get node pages in the current segment */

		/*

		 * inode(x) | CP | inode(x) | dnode(F)

		 * In this case, we can lose the latest inode(x).

		 * So, call recover_inode for the inode update.

 check next segment */

 Turn on quotas so that they are updated correctly */

 prevent checkpoint */

 step #1: find fsynced inode numbers */

 step #2: recover data */

 truncate meta pages to be used by the recovery */

	/*

	 * If fsync data succeeds or there is no fsync data to recover,

	 * and the f2fs is not read only, check and fix zoned block devices'

	 * write pointer consistency.

 let's drop all the directory inodes for clean checkpoint */

 Turn quotas off */

 Restore SB_RDONLY status */

 SPDX-License-Identifier: GPL-2.0

/*

 * f2fs sysfs interface

 *

 * Copyright (c) 2012 Samsung Electronics Co., Ltd.

 *             http://www.samsung.com/

 * Copyright (c) 2017 Chao Yu <chao@kernel.org>

 Sysfs support for f2fs */

 struct f2fs_gc_thread */

 struct f2fs_sm_info */

 struct discard_cmd_control */

 struct f2fs_nm_info */

 struct f2fs_sb_info */

 struct f2fs_stat_info */

 struct f2fs_fault_info */

 struct f2fs_fault_info */

 struct f2fs_sb_info */

 struct ckpt_req_control */

 struct atgc_management */

/*

 * Note that there are three feature list entries:

 * 1) /sys/fs/f2fs/features

 *   : shows runtime features supported by in-kernel f2fs along with Kconfig.

 *     - ref. F2FS_FEATURE_RO_ATTR()

 *

 * 2) /sys/fs/f2fs/$s_id/features <deprecated>

 *   : shows on-disk features enabled by mkfs.f2fs, used for old kernels. This

 *     won't add new feature anymore, and thus, users should check entries in 3)

 *     instead of this 2).

 *

 * 3) /sys/fs/f2fs/$s_id/feature_list

 *   : shows on-disk features enabled by mkfs.f2fs per instance, which follows

 *     sysfs entry rule where each entry should expose single value.

 *     This list covers old feature list provided by 2) and beyond. Therefore,

 *     please add new on-disk feature in this list only.

 *     - ref. F2FS_SB_FEATURE_RO_ATTR()

 CONFIG_FS_ENCRYPTION */

 For ATGC */

 For ATGC */

 CONFIG_FS_ENCRYPTION */

 SPDX-License-Identifier: GPL-2.0

/*

 * f2fs debugging statistics

 *

 * Copyright (c) 2012 Samsung Electronics Co., Ltd.

 *             http://www.samsung.com/

 * Copyright (c) 2012 Linux Foundation

 * Copyright (c) 2012 Greg Kroah-Hartman <gregkh@linuxfoundation.org>

/*

 * This function calculates BDF of every segments

 these will be changed if online resize is done */

 validation check of the segment numbers */

/*

 * This function calculates memory footprint.

 build stat */

 build superblock */

 build sm */

 build sit */

 build free segmap */

 build curseg */

 build dirty segmap */

 build nm */

 build gc */

 build merge flush thread */

 free nids */

 segment usage info */

 memory footprint */

 SPDX-License-Identifier: GPL-2.0

/*

 * fs/f2fs/inline.c

 * Copyright (c) 2013, Intel Corporation

 * Authors: Huajun Li <huajun.li@intel.com>

 *          Haicheng Li <haicheng.li@intel.com>

 Copy the whole inline data block */

 clear dirty state */

 write data page to try to make data consistent */

 this converted inline_data should be recovered. */

 clear inline data and flag after data writeback */

	/*

	 * The inline_data recovery policy is as follows.

	 * [prev.] [next] of inline_data flag

	 *    o       o  -> recover inline_data

	 *    o       x  -> remove inline_data, and then recover data blocks

	 *    x       o  -> remove data blocks, and then recover inline_data

	 *    x       x  -> recover data blocks

 update i_size to MAX_INLINE_DATA */

/*

 * NOTE: ipage is grabbed by caller, but if any error occurs, we should

 * release ipage in this function.

 copy data from inline dentry block to new dentry block */

	/*

	 * we do not need to zero out remainder part of dentry and filename

	 * field, since we have used bitmap for marking the usage status of

	 * them, besides, we can also ignore copying/zeroing reserved space

	 * of dentry block, because them haven't been used so far.

 clear inline dir and flag after data writeback */

	/*

	 * should retrieve reserved space which was used to keep

	 * inline_dentry's structure for backward compatibility.

		/*

		 * We only need the disk_name and hash to move the dentry.

		 * We don't need the original or casefolded filenames.

	/*

	 * should retrieve reserved space which was used to keep

	 * inline_dentry's structure for backward compatibility.

 we don't need to mark_inode_dirty now */

 synchronize inode page's data from inode cache */

	/*

	 * f2fs_readdir was protected by inode.i_rwsem, it is safe to access

	 * ipage without page's lock held.

 SPDX-License-Identifier: GPL-2.0

/*

 * fs/f2fs/verity.c: fs-verity support for f2fs

 *

 * Copyright 2019 Google LLC

/*

 * Implementation of fsverity_operations for f2fs.

 *

 * Like ext4, f2fs stores the verity metadata (Merkle tree and

 * fsverity_descriptor) past the end of the file, starting at the first 64K

 * boundary beyond i_size.  This approach works because (a) verity files are

 * readonly, and (b) pages fully beyond i_size aren't visible to userspace but

 * can be read/written internally by f2fs with only some relatively small

 * changes to f2fs.  Extended attributes cannot be used because (a) f2fs limits

 * the total size of an inode's xattr entries to 4096 bytes, which wouldn't be

 * enough for even a single Merkle tree block, and (b) f2fs encryption doesn't

 * encrypt xattrs, yet the verity metadata *must* be encrypted when the file is

 * because it contains hashes of the plaintext data.

 *

 * Using a 64K boundary rather than a 4K one keeps things ready for

 * architectures with 64K pages, and it doesn't necessarily waste space on-disk

 * since there can be a hole between i_size and the start of the Merkle tree.

/*

 * Read some verity metadata from the inode.  __vfs_read() can't be used because

 * we need to read beyond i_size.

/*

 * Write some verity metadata to the inode for FS_IOC_ENABLE_VERITY.

 * kernel_write() can't be used because the file descriptor is readonly.

/*

 * Format of f2fs verity xattr.  This points to the location of the verity

 * descriptor within the file data rather than containing it directly because

 * the verity descriptor *must* be encrypted when f2fs encryption is used.  But,

 * f2fs encryption does not encrypt xattrs.

	/*

	 * Since the file was opened readonly, we have to initialize the quotas

	 * here and not rely on ->open() doing it.  This must be done before

	 * evicting the inline data.

	/*

	 * If an error already occurred (which fs/verity/ signals by passing

	 * desc == NULL), then only clean-up is needed.

 Append the verity descriptor. */

	/*

	 * Write all pages (both data and verity metadata).  Note that this must

	 * happen before clearing FI_VERITY_IN_PROGRESS; otherwise pages beyond

	 * i_size won't be written properly.  For crash consistency, this also

	 * must happen before the verity inode flag gets persisted.

 Set the verity xattr. */

 Finally, set the verity inode flag. */

	/*

	 * Verity failed to be enabled, so clean up by truncating any verity

	 * metadata that was written beyond i_size (both from cache and from

	 * disk) and clearing FI_VERITY_IN_PROGRESS.

	 *

	 * Taking i_gc_rwsem[WRITE] is needed to stop f2fs garbage collection

	 * from re-instantiating cached pages we are truncating (since unlike

	 * normal file accesses, garbage collection isn't limited by i_size).

 Get the descriptor location */

 Get the descriptor */

 SPDX-License-Identifier: GPL-2.0

/*

 * fs/f2fs/hash.c

 *

 * Copyright (c) 2012 Samsung Electronics Co., Ltd.

 *             http://www.samsung.com/

 *

 * Portions of this code from linux/fs/ext3/hash.c

 *

 * Copyright (C) 2002 by Theodore Ts'o

/*

 * Hashing code copied from ext3

 Initialize the default seed for the hash checksum functions */

/*

 * Compute @fname->hash.  For all directories, @fname->disk_name must be set.

 * For casefolded directories, @fname->usr_fname must be set, and also

 * @fname->cf_name if the filename is valid Unicode.

		/*

		 * If the casefolded name is provided, hash it instead of the

		 * on-disk name.  If the casefolded name is *not* provided, that

		 * should only be because the name wasn't valid Unicode, so fall

		 * back to treating the name as an opaque byte sequence.  Note

		 * that to handle encrypted directories, the fallback must use

		 * usr_fname (plaintext) rather than disk_name (ciphertext).

 SPDX-License-Identifier: GPL-2.0

/*

 * fs/f2fs/node.c

 *

 * Copyright (c) 2012 Samsung Electronics Co., Ltd.

 *             http://www.samsung.com/

/*

 * Check whether the given nid is within node id range.

 only uses low memory */

	/*

	 * give 25%, 25%, 50%, 50%, 50% memory for each components respectively

 it allows 20% / total_ram for inmemory pages */

		/*

		 * free memory is lower than watermark or cached page count

		 * exceed threshold, deny caching compress page.

 get current nat block page with lock */

 must be locked by nat_tree_lock */

 for recent accessed nat entry, move it to tail of lru list */

	/*

	 * update entry_cnt in below condition:

	 * 1. update NEW_ADDR to valid block address;

	 * 2. update old block address to new one;

 must be locked by nat_tree_lock */

		/*

		 * when nid is reallocated,

		 * previous nat entry can be remained in nat cache.

		 * So, reinitialize it with new information.

 let's free early to reduce memory consumption */

 sanity check */

 increment version no as node is removed */

 change address */

 update fsync_mark if its inode nat entry is still alive */

 Check nat cache */

	/*

	 * Check current segment summary by trying to grab journal_rwsem first.

	 * This sem is on the critical path on the checkpoint requiring the above

	 * nat_tree_lock. Therefore, we should retry, if we failed to grab here

	 * while not bothering checkpoint.

 Fill node_info from nat page */

 cache nat entry */

/*

 * readahead MAX_RA_NODE number of node pages.

 Then, try readahead for siblings of the desired node */

/*

 * The maximum depth is four.

 * Offset[0] will have raw inode offset.

/*

 * Caller should call f2fs_put_dnode(dn).

 * Also, it should grab and release a rwsem by calling f2fs_lock_op() and

 * f2fs_unlock_op() only if mode is set with ALLOC_NODE.

 if inline_data is set, should not report any block indices */

 get indirect or direct nodes */

 alloc new node */

 Deallocate node address */

 get direct node */

 Make dnode_of_data for parameter */

 remove current indirect node */

 get indirect nodes in the path */

 reference count'll be increased */

 free direct nodes linked to a partial indirect node */

/*

 * All the block addresses of data and nodes should be nullified.

 caller must lock inode page */

/*

 * Caller should grab and release a rwsem by calling f2fs_lock_op() and

 * f2fs_unlock_op().

 remove potential inline_data blocks */

 0 is possible, after f2fs_new_inode() has failed */

 will put inode & node pages */

 allocate inode page for new inode */

 caller should f2fs_put_page(page, 1); */

/*

 * Caller should do after getting the following values.

 * 0: f2fs_put_page(page, 0)

 * LOCKED_PAGE or error: f2fs_put_page(page, 1)

 NEW_ADDR can be seen, after cp_error drops some dirty node pages */

/*

 * Readahead a node page

 should flush inline_data before evict_inode */

 someone wrote it for us */

 get old block addr of this node page */

 This page is already truncated */

 should add to global list before clearing PAGECACHE status */

 set page dirty and write it */

 someone wrote it for us */

 may be written by other thread */

 someone wrote it for us */

 flush inline_data, if it's async context. */

 give a priority to WB_SYNC threads */

			/*

			 * flushing sequence with step:

			 * 0. indirect nodes

			 * 1. dentry dnodes

			 * 2. file dnodes

 someone wrote it for us */

 flush inline_data/inode, if it's async context. */

 flush inline_data */

 flush dirty inode */

 balancing f2fs's metadata in background */

 collect a number of dirty node pages and write together */

/*

 * Structure of the f2fs node operations

 return if the nid is recognized as free */

 0 nid should not be used */

		/*

		 *   Thread A             Thread B

		 *  - f2fs_create

		 *   - f2fs_new_inode

		 *    - f2fs_alloc_nid

		 *     - __insert_nid_to_list(PREALLOC_NID)

		 *                     - f2fs_balance_fs_bg

		 *                      - f2fs_build_free_nids

		 *                       - __f2fs_build_free_nids

		 *                        - scan_nat_page

		 *                         - add_free_nid

		 *                          - __lookup_nat_cache

		 *  - f2fs_add_link

		 *   - f2fs_init_inode_metadata

		 *    - f2fs_new_inode_page

		 *     - f2fs_new_node_page

		 *      - set_node_addr

		 *  - f2fs_alloc_nid_done

		 *   - __remove_nid_from_list(PREALLOC_NID)

		 *                         - __insert_nid_to_list(FREE_NID)

 Enough entries */

 try to find free nids in free_nid_bitmap */

 readahead nat pages to be scanned */

 go to the next free nat pages to find free nids abundantly */

 find free nids from current sum_pages */

/*

 * If this function returns success, caller can obtain a new nid

 * from second parameter of this function.

 * The returned nid could be used ino as well as nid when inode is created.

 We should not use stale free nids created by f2fs_build_free_nids */

 Let's scan nat pages and its caches to get free nids */

/*

 * f2fs_alloc_nid() should be called prior to this function.

/*

 * f2fs_alloc_nid() should be called prior to this function.

 1: invalidate the previous xattr nid */

 2: update xattr nid in inode */

 3: update and set xattr node page dirty */

 Should not use this inode from free nid list */

 scan the node segment */

 readahead node pages */

		/*

		 * if a free nat in journal has not been used after last

		 * checkpoint, we should remove it from available nids,

		 * since later we will add it again.

 handle nid zero due to it should never be used */

	/*

	 * there are two steps to flush nat entries:

	 * #1, flush nat entries to journal in current hot data summary block.

	 * #2, flush nat entries to nat page.

 flush dirty nats in nat entry set */

 Allow dirty nats by node block allocation in write_begin */

/*

 * This function is called during the checkpointing process.

	/*

	 * during unmount, let's flush nat_bits before checking

	 * nat_cnt[DIRTY_NAT].

	/*

	 * if there are no enough space in journal to store dirty nat

	 * entries, remove all entries from journal and merge them

	 * into nat entry set.

 flush dirty nats in nat entry set */

 Allow dirty nats by node block allocation in write_begin */

 segment_count_nat includes pair segment so divide to 2. */

 not used nids: 0, node, meta, (and root counted as valid node) */

 load free nid status from nat_bits table */

 destroy free nid list */

 destroy nat cache */

 destroy nat set cache */

 entry_cnt is not zero, when cp_error was occurred */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Handle fileserver selection and rotation.

 *

 * Copyright (C) 2017 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * Begin iteration through a server list, starting with the vnode's last used

 * server if possible, or the last recorded good server if not.

 See if the vnode's preferred record is still available */

		/* If we have a lock outstanding on a server that's no longer

		 * serving this vnode, then we can't switch to another server

		 * and have to return an error.

 Note that the callback promise is effectively broken */

/*

 * Post volume busy note.

/*

 * Sleep and retry the operation to the same fileserver.

/*

 * Select the fileserver to use.  May be called multiple times to rotate

 * through the fileservers.

 Evaluate the result of the previous operation, if there was one. */

 Success or local failure.  Stop. */

		/* The far side rejected the operation on some grounds.  This

		 * might involve the server being busy or the volume having been moved.

			/* This fileserver doesn't know about the volume.

			 * - May indicate that the VL is wrong - retry once and compare

			 *   the results.

			 * - May indicate that the fileserver couldn't attach to the vol.

			/* If the server list didn't change, then assume that

			 * it's the fileserver having trouble.

 Try again */

 TODO: Should this return an error or iterate? */

			/* Retry after going round all the servers unless we

			 * have a file lock we need to maintain.

 Retry with same server & address */

			/* The volume migrated to another server.  We consider

			 * consider all locks and callbacks broken and request

			 * an update from the VLDB.

			 *

			 * We also limit the number of VMOVED hops we will

			 * honour, just in case someone sets up a loop.

			/* If the server list didn't change, then the VLDB is

			 * out of sync with the fileservers.  This is hopefully

			 * a temporary condition, however, so we don't want to

			 * permanently block access to the file.

			 *

			 * TODO: Try other fileservers if we can.

			 *

			 * TODO: Retry a few times with sleeps.

	/* See if we need to do an update of the volume record.  Note that the

	 * volume may have moved or even have been deleted.

	/* Pick the untried server with the lowest RTT.  If we have outstanding

	 * callbacks, we stick with the server we're already using if we can.

	/* We're starting on a different fileserver from the list.  We need to

	 * check it, create a callback intercept, find its address list and

	 * probe its capabilities before we use it.

	/* Iterate over the current server's address list to try and find an

	 * address on which it will respond to us.

	/* We've now had a failure to respond on all of a server's addresses -

	 * immediately probe them again and consider retrying the server.

	/* That's all the servers poked to no good effect.  Try again if some

	 * of them were busy.

/*

 * Dump cursor state in the case of the error being EDESTADDRREQ.

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS silly rename handling

 *

 * Copyright (C) 2019 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

 * - Derived from NFS's sillyrename.

/*

 * Actually perform the silly rename step.

/*

 * Perform silly-rename of a dentry.

 *

 * AFS is stateless and the server doesn't know when the client is holding a

 * file open.  To prevent application problems when a file is unlinked while

 * it's still open, the client performs a "silly-rename".  That is, it renames

 * the file to a hidden file in the same directory, and only performs the

 * unlink once the last reference to it is put.

 *

 * The final cleanup is done during dentry_iput.

 We don't allow a dentry to be silly-renamed twice. */

		/* Create a silly name.  Note that the ".__afs" prefix is

		 * understood by the salvager and must not be changed.

		/* N.B. Better to return EBUSY here ... it could be dangerous

		 * to delete the file while it's in use.

 The rename succeeded. */

		/* The result of the rename is unknown. Play it safe by forcing

		 * a new lookup.

/*

 * Tell the server to remove a sillyrename file.

	/* If there was a conflict with a third party, check the status of the

	 * unlinked vnode.

/*

 * Remove sillyrename file on iput.

		/* We raced with lookup...  See if we need to transfer the

		 * sillyrename information to the aliased dentry.

 Stop lock-release from complaining. */

/* AFS superblock handling

 *

 * Copyright (c) 2002, 2007, 2018 Red Hat, Inc. All rights reserved.

 *

 * This software may be freely redistributed under the terms of the

 * GNU General Public License.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

 *

 * Authors: David Howells <dhowells@redhat.com>

 *          David Woodhouse <dwmw2@infradead.org>

 *

/*

 * initialise the filesystem

 create ourselves an inode cache */

 now export our filesystem to lesser mortals */

/*

 * clean up the filesystem

	/*

	 * Make sure all delayed rcu free inodes are flushed before we

	 * destroy cache.

/*

 * Display the mount device name in /proc/mounts.

/*

 * Display the mount options in /proc/mounts.

/*

 * Parse the source name to get cell name, volume name, volume type and R/W

 * selector.

 *

 * This can be one of the following:

 *	"%[cell:]volume[.]"		R/W volume

 *	"#[cell:]volume[.]"		R/O or R/W volume (R/O parent),

 *					 or R/W (R/W parent) volume

 *	"%[cell:]volume.readonly"	R/O volume

 *	"#[cell:]volume.readonly"	R/O volume

 *	"%[cell:]volume.backup"		Backup volume

 *	"#[cell:]volume.backup"		Backup volume

 To use dynroot, we don't want to have to provide a source */

 determine the type of volume we're looking for */

 split the cell name out if there is one */

 the volume type is further affected by a possible suffix */

 lookup the cell record */

/*

 * Parse a single mount parameter.

/*

 * Validate the options, get the cell key and look up the volume.

 We try to do the mount securely. */

/*

 * check a superblock to see if it's the one we're looking for

/*

 * fill in the superblock

 fill in the superblock */

 allocate the root inode and dentry */

	/* Clear the callback interests (which will do ilookup5) before

	 * deactivating the superblock.

/*

 * Get an AFS superblock and root directory.

 allocate a superblock info record */

 allocate a deviceless superblock */

 initial superblock/root creation */

/*

 * Set up the filesystem mount context.

 Default to the workstation cell. */

/*

 * Initialise an inode cache slab element prior to any use.  Note that

 * afs_alloc_inode() *must* reset anything that could incorrectly leak from one

 * inode to another.

/*

 * allocate an AFS inode struct from our slab cache

 Reset anything that shouldn't leak from one inode to the next. */

/*

 * destroy an AFS inode struct

/*

 * return information about an AFS volume

 SPDX-License-Identifier: GPL-2.0-or-later

/* handling of writes to regular files and writing back to the server

 *

 * Copyright (C) 2007 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * mark a page as having been made dirty and thus needing writeback

/*

 * prepare to perform part of a write to a page

	/* Prefetch area to be written into the cache if we're caching this

	 * file.  We need to do this before we get a lock on the page in case

	 * there's more than one writer competing for the same cache block.

	/* See if this page is already partially written in a way that we can

	 * merge the new write with.

		/* If the file is being filled locally, allow inter-write

		 * spaces to be merged into writes.  If it's not, only write

		 * back what the user gives us.

	/* The previous write and this write aren't adjacent or overlapping, so

	 * flush the page out.

/*

 * finalise part of a write to a page

/*

 * kill all the pages in the given range

/*

 * Redirty all the pages in a given range.

/*

 * completion of write to server

/*

 * Find a key to use for the writeback.  We cached the keys used to author the

 * writes on the vnode.  *_wbk will contain the last writeback key used or NULL

 * and we need to start from there if it's set.

/*

 * write to a file

/*

 * Extend the region to be written back to include subsequent contiguously

 * dirty pages if possible, but don't sleep while doing so.

 *

 * If this page holds new content, then we can include filler zeros in the

 * writeback.

		/* Firstly, we gather up a batch of contiguous dirty pages

		 * under the RCU read lock - but we can't clear the dirty flags

		 * there if any of those pages are mapped.

 Has the page moved or been split? */

		/* Now, if we obtained any pages, we can shift them to being

		 * writable and mark them for caching.

/*

 * Synchronously write back the locked page and any subsequent non-locked dirty

 * pages.

	/* Find all consecutive lockable dirty pages that have contiguous

	 * written regions, stopping when we find a page that is not

	 * immediately lockable, is not dirty or is missing, or we reach the

	 * end of the range.

		/* Trim the write to the EOF; the extra data is ignored.  Also

		 * put an upper limit on the size of a single storedata op.

	/* We now have a contiguous set of dirty pages, each with writeback

	 * set; the first page is still locked at this point, but all the rest

	 * have been unlocked.

 The dirty region was entirely beyond the EOF. */

/*

 * write a page back to the server

 * - the caller locked the page for us

/*

 * write a region of pages back to the server

 May regress with THPs */

		/* At this point we hold neither the i_pages lock nor the

		 * page lock: the page may be truncated or invalidated

		 * (changing page->mapping to NULL), or even swizzled

		 * back from swapper_space to tmpfs file mapping

/*

 * write some of the pending data back to the server

	/* We have to be careful as we can end up racing with setattr()

	 * truncating the pagecache since the caller doesn't take a lock here

	 * to prevent it.

/*

 * write to an AFS file

/*

 * flush any dirty pages for this process, and check for write errors.

 * - the return status from this call provides a reliable indication of

 *   whether any write errors occurred for this process.

/*

 * notification that a previously read-only page is about to become writable

 * - if it returns an error, the caller will deliver a bus error signal

	/* Wait for the page to be written to the cache before we allow it to

	 * be modified.  We then assume the entire page will need writing back.

	/* We mustn't change folio->private until writeback is complete as that

	 * details the portion of the page we need to write back and we might

	 * need to redirty the page if there's a problem.

/*

 * Prune the keys cached for writeback.  The caller must hold vnode->wb_lock.

 Discard unused keys */

/*

 * Clean up a page during invalidation.

 SPDX-License-Identifier: GPL-2.0-or-later

/* Extended attribute handling for AFS.  We use xattrs to get and set metadata

 * instead of providing pioctl().

 *

 * Copyright (C) 2017 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * Deal with the result of a successful fetch ACL operation.

/*

 * Get a file's ACL.

/*

 * Set a file's AFS3 ACL.

 Don't free op->yacl in .put here */

/*

 * Get a file's YFS ACL.

/*

 * Set a file's YFS ACL.

/*

 * Get the name of the cell on which a file resides.

/*

 * Get the volume ID, vnode ID and vnode uniquifier of a file as a sequence of

 * hex numbers separated by colons.

	/* The volume ID is 64-bit, the vnode ID is 96-bit and the

	 * uniquifier is 32-bit.

/*

 * Get the name of the volume on which a file resides.

 afs.yfs. prefix */

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS filesystem directory editing

 *

 * Copyright (C) 2018 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * Find a number of contiguous clear bits in a directory block bitmask.

 *

 * There are 64 slots, which means we can load the entire bitmap into a

 * variable.  The first bit doesn't count as it corresponds to the block header

 * slot.  nr_slots is between 1 and 9.

 The first entry is metadata */

/*

 * Set a number of contiguous bits in the directory block bitmap.

/*

 * Clear a number of contiguous bits in the directory block bitmap.

/*

 * Get a new directory folio.

/*

 * Scan a directory block looking for a dirent of the right name.

 The block was NUL-terminated by afs_dir_check_page(). */

/*

 * Initialise a new directory block.  Note that block 0 is special and contains

 * some extra metadata.

/*

 * Edit a directory's file data to add a new directory entry.  Doing this after

 * create, mkdir, symlink, link or rename if the data version number is

 * incremented by exactly one avoids the need to re-download the entire

 * directory contents.

 *

 * The caller must hold the inode locked.

 Work out how many slots we're going to need. */

	/* Find a block that has sufficient slots available.  Each folio

	 * contains two or more directory blocks.

		/* If the directory extended into a new folio, then we need to

		 * tack a new folio on the end.

 Abandon the edit if we got a callback break. */

 Initialise the block if necessary. */

 Only lower dir blocks have a counter in the header. */

			/* We need to try and find one or more consecutive

			 * slots to hold the entry.

	/* There are no spare slots of sufficient size, yet the operation

	 * succeeded.  Download the directory again.

 Set the dirent slot. */

 TODO: Really need to maintain this

 Adjust the bitmap. */

 Adjust the allocation counter. */

/*

 * Edit a directory's file data to remove a new directory entry.  Doing this

 * after unlink, rmdir or rename if the data version number is incremented by

 * exactly one avoids the need to re-download the entire directory contents.

 *

 * The caller must hold the inode locked.

 Work out how many slots we're going to discard. */

	/* Find a block that has sufficient slots available.  Each folio

	 * contains two or more directory blocks.

 Abandon the edit if we got a callback break. */

 Didn't find the dirent to clobber.  Download the directory again. */

 Adjust the bitmap. */

 Adjust the allocation counter. */

/*

 * Copyright (c) 2002 Red Hat, Inc. All rights reserved.

 *

 * This software may be freely redistributed under the terms of the

 * GNU General Public License.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

 *

 * Authors: David Woodhouse <dwmw2@infradead.org>

 *          David Howells <dhowells@redhat.com>

 *

/*

 * Initialise an inode from the vnode status.

 Symlinks with a mode of 0644 are actually mountpoints. */

		/* it's a symlink we just created (the fileserver

/*

 * Update the core inode struct from a returned status record.

		/* Expected directory change is handled elsewhere so

		 * that we can locally edit the directory and save on a

		 * download.

		/* Only update the size if the data version jumped.  If the

		 * file is being modified locally, then we might have our own

		 * idea of what the size should be that's not the same as

		 * what's on the server.

/*

 * Apply a callback to a vnode.

/*

 * Apply the received status and callback to an inode all in the same critical

 * section to avoid races with afs_validate().

		/* A YFS server will return this from RemoveFile2 and AFS and

		 * YFS will return this from InlineBulkStatus.

			/* Ignore the result of a speculative bulk status fetch

			 * if it splits around a modification op, thereby

			 * appearing to regress the data version.

/*

 * Fetch file status from the volume.

/*

 * ilookup() comparator

/*

 * iget5() comparator

struct afs_vnode *vnode = AFS_FS_I(inode);

/*

 * iget5() inode initialiser

	/* YFS supports 96-bit vnode IDs, but Linux only supports

	 * 64-bit inode numbers.

/*

 * Get a cache cookie for an inode.

 Allow for a 96-bit key */

/*

 * inode retrieval

 deal with an existing inode */

 success */

 failure */

/*

 * Set up the root inode for a volume.  This is always vnode 1, unique 1 within

 * the volume.

/*

 * mark the data attached to an inode as obsolete due to a write on the server

 * - might also want to ditch all the outstanding writes and dirty pages

	/* nuke all the non-dirty pages that aren't locked, mapped or being

	 * written back in a regular file and completely discard the pages in a

/*

 * Check to see if we have a server currently serving this volume and that it

 * hasn't been reinitialised or dropped from the list.

/*

 * Check the validity of a vnode/inode.

/*

 * validate a vnode/inode

 * - there are several things we need to check

 *   - parent dir data changes (rm, rmdir, rename, mkdir, create, link,

 *     symlink)

 *   - parent dir metadata changed (security changes)

 *   - dentry data changed (write, truncate)

 *   - dentry metadata changed (security changes)

	/* if the promise has expired, we need to check the server again to get

	 * a new promise - note that if the (parent) directory's metadata was

	 * changed then the security may be different and we may no longer have

	/* if the vnode's data version number changed then its contents are

/*

 * read the attributes of an inode

/*

 * discard an AFS inode

/*

 * clear an AFS inode

 inode->i_size has now been changed. */

/*

 * set the attributes of an inode

 flush any dirty data outstanding on a regular file */

 Prevent any new writebacks from starting whilst we do this. */

/*

 * Copyright (c) 2002, 2007 Red Hat, Inc. All rights reserved.

 *

 * This software may be freely redistributed under the terms of the

 * GNU General Public License.

 *

 * You should have received a copy of the GNU General Public License

 * along with this program; if not, write to the Free Software

 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

 *

 * Authors: David Woodhouse <dwmw2@infradead.org>

 *          David Howells <dhowells@redhat.com>

 *

/*

 * Handle invalidation of an mmap'd file.  We invalidate all the PTEs referring

 * to the pages in this file's pagecache, forcing the kernel to go through

 * ->fault() or ->page_mkwrite() - at which point we can handle invalidation

 * more fully.

/*

 * Allow the fileserver to request callback state (re-)initialisation.

 * Unfortunately, UUIDs are not guaranteed unique.

/*

 * actually break a callback

/*

 * Look up a volume by volume ID under RCU conditions.

		/* Unfortunately, rbtree walking doesn't give reliable results

		 * under just the RCU read lock, so we have to check for

		 * changes.

/*

 * allow the fileserver to explicitly break one callback

 * - happens when

 *   - the backing file is changed

 *   - a lock is released

 The callback break applies to an entire volume. */

	/* See if we can find a matching inode - even an I_NEW inode needs to

	 * be marked as it can have its callback broken before we finish

	 * setting up the local inode.

	/* TODO: Find all matching volumes if we couldn't match the server and

	 * break them anyway.

/*

 * allow the fileserver to break callback promises

 SPDX-License-Identifier: GPL-2.0-or-later

/* Fileserver-directed operation handling.

 *

 * Copyright (C) 2020 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * Create an operation against a volume.

/*

 * Lock the vnode(s) being operated upon.

/*

 * Begin an operation on the fileserver.

 *

 * Fileserver operations are serialised on the server by vnode, so we serialise

 * them here also using the io_lock.

/*

 * Tidy up a filesystem cursor and unlock the vnode.

/*

 * Wait for an in-progress operation to complete.

/*

 * Dispose of an operation.

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS cell alias detection

 *

 * Copyright (C) 2020 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * Sample a volume.

 Explicitly leave it to the VLDB */

 This might need to be something */

/*

 * Compare two addresses.

/*

 * Compare the address lists of a pair of fileservers.

/*

 * Compare the fileserver lists of two volumes.  The server lists are sorted in

 * order of ascending UUID.

/*

 * Compare root.cell volumes.

 Ignore cells that don't have a root.cell volume. */

/*

 * Query the new cell for a volume from a cell we're already using.

 Arbitrarily pick a volume from the list. */

 And see if it's in the new cell. */

 That volume is not in the new cell, so not an alias */

	/* The new cell has a like-named volume also - compare volume ID,

	 * server and address lists.

/*

 * Query the new cell for volumes we know exist in cells we're already using.

 Ignore cells that have a root.cell volume. */

 Transfer our ref */

/*

 * Look up a VLDB record for a volume.

 Transfer our ref */

 Try and get the root.cell volume for comparison with other cells */

	/* Okay, this cell doesn't have an root.cell volume.  We need to

	 * locate some other random volume and use that to check.

/*

 * Check to see if a new cell is an alias of a cell we already have.  At this

 * point we have the cell's volume server list.

 *

 * Returns 0 if we didn't detect an alias, 1 if we found an alias and an error

 * if we had problems gathering the data required.  In the case the we did

 * detect an alias, cell->alias_of is set to point to the assumed master.

 SPDX-License-Identifier: GPL-2.0-or-later

/* dir.c: AFS filesystem directory handling

 *

 * Copyright (C) 2002, 2018 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

 This should never happen. */

/*

 * Drop the refs that we're holding on the folios we were reading into.  We've

 * got refs on the first nr_pages pages.

/*

 * check that a directory folio is valid

	/* Determine how many magic numbers there should be in this folio, but

	 * we must take care because the directory may change size under us.

		/* Make sure each block is NUL terminated so we can reasonably

		 * use string functions on it.  The filenames in the folio

		 * *should* be NUL-terminated anyway.

/*

 * Dump the contents of a directory.

/*

 * Check all the blocks in a directory.  All the folios are held pinned.

/*

 * open an AFS directory file

/*

 * Read the directory into the pagecache in one go, scrubbing the previous

 * contents.  The list of folios is returned, pinning them so that they don't

 * get reclaimed during the iteration.

 May change */

 We can ask for more than there is */

 May change */

	/* Fill in any gaps that we might find where the memory reclaimer has

	 * been at work and pin all the folios.  If there are any gaps, we will

	 * need to reread the entire directory contents.

	/* If we're going to reload, we need to lock all the pages to prevent

	 * races.

			/* The content has grown, so we need to expand the

			 * buffer.

 Validate the data we just read. */

 TODO: Trim excess pages

/*

 * deal with one block in an AFS directory

 walk through the block, an entry at a time */

 skip entries marked unused in the bitmap */

 got a valid entry */

 Check that the name-extension dirents are all allocated */

 skip if starts before the current position */

 found the next entry */

/*

 * iterate through the data blob that lists the contents of an AFS directory

 round the file position up to the next entry boundary */

 walk through the blocks in sequence */

		/* Fetch the appropriate folio from the directory and re-add it

		 * to the LRU.  We have all the pages pinned with an extra ref.

/*

 * read an AFS directory

/*

 * Search the directory for a single name

 * - if afs_dir_iterate_block() spots this function, it'll pass the FID

 *   uniquifier through dtype

 insanity checks first */

/*

 * Do a lookup of a single name in a directory

 * - just returns the FID the dentry name maps to if found

 search the directory */

/*

 * search the directory for a name

 * - if afs_dir_iterate_block() spots this function, it'll pass the FID

 *   uniquifier through dtype

 insanity checks first */

/*

 * Deal with the result of a successful lookup operation.  Turn all the files

 * into inodes and save the first one - which is the one we actually want.

 Assume vnode->cb_break is 0 */ +

/*

 * See if we know that the server we expect to use doesn't support

 * FS.InlineBulkStatus.

/*

 * Do a lookup in a directory.  We make use of bulk lookup to query a slew of

 * files in one go and create inodes for them.  The inode of the file we were

 * asked for is returned.

	cookie->nr_fids = 2; /* slot 0 is saved for the fid we actually want

 search the directory */

 Check to see if we already have an inode for the primary fid. */

 We do */

	/* Okay, we didn't find it.  We need to query the server - and whilst

	 * we're doing that, we're going to attempt to look up a bunch of other

	 * vnodes also.

 Need space for examining all the selected files */

			/* Find any inodes that already exist and get their

			 * callback counters.

 vnode not locked */

	/* Try FS.InlineBulkStatus first.  Abort codes for the individual

	 * lookups contained therein are stored in the reply without aborting

	 * the whole operation.

		/* We could try FS.BulkStatus next, but this aborts the entire

		 * op if any of the lookups fails - so, for the moment, revert

		 * to FS.FetchStatus for op->file[1].

/*

 * Look up an entry in a directory with @sys substitution.

 There is an ordered list of substitutes that we have to try. */

	/* We don't want to d_add() the @sys dentry here as we don't want to

	 * the cached dentry to hide changes to the sysnames list.

/*

 * look up an entry in a directory

/*

 * Check the validity of a dentry under RCU conditions.

 Check the parent directory is still valid first. */

	/* We only need to invalidate a dentry if the server's copy changed

	 * behind our back.  If we made the change, it's no problem.  Note that

	 * on a 32-bit system, we only have 32 bits in the dentry to store the

	 * version.

 Still valid */

/*

 * check that a dentry lookup hit has found a valid entry

 * - NOTE! the hit can be a negative hit too, so we can't assume we have an

 *   inode

 Hold the parent dentry so we can peer at it */

 validate the parent directory */

	/* We only need to invalidate a dentry if the server's copy changed

	 * behind our back.  If we made the change, it's no problem.  Note that

	 * on a 32-bit system, we only have 32 bits in the dentry to store the

	 * version.

 search the directory for this vnode */

 the filename maps to something */

		/* if the vnode ID has changed, then the dirent points to a

		/* if the vnode ID uniqifier has changed, then the file has

		 * been deleted and replaced, and the original vnode ID has

 the filename is unknown */

/*

 * allow the VFS to enquire as to whether a dentry should be unhashed (mustn't

 * sleep)

 * - called from dput() when d_count is going to 0.

 * - return 1 to request dentry be unhashed, 0 otherwise

/*

 * Clean up sillyrename files on dentry removal.

/*

 * handle dentry release

/*

 * Create a new inode for create/mkdir/symlink

		/* ENOMEM or EINTR at a really inconvenient time - just abandon

		 * the new directory on the server.

/*

 * create a directory on an AFS filesystem

/*

 * Remove a subdir from a directory.

/*

 * remove a directory from an AFS filesystem

 Try to make sure we have a callback promise on the victim. */

/*

 * Remove a link to a file or symlink from a directory.

 *

 * If the file was not deleted due to excess hard links, the fileserver will

 * break the callback promise on the file - if it had one - before it returns

 * to us, and if it was deleted, it won't

 *

 * However, if we didn't have a callback promise outstanding, or it was

 * outstanding on a different server, then it won't break it either...

 Already done */

/*

 * Remove a file or symlink from an AFS filesystem.

 Try to make sure we have a callback promise on the victim. */

 Start asynchronous writeout of the inode */

 Prevent a race with RCU lookup. */

	/* If there was a conflict with a third party, check the status of the

	 * unlinked vnode.

/*

 * create a regular file on an AFS filesystem

/*

 * create a hard link between files in an AFS filesystem

/*

 * create a symlink in an AFS filesystem

	/* Now we can update d_fsdata on the dentries to reflect their

	 * new parent's data_version.

	 *

	 * Note that if we ever implement RENAME_EXCHANGE, we'll have

	 * to update both dentries with opposing dir versions.

/*

 * rename a file in an AFS filesystem and/or move it between directories

 Don't allow silly-rename files be moved around. */

 May be same as orig_dvnode */

	/* For non-directories, check whether the target is busy and if so,

	 * make a copy of the dentry and then do a silly-rename.  If the

	 * silly-rename succeeds, the copied dentry is hashed and becomes the

	 * new target.

		/* To prevent any new references to the target during the

		 * rename, we unhash the dentry in advance.

 copy the target dentry's name */

	/* This bit is potentially nasty as there's a potential race with

	 * afs_d_revalidate{,_rcu}().  We have to change d_fsdata on the dentry

	 * to reflect it's new parent's new data_version after the op, but

	 * d_revalidate may see old_dentry between the op having taken place

	 * and the version being updated.

	 *

	 * So drop the old_dentry for now to make other threads go through

	 * lookup instead - which we hold a lock against.

/*

 * Release a directory folio and clean up its private state if it's not busy

 * - return true if the folio can now be released, false if not

 The directory will need reloading. */

/*

 * Invalidate part or all of a folio.

 The directory will need reloading. */

 we clean up only if the entire folio is being invalidated */

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS fileserver probing

 *

 * Copyright (C) 2018, 2020 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * Start the probe polling timer.  We have to supply it with an inc on the

 * outstanding server count.

/*

 * Handle the completion of a set of probes.

/*

 * Handle the completion of a probe.

/*

 * Handle inability to send a probe due to ENOMEM when trying to allocate a

 * call struct.

/*

 * Process the result of probing a fileserver.  This is called after successful

 * or failed delivery of an FS.GetCapabilities operation.

 Responded, but call expired. */

 Set rtt before responded. */

/*

 * Probe one or all of a fileserver's addresses to find out the best route and

 * to query its capabilities.

/*

 * Wait for the first as-yet untried fileserver to respond.

 Only wait for servers that have a probe outstanding. */

/*

 * Probe timer.  We have an increment on fs_outstanding that we need to pass

 * along to the work item.

/*

 * Dispatch a probe to a server.

	/* We remove it from the queues here - it will be added back to

	 * one of the queues on the completion of the probe.

/*

 * Probe a server immediately without waiting for its due time to come

 * round.  This is used when all of the addresses have been tried.

/*

 * Probe dispatcher to regularly dispatch probes to keep NAT alive.

/*

 * Wait for a probe on a particular fileserver to complete for 2s.

/*

 * Clean up the probing when the namespace is killed off.

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS security handling

 *

 * Copyright (C) 2007, 2017 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * get a key

 act as anonymous user */

 act as authorised user */

/*

 * Get a key when pathwalk is in rcuwalk mode.

 act as anonymous user */

 act as authorised user */

/*

 * Dispose of a list of permits.

/*

 * Discard a permission cache.

/*

 * Clear a permit cache on callback break.

/*

 * Hash a list of permits.  Use simple addition to make it easy to add an extra

 * one at an as-yet indeterminate position in the list.

/*

 * Cache the CallerAccess result obtained from doing a fileserver operation

 * that returned a vnode status for a particular key.  If a callback break

 * occurs whilst the operation was in progress then we have to ditch the cache

 * as the ACL *may* have changed.

	/* Check for the common case first: We got back the same access as last

	 * time we tried and already have it recorded.

 The cache is still good. */

		/* If this set of permits is now wrong, clear the permits

		 * pointer so that no one tries to use the stale information.

	/* We need a ref on any permits list we want to copy as we'll have to

	 * drop the lock to do memory allocation.

	/* Speculatively create a new list with the revised permission set.  We

	 * discard this if we find an extant match already in the hash, but

	 * it's easier to compare with memcmp this way.

	 *

	 * We fill in the key pointers at this time, but we don't get the refs

	 * yet.

 Now see if the permit list we want is actually already available */

	/* Someone else changed the cache under us - don't recheck at this

	 * time.

 check the permits to see if we've got one yet */

/*

 * check with the fileserver to see if the directory or parent directory is

 * permitted to be accessed with this authorisation, and if so, what access it

 * is granted

 check the permits to see if we've got one yet */

		/* Check the status on the file we're actually interested in

		 * (the post-processing will cache the result).

/*

 * check the permissions on an AFS file

 * - AFS ACLs are attached to directories only, and a file is controlled by its

 *   parent directory's ACL

 check the permits to see if we've got one yet */

 interpret the access mask */

 rmdir, unlink, rename from */

 create, mkdir, symlink, rename to */

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS Volume Location Service client

 *

 * Copyright (C) 2002 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * Deliver reply data to a VL.GetEntryByNameU call.

 unmarshall the reply once we've received all of it */

	/* If there is a new replication site that we can use, ignore all the

	 * sites that aren't marked as new.

/*

 * VL.GetEntryByNameU operation type.

/*

 * Dispatch a get volume entry by name or ID operation (uuid variant).  If the

 * volname is a decimal number then it's a volume ID not a volume name.

 Marshall the parameters */

/*

 * Deliver reply data to a VL.GetAddrsU call.

 *

 *	GetAddrsU(IN ListAddrByAttributes *inaddr,

 *		  OUT afsUUID *uuidp1,

 *		  OUT uint32_t *uniquifier,

 *		  OUT uint32_t *nentries,

 *		  OUT bulkaddrs *blkaddrs);

		/* Extract the returned uuid, uniquifier, nentries and

 and extract entries */

/*

 * VL.GetAddrsU operation type.

/*

 * Dispatch an operation to get the addresses for a server, where the server is

 * nominated by UUID.

 Marshall the parameters */

/*

 * Deliver reply data to an VL.GetCapabilities operation.

 and extract the capabilities word count */

 and extract capabilities words */

 TODO: Examine capabilities */

/*

 * VL.GetCapabilities operation type

/*

 * Probe a volume server for the capabilities that it supports.  This can

 * return up to 196 words.

 *

 * We use this to probe for service upgrade to determine what the server at the

 * other end supports.

 marshall the parameters */

 Can't take a ref on server */

/*

 * Deliver reply data to a YFSVL.GetEndpoints call.

 *

 *	GetEndpoints(IN yfsServerAttributes *attr,

 *		     OUT opr_uuid *uuid,

 *		     OUT afs_int32 *uniquifier,

 *		     OUT endpoints *fsEndpoints,

 *		     OUT endpoints *volEndpoints)

		/* Extract the returned uuid, uniquifier, fsEndpoints count and

		 * either the first fsEndpoint type or the volEndpoints

 Type or next count */

 and extract fsEndpoints[] entries */

		/* Got either the type of the next entry or the count of

		 * volEndpoints if no more fsEndpoints.

 Extract the list of volEndpoints. */

		/* Extract the type of volEndpoints[0].  Normally we would

		 * extract the type of the next endpoint when we extract the

		 * data of the current one, but this is the first...

 Get next type too */

 and extract volEndpoints[] entries */

		/* Got either the type of the next entry or the count of

		 * volEndpoints if no more fsEndpoints.

 Done */

/*

 * YFSVL.GetEndpoints operation type.

/*

 * Dispatch an operation to get the addresses for a server, where the server is

 * nominated by UUID.

 Marshall the parameters */

 Type opr_uuid */

/*

 * Deliver reply data to a YFSVL.GetCellName operation.

 and extract the cell name length */

 and extract cell name */

 and extract padding */

/*

 * VL.GetCapabilities operation type

/*

 * Probe a volume server for the capabilities that it supports.  This can

 * return up to 196 words.

 *

 * We use this to probe for service upgrade to determine what the server at the

 * other end supports.

 marshall the parameters */

 Can't take a ref on server */

 SPDX-License-Identifier: GPL-2.0-or-later

/* miscellaneous bits

 *

 * Copyright (C) 2002, 2007 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * convert an AFS abort code to a Linux error number

 Low errno codes inserted into abort namespace */

 VICE "special error" codes; 101 - 111 */

 Volume Location server errors */

 Unified AFS error table */

 RXKAD abort codes; from include/rxrpc/packet.h.  ET "RXK" == 0x1260B00 */

/*

 * Select the error to report from a set of errors.

 Responded, but call expired. */

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS Cache Manager Service

 *

 * Copyright (C) 2002 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * CB.CallBack operation type

/*

 * CB.InitCallBackState operation type

/*

 * CB.InitCallBackState3 operation type

/*

 * CB.Probe operation type

/*

 * CB.ProbeUuid operation type

/*

 * CB.TellMeAboutYourself operation type

/*

 * YFS CB.CallBack operation type

/*

 * route an incoming cache manager call

 * - return T if supported, F if not

/*

 * Find the server record by peer address and record a probe to the cache

 * manager from a server.

/*

 * Find the server record by server UUID and record a probe to the cache

 * manager from a server.

/*

 * Clean up a cache manager call.

/*

 * Abort a service call from within an action function.

/*

 * The server supplied a list of callbacks that it wanted to break.

	/* We need to break the callbacks before sending the reply as the

	 * server holds up change visibility till it receives our reply so as

	 * to maintain cache coherency.

/*

 * deliver request data to a CB.CallBack call

 extract the FID array and its count in two steps */

 extract the callback array and its count in two steps */

	/* we'll need the file server record as that tells us which set of

/*

 * allow the fileserver to request callback state (re-)initialisation

/*

 * deliver request data to a CB.InitCallBackState call

	/* we'll need the file server record as that tells us which set of

/*

 * deliver request data to a CB.InitCallBackState3 call

	/* we'll need the file server record as that tells us which set of

/*

 * allow the fileserver to see if the cache manager is still alive

/*

 * deliver request data to a CB.Probe call

/*

 * Allow the fileserver to quickly find out if the cache manager has been

 * rebooted.

/*

 * deliver request data to a CB.ProbeUuid call

/*

 * allow the fileserver to ask about the cache manager's capabilities

 InterfaceAddr */ {

 Capabilities */ {

/*

 * deliver request data to a CB.TellMeAboutYourself call

/*

 * deliver request data to a YFS CB.CallBack call

 extract the FID array and its count in two steps */

	/* We'll need the file server record as that tells us which set of

	 * vnodes to operate upon.

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS vlserver probing

 *

 * Copyright (C) 2018 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * Handle the completion of a set of probes.

/*

 * Handle the completion of a probe RPC call.

/*

 * Process the result of probing a vlserver.  This is called after successful

 * or failed delivery of an VL.GetCapabilities operation.

 Responded, but call expired. */

 Set rtt before responded. */

/*

 * Probe all of a vlserver's addresses to find out the best route and to

 * query its capabilities.

/*

 * Send off probes to all unprobed servers.

/*

 * Wait for the first as-yet untried server to respond.

 Only wait for servers that have a probe outstanding. */

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS filesystem file handling

 *

 * Copyright (C) 2002, 2007 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * Discard a pin on a writeback key.

/*

 * Cache key for writeback.

/*

 * open an AFS file or directory and attach a key to it

/*

 * release an AFS file or directory and discard its key

/*

 * Allocate a new read record.

/*

 * Dispose of a ref to a read record.

/*

 * Fetch file data from the volume.

/*

 * Adjust the dirty region of the page on truncation or full invalidation,

 * getting rid of the markers altogether if the region is entirely invalidated.

 we clean up only if the entire page is being invalidated */

	 /* If the page was dirtied by page_mkwrite(), the PTE stays writable

	  * and we don't get another notification to tell us to expand it

	  * again.

 We may need to shorten the dirty region */

 Doesn't overlap */

 Splits the dirty region - just absorb it */

/*

 * invalidate part or all of a page

 * - release a page and clean up its private data if offset is 0 (indicating

 *   the entire page)

/*

 * release a page and clean up its private state if it's not busy

 * - return true if the page can now be released, false if not

	/* deny if page is being written to the cache and the caller hasn't

 Indicate that the folio can be released */

/*

 * Handle setting up a memory mapping on an AFS file.

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS server record management

 *

 * Copyright (C) 2002, 2007 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

 Server record timeout in seconds */

/*

 * Find a server by one of its addresses.

/*

 * Look up a server by its UUID and mark it active.

		/* Unfortunately, rbtree walking doesn't give reliable results

		 * under just the RCU read lock, so we have to check for

		 * changes.

/*

 * Install a server record in the namespace tree.  If there's a clash, we stick

 * it into a list anchored on whichever afs_server struct is actually in the

 * tree.

 Firstly install the server in the UUID lookup tree */

			/* We have the same UUID representing servers in

			 * different cells.  Append the new server to the list.

	/* Secondly, if the server has any IPv4 and/or IPv6 addresses, install

	 * it in the IPv4 and/or IPv6 reverse-map lists.

	 *

	 * TODO: For speed we want to use something other than a flat list

	 * here; even sorting the list in terms of lowest address would help a

	 * bit, but anything we might want to do gets messy and memory

	 * intensive.

/*

 * Allocate a new server record and mark it active.

/*

 * Look up an address record for a server

/*

 * Get or create a fileserver record.

		/* Immediately dispatch an asynchronous probe to each interface

		 * on the fileserver.  This will make sure the repeat-probing

		 * service is started.

/*

 * Set the server timer to fire after a given delay, assuming it's not already

 * set for an earlier time.

/*

 * Server management timer.  We have an increment on fs_outstanding that we

 * need to pass along to the work item.

/*

 * Get a reference on a server object.

/*

 * Try to get a reference on a server object.

/*

 * Get an active count on a server object.

/*

 * Release a reference on a server record.

/*

 * Drop an active count on a server object without updating the last-unused

 * time.

/*

 * Drop an active count on a server object.

/*

 * destroy a dead server

/*

 * Garbage collect any expired servers.

 The one at the front is in the tree */

 This server is not at the front */

/*

 * Manage the records of servers known to be within a network namespace.  This

 * includes garbage collecting unused servers.

 *

 * Note also that we were given an increment on net->servers_outstanding by

 * whoever queued us that we need to deal with before returning.

	/* Trawl the server list looking for servers that have expired from

	 * lack of use.

	/* Update the timer on the way out.  We have to pass an increment on

	 * servers_outstanding in the namespace that we are in to the timer or

	 * the work scheduler.

/*

 * Purge list of servers.

/*

 * Get an update for a server's address list.

/*

 * See if a server's address list needs updating.

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS cell and server record management

 *

 * Copyright (C) 2002, 2017 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * Set the cell timer to fire after a given delay, assuming it's not already

 * set for an earlier time.

/*

 * Look up and get an activation reference on a cell record.  The caller must

 * hold net->cells_lock at least read-locked.

/*

 * Look up and get an activation reference on a cell record.

/*

 * Set up a cell record and fill in its name, VL server address list and

 * allocate an anonymous key

	/* Prohibit cell names that contain unprintable chars, '/' and '@' or

	 * that begin with a dot.  This also precludes "@cell".

	/* Provide a VL server list, filling it in if we were given a list of

	 * addresses to use.

 vs source/status */

/*

 * afs_lookup_cell - Look up or create a cell record.

 * @net:	The network namespace

 * @name:	The name of the cell.

 * @namesz:	The strlen of the cell name.

 * @vllist:	A colon/comma separated list of numeric IP addresses or NULL.

 * @excl:	T if an error should be given if the cell name already exists.

 *

 * Look up a cell record by name and query the DNS for VL server addresses if

 * needed.  Note that that actual DNS query is punted off to the manager thread

 * so that this function can return immediately if interrupted whilst allowing

 * cell records to be shared even if not yet fully constructed.

	/* Assume we're probably going to create a cell and preallocate and

	 * mostly set up a candidate record.  We can then use this to stash the

	 * name, the net namespace and VL server addresses.

	 *

	 * We also want to do this before we hold any locks as it may involve

	 * upcalling to userspace to make DNS queries.

	/* Find the insertion point and check to see if someone else added a

	 * cell whilst we were allocating.

 vs error */

 Check the state obtained from the wait check. */

/*

 * set the root cell information

 * - can be called with a module parameter string

 * - can be called from a write to /proc/fs/afs/rootcell

		/* module is loaded with no parameters, or built statically.

		 * - in the future we might initialize cell DB here.

 allocate a cell record for the root cell */

 install the new cell */

/*

 * Update a cell's VL server address list from the DNS.

			/* The DNS said that the cell does not exist or there

			 * weren't any addresses to be had.

	/* Replace the VL server list if the new record has servers or the old

	 * record doesn't.

 vs source/status */

/*

 * Destroy a cell record

/*

 * Queue the cell manager.

/*

 * Cell management timer.  We have an increment on cells_outstanding that we

 * need to pass along to the work item.

/*

 * Get a reference on a cell record.

/*

 * Drop a reference on a cell record.

/*

 * Note a cell becoming more active.

/*

 * Record a cell becoming less active.  When the active counter reaches 1, it

 * is scheduled for destruction, but may get reactivated.

 'cell' may now be garbage collected. */

/*

 * Note that a cell has been seen.

/*

 * Queue a cell for management, giving the workqueue a ref to hold.

/*

 * Allocate a key to use as a placeholder for anonymous user security.

 Create a key to represent an anonymous user. */

/*

 * Activate a cell.

/*

 * Deactivate a cell.

/*

 * Manage a cell record, initialising and destroying it, maintaining its DNS

 * records.

 Unhandled state */

 vs error */

 The root volume is pinning the cell */

/*

 * Manage the records of cells known to a network namespace.  This includes

 * updating the DNS records and garbage collecting unused cells that were

 * automatically added.

 *

 * Note that constructed cell records may only be removed from net->cells by

 * this work item, so it is safe for this work item to stash a cursor pointing

 * into the tree and then return to caller (provided it skips cells that are

 * still under construction).

 *

 * Note also that we were given an increment on net->cells_outstanding by

 * whoever queued us that we need to deal with before returning.

	/* Trawl the cell database looking for cells that have expired from

	 * lack of use and cells whose DNS results have expired and dispatch

	 * their managers.

	/* Update the timer on the way out.  We have to pass an increment on

	 * cells_outstanding in the namespace that we are in to the timer or

	 * the work scheduler.

/*

 * Purge in-memory cell database.

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS caching stuff

 *

 * Copyright (C) 2008 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * check that the auxiliary data indicates that the entry is still valid

 check the size of the data is what we're expecting */

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS vlserver list management.

 *

 * Copyright (C) 2018 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

_debug("VL PUT %p{%u}", vlserver, u);

_debug("VLLS PUT %p{%u}", vllist, u);

/*

 * Build a VL server address list from a DNS queried server list.

 Start with IPv6 if available. */

/*

 * Build a VL server list from a DNS queried server list.

 Check that it's a server list, v1 */

 See if we can update an old server record */

		/* Extract the addresses - note that we can't skip this as we

		 * have to advance the payload pointer.

 TODO: Might want to check for duplicates */

 Insertion-sort by priority and weight */

 Lower preferable */

 Higher preferable */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Handle vlserver selection and rotation.

 *

 * Copyright (C) 2018 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * Begin an operation on a volume location server.

/*

 * Begin iteration through a server list, starting with the last used server if

 * possible, or the last recorded good server if not.

 Status load is ordered after lookup counter load */

/*

 * Select the vlserver to use.  May be called multiple times to rotate

 * through the vlservers.

 Evaluate the result of the previous operation, if there was one. */

 Success or local failure.  Stop. */

		/* The far side rejected the operation on some grounds.  This

		 * might involve the server being busy or the volume having been moved.

 The server went weird. */

write_lock(&vc->cell->vl_servers_lock);

vc->server_list->weird_mask |= 1 << vc->index;

write_unlock(&vc->cell->vl_servers_lock);

 Pick the untried server with the lowest RTT. */

	/* We're starting on a different vlserver from the list.  We need to

	 * check it, find its address list and probe its capabilities before we

	 * use it.

	/* Iterate over the current server's address list to try and find an

	 * address on which it will respond to us.

	/* That's all the servers poked to no good effect.  Try again if some

	 * of them were busy.

/*

 * Dump cursor state in the case of the error being EDESTADDRREQ.

/*

 * Tidy up a volume location server cursor and unlock the vnode.

 SPDX-License-Identifier: GPL-2.0-or-later

/* /proc interface for AFS

 *

 * Copyright (C) 2002 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

 Must be first */

/*

 * Display the list of cells known to the namespace.

 display header on line 1 */

 display one cell per line on subsequent lines */

/*

 * handle writes to /proc/fs/afs/cells

 * - to add cells: echo "add <cellname> <IP>[:<IP>][:<IP>]"

 trim to first NL */

 split into command, name and argslist */

 determine command to perform */

/*

 * Display the name of the current workstation cell.

/*

 * Set the current workstation cell and optionally supply its list of volume

 * location servers.

 *

 *	echo "cell.name:192.168.231.14" >/proc/fs/afs/rootcell

 trim to first NL */

 determine command to perform */

/*

 * Display the list of volumes known to a cell.

 Display header on line 1 */

/*

 * Display the list of Volume Location servers we're using for a cell.

/*

 * Display the list of fileservers we're using within a namespace.

/*

 * Display the list of strings that may be substituted for the @sys pathname

 * macro.

/*

 * Allow the @sys substitution to be configured.

 Protect against recursion */

/*

 * Display general per-net namespace statistics

/*

 * initialise /proc/fs/afs/<cell>/

/*

 * remove /proc/fs/afs/<cell>/

/*

 * initialise the /proc/fs/afs/ directory

/*

 * clean up the /proc/fs/afs/ directory

 SPDX-License-Identifier: GPL-2.0-or-later

/* mountpoint management

 *

 * Copyright (C) 2002 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * no valid lookup procedure on this sort of dir

/*

 * no valid open procedure on this sort of dir

/*

 * Set the parameters for the proposed superblock.

 if the directory is a pseudo directory, use the d_name */

 read the contents of the AFS special symlink */

/*

 * create a vfsmount to be automounted

/*

 * handle an automount point

 prevent immediate expiration */

/*

 * handle mountpoint expiry timer going off

/*

 * kill the AFS mountpoint timer if it's still running

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS volume management

 *

 * Copyright (C) 2002, 2007 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * Insert a volume into a cell.  If there's an existing volume record, that is

 * returned instead with a ref held.

/*

 * Allocate a volume record and load it up from a vldb record.

/*

 * Look up or allocate a volume record.

/*

 * Look up a VLDB record for a volume.

/*

 * Look up a volume in the VL server and create a candidate volume record for

 * it.

 *

 * The volume name can be one of the following:

 *	"%[cell:]volume[.]"		R/W volume

 *	"#[cell:]volume[.]"		R/O or R/W volume (rwparent=0),

 *					 or R/W (rwparent=1) volume

 *	"%[cell:]volume.readonly"	R/O volume

 *	"#[cell:]volume.readonly"	R/O volume

 *	"%[cell:]volume.backup"		Backup volume

 *	"#[cell:]volume.backup"		Backup volume

 *

 * The cell name is optional, and defaults to the current cell.

 *

 * See "The Rules of Mount Point Traversal" in Chapter 5 of the AFS SysAdmin

 * Guide

 * - Rule 1: Explicit type suffix forces access of that type or nothing

 *           (no suffix, then use Rule 2 & 3)

 * - Rule 2: If parent volume is R/O, then mount R/O volume by preference, R/W

 *           if not available

 * - Rule 3: If parent volume is R/W, then only mount R/W volume unless

 *           explicitly told otherwise

 Make the final decision on the type we want */

/*

 * Destroy a volume record

/*

 * Get a reference on a volume record.

/*

 * Drop a reference on a volume record.

/*

 * Activate a volume.

/*

 * Deactivate a volume.

/*

 * Query the VL service to update the volume status.

	/* We look up an ID by passing it as a decimal string in the

	 * operation's name parameter.

 See if the volume got renamed. */

 TODO: Use RCU'd string. */

 See if the volume's server list got updated. */

/*

 * Make sure the volume record is up to date.

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS file locking support

 *

 * Copyright (C) 2007 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * if the callback is broken on this vnode, then the lock may now be available

/*

 * the lock will time out in 5 minutes unless we extend it, so schedule

 * extension in a bit less than that time

/*

 * In the case of successful completion of a lock operation, record the time

 * the reply appeared and start the lock extension timer.

/*

 * grant one or more locks (readlocks are allowed to jump the queue if the

 * first lock in the queue is itself a readlock)

 * - the caller must hold the vnode lock

/*

 * If an error is specified, reject every pending lock that matches the

 * authentication and type of the lock we failed to get.  If there are any

 * remaining lockers, try to wake up one of them to have a go.

 Select the next locker to hand off to. */

/*

 * Kill off all waiters in the the pending lock queue due to the vnode being

 * deleted.

/*

 * Get a lock on a file

/*

 * Extend a lock on a file

/*

 * Release a lock on a file

/*

 * do work for a lock, including:

 * - probing for a lock we're waiting on but didn't get immediately

 * - extending a lock that's close to timing out

		/* attempt to release the server lock; if it fails, we just

	/* If we've already got a lock, then it must be time to extend that

	 * lock as AFS locks time out after 5 minutes.

 RPC */

	/* If we're waiting for a callback to indicate lock release, we can't

	 * actually rely on this, so need to recheck at regular intervals.  The

	 * problem is that the server might not notify us if the lock just

	 * expires (say because a client died) rather than being explicitly

	 * released.

 Looks like a lock request was withdrawn. */

/*

 * pass responsibility for the unlocking of a vnode on the server to the

 * manager thread, lest a pending signal in the calling thread interrupt

 * AF_RXRPC

 * - the caller must hold the vnode lock

/*

 * Check that our view of the file metadata is up to date and check to see

 * whether we think that we have a locking permit.

	/* Make sure we've got a callback on this file and that our view of the

	 * data version is up to date.

	/* Check the permission set to see if we're actually going to be

	 * allowed to get a lock on this file.

	/* At a rough estimation, you need LOCK, WRITE or INSERT perm to

	 * read-lock a file and WRITE or INSERT perm to write-lock a file.

	 *

	 * We can't rely on the server to do this for us since if we want to

	 * share a read lock that we already have, we won't go the server.

/*

 * request a lock on a file on the server

	/* AFS3 protocol only supports full-file locks and doesn't provide any

	 * method of upgrade/downgrade, so we need to emulate for partial-file

	 * locks.

	 *

	 * The OpenAFS client only gets a server lock for a full-file lock and

	 * keeps partial-file locks local.  Allow this behaviour to be emulated

	 * (as the default).

	/* If we've already got a lock on the server then try to move to having

	 * the VFS grant the requested lock.  Note that this means that other

	 * clients may get starved out.

 Write locked */

 Locked */

	/* We don't have a lock on this vnode and we aren't currently waiting

	 * for one either, so ask the server for a lock.

	 *

	 * Note that we need to be careful if we get interrupted by a signal

	 * after dispatching the request as we may still get the lock, even

	 * though we don't wait for the reply (it's not too bad a problem - the

	 * lock will expire in 5 mins anyway).

 RPC */

		/* The server doesn't have a lock-waiting queue, so the client

		 * will have to retry.  The server will break the outstanding

		 * callbacks on a file when a lock is released.

 the lock has been granted by the server... */

 ... but the VFS still needs to distribute access on this client. */

	/* Again, make sure we've got a callback on this file and, again, make

	 * sure that our view of the data version is up to date (we ignore

	 * errors incurred here and deal with the consequences elsewhere).

	/* We're going to have to wait.  Either this client doesn't have a lock

	 * on the server yet and we need to wait for a callback to occur, or

	 * the client does have a lock on the server, but it's shared and we

	 * need an exclusive lock.

				/* We need to retry the lock.  We may not be

				 * notified by the server if it just expired

				 * rather than being released.

	/* The VFS rejected the lock we just obtained, so we have to discard

	 * what we just got.  We defer this to the lock manager work item to

	 * deal with.

/*

 * unlock on a file on the server

 Flush all pending writes before doing anything with locks. */

/*

 * return information about a lock we currently hold, if indeed we hold one

 check local lock records first */

 no local locks; consult the server */

/*

 * manage POSIX locks on a file

/*

 * manage FLOCK locks on a file

	/*

	 * No BSD flocks over NFS allowed.

	 * Note: we could try to fake a POSIX lock request here by

	 * using ((u32) filp | 0x80000000) or some such as the pid.

	 * Not sure whether that would be unique, though, or whether

	 * that would break in other places.

 we're simulating flock() locks using posix locks on the server */

/*

 * the POSIX lock management core VFS code copies the lock record and adds the

 * copy into its own list, so we need to add that copy to the vnode's lock

 * queue in the same place as the original (which will be deleted shortly

 * after)

/*

 * need to remove this lock from the vnode queue when it's removed from the

 * VFS's list

 SPDX-License-Identifier: GPL-2.0-or-later

/* YFS File Server client stubs

 *

 * Copyright (C) 2018 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

 Convert to 100ns intervals. */

/*

 * Convert a signed 100ns-resolution 64-bit time into a timespec.

	/*

	 * Unfortunately can not use normal 64 bit division on 32 bit arch, but

	 * the alternative, do_div, does not work with negative numbers so have

	 * to special case them

/*

 * Dump a bad file status record.

/*

 * Decode a YFSFetchStatus block

 Ticket dependent */

/*

 * Decode a YFSCallBack block

/*

 * Decode a YFSVolSync block

/*

 * Encode the requested attributes into a YFSStoreStatus block

/*

 * Decode a YFSFetchVolumeStatus block.

/*

 * Deliver reply data to operations that just return a file status and a volume

 * sync record.

/*

 * Deliver reply data to an YFS.FetchData64.

		/* Extract the returned data length into ->actual_len.  This

		 * may indicate more or less data than was requested will be

		 * returned.

 extract the returned data */

 Discard any excess data the server gave us */

 extract the metadata */

/*

 * YFS.FetchData64 operation type

/*

 * Fetch data from a file.

 marshall the parameters */

 RPC flags */

/*

 * Deliver reply data for YFS.CreateFile or YFS.MakeDir.

 unmarshall the reply once we've received all of it */

/*

 * FS.CreateFile and FS.MakeDir operation type

/*

 * Create a file.

 marshall the parameters */

 RPC flags */

 ViceLockType */

/*

 * Make a directory.

 marshall the parameters */

 RPC flags */

/*

 * Deliver reply data to a YFS.RemoveFile2 operation.

 Was deleted if vnode->status.abort_code == VNOVNODE. */

/*

 * YFS.RemoveFile2 operation type.

/*

 * Remove a file and retrieve new file status.

 marshall the parameters */

 RPC flags */

/*

 * Deliver reply data to a YFS.RemoveFile or YFS.RemoveDir operation.

/*

 * FS.RemoveDir and FS.RemoveFile operation types.

/*

 * Remove a file.

 marshall the parameters */

 RPC flags */

/*

 * Remove a directory.

 marshall the parameters */

 RPC flags */

/*

 * Deliver reply data to a YFS.Link operation.

/*

 * YFS.Link operation type.

/*

 * Make a hard link.

 marshall the parameters */

 RPC flags */

/*

 * Deliver reply data to a YFS.Symlink operation.

 unmarshall the reply once we've received all of it */

/*

 * YFS.Symlink operation type

/*

 * Create a symbolic link.

 marshall the parameters */

 RPC flags */

/*

 * Deliver reply data to a YFS.Rename operation.

	/* If the two dirs are the same, we have two copies of the same status

	 * report, so we just decode it twice.

/*

 * YFS.Rename operation type

/*

 * Rename a file or directory.

 marshall the parameters */

 RPC flags */

/*

 * YFS.StoreData64 operation type.

/*

 * Store a set of pages to a large file.

 marshall the parameters */

 RPC flags */

/*

 * YFS.StoreStatus operation type

/*

 * Set the attributes on a file, using YFS.StoreData64 rather than

 * YFS.StoreStatus so as to alter the file size also.

 marshall the parameters */

 RPC flags */

 position of start of write */

 size of write */

 new file length */

/*

 * Set the attributes on a file, using YFS.StoreData64 if there's a change in

 * file size, and YFS.StoreStatus otherwise.

 marshall the parameters */

 RPC flags */

/*

 * Deliver reply data to a YFS.GetVolumeStatus operation.

 extract the returned status record */

 extract the volume name length */

 It's padded */

 extract the volume name */

 extract the offline message length */

 It's padded */

 extract the offline message */

 extract the message of the day length */

 It's padded */

 extract the message of the day */

/*

 * YFS.GetVolumeStatus operation type

/*

 * fetch the status of a volume

 marshall the parameters */

 RPC flags */

/*

 * YFS.SetLock operation type

/*

 * YFS.ExtendLock operation type

/*

 * YFS.ReleaseLock operation type

/*

 * Set a lock on a file

 marshall the parameters */

 RPC flags */

/*

 * extend a lock on a file

 marshall the parameters */

 RPC flags */

/*

 * release a lock on a file

 marshall the parameters */

 RPC flags */

/*

 * Deliver a reply to YFS.FetchStatus

 unmarshall the reply once we've received all of it */

/*

 * YFS.FetchStatus operation type

/*

 * Fetch the status information for a fid without needing a vnode handle.

 marshall the parameters */

 RPC flags */

/*

 * Deliver reply data to an YFS.InlineBulkStatus call

 Extract the file status count and array in two steps */

 Extract the callback count and array in two steps */

/*

 * FS.InlineBulkStatus operation type

/*

 * Fetch the status information for up to 1024 files

 marshall the parameters */

 RPCFlags */

/*

 * Deliver reply data to an YFS.FetchOpaqueACL.

 Extract the file ACL length */

 Extract the file ACL */

 Extract the volume ACL length */

 Extract the volume ACL */

 extract the metadata */

/*

 * YFS.FetchOpaqueACL operation type

/*

 * Fetch the YFS advanced ACLs for a file.

 marshall the parameters */

 RPC flags */

/*

 * YFS.StoreOpaqueACL2 operation type

/*

 * Fetch the YFS ACL for a file.

 marshall the parameters */

 RPC flags */

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS fileserver list management.

 *

 * Copyright (C) 2017 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * Build a server list from a VLDB record.

 Make sure a records exists for each server in the list. */

 Insertion-sort by UUID */

/*

 * Copy the annotations from an old server list to its potential replacement.

 Maintain the same preferred server as before if possible. */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Server address list management

 *

 * Copyright (C) 2017 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * Release an address list.

/*

 * Allocate an address list.

/*

 * Parse a text string consisting of delimited addresses.

 Count the addresses */

 Extract the addresses */

 Port number specification "+1234" */

/*

 * Compare old and new address lists to see if there's been any change.

 * - How to do this in better than O(Nlog(N)) time?

 *   - We don't really want to sort the address list, but would rather take the

 *     list as we got it so as not to undo record rotation by the DNS server.

/*

 * Perform a DNS query for VL servers and build a up an address list.

/*

 * Merge an IPv4 entry into a fileserver address list.

/*

 * Merge an IPv6 entry into a fileserver address list.

/*

 * Get an address to try.

/*

 * Release an address list cursor.

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS dynamic root handling

 *

 * Copyright (C) 2018 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * iget5() comparator for inode created by autocell operations

 *

 * These pseudo inodes don't match anything.

/*

 * iget5() inode initialiser

/*

 * Create an inode for a dynamic root directory or an autocell dynamic

 * automount dir.

 there shouldn't be an existing inode */

/*

 * Probe to see if a cell may exist.  This prevents positive dentries from

 * being created unnecessarily.

 Names prefixed with a dot are R/W mounts. */

/*

 * Try to auto mount the mountpoint with pseudo directory, if the autocell

 * operation is setted.

/*

 * Look up @cell in a dynroot directory.  This is a substitution for the

 * local cell name for the net namespace.

	/* We don't want to d_add() the @cell dentry here as we don't want to

	 * the cached dentry to hide changes to the local cell name.

/*

 * Look up an entry in a dynroot directory.

/*

 * Dirs in the dynamic root don't need revalidation.

/*

 * Allow the VFS to enquire as to whether a dentry should be unhashed (mustn't

 * sleep)

 * - called from dput() when d_count is going to 0.

 * - return 1 to request dentry be unhashed, 0 otherwise

/*

 * Create a manually added cell mount directory.

 * - The caller must hold net->proc_cells_lock

 Let the ->lookup op do the creation */

 Note that we're retaining an extra ref on the dentry */

/*

 * Remove a manually added cell mount directory.

 * - The caller must hold net->proc_cells_lock

 Don't want to trigger a lookup call, which will re-add the cell */

/*

 * Populate a newly created dynamic root with cell names.

/*

 * When a dynamic root that's in the process of being destroyed, depopulate it

 * of pinned directories.

 Prevent more subdirs from being created */

 Remove all the pins for dirs created for manually added cells */

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS File Server client stubs

 *

 * Copyright (C) 2002, 2007 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * decode an AFSFid block

/*

 * Dump a bad file status record.

/*

 * decode an AFSFetchStatus block

			/* The OpenAFS fileserver has a bug in FS.InlineBulkStatus

			 * whereby it doesn't set the interface version in the error

			 * case.

 Ticket dependent */

 version */

 type */

/*

 * decode an AFSVolSync block

 spare2 */

 spare3 */

 spare4 */

 spare5 */

 spare6 */

/*

 * encode the requested attributes into an AFSStoreStatus block

 segment size */

/*

 * decode an AFSFetchVolumeStatus block

/*

 * deliver reply data to an FS.FetchStatus

 unmarshall the reply once we've received all of it */

/*

 * FS.FetchStatus operation type

/*

 * fetch the status information for a file

 marshall the parameters */

/*

 * deliver reply data to an FS.FetchData

		/* Extract the returned data length into

		 * ->actual_len.  This may indicate more or less data than was

		 * requested will be returned.

 extract the returned data */

 Discard any excess data the server gave us */

 extract the metadata */

/*

 * FS.FetchData operation type

/*

 * fetch data from a very large file

 marshall the parameters */

/*

 * fetch data from a file

 marshall the parameters */

/*

 * deliver reply data to an FS.CreateFile or an FS.MakeDir

 unmarshall the reply once we've received all of it */

/*

 * FS.CreateFile and FS.MakeDir operation type

/*

 * Create a file.

 marshall the parameters */

 mtime */

 owner */

 group */

 unix mode */

 segment size */

/*

 * Create a new directory

 marshall the parameters */

 mtime */

 owner */

 group */

 unix mode */

 segment size */

/*

 * Deliver reply data to any operation that returns status and volume sync.

 unmarshall the reply once we've received all of it */

/*

 * FS.RemoveFile operation type

/*

 * Remove a file.

 marshall the parameters */

/*

 * Remove a directory.

 marshall the parameters */

/*

 * deliver reply data to an FS.Link

 unmarshall the reply once we've received all of it */

/*

 * FS.Link operation type

/*

 * make a hard link

 marshall the parameters */

/*

 * deliver reply data to an FS.Symlink

 unmarshall the reply once we've received all of it */

/*

 * FS.Symlink operation type

/*

 * create a symbolic link

 marshall the parameters */

 mtime */

 owner */

 group */

 unix mode */

 segment size */

/*

 * deliver reply data to an FS.Rename

	/* If the two dirs are the same, we have two copies of the same status

	 * report, so we just decode it twice.

/*

 * FS.Rename operation type

/*

 * Rename/move a file or directory.

 marshall the parameters */

/*

 * Deliver reply data to FS.StoreData or FS.StoreStatus

 unmarshall the reply once we've received all of it */

/*

 * FS.StoreData operation type

/*

 * store a set of pages to a very large file

 marshall the parameters */

 mask */

 mtime */

 owner */

 group */

 unix mode */

 segment size */

/*

 * Write data to a file on the server.

 marshall the parameters */

 mask */

 mtime */

 owner */

 group */

 unix mode */

 segment size */

/*

 * FS.StoreStatus operation type

/*

 * set the attributes on a very large file, using FS.StoreData rather than

 * FS.StoreStatus so as to alter the file size also

 marshall the parameters */

 position of start of write */

 size of write */

 new file length */

/*

 * set the attributes on a file, using FS.StoreData rather than FS.StoreStatus

 * so as to alter the file size also

 marshall the parameters */

 position of start of write */

 size of write */

 new file length */

/*

 * set the attributes on a file, using FS.StoreData if there's a change in file

 * size, and FS.StoreStatus otherwise

 marshall the parameters */

/*

 * deliver reply data to an FS.GetVolumeStatus

 extract the returned status record */

 extract the volume name length */

 It's padded */

 extract the volume name */

 extract the offline message length */

 It's padded */

 extract the offline message */

 extract the message of the day length */

 It's padded */

 extract the message of the day */

/*

 * FS.GetVolumeStatus operation type

/*

 * fetch the status of a volume

 marshall the parameters */

/*

 * deliver reply data to an FS.SetLock, FS.ExtendLock or FS.ReleaseLock

 unmarshall the reply once we've received all of it */

/*

 * FS.SetLock operation type

/*

 * FS.ExtendLock operation type

/*

 * FS.ReleaseLock operation type

/*

 * Set a lock on a file

 marshall the parameters */

/*

 * extend a lock on a file

 marshall the parameters */

/*

 * release a lock on a file

 marshall the parameters */

/*

 * Deliver reply data to an FS.GiveUpAllCallBacks operation.

/*

 * FS.GiveUpAllCallBacks operation type

/*

 * Flush all the callbacks we have on a server.

 marshall the parameters */

/*

 * Deliver reply data to an FS.GetCapabilities operation.

 Extract the capabilities word count */

 Extract the first word of the capabilities to call->tmp */

 Extract remaining capabilities words */

/*

 * FS.GetCapabilities operation type

/*

 * Probe a fileserver for the capabilities that it supports.  This RPC can

 * reply with up to 196 words.  The operation is asynchronous and if we managed

 * to allocate a call, true is returned the result is delivered through the

 * ->done() - otherwise we return false to indicate we didn't even try.

 marshall the parameters */

/*

 * Deliver reply data to an FS.InlineBulkStatus call

 Extract the file status count and array in two steps */

 Extract the callback count and array in two steps */

/*

 * FS.InlineBulkStatus operation type

/*

 * Fetch the status information for up to 50 files

 marshall the parameters */

/*

 * deliver reply data to an FS.FetchACL

 extract the returned data length */

 extract the returned data */

 extract the metadata */

/*

 * FS.FetchACL operation type

/*

 * Fetch the ACL for a file.

 marshall the parameters */

/*

 * FS.StoreACL operation type

/*

 * Fetch the ACL for a file.

 marshall the parameters */

 SPDX-License-Identifier: GPL-2.0-or-later

/* Maintain an RxRPC server socket to do AFS communications through

 *

 * Copyright (C) 2007 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

 asynchronous incoming call initial processing */

/*

 * open an RxRPC socket and bind it to be a server for callback notifications

 * - the socket is left in blocking mode and non-blocking ops use MSG_DONTWAIT

 bind the callback manager's address to make this a server socket */

	/* Ideally, we'd turn on service upgrade here, but we can't because

	 * OpenAFS is buggy and leaks the userStatus field from packet to

	 * packet and between FS packets and CB packets - so if we try to do an

	 * upgrade on an FS packet, OpenAFS will leak that into the CB packet

	 * it sends back to us.

/*

 * close the RxRPC socket AFS was using

/*

 * Allocate a call.

/*

 * Dispose of a reference on a call.

/*

 * Queue the call for actual work.

/*

 * allocate a call with flat request and reply buffers

/*

 * clean up a call with flat buffer

/*

 * Advance the AFS call state when the RxRPC call ends the transmit phase.

/*

 * Initiate a call and synchronously queue up the parameters for dispatch.  Any

 * error is stored into the call struct, which the caller must check for.

	/* Work out the length we're going to transmit.  This is awkward for

	 * calls such as FS.StoreData where there's an extra injection of data

	 * after the initial fixed part.

	/* If the call is going to be asynchronous, we need an extra ref for

	 * the call to hold itself so the caller need not hang on to its ref.

 create a call */

 send the request */

	/* Note that at this point, we may have received the reply or an abort

	 * - and an asynchronous call may already have completed.

	 *

	 * afs_wait_for_call_to_complete(call, ac)

	 * must be called to synchronously clean up.

	/* We need to dispose of the extra ref we grabbed for an async call.

	 * The call, however, might be queued on afs_async_calls and we need to

	 * make sure we don't get any more notifications that might requeue it.

/*

 * Log remote abort codes that indicate that we have a protocol disagreement

 * with the server.

/*

 * deliver messages to a call

/*

 * Wait synchronously for a call to complete and clean up the call struct.

 deliver any messages that are in the queue */

 rxrpc terminated the call. */

 Kill off the call if it's still live. */

/*

 * wake up a waiting call

/*

 * wake up an asynchronous call

/*

 * Perform I/O processing on an asynchronous call.  The work item carries a ref

 * to the call struct that we either need to release or to pass on.

/*

 * Charge the incoming call preallocation.

/*

 * Discard a preallocated call when a socket is shut down.

/*

 * Notification of an incoming call.

/*

 * Grab the operation ID from an incoming cache manager call.  The socket

 * buffer is discarded on error or if we don't yet have sufficient data.

 the operation ID forms the first four bytes of the request data */

	/* ask the cache manager to route the call (it'll change the call type

	/* pass responsibility for the remainer of this message off to the

/*

 * Advance the AFS call state when an RxRPC service call ends the transmit

 * phase.

/*

 * send an empty reply

/*

 * send a simple reply

 Success */

/*

 * Extract a piece of data from the received data socket buffers.

/*

 * Log protocol error production.

 SPDX-License-Identifier: GPL-2.0-or-later

/* AFS client file system

 *

 * Copyright (C) 2002,5 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * Initialise an AFS network namespace record.

 Register the /proc stuff */

 Initialise the cell DB */

 Create the RxRPC transport */

/*

 * Clean up and destroy an AFS network namespace record.

/*

 * initialise the AFS client FS module

 we want to be able to cache */

 register the filesystems */

/* XXX late_initcall is kludgy, but the only alternative seems to create

 * a transport upon the first mount, which is worse. Or is it?

 must be called after net/ to create socket */

/*

 * clean up on module removal

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 * Copyright (C) 2006, 2007 University of Szeged, Hungary

 *

 * Authors: Zoltan Sogor

 *          Artem Bityutskiy (Битюцкий Артём)

 *          Adrian Hunter

 This file implements EXT2-compatible extended attribute ioctl() calls */

 Need to be kept consistent with checked flags in ioctl2ubifs() */

 Need to be kept consistent with checked flags in ubifs2ioctl() */

/**

 * ubifs_set_inode_flags - set VFS inode flags.

 * @inode: VFS inode to set flags for

 *

 * This function propagates flags from UBIFS inode object to VFS inode object.

/*

 * ioctl2ubifs - convert ioctl inode flags to UBIFS inode flags.

 * @ioctl_flags: flags to convert

 *

 * This function converts ioctl flags (@FS_COMPR_FL, etc) to UBIFS inode flags

 * (@UBIFS_COMPR_FL, etc).

/*

 * ubifs2ioctl - convert UBIFS inode flags to ioctl inode flags.

 * @ubifs_flags: flags to convert

 *

 * This function converts UBIFS inode flags (@UBIFS_COMPR_FL, etc) to ioctl

 * flags (@FS_COMPR_FL, etc).

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Adrian Hunter

 *          Artem Bityutskiy (Битюцкий Артём)

/*

 * This file implements functions that manage the running of the commit process.

 * Each affected module has its own functions to accomplish their part in the

 * commit and those functions are called here.

 *

 * The commit is the process whereby all updates to the index and LEB properties

 * are written out together and the journal becomes empty. This keeps the

 * file system consistent - at all times the state can be recreated by reading

 * the index and LEB properties and then replaying the journal.

 *

 * The commit is split into two parts named "commit start" and "commit end".

 * During commit start, the commit process has exclusive access to the journal

 * by holding the commit semaphore down for writing. As few I/O operations as

 * possible are performed during commit start, instead the nodes that are to be

 * written are merely identified. During commit end, the commit semaphore is no

 * longer held and the journal is again in operation, allowing users to continue

 * to use the file system while the bulk of the commit I/O is performed. The

 * purpose of this two-step approach is to prevent the commit from causing any

 * latency blips. Note that in any case, the commit does not prevent lookups

 * (as permitted by the TNC mutex), or access to VFS data structures e.g. page

 * cache.

/*

 * nothing_to_commit - check if there is nothing to commit.

 * @c: UBIFS file-system description object

 *

 * This is a helper function which checks if there is anything to commit. It is

 * used as an optimization to avoid starting the commit if it is not really

 * necessary. Indeed, the commit operation always assumes flash I/O (e.g.,

 * writing the commit start node to the log), and it is better to avoid doing

 * this unnecessarily. E.g., 'ubifs_sync_fs()' runs the commit, but if there is

 * nothing to commit, it is more optimal to avoid any flash I/O.

 *

 * This function has to be called with @c->commit_sem locked for writing -

 * this function does not take LPT/TNC locks because the @c->commit_sem

 * guarantees that we have exclusive access to the TNC and LPT data structures.

 *

 * This function returns %1 if there is nothing to commit and %0 otherwise.

	/*

	 * During mounting or remounting from R/O mode to R/W mode we may

	 * commit for various recovery-related reasons.

	/*

	 * If the root TNC node is dirty, we definitely have something to

	 * commit.

	/*

	 * Even though the TNC is clean, the LPT tree may have dirty nodes. For

	 * example, this may happen if the budgeting subsystem invoked GC to

	 * make some free space, and the GC found an LEB with only dirty and

	 * free space. In this case GC would just change the lprops of this

	 * LEB (by turning all space into free space) and unmap it.

/**

 * do_commit - commit the journal.

 * @c: UBIFS file-system description object

 *

 * This function implements UBIFS commit. It has to be called with commit lock

 * locked. Returns zero in case of success and a negative error code in case of

 * failure.

 Sync all write buffers (necessary for recovery) */

/**

 * run_bg_commit - run background commit if it is needed.

 * @c: UBIFS file-system description object

 *

 * This function runs background commit if it is needed. Returns zero in case

 * of success and a negative error code in case of failure.

	/*

	 * Run background commit only if background commit was requested or if

	 * commit is required.

/**

 * ubifs_bg_thread - UBIFS background thread function.

 * @info: points to the file-system description object

 *

 * This function implements various file-system background activities:

 * o when a write-buffer timer expires it synchronizes the appropriate

 *   write-buffer;

 * o when the journal is about to be full, it starts in-advance commit.

 *

 * Note, other stuff like background garbage collection may be added here in

 * future.

 Check if there is something to do */

			/*

			 * Nothing prevents us from going sleep now and

			 * be never woken up and block the task which

			 * could wait in 'kthread_stop()' forever.

/**

 * ubifs_commit_required - set commit state to "required".

 * @c: UBIFS file-system description object

 *

 * This function is called if a commit is required but cannot be done from the

 * calling function, so it is just flagged instead.

/**

 * ubifs_request_bg_commit - notify the background thread to do a commit.

 * @c: UBIFS file-system description object

 *

 * This function is called if the journal is full enough to make a commit

 * worthwhile, so background thread is kicked to start it.

/**

 * wait_for_commit - wait for commit.

 * @c: UBIFS file-system description object

 *

 * This function sleeps until the commit operation is no longer running.

	/*

	 * The following sleeps if the condition is false, and will be woken

	 * when the commit ends. It is possible, although very unlikely, that we

	 * will wake up and see the subsequent commit running, rather than the

	 * one we were waiting for, and go back to sleep.  However, we will be

	 * woken again, so there is no danger of sleeping forever.

/**

 * ubifs_run_commit - run or wait for commit.

 * @c: UBIFS file-system description object

 *

 * This function runs commit and returns zero in case of success and a negative

 * error code in case of failure.

		/*

		 * We set the commit state to 'running required' to indicate

		 * that we want it to complete as quickly as possible.

 Ok, the commit is indeed needed */

	/*

	 * Since we unlocked 'c->cs_lock', the state may have changed, so

	 * re-check it.

/**

 * ubifs_gc_should_commit - determine if it is time for GC to run commit.

 * @c: UBIFS file-system description object

 *

 * This function is called by garbage collection to determine if commit should

 * be run. If commit state is @COMMIT_BACKGROUND, which means that the journal

 * is full enough to start commit, this function returns true. It is not

 * absolutely necessary to commit yet, but it feels like this should be better

 * then to keep doing GC. This function returns %1 if GC has to initiate commit

 * and %0 if not.

/*

 * Everything below is related to debugging.

/**

 * struct idx_node - hold index nodes during index tree traversal.

 * @list: list

 * @iip: index in parent (slot number of this indexing node in the parent

 *       indexing node)

 * @upper_key: all keys in this indexing node have to be less or equivalent to

 *             this key

 * @idx: index node (8-byte aligned because all node structures must be 8-byte

 *       aligned)

/**

 * dbg_old_index_check_init - get information for the next old index check.

 * @c: UBIFS file-system description object

 * @zroot: root of the index

 *

 * This function records information about the index that will be needed for the

 * next old index check i.e. 'dbg_check_old_index()'.

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * dbg_check_old_index - check the old copy of the index.

 * @c: UBIFS file-system description object

 * @zroot: root of the new index

 *

 * In order to be able to recover from an unclean unmount, a complete copy of

 * the index must exist on flash. This is the "old" index. The commit process

 * must write the "new" index to flash without overwriting or destroying any

 * part of the old index. This function is run at commit end in order to check

 * that the old index does indeed exist completely intact.

 *

 * This function returns %0 on success and a negative error code on failure.

 Start at the old zroot */

	/*

	 * Traverse the index tree preorder depth-first i.e. do a node and then

	 * its subtrees from left to right.

 Get the next index node */

 Keep the index nodes on our path in a linked list */

 Read the index node */

 Validate index node */

 Check root level and sqnum */

 Set last values as though root had a parent */

		/*

		 * The index is always written bottom up hence a child's sqnum

		 * is always less than the parents.

 Check key range */

 Go to next index node */

 At the bottom, so go up until can go right */

 Drop the bottom of the list */

 No more list means we are done */

 Look at the new bottom */

 Can we go right */

 Nope, so go up again */

 Go down left */

		/*

		 * We have the parent in 'idx' and now we set up for reading the

		 * child pointed to by slot 'iip'.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Author: Adrian Hunter

/*

 * An orphan is an inode number whose inode node has been committed to the index

 * with a link count of zero. That happens when an open file is deleted

 * (unlinked) and then a commit is run. In the normal course of events the inode

 * would be deleted when the file is closed. However in the case of an unclean

 * unmount, orphans need to be accounted for. After an unclean unmount, the

 * orphans' inodes must be deleted which means either scanning the entire index

 * looking for them, or keeping a list on flash somewhere. This unit implements

 * the latter approach.

 *

 * The orphan area is a fixed number of LEBs situated between the LPT area and

 * the main area. The number of orphan area LEBs is specified when the file

 * system is created. The minimum number is 1. The size of the orphan area

 * should be so that it can hold the maximum number of orphans that are expected

 * to ever exist at one time.

 *

 * The number of orphans that can fit in a LEB is:

 *

 *         (c->leb_size - UBIFS_ORPH_NODE_SZ) / sizeof(__le64)

 *

 * For example: a 15872 byte LEB can fit 1980 orphans so 1 LEB may be enough.

 *

 * Orphans are accumulated in a rb-tree. When an inode's link count drops to

 * zero, the inode number is added to the rb-tree. It is removed from the tree

 * when the inode is deleted.  Any new orphans that are in the orphan tree when

 * the commit is run, are written to the orphan area in 1 or more orphan nodes.

 * If the orphan area is full, it is consolidated to make space.  There is

 * always enough space because validation prevents the user from creating more

 * than the maximum number of orphans allowed.

/**

 * ubifs_add_orphan - add an orphan.

 * @c: UBIFS file-system description object

 * @inum: orphan inode number

 *

 * Add an orphan. This function is called when an inodes link count drops to

 * zero.

/**

 * ubifs_delete_orphan - delete an orphan.

 * @c: UBIFS file-system description object

 * @inum: orphan inode number

 *

 * Delete an orphan. This function is called when an inode is deleted.

/**

 * ubifs_orphan_start_commit - start commit of orphans.

 * @c: UBIFS file-system description object

 *

 * Start commit of orphans.

/**

 * avail_orphs - calculate available space.

 * @c: UBIFS file-system description object

 *

 * This function returns the number of orphans that can be written in the

 * available space.

/**

 * tot_avail_orphs - calculate total space.

 * @c: UBIFS file-system description object

 *

 * This function returns the number of orphans that can be written in half

 * the total space. That leaves half the space for adding new orphans.

/**

 * do_write_orph_node - write a node to the orphan head.

 * @c: UBIFS file-system description object

 * @len: length of node

 * @atomic: write atomically

 *

 * This function writes a node to the orphan head from the orphan buffer. If

 * %atomic is not zero, then the write is done atomically. On success, %0 is

 * returned, otherwise a negative error code is returned.

 Ensure LEB has been unmapped */

/**

 * write_orph_node - write an orphan node.

 * @c: UBIFS file-system description object

 * @atomic: write atomically

 *

 * This function builds an orphan node from the cnext list and writes it to the

 * orphan head. On success, %0 is returned, otherwise a negative error code

 * is returned.

			/*

			 * We limit the number of orphans so that this should

			 * never happen.

 Mark the last node of the commit */

/**

 * write_orph_nodes - write orphan nodes until there are no more to commit.

 * @c: UBIFS file-system description object

 * @atomic: write atomically

 *

 * This function writes orphan nodes for all the orphans to commit. On success,

 * %0 is returned, otherwise a negative error code is returned.

 Unmap any unused LEBs after consolidation */

/**

 * consolidate - consolidate the orphan area.

 * @c: UBIFS file-system description object

 *

 * This function enables consolidation by putting all the orphans into the list

 * to commit. The list is in the order that the orphans were added, and the

 * LEBs are written atomically in order, so at no time can orphans be lost by

 * an unclean unmount.

 *

 * This function returns %0 on success and a negative error code on failure.

 Change the cnext list to include all non-new orphans */

		/*

		 * We limit the number of orphans so that this should

		 * never happen.

/**

 * commit_orphans - commit orphans.

 * @c: UBIFS file-system description object

 *

 * This function commits orphans to flash. On success, %0 is returned,

 * otherwise a negative error code is returned.

 Not enough space to write new orphans, so consolidate */

/**

 * erase_deleted - erase the orphans marked for deletion.

 * @c: UBIFS file-system description object

 *

 * During commit, the orphans being committed cannot be deleted, so they are

 * marked for deletion and deleted by this function. Also, the recovery

 * adds killed orphans to the deletion list, and therefore they are deleted

 * here too.

/**

 * ubifs_orphan_end_commit - end commit of orphans.

 * @c: UBIFS file-system description object

 *

 * End commit of orphans.

/**

 * ubifs_clear_orphans - erase all LEBs used for orphans.

 * @c: UBIFS file-system description object

 *

 * If recovery is not required, then the orphans from the previous session

 * are not needed. This function locates the LEBs used to record

 * orphans, and un-maps them.

/**

 * insert_dead_orphan - insert an orphan.

 * @c: UBIFS file-system description object

 * @inum: orphan inode number

 *

 * This function is a helper to the 'do_kill_orphans()' function. The orphan

 * must be kept until the next commit, so it is added to the rb-tree and the

 * deletion list.

 Already added - no problem */

/**

 * do_kill_orphans - remove orphan inodes from the index.

 * @c: UBIFS file-system description object

 * @sleb: scanned LEB

 * @last_cmt_no: cmt_no of last orphan node read is passed and returned here

 * @outofdate: whether the LEB is out of date is returned here

 * @last_flagged: whether the end orphan node is encountered

 *

 * This function is a helper to the 'kill_orphans()' function. It goes through

 * every orphan node in a LEB and for every inode number recorded, removes

 * all keys for that inode from the TNC.

 Check commit number */

		/*

		 * The commit number on the master node may be less, because

		 * of a failed commit. If there are several failed commits in a

		 * row, the commit number written on orphan nodes will continue

		 * to increase (because the commit number is adjusted here) even

		 * though the commit number on the master node stays the same

		 * because the master node has not been re-written.

			/*

			 * The last orphan node had a higher commit number and

			 * was flagged as the last written for that commit

			 * number. That makes this orphan node, out of date.

			/*

			 * Check whether an inode can really get deleted.

			 * linkat() with O_TMPFILE allows rebirth of an inode.

/**

 * kill_orphans - remove all orphan inodes from the index.

 * @c: UBIFS file-system description object

 *

 * If recovery is required, then orphan inodes recorded during the previous

 * session (which ended with an unclean unmount) must be deleted from the index.

 * This is done by updating the TNC, but since the index is not updated until

 * the next commit, the LEBs where the orphan information is recorded are not

 * erased until the next commit.

 Check no-orphans flag and skip this if no orphans */

	/*

	 * Orph nodes always start at c->orph_first and are written to each

	 * successive LEB in turn. Generally unused LEBs will have been unmapped

	 * but may contain out of date orphan nodes if the unmap didn't go

	 * through. In addition, the last orphan node written for each commit is

	 * marked (top bit of orph->cmt_no is set to 1). It is possible that

	 * there are orphan nodes from the next commit (i.e. the commit did not

	 * complete successfully). In that case, no orphans will have been lost

	 * due to the way that orphans are written, and any orphans added will

	 * be valid orphans anyway and so can be deleted.

/**

 * ubifs_mount_orphans - delete orphan inodes and erase LEBs that recorded them.

 * @c: UBIFS file-system description object

 * @unclean: indicates recovery from unclean unmount

 * @read_only: indicates read only mount

 *

 * This function is called when mounting to erase orphans from the previous

 * session. If UBIFS was not unmounted cleanly, then the inodes recorded as

 * orphans are deleted.

/*

 * Everything below is related to debugging.

 Lowest node type is the inode node, so it comes first */

 Must be recorded as an orphan */

 Check no-orphans flag and skip this if no orphans */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Artem Bityutskiy (Битюцкий Артём)

 *          Adrian Hunter

/*

 * This file contains functions for finding LEBs for various purposes e.g.

 * garbage collection. In general, lprops category heaps and lists are used

 * for fast access, falling back on scanning the LPT as a last resort.

/**

 * struct scan_data - data provided to scan callback functions

 * @min_space: minimum number of bytes for which to scan

 * @pick_free: whether it is OK to scan for empty LEBs

 * @lnum: LEB number found is returned here

 * @exclude_index: whether to exclude index LEBs

/**

 * valuable - determine whether LEB properties are valuable.

 * @c: the UBIFS file-system description object

 * @lprops: LEB properties

 *

 * This function return %1 if the LEB properties should be added to the LEB

 * properties tree in memory. Otherwise %0 is returned.

/**

 * scan_for_dirty_cb - dirty space scan callback.

 * @c: the UBIFS file-system description object

 * @lprops: LEB properties to scan

 * @in_tree: whether the LEB properties are in main memory

 * @data: information passed to and from the caller of the scan

 *

 * This function returns a code that indicates whether the scan should continue

 * (%LPT_SCAN_CONTINUE), whether the LEB properties should be added to the tree

 * in main memory (%LPT_SCAN_ADD), or whether the scan should stop

 * (%LPT_SCAN_STOP).

 Exclude LEBs that are currently in use */

 Determine whether to add these LEB properties to the tree */

 Exclude LEBs with too little space */

 If specified, exclude index LEBs */

 If specified, exclude empty or freeable LEBs */

 Exclude LEBs with too little dirty space (unless it is empty) */

 Finally we found space */

/**

 * scan_for_dirty - find a data LEB with free space.

 * @c: the UBIFS file-system description object

 * @min_space: minimum amount free plus dirty space the returned LEB has to

 *             have

 * @pick_free: if it is OK to return a free or freeable LEB

 * @exclude_index: whether to exclude index LEBs

 *

 * This function returns a pointer to the LEB properties found or a negative

 * error code.

 There may be an LEB with enough dirty space on the free heap */

	/*

	 * A LEB may have fallen off of the bottom of the dirty heap, and ended

	 * up as uncategorized even though it has enough dirty space for us now,

	 * so check the uncategorized list. N.B. neither empty nor freeable LEBs

	 * can end up as uncategorized because they are kept on lists not

	 * finite-sized heaps.

 We have looked everywhere in main memory, now scan the flash */

 All pnodes are in memory, so skip scan */

/**

 * ubifs_find_dirty_leb - find a dirty LEB for the Garbage Collector.

 * @c: the UBIFS file-system description object

 * @ret_lp: LEB properties are returned here on exit

 * @min_space: minimum amount free plus dirty space the returned LEB has to

 *             have

 * @pick_free: controls whether it is OK to pick empty or index LEBs

 *

 * This function tries to find a dirty logical eraseblock which has at least

 * @min_space free and dirty space. It prefers to take an LEB from the dirty or

 * dirty index heap, and it falls-back to LPT scanning if the heaps are empty

 * or do not have an LEB which satisfies the @min_space criteria.

 *

 * Note, LEBs which have less than dead watermark of free + dirty space are

 * never picked by this function.

 *

 * The additional @pick_free argument controls if this function has to return a

 * free or freeable LEB if one is present. For example, GC must to set it to %1,

 * when called from the journal space reservation function, because the

 * appearance of free space may coincide with the loss of enough dirty space

 * for GC to succeed anyway.

 *

 * In contrast, if the Garbage Collector is called from budgeting, it should

 * just make free space, not return LEBs which are already free or freeable.

 *

 * In addition @pick_free is set to %2 by the recovery process in order to

 * recover gc_lnum in which case an index LEB must not be returned.

 *

 * This function returns zero and the LEB properties of found dirty LEB in case

 * of success, %-ENOSPC if no dirty LEB was found and a negative error code in

 * case of other failures. The returned LEB is marked as "taken".

		/*

		 * Note, the index may consume more LEBs than have been reserved

		 * for it. It is OK because it might be consolidated by GC.

		 * But if the index takes fewer LEBs than it is reserved for it,

		 * this function must avoid picking those reserved LEBs.

 Check if there are enough free LEBs for the index */

 OK, try to find an empty LEB */

 Or a freeable LEB */

			/*

			 * We cannot pick free/freeable LEBs in the below code.

 Look on the dirty and dirty index heaps */

		/*

		 * Since we reserve thrice as much space for the index than it

		 * actually takes, it does not make sense to pick indexing LEBs

		 * with less than, say, half LEB of dirty space. May be half is

		 * not the optimal boundary - this should be tested and

		 * checked. This boundary should determine how much we use

		 * in-the-gaps to consolidate the index comparing to how much

		 * we use garbage collector to consolidate it. The "half"

		 * criteria just feels to be fine.

 Pick the LEB with most space */

 Did not find a dirty LEB on the dirty heaps, have to scan */

/**

 * scan_for_free_cb - free space scan callback.

 * @c: the UBIFS file-system description object

 * @lprops: LEB properties to scan

 * @in_tree: whether the LEB properties are in main memory

 * @data: information passed to and from the caller of the scan

 *

 * This function returns a code that indicates whether the scan should continue

 * (%LPT_SCAN_CONTINUE), whether the LEB properties should be added to the tree

 * in main memory (%LPT_SCAN_ADD), or whether the scan should stop

 * (%LPT_SCAN_STOP).

 Exclude LEBs that are currently in use */

 Determine whether to add these LEB properties to the tree */

 Exclude index LEBs */

 Exclude LEBs with too little space */

 If specified, exclude empty LEBs */

	/*

	 * LEBs that have only free and dirty space must not be allocated

	 * because they may have been unmapped already or they may have data

	 * that is obsolete only because of nodes that are still sitting in a

	 * wbuf.

 Finally we found space */

/**

 * do_find_free_space - find a data LEB with free space.

 * @c: the UBIFS file-system description object

 * @min_space: minimum amount of free space required

 * @pick_free: whether it is OK to scan for empty LEBs

 * @squeeze: whether to try to find space in a non-empty LEB first

 *

 * This function returns a pointer to the LEB properties found or a negative

 * error code.

 There may be an LEB with enough free space on the dirty heap */

	/*

	 * A LEB may have fallen off of the bottom of the free heap, and ended

	 * up as uncategorized even though it has enough free space for us now,

	 * so check the uncategorized list. N.B. neither empty nor freeable LEBs

	 * can end up as uncategorized because they are kept on lists not

	 * finite-sized heaps.

 We have looked everywhere in main memory, now scan the flash */

 All pnodes are in memory, so skip scan */

/**

 * ubifs_find_free_space - find a data LEB with free space.

 * @c: the UBIFS file-system description object

 * @min_space: minimum amount of required free space

 * @offs: contains offset of where free space starts on exit

 * @squeeze: whether to try to find space in a non-empty LEB first

 *

 * This function looks for an LEB with at least @min_space bytes of free space.

 * It tries to find an empty LEB if possible. If no empty LEBs are available,

 * this function searches for a non-empty data LEB. The returned LEB is marked

 * as "taken".

 *

 * This function returns found LEB number in case of success, %-ENOSPC if it

 * failed to find a LEB with @min_space bytes of free space and other a negative

 * error codes in case of failure.

 Check if there are enough empty LEBs for commit */

		/*

		 * OK to allocate an empty LEB, but we still don't want to go

		 * looking for one if there aren't any.

			/*

			 * Because we release the space lock, we must account

			 * for this allocation here. After the LEB properties

			 * flags have been updated, we subtract one. Note, the

			 * result of this is that lprops also decreases

			 * @taken_empty_lebs in 'ubifs_change_lp()', so it is

			 * off by one for a short period of time which may

			 * introduce a small disturbance to budgeting

			 * calculations, but this is harmless because at the

			 * worst case this would make the budgeting subsystem

			 * be more pessimistic than needed.

			 *

			 * Fundamentally, this is about serialization of the

			 * budgeting and lprops subsystems. We could make the

			 * @space_lock a mutex and avoid dropping it before

			 * calling 'ubifs_change_lp()', but mutex is more

			 * heavy-weight, and we want budgeting to be as fast as

			 * possible.

		/*

		 * Ensure that empty LEBs have been unmapped. They may not have

		 * been, for example, because of an unclean unmount.  Also

		 * LEBs that were freeable LEBs (free + dirty == leb_size) will

		 * not have been unmapped.

/**

 * scan_for_idx_cb - callback used by the scan for a free LEB for the index.

 * @c: the UBIFS file-system description object

 * @lprops: LEB properties to scan

 * @in_tree: whether the LEB properties are in main memory

 * @data: information passed to and from the caller of the scan

 *

 * This function returns a code that indicates whether the scan should continue

 * (%LPT_SCAN_CONTINUE), whether the LEB properties should be added to the tree

 * in main memory (%LPT_SCAN_ADD), or whether the scan should stop

 * (%LPT_SCAN_STOP).

 Exclude LEBs that are currently in use */

 Determine whether to add these LEB properties to the tree */

 Exclude index LEBS */

 Exclude LEBs that cannot be made empty */

	/*

	 * We are allocating for the index so it is safe to allocate LEBs with

	 * only free and dirty space, because write buffers are sync'd at commit

	 * start.

/**

 * scan_for_leb_for_idx - scan for a free LEB for the index.

 * @c: the UBIFS file-system description object

/**

 * ubifs_find_free_leb_for_idx - find a free LEB for the index.

 * @c: the UBIFS file-system description object

 *

 * This function looks for a free LEB and returns that LEB number. The returned

 * LEB is marked as "taken", "index".

 *

 * Only empty LEBs are allocated. This is for two reasons. First, the commit

 * calculates the number of LEBs to allocate based on the assumption that they

 * will be empty. Secondly, free space at the end of an index LEB is not

 * guaranteed to be empty because it may have been used by the in-the-gaps

 * method prior to an unclean unmount.

 *

 * If no LEB is found %-ENOSPC is returned. For other failures another negative

 * error code is returned.

			/*

			 * The first condition means the following: go scan the

			 * LPT if there are uncategorized lprops, which means

			 * there may be freeable LEBs there (UBIFS does not

			 * store the information about freeable LEBs in the

			 * master node).

	/*

	 * Ensure that empty LEBs have been unmapped. They may not have been,

	 * for example, because of an unclean unmount. Also LEBs that were

	 * freeable LEBs (free + dirty == leb_size) will not have been unmapped.

/**

 * ubifs_save_dirty_idx_lnums - save an array of the most dirty index LEB nos.

 * @c: the UBIFS file-system description object

 *

 * This function is called each commit to create an array of LEB numbers of

 * dirty index LEBs sorted in order of dirty and free space.  This is used by

 * the in-the-gaps method of TNC commit.

 Copy the LPROPS_DIRTY_IDX heap */

 Sort it so that the dirtiest is now at the end */

 Replace the lprops pointers with LEB numbers */

/**

 * scan_dirty_idx_cb - callback used by the scan for a dirty index LEB.

 * @c: the UBIFS file-system description object

 * @lprops: LEB properties to scan

 * @in_tree: whether the LEB properties are in main memory

 * @data: information passed to and from the caller of the scan

 *

 * This function returns a code that indicates whether the scan should continue

 * (%LPT_SCAN_CONTINUE), whether the LEB properties should be added to the tree

 * in main memory (%LPT_SCAN_ADD), or whether the scan should stop

 * (%LPT_SCAN_STOP).

 Exclude LEBs that are currently in use */

 Determine whether to add these LEB properties to the tree */

 Exclude non-index LEBs */

 Exclude LEBs with too little space */

 Finally we found space */

/**

 * find_dirty_idx_leb - find a dirty index LEB.

 * @c: the UBIFS file-system description object

 *

 * This function returns LEB number upon success and a negative error code upon

 * failure.  In particular, -ENOSPC is returned if a dirty index LEB is not

 * found.

 *

 * Note that this function scans the entire LPT but it is called very rarely.

 Check all structures in memory first */

 All pnodes are in memory, so skip scan */

/**

 * get_idx_gc_leb - try to get a LEB number from trivial GC.

 * @c: the UBIFS file-system description object

	/*

	 * The LEB was due to be unmapped after the commit but

	 * it is needed now for this commit.

/**

 * find_dirtiest_idx_leb - find dirtiest index LEB from dirtiest array.

 * @c: the UBIFS file-system description object

 The lprops pointers were replaced by LEB numbers */

/**

 * ubifs_find_dirty_idx_leb - try to find dirtiest index LEB as at last commit.

 * @c: the UBIFS file-system description object

 *

 * This function attempts to find an untaken index LEB with the most free and

 * dirty space that can be used without overwriting index nodes that were in the

 * last index committed.

	/*

	 * We made an array of the dirtiest index LEB numbers as at the start of

	 * last commit.  Try that array first.

 Next try scanning the entire LPT */

 Finally take any index LEBs awaiting trivial GC */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 * Copyright (C) 2006, 2007 University of Szeged, Hungary

 *

 * Authors: Artem Bityutskiy (Битюцкий Артём)

 *          Adrian Hunter

 *          Zoltan Sogor

/*

 * This file implements UBIFS I/O subsystem which provides various I/O-related

 * helper functions (reading/writing/checking/validating nodes) and implements

 * write-buffering support. Write buffers help to save space which otherwise

 * would have been wasted for padding to the nearest minimal I/O unit boundary.

 * Instead, data first goes to the write-buffer and is flushed when the

 * buffer is full or when it is not used for some time (by timer). This is

 * similar to the mechanism is used by JFFS2.

 *

 * UBIFS distinguishes between minimum write size (@c->min_io_size) and maximum

 * write size (@c->max_write_size). The latter is the maximum amount of bytes

 * the underlying flash is able to program at a time, and writing in

 * @c->max_write_size units should presumably be faster. Obviously,

 * @c->min_io_size <= @c->max_write_size. Write-buffers are of

 * @c->max_write_size bytes in size for maximum performance. However, when a

 * write-buffer is flushed, only the portion of it (aligned to @c->min_io_size

 * boundary) which contains data is written, not the whole write-buffer,

 * because this is more space-efficient.

 *

 * This optimization adds few complications to the code. Indeed, on the one

 * hand, we want to write in optimal @c->max_write_size bytes chunks, which

 * also means aligning writes at the @c->max_write_size bytes offsets. On the

 * other hand, we do not want to waste space when synchronizing the write

 * buffer, so during synchronization we writes in smaller chunks. And this makes

 * the next write offset to be not aligned to @c->max_write_size bytes. So the

 * have to make sure that the write-buffer offset (@wbuf->offs) becomes aligned

 * to @c->max_write_size bytes again. We do this by temporarily shrinking

 * write-buffer size (@wbuf->size).

 *

 * Write-buffers are defined by 'struct ubifs_wbuf' objects and protected by

 * mutexes defined inside these objects. Since sometimes upper-level code

 * has to lock the write-buffer (e.g. journal space reservation code), many

 * functions related to write-buffers have "nolock" suffix which means that the

 * caller has to lock the write-buffer before calling this function.

 *

 * UBIFS stores nodes at 64 bit-aligned addresses. If the node length is not

 * aligned, UBIFS starts the next node from the aligned address, and the padded

 * bytes may contain any rubbish. In other words, UBIFS does not put padding

 * bytes in those small gaps. Common headers of nodes store real node lengths,

 * not aligned lengths. Indexing nodes also store real lengths in branches.

 *

 * UBIFS uses padding when it pads to the next min. I/O unit. In this case it

 * uses padding nodes or padding bytes, if the padding node does not fit.

 *

 * All UBIFS nodes are protected by CRC checksums and UBIFS checks CRC when

 * they are read from the flash media.

/**

 * ubifs_ro_mode - switch UBIFS to read read-only mode.

 * @c: UBIFS file-system description object

 * @err: error code which is the reason of switching to R/O mode

/*

 * Below are simple wrappers over UBI I/O functions which include some

 * additional checks and UBIFS debugging stuff. See corresponding UBI function

 * for more information.

	/*

	 * In case of %-EBADMSG print the error message only if the

	 * @even_ebadmsg is true.

/**

 * ubifs_check_node - check node.

 * @c: UBIFS file-system description object

 * @buf: node to check

 * @len: node length

 * @lnum: logical eraseblock number

 * @offs: offset within the logical eraseblock

 * @quiet: print no messages

 * @must_chk_crc: indicates whether to always check the CRC

 *

 * This function checks node magic number and CRC checksum. This function also

 * validates node length to prevent UBIFS from becoming crazy when an attacker

 * feeds it a file-system image with incorrect nodes. For example, too large

 * node length in the common header could cause UBIFS to read memory outside of

 * allocated buffer when checking the CRC checksum.

 *

 * This function may skip data nodes CRC checking if @c->no_chk_data_crc is

 * true, which is controlled by corresponding UBIFS mount option. However, if

 * @must_chk_crc is true, then @c->no_chk_data_crc is ignored and CRC is

 * checked. Similarly, if @c->mounting or @c->remounting_rw is true (we are

 * mounting or re-mounting to R/W mode), @c->no_chk_data_crc is ignored and CRC

 * is checked. This is because during mounting or re-mounting from R/O mode to

 * R/W mode we may read journal nodes (when replying the journal or doing the

 * recovery) and the journal nodes may potentially be corrupted, so checking is

 * required.

 *

 * This function returns zero in case of success and %-EUCLEAN in case of bad

 * CRC or magic.

/**

 * ubifs_pad - pad flash space.

 * @c: UBIFS file-system description object

 * @buf: buffer to put padding to

 * @pad: how many bytes to pad

 *

 * The flash media obliges us to write only in chunks of %c->min_io_size and

 * when we have to write less data we add padding node to the write-buffer and

 * pad it to the next minimal I/O unit's boundary. Padding nodes help when the

 * media is being scanned. If the amount of wasted space is not enough to fit a

 * padding node which takes %UBIFS_PAD_NODE_SZ bytes, we write padding bytes

 * pattern (%UBIFS_PADDING_BYTE).

 *

 * Padding nodes are also used to fill gaps when the "commit-in-gaps" method is

 * used.

 Too little space, padding node won't fit */

/**

 * next_sqnum - get next sequence number.

 * @c: UBIFS file-system description object

/**

 * ubifs_prepare_node_hmac - prepare node to be written to flash.

 * @c: UBIFS file-system description object

 * @node: the node to pad

 * @len: node length

 * @hmac_offs: offset of the HMAC in the node

 * @pad: if the buffer has to be padded

 *

 * This function prepares node at @node to be written to the media - it

 * calculates node CRC, fills the common header, and adds proper padding up to

 * the next minimum I/O unit if @pad is not zero. if @hmac_offs is positive then

 * a HMAC is inserted into the node at the given offset.

 *

 * This function returns 0 for success or a negative error code otherwise.

/**

 * ubifs_prepare_node - prepare node to be written to flash.

 * @c: UBIFS file-system description object

 * @node: the node to pad

 * @len: node length

 * @pad: if the buffer has to be padded

 *

 * This function prepares node at @node to be written to the media - it

 * calculates node CRC, fills the common header, and adds proper padding up to

 * the next minimum I/O unit if @pad is not zero.

	/*

	 * Deliberately ignore return value since this function can only fail

	 * when a hmac offset is given.

/**

 * ubifs_prep_grp_node - prepare node of a group to be written to flash.

 * @c: UBIFS file-system description object

 * @node: the node to pad

 * @len: node length

 * @last: indicates the last node of the group

 *

 * This function prepares node at @node to be written to the media - it

 * calculates node CRC and fills the common header.

/**

 * wbuf_timer_callback - write-buffer timer callback function.

 * @timer: timer data (write-buffer descriptor)

 *

 * This function is called when the write-buffer timer expires.

/**

 * new_wbuf_timer - start new write-buffer timer.

 * @c: UBIFS file-system description object

 * @wbuf: write-buffer descriptor

 centi to milli, milli to nano, then 10% */

/**

 * cancel_wbuf_timer - cancel write-buffer timer.

 * @wbuf: write-buffer descriptor

/**

 * ubifs_wbuf_sync_nolock - synchronize write-buffer.

 * @wbuf: write-buffer to synchronize

 *

 * This function synchronizes write-buffer @buf and returns zero in case of

 * success or a negative error code in case of failure.

 *

 * Note, although write-buffers are of @c->max_write_size, this function does

 * not necessarily writes all @c->max_write_size bytes to the flash. Instead,

 * if the write-buffer is only partially filled with data, only the used part

 * of the write-buffer (aligned on @c->min_io_size boundary) is synchronized.

 * This way we waste less space.

 Write-buffer is empty or not seeked */

	/*

	 * Do not write whole write buffer but write only the minimum necessary

	 * amount of min. I/O units.

	/*

	 * Now @wbuf->offs is not necessarily aligned to @c->max_write_size.

	 * But our goal is to optimize writes and make sure we write in

	 * @c->max_write_size chunks and to @c->max_write_size-aligned offset.

	 * Thus, if @wbuf->offs is not aligned to @c->max_write_size now, make

	 * sure that @wbuf->offs + @wbuf->size is aligned to

	 * @c->max_write_size. This way we make sure that after next

	 * write-buffer flush we are again at the optimal offset (aligned to

	 * @c->max_write_size).

/**

 * ubifs_wbuf_seek_nolock - seek write-buffer.

 * @wbuf: write-buffer

 * @lnum: logical eraseblock number to seek to

 * @offs: logical eraseblock offset to seek to

 *

 * This function targets the write-buffer to logical eraseblock @lnum:@offs.

 * The write-buffer has to be empty. Returns zero in case of success and a

 * negative error code in case of failure.

/**

 * ubifs_bg_wbufs_sync - synchronize write-buffers.

 * @c: UBIFS file-system description object

 *

 * This function is called by background thread to synchronize write-buffers.

 * Returns zero in case of success and a negative error code in case of

 * failure.

		/*

		 * If the mutex is locked then wbuf is being changed, so

		 * synchronization is not necessary.

 Cancel all timers to prevent repeated errors */

/**

 * ubifs_wbuf_write_nolock - write data to flash via write-buffer.

 * @wbuf: write-buffer

 * @buf: node to write

 * @len: node length

 *

 * This function writes data to flash via write-buffer @wbuf. This means that

 * the last piece of the node won't reach the flash media immediately if it

 * does not take whole max. write unit (@c->max_write_size). Instead, the node

 * will sit in RAM until the write-buffer is synchronized (e.g., by timer, or

 * because more data are appended to the write-buffer).

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure. If the node cannot be written because there is no more

 * space in this logical eraseblock, %-ENOSPC is returned.

		/*

		 * The node is not very large and fits entirely within

		 * write-buffer.

		/*

		 * The node is large enough and does not fit entirely within

		 * current available space. We have to fill and flush

		 * write-buffer and switch to the next max. write unit.

		/*

		 * The write-buffer offset is not aligned to

		 * @c->max_write_size and @wbuf->size is less than

		 * @c->max_write_size. Write @wbuf->size bytes to make sure the

		 * following writes are done in optimal @c->max_write_size

		 * chunks.

	/*

	 * The remaining data may take more whole max. write units, so write the

	 * remains multiple to max. write unit size directly to the flash media.

	 * We align node length to 8-byte boundary because we anyway flash wbuf

	 * if the remaining space is less than 8 bytes.

		/*

		 * And now we have what's left and what does not take whole

		 * max. write unit, so write it to the write-buffer and we are

		 * done.

/**

 * ubifs_write_node_hmac - write node to the media.

 * @c: UBIFS file-system description object

 * @buf: the node to write

 * @len: node length

 * @lnum: logical eraseblock number

 * @offs: offset within the logical eraseblock

 * @hmac_offs: offset of the HMAC within the node

 *

 * This function automatically fills node magic number, assigns sequence

 * number, and calculates node CRC checksum. The length of the @buf buffer has

 * to be aligned to the minimal I/O unit size. This function automatically

 * appends padding node and padding bytes if needed. Returns zero in case of

 * success and a negative error code in case of failure.

/**

 * ubifs_write_node - write node to the media.

 * @c: UBIFS file-system description object

 * @buf: the node to write

 * @len: node length

 * @lnum: logical eraseblock number

 * @offs: offset within the logical eraseblock

 *

 * This function automatically fills node magic number, assigns sequence

 * number, and calculates node CRC checksum. The length of the @buf buffer has

 * to be aligned to the minimal I/O unit size. This function automatically

 * appends padding node and padding bytes if needed. Returns zero in case of

 * success and a negative error code in case of failure.

/**

 * ubifs_read_node_wbuf - read node from the media or write-buffer.

 * @wbuf: wbuf to check for un-written data

 * @buf: buffer to read to

 * @type: node type

 * @len: node length

 * @lnum: logical eraseblock number

 * @offs: offset within the logical eraseblock

 *

 * This function reads a node of known type and length, checks it and stores

 * in @buf. If the node partially or fully sits in the write-buffer, this

 * function takes data from the buffer, otherwise it reads the flash media.

 * Returns zero in case of success, %-EUCLEAN if CRC mismatched and a negative

 * error code in case of failure.

 We may safely unlock the write-buffer and read the data */

 Don't read under wbuf */

 Copy the rest from the write-buffer */

 Read everything that goes before write-buffer */

/**

 * ubifs_read_node - read node.

 * @c: UBIFS file-system description object

 * @buf: buffer to read to

 * @type: node type

 * @len: node length (not aligned)

 * @lnum: logical eraseblock number

 * @offs: offset within the logical eraseblock

 *

 * This function reads a node of known type and length, checks it and

 * stores in @buf. Returns zero in case of success, %-EUCLEAN if CRC mismatched

 * and a negative error code in case of failure.

/**

 * ubifs_wbuf_init - initialize write-buffer.

 * @c: UBIFS file-system description object

 * @wbuf: write-buffer to initialize

 *

 * This function initializes write-buffer. Returns zero in case of success

 * %-ENOMEM in case of failure.

	/*

	 * If the LEB starts at the max. write size aligned address, then

	 * write-buffer size has to be set to @c->max_write_size. Otherwise,

	 * set it to something smaller so that it ends at the closest max.

	 * write size boundary.

/**

 * ubifs_wbuf_add_ino_nolock - add an inode number into the wbuf inode array.

 * @wbuf: the write-buffer where to add

 * @inum: the inode number

 *

 * This function adds an inode number to the inode array of the write-buffer.

 NOR flash or something similar */

/**

 * wbuf_has_ino - returns if the wbuf contains data from the inode.

 * @wbuf: the write-buffer

 * @inum: the inode number

 *

 * This function returns with %1 if the write-buffer contains some data from the

 * given inode otherwise it returns with %0.

/**

 * ubifs_sync_wbufs_by_inode - synchronize write-buffers for an inode.

 * @c: UBIFS file-system description object

 * @inode: inode to synchronize

 *

 * This function synchronizes write-buffers which contain nodes belonging to

 * @inode. Returns zero in case of success and a negative error code in case of

 * failure.

			/*

			 * GC head is special, do not look at it. Even if the

			 * head contains something related to this inode, it is

			 * a _copy_ of corresponding on-flash node which sits

			 * somewhere else.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Artem Bityutskiy (Битюцкий Артём)

 *          Adrian Hunter

/*

 * This file implements UBIFS initialization and VFS superblock operations. Some

 * initialization stuff which is rather large and complex is placed at

 * corresponding subsystems, but most of it is here.

/*

 * Maximum amount of memory we may 'kmalloc()' without worrying that we are

 * allocating too much.

 Slab cache for UBIFS inodes */

 UBIFS TNC shrinker description */

/**

 * validate_inode - validate inode.

 * @c: UBIFS file-system description object

 * @inode: the inode to validate

 *

 * This is a helper function for 'ubifs_iget()' which validates various fields

 * of a newly built inode to make sure they contain sane values and prevent

 * possible vulnerabilities. Returns zero if the inode is all right and

 * a non-zero error code if not.

/*

 * Note, Linux write-back code calls this without 'i_mutex'.

	/*

	 * Due to races between write-back forced by budgeting

	 * (see 'sync_some_inodes()') and background write-back, the inode may

	 * have already been synchronized, do not do this again. This might

	 * also happen if it was synchronized in an VFS operation, e.g.

	 * 'ubifs_link()'.

	/*

	 * As an optimization, do not write orphan inodes to the media just

	 * because this is not needed.

		/*

		 * Extended attribute inode deletions are fully handled in

		 * 'ubifs_removexattr()'. These inodes are special and have

		 * limited usage, so there is nothing to do here.

		/*

		 * Worst case we have a lost orphan inode wasting space, so a

		 * simple error message is OK here.

 We've deleted something - clean the "no space" flags */

	/*

	 * Zero @wait is just an advisory thing to help the file system shove

	 * lots of data into the queues, and there will be the second

	 * '->sync_fs()' call, with non-zero @wait.

	/*

	 * Synchronize write buffers, because 'ubifs_run_commit()' does not

	 * do this if it waits for an already running commit.

	/*

	 * Strictly speaking, it is not necessary to commit the journal here,

	 * synchronizing write-buffers would be enough. But committing makes

	 * UBIFS free space predictions much more accurate, so we want to let

	 * the user be able to get more accurate results of 'statfs()' after

	 * they synchronize the file system.

/**

 * init_constants_early - initialize UBIFS constants.

 * @c: UBIFS file-system description object

 *

 * This function initialize UBIFS constants which do not need the superblock to

 * be read. It also checks that the UBI volume satisfies basic UBIFS

 * requirements. Returns zero in case of success and a negative error code in

 * case of failure.

	/*

	 * Maximum write size has to be greater or equivalent to min. I/O

	 * size, and be multiple of min. I/O size.

	/*

	 * UBIFS aligns all node to 8-byte boundary, so to make function in

	 * io.c simpler, assume minimum I/O unit size to be 8 bytes if it is

	 * less than 8.

	/*

	 * Initialize node length ranges which are mostly needed for node

	 * length validation.

	/*

	 * Minimum indexing node size is amended later when superblock is

	 * read and the key length is known.

	/*

	 * Maximum indexing node size is amended later when superblock is

	 * read and the fanout is known.

	/*

	 * Initialize dead and dark LEB space watermarks. See gc.c for comments

	 * about these values.

	/*

	 * Calculate how many bytes would be wasted at the end of LEB if it was

	 * fully filled with data nodes of maximum size. This is used in

	 * calculations when reporting free space.

 Buffer size for bulk-reads */

 Log is ready, preserve one LEB for commits. */

/**

 * bud_wbuf_callback - bud LEB write-buffer synchronization call-back.

 * @c: UBIFS file-system description object

 * @lnum: LEB the write-buffer was synchronized to

 * @free: how many free bytes left in this LEB

 * @pad: how many bytes were padded

 *

 * This is a callback function which is called by the I/O unit when the

 * write-buffer is synchronized. We need this to correctly maintain space

 * accounting in bud logical eraseblocks. This function returns zero in case of

 * success and a negative error code in case of failure.

 *

 * This function actually belongs to the journal, but we keep it here because

 * we want to keep it static.

/*

 * init_constants_sb - initialize UBIFS constants.

 * @c: UBIFS file-system description object

 *

 * This is a helper function which initializes various UBIFS constants after

 * the superblock has been read. It also checks various UBIFS parameters and

 * makes sure they are all right. Returns zero in case of success and a

 * negative error code in case of failure.

 Make sure LEB size is large enough to fit full commit */

	/*

	 * Make sure that the log is large enough to fit reference nodes for

	 * all buds plus one reserved LEB.

	/*

	 * When budgeting we assume worst-case scenarios when the pages are not

	 * be compressed and direntries are of the maximum size.

	 *

	 * Note, data, which may be stored in inodes is budgeted separately, so

	 * it is not included into 'c->bi.inode_budget'.

	/*

	 * When the amount of flash space used by buds becomes

	 * 'c->max_bud_bytes', UBIFS just blocks all writers and starts commit.

	 * The writers are unblocked when the commit is finished. To avoid

	 * writers to be blocked UBIFS initiates background commit in advance,

	 * when number of bud bytes becomes above the limit defined below.

	/*

	 * Ensure minimum journal size. All the bytes in the journal heads are

	 * considered to be used, when calculating the current journal usage.

	 * Consequently, if the journal is too small, UBIFS will treat it as

	 * always full.

 Initialize effective LEB size used in budgeting calculations */

/*

 * init_constants_master - initialize UBIFS constants.

 * @c: UBIFS file-system description object

 *

 * This is a helper function which initializes various UBIFS constants after

 * the master node has been read. It also checks various UBIFS parameters and

 * makes sure they are all right.

	/*

	 * Calculate total amount of FS blocks. This number is not used

	 * internally because it does not make much sense for UBIFS, but it is

	 * necessary to report something for the 'statfs()' call.

	 *

	 * Subtract the LEB reserved for GC, the LEB which is reserved for

	 * deletions, minimum LEBs for the index, and assume only one journal

	 * head is available.

/**

 * take_gc_lnum - reserve GC LEB.

 * @c: UBIFS file-system description object

 *

 * This function ensures that the LEB reserved for garbage collection is marked

 * as "taken" in lprops. We also have to set free space to LEB size and dirty

 * space to zero, because lprops may contain out-of-date information if the

 * file-system was un-mounted before it has been committed. This function

 * returns zero in case of success and a negative error code in case of

 * failure.

 And we have to tell lprops that this LEB is taken */

/**

 * alloc_wbufs - allocate write-buffers.

 * @c: UBIFS file-system description object

 *

 * This helper function allocates and initializes UBIFS write-buffers. Returns

 * zero in case of success and %-ENOMEM in case of failure.

 Initialize journal heads */

	/*

	 * Garbage Collector head does not need to be synchronized by timer.

	 * Also GC head nodes are not grouped.

/**

 * free_wbufs - free write-buffers.

 * @c: UBIFS file-system description object

/**

 * free_orphans - free orphans.

 * @c: UBIFS file-system description object

/**

 * free_buds - free per-bud objects.

 * @c: UBIFS file-system description object

/**

 * check_volume_empty - check if the UBI volume is empty.

 * @c: UBIFS file-system description object

 *

 * This function checks if the UBIFS volume is empty by looking if its LEBs are

 * mapped or not. The result of checking is stored in the @c->empty variable.

 * Returns zero in case of success and a negative error code in case of

 * failure.

/*

 * UBIFS mount options.

 *

 * Opt_fast_unmount: do not run a journal commit before un-mounting

 * Opt_norm_unmount: run a journal commit before un-mounting

 * Opt_bulk_read: enable bulk-reads

 * Opt_no_bulk_read: disable bulk-reads

 * Opt_chk_data_crc: check CRCs when reading data nodes

 * Opt_no_chk_data_crc: do not check CRCs when reading data nodes

 * Opt_override_compr: override default compressor

 * Opt_assert: set ubifs_assert() action

 * Opt_auth_key: The key name used for authentication

 * Opt_auth_hash_name: The hash type used for authentication

 * Opt_err: just end of array marker

/**

 * parse_standard_option - parse a standard mount option.

 * @option: the option to parse

 *

 * Normally, standard mount options like "sync" are passed to file-systems as

 * flags. However, when a "rootflags=" kernel boot parameter is used, they may

 * be present in the options string. This function tries to deal with this

 * situation and parse standard options. Returns 0 if the option was not

 * recognized, and the corresponding integer flag if it was.

 *

 * UBIFS is only interested in the "sync" option, so do not check for anything

 * else.

/**

 * ubifs_parse_options - parse mount parameters.

 * @c: UBIFS file-system description object

 * @options: parameters to parse

 * @is_remount: non-zero if this is FS re-mount

 *

 * This function parses UBIFS mount options and returns zero in case success

 * and a negative error code in case of failure.

		/*

		 * %Opt_fast_unmount and %Opt_norm_unmount options are ignored.

		 * We accept them in order to be backward-compatible. But this

		 * should be removed at some point.

FIXME: is c ready?

/*

 * ubifs_release_options - release mount parameters which have been dumped.

 * @c: UBIFS file-system description object

/**

 * destroy_journal - destroy journal data structures.

 * @c: UBIFS file-system description object

 *

 * This function destroys journal data structures including those that may have

 * been created by recovery functions.

/**

 * bu_init - initialize bulk-read information.

 * @c: UBIFS file-system description object

 Already initialized */

 Just disable bulk-read */

/**

 * check_free_space - check if there is enough free space to mount.

 * @c: UBIFS file-system description object

 *

 * This function makes sure UBIFS has enough free space to be mounted in

 * read/write mode. UBIFS must always have some free space to allow deletions.

/**

 * mount_ubifs - mount UBIFS file-system.

 * @c: UBIFS file-system description object

 *

 * This function mounts UBIFS file system. Returns zero in case of success and

 * a negative error code in case of failure.

 Suppress error messages while probing if SB_SILENT is set */

		/*

		 * This UBI volume is empty, and read-only, or the file system

		 * is mounted read-only - we cannot format it.

	/*

	 * The requirement for the buffer is that it should fit indexing B-tree

	 * height amount of integers. We assume the height if the TNC tree will

	 * never exceed 64.

	/*

	 * Make sure the compressor which is set as default in the superblock

	 * or overridden by mount options is actually compiled in.

 Create background thread */

		/*

		 * Set the "dirty" flag so that if we reboot uncleanly we

		 * will notice this immediately on the next mount.

	/*

	 * Handle offline signed images: Now that the master node is

	 * written and its validation no longer depends on the hash

	 * in the superblock, we can update the offline signed

	 * superblock with a HMAC version,

 Calculate 'min_idx_lebs' after journal replay */

 Check for enough log space */

			/*

			 * GC LEB may contain garbage if there was an unclean

			 * reboot, and it should be un-mapped.

		/*

		 * Even if we mount read-only, we have to set space in GC LEB

		 * to proper value because this affects UBIFS free space

		 * reporting. We do not want to have a situation when

		 * re-mounting from R/O to R/W changes amount of free space.

			/*

			 * GC LEB has to be empty and taken at this point. But

			 * the journal head LEBs may also be accounted as

			 * "empty taken" if they are empty.

/**

 * ubifs_umount - un-mount UBIFS file-system.

 * @c: UBIFS file-system description object

 *

 * Note, this function is called to free allocated resourced when un-mounting,

 * as well as free resources when an error occurred while we were half way

 * through mounting (error path cleanup function). So it has to make sure the

 * resource was actually allocated before freeing it.

/**

 * ubifs_remount_rw - re-mount in read-write mode.

 * @c: UBIFS file-system description object

 *

 * UBIFS avoids allocating many unnecessary resources when mounted in read-only

 * mode. This function allocates the needed resources and re-mounts UBIFS in

 * read-write mode.

 A readonly mount is not allowed to have orphans */

 Create background thread */

 Check for enough log space */

		/*

		 * Do not run the debugging space check if the were doing

		 * recovery, because when we saved the information we had the

		 * file-system in a state where the TNC and lprops has been

		 * modified in memory, but all the I/O operations (including a

		 * commit) were deferred. So the file-system was in

		 * "non-committed" state. Now the file-system is in committed

		 * state, and of course the amount of free space will change

		 * because, for example, the old index size was imprecise.

/**

 * ubifs_remount_ro - re-mount in read-only mode.

 * @c: UBIFS file-system description object

 *

 * We assume VFS has stopped writing. Possibly the background thread could be

 * running a commit, however kthread_stop will wait in that case.

	/*

	 * The following asserts are only valid if there has not been a failure

	 * of the media. For example, there will be dirty inodes if we failed

	 * to write them back because of I/O errors.

	/*

	 * The 'c->umount_lock' prevents races between UBIFS memory shrinker

	 * and file system un-mount. Namely, it prevents the shrinker from

	 * picking this superblock for shrinking - it will be just skipped if

	 * the mutex is locked.

		/*

		 * First of all kill the background thread to make sure it does

		 * not interfere with un-mounting and freeing resources.

		/*

		 * On fatal errors c->ro_error is set to 1, in which case we do

		 * not write the master node.

 Synchronize write-buffers */

			/*

			 * We are being cleanly unmounted which means the

			 * orphans were killed - indicate this in the master

			 * node. Also save the reserved GC LEB number.

				/*

				 * Recovery will attempt to fix the master area

				 * next mount, so we just print a message and

				 * continue to unmount normally.

 Make sure write-buffer timers are canceled */

/**

 * open_ubi - parse UBI device name string and open the UBI device.

 * @name: UBI volume name

 * @mode: UBI volume open mode

 *

 * The primary method of mounting UBIFS is by specifying the UBI volume

 * character device node path. However, UBIFS may also be mounted without any

 * character device node using one of the following methods:

 *

 * o ubiX_Y    - mount UBI device number X, volume Y;

 * o ubiY      - mount UBI device number 0, volume Y;

 * o ubiX:NAME - mount UBI device X, volume with name NAME;

 * o ubi:NAME  - mount UBI device 0, volume with name NAME.

 *

 * Alternative '!' separator may be used instead of ':' (because some shells

 * like busybox may interpret ':' as an NFS host name separator). This function

 * returns UBI volume description object in case of success and a negative

 * error code in case of failure.

 First, try to open using the device node path method */

 Try the "nodev" method */

 ubi:NAME method */

 ubiY method */

 ubiX_Y method */

 ubiX:NAME method */

 Re-open the UBI device in read-write mode */

	/*

	 * UBIFS provides 'backing_dev_info' in order to disable read-ahead. For

	 * UBIFS, I/O is not deferred, it is done immediately in readpage,

	 * which means the user would have to wait not just for their own I/O

	 * but the read-ahead I/O as well i.e. completely pointless.

	 *

	 * Read-ahead will be disabled because @sb->s_bdi->ra_pages is 0. Also

	 * @sb->s_bdi->capabilities are initialized to 0 so there won't be any

	 * writeback happening.

 Read the root inode */

	/*

	 * Get UBI device number and volume ID. Mount it read-only so far

	 * because this might be a new mount point, and UBI allows only one

	 * read-write user at a time.

 A new mount point for already mounted UBIFS */

 We do not support atime */

 'fill_super()' opens ubi again so we must close it here */

/*

 * Inode slab cache constructor.

 Make sure node sizes are 8-byte aligned */

 Check min. node size */

 Defined node sizes */

	/*

	 * We use 2 bit wide bit-fields to store compression type, which should

	 * be amended if more compressors are added. The bit-fields are:

	 * @compr_type in 'struct ubifs_inode', @default_compr in

	 * 'struct ubifs_info' and @compr_type in 'struct ubifs_mount_opts'.

	/*

	 * We require that PAGE_SIZE is greater-than-or-equal-to

	 * UBIFS_BLOCK_SIZE. It is assumed that both are powers of 2.

 late_initcall to let compressors initialize first */

	/*

	 * Make sure all delayed rcu free inodes are flushed before we

	 * destroy cache.

 SPDX-License-Identifier: GPL-2.0

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2018 Pengutronix, Sascha Hauer <s.hauer@pengutronix.de>

/*

 * This file implements various helper functions for UBIFS authentication support

/**

 * ubifs_node_calc_hash - calculate the hash of a UBIFS node

 * @c: UBIFS file-system description object

 * @node: the node to calculate a hash for

 * @hash: the returned hash

 *

 * Returns 0 for success or a negative error code otherwise.

/**

 * ubifs_hash_calc_hmac - calculate a HMAC from a hash

 * @c: UBIFS file-system description object

 * @hash: the node to calculate a HMAC for

 * @hmac: the returned HMAC

 *

 * Returns 0 for success or a negative error code otherwise.

/**

 * ubifs_prepare_auth_node - Prepare an authentication node

 * @c: UBIFS file-system description object

 * @node: the node to calculate a hash for

 * @inhash: input hash of previous nodes

 *

 * This function prepares an authentication node for writing onto flash.

 * It creates a HMAC from the given input hash and writes it to the node.

 *

 * Returns 0 for success or a negative error code otherwise.

/**

 * __ubifs_hash_get_desc - get a descriptor suitable for hashing a node

 * @c: UBIFS file-system description object

 *

 * This function returns a descriptor suitable for hashing a node. Free after use

 * with kfree.

/**

 * ubifs_bad_hash - Report hash mismatches

 * @c: UBIFS file-system description object

 * @node: the node

 * @hash: the expected hash

 * @lnum: the LEB @node was read from

 * @offs: offset in LEB @node was read from

 *

 * This function reports a hash mismatch when a node has a different hash than

 * expected.

/**

 * __ubifs_node_check_hash - check the hash of a node against given hash

 * @c: UBIFS file-system description object

 * @node: the node

 * @expected: the expected hash

 *

 * This function calculates a hash over a node and compares it to the given hash.

 * Returns 0 if both hashes are equal or authentication is disabled, otherwise a

 * negative error code is returned.

/**

 * ubifs_sb_verify_signature - verify the signature of a superblock

 * @c: UBIFS file-system description object

 * @sup: The superblock node

 *

 * To support offline signed images the superblock can be signed with a

 * PKCS#7 signature. The signature is placed directly behind the superblock

 * node in an ubifs_sig_node.

 *

 * Returns 0 when the signature can be successfully verified or a negative

 * error code if not.

/**

 * ubifs_init_authentication - initialize UBIFS authentication support

 * @c: UBIFS file-system description object

 *

 * This function returns 0 for success or a negative error code otherwise.

 key was revoked before we acquired its semaphore */

/**

 * __ubifs_exit_authentication - release resource

 * @c: UBIFS file-system description object

 *

 * This function releases the authentication related resources.

/**

 * ubifs_node_calc_hmac - calculate the HMAC of a UBIFS node

 * @c: UBIFS file-system description object

 * @node: the node to insert a HMAC into.

 * @len: the length of the node

 * @ofs_hmac: the offset in the node where the HMAC is inserted

 * @hmac: returned HMAC

 *

 * This function calculates a HMAC of a UBIFS node. The HMAC is expected to be

 * embedded into the node, so this area is not covered by the HMAC. Also not

 * covered is the UBIFS_NODE_MAGIC and the CRC of the node.

 behind common node header CRC up to HMAC begin */

 behind HMAC, if any */

/**

 * __ubifs_node_insert_hmac - insert a HMAC into a UBIFS node

 * @c: UBIFS file-system description object

 * @node: the node to insert a HMAC into.

 * @len: the length of the node

 * @ofs_hmac: the offset in the node where the HMAC is inserted

 *

 * This function inserts a HMAC at offset @ofs_hmac into the node given in

 * @node.

 *

 * This function returns 0 for success or a negative error code otherwise.

/**

 * __ubifs_node_verify_hmac - verify the HMAC of UBIFS node

 * @c: UBIFS file-system description object

 * @node: the node to insert a HMAC into.

 * @len: the length of the node

 * @ofs_hmac: the offset in the node where the HMAC is inserted

 *

 * This function verifies the HMAC at offset @ofs_hmac of the node given in

 * @node. Returns 0 if successful or a negative error code otherwise.

/**

 * ubifs_hmac_wkm - Create a HMAC of the well known message

 * @c: UBIFS file-system description object

 * @hmac: The HMAC of the well known message

 *

 * This function creates a HMAC of a well known message. This is used

 * to check if the provided key is suitable to authenticate a UBIFS

 * image. This is only a convenience to the user to provide a better

 * error message when the wrong key is provided.

 *

 * This function returns 0 for success or a negative error code otherwise.

/*

 * ubifs_hmac_zero - test if a HMAC is zero

 * @c: UBIFS file-system description object

 * @hmac: the HMAC to test

 *

 * This function tests if a HMAC is zero and returns true if it is

 * and false otherwise.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Artem Bityutskiy (Битюцкий Артём)

 *          Adrian Hunter

/*

 * This file implements UBIFS extended attributes support.

 *

 * Extended attributes are implemented as regular inodes with attached data,

 * which limits extended attribute size to UBIFS block size (4KiB). Names of

 * extended attributes are described by extended attribute entries (xentries),

 * which are almost identical to directory entries, but have different key type.

 *

 * In other words, the situation with extended attributes is very similar to

 * directories. Indeed, any inode (but of course not xattr inodes) may have a

 * number of associated xentries, just like directory inodes have associated

 * directory entries. Extended attribute entries store the name of the extended

 * attribute, the host inode number, and the extended attribute inode number.

 * Similarly, direntries store the name, the parent and the target inode

 * numbers. Thus, most of the common UBIFS mechanisms may be re-used for

 * extended attributes.

 *

 * The number of extended attributes is not limited, but there is Linux

 * limitation on the maximum possible size of the list of all extended

 * attributes associated with an inode (%XATTR_LIST_MAX), so UBIFS makes sure

 * the sum of all extended attribute names of the inode does not exceed that

 * limit.

 *

 * Extended attributes are synchronous, which means they are written to the

 * flash media synchronously and there is no write-back for extended attribute

 * inodes. The extended attribute values are not stored in compressed form on

 * the media.

 *

 * Since extended attributes are represented by regular inodes, they are cached

 * in the VFS inode cache. The xentries are cached in the LNC cache (see

 * tnc.c).

 *

 * ACL support is not implemented.

/*

 * Extended attribute type constants.

 *

 * USER_XATTR: user extended attribute ("user.*")

 * TRUSTED_XATTR: trusted extended attribute ("trusted.*)

 * SECURITY_XATTR: security extended attribute ("security.*")

/**

 * create_xattr - create an extended attribute.

 * @c: UBIFS file-system description object

 * @host: host inode

 * @nm: extended attribute name

 * @value: extended attribute value

 * @size: size of extended attribute value

 *

 * This is a helper function which creates an extended attribute of name @nm

 * and value @value for inode @host. The host inode is also updated on flash

 * because the ctime and extended attribute accounting data changes. This

 * function returns zero in case of success and a negative error code in case

 * of failure.

	/*

	 * Linux limits the maximum size of the extended attribute names list

	 * to %XATTR_LIST_MAX. This means we should not allow creating more

	 * extended attributes if the name list becomes larger. This limitation

	 * is artificial for UBIFS, though.

 Re-define all operations to be "nothing" */

	/*

	 * We handle UBIFS_XATTR_NAME_ENCRYPTION_CONTEXT here because we

	 * have to set the UBIFS_CRYPT_FL flag on the host inode.

	 * To avoid multiple updates of the same inode in the same operation,

	 * let's do it here.

/**

 * change_xattr - change an extended attribute.

 * @c: UBIFS file-system description object

 * @host: host inode

 * @inode: extended attribute inode

 * @value: extended attribute value

 * @size: size of extended attribute value

 *

 * This helper function changes the value of extended attribute @inode with new

 * data from @value. Returns zero in case of success and a negative error code

 * in case of failure.

	/*

	 * It is important to write the host inode after the xattr inode

	 * because if the host inode gets synchronized (via 'fsync()'), then

	 * the extended attribute inode gets synchronized, because it goes

	 * before the host inode in the write-buffer.

	/*

	 * The extended attribute entries are stored in LNC, so multiple

	 * look-ups do not involve reading the flash.

 We are asked not to create the xattr */

 We are asked not to replace the xattr */

 If @buf is %NULL we are supposed to return the length */

 File encryption related xattrs are for internal use only */

 Show trusted namespace only for "power" users */

		/*

		 * We should return the minimum buffer size which will fit a

		 * null-terminated list of all the extended attribute names.

/**

 * ubifs_evict_xattr_inode - Evict an xattr inode.

 * @c: UBIFS file-system description object

 * @xattr_inum: xattr inode number

 *

 * When an inode that hosts xattrs is being removed we have to make sure

 * that cached inodes of the xattrs also get removed from the inode cache

 * otherwise we'd waste memory. This function looks up an inode from the

 * inode cache and clears the link counter such that iput() will evict

 * the inode.

 If @i_nlink is 0, 'iput()' will delete the inode */

		/*

		 * creating a new inode without holding the inode rwsem,

		 * no need to check whether inode is locked.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Adrian Hunter

 *          Artem Bityutskiy (Битюцкий Артём)

/*

 * This file implements garbage collection. The procedure for garbage collection

 * is different depending on whether a LEB as an index LEB (contains index

 * nodes) or not. For non-index LEBs, garbage collection finds a LEB which

 * contains a lot of dirty space (obsolete nodes), and copies the non-obsolete

 * nodes to the journal, at which point the garbage-collected LEB is free to be

 * reused. For index LEBs, garbage collection marks the non-obsolete index nodes

 * dirty in the TNC, and after the next commit, the garbage-collected LEB is

 * to be reused. Garbage collection will cause the number of dirty index nodes

 * to grow, however sufficient space is reserved for the index to ensure the

 * commit will never run out of space.

 *

 * Notes about dead watermark. At current UBIFS implementation we assume that

 * LEBs which have less than @c->dead_wm bytes of free + dirty space are full

 * and not worth garbage-collecting. The dead watermark is one min. I/O unit

 * size, or min. UBIFS node size, depending on what is greater. Indeed, UBIFS

 * Garbage Collector has to synchronize the GC head's write buffer before

 * returning, so this is about wasting one min. I/O unit. However, UBIFS GC can

 * actually reclaim even very small pieces of dirty space by garbage collecting

 * enough dirty LEBs, but we do not bother doing this at this implementation.

 *

 * Notes about dark watermark. The results of GC work depends on how big are

 * the UBIFS nodes GC deals with. Large nodes make GC waste more space. Indeed,

 * if GC move data from LEB A to LEB B and nodes in LEB A are large, GC would

 * have to waste large pieces of free space at the end of LEB B, because nodes

 * from LEB A would not fit. And the worst situation is when all nodes are of

 * maximum size. So dark watermark is the amount of free + dirty space in LEB

 * which are guaranteed to be reclaimable. If LEB has less space, the GC might

 * be unable to reclaim it. So, LEBs with free + dirty greater than dark

 * watermark are "good" LEBs from GC's point of view. The other LEBs are not so

 * good, and GC takes extra care when moving them.

/*

 * GC may need to move more than one LEB to make progress. The below constants

 * define "soft" and "hard" limits on the number of LEBs the garbage collector

 * may move.

/**

 * switch_gc_head - switch the garbage collection journal head.

 * @c: UBIFS file-system description object

 *

 * This function switch the GC head to the next LEB which is reserved in

 * @c->gc_lnum. Returns %0 in case of success, %-EAGAIN if commit is required,

 * and other negative error code in case of failures.

	/*

	 * The GC write-buffer was synchronized, we may safely unmap

	 * 'c->gc_lnum'.

/**

 * data_nodes_cmp - compare 2 data nodes.

 * @priv: UBIFS file-system description object

 * @a: first data node

 * @b: second data node

 *

 * This function compares data nodes @a and @b. Returns %1 if @a has greater

 * inode or block number, and %-1 otherwise.

/*

 * nondata_nodes_cmp - compare 2 non-data nodes.

 * @priv: UBIFS file-system description object

 * @a: first node

 * @a: second node

 *

 * This function compares nodes @a and @b. It makes sure that inode nodes go

 * first and sorted by length in descending order. Directory entry nodes go

 * after inode nodes and are sorted in ascending hash valuer order.

 Inodes go before directory entries */

/**

 * sort_nodes - sort nodes for GC.

 * @c: UBIFS file-system description object

 * @sleb: describes nodes to sort and contains the result on exit

 * @nondata: contains non-data nodes on exit

 * @min: minimum node size is returned here

 *

 * This function sorts the list of inodes to garbage collect. First of all, it

 * kills obsolete nodes and separates data and non-data nodes to the

 * @sleb->nodes and @nondata lists correspondingly.

 *

 * Data nodes are then sorted in block number order - this is important for

 * bulk-read; data nodes with lower inode number go before data nodes with

 * higher inode number, and data nodes with lower block number go before data

 * nodes with higher block number;

 *

 * Non-data nodes are sorted as follows.

 *   o First go inode nodes - they are sorted in descending length order.

 *   o Then go directory entry nodes - they are sorted in hash order, which

 *     should supposedly optimize 'readdir()'. Direntry nodes with lower parent

 *     inode number go before direntry nodes with higher parent inode number,

 *     and direntry nodes with lower name hash values go before direntry nodes

 *     with higher name hash values.

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure.

 Separate data nodes and non-data nodes */

 Probably truncation node, zap it */

 The node is obsolete, remove it from the list */

 Sort data and non-data nodes */

/**

 * move_node - move a node.

 * @c: UBIFS file-system description object

 * @sleb: describes the LEB to move nodes from

 * @snod: the mode to move

 * @wbuf: write-buffer to move node to

 *

 * This function moves node @snod to @wbuf, changes TNC correspondingly, and

 * destroys @snod. Returns zero in case of success and a negative error code in

 * case of failure.

/**

 * move_nodes - move nodes.

 * @c: UBIFS file-system description object

 * @sleb: describes the LEB to move nodes from

 *

 * This function moves valid nodes from data LEB described by @sleb to the GC

 * journal head. This function returns zero in case of success, %-EAGAIN if

 * commit is required, and other negative error codes in case of other

 * failures.

		/*

		 * The GC journal head is not set, because it is the first GC

		 * invocation since mount.

 Write nodes to their new location. Use the first-fit strategy */

 Move data nodes */

				/*

				 * Do not skip data nodes in order to optimize

				 * bulk-read.

 Move non-data nodes */

				/*

				 * Keep going only if this is an inode with

				 * some data. Otherwise stop and switch the GC

				 * head. IOW, we assume that data-less inode

				 * nodes and direntry nodes are roughly of the

				 * same size.

		/*

		 * Waste the rest of the space in the LEB and switch to the

		 * next LEB.

/**

 * gc_sync_wbufs - sync write-buffers for GC.

 * @c: UBIFS file-system description object

 *

 * We must guarantee that obsoleting nodes are on flash. Unfortunately they may

 * be in a write-buffer instead. That is, a node could be written to a

 * write-buffer, obsoleting another node in a LEB that is GC'd. If that LEB is

 * erased before the write-buffer is sync'd and then there is an unclean

 * unmount, then an existing node is lost. To avoid this, we sync all

 * write-buffers.

 *

 * This function returns %0 on success or a negative error code on failure.

/**

 * ubifs_garbage_collect_leb - garbage-collect a logical eraseblock.

 * @c: UBIFS file-system description object

 * @lp: describes the LEB to garbage collect

 *

 * This function garbage-collects an LEB and returns one of the @LEB_FREED,

 * @LEB_RETAINED, etc positive codes in case of success, %-EAGAIN if commit is

 * required, and other negative error codes in case of failures.

 Special case - a free LEB  */

			/*

			 * Write buffers must be sync'd before unmapping

			 * freeable LEBs, because one of them may contain data

			 * which obsoletes something in 'lp->lnum'.

	/*

	 * We scan the entire LEB even though we only really need to scan up to

	 * (c->leb_size - lp->free).

		/*

		 * Don't release the LEB until after the next commit, because

		 * it may contain data which is needed for recovery. So

		 * although we freed this LEB, it will become usable only after

		 * the commit.

 Allow for races with TNC */

 We may have moved at least some nodes so allow for races with TNC */

/**

 * ubifs_garbage_collect - UBIFS garbage collector.

 * @c: UBIFS file-system description object

 * @anyway: do GC even if there are free LEBs

 *

 * This function does out-of-place garbage collection. The return codes are:

 *   o positive LEB number if the LEB has been freed and may be used;

 *   o %-EAGAIN if the caller has to run commit;

 *   o %-ENOSPC if GC failed to make any progress;

 *   o other negative error codes in case of other errors.

 *

 * Garbage collector writes data to the journal when GC'ing data LEBs, and just

 * marking indexing nodes dirty when GC'ing indexing LEBs. Thus, at some point

 * commit may be required. But commit cannot be run from inside GC, because the

 * caller might be holding the commit lock, so %-EAGAIN is returned instead;

 * And this error code means that the caller has to run commit, and re-run GC

 * if there is still no free space.

 *

 * There are many reasons why this function may return %-EAGAIN:

 * o the log is full and there is no space to write an LEB reference for

 *   @c->gc_lnum;

 * o the journal is too large and exceeds size limitations;

 * o GC moved indexing LEBs, but they can be used only after the commit;

 * o the shrinker fails to find clean znodes to free and requests the commit;

 * o etc.

 *

 * Note, if the file-system is close to be full, this function may return

 * %-EAGAIN infinitely, so the caller has to limit amount of re-invocations of

 * the function. E.g., this happens if the limits on the journal size are too

 * tough and GC writes too much to the journal before an LEB is freed. This

 * might also mean that the journal is too large, and the TNC becomes to big,

 * so that the shrinker is constantly called, finds not clean znodes to free,

 * and requests commit. Well, this may also happen if the journal is all right,

 * but another kernel process consumes too much memory. Anyway, infinite

 * %-EAGAIN may happen, but in some extreme/misconfiguration cases.

 We expect the write-buffer to be empty on entry */

 Give the commit an opportunity to run */

			/*

			 * We've done enough iterations. Indexing LEBs were

			 * moved and will be available after the commit.

			/*

			 * We've moved too many LEBs and have not made

			 * progress, give up.

		/*

		 * Empty and freeable LEBs can turn up while we waited for

		 * the wbuf lock, or while we have been running GC. In that

		 * case, we should just return one of those instead of

		 * continuing to GC dirty LEBs. Hence we request

		 * 'ubifs_find_dirty_leb()' to return an empty LEB if it can.

				/*

				 * This is not error, so we have to return the

				 * LEB to lprops. But if 'ubifs_return_leb()'

				 * fails, its failure code is propagated to the

				 * caller instead of the original '-EAGAIN'.

 An LEB has been freed and is ready for use */

			/*

			 * This was an indexing LEB and it cannot be

			 * immediately used. And instead of requesting the

			 * commit straight away, we try to garbage collect some

			 * more.

 GC makes progress, keep working */

		/*

		 * GC moved an LEB bud have not done any progress. This means

		 * that the previous GC head LEB contained too few free space

		 * and the LEB which was GC'ed contained only large nodes which

		 * did not fit that space.

		 *

		 * We can do 2 things:

		 * 1. pick another LEB in a hope it'll contain a small node

		 *    which will fit the space we have at the end of current GC

		 *    head LEB, but there is no guarantee, so we try this out

		 *    unless we have already been working for too long;

		 * 2. request an LEB with more dirty space, which will force

		 *    'ubifs_find_dirty_leb()' to start scanning the lprops

		 *    table, instead of just picking one from the heap

		 *    (previously it already picked the dirtiest LEB).

/**

 * ubifs_gc_start_commit - garbage collection at start of commit.

 * @c: UBIFS file-system description object

 *

 * If a LEB has only dirty and free space, then we may safely unmap it and make

 * it free.  Note, we cannot do this with indexing LEBs because dirty space may

 * correspond index nodes that are required for recovery.  In that case, the

 * LEB cannot be unmapped until after the next commit.

 *

 * This function returns %0 upon success and a negative error code upon failure.

	/*

	 * Unmap (non-index) freeable LEBs. Note that recovery requires that all

	 * wbufs are sync'd before this, which is done in 'do_commit()'.

 Mark GC'd index LEBs OK to unmap after this commit finishes */

 Record index freeable LEBs for unmapping after commit */

 Don't release the LEB until after the next commit */

/**

 * ubifs_gc_end_commit - garbage collection at end of commit.

 * @c: UBIFS file-system description object

 *

 * This function completes out-of-place garbage collection of index LEBs.

/**

 * ubifs_destroy_idx_gc - destroy idx_gc list.

 * @c: UBIFS file-system description object

 *

 * This function destroys the @c->idx_gc list. It is called when unmounting

 * so locks are not needed. Returns zero in case of success and a negative

 * error code in case of failure.

/**

 * ubifs_get_idx_gc_leb - get a LEB from GC'd index LEB list.

 * @c: UBIFS file-system description object

 *

 * Called during start commit so locks are not needed.

 c->idx_gc_cnt is updated by the caller when lprops are updated */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Adrian Hunter

 *          Artem Bityutskiy (Битюцкий Артём)

/*

 * This file contains journal replay code. It runs when the file-system is being

 * mounted and requires no locking.

 *

 * The larger is the journal, the longer it takes to scan it, so the longer it

 * takes to mount UBIFS. This is why the journal has limited size which may be

 * changed depending on the system requirements. But a larger journal gives

 * faster I/O speed because it writes the index less frequently. So this is a

 * trade-off. Also, the journal is indexed by the in-memory index (TNC), so the

 * larger is the journal, the more memory its index may consume.

/**

 * struct replay_entry - replay list entry.

 * @lnum: logical eraseblock number of the node

 * @offs: node offset

 * @len: node length

 * @deletion: non-zero if this entry corresponds to a node deletion

 * @sqnum: node sequence number

 * @list: links the replay list

 * @key: node key

 * @nm: directory entry name

 * @old_size: truncation old size

 * @new_size: truncation new size

 *

 * The replay process first scans all buds and builds the replay list, then

 * sorts the replay list in nodes sequence number order, and then inserts all

 * the replay entries to the TNC.

/**

 * struct bud_entry - entry in the list of buds to replay.

 * @list: next bud in the list

 * @bud: bud description object

 * @sqnum: reference node sequence number

 * @free: free bytes in the bud

 * @dirty: dirty bytes in the bud

/**

 * set_bud_lprops - set free and dirty space used by a bud.

 * @c: UBIFS file-system description object

 * @b: bud entry which describes the bud

 *

 * This function makes sure the LEB properties of bud @b are set correctly

 * after the replay. Returns zero in case of success and a negative error code

 * in case of failure.

		/*

		 * The LEB was added to the journal with a starting offset of

		 * zero which means the LEB must have been empty. The LEB

		 * property values should be @lp->free == @c->leb_size and

		 * @lp->dirty == 0, but that is not the case. The reason is that

		 * the LEB had been garbage collected before it became the bud,

		 * and there was not commit inbetween. The garbage collector

		 * resets the free and dirty space without recording it

		 * anywhere except lprops, so if there was no commit then

		 * lprops does not have that information.

		 *

		 * We do not need to adjust free space because the scan has told

		 * us the exact value which is recorded in the replay entry as

		 * @b->free.

		 *

		 * However we do need to subtract from the dirty space the

		 * amount of space that the garbage collector reclaimed, which

		 * is the whole LEB minus the amount of space that was free.

		/*

		 * If the replay order was perfect the dirty space would now be

		 * zero. The order is not perfect because the journal heads

		 * race with each other. This is not a problem but is does mean

		 * that the dirty space may temporarily exceed c->leb_size

		 * during the replay.

 Make sure the journal head points to the latest bud */

/**

 * set_buds_lprops - set free and dirty space for all replayed buds.

 * @c: UBIFS file-system description object

 *

 * This function sets LEB properties for all replayed buds. Returns zero in

 * case of success and a negative error code in case of failure.

/**

 * trun_remove_range - apply a replay entry for a truncation to the TNC.

 * @c: UBIFS file-system description object

 * @r: replay entry of truncation

/**

 * inode_still_linked - check whether inode in question will be re-linked.

 * @c: UBIFS file-system description object

 * @rino: replay entry to test

 *

 * O_TMPFILE files can be re-linked, this means link count goes from 0 to 1.

 * This case needs special care, otherwise all references to the inode will

 * be removed upon the first replay entry of an inode with link count 0

 * is found.

	/*

	 * Find the most recent entry for the inode behind @rino and check

	 * whether it is a deletion.

/**

 * apply_replay_entry - apply a replay entry to the TNC.

 * @c: UBIFS file-system description object

 * @r: replay entry to apply

 *

 * Apply a replay entry to the TNC.

/**

 * replay_entries_cmp - compare 2 replay entries.

 * @priv: UBIFS file-system description object

 * @a: first replay entry

 * @b: second replay entry

 *

 * This is a comparios function for 'list_sort()' which compares 2 replay

 * entries @a and @b by comparing their sequence number.  Returns %1 if @a has

 * greater sequence number and %-1 otherwise.

/**

 * apply_replay_list - apply the replay list to the TNC.

 * @c: UBIFS file-system description object

 *

 * Apply all entries in the replay list to the TNC. Returns zero in case of

 * success and a negative error code in case of failure.

/**

 * destroy_replay_list - destroy the replay.

 * @c: UBIFS file-system description object

 *

 * Destroy the replay list.

/**

 * insert_node - insert a node to the replay list

 * @c: UBIFS file-system description object

 * @lnum: node logical eraseblock number

 * @offs: node offset

 * @len: node length

 * @key: node key

 * @sqnum: sequence number

 * @deletion: non-zero if this is a deletion

 * @used: number of bytes in use in a LEB

 * @old_size: truncation old size

 * @new_size: truncation new size

 *

 * This function inserts a scanned non-direntry node to the replay list. The

 * replay list contains @struct replay_entry elements, and we sort this list in

 * sequence number order before applying it. The replay list is applied at the

 * very end of the replay process. Since the list is sorted in sequence number

 * order, the older modifications are applied first. This function returns zero

 * in case of success and a negative error code in case of failure.

/**

 * insert_dent - insert a directory entry node into the replay list.

 * @c: UBIFS file-system description object

 * @lnum: node logical eraseblock number

 * @offs: node offset

 * @len: node length

 * @key: node key

 * @name: directory entry name

 * @nlen: directory entry name length

 * @sqnum: sequence number

 * @deletion: non-zero if this is a deletion

 * @used: number of bytes in use in a LEB

 *

 * This function inserts a scanned directory entry node or an extended

 * attribute entry to the replay list. Returns zero in case of success and a

 * negative error code in case of failure.

/**

 * ubifs_validate_entry - validate directory or extended attribute entry node.

 * @c: UBIFS file-system description object

 * @dent: the node to validate

 *

 * This function validates directory or extended attribute entry node @dent.

 * Returns zero if the node is all right and a %-EINVAL if not.

/**

 * is_last_bud - check if the bud is the last in the journal head.

 * @c: UBIFS file-system description object

 * @bud: bud description object

 *

 * This function checks if bud @bud is the last bud in its journal head. This

 * information is then used by 'replay_bud()' to decide whether the bud can

 * have corruptions or not. Indeed, only last buds can be corrupted by power

 * cuts. Returns %1 if this is the last bud, and %0 if not.

	/*

	 * The following is a quirk to make sure we work correctly with UBIFS

	 * images used with older UBIFS.

	 *

	 * Normally, the last bud will be the last in the journal head's list

	 * of bud. However, there is one exception if the UBIFS image belongs

	 * to older UBIFS. This is fairly unlikely: one would need to use old

	 * UBIFS, then have a power cut exactly at the right point, and then

	 * try to mount this image with new UBIFS.

	 *

	 * The exception is: it is possible to have 2 buds A and B, A goes

	 * before B, and B is the last, bud B is contains no data, and bud A is

	 * corrupted at the end. The reason is that in older versions when the

	 * journal code switched the next bud (from A to B), it first added a

	 * log reference node for the new bud (B), and only after this it

	 * synchronized the write-buffer of current bud (A). But later this was

	 * changed and UBIFS started to always synchronize the write-buffer of

	 * the bud (A) before writing the log reference for the new bud (B).

	 *

	 * But because older UBIFS always synchronized A's write-buffer before

	 * writing to B, we can recognize this exceptional situation but

	 * checking the contents of bud B - if it is empty, then A can be

	 * treated as the last and we can recover it.

	 *

	 * TODO: remove this piece of code in a couple of years (today it is

	 * 16.05.2011).

 authenticate_sleb_hash is split out for stack usage */

/**

 * authenticate_sleb - authenticate one scan LEB

 * @c: UBIFS file-system description object

 * @sleb: the scan LEB to authenticate

 * @log_hash:

 * @is_last: if true, this is the last LEB

 *

 * This function iterates over the buds of a single LEB authenticating all buds

 * with the authentication nodes on this LEB. Authentication nodes are written

 * after some buds and contain a HMAC covering the authentication node itself

 * and the buds between the last authentication node and the current

 * authentication node. It can happen that the last buds cannot be authenticated

 * because a powercut happened when some nodes were written but not the

 * corresponding authentication node. This function returns the number of nodes

 * that could be authenticated or a negative error code.

	/*

	 * A powercut can happen when some nodes were written, but not yet

	 * the corresponding authentication node. This may only happen on

	 * the last bud though.

/**

 * replay_bud - replay a bud logical eraseblock.

 * @c: UBIFS file-system description object

 * @b: bud entry which describes the bud

 *

 * This function replays bud @bud, recovers it if needed, and adds all nodes

 * from this bud to the replay list. Returns zero in case of success and a

 * negative error code in case of failure.

		/*

		 * Recover only last LEBs in the journal heads, because power

		 * cuts may cause corruptions only in these LEBs, because only

		 * these LEBs could possibly be written to at the power cut

		 * time.

	/*

	 * The bud does not have to start from offset zero - the beginning of

	 * the 'lnum' LEB may contain previously committed data. One of the

	 * things we have to do in replay is to correctly update lprops with

	 * newer information about this LEB.

	 *

	 * At this point lprops thinks that this LEB has 'c->leb_size - offs'

	 * bytes of free space because it only contain information about

	 * committed data.

	 *

	 * But we know that real amount of free space is 'c->leb_size -

	 * sleb->endpt', and the space in the 'lnum' LEB between 'offs' and

	 * 'sleb->endpt' is used by bud data. We have to correctly calculate

	 * how much of these data are dirty and update lprops with this

	 * information.

	 *

	 * The dirt in that LEB region is comprised of padding nodes, deletion

	 * nodes, truncation nodes and nodes which are obsoleted by subsequent

	 * nodes in this LEB. So instead of calculating clean space, we

	 * calculate used space ('used' variable).

 Validate truncation node */

			/*

			 * Create a fake truncation key just to use the same

			 * functions which expect nodes to have keys.

/**

 * replay_buds - replay all buds.

 * @c: UBIFS file-system description object

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure.

/**

 * destroy_bud_list - destroy the list of buds to replay.

 * @c: UBIFS file-system description object

/**

 * add_replay_bud - add a bud to the list of buds to replay.

 * @c: UBIFS file-system description object

 * @lnum: bud logical eraseblock number to replay

 * @offs: bud start offset

 * @jhead: journal head to which this bud belongs

 * @sqnum: reference node sequence number

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure.

/**

 * validate_ref - validate a reference node.

 * @c: UBIFS file-system description object

 * @ref: the reference node to validate

 *

 * This function returns %1 if a bud reference already exists for the LEB. %0 is

 * returned if the reference node is new, otherwise %-EINVAL is returned if

 * validation failed.

	/*

	 * ref->offs may point to the end of LEB when the journal head points

	 * to the end of LEB and we write reference node for it during commit.

	 * So this is why we require 'offs > c->leb_size'.

 Make sure we have not already looked at this bud */

/**

 * replay_log_leb - replay a log logical eraseblock.

 * @c: UBIFS file-system description object

 * @lnum: log logical eraseblock to replay

 * @offs: offset to start replaying from

 * @sbuf: scan buffer

 *

 * This function replays a log LEB and returns zero in case of success, %1 if

 * this is the last LEB in the log, and a negative error code in case of

 * failure.

		/*

		 * Note, the below function will recover this log LEB only if

		 * it is the last, because unclean reboots can possibly corrupt

		 * only the tail of the log.

		/*

		 * This is the first log LEB we are looking at, make sure that

		 * the first node is a commit start node. Also record its

		 * sequence number so that UBIFS can determine where the log

		 * ends, because all nodes which were have higher sequence

		 * numbers.

		/*

		 * This means that we reached end of log and now

		 * look to the older log data, which was already

		 * committed but the eraseblock was not erased (UBIFS

		 * only un-maps it). So this basically means we have to

		 * exit with "end of log" code.

 Make sure the first node sits at offset zero of the LEB */

 Already have this bud */

 Make sure it sits at the beginning of LEB */

/**

 * take_ihead - update the status of the index head in lprops to 'taken'.

 * @c: UBIFS file-system description object

 *

 * This function returns the amount of free space in the index head LEB or a

 * negative error code.

/**

 * ubifs_replay_journal - replay journal.

 * @c: UBIFS file-system description object

 *

 * This function scans the journal, replays and cleans it up. It makes sure all

 * memory data structures related to uncommitted journal are built (dirty TNC

 * tree, tree of buds, modified lprops, etc).

 Update the status of the index head in lprops to 'taken' */

 Error code */

 We hit the end of the log */

			/*

			 * The head of the log must always start with the

			 * "commit start" node on a properly formatted UBIFS.

			 * But we found no nodes at all, which means that

			 * something went wrong and we cannot proceed mounting

			 * the file-system.

	/*

	 * UBIFS budgeting calculations use @c->bi.uncommitted_idx variable

	 * to roughly estimate index growth. Things like @c->bi.min_idx_lebs

	 * depend on it. This means we have to initialize it to make sure

	 * budgeting works properly.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Artem Bityutskiy (Битюцкий Артём)

 *          Adrian Hunter

/*

 * This file implements UBIFS journal.

 *

 * The journal consists of 2 parts - the log and bud LEBs. The log has fixed

 * length and position, while a bud logical eraseblock is any LEB in the main

 * area. Buds contain file system data - data nodes, inode nodes, etc. The log

 * contains only references to buds and some other stuff like commit

 * start node. The idea is that when we commit the journal, we do

 * not copy the data, the buds just become indexed. Since after the commit the

 * nodes in bud eraseblocks become leaf nodes of the file system index tree, we

 * use term "bud". Analogy is obvious, bud eraseblocks contain nodes which will

 * become leafs in the future.

 *

 * The journal is multi-headed because we want to write data to the journal as

 * optimally as possible. It is nice to have nodes belonging to the same inode

 * in one LEB, so we may write data owned by different inodes to different

 * journal heads, although at present only one data head is used.

 *

 * For recovery reasons, the base head contains all inode nodes, all directory

 * entry nodes and all truncate nodes. This means that the other heads contain

 * only data nodes.

 *

 * Bud LEBs may be half-indexed. For example, if the bud was not full at the

 * time of commit, the bud is retained to continue to be used in the journal,

 * even though the "front" of the LEB is now indexed. In that case, the log

 * reference contains the offset where the bud starts for the purposes of the

 * journal.

 *

 * The journal size has to be limited, because the larger is the journal, the

 * longer it takes to mount UBIFS (scanning the journal) and the more memory it

 * takes (indexing in the TNC).

 *

 * All the journal write operations like 'ubifs_jnl_update()' here, which write

 * multiple UBIFS nodes to the journal at one go, are atomic with respect to

 * unclean reboots. Should the unclean reboot happen, the recovery code drops

 * all the nodes.

/**

 * zero_ino_node_unused - zero out unused fields of an on-flash inode node.

 * @ino: the inode to zero out

/**

 * zero_dent_node_unused - zero out unused fields of an on-flash directory

 *                         entry node.

 * @dent: the directory entry to zero out

/**

 * zero_trun_node_unused - zero out unused fields of an on-flash truncation

 *                         node.

 * @trun: the truncation node to zero out

/**

 * reserve_space - reserve space in the journal.

 * @c: UBIFS file-system description object

 * @jhead: journal head number

 * @len: node length

 *

 * This function reserves space in journal head @head. If the reservation

 * succeeded, the journal head stays locked and later has to be unlocked using

 * 'release_head()'. Returns zero in case of success, %-EAGAIN if commit has to

 * be done, and other negative error codes in case of other failures.

	/*

	 * Typically, the base head has smaller nodes written to it, so it is

	 * better to try to allocate space at the ends of eraseblocks. This is

	 * what the squeeze parameter does.

	/*

	 * Write buffer wasn't seek'ed or there is no enough space - look for an

	 * LEB with some empty space.

	/*

	 * No free space, we have to run garbage collector to make

	 * some. But the write-buffer mutex has to be unlocked because

	 * GC also takes it.

		/*

		 * GC could not make a free LEB. But someone else may

		 * have allocated new bud for this journal head,

		 * because we dropped @wbuf->io_mutex, so try once

		 * again.

		/*

		 * Someone else has switched the journal head and we have

		 * enough space now. This happens when more than one process is

		 * trying to write to the same journal head at the same time.

	/*

	 * Make sure we synchronize the write-buffer before we add the new bud

	 * to the log. Otherwise we may have a power cut after the log

	 * reference node for the last bud (@lnum) is written but before the

	 * write-buffer data are written to the next-to-last bud

	 * (@wbuf->lnum). And the effect would be that the recovery would see

	 * that there is corruption in the next-to-last bud.

 An error occurred and the LEB has to be returned to lprops */

		/*

		 * Return original error code only if it is not %-EAGAIN,

		 * which is not really an error. Otherwise, return the error

		 * code of 'ubifs_return_leb()'.

/**

 * write_head - write data to a journal head.

 * @c: UBIFS file-system description object

 * @jhead: journal head

 * @buf: buffer to write

 * @len: length to write

 * @lnum: LEB number written is returned here

 * @offs: offset written is returned here

 * @sync: non-zero if the write-buffer has to by synchronized

 *

 * This function writes data to the reserved space of journal head @jhead.

 * Returns zero in case of success and a negative error code in case of

 * failure.

/**

 * make_reservation - reserve journal space.

 * @c: UBIFS file-system description object

 * @jhead: journal head

 * @len: how many bytes to reserve

 *

 * This function makes space reservation in journal head @jhead. The function

 * takes the commit lock and locks the journal head, and the caller has to

 * unlock the head and finish the reservation with 'finish_reservation()'.

 * Returns zero in case of success and a negative error code in case of

 * failure.

 *

 * Note, the journal head may be unlocked as soon as the data is written, while

 * the commit lock has to be released after the data has been added to the

 * TNC.

 c->commit_sem will get released via finish_reservation(). */

		/*

		 * GC could not make any progress. We should try to commit

		 * once because it could make some dirty space and GC would

		 * make progress, so make the error -EAGAIN so that the below

		 * will commit and re-try.

		/*

		 * This means that the budgeting is incorrect. We always have

		 * to be able to write to the media, because all operations are

		 * budgeted. Deletions are not budgeted, though, but we reserve

		 * an extra LEB for them.

	/*

	 * -EAGAIN means that the journal is full or too large, or the above

	 * code wants to do one commit. Do this and re-try.

		/*

		 * This should not happen unless the journal size limitations

		 * are too tough.

 This are some budgeting problems, print useful information */

/**

 * release_head - release a journal head.

 * @c: UBIFS file-system description object

 * @jhead: journal head

 *

 * This function releases journal head @jhead which was locked by

 * the 'make_reservation()' function. It has to be called after each successful

 * 'make_reservation()' invocation.

/**

 * finish_reservation - finish a reservation.

 * @c: UBIFS file-system description object

 *

 * This function finishes journal space reservation. It must be called after

 * 'make_reservation()'.

/**

 * get_dent_type - translate VFS inode mode to UBIFS directory entry type.

 * @mode: inode mode

/**

 * pack_inode - pack an inode node.

 * @c: UBIFS file-system description object

 * @ino: buffer in which to pack inode node

 * @inode: inode to pack

 * @last: indicates the last node of the group

	/*

	 * Drop the attached data if this is a deletion inode, the data is not

	 * needed anymore.

/**

 * mark_inode_clean - mark UBIFS inode as clean.

 * @c: UBIFS file-system description object

 * @ui: UBIFS inode to mark as clean

 *

 * This helper function marks UBIFS inode @ui as clean by cleaning the

 * @ui->dirty flag and releasing its budget. Note, VFS may still treat the

 * inode as dirty and try to write it back, but 'ubifs_write_inode()' would

 * just do nothing.

/**

 * ubifs_jnl_update - update inode.

 * @c: UBIFS file-system description object

 * @dir: parent inode or host inode in case of extended attributes

 * @nm: directory entry name

 * @inode: inode to update

 * @deletion: indicates a directory entry deletion i.e unlink or rmdir

 * @xent: non-zero if the directory entry is an extended attribute entry

 *

 * This function updates an inode by writing a directory entry (or extended

 * attribute entry), the inode itself, and the parent directory inode (or the

 * host inode) to the journal.

 *

 * The function writes the host inode @dir last, which is important in case of

 * extended attributes. Indeed, then we guarantee that if the host inode gets

 * synchronized (with 'fsync()'), and the write-buffer it sits in gets flushed,

 * the extended attribute inode gets flushed too. And this is exactly what the

 * user expects - synchronizing the host inode synchronizes its extended

 * attributes. Similarly, this guarantees that if @dir is synchronized, its

 * directory entry corresponding to @nm gets synchronized too.

 *

 * If the inode (@inode) or the parent directory (@dir) are synchronous, this

 * function synchronizes the write-buffer.

 *

 * This function marks the @dir and @inode inodes as clean and returns zero on

 * success. In case of failure, a negative error code is returned.

	/*

	 * If the last reference to the inode is being deleted, then there is

	 * no need to attach and write inode data, it is being deleted anyway.

	 * And if the inode is being deleted, no need to synchronize

	 * write-buffer even if the inode is synchronous.

 Make sure to also account for extended attributes */

 Make reservation before allocating sequence numbers */

	/*

	 * Note, we do not remove the inode from TNC even if the last reference

	 * to it has just been deleted, because the inode may still be opened.

	 * Instead, the inode has been added to orphan lists and the orphan

	 * subsystem will take further care about it.

/**

 * ubifs_jnl_write_data - write a data node to the journal.

 * @c: UBIFS file-system description object

 * @inode: inode the data node belongs to

 * @key: node key

 * @buf: buffer to write

 * @len: data length (must not exceed %UBIFS_BLOCK_SIZE)

 *

 * This function writes a data node to the journal. Returns %0 if the data node

 * was successfully written, and a negative error code in case of failure.

		/*

		 * Fall-back to the write reserve buffer. Note, we might be

		 * currently on the memory reclaim path, when the kernel is

		 * trying to free some memory by writing out dirty pages. The

		 * write reserve buffer helps us to guarantee that we are

		 * always able to write the data.

 Compression is disabled for this inode */

 Make reservation before allocating sequence numbers */

/**

 * ubifs_jnl_write_inode - flush inode to the journal.

 * @c: UBIFS file-system description object

 * @inode: inode to flush

 *

 * This function writes inode @inode to the journal. If the inode is

 * synchronous, it also synchronizes the write-buffer. Returns zero in case of

 * success and a negative error code in case of failure.

	/*

	 * If the inode is being deleted, do not write the attached data. No

	 * need to synchronize the write-buffer either.

 Make reservation before allocating sequence numbers */

/**

 * ubifs_jnl_delete_inode - delete an inode.

 * @c: UBIFS file-system description object

 * @inode: inode to delete

 *

 * This function deletes inode @inode which includes removing it from orphans,

 * deleting it from TNC and, in some cases, writing a deletion inode to the

 * journal.

 *

 * When regular file inodes are unlinked or a directory inode is removed, the

 * 'ubifs_jnl_update()' function writes a corresponding deletion inode and

 * direntry to the media, and adds the inode to orphans. After this, when the

 * last reference to this inode has been dropped, this function is called. In

 * general, it has to write one more deletion inode to the media, because if

 * a commit happened between 'ubifs_jnl_update()' and

 * 'ubifs_jnl_delete_inode()', the deletion inode is not in the journal

 * anymore, and in fact it might not be on the flash anymore, because it might

 * have been garbage-collected already. And for optimization reasons UBIFS does

 * not read the orphan area if it has been unmounted cleanly, so it would have

 * no indication in the journal that there is a deleted inode which has to be

 * removed from TNC.

 *

 * However, if there was no commit between 'ubifs_jnl_update()' and

 * 'ubifs_jnl_delete_inode()', then there is no need to write the deletion

 * inode to the media for the second time. And this is quite a typical case.

 *

 * This function returns zero in case of success and a negative error code in

 * case of failure.

 A commit happened for sure or inode hosts xattrs */

	/*

	 * Check commit number again, because the first test has been done

	 * without @c->commit_sem, so a commit might have happened.

/**

 * ubifs_jnl_xrename - cross rename two directory entries.

 * @c: UBIFS file-system description object

 * @fst_dir: parent inode of 1st directory entry to exchange

 * @fst_inode: 1st inode to exchange

 * @fst_nm: name of 1st inode to exchange

 * @snd_dir: parent inode of 2nd directory entry to exchange

 * @snd_inode: 2nd inode to exchange

 * @snd_nm: name of 2nd inode to exchange

 * @sync: non-zero if the write-buffer has to be synchronized

 *

 * This function implements the cross rename operation which may involve

 * writing 2 inodes and 2 directory entries. It marks the written inodes as clean

 * and returns zero on success. In case of failure, a negative error code is

 * returned.

 Make reservation before allocating sequence numbers */

 Make new dent for 1st entry */

 Make new dent for 2nd entry */

/**

 * ubifs_jnl_rename - rename a directory entry.

 * @c: UBIFS file-system description object

 * @old_dir: parent inode of directory entry to rename

 * @old_dentry: directory entry to rename

 * @new_dir: parent inode of directory entry to rename

 * @new_dentry: new directory entry (or directory entry to replace)

 * @sync: non-zero if the write-buffer has to be synchronized

 *

 * This function implements the re-name operation which may involve writing up

 * to 4 inodes and 2 directory entries. It marks the written inodes as clean

 * and returns zero on success. In case of failure, a negative error code is

 * returned.

 Make reservation before allocating sequence numbers */

 Make new dent */

 Make deletion dent */

/**

 * truncate_data_node - re-compress/encrypt a truncated data node.

 * @c: UBIFS file-system description object

 * @inode: inode which refers to the data node

 * @block: data block number

 * @dn: data node to re-compress

 * @new_len: new length

 *

 * This function is used when an inode is truncated and the last data node of

 * the inode has to be re-compressed/encrypted and re-written.

/**

 * ubifs_jnl_truncate - update the journal for a truncation.

 * @c: UBIFS file-system description object

 * @inode: inode to truncate

 * @old_size: old size

 * @new_size: new size

 *

 * When the size of a file decreases due to truncation, a truncation node is

 * written, the journal tree is updated, and the last data block is re-written

 * if it has been affected. The inode is also updated in order to synchronize

 * the new inode size.

 *

 * This function marks the inode as clean and returns zero on success. In case

 * of failure, a negative error code is returned.

 Get last data block so it can be truncated */

 Not found (so it is a hole) */

 Nothing to do */

 Must make reservation before allocating sequence numbers */

/**

 * ubifs_jnl_delete_xattr - delete an extended attribute.

 * @c: UBIFS file-system description object

 * @host: host inode

 * @inode: extended attribute inode

 * @nm: extended attribute entry name

 *

 * This function delete an extended attribute which is very similar to

 * un-linking regular files - it writes a deletion xentry, a deletion inode and

 * updates the target inode. Returns zero in case of success and a negative

 * error code in case of failure.

	/*

	 * Since we are deleting the inode, we do not bother to attach any data

	 * to it and assume its length is %UBIFS_INO_NODE_SZ.

 Make reservation before allocating sequence numbers */

 Remove the extended attribute entry from TNC */

	/*

	 * Remove all nodes belonging to the extended attribute inode from TNC.

	 * Well, there actually must be only one node - the inode itself.

 And update TNC with the new host inode position */

/**

 * ubifs_jnl_change_xattr - change an extended attribute.

 * @c: UBIFS file-system description object

 * @inode: extended attribute inode

 * @host: host inode

 *

 * This function writes the updated version of an extended attribute inode and

 * the host inode to the journal (to the base head). The host inode is written

 * after the extended attribute inode in order to guarantee that the extended

 * attribute will be flushed when the inode is synchronized by 'fsync()' and

 * consequently, the write-buffer is synchronized. This function returns zero

 * in case of success and a negative error code in case of failure.

 Make reservation before allocating sequence numbers */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 * Copyright (C) 2006, 2007 University of Szeged, Hungary

 *

 * Authors: Adrian Hunter

 *          Artem Bityutskiy (Битюцкий Артём)

 *          Zoltan Sogor

/*

 * This file provides a single place to access to compression and

 * decompression.

 Fake description object for the "none" compressor */

 All UBIFS compressors */

/**

 * ubifs_compress - compress data.

 * @in_buf: data to compress

 * @in_len: length of the data to compress

 * @out_buf: output buffer where compressed data should be stored

 * @out_len: output buffer length is returned here

 * @compr_type: type of compression to use on enter, actually used compression

 *              type on exit

 *

 * This function compresses input buffer @in_buf of length @in_len and stores

 * the result in the output buffer @out_buf and the resulting length in

 * @out_len. If the input buffer does not compress, it is just copied to the

 * @out_buf. The same happens if @compr_type is %UBIFS_COMPR_NONE or if

 * compression error occurred.

 *

 * Note, if the input buffer was not compressed, it is copied to the output

 * buffer and %UBIFS_COMPR_NONE is returned in @compr_type.

 If the input data is small, do not even try to compress it */

	/*

	 * If the data compressed only slightly, it is better to leave it

	 * uncompressed to improve read speed.

/**

 * ubifs_decompress - decompress data.

 * @in_buf: data to decompress

 * @in_len: length of the data to decompress

 * @out_buf: output buffer where decompressed data should

 * @out_len: output length is returned here

 * @compr_type: type of compression

 *

 * This function decompresses data from buffer @in_buf into buffer @out_buf.

 * The length of the uncompressed data is returned in @out_len. This functions

 * returns %0 on success or a negative error code on failure.

/**

 * compr_init - initialize a compressor.

 * @compr: compressor description object

 *

 * This function initializes the requested compressor and returns zero in case

 * of success or a negative error code in case of failure.

/**

 * compr_exit - de-initialize a compressor.

 * @compr: compressor description object

/**

 * ubifs_compressors_init - initialize UBIFS compressors.

 *

 * This function initializes the compressor which were compiled in. Returns

 * zero in case of success and a negative error code in case of failure.

/**

 * ubifs_compressors_exit - de-initialize UBIFS compressors.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Adrian Hunter

 *          Artem Bityutskiy (Битюцкий Артём)

/*

 * This file implements TNC (Tree Node Cache) which caches indexing nodes of

 * the UBIFS B-tree.

 *

 * At the moment the locking rules of the TNC tree are quite simple and

 * straightforward. We just have a mutex and lock it when we traverse the

 * tree. If a znode is not in memory, we read it from flash while still having

 * the mutex locked.

/*

 * Returned codes of 'matches_name()' and 'fallible_matches_name()' functions.

 * @NAME_LESS: name corresponding to the first argument is less than second

 * @NAME_MATCHES: names match

 * @NAME_GREATER: name corresponding to the second argument is greater than

 *                first

 * @NOT_ON_MEDIA: node referred by zbranch does not exist on the media

 *

 * These constants were introduce to improve readability.

/**

 * insert_old_idx - record an index node obsoleted since the last commit start.

 * @c: UBIFS file-system description object

 * @lnum: LEB number of obsoleted index node

 * @offs: offset of obsoleted index node

 *

 * Returns %0 on success, and a negative error code on failure.

 *

 * For recovery, there must always be a complete intact version of the index on

 * flash at all times. That is called the "old index". It is the index as at the

 * time of the last successful commit. Many of the index nodes in the old index

 * may be dirty, but they must not be erased until the next successful commit

 * (at which point that index becomes the old index).

 *

 * That means that the garbage collection and the in-the-gaps method of

 * committing must be able to determine if an index node is in the old index.

 * Most of the old index nodes can be found by looking up the TNC using the

 * 'lookup_znode()' function. However, some of the old index nodes may have

 * been deleted from the current index or may have been changed so much that

 * they cannot be easily found. In those cases, an entry is added to an RB-tree.

 * That is what this function does. The RB-tree is ordered by LEB number and

 * offset because they uniquely identify the old index node.

/**

 * insert_old_idx_znode - record a znode obsoleted since last commit start.

 * @c: UBIFS file-system description object

 * @znode: znode of obsoleted index node

 *

 * Returns %0 on success, and a negative error code on failure.

/**

 * ins_clr_old_idx_znode - record a znode obsoleted since last commit start.

 * @c: UBIFS file-system description object

 * @znode: znode of obsoleted index node

 *

 * Returns %0 on success, and a negative error code on failure.

/**

 * destroy_old_idx - destroy the old_idx RB-tree.

 * @c: UBIFS file-system description object

 *

 * During start commit, the old_idx RB-tree is used to avoid overwriting index

 * nodes that were in the index last commit but have since been deleted.  This

 * is necessary for recovery i.e. the old index must be kept intact until the

 * new index is successfully written.  The old-idx RB-tree is used for the

 * in-the-gaps method of writing index nodes and is destroyed every commit.

/**

 * copy_znode - copy a dirty znode.

 * @c: UBIFS file-system description object

 * @znode: znode to copy

 *

 * A dirty znode being committed may not be changed, so it is copied.

 The children now have new parent */

/**

 * add_idx_dirt - add dirt due to a dirty znode.

 * @c: UBIFS file-system description object

 * @lnum: LEB number of index node

 * @dirt: size of index node

 *

 * This function updates lprops dirty space and the new size of the index.

/**

 * dirty_cow_znode - ensure a znode is not being committed.

 * @c: UBIFS file-system description object

 * @zbr: branch of znode to check

 *

 * Returns dirtied znode on success or negative error code on failure.

 znode is not being committed */

/**

 * lnc_add - add a leaf node to the leaf node cache.

 * @c: UBIFS file-system description object

 * @zbr: zbranch of leaf node

 * @node: leaf node

 *

 * Leaf nodes are non-index nodes directory entry nodes or data nodes. The

 * purpose of the leaf node cache is to save re-reading the same leaf node over

 * and over again. Most things are cached by VFS, however the file system must

 * cache directory entries for readdir and for resolving hash collisions. The

 * present implementation of the leaf node cache is extremely simple, and

 * allows for error returns that are not used but that may be needed if a more

 * complex implementation is created.

 *

 * Note, this function does not add the @node object to LNC directly, but

 * allocates a copy of the object and adds the copy to LNC. The reason for this

 * is that @node has been allocated outside of the TNC subsystem and will be

 * used with @c->tnc_mutex unlock upon return from the TNC subsystem. But LNC

 * may be changed at any time, e.g. freed by the shrinker.

 We don't have to have the cache, so no error */

 /**

 * lnc_add_directly - add a leaf node to the leaf-node-cache.

 * @c: UBIFS file-system description object

 * @zbr: zbranch of leaf node

 * @node: leaf node

 *

 * This function is similar to 'lnc_add()', but it does not create a copy of

 * @node but inserts @node to TNC directly.

/**

 * lnc_free - remove a leaf node from the leaf node cache.

 * @zbr: zbranch of leaf node

/**

 * tnc_read_hashed_node - read a "hashed" leaf node.

 * @c: UBIFS file-system description object

 * @zbr: key and position of the node

 * @node: node is returned here

 *

 * This function reads a "hashed" node defined by @zbr from the leaf node cache

 * (in it is there) or from the hash media, in which case the node is also

 * added to LNC. Returns zero in case of success or a negative error

 * code in case of failure.

 Read from the leaf node cache */

		/*

		 * When the node was not found, return -ENOENT, 0 otherwise.

		 * Negative return codes stay as-is.

 Add the node to the leaf node cache */

/**

 * try_read_node - read a node if it is a node.

 * @c: UBIFS file-system description object

 * @buf: buffer to read to

 * @type: node type

 * @zbr: the zbranch describing the node to read

 *

 * This function tries to read a node of known type and length, checks it and

 * stores it in @buf. This function returns %1 if a node is present and %0 if

 * a node is not present. A negative error code is returned for I/O errors.

 * This function performs that same function as ubifs_read_node except that

 * it does not require that there is actually a node present and instead

 * the return code indicates if a node was read.

 *

 * Note, this function does not check CRC of data nodes if @c->no_chk_data_crc

 * is true (it is controlled by corresponding mount option). However, if

 * @c->mounting or @c->remounting_rw is true (we are mounting or re-mounting to

 * R/W mode), @c->no_chk_data_crc is ignored and CRC is checked. This is

 * because during mounting or re-mounting from R/O mode to R/W mode we may read

 * journal nodes (when replying the journal or doing the recovery) and the

 * journal nodes may potentially be corrupted, so checking is required.

/**

 * fallible_read_node - try to read a leaf node.

 * @c: UBIFS file-system description object

 * @key:  key of node to read

 * @zbr:  position of node

 * @node: node returned

 *

 * This function tries to read a node and returns %1 if the node is read, %0

 * if the node is not present, and a negative error code in the case of error.

 All nodes have key in the same place */

/**

 * matches_name - determine if a direntry or xattr entry matches a given name.

 * @c: UBIFS file-system description object

 * @zbr: zbranch of dent

 * @nm: name to match

 *

 * This function checks if xentry/direntry referred by zbranch @zbr matches name

 * @nm. Returns %NAME_MATCHES if it does, %NAME_LESS if the name referred by

 * @zbr is less than @nm, and %NAME_GREATER if it is greater than @nm. In case

 * of failure, a negative error code is returned.

 If possible, match against the dent in the leaf node cache */

 Add the node to the leaf node cache */

/**

 * get_znode - get a TNC znode that may not be loaded yet.

 * @c: UBIFS file-system description object

 * @znode: parent znode

 * @n: znode branch slot number

 *

 * This function returns the znode or a negative error code.

/**

 * tnc_next - find next TNC entry.

 * @c: UBIFS file-system description object

 * @zn: znode is passed and returned here

 * @n: znode branch slot number is passed and returned here

 *

 * This function returns %0 if the next TNC entry is found, %-ENOENT if there is

 * no next entry, or a negative error code otherwise.

/**

 * tnc_prev - find previous TNC entry.

 * @c: UBIFS file-system description object

 * @zn: znode is returned here

 * @n: znode branch slot number is passed and returned here

 *

 * This function returns %0 if the previous TNC entry is found, %-ENOENT if

 * there is no next entry, or a negative error code otherwise.

/**

 * resolve_collision - resolve a collision.

 * @c: UBIFS file-system description object

 * @key: key of a directory or extended attribute entry

 * @zn: znode is returned here

 * @n: zbranch number is passed and returned here

 * @nm: name of the entry

 *

 * This function is called for "hashed" keys to make sure that the found key

 * really corresponds to the looked up node (directory or extended attribute

 * entry). It returns %1 and sets @zn and @n if the collision is resolved.

 * %0 is returned if @nm is not found and @zn and @n are set to the previous

 * entry, i.e. to the entry after which @nm could follow if it were in TNC.

 * This means that @n may be set to %-1 if the leftmost key in @zn is the

 * previous one. A negative error code is returned on failures.

 Look left */

				/*

				 * We have found the branch after which we would

				 * like to insert, but inserting in this znode

				 * may still be wrong. Consider the following 3

				 * znodes, in the case where we are resolving a

				 * collision with Key2.

				 *

				 *                  znode zp

				 *            ----------------------

				 * level 1     |  Key0  |  Key1  |

				 *            -----------------------

				 *                 |            |

				 *       znode za  |            |  znode zb

				 *          ------------      ------------

				 * level 0  |  Key0  |        |  Key2  |

				 *          ------------      ------------

				 *

				 * The lookup finds Key2 in znode zb. Lets say

				 * there is no match and the name is greater so

				 * we look left. When we find Key0, we end up

				 * here. If we return now, we will insert into

				 * znode za at slot n = 1.  But that is invalid

				 * according to the parent's keys.  Key2 must

				 * be inserted into znode zb.

				 *

				 * Note, this problem is not relevant for the

				 * case when we go right, because

				 * 'tnc_insert()' would correct the parent key.

 Should be impossible */

 Look right */

/**

 * fallible_matches_name - determine if a dent matches a given name.

 * @c: UBIFS file-system description object

 * @zbr: zbranch of dent

 * @nm: name to match

 *

 * This is a "fallible" version of 'matches_name()' function which does not

 * panic if the direntry/xentry referred by @zbr does not exist on the media.

 *

 * This function checks if xentry/direntry referred by zbranch @zbr matches name

 * @nm. Returns %NAME_MATCHES it does, %NAME_LESS if the name referred by @zbr

 * is less than @nm, %NAME_GREATER if it is greater than @nm, and @NOT_ON_MEDIA

 * if xentry/direntry referred by @zbr does not exist on the media. A negative

 * error code is returned in case of failure.

 If possible, match against the dent in the leaf node cache */

 The node was not present */

/**

 * fallible_resolve_collision - resolve a collision even if nodes are missing.

 * @c: UBIFS file-system description object

 * @key: key

 * @zn: znode is returned here

 * @n: branch number is passed and returned here

 * @nm: name of directory entry

 * @adding: indicates caller is adding a key to the TNC

 *

 * This is a "fallible" version of the 'resolve_collision()' function which

 * does not panic if one of the nodes referred to by TNC does not exist on the

 * media. This may happen when replaying the journal if a deleted node was

 * Garbage-collected and the commit was not done. A branch that refers to a node

 * that is not present is called a dangling branch. The following are the return

 * codes for this function:

 *  o if @nm was found, %1 is returned and @zn and @n are set to the found

 *    branch;

 *  o if we are @adding and @nm was not found, %0 is returned;

 *  o if we are not @adding and @nm was not found, but a dangling branch was

 *    found, then %1 is returned and @zn and @n are set to the dangling branch;

 *  o a negative error code is returned in case of failure.

		/*

		 * We are unlucky and hit a dangling branch straight away.

		 * Now we do not really know where to go to find the needed

		 * branch - to the left or to the right. Well, let's try left.

 Remove a dangling branch wherever it is */

 Look left */

 See comments in 'resolve_collision()' */

 Should be impossible */

 Look right */

 Never match a dangling branch when adding */

/**

 * matches_position - determine if a zbranch matches a given position.

 * @zbr: zbranch of dent

 * @lnum: LEB number of dent to match

 * @offs: offset of dent to match

 *

 * This function returns %1 if @lnum:@offs matches, and %0 otherwise.

/**

 * resolve_collision_directly - resolve a collision directly.

 * @c: UBIFS file-system description object

 * @key: key of directory entry

 * @zn: znode is passed and returned here

 * @n: zbranch number is passed and returned here

 * @lnum: LEB number of dent node to match

 * @offs: offset of dent node to match

 *

 * This function is used for "hashed" keys to make sure the found directory or

 * extended attribute entry node is what was looked for. It is used when the

 * flash address of the right node is known (@lnum:@offs) which makes it much

 * easier to resolve collisions (no need to read entries and match full

 * names). This function returns %1 and sets @zn and @n if the collision is

 * resolved, %0 if @lnum:@offs is not found and @zn and @n are set to the

 * previous directory entry. Otherwise a negative error code is returned.

 Look left */

 Look right */

/**

 * dirty_cow_bottom_up - dirty a znode and its ancestors.

 * @c: UBIFS file-system description object

 * @znode: znode to dirty

 *

 * If we do not have a unique key that resides in a znode, then we cannot

 * dirty that znode from the top down (i.e. by using lookup_level0_dirty)

 * This function records the path back to the last dirty ancestor, and then

 * dirties the znodes on that path.

 Go up until parent is dirty */

 Come back down, dirtying as we go */

/**

 * ubifs_lookup_level0 - search for zero-level znode.

 * @c: UBIFS file-system description object

 * @key:  key to lookup

 * @zn: znode is returned here

 * @n: znode branch slot number is returned here

 *

 * This function looks up the TNC tree and search for zero-level znode which

 * refers key @key. The found zero-level znode is returned in @zn. There are 3

 * cases:

 *   o exact match, i.e. the found zero-level znode contains key @key, then %1

 *     is returned and slot number of the matched branch is stored in @n;

 *   o not exact match, which means that zero-level znode does not contain

 *     @key, then %0 is returned and slot number of the closest branch or %-1

 *     is stored in @n; In this case calling tnc_next() is mandatory.

 *   o @key is so small that it is even less than the lowest key of the

 *     leftmost zero-level node, then %0 is returned and %0 is stored in @n.

 *

 * Note, when the TNC tree is traversed, some znodes may be absent, then this

 * function reads corresponding indexing nodes and inserts them to TNC. In

 * case of failure, a negative error code is returned.

 znode is not in TNC cache, load it from the media */

	/*

	 * Here is a tricky place. We have not found the key and this is a

	 * "hashed" key, which may collide. The rest of the code deals with

	 * situations like this:

	 *

	 *                  | 3 | 5 |

	 *                  /       \

	 *          | 3 | 5 |      | 6 | 7 | (x)

	 *

	 * Or more a complex example:

	 *

	 *                | 1 | 5 |

	 *                /       \

	 *       | 1 | 3 |         | 5 | 8 |

	 *              \           /

	 *          | 5 | 5 |   | 6 | 7 | (x)

	 *

	 * In the examples, if we are looking for key "5", we may reach nodes

	 * marked with "(x)". In this case what we have do is to look at the

	 * left and see if there is "5" key there. If there is, we have to

	 * return it.

	 *

	 * Note, this whole situation is possible because we allow to have

	 * elements which are equivalent to the next key in the parent in the

	 * children of current znode. For example, this happens if we split a

	 * znode like this: | 3 | 5 | 5 | 6 | 7 |, which results in something

	 * like this:

	 *                      | 3 | 5 |

	 *                       /     \

	 *                | 3 | 5 |   | 5 | 6 | 7 |

	 *                              ^

	 * And this becomes what is at the first "picture" after key "5" marked

	 * with "^" is removed. What could be done is we could prohibit

	 * splitting in the middle of the colliding sequence. Also, when

	 * removing the leftmost key, we would have to correct the key of the

	 * parent node, which would introduce additional complications. Namely,

	 * if we changed the leftmost key of the parent znode, the garbage

	 * collector would be unable to find it (GC is doing this when GC'ing

	 * indexing LEBs). Although we already have an additional RB-tree where

	 * we save such changed znodes (see 'ins_clr_old_idx_znode()') until

	 * after the commit. But anyway, this does not look easy to implement

	 * so we did not try this.

/**

 * lookup_level0_dirty - search for zero-level znode dirtying.

 * @c: UBIFS file-system description object

 * @key:  key to lookup

 * @zn: znode is returned here

 * @n: znode branch slot number is returned here

 *

 * This function looks up the TNC tree and search for zero-level znode which

 * refers key @key. The found zero-level znode is returned in @zn. There are 3

 * cases:

 *   o exact match, i.e. the found zero-level znode contains key @key, then %1

 *     is returned and slot number of the matched branch is stored in @n;

 *   o not exact match, which means that zero-level znode does not contain @key

 *     then %0 is returned and slot number of the closed branch is stored in

 *     @n;

 *   o @key is so small that it is even less than the lowest key of the

 *     leftmost zero-level node, then %0 is returned and %-1 is stored in @n.

 *

 * Additionally all znodes in the path from the root to the located zero-level

 * znode are marked as dirty.

 *

 * Note, when the TNC tree is traversed, some znodes may be absent, then this

 * function reads corresponding indexing nodes and inserts them to TNC. In

 * case of failure, a negative error code is returned.

 znode is not in TNC cache, load it from the media */

	/*

	 * See huge comment at 'lookup_level0_dirty()' what is the rest of the

	 * code.

/**

 * maybe_leb_gced - determine if a LEB may have been garbage collected.

 * @c: UBIFS file-system description object

 * @lnum: LEB number

 * @gc_seq1: garbage collection sequence number

 *

 * This function determines if @lnum may have been garbage collected since

 * sequence number @gc_seq1. If it may have been then %1 is returned, otherwise

 * %0 is returned.

 Same seq means no GC */

 Different by more than 1 means we don't know */

	/*

	 * We have seen the sequence number has increased by 1. Now we need to

	 * be sure we read the right LEB number, so read it again.

 Finally we can check lnum */

/**

 * ubifs_tnc_locate - look up a file-system node and return it and its location.

 * @c: UBIFS file-system description object

 * @key: node key to lookup

 * @node: the node is returned here

 * @lnum: LEB number is returned here

 * @offs: offset is returned here

 *

 * This function looks up and reads node with key @key. The caller has to make

 * sure the @node buffer is large enough to fit the node. Returns zero in case

 * of success, %-ENOENT if the node was not found, and a negative error code in

 * case of failure. The node location can be returned in @lnum and @offs.

		/*

		 * In this case the leaf node cache gets used, so we pass the

		 * address of the zbranch and keep the mutex locked

 Drop the TNC mutex prematurely and race with garbage collection */

 We do not GC journal heads */

		/*

		 * The node may have been GC'ed out from under us so try again

		 * while keeping the TNC mutex locked.

/**

 * ubifs_tnc_get_bu_keys - lookup keys for bulk-read.

 * @c: UBIFS file-system description object

 * @bu: bulk-read parameters and results

 *

 * Lookup consecutive data node keys for the same inode that reside

 * consecutively in the same LEB. This function returns zero in case of success

 * and a negative error code in case of failure.

 *

 * Note, if the bulk-read buffer length (@bu->buf_len) is known, this function

 * makes sure bulk-read nodes fit the buffer. Otherwise, this function prepares

 * maximum possible amount of nodes for bulk-read.

 Find first key */

 Key found */

 The buffer must be big enough for at least 1 node */

 Add this key */

 Find next key */

 See if there is another data key for this file */

 First key found */

			/*

			 * The data nodes must be in consecutive positions in

			 * the same LEB.

 Must not exceed buffer length */

 Allow for holes */

 Add this key */

 See if we have room for more */

	/*

	 * An enormous hole could cause bulk-read to encompass too many

	 * page cache pages, so limit the number here.

	/*

	 * Ensure that bulk-read covers a whole number of page cache

	 * pages.

 At the end of file we can round up */

 Exclude data nodes that do not make up a whole page cache page */

/**

 * read_wbuf - bulk-read from a LEB with a wbuf.

 * @wbuf: wbuf that may overlap the read

 * @buf: buffer into which to read

 * @len: read length

 * @lnum: LEB number from which to read

 * @offs: offset from which to read

 *

 * This functions returns %0 on success or a negative error code on failure.

 We may safely unlock the write-buffer and read the data */

 Don't read under wbuf */

 Copy the rest from the write-buffer */

 Read everything that goes before write-buffer */

/**

 * validate_data_node - validate data nodes for bulk-read.

 * @c: UBIFS file-system description object

 * @buf: buffer containing data node to validate

 * @zbr: zbranch of data node to validate

 *

 * This functions returns %0 on success or a negative error code on failure.

 Make sure the key of the read node is correct */

/**

 * ubifs_tnc_bulk_read - read a number of data nodes in one go.

 * @c: UBIFS file-system description object

 * @bu: bulk-read parameters and results

 *

 * This functions reads and validates the data nodes that were identified by the

 * 'ubifs_tnc_get_bu_keys()' function. This functions returns %0 on success,

 * -EAGAIN to indicate a race with GC, or another negative error code on

 * failure.

 Do the read */

 Check for a race with GC */

 Validate the nodes read */

/**

 * do_lookup_nm- look up a "hashed" node.

 * @c: UBIFS file-system description object

 * @key: node key to lookup

 * @node: the node is returned here

 * @nm: node name

 *

 * This function looks up and reads a node which contains name hash in the key.

 * Since the hash may have collisions, there may be many nodes with the same

 * key, so we have to sequentially look to all of them until the needed one is

 * found. This function returns zero in case of success, %-ENOENT if the node

 * was not found, and a negative error code in case of failure.

/**

 * ubifs_tnc_lookup_nm - look up a "hashed" node.

 * @c: UBIFS file-system description object

 * @key: node key to lookup

 * @node: the node is returned here

 * @nm: node name

 *

 * This function looks up and reads a node which contains name hash in the key.

 * Since the hash may have collisions, there may be many nodes with the same

 * key, so we have to sequentially look to all of them until the needed one is

 * found. This function returns zero in case of success, %-ENOENT if the node

 * was not found, and a negative error code in case of failure.

	/*

	 * We assume that in most of the cases there are no name collisions and

	 * 'ubifs_tnc_lookup()' returns us the right direntry.

	/*

	 * Unluckily, there are hash collisions and we have to iterate over

	 * them look at each direntry with colliding name hash sequentially.

/**

 * ubifs_tnc_lookup_dh - look up a "double hashed" node.

 * @c: UBIFS file-system description object

 * @key: node key to lookup

 * @node: the node is returned here

 * @cookie: node cookie for collision resolution

 *

 * This function looks up and reads a node which contains name hash in the key.

 * Since the hash may have collisions, there may be many nodes with the same

 * key, so we have to sequentially look to all of them until the needed one

 * with the same cookie value is found.

 * This function returns zero in case of success, %-ENOENT if the node

 * was not found, and a negative error code in case of failure.

	/*

	 * We assume that in most of the cases there are no name collisions and

	 * 'ubifs_tnc_lookup()' returns us the right direntry.

	/*

	 * Unluckily, there are hash collisions and we have to iterate over

	 * them look at each direntry with colliding name hash sequentially.

/**

 * correct_parent_keys - correct parent znodes' keys.

 * @c: UBIFS file-system description object

 * @znode: znode to correct parent znodes for

 *

 * This is a helper function for 'tnc_insert()'. When the key of the leftmost

 * zbranch changes, keys of parent znodes have to be corrected. This helper

 * function is called in such situations and corrects the keys if needed.

/**

 * insert_zbranch - insert a zbranch into a znode.

 * @c: UBIFS file-system description object

 * @znode: znode into which to insert

 * @zbr: zbranch to insert

 * @n: slot number to insert to

 *

 * This is a helper function for 'tnc_insert()'. UBIFS does not allow "gaps" in

 * znode's array of zbranches and keeps zbranches consolidated, so when a new

 * zbranch has to be inserted to the @znode->zbranches[]' array at the @n-th

 * slot, zbranches starting from @n have to be moved right.

	/*

	 * After inserting at slot zero, the lower bound of the key range of

	 * this znode may have changed. If this znode is subsequently split

	 * then the upper bound of the key range may change, and furthermore

	 * it could change to be lower than the original lower bound. If that

	 * happens, then it will no longer be possible to find this znode in the

	 * TNC using the key from the index node on flash. That is bad because

	 * if it is not found, we will assume it is obsolete and may overwrite

	 * it. Then if there is an unclean unmount, we will start using the

	 * old index which will be broken.

	 *

	 * So we first mark znodes that have insertions at slot zero, and then

	 * if they are split we add their lnum/offs to the old_idx tree.

/**

 * tnc_insert - insert a node into TNC.

 * @c: UBIFS file-system description object

 * @znode: znode to insert into

 * @zbr: branch to insert

 * @n: slot number to insert new zbranch to

 *

 * This function inserts a new node described by @zbr into znode @znode. If

 * znode does not have a free slot for new zbranch, it is split. Parent znodes

 * are splat as well if needed. Returns zero in case of success or a negative

 * error code in case of failure.

 Implement naive insert for now */

 Ensure parent's key is correct */

	/*

	 * Unfortunately, @znode does not have more empty slots and we have to

	 * split it.

		/*

		 * We can no longer be sure of finding this znode by key, so we

		 * record it in the old_idx tree.

 Decide where to split */

 Try not to split consecutive data keys */

 Try not to split consecutive data keys */

	/*

	 * Although we don't at present, we could look at the neighbors and see

	 * if we can move some zbranches there.

 Insert into existing znode */

 Insert into new znode */

 Re-parent */

 Move zbranch */

 Re-parent */

 Insert new key and branch */

 Insert new znode (produced by spitting) into the parent */

 Locate insertion point */

 Tail recursion */

 We have to split root znode */

/**

 * ubifs_tnc_add - add a node to TNC.

 * @c: UBIFS file-system description object

 * @key: key to add

 * @lnum: LEB number of node

 * @offs: node offset

 * @len: node length

 * @hash: The hash over the node

 *

 * This function adds a node with key @key to TNC. The node may be new or it may

 * obsolete some existing one. Returns %0 on success or negative error code on

 * failure.

/**

 * ubifs_tnc_replace - replace a node in the TNC only if the old node is found.

 * @c: UBIFS file-system description object

 * @key: key to add

 * @old_lnum: LEB number of old node

 * @old_offs: old node offset

 * @lnum: LEB number of node

 * @offs: node offset

 * @len: node length

 *

 * This function replaces a node with key @key in the TNC only if the old node

 * is found.  This function is called by garbage collection when node are moved.

 * Returns %0 on success or negative error code on failure.

 Ensure the znode is dirtied */

/**

 * ubifs_tnc_add_nm - add a "hashed" node to TNC.

 * @c: UBIFS file-system description object

 * @key: key to add

 * @lnum: LEB number of node

 * @offs: node offset

 * @len: node length

 * @hash: The hash over the node

 * @nm: node name

 *

 * This is the same as 'ubifs_tnc_add()' but it should be used with keys which

 * may have collisions, like directory entry keys.

 Ensure the znode is dirtied */

			/*

			 * We did not find it in the index so there may be a

			 * dangling branch still in the index. So we remove it

			 * by passing 'ubifs_tnc_remove_nm()' the same key but

			 * an unmatchable name.

/**

 * tnc_delete - delete a znode form TNC.

 * @c: UBIFS file-system description object

 * @znode: znode to delete from

 * @n: zbranch slot number to delete

 *

 * This function deletes a leaf node from @n-th slot of @znode. Returns zero in

 * case of success and a negative error code in case of failure.

 Delete without merge for now */

 We do not "gap" zbranch slots */

	/*

	 * This was the last zbranch, we have to delete this znode from the

	 * parent.

 while removing last child */

 Remove from znode, entry n - 1 */

	/*

	 * If this is the root and it has only 1 child then

	 * collapse the tree.

/**

 * ubifs_tnc_remove - remove an index entry of a node.

 * @c: UBIFS file-system description object

 * @key: key of node

 *

 * Returns %0 on success or negative error code on failure.

/**

 * ubifs_tnc_remove_nm - remove an index entry for a "hashed" node.

 * @c: UBIFS file-system description object

 * @key: key of node

 * @nm: directory entry name

 *

 * Returns %0 on success or negative error code on failure.

 Ensure the znode is dirtied */

/**

 * ubifs_tnc_remove_dh - remove an index entry for a "double hashed" node.

 * @c: UBIFS file-system description object

 * @key: key of node

 * @cookie: node cookie for collision resolution

 *

 * Returns %0 on success or negative error code on failure.

 If the cookie does not match, we're facing a hash collision. */

/**

 * key_in_range - determine if a key falls within a range of keys.

 * @c: UBIFS file-system description object

 * @key: key to check

 * @from_key: lowest key in range

 * @to_key: highest key in range

 *

 * This function returns %1 if the key is in range and %0 otherwise.

/**

 * ubifs_tnc_remove_range - remove index entries in range.

 * @c: UBIFS file-system description object

 * @from_key: lowest key to remove

 * @to_key: highest key to remove

 *

 * This function removes index entries starting at @from_key and ending at

 * @to_key.  This function returns zero in case of success and a negative error

 * code in case of failure.

 Find first level 0 znode that contains keys to remove */

 Ensure the znode is dirtied */

 Remove all keys in range except the first */

 Now delete the first */

/**

 * ubifs_tnc_remove_ino - remove an inode from TNC.

 * @c: UBIFS file-system description object

 * @inum: inode number to remove

 *

 * This function remove inode @inum and all the extended attributes associated

 * with the anode from TNC and returns zero in case of success or a negative

 * error code in case of failure.

	/*

	 * Walk all extended attribute entries and remove them together with

	 * corresponding extended attribute inodes.

/**

 * ubifs_tnc_next_ent - walk directory or extended attribute entries.

 * @c: UBIFS file-system description object

 * @key: key of last entry

 * @nm: name of last entry found or %NULL

 *

 * This function finds and reads the next directory or extended attribute entry

 * after the given key (@key) if there is one. @nm is used to resolve

 * collisions.

 *

 * If the name of the current entry is not known and only the key is known,

 * @nm->name has to be %NULL. In this case the semantics of this function is a

 * little bit different and it returns the entry corresponding to this key, not

 * the next one. If the key was not found, the closest "right" entry is

 * returned.

 *

 * If the fist entry has to be found, @key has to contain the lowest possible

 * key value for this inode and @name has to be %NULL.

 *

 * This function returns the found directory or extended attribute entry node

 * in case of success, %-ENOENT is returned if no entry was found, and a

 * negative error code is returned in case of failure.

 Handle collisions */

 Now find next entry */

		/*

		 * The full name of the entry was not given, in which case the

		 * behavior of this function is a little different and it

		 * returns current entry, not the next one.

			/*

			 * However, the given key does not exist in the TNC

			 * tree and @znode/@n variables contain the closest

			 * "preceding" element. Switch to the next one.

	/*

	 * The above 'tnc_next()' call could lead us to the next inode, check

	 * this.

/**

 * tnc_destroy_cnext - destroy left-over obsolete znodes from a failed commit.

 * @c: UBIFS file-system description object

 *

 * Destroy left-over obsolete znodes from a failed commit.

/**

 * ubifs_tnc_close - close TNC subsystem and free all related resources.

 * @c: UBIFS file-system description object

/**

 * left_znode - get the znode to the left.

 * @c: UBIFS file-system description object

 * @znode: znode

 *

 * This function returns a pointer to the znode to the left of @znode or NULL if

 * there is not one. A negative error code is returned on failure.

 Go up until we can go left */

 Now go down the rightmost branch to 'level' */

/**

 * right_znode - get the znode to the right.

 * @c: UBIFS file-system description object

 * @znode: znode

 *

 * This function returns a pointer to the znode to the right of @znode or NULL

 * if there is not one. A negative error code is returned on failure.

 Go up until we can go right */

 Now go down the leftmost branch to 'level' */

/**

 * lookup_znode - find a particular indexing node from TNC.

 * @c: UBIFS file-system description object

 * @key: index node key to lookup

 * @level: index node level

 * @lnum: index node LEB number

 * @offs: index node offset

 *

 * This function searches an indexing node by its first key @key and its

 * address @lnum:@offs. It looks up the indexing tree by pulling all indexing

 * nodes it traverses to TNC. This function is called for indexing nodes which

 * were found on the media by scanning, for example when garbage-collecting or

 * when doing in-the-gaps commit. This means that the indexing node which is

 * looked for does not have to have exactly the same leftmost key @key, because

 * the leftmost key may have been changed, in which case TNC will contain a

 * dirty znode which still refers the same @lnum:@offs. This function is clever

 * enough to recognize such indexing nodes.

 *

 * Note, if a znode was deleted or changed too much, then this function will

 * not find it. For situations like this UBIFS has the old index RB-tree

 * (indexed by @lnum:@offs).

 *

 * This function returns a pointer to the znode found or %NULL if it is not

 * found. A negative error code is returned on failure.

	/*

	 * The arguments have probably been read off flash, so don't assume

	 * they are valid.

 Get the root znode */

 Check if it is the one we are looking for */

 Descend to the parent level i.e. (level + 1) */

			/*

			 * We reached a znode where the leftmost key is greater

			 * than the key we are searching for. This is the same

			 * situation as the one described in a huge comment at

			 * the end of the 'ubifs_lookup_level0()' function. And

			 * for exactly the same reasons we have to try to look

			 * left before giving up.

 Check if the child is the one we are looking for */

 If the key is unique, there is nowhere else to look */

	/*

	 * The key is not unique and so may be also in the znodes to either

	 * side.

 Look left */

 Move one branch to the left */

 Check it */

 Stop if the key is less than the one we are looking for */

 Back to the middle */

 Look right */

 Move one branch to the right */

 Check it */

 Stop if the key is greater than the one we are looking for */

/**

 * is_idx_node_in_tnc - determine if an index node is in the TNC.

 * @c: UBIFS file-system description object

 * @key: key of index node

 * @level: index node level

 * @lnum: LEB number of index node

 * @offs: offset of index node

 *

 * This function returns %0 if the index node is not referred to in the TNC, %1

 * if the index node is referred to in the TNC and the corresponding znode is

 * dirty, %2 if an index node is referred to in the TNC and the corresponding

 * znode is clean, and a negative error code in case of failure.

 *

 * Note, the @key argument has to be the key of the first child. Also note,

 * this function relies on the fact that 0:0 is never a valid LEB number and

 * offset for a main-area node.

/**

 * is_leaf_node_in_tnc - determine if a non-indexing not is in the TNC.

 * @c: UBIFS file-system description object

 * @key: node key

 * @lnum: node LEB number

 * @offs: node offset

 *

 * This function returns %1 if the node is referred to in the TNC, %0 if it is

 * not, and a negative error code in case of failure.

 *

 * Note, this function relies on the fact that 0:0 is never a valid LEB number

 * and offset for a main-area node.

 Error code */

 Found it */

	/*

	 * Because the key is not unique, we have to look left

	 * and right as well

 Look left */

 Found it */

 Look right */

 Found it */

/**

 * ubifs_tnc_has_node - determine whether a node is in the TNC.

 * @c: UBIFS file-system description object

 * @key: node key

 * @level: index node level (if it is an index node)

 * @lnum: node LEB number

 * @offs: node offset

 * @is_idx: non-zero if the node is an index node

 *

 * This function returns %1 if the node is in the TNC, %0 if it is not, and a

 * negative error code in case of failure. For index nodes, @key has to be the

 * key of the first child. An index node is considered to be in the TNC only if

 * the corresponding znode is clean or has not been loaded.

 The index node was found but it was dirty */

 The index node was found and it was clean */

/**

 * ubifs_dirty_idx_node - dirty an index node.

 * @c: UBIFS file-system description object

 * @key: index node key

 * @level: index node level

 * @lnum: index node LEB number

 * @offs: index node offset

 *

 * This function loads and dirties an index node so that it can be garbage

 * collected. The @key argument has to be the key of the first child. This

 * function relies on the fact that 0:0 is never a valid LEB number and offset

 * for a main-area node. Returns %0 on success and a negative error code on

 * failure.

/**

 * dbg_check_inode_size - check if inode size is correct.

 * @c: UBIFS file-system description object

 * @inode: inode to check

 * @size: inode size

 *

 * This function makes sure that the inode size (@size) is correct and it does

 * not have any pages beyond @size. Returns zero if the inode is OK, %-EINVAL

 * if it has a data page beyond @size, and other negative error code in case of

 * other errors.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation

 *

 * Authors: Adrian Hunter

 *          Artem Bityutskiy (Битюцкий Артём)

/*

 * This file implements the scan which is a general-purpose function for

 * determining what nodes are in an eraseblock. The scan is used to replay the

 * journal, to do garbage collection. for the TNC in-the-gaps method, and by

 * debugging functions.

/**

 * scan_padding_bytes - scan for padding bytes.

 * @buf: buffer to scan

 * @len: length of buffer

 *

 * This function returns the number of padding bytes on success and

 * %SCANNED_GARBAGE on failure.

/**

 * ubifs_scan_a_node - scan for a node or padding.

 * @c: UBIFS file-system description object

 * @buf: buffer to scan

 * @len: length of buffer

 * @lnum: logical eraseblock number

 * @offs: offset within the logical eraseblock

 * @quiet: print no messages

 *

 * This function returns a scanning code to indicate what was scanned.

 Validate the padding node */

 Make the node pads to 8-byte boundary */

/**

 * ubifs_start_scan - create LEB scanning information at start of scan.

 * @c: UBIFS file-system description object

 * @lnum: logical eraseblock number

 * @offs: offset to start at (usually zero)

 * @sbuf: scan buffer (must be c->leb_size)

 *

 * This function returns the scanned information on success and a negative error

 * code on failure.

	/*

	 * Note, we ignore integrity errors (EBASMSG) because all the nodes are

	 * protected by CRC checksums.

/**

 * ubifs_end_scan - update LEB scanning information at end of scan.

 * @c: UBIFS file-system description object

 * @sleb: scanning information

 * @lnum: logical eraseblock number

 * @offs: offset to start at (usually zero)

/**

 * ubifs_add_snod - add a scanned node to LEB scanning information.

 * @c: UBIFS file-system description object

 * @sleb: scanning information

 * @buf: buffer containing node

 * @offs: offset of node on flash

 *

 * This function returns %0 on success and a negative error code on failure.

		/*

		 * The key is in the same place in all keyed

		 * nodes.

/**

 * ubifs_scanned_corruption - print information after UBIFS scanned corruption.

 * @c: UBIFS file-system description object

 * @lnum: LEB number of corruption

 * @offs: offset of corruption

 * @buf: buffer containing corruption

/**

 * ubifs_scan - scan a logical eraseblock.

 * @c: UBIFS file-system description object

 * @lnum: logical eraseblock number

 * @offs: offset to start at (usually zero)

 * @sbuf: scan buffer (must be of @c->leb_size bytes in size)

 * @quiet: print no messages

 *

 * This function scans LEB number @lnum and returns complete information about

 * its contents. Returns the scanned information in case of success and,

 * %-EUCLEAN if the LEB neads recovery, and other negative error codes in case

 * of failure.

 *

 * If @quiet is non-zero, this function does not print large and scary

 * error messages and flash dumps in case of errors.

 Padding bytes or a valid padding node */

 Empty space is checked later */

/**

 * ubifs_scan_destroy - destroy LEB scanning information.

 * @sleb: scanning information to free

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Adrian Hunter

 *          Artem Bityutskiy (Битюцкий Артём)

/*

 * This file contains miscelanious TNC-related functions shared betweend

 * different files. This file does not form any logically separate TNC

 * sub-system. The file was created because there is a lot of TNC code and

 * putting it all in one file would make that file too big and unreadable.

/**

 * ubifs_tnc_levelorder_next - next TNC tree element in levelorder traversal.

 * @c: UBIFS file-system description object

 * @zr: root of the subtree to traverse

 * @znode: previous znode

 *

 * This function implements levelorder TNC traversal. The LNC is ignored.

 * Returns the next element or %NULL if @znode is already the last one.

		/*

		 * First walk up until there is a znode with next branch to

		 * look at.

 This level is done, switch to the lower one */

				/*

				 * We were already looking for znode at lower

				 * level ('level_search'). As we are here

				 * again, it just does not exist. Or all levels

				 * were finished ('level < 0').

 Switch to the next index */

 No more children to look at, we have walk up */

 Walk back down to the level we came from ('level') */

				/*

				 * This path is not too deep so it does not

				 * reach 'level'. Try next path.

/**

 * ubifs_search_zbranch - search znode branch.

 * @c: UBIFS file-system description object

 * @znode: znode to search in

 * @key: key to search for

 * @n: znode branch slot number is returned here

 *

 * This is a helper function which search branch with key @key in @znode using

 * binary search. The result of the search may be:

 *   o exact match, then %1 is returned, and the slot number of the branch is

 *     stored in @n;

 *   o no exact match, then %0 is returned and the slot number of the left

 *     closest branch is returned in @n; the slot if all keys in this znode are

 *     greater than @key, then %-1 is returned in @n.

 The insert point is after *n */

/**

 * ubifs_tnc_postorder_first - find first znode to do postorder tree traversal.

 * @znode: znode to start at (root of the sub-tree to traverse)

 *

 * Find the lowest leftmost znode in a subtree of the TNC tree. The LNC is

 * ignored.

/**

 * ubifs_tnc_postorder_next - next TNC tree element in postorder traversal.

 * @c: UBIFS file-system description object

 * @znode: previous znode

 *

 * This function implements postorder TNC traversal. The LNC is ignored.

 * Returns the next element or %NULL if @znode is already the last one.

 Switch to the next index in the parent */

 This is in fact the last child, return parent */

 Go to the first znode in this new subtree */

/**

 * ubifs_destroy_tnc_subtree - destroy all znodes connected to a subtree.

 * @c: UBIFS file-system description object

 * @znode: znode defining subtree to destroy

 *

 * This function destroys subtree of the TNC tree. Returns number of clean

 * znodes in the subtree.

/**

 * read_znode - read an indexing node from flash and fill znode.

 * @c: UBIFS file-system description object

 * @zzbr: the zbranch describing the node to read

 * @znode: znode to read to

 *

 * This function reads an indexing node from the flash media and fills znode

 * with the read data. Returns zero in case of success and a negative error

 * code in case of failure. The read indexing node is validated and if anything

 * is wrong with it, this function prints complaint messages and returns

 * %-EINVAL.

 Validate branch */

	/*

	 * Ensure that the next key is greater or equivalent to the

	 * previous one.

 These can only be keys with colliding hash */

/**

 * ubifs_load_znode - load znode to TNC cache.

 * @c: UBIFS file-system description object

 * @zbr: znode branch

 * @parent: znode's parent

 * @iip: index in parent

 *

 * This function loads znode pointed to by @zbr into the TNC cache and

 * returns pointer to it in case of success and a negative error code in case

 * of failure.

	/*

	 * A slab cache is not presently used for znodes because the znode size

	 * depends on the fanout which is stored in the superblock.

	/*

	 * Increment the global clean znode counter as well. It is OK that

	 * global and per-FS clean znode counters may be inconsistent for some

	 * short time (because we might be preempted at this point), the global

	 * one is only used in shrinker.

/**

 * ubifs_tnc_read_node - read a leaf node from the flash media.

 * @c: UBIFS file-system description object

 * @zbr: key and position of the node

 * @node: node is returned here

 *

 * This function reads a node defined by @zbr from the flash media. Returns

 * zero in case of success or a negative error code in case of failure.

	/*

	 * 'zbr' has to point to on-flash node. The node may sit in a bud and

	 * may even be in a write buffer, so we have to take care about this.

 Make sure the key of the read node is correct */

 SPDX-License-Identifier: GPL-2.0-only

/* * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 * Copyright (C) 2006, 2007 University of Szeged, Hungary

 *

 * Authors: Artem Bityutskiy (Битюцкий Артём)

 *          Adrian Hunter

 *          Zoltan Sogor

/*

 * This file implements directory operations.

 *

 * All FS operations in this file allocate budget before writing anything to the

 * media. If they fail to allocate it, the error is returned. The only

 * exceptions are 'ubifs_unlink()' and 'ubifs_rmdir()' which keep working even

 * if they unable to allocate the budget, because deletion %-ENOSPC failure is

 * not what users are usually ready to get. UBIFS budgeting subsystem has some

 * space reserved for these purposes.

 *

 * All operations in this file write all inodes which they change straight

 * away, instead of marking them dirty. For example, 'ubifs_link()' changes

 * @i_size of the parent inode and writes the parent inode together with the

 * target inode. This was done to simplify file-system recovery which would

 * otherwise be very difficult to do. The only exception is rename which marks

 * the re-named inode dirty (because its @i_ctime is updated) but does not

 * write it, but just marks it as dirty.

/**

 * inherit_flags - inherit flags of the parent inode.

 * @dir: parent inode

 * @mode: new inode mode flags

 *

 * This is a helper function for 'ubifs_new_inode()' which inherits flag of the

 * parent directory inode @dir. UBIFS inodes inherit the following flags:

 * o %UBIFS_COMPR_FL, which is useful to switch compression on/of on

 *   sub-directory basis;

 * o %UBIFS_SYNC_FL - useful for the same reasons;

 * o %UBIFS_DIRSYNC_FL - similar, but relevant only to directories.

 *

 * This function returns the inherited flags.

		/*

		 * The parent is not a directory, which means that an extended

		 * attribute inode is being created. No flags.

 The "DIRSYNC" flag only applies to directories */

/**

 * ubifs_new_inode - allocate new UBIFS inode object.

 * @c: UBIFS file-system description object

 * @dir: parent directory inode

 * @mode: inode mode flags

 *

 * This function finds an unused inode number, allocates new inode and

 * initializes it. Returns new inode in case of success and an error code in

 * case of failure.

	/*

	 * Set 'S_NOCMTIME' to prevent VFS form updating [mc]time of inodes and

	 * marking them dirty in file write path (see 'file_update_time()').

	 * UBIFS has to fully control "clean <-> dirty" transitions of inodes

	 * to make budgeting work.

 Inode number overflow is currently not supported */

	/*

	 * The creation sequence number remains with this inode for its

	 * lifetime. All nodes for this inode have a greater sequence number,

	 * and so it is possible to distinguish obsolete nodes belonging to a

	 * previous incarnation of the same inode number - for example, for the

	 * purpose of rebuilding the index.

 ENOENT */

		/*

		 * This should not happen. Probably the file-system needs

		 * checking.

	/*

	 * Budget request settings: new inode, new direntry, changing the

	 * parent directory inode.

	/*

	 * Budget request settings: new dirty inode, new direntry,

	 * budget for dirtied inode will be released via writeback.

/**

 * vfs_dent_type - get VFS directory entry type.

 * @type: UBIFS directory entry type

 *

 * This function converts UBIFS directory entry type into VFS directory entry

 * type.

/*

 * The classical Unix view for directory is that it is a linear array of

 * (name, inode number) entries. Linux/VFS assumes this model as well.

 * Particularly, 'readdir()' call wants us to return a directory entry offset

 * which later may be used to continue 'readdir()'ing the directory or to

 * 'seek()' to that specific direntry. Obviously UBIFS does not really fit this

 * model because directory entries are identified by keys, which may collide.

 *

 * UBIFS uses directory entry hash value for directory offsets, so

 * 'seekdir()'/'telldir()' may not always work because of possible key

 * collisions. But UBIFS guarantees that consecutive 'readdir()' calls work

 * properly by means of saving full directory entry name in the private field

 * of the file description object.

 *

 * This means that UBIFS cannot support NFS which requires full

 * 'seekdir()'/'telldir()' support.

		/*

		 * The directory was seek'ed to a senseless position or there

		 * are no more entries.

		/*

		 * The file was seek'ed, which means that @file->private_data

		 * is now invalid. This may also be just the first

		 * 'ubifs_readdir()' invocation, in which case

		 * @file->private_data is NULL, and the below code is

		 * basically a no-op.

	/*

	 * 'generic_file_llseek()' unconditionally sets @file->f_version to

	 * zero, and we use this for detecting whether the file was seek'ed.

 File positions 0 and 1 correspond to "." and ".." */

 Find the first entry in TNC and save it */

		/*

		 * The directory was seek'ed to and is now readdir'ed.

		 * Find the entry corresponding to @ctx->pos or the closest one.

 Switch to the next entry */

		/*

		 * -ENOENT is a non-fatal error in this context, the TNC uses

		 * it to indicate that the cursor moved past the current directory

		 * and readdir() has to stop.

 2 is a special value indicating that there are no more direntries */

 Free saved readdir() state when the directory is closed */

/**

 * lock_2_inodes - a wrapper for locking two UBIFS inodes.

 * @inode1: first inode

 * @inode2: second inode

 *

 * We do not implement any tricks to guarantee strict lock ordering, because

 * VFS has already done it for us on the @i_mutex. So this is just a simple

 * wrapper function.

/**

 * unlock_2_inodes - a wrapper for unlocking two UBIFS inodes.

 * @inode1: first inode

 * @inode2: second inode

	/*

	 * Budget request settings: new direntry, changing the target inode,

	 * changing the parent inode.

 Handle O_TMPFILE corner case, it is allowed to link a O_TMPFILE. */

	/*

	 * Budget request settings: deletion direntry, deletion inode (+1 for

	 * @dirtied_ino), changing the parent directory inode. If budgeting

	 * fails, go ahead anyway because we have extra space reserved for

	 * deletions.

 We've deleted something - clean the "no space" flags */

/**

 * check_dir_empty - check if a directory is empty or not.

 * @dir: VFS inode object of the directory to check

 *

 * This function checks if directory @dir is empty. Returns zero if the

 * directory is empty, %-ENOTEMPTY if it is not, and other negative error codes

 * in case of errors.

	/*

	 * Budget request settings: deletion direntry, deletion inode and

	 * changing the parent inode. If budgeting fails, go ahead anyway

	 * because we have extra space reserved for deletions.

 We've deleted something - clean the "no space" flags */

	/*

	 * Budget request settings: new inode, new direntry and changing parent

	 * directory inode.

	/*

	 * Budget request settings: new inode, new direntry and changing parent

	 * directory inode.

	/*

	 * Budget request settings: new inode, new direntry and changing parent

	 * directory inode.

 encrypt directly into ui->data */

	/*

	 * The terminating zero byte is not written to the flash media and it

	 * is put just to make later in-memory string processing simpler. Thus,

	 * data length is @disk_link.len - 1, not @disk_link.len.

/**

 * lock_4_inodes - a wrapper for locking three UBIFS inodes.

 * @inode1: first inode

 * @inode2: second inode

 * @inode3: third inode

 * @inode4: fouth inode

 *

 * This function is used for 'ubifs_rename()' and @inode1 may be the same as

 * @inode2 whereas @inode3 and @inode4 may be %NULL.

 *

 * We do not implement any tricks to guarantee strict lock ordering, because

 * VFS has already done it for us on the @i_mutex. So this is just a simple

 * wrapper function.

/**

 * unlock_4_inodes - a wrapper for unlocking three UBIFS inodes for rename.

 * @inode1: first inode

 * @inode2: second inode

 * @inode3: third inode

 * @inode4: fouth inode

	/*

	 * Budget request settings: deletion direntry, new direntry, removing

	 * the old inode, and changing old and new parent directory inodes.

	 *

	 * However, this operation also marks the target inode as dirty and

	 * does not write it, so we allocate budget for the target inode

	 * separately.

	/*

	 * Like most other Unix systems, set the @i_ctime for inodes on a

	 * rename.

 We must adjust parent link count when renaming directories */

			/*

			 * @old_dir loses a link because we are moving

			 * @old_inode to a different directory.

			/*

			 * @new_dir only gains a link if we are not also

			 * overwriting an existing directory.

			/*

			 * @old_inode is not moving to a different directory,

			 * but @old_dir still loses a link if we are

			 * overwriting an existing directory.

	/*

	 * And finally, if we unlinked a direntry which happened to have the

	 * same name as the moved direntry, we have to decrement @i_nlink of

	 * the unlinked inode and change its ctime.

		/*

		 * Directories cannot have hard-links, so if this is a

		 * directory, just clear @i_nlink.

	/*

	 * Do not ask 'ubifs_jnl_rename()' to flush write-buffer if @old_inode

	 * is dirty, because this will be done later on at the end of

	 * 'ubifs_rename()'.

	/*

	 * Unfortunately, the 'stat()' system call was designed for block

	 * device based file systems, and it is not appropriate for UBIFS,

	 * because UBIFS does not have notion of "block". For example, it is

	 * difficult to tell how many block a directory takes - it actually

	 * takes less than 300 bytes, but we have to round it to block size,

	 * which introduces large mistake. This makes utilities like 'du' to

	 * report completely senseless numbers. This is the reason why UBIFS

	 * goes the same way as JFFS2 - it reports zero blocks for everything

	 * but regular files, which makes more sense than reporting completely

	 * wrong sizes.

		/*

		 * Note, user-space expects 512-byte blocks count irrespectively

		 * of what was reported in @stat->size.

 SPDX-License-Identifier: GPL-2.0

	/*

	 * Creating an encryption context is done unlocked since we

	 * operate on a new inode which is not visible to other users

	 * at this point. So, no need to check whether inode is locked.

 pad to full block cipher length */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Adrian Hunter

 *          Artem Bityutskiy (Битюцкий Артём)

/*

 * This file implements the budgeting sub-system which is responsible for UBIFS

 * space management.

 *

 * Factors such as compression, wasted space at the ends of LEBs, space in other

 * journal heads, the effect of updates on the index, and so on, make it

 * impossible to accurately predict the amount of space needed. Consequently

 * approximations are used.

/*

 * When pessimistic budget calculations say that there is no enough space,

 * UBIFS starts writing back dirty inodes and pages, doing garbage collection,

 * or committing. The below constant defines maximum number of times UBIFS

 * repeats the operations.

/*

 * The below constant defines amount of dirty pages which should be written

 * back at when trying to shrink the liability.

/**

 * shrink_liability - write-back some dirty pages/inodes.

 * @c: UBIFS file-system description object

 * @nr_to_write: how many dirty pages to write-back

 *

 * This function shrinks UBIFS liability by means of writing back some amount

 * of dirty inodes and their pages.

 *

 * Note, this function synchronizes even VFS inodes which are locked

 * (@i_mutex) by the caller of the budgeting function, because write-back does

 * not touch @i_mutex.

/**

 * run_gc - run garbage collector.

 * @c: UBIFS file-system description object

 *

 * This function runs garbage collector to make some more free space. Returns

 * zero if a free LEB has been produced, %-EAGAIN if commit is required, and a

 * negative error code in case of failure.

 Make some free space by garbage-collecting dirty space */

 GC freed one LEB, return it to lprops */

/**

 * get_liability - calculate current liability.

 * @c: UBIFS file-system description object

 *

 * This function calculates and returns current UBIFS liability, i.e. the

 * amount of bytes UBIFS has "promised" to write to the media.

/**

 * make_free_space - make more free space on the file-system.

 * @c: UBIFS file-system description object

 *

 * This function is called when an operation cannot be budgeted because there

 * is supposedly no free space. But in most cases there is some free space:

 *   o budgeting is pessimistic, so it always budgets more than it is actually

 *     needed, so shrinking the liability is one way to make free space - the

 *     cached data will take less space then it was budgeted for;

 *   o GC may turn some dark space into free space (budgeting treats dark space

 *     as not available);

 *   o commit may free some LEB, i.e., turn freeable LEBs into free LEBs.

 *

 * So this function tries to do the above. Returns %-EAGAIN if some free space

 * was presumably made and the caller has to re-try budgeting the operation.

 * Returns %-ENOSPC if it couldn't do more free space, and other negative error

 * codes on failures.

		/*

		 * We probably have some dirty pages or inodes (liability), try

		 * to write them back.

 Liability did not shrink again, try GC */

 Some real error happened */

/**

 * ubifs_calc_min_idx_lebs - calculate amount of LEBs for the index.

 * @c: UBIFS file-system description object

 *

 * This function calculates and returns the number of LEBs which should be kept

 * for index usage.

 And make sure we have thrice the index size of space reserved */

	/*

	 * We do not maintain 'old_idx_size' as 'old_idx_lebs'/'old_idx_bytes'

	 * pair, nor similarly the two variables for the new index size, so we

	 * have to do this costly 64-bit division on fast-path.

	/*

	 * The index head is not available for the in-the-gaps method, so add an

	 * extra LEB to compensate.

/**

 * ubifs_calc_available - calculate available FS space.

 * @c: UBIFS file-system description object

 * @min_idx_lebs: minimum number of LEBs reserved for the index

 *

 * This function calculates and returns amount of FS space available for use.

	/*

	 * Now 'available' contains theoretically available flash space

	 * assuming there is no index, so we have to subtract the space which

	 * is reserved for the index.

 Take into account that GC reserves one LEB for its own needs */

	/*

	 * The GC journal head LEB is not really accessible. And since

	 * different write types go to different heads, we may count only on

	 * one head's space.

 We also reserve one LEB for deletions, which bypass budgeting */

 Subtract the dead space which is not available for use */

	/*

	 * Subtract dark space, which might or might not be usable - it depends

	 * on the data which we have on the media and which will be written. If

	 * this is a lot of uncompressed or not-compressible data, the dark

	 * space cannot be used.

	/*

	 * However, there is more dark space. The index may be bigger than

	 * @min_idx_lebs. Those extra LEBs are assumed to be available, but

	 * their dark space is not included in total_dark, so it is subtracted

	 * here.

 The calculations are rough and may end up with a negative number */

/**

 * can_use_rp - check whether the user is allowed to use reserved pool.

 * @c: UBIFS file-system description object

 *

 * UBIFS has so-called "reserved pool" which is flash space reserved

 * for the superuser and for uses whose UID/GID is recorded in UBIFS superblock.

 * This function checks whether current user is allowed to use reserved pool.

 * Returns %1  current user is allowed to use reserved pool and %0 otherwise.

/**

 * do_budget_space - reserve flash space for index and data growth.

 * @c: UBIFS file-system description object

 *

 * This function makes sure UBIFS has enough free LEBs for index growth and

 * data.

 *

 * When budgeting index space, UBIFS reserves thrice as many LEBs as the index

 * would take if it was consolidated and written to the flash. This guarantees

 * that the "in-the-gaps" commit method always succeeds and UBIFS will always

 * be able to commit dirty index. So this function basically adds amount of

 * budgeted index space to the size of the current index, multiplies this by 3,

 * and makes sure this does not exceed the amount of free LEBs.

 *

 * Notes about @c->bi.min_idx_lebs and @c->lst.idx_lebs variables:

 * o @c->lst.idx_lebs is the number of LEBs the index currently uses. It might

 *    be large, because UBIFS does not do any index consolidation as long as

 *    there is free space. IOW, the index may take a lot of LEBs, but the LEBs

 *    will contain a lot of dirt.

 * o @c->bi.min_idx_lebs is the number of LEBS the index presumably takes. IOW,

 *    the index may be consolidated to take up to @c->bi.min_idx_lebs LEBs.

 *

 * This function returns zero in case of success, and %-ENOSPC in case of

 * failure.

 First budget index space */

 Now 'min_idx_lebs' contains number of LEBs to reserve */

	/*

	 * The number of LEBs that are available to be used by the index is:

	 *

	 *    @c->lst.empty_lebs + @c->freeable_cnt + @c->idx_gc_cnt -

	 *    @c->lst.taken_empty_lebs

	 *

	 * @c->lst.empty_lebs are available because they are empty.

	 * @c->freeable_cnt are available because they contain only free and

	 * dirty space, @c->idx_gc_cnt are available because they are index

	 * LEBs that have been garbage collected and are awaiting the commit

	 * before they can be used. And the in-the-gaps method will grab these

	 * if it needs them. @c->lst.taken_empty_lebs are empty LEBs that have

	 * already been allocated for some purpose.

	 *

	 * Note, @c->idx_gc_cnt is included to both @c->lst.empty_lebs (because

	 * these LEBs are empty) and to @c->lst.taken_empty_lebs (because they

	 * are taken until after the commit).

	 *

	 * Note, @c->lst.taken_empty_lebs may temporarily be higher by one

	 * because of the way we serialize LEB allocations and budgeting. See a

	 * comment in 'ubifs_find_free_space()'.

/**

 * calc_idx_growth - calculate approximate index growth from budgeting request.

 * @c: UBIFS file-system description object

 * @req: budgeting request

 *

 * For now we assume each new node adds one znode. But this is rather poor

 * approximation, though.

/**

 * calc_data_growth - calculate approximate amount of new data from budgeting

 * request.

 * @c: UBIFS file-system description object

 * @req: budgeting request

/**

 * calc_dd_growth - calculate approximate amount of data which makes other data

 * dirty from budgeting request.

 * @c: UBIFS file-system description object

 * @req: budgeting request

/**

 * ubifs_budget_space - ensure there is enough space to complete an operation.

 * @c: UBIFS file-system description object

 * @req: budget request

 *

 * This function allocates budget for an operation. It uses pessimistic

 * approximation of how much flash space the operation needs. The goal of this

 * function is to make sure UBIFS always has flash space to flush all dirty

 * pages, dirty inodes, and dirty znodes (liability). This function may force

 * commit, garbage-collection or write-back. Returns zero in case of success,

 * %-ENOSPC if there is no free space and other negative error codes in case of

 * failures.

 Restore the old values */

/**

 * ubifs_release_budget - release budgeted free space.

 * @c: UBIFS file-system description object

 * @req: budget request

 *

 * This function releases the space budgeted by 'ubifs_budget_space()'. Note,

 * since the index changes (which were budgeted for in @req->idx_growth) will

 * only be written to the media on commit, this function moves the index budget

 * from @c->bi.idx_growth to @c->bi.uncommitted_idx. The latter will be zeroed

 * by the commit operation.

/**

 * ubifs_convert_page_budget - convert budget of a new page.

 * @c: UBIFS file-system description object

 *

 * This function converts budget which was allocated for a new page of data to

 * the budget of changing an existing page of data. The latter is smaller than

 * the former, so this function only does simple re-calculation and does not

 * involve any write-back.

 Release the index growth reservation */

 Release the data growth reservation */

 Increase the dirty data growth reservation instead */

 And re-calculate the indexing space reservation */

/**

 * ubifs_release_dirty_inode_budget - release dirty inode budget.

 * @c: UBIFS file-system description object

 * @ui: UBIFS inode to release the budget for

 *

 * This function releases budget corresponding to a dirty inode. It is usually

 * called when after the inode has been written to the media and marked as

 * clean. It also causes the "no space" flags to be cleared.

 The "no space" flags will be cleared because dd_growth is > 0 */

/**

 * ubifs_reported_space - calculate reported free space.

 * @c: the UBIFS file-system description object

 * @free: amount of free space

 *

 * This function calculates amount of free space which will be reported to

 * user-space. User-space application tend to expect that if the file-system

 * (e.g., via the 'statfs()' call) reports that it has N bytes available, they

 * are able to write a file of size N. UBIFS attaches node headers to each data

 * node and it has to write indexing nodes as well. This introduces additional

 * overhead, and UBIFS has to report slightly less free space to meet the above

 * expectations.

 *

 * This function assumes free space is made up of uncompressed data nodes and

 * full index nodes (one per data node, tripled because we always allow enough

 * space to write the index thrice).

 *

 * Note, the calculation is pessimistic, which means that most of the time

 * UBIFS reports less space than it actually has.

	/*

	 * Reported space size is @free * X, where X is UBIFS block size

	 * divided by UBIFS block size + all overhead one data block

	 * introduces. The overhead is the node header + indexing overhead.

	 *

	 * Indexing overhead calculations are based on the following formula:

	 * I = N/(f - 1) + 1, where I - number of indexing nodes, N - number

	 * of data nodes, f - fanout. Because effective UBIFS fanout is twice

	 * as less than maximum fanout, we assume that each data node

	 * introduces 3 * @c->max_idx_node_sz / (@c->fanout/2 - 1) bytes.

	 * Note, the multiplier 3 is because UBIFS reserves thrice as more space

	 * for the index.

/**

 * ubifs_get_free_space_nolock - return amount of free space.

 * @c: UBIFS file-system description object

 *

 * This function calculates amount of free space to report to user-space.

 *

 * Because UBIFS may introduce substantial overhead (the index, node headers,

 * alignment, wastage at the end of LEBs, etc), it cannot report real amount of

 * free flash space it has (well, because not all dirty space is reclaimable,

 * UBIFS does not actually know the real amount). If UBIFS did so, it would

 * bread user expectations about what free space is. Users seem to accustomed

 * to assume that if the file-system reports N bytes of free space, they would

 * be able to fit a file of N bytes to the FS. This almost works for

 * traditional file-systems, because they have way less overhead than UBIFS.

 * So, to keep users happy, UBIFS tries to take the overhead into account.

	/*

	 * When reporting free space to user-space, UBIFS guarantees that it is

	 * possible to write a file of free space size. This means that for

	 * empty LEBs we may use more precise calculations than

	 * 'ubifs_calc_available()' is using. Namely, we know that in empty

	 * LEBs we would waste only @c->leb_overhead bytes, not @c->dark_wm.

	 * Thus, amend the available space.

	 *

	 * Note, the calculations below are similar to what we have in

	 * 'do_budget_space()', so refer there for comments.

/**

 * ubifs_get_free_space - return amount of free space.

 * @c: UBIFS file-system description object

 *

 * This function calculates and returns amount of free space to report to

 * user-space.

 SPDX-License-Identifier: GPL-2.0

 Normal UBIFS messages */

 UBIFS error messages */

 UBIFS warning messages */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Artem Bityutskiy (Битюцкий Артём)

 *          Adrian Hunter

/*

 * This file implements VFS file and inode operations for regular files, device

 * nodes and symlinks as well as address space operations.

 *

 * UBIFS uses 2 page flags: @PG_private and @PG_checked. @PG_private is set if

 * the page is dirty and is used for optimization purposes - dirty pages are

 * not budgeted so the flag shows that 'ubifs_write_end()' should not release

 * the budget for this page. The @PG_checked flag is set if full budgeting is

 * required for the page e.g., when it corresponds to a file hole or it is

 * beyond the file size. The budgeting is done in 'ubifs_write_begin()', because

 * it is OK to fail in this function, and the budget is released in

 * 'ubifs_write_end()'. So the @PG_private and @PG_checked flags carry

 * information about how the page was budgeted, to make it possible to release

 * the budget properly.

 *

 * A thing to keep in mind: inode @i_mutex is locked in most VFS operations we

 * implement. However, this is not true for 'ubifs_writepage()', which may be

 * called with @i_mutex unlocked. For example, when flusher thread is doing

 * background write-back, it calls 'ubifs_writepage()' with unlocked @i_mutex.

 * At "normal" work-paths the @i_mutex is locked in 'ubifs_writepage()', e.g.

 * in the "sys_write -> alloc_pages -> direct reclaim path". So, in

 * 'ubifs_writepage()' we are only guaranteed that the page is locked.

 *

 * Similarly, @i_mutex is not always locked in 'ubifs_readpage()', e.g., the

 * read-ahead path does not lock it ("sys_read -> generic_file_aio_read ->

 * ondemand_readahead -> readpage"). In case of readahead, @I_SYNC flag is not

 * set as well. However, UBIFS disables readahead.

 Not found, so it must be a hole */

	/*

	 * Data length can be less than a full block, even for blocks that are

	 * not the last in the file (e.g., as a result of making a hole and

	 * appending data). Ensure that the remainder is zeroed out.

 Reading beyond inode */

 Reading beyond inode */

 Not found, so it must be a hole */

/**

 * release_new_page_budget - release budget of a new page.

 * @c: UBIFS file-system description object

 *

 * This is a helper function which releases budget corresponding to the budget

 * of one new page of data.

/**

 * release_existing_page_budget - release budget of an existing page.

 * @c: UBIFS file-system description object

 *

 * This is a helper function which releases budget corresponding to the budget

 * of changing one page of data which already exists on the flash media.

	/*

	 * At the slow path we have to budget before locking the page, because

	 * budgeting may force write-back, which would wait on locked pages and

	 * deadlock if we had the page locked. At this point we do not know

	 * anything about the page, so assume that this is a new page which is

	 * written to a hole. This corresponds to largest budget. Later the

	 * budget will be amended if this is not true.

 We are appending data, budget for inode change */

		/*

		 * The page is dirty, which means it was budgeted twice:

		 *   o first time the budget was allocated by the task which

		 *     made the page dirty and set the PG_private flag;

		 *   o and then we budgeted for it for the second time at the

		 *     very beginning of this function.

		 *

		 * So what we have to do is to release the page budget we

		 * allocated.

		/*

		 * We are changing a page which already exists on the media.

		 * This means that changing the page does not make the amount

		 * of indexing information larger, and this part of the budget

		 * which we have already acquired may be released.

		/*

		 * 'ubifs_write_end()' is optimized from the fast-path part of

		 * 'ubifs_write_begin()' and expects the @ui_mutex to be locked

		 * if data is appended.

			/*

			 * The inode is dirty already, so we may free the

			 * budget we allocated.

/**

 * allocate_budget - allocate budget for 'ubifs_write_begin()'.

 * @c: UBIFS file-system description object

 * @page: page to allocate budget for

 * @ui: UBIFS inode object the page belongs to

 * @appending: non-zero if the page is appended

 *

 * This is a helper function for 'ubifs_write_begin()' which allocates budget

 * for the operation. The budget is allocated differently depending on whether

 * this is appending, whether the page is dirty or not, and so on. This

 * function leaves the @ui->ui_mutex locked in case of appending. Returns zero

 * in case of success and %-ENOSPC in case of failure.

			/*

			 * The page is dirty and we are not appending, which

			 * means no budget is needed at all.

			/*

			 * The page is dirty and we are appending, so the inode

			 * has to be marked as dirty. However, it is already

			 * dirty, so we do not need any budget. We may return,

			 * but @ui->ui_mutex hast to be left locked because we

			 * should prevent write-back from flushing the inode

			 * and freeing the budget. The lock will be released in

			 * 'ubifs_write_end()'.

		/*

		 * The page is dirty, we are appending, the inode is clean, so

		 * we need to budget the inode change.

			/*

			 * The page corresponds to a hole and does not

			 * exist on the media. So changing it makes

			 * make the amount of indexing information

			 * larger, and we have to budget for a new

			 * page.

			/*

			 * Not a hole, the change will not add any new

			 * indexing information, budget for page

			 * change.

				/*

				 * The inode is clean but we will have to mark

				 * it as dirty because we are appending. This

				 * needs a budget.

/*

 * This function is called when a page of data is going to be written. Since

 * the page of data will not necessarily go to the flash straight away, UBIFS

 * has to reserve space on the media for it, which is done by means of

 * budgeting.

 *

 * This is the hot-path of the file-system and we are trying to optimize it as

 * much as possible. For this reasons it is split on 2 parts - slow and fast.

 *

 * There many budgeting cases:

 *     o a new page is appended - we have to budget for a new page and for

 *       changing the inode; however, if the inode is already dirty, there is

 *       no need to budget for it;

 *     o an existing clean page is changed - we have budget for it; if the page

 *       does not exist on the media (a hole), we have to budget for a new

 *       page; otherwise, we may budget for changing an existing page; the

 *       difference between these cases is that changing an existing page does

 *       not introduce anything new to the FS indexing information, so it does

 *       not grow, and smaller budget is acquired in this case;

 *     o an existing dirty page is changed - no need to budget at all, because

 *       the page budget has been acquired by earlier, when the page has been

 *       marked dirty.

 *

 * UBIFS budgeting sub-system may force write-back if it thinks there is no

 * space to reserve. This imposes some locking restrictions and makes it

 * impossible to take into account the above cases, and makes it impossible to

 * optimize budgeting.

 *

 * The solution for this is that the fast path of 'ubifs_write_begin()' assumes

 * there is a plenty of flash space and the budget will be acquired quickly,

 * without forcing write-back. The slow path does not make this assumption.

 Try out the fast-path part first */

 The page is not loaded from the flash */

			/*

			 * We change whole page so no need to load it. But we

			 * do not know whether this page exists on the media or

			 * not, so we assume the latter because it requires

			 * larger budget. The assumption is that it is better

			 * to budget a bit more than to read the page from the

			 * media. Thus, we are setting the @PG_checked flag

			 * here.

		/*

		 * If we skipped reading the page because we were going to

		 * write all of it, then it is not up to date.

		/*

		 * Budgeting failed which means it would have to force

		 * write-back but didn't, because we set the @fast flag in the

		 * request. Write-back cannot be done now, while we have the

		 * page locked, because it would deadlock. Unlock and free

		 * everything and fall-back to slow-path.

	/*

	 * Whee, we acquired budgeting quickly - without involving

	 * garbage-collection, committing or forcing write-back. We return

	 * with @ui->ui_mutex locked if we are appending pages, and unlocked

	 * otherwise. This is an optimization (slightly hacky though).

/**

 * cancel_budget - cancel budget.

 * @c: UBIFS file-system description object

 * @page: page to cancel budget for

 * @ui: UBIFS inode object the page belongs to

 * @appending: non-zero if the page is appended

 *

 * This is a helper function for a page write operation. It unlocks the

 * @ui->ui_mutex in case of appending.

		/*

		 * VFS copied less data to the page that it intended and

		 * declared in its '->write_begin()' call via the @len

		 * argument. If the page was not up-to-date, and @len was

		 * @PAGE_SIZE, the 'ubifs_write_begin()' function did

		 * not load it from the media (for optimization reasons). This

		 * means that part of the page contains garbage. So read the

		 * page now.

		/*

		 * Return 0 to force VFS to repeat the whole operation, or the

		 * error code if 'do_readpage()' fails.

		/*

		 * Note, we do not set @I_DIRTY_PAGES (which means that the

		 * inode has dirty pages), this has been done in

		 * '__set_page_dirty_nobuffers()'.

/**

 * populate_page - copy data nodes into a page for bulk-read.

 * @c: UBIFS file-system description object

 * @page: page

 * @bu: bulk-read information

 * @n: next zbranch slot

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * ubifs_do_bulk_read - do bulk-read.

 * @c: UBIFS file-system description object

 * @bu: bulk-read information

 * @page1: first page to read

 *

 * This function returns %1 if the bulk-read is done, otherwise %0 is returned.

 Turn off bulk-read at the end of the file */

		/*

		 * This happens when there are multiple blocks per page and the

		 * blocks for the first page we are looking for, are not

		 * together. If all the pages were like this, bulk-read would

		 * reduce performance, so we turn it off for a while.

			/*

			 * Allocate bulk-read buffer depending on how many data

			 * nodes we are going to read.

/**

 * ubifs_bulk_read - determine whether to bulk-read and, if so, do it.

 * @page: page from which to start bulk-read.

 *

 * Some flash media are capable of reading sequentially at faster rates. UBIFS

 * bulk-read facility is designed to take advantage of that, by reading in one

 * go consecutive data nodes that are also located consecutively in the same

 * LEB. This function returns %1 if a bulk-read is done and %0 otherwise.

	/*

	 * Bulk-read is protected by @ui->ui_mutex, but it is an optimization,

	 * so don't bother if we cannot lock the mutex.

 Turn off bulk-read if we stop reading sequentially */

 Three reads in a row, so switch on bulk-read */

	/*

	 * If possible, try to use pre-allocated bulk-read information, which

	 * is protected by @c->bu_mutex.

 Update radix tree tags */

/*

 * When writing-back dirty inodes, VFS first writes-back pages belonging to the

 * inode, then the inode itself. For UBIFS this may cause a problem. Consider a

 * situation when a we have an inode with size 0, then a megabyte of data is

 * appended to the inode, then write-back starts and flushes some amount of the

 * dirty pages, the journal becomes full, commit happens and finishes, and then

 * an unclean reboot happens. When the file system is mounted next time, the

 * inode size would still be 0, but there would be many pages which are beyond

 * the inode size, they would be indexed and consume flash space. Because the

 * journal has been committed, the replay would not be able to detect this

 * situation and correct the inode size. This means UBIFS would have to scan

 * whole index and correct all inode sizes, which is long an unacceptable.

 *

 * To prevent situations like this, UBIFS writes pages back only if they are

 * within the last synchronized inode size, i.e. the size which has been

 * written to the flash media last time. Otherwise, UBIFS forces inode

 * write-back, thus making sure the on-flash inode contains current inode size,

 * and then keeps writing pages back.

 *

 * Some locking issues explanation. 'ubifs_writepage()' first is called with

 * the page locked, and it locks @ui_mutex. However, write-back does take inode

 * @i_mutex, which means other VFS operations may be run on this inode at the

 * same time. And the problematic one is truncation to smaller size, from where

 * we have to call 'truncate_setsize()', which first changes @inode->i_size,

 * then drops the truncated pages. And while dropping the pages, it takes the

 * page lock. This means that 'do_truncation()' cannot call 'truncate_setsize()'

 * with @ui_mutex locked, because it would deadlock with 'ubifs_writepage()'.

 * This means that @inode->i_size is changed while @ui_mutex is unlocked.

 *

 * XXX(truncate): with the new truncate sequence this is not true anymore,

 * and the calls to truncate_setsize can be move around freely.  They should

 * be moved to the very end of the truncate sequence.

 *

 * But in 'ubifs_writepage()' we have to guarantee that we do not write beyond

 * inode size. How do we do this if @inode->i_size may became smaller while we

 * are in the middle of 'ubifs_writepage()'? The UBIFS solution is the

 * @ui->ui_isize "shadow" field which UBIFS uses instead of @inode->i_size

 * internally and updates it under @ui_mutex.

 *

 * Q: why we do not worry that if we race with truncation, we may end up with a

 * situation when the inode is truncated while we are in the middle of

 * 'do_writepage()', so we do write beyond inode size?

 * A: If we are in the middle of 'do_writepage()', truncation would be locked

 * on the page lock and it would not write the truncated inode node to the

 * journal before we have finished.

 Is the page fully outside @i_size? (truncate in progress) */

 Is the page fully inside @i_size? */

			/*

			 * The inode has been written, but the write-buffer has

			 * not been synchronized, so in case of an unclean

			 * reboot we may end up with some pages beyond inode

			 * size, but they would be in the journal (because

			 * commit flushes write buffers) and recovery would deal

			 * with this.

	/*

	 * The page straddles @i_size. It must be zeroed out on each and every

	 * writepage invocation because it may be mmapped. "A file is mapped

	 * in multiples of the page size. For a file that is not a multiple of

	 * the page size, the remaining memory is zeroed when mapped, and

	 * writes to that region are not written out to the file."

/**

 * do_attr_changes - change inode attributes.

 * @inode: inode to change attributes for

 * @attr: describes attributes to change

/**

 * do_truncation - truncate an inode.

 * @c: UBIFS file-system description object

 * @inode: inode to truncate

 * @attr: inode attribute changes description

 *

 * This function implements VFS '->setattr()' call when the inode is truncated

 * to a smaller size. Returns zero in case of success and a negative error code

 * in case of failure.

	/*

	 * If this is truncation to a smaller size, and we do not truncate on a

	 * block boundary, budget for changing one data block, because the last

	 * block will be re-written.

 A funny way to budget for truncation node */

		/*

		 * Treat truncations to zero as deletion and always allow them,

		 * just like we do for '->unlink()'.

				/*

				 * 'ubifs_jnl_truncate()' will try to truncate

				 * the last data node, but it contains

				 * out-of-date data because the page is dirty.

				 * Write the page now, so that

				 * 'ubifs_jnl_truncate()' will see an already

				 * truncated (and up to date) data node.

				/*

				 * We could now tell 'ubifs_jnl_truncate()' not

				 * to read the last block.

				/*

				 * We could 'kmap()' the page and pass the data

				 * to 'ubifs_jnl_truncate()' to save it from

				 * having to read it.

 Truncation changes inode [mc]time */

 Other attributes may be changed at the same time as well */

/**

 * do_setattr - change inode attributes.

 * @c: UBIFS file-system description object

 * @inode: inode to change attributes for

 * @attr: inode attribute changes description

 *

 * This function implements VFS '->setattr()' call for all cases except

 * truncations to smaller size. Returns zero in case of success and a negative

 * error code in case of failure.

 Truncation changes inode [mc]time */

 'truncate_setsize()' changed @i_size, update @ui_size */

		/*

		 * Inode length changed, so we have to make sure

		 * @I_DIRTY_DATASYNC is set.

 Truncation to a smaller size */

 Partial page remains dirty */

		/*

		 * For some really strange reasons VFS does not filter out

		 * 'fsync()' for R/O mounted file-systems as per 2.6.39.

 Synchronize the inode unless this is a 'datasync()' call. */

	/*

	 * Nodes related to this inode may still sit in a write-buffer. Flush

	 * them.

/**

 * mctime_update_needed - check if mtime or ctime update is needed.

 * @inode: the inode to do the check for

 * @now: current time

 *

 * This helper function checks if the inode mtime/ctime should be updated or

 * not. If current values of the time-stamps are within the UBIFS inode time

 * granularity, they are not updated. This is an optimization.

/**

 * ubifs_update_time - update time of inode.

 * @inode: inode to update

 *

 * This function updates time of the inode.

/**

 * update_mctime - update mtime and ctime of an inode.

 * @inode: inode to update

 *

 * This function updates mtime and ctime of the inode if it is not equivalent to

 * current time. Returns zero in case of success and a negative error code in

 * case of failure.

	/*

	 * An attempt to dirty a page without budgeting for it - should not

	 * happen.

	/*

	 * An attempt to release a dirty page without budgeting for it - should

	 * not happen.

/*

 * mmap()d file has taken write protection fault and is being made writable.

 * UBIFS must ensure page is budgeted for.

 -EROFS */

	/*

	 * We have not locked @page so far so we may budget for changing the

	 * page. Note, we cannot do this after we locked the page, because

	 * budgeting may cause write-back which would cause deadlock.

	 *

	 * At the moment we do not know whether the page is dirty or not, so we

	 * assume that it is not and budget for a new page. We could look at

	 * the @PG_private flag and figure this out, but we may race with write

	 * back and the page state may change by the time we lock it, so this

	 * would need additional care. We do not bother with this at the

	 * moment, although it might be good idea to do. Instead, we allocate

	 * budget for a new page and amend it later on if the page was in fact

	 * dirty.

	 *

	 * The budgeting-related logic of this function is similar to what we

	 * do in 'ubifs_write_begin()' and 'ubifs_write_end()'. Glance there

	 * for more comments.

		/*

		 * We have to change inode time stamp which requires extra

		 * budgeting.

 Page got truncated out from underneath us */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Artem Bityutskiy (Битюцкий Артём)

 *          Adrian Hunter

/*

 * This file implements UBIFS superblock. The superblock is stored at the first

 * LEB of the volume and is never changed by UBIFS. Only user-space tools may

 * change it. The superblock node mostly contains geometry information.

/*

 * Default journal size in logical eraseblocks as a percent of total

 * flash size.

 Default maximum journal size in bytes */

 Default indexing tree fanout */

 Default number of data journal heads */

 Default positions of different LEBs in the main area */

 Default number of LEB numbers in LPT's save table */

 Default reserved pool size as a percent of maximum free space */

 The default maximum size of reserved pool in bytes */

 Default time granularity in nanoseconds */

/**

 * create_default_filesystem - format empty UBI volume.

 * @c: UBIFS file-system description object

 *

 * This function creates default empty file-system. Returns zero in case of

 * success and a negative error code in case of failure.

 Some functions called from here depend on the @c->key_len filed */

	/*

	 * First of all, we have to calculate default file-system geometry -

	 * log size, journal size, etc.

 We can first multiply then divide and have no overflow */

	/*

	 * The log should be large enough to fit reference nodes for all bud

	 * LEBs. Because buds do not have to start from the beginning of LEBs

	 * (half of the LEB may contain committed data), the log should

	 * generally be larger, make it twice as large.

 Plus one LEB reserved for commit */

 And some extra space to allow writes while committing */

	/*

	 * Orphan nodes are stored in a separate area. One node can store a lot

	 * of orphan inode numbers, but when new orphan comes we just add a new

	 * orphan node. At some point the nodes are consolidated into one

	 * orphan node.

		/*

		 * For debugging purposes it is better to have at least 2

		 * orphan LEBs, because the orphan subsystem would need to do

		 * consolidations and would be stressed more.

 Create default superblock */

 Create default master node */

 Calculate lprops statistics */

  The indexing LEB does not contribute to dark space */

 Create the root indexing node */

 Create default root inode */

 Set compression enabled by default */

	/*

	 * The first node in the log has to be the commit start node. This is

	 * always the case during normal file-system operation. Write a fake

	 * commit start node to the log.

/**

 * validate_sb - validate superblock node.

 * @c: UBIFS file-system description object

 * @sup: superblock node

 *

 * This function validates superblock node @sup. Since most of data was read

 * from the superblock and stored in @c, the function validates fields in @c

 * instead. Returns zero in case of success and %-EINVAL in case of validation

 * failure.

	/*

	 * Calculate minimum allowed amount of main area LEBs. This is very

	 * similar to %UBIFS_MIN_LEB_CNT, but we take into account real what we

	 * have just read from the superblock.

/**

 * ubifs_read_sb_node - read superblock node.

 * @c: UBIFS file-system description object

 *

 * This function returns a pointer to the superblock node or a negative error

 * code. Note, the user of this function is responsible of kfree()'ing the

 * returned superblock buffer.

	/*

	 * The super block node can either be authenticated by a HMAC or

	 * by a signature in a ubifs_sig_node directly following the

	 * super block node to support offline image creation.

/**

 * ubifs_write_sb_node - write superblock node.

 * @c: UBIFS file-system description object

 * @sup: superblock node read with 'ubifs_read_sb_node()'

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * ubifs_read_superblock - read superblock.

 * @c: UBIFS file-system description object

 *

 * This function finds, reads and checks the superblock. If an empty UBI volume

 * is being mounted, this function creates default superblock. Returns zero in

 * case of success, and a negative error code in case of failure.

	/*

	 * The software supports all previous versions but not future versions,

	 * due to the unavailability of time-travelling equipment.

		/*

		 * The FS is mounted R/O, and the media format is

		 * R/O-compatible with the UBIFS implementation, so we can

		 * mount.

 Automatically increase file system size to the maximum size */

/**

 * fixup_leb - fixup/unmap an LEB containing free space.

 * @c: UBIFS file-system description object

 * @lnum: the LEB number to fix up

 * @len: number of used bytes in LEB (starting at offset 0)

 *

 * This function reads the contents of the given LEB number @lnum, then fixes

 * it up, so that empty min. I/O units in the end of LEB are actually erased on

 * flash (rather than being just all-0xff real data). If the LEB is completely

 * empty, it is simply unmapped.

/**

 * fixup_free_space - find & remap all LEBs containing free space.

 * @c: UBIFS file-system description object

 *

 * This function walks through all LEBs in the filesystem and fiexes up those

 * containing free/empty space.

 Fixup LEBs in the master area */

 Unmap unused log LEBs */

	/*

	 * Fixup the log head which contains the only a CS node at the

	 * beginning.

 Fixup LEBs in the LPT area */

 Unmap LEBs in the orphans area */

 Fixup LEBs in the main area */

/**

 * ubifs_fixup_free_space - find & fix all LEBs with free space.

 * @c: UBIFS file-system description object

 *

 * This function fixes up LEBs containing free space on first mount, if the

 * appropriate flag was set when the FS was created. Each LEB with one or more

 * empty min. I/O unit (i.e. free-space-count > 0) is re-written, to make sure

 * the free space is actually erased. E.g., this is necessary for some NAND

 * chips, since the free space may have been programmed like real "0xff" data

 * (generating a non-0xff ECC), causing future writes to the not-really-erased

 * NAND pages to behave badly. After the space is fixed up, the superblock flag

 * is cleared, so that this is skipped for all future mounts.

 Free-space fixup is no longer required */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Adrian Hunter

 *          Artem Bityutskiy (Битюцкий Артём)

 This file implements TNC functions for committing */

/**

 * make_idx_node - make an index node for fill-the-gaps method of TNC commit.

 * @c: UBIFS file-system description object

 * @idx: buffer in which to place new index node

 * @znode: znode from which to make new index node

 * @lnum: LEB number where new index node will be written

 * @offs: offset where new index node will be written

 * @len: length of new index node

 Make index node */

 Update the parent */

	/*

	 * Note, unlike 'write_index()' we do not add memory barriers here

	 * because this function is called with @c->tnc_mutex locked.

/**

 * fill_gap - make index nodes in gaps in dirty index LEBs.

 * @c: UBIFS file-system description object

 * @lnum: LEB number that gap appears in

 * @gap_start: offset of start of gap

 * @gap_end: offset of end of gap

 * @dirt: adds dirty space to this

 *

 * This function returns the number of index nodes written into the gap.

 Pad to end of min_io_size */

 Pad to end of gap */

/**

 * find_old_idx - find an index node obsoleted since the last commit start.

 * @c: UBIFS file-system description object

 * @lnum: LEB number of obsoleted index node

 * @offs: offset of obsoleted index node

 *

 * Returns %1 if found and %0 otherwise.

/**

 * is_idx_node_in_use - determine if an index node can be overwritten.

 * @c: UBIFS file-system description object

 * @key: key of index node

 * @level: index node level

 * @lnum: LEB number of index node

 * @offs: offset of index node

 *

 * If @key / @lnum / @offs identify an index node that was not part of the old

 * index, then this function returns %0 (obsolete).  Else if the index node was

 * part of the old index but is now dirty %1 is returned, else if it is clean %2

 * is returned. A negative error code is returned on failure.

 Error code */

/**

 * layout_leb_in_gaps - layout index nodes using in-the-gaps method.

 * @c: UBIFS file-system description object

 * @p: return LEB number in @c->gap_lebs[p]

 *

 * This function lays out new index nodes for dirty znodes using in-the-gaps

 * method of TNC commit.

 * This function merely puts the next znode into the next gap, making no attempt

 * to try to maximise the number of znodes that fit.

 * This function returns the number of index nodes written into the gaps, or a

 * negative error code on failure.

 Get an index LEB with lots of obsolete index nodes */

		/*

		 * There also may be dirt in the index head that could be

		 * filled, however we do not check there at present.

 Error code */

	/*

	 * Scan the index LEB.  We use the generic scan for this even though

	 * it is more comprehensive and less efficient than is needed for this

	 * purpose.

 Determine if the index node is in use (not obsolete) */

 Error code */

			/*

			 * The obsolete index nodes form gaps that can be

			 * overwritten.  This gap has ended because we have

			 * found an index node that is still in use

			 * i.e. not obsolete

 Try to fill gap */

 Error code */

 Try to fill gap */

 Error code */

			/*

			 * We must have snatched this LEB from the idx_gc list

			 * so we need to correct the free and dirty space.

/**

 * get_leb_cnt - calculate the number of empty LEBs needed to commit.

 * @c: UBIFS file-system description object

 * @cnt: number of znodes to commit

 *

 * This function returns the number of empty LEBs needed to commit @cnt znodes

 * to the current index head.  The number is not exact and may be more than

 * needed.

 Assume maximum index node size (i.e. overestimate space needed) */

/**

 * layout_in_gaps - in-the-gaps method of committing TNC.

 * @c: UBIFS file-system description object

 * @cnt: number of dirty znodes to commit.

 *

 * This function lays out new index nodes for dirty znodes using in-the-gaps

 * method of TNC commit.

 *

 * This function returns %0 on success and a negative error code on failure.

				/*

				 * Do not print scary warnings if the debugging

				 * option which forces in-the-gaps is enabled.

 Try to commit anyway */

		/*

		 * Dynamically change the size of @c->gap_lebs to prevent

		 * oob, because @c->lst.idx_lebs could be increased by

		 * function @get_idx_gc_leb (called by layout_leb_in_gaps->

		 * ubifs_find_dirty_idx_leb) during loop. Only enlarge

		 * @c->gap_lebs when needed.

		 *

/**

 * layout_in_empty_space - layout index nodes in empty space.

 * @c: UBIFS file-system description object

 *

 * This function lays out new index nodes for dirty znodes using empty LEBs.

 *

 * This function returns %0 on success and a negative error code on failure.

 Ensure there is enough room for first write */

 Determine the index node position */

 Update the parent */

		/*

		 * Once lprops is updated, we can decrease the dirty znode count

		 * but it is easier to just do it here.

		/*

		 * Calculate the next index node length to see if there is

		 * enough room for it

 Update buffer positions */

 The buffer is full or there are no more znodes to do */

/**

 * layout_commit - determine positions of index nodes to commit.

 * @c: UBIFS file-system description object

 * @no_space: indicates that insufficient empty LEBs were allocated

 * @cnt: number of znodes to commit

 *

 * Calculate and update the positions of index nodes to commit.  If there were

 * an insufficient number of empty LEBs allocated, then index nodes are placed

 * into the gaps created by obsolete index nodes in non-empty index LEBs.  For

 * this purpose, an obsolete index node is one that was not in the index as at

 * the end of the last commit.  To write "in-the-gaps" requires that those index

 * LEBs are updated atomically in-place.

/**

 * find_first_dirty - find first dirty znode.

 * @znode: znode to begin searching from

/**

 * find_next_dirty - find next dirty znode.

 * @znode: znode to begin searching from

/**

 * get_znodes_to_commit - create list of dirty znodes to commit.

 * @c: UBIFS file-system description object

 *

 * This function returns the number of znodes to commit.

/**

 * alloc_idx_lebs - allocate empty LEBs to be used to commit.

 * @c: UBIFS file-system description object

 * @cnt: number of znodes to commit

 *

 * This function returns %-ENOSPC if it cannot allocate a sufficient number of

 * empty LEBs.  %0 is returned on success, otherwise a negative error code

 * is returned.

/**

 * free_unused_idx_lebs - free unused LEBs that were allocated for the commit.

 * @c: UBIFS file-system description object

 *

 * It is possible that we allocate more empty LEBs for the commit than we need.

 * This functions frees the surplus.

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * free_idx_lebs - free unused LEBs after commit end.

 * @c: UBIFS file-system description object

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * ubifs_tnc_start_commit - start TNC commit.

 * @c: UBIFS file-system description object

 * @zroot: new index root position is returned here

 *

 * This function prepares the list of indexing nodes to commit and lays out

 * their positions on flash. If there is not enough free space it uses the

 * in-gap commit method. Returns zero in case of success and a negative error

 * code in case of failure.

	/*

	 * Although we have not finished committing yet, update size of the

	 * committed index ('c->bi.old_idx_sz') and zero out the index growth

	 * budget. It is OK to do this now, because we've reserved all the

	 * space which is needed to commit the index, and it is save for the

	 * budgeting subsystem to assume the index is already committed,

	 * even though it is not.

/**

 * write_index - write index nodes.

 * @c: UBIFS file-system description object

 *

 * This function writes the index nodes whose positions were laid out in the

 * layout_in_empty_space function.

	/*

	 * Always write index nodes to the index head so that index nodes and

	 * other types of nodes are never mixed in the same erase block.

 Allocate commit buffer */

 Ensure there is enough room for first write */

 Make index node */

 Determine the index node position */

 Grab some stuff from znode while we still can */

		/*

		 * It is important that other threads should see %DIRTY_ZNODE

		 * flag cleared before %COW_ZNODE. Specifically, it matters in

		 * the 'dirty_cow_znode()' function. This is the reason for the

		 * first barrier. Also, we want the bit changes to be seen to

		 * other threads ASAP, to avoid unnecessary copying, which is

		 * the reason for the second barrier.

		/*

		 * We have marked the znode as clean but have not updated the

		 * @c->clean_zn_cnt counter. If this znode becomes dirty again

		 * before 'free_obsolete_znodes()' is called, then

		 * @c->clean_zn_cnt will be decremented before it gets

		 * incremented (resulting in 2 decrements for the same znode).

		 * This means that @c->clean_zn_cnt may become negative for a

		 * while.

		 *

		 * Q: why we cannot increment @c->clean_zn_cnt?

		 * A: because we do not have the @c->tnc_mutex locked, and the

		 *    following code would be racy and buggy:

		 *

		 *    if (!ubifs_zn_obsolete(znode)) {

		 *            atomic_long_inc(&c->clean_zn_cnt);

		 *            atomic_long_inc(&ubifs_clean_zn_cnt);

		 *    }

		 *

		 *    Thus, we just delay the @c->clean_zn_cnt update until we

		 *    have the mutex locked.

 Do not access znode from this point on */

 Update buffer positions */

		/*

		 * Calculate the next index node length to see if there is

		 * enough room for it

 The buffer is full or there are no more znodes to do */

/**

 * free_obsolete_znodes - free obsolete znodes.

 * @c: UBIFS file-system description object

 *

 * At the end of commit end, obsolete znodes are freed.

/**

 * return_gap_lebs - return LEBs used by the in-gap commit method.

 * @c: UBIFS file-system description object

 *

 * This function clears the "taken" flag for the LEBs which were used by the

 * "commit in-the-gaps" method.

/**

 * ubifs_tnc_end_commit - update the TNC for commit end.

 * @c: UBIFS file-system description object

 *

 * Write the dirty znodes.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Artem Bityutskiy (Битюцкий Артём)

 *          Adrian Hunter

/*

 * This file implements UBIFS shrinker which evicts clean znodes from the TNC

 * tree when Linux VM needs more RAM.

 *

 * We do not implement any LRU lists to find oldest znodes to free because it

 * would add additional overhead to the file system fast paths. So the shrinker

 * just walks the TNC tree when searching for znodes to free.

 *

 * If the root of a TNC sub-tree is clean and old enough, then the children are

 * also clean and old enough. So the shrinker walks the TNC in level order and

 * dumps entire sub-trees.

 *

 * The age of znodes is just the time-stamp when they were last looked at.

 * The current shrinker first tries to evict old znodes, then young ones.

 *

 * Since the shrinker is global, it has to protect against races with FS

 * un-mounts, which is done by the 'ubifs_infos_lock' and 'c->umount_mutex'.

 List of all UBIFS file-system instances */

/*

 * We number each shrinker run and record the number on the ubifs_info structure

 * so that we can easily work out which ubifs_info structures have already been

 * done by the current run.

 Protects 'ubifs_infos' list */

 Global clean znode counter (for all mounted UBIFS instances) */

/**

 * shrink_tnc - shrink TNC tree.

 * @c: UBIFS file-system description object

 * @nr: number of znodes to free

 * @age: the age of znodes to free

 * @contention: if any contention, this is set to %1

 *

 * This function traverses TNC tree and frees clean znodes. It does not free

 * clean znodes which younger then @age. Returns number of freed znodes.

	/*

	 * Traverse the TNC tree in levelorder manner, so that it is possible

	 * to destroy large sub-trees. Indeed, if a znode is old, then all its

	 * children are older or of the same age.

	 *

	 * Note, we are holding 'c->tnc_mutex', so we do not have to lock the

	 * 'c->space_lock' when _reading_ 'c->clean_zn_cnt', because it is

	 * changed only when the 'c->tnc_mutex' is held.

		/*

		 * If the znode is clean, but it is in the 'c->cnext' list, this

		 * means that this znode has just been written to flash as a

		 * part of commit and was marked clean. They will be removed

		 * from the list at end commit. We cannot change the list,

		 * because it is not protected by any mutex (design decision to

		 * make commit really independent and parallel to main I/O). So

		 * we just skip these znodes.

		 *

		 * Note, the 'clean_zn_cnt' counters are not updated until

		 * after the commit, so the UBIFS shrinker does not report

		 * the znodes which are in the 'c->cnext' list as freeable.

		 *

		 * Also note, if the root of a sub-tree is not in 'c->cnext',

		 * then the whole sub-tree is not in 'c->cnext' as well, so it

		 * is safe to dump whole sub-tree.

			/*

			 * Very soon these znodes will be removed from the list

			 * and become freeable.

/**

 * shrink_tnc_trees - shrink UBIFS TNC trees.

 * @nr: number of znodes to free

 * @age: the age of znodes to free

 * @contention: if any contention, this is set to %1

 *

 * This function walks the list of mounted UBIFS file-systems and frees clean

 * znodes which are older than @age, until at least @nr znodes are freed.

 * Returns the number of freed znodes.

 Iterate over all mounted UBIFS file-systems and try to shrink them */

		/*

		 * We move the ones we do to the end of the list, so we stop

		 * when we see one we have already done.

 Some un-mount is in progress, try next FS */

		/*

		 * We're holding 'c->umount_mutex', so the file-system won't go

		 * away.

		/*

		 * OK, now we have TNC locked, the file-system cannot go away -

		 * it is safe to reap the cache.

 Get the next list element before we move this one */

		/*

		 * Move this one to the end of the list to provide some

		 * fairness.

/**

 * kick_a_thread - kick a background thread to start commit.

 *

 * This function kicks a background thread to start background commit. Returns

 * %-1 if a thread was kicked or there is another reason to assume the memory

 * will soon be freed or become freeable. If there are no dirty znodes, returns

 * %0.

	/*

	 * Iterate over all mounted UBIFS file-systems and find out if there is

	 * already an ongoing commit operation there. If no, then iterate for

	 * the second time and initiate background commit.

				/*

				 * Some un-mount is in progress, it will

				 * certainly free memory, so just return.

	/*

	 * Due to the way UBIFS updates the clean znode counter it may

	 * temporarily be negative.

		/*

		 * No clean znodes, nothing to reap. All we can do in this case

		 * is to kick background threads to start commit, which will

		 * probably make clean znodes which, in turn, will be freeable.

		 * And we return -1 which means will make VM call us again

		 * later.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation

 *

 * Authors: Adrian Hunter

 *          Artem Bityutskiy (Битюцкий Артём)

/*

 * This file implements functions needed to recover from unclean un-mounts.

 * When UBIFS is mounted, it checks a flag on the master node to determine if

 * an un-mount was completed successfully. If not, the process of mounting

 * incorporates additional checking and fixing of on-flash data structures.

 * UBIFS always cleans away all remnants of an unclean un-mount, so that

 * errors do not accumulate. However UBIFS defers recovery if it is mounted

 * read-only, and the flash is not modified in that case.

 *

 * The general UBIFS approach to the recovery is that it recovers from

 * corruptions which could be caused by power cuts, but it refuses to recover

 * from corruption caused by other reasons. And UBIFS tries to distinguish

 * between these 2 reasons of corruptions and silently recover in the former

 * case and loudly complain in the latter case.

 *

 * UBIFS writes only to erased LEBs, so it writes only to the flash space

 * containing only 0xFFs. UBIFS also always writes strictly from the beginning

 * of the LEB to the end. And UBIFS assumes that the underlying flash media

 * writes in @c->max_write_size bytes at a time.

 *

 * Hence, if UBIFS finds a corrupted node at offset X, it expects only the min.

 * I/O unit corresponding to offset X to contain corrupted data, all the

 * following min. I/O units have to contain empty space (all 0xFFs). If this is

 * not true, the corruption cannot be the result of a power cut, and UBIFS

 * refuses to mount.

/**

 * is_empty - determine whether a buffer is empty (contains all 0xff).

 * @buf: buffer to clean

 * @len: length of buffer

 *

 * This function returns %1 if the buffer is empty (contains all 0xff) otherwise

 * %0 is returned.

/**

 * first_non_ff - find offset of the first non-0xff byte.

 * @buf: buffer to search in

 * @len: length of buffer

 *

 * This function returns offset of the first non-0xff byte in @buf or %-1 if

 * the buffer contains only 0xff bytes.

/**

 * get_master_node - get the last valid master node allowing for corruption.

 * @c: UBIFS file-system description object

 * @lnum: LEB number

 * @pbuf: buffer containing the LEB read, is returned here

 * @mst: master node, if found, is returned here

 * @cor: corruption, if found, is returned here

 *

 * This function allocates a buffer, reads the LEB into it, and finds and

 * returns the last valid master node allowing for one area of corruption.

 * The corrupt area, if there is one, must be consistent with the assumption

 * that it is the result of an unclean unmount while the master node was being

 * written. Under those circumstances, it is valid to use the previously written

 * master node.

 *

 * This function returns %0 on success and a negative error code on failure.

 Find the first position that is definitely not a node */

 See if there was a valid master node before that */

 Could have been corruption so check one place back */

				/*

				 * We accept only one area of corruption because

				 * we are assuming that it was caused while

				 * trying to write a master node.

 Check for corruption */

 Check remaining empty space */

/**

 * write_rcvrd_mst_node - write recovered master node.

 * @c: UBIFS file-system description object

 * @mst: master node

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * ubifs_recover_master_node - recover the master node.

 * @c: UBIFS file-system description object

 *

 * This function recovers the master node from corruption that may occur due to

 * an unclean unmount.

 *

 * This function returns %0 on success and a negative error code on failure.

			/*

			 * mst1 was written by recovery at offset 0 with no

			 * corruption.

 Same offset, so must be the same */

 1st LEB was written, 2nd was not */

 1st LEB was unmapped and written, 2nd not */

			/*

			 * 2nd LEB was unmapped and about to be written, so

			 * there must be only one master node in the first LEB

			 * and no corruption.

		/*

		 * 1st LEB was unmapped and about to be written, so there must

		 * be no room left in 2nd LEB.

 Read-only mode. Keep a copy for switching to rw mode */

		/*

		 * We had to recover the master node, which means there was an

		 * unclean reboot. However, it is possible that the master node

		 * is clean at this point, i.e., %UBIFS_MST_DIRTY is not set.

		 * E.g., consider the following chain of events:

		 *

		 * 1. UBIFS was cleanly unmounted, so the master node is clean

		 * 2. UBIFS is being mounted R/W and starts changing the master

		 *    node in the first (%UBIFS_MST_LNUM). A power cut happens,

		 *    so this LEB ends up with some amount of garbage at the

		 *    end.

		 * 3. UBIFS is being mounted R/O. We reach this place and

		 *    recover the master node from the second LEB

		 *    (%UBIFS_MST_LNUM + 1). But we cannot update the media

		 *    because we are being mounted R/O. We have to defer the

		 *    operation.

		 * 4. However, this master node (@c->mst_node) is marked as

		 *    clean (since the step 1). And if we just return, the

		 *    mount code will be confused and won't recover the master

		 *    node when it is re-mounter R/W later.

		 *

		 *    Thus, to force the recovery by marking the master node as

		 *    dirty.

 Write the recovered master node */

/**

 * ubifs_write_rcvrd_mst_node - write the recovered master node.

 * @c: UBIFS file-system description object

 *

 * This function writes the master node that was recovered during mounting in

 * read-only mode and must now be written because we are remounting rw.

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * is_last_write - determine if an offset was in the last write to a LEB.

 * @c: UBIFS file-system description object

 * @buf: buffer to check

 * @offs: offset to check

 *

 * This function returns %1 if @offs was in the last write to the LEB whose data

 * is in @buf, otherwise %0 is returned. The determination is made by checking

 * for subsequent empty space starting from the next @c->max_write_size

 * boundary.

	/*

	 * Round up to the next @c->max_write_size boundary i.e. @offs is in

	 * the last wbuf written. After that should be empty space.

/**

 * clean_buf - clean the data from an LEB sitting in a buffer.

 * @c: UBIFS file-system description object

 * @buf: buffer to clean

 * @lnum: LEB number to clean

 * @offs: offset from which to clean

 * @len: length of buffer

 *

 * This function pads up to the next min_io_size boundary (if there is one) and

 * sets empty space to all 0xff. @buf, @offs and @len are updated to the next

 * @c->min_io_size boundary.

/**

 * no_more_nodes - determine if there are no more nodes in a buffer.

 * @c: UBIFS file-system description object

 * @buf: buffer to check

 * @len: length of buffer

 * @lnum: LEB number of the LEB from which @buf was read

 * @offs: offset from which @buf was read

 *

 * This function ensures that the corrupted node at @offs is the last thing

 * written to a LEB. This function returns %1 if more data is not found and

 * %0 if more data is found.

 Check for empty space after the corrupt node's common header */

	/*

	 * The area after the common header size is not empty, so the common

	 * header must be intact. Check it.

 Now we know the corrupt node's length we can skip over it */

 After which there should be empty space */

/**

 * fix_unclean_leb - fix an unclean LEB.

 * @c: UBIFS file-system description object

 * @sleb: scanned LEB information

 * @start: offset where scan started

 Get the end offset of the last node we are keeping */

 Add to recovery list */

 Write the fixed LEB back to flash */

 Pad to min_io_size */

/**

 * drop_last_group - drop the last group of nodes.

 * @sleb: scanned LEB information

 * @offs: offset of dropped nodes is returned here

 *

 * This is a helper function for 'ubifs_recover_leb()' which drops the last

 * group of nodes of the scanned LEB.

/**

 * drop_last_node - drop the last node.

 * @sleb: scanned LEB information

 * @offs: offset of dropped nodes is returned here

 *

 * This is a helper function for 'ubifs_recover_leb()' which drops the last

 * node of the scanned LEB.

/**

 * ubifs_recover_leb - scan and recover a LEB.

 * @c: UBIFS file-system description object

 * @lnum: LEB number

 * @offs: offset

 * @sbuf: LEB-sized buffer to use

 * @jhead: journal head number this LEB belongs to (%-1 if the LEB does not

 *         belong to any journal head)

 *

 * This function does a scan of a LEB, but caters for errors that might have

 * been caused by the unclean unmount from which we are attempting to recover.

 * Returns the scanned information on success and a negative error code on

 * failure.

		/*

		 * Scan quietly until there is an error from which we cannot

		 * recover

 A valid node, and not a padding node */

 Padding bytes or a valid padding node */

			/*

			 * See header comment for this file for more

			 * explanations about the reasons we have this check.

 Make sure we dump interesting non-0xFF data */

		/*

		 * If nodes are grouped, always drop the incomplete group at

		 * the end.

		/*

		 * If this LEB belongs to the GC head then while we are in the

		 * middle of the same min. I/O unit keep dropping nodes. So

		 * basically, what we want is to make sure that the last min.

		 * I/O unit where we saw the corruption is dropped completely

		 * with all the uncorrupted nodes which may possibly sit there.

		 *

		 * In other words, let's name the min. I/O unit where the

		 * corruption starts B, and the previous min. I/O unit A. The

		 * below code tries to deal with a situation when half of B

		 * contains valid nodes or the end of a valid node, and the

		 * second half of B contains corrupted data or garbage. This

		 * means that UBIFS had been writing to B just before the power

		 * cut happened. I do not know how realistic is this scenario

		 * that half of the min. I/O unit had been written successfully

		 * and the other half not, but this is possible in our 'failure

		 * mode emulation' infrastructure at least.

		 *

		 * So what is the problem, why we need to drop those nodes? Why

		 * can't we just clean-up the second half of B by putting a

		 * padding node there? We can, and this works fine with one

		 * exception which was reproduced with power cut emulation

		 * testing and happens extremely rarely.

		 *

		 * Imagine the file-system is full, we run GC which starts

		 * moving valid nodes from LEB X to LEB Y (obviously, LEB Y is

		 * the current GC head LEB). The @c->gc_lnum is -1, which means

		 * that GC will retain LEB X and will try to continue. Imagine

		 * that LEB X is currently the dirtiest LEB, and the amount of

		 * used space in LEB Y is exactly the same as amount of free

		 * space in LEB X.

		 *

		 * And a power cut happens when nodes are moved from LEB X to

		 * LEB Y. We are here trying to recover LEB Y which is the GC

		 * head LEB. We find the min. I/O unit B as described above.

		 * Then we clean-up LEB Y by padding min. I/O unit. And later

		 * 'ubifs_rcvry_gc_commit()' function fails, because it cannot

		 * find a dirty LEB which could be GC'd into LEB Y! Even LEB X

		 * does not match because the amount of valid nodes there does

		 * not fit the free space in LEB Y any more! And this is

		 * because of the padding node which we added to LEB Y. The

		 * user-visible effect of this which I once observed and

		 * analysed is that we cannot mount the file-system with

		 * -ENOSPC error.

		 *

		 * So obviously, to make sure that situation does not happen we

		 * should free min. I/O unit B in LEB Y completely and the last

		 * used min. I/O unit in LEB Y should be A. This is basically

		 * what the below code tries to do.

 Re-scan the corrupted data with verbose messages */

/**

 * get_cs_sqnum - get commit start sequence number.

 * @c: UBIFS file-system description object

 * @lnum: LEB number of commit start node

 * @offs: offset of commit start node

 * @cs_sqnum: commit start sequence number is returned here

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * ubifs_recover_log_leb - scan and recover a log LEB.

 * @c: UBIFS file-system description object

 * @lnum: LEB number

 * @offs: offset

 * @sbuf: LEB-sized buffer to use

 *

 * This function does a scan of a LEB, but caters for errors that might have

 * been caused by unclean reboots from which we are attempting to recover

 * (assume that only the last log LEB can be corrupted by an unclean reboot).

 *

 * This function returns %0 on success and a negative error code on failure.

		/*

		 * We can only recover at the end of the log, so check that the

		 * next log LEB is empty or out of date.

/**

 * recover_head - recover a head.

 * @c: UBIFS file-system description object

 * @lnum: LEB number of head to recover

 * @offs: offset of head to recover

 * @sbuf: LEB-sized buffer to use

 *

 * This function ensures that there is no data on the flash at a head location.

 *

 * This function returns %0 on success and a negative error code on failure.

 Read at the head location and check it is empty flash */

/**

 * ubifs_recover_inl_heads - recover index and LPT heads.

 * @c: UBIFS file-system description object

 * @sbuf: LEB-sized buffer to use

 *

 * This function ensures that there is no data on the flash at the index and

 * LPT head locations.

 *

 * This deals with the recovery of a half-completed journal commit. UBIFS is

 * careful never to overwrite the last version of the index or the LPT. Because

 * the index and LPT are wandering trees, data from a half-completed commit will

 * not be referenced anywhere in UBIFS. The data will be either in LEBs that are

 * assumed to be empty and will be unmapped anyway before use, or in the index

 * and LPT heads.

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * clean_an_unclean_leb - read and write a LEB to remove corruption.

 * @c: UBIFS file-system description object

 * @ucleb: unclean LEB information

 * @sbuf: LEB-sized buffer to use

 *

 * This function reads a LEB up to a point pre-determined by the mount recovery,

 * checks the nodes, and writes the result back to the flash, thereby cleaning

 * off any following corruption, or non-fatal ECC errors.

 *

 * This function returns %0 on success and a negative error code on failure.

 Nothing to read, just unmap it */

 Scan quietly until there is an error */

 A valid node, and not a padding node */

 Padding bytes or a valid padding node */

 Redo the last scan but noisily */

 Pad to min_io_size */

 Write back the LEB atomically */

/**

 * ubifs_clean_lebs - clean LEBs recovered during read-only mount.

 * @c: UBIFS file-system description object

 * @sbuf: LEB-sized buffer to use

 *

 * This function cleans a LEB identified during recovery that needs to be

 * written but was not because UBIFS was mounted read-only. This happens when

 * remounting to read-write mode.

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * grab_empty_leb - grab an empty LEB to use as GC LEB and run commit.

 * @c: UBIFS file-system description object

 *

 * This is a helper function for 'ubifs_rcvry_gc_commit()' which grabs an empty

 * LEB to be used as GC LEB (@c->gc_lnum), and then runs the commit. Returns

 * zero in case of success and a negative error code in case of failure.

	/*

	 * Note, it is very important to first search for an empty LEB and then

	 * run the commit, not vice-versa. The reason is that there might be

	 * only one empty LEB at the moment, the one which has been the

	 * @c->gc_lnum just before the power cut happened. During the regular

	 * UBIFS operation (not now) @c->gc_lnum is marked as "taken", so no

	 * one but GC can grab it. But at this moment this single empty LEB is

	 * not marked as taken, so if we run commit - what happens? Right, the

	 * commit will grab it and write the index there. Remember that the

	 * index always expands as long as there is free space, and it only

	 * starts consolidating when we run out of space.

	 *

	 * IOW, if we run commit now, we might not be able to find a free LEB

	 * after this.

 Reset the index flag */

/**

 * ubifs_rcvry_gc_commit - recover the GC LEB number and run the commit.

 * @c: UBIFS file-system description object

 *

 * Out-of-place garbage collection requires always one empty LEB with which to

 * start garbage collection. The LEB number is recorded in c->gc_lnum and is

 * written to the master node on unmounting. In the case of an unclean unmount

 * the value of gc_lnum recorded in the master node is out of date and cannot

 * be used. Instead, recovery must allocate an empty LEB for this purpose.

 * However, there may not be enough empty space, in which case it must be

 * possible to GC the dirtiest LEB into the GC head LEB.

 *

 * This function also runs the commit which causes the TNC updates from

 * size-recovery and orphans to be written to the flash. That is important to

 * ensure correct replay order for subsequent mounts.

 *

 * This function returns %0 on success and a negative error code on failure.

	/*

	 * We run the commit before garbage collection otherwise subsequent

	 * mounts will see the GC and orphan deletion in a different order.

/**

 * struct size_entry - inode size information for recovery.

 * @rb: link in the RB-tree of sizes

 * @inum: inode number

 * @i_size: size on inode

 * @d_size: maximum size based on data nodes

 * @exists: indicates whether the inode exists

 * @inode: inode if pinned in memory awaiting rw mode to fix it

/**

 * add_ino - add an entry to the size tree.

 * @c: UBIFS file-system description object

 * @inum: inode number

 * @i_size: size on inode

 * @d_size: maximum size based on data nodes

 * @exists: indicates whether the inode exists

/**

 * find_ino - find an entry on the size tree.

 * @c: UBIFS file-system description object

 * @inum: inode number

/**

 * remove_ino - remove an entry from the size tree.

 * @c: UBIFS file-system description object

 * @inum: inode number

/**

 * ubifs_destroy_size_tree - free resources related to the size tree.

 * @c: UBIFS file-system description object

/**

 * ubifs_recover_size_accum - accumulate inode sizes for recovery.

 * @c: UBIFS file-system description object

 * @key: node key

 * @deletion: node is for a deletion

 * @new_size: inode size

 *

 * This function has two purposes:

 *     1) to ensure there are no data nodes that fall outside the inode size

 *     2) to ensure there are no data nodes for inodes that do not exist

 * To accomplish those purposes, a rb-tree is constructed containing an entry

 * for each inode number in the journal that has not been deleted, and recording

 * the size from the inode node, the maximum size of any data node (also altered

 * by truncations) and a flag indicating a inode number for which no inode node

 * was present in the journal.

 *

 * Note that there is still the possibility that there are data nodes that have

 * been committed that are beyond the inode size, however the only way to find

 * them would be to scan the entire index. Alternatively, some provision could

 * be made to record the size of inodes at the start of commit, which would seem

 * very cumbersome for a scenario that is quite unlikely and the only negative

 * consequence of which is wasted space.

 *

 * This functions returns %0 on success and a negative error code on failure.

/**

 * fix_size_in_place - fix inode size in place on flash.

 * @c: UBIFS file-system description object

 * @e: inode size information for recovery

 Locate the inode node LEB number and offset */

	/*

	 * If the size recorded on the inode node is greater than the size that

	 * was calculated from nodes in the journal then don't change the inode.

 Read the LEB */

 Change the size field and recalculate the CRC */

 Work out where data in the LEB ends and free space begins */

 Atomically write the fixed LEB back again */

/**

 * inode_fix_size - fix inode size

 * @c: UBIFS file-system description object

 * @e: inode size information for recovery

 Remounting rw, pick up inode we stored earlier */

			/*

			 * The original inode in the index already has a size

			 * big enough, nothing to do

	/*

	 * In readonly mode just keep the inode pinned in memory until we go

	 * readwrite. In readwrite mode write the inode to the journal with the

	 * fixed size.

/**

 * ubifs_recover_size - recover inode size.

 * @c: UBIFS file-system description object

 * @in_place: If true, do a in-place size fixup

 *

 * This function attempts to fix inode size discrepancies identified by the

 * 'ubifs_recover_size_accum()' function.

 *

 * This functions returns %0 on success and a negative error code on failure.

 Remove data nodes that have no inode */

			/*

			 * We found data that is outside the found inode size,

			 * fixup the inode size

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Adrian Hunter

 *          Artem Bityutskiy (Битюцкий Артём)

/*

 * This file implements commit-related functionality of the LEB properties

 * subsystem.

/**

 * first_dirty_cnode - find first dirty cnode.

 * @c: UBIFS file-system description object

 * @nnode: nnode at which to start

 *

 * This function returns the first dirty cnode or %NULL if there is not one.

/**

 * next_dirty_cnode - find next dirty cnode.

 * @c: UBIFS file-system description object

 * @cnode: cnode from which to begin searching

 *

 * This function returns the next dirty cnode or %NULL if there is not one.

 cnode is a pnode */

 cnode is a nnode */

/**

 * get_cnodes_to_commit - create list of dirty cnodes to commit.

 * @c: UBIFS file-system description object

 *

 * This function returns the number of cnodes to commit.

/**

 * upd_ltab - update LPT LEB properties.

 * @c: UBIFS file-system description object

 * @lnum: LEB number

 * @free: amount of free space

 * @dirty: amount of dirty space to add

/**

 * alloc_lpt_leb - allocate an LPT LEB that is empty.

 * @c: UBIFS file-system description object

 * @lnum: LEB number is passed and returned here

 *

 * This function finds the next empty LEB in the ltab starting from @lnum. If a

 * an empty LEB is found it is returned in @lnum and the function returns %0.

 * Otherwise the function returns -ENOSPC.  Note however, that LPT is designed

 * never to run out of space.

/**

 * layout_cnodes - layout cnodes for commit.

 * @c: UBIFS file-system description object

 *

 * This function returns %0 on success and a negative error code on failure.

 Try to place lsave and ltab nicely */

 Try to place lsave and ltab nicely */

 Make sure to place LPT's save table */

 Make sure to place LPT's own lprops table */

/**

 * realloc_lpt_leb - allocate an LPT LEB that is empty.

 * @c: UBIFS file-system description object

 * @lnum: LEB number is passed and returned here

 *

 * This function duplicates exactly the results of the function alloc_lpt_leb.

 * It is used during end commit to reallocate the same LEB numbers that were

 * allocated by alloc_lpt_leb during start commit.

 *

 * This function finds the next LEB that was allocated by the alloc_lpt_leb

 * function starting from @lnum. If a LEB is found it is returned in @lnum and

 * the function returns %0. Otherwise the function returns -ENOSPC.

 * Note however, that LPT is designed never to run out of space.

/**

 * write_cnodes - write cnodes for commit.

 * @c: UBIFS file-system description object

 *

 * This function returns %0 on success and a negative error code on failure.

 Ensure empty LEB is unmapped */

 Try to place lsave and ltab nicely */

 Loop for each cnode */

 Try to place lsave and ltab nicely */

		/*

		 * The reason for the barriers is the same as in case of TNC.

		 * See comment in 'write_index()'. 'dirty_cow_nnode()' and

		 * 'dirty_cow_pnode()' are the functions for which this is

		 * important.

 Make sure to place LPT's save table */

 Make sure to place LPT's own lprops table */

 Write remaining data in buffer */

/**

 * next_pnode_to_dirty - find next pnode to dirty.

 * @c: UBIFS file-system description object

 * @pnode: pnode

 *

 * This function returns the next pnode to dirty or %NULL if there are no more

 * pnodes.  Note that pnodes that have never been written (lnum == 0) are

 * skipped.

 Try to go right */

 Go up while can't go right */

 Go right */

 Go down to level 1 */

			/*

			 * Should not happen, but we need to keep going

			 * if it does.

 Should not happen, but we need to keep going if it does */

/**

 * add_pnode_dirt - add dirty space to LPT LEB properties.

 * @c: UBIFS file-system description object

 * @pnode: pnode for which to add dirt

/**

 * do_make_pnode_dirty - mark a pnode dirty.

 * @c: UBIFS file-system description object

 * @pnode: pnode to mark dirty

 Assumes cnext list is empty i.e. not called during commit */

 Mark parent and ancestors dirty too */

/**

 * make_tree_dirty - mark the entire LEB properties tree dirty.

 * @c: UBIFS file-system description object

 *

 * This function is used by the "small" LPT model to cause the entire LEB

 * properties tree to be written.  The "small" LPT model does not use LPT

 * garbage collection because it is more efficient to write the entire tree

 * (because it is small).

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * need_write_all - determine if the LPT area is running out of free space.

 * @c: UBIFS file-system description object

 *

 * This function returns %1 if the LPT area is running out of free space and %0

 * if it is not.

 Less than twice the size left */

/**

 * lpt_tgc_start - start trivial garbage collection of LPT LEBs.

 * @c: UBIFS file-system description object

 *

 * LPT trivial garbage collection is where a LPT LEB contains only dirty and

 * free space and so may be reused as soon as the next commit is completed.

 * This function is called during start commit to mark LPT LEBs for trivial GC.

/**

 * lpt_tgc_end - end trivial garbage collection of LPT LEBs.

 * @c: UBIFS file-system description object

 *

 * LPT trivial garbage collection is where a LPT LEB contains only dirty and

 * free space and so may be reused as soon as the next commit is completed.

 * This function is called after the commit is completed (master node has been

 * written) and un-maps LPT LEBs that were marked for trivial GC.

/**

 * populate_lsave - fill the lsave array with important LEB numbers.

 * @c: the UBIFS file-system description object

 *

 * This function is only called for the "big" model. It records a small number

 * of LEB numbers of important LEBs.  Important LEBs are ones that are (from

 * most important to least important): empty, freeable, freeable index, dirty

 * index, dirty or free. Upon mount, we read this list of LEB numbers and bring

 * their pnodes into memory.  That will stop us from having to scan the LPT

 * straight away. For the "small" model we assume that scanning the LPT is no

 * big deal.

 Fill it up completely */

/**

 * nnode_lookup - lookup a nnode in the LPT.

 * @c: UBIFS file-system description object

 * @i: nnode number

 *

 * This function returns a pointer to the nnode on success or a negative

 * error code on failure.

/**

 * make_nnode_dirty - find a nnode and, if found, make it dirty.

 * @c: UBIFS file-system description object

 * @node_num: nnode number of nnode to make dirty

 * @lnum: LEB number where nnode was written

 * @offs: offset where nnode was written

 *

 * This function is used by LPT garbage collection.  LPT garbage collection is

 * used only for the "big" LPT model (c->big_lpt == 1).  Garbage collection

 * simply involves marking all the nodes in the LEB being garbage-collected as

 * dirty.  The dirty nodes are written next commit, after which the LEB is free

 * to be reused.

 *

 * This function returns %0 on success and a negative error code on failure.

 nnode is obsolete */

 nnode is obsolete */

 Assumes cnext list is empty i.e. not called during commit */

 Mark parent and ancestors dirty too */

/**

 * make_pnode_dirty - find a pnode and, if found, make it dirty.

 * @c: UBIFS file-system description object

 * @node_num: pnode number of pnode to make dirty

 * @lnum: LEB number where pnode was written

 * @offs: offset where pnode was written

 *

 * This function is used by LPT garbage collection.  LPT garbage collection is

 * used only for the "big" LPT model (c->big_lpt == 1).  Garbage collection

 * simply involves marking all the nodes in the LEB being garbage-collected as

 * dirty.  The dirty nodes are written next commit, after which the LEB is free

 * to be reused.

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * make_ltab_dirty - make ltab node dirty.

 * @c: UBIFS file-system description object

 * @lnum: LEB number where ltab was written

 * @offs: offset where ltab was written

 *

 * This function is used by LPT garbage collection.  LPT garbage collection is

 * used only for the "big" LPT model (c->big_lpt == 1).  Garbage collection

 * simply involves marking all the nodes in the LEB being garbage-collected as

 * dirty.  The dirty nodes are written next commit, after which the LEB is free

 * to be reused.

 *

 * This function returns %0 on success and a negative error code on failure.

 This ltab node is obsolete */

/**

 * make_lsave_dirty - make lsave node dirty.

 * @c: UBIFS file-system description object

 * @lnum: LEB number where lsave was written

 * @offs: offset where lsave was written

 *

 * This function is used by LPT garbage collection.  LPT garbage collection is

 * used only for the "big" LPT model (c->big_lpt == 1).  Garbage collection

 * simply involves marking all the nodes in the LEB being garbage-collected as

 * dirty.  The dirty nodes are written next commit, after which the LEB is free

 * to be reused.

 *

 * This function returns %0 on success and a negative error code on failure.

 This lsave node is obsolete */

/**

 * make_node_dirty - make node dirty.

 * @c: UBIFS file-system description object

 * @node_type: LPT node type

 * @node_num: node number

 * @lnum: LEB number where node was written

 * @offs: offset where node was written

 *

 * This function is used by LPT garbage collection.  LPT garbage collection is

 * used only for the "big" LPT model (c->big_lpt == 1).  Garbage collection

 * simply involves marking all the nodes in the LEB being garbage-collected as

 * dirty.  The dirty nodes are written next commit, after which the LEB is free

 * to be reused.

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * get_lpt_node_len - return the length of a node based on its type.

 * @c: UBIFS file-system description object

 * @node_type: LPT node type

/**

 * get_pad_len - return the length of padding in a buffer.

 * @c: UBIFS file-system description object

 * @buf: buffer

 * @len: length of buffer

/**

 * get_lpt_node_type - return type (and node number) of a node in a buffer.

 * @c: UBIFS file-system description object

 * @buf: buffer

 * @node_num: node number is returned here

/**

 * is_a_node - determine if a buffer contains a node.

 * @c: UBIFS file-system description object

 * @buf: buffer

 * @len: length of buffer

 *

 * This function returns %1 if the buffer contains a node or %0 if it does not.

/**

 * lpt_gc_lnum - garbage collect a LPT LEB.

 * @c: UBIFS file-system description object

 * @lnum: LEB number to garbage collect

 *

 * LPT garbage collection is used only for the "big" LPT model

 * (c->big_lpt == 1).  Garbage collection simply involves marking all the nodes

 * in the LEB being garbage-collected as dirty.  The dirty nodes are written

 * next commit, after which the LEB is free to be reused.

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * lpt_gc - LPT garbage collection.

 * @c: UBIFS file-system description object

 *

 * Select a LPT LEB for LPT garbage collection and call 'lpt_gc_lnum()'.

 * Returns %0 on success and a negative error code on failure.

/**

 * ubifs_lpt_start_commit - UBIFS commit starts.

 * @c: the UBIFS file-system description object

 *

 * This function has to be called when UBIFS starts the commit operation.

 * This function "freezes" all currently dirty LEB properties and does not

 * change them anymore. Further changes are saved and tracked separately

 * because they are not part of this commit. This function returns zero in case

 * of success and a negative error code in case of failure.

		/*

		 * We ensure there is enough free space in

		 * ubifs_lpt_post_commit() by marking nodes dirty. That

		 * information is lost when we unmount, so we also need

		 * to check free space once after mounting also.

 If needed, write everything */

 Copy the LPT's own lprops for end commit to write */

/**

 * free_obsolete_cnodes - free obsolete cnodes for commit end.

 * @c: UBIFS file-system description object

/**

 * ubifs_lpt_end_commit - finish the commit operation.

 * @c: the UBIFS file-system description object

 *

 * This function has to be called when the commit operation finishes. It

 * flushes the changes which were "frozen" by 'ubifs_lprops_start_commit()' to

 * the media. Returns zero in case of success and a negative error code in case

 * of failure.

/**

 * ubifs_lpt_post_commit - post commit LPT trivial GC and LPT GC.

 * @c: UBIFS file-system description object

 *

 * LPT trivial GC is completed after a commit. Also LPT GC is done after a

 * commit for the "big" LPT model.

/**

 * first_nnode - find the first nnode in memory.

 * @c: UBIFS file-system description object

 * @hght: height of tree where nnode found is returned here

 *

 * This function returns a pointer to the nnode found or %NULL if no nnode is

 * found. This function is a helper to 'ubifs_lpt_free()'.

/**

 * next_nnode - find the next nnode in memory.

 * @c: UBIFS file-system description object

 * @nnode: nnode from which to start.

 * @hght: height of tree where nnode is, is passed and returned here

 *

 * This function returns a pointer to the nnode found or %NULL if no nnode is

 * found. This function is a helper to 'ubifs_lpt_free()'.

/**

 * ubifs_lpt_free - free resources owned by the LPT.

 * @c: UBIFS file-system description object

 * @wr_only: free only resources used for writing

 Free write-only things first */

 Leftover from a failed commit */

 Now free the rest */

/*

 * Everything below is related to debugging.

/**

 * dbg_is_all_ff - determine if a buffer contains only 0xFF bytes.

 * @buf: buffer

 * @len: buffer length

/**

 * dbg_is_nnode_dirty - determine if a nnode is dirty.

 * @c: the UBIFS file-system description object

 * @lnum: LEB number where nnode was written

 * @offs: offset where nnode was written

 Entire tree is in memory so first_nnode / next_nnode are OK */

/**

 * dbg_is_pnode_dirty - determine if a pnode is dirty.

 * @c: the UBIFS file-system description object

 * @lnum: LEB number where pnode was written

 * @offs: offset where pnode was written

/**

 * dbg_is_ltab_dirty - determine if a ltab node is dirty.

 * @c: the UBIFS file-system description object

 * @lnum: LEB number where ltab node was written

 * @offs: offset where ltab node was written

/**

 * dbg_is_lsave_dirty - determine if a lsave node is dirty.

 * @c: the UBIFS file-system description object

 * @lnum: LEB number where lsave node was written

 * @offs: offset where lsave node was written

/**

 * dbg_is_node_dirty - determine if a node is dirty.

 * @c: the UBIFS file-system description object

 * @node_type: node type

 * @lnum: LEB number where node was written

 * @offs: offset where node was written

/**

 * dbg_check_ltab_lnum - check the ltab for a LPT LEB number.

 * @c: the UBIFS file-system description object

 * @lnum: LEB number where node was written

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * dbg_check_ltab - check the free and dirty space in the ltab.

 * @c: the UBIFS file-system description object

 *

 * This function returns %0 on success and a negative error code on failure.

 Bring the entire tree into memory */

 Check nodes */

 Check each LEB */

/**

 * dbg_chk_lpt_free_spc - check LPT free space is enough to write entire LPT.

 * @c: the UBIFS file-system description object

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * dbg_chk_lpt_sz - check LPT does not write more than LPT size.

 * @c: the UBIFS file-system description object

 * @action: what to do

 * @len: length written

 *

 * This function returns %0 on success and a negative error code on failure.

 * The @action argument may be one of:

 *   o %0 - LPT debugging checking starts, initialize debugging variables;

 *   o %1 - wrote an LPT node, increase LPT size by @len bytes;

 *   o %2 - switched to a different LEB and wasted @len bytes;

 *   o %3 - check that we've written the right number of bytes.

 *   o %4 - wasted @len bytes;

/**

 * dump_lpt_leb - dump an LPT LEB.

 * @c: UBIFS file-system description object

 * @lnum: LEB number to dump

 *

 * This function dumps an LEB from LPT area. Nodes in this area are very

 * different to nodes in the main area (e.g., they do not have common headers,

 * they do not have 8-byte alignments, etc), so we have a separate function to

 * dump LPT area LEBs. Note, LPT has to be locked by the caller.

/**

 * ubifs_dump_lpt_lebs - dump LPT lebs.

 * @c: UBIFS file-system description object

 *

 * This function dumps all LPT LEBs. The caller has to make sure the LPT is

 * locked.

/**

 * dbg_populate_lsave - debugging version of 'populate_lsave()'

 * @c: UBIFS file-system description object

 *

 * This is a debugging version for 'populate_lsave()' which populates lsave

 * with random LEBs instead of useful LEBs, which is good for test coverage.

 * Returns zero if lsave has not been populated (this debugging feature is

 * disabled) an non-zero if lsave has been populated.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation

 *

 * Authors: Artem Bityutskiy (Битюцкий Артём)

 *          Adrian Hunter

/*

 * This file implements most of the debugging stuff which is compiled in only

 * when it is enabled. But some debugging check functions are implemented in

 * corresponding subsystem, just because they are closely related and utilize

 * various local functions of those subsystems.

 If the magic is incorrect, just hexdump the first bytes */

 Skip dumping unknown type node */

		/*

		 * If we are dumping saved budgeting data, do not print

		 * additional information which is about the current state, not

		 * the old one which corresponded to the saved budgeting data.

 If we are in R/O mode, journal heads do not exist */

 Print budgeting predictions */

				/*

				 * Note, if we are in R/O mode or in the middle

				 * of mounting/re-mounting, the write-buffers do

				 * not exist.

/**

 * ubifs_dump_index - dump the on-flash index.

 * @c: UBIFS file-system description object

 *

 * This function dumps whole UBIFS indexing B-tree, unlike 'ubifs_dump_tnc()'

 * which dumps only in-memory znodes and does not read znodes which from flash.

/**

 * dbg_save_space_info - save information about flash space.

 * @c: UBIFS file-system description object

 *

 * This function saves information about UBIFS free space, dirty space, etc, in

 * order to check it later.

	/*

	 * We use a dirty hack here and zero out @c->freeable_cnt, because it

	 * affects the free space calculations, and UBIFS might not know about

	 * all freeable eraseblocks. Indeed, we know about freeable eraseblocks

	 * only when we read their lprops, and we do this only lazily, upon the

	 * need. So at any given point of time @c->freeable_cnt might be not

	 * exactly accurate.

	 *

	 * Just one example about the issue we hit when we did not zero

	 * @c->freeable_cnt.

	 * 1. The file-system is mounted R/O, c->freeable_cnt is %0. We save the

	 *    amount of free space in @d->saved_free

	 * 2. We re-mount R/W, which makes UBIFS to read the "lsave"

	 *    information from flash, where we cache LEBs from various

	 *    categories ('ubifs_remount_fs()' -> 'ubifs_lpt_init()'

	 *    -> 'lpt_init_wr()' -> 'read_lsave()' -> 'ubifs_lpt_lookup()'

	 *    -> 'ubifs_get_pnode()' -> 'update_cats()'

	 *    -> 'ubifs_add_to_cat()').

	 * 3. Lsave contains a freeable eraseblock, and @c->freeable_cnt

	 *    becomes %1.

	 * 4. We calculate the amount of free space when the re-mount is

	 *    finished in 'dbg_check_space_info()' and it does not match

	 *    @d->saved_free.

/**

 * dbg_check_space_info - check flash space information.

 * @c: UBIFS file-system description object

 *

 * This function compares current flash space information with the information

 * which was saved when the 'dbg_save_space_info()' function was called.

 * Returns zero if the information has not changed, and %-EINVAL if it has

 * changed.

/**

 * dbg_check_synced_i_size - check synchronized inode size.

 * @c: UBIFS file-system description object

 * @inode: inode to check

 *

 * If inode is clean, synchronized inode size has to be equivalent to current

 * inode size. This function has to be called only for locked inodes (@i_mutex

 * has to be locked). Returns %0 if synchronized inode size if correct, and

 * %-EINVAL if not.

/*

 * dbg_check_dir - check directory inode size and link count.

 * @c: UBIFS file-system description object

 * @dir: the directory to calculate size for

 * @size: the result is returned here

 *

 * This function makes sure that directory size and link count are correct.

 * Returns zero in case of success and a negative error code in case of

 * failure.

 *

 * Note, it is good idea to make sure the @dir->i_mutex is locked before

 * calling this function.

/**

 * dbg_check_key_order - make sure that colliding keys are properly ordered.

 * @c: UBIFS file-system description object

 * @zbr1: first zbranch

 * @zbr2: following zbranch

 *

 * In UBIFS indexing B-tree colliding keys has to be sorted in binary order of

 * names of the direntries/xentries which are referred by the keys. This

 * function reads direntries/xentries referred by @zbr1 and @zbr2 and makes

 * sure the name of direntry/xentry referred by @zbr1 is less than

 * direntry/xentry referred by @zbr2. Returns zero if this is true, %1 if not,

 * and a negative error code in case of failure.

 Make sure node keys are the same as in zbranch */

/**

 * dbg_check_znode - check if znode is all right.

 * @c: UBIFS file-system description object

 * @zbr: zbranch which points to this znode

 *

 * This function makes sure that znode referred to by @zbr is all right.

 * Returns zero if it is, and %-EINVAL if it is not.

 Only dirty zbranch may have no on-flash nodes */

		/*

		 * If znode is dirty, its parent has to be dirty as well. The

		 * order of the operation is important, so we have to have

		 * memory barriers.

			/*

			 * The dirty flag is atomic and is cleared outside the

			 * TNC mutex, so znode's dirty flag may now have

			 * been cleared. The child is always cleared before the

			 * parent, so we just need to check again.

 Make sure the 'parent' pointer in our znode is correct */

 This zbranch does not exist in the parent */

 This may happen only in case of collisions */

		/*

		 * Make sure that the first key in our znode is greater than or

		 * equal to the key in the pointing zbranch.

			/*

			 * Make sure the last key in our znode is less or

			 * equivalent than the key in the zbranch which goes

			 * after our pointing zbranch.

 This may only be root znode */

	/*

	 * Make sure that next key is greater or equivalent then the previous

	 * one.

 This can only be keys with colliding hash */

			/*

			 * Colliding keys should follow binary order of

			 * corresponding xentry/dentry names.

/**

 * dbg_check_tnc - check TNC tree.

 * @c: UBIFS file-system description object

 * @extra: do extra checks that are possible at start commit

 *

 * This function traverses whole TNC tree and checks every znode. Returns zero

 * if everything is all right and %-EINVAL if something is wrong with TNC.

		/*

		 * If the last key of this znode is equivalent to the first key

		 * of the next znode (collision), then check order of the keys.

/**

 * dbg_walk_index - walk the on-flash index.

 * @c: UBIFS file-system description object

 * @leaf_cb: called for each leaf node

 * @znode_cb: called for each indexing node

 * @priv: private data which is passed to callbacks

 *

 * This function walks the UBIFS index and calls the @leaf_cb for each leaf

 * node and @znode_cb for each indexing node. Returns zero in case of success

 * and a negative error code in case of failure.

 *

 * It would be better if this function removed every znode it pulled to into

 * the TNC, so that the behavior more closely matched the non-debugging

 * behavior.

 If the root indexing node is not in TNC - pull it */

	/*

	 * We are going to traverse the indexing tree in the postorder manner.

	 * Go down and find the leftmost indexing node where we are going to

	 * start from.

 Iterate over all indexing nodes */

 Switch to the next index in the parent */

			/*

			 * This is the last child, switch to the parent and

			 * continue.

 Go to the lowest leftmost znode in the new sub-tree */

/**

 * add_size - add znode size to partially calculated index size.

 * @c: UBIFS file-system description object

 * @znode: znode to add size for

 * @priv: partially calculated index size

 *

 * This is a helper function for 'dbg_check_idx_size()' which is called for

 * every indexing node and adds its size to the 'long long' variable pointed to

 * by @priv.

/**

 * dbg_check_idx_size - check index size.

 * @c: UBIFS file-system description object

 * @idx_size: size to check

 *

 * This function walks the UBIFS index, calculates its size and checks that the

 * size is equivalent to @idx_size. Returns zero in case of success and a

 * negative error code in case of failure.

/**

 * struct fsck_inode - information about an inode used when checking the file-system.

 * @rb: link in the RB-tree of inodes

 * @inum: inode number

 * @mode: inode type, permissions, etc

 * @nlink: inode link count

 * @xattr_cnt: count of extended attributes

 * @references: how many directory/xattr entries refer this inode (calculated

 *              while walking the index)

 * @calc_cnt: for directory inode count of child directories

 * @size: inode size (read from on-flash inode)

 * @xattr_sz: summary size of all extended attributes (read from on-flash

 *            inode)

 * @calc_sz: for directories calculated directory size

 * @calc_xcnt: count of extended attributes

 * @calc_xsz: calculated summary size of all extended attributes

 * @xattr_nms: sum of lengths of all extended attribute names belonging to this

 *             inode (read from on-flash inode)

 * @calc_xnms: calculated sum of lengths of all extended attribute names

/**

 * struct fsck_data - private FS checking information.

 * @inodes: RB-tree of all inodes (contains @struct fsck_inode objects)

/**

 * add_inode - add inode information to RB-tree of inodes.

 * @c: UBIFS file-system description object

 * @fsckd: FS checking information

 * @ino: raw UBIFS inode to add

 *

 * This is a helper function for 'check_leaf()' which adds information about

 * inode @ino to the RB-tree of inodes. Returns inode information pointer in

 * case of success and a negative error code in case of failure.

	/*

	 * If the inode is present in the VFS inode cache, use it instead of

	 * the on-flash inode which might be out-of-date. E.g., the size might

	 * be out-of-date. If we do not do this, the following may happen, for

	 * example:

	 *   1. A power cut happens

	 *   2. We mount the file-system R/O, the replay process fixes up the

	 *      inode size in the VFS cache, but on on-flash.

	 *   3. 'check_leaf()' fails because it hits a data node beyond inode

	 *      size.

/**

 * search_inode - search inode in the RB-tree of inodes.

 * @fsckd: FS checking information

 * @inum: inode number to search

 *

 * This is a helper function for 'check_leaf()' which searches inode @inum in

 * the RB-tree of inodes and returns an inode information pointer or %NULL if

 * the inode was not found.

/**

 * read_add_inode - read inode node and add it to RB-tree of inodes.

 * @c: UBIFS file-system description object

 * @fsckd: FS checking information

 * @inum: inode number to read

 *

 * This is a helper function for 'check_leaf()' which finds inode node @inum in

 * the index, reads it, and adds it to the RB-tree of inodes. Returns inode

 * information pointer in case of success and a negative error code in case of

 * failure.

/**

 * check_leaf - check leaf node.

 * @c: UBIFS file-system description object

 * @zbr: zbranch of the leaf node to check

 * @priv: FS checking information

 *

 * This is a helper function for 'dbg_check_filesystem()' which is called for

 * every single leaf node while walking the indexing tree. It checks that the

 * leaf node referred from the indexing tree exists, has correct CRC, and does

 * some other basic validation. This function is also responsible for building

 * an RB-tree of inodes - it adds all inodes into the RB-tree. It also

 * calculates reference count, size, etc for each inode in order to later

 * compare them to the information stored inside the inodes and detect possible

 * inconsistencies. Returns zero in case of success and a negative error code

 * in case of failure.

 If this is an inode node, add it to RB-tree of inodes */

		/*

		 * Search the inode node this data node belongs to and insert

		 * it to the RB-tree of inodes.

 Make sure the data node is within inode size */

		/*

		 * Search the inode node this entry refers to and the parent

		 * inode node and insert them to the RB-tree of inodes.

 Count how many direntries or xentries refers this inode */

/**

 * free_inodes - free RB-tree of inodes.

 * @fsckd: FS checking information

/**

 * check_inodes - checks all inodes.

 * @c: UBIFS file-system description object

 * @fsckd: FS checking information

 *

 * This is a helper function for 'dbg_check_filesystem()' which walks the

 * RB-tree of inodes after the index scan has been finished, and checks that

 * inode nlink, size, etc are correct. Returns zero if inodes are fine,

 * %-EINVAL if not, and a negative error code in case of failure.

			/*

			 * Directories have to have exactly one reference (they

			 * cannot have hardlinks), although root inode is an

			 * exception.

 Read the bad inode and dump it */

/**

 * dbg_check_filesystem - check the file-system.

 * @c: UBIFS file-system description object

 *

 * This function checks the file system, namely:

 * o makes sure that all leaf nodes exist and their CRCs are correct;

 * o makes sure inode nlink, size, xattr size/count are correct (for all

 *   inodes).

 *

 * The function reads whole indexing tree and all nodes, so it is pretty

 * heavy-weight. Returns zero if the file-system is consistent, %-EINVAL if

 * not, and a negative error code in case of failure.

/**

 * dbg_check_data_nodes_order - check that list of data nodes is sorted.

 * @c: UBIFS file-system description object

 * @head: the list of nodes ('struct ubifs_scan_node' objects)

 *

 * This function returns zero if the list of data nodes is sorted correctly,

 * and %-EINVAL if not.

/**

 * dbg_check_nondata_nodes_order - check that list of data nodes is sorted.

 * @c: UBIFS file-system description object

 * @head: the list of nodes ('struct ubifs_scan_node' objects)

 *

 * This function returns zero if the list of non-data nodes is sorted correctly,

 * and %-EINVAL if not.

 Inode nodes are sorted in descending size order */

		/*

		 * This is either a dentry or xentry, which should be sorted in

		 * ascending (parent ino, hash) order.

 First call - decide delay to the power cut */

 Fail within 1 minute */

 Fail within 10000 operations */

 Determine if failure delay has expired */

 Corruption span max to end of write unit */

/*

 * Root directory for UBIFS stuff in debugfs. Contains sub-directories which

 * contain the stuff specific to particular file-system mounts.

/**

 * provide_user_output - provide output to the user reading a debugfs file.

 * @val: boolean value for the answer

 * @u: the buffer to store the answer at

 * @count: size of the buffer

 * @ppos: position in the @u output buffer

 *

 * This is a simple helper function which stores @val boolean value in the user

 * buffer when the user reads one of UBIFS debugfs files. Returns amount of

 * bytes written to @u in case of success and a negative error code in case of

 * failure.

/**

 * interpret_user_input - interpret user debugfs file input.

 * @u: user-provided buffer with the input

 * @count: buffer size

 *

 * This is a helper function which interpret user input to a boolean UBIFS

 * debugfs file. Returns %0 or %1 in case of success and a negative error code

 * in case of failure.

/**

 * dbg_debugfs_init_fs - initialize debugfs for UBIFS instance.

 * @c: UBIFS file-system description object

 *

 * This function creates all debugfs files for this instance of UBIFS.

 *

 * Note, the only reason we have not merged this function with the

 * 'ubifs_debugging_init()' function is because it is better to initialize

 * debugfs interfaces at the very end of the mount process, and remove them at

 * the very beginning of the mount process.

 The array size is too small */

/**

 * dbg_debugfs_exit_fs - remove all debugfs files.

 * @c: UBIFS file-system description object

/**

 * dbg_debugfs_init - initialize debugfs file-system.

 *

 * UBIFS uses debugfs file-system to expose various debugging knobs to

 * user-space. This function creates "ubifs" directory in the debugfs

 * file-system.

/**

 * dbg_debugfs_exit - remove the "ubifs" directory from debugfs file-system.

/**

 * ubifs_debugging_init - initialize UBIFS debugging.

 * @c: UBIFS file-system description object

 *

 * This function initializes debugging-related data for the file system.

 * Returns zero in case of success and a negative error code in case of

 * failure.

/**

 * ubifs_debugging_exit - free debugging data.

 * @c: UBIFS file-system description object

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Artem Bityutskiy (Битюцкий Артём)

 *          Adrian Hunter

 This file implements reading and writing the master node */

/**

 * ubifs_compare_master_node - compare two UBIFS master nodes

 * @c: UBIFS file-system description object

 * @m1: the first node

 * @m2: the second node

 *

 * This function compares two UBIFS master nodes. Returns 0 if they are equal

 * and nonzero if not.

	/*

	 * Do not compare the common node header since the sequence number and

	 * hence the CRC are different.

	/*

	 * Do not compare the embedded HMAC as well which also must be different

	 * due to the different common node header.

/* mst_node_check_hash - Check hash of a master node

 * @c: UBIFS file-system description object

 * @mst: The master node

 * @expected: The expected hash of the master node

 *

 * This checks the hash of a master node against a given expected hash.

 * Note that we have two master nodes on a UBIFS image which have different

 * sequence numbers and consequently different CRCs. To be able to match

 * both master nodes we exclude the common node header containing the sequence

 * number and CRC from the hash.

 *

 * Returns 0 if the hashes are equal, a negative error code otherwise.

/**

 * scan_for_master - search the valid master node.

 * @c: UBIFS file-system description object

 *

 * This function scans the master node LEBs and search for the latest master

 * node. Returns zero in case of success, %-EUCLEAN if there master area is

 * corrupted and requires recovery, and a negative error code in case of

 * failure.

/**

 * validate_master - validate master node.

 * @c: UBIFS file-system description object

 *

 * This function validates data which was read from master node. Returns zero

 * if the data is all right and %-EINVAL if not.

/**

 * ubifs_read_master - read master node.

 * @c: UBIFS file-system description object

 *

 * This function finds and reads the master node during file-system mount. If

 * the flash is empty, it creates default master node as well. Returns zero in

 * case of success and a negative error code in case of failure.

			/*

			 * Note, we do not free 'c->mst_node' here because the

			 * unmount routine will take care of this.

 Make sure that the recovery flag is clear */

 The file system has been resized */

		/*

		 * Reflect changes back onto the master node. N.B. the master

		 * node gets written immediately whenever mounting (or

		 * remounting) in read-write mode, so we do not need to write it

		 * here.

/**

 * ubifs_write_master - write master node.

 * @c: UBIFS file-system description object

 *

 * This function writes the master node. Returns zero in case of success and a

 * negative error code in case of failure. The master node is written twice to

 * enable recovery.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Adrian Hunter

 *          Artem Bityutskiy (Битюцкий Артём)

/*

 * This file implements the functions that access LEB properties and their

 * categories. LEBs are categorized based on the needs of UBIFS, and the

 * categories are stored as either heaps or lists to provide a fast way of

 * finding a LEB in a particular category. For example, UBIFS may need to find

 * an empty LEB for the journal, or a very dirty LEB for garbage collection.

/**

 * get_heap_comp_val - get the LEB properties value for heap comparisons.

 * @lprops: LEB properties

 * @cat: LEB category

/**

 * move_up_lpt_heap - move a new heap entry up as far as possible.

 * @c: UBIFS file-system description object

 * @heap: LEB category heap

 * @lprops: LEB properties to move

 * @cat: LEB category

 *

 * New entries to a heap are added at the bottom and then moved up until the

 * parent's value is greater.  In the case of LPT's category heaps, the value

 * is either the amount of free space or the amount of dirty space, depending

 * on the category.

 Already top of the heap */

 Compare to parent and, if greater, move up the heap */

 Greater than parent so move up */

/**

 * adjust_lpt_heap - move a changed heap entry up or down the heap.

 * @c: UBIFS file-system description object

 * @heap: LEB category heap

 * @lprops: LEB properties to move

 * @hpos: heap position of @lprops

 * @cat: LEB category

 *

 * Changed entries in a heap are moved up or down until the parent's value is

 * greater.  In the case of LPT's category heaps, the value is either the amount

 * of free space or the amount of dirty space, depending on the category.

 Compare to parent and, if greater than parent, move up the heap */

 Greater than parent so move up */

 Still greater than parent so keep going */

 Not greater than parent, so compare to children */

 Compare to left child */

 Less than left child, so promote biggest child */

 Right child is bigger */

 Compare to right child */

 Less than right child, so promote right child */

/**

 * add_to_lpt_heap - add LEB properties to a LEB category heap.

 * @c: UBIFS file-system description object

 * @lprops: LEB properties to add

 * @cat: LEB category

 *

 * This function returns %1 if @lprops is added to the heap for LEB category

 * @cat, otherwise %0 is returned because the heap is full.

 Compare to some other LEB on the bottom of heap */

 Pick a position kind of randomly */

 Added to heap */

 Not added to heap */

 Added to heap */

/**

 * remove_from_lpt_heap - remove LEB properties from a LEB category heap.

 * @c: UBIFS file-system description object

 * @lprops: LEB properties to remove

 * @cat: LEB category

/**

 * lpt_heap_replace - replace lprops in a category heap.

 * @c: UBIFS file-system description object

 * @new_lprops: LEB properties with which to replace

 * @cat: LEB category

 *

 * During commit it is sometimes necessary to copy a pnode (see dirty_cow_pnode)

 * and the lprops that the pnode contains.  When that happens, references in

 * the category heaps to those lprops must be updated to point to the new

 * lprops.  This function does that.

/**

 * ubifs_add_to_cat - add LEB properties to a category list or heap.

 * @c: UBIFS file-system description object

 * @lprops: LEB properties to add

 * @cat: LEB category to which to add

 *

 * LEB properties are categorized to enable fast find operations.

 No more room on heap so make it un-categorized */

/**

 * ubifs_remove_from_cat - remove LEB properties from a category list or heap.

 * @c: UBIFS file-system description object

 * @lprops: LEB properties to remove

 * @cat: LEB category from which to remove

 *

 * LEB properties are categorized to enable fast find operations.

/**

 * ubifs_replace_cat - replace lprops in a category list or heap.

 * @c: UBIFS file-system description object

 * @old_lprops: LEB properties to replace

 * @new_lprops: LEB properties with which to replace

 *

 * During commit it is sometimes necessary to copy a pnode (see dirty_cow_pnode)

 * and the lprops that the pnode contains. When that happens, references in

 * category lists and heaps must be replaced. This function does that.

/**

 * ubifs_ensure_cat - ensure LEB properties are categorized.

 * @c: UBIFS file-system description object

 * @lprops: LEB properties

 *

 * A LEB may have fallen off of the bottom of a heap, and ended up as

 * un-categorized even though it has enough space for us now. If that is the

 * case this function will put the LEB back onto a heap.

/**

 * ubifs_categorize_lprops - categorize LEB properties.

 * @c: UBIFS file-system description object

 * @lprops: LEB properties to categorize

 *

 * LEB properties are categorized to enable fast find operations. This function

 * returns the LEB category to which the LEB properties belong. Note however

 * that if the LEB category is stored as a heap and the heap is full, the

 * LEB properties may have their category changed to %LPROPS_UNCAT.

/**

 * change_category - change LEB properties category.

 * @c: UBIFS file-system description object

 * @lprops: LEB properties to re-categorize

 *

 * LEB properties are categorized to enable fast find operations. When the LEB

 * properties change they must be re-categorized.

 lprops on a heap now must be moved up or down */

 Not on a heap */

/**

 * ubifs_calc_dark - calculate LEB dark space size.

 * @c: the UBIFS file-system description object

 * @spc: amount of free and dirty space in the LEB

 *

 * This function calculates and returns amount of dark space in an LEB which

 * has @spc bytes of free and dirty space.

 *

 * UBIFS is trying to account the space which might not be usable, and this

 * space is called "dark space". For example, if an LEB has only %512 free

 * bytes, it is dark space, because it cannot fit a large data node.

	/*

	 * If we have slightly more space then the dark space watermark, we can

	 * anyway safely assume it we'll be able to write a node of the

	 * smallest size there.

/**

 * is_lprops_dirty - determine if LEB properties are dirty.

 * @c: the UBIFS file-system description object

 * @lprops: LEB properties to test

/**

 * ubifs_change_lp - change LEB properties.

 * @c: the UBIFS file-system description object

 * @lp: LEB properties to change

 * @free: new free space amount

 * @dirty: new dirty space amount

 * @flags: new flags

 * @idx_gc_cnt: change to the count of @idx_gc list

 *

 * This function changes LEB properties (@free, @dirty or @flag). However, the

 * property which has the %LPROPS_NC value is not changed. Returns a pointer to

 * the updated LEB properties on success and a negative error code on failure.

 *

 * Note, the LEB properties may have had to be copied (due to COW) and

 * consequently the pointer returned may not be the same as the pointer

 * passed.

	/*

	 * This is the only function that is allowed to change lprops, so we

	 * discard the "const" qualifier.

 Increase or decrease empty LEBs counter if needed */

 Take care about indexing LEBs counter if needed */

/**

 * ubifs_get_lp_stats - get lprops statistics.

 * @c: UBIFS file-system description object

 * @lst: return statistics

/**

 * ubifs_change_one_lp - change LEB properties.

 * @c: the UBIFS file-system description object

 * @lnum: LEB to change properties for

 * @free: amount of free space

 * @dirty: amount of dirty space

 * @flags_set: flags to set

 * @flags_clean: flags to clean

 * @idx_gc_cnt: change to the count of idx_gc list

 *

 * This function changes properties of LEB @lnum. It is a helper wrapper over

 * 'ubifs_change_lp()' which hides lprops get/release. The arguments are the

 * same as in case of 'ubifs_change_lp()'. Returns zero in case of success and

 * a negative error code in case of failure.

/**

 * ubifs_update_one_lp - update LEB properties.

 * @c: the UBIFS file-system description object

 * @lnum: LEB to change properties for

 * @free: amount of free space

 * @dirty: amount of dirty space to add

 * @flags_set: flags to set

 * @flags_clean: flags to clean

 *

 * This function is the same as 'ubifs_change_one_lp()' but @dirty is added to

 * current dirty space, not substitutes it.

/**

 * ubifs_read_one_lp - read LEB properties.

 * @c: the UBIFS file-system description object

 * @lnum: LEB to read properties for

 * @lp: where to store read properties

 *

 * This helper function reads properties of a LEB @lnum and stores them in @lp.

 * Returns zero in case of success and a negative error code in case of

 * failure.

/**

 * ubifs_fast_find_free - try to find a LEB with free space quickly.

 * @c: the UBIFS file-system description object

 *

 * This function returns LEB properties for a LEB with free space or %NULL if

 * the function is unable to find a LEB quickly.

/**

 * ubifs_fast_find_empty - try to find an empty LEB quickly.

 * @c: the UBIFS file-system description object

 *

 * This function returns LEB properties for an empty LEB or %NULL if the

 * function is unable to find an empty LEB quickly.

/**

 * ubifs_fast_find_freeable - try to find a freeable LEB quickly.

 * @c: the UBIFS file-system description object

 *

 * This function returns LEB properties for a freeable LEB or %NULL if the

 * function is unable to find a freeable LEB quickly.

/**

 * ubifs_fast_find_frdi_idx - try to find a freeable index LEB quickly.

 * @c: the UBIFS file-system description object

 *

 * This function returns LEB properties for a freeable index LEB or %NULL if the

 * function is unable to find a freeable index LEB quickly.

/*

 * Everything below is related to debugging.

/**

 * dbg_check_cats - check category heaps and lists.

 * @c: UBIFS file-system description object

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * scan_check_cb - scan callback.

 * @c: the UBIFS file-system description object

 * @lp: LEB properties to scan

 * @in_tree: whether the LEB properties are in main memory

 * @lst: lprops statistics to update

 *

 * This function returns a code that indicates whether the scan should continue

 * (%LPT_SCAN_CONTINUE), whether the LEB properties should be added to the tree

 * in main memory (%LPT_SCAN_ADD), or whether the scan should stop

 * (%LPT_SCAN_STOP).

 Check lp is on its category list (if it has one) */

 Check lp is on its category heap (if it has one) */

	/*

	 * After an unclean unmount, empty and freeable LEBs

	 * may contain garbage - do not scan them.

			/*

			 * Empty or freeable LEBs could contain index

			 * nodes from an uncompleted commit due to an

			 * unclean unmount. Or they could be empty for

			 * the same reason. Or it may simply not have been

			 * unmapped.

		/*

		 * After an unclean unmount, an index LEB could have a different

		 * amount of free space than the value recorded by lprops. That

		 * is because the in-the-gaps method may use free space or

		 * create free space (as a side-effect of using ubi_leb_change

		 * and not writing the whole LEB). The incorrect free space

		 * value is not a problem because the index is only ever

		 * allocated empty LEBs, so there will never be an attempt to

		 * write to the free space at the end of an index LEB - except

		 * by the in-the-gaps method for which it is not a problem.

 Free but not unmapped LEB, it's fine */

/**

 * dbg_check_lprops - check all LEB properties.

 * @c: UBIFS file-system description object

 *

 * This function checks all LEB properties and makes sure they are all correct.

 * It returns zero if everything is fine, %-EINVAL if there is an inconsistency

 * and other negative error codes in case of other errors. This function is

 * called while the file system is locked (because of commit start), so no

 * additional locking is required. Note that locking the LPT mutex would cause

 * a circular lock dependency with the TNC mutex.

	/*

	 * As we are going to scan the media, the write buffers have to be

	 * synchronized.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Adrian Hunter

 *          Artem Bityutskiy (Битюцкий Артём)

/*

 * This file implements the LEB properties tree (LPT) area. The LPT area

 * contains the LEB properties tree, a table of LPT area eraseblocks (ltab), and

 * (for the "big" model) a table of saved LEB numbers (lsave). The LPT area sits

 * between the log and the orphan area.

 *

 * The LPT area is like a miniature self-contained file system. It is required

 * that it never runs out of space, is fast to access and update, and scales

 * logarithmically. The LEB properties tree is implemented as a wandering tree

 * much like the TNC, and the LPT area has its own garbage collection.

 *

 * The LPT has two slightly different forms called the "small model" and the

 * "big model". The small model is used when the entire LEB properties table

 * can be written into a single eraseblock. In that case, garbage collection

 * consists of just writing the whole table, which therefore makes all other

 * eraseblocks reusable. In the case of the big model, dirty eraseblocks are

 * selected for garbage collection, which consists of marking the clean nodes in

 * that LEB as dirty, and then only the dirty nodes are written out. Also, in

 * the case of the big model, a table of LEB numbers is saved so that the entire

 * LPT does not to be scanned looking for empty eraseblocks when UBIFS is first

 * mounted.

/**

 * do_calc_lpt_geom - calculate sizes for the LPT area.

 * @c: the UBIFS file-system description object

 *

 * Calculate the sizes of LPT bit fields, nodes, and tree, based on the

 * properties of the flash and whether LPT is "big" (c->big_lpt).

 Calculate the minimum LPT size */

 Add wastage */

/**

 * ubifs_calc_lpt_geom - calculate and check sizes for the LPT area.

 * @c: the UBIFS file-system description object

 *

 * This function returns %0 on success and a negative error code on failure.

 Verify that lpt_lebs is big enough */

 Must have at least 2 times the size */

 Verify that ltab fits in a single LEB (since ltab is a single node */

/**

 * calc_dflt_lpt_geom - calculate default LPT geometry.

 * @c: the UBIFS file-system description object

 * @main_lebs: number of main area LEBs is passed and returned here

 * @big_lpt: whether the LPT area is "big" is returned here

 *

 * The size of the LPT area depends on parameters that themselves are dependent

 * on the size of the LPT area. This function, successively recalculates the LPT

 * area geometry until the parameters and resultant geometry are consistent.

 *

 * This function returns %0 on success and a negative error code on failure.

 Start by assuming the minimum number of LPT LEBs */

 And assume we will use the small LPT model */

	/*

	 * Calculate the geometry based on assumptions above and then see if it

	 * makes sense

 Small LPT model must have lpt_sz < leb_size */

 Nope, so try again using big LPT model */

 Now check there are enough LPT LEBs */

 Allow 4 times the size */

 Not enough LPT LEBs so try again with more */

/**

 * pack_bits - pack bit fields end-to-end.

 * @c: UBIFS file-system description object

 * @addr: address at which to pack (passed and next address returned)

 * @pos: bit position at which to pack (passed and next position returned)

 * @val: value to pack

 * @nrbits: number of bits of value to pack (1-32)

/**

 * ubifs_unpack_bits - unpack bit fields.

 * @c: UBIFS file-system description object

 * @addr: address at which to unpack (passed and next address returned)

 * @pos: bit position at which to unpack (passed and next position returned)

 * @nrbits: number of bits of value to unpack (1-32)

 *

 * This functions returns the value unpacked.

/**

 * ubifs_pack_pnode - pack all the bit fields of a pnode.

 * @c: UBIFS file-system description object

 * @buf: buffer into which to pack

 * @pnode: pnode to pack

/**

 * ubifs_pack_nnode - pack all the bit fields of a nnode.

 * @c: UBIFS file-system description object

 * @buf: buffer into which to pack

 * @nnode: nnode to pack

/**

 * ubifs_pack_ltab - pack the LPT's own lprops table.

 * @c: UBIFS file-system description object

 * @buf: buffer into which to pack

 * @ltab: LPT's own lprops table to pack

/**

 * ubifs_pack_lsave - pack the LPT's save table.

 * @c: UBIFS file-system description object

 * @buf: buffer into which to pack

 * @lsave: LPT's save table to pack

/**

 * ubifs_add_lpt_dirt - add dirty space to LPT LEB properties.

 * @c: UBIFS file-system description object

 * @lnum: LEB number to which to add dirty space

 * @dirty: amount of dirty space to add

/**

 * set_ltab - set LPT LEB properties.

 * @c: UBIFS file-system description object

 * @lnum: LEB number

 * @free: amount of free space

 * @dirty: amount of dirty space

/**

 * ubifs_add_nnode_dirt - add dirty space to LPT LEB properties.

 * @c: UBIFS file-system description object

 * @nnode: nnode for which to add dirt

/**

 * add_pnode_dirt - add dirty space to LPT LEB properties.

 * @c: UBIFS file-system description object

 * @pnode: pnode for which to add dirt

/**

 * calc_nnode_num - calculate nnode number.

 * @row: the row in the tree (root is zero)

 * @col: the column in the row (leftmost is zero)

 *

 * The nnode number is a number that uniquely identifies a nnode and can be used

 * easily to traverse the tree from the root to that nnode.

 *

 * This function calculates and returns the nnode number for the nnode at @row

 * and @col.

/**

 * calc_nnode_num_from_parent - calculate nnode number.

 * @c: UBIFS file-system description object

 * @parent: parent nnode

 * @iip: index in parent

 *

 * The nnode number is a number that uniquely identifies a nnode and can be used

 * easily to traverse the tree from the root to that nnode.

 *

 * This function calculates and returns the nnode number based on the parent's

 * nnode number and the index in parent.

/**

 * calc_pnode_num_from_parent - calculate pnode number.

 * @c: UBIFS file-system description object

 * @parent: parent nnode

 * @iip: index in parent

 *

 * The pnode number is a number that uniquely identifies a pnode and can be used

 * easily to traverse the tree from the root to that pnode.

 *

 * This function calculates and returns the pnode number based on the parent's

 * nnode number and the index in parent.

/**

 * ubifs_create_dflt_lpt - create default LPT.

 * @c: UBIFS file-system description object

 * @main_lebs: number of main area LEBs is passed and returned here

 * @lpt_first: LEB number of first LPT LEB

 * @lpt_lebs: number of LEBs for LPT is passed and returned here

 * @big_lpt: use big LPT model is passed and returned here

 * @hash: hash of the LPT is returned here

 *

 * This function returns %0 on success and a negative error code on failure.

 Needed by 'ubifs_pack_nnode()' and 'set_ltab()' */

 Needed by 'set_ltab()' */

 Needed by 'ubifs_pack_lsave()' */

 Needed by set_ltab */

 Initialize LPT's own lprops */

 Number of leaf nodes (pnodes) */

	/*

	 * The first pnode contains the LEB properties for the LEBs that contain

	 * the root inode node and the root index node of the index tree.

 Add first pnode */

 Reset pnode values for remaining pnodes */

	/*

	 * To calculate the internal node branches, we keep information about

	 * the level below.

 LEB number of level below */

 Offset of level below */

 Number of nodes in level below */

 Size of nodes in level below */

 Add all remaining pnodes */

		/*

		 * pnodes are simply numbered left to right starting at zero,

		 * which means the pnode number can be used easily to traverse

		 * down the tree to the corresponding pnode.

 Add all nnodes, one level at a time */

 Number of internal nodes (nnodes) at next level */

 Only 1 nnode at this level, so it is the root */

 Set branches to the level below */

 Only 1 nnode at this level, so it is the root */

 Update the information about the level below */

 Need to add LPT's save table */

 Need to add LPT's own LEB properties table */

 Update ltab before packing it */

 Write remaining buffer */

/**

 * update_cats - add LEB properties of a pnode to LEB category lists and heaps.

 * @c: UBIFS file-system description object

 * @pnode: pnode

 *

 * When a pnode is loaded into memory, the LEB properties it contains are added,

 * by this function, to the LEB category lists and heaps.

/**

 * replace_cats - add LEB properties of a pnode to LEB category lists and heaps.

 * @c: UBIFS file-system description object

 * @old_pnode: pnode copied

 * @new_pnode: pnode copy

 *

 * During commit it is sometimes necessary to copy a pnode

 * (see dirty_cow_pnode).  When that happens, references in

 * category lists and heaps must be replaced.  This function does that.

/**

 * check_lpt_crc - check LPT node crc is correct.

 * @c: UBIFS file-system description object

 * @buf: buffer containing node

 * @len: length of node

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * check_lpt_type - check LPT node type is correct.

 * @c: UBIFS file-system description object

 * @addr: address of type bit field is passed and returned updated here

 * @pos: position of type bit field is passed and returned updated here

 * @type: expected type

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * unpack_pnode - unpack a pnode.

 * @c: UBIFS file-system description object

 * @buf: buffer containing packed pnode to unpack

 * @pnode: pnode structure to fill

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * ubifs_unpack_nnode - unpack a nnode.

 * @c: UBIFS file-system description object

 * @buf: buffer containing packed nnode to unpack

 * @nnode: nnode structure to fill

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * unpack_ltab - unpack the LPT's own lprops table.

 * @c: UBIFS file-system description object

 * @buf: buffer from which to unpack

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * unpack_lsave - unpack the LPT's save table.

 * @c: UBIFS file-system description object

 * @buf: buffer from which to unpack

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * validate_nnode - validate a nnode.

 * @c: UBIFS file-system description object

 * @nnode: nnode to validate

 * @parent: parent nnode (or NULL for the root nnode)

 * @iip: index in parent

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * validate_pnode - validate a pnode.

 * @c: UBIFS file-system description object

 * @pnode: pnode to validate

 * @parent: parent nnode

 * @iip: index in parent

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * set_pnode_lnum - set LEB numbers on a pnode.

 * @c: UBIFS file-system description object

 * @pnode: pnode to update

 *

 * This function calculates the LEB numbers for the LEB properties it contains

 * based on the pnode number.

/**

 * ubifs_read_nnode - read a nnode from flash and link it to the tree in memory.

 * @c: UBIFS file-system description object

 * @parent: parent nnode (or NULL for the root)

 * @iip: index in parent

 *

 * This function returns %0 on success and a negative error code on failure.

		/*

		 * This nnode was not written which just means that the LEB

		 * properties in the subtree below it describe empty LEBs. We

		 * make the nnode as though we had read it, which in fact means

		 * doing almost nothing.

/**

 * read_pnode - read a pnode from flash and link it to the tree in memory.

 * @c: UBIFS file-system description object

 * @parent: parent nnode

 * @iip: index in parent

 *

 * This function returns %0 on success and a negative error code on failure.

		/*

		 * This pnode was not written which just means that the LEB

		 * properties in it describe empty LEBs. We make the pnode as

		 * though we had read it.

/**

 * read_ltab - read LPT's own lprops table.

 * @c: UBIFS file-system description object

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * read_lsave - read LPT's save table.

 * @c: UBIFS file-system description object

 *

 * This function returns %0 on success and a negative error code on failure.

		/*

		 * Due to automatic resizing, the values in the lsave table

		 * could be beyond the volume size - just ignore them.

/**

 * ubifs_get_nnode - get a nnode.

 * @c: UBIFS file-system description object

 * @parent: parent nnode (or NULL for the root)

 * @iip: index in parent

 *

 * This function returns a pointer to the nnode on success or a negative error

 * code on failure.

/**

 * ubifs_get_pnode - get a pnode.

 * @c: UBIFS file-system description object

 * @parent: parent nnode

 * @iip: index in parent

 *

 * This function returns a pointer to the pnode on success or a negative error

 * code on failure.

/**

 * ubifs_pnode_lookup - lookup a pnode in the LPT.

 * @c: UBIFS file-system description object

 * @i: pnode number (0 to (main_lebs - 1) / UBIFS_LPT_FANOUT)

 *

 * This function returns a pointer to the pnode on success or a negative

 * error code on failure.

/**

 * ubifs_lpt_lookup - lookup LEB properties in the LPT.

 * @c: UBIFS file-system description object

 * @lnum: LEB number to lookup

 *

 * This function returns a pointer to the LEB properties on success or a

 * negative error code on failure.

/**

 * dirty_cow_nnode - ensure a nnode is not being committed.

 * @c: UBIFS file-system description object

 * @nnode: nnode to check

 *

 * Returns dirtied nnode on success or negative error code on failure.

 nnode is not being committed */

 nnode is being committed, so copy it */

 The children now have new parent */

/**

 * dirty_cow_pnode - ensure a pnode is not being committed.

 * @c: UBIFS file-system description object

 * @pnode: pnode to check

 *

 * Returns dirtied pnode on success or negative error code on failure.

 pnode is not being committed */

 pnode is being committed, so copy it */

/**

 * ubifs_lpt_lookup_dirty - lookup LEB properties in the LPT.

 * @c: UBIFS file-system description object

 * @lnum: LEB number to lookup

 *

 * This function returns a pointer to the LEB properties on success or a

 * negative error code on failure.

/**

 * ubifs_lpt_calc_hash - Calculate hash of the LPT pnodes

 * @c: UBIFS file-system description object

 * @hash: the returned hash of the LPT pnodes

 *

 * This function iterates over the LPT pnodes and creates a hash over them.

 * Returns 0 for success or a negative error code otherwise.

 Go right */

 Go down */

 Go up and to the right */

/**

 * lpt_check_hash - check the hash of the LPT.

 * @c: UBIFS file-system description object

 *

 * This function calculates a hash over all pnodes in the LPT and compares it with

 * the hash stored in the master node. Returns %0 on success and a negative error

 * code on failure.

/**

 * lpt_init_rd - initialize the LPT for reading.

 * @c: UBIFS file-system description object

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * lpt_init_wr - initialize the LPT for writing.

 * @c: UBIFS file-system description object

 *

 * 'lpt_init_rd()' must have been called already.

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * ubifs_lpt_init - initialize the LPT.

 * @c: UBIFS file-system description object

 * @rd: whether to initialize lpt for reading

 * @wr: whether to initialize lpt for writing

 *

 * For mounting 'rw', @rd and @wr are both true. For mounting 'ro', @rd is true

 * and @wr is false. For mounting from 'ro' to 'rw', @rd is false and @wr is

 * true.

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * struct lpt_scan_node - somewhere to put nodes while we scan LPT.

 * @nnode: where to keep a nnode

 * @pnode: where to keep a pnode

 * @cnode: where to keep a cnode

 * @in_tree: is the node in the tree in memory

 * @ptr.nnode: pointer to the nnode (if it is an nnode) which may be here or in

 * the tree

 * @ptr.pnode: ditto for pnode

 * @ptr.cnode: ditto for cnode

/**

 * scan_get_nnode - for the scan, get a nnode from either the tree or flash.

 * @c: the UBIFS file-system description object

 * @path: where to put the nnode

 * @parent: parent of the nnode

 * @iip: index in parent of the nnode

 *

 * This function returns a pointer to the nnode on success or a negative error

 * code on failure.

		/*

		 * This nnode was not written which just means that the LEB

		 * properties in the subtree below it describe empty LEBs. We

		 * make the nnode as though we had read it, which in fact means

		 * doing almost nothing.

/**

 * scan_get_pnode - for the scan, get a pnode from either the tree or flash.

 * @c: the UBIFS file-system description object

 * @path: where to put the pnode

 * @parent: parent of the pnode

 * @iip: index in parent of the pnode

 *

 * This function returns a pointer to the pnode on success or a negative error

 * code on failure.

		/*

		 * This pnode was not written which just means that the LEB

		 * properties in it describe empty LEBs. We make the pnode as

		 * though we had read it.

/**

 * ubifs_lpt_scan_nolock - scan the LPT.

 * @c: the UBIFS file-system description object

 * @start_lnum: LEB number from which to start scanning

 * @end_lnum: LEB number at which to stop scanning

 * @scan_cb: callback function called for each lprops

 * @data: data to be passed to the callback function

 *

 * This function returns %0 on success and a negative error code on failure.

 Descend to the pnode containing start_lnum */

 Loop for each lprops */

 Add all the nodes in path to the tree in memory */

 Get the next lprops */

			/*

			 * We got to the end without finding what we were

			 * looking for

 Wrap-around to the beginning */

 Next lprops is in the same pnode */

 We need to get the next pnode. Go up until we can go right */

 Go right */

 Descend to the pnode */

/**

 * dbg_chk_pnode - check a pnode.

 * @c: the UBIFS file-system description object

 * @pnode: pnode to check

 * @col: pnode column

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * dbg_check_lpt_nodes - check nnodes and pnodes.

 * @c: the UBIFS file-system description object

 * @cnode: next cnode (nnode or pnode) to check

 * @row: row of cnode (root is zero)

 * @col: column of cnode (leftmost is zero)

 *

 * This function returns %0 on success and a negative error code on failure.

 cnode is a nnode */

 Go down */

 Go right */

 cnode is a pnode */

 Go up and to the right */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * This file is part of UBIFS.

 *

 * Copyright (C) 2006-2008 Nokia Corporation.

 *

 * Authors: Artem Bityutskiy (Битюцкий Артём)

 *          Adrian Hunter

/*

 * This file is a part of UBIFS journal implementation and contains various

 * functions which manipulate the log. The log is a fixed area on the flash

 * which does not contain any data but refers to buds. The log is a part of the

 * journal.

/**

 * ubifs_search_bud - search bud LEB.

 * @c: UBIFS file-system description object

 * @lnum: logical eraseblock number to search

 *

 * This function searches bud LEB @lnum. Returns bud description object in case

 * of success and %NULL if there is no bud with this LEB number.

/**

 * ubifs_get_wbuf - get the wbuf associated with a LEB, if there is one.

 * @c: UBIFS file-system description object

 * @lnum: logical eraseblock number to search

 *

 * This functions returns the wbuf for @lnum or %NULL if there is not one.

/**

 * empty_log_bytes - calculate amount of empty space in the log.

 * @c: UBIFS file-system description object

/**

 * ubifs_add_bud - add bud LEB to the tree of buds and its journal head list.

 * @c: UBIFS file-system description object

 * @bud: the bud to add

	/*

	 * Note, although this is a new bud, we anyway account this space now,

	 * before any data has been written to it, because this is about to

	 * guarantee fixed mount time, and this bud will anyway be read and

	 * scanned.

/**

 * ubifs_add_bud_to_log - add a new bud to the log.

 * @c: UBIFS file-system description object

 * @jhead: journal head the bud belongs to

 * @lnum: LEB number of the bud

 * @offs: starting offset of the bud

 *

 * This function writes a reference node for the new bud LEB @lnum to the log,

 * and adds it to the buds trees. It also makes sure that log size does not

 * exceed the 'c->max_bud_bytes' limit. Returns zero in case of success,

 * %-EAGAIN if commit is required, and a negative error code in case of

 * failure.

 Make sure we have enough space in the log */

	/*

	 * Make sure the amount of space in buds will not exceed the

	 * 'c->max_bud_bytes' limit, because we want to guarantee mount time

	 * limits.

	 *

	 * It is not necessary to hold @c->buds_lock when reading @c->bud_bytes

	 * because we are holding @c->log_mutex. All @c->bud_bytes take place

	 * when both @c->log_mutex and @c->bud_bytes are locked.

	/*

	 * If the journal is full enough - start background commit. Note, it is

	 * OK to read 'c->cmt_state' without spinlock because integer reads

	 * are atomic in the kernel.

 Must ensure next log LEB has been unmapped */

		/*

		 * Before writing the LEB reference which refers an empty LEB

		 * to the log, we have to make sure it is mapped, because

		 * otherwise we'd risk to refer an LEB with garbage in case of

		 * an unclean reboot, because the target LEB might have been

		 * unmapped, but not yet physically erased.

/**

 * remove_buds - remove used buds.

 * @c: UBIFS file-system description object

 *

 * This function removes use buds from the buds tree. It does not remove the

 * buds which are pointed to by journal heads.

			/*

			 * Do not remove buds which are pointed to by journal

			 * heads (non-closed buds).

			/*

			 * If the commit does not finish, the recovery will need

			 * to replay the journal, in which case the old buds

			 * must be unchanged. Do not release them until post

			 * commit i.e. do not allow them to be garbage

			 * collected.

/**

 * ubifs_log_start_commit - start commit.

 * @c: UBIFS file-system description object

 * @ltail_lnum: return new log tail LEB number

 *

 * The commit operation starts with writing "commit start" node to the log and

 * reference nodes for all journal heads which will define new journal after

 * the commit has been finished. The commit start and reference nodes are

 * written in one go to the nearest empty log LEB (hence, when commit is

 * finished UBIFS may safely unmap all the previous log LEBs). This function

 * returns zero in case of success and a negative error code in case of

 * failure.

	/*

	 * Note, we do not lock 'c->log_mutex' because this is the commit start

	 * phase and we are exclusively using the log. And we do not lock

	 * write-buffer because nobody can write to the file-system at this

	 * phase.

 Switch to the next log LEB */

 Must ensure next LEB has been unmapped */

	/*

	 * We have started the commit and now users may use the rest of the log

	 * for new writes.

/**

 * ubifs_log_end_commit - end commit.

 * @c: UBIFS file-system description object

 * @ltail_lnum: new log tail LEB number

 *

 * This function is called on when the commit operation was finished. It

 * moves log tail to new position and updates the master node so that it stores

 * the new log tail LEB number. Returns zero in case of success and a negative

 * error code in case of failure.

	/*

	 * At this phase we have to lock 'c->log_mutex' because UBIFS allows FS

	 * writes during commit. Its only short "commit" start phase when

	 * writers are blocked.

	/*

	 * The commit is finished and from now on it must be guaranteed that

	 * there is always enough space for the next commit.

/**

 * ubifs_log_post_commit - things to do after commit is completed.

 * @c: UBIFS file-system description object

 * @old_ltail_lnum: old log tail LEB number

 *

 * Release buds only after commit is completed, because they must be unchanged

 * if recovery is needed.

 *

 * Unmap log LEBs only after commit is completed, because they may be needed for

 * recovery.

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * struct done_ref - references that have been done.

 * @rb: rb-tree node

 * @lnum: LEB number

/**

 * done_already - determine if a reference has been done already.

 * @done_tree: rb-tree to store references that have been done

 * @lnum: LEB number of reference

 *

 * This function returns %1 if the reference has been done, %0 if not, otherwise

 * a negative error code is returned.

/**

 * destroy_done_tree - destroy the done tree.

 * @done_tree: done tree to destroy

/**

 * add_node - add a node to the consolidated log.

 * @c: UBIFS file-system description object

 * @buf: buffer to which to add

 * @lnum: LEB number to which to write is passed and returned here

 * @offs: offset to where to write is passed and returned here

 * @node: node to add

 *

 * This function returns %0 on success and a negative error code on failure.

/**

 * ubifs_consolidate_log - consolidate the log.

 * @c: UBIFS file-system description object

 *

 * Repeated failed commits could cause the log to be full, but at least 1 LEB is

 * needed for commit. This function rewrites the reference nodes in the log

 * omitting duplicates, and failed CS nodes, and leaving no gaps.

 *

 * This function returns %0 on success and a negative error code on failure.

 Unmap remaining LEBs */

/**

 * dbg_check_bud_bytes - make sure bud bytes calculation are all right.

 * @c: UBIFS file-system description object

 *

 * This function makes sure the amount of flash space used by closed buds

 * ('c->bud_bytes' is correct). Returns zero in case of success and %-EINVAL in

 * case of failure.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * kvm asynchronous fault support

 *

 * Copyright 2010 Red Hat, Inc.

 *

 * Author:

 *      Gleb Natapov <gleb@redhat.com>

	/*

	 * This work is run asynchronously to the task which owns

	 * mm and might be done in another context, so we must

	 * access remotely.

	/*

	 * apf may be freed by kvm_check_async_pf_completion() after

	 * this point

 cancel outstanding work queue item */

		/*

		 * We know it's present in vcpu->async_pf.done, do

		 * nothing here.

 == work->vcpu->kvm */

/*

 * Try to schedule a job to handle page fault asynchronously. Returns 'true' on

 * success, 'false' on failure (page fault has to be handled synchronously).

 Arch specific code should not do async PF in this case */

	/*

	 * do alloc nowait since if we are going to sleep anyway we

	 * may as well sleep faulting in page

 for list_del to work */

 SPDX-License-Identifier: GPL-2.0

/*

 * KVM coalesced MMIO

 *

 * Copyright (c) 2008 Bull S.A.S.

 * Copyright 2009 Red Hat, Inc. and/or its affiliates.

 *

 *  Author: Laurent Vivier <Laurent.Vivier@bull.net>

 *

	/* is it in a batchable area ?

	 * (addr,len) is fully included in

	 * (zone->addr, zone->size)

 Are we able to batch it ? */

	/* last is the first free entry

	 * check if we don't meet the first used entry

	 * there is always one unused entry in the buffer

 full */

 copy data in first free entry of the ring */

	/*

	 * We're using this spinlock to sync access to the coalesced ring.

	 * The list doesn't need its own lock since device registration and

	 * unregistration should only happen when kvm->slots_lock is held.

			/*

			 * On failure, unregister destroys all devices on the

			 * bus _except_ the target device, i.e. coalesced_zones

			 * has been modified.  No need to restart the walk as

			 * there aren't any zones left.

	/*

	 * Ignore the result of kvm_io_bus_unregister_dev(), from userspace's

	 * perspective, the coalesced MMIO is most definitely unregistered.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Kernel-based Virtual Machine driver for Linux

 *

 * This module enables machines with Intel VT-x extensions to run virtual

 * machines without emulation or binary translation.

 *

 * Copyright (C) 2006 Qumranet, Inc.

 * Copyright 2010 Red Hat, Inc. and/or its affiliates.

 *

 * Authors:

 *   Avi Kivity   <avi@qumranet.com>

 *   Yaniv Kamay  <yaniv@qumranet.com>

 Worst case buffer size needed for holding an integer. */

 Architectures should define their poll value according to the halt latency */

 Default doubles per-vcpu halt_poll_ns. */

 The start value to grow halt_poll_ns from */

 10us */

 Default resets per-vcpu halt_poll_ns . */

/*

 * Ordering of locks:

 *

 *	kvm->lock --> kvm->slots_lock --> kvm->irq_lock

/*

 * For architectures that don't implement a compat infrastructure,

 * adopt a double line of defense:

 * - Prevent a compat task from opening /dev/kvm

 * - If the open has been done by a 64bit task, and the KVM fd

 *   passed to a compat task, let the ioctls fail.

	/*

	 * The metadata used by is_zone_device_page() to determine whether or

	 * not a page is ZONE_DEVICE is guaranteed to be valid if and only if

	 * the device has been pinned, e.g. by get_user_pages().  WARN if the

	 * page_count() is zero to help detect bad usage of this helper.

	/*

	 * ZONE_DEVICE pages currently set PG_reserved, but from a refcounting

	 * perspective they are "normal" pages, albeit with slightly different

	 * usage rules.

/*

 * Switches to specified vcpu, until a matching vcpu_put()

 TODO: merge with kvm_arch_vcpu_should_kick */

	/*

	 * We need to wait for the VCPU to reenable interrupts and get out of

	 * READING_SHADOW_PAGE_TABLES mode.

	/*

	 * Need to kick a running VCPU, but otherwise there is nothing to do.

	/*

	 * Note, the vCPU could get migrated to a different pCPU at any point

	 * after kvm_request_needs_ipi(), which could result in sending an IPI

	 * to the previous pCPU.  But, that's OK because the purpose of the IPI

	 * is to ensure the vCPU returns to OUTSIDE_GUEST_MODE, which is

	 * satisfied if the vCPU migrates. Entering READING_SHADOW_PAGE_TABLES

	 * after this point is also OK, as the requirement is only that KVM wait

	 * for vCPUs that were reading SPTEs _before_ any changes were

	 * finalized. See kvm_vcpu_kick() for more details on handling requests.

	/*

	 * We want to publish modifications to the page tables before reading

	 * mode. Pairs with a memory barrier in arch-specific code.

	 * - x86: smp_mb__after_srcu_read_unlock in vcpu_enter_guest

	 * and smp_mb in walk_shadow_page_lockless_begin/end.

	 * - powerpc: smp_mb in kvmppc_prepare_to_enter.

	 *

	 * There is already an smp_mb__after_atomic() before

	 * kvm_make_all_cpus_request() reads vcpu->mode. We reuse that

	 * barrier here.

	/*

	 * No need for rcu_read_lock as VCPU_RUN is the only place that changes

	 * the vcpu->pid pointer, and at destruction time all file descriptors

	 * are already gone.

/*

 * Use a dedicated stub instead of NULL to indicate that there is no callback

 * function/handler.  The compiler technically can't guarantee that a real

 * function will have a non-zero address, and so it will generate code to

 * check for !NULL, whereas comparing against a stub will be elided at compile

 * time (unless the compiler is getting long in the tooth, e.g. gcc 4.9).

 A null handler is allowed if and only if on_lock() is provided. */

			/*

			 * To optimize for the likely case where the address

			 * range is covered by zero or one memslots, don't

			 * bother making these conditional (to avoid writes on

			 * the second or later invocation of the handler).

			/*

			 * {gfn(page) | page intersects with [hva_start, hva_end)} =

			 * {gfn_start, gfn_start+1, ..., gfn_end-1}.

 The notifiers are averse to booleans. :-( */

	/*

	 * .change_pte() must be surrounded by .invalidate_range_{start,end}().

	 * If mmu_notifier_count is zero, then no in-progress invalidations,

	 * including this one, found a relevant memslot at start(); rechecking

	 * memslots here is unnecessary.  Note, a false positive (count elevated

	 * by a different invalidation) is sub-optimal but functionally ok.

	/*

	 * The count increase must become visible at unlock time as no

	 * spte can be established without taking the mmu_lock and

	 * count is also read inside the mmu_lock critical section.

		/*

		 * Fully tracking multiple concurrent ranges has dimishing

		 * returns. Keep things simple and just find the minimal range

		 * which includes the current and new ranges. As there won't be

		 * enough information to subtract a range after its invalidate

		 * completes, any ranges invalidated concurrently will

		 * accumulate and persist until all outstanding invalidates

		 * complete.

	/*

	 * Prevent memslot modification between range_start() and range_end()

	 * so that conditionally locking provides the same result in both

	 * functions.  Without that guarantee, the mmu_notifier_count

	 * adjustments will be imbalanced.

	 *

	 * Pairs with the decrement in range_end().

	/*

	 * This sequence increase will notify the kvm page fault that

	 * the page that is going to be mapped in the spte could have

	 * been freed.

	/*

	 * The above sequence increase must be visible before the

	 * below count decrease, which is ensured by the smp_wmb above

	 * in conjunction with the smp_rmb in mmu_notifier_retry().

 Pairs with the increment in range_start(). */

	/*

	 * There can only be one waiter, since the wait happens under

	 * slots_lock.

	/*

	 * Even though we do not flush TLB, this will still adversely

	 * affect performance on pre-Haswell Intel EPT, where there is

	 * no EPT Access Bit to clear so that we have to tear down EPT

	 * tables instead. If we find this unacceptable, we can always

	 * add a parameter to kvm_age_hva so that it effectively doesn't

	 * do anything on clear_young.

	 *

	 * Also note that currently we never issue secondary TLB flushes

	 * from clear_young, leaving this job up to the regular system

	 * cadence. If we find this inaccurate, we might come up with a

	 * more sophisticated heuristic later.

 !(CONFIG_MMU_NOTIFIER && KVM_ARCH_WANT_MMU_NOTIFIER) */

 CONFIG_MMU_NOTIFIER && KVM_ARCH_WANT_MMU_NOTIFIER */

 Suspend KVM before we suspend ftrace, RCU, etc. */

 !CONFIG_HAVE_KVM_PM_NOTIFIER */

 CONFIG_HAVE_KVM_PM_NOTIFIER */

/*

 * Called after the VM is otherwise initialized, but just before adding it to

 * the vm_list.

/*

 * Called just after removing the VM from the vm_list, but before doing any

 * other destruction.

/*

 * Called after per-vm debugfs created.  When called kvm->debugfs_dentry should

 * be setup already, so we can create arch-specific debugfs entries under it.

 * Cleanup should be automatic done in kvm_destroy_vm_debugfs() recursively, so

 * a per-arch destroy interface is not needed.

 Generations must be different for each address space. */

	/*

	 * We do not need to take the kvm->lock here, because nobody else

	 * has a reference to the struct kvm at this point and therefore

	 * cannot access the devices list anyhow.

	/*

	 * At this point, pending calls to invalidate_range_start()

	 * have completed but no more MMU notifiers will run, so

	 * mn_active_invalidate_count may remain unbalanced.

	 * No threads can be waiting in install_new_memslots as the

	 * last reference on KVM has been dropped, but freeing

	 * memslots would deadlock without this manual intervention.

/*

 * Make sure the vm is not during destruction, which is a safe version of

 * kvm_get_kvm().  Return true if kvm referenced successfully, false otherwise.

/*

 * Used to put a reference that was taken on behalf of an object associated

 * with a user-visible file descriptor, e.g. a vcpu or device, if installation

 * of the new file descriptor fails and the reference cannot be transferred to

 * its final owner.  In such cases, the caller is still actively using @kvm and

 * will fail miserably if the refcount unexpectedly hits zero.

/*

 * Allocation size is twice as large as the actual dirty bitmap size.

 * See kvm_vm_ioctl_get_dirty_log() why this is needed.

/*

 * Delete a memslot by decrementing the number of used slots and shifting all

 * other entries in the array forward one spot.

/*

 * "Insert" a new memslot by incrementing the number of used slots.  Returns

 * the new slot's initial index into the memslots array.

/*

 * Move a changed memslot backwards in the array by shifting existing slots

 * with a higher GFN toward the front of the array.  Note, the changed memslot

 * itself is not preserved in the array, i.e. not swapped at this time, only

 * its new index into the array is tracked.  Returns the changed memslot's

 * current index into the memslots array.

	/*

	 * Move the target memslot backward in the array by shifting existing

	 * memslots with a higher GFN (than the target memslot) towards the

	 * front of the array.

 Shift the next memslot forward one and update its index. */

/*

 * Move a changed memslot forwards in the array by shifting existing slots with

 * a lower GFN toward the back of the array.  Note, the changed memslot itself

 * is not preserved in the array, i.e. not swapped at this time, only its new

 * index into the array is tracked.  Returns the changed memslot's final index

 * into the memslots array.

 Shift the next memslot back one and update its index. */

/*

 * Re-sort memslots based on their GFN to account for an added, deleted, or

 * moved memslot.  Sorting memslots by GFN allows using a binary search during

 * memslot lookup.

 *

 * IMPORTANT: Slots are sorted from highest GFN to lowest GFN!  I.e. the entry

 * at memslots[0] has the highest GFN.

 *

 * The sorting algorithm takes advantage of having initially sorted memslots

 * and knowing the position of the changed memslot.  Sorting is also optimized

 * by not swapping the updated memslot and instead only shifting other memslots

 * and tracking the new index for the update memslot.  Only once its final

 * index is known is the updated memslot copied into its position in the array.

 *

 *  - When deleting a memslot, the deleted memslot simply needs to be moved to

 *    the end of the array.

 *

 *  - When creating a memslot, the algorithm "inserts" the new memslot at the

 *    end of the array and then it forward to its correct location.

 *

 *  - When moving a memslot, the algorithm first moves the updated memslot

 *    backward to handle the scenario where the memslot's GFN was changed to a

 *    lower value.  update_memslots() then falls through and runs the same flow

 *    as creating a memslot to move the memslot forward to handle the scenario

 *    where its GFN was changed to a higher value.

 *

 * Note, slots are sorted from highest->lowest instead of lowest->highest for

 * historical reasons.  Originally, invalid memslots where denoted by having

 * GFN=0, thus sorting from highest->lowest naturally sorted invalid memslots

 * to the end of the array.  The current algorithm uses dedicated logic to

 * delete a memslot and thus does not rely on invalid memslots having GFN=0.

 *

 * The other historical motiviation for highest->lowest was to improve the

 * performance of memslot lookup.  KVM originally used a linear search starting

 * at memslots[0].  On x86, the largest memslot usually has one of the highest,

 * if not *the* highest, GFN, as the bulk of the guest's RAM is located in a

 * single memslot above the 4gb boundary.  As the largest memslot is also the

 * most likely to be referenced, sorting it to the front of the array was

 * advantageous.  The current binary search starts from the middle of the array

 * and uses an LRU pointer to improve performance for all memslots and GFNs.

		/*

		 * Copy the memslot to its new position in memslots and update

		 * its index accordingly.

	/*

	 * Do not store the new memslots while there are invalidations in

	 * progress, otherwise the locking in invalidate_range_start and

	 * invalidate_range_end will be unbalanced.

	/*

	 * Acquired in kvm_set_memslot. Must be released before synchronize

	 * SRCU below in order to avoid deadlock with another thread

	 * acquiring the slots_arch_lock in an srcu critical section.

	/*

	 * Increment the new memslot generation a second time, dropping the

	 * update in-progress flag and incrementing the generation based on

	 * the number of address spaces.  This provides a unique and easily

	 * identifiable generation number while the memslots are in flux.

	/*

	 * Generations must be unique even across address spaces.  We do not need

	 * a global counter for that, instead the generation space is evenly split

	 * across address spaces.  For example, with two address spaces, address

	 * space 0 will use generations 0, 2, 4, ... while address space 1 will

	 * use generations 1, 3, 5, ...

/*

 * Note, at a minimum, the current number of used slots must be allocated, even

 * when deleting a memslot, as we need a complete duplicate of the memslots for

 * use when invalidating a memslot prior to deleting/moving the memslot.

	/*

	 * Released in install_new_memslots.

	 *

	 * Must be held from before the current memslots are copied until

	 * after the new memslots are installed with rcu_assign_pointer,

	 * then released before the synchronize srcu in install_new_memslots.

	 *

	 * When modifying memslots outside of the slots_lock, must be held

	 * before reading the pointer to the current memslots until after all

	 * changes to those memslots are complete.

	 *

	 * These rules ensure that installing new memslots does not lose

	 * changes made to the previous memslots.

		/*

		 * Note, the INVALID flag needs to be in the appropriate entry

		 * in the freshly allocated memslots, not in @old or @new.

		/*

		 * We can re-use the memory from the old memslots.

		 * It will be overwritten with a copy of the new memslots

		 * after reacquiring the slots_arch_lock below.

		/* From this point no new shadow pages pointing to a deleted,

		 * or moved, memslot will be created.

		 *

		 * validation of sp->gfn happens in:

		 *	- gfn_to_hva (kvm_read_guest, gfn_to_pfn)

		 *	- kvm_is_visible_gfn (mmu_check_root)

 Released in install_new_memslots. */

		/*

		 * The arch-specific fields of the memslots could have changed

		 * between releasing the slots_arch_lock in

		 * install_new_memslots and here, so get a fresh copy of the

		 * slots.

	/*

	 * This is only for debugging purpose; it should never be referenced

	 * for a removed memslot.

/*

 * Allocate some memory and give it an address in the guest physical address

 * space.

 *

 * Discontiguous memory is allowed, mostly for framebuffers.

 *

 * Must be called holding kvm->slots_lock for write.

 General sanity checks */

 We can read the guest memory with __xxx_user() later on. */

	/*

	 * Make a full copy of the old memslot, the pointer will become stale

	 * when the memslots are re-sorted by update_memslots(), and the old

	 * memslot needs to be referenced after calling update_memslots(), e.g.

	 * to free its resources and for arch specific behavior.

 Modify an existing slot. */

 Nothing to change. */

 Copy dirty_bitmap and arch from the current memslot. */

 Check for overlaps */

 Allocate/free page dirty bitmap as needed */

/**

 * kvm_get_dirty_log - get a snapshot of dirty pages

 * @kvm:	pointer to kvm instance

 * @log:	slot id and address to which we copy the log

 * @is_dirty:	set to '1' if any dirty pages were found

 * @memslot:	set to the associated memslot, always valid on success

 Dirty ring tracking is exclusive to dirty log tracking */

 CONFIG_KVM_GENERIC_DIRTYLOG_READ_PROTECT */

/**

 * kvm_get_dirty_log_protect - get a snapshot of dirty pages

 *	and reenable dirty page tracking for the corresponding pages.

 * @kvm:	pointer to kvm instance

 * @log:	slot id and address to which we copy the log

 *

 * We need to keep it in mind that VCPU threads can write to the bitmap

 * concurrently. So, to avoid losing track of dirty pages we keep the

 * following order:

 *

 *    1. Take a snapshot of the bit and clear it if needed.

 *    2. Write protect the corresponding page.

 *    3. Copy the snapshot to the userspace.

 *    4. Upon return caller flushes TLB's if needed.

 *

 * Between 2 and 4, the guest may write to the page using the remaining TLB

 * entry.  This is not a problem because the page is reported dirty using

 * the snapshot taken before and step 4 ensures that writes done after

 * exiting to userspace will be logged for the next call.

 *

 Dirty ring tracking is exclusive to dirty log tracking */

		/*

		 * Unlike kvm_get_dirty_log, we always return false in *flush,

		 * because no flush is needed until KVM_CLEAR_DIRTY_LOG.  There

		 * is some code duplication between this function and

		 * kvm_get_dirty_log, but hopefully all architecture

		 * transition to kvm_get_dirty_log_protect and kvm_get_dirty_log

		 * can be eliminated.

/**

 * kvm_vm_ioctl_get_dirty_log - get and clear the log of dirty pages in a slot

 * @kvm: kvm instance

 * @log: slot id and address to which we copy the log

 *

 * Steps 1-4 below provide general overview of dirty page logging. See

 * kvm_get_dirty_log_protect() function description for additional details.

 *

 * We call kvm_get_dirty_log_protect() to handle steps 1-3, upon return we

 * always flush the TLB (step 4) even if previous step failed  and the dirty

 * bitmap may be corrupt. Regardless of previous outcome the KVM logging API

 * does not preclude user space subsequent dirty log read. Flushing TLB ensures

 * writes will be marked dirty for next log read.

 *

 *   1. Take a snapshot of the bit and clear it if needed.

 *   2. Write protect the corresponding page.

 *   3. Copy the snapshot to the userspace.

 *   4. Flush TLB's if needed.

/**

 * kvm_clear_dirty_log_protect - clear dirty bits in the bitmap

 *	and reenable dirty page tracking for the corresponding pages.

 * @kvm:	pointer to kvm instance

 * @log:	slot id and address from which to fetch the bitmap of dirty pages

 Dirty ring tracking is exclusive to dirty log tracking */

		/*

		 * mask contains the bits that really have been cleared.  This

		 * never includes any bits beyond the length of the memslot (if

		 * the length is not aligned to 64 pages), therefore it is not

		 * a problem if userspace sets them in log->dirty_bitmap.

 CONFIG_KVM_GENERIC_DIRTYLOG_READ_PROTECT */

	/*

	 * Fall back to searching all memslots. We purposely use

	 * search_memslots() instead of __gfn_to_memslot() to avoid

	 * thrashing the VM-wide last_used_index in kvm_memslots.

/*

 * Return the hva of a @gfn and the R/W attribute if possible.

 *

 * @slot: the kvm_memory_slot which contains @gfn

 * @gfn: the gfn to be translated

 * @writable: used to return the read/write attribute of the @slot if the hva

 * is valid and @writable is not NULL

/*

 * The fast path to get the writable pfn which will be stored in @pfn,

 * true indicates success, otherwise false is returned.  It's also the

 * only part that runs if we can in atomic context.

	/*

	 * Fast pin a writable pfn only if it is a write fault request

	 * or the caller allows to map a writable pfn for a read fault

	 * request.

/*

 * The slow path to get the pfn of the specified host virtual address,

 * 1 indicates success, -errno is returned if error is detected.

 map read fault as writable if possible */

		/*

		 * get_user_pages fails for VM_IO and VM_PFNMAP vmas and does

		 * not call the fault handler, so do it here.

	/*

	 * Get a reference here because callers of *hva_to_pfn* and

	 * *gfn_to_pfn* ultimately call kvm_release_pfn_clean on the

	 * returned pfn.  This is only needed if the VMA has VM_MIXEDMAP

	 * set, but the kvm_try_get_pfn/kvm_release_pfn_clean pair will

	 * simply do nothing for reserved pfns.

	 *

	 * Whoever called remap_pfn_range is also going to call e.g.

	 * unmap_mapping_range before the underlying pages are freed,

	 * causing a call to our MMU notifier.

	 *

	 * Certain IO or PFNMAP mappings can be backed with valid

	 * struct pages, but be allocated without refcounting e.g.,

	 * tail pages of non-compound higher order allocations, which

	 * would then underflow the refcount when the caller does the

	 * required put_page. Don't allow those pages here.

/*

 * Pin guest page in memory and return its pfn.

 * @addr: host virtual address which maps memory to the guest

 * @atomic: whether this function can sleep

 * @async: whether this function need to wait IO complete if the

 *         host page is not in the memory

 * @write_fault: whether we should get a writable host page

 * @writable: whether it allows to map a writable host page for !@write_fault

 *

 * The function will map a writable host page for these two cases:

 * 1): @write_fault = true

 * 2): @write_fault = false && @writable, @writable will tell the caller

 *     whether the mapping is writable.

 we can do it either atomically or asynchronously, not both */

 Do not map writable pfn in the readonly memslot. */

 Update ghc->generation before performing any error checks. */

	/*

	 * If the requested region crosses two memslots, we still

	 * verify that the entire region is valid here.

 Use the slow path for cross page reads and writes. */

	/*

	 * This does a lockless modification of ->real_blocked, which is fine

	 * because, only current can change ->real_blocked and all readers of

	 * ->real_blocked don't care as long ->real_blocked is always a subset

	 * of ->blocked.

/*

 * The vCPU has executed a HLT instruction with in-kernel mode enabled.

			/*

			 * This sets KVM_REQ_UNHALT if an interrupt

			 * arrives.

 we had a long block, shrink polling */

 we had a short halt and our poll time is too small */

/*

 * Kick a sleeping VCPU, or a guest VCPU in guest mode, into host kernel mode.

	/*

	 * Note, the vCPU could get migrated to a different pCPU at any point

	 * after kvm_arch_vcpu_should_kick(), which could result in sending an

	 * IPI to the previous pCPU.  But, that's ok because the purpose of the

	 * IPI is to force the vCPU to leave IN_GUEST_MODE, and migrating the

	 * vCPU also requires it to leave IN_GUEST_MODE.

 !CONFIG_S390 */

/*

 * Helper that checks whether a VCPU is eligible for directed yield.

 * Most eligible candidate to yield is decided by following heuristics:

 *

 *  (a) VCPU which has not done pl-exit or cpu relax intercepted recently

 *  (preempted lock holder), indicated by @in_spin_loop.

 *  Set at the beginning and cleared at the end of interception/PLE handler.

 *

 *  (b) VCPU which has done pl-exit/ cpu relax intercepted but did not get

 *  chance last time (mostly it has become eligible now since we have probably

 *  yielded to lockholder in last iteration. This is done by toggling

 *  @dy_eligible each time a VCPU checked for eligibility.)

 *

 *  Yielding to a recently pl-exited/cpu relax intercepted VCPU before yielding

 *  to preempted lock-holder could result in wrong VCPU selection and CPU

 *  burning. Giving priority for a potential lock-holder increases lock

 *  progress.

 *

 *  Since algorithm is based on heuristics, accessing another VCPU data without

 *  locking does not harm. It may result in trying to yield to  same VCPU, fail

 *  and continue with next VCPU and so on.

/*

 * Unlike kvm_arch_vcpu_runnable, this function is called outside

 * a vcpu_load/vcpu_put pair.  However, for most architectures

 * kvm_arch_vcpu_runnable does not require vcpu_load.

	/*

	 * We boost the priority of a VCPU that is runnable but not

	 * currently running, because it got preempted by something

	 * else and called schedule in __vcpu_run.  Hopefully that

	 * VCPU is holding the lock that we need and will release it.

	 * We approximate round-robin by starting at the last boosted VCPU.

 Ensure vcpu is not eligible during next spinloop */

/*

 * Allocates an inode for the vcpu.

/*

 * Creates some virtual cpus.  Good luck creating more than one.

 Fill the stats id string for the vcpu */

 Now it's all set up, let userspace reach it */

	/*

	 * Pairs with smp_rmb() in kvm_get_vcpu.  Write kvm->vcpus

	 * before kvm->online_vcpu's incremented value.

	/*

	 * Some architectures have vcpu ioctls that are asynchronous to vcpu

	 * execution; mutex_lock() would break them.

 The thread running this VCPU changed. */

 the size should be power of 2 */

 Should be bigger to keep the reserved entries, or a page */

 We only allow it to set once */

 We don't allow to change this value after vcpu created */

 CONFIG_HAVE_KVM_IRQ_ROUTING */

 one bit per page */

 one bit per page */

	/*

	 * Don't call kvm_put_kvm anymore at this point; file->f_op is

	 * already set, with ->release() being kvm_vm_release().  In error

	 * cases it will be called by the final fput(file) and will take

	 * care of doing kvm_put_kvm(kvm).

 struct kvm_run */

 pio data page */

 coalesced mmio ring page */

	/*

	 * Some (well, at least mine) BIOSes hang on reboot if

	 * in vmx root mode.

	 *

	 * And Intel TXT required VMX off for all cpu when system shutdown.

	/* If r2->len == 0, match the exact address.  If r2->len != 0,

	 * accept any overlapping write.  Any order is acceptable for

	 * overlapping ranges, because kvm_io_bus_get_first_dev ensures

	 * we process all of them.

 kvm_io_bus_write - called under kvm->slots_lock */

 kvm_io_bus_write_cookie - called under kvm->slots_lock */

 First try the device referenced by cookie. */

	/*

	 * cookie contained garbage; fall back to search and return the

	 * correct cookie value.

 kvm_io_bus_read - called under kvm->slots_lock */

 Caller must hold slots_lock. */

 exclude ioeventfd which is limited by maximum fd */

 Destroy the old bus _after_ installing the (null) bus. */

	/*

	 * The debugfs files are a reference to the kvm struct which

        * is still valid when kvm_destroy_vm is called.  kvm_get_kvm_safe

        * avoids the race between open and the removal of the debugfs directory.

 no need for checks, since we are adding at most only 5 keys */

/**

 * kvm_get_running_vcpu - get the vcpu running on the current CPU.

 *

 * We can disable preemption locally around accessing the per-CPU variable,

 * and use the resolved vcpu pointer after enabling preemption again,

 * because even if the current thread is migrated to another CPU, reading

 * the per-CPU value later will give us the same value as we update the

 * per-CPU variable in the preempt notifier handlers.

/**

 * kvm_get_running_vcpus - get the per-CPU array of currently running vcpus.

	/*

	 * kvm_arch_init makes sure there's at most one caller

	 * for architectures that support multiple implementations,

	 * like intel and amd on x86.

	 * kvm_arch_init must be called before kvm_irqfd_init to avoid creating

	 * conflicts in case kvm is already setup for another implementation.

 A kmem cache lets us meet the alignment requirements of fx_save. */

	/*

	 * The init_context is allocated on the stack of the parent thread, so

	 * we have to locally copy anything that is needed beyond initialization

 kthread_park(current) is never supposed to return an error */

 Wait to be woken up by the spawner before proceeding. */

 kthread_run is never supposed to return NULL */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * VFIO-KVM bridge pseudo device

 *

 * Copyright (C) 2013 Red Hat, Inc.  All rights reserved.

 *     Author: Alex Williamson <alex.williamson@redhat.com>

/*

 * Groups can use the same or different IOMMU domains.  If the same then

 * adding a new group may change the coherency of groups we've previously

 * been told about.  We don't want to care about any of that so we retest

 * each group and bail as soon as we find one that's noncoherent.  This

 * means we only ever [un]register_noncoherent_dma once for the whole device.

 CONFIG_SPAPR_TCE_IOMMU */

 alloc by kvm_ioctl_create_device, free by .destroy */

 Only one VFIO "device" per VM */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * irqchip.c: Common API for in kernel interrupt controllers

 * Copyright (c) 2007, Intel Corporation.

 * Copyright 2010 Red Hat, Inc. and/or its affiliates.

 * Copyright (c) 2013, Alexander Graf <agraf@suse.de>

 *

 * This file is derived from virt/kvm/irq_comm.c.

 *

 * Authors:

 *   Yaozu (Eddie) Dong <Eddie.dong@intel.com>

 *   Alexander Graf <agraf@suse.de>

/*

 * Return value:

 *  < 0   Interrupt was ignored (masked or not delivered for other reasons)

 *  = 0   Interrupt was coalesced (previous irq is still pending)

 *  > 0   Number of CPUs interrupt was delivered to

	/* Not possible to detect if the guest uses the PIC or the

	 * IOAPIC.  So set the bit in both. The guest will ignore

	 * writes to the unused one.

	/* Called only during vm destruction. Nobody can use the pointer

	/*

	 * Do not allow GSI to be mapped to the same irqchip more than once.

	 * Allow only one to one mapping between GSI and non-irqchip routing.

 SPDX-License-Identifier: GPL-2.0-only */

/*

 * KVM dirty ring implementation

 *

 * Copyright 2019 Red Hat, Inc.

 This is only needed to make compilers happy */

 Update the flags to reflect that this GFN is reset */

		/*

		 * Try to coalesce the reset operations when the guest is

		 * scanning pages in the same slot.

 Backwards visit, careful about overflows!  */

 It should never get full */

	/*

	 * Make sure the data is filled in before we publish this to

	 * the userspace program.  There's no paired kernel-side reader.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * kvm eventfd support - use eventfd objects to signal various KVM events

 *

 * Copyright 2009 Novell.  All Rights Reserved.

 * Copyright 2010 Red Hat, Inc. and/or its affiliates.

 *

 * Author:

 *	Gregory Haskins <ghaskins@novell.com>

/*

 * Since resampler irqfds share an IRQ source ID, we de-assert once

 * then notify all of the resampler irqfds using this GSI.  We can't

 * do multiple de-asserts or we risk racing with incoming re-asserts.

/*

 * Race-free decouple logic (ordering is critical)

 Make sure irqfd has been initialized in assign path. */

	/*

	 * Synchronize with the wait-queue and unhook ourselves to prevent

	 * further events.

	/*

	 * We know no new events will be scheduled at this point, so block

	 * until all previously outstanding events have completed

	/*

	 * It is now safe to release the object's resources

 assumes kvm->irqfds.lock is held */

/*

 * Mark the irqfd as inactive and schedule it for removal

 *

 * assumes kvm->irqfds.lock is held

/*

 * Called with wqh->lock held and interrupts disabled

 An event has been signaled, inject an interrupt */

 The eventfd is closing, detach from KVM */

		/*

		 * We must check if someone deactivated the irqfd before

		 * we could acquire the irqfds.lock since the item is

		 * deactivated from the KVM side before it is unhooked from

		 * the wait-queue.  If it is already deactivated, we can

		 * simply return knowing the other side will cleanup for us.

		 * We cannot race against the irqfd going away since the

		 * other side is required to acquire wqh->lock, which we hold

 Must be called under irqfds.lock */

	/*

	 * Install our own custom wake-up handling so we are notified via

	 * a callback whenever someone signals the underlying eventfd

 This fd is used for another irq already. */

	/*

	 * Check if there was an event already pending on the eventfd

	 * before we registered, and trigger it as if we didn't miss it.

	/*

	 * do not drop the file until the irqfd is fully initialized, otherwise

	 * we might race against the EPOLLHUP

/*

 * shutdown any irqfd's that match fd+gsi

			/*

			 * This clearing of irq_entry.type is needed for when

			 * another thread calls kvm_irq_routing_update before

			 * we flush workqueue below (we synchronize with

			 * kvm_irq_routing_update using irqfds.lock).

	/*

	 * Block until we know all outstanding shutdown jobs have completed

	 * so that we guarantee there will not be any more interrupts on this

	 * gsi once this deassign function returns.

/*

 * This function is called as the kvm VM fd is being released. Shutdown all

 * irqfds that still remain open

	/*

	 * Block until we know all outstanding shutdown jobs have completed

	 * since we do not take a kvm* reference.

/*

 * Take note of a change in irq routing.

 * Caller must invoke synchronize_srcu(&kvm->irq_srcu) afterwards.

 Under irqfds.lock, so can read irq_entry safely */

/*

 * create a host-wide workqueue for issuing deferred shutdown requests

 * aggregated from all vm* instances. We need our own isolated

 * queue to ease flushing work items when a VM exits.

/*

 * --------------------------------------------------------------------

 * ioeventfd: translate a PIO/MMIO memory write to an eventfd signal.

 *

 * userspace can register a PIO/MMIO address with an eventfd for receiving

 * notification when the memory has been touched.

 * --------------------------------------------------------------------

 address must be precise for a hit */

 length = 0 means only look at the address, so always a hit */

 address-range must be precise for a hit */

 all else equal, wildcard is always a hit */

 otherwise, we have to actually compare the data */

 MMIO/PIO writes trigger an event if the addr/val match */

/*

 * This function is called as KVM is completely shutting down.  We do not

 * need to worry about locking just nuke anything we have as quickly as possible

 assumes kvm->slots_lock held */

 The datamatch feature is optional, otherwise this is a wildcard */

 Verify that there isn't a match already */

 must be natural-word sized, or 0 to ignore length */

 check for range overflow */

 check for extra flags that we don't understand */

 ioeventfd with no length can't be combined with DATAMATCH */

	/* When length is ignored, MMIO is also put on a separate bus, for

	 * faster lookups.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * KVM binary statistics interface implementation

 *

 * Copyright 2021 Google LLC

/**

 * kvm_stats_read() - Common function to read from the binary statistics

 * file descriptor.

 *

 * @id: identification string of the stats

 * @header: stats header for a vm or a vcpu

 * @desc: start address of an array of stats descriptors for a vm or a vcpu

 * @stats: start address of stats data block for a vm or a vcpu

 * @size_stats: the size of stats data block pointed by @stats

 * @user_buffer: start address of userspace buffer

 * @size: requested read size from userspace

 * @offset: the start position from which the content will be read for the

 *          corresponding vm or vcp file descriptor

 *

 * The file content of a vm/vcpu file descriptor is now defined as below:

 * +-------------+

 * |   Header    |

 * +-------------+

 * |  id string  |

 * +-------------+

 * | Descriptors |

 * +-------------+

 * | Stats Data  |

 * +-------------+

 * Although this function allows userspace to read any amount of data (as long

 * as in the limit) from any position, the typical usage would follow below

 * steps:

 * 1. Read header from offset 0. Get the offset of descriptors and stats data

 *    and some other necessary information. This is a one-time work for the

 *    lifecycle of the corresponding vm/vcpu stats fd.

 * 2. Read id string from its offset. This is a one-time work for the lifecycle

 *    of the corresponding vm/vcpu stats fd.

 * 3. Read descriptors from its offset and discover all the stats by parsing

 *    descriptors. This is a one-time work for the lifecycle of the

 *    corresponding vm/vcpu stats fd.

 * 4. Periodically read stats data from its offset using pread.

 *

 * Return: the number of bytes that has been successfully read

	/*

	 * Copy kvm stats header.

	 * The header is the first block of content userspace usually read out.

	 * The pos is 0 and the copylen and remain would be the size of header.

	 * The copy of the header would be skipped if offset is larger than the

	 * size of header. That usually happens when userspace reads stats

	 * descriptors and stats data.

	/*

	 * Copy kvm stats header id string.

	 * The id string is unique for every vm/vcpu, which is stored in kvm

	 * and kvm_vcpu structure.

	 * The id string is part of the stat header from the perspective of

	 * userspace, it is usually read out together with previous constant

	 * header part and could be skipped for later descriptors and stats

	 * data readings.

	/*

	 * Copy kvm stats descriptors.

	 * The descriptors copy would be skipped in the typical case that

	 * userspace periodically read stats data, since the pos would be

	 * greater than the end address of descriptors

	 * (header->header.desc_offset + size_desc) causing copylen <= 0.

 Copy kvm stats values */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * IRQ offload/bypass manager

 *

 * Copyright (C) 2015 Red Hat, Inc.

 * Copyright (c) 2015 Linaro Ltd.

 *

 * Various virtualization hardware acceleration techniques allow bypassing or

 * offloading interrupts received from devices around the host kernel.  Posted

 * Interrupts on Intel VT-d systems can allow interrupts to be received

 * directly by a virtual machine.  ARM IRQ Forwarding allows forwarded physical

 * interrupts to be directly deactivated by the guest.  This manager allows

 * interrupt producers and consumers to find each other to enable this sort of

 * bypass.

 @lock must be held when calling connect */

 @lock must be held when calling disconnect */

/**

 * irq_bypass_register_producer - register IRQ bypass producer

 * @producer: pointer to producer structure

 *

 * Add the provided IRQ producer to the list of producers and connect

 * with any matching token found on the IRQ consumers list.

/**

 * irq_bypass_unregister_producer - unregister IRQ bypass producer

 * @producer: pointer to producer structure

 *

 * Remove a previously registered IRQ producer from the list of producers

 * and disconnect it from any connected IRQ consumer.

 nothing in the list anyway */

/**

 * irq_bypass_register_consumer - register IRQ bypass consumer

 * @consumer: pointer to consumer structure

 *

 * Add the provided IRQ consumer to the list of consumers and connect

 * with any matching token found on the IRQ producer list.

/**

 * irq_bypass_unregister_consumer - unregister IRQ bypass consumer

 * @consumer: pointer to consumer structure

 *

 * Remove a previously registered IRQ consumer from the list of consumers

 * and disconnect it from any connected IRQ producer.

 nothing in the list anyway */

 SPDX-License-Identifier: GPL-2.0-or-later

/* System hash blacklist.

 *

 * Copyright (C) 2016 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/*

 * The description must be a type prefix, a colon and then an even number of

 * hex digits.  The hash is kept in the description.

/*

 * The hash to be blacklisted is expected to be in the description.  There will

 * be no payload.

/**

 * mark_hash_blacklisted - Add a hash to the system blacklist

 * @hash: The hash as a hex string with a type prefix (eg. "tbs:23aa429783")

/**

 * is_hash_blacklisted - Determine if a hash is blacklisted

 * @hash: The hash to be checked as a binary blob

 * @hash_len: The length of the binary hash

 * @type: Type of hash

/**

 * add_key_to_revocation_list - Add a revocation certificate to the blacklist

 * @data: The data blob containing the certificate

 * @size: The size of data blob

/**

 * is_key_on_revocation_list - Determine if the key for a PKCS#7 message is revoked

 * @pkcs7: The PKCS#7 message to check

/*

 * Initialise the blacklist

/*

 * Must be initialised before we try and load the keys into the keyring.

/*

 * Load the compiled-in list of revocation X.509 certificates.

 SPDX-License-Identifier: GPL-2.0-or-later

/* System trusted keyring for trusted public keys

 *

 * Copyright (C) 2012 Red Hat, Inc. All Rights Reserved.

 * Written by David Howells (dhowells@redhat.com)

/**

 * restrict_link_to_builtin_trusted - Restrict keyring addition by built in CA

 *

 * Restrict the addition of keys into a keyring based on the key-to-be-added

 * being vouched for by a key in the built in system keyring.

/**

 * restrict_link_by_builtin_and_secondary_trusted - Restrict keyring

 *   addition by both builtin and secondary keyrings

 *

 * Restrict the addition of keys into a keyring based on the key-to-be-added

 * being vouched for by a key in either the built-in or the secondary system

 * keyrings.

	/* If we have a secondary trusted keyring, then that contains a link

	 * through to the builtin keyring and the search will follow that link.

 Allow the builtin keyring to be added to the secondary */

/**

 * Allocate a struct key_restriction for the "builtin and secondary trust"

 * keyring. Only for use in system_trusted_keyring_init().

/*

 * Create the trusted keyrings

/*

 * Must be initialised before we try and load the keys into the keyring.

/*

 * Load the compiled-in list of X.509 certificates.

/**

 * verify_pkcs7_message_sig - Verify a PKCS#7-based signature on system data.

 * @data: The data to be verified (NULL if expecting internal data).

 * @len: Size of @data.

 * @pkcs7: The PKCS#7 message that is the signature.

 * @trusted_keys: Trusted keys to use (NULL for builtin trusted keys only,

 *					(void *)1UL for all trusted keys).

 * @usage: The use to which the key is being put.

 * @view_content: Callback to gain access to content.

 * @ctx: Context for callback.

 The data should be detached - so we need to supply it. */

/**

 * verify_pkcs7_signature - Verify a PKCS#7-based signature on system data.

 * @data: The data to be verified (NULL if expecting internal data).

 * @len: Size of @data.

 * @raw_pkcs7: The PKCS#7 message that is the signature.

 * @pkcs7_len: The size of @raw_pkcs7.

 * @trusted_keys: Trusted keys to use (NULL for builtin trusted keys only,

 *					(void *)1UL for all trusted keys).

 * @usage: The use to which the key is being put.

 * @view_content: Callback to gain access to content.

 * @ctx: Context for callback.

 CONFIG_SYSTEM_DATA_VERIFICATION */

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0

 SPDX-License-Identifier: GPL-2.0-or-later

		/* Each cert begins with an ASN.1 SEQUENCE tag and must be more

		 * than 256 bytes in size.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Advanced Linux Sound Architecture

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Linux driver model AC97 bus interface

 *

 * Author:	Nicolas Pitre

 * Created:	Jan 14, 2005

 * Copyright:	(C) MontaVista Software Inc.

/*

 * snd_ac97_check_id() - Reads and checks the vendor ID of the device

 * @ac97: The AC97 device to check

 * @id: The ID to compare to

 * @id_mask: Mask that is applied to the device ID before comparing to @id

 *

 * If @id is 0 this function returns true if the read device vendor ID is

 * a valid ID. If @id is non 0 this functions returns true if @id

 * matches the read vendor ID. Otherwise the function returns false.

/**

 * snd_ac97_reset() - Reset AC'97 device

 * @ac97: The AC'97 device to reset

 * @try_warm: Try a warm reset first

 * @id: Expected device vendor ID

 * @id_mask: Mask that is applied to the device ID before comparing to @id

 *

 * This function resets the AC'97 device. If @try_warm is true the function

 * first performs a warm reset. If the warm reset is successful the function

 * returns 1. Otherwise or if @try_warm is false the function issues cold reset

 * followed by a warm reset. If this is successful the function returns 0,

 * otherwise a negative error code. If @id is 0 any valid device ID will be

 * accepted, otherwise only the ID that matches @id and @id_mask is accepted.

/*

 * Let drivers decide whether they want to support given codec from their

 * probe method. Drivers have direct access to the struct snd_ac97

 * structure and may  decide based on the id field amongst other things.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *	Sound core.  This file is composed of two parts.  sound_class

 *	which is common to both OSS and ALSA and OSS sound core which

 *	is used OSS or emulation of it.

/*

 * First, the common part.

/*

 *	OSS sound core handling. Breaks out sound functions to submodules

 *	

 *	Author:		Alan Cox <alan@lxorguk.ukuu.org.uk>

 *

 *	Fixes:

 *

 *                         --------------------

 * 

 *	Top level handler for the sound subsystem. Various devices can

 *	plug into this. The fact they don't all go via OSS doesn't mean 

 *	they don't have to implement the OSS API. There is a lot of logic

 *	to keeping much of the OSS weight out of the code in a compatibility

 *	module, but it's up to the driver to rember to load it...

 *

 *	The code provides a set of functions for registration of devices

 *	by type. This is done rather than providing a single call so that

 *	we can hide any future changes in the internals (eg when we go to

 *	32bit dev_t) from the modules and their interface.

 *

 *	Secondly we need to allocate the dsp, dsp16 and audio devices as

 *	one. Thus we misuse the chains a bit to simplify this.

 *

 *	Thirdly to make it more fun and for 2.3.x and above we do all

 *	of this using fine grained locking.

 *

 *	FIXME: we have to resolve modules and fine grained load/unload

 *	locking at some point in 2.3.x.

/*

 * By default, OSS sound_core claims full legacy minor range (0-255)

 * of SOUND_MAJOR to trap open attempts to any sound minor and

 * requests modules using custom sound-slot/service-* module aliases.

 * The only benefit of doing this is allowing use of custom module

 * aliases instead of the standard char-major-* ones.  This behavior

 * prevents alternative OSS implementation and is scheduled to be

 * removed.

 *

 * CONFIG_SOUND_OSS_CORE_PRECLAIM and soundcore.preclaim_oss kernel

 * parameter are added to allow distros and developers to try and

 * switch to alternative implementations without needing to rebuild

 * the kernel in the meantime.  If preclaim_oss is non-zero, the

 * kernel will behave the same as before.  All SOUND_MAJOR minors are

 * preclaimed and the custom module aliases along with standard chrdev

 * ones are emitted if a missing device is opened.  If preclaim_oss is

 * zero, sound_core only grabs what's actually in use and for missing

 * devices only the standard chrdev aliases are requested.

 *

 * All these clutters are scheduled to be removed along with

 * sound-slot/service-* module aliases.

 We must have an owner or the module locking fails */

/*

 *	Low level list operator. Scan the ordered list, find a hole and

 *	join into it. Called with the lock asserted

 first free */

 Found a hole ? */

	/*

	 *	Fill it in

	/*

	 *	Link it

/*

 *	Remove a node from the chain. Called with the lock asserted

/*

 *	This lock guards the sound loader list.

/*

 *	Allocate the controlling structure and add it to the sound driver

 *	list. Acquires locks as needed

		/*

		 * Something else might have grabbed the minor.  If

		 * first free slot is requested, rescan with @low set

		 * to the next unit; otherwise, -EBUSY.

/*

 *	Remove a unit. Acquires locks as needed. The drivers MUST have

 *	completed the removal before their file operations become

 *	invalid.

/*

 *	Allocations

 *

 *	0	*16		Mixers

 *	1	*8		Sequencers

 *	2	*16		Midi

 *	3	*16		DSP

 *	4	*16		SunDSP

 *	5	*16		DSP16

 *	6	--		sndstat (obsolete)

 *	7	*16		unused

 *	8	--		alternate sequencer (see above)

 *	9	*16		raw synthesizer access

 *	10	*16		unused

 *	11	*16		unused

 *	12	*16		unused

 *	13	*16		unused

 *	14	*16		unused

 *	15	*16		unused

/**

 *	register_sound_special_device - register a special sound node

 *	@fops: File operations for the driver

 *	@unit: Unit number to allocate

 *      @dev: device pointer

 *

 *	Allocate a special sound device by minor number from the sound

 *	subsystem.

 *

 *	Return: The allocated number is returned on success. On failure,

 *	a negative error code is returned.

/**

 *	register_sound_mixer - register a mixer device

 *	@fops: File operations for the driver

 *	@dev: Unit number to allocate

 *

 *	Allocate a mixer device. Unit is the number of the mixer requested.

 *	Pass -1 to request the next free mixer unit.

 *

 *	Return: On success, the allocated number is returned. On failure,

 *	a negative error code is returned.

/*

 *	DSP's are registered as a triple. Register only one and cheat

 *	in open - see below.

/**

 *	register_sound_dsp - register a DSP device

 *	@fops: File operations for the driver

 *	@dev: Unit number to allocate

 *

 *	Allocate a DSP device. Unit is the number of the DSP requested.

 *	Pass -1 to request the next free DSP unit.

 *

 *	This function allocates both the audio and dsp device entries together

 *	and will always allocate them as a matching pair - eg dsp3/audio3

 *

 *	Return: On success, the allocated number is returned. On failure,

 *	a negative error code is returned.

/**

 *	unregister_sound_special - unregister a special sound device

 *	@unit: unit number to allocate

 *

 *	Release a sound device that was allocated with

 *	register_sound_special(). The unit passed is the return value from

 *	the register function.

/**

 *	unregister_sound_mixer - unregister a mixer

 *	@unit: unit number to allocate

 *

 *	Release a sound device that was allocated with register_sound_mixer().

 *	The unit passed is the return value from the register function.

/**

 *	unregister_sound_dsp - unregister a DSP device

 *	@unit: unit number to allocate

 *

 *	Release a sound device that was allocated with register_sound_dsp().

 *	The unit passed is the return value from the register function.

 *

 *	Both of the allocated units are released together automatically.

 dsp/audio/dsp16 */

		/*

		 *  Please, don't change this order or code.

		 *  For ALSA slot means soundcard and OSS emulation code

		 *  comes as add-on modules which aren't depend on

		 *  ALSA toplevel modules for soundcards, thus we need

		 *  load them at first.	  [Jaroslav Kysela <perex@jcu.cz>]

		/*

		 * sound-slot/service-* module aliases are scheduled

		 * for removal in favor of the standard char-major-*

		 * module aliases.  For the time being, generate both

		 * the legacy and standard module aliases to ease

		 * transition.

		/*

		 * We rely upon the fact that we can't be unloaded while the

		 * subdriver is there.

	/* We have nothing to really do here - we know the lists must be

 CONFIG_SOUND_OSS_CORE */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/sound/oss/dmasound/dmasound_paula.c

 *

 *  Amiga `Paula' DMA Sound Driver

 *

 *  See linux/sound/oss/dmasound/dmasound_core.c for copyright and credits

 *  prior to 28/01/2001

 *

 *  28/01/2001 [0.1] Iain Sandoe

 *		     - added versioning

 *		     - put in and populated the hardware_afmts field.

 *             [0.2] - put in SNDCTL_DSP_GETCAPS value.

 *	       [0.3] - put in constraint on state buffer usage.

 *	       [0.4] - put in default hard/soft settings

   /*

    *	The minimum period for audio depends on htotal (for OCS/ECS/AGA)

    *	(Imported from arch/m68k/amiga/amisound.c)

   /*

    *	amiga_mksound() should be able to restore the period after beeping

    *	(Imported from arch/m68k/amiga/amisound.c)

   /*

    *	Audio DMA masks

    /*

     *  Helper pointers for 16(14)-bit sound

** Low level stuff *********************************************************/

    /*

     *  Heartbeat interferes with sound since the 7 kHz low-pass filter and the

     *  power LED are controlled by the same line.

 !CONFIG_HEARTBEAT */

 !CONFIG_HEARTBEAT */

** Mid level stuff *********************************************************/

** Translations ************************************************************/

/* ++TeSche: radically changed for new expanding purposes...

 *

 * These two routines now deal with copying/expanding/translating the samples

 * from user space into our buffer at the right frequency. They take care about

 * how much data there's actually to read, how much buffer space there is and

 * to convert samples into the right frequency/encoding. They will only work on

 * complete samples so it may happen they leave some bytes in the input stream

 * if the user didn't write a multiple of the current sample size. They both

 * return the number of bytes they've used from both streams so you may detect

 * such a situation. Luckily all programs should be able to cope with that.

 *

 * I think I've optimized anything as far as one can do in plain C, all

 * variables should fit in registers and the loops are really short. There's

 * one loop for every possible situation. Writing a more generalized and thus

 * parameterized loop would only produce slower code. Feel free to optimize

 * this in assembler if you like. :)

 *

 * I think these routines belong here because they're not yet really hardware

 * independent, especially the fact that the Falcon can play 16bit samples

 * only in stereo is hardcoded in both of them!

 *

 * ++geert: split in even more functions (one per format)

    /*

     *  Native format

    /*

     *  Copy and convert 8 bit data

    /*

     *  Copy and convert 16 bit data

** Low level stuff *********************************************************/

 turn off DMA for audio channels */

 Register interrupt handler. */

 turn off DMA for audio channels */

 release the interrupt */

 MODULE */

 turn off DMA for audio channels */

 we would need to squeeze the sound, but we won't do that */

 Amiga sound DMA supports 8bit and 16bit (pseudo 14 bit) modes */

 :-) */

	/* used by AmiPlay() if all doubts whether there really is something

	 * to be played are already wiped out.

 We can play pseudo 14-bit only with the maximum volume */

 we are being affected by the beeps */

 restoring volume here helps a bit */

 There's already a frame loaded */

 Increase threshold: frame 1 is already being played */

 Nothing to do */

		/* hmmm, the only existing frame is not

		 * yet filled and we're not syncing?

		/* Playing was interrupted and sq_reset() has already cleared

		 * the sq variables, so better don't do anything here.

 We've just finished a frame */

 Increase threshold: frame 1 is already being played */

 Shift the flags */

 No frame is playing, disable audio DMA */

 Try to play the next frame */

		/* Nothing to play anymore.

** Mid level stuff *********************************************************/

/*

 * /dev/mixer abstraction

 For pseudo 14bit */

 For pseudo 14bit */

** Machine definitions *****************************************************/

 MODULE */

 h'ware-supported formats *only* here */

 As per SNDCTL_DSP_GETCAPS */

** Config & Setup **********************************************************/

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/sound/oss/dmasound/dmasound_atari.c

 *

 *  Atari TT and Falcon DMA Sound Driver

 *

 *  See linux/sound/oss/dmasound/dmasound_core.c for copyright and credits

 *  prior to 28/01/2001

 *

 *  28/01/2001 [0.1] Iain Sandoe

 *		     - added versioning

 *		     - put in and populated the hardware_afmts field.

 *             [0.2] - put in SNDCTL_DSP_GETCAPS value.

 *  01/02/2001 [0.3] - put in default hard/soft settings.

 ++TeSche: used for Falcon */

 Balance factor for expanding (not volume!) */

 Data for expanding */

** Translations ************************************************************/

/* ++TeSche: radically changed for new expanding purposes...

 *

 * These two routines now deal with copying/expanding/translating the samples

 * from user space into our buffer at the right frequency. They take care about

 * how much data there's actually to read, how much buffer space there is and

 * to convert samples into the right frequency/encoding. They will only work on

 * complete samples so it may happen they leave some bytes in the input stream

 * if the user didn't write a multiple of the current sample size. They both

 * return the number of bytes they've used from both streams so you may detect

 * such a situation. Luckily all programs should be able to cope with that.

 *

 * I think I've optimized anything as far as one can do in plain C, all

 * variables should fit in registers and the loops are really short. There's

 * one loop for every possible situation. Writing a more generalized and thus

 * parameterized loop would only produce slower code. Feel free to optimize

 * this in assembler if you like. :)

 *

 * I think these routines belong here because they're not yet really hardware

 * independent, especially the fact that the Falcon can play 16bit samples

 * only in stereo is hardcoded in both of them!

 *

 * ++geert: split in even more functions (one per format)

** Low level stuff *********************************************************/

 MODULE */

** Mid level stuff *********************************************************/

** Translations ************************************************************/

 this should help gcc to stuff everything into registers */

 this should help gcc to stuff everything into registers */

 this should help gcc to stuff everything into registers */

 this should help gcc to stuff everything into registers */

 this should help gcc to stuff everything into registers */

 this should help gcc to stuff everything into registers */

 this should help gcc to stuff everything into registers */

** Low level stuff *********************************************************/

/*

 * Atari (TT/Falcon)

	/* Set up timer A. Timer A

	   will receive a signal upon end of playing from the sound

	   hardware. Furthermore Timer A is able to count events

	   and will cause an interrupt after a programmed number

	   of events. So all we need to keep the music playing is

	   to provide the sound hardware with new data upon

 ++roman: Stop timer before programming! */

 Cause interrupt after first event. */

 Turn on event counting. */

 Register interrupt handler. */

 Turn interrupt on. */

 stop timer */

 turn interrupt off */

 MODULE */

/*

 * TT

 mix in PSG signal 1:1 */

 search a frequency that fits into the allowed error range */

		/* this isn't as much useful for a TT than for a Falcon, but

		 * then it doesn't hurt very much to implement it for a TT too.

 we would need to squeeze the sound, but we won't do that */

 TT sound DMA supports only 8bit modes */

/*

 * Falcon

 stop playback, set sample rate 50kHz for PSG sound */

 STE compatible divider */

 no matrix inputs */

 no matrix outputs */

 connect ADC to DAC, disconnect matrix */

 ADC Input = PSG */

 search a frequency that fits into the allowed error range */

		/* if we will tolerate 3% error 8000Hz->8195Hz (2.38%) would

		 * be playable without expanding, but that now a kernel runtime

		 * option

 the Falcon can play 16bit samples only in stereo */

 we would need to squeeze the sound, but we won't do that */

 Setup Falcon sound DMA for playback */

 Timer A int at play end */

 play 1 track, track 1 */

 DMA(25MHz) --> DAC */

 connect matrix to DAC */

 ADC Input = Mic */

 Falcon sound DMA supports 8bit and 16bit modes */

 :-) */

/* This is for the Falcon output *attenuation* in 1.5dB steps,

 * i.e. output level from 0 to -22.5dB in -1.5dB steps.

	/* used by AtaPlay() if all doubts whether there really is something

	 * to be played are already wiped out.

 end might not be a legal virtual address. */

	/* Since only an even number of samples per frame can

	/* ++TeSche: Note that write_sq.active is no longer just a flag but

	 * holds the number of frames the DMA is currently programmed for

	 * instead, may be 0, 1 (currently being played) or 2 (pre-programmed).

	 *

	 * Changes done to write_sq.count and write_sq.active are a bit more

	 * subtle again so now I must admit I also prefer disabling the irq

	 * here rather than considering all possible situations. But the point

	 * is that disabling the irq doesn't have any bad influence on this

	 * version of the driver as we benefit from having pre-programmed the

	 * DMA wherever possible: There's no need to reload the DMA at the

	 * exact time of an interrupt but only at some time while the

	 * pre-programmed frame is playing!

 DMA is 'full' */

 nothing to do */

		/* looks like there's nothing 'in' the DMA yet, so try

		 * to put two frames into it (at least one is available).

			/* hmmm, the only existing frame is not

			 * yet filled and we're not syncing?

 no more frames */

			/* hmmm, there were two frames, but the second

			 * one is not yet filled and we're not syncing?

		/* there's already a frame being played so we may only stuff

		 * one new into the DMA, but even if this may be the last

		 * frame existing the previous one is still on write_sq.count.

			/* hmmm, the only existing frame is not

			 * yet filled and we're not syncing?

 ++TeSche: if you should want to test this... */

 simulate losing an interrupt */

		/* ++TeSche: Falcon only: ignore first irq because it comes

		 * immediately after starting a frame. after that, irqs come

		 * (almost) like on the TT.

		/* playing was interrupted and sq_reset() has already cleared

		 * the sq variables, so better don't do anything here.

	/* Probably ;) one frame is finished. Well, in fact it may be that a

	 * pre-programmed one is also finished because there has been a long

	 * delay in interrupt delivery and we've completely lost one, but

	 * there's no way to detect such a situation. In such a case the last

	 * frame will be played more than once and the situation will recover

	 * as soon as the irq gets through.

	/* At least one block of the queue is free now

	   so wake up a writing process blocked because

		/* We must be a bit carefully here: write_sq.count indicates the

		 * number of buffers used and not the number of frames to be

		 * played. If write_sq.count==1 and write_sq.active==1 that

		 * means the only remaining frame was already programmed

		 * earlier (and is currently running) so we mustn't call

		 * AtaPlay() here, otherwise we'll play one frame too much.

	/* We are not playing after AtaPlay(), so there

	   is nothing to play any more. Wake up a process

** Mid level stuff *********************************************************/

/*

 * /dev/mixer abstraction

 return set value */

** Machine definitions *****************************************************/

 MODULE */

 h'ware-supported formats *only* here */

 As per SNDCTL_DSP_GETCAPS */

 MODULE */

 h'ware-supported formats *only* here */

 As per SNDCTL_DSP_GETCAPS */

** Config & Setup **********************************************************/

/*

 *  linux/sound/oss/dmasound/dmasound_core.c

 *

 *

 *  OSS/Free compatible Atari TT/Falcon and Amiga DMA sound driver for

 *  Linux/m68k

 *  Extended to support Power Macintosh for Linux/ppc by Paul Mackerras

 *

 *  (c) 1995 by Michael Schlueter & Michael Marte

 *

 *  Michael Schlueter (michael@duck.syd.de) did the basic structure of the VFS

 *  interface and the u-law to signed byte conversion.

 *

 *  Michael Marte (marte@informatik.uni-muenchen.de) did the sound queue,

 *  /dev/mixer, /dev/sndstat and complemented the VFS interface. He would like

 *  to thank:

 *    - Michael Schlueter for initial ideas and documentation on the MFP and

 *	the DMA sound hardware.

 *    - Therapy? for their CD 'Troublegum' which really made me rock.

 *

 *  /dev/sndstat is based on code by Hannu Savolainen, the author of the

 *  VoxWare family of drivers.

 *

 *  This file is subject to the terms and conditions of the GNU General Public

 *  License.  See the file COPYING in the main directory of this archive

 *  for more details.

 *

 *  History:

 *

 *	1995/8/25	First release

 *

 *	1995/9/02	Roman Hodek:

 *			  - Fixed atari_stram_alloc() call, the timer

 *			    programming and several race conditions

 *	1995/9/14	Roman Hodek:

 *			  - After some discussion with Michael Schlueter,

 *			    revised the interrupt disabling

 *			  - Slightly speeded up U8->S8 translation by using

 *			    long operations where possible

 *			  - Added 4:3 interpolation for /dev/audio

 *

 *	1995/9/20	Torsten Scherer:

 *			  - Fixed a bug in sq_write and changed /dev/audio

 *			    converting to play at 12517Hz instead of 6258Hz.

 *

 *	1995/9/23	Torsten Scherer:

 *			  - Changed sq_interrupt() and sq_play() to pre-program

 *			    the DMA for another frame while there's still one

 *			    running. This allows the IRQ response to be

 *			    arbitrarily delayed and playing will still continue.

 *

 *	1995/10/14	Guenther Kelleter, Torsten Scherer:

 *			  - Better support for Falcon audio (the Falcon doesn't

 *			    raise an IRQ at the end of a frame, but at the

 *			    beginning instead!). uses 'if (codec_dma)' in lots

 *			    of places to simply switch between Falcon and TT

 *			    code.

 *

 *	1995/11/06	Torsten Scherer:

 *			  - Started introducing a hardware abstraction scheme

 *			    (may perhaps also serve for Amigas?)

 *			  - Can now play samples at almost all frequencies by

 *			    means of a more generalized expand routine

 *			  - Takes a good deal of care to cut data only at

 *			    sample sizes

 *			  - Buffer size is now a kernel runtime option

 *			  - Implemented fsync() & several minor improvements

 *			Guenther Kelleter:

 *			  - Useful hints and bug fixes

 *			  - Cross-checked it for Falcons

 *

 *	1996/3/9	Geert Uytterhoeven:

 *			  - Support added for Amiga, A-law, 16-bit little

 *			    endian.

 *			  - Unification to drivers/sound/dmasound.c.

 *

 *	1996/4/6	Martin Mitchell:

 *			  - Updated to 1.3 kernel.

 *

 *	1996/6/13       Topi Kanerva:

 *			  - Fixed things that were broken (mainly the amiga

 *			    14-bit routines)

 *			  - /dev/sndstat shows now the real hardware frequency

 *			  - The lowpass filter is disabled by default now

 *

 *	1996/9/25	Geert Uytterhoeven:

 *			  - Modularization

 *

 *	1998/6/10	Andreas Schwab:

 *			  - Converted to use sound_core

 *

 *	1999/12/28	Richard Zidlicky:

 *			  - Added support for Q40

 *

 *	2000/2/27	Geert Uytterhoeven:

 *			  - Clean up and split the code into 4 parts:

 *			      o dmasound_core: machine-independent code

 *			      o dmasound_atari: Atari TT and Falcon support

 *			      o dmasound_awacs: Apple PowerMac support

 *			      o dmasound_paula: Amiga support

 *

 *	2000/3/25	Geert Uytterhoeven:

 *			  - Integration of dmasound_q40

 *			  - Small clean ups

 *

 *	2001/01/26 [1.0] Iain Sandoe

 *			  - make /dev/sndstat show revision & edition info.

 *			  - since dmasound.mach.sq_setup() can fail on pmac

 *			    its type has been changed to int and the returns

 *			    are checked.

 *		   [1.1]  - stop missing translations from being called.

 *	2001/02/08 [1.2]  - remove unused translation tables & move machine-

 *			    specific tables to low-level.

 *			  - return correct info. for SNDCTL_DSP_GETFMTS.

 *		   [1.3]  - implement SNDCTL_DSP_GETCAPS fully.

 *		   [1.4]  - make /dev/sndstat text length usage deterministic.

 *			  - make /dev/sndstat call to low-level

 *			    dmasound.mach.state_info() pass max space to ll driver.

 *			  - tidy startup banners and output info.

 *		   [1.5]  - tidy up a little (removed some unused #defines in

 *			    dmasound.h)

 *			  - fix up HAS_RECORD conditionalisation.

 *			  - add record code in places it is missing...

 *			  - change buf-sizes to bytes to allow < 1kb for pmac

 *			    if user param entry is < 256 the value is taken to

 *			    be in kb > 256 is taken to be in bytes.

 *			  - make default buff/frag params conditional on

 *			    machine to allow smaller values for pmac.

 *			  - made the ioctls, read & write comply with the OSS

 *			    rules on setting params.

 *			  - added parsing of _setup() params for record.

 *	2001/04/04 [1.6]  - fix bug where sample rates higher than maximum were

 *			    being reported as OK.

 *			  - fix open() to return -EBUSY as per OSS doc. when

 *			    audio is in use - this is independent of O_NOBLOCK.

 *			  - fix bug where SNDCTL_DSP_POST was blocking.

 /* Record capability notes 30/01/2001:

  * At present these observations apply only to pmac LL driver (the only one

  * that can do record, at present).  However, if other LL drivers for machines

  * with record are added they may apply.

  *

  * The fragment parameters for the record and play channels are separate.

  * However, if the driver is opened O_RDWR there is no way (in the current OSS

  * API) to specify their values independently for the record and playback

  * channels.  Since the only common factor between the input & output is the

  * sample rate (on pmac) it should be possible to open /dev/dspX O_WRONLY and

  * /dev/dspY O_RDONLY.  The input & output channels could then have different

  * characteristics (other than the first that sets sample rate claiming the

  * right to set it for ever).  As it stands, the format, channels, number of

  * bits & sample rate are assumed to be common.  In the future perhaps these

  * should be the responsibility of the LL driver - and then if a card really

  * does not share items between record & playback they can be specified

  * separately.

/* Thread-safeness of shared_resources notes: 31/01/2001

 * If the user opens O_RDWR and then splits record & play between two threads

 * both of which inherit the fd - and then starts changing things from both

 * - we will have difficulty telling.

 *

 * It's bad application coding - but ...

 * TODO: think about how to sort this out... without bogging everything down in

 * semaphores.

 *

 * Similarly, the OSS spec says "all changes to parameters must be between

 * open() and the first read() or write(). - and a bit later on (by

 * implication) "between SNDCTL_DSP_RESET and the first read() or write() after

 * it".  If the app is multi-threaded and this rule is broken between threads

 * we will have trouble spotting it - and the fault will be rather obscure :-(

 *

 * We will try and put out at least a kmsg if we see it happen... but I think

 * it will be quite hard to trap it with an -EXXX return... because we can't

 * see the fault until after the damage is done.

    /*

     *  Declarations

 in bytes */

 MODULE */

 control over who can modify resources shared between play/record */

    /*

     *  Mid level stuff

 _MUST_ stop DMA */

	/* trap out-of-range speed settings.

	   at present we allow (arbitrarily) low rates - using soft

	   up-conversion - but we can't allow > max because there is

	   no soft down-conversion.

 should be 0 or 1 now */

	/* if the user has requested a non-existent translation don't try

	   to call it but just return 0 bytes moved

    /*

     *  /dev/mixer abstraction

    /*

     *  Sound queue stuff, the heart of the driver

 are we already set? - and not changeable */

 don't think we have a race prob. here _check_ */

	/* make sure that the parameters are set up

	   This should have been done already...

	/* OK.  If the user has set fragment parameters explicitly, then we

	   should leave them alone... as long as they are valid.

	   Invalid user fragment params can occur if we allow the whole buffer

	   to be used when the user requests the fragments sizes (with no soft

	   x-lation) and then the user subsequently sets a soft x-lation that

	   requires increased internal buffering.



	   Othwerwise (if the user did not set them) OSS says that we should

	   select frag params on the basis of 0.5 s output & 0.1 s input

	   latency. (TODO.  For now we will copy in the defaults.)

 set up the user info */

 work out requested block size */

 the user wants to write frag-size chunks */

 this only works for size values which are powers of 2 */

 make sure we are aligned */

 let's just check for obvious mistakes */

 if user has set max_active - then use it */

	/* ++TeSche: Is something like this necessary?

	 * Hey, that's an honest question! Or does any other part of the

	 * filesystem already checks this situation? I really don't know.

	/* implement any changes we have made to the soft/hard params.

	   this is not satisfactory really, all we have done up to now is to

	   say what we would like - there hasn't been any real checking of capability

	/* set up the sq if it is not already done. This may seem a dumb place

	   to do it - but it is what OSS requires.  It means that write() can

	   return memory allocation errors.  To avoid this possibility use the

	   GETBLKSIZE or GETOSPACE ioctls (after you've fiddled with all the

	   params you want to change) - these ioctls also force the setup.

/* FIXME: I think that this may be the wrong behaviour when we get strapped

	for time and the cpu is close to being (or actually) behind in sending data.

	- because we've lost the time that the N samples, already in the buffer,

	would have given us to get here with the next lot from the user.

	/* The interrupt doesn't start to play the last, incomplete frame.

	 * Thus we can append to it without disabling the interrupts! (Note

	 * also that write_sq.rear isn't affected by the interrupt.)

	/* as of 1.6 this behaviour changes if SNDCTL_DSP_POST has been issued:

	   this will mimic the behaviour of syncing and allow the sq_play() to

	   queue a partial fragment.  Since sq_play() may/will be called from

	   the IRQ handler - at least on Pmac we have to deal with it.

	   The strategy - possibly not optimum - is to kill _POST status if we

	   get here.  This seems, at least, reasonable - in the sense that POST

	   is supposed to indicate that we might not write before the queue

	   is drained - and if we get here in time then it does not apply.

 take out POST status */

 paranoia */

		/* Here, we can avoid disabling the interrupt by first

		 * copying and translating the data, and then updating

		 * the write_sq variables. Until this is done, the interrupt

		 * won't see the new frame and we can work on it

		 * undisturbed.

 paranoia */

 uUsed may have been 0 */

 blocking open() */

 CHECK: IS THIS OK??? */

 blocking open() */

			/* OSS manual says we will return EBUSY regardless

			   of O_NOBLOCK.

 Let's play spot-the-race-condition */

		/* allocate the default number & size of buffers.

		   (i.e. specified in _setup() or as module params)

		   can't be changed at the moment - but _could_ be perhaps

		   in the setfragments ioctl.

 blocking open() */

 blocking open() */

 checks the f_mode */

 TODO: if O_RDWR, release any resources grabbed by write part */

 I think this is what is required by open(2) */

	/* CHECK whether this is sensible - in the case that dsp0 could be opened

	  O_RDONLY and dsp1 could be opened O_WRONLY

	/* OK. - we should make some attempt at consistency. At least the H'ware

	   options should be set with a valid mode.  We will make it that the LL

	   driver must supply defaults for hard & soft params.

		/* you can make this AFMT_U8/mono/8K if you want to mimic old

	/* none of the current LL drivers can actually do this "native" at the moment

	   OSS does not really require us to supply /dev/audio if we can't do it.

 this _must_ stop DMA, we might be about to lose the buffers */

 write_sq.front = (write_sq.rear+1) % write_sq.max_count;*/

 same as for set-up */

 OK - we can unlock the parameters and fragment settings */

	/* we could consider resetting the shared_resources_owner here... but I

	   think it is probably still rather non-obvious to application writer

 we release everything else though */

 there may be an incomplete frame waiting */

			/* While waiting for audio output to drain, an

			 * interrupt occurred.  Stop audio output immediately

 flag no sync regardless of whether we had a DSP_POST or not */

 make sure dma is stopped and all is quiet */

 it's us that has them */

 blocking open() */

	/* Wake up a process waiting for the queue being released.

	 * Note: There may be several processes waiting for a call

 Iain: hmm I don't understand this next comment ... */

 There is probably a DOS atack here. They change the mode flag. */

 XXX add check here,*/

 checks f_mode */

 checks f_mode */

 blocking open() */

/* here we see if we have a right to modify format, channels, size and so on

   if no-one else has claimed it already then we do...



   TODO: We might change this to mask O_RDWR such that only one or the other channel

   is the owner - if we have problems.

/* if either queue is locked we must deny the right to change shared params

/* check and set a queue's fragments per user's wishes...

   we will check against the pre-defined literals and the actual sizes.

   This is a bit fraught - because soft translations can mess with our

   buffer requirements *after* this call - OSS says "call setfrags first"

/* It is possible to replace all the -EINVAL returns with an override that

   just puts the allowable value in.  This may be what many OSS apps require

 now in bytes */

 this might still not work */

 the user is allowed say "don't care" with 0x7fff */

	/* there is, currently, no way to specify max_active separately

	   from max_count.  This could be a LL driver issue - I guess

	   if there is a requirement for these values to be different then

	  we will have to pass that info. up to this level.

 this is what OSS says.. */

		/* this should tell the caller about bytes that the app can

		   read/write - the app doesn't care about our internal buffers.

		   We force sq_setup() here as per OSS 1.1 (which should

		   compute the values necessary).

		   Since there is no mechanism to specify read/write separately, for

		   fds opened O_RDWR, the write_sq values will, arbitrarily, overwrite

		   the read_sq ones.

		/* all we are going to do is to tell the LL that any

		   partial frags can be queued for output.

		   The LL will have to clear this flag when last output

		   is queued.

		/* This call, effectively, has the same behaviour as SNDCTL_DSP_RESET

		   except that it waits for output to finish before resetting

		   everything - read, however, is killed immediately.

 if we are the shared resource owner then release them */

		/* changing this on the fly will have weird effects on the sound.

		   Where there are rate conversions implemented in soft form - it

		   will cause the _ctx_xxx() functions to be substituted.

		   However, there doesn't appear to be any reason to dis-allow it from

		   a driver pov.

	/* OSS says these next 4 actions are undefined when the device is

	   busy/active - we will just return -EINVAL.

	   To be allowed to change one - (a) you have to own the right

	    (b) the queue(s) must be quiescent

 the user might ask for 20 channels, we will return 1 or 2 */

		/* we can do this independently for the two queues - with the

		   proviso that for fds opened O_RDWR we cannot separate the

		   actions and both queues will be set per the last call.

		   NOTE: this does *NOT* actually set the queue up - merely

		   registers our intentions.

 0x7fff is 'use maximum' */

		/* NOTE: this return value is irrelevant - OSS specifically says that

		   the value is 'random' and that the user _must_ check the actual

		/*

	/* These parameters will be restored for every clean open()

	 * in the case of multiple open()s (e.g. dsp0 & dsp1) they

	 * will be set so long as the shared resources have no owner.

    /*

     *  /dev/sndstat

/* we allow more space for record-enabled because there are extra output lines.

   the number here must include the amount we are prepared to give to the low-level

   driver.

/* this is how much space we will allow the low-level driver to use

   in the stat buffer.  Currently, 2 * (80 character line + <NL>).

   We do not police this (it is up to the ll driver to be honest).

 state.buf should not overflow! */

 publish this function for use by low-level code, if required */

	/* call the low-level module to fill in any stat info. that it has

	   if present.  Maximum buffer usage is specified.

	/* make usage of the state buffer as deterministic as poss.

	   exceptional conditions could cause overrun - and this is flagged as

	   a kernel error.

 formats and settings */

 sound queue status */

    /*

     *  Config & Setup

     *

     *  This function is called by _one_ chipset-specific driver

 Set up sound queue, /dev/audio and /dev/dsp. */

 Set default settings. */

 Set up /dev/sndstat. */

 Set up /dev/mixer. */

 !MODULE */

 check the bootstrap parameter for "dmasound=" */

	/* FIXME: other than in the most naive of cases there is no sense in these

	 *	  buffers being other than powers of two.  This is not checked yet.

 check for small buffer specs */

 !MODULE */

    /*

     *  Conversion tables

 8 bit mu-law */

 8 bit A-law */

 HAS_8BIT_TABLES */

    /*

     *  Visible symbols for modules

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/sound/oss/dmasound/dmasound_q40.c

 *

 *  Q40 DMA Sound Driver

 *

 *  See linux/sound/oss/dmasound/dmasound_core.c for copyright and credits

 *  prior to 28/01/2001

 *

 *  28/01/2001 [0.1] Iain Sandoe

 *		     - added versioning

 *		     - put in and populated the hardware_afmts field.

 *             [0.2] - put in SNDCTL_DSP_GETCAPS value.

 *	       [0.3] - put in default hard/soft settings.

 Balance factor for expanding (not volume!) */

 Data for expanding */

** Low level stuff *********************************************************/

** Mid level stuff *********************************************************/

 userCount, frameUsed, frameLeft == byte counts */

 a bit too complicated to optimise right now ..*/

 compressing versions */

** Low level stuff *********************************************************/

 change to vmalloc */

 Register interrupt handler. */

 MODULE */

	/* used by Q40Play() if all doubts whether there really is something

	 * to be played are already wiped out.

 There's already a frame loaded */

 nothing in the queue */

	         /* hmmm, the only existing frame is not

		  * yet filled and we're not syncing?

	          /* playing was interrupted and sq_reset() has already cleared

		   * the sq variables, so better don't do anything here.

 better safe */

 there was nothing to play, disable irq */

 search a frequency that fits into the allowed error range */

sound.hard.stereo=1;*/ 
 squeeze the sound, we do that */

 Q40 sound supports only 8bit modes */

** Machine definitions *****************************************************/

 MODULE */

 h'ware-supported formats *only* here */

 As per SNDCTL_DSP_GETCAPS */

** Config & Setup **********************************************************/

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Sound Core PDAudioCF soundcard

 *

 * Copyright (c) 2003 by Jaroslav Kysela <perex@perex.cz>

/*

 *

 IRQ_NONE here? */

 should never happen */

 check rate */

 printk(KERN_DEBUG "TASKLET: rdp = %x, wdp = %x\n", rdp, wdp); */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Sound Core PDAudioCF soundcard

 *

 * Copyright (c) 2003 by Jaroslav Kysela <perex@perex.cz>

/*

 Index 0-MAX */

 ID for this card */

 Enable switches */

/*

/*

 * prototypes

/*

 * destructor

/*

 * snd_pdacf_attach - attach callback for cs

 find an empty slot from the card list */

 disabled explicitly */

 ok, create a card instance */

/**

 * snd_pdacf_assign_resources - initialize the hardware and card instance.

 * @pdacf: context

 * @port: i/o port for the card

 * @irq: irq number for the card

 *

 * this function assigns the specified port and irq, boot the card,

 * create pcm and control instances, and initialize the rest hardware.

 *

 * returns 0 if successful, or a negative error code.

/*

 * snd_pdacf_detach - detach callback for cs

 to be sure */

/*

 * configuration callback

/*

 * Module entry points

 this is too general PCMCIA_DEVICE_MANF_CARD(0x015d, 0x4c45), */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Sound Core PDAudioCF soundcard

 *

 * Copyright (c) 2003 by Jaroslav Kysela <perex@perex.cz>

/*

 *

 for sure */

 design note: if we unmask PLL unlock, parity, valid, audio or auto bit interrupts */

 from AK4117 then INT1 pin from AK4117 will be high all time, because PCMCIA interrupts are */

 egde based and FPGA does logical OR for all interrupt sources, we cannot use these */

 high-rate sources */

 AK4117_REG_PWRDN */

 AK4117_REQ_CLOCK */

 AK4117_REG_IO */

 AK4117_REG_INT0_MASK */

 AK4117_REG_INT1_MASK */

 normal operation */

 debug */

 setup the FPGA to match AK4117 setup */

 use 24.576Mhz clock */

 24-bit data */

 setup LEDs and IRQ */

 update LED status */

 disable interrupts, but use direct write to preserve old register value in chip->regmap */

 disable interrupts, but use direct write to preserve old register value in chip->regmap */

 ignore interrupts from now */

 wait for AK4117's PLL */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Sound Core PDAudioCF soundcards

 *

 * PCM part

 *

 * Copyright (c) 2003 by Jaroslav Kysela <perex@perex.cz>

/*

 * clear the SRAM contents

/*

 * pdacf_pcm_trigger - trigger callback for capture

/*

 * pdacf_pcm_prepare - prepare callback for playback and capture

 24-bit */

 24-bit */

/*

 * capture hw information

/*

 * pdacf_pcm_capture_open - open callback for capture

/*

 * pdacf_pcm_capture_close - close callback for capture

/*

 * pdacf_pcm_capture_pointer - pointer callback for capture

/*

 * operators for PCM capture

/*

 * snd_pdacf_pcm_new - create and initialize a pcm

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Digigram VXpocket soundcards

 *

 * lowlevel routines for VXpocket soundcards

 *

 * Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>

 ICR

 CVR

 ISR

 IVR

 RXH

 RXM

 RXL

 DMA

 CDSP

 LFREQ

 HFREQ

 DATA

 MICRO

 DIALOG

 CSUER

 RUER

/*

 * snd_vx_inb - read a byte from the register

 * @offset: register offset

/*

 * snd_vx_outb - write a byte on the register

 * @offset: the register offset

 * @val: the value to write

/*

 * redefine macros to call directly

/*

 * vx_check_magic - check the magic word on xilinx

 *

 * returns zero if a magic word is detected, or a negative error code.

/*

 * vx_reset_dsp - reset the DSP

 ms */

 set the reset dsp bit to 1 */

 reset the bit */

/*

 * reset codec bit

 Set the reset CODEC bit to 1. */

 Set the reset CODEC bit to 0. */

/*

 * vx_load_xilinx_binary - load the xilinx binary image

 * the binary image is the binary array converted from the bitstream file.

 Switch to programmation mode */

 Save register CSUER and RUER */

 reset HF0 and HF1 */

 Wait for answer HF2 equal to 1 */

 set HF1 for loading xilinx binary */

 wait for reading */

 reset HF1 */

 wait for HF3 */

 read the number of bytes received */

 TEMPO 250ms : wait until Xilinx is downloaded */

 test magical word */

 Restore register 0x0E and 0x0F (thus replacing COR and FCSR) */

 Reset the Xilinx's signal enabling IO access */

 Reset of the Codec */

/*

 * vxp_load_dsp - load_dsp callback

 xilinx boot */

 xilinx image */

 DSP boot */

 DSP image */

/*

 * vx_test_and_ack - test and acknowledge interrupt

 *

 * called from irq hander, too

 *

 * spinlock held!

 not booted yet? */

 ok, interrupts generated, now ack it */

 set ACQUIT bit up and down */

	/* useless read just to spend some time and maintain

	 * the ACQUIT signal up for a while ( a bus cycle )

/*

 * vx_validate_irq - enable/disable IRQ

 Set the interrupt enable bit to 1 in CDSP register */

/*

 * vx_setup_pseudo_dma - set up the pseudo dma read/write mode.

 * @do_write: 0 = read, 1 = set up for DMA write

 Interrupt mode and HREQ pin enabled for host transmit / receive data transfers */

 Reset the pseudo-dma register */

 Select DMA in read/write transfer mode and in 16-bit accesses */

/*

 * vx_release_pseudo_dma - disable the pseudo-DMA mode

 Disable DMA and 16-bit accesses */

 HREQ pin disabled. */

/*

 * vx_pseudo_dma_write - write bulk data on pseudo-DMA mode

 * @count: data length to transfer in bytes

 *

 * data size must be aligned to 6 bytes to ensure the 24bit alignment on DSP.

 * NB: call with a certain lock!

 in 16bit words */

 Transfer using pseudo-dma. */

 in 16bit words */

 Transfer using pseudo-dma. */

/*

 * vx_pseudo_dma_read - read bulk data on pseudo DMA mode

 * @offset: buffer offset in bytes

 * @count: data length to transfer in bytes

 *

 * the read length must be aligned to 6 bytes, as well as write.

 * NB: call with a certain lock!

 in 16bit words */

 Transfer using pseudo-dma. */

 in 16bit words */

 Transfer using pseudo-dma. */

 Disable DMA */

 Read the last word (16 bits) */

 Disable 16-bit accesses */

 HREQ pin disabled. */

/*

 * write a codec data (24bit)

 Activate access to the corresponding codec register */

 We have to send 24 bits (3 x 8 bits). Start with most signif. Bit */

 Terminate access to codec registers */

/*

 * vx_set_mic_boost - set mic boost level (on vxp440 only)

 * @boost: 0 = 20dB, 1 = +38dB

 boost: 38 dB */

 minimum value: 20 dB */

/*

 * remap the linear value (0-8) to the actual value (0-15)

/*

 * vx_set_mic_level - set mic level (on vxpocket only)

 * @level: the mic level = 0 - 8 (max)

/*

 * change the input audio source

 reset mic levels */

/*

 * change the clock source

 * source = INTERNAL_QUARTZ or UER_SYNC

/*

 * reset the board

/*

 * callbacks

 exported */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Digigram VXpocket V2/440 soundcards

 *

 * Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>



 Index 0-MAX */

 ID for this card */

 Enable switches */

/*

/*

/*

 * Hardware information

/* VX-pocket V2

 *

 * 1 DSP, 1 sync UER

 * 1 programmable clock (NIY)

 * 1 stereo analog input (line/micro)

 * 1 stereo analog output

 * Only output levels can be modified

 hardware specs */

/* VX-pocket 440

 *

 * 1 DSP, 1 sync UER, 1 sync World Clock (NIY)

 * SMPTE (NIY)

 * 2 stereo analog input (line/micro)

 * 2 stereo analog output

 * Only output levels can be modified

 * UER, but only for the first two inputs and outputs.

 hardware specs */

/*

 * create vxpocket instance

/**

 * snd_vxpocket_assign_resources - initialize the hardware and card instance.

 * @chip: VX core instance

 * @port: i/o port for the card

 * @irq: irq number for the card

 *

 * this function assigns the specified port and irq, boot the card,

 * create pcm and control instances, and initialize the rest hardware.

 *

 * returns 0 if successful, or a negative error code.

/*

 * configuration callback

 redefine hardware record according to the VERSION1 string */

 overwrite the hardware information */

struct snd_vxpocket *vxp = (struct snd_vxpocket *)chip;

/*

 find an empty slot from the card list */

 disabled explicitly */

 ok, create a card instance */

 to be sure */

/*

 * Module entry points

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Digigram VXpocket soundcards

 *

 * VX-pocket mixer

 *

 * Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>

/*

 * mic level control (for VXPocket)

/*

 * mic boost level control (for VXP440)

 mute input levels */

 mic level */

 SPDX-License-Identifier: GPL-2.0-only

/*

*

* Copyright Adrian McMenamin 2005, 2006, 2007

* <adrian@mcmen.demon.co.uk>

* Requires firmware (BSD licenced) available from:

* http://linuxdc.cvs.sourceforge.net/linuxdc/linux-sh-dc/sound/oss/aica/firmware/

* or the maintainer

 module parameters */

 Simple platform device */

 SPU specific functions */

 spu_write_wait - wait for G2-SH FIFO to clear */

 To ensure hardware failure doesn't wedge kernel */

 spu_memset - write to memory in SPU address space */

 spu_memload - write to SPU address space */

 spu_disable - set spu registers to stop sound output */

 spu_enable - set spu registers to enable sound output */

/* 

 * Halt the sound processor, clear the memory,

 * load some default ARM7 code, and then restart ARM7

 Put ARM7 in endless loop */

 aica_chn_start - write to spu to start playback */

 aica_chn_halt - write to spu to halt playback */

 ALSA code below */

timer function - so cannot sleep */

 Have we played out an additional period? */

 reschedule the timer */

get the queue to do the work */

 set defaults for channel */

 default to mono */

 TO DO: set up to handle more than one pcm instance */

 AICA has no capture ability */

 Allocate the DMA buffers */

 Mixer controls */

 TO DO: Fix me */

 TO DO: Fix me */

 we've not yet been set up */

 write firmware into memory */

 Prepare to use the queue */

 Load the PCM 'chip' */

 Add basic controls */

 Register the card with ALSA subsystem */

 Load the firmware */

 Kill any sound still playing and reset ARM7 to safe state */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * sh_dac_audio.c - SuperH DAC audio driver for ALSA

 *

 * Copyright (c) 2009 by Rafael Ignacio Zurita <rizurita@yahoo.com>

 *

 * Based on sh_dac_audio.c (Copyright (C) 2004, 2005 by Andriy Skulysh)

 Module Parameters */

 main struct */

 bytes proccesed, to compare with period_size */

 PCM INTERFACE */

 channel is not used (interleaved data) */

 channel is not used (interleaved data) */

 channel is not used (interleaved data) */

 pcm ops */

 device should be always 0 for us */

 buffer size=48K */

 END OF PCM INTERFACE */

 driver .remove  --  destructor */

 free -- it has been defined by create */

 release the data */

 create  --  chip-specific constructor for the cards components */

 driver .probe  --  constructor */

/*

 * "driver" definition

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for PowerMac AWACS

 * Copyright (c) 2001 by Takashi Iwai <tiwai@suse.de>

 *   based on dmasound.c.

 Index 0-MAX */

 ID for this card */

/*

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Beep using pcm

 *

 * Copyright (c) by Takashi Iwai <tiwai@suse.de>

 boolean */

 mixer volume: 0-100 */

 currently playing volume */

 allocated wave buffer */

 physical address of buffer */

/*

 * stop beep if running

/*

 * Stuff for outputting a beep.  The values range from -327 to +327

 * so we can multiply by an amplitude in the range 0..100 to get a

 * signed short value to put in the output buffer.

 22050 Hz sample rate */

 0 - 100 */

 fixed point */

/*

 * beep volume mixer

 Initialize beep stuff */

 FIXME: set more better values */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PMac Tumbler/Snapper lowlevel functions

 *

 * Copyright (c) by Takashi Iwai <tiwai@suse.de>

 *

 *   Rene Rebe <rene.rebe@gmx.net>:

 *     * update from shadow registers on wakeup and headphone plug

 *     * automatically toggle DRC on headphone plug

 i2c address for tumbler */

 registers */

 main control */

 tas3001c */

 tas3004 */

 main control 2 */

 analog control */

 mono volumes for tas3001c/tas3004 */

 tas3001c only */

 stereo volumes for tas3004 */

 stereo volumes for tas3004 */

/*

 normal operation, SCLK=64fps, i2s output, i2s input, 16bit width */

 terminator */

 normal operation, SCLK=64fps, i2s output, 16bit width */

 normal operation, all-pass mode */

 normal output, no deemphasis, A input, power-up, line-in */

 terminator */

/*

 * gpio access

 NOP */

/*

 * update master volume

 output volume */

 output switch */

/*

 * TAS3001c dynamic range compression

 enable, 3:1 compression */

/*

 * TAS3004

 3:1 above threshold */

 disabled */

 1:1 below threshold */

/*

 * mono volumes

 TAS3001c mono volumes */

 TAS3004 mono volumes */

/*

 * snapper mixer volumes

/*

 * mute switches. FIXME: Turn that into software mute when both outputs are muted

 * to avoid codec reset on ibook M7

 don't touch in the auto-mute mode */

/*

 Alternative PCM is assigned to Mic analog loopback on iBook G4 */

 FIXME: "Capture Source" doesn't work properly */

/*

 * auto-mute stuffs

 unmute headphone/lineout & mute speaker */

 unmute speaker, mute others */

 reset the master volume so the correct amplification is applied */

 PMAC_SUPPORT_AUTOMUTE */

 interrupt - headphone plug changed */

 look for audio-gpio device */

 look for audio-gpio device */

 find an audio device and get its address */

 Try to find the active state, default to 0 ! */

		/* Here are some crude hacks to extract the GPIO polarity and

		 * open collector informations out of the do-platform script

		 * as we don't yet have an interpreter for these things

 reset audio */

 suspend mixer */

 resume mixer */

 activate headphone status interrupts */

 initialize tumbler */

 exported */

 set up TAS */

	/*

	 * build mixers

 set initial DRC range to 60% */

 will be changed later if AUTO_DRC is set */

 update the status only */

 activate headphone status interrupts */

 activate headphone status interrupts */

 activate headphone status interrupts */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PMac AWACS lowlevel functions

 *

 * Copyright (c) by Takashi Iwai <tiwai@suse.de>

 * code based on dmasound.c.

 PMAC_AMP_AVAIL */

/*

 * write AWACS register

 Recalibrate chip */

	/* Sorry for the horrible delays... I hope to get that improved

	 * by making the whole PM process asynchronous in a future version

 delay for broken crystal part */

 NOP */

/*

 * additional callback to set the pcm format

/*

 * AWACS volume callbacks

/*

 * volumes: 0-15 stereo

/*

 * mute master/ogain for AWACS: mono

/*

 * controls for perch/whisper extension cards, e.g. G3 desktop

 *

 * TDA7433 connected via i2c address 0x45 (= 0x8a),

 * accessed through cuda

/*

 * level = 0 - 14, 7 = 0 dB

/*

 * vol = 0 - 31 (attenuation), 32 = mute bit, stereo

/*

 * 0 = -79 dB, 79 = 0 dB, 99 = +20 dB

/*

 * mixer controls

 PMAC_AMP_AVAIL */

/*

 * mic boost for screamer

/*

 * lists of mixer elements

	AWACS_SWITCH("Unknown Playback Switch", 6, SHIFT_PAROUT0, 0), */

/* FIXME: is this correct order?

 * screamer (powerbook G3 pismo) seems to have different bits...

/*

 * add new mixer elements to the card

/*

 * restore all registers

 reset power bits in reg 6 */

 CONFIG_PM */

/*

 * auto-mute stuffs

 PMAC_SUPPORT_AUTOMUTE */

/*

 * initialize chip

	/* looks like MASK_GAINLINE triggers something, so we set here

	 * as start-up

 FIXME: Only machines with external SRS module need MASK_PAROUT */

 chip->_device_id == 0x8 || */

 get default volume from nvram */

 vol = (~nvram_read_byte(0x1308) & 7) << 1;

 vol = ((pmac_xpram_read( 8 ) & 7 ) << 1 );

 no, on alsa, muted as default */

 FIXME: screamer has loopthru vol control */

 FIXME: maybe should be vol << 3 for PCMCIA speaker */

 mute and zero vol */

 0 dB */

 0 dB */

 PMAC_AMP_AVAIL */

 set headphone-jack detection bit */

	/*

	 * build mixers

		/* use amplifier.  the signal is connected from route A

		 * to the amp.  the amp has its headphone and speaker

		 * volumes and mute switches, so we use them instead of

		 * screamer registers.

		 * in this case, it seems the route C is not used.

 overwrite */

 PMAC_AMP_AVAIL */

 route A = headphone, route C = speaker */

	/*

	 * set lowlevel callbacks

 update the status only */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PMac DBDMA lowlevel functions

 *

 * Copyright (c) by Takashi Iwai <tiwai@suse.de>

 * code based on dmasound.c.

 fixed frequency table for awacs, screamer, burgundy, DACA (44100 max) */

 fixed frequency table for tumbler */

/*

 * we will allocate a single 'emergency' dbdma cmd block to use if the

 * tx status comes up "DEAD".  This happens on some PowerComputing Pmac

 * clones, either owing to a bug in dbdma or some interaction between

 * IDE and sound.  However, this measure would deal with DEAD status if

 * it appeared elsewhere.

/*

 * allocate DBDMA command arrays

/*

 * pcm stuff

/*

 * look up frequency table

/*

 * check whether another stream is active

/*

 * get a stream of the opposite direction

/*

 * wait while run status is on

/*

 * set the format and rate to the chip.

 * call the lowlevel function if defined (e.g. for AWACS).

 set up frequency and format */

/*

 * stop the DMA transfer

/*

 * set the command pointer address

/*

 * start the DMA

/*

 * prepare playback/capture stream

 set up constraints */

	/* We really want to execute a DMA stop command, after the AWACS

	 * is initialized.

	 * For reasons I don't understand, it stops the hissing noise

	 * common to many PowerBook G3 systems and random noise otherwise

	 * captured on iBook2's about every third time. -ReneR

	/* continuous DMA memory type doesn't provide the physical address,

	 * so we need to resolve the address here...

cp->res_count = cpu_to_le16(0);*/

 make loop */

/*

 * PCM trigger/stop

printk(KERN_DEBUG "stopped!!\n");*/

/*

 * return the current pointer

 hmm.. how can we get the current dma pointer?? */

printk(KERN_DEBUG "pointer=%d\n", count);*/

/*

 * playback

/*

 * capture

/*

 * Handle DEAD DMA transfers:

 * if the TX status comes up "DEAD" - reported on some Power Computing machines

 * we need to re-start the dbdma - but from a different physical start address

 * and with a different transfer length.  It would get very messy to do this

 * with the normal dbdma_cmd blocks - we would have to re-write the buffer start

 * addresses each time.  So, we will keep a single dbdma_cmd block which can be

 * fiddled with.

 * When DEAD status is first reported the content of the faulted dbdma block is

 * copied into the emergency buffer and we note that the buffer is in use.

 * we then bump the start physical address by the amount that was successfully

 * output before it died.

 * On any subsequent DEAD result we just do the bump-ups (we know that we are

 * already using the emergency dbdma_cmd).

 * CHECK: this just tries to "do it".  It is possible that we should abandon

 * xfers when the number of residual bytes gets below a certain value - I can

 * see that this might cause a loop-forever if a too small transfer causes

 * DEAD status.  However this is a TODO for now - we'll see what gets reported.

 * When we get a successful transfer result with the emergency buffer we just

 * pretend that it completed using the original dmdma_cmd and carry on.  The

 * 'next_cmd' field will already point back to the original loop of blocks.

 printk(KERN_WARNING "snd-powermac: DMA died - patching it up!\n"); */

	/* to clear DEAD status we must first clear RUN

 new problem */

	/* now bump the values to reflect the amount

 point at our patched up command block */

 we must re-start the controller */

 should complete clearing the DEAD status */

/*

 * update playback/capture pointer from interrupts

 at most all fragments */

 already using DEAD xfer? */

 this block is still going */

 done that */

printk(KERN_DEBUG "update frag %d\n", rec->cur_period);*/

cp->res_count = cpu_to_le16(0);*/

/*

 * hw info

 NYI

 NYI

 look up frequency table and fill bit mask */

 check for minimum and maximum rates */

 FIXME: still under development.. */

 constraints to fix choppy sound */

 reset constraints */

/*

 preallocate 64k buffer */

/*

 * handling beep

 reset format */

/*

 * interrupt handlers

printk(KERN_DEBUG "pmac: control interrupt.. 0x%x\n", ctrl);*/

 do something when headphone is plugged/unplugged? */

 Writing 1s to the CNTLERR and PORTCHG bits clears them... */

/*

 * a wrapper to feature call for compatibility

/*

 * release resources

 stop sounds */

 disable interrupts from awacs interface */

 clean up mixer if any */

 release resources */

/*

 * free the device

/*

 * check the machine support byteswap (little-endian)

 if seems that Keylargo can't byte-swap  */

 it seems the Pismo & iBook can't byte-swap in hardware. */

/*

 * detect a sound chip

 all ok */

 default */

 check machine type */

	/*

	 * powermac G3 models have a node called "davbus"

	 * with a child called "sound".

	/*

	 * if we didn't find a davbus device, try 'i2s-a' since

	 * this seems to be what iBooks have

		/* partly deprecate snd-powermac, for those machines

 This should be verified on older screamers */

 chip->can_byte_swap = 0; /* FIXME: check this */

 disable IEE */

 no capture */

 chip->can_byte_swap = 0; /* FIXME: check this */

 disable IEE */

 chip->can_byte_swap = 0; /* FIXME: check this */

 disable IEE */

 chip->can_byte_swap = 0; /* FIXME: check this */

 disable IEE */

	/* We need the PCI device for DMA allocations, let's use a crude method

	 * for now ...

	/* look for a property saying what sample rates

 Apple 'Fixed' format */

 assume only 44.1khz */

/*

 * auto-mute

 PMAC_SUPPORT_AUTOMUTE */

/*

 * create and detect a pmac chip record

 reset & enable interrupts */

	/* Powerbooks have odd ways of enabling inputs such as

	   an expansion-bay CD or sound from an internal modem

 Enable CD and PC-card sound inputs. */

		/* This is done by reading from address

		 * f301a000, + 0x10 to enable the expansion-bay

		 * CD sound input, + 0x80 to enable the PC-card

		 * sound input.  The 0x100 enables the SCSI bus

		 * terminator power.

 Enable CD sound input. */

		/* The relevant bits for writing to this byte are 0x8f.

		 * I haven't found out what the 0x80 bit does.

		 * For the 0xf bits, writing 3 or 7 enables the CD

		 * input, any other value disables it.  Values

		 * 1, 3, 5, 7 enable the microphone.  Values 0, 2,

		 * 4, 6, 8 - f enable the input from the modem.

 Reset dbdma channels */

/*

 * sleep notify for powerbook

/*

 * Save state when going to sleep, restore it afterwards.

 enable CD sound input */

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PMac DACA lowlevel functions

 *

 * Copyright (c) by Takashi Iwai <tiwai@suse.de>

 i2c address */

 registers */

 maximum volume value */

/*

 * initialize / detect DACA

 SR: no swap, 1bit delay, 32-48kHz */

 GCFG: power amp inverted, DAC on */

/*

 * update volume

 deemphasis switch */

 output volume */

 amplifier switch */

 CONFIG_PM */

 exported */

 default on */

	/*

	 * build mixers

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * common keywest i2c layer

 *

 * Copyright (c) by Takashi Iwai <tiwai@suse.de>

 If instantiated via i2c-powermac, we still need to set the client */

/*

 * This is kind of a hack, best would be to turn powermac to fixed i2c

 * bus numbers and declare the sound device as part of platform

 * initialization

 ignored */

	/*

	 * We know the driver is already loaded, so the device should be

	 * already bound. If not it means binding failed, and then there

	 * is no point in keeping the device instantiated.

	/*

	 * Let i2c-core delete that device on driver removal.

	 * This is safe because i2c-core holds the core_lock mutex for us.

 instantiated by i2c-powermac */

 instantiated by us if needed */

 exported */

 exported */

 There was already a device from i2c-powermac. Great, let's return */

 We assume Macs have consecutive I2C bus numbers starting at 0 */

 Scan for devices to be bound to */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * PMac Burgundy lowlevel functions

 *

 * Copyright (c) by Takashi Iwai <tiwai@suse.de>

 * code based on dmasound.c.

 Waits for busy flag to clear */

/*

 * Burgundy volume: 0 - 100, stereo, word reg

 -EINVAL */

/*

 * Burgundy volume: 0 - 100, stereo, 2-byte reg

/*

 * Burgundy gain/attenuation: 0 - 15, mono/stereo, byte reg

/*

 * Burgundy switch: 0/1, mono/stereo, word reg

/*

 * Burgundy switch: 0/1, mono/stereo, byte reg, bit mask

/*

 * Burgundy mixers

/*	BURGUNDY_SWITCH_W("Loop Capture Switch", 0,

 *		MASK_ADDR_BURGUNDY_CAPTURESELECTS, 8, 24, 1),

 *	BURGUNDY_SWITCH_B("Mixer out Capture Switch", 0,

 *		MASK_ADDR_BURGUNDY_HOSTIFAD, 0x02, 0, 0),

 *	BURGUNDY_SWITCH_B("Mixer Capture Switch", 0,

 *		MASK_ADDR_BURGUNDY_HOSTIFAD, 0x01, 0, 0),

 *	BURGUNDY_SWITCH_B("PCM out Capture Switch", 0,

 *		MASK_ADDR_BURGUNDY_HOSTIFEH, 0x02, 0, 0),

/*	BURGUNDY_SWITCH_B("Line in Boost Capture Switch", 0,

/*

 * auto-mute stuffs

 PMAC_SUPPORT_AUTOMUTE */

/*

 * initialize burgundy

 Checks to see the chip is alive and kicking */

 set headphone-jack detection bit */

	/*

	 * build burgundy mixers

 update the status only */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Audio support for PS3

 * Copyright (C) 2007 Sony Computer Entertainment Inc.

 * All rights reserved.

 * Copyright 2006, 2007 Sony Corporation

/*

 * global

/*

 * PS3 audio register access

/*

 * ALSA defs

 stereo only */

 interrupt by four stages */

 buffer_size_max/ period_bytes_max */

			/* last resort. force to stop dma.

			 *  NOTE: this cause DMA done interrupts

/*

 * wait for all dma is done.

 * NOTE: caller should reset card->running before call.

 *       If not, the interrupt handler will re-start DMA,

 *       then DMA is never stopped.

	/*

	 * wait for the last dma is done

	/*

	 * expected maximum DMA done time is 5.7ms + something (DMA itself).

	 * 5.7ms is from 16bit/sample 2ch 44.1Khz; the time next

	 * DMA kick event would occur.

	/*

	 * clear outstanding interrupts.

	/*

	 *revert CLEAR bit since it will not reset automatically after DMA stop

 ensure the hardware sees changes */

 ensure the hardware sees the change */

/*

 * convert virtual addr to ioif bus addr.

/*

 * increment ring buffer pointer.

 * NOTE: caller must hold write spinlock

/*

 * setup dmac to send data to audio and attenuate samples on the ring buffer

 this dmac does not support over 4G */

 initialize to mute gcc */

 dst: fixed to 3wire#0 */

 count always 1 DMA block (1/2 stage = 128 bytes) */

 bump pointer if needed */

 kick event  */

 ensure the hardware sees the change */

/*

 * Interrupt handler

	/*

	 *serial buffer empty detected (every 4 times),

	 *program next dma and kick it

 we are still in silent time */

		/*

		 * serial out underflow, but buffer empty not detected.

		 * in this case, fill fifo with 0 to recover.  After

		 * filling dummy data, serial automatically start to

		 * consume them and then will generate normal buffer

		 * empty interrupts.

		 * If both buffer underflow and buffer empty are occurred,

		 * it is better to do nomal data transfer than empty one

 clear interrupt cause */

/*

 * audio mute on/off

 * mute_on : 0 output enabled

 *           1 mute

/*

 * av setting

 * NOTE: calling this function may generate audio interrupt.

	/*

	 * Reset the following unwanted settings:

 disable all 3wire buffers */

 ensure the hardware sees the change */

 wait for actually stopped */

 reset buffer pointer */

 ensure the hardware actually start resetting */

 enable 3wire#0 buffer */

 In 24bit mode,ALSA inserts a zero byte at first byte of per sample */

 ensure all the setting above is written back to register */

 avsetting driver altered AX_IE, caller must reset it if you want */

/*

 *  set sampling rate according to the substream

 sample rate */

 width */

 check CS non-audio bit and mute accordingly */

 mute if non-audio */

/*

 * PCM operators

 to retrieve substream/runtime in interrupt handler */

 mute off */

 this function sleep */

 mute on */

 some parameter changed */

		/*

		 * let SPDIF device re-lock with SPDIF signal,

		 * start with some silence

 every 4 times */

 restart ring buffer pointer */

 ensure the hardware sees the change */

 clear outstanding interrupts  */

/*

 * report current pointer

/*

 * SPDIF status bits controls

 FIXME: ps3av_set_audio_mode() assumes only consumer mode */

 FIXME: move this to device_init (H/W probe) */

 get irq outlet */

 irq */

	/*

	 * avsetting driver seems to never change the following

	 * so, init them here once

 no dma interrupt needed */

 use every 4 buffer empty interrupt */

 enable 3wire clocks */

 to start to generate SPDIF signal, fill data */

 setup MMIO */

 setup DMA area */

 use system page size */

 dma type; not used */

 CONFIG_SND_PS3_DEFAULT_START_DELAY */

 irq */

 create card instance */

 create control elements */

 create PCM devices instance */

 NOTE:this driver works assuming pcm:substream = 1:1 */

 instance index, will be stored pcm.device*/

 output substream */

 input substream */

 set pcm ops */

 pre-alloc PCM DMA buffer*/

	/*

	 * allocate null buffer

	 * its size should be lager than PS3_AUDIO_FIFO_STAGE_SIZE * 2

	 * PAGE_SIZE is enogh

 set default sample rate/word width */

 register the card */

	/*

	 * there is no destructor function to pcm.

	 * midlayer automatically releases if the card removed

 snd_ps3_probe */

 called when module removal */

	/*

	 * ctl and preallocate buffer will be freed in

	 * snd_card_free

 snd_ps3_remove */

/*

 * module/subsystem initialize/terminate

 register systembus DRIVER, this calls our probe() func */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   (Tentative) USB Audio Driver for ALSA

 *

 *   Mixer control part

 *

 *   Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>

 *

 *   Many codes borrowed from audio.c by

 *	    Alan Cox (alan@lxorguk.ukuu.org.uk)

 *	    Thomas Sailer (sailer@ife.ee.ethz.ch)

/*

 * TODOs, for both the mixer and the streaming interfaces:

 *

 *  - support for UAC2 effect units

 *  - support for graphical equalizers

 *  - RANGE and MEM set commands (UAC2)

 *  - RANGE and MEM interrupt dispatchers (UAC2)

 *  - audio channel clustering (UAC2)

 *  - audio sample rate converter units (UAC2)

 *  - proper handling of clock multipliers (UAC2)

 *  - dispatch clock change notifications (UAC2)

 *  	- stop PCM streams which use a clock that became invalid

 *  	- stop PCM streams which use a clock selector that has changed

 *  	- parse available sample rates again when clock sources changed

E-mu 0202/0404/0204 eXtension Unit(XU) control*/

 clock source*/

 clock rate */

 the spdif format */

 soft limiter */

/*

 * manual mapping of mixer names

 * if the mixer topology is too complicated and the parsed names are

 * ambiguous, add the entries in usbmixer_maps.c.

 get the mapped name if the unit matches */

 ignore the error value if ignore_ctl_error flag is set */

 check whether the control should be ignored */

 dB mapping */

 get the mapped selector source name */

/*

 * find an audio control unit with the given unit id

 we just parse the header */

/*

 * copy a string with the given id

/*

 * convert from the byte/word on usb descriptor to the zero-based integer

/*

 * convert from the zero-based int to the byte/word for usb descriptor

 not reached */

 unreachable */

/*

 * retrieve a mixer value

 enough space for one range */

 FIXME: how should we handle multiple triplets here? */

 channel = 0: master, 1 = first channel */

/*

 * set a mixer value

 UAC_VERSION_2/3 */

 FIXME */

/*

 * TLV callback for mixer volume controls

/*

 * parser routines begin here...

/*

 * check if the input/output channel routing is enabled on the given bitmap.

 * used for mixer unit parser

/*

 * add an alsa control element

 * search and increment the index until an empty slot is found.

 *

 * if failed, give up and free the control instance.

/*

 * get a terminal name string

 virtual type - not a real terminal */

/*

 * Get logical cluster information for UAC3 devices.

/*

 * Get number of channels for a Mixer Unit.

 no bmControls -> skip */

/*

 * Parse Input Terminal Unit

 call recursively to verify the referenced clock entity */

	/* save input term properties after recursion,

	 * to ensure they are not overriden by the recursion calls

 call recursively to verify the referenced clock entity */

	/* save input term properties after recursion,

	 * to ensure they are not overriden by the recursion calls

 REVISIT: UAC3 IT doesn't have channels cfg */

 virtual type */

 call recursively to retrieve the channel info */

 virtual type */

 call recursively to retrieve the channel info */

 virtual type */

 virtual type */

 virtual type */

 virtual type */

/*

 * parse the source unit recursively until it reaches to a terminal

 * or a branched unit.

 a loop in the terminal chain? */

 bad descriptor */

 the header is the same for all versions */

 continue to parse */

/*

 * Feature Unit

 feature unit control information */

 data type for uac1 */

 data type for uac2 if different from uac1, else -1 */

 FIXME: not implemented yet */

 UAC2 specific */

 private_free callback */

/*

 * interface to ALSA control for feature/mixer units

 volume control quirks */

 M-Audio Fast Track C400 */

 M-Audio Fast Track C600 */

 -73 dB = 0xb6ff */

 M-Audio Fast Track Ultra 8R */

 M-Audio Fast Track Ultra */

	/* quirk for UDA1321/N101.

	 * note that detection between firmware 2.1.1.7 (N101)

	 * and later 2.1.1.21 is not very clear from datasheets.

	 * I hope that the min value is -15360 for newer firmware --jk

 Logitech Webcam C500 */

 Logitech Webcam C210 */

 HD Webcam c310 */

 HD Webcam c510 */

 HD Webcam c270 */

 HD Webcam c525 */

 Logitech Quickcam Fusion */

 QuickCam Communicate Deluxe/S7500 */

	/* Most audio usb devices lie about volume resolution.

	 * Most Logitech webcams have res = 384.

	 * Probably there is some logitech magic behind this number --fishor

 ESS Technology Asus USB DAC */

 Jieli Technology USB PHY 2.0 */

/* forcibly initialize the current mixer value; if GET_CUR fails, set to

 * the minimum as default

/*

 * retrieve the minimum and maximum values for the specified control

 for failsafe */

		/* Additional checks for the proper resolution

		 *

		 * Some devices report smaller resolutions than actually

		 * reacting.  They don't return errors but simply clip

		 * to the lower aligned value.

	/* USB descriptions contain the dB scale in 1/256 dB unit

	 * while ALSA TLV contains in 1/100 dB unit

 something is wrong; assume it's either from/to 0dB */

 totally crap, return an error */

		/* if the max volume is too low, it's likely a bogus range;

		 * here we use -96dB as the threshold

 initialize all elements */

 get a feature/mixer unit info */

 get the current value from feature/mixer unit */

 master channel */

 put the current value to feature/mixer unit */

 master channel */

 get the boolean value from the master channel of a UAC control */

 UAC_VERSION_3 */

 get the connectors status and report it as boolean type */

 will be filled later manually */

 the read-only variant */

 will be filled later manually */

/*

 * A control which shows the boolean value from reading a UAC control on

 * the master channel.

 will be filled later manually */

 will be filled later manually */

/*

 * This symbol is exported in order to allow the mixer quirks to

 * hook up to the standard feature unit control mechanism

/*

 * build a feature control

/*

 * A lot of headsets/headphones have a "Speaker" mixer. Make sure we

 * rename it to "Headphone". We determine if something is a headphone

 * similar to how udev determines form factor.

 FIXME: not supported yet */

 UAC_VERSION_2 */

 master channel */

	/*

	 * If all channels in the mask are marked read-only, make the control

	 * read-only. snd_usb_set_cur_mix_value() will check the mask again and won't

	 * issue write commands to read-only channels.

		/*

		 * determine the control name.  the rule is:

		 * - if a name id is given in descriptor, use it.

		 * - if the connected input can be determined, then use the name

		 *   of terminal type.

		 * - if the connected output can be determined, use it.

		 * - otherwise, anonymous name.

		/*

		 * determine the stream direction:

		 * if the connected output is USB stream, then it's likely a

		 * capture stream.  otherwise it should be playback (hopefully :)

 get min/max values */

 skip a bogus volume range */

	/*

	 * Are there devices with volume range more than 255? I use a bit more

	 * to be sure. 384 is a resolution magic number found on Logitech

	 * devices. It will definitively catch all buggy Logitech devices.

	/*

	 *  sound/core/ctljack.c has a convention of naming jack controls

	 * by ending in " Jack".  Make it slightly more useful by

	 * indicating Input or Output after the terminal name.

 get connector value to "wake up" the USB audio */

 Build a mixer control for a UAC connector control (jack-detect) */

 set up a specific resume callback */

	/*

	 * UAC2: The first byte from reading the UAC2_TE_CONNECTOR control returns the

	 * number of channels connected.

	 *

	 * UAC3: The first byte specifies size of bitmap for the inserted controls. The

	 * following byte(s) specifies which connectors are inserted.

	 *

	 * This boolean ctl will simply report if any channels are connected

	 * or not.

 UAC_VERSION_3 */

 report true if any channel is connected */

	/*

	 * The only property of this unit we are interested in is the

	 * clock source validity. If that isn't readable, just bail out.

 From UAC2 5.2.5.1.2 "Only the get request is supported." */

/*

 * parse a feature unit

 *

 * most of controls are defined here.

 UAC_VERSION_3 */

 parse the source unit */

 determine the input source type and name */

 master configuration quirks */

 disable non-functional volume control */

 disable non-functional volume control */

 check all control types */

 audio class v1 controls are never read-only */

			/*

			 * The first channel must be set

			 * (for ease of programming).

 UAC_VERSION_2/3 */

			/*

			 * NOTE: build_feature_ctl() will mark the control

			 * read-only if all channels are marked read-only in

			 * the descriptors. Otherwise, the control will be

			 * reported as writeable, but the driver will not

			 * actually issue a write command for read-only

			 * channels.

			/*

			 * The first channel must be set

			 * (for ease of programming).

/*

 * Mixer Unit

 check whether the given in/out overflows bmMixerControls matrix */

 remaining bytes after bmMixerControls */

 iMixer */

 bmControls + iMixer */

 bmControls + wMixerDescrStr */

 overflow? */

/*

 * build a mixer unit control

 *

 * the callbacks are identical with feature unit.

 * input channel number (zero based) is given in control field instead.

 based on 1 */

 get min/max values */

 UAC1. No Insertion control */

 Check for jack detection. */

/*

 * parse a mixer unit

 no bmControls field (e.g. Maya44) -> ignore */

/*

 * Processing Unit / Extension Unit

 get callback for processing/extension unit */

 put callback for processing/extension unit */

 alsa control interface for processing/extension unit */

 will be filled later */

/*

 * predefined data for processing units

/*

 * predefined data for extension units

/*

 * build a processing/extension unit

 UAC_VERSION_2/3 */

 get min/max values */

			/*

			 * E-Mu USB 0404/0202/TrackerPre/0204

			 * samplerate control quirk

 nothing */ ;

	/*

	 * Note that we parse extension units with processing unit descriptors.

	 * That's ok as the layout is the same.

/*

 * Selector Unit

/*

 * info callback for selector unit

 * use an enumerator type for routing

 get callback for selector unit */

 put callback for selector unit */

 alsa control interface for selector unit */

 will be filled later */

/*

 * private free callback.

 * free both private_data and private_value

/*

 * parse a selector unit

 only one ? nonsense! */

 UAC2/3_SELECTOR_UNIT */

 check the static mapping table at first */

 no mapping ? */

 if iSelector is given, use it */

 TODO: Class-Specific strings not yet supported */

 ... or pick up the terminal name at next */

 ... or use the fixed string "USB" as the last resort */

 and add the proper suffix */

/*

 * parse an audio unit recursively

 the unit already visited */

 skip invalid unit */

 FIXME - effect units not implemented yet */

 kill pending URBs */

 UAC3 predefined channels configuration */

 capture channels mask */

 playback channels mask */

 side tone mixing channel mask */

		/*

		 * BAIF, BAOF or combination of both

		 * IN: Mono or Stereo cfg, Mono alt possible

		 * OUT: Mono or Stereo cfg, Mono alt possible

 dynamic channels */

 dynamic channels */

 BAOF; Stereo only cfg, Mono alt possible */

 BAOF; Mono or Stereo cfg, Mono alt possible */

 dynamic channels */

 BAIF; Mono or Stereo cfg, Mono alt possible */

 dynamic channels */

		/*

		 * BAIOF topology

		 * IN: Mono only

		 * OUT: Mono or Stereo cfg, Mono alt possible

 dynamic channels */

 BAIOF; IN: Mono only; OUT: Stereo only, Mono alt possible */

 BAIF + BAOF; IN: Mono only; OUT: Mono only */

 terminator */

	/*

	 * If both playback/capture channels are dynamic, make sure

	 * at least one channel is present

/*

 * create mixer controls for UAC3 BADD profiles

 *

 * UAC3 BADD device doesn't contain CS descriptors thus we will guess everything

 *

 * BADD device may contain Mixer Unit, which doesn't have any controls, skip it

 Detect BADD capture/playback channels from AS EP descriptors */

		/*

		 * The number of Channels in an AudioStreaming interface

		 * and the audio sample bit resolution (16 bits or 24

		 * bits) can be derived from the wMaxPacketSize field in

		 * the Standard AS Audio Data Endpoint descriptor in

		 * Alternate Setting 1

 check direction */

 check the mapping table */

 Playback */

 Master channel, always writable */

 Mono/Stereo volume channels, always writable */

 Capture */

 Master channel, always writable */

 Mono/Stereo volume channels, always writable */

 Side tone-mixing */

 Master channel, always writable */

 Mono volume channel, always writable */

 Insertion Control */

 Input Term - Insertion control */

 Output Term - Insertion control */

/*

 * create mixer controls

 *

 * walk through all UAC_OUTPUT_TERMINAL descriptors to search for mixers

 check the mapping table */

 skip invalid descriptor */

 mark terminal ID as visited */

 mark terminal ID as visited */

			/*

			 * For UAC2, use the same approach to also add the

			 * clock selectors

 UAC_VERSION_3 */

 mark terminal ID as visited */

			/*

			 * For UAC3, use the same approach to also add the

			 * clock selectors

 invalidate cache, so the value is read from the device */

 invalidate cache, so the value is read from the device */

 master channel */

 TODO */

 TODO */

 switch */

 ignore any notifications not from the control interface */

 UAC_VERSION_2 */

 drop vendor specific and endpoint requests */

 create the handler for the optional status interrupt endpoint */

 we need one interrupt input endpoint */

 stop any bus activity of a mixer */

 master */

 restore cached mixer values */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 unlink for avoiding double-free */

/*

 * free a substream

 not initialized */

/*

 * free a usb stream instance

/*

 * initialize the substream instance.

 Initialize Power Domain to idle status D1 */

 kctl callbacks for usb-audio channel maps */

 check whether a duplicated entry exists in the audiofmt list */

 copy the entry */

 create a chmap kctl assigned to the given USB substream */

 no chmap is found */

 override handlers */

 convert from USB ChannelConfig bits to ALSA chmap element */

 left front */

 right front */

 center front */

 LFE */

 left surround */

 right surround */

 left of center */

 right of center */

 surround */

 side left */

 side right */

 top */

 terminator */

 front left */

 front right */

 front center */

 LFE */

 back left */

 back right */

 front left of center */

 front right of center */

 back center */

 side left */

 side right */

 top center */

 top front left */

 top front center */

 top front right */

 top back left */

 top back center */

 top back right */

 top front left of center */

 top front right of center */

 left LFE */

 right LFE */

 top side left */

 top side right */

 bottom center */

 back left of center */

 back right of center */

 terminator */

		/* If we're missing wChannelConfig, then guess something

 UAC3 device stores channels information in Cluster Descriptors */

			/*

			 * TODO: this conversion is not complete, update it

			 * after adding UAC3 values to asound.h

/*

 * add this endpoint to the chip instance.

 * if a stream with the same endpoint already exists, append to it.

 * if not, create a new pcm stream. note, fp is added to the substream

 * fmt_list and will be freed on the chip instance release. do not free

 * fp or do remove it from the substream fmt_list to avoid double-free.

 look for an empty stream */

 create a new pcm */

	/*

	 * Keep using head insertion for M-Audio Audiophile USB (tm) which has a

	 * fix to swap capture stream order in conf/cards/USB-audio.conf

	/* parsed with a v1 header here. that's ok as we only look at the

 Creamware Noah has this descriptor after the 2nd endpoint */

	/*

	 * If we can't locate the USB_DT_CS_ENDPOINT descriptor in the extra

	 * bytes after the first endpoint, go search the entire interface.

	 * Some devices have it directly *before* the standard endpoint.

 emulate the endpoint attributes of a v1 device */

 UAC_VERSION_3 */

 emulate the endpoint attributes of a v1 device */

/* find an input terminal descriptor (either UAC1 or UAC2) with the given

 * terminal id

 OK to use with both UAC2 and UAC3 */

 get audio formats */

 remember the format value */

 UAC_VERSION_2 */

		/*

		 * lookup the terminal associated to this interface

		 * to extract the clock

 get format type */

	/*

	 * Blue Microphones workaround: The last altsetting is

	 * identical with the previous one, except for a larger

	 * packet size, but is actually a mislabeled two-channel

	 * setting; ignore it.

	 *

	 * Part 2: analyze quirk flag and format

 some quirks for attributes here */

 ok, let's parse further... */

 Create chmap */

	/*

	 * Get number of channels and channel map through

	 * High Capability Cluster Descriptor

	 *

	 * First step: get High Capability header and

	 * read size of Cluster Descriptor

	/*

	 * Second step: allocate needed amount of memory

	 * and request Cluster Descriptor

	/*

	 * lookup the terminal associated to this interface

	 * to extract the clock

 No attributes */

 SNDRV_PCM_RATE_CONTINUOUS */

 ok, let's parse further... */

 parse the interface's altsettings */

	/*

	 * Dallas DS4201 workaround: It presents 5 altsettings, but the last

	 * one misses syncpipe, and does not produce any sound.

 skip invalid one */

 must be isochronous */

 check direction */

		/*

		 * Roland audio streaming interfaces are marked with protocols

		 * 0/1/2, but are UAC 1 compatible.

			/*

			 * Blue Microphones workaround: The last altsetting is

			 * identical with the previous one, except for a larger

			 * packet size, but is actually a mislabeled two-channel

			 * setting; ignore it.

			 *

			 * Part 1: prepare quirk flag

 add endpoints */

 try to set the interface... */

 parse PCM formats */

 parse non-PCM formats */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   USB Audio Driver for ALSA

 *

 *   Quirks and vendor-specific extensions for mixer interfaces

 *

 *   Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>

 *

 *   Many codes borrowed from audio.c by

 *	    Alan Cox (alan@lxorguk.ukuu.org.uk)

 *	    Thomas Sailer (sailer@ife.ee.ethz.ch)

 *

 *   Audio Advantage Micro II support added by:

 *	    Przemek Rudy (prudy1@o2.pl)

/* This function allows for the creation of standard UAC controls.

 * See the quirks for M-Audio FTUs or Ebox-44.

 * If you don't want to set a TLV callback pass NULL.

 *

 * Since there doesn't seem to be a devices that needs a multichannel

 * version, we keep it mono for simplicity.

	/* get_min_max() is called only for integer volumes later,

 Create control */

 Set name */

 set TLV */

 Add control to mixer */

 Offset */, name, tlv_callback);

/*

 * Create a set of standard UAC controls from a table

 don't use snd_usb_mixer_add_control() here, this is a special list element */

/*

 * Sound Blaster remote control configuration

 *

 * format of remote control data:

 * Extigy:       xx 00

 * Audigy 2 NX:  06 80 xx 00 00 00

 * Live! 24-bit: 06 80 xx yy 22 83

 minimum accepted length of the URB result */

 Extigy       */

 Audigy 2 NX  */

 Live! 24-bit */

 Usb X-Fi S51 */

 Usb X-Fi S51 Pro */

 Usb X-Fi S51 Pro */

 Usb X-Fi S51 Pro */

 Toshiba SB0500 */

 the Mute button actually changes the mixer control */

 USB X-Fi S51 Pro */

 name and private_value are set dynamically */

 USB X-Fi S51 doesn't have a CMSS LED */

 USB X-Fi S51 Pro doesn't have one either */

 Live24ext has 2 LEDs only */

 LED on as default */

 &1=Line, &2=Mic*/

 headphones */

 last command, 6 bytes see rc_config above */

 EMU0204 */

 ASUS Xonar U1 / U3 controls */

 Digidesign Mbox 1 helper functions */

 Read clock source */

 spdif sync: buff is all zeroes */

	/* 2 possibilities:	Internal    -> expects sample rate

	 *			S/PDIF sync -> expects rate = 0

 Set clock source */

	/* Hardware gives 2 possibilities:	ANALOG Source  -> 0x01

	 *					S/PDIF Source  -> 0x02

 Read input source */

	/* NB: Setting the input source to S/PDIF resets the clock source to S/PDIF

	 * Hardware expects 2 possibilities:	ANALOG Source  -> 0x01

	 *					S/PDIF Source  -> 0x02

 Set input source */

 Digidesign Mbox 1 clock source switch (internal/spdif) */

 FIXME: hardcoded sample rate */

 Digidesign Mbox 1 input source switch (analog/spdif) */

 Native Instruments device quirks */

 M-Audio FastTrack Ultra quirks */

 FTU Effect switch (also used by C400/C600) */

 Create volume controls for FTU devices*/

 This control needs a volume quirk, see mixer.c */

 This control needs a volume quirk, see mixer.c */

 This control needs a volume quirk, see mixer.c */

 SampleRate ExtensionUnit ID */

 M-Audio Fast Track C400/C600 */

 C400/C600 volume controls, this control needs a volume quirk, see mixer.c */

 This control needs a volume quirk, see mixer.c */

 This control needs a volume quirk, see mixer.c */

 This control needs a volume quirk, see mixer.c */

 { 0x3c, 0x43, 0x3e, 0x45, 0x40, 0x47 } */

 { 0x70, 0x79, 0x72, 0x7b, 0x74, 0x7d, 0x76, 0x7f } */

/*

 * The mixer units for Ebox-44 are corrupt, and even where they

 * are valid they presents mono controls as L and R channels of

 * stereo. So we provide a good mixer here.

/* Audio Advantage Micro II findings:

 *

 * Mapping spdif AES bits to vendor register.bit:

 * AES0: [0 0 0 0 2.3 2.2 2.1 2.0] - default 0x00

 * AES1: [3.3 3.2.3.1.3.0 2.7 2.6 2.5 2.4] - default: 0x01

 * AES2: [0 0 0 0 0 0 0 0]

 * AES3: [0 0 0 0 0 0 x 0] - 'x' bit is set basing on standard usb request

 *                           (UAC_EP_CS_ATTR_SAMPLE_RATE) for Audio Devices

 *

 * power on values:

 * r2: 0x10

 * r3: 0x20 (b7 is zeroed just before playback (except IEC61937) and set

 *           just after it to 0xa0, presumably it disables/mutes some analog

 *           parts when there is no audio.)

 * r9: 0x28

 *

 * Optical transmitter on/off:

 * vendor register.bit: 9.1

 * 0 - on (0x28 register value)

 * 1 - off (0x2a register value)

 *

 use known values for that card: interface#1 altsetting#1 */

 The frequency bits in AES3 cannot be set via register access. */

 Silently ignore any bits from the request that cannot be set. */

 reset value */

 reset value */

 Creative Sound Blaster E1 */

 fix to 0dB playback volumes */

 RME Class Compliant device quirks */

 maximum number of items for AES and S/PDIF rates for above table */

 AES */

 SPDIF */

/*

 * RME Babyface Pro (FS)

 *

 * These devices exposes a couple of DSP functions via request to EP0.

 * Switches are available via control registers, while routing is controlled

 * by controlling the volume on each possible crossing point.

 * Volume control is linear, from -inf (dec. 0) to +6dB (dec. 65536) with

 * 0dB being at dec. 32768.

 -inf

 +6dB

 18 bit linear volume, split so 2 bits end up in index.

 Predfine elements

 Line routing

 PCM routing... yes, it is output remapping

 Control Reg 1

 Control Reg 2

/*

 * Pioneer DJ DJM Mixers

 *

 * These devices generally have options for soft-switching the playback and

 * capture sources in addition to the recording level. Although different

 * devices have different configurations, there seems to be canonical values

 * for specific capture/playback types:  See the definitions of these below.

 *

 * The wValue is masked with the stereo channel number. e.g. Setting Ch2 to

 * capture phono would be 0x0203. Capture, playback and capture level have

 * different wIndexes.

 Capture types

 Playback types

 kcontrol->private_value layout

 device table index

 used for the snd_djm_devices table, so please update accordingly

 The DJM-850 has different values for CD/LINE and LINE capture

 control options than the other DJM declared in this file.

 common DJM capture level option values

 DJM-250MK2

 DJM-750

 DJM-850

 DJM-900NXS2

 DJM-750MK2

 Tascam US-16x08 */

 EMU0204 */

 M-Audio Fast Track C400 */

 M-Audio Fast Track C400 */

 M-Audio Fast Track Ultra */

 M-Audio Fast Track Ultra 8R */

 ASUS Xonar U1 */

 ASUS Xonar U1 (2) */

 ASUS Xonar U3 */

 Audio Advantage Micro II */

 Digidesign Mbox 1 */

 Traktor Audio 6 */

 Traktor Audio 10 */

 Electrix Ebox-44 */

 detection is disabled in mixer_maps.c */

 Focusrite Scarlett 6i6 */

 Focusrite Scarlett 8i6 */

 Focusrite Scarlett 18i6 */

 Focusrite Scarlett 18i8 */

 Focusrite Scarlett 18i20 */

 Focusrite Scarlett 6i6 2nd Gen */

 Focusrite Scarlett 18i8 2nd Gen */

 Focusrite Scarlett 18i20 2nd Gen */

 Focusrite Scarlett Solo 3rd Gen */

 Focusrite Scarlett 2i2 3rd Gen */

 Focusrite Scarlett 4i4 3rd Gen */

 Focusrite Scarlett 8i6 3rd Gen */

 Focusrite Scarlett 18i8 3rd Gen */

 Focusrite Scarlett 18i20 3rd Gen */

 Creative Sound Blaster E1 */

 Dell WD15 dock */

 RME ADI-2 Pro */

 RME ADI-2 DAC */

 RME */

 Presonus Studio 1810c */

 RME Babyface Pro FS */

 Pioneer DJ DJM-250MK2 */

 Pioneer DJ DJM-750 */

 Pioneer DJ DJM-750MK2 */

 Pioneer DJ DJM-850 */

 Pioneer DJ DJM-900NXS2 */

 Dell WD15 dock */

 unit ids specific to Extigy/Audigy 2 NX: */

 remote control */

 digital in jack */

 line in jacks */

 speaker out jacks */

 headphones out jack */

 live24ext: 4 = line-in jack */

 hp-out jack (may actuate Mute) */

	/* Approximation using 10 ranges based on output measurement on hw v1.2.

		/* Some other clearly broken DragonFly variant.

		 * At least a 0..53 variant (hw v1.0) exists.

 AudioQuest DragonFly */

 lowest playback value is muted on C-Media devices */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Clock domain and sample rate management functions

		/*

		 * Assume the clock is valid if clock source supports only one

		 * single sample rate, the terminal is connected directly to it

		 * (there is no clock selector) and clock type is internal.

		 * This is to deal with some Denon DJ controllers that always

		 * reports that clock is invalid.

	/*

	 * MOTU MicroBook IIc

	 * Sample rate changes takes more than 2 seconds for this device. Clock

	 * validity request returns false during that period.

 If a clock source can't tell us whether it's valid, we assume it is */

 first, see if the ID we're looking at is a clock source already */

		/* the entity ID we are looking at is a selector.

 Selector values are one-based */

 Skip setting clock selector again for some devices */

 The current clock source is invalid, try others. */

 FIXME: multipliers only act as pass-thru element for now */

/*

 * For all kinds of sample rate settings and other device queries,

 * the clock source (end-leaf) must be used. However, clock selectors,

 * clock multipliers and sample rate converters may be specified as

 * clock source input to terminal. This functions walks the clock path

 * to its end and tries to find the source.

 *

 * The 'visited' bitfield is used internally to detect recursive loops.

 *

 * Returns the clock source UnitID (>=0) on success, or an error.

 if endpoint doesn't have sampling rate control, bail out */

	/* Don't check the sample rate for devices which we know don't

 the firmware is likely buggy, don't repeat to fail too many times */

 some devices don't support reading */

 three strikes, see above */

 runtime->rate = crate;

/*

 * Try to set the given sample rate:

 *

 * Return 0 if the clock source is read-only, the actual rate on success,

 * or a negative error code.

 *

 * This function gets called from format.c to validate each sample rate, too.

 * Hence no message is shown upon error

	/* First, try to find a valid clock. This may trigger

	 * automatic clock selection if the current clock is not

	 * valid.

		/* We did not find a valid clock, but that might be

		 * because the current sample rate does not match an

		 * external clock source. Try again without validation

		 * and we will do another validation after setting the

		 * rate.

 Hardcoded sample rates */

 continue processing */

 validate clock after rate change */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   (Tentative) USB Audio Driver for ALSA

 *

 *   Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>

 *

 *   Many codes borrowed from audio.c by

 *	    Alan Cox (alan@lxorguk.ukuu.org.uk)

 *	    Thomas Sailer (sailer@ife.ee.ethz.ch)

 *

 *   Audio Class 3.0 support by Ruslan Bilovol <ruslan.bilovol@gmail.com>

 *

 *  NOTES:

 *

 *   - the linked URBs would be preferred but not used so far because of

 *     the instability of unlinking.

 *   - type II is not supported properly.  there is no device which supports

 *     this type *correctly*.  SB extigy looks as if it supports, but it's

 *     indeed an AC3 stream packed in SPDIF frames (i.e. no real AC3 stream).

 Index 0-MAX */

 ID for this card */

 Enable this card */

 Vendor/product IDs for this card */

 device parameter for this card */

/*

 * we keep the snd_usb_audio_t instances by ourselves for merging

 * the all interfaces on the same card as one sound device.

/*

 * disconnect streams

 * called from usb_audio_disconnect()

	/*

	 * Android with both accessory and audio interfaces enabled gets the

	 * interface numbers wrong.

 skip non-supported classes */

 reset the current interface */

/*

 * parse audio control descriptor and create pcm/midi streams

 find audiocontrol interface */

 just to be sure -- this shouldn't hit at all */

			/*

			 * Firmware writers cannot count to three.  So to find

			 * the IAD on the NuForce UDH-100, also check the next

			 * interface.

/*

 * Profile name preset table

 override card->longname */

 vendor/product and profile name presets, sorted in device id order */

 HP Thunderbolt Dock Audio Headset */

 HP Thunderbolt Dock Audio Module */

	/* Two entries for Gigabyte TRX40 Aorus Master:

	 * TRX40 Aorus Master has two USB-audio devices, one for the front

	 * headphone with ESS SABRE9218 DAC chip, while another for the rest

	 * I/O (the rear panel and the front mic) with Realtek ALC1220-VB.

	 * Here we provide two distinct names for making UCM profiles easier.

 Gigabyte TRX40 Aorus Pro WiFi */

 Creative/E-Mu devices */

 Creative/Toshiba Multimedia Center SB-0500 */

 ASUS ROG Strix */

 ASUS PRIME TRX40 PRO-S */

 Dell WD15 Dock */

 Dell WD19 Dock */

	/*

	 * The original product_name is "USB Sound Device", however this name

	 * is also used by the CM106 based cards, so make it unique.

 MSI TRX40 Creator */

 MSI TRX40 */

 Stanton/N2IT Final Scratch v1 device ('Scratchamp') */

 aka. Serato Scratch Live DJ Box */

 Lenovo ThinkStation P620 Rear Line-in, Line-out and Microphone */

 Lenovo ThinkStation P620 Internal Speaker + Front Headset */

 Asrock TRX40 Creator */

 terminator */

/*

 * free the chip instance

 *

 * here we have to do not much, since pcm and controls are already freed

 *

 retrieve the device string as shortname */

 no name available from anywhere, so use ID */

 shortcut - if any pre-defined string is given, use it */

 retrieve the vendor and device strings as longname */

 we don't really care if there isn't any vendor string */

/*

 * create a chip instance and set its names.

 avoid autopm during probing */

 look for a matching quirk alias id */

 defined below */

 look for the corresponding quirk */

 FIXME: this checks only vendor:product pair in the list */

/*

 * probe the active usb device

 *

 * note that this can be called multiple times per a device, when it

 * includes multiple audio control interfaces.

 *

 * thus we check the usb device pointer and creates the card instance

 * only at the first time.  the successive calls of this function will

 * append the pcm interface to the corresponding card.

	/*

	 * found a config.  now register to ALSA

 check whether it's already registered */

 avoid autopm */

		/* it's a fresh one.

		 * now look for an empty slot and create a new card instance

	/*

	 * For devices with more than one control interface, we assume the

	 * first contains the audio controls. We might need a more specific

	 * check here in the future.

 continue */

 need some special handlings */

 create normal USB audio interfaces */

 clear again */

	/* we are allowed to call snd_card_register() many times, but first

	 * check to see if a device needs to skip it or do anything special

 don't want to fail when snd_media_device_create() fails */

		/* chip->active is inside the chip->card object,

		 * decrement before memory is possibly returned.

/*

 * we need to take care of counter, since disconnection can be called also

 * many times as well as usb_audio_probe().

		/* wait until all pending tasks done;

		 * they are protected by snd_usb_lock_shutdown()

 release the pcm resources */

 release the endpoint resources */

 release the midi resources */

		/*

		 * Nice to check quirk && quirk->shares_media_device and

		 * then call the snd_media_device_delete(). Don't have

		 * access to the quirk here. snd_media_device_delete()

		 * accesses mixer_list

 release mixer resources */

 lock the shutdown (disconnect) task and autoresume */

 autosuspend and unlock the shutdown */

 rollback */

 avoid autopm */

	/*

	 * ALSA leaves material resumption to user space

	 * we just notify and restart the mixers

 allow autopm after this point */

 CONFIG_PM */

 Terminating entry */

/*

 * entry point for linux usb interface

 SPDX-License-Identifier: GPL-2.0

/*

 *   Focusrite Scarlett Gen 2/3 Driver for ALSA

 *

 *   Supported models:

 *   - 6i6/18i8/18i20 Gen 2

 *   - Solo/2i2/4i4/8i6/18i8/18i20 Gen 3

 *

 *   Copyright (c) 2018-2021 by Geoffrey D. Bennett <g at b4.vu>

 *   Copyright (c) 2020-2021 by Vladimir Sadovnikov <sadko4u@gmail.com>

 *

 *   Based on the Scarlett (Gen 1) Driver for ALSA:

 *

 *   Copyright (c) 2013 by Tobias Hoffmann

 *   Copyright (c) 2013 by Robin Gareus <robin at gareus.org>

 *   Copyright (c) 2002 by Takashi Iwai <tiwai at suse.de>

 *   Copyright (c) 2014 by Chris J Arges <chris.j.arges at canonical.com>

 *

 *   Many codes borrowed from audio.c by

 *     Alan Cox (alan at lxorguk.ukuu.org.uk)

 *     Thomas Sailer (sailer at ife.ee.ethz.ch)

 *

 *   Code cleanup:

 *   David Henningsson <david.henningsson at canonical.com>

/* The protocol was reverse engineered by looking at the communication

 * between Focusrite Control 2.3.4 and the Focusrite(R) Scarlett 18i20

 * (firmware 1083) using usbmon in July-August 2018.

 *

 * Scarlett 18i8 support added in April 2019.

 *

 * Scarlett 6i6 support added in June 2019 (thanks to Martin Wittmann

 * for providing usbmon output and testing).

 *

 * Scarlett 4i4/8i6 Gen 3 support added in May 2020 (thanks to Laurent

 * Debricon for donating a 4i4 and to Fredrik Unger for providing 8i6

 * usbmon output and testing).

 *

 * Scarlett 18i8/18i20 Gen 3 support added in June 2020 (thanks to

 * Darren Jaeckel, Alex Sedlack, and Clovis Lunel for providing usbmon

 * output, protocol traces and testing).

 *

 * Support for loading mixer volume and mux configuration from the

 * interface during driver initialisation added in May 2021 (thanks to

 * Vladimir Sadovnikov for figuring out how).

 *

 * Support for Solo/2i2 Gen 3 added in May 2021 (thanks to Alexander

 * Vorona for 2i2 protocol traces).

 *

 * Support for phantom power, direct monitoring, speaker switching,

 * and talkback added in May-June 2021.

 *

 * This ALSA mixer gives access to (model-dependent):

 *  - input, output, mixer-matrix muxes

 *  - mixer-matrix gain stages

 *  - gain/volume/mute controls

 *  - level meters

 *  - line/inst level, pad, and air controls

 *  - phantom power, direct monitor, speaker switching, and talkback

 *    controls

 *  - disable/enable MSD mode

 *

 * <ditaa>

 *    /--------------\    18chn            20chn     /--------------\

 *    | Hardware  in +--+------\    /-------------+--+ ALSA PCM out |

 *    \--------------/  |      |    |             |  \--------------/

 *                      |      |    |    /-----\  |

 *                      |      |    |    |     |  |

 *                      |      v    v    v     |  |

 *                      |   +---------------+  |  |

 *                      |    \ Matrix  Mux /   |  |

 *                      |     +-----+-----+    |  |

 *                      |           |          |  |

 *                      |           |18chn     |  |

 *                      |           |          |  |

 *                      |           |     10chn|  |

 *                      |           v          |  |

 *                      |     +------------+   |  |

 *                      |     | Mixer      |   |  |

 *                      |     |     Matrix |   |  |

 *                      |     |            |   |  |

 *                      |     | 18x10 Gain |   |  |

 *                      |     |   stages   |   |  |

 *                      |     +-----+------+   |  |

 *                      |           |          |  |

 *                      |18chn      |10chn     |  |20chn

 *                      |           |          |  |

 *                      |           +----------/  |

 *                      |           |             |

 *                      v           v             v

 *                      ===========================

 *               +---------------+       +--—------------+

 *                \ Output  Mux /         \ Capture Mux /

 *                 +---+---+---+           +-----+-----+

 *                     |   |                     |

 *                10chn|   |                     |18chn

 *                     |   |                     |

 *  /--------------\   |   |                     |   /--------------\

 *  | S/PDIF, ADAT |<--/   |10chn                \-->| ALSA PCM in  |

 *  | Hardware out |       |                         \--------------/

 *  \--------------/       |

 *                         v

 *                  +-------------+    Software gain per channel.

 *                  | Master Gain |<-- 18i20 only: Switch per channel

 *                  +------+------+    to select HW or SW gain control.

 *                         |

 *                         |10chn

 *  /--------------\       |

 *  | Analogue     |<------/

 *  | Hardware out |

 *  \--------------/

 * </ditaa>

 *

 * Gen 3 devices have a Mass Storage Device (MSD) mode where a small

 * disk with registration and driver download information is presented

 * to the host. To access the full functionality of the device without

 * proprietary software, MSD mode can be disabled by:

 * - holding down the 48V button for five seconds while powering on

 *   the device, or

 * - using this driver and alsamixer to change the "MSD Mode" setting

 *   to Off and power-cycling the device

 device_setup value to enable */

 device_setup value to allow turning MSD mode back on */

 some gui mixers can't handle negative ctl values */

 mixer range from -80dB to +6dB in 0.5dB steps */

/* map from (dB + 80) * 2 to mixer value

 * for dB in 0 .. 172: int(8192 * pow(10, ((dB - 160) / 2 / 20)))

 Maximum number of analogue outputs */

 Maximum number of level and pad switches */

 Maximum number of inputs to the mixer */

 Maximum number of outputs from the mixer */

/* Maximum size of the data in the USB mux assignment message:

 * 20 inputs, 20 outputs, 25 matrix inputs, 12 spare

 Maximum number of meters (sum of output port counts) */

/* Hardware port types:

 * - None (no input to mux)

 * - Analogue I/O

 * - S/PDIF I/O

 * - ADAT I/O

 * - Mixer I/O

 * - PCM I/O

 I/O count of each port type kept in struct scarlett2_ports */

 Dim/Mute buttons on the 18i20 */

/* Description of each hardware port type:

 * - id: hardware ID of this port type

 * - src_descr: printf format string for mux input selections

 * - src_num_offset: added to channel number for the fprintf

 * - dst_descr: printf format string for mixer controls

/* Number of mux tables: one for each band of sample rates

 * (44.1/48kHz, 88.2/96kHz, and 176.4/176kHz)

 Maximum number of entries in a mux table */

/* One entry within mux_assignment defines the port type and range of

 * ports to add to the set_mux message. The end of the list is marked

 * with count == 0.

 USB device identifier */

	/* Gen 3 devices have an internal MSD mode switch that needs

	 * to be disabled in order to access the full functionality of

	 * the device.

	/* Gen 3 devices without a mixer have a different

	 * configuration set

 line out hw volume is sw controlled */

 support for main/alt speaker switching */

 support for talkback microphone */

	/* the number of analogue inputs with a software switchable

	 * level control that can be set to line or instrument

 the first input with a level control (0-based) */

	/* the number of analogue inputs with a software switchable

	 * 10dB pad control

	/* the number of analogue inputs with a software switchable

	 * "air" control

 the number of phantom (48V) software switchable controls */

 the number of inputs each phantom switch controls */

	/* the number of direct monitor options

	 * (0 = none, 1 = mono only, 2 = mono/stereo)

	/* remap analogue outputs; 18i8 Gen 3 has "line 3/4" connected

	 * internally to the analogue 7/8 outputs

 additional description for the line out volume controls */

 number of sources/destinations of each port type */

 layout/order of the entries in the set_mux message */

 prevent sending concurrent USB requests */

 lock access to this data */

** Model-specific data ***/

 Supported Gen 2 devices */

 Supported Gen 3 devices */

 End of list */

 get the starting port index number for a given port type/direction */

** USB Interactions ***/

 Notifications from the interface */

 Commands for sending/receiving requests/responses */

 volume status is read together (matches scarlett2_config_items[1]) */

 dim/mute buttons */

 software volume setting */

 actual volume of output inc. dim (-18dB) */

 internal mute buttons */

 sw (0) or hw (1) controlled */

 front panel volume knob */

 Configuration parameters that can be read and written */

/* Location, size, and activation command number for the configuration

 * parameters. Size is in bits and may be 1, 8, or 16.

/* scarlett2_config_items[0] is for devices without a mixer

 * scarlett2_config_items[1] is for devices with a mixer

 Devices without a mixer (Solo and 2i2 Gen 3) */

 Devices with a mixer (Gen 2 and all other Gen 3) */

 proprietary request/response format */

 sequence must go up by 1 for each request */

 Send a proprietary format request to the Scarlett interface */

 build request message and send it */

 send a second message to get the response */

 validate the response */

	/* cmd/seq/size should match except when initialising

	 * seq sent = 1, response = 0

 Send a USB message to get data; result placed in *buf */

 Send a USB message to get configuration parameters; result placed in *buf */

 For byte-sized parameters, retrieve directly into buf */

 For bit-sized parameters, retrieve into value */

 then unpack from value into buf[] */

 Send SCARLETT2_USB_DATA_CMD SCARLETT2_USB_CONFIG_SAVE */

 Delayed work to save config */

 Send a USB message to set a SCARLETT2_CONFIG_* parameter */

 Cancel any pending NVRAM save */

	/* Convert config_item->size in bits to size in bytes and

	 * calculate offset

	/* If updating a bit, retrieve the old value, set/clear the

	 * bit as needed, and update value

 Send the configuration parameter data */

 Activate the change */

 Schedule the change to be written to NVRAM */

 Send a USB message to get sync status; result placed in *sync */

 Send a USB message to get volume status; result placed in *buf */

/* Send a USB message to get the volumes for all inputs of one mix

 * and put the values into private->mix[]

/* Send a USB message to set the volumes for all inputs of one mix

 * (values obtained from private->mix[])

 Convert a port number index (per info->port_count) to a hardware ID */

 Oops */

 Convert a hardware ID to a port number index */

 Oops */

 Convert one mux entry from the interface and load into private->mux[] */

 Send USB message to get mux inputs and then populate private->mux[] */

 Send USB messages to set mux inputs */

 set mux settings for each rate */

 i counts over the output array */

 loop through each entry */

 Empty slots */

			/* Non-empty mux slots use the lower 12 bits

			 * for the destination and next 12 bits for

			 * the source

 Send USB message to get meter levels */

 copy, convert to u16 */

** Control Functions ***/

 helper function to create a new control */

	/* We set USB_MIXER_BESPOKEN type, so that the core USB mixer code

	 * ignores them for resume and other operations.

	 * Also, the head.id field is set to 0, as we don't use this field.

** Sync Control ***/

/* Update sync control after receiving notification that the status

 * has changed

 devices without a mixer also don't support reporting sync status */

** Analogue Line Out Volume Controls ***/

/* Update hardware volume controls after receiving notification that

 * they have changed

 max value */

 max value */

** Mute Switch Controls ***/

 Send mute change to the device */

** HW/SW Volume Switch Controls ***/

 Set/Clear write bits */

 Notify of write bit and possible value change */

	/* Change access mode to RO (hardware controlled volume)

	 * or RW (software controlled volume)

 Reset volume/mute to master volume/mute */

 Set SW volume to current HW volume */

 Set SW mute to current HW mute */

 Send SW/HW switch change to the device */

** Line Level/Instrument Level Switch Controls ***/

 Send switch change to the device */

** Pad Switch Controls ***/

 Send switch change to the device */

** Air Switch Controls ***/

 Send switch change to the device */

** Phantom Switch Controls ***/

 Send switch change to the device */

** Phantom Persistence Control ***/

 Send switch change to the device */

** Direct Monitor Control ***/

	/* monitor_other_enable[0] enables speaker switching

	 * monitor_other_enable[1] enables talkback

	/* monitor_other_switch[0] activates the alternate speakers

	 * monitor_other_switch[1] activates talkback

	/* if it doesn't do speaker switching then it also doesn't do

	 * talkback

 Send switch change to the device */

/* Direct Monitor for Solo is mono-only and only needs a boolean control

 * Direct Monitor for 2i2 is selectable between Off/Mono/Stereo

** Speaker Switching Control ***/

/* when speaker switching gets enabled, switch the main/alt speakers

 * to HW volume and disable those controls

 switch the main/alt speakers to HW volume */

 disable the line out SW/HW switch */

	/* when the next monitor-other notify comes in, update the mux

	 * configuration

/* when speaker switching gets disabled, reenable the hw/sw controls

 * and invalidate the routing

 enable the line out SW/HW switch */

	/* when the next monitor-other notify comes in, update the mux

	 * configuration

 enable/disable speaker switching */

 if speaker switching is enabled, select main or alt */

 update controls if speaker switching gets enabled or disabled */

** Talkback and Talkback Map Controls ***/

 enable/disable talkback */

 if talkback is enabled, select main or alt */

 Send updated bitmap to the device */

** Dim/Mute Controls ***/

 Send switch change to the device */

** Create the analogue output controls ***/

 Add R/O HW volume control */

 Add volume controls */

 Fader */

 Mute Switch */

		/* Make the fader and mute controls read-only if the

		 * SW/HW switch is set to HW

 SW/HW Switch */

			/* Make the switch read-only if the line is

			 * involved in speaker switching

 Add dim/mute controls */

** Create the analogue input controls ***/

 Add input level (line/inst) controls */

 Add input pad controls */

 Add input air controls */

 Add input phantom controls */

** Mixer Volume Controls ***/

 max value */

** Mux Source Selection Controls ***/

** Meter Controls ***/

 devices without a mixer also don't support reporting levels */

** MSD Controls ***/

 Send switch change to the device */

 If MSD mode is off, hide the switch by default */

 Add MSD control */

** Cleanup/Suspend Callbacks ***/

** Initialisation ***/

/* Look through the interface descriptors for the Focusrite Control

 * interface (bInterfaceClass = 255 Vendor Specific Class) and set

 * bInterfaceNumber, bEndpointAddress, wMaxPacketSize, and bInterval

 * in private

 Initialise private data */

 Cargo cult proprietary initialisation sequence */

 step 0 */

 step 1 */

 step 2 */

 Read configuration from the interface on start */

 no other controls are created if MSD mode is on */

 the rest of the configuration is for devices with a mixer */

 Notify on sync change */

 Notify on monitor change */

 if line_out_hw_vol is 0, there are no controls to update */

 Notify on dim/mute change */

 Notify on "input other" change (level/pad/air) */

/* Notify on "monitor other" change (direct monitor, speaker

 * switching, talkback)

	/* if speaker switching was recently enabled or disabled,

	 * invalidate the dim/mute and mux enum controls

 Interrupt callback */

 Find device in scarlett2_devices */

 Initialise private data */

 Send proprietary USB initialisation sequence */

 Read volume levels and controls from the interface */

 Create the MSD control */

 If MSD mode is enabled, don't create any other controls */

 Create the analogue output controls */

 Create the analogue input controls */

 Create the input, output, and mixer mux input selections */

 Create the matrix mixer controls */

 Create the level meter controls */

 Create the sync control */

 Create the direct monitor control */

 Create the speaker switching control */

 Create the talkback controls */

 Set up the interrupt polling */

 only use UAC_VERSION_2 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

/*

 * handle the quirks for the contained interfaces

/*

 * create a stream for an interface with proper descriptors

 reset the current interface */

/* create the audio stream and the corresponding endpoints from the fixed

 * audioformat object; this is used for quirks with the fixed EPs

/*

 * create a stream for an endpoint/altsetting without proper descriptors

 unlink for avoiding double-free */

	/*

	 * Most Roland/Yamaha audio streaming interfaces have more or less

	 * standard descriptors, but older devices might lack descriptors, and

	 * future ones might change, so ensure that we fail silently if the

	 * interface doesn't look exactly right.

 must have a non-zero altsetting for streaming */

 must have an isochronous endpoint for streaming */

 must have format descriptors */

 must have some valid jack descriptors */

 might have a vendor-specific descriptor <06 24 F1 02 ...> */

 must have the MIDIStreaming interface header descriptor*/

 must have the MIDIStreaming endpoint descriptor*/

 must have at least one bulk/interrupt endpoint for streaming */

 Yamaha */

 Roland */

	/*

	 * ALSA PCM playback/capture devices cannot be registered in two steps,

	 * so we have to claim the other corresponding interface here.

/*

 * Create a stream for an Edirol UA-700/UA-25/UA-4FX interface.  

 * The only way to detect the sample rate is by looking at wMaxPacketSize.

 both PCM and MIDI interfaces have 2 or more altsettings */

 unlink for avoiding double-free */

/*

 * Create a standard mixer for the specified interface.

/*

 * audio-interface quirks

 *

 * returns zero if no standard audio/MIDI parsing is needed.

 * returns a positive value if standard audio/midi interfaces are parsed

 * after this.

 * returns a negative value at error.

/*

 * boot quirks

 Send message to force it to reconnect with full interface. */

 quit this anyway */

		/* This function has to be available by the usb core module.

		 * if it is not avialable the boot quirk has to be left out

		 * and the configuration has to be set by udev or hotplug

		 * rules

		/* Always return an error, so that we stop creating a device

		   that will just be destroyed and recreated with a new

/*

 * C-Media CM106/CM106+ have four 16-bit internal registers that are nicely

 * documented in the device's data sheet.

	/*

	 * Enable line-out driver mode, set headphone source to front

	 * channels, enable stereo mic.

/*

 * CM6206 registers from the CM6206 datasheet rev 2.1

 Bit 4 thru 11 is the S/PDIF category code */

 Bit 11..13 sets the sensitivity to FLY tuner volume control VP/VD signal */

		/*

		 * Values here are chosen based on sniffing USB traffic

		 * under Windows.

		 *

		 * REG0: DAC is master, sample rate 48kHz, no copyright

		/*

		 * REG1: PLL binary search enable, soft mute enable.

		/*

		 * REG2: enable output drivers,

		 * select front channels to the headphone output,

		 * then mute the headphone channels, run the MCU

		 * at 1.5 MHz.

		/*

		 * REG3: default flyspeed, set 2.5V mic bias

		 * enable all line out ports and enable SPDIF

 REG4 is just a bunch of GPIO lines */

 REG5: de-assert AD/DA reset signals */

 quirk for Plantronics GameCom 780 with CM6302 chip */

	/* set the initial volume and don't change; other values are either

	 * too loud or silent due to firmware bug (bko#65251)

/*

 * Novation Twitch DJ controller

 * Focusrite Novation Saffire 6 USB audio card

	/* preemptively set up the device because otherwise the

/*

 * This call will put the synth in "USB send" mode, i.e it will send MIDI

 * messages through USB (this is disabled at startup). The synth will

 * acknowledge by sending a sysex on endpoint 0x85 and by displaying a USB

 * sign on its LCD. Values here are chosen based on sniffing USB traffic

 * under Windows.

 "midi send" enable */

/*

 * Some sound cards from Native Instruments are in fact compliant to the USB

 * audio standard of version 2 and other approved USB standards, even though

 * they come up as vendor-specific device when first connected.

 *

 * However, they can be told to come up with a new set of descriptors

 * upon their next enumeration, and the interfaces announced by the new

 * descriptors will then be handled by the kernel's class drivers. As the

 * product ID will also change, no further checks are required.

	/* return -EAGAIN, so the creation of an audio interface for this

	 * temporary device is aborted. The device will reconnect with a

 Choose 48000Hz permanently */

 Send the magic! */

/* Digidesign Mbox 2 needs to load firmware onboard

 * and driver must wait a few seconds for initialisation.

 Hard coded into the device */

 Hard coded into the device */

 0.5 second delay */

 Control magic - load onboard firmware */

 Successful boot */

	/* If the Axe-Fx III has not fully booted, it will timeout when trying

	 * to enable the audio streaming interface. A more generous timeout is

	 * used here to detect when the Axe-Fx III has finished booting as the

	 * set interface message will be acked once it has

 First we tell the device which sample rate to use. */

 Then we poll every 100 ms until the device informs of its readiness. */

		/* the device signals its readiness through a message of the

		 * form

		 *           XX 06 00 00 00 00 0b 18  00 00 00 01

		 * If the device is not yet ready to accept audio data, the

		 * last byte of that sequence is 00.

/*

 * Setup quirks

 parse device_setup */

 use only "win-compatible" interfaces */

 enable DTS Digital Output */

 48-96kHz rate if set, 8-48kHz otherwise */

 24bits sample if set, 16bits otherwise */

 enable Digital Input */

 bit mask for setup value */

 24bits+48kHz+Digital Input */

 24bits+48kHz+No Digital Input */

 16bits+48kHz+Digital Input */

 16bits+48kHz+No Digital Input */

	/* Reset ALL ifaces to 0 altsetting.

	 * Call it for every possible altsetting of every interface.

 skip all interfaces but 1 and 2 */

 skip interfaces 1 and 2 */

 skip this altsetting */

 skip this altsetting */

 skip this altsetting */

 skip this altsetting */

 keep this altsetting */

	/* Reset ALL ifaces to 0 altsetting.

	 * Call it for every possible altsetting of every interface.

 skip this altsetting */

 skip this altsetting */

 skip this altsetting */

 skip this altsetting */

 skip this altsetting */

 skip this altsetting */

 keep this altsetting */

	/* Reset ALL ifaces to 0 altsetting.

	 * Call it for every possible altsetting of every interface.

	/* possible configuration where both inputs and only one output is

	 *used is not supported by the current setup

 no analog input */

 enable only altsets 2 and 5 */

 disable digialt input */

 enalbe only altsets 2 and 5 */

 keep only 16-Bit mode */

 keep this altsetting */

	/*

	 * Altno settings:

	 *

	 * Playback (Interface 1):

	 * 1: 6 Analog + 2 S/PDIF

	 * 2: 6 Analog + 2 S/PDIF

	 * 3: 6 Analog

	 *

	 * Capture (Interface 2):

	 * 1: 8 Analog + 2 S/PDIF + 8 ADAT

	 * 2: 8 Analog + 2 S/PDIF + 4 ADAT

	 * 3: 8 Analog

	/*

	 * I'll leave 2 as the default one and

	 * use device_setup to switch to the

	 * other two.

 audiophile usb: skip altsets incompatible with device_setup */

 quattro usb: skip altsets incompatible with device_setup */

 fasttrackpro usb: skip altsets incompatible with device_setup */

 presonus studio 1810c: skip altsets incompatible with device_setup */

 SB Extigy needs special boot-up sequence */

 if more models come, this will go to the quirk list. */

 SB Audigy 2 NX needs its own boot-up magic, too */

 C-Media CM106 / Turtle Beach Audio Advantage Roadie */

 C-Media CM6206 / CM106-Like Sound Device */

 Terratec Aureon 7.1 USB */

 Digidesign Mbox 2 */

 Focusrite Novation Saffire 6 USB */

 Focusrite Novation Twitch */

 Access Music VirusTI Desktop */

 Komplete Audio 6 */

 Traktor Audio 6 */

 Traktor Audio 10 */

 M-Audio Fast Track Pro USB */

 Plantronics Gamecom 780 */

 Fractal Audio Axe-Fx 3 */

 MOTU MicroBook II */

		/*

		 * For some reason interface 3 with vendor-spec class is

		 * detected on MicroBook IIc.

 MOTU M Series */

/*

 * check if the device uses big-endian samples

 it depends on altsetting whether the device is big-endian or not */

 M-Audio Quattro: captured data only */

 M-Audio Audiophile USB */

 M-Audio Fast Track Pro */

/*

 * For E-Mu 0404USB/0202USB/TrackerPre/0204 sample rate should be set for device,

 * not for interface.

	/* When capture is active

	 * sample rate shouldn't be changed

	 * by playback substream

 Convert to little endian

 we should derive windex from fmt-sync_ep but it's not set

 E-Mu 0202 USB */

 E-Mu 0404 USB */

 E-Mu Tracker Pre */

 E-Mu 0204 USB */

 MacroSilicon MS2109 */

 Pioneer DJM-450 */

 Pioneer DJM-750 */

 Pioneer DJM-850 */

		/* First switch to alt set 0, otherwise the mode switch cmd

		 * will not be accepted by the DAC

 Delay needed after setting the interface */

 Vendor mode switch cmd is required. */

 DSD mode (DSD_U32) requested */

 PCM or DOP mode (S32) requested */

 PCM mode (S16) requested */

	/*

	 * "Playback Design" products send bogus feedback data at the start

	 * of the stream. Ignore them.

	/*

	 * M-Audio Fast Track C400/C600 - when packets are not skipped, real

	 * world latency varies by approx. +/- 50 frames (at 96kHz) each time

	 * the stream is (re)started. When skipping packets 16 at endpoint

	 * start up, the real world latency is stable within +/- 1 frame (also

	 * across power cycles).

 Work around devices that report unreasonable feedback data */

 TEAC UD-H01 */

 T+A Dac8 */

 quirk applied after snd_usb_ctl_msg(); not applied during boot quirks */

/*

 * snd_usb_interface_dsd_format_quirks() is called from format.c to

 * augment the PCM format bit-field for DSD types. The UAC standards

 * don't have a designated bit field to denote DSD-capable interfaces,

 * hence all hardware that is known to support this format has to be

 * listed here.

 Playback Designs */

 XMOS based USB DACs */

 AURALiC VEGA */

 LH Labs VI DAC Infinity */

 Pro-Ject Pre Box S2 Digital */

 Hegel HD12 DSD */

 The Bit Opus #3; with fp->dsd_raw */

 NuPrime DAC-10 */

 Encore mDSD */

 Furutech ADL Stratos */

 NuPrime Audio DAC-9 */

 Bryston BDA3 */

 HDTA Serenade DSD */

 M2Tech Young MkIII */

 PS Audio NuWave DAC */

 Audiolab M-DAC+ */

 W4S DAC-2v2SE */

 Mutec MC3+ USB */

 MSB Technology */

 Amanero Combo384 USB based DACs with native DSD support */

 Amanero - Combo384 */

 T+A DAC8DSD-V2.0, MP1000E-V2.0, MP2000R-V2.0, MP2500R-V2.0, MP3100HV-V2.0 */

 T+A USB HD Audio 1 */

 T+A USB HD Audio 2 */

 ITF-USB DSD based DACs */

		/* Altsetting 2 support native DSD if the num of altsets is

		 * three (0-2),

		 * Altsetting 3 support native DSD if the num of altsets is

		 * four (0-3).

 Mostly generic method to detect many DSD-capable implementations */

 AudioTrak Optoplay */

		/* Optoplay sets the sample rate attribute although

		 * it seems not supporting it in fact.

 Creative SB Audigy 2 NX */

 M-Audio Audiophile USB */

 doesn't set the sample rate attribute, but supports it */

 M-Audio Quattro USB */

 M-Audio Fast Track Pro USB */

 plantronics headset */

	case USB_ID(0x077d, 0x07af): /* Griffin iMic (note that there is

	/*

	 * plantronics headset and Griffin iMic have set adaptive-in

	 * although it's really not...

 MOTU MicroBook IIc */

		/*

		 * MaxPacketsOnly attribute is erroneously set in endpoint

		 * descriptors. As a result this card produces noise with

		 * all sample rates other than 96 kHz.

 Jieli Technology USB PHY 2.0 */

 mic works only when ep packet size is set to wMaxPacketSize */

/*

 * registration quirk:

 * the registration is skipped if a device matches with the given ID,

 * unless the interface reaches to the defined one.  This is for delaying

 * the registration until the last known interface, so that the card and

 * devices appear at the same time.

 composed via USB_ID() */

 the interface to trigger register */

 Kingston HyperX AMP */

 Kingston HyperX Cloud Alpha S */

 Kingston HyperX Cloud Flight S */

 JBL Quantum 600 */

 JBL Quantum 800 */

 JBL Quantum 400 */

 JBL Quantum 400 */

 JBL Quantum 600 */

 JBL Quantum 800 */

 terminator */

 return true if skipping registration */

 Register as normal */

/*

 * driver behavior quirk flags

 Device matches */

 Creative SB Extigy */

 Creative Live Cam VF0610 */

 Logitech ConferenceCam Connect */

 Logitech QuickCam Pro */

 Logitech QuickCam E 3500 */

 Benchmark DAC1 Pre */

 Samsung USBC Headset (AKG) */

 Sony WALKMAN NW-A45 DAC */

 Phoenix Audio TMX320VC */

 ELP HD USB Camera */

 Bose Companion 5 */

 Syntek STK1160 */

 Hauppauge Woodbury */

 TEAC UD-501/UD-501V2/UD-503/NT-503 */

 Esoteric D-05X */

 TEAC UD-301 */

 Hercules DJ Console (Windows Edition) */

 Hercules DJ Console (Macintosh Edition) */

 Outlaw RR2150 (Micronas UAC3553B) */

 LineX FM Transmitter */

 Kingston HyperX */

 Jabra 550a */

 Hauppauge HVR-950Q */

 Sennheiser DECT */

 Serato Phono */

 Denon DCD-1500RE */

 Denon DA-300USB */

 Marantz HD-DAC1 */

 Marantz SA-14S1 */

 Denon DN-X1600 */

 Zoom R16/24 */

 Lenovo ThinkStation P620 Rear Line-in, Line-out and Microphone */

 Lenovo ThinkStation P620 Internal Speaker + Front Headset */

 Luxman DA-06 */

 GE B850V3 CP2114 audio interface */

 Hauppauge HVR-950Q */

 Hauppauge HVR-950Q-MXL */

 Hauppauge HVR-950Q */

 Hauppauge HVR-950Q-MXL */

 Hauppauge HVR-950Q */

 Hauppauge HVR-950Q */

 Hauppauge HVR-950Q */

 Hauppauge HVR-950Q */

 Hauppauge HVR-950Q */

 Hauppauge HVR-850 */

 Hauppauge HVR-950Q */

 Hauppauge HVR-950Q */

 Hauppauge HVR-950Q */

 Hauppauge HVR-950Q-MXL */

 Hauppauge Woodbury */

 AudioQuest DragonFly */

 Audient iD14 */

 Audioengine D1 */

 Schiit Hel */

 Dell AE515 sound bar */

 MacroSilicon MS2109 */

 Jieli Technology USB PHY 2.0 */

 Vendor matches */

 MS Lifecam */

 Logitech */

 Plantronics */

 TEAC Corp. */

 MOTU */

 Focusrite Novation */

 Thesycon devices */

 Phoenix Audio */

 XMOS based devices */

 Oppo */

 Playback Design */

 Mytek devices */

 Rotel? */

 Gustard/Ess based devices */

 FiiO devices */

 T+A devices */

 Khadas devices */

 EVGA */

 HiBy devices */

 terminator */

 SPDX-License-Identifier: GPL-2.0-or-later



 Special handling for implicit feedback mode



 generic playback + capture (for BOSS) */

 Implicit feedback quirk table for playback */

 Generic matching */

 Steinberg UR22 */

 M-Audio FastTrack Ultra */

 M-Audio FastTrack Ultra */

 M-Audio Fast Track C400 */

 M-Audio Fast Track C600 */

 Fixed EP */

 FIXME: check the availability of generic matching */

 Fractal Audio Axe-Fx III */

 Solid State Logic SSL2 */

 Solid State Logic SSL2+ */

 Steinberg UR22C */

 RTX6001 */

 Allen&Heath Qu-16 */

 Zoom UAC-2 */

 Fractal Audio Axe-Fx II */

 Yamaha MODX */

 Special matching */

 MicroBook IIc */

 ep = 0x84, ifnum = 0 */

 MOTU MicroBook II */

 terminator */

 Implicit feedback quirk table for capture: only FIXED type */

 terminator */

 set up sync EP information on the audioformat */

 Check whether the given UAC2 iface:altset points to an implicit fb source */

 Like the UAC2 case above, but specific to Roland with vendor class and hack */

 only when both streams are with ASYNC type */

 check capture EP */

 capture quirk for Roland device; always full-duplex */

/* Playback and capture EPs on Pioneer devices share the same iface/altset

 * for the implicit feedback operation

 More generic quirk: look for the sync EP next to the data EP */

/* Setup an implicit feedback endpoint from a quirk. Returns 0 if no quirk

 * applies. Returns 1 if a quirk was found.

 No quirk */

 Special handling for devices with capture quirks */

 no quirk */

 Generic UAC2 implicit feedback */

 Roland/BOSS implicit feedback with vendor spec class */

 Pioneer devices with vendor spec class */

 Try the generic implicit fb if available */

 No quirk */

 same for capture, but only handling FIXED entry */

 Roland/BOSS need full-duplex streams */

 skip the quirk, also don't handle generic sync EP */

/*

 * Parse altset and set up implicit feedback endpoint on the audioformat

/*

 * Return the score of matching two audioformats.

 * Veto the audioformat if:

 * - It has no channels for some reason.

 * - Requested PCM format is not supported.

 * - Requested sample rate is not supported.

/*

 * Return the audioformat that is suitable for the implicit fb

 Use the original audioformat as fallback for the shared altset */

 SPDX-License-Identifier: GPL-2.0

/*

 *   UAC3 Power Domain state management functions

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Tascam US-16x08 ALSA driver

 *

 *   Copyright (c) 2016 by Detlef Urban (onkel@paraair.de)

 USB control message templates */

 input from master (0x02) or input from computer bus (0x03) */

 input index (0x01/0x02 eq. left/right) or bus (0x01-0x08) */

 output index (0x01-0x08) */

 default message head, equal to all mixers */

 0x06: Controller ID */

 0x07:  */

 0x08: Value of common mixer */

 default message head, equal to all mixers */

 0x06: Controller ID */

                    0x07:  */

                    0x08: Value of common mixer */

 on/off flag */

 on/off flag */

 default message head, equal to all mixers */

 0x08: Threshold db (8) (e0 ... 00) (+-0dB -- -32dB) x-32 */

 0x0b: Ratio (0a,0b,0d,0f,11,14,19,1e,23,28,32,3c,50,a0,ff)  */

 0x0e: Attack (0x02 ... 0xc0) (2ms ... 200ms) */

 0x11: Release (0x01 ... 0x64) (10ms ... 1000ms) x*10  */

 0x14: gain (0 ... 20) (0dB .. 20dB) */

 0x1a: main Comp switch (0 ... 1) (off ... on)) */

 default message head, equal to all mixers */

                0x06: Controller ID  */

 0x08: EQ set num (0x01..0x04) (LOW, LOWMID, HIGHMID, HIGH)) */

 0x0b: value dB (0 ... 12) (-12db .. +12db)  x-6 */

 0x0e: value freq (32-47) (1.7kHz..18kHz) */

 0x11: band width (0-6) (Q16-Q0.25)  2^x/4 (EQ xxMID only) */

 0x14: main EQ switch (0 ... 1) (off ... on)) */

 compressor ratio map */

 route enumeration names */

/* wrapper function to send prepared URB buffer to usb device. Return an error

 * code if something went wrong

 route has no bias */

  get the new value (no bias for routes) */

 sanity check */

 prepare the message buffer from template */

 input comes from a master channel */

 input comes from a computer channel */

 place new route selection in URB message */

 place route selector in URB message */

 new control value incl. bias*/

 sanity check */

 prepare the message buffer from template */

 place channel selector in URB message */

 prepare the message buffer from template */

 gets a current mixer value from common store */

 sanity check */

 prepare URB message from template */

 add the bias to the new value */

 sanity check */

 new control value incl. bias*/

 prepare compressor URB message from template  */

 place comp values in message buffer watch bias! */

 place channel selector in message buffer */

 get low switch from cache is enough, cause all bands are together */

 new control value incl. bias*/

 prepare URB message from EQ template */

 place channel index in URB message */

 all four EQ bands have to be enabled/disabled in once */

 sanity check */

 copy URB buffer from EQ template */

 place channel index in URB buffer */

 place EQ band in URB buffer */

 store new value in EQ band cache */

 calculate compressor index for reduction level request */

 any channel active */

 check for stereo link */

 reset comp_index to left channel*/

 no stereo link */

 skip channels with no compressor active */

 retrieve the meter level values from URB message */

/* Function to retrieve current meter values from the device.

 *

 * The device needs to be polled for meter values with an initial

 * requests. It will return with a sequence of different meter value

 * packages. The first request (case 0:) initiate this meter response sequence.

 * After the third response, an additional request can be placed,

 * to retrieve compressor reduction level value for given channel. This round

 * trip channel selector will skip all inactive compressors.

 * A mixer can interrupt this round-trip by selecting one ore two (stereo-link)

 * specific channels.

 sanity check */

max*/

 control store preparation */

 setup compressor store and assign default value */

 setup EQ store and assign default values */

 EQ Low */

 EQ Mid low */

 EQ Mid High */

 EQ High */

 release elem->private_free as well; called only once for each *_store */

 table of EQ controls */

 EQ switch */

 EQ low gain */

 EQ low freq */

 EQ mid low gain */

 EQ mid low freq */

 EQ mid low Q */

 EQ mid high gain */

 EQ mid high freq */

 EQ mid high Q */

 EQ high gain */

 EQ low freq */

 table of compressor controls */

 Comp enable */

 Comp threshold */

 Comp ratio */

 Comp attack */

 Comp release */

 Comp gain */

 table of channel controls */

 Phase */

 Fader */

 Mute */

 Pan */

 table of master controls */

 Master */

 Bypass */

 Buss out */

 Master mute */

 just check for non-MIDI interface */

 add routing control */

 create compressor mixer elements */

 add master controls */

 release comp_store only once */

 add channel controls */

 create eq store */

 add EQ controls */

 release eq_store only once */

 add compressor controls */

 create meters store */

		/* meter function 'get' must access to compressor store

		 * so place a reference here

/*

 * usbmidi.c - ALSA USB MIDI driver

 *

 * Copyright (c) 2002-2009 Clemens Ladisch

 * All rights reserved.

 *

 * Based on the OSS usb-midi driver by NAGANO Daisuke,

 *          NetBSD's umidi driver by Takuya SHIOZAKI,

 *          the "USB Device Class Definition for MIDI Devices" by Roland

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions, and the following disclaimer,

 *    without modification.

 * 2. The name of the author may not be used to endorse or promote products

 *    derived from this software without specific prior written permission.

 *

 * Alternatively, this software may be distributed and/or modified under the

 * terms of the GNU General Public License as published by the Free Software

 * Foundation; either version 2 of the License, or (at your option) any later

 * version.

 *

 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND

 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR

 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF

 * SUCH DAMAGE.

/*

 * define this to log all USB packets

 #define DUMP_PACKETS */

/*

 * how long to wait after some USB errors, so that hub_wq can disconnect() us

 * without too many spurious errors

 size of urb buffer */

 cable number << 4 */

/*

 * Submits the URB, with error handling.

/*

 * Error handling for URB completion functions.

 manually unlinked, or device gone */

 errors that might occur during unplugging */

 continue */

/*

 * Receives a chunk of MIDI data.

 nothing */

/*

 * Processes the data read from the device.

/*

 * This is called when some data should be transferred to the device

 * (from one or more substreams).

 called after transfers had been interrupted due to some USB error */

 helper function to send static data that may not DMA-able */

/*

 * Standard USB MIDI protocol: see the spec.

 * Midiman protocol: like the standard protocol, but the control byte is the

 * fourth byte in each packet, and uses length instead of CIN.

/*

 * Buggy M-Audio device: running status on input results in a packet that has

 * the data bytes but not the status byte and that is marked with CIN 4.

 realtime msg: no running status change */

 channel msg */

 CIN 4 that is not a SysEx */

				/*

				 * All other msgs cannot begin running status.

				 * (A channel msg sent as two or three CIN 0xF

				 * packets could in theory, but this device

				 * doesn't use this format.)

/*

 * QinHeng CH345 is buggy: every second packet inside a SysEx has not CIN 4

 * but the previously seen CIN, but still with three data bytes.

			/*

			 * Either a corrupted running status or a real note-on

			 * message; impossible to detect reliably.

/*

 * CME protocol: like the standard protocol, but SysEx commands are sent as a

 * single USB packet preceded by a 0x0F byte.

/*

 * Adds one USB MIDI packet to the output buffer.

/*

 * Adds one Midiman packet to the output buffer.

/*

 * Converts MIDI commands to USB MIDI packets.

 b < 0x80 */

 FIXME: lower-numbered ports can starve higher-numbered ports */

/*

 * AKAI MPD16 protocol:

 *

 * For control port (endpoint 1):

 * ==============================

 * One or more chunks consisting of first byte of (0x10 | msg_len) and then a

 * SysEx message (msg_len=9 bytes long).

 *

 * For data port (endpoint 2):

 * ===========================

 * One or more chunks consisting of first byte of (0x20 | msg_len) and then a

 * MIDI message (msg_len bytes long)

 *

 * Messages sent: Active Sense, Note On, Poly Pressure, Control Change.

 only try adding more data when there's space for at least 1 SysEx */

 try to skip non-SysEx data */

 look for the start or end marker */

 next SysEx started before the end of current one */

 it's incomplete - drop it */

 SysEx complete */

 queue it, ack it, and get the next one */

 less than 9 bytes and no end byte - wait for more */

 9 bytes and no end marker in sight - malformed, skip it */

/*

 * Novation USB MIDI protocol: number of data bytes is in the first byte

 * (when receiving) (+1!) or in the second byte (when sending); data begins

 * at the third byte.

/*

 * "raw" protocol: just move raw MIDI bytes from/to the endpoint

/*

 * FTDI protocol: raw MIDI bytes, but input packets have two modem status bytes.

/*

 * Emagic USB MIDI protocol: raw MIDI with "F5 xx" port switching.

 initialization magic: "get version" */

 Emagic */

 Unitor8 */

 version number request */

 command version */

 EEPROM, box 0 */

 while we're at it, pour on more magic */

 switch to patch mode with last preset */

 Emagic */

 Unitor8 */

 patch switch command */

 command version */

 to all boxes */

 last preset in EEPROM */

 FF indicates end of valid data */

 handle F5 at end of last buffer */

 determine size of data until next F5 */

 assert(buffer[0] == 0xf5); */

 round-robin, starting at the last current port */

			/* gobble up remaining bytes to prevent wait in

	/*

	 * The substream buffer is empty, but some data might still be in the

	 * currently active URBs, so we have to wait for those to complete.

/*

 * Frees an input endpoint.

 * May be called when ep hasn't been initialized completely.

/*

 * Creates an input endpoint.

/*

 * Frees an output endpoint.

 * May be called when ep hasn't been initialized completely.

/*

 * Creates an output endpoint, and initializes output ports.

		/*

		 * Various chips declare a packet size larger than 4 bytes, but

		 * do not actually work with larger packets:

 Medeli DD305 */

 ESI M4U */

 RedOctane GH MIDI INTERFACE */

 Textech USB Midi Cable */

 Textech USB Midi Cable */

 QinHeng CH345 "USB2.0-MIDI" */

 Unknown vendor Cable */

		/*

		 * Some devices only work with 9 bytes packet size:

 Tascam US-122L */

 Tascam US-144 */

/*

 * Frees everything.

/*

 * Unlinks all URBs (must be done before the usb_device is deleted).

	/*

	 * an URB's completion handler may start the timer and

	 * a timer may submit an URB. To reliably break the cycle

	 * a flag under lock must be used

 free endpoints here; later call can result in Oops */

/*

 * This list specifies names for ports that do not fit into the standard

 * "(product) MIDI (n)" schema because they aren't external MIDI ports,

 * such as internal control or synthesizer ports.

 Yamaha MOTIF XF */

 Roland UA-100 */

 Roland SC-8850 */

 Roland U-8 */

 Roland SC-8820 */

 Roland SK-500 */

 Roland SC-D70 */

 Edirol UM-880 */

 Edirol SD-90 */

 Edirol UM-550 */

 Edirol SD-20 */

 Edirol SD-80 */

 Edirol UA-700 */

 Roland VariOS */

 Edirol PCR */

 BOSS GS-10 */

 Edirol UA-1000 */

 Edirol UR-80 */

 Edirol PCR-A */

 BOSS GT-PRO */

 Edirol UM-3EX */

 Roland VG-99 */

 Cakewalk Sonar V-Studio 100 */

 Roland VB-99 */

 Roland A-PRO */

 Roland SD-50 */

 Roland OCTA-CAPTURE */

 Roland SPD-SX */

 Roland A-Series */

 Roland INTEGRA-7 */

 M-Audio MidiSport 8x8 */

 MOTU Fastlane */

 Emagic Unitor8/AMT8/MT4 */

 Akai MPD16 */

 Access Music Virus TI */

 TODO: read port flags from descriptors */

 in jacks connect to outs */

 and out jacks connect to ins */

/*

 * Creates the endpoints and their ports.

/*

 * Returns MIDIStreaming device capabilities.

				/*

				 * Low speed bulk transfers don't exist, so

				 * force interrupt transfers for devices like

				 * ESI MIDI Mate that try to use them anyway.

/*

 * On Roland devices, use the second alternate setting to be able to use

 * the interrupt input endpoint.

       /* If either or both of the endpoints support interrupt transfer,

        * then use the alternate setting

/*

 * Try to find any usable endpoints in the interface.

/*

 * Detects the endpoints for one-port-per-endpoint protocols.

/*

 * Detects the endpoints and ports of Yamaha devices.

	/*

	 * For each port there is one MIDI_IN/OUT_JACK descriptor, not

	 * necessarily with any useful contents.  So simply count 'em.

/*

 * Detects the endpoints and ports of Roland devices.

	/*

	 * Some devices have a descriptor <06 24 F1 02 <inputs> <outputs>>,

	 * some have standard class descriptors, or both kinds, or neither.

/*

 * Creates the endpoints and their ports for Midiman devices.

	/*

	 * The various MidiSport devices have more or less random endpoint

	 * numbers, so we have to identify the endpoints by their index in

	 * the descriptor array, like the driver for that other OS does.

	 *

	 * There is one interrupt input endpoint for all input ports, one

	 * bulk output endpoint for even-numbered ports, and one for odd-

	 * numbered ports.  Both bulk output endpoints have corresponding

	 * input bulk endpoints (at indices 1 and 3) which aren't used.

 prevent trying to find jack */,

 prevent trying to find jack */,

/*

 * Temporarily stop input.

/*

 * Resume input after a call to snd_usbmidi_input_stop().

/*

 * Prepare for suspend. Typically called from the USB suspend callback.

/*

 * Resume. Typically called from the USB resume callback.

/*

 * Creates and registers everything needed for a MIDI streaming interface.

 detect the endpoint(s) to use */

 M-Audio Uno */

		/*

		 * Interface 1 contains isochronous endpoints, but with the same

		 * numbers as in interface 0.  Since it is interface 1 that the

		 * USB core has most recently seen, these descriptors are now

		 * associated with the endpoint numbers.  This will foul up our

		 * attempts to submit bulk/interrupt URBs to the endpoints in

		 * interface 0, so we have to make sure that the USB core looks

		 * again at interface 0 by calling usb_set_interface() on it.

 MOTU Fastlane */

 endpoint 1 is input-only */

 set baud rate to 31250 (48 MHz / 16 / 96) */

 create rawmidi device */

 create endpoint/port structures */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 return the estimated delay based on USB frame counters */

	/*

	 * HCD implementations use different widths, use lower 8 bits.

	 * The delay will be managed up to 256ms, which is more than

	 * enough

	/* Approximation based on number of samples per USB frame (ms),

/*

 * return the current pcm pointer.  just based on the hwptr_done value.

/*

 * find a matching audio format

		/* avoid async out and adaptive in if the other method

		 * supports the same format.

		 * this is a workaround for the case like

		 * M-audio audiophile USB.

 find the format with the largest max. packet size */

/*

 * initialize the pitch control and sample rate

 if endpoint doesn't have pitch control, bail out */

 PCM sync_stop callback */

 Set up sync endpoint */

 matched */

	/*

	 * Generic sync EP handling

	/*

	 * In case of illegal SYNC_NONE for OUT endpoint, we keep going to see

	 * if we don't find a sync endpoint, as on M-Audio Transit. In case of

	 * error fall back to SYNC mode and don't create sync endpoint

 check sync-pipe endpoint */

	/* ... and check descriptor size before accessing bSynchAddress

	   because there is a version of the SB Audigy 2 NX firmware lacking

 stop any running stream beforehand */

/*

 * hw_params callback

 *

 * allocate a buffer and set the given audio format.

 *

 * so far we use a physically linear buffer although packetize transfer

 * doesn't need a continuous area.

 * if sg buffer is supported on the later version of alsa, we'll follow

 * that.

/*

 * hw_free callback

 *

 * reset the audio format and release the buffer

 check whether early start is needed for playback stream */

 disabled via module option? */

 free-wheeling mode? (e.g. dmix) */

 implicit feedback mode has own operation mode */

/*

 * prepare callback

 *

 * only a few subtle things...

 reset the pointer */

/*

 * h/w constraints

 check the format */

 check the channels */

 check the rate is within the range */

 check whether the period time is >= the data packet interval */

 get the EP or the sync EP for implicit fb when it's already set up */

			/* if EP is already opened solely for this substream,

			 * we still allow us to change the parameter; otherwise

			 * this substream has to follow the existing parameter

 for the implicit fb, check the sync ep as well */

 additional hw constraints for implicit feedback mode */

/*

 * set up the runtime hardware information.

 check min/max rates and channels */

 FIXME: there might be more than one audio formats... */

 full speed devices have fixed data packet interval */

 if period time doesn't go below 1 ms, no rules needed */

 additional hw constraints for implicit fb */

 need an explicit sync to catch applptr update in low-latency mode */

 runtime PM is also done there */

 initialize DSD/DOP context */

/* Since a URB can handle only a single linear buffer, we must use double

 * buffering when the data to be transferred overflows the buffer boundary.

 * To avoid inconsistencies when updating hwptr_done, we use double buffering

 * for all URBs.

 read frame number here, update pointer in critical section */

 continue;

 update the current pointer */

 realign last_frame_number */

 copy a data chunk */

	/*

	 * The DSP DOP format defines a way to transport DSD samples over

	 * normal PCM data endpoints. It requires stuffing of marker bytes

	 * (0x05 and 0xfa, alternating per sample frame), and then expects

	 * 2 additional bytes of actual payload. The whole frame is stored

	 * LSB.

	 *

	 * Hence, for a stereo transport, the buffer layout looks like this,

	 * where L refers to left channel samples and R to right.

	 *

	 *   L1 L2 0x05   R1 R2 0x05   L3 L4 0xfa  R3 R4 0xfa

	 *   L5 L6 0x05   R5 R6 0x05   L7 L8 0xfa  R7 R8 0xfa

	 *   .....

	 *

 frame boundary? */

 alternate the marker */

 stuff the DSD payload */

 copy bit-reversed bytes onto transfer buffer */

 err, the transferred area goes over buffer boundary. */

 Put __le32 length descriptor at start of each packet. */

 Adjust transfer size accordingly. */

 calculate the byte offset-in-buffer of the appl_ptr */

 set up descriptor */

					/* FIXME: fill-max mode is not

 add a transfer delimiter */

 finish at the period boundary or after enough frames */

 usual PCM */

 bytes is now amount of outgoing data */

		/* this is the first actual URB submitted,

		 * update trigger timestamp to reflect actual start time

/*

 * process after playback data complete

 * - decrease the delay count again

/* PCM ack callback for the playback stream;

 * this plays a role only when the stream is running in low-latency mode.

	/* When no more in-flight URBs available, try to process the pending

	 * outputs here

 keep retire_data_urb for delay calculation */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Scarlett Driver for ALSA

 *

 *   Copyright (c) 2013 by Tobias Hoffmann

 *   Copyright (c) 2013 by Robin Gareus <robin at gareus.org>

 *   Copyright (c) 2002 by Takashi Iwai <tiwai at suse.de>

 *   Copyright (c) 2014 by Chris J Arges <chris.j.arges at canonical.com>

 *

 *   Many codes borrowed from audio.c by

 *	    Alan Cox (alan at lxorguk.ukuu.org.uk)

 *	    Thomas Sailer (sailer at ife.ee.ethz.ch)

 *

 *   Code cleanup:

 *   David Henningsson <david.henningsson at canonical.com>

/*

 * Rewritten and extended to support more models, e.g. Scarlett 18i8.

 *

 * Auto-detection via UAC2 is not feasible to properly discover the vast

 * majority of features. It's related to both Linux/ALSA's UAC2 as well as

 * Focusrite's implementation of it. Eventually quirks may be sufficient but

 * right now it's a major headache to work around these things.

 *

 * NB. Neither the OSX nor the win driver provided by Focusrite performs

 * discovery, they seem to operate the same as this driver.

/* Mixer Interface for the Focusrite Scarlett 18i6 audio interface.

 *

 * The protocol was reverse engineered by looking at communication between

 * Scarlett MixControl (v 1.2.128.0) and the Focusrite(R) Scarlett 18i6

 * (firmware v305) using wireshark and usbmon in January 2013.

 * Extended in July 2013.

 *

 * this mixer gives complete access to all features of the device:

 *  - change Impedance of inputs (Line-in, Mic / Instrument, Hi-Z)

 *  - select clock source

 *  - dynamic input to mixer-matrix assignment

 *  - 18 x 6 mixer-matrix gain stages

 *  - bus routing & volume control

 *  - automatic re-initialization on connect if device was power-cycled

 *

 * USB URB commands overview (bRequest = 0x01 = UAC2_CS_CUR)

 * wIndex

 * 0x01 Analog Input line/instrument impedance switch, wValue=0x0901 +

 *      channel, data=Line/Inst (2bytes)

 *      pad (-10dB) switch, wValue=0x0b01 + channel, data=Off/On (2bytes)

 *      ?? wValue=0x0803/04, ?? (2bytes)

 * 0x0a Master Volume, wValue=0x0200+bus[0:all + only 1..4?] data(2bytes)

 *      Bus Mute/Unmute wValue=0x0100+bus[0:all + only 1..4?], data(2bytes)

 * 0x28 Clock source, wValue=0x0100, data={1:int,2:spdif,3:adat} (1byte)

 * 0x29 Set Sample-rate, wValue=0x0100, data=sample-rate(4bytes)

 * 0x32 Mixer mux, wValue=0x0600 + mixer-channel, data=input-to-connect(2bytes)

 * 0x33 Output mux, wValue=bus, data=input-to-connect(2bytes)

 * 0x34 Capture mux, wValue=0...18, data=input-to-connect(2bytes)

 * 0x3c Matrix Mixer gains, wValue=mixer-node  data=gain(2bytes)

 *      ?? [sometimes](4bytes, e.g 0x000003be 0x000003bf ...03ff)

 *

 * USB reads: (i.e. actually issued by original software)

 * 0x01 wValue=0x0901+channel (1byte!!), wValue=0x0b01+channed (1byte!!)

 * 0x29 wValue=0x0100 sample-rate(4bytes)

 *      wValue=0x0200 ?? 1byte (only once)

 * 0x2a wValue=0x0100 ?? 4bytes, sample-rate2 ??

 *

 * USB reads with bRequest = 0x03 = UAC2_CS_MEM

 * 0x3c wValue=0x0002 1byte: sync status (locked=1)

 *      wValue=0x0000 18*2byte: peak meter (inputs)

 *      wValue=0x0001 8(?)*2byte: peak meter (mix)

 *      wValue=0x0003 6*2byte: peak meter (pcm/daw)

 *

 * USB write with bRequest = 0x03

 * 0x3c Save settings to hardware: wValue=0x005a, data=0xa5

 *

 *

 * <ditaa>

 *  /--------------\    18chn            6chn    /--------------\

 *  | Hardware  in +--+-------\        /------+--+ ALSA PCM out |

 *  \--------------/  |       |        |      |  \--------------/

 *                    |       |        |      |

 *                    |       v        v      |

 *                    |   +---------------+   |

 *                    |    \ Matrix  Mux /    |

 *                    |     +-----+-----+     |

 *                    |           |           |

 *                    |           | 18chn     |

 *                    |           v           |

 *                    |     +-----------+     |

 *                    |     | Mixer     |     |

 *                    |     |    Matrix |     |

 *                    |     |           |     |

 *                    |     | 18x6 Gain |     |

 *                    |     |   stages  |     |

 *                    |     +-----+-----+     |

 *                    |           |           |

 *                    |           |           |

 *                    | 18chn     | 6chn      | 6chn

 *                    v           v           v

 *                    =========================

 *             +---------------+     +--—------------+

 *              \ Output  Mux /       \ Capture Mux /

 *               +-----+-----+         +-----+-----+

 *                     |                     |

 *                     | 6chn                |

 *                     v                     |

 *              +-------------+              |

 *              | Master Gain |              |

 *              +------+------+              |

 *                     |                     |

 *                     | 6chn                | 18chn

 *                     | (3 stereo pairs)    |

 *  /--------------\   |                     |   /--------------\

 *  | Hardware out |<--/                     \-->| ALSA PCM  in |

 *  \--------------/                             \--------------/

 * </ditaa>

 *

 some gui mixers can't handle negative ctl values */

 initial values for matrix mux */

 number of items in controls */

********************* Enum Strings *************************/

 invert mute logic for mixer */

 generate name dynamically based on item number and offset info */

 max value */

 max value */

 add scarlett_mixer_elem_enum_info struct */

 Add mute switch */

 Add volume control and initialize to 0 */

 Add L channel source playback enumeration */

 Add R channel source playback enumeration */

********************* device-specific config *************************/

  untested...  */

 Analog -> 1..4 */

 SPDIF -> 5,6 */

 PCM[1..12] -> 7..18 */

  untested...  */

 Analog -> 1..4 */

 SPDIF -> 5,6 */

 PCM[1..12] -> 7..18 */

 Analog -> 1..8 */

 ADAT[1..6] -> 9..14 */

 SPDIF -> 15,16 */

 PCM[1,2] -> 17,18 */

 Analog -> 1..8 */

 ADAT[1..6] -> 9..14 */

 SPDIF -> 15,16 */

 PCM[1,2] -> 17,18 */

		/*{ .num = 1, .type = SCARLETT_SWITCH_IMPEDANCE, .name = NULL},

		{ .num = 1, .type = SCARLETT_SWITCH_PAD, .name = NULL},

		{ .num = 2, .type = SCARLETT_SWITCH_IMPEDANCE, .name = NULL},

		{ .num = 2, .type = SCARLETT_SWITCH_PAD, .name = NULL},

		{ .num = 3, .type = SCARLETT_SWITCH_PAD, .name = NULL},

 Analog -> 1..8 */

 ADAT[1..6] -> 9..14 */

 SPDIF -> 15,16 */

 PCM[1,2] -> 17,18 */

 create master switch and playback volume */

 iterate through controls in info struct and create each one */

/*

 * Create and initialize a mixer for the Focusrite(R) Scarlett

 only use UAC_VERSION_2 */

 device not (yet) supported */

 generic function to create controls */

 setup matrix controls */

 val_len == 1 needed here */

 val_len == 1 and UAC2_CS_MEM */

 initialize sampling rate to 48000 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

/*

 * parse the audio format type I descriptor

 * and returns the corresponding pcm format

 *

 * @dev: usb device

 * @fp: audioformat record

 * @format: the format tag (wFormatTag)

 * @fmt: the format type descriptor (v1/v2) or AudioStreaming descriptor (v3)

 invalid format */

 flag potentially raw DSD capable altsettings */

 some devices don't define this correctly... */

 Edirol SD-90 */

 Roland SC-D70 */

 check the format byte size */

 grrr, big endian!! */

 grrr, big endian!! */

		/* Dallas DS4201 workaround: it advertises U8 format, but really

 set up rate_min, rate_max and rates from the rate table */

/*

 * parse the format descriptor and stores the possible sample rates

 * on the audioformat table (audio class v1).

 *

 * @dev: usb device

 * @fp: audioformat record

 * @fmt: the format descriptor

 * @offset: the start offset of descriptor pointing the rate type

 *          (7 for type I and II, 8 for type II)

		/*

		 * build the rate table and bitmap flags

 C-Media CM6501 mislabels its 96 kHz altsetting */

 Terratec Aureon 7.1 USB C-Media 6206, too */

 Ozone Z90 USB C-Media, too */

 Creative VF0420/VF0470 Live Cams report 16 kHz instead of 8kHz */

 continuous rates */

 Jabra Evolve 65 headset */

 only 48kHz for playback while keeping 16kHz for capture */

/*

 * Presonus Studio 1810c supports a limited set of sampling

 * rates per altsetting but reports the full set each time.

 * If we don't filter out the unsupported rates and attempt

 * to configure the card, it will hang refusing to do any

 * further audio I/O until a hard reset is performed.

 *

 * The list of supported rates per altsetting (set of available

 * I/O channels) is described in the owner's manual, section 2.2.

 All ADAT ports available */

 Half of ADAT ports available */

 Analog I/O only (no S/PDIF nor ADAT) */

/*

 * Many Focusrite devices supports a limited set of sampling rates per

 * altsetting. Maximum rate is exposed in the last 4 bytes of Format Type

 * descriptor which has a non-standard bLength = 10.

 bLength */

 Validate max rate */

/*

 * Helper function to walk the array of sample rate triplets reported by

 * the device. The problem is that we need to parse whole array first to

 * get to know how many sample rates we have to expect.

 * Then fp->rate_table can be allocated and filled.

		/*

		 * for ranges with res == 1, we announce a continuous sample

		 * rate range, and this function should return 0 for no further

		 * parsing.

 Filter out invalid rates on Presonus Studio 1810c */

 Filter out invalid rates on Focusrite devices */

 avoid endless loop */

/* Line6 Helix series and the Rode Rodecaster Pro don't support the

 * UAC2_CS_RANGE usb function call. Return a static table of known

 * clock rates.

 Line6 Helix */

 Line6 Helix Rack */

 Line6 Helix LT */

 Line6 HX-Stomp */

 Line6 HX-Stomp XL */

 Line6 Pod Go */

 Line6 Helix >= fw 2.82 */

 Line6 Helix Rack >= fw 2.82 */

 Line6 Helix LT >= fw 2.82 */

 Rode Rodecaster Pro */

 check whether the given altsetting is supported for the already set rate */

 we assume 64bit is enough for any altsettings */

 first byte contains the bitmap size */

/*

 * Validate each sample rate with the altsetting

 * Rebuild the rate table if only partial values are valid

	/* performing the rate verification may lead to unexpected USB bus

	 * behavior afterwards by some unknown reason.  Do this only for the

	 * known devices.

 don't perform the validation as default */

 clear the interface altsetting at first */

 continue as is */

/*

 * parse the format descriptor and stores the possible sample rates

 * on the audioformat table (audio class v2 and v3).

 get the number of sample rates first by only fetching 2 bytes */

 line6 helix devices don't support UAC2_CS_CONTROL_SAM_FREQ call */

 no line6 device found continue showing the error */

 now get the full information */

	/* Call the triplet parser, and make sure fp->rate_table is NULL.

	 * We just use the return value to know how many sample rates we

 SNDRV_PCM_RATE_CONTINUOUS */

	/* Call the triplet parser again, but this time, fp->rate_table is

/*

 * parse the format type I and III descriptors

 fp->fmt_type is already set in this case */

		/* FIXME: the format type is really IECxxx

		 *        but we give normal PCM format to get the existing

		 *        apps working...

 M-Audio Audiophile USB */

 gather possible sample rates */

	/* audio class v1 reports possible sample rates as part of the

	 * proprietary class specific descriptor.

	 * audio class v2 uses class specific EP0 range requests for that.

 fp->channels is already set in this case */

/*

 * parse the format type II descriptor

 FIXME: there is no AC3 format defined yet */

 fp->formats = SNDRV_PCM_FMTBIT_AC3;

 temporary hack to receive byte streams */

 fmt[8..] sample rates */

 FIXME: temporary hack for extigy/audigy 2 nx/zs */

	/* extigy apparently supports sample rates other than 48k

	 * but not in ordinary way.  so we enable only 48k atm.

	/*

	 * Type I format bits are D0..D6

	 * This test works because type IV is not supported

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Additional mixer mapping

 *

 *   Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>

/*

 * USB control mappers for SB Exitigy

/*

 * Topology of SB Extigy (see on the wide screen :)



USB_IN[1] --->FU[2]------------------------------+->MU[16]-->PU[17]-+->FU[18]--+->EU[27]--+->EU[21]-->FU[22]--+->FU[23] > Dig_OUT[24]

                                                 ^                  |          |          |                   |

USB_IN[3] -+->SU[5]-->FU[6]--+->MU[14] ->PU[15]->+                  |          |          |                   +->FU[25] > Dig_OUT[26]

           ^                 ^                   |                  |          |          |

Dig_IN[4] -+                 |                   |                  |          |          +->FU[28]---------------------> Spk_OUT[19]

                             |                   |                  |          |

Lin-IN[7] -+-->FU[8]---------+                   |                  |          +----------------------------------------> Hph_OUT[20]

           |                                     |                  |

Mic-IN[9] --+->FU[10]----------------------------+                  |

           ||                                                       |

           ||  +----------------------------------------------------+

           VV  V

           ++--+->SU[11]-->FU[12] --------------------------------------------------------------------------------------> USB_OUT[13]

 1: IT pcm */

 FU */

 3: IT pcm */

 4: IT digital in */

 DISABLED: this seems to be bogus on some firmware */

 FU */

 7: IT line */

 FU */

 9: IT mic */

 FU */

 SU */

 FU */

 13: OT pcm capture */

 14: MU (w/o controls) */

 15: PU (3D enh) */

 16: MU (w/o controls) */

 DISABLED: PU-switch (any effect?) */

 PU: mode select */

 FU */

 FU */

 FU; others */

 19: OT speaker */

 20: OT headphone */

 DISABLED: EU (for what?) */

 FU */

 FU */  
 24: OT digital out */

 FU */

 OT */

 DISABLED: EU (for what?) */

 28: FU speaker (mute) */

 Digital Input Playback Source? */

 terminator */

/* Sound Blaster MP3+ controls mapping

 * The default mixer channels have totally misleading names,

 * e.g. no Master and fake PCM volume

 *			Pavel Mihaylov <bin@bash.info>

 just guess */

 just guess */

 1: IT pcm */

 2: IT mic */

 3: IT line */

 4: IT digital in */

 5: OT digital out */

 6: OT speaker */

 7: OT pcm capture */

 FU, default PCM Capture Source */

 (Mic, Input 1 = Line input, Input 2 = Optical input) */

 FU, default Speaker 1 */

 { 10, "Mic Capture", 1 }, */ 
 "Mic Capture", */ NULL, 2, .dB = &mp3plus_dB_2 },

 FU, Mic Capture */

 FU, default Auto Gain Input */

 FU, default PCM Capture */

 FU, default PCM 1 */

 "Mic Playback", */ .dB = &mp3plus_dB_1 },

 FU, default Mic Playback */

 FU, default Speaker */

 15: MU */

 terminator */

/* Topology of SB Audigy 2 NX



          +----------------------------->EU[27]--+

          |                                      v

          | +----------------------------------->SU[29]---->FU[22]-->Dig_OUT[24]

          | |                                    ^

USB_IN[1]-+------------+              +->EU[17]->+->FU[11]-+

            |          v              |          v         |

Dig_IN[4]---+->FU[6]-->MU[16]->FU[18]-+->EU[21]->SU[31]----->FU[30]->Hph_OUT[20]

            |          ^              |                    |

Lin_IN[7]-+--->FU[8]---+              +->EU[23]->FU[28]------------->Spk_OUT[19]

          | |                                              v

          +--->FU[12]------------------------------------->SU[14]--->USB_OUT[15]

            |                                              ^

            +->FU[13]--------------------------------------+

 1: IT pcm playback */

 4: IT digital in */

 FU */

 7: IT line in */

 FU */

 FU */

 FU */

 FU */

 SU */

 15: OT pcm capture */

 16: MU w/o controls */

 DISABLED: EU (for what?) */

 FU */

 19: OT speaker */

 20: OT headphone */

 DISABLED: EU (for what?) */

 FU */

 DISABLED: EU (for what?) */

 24: OT digital out */

 DISABLED: EU (for what?) */

 FU */

 SU */

 FU */

 SU */

 terminator */

 terminator */

 terminator */

 Capture Source */

 Digital Out Source */

 Headphone Source */

 terminator */

 Creative SoundBlaster Live! 24-bit External */

 2: PCM Playback Volume */

 FU, default PCM Capture Volume */

 terminator */

 LineX FM Transmitter entry - needed to bypass controls bug */

 1: IT pcm */

 2: OT Speaker */ 

 FU: master volume - left / right / mute */

 terminator */

 1: IT line */

 FU */

 3: IT line */

 FU */

 5: IT pcm playback */

 6: MU */

 FU */

 8: OT speaker */

 9: IT line */

 FU */

 11: MU */

 12: OT pcm capture */

/* Section "justlink_map" below added by James Courtier-Dutton <James@superbug.demon.co.uk>

 * sourced from Maplin Electronics (https://www.maplin.co.uk), part number A56AK

 * Part has 2 connectors that act as a single output. (TOSLINK Optical for digital out, and 3.5mm Jack for Analogue out.)

 * The USB Mixer publishes a Microphone and extra Volume controls for it, but none exist on the device,

 * so this map removes all unwanted sliders from alsamixer

 1: IT pcm playback */

 2: Not present */

 IT mic (No mic input on device) */

 4: Not present */

 5: OT speacker */

 6: OT pcm capture */

 Mute/volume for speaker */

 Capture Switch (No capture inputs on device) */

 Capture Mute/volume (No capture inputs on device */

 0xa: Not present */

 0xb: MU (w/o controls) */

 Mic feedback Mute/volume (No capture inputs on device) */

 terminator */

 TerraTec Aureon 5.1 MkII USB */

 1: IT USB */

 2: IT Mic */

 3: IT Line */

 4: IT SPDIF */

 5: OT SPDIF */

 6: OT Speaker */

 7: OT USB */

 SU */

 FU */

 FU */

 FU */

 FU */

 FU */

 FU */

 15: MU */

 terminator */

 1: IT Line 1 (USB streaming) */

 2: OT Line 1 (Speaker) */

 3: IT Line 1 (Line connector) */

 FU */

 5: OT Line 1 (USB streaming) */

 6: IT Line 2 (USB streaming) */

 7: OT Line 2 (Speaker) */

 8: IT Line 2 (Line connector) */

 FU */

 10: OT Line 2 (USB streaming) */

 11: IT Mic (Line connector) */

 12: OT Mic (USB streaming) */

 terminator */

 FU */

 MU */

 FU */

 FU */

 MU */

/* "Gamesurround Muse Pocket LT" looks same like "Sound Blaster MP3+"

 *  most importand difference is SU[8], it should be set to "Capture Source"

 *  to make alsamixer and PA working properly.

 *  FIXME: or mp3plus_map should use "Capture Source" too,

 *  so this maps can be merget

 SU, default "PCM Capture Source" */

 FU, default "Speaker Playback" */

 FU, default "Auto Gain Input" */

 FU, default "PCM Capture" */

 FU, default "Mic Playback" */

 FU, default "Line Playback" */

 terminator */

 Plantronics Gamecom 780 has a broken volume control, better to disable it */

 FU, speaker out */

/* some (all?) SCMS USB3318 devices are affected by a firmware lock up

 * when anything attempts to access FU 10 (control)

 Bose companion 5, the dB conversion factor is 16 instead of 256 */

 terminator */

 Sennheiser Communications Headset [PC 8], the dB value is reported as -6 negative maximum  */

 terminator */

/*

 * Dell usb dock with ALC4020 codec had a firmware problem where it got

 * screwed up when zero volume is passed; just skip it as a workaround

 *

 * Also the extension unit gives an access error, so skip it as well.

 extension unit */

/*

 * Corsair Virtuoso calls everything "Headset" without this, leading to

 * applications moving the sidetone control instead of the main one.

/* Some mobos shipped with a dummy HD-audio show the invalid GET_MIN/GET_MAX

 * response for Input Gain Pad (id=19, control=12) and the connector status

 * for SPDIF terminal (id=18).  Skip them.

 OT, connector control */

 FU, Input Gain Pad */

 FU, Input Gain Pad */

 TRX40 mobos with Realtek ALC1220-VB */

 OT, IEC958 - broken response, disabled */

 FU, Input Gain Pad - broken response, disabled */

 OT */

 FU */

 IT */

 FU */

 OT */

 FU */

 IT */

 FU */

 IT */

 FU */

 FU */

 (Back) Speaker */

 Front Headphone */

 Line */

 Mic */

 Front Mic */

 Rear panel + front mic on Gigabyte TRX40 Aorus Master with ALC1220-VB */

 OT, IEC958?, disabled */

 FU, Input Gain Pad - broken response, disabled */

 OT */

 FU */

 IT */

 FU */

 IT */

 FU */

 IT */

 FU */

/*

 * Control map entries

 Plantronics GameCom 780 */

		/* Hercules Gamesurround Muse Pocket LT

		 * (USB 5.1 Channel Audio Adapter)

 MAYA44 USB+ */

 KEF X300A */

 Arcam rPAC */

 Bose Companion 5 */

 Corsair Virtuoso SE (wired mode) */

 Corsair Virtuoso SE (wireless mode) */

 Corsair Virtuoso (wired mode) */

 Corsair Virtuoso (wireless mode) */

 Gigabyte TRX40 Aorus Master (rear panel + front mic) */

 Gigabyte TRX40 Aorus Pro WiFi */

 ASUS ROG Zenith II */

 ASUS ROG Strix */

 MSI TRX40 Creator */

 MSI TRX40 */

 Asrock TRX40 Creator */

 Lenovo ThinkStation P620 Rear */

 Sennheiser Communications Headset [PC 8] */

 terminator */

/*

 * Control map entries for UAC3 BADD profiles

 terminator */

 terminator */

 terminator */

 terminator */

 Covers also 'headset adapter' profile */

 terminator */

 terminator */

 terminator */

 SPDX-License-Identifier: GPL-2.0

/*

 * Presonus Studio 1810c driver for ALSA

 * Copyright (C) 2019 Nick Kossifidis <mickflemm@gmail.com>

 *

 * Based on reverse engineering of the communication protocol

 * between the windows driver / Univeral Control (UC) program

 * and the device, through usbmon.

 *

 * For now this bypasses the mixer, with all channels split,

 * so that the software can mix with greater flexibility.

 * It also adds controls for the 4 buttons on the front of

 * the device.

/*

 * DISCLAIMER: These are just guesses based on the

 * dumps I got.

 *

 * It seems like a selects between

 * device (0), mixer (0x64) and output (0x65)

 *

 * For mixer (0x64):

 *  * b selects an input channel (see below).

 *  * c selects an output channel pair (see below).

 *  * d selects left (0) or right (1) of that pair.

 *  * e 0-> disconnect, 0x01000000-> connect,

 *	0x0109-> used for stereo-linking channels,

 *	e is also used for setting volume levels

 *	in which case b is also set so I guess

 *	this way it is possible to set the volume

 *	level from the specified input to the

 *	specified output.

 *

 * IN Channels:

 * 0  - 7  Mic/Inst/Line (Analog inputs)

 * 8  - 9  S/PDIF

 * 10 - 17 ADAT

 * 18 - 35 DAW (Inputs from the host)

 *

 * OUT Channels (pairs):

 * 0 -> Main out

 * 1 -> Line1/2

 * 2 -> Line3/4

 * 3 -> S/PDIF

 * 4 -> ADAT?

 *

 * For device (0):

 *  * b and c are not used, at least not on the

 *    dumps I got.

 *  * d sets the control id to be modified

 *    (see below).

 *  * e sets the setting for that control.

 *    (so for the switches I was interested

 *    in it's 0/1)

 *

 * For output (0x65):

 *   * b is the output channel (see above).

 *   * c is zero.

 *   * e I guess the same as with mixer except 0x0109

 *	 which I didn't see in my dumps.

 *

 * The two fixed fields have the same values for

 * mixer and output but a different set for device.

/*

 * This packet includes mixer volumes and

 * various other fields, it's an extended

 * version of ctl_packet, with a and b

 * being zero and different f1/f2.

	/*

	 * Value for settings 0/1 for this

	 * output channel is always 0 (probably because

	 * there is no ADAT output on 1810c)

/*

 * When opening Universal Control the program periodically

 * sends and receives state packets for syncinc state between

 * the device and the host.

 *

 * Note that if we send only the request to get data back we'll

 * get an error, we need to first send an empty state packet and

 * then ask to receive a filled. Their seqnumbers must also match.

/*

 * This is what I got when bypassing the mixer with

 * all channels split. I'm not 100% sure of what's going

 * on, I could probably clean this up based on my observations

 * but I prefer to keep the same behavior as the windows driver.

 Set initial volume levels ? */

 This channel to all outputs ? */

 This channel to main output (again) */

		/*

		 * I noticed on UC that DAW channels have different

		 * initial volumes, so this makes sense.

 Connect analog outputs ? */

 Set initial volume levels for S/PDIF mappings ? */

 Connect S/PDIF output ? */

 Connect all outputs (again) ? */

 Basic routing to get sound out of the device */

 DAW1/2 -> Main */

 DAW3/4 -> Line3/4 */

 DAW4/5 -> Line5/6 */

 DAW5/6 -> S/PDIF */

 Left */

 Right */

 Leave the rest disconnected */

 Set initial volume levels for S/PDIF (again) ? */

 Connect S/PDIF outputs (again) ? */

 Again ? */

/*

 * Sync state with the device and retrieve the requested field,

 * whose index is specified in (kctl->private_value & 0xFF),

 * from the received fields array.

/*

 * Send a control packet to the device for the control id

 * specified in (kctl->private_value >> 8) with value

 * specified in (kctl->private_value >> 16).

 Generic get/set/init functions for switch controls */

 Entry point, called from mixer_quirks.c */

 Run this only once */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

/*

 * combine bytes and get an integer value

/*

 * parse descriptor buffer and return the pointer starting the given

 * descriptor type.

/*

 * find a class-specified interface descriptor with the given subtype.

/*

 * Wrapper for usb_control_msg().

 * Allocates a temp buffer to prevent dmaing from/to the stack.

 SPDX-License-Identifier: GPL-2.0

/*

 * media.c - Media Controller specific ALSA driver code

 *

 * Copyright (c) 2019 Shuah Khan <shuah@kernel.org>

 *

/*

 * This file adds Media Controller support to the ALSA driver

 * to use the Media Controller API to share the tuner with DVB

 * and V4L2 drivers that control the media device.

 *

 * The media device is created based on the existing quirks framework.

 * Using this approach, the media controller API usage can be added for

 * a specific device.

 allocate media_ctl */

 create link between mixer and audio */

 allocate media_mixer_ctl */

	/* usb-audio driver is probed for each usb interface, and

	 * there are multiple interfaces per device. Avoid calling

	 * media_device_usb_allocate() each time usb_audio_probe()

	 * is called. Do it only once.

 save media device - avoid lookups */

 Create media entities for mixer and control dev */

 media_device might be registered, print error and continue */

 don't register if snd_media_mixer_init() failed */

 register media_device */

 clear saved media_dev */

 release resources */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 convert our full speed USB rate into sampling rate in Hz */

 convert our high speed USB rate into sampling rate in Hz */

/*

 * common proc files to show the usb device info

/*

 * proc interface for list the supported pcm formats

 snd_iprintf(buffer, "    Max Packet Size = %d\n", fp->maxpacksize);

 snd_iprintf(buffer, "    EP Attribute = %#x\n", fp->attributes);

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 interface refcounting */

/*

 * snd_usb_endpoint is a model that abstracts everything related to an

 * USB endpoint and its streaming.

 *

 * There are functions to activate and deactivate the streaming URBs and

 * optional callbacks to let the pcm logic handle the actual content of the

 * packets for playback and record. Thus, the bus streaming and the audio

 * handlers are fully decoupled.

 *

 * There are two different types of endpoints in audio applications.

 *

 * SND_USB_ENDPOINT_TYPE_DATA handles full audio data payload for both

 * inbound and outbound traffic.

 *

 * SND_USB_ENDPOINT_TYPE_SYNC endpoints are for inbound traffic only and

 * expect the payload to carry Q10.14 / Q16.16 formatted sync information

 * (3 or 4 bytes).

 *

 * Each endpoint has to be configured prior to being used by calling

 * snd_usb_endpoint_set_params().

 *

 * The model incorporates a reference counting, so that multiple users

 * can call snd_usb_endpoint_start() and snd_usb_endpoint_stop(), and

 * only the first user will effectively start the URBs, and only the last

 * one to stop it will tear the URBs down again.

/*

 * convert a sampling rate into our full speed format (fs/1000 in Q16.16)

 * this will overflow at approx 524 kHz

/*

 * convert a sampling rate into USB high speed format (fs/8000 in Q16.16)

 * this will overflow at approx 4 MHz

/*

 * release a urb data

/**

 * snd_usb_endpoint_implicit_feedback_sink: Report endpoint usage type

 *

 * @ep: The snd_usb_endpoint

 *

 * Determine whether an endpoint is driven by an implicit feedback

 * data endpoint source.

/*

 * Return the number of samples to be sent in the next packet

 * for streaming based on information derived from sync endpoints

 *

 * This won't be used for implicit feedback which takes the packet size

 * returned from the sync source

/*

 * Return the number of samples to be sent in the next packet

 * for adaptive and synchronous endpoints

/*

 * snd_usb_endpoint_next_packet_size: Return the number of samples to be sent

 * in the next packet

 *

 * If the size is equal or exceeds @avail, don't proceed but return -EAGAIN

 * Exception: @avail = 0 for skipping the check.

 For tx_length_quirk, put packet length at start of packet */

 number of silent bytes */

/*

 * Prepare a PLAYBACK urb for submission to the bus.

 we need to set this at each time */

 no data provider, so send silence */

			/*

			 * fill the length and offset of each urb descriptor.

			 * the fixed 12.13 frequency is passed as 16.16 through the pipe.

			/*

			 * fill the length and offset of each urb descriptor.

			 * the fixed 10.14 frequency is passed through the pipe.

/*

 * Prepare a CAPTURE or SYNC urb for submission to the bus.

 we need to set this at each time */

 notify an error as XRUN to the assigned PCM data substream */

/*

 * Send output urbs that have been prepared previously. URBs are dequeued

 * from ep->ready_playback_urbs and in case there aren't any available

 * or there are no packets that have been prepared, this function does

 * nothing.

 *

 * The reason why the functionality of sending and preparing URBs is separated

 * is that host controllers don't guarantee the order in which they return

 * inbound and outbound packets to their submitters.

 *

 * This function is used both for implicit feedback endpoints and in low-

 * latency playback mode.

 take URB out of FIFO */

 copy over the length information */

 call the data handler to fill in playback data */

 can be stopped during prepare callback */

 push back to ready list again for -EAGAIN */

/*

 * complete callback for urbs

 unlinked */

 device removed */

 unlinked */

 device disabled */

 device disconnected */

 can be stopped during retire callback */

		/* in low-latency and implicit-feedback modes, push back the

		 * URB to ready list at first, then process as much as possible

 decrement at last */

 in non-lowlatency mode, no error handling for prepare */

 can be stopped during prepare callback */

 can be stopped during retire callback */

/*

 * Find or create a refcount object for the given interface

 *

 * The objects are released altogether in snd_usb_endpoint_free_all()

/*

 * Get the existing endpoint object corresponding EP

 * Returns NULL if not present.

/**

 * snd_usb_add_endpoint: Add an endpoint to an USB audio chip

 *

 * @chip: The chip

 * @ep_num: The number of the endpoint to use

 * @type: SND_USB_ENDPOINT_TYPE_DATA or SND_USB_ENDPOINT_TYPE_SYNC

 *

 * If the requested endpoint has not been added to the given chip before,

 * a new instance is created.

 *

 * Returns zero on success or a negative error code.

 *

 * New endpoints will be added to chip->ep_list and freed by

 * calling snd_usb_endpoint_free_all().

 *

 * For SND_USB_ENDPOINT_TYPE_SYNC, the caller needs to guarantee that

 * bNumEndpoints > 1 beforehand.

 Set up syncinterval and maxsyncsize for a sync EP */

/*

 * Check whether the given fp and hw params are compatible with the current

 * setup of the target EP for implicit feedback sync

/*

 * snd_usb_endpoint_open: Open the endpoint

 *

 * Called from hw_params to assign the endpoint to the substream.

 * It's reference-counted, and only the first opener is allowed to set up

 * arbitrary parameters.  The later opener must be compatible with the

 * former opened parameters.

 * The endpoint needs to be closed via snd_usb_endpoint_close() later.

 *

 * Note that this function doesn't configure the endpoint.  The substream

 * needs to set it up later via snd_usb_endpoint_configure().

/*

 * snd_usb_endpoint_set_sync: Link data and sync endpoints

 *

 * Pass NULL to sync_ep to unlink again

/*

 * Set data endpoint callbacks and the assigned data stream

 *

 * Called at PCM trigger and cleanups.

 * Pass NULL to deactivate each callback.

/*

 * snd_usb_endpoint_close: Close the endpoint

 *

 * Unreference the already opened endpoint via snd_usb_endpoint_open().

 Prepare for suspening EP, called from the main suspend handler */

/*

 *  wait until all urbs are processed.

/* sync the pending stop operation;

 * this function itself doesn't trigger the stop operation

/*

 * Stop active urbs

 *

 * This function moves the EP to STOPPING state if it's being RUNNING.

/*

 * release an endpoint's urbs

 route incoming urbs to nirvana */

 stop and unlink urbs */

/*

 * configure a data endpoint

		/*

		 * When operating in DSD DOP mode, the size of a sample frame

		 * in hardware differs from the actual physical format width

		 * because we need to make room for the DOP markers.

 assume max. frequency is 50% higher than nominal */

	/* Round up freqmax to nearest integer in order to calculate maximum

	 * packet size, which must represent a whole number of frames.

	 * This is accomplished by adding 0x0.ffff before converting the

	 * Q16.16 format into integer.

	 * In order to accurately calculate the maximum packet size when

	 * the data interval is more than 1 (i.e. ep->datainterval > 0),

	 * multiply by the data interval prior to rounding. For instance,

	 * a freqmax of 41 kHz will result in a max packet size of 6 (5.125)

	 * frames with a data interval of 1, but 11 (10.25) frames with a

	 * data interval of 2.

	 * (ep->freqmax << ep->datainterval overflows at 8.192 MHz for the

	 * maximum datainterval value of 3, at USB full speed, higher for

	 * USB high speed, noting that ep->freqmax is in units of

	 * frames per packet in Q16.16 format.)

 Space for length descriptor */

 but wMaxPacketSize might reduce this */

 whatever fits into a max. size packet */

 Need to remove the length descriptor to calc freq */

	/*

	 * Capture endpoints need to use small URBs because there's no way

	 * to tell in advance where the next period will end, and we don't

	 * want the next URB to complete much after the period ends.

	 *

	 * Playback endpoints with implicit sync much use the same parameters

	 * as their corresponding capture endpoint.

		/*

		 * Wireless devices can poll at a max rate of once per 4ms.

		 * For dataintervals less than 5, increase the packet count to

		 * allow the host controller to use bursting to fill in the

		 * gaps.

 make capture URBs <= 1 ms and smaller than a period */

	/*

	 * Playback endpoints without implicit sync are adjusted so that

	 * a period fits as evenly as possible in the smallest number of

	 * URBs.  The total number of URBs is adjusted to the size of the

	 * ALSA buffer, subject to the MAX_URBS and MAX_QUEUE limits.

 determine how small a packet can be */

 with sync from device, assume it can be 12% lower */

 how many packets will contain an entire ALSA period? */

 how many URBs will contain a period? */

 how many packets are needed in each URB? */

 limit the number of frames in a single URB */

 try to use enough URBs to contain an entire ALSA buffer */

 allocate and initialize data urbs */

 for transfer delimiter */

/*

 * configure a sync endpoint

/*

 * snd_usb_endpoint_set_params: configure an snd_usb_endpoint

 *

 * Determine the number of URBs to be used on this endpoint.

 * An endpoint must be configured before it can be started.

 * An endpoint that is already running can not be reconfigured.

 release old buffers, if any */

 calculate the frequency in 16.16 format */

 some unit conversions in runtime */

/*

 * snd_usb_endpoint_configure: Configure the endpoint

 *

 * This function sets up the EP to be fully usable state.

 * It's called either from hw_params or prepare callback.

 * The function checks need_setup flag, and performs nothing unless needed,

 * so it's safe to call this multiple times.

 *

 * This returns zero if unchanged, 1 if the configuration has changed,

 * or a negative error code.

 If the interface has been already set up, just set EP parameters */

		/* sample rate setup of UAC1 is per endpoint, and we need

		 * to update at each EP configuration

 Need to deselect altsetting at first */

	/* Some UAC1 devices (e.g. Yamaha THR10) need the host interface

	 * to be set up before parameter setups

 Workaround for devices that require the interface setup at first like UAC1 */

 for UAC2/3, enable the interface altset here at last */

 get the current rate set to the given clock by any endpoint */

/**

 * snd_usb_endpoint_start: start an snd_usb_endpoint

 *

 * @ep: the endpoint to start

 *

 * A call to this function will increment the running count of the endpoint.

 * In case it is not already running, the URBs for this endpoint will be

 * submitted. Otherwise, this function does nothing.

 *

 * Must be balanced to calls of snd_usb_endpoint_stop().

 *

 * Returns an error if the URB submission failed, 0 in all other cases.

 already running? */

	/*

	 * If this endpoint has a data endpoint as implicit feedback source,

	 * don't start the urbs here. Instead, mark them all as available,

	 * wait for the record urbs to return and queue the playback urbs

	 * from that context.

 stop filling at applptr */

 put the remaining URBs to ready list */

/**

 * snd_usb_endpoint_stop: stop an snd_usb_endpoint

 *

 * @ep: the endpoint to stop (may be NULL)

 * @keep_pending: keep in-flight URBs

 *

 * A call to this function will decrement the running count of the endpoint.

 * In case the last user has requested the endpoint stop, the URBs will

 * actually be deactivated.

 *

 * Must be balanced to calls of snd_usb_endpoint_start().

 *

 * The caller needs to synchronize the pending stop operation via

 * snd_usb_endpoint_sync_pending_stop().

/**

 * snd_usb_endpoint_release: Tear down an snd_usb_endpoint

 *

 * @ep: the endpoint to release

 *

 * This function does not care for the endpoint's running count but will tear

 * down all the streaming URBs immediately.

/**

 * snd_usb_endpoint_free_all: Free the resources of an snd_usb_endpoint

 * @chip: The chip

 *

 * This free all endpoints and those resources

/*

 * snd_usb_handle_sync_urb: parse an USB sync packet

 *

 * @ep: the endpoint to handle the packet

 * @sender: the sending endpoint

 * @urb: the received packet

 *

 * This function is called from the context of an endpoint that received

 * the packet and is used to let another endpoint object handle the payload.

	/*

	 * In case the endpoint is operating in implicit feedback mode, prepare

	 * a new outbound URB that has the same layout as the received packet

	 * and add it to the list of pending urbs. queue_pending_output_urbs()

	 * will take care of them later.

 implicit feedback case */

 Count overall packet size */

		/*

		 * skip empty packets. At least M-Audio's Fast Track Ultra stops

		 * streaming once it received a 0-byte OUT URB

		/*

		 * Iterate through the inbound packet and prepare the lengths

		 * for the output packet. The OUT packet we are about to send

		 * will have the same amount of payload bytes per stride as the

		 * IN packet we just received. Since the actual size is scaled

		 * by the stride, use the sender stride to calculate the length

		 * in case the number of channels differ between the implicitly

		 * fed-back endpoint and the synchronizing endpoint.

	/*

	 * process after playback sync complete

	 *

	 * Full speed devices report feedback values in 10.14 format as samples

	 * per frame, high speed devices in 16.16 format as samples per

	 * microframe.

	 *

	 * Because the Audio Class 1 spec was written before USB 2.0, many high

	 * speed devices use a wrong interpretation, some others use an

	 * entirely different format.

	 *

	 * Therefore, we cannot predict what format any particular device uses

	 * and must detect it automatically.

		/*

		 * Devices based on Tenor 8802 chipsets (TEAC UD-H01

		 * and others) sometimes change the feedback value

		 * by +/- 0x1.0000.

		/*

		 * The first time we see a feedback value, determine its format

		 * by shifting it left or right until it matches the nominal

		 * frequency value.  This assumes that the feedback does not

		 * differ from the nominal value more than +50% or -25%.

		/*

		 * If the frequency looks valid, set it.

		 * This value is referred to in prepare_playback_urb().

		/*

		 * Out of range; maybe the shift value is wrong.

		 * Reset it so that we autodetect again the next time.

 SPDX-License-Identifier: GPL-2.0-or-later



 Validation of USB-audio class descriptors



 UAC1 only */

 for mixer unit; covering all UACs */

	/* We can't determine the bitmap size only from this unit descriptor,

	 * so just check with the remaining length.

	 * The actual bitmap is checked at mixer unit parser.

 wChannelConfig, iChannelNames */

 bmControls[n*m] */

 iMixer */

 bmChannelConfig, iChannelNames */

 bmMixerControls[n*m] */

 bmControls, iMixer */

 wClusterDescrID */

 bmMixerControls[n*m] */

 both for processing and extension units; covering all UACs */

 bNrChannels, wChannelConfig, iChannelNames */

 bControlSize */

 bControlSize, bmControls, iProcessing */

 bNrChannels, bmChannelConfig, iChannelNames */

 bmControls -- 2 bytes for PU */

 bmControls -- 1 byte for EU */

 iProcessing */

 wProcessingDescrStr, bmControls */

 OK */

 bNrModes */

 bNrModes, waModes(n) */

 OK */

 SiC! */

 bNrModes */

 bNrModes, daModes(n) */

 wClusterDescrID */

 bNrModes */

 bNrModes, waClusterDescrID(n) */

 wClusterDescrID, bmAlgorighms */

 both for selector and clock selector units; covering all UACs */

 iSelector */

 bmControls, iSelector */

 bmControls, wSelectorDescrStr */

 at least bmaControls(0) for master channel + iFeature */

 at least bmaControls(0) for master channel + iFeature */

 at least bmaControls(0) for master channel + wFeatureDescrStr */

 UAC1 */

 UAC2 */

 UAC_VERSION_2, UAC2_EFFECT_UNIT: not implemented yet */

 UAC_VERSION_2, UAC2_SAMPLE_RATE_CONVERTER: not implemented yet */

 UAC3 */

 UAC_VERSION_3, UAC3_EXTENDED_TERMINAL: not implemented yet */

  UAC_VERSION_3, UAC3_EFFECT_UNIT: not implemented yet */

 UAC_VERSION_3, UAC3_SAMPLE_RATE_CONVERTER: not implemented yet */

 UAC_VERSION_3, UAC3_CONNECTORS: not implemented yet */

 terminator */

 terminator */

 Validate the given unit descriptor, return true if it's OK */

 don't care */

 check for the fixed size */

 not matching, skip validation */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Linux driver for TerraTec DMX 6Fire USB

 *

 * Device communications

 *

 * Author:	Torsten Schenk <torsten.schenk@zoho.com>

 * Created:	Jan 01, 2011

 * Copyright:	(C) Torsten Schenk

 midi in event */

 length (starting at buffer[2]) */

 length (starting at buffer[2]) */

 13: maximum length of message */

 13: maximum length of message */

 submit an urb that receives communication data from device */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Linux driver for TerraTec DMX 6Fire USB

 *

 * Main routines and module definitions.

 *

 * Author:	Torsten Schenk <torsten.schenk@zoho.com>

 * Created:	Jan 01, 2011

 * Copyright:	(C) Torsten Schenk

 Index 0-max */

 Id for card */

 Enable card */

 index in module parameter array */

 look if we already serve this card and return if so */

 check, if firmware is present on device, upload it if not */

 firmware update performed */

 if we are here, card can be registered in alsa. */

 if !chip, fw upload has been performed */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Linux driver for TerraTec DMX 6Fire USB

 *

 * Rawmidi driver

 *

 * Author:	Torsten Schenk <torsten.schenk@zoho.com>

 * Created:	Jan 01, 2011

 * Copyright:	(C) Torsten Schenk

 more data available, send next packet */

 no more data to transmit */

 start transfer */

 we are already transmitting so just return */

 'send midi' command */

 size of data */

 always 0 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Linux driver for TerraTec DMX 6Fire USB

 *

 * PCM driver

 *

 * Author:	Torsten Schenk <torsten.schenk@zoho.com>

 * Created:	Jan 01, 2011

 * Copyright:	(C) Torsten Schenk

/* keep next two synced with

 * FW_EP_W_MAX_PACKET_SIZE[] and RATES_MAX_PACKET_SIZE

 settings for pcm */

 pcm streaming states */

 no pcm streaming */

 pcm streaming requested, waiting to become ready */

 pcm streaming running */

 set in pcm_open, depending on capture/playback */

 call with stream_mutex locked */

 call with stream_mutex locked */

 submit our in urbs */

 wait for first out urb to return (sent in in urb handler) */

 call with substream locked */

		/* at least 4 header bytes for valid packet.

 skip leading 4 bytes of every packet */

 call with substream locked */

		/* at least 4 header bytes for valid packet.

 skip leading 4 bytes of every frame */

 receive our capture data */

 setup out urb structure */

 now send our playback data (if a free out urb was found) */

 setup the 4th byte of each sample (0x40 for analog channels) */

 skip sample data */

 deactivate substream */

 all substreams closed? if so, stop streaming */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Linux driver for TerraTec DMX 6Fire USB

 *

 * Firmware loader

 *

 * Author:	Torsten Schenk <torsten.schenk@zoho.com>

 * Created:	Jan 01, 2011

 * Copyright:	(C) Torsten Schenk

/*

 * wMaxPacketSize of pcm endpoints.

 * keep synced with rates_in_packet_size and rates_out_packet_size in pcm.c

 * fpp: frames per isopacket

 *

 * CAUTION: keep sizeof <= buffer[] in usb6fire_fw_init

 alt 1: 228 EP2 and EP6 (7 fpp) */

 alt 2: 420 EP2 and EP6 (13 fpp)*/

 alt 3: 404 EP2 and 604 EP6 (25 fpp) */

 true if an error occurred parsing this record */

 maximum record length in whole ihex */

 private */

 current position in txt_data */

/*

 * returns true if record is available, false otherwise.

 * iff an error occurred, false will be returned and record->error will be true.

 find begin of record (marked by a colon) */

 number of characters needed for len, addr and type entries */

 number of characters needed for data and crc entries */

 eof */

	/* read all records, if loop ends, record->error indicates,

 upload firmware image */

 stop ezusb cpu */

 write firmware */

 write data after firmware has been uploaded */

 resume ezusb cpu */

/* check, if the firmware version the devices has currently loaded

 * is known by this driver. 'version' needs to have 4 bytes version

	/* buffer: 8 receiving bytes from device and

 do we need fpga loader ezusb firmware? */

 do we need fpga firmware and application ezusb firmware? */

 all fw loaded? */

 unknown data? */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Linux driver for TerraTec DMX 6Fire USB

 *

 * Mixer control

 *

 * Author:	Torsten Schenk <torsten.schenk@zoho.com>

 * Created:	Jan 01, 2011

 * Copyright:	(C) Torsten Schenk

 *

 * Thanks to:

 * - Holger Ruckdeschel: he found out how to control individual channel

 *   volumes and introduced mute switch

/*

 * data that needs to be sent to device. sets up card internal stuff.

 * values dumped from windows driver and filtered by trial'n'error.

 TERMINATING ENTRY */

 values to write to soundcard register for all samplerates */

 set soundcard clock */

	/* enable analog inputs and outputs

 disable digital inputs and outputs */

 TODO: use spdif_x to enable/disable digital channels */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Line 6 Linux USB driver

 *

 * Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)

/*

	This is Line 6's MIDI manufacturer ID.

/*

	Code to request version of POD, Variax interface

	(and maybe other devices).

/*

	 Class for asynchronous messages.

/*

	Forward declarations.

/*

	Start to listen on endpoint.

 sanity checks of EP before actually submitting */

/*

	Stop listening on endpoint.

/*

	Send raw message in pieces of wMaxPacketSize bytes.

/*

	Notification of completion of asynchronous request transmission.

/*

	Asynchronously send part of a raw message.

 sanity checks of EP before actually submitting */

/*

	Asynchronously send raw message.

 create message: */

 create URB: */

 set message data: */

 start sending: */

/*

	Send asynchronous device version request.

/*

	Send sysex message in pieces of wMaxPacketSize bytes.

/*

	Allocate buffer for sysex message and prepare header.

	@param code sysex message code

	@param size number of bytes between code and sysex end

/*

	Notification of data received from the Line 6 device.

 milliseconds */

/*

	Read data from device.

 query the serial number: */

 Wait for data length. We'll get 0xff until length arrives. */

 should be equal or something went wrong */

 receive the result: */

/*

	Write data to device.

/*

	Read Line 6 device serial number.

	(POD, TonePort, GuitarPort)

/*

	Card destructor.

	/* Free buffer memory first. We cannot depend on the existence of private

	 * data from the (podhd) module, it may be gone already during this call

 then free URBs: */

 decrement reference counters: */

 Control data transfer properties */

 Isochronous transfer properties */

 Enable buffering of incoming messages, flush the buffer */

 NOTE: hwdep layer provides atomicity here */

 Stop buffering */

 Read from circular buffer, return to user */

 Buffer too small; allow re-read of the current item... */

 Write directly (no buffering) to device by user*/

 This is an arbitrary limit - still better than nothing... */

 Insert into circular buffer */

 No race condition here, there's only one writer */

 else TODO: signal overflow */

 TODO: usb_driver_claim_interface(); */

 initialize USB buffers: */

/*

	Probe USB device.

 we don't handle multiple configurations */

 store basic data: */

 increment reference counters: */

 initialize device info: */

 query interface number */

 TODO reserves the bus bandwidth even without actual transfer */

 initialize device data based on device: */

 creation of additional special files should go here */

	/* we can call disconnect callback here because no close-sync is

	 * needed yet at this point

/*

	Line 6 device disconnected.

 make sure the device isn't destructed twice: */

/*

	Suspend Line 6 device.

/*

	Resume Line 6 device.

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Line 6 Linux USB driver

 *

 * Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)

		/*

		   Note that according to the MIDI specification 0xf2 is

		   the "Song Position Pointer", but this is used by Line 6

		   to send sysex messages to the host.

 skip trailing active sense */

 no buffer wraparound */

 buffer wraparound */

 we need to be able to store at least a 3 byte MIDI message */

 check MIDI command length */

 search for end of message */

 no buffer wraparound */

 buffer wraparound */

 end of message not found */

 command is not yet complete */

 command is not yet complete */

 no buffer wraparound */

 buffer wraparound */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Line 6 Linux USB driver

 *

 * Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)

/*

	Stages of Variax startup procedure

 Generic Line 6 USB data */

 Buffer for activation code */

 Current progress in startup procedure */

/*

	This message is sent by the device during initialization and identifies

	the connected guitar version.

/*

	This message is the last one sent by the device during initialization.

/*

	Variax startup procedure.

	This is a sequence of functions with special requirements (e.g., must

	not run immediately after initialization, must not run in interrupt

	context). After the last one has finished, the device is ready to use.

 repeat request until getting the response */

 request firmware version: */

 activate device: */

 ALSA audio interface: */

/*

	Process a completely received message.

 notify of complete initialization: */

/*

	Variax destructor.

/*

	 Try to init workbench device.

 initialize USB buffers: */

 initiate startup procedure: */

 table of devices that work with this driver */

 no audio channel */

/*

	Probe USB device.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Line 6 Linux USB driver

 *

 * Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)

 *                         Emil Myhrman (emil.myhrman@gmail.com)

 Generic Line 6 USB data */

 Source selector */

 Serial number of device */

 Firmware version (x 100) */

 Device type */

 LED instances */

 monitor info callback */

 monitor get callback */

 monitor put callback */

 source info callback */

 source get callback */

 source put callback */

 control definition */

 source selector definition */

/*

	For the led on Guitarport.

	Brightness goes from 0x00 to 0x26. Set a value above this to have led

	blink.

	(void cmd_0x02(byte red, byte green)

 add your device here if you are missing support for the LEDs */

/*

	Setup Toneport device.

 sync time on device with host: */

 note: 32-bit timestamps overflow in year 2106 */

 enable device: */

 initialize source select: */

/*

	Toneport device disconnected.

/*

	 Try to init Toneport device.

 initialize PCM subsystem: */

 register monitor control: */

 register source select control: */

 register audio system: */

/*

	Resume Toneport device after reset.

 table of devices that work with this driver */

 1..4 seem to be ok */

 no control channel */

 1..4 seem to be ok */

 no control channel */

 1..4 seem to be ok */

 no control channel */

 defaults to 44.1kHz, 16-bit */

 no control channel */

 1..4 seem to be ok */

 no control channel */

 1..4 seem to be ok */

 no control channel */

 defaults to 44.1kHz, 16-bit */

 no control channel */

/*

	Probe USB device.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Line 6 Linux USB driver

 *

 * Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)

/*

	Pass data received via USB to MIDI.

/*

	Read data from MIDI buffer and transmit them via USB.

/*

	Notification of completion of MIDI transmission.

/*

	Send an asynchronous MIDI message.

	Assumes that line6->line6midi->lock is held

	(i.e., this function is serialized).

 Create a MIDI device */

 MIDI device destructor */

/*

	Initialize the Line 6 MIDI subsystem.

 skip MIDI initialization and report success */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Line 6 Linux USB driver

 *

 * Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)

/*

	Software stereo volume control.

 maximum volume - no change */

/*

	Create signal for impulse response test.

/*

	Add signal to buffer for software monitoring.

 zero volume - no change */

	/*

	   We don't need to handle devices with 6 bytes per frame here

	   since they all support hardware monitoring.

/*

	Find a free URB, prepare audio data, and submit URB.

	must be called in line6pcm->out.lock context

 TODO: this may not work for LINE6_ISO_PACKETS != 1 */

 compute frame size for given sampling rate */

 can't determine URB size */

			/*

			   The transferred area goes over buffer boundary,

			   copy the data to the temp buffer.

/*

	Submit all currently available playback URBs.

	must be called in line6pcm->out.lock context

/*

	Callback for completed playback URB.

 find index of URB */

 URB has been unlinked asynchronously */

 open playback callback */

 close playback callback */

 playback operators */

 create audio URBs and fill in constant values: */

 URB for audio out: */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Line 6 Linux USB driver

 *

 * Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)

 impulse response volume controls */

 impulse response period controls */

/*

	Unlink all currently active URBs.

/*

	Wait until unlinking of all currently active URBs has been finished.

/* allocate a buffer if not opened yet;

 * call this in line6pcm.state_mutex

 Invoked multiple times in a row so allocate once only */

/* free a buffer if all streams are closed;

 * call this in line6pcm.state_mutex

 start a PCM stream */

 Submit all currently available URBs */

 stop a PCM stream; this doesn't sync with the unlinked URBs */

 common PCM trigger callback */

 common PCM pointer callback */

/* Acquire and optionally start duplex streams:

 * type is either LINE6_STREAM_IMPULSE or LINE6_STREAM_MONITOR

 TODO: We should assert SNDRV_PCM_STREAM_PLAYBACK/CAPTURE == 0/1 */

 Stop and release duplex streams */

 common PCM hw_params callback */

 common PCM hw_free callback */

 control info callback */

 control get callback */

 control put callback */

 control definition */

/*

	Cleanup the PCM device.

 Most likely impossible in current code... */

 create a PCM device */

 set operators */

 pre-allocation of buffers */

/*

	Sync with PCM stream stops.

/*

	Create and register the PCM device and mixer entries.

	Create URBs for playback and capture.

 skip PCM initialization and report success */

 mixer: */

 prepare pcm callback */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Line 6 Linux USB driver

 *

 * Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)

/*

	Locate name in binary program dump

/*

	Other constants

/*

	Stages of POD startup procedure

 Generic Line 6 USB data */

 Instrument monitor level */

 Current progress in startup procedure */

 Serial number of device */

 Firmware version (x 100) */

 Device ID */

 *INDENT-OFF* */

 POD_SYSEX_UPDATE    = 0x6c, */  
 dumps entire internal memory of PODxt Pro */

 POD_SYSEX_DUMPMEM2  = 0x76 */

 *INDENT-ON* */

 SNDRV_PCM_FMTBIT_S24_3LE */

/*

	Process a completely received message.

 Only look for sysex messages from this device */

/*

	Send system parameter (from integer).

/*

	"read" request on "serial_number" special file.

/*

	"read" request on "firmware_version" special file.

/*

	"read" request on "device_id" special file.

/*

	POD startup procedure.

	This is a sequence of functions with special requirements (e.g., must

	not run immediately after initialization, must not run in interrupt

	context). After the last one has finished, the device is ready to use.

 request firmware version: */

 serial number: */

 ALSA audio interface: */

 POD special files: */

 control info callback */

 control get callback */

 control put callback */

 control definition */

/*

	 Try to init POD device.

 create sysfs entries: */

 initialize PCM subsystem: */

 register monitor control: */

	/*

	   When the sound card is registered at this point, the PODxt Live

	   displays "Invalid Code Error 07", so we do it later in the event

	   handler.

 initiate startup procedure: */

 table of devices that work with this driver */

 no audio channel */

/*

	Probe USB device.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Line 6 Pod HD

 *

 * Copyright (C) 2011 Stefan Hajnoczi <stefanha@gmail.com>

 * Copyright (C) 2015 Andrej Krutak <dev@andree.sk>

 * Copyright (C) 2017 Hans P. Moller <hmoller@uc.cl>

 Generic Line 6 USB data */

 Serial number of device */

 Firmware version */

 Monitor level */

 SNDRV_PCM_FMTBIT_S24_3LE */

				 /* 1+2: Main signal (out), 3+4: Tone 1,

				  * 5+6: Tone 2, 7+8: raw

 SNDRV_PCM_FMTBIT_S24_3LE */

/*

 * POD X3 startup procedure.

 *

 * May be compatible with other POD HD's, since it's also similar to the

 * previous POD setup. In any case, it doesn't seem to be required for the

 * audio nor bulk interfaces to work.

 NOTE: looks like some kind of ping message */

 Chunk is 0xc bytes (without first word) */

 First chunk in the message */

 Message size is 2 4-byte words */

 Unknown */

 Unknown */

 Volume, LE float32, 0.0 - 1.0 */

 control info callback */

 control get callback */

 control put callback */

 control definition */

/*

	Try to init POD HD device.

 claim the data interface */

 create sysfs entries: */

 initialize PCM subsystem: */

 register USB audio system directly */

 init device and delay registering */

 table of devices that work with this driver */

 TODO: no need to alloc data interfaces when only audio is used */

/*

	Probe USB device.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Line 6 Linux USB driver

 *

 * Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)

/*

	Find a free URB and submit it.

	must be called in line6pcm->in.lock context

/*

	Submit all currently available capture URBs.

	must be called in line6pcm->in.lock context

/*

	Copy data into ALSA capture buffer.

		/*

		   The transferred area goes over buffer boundary,

		   copy two separate chunks.

 this is somewhat paranoid */

 copy single chunk */

/*

 * Callback for completed capture URB.

 find index of URB */

		/* TODO:

		 * Also, if iso_buffers != 2, the prev frame is almost random at

		 * playback side.

		 * This needs to be redesigned. It should be "stable", but we may

		 * experience sync problems on such high-speed configs.

 open capture callback */

 close capture callback */

 capture operators */

 create audio URBs and fill in constant values: */

 URB for audio in: */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (c) 2006,2007 Daniel Mack, Tim Ruetz

 "menu"               */

 "lcd backlight       */

 "control"            */

 "enter"              */

 "view"               */

 "esc"                */

 "sound"              */

 array spacer, never triggered. */

 "listen"             */

 8 softkeys */

 touch sensitive knobs */

 mute       */

 solo       */

 select     */

 duplicate  */

 navigate   */

 pad mode   */

 pattern    */

 scene      */

 spacer */

 rec        */

 erase      */

 shift      */

 grid       */

 >          */

 <          */

 restart    */

 E          */

 F          */

 G          */

 H          */

 D          */

 C          */

 B          */

 A          */

 control    */

 browse     */

 <          */

 snap       */

 autowrite  */

 >          */

 sampling   */

 step       */

 8 softkeys */

 note repeat */

 play        */

/* some of these devices have endless rotation potentiometers

 * built in which use two tapers, 90 degrees phase shifted.

 * this algorithm decodes them to one single value, ranging

 0..90 and 270..360 degrees */

 90..270 degrees */

 0..180 degrees */

 180..360 degrees */

 interpolate both slider values, depending on weight factors */

 0..99 x DEG360 */

 normalize to 0..999 */

 4 under the left screen */

 4 under the right screen */

 volume */

 tempo */

 swing */

 rotary encoders */

 buttons */

 left wheel */

 right wheel */

 rotary encoders */

 Volume Fader Channel D */

 Volume Fader Channel B */

 Volume Fader Channel A */

 Volume Fader Channel C */

 Loop Volume */

 Crossfader */

 Tempo Fader R */

 Tempo Fader L */

 Mic Volume */

 Cue Mix */

 Wheel distance sensor L */

 Wheel distance sensor R */

 Channel D EQ - Filter */

 Channel D EQ - Low */

 Channel D EQ - Mid */

 Channel D EQ - Hi */

 FX2 - dry/wet */

 FX2 - 1 */

 FX2 - 2 */

 FX2 - 3 */

 Channel B EQ - Filter */

 Channel B EQ - Low */

 Channel B EQ - Mid */

 Channel B EQ - Hi */

 Channel A EQ - Filter */

 Channel A EQ - Low */

 Channel A EQ - Mid */

 Channel A EQ - Hi */

 Channel C EQ - Filter */

 Channel C EQ - Low */

 Channel C EQ - Mid */

 Channel C EQ - Hi */

 FX1 - wet/dry */

 FX1 - 1 */

 FX1 - 2 */

 FX1 - 3 */

 analog potentiometers */

 rotary encoders */

 36 analog potentiometers and faders */

 2 encoder wheels */

 9 rotary encoders */

 no input methods supported on this device */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (c) 2006,2007 Daniel Mack

 port */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * caiaq.c: ALSA driver for caiaq/NativeInstruments devices

 *

 *   Copyright (c) 2007 Daniel Mack <daniel@caiaq.de>

 *                      Karsten Wiese <fzu@wemgehoertderstaat.de>

 Index 0-max */

 Id for this card */

 Enable this card */

 terminator */ }

 packets per microframe */

 device-specific startup specials */

 RigKontrol2 - display centered dash ('-') */

 RigKontrol2 - display two centered dashes ('--') */

 Audio Kontrol 1 - make USB-LED stop blinking */

 Audio 8 DJ - trigger read of current settings */

 fix up some defaults */

 finally, register the card and all its sub-instances */

 sanity checks of EPs before actually submitting */

	/* if the id was not passed as module option, fill it with a shortened

	 * version of the product string which does not contain any

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (c) 2007 Daniel Mack

 *   friendly supported by NI.

 current input mode of A8DJ and A4DJ */

 name and private_value filled later */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Copyright (c) 2006-2008 Daniel Mack, Karsten Wiese

 will overwrite later */

		/* when the last client has stopped streaming,

 this should probably go upstream */

	/* the first client that opens a stream defines the sample rate

 operators for both playback and capture */

 paranoia check */

 3 audio data bytes, followed by 1 check byte */

 fill in the check bytes */

 fill in the check byte pattern */

 find an unused output urb that is unused */

	/* read the recently received packet and send back one which has

 re-submit inbound urb */

 setup samplerates */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Edirol UA-101/UA-1000 driver

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

/*

 * Should not be lower than the minimum scheduling delay of the host

 * controller.  Some Intel controllers need more than one frame; as long as

 * that driver doesn't tell us about this, use 1.5 frames just to be sure.

 Somewhat random. */

/*

 * This magic value optimizes memory usage efficiency for the UA-101's packet

 * sizes at all sample rates, taking into account the stupid cache pool sizes

 * that usb_alloc_coherent() uses.

 hardware specific */

 bits in struct ua101::states */

 FIFO to synchronize playback rate to capture rate */

 unlinked */

 device removed */

 unlinked */

 device disabled */

 append URB to FIFO */

 copy data from the ALSA ring buffer into the URB buffer */

 wrap around at end of ring buffer */

	/*

	 * Synchronizing the playback rate to the capture rate is done by using

	 * the same sequence of packet sizes for both streams.

	 * Submitting a playback URB therefore requires both a ready URB and

	 * the size of the corresponding capture packet, i.e., both playback

	 * and capture URBs must have been completed.  Since the USB core does

	 * not guarantee that playback and capture complete callbacks are

	 * called alternately, we use two FIFOs for packet sizes and read URBs;

	 * submitting playback URBs is possible as long as both FIFOs are

	 * nonempty.

 take packet size out of FIFO */

 take URB out of FIFO */

 fill packet with data or silence */

 and off you go ... */

 copy data from the URB buffer into the ALSA ring buffer */

 wrap around at end of ring buffer */

 unlinked */

 device removed */

 unlinked */

 device disabled */

 append packet size to FIFO */

			/*

			 * Ring buffer overflow; this happens when the playback

			 * stream is not running.  Throw away the oldest entry,

			 * so that the playback stream, when it starts, sees

			 * the most recent packet sizes.

	/*

	 * We submit the initial URBs all at once, so we have to wait for the

	 * packet size FIFO to be full.

 all initial URBs contain silence */

	/*

	 * The EHCI driver schedules the first packet of an iso stream at 10 ms

	 * in the future, i.e., no data is actually captured for that long.

	 * Take the wait here so that the stream is known to be actually

	 * running when the start trigger has been called.

 see the comment in capture_pcm_prepare() */

	/*

	 * The cache pool sizes used by usb_alloc_coherent() (128, 512, 2048) are

	 * quite bad when used with the packet sizes of this device (e.g. 280,

	 * 520, 624).  Therefore, we allocate and subdivide entire pages, using

	 * a smaller buffer only for the last chunk.

 UA-101 */

 UA-1000 */

 make sure that userspace cannot create new requests */

 make sure that there are no pending USB requests */

 UA-1000 high speed */

 UA-101 high speed */

 UA-101 full speed */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2007, 2008 Karsten Wiese <fzu@wemgehoertderstaat.de>

                             setup                                  */

/*

 * convert a sampling rate into our full speed format (fs/1000 in Q16.16)

 * this will overflow at approx 524 kHz

/*

 * convert a sampling rate into USB high speed format (fs/8000 in Q16.16)

 * this will overflow at approx 4 MHz

	/*

		t_period = period_frames / sample_rate

		iso_packs = t_period / t_iso_frame

			= (period_frames / sample_rate) * (1 / t_iso_frame)

 calculate the frequency in 16.16 format */

                             start                                  */

/*

  This loop_back() shows how to read/write the period data.

 just guesswork                            ^^^^^^ */

 wait, check */

                             stop                                   */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * usbusy2y.c - ALSA USB US-428 Driver

 *

2005-04-14 Karsten Wiese

	Version 0.8.7.2:

	Call snd_card_free() instead of snd_card_free_in_thread() to prevent oops with dead keyboard symptom.

	Tested ok with kernel 2.6.12-rc2.



2004-12-14 Karsten Wiese

	Version 0.8.7.1:

	snd_pcm_open for rawusb pcm-devices now returns -EBUSY if called without rawusb's hwdep device being open.



2004-12-02 Karsten Wiese

	Version 0.8.7:

	Use macro usb_maxpacket() for portability.



2004-10-26 Karsten Wiese

	Version 0.8.6:

	wake_up() process waiting in usx2y_urbs_start() on error.



2004-10-21 Karsten Wiese

	Version 0.8.5:

	nrpacks is runtime or compiletime configurable now with tested values from 1 to 4.



2004-10-03 Karsten Wiese

	Version 0.8.2:

	Avoid any possible racing while in prepare callback.



2004-09-30 Karsten Wiese

	Version 0.8.0:

	Simplified things and made ohci work again.



2004-09-20 Karsten Wiese

	Version 0.7.3:

	Use usb_kill_urb() instead of deprecated (kernel 2.6.9) usb_unlink_urb().



2004-07-13 Karsten Wiese

	Version 0.7.1:

	Don't sleep in START/STOP callbacks anymore.

	us428 channels C/D not handled just for this version, sorry.



2004-06-21 Karsten Wiese

	Version 0.6.4:

	Temporarely suspend midi input

	to sanely call usb_set_interface() when setting format.



2004-06-12 Karsten Wiese

	Version 0.6.3:

	Made it thus the following rule is enforced:

	"All pcm substreams of one usx2y have to operate at the same rate & format."



2004-04-06 Karsten Wiese

	Version 0.6.0:

	Runs on 2.6.5 kernel without any "--with-debug=" things.

	us224 reported running.



2004-01-14 Karsten Wiese

	Version 0.5.1:

	Runs with 2.6.1 kernel.



2003-12-30 Karsten Wiese

	Version 0.4.1:

	Fix 24Bit 4Channel capturing for the us428.



2003-11-27 Karsten Wiese, Martin Langer

	Version 0.4:

	us122 support.

	us224 could be tested by uncommenting the sections containing USB_ID_US224



2003-11-03 Karsten Wiese

	Version 0.3:

	24Bit support.

	"arecord -D hw:1 -c 2 -r 48000 -M -f S24_3LE|aplay -D hw:1 -c 2 -r 48000 -M -f S24_3LE" works.



2003-08-22 Karsten Wiese

	Version 0.0.8:

	Removed EZUSB Firmware. First Stage Firmwaredownload is now done by tascam-firmware downloader.

	See:

	http://usb-midi-fw.sourceforge.net/tascam-firmware.tar.gz



2003-06-18 Karsten Wiese

	Version 0.0.5:

	changed to compile with kernel 2.4.21 and alsa 0.9.4



2002-10-16 Karsten Wiese

	Version 0.0.4:

	compiles again with alsa-current.

	USB_ISO_ASAP not used anymore (most of the time), instead

	urb->start_frame is calculated here now, some calls inside usb-driver don't need to happen anymore.



	To get the best out of this:

	Disable APM-support in the kernel as APM-BIOS calls (once each second) hard disable interrupt for many precious milliseconds.

	This helped me much on my slowish PII 400 & PIII 500.

	ACPI yet untested but might cause the same bad behaviour.

	Use a kernel with lowlatency and preemptiv patches applied.

	To autoload snd-usb-midi append a line

		post-install snd-usb-us428 modprobe snd-usb-midi

	to /etc/modules.conf.



	known problems:

	sliders, knobs, lights not yet handled except MASTER Volume slider.

	"pcm -c 2" doesn't work. "pcm -c 2 -m direct_interleaved" does.

	KDE3: "Enable full duplex operation" deadlocks.



2002-08-31 Karsten Wiese

	Version 0.0.3: audio also simplex;

	simplifying: iso urbs only 1 packet, melted structs.

	ASYNC_UNLINK not used anymore: no more crashes so far.....

	for alsa 0.9 rc3.



2002-08-09 Karsten Wiese

	Version 0.0.2: midi works with snd-usb-midi, audio (only fullduplex now) with i.e. bristol.

	The firmware has been sniffed from win2k us-428 driver 3.09.



 *   Copyright (c) 2002 - 2004 Karsten Wiese

 Index 0-max */

 Id for this card */

 Enable this card */

/*

 * pipe 4 is used for switching the lamps, setting samplerate, volumes ....

	printk("%i:0x%02X ", 8, (int)((unsigned char*)usx2y->in04_buf)[8]); Master volume shows 0 here if fader is at max during boot ?!?

 FIXME if more than 1 p4out is new, 1 gets lost.

/*

 * Prepare some urbs

 terminator */ }

us428(card)->usbmidi.ifnum,

 release the midi resources */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

/* USX2Y "rawusb" aka hwdep_pcm implementation



 Its usb's unableness to atomically handle power of 2 period sized data chuncs

 at standard samplerates,

 what led to this part of the usx2y module:

 It provides the alsa kernel half of the usx2y-alsa-jack driver pair.

 The pair uses a hardware dependent alsa-device for mmaped pcm transport.

 Advantage achieved:

         The usb_hc moves pcm data from/into memory via DMA.

         That memory is mmaped by jack's usx2y driver.

         Jack's usx2y driver is the first/last to read/write pcm data.

         Read/write is a combination of power of 2 period shaping and

         float/int conversation.

         Compared to mainline alsa/jack we leave out power of 2 period shaping inside

         snd-usb-usx2y which needs memcpy() and additional buffers.

         As a side effect possible unwanted pcm-data coruption resulting of

         standard alsa's snd-usb-usx2y period shaping scheme falls away.

         Result is sane jack operation at buffering schemes down to 128frames,

         2 periods.

         plain usx2y alsa mode is able to achieve 64frames, 4periods, but only at the

         cost of easier triggered i.e. aeolus xruns (128 or 256frames,

         2periods works but is useless cause of crackling).



 This is a first "proof of concept" implementation.

 Later, functionalities should migrate to more appropriate places:

 Userland:

 - The jackd could mmap its float-pcm buffers directly from alsa-lib.

 - alsa-lib could provide power of 2 period sized shaping combined with int/float

   conversation.

   Currently the usx2y jack driver provides above 2 services.

 Kernel:

 - rawusb dma pcm buffer transport should go to snd-usb-lib, so also snd-usb-audio

   devices can use it.

   Currently rawusb dma pcm buffer transport (this file) is only available to snd-usb-usx2y.

FIXME

 active? hmm, skip this */

 update the pointer, call callback if necessary */

FIXME: so far only correct period_size == 2^x ?

/*

 * prepare urb for playback data pipe

 *

 * we copy the data directly from the pcm buffer.

 * the current position to be copied is held in hwptr field.

 * since a urb can handle only a single linear buffer, if the total

 * transferred area overflows the buffer boundary, we cannot send

 * it directly from the buffer.  thus the data is once copied to

 * a temporary buffer and urb points to that.

 calculate the size of a packet */

 set up descriptor */

/*

 * release a substream

/*

 * initialize a substream's urbs

 allocate and initialize data urbs */

/*

 * free the buffer

 Make sure above modifications are seen by i_usx2y_subs_startup()

 Call it now

 something is completely wrong > stop everything

/*

 * prepare callback

 *

 * set format and initialize urbs

 Start hardware streams

 SyncStream first....

 if userspace tries to mmap beyond end of our buffer, fail */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Copyright (C) 2007, 2008 Karsten Wiese <fzu@wemgehoertderstaat.de>

 Index 0-max */

 Id for this card */

 Enable this card */

 driver_info flags */

 if userspace tries to mmap beyond end of our buffer, fail */

		/* The us-122l's descriptor defaults to iso max_packsize 78,

		   which isn't needed for samplerates <= 48000.

		   Lets save some memory:

 release the midi resources */

 release the midi resources */

 needed, doesn't restart without: */

 US-144 only works at USB1.1! Disable module ehci-hcd. */

 terminator */ }

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Tascam US-X2Y USB soundcards

 *

 * FPGA Loader + ALSA Startup

 *

 * Copyright (c) 2003 by Karsten Wiese <annabellesgarden@yahoo.de>

 FIXME this hwdep interface is used twice: fpga download and mmap for controlling Lights etc. Maybe better using 2 hwdep devs?

 so as long as the device isn't fully initialised yet we return -EBUSY here.

 if userspace tries to mmap beyond end of our buffer, fail */

 0: Prepad Data, 1: FPGA Code

 give the device some time

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   US-X2Y AUDIO

 *   Copyright (c) 2002-2004 by Karsten Wiese

 *

 *   based on

 *

 *   (Tentative) USB Audio Driver for ALSA

 *

 *   Main and PCM part

 *

 *   Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>

 *

 *   Many codes borrowed from audio.c by

 *	    Alan Cox (alan@lxorguk.ukuu.org.uk)

 *	    Thomas Sailer (sailer@ife.ee.ethz.ch)

/* Default value used for nr of packs per urb.

 * 1 to 4 have been tested ok on uhci.

 * To use 3 on ohci, you'd need a patch:

 * look for "0000425-linux-2.6.9-rc4-mm1_ohci-hcd.patch.gz" on

 * "https://bugtrack.alsa-project.org/alsa-bug/bug_view_page.php?bug_id=0000425"

 *

 * 1, 2 and 4 work out of the box on ohci, if I recall correctly.

 * Bigger is safer operation, smaller gives lower latencies.

/* If your system works ok with this module's parameter

 * nrpacks set to 1, you might as well comment

 * this define out, and thereby produce smaller, faster code.

 * You'd also set USX2Y_NRPACKS to 1 then.

 number of packets per urb */

 active? hmm, skip this */

 copy a data chunk */

 update the pointer, call callback if necessary */

/*

 * prepare urb for playback data pipe

 *

 * we copy the data directly from the pcm buffer.

 * the current position to be copied is held in hwptr field.

 * since a urb can handle only a single linear buffer, if the total

 * transferred area overflows the buffer boundary, we cannot send

 * it directly from the buffer.  thus the data is once copied to

 * a temporary buffer and urb points to that.

 calculate the size of a packet */

 set up descriptor */

			/* err, the transferred area goes over buffer boundary.

			 * copy the data to the temp buffer.

 set the buffer pointer */

/*

 * process after playback data complete

 *

 * update the current position and call callback if a period is processed.

 let hcd do rollover sanity checks

 we need to set this at each time */

 reset the pointer */

/*

 * release a substreams urbs

/*

 * initialize a substream's urbs

 allocate a temporary buffer for playback */

 allocate and initialize data urbs */

 allocate a capture buffer per urb */

 something is completely wrong > stop everything

/*

 * return the current pcm pointer.  just return the hwptr_done value.

/*

 * start/stop substream

/*

 * allocate a buffer, setup samplerate

 *

 * so far we use a physically linear buffer although packetize transfer

 * doesn't need a continuous area.

 * if sg buffer is supported on the later version of alsa, we'll follow

 * that.

 this line sets 44100, well actually a little less

 only tascam / frontier design knows the further lines .......

 this line sets 48000, well actually a little less

 only tascam / frontier design knows the further lines .......

	/* all pcm substreams off one usx2y have to operate at the same

	 * rate & format

/*

 * free the buffer

/*

 * prepare callback

 *

 * set format and initialize urbs

 Start hardware streams

 SyncStream first....

/*

 * free a usb stream instance

/*

 * create a chip instance and set its names.

 Lets us428 recognize output-volume settings, disturbs us122.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Behringer BCD2000 driver

 *

 *   Copyright (C) 2014 Mario Kicherer (dev@kicherer.org)

 (de)register midi substream from client */

 ignore packets without payload */

 copy command prefix bytes */

	/*

	 * get MIDI packet and leave space for command prefix

	 * and payload length

 set payload length */

 send packet to the BCD2000 */

 (de)register midi substream from client */

 check if there is data userspace wants to send */

 check if there is more data userspace wants to send */

 return URB to device */

 copy init sequence into buffer */

 submit sequence */

 pass URB to device to enable button and controller events */

 ensure initialization is finished */

 output */

 input */

 sanity checks of EPs before actually submitting */

 usb_kill_urb not necessary, urb is aborted automatically */

 make sure that userspace cannot create new requests */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Linux driver for M2Tech hiFace compatible devices

 *

 * Copyright 2012-2013 (C) M2TECH S.r.l and Amarula Solutions B.V.

 *

 * Authors:  Michael Trimarchi <michael@amarulasolutions.com>

 *           Antonio Ospite <ao2@amarulasolutions.com>

 *

 * The driver is based on the work done in TerraTec DMX 6Fire USB

 Index 0-max */

 Id for card */

 Enable this card */

 if we are here, card can be registered in alsa. */

 check whether the card is already registered */

 Make sure that the userspace cannot create new request */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Linux driver for M2Tech hiFace compatible devices

 *

 * Copyright 2012-2013 (C) M2TECH S.r.l and Amarula Solutions B.V.

 *

 * Authors:  Michael Trimarchi <michael@amarulasolutions.com>

 *           Antonio Ospite <ao2@amarulasolutions.com>

 *

 * The driver is based on the work done in TerraTec DMX 6Fire USB

 current position in alsa dma_area */

 current position in current period */

 pcm streaming states */

 no pcm streaming */

 pcm streaming requested, waiting to become ready */

 pcm streaming running */

 if set driver won't do anymore pcm on device */

 one of STREAM_XXX */

 changes in hiface_pcm_open to support extra rates */

 message values used to change the sample rate */

	/* We are already sure that the rate is supported here thanks to

	 * ALSA constraints

	/*

	 * USBIO: Vendor 0xb0(wValue=0x0043, wIndex=0x0000)

	 * 43 b0 43 00 00 00 00 00

	 * USBIO: Vendor 0xb0(wValue=0x004b, wIndex=0x0000)

	 * 43 b0 4b 00 00 00 00 00

	 * This control message doesn't have any ack from the

	 * other side

 call with stream_mutex locked */

 call with stream_mutex locked */

 reset panic state when starting a new stream */

 submit our out urbs zero init */

 wait for first out urb to return (sent in in urb handler) */

 The hardware wants word-swapped 32-bit values */

 call with substream locked */

 returns true if a period elapsed */

 wrap around at end of ring buffer */

 unlinked */

 device removed */

 unlinked */

 device disabled */

 now send our playback data (if a free out urb was found) */

 explicit constraints needed as we added SNDRV_PCM_RATE_KNOT */

 deactivate substream */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for AMD7930 sound chips found on Sparcs.

 * Copyright (C) 2002, 2008 David S. Miller <davem@davemloft.net>

 *

 * Based entirely upon drivers/sbus/audio/amd7930.c which is:

 * Copyright (C) 1996,1997 Thomas K. Dyas (tdyas@eden.rutgers.edu)

 *

 * --- Notes from Thomas's original driver ---

 * This is the lowlevel driver for the AMD7930 audio chip found on all

 * sun4c machines and some sun4m machines.

 *

 * The amd7930 is actually an ISDN chip which has a very simple

 * integrated audio encoder/decoder. When Sun decided on what chip to

 * use for audio, they had the brilliant idea of using the amd7930 and

 * only connecting the audio encoder/decoder pins.

 *

 * Thanks to the AMD engineer who was able to get us the AMD79C30

 * databook which has all the programming information and gain tables.

 *

 * Advanced Micro Devices' Am79C30A is an ISDN/audio chip used in the

 * SparcStation 1+.  The chip provides microphone and speaker interfaces

 * which provide mono-channel audio at 8K samples per second via either

 * 8-bit A-law or 8-bit mu-law encoding.  Also, the chip features an

 * ISDN BRI Line Interface Unit (LIU), I.430 S/T physical interface,

 * which performs basic D channel LAPD processing and provides raw

 * B channel data.  The digital audio channel, the two ISDN B channels,

 * and two 64 Kbps channels to the microprocessor are all interconnected

 * via a multiplexer.

 * --- End of notes from Thoamas's original driver ---

 Index 0-MAX */

 ID for this card */

 Enable this card */

 Device register layout.  */

 Register interface presented to the CPU by the amd7930. */

 Command Register (W) */

 Interrupt Register (R) */

 Data Register (R/W) */

 D-channel Status Register 1 (R) */

 D-channel Error Register (R) */

 D-channel Transmit Buffer (W) */

 D-channel Receive Buffer (R) */

 Bb-channel Transmit Buffer (W) */

 Bb-channel Receive Buffer (R) */

 Bc-channel Transmit Buffer (W) */

 Bc-channel Receive Buffer (R) */

 D-channel Status Register 2 (R) */

 Indirect registers in the Main Audio Processor. */

/* After an amd7930 interrupt, reading the Interrupt Register (ir)

 * clears the interrupt and returns a bitmask indicating which

 * interrupt source(s) require service.

 D-channel xmit threshold */

 D-channel recv threshold */

 D-channel packet status */

 D-channel error */

 B-channel data xfer */

 LIU status */

 D-channel buffer status */

 multiframe or PP */

/* The amd7930 has "indirect registers" which are accessed by writing

 * the register number into the Command Register and then reading or

 * writing values from the Data Register as appropriate. We define the

 * AMR_* macros to be the indirect register numbers and AM_* macros to

 * be bits in whatever register is referred to.

 Initialization */

 Line Interface Unit */

 Multiplexor */

 Main Audio Processor */

 Data Link Controller */

 Peripheral Port */

 Playback/Capture buffer state. */

 Idle the AMD7930 chip.  The amd->lock is not held.  */

 Enable chip interrupts.  The amd->lock is not held.  */

 Disable chip interrupts.  The amd->lock is not held.  */

/* Commit amd7930_map settings to the hardware.

 * The amd->lock is held and local interrupts are disabled.

/* gx, gr & stg gains.  this table must contain 256 elements with

 * the 0th being "infinity" (the magic value 9008).  The remaining

 * elements match sun's gain curve (but with higher resolution):

 * -18 to 0dB in .16dB steps then 0 to 12dB in .08dB steps.

 5. dB */

 5.5 dB */

 6. dB */

 6.5 dB */

 7. dB */

 7.5 dB */

 8. dB */

 8.5 dB */

 9. dB */

 9.5 dB */

 10. dB */

 10.5 dB */

 11. dB */

 11.5 dB */

 12. dB */

 13. dB */

 14. dB */

 15. dB */

 15.9 dB */

 16.9 dB */

 18. dB */

/* Update amd7930_map settings and program them into the hardware.

 * The amd->lock is held and local interrupts are disabled.

 Enable B channel interrupts.  */

 Disable B channel interrupts.  */

 Setup the pseudo-dma transfer pointers.  */

 Put the chip into the correct encoding format.  */

 Setup the pseudo-dma transfer pointers.  */

 Put the chip into the correct encoding format.  */

 Playback and capture have identical properties.  */

 ID */             "sun_amd7930",

 device */         0,

 playback count */ 1,

 capture count */  1, &pcm)) < 0)

 Always MUX audio (Ba) to channel Bb. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for CS4231 sound chips found on Sparcs.

 * Copyright (C) 2002, 2008 David S. Miller <davem@davemloft.net>

 *

 * Based entirely upon drivers/sbus/audio/cs4231.c which is:

 * Copyright (C) 1996, 1997, 1998 Derrick J Brashear (shadow@andrew.cmu.edu)

 * and also sound/isa/cs423x/cs4231_lib.c which is:

 * Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 Index 0-MAX */

 ID for this card */

 Enable this card */

 DMA access lock */

 registers access lock */

 registers image */

 mutex for mce register */

 mutex for ALSA open/close */

/* Eventually we can use sound/isa/cs423x/cs4231_lib.c directly, but for

 * now....  -DaveM

 IO ports */

 XXX offsets are different than PC ISA chips... */

 SBUS DMA register defines.  */

 APC DMA CSR */

 APC Capture DMA Address */

 APC Capture Count */

 APC Capture DMA Next Address */

 APC Capture Next Count */

 APC Play DMA Address */

 APC Play Count */

 APC Play DMA Next Address */

 APC Play Next Count */

 Defines for SBUS DMA-routines */

 APC DMA Address */

 APC Count */

 APC DMA Next Address */

 APC Next Count */

 Play registers start at 0x30 */

 Record registers start at 0x20 */

 APCCSR bits */

 Interrupt Pending */

 Playback interrupt */

 Capture interrupt */

 General interrupt */

 General ext int. enable */

 Playback ext intr */

 Capture ext intr */

 Error ext intr */

 Pipe empty interrupt (0 write to pva) */

 Play pipe empty (pva and pnva not set) */

 Playback NVA dirty */

 play pipe empty Int enable */

 Cap data dropped on floor */

 Capture NVA dirty */

 Capture pipe empty (cva and cnva not set) */

 Cap. pipe empty int enable */

 Pause the play DMA */

 Pause the capture DMA */

 CODEC RESET */

 Play DMA Go */

 Capture DMA Go */

 Reset the chip */

 EBUS DMA register offsets  */

 Control/Status */

 DMA Address */

 DMA Count */

/*

 *  Some variables

 5510 */	0x00 | CS4231_XTAL2,

 6620 */	0x0E | CS4231_XTAL2,

 8000 */	0x00 | CS4231_XTAL1,

 9600 */	0x0E | CS4231_XTAL1,

 11025 */	0x02 | CS4231_XTAL2,

 16000 */	0x02 | CS4231_XTAL1,

 18900 */	0x04 | CS4231_XTAL2,

 22050 */	0x06 | CS4231_XTAL2,

 27042 */	0x04 | CS4231_XTAL1,

 32000 */	0x06 | CS4231_XTAL1,

 33075 */	0x0C | CS4231_XTAL2,

 37800 */	0x08 | CS4231_XTAL2,

 44100 */	0x0A | CS4231_XTAL2,

 48000 */	0x0C | CS4231_XTAL1

 00/00 - lic */

 01/01 - ric */

 02/02 - la1ic */

 03/03 - ra1ic */

 04/04 - la2ic */

 05/05 - ra2ic */

 06/06 - loc */

 07/07 - roc */

 08/08 - pdfr */

 09/09 - ic */

 0a/10 - pc */

 0b/11 - ti */

 0c/12 - mi */

 0d/13 - lbc */

 0e/14 - pbru */

 0f/15 - pbrl */

 10/16 - afei */

 11/17 - afeii */

 12/18 - llic */

 13/19 - rlic */

 14/20 - tlb */

 15/21 - thb */

 16/22 - la3mic/reserved */

 17/23 - ra3mic/reserved */

 18/24 - afs */

 19/25 - lamoc/version */

 1a/26 - mioc */

 1b/27 - ramoc/reserved */

 1c/28 - cdfr */

 1d/29 - res4 */

 1e/30 - cbru */

 1f/31 - cbrl */

/*

 *  Basic I/O functions

/*

 *  CS4231 detection / MCE routines

 looks like this sequence is proper for CS4231A chip (GUS MAX) */

 end of cleanup sequence */

	/*

	 * Wait for auto-calibration (AC) process to finish, i.e. ACI to go low.

/*

 *  CODEC I/O

/*

 *  Timer interface

 ok. now enable and ack CODEC IRQ */

 clear IRQ */

 clear IRQ */

 disable IRQ */

 clear IRQ */

 clear IRQ */

 now disable record & playback */

 clear IRQ again */

 clear IRQ */

 clear IRQ */

/*

 *  timer open/close

/*

 *  ok.. exported functions..

 detect overrange only above 0dB; may be user selectable? */

 this is valid value */

 no valid device found */

 clear any pendings IRQ */

 ok.. fill all CS4231 registers */

 all things are ok.. */

/* XXX We can do some power-management, in particular on EBUS using

 * XXX the audio AUXIO register...

 global setup */

 Timer initialization */

/*

 *  MIXER part

 SPARC specific uses of XCTL{0,1} general purpose outputs.  */

This is IRQ is not raised by the cs4231*/

 ACK the APC interrupt. */

 ACK the CS4231 interrupt. */

/*

 * SBUS DMA routines

/*

 * Init and exit routines

/*

 * EBUS DMA wrappers

/*

 * Init and exit routines

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for DBRI sound chip found on Sparcs.

 * Copyright (C) 2004, 2005 Martin Habets (mhabets@users.sourceforge.net)

 *

 * Converted to ring buffered version by Krzysztof Helt (krzysztof.h1@wp.pl)

 *

 * Based entirely upon drivers/sbus/audio/dbri.c which is:

 * Copyright (C) 1997 Rudolf Koenig (rfkoenig@immd4.informatik.uni-erlangen.de)

 * Copyright (C) 1998, 1999 Brent Baccala (baccala@freesoft.org)

 *

 * This is the low level driver for the DBRI & MMCODEC duo used for ISDN & AUDIO

 * on Sun SPARCStation 10, 20, LX and Voyager models.

 *

 * - DBRI: AT&T T5900FX Dual Basic Rates ISDN Interface. It is a 32 channel

 *   data time multiplexer with ISDN support (aka T7259)

 *   Interfaces: SBus,ISDN NT & TE, CHI, 4 bits parallel.

 *   CHI: (spelled ki) Concentration Highway Interface (AT&T or Intel bus ?).

 *   Documentation:

 *   - "STP 4000SBus Dual Basic Rate ISDN (DBRI) Transceiver" from

 *     Sparc Technology Business (courtesy of Sun Support)

 *   - Data sheet of the T7903, a newer but very similar ISA bus equivalent

 *     available from the Lucent (formerly AT&T microelectronics) home

 *     page.

 *   - https://www.freesoft.org/Linux/DBRI/

 * - MMCODEC: Crystal Semiconductor CS4215 16 bit Multimedia Audio Codec

 *   Interfaces: CHI, Audio In & Out, 2 bits parallel

 *   Documentation: from the Crystal Semiconductor home page.

 *

 * The DBRI is a 32 pipe machine, each pipe can transfer some bits between

 * memory and a serial device (long pipes, no. 0-15) or between two serial

 * devices (short pipes, no. 16-31), or simply send a fixed data to a serial

 * device (short pipes).

 * A timeslot defines the bit-offset and no. of bits read from a serial device.

 * The timeslots are linked to 6 circular lists, one for each direction for

 * each serial device (NT,TE,CHI). A timeslot is associated to 1 or 2 pipes

 * (the second one is a monitor/tee pipe, valid only for serial input).

 *

 * The mmcodec is connected via the CHI bus and needs the data & some

 * parameters (volume, output selection) time multiplexed in 8 byte

 * chunks. It also has a control mode, which serves for audio format setting.

 *

 * Looking at the CS4215 data sheet it is easy to set up 2 or 4 codecs on

 * the same CHI bus, so I thought perhaps it is possible to use the on-board

 * & the speakerbox codec simultaneously, giving 2 (not very independent :-)

 * audio devices. But the SUN HW group decided against it, at least on my

 * LX the speakerbox connector has at least 1 pin missing and 1 wrongly

 * connected.

 *

 * I've tried to stick to the following function naming conventions:

 * snd_*	ALSA stuff

 * cs4215_*	CS4215 codec specific stuff

 * dbri_*	DBRI high-level stuff

 * other	DBRI low-level stuff

 Index 0-MAX */

 ID for this card */

 Enable this card */

 DBRI_DEBUG */

/***************************************************************************

	CS4215 specific definitions and structures

 Data mode: Time slots 5-8 */

 Ctrl mode: Time slots 1-4 */

 Bit offset from frame sync to time slot 1 */

 In bits, either 8 or 16 */

 1 or 2 */

/*

 * Control mode first

 Time Slot 1, Status register */

 Control Latch Bit */

 1: line: 2.0V, speaker 4V */

 0: line: 2.8V, speaker 8V */

 1: Microphone: 20dB gain disabled */

 Time Slot 2, Data Format Register */

 Actually 24428.57 */

 {    NA, (1 << 4), (4 << 3) }, */

 {    NA, (1 << 4), (5 << 3) }, */

 Actually 5512.5 */

 High Pass Filter, 1: Enabled */

 Mask off reserved bits in slot 1 & 2 */

 Time Slot 3, Serial Port Control register */

 0: Enable serial output */

 1: Master mode: Generate SCLK */

 Bitrate: 64 bits per frame */

 Master clock */

 24.576 MHz clock source */

 16.9344 MHz clock source */

 Clockin, 256 x Fs */

 Clockin, see DFR */

 Time Slot 4, Test Register */

 0:Digital-Dig loop, 1:Dig-Analog-Dig loop */

 Enable Loopback Testing */

 Time Slot 5, Parallel Port Register */

 Read only here and the same as the in data mode */

 Time Slot 6, Reserved  */

 Time Slot 7, Version Register  */

 Known versions 0/C, 1/D, 2/E */

 Time Slot 8, Reserved  */

/*

 * Data mode

 Time Slot 1-2: Left Channel Data, 2-3: Right Channel Data  */

 Time Slot 5, Output Setting  */

 Left Output Attenuation 0x3f: -94.5 dB */

 Line Out Enable */

 Headphone Enable */

 Time Slot 6, Output Setting  */

 Right Output Attenuation 0x3f: -94.5 dB */

 Speaker Enable */

 A/D Data Invalid: Busy in calibration */

 Time Slot 7, Input Setting */

 Left Gain Setting 0xf: 22.5 dB */

 Input Select: 1=Microphone, 0=Line */

 1: Over range condition occurred */

 Parallel I/O 0 */

 Time Slot 8, Input Setting */

 Right Gain Setting 0xf: 22.5 dB */

 Monitor Path Attenuation 0xf: mute */

/***************************************************************************

		DBRI specific definitions and structures

 DBRI main registers */

 Status and Control */

 Mode and Interrupt */

 Parallel IO */

 Test */

 Command Queue Pointer */

 Interrupt Queue Pointer */

 One transmit/receive descriptor */

 When ba != 0 descriptor is used */

 Transmit/Receive Buffer Address */

 Next Descriptor Address */

/* This structure is in a DMA region where it can accessed by both

 * the CPU and the DBRI

 Place for commands */

 Interrupt field  */

 Xmit/receive descriptors */

 SDP command word */

 Next pipe in linked list */

 Length of timeslot (bits) */

 Index of first descriptor */

 Index of active descriptor */

 Ptr to receive fixed data */

 Per stream (playback or record) information */

 Device view of ALSA DMA buffer */

 Size of DMA buffer             */

 offset in user buffer          */

 Data pipe used                 */

 mixer elements                 */

 This structure holds the information for both chips (DBRI & CS4215) */

 Needed for unload */

 OF device info */

 Pointer to our DMA block */

 DBRI visible DMA address */

 dbri HW regs */

 intr queue pointer */

 DBRI's 32 data pipes */

 Index of next desc, or -1 */

 Protects cmd queue accesses */

 Pointer to the last queued cmd */

 mmcodec special info */

 per stream (playback/record) info */

 Output volume */

 Input gain */

 DBRI Reg0 - Status Control Register - defines. (Page 17) */

 Program command & queue pointer valid */

 Allow 4-Word SBus Burst */

 Allow 16-Word SBus Burst */

 Allow 8-Word SBus Burst */

 Sanity Timer Disable */

 Permit activation of the TE interface */

 Permit activation of the NT interface */

 Permit activation of the CHI interface */

 Force Sanity Timer Time-Out */

 Disable Master Mode */

 Halt for Analysis */

 Soft Reset */

 DBRI Reg1 - Mode and Interrupt Register - defines. (Page 18) */

 Byte Order */

 Byte Order */

 Multiple Error Ack on SBus (read only) */

 Multiple Late Error on SBus (read only) */

 Lost Bus Grant on SBus (read only) */

 Burst Error on SBus (read only) */

 Interrupt Indicator (read only) */

 DBRI Reg2 - Parallel IO Register - defines. (Page 18) */

 Enable Pin 3 */

 Enable Pin 2 */

 Enable Pin 1 */

 Enable Pin 0 */

 Enable all the pins */

 Pin 3: 1: Data mode, 0: Ctrl mode */

 Pin 2: 1: Onboard PDN */

 Pin 1: 0: Reset */

 Pin 0: 1: Speakerbox PDN */

 DBRI Commands (Page 20) */

 Stop execution */

 Flush long pipes */

 New command queue */

 Initialize Interrupt Queue */

 Report command execution via interrupt */

 Setup Data Pipe */

 Continue Data Pipe (reread NULL Pointer) */

 Define Time Slot */

 Set short Data Pipe */

 Set CHI Global Mode */

 NT Command */

 TE Command */

 Codec setup */

 No comment */

 CHI Data mode command */

 Special bits for some commands */

 Pipe No.: 0-15 long, 16-21 short */

 Setup Data Pipe */

 IRM */

 Report 2nd time in a row value received */

 Report any changes */

 Report any changes */

 EOL interrupt enable */

 HDLC idle interrupt enable */

 Pipe data MODE */

 To/from memory */

 D Channel (prio control) */

 Serial to serial */

 Short only */

 Direction */

 Direction */

 Bit order within Byte */

 Bit order within Byte */

 Pointer Valid */

 Abort */

 Clear */

 Define Time Slot */

 Valid Input Time-Slot Descriptor */

 Valid Output Time-Slot Descriptor */

 Insert Time Slot */

 Delete Time Slot */

 Previous In Pipe */

 Previous Out Pipe */

 Time Slot defines */

 Number of bits in this time slot */

 Bit Count at start of TS */

 Data Invert */

 Single Channel / Normal mode */

 Monitor pipe */

 Non contiguous mode */

 Starting short pipes */

 Monitor Pipe */

 Pipe no.: 0-15 long, 16-21 short */

 Concentration Highway Interface Modes */

 Clock mode */

 Immediate Interrupt Report */

 CHIL Interrupt enabled */

 Open Drain Enable */

 Sample CHIFS on Rising Frame Edge */

 Frame Drive */

 Bits per Frame */

 NT: These are here for completeness */

 Frame Bit */

 Number of bad frames to loose framing */

 Interrupt Report & Mask: Immediate */

 Interrupt Report & Mask: Enable */

 Configure interface as NT */

 Fixed Timing */

 Echo Channel is Zeros */

 Inhibit Final Activation */

 Activate Interface */

 Multiframe Enable */

 Remote Loopback */

 Local Loopback */

 Force Activation */

 Activate Bipolar Violation */

 Codec Setup */

 Clock Select */

 FSCOD Falling Edge Delay */

 FSCOD Rising Edge Delay */

 Test */

 RAM Pointer */

 */

 Toggle ROM opcode monitor on/off */

 Microprocessor test */

 Serial-Controller test */

 Copy from Ram to system memory */

 Copy into Ram from system memory */

 RAM Built-In Self Test */

 Microcontroller Built-In Self Test */

 ROM Dump */

 CHI Data Mode */

 Transmit Data on CHIDR Pin */

 Receive Data on CHIDX Pin */

 Receive on Rising Edge of CHICK */

 Transmit Data on Rising Edge of CHICK */

 Transmit Highway Enable */

 Receive Highway Enable */

 The Interrupts */

 Buffer Ready for processing */

 Marked Interrupt in RD/TD */

 Flag to idle transition detected (HDLC) */

 Idle to flag transition detected (HDLC) */

 End of List */

 Command has bean read */

 Transmission of frame complete */

 BRI status change info */

 Fixed data change */

 CHI lost frame sync (channel 36 only) */

 Unrecoverable D-Channel collision */

 Dropped by frame slip */

 Repeated by frame slip */

 Lost Interrupt */

 DMA underrun */

 TE receive anchor */

 TE transmit anchor */

 NT transmit anchor */

 NT receive anchor */

 CHI send data */

 CHI receive data */

 */

 */

 */

 */

 */

 */

 */

 */

 */

 */

 CHI anchor pipe */

 CHI send */

 CHI receive */

 CHI receive */

 CHI receive */

 */

 */

 */

 */

 */

 */

 */

 */

 */

 */

 */

 Transmit descriptor defines */

 End of Frame */

 Do not append CRC */

 Number of valid bytes in the buffer */

 Final interrupt */

 Marker interrupt */

 Transmit Idle Characters */

 Flag Count */

 Underrun: transmitter is out of data */

 Abort: frame aborted */

 Transmit buffer Complete */

 Transmit status */

 Maximum buffer size per TD: almost 8KB */

 Receive descriptor defines */

 End of Frame */

 Completed buffer */

 Final interrupt */

 Marker interrupt */

 Buffer size */

 0: CRC is correct */

 1: Bad Byte received */

 Abort: frame aborted */

 Overrun: data lost */

 Receive status */

 Valid bytes in the buffer */

 stream_info[] access */

 Translate the ALSA direction into the array index */

 Return a pointer to dbri_streaminfo */

/*

 * Short data pipes transmit LSB first. The CS4215 receives MSB first. Grrr.

 * So we have to reverse the bits. Note: not all bit lengths are supported

/*

****************************************************************************

************** DBRI initialization and command synchronization *************

****************************************************************************



Commands are sent to the DBRI by building a list of them in memory,

then writing the address of the first list item to DBRI register 8.

The list is terminated with a WAIT command, which generates a

CPU interrupt to signal completion.



Since the DBRI can run in parallel with the CPU, several means of

synchronization present themselves. The method implemented here uses

the dbri_cmdwait() to wait for execution of batch of sent commands.



A circular command buffer is used here. A new command is being added

while another can be executed. The scheme works by adding two WAIT commands

after each sent batch of commands. When the next batch is prepared it is

added after the WAIT commands then the WAITs are replaced with single JUMP

command to the new batch. Then the DBRI is forced to reread the last WAIT

command (replaced by the JUMP by then). If the DBRI is still executing

previous commands the request to reread the WAIT command is ignored.



Every time a routine wants to write commands to the DBRI, it must

first call dbri_cmdlock() and get pointer to a free space in

dbri->dma->cmd buffer. After this, the commands can be written to

the buffer, and dbri_cmdsend() is called with the final pointer value

to send them to the DBRI.



/*

 * Wait for the current command string to execute

 Delay if previous commands are still being processed */

/*

 * Lock the command queue and return pointer to space for len cmd words

 * It locks the cmdlock spinlock.

 Space for 2 WAIT cmds (replaced later by 1 JUMP cmd) */

/*

 * Send prepared cmd string. It works by writing a JUMP cmd into

 * the last WAIT cmd and force DBRI to reread the cmd.

 * The JUMP cmd points to the new cmd string.

 * It also releases the cmdlock spinlock.

 *

 * Lock must be held before calling this.

 restrict it to a 16 bit counter. */

 Replace the last command with JUMP */

 Reread the last command */

 Lock must be held when calling this */

 Soft Reset */

	/* A brute approach - DBRI falls back to working burst size by itself

 Lock must not be held before calling this */

 Initialize pipes */

	/*

	 * Initialize the interrupt ring buffer.

	/*

	 * Set up the interrupt queue

/*

****************************************************************************

************************** DBRI data pipe management ***********************

****************************************************************************



While DBRI control functions use the command and interrupt buffers, the

main data path takes the form of data pipes, which can be short (command

and interrupt driven), or long (attached to DMA buffers).  These functions

provide a rudimentary means of setting up and managing the DBRI's pipes,

but the calling functions have to make sure they respect the pipes' linked

list ordering, among other things.  The transmit and receive functions

here interface closely with the transmit and receive interrupt code.



/* reset_pipe(dbri, pipe)

 *

 * Called on an in-use pipe to clear anything being transmitted or received

 * Lock must be held before calling this.

/*

 * Lock must be held before calling this.

 sdp &= 0xf800; */

	/* If this is a fixed receive pipe, arrange for an interrupt

	 * every time its data changes

/*

 * Lock must be held before calling this.

		/* Deal with CHI special case:

		 * "If transmission on edges 0 or 1 is desired, then cycle n

		 *  (where n = # of bit times per frame...) must be used."

		 *                  - DBRI data sheet, page 11

/*

 * Lock must be held before calling this.

/* xmit_fixed() / recv_fixed()

 *

 * Transmit/receive data on a "fixed" pipe - i.e, one whose contents are not

 * expected to change much, and which we don't need to buffer.

 * The DBRI only interrupts us when the data changes (receive pipes),

 * or only changes the data when this function is called (transmit pipes).

 * Only short pipes (numbers 16-31) can be used in fixed data mode.

 *

 * These function operate on a 32-bit field, no matter how large

 * the actual time slot is.  The interrupt handler takes care of bit

 * ordering and alignment.  An 8-bit time slot will always end up

 * in the low-order 8 bits, filled either MSB-first or LSB-first,

 * depending on the settings passed to setup_pipe().

 *

 * Lock must not be held before calling it.

 DBRI short pipes always transmit LSB first */

/* setup_descs()

 *

 * Setup transmit/receive data on a "long" pipe - i.e, one associated

 * with a DMA buffer.

 *

 * Only pipe numbers 0-15 can be used in this mode.

 *

 * This function takes a stream number pointing to a data buffer,

 * and work by building chains of descriptors which identify the

 * data buffers.  Buffers too large for a single descriptor will

 * be spread across multiple descriptors.

 *

 * All descriptors create a ring buffer.

 *

 * Lock must be held before calling this.

		/* Should be able to queue multiple buffers

		 * to receive on a pipe

 Make sure buffer size is multiple of four */

 Free descriptors if pipe has any */

 8KB - 4 */

/*

****************************************************************************

************************** DBRI - CHI interface ****************************

****************************************************************************



The CHI is a four-wire (clock, frame sync, data in, data out) time-division

multiplexed serial interface which the DBRI can operate in either master

(give clock/frame sync) or slave (take clock/frame sync) mode.



/*

 * Lock must not be held before calling it.

 Set CHI Anchor: Pipe 16 */

		/* Setup DBRI for CHI Slave - receive clock, frame sync (FS)

		 *

		 * CHICM  = 0 (slave mode, 8 kHz frame rate)

		 * IR     = give immediate CHI status interrupt

		 * EN     = give CHI status interrupt upon change

		/* Setup DBRI for CHI Master - generate clock, FS

		 *

		 * BPF				=  bits per 8 kHz frame

		 * 12.288 MHz / CHICM_divisor	= clock rate

		 * FD = 1 - drive CHIFS on rising edge of CHICK

	/* CHI Data Mode

	 *

	 * RCE   =  0 - receive on falling edge of CHICK

	 * XCE   =  1 - transmit on rising edge of CHICK

	 * XEN   =  1 - enable transmitter

	 * REN   =  1 - enable receiver

/*

****************************************************************************

*********************** CS4215 audio codec management **********************

****************************************************************************



In the standard SPARC audio configuration, the CS4215 codec is attached

to the DBRI via the CHI interface and few of the DBRI's PIO pins.



 * Lock must not be held before calling it.



	/*

	 * Data mode:

	 * Pipe  4: Send timeslots 1-4 (audio data)

	 * Pipe 20: Send timeslots 5-8 (part of ctrl data)

	 * Pipe  6: Receive timeslots 1-4 (audio data)

	 * Pipe 21: Receive timeslots 6-7. We can only receive 20 bits via

	 *          interrupt, and the rest of the data (slot 5 and 8) is

	 *          not relevant for us (only for doublechecking).

	 *

	 * Control mode:

	 * Pipe 17: Send timeslots 1-4 (slots 5-8 are read only)

	 * Pipe 18: Receive timeslot 1 (clb).

	 * Pipe 19: Receive timeslot 7 (version).

	/*

	 * No action, memory resetting only.

	 *

	 * Data Time Slot 5-8

	 * Speaker,Line and Headphone enable. Gain set to the half.

	 * Input is mike.

	/*

	 * Control Time Slot 1-4

	 * 0: Default I/O voltage scale

	 * 1: 8 bit ulaw, 8kHz, mono, high pass filter disabled

	 * 2: Serial enable, CHI master, 128 bits per frame, clock 1

	 * 3: Tests disabled

 For ULAW */

 Start by setting the playback attenuation. */

 Reset the volume bits */

 Now set the recording gain. */

/*

 * Set the CS4215 to data mode.

	/* Temporarily mute outputs, and wait 1/8000 sec (125 us)

	 * to make sure this takes.  This avoids clicking noises.

	/*

	 * Data mode:

	 * Pipe  4: Send timeslots 1-4 (audio data)

	 * Pipe 20: Send timeslots 5-8 (part of ctrl data)

	 * Pipe  6: Receive timeslots 1-4 (audio data)

	 * Pipe 21: Receive timeslots 6-7. We can only receive 20 bits via

	 *          interrupt, and the rest of the data (slot 5 and 8) is

	 *          not relevant for us (only for doublechecking).

	 *

	 * Just like in control mode, the time slots are all offset by eight

	 * bits.  The CS4215, it seems, observes TSIN (the delayed signal)

	 * even if it's the CHI master.  Don't ask me...

 Disable CHI */

 Switch CS4215 to data mode - set PIO3 to 1 */

	/* Note: this next doesn't work for 8-bit stereo, because the two

	 * channels would be on timeslots 1 and 3, with 2 and 4 idle.

	 * (See CS4215 datasheet Fig 15)

	 *

	 * DBRI non-contiguous mode would be required to make this work.

 FIXME: enable CHI after _setdata? */

 Enable CHI */

/*

 * Send the control information (i.e. audio format)

 FIXME - let the CPU do something useful during these delays */

	/* Temporarily mute outputs, and wait 1/8000 sec (125 us)

	 * to make sure this takes.  This avoids clicking noises.

	/*

	 * Enable Control mode: Set DBRI's PIO3 (4215's D/~C) to 0, then wait

	 * 12 cycles <= 12/(5512.5*64) sec = 34.01 usec

	/* In Control mode, the CS4215 is a slave device, so the DBRI must

	 * operate as CHI master, supplying clocking and frame synchronization.

	 *

	 * In Data mode, however, the CS4215 must be CHI master to insure

	 * that its data stream is synchronous with its codec.

	 *

	 * The upshot of all this?  We start by putting the DBRI into master

	 * mode, program the CS4215 in Control mode, then switch the CS4215

	 * into Data mode and put the DBRI into slave mode.  Various timing

	 * requirements must be observed along the way.

	 *

	 * Oh, and one more thing, on a SPARCStation 20 (and maybe

	 * others?), the addressing of the CS4215's time slots is

	 * offset by eight bits, so we add eight to all the "cycle"

	 * values in the Define Time Slot (DTS) commands.  This is

	 * done in hardware by a TI 248 that delays the DBRI->4215

	 * frame sync signal by eight clock cycles.  Anybody know why?

 Disable CHI */

	/*

	 * Control mode:

	 * Pipe 17: Send timeslots 1-4 (slots 5-8 are read only)

	 * Pipe 18: Receive timeslot 1 (clb).

	 * Pipe 19: Receive timeslot 7 (version).

 Wait for the chip to echo back CLB (Control Latch Bit) as zero */

 Enable CHI */

	/* Disable changes to our copy of the version number, as we are about

	 * to leave control mode.

	/* Terminate CS4215 control mode - data sheet says

	 * "Set CLB=1 and send two more frames of valid control info"

 Two frames of control info @ 8kHz frame rate = 250 us delay */

/*

 * Setup the codec with the sampling rate, audio format and number of

 * channels.

 * As part of the process we resend the settings for the data

 * timeslots as well.

 Lookup index for this rate */

 Add rate parameters */

 set codec to data mode */

/*

 *

 Look for the cs4215 chips */

 Enable capture of the status & version timeslots. */

/*

****************************************************************************

*************************** DBRI interrupt handler *************************

****************************************************************************



The DBRI communicates with the CPU mainly via a circular interrupt

buffer.  When an interrupt is signaled, the CPU walks through the

buffer and calls dbri_process_one_interrupt() for each interrupt word.

Complicated interrupts are handled by dedicated functions (which

appear first in this file).  Any pending interrupts can be serviced by

calling dbri_process_interrupt_buffer(), which works even if the CPU's

interrupts are disabled.



/* xmit_descs()

 *

 * Starts transmitting the current TD's for recording/playing.

 * For playback, ALSA has filled the DMA memory with new data (we hope).

 Disabled */

 Stream could be closed by the time we run. */

 Reset our admin of the pipe. */

 Stream could be closed by the time we run. */

 Reset our admin of the pipe. */

/* transmission_complete_intr()

 *

 * Called by main interrupt handler when DBRI signals transmission complete

 * on a pipe (interrupt triggered by the B bit in a transmit descriptor).

 *

 * Walks through the pipe's list of transmit buffer descriptors and marks

 * them as available. Stops when the first descriptor is found without

 * TBC (Transmit Buffer Complete) set, or we've run through them all.

 *

 * The DMA buffers are not released. They form a ring buffer and

 * they are filled by ALSA while others are transmitted by DMA.

 *

 Reset it for next time. */

 Notify ALSA */

 Reset it for next time. */

 FIXME: Check status */

 Notify ALSA */

		/* UNDR - Transmission underrun

		 * resend SDP command with clear pipe bit (C) set

 FIXME: do something useful in case of underrun */

 FXDT - Fixed data change */

/* dbri_process_interrupt_buffer advances through the DBRI's interrupt

 * buffer until it finds a zero word (indicating nothing more to do

 * right now).  Non-zero words require processing and are handed off

 * to dbri_process_one_interrupt AFTER advancing the pointer.

	/*

	 * Read it, so the interrupt goes away.

		/* Some of these SBus errors cause the chip's SBus circuitry

		 * to be disabled, so just re-enable and try to keep going.

		 *

		 * The only one I've seen is MRR, which will be triggered

		 * if you let a transmit pipe underrun, then try to CDP it.

		 *

		 * If these things persist, we reset the chip.

/****************************************************************************

		PCM Interface

 set sampling rate, audio format and number of channels */

	/* hw_params can get called multiple times. Only map the DMA once.

	/* hw_free can get called multiple times. Only unmap the DMA once.

 Send pipe */

 Receive pipe */

	/* Setup the all the transmit/receive descriptors to cover the

	 * whole DMA buffer.

 Re-submit the TDs. */

 ID */	    "sun_dbri",

 device */	    0,

 playback count */ 1,

 capture count */  1, &pcm);

/*****************************************************************************

			Mixer interface

		/* First mute outputs, and wait 1/8000 sec (125 us)

		 * to make sure this takes.  This avoids clicking noises.

		/* First mute outputs, and wait 1/8000 sec (125 us)

		 * to make sure this takes.  This avoids clicking noises.

/* Entries 0-3 map to the 4 data timeslots, entries 4-7 map to the 4 control

   timeslots. Shift is the bit offset in the timeslot, mask defines the

   number of bits. invert is a boolean for use with attenuation.

 FIXME: mic/line switch */

/****************************************************************************

			/proc interface

/*

****************************************************************************

**************************** Initialization ********************************

****************************************************************************

 Map the registers into memory. */

 Do low level initialization of the DBRI and CS4215 chips */

 /proc file handling */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *      MOTU Midi Timepiece ALSA Main routines

 *      Copyright by Michael T. Mayers (c) Jan 09, 2000

 *      mail: michael@tweakoz.com

 *      Thanks to John Galbraith

 *

 *      This driver is for the 'Mark Of The Unicorn' (MOTU)

 *      MidiTimePiece AV multiport MIDI interface 

 *

 *      IOPORTS

 *      -------

 *      8 MIDI Ins and 8 MIDI outs

 *      Video Sync In (BNC), Word Sync Out (BNC), 

 *      ADAT Sync Out (DB9)

 *      SMPTE in/out (1/4")

 *      2 programmable pedal/footswitch inputs and 4 programmable MIDI controller knobs.

 *      Macintosh RS422 serial port

 *      RS422 "network" port for ganging multiple MTP's

 *      PC Parallel Port ( which this driver currently uses )

 *

 *      MISC FEATURES

 *      -------------

 *      Hardware MIDI routing, merging, and filtering   

 *      MIDI Synchronization to Video, ADAT, SMPTE and other Clock sources

 *      128 'scene' memories, recallable from MIDI program change

 *

 * ChangeLog

 * Jun 11 2001	Takashi Iwai <tiwai@suse.de>

 *      - Recoded & debugged

 *      - Added timer interrupt for midi outputs

 *      - hwports is between 1 and 8, which specifies the number of hardware ports.

 *        The three global ports, computer, adat and broadcast ports, are created

 *        always after h/w and remote ports.

/*

 *      globals

 io resources

 0x378, 0x278 */

 7, 5 */

 use hardware ports 1-8 */

/*

 *      defines

#define USE_FAKE_MTP 
 parallel port usage masks



/*

 interrupt (for inputs) */

 number of accesses to input interrupts */

 number of accesses to timer interrupts */

 timer interrupts for outputs */

 number of hw ports (1-8) */

 all ports including computer, adat and bc */

 selected input midi port */

 during midi command 0xf5 */

 selected output midi hw port */

/*

 * possible hardware ports (selected by 0xf5 port message)

 *      0x00		all ports

 *      0x01 .. 0x08    this MTP's ports 1..8

 *      0x09 .. 0x10    networked MTP's ports (9..16)

 *      0x11            networked MTP's computer port

 *      0x63            to ADAT

 *

 * mappig:

 *  subdevice 0 - (X-1)    ports

 *            X - (2*X-1)  networked ports

 *            X            computer

 *            X+1          ADAT

 *            X+2          all ports

 *

 *  where X = chip->num_ports

 invalid - use port 0 as default */

 single mtp port */

 remote port */

 computer port */

 ADAT */

 all ports */

 all ports */

 single port */

 remote port */

 computer port */

 ADAT */

/*

/*

/*

 clear write bit

 set write bit

/*

 call this with spin lock held */

 Get the outbyte first, so we can emulate running status if

 necessary

 send port change command if necessary

		/*

		snd_printk(KERN_DEBUG "new outport: 0x%x\n",

			   (unsigned int) portp->hwport);

 send data

/*

 *      mtpav control

 put mtp into smart routing mode

/*

 enable pport interrupts

/*

 disable pport interrupts

/*

/*

 * timer interrupt for outputs

 reprogram timer */

 process each port */

 spinlock held! */

 spinlock held! */

/*

/*

/*

/*

 * midi interrupt for inputs

 real-time midi code */

 awaiting command

 MTP port #

 printk(KERN_DEBUG "snd_mtpav_read_bytes() sbyt: 0x%x\n", sbyt); */

/*

 * get ISA resources

/*

/*

 * get RAWMIDI resources

/*

/*

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Dummy soundcard

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 defaults */

 Index 0-MAX */

 ID for this card */

static int midi_devs[SNDRV_CARDS] = {[0 ... (SNDRV_CARDS - 1)] = 2};

module_param_array(midi_devs, int, NULL, 0444);

MODULE_PARM_DESC(midi_devs, "MIDI devices # (0-2) for dummy driver.");

/*

 * card models

/*

 * system timer interface

 ops must be the first item */

 fractional sample position (based HZ) */

 buffer_size * HZ */

 period_size * HZ */

/*

 * hrtimer interface

 ops must be the first item */

	/*

	 * In cases of XRUN and draining, this calls .trigger to stop PCM

	 * substream.

 CONFIG_HIGH_RES_TIMERS */

/*

 * PCM interface

 runtime->dma_bytes has to be set manually to allow mmap */

/*

 * dummy buffer handling

 do nothing */

 do nothing */

 do nothing */

 the same page */

/*

 * mixer interface

/*

 * proc interface

 CONFIG_SND_DEBUG && CONFIG_SND_PROC_FS */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Driver for Midiman Portman2x4 parallel port midi interface

 *

 *   Copyright (c) by Levent Guendogdu <levon@feature-it.com>

 *

 * ChangeLog

 * Jan 24 2007 Matthias Koenig <mkoenig@suse.de>

 *      - cleanup and rewrite

 * Sep 30 2004 Tobias Gehrig <tobias@gehrig.tk>

 *      - source code cleanup

 * Sep 03 2004 Tobias Gehrig <tobias@gehrig.tk>

 *      - fixed compilation problem with alsa 1.0.6a (removed MODULE_CLASSES,

 *        MODULE_PARM_SYNTAX and changed MODULE_DEVICES to

 *        MODULE_SUPPORTED_DEVICE)

 * Mar 24 2004 Tobias Gehrig <tobias@gehrig.tk>

 *      - added 2.6 kernel support

 * Mar 18 2004 Tobias Gehrig <tobias@gehrig.tk>

 *      - added parport_unregister_driver to the startup routine if the driver fails to detect a portman

 *      - added support for all 4 output ports in portman_putmidi

 * Mar 17 2004 Tobias Gehrig <tobias@gehrig.tk>

 *      - added checks for opened input device in interrupt handler

 * Feb 20 2004 Tobias Gehrig <tobias@gehrig.tk>

 *      - ported from alsa 0.5 to 1.0

/*********************************************************************

 * Chip specific

 Init chip specific data */

/*********************************************************************

 * HW related constants

 Standard PC parallel port status register equates. */

 Busy status.  Inverted. */

 Acknowledge.  Non-Inverted. */

 Paper Out.    Non-Inverted. */

 Select.       Non-Inverted. */

 Error.        Non-Inverted. */

 Standard PC parallel port command register equates. */

 IRQ Enable.   Non-Inverted. */

 Select Input. Inverted. */

 Init Printer. Non-Inverted. */

 Auto Feed.    Inverted. */

 Strobe.       Inverted. */

 Parallel Port Command Register as implemented by PCP2x4. */

 Interrupt enable. */

 Command strobe. */

/* The parallel port command register field (b1..b3) selects the 

 * various "registers" within the PC/P 2x4.  These are the internal

 * address of these "registers" that must be written to the parallel

 * port command register.

 PCP RxData channel 0. */

 PCP RxData channel 1. */

 PCP General Control Register. */

 PCP Sync Control Register. */

 PCP TxData channel 0. */

 PCP TxData channel 1. */

 PCP TxData channel 2. */

 PCP TxData channel 3. */

 Parallel Port Status Register as implemented by PCP2x4. */

 Echoed strobe. */

 Input data int request. */

 Interface Busy. */

/* Parallel Port Status Register BUSY and SELECT lines are multiplexed

 * between several functions.  Depending on which 2x4 "register" is

 * currently selected (b1..b3), the BUSY and SELECT lines are

 * assigned as follows:

 *

 *   SELECT LINE:                                                    A3 A2 A1

 *                                                                   --------

 Rx Available, channel 0.   0 0 0 */

  RXAVAIL1    PP_STAT_SEL             /* Rx Available, channel 1.   0 0 1 */

 Reserved - Sync Status.    0 1 0 */

                                      /* Reserved.                  0 1 1 */

 Tx Empty, channel 0.       1 0 0 */

      TXEMPTY1        PP_STAT_SEL     /* Tx Empty, channel 1.       1 0 1 */

  TXEMPTY2    PP_STAT_SEL             /* Tx Empty, channel 2.       1 1 0 */

  TXEMPTY3    PP_STAT_SEL             /* Tx Empty, channel 3.       1 1 1 */

/*   BUSY LINE:                                                      A3 A2 A1

 *                                                                   --------

 Rx Input Data, channel 0.  0 0 0 */

      RXDATA1         PP_STAT_BSY     /* Rx Input Data, channel 1.  0 0 1 */

 Reserved - Sync Data.      0 1 0 */

 Reserved.                  0 1 1 */

 Parallel Port Data Echo.   1 0 0 */

 Address 0 Echo.            1 0 1 */

 Address 1 Echo.            1 1 0 */

 Address 2 Echo.            1 1 1 */

/*********************************************************************

 * Hardware specific functions

	/* Get entering data byte and port number in BL and BH respectively.

	 * Set up Tx Channel address field for use with PP Cmd Register.

	 * Store address field in BH register.

	 * Inputs:      AH = Output port number (0..3).

	 *              AL = Data byte.

	 *    command = TXDATA0 | INT_EN;

	 * Align port num with address field (b1...b3),

	 * set address for TXDatax, Strobe=0

	/* Disable interrupts so that the process is not interrupted, then 

	 * write the address associated with the current Tx channel to the 

	 * PP Command Reg.  Do not set the Strobe signal yet.

		/* While the address lines settle, write parallel output data to 

		 * PP Data Reg.  This has no effect until Strobe signal is asserted.

		/* If PCP channel's TxEmpty is set (TxEmpty is read through the PP

		 * Status Register), then go write data.  Else go back and wait.

	/* TxEmpty is set.  Maintain PC/P destination address and assert

	 * Strobe through the PP Command Reg.  This will Strobe data into

	 * the PC/P transmitter and set the PC/P BUSY signal.

	/* Wait for strobe line to settle and echo back through hardware.

	 * Once it has echoed back, assume that the address and data lines

	 * have settled!

 Release strobe and immediately re-allow interrupts. */

	/* PC/P BUSY is now set.  We must wait until BUSY resets itself.

	 * We'll reenable ints while we're waiting.

 Data sent. */

/*

 *  Read MIDI byte from port

 *  Attempt to read input byte from specified hardware input port (0..).

 *  Return -1 if no data

 Saved address+IE bit. */

 Make sure clocking edge is down before starting... */

 Make sure edge is down. */

 Set destination address to PCP. */

 Address + IE + No Strobe. */

 Wait for strobe echo. */

	/* After the address lines settle, check multiplexed RxAvail signal.

	 * If data is available, read it.

 No data. */

 Set the Strobe signal to enable the Rx clocking circuitry. */

 Write address+IE+Strobe. */

 Wait for strobe echo. */

 The first data bit (msb) is already sitting on the input line. */

 Cause rising edge, which shifts data. */

 Data bit 6. */

 Cause falling edge while data settles. */

 Cause rising edge, which shifts data. */

 Data bit 5. */

 Cause falling edge while data settles. */

 Cause rising edge, which shifts data. */

 Data bit 4. */

 Cause falling edge while data settles. */

 Cause rising edge, which shifts data. */

 Data bit 3. */

 Cause falling edge while data settles. */

 Cause rising edge, which shifts data. */

 Data bit 2. */

 Cause falling edge while data settles. */

 Cause rising edge, which shifts data. */

 Data bit 1. */

 Cause falling edge while data settles. */

 Cause rising edge, which shifts data. */

 Data bit 0. */

 Cause falling edge while data settles. */

 Cause rising edge, which shifts data. */

 Return data clock low. */

 De-assert Strobe and return data. */

 Output saved address+IE. */

 Wait for strobe echo. */

 Shift back and return value. */

/*

 *  Checks if any input data on the given channel is available

 *  Checks RxAvail 

 Write hardware (assumme STROBE=0) */

 Check multiplexed RxAvail signal */

 Data available */

 No Data available */

/*

 *  Flushes any input

 Local variable for counting things */

 Set address for specified channel in port and allow to settle. */

 Assert the Strobe and wait for echo back. */

 Wait for ESTB */

 Output clock cycles to the Rx circuitry. */

 Flush 250 bits... */

 Deassert the Strobe signal of the port and wait for it to settle. */

 Wait for settling */

	/* Initialize the parallel port data register.  Will set Rx clocks

	 * low in case we happen to be addressing the Rx ports at this time.

 1 */

	/* Initialize the parallel port command register, thus initializing

	 * hardware handshake lines to midi box:

	 *

	 *                                  Strobe = 0

	 *                                  Interrupt Enable = 0            

 2 */

 Check if Portman PC/P 2x4 is out there. */

 3 */

 Write Strobe=0 to command reg. */

 Check for ESTB to be clear */

 4 */

 CODE 1 - Strobe Failure. */

 Set for RXDATA0 where no damage will be done. */

 5 */

 Write Strobe=1 to command reg. */

 6 */

 CODE 1 - Strobe Failure. */

 7 */

 Reset Strobe=0. */

	/* Check if Tx circuitry is functioning properly.  If initialized 

	 * unit TxEmpty is false, send out char and see if it goes true.

 8 */

 Tx channel 0, strobe off. */

	/* If PCP channel's TxEmpty is set (TxEmpty is read through the PP

	 * Status Register), then go write data.  Else go back and wait.

 9 */

 Return OK status. */

/*********************************************************************

 * Rawmidi

 Create and initialize the rawmidi component */

 register rawmidi ops */

 name substreams */

 output */

 input */

/*********************************************************************

 * parport stuff

 While any input data is waiting */

		/* If data available on channel 0, 

 Read Midi */

 put midi into queue... */

		/* If data available on channel 1, 

 Read Midi */

 put midi into queue... */

 Temporary assignment to forward the parport */

	/* Since we dont get the return value of probe

 register device in global table */

 nothing to do here */

/*********************************************************************

 * platform stuff

 ISR */

 flags */

 private */

 port */

 name */

 callbacks */

 device number */

 claim parport */

 init device */

 At this point card will be usable */

/*********************************************************************

 * module init stuff

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Dummy soundcard for virtual rawmidi devices

 *

 *  Copyright (c) 2000 by Takashi Iwai <tiwai@suse.de>

/*

 * VIRTUAL RAW MIDI DEVICE CARDS

 *

 * This dummy card contains up to 4 virtual rawmidi devices.

 * They are not real rawmidi devices but just associated with sequencer

 * clients, so that any input/output sources can be connected as a raw

 * MIDI device arbitrary.

 * Also, multiple access is allowed to a single rawmidi device.

 *

 * Typical usage is like following:

 * - Load snd-virmidi module.

 *	# modprobe snd-virmidi index=2

 *   Then, sequencer clients 72:0 to 75:0 will be created, which are

 *   mapped from /dev/snd/midiC1D0 to /dev/snd/midiC1D3, respectively.

 *

 * - Connect input/output via aconnect.

 *	% aconnect 64:0 72:0	# keyboard input redirection 64:0 -> 72:0

 *	% aconnect 72:0 65:0	# output device redirection 72:0 -> 65:0

 *

 * - Run application using a midi device (eg. /dev/snd/midiC1D0)

 hack: OSS defines midi_devs, so undefine it (versioned symbols) */

 Index 0-MAX */

 ID for this card */

 SPDX-License-Identifier: GPL-2.0-or-later

/*     

 *   ALSA Driver for Ego Systems Inc. (ESI) Miditerminal 4140

 *   Copyright (c) 2006 by Matthias König <mk@phasorlab.de>

/*********************************************************************

 * Chip specific

 [0]=hh, [1]=mm, [2]=ss, [3]=ff */

 Init chip specific data */

/*********************************************************************

 * HW register related constants

 Status Bits */

 readout process, bit is set */

 read byte is a port number */

 Control Bits */

 enable readout */

 Command */

 Used in probing procedure */

 setting the communication mode */

 clearing communication mode */

/*********************************************************************

 * Hardware specific functions

/*  Enables the readout procedure

 *

 *  Before we can read a midi byte from the device, we have to set

 *  bit 3 of control port.

/*  Disables readout 

 *

 *  Readout is disabled by clearing bit 3 of control

/*  waits for device ready

 *

 *  Checks if BUSY (Bit 7 of status) is clear

 *  1 device ready

 *  0 failure

/*  Init device (LED blinking startup magic)

 *

 *  Returns:

 *  0 init ok

 *  -EIO failure

 success */

/* 

 *  Opens the device (set communication mode)

/*  

 *  Close device (clear communication mode)

/*  map hardware port to substream number

 * 

 *  When reading a byte from the device, the device tells us

 *  on what port the byte is. This HW port has to be mapped to

 *  the midiport (substream number).

 *  substream 0-3 are Midiports 1-4

 *  substream 4 is SMPTE Timecode

 *  The mapping is done by the table:

 *  HW | 0 | 1 | 2 | 3 | 4 

 *  SW | 0 | 1 | 4 | 2 | 3

/*  Probe parport for device

 *

 *  Do we have a Miditerminal 4140 on parport? 

 *  Returns:

 *  0       device found

 *  -ENODEV no device

/*  Read byte incl. status from device

 *

 *  Returns:

 *  data in lower 8 bits and status in upper 8 bits

/*  Read a byte from device

 *

 *  Note, that readout mode has to be enabled.

 *  readout procedure is as follows: 

 *  - Write number of the Bit to read to DATA

 *  - Read STATUS

 *  - Bit 5 of STATUS indicates if Bit is set

 *

 *  Returns:

 *  Byte read from device

/*  Starts SMPTE Timecode generation

 *

 *  The device creates SMPTE Timecode by hardware.

 *  0 24 fps

 *  1 25 fps

 *  2 29.97 fps

 *  3 30 fps (Drop-frame)

 *  4 30 fps

/*  Stops SMPTE Timecode generation

/*  Write a command byte to device

/*  Write a data byte to device 

/*  Write a MIDI byte to midiport

 *

 *  midiport ranges from 0-3 and maps to Ports 1-4

 *  assumptions: communication mode is on

 check current midiport */

 write midi byte */

/*********************************************************************

 * Control elements

 SMPTE Switch */

/* smpte_switch is not accessed from IRQ handler, so we just need

 Time */

 FPS */

/*********************************************************************

 * Rawmidi

		/* We don't need a spinlock here, because this is just called 

		   if the device has not been opened before. 

		/* We need the spinlock_irqsave here because we can still

 Create and initialize the rawmidi component */

 register rawmidi ops */

 name substreams */

 output */

 input */

 controls */

/*********************************************************************

 * parport stuff

 Temporary assignment to forward the parport */

	/* Since we dont get the return value of probe

 register device in global table */

 nothing to do here */

/*********************************************************************

 * platform stuff

 ISR */

 flags */

 private */

 port */

 name */

 callbacks */

 device number */

 claim parport */

 init device */

 At this point card will be usable */

/*********************************************************************

 * module init stuff

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Loopback soundcard

 *

 *  Original code:

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *

 *  More accurate positioning and full-duplex support:

 *  Copyright (c) Ahmet İnan <ainan at mathematik.uni-freiburg.de>

 *

 *  Major (almost complete) rewrite:

 *  Copyright (c) by Takashi Iwai <tiwai@suse.de>

 *

 *  A next major update in 2010 (separate timers for playback and capture):

 *  Copyright (c) Jaroslav Kysela <perex@perex.cz>

 Index 0-MAX */

 ID for this card */

	/* optional

	 * call in loopback->cable_lock

	/* required

	 * call in cable->lock

	/* required

	 * call in cable->lock

 optional */

 optional */

	/* optional

	 * call in loopback->cable_lock

	/* optional

	 * call in cable->lock

 optional */

 flags */

 timer specific */

 If sound timer is used */

 position in buffer */

 PCM parameters */

 bytes per second */

 bytes per sample * channels */

 rate shift value */

 flags */

 timer stuff */

	unsigned int irq_pos;		/* fractional IRQ position in jiffies

					 * ticks

 period size in jiffies ticks */

 If jiffies timer is used */

 no pitch */

 call in cable->lock */

 call in cable->lock */

	/* Loopback device has to use same period as timer card. Therefore

	 * wake up for each snd_pcm_period_elapsed() call of timer card.

		/* do not report error if trying to start but already

		 * running. For example called by opposite substream

		 * of the same cable

 call in cable->lock */

 call in cable->lock */

 only stop if both devices (playback and capture) are not running */

 call in loopback->cable_lock */

 snd_timer was not opened */

	/* will only be called from free_cable() when other stream was

	 * already closed. Other stream cannot be reopened as long as

	 * loopback->cable_lock is locked. Therefore no need to lock

	 * cable->lock;

 wait till drain work has finished if requested */

 clear capture buffer */

	/* check if playback is draining, trim the capture copy size

 call in cable->lock */

 note delta_capt == delta_play at this moment */

 need to unlock before calling below */

 call in cable->lock */

		/* Worst case estimation of possible values for resolution

		 * resolution <= (512 * 1024) frames / 8kHz in nsec

		 * resolution <= 65.536.000.000 nsec

		 *

		 * period_size <= 65.536.000.000 nsec / 1000nsec/usec * 192kHz +

		 *  500.000

		 * period_size <= 12.582.912.000.000  <64bit

		 *  / 1.000.000 usec/sec

 round to nearest sample rate */

 no need to do anything if no stream is running */

 resolution is only valid for SNDRV_TIMER_EVENT_TICK events */

		/* The hardware rules guarantee that playback and capture period

		 * are the same. Therefore only one device has to be checked

		 * here.

 The same timer interrupt is used for playback and capture device */

	/* Do not lock cable->lock here because timer->lock is already hold.

	 * There are other functions which first lock cable->lock and than

	 * timer->lock e.g.

	 * loopback_trigger()

	 * spin_lock(&cable->lock)

	 * loopback_snd_timer_start()

	 * snd_timer_start()

	 * spin_lock(&timer->lock)

	 * Therefore when using the oposit order of locks here it could result

	 * in a deadlock.

		/* sound card of the timer was stopped. Therefore there will not

		 * be any further timer callbacks. Due to this forward audio

		 * data from here if in draining state. When still in running

		 * state the streaming will be aborted by the usual timeout. It

		 * should not be aborted here because may be the timer sound

		 * card does only a recovery and the timer is back soon.

		 * This work triggers loopback_snd_timer_work()

	/* note check overflow in frac_pos() using pcm_rate_shift before

 other stream is still alive */

 free the cable */

 [<pref>:](<card name>|<card idx>)[{.,}<dev idx>[{.,}<subdev idx>]] */

 Must be the name, not number */

 call in loopback->cable_lock */

	/* check if timer was already opened. It is only opened once

	 * per playback and capture subdevice (aka cable).

	/* The callback has to be called from another work. If

	 * SNDRV_TIMER_IFLG_FAST is specified it will be called from the

	 * snd_pcm_period_elapsed() call of the selected sound card.

	 * snd_pcm_period_elapsed() helds snd_pcm_stream_lock_irqsave().

	 * Due to our callback loopback_snd_timer_function() also calls

	 * snd_pcm_period_elapsed() which calls snd_pcm_stream_lock_irqsave().

	 * This would end up in a dead lock.

 initialise a work used for draining */

	/* The mutex loopback->cable_lock is kept locked.

	 * Therefore snd_timer_open() cannot be called a second time

	 * by the other device of the same cable.

	 * Therefore the following issue cannot happen:

	 * [proc1] Call loopback_timer_open() ->

	 *	   Unlock cable->lock for snd_timer_close/open() call

	 * [proc2] Call loopback_timer_open() -> snd_timer_open(),

	 *	   snd_timer_start()

	 * [proc1] Call snd_timer_open() and overwrite running timer

	 *	   instance

/* stop_sync() is not required for sound timer because it does not need to be

 * restarted in loopback_prepare() on Xrun recovery

 use dynamic rules based on actual runtime->hw values */

 note that the default rules created in the PCM midlevel code */

 are cached -> they do not reflect the actual state */

	/* In case of sound timer the period time of both devices of the same

	 * loop has to be the same.

	 * This rule only takes effect if a sound timer was chosen

	/* loopback_runtime_free() has not to be called if kfree(dpcm) was

	 * already called here. Otherwise it will end up with a double free.

				/* Add the control before copying the id so that

				 * the numid field of the id is set in the copy.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   serial.c

 *   Copyright (c) by Jaroslav Kysela <perex@perex.cz>,

 *                    Isaku Yamahata <yamahata@private.email.ne.jp>,

 *		      George Hansper <ghansper@apana.org.au>,

 *		      Hannu Savolainen

 *

 *   This code is based on the code from ALSA 0.5.9, but heavily rewritten.

 *

 * Sat Mar 31 17:27:57 PST 2001 tim.mann@compaq.com 

 *      Added support for the Midiator MS-124T and for the MS-124W in

 *      Single Addressed (S/A) or Multiple Burst (M/B) mode, with

 *      power derived either parasitically from the serial port or

 *      from a separate power supply.

 *

 *      More documentation can be found in serial-u16550.txt.

 Roland Soundcanvas; F5 NN selects part */

 Midiator MS-124T */

 Midiator MS-124W in S/A mode */

 Midiator MS-124W in M/B mode */

 Generic Interface */

 Normal blocking buffer operation */

 Non-blocking discard operation */

 Index 0-MAX */

 ID for this card */

 Enable this card */

 0x3f8,0x2f8,0x3e8,0x2e8 */

 3,4,5,7,9,10,11,14,15 */

 9600,19200,38400,57600,115200 */

 baud base */

 1 to 16 */

 1 to 16 */

#define SNDRV_SERIAL_MS124W_MB_NOCOMBO 1*/  
 max 64, min 16 */

 max 64, min 16 */

 Must be 2^n */

 open status of file */

 parameter for using of write loop */

 used in uart16550 */

 used in uart16550 */

 type of adaptor */

 inputs */

 outputs */

 write buffer and its writing/reading position */

 wait timer */

 timer 38600bps * 10bit * 16byte */

 This macro is only used in snd_uart16550_io_loop */

/* This loop should be called with interrupts disabled

 * We don't want to interrupt this, 

 * as we're already handling an interrupt 

 recall previous stream */

 Read Loop */

 while receive data ready */

 keep track of last status byte */

 handle stream switch */

					/* prevent future bytes from being

 remember the last stream */

	/* no need of check SERIAL_MODE_OUTPUT_OPEN because if not,

 Check write status */

 Can't use FIFO, must send only when CTS is true */

 Write loop */

 Can we write ? */

 Do we want to? */

/* NOTES ON SERVICING INTERUPTS

 * ---------------------------

 * After receiving a interrupt, it is important to indicate to the UART that

 * this has been done. 

 * For a Rx interrupt, this is done by reading the received byte.

 * For a Tx interrupt this is done by either:

 * a) Writing a byte

 * b) Reading the IIR

 * It is particularly important to read the IIR if a Tx interrupt is received

 * when there is no data in tx_buff[], as in this case there no other

 * indication that the interrupt has been serviced, and it remains outstanding

 * indefinitely. This has the curious side effect that and no further interrupts

 * will be generated from this device AT ALL!!.

 * It is also desirable to clear outstanding interrupts when the device is

 * opened/closed.

 *

 *

 * Note that some devices need OUT2 to be set before they will generate

 * interrupts at all. (Possibly tied to an internal pull-up on CTS?)

 indicate to the UART that the interrupt has been serviced */

 When the polling mode, this function calls snd_uart16550_io_loop. */

/*

 *  this method probes, if an uart sits on given port

 *  return 0 if found

 *  return negative error if not found

 Do some vague tests for the presence of the uart */

 Not configured */

 uart detected unless one of the following tests should fail */

 8 data-bits, 1 stop-bit, parity off, DLAB = 0 */

 Line Control Register */

 The top four bits of the IER should always == 0 */

 failed */

 Write arbitrary data into the scratch reg */

 If it comes back, it's OK */

 failed */

 Write arbitrary data into the scratch reg */

 If it comes back, it's OK */

 failed */

 Initialize basic variables */

 Enable FIFO's (if available) */

 Clear receiver FIFO */

 Clear transmitter FIFO */

 Set FIFO trigger at 4-bytes */

	/* NOTE: interrupt generated after T=(time)4-bytes

	 * if less than UART_FCR_TRIGGER bytes received

 FIFO Control Register */

 Divisor latch access bit */

 Line Control Register */

 Divisor Latch Low */

 Divisor Latch High */

 DLAB is reset to 0 in next outb() */

 Set serial parameters (parity off, etc) */

 8 data-bits */

 1 stop-bit */

 parity off */

 DLAB = 0 */

 Line Control Register */

 Set Request-To-Send line active */

 Set Data-Terminal-Ready line active */

		     | UART_MCR_OUT2	/* Set OUT2 - not always required, but when

					 * it is, it is ESSENTIAL for enabling interrupts

 Modem Control Register */

		/* MS-124W can draw power from RTS and DTR if they

		/* MS-124T can draw power from RTS and/or DTR (preferably

 Disable Receiver data interrupt */

 Disable Transmitter holding register empty interrupt */

 Enable Receiver data interrupt */

 Enable Modem status interrupt */

 Enable Receiver data interrupt */

 Enable Modem status interrupt */

 Enable Transmitter holding register empty interrupt */

 Enable Receiver data interrupt */

 Enable Transmitter holding register empty interrupt */

 Interrupt enable Register */

 Clear any pre-existing overrun indication */

 Clear any pre-existing transmit interrupt */

 Clear any pre-existing receive interrupt */

	/* NOTE: may need to disable interrupts before de-registering out handler.

	 * For now, the consequences are harmless.

 Disable Receiver data interrupt */

 Disable Transmitter holding register empty interrupt */

 Interrupt enable Register */

 Deactivate Request-To-Send line  */

 Deactivate Data-Terminal-Ready line */

 Deactivate OUT2 */

 Modem Control Register */

		/* MS-124W can draw power from RTS and DTR if they

		/* MS-124T can draw power from RTS and/or DTR (preferably

 Clear any outstanding interrupts */

 Restore old divisor */

 Divisor latch access bit */

 Line Control Register */

 Divisor Latch Low */

 Divisor Latch High */

 Restore old LCR (data bits, stop bits, parity, DLAB) */

 Line Control Register */

 polling mode */

 Buffer empty? */

 FIFO empty? */

 CTS? */

 Tx Buffer Empty - try to write immediately */

 Transmitter holding register (and Tx FIFO) empty */

			        /* Cannot write (buffer empty) -

	/* Interrupts are disabled during the updating of the tx_buff,

	 * since it is 'bad' to have two processes updating the same

	 * variables (ie buff_in & buff_out)

 polling */

 buffer full? */

 in this mode we need two bytes of space */

 select exactly one of the four ports */

 select any combination of the four ports */

 ...except none */

 send midi byte */

			/* Also send F5 after 3 seconds with no data

 Roland Soundcanvas part selection */

					/* If this substream of the data is

					 * different previous substream

					 * in this uart, send the change part

					 * event

 change part */

 data */

					/* If midi_byte is a data byte,

 send midi byte */

		/* MS-124W can draw power from RTS and DTR if they

		/* MS-124T can draw power from RTS and/or DTR (preferably

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Digigram VX soundcards

 *

 * Hardware core part

 *

 * Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>

/*

 * vx_check_reg_bit - wait for the specified bit is set/reset on a register

 * @reg: register to check

 * @mask: bit mask

 * @bit: resultant bit to be checked

 * @time: time-out of loop in msec

 *

 * returns zero if a bit matches, or a negative error code.

msleep(10);

/*

 * vx_send_irq_dsp - set command irq bit

 * @num: the requested IRQ type, IRQ_XXX

 *

 * this triggers the specified IRQ request

 * returns 0 if successful, or a negative error code.

 * 

 wait for Hc = 0 */

/*

 * vx_reset_chk - reset CHK bit on ISR

 *

 * returns 0 if successful, or a negative error code.

 Reset irq CHK */

 Wait until CHK = 0 */

/*

 * vx_transfer_end - terminate message transfer

 * @cmd: IRQ message to send (IRQ_MESS_XXX_END)

 *

 * returns 0 if successful, or a negative error code.

 * the error code can be VX-specific, retrieved via vx_get_error().

 * NB: call with mutex held!

 irq MESS_READ/WRITE_END */

 Wait CHK = 1 */

 If error, Read RX */

/*

 * vx_read_status - return the status rmh

 * @rmh: rmh record to store the status

 *

 * returns 0 if successful, or a negative error code.

 * the error code can be VX-specific, retrieved via vx_get_error().

 * NB: call with mutex held!

 no read necessary? */

	/* Wait for RX full (with timeout protection)

	 * The first word of status is in RX

 Read RX */

 If status given by DSP, let's decode its size */

 Let's count the arg numbers from a mask */

 else retrieve the status length given by the driver */

 Val is the status 1st word */

 hence adjust remaining length */

 trigger an irq MESS_WRITE_NEXT */

 Wait for RX full (with timeout protection) */

/*

 * vx_send_msg_nolock - send a DSP message and read back the status

 * @rmh: the rmh record to send and receive

 *

 * returns 0 if successful, or a negative error code.

 * the error code can be VX-specific, retrieved via vx_get_error().

 * 

 * this function doesn't call mutex lock at all.

 Check bit M is set according to length of the command */

 Wait for TX empty */

 Write Cmd[0] */

 Trigger irq MESSAGE */

 Wait for CHK = 1 */

 If error, get error value from RX */

 Send the other words */

 Wait for TX ready */

 Write Cmd[i] */

 Trigger irq MESS_READ_NEXT */

 Wait for TX empty */

 End of transfer */

/*

 * vx_send_msg - send a DSP message with mutex

 * @rmh: the rmh record to send and receive

 *

 * returns 0 if successful, or a negative error code.

 * see vx_send_msg_nolock().

/*

 * vx_send_rih_nolock - send an RIH to xilinx

 * @cmd: the command to send

 *

 * returns 0 if successful, or a negative error code.

 * the error code can be VX-specific, retrieved via vx_get_error().

 *

 * this function doesn't call mutex at all.

 *

 * unlike RMH, no command is sent to DSP.

 send the IRQ */

 Wait CHK = 1 */

 If error, read RX */

/*

 * vx_send_rih - send an RIH with mutex

 * @cmd: the command to send

 *

 * see vx_send_rih_nolock().

 us */

/**

 * snd_vx_load_boot_image - boot up the xilinx interface

 * @chip: VX core instance

 * @boot: the boot record to load

 check the length of boot image */

 more strict check */

 reset dsp */

 another wait? */

 download boot strap */

/*

 * vx_test_irq_src - query the source of interrupts

 *

 * called from irq handler only

/*

 * snd_vx_threaded_irq_handler - threaded irq handler

 printk(KERN_DEBUG "IRQ events = 0x%x\n", events);

	/* We must prevent any application using this DSP

	 * and block any further request until the application

	 * either unregisters or reloads the DSP

	/* The start on time code conditions are filled (ie the time code

	 * received by the board is equal to one of those given to it).

 so far, nothing to do yet */

 The frequency has changed on the board (UER mode). */

 update the pcm streams */

/**

 * snd_vx_irq_handler - interrupt handler

 * @irq: irq number

 * @dev: VX core instance

/*

 current source, later sync'ed with target */

 Reset the DSP */

 Acknowledge any pending IRQ and reset the MEMIRQ flag. */

 init CBits */

/*

 * proc interface

/**

 * snd_vx_dsp_boot - load the DSP boot

 * @chip: VX core instance

 * @boot: firmware data

/**

 * snd_vx_dsp_load - load the DSP image

 * @chip: VX core instance

 * @dsp: firmware data

 Transfert data buffer from PC to DSP */

 Wait DSP ready for a new read */

/*

 * suspend

/*

 * resume

/**

 * snd_vx_create - constructor for struct vx_core

 * @card: card instance

 * @hw: hardware specific record

 * @ops: VX ops pointer

 * @extra_size: extra byte size to allocate appending to chip

 *

 * this function allocates the instance and prepare for the hardware

 * initialization.

 *

 * The object is managed via devres, and will be automatically released.

 *

 * return the instance pointer if successful, NULL in error.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Digigram VX soundcards

 *

 * PCM part

 *

 * Copyright (c) 2002,2003 by Takashi Iwai <tiwai@suse.de>

 *

 * STRATEGY

 *  for playback, we send series of "chunks", which size is equal with the

 *  IBL size, typically 126 samples.  at each end of chunk, the end-of-buffer

 *  interrupt is notified, and the interrupt handler will feed the next chunk.

 *

 *  the current position is calculated from the sample count RMH.

 *  pipe->transferred is the counter of data which has been already transferred.

 *  if this counter reaches to the period size, snd_pcm_period_elapsed() will

 *  be issued.

 *

 *  for capture, the situation is much easier.

 *  to get a low latency response, we'll check the capture streams at each

 *  interrupt (capture stream has no EOB notification).  if the pending

 *  data is accumulated to the period size, snd_pcm_period_elapsed() is

 *  called and the pointer is updated.

 *

 *  the current point of read buffer is kept in pipe->hw_ptr.  note that

 *  this is in bytes.

 *

 * TODO

 *  - linked trigger for full-duplex mode.

 *  - scheduled action on the stream.

/*

 * read three pending pcm bytes via inb()

/*

 * vx_set_pcx_time - convert from the PC time to the RMH status time.

 * @pc_time: the pointer for the PC-time to set

 * @dsp_time: the pointer for RMH status time array

/*

 * vx_set_differed_time - set the differed time if specified

 * @rmh: the rmh record to modify

 * @pipe: the pipe to be checked

 *

 * if the pipe is programmed with the differed time, set the DSP time

 * on the rmh and changes its command length.

 *

 * returns the increase of the command length.

 Update The length added to the RMH command by the timestamp */

 Set the T bit */

 Time stamp is the 1st following parameter */

 Add the flags to a notified differed command */

 Add the flags to a multiple differed command */

 Add the flags to a stream-time differed command */

/*

 * vx_set_stream_format - send the stream format command

 * @pipe: the affected pipe

 * @data: format bitmask

 Command might be longer since we may have to add a timestamp */

| (datal & 0xFFFF00) >> 8*/;

/*

 * vx_set_format - set the format of a pipe

 * @pipe: the affected pipe

 * @runtime: pcm runtime instance to be referred

 *

 * returns 0 if successful, or a negative error code.

 case 8: break;

/*

 * set / query the IBL size

/*

 * vx_get_pipe_state - get the state of a pipe

 * @pipe: the pipe to be checked

 * @state: the pointer for the returned state

 *

 * checks the state of a given pipe, and stores the state (1 = running,

 * 0 = paused) on the given pointer.

 *

 * called from trigger callback only

/*

 * vx_query_hbuffer_size - query available h-buffer size in bytes

 * @pipe: the pipe to be checked

 *

 * return the available size on h-buffer in bytes,

 * or a negative error code.

 *

 * NOTE: calling this function always switches to the stream mode.

 *       you'll need to disconnect the host to get back to the

 *       normal mode.

/*

 * vx_pipe_can_start - query whether a pipe is ready for start

 * @pipe: the pipe to be checked

 *

 * return 1 if ready, 0 if not ready, and negative value on error.

 *

 * called from trigger callback only

/*

 * vx_conf_pipe - tell the pipe to stand by and wait for IRQA.

 * @pipe: the pipe to be configured

/*

 * vx_send_irqa - trigger IRQA

/*

 * vx boards do not support inter-card sync, besides

 * only 126 samples require to be prepared before a pipe can start

 wait 2ms only before asking if the pipe is ready*/

 wait 2ms after irqA was requested and check if the pipe state toggled*/

/*

 * vx_toggle_pipe - start / pause a pipe

 * @pipe: the pipe to be triggered

 * @state: start = 1, pause = 0

 *

 * called from trigger callback only

 *

 Check the pipe is not already in the requested state */

	/* If a start is requested, ask the DSP to get prepared

	 * and wait for a positive acknowledge (when there are

	 * enough sound buffer for this pipe)

			/* Wait for a few, before asking again

			 * to avoid flooding the DSP with our requests

	/* If it completes successfully, wait for the pipes

	 * reaching the expected state before returning

	 * Check one pipe only (since they are synchronous)

/*

 * vx_stop_pipe - stop a pipe

 * @pipe: the pipe to be stopped

 *

 * called from trigger callback only

/*

 * vx_alloc_pipe - allocate a pipe and initialize the pipe instance

 * @capture: 0 = playback, 1 = capture operation

 * @audioid: the audio id to be assigned

 * @num_audio: number of audio channels

 * @pipep: the returned pipe instance

 *

 * return 0 on success, or a negative error code.

 NYI

 NYI

 initialize the pipe record */

 release the pipe */

 the pipe index should be identical with the audio index */

/*

 * vx_free_pipe - release a pipe

 * @pipe: pipe to be released

/*

 * vx_start_stream - start the stream

 *

 * called from trigger callback only

/*

 * vx_stop_stream - stop the stream

 *

 * called from trigger callback only

/*

 * playback hw information

|*/

SNDRV_PCM_INFO_RESUME*/),

SNDRV_PCM_FMTBIT_U8 |*/

/*

 * vx_pcm_playback_open - open callback for playback

 playback pipe may have been already allocated for monitoring */

 not allocated yet */

 stereo playback */

 open for playback */

 align to 4 bytes (otherwise will be problematic when 24bit is used) */ 

/*

 * vx_pcm_playback_close - close callback for playback

/*

 * vx_notify_end_of_buffer - send "end-of-buffer" notifier at the given pipe

 * @pipe: the pipe to notify

 *

 * NB: call with a certain lock.

 use a temporary rmh here */

 Toggle Dsp Host Interface into Message mode */

 Toggle Dsp Host Interface back to sound transfer mode */

/*

 * vx_pcm_playback_transfer_chunk - transfer a single chunk

 * @subs: substream

 * @pipe: the pipe to transfer

 * @size: chunk size in bytes

 *

 * transfer a single buffer chunk.  EOB notificaton is added after that.

 * called from the interrupt handler, too.

 *

 * return 0 if ok.

 disconnect the host, SIZE_HBUF command always switches to the stream mode */

 XRUN */

	/* we don't need irqsave here, because this function

	 * is called from either trigger callback or irq handler

 disconnect the host, SIZE_HBUF command always switches to the stream mode */

/*

 * update the position of the given pipe.

 * pipe->position is updated and wrapped within the buffer size.

 * pipe->transferred is updated, too, but the size is not wrapped,

 * so that the caller can check the total transferred size later

 * (to call snd_pcm_period_elapsed).

/*

 * transfer the pending playback buffer data to DSP

 * called from interrupt handler

/*

 * update the playback position and call snd_pcm_period_elapsed() if necessary

 * called from interrupt handler

/*

 * vx_pcm_playback_trigger - trigger callback for playback

/*

 * vx_pcm_playback_pointer - pointer callback for playback

/*

 * vx_pcm_prepare - prepare callback for playback and capture

 int max_size, nchunks;

 IEC958 status (raw-mode) was changed */

 we reopen the pipe */

 16bit word */

 32bit word */

 set the timestamp */

 clear again */

/*

 * operators for PCM playback

/*

 * playback hw information

|*/

SNDRV_PCM_INFO_RESUME*/),

SNDRV_PCM_FMTBIT_U8 |*/

/*

 * vx_pcm_capture_open - open callback for capture

 check if monitoring is needed */

 allocate a pipe */

		/* 

		   if an output pipe is available, it's audios still may need to be 

		   unmuted. hence we'll have to call a mixer entry point.

 assuming stereo */

 default value NULL */

 align to 4 bytes (otherwise will be problematic when 24bit is used) */ 

/*

 * vx_pcm_capture_close - close callback for capture

	/*

	  if an output pipe is attached to this input, 

	  check if it needs to be released.

 hardware alignment for read */

/*

 * vx_pcm_capture_update - update the capture buffer

 align to 3 bytes */

 keep the last 6 bytes, they will be read after disconnection */

	/* read bytes until the current pointer reaches to the aligned position

	 * for word-transfer

 ok, let's accelerate! */

 read the rest of bytes */

 disconnect the host, SIZE_HBUF command always switches to the stream mode */

 read the last pending 6 bytes */

 update the position */

 disconnect the host, SIZE_HBUF command always switches to the stream mode */

/*

 * vx_pcm_capture_pointer - pointer callback for capture

/*

 * operators for PCM capture

/*

 * interrupt handler for pcm streams

 SEL_ASYNC_EVENTS */

 SEL_END_OF_BUF_EVENTS */

 force to transfer */

 update the capture pcm pointers as frequently as possible */

/*

 * vx_init_audio_io - check the available audio i/o and allocate pipe arrays

 allocate pipes */

 query the info */

 set to the minimum */

/*

 * free callback for pcm

/*

 * snd_vx_pcm_new - create and initialize a pcm

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Digigram VX soundcards

 *

 * Common mixer part

 *

 * Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>

/*

 * write a codec data (24bit)

/*

 * Data type used to access the Codec

 LITTLE_ENDIAN */

/*

 * set up codec register and write the value

 * @codec: the codec id, 0 or 1

 * @reg: register index

 * @val: data value

 DAC control register */

/*

 * vx_set_analog_output_level - set the output attenuation level

 * @codec: the output codec, 0 or 1.  (1 for VXP440 only)

 * @left: left output level, 0 = mute

 * @right: right output level

 convert to attenuation level: 0 = 0dB (max), 0xe3 = -113.5 dB (min) */

/*

 * vx_toggle_dac_mute -  mute/unmute DAC

 * @mute: 0 = unmute, 1 = mute

 XXX */

/*

 * vx_reset_codec - reset and initialize the codecs

 AKM codecs should be initialized in reset_codec callback */

 initialize old codecs */

 DAC control register (change level when zero crossing + mute) */

 ADC control register */

 Port mode register */

 Clock control register */

 mute analog output */

/*

 * change the audio input source

 * @src: the target source (VX_AUDIO_SRC_XXX)

/*

 * change the audio source if necessary and possible

 * returns 1 if the source is actually changed.

/*

 * audio level, mute, monitoring

 Add Audio IO mask */

 validate flag for M2 at least to unmute it */ 

 not used

 Add Audio IO mask */

 not used

/*

 * set the monitoring level and mute state of the given audio

 * no more static, because must be called from vx_pcm to demute monitoring

 playback only */

/*

 * set the mute status of the given audio

 playback only */

/*

 * set the mute status of the given audio

/*

 * reset all audio levels

 default: 0dB */

/*

 * VU, peak meter record

/*

 * get the VU and peak meter values

 * @audio: the audio index

 * @capture: 0 = playback, 1 = capture operation

 * @info: the array of vx_vu_meter records (size = 2).

 Add Audio IO mask */

 Read response */

/*

 * control API entries

/*

 * output level control

 tlv will be filled later */

/*

 * audio source select

/*

 * clock mode selection

/*

 * Audio Gain

 name will be filled later */

 shared */

 shared */

/*

 * IEC958 status bits

 shared */

/*

 * VU meter

 capture only */

 name will be filled later */

 name will be filled later */

 shared */

/*

 *

 output level controls */

 PCM volumes, switches, monitoring */

 Audio source */

 clock mode */

 IEC958 controls */

 VU, peak, saturation meters */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Digigram VX soundcards

 *

 * IEC958 stuff

 *

 * Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>

/*

 * vx_modify_board_clock - tell the board that its clock has been modified

 * @sync: DSP needs to resynchronize its FIFO

 Ask the DSP to resynchronize its FIFO. */

/*

 * vx_modify_board_inputs - resync audio inputs

 reference: AUDIO 0 */

/*

 * vx_read_one_cbit - read one bit from UER config

 * @index: the bit index

 * returns 0 or 1.

 read */

 read */

/*

 * vx_write_one_cbit - write one bit to UER config

 * @index: the bit index

 * @val: bit value, 0 or 1

 0 or 1 */

 write */

 write */

/*

 * vx_read_uer_status - read the current UER status

 * @mode: pointer to store the UER mode, VX_UER_MODE_XXX

 *

 * returns the frequency of UER, or 0 if not sync,

 * or a negative error code.

 Default values */

 Read UER status */

 If clock is present, read frequency */

 bit 0 corresponds to consumer/professional bit */

/*

 * compute the sample clock value from frequency

 *

 * The formula is as follows:

 *

 *    HexFreq = (dword) ((double) ((double) 28224000 / (double) Frequency))

 *    switch ( HexFreq & 0x00000F00 )

 *    case 0x00000100: ;

 *    case 0x00000200:

 *    case 0x00000300: HexFreq -= 0x00000201 ;

 *    case 0x00000400:

 *    case 0x00000500:

 *    case 0x00000600:

 *    case 0x00000700: HexFreq = (dword) (((double) 28224000 / (double) (Frequency*2)) - 1)

 *    default        : HexFreq = (dword) ((double) 28224000 / (double) (Frequency*4)) - 0x000001FF

 max freq = 55125 Hz */

 min freq = 6893 Hz */

/*

 * vx_change_clock_source - change the clock source

 * @source: the new source

 we mute DAC to prevent clicks */

 unmute */

/*

 * set the internal clock

 Get real clock value */

/*

 * set the iec958 status bits

 * @bits: 32-bit status bits

/*

 * vx_set_clock - change the clock and audio source if necessary

 change the audio source if possible */

/*

 * vx_change_frequency - called from interrupt handler

	/*

	 * Read the real UER board frequency

	/*

	 * The frequency computed by the DSP is good and

	 * is different from the previous computed.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Digigram VX soundcards

 *

 * DSP firmware management

 *

 * Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>

 ok, we reached to the last one */

 create the devices if not built yet */

 exported */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Driver for Digigram VX soundcards

 *

 * DSP commands

 *

 * Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>

/*

 * Array of DSP commands

 [CMD_SET_STREAM_OUT_EFFECTS] =	{ 0x888000, 34, RMH_SSIZE_FIXED, 0 },

 [CMD_GET_STREAM_OUT_EFFECTS] =	{ 0x928000, 2, RMH_SSIZE_FIXED, 32 },

/**

 * vx_init_rmh - initialize the RMH instance

 * @rmh: the rmh pointer to be initialized

 * @cmd: the rmh command to be set

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Uros Bizjak <uros@kss-loka.si>

 *

 *  Midi synth routines for OPL2/OPL3/OPL4 FM

/*

 * The next table looks magical, but it certainly is not. Its values have

 * been calculated as table[i]=8*log(i/64)/log(2) with an obvious exception

 * for i=0. This log-table converts a linear volume-scaling (0..127) to a

 * logarithmic scaling as present in the FM-synthesizer chips. so :    Volume

 * 64 =  0 db = relative volume  0 and:    Volume 32 = -6 db = relative

 * volume -8 it was implemented as a table because it is only 128 bytes and

 * it saves a lot of log() calculations. (Rob Hooft <hooft@chem.ruu.nl>)

/*

 * Converts the note frequency to block and fnum values for the FM chip

 for pitch bending, -2 semitones */

 for pitch bending, +2 semitones */

/*

 * Get a FM voice (channel) to play a note on.

 first voice for 4op instrument */

 second voice for 4op instrument */

 This is our "allocation cost" table */

 Keeps track of what we are finding */

 XXX MAX_?INT really */

 Look through all the channels for the most suitable. */

		  /* skip unavailable channels, allocated by

 allocate 4op voice */

 skip channels unavailable to 4op instrument */

 kill one voice, CHEAP */

			/* get state of bounded 2op channel

 kill two voices, EXPENSIVE */

 allocate 2op voice */

 use bounded channels for 2op, CHEAP */

 kill one voice on 2op channel, CHEAP */

 raise kill cost to EXPENSIVE for all channels */

 not found */

 ------------------------------ */

/*

 * System timer interrupt function

 invoke again */

/*

 * Start system timer

 ------------------------------ */

/*

 * Start a note.

 in SYNTH mode, application takes care of voices */

 in SEQ mode, drum voice numbers are notes on drum channel */

 percussion instruments are located in bank 128 */

 Prepare for OSS mode */

 OSS instruments are located in bank 127 */

 in SYNTH mode, application takes care of voices */

 in SEQ mode, allocate voice on free OPL3 channel */

 remap OSS voice */

 Left register block for voices 0 .. 8 */

 Right register block for voices 9 .. 17 */

 kill voice on channel */

 set connection register */

 set connection bit */

 clear connection bit */

	/*

	 * calculate volume depending on connection

	 * between FM operators (see include/opl3.h)

 Program the FM voice characteristics */

 Set OPL3 AM_VIB register of requested voice/operator */ 

 Set OPL3 KSL_LEVEL register of requested voice/operator */ 

 Set OPL3 ATTACK_DECAY register of requested voice/operator */ 

 Set OPL3 SUSTAIN_RELEASE register of requested voice/operator */ 

 Select waveform */

 Set operator feedback and 2op inter-operator connection */

 Set output voice connection */

 Set 4op inter-operator connection */

 Set output voice connection */

	/*

	 * Special treatment of percussion notes for fm:

	 * Requested pitch is really program, and pitch for

	 * device is whatever was specified in the patch library.

	/*

	 * use transpose if defined in patch library

 Set OPL3 FNUM_LOW register of requested voice */

 Set output sound flag */

 Set OPL3 KEYON_BLOCK register of requested voice */ 

 kill note after fixed duration (in centiseconds) */

 get extra pgm, but avoid possible loops */

 do the bookkeeping */

 4op killed by 2op, release bounded voice */

 allocate extra program if specified in patch library */

 percussions start at 35 */

 Left register block for voices 0 .. 8 */

 Right register block for voices 9 .. 17 */

 kill voice */

 clear Key ON bit */

 do the bookkeeping */

/*

 * Release a note in response to a midi note off.

		/* this loop will hopefully kill all extra voices, because

 remap OSS voices */

/*

 * key pressure change

/*

 * terminate note

 not allocated? */

 Left register block for voices 0 .. 8 */

 Right register block for voices 9 .. 17 */

 Set OPL3 FNUM_LOW register of requested voice */

 Set output sound flag */

 Set OPL3 KEYON_BLOCK register of requested voice */ 

/*

 * Update voice pitch controller

 remap OSS voices */

/*

 * Deal with a controller type event.  This includes all types of

 * control events, not just the midi controllers

/*

 * NRPN events

/*

 * receive sysex

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Uros Bizjak <uros@kss-loka.si>

 *                   

 *  Routines for OPL2/OPL3/OPL4 control

/*

 *    There is 18 possible 2 OP voices

 *      (9 in the left and 9 in the right).

 *      The first OP is the modulator and 2nd is the carrier.

 *

 *      The first three voices in the both sides may be connected

 *      with another voice to a 4 OP voice. For example voice 0

 *      can be connected with voice 3. The operators of voice 3 are

 *      used as operators 3 and 4 of the new 4 OP voice.

 *      In this case the 2 OP voice number 0 is the 'first half' and

 *      voice 3 is the second.

/*

 *    Register offset table for OPL2/3 voices,

 *    OPL2 / one OPL3 register array side only

	  OP1   OP2   OP3   OP4		*/

	 ------------------------	*/

 used by percussive voices */

 if the percussive mode */

 is selected (only left reg block) */

/*

 * prototypes

 ------------------------------ */

/*

 * open the device exclusively

/*

 * ioctl for hwdep device:

 get information */

/*

 * close the device

/*

 * write the device - load patches

 invalid type */

/*

 * Patch management

 offsets for SBI params */

 offset for SBI instrument */

/*

 * load a patch, obviously.

 *

 * loaded on the given program and bank numbers with the given type

 * (FM_PATCH_OPLx).

 * data is the pointer of SBI record _without_ header (key and name).

 * name is the name string of the patch.

 * ext is the extension data of 7 bytes long (stored in name of SBI

 * data up to offset 25), or NULL to skip.

 * return 0 if successful or a negative error code.

/*

 * find a patch with the given program and bank numbers, returns its pointer

 * if no matching patch is found and create_patch is set, it creates a

 * new patch object.

 pretty dumb hash key */

/*

 * Clear all patches of the given OPL3 instance

 OPL3_SUPPORT_SYNTH */

 ------------------------------ */

 Get register array side and offset of voice */

 Left register block for voices 0 .. 8 */

 Right register block for voices 9 .. 17 */

 Operator 1 volume */

 Operator 2 volume */

 Note off */

 Melodic mode */

 Voices 0 -  8 in OPL2 mode */

 Voices 0 - 17 in OPL3 mode */

 Get register array side and offset of voice */

 Left register block for voices 0 .. 8 */

 Right register block for voices 9 .. 17 */

 Set lower 8 bits of note frequency */

 Set output sound flag */

 Set octave */

 Set higher 2 bits of note frequency */

 Set OPL3 KEYON_BLOCK register of requested voice */ 

 Only operators 1 and 2 */

 Voices 0 -  8 in OPL2 mode */

 Voices 0 - 17 in OPL3 mode */

 Get register array side and offset of voice */

 Left register block for voices 0 .. 8 */

 Right register block for voices 9 .. 17 */

 Get register offset of operator */

 Set amplitude modulation (tremolo) effect */

 Set vibrato effect */

 Set sustaining sound phase */

 Set keyboard scaling bit */ 

 Set harmonic or frequency multiplier */

 Set OPL3 AM_VIB register of requested voice/operator */ 

 Set decreasing volume of higher notes */

 Set output volume */

 Set OPL3 KSL_LEVEL register of requested voice/operator */ 

 Set attack phase level */

 Set decay phase level */

 Set OPL3 ATTACK_DECAY register of requested voice/operator */ 

 Set sustain phase level */

 Set release phase level */

 Set OPL3 SUSTAIN_RELEASE register of requested voice/operator */ 

 Set inter-operator feedback */

 Set inter-operator connection */

 OPL-3 only */

 Feedback/connection bits are applicable to voice */

 Select waveform */

 Set keyboard split method */

 Set amplitude modulation (tremolo) depth */

 Set vibrato depth */

 Set percussion mode */

 Play percussion instruments */

 Clear 4-op connections */

 OPL-3 only */

 Set 4-op connections */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>,

 *                   Hannu Savolainen 1993-1996,

 *                   Rob Hooft

 *                   

 *  Routines for control of AdLib FM cards (OPL2/OPL3/OPL4 chips)

 *

 *  Most if code is ported from OSS/Lite.

	/*

	 * The original 2-OP synth requires a quite long delay

	 * after writing to a register.

	/*

	 * The OPL-3 survives with just two INBs

	 * after writing to a register.

	/*

	 * This function returns 1 if the FM chip is present at the given I/O port

	 * The detection algorithm plays with the timer built in the FM chip and

	 * looks for a change in the status register.

	 *

	 * Note! The timers of the FM chip are not connected to AdLib (and compatible)

	 * boards.

	 *

	 * Note2! The chip is initialized if detected.

 Reset timers 1 and 2 */

 Reset the IRQ of the FM chip */

 Status register */

 Should be 0x00 */

 Set timer1 to 0xff */

 Unmask and start timer 1 */

 Now we have to delay at least 80us */

 Read status after timers have expired */

 Stop the timers */

 Reset the IRQ of the FM chip */

 There is no YM3812 */

	/* If the toplevel code knows exactly the type of chip, don't try

 There is a FM chip on this address. Detect the type (OPL2 to OPL4) */

 OPL2 */

		/*

		 * If we had an OPL4 chip, opl3->hardware would have been set

		 * by the OPL4 driver; so we can assume OPL3 here.

/*

 *  AdLib timers

/*

 *  Timer 1 - 80us

 timer 1 count */

 enable timer 1 IRQ */

 disable timer #1 */

/*

 *  Timer 2 - 320us

 timer 1 count */

 enable timer 1 IRQ */

 disable timer #1 */

/*



/*



/*



 Melodic mode */

 Enter OPL3 mode */

 some hardware doesn't support timers */

 detect routine returns correct hardware type */

 create hardware dependent device (direct FM) */

 operators - only ioctl */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Uros Bizjak <uros@kss-loka.si>

 *

 *  Midi Sequencer interface routines for OPL2/OPL3/OPL4 FM

 *

 *  OPL2/3 FM instrument loader:

 *   alsa-tools/seq/sbiload/

 Clear 4-op connections */

 Stop system timer */

 Percussion mode */

/*

 * MIDI emulation operators

 ------------------------------ */

 ------------------------------ */

 allocate new client */

 setup system timer */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Interface for OSS sequencer emulation

 *

 *  Copyright (C) 2000 Uros Bizjak <uros@kss-loka.si>

 operators */

 ------------------------------ */

 ------------------------------ */

 register OSS synth */

 register to OSS synth table */

 unregister */

 The instance should have been released in prior */

 ------------------------------ */

 open OSS sequencer */

 fill the argument data */

 close OSS sequencer */

 load patch */

 from sound_config.h */

 ioctl */

 handled automatically by OPL instrument type

 reset device */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Uros Bizjak <uros@kss-loka.si>

 *

 *   OPL2/OPL3/OPL4 FM routines for internal percussion channels

 35 - 37 */

 38 - 40 */

 41 - 43 */

 44 - 46 */

 47 - 49 */

 50 - 52 */

 53 - 55 */

 56 - 58 */

 59 - 61 */

 62 - 64 */

 65 - 67 */

 68 - 70 */

 71 - 73 */

 74 - 76 */

 77 - 79 */

 80 - 81 */

/*

 * set drum voice characteristics

 Set OPL3 AM_VIB register */ 

 Set OPL3 KSL_LEVEL register */ 

 Set OPL3 ATTACK_DECAY register */ 

 Set OPL3 SUSTAIN_RELEASE register */ 

 Set OPL3 FEEDBACK_CONNECTION register */ 

 Select waveform */

/*

 * Set drum voice pitch

 Set OPL3 FNUM_LOW register */ 

 Set OPL3 KEYON_BLOCK register */ 

/*

 * Set drum voice volume and position

 Set OPL3 KSL_LEVEL register */ 

 Set OPL3 FEEDBACK_CONNECTION register */ 

 Set output voice connection */

/*

 * Loads drum voices at init time

/*

 * Switch drum voice on or off

/*

 * OPL4 MIDI synthesizer functions

 *

 * Copyright (c) 2003 by Clemens Ladisch <clemens@ladisch.de>

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions, and the following disclaimer,

 *    without modification.

 * 2. The name of the author may not be used to endorse or promote products

 *    derived from this software without specific prior written permission.

 *

 * Alternatively, this software may be distributed and/or modified under the

 * terms of the GNU General Public License as published by the Free Software

 * Foundation; either version 2 of the License, or (at your option) any later

 * version.

 *

 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND

 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR

 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF

 * SUCH DAMAGE.

 GM2 controllers */

/*

 * This table maps 100/128 cents to F_NUMBER.

/*

 * Attenuation according to GM recommendations, in -0.375 dB units.

 * table[v] = 40 * log(v / 127) / -0.375

/*

 * Initializes all voices.

/*

 * Shuts down all voices.

/*

 * Executes the callback for all voices playing the specified note.

/*

 * Executes the callback for all voices of to the specified channel.

/*

 * Executes the callback for all active voices.

	/*

	 * pitch is in 100/128 cents, so 0x80 is one semitone and

	 * 0x600 is one octave.

 allocate one voice */

 first, try to get the oldest key-off voice */

 then get the oldest key-on voice */

 determine the number of voices and voice parameters */

 allocate and initialize the needed voices */

 set tone number (triggers header loading) */

 set parameters which can be set while loading */

 wait for completion of loading */

 set remaining parameters */

 finally, switch on all voices */

 not yet supported */

 not yet supported */

		/*

		 * Each OPL4 voice has a bit called "Pseudo-Reverb", but

		 * IMHO _not_ using it enhances the listening experience.

/*

 * OPL4 sequencer functions

 *

 * Copyright (c) 2003 by Clemens Ladisch <clemens@ladisch.de>

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions, and the following disclaimer,

 *    without modification.

 * 2. The name of the author may not be used to endorse or promote products

 *    derived from this software without specific prior written permission.

 *

 * Alternatively, this software may be distributed and/or modified under the

 * terms of the GNU General Public License as published by the Free Software

 * Foundation; either version 2 of the License, or (at your option) any later

 * version.

 *

 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND

 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR

 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF

 * SUCH DAMAGE.

 allocate new client */

 create new port */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OPL4 mixer functions

 * Copyright (c) 2003 by Clemens Ladisch <clemens@ladisch.de>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Functions for the OPL4 proc file

 * Copyright (c) 2003 by Clemens Ladisch <clemens@ladisch.de>

 OPL4 can access 4 MB external ROM/SRAM */

 OPL4-ML has 1 MB internal ROM */

/*

 * Information about the Yamaha YRW801 wavetable ROM chip

 *

 * Copyright (c) 2003 by Clemens Ladisch <clemens@ladisch.de>

 * All rights reserved.

 *

 * Redistribution and use in source and binary forms, with or without

 * modification, are permitted provided that the following conditions

 * are met:

 * 1. Redistributions of source code must retain the above copyright

 *    notice, this list of conditions, and the following disclaimer,

 *    without modification.

 * 2. The name of the author may not be used to endorse or promote products

 *    derived from this software without specific prior written permission.

 *

 * Alternatively, this software may be distributed and/or modified under the

 * terms of the GNU General Public License as published by the Free Software

 * Foundation; either version 2 of the License, or (at your option) any later

 * version.

 *

 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND

 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR

 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF

 * SUCH DAMAGE.

/*

 * The instrument definitions are stored statically because, in practice, the

 * OPL4 is always coupled with a YRW801. Dynamic instrument loading would be

 * required if downloading sample data to external SRAM was actually supported

 * by this driver.

 Acoustic Grand Piano */

 Bright Acoustic Piano */

 Electric Grand Piano */

 Honky-Tonk Piano */

 Electric Piano 1 */

 Electric Piano 2 */

 Harpsichord */

 Clavinet */

 Celesta */

 Glockenspiel */

 Music Box */

 Vibraphone */

 Marimba */

 Xylophone */

 Tubular Bell */

 Dulcimer */

 Drawbar Organ */

 Percussive Organ */

 Rock Organ */

 Church Organ */

 Reed Organ */

 Accordion */

 Harmonica */

 Tango Accordion */

 Nylon Guitar */

 Steel Guitar */

 Jazz Guitar */

 Clean Guitar */

 Muted Guitar */

 Overdriven Guitar */

 Distortion Guitar */

 Guitar Harmonics */

 Acoustic Bass */

 Fingered Bass */

 Picked Bass */

 Fretless Bass */

 Slap Bass 1 */

 Slap Bass 2 */

 Synth Bass 1 */

 Synth Bass 2 */

 Violin */

 Viola */

 Cello */

 Contrabass */

 Tremolo Strings */

 Pizzicato Strings */

 Harp */

 Timpani */

 Strings */

 Slow Strings */

 Synth Strings 1 */

 Synth Strings 2 */

 Choir Aahs */

 Voice Oohs */

 Synth Voice */

 Orchestra Hit */

 Trumpet */

 Trombone */

 Tuba */

 Muted Trumpet */

 French Horns */

 Brass Section */

 Synth Brass 1 */

 Synth Brass 2 */

 Soprano Sax */

 Alto Sax */

 Tenor Sax */

 Baritone Sax */

 Oboe */

 English Horn */

 Bassoon */

 Clarinet */

 Piccolo */

 Flute */

 Recorder */

 Pan Flute */

 Bottle Blow */

 Shakuhachi */

 Whistle */

 Ocarina */

 Square Lead */

 Sawtooth Lead */

 Calliope Lead */

 Chiffer Lead */

 Charang Lead */

 Voice Lead */

 5ths Lead */

 Bass & Lead */

 New Age Pad */

 Warm Pad */

 Polysynth Pad */

 Choir Pad */

 Bowed Pad */

 Metallic Pad */

 Halo Pad */

 Sweep Pad */

 Ice Rain */

 Soundtrack */

 Crystal */

 Atmosphere */

 Brightness */

 Goblins */

 Echoes */

 Sci-Fi */

 Sitar */

 Banjo */

 Shamisen */

 Koto */

 Kalimba */

 Bagpipe */

 Fiddle */

 Shanai */

 Tinkle Bell */

 Agogo */

 Steel Drums */

 Woodblock */

 Taiko Drum */

 Melodic Tom */

 Synth Drum */

 Reverse Cymbal */

 Guitar Fret Noise */

 Breath Noise */

 Seashore */

 Bird Tweet */

 Telephone Ring */

 Helicopter */

 Applause */

 Gun Shot */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Functions for accessing OPL4 devices

 * Copyright (c) 2003 by Clemens Ladisch <clemens@ladisch.de>

 opl3 initialization disabled opl4, so reenable */

 SPDX-License-Identifier: GPL-2.0

/*

 * PC-Speaker driver for Linux

 *

 * Mixer implementation.

 * Copyright (C) 2001-2008  Stas Sergeev

 SPDX-License-Identifier: GPL-2.0

/*

 * PC-Speaker driver for Linux

 *

 * Copyright (C) 1993-1997  Michael Beck

 * Copyright (C) 1997-2001  David Woodhouse

 * Copyright (C) 2001-2008  Stas Sergeev

/*

 * Call snd_pcm_period_elapsed in a work

 * This avoids spinlock messes and long-running irq contexts

/* write the port and returns the next expire time in ns;

 * called at the trigger-start and in hrtimer callback

 assume it is mono! */

 update the playback position */

	/* wrap the pointer _before_ calling snd_pcm_period_elapsed(),

 binary, mode 1, LSB only, ch 2 */

 restore the timer */

 binary, mode 3, LSB/MSB, ch 2 */

/*

 * Force to stop and sync the stream

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PC Speaker beeper driver for Linux

 *

 *  Copyright (c) 2002 Vojtech Pavlik

 *  Copyright (c) 1992 Orest Zborowski

 set command for counter 2, 2 byte write */

 select desired HZ */

 enable counter 2 */

 disable counter 2 */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * PC-Speaker driver for Linux

 *

 * Copyright (C) 1997-2001  David Woodhouse

 * Copyright (C) 2001-2008  Stas Sergeev

 Index 0-MAX */

 ID for this card */

 Enable this card */

 Disable PCM capability of the driver */

 Well, CONFIG_DEBUG_PAGEALLOC makes the sound horrible. Lets alert */

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for generic MPU-401 boards (UART mode only)

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  Copyright (c) 2004 by Castet Matthieu <castet.matthieu@free.fr>

 exclude the first card */

 ID for this card */

 Enable this card */

 MPU-401 port number */

 MPU-401 IRQ */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  Routines for control of MPU-401 in UART mode

 *

 *  MPU-401 supports UART mode which is not capable generate transmit

 *  interrupts thus output is done via polling. Without interrupt,

 *  input is done also via polling. Do not expect good performance.

 *

 *   13-03-2003:

 *      Added support for different kind of hardware I/O. Build in choices

 *      are port and mmio. For other kind of I/O, set mpu->read and

 *      mpu->write to your own I/O functions.

/*



 Build in lowlevel io */

  */

		/* ok. for better Tx performance try do some output

/**

 * snd_mpu401_uart_interrupt - generic MPU401-UART interrupt handler

 * @irq: the irq number

 * @dev_id: mpu401 instance

 *

 * Processes the interrupt for MPU401-UART i/o.

 *

 * Return: %IRQ_HANDLED if the interrupt was handled. %IRQ_NONE otherwise.

/**

 * snd_mpu401_uart_interrupt_tx - generic MPU401-UART transmit irq handler

 * @irq: the irq number

 * @dev_id: mpu401 instance

 *

 * Processes the interrupt for MPU401-UART output.

 *

 * Return: %IRQ_HANDLED if the interrupt was handled. %IRQ_NONE otherwise.

/*

 * timer callback

 * reprogram the timer and call the interrupt job

mpu->mode |= MPU401_MODE_TIMER;*/

/*

 * initialize the timer callback if not programmed yet

/*

 * remove the timer callback if still active

/*

 * send a UART command

 * return zero if successful, non-zero for some errors

snd_mpu401_uart_clear_rx(mpu);*/

 ok. standard MPU-401 initialization */

/*

 * input/output open/close - protected by open_mutex in rawmidi.c

/*

 * trigger input callback

 first time - flush FIFO */

 read data in advance */

/*

 * transfer input pending data

 * call with input_lock spinlock held

 input not available */

/*

 *  Tx FIFO sizes:

 *    CS4237B			- 16 bytes

 *    AudioDrive ES1688         - 12 bytes

 *    S3 SonicVibes             -  8 bytes

 *    SoundBlaster AWE 64       -  2 bytes (ugly hardware)

/*

 * write output pending bytes

 * call with output_lock spinlock held

			/*

			 * Try twice because there is hardware that insists on

			 * setting the output busy bit after each write.

 Tx FIFO full - try again later */

 no other data - leave the tx loop */

/*

 * output trigger callback

		/* try to add the timer at each output trigger,

		 * since the output timer might have been removed in

		 * snd_mpu401_uart_output_write().

 output pending data */

/*



/**

 * snd_mpu401_uart_new - create an MPU401-UART instance

 * @card: the card instance

 * @device: the device index, zero-based

 * @hardware: the hardware type, MPU401_HW_XXXX

 * @port: the base address of MPU401 port

 * @info_flags: bitflags MPU401_INFO_XXX

 * @irq: the ISA irq number, -1 if not to be allocated

 * @rrawmidi: the pointer to store the new rawmidi instance

 *

 * Creates a new MPU-401 instance.

 *

 * Note that the rawmidi instance is returned on the rrawmidi argument,

 * not the mpu401 instance itself.  To access to the mpu401 instance,

 * cast from rawmidi->private_data (with struct snd_mpu401 magic-cast).

 *

 * Return: Zero if successful, or a negative error code.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Digital Audio (PCM) abstract layer

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *                   Abramo Bagnara <abramo@alsa-project.org>

/*

 * fill ring buffer with silence

 * runtime->silence_start: starting pointer to silence area

 * runtime->silence_filled: size filled with silence

 * runtime->silence_threshold: threshold from application

 * runtime->silence_size: maximal size from application

 *

 * when runtime->silence_size >= runtime->boundary - fill processed area with silence immediately

 initialization */

 dump also stack */

 do jiffies check */

 call with stream lock held */

 ! CONFIG_SND_PCM_XRUN_DEBUG */

		/*

		 * provide audio timestamp derived from pointer position

		 * add delay only if requested

	/*

	 * re-take a driver timestamp to let apps detect if the reference tstamp

	 * read by low-level hardware was provided with a delay

	/*

	 * group pointer, time and jiffies reads to allow for more

	 * accurate correlations/corrections.

	 * The values are stored at the end of this routine after

	 * corrections for hw_ptr position

 re-test in case tstamp type is not supported in hardware and was demoted to DEFAULT */

 we know that one period was processed */

 delta = "expected next hw_ptr" for in_interrupt != 0 */

 check for double acknowledged interrupts */

 new_hw_ptr might be lower than old_hw_ptr in case when */

 pointer crosses the end of the ring buffer */

		/*

		 * Without regular period interrupts, we have to check

		 * the elapsed time to detect xruns.

 something must be really wrong */

 Do jiffies check only in xrun_debug mode */

	/* Skip the jiffies check for hardwares with BATCH flag.

	 * Such hardware usually just increases the position at each IRQ,

	 * thus it can't give any strange position.

 move new_hw_ptr according jiffies not pos variable */

 use loop to avoid checks for delta overflows */

 the delta value is small or zero in most cases */

 align hw_base to buffer_size */

 reset values to proper state */

 CAUTION: call it with irq disabled */

/**

 * snd_pcm_set_ops - set the PCM operators

 * @pcm: the pcm instance

 * @direction: stream direction, SNDRV_PCM_STREAM_XXX

 * @ops: the operator table

 *

 * Sets the given PCM operators to the pcm instance.

/**

 * snd_pcm_set_sync - set the PCM sync id

 * @substream: the pcm substream

 *

 * Sets the PCM sync identifier for the card.

/*

 *  Standard ioctl routine

/**

 * snd_interval_refine - refine the interval value of configurator

 * @i: the interval value to refine

 * @v: the interval value to refer to

 *

 * Refines the interval value with the reference value.

 * The interval is changed to the range satisfying both intervals.

 * The interval status (min, max, integer, etc.) are evaluated.

 *

 * Return: Positive if the value is changed, zero if it's not changed, or a

 * negative error code.

 only exclude max value if also excluded before refine */

 only exclude min value if also excluded before refine */

/**

 * snd_interval_div - refine the interval value with division

 * @a: dividend

 * @b: divisor

 * @c: quotient

 *

 * c = a / b

 *

 * Returns non-zero if the value is changed, zero if not changed.

/**

 * snd_interval_muldivk - refine the interval value

 * @a: dividend 1

 * @b: dividend 2

 * @k: divisor (as integer)

 * @c: result

  *

 * c = a * b / k

 *

 * Returns non-zero if the value is changed, zero if not changed.

/**

 * snd_interval_mulkdiv - refine the interval value

 * @a: dividend 1

 * @k: dividend 2 (as integer)

 * @b: divisor

 * @c: result

 *

 * c = a * k / b

 *

 * Returns non-zero if the value is changed, zero if not changed.

 ---- */

/**

 * snd_interval_ratnum - refine the interval value

 * @i: interval to refine

 * @rats_count: number of ratnum_t 

 * @rats: ratnum_t array

 * @nump: pointer to store the resultant numerator

 * @denp: pointer to store the resultant denominator

 *

 * Return: Positive if the value is changed, zero if it's not changed, or a

 * negative error code.

/**

 * snd_interval_ratden - refine the interval value

 * @i: interval to refine

 * @rats_count: number of struct ratden

 * @rats: struct ratden array

 * @nump: pointer to store the resultant numerator

 * @denp: pointer to store the resultant denominator

 *

 * Return: Positive if the value is changed, zero if it's not changed, or a

 * negative error code.

/**

 * snd_interval_list - refine the interval value from the list

 * @i: the interval value to refine

 * @count: the number of elements in the list

 * @list: the value list

 * @mask: the bit-mask to evaluate

 *

 * Refines the interval value from the list.

 * When mask is non-zero, only the elements corresponding to bit 1 are

 * evaluated.

 *

 * Return: Positive if the value is changed, zero if it's not changed, or a

 * negative error code.

/**

 * snd_interval_ranges - refine the interval value from the list of ranges

 * @i: the interval value to refine

 * @count: the number of elements in the list of ranges

 * @ranges: the ranges list

 * @mask: the bit-mask to evaluate

 *

 * Refines the interval value from the list of ranges.

 * When mask is non-zero, only the elements corresponding to bit 1 are

 * evaluated.

 *

 * Return: Positive if the value is changed, zero if it's not changed, or a

 * negative error code.

 Info constraints helpers */

/**

 * snd_pcm_hw_rule_add - add the hw-constraint rule

 * @runtime: the pcm runtime instance

 * @cond: condition bits

 * @var: the variable to evaluate

 * @func: the evaluation function

 * @private: the private data pointer passed to function

 * @dep: the dependent variables

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_pcm_hw_constraint_mask - apply the given bitmap mask constraint

 * @runtime: PCM runtime instance

 * @var: hw_params variable to apply the mask

 * @mask: the bitmap mask

 *

 * Apply the constraint of the given bitmap mask to a 32-bit mask parameter.

 *

 * Return: Zero if successful, or a negative error code on failure.

 clear rest */

/**

 * snd_pcm_hw_constraint_mask64 - apply the given bitmap mask constraint

 * @runtime: PCM runtime instance

 * @var: hw_params variable to apply the mask

 * @mask: the 64bit bitmap mask

 *

 * Apply the constraint of the given bitmap mask to a 64-bit mask parameter.

 *

 * Return: Zero if successful, or a negative error code on failure.

 clear rest */

/**

 * snd_pcm_hw_constraint_integer - apply an integer constraint to an interval

 * @runtime: PCM runtime instance

 * @var: hw_params variable to apply the integer constraint

 *

 * Apply the constraint of integer to an interval parameter.

 *

 * Return: Positive if the value is changed, zero if it's not changed, or a

 * negative error code.

/**

 * snd_pcm_hw_constraint_minmax - apply a min/max range constraint to an interval

 * @runtime: PCM runtime instance

 * @var: hw_params variable to apply the range

 * @min: the minimal value

 * @max: the maximal value

 * 

 * Apply the min/max range constraint to an interval parameter.

 *

 * Return: Positive if the value is changed, zero if it's not changed, or a

 * negative error code.

/**

 * snd_pcm_hw_constraint_list - apply a list of constraints to a parameter

 * @runtime: PCM runtime instance

 * @cond: condition bits

 * @var: hw_params variable to apply the list constraint

 * @l: list

 * 

 * Apply the list of constraints to an interval parameter.

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_pcm_hw_constraint_ranges - apply list of range constraints to a parameter

 * @runtime: PCM runtime instance

 * @cond: condition bits

 * @var: hw_params variable to apply the list of range constraints

 * @r: ranges

 *

 * Apply the list of range constraints to an interval parameter.

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_pcm_hw_constraint_ratnums - apply ratnums constraint to a parameter

 * @runtime: PCM runtime instance

 * @cond: condition bits

 * @var: hw_params variable to apply the ratnums constraint

 * @r: struct snd_ratnums constriants

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_pcm_hw_constraint_ratdens - apply ratdens constraint to a parameter

 * @runtime: PCM runtime instance

 * @cond: condition bits

 * @var: hw_params variable to apply the ratdens constraint

 * @r: struct snd_ratdens constriants

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_pcm_hw_constraint_msbits - add a hw constraint msbits rule

 * @runtime: PCM runtime instance

 * @cond: condition bits

 * @width: sample bits width

 * @msbits: msbits width

 *

 * This constraint will set the number of most significant bits (msbits) if a

 * sample format with the specified width has been select. If width is set to 0

 * the msbits will be set for any sample format with a width larger than the

 * specified msbits.

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_pcm_hw_constraint_step - add a hw constraint step rule

 * @runtime: PCM runtime instance

 * @cond: condition bits

 * @var: hw_params variable to apply the step constraint

 * @step: step size

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_pcm_hw_constraint_pow2 - add a hw constraint power-of-2 rule

 * @runtime: PCM runtime instance

 * @cond: condition bits

 * @var: hw_params variable to apply the power-of-2 constraint

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_pcm_hw_rule_noresample - add a rule to allow disabling hw resampling

 * @runtime: PCM runtime instance

 * @base_rate: the rate at which the hardware does not resample

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_pcm_hw_param_value - return @params field @var value

 * @params: the hw_params instance

 * @var: parameter to retrieve

 * @dir: pointer to the direction (-1,0,1) or %NULL

 *

 * Return: The value for field @var if it's fixed in configuration space

 * defined by @params. -%EINVAL otherwise.

/**

 * snd_pcm_hw_param_first - refine config space and return minimum value

 * @pcm: PCM instance

 * @params: the hw_params instance

 * @var: parameter to retrieve

 * @dir: pointer to the direction (-1,0,1) or %NULL

 *

 * Inside configuration space defined by @params remove from @var all

 * values > minimum. Reduce configuration space accordingly.

 *

 * Return: The minimum, or a negative error code on failure.

/**

 * snd_pcm_hw_param_last - refine config space and return maximum value

 * @pcm: PCM instance

 * @params: the hw_params instance

 * @var: parameter to retrieve

 * @dir: pointer to the direction (-1,0,1) or %NULL

 *

 * Inside configuration space defined by @params remove from @var all

 * values < maximum. Reduce configuration space accordingly.

 *

 * Return: The maximum, or a negative error code on failure.

/**

 * snd_pcm_lib_ioctl - a generic PCM ioctl callback

 * @substream: the pcm substream instance

 * @cmd: ioctl command

 * @arg: ioctl argument

 *

 * Processes the generic ioctl commands for PCM.

 * Can be passed as the ioctl callback for PCM ops.

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_pcm_period_elapsed_under_stream_lock() - update the status of runtime for the next period

 *						under acquired lock of PCM substream.

 * @substream: the instance of pcm substream.

 *

 * This function is called when the batch of audio data frames as the same size as the period of

 * buffer is already processed in audio data transmission.

 *

 * The call of function updates the status of runtime with the latest position of audio data

 * transmission, checks overrun and underrun over buffer, awaken user processes from waiting for

 * available audio data frames, sampling audio timestamp, and performs stop or drain the PCM

 * substream according to configured threshold.

 *

 * The function is intended to use for the case that PCM driver operates audio data frames under

 * acquired lock of PCM substream; e.g. in callback of any operation of &snd_pcm_ops in process

 * context. In any interrupt context, it's preferrable to use ``snd_pcm_period_elapsed()`` instead

 * since lock of PCM substream should be acquired in advance.

 *

 * Developer should pay enough attention that some callbacks in &snd_pcm_ops are done by the call of

 * function:

 *

 * - .pointer - to retrieve current position of audio data transmission by frame count or XRUN state.

 * - .trigger - with SNDRV_PCM_TRIGGER_STOP at XRUN or DRAINING state.

 * - .get_time_info - to retrieve audio time stamp if needed.

 *

 * Even if more than one periods have elapsed since the last call, you have to call this only once.

/**

 * snd_pcm_period_elapsed() - update the status of runtime for the next period by acquiring lock of

 *			      PCM substream.

 * @substream: the instance of PCM substream.

 *

 * This function is mostly similar to ``snd_pcm_period_elapsed_under_stream_lock()`` except for

 * acquiring lock of PCM substream voluntarily.

 *

 * It's typically called by any type of IRQ handler when hardware IRQ occurs to notify event that

 * the batch of audio data frames as the same size as the period of buffer is already processed in

 * audio data transmission.

/*

 * Wait until avail_min data becomes available

 * Returns a negative error code if any error occurs during operation.

 * The available space is stored on availp.  When err = 0 and avail = 0

 * on the capture stream, it indicates the stream is in DRAINING state.

 use wait time from substream if available */

		/*

		 * We need to check if space became available already

		 * (and thus the wakeup happened already) first to close

		 * the race of space already having become available.

		 * This check must happen after been added to the waitqueue

		 * and having current state be INTERRUPTIBLE.

 indicate draining */

 calculate the target DMA-buffer position to be written/read */

 default copy_user ops for write; used for both interleaved and non- modes */

 default copy_kernel ops for write */

/* fill silence instead of copy data; called as a transfer helper

 * from __snd_pcm_lib_write() or directly from noninterleaved_copy() when

 * a NULL buffer is passed

 default copy_user ops for read; used for both interleaved and non- modes */

 default copy_kernel ops for read */

/* call transfer function with the converted pointers and sizes;

 * for interleaved mode, it's one shot for all samples

 convert to bytes */

/* call transfer function with the converted pointers and sizes for each

 * non-interleaved channel; when buffer is NULL, silencing instead of copying

	/* convert to bytes; note that it's not frames_to_bytes() here.

	 * in non-interleaved mode, we copy for each channel, thus

	 * each copy is n_samples bytes x channels = whole frames.

/* fill silence on the given buffer position;

 * called from snd_pcm_playback_silence()

 sanity-check for read/write methods */

/* update to the given appl_ptr and call ack callback if needed;

 * when an error is returned, take back to the original value

 the common loop for read/write data */

	/*

	 * If size < start_threshold, wait indefinitely. Another

	 * thread may start capture

 draining */

/*

 * standard channel mapping helpers

 default channel maps for multi-channel playbacks, up to 8 channels */

 alternative channel maps with CLFE <-> surround swapped for 6/8 channels */

/* get callback for channel map ctl element

 * stores the channel position firstly matching with the current channels

 no channels set */

/* tlv callback for channel map ctl element

 * expands the pre-defined channel maps in a form of TLV

/**

 * snd_pcm_add_chmap_ctls - create channel-mapping control elements

 * @pcm: the assigned PCM instance

 * @stream: stream direction

 * @chmap: channel map elements (for query)

 * @max_channels: the max number of channels for the stream

 * @private_value: the value passed to each kcontrol's private_value field

 * @info_ret: store struct snd_pcm_chmap instance if non-NULL

 *

 * Create channel-mapping control elements assigned to the given PCM stream(s).

 * Return: Zero if successful, or a negative error value.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *                   Takashi Iwai <tiwai@suse.de>

 * 

 *  Generic memory allocators

 a cast to gfp flag from the dev pointer; for CONTINUOUS and VMALLOC types */

/**

 * snd_dma_alloc_dir_pages - allocate the buffer area according to the given

 *	type and direction

 * @type: the DMA buffer type

 * @device: the device pointer

 * @dir: DMA direction

 * @size: the buffer size to allocate

 * @dmab: buffer allocation record to store the allocated data

 *

 * Calls the memory-allocator function for the corresponding

 * buffer type.

 *

 * Return: Zero if the buffer with the given size is allocated successfully,

 * otherwise a negative value on error.

/**

 * snd_dma_alloc_pages_fallback - allocate the buffer area according to the given type with fallback

 * @type: the DMA buffer type

 * @device: the device pointer

 * @size: the buffer size to allocate

 * @dmab: buffer allocation record to store the allocated data

 *

 * Calls the memory-allocator function for the corresponding

 * buffer type.  When no space is left, this function reduces the size and

 * tries to allocate again.  The size actually allocated is stored in

 * res_size argument.

 *

 * Return: Zero if the buffer with the given size is allocated successfully,

 * otherwise a negative value on error.

/**

 * snd_dma_free_pages - release the allocated buffer

 * @dmab: the buffer allocation record to release

 *

 * Releases the allocated buffer via snd_dma_alloc_pages().

 called by devres */

/**

 * snd_devm_alloc_dir_pages - allocate the buffer and manage with devres

 * @dev: the device pointer

 * @type: the DMA buffer type

 * @dir: DMA direction

 * @size: the buffer size to allocate

 *

 * Allocate buffer pages depending on the given type and manage using devres.

 * The pages will be released automatically at the device removal.

 *

 * Unlike snd_dma_alloc_pages(), this function requires the real device pointer,

 * hence it can't work with SNDRV_DMA_TYPE_CONTINUOUS or

 * SNDRV_DMA_TYPE_VMALLOC type.

 *

 * The function returns the snd_dma_buffer object at success, or NULL if failed.

/**

 * snd_dma_buffer_mmap - perform mmap of the given DMA buffer

 * @dmab: buffer allocation information

 * @area: VM area information

/**

 * snd_dma_buffer_sync - sync DMA buffer between CPU and device

 * @dmab: buffer allocation information

 * @mode: sync mode

 CONFIG_HAS_DMA */

/**

 * snd_sgbuf_get_addr - return the physical address at the corresponding offset

 * @dmab: buffer allocation information

 * @offset: offset in the ring buffer

/**

 * snd_sgbuf_get_page - return the physical page at the corresponding offset

 * @dmab: buffer allocation information

 * @offset: offset in the ring buffer

/**

 * snd_sgbuf_get_chunk_size - compute the max chunk size with continuous pages

 *	on sg-buffer

 * @dmab: buffer allocation information

 * @ofs: offset in the ring buffer

 * @size: the requested size

/*

 * Continuous pages allocator

/*

 * VMALLOC allocator

 the last byte address */

 check page continuity */

 ok, all on continuous pages */

/*

 * IRAM allocator

 Assign the pool into private_data field */

	/* Internal memory might have limited size and no enough space,

	 * so if we fail to malloc, try to fetch memory traditionally.

 CONFIG_GENERIC_ALLOCATOR */

 compound page lets parts be mapped */ \

 don't trigger OOM-killer */ \

 no stack trace print - this call is non-critical */

/*

 * Coherent device pages allocator

/*

 * Write-combined pages

 On x86, share the same ops as the standard dev ops */

 CONFIG_X86 */

 CONFIG_X86 */

/*

 * Non-contiguous pages allocator

 the last byte address */

 check page continuity */

 ok, all on continuous pages */

/*

 * Non-coherent pages allocator

 CONFIG_HAS_DMA */

/*

 * Entry points

 CONFIG_GENERIC_ALLOCATOR */

 CONFIG_HAS_DMA */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PCM DRM helpers

/**

 * snd_pcm_create_iec958_consumer_default - create default consumer format IEC958 channel status

 * @cs: channel status buffer, at least four bytes

 * @len: length of channel status buffer

 *

 * Create the consumer format channel status data in @cs of maximum size

 * @len. When relevant, the configuration-dependant bits will be set as

 * unspecified.

 *

 * Drivers should then call einter snd_pcm_fill_iec958_consumer() or

 * snd_pcm_fill_iec958_consumer_hw_params() to replace these unspecified

 * bits by their actual values.

 *

 * Drivers may wish to tweak the contents of the buffer after creation.

 *

 * Returns: length of buffer, or negative error code if something failed.

 Assume 24-bit width for 32-bit samples. */

/**

 * snd_pcm_fill_iec958_consumer - Fill consumer format IEC958 channel status

 * @runtime: pcm runtime structure with ->rate filled in

 * @cs: channel status buffer, at least four bytes

 * @len: length of channel status buffer

 *

 * Fill the unspecified bits in an IEC958 status bits array using the

 * parameters of the PCM runtime @runtime.

 *

 * Drivers may wish to tweak the contents of the buffer after its been

 * filled.

 *

 * Returns: length of buffer, or negative error code if something failed.

/**

 * snd_pcm_fill_iec958_consumer_hw_params - Fill consumer format IEC958 channel status

 * @params: the hw_params instance for extracting rate and sample format

 * @cs: channel status buffer, at least four bytes

 * @len: length of channel status buffer

 *

 * Fill the unspecified bits in an IEC958 status bits array using the

 * parameters of the PCM hardware parameters @params.

 *

 * Drivers may wish to tweak the contents of the buffer after its been

 * filled..

 *

 * Returns: length of buffer, or negative error code if something failed.

/**

 * snd_pcm_create_iec958_consumer - create consumer format IEC958 channel status

 * @runtime: pcm runtime structure with ->rate filled in

 * @cs: channel status buffer, at least four bytes

 * @len: length of channel status buffer

 *

 * Create the consumer format channel status data in @cs of maximum size

 * @len corresponding to the parameters of the PCM runtime @runtime.

 *

 * Drivers may wish to tweak the contents of the buffer after creation.

 *

 * Returns: length of buffer, or negative error code if something failed.

/**

 * snd_pcm_create_iec958_consumer_hw_params - create IEC958 channel status

 * @params: the hw_params instance for extracting rate and sample format

 * @cs: channel status buffer, at least four bytes

 * @len: length of channel status buffer

 *

 * Create the consumer format channel status data in @cs of maximum size

 * @len corresponding to the parameters of the PCM runtime @runtime.

 *

 * Drivers may wish to tweak the contents of the buffer after creation.

 *

 * Returns: length of buffer, or negative error code if something failed.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Digital Audio (PCM) abstract layer

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

/*

 *  Compatibility

/*

 *

 define group lock helpers */

/**

 * snd_pcm_stream_lock - Lock the PCM stream

 * @substream: PCM substream

 *

 * This locks the PCM stream's spinlock or mutex depending on the nonatomic

 * flag of the given substream.  This also takes the global link rw lock

 * (or rw sem), too, for avoiding the race with linked streams.

/**

 * snd_pcm_stream_unlock - Unlock the PCM stream

 * @substream: PCM substream

 *

 * This unlocks the PCM stream that has been locked via snd_pcm_stream_lock().

/**

 * snd_pcm_stream_lock_irq - Lock the PCM stream

 * @substream: PCM substream

 *

 * This locks the PCM stream like snd_pcm_stream_lock() and disables the local

 * IRQ (only when nonatomic is false).  In nonatomic case, this is identical

 * as snd_pcm_stream_lock().

/**

 * snd_pcm_stream_unlock_irq - Unlock the PCM stream

 * @substream: PCM substream

 *

 * This is a counter-part of snd_pcm_stream_lock_irq().

/**

 * snd_pcm_stream_unlock_irqrestore - Unlock the PCM stream

 * @substream: PCM substream

 * @flags: irq flags

 *

 * This is a counter-part of snd_pcm_stream_lock_irqsave().

 Run PCM ioctl ops */

 macro for simplified cast */

		/* we can't know the device, so just assume that the driver does

		 * everything right

 This parameter is not requested to change by a caller. */

 Set corresponding flag so that the caller gets it. */

 This parameter is not requested to change by a caller. */

 Set corresponding flag so that the caller gets it. */

	/*

	 * Each application of rule has own sequence number.

	 *

	 * Each member of 'rstamps' array represents the sequence number of

	 * recent application of corresponding rule.

	/*

	 * Each member of 'vstamps' array represents the sequence number of

	 * recent application of rule in which corresponding parameters were

	 * changed.

	 *

	 * In initial state, elements corresponding to parameters requested by

	 * a caller is 1. For unrequested parameters, corresponding members

	 * have 0 so that the parameters are never changed anymore.

 Due to the above design, actual sequence number starts at 2. */

 Apply all rules in order. */

		/*

		 * Check condition bits of this rule. When the rule has

		 * some condition bits, parameter without the bits is

		 * never processed. SNDRV_PCM_HW_PARAMS_NO_PERIOD_WAKEUP

		 * is an example of the condition bits.

		/*

		 * The 'deps' array includes maximum four dependencies

		 * to SNDRV_PCM_HW_PARAM_XXXs for this rule. The fifth

		 * member of this array is a sentinel and should be

		 * negative value.

		 *

		 * This rule should be processed in this time when dependent

		 * parameters were changed at former applications of the other

		 * rules.

		/*

		 * When the parameter is changed, notify it to the caller

		 * by corresponding returned bit, then preparing for next

		 * iteration.

 Iterate to evaluate all rules till no parameters are changed. */

 invalid */

 take 75% of period time as the deadline */

/**

 * snd_pcm_hw_params_choose - choose a configuration defined by @params

 * @pcm: PCM instance

 * @params: the hw_params instance

 *

 * Choose one configuration from configuration space defined by @params.

 * The configuration chosen is that obtained fixing in this order:

 * first access, first format, first subformat, min channels,

 * min rate, min period time, max buffer size, min tick time

 *

 * Return: Zero if successful, or a negative error code on failure.

 Keep old parameter to trace. */

 Trace the changed parameter. */

 Default sw params */

 clear the buffer for avoiding possible kernel info leaks */

	/* hardware might be unusable from this time,

	   so we force application to retry to set

 backwards compatible behavior */

 backwards compatibility, no report provided in COMPAT mode */

 get tstamp only in fallback mode and only if enabled */

	/*

	 * with extension, parameters are read/write,

	 * get audio_tstamp_data from user,

	 * ignore rest of status structure

	/*

	 * with extension, parameters are read/write,

	 * get audio_tstamp_data from user,

	 * ignore rest of status structure

/*

 *  this functions is core for handling of linked stream

 *  Note: the stream state might be changed also on failure

 *  Note2: call with calling stream lock + link lock

 failed stream */

 unlock all */

 unlock streams */

 end */

/*

 *  Note: call with stream lock

/*

 * Unref and unlock the group, but keep the stream lock;

 * when the group becomes empty and no longer referred, destroy itself

/*

 * Lock the group inside a stream lock and reference it;

 * return the locked group object, or NULL if not linked

 block freeing the group object */

 OK */

 re-lock for avoiding ABBA deadlock */

 check the group again; the above opens a small race window */

 OK */

 group changed, try again */

/*

 *  Note: call with stream lock

/*

 *  Note: don't use any locks before

/*

 Guarantee the group members won't change during non-atomic action */

/*

 * start callbacks

/**

 * snd_pcm_start - start all linked streams

 * @substream: the PCM substream instance

 *

 * Return: Zero if successful, or a negative error code.

 * The stream lock must be acquired before calling this function.

 take the stream lock and start the streams */

/*

 * stop callbacks

 unconditionally stop all substreams */

/**

 * snd_pcm_stop - try to stop all running streams in the substream group

 * @substream: the PCM substream instance

 * @state: PCM state after stopping the stream

 *

 * The state of each stream is then changed to the given state unconditionally.

 *

 * Return: Zero if successful, or a negative error code.

/**

 * snd_pcm_drain_done - stop the DMA only when the given stream is playback

 * @substream: the PCM substream

 *

 * After stopping, the state is changed to SETUP.

 * Unlike snd_pcm_stop(), this affects only the given stream.

 *

 * Return: Zero if successful, or a negative error code.

/**

 * snd_pcm_stop_xrun - stop the running streams as XRUN

 * @substream: the PCM substream instance

 *

 * This stops the given running substream (and all linked substreams) as XRUN.

 * Unlike snd_pcm_stop(), this function takes the substream lock by itself.

 *

 * Return: Zero if successful, or a negative error code.

/*

 * pause callbacks: pass boolean (to start pause or resume) as state argument

	/* some drivers might use hw_ptr to recover from the pause -

	/* The jiffies check in snd_pcm_update_hw_ptr*() is done by

	 * a delta between the current jiffies, this gives a large enough

	 * delta, effectively to skip the check once.

/*

 * Push/release the pause for all linked streams.

 suspend callback: state argument ignored */

 unresumable PCM state; return -EBUSY for skipping suspend */

 suspend unconditionally */

/*

 * snd_pcm_suspend - trigger SUSPEND to all linked streams

 * @substream: the PCM substream

 *

 * After this call, all streams are changed to SUSPENDED state.

 *

 * Return: Zero if successful, or a negative error code.

/**

 * snd_pcm_suspend_all - trigger SUSPEND to all substreams in the given pcm

 * @pcm: the PCM instance

 *

 * After this call, all streams are changed to SUSPENDED state.

 *

 * Return: Zero if successful (or @pcm is %NULL), or a negative error code.

 FIXME: the open/close code should lock this as well */

		/*

		 * Skip BE dai link PCM's that are internal and may

		 * not have their substream ops set.

 resume callbacks: state argument ignored */

 DMA not running previously? */

 CONFIG_PM */

/*

 * xrun ioctl

 *

 * Change the RUNNING stream(s) to XRUN state.

 already there */

/*

 * reset ioctl

 reset callbacks:  state argument ignored */

/*

 * prepare ioctl

 pass f_flags as state argument */

/**

 * snd_pcm_prepare - prepare the PCM substream to be triggerable

 * @substream: the PCM substream instance

 * @file: file to refer f_flags

 *

 * Return: Zero if successful, or a negative error code.

/*

 * drain ioctl

 drain init callbacks: state argument ignored */

 start playback stream if possible */

 stop running stream */

/*

 * Drain the stream(s).

 * When the substream is linked, sync until the draining of all playback streams

 * is finished.

 * After this call, all streams are supposed to be either SETUP or DRAINING

 * (capture only) state.

 resume pause */

 pre-start/stop - all running streams are changed to DRAINING state */

 in non-blocking, we don't wait in ioctl but let caller poll */

 find a substream to drain */

 all drained */

/*

 * drop ioctl

 *

 * Immediately put all linked substreams into SETUP state.

 resume pause */

 runtime->control->appl_ptr = runtime->status->hw_ptr; */

/*

 * PCM link handling

 assigned, don't free this one below */

 detach the last stream, too */

/*

 * hw configurator

 ignore invalid formats */

 ignore invalid formats */

 FIXME: remove */

 FIXME: this belong to lowlevel */

	/* automatically set EXPLICIT_SYNC flag in the managed mode whenever

	 * the DMA buffer requires it

 block until the device gets woken up as it may touch the hardware */

/* check and update PCM state; return 0 or a negative error

 * call this inside PCM lock

 increase the appl_ptr; returns the processed frames or a negative error */

 decrease the appl_ptr; returns the processed frames or zero for error */

	/* NOTE: we return zero for errors because PulseAudio gets depressed

	 * upon receiving an error from rewind ioctl and stops processing

	 * any longer.  Returning zero means that no rewind is done, so

	 * it's not absolutely wrong to answer like that.

 recalcuate the boundary within 32bit */

 FIXME: we should consider the boundary for the sync from app */

 just for compatibility */

/**

 * snd_pcm_kernel_ioctl - Execute PCM ioctl in the kernel-space

 * @substream: PCM substream

 * @cmd: IOCTL cmd

 * @arg: IOCTL argument

 *

 * The function is provided primarily for OSS layer and USB gadget drivers,

 * and it allows only the limited set of ioctls (hw_params, sw_params,

 * prepare, start, drain, drop, forward).

 provided only for OSS; capture-only and no value returned */

/*

 * mmap support

/*

 * Only on coherent architectures, we can mmap the status and the control records

 * for effcient data transfer.  On others, we have to use HWSYNC ioctl...

/*

 * mmap status record

/*

 * mmap control record

	/* If drivers require the explicit sync (typically for non-coherent

	 * pages), we have to disable the mmap of status and control data

	 * to enforce the control via SYNC_PTR ioctl.

	/* See pcm_control_mmap_allowed() below.

	 * Since older alsa-lib requires both status and control mmaps to be

	 * coupled, we have to disable the status mmap for old alsa-lib, too.

 see above */

	/* Disallow the control mmap when SYNC_APPLPTR flag is set;

	 * it enforces the user-space to fall back to snd_pcm_sync_ptr(),

	 * thus it effectively assures the manual update of appl_ptr.

 ! coherent mmap */

/*

 * don't support mmap for status and control records.

 coherent mmap */

/*

 * fault callback for mmapping a RAM page

/*

 * mmap the DMA buffer on RAM

/**

 * snd_pcm_lib_default_mmap - Default PCM data mmap function

 * @substream: PCM substream

 * @area: VMA

 *

 * This is the default mmap handler for PCM data.  When mmap pcm_ops is NULL,

 * this function is invoked implicitly.

 mmap with fault handler */

/*

 * mmap the DMA buffer on I/O memory area

/**

 * snd_pcm_lib_mmap_iomem - Default PCM data mmap function for I/O mem

 * @substream: PCM substream

 * @area: VMA

 *

 * When your hardware uses the iomapped pages as the hardware buffer and

 * wants to mmap it, pass this function as mmap pcm_ops.  Note that this

 * is supposed to work only on limited architectures.

 SNDRV_PCM_INFO_MMAP */

/*

 * mmap DMA buffer

/*

 * ioctl32 compat

/*

 *  To be removed helpers to keep binary compatibility

 CONFIG_SND_SUPPORT_OLD_API */

/*

 *  Register section

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Advanced Linux Sound Architecture

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

/* this one holds the actual max. card number currently available.

 * as default, it's identical with cards_limit option.  when more

 * modules are loaded manually, this limit number increases, too.

/**

 * snd_request_card - try to load the card module

 * @card: the card number

 *

 * Tries to load the module "snd-card-X" for the given card number

 * via request_module.  Returns immediately if already loaded.

 modular kernel */

/**

 * snd_lookup_minor_data - get user data of a registered device

 * @minor: the minor number

 * @type: device type (SNDRV_DEVICE_TYPE_XXX)

 *

 * Checks that a minor device with the specified type is registered, and returns

 * its user data pointer.

 *

 * This function increments the reference counter of the card instance

 * if an associated instance with the given minor number and type is found.

 * The caller must call snd_card_unref() appropriately later.

 *

 * Return: The user data pointer if the specified device is found. %NULL

 * otherwise.

 release lock temporarily */

 /dev/aloadC? */

 /dev/aloadSEQ */

 reacuire lock */

 !CONFIG_MODULES */

 CONFIG_MODULES */

 static minors for module auto loading */

 skip static minors still used for module auto loading */

/**

 * snd_register_device - Register the ALSA device file for the card

 * @type: the device type, SNDRV_DEVICE_TYPE_XXX

 * @card: the card instance

 * @dev: the device index

 * @f_ops: the file operations

 * @private_data: user pointer for f_ops->open()

 * @device: the device to register

 *

 * Registers an ALSA device file for the given card.

 * The operators have to be set in reg parameter.

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_unregister_device - unregister the device on the given card

 * @dev: the device instance

 *

 * Unregisters the device file already registered via

 * snd_register_device().

 *

 * Return: Zero if successful, or a negative error code on failure.

/*

 *  INFO PART

 freed in error path */

 CONFIG_SND_PROC_FS */

/*

 *  INIT PART

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2012, Analog Devices Inc.

 *	Author: Lars-Peter Clausen <lars@metafoo.de>

 *

 *  Based on:

 *	imx-pcm-dma-mx2.c, Copyright 2009 Sascha Hauer <s.hauer@pengutronix.de>

 *	mxs-pcm.c, Copyright (C) 2011 Freescale Semiconductor, Inc.

 *	ep93xx-pcm.c, Copyright (C) 2006 Lennert Buytenhek <buytenh@wantstofly.org>

 *		      Copyright (C) 2006 Applied Data Systems

/**

 * snd_hwparams_to_dma_slave_config - Convert hw_params to dma_slave_config

 * @substream: PCM substream

 * @params: hw_params

 * @slave_config: DMA slave config

 *

 * This function can be used to initialize a dma_slave_config from a substream

 * and hw_params in a dmaengine based PCM driver implementation.

/**

 * snd_dmaengine_pcm_set_config_from_dai_data() - Initializes a dma slave config

 *  using DAI DMA data.

 * @substream: PCM substream

 * @dma_data: DAI DMA data

 * @slave_config: DMA slave configuration

 *

 * Initializes the {dst,src}_addr, {dst,src}_maxburst, {dst,src}_addr_width and

 * slave_id fields of the DMA slave config from the same fields of the DAI DMA

 * data struct. The src and dst fields will be initialized depending on the

 * direction of the substream. If the substream is a playback stream the dst

 * fields will be initialized, if it is a capture stream the src fields will be

 * initialized. The {dst,src}_addr_width field will only be initialized if the

 * SND_DMAENGINE_PCM_DAI_FLAG_PACK flag is set or if the addr_width field of

 * the DAI DMA data struct is not equal to DMA_SLAVE_BUSWIDTH_UNDEFINED. If

 * both conditions are met the latter takes priority.

/**

 * snd_dmaengine_pcm_trigger - dmaengine based PCM trigger implementation

 * @substream: PCM substream

 * @cmd: Trigger command

 *

 * Returns 0 on success, a negative error code otherwise.

 *

 * This function can be used as the PCM trigger callback for dmaengine based PCM

 * driver implementations.

/**

 * snd_dmaengine_pcm_pointer_no_residue - dmaengine based PCM pointer implementation

 * @substream: PCM substream

 *

 * This function is deprecated and should not be used by new drivers, as its

 * results may be unreliable.

/**

 * snd_dmaengine_pcm_pointer - dmaengine based PCM pointer implementation

 * @substream: PCM substream

 *

 * This function can be used as the PCM pointer callback for dmaengine based PCM

 * driver implementations.

/**

 * snd_dmaengine_pcm_request_channel - Request channel for the dmaengine PCM

 * @filter_fn: Filter function used to request the DMA channel

 * @filter_data: Data passed to the DMA filter function

 *

 * Returns NULL or the requested DMA channel.

 *

 * This function request a DMA channel for usage with dmaengine PCM.

/**

 * snd_dmaengine_pcm_open - Open a dmaengine based PCM substream

 * @substream: PCM substream

 * @chan: DMA channel to use for data transfers

 *

 * Returns 0 on success, a negative error code otherwise.

 *

 * The function should usually be called from the pcm open callback. Note that

 * this function will use private_data field of the substream's runtime. So it

 * is not available to your pcm driver implementation.

/**

 * snd_dmaengine_pcm_open_request_chan - Open a dmaengine based PCM substream and request channel

 * @substream: PCM substream

 * @filter_fn: Filter function used to request the DMA channel

 * @filter_data: Data passed to the DMA filter function

 *

 * Returns 0 on success, a negative error code otherwise.

 *

 * This function will request a DMA channel using the passed filter function and

 * data. The function should usually be called from the pcm open callback. Note

 * that this function will use private_data field of the substream's runtime. So

 * it is not available to your pcm driver implementation.

/**

 * snd_dmaengine_pcm_close - Close a dmaengine based PCM substream

 * @substream: PCM substream

/**

 * snd_dmaengine_pcm_close_release_chan - Close a dmaengine based PCM

 *					  substream and release channel

 * @substream: PCM substream

 *

 * Releases the DMA channel associated with the PCM substream.

/**

 * snd_dmaengine_pcm_refine_runtime_hwparams - Refine runtime hw params

 * @substream: PCM substream

 * @dma_data: DAI DMA data

 * @hw: PCM hw params

 * @chan: DMA channel to use for data transfers

 *

 * Returns 0 on success, a negative error code otherwise.

 *

 * This function will query DMA capability, then refine the pcm hardware

 * parameters.

	/*

	 * If SND_DMAENGINE_PCM_DAI_FLAG_PACK is set keep

	 * hw.formats set to 0, meaning no restrictions are in place.

	 * In this case it's the responsibility of the DAI driver to

	 * provide the supported format information.

		/*

		 * Prepare formats mask for valid/allowed sample types. If the

		 * dma does not have support for the given physical word size,

		 * it needs to be masked out so user space can not use the

		 * format which produces corrupted audio.

		 * In case the dma driver does not implement the slave_caps the

		 * default assumption is that it supports 1, 2 and 4 bytes

		 * widths.

			/*

			 * Enable only samples with DMA supported physical

			 * widths

 Unsupported types */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ALSA timer back-end using hrtimer

 * Copyright (C) 2008 Takashi Iwai

 10^9 in sec */

 fast path */

 calculate the drift */

 just to be sure */

 skip start/stop */

/*

 * entry functions

 Create a new timer and set up the fields */

 lower the limit */

 remember this */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Misc and compatibility things

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 CONFIG_SND_DEBUG */

 strip the leading path if the given path is absolute */

 Ignore KERN_CONT. We print filename:line for each piece. */

/**

 * snd_pci_quirk_lookup_id - look up a PCI SSID quirk list

 * @vendor: PCI SSV id

 * @device: PCI SSD id

 * @list: quirk list, terminated by a null entry

 *

 * Look through the given quirk list and finds a matching entry

 * with the same PCI SSID.  When subdevice is 0, all subdevice

 * values may match.

 *

 * Returns the matched entry pointer, or NULL if nothing matched.

/**

 * snd_pci_quirk_lookup - look up a PCI SSID quirk list

 * @pci: pci_dev handle

 * @list: quirk list, terminated by a null entry

 *

 * Look through the given quirk list and finds a matching entry

 * with the same PCI SSID.  When subdevice is 0, all subdevice

 * values may match.

 *

 * Returns the matched entry pointer, or NULL if nothing matched.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Advanced Linux Sound Architecture

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

/* NOTE: This function increments the refcount of the associated card like

 * snd_lookup_minor_data(); the caller must call snd_card_unref() appropriately

 ignore silently */

/*

 *  INFO PART

 freed in error path */

 CONFIG_SND_PROC_FS */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  LED state routines for driver control interface

 *  Copyright (c) 2021 by Jaroslav Kysela <perex@perex.cz>

/*

 * A note for callers:

 *   The two static variables info and value are protected using snd_ctl_led_mutex.

 the card may not be registered (active) at this point */

 noop */ break;

 the register callback is already called with held card->controls_rwsem */

/*

 * sysfs

/*

 * These types of input strings are accepted:

 *

 *   unsigned integer - numid (equivaled to numid=UINT)

 *   string - basic mixer name (equivalent to iface=MIXER,name=STR)

 *   numid=UINT

 *   [iface=MIXER,][device=UINT,][subdevice=UINT,]name=STR[,index=UINT]

/*

 * Control layer registration

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Virtual master and follower controls

 *

 *  Copyright (c) 2008 by Takashi Iwai <tiwai@suse.de>

/*

 * a subset of information returned via ctl info callback

 value type */

 item count */

 min, max values */

/*

 * link master - this contains a list of follower controls that are

 * identical types, i.e. info returns the same value type and value

 * ranges, but may have different number of counts.

 *

 * The master control is so far only mono volume/switch for simplicity.

 * The same value will be applied to all followers.

 the master value */

/*

 * link follower - this contains a follower control element

 *

 * It fakes the control callbacks with additional attenuation by the

 * master control.  A follower may have either one or two channels.

 current values */

 original kcontrol pointer */

 the copy of original control entry */

 get the follower ctl info and save the initial values */

 already initialized */

 initialize master volume */

 already initialized */

 always mono */

 set full volume as default (= no attenuation) */

 max master volume is supposed to be 0 dB */

/*

 * ctl callbacks for followers

 FIXME: this assumes that the max volume is 0 dB */

/*

 * Add a follower control to the group with the given master control

 *

 * All followers must be the same type (returning the same information

 * via info callback).  The function doesn't check it, so it's your

 * responsibility.

 *

 * Also, some additional limitations:

 * - at most two channels

 * - logarithmic volume control (dB level), no linear volume

 * - master can only attenuate the volume, no gain

 override callbacks */

/*

 * ctl callbacks for master controls

 free all follower links and retore the original follower kctls */

 keep the current linked-list */

/**

 * snd_ctl_make_virtual_master - Create a virtual master control

 * @name: name string of the control element to create

 * @tlv: optional TLV int array for dB information

 *

 * Creates a virtual master control with the given name string.

 *

 * After creating a vmaster element, you can add the follower controls

 * via snd_ctl_add_follower() or snd_ctl_add_follower_uncached().

 *

 * The optional argument @tlv can be used to specify the TLV information

 * for dB scale of the master control.  It should be a single element

 * with #SNDRV_CTL_TLVT_DB_SCALE, #SNDRV_CTL_TLV_DB_MINMAX or

 * #SNDRV_CTL_TLVT_DB_MINMAX_MUTE type, and should be the max 0dB.

 *

 * Return: The created control element, or %NULL for errors (ENOMEM).

 override some callbacks */

 additional (constant) TLV read */

/**

 * snd_ctl_add_vmaster_hook - Add a hook to a vmaster control

 * @kcontrol: vmaster kctl element

 * @hook: the hook function

 * @private_data: the private_data pointer to be saved

 *

 * Adds the given hook to the vmaster control element so that it's called

 * at each time when the value is changed.

 *

 * Return: Zero.

/**

 * snd_ctl_sync_vmaster - Sync the vmaster followers and hook

 * @kcontrol: vmaster kctl element

 * @hook_only: sync only the hook

 *

 * Forcibly call the put callback of each follower and call the hook function

 * to synchronize with the current value of the given vmaster element.

 * NOP when NULL is passed to @kcontrol.

/**

 * snd_ctl_apply_vmaster_followers - Apply function to each vmaster follower

 * @kctl: vmaster kctl element

 * @func: function to apply

 * @arg: optional function argument

 *

 * Apply the function @func to each follower kctl of the given vmaster kctl.

 * Returns 0 if successful, or a negative error code.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Timers abstract layer

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 internal flags */

 enhanced read with timestamps and events */

 trigger tstamp */

 Timestamp - last update */

 current period resolution in ns */

 counter of master tick lost */

 count of read queue overruns */

 used queue size */

 reserved */

 Timestamp - last update */

 current period resolution in ns */

 counter of master tick lost */

 count of read queue overruns */

 used queue size */

 reserved */

 list of timers */

 list of slave instances */

 lock for slave active lists */

/*

 * create a timer instance with the given owner string.

/*

 * find a timer instance from the given timer id

 move the slave if it belongs to the master; return 1 if match */

/*

 * look for a master instance matching with the slave id of the given slave.

 * when found, relink the open_link of the slave.

 *

 * call this with register_mutex down.

 FIXME: it's really dumb to look up all entries.. */

 match found or error */

/*

 * look for slave instances matching with the slave id of the given master.

 * when found, relink the open_link of slaves.

 *

 * call this with register_mutex down.

 check all pending slaves */

/*

 * open a timer instance

 * when opening a master, the slave id must be here given.

 open a slave instance */

 open a master instance */

 take a card refcount for safe disconnection */

 put_device() is called after unlock for avoiding deadlock */

/*

 * close a timer instance

 * call this with register_mutex down.

 force to stop the timer */

 wait, until the active callback is finished */

 remove slave links */

 slave doesn't need to release timer resources below */

 release a card refcount for safe disconnection */

/*

 * close a timer instance

 put_device() is called after unlock for avoiding deadlock */

 convert to SNDRV_TIMER_EVENT_MXXX */

 start/continue a master timer */

 delayed start */

 start/continue a slave timer */

 delayed start */

 stop/pause a master timer */

 stop/pause a slave timer */

/*

 *  start the timer instance

/*

 * stop the timer instance.

 *

 * do not call this from the timer callback!

/*

 * start again..  the tick is kept.

 timer can continue only after pause */

/*

 * pause.. remember the ticks left

/*

 * reschedule the timer

 *

 * start pending instances and check the scheduling ticks.

 * when the scheduling ticks is changed set CHANGE flag to reprogram the timer.

 call callbacks in timer ack list */

 remove from ack_list and make empty */

 clear pending instances from ack list */

/*

 * timer work

 *

/*

 * timer interrupt

 *

 * ticks_left is usually equal to timer->sticks.

 *

 remember the current resolution */

	/* loop for all active instances

	 * Here we cannot use list_for_each_entry because the active_list of a

	 * processed instance is relinked to done_list_head before the callback

	 * is called.

 not expired */

 restart timer */

 now process all fast callbacks */

 do we have any slow callbacks? */

/*



 default limit per timer */

 conflicts.. */

 wake up pending sleepers */

/*

 * exported functions for global timers

/*

 *  System timer

/*

 *  Info interface

 !CONFIG_SND_PROC_FS */

/*

 *  USER SPACE interface

 first item */

 Don't allow resolution less than 1ms */

 start timer instead of continue if it's not used before */

 too late */

 unregister the system timer */

/*

 *  ENTRY functions

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  compress_core.c - compress offload core

 *

 *  Copyright (C) 2011 Intel Corporation

 *  Authors:	Vinod Koul <vinod.koul@linux.intel.com>

 *		Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/* struct snd_compr_codec_caps overflows the ioctl bit size for some

 * architectures, so we need to disable the relevant ioctls.

/* TODO:

 * - add substream support for multiple devices in case of

 *	SND_DYNAMIC_MINORS is not used

 * - Multiple node representation

 *	driver should be able to register multiple nodes

/*

 * a note on stream states used:

 * we use following states in the compressed core

 * SNDRV_PCM_STATE_OPEN: When stream has been opened.

 * SNDRV_PCM_STATE_SETUP: When stream has been initialized. This is done by

 *	calling SNDRV_COMPRESS_SET_PARAMS. Running streams will come to this

 *	state at stop by calling SNDRV_COMPRESS_STOP, or at end of drain.

 * SNDRV_PCM_STATE_PREPARED: When a stream has been written to (for

 *	playback only). User after setting up stream writes the data buffer

 *	before starting the stream.

 * SNDRV_PCM_STATE_RUNNING: When stream has been started and is

 *	decoding/encoding and rendering/capturing data.

 * SNDRV_PCM_STATE_DRAINING: When stream is draining current data. This is done

 *	by calling SNDRV_COMPRESS_DRAIN.

 * SNDRV_PCM_STATE_PAUSED: When stream is paused. This is done by calling

 *	SNDRV_COMPRESS_PAUSE. It can be stopped or resumed by calling

 *	SNDRV_COMPRESS_STOP or SNDRV_COMPRESS_RESUME respectively.

 Still need to return avail even if tstamp can't be filled in */

 64-bit Modulus */

 if DSP cares, let it know data has been written */

 write is allowed when stream is running or has been steup */

 calculate how much we can write to buffer */

	/* while initiating the stream, write should be called before START

	/* read is allowed when stream is running, paused, draining and setup

	 * (yes setup is state which we transition to after stop, so if user

	 * wants to read data after stop we allow that)

 calculate how much we can read from buffer */

 check if we have at least one fragment to fill */

		/* stream has been woken up after drain is complete

		 * draining done so set stream state to stopped

 !COMPR_CODEC_CAPS_OVERFLOW */

 It's a newly allocated buffer. Release it now. */

 revisit this with snd_pcm_preallocate_xxx */

		/* if copy is defined the driver will be required to copy

		 * the data from core

 first let's check the buffer parameter's */

 now codec parameters */

		/*

		 * we should allow parameter change only when stream has been

		 * opened not in other cases

	/*

	* we should allow parameter change only when stream has been

	* opened not in other cases

 clear flags and stop any drain wait */

/*

 * snd_compr_stop_error: Report a fatal error on a stream

 * @stream: pointer to stream

 * @state: state to transition the stream to

 *

 * Stop the stream and set its state.

 *

 * Should be called with compressed device lock held.

	/*

	 * We are called with lock held. So drop the lock while we wait for

	 * drain complete notification from the driver

	 *

	 * It is expected that driver will notify the drain completion and then

	 * stream will be moved to SETUP state, even if draining resulted in an

	 * error. We can trigger next track after this.

	/* we wait for drain to complete here, drain can return when

	 * interruption occurred, wait returned error or success.

	 * For the first two cases we don't do anything different here and

	 * return after waking up

 only a running stream can transition to next track */

 next track doesn't have any meaning for capture streams */

	/* you can signal next track if this is intended to be a gapless stream

	 * and current track metadata is set

 partial drain doesn't have any meaning for capture streams */

 stream can be drained only when next track has been signalled */

 support of 32bit userspace on 64bit platforms */

 register compressed device */

/*

 * snd_compress_new: create new compress device

 * @card: sound card pointer

 * @device: device number

 * @dirn: device direction, should be of type enum snd_compr_direction

 * @compr: compress device pointer

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Digital Audio (PCM) abstract layer

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

/*

 * try to allocate as the large pages as possible.

 * stores the resultant memory size in *res_size.

 *

 * the minimum size is snd_minimum_buffer.  it should be power of 2.

 tell error */

/**

 * snd_pcm_lib_preallocate_free - release the preallocated buffer of the specified substream.

 * @substream: the pcm substream instance

 *

 * Releases the pre-allocated buffer of the given substream.

/**

 * snd_pcm_lib_preallocate_free_for_all - release all pre-allocated buffers on the pcm

 * @pcm: the pcm instance

 *

 * Releases all the pre-allocated buffers on the given pcm.

/*

 * read callback for prealloc proc file

 *

 * prints the current allocated size in kB.

/*

 * read callback for prealloc_max proc file

 *

 * prints the maximum allowed size in kB.

/*

 * write callback for prealloc proc file

 *

 * accepts the preallocation size in kB.

 !CONFIG_SND_VERBOSE_PROCFS */

 CONFIG_SND_VERBOSE_PROCFS */

/*

 * pre-allocate the buffer and create a proc file for the substream

 no fallback, only also inform -ENOMEM */

/**

 * snd_pcm_lib_preallocate_pages - pre-allocation for the given DMA type

 * @substream: the pcm substream instance

 * @type: DMA type (SNDRV_DMA_TYPE_*)

 * @data: DMA type dependent data

 * @size: the requested pre-allocation size in bytes

 * @max: the max. allowed pre-allocation size

 *

 * Do pre-allocation for the given DMA buffer type.

/**

 * snd_pcm_lib_preallocate_pages_for_all - pre-allocation for continuous memory type (all substreams)

 * @pcm: the pcm instance

 * @type: DMA type (SNDRV_DMA_TYPE_*)

 * @data: DMA type dependent data

 * @size: the requested pre-allocation size in bytes

 * @max: the max. allowed pre-allocation size

 *

 * Do pre-allocation to all substreams of the given pcm for the

 * specified DMA type.

/**

 * snd_pcm_set_managed_buffer - set up buffer management for a substream

 * @substream: the pcm substream instance

 * @type: DMA type (SNDRV_DMA_TYPE_*)

 * @data: DMA type dependent data

 * @size: the requested pre-allocation size in bytes

 * @max: the max. allowed pre-allocation size

 *

 * Do pre-allocation for the given DMA buffer type, and set the managed

 * buffer allocation mode to the given substream.

 * In this mode, PCM core will allocate a buffer automatically before PCM

 * hw_params ops call, and release the buffer after PCM hw_free ops call

 * as well, so that the driver doesn't need to invoke the allocation and

 * the release explicitly in its callback.

 * When a buffer is actually allocated before the PCM hw_params call, it

 * turns on the runtime buffer_changed flag for drivers changing their h/w

 * parameters accordingly.

 *

 * When @size is non-zero and @max is zero, this tries to allocate for only

 * the exact buffer size without fallback, and may return -ENOMEM.

 * Otherwise, the function tries to allocate smaller chunks if the allocation

 * fails.  This is the behavior of snd_pcm_set_fixed_buffer().

 *

 * When both @size and @max are zero, the function only sets up the buffer

 * for later dynamic allocations. It's used typically for buffers with

 * SNDRV_DMA_TYPE_VMALLOC type.

 *

 * Upon successful buffer allocation and setup, the function returns 0.

/**

 * snd_pcm_set_managed_buffer_all - set up buffer management for all substreams

 *	for all substreams

 * @pcm: the pcm instance

 * @type: DMA type (SNDRV_DMA_TYPE_*)

 * @data: DMA type dependent data

 * @size: the requested pre-allocation size in bytes

 * @max: the max. allowed pre-allocation size

 *

 * Do pre-allocation to all substreams of the given pcm for the specified DMA

 * type and size, and set the managed_buffer_alloc flag to each substream.

/**

 * snd_pcm_lib_malloc_pages - allocate the DMA buffer

 * @substream: the substream to allocate the DMA buffer to

 * @size: the requested buffer size in bytes

 *

 * Allocates the DMA buffer on the BUS type given earlier to

 * snd_pcm_lib_preallocate_xxx_pages().

 *

 * Return: 1 if the buffer is changed, 0 if not changed, or a negative

 * code on failure.

		/* perphaps, we might free the large DMA memory region

		   to save some space here, but the actual solution

 ok, do not change */

 use the pre-allocated buffer */

 dma_max=0 means the fixed size preallocation */

 area was changed */

/**

 * snd_pcm_lib_free_pages - release the allocated DMA buffer.

 * @substream: the substream to release the DMA buffer

 *

 * Releases the DMA buffer allocated via snd_pcm_lib_malloc_pages().

 *

 * Return: Zero if successful, or a negative error code on failure.

 it's a newly allocated buffer.  release it now. */

 already large enough */

/**

 * snd_pcm_lib_free_vmalloc_buffer - free vmalloc buffer

 * @substream: the substream with a buffer allocated by

 *	snd_pcm_lib_alloc_vmalloc_buffer()

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_pcm_lib_get_vmalloc_page - map vmalloc buffer offset to page struct

 * @substream: the substream with a buffer allocated by

 *	snd_pcm_lib_alloc_vmalloc_buffer()

 * @offset: offset in the buffer

 *

 * This function is to be used as the page callback in the PCM ops.

 *

 * Return: The page struct, or %NULL on failure.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Abstract layer for MIDI v1.0 stream

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 CONFIG_SND_OSSEMUL */

 Timestamp */

 available bytes */

 count of overruns since last status (in bytes) */

 reserved for future use */

 alignment */

 Timestamp */

 available bytes */

 count of overruns since last status (in bytes) */

 reserved for future use */

 buffer refcount management: call with runtime->lock held */

 we need wait a while to make sure that Tx FIFOs are empty */

/* look for an available substream for the given stream direction;

 * if a specific subdevice is given, try to assign it

 open and do ref-counting for the given substream */

 called from sound/core/seq/seq_midi.c */

 invalid combination */

 OSS emul? */

				/* sending single active sensing message

				 * to shut the device up

 called from sound/core/seq/seq_midi.c */

 next device is -1 */

/**

 * snd_rawmidi_receive - receive the input data from the device

 * @substream: the rawmidi substream

 * @buffer: the buffer pointer

 * @count: the data size to read

 *

 * Reads the data from the internal buffer.

 *

 * Return: The size of read data, or a negative error code on failure.

 special case, faster code */

 update runtime->appl_ptr before unlocking for userbuf */

userbuf*/, buf, count);

kernelbuf*/,

/**

 * snd_rawmidi_transmit_empty - check whether the output buffer is empty

 * @substream: the rawmidi substream

 *

 * Return: 1 if the internal output buffer is empty, 0 if not.

/**

 * __snd_rawmidi_transmit_peek - copy data from the internal buffer

 * @substream: the rawmidi substream

 * @buffer: the buffer pointer

 * @count: data size to transfer

 *

 * This is a variant of snd_rawmidi_transmit_peek() without spinlock.

 warning: lowlevel layer MUST trigger down the hardware */

 special case, faster code */

/**

 * snd_rawmidi_transmit_peek - copy data from the internal buffer

 * @substream: the rawmidi substream

 * @buffer: the buffer pointer

 * @count: data size to transfer

 *

 * Copies data from the internal output buffer to the given buffer.

 *

 * Call this in the interrupt handler when the midi output is ready,

 * and call snd_rawmidi_transmit_ack() after the transmission is

 * finished.

 *

 * Return: The size of copied data, or a negative error code on failure.

/**

 * __snd_rawmidi_transmit_ack - acknowledge the transmission

 * @substream: the rawmidi substream

 * @count: the transferred count

 *

 * This is a variant of __snd_rawmidi_transmit_ack() without spinlock.

/**

 * snd_rawmidi_transmit_ack - acknowledge the transmission

 * @substream: the rawmidi substream

 * @count: the transferred count

 *

 * Advances the hardware pointer for the internal output buffer with

 * the given size and updates the condition.

 * Call after the transmission is finished.

 *

 * Return: The advanced size if successful, or a negative error code on failure.

/**

 * snd_rawmidi_transmit - copy from the buffer to the device

 * @substream: the rawmidi substream

 * @buffer: the buffer pointer

 * @count: the data size to transfer

 *

 * Copies data from the buffer to the device and advances the pointer.

 *

 * Return: The copied size if successful, or a negative error code on failure.

/**

 * snd_rawmidi_proceed - Discard the all pending bytes and proceed

 * @substream: rawmidi substream

 *

 * Return: the number of discarded bytes

 update runtime->appl_ptr before unlocking for userbuf */

 we cannot put an atomic message to our buffer */

/*

/*

/*

 *  Register functions

/**

 * snd_rawmidi_new - create a rawmidi instance

 * @card: the card instance

 * @id: the id string

 * @device: the device index

 * @output_count: the number of output streams

 * @input_count: the number of input streams

 * @rrawmidi: the pointer to store the new rawmidi instance

 *

 * Creates a new rawmidi instance.

 * Use snd_rawmidi_set_ops() to set the operators to the new instance.

 *

 * Return: Zero if successful, or a negative error code on failure.

 CONFIG_SND_OSSEMUL */

 own registration mechanism */

 CONFIG_SND_OSSEMUL */

/**

 * snd_rawmidi_set_ops - set the rawmidi operators

 * @rmidi: the rawmidi instance

 * @stream: the stream direction, SNDRV_RAWMIDI_STREAM_XXX

 * @ops: the operator table

 *

 * Sets the rawmidi operators for the given stream direction.

/*

 *  ENTRY functions

 check device map table */

 CONFIG_SND_OSSEMUL */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Scatter-Gather buffer

 *

 *  Copyright (c) by Takashi Iwai <tiwai@suse.de>

 allocated byte size */

 allocated pages */

 allocated table size */

 address table */

 page table (for vmap/vunmap) */

 table entries are align to 32 */

 continuous pages */

 allocate pages */

 don't be too eager to take a huge chunk */

 mark head */

 free the table */

 check page continuity */

 ok, all on continuous pages */

 continue with the default mmap handler */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Initialization routines

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 monitor files for graceful shutdown (hotplug) */

 still need to shutdown */

 link of monitor files */

 locked for registering/using */

/* return non-zero if the given index is reserved for the given

 * module via slots option

 negative match */

	/* compare module name strings

	 * hyphens are handled as equivalent with underscore

 MODULE */

/* return an empty slot number (>= 0) found in the given bitmask @mask.

 * @mask == -1 == 0xffffffff means: take any free slot up to 32

 * when no slot is available, return the original @mask as is.

 found */

 unchanged */

/* the default release callback set in snd_device_initialize() below;

 * this is just NOP for now, as almost all jobs are already done in

 * dev_free callback of snd_device chain instead.

/**

 * snd_device_initialize - Initialize struct device for sound devices

 * @dev: device to initialize

 * @card: card to assign, optional

/**

 *  snd_card_new - create and initialize a soundcard structure

 *  @parent: the parent device object

 *  @idx: card index (address) [0 ... (SNDRV_CARDS-1)]

 *  @xid: card identification (ASCII string)

 *  @module: top level module for locking

 *  @extra_size: allocate this extra size after the main soundcard structure

 *  @card_ret: the pointer to store the created card instance

 *

 *  The function allocates snd_card instance via kzalloc with the given

 *  space for the driver to use freely.  The allocated struct is stored

 *  in the given card_ret pointer.

 *

 *  Return: Zero if successful or a negative error code.

/**

 * snd_devm_card_new - managed snd_card object creation

 * @parent: the parent device object

 * @idx: card index (address) [0 ... (SNDRV_CARDS-1)]

 * @xid: card identification (ASCII string)

 * @module: top level module for locking

 * @extra_size: allocate this extra size after the main soundcard structure

 * @card_ret: the pointer to store the created card instance

 *

 * This function works like snd_card_new() but manages the allocated resource

 * via devres, i.e. you don't need to free explicitly.

 *

 * When a snd_card object is created with this function and registered via

 * snd_card_register(), the very first devres action to call snd_card_free()

 * is added automatically.  In that way, the resource disconnection is assured

 * at first, then released in the expected order.

 first check the matching module-name slot */

 if not matched, assign an empty slot */

 invalid */

 lock it */

 increase the limit */

 the control interface cannot be accessed from the user space until */

 snd_cards_bitmask and snd_cards are set with snd_card_register */

/**

 * snd_card_ref - Get the card object from the index

 * @idx: the card index

 *

 * Returns a card object corresponding to the given index or NULL if not found.

 * Release the object via snd_card_unref().

 return non-zero if a card is already locked */

/**

 *  snd_card_disconnect - disconnect all APIs from the file-operations (user space)

 *  @card: soundcard structure

 *

 *  Disconnects all APIs from the file-operations (user space).

 *

 *  Return: Zero, otherwise a negative error code.

 *

 *  Note: The current implementation replaces all active file->f_op with special

 *        dummy file operations (they do nothing except release).

 replace file->f_op with special dummy operations */

 it's critical part, use endless loop */

 we have no room to fail */

 notify all connected devices about disconnection */

 at this point, they cannot respond to any calls except release() */

 notify all devices that we are disconnected */

 disable fops (user space) operations for ALSA API */

/**

 * snd_card_disconnect_sync - disconnect card and wait until files get closed

 * @card: card object to disconnect

 *

 * This calls snd_card_disconnect() for disconnecting all belonging components

 * and waits until all pending files get closed.

 * It assures that all accesses from user-space finished so that the driver

 * can release its resources gracefully.

 Not fatal error */

/**

 * snd_card_free_when_closed - Disconnect the card, free it later eventually

 * @card: soundcard structure

 *

 * Unlike snd_card_free(), this function doesn't try to release the card

 * resource immediately, but tries to disconnect at first.  When the card

 * is still in use, the function returns before freeing the resources.

 * The card resources will be freed when the refcount gets to zero.

/**

 * snd_card_free - frees given soundcard structure

 * @card: soundcard structure

 *

 * This function releases the soundcard structure and the all assigned

 * devices automatically.  That is, you don't have to release the devices

 * by yourself.

 *

 * This function waits until the all resources are properly released.

 *

 * Return: Zero. Frees all associated devices and frees the control

 * interface associated to given soundcard.

	/* The call of snd_card_free() is allowed from various code paths;

	 * a manual call from the driver and the call via devres_free, and

	 * we need to avoid double-free. Moreover, the release via devres

	 * may call snd_card_free() twice due to its nature, we need to have

	 * the check here at the beginning.

 wait, until all devices are ready for the free operation */

 retrieve the last word of shortname or longname */

 return true if the given id string doesn't conflict any other card ids */

 copy to card->id only with valid letters from nid */

/* Set card->id from the given string

 * If the string conflicts with other ids, add a suffix to make it unique.

	/* use "Default" for obviously invalid strings

	 * ("card" conflicts with proc directories)

 "_012" */

 OK */

 Add _XYZ suffix */

 fallback to the default id */

 last resort... */

/**

 *  snd_card_set_id - set card identification name

 *  @card: soundcard structure

 *  @nid: new identification string

 *

 *  This function sets the card identification and checks for name

 *  collisions.

 check if user specified own card->id */

/**

 * snd_card_add_dev_attr - Append a new sysfs attribute group to card

 * @card: card instance

 * @group: attribute group to append

 loop for (arraysize-1) here to keep NULL at the last entry */

/**

 *  snd_card_register - register the soundcard

 *  @card: soundcard structure

 *

 *  This function registers all the devices assigned to the soundcard.

 *  Until calling this, the ALSA control interface is blocked from the

 *  external accesses.  Thus, you should call this function at the end

 *  of the initialization of the card.

 *

 *  Return: Zero otherwise a negative error code if the registration failed.

 already registered */

 register pending info */

 make a unique id name from the given string */

 create an id from either shortname or longname */

 freed in error path */

 freed in error path */

 CONFIG_SND_PROC_FS */

/**

 *  snd_component_add - add a component string

 *  @card: soundcard structure

 *  @component: the component id string

 *

 *  This function adds the component id string to the supported list.

 *  The component can be referred from the alsa-lib.

 *

 *  Return: Zero otherwise a negative error code.

 already there */

/**

 *  snd_card_file_add - add the file to the file list of the card

 *  @card: soundcard structure

 *  @file: file pointer

 *

 *  This function adds the file to the file linked-list of the card.

 *  This linked-list is used to keep tracking the connection state,

 *  and to avoid the release of busy resources by hotplug.

 *

 *  Return: zero or a negative error code.

/**

 *  snd_card_file_remove - remove the file from the file list

 *  @card: soundcard structure

 *  @file: file pointer

 *

 *  This function removes the file formerly added to the card via

 *  snd_card_file_add() function.

 *  If all files are removed and snd_card_free_when_closed() was

 *  called beforehand, it processes the pending release of

 *  resources.

 *

 *  Return: Zero or a negative error code.

/**

 * snd_power_ref_and_wait - wait until the card gets powered up

 * @card: soundcard structure

 *

 * Take the power_ref reference count of the given card, and

 * wait until the card gets powered up to SNDRV_CTL_POWER_D0 state.

 * The refcount is down again while sleeping until power-up, hence this

 * function can be used for syncing the floating control ops accesses,

 * typically around calling control ops.

 *

 * The caller needs to pull down the refcount via snd_power_unref() later

 * no matter whether the error is returned from this function or not.

 *

 * Return: Zero if successful, or a negative error code.

 fastpath */

/**

 * snd_power_wait - wait until the card gets powered up (old form)

 * @card: soundcard structure

 *

 * Wait until the card gets powered up to SNDRV_CTL_POWER_D0 state.

 *

 * Return: Zero if successful, or a negative error code.

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Digital Audio (PCM) abstract layer

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

/**

 * snd_pcm_format_name - Return a name string for the given PCM format

 * @format: PCM format

 CONFIG_SND_PCM_XRUN_DEBUG */

 !CONFIG_SND_VERBOSE_PROCFS */

 CONFIG_SND_VERBOSE_PROCFS */

/*

 * PM callbacks: we need to deal only with suspend here, as the resume is

 * triggered either from user-space or the driver's resume callback

 device type for PCM -- basically only for passing PM callbacks */

/**

 * snd_pcm_new_stream - create a new PCM stream

 * @pcm: the pcm instance

 * @stream: the stream direction, SNDRV_PCM_STREAM_XXX

 * @substream_count: the number of substreams

 *

 * Creates a new stream for the pcm.

 * The corresponding stream on the pcm must have been empty before

 * calling this, i.e. zero must be given to the argument of

 * snd_pcm_new().

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_pcm_new - create a new PCM instance

 * @card: the card instance

 * @id: the id string

 * @device: the device index (zero based)

 * @playback_count: the number of substreams for playback

 * @capture_count: the number of substreams for capture

 * @rpcm: the pointer to store the new pcm instance

 *

 * Creates a new PCM instance.

 *

 * The pcm operators have to be set afterwards to the new instance

 * via snd_pcm_set_ops().

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_pcm_new_internal - create a new internal PCM instance

 * @card: the card instance

 * @id: the id string

 * @device: the device index (zero based - shared with normal PCMs)

 * @playback_count: the number of substreams for playback

 * @capture_count: the number of substreams for capture

 * @rpcm: the pointer to store the new pcm instance

 *

 * Creates a new internal PCM instance with no userspace device or procfs

 * entries. This is used by ASoC Back End PCMs in order to create a PCM that

 * will only be used internally by kernel drivers. i.e. it cannot be opened

 * by userspace. It provides existing ASoC components drivers with a substream

 * and access to any private data.

 *

 * The pcm operators have to be set afterwards to the new instance

 * via snd_pcm_set_ops().

 *

 * Return: Zero if successful, or a negative error code on failure.

 free all proc files under the stream */

 must be unique */

 Avoid concurrent access to runtime via PCM timer interface */

 register pcm */

 to be sure, set the state unconditionally */

/**

 * snd_pcm_notify - Add/remove the notify list

 * @notify: PCM notify list

 * @nfree: 0 = register, 1 = unregister

 *

 * This adds the given notifier to the global list so that the callback is

 * called for each registered PCM devices.  This exists only for PCM OSS

 * emulation, so far.

 CONFIG_SND_PCM_OSS */

/*

 *  Info interface

 !CONFIG_SND_PROC_FS */

 CONFIG_SND_PROC_FS */

/*

 *  ENTRY functions

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  ISA DMA support functions

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

/*

 * Defining following add some delay. Maybe this helps for some broken

 * ISA DMA controllers.

/**

 * snd_dma_program - program an ISA DMA transfer

 * @dma: the dma number

 * @addr: the physical address of the buffer

 * @size: the DMA transfer size

 * @mode: the DMA transfer mode, DMA_MODE_XXX

 *

 * Programs an ISA DMA transfer for the given buffer.

/**

 * snd_dma_disable - stop the ISA DMA transfer

 * @dma: the dma number

 *

 * Stops the ISA DMA transfer.

/**

 * snd_dma_pointer - return the current pointer to DMA transfer buffer in bytes

 * @dma: the dma number

 * @size: the dma transfer size

 *

 * Return: The current pointer in DMA transfer buffer in bytes.

	/*

	 * HACK - read the counter again and choose higher value in order to

	 * avoid reading during counter lower byte roll over if the

	 * isa_dma_bridge_buggy is set.

/**

 * snd_devm_request_dma - the managed version of request_dma()

 * @dev: the device pointer

 * @dma: the dma number

 * @name: the name string of the requester

 *

 * Returns zero on success, or a negative error code.

 * The requested DMA will be automatically released at unbinding via devres.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Hardware dependent layer

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 check whether the dsp was already loaded */

/*



/**

 * snd_hwdep_new - create a new hwdep instance

 * @card: the card instance

 * @id: the id string

 * @device: the device index (zero-based)

 * @rhwdep: the pointer to store the new hwdep instance

 *

 * Creates a new hwdep instance with the given index on the card.

 * The callbacks (hwdep->ops) must be set on the returned instance

 * after this call manually by the caller.

 *

 * Return: Zero if successful, or a negative error code on failure.

/*

 *  Info interface

 !CONFIG_SND_PROC_FS */

 CONFIG_SND_PROC_FS */

/*

 *  ENTRY functions

/*

 *  PCM Interface - misc routines

 *  Copyright (c) 1998 by Jaroslav Kysela <perex@perex.cz>

 *

 *

 *   This library is free software; you can redistribute it and/or modify

 *   it under the terms of the GNU Library General Public License as

 *   published by the Free Software Foundation; either version 2 of

 *   the License, or (at your option) any later version.

 *

 *   This program is distributed in the hope that it will be useful,

 *   but WITHOUT ANY WARRANTY; without even the implied warranty of

 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *   GNU Library General Public License for more details.

 *

 *   You should have received a copy of the GNU Library General Public

 *   License along with this library; if not, write to the Free Software

 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

 *

/* NOTE: "signed" prefix must be given below since the default char is

 *       unsigned on some architectures!

 bit width */

 physical bit width */

 0 = big-endian, 1 = little-endian, -1 = others */

 0 = unsigned, 1 = signed, -1 = others */

 silence data to fill */

 we do lots of calculations on snd_pcm_format_t; shut up sparse */

 FIXME: the following two formats are not defined properly yet */

 FIXME: the following format is not defined properly yet */

/**

 * snd_pcm_format_signed - Check the PCM format is signed linear

 * @format: the format to check

 *

 * Return: 1 if the given PCM format is signed linear, 0 if unsigned

 * linear, and a negative error code for non-linear formats.

/**

 * snd_pcm_format_unsigned - Check the PCM format is unsigned linear

 * @format: the format to check

 *

 * Return: 1 if the given PCM format is unsigned linear, 0 if signed

 * linear, and a negative error code for non-linear formats.

/**

 * snd_pcm_format_linear - Check the PCM format is linear

 * @format: the format to check

 *

 * Return: 1 if the given PCM format is linear, 0 if not.

/**

 * snd_pcm_format_little_endian - Check the PCM format is little-endian

 * @format: the format to check

 *

 * Return: 1 if the given PCM format is little-endian, 0 if

 * big-endian, or a negative error code if endian not specified.

/**

 * snd_pcm_format_big_endian - Check the PCM format is big-endian

 * @format: the format to check

 *

 * Return: 1 if the given PCM format is big-endian, 0 if

 * little-endian, or a negative error code if endian not specified.

/**

 * snd_pcm_format_width - return the bit-width of the format

 * @format: the format to check

 *

 * Return: The bit-width of the format, or a negative error code

 * if unknown format.

/**

 * snd_pcm_format_physical_width - return the physical bit-width of the format

 * @format: the format to check

 *

 * Return: The physical bit-width of the format, or a negative error code

 * if unknown format.

/**

 * snd_pcm_format_size - return the byte size of samples on the given format

 * @format: the format to check

 * @samples: sampling rate

 *

 * Return: The byte size of the given samples for the format, or a

 * negative error code if unknown format.

/**

 * snd_pcm_format_silence_64 - return the silent data in 8 bytes array

 * @format: the format to check

 *

 * Return: The format pattern to fill or %NULL if error.

/**

 * snd_pcm_format_set_silence - set the silence data on the buffer

 * @format: the PCM format

 * @data: the buffer pointer

 * @samples: the number of samples to set silence

 *

 * Sets the silence data on the buffer for the given samples.

 *

 * Return: Zero if successful, or a negative error code on failure.

 physical width */

 signed or 1 byte data */

 non-zero samples, fill using a loop */

 a bit optimization for constant width */

/**

 * snd_pcm_hw_limit_rates - determine rate_min/rate_max fields

 * @hw: the pcm hw instance

 *

 * Determines the rate_min and rate_max fields from the rates bits of

 * the given hw.

 *

 * Return: Zero if successful.

/**

 * snd_pcm_rate_to_rate_bit - converts sample rate to SNDRV_PCM_RATE_xxx bit

 * @rate: the sample rate to convert

 *

 * Return: The SNDRV_PCM_RATE_xxx flag that corresponds to the given rate, or

 * SNDRV_PCM_RATE_KNOT for an unknown rate.

/**

 * snd_pcm_rate_bit_to_rate - converts SNDRV_PCM_RATE_xxx bit to sample rate

 * @rate_bit: the rate bit to convert

 *

 * Return: The sample rate that corresponds to the given SNDRV_PCM_RATE_xxx flag

 * or 0 for an unknown rate bit.

/**

 * snd_pcm_rate_mask_intersect - computes the intersection between two rate masks

 * @rates_a: The first rate mask

 * @rates_b: The second rate mask

 *

 * This function computes the rates that are supported by both rate masks passed

 * to the function. It will take care of the special handling of

 * SNDRV_PCM_RATE_CONTINUOUS and SNDRV_PCM_RATE_KNOT.

 *

 * Return: A rate mask containing the rates that are supported by both rates_a

 * and rates_b.

/**

 * snd_pcm_rate_range_to_bits - converts rate range to SNDRV_PCM_RATE_xxx bit

 * @rate_min: the minimum sample rate

 * @rate_max: the maximum sample rate

 *

 * This function has an implicit assumption: the rates in the given range have

 * only the pre-defined rates like 44100 or 16000.

 *

 * Return: The SNDRV_PCM_RATE_xxx flag that corresponds to the given rate range,

 * or SNDRV_PCM_RATE_KNOT for an unknown range.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   32bit -> 64bit ioctl wrapper for raw MIDI API

 *   Copyright (c) by Takashi Iwai <tiwai@suse.de>

 This file included from rawmidi.c */

 avoid bit-field */

 alignment */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Helper functions for jack-detection kcontrols

 *

 * Copyright (c) 2011 Takashi Iwai <tiwai@suse.de>

 name is filled later */

 reset numid; otherwise snd_ctl_find_id() hits this again */

 remove redundant " Jack" from src_name */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   32bit -> 64bit ioctl wrapper for hwdep API

 *   Copyright (c) by Takashi Iwai <tiwai@suse.de>

 This file is included from hwdep.c */

 pointer */

 don't set packed attribute here */;

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Device management routines

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

/**

 * snd_device_new - create an ALSA device component

 * @card: the card instance

 * @type: the device type, SNDRV_DEV_XXX

 * @device_data: the data pointer of this device

 * @ops: the operator table

 *

 * Creates a new device component for the given data pointer.

 * The device will be assigned to the card and managed together

 * by the card.

 *

 * The data pointer plays a role as the identifier, too, so the

 * pointer address must be unique and unchanged.

 *

 * Return: Zero if successful, or a negative error code on failure.

 insert the entry in an incrementally sorted list */

 unlink */

/**

 * snd_device_disconnect - disconnect the device

 * @card: the card instance

 * @device_data: the data pointer to disconnect

 *

 * Turns the device into the disconnection state, invoking

 * dev_disconnect callback, if the device was already registered.

 *

 * Usually called from snd_card_disconnect().

 *

 * Return: Zero if successful, or a negative error code on failure or if the

 * device not found.

/**

 * snd_device_free - release the device from the card

 * @card: the card instance

 * @device_data: the data pointer to release

 *

 * Removes the device from the list on the card and invokes the

 * callbacks, dev_disconnect and dev_free, corresponding to the state.

 * Then release the device.

/**

 * snd_device_register - register the device

 * @card: the card instance

 * @device_data: the data pointer to register

 *

 * Registers the device which was already created via

 * snd_device_new().  Usually this is called from snd_card_register(),

 * but it can be called later if any new devices are created after

 * invocation of snd_card_register().

 *

 * Return: Zero if successful, or a negative error code on failure or if the

 * device not found.

/*

 * register all the devices on the card.

 * called from init.c

/*

 * disconnect all the devices on the card.

 * called from init.c

/*

 * release all the devices on the card.

 * called from init.c

 exception: free ctl and lowlevel stuff later */

 free all */

/**

 * snd_device_get_state - Get the current state of the given device

 * @card: the card instance

 * @device_data: the data pointer to release

 *

 * Returns the current state of the given device object.  For the valid

 * device, either @SNDRV_DEV_BUILD, @SNDRV_DEV_REGISTERED or

 * @SNDRV_DEV_DISCONNECTED is returned.

 * Or for a non-existing device, -1 is returned as an error.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Jack abstraction layer

 *

 *  Copyright 2008 Wolfson Microelectronics

 list of controls belong to the same jack */

 only masked status bits are reported via kctl */

 pointer to struct snd_jack */

 allow to inject plug event via debugfs */

 jack_kctl debugfs root */

 CONFIG_SND_JACK_INPUT_DEV */

	/* If the input device is registered with the input subsystem

 CONFIG_SND_JACK_INPUT_DEV */

 Default to the sound card device. */

 Add capabilities for any keys that are enabled */

 CONFIG_SND_JACK_INPUT_DEV */

 CONFIG_SND_JACK_INPUT_DEV */

 the bit definition is aligned with snd_jack_types in jack.h */

 the recommended buffer size is 256 */

 Don't create injection interface for Phantom jacks */

 replace the chars which are not suitable for folder's name with _ */

 CONFIG_SND_JACK_INJECTION_DEBUG */

 CONFIG_SND_JACK_INJECTION_DEBUG */

/**

 * snd_jack_add_new_kctl - Create a new snd_jack_kctl and add it to jack

 * @jack:  the jack instance which the kctl will attaching to

 * @name:  the name for the snd_kcontrol object

 * @mask:  a bitmask of enum snd_jack_type values that can be detected

 *         by this snd_jack_kctl object.

 *

 * Creates a new snd_kcontrol object and adds it to the jack kctl_list.

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_jack_new - Create a new jack

 * @card:  the card instance

 * @id:    an identifying string for this jack

 * @type:  a bitmask of enum snd_jack_type values that can be detected by

 *         this jack

 * @jjack: Used to provide the allocated jack object to the caller.

 * @initial_kctl: if true, create a kcontrol and add it to the jack list.

 * @phantom_jack: Don't create a input device for phantom jacks.

 *

 * Creates a new jack object.

 *

 * Return: Zero if successful, or a negative error code on failure.

 * On success @jjack will be initialised.

 CONFIG_SND_JACK_INPUT_DEV */

 don't creat input device for phantom jack */

 CONFIG_SND_JACK_INPUT_DEV */

/**

 * snd_jack_set_parent - Set the parent device for a jack

 *

 * @jack:   The jack to configure

 * @parent: The device to set as parent for the jack.

 *

 * Set the parent for the jack devices in the device tree.  This

 * function is only valid prior to registration of the jack.  If no

 * parent is configured then the parent device will be the sound card.

/**

 * snd_jack_set_key - Set a key mapping on a jack

 *

 * @jack:    The jack to configure

 * @type:    Jack report type for this key

 * @keytype: Input layer key type to be reported

 *

 * Map a SND_JACK_BTN_* button type to an input layer key, allowing

 * reporting of keys on accessories via the jack abstraction.  If no

 * mapping is provided but keys are enabled in the jack type then

 * BTN_n numeric buttons will be reported.

 *

 * If jacks are not reporting via the input API this call will have no

 * effect.

 *

 * Note that this is intended to be use by simple devices with small

 * numbers of keys that can be reported.  It is also possible to

 * access the input device directly - devices with complex input

 * capabilities on accessories should consider doing this rather than

 * using this abstraction.

 *

 * This function may only be called prior to registration of the jack.

 *

 * Return: Zero if successful, or a negative error code on failure.

 CONFIG_SND_JACK_INPUT_DEV */

/**

 * snd_jack_report - Report the current status of a jack

 *

 * @jack:   The jack to report status for

 * @status: The current status of the jack

 CONFIG_SND_JACK_INPUT_DEV */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Information interface for ALSA driver

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

/*

 *  OSS compatible part

 freed in error path */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * compat ioctls for control API

 *

 *   Copyright (c) by Takashi Iwai <tiwai@suse.de>

 this file included from control.c */

 don't set packed attribute here */;

 offset, space, used, count */

 pids */

 copy the result */

/*

 * control element info

 * it uses union, so the things are not easy..

 the size of struct is same

 copy id */

	/* we need to copy the item index.

	 * hope this doesn't break anything..

 restore info to 32bit */

 id, type, access, count */

 read / write */

 bit-field causes misalignment */

 x32 has a different alignment for 64bit values from ia32 */

 bit-field causes misalignment */

 CONFIG_X86_X32 */

 get the value type and count of the control */

 restore the value to 32bit */

 CONFIG_X86_X32 */

 add or replace a user control */

 id, type, access, count */ \

 CONFIG_X86_X32 */

 CONFIG_X86_X32 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   32bit -> 64bit ioctl wrapper for timer API

 *   Copyright (c) by Takashi Iwai <tiwai@suse.de>

 This file included from timer.c */

/*

 * ILP32/LP64 has different size for 'long' type. Additionally, the size

 * of storage alignment differs depending on architectures. Here, '__packed'

 * qualifier is used so that the size of this structure is multiple of 4 and

 * it fits to any architectures with 32 bit storage alignment.

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  PCM DRM helpers

			/*

			 * Exclude SADs which do not include the

			 * requested number of channels.

 Convert the rate interval to a mask */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  ALSA sequencer device management

 *  Copyright (c) 1999 by Takashi Iwai <tiwai@suse.de>

 *

 *----------------------------------------------------------------

 *

 * This device handler separates the card driver module from sequencer

 * stuff (sequencer core, synth drivers, etc), so that user can avoid

 * to spend unnecessary resources e.g. if he needs only listening to

 * MP3s.

 *

 * The card (or lowlevel) driver creates a sequencer device entry

 * via snd_seq_device_new().  This is an entry pointer to communicate

 * with the sequencer device "driver", which is involved with the

 * actual part to communicate with the sequencer core.

 * Each sequencer device entry has an id string and the corresponding

 * driver with the same id is loaded when required.  For example,

 * lowlevel codes to access emu8000 chip on sbawe card are included in

 * emu8000-synth module.  To activate this module, the hardware

 * resources like i/o port are passed via snd_seq_device argument.

/*

 * bus definition

/*

 * proc interface -- just for compatibility

/*

 * load all registered drivers (called from seq_clientmgr.c)

 flag to block auto-loading */

 blocked as default */

 avoid reentrance */

 initial autoload only when snd-seq is a module */

/*

 * device management

/*

 * register a sequencer device

 * card = card info

 * device = device number (if any)

 * id = id of driver

 * result = return pointer (NULL allowed if unnecessary)

 set up device info */

 add this device to the list */

/*

 * driver registration

/*

 * module part

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Routines for driver control interface

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 Max allocation size for user controls.

 list of all ioctls */

/**

 * snd_ctl_notify - Send notification to user-space for a control change

 * @card: the card to send notification

 * @mask: the event mask, SNDRV_CTL_EVENT_*

 * @id: the ctl element id to send notification

 *

 * This function adds an event record with the given id and mask, appends

 * to the list and wakes up the user-space for notification.  This can be

 * called in the atomic context.

/**

 * snd_ctl_notify_one - Send notification to user-space for a control change

 * @card: the card to send notification

 * @mask: the event mask, SNDRV_CTL_EVENT_*

 * @kctl: the pointer with the control instance

 * @ioff: the additional offset to the control index

 *

 * This function calls snd_ctl_notify() and does additional jobs

 * like LED state changes.

/**

 * snd_ctl_new - create a new control instance with some elements

 * @kctl: the pointer to store new control instance

 * @count: the number of elements in this control

 * @access: the default access flags for elements in this control

 * @file: given when locking these elements

 *

 * Allocates a memory object for a new control instance. The instance has

 * elements as many as the given number (@count). Each element has given

 * access permissions (@access). Each element is locked when @file is given.

 *

 * Return: 0 on success, error code on failure

/**

 * snd_ctl_new1 - create a control instance from the template

 * @ncontrol: the initialization record

 * @private_data: the private data to set

 *

 * Allocates a new struct snd_kcontrol instance and initialize from the given

 * template.  When the access field of ncontrol is 0, it's assumed as

 * READWRITE access. When the count field is 0, it's assumes as one.

 *

 * Return: The pointer of the newly generated instance, or %NULL on failure.

 The 'numid' member is decided when calling snd_ctl_add(). */

/**

 * snd_ctl_free_one - release the control instance

 * @kcontrol: the control instance

 *

 * Releases the control instance created via snd_ctl_new()

 * or snd_ctl_new1().

 * Don't call this after the control was added to the card.

 Make sure that the ids assigned to the control do not wrap around */

 this situation is very unlikely */

 add/replace a new kcontrol object; call with card->controls_rwsem locked */

/**

 * snd_ctl_add - add the control instance to the card

 * @card: the card instance

 * @kcontrol: the control instance to add

 *

 * Adds the control instance created via snd_ctl_new() or

 * snd_ctl_new1() to the given card. Assigns also an unique

 * numid used for fast search.

 *

 * It frees automatically the control which cannot be added.

 *

 * Return: Zero if successful, or a negative error code on failure.

 *

/**

 * snd_ctl_replace - replace the control instance of the card

 * @card: the card instance

 * @kcontrol: the control instance to replace

 * @add_on_replace: add the control if not already added

 *

 * Replaces the given control.  If the given control does not exist

 * and the add_on_replace flag is set, the control is added.  If the

 * control exists, it is destroyed first.

 *

 * It frees automatically the control which cannot be added or replaced.

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_ctl_remove - remove the control from the card and release it

 * @card: the card instance

 * @kcontrol: the control instance to remove

 *

 * Removes the control from the card and then releases the instance.

 * You don't need to call snd_ctl_free_one(). You must be in

 * the write lock - down_write(&card->controls_rwsem).

 *

 * Return: 0 if successful, or a negative error code on failure.

/**

 * snd_ctl_remove_id - remove the control of the given id and release it

 * @card: the card instance

 * @id: the control id to remove

 *

 * Finds the control instance with the given id, removes it from the

 * card list and releases it.

 *

 * Return: 0 if successful, or a negative error code on failure.

/**

 * snd_ctl_remove_user_ctl - remove and release the unlocked user control

 * @file: active control handle

 * @id: the control id to remove

 *

 * Finds the control instance with the given id, removes it from the

 * card list and releases it.

 *

 * Return: 0 if successful, or a negative error code on failure.

/**

 * snd_ctl_activate_id - activate/inactivate the control of the given id

 * @card: the card instance

 * @id: the control id to activate/inactivate

 * @active: non-zero to activate

 *

 * Finds the control instance with the given id, and activate or

 * inactivate the control together with notification, if changed.

 * The given ID data is filled with full information.

 *

 * Return: 0 if unchanged, 1 if changed, or a negative error code on failure.

/**

 * snd_ctl_rename_id - replace the id of a control on the card

 * @card: the card instance

 * @src_id: the old id

 * @dst_id: the new id

 *

 * Finds the control with the old id from the card, and replaces the

 * id with the new one.

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_ctl_find_numid - find the control instance with the given number-id

 * @card: the card instance

 * @numid: the number-id to search

 *

 * Finds the control instance with the given number-id from the card.

 *

 * The caller must down card->controls_rwsem before calling this function

 * (if the race condition can happen).

 *

 * Return: The pointer of the instance if found, or %NULL if not.

 *

/**

 * snd_ctl_find_id - find the control instance with the given id

 * @card: the card instance

 * @id: the id to search

 *

 * Finds the control instance with the given id from the card.

 *

 * The caller must down card->controls_rwsem before calling this function

 * (if the race condition can happen).

 *

 * Return: The pointer of the instance if found, or %NULL if not.

 *

 Check whether the given kctl info is valid */

 The capacity of struct snd_ctl_elem_value.value.*/

 fill the remaining snd_ctl_elem_value data with the given pattern */

 check whether the given integer ctl value is valid */

 perform sanity checks to the given snd_ctl_elem_value object */

 check whether the remaining area kept untouched */

 clear the checked area */

 drop internal access flags */

 info is needed only for validation */

 element data */

 size of element data in bytes */

 TLV data */

 TLV data size */

 private data (like strings for enumerated type) */

 check whether the addition (in bytes) of user ctl element may overflow the limit.

 called in controls_rwsem write lock */

 sane value */

 does the TLV size change cause overflow?

 Now TLV data is available. */

 decremented at private_free.

 called in controls_rwsem write lock */

 check that there are enough valid names */

 increment the allocation size; decremented again at private_free.

 decrement the allocation size.

 Delete a control to replace them if needed. */

 Check the number of elements for this userspace control. */

 Arrange access permissions if needed. */

 In initial state, nothing is available as TLV container. */

	/*

	 * Check information and calculate the size of data specific to

	 * this userspace control.

 pass NULL to card for suppressing error messages */

 user-space control doesn't allow zero-size data */

	/*

	 * Keep memory object for this userspace control. After passing this

	 * code block, the instance should be freed by snd_ctl_free_one().

	 *

	 * Note that these elements in this control are locked.

 increment the allocated size; decremented again at private_free.

 Set private data for this userspace control. */

 Set callback functions. */

 This function manage to free the instance on failure. */

	/*

	 * Here we cannot fill any field for the number of elements added by

	 * this operation because there're no specific fields. The usage of

	 * 'owner' field for this purpose may cause any bugs to userspace

	 * applications because the field originally means PID of a process

	 * which locks the element.

 Check support of the request for this element. */

 Write and command operations are not allowed for locked element. */

 In design of control core, numerical ID starts at 1. */

 At least, container should include type and length fields.  */

 Calculate index of the element in this set. */

 Not supported. */

/*

 * register the device-specific control-ioctls.

 * called from each device manager like pcm.c, hwdep.c, etc.

/**

 * snd_ctl_register_ioctl - register the device-specific control-ioctls

 * @fcn: ioctl callback function

 *

 * called from each device manager like pcm.c, hwdep.c, etc.

/**

 * snd_ctl_register_ioctl_compat - register the device-specific 32bit compat

 * control-ioctls

 * @fcn: ioctl callback function

/*

 * de-register the device-specific control-ioctls.

/**

 * snd_ctl_unregister_ioctl - de-register the device-specific control-ioctls

 * @fcn: ioctl callback function to unregister

/**

 * snd_ctl_unregister_ioctl_compat - de-register the device-specific compat

 * 32bit control-ioctls

 * @fcn: ioctl callback function to unregister

/* return the preferred subdevice number if already assigned;

 * otherwise return -1

/*

 * ioctl32 compat

/*

 * control layers (audio LED etc.)

/**

 * snd_ctl_request_layer - request to use the layer

 * @module_name: Name of the kernel module (NULL == build-in)

 *

 * Return an error code when the module cannot be loaded.

/**

 * snd_ctl_register_layer - register new control layer

 * @lops: operation structure

 *

 * The new layer can track all control elements and do additional

 * operations on top (like audio LED handling).

/**

 * snd_ctl_disconnect_layer - disconnect control layer

 * @lops: operation structure

 *

 * It is expected that the information about tracked cards

 * is freed before this call (the disconnect callback is

 * not called here).

/*

 *  INIT PART

/*

 * registration of the control device

/*

 * disconnection of the control device

/*

 * free all controls

/*

 * create control core:

 * called from init.c

/*

 * Frequently used control callbacks/helpers

/**

 * snd_ctl_boolean_mono_info - Helper function for a standard boolean info

 * callback with a mono channel

 * @kcontrol: the kcontrol instance

 * @uinfo: info to store

 *

 * This is a function that can be used as info callback for a standard

 * boolean control with a single mono channel.

/**

 * snd_ctl_boolean_stereo_info - Helper function for a standard boolean info

 * callback with stereo two channels

 * @kcontrol: the kcontrol instance

 * @uinfo: info to store

 *

 * This is a function that can be used as info callback for a standard

 * boolean control with stereo two channels.

/**

 * snd_ctl_enum_info - fills the info structure for an enumerated control

 * @info: the structure to be filled

 * @channels: the number of the control's channels; often one

 * @items: the number of control values; also the size of @names

 * @names: an array containing the names of all control values

 *

 * Sets all required fields in @info to their appropriate values.

 * If the control's accessibility is not the default (readable and writable),

 * the caller has to fill @info->access.

 *

 * Return: Zero.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Digital Audio (PCM) abstract layer

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

/*

 *  Timer functions

/*

 *  Init functions

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Information interface for ALSA driver

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

/*



/*

 * file ops for binary proc files

/*

 * file ops for text proc files

 don't handle too large text inputs */

 XXX hack! */

/*

 * create a card proc file

 * called from init.c

/*

 * register the card proc file

 * called from init.c

 * can be called multiple times for reinitialization

/*

 * called on card->id change

/*

 * de-register the card proc file

 * called from init.c

/*

 * release the card proc file resources

 * called from init.c

/**

 * snd_info_get_line - read one line from the procfs buffer

 * @buffer: the procfs buffer

 * @line: the buffer to store

 * @len: the max. buffer size

 *

 * Reads one line from the buffer and stores the string.

 *

 * Return: Zero if successful, or 1 if error or EOF.

/**

 * snd_info_get_str - parse a string token

 * @dest: the buffer to store the string token

 * @src: the original string

 * @len: the max. length of token - 1

 *

 * Parses the original string and copy a token to the given

 * string buffer.

 *

 * Return: The updated pointer of the original string so that

 * it can be used for the next call.

/*

 * snd_info_create_entry - create an info entry

 * @name: the proc file name

 * @parent: the parent directory

 *

 * Creates an info entry with the given file name and initializes as

 * the default state.

 *

 * Usually called from other functions such as

 * snd_info_create_card_entry().

 *

 * Return: The pointer of the new instance, or %NULL on failure.

/**

 * snd_info_create_module_entry - create an info entry for the given module

 * @module: the module pointer

 * @name: the file name

 * @parent: the parent directory

 *

 * Creates a new info entry and assigns it to the given module.

 *

 * Return: The pointer of the new instance, or %NULL on failure.

/**

 * snd_info_create_card_entry - create an info entry for the given card

 * @card: the card instance

 * @name: the file name

 * @parent: the parent directory

 *

 * Creates a new info entry and assigns it to the given card.

 *

 * Return: The pointer of the new instance, or %NULL on failure.

/**

 * snd_info_free_entry - release the info entry

 * @entry: the info entry

 *

 * Releases the info entry.

 free all children at first */

/**

 * snd_info_register - register the info entry

 * @entry: the info entry

 *

 * Registers the proc info entry.

 * The all children entries are registered recursively.

 *

 * Return: Zero if successful, or a negative error code on failure.

/**

 * snd_card_rw_proc_new - Create a read/write text proc file entry for the card

 * @card: the card instance

 * @name: the file name

 * @private_data: the arbitrary private data

 * @read: the read callback

 * @write: the write callback, NULL for read-only

 *

 * This proc file entry will be registered via snd_card_register() call, and

 * it will be removed automatically at the card removal, too.

/*



 freed in error path */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 * 

 *  Misc memory accessors

/**

 * copy_to_user_fromio - copy data from mmio-space to user-space

 * @dst: the destination pointer on user-space

 * @src: the source pointer on mmio

 * @count: the data size to copy in bytes

 *

 * Copies the data from mmio-space to user-space.

 *

 * Return: Zero if successful, or non-zero on failure.

/**

 * copy_from_user_toio - copy data from user-space to mmio-space

 * @dst: the destination pointer on mmio-space

 * @src: the source pointer on user-space

 * @count: the data size to copy in bytes

 *

 * Copies the data from user-space to mmio-space.

 *

 * Return: Zero if successful, or non-zero on failure.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   32bit -> 64bit ioctl wrapper for PCM API

 *   Copyright (c) by Takashi Iwai <tiwai@suse.de>

 This file included from pcm_native.c */

 this must be identical */

 reserved masks */

 reserved intervals */

	/*

	 * Check silent_size parameter.  Since we have 64bit boundary,

	 * silence_size must be compared with the 32bit boundary.

 X32 ABI has the same struct as x86-64 for snd_pcm_channel_info */

 CONFIG_X86_X32 */

 alignment */

	/*

	 * with extension, parameters are read/write,

	 * get audio_tstamp_data from user,

	 * ignore rest of status structure

 both for HW_PARAMS and HW_REFINE */

 only fifo_size (RO from userspace) is different, so just copy all */

/*

 copy the result */

 snd_xfern needs remapping of bufs */

 this is void **; */

/*

 * xfern ioctl nees to copy (up to) 128 pointers on stack.

 * although we may pass the copied pointers through f_op->ioctl, but the ioctl

 * handler there expands again the same 128 pointers on stack, so it is better

 * to handle the function (calling pcm_readv/writev) directly in this handler.

 X32 ABI has 64bit timespec and 64bit alignment */

 alignment */

 alignment */

 FIXME: we should consider the boundary for the sync from app */

 CONFIG_X86_X32 */

/* PCM 2.0.15 API definition had a bug in mmap control; it puts the avail_min

 * at the wrong offset due to a typo in padding type.

 * The bug hits only 32bit.

 * A workaround for incorrect read/write is needed only in 32bit compat mode.

 SiC! here is the bug */

/*

 CONFIG_X86_X32 */

	/*

	 * When PCM is used on 32bit mode, we need to disable

	 * mmap of the old PCM status/control records because

	 * of the size incompatibility.

 CONFIG_X86_X32 */

 CONFIG_X86_X32 */

/*

 *  PCM I/O Plug-In Interface

 *  Copyright (c) 1999 by Jaroslav Kysela <perex@perex.cz>

 *

 *

 *   This library is free software; you can redistribute it and/or modify

 *   it under the terms of the GNU Library General Public License as

 *   published by the Free Software Foundation; either version 2 of

 *   the License, or (at your option) any later version.

 *

 *   This program is distributed in the hope that it will be useful,

 *   but WITHOUT ANY WARRANTY; without even the implied warranty of

 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *   GNU Library General Public License for more details.

 *

 *   You should have received a copy of the GNU Library General Public

 *   License along with this library; if not, write to the Free Software

 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

 *

/*

 *  Basic io plugin

/*

 *  Rate conversion Plug-In

 *  Copyright (c) 1999 by Jaroslav Kysela <perex@perex.cz>

 *

 *

 *   This library is free software; you can redistribute it and/or modify

 *   it under the terms of the GNU Library General Public License as

 *   published by the Free Software Foundation; either version 2 of

 *   the License, or (at your option) any later version.

 *

 *   This program is distributed in the hope that it will be useful,

 *   but WITHOUT ANY WARRANTY; without even the implied warranty of

 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *   GNU Library General Public License for more details.

 *

 *   You should have received a copy of the GNU Library General Public

 *   License along with this library; if not, write to the Free Software

 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

 *

/*

 *  Basic rate conversion plugin

 silenty ignore other actions */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Digital Audio (PCM) abstract layer / OSS compatible

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

/*

 * helper functions to process hw_params

/**

 * snd_pcm_hw_param_value_min

 * @params: the hw_params instance

 * @var: parameter to retrieve

 * @dir: pointer to the direction (-1,0,1) or NULL

 *

 * Return the minimum value for field PAR.

/**

 * snd_pcm_hw_param_value_max

 * @params: the hw_params instance

 * @var: parameter to retrieve

 * @dir: pointer to the direction (-1,0,1) or NULL

 *

 * Return the maximum value for field PAR.

/**

 * snd_pcm_hw_param_min

 * @pcm: PCM instance

 * @params: the hw_params instance

 * @var: parameter to retrieve

 * @val: minimal value

 * @dir: pointer to the direction (-1,0,1) or NULL

 *

 * Inside configuration space defined by PARAMS remove from PAR all 

 * values < VAL. Reduce configuration space accordingly.

 * Return new minimum or -EINVAL if the configuration space is empty

/**

 * snd_pcm_hw_param_max

 * @pcm: PCM instance

 * @params: the hw_params instance

 * @var: parameter to retrieve

 * @val: maximal value

 * @dir: pointer to the direction (-1,0,1) or NULL

 *

 * Inside configuration space defined by PARAMS remove from PAR all 

 *  values >= VAL + 1. Reduce configuration space accordingly.

 *  Return new maximum or -EINVAL if the configuration space is empty

 Return 1 if min is nearer to best than max */

/**

 * snd_pcm_hw_param_near

 * @pcm: PCM instance

 * @params: the hw_params instance

 * @var: parameter to retrieve

 * @best: value to set

 * @dir: pointer to the direction (-1,0,1) or NULL

 *

 * Inside configuration space defined by PARAMS set PAR to the available value

 * nearest to VAL. Reduce configuration space accordingly.

 * This function cannot be called for SNDRV_PCM_HW_PARAM_ACCESS,

 * SNDRV_PCM_HW_PARAM_FORMAT, SNDRV_PCM_HW_PARAM_SUBFORMAT.

 * Return the value found.

 FIXME */

/**

 * snd_pcm_hw_param_set

 * @pcm: PCM instance

 * @params: the hw_params instance

 * @var: parameter to retrieve

 * @val: value to set

 * @dir: pointer to the direction (-1,0,1) or NULL

 *

 * Inside configuration space defined by PARAMS remove from PAR all 

 * values != VAL. Reduce configuration space accordingly.

 *  Return VAL or -EINVAL if the configuration space is empty

/*

 * plugin

 CONFIG_SND_PCM_OSS_PLUGINS */

 define extended formats in the recent OSS versions (if any) */

 linear formats */

 other supported formats */

 unsupported formats */

 try multiples of the best rate */

 not found, use the nearest rate */

 parameter locking: returns immediately if tried during streaming */

 call with params_lock held */

 add necessary plugins */

 this one takes the lock by itself */

 call with params_lock held */

/* NOTE: this always call PREPARE unconditionally no matter whether

 * runtime->oss.prepare is set or not

 call with params_lock held */

 in case of overrun, skip whole periods like OSS/Linux driver does */

 until avail(delay) <= buffer_size */

 test, if we can't store new data, because the stream */

 has not been started */

 test, if we can't store new data, because the stream */

 has not been started */

 CONFIG_SND_PCM_OSS_PLUGINS */

 note: all errors from the start action are ignored */

 OSS apps do not know, how to handle them */

		/*

		 * The ALSA's period might be a bit large than OSS one.

		 * Fill the remain portion of ALSA period with zeros.

		/*

		 * finish sync: drain the buffer

 < 16 */

 DSP_CAP_REALTIME is set all times: */

 all ALSA drivers can return actual pointer in ring buffer */

 revision - same as SB AWE 64 */

 hack for broken OSS applications */

 it won't be probably implemented

 pr_debug("TODO: snd_pcm_oss_get_mapbuf\n");

 no matching substream */

 mixer ioctl - for OSS compatibility */

 stop DMA now.. */

 it's for sure, some broken apps don't check for error codes */

 silently ignore */

 all compatible */

	/*

	 * Everything is compatbile except SNDCTL_DSP_MAPINBUF/SNDCTL_DSP_MAPOUTBUF,

	 * which are not implemented for the native case either

	/* set VM_READ access as well to fix memset() routines that do

		/* use mutex_trylock() for params_lock for avoiding a deadlock

		 * between mmap_lock and params_lock taken by

		 * copy_from/to_user() in snd_pcm_oss_write/read()

 In mmap mode we never stop */

/*

 *  /proc interface

 !CONFIG_SND_VERBOSE_PROCFS */

 CONFIG_SND_VERBOSE_PROCFS */

/*

 *  ENTRY functions

 check device map table */

/*

 *  PCM Plug-In shared (kernel/library) code

 *  Copyright (c) 1999 by Jaroslav Kysela <perex@perex.cz>

 *  Copyright (c) 2000 by Abramo Bagnara <abramo@alsa-project.org>

 *

 *

 *   This library is free software; you can redistribute it and/or modify

 *   it under the terms of the GNU Library General Public License as

 *   published by the Free Software Foundation; either version 2 of

 *   the License, or (at your option) any later version.

 *

 *   This program is distributed in the hope that it will be useful,

 *   but WITHOUT ANY WARRANTY; without even the implied warranty of

 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *   GNU Library General Public License for more details.

 *

 *   You should have received a copy of the GNU Library General Public

 *   License along with this library; if not, write to the Free Software

 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

 *

/*

 *  because some cards might have rates "very close", we ignore

 *  all "resampling" requests within +-5%

 Format change (linearization) */

 channels reduction */

 rate resampling */

 convert to S16 for resampling */

 format change */

 channels extension */

 de-interleave */

 FIXME: sub byte resolution and odd dst_offset */

 Ima ADPCM */

 FIXME: sub byte resolution and odd dst_offset */

 Ima ADPCM */

/*

 *  Linear conversion Plug-In

 *  Copyright (c) 2000 by Abramo Bagnara <abramo@alsa-project.org>

 *

 *

 *   This library is free software; you can redistribute it and/or modify

 *   it under the terms of the GNU Library General Public License as

 *   published by the Free Software Foundation; either version 2 of

 *   the License, or (at your option) any later version.

 *

 *   This program is distributed in the hope that it will be useful,

 *   but WITHOUT ANY WARRANTY; without even the implied warranty of

 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *   GNU Library General Public License for more details.

 *

 *   You should have received a copy of the GNU Library General Public

 *   License along with this library; if not, write to the Free Software

 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

 *

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  OSS emulation layer for the mixer interface

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 exclusive */

 exclusive */

 exclusive input */

 all compatible */

/*

 *  REGISTRATION PART

/*

 *  utilities

 convert from alsa native to oss values (0-100) */

 convert from oss to alsa native values */

 remember this */

/* In a separate function to keep gcc 3.2 happy - do NOT merge this in

/*

 * build an OSS mixer element.

 * ptr_allocated means the entry is dynamically allocated (change via proc file).

 * when replace_old = 1, the old entry is replaced with the new one.

 check if already assigned */

 ID_UNKNOWN */

 note: ES18xx have both Capture Source and XX Capture Volume !!! */

/*

/*

 *  /proc interface

 remove the entry */

 too big */

 not changed */

 !CONFIG_SND_PROC_FS */

 CONFIG_SND_PROC_FS */

 fallback */

 fallback */

 fallback */

 fallback */

 fallback */

 fallback */

 fallback */

 fallback */

 fallback */

 fallback */

fallback*/

fallback*/

 fallback */

/*

 *

/*

 *  Route Plug-In

 *  Copyright (c) 2000 by Abramo Bagnara <abramo@alsa-project.org>

 *

 *

 *   This library is free software; you can redistribute it and/or modify

 *   it under the terms of the GNU Library General Public License as

 *   published by the Free Software Foundation; either version 2 of

 *   the License, or (at your option) any later version.

 *

 *   This program is distributed in the hope that it will be useful,

 *   but WITHOUT ANY WARRANTY; without even the implied warranty of

 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *   GNU Library General Public License for more details.

 *

 *   You should have received a copy of the GNU Library General Public

 *   License along with this library; if not, write to the Free Software

 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

 *

 expand to all channels */

/*

 *  Linear conversion Plug-In

 *  Copyright (c) 1999 by Jaroslav Kysela <perex@perex.cz>,

 *			  Abramo Bagnara <abramo@alsa-project.org>

 *

 *

 *   This library is free software; you can redistribute it and/or modify

 *   it under the terms of the GNU Library General Public License as

 *   published by the Free Software Foundation; either version 2 of

 *   the License, or (at your option) any later version.

 *

 *   This program is distributed in the hope that it will be useful,

 *   but WITHOUT ANY WARRANTY; without even the implied warranty of

 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *   GNU Library General Public License for more details.

 *

 *   You should have received a copy of the GNU Library General Public

 *   License along with this library; if not, write to the Free Software

 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

 *

/*

 *  Basic linear conversion plugin

 need endian conversion? */

 byte offset in source format */

 byte soffset in destination format */

 byte offset in temporary u32 data */

 byte size of destination format */

 bytes to copy per conversion */

 MSB flip for signeness, done after endian conv */

/*

 *  Mu-Law conversion Plug-In Interface

 *  Copyright (c) 1999 by Jaroslav Kysela <perex@perex.cz>

 *                        Uros Bizjak <uros@kss-loka.si>

 *

 *  Based on reference implementation by Sun Microsystems, Inc.

 *

 *   This library is free software; you can redistribute it and/or modify

 *   it under the terms of the GNU Library General Public License as

 *   published by the Free Software Foundation; either version 2 of

 *   the License, or (at your option) any later version.

 *

 *   This program is distributed in the hope that it will be useful,

 *   but WITHOUT ANY WARRANTY; without even the implied warranty of

 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *   GNU Library General Public License for more details.

 *

 *   You should have received a copy of the GNU Library General Public

 *   License along with this library; if not, write to the Free Software

 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

 *

 Sign bit for a u-law byte. */

 Quantization field mask. */

 Number of u-law segments. */

 Left shift for segment number. */

 Segment field mask. */

 Bias for linear code. */

/*

 * linear2ulaw() - Convert a linear PCM value to u-law

 *

 * In order to simplify the encoding process, the original linear magnitude

 * is biased by adding 33 which shifts the encoding range from (0 - 8158) to

 * (33 - 8191). The result can be seen in the following encoding table:

 *

 *	Biased Linear Input Code	Compressed Code

 *	------------------------	---------------

 *	00000001wxyza			000wxyz

 *	0000001wxyzab			001wxyz

 *	000001wxyzabc			010wxyz

 *	00001wxyzabcd			011wxyz

 *	0001wxyzabcde			100wxyz

 *	001wxyzabcdef			101wxyz

 *	01wxyzabcdefg			110wxyz

 *	1wxyzabcdefgh			111wxyz

 *

 * Each biased linear code has a leading 1 which identifies the segment

 * number. The value of the segment number is equal to 7 minus the number

 * of leading 0's. The quantization interval is directly available as the

 * four bits wxyz.  * The trailing bits (a - h) are ignored.

 *

 * Ordinarily the complement of the resulting code word is used for

 * transmission, and so the code word is complemented before it is returned.

 *

 * For further information see John C. Bellamy's Digital Telephony, 1982,

 * John Wiley & Sons, pps 98-111 and 472-476.

 2's complement (16-bit range) */

 Get the sign and the magnitude of the value. */

 Convert the scaled magnitude to segment number. */

	/*

	 * Combine the sign, segment, quantization bits;

	 * and complement the code word.

/*

 * ulaw2linear() - Convert a u-law value to 16-bit linear PCM

 *

 * First, a biased linear code is derived from the code word. An unbiased

 * output can then be obtained by subtracting 33 from the biased code.

 *

 * Note that this function expects to be passed the complement of the

 * original code word. This is in keeping with ISDN conventions.

 Complement to obtain normal u-law value. */

	/*

	 * Extract and bias the quantization bits. Then

	 * shift up by the segment number and subtract out the bias.

/*

 *  Basic Mu-Law plugin

 need endian conversion? */

 byte offset in native format */

 byte offset in s16 format */

 byte size of the native format */

 bytes to copy per conversion */

 MSB flip for signedness, done after endian conversion */

 S24 in 4bytes need an 1 byte offset */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Virtual Raw MIDI client on Sequencer

 *

 *  Copyright (c) 2000 by Takashi Iwai <tiwai@suse.de>,

 *                        Jaroslav Kysela <perex@perex.cz>

/*

 * Virtual Raw MIDI client

 *

 * The virtual rawmidi client is a sequencer client which associate

 * a rawmidi device file.  The created rawmidi device file can be

 * accessed as a normal raw midi, but its MIDI source and destination

 * are arbitrary.  For example, a user-client software synth connected

 * to this port can be used as a normal midi device as well.

 *

 * The virtual rawmidi device accepts also multiple opens.  Each file

 * has its own input buffer, so that no conflict would occur.  The drain

 * of input/output buffer acts only to the local buffer.

 *

/*

 * initialize an event record

 FIXME: source and destination are same - not good.. */

/*

 * decode input event and put to read buffer of each opened file

/*

 * event handler of virmidi port

 ignored */

/*

 * trigger rawmidi stream for input

/* process rawmidi bytes and send events;

 * we need no lock here for vmidi->event since it's handled only in this work

 discard the outputs in dispatch mode unless subscribed */

 rawmidi input might be huge, allow to have a break */

/*

 * trigger rawmidi stream for output

/*

 * open rawmidi handle for input

/*

 * open rawmidi handle for output

/*

 * close rawmidi handle for input

/*

 * close rawmidi handle for output

 to be sure */

/*

 * subscribe callback - allow output to rawmidi device

/*

 * unsubscribe callback - disallow output to rawmidi device

/*

 * use callback - allow input to rawmidi device

/*

 * unuse callback - disallow input to rawmidi device

/*

 *  Register functions

/*

 * create a sequencer client and a port

 create a port */

 set all capabilities */

 success */

/*

 * release the sequencer client

/*

 * register the device

 should check presence of port more strictly.. */

/*

 * unregister the device

/*

 *

/*

 * free device

/*

 * create a new device

 *

 exported */

 may be configurable */

 may be configurable */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA sequencer /proc interface

 *   Copyright (c) 1998 by Frank van de Pol <fvdpol@coil.demon.nl>

 create all our /proc entries */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Generic MIDI synth driver for ALSA sequencer

 *   Copyright (c) 1998 by Frank van de Pol <fvdpol@coil.demon.nl>

 *                         Jaroslav Kysela <perex@perex.cz>

/* 

Possible options for midisynth module:

	- automatic opening of midi ports on first received event or subscription

	  (close will be performed when client leaves)

 data for this midi synth driver */

 handle rawmidi input event (MIDI v1.0 stream) */

 clear event and reset header */

 buffer for constructing midi messages */

 special case, to save space */

 invalid event */

 open associated midi device for input */

 open midi port */

 close associated midi device for input */

 open associated midi device for output */

 open midi port */

 close associated midi device for output */

 delete given midi synth port */

 delete port */

 register new midi synth port */

 declare port */

 last resort */

 success */

 release midi synth port */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA sequencer Timing queue handling

 *   Copyright (c) 1998-1999 by Frank van de Pol <fvdpol@coil.demon.nl>

 *

 * MAJOR CHANGES

 *   Nov. 13, 1999	Takashi Iwai <iwai@ww.uni-erlangen.de>

 *     - Queues are allocated dynamically via ioctl.

 *     - When owner client is deleted, all owned queues are deleted, too.

 *     - Owner of unlocked queue is kept unmodified even if it is

 *	 manipulated by other clients.

 *     - Owner field in SET_QUEUE_OWNER ioctl must be identical with the

 *       caller client.  i.e. Changing owner to a third client is not

 *       allowed.

 *

 *  Aug. 30, 2000	Takashi Iwai

 *     - Queues are managed in static array again, but with better way.

 *       The API itself is identical.

 *     - The queue is locked when struct snd_seq_queue pointer is returned via

 *       queueptr().  This pointer *MUST* be released afterward by

 *       queuefree(ptr).

 *     - Addition of experimental sync support.

 list of allocated queues */

 number of queues allocated */

----------------------------------------------------------------*/

 assign queue id and insert to list */

 found */

----------------------------------------------------------------*/

 create new queue (constructor) */

 delete queue (destructor) */

 stop and release the timer */

 wait until access free */

 release resources... */

----------------------------------------------------------------*/

 delete all existing queues */

 clear list */

/* allocate a new queue -

 * return pointer to new queue or ERR_PTR(-errno) for error

 * The new queue's use_lock is set to 1. It is the caller's responsibility to

 * call snd_use_lock_free(&q->use_lock).

 delete a queue - queue must be owned by the client */

 return pointer to queue structure for specified id */

 return the (first) queue matching with the specified name */

 -------------------------------------------------------- */

 make this function non-reentrant */

 other thread is already checking queues */

 Process tick queue... */

 Process time queue... */

 free lock */

 enqueue a event to singe queue */

 destination queue */

 handle relative time stamps, convert them into absolute */

 enqueue event in the real-time or midi queue */

 unlock */

 trigger dispatching */

 unlock */

----------------------------------------------------------------*/

/* check if the client has permission to modify queue parameters.

 * if it does, lock the queue

 unlock the queue */

 exported - only checking permission */

----------------------------------------------------------------*/

/*

 * change queue's owner and permission

----------------------------------------------------------------*/

/* open timer -

 * q->use mutex should be down before calling this function to avoid

 * confliction with snd_seq_queue_use()

/* close timer -

 * q->use mutex should be down before calling this function

 change queue tempo and ppq */

 use or unuse this queue */

/* use or unuse this queue -

 * if it is the first client, starts the timer.

 * if it is not longer used by any clients, stop the timer.

/*

 * check if queue is used by the client

 * return negative value if the queue is invalid.

 * return 0 if not used, 1 if used.

 invalid queue */

----------------------------------------------------------------*/

/* final stage notification -

 * remove cells for no longer exist client (for non-owned queue)

 * or delete this queue (for owned queue)

 delete own queues from queue list */

	/* remove cells from existing queues -

	 * they are not owned by this client

----------------------------------------------------------------*/

 remove cells from all queues */

 remove cells based on flush criteria */

----------------------------------------------------------------*/

/*

 * send events to all subscribed ports

 broadcast events from Timer port */

/*

 * process a received queue-control event.

 * this function is exported for seq_sync.c.

/*

 * Queue control via timer control port:

 * this function is exported as a callback of timer port.

----------------------------------------------------------------*/

 exported to seq_info.c */

 CONFIG_SND_PROC_FS */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  ALSA sequencer Memory Manager

 *  Copyright (c) 1998 by Frank van de Pol <fvdpol@coil.demon.nl>

 *                        Jaroslav Kysela <perex@perex.cz>

 *                2000 by Takashi Iwai <tiwai@suse.de>

/*

 * Variable length event:

 * The event like sysex uses variable length type.

 * The external data may be stored in three different formats.

 * 1) kernel space

 *    This is the normal case.

 *      ext.data.len = length

 *      ext.data.ptr = buffer pointer

 * 2) user space

 *    When an event is generated via read(), the external data is

 *    kept in user space until expanded.

 *      ext.data.len = length | SNDRV_SEQ_EXT_USRPTR

 *      ext.data.ptr = userspace pointer

 * 3) chained cells

 *    When the variable length event is enqueued (in prioq or fifo),

 *    the external data is decomposed to several cells.

 *      ext.data.len = length | SNDRV_SEQ_EXT_CHAINED

 *      ext.data.ptr = the additiona cell head

 *         -> cell.next -> cell.next -> ..

/*

 * exported:

 * call dump function to expand external data.

/*

 * exported:

 * expand the variable length event to linear buffer space.

/*

 * release this cell, free extended data if available

 has enough space now? */

/*

 * allocate an event cell.

 not initialized */

 interrupted? */

 closing.. */

 clear cell pointers */

/*

 * duplicate the event to a cell.

 * if the event has external data, the data is decomposed to additional

 * cells.

 copy the event */

 decompose */

 copy chunk */

 poll wait */

 allocate room specified number of events */

 add new cells to the free cell list */

 init statistics */

 refuse the further insertion to the pool */

 remove events */

 wait for closing all threads */

 release all resources */

 init new memory pool */

 create pool block */

 init statistics */

 remove memory pool */

 exported to seq_clientmgr.c */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA sequencer Timer

 *   Copyright (c) 1998-1999 by Frank van de Pol <fvdpol@coil.demon.nl>

 *                              Jaroslav Kysela <perex@perex.cz>

 allowed sequencer timer frequencies, in Hz */

 16bit shift */

 might overflow.. */

 create new timer (constructor) */

 reset setup to defaults */

 reset time */

 delete timer (destructor) */

 reset time */

 setup defaults */

 96 PPQ */

 120 BPM */

 reset time & songposition */

 called by timer interrupt routine. the period time since previous invocation is passed */

 FIXME: assuming skew_base = 0x10000 */

 update timer */

 calculate current tick */

 register actual time of this timer update */

 check queues and dispatch events */

 set current tempo */

 set current tempo and ppq in a shot */

 refuse to change ppq on running timers */

 because it will upset the song position (ticks) */

 set current tick position */

 set current real-time position */

 set timer skew */

 FIXME */

 standard ALSA timer */

 return current 'real' time. use timeofday() to get better granularity. */

/* TODO: use interpolation on tick queue (will only be useful for very

 exported to seq_info.c */

 CONFIG_SND_PROC_FS */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  GM/GS/XG midi module.

 *

 *  Copyright (C) 1999 Steve Ratcliffe

 *

 *  Based on awe_wave.c by Takashi Iwai

/*

 * This module is used to keep track of the current midi state.

 * It can be used for drivers that are required to emulate midi when

 * the hardware doesn't.

 *

 * It was written for a AWE64 driver, but there should be no AWE specific

 * code in here.  If there is it should be reported as a bug.

 Prototypes for static functions */

/*

 * Process an event in a driver independent way.  This means dealing

 * with RPN, NRPN, SysEx etc that are defined for common midi applications

 * such as GM, GS and XG.

 * There modes that this module will run in are:

 *   Generic MIDI - no interpretation at all, it will just save current values

 *                  of controllers etc.

 *   GM - You can use all gm_ prefixed elements of chan.  Controls, RPN, NRPN,

 *        SysEx will be interpreded as defined in General Midi.

 *   GS - You can use all gs_ prefixed elements of chan. Codes for GS will be

 *        interpreted.

 *   XG - You can use all xg_ prefixed elements of chan.  Codes for XG will

 *        be interpreted.

 EVENT_NOTE should be processed before queued */

	/* Make sure that we don't have a note on that should really be

 Make sure the note is within array range */

 Best guess is that this is any of the 14 bit controller values */

 set low part first */

 Break it back into its controller values */

 Break it back into its controller values */

pr_debug("ALSA: seq_midi_emul: Unimplemented event %d\n", ev->type);*/

/*

 * release note

 Hold this note until pedal is turned off */

		/* Mark this note as release; it will be turned off when sostenuto

/*

 * Do all driver independent operations for this controller and pass

 * events that need to take place immediately to the driver.

 Switches */

 These are all switches; either off or on so set to 0 or 127 */

 Sustain has been released, turn off held notes */

 Mark each note that is currently held down */

 release all notes that were held */

/*

 * initialize the MIDI status

 2 semitones */

/*

 * Process a rpn message.

 Pitch bend sensitivity */

 MSB only / 1 semitone per 128 */

 fine tuning: */

 MSB/LSB, 8192=center, 100/8192 cent step */

 coarse tuning */

 MSB only / 8192=center, 1 semitone per 128 */

 "lock-in" RPN */

 ignored */

 should call nrpn or rpn callback here.. */

/*

 * Process an nrpn message.

 parse XG NRPNs here if possible */

/*

 * convert channel parameter in GS sysex

/*

 * Process a sysex message.

 GM on */

 XG on */

	/* GS prefix

	 * drum channel: XX=0x1?(channel), YY=0x15, ZZ=on/off

	 * reverb mode: XX=0x01, YY=0x30, ZZ=0-7

	 * chorus mode: XX=0x01, YY=0x38, ZZ=0-7

	 * master vol:  XX=0x00, YY=0x04, ZZ=0-127

XX,YY,ZZ*/

 skip first byte */

 GM on */

 GS macros */

 GS reset */

 drum pattern */

 program */

 reverb mode */

 chorus mode */

 master volume */

 XG on */

 reset CC#0 for drums */

/*

 * all sound off

/*

 * all notes off

/*

 * Initialise a single midi channel control block.

 2 semitones */

 Default ch 10 as drums */

/*

 * Allocate and initialise a set of midi channel control blocks.

/*

 * reset all midi channels

 2 semitones */

/*

 * Allocate and initialise a midi channel set.

/*

 * Reset the midi controllers on a particular channel to default values.

/*

 * Free a midi channel set.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA sequencer System services Client

 *   Copyright (c) 1998-1999 by Frank van de Pol <fvdpol@coil.demon.nl>

 internal client that provide system services, access to timer etc. */

/*

 * Port "Timer"

 *      - send tempo /start/stop etc. events to this port to manipulate the 

 *        queue's timer. The queue address is specified in

 *	  data.queue.queue.

 *      - this port supports subscription. The received timer events are 

 *        broadcasted to all subscribed clients. The modified tempo

 *	  value is stored on data.queue.value.

 *	  The modifier client/port is not send.

 *

 * Port "Announce"

 *      - does not receive message

 *      - supports supscription. For each client or port attaching to or 

 *        detaching from the system an announcement is send to the subscribed

 *        clients.

 *

 * Idea: the subscription mechanism might also work handy for distributing 

 * synchronisation and timing information. In this case we would ideally have

 * a list of subscribers for each type of sync (time, tick), for each timing

 * queue.

 *

 * NOTE: the queue to be started, stopped, etc. must be specified

 *	 in data.queue.addr.queue field.  queue is used only for

 *	 scheduling, and no longer referred as affected queue.

 *	 They are used only for timer broadcast (see above).

 *							-- iwai

 client id of our system client */

 port id numbers for this client */

 fill standard header data, source port & channel are filled in */

 fill data */

ev->data.addr.queue = SNDRV_SEQ_ADDRESS_UNKNOWN;*/

 entry points for broadcasting system events */

 entry points for broadcasting system events */

 call-back handler for timer events */

 register our internal client */

 register client */

 register timer */

 accept queue control */

 for broadcast */

 register announcement port */

 for broadcast only */

 unregister our internal client */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA sequencer Priority Queue

 *   Copyright (c) 1998-1999 by Frank van de Pol <fvdpol@coil.demon.nl>

/* Implementation is a simple linked list for now...



   This priority queue orders the events on timestamp. For events with an

   equeal timestamp the queue behaves as a FIFO. 



   *

   *           +-------+

   *  Head --> | first |

   *           +-------+

   *                 |next

   *           +-----v-+

   *           |       |

   *           +-------+

   *                 |

   *           +-----v-+

   *           |       |

   *           +-------+

   *                 |

   *           +-----v-+

   *  Tail --> | last  |

   *           +-------+

   *



 create new prioq (constructor) */

 delete prioq (destructor) */

 release resources...*/

....................*/

 drain prioQ */

 compare timestamp between events */

 return 1 if a >= b; 0 */

 compare ticks */

 compare real time */

 compare timestamp between events */

/* return negative if a < b;

 *        zero     if a = b;

 *        positive if a > b;

 compare ticks */

 compare real time */

 enqueue cell to prioq */

 check flags */

	/* check if this element needs to inserted at the end (ie. ordered 

	   data is inserted) This will be very likeley if a sequencer 

 add new cell to tail of the fifo */

	/* traverse list of elements to find the place where the new cell is

 previous cell */

 cursor */

 FIXME: enough big, isn't it? */

 compare timestamps */

 new cell has earlier schedule time, */

 equal schedule time and prior to others */

 new cell has equal or larger schedule time, */

 move cursor to next cell */

 insert it before cursor */

 this is the first cell, set head to it */

 reached end of the list */

 return 1 if the current time >= event timestamp */

 dequeue cell from prioq */

 reset tail if this was the last element */

 return number of events available in prioq */

 remove cells for left client */

 collect all removed cells */

 remove cell from prioq */

 add cell to free list */

 remove selected cells */

 data.note.channel and data.control.channel are identical */

 Do not remove off events */

 case SNDRV_SEQ_EVENT_SAMPLE_STOP: */

 remove cells matching remove criteria */

 collect all removed cells */

 remove cell from prioq */

 add cell to free list */

 remove selected cells */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  ALSA sequencer Client Manager

 *  Copyright (c) 1998-2001 by Frank van de Pol <fvdpol@coil.demon.nl>

 *                             Jaroslav Kysela <perex@perex.cz>

 *                             Takashi Iwai <tiwai@suse.de>

/* Client Manager



 * this module handles the connections of userland and kernel clients

 * 

/*

 * There are four ranges of client numbers (last two shared):

 * 0..15: global clients

 * 16..127: statically allocated client numbers for cards 0..27

 * 128..191: dynamically allocated client numbers for cards 28..31

 * 128..191: dynamically allocated client numbers for applications

 number of kernel non-card clients */

 clients per cards, for static clients */

 dynamically allocated client numbers (both kernel drivers and user space) */

/*

 * client table

/*

 * prototypes

/*

 return pointer to client structure for specified id */

/* Take refcount and perform ioctl_mutex lock on the given client;

 * used only for OSS sequencer

 * Unlock via snd_seq_client_ioctl_unlock() below

 The client isn't unrefed here; see snd_seq_client_ioctl_unlock() */

 Unlock and unref the given client; for OSS sequencer use only */

	/* The doubly unrefs below are intentional; the first one releases the

	 * leftover from snd_seq_client_ioctl_lock() above, and the second one

	 * is for releasing snd_seq_client_use_ptr() in this function

 initialise data structures */

 zap out the client table */

 init client data */

 find free slot in the client table */

 no free slot found or busy, return failure code */

 -------------------------------------------------------- */

 create a user client */

 client id */

 failure code */

 fill client data */

 make others aware this new client */

 delete a user client */

 handle client read() */

/* possible error values:

 *	-ENXIO	invalid client or file open mode

 *	-ENOSPC	FIFO overflow (the flag is cleared after this error report)

 *	-EINVAL	no enough user-space buffer to write the whole event

 *	-EFAULT	seg. fault during copy to user space

 check client structures are in place */

 buffer overflow is detected */

 return error code */

 while data available in queue */

 to be sure */

/*

 * check access permission to the port

/*

 * check if the destination client is available, and return the pointer

 * if filter is non-zero, client filter bitmap is tested.

 ok - accessible */

/*

 * Return the error event.

 *

 * If the receiver client is a user client, the original event is

 * encapsulated in SNDRV_SEQ_EVENT_BOUNCE as variable length event.  If

 * the original event is also variable length, the external data is

 * copied after the event record. 

 * If the receiver client is a kernel client, the original event is

 * quoted in SNDRV_SEQ_EVENT_KERNEL_ERROR, since this requires no extra

 * kmalloc.

 ignored */

 set up quoted error */

 use positive value */

/*

 * rewrite the time-stamp of the event record with the curren time

 * of the given queue.

 * return non-zero if updated.

/*

 * deliver an event to the specified destination.

 * if filter is non-zero, client filter bitmap is tested.

 *

 *  RETURN VALUE: 0 : if succeeded

 *		 <0 : error

 check permission */

/*

 * send the event to all subscribers:

 invalid source port */

 save original event record */

 lock list */

 both ports ready? */

 convert time according to flag with subscription */

 save first error that occurs and continue */

 restore original event record */

 restore */

/*

 * broadcast to all ports:

 no matching destination */

 pass NULL as source client to avoid error bounce */

 save first error that occurs and continue */

 restore */

/*

 * send the event to all clients:

 * if destination port is also ADDRESS_BROADCAST, deliver to all ports.

 save */

 don't send to itself */

 pass NULL as source client to avoid error bounce */

 save first error that occurs and continue */

 restore */

 multicast - not supported yet */

 ignored */

 SUPPORT_BROADCAST */

/* deliver an event to the destination port(s).

 * if the event is to subscribers or broadcast, the event is dispatched

 * to multiple targets.

 *

 * RETURN VALUE: n > 0  : the number of delivered events.

 *               n == 0 : the event was not passed to any client.

 *               n < 0  : error - event was not processed.

/*

 * dispatch an event cell:

 * This function is called only from queue check routines in timer

 * interrupts or after enqueued.

 * The event cell shall be released or re-queued in this function.

 *

 * RETURN VALUE: n > 0  : the number of delivered events.

 *		 n == 0 : the event was not passed to any client.

 *		 n < 0  : error - event was not processed.

 release this cell */

		/* NOTE event:

		 * the event cell is re-used as a NOTE-OFF event and

		 * enqueued again.

 reserve this event to enqueue note-off later */

		/*

		 * This was originally a note event.  We now re-use the

		 * cell for the note-off event.

 add the duration time */

 unit for duration is ms */

 Now queue this cell as the note off event */

 release this cell */

		/* Normal events:

		 * event cell is freed after processing the event

/* Allocate a cell from client pool and enqueue it to queue:

 * if pool is empty and blocking is TRUE, sleep until a new cell is

 * available.

 special queue values - force direct passing */

 check presence of source port */

 direct event processing without enqueued */

 this event must be enqueued! */

 Not direct, normal queuing */

 invalid queue */

 queue is not allocated */

 allocate an event cell */

 we got a cell. enqueue it. */

/*

 * check validity of event type and data length.

 * return non-zero if invalid.

 handle write() */

/* possible error values:

 *	-ENXIO	invalid client or file open mode

 *	-ENOMEM	malloc failed

 *	-EFAULT	seg. fault during copy from user space

 *	-EINVAL	invalid event

 *	-EAGAIN	no space in output pool

 *	-EINTR	interrupts while sleep

 *	-EMLINK	too many hops

 *	others	depends on return value from driver callback

 check client structures are in place */

 allocate the pool now if the pool is not allocated yet */ 

 only process whole events */

 Read in the event header from the user */

 fill in client number */

 Check for extension data length */

 check for special events */

 back out, will get an error this time or next */

 set user space pointer */

 increment data length */

 ok, enqueue it */

 Update pointers and counts */

 let's have a coffee break if too many events are queued */

/*

 * handle polling

 check client structures are in place */

 check if data is available in the outqueue */

 check if data is available in the pool */

-----------------------------------------------------*/

 SYSTEM_INFO ioctl() */

 fill the info fields */

 fixed limit */

 RUNNING_MODE ioctl() */

 requested client number */

 don't change !!! */

 CLIENT_INFO ioctl() */

 fill the info fields */

 requested client number */

 don't change !!! */

 CLIENT_INFO ioctl() */

 it is not allowed to set the info fields for an another client */

 also client type must be set now */

 fill the info fields */

/* 

 * CREATE PORT ioctl() 

 it is not allowed to create the port for an another client */

/* 

 * DELETE PORT ioctl() 

 it is not allowed to remove the port for an another client */

/* 

 * GET_PORT_INFO ioctl() (on any client) 

 don't change */

 get port info */

/* 

 * SET_PORT_INFO ioctl() (only ports on this/own client) 

 only set our own ports ! */

/*

 * port subscription (connection)

 connection by third client - check export permission */

 check read permission */

	/* if sender or receiver is the subscribing client itself,

	 * no permission check is necessary

 check write permission */

/*

 * send an subscription notify event to user client:

 * client must be user client.

 non-atomic */

/* 

 * add to port's subscription list IOCTL interface 

 connect them */

 broadcast announce */

/* 

 * remove from port's subscription list 

 broadcast announce */

 CREATE_QUEUE ioctl() */

 set queue name */

 DELETE_QUEUE ioctl() */

 GET_QUEUE_INFO ioctl() */

 SET_QUEUE_INFO ioctl() */

 change owner/locked permission */

 GET_NAMED_QUEUE ioctl() */

 GET_QUEUE_STATUS ioctl() */

 GET_QUEUE_TEMPO ioctl() */

 SET_QUEUE_TEMPO ioctl() */

 GET_QUEUE_TIMER ioctl() */

 SET_QUEUE_TIMER ioctl() */

 GET_QUEUE_CLIENT ioctl() */

 SET_QUEUE_CLIENT ioctl() */

 GET_CLIENT_POOL ioctl() */

 SET_CLIENT_POOL ioctl() */

 can't change other clients */

 is the pool in use? */

 remove all existing cells */

 change pool size */

 REMOVE_EVENTS ioctl() */

	/*

	 * Input mostly not implemented XXX.

		/*

		 * No restrictions so for a user client we can clear

		 * the whole fifo

/*

 * get subscription info

/*

 * get subscription info - check only its presence

 search for the subscriber */

 found! */

/*

 * query next client

 search for next client */

 found */

/* 

 * query next port

 search for next port */

 get port info */

 -------------------------------------------------------- */

 To use kernel stack for ioctl data. */

	/*

	 * All of ioctl commands for ALSA sequencer get an argument of size

	 * within 13 bits. We can safely pick up the size from the command.

 Some commands includes a bug in 'dir' field. */

 -------------------------------------------------------- */

 exported to kernel modules */

 empty write queue as default */

 failure code */

 make others aware this new client */

 return client number to caller */

 exported to kernel modules */

/*

 * exported, called by kernel clients to enqueue events (w/o blocking)

 *

 * RETURN VALUE: zero if succeed, negative if error

 ignore this */

 quoted events can't be enqueued */

 fill in client number */

 send it */

/* 

 * exported, called by kernel clients to dispatch events directly to other

 * clients, bypassing the queues.  Event time-stamp will be updated.

 *

 * RETURN VALUE: negative = delivery failed,

 *		 zero, or positive: the number of delivered events

 fill in client number */

/**

 * snd_seq_kernel_client_ctl - operate a command for a client with data in

 *			       kernel space.

 * @clientid:	A numerical ID for a client.

 * @cmd:	An ioctl(2) command for ALSA sequencer operation.

 * @arg:	A pointer to data in kernel space.

 *

 * Against its name, both kernel/application client can be handled by this

 * kernel API. A pointer of 'arg' argument should be in kernel space.

 *

 * Return: 0 at success. Negative error code at failure.

 exported (for OSS emulator) */

---------------------------------------------------------------------------*/

/*

 *  /proc interface

 exported to seq_info.c */

 list the client table */

 CONFIG_SND_PROC_FS */

---------------------------------------------------------------------------*/

/*

 *  REGISTRATION PART

/* 

 * register sequencer device 

/* 

 * unregister sequencer device 

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * ALSA sequencer MIDI-through client

 * Copyright (c) 1999-2000 by Takashi Iwai <tiwai@suse.de>

/*



  Sequencer MIDI-through client



  This gives a simple midi-through client.  All the normal input events

  are redirected to output port immediately.

  The routing can be done via aconnect program in alsa-utils.



  Each client has a static client number 14 (= SNDRV_SEQ_CLIENT_DUMMY).

  If you want to auto-load this module, you may add the following alias

  in your /etc/conf.modules file.



	alias snd-seq-client-14  snd-seq-dummy



  The module is loaded on demand for client 14, or /proc/asound/seq/

  is accessed.  If you don't need this module to be loaded, alias

  snd-seq-client-14 as "off".  This will help modprobe.



  The number of ports to be created can be specified via the module

  parameter "ports".  For example, to create four ports, add the

  following option in a configuration file under /etc/modprobe.d/:



	option snd-seq-dummy ports=4



  The model option "duplex=1" enables duplex operation to the port.

  In duplex mode, a pair of ports are created instead of single port,

  and events are tunneled between pair-ports.  For example, input to

  port A is sent to output port of another port B and vice versa.

  In duplex mode, each port has DUPLEX capability.



/*

 * event input callback - just redirect events to subscribers

 ignore system messages */

/*

 * free_private callback

/*

 * create a port

/*

 * register client and create ports

 create client */

 create ports */

/*

 * delete client if exists

/*

 *  Init part

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA sequencer FIFO

 *   Copyright (c) 1998 by Frank van de Pol <fvdpol@coil.demon.nl>

 FIFO */

 create new fifo */

 wake up clients if any */

 release resources...*/

....................*/

 clear queue */

 clear overflow flag */

 drain the fifo */

 enqueue event to fifo */

 always non-blocking */

 append new cells to fifo */

 wakeup client */

 success */

 dequeue cell from fifo */

 reset tail if this was the last element */

 dequeue cell from fifo and copy on user space */

 non-blocking - return immediately */

 polling; return non-zero if queue is available */

 change the size of pool; all old events are removed */

 allocate new pool */

 remember old pool */

 exchange pools */

 NOTE: overflow flag is not cleared */

 close the old pool and wait until all users are gone */

 release cells in old pool */

 get the number of unused cells safely */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  MIDI byte <-> sequencer event coder

 *

 *  Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>,

 *                        Jaroslav Kysela <perex@perex.cz>

 event type, index into status_event[] */

 from 0 to 6 are normal commands (note off, on, etc.) for 0x9?-0xe? */

 from 8 to 15 are events for 0xf0-0xf7 */

/*

 * prototypes

/*

 * event list

 0x80 - 0xef */

 invalid */

 0xf0 - 0xff */

 sysex: 0xf0 */

 0xf1 */

 0xf2 */

 0xf3 */

 0xf4 */

 0xf5 */

 0xf6 */

 0xf7 */

 0xf8 */

 0xf9 */

 0xfa */

 0xfb */

 0xfc */

 0xfd */

 0xfe */

 0xff */

/*

 *  new/delete record

/*

 * initialize record

/*

 *  read one byte and encode to sequencer event:

 *  return true if MIDI bytes are encoded to an event

 *         false data is not finished

 real-time event */

 new command */

 system messages */

 rest of command */

 running status */

 set data values */

 continue to parse */

 all parsed */

 encode note event */

 encode one parameter controls */

 encode pitch wheel change */

 encode midi control change */

 encode one parameter value*/

 encode song position */

/*

 * decode from a sequencer event to midi bytes

 * return the size of decoded midi events

 data.note.channel and data.control.channel is identical */

 decode note event */

 decode one parameter controls */

 decode pitch wheel change */

 decode midi control change */

 decode song position */

 decode 14bit control */

 decode reg/nonreg param */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Do sleep inside a spin-lock

 *  Copyright (c) 1999 by Takashi Iwai <tiwai@suse.de>

 wait until all locks are released */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  ALSA sequencer main module

 *  Copyright (c) 1998-1999 by Frank van de Pol <fvdpol@coil.demon.nl>

 Hz */

/*

 *  INIT PART

 register sequencer device */

 register proc interface */

 register our internal client */

 unregister our internal client */

 unregister proc interface */

 delete timing queues */

 unregister sequencer device */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   32bit -> 64bit ioctl wrapper for sequencer API

 *   Copyright (c) by Takashi Iwai <tiwai@suse.de>

 This file included from seq.c */

 client/port numbers */

 port name */

 port capability bits */

 port type bits */

 channels per MIDI port */

 voices per MIDI port */

 voices per SYNTH port */

 R/O: subscribers for output (from this port) */

 R/O: subscribers for input (to this port) */

 reserved for kernel use (must be NULL) */

 misc. conditioning */

 queue # for timestamping */

 for future use */

/*

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA sequencer Ports

 *   Copyright (c) 1998 by Frank van de Pol <fvdpol@coil.demon.nl>

 *                         Jaroslav Kysela <perex@perex.cz>

/*



   registration of client ports



/* 



NOTE: the current implementation of the port structure as a linked list is

not optimal for clients that have many ports. For sending messages to all

subscribers of a port we first need to find the address of the port

structure, which means we have to traverse the list. A direct access table

(array) would be better, but big preallocated arrays waste memory.



Possible actions:



1) leave it this way, a client does normaly does not have more than a few

ports



2) replace the linked list of ports by a array of pointers which is

dynamicly kmalloced. When a port is added or deleted we can simply allocate

a new array, copy the corresponding pointers, and delete the old one. We

then only need a pointer to this array, and an integer that tells us how

much elements are in array.



 return pointer to port structure - port is locked if found */

 deleting now */

 not found */

 search for the next port - port is locked if found */

 initialize snd_seq_port_subs_info */

/* create a port, port number is returned (-1 on failure);

 * the caller needs to unref the port via snd_seq_port_unlock() appropriately

 sanity check */

 create a new port */

 failure, out of memory */

 init port data */

 auto-probe mode */

 insert the new port */

 store the port number in the port */

 */

/*

 * remove all subscribers on the list

 * this is called from port_delete, for each src and dest list.

			/* looks like the connected port is being deleted.

			 * we decrease the counter, and when both ports are deleted

			 * remove the subscriber info

 ok we got the connected port */

 delete port data */

 set closing flag and wait for all port access are gone */

 clear subscribers info */

 delete a port with the given port id */

 ok found.  delete from the list at first */

 delete the all ports belonging to the given client */

	/* move the port list to deleted_list, and

	 * clear the port list in the client data.

 remove each port in deleted_list */

 set port info fields */

 set port name */

 set capabilities */

 get port type */

 information about supported channels/voices */

 timestamping */

 get port info fields */

 get port name */

 get capabilities */

 get port type */

 information about supported channels/voices */

 get subscriber counts */

 timestamping */

/*

 * call callback functions (if any):

 * the callbacks are invoked only when the first (for connection) or

 * the last subscription (for disconnection) is done.  Second or later

 * subscription results in increment of counter, but no callback is

 * invoked.

 * This feature is useful if these callbacks are associated with

 * initialization or termination of devices (see seq_midi.c).

 check if both addresses are identical */

 check the two subscribe info match */

 if flags is zero, checks only sender and destination addresses */

 check whether already exists */

 add to list */

 called with grp->list_mutex held */

 connect two ports */

 remove the connection */

	/* always start from deleting the dest port for avoiding concurrent

	 * deletions

 look for the connection */

 get matched subscriber */

/*

 * Attach a device driver that wants to receive events from the

 * sequencer.  Returns the new port number on success.

 * A driver that wants to receive the events converted to midi, will

 * use snd_seq_midisynth_register_port().

 exported */

 Set up the port */

 Create it */

/*

 * Detach the driver from a port.

 exported */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OSS compatible sequencer driver

 *

 * Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>

/*

 * prototypes

/*

 * convert an OSS event to ALSA event

 * return 0 : enqueued

 *        non-zero : invalid - ignored

 put a midi byte */

 old type events: mode1 only */

 skip */

 8bytes extended event: mode1 only */

 convert -128:127 to 0:127 */

 SEQ1 V2 control */

 -0x2000:0x1fff */

 conversion: 100/semitone -> 128/semitone */

 channel voice events: mode1 and 2 */

 channel common events: mode1 and 2 */

 conversion: 0:0x3fff -> -0x2000:0x1fff */

 timer events: mode1 and mode2 */

 XXX: only for little-endian! */

 local events: mode1 and 2 */

/*

 * process note-on event for OSS synth

 * three different modes are available:

 * - SNDRV_SEQ_OSS_PROCESS_EVENTS  (for one-voice per channel mode)

 *	Accept note 255 as volume change.

 * - SNDRV_SEQ_OSS_PASS_EVENTS

 *	Pass all events to lowlevel driver anyway

 * - SNDRV_SEQ_OSS_PROCESS_KEYPRESS  (mostly for Emu8000)

 *	Use key-pressure if note >= 128

 pass directly */

 volume control */

if (! vel)

 set volume to zero -- note off */

	type = SNDRV_SEQ_EVENT_NOTEOFF;

else

 sample already started -- volume change */

 sample not started -- start now */

 invalid */

 note changed - note off at beginning */

 set current status */

 non-zero velocity - start the note now */

 pass the event anyway */

 key pressure: shifted by 128 */

 normal note-on event */

/*

 * process note-off event for OSS synth

 pass directly */

 invalid */

 pass the event anyway */

/*

 * create a note event

/*

 * create a control event

/*

 * create an echo event

 echo back to itself */

/*

 * event input callback from ALSA sequencer:

 * the echo event is processed here.

 ignored */

 sync echo back */

 echo back event */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OSS compatible sequencer driver

 *

 * MIDI device handlers

 *

 * Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>

/*

 * constants

/*

 * definition of midi device record

 device number */

 sequencer client number */

 sequencer port number */

 port capability */

 flag for opening */

 MIDI event coder */

 assigned OSSseq device */

/*

 * midi device table

/*

 * prototypes

/*

 * look up the existing ports

 * this looks a very exhausting job.

 ignore myself */

/*

/*

 * look for the identical slot

 found! */

/*

 * register a new port if it doesn't exist yet

 the port must include generic midi */

 either read or write subscribable */

	/*

	 * look for the identical slot

 already exists */

	/*

	 * allocate midi info record

 copy the port information */

 copy and truncate the name of synth device */

 create MIDI coder */

 OSS sequencer adds running status to all sequences */

	/*

	 * look for en empty slot

/*

 * release the midi device if it was registered

/*

 * release the midi device if it was registered

/*

 * set up midi tables

/*

 * clean up midi tables

/*

 * open all midi devices.  ignore errors.

/*

 * get the midi device information

/*

 * open the midi device if not opened yet

 already used? */

 already opened? */

 queue for timestamps */

/*

 * close the midi device if already opened

/*

 * change seq capability flags to file mode flags

/*

 * reset the midi device and close it:

 * so far, only close the device.

 snd_seq_oss_midi_close(dp, dev);

/*

 * get client/port of the specified MIDI device

/*

 * input callback - this can be atomic

/*

 * convert ALSA sequencer event to OSS synth event

 not supported */

/*

 * decode event and send MIDI bytes to read queue

/*

 * dump midi data

 * return 0 : enqueued

 *        non-zero : invalid - ignored

/*

 * create OSS compatible midi_info record

 FIXME: ?? */

 FIXME: ?? */

/*

 * proc interface

 CONFIG_SND_PROC_FS */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OSS compatible sequencer driver

 *

 * registration of device and proc

 *

 * Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>

/*

 * module option

 Takashi says this is really only for sound-service-0-, but this is OK. */

/*

 * prototypes

/*

 * module interface

 success */

/*

 * ALSA minor device interface

/*

 * registration of sequencer minor device

/*

 * /proc interface

 CONFIG_SND_PROC_FS */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OSS compatible sequencer driver

 *

 * open/close and reset interface

 *

 * Copyright (C) 1998-1999 Takashi Iwai <tiwai@suse.de>

/*

 * common variables

 ALSA sequencer client number */

/*

 * prototypes

 call snd_seq_oss_midi_lookup_ports() asynchronously */

/*

 * create sequencer client for OSS sequencer

 create ALSA client */

 create annoucement receiver port */

 receive only */

	/* don't set port_callback.owner here. otherwise the module counter

	 * is incremented and we can no longer release the module..

 look up midi devices */

/*

 * receive annoucement from system port, and check the midi device

 it must not happen */

 ignore myself */

 ignore myself */

/*

 * delete OSS sequencer client

/*

 * open sequencer device

 look up synth and midi devices */

 pr_err("ALSA: seq_oss: no device found\n"); */

 create port */

 allocate queue */

 set address */

dp->addr.queue = dp->queue;*/

dp->addr.channel = 0;*/

 set up file mode */

 initialize read queue */

 initialize write queue */

 initialize timer */

 set private data pointer */

 set up for mode2 */

/*

 * translate file flags to private mode

/*

 * create sequencer port

 no subscription */

/*

 * delete ALSA port

/*

 * allocate a queue

/*

 * release queue

/*

 * free device informations - private_free callback of port

/*

 * close sequencer device

 clear slot */

/*

 * reset sequencer devices

 reset all synth devices */

 reset all midi devices */

 remove queues */

 reset timer */

/*

 * misc. functions for proc interface

/*

 * proc interface

 CONFIG_SND_PROC_FS */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OSS compatible sequencer driver

 *

 * seq_oss_readq.c - MIDI input queue

 *

 * Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>

/*

 * constants

#define SNDRV_SEQ_OSS_MAX_TIMEOUT	(unsigned long)(-1)

/*

 * prototypes

/*

 * create a read queue

/*

 * delete the read queue

/*

 * reset the read queue

 if someone sleeping, wake'em up */

/*

 * put a midi byte

/*

 * put MIDI sysex bytes; the event buffer may be chained, thus it has

 * to be expanded via snd_seq_dump_var_event().

/*

 * copy an event to input queue:

 * return zero if enqueued

 wake up sleeper */

/*

 * pop queue

 * caller must hold lock

/*

 * sleep until ready

/*

 * drain one record

 * caller must hold lock

/*

 * polling/select:

 * return non-zero if readq is not empty.

/*

 * put a timestamp

/*

 * proc interface

 CONFIG_SND_PROC_FS */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OSS compatible sequencer driver

 *

 * OSS compatible i/o control

 *

 * Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OSS compatible sequencer driver

 *

 * Timer control routines

 *

 * Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>

/*

/*

/*

 * create and register a new timer.

 * if queue is not started yet, start it.

/*

 * delete timer.

 * if no more timer exists, stop the queue.

/*

 * process one timing event

 * return 1 : event proceseed -- skip this event

 *        0 : not a timer event -- enqueue this event

 skip this event */

 time = from 1 to 3 bytes */

 set next event time */

/*

 * convert tempo units

/*

 * dispatch a timer event

/*

 * set queue tempo and start queue

/*

 * stop queue

/*

 * continue queue

/*

 * change queue tempo

/*

 * ioctls

 if *arg == 0, just return the current rate */

 not supported */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OSS compatible sequencer driver

 *

 * synth device handlers

 *

 * Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>

/*

 * constants

/*

 * definition of synth info records

 sysex buffer */

 synth info */

 for synth_info */

/*

 * device table

/*

 * prototypes

/*

 * global initialization

/*

 * registration of the synth device

 copy and truncate the name of synth device */

 registration */

/*

/*

 * set up synth tables

/*

 * set up synth tables for MIDI emulation - /dev/music mode only

/*

 * clean up synth tables

/*

 * return synth device information pointer

/*

 * reset note and velocity on each channel.

/*

 * reset synth device:

 * call reset callback.  if no callback is defined, send a heartbeat

 * event to the corresponding port.

 reset sysex */

 reopen the device */

/*

 * load a patch record:

 * call load_patch callback function

/*

 * check if the device is valid synth device and return the synth info

/*

 * receive OSS 6 byte sysex packet:

 * the full sysex message will be sent if it reaches to the end of data

 * (0xff).

 copy 6 byte packet to the buffer */

 skip */

 copy the data to event record and send it */

 skip */

/*

 * fill the event source/destination addresses

/*

 * OSS compatible ioctl

/*

 * send OSS raw events - SEQ_PRIVATE and SEQ_VOLUME

/*

 * create OSS compatible synth_info record

/*

 * proc interface

 CONFIG_SND_PROC_FS */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OSS compatible sequencer driver

 *

 * seq_oss_writeq.c - write queue and sync

 *

 * Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>

/*

 * create a write queue record

/*

 * delete the write queue

 to be sure */

/*

 * reset the write queue

 remove all */

 wake up sleepers if any */

/*

 * wait until the write buffer has enough room

 already finished */

 put echoback event */

 echo back to itself */

 interrupted - return 0 to finish sync */

/*

 * wake up sync - echo event was catched

/*

 * return the unused pool size

/*

 * set output threshold size from ioctl

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * OSS compatible sequencer driver

 *

 * read/write/select interface to device file

 *

 * Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>

/*

 * protoypes

/*

 * read interface

/*

 * write interface

 load patch */

 FIXME the return value isn't correct */

 extended code */

 copy the reset 4 bytes */

 old-type code */

 insert queue */

/*

 * insert event record to write queue

 * return: 0 = OK, non-zero = NG

 if this is a timing event, process the current time */

 no need to insert queue */

 parse this event */

 set dummy -- to be sure */

 invalid event - no need to insert queue */

/*

 * select / poll

 input */

 output */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Apple Onboard Audio driver for Onyx codec

 *

 * Copyright 2006 Johannes Berg <johannes@sipsolutions.net>

 *

 * This is a driver for the pcm3052 codec chip (codenamed Onyx)

 * that is present in newer Apple hardware (with digital output).

 *

 * The Onyx codec has the following connections (listed by the bit

 * to be used in aoa_codec.connected):

 *  0: analog output

 *  1: digital output

 *  2: line input

 *  3: microphone input

 * Note that even though I know of no machine that has for example

 * the digital output connected but not the analog, I have handled

 * all the different cases in the code so that this driver may serve

 * as a good example of what to do.

 *

 * NOTE: This driver assumes that there's at most one chip to be

 * 	 used with one alsa card, in form of creating all kinds

 *	 of mixer elements without regard for their existence.

 *	 But snd-aoa assumes that there's at most one card, so

 *	 this means you can only have one onyx on a system. This

 *	 should probably be fixed by changing the assumption of

 *	 having just a single card on a system, and making the

 *	 'card' pointer accessible to anyone who needs it instead

 *	 of hiding it in the aoa_snd_* functions...

 cache registers 65 to 80, they are write-only! */

	/* mutex serializes concurrent access to the device

	 * and this structure.

 both return 0 if all ok, else on error */

 alsa stuff */

/* this is necessary because most alsa mixer programs

/* like above, this is necessary because a lot

 * of alsa mixer programs don't handle ranges

 * that don't start at 0 properly.

	/* If we name this 'Input Source', it properly shows up in

	 * alsamixer as a selection, * but it's shown under the

	 * 'Playback' category.

	 * If I name it 'Capture Source', it shows up in strange

	 * ways (two bools of which one can be selected at a

	 * time) but at least it's shown in the 'Capture'

	 * category.

	 * I was told that this was due to backward compatibility,

	 * but I don't understand then why the mangling is *not*

	 * done when I name it "Input Source".....

 even if alsamixer doesn't care.. */

 datasheet page 30, all others are 0 */

 our registers */

 muted */

 but handled specially! */

 no deemphasis */

dB*/ + 8) & 0xF, 
 pcm audio */

 category: pcm coder */

 sampling frequency 44.1 kHz, clock accuracy level II */

 24 bit depth */

 reset registers of chip, either to initial or to previous values */

	/* this is first so we can skip it if no input is present...

	 * No hardware exists with that, but it's here as an example

 analog input */

		/* if analog and digital are currently off, anything should go,

 analog output */

 digital pcm output, also possible for analog out */

 Once alsa gets supports for this kind of thing we can add it... */

 digital compressed output */

 mute and lock analog output */

 these rates are ok for all outputs */

		/* FIXME: program spdif channel control bits here so that

		/* got some rate that the digital output can't do,

 this *MUST* be more elaborate later... */

 silence warning */

 Apple does a sleep here but the datasheet says to do it on resume */

 reset codec */

 take codec out of suspend (if it still is after reset) */

 FIXME: should divide by sample rate, but 8k is the lowest we go */

 reset all values */

 CONFIG_PM */

 nothing connected? what a joke! */

 if no inputs are present... */

 if no outputs are present... */

		/* this is fine as there have to be inputs

		/* give the user appropriate controls

		/* depending on what output is connected,

 spdif control defaults to off */

 if only S/PDIF is connected, enable it unconditionally */

	/* we try to read from register ONYX_REG_CONTROL

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Apple Onboard Audio driver for Toonie codec

 *

 * Copyright 2006 Johannes Berg <johannes@sipsolutions.net>

 *

 * This is a driver for the toonie codec chip. This chip is present

 * on the Mac Mini and is nothing but a DAC.

	/* This thing *only* has analog output,

	 * the rates are taken from Info.plist

 can we turn it off somehow? */

 CONFIG_PM */

 nothing connected? what a joke! */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Apple Onboard Audio driver for tas codec

 *

 * Copyright 2006 Johannes Berg <johannes@sipsolutions.net>

 *

 * Open questions:

 *  - How to distinguish between 3004 and versions?

 *

 * FIXMEs:

 *  - This codec driver doesn't honour the 'connected'

 *    property of the aoa_codec struct, hence if

 *    it is used in machines where not everything is

 *    connected it will display wrong mixer elements.

 *  - Driver assumes that the microphone is always

 *    monaureal and connected to the right channel of

 *    the input. This should also be a codec-dependent

 *    flag, maybe the codec should have 3 different

 *    bits for the three different possibilities how

 *    it can be hooked up...

 *    But as long as I don't see any hardware hooked

 *    up that way...

 *  - As Apple notes in their code, the tas3004 seems

 *    to delay the right channel by one sample. You can

 *    see this when for example recording stereo in

 *    audacity, or recording the tas output via cable

 *    on another machine (use a sinus generator or so).

 *    I tried programming the BiQuads but couldn't

 *    make the delay work, maybe someone can read the

 *    datasheet and fix it. The relevant Apple comment

 *    is in AppleTAS3004Audio.cpp lines 1637 ff. Note

 *    that their comment describing how they program

 *    the filters sucks...

 *

 * Other things:

 *  - this should actually register *two* aoa_codec

 *    structs since it has two inputs. Then it must

 *    use the prepare callback to forbid running the

 *    secondary output on a different clock.

 *    Also, whatever bus knows how to do this must

 *    provide two soundbus_dev devices and the fabric

 *    must be able to link them correctly.

 *

 *    I don't even know if Apple ever uses the second

 *    port on the tas3004 though, I don't think their

 *    i2s controllers can even do it. OTOH, they all

 *    derive the clocks from common clocks, so it

 *    might just be possible. The framework allows the

 *    codec to refine the transfer_info items in the

 *    usable callback, so we can simply remove the

 *    rates the second instance is not using when it

 *    actually is in use.

 *    Maybe we'll need to make the sound busses have

 *    a 'clock group id' value so the codec can

 *    determine if the two outputs can be driven at

 *    the same time. But that is likely overkill, up

 *    to the fabric to not link them up incorrectly,

 *    and up to the hardware designer to not wire

 *    them up in some weird unusable way.

	/* protects hardware access against concurrency from

	 * userspace when hitting controls and during

 3:1 above threshold */

 disabled */

 1:1 below threshold */

	/* analysing the volume and mixer tables shows

	 * that they are similar enough when we shift

	 * the mixer table down by 4 bits. The error

	 * is miniscule, in just one item the error

	 * is 1, at a value of 0x07f17b (mixer table

 alsa stuff */

	/*

	 * Despite what the data sheet says in one place, the

	 * TAS_ACR_B_MONAUREAL bit forces mono output even when

	 * input A (line in) is selected.

	/* If we name this 'Input Source', it properly shows up in

	 * alsamixer as a selection, * but it's shown under the

	 * 'Playback' category.

	 * If I name it 'Capture Source', it shows up in strange

	 * ways (two bools of which one can be selected at a

	 * time) but at least it's shown in the 'Capture'

	 * category.

	 * I was told that this was due to backward compatibility,

	 * but I don't understand then why the mangling is *not*

	 * done when I name it "Input Source".....

 input */

 output */

 Set treble & bass to 0dB */

 Clocks are going away, mute mute mute */

 Clocks are back, re-init the codec */

 doesn't happen as of now */

/* we are controlled via i2c and assume that is always up

 * If that wasn't the case, we'd have to suspend once

 reset codec */

 CONFIG_PM */

 CONFIG_PM */

	/* in theory, we can drive it at 512 too...

	 * but so far the framework doesn't allow

 same here, could be 32 for just one 16 bit format */

 seems that half is a saner default */

 power down codec chip */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Apple Onboard Audio pmf GPIOs

 *

 * Copyright 2006 Johannes Berg <johannes@sipsolutions.net>

	/* make sure no work is pending before freeing

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Apple Onboard Audio feature call GPIO control

 *

 * Copyright 2006 Johannes Berg <johannes@sipsolutions.net>

 *

 * This file contains the GPIO control routines for

 * direct (through feature calls) access to the GPIO

 * registers.

/* TODO: these are lots of global variables

 * that aren't used on most machines...

 * Move them into a dynamically allocated

 * structure and use that.

/* these are the GPIO numbers (register addresses as offsets into

 see the SWITCH_GPIO macro */

/* node pointers that we save when getting the GPIO number

 check if we can get it the easy way ... */

		/* some machines have only gpioX/extint-gpioX nodes,

		 * and an audio-gpio property saying what it is ...

		 * So what we have to do is enumerate all children

 still not found, assume not there */

	/* this is a hack, usually the GPIOs 'reg' property

	 * should have the offset based from the GPIO space

		/* Apple seems to default to 1, but

		 * that doesn't seem right at least on most

		 * machines. So until proven that the opposite

		 * is necessary, we default to 0

 0x4 is outenable, 0x1 is out, thus 4 or 5 */

 muted = !on... */					\

 enable dual edge */

	/* go Apple, and thanks for giving these different names

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Apple Onboard Audio driver core

 *

 * Copyright 2006 Johannes Berg <johannes@sipsolutions.net>

/* We allow only one fabric. This simplifies things,

 found_codec has to be assigned */

	/* if there's a fabric already, we can tell if we

	 * will want to have this codec, so propagate error

	/* allow querying for presence of fabric

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Apple Onboard Audio Alsa helpers

 *

 * Copyright 2006 Johannes Berg <johannes@sipsolutions.net>

 cannot be EEXIST due to usage in aoa_fabric_register */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Apple Onboard Audio driver -- layout/machine id fabric

 *

 * Copyright 2006-2008 Johannes Berg <johannes@sipsolutions.net>

 *

 * This fabric module looks for sound codecs based on the

 * layout-id or device-id property in the device tree.

/* These are the connections the layout fabric

 * knows about. It doesn't really care about the

 * input ones, but I thought I'd separate them

 * to give them proper names. The thing is that

 * Apple usually will distinguish the active output

 * by GPIOs, while the active input is set directly

 * on the codec. Hence we here tell the codec what

 * we think is connected. This information is hard-

/* pretty bogus but users complain...

 * This is a flag saying that the LINEOUT

 * should be renamed to HEADPHONE.

 CC_ flags from above */

	/* codec dependent bit to be set in the aoa_codec.connected field.

	 * This intentionally doesn't have any generic flags because the

	 * fabric has to know the codec anyway and all codecs might have

	/* if busname is not assigned, we use 'Master' below,

	 * so that our layout table doesn't need to be filled

	 * too much.

	 * We only assign these two if we expect to find more

	 * than one soundbus, i.e. on those machines with

 onyx with all but microphone connected */

 terminate array by .connected == 0 */

 onyx on machines without headphone */

	/* FIXME: are these correct? probably not for all the machines

 terminate array by .connected == 0 */

 onyx on machines with real line-out */

 terminate array by .connected == 0 */

 tas on machines without line out */

 terminate array by .connected == 0 */

 tas on machines with neither line out nor line in */

 terminate array by .connected == 0 */

 tas on machines without microphone */

 terminate array by .connected == 0 */

 tas on machines with everything connected */

 terminate array by .connected == 0 */

 terminate array by .connected == 0 */

 terminate array by .connected == 0 */

 terminate array by .connected == 0 */

 terminate array by .connected == 0 */

 last PowerBooks (15" Oct 2005) */

 PowerMac9,1 */

 PowerMac9,1 */

 PowerBook5,7 */

 PowerBook5,7 */

 PowerBook5,9 [17" Oct 2005] */

 PowerMac8,1 */

 Quad PowerMac (analog in, analog/digital out) */

 Quad PowerMac (digital in) */

 Early 2005 PowerBook (PowerBook 5,6) */

 PowerBook 5,4 */

 PowerBook6,1 */

 PowerBook6,5 */

 PowerBook6,7 */

 PowerBook6,8 */

 PowerMac8,2 */

 PowerBook6,7 */

 PowerMac10,1 (Mac Mini) */

 unknown, untested, but this comes from Apple */

 but it has an external mic?? how to select? */

 PowerMac3,4 */

 PowerMac3,6 */

 PowerBook5,2 */

 now we wait for the codecs to call us back */

 we need these for headphone/lineout detection */

/* this can go away but only if we allow multiple cards,

 if the codec has a 'codec' node, we require a reference */

	/* here remove the codec from the layout dev's

 need to add this codec to our codec array! */

 now update initial state */

 hm, currently we can only have one ... */

 by breaking out we keep a reference */

 anything with device_id, not layout_id */

 that unknown machine no one seems to have */

 PowerBook5,4 */

 Mac Mini */

	/* assign these before registering ourselves, so

	 * callbacks that are done during registration

 we won't be using these then... */

 reset if we didn't use it */

 SPDX-License-Identifier: GPL-2.0

 FIX UP */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * soundbus

 *

 * Copyright 2006 Johannes Berg <johannes@sipsolutions.net>

 stuff we want to pass to /sbin/hotplug */

	/* Since the compatible field can contain pretty much anything

	 * it's not really legal to split it out with commas. We split it

 soundbus_dev_attrs is declared in sysfs.c */

 sanity checks */

 initialize common driver fields */

 register with core */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * i2sbus driver -- pcm routines

 *

 * Copyright 2006 Johannes Berg <johannes@sipsolutions.net>

 sclk must be derived from mclk! */

 derive sclk register value */

 alsa messed up */

 we now need to assign the hw */

 bus dependent stuff */

	/* well. the codec might want 24 bits only, and we'll

	 * ever only transfer 24 bits, but they are top-aligned!

	 * So for alsa, we claim that we're doing full 32 bit

	 * while in reality we'll ignore the lower 8 bits of

	 * that when doing playback (they're transferred as 0

	 * as far as I know, no codecs we have are 32-bit capable

	 * so I can't really test) and when doing recording we'll

	/* now mask off what we can support. I suppose we could

	 * also support S24_3LE and some similar formats, but I

	 * doubt there's a codec that would be able to use that,

	/* we need to set the highest and lowest rate possible.

	 * These are the highest and lowest rates alsa can

	 * support properly in its bitfield.

	 * Below, we'll use that to restrict to the rate

	/* if the other stream is active, then we can only

	 * support what it is currently using.

	 * FIXME: I lied. This comment is wrong. We can support

	 * anything that works with the same serial format, ie.

	 * when recording 24 bit sound we can well play 16 bit

	 * sound at the same time iff using the same transfer mode.

 FIXME: is this guaranteed by the alsa api? */

 see above, restrict rates to the one we already have */

 these are somewhat arbitrary */

 unwind */

 timeout expired, stop dbdma forcefully */

 make sure RUN, PAUSE and S0 bits are cleared */

	/* whee. Hard work now. The user has selected a bitrate

	 * and bit format, so now we have to program our

 serial format register */

 data word sizes reg */

 generate dbdma command ring first */

 commands to DMA to/from the ring */

	/*

	 * For input, we need to do a graceful stop; if we abort

	 * the DMA, we end up with leftover bytes that corrupt

	 * the next recording.  To do this we set the S0 status

	 * bit and wait for the DMA controller to stop.  Each

	 * command has a branch condition to

	 * make it branch to a stop command if S0 is set.

	 * On input we also need to wait for the S7 bit to be

	 * set before turning off the DMA controller.

	 * In fact we do the graceful stop for output as well.

 branch back to beginning of ring */

 set stop command */

 ok, let's set the serial format and stuff */

 16 bit formats */

		/* FIXME: if we add different bus factors we need to

		/* force 64x bus speed, otherwise the data cannot be

 we assume all sysclocks are the same! */

 FIXME: THIS ASSUMES MASTER ALL THE TIME */

 codecs are fine with it, so set our clocks */

 early exit if already programmed correctly */

 not locking these is fine since we touch them only in this function */

	/* let's notify the codecs about clocks going away.

 wait for clock stopped. This can apparently take a while... */

 not locking these is fine since we touch them only in this function */

 Clear the S0 bit, then see if we stopped yet */

 possible race here? */

 keep running */

 make sure RUN, PAUSE and S0 bits are cleared */

 set branch condition select register */

 write dma command buffer address to the dbdma chip */

 initialize the frame count and current period */

 set the DMA controller running */

 off you go! */

 Set the S0 bit to make the DMA branch to the stop cmd */

			/*

			 * BT is the branch taken bit.  If it took a branch

			 * it is because we set the S0 bit to make it

			 * branch to the stop command.

		/*

		 * Check the frame count.  The DMA tends to get a bit

		 * ahead of the frame counter, which confuses the core.

 Turn off DMA controller, clear S0 bit */

 may call _trigger again, hence needs to be unlocked */

	/* we currently code the i2s transfer on the clock, and support only

	/* If you want to fix this, you need to keep track of what transport infos

	 * are to be used, which codecs they belong to, and then fix all the

 use the private data to point to the codec info */

	/* ALSA yet again sucks.

 eh? */

	/* so we have to register the pcm after adding any substream

	 * to it because alsa doesn't create the devices for the

	 * substreams when we add them later.

	 * Therefore, force in and out on both busses (above) and

	 * register the pcm now instead of just after creating it.

 no errors any more, so let's add this to our list */

 well, we really should support scatter/gather DMA */

 no more codecs, but still a pcm? */

 the actual cleanup is done by the callback above! */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * i2sbus driver

 *

 * Copyright 2006-2008 Johannes Berg <johannes@sipsolutions.net>

 one more for rounding, one for branch back, one for stop command */

	/* We use the PCI APIs for now until the generic one gets fixed

	 * enough or until we get some macio-specific versions

 acknowledge interrupt reasons */

/*

 * XXX FIXME: We test the layout_id's here to get the proper way of

 * mapping in various registers, thanks to bugs in Apple device-trees.

 * We could instead key off the machine model and the name of the i2s

 * node (i2s-a). This we'll do when we move it all to macio_asic.c

 * and have that export items for each sub-node too.

	/* Machines with layout 76 and 36 (K2 based) have a weird device

	 * tree what we need to special case.

	 * Normal machines just fetch the resource from the i2s-X node.

	 * Darwin further divides normal machines into old and new layouts

	 * with a subtely different code path but that doesn't seem necessary

	 * in practice, they just bloated it. In addition, even on our K2

	 * case the i2s-modem node, if we ever want to handle it, uses the

	 * normal layout

 FIXME: look at device node refcounting */

			/*

			 * We probably cannot handle all device-id machines,

			 * so restrict to those we do handle for now.

	/* for the time being, until we can handle non-layout-id

	 * things in some fabric, refuse to attach if there is no

	 * layout-id property or we haven't been forced to attach.

	 * When there are two i2s busses and only one has a layout-id,

	 * then this depends on the order, but that isn't important

	/* Resource handling is problematic as some device-trees contain

	 * useless crap (ugh ugh ugh). We work around that here by calling

	 * specific functions for calculating the appropriate resources.

	 *

	 * This will all be moved to macio_asic.c at one point

		/* If only we could use our resource dev->resources[i]...

		 * but request_resource doesn't know about parents and

		 * contained resources...

 enable this cell */

 found none, clean up */

 Notify codecs */

 wait until streams are stopped */

 reset i2s bus format etc. */

 Notify codecs so they can re-initialize */

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * i2sbus driver -- bus control routines

 *

 * Copyright 2006 Johannes Berg <johannes@sipsolutions.net>

 this is serialised externally */

	/* if the bus number is not 0 or 1 we absolutely need to use

	 * the platform functions -- there's nothing in Darwin that

	 * would allow seeing a system behind what the FCRs are then,

	 * and I don't want to go parsing a bunch of platform functions

 this is serialised externally */

		/* these need to be locked or done through

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Xen para-virtual sound device

 *

 * Copyright (C) 2016-2018 EPAM Systems Inc.

 *

 * Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>

 This is the shared buffer with its backing storage. */

 Number of processed frames as reported by the backend. */

 Current HW pointer to be reported via .period callback. */

 Modulo of the number of processed frames - for period detection. */

 Collect all the values we need for the query. */

 Check if this is due to backend communication error. */

 Refine HW parameters after the query. */

	/*

	 * Return our HW properties: override defaults with those configured

	 * via XenStore.

	/*

	 * This callback may be called multiple times,

	 * so free the previously allocated shared buffer if any.

/*

 * FIXME: The mmaped data transfer is asynchronous and there is no

 * ack signal from user-space when it is done. This is the

 * reason it is not implemented in the PV driver as we do need

 * to know when the buffer can be transferred to the backend.

 we want to handle all PCM operations in non-atomic context */

 Card_info will be freed when destroying front_info->xb_dev->dev. */

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Xen para-virtual sound device

 *

 * Copyright (C) 2016-2018 EPAM Systems Inc.

 *

 * Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>

 Maximum number of supported streams. */

 Inherit parent's PCM HW and read overrides from XenStore. */

 Update configuration to match new values. */

 Get next stream index. */

	/*

	 * Check XenStore if PCM HW configuration exists for this stream

	 * and update if so, e.g. we inherit all values from device's PCM HW,

	 * but can still override some of the values for the stream.

	/*

	 * Check XenStore if PCM HW configuration exists for this device

	 * and update if so, e.g. we inherit all values from card's PCM HW,

	 * but can still override some of the values for the device.

 Find out how many streams were configured in Xen store. */

 Get number of playback and capture streams. */

 Start from default PCM HW configuration for the card. */

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Xen para-virtual sound device

 *

 * Copyright (C) 2016-2018 EPAM Systems Inc.

 *

 * Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>

 Ensure we see queued responses up to rp. */

	/*

	 * Assume that the backend is trusted to always write sane values

	 * to the ring counters, so no overflow checks on frontend side

	 * are required.

 Ensure we see ring contents up to prod. */

	/*

	 * Assume that the backend is trusted to always write sane values

	 * to the ring counters, so no overflow checks on frontend side

	 * are required.

 Ensure ring contents. */

 Release all who still waits for response if any. */

 End access and free the page. */

 Iterate over devices and their streams and create event channels. */

 Write control channel ring reference. */

 Write event channel ring reference. */

 SPDX-License-Identifier: GPL-2.0 OR MIT

/*

 * Xen para-virtual sound device

 *

 * Copyright (C) 2016-2018 EPAM Systems Inc.

 *

 * Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>

 create event channels for all streams and publish */

 Recovering after backend unexpected closure. */

 Recovering after backend unexpected closure. */

		/*

		 * In this state backend starts freeing resources,

		 * so let it go into closed state first, so we can also

		 * remove ours.

	/*

	 * On driver removal it is disconnected from XenBus,

	 * so no backend state change events come via .otherend_changed

	 * callback. This prevents us from exiting gracefully, e.g.

	 * signaling the backend to free event channels, waiting for its

	 * state to change to XenbusStateClosed and cleaning at our end.

	 * Normally when front driver removed backend will finally go into

	 * XenbusStateInitWait state.

	 *

	 * Workaround: read backend's state manually and wait with time-out.

 At the moment we only support case with XEN_PAGE_SIZE == PAGE_SIZE */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Routines for control of the CS8427 via i2c bus

 *  IEC958 (S/PDIF) receiver & transmitter by Cirrus Logic

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 fixed address */

 hardware status */

 default status */

 PCM private status */

 map of first 1 + 13 registers */

	  /* CS8427_REG_CONTROL1: RMCK to OMCK, valid PCM audio, disable mutes,

	  /* CS8427_REG_CONTROL2: hold last valid audio sample, RMCK=256*Fs,

	  /* CS8427_REG_DATAFLOW: output drivers normal operation, Tx<=serial,

	  /* CS8427_REG_CLOCKSOURCE: Run off, CMCK=256*Fs,

	     output time base = OMCK, input time base = recovered input clock,

	     recovered input clock source is ILRCK changed to AES3INPUT

	  /* CS8427_REG_SERIALINPUT: Serial audio input port data format = I2S,

	  /* CS8427_REG_SERIALOUTPUT: Serial audio output port data format

	  /* CS8427_REG_RECVERRMASK: unmask the input PLL clock, V, confidence,

 CS8427_UNLOCK | CS8427_V | CS8427_CONF | CS8427_BIP | CS8427_PAR,*/

 set everything */

	  /* CS8427_REG_CSDATABUF:

	     Registers 32-55 window to CS buffer

	     Inhibit D->E transfers from overwriting first 5 bytes of CS data.

	     Inhibit D->E transfers (all) of CS data.

	     Allow E->F transfer of CS data.

	     One byte mode; both A/B channels get same written CB data.

	  /* CS8427_REG_UDATABUF:

	     Use internal buffer to transmit User (U) data.

	     Chip's U pin is an output.

	     Transmit all O's for user data.

	     Inhibit D->E transfers.

 give second chance */

 turn off run bit while making changes to configuration */

 send initial values */

 Turn off CS8427 interrupt stuff that is not used in hardware */

 from address 9 to 15 */

 register */

 send transfer initialization sequence */

 write default channel status bytes */

 turn on run bit and rock'n'roll */

 it's nice for read tests

/*

 * Reset the chip using run bit, also lock PLL using ILRCK and

 * put back AES3INPUT. This workaround is described in latest

 * CS8427 datasheet, otherwise TXDSERIAL will not work.

 AES3 bit is set */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Routines for control of the TEA6330T circuit via i2c bus

 *  Sound fader control circuit for car radios by Philips Semiconductors

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 fixed address */

 volume left */

 volume right */

 bass control */

 treble control */

 fader control */

 mute control for selected channels */

 select fader channels - front or rear */

 audio switch */

 mute control, general mute */

 equalizer switchover (0=equalizer-on) */

 turn fader off and handle equalizer */

 initialize mixer */

 compose I2C message and put the hardware to initial state */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Generic i2c interface for ALSA

 *

 *   (c) 1998 Gerd Knorr <kraxel@cs.tu-berlin.de>

 *   Modified for the ALSA driver by Jaroslav Kysela <perex@perex.cz>

/*

 *  bit-operations

 SCL - wr, SDA - wr */

 SCL - wr, SDA - rd */

 SCL - wr, SDA - wr */

 SCL - wr, SDA - rd */

 SCL - wr, SDA - wr */

 not yet implemented */

 not yet implemented */

 10-bit address */

 not yet implemented */

 invalid address */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Routines for control of the AK4114 via I2C and 4-wire serial interface

 *  IEC958 (S/PDIF) receiver by Asahi Kasei

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 fixed address */

 don't schedule new work */

 bring the chip to reset state and powerdown state */

 release reset, but leave powerdown */

 release powerdown, everything is initialized now */

 bring up statistics / event queing */

 Don't forget to change AK4114_CONTROLS define!!! */

 all ak4114 registers 0x00 - 0x1f */

 trigger workq */

 notify kcontrols if any parameters are changed */

 rate change */

 compare rate */

 printk(KERN_DEBUG "rate changed (%i <- %i)\n", runtime->rate, res);

 don't schedule new work */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Routines for control of the AK4117 via 4-wire serial interface

 *  IEC958 (S/PDIF) receiver by Asahi Kasei

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 fixed address */

 bring the chip to reset state and powerdown state */

 release reset, but leave powerdown */

 release powerdown, everything is initialized now */

 Don't forget to change AK4117_CONTROLS define!!! */

 printk(KERN_DEBUG "AK IRQ: rcs0 = 0x%x, rcs1 = 0x%x, rcs2 = 0x%x\n", rcs0, rcs1, rcs2);

 rate change */

 compare rate */

 printk(KERN_DEBUG "rate changed (%i <- %i)\n", runtime->rate, res);

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA driver for AK4524 / AK4528 / AK4529 / AK4355 / AK4358 / AK4381

 *   AD and DA converters

 *

 *	Copyright (c) 2000-2004 Jaroslav Kysela <perex@perex.cz>,

 *				Takashi Iwai <tiwai@suse.de>

 write the given register and save the data to the cache */

 save the data */

 reset procedure for AK4524 and AK4528 */

 DAC volumes */

 reset procedure for AK4355 and AK4358 */

 reset and soft-mute */

 un-reset, unmute */

 reset procedure for AK4381 */

/*

 * reset the AKM codecs

 * @state: 1 = reset codec, 0 = restore the registers

 *

 * assert the reset operation and restores the register values to the chips.

 FIXME: needed for ak4529? */

/*

 * Volume conversion table for non-linear volumes

 * from -63.5dB (mute) to 0dB step 0.5dB

 *

 * Used for AK4524/AK4620 input/ouput attenuation, AK4528, and

 * AK5365 input attenuation

/*

 * dB tables

/*

 * initialize all the ak4xxx chips

 0: all power up */

 1: ADC/DAC reset */

 2: 24bit I2S */

 3: deemphasis off */

 1: ADC/DAC enable */

 4: ADC left muted */

 5: ADC right muted */

 6: DAC left muted */

 7: DAC right muted */

 0: all power up */

 1: ADC/DAC reset */

 2: 24bit I2S */

 3: deemphasis off, turn LR highpass filters on */

 1: ADC/DAC enable */

 4: ADC left muted */

 5: ADC right muted */

 9: ATS=0, RSTN=1 */

 A: all power up, no zero/overflow detection */

 0: TDM=0, 24bit I2S, SMUTE=0 */

 1: ACKS=0, ADC, loop off */

 2: LOUT1 muted */

 3: ROUT1 muted */

 4: LOUT2 muted */

 5: ROUT2 muted */

 6: LOUT3 muted */

 7: ROUT3 muted */

 B: LOUT4 muted */

 C: ROUT4 muted */

 8: deemphasis all off */

 1: reset and soft-mute */

		0x00, 0x06, /* 0: mode3(i2s), disable auto-clock detect,

 2: DA's power up, normal speed, RSTN#=0 */

 0x02, 0x2e, /* quad speed */

 3: de-emphasis off */

 4: LOUT1 volume muted */

 5: ROUT1 volume muted */

 6: LOUT2 volume muted */

 7: ROUT2 volume muted */

 8: LOUT3 volume muted */

 9: ROUT3 volume muted */

 a: DATT speed=0, ignore DZF */

 1: un-reset, unmute */

 1: reset and soft-mute */

		0x00, 0x06, /* 0: mode3(i2s), disable auto-clock detect,

 2: DA's power up, normal speed, RSTN#=0 */

 0x02, 0x6e,*/ 
 3: de-emphasis off */

 4: LOUT1 volume muted */

 5: ROUT1 volume muted */

 6: LOUT2 volume muted */

 7: ROUT2 volume muted */

 8: LOUT3 volume muted */

 9: ROUT3 volume muted */

 b: LOUT4 volume muted */

 c: ROUT4 volume muted */

 a: DATT speed=0, ignore DZF */

 1: un-reset, unmute */

 0: mode3(i2s), disable auto-clock detect */

		0x01, 0x02, /* 1: de-emphasis off, normal speed,

 0x01, 0x12, /* quad speed */

 2: DZF disabled */

 3: LATT 0 */

 4: RATT 0 */

 0: power-up, un-reset */

 0: normal */

 0: reset */

 1: RSTAD */

 1: RSTDA */

 1: normal */

 2: 24bit I2S */

 3: deemphasis off */

 4: LIN muted */

 5: RIN muted */

 6: LOUT muted */

 7: ROUT muted */

 FIXME: any init sequence? */

/*

 * Mixer callbacks

 including IPGA */

 need dB conversion */

 need MSB update bit */

 data is inverted */

 need to correct + 1 since both 127 and 128 are 0dB */

	/* printk(KERN_DEBUG "DEBUG - AK writing reg: chip %x addr %x,

 we observe the (1<<shift) bit only */

/*

 * build AK4xxx controls

 mute control for Revolution 7.1 - AK4381 */

			/* register 1, bit 0 (SMUTE): 0 = normal operation,

 register 6 & 7 */

 register 4 & 5 */

 registers 2-7 and b,c */

 register 4-9, chip #0 only */

 register 4-9 and 11-12, chip #0 only */

 register 3 & 4 */

 register 6 & 7 */

 no controls */

 register 4 & 5 */

			/* register 2, bit 0 (SMUTE): 0 = normal operation,

			/* input selector control: reg. 1, bits 0-2.

 register 3 */

 register 8 with shift */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Routines for control of the AK4113 via I2C/4-wire serial interface

 *  IEC958 (S/PDIF) receiver by Asahi Kasei

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  Copyright (c) by Pavel Hofman <pavel.hofman@ivitera.com>

 fixed address */

 don't schedule new work */

 bring the chip to reset state and powerdown state */

 release reset, but leave powerdown */

 release powerdown, everything is initialized now */

 bring up statistics / event queing */

 Don't forget to change AK4113_CONTROLS define!!! */

 all ak4113 registers 0x00 - 0x1c */

 trigger workq */

 rate change */

 compare rate */

			/*printk(KERN_DEBUG "rate changed (%i <- %i)\n",

 don't schedule new work */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA Driver for the PT2258 volume controller.

 *

 *	Copyright (c) 2006  Jochen Voss <voss@seehuhn.de>

 channel 1: -10dB, -1dB */

 channel 2: -10dB, -1dB */

 channel 3: -10dB, -1dB */

 channel 4: -10dB, -1dB */

 channel 5: -10dB, -1dB */

 channel 6: -10dB, -1dB */

 reset chip */

 mute all channels */

 set all channels to 0dB */

 chip does not support register reads */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Driver for A2 audio system used in SGI machines

 *  Copyright (c) 2008 Thomas Bogendoerfer <tsbogend@alpha.fanken.de>

 *

 *  Based on OSS code from Ladislav Michl <ladis@linux-mips.org>, which

 *  was based on code from Ulf Carlsson

 Index 0-MAX */

 ID for this card */

 Current state of pbus->pbdma_ctrl */

 padding */

 mono/stereo */

 Master frequency */

 MOD value */

 INC value */

 HAL2 ctl registers */

 HAL2 aes registers */

 HAL2 vol registers */

 HAL2 syn registers */

 mute DAC */

 mute ADC */

 decide what caused this interrupt */

	/* Now we set up some PBUS information. The PBUS needs information about

	 * what portion of the fifo it will use. If it's receiving or

	 * transmitting, and finally whether the stream is little endian or big

	 * endian. The information is written later, on the start call.

	/* Fifo should be set to hold exactly four samples. Highwater mark

 halfwords */

 playback is first */

 doublewords */

 We disable everything before we do anything at all */

 Setup the HAL2 for playback */

 Set endianess */

 Set DMA bus */

 We are using 1st Bresenham clock generator for playback */

 halfwords */

 record is second */

 doublewords */

 Setup the HAL2 for record */

 Set endianess */

 Set DMA bus */

 We are using 2nd Bresenham clock generator for record */

 enable DAC */

 enable ADC */

 The HAL2 itself may remain enabled safely */

 create first pcm device with one outputs and one input */

 set operators */

 reset HAL2 */

 release reset */

	/*

	 * All DMA channel interfaces in HAL2 are designed to operate with

	 * PBUS programmed for 2 cycles in D3, 2 cycles in D4 and 2 cycles

	 * in D5. HAL2 is a 16-bit device which can accept both big and little

	 * endian format. It assumes that even address bytes are on high

	 * portion of PBUS (15:8) and assumes that HPC3 is programmed to

	 * accept a live (unsynchronized) version of P_DREQ_N from HAL2.

	/*

	 * Ignore what's mentioned in the specification and write value which

	 * works in The Real World (TM)

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Sound driver for Silicon Graphics O2 Workstations A/V board audio.

 *

 *   Copyright 2003 Vivien Chappelier <vivien.chappelier@linux-mips.org>

 *   Copyright 2008 Thomas Bogendoerfer <tsbogend@alpha.franken.de>

 *   Mxier part taken from mace_audio.c:

 *   Copyright 2007 Thorben Jändling <tj.trevelyan@gmail.com>

 Index 0-MAX */

 ID for this card */

 1: reset audio interface */

 1: codec detected */

 1: reset channel */

 1: enable DMA transfer */

 interrupt disabled */

 int on buffer >25% full */

 int on buffer >50% full */

 int on buffer >75% full */

 int on buffer empty */

 int on buffer !empty */

 int on buffer empty */

 int on buffer !empty */

 definition of the chip-specific record */

 codec */

 channels */

 resources */

 AD1843 access */

/*

 * read_ad1843_reg returns the current contents of a 16 bit AD1843 register.

 *

 * Returns unsigned register value on success, -errno on failure.

 flush bus */

/*

 * write_ad1843_reg writes the specified value to a 16 bit AD1843 register.

 flush bus */

 dac1/pcm0 mixer control */

 dac2/pcm1 mixer control */

 record level mixer control */

 record level source control */

 line mixer control */

 cd mixer control */

 mic mixer control */

 low-level audio interface DMA */

 get data out of bounce buffer, count must be a multiple of 32 */

 returns 1 if a period has elapsed */

 check if a period has elapsed */

 in frames */

 in bytes */

 put some DMA data in bounce buffer, count must be a multiple of 32 */

 returns 1 if a period has elapsed */

 check if a period has elapsed */

 in frames */

 sign extend */

 sign extend */

 in bytes */

 reset DMA channel */

 push a full buffer */

 set DMA to wake on 50% empty and enable interrupt */

 empty the ring */

 fill the ring */

 PCM part */

 PCM hardware definition */

 PCM playback open callback */

 PCM capture open callback */

 PCM close callback */

 prepare callback */

 Setup the pseudo-dma transfer pointers.  */

 set AD1843 format */

 hardware format is always S16_LE */

 trigger callback */

 start the PCM engine */

 stop the PCM engine */

 pointer callback */

 get the current hardware pointer */

 operators */

/*

 *  definitions of capture are omitted here...

 create a pcm device */

 create first pcm device with one outputs and one input */

 set operators */

 create second  pcm device with one outputs and no input */

 set operators */

 ALSA driver */

 reset interface */

 release IRQ's */

 release card data */

 check if a codec is attached to the interface */

 (Audio or Audio/Video board present) */

 initialize channels */

 allocate IRQs */

 reset the interface */

 give time to recover */

 set ring base */

 attach the AD1843 codec */

 initialize the AD1843 codec */

 SPDX-License-Identifier: GPL-2.0

/*

 *   Sound driver for Nintendo 64.

 *

 *   Copyright 2021 Lauri Kasanen

	/*

	 * The hw registers are double-buffered, and the IRQ fires essentially

	 * one period behind. The core only allows one period's distance, so we

	 * keep a private DMA buffer to afford two.

 Check it's ours

 3 periods lets the double-buffering hw read one buffer behind safely

	/*

	 * The DMA unit has errata on (start + len) & 0x3fff == 0x2000.

	 * This constraint makes sure that the period size is not a power of two,

	 * which combined with dma_alloc_coherent aligning the buffer to the largest

	 * PoT <= size guarantees it won't be hit.

 Setup the pseudo-dma transfer pointers.  */

/*

 * The target device is embedded and RAM-constrained. We save RAM

 * by initializing in __init code that gets dropped late in boot.

 * For the same reason there is no module or unloading support.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   AD1843 low level driver

 *

 *   Copyright 2003 Vivien Chappelier <vivien.chappelier@linux-mips.org>

 *   Copyright 2008 Thomas Bogendoerfer <tsbogend@alpha.franken.de>

 *

 *   inspired from vwsnd.c (SGI VW audio driver)

 *     Copyright 1999 Silicon Graphics, Inc.  All rights reserved.

/*

 * AD1843 bitfield definitions.  All are named as in the AD1843 data

 * sheet, with ad1843_ prepended and individual bit numbers removed.

 *

 * E.g., bits LSS0 through LSS2 become ad1843_LSS.

 *

 * Only the bitfields we need are defined.

 Converter Power-Down Flag */

 Clock Initialization Flag */

 Right ADC Input Gain */

 Right ADC Mic Gain Enable */

 Right ADC Source Select */

 Left ADC Input Gain */

 Left ADC Mic Gain Enable */

 Left ADC Source Select */

 Right DAC 2 Mix Gain/Atten */

 Right DAC 2 Mix Mute */

 Left DAC 2 Mix Gain/Atten */

 Left DAC 2 Mix Mute */

 Right Aux 1 Mix Gain/Atten */

 Right Aux 1 Mix Mute */

 Left Aux 1 Mix Gain/Atten */

 Left Aux 1 Mix Mute */

 Right Aux 2 Mix Gain/Atten */

 Right Aux 2 Mix Mute */

 Left Aux 2 Mix Gain/Atten */

 Left Aux 2 Mix Mute */

 Right Mic Mix Gain/Atten */

 Right Mic Mix Mute */

 Left Mic Mix Gain/Atten */

 Left Mic Mix Mute */

 Headphone Output Voltage Swing */

 Headphone Output Mute */

 Mono Output Mute */

 Right DAC1 Analog/Digital Gain */

 Right DAC1 Analog Mute */

 Left DAC1 Analog/Digital Gain */

 Left DAC1 Analog Mute */

 Right DAC2 Analog/Digital Gain */

 Right DAC2 Analog Mute */

 Left DAC2 Analog/Digital Gain */

 Left DAC2 Analog Mute */

 Right DAC1 Digital Mute */

 Left DAC1 Digital Mute */

 Right DAC2 Digital Mute */

 Left DAC2 Digital Mute */

 ADC Left Sample Rate Source */

 ADC Right Sample Rate Source */

 DAC1 Sample Rate Source */

 DAC2 Sample Rate Source */

 Clock 1 Sample Rate Select */

 Clock 2 Sample Rate Select */

 Clock 3 Sample Rate Select */

 Digital ADC Left Source Select */

 Digital ADC Right Source Select */

 DAC Digital Mix Enable */

 Digital Reampler Filter Mode */

 ADC Left Channel Data Format */

 ADC Right Channel Data Format */

 ADC Transmit Lock Mode Select */

 SCLK Frequency Select */

 DAC1 Data Format Select */

 DAC2 Data Format Select */

 DAC1 Stereo/Mono Mode Select */

 DAC2 Stereo/Mono Mode Select */

 ADC Left Channel Enable */

 ADC Right Channel Enable */

 Analog to Analog Mix Enable */

 Analog Channel Enable */

 DAC1 Enable */

 DAC2 Enable */

 DAC2 to DAC1 Mix  Enable */

 Clock Generator 1 Enable */

 Clock Generator 2 Enable */

 Clock Generator 3 Enable */

 Converter Power Down */

/*

 * The various registers of the AD1843 use three different formats for

 * specifying gain.  The ad1843_gain structure parameterizes the

 * formats.

 nonzero if gain is negative. */

 read the current value of an AD1843 bitfield. */

/*

 * write a new value to an AD1843 bitfield and return the old value.

/*

 * ad1843_read_multi reads multiple bitfields from the same AD1843

 * register.  It uses a single read cycle to do it.  (Reading the

 * ad1843 requires 256 bit times at 12.288 MHz, or nearly 20

 * microseconds.)

 *

 * Called like this.

 *

 *  ad1843_read_multi(ad1843, nfields,

 *		      &ad1843_FIELD1, &val1,

 *		      &ad1843_FIELD2, &val2, ...);

/*

 * ad1843_write_multi stores multiple bitfields into the same AD1843

 * register.  It uses one read and one write cycle to do it.

 *

 * Called like this.

 *

 *  ad1843_write_multi(ad1843, nfields,

 *		       &ad1843_FIELD1, val1,

 *		       &ad1843_FIELF2, val2, ...);

/*

 * ad1843_get_gain reads the specified register and extracts the gain value

 * using the supplied gain type.

/*

 * Set an audio channel's gain.

 *

 * Returns the new gain, which may be lower than the old gain.

 Returns the current recording source */

/*

 * Set recording source.

 *

 * Returns newsrc on success, -errno on failure.

 Setup ad1843 for D/A conversion. */

 nothing to do */

/*

 * Fully initialize the ad1843.  As described in the AD1843 data

 * sheet, section "START-UP SEQUENCE".  The numbered comments are

 * subsection headings from the data sheet.  See the data sheet, pages

 * 52-54, for more info.

 *

 4. Put the conversion resources into standby. */

 5. Power up the clock generators and enable clock output pins. */

 6. Configure conversion resources while they are in standby. */

 DAC1/2 use clock 1/2 as source, ADC uses clock 3.  Always. */

 7. Enable conversion resources. */

 8. Configure conversion resources while they are enabled. */

 set gain to 0 for all channels */

 Unmute all channels. */

 DAC1 */

 DAC2 */

	/* Set default recording source to Line In and set

	 * mic gain to +20 dB.

 Set Speaker Out level to +/- 4V and unmute it. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for Atmel AC97C

 *

 * Copyright (C) 2005-2009 Atmel Corporation

 Serialize access to opened variable */

 Serialize access to opened variable */

 Set restrictions to params. */

 Set restrictions to params. */

 assign channels to AC97C channel A */

 TODO: support more than two channels */

 configure sample format and size */

 Enable underrun interrupt on channel A */

 Enable channel A event interrupt */

 set variable rate if needed */

 Initialize and start the PDC */

 assign channels to AC97C channel A */

 TODO: support more than two channels */

 configure sample format and size */

 Enable overrun interrupt on channel A */

 Enable channel A event interrupt */

 set variable rate if needed */

 Initialize and start the PDC */

 Playback */

 PCM in */

 Mic in */

 AC97 v2.2 specifications says minimum 1 us. */

 Enable overrun interrupt from codec channel */

 SPDX-License-Identifier: GPL-2.0+

/*

 * virtio-snd: Virtio sound device

 * Copyright (C) 2021 OpenSynergy GmbH

/**

 * struct virtio_pcm_msg - VirtIO I/O message.

 * @substream: VirtIO PCM substream.

 * @xfer: Request header payload.

 * @status: Response header payload.

 * @length: Data length in bytes.

 * @sgs: Payload scatter-gather table.

/**

 * enum pcm_msg_sg_index - Index values for the virtio_pcm_msg->sgs field in

 *                         an I/O message.

 * @PCM_MSG_SG_XFER: Element containing a virtio_snd_pcm_xfer structure.

 * @PCM_MSG_SG_STATUS: Element containing a virtio_snd_pcm_status structure.

 * @PCM_MSG_SG_DATA: The first element containing a data buffer.

/**

 * virtsnd_pcm_sg_num() - Count the number of sg-elements required to represent

 *                        vmalloc'ed buffer.

 * @data: Pointer to vmalloc'ed buffer.

 * @length: Buffer size.

 *

 * Context: Any context.

 * Return: Number of physically contiguous parts in the @data.

/**

 * virtsnd_pcm_sg_from() - Build sg-list from vmalloc'ed buffer.

 * @sgs: Preallocated sg-list to populate.

 * @nsgs: The maximum number of elements in the @sgs.

 * @data: Pointer to vmalloc'ed buffer.

 * @length: Buffer size.

 *

 * Splits the buffer into physically contiguous parts and makes an sg-list of

 * such parts.

 *

 * Context: Any context.

/**

 * virtsnd_pcm_msg_alloc() - Allocate I/O messages.

 * @vss: VirtIO PCM substream.

 * @periods: Current number of periods.

 * @period_bytes: Current period size in bytes.

 *

 * The function slices the buffer into @periods parts (each with the size of

 * @period_bytes), and creates @periods corresponding I/O messages.

 *

 * Context: Any context that permits to sleep.

 * Return: 0 on success, -ENOMEM on failure.

/**

 * virtsnd_pcm_msg_free() - Free all allocated I/O messages.

 * @vss: VirtIO PCM substream.

 *

 * Context: Any context.

/**

 * virtsnd_pcm_msg_send() - Send asynchronous I/O messages.

 * @vss: VirtIO PCM substream.

 *

 * All messages are organized in an ordered circular list. Each time the

 * function is called, all currently non-enqueued messages are added to the

 * virtqueue. For this, the function keeps track of two values:

 *

 *   msg_last_enqueued = index of the last enqueued message,

 *   msg_count = # of pending messages in the virtqueue.

 *

 * Context: Any context. Expects the tx/rx queue and the VirtIO substream

 *          spinlocks to be held by caller.

 * Return: 0 on success, -errno on failure.

/**

 * virtsnd_pcm_msg_pending_num() - Returns the number of pending I/O messages.

 * @vss: VirtIO substream.

 *

 * Context: Any context.

 * Return: Number of messages.

/**

 * virtsnd_pcm_msg_complete() - Complete an I/O message.

 * @msg: I/O message.

 * @written_bytes: Number of bytes written to the message.

 *

 * Completion of the message means the elapsed period. If transmission is

 * allowed, then each completed message is immediately placed back at the end

 * of the queue.

 *

 * For the playback substream, @written_bytes is equal to sizeof(msg->status).

 *

 * For the capture substream, @written_bytes is equal to sizeof(msg->status)

 * plus the number of captured bytes.

 *

 * Context: Interrupt context. Takes and releases the VirtIO substream spinlock.

	/*

	 * hw_ptr always indicates the buffer position of the first I/O message

	 * in the virtqueue. Therefore, on each completion of an I/O message,

	 * the hw_ptr value is unconditionally advanced.

	/*

	 * If the capture substream returned an incorrect status, then just

	 * increase the hw_ptr by the message size.

/**

 * virtsnd_pcm_notify_cb() - Process all completed I/O messages.

 * @queue: Underlying tx/rx virtqueue.

 *

 * Context: Interrupt context. Takes and releases the tx/rx queue spinlock.

/**

 * virtsnd_pcm_tx_notify_cb() - Process all completed TX messages.

 * @vqueue: Underlying tx virtqueue.

 *

 * Context: Interrupt context.

/**

 * virtsnd_pcm_rx_notify_cb() - Process all completed RX messages.

 * @vqueue: Underlying rx virtqueue.

 *

 * Context: Interrupt context.

/**

 * virtsnd_pcm_ctl_msg_alloc() - Allocate and initialize the PCM device control

 *                               message for the specified substream.

 * @vss: VirtIO PCM substream.

 * @command: Control request code (VIRTIO_SND_R_PCM_XXX).

 * @gfp: Kernel flags for memory allocation.

 *

 * Context: Any context. May sleep if @gfp flags permit.

 * Return: Allocated message on success, NULL on failure.

 SPDX-License-Identifier: GPL-2.0+

/*

 * virtio-snd: Virtio sound device

 * Copyright (C) 2021 OpenSynergy GmbH

/**

 * virtsnd_event_send() - Add an event to the event queue.

 * @vqueue: Underlying event virtqueue.

 * @event: Event.

 * @notify: Indicates whether or not to send a notification to the device.

 * @gfp: Kernel flags for memory allocation.

 *

 * Context: Any context.

 reset event content */

/**

 * virtsnd_event_dispatch() - Dispatch an event from the device side.

 * @snd: VirtIO sound device.

 * @event: VirtIO sound event.

 *

 * Context: Any context.

/**

 * virtsnd_event_notify_cb() - Dispatch all reported events from the event queue.

 * @vqueue: Underlying event virtqueue.

 *

 * This callback function is called upon a vring interrupt request from the

 * device.

 *

 * Context: Interrupt context.

/**

 * virtsnd_find_vqs() - Enumerate and initialize all virtqueues.

 * @snd: VirtIO sound device.

 *

 * After calling this function, the event queue is disabled.

 *

 * Context: Any context.

 * Return: 0 on success, -errno on failure.

 Allocate events and populate the event queue */

/**

 * virtsnd_enable_event_vq() - Enable the event virtqueue.

 * @snd: VirtIO sound device.

 *

 * Context: Any context.

/**

 * virtsnd_disable_event_vq() - Disable the event virtqueue.

 * @snd: VirtIO sound device.

 *

 * Context: Any context.

/**

 * virtsnd_build_devs() - Read configuration and build ALSA devices.

 * @snd: VirtIO sound device.

 *

 * Context: Any context that permits to sleep.

 * Return: 0 on success, -errno on failure.

/**

 * virtsnd_validate() - Validate if the device can be started.

 * @vdev: VirtIO parent device.

 *

 * Context: Any context.

 * Return: 0 on success, -EINVAL on failure.

/**

 * virtsnd_probe() - Create and initialize the device.

 * @vdev: VirtIO parent device.

 *

 * Context: Any context that permits to sleep.

 * Return: 0 on success, -errno on failure.

/**

 * virtsnd_remove() - Remove VirtIO and ALSA devices.

 * @vdev: VirtIO parent device.

 *

 * Context: Any context that permits to sleep.

/**

 * virtsnd_freeze() - Suspend device.

 * @vdev: VirtIO parent device.

 *

 * Context: Any context.

 * Return: 0 on success, -errno on failure.

/**

 * virtsnd_restore() - Resume device.

 * @vdev: VirtIO parent device.

 *

 * Context: Any context.

 * Return: 0 on success, -errno on failure.

 CONFIG_PM_SLEEP */

 SPDX-License-Identifier: GPL-2.0+

/*

 * virtio-snd: Virtio sound device

 * Copyright (C) 2021 OpenSynergy GmbH

/**

 * DOC: Implementation Status

 *

 * At the moment jacks have a simple implementation and can only be used to

 * receive notifications about a plugged in/out device.

 *

 * VIRTIO_SND_R_JACK_REMAP

 *   is not supported

/**

 * struct virtio_jack - VirtIO jack.

 * @jack: Kernel jack control.

 * @nid: Functional group node identifier.

 * @features: Jack virtio feature bit map (1 << VIRTIO_SND_JACK_F_XXX).

 * @defconf: Pin default configuration value.

 * @caps: Pin capabilities value.

 * @connected: Current jack connection status.

 * @type: Kernel jack type (SND_JACK_XXX).

/**

 * virtsnd_jack_get_label() - Get the name string for the jack.

 * @vjack: VirtIO jack.

 *

 * Returns the jack name based on the default pin configuration value (see HDA

 * specification).

 *

 * Context: Any context.

 * Return: Name string.

/**

 * virtsnd_jack_get_type() - Get the type for the jack.

 * @vjack: VirtIO jack.

 *

 * Returns the jack type based on the default pin configuration value (see HDA

 * specification).

 *

 * Context: Any context.

 * Return: SND_JACK_XXX value.

/**

 * virtsnd_jack_parse_cfg() - Parse the jack configuration.

 * @snd: VirtIO sound device.

 *

 * This function is called during initial device initialization.

 *

 * Context: Any context that permits to sleep.

 * Return: 0 on success, -errno on failure.

/**

 * virtsnd_jack_build_devs() - Build ALSA controls for jacks.

 * @snd: VirtIO sound device.

 *

 * Context: Any context that permits to sleep.

 * Return: 0 on success, -errno on failure.

/**

 * virtsnd_jack_event() - Handle the jack event notification.

 * @snd: VirtIO sound device.

 * @event: VirtIO sound event.

 *

 * Context: Interrupt context.

 SPDX-License-Identifier: GPL-2.0+

/*

 * virtio-snd: Virtio sound device

 * Copyright (C) 2021 OpenSynergy GmbH

/*

 * I/O messages lifetime

 * ---------------------

 *

 * Allocation:

 *   Messages are initially allocated in the ops->hw_params() after the size and

 *   number of periods have been successfully negotiated.

 *

 * Freeing:

 *   Messages can be safely freed after the queue has been successfully flushed

 *   (RELEASE command in the ops->sync_stop()) and the ops->hw_free() has been

 *   called.

 *

 *   When the substream stops, the ops->sync_stop() waits until the device has

 *   completed all pending messages. This wait can be interrupted either by a

 *   signal or due to a timeout. In this case, the device can still access

 *   messages even after calling ops->hw_free(). It can also issue an interrupt,

 *   and the interrupt handler will also try to access message structures.

 *

 *   Therefore, freeing of already allocated messages occurs:

 *

 *   - in ops->hw_params(), if this operator was called several times in a row,

 *     or if ops->hw_free() failed to free messages previously;

 *

 *   - in ops->hw_free(), if the queue has been successfully flushed;

 *

 *   - in dev->release().

 Map for converting ALSA format to VirtIO format. */

 Map for converting ALSA frame rate to VirtIO frame rate. */

/**

 * virtsnd_pcm_open() - Open the PCM substream.

 * @substream: Kernel ALSA substream.

 *

 * Context: Process context.

 * Return: 0 on success, -errno on failure.

	/*

	 * If the substream has already been used, then the I/O queue may be in

	 * an invalid state. Just in case, we do a check and try to return the

	 * queue to its original state, if necessary.

/**

 * virtsnd_pcm_close() - Close the PCM substream.

 * @substream: Kernel ALSA substream.

 *

 * Context: Process context.

 * Return: 0.

/**

 * virtsnd_pcm_dev_set_params() - Set the parameters of the PCM substream on

 *                                the device side.

 * @vss: VirtIO PCM substream.

 * @buffer_bytes: Size of the hardware buffer.

 * @period_bytes: Size of the hardware period.

 * @channels: Selected number of channels.

 * @format: Selected sample format (SNDRV_PCM_FORMAT_XXX).

 * @rate: Selected frame rate.

 *

 * Context: Any context that permits to sleep.

 * Return: 0 on success, -errno on failure.

/**

 * virtsnd_pcm_hw_params() - Set the parameters of the PCM substream.

 * @substream: Kernel ALSA substream.

 * @hw_params: Hardware parameters.

 *

 * Context: Process context.

 * Return: 0 on success, -errno on failure.

	/*

	 * Free previously allocated messages if ops->hw_params() is called

	 * several times in a row, or if ops->hw_free() failed to free messages.

/**

 * virtsnd_pcm_hw_free() - Reset the parameters of the PCM substream.

 * @substream: Kernel ALSA substream.

 *

 * Context: Process context.

 * Return: 0

 If the queue is flushed, we can safely free the messages here. */

/**

 * virtsnd_pcm_prepare() - Prepare the PCM substream.

 * @substream: Kernel ALSA substream.

 *

 * Context: Process context.

 * Return: 0 on success, -errno on failure.

/**

 * virtsnd_pcm_trigger() - Process command for the PCM substream.

 * @substream: Kernel ALSA substream.

 * @command: Substream command (SNDRV_PCM_TRIGGER_XXX).

 *

 * Context: Any context. Takes and releases the VirtIO substream spinlock.

 *          May take and release the tx/rx queue spinlock.

 * Return: 0 on success, -errno on failure.

/**

 * virtsnd_pcm_sync_stop() - Synchronous PCM substream stop.

 * @substream: Kernel ALSA substream.

 *

 * The function can be called both from the upper level or from the driver

 * itself.

 *

 * Context: Process context. Takes and releases the VirtIO substream spinlock.

 * Return: 0 on success, -errno on failure.

	/*

	 * The spec states that upon receipt of the RELEASE command "the device

	 * MUST complete all pending I/O messages for the specified stream ID".

	 * Thus, we consider the absence of I/O messages in the queue as an

	 * indication that the substream has been released.

/**

 * virtsnd_pcm_pointer() - Get the current hardware position for the PCM

 *                         substream.

 * @substream: Kernel ALSA substream.

 *

 * Context: Any context. Takes and releases the VirtIO substream spinlock.

 * Return: Hardware position in frames inside [0 ... buffer_size) range.

 PCM substream operators map. */

 SPDX-License-Identifier: GPL-2.0+

/*

 * virtio-snd: Virtio sound device

 * Copyright (C) 2021 OpenSynergy GmbH

/**

 * struct virtio_snd_msg - Control message.

 * @sg_request: Scattergather list containing a device request (header).

 * @sg_response: Scattergather list containing a device response (status).

 * @list: Pending message list entry.

 * @notify: Request completed notification.

 * @ref_count: Reference count used to manage a message lifetime.

/**

 * virtsnd_ctl_msg_ref() - Increment reference counter for the message.

 * @msg: Control message.

 *

 * Context: Any context.

/**

 * virtsnd_ctl_msg_unref() - Decrement reference counter for the message.

 * @msg: Control message.

 *

 * The message will be freed when the ref_count value is 0.

 *

 * Context: Any context.

/**

 * virtsnd_ctl_msg_request() - Get a pointer to the request header.

 * @msg: Control message.

 *

 * Context: Any context.

/**

 * virtsnd_ctl_msg_response() - Get a pointer to the response header.

 * @msg: Control message.

 *

 * Context: Any context.

/**

 * virtsnd_ctl_msg_alloc() - Allocate and initialize a control message.

 * @request_size: Size of request header.

 * @response_size: Size of response header.

 * @gfp: Kernel flags for memory allocation.

 *

 * The message will be automatically freed when the ref_count value is 0.

 *

 * Context: Any context. May sleep if @gfp flags permit.

 * Return: Allocated message on success, NULL on failure.

 This reference is dropped in virtsnd_ctl_msg_complete(). */

/**

 * virtsnd_ctl_msg_send() - Send a control message.

 * @snd: VirtIO sound device.

 * @msg: Control message.

 * @out_sgs: Additional sg-list to attach to the request header (may be NULL).

 * @in_sgs: Additional sg-list to attach to the response header (may be NULL).

 * @nowait: Flag indicating whether to wait for completion.

 *

 * Context: Any context. Takes and releases the control queue spinlock.

 *          May sleep if @nowait is false.

 * Return: 0 on success, -errno on failure.

 Set the default status in case the message was canceled. */

		/*

		 * Since in this case virtsnd_ctl_msg_complete() will not be

		 * called, it is necessary to decrement the reference count.

/**

 * virtsnd_ctl_msg_complete() - Complete a control message.

 * @msg: Control message.

 *

 * Context: Any context. Expects the control queue spinlock to be held by

 *          caller.

/**

 * virtsnd_ctl_msg_cancel_all() - Cancel all pending control messages.

 * @snd: VirtIO sound device.

 *

 * Context: Any context.

/**

 * virtsnd_ctl_query_info() - Query the item configuration from the device.

 * @snd: VirtIO sound device.

 * @command: Control request code (VIRTIO_SND_R_XXX_INFO).

 * @start_id: Item start identifier.

 * @count: Item count to query.

 * @size: Item information size in bytes.

 * @info: Buffer for storing item information.

 *

 * Context: Any context that permits to sleep.

 * Return: 0 on success, -errno on failure.

/**

 * virtsnd_ctl_notify_cb() - Process all completed control messages.

 * @vqueue: Underlying control virtqueue.

 *

 * This callback function is called upon a vring interrupt request from the

 * device.

 *

 * Context: Interrupt context. Takes and releases the control queue spinlock.

 SPDX-License-Identifier: GPL-2.0+

/*

 * virtio-snd: Virtio sound device

 * Copyright (C) 2021 OpenSynergy GmbH

 VirtIO->ALSA channel position map */

/**

 * virtsnd_chmap_parse_cfg() - Parse the channel map configuration.

 * @snd: VirtIO sound device.

 *

 * This function is called during initial device initialization.

 *

 * Context: Any context that permits to sleep.

 * Return: 0 on success, -errno on failure.

 Count the number of channel maps per each PCM device/stream. */

/**

 * virtsnd_chmap_add_ctls() - Create an ALSA control for channel maps.

 * @pcm: ALSA PCM device.

 * @direction: PCM stream direction (SNDRV_PCM_STREAM_XXX).

 * @vs: VirtIO PCM stream.

 *

 * Context: Any context.

 * Return: 0 on success, -errno on failure.

/**

 * virtsnd_chmap_build_devs() - Build ALSA controls for channel maps.

 * @snd: VirtIO sound device.

 *

 * Context: Any context.

 * Return: 0 on success, -errno on failure.

 Allocate channel map elements per each PCM device/stream. */

 Initialize channel maps per each PCM device/stream. */

 Create an ALSA control per each PCM device/stream. */

 SPDX-License-Identifier: GPL-2.0+

/*

 * virtio-snd: Virtio sound device

 * Copyright (C) 2021 OpenSynergy GmbH

 Map for converting VirtIO format to ALSA format. */

 Map for converting VirtIO frame rate to ALSA frame rate. */

/**

 * virtsnd_pcm_build_hw() - Parse substream config and build HW descriptor.

 * @vss: VirtIO substream.

 * @info: VirtIO substream information entry.

 *

 * Context: Any context.

 * Return: 0 on success, -EINVAL if configuration is invalid.

	/*

	 * TODO: set SNDRV_PCM_INFO_{BATCH,BLOCK_TRANSFER} if device supports

	 * only message-based transport.

	/*

	 * We must ensure that there is enough space in the buffer to store

	 * pcm_buffer_ms ms for the combination (Cmax, Smax, Rmax), where:

	 *   Cmax = maximum supported number of channels,

	 *   Smax = maximum supported sample size in bytes,

	 *   Rmax = maximum supported frame rate.

	/*

	 * We must ensure that the minimum period size is enough to store

	 * pcm_period_ms_min ms for the combination (Cmin, Smin, Rmin), where:

	 *   Cmin = minimum supported number of channels,

	 *   Smin = minimum supported sample size in bytes,

	 *   Rmin = minimum supported frame rate.

	/*

	 * We must ensure that the maximum period size is enough to store

	 * pcm_period_ms_max ms for the combination (Cmax, Smax, Rmax).

/**

 * virtsnd_pcm_find() - Find the PCM device for the specified node ID.

 * @snd: VirtIO sound device.

 * @nid: Function node ID.

 *

 * Context: Any context.

 * Return: a pointer to the PCM device or ERR_PTR(-ENOENT).

/**

 * virtsnd_pcm_find_or_create() - Find or create the PCM device for the

 *                                specified node ID.

 * @snd: VirtIO sound device.

 * @nid: Function node ID.

 *

 * Context: Any context that permits to sleep.

 * Return: a pointer to the PCM device or ERR_PTR(-errno).

/**

 * virtsnd_pcm_validate() - Validate if the device can be started.

 * @vdev: VirtIO parent device.

 *

 * Context: Any context.

 * Return: 0 on success, -EINVAL on failure.

/**

 * virtsnd_pcm_period_elapsed() - Kernel work function to handle the elapsed

 *                                period state.

 * @work: Elapsed period work.

 *

 * The main purpose of this function is to call snd_pcm_period_elapsed() in

 * a process context, not in an interrupt context. This is necessary because PCM

 * devices operate in non-atomic mode.

 *

 * Context: Process context.

/**

 * virtsnd_pcm_parse_cfg() - Parse the stream configuration.

 * @snd: VirtIO sound device.

 *

 * This function is called during initial device initialization.

 *

 * Context: Any context that permits to sleep.

 * Return: 0 on success, -errno on failure.

/**

 * virtsnd_pcm_build_devs() - Build ALSA PCM devices.

 * @snd: VirtIO sound device.

 *

 * Context: Any context that permits to sleep.

 * Return: 0 on success, -errno on failure.

/**

 * virtsnd_pcm_event() - Handle the PCM device event notification.

 * @snd: VirtIO sound device.

 * @event: VirtIO sound event.

 *

 * Context: Interrupt context.

 TODO: deal with shmem elapsed period */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *   intel_hdmi_audio.c - Intel HDMI audio driver

 *

 *  Copyright (C) 2016 Intel Corp

 *  Authors:	Sailaja Bandarupalli <sailaja.bandarupalli@intel.com>

 *		Ramesh Babu K V	<ramesh.babu@intel.com>

 *		Vaibhav Agarwal <vaibhav.agarwal@intel.com>

 *		Jerome Anand <jerome.anand@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 * ALSA driver for Intel HDMI audio

standard module options for ALSA. This module supports only one card*/

/*

 * ELD SA bits in the CEA Speaker Allocation data block

 the following are not defined in ELD yet */

/*

 * This is an ordered list!

 *

 * The preceding ones have better chances to be selected by

 * hdmi_channel_allocation().

                        channel:   7     6    5    4    3     2    1    0  */

 2.1 */

 Dolby Surround */

 surround40 */

 surround41 */

 surround50 */

 surround51 */

 6.1 */

 surround71 */

 terminator */

 hardware capability structure */

/* Get the active PCM substream;

 * Call had_substream_put() for unreferecing.

 * Don't call this inside had_spinlock, as it takes by itself

/* Unref the active PCM substream;

 * Don't call this inside had_spinlock, as it takes by itself

 Register access functions */

/*

 * enable / disable audio configuration

 *

 * The normal read/modify should not directly be used on VLV2 for

 * updating AUD_CONFIG register.

 * This is because:

 * Bit6 of AUD_CONFIG register is writeonly due to a silicon bug on VLV2

 * HDMI IP. As a result a read-modify of AUD_CONFIG register will always

 * clear bit6. AUD_CONFIG[6:4] represents the "channels" field of the

 * register. This field should be 1xy binary for configuration with 6 or

 * more channels. Read-modify of AUD_CONFIG (Eg. for enabling audio)

 * causes the "channels" field to be updated as 0xy binary resulting in

 * bad audio. The fix is to always write the AUD_CONFIG[6:4] with

 * appropriate value when doing read-modify of AUD_CONFIG register.

 update the cached value */

 forcibly ACKs to both BUFFER_DONE and BUFFER_UNDERRUN interrupts */

 Reset buffer pointers */

/*

 * initialize audio channel status registers

 * This function is called in the prepare callback

 control should never come here */

/*

 * function to initialize audio

 * registers and buffer configuration registers

 * This function is called in the prepare callback

 fix up the DP bits */

/*

 * Compute derived values in channel_allocations[].

/*

 * The transformation takes two steps:

 *

 *      eld->spk_alloc => (eld_speaker_allocation_bits[]) => spk_mask

 *            spk_mask => (channel_allocations[])         => ai->CA

 *

 * TODO: it could select the wrong CA from multiple candidates.

	/*

	 * CA defaults to 0 for basic stereo audio

	/*

	 * expand ELD's speaker allocation mask

	 *

	 * ELD tells the speaker mask in a compact(paired) form,

	 * expand ELD's notions to match the ones used by Audio InfoFrame.

 search for the first working match in the CA table */

 from speaker bit mask to ALSA API channel position */

 WA: Fix the max channel supported to 8 */

	/*

	 * Sink may support more than 8 channels, if eld_high has more than

	 * one bit set. SOC supports max 8 channels.

	 * Refer eld_speaker_allocation_bits, for sink speaker allocation

 if 0x2F < eld < 0x4F fall back to 0x2f, else fall back to 0x4F */

 eld_high & (eld_high-1): if more than 1 bit set */

 0x1F: 7 channels */

/*

 * ALSA API channel-map control callbacks

/*

 * Initialize Data Island Packets registers

 * This function is called in the prepare callback

 Calculte the byte wide checksum for all valid DIP words */

 program remaining DIP words with zero */

 Select maud according to DP 1.2 spec */

/*

 * Program HDMI audio CTS value

 *

 * @aud_samp_freq: sampling frequency of audio data

 * @tmds: sampling frequency of the display data

 * @link_rate: DP link rate

 * @n_param: N value, depends on aud_samp_freq

 * @intelhaddata: substream private data

 *

 * Program CTS register based on the audio and display sampling frequency

 Substitute cts_val with Maud according to DP 1.2 spec*/

 Calculate CTS according to HDMI 1.3a spec*/

 Select N according to HDMI 1.3a spec*/

/*

 * Program HDMI audio N value

 *

 * @aud_samp_freq: sampling frequency of audio data

 * @n_param: N value, depends on aud_samp_freq

 * @intelhaddata: substream private data

 *

 * This function is called in the prepare callback.

 * It programs based on the audio and display sampling frequency

		/*

		 * According to DP specs, Maud and Naud values hold

		 * a relationship, which is stated as:

		 * Maud/Naud = 512 * fs / f_LS_Clk

		 * where, fs is the sampling frequency of the audio stream

		 * and Naud is 32768 for Async clock.

/*

 * PCM ring buffer handling

 *

 * The hardware provides a ring buffer with the fixed 4 buffer descriptors

 * (BDs).  The driver maps these 4 BDs onto the PCM ring buffer.  The mapping

 * moves at each period elapsed.  The below illustrates how it works:

 *

 * At time=0

 *  PCM | 0 | 1 | 2 | 3 | 4 | 5 | .... |n-1|

 *  BD  | 0 | 1 | 2 | 3 |

 *

 * At time=1 (period elapsed)

 *  PCM | 0 | 1 | 2 | 3 | 4 | 5 | .... |n-1|

 *  BD      | 1 | 2 | 3 | 0 |

 *

 * At time=2 (second period elapsed)

 *  PCM | 0 | 1 | 2 | 3 | 4 | 5 | .... |n-1|

 *  BD          | 2 | 3 | 0 | 1 |

 *

 * The bd_head field points to the index of the BD to be read.  It's also the

 * position to be filled at next.  The pcm_head and the pcm_filled fields

 * point to the indices of the current position and of the next position to

 * be filled, respectively.  For PCM buffer there are both _head and _filled

 * because they may be difference when nperiods > 4.  For example, in the

 * example above at t=1, bd_head=1 and pcm_head=1 while pcm_filled=5:

 *

 * pcm_head (=1) --v               v-- pcm_filled (=5)

 *       PCM | 0 | 1 | 2 | 3 | 4 | 5 | .... |n-1|

 *       BD      | 1 | 2 | 3 | 0 |

 *  bd_head (=1) --^               ^-- next to fill (= bd_head)

 *

 * For nperiods < 4, the remaining BDs out of 4 are marked as invalid, so that

 * the hardware skips those BDs in the loop.

 *

 * An exceptional setup is the case with nperiods=1.  Since we have to update

 * BDs after finishing one BD processing, we'd need at least two BDs, where

 * both BDs point to the same content, the same address, the same size of the

 * whole PCM buffer.

 Set up a buffer descriptor at the "filled" position */

 advance the indices to the next */

 invalidate a buffer descriptor with the given index */

 Initial programming of ring buffer */

 set the minimum 2 BDs for num_periods=1 */

 invalidate the rest */

 reset at head again before starting */

 process a bd, advance to the next */

 reprogram the next buffer */

 proceed to next */

/* process the current BD(s);

 * returns the current PCM buffer byte position, or -EPIPE for underrun.

 get the remaining bytes on the buffer */

 OK, this is the current buffer */

 len=0 => already empty, check the next buffer */

 all empty? - report underrun */

 called from irq handler */

 no stream? - bail out */

 disconnected? - bail out */

 process or stop the stream */

/*

 * The interrupt status 'sticky' bits might not be cleared by

 * setting '1' to that bit once...

 clear bit30, 31 AUD_HDMI_STATUS */

/* Perform some reset procedure after stopping the stream;

 * this is called from prepare or hw_free callbacks once after trigger STOP

 * or underrun has been processed in order to settle down the h/w state.

 Reset buffer pointers */

 called from irq handler */

 Report UNDERRUN error to above layers */

/*

 * ALSA PCM open callback

 set the runtime hw parameter with local snd_pcm_hardware struct */

	/* Make sure, that the period size is always aligned

	 * 64byte boundary

 expose PCM substream */

/*

 * ALSA PCM close callback

 unreference and sync with the pending PCM accesses */

/*

 * ALSA PCM hw_params callback

/*

 * ALSA PCM trigger callback

 Enable Audio */

 FIXME: do we need this? */

 Disable Audio */

/*

 * ALSA PCM prepare callback

 Get N value in KHz */

 Prog buffer address */

	/*

	 * Program channel mapping in following order:

	 * FL, FR, C, LFE, RL, RR

/*

 * ALSA PCM pointer callback

 wrapping may happen when periods=1 */

/*

 * ALSA PCM mmap callback

/*

 * ALSA PCM ops

 process mode change of the running stream; called in mutex */

 Disable Audio */

 Update CTS value */

 Enable Audio */

 process hot plug, called from wq with mutex locked */

 Disable Audio */

 Report to above ALSA layer */

 process hot unplug, called from wq with mutex locked */

 Disable Audio */

 Report to above ALSA layer */

/*

 * ALSA iec958 and ELD controls

 shared */

/*

 * audio interrupt handler

 use raw register access to ack IRQs even while disconnected */

/*

 * monitor plug/unplug notification from i915; just kick off the work

 the work to handle monitor hot plug/unplug */

 clear the old ELD */

 Shut down the stream */

		/*

		 * Shut down the stream before we change

		 * the pipe assignment for this pcm device

 Restart the stream if necessary */

/*

 * Jack interface

/*

 * PM callbacks

 release resources */

/*

 * hdmi_lpe_audio_probe - start bridge with i915

 *

 * This function is called when the i915 driver creates the

 * hdmi-lpe-audio platform device.

 get resources */

 create a card instance with ALSA framework */

 setup interrupt handler */

 only 32bit addressable */

 setup private data which can be retrieved when required */

 setup the ops for playback */

		/* allocate dma pages;

		 * try to allocate 600k buffer as default which is large enough

 create controls */

 Register channel map controls */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2016 Robert Jarzmik <robert.jarzmik@free.fr>

/*

 * Protects ac97_controllers and each ac97_controller structure.

/**

 * snd_ac97_codec_driver_register - register an AC97 codec driver

 * @dev: AC97 driver codec to register

 *

 * Register an AC97 codec driver to the ac97 bus driver, aka. the AC97 digital

 * controller.

 *

 * Returns 0 on success or error code

/**

 * snd_ac97_codec_driver_unregister - unregister an AC97 codec driver

 * @dev: AC97 codec driver to unregister

 *

 * Unregister a previously registered ac97 codec driver.

/**

 * snd_ac97_codec_get_platdata - get platform_data

 * @adev: the ac97 codec device

 *

 * For legacy platforms, in order to have platform_data in codec drivers

 * available, while ac97 device are auto-created upon probe, this retrieves the

 * platdata which was setup on ac97 controller registration.

 *

 * Returns the platform data pointer

/**

 * snd_ac97_controller_register - register an ac97 controller

 * @ops: the ac97 bus operations

 * @dev: the device providing the ac97 DC function

 * @slots_available: mask of the ac97 codecs that can be scanned and probed

 *                   bit0 => codec 0, bit1 => codec 1 ... bit 3 => codec 3

 *

 * Register a digital controller which can control up to 4 ac97 codecs. This is

 * the controller side of the AC97 AC-link, while the slave side are the codecs.

 *

 * Returns a valid controller upon success, negative pointer value upon error

/**

 * snd_ac97_controller_unregister - unregister an ac97 controller

 * @ac97_ctrl: the device previously provided to ac97_controller_register()

 *

 CONFIG_PM */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright (C) 2016 Robert Jarzmik <robert.jarzmik@free.fr>

 For compat_ac97_* */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  Copyright (C) 2016 Robert Jarzmik <robert.jarzmik@free.fr>

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2019 Jaroslav Kysela <perex@perex.cz>

/*

 * configuration table

 * - the order of similar PCI ID entries is important!

 * - the first successful match will win

 Merrifield */

 Broxton-T */

/*

 * Apollolake (Broxton-P)

 * the legacy HDAudio driver is used except on Up Squared (SOF) and

 * Chromebooks (SST), as well as devices based on the ES8336 codec

/*

 * Skylake and Kabylake use legacy HDAudio driver except for Google

 * Chromebooks (SST)

 Sunrise Point-LP */

 Kabylake-LP */

/*

 * Geminilake uses legacy HDAudio driver except for Google

 * Chromebooks and devices based on the ES8336 codec

 Geminilake */

/*

 * CoffeeLake, CannonLake, CometLake, IceLake, TigerLake use legacy

 * HDAudio driver except for Google Chromebooks and when DMICs are

 * present. Two cases are required since Coreboot does not expose NHLT

 * tables.

 *

 * When the Chromebook quirk is not present, it's based on information

 * that no such device exists. When the quirk is present, it could be

 * either based on product information or a placeholder.

 Cannonlake */

 Coffelake */

 Cometlake-LP */

 early version of SKU 09C6 */

 Cometlake-H */

 Icelake */

 Tigerlake */

 Elkhart Lake */

 Alder Lake */

 Intel vendor only */

	/*

	 * Legacy devices don't have a PCI-based DSP and use HDaudio

	 * for HDMI/DP support, ignore kernel parameter

 Broadwell */

 Haswell */

 Baytrail */

 Braswell */

	/*

	 * detect DSP by checking class/subclass/prog-id information

	 * class=04 subclass 03 prog-if 00: no DSP, use legacy driver

	 * class=04 subclass 01 prog-if 00: DSP is present

	 *  (and may be required e.g. for DMIC or SSP support)

	 * class=04 subclass 03 prog-if 80: use DSP or legacy mode

 find the configuration for the specific device */

 Should we default to SOF or SST for BYT/CHT ? */

/*

 * configuration table

 * - the order of similar ACPI ID entries is important!

 * - the first successful match will win

 BayTrail */

 CherryTrail */

 Broadwell */

 Haswell - not supported by SOF but added for consistency */

 find the configuration for the specific device */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * HD-audio bus

/**

 * hdac_get_device_id - gets the hdac device id entry

 * @hdev: HD-audio core device

 * @drv: HD-audio codec driver

 *

 * Compares the hdac device vendor_id and revision_id to the hdac_device

 * driver id_table and returns the matching device id entry.

	/*

	 * if driver provided a match function use that otherwise we will

	 * use hdac_codec_match function

 SPDX-License-Identifier: GPL-2.0

 hdac_component.c - routines for sync between HD-A core and DRM driver

/**

 * snd_hdac_set_codec_wakeup - Enable / disable HDMI/DP codec wakeup

 * @bus: HDA core bus

 * @enable: enable or disable the wakeup

 *

 * This function is supposed to be used only by a HD-audio controller

 * driver that needs the interaction with graphics driver.

 *

 * This function should be called during the chip reset, also called at

 * resume for updating STATESTS register read.

 *

 * Returns zero for success or a negative error code.

/**

 * snd_hdac_display_power - Power up / down the power refcount

 * @bus: HDA core bus

 * @idx: HDA codec address, pass HDA_CODEC_IDX_CONTROLLER for controller

 * @enable: power up or down

 *

 * This function is used by either HD-audio controller or codec driver that

 * needs the interaction with graphics driver.

 *

 * This function updates the power status, and calls the get_power() and

 * put_power() ops accordingly, toggling the codec wakeup, too.

/**

 * snd_hdac_sync_audio_rate - Set N/CTS based on the sample rate

 * @codec: HDA codec

 * @nid: the pin widget NID

 * @dev_id: device identifier

 * @rate: the sample rate to set

 *

 * This function is supposed to be used only by a HD-audio controller

 * driver that needs the interaction with graphics driver.

 *

 * This function sets N/CTS value based on the given sample rate.

 * Returns zero for success, or a negative error code.

/**

 * snd_hdac_acomp_get_eld - Get the audio state and ELD via component

 * @codec: HDA codec

 * @nid: the pin widget NID

 * @dev_id: device identifier

 * @audio_enabled: the pointer to store the current audio state

 * @buffer: the buffer pointer to store ELD bytes

 * @max_bytes: the max bytes to be stored on @buffer

 *

 * This function is supposed to be used only by a HD-audio controller

 * driver that needs the interaction with graphics driver.

 *

 * This function queries the current state of the audio on the given

 * digital port and fetches the ELD bytes onto the given buffer.

 * It returns the number of bytes for the total ELD data, zero for

 * invalid ELD, or a negative error code.

 *

 * The return size is the total bytes required for the whole ELD bytes,

 * thus it may be over @max_bytes.  If it's over @max_bytes, it implies

 * that only a part of ELD bytes have been fetched.

 pin the module to avoid dynamic unbinding, but only if given */

/**

 * snd_hdac_acomp_register_notifier - Register audio component ops

 * @bus: HDA core bus

 * @aops: audio component ops

 *

 * This function is supposed to be used only by a HD-audio controller

 * driver that needs the interaction with graphics driver.

 *

 * This function sets the given ops to be called by the graphics driver.

 *

 * Returns zero for success or a negative error code.

/**

 * snd_hdac_acomp_init - Initialize audio component

 * @bus: HDA core bus

 * @aops: audio component ops

 * @match_master: match function for finding components

 * @extra_size: Extra bytes to allocate

 *

 * This function is supposed to be used only by a HD-audio controller

 * driver that needs the interaction with graphics driver.

 *

 * This function initializes and sets up the audio component to communicate

 * with graphics driver.

 *

 * Unlike snd_hdac_i915_init(), this function doesn't synchronize with the

 * binding with the DRM component.  Each caller needs to sync via master_bind

 * audio_ops.

 *

 * Returns zero for success or a negative error code.

/**

 * snd_hdac_acomp_exit - Finalize audio component

 * @bus: HDA core bus

 *

 * This function is supposed to be used only by a HD-audio controller

 * driver that needs the interaction with graphics driver.

 *

 * This function releases the audio component that has been used.

 *

 * Returns zero for success or a negative error code.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * HDMI Channel map support helpers

/*

 * CEA speaker placement:

 *

 *        FLH       FCH        FRH

 *  FLW    FL  FLC   FC   FRC   FR   FRW

 *

 *                                  LFE

 *                     TC

 *

 *          RL  RLC   RC   RRC   RR

 *

 * The Left/Right Surround channel _notions_ LS/RS in SMPTE 320M corresponds to

 * CEA RL/RR; The SMPTE channel _assignment_ C/LFE is swapped to CEA LFE/FC.

 Front Left           */

 Front Center         */

 Front Right          */

 Front Left Center    */

 Front Right Center   */

 Rear Left            */

 Rear Center          */

 Rear Right           */

 Rear Left Center     */

 Rear Right Center    */

 Low Frequency Effect */

 Front Left Wide      */

 Front Right Wide     */

 Front Left High      */

 Front Center High    */

 Front Right High     */

 Top Center           */

  0 */ "FL/FR",

  1 */ "LFE",

  2 */ "FC",

  3 */ "RL/RR",

  4 */ "RC",

  5 */ "FLC/FRC",

  6 */ "RLC/RRC",

  7 */ "FLW/FRW",

  8 */ "FLH/FRH",

  9 */ "TC",

 10 */ "FCH",

/*

 * ELD SA bits in the CEA Speaker Allocation data block

 the following are not defined in ELD yet */

/*

 * ALSA sequence is:

 *

 *       surround40   surround41   surround50   surround51   surround71

 * ch0   front left   =            =            =            =

 * ch1   front right  =            =            =            =

 * ch2   rear left    =            =            =            =

 * ch3   rear right   =            =            =            =

 * ch4                LFE          center       center       center

 * ch5                                          LFE          LFE

 * ch6                                                       side left

 * ch7                                                       side right

 *

 * surround71 = {FL, FR, RLC, RRC, FC, LFE, RL, RR}

 stereo */

 2.1 */

 Dolby Surround */

 surround40 */

 4ch */

 surround41 */

 surround50 */

 surround51 */

 7.1 */

/*

 * This is an ordered list!

 *

 * The preceding ones have better chances to be selected by

 * hdmi_channel_allocation().

			  channel:   7     6    5    4    3     2    1    0  */

 2.1 */

 Dolby Surround */

 surround40 */

 surround41 */

 surround50 */

 surround51 */

 6.1 */

 surround71 */

/*

 * Channel mapping routines

/*

 * Compute derived values in channel_allocations[].

 necessary when j == 0 */

/*

 * The transformation takes two steps:

 *

 *	eld->spk_alloc => (eld_speaker_allocation_bits[]) => spk_mask

 *	      spk_mask => (channel_allocations[])         => ai->CA

 *

 * TODO: it could select the wrong CA from multiple candidates.

	/*

	 * CA defaults to 0 for basic stereo audio

	/*

	 * expand ELD's speaker allocation mask

	 *

	 * ELD tells the speaker mask in a compact(paired) form,

	 * expand ELD's notions to match the ones used by Audio InfoFrame.

 search for the first working match in the CA table */

		/*

		 * if there was no match, select the regular ALSA channel

		 * allocation with the matching number of channels

 fill actual channel mappings in ALSA channel (i) order */

 skip zero slots */

 fill the rest of the slots with ALSA channel 0xf */

 ALSA API channel map position */

 speaker position bit mask */

 terminator */

 from ALSA API channel position to speaker bit mask */

 from ALSA API channel position to CEA slot */

	/* Add sanity check to pass klockwork check.

	 * This should never happen.

 from speaker bit mask to ALSA API channel position */

 from CEA slot to ALSA API channel position */

	/* Add sanity check to pass klockwork check.

	 * This should never happen.

 get the CA index corresponding to the given ALSA API channel map */

 set up the channel slots for the given ALSA API channel map */

 unassigned channel */

 store ALSA API channel map from the current default map */

	/* Add sanity check to pass klockwork check.

	 * This should never happen.

/*

 * ALSA API channel-map control callbacks

 If the speaker allocation matches the channel count, it is OK.*/

 all channels are remappable freely */

	/* No monitor is connected in dyn_pcm_assign.

	 * It's invalid to setup the chmap

 just for avoiding error from alsactl restore */

 override handlers */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * HD-audio controller helpers

 clear CORB read pointer properly */

/**

 * snd_hdac_bus_init_cmd_io - set up CORB/RIRB buffers

 * @bus: HD-audio core bus

 CORB set up */

 set the corb size to 256 entries (ULI requires explicitly) */

 set the corb write pointer to 0 */

 reset the corb hw read pointer */

 enable corb dma */

 RIRB set up */

 set the rirb size to 256 entries (ULI requires explicitly) */

 reset the rirb hw write pointer */

 set N=1, get RIRB response interrupt for new entry */

 enable rirb dma and response irq */

 Accept unsolicited responses */

 wait for cmd dmas till they are stopped */

/**

 * snd_hdac_bus_stop_cmd_io - clean up CORB/RIRB buffers

 * @bus: HD-audio core bus

 disable ringbuffer DMAs */

 disable unsolicited responses */

/**

 * snd_hdac_bus_send_cmd - send a command verb via CORB

 * @bus: HD-audio core bus

 * @val: encoded verb value to send

 *

 * Returns zero for success or a negative error code.

 add command to corb */

 something wrong, controller likely turned to D3 */

 oops, it's full */

/**

 * snd_hdac_bus_update_rirb - retrieve RIRB entries

 * @bus: HD-audio core bus

 *

 * Usually called from interrupt handler.

 * The caller needs bus->reg_lock spinlock before calling this.

 something wrong, controller likely turned to D3 */

 an RIRB entry is 8-bytes */

/**

 * snd_hdac_bus_get_response - receive a response via RIRB

 * @bus: HD-audio core bus

 * @addr: codec address

 * @res: pointer to store the value, NULL when not needed

 *

 * Returns zero if a value is read, or a negative error code.

 the last value */

 temporary workaround */

/**

 * snd_hdac_bus_parse_capabilities - parse capability structure

 * @bus: the pointer to bus object

 *

 * Returns 0 if successful, or a negative error code.

 Lets walk the linked capabilities list */

 PP capability found, the Audio DSP is present */

 SPIB capability found, handler function */

 DMA resume  capability found, handler function */

 read the offset of next capability */

/*

 * Lowlevel interface

/**

 * snd_hdac_bus_enter_link_reset - enter link reset

 * @bus: HD-audio core bus

 *

 * Enter to the link reset state.

 reset controller */

/**

 * snd_hdac_bus_exit_link_reset - exit link reset

 * @bus: HD-audio core bus

 *

 * Exit from the link reset state.

 reset codec link */

 clear STATESTS if not in reset */

 reset controller */

	/* delay for >= 100us for codec PLL to settle per spec

	 * Rev 0.9 section 5.5.1

 Bring controller out of reset */

 Brent Chartrand said to wait >= 540us for codecs to initialize */

 check to see if controller is ready */

 detect codecs */

 enable interrupts */

 enable controller CIE and GIE */

 disable interrupts */

 disable interrupts in stream descriptor */

 disable SIE for all streams */

 disable controller CIE and GIE */

 clear interrupts */

 clear stream status */

 clear STATESTS */

 clear rirb status */

 clear int status */

/**

 * snd_hdac_bus_init_chip - reset and start the controller registers

 * @bus: HD-audio core bus

 * @full_reset: Do full reset

 reset controller */

 clear interrupts */

 initialize the codec command I/O */

 enable interrupts after CORB/RIRB buffers are initialized above */

 program the position buffer */

/**

 * snd_hdac_bus_stop_chip - disable the whole IRQ and I/Os

 * @bus: HD-audio core bus

 disable interrupts */

 disable CORB/RIRB */

 disable position buffer */

/**

 * snd_hdac_bus_handle_stream_irq - interrupt handler for streams

 * @bus: HD-audio core bus

 * @status: INTSTS register value

 * @ack: callback to be called for woken streams

 *

 * Returns the bits of handled streams, or zero if no stream is handled.

/**

 * snd_hdac_bus_alloc_stream_pages - allocate BDL and other buffers

 * @bus: HD-audio core bus

 *

 * Call this after assigning the all streams.

 * Returns zero for success, or a negative error code.

 allocate memory for the BDL for each stream */

 allocate memory for the position buffer */

 single page (at least 4096 bytes) must suffice for both ringbuffes */

/**

 * snd_hdac_bus_free_stream_pages - release BDL and other buffers

 * @bus: HD-audio core bus

/**

 * snd_hdac_bus_link_power - power up/down codec link

 * @codec: HD-audio device

 * @enable: whether to power-up the link

 SPDX-License-Identifier: GPL-2.0-only

/*

 * HD-audio stream operations

/**

 * snd_hdac_get_stream_stripe_ctl - get stripe control value

 * @bus: HD-audio core bus

 * @substream: PCM substream

 T_AZA_GCAP_NSDO is 1:2 bitfields in GCAP */

 following is from HD audio spec */

 stripe value: 0 for 1SDO, 1 for 2SDO, 2 for 4SDO lines */

/**

 * snd_hdac_stream_init - initialize each stream (aka device)

 * @bus: HD-audio core bus

 * @azx_dev: HD-audio core stream object to initialize

 * @idx: stream index number

 * @direction: stream direction (SNDRV_PCM_STREAM_PLAYBACK or SNDRV_PCM_STREAM_CAPTURE)

 * @tag: the tag id to assign

 *

 * Assign the starting bdl address to each stream (device) and initialize.

 offset: SDI0=0x80, SDI1=0xa0, ... SDO3=0x160 */

 int mask: SDI0=0x01, SDI1=0x02, ... SDO3=0x80 */

/**

 * snd_hdac_stream_start - start a stream

 * @azx_dev: HD-audio core stream to start

 * @fresh_start: false = wallclock timestamp relative to period wallclock

 *

 * Start a stream, set start_wallclk and set the running flag.

 enable SIE */

 set stripe control */

 set DMA start and interrupt mask */

/**

 * snd_hdac_stream_clear - stop a stream DMA

 * @azx_dev: HD-audio core stream to stop

 to be sure */

/**

 * snd_hdac_stream_stop - stop a stream

 * @azx_dev: HD-audio core stream to stop

 *

 * Stop a stream DMA and disable stream interrupt

 disable SIE */

/**

 * snd_hdac_stream_reset - reset a stream

 * @azx_dev: HD-audio core stream to reset

 waiting for hardware to report that the stream is out of reset */

 reset first position - may not be synced with hw at this time */

/**

 * snd_hdac_stream_setup -  set up the SD for streaming

 * @azx_dev: HD-audio core stream to set up

 make sure the run bit is zero for SD */

 program the stream_tag */

 program the length of samples in cyclic buffer */

 program the stream format */

 this value needs to be the same as the one programmed */

 program the stream LVI (last valid index) of the BDL */

 program the BDL address */

 lower BDL address */

 upper BDL address */

 enable the position buffer */

 set the interrupt enable bits in the descriptor control register */

	/* when LPIB delay correction gives a small negative value,

	 * we ignore it; currently set the threshold statically to

	 * 64 frames

 wallclk has 24Mhz clock source */

/**

 * snd_hdac_stream_cleanup - cleanup a stream

 * @azx_dev: HD-audio core stream to clean up

/**

 * snd_hdac_stream_assign - assign a stream for the PCM

 * @bus: HD-audio core bus

 * @substream: PCM substream to assign

 *

 * Look for an unused stream for the given PCM substream, assign it

 * and return the stream object.  If no stream is free, returns NULL.

 * The function tries to keep using the same stream object when it's used

 * beforehand.  Also, when bus->reverse_assign flag is set, the last free

 * or matching entry is returned.  This is needed for some strange codecs.

 make a non-zero unique key for the substream */

/**

 * snd_hdac_stream_release - release the assigned stream

 * @azx_dev: HD-audio core stream to release

 *

 * Release the stream that has been assigned by snd_hdac_stream_assign().

/**

 * snd_hdac_get_stream - return hdac_stream based on stream_tag and

 * direction

 *

 * @bus: HD-audio core bus

 * @dir: direction for the stream to be found

 * @stream_tag: stream tag for stream to be found

/*

 * set up a BDL entry

 program the address field of the BDL entry */

 program the size field of the BDL entry */

 one BDLE cannot cross 4K boundary on CTHDA chips */

		/* program the IOC to enable interrupt

		 * only when the whole fragment is processed

/**

 * snd_hdac_stream_setup_periods - set up BDL entries

 * @azx_dev: HD-audio core stream to set up

 *

 * Set up the buffer descriptor table of the given stream based on the

 * period and buffer sizes of the assigned PCM substream.

 reset BDL address */

 program the initial BDL entries */

/**

 * snd_hdac_stream_set_params - set stream parameters

 * @azx_dev: HD-audio core stream for which parameters are to be set

 * @format_val: format value parameter

 *

 * Setup the HD-audio core stream parameters from substream of the stream

 * and passed format value

	/*

	 * Converting from 24 MHz to ns means applying a 125/3 factor.

	 * To avoid any saturation issues in intermediate operations,

	 * the 125 factor is applied first. The division is applied

	 * last after reading the timecounter value.

	 * Applying the 1/3 factor as part of the multiplication

	 * requires at least 20 bits for a decent precision, however

	 * overflows occur after about 4 hours or less, not a option.

 saturation after 195 years */

 audio time is elapsed time since trigger */

		/*

		 * force timecounter to use predefined value,

		 * used for synchronized starts

/**

 * snd_hdac_stream_timecounter_init - initialize time counter

 * @azx_dev: HD-audio core stream (master stream)

 * @streams: bit flags of streams to set up

 *

 * Initializes the time counter of streams marked by the bit flags (each

 * bit corresponds to the stream index).

 * The trigger timestamp of PCM substream assigned to the given stream is

 * updated accordingly, too.

/**

 * snd_hdac_stream_sync_trigger - turn on/off stream sync register

 * @azx_dev: HD-audio core stream (master stream)

 * @set: true = set, false = clear

 * @streams: bit flags of streams to sync

 * @reg: the stream sync register address

/**

 * snd_hdac_stream_sync - sync with start/stop trigger operation

 * @azx_dev: HD-audio core stream (master stream)

 * @start: true = start, false = stop

 * @streams: bit flags of streams to sync

 *

 * For @start = true, wait until all FIFOs get ready.

 * For @start = false, wait until all RUN bits are cleared.

 check FIFO gets ready */

 check RUN bit is cleared */

					/*

					 * Perform stream reset if DMA RUN

					 * bit not cleared within given timeout

/**

 * snd_hdac_dsp_prepare - prepare for DSP loading

 * @azx_dev: HD-audio core stream used for DSP loading

 * @format: HD-audio stream format

 * @byte_size: data chunk byte size

 * @bufp: allocated buffer

 *

 * Allocate the buffer for the given size and set up the given stream for

 * DSP loading.  Returns the stream tag (>= 0), or a negative error code.

 reset BDL address */

/**

 * snd_hdac_dsp_trigger - start / stop DSP loading

 * @azx_dev: HD-audio core stream used for DSP loading

 * @start: trigger start or stop

/**

 * snd_hdac_dsp_cleanup - clean up the stream from DSP loading to normal

 * @azx_dev: HD-audio core stream used for DSP loading

 * @dmab: buffer used by DSP loading

 reset BDL address */

 CONFIG_SND_HDA_DSP_LOADER */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * HD-audio codec core device

/**

 * snd_hdac_device_init - initialize the HD-audio codec base device

 * @codec: device to initialize

 * @bus: but to attach

 * @name: device name string

 * @addr: codec address

 *

 * Returns zero for success or a negative error code.

 *

 * This function increments the runtime PM counter and marks it active.

 * The caller needs to turn it off appropriately later.

 *

 * The caller needs to set the device's release op properly by itself.

 fill parameters */

		/* read again, hopefully the access method was corrected

		 * in the last read...

 reread ssid if not set by parameter */

/**

 * snd_hdac_device_exit - clean up the HD-audio codec base device

 * @codec: device to clean up

 keep balance of runtime PM child_count in parent device */

/**

 * snd_hdac_device_register - register the hd-audio codec base device

 * @codec: the device to register

/**

 * snd_hdac_device_unregister - unregister the hd-audio codec base device

 * @codec: the device to unregister

/**

 * snd_hdac_device_set_chip_name - set/update the codec name

 * @codec: the HDAC device

 * @name: name string to set

 *

 * Returns 0 if the name is set or updated, or a negative error code.

/**

 * snd_hdac_codec_modalias - give the module alias name

 * @codec: HDAC device

 * @buf: string buffer to store

 * @size: string buffer size

 *

 * Returns the size of string, like snprintf(), or a negative error code.

/**

 * snd_hdac_make_cmd - compose a 32bit command word to be sent to the

 *	HD-audio controller

 * @codec: the codec object

 * @nid: NID to encode

 * @verb: verb to encode

 * @parm: parameter to encode

 *

 * Return an encoded command verb or -1 for error.

/**

 * snd_hdac_exec_verb - execute an encoded verb

 * @codec: the codec object

 * @cmd: encoded verb to execute

 * @flags: optional flags, pass zero for default

 * @res: the pointer to store the result, NULL if running async

 *

 * Returns zero if successful, or a negative error code.

 *

 * This calls the exec_verb op when set in hdac_codec.  If not,

 * call the default snd_hdac_bus_exec_verb().

/**

 * snd_hdac_read - execute a verb

 * @codec: the codec object

 * @nid: NID to execute a verb

 * @verb: verb to execute

 * @parm: parameter for a verb

 * @res: the pointer to store the result, NULL if running async

 *

 * Returns zero if successful, or a negative error code.

/**

 * _snd_hdac_read_parm - read a parmeter

 * @codec: the codec object

 * @nid: NID to read a parameter

 * @parm: parameter to read

 * @res: pointer to store the read value

 *

 * This function returns zero or an error unlike snd_hdac_read_parm().

/**

 * snd_hdac_read_parm_uncached - read a codec parameter without caching

 * @codec: the codec object

 * @nid: NID to read a parameter

 * @parm: parameter to read

 *

 * Returns -1 for error.  If you need to distinguish the error more

 * strictly, use snd_hdac_read() directly.

/**

 * snd_hdac_override_parm - override read-only parameters

 * @codec: the codec object

 * @nid: NID for the parameter

 * @parm: the parameter to change

 * @val: the parameter value to overwrite

/**

 * snd_hdac_get_sub_nodes - get start NID and number of subtree nodes

 * @codec: the codec object

 * @nid: NID to inspect

 * @start_id: the pointer to store the starting NID

 *

 * Returns the number of subtree nodes or zero if not found.

 * This function reads parameters always without caching.

/*

 * look for an AFG and MFG nodes

/**

 * snd_hdac_refresh_widgets - Reset the widget start/end nodes

 * @codec: the codec object

	/*

	 * Serialize against multiple threads trying to update the sysfs

	 * widgets array.

 return CONNLIST_LEN parameter of the given widget */

/**

 * snd_hdac_get_connections - get a widget connection list

 * @codec: the codec object

 * @nid: NID

 * @conn_list: the array to store the results, can be NULL

 * @max_conns: the max size of the given array

 *

 * Returns the number of connected widgets, zero for no connection, or a

 * negative error code.  When the number of elements don't fit with the

 * given array size, it returns -ENOSPC.

 *

 * When @conn_list is NULL, it just checks the number of connections.

 long form */

 short form */

 no connection */

 single connection */

 multi connection */

 ranges */

 no second chance */

 ranges between the previous and this one */

/**

 * snd_hdac_power_up - power up the codec

 * @codec: the codec object

 *

 * This function calls the runtime PM helper to power up the given codec.

 * Unlike snd_hdac_power_up_pm(), you should call this only for the code

 * path that isn't included in PM path.  Otherwise it gets stuck.

 *

 * Returns zero if successful, or a negative error code.

/**

 * snd_hdac_power_down - power down the codec

 * @codec: the codec object

 *

 * Returns zero if successful, or a negative error code.

/**

 * snd_hdac_power_up_pm - power up the codec

 * @codec: the codec object

 *

 * This function can be called in a recursive code path like init code

 * which may be called by PM suspend/resume again.  OTOH, if a power-up

 * call must wake up the sleeper (e.g. in a kctl callback), use

 * snd_hdac_power_up() instead.

 *

 * Returns zero if successful, or a negative error code.

/* like snd_hdac_power_up_pm(), but only increment the pm count when

 * already powered up.  Returns -1 if not powered up, 1 if incremented

 * or 0 if unchanged.  Only used in hdac_regmap.c

/**

 * snd_hdac_power_down_pm - power down the codec

 * @codec: the codec object

 *

 * Like snd_hdac_power_up_pm(), this function is used in a recursive

 * code path like init code which may be called by PM suspend/resume again.

 *

 * Returns zero if successful, or a negative error code.

 codec vendor labels */

 terminator */

 store the codec vendor name */

/*

 * stream formats

 rate = base * mult / div */

 rate in Hz, ALSA rate bitmask, HDA format value */

 autodetected value used in snd_hda_query_supported_pcm */

 up to bits 10, 384kHZ isn't supported properly */

 not autodetected value */

 terminator */

/**

 * snd_hdac_calc_stream_format - calculate the format bitset

 * @rate: the sample rate

 * @channels: the number of channels

 * @format: the PCM format (SNDRV_PCM_FORMAT_XXX)

 * @maxbps: the max. bps

 * @spdif_ctls: HD-audio SPDIF status bits (0 if irrelevant)

 *

 * Calculate the format bitset from the given rate, channels and th PCM format.

 *

 * Return zero if invalid.

/**

 * snd_hdac_query_supported_pcm - query the supported PCM rates and formats

 * @codec: the codec object

 * @nid: NID to query

 * @ratesp: the pointer to store the detected rate bitflags

 * @formatsp: the pointer to store the detected formats

 * @bpsp: the pointer to store the detected format widths

 *

 * Queries the supported PCM rates and formats.  The NULL @ratesp, @formatsp

 * or @bsps argument is ignored.

 *

 * Returns 0 if successful, otherwise a negative error code.

 FIXME: CS4206 doesn't work, which is the only codec supporting float */

 should be exclusive */

			/* temporary hack: we have still no proper support

			 * for the direct AC3 stream...

/**

 * snd_hdac_is_supported_format - Check the validity of the format

 * @codec: the codec object

 * @nid: NID to check

 * @format: the HD-audio format value to check

 *

 * Check whether the given node supports the format value.

 *

 * Returns true if supported, false if not.

 FIXME: check for float32 and AC3? */

/**

 * snd_hdac_codec_read - send a command and get the response

 * @hdac: the HDAC device

 * @nid: NID to send the command

 * @flags: optional bit flags

 * @verb: the verb to send

 * @parm: the parameter for the verb

 *

 * Send a single command and read the corresponding response.

 *

 * Returns the obtained response value, or -1 for an error.

/**

 * snd_hdac_codec_write - send a single command without waiting for response

 * @hdac: the HDAC device

 * @nid: NID to send the command

 * @flags: optional bit flags

 * @verb: the verb to send

 * @parm: the parameter for the verb

 *

 * Send a single command without waiting for response.

 *

 * Returns 0 if successful, or a negative error code.

/**

 * snd_hdac_check_power_state - check whether the actual power state matches

 * with the target state

 *

 * @hdac: the HDAC device

 * @nid: NID to send the command

 * @target_state: target state to check for

 *

 * Return true if state matches, false if not

/**

 * snd_hdac_sync_power_state - wait until actual power state matches

 * with the target state

 *

 * @codec: the HDAC device

 * @nid: NID to send the command

 * @power_state: target power state to wait for

 *

 * Return power state or PS_ERROR if codec rejects GET verb.

 wait until the codec reachs to the target state */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * generic arrays

/**

 * snd_array_new - get a new element from the given array

 * @array: the array object

 *

 * Get a new element from the given array.  If it exceeds the

 * pre-allocated array size, re-allocate the array.

 *

 * Returns NULL if allocation failed.

/**

 * snd_array_free - free the given array elements

 * @array: the array object

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  hdac_i915.c - routines for sync between HD-A core and i915 display driver

/**

 * snd_hdac_i915_set_bclk - Reprogram BCLK for HSW/BDW

 * @bus: HDA core bus

 *

 * Intel HSW/BDW display HDA controller is in GPU. Both its power and link BCLK

 * depends on GPU. Two Extended Mode registers EM4 (M value) and EM5 (N Value)

 * are used to convert CDClk (Core Display Clock) to 24MHz BCLK:

 * BCLK = CDCLK * M / N

 * The values will be lost when the display power well is disabled and need to

 * be restored to avoid abnormal playback speed.

 *

 * Call this function at initializing and changing power well, as well as

 * at ELD notifier for the hotplug.

 only for i915 binding */

 only HSW/BDW */

 default CDCLK 450MHz */

 returns true if the devices can be connected for audio */

 directly connected on the same bus */

	/*

	 * on i915 discrete GPUs with embedded HDA audio, the two

	 * devices are connected via 2nd level PCI bridge

 check whether intel graphics is present */

/**

 * snd_hdac_i915_init - Initialize i915 audio component

 * @bus: HDA core bus

 *

 * This function is supposed to be used only by a HD-audio controller

 * driver that needs the interaction with i915 graphics.

 *

 * This function initializes and sets up the audio component to communicate

 * with i915 graphics driver.

 *

 * Returns zero for success or a negative error code.

 60s timeout */

 SPDX-License-Identifier: GPL-2.0

/*

 * sysfs support for HD-audio core device

/*

 * Widget tree sysfs

 *

 * This is a tree showing the attributes of each widget.  It appears like

 * /sys/bus/hdaudioC0D0/widgets/04/caps

 call with codec->widget_lock held */

 already created */

 call with codec->widget_lock held */

 call with codec->widget_lock held */

 prune non-existing nodes */

 add new nodes */

 replace with the new tree */

 SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)

 Copyright(c) 2015-2021 Intel Corporation.

/*

 * SDW Intel ACPI scan helpers

 from Intel ACPI documentation */

 Find master handle */

 Found controller, find links supported */

	/*

	 * In theory we could check the number of links supported in

	 * hardware, but in that step we cannot assume SoundWire IP is

	 * powered.

	 *

	 * In addition, if the BIOS doesn't even provide this

	 * 'master-count' property then all the inits based on link

	 * masks will fail as well.

	 *

	 * We will check the hardware capabilities in the startup() step

 Check count is within bounds */

 keep going */

	/*

	 * On some Intel platforms, multiple children of the HDAS

	 * device can be found, but only one of them is the SoundWire

	 * controller. The SNDW device is always exposed with

	 * Name(_ADR, 0x40000000), with bits 31..28 representing the

	 * SoundWire link so filter accordingly

 keep going */

 device found, stop namespace walk */

/**

 * sdw_intel_acpi_scan() - SoundWire Intel init routine

 * @parent_handle: ACPI parent handle

 * @info: description of what firmware/DSDT tables expose

 *

 * This scans the namespace and queries firmware to figure out which

 * links to enable. A follow-up use of sdw_intel_probe() and

 * sdw_intel_startup() is required for creation of devices and bus

 * startup

 SPDX-License-Identifier: GPL-2.0-only

 Copyright (c) 2015-2019 Intel Corporation

 find max number of channels based on format_configuration */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * HD-audio core bus driver

/**

 * snd_hdac_bus_init - initialize a HD-audio bas bus

 * @bus: the pointer to bus object

 * @dev: device pointer

 * @ops: bus verb operators

 *

 * Returns 0 if successful, or a negative error code.

	/*

	 * Default value of '8' is as per the HD audio specification (Rev 1.0a).

	 * Following relation is used to derive STRIPE control value.

	 *  For sample rate <= 48K:

	 *   { ((num_channels * bits_per_sample) / number of SDOs) >= 8 }

	 *  For sample rate > 48K:

	 *   { ((num_channels * bits_per_sample * rate/48000) /

	 *	number of SDOs) >= 8 }

/**

 * snd_hdac_bus_exit - clean up a HD-audio bas bus

 * @bus: the pointer to bus object

/**

 * snd_hdac_bus_exec_verb - execute a HD-audio verb on the given bus

 * @bus: bus object

 * @addr: the HDAC device address

 * @cmd: HD-audio encoded verb

 * @res: pointer to store the response, NULL if performing asynchronously

 *

 * Returns 0 if successful, or a negative error code.

/**

 * snd_hdac_bus_exec_verb_unlocked - unlocked version

 * @bus: bus object

 * @addr: the HDAC device address

 * @cmd: HD-audio encoded verb

 * @res: pointer to store the response, NULL if performing asynchronously

 *

 * Returns 0 if successful, or a negative error code.

 process pending verbs */

/**

 * snd_hdac_bus_queue_event - add an unsolicited event to queue

 * @bus: the BUS

 * @res: unsolicited event (lower 32bit of RIRB entry)

 * @res_ex: codec addr and flags (upper 32bit or RIRB entry)

 *

 * Adds the given event to the queue.  The events are processed in

 * the workqueue asynchronously.  Call this function in the interrupt

 * hanlder when RIRB receives an unsolicited event.

/*

 * process queued unsolicited events

 no unsolicited event? */

/**

 * snd_hdac_bus_add_device - Add a codec to bus

 * @bus: HDA core bus

 * @codec: HDA core device to add

 *

 * Adds the given codec to the list in the bus.  The caddr_tbl array

 * and codec_powered bits are updated, as well.

 * Returns zero if success, or a negative error code.

/**

 * snd_hdac_bus_remove_device - Remove a codec from bus

 * @bus: HDA core bus

 * @codec: HDA core device to remove

 Helpers for aligned read/write of mmio space, for Tegra */

 CONFIG_SND_HDA_ALIGNED_MMIO */

/*

 * tracepoint definitions for HD-audio core drivers

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Regmap support for HD-audio verbs

 *

 * A virtual register is translated to one or more hda verbs for write,

 * vice versa for read.

 *

 * A few limitations:

 * - Provided for not all verbs but only subset standard non-volatile verbs.

 * - For reading, only AC_VERB_GET_* variants can be used.

 * - For writing, mapped to the *corresponding* AC_VERB_SET_* variants,

 *   so can't handle asymmetric verbs for read and write

 read-only volatile */

 only as SET_UNSOLICITED_ENABLE */

 only for beep control */

 not for volatile read */

	/* below are basically writable, but disabled for reducing unnecessary

	 * writes at sync

 usually just read */

 managed in PCM code */

 managed in HDMI CA code */

/*

 * Stereo amp pseudo register:

 * for making easier to handle the stereo volume control, we provide a

 * fake register to deal both left and right channels by a single

 * (pseudo) register access.  A verb consisting of SET_AMP_GAIN with

 * *both* SET_LEFT and SET_RIGHT bits takes a 16bit value, the lower 8bit

 * for the left and the upper 8bit for the right channel.

 read a pseudo stereo amp register (16bit left+right) */

 write a pseudo stereo amp register (16bit left+right) */

 read a pseudo coef register (16bit) */

 LSB 8bit = coef index */

 write a pseudo coef register (16bit) */

 LSB 8bit = coef index */

 special handling for asymmetric reads */

 take only the actual state */

 drop GET bit */

/**

 * snd_hdac_regmap_init - Initialize regmap for HDA register accesses

 * @codec: the codec object

 *

 * Returns zero for success or a negative error code.

/**

 * snd_hdac_regmap_exit - Release the regmap from HDA codec

 * @codec: the codec object

/**

 * snd_hdac_regmap_add_vendor_verb - add a vendor-specific verb to regmap

 * @codec: the codec object

 * @verb: verb to allow accessing via regmap

 *

 * Returns zero for success or a negative error code.

 set GET bit */

/*

 * helper functions

 write a pseudo-register value (w/o power sequence) */

 a helper macro to call @func_call; retry with power-up if failed */

/**

 * snd_hdac_regmap_write_raw - write a pseudo register with power mgmt

 * @codec: the codec object

 * @reg: pseudo register

 * @val: value to write

 *

 * Returns zero if successful or a negative error code.

/**

 * snd_hdac_regmap_read_raw - read a pseudo register with power mgmt

 * @codec: the codec object

 * @reg: pseudo register

 * @val: pointer to store the read value

 *

 * Returns zero if successful or a negative error code.

/* Works like snd_hdac_regmap_read_raw(), but this doesn't read from the

 * cache but always via hda verbs.

/**

 * snd_hdac_regmap_update_raw - update a pseudo register with power mgmt

 * @codec: the codec object

 * @reg: pseudo register

 * @mask: bit mask to update

 * @val: value to update

 *

 * Returns zero if successful or a negative error code.

/**

 * snd_hdac_regmap_update_raw_once - initialize the register value only once

 * @codec: the codec object

 * @reg: pseudo register

 * @mask: bit mask to update

 * @val: value to update

 *

 * Performs the update of the register bits only once when the register

 * hasn't been initialized yet.  Used in HD-audio legacy driver.

 * Returns zero if successful or a negative error code

/**

 * snd_hdac_regmap_sync - sync out the cached values for PM resume

 * @codec: the codec object

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  hdac-ext-bus.c - HD-audio extended core bus functions.

 *

 *  Copyright (C) 2014-2015 Intel Corp

 *  Author: Jeeja KP <jeeja.kp@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/**

 * snd_hdac_ext_bus_init - initialize a HD-audio extended bus

 * @bus: the pointer to HDAC bus object

 * @dev: device pointer

 * @ops: bus verb operators

 * @ext_ops: operators used for ASoC HDA codec drivers

 *

 * Returns 0 if successful, or a negative error code.

	/* FIXME:

	 * Currently only one bus is supported, if there is device with more

	 * buses, bus->idx should be greater than 0, but there needs to be a

	 * reliable way to always assign same number.

/**

 * snd_hdac_ext_bus_exit - clean up a HD-audio extended bus

 * @bus: the pointer to HDAC bus object

/**

 * snd_hdac_ext_bus_device_init - initialize the HDA extended codec base device

 * @bus: hdac bus to attach to

 * @addr: codec address

 * @hdev: hdac device to init

 * @type: codec type (HDAC_DEV_*) to use for this device

 *

 * Returns zero for success or a negative error code.

/**

 * snd_hdac_ext_bus_device_exit - clean up a HD-audio extended codec base device

 * @hdev: hdac device to clean up

/**

 * snd_hdac_ext_bus_device_remove - remove HD-audio extended codec base devices

 *

 * @bus: the pointer to HDAC bus object

	/*

	 * we need to remove all the codec devices objects created in the

	 * snd_hdac_ext_bus_device_init

/**

 * snd_hda_ext_driver_register - register a driver for ext hda devices

 *

 * @drv: ext hda driver structure

 we use default match */

/**

 * snd_hda_ext_driver_unregister - unregister a driver for ext hda devices

 *

 * @drv: ext hda driver structure

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  hdac-ext-controller.c - HD-audio extended controller functions.

 *

 *  Copyright (C) 2014-2015 Intel Corp

 *  Author: Jeeja KP <jeeja.kp@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/*

 * maximum HDAC capablities we should parse to avoid endless looping:

 * currently we have 4 extended caps, so this is future proof for now.

 * extend when this limit is seen meeting in real HW

/*

 * processing pipe helpers - these helpers are useful for dealing with HDA

 * new capability of processing pipelines

/**

 * snd_hdac_ext_bus_ppcap_enable - enable/disable processing pipe capability

 * @bus: the pointer to HDAC bus object

 * @enable: flag to turn on/off the capability

/**

 * snd_hdac_ext_bus_ppcap_int_enable - ppcap interrupt enable/disable

 * @bus: the pointer to HDAC bus object

 * @enable: flag to enable/disable interrupt

/*

 * Multilink helpers - these helpers are useful for dealing with HDA

 * new multilink capability

/**

 * snd_hdac_ext_bus_get_ml_capabilities - get multilink capability

 * @bus: the pointer to HDAC bus object

 *

 * This will parse all links and read the mlink capabilities and add them

 * in hlink_list of extended hdac bus

 * Note: this will be freed on bus exit by driver

 since link in On, update the ref */

/**

 * snd_hdac_link_free_all- free hdac extended link objects

 *

 * @bus: the pointer to HDAC bus object

/**

 * snd_hdac_ext_bus_get_link - get link based on codec name

 * @bus: the pointer to HDAC bus object

 * @codec_name: codec name

/**

 * snd_hdac_ext_bus_link_power_up -power up hda link

 * @link: HD-audio extended link

/**

 * snd_hdac_ext_bus_link_power_down -power down hda link

 * @link: HD-audio extended link

/**

 * snd_hdac_ext_bus_link_power_up_all -power up all hda link

 * @bus: the pointer to HDAC bus object

/**

 * snd_hdac_ext_bus_link_power_down_all -power down all hda link

 * @bus: the pointer to HDAC bus object

	/*

	 * if we move from 0 to 1, count will be 1 so power up this link

	 * as well, also check the dma status and trigger that

		/*

		 * clear the register to invalidate all the output streams

		/*

		 *  wait for 521usec for codec to report status

		 *  HDA spec section 4.3 - Codec Discovery

	/*

	 * if we move from 1 to 0, count will be 0

	 * so power down this link as well

		/*

		 * now check if all links are off, if so turn off

		 * cmd dma as well

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  hdac-ext-stream.c - HD-audio extended stream operations.

 *

 *  Copyright (C) 2015 Intel Corp

 *  Author: Jeeja KP <jeeja.kp@intel.com>

 *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 *

 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/**

 * snd_hdac_ext_stream_init - initialize each stream (aka device)

 * @bus: HD-audio core bus

 * @stream: HD-audio ext core stream object to initialize

 * @idx: stream index number

 * @direction: stream direction (SNDRV_PCM_STREAM_PLAYBACK or SNDRV_PCM_STREAM_CAPTURE)

 * @tag: the tag id to assign

 *

 * initialize the stream, if ppcap is enabled then init those and then

 * invoke hdac stream initialization routine

/**

 * snd_hdac_ext_stream_init_all - create and initialize the stream objects

 *   for an extended hda bus

 * @bus: HD-audio core bus

 * @start_idx: start index for streams

 * @num_stream: number of streams to initialize

 * @dir: direction of streams

/**

 * snd_hdac_stream_free_all - free hdac extended stream objects

 *

 * @bus: HD-audio core bus

/**

 * snd_hdac_ext_stream_decouple - decouple the hdac stream

 * @bus: HD-audio core bus

 * @stream: HD-audio ext core stream object to initialize

 * @decouple: flag to decouple

/**

 * snd_hdac_ext_link_stream_start - start a stream

 * @stream: HD-audio ext core stream to start

/**

 * snd_hdac_ext_link_stream_clear - stop a stream DMA

 * @stream: HD-audio ext core stream to stop

/**

 * snd_hdac_ext_link_stream_reset - reset a stream

 * @stream: HD-audio ext core stream to reset

 waiting for hardware to report that the stream is out of reset */

/**

 * snd_hdac_ext_link_stream_setup -  set up the SD for streaming

 * @stream: HD-audio ext core stream to set up

 * @fmt: stream format

 make sure the run bit is zero for SD */

 program the stream_tag */

 program the stream format */

/**

 * snd_hdac_ext_link_set_stream_id - maps stream id to link output

 * @link: HD-audio ext link to set up

 * @stream: stream id

/**

 * snd_hdac_ext_link_clear_stream_id - maps stream id to link output

 * @link: HD-audio ext link to set up

 * @stream: stream id

 check if decoupled stream and not in use is available */

/**

 * snd_hdac_ext_stream_assign - assign a stream for the PCM

 * @bus: HD-audio core bus

 * @substream: PCM substream to assign

 * @type: type of stream (coupled, host or link stream)

 *

 * This assigns the stream based on the type (coupled/host/link), for the

 * given PCM substream, assigns it and returns the stream object

 *

 * coupled: Looks for an unused stream

 * host: Looks for an unused decoupled host stream

 * link: Looks for an unused decoupled link stream

 *

 * If no stream is free, returns NULL. The function tries to keep using

 * the same stream object when it's used beforehand.  when a stream is

 * decoupled, it becomes a host stream and link stream.

/**

 * snd_hdac_ext_stream_release - release the assigned stream

 * @stream: HD-audio ext core stream to release

 * @type: type of stream (coupled, host or link stream)

 *

 * Release the stream that has been assigned by snd_hdac_ext_stream_assign().

/**

 * snd_hdac_ext_stream_spbcap_enable - enable SPIB for a stream

 * @bus: HD-audio core bus

 * @enable: flag to enable/disable SPIB

 * @index: stream index for which SPIB need to be enabled

/**

 * snd_hdac_ext_stream_set_spib - sets the spib value of a stream

 * @bus: HD-audio core bus

 * @stream: hdac_ext_stream

 * @value: spib value to set

/**

 * snd_hdac_ext_stream_get_spbmaxfifo - gets the spib value of a stream

 * @bus: HD-audio core bus

 * @stream: hdac_ext_stream

 *

 * Return maxfifo for the stream

/**

 * snd_hdac_ext_stop_streams - stop all stream if running

 * @bus: HD-audio core bus

/**

 * snd_hdac_ext_stream_drsm_enable - enable DMA resume for a stream

 * @bus: HD-audio core bus

 * @enable: flag to enable/disable DRSM

 * @index: stream index for which DRSM need to be enabled

/**

 * snd_hdac_ext_stream_set_dpibr - sets the dpibr value of a stream

 * @bus: HD-audio core bus

 * @stream: hdac_ext_stream

 * @value: dpib value to set

/**

 * snd_hdac_ext_stream_set_lpib - sets the lpib value of a stream

 * @stream: hdac_ext_stream

 * @value: lpib value to set

 SPDX-License-Identifier: GPL-2.0-only

/* Hewlett-Packard Harmony audio driver

 *

 *   This is a driver for the Harmony audio chipset found

 *   on the LASI ASIC of various early HP PA-RISC workstations.

 *

 *   Copyright (C) 2004, Kyle McMartin <kyle@{debian.org,parisc-linux.org}>

 *

 *     Based on the previous Harmony incarnations by,

 *       Copyright 2000 (c) Linuxcare Canada, Alex deVries

 *       Copyright 2000-2003 (c) Helge Deller

 *       Copyright 2001 (c) Matthieu Delahaye

 *       Copyright 2001 (c) Jean-Christophe Vaugeois

 *       Copyright 2003 (c) Laurent Canet

 *       Copyright 2004 (c) Stuart Brady

 *

 * Notes:

 *   - graveyard and silence buffers last for lifetime of

 *     the driver. playback and capture buffers are allocated

 *     per _open()/_close().

 * 

 * TODO:

 Index 0-MAX */

 ID for this card */

 bushmaster / flounder */

 712 / 715 */

 pace */

 outfield / coral II */

 PAGE_SIZE */

 MAX_BUFS*PAGE_SIZE */

 initialize graveyard buffer */

 initialize silence buffers */

 pre-allocate space for DMA */

 SPDX-License-Identifier: GPL-2.0-only

/*

 *  linux/sound/arm/aaci.c - ARM PrimeCell AACI PL041 driver

 *

 *  Copyright (C) 2003 Deep Blue Solutions Ltd, All Rights Reserved.

 *

 *  Documentation: ARM DDI 0173B

/*

 * PM support is not complete.  Turn it off.

	/*

	 * Ensure that the slot 1/2 RX registers are empty.

/*

 * P29:

 *  The recommended use of programming the external codec through slot 1

 *  and slot 2 data is to use the channels during setup routines and the

 *  slot register at any other time.  The data written into slot 1, slot 2

 *  and slot 12 registers is transmitted only when their corresponding

 *  SI1TxEn, SI2TxEn and SI12TxEn bits are set in the AACI_MAINCR

 *  register.

	/*

	 * P54: You must ensure that AACI_SL2TX is always written

	 * to, if required, before data is written to AACI_SL1TX.

 Initially, wait one frame period */

 And then wait an additional eight frame periods for it to be sent */

/*

 * Read an AC'97 register.

	/*

	 * Write the register address to slot 1.

 Initially, wait one frame period */

 And then wait an additional eight frame periods for it to be sent */

 Now wait for the response frame */

 And then wait an additional eight frame periods for data */

/*

 * Interrupt support.

 reading 16 bytes at a time */

 writing 16 bytes at a time */

/*

 * ALSA support.

	/*

	 * ALSA doesn't support 18-bit or 20-bit packed into 32-bit

	 * words.  It also doesn't support 12-bit at all.

 rates are setup from the AC'97 codec */

/*

 * We can support two and four channel audio.  Unfortunately

 * six channel audio requires a non-standard channel ordering:

 *   2 -> FL(3), FR(4)

 *   4 -> FL(3), FR(4), SL(7), SR(8)

 *   6 -> FL(3), FR(4), SL(7), SR(8), C(6), LFE(9) (required)

 *        FL(3), FR(4), C(6), SL(7), SR(8), LFE(9) (actual)

 * This requires an ALSA configuration file to correct.

 pcms[0] is the our 5.1 PCM instance. */

 Add rule describing channel dependency. */

	/*

	 * ALSA wants the byte-size of the FIFOs.  As we only support

	 * 16-bit samples, this is twice the FIFO depth irrespective

	 * of whether it's in compact mode or not.

/*

 * Common ALSA stuff

	/*

	 * This must not be called with the device enabled.

 Channel to slot mask */

 channels is already limited to 2, 4, or 6 by aaci_rule_channels */

	/*

	 * fifo_bytes is the number of bytes we transfer to/from

	 * the FIFO, including padding.  So that's x4.  As we're

	 * in compact mode, the FIFO is half the size.

/*

 * Playback specific ALSA stuff

 RX Timeout value: bits 28:17 in RXCR */

 overrun and rx interrupt -- half full

 allow changing of sample rate */

 VRA */

 Record select: Mic: 0, Aux: 3, Line: 4 */

/*

 * Power Management.

 Front PCM */

 PCM in */

 Mic in */

	/*

	 * Assert AACIRESET for 2us

	/*

	 * Give the AC'97 codec more than enough time

	 * to wake up. (42us = ~2 frames at 48kHz.)

	/*

	 * Disable AC97 PC Beep input on audio codecs.

 Set MAINCR to allow slot 1 and 2 data IO */

	/*

	 * Enable the channel, but don't assign it to any slots, so

	 * it won't empty onto the AC'97 link.

	/*

	 * Re-initialise the AACI after the FIFO depth test, to

	 * ensure that the FIFOs are empty.  Unfortunately, merely

	 * disabling the channel doesn't clear the FIFO.

	/*

	 * If we hit 4096 entries, we failed.  Go back to the specified

	 * fifo depth.

	/*

	 * Playback uses AACI channel 0

	/*

	 * Capture uses AACI channel 0

	/*

	 * Fix: ac97 read back fail errors by reading

	 * from any arbitrary aaci register.

	/*

	 * Size the FIFOs (must be multiple of 16).

	 * This is the number of entries in the FIFO.

 SPDX-License-Identifier: GPL-2.0-only

	/*

	 * For mysterious reasons (and despite what the manual says)

	 * playback samples are lost if the DMA count is not a multiple

	 * of the DMA burst size.  Let's add a rule to enforce that.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Based on sound/arm/pxa2xx-ac97.c and sound/soc/pxa/pxa2xx-ac97.c

 * which contain:

 *

 * Author:	Nicolas Pitre

 * Created:	Dec 02, 2004

 * Copyright:	MontaVista Software Inc.

/*

 * Beware PXA27x bugs:

 *

 *   o Slot 12 read from modem space will hang controller.

 *   o CDONE, SDONE interrupt fails after any slot 12 IO.

 *

 * We therefore have an hybrid approach for waiting on SDONE (interrupt or

 * 1 jiffy timeout if interrupt never comes).

 set up primary or secondary codec space */

 start read access across the ac97 link */

 valid data now */

 but we've just started another cycle... */

 set up primary or secondary codec space */

 clear everything but nCRST */

 then assert nCRST */

 warm reset broken on Bulverde, so manually keep AC97 reset high */

 clear everything but nCRST */

 then assert nCRST */

 PXA27x Developers Manual section 13.5.2.2.1 */

 Can't use interrupts */

 Hold CLKBPB for 100us */

 clear everything but nCRST */

 then assert nCRST */

 Can't use interrupts on PXA3xx */

		/* Although we don't use those we still need to clear them

		   since they tend to spuriously trigger when MMC is used

		/*

		 * This gpio is needed for a work-around to a bug in the ac97

		 * controller during warm reset.  The direction and level is set

		 * here so that it is an output driven high when switching from

		 * AC97_nRESET alt function to generic gpio.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * linux/sound/pxa2xx-ac97.c -- AC97 support for the Intel PXA2xx chip.

 *

 * Author:	Nicolas Pitre

 * Created:	Dec 02, 2004

 * Copyright:	MontaVista Software Inc.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    card-azt2320.c - driver for Aztech Systems AZT2320 based soundcards.

    Copyright (C) 1999-2000 by Massimo Piccioni <dafastidio@libero.it>



/*

    This driver should provide support for most Aztech AZT2320 based cards.

    Several AZT2316 chips are also supported/tested, but autoprobe doesn't

    work: all module option have to be set.



    No docs available for us at Aztech headquarters !!!   Unbelievable ...

    No other help obtained.



    Thanks to Rainer Wiesner <rainer.wiesner@01019freenet.de> for the WSS

    activation method (full-duplex audio!).

 Index 0-MAX */

 ID for this card */

 Enable this card */

 PnP setup */

 PnP setup */

 PnP setup */

 PnP setup */

 Pnp setup */

 Pnp setup */

 PnP setup */

 PnP setup */

 PRO16V */

 Aztech Sound Galaxy 16 */

 Packard Bell Sound III 336 AM/SP */

 AT3300 */

 --- */

 --- */

 end */

 same of snd_sbdsp_command by Jaroslav Kysela */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * AdLib FM card driver.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    card-als100.c - driver for Avance Logic ALS100 based soundcards.

    Copyright (C) 1999-2000 by Massimo Piccioni <dafastidio@libero.it>

    Copyright (C) 1999-2002 by Massimo Piccioni <dafastidio@libero.it>



    Thanks to Pierfrancesco 'qM2' Passerini.



    Generalised for soundcards based on DT-0196 and ALS-007 chips

    by Jonathan Woithe <jwoithe@just42.net>: June 2002.



 Index 0-MAX */

 ID for this card */

 Enable this card */

 PnP setup */

 PnP setup */

 PnP setup */

 PnP setup */

 PnP setup */

 PnP setup */

 PnP setup */

 DT197A30 */

 DT0196 / ALS-007 */

 ALS100 - PRO16PNP */

 ALS110 - MF1000 - Digimate 3D Sound */

 ALS120 */

 ALS200 */

 ALS200 OEM */

 RTL3000 */

 end */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   Low-level ALSA driver for the ENSONIQ SoundScape

 *   Copyright (c) by Chris Rankin

 *

 *   This driver was written in part using information obtained from

 *   the OSS/Free SoundScape driver, written by Hannu Savolainen.

 Soundscape PnP */

 VIVO90 */

 end */

 Sequoia S-1000 */

 Sequoia S-2000 */

/*

 * Allocates some kernel memory that we can use for DMA.

 * I think this means that the memory has to map to

 * contiguous pages of physical memory.

/*

 * Release the DMA-able kernel memory ...

/*

 * This function writes to the SoundScape's control registers,

 * but doesn't do any locking. It's up to the caller to do that.

 * This is why this function is "unsafe" ...

/*

 * Write to the SoundScape's control registers, and do the

 * necessary locking ...

/*

 * Read from the SoundScape's control registers, but leave any

 * locking to the caller. This is why the function is "unsafe" ...

/*

 * Puts the SoundScape into "host" mode, as compared to "MIDI" mode

/*

 * Puts the SoundScape into "MIDI" mode, as compared to "host" mode

/*

 * Read the SoundScape's host-mode control register, but leave

 * any locking issues to the caller ...

/*

 * Read the SoundScape's host-mode control register, performing

 * a limited amount of busy-waiting if the register isn't ready.

 * Also leaves all locking-issues to the caller ...

 while */

/*

 * Write to the SoundScape's host-mode control registers, but

 * leave any locking issues to the caller ...

/*

 * Write to the SoundScape's host-mode control registers, performing

 * a limited amount of busy-waiting if the register isn't ready.

 * Also leaves all locking-issues to the caller ...

 while */

/*

 * Check that the MIDI subsystem is operational. If it isn't,

 * then we will hang the computer if we try to use it ...

 *

 * NOTE: This check is based upon observation, not documentation.

/*

 * This is apparently the standard way to initialise an MPU-401

/*

 * Tell the SoundScape to activate the AD1845 chip (I think).

 * The AD1845 detection fails if we *don't* do this, so I

 * think that this is a good idea ...

/*

 * Tell the SoundScape to begin a DMA transfer using the given channel.

 * All locking issues are left to the caller.

/*

 * Wait for a DMA transfer to complete. This is a "limited busy-wait",

 * and all locking issues are left to the caller.

 while */

/*

 * Wait for the On-Board Processor to return its start-up

 * acknowledgement sequence. This wait is too long for

 * us to perform "busy-waiting", and so we must sleep.

 * This in turn means that we must not be holding any

 * spinlocks when we call this function.

/*

 * Wait for the host to return its start-up acknowledgement

 * sequence. This wait is too long for us to perform

 * "busy-waiting", and so we must sleep. This in turn means

 * that we must not be holding any spinlocks when we call

 * this function.

/*

 * Upload a byte-stream into the SoundScape using DMA channel A.

	/*

	 * Reset the board ...

	/*

	 * Enable the DMA channels and configure them ...

	/*

	 * Take the board out of reset ...

	/*

	 * Upload the firmware to the SoundScape

	 * board through the DMA channel ...

			/*

			 * Don't forget to release this spinlock we're holding

 while */

	/*

	 * Boot the board ... (I think)

	/*

	 * If all has gone well, then the board should acknowledge

	 * the new upload and tell us that it has rebooted OK. We

	 * give it 5 seconds (max) ...

	/*

	 * NOTE!!! We are NOT holding any spinlocks at this point !!!

/*

 * Upload the bootblock(?) into the SoundScape. The only

 * purpose of this block of code seems to be to tell

 * us which version of the microcode we should be using.

/*

 * Upload the microcode into the SoundScape.

/*

 * Mixer control for the SoundScape's MIDI device.

	/*

	 * We need to put the board into HOST mode before we

	 * can send any volume-changing HOST commands ...

	/*

	 * To successfully change the MIDI volume setting, you seem to

	 * have to write a volume command, write the new volume value,

	 * and then perform another volume-related command. Perhaps the

	 * first command is an "open" and the second command is a "close"?

	/*

	 * Take the board out of HOST mode and back into MIDI mode ...

/*

 * The SoundScape can use two IRQs from a possible set of four.

 * These IRQs are encoded as bit patterns so that they can be

 * written to the control registers.

/*

 * Perform certain arcane port-checks to see whether there

 * is a SoundScape board lurking behind the given ports.

	/*

	 * The following code is lifted from the original OSS driver,

	 * and as I don't have a datasheet I cannot really comment

	 * on what it is doing...

 wait for WSS codec */

 wait for WSS codec */

	/*

	 * SoundScape successfully detected!

/*

 * ALSA callback function, called when attempting to open the MIDI device.

 * Check that the MIDI firmware has been loaded, because we don't want

 * to crash the machine. Also check that someone isn't using the hardware

 * IOCTL device.

/*

 * Initialise an MPU-401 subdevice for MIDI support on the SoundScape.

/*

 * Create an AD1845 PCM subdevice on the SoundScape. The AD1845

 * is very much like a CS4231, with a few extra bits. We will

 * try to support at least some of the extra bits by overriding

 * some of the CS4231 callback.

		/*

		 * There are some freak examples of early Soundscape cards

		 * with CS4231 instead of AD1848/CS4248. Unfortunately, the

		 * CS4231 works only in CS4248 compatibility mode on

		 * these cards so force it.

			/*

			 * The input clock frequency on the SoundScape must

			 * be 14.31818 MHz, because we must set this register

			 * to get the playback to sound correct ...

/*

 * Create an ALSA soundcard entry for the SoundScape, using

 * the given list of port, IRQ and DMA resources.

	/*

	 * Grab IO ports that we will need to probe so that we

	 * can detect and control this hardware ...

	/*

	 * Grab one DMA channel ...

	/*

	 * Check that the user didn't pass us garbage data ...

	/*

	 * Tell the on-board devices where their resources are (I think -

	 * I can't be sure without a datasheet ... So many magic values!)

	/*

	 * Enable and configure the DMA channels ...

	/*

	 * Enable the master IRQ ...

	/*

	 * We have now enabled the codec chip, and so we should

	 * detect the AD1845 device ...

			/*

			 * Initialize mixer

	/*

	 * Make sure we were given ALL of the other parameters.

 FIXME: suspend/resume */

	/*

	 * Allow this function to fail *quietly* if all the ISA PnP

	 * devices were configured using module parameters instead.

	/*

	 * Check that we still have room for another sound card ...

	/*

	 * Create a new ALSA sound card entry, in anticipation

	 * of detecting our hardware ...

	/*

	 * Identify card model ...

	/*

	 * Read the correct parameters off the ISA PnP bus ...

 CONFIG_PNP */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for C-Media CMI8328-based soundcards, such as AudioExcel AV500

 * Copyright (c) 2012 Ondrej Zary

 *

 * AudioExcel AV500 card consists of:

 *  - CMI8328 - main chip (SB Pro emulation, gameport, OPL3, MPU401, CD-ROM)

 *  - CS4231A - WSS codec

 *  - Dream SAM9233+GMS950400+RAM+ROM: Wavetable MIDI, connected to MPU401

 I/O port is configured by jumpers on the card to one of these */

 CMI8328 configuration registers */

/*

 * bit 0:    SB: 0=enabled, 1=disabled

 * bit 1:    gameport: 0=disabled, 1=enabled

 * bits 2-4: SB IRQ: 001=3, 010=5, 011=7, 100=9, 101=10, 110=11

 * bits 5-6: SB DMA: 00=disabled (when SB disabled), 01=DMA0, 10=DMA1, 11=DMA3

 * bit 7:    SB port: 0=0x220, 1=0x240

/*

 * bits 0-1: CD-ROM mode: 00=disabled, 01=Panasonic, 10=Sony/Mitsumi/Wearnes,

			  11=IDE

 * bit 2:    MPU401: 0=disabled, 1=enabled

 * bits 3-4: MPU401 IRQ: 00=3, 01=5, 10=7, 11=9,

 * bits 5-7: MPU401 port: 000=0x300, 001=0x310, 010=0x320, 011=0x330, 100=0x332,

			  101=0x334, 110=0x336

/*

 * bits 0-2: CD-ROM IRQ: 000=disabled, 001=3, 010=5, 011=7, 100=9, 101=10,

			 110=11

 * bits 3-4: CD-ROM DMA: 00=disabled, 01=DMA0, 10=DMA1, 11=DMA3

 * bits 5-7: CD-ROM port: 000=0x300, 001=0x310, 010=0x320, 011=0x330, 100=0x340,

			  101=0x350, 110=0x360, 111=0x370

 yes, value goes to the same port as index */

 CONFIG_PM */

 rename AUX0 switch to CD */

 rename AUX0 volume to CD */

 rename AUX1 switch to Synth */

 rename AUX1 volume to Synth */

 find index of an item in "-1"-ended array */

 the same for long */

 0xff is invalid configuration (but settable - hope it isn't set) */

 the SB disable bit must NEVER EVER be cleared or the WSS dies */

 disable everything first */

 disable CDROM and MPU401 */

 disable CDROM IRQ and DMA */

 configure WSS IRQ... */

 ...and DMA... */

 ...and DMA2 */

 enable separate capture DMA */

 enable and configure MPU401 */

 OPL3 is hardwired to 0x388 and cannot be disabled */

 gameport is hardwired to 0x200 */

 Enable gameport */

 disable everything */

 ignore absent devices */

 ignore absent devices */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for C-Media's CMI8330 and CMI8329 soundcards.

 *  Copyright (c) by George Talusan <gstalusan@uwaterloo.ca>

 *    http://www.undergrad.math.uwaterloo.ca/~gstalusa

/*

 * NOTES

 *

 *  The extended registers contain mixer settings which are largely

 *  untapped for the time being.

 *

 *  MPU401 and SPDIF are not supported yet.  I don't have the hardware

 *  to aid in coding and testing, so I won't bother.

 *

 *  To quickly load the module,

 *

 *  modprobe -a snd-cmi8330 sbport=0x220 sbirq=5 sbdma8=1

 *    sbdma16=5 wssport=0x530 wssirq=11 wssdma=0 fmport=0x388

 *

 *  This card has two mixers and two PCM devices.  I've cheesed it such

 *  that recording and playback can be done through the same device.

 *  The driver "magically" routes the capturing to the AD1848 codec,

 *  and playback to the SB16 codec.  This allows for full-duplex mode

 *  to some extent.

 *  The utilities in alsa-utils are aware of both devices, so passing

 *  the appropriate parameters to amixer and alsactl will give you

 *  full control over both mixers.

/*

 #define ENABLE_SB_MIXER */

/*

 16 - recording mux (SB-mixer-enabled) */

 17 - mute mux (Mode2) */

 17 - mute mux */

 18 - vol */

 19 - master volume */

 20 - line-in volume */

 21 - cd-in volume */

 22 - wave volume */

 23 - mute/rec mux */

 24 - wave rec gain */

 25 - line-in rec gain */

 26 - cd-in rec gain */

 sb or wss */

 mixer reset */

 mute and zero volume channels */

 CMI8329 has a device with ID A@@0001, CMI8330 does not */

 allocate SB16 resources */

 On CMI8239, the OPL3 port might be present in SB16 PnP resources */

 Or hardwired */

 allocate MPU-401 resources */

/*

 * PCM interface

 *

 * since we call the different chip interfaces for playback and capture

 * directions, we need a trick.

 *

 * - copy the ops for each direction into a local record.

 * - replace the open callback with the new one, which replaces the

 *   substream->private_data with the corresponding chip instance

 *   and calls again the original open callback of the chip.

 *

 replace the private_data and call the original open callback */

 replace the private_data and call the original open callback */

 SB16 */

 AD1848 */

/*

 switch on MODE2 */

 CONFIG_PNP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for generic ESS AudioDrive ES18xx soundcards

 *  Copyright (c) by Christian Fischbach <fishbach@pool.informatik.rwth-aachen.de>

 *  Copyright (c) by Abramo Bagnara <abramo@alsa-project.org>

/* GENERAL NOTES:

 *

 * BUGS:

 * - There are pops (we can't delay in trigger function, cause midlevel 

 *   often need to trigger down and then up very quickly).

 *   Any ideas?

 * - Support for 16 bit DMA seems to be broken. I've no hardware to tune it.

/*

 * ES1868  NOTES:

 * - The chip has one half duplex pcm (with very limited full duplex support).

 *

 * - Duplex stereophonic sound is impossible.

 * - Record and playback must share the same frequency rate.

 *

 * - The driver use dma2 for playback and dma1 for capture.

/*

 * ES1869 NOTES:

 *

 * - there are a first full duplex pcm and a second playback only pcm

 *   (incompatible with first pcm capture)

 * 

 * - there is support for the capture volume and ESS Spatializer 3D effect.

 *

 * - contrarily to some pages in DS_1869.PDF the rates can be set

 *   independently.

 *

 * - Zoom Video is implemented by sharing the FM DAC, thus the user can

 *   have either FM playback or Video playback but not both simultaneously.

 *   The Video Playback Switch mixer control toggles this choice.

 *

 * BUGS:

 *

 * - There is a major trouble I noted:

 *

 *   using both channel for playback stereo 16 bit samples at 44100 Hz

 *   the second pcm (Audio1) DMA slows down irregularly and sound is garbled.

 *   

 *   The same happens using Audio1 for captureing.

 *

 *   The Windows driver does not suffer of this (although it use Audio1

 *   only for captureing). I'm unable to discover why.

 *

/*

 * ES1879 NOTES:

 * - When Zoom Video is enabled (reg 0x71 bit 6 toggled on) the PCM playback

 *   seems to be effected (speaker_test plays a lower frequency). Can't find

 *   anything in the datasheet to account for this, so a Video Playback Switch

 *   control has been included to allow ZV to be enabled only when necessary.

 *   Then again on at least one test system the 0x71 bit 6 enable bit is not 

 *   needed for ZV, so maybe the datasheet is entirely wrong here.

 port of ESS chip */

 Control port of ESS chip */

 IRQ number of ESS chip */

 DMA1 */

 DMA2 */

 version of ESS chip */

 Chip capabilities */

 volume level of audio2 */

 active channel mask */

 Has two useable PCM */

 Has 3D Spatializer */

 Has record mixer */

 Has mono duplex only */

 Playback and record must share the same rate */

 More precise rate setting */

 AuxB mixer control */

 Has separate hardware volume mixer controls*/

 Mono_in mixer control */

 I2S mixer control */

 Record source can be muted */

 Has control ports */

 GPO0,1 controlled by PM port */

 Power Management */

 Lowlevel */

 Return old value */

 Return old value */

 set filter register */

		/*

		 * Comment from kernel oss driver:

		 * FKS: fascinating: 0x72 doesn't seem to work.

 Transfer Count Reload */

 Set format */

 Set DMA controller */

 Start DMA */

 Avoid pops */

 Restore Audio 2 volume */

 Enable PCM output */

 Stop DMA */

 Set Audio 2 volume to 0 */

 Disable PCM output */

 Set stereo/mono */

 Transfer Count Reload */

 Set format */

 Set DMA controller */

 Start DMA */

 Stop DMA */

 Set stereo/mono */

 Transfer Count Reload */

 Set format */

 Set DMA controller */

 Start DMA */

 Avoid pops */

 Enable Audio 1 */

 Stop DMA */

 Avoid pops */

 Disable Audio 1 */

 Read Interrupt status */

 Read Interrupt status */

 Audio 1 & Audio 2 */

 ack interrupt */

 ok.. capture is active */

 ok.. playback2 is active */

 ack interrupt */

 MPU */

 Hardware volume */

 ack interrupt */

/*

 *  MIXER part

/* Record source mux routines:

 * Depending on the chipset this mux switches between 4, 5, or 8 possible inputs.

 * bit table for the 4/5 source mux:

 * reg 1C:

 *  b2 b1 b0   muxSource

 *   x  0  x   microphone

 *   0  1  x   CD

 *   1  1  0   line

 *   1  1  1   mixer

 * if it's "mixer" and it's a 5 source mux chipset then reg 7A bit 3 determines

 * either the play mixer or the capture mixer.

 *

 * "map4Source" translates from source number to reg bit pattern

 * "invMap4Source" translates from reg bit pattern to source number

 DS somewhat contradictory for 1869: could be 5 or 8 */

 5 source chips */

 4 source chips */

 8 source chips */

/* Mixer controls

 * These arrays contain setup data for mixer controls.

 * 

 * The controls that are universal to all chipsets are fully initialized

 * here.

/*

 * The chipset specific mixer controls

	/* No need for spinlocks, this function is used only in

 enable extended mode */

 Reset mixer registers */

 Audio 1 DMA demand mode (4 bytes/request) */

 Hardware volume IRQ */

 FM I/O */

 MPU-401 I/O */

 MPU-401 IRQ */

 Audio1 IRQ */

 Audio2 IRQ */

 Audio1 DMA */

 Audio2 DMA */

 Enable Audio 1 IRQ */

 Enable Audio 2 IRQ */

 Enable Audio 1 DMA */

 Enable MPU and hardware volume interrupt */

 Enable ESS wavetable input */

 Enable and set Audio 1 IRQ */

 Enable and set Audio 1 DMA */

 Set Audio 2 DMA */

		/* Enable Audio 2 IRQ and DMA

 Enable and set hardware volume interrupt */

			/* MPU401 share irq with audio

			   Joystick enabled

		/* Change behaviour of register A1

		   4x oversampling

 Enable DMA FIFO */

 Set spatializer parameters to recommended values */

 Flip the "enable I2S" bits for those chipsets that need it */

Leaving I2S enabled on the 1879 screws up the PCM playback (rate effected somehow)

so a Switch control has been added to toggle this 0x71 bit on/off:

snd_es18xx_mixer_bits(chip, 0x71, 0x40, 0x40);

 Note: we fall through on purpose here. */

 Mute input source */

 Enable PCM output */

 reset */

 If has Hardware volume */

 If has Audio2 */

 If has volume count */

 global setup */

 Power Management support functions */

 power down */

 restore PM register, we won't wake till (not 0x07) i/o activity though */

 CONFIG_PM */

	/* finish initializing other chipset specific controls

 Card level */

 Index 0-MAX */

 ID for this card */

 Enable this card */

 0x220,0x240,0x260,0x280 */

 5,7,9,10 */

 0,1,3 */

 0,1,3 */

 end */

 PnP main device initialization */

 ok. hack using Vendor-Defined Card-Level registers */

 skip csn and logdev initialization - already done in isapnp_configure */

 Hardware Volume IRQ Number */

 MPU-401 IRQ Number */

 second IRQ */

 ESS 1868 (integrated on Compaq dual P-Pro motherboard and Genius 18PnP 3D) */

 ESS 1868 (integrated on Maxisound Cards) */

 ESS 1868 (integrated on Maxisound Cards) */

 ESS ES1869 Plug and Play AudioDrive */

 ESS 1869 */

 ESS 1878 */

 ESS 1879 */

 --- */

 end */

 Control port initialization */

 CONFIG_PNP */

 we have another procedure - card */

 CONFIG_PNP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Yamaha OPL3-SA[2,3] soundcards

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 Index 0-MAX */

 ID for this card */

 Enable this card */

 0xf86,0x370,0x100 */

 0x220,0x240,0x260 */

 0x530,0xe80,0xf40,0x604 */

 0x388 */

 0x330,0x300 */

 0,1,3,5,9,11,12,15 */

 1,3,5,6,7 */

 1,3,5,6,7 */

 0,1,2,3 */ 
 control ports */

 opl3sa3 only */

 power management bits */

 2 or 3 */

 control port */

 control port resource */

 SL added */

 Gateway Solo 2500 */

 end */

 Yamaha YMF719E-S (Genius Sound Maker 3DX) */

 Yamaha OPL3-SA3 (integrated on Intel's Pentium II AL440LX motherboard) */

 Yamaha OPL3-SA2 */

 Yamaha OPL3-SA2 */

 NeoMagic MagicWave 3DX */

 NeoMagic MagicWave 3D */

 --- */

 end */

 CONFIG_PNP */

 read control port (w/o spinlock) */

 password */

 register */

 read control port (with spinlock) */

 write control port (w/o spinlock) */

 password */

 register */

 write control port (with spinlock) */

	/*

	snd_printk(KERN_DEBUG "REG 0A = 0x%x\n",

		   snd_opl3sa2_read(chip, 0x0a));

 YMF711 */

 0x02 - standard */

 0x03 - YM715B */

 0x04 - YM719 - OPL-SA4? */

 0x05 - OPL3-SA3 - Libretto 100 */

 0x07 - unknown - Neomagic MagicWave 3D */

 try if the MIC register is accessible */

 initialization */

 Power Management - full on */

 ymode is bits 4&5 (of 0 to 7) on all but opl3sa2 versions */

 default for opl3sa2 versions */

 Interrupt Channel Configuration - IRQ A = OPL3 + MPU + WSS */

 DMA Configuration - DMA A = WSS-R + WSS-P */

 DMA Configuration - DMA B = WSS-R, DMA A = WSS-P */

 Miscellaneous - default */

 Digital Block Partial Power Down - default */

 Analog Block Partial Power Down - default */

 TI,CI,PI */

 hardware volume change */

 reading from Master Lch register at 0x07 clears this bit */

 reassign AUX0 to CD */

 reassign AUX1 to FM */

 add OPL3SA2 controls */

 Power Management support functions */

 power down */

 power up */

 restore registers */

 restore wss */

 CONFIG_PM */

 CONFIG_PNP */

 initialise this card from supplied (or default) parameter*/ 

 we have another procedure - card */

 CONFIG_PNP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Gallant SC-6000 soundcard. This card is also known as

 *  Audio Excel DSP 16 or Zoltrix AV302.

 *  These cards use CompuMedia ASC-9308 chip + AD1848 codec.

 *  SC-6600 and SC-7000 cards are also supported. They are based on

 *  CompuMedia ASC-9408 chip and CS4231 codec.

 *

 *  Copyright (C) 2007 Krzysztof Helt <krzysztof.h1@wp.pl>

 *

 *  I don't have documentation for this card. I used the driver

 *  for OSS/Free included in the kernel source as reference.

 Index 0-MAX */

 ID for this card */

 Enable this card */

 0x220, 0x240 */

 5, 7, 9, 10, 11 */

 0x530, 0xe80 */

 0x300, 0x310, 0x320, 0x330 */

 5, 7, 9, 10, 0 */

 0, 1, 3 */

/*

 * Commands of SC6000's DSP (SBPRO+special).

 * Some of them are COMMAND_xx, in the future they may change.

 Set M&I&DRQ mask (the real config)	*/

					*/

 Read Hardware Config (I/O base etc)	*/

					*/

					*/

					*/

					*/

					*/

 Unknown command 			*/

 Enable Microsoft Sound System mode	*/

					*/

 Get DSP Version			*/

 Get DSP Copyright			*/

/*

 * Offsets of SC6000 DSP I/O ports. The offset is added to base I/O port

 * to have the actual I/O port.

 * Register permissions are:

 * (wo) == Write Only

 * (ro) == Read  Only

 * (w-) == Write

 * (r-) == Read

 offset of DSP RESET		(wo) */

 offset of DSP READ		(ro) */

 offset of DSP WRITE		(w-) */

 offset of DSP COMMAND	(w-) */

 offset of DSP STATUS		(r-) */

 offset of DSP DATA AVAILABLE	(ro) */

 hardware dependent functions */

/*

 * sc6000_irq_to_softcfg - Decode irq number into cfg code.

/*

 * sc6000_dma_to_softcfg - Decode dma number into cfg code.

/*

 * sc6000_mpu_irq_to_softcfg - Decode MPU-401 irq number into cfg code.

		/*

		 * DSP ready to receive data if bit 7 of val == 0

	/*

	 * If no more data available, return to the caller, no error if len>0.

	 * We have no other way to know when the string is finished.

 detection and initialization */

 always set */

 enable WSS system */

 disable IDE */

	/*

	 * My SC-6000 card return "SC-6000" in DSPCopyright, so

	 * if we have something different, we have to be warned.

 set configuration */

 reassign AUX0 to FM */

 reassign AUX1 to CD */

 to make it marked as used */

 FIXME: suspend/resume */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *   ALSA soundcard driver for Miro miroSOUND PCM1 pro

 *                                  miroSOUND PCM12

 *                                  miroSOUND PCM20 Radio

 *

 *   Copyright (C) 2004-2005 Martin Langer <martin-langer@gmx.de>

 *

 *   Based on OSS ACI and ALSA OPTi9xx drivers

 Index 0-MAX */

 ID for this card */

 0x530,0xe80,0xf40,0x604 */

 0x300,0x310,0x320,0x330 */

 0x388 */

 5,7,9,10,11 */

 5,7,9,10 */

 0,1,3 */

 0,1,3 */

 Enable ISA PnP detection */

 PCM20 and PCM12 in PnP mode */

 CONFIG_PNP */

/* 

 *  ACI control

/*

 *  MIXER part

		/* 

		   OSS says it's not readable with versions < 176.

		   But it doesn't work on my card,

		   which is a PCM12 with aci_version = 176.

 equalizer elements */

 non-equalizer elements */

 equalizer elements */

 non-equalizer elements */

 equalizer elements */

 non-equalizer elements */

/* Equalizer with seven bands (only PCM20) 

 enable WSS on PCM1 */

 enable IDE port */

 set common aci values */

 PCM1/PCM12 with power-amp and Line 2 */

 PCM12/PCM20 with mic-preamp */

 PCM20 with radio and 7 band equalizer */

 PnP resource gives the least 10 bits */

/*

 *  Proc Interface

 miroSOUND PCM1 pro, early PCM12 */

 miroSOUND PCM12, PCM12 (Rev. E), PCM12 pnp */

 miroSOUND PCM20 radio */

/*

 *  Init

 OPL4 */

 untested init commands for OPTi929 */

 PnP resource says it decodes only 10 bits of address */

 get ACI port from OPTi9xx MC 4 */

 force ACI into a known state */

 init proc interface */

 It looks like a miro sound card. */

 FIXME: suspend/resume */

	/*

	 * The MC(0) is never accessed and the miroSOUND PCM20 card does not

	 * include it in the PnP resource range. OPTI93x include it.

 only miroSOUND PCM20 and PCM12 == OPTi924 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    card-opti92x-ad1848.c - driver for OPTi 82c92x based soundcards.

    Copyright (C) 1998-2000 by Massimo Piccioni <dafastidio@libero.it>



    Part of this code was developed at the Italian Ministry of Air Defence,

    Sixth Division (oh, che pace ...), Rome.



    Thanks to Maria Grazia Pollarini, Salvatore Vassallo.



 OPTi93X */

 CS4231 */

 CS4231 */

 OPTi93X */

 Index 0-MAX */

 ID for this card */

static bool enable = SNDRV_DEFAULT_ENABLE1;	/* Enable this card */

 Enable ISA PnP detection */

 0x530,0xe80,0xf40,0x604 */

 0x300,0x310,0x320,0x330 */

 0x388 */

 5,7,9,10,11 */

 5,7,9,10 */

 0,1,3 */

 0,1,3 */

 CS4231 || OPTi93X */

module_param(enable, bool, 0444);

MODULE_PARM_DESC(enable, "Enable opti9xx soundcard.");

 CS4231 || OPTi93X */

 OPTi93X */

 OPTi93X */

 OPTi 82C924 */

 OPTi 82C925 */

 OPTi 82C931/3 */

 OPTi93X */

 CONFIG_PNP */

 PnP resource gives the least 10 bits */

 CONFIG_PNP */

 OPTi93X */

 OPTi93X */

 OPTi93X */

 OPTi93X */

 OPTi93X */

 OPTi93X */

 opti 929 mode (?), OPL3 clock output, audio enable */

 enable wave audio */

 enable WSS mode */

 OPL3 FM synthesis */

 disable Sound Blaster IRQ and DMA */

 cs4231/4248 fix enabled */

 cs4231/4248 fix disabled */

 CS4231 */

		/*

		snd_opti9xx_write_mask(chip, OPTi9XX_MC_REG(3), 0xa2, 0xae);

 CS4231 */

 OPTi93X */

 disable 3D sound (set GPIO1 as output, low) */

		/*

		 * The BTC 1817DW has QS1000 wavetable which is connected

		 * to the serial digital input of the OPTI931.

		/* 

		 * This bit sets OPTI931 to automaticaly select FM

		 * or digital input signal.

 OPTi93X */

 PnP resource says it decodes only 10 bits of address */

#ifdef OPTi93X

#endif	/* OPTi93X */

 CS4231 || OPTi93X */

 OPTi93X */

 OPTi93X */

 reassign AUX0 switch to CD */

 reassign AUX1 switch to FM */

 remove AUX1 volume */

 Replace WSS volume controls with OPTi93x volume controls */

 OPTi93X */

 OPTi93X */

 OPTi93X */

	/* adjust mc_indir_index - some cards report it at 0xe?d,

	/*

	 * The MC(0) is never accessed and card does not

	 * include it in the PnP resource range. OPTI93x include it.

 OPTi93X */

 CS4231 || OPTi93X */

 CONFIG_PNP */

 CS4231 || OPTi93X */

 assume we have an OPL4 */

 no luck, use OPL3 instead */

 !OPTi93X */

 OPTi93X */

 CS4231 || OPTi93X */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  Routines for control of ESS ES1688/688/488 chip

 Read a byte from an extended mode register of ES1688 */

 valid only for ESS chips, SB -> 1 */

 enable extended mode */

	/*

	 *  initialization sequence

 Some ESS1688 cards need this */

 ENABLE1 */

 ENABLE1 */

 ENABLE1 */

 ENABLE2 */

 ENABLE1 */

 ENABLE2 */

 ENABLE1 */

 ENABLE1 */

 ENABLE2 */

 ENABLE1 */

 ENABLE0 */

 return identification */

 probably SB */

 disable IRQ */

 disable DMA */

 enable joystick, but disable OPL3 */

 ok.. setup MPU-401 port and joystick and OPL3 */

 enable joystick, but disable OPL3 */

 --- */

 enable only DMA counter interrupt */

 extended mode DMA enable */

 disable all DMA */

 disable IRQ */

 disable DMA */

/*



 set filter register */

 write result to hardware */

 something is wrong */

 auto init DMA mode */

 demand mode (4 bytes/request) */

 8. bit mono */

 16. bit mono */

 8. bit stereo */

 16. bit stereo */

 --- */

 auto init DMA mode */

 demand mode (4 bytes/request) */

 8. bit mono */

 16. bit mono */

 8. bit stereo */

 16. bit stereo */

 --- */

 ok.. playback is active */

 ok.. capture is active */

 ack interrupt */

/*



/*



 Register device */

/*

 *  MIXER part

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for generic ESS AudioDrive ESx688 soundcards

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 Index 0-MAX */

 ID for this card */

 Enable this card */

 0x220,0x240,0x260 */

 Usually 0x388 */

 5,7,9,10 */

 5,7,9,10 */

 0,1,3 */

 share the same port */

 FIXME */

 end */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  Routines for control of CS4231(A)/CS4232/InterWave & compatible chips

 *

 *  Bugs:

 *     - sometimes record brokes playback with WSS portion of

 *       Yamaha OPL3-SA3 chip

 *     - CS4231 (GUS MAX) - still trouble with occasional noises

 *			  - broken initialization?

/*

 *  Some variables

 5510 */	0x00 | CS4231_XTAL2,

 6620 */	0x0E | CS4231_XTAL2,

 8000 */	0x00 | CS4231_XTAL1,

 9600 */	0x0E | CS4231_XTAL1,

 11025 */	0x02 | CS4231_XTAL2,

 16000 */	0x02 | CS4231_XTAL1,

 18900 */	0x04 | CS4231_XTAL2,

 22050 */	0x06 | CS4231_XTAL2,

 27042 */	0x04 | CS4231_XTAL1,

 32000 */	0x06 | CS4231_XTAL1,

 33075 */	0x0C | CS4231_XTAL2,

 37800 */	0x08 | CS4231_XTAL2,

 44100 */	0x0A | CS4231_XTAL2,

 48000 */	0x0C | CS4231_XTAL1

 00/00 - lic */

 01/01 - ric */

 02/02 - la1ic */

 03/03 - ra1ic */

 04/04 - la2ic */

 05/05 - ra2ic */

 06/06 - loc */

 07/07 - roc */

 08/08 - pdfr */

 09/09 - ic */

 0a/10 - pc */

 0b/11 - ti */

 0c/12 - mi */

 0d/13 - lbc */

 0e/14 - pbru */

 0f/15 - pbrl */

 10/16 - afei */

 11/17 - afeii */

 12/18 - llic */

 13/19 - rlic */

 14/20 - tlb */

 15/21 - thb */

 16/22 - la3mic/reserved */

 17/23 - ra3mic/reserved */

 18/24 - afs */

 19/25 - lamoc/version */

 1a/26 - mioc */

 1b/27 - ramoc/reserved */

 1c/28 - cdfr */

 1d/29 - res4 */

 1e/30 - cbru */

 1f/31 - cbrl */

 00/00 - l_mixout_outctrl */

 01/01 - r_mixout_outctrl */

 02/02 - l_cd_inctrl */

 03/03 - r_cd_inctrl */

 04/04 - l_a1/fm_inctrl */

 05/05 - r_a1/fm_inctrl */

 06/06 - l_dac_inctrl */

 07/07 - r_dac_inctrl */

 08/08 - ply_dataform_reg */

 09/09 - if_conf */

 0a/10 - pin_ctrl */

 0b/11 - err_init_reg */

 0c/12 - id_reg */

 0d/13 - reserved */

 0e/14 - ply_upcount_reg */

 0f/15 - ply_lowcount_reg */

 10/16 - reserved/l_a1_inctrl */

 11/17 - reserved/r_a1_inctrl */

 12/18 - l_line_inctrl */

 13/19 - r_line_inctrl */

 14/20 - l_mic_inctrl */

 15/21 - r_mic_inctrl */

 16/22 - l_out_outctrl */

 17/23 - r_out_outctrl */

 18/24 - reserved */

 19/25 - reserved */

 1a/26 - reserved */

 1b/27 - reserved */

 1c/28 - cap_dataform_reg */

 1d/29 - reserved */

 1e/30 - cap_upcount_reg */

 1f/31 - cap_lowcount_reg */

/*

 *  Basic I/O functions

/*

 *  CS4231 detection / MCE routines

 huh.. looks like this sequence is proper for CS4231A chip (GUS MAX) */

 end of cleanup sequence */

	/*

	 * Wait for (possible -- during init auto-calibration may not be set)

	 * calibration process to start. Needs up to 5 sample periods on AD1848

	 * which at the slowest possible rate of 5.5125 kHz means 907 us.

 check condition up to 250 ms */

 check condition up to 100 ms */

/*

 *  CODEC I/O

 snd_BUG();

 rate is same? */

 Fixes audible clicks at least on GUS MAX */

		/*

		 * Program the AD1845 correctly for the playback stream.

		 * Note that we do NOT need to toggle the MCE bit because

		 * the PLAYBACK_ENABLE bit of the Interface Configuration

		 * register is set.

		 *

		 * NOTE: We seem to need to write to the MSB before the LSB

		 *       to get the correct sample frequency.

 this seems to help */

 rate is same? */

		/*

		 * Program the AD1845 correctly for the capture stream.

		 * Note that we do NOT need to toggle the MCE bit because

		 * the PLAYBACK_ENABLE bit of the Interface Configuration

		 * register is set.

		 *

		 * NOTE: We seem to need to write to the MSB before the LSB

		 *       to get the correct sample frequency.

/*

 *  Timer interface

 ok. now enable and ack CODEC IRQ */

 clear IRQ */

 clear IRQ */

 disable IRQ */

 clear IRQ */

 clear IRQ */

 now disable record & playback */

 clear IRQ again */

 clear IRQ */

 clear IRQ */

/*

 *  timer open/close

/*

 *  ok.. exported functions..

 detect overrange only above 0dB; may be user selectable? */

 pretend it was the only possible irq for AD1848 */

/*



 set CS423x MODE 1 */

 0x55 & ~0x10 */

 RMGE always high on AD1847 */

 L/RMGE always low on AT2320 */

 clear pending IRQ */

 set CS423x MODE 2 */

 we have more than 16 registers: check ID */

			/*

			 * on CMI8330, CS4231_VERSION is volume control and

			 * can be set to 0

 this is valid value */

 no valid device found */

 unknown CS4231 chip? */

 clear any pendings IRQ */

 enable fine grained frequency selection */

 ok.. fill all registers */

 ok.. try check hardware version for CS4236+ chips */

 CS4235 */

 CS4236/B */

 CS4237B */

 CS4238B */

 CS4239 */

 all things are ok.. */

/*



/*



 hardware limitation of older chipsets */

 hardware bug in InterWave chipset */

 hardware limitation of cheap chips */

 hardware limitation of older chipsets */

 hardware limitation of cheap chips */

 turn it on */

 turn it off */

 lowlevel suspend callback for CS4231 */

 lowlevel resume callback for CS4231 */

 int timeout; */

 Yamaha needs this to resume properly */

	/* The following is a workaround to avoid freeze after resume on TP600E.

	   This is the first half of copy of snd_wss_mce_down(), but doesn't

	   include rescheduling.  -- iwai

 CONFIG_PM */

 reset */

 global setup */

 Power Management */

 global setup */

 Timer initialization */

/*

 *  MIXER part

 Use only the first 11 entries on AD1848 */

 There is no loopback on OPTI93X */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1999 by Uros Bizjak <uros@kss-loka.si>

 *                        Takashi Iwai <tiwai@suse.de>

 *

 *  SB16ASP/AWE32 CSP control

 *

 *  CSP microcode loader:

 *   alsa-tools/sb16_csp/ 

/*

 * RIFF data format

/*

 * prototypes

/*

 * Detect CSP chip and create a new instance

 CSP operators */

 operators - only write/ioctl */

 create a proc entry */

/*

 * free_private for hwdep instance

 ------------------------------ */

/*

 * open the device exclusively

/*

 * ioctl for hwdep device:

 get information */

 load CSP microcode */

 change CSP running state */

/*

 * close the device

 ------------------------------ */

/*

 * acquire device

/*

 * release device

/*

 * load microcode via ioctl: 

 * code is user-space pointer

 not required function, try next */

 destroy QSound mixer element */

 Clear all flags */

 load microcode blocks */

 init microcode blocks */

 main microcode block */

 fill in codec header */

 QSound decoder */

 set QSound flag and clear all other mode flags */

 A Law codec */

 Mu Law codec */

 what Creative thinks is IMA ADPCM codec */

 Creative ADPCM codec */

 Text 2 Speech decoder */

 TODO: Text2Speech handling routines */

 Fast Speech 8 codec */

 Fast Speech 10 codec */

 other codecs are unsupported */

 Decouple CSP from IRQ and DMAREQ lines */

 finished loading successfully */

 set LOADED flag */

/*

 * unload CSP microcode

 clear supported formats */

 destroy QSound mixer element */

 clear all flags */

/*

 * send command sequence to DSP

/*

 * set CSP codec parameter

 CSP set codec parameter */

 Parameter value */

 Parameter */

 DSP read? */

/*

 * set CSP register

 CSP set register */

 CSP Register */

 value */

/*

 * read CSP register

 * return < 0 -> error

 CSP read register */

 CSP Register */

 Read DSP value */

/*

 * set CSP mode register

 CSP set mode register */

 mode */

/*

 * Detect CSP

 * return 0 if CSP exists.

 0xfc = ?? */

 0x00 = ? */

 reset DSP after getversion! */

 valid version id */

/*

 * get CSP version number

 SB_DSP_!something! */

 get chip version id? */

/*

 * check if the CSP version is valid

/*

 * download microcode to CSP (microcode should have one "main" block).

 CSP download command */

 Send CSP low byte (size - 1) */

 Send high byte */

 send microcode sequence */

 load from kernel space */

 some codecs (FastSpeech) take some time to initialize */

		/*

		 * Read mixer register SB_DSP4_DMASETUP after loading 'main' code.

		 * Start CSP chip if no 16bit DMA channel is set - some kind

		 * of autorun or perhaps a bugfix?

 really! */

 c0 = STOP */

 70 = RUN */

/*

 * autoload hardware codec if necessary

 * return 0 if CSP is loaded and ready to run (p->running != 0)

 if CSP is running or manually loaded then exit */

 autoload microcode only if requested hardware codec is not already loaded */

 Decouple CSP from IRQ and DMAREQ lines */

 clear autoloaded flag */

 clear autoloaded flag */

 set autoloaded flag */

 only 16 bit data */

 HW codecs accept all rates */

/*

 * start CSP

 sample type */

 Mute PCM volume */

 c0 = STOP */

 70 = RUN */

 000n 000n    (n = 1 if mono) */

 00dX 00dX    (d = 1 if 8 bit samples) */

 enable QSound decoder */

 set QSound startup value */

 restore PCM volume */

/*

 * stop CSP

 Mute PCM volume */

 disable QSound decoder */

 c0 = STOP */

 restore PCM volume */

/*

 * pause CSP codec and hold DMA transfer

/*

 * restart CSP codec and resume DMA transfer

 ------------------------------ */

/*

 * QSound mixer control for PCM

 cancel pending transfer of QSound parameters */

/*

 * Transfer qsound parameters to CSP,

 * function should be called from interrupt routine

 left channel */

 right channel */

 ------------------------------ */

/*

 * proc interface

 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *                   Uros Bizjak <uros@kss-loka.si>

 *

 *  Lowlevel routines for control of Sound Blaster cards

	/*

	 *  initialization sequence

 no duplex */

 sb_mixer.c */

/*

 * jazz16.c - driver for Media Vision Jazz16 based soundcards.

 * Copyright (C) 2009 Krzysztof Helt <krzysztof.h1@wp.pl>

 * Based on patches posted by Rask Ingemann Lambertsen and Rene Herman.

 * Based on OSS Sound Blaster driver.

 *

 * This file is subject to the terms and conditions of the GNU General Public

 * License.  See the file COPYING in the main directory of this archive for

 * more details.

 *

 Index 0-MAX */

 ID for this card */

 Enable this card */

 just to call snd_sbdsp_command/reset/get_byte() */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  Routines for control of SoundBlaster cards - MIDI interface

 *

 * --

 *

 * Sun May  9 22:54:38 BST 1999 George David Morrison <gdm@gedamo.demon.co.uk>

 *   Fixed typo in snd_sb8dsp_midi_new_device which prevented midi from 

 *   working.

 *

 * Sun May 11 12:34:56 UTC 2003 Clemens Ladisch <clemens@ladisch.de>

 *   Added full duplex UART mode for DSP version 2.0 and later.

 ack interrupt */

 reset DSP */

 reset DSP */

 reset DSP */

 reset DSP */

 how big is Tx FIFO? */

 Tx FIFO full - try again later */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *     and (c) 1999 Steve Ratcliffe <steve@parabola.demon.co.uk>

 *  Copyright (C) 1999-2000 Takashi Iwai <tiwai@suse.de>

 *

 *  Routines for control of EMU8000 chip

/*

 * emu8000 register controls

/*

 * The following routines read and write registers on the emu8000.  They

 * should always be called via the EMU8000*READ/WRITE macros and never

 * directly.  The macros handle the port number and command word.

 Write a word */

 Set register */

 Send data */

 Read a word */

 Set register */

 Read data */

 Write a double word */

 Set register */

 Send low word of data */

 Send high word of data */

 Read a double word */

 Set register */

 Read low word of data */

/*

 * Set up / close a channel to be used for DMA.

exported*/ void

 DMA write */

 DMA read */

/*

/*

/*

 * detect a card at the given port

 Initialise */

 Check for a recognisable emu8000 */

	/*

	if ((EMU8000_U1_READ(emu) & 0x000f) != 0x000c)

		return -ENODEV;

/*

 * intiailize audio channels

 turn off envelope engines */

 reset all other parameters to zero */

/*

 * initialize DMA address

/*

 * initialization arrays; from ADIP

/* send an initialization array

 * Taken from the oss driver, not obvious from the doc how this

 * is meant to work

/*

 * Send initialization arrays to start up, this just follows the

 * initialisation sequence in the adip.

 wait for 1024 clocks */

/*

 * Size the onboard memory.

 * This is written so as not to need arbitrary delays after the write. It

 * seems that the only way to do this is to use the one channel and keep

 * reallocating between read and write.

 write out a magic number */

 This must really be here and not 2 lines back even */

	/*

	 * Detect first 512 KiB.  If a write succeeds at the beginning of a

	 * 512 KiB page we assume that the whole page is there.

 discard stale data  */

 No RAM */

		/* Write a unique data on the test address.

		 * if the address is out of range, the data is written on

		 * 0x200000(=EMU8000_DRAM_OFFSET).  Then the id word is

		 * changed by this data.

snd_emu8000_dma_chan(emu, 0, EMU8000_RAM_WRITE);*/

		/*

		 * read the data on the just written DRAM address

		 * if not the same then we have reached the end of ram.

snd_emu8000_dma_chan(emu, 0, EMU8000_RAM_READ);*/

snd_emu8000_read_wait(emu);*/

 discard stale data  */

 no memory at this address */

		/*

		 * If it is the same it could be that the address just

		 * wraps back to the beginning; so check to see if the

		 * initial value has been overwritten.

 discard stale data  */

 we must have wrapped around */

 Otherwise, it's valid memory. */

 wait until FULL bit in SMAxW register is false */

/*

 * Initiailise the FM section.  You have to do this to use sample RAM

 * and therefore lose 2 voices.

exported*/ void

	/* Initialize the last two channels for DRAM refresh and producing

 31: FM left channel, 0xffffe0-0xffffe8 */

 full left */

 32: FM right channel, 0xfffff0-0xfffff8 */

 full right */

 this is really odd part.. */

 skew volume & cutoff */

/*

 * The main initialization routine.

 reset the last register index */

 initialize hardware configuration */

 disable audio; this seems to reduce a clicking noise a bit.. */

 initialize audio channels */

 initialize DMA */

 initialize init arrays */

	/*

	 * Initialize the FM section of the AWE32, this is needed

	 * for DRAM refresh as well

 terminate all voices */

 check DRAM memory size */

 enable audio */

 set equzlier, chorus and reverb modes */

/*----------------------------------------------------------------

 * Bass/Treble Equalizer

 -12 dB */

  -8 */

  -6 */

  -4 */

  -2 */

   0 (HW default) */

  +2 */

  +4 */

  +6 */

  +8 */

 +10 */

 +12 dB */

 -12 dB */

 +8 (HW default) */

 +12 dB */

/*

 * set Emu8000 digital equalizer; from 0 to 11 [-12dB - 12dB]

exported*/ void

/*----------------------------------------------------------------

 * Chorus mode control

/*

 * chorus mode parameters

 user can define chorus modes up to 32 */

 feedback level (0xE600-0xE6FF) */

 delay (0-0x0DA3) [1/44100 sec] */

 LFO depth (0xBC00-0xBCFF) */

 right delay (0-0xFFFFFFFF) [1/256/44100 sec] */

 LFO freq LFO freq (0-0xFFFFFFFF) */

 5 parameters for each chorus mode; 3 x 16bit, 2 x 32bit */

 chorus 1 */

 chorus 2 */

 chorus 3 */

 chorus 4 */

 feedback */

 flanger */

 short delay */

 short delay + feedback */

exported*/ int

exported*/ void

/*----------------------------------------------------------------

 * Reverb mode control

/*

 * reverb mode parameters

 user can define reverb modes up to 32 */

/* reverb mode settings; write the following 28 data of 16 bit length

 *   on the corresponding ports in the reverb_cmds array

 room 1 */

 room 2 */

 room 3 */

 hall 1 */

 hall 2 */

 plate */

 delay */

 panning delay */

exported*/ int

exported*/ void

/*----------------------------------------------------------------

 * mixer interface

/*

 * bass/treble

/*

 * chorus/reverb mode

/*

 * FM OPL3 chorus/reverb depth

/*

 * create and attach mixer elements for WaveTable treble/bass controls

/*

 * initialize and register emu8000 synth device.

/*

 * exported stuff

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Patch routines for the emu8000 (AWE32/64)

 *

 *  Copyright (C) 1999 Steve Ratcliffe

 *  Copyright (C) 1999-2000 Takashi Iwai <tiwai@suse.de>

/*

 * Open up channels.

 reserve all 30 voices for loading */

 assign voice 31 and 32 to ROM */

/*

 * Close all dram channels.

/*

/*

 * Read a word from userland, taking care of conversions from

 * 8bit samples etc.

 convert 8bit -> 16bit */

 unsigned -> signed */

/*

/*

 * write sample word data

 *

 * You should not have to keep resetting the address each time

 * as the chip is supposed to step on the next address automatically.

 * It mostly does, but during writes of some samples at random it

 * completely loses words (every one in 16 roughly but with no

 * obvious pattern).

 *

 * This is therefore much slower than need be, but is at least

 * working.

/*

 * Write the sample to EMU800 memory.  This routine is invoked out of

 * the generic soundfont routines as a callback.

 be sure loop points start < end */

 compute true data size to be loaded */

snd_printd("EMU8000: out of memory\n");*/

 not ENOMEM (for compatibility) */

 recalculate address offset */

 dram position (in word) -- mem_offset is byte */

 set the total size (store onto obsolete checksum value) */

 in bytes */

 Set the address to start writing at */

snd_emu8000_init_fm(emu);*/

 first block - write 48 samples for silence */

		/* we may take too long time in this loop.

		 * so give controls back to kernel if needed.

 copy reverse loop */

 if no blank loop is attached in the sample, add it */

 add dram offset */

/*

 * free a sample block

/*

 * sample_reset callback - terminate voices

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *                   Uros Bizjak <uros@kss-loka.si>

 *

 *  Routines for control of 8-bit SoundBlaster cards and clones

 *  Please note: I don't have access to old SB8 soundcards.

 *

 * --

 *

 * Thu Apr 29 20:36:17 BST 1999 George David Morrison <gdm@gedamo.demon.co.uk>

 *   DSP can't respond to commands whilst in "high speed" mode. Caused 

 *   glitching during playback. Fixed.

 *

 * Wed Jul 12 22:02:55 CEST 2000 Uros Bizjak <uros@kss-loka.si>

 *   Cleaned up and rewrote lowlevel routines.

 set playback stereo mode */

 Soundblaster hardware programming reference guide, 3-23 */

 force interrupt */

 save output filter status and turn it off */

 just use force_mode16 for temporary storate... */

 restore output filter and set hardware to mono mode */ 

 save input filter status and turn it off */

 just use force_mode16 for temporary storate... */

 restore input filter status */

 set hardware to mono mode */

 ok.. playback is active */

/*



/*

 *

/*

 *  Initialization part

 sb8_midi.c */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for SoundBlaster 1.0/2.0/Pro soundcards and compatible

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 Index 0-MAX */

 ID for this card */

 Enable this card */

 0x220,0x240,0x260 */

 5,7,9,10 */

 1,3 */

 used to block FM i/o region for legacy cards */

	/*

	 * Block the 0x388 port to avoid PnP conflicts.

	 * No need to check this value after request_region,

	 * as we never do anything with it.

 auto-probe legacy ports */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  synth callback routines for the emu8000 (AWE32/64)

 *

 *  Copyright (C) 1999 Steve Ratcliffe

 *  Copyright (C) 1999-2000 Takashi Iwai <tiwai@suse.de>

/*

 * prototypes

/*

 * Ensure a value is between two points

 * macro evaluates its args more than once, so changed to upper-case.

/*

 * set up operators

/*

 * Terminate a voice

/*

/*

/*

 * Find a channel (voice) within the EMU that is not in use or at least

 * less in use than other channels.  Always returns a valid pointer

 * no matter what.  If there is a real shortage of voices then one

 * will be cut. Such is life.

 *

 * The channel index (vp->ch) must be initialized in this routine.

 * In Emu8k, it is identical with the array index.

 what we are looking for, in order of preference */

 Keeps track of what we are finding */

 XXX MAX_?INT really */

	/*

	 * Go through them all and get a best one to use.

 check if sample is finished playing (non-looping only) */

 not found */

/*

 channel to be silent and idle */

 set pitch offset */

 set envelope parameters */

	/* decay/sustain parameter for volume envelope is used

 cutoff and volume */

 modulation envelope heights */

 lfo1/2 delay */

 lfo1 pitch & cutoff shift */

 lfo1 volume & freq */

 lfo2 pitch & freq */

 pan & loop start */

 chorus & loop end (chorus 8bit, MSB) */

 Q & current address (Q 4bit value, MSB) */

 clear unknown registers */

 reset volume */

/*

 * Start envelope

 set reverb and pitch target */

/*

 * reset voice parameters

/*

 * Set the pitch of a possibly playing note.

/*

 * Set the volume of a possibly already playing note

/*

 * Set pan and loop start address.

 set tremolo (lfo1) volume & frequency */

 set lfo2 pitch & frequency */

 set filterQ */

/*

 * set the envelope & LFO parameters to the default values

 set all mod/vol envelope shape to minimum */

 mod envelope height to zero */

 no delay for LFO1 */

 no pitch shift */

 volume to minimum */

/*

 * sysex callback

/*

 * OSS ioctl callback

 snd_emu8000_init(hw); */ 
/*

 * additional patch keys

 optarg=mode */

 optarg=mode */

/*

 * callback routine

 skip header */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for SoundBlaster 16/AWE32/AWE64 soundcards

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 Index 0-MAX */

 ID for this card */

 Enable this card */

 0x220,0x240,0x260,0x280 */

 0x330,0x300 */

 5,7,9,10 */

 0,1,3 */

 5,6,7 */

 used to block FM i/o region for legacy cards */

 Sound Blaster 16 PnP */

 Sound Blaster 16 PnP */

 Sound Blaster 16 PnP */

 Sound Blaster 16 PnP */

 Sound Blaster 16 PnP */

 Sound Blaster 16 PnP */

 Sound Blaster 16 PnP */

 Sound Blaster 16 PnP */

 Note: This card has also a CTL0051:StereoEnhance device!!! */

 Sound Blaster 16 PnP */

 Sound Blaster Vibra16S */

 Sound Blaster Vibra16C */

 Sound Blaster Vibra16CL - added by ctm@ardi.com */

 Sound Blaster 16 'value' PnP. It says model ct4130 on the pcb, */

 but ct4131 on a sticker on the board.. */

 Sound Blaster Vibra16X */

 Sound Blaster 16 (Virtual PC 2004) */

 SNDRV_SBAWE defined */

 Sound Blaster AWE 32 PnP */

 Sound Blaster AWE 32 PnP */

 Sound Blaster AWE 32 PnP */

 Sound Blaster AWE 32 PnP */

 Sound Blaster AWE 32 PnP */

 Note: This card has also a CTL0051:StereoEnhance device!!! */

 Sound Blaster AWE 32 PnP */

 Note: This card has also a CTL0051:StereoEnhance device!!! */

 Sound Blaster AWE 32 PnP */

 Sound Blaster AWE 32 PnP */

 Sound Blaster AWE 32 PnP */

 Sound Blaster AWE 32 PnP */

 Sound Blaster AWE 32 PnP */

 Sound Blaster AWE 32 PnP */

 Sound Blaster 32 PnP */

 Sound Blaster AWE 64 PnP */

 Sound Blaster AWE 64 PnP Gold */

 Sound Blaster AWE 64 PnP Gold */

 Sound Blaster AWE 64 PnP */

 Sound Blaster AWE 64 PnP */

 Sound Blaster AWE 64 PnP */

 Sound Blaster AWE 64 PnP */

 Sound Blaster AWE 64 PnP */

 Sound Blaster AWE 64 PnP */

 Sound Blaster 16 PnP (AWE) */

 Generic entries */

 SNDRV_SBAWE */

 CONFIG_PNP */

 Audio initialization */

 WaveTable initialization */

 CONFIG_PNP */

 disable */

 CSP chip on SB16ASP/AWE32 */

 setup Mic AGC */

 non-PnP FM port address is hardwired with base port address */

 block the 0x388 port to avoid PnP conflicts */

 non-PnP AWE port address is hardwired with base port address */

 CONFIG_PNP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  Routines for control of 16-bit SoundBlaster cards and clones

 *  Note: This is very ugly hardware which uses one 8-bit DMA channel and

 *        second 16-bit DMA channel. Unfortunately 8-bit DMA channel can't

 *        transfer 16-bit samples and 16-bit DMA channels can't transfer

 *        8-bit samples. This make full duplex more complicated than

 *        can be... People, don't buy these soundcards for full 16-bit

 *        duplex!!!

 *  Note: 16-bit wide is assigned to first direction which made request.

 *        With full duplex - playback is preferred with abstract layer.

 *

 *  Note: Some chip revisions have hardware bug. Changing capture

 *        channel from full-duplex 8bit DMA to 16bit DMA will block

 *        16bit DMA transfers from DSP chip (capture) until 8bit transfer

 *        to DSP chip (playback) starts. This bug can be avoided with

 *        "16bit DMA Allocation" setting set to Playback or Capture.

 manually loaded codec */

 Supported runtime PCM format for playback */

 If CSP was successfully acquired */

 QSound decoder is loaded and enabled */

 Only for simple PCM formats */

 If CSP was successfully acquired */

 Acquire CSP and try to autoload hardware codec */

 Unsupported format, release CSP */

 Try to start CSP */

 Failed, release CSP */

 Success, CSP acquired and running */

 manually loaded codec */

 Supported runtime PCM format for capture */

 If CSP was successfully acquired */

 Acquire CSP and try to autoload hardware codec */

 Unsupported format, release CSP */

 Try to start CSP */

 Failed, release CSP */

 Success, CSP acquired and running */

 CSP decoders (QSound excluded) support only 16bit transfers */

 manually loaded codec */

 autoloaded codecs */

 CSP coders support only 16bit transfers */

 manually loaded codec */

 autoloaded codecs */

nop*/

nop*/

nop*/

nop*/

nop*/

nop*/

nop*/

 next two lines are needed for some types of DSP4 (SB AWE 32 - 4.13) */

 next two lines are needed for some types of DSP4 (SB AWE 32 - 4.13) */

/*



/*



/*

 *  open/close

 skip if 16 bit DMA was reserved for capture */

 Vibra16X hack */

 DSP v 4.xx can transfer 16bit data through 8bit DMA channel, SBHWPG 2-7 */

 skip if 16 bit DMA was reserved for playback */

 Vibra16X hack */

 DSP v 4.xx can transfer 16bit data through 8bit DMA channel, SBHWPG 2-7 */

/*

 *  DMA control interface

/*

 *  Initialization part

 note: mpu register should be present only on SB16 Vibra soundcards */

 printk(KERN_DEBUG "codec->irq=%i, codec->dma8=%i, codec->dma16=%i\n", chip->irq, chip->dma8, chip->dma16);

 disable MPU */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * pcm emulation on emu8000 wavetable

 *

 *  Copyright (C) 2002 Takashi Iwai <tiwai@suse.de>

/*

 * define the following if you want to use this pcm with non-interleaved mode

 #define USE_NONINTERLEAVE */

/* NOTE: for using the non-interleaved mode with alsa-lib, you have to set

 * mmap_emulation flag to 1 in your .asoundrc, such like

 *

 *	pcm.emu8k {

 *		type plug

 *		slave.pcm {

 *			type hw

 *			card 0

 *			device 1

 *			mmap_emulation 1

 *		}

 *	}

 *

 * besides, for the time being, the non-interleaved mode doesn't work well on

 * alsa-lib...

/*

 * open up channels for the simultaneous data transfer and playback

 reserve up to 2 voices for playback */

 reserve 28 voices for loading */

 assign voice 31 and 32 to ROM */

/*

/*

 * close all channels

/*

 * convert Hz to AWE32 rate offset (see emux/soundfont.c)

 base = 44100 */

/*

/*

 * get the current position at the given channel from CCCA register

/*

 * timer interrupt handler

 * check the current position and update the period if necessary.

 update the current pointer */

 reprogram timer */

 update period */

/*

 * open pcm

 * creating an instance here

 use timer to update periods.. (specified in msec) */

/*

 * calculate pitch target

/*

 * set up the voice

 channel to be silent and idle */

 pitch offset */

 set envelope parameters */

	/* decay/sustain parameter for volume envelope is used

 modulation envelope heights */

 lfo1/2 delay */

 lfo1 pitch & cutoff shift */

 lfo1 volume & freq */

 lfo2 pitch & freq */

 pan & loop start */

 chorus & loop end (chorus 8bit, MSB) */

 chorus

 Q & current address (Q 4bit value, MSB) */

 filterQ

 clear unknown registers */

/*

 * trigger the voice

 cutoff and volume */

 trigger envelope */

 set reverb and pitch target */

 reverb

 start timer */

/*

 * stop the voice immediately

 stop timer */

/*

 * copy / silence ops

/*

 * this macro should be inserted in the copy/silence loops

 * to reduce the latency.  without this, the system will hang up

 * during the whole loop.

 copy one channel block */

 convert to word unit */

 convert to word unit */

 make a channel block silence */

 convert to word unit */

 interleave */

/*

 * copy the interleaved data can be done easily by using

 * DMA "left" and "right" channels on emu8k engine.

 convert to frames */

 convert to frames */

 convert to frames */

/*

 * allocate a memory block

 reallocation - release the old block */

 in word */

 at least dma_bytes must be set for non-interleaved mode */

/*

 * free the memory block

 to be sure

/*

 clear loop blanks */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  Routines for Sound Blaster mixer control

/*

 * Single channel mixer element

/*

 * Double channel mixer element

/*

 * DT-019x / ALS-007 capture/input switch

 To record the synth on these cards you must record the main.   */

 Thus SB_DT019X_CAP_SYNTH == SB_DT019X_CAP_MAIN and would cause */

 duplicate case labels if left uncommented. */

	/* case SB_DT019X_CAP_SYNTH:

	 *	ucontrol->value.enumerated.item[0] = 3;

	 *	break;

/*

 * ALS4000 mono recording control switch

/*

 * SBPRO input multiplexer

/*

 * SB16 input switch

/*

/*

/*

 * SB 2.0 specific mixer elements

/*

 * SB Pro specific mixer elements

/*

 * SB16 specific mixer elements

/*

 * DT019x specific mixer elements

	/* ALS4000 below has some parts which we might be lacking,

 Includes PC-speaker in high nibble */

/*

 * ALS4000 specific mixer elements

	/* FIXME: functionality of 3D controls might be swapped, I didn't find

 FIXME: maybe there's actually some standard 3D ctrl name for it?? */

	/* FIXME: ALS4000a.pdf mentions BBD (Bucket Brigade Device) time delay,

	 * but what ALSA 3D attribute is that actually? "Center", "Depth",

/*

 mixer reset */

 mute and zero volume channels */

 no mixer chip on SB1.x */

 use only the first 16 controls from SB16 */

	/* please verify in dsheet whether regs to be added

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *     and (c) 1999 Steve Ratcliffe <steve@parabola.demon.co.uk>

 *  Copyright (C) 1999-2000 Takashi Iwai <tiwai@suse.de>

 *

 *  Emu8000 synth plug-in routine

----------------------------------------------------------------*/

/*

 * create a new hardware dependent device for Emu8000

 already exists..? */

 number of virmidi ports */

 FIXED */

/*

 * free all resources

 no synth was allocated actually */

/*

 *  INIT part

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  Routines for control of ICS 2101 chip and "mixer" in GF1 chip

/*

 *

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  GUS's memory access via proc filesystem

 data are in ROM */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  Routines for control of GF1 chip (PCM things)

 *

 *  InterWave chips supports interleaved DMA, but this feature isn't used in

 *  this code.

 *  

 *  This code emulates autoinit DMA transfer for playback, recording by GF1

 *  chip doesn't support autoinit DMA.

 maximum rate */

	/*

	snd_printk(KERN_DEBUG "block change - offset = 0x%x, count = 0x%x\n",

		   offset, count);

 enable WAVE IRQ */

 enable RAMP IRQ + rollover */

 loop enable */

 disable rollover */

		/*

		snd_printk(KERN_DEBUG "init: curr=0x%x, begin=0x%x, end=0x%x, "

			   "ctrl=0x%x, ramp=0x%x, rate=0x%x\n",

			   curr, begin, end, voice_ctrl, ramp_ctrl, rate);

 deactivate voice */

 disable IRQ for next voice */

 last block? */

 enable loop */

 enable rollover */

 stop ramp, but leave rollover bit untouched */

 are we active? */

 load real volume - better precision */

	/*

	printk(KERN_DEBUG

	       "poke block; buf = 0x%x, pos = %i, count = %i, port = 0x%x\n",

	       (int)buf, pos, count, gus->gf1.port);

 limit, to allow IRQ */

 IRQ at end, enable & start */

 disable sampling */

 Sampling Control Register */

 disable sampling */

 Sampling Control Register */

 are we active? */

 load real volume - better precision */

 playback setup */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for AMD InterWave soundcard

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *

 *   1999/07/22		Erik Inge Bolso <knan@mo.himolde.no>

 *			* mixer group handlers

 Index 0-MAX */

 ID for this card */

 Enable this card */

 0x210,0x220,0x230,0x240,0x250,0x260 */

 0x350,0x360,0x370,0x380 */

 2,3,5,9,11,12,15 */

 0,1,3,5,6,7 */

 0,1,3,5,6,7 */

 0 to 31, (0.59V-4.52V or 0.389V-2.98V) */

 Gravis UltraSound Plug & Play */

 STB SoundRage32 */

 MED3210 */

 Dynasonic Pro */

 This device also have CDC1117:DynaSonix Pro Audio Effects Processor */

 Panasonic PCA761AW Audio Card */

 InterWave STB without TEA6330T */

 InterWave STB with TEA6330T */

 CONFIG_PNP */

 reset GF1 */

 release reset */

 ok.. We have an InterWave board */

 IRQ bit is set? */

 000 */ unsigned char iwave[8];

 008 */ unsigned char rom_hdr_revision;

 009 */ unsigned char series_number;

 010 */ unsigned char series_name[16];

 026 */ unsigned char date[10];

 036 */ unsigned short vendor_revision_major;

 038 */ unsigned short vendor_revision_minor;

 040 */ unsigned int rom_size;

 044 */ unsigned char copyright[128];

 172 */ unsigned char vendor_name[64];

 236 */ unsigned char rom_description[128];

 364 */ unsigned char pad[147];

 511 */ unsigned char csum;

 enhanced mode */

 DRAM I/O cycles selected */

 ok.. simple test of memory size */

 ok.. for testing of 0k RAM */

 select ROM */

 first check */

 not valid rom */

 select RAM */

 ok.. some InterWave specific initialization */

 remove mono microphone controls */

 add new master and mic controls */

 reassign AUXA to SYNTHESIZER */

 reassign AUXB to CD */

 Synth & Codec initialization */

 Tone Control initialization */

 CONFIG_PNP */

 FIXME: suspend,resume */

 FIXME: suspend,resume */

 CONFIG_PNP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Routine for IRQ handling from GF1/InterWave chip

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 snd_printk(KERN_DEBUG "IRQ: status = 0x%x\n", status); */

 multi request */

 mark request */

 voice position IRQ */

 volume ramp IRQ */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  DRAM access routines

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  I/O routines for GF1/InterWave synthesizer chips

/*

 *  =======================================================================

/*

 *  ok.. stop of control registers (wave & ramp) need some special things..

 *       big UltraClick (tm) elimination...

/*

 *  =======================================================================

/*



  0  */

/*



  0  */

 enhanced mode */

 Effect processor */

 LFO enabled? */

  0  */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Gravis UltraSound MAX soundcard

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 Index 0-MAX */

 ID for this card */

 Enable this card */

 0x220,0x230,0x240,0x250,0x260 */

 2,3,5,9,11,12,15 */

 1,3,5,6,7 */

 1,3,5,6,7 */

 0 to 31, (0.59V-4.52V or 0.389V-2.98V) */

 reset GF1 */

 release reset */

 IRQ bit is set? */

 init control register */

 reassign AUXA to SYNTHESIZER */

 reassign AUXB to CD */

 reassign Mono Input to MIC */

 FIXME: suspend/resume */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Gravis UltraSound Extreme soundcards

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 Index 0-MAX */

 ID for this card */

 Enable this card */

 0x220,0x240,0x260 */

 0x210,0x220,0x230,0x240,0x250,0x260,0x270 */

 0x300,0x310,0x320 */

 5,7,9,10 */

 5,7,9,10 */

 2,3,5,9,11,12,15 */

 0,1,3 */

 0 to 31, (0.59V-4.52V or 0.389V-2.98V) */

	/*

	 * This is main stuff - enable access to GF1 chip...

	 * I'm not sure, if this will work for card which have

	 * ES1688 chip in another place than 0x220.

         *

         * I used reverse-engineering in DOSEMU. [--jk]

	 *

	 * ULTRINIT.EXE:

	 * 0x230 = 0,2,3

	 * 0x240 = 2,0,1

	 * 0x250 = 2,0,3

	 * 0x260 = 2,2,1

 don't change!!! */

 reset GF1 */

 release reset */

 reassign AUX to SYNTHESIZER */

 reassign Master Playback Switch to Synth Playback Switch */

 FIXME */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  GUS's memory allocation routines / bottom layer

 ok.. shared block */

 I assume that bank address is already aligned.. */

 TODO: remove in the future */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  Routines for the GF1 MIDI interface - like UART 6850

 data in Rx FIFO? */

 arm counter to new value */

 framing error */

 try unlock output */

 Tx FIFO free? */

 no other bytes or error */

 disable Tx interrupt */

 reset */

 normal operations */

 input active? */

 clean Rx */

 enable Rx interrupts */

 disable Rx interrupts */

 wait for empty Rx - Tx is probably unlocked */

 Tx FIFO free? */

 enable Tx interrupt */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Routines for GF1 DMA control

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 align */

 align */

 PCM block have bigger priority than synthesizer one */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for Gravis UltraSound Classic soundcard

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 Index 0-MAX */

 ID for this card */

 Enable this card */

 0x220,0x230,0x240,0x250,0x260 */

 3,5,9,11,12,15 */

 1,3,5,6,7 */

 1,3,5,6,7 */

 0 to 31, (0.59V-4.52V or 0.389V-2.98V) */

 reset GF1 */

 release reset */

 FIXME */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

/*

 *  ok.. default interrupt handlers...

/*



 DRAM DMA Control Register */

 Timer Control */

 Sampling Control Register */

 DRAM DMA Control Register */

 Sampling Control Register */

 IRQ Source Register */

/*

 *  put selected GF1 voices to initial stage...

 Voice Control Register = voice stop */

 Volume Ramp Control Register = ramp off */

 Deactivate voice */

 this can't be done in interrupt */

 ramp rate */

 ramp start */

 ramp end */

 ramp down */

/*

 *  call this function only by start of driver

 reset GF1 */

 disable IRQ & DAC */

 huh.. this cleanup took me some time... */

 enhanced mode !!!! */

 initialize LFOs & clear LFOs memory */

 Reset Register = IRQ enable, DAC enable */

 Reset Register = IRQ enable, DAC enable */

 enhanced mode !!!! */

/*

 *  call this function only by shutdown of driver

 stop all timers */

 stop all voices */

 disable IRQ & DAC */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Routines for Gravis UltraSound soundcards - Timers

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *

 *  GUS have similar timers as AdLib (OPL2/OPL3 chips).

/*

 *  Timer 1 - 80us

 timer 1 count */

 enable timer 1 IRQ */

 timer 2 start */

 disable timer #1 */

/*

 *  Timer 2 - 320us

 timer 2 count */

 enable timer 2 IRQ */

 timer 2 start */

 disable timer #1 */

/*



/*



 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Routines for Gravis UltraSound soundcards

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

/*

 *

 fill register variables for speedup */

 allocate resources */

/*

 *  Memory detection routine for plain GF1 soundcards

 some memory were detected */

 disable MIC, LINE IN, enable LINE OUT */

 enable LINE IN */

 enable MIC */

 enable latches */

 disable latches */

 standard GUSes doesn't have midi uart trouble */

 gus_io.c */

 gus_reset.c */

 gus_mixer.c */

 gus_pcm.c */

 gus.c */

 gus_irq.c */

 gus_uart.c */

 gus_dram.c */

 gus_volume.c */

 gus_mem.c */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 for snd-gus-synth module */

  0  */

 The FC table above is a list of pairs. The first number in the pair     */

 is the cents index from 0-255 cents, and the second number in the       */

 pair is the FC adjustment needed to change the pitch by the indexed     */

 number of cents. The table was created for an FC of 32768.              */

 The following expression does a linear interpolation against the        */

 approximated log curve in the table above, and then scales the number   */

 by the FC before the LFO. This calculation also adjusts the output      */

 value to produce the appropriate depth for the hardware. The depth      */

 is 2 * desired FC + 1.                                                  */

  0  */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Generic driver for CS4231 chips

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  Originally the CS4232/CS4232A driver, modified for use on CS4231 by

 *  Tugrul Galatali <galatalt@stuy.edu>

 Index 0-MAX */

 ID for this card */

 Enable this card */

 PnP setup */

 PnP setup */

 5,7,9,11,12,15 */

 9,11,12,15 */

 0,1,3,5,6,7 */

 0,1,3,5,6,7 */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Driver for generic CS4232/CS4235/CS4236/CS4236B/CS4237B/CS4238B/CS4239 chips

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 Index 0-MAX */

 ID for this card */

 Enable this card */

 PnP setup */

 PnP setup */

 PnP setup */

 PnP setup */

 PnP setup */

 5,7,9,11,12,15 */

 9,11,12,15 */

 0,1,3,5,6,7 */

 0,1,3,5,6,7 */

 CONFIG_PNP */

/*

 * PNP BIOS

	/* Guillemot Turtlebeach something appears to be cs4232 compatible

 Philips PCA70PS */

 TerraTec Maestro 32/96 (CS4232) */

 HP Omnibook 5500 onboard */

 Unnamed CS4236 card (Made in Taiwan) */

 Turtle Beach TBS-2000 (CS4232) */

 Turtle Beach Tropez Plus (CS4232) */

 SIC CrystalWave 32 (CS4232) */

 Netfinity 3000 on-board soundcard */

 Intel Marlin Spike Motherboard - CS4235 */

 Intel Marlin Spike Motherboard (#2) - CS4235 */

 Unknown Intel mainboard - CS4235 */

 Genius Sound Maker 3DJ - CS4237B */

 Digital PC 5000 Onboard - CS4236B */

 some unknown CS4236B */

 Intel PR440FX Onboard sound */

 CS4235 on mainboard without MPU */

 Gateway E1000 Onboard CS4236B */

 HP 6330 Onboard sound */

 Crystal Computer TidalWave128 */

 ACER AW37 - CS4235 */

 build-in soundcard in EliteGroup P5TX-LA motherboard - CS4237B */

 Crystal 3D - CS4237B */

 Typhoon Soundsystem PnP - CS4236B */

 Crystal CX4235-XQ3 EP - CS4235 */

 Crystal Semiconductors CS4237B */

 NewClear 3D - CX4237B-XQ3 */

 Dell Optiplex GX1 - CS4236B */

 Dell P410 motherboard - CS4236B */

 Dell Workstation 400 Onboard - CS4236B */

 Turtle Beach Malibu - CS4237B */

 CS4235 - onboard */

 IBM Aptiva 2137 E24 Onboard - CS4237B */

 IBM IntelliStation M Pro motherboard */

 Guillemot MaxiSound 16 PnP - CS4236B */

 Gallant SC-70P */

 Techmakers MF-4236PW */

 TerraTec AudioSystem EWS64XL - CS4236B */

 TerraTec AudioSystem EWS64XL - CS4236B */

 ACER AW37/Pro - CS4235 */

 ACER AW35/Pro - CS4237B */

 CS4235 without MPU401 */

 Unknown SiS530 - CS4235 */

 IBM IntelliStation M Pro 6898 11U - CS4236B */

 IBM PC 300PL Onboard - CS4236B */

 Some noname CS4236 based card */

 CS4236B */

 CS4236B */

 --- */

 end */

 WSS initialization */

 CTRL initialization */

 MPU initialization */

 disable interrupt */

 WSS initialization */

 CTRL initialization */

 MPU initialization */

 CONFIG_PNP */

 we have another procedure - card */

 prepare second id */

 CONFIG_PNP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  Routines for control of CS4235/4236B/4237B/4238B/4239 chips

 *

 *  Note:

 *     -----

 *

 *  Bugs:

 *     -----

/*

 *  Indirect control registers (CS4236B+)

 * 

 *  C0

 *     D8: WSS reset (all chips)

 *

 *  C1 (all chips except CS4236)

 *     D7-D5: version 

 *     D4-D0: chip id

 *             11101 - CS4235

 *             01011 - CS4236B

 *             01000 - CS4237B

 *             01001 - CS4238B

 *             11110 - CS4239

 *

 *  C2

 *     D7-D4: 3D Space (CS4235,CS4237B,CS4238B,CS4239)

 *     D3-D0: 3D Center (CS4237B); 3D Volume (CS4238B)

 * 

 *  C3

 *     D7: 3D Enable (CS4237B)

 *     D6: 3D Mono Enable (CS4237B)

 *     D5: 3D Serial Output (CS4237B,CS4238B)

 *     D4: 3D Enable (CS4235,CS4238B,CS4239)

 *

 *  C4

 *     D7: consumer serial port enable (CS4237B,CS4238B)

 *     D6: channels status block reset (CS4237B,CS4238B)

 *     D5: user bit in sub-frame of digital audio data (CS4237B,CS4238B)

 *     D4: validity bit in sub-frame of digital audio data (CS4237B,CS4238B)

 * 

 *  C5  lower channel status (digital serial data description) (CS4237B,CS4238B)

 *     D7-D6: first two bits of category code

 *     D5: lock

 *     D4-D3: pre-emphasis (0 = none, 1 = 50/15us)

 *     D2: copy/copyright (0 = copy inhibited)

 *     D1: 0 = digital audio / 1 = non-digital audio

 *     

 *  C6  upper channel status (digital serial data description) (CS4237B,CS4238B)

 *     D7-D6: sample frequency (0 = 44.1kHz)

 *     D5: generation status (0 = no indication, 1 = original/commercially precaptureed data)

 *     D4-D0: category code (upper bits)

 *

 *  C7  reserved (must write 0)

 *

 *  C8  wavetable control

 *     D7: volume control interrupt enable (CS4235,CS4239)

 *     D6: hardware volume control format (CS4235,CS4239)

 *     D3: wavetable serial port enable (all chips)

 *     D2: DSP serial port switch (all chips)

 *     D1: disable MCLK (all chips)

 *     D0: force BRESET low (all chips)

 *

/*

 *

 CS4236_LEFT_LINE */		0xff,

 CS4236_RIGHT_LINE */		0xff,

 CS4236_LEFT_MIC */		0xdf,

 CS4236_RIGHT_MIC */		0xdf,

 CS4236_LEFT_MIX_CTRL */	0xe0 | 0x18,

 CS4236_RIGHT_MIX_CTRL */	0xe0,

 CS4236_LEFT_FM */		0xbf,

 CS4236_RIGHT_FM */		0xbf,

 CS4236_LEFT_DSP */		0xbf,

 CS4236_RIGHT_DSP */		0xbf,

 CS4236_RIGHT_LOOPBACK */	0xbf,

 CS4236_DAC_MUTE */		0xe0,

 CS4236_ADC_RATE */		0x01,	
 CS4236_DAC_RATE */		0x01,	
 CS4236_LEFT_MASTER */	0xbf,

 CS4236_RIGHT_MASTER */	0xbf,

 CS4236_LEFT_WAVE */		0xbf,

 CS4236_RIGHT_WAVE */		0xbf

/*

 *

/*

 *  PCM

 set fast playback format change and clean playback FIFO */

 set fast capture format change and clean capture FIFO */

 why? CS4235 - master left */

 why? CS4235 - master right */

 CONFIG_PM */

/*

 * This function does no fail if the chip is not CS4236B or compatible.

 * It just an equivalent to the snd_wss_create() then.

	/*

	 * 0x8c for C8 is valid for Turtle Beach Malibu - the IEC-958

	 * output is working with this setup, other hardware should

	 * have different signal paths and this value should be

	 * selectable in the future

 initialize extended registers */

 initialize compatible but more featured registers */

/*

 *  MIXER

 SPDX-License-Identifier: GPL-2.0-or-later

/*********************************************************************

 *

 * Linux multisound pinnacle/fiji driver for ALSA.

 *

 * 2002/06/30 Karsten Wiese:

 *	for now this is only used to build a pinnacle / fiji driver.

 *	the OSS parent of this code is designed to also support

 *	the multisound classic via the file msnd_classic.c.

 *	to make it easier for some brave heart to implemt classic

 *	support in alsa, i left all the MSND_CLASSIC tokens in this file.

 *	but for now this untested & undone.

 *

 * ripped from linux kernel 2.4.18 by Karsten Wiese.

 *

 * the following is a copy of the 2.4.18 OSS FREE file-heading comment:

 *

 * Turtle Beach MultiSound Sound Card Driver for Linux

 * msnd_pinnacle.c / msnd_classic.c

 *

 * -- If MSND_CLASSIC is defined:

 *

 *     -> driver for Turtle Beach Classic/Monterey/Tahiti

 *

 * -- Else

 *

 *     -> driver for Turtle Beach Pinnacle/Fiji

 *

 * 12-3-2000  Modified IO port validation  Steve Sycamore

 *

 * Copyright (C) 1998 Andrew Veliath

 *

 Send ack to DSP */

 inb(chip->io + HP_RXL); */

 Evaluate queued DSP messages */

 Send ack to DSP */

 Motorola 56k shared memory base */

 Critical section: bank 1 access */

 Digital audio play queue */

 Digital audio record queue */

 MIDI out queue */

 MIDI in queue */

 DSP -> host message queue */

 Setup some DSP values */

 Unconditionally halt */

/*

 * ALSA callback function, called when attempting to open the MIDI device.

 Pinnacle/Fiji Logical Device Configuration */

 Reset devices if told to */

 Index 0-MAX */

 ID for this card */

 Extra Peripheral Configuration (Default: Disable) */

 If we have the digital daugherboard... */

 Extra Peripheral Configuration */

 MSND_CLASSIC */

 MSND_CLASSIC */

 DSP */

 The following are Pinnacle specific */

 MPU */

 IDE */

 Joystick */

 MSND_CLASSIC */

 FIXME: suspend, resume */

	/*

	 * Check that we still have room for another sound card ...

	/*

	 * Create a new ALSA sound card entry, in anticipation

	 * of detecting our hardware ...

	/*

	 * Read the correct parameters off the ISA PnP bus ...

 Pinnacle PnP */

 end */

 CONFIG_PNP */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>

 *  Copyright (c) 2009 by Krzysztof Helt

 *  Routines for control of MPU-401 in UART mode

 *

 *  MPU-401 supports UART mode which is not capable generate transmit

 *  interrupts thus output is done via polling. Also, if irq < 0, then

 *  input is done also via polling. Do not expect good performance.

 MSNDMIDI_MODE_XXXX */

/*

 * input/output open/close - protected by open_mutex in rawmidi.c

/*

 * trigger input

 The work is in msnd_pinnacle.c, just define MSND_CLASSIC before it. */

 SPDX-License-Identifier: GPL-2.0-or-later

/*********************************************************************

 *

 * 2002/06/30 Karsten Wiese:

 *	removed kernel-version dependencies.

 *	ripped from linux kernel 2.4.18 (OSS Implementation) by me.

 *	In the OSS Version, this file is compiled to a separate MODULE,

 *	that is used by the pinnacle and the classic driver.

 *	since there is no classic driver for alsa yet (i dont have a classic

 *	& writing one blindfold is difficult) this file's object is statically

 *	linked into the pinnacle-driver-module for now.	look for the string

 *		"uncomment this to make this a module again"

 *	to do guess what.

 *

 * the following is a copy of the 2.4.18 OSS FREE file-heading comment:

 *

 * msnd.c - Driver Base

 *

 * Turtle Beach MultiSound Sound Card Driver for Linux

 *

 * Copyright (C) 1998 Andrew Veliath

 *

/*	interruptible_sleep_on_timeout(

		&chip->writeflush,

size, n,*/ timeout = 3;

 void *DAQD; */

 Increment the tail and check for queue wrap */

 Get our digital audio queue struct */

 Get length of data */

	/* Read data from the head (unprotected bank 1 access okay

	/* unsigned long flags;

 Get our digital audio queue struct */

 Write size of this bank */

 Then advance the tail */

		/*

		if (protect)

			snd_printd(KERN_INFO "B %X %lX\n",

				   bank_num, xtime.tv_usec);

 Tell the DSP to play the bank */

	/*

	if (protect)

		snd_printd(KERN_INFO "%lX\n", xtime.tv_usec);

 spin_unlock_irqrestore(&chip->lock, flags); not necessary */

 unsigned long	flags; */

 snd_msnd_init_queue(chip->DARQ, DARQ_DATA_BUFF, DARQ_BUFF_SIZE); */

 Critical section: bank 1 access. this is how the OSS driver does it:*/

	/* dont do this here:

	 * snd_msnd_calibrate_adc(chip->play_sample_rate);

 interrupt diagnostic, comment this out later */

 SPDX-License-Identifier: GPL-2.0-or-later

/***************************************************************************

			  msnd_pinnacle_mixer.c  -  description

			     -------------------

    begin		: Fre Jun 7 2002

    copyright 		: (C) 2002 by karsten wiese

    email		: annabellesgarden@yahoo.de

/***************************************************************************

 *							      		   *

 *									   *

 Input source 1  (aux1) */

  Recording monitor  */

 Recording level */

 Input gain */

 Output gain */

 Digital (input) 1 */

	Device mask bits	*/

 MSND_MASK_IMIX is the default */

 master volume unscaled controls */

 line pot control */

 scaled by IMIX in digital mix */

 mic pot control */

 scaled by IMIX in digital mix */

 master volume */

 aux pot control */

 scaled by master volume */

 digital controls */

 synth vol (dsp mix) */

 pcm vol (dsp mix) */

 input monitor (dsp mix) */

 scaled by master volume */

 update master volume scaled controls */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    card-ad1816a.c - driver for ADI SoundPort AD1816A based soundcards.

    Copyright (C) 2000 by Massimo Piccioni <dafastidio@libero.it>



 Index 1-MAX */

 ID for this card */

 Enable this card */

 PnP setup */

 PnP setup */

 PnP setup */

 Pnp setup */

 Pnp setup */

 PnP setup */

 PnP setup */

 Analog Devices AD1815 */

 Analog Devices AD1816? */

 Analog Devices AD1816A - added by Kenneth Platz <kxp@atl.hp.com> */

 Analog Devices AD1816A - Aztech/Newcom SC-16 3D */

 Highscreen Sound-Boostar 16 3D - added by Stefan Behnel */

 Highscreen Sound-Boostar 16 3D */

 Shark Predator ISA - added by Ken Arromdee */

 Analog Devices AD1816A - Terratec AudioSystem EWS64 S */

 Analog Devices AD1816A - Terratec AudioSystem EWS64 S */

 Analog Devices AD1816A - Terratec Base 64 */

 end */

 MODULE */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

    ad1816a.c - lowlevel code for Analog Devices AD1816A chip.

    Copyright (C) 1999-2000 by Massimo Piccioni <dafastidio@libero.it>



 if (what & AD1816A_PLAYBACK_ENABLE) */

		/* That is not valid, because playback and capture enable

		 * are the same bit pattern, just to different addresses

/*

 *

 SPDX-License-Identifier: GPL-2.0-only

/* Copyright (C) by Paul Barton-Davis 1998-1999

 *

 * Some portions of this file are taken from work that is

 * copyright (C) by Hannu Savolainen 1993-1996

/*  

 * An ALSA lowlevel driver for Turtle Beach ICS2115 wavetable synth

 *                                             (Maui, Tropez, Tropez Plus)

 *

 * This driver supports the onboard wavetable synthesizer (an ICS2115),

 * including patch, sample and program loading and unloading, conversion

 * of GUS patches during loading, and full user-level access to all

 * WaveFront commands. It tries to provide semi-intelligent patch and

 * sample management as well.

 *

static int wf_raw = 0; /* we normally check for "raw state" to firmware

			  loading. if non-zero, then during driver loading, the

			  state of the board is ignored, and we reset the

			  board and load the firmware anyway.

static int fx_raw = 1; /* if this is zero, we'll leave the FX processor in

			  whatever state it is when the driver is loaded.

			  The default is to download the microprogram and

			  associated coefficients to set it up for "default"

			  operation, whatever that means.

static int debug_default = 0;  /* you can set this to control debugging

				  during driver loading. it takes any combination

				  of the WF_DEBUG_* flags defined in

				  wavefront.h

 XXX this needs to be made firmware and hardware version dependent */

 the firmware file name */

static int wait_usecs = 150; /* This magic number seems to give pretty optimal

				throughput based on my limited experimentation.

				If you want to play around with it and find a better

				value, be my guest. Remember, the idea is to

				get a number that causes us to just busy wait

				for as many WaveFront commands as possible, without

				coming up with a number so large that we hog the

				whole CPU.



				Specifically, with this number, out of about 134,000

				status waits, only about 250 result in a sleep.

 HZ/sleep_interval seconds per sleep */

 number of times we'll try to sleep */

static int reset_time = 2;        /* hundreths of a second we wait after a HW

				     reset for the expected interrupt.

static int ramcheck_time = 20;    /* time in seconds to wait while ROM code

				     checks on-board RAM.

static int osrun_time = 10;       /* time in seconds we wait for the OS to

				     start running.

/* if WF_DEBUG not defined, no run-time debugging messages will

   be available via the debug flag setting. Given the current

   beta state of the driver, this will remain set until a future 

   version.

 WF_DEBUG */

 bitmasks for WaveFront status port value */

	/* This command requires a variable number of bytes to be written.

	   There is a hack in snd_wavefront_cmd() to support this. The actual

	   count is passed in as the read buffer ptr, cast appropriately.

	   Ugh.

	/* This one is a hack as well. We just read the first byte of the

	   response, don't fetch an ACK, and leave the rest to the 

	   calling function. Ugly, ugly, ugly.

	/* Spin for a short period of time, because >99% of all

	   requests to the WaveFront can be serviced inline like this.

	/* Hack to handle the one variable-size write command. See

	   wavefront_send_multisample() for the other half of this

	   gross and ugly strategy.

 Now handle errors. Lots of special cases here */

 Can you believe this madness ? */

		/* Some commands need an ACK, but return zero instead

		   of the standard value.

 something unknown */

 explicit error */

/***********************************************************************

WaveFront data munging   



Things here are weird. All data written to the board cannot 

have its most significant bit set. Any data item with values 

potentially > 0x7F (127) must be split across multiple bytes.



Sometimes, we need to munge numeric values that are represented on

the x86 side as 8-32 bit values. Sometimes, we need to munge data

that is represented on the x86 side as an array of bytes. The most

efficient approach to handling both cases seems to be to use 2

different functions for munging and 2 for de-munging. This avoids

weird casting and worrying about bit-level offsets.



 Mask high bit of LSB */

 Rotate Right 7 bits  */

 Note: we leave the upper bits in place */ 

 NOTE: src and dst *CAN* point to the same address */

/***********************************************************************

WaveFront: sample, patch and program management.

 check sample status */

 Bad patch number */

 program status has already filled in slot_used bits */

 Bad program number */

	/* XXX need to zero existing SLOT_USED bit for program_status[i]

	   where `i' is the program that's being (potentially) overwritten.

			/* XXX need to mark SLOT_USED for sample used by

			   patch_number, but this means we have to load it. Ick.

	/* samples are downloaded via a 16-bit wide i/o port

	   (you could think of it as 2 adjacent 8-bit wide ports

	   but its less efficient that way). therefore, all

	   the blocksizes and so forth listed in the documentation,

	   and used conventionally to refer to sample sizes,

	   which are given in 8-bit units (bytes), need to be

	   divided by 2.

		/* XXX it's a debatable point whether or not RDONLY semantics

		   on the ROM samples should cover just the sample data or

		   the sample header. For now, it only covers the sample data,

		   so anyone is free at all times to rewrite sample headers.



		   My reason for this is that we have the sample headers

		   available in the WFB file for General MIDI, and so these

		   can always be reset if needed. The sample data, however,

		   cannot be recovered without a complete reset and firmware

		   reload of the ICS2115, which is a very expensive operation.



		   So, doing things this way allows us to honor the notion of

		   "RESETSAMPLES" reasonably cheaply. Note however, that this

		   is done purely at user level: there is no WFB parser in

		   this driver, and so a complete reset (back to General MIDI,

		   or theoretically some other configuration) is the

		   responsibility of the user level library. 



		   To try to do this in the kernel would be a little

		   crazy: we'd need 158K of kernel space just to hold

		   a copy of the patch/program/sample header data.

 Be safe, and zero the "Unused" bits ... */

	/* adjust size for 16 bit samples by dividing by two.  We always

	   send 16 bits per write, even for 8 bit samples, so the length

	   is always half the size of the sample data in bytes.

	/* the data we're sent has not been munged, and in fact, the

	   header we have to send isn't just a munged copy either.

	   so, build the sample header right here.

	/* Yes, a 4 byte result doesn't contain all of the offset bits,

	   but the offset only uses 24 bits.

	/* This one is truly weird. What kind of weirdo decided that in

	   a system dominated by 16 and 32 bit integers, they would use

	   a just 12 bits ?

	/* Why is this nybblified, when the MSB is *always* zero ? 

	   Anyway, we can't take address of bitfield, so make a

	   good-faith guess at where it starts.

 Sorry. Just had to have one somewhere */

 Do any initial skip over an unused channel's data */

 round to nearest 16-byte value */

 GUS ? */

						/* 8 bit sample

						 resolution, sign

						 extend both bytes.

						/* 16 bit sample

						 resolution, sign

						 extend the MSB.

				/* In padding section of final block:



				   Don't fetch unsupplied data from

				   user space, just continue with

				   whatever the final value was.

		/* Get "DMA page acknowledge", even though its really

		   nothing to do with DMA at all.

	/* Note, label is here because sending the sample header shouldn't

	   alter the sample_status info at all.

	/* You'll recall at this point that the "number of samples" value

	   in a wavefront_multisample struct is actually the log2 of the

	   real number of samples.

	/* Need a hack here to pass in the number of bytes

	   to be written to the synth. This is ugly, and perhaps

	   one day, I'll fix it.

 get the number of samples ... */

 sample or sample_header, based on patch->size */

/***********************************************************************

WaveFront: hardware-dependent interface

	/* The board doesn't send us an exact copy of a "wavefront_sample"

	   in response to an Upload Sample Header command. Instead, we 

	   have to convert the data format back into our data structure,

	   just as in the Download Sample command, where we have to do

	   something very similar in the reverse direction.

 Now copy it back to where it came from */

 Pre-handling of or for various commands */

		/* multisamples have to be handled differently, and

		   cannot be dealt with properly by snd_wavefront_cmd() alone.

	/* Post-handling of certain commands.



	   In particular, if the command was an upload, demunge the data

	   so that the user-level doesn't have to think about it.

			/* intercept any freemem requests so that we know

			   we are always current with the user-level view

			   of things.

**********************************************************************/

  WaveFront: interface for card-level wavefront module               */

**********************************************************************/

	/*

	   Some comments on interrupts. I attempted a version of this

	   driver that used interrupts throughout the code instead of

	   doing busy and/or sleep-waiting. Alas, it appears that once

	   the Motorola firmware is downloaded, the card *never*

	   generates an RX interrupt. These are successfully generated

	   during firmware loading, and after that wavefront_status()

	   reports that an interrupt is pending on the card from time

	   to time, but it never seems to be delivered to this

	   driver. Note also that wavefront_status() continues to

	   report that RX interrupts are enabled, suggesting that I

	   didn't goof up and disable them by mistake.



	   Thus, I stepped back to a prior version of

	   wavefront_wait(), the only place where this really

	   matters. Its sad, but I've looked through the code to check

	   on things, and I really feel certain that the Motorola

	   firmware prevents RX-ready interrupts.

/* STATUS REGISTER 



0 Host Rx Interrupt Enable (1=Enabled)

1 Host Rx Register Full (1=Full)

2 Host Rx Interrupt Pending (1=Interrupt)

3 Unused

4 Host Tx Interrupt (1=Enabled)

5 Host Tx Register empty (1=Empty)

6 Host Tx Interrupt Pending (1=Interrupt)

7 Unused

 IRQ already checked */

 try reset of port */

	/* At this point, the board is in reset, and the H/W initialization

	   register is accessed at the same address as the data port.

     

	   Bit 7 - Enable IRQ Driver	

	   0 - Tri-state the Wave-Board drivers for the PC Bus IRQs

	   1 - Enable IRQ selected by bits 5:3 to be driven onto the PC Bus.

     

	   Bit 6 - MIDI Interface Select



	   0 - Use the MIDI Input from the 26-pin WaveBlaster

	   compatible header as the serial MIDI source

	   1 - Use the MIDI Input from the 9-pin D connector as the

	   serial MIDI source.

     

	   Bits 5:3 - IRQ Selection

	   0 0 0 - IRQ 2/9

	   0 0 1 - IRQ 5

	   0 1 0 - IRQ 12

	   0 1 1 - IRQ 15

	   1 0 0 - Reserved

	   1 0 1 - Reserved

	   1 1 0 - Reserved

	   1 1 1 - Reserved

     

	   Bits 2:1 - Reserved

	   Bit 0 - Disable Boot ROM

	   0 - memory accesses to 03FC30-03FFFFH utilize the internal Boot ROM

	   1 - memory accesses to 03FC30-03FFFFH are directed to external 

	   storage.

     

	/* configure hardware: IRQ, enable interrupts, 

	   plus external 9-pin MIDI interface selected

	/* CONTROL REGISTER



	   0 Host Rx Interrupt Enable (1=Enabled)      0x1

	   1 Unused                                    0x2

	   2 Unused                                    0x4

	   3 Unused                                    0x8

	   4 Host Tx Interrupt Enable                 0x10

	   5 Mute (0=Mute; 1=Play)                    0x20

	   6 Master Interrupt Enable (1=Enabled)      0x40

	   7 Master Reset (0=Reset; 1=Run)            0x80



	   Take us out of reset, mute output, master + TX + RX interrupts on.

	   

	   We'll get an interrupt presumably to tell us that the TX

	   register is clear.

	/* Note: data port is now the data port, not the h/w initialization

	   port.

	/* Note: data port is now the data port, not the h/w initialization

	   port.



	   At this point, only "HW VERSION" or "DOWNLOAD OS" commands

	   will work. So, issue one of them, and wait for TX

	   interrupt. This can take a *long* time after a cold boot,

	   while the ISC ROM does its RAM test. The SDK says up to 4

	   seconds - with 12MB of RAM on a Tropez+, it takes a lot

	   longer than that (~16secs). Note that the card understands

	   the difference between a warm and a cold boot, so

	   subsequent ISC2115 reboots (say, caused by module

	   reloading) will get through this much faster.



	   XXX Interesting question: why is no RX interrupt received first ?

 NAK */

		/* Board's RAM test failed. Try to read error code,

		   and tell us about it either way.

 We're OK, just get the next byte of the HW version response */

 Send command */

 get ACK */

		/* Wait for the OS to get running. The protocol for

		   this is non-obvious, and was determined by

		   using port-IO tracing in DOSemu and some

		   experimentation here.

		   

		   Rather than using timed waits, use interrupts creatively.

 Now, do it again ! */

		/* OK, no (RX/TX) interrupts any more, but leave mute

		   in effect. 

	/* SETUPSND.EXE asks for sample memory config here, but since i

	   have no idea how to interpret the result, we'll forget

	   about it.

 reset that sucker so that it doesn't bother us. */

	/* IMPORTANT: assumes that snd_wavefront_detect() and/or

	   wavefront_reset_to_cleanliness() has already been called 

 XXX is this always true ? */

 Check for FX device, present only on Tropez+ */

	/* Start normal operation: unreset, master interrupt enabled, no mute

	/* returns zero if a WaveFront card is successfully detected.

	   negative otherwise.

 check that a command actually works */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  ALSA card-level driver for Turtle Beach Wavefront cards 

 *						(Maui,Tropez,Tropez+)

 *

 *  Copyright (c) 1997-1999 by Paul Barton-Davis <pbd@op.net>

 Index 0-MAX */

 ID for this card */

 Enable this card */

 PnP setup */

 5,7,9,11,12,15 */

 PnP setup */

 9,11,12,15 */

 PnP setup */

 2,9,11,12,15 */

 PnP setup */

 0,1,3,5,6,7 */

 0,1,3,5,6,7 */

 Tropez */

 Tropez+ */

 Check for each logical device. */

 CS4232 chip (aka "windows sound system") is logical device 0 */

 there is a game port at logical device 1, but we ignore it completely */

	/* the control interface is logical device 2, but we ignore it

	   completely. in fact, nobody even seems to know what it

	   does.

	/* Only configure the CS4232 MIDI interface if its been

	   specifically requested. It is logical device 3.

 The ICS2115 synth is logical device 4 */

 PCM/FM initialization */

	/* An interesting note from the Tropez+ FAQ:



	   Q. [Ports] Why is the base address of the WSS I/O ports off by 4?



	   A. WSS I/O requires a block of 8 I/O addresses ("ports"). Of these, the first

	   4 are used to identify and configure the board. With the advent of PnP,

	   these first 4 addresses have become obsolete, and software applications

	   only use the last 4 addresses to control the codec chip. Therefore, the

	   base address setting "skips past" the 4 unused addresses.



 Synth initialization */

	/* CS4232 MPU initialization. Configure this only if

	   explicitly requested, since its physically inaccessible and

	   consumes another IRQ.

 CONFIG_PNP */

 --------- PCM --------------- */

 ---------- OPL3 synth --------- */

 ------- ICS2115 Wavetable synth ------- */

 --------- Mixer ------------ */

 -------- CS4232 MPU-401 interface -------- */

 ------ ICS2115 internal MIDI ------------ */

 ------ ICS2115 external MIDI ------------ */

 FX processor for Tropez+ */

 Need a way to distinguish between Maui and Tropez */

 ----- Register the card --------- */

	/* Not safe to include "Turtle Beach" in longname, due to 

	   length restrictions

 FIXME: suspend, resume */

 FIXME: suspend,resume */

 CONFIG_PNP */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) by Paul Barton-Davis 1998-1999

/* The low level driver for the WaveFront ICS2115 MIDI interface(s)

 *

 * Note that there is also an MPU-401 emulation (actually, a UART-401

 * emulation) on the CS4232 on the Tropez and Tropez Plus. This code

 * has nothing to do with that interface at all.

 *

 * The interface is essentially just a UART-401, but is has the

 * interesting property of supporting what Turtle Beach called

 * "Virtual MIDI" mode. In this mode, there are effectively *two*

 * MIDI buses accessible via the interface, one that is routed

 * solely to/from the external WaveFront synthesizer and the other

 * corresponding to the pin/socket connector used to link external

 * MIDI devices to the board.

 *

 * This driver fully supports this mode, allowing two distinct MIDI

 * busses to be used completely independently, giving 32 channels of

 * MIDI routing, 16 to the WaveFront synth and 16 to the external MIDI

 * bus. The devices are named /dev/snd/midiCnD0 and /dev/snd/midiCnD1,

 * where `n' is the card number. Note that the device numbers may be

 * something other than 0 and 1 if the CS4232 UART/MPU-401 interface

 * is enabled.

 *

 * Switching between the two is accomplished externally by the driver

 * using the two otherwise unused MIDI bytes. See the code for more details.

 *

 * NOTE: VIRTUAL MIDI MODE IS ON BY DEFAULT (see lowlevel/isa/wavefront.c)

 *

 * The main reason to turn off Virtual MIDI mode is when you want to

 * tightly couple the WaveFront synth with an external MIDI

 * device. You won't be able to distinguish the source of any MIDI

 * data except via SysEx ID, but thats probably OK, since for the most

 * part, the WaveFront won't be sending any MIDI data at all.

 *  

 * The main reason to turn on Virtual MIDI Mode is to provide two

 * completely independent 16-channel MIDI buses, one to the

 * WaveFront and one to any external MIDI devices. Given the 32

 * voice nature of the WaveFront, its pretty easy to find a use

 * for all 16 channels driving just that synth.

 *  

	/* Its not OK to try to change the status of "virtuality" of

	   the MIDI interface while we're outputting stuff.  See

	   snd_wavefront_midi_{enable,disable}_virtual () for the

	   other half of this.  



	   The first loop attempts to flush any data from the

	   current output device, and then the second 

	   emits the switch byte (if necessary), and starts

	   outputting data for the output device currently in use.

 XXX fix me - no hard timing loops allowed! */

 XXX fix me - no hard timing loops allowed! */

 don't invert the value from now */

 not for us */

 else just leave it as it is */

 snd_wavefront_midi_input_close (card->ics2115_external_rmidi);

 snd_wavefront_midi_output_close (card->ics2115_external_rmidi);

	/* The ICS2115 MPU-401 interface doesn't do anything

	   until its set into UART mode.

 XXX fix me - no hard timing loops allowed! */

	/* Any interrupts received from now on

	   are owned by the MIDI side of things.

 Route external MIDI to WaveFront synth (by default) */

 XXX error ? */

	/* Turn on Virtual MIDI, but first *always* turn it off,

	   since otherwise consecutive reloads of the driver will

	   never cause the hardware to generate the initial "internal" or 

	   "external" source bytes in the MIDI data stream. This

	   is pretty important, since the internal hardware generally will

	   be used to generate none or very little MIDI output, and

	   thus the only source of MIDI data is actually external. Without

	   the switch bytes, the driver will think it all comes from

	   the internal interface. Duh.

 We're OK, but missing the external MIDI dev */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (c) 1998-2002 by Paul Davis <pbd@op.net>

/* Control bits for the Load Control Register

 transfer after DSP LSB byte written */

 transfer after DSP MSB byte written */

 auto-increment DSP address after transfer */

	/* This is a crude check, but its the best one I have for now.

	   Certainly on the Maui and the Tropez, wavefront_fx_idle() will

	   report "never idle", which suggests that this test should

	   work OK.

 page */

 addr */

 cnt */

/* YSS225 initialization.



   This code was developed using DOSEMU. The Turtle Beach SETUPSND

   utility was run with I/O tracing in DOSEMU enabled, and a reconstruction

   of the port I/O done, using the Yamaha faxback document as a guide

   to add more logic to the code. Its really pretty weird.



   This is the approach of just dumping the whole I/O

   sequence as a series of port/value pairs and a simple loop

   that outputs it.

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Generic driver for AD1848/AD1847/CS4248 chips (0.1 Alpha)

 *  Copyright (c) by Tugrul Galatali <galatalt@stuy.edu>,

 *                   Jaroslav Kysela <perex@perex.cz>

 *  Based on card-4232.c by Jaroslav Kysela <perex@perex.cz>

 Index 0-MAX */

 ID for this card */

 Enable this card */

 PnP setup */

 5,7,9,11,12,15 */

 0,1,3,5,6,7 */

 Thinkpad special case */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Aztech AZT1605/AZT2316 Driver

 * Copyright (C) 2007,2010  Rene Herman

/*

 * Generic SB DSP support routines

/*

 * Generic WSS support routines

/*

 * Aztech Sound Galaxy specifics

	/*

	 * Needed for MPU IRQ on AZT1605, but AZT2316 loses WSS again

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Aztech AZT2316 Driver

 * Copyright (C) 2007,2010  Rene Herman

/*

 * 32-bit config register

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 * Aztech AZT1605 Driver

 * Copyright (C) 2007,2010  Rene Herman

/*

 * 24-bit config register

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2000 Takashi Iwai <tiwai@suse.de>

 *

 *  Generic memory management routines for soundcard memory allocation

/*

 * create a new memory manager

/*

 * free a memory manager

 release all blocks */

/*

 * allocate a memory block (without mutex)

 word alignment */

 look for empty block */

/*

 * create a new memory block with the given size

 * the block is linked next to prev

/*

 * allocate a memory block (with mutex)

/*

 * remove the block from linked-list and free resource

 * (without mutex)

/*

 * free a memory block (with mutex)

/*

 * return available memory size

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2000 Takashi Iwai <tiwai@suse.de>

 *

 *  Routines for control of EMU WaveTable chip

/*

 * create a new hardware dependent device for Emu8000/Emu10k1

/*

 create soundfont list */

/*

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Midi synth routines for the Emu8k/Emu10k1

 *

 *  Copyright (C) 1999 Steve Ratcliffe

 *  Copyright (c) 1999-2000 Takashi Iwai <tiwai@suse.de>

 *

 *  Contains code based on awe_wave.c by Takashi Iwai

/*

 * Prototypes

/*

 * Ensure a value is between two points

 * macro evaluates its args more than once, so changed to upper-case.

/*

 * Start a note.

 remember the original note */

 exclusive note off */

 seems not necessary

 Turn off the same note on the same channel. */

 set up each voice parameter */

 at this stage, we don't trigger the voice yet. */

 start envelope now */

 remember the trigger timing */

 clear voice position for the next note on this channel */

/*

 * Release a note in response to a midi note off.

				/* if note-off is sent too shortly after

				 * note-on, emuX engine cannot produce the sound

				 * correctly.  so we'll release this note

				 * a bit later via timer callback.

 ok now release the note */

/*

 * timer callback

 *

 * release the pending note-offs

 release this at the next interrupt */

/*

 * key pressure change

/*

 * Modulate the voices which belong to the channel

/*

 * Modulate all the voices which belong to the port.

/*

 * Deal with a controller type event.  This includes all types of

 * control events, not just the midi controllers

 FIXME: this is an emulation */

/*

 * terminate note - if free flag is true, free the terminated voice

/*

 * terminate note - exported for midi emulation

/*

 * Terminate all the notes

 initialize allocation time */

/*

 * Terminate all voices associated with the given port

/*

 * Terminate all voices that have the same exclusive class.  This

 * is mainly for drums.

/*

 * terminate a voice

 * if free flag is true, call free_voice after termination

/*

 * Modulate the voice

 not used

 table for volume target calculation */

/*

 * Sets up the voice structure by calculating some values that

 * will be needed later.

 copy the original register values */

 reset status */

 compute filter target and correct modulation parameters */

 calculate filter target */

 compute pitch target */

 compute volume target and correct volume parameters */

 FIXME: this leads to some clicks.. */

/*

 * calculate pitch parameter

 pan & loop start (pan 8bit, MSB, 0:right, 0xff:left) */

 0-127 */

 0-127 */

 assuming linear volume */

 using volume table */

/*

 * calculate volume attenuation

 *

 * Voice volume is controlled by volume attenuation parameter.

 * So volume becomes maximum when avol is 0 (no attenuation), and

 * minimum when 255 (-96dB or silence).

 tables for volume->attenuation calculation */

/*

 * Magic to calculate the volume (actually attenuation) from all the

 * voice and channels parameters.

 0 - 127 */

 calc to attenuation */

 value unchanged */

 value changed */

/*

 * calculate pitch offset

 *

 * 0xE000 is no pitch offset at 44100Hz sample.

 * Every 4096 is one octave.

 calculate offset */

 (128 * 8192: 1 semitone) ==> (4096: 12 semitones) */

	/* tuning via RPN:

	 *   coarse = -8192 to 8192 (100 cent per 128)

	 *   fine = -8192 to 8192 (max=100cent)

 4096 = 1200 cents in emu8000 parameter */

 add initial pitch correction */

 0xe000: root pitch */

 unchanged */

 value changed */

/*

 * Get the bank number assigned to the channel

 return drum bank */

 ignore LSB (bank map) */

/* Look for the zones matching with the given note and velocity.

 * The resultant zones are stored on table.

/*

 not used */

/*

/*

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  NRPN / SYSEX callbacks for Emu8k/Emu10k1

 *

 *  Copyright (c) 1999-2000 Takashi Iwai <tiwai@suse.de>

/*

 * conversion from NRPN/control parameters to Emu8000 raw parameters

 NRPN / CC -> Emu8000 parameter converter */

 effect sensitivity */

/*

 * convert NRPN/control values

/* effect sensitivities for GS NRPN:

 *  adjusted for chaos 8MB soundfonts

/* effect sensitivities for XG controls:

 * adjusted for chaos 8MB soundfonts

/*

 * AWE32 NRPN effects

 function for each NRPN */		
 [0,5900] 4msec */

 [0,5940] 1msec */

 [0,8191] 1msec */

 [0,5940] 4msec */

 [0,5940] 4msec */

 [0,127] 0.75dB */

 [-127,127] 9.375cents */

 [-127,127] 56.25cents */

 [0,5900] 4msec */

 [0,5940] 1msec */

 [0,8191] 1msec */

 [0,5940] 4msec */

 [0,5940] 4msec */

 [0,127] 0.75dB */

 [0,5900] 4msec */

 [0,127] 84mHz */

 [0,127] 0.1875dB */

 [-127,127] 9.375cents */

 [-64,63] 56.25cents */

 [0,5900] 4msec */

 [0,127] 84mHz */

 [-127,127] 9.375cents */

 [-8192,8192] cents */

 [0,255] -- */

 [0,255] -- */

 [0,127] 62Hz */

 [0,127] -- */

/*

 * GS(SC88) NRPN effects; still experimental

 cutoff: quarter semitone step, max=255 */

 resonance: 0 to 15(max) */

 attack: */

 decay: */

 release: */

 vibrato freq: 0.042Hz step, max=255 */

 vibrato depth: max=127, 1 octave */

 vibrato delay: -0.725msec step */

/*

 * NRPN events

 Win/DOS AWE32 specific NRPNs */

 both MSB/LSB necessary */

 GS specific NRPNs */

 only MSB is valid */

/*

 * XG control effects; still experimental

 cutoff: quarter semitone step, max=255 */

 resonance: 0(open) to 15(most nasal) */

 attack: */

 release: */

/*

 * receive sysex

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Interface for OSS sequencer emulation

 *

 *  Copyright (C) 1999 Takashi Iwai <tiwai@suse.de>

 *

 * Changes

 * 19990227   Steve Ratcliffe   Made separate file and merged in latest

 * 				midi emulation.

 operators */

/*

 * register OSS synth

 using device#1 here for avoiding conflicts with OPL3 */

 register to OSS synth table */

/*

 * unregister

 use port number as a unique soundfont client number */

/*

 * open port for OSS sequencer

 fill the argument data */

/*

 * reset port mode

/*

 * close port

/*

 * load patch

/*

 * ioctl

/*

 * reset device

/*

 * receive raw events: only SEQ_PRIVATE is accepted.

 only SEQ_PRIVATE is accepted */

/*

 * OSS/AWE driver specific h/w controls

 don't do this atomically */

snd_emux_mute_channel(emu, chan);*/

snd_emux_channel_init(chset, chan);*/

/*

 * GUS specific h/w controls

 0 to 15 --> 0 to 127 */

 not supported yet */

 volume ramping not supported */

/*

 * send an event to midi emulation

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Soundfont generic routines.

 *	It is intended that these should be used by any driver that is willing

 *	to accept soundfont patches.

 *

 *  Copyright (C) 1999 Steve Ratcliffe

 *  Copyright (c) 1999-2000 Takashi Iwai <tiwai@suse.de>

/*

 * Deal with reading in of a soundfont.  Code follows the OSS way

 * of doing things so that the old sfxload utility can be used.

 * Everything may change when there is an alsa way of doing things.

 Prototypes for static functions */

/*

 * lock access to sflist

/*

 * remove lock

/*

 * close the patch if the patch was opened by this client.

/*

 * Deal with a soundfont patch.  Any driver could use these routines

 * although it was designed for the AWE64.

 *

 * The sample_write and callargs parameters allow a callback into

 * the actual driver to write sample data to the board or whatever

 * it wants to do with it.

 grab sflist to open */

 check if other client already opened patch */

rc = replace_data(&patch, data, count);*/

 patch must be opened */

 check if specified type is special font (GUS or preset-alias) */

 open patch; create sf list */

/*

 * Allocate a new soundfont structure.

 check the shared fonts */

 not found -- create a new one */

 prepend this record */

 check if the given name matches to the existing list */

/*

 * Close the current patch.

 probe sample in the current list -- nothing to be loaded */

 patch must be opened */

 search the specified sample by optarg */

/*

 * increment zone counter

/*

 * allocate a new zone record

/*

 * increment sample counter

/*

 * allocate a new sample list record

/*

 * delete sample list -- this is an exceptional job.

 * only the last allocated sample can be deleted.

 only last sample is accepted */

 load voice map */

 get the link info */

 the same mapping is already present */

 relink this record to the link head */

 update the counter */

 create a new zone */

 remove the present instrument layers */

 remove this layer */

/*

 * Read an info record from the user buffer and save it on the current

 * open soundfont.

 patch must be opened */

		/* exclusive mode - if the instrument already exists,

 replace mode - remove the instrument if it already exists */

 copy awe_voice_info parameters */

 create a new zone */

 copy the temporary data */

 look up the sample */

 initialize voice_info record */

/* initialize voice_parm record:

 * Env1/2: delay=0, attack=0, hold=0, sustain=0, decay=0, release=0.

 * Vibrato and Tremolo effects are zero.

 * Cutoff is maximum.

 * Chorus and Reverb effects are zero.

 search the specified sample */

	/* add in the actual sample offsets:

	 * The voice_info addresses define only the relative offset

	 * from sample pointers.  Here we calculate the actual DRAM

	 * offset from sample pointers.

 copy mode flags */

 find the sample pointer with the given id in the soundfont */

/*

 * Load sample information, this can include data to be loaded onto

 * the soundcard.  It can also just be a pointer into soundcard ROM.

 * If there is data it will be written to the soundcard via the callback

 * routine.

 patch must be opened */

 Check for dup */

 if shared sample, skip this data */

 Allocate a new sample structure */

	/*

	 * If there is wave data then load it.

 log2_tbl[i] = log2(i+128) * 0x10000 */

/* convert from linear to log value

 *

 * conversion: value = log2(amount / base) * ratio

 *

 * argument:

 *   amount = linear value (unsigned, 32bit max)

 *   offset = base offset (:= log2(base) * 0x10000)

 *   ratio = division ratio

 *

 linear approximation by lower 8 bit */

 base = 1000 */

 base = 8176 */

 base = 44100 */

/*

 * mHz to abscent

 * conversion: abscent = log2(MHz / 8176) * 1200

/* convert Hz to AWE32 rate offset:

 * sample pitch offset for the specified sample rate

 * rate=44100 is no offset, each 4096 is 1 octave (twice).

 * eg, when rate is 22050, this offset becomes -4096.

 *

 * conversion: offset = log2(Hz / 44100) * 4096

 calculate GUS envelope time */

 convert envelope time parameter to soundfont parameters */

 attack & decay/release time table (msec) */

 delay time = 0x8000 - msec/92 */

 search an index for specified time from given time table */

 attack time: search from time table */

 decay/release time: search from time table */

 load GUS patch */

 set up mode flags */

 convert to word offsets */

smp->v.loopend++;*/

 set up voice info */

	/*

	 * load wave data

 memory offset is updated after */

 update the memory offset here */

 the last sample */

 panning position; -128 - 127 => 0-127 */

 detuning is ignored */

 6points volume envelope */

 fast release */

 tremolo effect */

 vibrato effect */

 scale_freq, scale_factor, volume, and fractions not implemented */

 append to the tail of the list */

zone->bank = ctrls[AWE_MD_GUS_BANK];*/

 rebuild preset now */

 load GUS patch */

/*

 * Rebuild the preset table.  This is like a hash table in that it allows

 * quick access to the zone information.  For each preset there are zone

 * structures linked by next_instr and by next_zone.  Former is the whole

 * link for this preset, and latter is the link for zone (i.e. instrument/

 * bank/key combination).

 clear preset table */

 search all fonts and insert each font */

 try again to search the corresponding sample */

/*

 * add the given zone to preset table

 different instrument was already defined */

 compare the allocated time */

 the current is older.. skipped */

 remove old zones */

 do not forget to clear this! */

 prepend this zone */

 zone link */

 preset table link */

/*

 * delete the given zones from preset_table

/*

 * Search matching zones from preset table.

 * The note can be rewritten by preset mapping (alias).

 * The found zones are stored on 'table' array.  max_layers defines

 * the maximum number of elements in this array.

 * This function returns the number of found zones.  0 if not found.

	/* this function is supposed to be called atomically,

	 * so we check the lock.  if it's busy, just returns 0 to

	 * tell the caller the busy state

/*

 * search the first matching zone

/*

 * search matching zones from sflist.  can be called recursively.

 search preset mapping (aliasing) */

 too deep alias level */

/* calculate the index of preset table:

 * drums are mapped from 128 to 255 according to its note key.

 * other instruments are mapped from 0 to 127.

 * if the index is out of range, return -1.

/*

 * Initialise the sflist structure.

/*

 * Release all list records

/*

 * Create a new sflist structure

/*

 * Free everything allocated off the sflist structure.

/*

 * Remove all samples

 * The soundcard should be silent before calling this function.

/*

 * Remove unlocked samples.

 * The soundcard should be silent before calling this function.

 to be sure */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Copyright (C) 2000 Takashi Iwai <tiwai@suse.de>

 *

 *  Proc interface for Emu8k/Emu10k1 WaveTable synth

 debug */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Midi Sequencer interface routines.

 *

 *  Copyright (C) 1999 Steve Ratcliffe

 *  Copyright (c) 1999-2000 Takashi Iwai <tiwai@suse.de>

 Prototypes for static functions */

/*

 * MIDI emulation operators

/*

 * number of MIDI channels

/*

 * type flags for MIDI sequencer port

/*

 * Initialise the EMUX Synth by creating a client and registering

 * a series of ports.

 * Each of the ports will contain the 16 midi channels.  Applications

 * can connect to these ports to play midi data.

/*

 * Detach from the ports that were set up for this synthesizer and

 * destroy the kernel client.

/*

 * create a sequencer port and channel_set

 Allocate structures for this channel */

/*

 * release memory block for port

/*

 * initialize the port specific parameters

/*

 * reset port

 stop all sounds */

 set port specific control parameters */

/*

 * input sequencer event

/*

 * increment usage count

/*

 * decrease usage count

/*

 * Routine that is called upon a first use of a particular port

/*

 * Routine that is called upon the last unuse() of a particular port.

/*

 * attach virtual rawmidi devices

 snd_printk(KERN_DEBUG "virmidi %d ok\n", i); */

 snd_printk(KERN_DEBUG "error init..\n"); */

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Interface for hwdep device

 *

 *  Copyright (C) 2004 Takashi Iwai <tiwai@suse.de>

/*

 * load patch

/*

 * set misc mode

/*

 * ioctl

/*

 * register hwdep device

	/* The ioctl parameter types are compatible between 32- and

/*

 * unregister

 SPDX-License-Identifier: GPL-2.0-or-later

/*

 *  Midi synth routines for the Emu8k/Emu10k1

 *

 *  Copyright (C) 1999 Steve Ratcliffe

 *  Copyright (c) 1999-2000 Takashi Iwai <tiwai@suse.de>

 *

 *  Contains code based on awe_wave.c by Takashi Iwai

/*

 * effects table

 byte or word */

 value range */

 offset in parameter record (-1 = not written) */

 flgas for real-time update */

 env1 delay */

 env1 attack */

 env1 hold */

 env1 decay */

 env1 release */

 env1 sustain */

 env1 pitch */

 env1 fc */

 env2 delay */

 env2 attack */

 env2 hold */

 env2 decay */

 env2 release */

 env2 sustain */

 lfo1 delay */

 lfo1 freq */

 lfo1 vol */

 lfo1 pitch */

 lfo1 cutoff */

 lfo2 delay */

 lfo2 freq */

 lfo2 pitch */

 initial pitch */

 chorus */

 reverb */

 cutoff */

 resonance */

 sample start */

 loop start */

 loop end */

 coarse sample start */

 coarse loop start */

 coarse loop end */

 initial attenuation */

 set byte effect value */

 set word effect value */

 address offset */

 change effects - for OSS sequencer compatibility */

/* Modify the effect value.

 * if update is necessary, call emu8000_control

 do we need to modify the register in realtime ? */

 modify the register values */

 activate them */

 copy wavetable registers to voice table */

 modify the register values via effect table */

 correct sample and loop points */

/*

 * effect table

 SNDRV_EMUX_USE_RAW_EFFECT */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * miscellaneous helper functions

 *

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

/**

 * snd_fw_transaction - send a request and wait for its completion

 * @unit: the driver's unit on the target device

 * @tcode: the transaction code

 * @offset: the address in the target's address space

 * @buffer: input/output data

 * @length: length of @buffer

 * @flags: use %FW_FIXED_GENERATION and add the generation value to attempt the

 *         request only in that generation; use %FW_QUIET to suppress error

 *         messages

 *

 * Submits an asynchronous request to the target device, and waits for the

 * response.  The node ID and the current generation are derived from @unit.

 * On a bus reset or an error, the transaction is retried a few times.

 * Returns zero on success, or a negative error code.

 node_id vs. generation */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * AM824 format in Audio and Music Data Transmission Protocol (IEC 61883-6)

 *

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

 * Copyright (c) 2015 Takashi Sakamoto <o-takashi@sakamocchi.jp>

 "Clock-based rate control mode" is just supported. */

/*

 * Nominally 3125 bytes/second, but the MIDI port's clock might be

 * 1% too slow, and the bus clock 100 ppm too fast.

/*

 * Several devices look only at the first eight data blocks.

 * In any case, this is more than enough for the MIDI data rate.

/**

 * amdtp_am824_set_parameters - set stream parameters

 * @s: the AMDTP stream to configure

 * @rate: the sample rate

 * @pcm_channels: the number of PCM samples in each data block, to be encoded

 *                as AM824 multi-bit linear audio

 * @midi_ports: the number of MIDI ports (i.e., MPX-MIDI Data Channels)

 * @double_pcm_frames: one data block transfers two PCM frames

 *

 * The parameters must be set before the stream is started, and must not be

 * changed while the stream is running.

	/*

	 * In IEC 61883-6, one data block represents one event. In ALSA, one

	 * event equals to one PCM frame. But Dice has a quirk at higher

	 * sampling rate to transfer two PCM frames in one data block.

 init the position map for PCM and MIDI channels */

	/*

	 * We do not know the actual MIDI FIFO size of most devices.  Just

	 * assume two bytes, i.e., one byte can be received over the bus while

	 * the previous one is transmitted over MIDI.

	 * (The value here is adjusted for midi_ratelimit_per_packet().)

/**

 * amdtp_am824_set_pcm_position - set an index of data channel for a channel

 *				  of PCM frame

 * @s: the AMDTP stream

 * @index: the index of data channel in an data block

 * @position: the channel of PCM frame

/**

 * amdtp_am824_set_midi_position - set a index of data channel for MIDI

 *				   conformant data channel

 * @s: the AMDTP stream

 * @position: the index of data channel in an data block

/**

 * amdtp_am824_add_pcm_hw_constraints - add hw constraints for PCM substream

 * @s:		the AMDTP stream for AM824 data block, must be initialized.

 * @runtime:	the PCM substream runtime

 *

 AM824 in IEC 61883-6 can deliver 24bit data. */

/**

 * amdtp_am824_midi_trigger - start/stop playback/capture with a MIDI device

 * @s: the AMDTP stream

 * @port: index of MIDI port

 * @midi: the MIDI device to be started, or %NULL to stop the current device

 *

 * Call this function on a running isochronous stream to enable the actual

 * transmission of MIDI data.  This function should be called from the MIDI

 * device's .trigger callback.

/*

 * To avoid sending MIDI bytes at too high a rate, assume that the receiving

 * device has a FIFO, and track how much it is filled.  This values increases

 * by one whenever we send one byte in a packet, but the FIFO empties at

 * a constant rate independent of our packet rate.  One packet has syt_interval

 * samples, so the number of bytes that empty out of the FIFO, per packet(!),

 * is MIDI_BYTES_PER_SECOND * syt_interval / sample_rate.  To avoid storing

 * fractional values, the values in midi_fifo_used[] are measured in bytes

 * multiplied by the sample rate.

 common shortcut */

/**

 * amdtp_am824_init - initialize an AMDTP stream structure to handle AM824

 *		      data block

 * @s: the AMDTP stream to initialize

 * @unit: the target of the stream

 * @dir: the direction of stream

 * @flags: the details of the streaming protocol consist of cip_flags enumeration-constants.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Function Control Protocol (IEC 61883-1) helper functions

 *

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

 AV/C CONTROL */

 UNIT */

 INPUT PLUG SIGNAL FORMAT */

 OUTPUT PLUG SIGNAL FORMAT */

 plug id */

 EOH_1, Form_1, FMT. AM824 */

 FDF-hi. AM824, frequency */

 FDF-mid. AM824, SYT hi (not used)*/

 FDF-low. AM824, SYT lo (not used) */

 do transaction and check buf[1-5] are the same against command */

 NOT IMPLEMENTED */

 REJECTED */

 AV/C STATUS */

 Unit */

 INPUT PLUG SIGNAL FORMAT */

 OUTPUT PLUG SIGNAL FORMAT */

 plug id */

 EOH_1, Form_1, FMT. AM824 */

 FDF-hi. AM824, frequency */

 FDF-mid. AM824, SYT hi (not used) */

 FDF-low. AM824, SYT lo (not used) */

 do transaction and check buf[1-4] are the same against command */

 NOT IMPLEMENTED */

 REJECTED */

 IN TRANSITION */

 check sfc field and pick up rate */

 also in transition */

 extended subunit in spec.4.2 is not supported */

 AV/C STATUS */

 UNIT or Subunit, Functionblock */

 PLUG INFO */

 NOT IMPLEMENTED */

 REJECTED */

 IN TRANSITION */

/**

 * fcp_avc_transaction - send an AV/C command and wait for its response

 * @unit: a unit on the target device

 * @command: a buffer containing the command frame; must be DMA-able

 * @command_size: the size of @command

 * @response: a buffer for the response frame

 * @response_size: the maximum size of @response

 * @response_match_bytes: a bitmap specifying the bytes used to detect the

 *                        correct response frame

 *

 * This function sends a FCP command frame to the target and waits for the

 * corresponding response frame to be returned.

 *

 * Because it is possible for multiple FCP transactions to be active at the

 * same time, the correct response frame is detected by the value of certain

 * bytes.  These bytes must be set in @response before calling this function,

 * and the corresponding bits must be set in @response_match_bytes.

 *

 * @command and @response can point to the same buffer.

 *

 * Returns the actual size of the response frame, or a negative error code.

			/*

			 * 'AV/C General Specification' define no time limit

			 * on command completion once an INTERIM response has

			 * been sent. but we promise to finish this function

			 * for a caller. Here we use FCP_TIMEOUT_MS for next

			 * interval. This is not in the specification.

/**

 * fcp_bus_reset - inform the target handler about a bus reset

 * @unit: the unit that might be used by fcp_avc_transaction()

 *

 * This function must be called from the driver's .update handler to inform

 * the FCP transaction handler that a bus reset has happened.  Any pending FCP

 * transactions are retried.

 checks whether the response matches the masked bytes in response_buffer */

 node_id vs. generation */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Apple iSight audio driver

 *

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

 update buffer data before buffer pointer */

"sght"*/))) {

?*/);

 Block till all of ALSA character devices are released.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Connection Management Procedures (IEC 61883-1) helper functions

 *

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

 MPR common fields */

 PCR common fields */

 oPCR specific fields */

 success? */

/**

 * cmp_connection_init - initializes a connection manager

 * @c: the connection manager to initialize

 * @unit: a unit of the target device

 * @direction: input or output

 * @pcr_index: the index of the iPCR/oPCR on the target device

/**

 * cmp_connection_check_used - check connection is already esablished or not

 * @c: the connection manager to be checked

 * @used: the pointer to store the result of checking the connection

/**

 * cmp_connection_destroy - free connection manager resources

 * @c: the connection manager

	/*

	 * apply "oPCR overhead ID encoding"

	 * the encoding table can convert up to 512.

	 * here the value over 512 is converted as the same way as 512.

 generate speed and extended speed field value */

/**

 * cmp_connection_establish - establish a connection to the target

 * @c: the connection manager

 *

 * This function establishes a point-to-point connection from the local

 * computer to the target by allocating isochronous resources (channel and

 * bandwidth) and setting the target's input/output plug control register.

 * When this function succeeds, the caller is responsible for starting

 * transmitting packets.

/**

 * cmp_connection_update - update the connection after a bus reset

 * @c: the connection manager

 *

 * This function must be called from the driver's .update handler to

 * reestablish any connection that might have been active.

 *

 * Returns zero on success, or a negative error code.  On an error, the

 * connection is broken and the caller must stop transmitting iso packets.

/**

 * cmp_connection_break - break the connection to the target

 * @c: the connection manager

 *

 * This function deactives the connection in the target's input/output plug

 * control register, and frees the isochronous resources of the connection.

 * Before calling this function, the caller should cease transmitting packets.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * helpers for managing a buffer for many packets

 *

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

/**

 * iso_packets_buffer_init - allocates the memory for packets

 * @b: the buffer structure to initialize

 * @unit: the device at the other end of the stream

 * @count: the number of packets

 * @packet_size: the (maximum) size of a packet, in bytes

 * @direction: %DMA_TO_DEVICE or %DMA_FROM_DEVICE

/**

 * iso_packets_buffer_destroy - frees packet buffer resources

 * @b: the buffer structure to free

 * @unit: the device at the other end of the stream

 SPDX-License-Identifier: GPL-2.0-only

/*

 * isochronous resources helper functions

 *

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

/**

 * fw_iso_resources_init - initializes a &struct fw_iso_resources

 * @r: the resource manager to initialize

 * @unit: the device unit for which the resources will be needed

 *

 * If the device does not support all channel numbers, change @r->channels_mask

 * after calling this function.

/**

 * fw_iso_resources_destroy - destroy a resource manager

 * @r: the resource manager that is no longer needed

 iso packets have three header quadlets and quadlet-aligned payload */

 convert to bandwidth units (quadlets at S1600 = bytes at S400) */

	/*

	 * Under the usual pessimistic assumption (cable length 4.5 m), the

	 * isochronous overhead for N cables is 1.797 µs + N * 0.494 µs, or

	 * 88.3 + N * 24.3 in bandwidth units.

	 *

	 * The calculation below tries to deduce N from the current gap count.

	 * If the gap count has been optimized by measuring the actual packet

	 * transmission time, this derived overhead should be near the actual

	 * overhead as well.

/**

 * fw_iso_resources_allocate - allocate isochronous channel and bandwidth

 * @r: the resource manager

 * @max_payload_bytes: the amount of data (including CIP headers) per packet

 * @speed: the speed (e.g., SCODE_400) at which the packets will be sent

 *

 * This function allocates one isochronous channel and enough bandwidth for the

 * specified packet size.

 *

 * Returns the channel number that the caller must use for streaming, or

 * a negative error code.  Due to potentionally long delays, this function is

 * interruptible and can return -ERESTARTSYS.  On success, the caller is

 * responsible for calling fw_iso_resources_update() on bus resets, and

 * fw_iso_resources_free() when the resources are not longer needed.

/**

 * fw_iso_resources_update - update resource allocations after a bus reset

 * @r: the resource manager

 *

 * This function must be called from the driver's .update handler to reallocate

 * any resources that were allocated before the bus reset.  It is safe to call

 * this function if no resources are currently allocated.

 *

 * Returns a negative error code on failure.  If this happens, the caller must

 * stop streaming.

	/*

	 * When another bus reset happens, pretend that the allocation

	 * succeeded; we will try again for the new generation later.

/**

 * fw_iso_resources_free - frees allocated resources

 * @r: the resource manager

 *

 * This function deallocates the channel and bandwidth, if allocated.

 Not initialized. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Audio and Music Data Transmission Protocol (IEC 61883-6) streams

 * with Common Isochronous Packet (IEC 61883-1) headers

 *

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

 Always support Linux tracing subsystem. */

 479.17 microseconds */

 isochronous header parameters */

 Common Isochronous Packet (CIP) header parameters. Use two quadlets CIP header when supported.

 Audio and Music transfer protocol specific parameters */

 For iso header and tstamp.

 Add nothing.

 Add two quadlets CIP header.

 Nothing.

 The initial firmware of OXFW970 can postpone transmission of packet during finishing

 asynchronous transaction. This module accepts 5 cycles to skip as maximum to avoid buffer

 overrun. Actual device can skip more, then this module stops the packet streaming.

/**

 * amdtp_stream_init - initialize an AMDTP stream structure

 * @s: the AMDTP stream to initialize

 * @unit: the target of the stream

 * @dir: the direction of stream

 * @flags: the details of the streaming protocol consist of cip_flags enumeration-constants.

 * @fmt: the value of fmt field in CIP header

 * @process_ctx_payloads: callback handler to process payloads of isoc context

 * @protocol_size: the size to allocate newly for protocol

/**

 * amdtp_stream_destroy - free stream resources

 * @s: the AMDTP stream to destroy

 Not initialized. */

/**

 * amdtp_stream_add_pcm_hw_constraints - add hw constraints for PCM substream

 * @s:		the AMDTP stream, which must be initialized.

 * @runtime:	the PCM substream runtime

 bytes for a frame */

 Just to prevent from allocating much pages. */

 Linux driver for 1394 OHCI controller voluntarily flushes isoc

 context when total size of accumulated context header reaches

 PAGE_SIZE. This kicks work for the isoc context and brings

 callback in the middle of scheduled interrupts.

 Although AMDTP streams in the same domain use the same events per

 IRQ, use the largest size of context header between IT/IR contexts.

 Here, use the value of context header in IR context is for both

 contexts.

 In IEC 61883-6, one isoc packet can transfer events up to the value

 of syt interval. This comes from the interval of isoc cycle. As 1394

 OHCI controller can generate hardware IRQ per isoc packet, the

 interval is 125 usec.

 However, there are two ways of transmission in IEC 61883-6; blocking

 and non-blocking modes. In blocking mode, the sequence of isoc packet

 includes 'empty' or 'NODATA' packets which include no event. In

 non-blocking mode, the number of events per packet is variable up to

 the syt interval.

 Due to the above protocol design, the minimum PCM frames per

 interrupt should be double of the value of syt interval, thus it is

 250 usec.

 Non-Blocking stream has no more constraints */

	/*

	 * One AMDTP packet can include some frames. In blocking mode, the

	 * number equals to SYT_INTERVAL. So the number is 8, 16 or 32,

	 * depending on its sampling rate. For accurate period interrupt, it's

	 * preferrable to align period/buffer sizes to current SYT_INTERVAL.

/**

 * amdtp_stream_set_parameters - set stream parameters

 * @s: the AMDTP stream to configure

 * @rate: the sample rate

 * @data_block_quadlets: the size of a data block in quadlet unit

 *

 * The parameters must be set before the stream is started, and must not be

 * changed while the stream is running.

 default buffering in the device.

 additional buffering needed to adjust for no-data packets.

 The CIP header is processed in context header apart from context payload.

/**

 * amdtp_stream_get_max_payload - get the stream's packet size

 * @s: the AMDTP stream

 *

 * This function must not be called before the stream has been configured

 * with amdtp_stream_set_parameters().

/**

 * amdtp_stream_pcm_prepare - prepare PCM device for running

 * @s: the AMDTP stream

 *

 * This function should be called from the PCM device's .prepare callback.

 Sample_rate / 8000 is an integer, and precomputed.

		/*

		 * This calculates the number of data blocks per packet so that

		 * 1) the overall rate is correct and exactly synchronized to

		 *    the bus clock, and

		 * 2) packets with a rounded-up number of blocks occur as early

		 *    as possible in the sequence (to prevent underruns of the

		 *    device's buffer).

 6 6 5 6 5 6 5 ... */

 12 11 11 11 11 ... or 23 22 22 22 22 ... */

		/*

		 * The time, in ticks, of the n'th SYT_INTERVAL sample is:

		 *   n * SYT_INTERVAL * 24576000 / sample_rate

		 * Modulo TICKS_PER_CYCLE, the difference between successive

		 * elements is about 1386.23.  Rounding the results of this

		 * formula to the SYT precision results in a sequence of

		 * differences that begins with:

		 *   1386 1386 1387 1386 1386 1386 1387 1386 1386 1386 1387 ...

		 * This code generates _exactly_ the same sequence.

 Round up.

 Subtract transfer delay so that the synchronization offset is not so large

 at transmission.

 Both of the producer and consumer of the queue runs in the same clock of IEEE 1394 bus.

 Additionally, the sequence of tx packets is severely checked against any discontinuity

 before filling entries in the queue. The calculation is safe even if it looks fragile by

 overrun.

 The program in user process should periodically check the status of intermediate

 buffer associated to PCM substream to process PCM frames in the buffer, instead

 of receiving notification of period elapsed by poll wait.

 In software IRQ context for 1394 OHCI.

 In process context of ALSA PCM application under acquired lock of

 PCM substream.

 Queue one packet for IR context.

	/*

	 * This module supports 'Two-quadlet CIP header with SYT field'.

	 * For convenience, also check FMT field is AM824 or not.

 Check valid protocol or not. */

 Calculate data blocks */

 avoid division by zero */

 Check data block counter continuity */

 Handle the cycle so that empty packet arrives.

 In CYCLE_TIMER register of IEEE 1394, 7 bits are used to represent second. On

 the other hand, in DMA descriptors of 1394 OHCI, 3 bits are used to represent

 it. Thus, via Linux firewire subsystem, we can get the 3 bits for second.

 Align to actual cycle count for the packet which is going to be scheduled.

 This module queued the same number of isochronous cycle as the size of queue

 to kip isochronous cycle, therefore it's OK to just increment the cycle by

 the size of queue for scheduled cycle.

 Fireface skips transmission just for an isoc cycle corresponding

 to empty packet.

 Prepare a description for the skipped cycle for

 sequence replay.

 OXFW970 skips transmission for several isoc cycles during

 asynchronous transaction. The sequence replay is impossible due

 to the reason.

 Calculate the number of packets in buffer and check XRUN.

 At NO_PERIOD_WAKEUP mode, the packets for all IT/IR contexts are processed by

 the tasks of user process operating ALSA PCM character device by calling ioctl(2)

 with some requests, instead of scheduled hardware IRQ of an IT context.

 Calculate the number of packets in buffer and check XRUN.

 Attempt to detect any event in the batch of packets.

 NODATA packet can includes any data blocks but they are

 not available as event.

 Decide the cycle count to begin processing content of packet in IR contexts.

 Decide the cycle count to begin processing content of packet in IT contexts. All of IT

 contexts are expected to start and get callback when reaching here.

 This is executed one time. For in-stream, first packet has come. For out-stream, prepared to

 transmit first packet.

/**

 * amdtp_stream_start - start transferring packets

 * @s: the AMDTP stream to start

 * @channel: the isochronous channel on the bus

 * @speed: firewire speed code

 * @queue_size: The number of packets in the queue.

 * @idle_irq_interval: the interval to queue packet during initial state.

 *

 * The stream cannot be started until it has been configured with

 * amdtp_stream_set_parameters() and it must be started before any PCM or MIDI

 * device can be started.

 NOTE: IT context should be used for constant IRQ.

 initialize packet buffer.

 No effect for IT context.

 struct fw_iso_context.drop_overflow_headers is false therefore it's

 possible to cache much unexpectedly.

 NOTE: TAG1 matches CIP. This just affects in stream. */

/**

 * amdtp_domain_stream_pcm_pointer - get the PCM buffer position

 * @d: the AMDTP domain.

 * @s: the AMDTP stream that transports the PCM data

 *

 * Returns the current buffer position, in frames.

 Process isochronous packets queued till recent isochronous cycle to handle PCM frames.

 In software IRQ context, the call causes dead-lock to disable the tasklet

 synchronously.

/**

 * amdtp_domain_stream_pcm_ack - acknowledge queued PCM frames

 * @d: the AMDTP domain.

 * @s: the AMDTP stream that transfers the PCM frames

 *

 * Returns zero always.

 Process isochronous packets for recent isochronous cycle to handle

 queued PCM frames.

/**

 * amdtp_stream_update - update the stream after a bus reset

 * @s: the AMDTP stream

 Precomputing. */

/**

 * amdtp_stream_stop - stop sending packets

 * @s: the AMDTP stream to stop

 *

 * All PCM and MIDI devices of the stream must be stopped before the stream

 * itself can be stopped.

/**

 * amdtp_stream_pcm_abort - abort the running PCM device

 * @s: the AMDTP stream about to be stopped

 *

 * If the isochronous stream needs to be stopped asynchronously, call this

 * function first to stop the PCM device.

/**

 * amdtp_domain_init - initialize an AMDTP domain structure

 * @d: the AMDTP domain to initialize.

/**

 * amdtp_domain_destroy - destroy an AMDTP domain structure

 * @d: the AMDTP domain to destroy.

 At present nothing to do.

/**

 * amdtp_domain_add_stream - register isoc context into the domain.

 * @d: the AMDTP domain.

 * @s: the AMDTP stream.

 * @channel: the isochronous channel on the bus.

 * @speed: firewire speed code.

 Make the reference from rx stream to tx stream for sequence replay. When the number of tx streams

 is less than the number of rx streams, the first tx stream is selected.

 Make association to replay target.

 Select the first entry.

 No target is available to replay sequence.

/**

 * amdtp_domain_start - start sending packets for isoc context in the domain.

 * @d: the AMDTP domain.

 * @tx_init_skip_cycles: the number of cycles to skip processing packets at initial stage of IR

 *			 contexts.

 * @replay_seq: whether to replay the sequence of packet in IR context for the sequence of packet in

 *		IT context.

 * @replay_on_the_fly: transfer rx packets according to nominal frequency, then begin to replay

 *		       according to arrival of events in tx packets.

 Select an IT context as IRQ target.

 This is a case that AMDTP streams in domain run just for MIDI

 substream. Use the number of events equivalent to 10 msec as

 interval of hardware IRQ.

 Starts immediately but actually DMA context starts several hundred cycles later.

/**

 * amdtp_domain_stop - stop sending packets for isoc context in the same domain.

 * @d: the AMDTP domain to which the isoc contexts belong.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * motu-protocol-v3.c - a part of driver for MOTU FireWire series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>

 Additional 4 dummy chunks at higher rate.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * motu-hwdep.c - a part of driver for MOTU FireWire series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>

/*

 * This codes have five functionalities.

 *

 * 1.get information about firewire node

 * 2.get notification about starting/stopping stream

 * 3.lock/unlock streaming

 *

 Header is filled later.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * motu-midi.h - a part of driver for MOTU FireWire series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>

 create midi ports */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * motu-proc.c - a part of driver for MOTU FireWire series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>

	/*

	 * All nodes are automatically removed at snd_card_disconnect(),

	 * by following to link list.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * motu-pcm.c - a part of driver for MOTU FireWire series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>

 When source of clock is not internal or any stream is reserved for

 transmission of PCM frames, the available sampling rate is limited

 at current one.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * motu-protocol-v2.c - a part of driver for MOTU FireWire series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>

 In Traveler.

 on either coaxial or optical. AES/EBU in 896HD.

 To check the configuration of optical interface.

 For Traveler.

 Expected for Traveler, which implements Altera Cyclone EP1C3.

 For UltraLite and 8pre, which implements Xilinx Spartan XC3S200.

 828mkII implements Altera ACEX 1K EP1K30. Nothing to do.

 896HD implements Altera Cyclone EP1C3 but nothing to do.

 Two dummy chunks always in the end of data block.

 SPDX-License-Identifier: GPL-2.0-only



 motu-command-dsp-message-parser.c - a part of driver for MOTU FireWire series



 Copyright (c) 2021 Takashi Sakamoto <o-takashi@sakamocchi.jp>

 Below models allow software to configure their DSP function by command transferred in

 asynchronous transaction:

  * 828 mk3 (FireWire only and Hybrid)

  * 896 mk3 (FireWire only and Hybrid)

  * Ultralite mk3 (FireWire only and Hybrid)

  * Traveler mk3

  * Track 16



 Isochronous packets from the above models includes messages to report state of hardware meter.

 All of data blocks don't have messages with meaningful information.

 One value of hardware meter consists of 4 messages.

 Skip the last two quadlets since they could be

 invalid value (0xffffffff) as floating point

 number.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * motu-stream.c - a part of driver for MOTU FireWire series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>

 Configure the unit to start isochronous communication.

 NOTE: The device requires both of replay; the sequence of the number of data

 blocks per packet, and the sequence of source packet header per data block as

 presentation time.

 This function should be called before starting streams or after stopping

 streams.

 SPDX-License-Identifier: GPL-2.0-only

 motu-protocol-v1.c - a part of driver for MOTU FireWire series



 Copyright (c) 2021 Takashi Sakamoto <o-takashi@sakamocchi.jp>



 Licensed under the terms of the GNU General Public License, version 2.

 Status register for MOTU 828 (0x'ffff'f000'0b00).



 0xffff0000: ISOC_COMM_CONTROL_MASK in motu-stream.c.

 0x00008000: mode of optical input interface.

   0x00008000: for S/PDIF signal.

   0x00000000: disabled or for ADAT signal.

 0x00004000: mode of optical output interface.

   0x00004000: for S/PDIF signal.

   0x00000000: disabled or for ADAT signal.

 0x00003f00: monitor input mode.

   0x00000800: analog-1/2

   0x00001a00: analog-3/4

   0x00002c00: analog-5/6

   0x00003e00: analog-7/8

   0x00000000: analog-1

   0x00000900: analog-2

   0x00001200: analog-3

   0x00001b00: analog-4

   0x00002400: analog-5

   0x00002d00: analog-6

   0x00003600: analog-7

   0x00003f00: analog-8

 0x00000080: enable stream input.

 0x00000040: disable monitor input.

 0x00000008: enable main out.

 0x00000004: rate of sampling clock.

   0x00000004: 48.0 kHz

   0x00000000: 44.1 kHz

 0x00000023: source of sampling clock.

   0x00000003: source packet header (SPH)

   0x00000002: S/PDIF on optical/coaxial interface.

   0x00000021: ADAT on optical interface

   0x00000001: ADAT on Dsub 9pin

   0x00000000: internal

 Status register for MOTU 896 (0x'ffff'f000'0b14).



 0xf0000000: enable physical and stream input to DAC.

   0x80000000: disable

   0x40000000: disable

   0x20000000: enable (prior to the other bits)

   0x10000000: disable

   0x00000000: disable

 0x08000000: speed of word clock signal output on BNC interface.

   0x00000000: force to low rate (44.1/48.0 kHz).

   0x08000000: follow to system clock.

 0x04000000: something relevant to clock.

 0x03000000: enable output.

  0x02000000: enabled irreversibly once standing unless the device voluntarily disables it.

  0x01000000: enabled irreversibly once standing unless the device voluntarily disables it.

 0x00ffff00: monitor input mode.

   0x00000000: disabled

   0x00004800: analog-1/2

   0x00005a00: analog-3/4

   0x00006c00: analog-5/6

   0x00007e00: analog-7/8

   0x00104800: AES/EBU-1/2

   0x00004000: analog-1

   0x00004900: analog-2

   0x00005200: analog-3

   0x00005b00: analog-4

   0x00006400: analog-5

   0x00006d00: analog-6

   0x00007600: analog-7

   0x00007f00: analog-8

   0x00104000: AES/EBU-1

   0x00104900: AES/EBU-2

 0x00000060: sample rate conversion for AES/EBU input/output.

   0x00000000: None

   0x00000020: input signal is converted to system rate

   0x00000040: output is slave to input, ignoring system rate

   0x00000060: output is double rate than system rate

 0x00000018: nominal rate of sampling clock.

   0x00000000: 44.1 kHz

   0x00000008: 48.0 kHz

   0x00000010: 88.2 kHz

   0x00000018: 96.0 kHz

 0x00000007: source of sampling clock.

   0x00000000: internal

   0x00000001: ADAT on optical interface

   0x00000002: AES/EBU on XLR

   0x00000003: source packet header (SPH)

   0x00000004: word clock on BNC

   0x00000005: ADAT on Dsub 9pin

 This transaction should be initiated after the device receives batch of packets

 since the device voluntarily mutes outputs. As a workaround, yield processor over

 100 msec.

 The number of chunks is just reduced when SPDIF is activated.

 24bit PCM frames follow to source packet header without message chunk.

 No message chunk in data block.

 Always enable optical interface for ADAT signal since the device have no registers

 to refer to current configuration.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * motu-transaction.c - a part of driver for MOTU FireWire series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>

 Register messaging address. Block transaction is not allowed. */

 Perhaps, 4 byte messages are transferred. */

 Unregister the address. */

 SPDX-License-Identifier: GPL-2.0-only



 motu-register-dsp-message-parser.c - a part of driver for MOTU FireWire series



 Copyright (c) 2021 Takashi Sakamoto <o-takashi@sakamocchi.jp>

 Below models allow software to configure their DSP functions by asynchronous transaction

 to access their internal registers.

 * 828 mk2

 * 896hd

 * Traveler

 * 8 pre

 * Ultralite

 * 4 pre

 * Audio Express



 Additionally, isochronous packets from the above models include messages to notify state of

 DSP. The messages are two set of 3 byte data in 2nd and 3rd quadlet of data block. When user

 operates hardware components such as dial and switch, corresponding messages are transferred.

 The messages include Hardware metering and MIDI messages as well.

 MIDI mask is in 8th byte.

 MIDI mask is in 8th byte.

 In 4 pre and Audio express, meter index is in 6th byte. MIDI flag is in 8th byte and MIDI byte

 is in 7th byte.

 Used for messages with no information.

 Transferred by all models but the purpose is still unknown.

 Specific to 828mk2, 896hd, Traveler.

 Specific to 828mk2, Traveler, and 896hd (not functional).

 Specific to 828mk2, Traveler, and 896hd (not functional).

 Specific to Ultralite, 4 pre, Audio express, and 8 pre (not functional).

 Specific to 4 pre, and Audio express.

 Specific to 4 pre, and Audio express.

 Specific to 4 pre, and Audio express.

 Transferred by all models. This type of message interposes the series of the other

 messages. The message delivers signal level up to 96.0 kHz. In 828mk2, 896hd, and

 Traveler, one of physical outputs is selected for the message. The selection is done

 by LSB one byte in asynchronous write quadlet transaction to 0x'ffff'f000'0b2c.

 Rough implementaion of queue without overrun check.

 The message for meter is interruptible to the series of other

 types of messages. Don't cache it.

 Don't cache it.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * amdtp-motu.c - a part of driver for MOTU FireWire series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>

/*

 * Nominally 3125 bytes/second, but the MIDI port's clock might be

 * 1% too slow, and the bus clock 100 ppm too fast.

 Each data block includes SPH in its head. Data chunks follow with

 3 byte alignment. Padding follows with zero to conform to quadlet

 alignment.

 TODO: how to set an constraint for exactly 24bit PCM sample? */

 For tracepoints. */

 For tracepoints. */

 This is just for v2/v3 protocol. */

 For data block processing.

 For tracepoints.

 For data block processing.

 For tracepoints.

		/*

		 * Units of version 3 transmits packets with invalid CIP header

		 * against IEC 61883-1.

 8pre has some quirks.

 Use fixed value for FDF field.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * motu.c - a part of driver for MOTU FireWire series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>

 mode 0 */

 mode 1 */

 mode 2 */

 Block till all of ALSA character devices are released.

 The handler address register becomes initialized. */

 FireWire only.

 FireWire only.

 Hybrid.

 Hybrid.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * oxfw_hwdep.c - a part of driver for OXFW970/971 based devices

 *

 * Copyright (c) 2014 Takashi Sakamoto

/*

 * This codes give three functionality.

 *

 * 1.get firewire node information

 * 2.get notification about starting/stopping stream

 * 3.lock/unlock stream

 SPDX-License-Identifier: GPL-2.0-only

/*

 * oxfw_proc.c - a part of driver for OXFW970/971 based devices

 *

 * Copyright (c) 2014 Takashi Sakamoto

 Show input. */

 Show output. */

	/*

	 * All nodes are automatically removed at snd_card_disconnect(),

	 * by following to link list.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * oxfw_stream.c - a part of driver for OXFW970/971 based devices

 *

 * Copyright (c) 2014 Takashi Sakamoto

/*

 * According to datasheet of Oxford Semiconductor:

 *  OXFW970: 32.0/44.1/48.0/96.0 Khz, 8 audio channels I/O

 *  OXFW971: 32.0/44.1/48.0/88.2/96.0/192.0 kHz, 16 audio channels I/O, MIDI I/O

/*

 * See Table 5.7 – Sampling frequency for Multi-bit Audio

 * in AV/C Stream Format Information Specification 1.1 (Apr 2005, 1394TA)

 Seek stream format for requirements. */

 If assumed, just change rate. */

 Calculate format length. */

 Some requests just after changing format causes freezing. */

 OXFW 970/971 has no function to generate playback timing according to the sequence

 of value in syt field, thus the packet should include NO_INFO value in the field.

 However, some models just ignore data blocks in packet with NO_INFO for audio data

 processing.

 The stream should have one pcm channels at least.

 Considering JACK/FFADO streaming:

 TODO: This can be removed hwdep functionality becomes popular.

 Just after changing sampling transfer frequency, many cycles are

 skipped for packet transmission.

 It takes a bit time for target device to adjust event frequency

 according to nominal event frequency in isochronous packets from

 ALSA oxfw driver.

 NOTE: The device ignores presentation time expressed by the value of syt field

 of CIP header in received packets. The sequence of the number of data blocks per

 packet is important for media clock recovery.

 This function should be called before starting the stream or after stopping

 the streams.

/*

 * See Table 6.16 - AM824 Stream Format

 *     Figure 6.19 - format_information field for AM824 Compound

 * in AV/C Stream Format Information Specification 1.1 (Apr 2005, 1394TA)

 * Also 'Clause 12 AM824 sequence adaption layers' in IEC 61883-6:2005

	/*

	 * this module can support a hierarchy combination that:

	 *  Root:	Audio and Music (0x90)

	 *  Level 1:	AM824 Compound  (0x40)

 check the sampling rate */

 IEC 60958 Conformant, currently handled as MBLA */

 Multi Bit Linear Audio (Raw) */

 MIDI Conformant */

 IEC 61937-3 to 7 */

 Multi Bit Linear Audio */

 DVD-Audio */

 High Precision */

 One Bit Audio */

 (Plain) Raw */

 (Plain) SACD */

 (Encoded) Raw */

 (Encoded) SACD */

 SMPTE Time-Code conformant */

 Sample Count */

 Anciliary Data */

 Synchronization Stream (Stereo Raw audio) */

 Don't care */

 not supported */

 get format at current sampling rate */

 parse and set stream format */

 apply the format for each available sampling rate */

 get first entry */

 LIST subfunction is not implemented */

 LIST subfunction is implemented */

 The format is too short. */

 parse and set stream format */

 get next entry */

 No entries remained. */

 the number of plugs for isoc in/out, ext in/out  */

 use oPCR[0] if exists */

 The oPCR is not available for isoc communication.

 Add one MIDI port. */

 use iPCR[0] if exists */

 The iPCR is not available for isoc communication.

 Add one MIDI port. */

 user land lock this */

 this is the first time */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * oxfw_command.c - a part of driver for OXFW970/971 based devices

 *

 * Copyright (c) 2014 Takashi Sakamoto

 CONTROL */

 UNIT */

 EXTENDED STREAM FORMAT INFORMATION */

 SINGLE subfunction */

 Plug Direction */

 UNIT */

 PCR (Isochronous Plug) */

 Plug ID */

 Padding */

 Support status in response */

 do transaction and check buf[1-8] are the same against command */

 NOT IMPLEMENTED */

 REJECTED */

 SINGLE */

 LIST */

 STATUS */

 UNIT */

 EXTENDED STREAM FORMAT INFORMATION */

 SINGLE or LIST */

 Plug Direction */

 Unit */

 PCR (Isochronous Plug) */

 Plug ID */

 Padding */

 support status in response */

 entry ID for LIST subfunction */

 padding */

 do transaction and check buf[1-7] are the same against command */

 NOT IMPLEMENTED */

 REJECTED */

 IN TRANSITION */

 LIST subfunction has entry ID */

 keep just stream format information */

 SPECIFIC INQUIRY */

 UNIT */

 INPUT PLUG SIGNAL FORMAT */

 OUTPUT PLUG SIGNAL FORMAT */

 plug id */

 EOH_1, Form_1, FMT. AM824 */

 FDF-hi. AM824, frequency */

 FDF-mid. AM824, SYT hi (not used) */

 FDF-low. AM824, SYT lo (not used) */

 do transaction and check buf[1-5] are the same against command */

 NOT IMPLEMENTED */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * oxfw_midi.c - a part of driver for OXFW970/971 based devices

 *

 * Copyright (c) 2014 Takashi Sakamoto

 create midi ports */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * oxfw_pcm.c - a part of driver for OXFW970/971 based devices

 *

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

 When source of clock is not internal or any stream is reserved for

 transmission of PCM frames, the available sampling rate is limited

 at current one.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * oxfw-spkr.c - a part of driver for OXFW970/971 based devices

 *

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

 AV/C, STATUS */

       STABLE */

 AV/C, CONTROL */

       ACCEPTED */

 audio unit 0 */

 FUNCTION BLOCK */

 function block type: feature */

 function block ID */

 control attribute: current */

 selector length */

 audio channel number */

 control selector: mute */

 control data length */

 AV/C, STATUS */

       STABLE */

 AV/C, CONTROL */

       ACCEPTED */

 audio unit 0 */

 FUNCTION BLOCK */

 function block type: feature */

 function block ID */

 control attribute */

 selector length */

 audio channel number */

 control selector: volume */

 control data length */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * oxfw-scs1x.c - a part of driver for OXFW970/971 based devices

 *

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

 * Copyright (c) 2015 Takashi Sakamoto <o-takashi@sakamocchi.jp>

 For MIDI playback. */

 SysEx begin */

 Stanton DJ */

 "HSS" */

 Don't retry for this data. */

		/*

		 * Convert from real MIDI to what I think the device expects (no

		 * running status, one command per packet, unescaped SysExs).

 node_id vs. generation */

 Allocate own handler for imcoming asynchronous transaction. */

 Use unique name for backward compatibility to scs1x module. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * oxfw.c - a part of driver for OXFW970/971 based devices

 *

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

 0x970?vvvv or 0x971?vvvv, where vvvv = firmware version */

 get vendor name from root directory */

 get model name from unit directory */

 to apply card definitions */

	/*

	 * Add ALSA control elements for two models to keep compatibility to

	 * old firewire-speaker module.

	/*

	 * Stanton models supports asynchronous transactions for unique MIDI

	 * messages.

 No physical MIDI ports.

	/*

	 * TASCAM FireOne has physical control and requires a pair of additional

	 * MIDI ports.

 Seek from Root Directory of Config ROM. */

 Mackie Onyx Satellite with base station has a quirk to report a wrong

 value in 'dbs' field of CIP header against its format information.

 OXFW971-based models may transfer events by blocking method.

Unless receiving packets without NOINFO packet, the device transfers

mostly half of events in packets than expected.

 Block till all of ALSA character devices are released.



 OXFW970 devices:

 Initial firmware has a quirk to postpone isoc packet transmission during finishing async

 transaction. As a result, several isochronous cycles are skipped to transfer the packets

 and the audio data frames which should have been transferred during the cycles are put

 into packet at the first isoc cycle after the postpone. Furthermore, the value of SYT

 field in CIP header is not reliable as synchronization timing,



 Behringer,F-Control Audio 202. The value of SYT field is not reliable at all.

 Loud Technologies, Tapco Link.FireWire 4x6. The value of SYT field is always 0xffff.

 Loud Technologies, Mackie Onyx Satellite. Although revised version of firmware is

 installed to avoid the postpone, the value of SYT field is always 0xffff.

 Miglia HarmonyAudio. Not yet identified.



 OXFW971 devices:

 The value of SYT field in CIP header is enough reliable. Both of blocking and non-blocking

 transmission methods are available.



 Any Mackie(Loud) models (name string/model id):

  Onyx-i series (former models):	0x081216

  Onyx 1640i:				0x001640

  d.2 pro/d.4 pro (built-in card):	Unknown

  U.420:				Unknown

  U.420d:				Unknown

 TASCAM, FireOne.

 Stanton, Stanton Controllers & Systems 1 Mixer (SCS.1m).

 Stanton, Stanton Controllers & Systems 1 Deck (SCS.1d).

 APOGEE, duet FireWire.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tascam-pcm.c - a part of driver for TASCAM FireWire series

 *

 * Copyright (c) 2015 Takashi Sakamoto

 When source of clock is not internal or any stream is reserved for

 transmission of PCM frames, the available sampling rate is limited

 at current one.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tascam.c - a part of driver for TASCAM FireWire series

 *

 * Copyright (c) 2015 Takashi Sakamoto

 Pick up model name from certain addresses. */

 Block till all of ALSA character devices are released.

 Tascam, FW-1884.

 Tascam, FE-8 (.version = 0x800001)

 This kernel module doesn't support FE-8 because the most of features

 can be implemented in userspace without any specific support of this

 module.



 .version = 0x800002 is unknown.



 Tascam, FW-1082.

 Tascam, FW-1804.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tascam-midi.c - a part of driver for TASCAM FireWire series

 *

 * Copyright (c) 2015 Takashi Sakamoto

 Do nothing. */

 Do nothing. */

 Set port names for MIDI input. */

 TODO: support virtual MIDI ports. */

 Hardware MIDI ports. */

 Set port names for MIDI ourput. */

 Hardware MIDI ports only. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tascam-hwdep.c - a part of driver for TASCAM FireWire series

 *

 * Copyright (c) 2015 Takashi Sakamoto

/*

 * This codes give three functionality.

 *

 * 1.get firewire node information

 * 2.get notification about starting/stopping stream

 * 3.lock/unlock stream

 At least, one control event can be copied.

 Copy the type field later.

 NOTE: The acquired lock should be released in callee side.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tascam-proc.h - a part of driver for TASCAM FireWire series

 *

 * Copyright (c) 2015 Takashi Sakamoto

	/*

	 * All nodes are automatically removed at snd_card_disconnect(),

	 * by following to link list.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tascam-stream.c - a part of driver for TASCAM FireWire series

 *

 * Copyright (c) 2015 Takashi Sakamoto

 In intermediate state after changing clock status.

 Still in the intermediate state.

 Base rate. */

 Multiplier. */

 Multiplier. */

 Check base rate. */

 Check multiplier. */

 Set an option for unknown purpose.

 Unregister channels.

 Register the isochronous channel for transmitting stream.

 Unknown.

 Register the isochronous channel for receiving stream.

 Set an option for unknown purpose.

 Start multiplexing PCM samples on packets.

 At bus reset, streaming is stopped and some registers are clear.

 This function should be called before starting streams or after stopping

 streams.

 MEMO: Just after starting packet streaming, it transfers packets without any

 event. Enough after receiving the sequence of packets, it multiplexes events into

 the packet. However, just after changing sampling transfer frequency, it stops

 multiplexing during packet transmission. Enough after, it restarts multiplexing

 again. The device ignores presentation time expressed by the value of syt field

 of CIP header in received packets. The sequence of the number of data blocks per

 packet is important for media clock recovery.

 user land lock this */

 this is the first time */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * tascam-transaction.c - a part of driver for TASCAM FireWire series

 *

 * Copyright (c) 2015 Takashi Sakamoto

/*

 * When return minus value, given argument is not MIDI status.

 * When return 0, given argument is a beginning of system exclusive.

 * When return the others, given argument is MIDI data.

 Tune request. */

 Timing clock. */

 Start. */

 Continue. */

 Stop. */

 Active sensing. */

 System reset. */

 MIDI time code quarter frame. */

 Song select. */

 Song position pointer. */

 Exclusive. */

 End of exclusive. */

 Undefined. */

 Undefined. */

 Undefined. */

 Undefined. */

 Note on. */

 Note off. */

 Polyphonic key pressure. */

 Control change and Mode change. */

 Pitch bend change. */

 Program change. */

 Channel pressure. */

 The first byte is used for label, the rest for MIDI bytes. */

 On exclusive message. */

 Seek the end of exclusives. */

 At the end of exclusive message, use label 0x07. */

 During exclusive message, use label 0x04. */

 We need to fill whole 3 bytes. Go to next change. */

 The beginning of exclusives. */

 Transfer it in next chance in another condition. */

 On running-status. */

 Calculate consume bytes. */

 On running-status. */

 Enough MIDI bytes were not retrieved. */

 Enough MIDI bytes were not retrieved. */

 This port is closed. */

 To start next transaction immediately for recovery. */

 Don't continue processing. */

 Under transacting or error state. */

 Nothing to do. */

 Do it in next chance. */

	/*

	 * Fill the buffer. The callee must use snd_rawmidi_transmit_peek().

	 * Later, snd_rawmidi_transmit_ack() is called.

 Do it in next chance, immediately. */

 Fatal error. */

 Set interval to next transaction. */

 Start this transaction. */

	/*

	 * In Linux FireWire core, when generation is updated with memory

	 * barrier, node id has already been updated. In this module, After

	 * this smp_rmb(), load/store instructions to memory are completed.

	 * Thus, both of generation and node id are available with recent

	 * values. This is a light-serialization solution to handle bus reset

	 * events on IEEE 1394 bus.

 TODO: support virtual MIDI ports. */

 Assume the message length. */

 On MIDI data or exclusives. */

 Seek the end of exclusives. */

	/*

	 * Usually, two quadlets are transferred by one transaction. The first

	 * quadlet has MIDI messages, the rest includes timestamp.

	 * Sometimes, 8 set of the data is transferred by a block transaction.

 At bus reset, these registers are cleared. */

 Register messaging address. Block transaction is not allowed. */

 Turn on messaging. */

 Turn on FireWire LED. */

 Turn off FireWire LED. */

 Turn off messaging. */

 Unregister the address. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * amdtp-tascam.c - a part of driver for TASCAM FireWire series

 *

 * Copyright (c) 2015 Takashi Sakamoto

 Packets in in-stream have extra 2 data channels. */

 The first data channel is for event counter. */

	/*

	 * Our implementation allows this protocol to deliver 24 bit sample in

	 * 32bit data channel.

 Use fixed value for FDF field.

 This protocol uses fixed number of data channels for PCM samples. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * bebob_midi.c - a part of driver for BeBoB based devices

 *

 * Copyright (c) 2013-2014 Takashi Sakamoto

 create midi ports */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * bebob_stream.c - a part of driver for BeBoB based devices

 *

 * Copyright (c) 2013-2014 Takashi Sakamoto

/*

 * NOTE;

 * For BeBoB streams, Both of input and output CMP connection are important.

 *

 * For most devices, each CMP connection starts to transmit/receive a

 * corresponding stream. But for a few devices, both of CMP connection needs

 * to start transmitting stream. An example is 'M-Audio Firewire 410'.

 128 is an arbitrary length but it seems to be enough */

/*

 * See: Table 51: Extended Stream Format Info ‘Sampling Frequency’

 * in Additional AVC commands (Nov 2003, BridgeCo)

 synchronize receive stream rate to transmit stream rate */

	/*

	 * Some devices need a bit time for transition.

	 * 300msec is got by some experiments.

 1.The device has its own operation to switch source of clock */

	/*

	 * 2.The device don't support to switch source of clock then assumed

	 *   to use internal clock always

	/*

	 * 3.The device supports to switch source of clock by an usual way.

	 *   Let's check input for 'Music Sub Unit Sync Input' plug.

	/*

	 * If there are no input plugs, all of fields are 0xff.

	 * Here check the first field. This field is used for direction.

 The source from any output plugs is for one purpose only. */

		/*

		 * In BeBoB architecture, the source from music subunit may

		 * bypass from oPCR[0]. This means that this source gives

		 * synchronization to IEEE 1394 cycle start packet.

 The source from any input units is for several purposes. */

				/*

				 * This source comes from iPCR[0]. This means

				 * that presentation timestamp calculated by

				 * SYT series of the received packets. In

				 * short, this driver is the master of

				 * synchronization.

				/*

				 * This source comes from iPCR[1-29]. This

				 * means that the synchronization stream is not

				 * the Audio/MIDI compound stream.

 Check type of this plug.  */

				/*

				 * SPDIF/ADAT or sometimes (not always) word

				 * clock.

 Often word clock. */

				/*

				 * Not standard.

				 * Mostly, additional internal clock.

 Not supported. */

	/*

	 * The length of return value of this command cannot be expected. Here

	 * use the maximum length of FCP.

 positions in I/O buffer */

 the number of sections in AMDTP packet */

 type of this section */

 NoType */

 the number of channels in this section */

 position of this channel in AMDTP packet */

 location of this channel in this section */

			/*

			 * Basically the number of location is within the

			 * number of channels in this section. But some models

			 * of M-Audio don't follow this. Its location for MIDI

			 * is the position of MIDI channels in AMDTP packet.

 for MIDI conformant data channel */

 AMDTP_MAX_CHANNELS_FOR_MIDI is 1. */

 for PCM data channel */

 Headphone */

 Microphone */

 Line */

 SPDIF */

 ADAT */

 TDIF */

 MADI */

 for undefined/changeable signal  */

 Analog */

 Digital */

 channel mapping.

 Considering JACK/FFADO streaming:

 TODO: This can be removed hwdep functionality becomes popular.

 NOTE:

 If establishing connections at first, Yamaha GO46

 (and maybe Terratec X24) don't generate sound.



 For firmware customized by M-Audio, refer to next NOTE.

 Need no substreams.

 packet queueing error or detecting discontinuity

 MEMO: Some devices start packet transmission long enough after establishment of

 CMP connection. In the early stage of packet streaming, any device transfers

 NODATA packets. After several hundred cycles, it begins to multiplex event into

 the packet with adequate value of syt field in CIP header. Some devices are

 strictly to generate any discontinuity in the sequence of tx packet when they

 receives inadequate sequence of value in syt field of CIP header. In the case,

 the request to break CMP connection is often corrupted, then any transaction

 results in unrecoverable error, sometimes generate bus-reset.

 NOTE:

 The firmware customized by M-Audio uses these commands to

 start transmitting stream. This is not usual way.

 Some devices postpone start of transmission mostly for 1 sec after receives

 packets firstly.

/*

 * This function should be called before starting streams or after stopping

 * streams.

/*

 * See: Table 50: Extended Stream Format Info Format Hierarchy Level 2’

 * in Additional AVC commands (Nov 2003, BridgeCo)

 * Also 'Clause 12 AM824 sequence adaption layers' in IEC 61883-6:2005

	/*

	 * this module can support a hierarchy combination that:

	 *  Root:	Audio and Music (0x90)

	 *  Level 1:	AM824 Compound  (0x40)

 check sampling rate */

 Avoid double count by different entries for the same rate. */

 IEC 60958 Conformant, currently handled as MBLA */

 Multi bit linear audio */

 Raw */

 MIDI Conformant */

 IEC 61937-3 to 7 */

 Multi bit linear audio */

 DVD-Audio */

 High Precision */

 One Bit Audio */

 (Plain) Raw */

 (Plain) SACD */

 (Encoded) Raw */

 (Encoded) SACD */

 Synchronization Stream (Stereo Raw audio) */

 Don't care */

 not supported */

 No entries remained.

 Yamaha GO44, GO46, Terratec Phase 24, Phase x24 reports 0 for the number of

 channels in external output plug 3 (MIDI type) even if it has a pair of physical

 MIDI jacks. As a workaround, assume it as one.

 Get the number of Music Sub Unit for both direction. */

 seek destination plugs for 'MSU sync input' */

 the number of plugs for isoc in/out, ext in/out  */

	/*

	 * This module supports at least one isoc input plug and one isoc

	 * output plug.

 for check source of clock later */

 user land lock this */

 this is the first time */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * bebob_proc.c - a part of driver for BeBoB based devices

 *

 * Copyright (c) 2013-2014 Takashi Sakamoto

 contents of information register */

/* may not used in product

	u64 dbg_date;

	u64 dbg_time;

	u32 dbg_id;

	u32 dbg_version;

	/*

	 * All nodes are automatically removed at snd_card_disconnect(),

	 * by following to link list.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * bebob_focusrite.c - a part of driver for BeBoB based devices

 *

 * Copyright (c) 2013-2014 Takashi Sakamoto

 whether sync to external device or not */

 clock sources as returned from register of Saffire Pro 10 and 26 */

 never used on hardware */

 not used on s.pro. 10 */

 not used on s.pro. 10 */

 S/PDIF, ADAT1, ADAT2 is enabled or not. three quadlets */

 saffirepro has its own parameter for sampling frequency */

 index is the value for this register */

 saffire(no label)/saffire LE has metering */

 S/PDIF */

 Word Clock */

 S/PDIF */

 ADAT1 */

 ADAT2 */

 Word Clock */

 Value maps between registers and labels for SaffirePro 10/26. */

 SaffirePro 10 */

 not supported */

 not supported */

 not supported */

 SaffirePro 26 */

 not supported */

/*

 * query hardware for current clock source, return our internally

 * used clock index in *id, depending on hardware.

 clock source read from hw register */

 depending on hardware, use a different mapping */

 In a case that this driver cannot handle the value of register. */

 Saffire Pro 26 I/O  */

 Saffire Pro 10 I/O */

 Saffire LE */

 Saffire */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * bebob.c - a part of driver for BeBoB based devices

 *

 * Copyright (c) 2013-2014 Takashi Sakamoto

/*

 * BeBoB is 'BridgeCo enhanced Breakout Box'. This is installed to firewire

 * devices with DM1000/DM1100/DM1500 chipset. It gives common way for host

 * system to handle BeBoB based devices.

 Offsets from information register. */

 get vendor name from root directory */

 get model name from unit directory */

 get hardware id */

 get hardware revision */

 get GUID */

 M-Audio ProFire Lightbridge has a quirk to transfer packets with

 discontinuous cycle or data block counter in early stage of packet

 streaming. The cycle span from the first packet with event is variable.

 At high sampling rate, M-Audio special firmware transmits empty packet

 with the value of dbc incremented by 8.

 To boot up M-Audio models.

 This is a workaround. This bus reset seems to have an effect to make devices

 correctly handling transactions. Without this, the devices have gap_count

 mismatch. This causes much failure of transaction.



 Just after registration, user-land application receive signals from dbus and

 starts I/Os. To avoid I/Os till the future bus reset, registration is done in

 next update().

/*

 * This driver doesn't update streams in bus reset handler.

 *

 * DM1000/ DM1100/DM1500 chipsets with BeBoB firmware transfer packets with

 * discontinued counter at bus reset. This discontinuity is immediately

 * detected in packet streaming layer, then it sets XRUN to PCM substream.

 *

 * ALSA PCM applications can know the XRUN by getting -EPIPE from PCM operation.

 * Then, they can recover the PCM substream by executing ioctl(2) with

 * SNDRV_PCM_IOCTL_PREPARE. 'struct snd_pcm_ops.prepare' is called and drivers

 * restart packet streaming.

 *

 * The above processing may be executed before this bus-reset handler is

 * executed. When this handler updates streams with current isochronous

 * channels, the streams already have the current ones.

 Block till all of ALSA character devices are released.

 The immediate entry for version in unit directory differs depending on models:

  * 0x010001

  * 0x014001

 Edirol, FA-66 */

 Edirol, FA-101 */

 Presonus, FIREBOX */

 PreSonus, FIREPOD/FP10 */

 PreSonus, Inspire1394 */

 BridgeCo, RDAudio1 */

 BridgeCo, Audio5 */

 Mackie, Onyx 1220/1620/1640 (Firewire I/O Card) */

 Mackie, d.2 (optional Firewire card with DM1000).

 Stanton, ScratchAmp */

 Tascam, IF-FW DM */

 Behringer, XENIX UFX 1204 */

 Behringer, XENIX UFX 1604 */

 Behringer, Digital Mixer X32 series (X-UF Card) */

  Behringer, F-Control Audio 1616 */

  Behringer, F-Control Audio 610 */

 Apogee Electronics, Rosetta 200/400 (X-FireWire card) */

 Apogee Electronics, DA/AD/DD-16X (X-FireWire card) */

 Apogee Electronics, Ensemble */

 ESI, Quatafire610 */

 CME, MatrixKFW */

 Phonic Helix Board 12 FireWire MkII.

 Phonic Helix Board 18 FireWire MkII.

 Phonic Helix Board 24 FireWire MkII.

 Phonic FireFly 808 FireWire.

 Phonic FireFly 202, 302, 808 Universal.

 Phinic Helix Board 12/18/24 FireWire, 12/18/24 Universal

 Lynx, Aurora 8/16 (LT-FW) */

 ICON, FireXon */

 PrismSound, Orpheus */

 PrismSound, ADA-8XR */

 TerraTec Electronic GmbH, PHASE 88 Rack FW */

 TerraTec Electronic GmbH, PHASE 24 FW */

 TerraTec Electronic GmbH, Phase X24 FW */

 TerraTec Electronic GmbH, EWS MIC2/MIC8 */

 Terratec Electronic GmbH, Aureon 7.1 Firewire.

 AcousticReality, eAR Master One, Eroica, Figaro, and Ciaccona. Perhaps Terratec OEM.

 Yamaha, GO44 */

 YAMAHA, GO46 */

 Focusrite, SaffirePro 26 I/O */

 Focusrite, SaffirePro 10 I/O */

 Focusrite, Saffire(no label and LE) */

 M-Audio, Firewire 410. The vendor field is left as BridgeCo. AG.

 M-Audio, Firewire Audiophile */

 M-Audio, Firewire Solo */

 M-Audio, Ozonic */

 M-Audio NRV10 */

 M-Audio, ProFireLightbridge */

 Firewire 1814 */

 bootloader */

 M-Audio ProjectMix */

 Digidesign Mbox 2 Pro */

 Toneweal FW66.

 IDs are unknown but able to be supported */

  Apogee, Mini-ME Firewire */

  Apogee, Mini-DAC Firewire */

  Cakawalk, Sonar Power Studio 66 */

  CME, UF400e */

  ESI, Quotafire XL */

  Infrasonic, DewX */

  Infrasonic, Windy6 */

  Mackie, Digital X Bus x.200 */

  Mackie, Digital X Bus x.400 */

  Rolf Spuler, Firewire Guitar */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * bebob_maudio.c - a part of driver for BeBoB based devices

 *

 * Copyright (c) 2013-2014 Takashi Sakamoto

/*

 * Just powering on, Firewire 410/Audiophile/1814 and ProjectMix I/O wait to

 * download firmware blob. To enable these devices, drivers should upload

 * firmware blob and send a command to initialize configuration to factory

 * settings when completing uploading. Then these devices generate bus reset

 * and are recognized as new devices with the firmware.

 *

 * But with firmware version 5058 or later, the firmware is stored to flash

 * memory in the device and drivers can tell bootloader to load the firmware

 * by sending a cue. This cue must be sent one time.

 *

 * For streaming, both of output and input streams are needed for Firewire 410

 * and Ozonic. The single stream is OK for the other devices even if the clock

 * source is not SYT-Match (I note no devices use SYT-Match).

 *

 * Without streaming, the devices except for Firewire Audiophile can mix any

 * input and output. For this reason, Audiophile cannot be used as standalone

 * mixer.

 *

 * Firewire 1814 and ProjectMix I/O uses special firmware. It will be freezed

 * when receiving any commands which the firmware can't understand. These

 * devices utilize completely different system to control. It is some

 * write-transaction directly into a certain address. All of addresses for mixer

 * functionality is between 0xffc700700000 to 0xffc70070009c.

 Offset from information register */

 Bootloader Protocol Version 1 */

/*

 * Initializing configuration to factory settings (= 0x1101), (swapped in line),

 * Command code is zero (= 0x00),

 * the number of operands is zero (= 0x00)(at least significant byte)

 padding */

 some device has sync info after metering data */

 with sync info */

 with sync info */

 with sync info */

 with sync info */

 labels for metering */

 for NRV */

/*

 * For some M-Audio devices, this module just send cue to load firmware. After

 * loading, the device generates bus reset and newly detected.

 *

 * If we make any transactions to load firmware, the operation may failed.

 check date of software used to build */

	/*

	 * firmware version 5058 or later has date later than "20070401", but

	 * 'date' is not null-terminated.

 if synced, this value is the same as SFC of FDF in CIP header */

/*

 * dig_fmt: 0x00:S/PDIF, 0x01:ADAT

 * clk_lock: 0x00:unlock, 0x01:lock

 CONTROL */

 UNIT */

 vendor dependent */

 company ID high */

 company ID middle */

 company ID low */

 clock source */

 input digital format */

 output digital format */

 lock these settings */

 padding  */

 padding */

 NOT IMPLEMENTED */

 REJECTED */

 AMDTP_OUT_STREAM */

 SPDIF */

 ADAT */

 AMDTP_IN_STREAM */

 SPDIF */

 ADAT */

 initialize these parameters because driver is not allowed to ask */

 Input plug shows actual rate. Output plug is needless for this purpose. */

	/*

	 * Just after changing sampling rate for output, a followed command

	 * for input is easy to fail. This is a workaround fot this issue.

 Clock source control for special firmware */

 With digital mute */

 SPDIF/ADAT */

 Word Clock */

 Clock synchronization control for special firmware */

 Digital input interface control for special firmware */

 encoded id for user value */

 for ADAT Optical */

 decode user value */

 For ADAT, optical interface is only available. */

 For S/PDIF, optical/coaxial interfaces are selectable. */

 Digital output interface control for special firmware */

 Hardware metering for special firmware */

 omit last 4 bytes because it's clock info. */

 Its format is u16 and some channels are unknown. */

 last 4 bytes are omitted because it's clock info. */

 no clock info */

 TODO: need testers. these positions are based on authour's assumption */

 swap stream channels because inverted */

 for special customized devices */

 Firewire 410 specification */

 Firewire Audiophile specification */

 Firewire Solo specification */

 Ozonic specification */

 NRV10 specification */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * bebob_yamaha.c - a part of driver for BeBoB based devices

 *

 * Copyright (c) 2013-2014 Takashi Sakamoto

/*

 * NOTE:

 * Yamaha GO44 is not designed to be used as stand-alone mixer. So any streams

 * must be accompanied. If changing the state, a LED on the device starts to

 * blink and its sync status is false. In this state, the device sounds nothing

 * even if streaming. To start streaming at the current sampling rate is only

 * way to recover this state. GO46 is better for stand-alone mixer.

 *

 * Both of them have a capability to change its sampling rate up to 192.0kHz.

 * At 192.0kHz, the device reports 4 PCM-in, 1 MIDI-in, 6 PCM-out, 1 MIDI-out.

 * But Yamaha's driver reduce 2 PCM-in, 1 MIDI-in, 2 PCM-out, 1 MIDI-out to use

 * 'Extended Stream Format Information Command - Single Request' in 'Additional

 * AVC commands' defined by BridgeCo.

 * This ALSA driver don't do this because a bit tiresome. Then isochronous

 * streaming with many asynchronous transactions brings sounds with noises.

 * Unfortunately current 'ffado-mixer' generated many asynchronous transaction

 * to observe device's state, mainly check cmp connection and signal format. I

 * recommend users to close ffado-mixer at 192.0kHz if mixer is needless.

 *

 * Terratec PHASE 24 FW and PHASE X24 FW are internally the same as

 * Yamaha GO 44 and GO 46. Yamaha and Terratec had cooperated for these models.

 S/PDIF */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * bebob_terratec.c - a part of driver for BeBoB based devices

 *

 * Copyright (c) 2013-2014 Takashi Sakamoto

 S/PDIF */

 Word Clock */

 PHASE 88 Rack FW */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * bebob_pcm.c - a part of driver for BeBoB based devices

 *

 * Copyright (c) 2013-2014 Takashi Sakamoto

 entry is invalid */

 entry is invalid */

 entry has no PCM channels */

 When source of clock is not internal or any stream is reserved for

 transmission of PCM frames, the available sampling rate is limited

 at current one.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * bebob_hwdep.c - a part of driver for BeBoB based devices

 *

 * Copyright (c) 2013-2014 Takashi Sakamoto

/*

 * This codes give three functionality.

 *

 * 1.get firewire node infomation

 * 2.get notification about starting/stopping stream

 * 3.lock/unlock stream

 SPDX-License-Identifier: GPL-2.0-only

/*

 * bebob_command.c - driver for BeBoB based devices

 *

 * Copyright (c) 2013-2014 Takashi Sakamoto

 AV/C CONTROL */

 AUDIO SUBUNIT ID */

 FUNCTION BLOCK  */

 type is 'selector'*/

 function block id */

 control attribute is CURRENT */

 selector length is 2 */

 input function block plug number */

 control selector is SELECTOR_CONTROL */

 NOT IMPLEMENTED */

 REJECTED */

 AV/C STATUS */

 AUDIO SUBUNIT ID */

 FUNCTION BLOCK */

 type is 'selector'*/

 function block id */

 control attribute is CURRENT */

 selector length is 2 */

 input function block plug number */

 control selector is SELECTOR_CONTROL */

 NOT IMPLEMENTED */

 REJECTED */

 IN TRANSITION */

 AV/C STATUS */

 AV/C GENERAL PLUG INFO */

 BridgeCo extension */

 info type */

 Info type is 'plug type'. */

 NOT IMPLEMENTED */

 REJECTED */

 IN TRANSITION */

 Info type is 'plug type'.

 NOT IMPLEMENTED

 REJECTED

 IN TRANSITION

 Info type is 'channel position'. */

 NOT IMPLEMENTED */

 REJECTED */

 IN TRANSITION */

 Pick up specific data. */

 section info includes charactors but this module don't need it */

 Info type is 'section info'. */

 section id */

 NOT IMPLEMENTED */

 REJECTED */

 IN TRANSITION */

 Info type is 'plug input'. */

 NOT IMPLEMENTED */

 REJECTED */

 IN TRANSITION */

 check given buffer */

 AV/C STATUS */

 AV/C STREAM FORMAT SUPPORT */

 Bridgeco extension - List Request */

 Entry ID */

 NOT IMPLEMENTED */

 REJECTED */

 IN TRANSITION */

 Pick up 'stream format info'. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * digi00x-hwdep.c - a part of driver for Digidesign Digi 002/003 family

 *

 * Copyright (c) 2014-2015 Takashi Sakamoto

/*

 * This codes give three functionality.

 *

 * 1.get firewire node information

 * 2.get notification about starting/stopping stream

 * 3.lock/unlock stream

 * 4.get asynchronous messaging

 SPDX-License-Identifier: GPL-2.0-only

/*

 * digi00x-pcm.c - a part of driver for Digidesign Digi 002/003 family

 *

 * Copyright (c) 2014-2015 Takashi Sakamoto

 Check current clock source. */

 When source of clock is not internal or any stream is reserved for

 transmission of PCM frames, the available sampling rate is limited

 at current one.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * digi00x-midi.h - a part of driver for Digidesign Digi 002/003 family

 *

 * Copyright (c) 2014-2015 Takashi Sakamoto

 Add physical midi ports. */

 Add physical midi ports. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * digi00x-stream.c - a part of driver for Digidesign Digi 002/003 family

 *

 * Copyright (c) 2014-2015 Takashi Sakamoto

 Multi Bit Linear Audio data channels for each sampling transfer frequency. */

 Analog/ADAT/SPDIF */

 Analog/SPDIF */

 This means desync. */

 Unregister isochronous channels for both direction.

 Just after finishing the session, the device may lost transmitting

 functionality for a short time.

 Register isochronous channels for both direction.

 Check sampling rate.

/*

 * This function should be called before starting streams or after stopping

 * streams.

	/*

	 * No packets are transmitted without receiving packets, reagardless of

	 * which source of clock is used.

 NOTE: The device doesn't start packet transmission till receiving any packet.

 It ignores presentation time expressed by the value of syt field of CIP header

 in received packets. The sequence of the number of data blocks per packet is

 important for media clock recovery.

 user land lock this */

 this is the first time */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * digi00x-proc.c - a part of driver for Digidesign Digi 002/003 family

 *

 * Copyright (c) 2014-2015 Takashi Sakamoto

	/*

	 * All nodes are automatically removed at snd_card_disconnect(),

	 * by following to link list.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * amdtp-dot.c - a part of driver for Digidesign Digi 002/003 family

 *

 * Copyright (c) 2014-2015 Takashi Sakamoto

 * Copyright (C) 2012 Robin Gareus <robin@gareus.org>

 * Copyright (C) 2012 Damien Zammit <damien@zamaudio.com>

 'Clock-based rate control mode' is just supported. */

/*

 * Nominally 3125 bytes/second, but the MIDI port's clock might be

 * 1% too slow, and the bus clock 100 ppm too fast.

/*

 * Several devices look only at the first eight data blocks.

 * In any case, this is more than enough for the MIDI data rate.

 3 = MAX(DOT_MIDI_IN_PORTS, DOT_MIDI_OUT_PORTS) + 1. */

/*

 * The double-oh-three algorithm was discovered by Robin Gareus and Damien

 * Zammit in 2012, with reverse-engineering for Digi 003 Rack.

/*

 * double-oh-three look up table

 *

 * @param idx index byte (audio-sample data) 0x00..0xff

 * @param off channel offset shift

 * @return salt to XOR with given data

	/*

	 * the length of the added pattern only depends on the lower nibble

	 * of the last non-zero data

	/*

	 * the lower nibble of the salt. Interleaved sequence.

	 * this is walked backwards according to len[]

 circular list for the salt's hi nibble. */

	/*

	 * start offset for upper nibble mapping.

	 * note: 9 is /special/. In the case where the high nibble == 0x9,

	 * hir[] is not used and - coincidentally - the salt's hi nibble is

	 * 0x09 regardless of the offset.

	/*

	 * A first data channel is for MIDI messages, the rest is Multi Bit

	 * Linear Audio data channel.

	/*

	 * We do not know the actual MIDI FIFO size of most devices.  Just

	 * assume two bytes, i.e., one byte can be received over the bus while

	 * the previous one is transmitted over MIDI.

	 * (The value here is adjusted for midi_ratelimit_per_packet().)

			/*

			 * Upper 4 bits of LSB represent port number.

			 * - 0000b: physical MIDI port 1.

			 * - 0010b: physical MIDI port 2.

			 * - 1110b: console MIDI port.

			/*

			 * Upper 4 bits of LSB represent port number.

			 * - 0000b: physical MIDI port 1. Use port 0.

			 * - 1110b: console MIDI port. Use port 2.

 This protocol delivers 24 bit data in 32bit data channel. */

 Use different mode between incoming/outgoing.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * digi00x-transaction.c - a part of driver for Digidesign Digi 002/003 family

 *

 * Copyright (c) 2014-2015 Takashi Sakamoto

 Unknown. 4bytes. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * digi00x.c - a part of driver for Digidesign Digi 002/003 family

 *

 * Copyright (c) 2014-2015 Takashi Sakamoto

 Block till all of ALSA character devices are released.

 Both of 002/003 use the same ID. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ff-hwdep.c - a part of driver for RME Fireface series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto

/*

 * This codes give three functionality.

 *

 * 1.get firewire node information

 * 2.get notification about starting/stopping stream

 * 3.lock/unlock stream

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ff-stream.c - a part of driver for RME Fireface series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto

/*

 * This function should be called before starting streams or after stopping

 * streams.

	/*

	 * Regardless of current source of clock signal, drivers transfer some

	 * packets. Then, the device transfers packets.

 NOTE: The device doesn't transfer packets unless receiving any packet. The

 sequence of tx packets includes cycle skip corresponding to empty packet or

 NODATA packet in IEC 61883-1/6. The sequence of the number of data blocks per

 packet is important for media clock recovery.

 The device discontinue to transfer packets.

 user land lock this */

 this is the first time */

 SPDX-License-Identifier: GPL-2.0

 ff-protocol-latter - a part of driver for RME Fireface series



 Copyright (c) 2019 Takashi Sakamoto



 Licensed under the terms of the GNU General Public License, version 2.

 The content of sync status register differs between models.



 Fireface UCX:

  0xf0000000: (unidentified)

  0x0f000000: effective rate of sampling clock

  0x00f00000: detected rate of word clock on BNC interface

  0x000f0000: detected rate of ADAT or S/PDIF on optical interface

  0x0000f000: detected rate of S/PDIF on coaxial interface

  0x00000e00: effective source of sampling clock

    0x00000e00: Internal

    0x00000800: (unidentified)

    0x00000600: Word clock on BNC interface

    0x00000400: ADAT on optical interface

    0x00000200: S/PDIF on coaxial or optical interface

  0x00000100: Optical interface is used for ADAT signal

  0x00000080: (unidentified)

  0x00000040: Synchronized to word clock on BNC interface

  0x00000020: Synchronized to ADAT or S/PDIF on optical interface

  0x00000010: Synchronized to S/PDIF on coaxial interface

  0x00000008: (unidentified)

  0x00000004: Lock word clock on BNC interface

  0x00000002: Lock ADAT or S/PDIF on optical interface

  0x00000001: Lock S/PDIF on coaxial interface



 Fireface 802 (and perhaps UFX):

   0xf0000000: effective rate of sampling clock

   0x0f000000: detected rate of ADAT-B on 2nd optical interface

   0x00f00000: detected rate of ADAT-A on 1st optical interface

   0x000f0000: detected rate of AES/EBU on XLR or coaxial interface

   0x0000f000: detected rate of word clock on BNC interface

   0x00000e00: effective source of sampling clock

     0x00000e00: internal

     0x00000800: ADAT-B

     0x00000600: ADAT-A

     0x00000400: AES/EBU

     0x00000200: Word clock

   0x00000080: Synchronized to ADAT-B on 2nd optical interface

   0x00000040: Synchronized to ADAT-A on 1st optical interface

   0x00000020: Synchronized to AES/EBU on XLR or 2nd optical interface

   0x00000010: Synchronized to word clock on BNC interface

   0x00000008: Lock ADAT-B on 2nd optical interface

   0x00000004: Lock ADAT-A on 1st optical interface

   0x00000002: Lock AES/EBU on XLR or 2nd optical interface

   0x00000001: Lock word clock on BNC interface



 The pattern for rate bits:

   0x00: 32.0 kHz

   0x01: 44.1 kHz

   0x02: 48.0 kHz

   0x04: 64.0 kHz

   0x05: 88.2 kHz

   0x06: 96.0 kHz

   0x08: 128.0 kHz

   0x09: 176.4 kHz

   0x0a: 192.0 kHz

 Set the number of data blocks transferred in a second.

 Confirm to shift transmission clock.

 Keep resources for in-stream.

 Keep resources for out-stream.

 For Fireface UCX. Always use the maximum number of data

 channels in data block of packet.

 For Fireface UFX and 802. Due to bandwidth limitation on

 IEEE 1394a (400 Mbps), Analog 1-12 and AES are available

 without any ADAT at quadruple speed.

 NOTE: transactions are transferred within 0x00-0x7f in allocated range of

 address. This seems to be for check of discontinuity in receiver side.



 Like Fireface 400, drivers can select one of 4 options for lower 4 bytes of

 destination address by bit flags in quadlet register (little endian) at

 0x'ffff'0000'0014:



 bit flags: offset of destination address

 - 0x00002000: 0x'....'....'0000'0000

 - 0x00004000: 0x'....'....'0000'0080

 - 0x00008000: 0x'....'....'0000'0100

 - 0x00010000: 0x'....'....'0000'0180



 Drivers can suppress the device to transfer asynchronous transactions by

 clear these bit flags.



 Actually, the register is write-only and includes the other settings such as

 input attenuation. This driver allocates for the first option

 (0x'....'....'0000'0000) and expects userspace application to configure the

 register for it.

/*

 * When return minus value, given argument is not MIDI status.

 * When return 0, given argument is a beginning of system exclusive.

 * When return the others, given argument is MIDI data.

 Tune request. */

 Timing clock. */

 Start. */

 Continue. */

 Stop. */

 Active sensing. */

 System reset. */

 MIDI time code quarter frame. */

 Song select. */

 Song position pointer. */

 Exclusive. */

 End of exclusive. */

 Undefined. */

 Undefined. */

 Undefined. */

 Undefined. */

 Note on. */

 Note off. */

 Polyphonic key pressure. */

 Control change and Mode change. */

 Pitch bend change. */

 Program change. */

 Channel pressure. */

 The beginning of exclusives.

 Transfer end code at next time.

 The end of exclusives.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * amdtp-ff.c - a part of driver for RME Fireface series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto

 SPDX-License-Identifier: GPL-2.0

 ff-protocol-former.c - a part of driver for RME Fireface series



 Copyright (c) 2019 Takashi Sakamoto



 Licensed under the terms of the GNU General Public License, version 2.

 For block write request. */

		/*

		 * Each quadlet is corresponding to data channels in a data

		 * blocks in reverse order. Precisely, quadlets for available

		 * data channels should be enabled. Here, I take second best

		 * to fetch PCM frames from all of data channels regardless of

		 * stf.

 One quadlet includes one byte.

 Wait till the format of tx packet is available.

 NOTE: this is a makeshift to start OHCI 1394 IR context in the

 channel. On the other hand, 'struct fw_iso_resources.allocated' is

 not true and it's not deallocated at stop.

 If starting isochronous communication immediately, change of STF has

 no effect. In this case, the communication runs based on former STF.

 Let's sleep for a bit.

 Controllers should allocate isochronous resources for rx stream.

 Set isochronous channel and the number of quadlets of rx packets.

 This should be done before the allocation of tx resources to avoid

 periodical noise.

 Fireface 800 doesn't allow drivers to register lower 4 bytes of destination

 address.

 A write transaction to clear registered higher 4 bytes of destination address

 has an effect to suppress asynchronous transaction from device.

 Fireface 400 manages isochronous channel number in 3 bit field. Therefore,

 we can allocate between 0 and 7 channel.

 Check whether the given value is supported or not.

 Set the number of data blocks transferred in a second.

 Keep resources for in-stream.

 Keep resources for out-stream.

 Set isochronous channel and the number of quadlets of received

 packets.

 Set isochronous channel and the number of quadlets of transmitted

 packet.

 TODO: investigate the purpose of this 0x80.

 Allow to transmit packets.

 For Fireface 400, lower 4 bytes of destination address is configured by bit

 flag in quadlet register (little endian) at 0x'0000'801'0051c. Drivers can

 select one of 4 options:



 bit flags: offset of destination address

  - 0x04000000: 0x'....'....'0000'0000

  - 0x08000000: 0x'....'....'0000'0080

  - 0x10000000: 0x'....'....'0000'0100

  - 0x20000000: 0x'....'....'0000'0180



 Drivers can suppress the device to transfer asynchronous transactions by

 using below 2 bits.

  - 0x01000000: suppress transmission

  - 0x02000000: suppress transmission



 Actually, the register is write-only and includes the other options such as

 input attenuation. This driver allocates destination address with '0000'0000

 in its lower offset and expects userspace application to configure the

 register for it.

 Message in first port. */

		/*

		 * This value may represent the index of this unit when the same

		 * units are on the same IEEE 1394 bus. This driver doesn't use

		 * it.

 Message in second port. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ff-transaction.c - a part of driver for RME Fireface series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto

 Transfer the message again, immediately. */

 Do it in next chance. */

 Set interval to next transaction. */

	/*

	 * In Linux FireWire core, when generation is updated with memory

	 * barrier, node id has already been updated. In this module, After

	 * this smp_rmb(), load/store instructions to memory are completed.

	 * Thus, both of generation and node id are available with recent

	 * values. This is a light-serialization solution to handle bus reset

	 * events on IEEE 1394 bus.

 Controllers are allowed to register this region. */

 Controllers are allowed to register higher 4 bytes of destination address to

 receive asynchronous transactions for MIDI messages, while the way to

 register lower 4 bytes of address is different depending on protocols. For

 details, please refer to comments in protocol implementations.



 This driver expects userspace applications to configure registers for the

 lower address because in most cases such registers has the other settings.

	/*

	 * Controllers are allowed to register its node ID and upper 2 byte of

	 * local address to listen asynchronous transactions.

	/*

	 * Allocate in Memory Space of IEC 13213, but lower 4 byte in LSB should

	 * be zero due to device specification.

 Release higher 4 bytes of address. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ff.c - a part of driver for RME Fireface series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto

 Block till all of ALSA character devices are released.

 Fireface 800 */

 Fireface 400 */

 Fireface UFX.

 Fireface UCX.

 Fireface 802.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ff-pcm.c - a part of driver for RME Fireface series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto

 When source of clock is not internal or any stream is reserved for

 transmission of PCM frames, the available sampling rate is limited

 at current one.

 The unit is configured at sampling frequency which packet

 streaming engine can't support.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ff-midi.c - a part of driver for RME Fireface series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto

 Do nothing. */

 Initialize internal status. */

 Do nothing. */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * ff-proc.c - a part of driver for RME Fireface series

 *

 * Copyright (c) 2015-2017 Takashi Sakamoto

	/*

	 * All nodes are automatically removed at snd_card_disconnect(),

	 * by following to link list.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * dice_transaction.c - a part of driver for Dice based devices

 *

 * Copyright (c) Clemens Ladisch

 * Copyright (c) 2014 Takashi Sakamoto

 node_id vs. generation */

 success */

 The address seems to be already registered. */

	/*

	 * Check that the sub address spaces exist and are located inside the

	 * private address space.  The minimum values are chosen so that all

	 * minimally required registers are included.

		/*

		 * Check that the implemented DICE driver specification major

		 * version number matches.

 Set up later. */

 Old firmware doesn't support these fields. */

 Allocation callback in address space over host controller */

 Register the address space */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * dice_pcm.c - a part of driver for DICE based devices

 *

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

 * Copyright (c) 2014 Takashi Sakamoto <o-takashi@sakamocchi.jp>

 When source of clock is not internal or any stream is reserved for

 transmission of PCM frames, the available sampling rate is limited

 at current one.

 For double_pcm_frame quirk.

 For double_pcm_frame quirk.

 SPDX-License-Identifier: GPL-2.0

/*

 * dice-mytek.c - a part of driver for DICE based devices

 *

 * Copyright (c) 2018 Melvin Vermeeren

 AES, TOSLINK, SPDIF, ADAT inputs on device */

 PCM 44.1-192, native DSD64/DSD128 to device */

/*

 * Mytek has a few other firewire-capable devices, though newer models appear

 * to lack the port more often than not. As I don't have access to any of them

 * they are missing here. An example is the Mytek 8x192 ADDA, which is DICE.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * dice_proc.c - a part of driver for Dice based devices

 *

 * Copyright (c) Clemens Ladisch

 * Copyright (c) 2014 Takashi Sakamoto

	/*

	 * All nodes are automatically removed at snd_card_disconnect(),

	 * by following to link list.

 SPDX-License-Identifier: GPL-2.0

/*

 * dice-tc_electronic.c - a part of driver for DICE based devices

 *

 * Copyright (c) 2018 Takashi Sakamoto

 SPDX-License-Identifier: GPL-2.0

/*

 * dice-alesis.c - a part of driver for DICE based devices

 *

 * Copyright (c) 2018 Takashi Sakamoto

 Tx0 = Analog + S/PDIF. */

 Tx1 = ADAT1. */

 Tx0 = Analog + S/PDIF. */

 Tx1 = ADAT1 + ADAT2 (available at low rate). */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * dice_midi.c - a part of driver for Dice based devices

 *

 * Copyright (c) 2014 Takashi Sakamoto

 create midi ports */

 SPDX-License-Identifier: GPL-2.0

 dice-presonus.c - a part of driver for DICE based devices



 Copyright (c) 2019 Takashi Sakamoto



 Licensed under the terms of the GNU General Public License, version 2.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * dice_hwdep.c - a part of driver for DICE based devices

 *

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

 * Copyright (c) 2014 Takashi Sakamoto <o-takashi@sakamocchi.jp>

 SPDX-License-Identifier: GPL-2.0

/*

 * dice-extension.c - a part of driver for DICE based devices

 *

 * Copyright (c) 2018 Takashi Sakamoto

 For TCD2210/2220, TCAT defines extension of application protocol. */

		/*

		 * Some models report stream formats at highest mode, however

		 * they don't support the mode. Check clock capabilities.

 Check two of them for offset have the same value or not. */

 Fallback to limited functionality.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * TC Applied Technologies Digital Interface Communications Engine driver

 *

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

 Actually ID reserved by IEEE.

	/*

	 * Check that GUID and unit directory are constructed according to DICE

	 * rules, i.e., that the specifier ID is the GUID's OUI, and that the

	 * GUID chip ID consists of the 8-bit category ID, the 10-bit product

	 * ID, and a 22-bit serial number.

 some very old firmwares don't tell about their clock support */

 this should be supported by any device */

 DICE strings are returned in "always-wrong" endianness */

 Below models are compliant to IEC 61883-1/6 and have no quirk at high sampling transfer

 frequency.

 * Avid M-Box 3 Pro

 * M-Audio Profire 610

 * M-Audio Profire 2626

 Block till all of ALSA character devices are released.

 The handler address register becomes initialized. */

 Avid M-Box 3 Pro. To match in probe function.

 M-Audio Profire 2626 has a different value in version field. */

 M-Audio Profire 610 has a different value in version field. */

 TC Electronic Konnekt 24D. */

 TC Electronic Konnekt 8. */

 TC Electronic Studio Konnekt 48. */

 TC Electronic Konnekt Live. */

 TC Electronic Desktop Konnekt 6. */

 TC Electronic Impact Twin. */

 TC Electronic Digital Konnekt x32. */

 Alesis iO14/iO26. */

 Alesis MasterControl.

 Mytek Stereo 192 DSD-DAC. */

 Solid State Logic, Duende Classic and Mini.

 NOTE: each field of GUID in config ROM is not compliant to standard

 DICE scheme.

 Presonus FireStudio.

 Lexicon I-ONYX FW810S.

 SPDX-License-Identifier: GPL-2.0

 dice-harman.c - a part of driver for DICE based devices



 Copyright (c) 2021 Takashi Sakamoto



 Licensed under the terms of the GNU General Public License, version 2.

 Lexicon I-ONYX FW810s supports sampling transfer frequency up to

 96.0 kHz, 12 PCM channels and 1 MIDI channel in its first tx stream

 , 10 PCM channels and 1 MIDI channel in its first rx stream for all

 of the frequencies.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * dice_stream.c - a part of driver for DICE based devices

 *

 * Copyright (c) Clemens Ladisch <clemens@ladisch.de>

 * Copyright (c) 2014 Takashi Sakamoto <o-takashi@sakamocchi.jp>

 mode 0 */

 mode 1 */

 mode 2 */

 Corresponding to each entry in snd_dice_rates. */

 At 176.4/192.0 kHz, Dice has a quirk to transfer two PCM frames in

 one data block of AMDTP packet. Thus sampling transfer frequency is

 a half of PCM sampling frequency, i.e. PCM frames at 192.0 kHz are

 transferred on AMDTP packets at 96 kHz. Two successive samples of a

 channel are stored consecutively in the packet. This quirk is called

 as 'Dual Wire'.

 For this quirk, blocking mode is required and PCM buffer size should

 be aligned to SYT_INTERVAL.

 These are important for developer of this driver.

 Check sampling transmission frequency.

 Just after owning the unit (GLOBAL_OWNER), the unit can

 return invalid stream formats. Selecting clock parameters

 have an effect for the unit to refine it.

 After changing sampling transfer frequency, the value of

 register can be changed.

/*

 * MEMO: After this function, there're two states of streams:

 *  - None streams are running.

 *  - All streams are running.

 Check error of packet streaming.

 Check required streams are running or not.

 Start both streams.

 MEMO: The device immediately starts packet transmission when enabled. Some

 devices are strictly to generate any discontinuity in the sequence of tx packet

 when they receives invalid sequence of presentation time in CIP header. The

 sequence replay for media clock recovery can suppress the behaviour.

/*

 * MEMO: After this function, there're two states of streams:

 *  - None streams are running.

 *  - All streams are running.

/*

 * This function should be called before starting streams or after stopping

 * streams.

	/*

	 * On a bus reset, the DICE firmware disables streaming and then goes

	 * off contemplating its own navel for hundreds of milliseconds before

	 * it can react to any of our attempts to reenable streaming.  This

	 * means that we lose synchronization anyway, so we force our streams

	 * to stop so that the application can restart them in an orderly

	 * manner.

 If extended protocol is available, detect detail spec. */

	/*

	 * Available stream format is restricted at current mode of sampling

	 * clock.

	/*

	 * Just after owning the unit (GLOBAL_OWNER), the unit can return

	 * invalid stream formats. Selecting clock parameters have an effect

	 * for the unit to refine it.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * fireworks_hwdep.c - a part of driver for Fireworks based devices

 *

 * Copyright (c) 2013-2014 Takashi Sakamoto

/*

 * This codes have five functionalities.

 *

 * 1.get information about firewire node

 * 2.get notification about starting/stopping stream

 * 3.lock/unlock streaming

 * 4.transmit command of EFW transaction

 * 5.receive response of EFW transaction

 *

 data type is SNDRV_FIREWIRE_EVENT_EFW_RESPONSE */

 write into buffer as many responses as possible */

	/*

	 * When another task reaches here during this task's access to user

	 * space, it picks up current position in buffer and can read the same

	 * series of responses.

 confirm enough space for this response */

 copy from ring buffer to user buffer */

	/*

	 * All of tasks can read from the buffer nearly simultaneously, but the

	 * last position for each task is different depending on the length of

	 * given buffer. Here, for simplicity, a position of buffer is set by

	 * the latest task. It's better for a listening application to allow one

	 * thread to read from the buffer. Unless, each task can read different

	 * sequence of responses depending on variation of buffer length.

 check seqnum is not for kernel-land */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * fireworks_proc.c - a part of driver for Fireworks based devices

 *

 * Copyright (c) 2009-2010 Clemens Ladisch

 * Copyright (c) 2013-2014 Takashi Sakamoto

/*

 * NOTE:

 *  dB = 20 * log10(linear / 0x01000000)

 *  -144.0 dB when linear is 0

	/*

	 * All nodes are automatically removed at snd_card_disconnect(),

	 * by following to link list.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * fireworks_pcm.c - a part of driver for Fireworks based devices

 *

 * Copyright (c) 2009-2010 Clemens Ladisch

 * Copyright (c) 2013-2014 Takashi Sakamoto

/*

 * NOTE:

 * Fireworks changes its AMDTP channels for PCM data according to its sampling

 * rate. There are three modes. Here _XX is either _rx or _tx.

 *  0:  32.0- 48.0 kHz then snd_efw_hwinfo.amdtp_XX_pcm_channels applied

 *  1:  88.2- 96.0 kHz then snd_efw_hwinfo.amdtp_XX_pcm_channels_2x applied

 *  2: 176.4-192.0 kHz then snd_efw_hwinfo.amdtp_XX_pcm_channels_4x applied

 *

 * The number of PCM channels for analog input and output are always fixed but

 * the number of PCM channels for digital input and output are differed.

 *

 * Additionally, according to "AudioFire Owner's Manual Version 2.2", in some

 * model, the number of PCM channels for digital input has more restriction

 * depending on which digital interface is selected.

 *  - S/PDIF coaxial and optical	: use input 1-2

 *  - ADAT optical at 32.0-48.0 kHz	: use input 1-8

 *  - ADAT optical at 88.2-96.0 kHz	: use input 1-4 (S/MUX format)

 *

 * The data in AMDTP channels for blank PCM channels are zero.

 multiplier mode 0 */

 multiplier mode 1 */

 multiplier mode 2 */

 limit rates */

 When source of clock is not internal or any stream is reserved for

 transmission of PCM frames, the available sampling rate is limited

 at current one.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * fireworks_midi.c - a part of driver for Fireworks based devices

 *

 * Copyright (c) 2009-2010 Clemens Ladisch

 * Copyright (c) 2013-2014 Takashi Sakamoto

 create midi ports */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * fireworks.c - a part of driver for Fireworks based devices

 *

 * Copyright (c) 2009-2010 Clemens Ladisch

 * Copyright (c) 2013-2014 Takashi Sakamoto

/*

 * Fireworks is a board module which Echo Audio produced. This module consists

 * of three chipsets:

 *  - Communication chipset for IEEE1394 PHY/Link and IEC 61883-1/6

 *  - DSP or/and FPGA for signal processing

 *  - Flash Memory to store firmwares

 This is applied for AudioFire8 (until 2009 July) */

 AudioFire9 is applied for AudioFire8(since 2009 July) and AudioFirePre8 */

 unknown as product */

 for Robot Interface Pack of Dark Fire, Dusk Tiger, Les Paul Standard 2010 */

 unknown as product */

 part of hardware capability flags */

 firmware version for communication chipset */

 the number of MIDI ports, not of MIDI conformant data channels */

 Hardware metering. */

 AudioFire8 (since 2009) and AudioFirePre8 */

 These models uses the same firmware. */

 check registered cards.

 prepare response buffer.

 Block till all of ALSA character devices are released.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * fireworks_transaction.c - a part of driver for Fireworks based devices

 *

 * Copyright (c) 2013-2014 Takashi Sakamoto

/*

 * Fireworks have its own transaction. The transaction can be delivered by AV/C

 * Vendor Specific command frame or usual asynchronous transaction. At least,

 * Windows driver and firmware version 5.5 or later don't use AV/C command.

 *

 * Transaction substance:

 *  At first, 6 data exist. Following to the data, parameters for each command

 *  exist. All of the parameters are 32 bit aligned to big endian.

 *   data[0]:	Length of transaction substance

 *   data[1]:	Transaction version

 *   data[2]:	Sequence number. This is incremented by the device

 *   data[3]:	Transaction category

 *   data[4]:	Transaction command

 *   data[5]:	Return value in response.

 *   data[6-]:	Parameters

 *

 * Transaction address:

 *  command:	0xecc000000000

 *  response:	0xecc080000000 (default)

 *

 * I note that the address for response can be changed by command. But this

 * module uses the default address.

 confirm enough space for this response */

 copy to ring buffer */

 for hwdep */

 node id vs. generation */

 node_id vs. generation */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * fireworks_command.c - a part of driver for Fireworks based devices

 *

 * Copyright (c) 2013-2014 Takashi Sakamoto

/*

 * This driver uses transaction version 1 or later to use extended hardware

 * information. Then too old devices are not available.

 *

 * Each commands are not required to have continuous sequence numbers. This

 * number is just used to match command and response.

 *

 * This module support a part of commands. Please see FFADO if you want to see

 * whole commands. But there are some commands which FFADO don't implement.

 *

 * Fireworks also supports AV/C general commands and AV/C Stream Format

 * Information commands. But this module don't use them.

 for clock source and sampling rate */

 command categories */

 hardware info category commands */

 hardware control category commands */

 return values in response */

 calculate buffer size*/

 keep buffer */

 to keep consistency of sequence number */

 fill transaction header fields */

 fill transaction command parameters */

 check transaction header fields */

 fill transaction response parameters */

/*

 * The address in host system for transaction response is changable when the

 * device supports. struct hwinfo.flags includes its flag. The default is

 * MEMORY_SPACE_EFW_RESPONSE.

/*

 * This is for timestamp processing. In Windows mode, all 32bit fields of second

 * CIP header in AMDTP transmit packet is used for 'presentation timestamp'. In

 * 'no data' packet the value of this field is 0x90ffffff.

 ensure terminated */

 give UINT_MAX if set nothing */

 check arguments */

 get current status */

 no need */

 set params */

	/*

	 * With firmware version 5.8, just after changing clock state, these

	 * parameters are not immediately retrieved by get command. In my

	 * trial, there needs to be 100msec to get changed parameters.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * fireworks_stream.c - a part of driver for Fireworks based devices

 *

 * Copyright (c) 2013-2014 Takashi Sakamoto

 Fireworks transmits NODATA packets with TAG0.

 Fireworks has its own meaning for dbc.

 Fireworks reset dbc at bus reset.

 But Recent firmwares starts packets with non-zero dbc.

 Driver version 5.7.6 installs firmware version 5.7.3.

 AudioFire9 always reports wrong dbs. Onyx 1200F with the latest firmware (v4.6.0)

 also report wrong dbs at 88.2 kHz or greater.

 Firmware version 5.5 reports fixed interval for dbc.

 Establish connection via CMP.

 Start amdtp stream.

 This function should be called before starting the stream or after stopping

 the streams.

 set IEC61883 compliant mode (actually not fully compliant...).

 Considering JACK/FFADO streaming:

 TODO: This can be removed hwdep functionality becomes popular.

 stop streams if rate is different.

 Need no substreams.

 Audiofire 2/4 skip an isochronous cycle several thousands after starting

 packet transmission.

 NOTE: The device ignores presentation time expressed by the value of syt field

 of CIP header in received packets. The sequence of the number of data blocks per

 packet is important for media clock recovery.

 user land lock this */

 this is the first time */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Driver for AT73C213 16-bit stereo DAC connected to Atmel SSC

 *

 * Copyright (C) 2006-2007 Atmel Norway

#define DEBUG*/

 Hardware limit? */

 Hardware limit. */

 Initial (hardware reset) AT73C213 register values. */

 00 - CTRL    */

 01 - LLIG    */

 02 - RLIG    */

 03 - LPMG    */

 04 - RPMG    */

 05 - LLOG    */

 06 - RLOG    */

 07 - OLC     */

 08 - MC      */

 09 - CSFC    */

 0A - MISC    */

 0B -         */

 0C - PRECH   */

 0D - AUXG    */

 0E -         */

 0F -         */

 10 - RST     */

 11 - PA_CTRL */

 Image of the SPI registers in AT73C213. */

 Protect SSC registers against concurrent access. */

 Protect mixer registers against concurrent access. */

 Replaced by chip->bitrate later. */

 Replaced by chip->bitrate later. */

/*

 * Calculate and set bitrate and divisions.

	/*

	 * We connect two clocks here, picking divisors so the I2S clocks

	 * out data at the same rate the DAC clocks it in ... and as close

	 * as practical to the desired target rate.

	 *

	 * The DAC master clock (MCLK) is programmable, and is either 256

	 * or (not here) 384 times the I2S output clock (BCLK).

 SSC clock / (bitrate * stereo * 16-bit). */

 ssc_div must be even. */

 Search for a possible bitrate. */

 SSC clock / (ssc divider * 16-bit * stereo). */

 256 / (2 * 16) = 8 */

 Ignore difference smaller than 256 Hz. */

 Not able to find a valid bitrate. */

 Set divider in SSC device. */

 SSC clock / (ssc divider * 16-bit * stereo). */

 ensure buffer_size is a multiple of period_size */

/*

 * Mixer functions.

 When inverted will give values 0x10001 => 0. */

 When inverted will give values 0x10001 => 0. */

/*

 * Device functions

	/*

	 * Continuous clock output.

	 * Starts on falling TF.

	 * Delay 1 cycle (1 bit).

	 * Periode is 16 bit (16 - 1).

	/*

	 * Data length is 16 bit (16 - 1).

	 * Transmit MSB first.

	 * Transmit 2 words each transfer.

	 * Frame sync length is 16 bit (16 - 1).

	 * Frame starts on negative pulse.

 Enable DAC master clock. */

 Initialize at73c213 on SPI bus. */

 Precharge everything. */

 Stop precharging PA. */

 Stop precharging DAC, turn on master power. */

 Turn on DAC. */

 Mute sound. */

 Enable I2S device, i.e. clock output. */

 Allocate "card" using some unused identifiers. */

 Stop playback. */

 Mute sound. */

 Turn off PA. */

 Turn off external DAC. */

 Turn off master power. */

 Stop DAC master clock. */

 SPDX-License-Identifier: GPL-2.0+



 soc-util.c  --  ALSA SoC Audio Layer utility functions



 Copyright 2009 Wolfson Microelectronics PLC.



 Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

         Liam Girdwood <lrg@slimlogic.co.uk>

 Random values to keep userspace happy when checking constraints */

	/*

	 * If there are other components associated with rtd, we shouldn't

	 * override their hwparams

 BE's dont need dummy params */

/*

 * Select these from Sound Card Manually

 *	SND_SOC_POSSIBLE_DAIFMT_CBP_CFP

 *	SND_SOC_POSSIBLE_DAIFMT_CBP_CFC

 *	SND_SOC_POSSIBLE_DAIFMT_CBC_CFP

 *	SND_SOC_POSSIBLE_DAIFMT_CBC_CFC

/*

 * The dummy CODEC is only meant to be used in situations where there is no

 * actual hardware.

 *

 * If there is actual hardware even if it does not have a control bus

 * the hardware will still have constraints like supported samplerates, etc.

 * which should be modelled. And the data flow graph also should be modelled

 * using DAPM.

 SPDX-License-Identifier: GPL-2.0



 soc-dai.c



 Copyright (C) 2019 Renesas Electronics Corp.

 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>



 Positive, Zero values are not errors */

 Negative values might be errors */

/*

 * We might want to check substream by using list.

 * In such case, we can update these macros.

/**

 * snd_soc_dai_set_sysclk - configure DAI system or master clock.

 * @dai: DAI

 * @clk_id: DAI specific clock ID

 * @freq: new clock frequency in Hz

 * @dir: new clock direction - input/output.

 *

 * Configures the DAI master (MCLK) or system (SYSCLK) clocking.

/**

 * snd_soc_dai_set_clkdiv - configure DAI clock dividers.

 * @dai: DAI

 * @div_id: DAI specific clock divider ID

 * @div: new clock divisor.

 *

 * Configures the clock dividers. This is used to derive the best DAI bit and

 * frame clocks from the system or master clock. It's best to set the DAI bit

 * and frame clocks as low as possible to save system power.

/**

 * snd_soc_dai_set_pll - configure DAI PLL.

 * @dai: DAI

 * @pll_id: DAI specific PLL ID

 * @source: DAI specific source for the PLL

 * @freq_in: PLL input clock frequency in Hz

 * @freq_out: requested PLL output clock frequency in Hz

 *

 * Configures and enables PLL to generate output clock based on input clock.

/**

 * snd_soc_dai_set_bclk_ratio - configure BCLK to sample rate ratio.

 * @dai: DAI

 * @ratio: Ratio of BCLK to Sample rate.

 *

 * Configures the DAI for a preset BCLK to sample rate ratio.

	/*

	 * return max num if *ALL* DAIs have .auto_selectable_formats

/**

 * snd_soc_dai_get_fmt - get supported audio format.

 * @dai: DAI

 * @priority: priority level of supported audio format.

 *

 * This should return only formats implemented with high

 * quality by the DAI so that the core can configure a

 * format which will work well with other devices.

 * For example devices which don't support both edges of the

 * LRCLK signal in I2S style formats should only list DSP

 * modes.  This will mean that sometimes fewer formats

 * are reported here than are supported by set_fmt().

	/*

	 * Collect auto_selectable_formats until priority

	 *

	 * ex)

	 *	auto_selectable_formats[] = { A, B, C };

	 *	(A, B, C = SND_SOC_POSSIBLE_DAIFMT_xxx)

	 *

	 * priority = 1 :	A

	 * priority = 2 :	A | B

	 * priority = 3 :	A | B | C

	 * priority = 4 :	A | B | C

	 * ...

/**

 * snd_soc_dai_set_fmt - configure DAI hardware audio format.

 * @dai: DAI

 * @fmt: SND_SOC_DAIFMT_* format value.

 *

 * Configures the DAI hardware format and clocking.

/**

 * snd_soc_xlate_tdm_slot_mask - generate tx/rx slot mask.

 * @slots: Number of slots in use.

 * @tx_mask: bitmask representing active TX slots.

 * @rx_mask: bitmask representing active RX slots.

 *

 * Generates the TDM tx and rx slot default masks for DAI.

/**

 * snd_soc_dai_set_tdm_slot() - Configures a DAI for TDM operation

 * @dai: The DAI to configure

 * @tx_mask: bitmask representing active TX slots.

 * @rx_mask: bitmask representing active RX slots.

 * @slots: Number of slots in use.

 * @slot_width: Width in bits for each slot.

 *

 * This function configures the specified DAI for TDM operation. @slot contains

 * the total number of slots of the TDM stream and @slot_with the width of each

 * slot in bit clock cycles. @tx_mask and @rx_mask are bitmasks specifying the

 * active slots of the TDM stream for the specified DAI, i.e. which slots the

 * DAI should write to or read from. If a bit is set the corresponding slot is

 * active, if a bit is cleared the corresponding slot is inactive. Bit 0 maps to

 * the first slot, bit 1 to the second slot and so on. The first active slot

 * maps to the first channel of the DAI, the second active slot to the second

 * channel and so on.

 *

 * TDM mode can be disabled by passing 0 for @slots. In this case @tx_mask,

 * @rx_mask and @slot_width will be ignored.

 *

 * Returns 0 on success, a negative error code otherwise.

/**

 * snd_soc_dai_set_channel_map - configure DAI audio channel map

 * @dai: DAI

 * @tx_num: how many TX channels

 * @tx_slot: pointer to an array which imply the TX slot number channel

 *           0~num-1 uses

 * @rx_num: how many RX channels

 * @rx_slot: pointer to an array which imply the RX slot number channel

 *           0~num-1 uses

 *

 * configure the relationship between channel number and TDM slot number.

/**

 * snd_soc_dai_get_channel_map - Get DAI audio channel map

 * @dai: DAI

 * @tx_num: how many TX channels

 * @tx_slot: pointer to an array which imply the TX slot number channel

 *           0~num-1 uses

 * @rx_num: how many RX channels

 * @rx_slot: pointer to an array which imply the RX slot number channel

 *           0~num-1 uses

/**

 * snd_soc_dai_set_tristate - configure DAI system or master clock.

 * @dai: DAI

 * @tristate: tristate enable

 *

 * Tristates the DAI so that others can use it.

/**

 * snd_soc_dai_digital_mute - configure DAI system or master clock.

 * @dai: DAI

 * @mute: mute enable

 * @direction: stream to mute

 *

 * Mutes the DAI DAC.

	/*

	 * ignore if direction was CAPTURE

	 * and it had .no_capture_mute flag

 perform any topology hw_params fixups before DAI  */

 mark substream if succeeded */

 remove marked substream */

 mark substream if succeeded */

 remove marked substream */

/*

 * snd_soc_dai_stream_valid() - check if a DAI supports the given stream

 *

 * Returns true if the DAI supports the indicated stream type.

 If the codec specifies any channels at all, it supports the stream */

/*

 * snd_soc_dai_link_set_capabilities() - set dai_link properties based on its DAIs

 see snd_soc_dai_stream_active() */

 see snd_soc_component_active() */

 use last error */

 use last ret */

 mark cstream if succeeded */

 remove marked cstream */

 SPDX-License-Identifier: GPL-2.0+



 soc-devres.c  --  ALSA SoC Audio Layer devres functions



 Copyright (C) 2013 Linaro Ltd

/**

 * devm_snd_soc_register_dai - resource-managed dai registration

 * @dev: Device used to manage component

 * @component: The component the DAIs are registered for

 * @dai_drv: DAI driver to use for the DAI

 * @legacy_dai_naming: if %true, use legacy single-name format;

 *	if %false, use multiple-name format;

/**

 * devm_snd_soc_register_component - resource managed component registration

 * @dev: Device used to manage component

 * @cmpnt_drv: Component driver

 * @dai_drv: DAI driver

 * @num_dai: Number of DAIs to register

 *

 * Register a component with automatic unregistration when the device is

 * unregistered.

/**

 * devm_snd_soc_register_card - resource managed card registration

 * @dev: Device used to manage card

 * @card: Card to register

 *

 * Register a card with automatic unregistration when the device is

 * unregistered.

/**

 * devm_snd_dmaengine_pcm_register - resource managed dmaengine PCM registration

 * @dev: The parent device for the PCM device

 * @config: Platform specific PCM configuration

 * @flags: Platform specific quirks

 *

 * Register a dmaengine based PCM device with automatic unregistration when the

 * device is unregistered.

 SPDX-License-Identifier: GPL-2.0+



  Copyright (C) 2013, Analog Devices Inc.

	Author: Lars-Peter Clausen <lars@metafoo.de>

/*

 * The platforms dmaengine driver does not support reporting the amount of

 * bytes that are still left to transfer.

/**

 * snd_dmaengine_pcm_prepare_slave_config() - Generic prepare_slave_config callback

 * @substream: PCM substream

 * @params: hw_params

 * @slave_config: DMA slave config to prepare

 *

 * This function can be used as a generic prepare_slave_config callback for

 * platforms which make use of the snd_dmaengine_dai_dma_data struct for their

 * DAI DMA data. Internally the function will first call

 * snd_hwparams_to_dma_slave_config to fill in the slave config based on the

 * hw_params, followed by snd_dmaengine_set_config_from_dai_data to fill in the

 * remaining fields based on the DAI DMA data.

	/**

	 * FIXME: Remove the return value check to align with the code

	 * before adding snd_dmaengine_pcm_refine_runtime_hwparams

	 * function.

		/*

		 * If this warning is seen, it probably means that your Linux

		 * device structure does not match your HW device structure.

		 * It would be best to refactor the Linux device structure to

		 * correctly match the HW structure.

			/*

			 * Only report probe deferral errors, channels

			 * might not be present for devices that

			 * support only TX or only RX.

/**

 * snd_dmaengine_pcm_register - Register a dmaengine based PCM device

 * @dev: The parent device for the PCM device

 * @config: Platform specific PCM configuration

 * @flags: Platform specific quirks

/**

 * snd_dmaengine_pcm_unregister - Removes a dmaengine based PCM device

 * @dev: Parent device the PCM was register with

 *

 * Removes a dmaengine based PCM device previously registered with

 * snd_dmaengine_pcm_register.

 SPDX-License-Identifier: GPL-2.0



 soc-apci.c - support for ACPI enumeration.



 Copyright (c) 2013-15, Intel Corporation.

 not full match, ignore */

 SPDX-License-Identifier: GPL-2.0



 soc-card.c



 Copyright (C) 2019 Renesas Electronics Corp.

 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>



/**

 * snd_soc_card_jack_new - Create a new jack

 * @card:  ASoC card

 * @id:    an identifying string for this jack

 * @type:  a bitmask of enum snd_jack_type values that can be detected by

 *         this jack

 * @jack:  structure to use for the jack

 * @pins:  Array of jack pins to be added to the jack or NULL

 * @num_pins: Number of elements in the @pins array

 *

 * Creates a new jack object.

 *

 * Returns zero if successful, or a negative error code on failure.

 * On success jack will be initialised.

		/*

		 * It has "card->probe" and "card->late_probe" callbacks.

		 * So, set "probed" flag here, because it needs to care

		 * about "late_probe".

		 *

		 * see

		 *	snd_soc_bind_card()

		 *	snd_soc_card_late_probe()

	/*

	 * It has "card->probe" and "card->late_probe" callbacks,

	 * and "late_probe" callback is called after "probe".

	 * This means, we can set "card->probed" flag afer "late_probe"

	 * for all cases.

	 *

	 * see

	 *	snd_soc_bind_card()

	 *	snd_soc_card_probe()

 SPDX-License-Identifier: GPL-2.0+



 soc-topology.c  --  ALSA SoC Topology



 Copyright (C) 2012 Texas Instruments Inc.

 Copyright (C) 2015 Intel Corporation.



 Authors: Liam Girdwood <liam.r.girdwood@linux.intel.com>

		K, Mythri P <mythri.p.k@intel.com>

		Prusty, Subhransu S <subhransu.s.prusty@intel.com>

		B, Jayachandran <jayachandran.b@intel.com>

		Abdullah, Omair M <omair.m.abdullah@intel.com>

		Jin, Yao <yao.jin@intel.com>

		Lin, Mengdong <mengdong.lin@intel.com>



  Add support to read audio firmware topology alongside firmware text. The

  topology data can contain kcontrols, DAPM graphs, widgets, DAIs, DAI links,

  equalizers, firmware, coefficients etc.



  This file only manages the core ALSA and ASoC components, all other bespoke

  firmware topology data is passed to component drivers for bespoke handling.

 ASoC in reverse */

/*

 * We make several passes over the data (since it wont necessarily be ordered)

 * and process objects in the following order. This guarantees the component

 * drivers will be ready with any vendor data before the mixers and DAPM objects

 * are loaded (that may make use of the vendor data).

 topology context */

 runtime FW parsing */

 read postion */

 header position */

 pass number */

 component caller */

 current block index */

 vendor specific kcontrol operations */

 vendor specific bytes ext handlers, for TLV bytes controls */

 optional fw loading callbacks to component drivers */

 check we dont overflow the data for this control chunk */

	/* check there is enough room in chunk for control.

 mapping of Kcontrol types and associated operations. */

 mapping of widget types from UAPI IDs to kernel IDs */

 pass vendor data to component driver for processing */

/* optionally pass new dynamic widget to component driver. This is mainly for

/* optionally pass new dynamic widget to component driver. This is mainly for

 pass DAI configurations to component driver for extra initialization */

 pass link configurations to component driver for extra initialization */

 tell the component driver that all firmware has been loaded in this request */

 add a dynamic kcontrol */

 add a dynamic kcontrol for component driver */

 remove a mixer kcontrol */

 remove an enum kcontrol */

 remove a byte kcontrol */

 remove a route */

 remove a widget and it's kcontrols - routes must be removed first */

 widget w is freed by soc-dapm.c */

 remove DAI configurations */

 remove link configurations */

 unload dai link */

	/*

	 * We don't free the link here as what remove_link() do since BE

	 * links are not allocated by topology.

	 * We however need to reset the dobj type to its initial values

 bind a kcontrol to it's IO handlers */

		/* TLV bytes controls need standard kcontrol info handler,

		 * TLV callback and extended put/get handlers.

		/*

		 * When a topology-based implementation abuses the

		 * control interface and uses bytes_ext controls of

		 * more than 512 bytes, we need to disable the size

		 * checks, otherwise accesses to such controls will

		 * return an -EINVAL error and prevent the card from

		 * being configured.

 try and map vendor specific kcontrol handlers first */

 vendor specific handlers found ? */

 none found so try standard kcontrol handlers */

 standard handlers found ? */

 nothing to bind */

 bind a widgets to it's evnt handlers */

 found - so assign event */

 not found */

 optionally pass new dynamic kcontrol to component driver. */

 TODO: add support for other TLV types */

 validate kcontrol */

 map io handlers */

 pass control to driver for optional further init */

 register control here */

 validate kcontrol */

 we only support FL/FR channel mapping atm */

 map io handlers */

 create any TLV data */

 pass control to driver for optional further init */

 register control here */

	/*

	 * Following "if" checks if we have at most SND_SOC_TPLG_NUM_TEXTS

	 * values instead of using ARRAY_SIZE(ec->values) due to the fact that

	 * it is oversized for its purpose. Additionally it is done so because

	 * it is defined in UAPI header where it can't be easily changed.

 convert from little-endian */

 validate kcontrol */

 map io handlers */

 pass control to driver for optional further init */

 register control here */

 optionally pass new dynamic kcontrol to component driver. */

 allocate memory for pointer to array of dapm routes */

	/*

	 * allocate memory for each dapm route in the array.

	 * This needs to be done individually so that

	 * each route can be freed when it is removed in remove_route().

 validate routes */

 set to NULL atm for tplg users */

 add route dobj to dobj_list */

			/*

			 * this route was added to the list, it will

			 * be freed in remove_route() so increment the

			 * counter to skip it in the error handling

			 * below.

 add route, but keep going if some fail */

	/*

	 * free pointer to array of dapm routes as this is no longer needed.

	 * The memory allocated for each dapm route will be freed

	 * when it is removed in remove_route().

 validate kcontrol */

 we only support FL/FR channel mapping atm */

 map io handlers */

 create any TLV data */

 pass control to driver for optional further init */

 validate kcontrol */

 we only support FL/FR channel mapping atm */

 map io handlers */

 pass control to driver for optional further init */

 validate kcontrol */

 map standard io handlers and check for external handlers */

 pass control to driver for optional further init */

 map user to kernel widget ID */

 strings are allocated here, but used and freed by the widget */

 volume mixer */

 enumerated mixer */

 bytes control */

	/* card dapm mutex is held by the core if we are loading topology

		/*

		 * check if widget itself fits within topology file

		 * use sizeof instead of widget->size, as we can't be sure

		 * it is set properly yet (file may end before it is present)

 check if widget has proper size */

 check if widget private data fits within topology file */

	/* Card might not have been registered at this point.

	 * If so, just return success.

 pass control to component driver for optional further init */

 register the DAI to the component */

 Create the DAI widgets here */

 create the FE DAI link */

 link + cpu + codec + platform */

 enable DPCM */

 pass control to component driver for optional further init */

 create a FE DAI and DAI link from the PCM object */

 copy stream caps from the old version 4 of source */

/**

 * pcm_new_ver - Create the new version of PCM from the old version.

 * @tplg: topology context

 * @src: older version of pcm as a source

 * @pcm: latest version of pcm created from the source

 *

 * Support from version 4. User should free the returned pcm manually.

 size of latest abi version */

 check the element size and count */

		/* check ABI version by size, create a new version of pcm

		 * if abi not match.

 create the FE DAIs and DAI links */

		/* offset by version-specific struct size and

		 * real priv data size

 free the duplicated one */

/**

 * set_link_hw_format - Set the HW audio format of the physical DAI link.

 * @link: &snd_soc_dai_link which should be updated

 * @cfg: physical link configs.

 *

 * Topology context contains a list of supported HW formats (configs) and

 * a default format ID for the physical link. This function will use this

 * default ID to choose the HW format to set the link's DAI format for init.

 clock gating */

 ignore the value */

 clock signal polarity */

 clock masters */

/**

 * link_new_ver - Create a new physical link config from the old

 * version of source.

 * @tplg: topology context

 * @src: old version of phyical link config as a source

 * @link: latest version of physical link config created from the source

 *

 * Support from version 4. User need free the returned link config manually.

/**

 * snd_soc_find_dai_link - Find a DAI link

 *

 * @card: soc card

 * @id: DAI link ID to match

 * @name: DAI link name to match, optional

 * @stream_name: DAI link stream name to match, optional

 *

 * This function will search all existing DAI links of the soc card to

 * find the link of the same ID. Since DAI links may not have their

 * unique ID, so name and stream name should also match if being

 * specified.

 *

 * Return: pointer of DAI link, or NULL if not found.

 Find and configure an existing physical DAI link */

 hw format */

 flags */

 pass control to component driver for optional further init */

 for unloading it in snd_soc_tplg_component_remove */

 Load physical link config elements from the topology context */

 check the element size and count */

 config physical DAI links */

		/* offset by version-specific struct size and

		 * real priv data size

 free the duplicated one */

/**

 * soc_tplg_dai_config - Find and configure an existing physical DAI.

 * @tplg: topology context

 * @d: physical DAI configs.

 *

 * The physical dai should already be registered by the platform driver.

 * The platform driver should specify the DAI name and ID for matching.

 pass control to component driver for optional further init */

 load physical DAI elements */

 config the existing BE DAIs */

/**

 * manifest_new_ver - Create a new version of manifest from the old version

 * of source.

 * @tplg: topology context

 * @src: old version of manifest as a source

 * @manifest: latest version of manifest created from the source

 *

 * Support from version 4. Users need free the returned manifest manually.

 size of latest abi version */

 check ABI version by size, create a new manifest if abi not match */

 pass control to component driver for optional further init */

 free the duplicated one */

 validate header magic, size and type */

 big endian firmware objects not supported atm */

 Support ABI from version 4 */

 check header type and call appropriate handler */

 physical link configurations */

 bespoke vendor data object */

 process the topology file headers */

 process the header types from start to end */

 make sure header is valid before loading */

 load the header object */

 goto next header */

 next data type pass */

 signal DAPM we are complete */

 load audio component topology from "firmware" file */

	/*

	 * check if we have sane parameters:

	 * comp - needs to exist to keep and reference data while parsing

	 * comp->card - used for setting card related parameters

	 * comp->card->dev - used for resource management and prints

	 * fw - we need it, as it is the very thing we parse

 setup parsing context */

 free the created components if fail to load topology */

 remove dynamic controls from the component driver */

 process the header types from end to start */

 remove mixer controls */

				/*

				 * call link_unload ops if extra

				 * deinitialization is needed.

 let caller know if FW can be freed when no objects are left */

 SPDX-License-Identifier: GPL-2.0+



 soc-core.c  --  ALSA SoC Audio Layer



 Copyright 2005 Wolfson Microelectronics PLC.

 Copyright 2005 Openedhand Ltd.

 Copyright (C) 2010 Slimlogic Ltd.

 Copyright (C) 2010 Texas Instruments Inc.



 Author: Liam Girdwood <lrg@slimlogic.co.uk>

         with code, comments and ideas from :-

         Richard Purdie <richard@openedhand.com>



  TODO:

   o Add hw rules to enforce rates, etc.

   o More testing with other codecs/machines.

   o Add more codecs and platforms to ensure good API coverage.

   o Support TDM on PCM and I2S

/*

 * This is used if driver don't need to have CPU/Codec/Platform

 * dai_link. see soc.h

/*

 * This is a timeout to do a DAPM powerdown after a stream is closed().

 * It can be used to eliminate pops between different playback streams, e.g.

 * between two audio tracks.

 always visible */

 enabled only with codec */

 already connected */

 see for_each_rtd_components */

	/*

	 * NOTE

	 *

	 * snd_soc_rtdcom_lookup() will find component from rtd by using

	 * specified driver name.

	 * But, if many components which have same driver name are connected

	 * to 1 rtd, this function will return 1st found component.

/*

 * Power down the audio subsystem pmdown_time msecs after close is called.

 * This is to ensure there are no pops or clicks in between any music tracks

 * due to DAPM power cycling.

 are we waiting on this codec DAI stream */

 "dev" means "rtd->dev" */

	/*

	 * we don't need to call kfree() for rtd->dev

	 * see

	 *	soc_release_rtd_dev()

	 *

	 * We don't need rtd->dev NULL check, because

	 * it is alloced *before* rtd.

	 * see

	 *	soc_new_pcm_runtime()

	 *

	 * We don't need to mind freeing for rtd,

	 * because it was created from dev (= rtd->dev)

	 * see

	 *	soc_new_pcm_runtime()

	 *

	 *		rtd = devm_kzalloc(dev, ...);

	 *		rtd->dev = dev

	/*

	 * for rtd->dev

 soc_release_rtd_dev */

	/*

	 * for rtd

	/*

	 * for rtd->dais

	/*

	 * dais = [][][][][][][][][][][][][][][][][][]

	 *	  ^cpu_dais         ^codec_dais

	 *	  |--- num_cpus ---|--- num_codecs --|

	 * see

	 *	asoc_rtd_to_cpu()

	 *	asoc_rtd_to_codec()

 see for_each_card_rtds */

 powers down audio subsystem for suspend */

 If the card is not initialized yet there is nothing to do */

	/*

	 * Due to the resume being scheduled into a workqueue we could

	 * suspend before that's finished - wait for it to complete.

 we're going to block userspace touching us until resume completes */

 mute any active DACs */

 suspend all pcms */

 close any waiting streams */

 Recheck all endpoints too, their state is affected by suspend */

 suspend all COMPONENTs */

			/*

			 * ignore if component was already suspended

			/*

			 * If there are paths active then the COMPONENT will be

			 * held with bias _ON and should not be suspended.

				/*

				 * If the COMPONENT is capable of idle

				 * bias off then being in STANDBY

				 * means it's doing something,

				 * otherwise fall through.

 deactivate pins to sleep state */

/*

 * deferred resume work, so resume can complete before we finished

 * setting our codec back up, which can be very slow on I2C

	/*

	 * our power state is still SNDRV_CTL_POWER_D3hot from suspend time,

	 * so userspace apps are blocked from touching us

 Bring us up into D2 so that DAPM starts enabling things */

 unmute any active DACs */

 Recheck all endpoints too, their state is affected by suspend */

 userspace can access us now we are back as we were before */

 powers up audio subsystem after a suspend */

 If the card is not initialized yet there is nothing to do */

 activate pins from sleep state */

 deferred resume work */

	/*

	 * NOTE

	 *

	 * It returns *1st* found component, but some driver

	 * has few components by same of_node/name

	 * ex)

	 *	CPU component and generic DMAEngine component

/**

 * snd_soc_find_dai - Find a registered DAI

 *

 * @dlc: name of the DAI or the DAI driver and optional component info to match

 *

 * This function will search all registered components and their DAIs to

 * find the DAI of the same name. The component's of_node and name

 * should also match if being specified.

 *

 * Return: pointer of DAI, or NULL if not found.

 Find CPU DAI from registered DAIs */

		/*

		 * Codec must be specified by 1 of name or OF node,

		 * not both or neither.

 Codec DAI name must be specified */

		/*

		 * Defer card registration if codec component is not added to

		 * component list.

		/*

		 * Platform may be specified by either name or OF node, but it

		 * can be left unspecified, then no components will be inserted

		 * in the rtdcom list

		/*

		 * Defer card registration if platform component is not added to

		 * component list.

		/*

		 * CPU device may be specified by either name or OF node, but

		 * can be left unspecified, and will be matched based on DAI

		 * name alone..

		/*

		 * Defer card registration if cpu dai component is not added to

		 * component list.

		/*

		 * At least one of CPU DAI name or CPU device name/node must be

		 * specified

/**

 * snd_soc_remove_pcm_runtime - Remove a pcm_runtime from card

 * @card: The ASoC card to which the pcm_runtime has

 * @rtd: The pcm_runtime to remove

 *

 * This function removes a pcm_runtime from the ASoC card.

 release machine specific resources */

	/*

	 * Notify the machine driver for extra destruction

/**

 * snd_soc_add_pcm_runtime - Add a pcm_runtime dynamically via dai_link

 * @card: The ASoC card to which the pcm_runtime is added

 * @dai_link: The DAI link to find pcm_runtime

 *

 * This function adds a pcm_runtime ASoC card by using dai_link.

 *

 * Note: Topology can use this API to add pcm_runtime when probing the

 * topology component. And machine drivers can still define static

 * DAI links in dai_link array.

	/*

	 * Notify the machine driver for extra initialization

 Find CODEC from registered CODECs */

 Find PLATFORM from registered PLATFORMs */

	/*

	 * Get selectable format from each DAIs.

	 *

	 ****************************

	 *            NOTE

	 * Using .auto_selectable_formats is not mandatory,

	 * we can select format manually from Sound Card.

	 * When use it, driver should list well tested format only.

	 ****************************

	 *

	 * ex)

	 *	auto_selectable_formats (= SND_SOC_POSSIBLE_xxx)

	 *		 (A)	 (B)	 (C)

	 *	DAI0_: { 0x000F, 0x00F0, 0x0F00 };

	 *	DAI1 : { 0xF000, 0x0F00 };

	 *		 (X)	 (Y)

	 *

	 * "until" will be 3 in this case (MAX array size from DAI0 and DAI1)

	 * Here is dev_dbg() message and comments

	 *

	 * priority = 1

	 * DAI0: (pri, fmt) = (1, 000000000000000F) // 1st check (A) DAI1 is not selected

	 * DAI1: (pri, fmt) = (0, 0000000000000000) //               Necessary Waste

	 * DAI0: (pri, fmt) = (1, 000000000000000F) // 2nd check (A)

	 * DAI1: (pri, fmt) = (1, 000000000000F000) //           (X)

	 * priority = 2

	 * DAI0: (pri, fmt) = (2, 00000000000000FF) // 3rd check (A) + (B)

	 * DAI1: (pri, fmt) = (1, 000000000000F000) //           (X)

	 * DAI0: (pri, fmt) = (2, 00000000000000FF) // 4th check (A) + (B)

	 * DAI1: (pri, fmt) = (2, 000000000000FF00) //           (X) + (Y)

	 * priority = 3

	 * DAI0: (pri, fmt) = (3, 0000000000000FFF) // 5th check (A) + (B) + (C)

	 * DAI1: (pri, fmt) = (2, 000000000000FF00) //           (X) + (Y)

	 * found auto selected format: 0000000000000F00

 Not Found */

	/*

	 * convert POSSIBLE_DAIFMT to DAIFMT

	 *

	 * Some basic/default settings on each is defined as 0.

	 * see

	 *	SND_SOC_DAIFMT_NB_NF

	 *	SND_SOC_DAIFMT_GATED

	 *

	 * SND_SOC_DAIFMT_xxx_MASK can't notice it if Sound Card specify

	 * these value, and will be overwrite to auto selected value.

	 *

	 * To avoid such issue, loop from 63 to 0 here.

	 * Small number of SND_SOC_POSSIBLE_xxx will be Hi priority.

	 * Basic/Default settings of each part and aboves are defined

	 * as Hi priority (= small number) of SND_SOC_POSSIBLE_xxx.

		/*

		 * for format

		/*

		 * for clock

		/*

		 * for clock invert

		/*

		 * for clock provider / consumer

	/*

	 * Some driver might have very complex limitation.

	 * In such case, user want to auto-select non-limitation part,

	 * and want to manually specify complex part.

	 *

	 * Or for example, if both CPU and Codec can be clock provider,

	 * but because of its quality, user want to specify it manually.

	 *

	 * Use manually specified settings if sound card did.

/**

 * snd_soc_runtime_set_dai_fmt() - Change DAI link format for a ASoC runtime

 * @rtd: The runtime for which the DAI link format should be changed

 * @dai_fmt: The new DAI link format

 *

 * This function updates the DAI link format for all DAIs connected to the DAI

 * link for the specified runtime.

 *

 * Note: For setups with a static format set the dai_fmt field in the

 * corresponding snd_dai_link struct instead of using this function.

 *

 * Returns 0 on success, otherwise a negative error code.

	/*

	 * Flip the polarity for the "CPU" end of a CODEC<->CODEC link

 set default power off timeout */

 do machine specific initialization */

 add DPCM sysfs entries */

	/*

	 * most drivers will register their PCMs using DAI link ordering but

	 * topology based drivers can use the DAI link id field to set PCM

	 * device number and then use rtd + a base offset of the BEs.

 create compress_device if possible */

 create the pcm */

	/*

	 * If there is no configuration table or no match in the table,

	 * check if a prefix is provided in the node

	/*

	 * machine specific init

	 * see

	 *	snd_soc_component_set_aux()

 see for_each_card_components */

 remove all rtd connected DAIs in good order */

 probe all rtd connected DAIs in good order */

 for snd_soc_component_init() */

 codecs, usually analog devices */

 for snd_soc_component_init() */

 see for_each_card_auxs */

/*

 * If a DMI filed contain strings in this blacklist (e.g.

 * "Type2 - Board Manufacturer" or "Type1 - TBD by OEM"), it will be taken

 * as invalid and dropped when setting the card long name from DMI info.

 terminator */

/*

 * Trim special characters, and replace '-' with '_' since '-' is used to

 * separate different DMI fields in the card long name. Only number and

 * alphabet characters and a few separator characters are kept.

/*

 * Check if a DMI field is valid, i.e. not containing any string

 * in the black list.

/*

 * Append a string to card->dmi_longname with character cleanups.

 skip the separator "-" */

/**

 * snd_soc_set_dmi_name() - Register DMI names to card

 * @card: The card to register DMI names

 * @flavour: The flavour "differentiator" for the card amongst its peers.

 *

 * An Intel machine driver may be used by many different devices but are

 * difficult for userspace to differentiate, since machine drivers ususally

 * use their own name as the card short name and leave the card long name

 * blank. To differentiate such devices and fix bugs due to lack of

 * device-specific configurations, this function allows DMI info to be used

 * as the sound card long name, in the format of

 * "vendor-product-version-board"

 * (Character '-' is used to separate different DMI fields here).

 * This will help the user space to load the device-specific Use Case Manager

 * (UCM) configurations for the card.

 *

 * Possible card long names may be:

 * DellInc.-XPS139343-01-0310JH

 * ASUSTeKCOMPUTERINC.-T100TA-1.0-T100TA

 * Circuitco-MinnowboardMaxD0PLATFORM-D0-MinnowBoardMAX

 *

 * This function also supports flavoring the card longname to provide

 * the extra differentiation, like "vendor-product-version-board-flavor".

 *

 * We only keep number and alphabet characters and a few separator characters

 * in the card long name since UCM in the user space uses the card long names

 * as card configuration directory names and AudoConf cannot support special

 * charactors like SPACE.

 *

 * Returns 0 on success, otherwise a negative error code.

 long name already set by driver or from DMI */

 make up dmi long name as: vendor-product-version-board */

		/*

		 * some vendors like Lenovo may only put a self-explanatory

		 * name in the product version field

 fall back to using legacy name */

 Add flavour to dmi long name */

 set the card long name */

 CONFIG_DMI */

 does this component override BEs ? */

 for this machine ? */

 machine matches, so override the rtd data */

 ignore this FE */

 override platform component */

 convert non BE into BE */

 convert normal link into DPCM one */

			/*

			 * override any BE fixups

			 * see

			 *	snd_soc_link_be_hw_params_fixup()

			/*

			 * most BE links don't set stream name, so set it to

			 * dai link name if it's NULL to help bind widgets.

 Inform userspace we are using alternate topology */

 topology shortname created? */

 use topology shortname */

	/*

	 * Name normalization

	 *

	 * The driver name is somewhat special, as it's used as a key for

	 * searches in the user-space.

	 *

	 * ex)

	 *	"abcd??efg" -> "abcd__efg"

 remove and free each DAI */

 remove auxiliary devices */

 remove the card */

 check whether any platform is ignore machine FE and using topology */

 bind aux_devs too */

 add predefined DAI links to the list */

 card bind complete so register a sound card */

 initialise the sound card only once */

 probe all components used by DAI links on this card */

 probe auxiliary components */

 probe all DAI links on this card */

 try to set some sane longname if DMI is available */

 the current implementation of snd_component_add() accepts */

 multiple components in the string separated by space, */

 but the string collision (identical string) check might */

 not work correctly */

 deactivate pins to sleep state */

 probes a new socdev */

	/*

	 * no card, so machine driver should be registering card

	 * we should not be here in that case so ret error

 Bodge while we unpick instantiation */

	/*

	 * Flush out pmdown_time work - we actually do want to run it

	 * now, we're shutting down so no imminent restart.

 deactivate pins to sleep state */

 ASoC platform driver */

/**

 * snd_soc_cnew - create new control

 * @_template: control template

 * @data: control private data

 * @long_name: control long name

 * @prefix: control name prefix

 *

 * Create a new mixer control from a template control.

 *

 * Returns 0 for success, else error.

/**

 * snd_soc_add_component_controls - Add an array of controls to a component.

 *

 * @component: Component to add controls to

 * @controls: Array of controls to add

 * @num_controls: Number of elements in the array

 *

 * Return: 0 for success, else error.

/**

 * snd_soc_add_card_controls - add an array of controls to a SoC card.

 * Convenience function to add a list of controls.

 *

 * @soc_card: SoC card to add controls to

 * @controls: array of controls to add

 * @num_controls: number of elements in the array

 *

 * Return 0 for success, else error.

/**

 * snd_soc_add_dai_controls - add an array of controls to a DAI.

 * Convienience function to add a list of controls.

 *

 * @dai: DAI to add controls to

 * @controls: array of controls to add

 * @num_controls: number of elements in the array

 *

 * Return 0 for success, else error.

/**

 * snd_soc_register_card - Register a card with the ASoC core

 *

 * @card: Card to register

 *

/**

 * snd_soc_unregister_card - Unregister a card with the ASoC core

 *

 * @card: Card to unregister

 *

/*

 * Simplify DAI link configuration by removing ".-1" from device names

 * and sanitizing names.

 are we a "%s.%d" name (platform and SPI components) */

 get ID */

 discard ID from name if ID == -1 */

 I2C component devices are named "bus-addr" */

 create unique ID number from I2C addr and bus */

 sanitize component name for DAI link creation */

/*

 * Simplify DAI link naming for single devices with multiple DAIs by removing

 * any ".-1" and using the DAI name (instead of device name).

/**

 * snd_soc_register_dai - Register a DAI dynamically & create its widgets

 *

 * @component: The component the DAIs are registered for

 * @dai_drv: DAI driver to use for the DAI

 * @legacy_dai_naming: if %true, use legacy single-name format;

 * 	if %false, use multiple-name format;

 *

 * Topology can use this API to register DAIs when probing a component.

 * These DAIs's widgets will be freed in the card cleanup and the DAIs

 * will be freed in the component cleanup.

	/*

	 * Back in the old days when we still had component-less DAIs,

	 * instead of having a static name, component-less DAIs would

	 * inherit the name of the parent device so it is possible to

	 * register multiple instances of the DAI. We still need to keep

	 * the same naming style even though those DAIs are not

	 * component-less anymore.

 see for_each_component_dais */

/**

 * snd_soc_unregister_dais - Unregister DAIs from the ASoC core

 *

 * @component: The component for which the DAIs should be unregistered

/**

 * snd_soc_register_dais - Register a DAI with the ASoC core

 *

 * @component: The component the DAIs are registered for

 * @dai_drv: DAI driver to use for the DAIs

 * @count: Number of DAIs

/*

 * Fix up the DAI formats for endianness: codecs don't actually see

 * the endianness of the data but we're using the CPU format

 * definitions which do need to include endianness so we ensure that

 * codec DAIs always have both big and little endian variants set.

 see for_each_component */

/**

 * snd_soc_unregister_component_by_driver - Unregister component using a given driver

 * from the ASoC core

 *

 * @dev: The device to unregister

 * @component_driver: The component driver to unregister

/**

 * snd_soc_unregister_component - Unregister all related component

 * from the ASoC core

 *

 * @dev: The device to unregister

 Retrieve a card's name from device tree */

	/*

	 * EINVAL means the property does not exist. This is fine providing

	 * card->name was previously set, which is checked later in

	 * snd_soc_register_card.

 no prefix is not error */

	/*

	 * bit_frame is return value from

	 *	snd_soc_daifmt_parse_clock_provider_raw()

 Codec base */

	/*

	 * check "dai-format = xxx"

	 * or    "[prefix]format = xxx"

	 * SND_SOC_DAIFMT_FORMAT_MASK area

	/*

	 * check "[prefix]continuous-clock"

	 * SND_SOC_DAIFMT_CLOCK_MASK area

	/*

	 * check "[prefix]bitclock-inversion"

	 * check "[prefix]frame-inversion"

	 * SND_SOC_DAIFMT_INV_MASK area

 SND_SOC_DAIFMT_NB_NF is default */

	/*

	 * check "[prefix]bitclock-master"

	 * check "[prefix]frame-master"

	/*

	 * return bitmap.

	 * It will be parameter of

	 *	snd_soc_daifmt_clock_provider_from_bitmap()

	/*

	 * For example HDMI case, HDMI has video/sound port,

	 * but ALSA SoC needs sound port number only.

	 * Thus counting HDMI DT port/endpoint doesn't work.

	 * Then, it should have .of_xlate_dai_id

 same as dai_drv[0] */

 not supported */

 find target DAI */

			/*

			 * if another error than ENOTSUPP is returned go on and

			 * check if another component is provided with the same

			 * node. This may happen if a device provides several

			 * components

/*

 * snd_soc_of_put_dai_link_codecs - Dereference device nodes in the codecs array

 * @dai_link: DAI link

 *

 * Dereference device nodes acquired by snd_soc_of_get_dai_link_codecs().

/*

 * snd_soc_of_get_dai_link_codecs - Parse a list of CODECs in the devicetree

 * @dev: Card device

 * @of_node: Device node

 * @dai_link: DAI link

 *

 * Builds an array of CODEC DAI components from the DAI link property

 * 'sound-dai'.

 * The array is set in the DAI link and the number of DAIs is set accordingly.

 * The device nodes in the array (of_node) must be dereferenced by calling

 * snd_soc_of_put_dai_link_codecs() on @dai_link.

 *

 * Returns 0 for success

 Count the number of CODECs */

 Parse the list */

 Module information */

 SPDX-License-Identifier: GPL-2.0+



 soc-ops.c  --  Generic ASoC operations



 Copyright 2005 Wolfson Microelectronics PLC.

 Copyright 2005 Openedhand Ltd.

 Copyright (C) 2010 Slimlogic Ltd.

 Copyright (C) 2010 Texas Instruments Inc.



 Author: Liam Girdwood <lrg@slimlogic.co.uk>

         with code, comments and ideas from :-

         Richard Purdie <richard@openedhand.com>

/**

 * snd_soc_info_enum_double - enumerated double mixer info callback

 * @kcontrol: mixer control

 * @uinfo: control element information

 *

 * Callback to provide information about a double enumerated

 * mixer control.

 *

 * Returns 0 for success.

/**

 * snd_soc_get_enum_double - enumerated double mixer get callback

 * @kcontrol: mixer control

 * @ucontrol: control element information

 *

 * Callback to get the value of a double enumerated mixer.

 *

 * Returns 0 for success.

/**

 * snd_soc_put_enum_double - enumerated double mixer put callback

 * @kcontrol: mixer control

 * @ucontrol: control element information

 *

 * Callback to set the value of a double enumerated mixer.

 *

 * Returns 0 for success.

/**

 * snd_soc_read_signed - Read a codec register and interpret as signed value

 * @component: component

 * @reg: Register to read

 * @mask: Mask to use after shifting the register value

 * @shift: Right shift of register value

 * @sign_bit: Bit that describes if a number is negative or not.

 * @signed_val: Pointer to where the read value should be stored

 *

 * This functions reads a codec register. The register value is shifted right

 * by 'shift' bits and masked with the given 'mask'. Afterwards it translates

 * the given registervalue into a signed integer if sign_bit is non-zero.

 *

 * Returns 0 on sucess, otherwise an error value

 non-negative number */

	/*

	 * The register most probably does not contain a full-sized int.

	 * Instead we have an arbitrary number of bits in a signed

	 * representation which has to be translated into a full-sized int.

	 * This is done by filling up all bits above the sign-bit.

/**

 * snd_soc_info_volsw - single mixer info callback

 * @kcontrol: mixer control

 * @uinfo: control element information

 *

 * Callback to provide information about a single mixer control, or a double

 * mixer control that spans 2 registers.

 *

 * Returns 0 for success.

/**

 * snd_soc_info_volsw_sx - Mixer info callback for SX TLV controls

 * @kcontrol: mixer control

 * @uinfo: control element information

 *

 * Callback to provide information about a single mixer control, or a double

 * mixer control that spans 2 registers of the SX TLV type. SX TLV controls

 * have a range that represents both positive and negative values either side

 * of zero but without a sign bit.

 *

 * Returns 0 for success.

	/* Max represents the number of levels in an SX control not the

	 * maximum value, so add the minimum value back on

/**

 * snd_soc_get_volsw - single mixer get callback

 * @kcontrol: mixer control

 * @ucontrol: control element information

 *

 * Callback to get the value of a single mixer control, or a double mixer

 * control that spans 2 registers.

 *

 * Returns 0 for success.

/**

 * snd_soc_put_volsw - single mixer put callback

 * @kcontrol: mixer control

 * @ucontrol: control element information

 *

 * Callback to set the value of a single mixer control, or a double mixer

 * control that spans 2 registers.

 *

 * Returns 0 for success.

/**

 * snd_soc_get_volsw_sx - single mixer get callback

 * @kcontrol: mixer control

 * @ucontrol: control element information

 *

 * Callback to get the value of a single mixer control, or a double mixer

 * control that spans 2 registers.

 *

 * Returns 0 for success.

/**

 * snd_soc_put_volsw_sx - double mixer set callback

 * @kcontrol: mixer control

 * @ucontrol: control element information

 *

 * Callback to set the value of a double mixer control that spans 2 registers.

 *

 * Returns 0 for success.

/**

 * snd_soc_info_volsw_range - single mixer info callback with range.

 * @kcontrol: mixer control

 * @uinfo: control element information

 *

 * Callback to provide information, within a range, about a single

 * mixer control.

 *

 * returns 0 for success.

/**

 * snd_soc_put_volsw_range - single mixer put value callback with range.

 * @kcontrol: mixer control

 * @ucontrol: control element information

 *

 * Callback to set the value, within a range, for a single mixer control.

 *

 * Returns 0 for success.

/**

 * snd_soc_get_volsw_range - single mixer get callback with range

 * @kcontrol: mixer control

 * @ucontrol: control element information

 *

 * Callback to get the value, within a range, of a single mixer control.

 *

 * Returns 0 for success.

/**

 * snd_soc_limit_volume - Set new limit to an existing volume control.

 *

 * @card: where to look for the control

 * @name: Name of the control

 * @max: new maximum limit

 *

 * Return 0 for success, else error.

 Sanity check for name and max */

 Hide any masked bytes to ensure consistent data reporting */

	/*

	 * If we've got a mask then we need to preserve the register

	 * bits.  We shouldn't modify the incoming data so take a

	 * copy.

/**

 * snd_soc_info_xr_sx - signed multi register info callback

 * @kcontrol: mreg control

 * @uinfo: control element information

 *

 * Callback to provide information of a control that can

 * span multiple codec registers which together

 * forms a single signed value in a MSB/LSB manner.

 *

 * Returns 0 for success.

/**

 * snd_soc_get_xr_sx - signed multi register get callback

 * @kcontrol: mreg control

 * @ucontrol: control element information

 *

 * Callback to get the value of a control that can span

 * multiple codec registers which together forms a single

 * signed value in a MSB/LSB manner. The control supports

 * specifying total no of bits used to allow for bitfields

 * across the multiple codec registers.

 *

 * Returns 0 for success.

/**

 * snd_soc_put_xr_sx - signed multi register get callback

 * @kcontrol: mreg control

 * @ucontrol: control element information

 *

 * Callback to set the value of a control that can span

 * multiple codec registers which together forms a single

 * signed value in a MSB/LSB manner. The control supports

 * specifying total no of bits used to allow for bitfields

 * across the multiple codec registers.

 *

 * Returns 0 for success.

/**

 * snd_soc_get_strobe - strobe get callback

 * @kcontrol: mixer control

 * @ucontrol: control element information

 *

 * Callback get the value of a strobe mixer control.

 *

 * Returns 0 for success.

/**

 * snd_soc_put_strobe - strobe put callback

 * @kcontrol: mixer control

 * @ucontrol: control element information

 *

 * Callback strobe a register bit to high then low (or the inverse)

 * in one pass of a single mixer enum control.

 *

 * Returns 1 for success.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * soc-topology-test.c  --  ALSA SoC Topology Kernel Unit Tests

 *

 * Copyright(c) 2021 Intel Corporation. All rights reserved.

 ===== HELPER FUNCTIONS =================================================== */

/*

 * snd_soc_component needs device to operate on (primarily for prints), create

 * fake one, as we don't register with PCI or anything else

 * device_driver name is used in some of the prints (fmt_single_name) so

 * we also mock up minimal one

/*

 * helper struct we use when registering component, as we load topology during

 * component probe, we need to pass struct kunit somehow to probe function, so

 * we can report test result

 what result we expect when loading topology */

/*

 * ASoC minimal boiler plate

 ===== TOPOLOGY TEMPLATES ================================================= */

 Structural representation of topology which can be generated with:

 $ touch empty

 $ alsatplg -c empty -o empty.tplg

 $ xxd -i empty.tplg

 rest of fields is 0 */

 Structural representation of topology containing SectionPCM

 rest of fields is 0 */

 ===== TEST CASES ========================================================= */

 TEST CASE

 Test passing NULL component as parameter to snd_soc_tplg_component_load

/*

 * need to override generic probe function with one using NULL when calling

 * topology load during component initialization, we don't need .remove

 * handler as load should fail

 instead of passing component pointer as first argument, pass NULL here */

 prepare */

 expect failure */

 run test */

 cleanup */

 TEST CASE

 Test passing NULL ops as parameter to snd_soc_tplg_component_load

/*

 * NULL ops is default case, we pass empty topology (fw), so we don't have

 * anything to parse and just do nothing, which results in return 0; from

 * calling soc_tplg_dapm_complete in soc_tplg_process_headers

 prepare */

 expect success */

 run test */

 cleanup */

 TEST CASE

 Test passing NULL fw as parameter to snd_soc_tplg_component_load

/*

 * need to override generic probe function with one using NULL pointer to fw

 * when calling topology load during component initialization, we don't need

 * .remove handler as load should fail

 instead of passing fw pointer as third argument, pass NULL here */

 prepare */

 expect failure */

 run test */

 cleanup */

 TEST CASE

 Test passing "empty" topology file

 prepare */

 expect success */

 run test */

 cleanup */

 TEST CASE

 Test "empty" topology file, but with bad "magic"

 In theory we could loop through all possible bad values, but it takes too

 long, so just use SND_SOC_TPLG_MAGIC + 1

 prepare */

 expect failure */

	/*

	 * override abi

	 * any value != magic number is wrong

 run test */

 cleanup */

 TEST CASE

 Test "empty" topology file, but with bad "abi"

 In theory we could loop through all possible bad values, but it takes too

 long, so just use SND_SOC_TPLG_ABI_VERSION + 1

 prepare */

 expect failure */

	/*

	 * override abi

	 * any value != accepted range is wrong

 run test */

 cleanup */

 TEST CASE

 Test "empty" topology file, but with bad "size"

 In theory we could loop through all possible bad values, but it takes too

 long, so just use sizeof(struct snd_soc_tplg_hdr) + 1

 prepare */

 expect failure */

	/*

	 * override size

	 * any value != struct size is wrong

 run test */

 cleanup */

 TEST CASE

 Test "empty" topology file, but with bad "payload_size"

 In theory we could loop through all possible bad values, but it takes too

 long, so just use the known wrong one

 prepare */

 expect failure */

	/*

	 * override payload size

	 * there is only explicit check for 0, so check with it, other values

	 * are handled by just not reading behind EOF

 run test */

 cleanup */

 TEST CASE

 Test passing topology file with PCM definition

 prepare */

 expect success */

 run test */

 cleanup */

 TEST CASE

 Test passing topology file with PCM definition

 with component reload

 prepare */

 expect success */

 run test */

 cleanup */

 TEST CASE

 Test passing topology file with PCM definition

 with card reload

 prepare */

 expect success */

 run test */

 cleanup */

 ===== KUNIT MODULE DEFINITIONS =========================================== */

 SPDX-License-Identifier: GPL-2.0+



 soc-dapm.c  --  ALSA SoC Dynamic Audio Power Management



 Copyright 2005 Wolfson Microelectronics PLC.

 Author: Liam Girdwood <lrg@slimlogic.co.uk>



  Features:

    o Changes power status of internal codec blocks depending on the

      dynamic configuration of codec internal audio paths and active

      DACs/ADCs.

    o Platform power domain - can support external components i.e. amps and

      mic/headphone insertion events.

    o Automatic Mic Bias support

    o Jack insertion power event initiation - e.g. hp insertion will enable

      sinks, dacs, etc

    o Delayed power down of audio subsystem to reduce pops between a quick

      device reopen.

 dapm power sequences - make this per codec in the future */

/*

 * Common implementation for dapm_widget_invalidate_input_paths() and

 * dapm_widget_invalidate_output_paths(). The function is inlined since the

 * combined size of the two specialized functions is only marginally larger then

 * the size of the generic function and at the same time the fast path of the

 * specialized functions is significantly smaller than the generic function.

/*

 * dapm_widget_invalidate_input_paths() - Invalidate the cached number of

 *  input paths

 * @w: The widget for which to invalidate the cached number of input paths

 *

 * Resets the cached number of inputs for the specified widget and all widgets

 * that can be reached via outcoming paths from the widget.

 *

 * This function must be called if the number of output paths for a widget might

 * have changed. E.g. if the source state of a widget changes or a path is added

 * or activated with the widget as the sink.

/*

 * dapm_widget_invalidate_output_paths() - Invalidate the cached number of

 *  output paths

 * @w: The widget for which to invalidate the cached number of output paths

 *

 * Resets the cached number of outputs for the specified widget and all widgets

 * that can be reached via incoming paths from the widget.

 *

 * This function must be called if the number of output paths for a widget might

 * have changed. E.g. if the sink state of a widget changes or a path is added

 * or activated with the widget as the source.

/*

 * dapm_path_invalidate() - Invalidates the cached number of inputs and outputs

 *  for the widgets connected to a path

 * @p: The path to invalidate

 *

 * Resets the cached number of inputs for the sink of the path and the cached

 * number of outputs for the source of the path.

 *

 * This function must be called when a path is added, removed or the connected

 * state changes.

	/*

	 * Weak paths or supply paths do not influence the number of input or

	 * output paths of their neighbors.

	/*

	 * The number of connected endpoints is the sum of the number of

	 * connected endpoints of all neighbors. If a node with 0 connected

	 * endpoints is either connected or disconnected that sum won't change,

	 * so there is no need to re-check the path.

 create a new dapm widget */

	/*

	 * w->name is duplicated in caller, but w->sname isn't.

	 * Duplicate it here if defined

/**

 * snd_soc_dapm_kcontrol_widget() - Returns the widget associated to a

 *   kcontrol

 * @kcontrol: The kcontrol

/**

 * snd_soc_dapm_kcontrol_dapm() - Returns the dapm context associated to a

 *  kcontrol

 * @kcontrol: The kcontrol

 *

 * Note: This function must only be used on kcontrols that are known to have

 * been registered for a CODEC. Otherwise the behaviour is undefined.

/**

 * snd_soc_dapm_force_bias_level() - Sets the DAPM bias level

 * @dapm: The DAPM context for which to set the level

 * @level: The level to set

 *

 * Forces the DAPM bias level to a specific state. It will call the bias level

 * callback of DAPM context with the specified level. This will even happen if

 * the context is already at the same level. Furthermore it will not go through

 * the normal bias level sequencing, meaning any intermediate states between the

 * current and the target state will not be entered.

 *

 * Note that the change in bias level is only temporary and the next time

 * snd_soc_dapm_sync() is called the state will be set to the level as

 * determined by the DAPM core. The function is mainly intended to be used to

 * used during probe or resume from suspend to power up the device so

 * initialization can be done, before the DAPM core takes over.

/**

 * snd_soc_dapm_set_bias_level - set the bias level for the system

 * @dapm: DAPM context

 * @level: level to configure

 *

 * Configure the bias (power) levels for the SoC audio device.

 *

 * Returns 0 for success else error.

 connect mux widget to its interconnecting audio paths */

		/* since a virtual mux has no backing registers to

		 * decide which path to connect, it will try to match

		 * with the first enumeration.  This is to ensure

		 * that the default mux choice (the first) will be

		 * correctly powered up during initialization.

 set up initial codec paths */

		/*

		 * The nth_path argument allows this function to know

		 * which path of a kcontrol it is setting the initial

		 * status for. Ideally this would support any number

		 * of paths and channels. But since kcontrols only come

		 * in mono and stereo variants, we are limited to 2

		 * channels.

		 *

		 * The following code assumes for stereo controls the

		 * first path is the left channel, and all remaining

		 * paths are the right channel.

		/* since a virtual mixer has no backing registers to

		 * decide which path to connect, it will try to match

		 * with initial state.  This is to ensure

		 * that the default mixer choice will be

		 * correctly powered up during initialization.

 connect mixer widget to its interconnecting audio paths */

 search for mixer kcontrol */

/*

 * Determine if a kcontrol is shared. If it is, look it up. If it isn't,

 * create it. Either way, add the widget into the control's widget list

			/*

			 * The control will get a prefix from the control

			 * creation process but we're also using the same

			 * prefix for widgets so cut the prefix off the

			 * front of the widget name.

 create new dapm mixer control */

 add kcontrol */

 match name */

 mixer/mux paths name must match control name */

 create new dapm mux control */

 create new dapm volume control */

 create new dapm dai link control */

 create control for links with > 1 config */

 add kcontrol */

/* We implement power down on suspend by checking the power state of

 * the ALSA card - when we are suspending the ALSA state for the card

 * is set to D3.

/*

 * Recursively reset the cached number of inputs or outputs for the specified

 * widget and all widgets that can be reached via incoming or outcoming paths

 * from the widget.

/*

 * Common implementation for is_connected_output_ep() and

 * is_connected_input_ep(). The function is inlined since the combined size of

 * the two specialized functions is only marginally larger then the size of the

 * generic function and at the same time the fast path of the specialized

 * functions is significantly smaller than the generic function.

 do we need to add this widget to the list ? */

/*

 * Recursively check for a completed path to an active or physically connected

 * output widget. Returns number of complete paths.

 *

 * Optionally, can be supplied with a function acting as a stopping condition.

 * This function takes the dapm widget currently being examined and the walk

 * direction as an arguments, it should return true if widgets from that point

 * in the graph onwards should not be added to the widget list.

/*

 * Recursively check for a completed path to an active or physically connected

 * input widget. Returns number of complete paths.

 *

 * Optionally, can be supplied with a function acting as a stopping condition.

 * This function takes the dapm widget currently being examined and the walk

 * direction as an arguments, it should return true if the walk should be

 * stopped and false otherwise.

/**

 * snd_soc_dapm_dai_get_connected_widgets - query audio path and it's widgets.

 * @dai: the soc DAI.

 * @stream: stream direction.

 * @list: list of active widgets for this stream.

 * @custom_stop_condition: (optional) a function meant to stop the widget graph

 *                         walk based on custom logic.

 *

 * Queries DAPM graph as to whether a valid audio stream path exists for

 * the initial stream specified by name. This takes into account

 * current mixer and mux kcontrol settings. Creates list of valid widgets.

 *

 * Optionally, can be supplied with a function acting as a stopping condition.

 * This function takes the dapm widget currently being examined and the walk

 * direction as an arguments, it should return true if the walk should be

 * stopped and false otherwise.

 *

 * Returns the number of valid paths or negative error.

 Drop starting point */

/*

 * Handler for regulator supply widget.

/*

 * Handler for pinctrl widget.

/*

 * Handler for clock supply widget.

 Generic check to see if a widget should be powered. */

 Check to see if a power supply is needed */

 Check if one of our outputs is connected */

 Insert a widget in order into a DAPM power sequence. */

 Apply the coalesced changes from a DAPM sequence */

 Check for events */

		/* Any widget will do, they should all be updating the

		 * same register.

/* Apply a DAPM power sequence.

 *

 * We walk over a pre-sorted list of widgets to apply power to.  In

 * order to minimise the number of writes to the device required

 * multiple widgets will be updated in a single write where possible.

 * Currently anything that requires more than a single write is not

 * handled.

 Do we need to apply any queued changes? */

 Queue it up for application */

/* Async callback run prior to DAPM sequences - brings to _PREPARE if

 * they're changing state.

 If we're off and we're not supposed to go into STANDBY */

 Prepare for a transition to ON or away from ON */

/* Async callback run prior to DAPM sequences - brings to their final

 * state.

 If we just powered the last thing off drop to standby bias */

 If we're in standby and can support bias off then do that */

 If we just powered up then move to active bias */

	/* If a connection is being made or broken then that update

	 * will have marked the peer dirty, otherwise the widgets are

	/* If the peer is already in the state we're moving to then we

	/* If we changed our power state perhaps our neigbours changed

	 * also.

 Supplies can't affect their outputs, only their inputs */

/*

 * Scan each dapm widget for complete audio path.

 * A complete path is a route that has valid endpoints i.e.:-

 *

 *  o DAC to output pin.

 *  o Input pin to ADC.

 *  o Input pin to Output pin (bypass, sidetone)

 *  o DAC to ADC (loopback).

	/* Check which widgets we need to power and store them in

	 * lists indicating if they should be powered up or down.  We

	 * only check widgets that have been flagged as dirty but note

	 * that new widgets may be added to the dirty list while we

	 * iterate.

 These widgets always need to be powered */

			/* Supplies and micbiases only bring the

			 * context up to STANDBY as unless something

			 * else is active and passing audio they

			 * generally don't require full power.  Signal

			 * generators are virtual pins and have no

			 * power impact themselves.

	/* Force all contexts in the card to the same bias state if

	 * they're not ground referenced.

 Run card bias changes at first */

 Run other bias changes in parallel */

 Power down widgets first; try to avoid amplifying pops. */

 Now power up. */

 Run all the bias changes in parallel */

 Run card bias changes at last */

 do we need to notify any clients that DAPM event is complete */

 Supply widgets are not handled by is_connected_{input,output}_ep() */

/*

 * soc_dapm_connect_path() - Connects or disconnects a path

 * @path: The path to update

 * @connect: The new connect state of the path. True if the path is connected,

 *  false if it is disconnected.

 * @reason: The reason why the path changed (for debugging only)

 test and update the power status of a mux widget */

 find dapm widget path assoc with kcontrol */

 we now need to match the string in the enum to the path */

 test and update the power status of a mixer or switch widget */

 find dapm widget path assoc with kcontrol */

		/*

		 * Ideally this function should support any number of

		 * paths and channels. But since kcontrols only come

		 * in mono and stereo variants, we are limited to 2

		 * channels.

		 *

		 * The following code assumes for stereo controls the

		 * first path (when 'found == 0') is the left channel,

		 * and all remaining paths (when 'found == 1') are the

		 * right channel.

		 *

		 * A stereo control is signified by a valid 'rconnect'

		 * value, either 0 for unconnected, or >= 0 for connected.

		 * This is chosen instead of using snd_soc_volsw_is_stereo,

		 * so that the behavior of snd_soc_dapm_mixer_update_power

		 * doesn't change even when the kcontrol passed in is

		 * stereo.

		 *

		 * It passes 'connect' as the path connect status for

		 * the left channel, and 'rconnect' for the right

		 * channel.

	/* card won't be set for the dummy component, as a spot fix

	 * we're checking for that case specifically here but in future

	 * we will ensure that the dummy component looks like others.

 only display widgets that burn power */

 show dapm widget status in sys fs */

	/*

	 * remove source and sink paths associated to this widget.

	 * While removing the path, remove reference to it from both

	 * source and sink widgets so that path is removed only once.

 free all dapm widgets and resources */

/**

 * snd_soc_dapm_sync_unlocked - scan and power dapm paths

 * @dapm: DAPM context

 *

 * Walks all dapm audio paths and powers widgets according to their

 * stream or path usage.

 *

 * Requires external locking.

 *

 * Returns 0 for success.

	/*

	 * Suppress early reports (eg, jacks syncing their state) to avoid

	 * silly DAPM runs during card startup.

/**

 * snd_soc_dapm_sync - scan and power dapm paths

 * @dapm: DAPM context

 *

 * Walks all dapm audio paths and powers widgets according to their

 * stream or path usage.

 *

 * Returns 0 for success.

/*

 * dapm_update_widget_flags() - Re-compute widget sink and source flags

 * @w: The widget for which to update the flags

 *

 * Some widgets have a dynamic category which depends on which neighbors they

 * are connected to. This function update the category for these widgets.

 *

 * This function must be called whenever a path is added or removed to a widget.

 On a fully routed card an input is never a source */

 On a fully routed card a output is never a sink */

 connect static paths */

	/*

	 * find src and dest widgets over all widgets but favor a widget from

	 * current DAPM context

 use widget from another DAPM context if not found from this */

 Update any path related flags */

/**

 * snd_soc_dapm_add_routes - Add routes between DAPM widgets

 * @dapm: DAPM context

 * @route: audio routes

 * @num: number of routes

 *

 * Connects 2 dapm widgets together via a named audio path. The sink is

 * the widget receiving the audio signal, whilst the source is the sender

 * of the audio signal.

 *

 * Returns 0 for success else error. On error all resources can be freed

 * with a call to snd_soc_card_free().

/**

 * snd_soc_dapm_del_routes - Remove routes between DAPM widgets

 * @dapm: DAPM context

 * @route: audio routes

 * @num: number of routes

 *

 * Removes routes from the DAPM context.

/**

 * snd_soc_dapm_weak_routes - Mark routes between DAPM widgets as weak

 * @dapm: DAPM context

 * @route: audio routes

 * @num: number of routes

 *

 * Mark existing routes matching those specified in the passed array

 * as being weak, meaning that they are ignored for the purpose of

 * power decisions.  The main intended use case is for sidetone paths

 * which couple audio between other independent paths if they are both

 * active in order to make the combination work better at the user

 * level but which aren't intended to be "used".

 *

 * Note that CODEC drivers should not use this as sidetone type paths

 * can frequently also be used as bypass paths.

/**

 * snd_soc_dapm_new_widgets - add new dapm widgets

 * @card: card to be checked for new dapm widgets

 *

 * Checks the codec for any new dapm widgets and creates them if found.

 *

 * Returns 0 for success.

 Read the initial power state from the device */

/**

 * snd_soc_dapm_get_volsw - dapm mixer get callback

 * @kcontrol: mixer control

 * @ucontrol: control element information

 *

 * Callback to get the value of a dapm mixer control.

 *

 * Returns 0 for success.

/**

 * snd_soc_dapm_put_volsw - dapm mixer set callback

 * @kcontrol: mixer control

 * @ucontrol: control element information

 *

 * Callback to set the value of a dapm mixer control.

 *

 * Returns 0 for success.

 This assumes field width < (bits in unsigned int / 2) */

/**

 * snd_soc_dapm_get_enum_double - dapm enumerated double mixer get callback

 * @kcontrol: mixer control

 * @ucontrol: control element information

 *

 * Callback to get the value of a dapm enumerated double mixer control.

 *

 * Returns 0 for success.

/**

 * snd_soc_dapm_put_enum_double - dapm enumerated double mixer set callback

 * @kcontrol: mixer control

 * @ucontrol: control element information

 *

 * Callback to set the value of a dapm enumerated double mixer control.

 *

 * Returns 0 for success.

/**

 * snd_soc_dapm_info_pin_switch - Info for a pin switch

 *

 * @kcontrol: mixer control

 * @uinfo: control element information

 *

 * Callback to provide information about a pin switch control.

/**

 * snd_soc_dapm_get_pin_switch - Get information for a pin switch

 *

 * @kcontrol: mixer control

 * @ucontrol: Value

/**

 * snd_soc_dapm_put_pin_switch - Set information for a pin switch

 *

 * @kcontrol: mixer control

 * @ucontrol: Value

 set to sleep_state when initializing */

 see for_each_card_widgets */

 machine layer sets up unconnected pins and insertions */

/**

 * snd_soc_dapm_new_control - create new dapm control

 * @dapm: DAPM context

 * @widget: widget template

 *

 * Creates new DAPM control based upon a template.

 *

 * Returns a widget pointer on success or an error pointer on failure

/**

 * snd_soc_dapm_new_controls - create new dapm controls

 * @dapm: DAPM context

 * @widget: widget array

 * @num: number of widgets

 *

 * Creates new DAPM controls based upon the templates.

 *

 * Returns 0 for success else error.

	/*

	 * Note: getting the config after .startup() gives a chance to

	 * either party on the link to alter the configuration if

	 * necessary

 Be a little careful as we don't want to overflow the mask array */

 Restore the substream direction */

 Can't change the config when widget is already powered */

 duplicate kcontrol_dai_link on heap so that memory persists */

 allocate memory for control, only in case of multiple configs */

 For each DAI widget... */

 let users know there is no DAI to link */

 ...find all widgets with the same stream and link them */

 connect BE DAI playback if widgets are valid */

 connect BE DAI capture if widgets are valid */

 for each BE DAI link... */

		/*

		 * dynamic FE links have no fixed DAI mapping.

		 * CODEC<->CODEC links have no direct connection.

/**

 * snd_soc_dapm_stream_event - send a stream event to the dapm core

 * @rtd: PCM runtime data

 * @stream: stream name

 * @event: stream event

 *

 * Sends a stream event to the dapm core. The core then makes any

 * necessary widget power changes.

 *

 * Returns 0 for success else error.

 powered down playback stream now */

 start delayed pop wq here for playback streams */

 capture streams can be powered down now */

/**

 * snd_soc_dapm_enable_pin_unlocked - enable pin.

 * @dapm: DAPM context

 * @pin: pin name

 *

 * Enables input/output pin and its parents or children widgets iff there is

 * a valid audio route and active audio stream.

 *

 * Requires external locking.

 *

 * NOTE: snd_soc_dapm_sync() needs to be called after this for DAPM to

 * do any widget power switching.

/**

 * snd_soc_dapm_enable_pin - enable pin.

 * @dapm: DAPM context

 * @pin: pin name

 *

 * Enables input/output pin and its parents or children widgets iff there is

 * a valid audio route and active audio stream.

 *

 * NOTE: snd_soc_dapm_sync() needs to be called after this for DAPM to

 * do any widget power switching.

/**

 * snd_soc_dapm_force_enable_pin_unlocked - force a pin to be enabled

 * @dapm: DAPM context

 * @pin: pin name

 *

 * Enables input/output pin regardless of any other state.  This is

 * intended for use with microphone bias supplies used in microphone

 * jack detection.

 *

 * Requires external locking.

 *

 * NOTE: snd_soc_dapm_sync() needs to be called after this for DAPM to

 * do any widget power switching.

		/*

		 * w->force does not affect the number of input or output paths,

		 * so we only have to recheck if w->connected is changed

/**

 * snd_soc_dapm_force_enable_pin - force a pin to be enabled

 * @dapm: DAPM context

 * @pin: pin name

 *

 * Enables input/output pin regardless of any other state.  This is

 * intended for use with microphone bias supplies used in microphone

 * jack detection.

 *

 * NOTE: snd_soc_dapm_sync() needs to be called after this for DAPM to

 * do any widget power switching.

/**

 * snd_soc_dapm_disable_pin_unlocked - disable pin.

 * @dapm: DAPM context

 * @pin: pin name

 *

 * Disables input/output pin and its parents or children widgets.

 *

 * Requires external locking.

 *

 * NOTE: snd_soc_dapm_sync() needs to be called after this for DAPM to

 * do any widget power switching.

/**

 * snd_soc_dapm_disable_pin - disable pin.

 * @dapm: DAPM context

 * @pin: pin name

 *

 * Disables input/output pin and its parents or children widgets.

 *

 * NOTE: snd_soc_dapm_sync() needs to be called after this for DAPM to

 * do any widget power switching.

/**

 * snd_soc_dapm_nc_pin_unlocked - permanently disable pin.

 * @dapm: DAPM context

 * @pin: pin name

 *

 * Marks the specified pin as being not connected, disabling it along

 * any parent or child widgets.  At present this is identical to

 * snd_soc_dapm_disable_pin() but in future it will be extended to do

 * additional things such as disabling controls which only affect

 * paths through the pin.

 *

 * Requires external locking.

 *

 * NOTE: snd_soc_dapm_sync() needs to be called after this for DAPM to

 * do any widget power switching.

/**

 * snd_soc_dapm_nc_pin - permanently disable pin.

 * @dapm: DAPM context

 * @pin: pin name

 *

 * Marks the specified pin as being not connected, disabling it along

 * any parent or child widgets.  At present this is identical to

 * snd_soc_dapm_disable_pin() but in future it will be extended to do

 * additional things such as disabling controls which only affect

 * paths through the pin.

 *

 * NOTE: snd_soc_dapm_sync() needs to be called after this for DAPM to

 * do any widget power switching.

/**

 * snd_soc_dapm_get_pin_status - get audio pin status

 * @dapm: DAPM context

 * @pin: audio signal pin endpoint (or start point)

 *

 * Get audio pin status - connected or disconnected.

 *

 * Returns 1 for connected otherwise 0.

/**

 * snd_soc_dapm_ignore_suspend - ignore suspend status for DAPM endpoint

 * @dapm: DAPM context

 * @pin: audio signal pin endpoint (or start point)

 *

 * Mark the given endpoint or pin as ignoring suspend.  When the

 * system is disabled a path between two endpoints flagged as ignoring

 * suspend will not be disabled.  The path must already be enabled via

 * normal means at suspend time, it will not be turned on if it was not

 * already enabled.

/**

 * snd_soc_dapm_free - free dapm resources

 * @dapm: DAPM context

 *

 * Free all dapm widgets and resources.

 see for_each_card_dapms */

	/* If there were no widgets to power down we're already in

	 * standby.

/*

 * snd_soc_dapm_shutdown - callback for system shutdown

 Module information */

 SPDX-License-Identifier: GPL-2.0



 soc-component.c



 Copyright 2009-2011 Wolfson Microelectronics PLC.

 Copyright (C) 2019 Renesas Electronics Corp.



 Mark Brown <broonie@opensource.wolfsonmicro.com>

 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>



 Positive/Zero values are not errors */

 Negative values might be errors */

/*

 * We might want to check substream by using list.

 * In such case, we can update these macros.

/**

 * snd_soc_component_set_sysclk - configure COMPONENT system or master clock.

 * @component: COMPONENT

 * @clk_id: DAI specific clock ID

 * @source: Source for the clock

 * @freq: new clock frequency in Hz

 * @dir: new clock direction - input/output.

 *

 * Configures the CODEC master (MCLK) or system (SYSCLK) clocking.

/*

 * snd_soc_component_set_pll - configure component PLL.

 * @component: COMPONENT

 * @pll_id: DAI specific PLL ID

 * @source: DAI specific source for the PLL

 * @freq_in: PLL input clock frequency in Hz

 * @freq_out: requested PLL output clock frequency in Hz

 *

 * Configures and enables PLL to generate output clock based on input clock.

/**

 * snd_soc_component_set_jack - configure component jack.

 * @component: COMPONENTs

 * @jack: structure to use for the jack

 * @data: can be used if codec driver need extra data for configuring jack

 *

 * Configures and enables jack detection function.

 mark module if succeeded */

 remove the mark from module */

 mark substream if succeeded */

 remove marked substream */

	/*

	 * Don't use soc_component_ret here because we may not want to report

	 * the error just yet. If a device has more than one component, the

	 * first may not match and we don't want spam the log with this.

 Errors are legitimate for non-integer byte multiples */

/**

 * snd_soc_component_init_regmap() - Initialize regmap instance for the

 *                                   component

 * @component: The component for which to initialize the regmap instance

 * @regmap: The regmap instance that should be used by the component

 *

 * This function allows deferred assignment of the regmap instance that is

 * associated with the component. Only use this if the regmap instance is not

 * yet ready when the component is registered. The function must also be called

 * before the first IO attempt of the component.

/**

 * snd_soc_component_exit_regmap() - De-initialize regmap instance for the

 *                                   component

 * @component: The component for which to de-initialize the regmap instance

 *

 * Calls regmap_exit() on the regmap instance associated to the component and

 * removes the regmap instance from the component.

 *

 * This function should only be used if snd_soc_component_init_regmap() was used

 * to initialize the regmap instance.

 mark substream if succeeded */

 remove marked substream */

/**

 * snd_soc_component_read() - Read register value

 * @component: Component to read from

 * @reg: Register to read

 *

 * Return: read value

/**

 * snd_soc_component_write() - Write register value

 * @component: Component to write to

 * @reg: Register to write

 * @val: Value to write to the register

 *

 * Return: 0 on success, a negative error code otherwise.

/**

 * snd_soc_component_update_bits() - Perform read/modify/write cycle

 * @component: Component to update

 * @reg: Register to update

 * @mask: Mask that specifies which bits to update

 * @val: New value for the bits specified by mask

 *

 * Return: 1 if the operation was successful and the value of the register

 * changed, 0 if the operation was successful, but the value did not change.

 * Returns a negative error code otherwise.

/**

 * snd_soc_component_update_bits_async() - Perform asynchronous

 *  read/modify/write cycle

 * @component: Component to update

 * @reg: Register to update

 * @mask: Mask that specifies which bits to update

 * @val: New value for the bits specified by mask

 *

 * This function is similar to snd_soc_component_update_bits(), but the update

 * operation is scheduled asynchronously. This means it may not be completed

 * when the function returns. To make sure that all scheduled updates have been

 * completed snd_soc_component_async_complete() must be called.

 *

 * Return: 1 if the operation was successful and the value of the register

 * changed, 0 if the operation was successful, but the value did not change.

 * Returns a negative error code otherwise.

/**

 * snd_soc_component_read_field() - Read register field value

 * @component: Component to read from

 * @reg: Register to read

 * @mask: mask of the register field

 *

 * Return: read value of register field.

/**

 * snd_soc_component_write_field() - write to register field

 * @component: Component to write to

 * @reg: Register to write

 * @mask: mask of the register field to update

 * @val: value of the field to write

 *

 * Return: 1 for change, otherwise 0.

/**

 * snd_soc_component_async_complete() - Ensure asynchronous I/O has completed

 * @component: Component for which to wait

 *

 * This function blocks until all asynchronous I/O which has previously been

 * scheduled using snd_soc_component_update_bits_async() has completed.

/**

 * snd_soc_component_test_bits - Test register for change

 * @component: component

 * @reg: Register to test

 * @mask: Mask that specifies which bits to test

 * @value: Value to test against

 *

 * Tests a register with a new value and checks if the new value is

 * different from the old value.

 *

 * Return: 1 for change, otherwise 0.

 FIXME: use 1st pointer */

 FIXME: use 1st ioctl */

 FIXME. it returns 1st copy now */

 FIXME. it returns 1st page now */

 FIXME. it returns 1st mmap now */

 mark substream if succeeded */

 remove marked substream */

 use last ret */

 mark stream if succeeded */

 remove marked stream */

 FIXME: use 1st pointer */

 SPDX-License-Identifier: GPL-2.0



 soc-link.c



 Copyright (C) 2019 Renesas Electronics Corp.

 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>



 Positive, Zero values are not errors */

 Negative values might be errors */

/*

 * We might want to check substream by using list.

 * In such case, we can update these macros.

 mark substream if succeeded */

 remove marked substream */

 mark substream if succeeded */

 remove marked substream */

 SPDX-License-Identifier: GPL-2.0+



 soc-jack.c  --  ALSA SoC jack handling



 Copyright 2008 Wolfson Microelectronics PLC.



 Author: Mark Brown <broonie@opensource.wolfsonmicro.com>

/**

 * snd_soc_jack_report - Report the current status for a jack

 *

 * @jack:   the jack

 * @status: a bitmask of enum snd_jack_type values that are currently detected.

 * @mask:   a bitmask of enum snd_jack_type values that being reported.

 *

 * If configured using snd_soc_jack_add_pins() then the associated

 * DAPM pins will be enabled or disabled as appropriate and DAPM

 * synchronised.

 *

 * Note: This function uses mutexes and should be called from a

 * context which can sleep (such as a workqueue).

 we need to sync for this case only */

 Report before the DAPM sync to help users updating micbias status */

/**

 * snd_soc_jack_add_zones - Associate voltage zones with jack

 *

 * @jack:  ASoC jack

 * @count: Number of zones

 * @zones:  Array of zones

 *

 * After this function has been called the zones specified in the

 * array will be associated with the jack.

/**

 * snd_soc_jack_get_type - Based on the mic bias value, this function returns

 * the type of jack from the zones declared in the jack type

 *

 * @jack:  ASoC jack

 * @micbias_voltage:  mic bias voltage at adc channel when jack is plugged in

 *

 * Based on the mic bias value passed, this function helps identify

 * the type of jack from the already declared jack zones

/**

 * snd_soc_jack_add_pins - Associate DAPM pins with an ASoC jack

 *

 * @jack:  ASoC jack

 * @count: Number of pins

 * @pins:  Array of pins

 *

 * After this function has been called the DAPM pins specified in the

 * pins array will have their status updated to reflect the current

 * state of the jack whenever the jack status is updated.

	/* Update to reflect the last reported status; canned jack

	 * implementations are likely to set their state before the

	 * card has an opportunity to associate pins.

/**

 * snd_soc_jack_notifier_register - Register a notifier for jack status

 *

 * @jack:  ASoC jack

 * @nb:    Notifier block to register

 *

 * Register for notification of the current status of the jack.  Note

 * that it is not possible to report additional jack events in the

 * callback from the notifier, this is intended to support

 * applications such as enabling electrical detection only when a

 * mechanical detection event has occurred.

/**

 * snd_soc_jack_notifier_unregister - Unregister a notifier for jack status

 *

 * @jack:  ASoC jack

 * @nb:    Notifier block to unregister

 *

 * Stop notifying for status changes.

 gpio detect */

 irq handler for gpio pin */

 gpio work */

		/*

		 * Use workqueue so we do not have to care about running

		 * concurrently with work triggered by the interrupt handler.

/**

 * snd_soc_jack_add_gpios - Associate GPIO pins with an ASoC jack

 *

 * @jack:  ASoC jack

 * @count: number of pins

 * @gpios: array of gpio pins

 *

 * This function will request gpio, set data direction and request irq

 * for each gpio in the array.

 Already have a GPIO descriptor. */

 Get a GPIO descriptor */

 legacy GPIO number */

		/*

		 * Register PM notifier so we do not miss state transitions

		 * happening while system is asleep.

 Expose GPIO value over sysfs for diagnostic purposes */

 Update initial jack status */

/**

 * snd_soc_jack_add_gpiods - Associate GPIO descriptor pins with an ASoC jack

 *

 * @gpiod_dev: GPIO consumer device

 * @jack:      ASoC jack

 * @count:     number of pins

 * @gpios:     array of gpio pins

 *

 * This function will request gpio, set data direction and request irq

 * for each gpio in the array.

/**

 * snd_soc_jack_free_gpios - Release GPIO pins' resources of an ASoC jack

 *

 * @jack:  ASoC jack

 * @count: number of pins

 * @gpios: array of gpio pins

 *

 * Release gpio and irq resources for gpio pins associated with an ASoC jack.

 CONFIG_GPIOLIB */

 SPDX-License-Identifier: GPL-2.0+



 soc-pcm.c  --  ALSA SoC PCM



 Copyright 2005 Wolfson Microelectronics PLC.

 Copyright 2005 Openedhand Ltd.

 Copyright (C) 2010 Slimlogic Ltd.

 Copyright (C) 2010 Texas Instruments Inc.



 Authors: Liam Girdwood <lrg@ti.com>

          Mark Brown <broonie@opensource.wolfsonmicro.com>

 FE state */

 BEs state */

/* Set FE's runtime_update state; the state is protected via PCM stream lock

 * for avoiding the race with trigger callback.

 * If the state is unset and a trigger is pending while the previous operation,

 * process the pending trigger action here.

/**

 * snd_soc_runtime_action() - Increment/Decrement active count for

 * PCM runtime components

 * @rtd: ASoC PCM runtime that is activated

 * @stream: Direction of the PCM stream

 * @action: Activate stream if 1. Deactivate if -1.

 *

 * Increments/Decrements the active count for all the DAIs and components

 * attached to a PCM runtime.

 * Should typically be called when a stream is opened.

 *

 * Must be called with the rtd->card->pcm_mutex being held

/**

 * snd_soc_runtime_ignore_pmdown_time() - Check whether to ignore the power down delay

 * @rtd: The ASoC PCM runtime that should be checked.

 *

 * This function checks whether the power down delay should be ignored for a

 * specific PCM runtime. Returns true if the delay is 0, if it the DAI link has

 * been configured to ignore the delay, or if none of the components benefits

 * from having the delay.

/**

 * snd_soc_set_runtime_hwparams - set the runtime hardware parameters

 * @substream: the pcm substream

 * @hw: the hardware parameters

 *

 * Sets the substream runtime hardware parameters.

 DPCM stream event, send event to FE and all active BEs. */

 reject unmatched parameters when applying symmetry */

 setup hw->rate_min/max via hw->rates first */

 update hw->rate_min/max by snd_soc_pcm_stream */

/**

 * snd_soc_runtime_calc_hw() - Calculate hw limits for a PCM stream

 * @rtd: ASoC PCM runtime

 * @hw: PCM hardware parameters (output)

 * @stream: Direction of the PCM stream

 *

 * Calculates the subset of stream parameters supported by all DAIs

 * associated with the PCM stream.

 first calculate min/max only for CPUs in the DAI link */

		/*

		 * Skip CPUs which don't support the current stream type.

		 * Otherwise, since the rate, channel, and format values will

		 * zero in that case, we would have no usable settings left,

		 * causing the resulting setup to fail.

 second calculate min/max only for CODECs in the DAI link */

		/*

		 * Skip CODECs which don't support the current stream type.

		 * Otherwise, since the rate, channel, and format values will

		 * zero in that case, we would have no usable settings left,

		 * causing the resulting setup to fail.

 Verify both a valid CPU DAI and a valid CODEC DAI were found */

	/*

	 * chan min/max cannot be enforced if there are multiple CODEC DAIs

	 * connected to CPU DAI(s), use CPU DAI's directly and let

	 * channel allocation be fixed up later

	/*

	 * At least one CPU and one CODEC should match. Otherwise, we should

	 * have bailed out on a higher level, since there would be no CPU or

	 * CODEC to support the transfer direction in that case.

 use last ret */

/*

 * Called by ALSA when a PCM substream is closed. Private data can be

 * freed here. The cpu DAI, codec DAI, machine and components are also

 * shutdown.

/*

 * Called by ALSA when a PCM substream is opened, the runtime->hw record is

 * then initialized and any private data can be allocated. This also calls

 * startup for the cpu DAI, component, machine and codec DAI.

 startup the audio subsystem */

 Dynamic PCM DAI links compat checks use dynamic capabilities */

 Check that the codec and cpu DAIs are compatible */

 Symmetry only applies if we've already got an active stream. */

	/*

	 * Currently nothing to do for c2c links

	 * Since c2c links are internal nodes in the DAPM graph and

	 * don't interface with the outside world or application layer

	 * we don't have to do any special handling on close.

/*

 * Called by ALSA when the PCM substream is prepared, can set format, sample

 * rate, etc.  This function is non atomic and can be called multiple times,

 * it can refer to the runtime info.

 cancel any delayed stream shutdown that is pending */

 clear the corresponding DAIs parameters when going to be inactive */

 run the stream event */

 free any machine hw params */

 free any component resources */

 now free hw params for the DAIs  */

/*

 * Frees resources allocated by hw_params, can be called multiple times

/*

 * Called by ALSA when the hardware params are set by application. This

 * function can also be called multiple times and can allocate buffers

 * (using snd_pcm_lib_* ). It's non-atomic.

		/*

		 * Skip CODECs which don't support the current stream type,

		 * the idea being that if a CODEC is not used for the currently

		 * set up transfer direction, it should not need to be

		 * configured, especially since the configuration used might

		 * not even be supported by that CODEC. There may be cases

		 * however where a CODEC needs to be set up although it is

		 * actually not being used for the transfer, e.g. if a

		 * capture-only CODEC is acting as an LRCLK and/or BCLK master

		 * for the DAI link including a playback-only CODEC.

		 * If this becomes necessary, we will have to augment the

		 * machine driver setup with information on how to act, so

		 * we can do the right thing here.

 copy params for each codec */

 fixup params based on TDM slot masks */

		/*

		 * Skip CPUs which don't support the current stream

		 * type. See soc_pcm_init_runtime_hw() for more details

 store the parameters for each DAI */

/*

 * soc level wrapper for pointer callback

 * If cpu_dai, codec_dai, component driver has the delay callback, then

 * the runtime->delay will be updated accordingly.

 clearing the previous total delay */

 base delay if assigned in pointer callback */

 connect a FE and BE */

 only add new dpcms */

 reparent a BE onto another FE */

 reparent if BE is connected to other FEs */

 disconnect a BE and FE */

 BEs still alive need new FE */

 get BE for DAI widget and stream */

 Widget provided is not a BE */

 adjust dir to stream */

 get number of valid DAI paths and their widgets */

 is there a valid DAI widget for this BE */

		/*

		 * The BE is pruned only if none of the dai

		 * widgets are in the active list.

 Destroy any old FE <--> BE connections */

 Create any new FE <--> BE connections */

 is there a valid BE rtd for this widget */

 don't connect if FE is not running */

		/*

		 * Filter for systems with 'component_chaining' enabled.

		 * This helps to avoid unnecessary re-configuration of an

		 * already active BE on such systems.

 newly connected FE and BE */

 already connected */

 new */

/*

 * Find the corresponding BE DAIs that source or sink audio to this

 * FE substream.

 disable any enabled and non active backends */

 is this op for this BE ? */

 only startup BE DAIs that are either sinks or sources to this FE DAI */

 is this op for this BE ? */

 first time the dpcm is open ? */

		/*

		 * Skip CPUs which don't support the current stream

		 * type. See soc_pcm_init_runtime_hw() for more details

	/*

	 * It returns merged BE codec format

	 * if FE want to use it (= dpcm_merged_format)

			/*

			 * Skip CODECs which don't support the current stream

			 * type. See soc_pcm_init_runtime_hw() for more details

	/*

	 * It returns merged BE codec channel;

	 * if FE want to use it (= dpcm_merged_chan)

			/*

			 * Skip CPUs which don't support the current stream

			 * type. See soc_pcm_init_runtime_hw() for more details

		/*

		 * chan min/max cannot be enforced if there are multiple CODEC

		 * DAIs connected to a single CPU DAI, use CPU DAI's directly

	/*

	 * It returns merged BE codec channel;

	 * if FE want to use it (= dpcm_merged_chan)

			/*

			 * Skip DAIs which don't support the current stream

			 * type. See soc_pcm_init_runtime_hw() for more details

 apply symmetry for FE */

 Symmetry only applies if we've got an active stream. */

 apply symmetry for BE */

 A backend may not have the requested substream */

 Symmetry only applies if we've got an active stream. */

 start the DAI frontend */

 shutdown the BEs */

 now shutdown the frontend */

 run the stream stop event */

	/* only hw_params backends that are either sinks or sources

 is this op for this BE ? */

 only free hw when no longer used - check all FEs */

 do not free hw if this BE is used by other FE */

 call hw_free on the frontend */

	/* only hw_params backends that are either sinks or sources

 is this op for this BE ? */

 copy params for each dpcm */

 perform any hw_params fixups */

 copy the fixed-up hw params for BE dai */

 only allow hw_params() if no connected FEs are running */

 disable any enabled and non active backends */

 only allow hw_free() if no connected FEs are running */

 call hw_params on the frontend */

 is this op for this BE ? */

 call trigger on the frontend before the backend. */

 call trigger on the frontend after the backend. */

 bespoke trigger() - handles both FE and BEs */

	/* if FE's runtime_update is already set, we're in race;

	 * process this trigger later at exit

 delayed, assuming it's successful */

 we're alone, let's trigger */

 is this op for this BE ? */

 there is no point preparing this FE if there are no BEs */

 call prepare on the frontend */

 call bespoke trigger - FE takes care of all BE triggers */

 run the stream event for each BE */

 Only start the BE if the FE is ready */

 startup must always be called for new BEs */

 keep going if FE state is > open */

 keep going if FE state is > hw_params */

 run the stream event for each BE */

 keep going if FE state is > prepare */

 call trigger on the frontend - FE takes care of all BE triggers */

 disconnect any pending BEs */

 is this op for this BE ? */

 only check active links */

 DAPM sync will call this to update DSP paths */

 skip if FE doesn't have playback/capture capability */

 skip if FE isn't currently playing/capturing */

 update any playback/capture paths */

/* Called by DAPM mixer/mux changes to update audio routing between PCMs and

 * any DAI links.

 shutdown all old paths first */

 bring new paths up */

 mark FE's links ready to prune */

 calculate valid and active FE <-> BE dpcms */

 Adapt stream for codec2codec links */

 create the PCM */

 create a new pcm */

 DAPM dai link stream work */

 ASoC PCM operations */

 is the current PCM operation for this FE ? */

 is the current PCM operation for this BE ? */

 get the substream for this BE */

 it's safe to do this BE DAI */

/*

 * We can only hw_free, stop, pause or suspend a BE DAI if any of it's FE

 * are not running, paused or suspended for the specified stream direction.

/*

 * We can only change hw params a BE DAI if any of it's FE are not prepared,

 * running, paused or suspended for the specified stream direction.

 SPDX-License-Identifier: GPL-2.0+



 soc-compress.c  --  ALSA SoC Compress



 Copyright (C) 2012 Intel Corp.



 Authors: Namarta Kohli <namartax.kohli@intel.com>

          Ramesh Babu K V <ramesh.babu@linux.intel.com>

          Vinod Koul <vinod.koul@linux.intel.com>

 SND_COMPRESS_xxx is same as SNDRV_PCM_STREAM_xxx */

 SND_COMPRESS_xxx is same as SNDRV_PCM_STREAM_xxx */

 SND_COMPRESS_xxx is same as SNDRV_PCM_STREAM_xxx */

 calculate valid and active FE <-> BE dpcms */

 clean up all links */

 SND_COMPRESS_xxx is same as SNDRV_PCM_STREAM_xxx */

 mark FE's links ready to prune */

 SND_COMPRESS_xxx is same as SNDRV_PCM_STREAM_xxx */

 SND_COMPRESS_xxx is same as SNDRV_PCM_STREAM_xxx */

 SND_COMPRESS_xxx is same as SNDRV_PCM_STREAM_xxx */

	/*

	 * First we call set_params for the CPU DAI, then the component

	 * driver this should configure the SoC side. If the machine has

	 * compressed ops then we call that as well. The expectation is

	 * that these callbacks will configure everything for this compress

	 * path, like configuring a PCM port for a CODEC.

 cancel any delayed stream shutdown that is pending */

 SND_COMPRESS_xxx is same as SNDRV_PCM_STREAM_xxx */

	/*

	 * Create an empty hw_params for the BE as the machine driver must

	 * fix this up to match DSP decoder and ASRC configuration.

	 * I.e. machine driver fixup for compressed BE is mandatory.

 ASoC Compress operations */

 ASoC Dynamic Compress operations */

/**

 * snd_soc_new_compress - create a new compress.

 *

 * @rtd: The runtime for which we will create compress

 * @num: the device index number (zero based - shared with normal PCMs)

 *

 * Return: 0 for success, else error.

	/*

	 * make sure these are same value,

	 * and then use these as equally

 check client and interface hw capabilities */

	/*

	 * Compress devices are unidirectional so only one of the directions

	 * should be set, check for that (xor)

 DAPM dai link stream work */

 SPDX-License-Identifier: GPL-2.0+



 soc-ac97.c  --  ALSA SoC Audio Layer AC97 support



 Copyright 2005 Wolfson Microelectronics PLC.

 Copyright 2005 Openedhand Ltd.

 Copyright (C) 2010 Slimlogic Ltd.

 Copyright (C) 2010 Texas Instruments Inc.



 Author: Liam Girdwood <lrg@slimlogic.co.uk>

         with code, comments and ideas from :-

         Richard Purdie <richard@openedhand.com>

 Gets initialized in snd_soc_set_ac97_ops() */

/**

 * snd_soc_alloc_ac97_component() - Allocate new a AC'97 device

 * @component: The COMPONENT for which to create the AC'97 device

 *

 * Allocated a new snd_ac97 device and intializes it, but does not yet register

 * it. The caller is responsible to either call device_add(&ac97->dev) to

 * register the device, or to call put_device(&ac97->dev) to free the device.

 *

 * Returns: A snd_ac97 device or a PTR_ERR in case of an error.

/**

 * snd_soc_new_ac97_component - initailise AC97 device

 * @component: audio component

 * @id: The expected device ID

 * @id_mask: Mask that is applied to the device ID before comparing with @id

 *

 * Initialises AC97 component resources for use by ad-hoc devices only.

 *

 * If @id is not 0 this function will reset the device, then read the ID from

 * the device and check if it matches the expected ID. If it doesn't match an

 * error will be returned and device will not be registered.

 *

 * Returns: A PTR_ERR() on failure or a valid snd_ac97 struct on success.

/**

 * snd_soc_free_ac97_component - free AC97 component device

 * @ac97: snd_ac97 device to be freed

 *

 * Frees AC97 component device resources.

/**

 * snd_soc_set_ac97_ops_of_reset - Set ac97 ops with generic ac97 reset functions

 * @ops: bus ops

 * @pdev: platform device

 *

 * This function sets the reset and warm_reset properties of ops and parses

 * the device node of pdev to get pinctrl states and gpio numbers to use.

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2010-2011,2013-2015 The Linux Foundation. All rights reserved.

 *

 * lpass-platform.c -- ALSA SoC platform driver for QTi LPASS

 Handle per channel interrupts */

 Handle per channel interrupts */

 ensure audio hardware is disabled */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2010-2011,2013-2015 The Linux Foundation. All rights reserved.

 *

 * lpass-cpu.c -- ALSA SoC CPU DAI driver for QTi LPASS

/*

 * Channel maps for Quad channel playbacks on MI2S Secondary

	/*

	 * Ensure LRCLK is disabled even in device node validation.

	 * Will not impact if disabled in lpass_cpu_daiops_trigger()

	 * suspend.

	/*

	 * BCLK may not be enabled if lpass_cpu_daiops_prepare is called before

	 * lpass_cpu_daiops_shutdown. It's paired with the clk_enable in

	 * lpass_cpu_daiops_prepare.

		/*

		 * Ensure lpass BCLK/LRCLK is enabled during

		 * device resume as lpass_cpu_daiops_prepare() is not called

		 * after the device resumes. We don't check mi2s_was_prepared before

		 * enable/disable BCLK in trigger events because:

		 *  1. These trigger events are paired, so the BCLK

		 *     enable_count is balanced.

		 *  2. the BCLK can be shared (ex: headset and headset mic),

		 *     we need to increase the enable_count so that we don't

		 *     turn off the shared BCLK while other devices are using

		 *     it.

		/*

		 * To ensure lpass BCLK/LRCLK is disabled during

		 * device suspend.

	/*

	 * Ensure lpass BCLK/LRCLK is enabled bit before playback/capture

	 * data flow starts. This allows other codec to have some delay before

	 * the data flow.

	 * (ex: to drop start up pop noise before capture starts).

	/*

	 * Check mi2s_was_prepared before enabling BCLK as lpass_cpu_daiops_prepare can

	 * be called multiple times. It's paired with the clk_disable in

	 * lpass_cpu_daiops_shutdown.

 ensure audio hardware is disabled */

 Allow all channels by default for backwards compatibility */

 Allocation for i2sctl regmap fields */

 Initialize bitfields for dai I2SCTL register */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2015 The Linux Foundation. All rights reserved.

 Configure the Quat MI2S to TLMM */

 Clear TLMM_WS_OUT_SEL and TLMM_WS_EN_SEL fields */

 Configure the Sec MI2S to TLMM */

 Set default mclk for internal codec */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2020 The Linux Foundation. All rights reserved.

 *

 * lpass-hdmi.c -- ALSA SoC HDMI-CPU DAI driver for QTi LPASS HDMI

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2020, The Linux Foundation. All rights reserved.

 *

 * lpass-sc7180.c -- ALSA SoC platform-machine driver for QTi LPASS

 SPDX-License-Identifier: GPL-2.0

/*

 * Copyright (c) 2018, The Linux Foundation. All rights reserved.

 Ignore unsupported */

		/*

		 * Use ASRC for internal clocks, as PLL rate isn't multiple

		 * of BCLK.

	/*

	 * Codec SLIMBUS configuration

	 * RX1, RX2, RX3, RX4, RX5, RX6, RX7, RX8, RX9, RX10, RX11, RX12, RX13

	 * TX1, TX2, TX3, TX4, TX5, TX6, TX7, TX8, TX9, TX10, TX11, TX12, TX13

	 * TX14, TX15, TX16

	/**

	 * NOTE: there is a strict hw requirement about the ordering of port

	 * enables and actual WSA881x PA enable. PA enable should only happen

	 * after soundwire ports are enabled if not DC on the line is

	 * accumulated resulting in Click/Pop Noise

	 * PA enable/mute are handled as part of codec DAPM and digital mute.

 Allocate the private data */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2010-2011,2013-2015 The Linux Foundation. All rights reserved.

 *

 * storm.c -- ALSA SoC machine driver for QTi ipq806x-based Storm board

	/*

	 * as the CPU DAI is the I2S bus master and no system clock is needed by

	 * the MAX98357a DAC, simply set the system clock to be a constant

	 * multiple of the bit clock for the clock divider

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2018, Linaro Limited

	/*

	 * Codec SLIMBUS configuration

	 * RX1, RX2, RX3, RX4, RX5, RX6, RX7, RX8, RX9, RX10, RX11, RX12, RX13

	 * TX1, TX2, TX3, TX4, TX5, TX6, TX7, TX8, TX9, TX10, TX11, TX12, TX13

	 * TX14, TX15, TX16

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2010-2011,2013-2015 The Linux Foundation. All rights reserved.

 *

 * lpass-apq8016.c -- ALSA SoC CPU DAI driver for APQ8016 LPASS

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2018, Linaro Limited.

 Copyright (c) 2018, The Linux Foundation. All rights reserved.

 Deprecated, only for compatibility with old device trees */

 DAPM routes */

 Deprecated, only for compatibility with old device trees */

 Populate links */

 Allocate the DAI link array */

 DPCM backend */

 DPCM frontend */

 DPCM */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (c) 2010-2011,2013-2015 The Linux Foundation. All rights reserved.

 *

 * lpass-ipq806x.c -- ALSA SoC CPU DAI driver for QTi LPASS

 * Splited out the IPQ8064 soc specific from lpass-cpu.c

 Capture currently not implemented */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2020, Linaro Limited

	/**

	 * NOTE: there is a strict hw requirement about the ordering of port

	 * enables and actual WSA881x PA enable. PA enable should only happen

	 * after soundwire ports are enabled if not DC on the line is

	 * accumulated resulting in Click/Pop Noise

	 * PA enable/mute are handled as part of codec DAPM and digital mute.

 Allocate the private data */

 SPDX-License-Identifier: GPL-2.0-only



 Copyright (c) 2020, The Linux Foundation. All rights reserved.



 sc7180.c -- ALSA SoC Machine driver for SC7180

 Configure PLL1 for codec */

 Configure sysclk for codec */

 Allocate the private data */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.

 Copyright (c) 2018, Linaro Limited

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2021, Linaro Limited

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2020, Linaro Limited

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.

 Copyright (c) 2018, Linaro Limited

 Default values used if user space does not set */

 IRQ position */

 Encoding source bit mask */

 Conventional and unconventional sample rate supported */

 rate and channels are sent to audio driver */

 clear the previous setup if any  */

 Queue the buffers */

 DSP expects stream id from 1 */

 Ensure that buffer size is a multiple of period size */

				/*

				 * Close old stream and make it stale, switch

				 * the active stream now!

				/*

				 * vaild stream ids start from 1, So we are

				 * toggling this between 1 and 2.

 DSP expects stream id from 1 */

 Mono Center */

 Stereo FL/FR */

 check the codec profile */

	/**

	 * Make sure that next track data pointer is aligned at 32 bit boundary

	 * This is a Mandatory requirement from DSP data buffers alignment

 Kick off the data to dsp if its starving!! */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.

 Copyright (c) 2018, Linaro Limited

/**

 * q6routing_stream_open() - Register a new stream for route setup

 *

 * @fedai_id: Frontend dai id.

 * @perf_mode: Performance mode.

 * @stream_id: ASM stream id to map.

 * @stream_type: Direction of stream

 *

 * Return: Will be an negative on error or a zero on success.

 only RX needs to use payload */

/**

 * q6routing_stream_close() - Deregister a stream

 *

 * @fedai_id: Frontend dai id.

 * @stream_type: Direction of stream

 *

 * Return: Will be an negative on error or a zero on success.

 Mixer definitions */

 default value */

 dummy */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2020, Linaro Limited

 Sub Graph ID */

 Find if there is already a matching sub-graph */

 add to container list */

 alloc module id dynamically */

 add to module list */

 Already parsed data for this sub-graph */

 Sub graph is associated with predefined graph */

 Sub graph is associated with predefined graph */

 Error or Already parsed container data */

 common module info */

 ignore other tokens */

 apply gain after power up of widget */

 virtual widget */

 Graph Info has N sub-graphs, sub-graph has N containers, Container has N Modules */

 if no modules in the container then remove it */

 check if there are no more containers in the sub graph and remove it */

 Check if there are no more sub-graphs left then remove graph info */

 TBD */

 DAI link - used for any driver specific init */

 Ignore other tokens */

 Inline with Qualcomm UCM configs and linux-firmware path */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2021, Linaro Limited

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.

 Copyright (c) 2018, Linaro Limited

 AFE CMDs */

 I2S config specific */

 Port IDs */

 Clock set API version */

 SLIMbus Rx port on channel 0. */

 SLIMbus Tx port on channel 0. */

 SLIMbus Rx port on channel 1. */

 SLIMbus Tx port on channel 1. */

 SLIMbus Rx port on channel 2. */

 SLIMbus Tx port on channel 2. */

 SLIMbus Rx port on channel 3. */

 SLIMbus Tx port on channel 3. */

 SLIMbus Rx port on channel 4. */

 SLIMbus Tx port on channel 4. */

 SLIMbus Rx port on channel 5. */

 SLIMbus Tx port on channel 5. */

 SLIMbus Rx port on channel 6. */

 SLIMbus Tx port on channel 6. */

 Start of the range of port IDs for TDM devices. */

 End of the range of port IDs for TDM devices. */

 Size of the range of port IDs for TDM ports. */

 AFE WSA Codec DMA Rx port 0 */

 AFE WSA Codec DMA Tx port 0 */

 AFE WSA Codec DMA Rx port 1 */

 AFE WSA Codec DMA Tx port 1 */

 AFE WSA Codec DMA Tx port 2 */

 AFE VA Codec DMA Tx port 0 */

 AFE VA Codec DMA Tx port 1 */

 AFE VA Codec DMA Tx port 2 */

 AFE Rx Codec DMA Rx port 0 */

 AFE Tx Codec DMA Tx port 0 */

 AFE Rx Codec DMA Rx port 1 */

 AFE Tx Codec DMA Tx port 1 */

 AFE Rx Codec DMA Rx port 2 */

 AFE Tx Codec DMA Tx port 2 */

 AFE Rx Codec DMA Rx port 3 */

 AFE Tx Codec DMA Tx port 3 */

 AFE Rx Codec DMA Rx port 4 */

 AFE Tx Codec DMA Tx port 4 */

 AFE Rx Codec DMA Rx port 5 */

 AFE Tx Codec DMA Tx port 5 */

 AFE Rx Codec DMA Rx port 6 */

 AFE Rx Codec DMA Rx port 7 */

 Reserved for 32-bit alignment. This field must be set to 0.*/

/* Minor version used for tracking the version of the SLIMBUS

 * configuration interface.

 * Supported values: #AFE_API_VERSION_SLIMBUS_CONFIG

/* SLIMbus hardware device ID, which is required to handle

 * multiple SLIMbus hardware blocks.

 * Supported values: - #AFE_SLIMBUS_DEVICE_1 - #AFE_SLIMBUS_DEVICE_2

/* Bit width of the sample.

 * Supported values: 16, 24

/* Data format supported by the SLIMbus hardware. The default is

 * 0 (#AFE_SB_DATA_FORMAT_NOT_INDICATED), which indicates the

 * hardware does not perform any format conversions before the data

 * transfer.

/* Number of channels.

 * Supported values: 1 to #AFE_PORT_MAX_AUDIO_CHAN_CNT

/* Mapping of shared channel IDs (128 to 255) to which the

 * master port is to be connected.

 * Shared_channel_mapping[i] represents the shared channel assigned

 * for audio channel i in multichannel audio data.

/* Sampling rate of the port.

 * Supported values:

 * - #AFE_PORT_SAMPLE_RATE_8K

 * - #AFE_PORT_SAMPLE_RATE_16K

 * - #AFE_PORT_SAMPLE_RATE_48K

 * - #AFE_PORT_SAMPLE_RATE_96K

 * - #AFE_PORT_SAMPLE_RATE_192K

/*

 * Mapping between Virtual Port IDs to DSP AFE Port ID

 * On B Family SoCs DSP Port IDs are consistent across multiple SoCs

 * on A Family SoCs DSP port IDs are same as virtual Port IDs.

/**

 * q6afe_get_port_id() - Get port id from a given port index

 *

 * @index: port index

 *

 * Return: Will be an negative on error or valid port_id on success

/**

 * q6afe_port_stop() - Stop a afe port

 *

 * @port: Instance of port to stop

 *

 * Return: Will be an negative on packet size on success.

/**

 * q6afe_slim_port_prepare() - Prepare slim afe port.

 *

 * @port: Instance of afe port

 * @cfg: SLIM configuration for the afe port

 *

/**

 * q6afe_tdm_port_prepare() - Prepare tdm afe port.

 *

 * @port: Instance of afe port

 * @cfg: TDM configuration for the afe port

 *

/**

 * q6afe_hdmi_port_prepare() - Prepare hdmi afe port.

 *

 * @port: Instance of afe port

 * @cfg: HDMI configuration for the afe port

 *

/**

 * q6afe_i2s_port_prepare() - Prepare i2s afe port.

 *

 * @port: Instance of afe port

 * @cfg: I2S configuration for the afe port

 * Return: Will be an negative on error and zero on success.

 CPU is slave */

/**

 * q6afe_cdc_dma_port_prepare() - Prepare dma afe port.

 *

 * @port: Instance of afe port

 * @cfg: DMA configuration for the afe port

 *

/**

 * q6afe_port_start() - Start a afe port

 *

 * @port: Instance of port to start

 *

 * Return: Will be an negative on packet size on success.

/**

 * q6afe_port_get_from_id() - Get port instance from a port id

 *

 * @dev: Pointer to afe child device.

 * @id: port id

 *

 * Return: Will be an error pointer on error or a valid afe port

 * on success.

 if port is multiple times bind/unbind before callback finishes */

/**

 * q6afe_port_put() - Release port reference

 *

 * @port: Instance of port to put

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2020, Linaro Limited

 SubGraph Config */

 container config */

 Capability ID list */

 Container graph Position */

 Container Stack size */

 Container proc domain id */

 Module List config */

 Modules list cfg */

 Module list config array */

 Module Properties */

 Module Connections */

 num of channels as argument */

 Container Config */

 Capability list */

 Graph Position */

 Stack size */

 Proc domain */

 Perf Mode */

 Direction */

 Scenario ID */

 get the first module from both connected or un-connected containers */

 SubGraph */

 Container */

 Module List*/

 Module Properties */

 Module Connections */

 DSP successfully finished the command */

 LPASS Codec DMA port Module Media Format Setup */

 CPU is slave */

 DSP expects size should be aligned to 4K */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.

 Copyright (c) 2018, Linaro Limited

 for ADSP2.8 and above */

 assume that the adsp is up if we not support this command */

/**

 * q6core_get_svc_api_info() - Get version number of a service.

 *

 * @svc_id: service id of the service.

 * @ainfo: Valid struct pointer to fill svc api information.

 *

 * Return: zero on success and error code on failure or unsupported

/**

 * q6core_is_adsp_ready() - Get status of adsp

 *

 * Return: Will be an true if adsp is ready and false if not.

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.

 Copyright (c) 2018, Linaro Limited

 Bit shift for the stream_perf_mode subfield. */

 tunnel read write mode */

 tunnel read write mode */

 size of buffer */

 idx:1 out port, 0: in port */

/**

 * q6asm_unmap_memory_regions() - unmap memory regions in the dsp.

 *

 * @dir: direction of audio stream

 * @ac: audio client instanace

 *

 * Return: Will be an negative value on failure or zero on success

 DSP expects size should be aligned to 4K */

/**

 * q6asm_map_memory_regions() - map memory regions in the dsp.

 *

 * @dir: direction of audio stream

 * @ac: audio client instanace

 * @phys: physical address that needs mapping.

 * @period_sz: audio period size

 * @periods: number of periods

 *

 * Return: Will be an negative value on failure or zero on success

/**

 * q6asm_audio_client_free() - Freee allocated audio client

 *

 * @ac: audio client to free

 check for valid session */

 Audio client might already be freed by now */

/**

 * q6asm_get_session_id() - get session id for audio client

 *

 * @c: audio client pointer

 *

 * Return: Will be an session id of the audio client.

/**

 * q6asm_audio_client_alloc() - Allocate a new audio client

 *

 * @dev: Pointer to asm child device.

 * @cb: event callback.

 * @priv: private data associated with this client.

 * @session_id: session id

 * @perf_mode: performace mode for this client

 *

 * Return: Will be an error pointer on error or a valid audio client

 * on success.

/**

 * q6asm_open_write() - Open audio client for writing

 * @ac: audio client pointer

 * @stream_id: stream id of q6asm session

 * @format: audio sample format

 * @codec_profile: compressed format profile

 * @bits_per_sample: bits per sample

 * @is_gapless: flag to indicate if this is a gapless stream

 *

 * Return: Will be an negative value on error or zero on success

 source endpoint : matrix */

/**

 * q6asm_run() - start the audio client

 *

 * @ac: audio client pointer

 * @stream_id: stream id of q6asm session

 * @flags: flags associated with write

 * @msw_ts: timestamp msw

 * @lsw_ts: timestamp lsw

 *

 * Return: Will be an negative value on error or zero on success

/**

 * q6asm_run_nowait() - start the audio client withou blocking

 *

 * @ac: audio client pointer

 * @stream_id: stream id

 * @flags: flags associated with write

 * @msw_ts: timestamp msw

 * @lsw_ts: timestamp lsw

 *

 * Return: Will be an negative value on error or zero on success

/**

 * q6asm_media_format_block_multi_ch_pcm() - setup pcm configuration

 *

 * @ac: audio client pointer

 * @stream_id: stream id

 * @rate: audio sample rate

 * @channels: number of audio channels.

 * @channel_map: channel map pointer

 * @bits_per_sample: bits per sample

 *

 * Return: Will be an negative value on error or zero on success

/**

 * q6asm_enc_cfg_blk_pcm_format_support() - setup pcm configuration for capture

 *

 * @ac: audio client pointer

 * @stream_id: stream id

 * @rate: audio sample rate

 * @channels: number of audio channels.

 * @bits_per_sample: bits per sample

 *

 * Return: Will be an negative value on error or zero on success

/**

 * q6asm_read() - read data of period size from audio client

 *

 * @ac: audio client pointer

 * @stream_id: stream id

 *

 * Return: Will be an negative value on error or zero on success

 Stream prio : High, provide meta info with encoded frames */

/**

 * q6asm_open_read() - Open audio client for reading

 *

 * @ac: audio client pointer

 * @stream_id: stream id

 * @format: audio sample format

 * @bits_per_sample: bits per sample

 *

 * Return: Will be an negative value on error or zero on success

/**

 * q6asm_write_async() - non blocking write

 *

 * @ac: audio client pointer

 * @stream_id: stream id

 * @len: length in bytes

 * @msw_ts: timestamp msw

 * @lsw_ts: timestamp lsw

 * @wflags: flags associated with write

 *

 * Return: Will be an negative value on error or zero on success

/**

 * q6asm_cmd() - run cmd on audio client

 *

 * @ac: audio client pointer

 * @stream_id: stream id

 * @cmd: command to run on audio client.

 *

 * Return: Will be an negative value on error or zero on success

/**

 * q6asm_cmd_nowait() - non blocking, run cmd on audio client

 *

 * @ac: audio client pointer

 * @stream_id: stream id

 * @cmd: command to run on audio client.

 *

 * Return: Will be an negative value on error or zero on success

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.

 Copyright (c) 2018, Linaro Limited

 Definition for a legacy device session. */

 Wait for the callback with copp id */

/**

 * q6adm_open() - open adm and grab a free copp

 *

 * @dev: Pointer to adm child device.

 * @port_id: port id

 * @path: playback or capture path.

 * @rate: rate at which copp is required.

 * @channel_mode: channel mode

 * @topology: adm topology id

 * @perf_mode: performace mode.

 * @bit_width: audio sample bit width

 * @app_type: Application type.

 * @acdb_id: ACDB id

 *

 * Return: Will be an negative on error or a valid copp pointer on success.

/**

 * q6adm_get_copp_id() - get copp index

 *

 * @copp: Pointer to valid copp

 *

 * Return: Will be an negative on error or a valid copp index on success.

/**

 * q6adm_matrix_map() - Map asm streams and afe ports using payload

 *

 * @dev: Pointer to adm child device.

 * @path: playback or capture path.

 * @payload_map: map between session id and afe ports.

 * @perf_mode: Performace mode.

 *

 * Return: Will be an negative on error or a zero on success.

 Assumes port_ids have already been validated during adm_open */

/**

 * q6adm_close() - Close adm copp

 *

 * @dev: Pointer to adm child device.

 * @copp: pointer to previously opened copp

 *

 * Return: Will be an negative on error or a zero on success.

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2020, Linaro Limited

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2020, Linaro Limited

 Graph Management */

 set src module in dst subgraph first module */

 remove topology */

 First word of result it state */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2020, Linaro Limited

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2021, Linaro Limited

 rx */

	/**

	 * It is recommend to load DSP with source graph first and then sink

	 * graph, so sequence for playback and capture will be different

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2021, Linaro Limited

 Buffer position */

 Encoding source bit mask */

 rate and channels are sent to audio driver */

 Queue the buffers for Capture ONLY after graph is started */

 Now that graph as been prepared and started update the internal state accordingly */

 start writing buffers for playback only as we already queued capture buffers */

 TODO support be handled via SoftPause Module */

 Ensure that buffer size is a multiple of period size */

 SPDX-License-Identifier: GPL-2.0

 Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.

 Copyright (c) 2018, Linaro Limited

 HDMI spec CEA-861-E: Table 28 Audio InfoFrame Data Byte 4 */

 HW only supports 16 and 32 bit slot width configuration */

 HW supports 1-32 slots configuration. Typical: 1, 2, 4, 8, 16, 32 */

 TDM RX dais ids are even and tx are odd */

 rx */

 rx */

 stop the port and restart with new port config */

 TX */

 MI2S specific properties */

 SPDX-License-Identifier: GPL-2.0



 test-component.c  --  Test Audio Component driver



 Copyright (C) 2020 Renesas Electronics Corporation

 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

	/*

	 * Select below from Sound Card, not auto

	 *	SND_SOC_POSSIBLE_DAIFMT_CBP_CFP

	 *	SND_SOC_POSSIBLE_DAIFMT_CBC_CFP

	 *	SND_SOC_POSSIBLE_DAIFMT_CBP_CFC

	 *	SND_SOC_POSSIBLE_DAIFMT_CBC_CFC

 Random values to keep userspace happy when checking constraints */

 BE's dont need dummy params */

 set substream later */

 mile_stone(component); */

 CPU */

 Codec */

	/*

	 * FIXME

	 *

	 * Just IN/OUT is OK for now,

	 * but need to be updated ?

 SPDX-License-Identifier: GPL-2.0



 simple-card-utils.c



 Copyright (c) 2016 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

 sampling rate convert */

 channels transfer */

		/*

		 * No dai-link level and master setting was not found from

		 * sound node level, revert back to legacy DT parsing and

		 * take the settings from codec node.

 Parse the card name from DT */

	/*

	 * Parse dai->sysclk come from "clocks = <&xxx>"

	 * (if system has common clock)

	 *  or "system-clock-frequency = <xxx>"

	 *  or device's module clock.

 Only Codecs */

 Assumes the capabilities are the same for all supported streams */

 Assumes platform == cpu */

	/*

	 * In soc_bind_dai_link() will check cpu name after

	 * of_node matching if dai_link has cpu_dai_name.

	 * but, it will never match if name was created by

	 * fmt_single_name() remove cpu_dai_name if cpu_args

	 * was 0. See:

	 *	fmt_single_name()

	 *	fmt_multiple_name()

 no widgets is not error */

	/*

	 * dais (= CPU+Codec)

	 * dlcs (= CPU+Codec+Platform)

 dummy CPU/Codec */

 Normal CPU */

 Codec2Codec */

 DPCM Be's CPU = dummy */

 Normal Codec */

 DPCM Be's Codec */

 DPCM Fe's Codec = dummy */

 Have Platform */

 Doesn't have Platform */

 np is "endpoint" or "port" */

 Module information */

 SPDX-License-Identifier: GPL-2.0



 audio-graph-card2-custom-sample.c



 Copyright (C) 2020 Renesas Electronics Corp.

 Copyright (C) 2020 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>



/*

 * Custom driver can have own priv

 * which includes asoc_simple_priv.

 custom driver's own params */

 You can get custom_priv from simple_priv */

 you can use generic probe function */

 You can custom before parsing */

 You can custom after parsing */

 overwrite .probe sample */

	/*

	 * You can custom Normal parsing

	 * before/affter audio_graph2_link_normal()

	/*

	 * You can custom DPCM parsing

	 * before/affter audio_graph2_link_dpcm()

	/*

	 * You can custom Codec2Codec parsing

	 * before/affter audio_graph2_link_c2c()

/*

 * audio-graph-card2 has many hooks for your customizing.

 You can use custom ops */

 customize dai_link ops */

 use audio-graph-card2 parsing with own custom hooks */

 customize more if needed */

 SPDX-License-Identifier: GPL-2.0



 ASoC audio graph sound card support



 Copyright (C) 2016 Renesas Solutions Corp.

 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>



 based on ${LINUX}/sound/soc/generic/simple-card.c

 use driver specified DAI ID if exist */

 use endpoint/port reg if exist */

		/*

		 * Because it will count port/endpoint if it doesn't have "reg".

		 * But, we can't judge whether it has "no reg", or "reg = <0>"

		 * only of_graph_parse_endpoint().

		 * We need to check "reg" property

	/*

	 * Non HDMI sound case, counting port/endpoint on its DT

	 * is enough. Let's count it.

 Get dai->name */

	/*

	 * FIXME

	 *

	 * Here, dlc->dai_name is pointer to CPU/Codec DAI name.

	 * If user unbinded CPU or Codec driver, but not for Sound Card,

	 * dlc->dai_name is keeping unbinded CPU or Codec

	 * driver's pointer.

	 *

	 * If user re-bind CPU or Codec driver again, ALSA SoC will try

	 * to rebind Card via snd_soc_try_rebind_card(), but because of

	 * above reason, it might can't bind Sound Card.

	 * Because Sound Card is pointing to released dai_name pointer.

	 *

	 * To avoid this rebind Card issue,

	 * 1) It needs to alloc memory to keep dai_name eventhough

	 *    CPU or Codec driver was unbinded, or

	 * 2) user need to rebind Sound Card everytime

	 *    if he unbinded CPU or Codec.

 Codec is dummy */

 FE settings */

		/*

		 * In BE<->BE connections it is not required to create

		 * PCM devices at CPU end of the dai link and thus 'no_pcm'

		 * flag needs to be set. It is useful when there are many

		 * BE components and some of these have to be connected to

		 * form a valid audio path.

		 *

		 * For example: FE <-> BE1 <-> BE2 <-> ... <-> BEn where

		 * there are 'n' BE components in the path.

 CPU is dummy */

 BE settings */

 check "prefix" from top node */

	/*

	 * It is DPCM

	 * if Codec port has many endpoints,

	 * or has convert-xxx property

 loop for all listed CPU port */

 loop for all CPU endpoint */

 get codec */

 get convert-xxx property */

 check if link requires DPCM parsing */

				/*

				 * Codec endpoint can be NULL for pluggable audio HW.

				 * Platform DT can populate the Codec endpoint depending on the

				 * plugged HW.

 Do it all CPU endpoint, and 1st Codec endpoint */

 else normal sound */

	/*

	 * Detect all CPU first, and Detect all Codec 2nd.

	 *

	 * In Normal sound case, all DAIs are detected

	 * as "CPU-Codec".

	 *

	 * In DPCM sound case,

	 * all CPUs   are detected as "CPU-dummy", and

	 * all Codecs are detected as "dummy-Codec".

	 * To avoid random sub-device numbering,

	 * detect "dummy-Codec" in last;

 1xCPU-Codec */

 1xCPU-dummy */

 1xdummy-Codec */

	/*

	 * link_num :	number of links.

	 *		CPU-Codec / CPU-dummy / dummy-Codec

	 * dais_num :	number of DAIs

	 * ccnf_num :	number of codec_conf

	 *		same number for "dummy-Codec"

	 *

	 * ex1)

	 * CPU0 --- Codec0	link : 5

	 * CPU1 --- Codec1	dais : 7

	 * CPU2 -/		ccnf : 1

	 * CPU3 --- Codec2

	 *

	 *	=> 5 links = 2xCPU-Codec + 2xCPU-dummy + 1xdummy-Codec

	 *	=> 7 DAIs  = 4xCPU + 3xCodec

	 *	=> 1 ccnf  = 1xdummy-Codec

	 *

	 * ex2)

	 * CPU0 --- Codec0	link : 5

	 * CPU1 --- Codec1	dais : 6

	 * CPU2 -/		ccnf : 1

	 * CPU3 -/

	 *

	 *	=> 5 links = 1xCPU-Codec + 3xCPU-dummy + 1xdummy-Codec

	 *	=> 6 DAIs  = 4xCPU + 2xCodec

	 *	=> 1 ccnf  = 1xdummy-Codec

	 *

	 * ex3)

	 * CPU0 --- Codec0	link : 6

	 * CPU1 -/		dais : 6

	 * CPU2 --- Codec1	ccnf : 2

	 * CPU3 -/

	 *

	 *	=> 6 links = 0xCPU-Codec + 4xCPU-dummy + 2xdummy-Codec

	 *	=> 6 DAIs  = 4xCPU + 2xCodec

	 *	=> 2 ccnf  = 2xdummy-Codec

	 *

	 * ex4)

	 * CPU0 --- Codec0 (convert-rate)	link : 3

	 * CPU1 --- Codec1			dais : 4

	 *					ccnf : 1

	 *

	 *	=> 3 links = 1xCPU-Codec + 1xCPU-dummy + 1xdummy-Codec

	 *	=> 4 DAIs  = 2xCPU + 2xCodec

	 *	=> 1 ccnf  = 1xdummy-Codec

 Allocate the private data and the DAI link array */

 SPDX-License-Identifier: GPL-2.0



 ASoC simple sound card support



 Copyright (C) 2012 Renesas Solutions Corp.

 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

	/*

	 * Get node via "sound-dai = <&phandle port>"

	 * it will be used as xxx_of_node on soc_bind_dai_link()

	/*

	 * FIXME

	 *

	 * Here, dlc->dai_name is pointer to CPU/Codec DAI name.

	 * If user unbinded CPU or Codec driver, but not for Sound Card,

	 * dlc->dai_name is keeping unbinded CPU or Codec

	 * driver's pointer.

	 *

	 * If user re-bind CPU or Codec driver again, ALSA SoC will try

	 * to rebind Card via snd_soc_try_rebind_card(), but because of

	 * above reason, it might can't bind Sound Card.

	 * Because Sound Card is pointing to released dai_name pointer.

	 *

	 * To avoid this rebind Card issue,

	 * 1) It needs to alloc memory to keep dai_name eventhough

	 *    CPU or Codec driver was unbinded, or

	 * 2) user need to rebind Sound Card everytime

	 *    if he unbinded CPU or Codec.

 For single DAI link & old style of DT node */

 Codec is dummy */

 FE settings */

 CPU is dummy */

 BE settings */

 check "prefix" from top node */

 For single DAI link & old style of DT node */

 Check if it has dai-link */

 loop for all dai-link */

 get codec */

 get platform */

 get convert-xxx property */

 loop for all CPU/Codec node */

			/*

			 * It is DPCM

			 * if it has many CPUs,

			 * or has convert-xxx property

				/*

				 * np

				 *	 |1(CPU)|0(Codec)  li->cpu

				 * CPU	 |Pass  |return

				 * Codec |return|Pass

 else normal sound */

				/*

				 * np

				 *	 |1(CPU)|0(Codec)  li->cpu

				 * CPU	 |Pass  |return

				 * Codec |return|return

	/*

	 * Detect all CPU first, and Detect all Codec 2nd.

	 *

	 * In Normal sound case, all DAIs are detected

	 * as "CPU-Codec".

	 *

	 * In DPCM sound case,

	 * all CPUs   are detected as "CPU-dummy", and

	 * all Codecs are detected as "dummy-Codec".

	 * To avoid random sub-device numbering,

	 * detect "dummy-Codec" in last;

 Single/Muti DAI link(s) & New style of DT node */

 CPU-dummy */

 dummy-Codec */

	/*

	 * link_num :	number of links.

	 *		CPU-Codec / CPU-dummy / dummy-Codec

	 * dais_num :	number of DAIs

	 * ccnf_num :	number of codec_conf

	 *		same number for "dummy-Codec"

	 *

	 * ex1)

	 * CPU0 --- Codec0	link : 5

	 * CPU1 --- Codec1	dais : 7

	 * CPU2 -/		ccnf : 1

	 * CPU3 --- Codec2

	 *

	 *	=> 5 links = 2xCPU-Codec + 2xCPU-dummy + 1xdummy-Codec

	 *	=> 7 DAIs  = 4xCPU + 3xCodec

	 *	=> 1 ccnf  = 1xdummy-Codec

	 *

	 * ex2)

	 * CPU0 --- Codec0	link : 5

	 * CPU1 --- Codec1	dais : 6

	 * CPU2 -/		ccnf : 1

	 * CPU3 -/

	 *

	 *	=> 5 links = 1xCPU-Codec + 3xCPU-dummy + 1xdummy-Codec

	 *	=> 6 DAIs  = 4xCPU + 2xCodec

	 *	=> 1 ccnf  = 1xdummy-Codec

	 *

	 * ex3)

	 * CPU0 --- Codec0	link : 6

	 * CPU1 -/		dais : 6

	 * CPU2 --- Codec1	ccnf : 2

	 * CPU3 -/

	 *

	 *	=> 6 links = 0xCPU-Codec + 4xCPU-dummy + 2xdummy-Codec

	 *	=> 6 DAIs  = 4xCPU + 2xCodec

	 *	=> 2 ccnf  = 2xdummy-Codec

	 *

	 * ex4)

	 * CPU0 --- Codec0 (convert-rate)	link : 3

	 * CPU1 --- Codec1			dais : 4

	 *					ccnf : 1

	 *

	 *	=> 3 links = 1xCPU-Codec + 1xCPU-dummy + 1xdummy-Codec

	 *	=> 4 DAIs  = 2xCPU + 2xCodec

	 *	=> 1 ccnf  = 1xdummy-Codec

 Allocate the private data and the DAI link array */

 SPDX-License-Identifier: GPL-2.0



 ASoC Audio Graph Card2 support



 Copyright (C) 2020 Renesas Electronics Corp.

 Copyright (C) 2020 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>



 based on ${LINUX}/sound/soc/generic/audio-graph-card.c

/************************************

	daifmt

 ************************************

	ports {

		format = "left_j";

		port@0 {

			bitclock-master;

			sample0: endpoint@0 {

				frame-master;

			};

			sample1: endpoint@1 {

				format = "i2s";

			};

		};

		...

	};



 You can set daifmt at ports/port/endpoint.

 It uses *latest* format, and *share* master settings.

 In above case,

	sample0: left_j, bitclock-master, frame-master

	sample1: i2s,    bitclock-master



 If there was no settings, *Codec* will be

 bitclock/frame provider as default.

 see

	graph_parse_daifmt().



 ************************************

	Normal Audio-Graph

 ************************************



 CPU <---> Codec



 sound {

	compatible = "audio-graph-card2";

	links = <&cpu>;

 };



 CPU {

	cpu: port {

		bitclock-master;

		frame-master;

		cpu_ep: endpoint { remote-endpoint = <&codec_ep>; }; };

 };



 Codec {

	port {	codec_ep: endpoint { remote-endpoint = <&cpu_ep>; }; };

 };



 ************************************

	Multi-CPU/Codec

 ************************************



It has connection part (= X) and list part (= y).

links indicates connection part of CPU side (= A).



	    +-+   (A)	     +-+

 CPU1 --(y) | | <-(X)--(X)-> | | (y)-- Codec1

 CPU2 --(y) | |		     | | (y)-- Codec2

	    +-+		     +-+



	sound {

		compatible = "audio-graph-card2";



(A)		links = <&mcpu>;



		multi {

			ports@0 {

(X) (A)			mcpu:	port@0 { mcpu0_ep: endpoint { remote-endpoint = <&mcodec0_ep>; }; };

(y)				port@1 { mcpu1_ep: endpoint { remote-endpoint = <&cpu1_ep>; }; };

(y)				port@1 { mcpu2_ep: endpoint { remote-endpoint = <&cpu2_ep>; }; };

			};

			ports@1 {

(X)				port@0 { mcodec0_ep: endpoint { remote-endpoint = <&mcpu0_ep>; }; };

(y)				port@0 { mcodec1_ep: endpoint { remote-endpoint = <&codec1_ep>; }; };

(y)				port@1 { mcodec2_ep: endpoint { remote-endpoint = <&codec2_ep>; }; };

			};

		};

	};



 CPU {

	ports {

		bitclock-master;

		frame-master;

		port@0 { cpu1_ep: endpoint { remote-endpoint = <&mcpu1_ep>; }; };

		port@1 { cpu2_ep: endpoint { remote-endpoint = <&mcpu2_ep>; }; };

	};

 };



 Codec {

	ports {

		port@0 { codec1_ep: endpoint { remote-endpoint = <&mcodec1_ep>; }; };

		port@1 { codec2_ep: endpoint { remote-endpoint = <&mcodec2_ep>; }; };

	};

 };



 ************************************

	DPCM

 ************************************



		DSP

	   ************

 PCM0 <--> * fe0  be0 * <--> DAI0: Codec Headset

 PCM1 <--> * fe1  be1 * <--> DAI1: Codec Speakers

 PCM2 <--> * fe2  be2 * <--> DAI2: MODEM

 PCM3 <--> * fe3  be3 * <--> DAI3: BT

	   *	  be4 * <--> DAI4: DMIC

	   *	  be5 * <--> DAI5: FM

	   ************



 sound {

	compatible = "audio-graph-card2";



	// indicate routing

	routing = "xxx Playback", "xxx Playback",

		  "xxx Playback", "xxx Playback",

		  "xxx Playback", "xxx Playback";



	// indicate all Front-End, Back-End

	links = <&fe0, &fe1, ...,

		 &be0, &be1, ...>;



	dpcm {

		// Front-End

		ports@0 {

			fe0: port@0 { fe0_ep: endpoint { remote-endpoint = <&pcm0_ep>; }; };

			fe1: port@1 { fe1_ep: endpoint { remote-endpoint = <&pcm1_ep>; }; };

			...

		};

		// Back-End

		ports@1 {

			be0: port@0 { be0_ep: endpoint { remote-endpoint = <&dai0_ep>; }; };

			be1: port@1 { be1_ep: endpoint { remote-endpoint = <&dai1_ep>; }; };

			...

		};

	};

 };



 CPU {

	ports {

		bitclock-master;

		frame-master;

		port@0 { pcm0_ep: endpoint { remote-endpoint = <&fe0_ep>; }; };

		port@1 { pcm1_ep: endpoint { remote-endpoint = <&fe1_ep>; }; };

		...

	};

 };



 Codec {

	ports {

		port@0 { dai0_ep: endpoint { remote-endpoint = <&be0_ep>; }; };

		port@1 { dai1_ep: endpoint { remote-endpoint = <&be1_ep>; }; };

		...

	};

 };



 ************************************

	Codec to Codec

 ************************************



 +--+

 |  |<-- Codec0 <- IN

 |  |--> Codec1 -> OUT

 +--+



 sound {

	compatible = "audio-graph-card2";



	routing = "OUT" ,"DAI1 Playback",

		  "DAI0 Capture", "IN";



	links = <&c2c>;



	codec2codec {

		ports {

			rate = <48000>;

		c2c:	port@0 { c2cf_ep: endpoint { remote-endpoint = <&codec0_ep>; }; };

			port@1 { c2cb_ep: endpoint { remote-endpoint = <&codec1_ep>; }; };

	};

 };



 Codec {

	ports {

		port@0 {

			bitclock-master;

			frame-master;

			 codec0_ep: endpoint { remote-endpoint = <&c2cf_ep>; }; };

		port@1 { codec1_ep: endpoint { remote-endpoint = <&c2cb_ep>; }; };

	};

 };



 don't use ! Use this only in __graph_get_type() */

	/*

	 * target {

	 *	ports {

	 * =>		lnk:	port@0 { ... };

	 *			port@1 { ... };

	 *	};

	 * };

 GRAPH_MULTI here means GRAPH_NORMAL */

	/*

	 * multi {

	 *	ports {

	 * =>	lnk:	port@0 { ... };

	 *		port@1 { ep { ... = rep0 } };

	 *		port@2 { ep { ... = rep1 } };

	 *		...

	 *	};

	 * };

	 *

	 * xxx {

	 *	port@0 { rep0 };

	 *	port@1 { rep1 };

	 * };

 use driver specified DAI ID if exist */

 use endpoint/port reg if exist */

		/*

		 * Because it will count port/endpoint if it doesn't have "reg".

		 * But, we can't judge whether it has "no reg", or "reg = <0>"

		 * only of_graph_parse_endpoint().

		 * We need to check "reg" property

	/*

	 * Non HDMI sound case, counting port/endpoint on its DT

	 * is enough. Let's count it.

 Get dai->name */

	/*

	 * FIXME

	 *

	 * Here, dlc->dai_name is pointer to CPU/Codec DAI name.

	 * If user unbinded CPU or Codec driver, but not for Sound Card,

	 * dlc->dai_name is keeping unbinded CPU or Codec

	 * driver's pointer.

	 *

	 * If user re-bind CPU or Codec driver again, ALSA SoC will try

	 * to rebind Card via snd_soc_try_rebind_card(), but because of

	 * above reason, it might can't bind Sound Card.

	 * Because Sound Card is pointing to released dai_name pointer.

	 *

	 * To avoid this rebind Card issue,

	 * 1) It needs to alloc memory to keep dai_name eventhough

	 *    CPU or Codec driver was unbinded, or

	 * 2) user need to rebind Sound Card everytime

	 *    if he unbinded CPU or Codec.

	/*

	 * set DAI Name

 run is_cpu only. see audio_graph2_link_normal() */

 run is_cpu only. see audio_graph2_link_c2c() */

	/*

	 * Check "prefix" from top node

	 * if DPCM-BE case

 Single CPU / Codec */

	/*

	 * see also above "daifmt" explanation

	 * and samples.

	/*

	 *	ports {

	 * (A)

	 *		port {

	 * (B)

	 *			endpoint {

	 * (C)

	 *			};

	 *		};

	 *	};

	 * };

	/*

	 * clock_provider:

	 *

	 * It can be judged it is provider

	 * if (A) or (B) or (C) has bitclock-master / frame-master flag.

	 *

	 * use "or"

	/*

	 * format

	 *

	 * This function is called by (C) -> (B) -> (A) order.

	 * Set if applicable part was not yet set.

	/*

	 *	ports {

	 * (A)

	 *		port {

	 * (B)

	 *			endpoint {

	 * (C)

	 *			};

	 *		};

	 *	};

	 * };

 (C) */

 (B) */

 (A) */

	/*

	 * convert bit_frame

	 * We need to flip clock_provider if it was CPU node,

	 * because it is Codec base.

	/*

	 * call Codec first.

	 * see

	 *	__graph_parse_node() :: DAI Naming

	/*

	 * call CPU, and set DAI Name

		/*

		 * dpcm {

		 *	// Front-End

		 *	ports@0 {

		 * =>		lnk: port@0 { ep: { ... = rep }; };

		 *		 ...

		 *	};

		 *	// Back-End

		 *	ports@0 {

		 *		 ...

		 *	};

		 * };

		 *

		 * CPU {

		 *	rports: ports {

		 *		rport: port@0 { rep: { ... = ep } };

		 *	}

		 * }

		/*

		 * setup CPU here, Codec is already set as dummy.

		 * see

		 *	asoc_simple_init_priv()

		/*

		 * dpcm {

		 *	// Front-End

		 *	ports@0 {

		 *		 ...

		 *	};

		 *	// Back-End

		 *	ports@0 {

		 * =>		lnk: port@0 { ep: { ... = rep; }; };

		 *		 ...

		 *	};

		 * };

		 *

		 * Codec {

		 *	rports: ports {

		 *		rport: port@0 { rep: { ... = ep; }; };

		 *	}

		 * }

		/*

		 * setup Codec here, CPU is already set as dummy.

		 * see

		 *	asoc_simple_init_priv()

 BE settings */

	/*

	 * codec2codec {

	 *	ports {

	 *		rate = <48000>;

	 * =>	lnk:	port@0 { c2c0_ep: { ... = codec0_ep; }; };

	 *		port@1 { c2c1_ep: { ... = codec1_ep; }; };

	 *	};

	 * };

	 *

	 * Codec {

	 *	ports {

	 *		port@0 { codec0_ep: ... }; };

	 *		port@1 { codec1_ep: ... }; };

	 *	};

	 * };

 update ME */

 update ME */

	/*

	 * call Codec first.

	 * see

	 *	__graph_parse_node() :: DAI Naming

	/*

	 * call CPU, and set DAI Name

	/*

	 * Multi CPU / Codec

	 *

	 * multi {

	 *	ports {

	 * =>		lnk:	port@0 { ... };

	 *			port@1 { ... };

	 *			port@2 { ... };

	 *			...

	 *	};

	 * };

	 *

	 * ignore first lnk part

	/*

	 * Single CPU / Codec

	/*

	 *	CPU {

	 * =>		lnk: port { endpoint { .. }; };

	 *	};

	/*

	 * dpcm {

	 *	// Front-End

	 *	ports@0 {

	 * =>		lnk: port@0 { endpoint { ... }; };

	 *		 ...

	 *	};

	 *	// Back-End

	 *	ports@1 {

	 * =>		lnk: port@0 { endpoint { ... }; };

	 *		 ...

	 *	};

	 * };

 FE */

 BE */

	/*

	 * codec2codec {

	 *	ports {

	 * =>	lnk:	port@0 { endpoint { ... }; };

	 *		port@1 { endpoint { ... }; };

	 *	};

	 * };

 loop for all listed CPU port */

 Allocate the private data and the DAI link array */

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012-2013, Analog Devices Inc.

 * Author: Lars-Peter Clausen <lars@metafoo.de>

 SPDX-License-Identifier: GPL-2.0-only

/*

 * Copyright (C) 2012-2013, Analog Devices Inc.

 * Author: Lars-Peter Clausen <lars@metafoo.de>

 The frame size is configurable, but for now we always set it 64 bit */

 SPDX-License-Identifier: (GPL-2.0 OR MIT)



 Copyright (c) 2018 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 Change to special mux control to reset dapm */

 Apply both reset */

 Clear out reset before in reset */

 Actually enable tdmin */

 Set stream skew */

 Set stream format mode */

 If the sample clock is inverted, invert it back for the formatter */

 Set the slot width */

	/*

	 * The following also reset LSB_FIRST which result in the formatter

	 * placing the first bit received at bit 31

 Set static swap mask configuration */

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2020 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 If no master is provided, default to cpu master */

 If property is not provided, don't fail ... */

 ... but do fail if it is provided and the parsing fails */

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2019 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 Check that we still are in the same component */

 Save the source stream format for the downstream link */

 Replace link params with the input params */

 SPDX-License-Identifier: GPL-2.0



 Copyright (c) 2020 BayLibre, SAS.

 Author: Jerome Brunet <jbrunet@baylibre.com>

 Always operate in split (classic interleaved) mode */

 Reset required to update the pipeline */

 Nothing to do */

 Nothing to do */

 These are the only valid legacy dividers */

	/*

	 * NOTE: this HW is odd.

	 * In most configuration, the i2s divider is 'mclk / blck'.

	 * However, in 16 bits - 8ch mode, this factor needs to be

	 * increased by 50% to get the correct output rate.

	 * No idea why !

 Use CLK_MORE for mclk to bclk divider */

 Get the oversampling factor */

 Send data MSB first */

 Set bclk to lrlck ratio */

 Make sure amclk is used for HDMI i2s as well */

 Disable the clock while changing the settings */

 Only CPU Master / Codec Slave supported ATM */

 Signal skew */

 Invert sample clock for i2s */

 Make sure the encoder gets either 2 or 8 channels */

