 via_irq.c
  Copyright 2004 BEAM Ltd.
  Copyright 2002 Tungsten Graphics, Inc.
  Copyright 2005 Thomas Hellstrom.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  BEAM LTD, TUNGSTEN GRAPHICS  ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
  Authors:
     Terry Barnaby <terry1@beam.ltd.uk>
     Keith Whitwell <keith@tungstengraphics.com>
     Thomas Hellstrom <unichrome@shipmail.org>
  This code provides standard DRM access to the Via Unichrome  Pro Vertical blank
  interrupt, as well as an infrastructure to handle other interrupts of the chip.
  The refresh rate is also calculated for video playback sync purposes.
 VIA_REG_INTERRUPT 
  Device-specific IRQs go here. This type might need to be extended with
  the register if there are multiple IRQ control registers.
  Currently we activate the HQV interrupts of  Unichrome Pro group A.
 Acknowledge interrupts 
 Acknowledge interrupts 
  drm_dma.h hooks
 Clear VSync interrupt regs 
 Clear bits if they're already high 
 Some magic, oh for some data sheets ! 
 Some more magic, oh for some data sheets ! 
  Copyright 1998-2003 VIA Technologies, Inc. All Rights Reserved.
  Copyright 2001-2003 S3 Graphics, Inc. All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sub license,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  VIA, S3 GRAPHICS, ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
  Copyright 2005 Thomas Hellstrom. All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sub license,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE AUTHOR(S), ANDOR THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
  Author: Thomas Hellstrom 2005.
  Video and XvMC related functions.
  Copyright 2004 The Unichrome Project. All Rights Reserved.
  Copyright 2005 Thomas Hellstrom. All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sub license,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE AUTHOR(S), ANDOR THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
  Author: Thomas Hellstrom 2004, 2005.
  This code was written using docs obtained under NDA from VIA Inc.
  Don't run this code directly on an AGP buffer. Due to cache problems it will
  be very slow.
  Associates each hazard above with a possible multi-command
  sequence. For example an address that is split over multiple
  commands and that needs to be checked at the first command
  that does not include any part of the address.
  Partially stolen from drm_memory.h
  Require that all AGP texture levels reside in the same AGP map which should
  be mappable by the client. This is not a big restriction.
  FIXME: To actually enforce this security policy strictly, drm_rmmap
  would have to wait for dma quiescent before removing an AGP map.
  The via_drm_lookup_agp_map call in reality seems to take
  very little CPU time.
		
		  Texture width. We don't care since we have the pitch.
		
		  How many dwords per vertex ?
		
		  There are some unimplemented HC_ParaTypes here, that
		  need to be implemented if the Mesa driver is extended.
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2018, The Linux Foundation. All rights reserved.
 Digital clock en
Tx Analog
Cbus Analog
HDMI Pll Analog
MIPI Analog
	
	  At this time we only initialize 2 chips, but the lt8912 provides
	  a third interface for the audio over HDMI configuration.
	
	  edid must be read through the ddc bus but it must be
	  given to the hdmi connector node.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2020 BayLibre, SAS
  Author: Phong LE <ple@baylibre.com>
  Copyright (C) 2018-2019, Artem Mygaiev
  Copyright (C) 2017, Fresco Logic, Incorporated.
 Khz 
 Protects fields below and device registers 
 TOFIX: Handle YCbCr Input & Output 
  it66121_configure_afe() - Configure the analog front end
  @ctx: it66121_ctx object
  @mode: mode to configure
  RETURNS:
  zero if success, a negative error code otherwise.
 Clear reset flags 
 Per programming manual, sleep here before emptying the FIFO 
 Per programming manual, sleep here for bridge to settle 
 Start interrupts 
 TOFIX handle more than MEDIA_BUS_FMT_RGB888_1X24 as output format 
 IT66121FN Datasheet specifies Little-Endian ordering 
 TOFIX support more input bus formats in 24bit width 
 Write new AVI infoframe packet 
 Enable AVI infoframe 
 Set TX mode to HDMI 
 Revision is shared with DEVICE_ID1 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2019 Renesas Electronics Corporation
  Copyright (C) 2016 Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 Locate the panel DT node. 
	
	  Decoder input LVDS format is a property of the decoder chip or even
	  its strapping. Handle data-mapping the same way lvds-panel does. In
	  case data-mapping is not present, do nothing, since there are still
	  legacy bindings which do not specify this property.
	
	  The panel_bridge bridge is attached to the panel's of_node,
	  but we need a bridge attached to our of_node for our user
	  to look up.
 SPDX-License-Identifier: GPL-2.0-only
  Silicon Image SiI8620 HDMIMHL bridge driver
  Copyright (C) 2015, Samsung Electronics Co., Ltd.
  Andrzej Hajda <a.hajda@samsung.com>
 context lock, protects fields below 
 Main System 
 TDM and HSIC 
 TMDS Receiver, MHL EDID 
 eMSC, HDCP, HSIC 
 MHL Spec 
 MHL CBUS 
 Hardware TPI (Transmitter Programming Interface) 
 eCBUS-S, eCBUS-D 
 copy src to dst and set changed bits in src 
 endian agnostic, non-volatile version of test_bit 
 get micro-USB connector node 
 next get micro-USB Interface Controller node 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for MegaChips STDP4028 with GE B850v3 firmware (LVDS-DP)
  Driver for MegaChips STDP2690 with GE B850v3 firmware (DP-DP++)
  Copyright (c) 2017, Collabora Ltd.
  Copyright (c) 2017, General Electric Company
  This driver creates a drm_bridge and a drm_connector for the LVDS to DP++
  display bridge of the GE B850v3. There are two physical bridges on the video
  signal pipeline: a STDP4028(LVDS to DP) and a STDP2690(DP to DP++). The
  physical bridges are automatically configured by the input video signal, and
  the driver has no access to the video processing pipeline. The driver is
  only needed to read EDID from the STDP2690 and to handle HPD events from the
  STDP4028. The driver communicates with both bridges over i2c. The video
  signal pipeline is as follows:
    Host -> LVDS|--(STDP4028)--|DP -> DP|--(STDP2690)--|DP++ -> Video output
		 Yes, read the entire buffer, and do not skip the first
		  EDID_LENGTH bytes.
 Configures the bridge to re-enable interrupts after each ack. 
 Enable interrupts 
	
	  This check is to avoid both the drivers
	  removing the bridge in their remove() function
 drm bridge initialization 
 Clear pending interrupts since power up. 
 SPDX-License-Identifier: GPL-2.0
   Copyright (C) 2020 Texas Instruments Incorporated - https:www.ti.com
   Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
 Global (16-bit addressable) 
 Debug (16-bit addressable) 
 TX PHY (32-bit addressable) 
 TX PPI (32-bit addressable) 
 TX CTRL (32-bit addressable) 
 DSITX CTRL (16-bit addressable) 
 TC358768_DSI_CONTROL (0x040C) register 
 TC358768_DSI_CONFW (0x0500) register 
 number of Parallel Port Input Data Lines 
 number of DSI Lanes 
 Parameters for PLL programming 
 PLL feedback divider 
 PLL input divider 
 PLL Freqency range for HSCK (post divider) 
 pll_clk  2 
gcc.gnu.orgbugzillashow_bug.cgi?id=81715 
 16-bit register? 
 16-bit register? 
 Assert Reset 
 Release Reset, Exit Sleep 
	
	  The RESX is active low (GPIO_ACTIVE_LOW).
	  DEASSERT (value = 0) the reset_gpio to enable the chip
 wait for encoder clocks to stabilize 
	
	  The RESX is active low (GPIO_ACTIVE_LOW).
	  ASSERT (value = 1) the reset_gpio to disable the chip
 pll_clk = RefClk  [(FBD + 1) (PRD + 1)]  [1  (2^FRS)] 
	
	  tc358768 supports both Video and Pulse mode, but the driver only
	  implements Video (event) mode currently
	
	  tc358768 supports RGB888, RGB666, RGB666_PACKED and RGB565, but only
	  RGB888 is verified.
 get input ep (port0endpoint0) 
 start transfer 
 set FrmStop 
 wait at least for one frame 
 clear PP_en 
 set RstPtr 
 PRD[15:12] FBD[8:0] 
 FRS[11:10] LBWS[9:8] CKEN[4] RESETB[1] EN[0] 
 wait for lock 
 FRS[11:10] LBWS[9:8] CKEN[4] PLL_CKEN[4] RESETB[1] EN[0] 
 Data Format Control Register 
 rdswap_en | dsitx_en | txdt_en 
 VSDly[9:0] 
 Enable D-PHY (HiZ->LP11) 
 Enable lanes 
 DSI Timings 
 LP11 > 100us for D-PHY Rx Init 
 LPTimeCnt > 50ns 
 38ns < TCLK_PREPARE < 95ns 
 TCLK_PREPARE > 300ns 
 TCLK_TRAIL > 60ns + 3UI 
 40ns + 4UI < THS_PREPARE < 85ns + 6UI 
 THS_ZERO > 145ns + 10UI 
 TWAKEUP > 1ms in lptxcnt steps 
 TCLK_POSTCNT > 60ns + 52UI 
 60ns + 4UI < THS_PREPARE < 105ns + 12UI 
 TXTAGOCNT[26:16] RXTASURECNT[10:0] 
 START[0] 
 Set event mode 
 vsw (+ vbp) 
 vbp (not used in event mode) 
 vact 
 (hsw + hbp)  byteclk  ndl  pclk 
 hbp (not used in event mode) 
 hact (bytes) 
 VSYNC polarity 
 HSYNC polarity 
 Start DSI Tx 
 Configure DSI_Control register 
 DSI mode 
 clear FrmStop and RstPtr 
 set PP_en 
	
	  RESX is low active, to disable tc358768 initially (keep in reset)
	  the gpio line must be LOW. This is the ASSERTED state of
	  GPIO_ACTIVE_LOW (GPIOD_OUT_HIGH == ASSERTED).
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2020 Marek Vasut <marex@denx.de>
  Based on tc358764.c by
   Andrzej Hajda <a.hajda@samsung.com>
   Maciej Purski <m.purski@samsung.com>
  Based on rpi_touchscreen.c by
   Eric Anholt <eric@anholt.net>
 PPI layer registers 
 START control bit 
 LPTX timing signal 
 Assertion timer for Lane 0 
 Assertion timer for Lane 1 
 DSI layer registers 
 START control bit of DSI-TX 
 Enables each lane 
 LCDCDPI Host Registers 
 SPI Master Registers 
 System Controller Registers 
 System registers 
 Lane enable PPI and DSI register bits 
	
	  The post_disable hook might be called multiple times.
	  We want to avoid regulator imbalance below.
 TODO: Find out how to get dual-lane mode working 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2017 Samsung Electronics
  Authors:
     Tomasz Stanislawski <t.stanislaws@samsung.com>
     Maciej Purski <m.purski@samsung.com>
  Based on sii9234 driver created by:
     Adam Hampson <ahampson@sta.samsung.com>
     Erik Gilling <konkers@android.com>
     Shankar Bandal <shankar.b@samsung.com>
     Dharam Kumar <dharam.kr@samsung.com>
 MHL Tx registers and bits 
 HDMI registers 
 CBUS registers 
 TPI registers 
 Timeouts in msec 
 in kHz 
 Protects fields below and device registers 
		
		  Enable WRITE_STAT interrupt for writes to all
		  4 MSC Status registers.
		
		  Enable SET_INT interrupt for writes to all
		  4 MSC Interrupt registers.
 Require to chek mhl imformation of samsung in cbus_init_register 
 Setup our devcap 
 Disable CBUS discovery 
 Force USB ID switch to open 
 Force upstream HPD to 0 when not in MHL mode. 
 Clear USB ID switch to open 
 Enable CBUS discovery 
 Force the SiI9234 into the D0 state. 
 Enable TxPLL Clock 
 Enable Tx Clock Path & Equalizer 
 Power Up TMDS 
 Enable HDCP Compliance safety 
 CBUS discovery cycle time for each drive and float = 150us 
 Clear bit 6 (reg_skip_rgnd) 
 Reserved 
	
	  Changed from 66 to 65 for 94[1:0] = 01 = 5k reg_cbusmhl_pup_sel
	  1.8V CBUS VTH & GND threshold
	  to meet CTS 3.3.7.2 spec
 RGND & single discovery attempt (RGND blocking) 
 Use VBUS path of discovery state machine 
 0x92[3] sets the CBUS  ID switch 
	
	  To allow RGND engine to operate correctly.
	  When moving the chip from D2 to D0 (power up, init regs)
	  the values should be
	  94[1:0] = 01  reg_cbusmhl_pup_sel[1:0] should be set for 5k
	  93[7:6] = 10  reg_cbusdisc_pup_sel[1:0] should be
	  set for 10k (default)
	  93[5:4] = 00  reg_cbusidle_pup_sel[1:0] = open (default)
	
	  Change from CC to 8C to match 5K
	  to meet CTS 3.3.72 spec
 Configure the interrupt as active high 
 Release usb_id switch 
 Enable Auto soft reset on SCDT = 0 
 HDMI Transcode mode enable 
 This point is very important before measure RGND impedance 
 Force upstream HPD to 0 when not in MHL mode 
 I2C above is expected to fail because power goes down 
 To avoid irq storm, when hw is in meta state 
 Turn on&off hpd festure for only QCT HDMI 
 Got interrupt in inappropriate state 
 Discovery override 
 Increase DDC translation layer timer (byte mode) 
 Keep the discovery enabled. Need RGND interrupt 
 Downstream HPD High, Enable TMDS 
 Downstream HPD Low, Disable TMDS 
 Work_around code to handle wrong interrupt 
	
	  Once RSEN loss is confirmed,we need to check
	  based on cable status and chip power status,whether
	  it is SINK Loss(HDMI cable not connected, TV Off)
	  or MHL cable disconnection
	  TODO: Define the below mhl_disconnection()
 To meet CTS 3.3.22.2 spec 
 Clean interrupt status and pending flags 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2019 Laurent Pinchart <laurent.pinchart@ideasonboard.com>
		
		  For DVI and HDMI connectors a DDC probe failure indicates
		  that no cable is connected.
		
		  Composite and S-Video connectors have no other detection
		  mean than the HPD GPIO. For VGA connectors, even if we have
		  an I2C bus, we can't assume that the cable is disconnected
		  if drm_probe_ddc fails, as some cables don't wire the DDC
		  pins.
 Get the exact connector type. 
 All the supported connector types support interlaced modes. 
 Get the optional connector label. 
	
	  Get the HPD GPIO for DVI, HDMI and DP connectors. If the GPIO can provide
	  edge interrupts, register an interrupt handler.
 Retrieve the DDC I2C adapter for DVI, HDMI and VGA connectors. 
 Get the DP PWR for DP connector. 
 SPDX-License-Identifier: GPL-2.0
  Copyright: 2017 Cadence Design Systems, Inc.
  Author: Boris Brezillon <boris.brezillon@bootlin.com>
	
	  Make sure DSI htotal is aligned on a lane boundary when calculating
	  the expected data rate. This is done by extending HFP in case of
	  misalignment.
 data rate in bytessec is not an integer, refuse the mode. 
 data rate was in bytessec, convert to bitssec. 
	
	  Make sure DPI(HFP) > DSI(HSS+HSA+HSE+HBP) to guarantee that the FIFO
	  is empty before we start a receiving a new line on the DPI
	  interface.
	
	  VFP_DSI should be less than VFP_DPI and VFP_DSI should be at
	  least 1.
 VSA_DSI = VSA_DPI and must be at least 2. 
 HACT must be 32-bits aligned. 
	
	  Power all internal DPHY blocks down and maintain their reset line
	  asserted before changing the DPHY config.
 Activate the PLL and wait until it's locked. 
 De-assert data and clock reset lines. 
 ULPOUT should be set to 1ms and is expressed in sysclk cycles. 
	
	  HSTX and LPRX timeouts are both expressed in TX byte clk cycles and
	  both should be set to at least the time it takes to transmit a
	  frame.
	
	  We currently do not support connecting several DSI devices to the
	  same host. In order to support that we'd need the DRM bridge
	  framework to allow dynamic reconfiguration of the bridge chain.
 We do not support burst mode yet. 
	
	  The host <-> device link might be described using an OF-graph
	  representation, in this case we extract the device of_node from
	  this representation, otherwise we use dsidev->dev.of_node which
	  should have been filled by the core.
	
	  The DSI output has been properly configured, we can now safely
	  register the input to the bridge framework so that it can take place
	  in a display pipeline.
 For read operations, the maximum TX len is 2. 
 TX len is limited by the CMD FIFO depth. 
 RX len is limited by the RX FIFO depth. 
 Clear status flags before sending the command. 
 We did not receive the events we were waiting for. 
 'READ' or 'WRITE with ACK' failed. 
	
	  We only support the DPI input, so force input->id to
	  CDNS_DPI_INPUT.
 Mask all interrupts before registering the IRQ handler. 
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2018, The Linux Foundation. All rights reserved.
  Copyright (c) 2019-2020. Linaro Limited.
 3840x2160 24bit 30Hz 4Lane 2ports 
 1080P 24bit 60Hz 4lane 1port 
 1080P 24bit 30Hz 3lane 1port 
 port A rx current 
 port A ldo voltage set 
 enable port A lprx 
 port B rx current 
 port B ldo voltage set 
 enable port B lprx 
 PortA clk lane no-LP mode 
 PortB clk lane with-LP mode 
 stage 1 
 stage 2 
 MK limit 
 pcr rst 
 txpll init 
	
	  first divide pclk by 2 first
	   - write divide by 64k to 19:16 bits which means shift by 17
	   - write divide by 256 to 15:8 bits which means shift by 9
	   - write remainder to 7:0 bits, which means shift by 1
 pclk[19:16] 
 pclk[15:8]  
 pclk[7:0]   
 top module video check 
 vactive 
 v_total 
 h_total_sysclk 
 hactive_a 
 hactive_b 
 UD1 infoframe 
 HDMI DC mode 
 HDMI AC mode 
 hpd changed low 
 hpd changed high 
 video input changed 
 clear 
 set addr pin as output 
 disable IRQ 
 MIPI Rx power down 
 bandgap power down 
 system clk power down 
 LT9611_System_Init 
 sel xtal clock 
 timer for frequency meter 
 timer 2 
 timer 1 
 irq init 
 hpd irq 
 hpd debounce width 
 video check irq 
 power consumption for work 
 connector funcs 
 memset to clear old buffer, if any 
 0xA0 is EDID device address 
 0x00 is EDID offset address 
 length for read 
 offset address 
 DDC No Ack or Abitration lost 
 supports up to 1 extension block 
 TODO: add support for more extension blocks 
 bridge funcs 
 Enable HDMI output 
 Disable HDMI output 
 Attach primary DSI 
 Attach secondary DSI, if specified 
	
	  HDMI sound should be located as reg = <2>
	  Then, it is sound port 0
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2016 Texas Instruments
  Author: Jyri Sarha <jsarha@ti.com>
		
		  No EDID, fallback on the XGA standard modes and prefer a mode
		  pretty much anything can handle.
 Start with defaults. 
		
		  In I2C mode timings are configured through the I2C interface.
		  As the driver doesn't support I2C configuration yet, we just
		  go with the defaults (BSEL=1, DSEL=1, DKEN=0, EDGE=1).
	
	  In non-I2C mode, timings are configured through the BSEL, DSEL, DKEN
	  and EDGE pins. They are specified in DT through endpoint properties
	  and vendor-specific properties.
 Get the sampling edge from the endpoint. 
 Get the setup and hold time from vendor-specific properties. 
 Get the next bridge, connected to port@1. 
 Get the powerdown GPIO. 
  Register the DRM bridge. 
 There is currently no i2c functionality. 
 IS_ENABLED(CONFIG_I2C) 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2016 Laurent Pinchart <laurent.pinchart@ideasonboard.com>
  Copyright (C) 2017 Broadcom
	
	  Cleanup the connector if we know it was initialized.
	 
	  FIXME: This wouldn't be needed if the panel_bridge structure was
	  allocated with drmm_kzalloc(). This might be tricky since the
	  drm_device pointer can only be retrieved when the bridge is attached.
  drm_panel_bridge_add - Creates a &drm_bridge and &drm_connector that
  just calls the appropriate functions from &drm_panel.
  @panel: The drm_panel being wrapped.  Must be non-NULL.
  For drivers converting from directly using drm_panel: The expected
  usage pattern is that during either encoder module probe or DSI
  host attach, a drm_panel will be looked up through
  drm_of_find_panel_or_bridge().  drm_panel_bridge_add() is used to
  wrap that panel in the new bridge, and the result can then be
  passed to drm_bridge_attach().  The drm_panel_prepare() and related
  functions can be dropped from the encoder driver (they're now
  called by the KMS helpers before calling into the encoder), along
  with connector creation.  When done with the bridge (after
  drm_mode_config_cleanup() if the bridge has already been attached), then
  drm_panel_bridge_remove() to free it.
  The connector type is set to @panel->connector_type, which must be set to a
  known type. Calling this function with a panel whose connector type is
  DRM_MODE_CONNECTOR_Unknown will return ERR_PTR(-EINVAL).
  See devm_drm_panel_bridge_add() for an automatically managed version of this
  function.
  drm_panel_bridge_add_typed - Creates a &drm_bridge and &drm_connector with
  an explicit connector type.
  @panel: The drm_panel being wrapped.  Must be non-NULL.
  @connector_type: The connector type (DRM_MODE_CONNECTOR_)
  This is just like drm_panel_bridge_add(), but forces the connector type to
  @connector_type instead of infering it from the panel.
  This function is deprecated and should not be used in new drivers. Use
  drm_panel_bridge_add() instead, and fix panel drivers as necessary if they
  don't report a connector type.
  drm_panel_bridge_remove - Unregisters and frees a drm_bridge
  created by drm_panel_bridge_add().
  @bridge: The drm_bridge being freed.
  devm_drm_panel_bridge_add - Creates a managed &drm_bridge and &drm_connector
  that just calls the appropriate functions from &drm_panel.
  @dev: device to tie the bridge lifetime to
  @panel: The drm_panel being wrapped.  Must be non-NULL.
  This is the managed version of drm_panel_bridge_add() which automatically
  calls drm_panel_bridge_remove() when @dev is unbound.
  devm_drm_panel_bridge_add_typed - Creates a managed &drm_bridge and
  &drm_connector with an explicit connector type.
  @dev: device to tie the bridge lifetime to
  @panel: The drm_panel being wrapped.  Must be non-NULL.
  @connector_type: The connector type (DRM_MODE_CONNECTOR_)
  This is just like devm_drm_panel_bridge_add(), but forces the connector type
  to @connector_type instead of infering it from the panel.
  This function is deprecated and should not be used in new drivers. Use
  devm_drm_panel_bridge_add() instead, and fix panel drivers as necessary if
  they don't report a connector type.
  drm_panel_bridge_connector - return the connector for the panel bridge
  @bridge: The drm_bridge.
  drm_panel_bridge creates the connector.
  This function gives external access to the connector.
  Returns: Pointer to drm_connector
  devm_drm_of_get_bridge - Return next bridge in the chain
  @dev: device to tie the bridge lifetime to
  @np: device tree node containing encoder output ports
  @port: port in the device tree node
  @endpoint: endpoint in the device tree node
  Given a DT node's port and endpoint number, finds the connected node
  and returns the associated bridge if any, or creates and returns a
  drm panel bridge instance if a panel is connected.
  Returns a pointer to the bridge if successful, or an error pointer
  otherwise.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2015-2016 Free Electrons
  Copyright (C) 2015-2016 NextThing Co
  Maxime Ripard <maxime.ripard@free-electrons.com>
		
		  In case we cannot retrieve the EDIDs (missing or broken DDC
		  bus from the next bridge), fallback on the XGA standards and
		  prefer a mode pretty much anyone can handle.
 Get the next bridge in the pipeline. 
 Get the regulator and GPIO resources. 
 Register the bridge. 
  We assume the ADV7123 DAC is the "default" for historical reasons
  Information taken from the ADV7123 datasheet, revision D.
  NOTE: the ADV7123EP seems to have other timings and need a new timings
  set if used.
 Timing specifications, datasheet page 7 
  Information taken from the THS8134, THS8134A, THS8134B datasheet named
  "SLVS205D", dated May 1990, revised March 2000.
 From timing diagram, datasheet page 9 
 From datasheet, page 12 
 I guess this means latched input 
  Information taken from the THS8135 datasheet named "SLAS343B", dated
  May 2001, revised April 2013.
 From timing diagram, datasheet page 14 
 From datasheet, page 16 
 SPDX-License-Identifier: GPL-2.0
  THC63LVD1024 LVDS to parallel data DRM bridge driver.
  Copyright (C) 2018 Jacopo Mondi <jacopo+renesas@jmondi.org>
	
	  The THC63LVD1024 pixel rate range is 8 to 135 MHz in all modes but
	  dual-in, single-out where it is 40 to 150 MHz. As dual-in, dual-out
	  isn't supported by the driver yet, simply derive the limits from the
	  input mode.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2016 MediaTek Inc.
  PS8640 uses multiple addresses:
  page[0]: for DP control
  page[1]: for VIDEO Bridge
  page[2]: for control top
  page[3]: for DSI Link Control1
  page[4]: for MIPI Phy
  page[5]: for VPLL
  page[6]: for DSI Link Control2
  page[7]: for SPI ROM mapping
 Assume it's good 
 Write to the internal FIFO buffer 
 Zero delay loop because i2c transactions are slow already 
 Ignore the DEFER cases as they are already handled in hardware 
		
		  The programming guide is not clear about whether a I2C NACK
		  would trigger SWAUX_STATUS_NACK or SWAUX_STATUS_I2C_NACK. So
		  we handle both cases together.
 Read from the internal FIFO buffer 
	
	  Wait for the ps8640 embedded MCU to be ready
	  First wait 200ms and then check the MCU ready flag every 20ms
	
	  The Manufacturer Command Set (MCS) is a device dependent interface
	  intended for factory programming of the display module default
	  parameters. Once the display module is configured, the MCS shall be
	  disabled by the manufacturer. Once disabled, all MCS commands are
	  ignored by the display interface.
 Switch access edp panel's edid through i2c 
 port@0 is ps8640 dsi input port 
 Attach the panel-bridge to the dsi bridge 
	
	  When we end calling get_edid() triggered by an ioctl, i.e
	 
	    drm_mode_getconnector (ioctl)
	      -> drm_helper_probe_single_connector_modes
	         -> drm_bridge_connector_get_modes
	            -> ps8640_bridge_get_edid
	 
	  We need to make sure that what we need is enabled before reading
	  EDID, for this chip, we need to do a full poweron, otherwise it will
	  fail.
	
	  If we call the get_edid() function without having enabled the chip
	  before, return the chip to its original power state.
 port@1 is ps8640 output port 
	
	  Assert the reset to avoid the bridge being initialized prematurely
 SPDX-License-Identifier: GPL-2.0-or-later
  tc358767 eDP bridge driver
  Copyright (C) 2016 CogentEmbedded Inc
  Author: Andrey Gusakov <andrey.gusakov@cogentembedded.com>
  Copyright (C) 2016 Pengutronix, Philipp Zabel <p.zabel@pengutronix.de>
  Copyright (C) 2016 Zodiac Inflight Innovations
  Initially based on: driversgpudrmi2ctda998x_drv.c
  Copyright (C) 2012 Texas Instruments
  Author: Rob Clark <robdclark@gmail.com>
 Registers 
 Display Parallel Interface 
 LSB aligned 
 Loosely Packed 
 LSB aligned 8-bit 
 Video Path 
 Video Timing Gen Disabled 
 Video Timing Gen Enabled 
 Magic Square FRC disabled 
 Magic Square FRC enabled 
 Video Frame Timing Upload 
 System 
 Control 
 Auto-generate MN values 
 Enable Enhanced Framing 
 Video transmission enable 
 Enable DPTX function 
 Clocks 
 Main Channel 
 LSCLK cycles per TU 
 AUX channel 
 Link Training 
 PHY 
 DP PHY Global Soft Reset 
 AUX PHY BGR Enable 
 PHY Power Switch Enable 
 Reset PHY1 Main Channel 
 PHY Main Channels Ready 
 Reset PHY0 Main Channel 
 PHY Enable 2 lanes 
 PHY Aux Channel0 Enable 
 PHY Main Channel0 Enable 
 PLL 
 not defined in DS 
 38.4 MHz 
 19.2 MHz 
 26 MHz 
 13 MHz 
 Test & Debug 
 link settings 
 current mode 
 do we have IRQ 
 HPD pin number (0 or 1) or -ENODEV 
 Store address 
 Start transfer 
	
	  For some reason address-only DP_AUX_I2C_WRITE (MOT), still
	  reports 1 byte transferred in its status. To deal we that
	  we ignore aux_bytes field if we know that this was an
	  address-only transfer
	
	  No training pattern, skew lane 1 data by two LSCLK cycles with
	  respect to lane 0 data, AutoCorrect Mode = 0
 Scrambler Disabled 
 Spread Spectrum Enable 
 Two Main Channel Lanes 
 2.7 Gbps link 
 Wait for PLL to lock: up to 2.09 ms, depending on refclk 
 Loop over all possible ext_divs, skipping invalid configurations 
		
		  refclk  ext_pre_div should be in the 1 to 200 MHz range.
		  We don't allow any refclk > 200 MHz, only check lower bounds.
 Check limits 
				
				  refclk  mul  (ext_pre_div  pre_div)
				  should be in the 150 to 650 MHz range
 if VCO >= 300 MHz 
 see DS 
 Power up PLL and switch to bypass 
 For PLL VCO >= 300 MHz = 1 
 External Pre-divider 
 External Post-divider 
 Use RefClk as PLL input 
 Divider for PLL RefClk 
 Multiplier for PLL 
 Force PLL parameter update and disable bypass 
 Enable PLL bypass, power down PLL 
	
	  If the Stream clock and Link Symbol clock are
	  asynchronous with each other, the value of M changes over
	  time. This way of generating link clock and stream
	  clock is called Asynchronous Clock mode. The value M
	  must change while the value N stays constant. The
	  value of N in this Asynchronous Clock mode must be set
	  to 2^15 or 32,768.
	 
	  LSCLK = 110 of high speed link clock
	 
	  f_STRMCLK = MN  f_LSCLK
	  MN = f_STRMCLK  f_LSCLK
	 
 Setup DP-PHY  PLL 
	
	  Initially PLLs are in bypass. Force PLL parameter update,
	  disable PLL bypass, enable PLL
 Setup AUX link 
 Aux Bit Period Calculator Threshold 
 Aux Response Timeout Timer 
 Read DP Rx Link Capability 
 read assr 
	
	  Recommended maximum number of symbols transferred in a transfer unit:
	  DIV_ROUND_UP((input active video bandwidth in bytes)  tu_size,
	               (output active video bandwidth in bytes))
	  Must be less than tu_size.
	
	  LCD Ctl Frame Size
	  datasheet is not clear of vsdelay in case of DPI
	  assume we do not need any delay when DPI is a source of
	  sync signals
 update settings 
 Test pattern settings 
 DP Main Stream Attributes 
 SSCG and BW27 on DP1 must be set to the same as on DP0 
 Setup Main Link 
 PLL setup 
 ResetEnable Main Links 
 Set misc: 8 bits per color 
	
	  ASSR mode
	  on TC358767 side ASSR configured through strap pin
	  seems there is no way to change this setting from SW
	 
	  check is tc configured for same mode
 try to set ASSR on display side 
 read back 
 trying with disabled scrambler 
 Setup Link & DPRx Config for Training 
 DOWNSPREAD_CTRL 
 MAIN_LINK_CHANNEL_CODING_SET 
 Reset voltage-swing & pre-emphasis 
 Clock-Recovery 
 Set DPCD 0x102 for Training Pattern 1 
 Defer Iteration Count 
 Loop Iteration Count 
 Loop Timer Delay 
 Enable DP0 to start Link Training 
 wait 
 Channel Equalization 
 Set DPCD 0x102 for Training Pattern 2 
 wait 
	
	  Toshiba's documentation suggests to first clear DPCD 0x102, then
	  clear the training pattern bit in DP0_SRCCTRL. Testing shows
	  that the link sometimes drops if those steps are done in that order,
	  but if the steps are done in reverse order, the link stays up.
	 
	  So we do the steps differently than documented here.
 Clear Training Pattern, set AutoCorrect Mode = 1 
 Clear DPCD 0x102 
 Note: Can Not use DP0_SNKLTCTRL (0x06E4) short cut 
 Check link status 
 PXL PLL setup 
 Set MN 
	
	  VID_EN assertion should be delayed by at least N  LSCLK
	  cycles from the time VID_MN_GEN is enabled in order to
	  generate stable values for VID_M. LSCLK is 270 MHz or
	  162 MHz, VID_N is set to 32768 in  tc_stream_clock_calc(),
	  so a delay of at least 203 us should suffice.
 Set input interface 
 Fixup sync polarities, both hsync and vsync are active low 
 DPI interface clock limitation: upto 154 MHz 
 If a connector is required then this driver shall create it 
 Create DPeDP connector 
 Don't poll if don't have HPD connected 
		
		  H is triggered when the GPIO goes high.
		 
		  LC is triggered when the GPIO goes low and stays low for
		  the duration of LCNT
 port@2 is the output port 
 Shut down GPIO is optional 
 Reset GPIO is optional 
 enable SysErr 
 Enable ASSR for eDP panels 
		
		  If the reset pin isn't present, do a software reset. It isn't
		  as thorough as the hardware reset, as we can't reset the I2C
		  communication block for obvious reasons, but it's getting the
		  chip into a defined state.
 Set LCNT to 2ms 
 We need the "alternate" mode for HPD 
 enable H & LC 
 Register DP AUX channel 
 SPDX-License-Identifier: GPL-2.0-only
  Chrontel CH7033 Video Encoder Driver
  Copyright (C) 2019,2020 Lubomir Rintel
 Page 0, Register 0x07 
 Page 0, Register 0x08 
 Page 0, Register 0x09 
 Page 0, Register 0x0a 
 Page 0, Register 0x18 
 Page 0, Register 0x19 
 Page 0, Register 0x2e 
 Page 0, Register 0x2b 
 Page 0, Register 0x54 
 Page 0, Register 0x57 
 Page 0, Register 0x7e 
 Page 1, Register 0x07 
 Page 1, Register 0x08 
 Page 1, Register 0x0c 
 Page 1, Register 0x6b 
 Page 1, Register 0x6c 
 Page 3, Register 0x28 
 Page 3, Register 0x2a 
 Page 4, Register 0x52 
	
	  Page 4
 Turn everything off to set all the registers to their defaults. 
 Bring IO block up. 
	
	  Page 0
 Bring up parts we need from the power down. 
 Horizontal input timing. 
 Vertical input timing. 
 Input color swap. 
 Input clock and sync polarity. 
 Horizontal output timing. 
 Vertical output timing. 
 VGA channel bypass 
 Output sync polarity. 
 HDMI horizontal output timing. 
 HDMI vertical output timing. 
 Pick HDMI, not LVDS. 
	
	  Page 1
 No idea what these do, but VGA is wobbly and blinky without them. 
 DRI PLL 
 This seems to be color calibration for VGA. 
 LSB Blue 
 LSB Green 
 LSB Red 
 MSB Blue 
 MSB Green 
 MSB Red 
	
	  Page 3
 More bypasses and apparently another HDMILVDS selector. 
	
	  Page 4
 Output clock. 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2018 Renesas Electronics
  Copyright (C) 2016 Atmel
 		      Bo Shen <voice.shen@atmel.com>
  Authors:	      Bo Shen <voice.shen@atmel.com>
 		      Boris Brezillon <boris.brezillon@free-electrons.com>
 		      Wu, Songjun <Songjun.Wu@atmel.com>
  Copyright (C) 2010-2011 Freescale Semiconductor, Inc. All Rights Reserved.
 Audio  
 Indirect internal register access 
	
	  Mutex protects audio and video functions from interfering
	  each other, by keeping their i2c command sequences atomic.
 The datasheet says treset-min = 100us. Make it 150us to be sure. 
 TODO: check mode 
 Do not send the infoframe header, but keep the CRC field. 
 Decode Level 0 Packets 
	
	  HDMI sound should be located at reg = <3>
	  Return expected DAI index 0.
 Only i2s support for now. 
 struct sii902x mutex should be enough 
  The purpose of sii902x_i2c_bypass_select is to enable the pass through
  mode of the HDMI transmitter. Do not use regmap from within this function,
  only use sii902x__unlocked functions to readmodifywrite registers.
  We are holding the parent adapter lock here, keep this in mind before
  adding more i2c transactions.
  Also, since SII902X_SYS_CTRL_DATA is used with regmap_update_bits elsewhere
  in this driver, we need to make sure that we only touch 0x1A[2:1] from
  within sii902x_i2c_bypass_select and sii902x_i2c_bypass_deselect, and that
  we leave the remaining bits as we have found them.
  The purpose of sii902x_i2c_bypass_deselect is to disable the pass through
  mode of the HDMI transmitter. Do not use regmap from within this function,
  only use sii902x__unlocked functions to readmodifywrite registers.
  We are holding the parent adapter lock here, keep this in mind before
  adding more i2c transactions.
  Also, since SII902X_SYS_CTRL_DATA is used with regmap_update_bits elsewhere
  in this driver, we need to make sure that we only touch 0x1A[2:1] from
  within sii902x_i2c_bypass_select and sii902x_i2c_bypass_deselect, and that
  we leave the remaining bits as we have found them.
	
	  When the HDMI transmitter is in pass through mode, we need an
	  (undocumented) additional delay between STOP and START conditions
	  to guarantee the bus won't get stuck.
	
	  Sometimes the I2C bus can stall after failure to use the
	  EDID channel. Retry a few times to see if things clear
	  up, else continue anyway.
 Clear all pending interrupts 
 SPDX-License-Identifier: GPL-2.0-only
  CrOS EC ANX7688 HDMI->DP bridge driver
  Copyright 2020 Google LLC
 Register addresses 
 First supported firmware version (0.85) 
 Read both regs 0x85 (bandwidth) and 0x86 (lane count). 
 Maximum 0x19 bandwidth (6.75 Gbps Turbo mode), 2 lanes 
 Compute available bandwidth (kHz) 
 Required bandwidth (8 bpc, kHz) 
 Read both vendor and device id (4 bytes). 
 FW version >= 0.85 supports bandwidthlane count registers 
 Warn, but not fail, for backwards compatibility 
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2018, The Linux Foundation. All rights reserved.
  Copyright (c) 2019-2020. Linaro Limited.
 Protects all accesses to registers by stopping the on-chip MCU 
 can be accessed from different threads, so protect this with ocm_lock 
  This chip supports only a fixed set of modes.
  Enumerate them here to check whether the mode is supported.
 50000 according to dtsi 
 Attach primary DSI 
 Attach secondary DSI, if specified 
	
	  LT9611UXC will automatically detect rate and sample size, so no need
	  to setup anything here.
	
	  HDMI sound should be located as reg = <2>
	  Then, it is sound port 0
	
	  Need erase block 2 timess here. Sometimes, block erase can fail.
	  This is a workaroud.
 sentinel  }
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2018, The Linux Foundation. All rights reserved.
  datasheet: https:www.ti.comlitdssymlinksn65dsi86.pdf
 fudge factor required to account for 8b10b encoding 
 Matches DP_AUX_MAX_PAYLOAD_BYTES (for now) 
  struct ti_sn65dsi86 - Platform data for ti-sn65dsi86 driver.
  @bridge_aux:   AUX-bus sub device for MIPI-to-eDP bridge functionality.
  @gpio_aux:     AUX-bus sub device for GPIO controller functionality.
  @aux_aux:      AUX-bus sub device for eDP AUX channel functionality.
  @dev:          Pointer to the top level (i2c) device.
  @regmap:       Regmap for accessing i2c.
  @aux:          Our aux channel.
  @bridge:       Our bridge.
  @connector:    Our connector.
  @host_node:    Remote DSI node.
  @dsi:          Our MIPI DSI source.
  @refclk:       Our reference clock.
  @next_bridge:  The bridge on the eDP side.
  @enable_gpio:  The GPIO we toggle to enable the bridge.
  @supplies:     Data for bulk enablingdisabling our regulators.
  @dp_lanes:     Count of dp_lanes we're using.
  @ln_assign:    Value to program to the LN_ASSIGN register.
  @ln_polrs:     Value for the 4-bit LN_POLRS field of SN_ENH_FRAME_REG.
  @comms_enabled: If true then communication over the aux channel is enabled.
  @comms_mutex:   Protects modification of comms_enabled.
  @gchip:        If we expose our GPIOs, this is used.
  @gchip_output: A cache of whether we've set GPIOs to output.  This
                 serves double-duty of keeping track of the direction and
                 also keeping track of whether we've incremented the
                 pm_runtime reference count for this pin, which we do
                 whenever a pin is configured as an output.  This is a
                 bitmap so we can do atomic ops on it without an extra
                 lock so concurrent users of our 4 GPIOs don't stomp on
                 each other's read-modify-write.
 clk frequencies supported by bridge in Hz in case derived from REFCLK pin 
 clk frequencies supported by bridge in Hz in case derived from DACPN pin 
 for i equals to refclk_lut_size means default frequency 
 configure bridge ref_clk 
	
	  HPD on this bridge chip is a bit useless.  This is an eDP bridge
	  so the HPD is an internal signal that's only there to signal that
	  the panel is done powering up.  ...but the bridge chip debounces
	  this signal by between 100 ms and 400 ms (depending on process,
	  voltage, and temperate--I measured it at about 200 ms).  One
	  particular panel asserted HPD 84 ms after it was powered on meaning
	  that we saw HPD 284 ms after power on.  ...but the same panel said
	  that instead of looking at HPD you could just hardcode a delay of
	  200 ms.  We'll assume that the panel driver will have the hardcoded
	  delay in its prepare and always disable HPD.
	 
	  If HPD somehow makes sense on some future panel we'll have to
	  change this to be conditional on someone specifying that HPD should
	  be used.
 td2: min 100 us after regulators before enabling the GPIO 
	
	  If we have a reference clock we can enable communication w the
	  panel (including the aux channel) wout any need for an input clock
	  so we can do it in resume which lets us read the EDID before
	  pre_enable(). Without a reference clock we need the MIPI reference
	  clock so reading early doesn't work.
 IRQ Status Registers, see Table 31 in datasheet 
	
	  We might get an error back if debugfs wasn't enabled in the kernel
	  so let's just silently return upon failure.
 -----------------------------------------------------------------------------
  Auxiliary Devices (not AUX)
  AUX bus docs say that a non-NULL release is mandatory, but it makes no
  sense for the model used here where all of the aux devices are allocated
  in the single shared structure. We'll use this noop as a workaround.
 -----------------------------------------------------------------------------
  AUX Adapter
	
	  If someone tries to do a DDC over AUX transaction before pre_enable()
	  on a device without a dedicated reference clock then we just can't
	  do it. Fail right away. This prevents non-refclk users from reading
	  the EDID before enabling the panel but such is life.
 Assume it's good 
 Clear old status bits before start so we don't get confused 
 Zero delay loop because i2c transactions are slow already 
		
		  The hardware tried the message seven times per the DP spec
		  but it hit a timeout. We ignore defers here because they're
		  handled in hardware.
	
	  The eDP to MIPI bridge parts don't work until the AUX channel is
	  setup so we don't add it in the main driver probe, we add it now.
 -----------------------------------------------------------------------------
  DRM Connector Operations
------------------------------------------------------------------------------
  DRM Bridge
	
	  TODO: ideally finding host resource and dsi dev registration needs
	  to be done in bridge probe. But some existing DSI host drivers will
	  wait for any of the drm_bridgedrm_panel to get added to the global
	  bridgepanel list, before completing their probe. So if we do the
	  dsi dev registration part in bridge probe, before populating in
	  the global bridge list, then it will cause deadlock as dsi host probe
	  will never complete, neither our bridge probe. So keeping it here
	  will satisfy most of the existing host drivers. Once the host driver
	  is fixed we can move the below code to bridge probe safely.
 TODO: setting to 4 MIPI lanes always for now 
 check if continuous dsi clock is required or not 
 We never want the next bridge to also create a connector: 
 Attach the next bridge 
 maximum supported resolution is 4K at 60 fps 
 disable video stream 
 set DSIA clk frequency 
 for each increment in val, frequency increases by 5MHz 
  LUT index corresponds to register value and
  LUT values corresponds to dp data rate supported
  by the bridge in Mbps unit.
 Calculate minimum bit rate based on our pixel clock. 
 Calculate minimum DP data rate, taking 80% as per DP spec 
 eDP 1.4 devices must provide a custom table 
 By zeroing we'll fall back to DP_MAX_LINK_RATE. 
 On older versions best we can do is use DP_MAX_LINK_RATE 
 10ms delay recommended by spec 
 set dp clk frequency value 
 enable DP PLL 
	
	  We'll try to link train several times.  As part of link training
	  the bridge chip will write DP_SET_POWER_D0 to DP_SET_POWER.  If
	  the panel isn't ready quite it might respond NAK here which means
	  we need to try again.
 Semi auto link training mode 
 If we saw quite a few retries, add a note about it 
 Disable the PLL if we failed 
 DSI_A lane config 
 set dsi clk frequency value 
	
	  The SN65DSI86 only supports ASSR Display Authentication method and
	  this method is enabled by default. An eDP panel must support this
	  authentication method. We need to enable this method in the eDP panel
	  at DisplayPort address 0x0010A prior to link training.
 Set the DP output format (18 bpp or 24 bpp) 
 DP lane config 
 Train until we run out of rates 
 config video parameters 
 enable video stream 
 td7: min 100 us after enable before DSI data 
 semi auto link training mode OFF 
 Num lanes to 0 as per power sequencing in data sheet 
 disable DP PLL 
	
	  Read config from the device tree about lane remapping and lane
	  polarities.  These are optional and we assume identity map and
	  normal polarity if nothing is specified.  It's OK to specify just
	  data-lanes but not lane-polarities but not vice versa.
	 
	  Error checking is light (we just make sure we don't crash or
	  buffer overrun) and we assume dts is well formed and specifying
	  mappings that the hardware supports.
	
	  Convert into register format.  Loop over all lanes even if
	  data-lanes had fewer elements so that we nicely initialize
	  the LN_ASSIGN register.
 Stash in our struct for when we power on 
 -----------------------------------------------------------------------------
  GPIO Controller
	
	  We already have to keep track of the direction because we use
	  that to figure out whether we've powered the device.  We can
	  just return that rather than (maybe) powering up the device
	  to ask its direction.
	
	  When the pin is an input we don't forcibly keep the bridge
	  powered--we just power it on to read the pin.  NOTE: part of
	  the reason this works is that the bridge defaults (when
	  powered back on) to all 4 GPIOs being configured as GPIO input.
	  Also note that if something else is keeping the chip powered the
	  pm_runtime functions are lightweight increments of a refcount.
	
	  NOTE: if nobody else is powering the device this may fully power
	  it off and when it comes back it will have lost all state, but
	  that's OK because the default is input and we're now an input.
 Set value first to avoid glitching 
 Set direction 
 We won't keep pm_runtime if we're input, so switch there on free 
 Only init if someone is going to use us as a GPIO controller 
 -----------------------------------------------------------------------------
  Probe & Remove
	
	  Break ourselves up into a collection of aux devices. The only real
	  motiviation here is to solve the chicken-and-egg problem of probe
	  ordering. The bridge wants the panel to be there when it probes.
	  The panel wants its HPD GPIO (provided by sn65dsi86 on some boards)
	  when it probes. The panel and maybe backlight might want the DDC
	  bus. Soon the PWM provided by the bridge chip will have the same
	  problem. Having sub-devices allows the some sub devices to finish
	  probing even if others return -EPROBE_DEFER and gets us around the
	  problems.
	
	  NOTE: At the end of the AUX channel probe we'll add the aux device
	  for the bridge. This is because the bridge can't be used until the
	  AUX channel is there and this is a very simple solution to the
	  dependency problem.
 SPDX-License-Identifier: GPL-2.0
  TC358775 DSI to LVDS bridge driver
  Copyright (C) 2020 SMART Wireless Computing
  Author: Vinay Simha BN <simhavcs@gmail.com>
 #define DEBUG 
 Registers 
 DSI D-PHY Layer Registers 
 Data Lane 0 DPHY Tx Control 
 Clock Lane DPHY Rx Control 
 Data Lane 0 DPHY Rx Control 
 Data Lane 1 DPHY Rx Control 
 Data Lane 2 DPHY Rx Control 
 Data Lane 3 DPHY Rx Control 
 DPHY Rx Common Control 
 Clock Lane Control 
 Data Lane 0 Control 
 Data Lane 1 Control 
 Data Lane 2 Control 
 Data Lane 3 Control 
 DFT Mode Control 
 DSI PPI Layer Registers 
 START control bit of PPI-TX function. 
 Line Initialization Wait Counter  
 Enables each lane at the PPI layer. 
 DSI Bus Turn Around timing parameters 
 Analog timer function enable 
 Delay for Clock Lane in LPRX  
 Delay for Data Lane 0 in LPRX 
 Delay for Data Lane 1 in LPRX 
 Delay for Data Lane 2 in LPRX 
 Delay for Data Lane 3 in LPRX 
 For lane 0 
 For lane 1 
 For lane 2 
 For lane 3 
 Digital Counter inside of PHY IO 
 Digital Counter inside of PHY IO 
 Digital Counter inside of PHY IO 
 Digital Counter inside of PHY IO 
 Digital Counter inside of PHY IO 
 Digital Counter inside of PHY IO 
 Digital Counter inside of PHY IO 
 Digital Counter inside of PHY IO 
 Digital Counter inside of PHY IO 
 Digital Counter inside of PHY IO 
 Digital Counter inside of PHY IO 
 Digital Counter inside of PHY IO 
 Digital Counter inside of PHY IO 
 Digital Counter inside of PHY IO 
 Digital Counter inside of PHY IO 
 PRE Counters has reached set values 
 Clear SIPO values, Slave mode use only. 
 HS Rx Time Out Counter 
 Enable HS Rx Time Out Counter 
 START control bit of DSI-TX function 
 Enables each lane at the Protocol layer. 
 Displays lane is in HS RX mode. 
 Displays lane is in ULPS or STOP state 
 Interrupt Status 
 Interrupt Mask 
 Interrupt Clear 
 Low Power Tx Time Out Counter 
 DSI Error Count 
 Application Layer Control 
 Command Read Packet Length 
 Video Path Control 
 Horizontal Timing Control 1 
 Horizontal Timing Control 2 
 Vertical Timing Control 1 
 Vertical Timing Control 2 
 Video Frame Timing Update Enable 
 Upload Enable 
 Mux Input Select for LVDS LINK Input 
 Bit 0 to 3 
 Bit 4 to 7 
 Bit 8 to 11 
 Bit 12 to 15 
 Bit 16 to 19 
 Bit 20 to 23 
 Bit 24 to 27 
 Input bit numbers used in mux registers 
 LVDS Configuration  
 LVDS PHY 0 
 PHY reset 
 Frequency range select 
 ClockData Flag pins 
 LVDS PHY 1 
 System Status  
 System Reset  
 Reset I2C-Slave controller 
 Reset I2C-Master controller 
 Reset LCD controller 
 Reset Bus Management controller 
 Reset DSI-RX and App controller 
 Reset Register module 
 GPIO Registers 
 GPIO Control  
 GPIO Output  
 GPIO Input  
 I2C Registers 
 I2C IF Timing and Enable Control 
 I2C Master Addressing 
 Write Data Queue 
 Read Data Queue 
 Chip ID and Revision ID Register 
 Debug Registers 
 Debug 
 LVDS Data 
 PCLK=DCLK3 
 PCLK=DCLK6 
 single-link or dual-link 
 helper function to access bus_formats 
 bpc = 6; 
	
	  Default hardware register settings of tc358775 configured
	  with MEDIA_BUS_FMT_RGB888_1X7X4_JEIDA jeida-24 format
 VESA-24 
  MEDIA_BUS_FMT_RGB666_1X7X3_SPWG - JEIDA-18 
	
	  Maximum pixel clock speed 135MHz for single-link
	  270MHz for dual-link
 RGB888 
 RGB666 
	
	  To get the data-lanes of dsi, we need to access the dsi0_out of port1
	   of dsi0 endpoint from bridge port0 of d2l_in
 dsi0_out node 
 dsi0 port 1 
 Attach the panel-bridge to the dsi bridge 
 SPDX-License-Identifier: GPL-2.0
  TPD12S015 HDMI ESD protection & level shifter chip driver
  Copyright (C) 2019 Texas Instruments Incorporated
  Based on the omapdrm-specific encoder-opa362 driver
  Copyright (C) 2013 Texas Instruments Incorporated
  Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
 DC-DC converter needs at max 300us to get to 90% of 5V. 
 Get the next bridge, connected to port@1. 
 Get the control and HPD GPIOs. 
 Register the IRQ if the HPD GPIO is IRQ-capable. 
 Register the DRM bridge. 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2018 Samsung Electronics Co., Ltd
  Authors:
 	Andrzej Hajda <a.hajda@samsung.com>
 	Maciej Purski <m.purski@samsung.com>
 PPI layer registers 
 START control bit 
 LPTX timing signal 
 Enables each lane 
 BTA timing parameters 
 Assertion timer for Lane 0 
 Assertion timer for Lane 1 
 Assertion timer for Lane 2 
 Assertion timer for Lane 3 
 DSI layer registers 
 START control bit of DSI-TX 
 Enables each lane 
 Video path registers 
 Video Path Control 
 Magic square in RGB666 
 Use chip clock for timing 
 Event mode 
 RGB888 mode 
 VSYNC delay 
 Polarity of HSYNC signal 
 Polarity of DE signal 
 Polarity of VSYNC signal 
 Horizontal Timing Control 1 
 Horizontal Timing Control 2 
 Vertical Timing Control 1 
 Vertical Timing Control 2 
 Video Frame Timing Update Enable 
 LVDS registers 
 Mux input bit 0 to 3 
 Mux input bit 4 to 7 
 Mux input bit 8 to 11 
 Mux input bit 12 to 15 
 Mux input bit 16 to 19 
 Mux input bit 20 to 23 
 Mux input bit 24 to 27 
 Input bit numbers used in mux registers 
 LVDS Configuration 
 LVDS PHY 0 
 PHY reset 
 Frequency range select 
 ClockData Flag pins 
 System registers 
 System Reset 
 System ID 
 Reset I2C-Slave controller 
 Reset I2C-Master controller 
 Reset LCD controller 
 Reset Bus Management controller 
 Reset DSI-RX and App controller 
 Reset Register module 
 Lane enable PPI and DSI register bits 
 LVCFG fields 
 configure PPI counters 
 enable four data lanes and clock lane 
 start 
 configure video path 
 reset PHY 
 reset bridge 
 set bit order 
 SPDX-License-Identifier: GPL-2.0
  TI SN65DSI83,84,85 driver
  Currently supported:
  - SN65DSI83
    = 1x Single-link DSI ~ 1x Single-link LVDS
    - Supported
    - Single-link LVDS mode tested
  - SN65DSI84
    = 1x Single-link DSI ~ 2x Single-link or 1x Dual-link LVDS
    - Supported
    - Dual-link LVDS mode tested
    - 2x Single-link LVDS mode unsupported
      (should be easy to add by someone who has the HW)
  - SN65DSI85
    = 2x Single-link or 1x Dual-link DSI ~ 2x Single-link or 1x Dual-link LVDS
    - Unsupported
      (should be easy to add by someone who has the HW)
  Copyright (C) 2021 Marek Vasut <marex@denx.de>
  Based on previous work of:
  Valentin Raevsky <valentin@compulab.co.il>
  Philippe Schenker <philippe.schenker@toradex.com>
 ID registers 
 Reset and clock registers 
 DSI registers 
 DSI85-only 
 DSI85-only 
 DSI85-only 
 LVDS registers 
 0:AB 1:A-only 
 Video registers 
 IRQ registers 
	
	  Reset the chip, pull EN line low for t_reset=10ms,
	  then high for t_en=1ms.
	
	  The encoding of the LVDS_CLK_RANGE is as follows:
	  000 - 25 MHz <= LVDS_CLK < 37.5 MHz
	  001 - 37.5 MHz <= LVDS_CLK < 62.5 MHz
	  010 - 62.5 MHz <= LVDS_CLK < 87.5 MHz
	  011 - 87.5 MHz <= LVDS_CLK < 112.5 MHz
	  100 - 112.5 MHz <= LVDS_CLK < 137.5 MHz
	  101 - 137.5 MHz <= LVDS_CLK <= 154 MHz
	  which is a range of 12.5MHz..162.5MHz in 50MHz steps, except that
	  the ends of the ranges are clamped to the supported range. Since
	  sn65dsi83_mode_valid() already filters the valid modes and limits
	  the clock to 25..154 MHz, the range calculation can be simplified
	  as follows:
	
	  The encoding of the CHA_DSI_CLK_RANGE is as follows:
	  0x00 through 0x07 - Reserved
	  0x08 - 40 <= DSI_CLK < 45 MHz
	  0x09 - 45 <= DSI_CLK < 50 MHz
	  ...
	  0x63 - 495 <= DSI_CLK < 500 MHz
	  0x64 - 500 MHz
	  0x65 through 0xFF - Reserved
	  which is DSI clock in 5 MHz steps, clamped to 40..500 MHz.
	  The DSI clock are calculated as:
	   DSI_CLK = mode clock  bpp  dsi_data_lanes  2
	  the 2 is there because the bus is DDR.
 The divider is (DSI_CLK  LVDS_CLK) - 1, which really is: 
 Get the LVDS format from the bridge state. 
		
		  Some bridges still don't set the correct
		  LVDS bus pixel format, use SPWG24 default
		  format until those are fixed.
	
	  Retrieve the CRTC adjusted mode. This requires a little dance to go
	  from the bridge to the encoder, to the connector and to the CRTC.
 Clear reset, disable PLL 
 Reference clock derived from DSI link clock. 
 Set number of DSI lanes and LVDS link config. 
 CHB is DSI85-only, set to default on DSI83DSI84 
 No equalization. 
 Set up sync signal polarity. 
 Set up bits-per-pixel, 18bpp or 24bpp. 
 Set up LVDS format, JEIDAFormat 1 or SPWGFormat 2 
 Set up LVDS output config (DSI84,DSI85) 
 32 + 1 pixel clock to ensure proper operation 
 Enable PLL 
 On failure, disable PLL again and exit. 
 Trigger reset after CSR register update. 
 Clear all errors that got asserted during initialization. 
 Clear reset, disable PLL 
 Put the chip in reset, pull EN line low. 
 LVDS output clock range 25..154 MHz 
 This is the DSI-end bus format 
 Odd pixels to LVDS Channel A, even pixels to B 
 Even pixels to LVDS Channel A, odd pixels to B 
 SPDX-License-Identifier: GPL-2.0-only
  NXP PTN3460 DPLVDS bridge driver
  Copyright (C) 2013 Google, Inc.
 Load the selected edid into SRAM (accessed at PTN3460_EDID_ADDR) 
 Enable EDID emulation and select the desired EDID 
	
	  There's a bug in the PTN chip where it falsely asserts hotplug before
	  it is fully functional. We're forced to wait for the maximum start up
	  time specified in the chip's datasheet to make sure we're really up.
 Let this driver create connector if requested 
	
	  Request the reset pin low to avoid the bridge being
	  initialized prematurely
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2020 Amarula Solutions(India)
  Author: Jagan Teki <jagan@amarulasolutions.com>
	
	  lsb nibble: 2nd nibble of hdisplay
	  msb nibble: 2nd nibble of vdisplay
 dsi specific sequence 
 icn6211 specific sequence 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0+
  i.MX8 NWL MIPI DSI host driver
  Copyright (C) 2017 NXP
  Copyright (C) 2020 Purism SPC
 i.MX8 NWL quirks 
 i.MX8MQ errata E11418 
 status of transmission 
 in bytes 
 in bytes 
	
	  The DSI host controller needs this reset sequence according to NWL:
	  1. Deassert pclk reset to get access to DSI regs
	  2. Configure DSI Host and DPHY and enable DPHY
	  3. Deassert ESC and BYTE resets to allow host TX operations)
	  4. Send DSI cmds to configure peripheral (handled by panel drv)
	  5. Deassert DPI reset so DPI receives pixels and starts sending
	     DSI data
	 
	  TODO: Since panel_bridges do their DSI setup in enable we
	  currently have 4. and 5. swapped.
 DSI clocks 
	
	  hardware bug: the i.MX8MQ needs this clock on during reset
	  even when not using LCDIF.
 dsi lanes 
  ps2bc - Picoseconds to byte clock cycles
  ui2bc - UI time periods to byte clock cycles
  us2bc - micro seconds to lp clock cycles
 values in byte clock cycles 
 In LP clock cycles 
	
	  Adjusting input polarity based on the video mode results in
	  a black screen so always pick active low:
 Get the RX header and parse it 
 read second byte 
 read first byte 
 Set word_count from previous header read 
 If RX payload is not yet received, wait for it 
 Read the RX payload 
 Send the payload, if any 
 Send the rest of the payload 
	
	  Send the header
	  header[0] = Virtual Channel + Data Type
	  header[1] = Word Count LSB (LP) or first param (SP)
	  header[2] = Word Count MSB (LP) or second param (SP)
 Send packet command 
 Create packet to be sent 
 Initiate the DSI packet transmision 
 Disabling the clock before the phy breaks enabling dsi again 
	
	  So far the DPHY spec minimal timings work for both mixel
	  dphy and nwl dsi host
 At least LCDIF + NWL needs active high sync 
	
	  Do a full modeset if crtc_state->active is changed to be true.
	  This ensures our ->mode_set() is called to get the DSI controller
	  and the PHY ready to send DCS commands, when only the connector's
	  DPMS is brought out of "Off" status.
 Save the new desired phy config 
 Step 1 from DSI reset-out instructions 
 Step 2 from DSI reset-out instructions 
 Step 3 from DSI reset-out instructions 
 Step 5 from DSI reset-out instructions 
 If MEDIA_BUS_FMT_FIXED is tested, return default bus format 
 sentinel  }
 sentinel.  },
 GPLv2 or later 
 SPDX-License-Identifier: GPL-2.0-only
  Parade PS8622 eDPLVDS bridge driver
  Copyright (C) 2014 Google, Inc.
 Brightness scale on the Parade chip 
 Timings taken from the version 1.7 datasheet for the PS8622PS8625 
 HPD low 
 SW setting: [1:0] SW output 1.2V voltage is lower to 96% 
 RCO SS setting: [5:4] = b01 0.5%, b10 1%, b11 1.5% 
 [7] RCO SS enable 
	 RPHY Setting
	  [3:2] CDR tune wait cycle before measure for fine tune
	  b00: 1us b01: 0.5us b10:2us, b11: 4us
 [3] RFD always on 
 CTN lock inout: 20000ppm80000ppm. Lock out 2 times. 
 2.7G CDR settings: NOF=40LSB for HBR CDR  setting 
 [1:0] Fmin=+4bands 
 [7:5] DCO_FTRNG=+-40% 
 1.62G CDR settings: [5:2]NOF=64LSB [1:0]DCO scale is 25 
 Gitune=-37% 
 Fbstep=100% 
 [7] LOS signal disable 
 RPIO Setting: [7:4] LVDS driver bias current : 75% (250mV swing) 
 [7:6] Right-bar GPIO output strength is 8mA 
 EQ Training State Machine Setting, RCO calibration start 
 Logic, needs more than 10 I2C command 
 [4:0] MAX_LANE_COUNT set to max supported lanes 
 [4:0] LANE_COUNT_SET set to chosen lane count 
 HPD CP toggle enable 
 Counter number, add 1ms counter delay 
 [6]PWM function control by DPCD0040f[7], default is PWM block 
 04h Adjust VTotal toleranceto fix the 30Hz no display issue 
 DPCD00400='h00, Parade OUI ='h001cf8 
 DPCD00401='h1c 
 DPCD00402='hf8 
 DPCD403~408 = ASCII code, D2SLV5='h4432534c5635 
 DPCD404 
 DPCD405 
 DPCD406 
 DPCD407 
 DPCD408 
 DPCD40A, Initial Code major revision '01' 
 DPCD40B, Initial Code minor revision '05' 
 DPCD720, internal PWM 
 FFh for 100% brightness, 0h for 0% brightness 
 DPCD720, external PWM 
 Set LVDS output as 6bit-VESA mapping, single LVDS channel 
 Enable SSC set by register 
 Set SSC enabled and +-1% central spreading 
 Logic end 
 MPU Clock source: LC => RCO 
 LC -> RCO 
 HPD high 
	
	  T1 is the range of time that it takes for the power to rise after we
	  enable the lcdps8622 fet. T2 is the range of time in which the
	  data sheet specifies we should deassert the reset pin.
	 
	  If it takes T1.max for the power to rise, we need to wait atleast
	  T2.min before deasserting the reset pin. If it takes T1.min for the
	  power to rise, we need to wait at most T2.max before deasserting the
	  reset pin.
 wait 20ms after RST high 
 Delay after panel is disabled 
	
	  This doesn't matter if the regulators are turned off, but something
	  else might keep them on. In that case, we want to assert the slp gpio
	  to lower power.
	
	  Sleep for at least the amount of time that it takes the power rail to
	  fall to prevent asserting the rst gpio from doing anything.
	
	  Assert the reset pin high to avoid the bridge being
	  initialized prematurely
 Device type, max_lane_count 
 SPDX-License-Identifier: GPL-2.0-only
  Analog Devices ADV7511 HDMI transmitter driver
  Copyright 2012 Analog Devices Inc.
 ADI recommended values for proper operation. 
 -----------------------------------------------------------------------------
  Register access
 00 
 10 
 20 
 30 
 40 
 50 
 60 
 70 
 80 
 90 
 a0 
 b0 
 c0 
 d0 
 e0 
 f0 
 -----------------------------------------------------------------------------
  Hardware configuration
 Coefficients for adv7511 color space conversion 
 The AVI infoframe id is not configurable 
	
	  The input style values documented in the datasheet don't match the
	  hardware register field values :-(
 TODO Support input ID 6 
		
		  Documentation says the INT_ENABLE registers are reset in
		  POWER_DOWN mode. My 7511w preserved the bits, however.
		  Still, let's be safe and stick to the documentation.
	
	  Per spec it is allowed to pulse the HPD signal to indicate that the
	  EDID information has changed. Some monitors do this when they wakeup
	  from standby or are enabled. When the HPD goes low the adv7511 is
	  reset and the outputs are disabled which might cause the monitor to
	  go to standby again. To avoid this we ignore the HPD pin for the
	  first few seconds after enabling the output.
	
	  Most of the registers are reset during power down or when HPD is low.
 TODO: setup additional power down modes 
 -----------------------------------------------------------------------------
  Interrupt and hotplug detection
	
	  The bridge resets its registers on unplug. So when we get a plug
	  event and we're already supposed to be powered, cycle the bridge to
	  restore its state.
 -----------------------------------------------------------------------------
  EDID retrieval
		 Break this apart, hopefully more I2C controllers will
		  support 64 byte transfers than 256 byte transfers
 -----------------------------------------------------------------------------
  ADV75xx helpers
 Reading the EDID only works if the device is powered 
 Reset the EDID_I2C_ADDR register as it might be cleared 
	 The chip resets itself when the cable is disconnected, so in case
	  there is a pending HPD interrupt and the cable is connected there was
	  at least one transition from disconnected to connected and the chip
 Renable HPD sensing 
 The hardware vsync generator has a off-by-one bug 
		
		  If the input signal is always low or always high we want to
		  invert or let it passthrough depending on the polarity of the
		  current mode.
	
	  TODO Test first order 4:2:2 to 4:4:4 up conversion method, which is
	  supposed to give better results.
 -----------------------------------------------------------------------------
  DRM Connector Operations
 -----------------------------------------------------------------------------
  DRM Bridge Operations
 -----------------------------------------------------------------------------
  Probe & remove
 Hardcode the sync pulse configurations for now. 
	
	  The power down GPIO is optional. If present, toggle it from active to
	  inactive to wake up the encoder.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2016, The Linux Foundation. All rights reserved.
 2, 3, 4 lanes 
 set pixel clock divider mode 
 horizontal porch params 
 vertical porch params 
 set number of dsi lanes 
 reset internal timing generator 
 disable internal timing generator 
 enable hdmi 
 disable test mode 
 disable hdmi 
 disable internal timing generator 
 TODO: Check if these need to be parsed by DT or not 
 SPDX-License-Identifier: GPL-2.0-only
  Analog Devices ADV7511 HDMI transmitter driver
  Copyright 2012 Analog Devices Inc.
  Copyright (c) 2016, Linaro Limited
 hide Audio infoframe updates 
 enable NCTS, enable Audio sample packets 
 enable NCTS 
 not copyrighted 
 enable audio infoframes 
 AV mute disable 
 use Audio infoframe updated info 
 enable SPDIF receiver 
	
	  HDMI sound should be located as reg = <2>
	  Then, it is sound port 0
 SPDX-License-Identifier: GPL-2.0-only
  adv7511_cec.c - Analog Devices ADV751133 cec driver
  Copyright 2017 Cisco Systems, Inc. andor its affiliates. All rights reserved.
		
		  We set this status bit since this hardware performs
		  retransmissions.
 toggle to re-enable rx 1 
 power up cec section 
 legacy mode and clear all rx buffers 
 initially disable tx 
 enabled irqs: 
 tx: ready 
 tx: arbitration lost 
 tx: retry timeout 
 rx: ready 1 
 disable address mask 1-3 
 power down cec section 
 enable address mask 0 
 set address for mask 0 
 enable address mask 1 
 set address for mask 1 
 enable address mask 2 
 set address for mask 1 
	
	  The number of retries is the number of attempts - 1, but retry
	  at least once. It's not clear if a value of 0 is allowed, so
	  let's do at least one retry.
 blocking, clear cec tx irq status 
 write data 
 set length (data + header) 
 start transmit, enable tx 
 cec soft reset 
 legacy mode 
 SPDX-License-Identifier: GPL-2.0
  dw-hdmi-i2s-audio.c
  Copyright (c) 2017 Renesas Solutions Corp.
  Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 it cares I2S only 
 Reset the FIFOs before applying new params 
 Enable the required i2s lanes 
 Fall-thru 
	
	  HDMI sound should be located as reg = <2>
	  Then, it is sound port 0
 SPDX-License-Identifier: GPL-2.0-only
  DesignWare HDMI audio driver
  Written and tested against the Designware HDMI Tx found in iMX6.
 Provide some bits rather than bit offsets 
  The default mapping of ALSA channels to HDMI channels and speaker
  allocation bits.  Note that we can't do channel remapping here -
  channels must be in the same order.
  Mappings for alsa-lib pcmsurround.conf files:
 		Front	Sur4.0	Sur4.1	Sur5.0	Sur5.1	Sur7.1
  Channels	2	4	6	6	6	8
  Our mapping from ALSA channel to CEA686D speaker name and HDMI channel:
 				Number of ALSA channels
  ALSA Channel	2	3	4	5	6	7	8
  0		FL:0	=	=	=	=	=	=
  1		FR:1	=	=	=	=	=	=
  2			FC:3	RL:4	LFE:2	=	=	=
  3				RR:5	RL:4	FC:3	=	=
  4					RR:5	RL:4	=	=
  5						RR:5	=	=
  6							RC:6	=
  7							RLCFRC	RLCFRC
 FL,FR 
 FL,FR,FC 
 FL,FR,RL,RR 
 FL,FR,LFE,RL,RR 
 FL,FR,LFE,FC,RL,RR 
 FL,FR,LFE,FC,RL,RR,RC 
 FL,FR,LFE,FC,RL,RR,[FR]RC,[FR]LC 
  Convert to hardware format: The userspace buffer contains IEC958 samples,
  with the PCUV bits in bits 31..28 and audio samples in bits 27..4.  We
  need these to be in bits 27..24, with the IEC B bit in bit 28, and audio
  samples in 23..0.
  Default preamble in bits 3..0: 8 = block start, 4 = even 2 = odd
  Ideally, we could do with having the data properly formatted in userspace.
 Clear all irqs before enabling irqs and starting DMA 
 Setup the hardware startstop addresses 
 Disable interrupts before disabling DMA 
 ERR004323: must limit to 8k 
 Limit the buffer size to the size of the preallocated buffer 
 Clear FIFO 
 Configure interrupt polarities 
 Keep interrupts masked, and clear any pending 
 Un-mute done interrupt 
 Mute all interrupts 
 Allocate the PCM runtime buffer, which is exposed to userspace. 
 Setup as per 3.0.5 FSL 4.1.0 BSP 
 NOTREACHED 
 Minimum number of bytes in the fifo. 
	
	  We are unable to report the exact hardware position as
	  reading the 32-bit DMA position using 8-bit reads is racy.
	
	  To support 8-channel 96kHz audio reliably, we need 512k
	  to satisfy alsa with our restricted period (ERR004323).
  This code is fine, but requires implementation in the dw_hdmi_trigger()
  method which is currently missing as I have no way to test this.
 SPDX-License-Identifier: GPL-2.0-only
  Designware HDMI CEC driver
  Copyright (C) 2015-2017 Russell King.
	
	  Our device is just a convenience - we want to link to the real
	  hardware device here, so that userspace can see the association
	  between the HDMI hardware and its associated CEC chardev.
 override the module pointer 
	
	  CEC documentation says we must not call cec_delete_adapter
	  after a successful call to cec_register_adapter().
 SPDX-License-Identifier: GPL-2.0-or-later
  DesignWare High-Definition Multimedia Interface (HDMI) driver
  Copyright (C) 2013-2015 Mentor Graphics Inc.
  Copyright (C) 2011-2013 Freescale Semiconductor, Inc.
  Copyright (C) 2010, Guennadi Liakhovetski <g.liakhovetski@gmx.de>
 DW-HDMI Controller >= 0x200a are at least compliant with SCDC version 1 
 used to serialize data transfers 
 for state below and previous_mode 
 mutex-protected force state 
 current connector (only valid when !disabled) 
 DRM has disabled our bridge 
 indicates the bridge is on 
 rxsense state 
 desired phy int mask settings 
 clock disable register 
 Software reset 
 Set Standard Mode speed (determined to be 100KHz on iMX6) 
 Set done, not acknowledged and arbitration interrupt polarities 
 Clear DONE and ERROR interrupts 
 Mute DONE and ERROR interrupts 
 If no unwedge state then give up 
	
	  This is a huge hack to workaround a problem where the dw_hdmi i2c
	  bus could sometimes get wedged.  Once wedged there doesn't appear
	  to be any way to unwedge it (including the HDMI_I2CM_SOFTRSTZ)
	  other than pulsing the SDA line.
	 
	  We appear to be able to pulse the SDA line (in the eyes of dw_hdmi)
	  by:
	  1. Remux the pin as a GPIO output, driven low.
	  2. Wait a little while.  1 ms seems to work, but we'll do 10.
	  3. Immediately jump to remux the pin as dw_hdmi i2c again.
	 
	  At the moment of remuxing, the line will still be low due to its
	  recent stint as an output, but then it will be pulled high by the
	  (presumed) external pullup.  dw_hdmi seems to see this as a rising
	  edge and that seems to get it out of its jam.
	 
	  This wedging was only ever seen on one TV, and only on one of
	  its HDMI ports.  It happened when the TV was powered on while the
	  device was plugged in.  A scope trace shows the TV bringing both SDA
	  and SCL low, then bringing them both back up at roughly the same
	  time.  Presumably this confuses dw_hdmi because it saw activity but
	  no real STOP (maybe it thinks there's another master on the bus?).
	  Giving it a clean rising edge of SDA while SCL is already high
	  presumably makes dw_hdmi see a STOP which seems to bring dw_hdmi out
	  of its stupor.
	 
	  Note that after coming back alive, transfers seem to immediately
	  resume, so if we unwedge due to a timeout we should wait a little
	  longer for our transfer to finish, since it might have just started
	  now.
 If we can't unwedge, return timeout 
 We tried to unwedge; give it another chance 
 Check for error condition on the bus 
 Use the first write byte as register address 
		
		  The internal I2C controller does not support the multi-byte
		  read and write operations needed for DDCCI.
		  TOFIX: Blacklist the DDCCI address until we filter out
		  unsupported I2C operations.
 Unmute DONE and ERROR interrupts 
 Set slave device address taken from the first I2C message 
 Set slave device register address on transfer 
 Set segment pointer for I2C extended read mode operation 
 Mute DONE and ERROR interrupts 
 Must be setcleared first 
 nshift factor = 0 
 Use automatic CTS generation mode when CTS is not set 
  When transmitting IEC60958 linear PCM audio, these registers allow to
  configure the channel status information of all the channel status
  bits in the IEC60958 frame. For the moment this configuration is only
  used when the I2S audio interface, General Purpose Audio (GPA),
  or AHB audio DMA (AHBAUDDMA) interface is active
  (for SPDIF interface this information comes from the stream).
	
	  Set channel status register for frequency and word length.
	  Use default values for other registers.
 Only compute CTS when using internal AHB audio 
		
		  Compute the CTS value from the N value.  Note that CTS and N
		  can be up to 20 bits in total, so we need 64-bit math.  Also
		  note that our TDMS clock is not fully accurate; it is
		  accurate to kHz.  This can introduce an unnecessary remainder
		  in the calculation below, so we don't try to warn about that.
	
	  For >2 channel PCM audio, we need to select layout 1
	  and set an appropriate channel map.
 Set the audio infoframes channel count 
  this submodule is responsible for the video data synchronization.
  for example, for RGB 4:4:4 input, the data map is defined as
 			pin{47~40} <==> R[7:0]
 			pin{31~24} <==> G[7:0]
 			pin{15~8}  <==> B[7:0]
 Enable TX stuffing: When DE is inactive, fix the output data to 0 
 The CSC registers are sequential, alternating MSB then LSB 
 YCC422 interpolation to 444 mode 
 Configure the CSC registers 
  HDMI video packetizer is used to packetize the data.
  for example, if input is YCC422 mode or repeater is used,
  data should be repacked this module can be bypassed.
 set the packetizer registers 
 Data from pixel repeater block 
 data from packetizer block 
 -----------------------------------------------------------------------------
  Synopsys PHY Handling
 Filter out invalid setups to avoid configuring SCDC and scrambling 
 Completely disable SCDC support for older controllers 
 Disable if no DDC bus 
 Disable if SCDC is not supported, or if an HF-VSDB block is absent 
	
	  Disable if display only support low TMDS rates and scrambling
	  for low rates is not supported either
  HDMI2.0 Specifies the following procedure for High TMDS Bit Rates:
  - The Source shall suspend transmission of the TMDS clock and data
  - The Source shall write to the TMDS_Bit_Clock_Ratio bit to change it
  from a 0 to a 1 or from a 1 to a 0
  - The Source shall allow a minimum of 1 ms and a maximum of 100 ms from
  the time the TMDS_Bit_Clock_Ratio bit is written until resuming
  transmission of TMDS clock and data
  To respect the 100ms maximum delay, the dw_hdmi_set_high_tmds_clock_ratio()
  helper should called right before enabling the TMDS Clock and Data in
  the PHY configuration callback.
 Control for TMDS Bit PeriodTMDS Clock-Period Ratio 
 PHY reset. The reset signal is active high on Gen2 PHYs. 
	
	  Wait for TX_PHY_LOCK to be deasserted to indicate that the PHY went
	  to low power mode.
 Toggle TMDS enable. 
 Wait for PHY PLL lock 
  PHY configuration function for the DWC HDMI 3D TX PHY. Based on the available
  information the DWC MHL PHY has the same register layout and is thus also
  supported by this function.
 TOFIX Will need 420 specific PHY configuration tables 
 PLLMPLL Cfg - always match on final entry 
 Override and disable clock termination. 
 Leave low power consumption mode by asserting SVSRET. 
 Write to the PHY as configured by the platform 
 Wait for resuming transmission of TMDS clock and data 
 HDMI Phy spec says to do the phy initialization sequence twice 
	
	  Configure the PHY RX SENSE and HPD interrupts polarities and clear
	  any pending interrupt.
 Enable cable hot plug irq. 
 Clear and unmute interrupts. 
 -----------------------------------------------------------------------------
  HDMI TX Setup
 disable rx detect 
 Initialise info frame from DRM mode 
 Set up colorimetry 
 Carries no data 
	
	  The Designware IP uses a different byte format from standard
	  AVI info frames, though generally the bits are in the correct
	  bytes.
	
	  AVI data byte 1 differences: Colorspace in bits 0,1 rather than 5,6,
	  scan info in bits 4,5 rather than 0,1 and active aspect present in
	  bit 6 rather than 4.
 AVI data byte 2 differences: none 
 AVI data byte 3 differences: none 
 AVI data byte 4 differences: none 
 AVI Data Byte 5- set up input and output pixel repetition 
	
	  AVI data byte 5 differences: content type in 0,1 rather than 4,5,
	  ycc range in bits 2,3 rather than 6,7
 AVI Data Bytes 6-13 
		
		  Going into that statement does not means vendor infoframe
		  fails. It just informed us that vendor infoframe is not
		  needed for the selected mode. Only 4k or stereoscopic 3D
		  mode requires vendor infoframe. So just simply return.
 Set the length of HDMI vendor specific InfoFrame payload 
 Set 24bit IEEE Registration Identifier 
 Set HDMI_Video_Format and HDMI_VIC3D_Structure 
 Packet frame interpolation 
 Auto packets per frame and line spacing 
 Configures the Frame Composer On RDRB mode 
 Set up HDMI_FC_INVIDCONF 
	
	  When we're setting a YCbCr420 mode, we need
	  to adjust the horizontal timing to suit.
	
	  When we're setting an interlaced mode, we need
	  to adjust the vertical timing to suit.
 Scrambling Control 
			
			  HDMI2.0 Specifies the following procedure:
			  After the Source Device has determined that
			  SCDC_Present is set (=1), the Source Device should
			  write the accurate Version of the Source Device
			  to the Source Version field in the SCDCS.
			  Source Devices compliant shall set the
			  Source Version = 1.
 Enabled Scrambling in the Sink 
			
			  To activate the scrambler feature, you must ensure
			  that the quasi-static configuration bit
			  fc_invidconf.HDCP_keepout is set at configuration
			  time, before the required mc_swrstzreq.tmdsswrst_req
			  reset request is issued.
 Set up horizontal active pixel width 
 Set up vertical active lines 
 Set up horizontal blanking pixel region width 
 Set up vertical blanking pixel region width 
 Set up HSYNC active edge delay width (in pixel clks) 
 Set up VSYNC active edge delay (in lines) 
 Set up HSYNC active pulse width (in pixel clks) 
 Set up VSYNC active edge delay (in lines) 
 HDMI Initialization Step B.4 
 control period minimum duration 
 Set to fill TMDS data channels 
 Enable pixel clock and tmds data path 
 Enable csc path 
 Workaround to clear the overflow condition 
	
	  Under some circumstances the Frame Composer arithmetic unit can miss
	  an FC register write due to being busy processing the previous one.
	  The issue can be worked around by issuing a TMDS software reset and
	  then write one of the FC registers several times.
	 
	  The number of iterations matters and depends on the HDMI TX revision
	  (and possibly on the platform). So far i.MX6Q (v1.30a), i.MX6DL
	  (v1.31a) and multiple Allwinner SoCs (v1.32a) have been identified
	  as needing the workaround, with 4 iterations for v1.30a and 1
	  iteration for others.
	  The Amlogic Meson GX SoCs (v2.01a) have been identified as needing
	  the workaround with a single iteration.
	  The Rockchip RK3288 SoC (v2.00a) and RK3328RK3399 SoCs (v2.11a) have
	  been identified as needing the workaround with a single iteration.
 TMDS software reset 
 TOFIX: Get input encoding from plat data or fallback to none 
 HDMI Initialization Step B.1 
 HDMI Initializateion Step B.2 
 HDMI Initialization Step B.3 
 HDMI Initialization Step E - Configure audio 
 not for DVI mode 
 HDMI Initialization Step F - Configure AVI InfoFrame 
	
	  Boot up defaults are:
	  HDMI_IH_MUTE   = 0x03 (disabled)
	  HDMI_IH_MUTE_ = 0x00 (enabled)
	 
	  Disable top level interrupt bits in HDMI block
 by default mask all interrupts 
 Disable interrupts in the IH_MUTE_ registers 
 Enable top level interrupt bits in HDMI block 
	
	  The curr_conn field is guaranteed to be valid here, as this function
	  is only be called when !hdmi->disabled.
  Adjust the detection of RXSENSE according to whether we have a forced
  connection mode enabled, or whether we have been disabled.  There is
  no point processing RXSENSE interrupts if we have a forced connection
  state, or DRM has us disabled.
  We also disable rxsense interrupts when we think we're disconnected
  to avoid floating TDMS signals giving false rxsense interrupts.
  Note: we still need to listen for HPD interrupts even when DRM has us
  disabled so that we can detect a connect event.
 -----------------------------------------------------------------------------
  DRM Connector Operations
	
	  drm_connector_attach_max_bpc_property() requires the
	  connector to have a state.
 -----------------------------------------------------------------------------
  DRM Bridge Operations
  Possible output formats :
  - MEDIA_BUS_FMT_UYYVYY16_0_5X48,
  - MEDIA_BUS_FMT_UYYVYY12_0_5X36,
  - MEDIA_BUS_FMT_UYYVYY10_0_5X30,
  - MEDIA_BUS_FMT_UYYVYY8_0_5X24,
  - MEDIA_BUS_FMT_YUV16_1X48,
  - MEDIA_BUS_FMT_RGB161616_1X48,
  - MEDIA_BUS_FMT_UYVY12_1X24,
  - MEDIA_BUS_FMT_YUV12_1X36,
  - MEDIA_BUS_FMT_RGB121212_1X36,
  - MEDIA_BUS_FMT_UYVY10_1X20,
  - MEDIA_BUS_FMT_YUV10_1X30,
  - MEDIA_BUS_FMT_RGB101010_1X30,
  - MEDIA_BUS_FMT_UYVY8_1X16,
  - MEDIA_BUS_FMT_YUV8_1X24,
  - MEDIA_BUS_FMT_RGB888_1X24,
 Can return a maximum of 11 possible output formats for a modeconnector 
 If dw-hdmi is the only bridge, avoid negociating with ourselves 
	
	  If the current mode enforces 4:2:0, force the output but format
	  to 4:2:0 and do not add the YUV422444RGB formats
 Order bus formats from 16bit to 8bit if supported 
 Default 8bit fallback 
	
	  Order bus formats from 16bit to 8bit and from YUV422 to RGB
	  if supported. In any case the default RGB888 format is added
 Default 8bit RGB fallback 
  Possible input formats :
  - MEDIA_BUS_FMT_RGB888_1X24
  - MEDIA_BUS_FMT_YUV8_1X24
  - MEDIA_BUS_FMT_UYVY8_1X16
  - MEDIA_BUS_FMT_UYYVYY8_0_5X24
  - MEDIA_BUS_FMT_RGB101010_1X30
  - MEDIA_BUS_FMT_YUV10_1X30
  - MEDIA_BUS_FMT_UYVY10_1X20
  - MEDIA_BUS_FMT_UYYVYY10_0_5X30
  - MEDIA_BUS_FMT_RGB121212_1X36
  - MEDIA_BUS_FMT_YUV12_1X36
  - MEDIA_BUS_FMT_UYVY12_1X24
  - MEDIA_BUS_FMT_UYYVYY12_0_5X36
  - MEDIA_BUS_FMT_RGB161616_1X48
  - MEDIA_BUS_FMT_YUV16_1X48
  - MEDIA_BUS_FMT_UYYVYY16_0_5X48
 Can return a maximum of 3 possible input formats for an output format 
 If MEDIA_BUS_FMT_FIXED is tested, return default bus format 
 8bit 
 10bit 
 12bit 
 16bit 
YUV 4:2:0 
 We don't support double-clocked modes 
 Store the display mode for pluginDKMS poweron events 
 -----------------------------------------------------------------------------
  IRQ Handling
		
		  If the RX sense status indicates we're disconnected,
		  clear the software rxsense status.
		
		  Only set the software rxsense status when both
		  rxsense and hpd indicates we're connected.
		  This avoids what seems to be bad behaviour in
		  at least iMX6S versions of the phy.
	
	  RX sense tells us whether the TDMS transmitters are detecting
	  load - in other words, there's something listening on the
	  other end of the link.  Use this to decide whether we should
	  power on the phy as HPD may be toggled by the sink to merely
	  ask the source to re-read the EDID.
 Vendor PHYs require support from the glue layer. 
 Synopsys PHYs are handled internally. 
	
	  Reset HDMI DDC I2C master controller and mute I2CM interrupts.
	  Even if we are using a separate i2c adapter doing this doesn't
	  hurt.
 -----------------------------------------------------------------------------
  Proberemove API, used from platforms based on the DRM bridge API.
		
		  On platforms whose bindings don't make the output port
		  mandatory (such as Rockchip) the plat_data->output_port
		  field isn't set, so it's safe to make this a fatal error.
 Product and revision IDs 
	
	  To prevent overflows in HDMI_IH_FC_STAT2, set the clk regenerator
	  N and cts values before enabling phy
 If DDC bus is not specified, try to register HDMI I2C bus 
 Look for (optional) stuff related to unwedging 
 Disable all interrupts 
 -----------------------------------------------------------------------------
  Bindunbind API, used from platforms based on the component framework.
 SPDX-License-Identifier: GPL-2.0+
  Copyright (c) 2016, Fuzhou Rockchip Electronics Co., Ltd
  Copyright (C) STMicroelectronics SA 2017
  Modified by Philippe Cornu <philippe.cornu@st.com>
  This generic Synopsys DesignWare MIPI DSI host driver is based on the
  Rockchip version from rockchipdw-mipi-dsi.c with phy & bridge APIs.
 IP version 1.31 
 CONFIG_DEBUG_FS 
 per lane 
 CONFIG_DEBUG_FS 
 dual-dsi master ptr 
 dual-dsi slave ptr 
  Check if either a link to a master or slave is present
  The controller should generate 2 frames before
  preparing the peripheral.
	
	  TODO dw drv improvements
	  largest packet sizes during hfp or during vsavpbvfp
	  should be computed according to byte lane, lane number and only
	  if sending lp cmds in high speed is enable (PHY_TXREQUESTCLKHS)
 Wait end of the read operation 
 Read fifo must not be empty before all bytes are read 
	
	  TODO dw drv improvements
	  enabling low power is panel-dependent, we should use the
	  panel configuration here...
 CONFIG_DEBUG_FS 
 in MHz 
	
	  The maximum permitted escape clock is 20MHz and it is derived from
	  lanebyteclk, which is running at "lane_mbps  8".
 Default to 20MHz 
	
	  We want :
	      (lane_mbps >> 3)  esc_clk_division < X
	  which is:
	      (lane_mbps >> 3)  X > esc_clk_division
	
	  TODO dw drv improvements
	  timeout clock division should be computed with the
	  high speed transmission counter timeout and byte lane...
	
	  TODO dw drv improvements
	  only burst mode is supported here. For non-burst video modes,
	  we should compute DSI_VID_PKT_SIZE, DSI_VCCR.NUMC &
	  DSI_VNPCR.NPSIZE... especially because this driver supports
	  non-burst video modes, see dw_mipi_dsi_video_mode_config()...
	
	  TODO dw drv improvements
	  compute high speed transmission counter timeout according
	  to the timeout clock division (TO_CLK_DIVISION) and byte lane...
	
	  TODO dw drv improvements
	  the Bus-Turn-Around Timeout Counter should be computed
	  according to byte lane...
 Get lane byte clock cycles. 
	
	  TODO dw drv improvements
	  computations below may be improved...
	
	  TODO dw drv improvements
	  data & clock lane timers should be computed according to panel
	  blankings and to the automatic clock lane control mode...
	  note: DSI_PHY_TMR_CFG.MAX_RD_TIME should be in line with
	  DSI_CMD_MODE_CFG.MAX_RD_PKT_SIZE_LP (see CMD_MODE_ALL_LP)
	
	  TODO dw drv improvements
	  stop wait time should be the maximum between host dsi
	  and panel stop wait times
 Clear PHY state 
	
	  Switch to command mode before panel-bridge post_disable &
	  panel unprepare.
	  Note: panel-bridge disable & panel disable has been called
	  before by the drm framework.
	
	  TODO Only way found to call panel-bridge post_disable &
	  panel unprepare before the dsi "final" disable...
	  This needs to be fixed in the drm_bridge framework and the API
	  needs to be updated to manage our own call chains...
 this instance is the slave, so add the master's lanes 
 this instance is the master, so add the slave's lanes 
 single-dsi, so no other instance to consider 
 Switch to cmd mode for panel-bridge pre_enable & panel prepare 
 Switch to video mode for panel-bridge enable & panel enable 
 Set the encoder type as caller does not know it 
 Attach the panel-bridge to the dsi bridge 
 CONFIG_DEBUG_FS 
	
	  Note that the reset was not defined in the initial device tree, so
	  we have to be prepared for it not being found.
 introduce controllers to each other 
 migrate settings for already attached displays 
  Proberemove API, used from platforms based on the DRM bridge API.
  Bindunbind API, used from platforms based on the component framework.
 SPDX-License-Identifier: GPL-2.0
  TI j721e Cadence MHDP8546 DP wrapper
  Copyright (C) 2020 Texas Instruments Incorporated - http:www.ti.com
  Author: Jyri Sarha <jsarha@ti.com>
 TODO turn DPTX_IPCFG fw_mem_clk_en at pm_runtime_suspend. 
	
	  Enable VIF_0 and select DPI2 as its input. DSS0 DPI0 is connected
	  to eDP DPI2. This is the only supported SST configuration on
	  J721E.
 Put everything to defaults  
 SPDX-License-Identifier: GPL-2.0
  Cadence MHDP8546 DP bridge driver.
  Copyright (C) 2020 Cadence Design Systems, Inc.
  Authors: Quentin Schulz <quentin.schulz@free-electrons.com>
           Swapnil Jakhade <sjakhade@cadence.com>
           Yuti Amonkar <yamonkar@cadence.com>
           Tomi Valkeinen <tomi.valkeinen@ti.com>
           Jyri Sarha <jsarha@ti.com>
  TODO:
      - Implement optimized mailbox communication using mailbox interrupts
      - Add support for power management
      - Add support for features like audio, MST and fast link training
      - Implement request_fw_cancel to handle HW_STATE
      - Fix asynchronous loading of firmware implementation
      - Add DRM helper function for cdns_mhdp_lower_link_rate
 read the header of the message 
		
		  If the message in mailbox is not what we want, we need to
		  clear the mailbox by reading its contents.
 Returned address value should be the same as requested 
 read the firmware state 
 For DPCD read response header 
 Yes, read the DPCD read command response 
  cdns_mhdp_link_power_up() - power up a DisplayPort link
  @aux: DisplayPort AUX channel
  @link: pointer to a structure containing the link configuration
  Returns 0 on success or a negative error code on failure.
 DP_SET_POWER register is only available on DPCD v1.1 and later 
	
	  According to the DP 1.1 specification, a "Sink Device must exit the
	  power saving state within 1 ms" (Section 2.5.3.1, Table 5-52, "Sink
	  Control Field" (register 0x600).
  cdns_mhdp_link_power_down() - power down a DisplayPort link
  @aux: DisplayPort AUX channel
  @link: pointer to a structure containing the link configuration
  Returns 0 on success or a negative error code on failure.
 DP_SET_POWER register is only available on DPCD v1.1 and later 
  cdns_mhdp_link_configure() - configure a DisplayPort link
  @aux: DisplayPort AUX channel
  @link: pointer to a structure containing the link configuration
  Returns 0 on success or a negative error code on failure.
 Check if SSC is supported by both sides 
		
		  Older FW versions with major number 1, used to store FW
		  version information by storing repository revision number
		  in registers. This is for identifying these FW versions.
 To identify newer FW versions with major number 2 onwards. 
 Release uCPU reset and stall it. 
 Leave debug mode, release stall 
	
	  Wait for the KEEP_ALIVE "message" on the first 8 bits.
	  Updated each sched "tick" (~2ms)
 Init events to 0 as it's not cleared by FW at boot but on read 
 Activate uCPU 
	
	  Here we must keep the lock while enabling the interrupts
	  since it would otherwise be possible that interrupt enable
	  code is executed after the bridge is detached. The similar
	  situation is not possible in attach()detach() callbacks
	  since the hw_state changes from MHDP_HW_READY to
	  MHDP_HW_STOPPED happens only due to driver removal when
	  bridge should already be detached.
	
	   XXX how to make sure the bridge is still attached when
	       calling drm_kms_helper_hotplug_event() after releasing
	       the lock? We should not hold the spin lock when
	       calling drm_kms_helper_hotplug_event() since it may
	       cause a dead lock. FB-dev console calls detect from the
	       same thread just down the call stack started here.
 Reset PHY configuration 
 Check if Voltage swing and pre-emphasis are within limits 
		
		  Voltage swing level and pre-emphasis level combination is
		  not allowed: leaving pre-emphasis as-is, and adjusting
		  voltage swing.
 Enable link training TPS[eq_tps] in PHY 
 3.1.5.2 in DP Standard v1.4. Table 3-1 
 Not all CR_DONE bits set 
		
		  Voltage swingpre-emphasis adjust requested
		  during CR phase
 Reset PHY config 
 Reset PHY config 
 Get source capabilities based on PHY attributes 
 PHY uses Mbs, DRM uses tens of kbs. 
 Set SSC support 
 Set TPS support 
 Set fast link support 
 Disable framer for link training 
 Spread AMP if required, enable 8b10b coding 
	
	  HACK: Warn about unsupported display formats until we deal
	        with them correctly.
	
	  mode->clock is expressed in kHz. Multiplying by bpp and dividing by 8
	  we get the number of kBs. DisplayPort applies a 8b-10b encoding, the
	  value thus equals the bandwidth in 10kbs units, which matches the
	  units of the rate parameter.
 Enable SW event interrupts 
	
	  If YCBCR supported and stream not SD, use ITU709
	  Need to handle ITU version with YCBCR420 when supported
 Use VSC SDP for Y420 
 Get rate in MSymbols per second per lane 
 Enable VIF clock for stream 0 
 Disable VIF clock for stream 0 
 Enable SW event interrupts 
 Getting event bits failed, bail out 
	
	  If we get a HPD pulse event and we were and still are connected,
	  check the link status. If link status is ok, there's nothing to do
	  as we don't handle DP interrupts. If link status is bad, continue
	  with full link setup.
		
		  If everything looks fine, just return, as we don't handle
		  DP IRQs.
 If link is bad, mark link as down so that we do a new LT 
 Grab the locks before changing connector property 
	
	  Set connector link status to BAD and send a Uevent to notify
	  userspace to do a modeset.
 Send Hotplug uevent so userspace can reprobe 
	
	   Calling drm_kms_helper_hotplug_event() when not attached
	   to drm device causes an oops because the drm_bridge->dev
	   is NULL. See cdns_mhdp_fw_cb() comments for details about the
	   problems related drm_kms_helper_hotplug_event() call.
 Initialize link rate and num of lanes to host values 
 The only currently supported format 
 Initialize the work for modeset in case of link train failure 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
  Cadence MHDP8546 DP bridge driver.
  Copyright (C) 2020 Cadence Design Systems, Inc.
 read the header of the message 
 SPDX-License-Identifier: GPL-2.0-or-later
 Analogix DP (Display Port) core interface driver.
 Copyright (C) 2012 Samsung Electronics Co., Ltd.
 Author: Jingoo Han <jg1.han@samsung.com>
 SW defined function Normal operation 
	
	  Some edp screen do not have hpd signal, so we can't just
	  return failed when hpd plug in detect failed, DT property
	  "force-hpd" would indicate whether driver need this.
	
	  The eDP TRM indicate that if HPD_STATUS(RO) is 0, AUX CH
	  will not work, so we need to give a force hpd action to
	  set HPD_STATUS manually.
 Disable psr function 
 Main-Link transmitter remains active during PSR active states 
 Enable psr function 
 Set link rate and count as you want to establish
 Setup RX configuration 
 set enhanced mode if available 
 Set TX pre-emphasis to minimum 
 Wait for PLL lock 
 Set training pattern 1 
 Set RX training pattern 
 set training pattern 2 for EQ 
 traing pattern Set to Normal 
 not all locked 
	
	  For DP rev.1.1, Maximum link rate of Main Link lanes
	  0x06 = 1.62 Gbps, 0x0a = 2.7 Gbps
	  For DP rev.1.2, Maximum link rate of Main Link lanes
	  0x06 = 1.62 Gbps, 0x0a = 2.7 Gbps, 0x14 = 5.4Gbps
	
	  For DP rev.1.1, Maximum number of Main Link lanes
	  0x01 = 1 lane, 0x02 = 2 lanes, 0x04 = 4 lanes
	
	  MACRO_RST must be applied after the PLL_LOCK to avoid
	  the DP inter pair skew issue for at least 10 us
 Initialize by reading RX's DPCD 
 Setup TX lane count & rate 
 All DP analog module power up 
 Process here 
 source Set training pattern 1 
 From DP spec, pattern must be on-screen for a minimum 500us 
 From DP spec, pattern must be on-screen for a minimum 500us 
 TODO: enhanced_mode?
	
	  Useful for debugging issues with fast link training, disable for more
	  speed
 Set to use the register calculated MN video 
 For video bist, Video timing must be generated by register 
 Disable video mute 
 Configure video slave mode 
 Enable video 
 Keep the panel disabled while we configure video 
 Safe to enable the panel now 
 Check whether panel supports fast training 
 Prepare VSC packet as per EDP 1.4 spec, Table 6.9 
 Prepare VSC packet as per EDP 1.4 spec, Table 6.9 
  This function is a bit of a catch-all for panel preparation, hopefully
  simplifying the logic of functions that need to prepareunprepare the panel
  below.
  If @prepare is true, this function will prepare the panel. Conversely, if it
  is false, the panel will be unprepared.
  If @is_modeset_prepare is true, the function will disregard the current state
  of the panel and either prepareunprepare the panel based on @prepare. Once
  it finishes, it will update dp->panel_is_modeset to reflect the current state
  of the panel.
	
	  Exit early if this is a temporary prepareunprepare and we're already
	  modeset (since we neither want to prepare twice or unprepare early).
	
	  NOTE: the connector registration is implemented in analogix
	  platform driver, that to say connector would be exist after
	  plat_data->attch return, that's why we record the connector
	  point after plat attached.
 Don't touch the panel if we're coming back from PSR 
	
	  According to DP spec v1.3 chap 3.5.1.2 Link Training,
	  We should first make sure the HPD signal is asserted high by device
	  when we want to establish a link with it.
 Not a full enable, just disable PSR and continue 
 Don't do a full disable on PSR transitions 
 Input video interlaces & hsync pol & vsync pol 
 Input video dynamic_range & colorimetry 
 Input vide bpc and color_formats 
	
	  NOTE: those property parsing code is used for providing backward
	  compatibility for samsung platform.
	  Due to we used the "of_property_read_u32" interfaces, when this
	  property isn't present, the "video_info" can keep the original
	  values and wouldn't be modified.
		
		  Like Rk3288 DisplayPort TRM indicate that "Main link
		  containing 4 physical lanes of 2.71.62 Gbpslane".
		
		  NOTE: those property parseing code is used for
		  providing backward compatibility for samsung platform.
	
	  platform dp driver need containor_of the plat_data to get
	  the driver private data, so we need to store the point of
	  plat_data, not the context of plat_data.
			
			  phy itself is not enabled, so we can move forward
			  assigning NULL to phy pointer.
 Try two different names 
		
		  Set up the hotplug GPIO from the device tree as an interrupt.
		  Simply specifying a different interrupt in the device tree
		  doesn't work since we handle hotplug rather differently when
		  using a GPIO.  We also need the actual GPIO specifier so
		  that we can get the current state of the GPIO.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright(c) 2020, Analogix Semiconductor. All rights reserved.
  There is a sync issue while access I2C register between AP(CPU) and
  internal firmware(OCM), to avoid the race condition, AP should access
  the reserved slave address before slave address occurs changes.
 Set mute on flag 
 Clear mipi RX en 
 Mute off flag 
 Set MIPI RX EN 
 Channel num 
 FS 
 Word length 
 I2S 
 Audio change flag 
 Reduction of fraction ab 
	
	  In the end, make a, b larger to have higher ODFC PLL
	  output frequency accuracy
 Pixel clock frequency is too high 
 Pixel clock frequency is too low 
 Patch to improve the accuracy 
 27,000,000 is not divisible by 7 
 27,000,000 is not divisible by 11 
 27,000,000 is not divisible by 13 or 14 
 Config input reference clock frequency 27MHz19.2MHz 
 Post divider 
 Add patch for MIS2-125 (5pcs ANX7625 fail ATE MBIST test) 
 Reset ODFC PLL 
  The MIPI source video data exist large variation (e.g. 59Hz ~ 61Hz),
  anx7625 defined K ratio for matching MIPI input video clock and
  DP output video clock. Increase K value can match bigger video data
  variation. IVO panel has small variation than DP CTS spec, need
  decrease the K value.
 Configure pixel clock 
 Lane count 
 Htotal 
 Hactive 
 HFP 
 HWS 
 HBP 
 Vactive 
 VFP 
 VWS 
 VBP 
 M value 
 N value 
 Swap MIPI-DSI data lane 3 P and N 
 Swap MIPI-DSI data lane 3 P and N 
 DSI clock settings 
	
	  Decreased HS prepare timing delay from 160ns to 80ns work with
	      a) Dragon board 810 series (Qualcomm AP)
	      b) Moving Pixel DSI source (PG3A pattern generator +
	 	P332 D-PHY Probe) default D-PHY timing
	 	5nsstep
 Enable DSI mode
 Toggle m, n ready 
 Configure integer stable register 
 Power on MIPI RX 
 DSC disable 
 Set MIPI RX EN 
 Clear mute flag 
	
	  Video disable: 0x72:08 bit 7 = 0;
	  Audio disable: 0x70:87 bit 0 = 0;
 Set I2C read com 0x01 mot = 0 and read 16 bytes 
 Write address only 
 Write segment address 
 Data read 
 Set I2C read com 0x01 mot = 0 and read 16 bytes 
 Address initial 
 Check edid data 
 Reset aux channel 
 Power on pin enable 
 Power reset pin enable 
 Basic configurations of ANX7625 
 Reset main ocm 
 Disable PD 
 Release main ocm 
 Check interface workable 
 Gpio for chip power enable 
 Gpio for chip reset 
 Not support HDCP 
 Try auth flag 
 Interrupt for DRM 
 HPD changed 
 Max 1200p at 5.4 Ghz, one lane, pixel clock 300M 
 HFP needs to be even 
 HBP needs to be even 
 HSYNC needs to be even 
	
	  Once illegal timing detected, use default HFP, HSYNC, HBP
	  This adjusting made for built-in eDP panel, for the externel
	  DP monitor, may need return false.
 Adjust hfp if hfp less than HP_MIN 
		
		  Balance total HBlanking pixel, if HBP does not have enough
		  space, adjust HSYNC length, otherwise adjust HBP
 HBP not enough space 
		
		  Balance total HBlanking pixel, if HBP hasn't enough space,
		  adjust HSYNC length, otherwize adjust HBP
 HFP not enough space 
 Reconstruct timing 
 Add work function 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright(c) 2016, Analogix Semiconductor.
  Based on anx7808 driver obtained from chromeos with copyright:
  Copyright(c) 2013, Google Inc.
 27M 
	
	  I2C Slave addresses of ANX7814 are mapped as TX_P0, TX_P1, TX_P2,
	  RX_P0 and RX_P1.
 Sync detect change, GP set mute 
 Enable DDC stretch 
 TMDS phy initialization 
	
	  REVISIT : It is writing to a RESERVED bits in Analog Control 0
	  register.
	
	  Write DP TX output emphasis precise tune bits.
 Set terminal resistor to 50 ohm 
 Enable aux double diff output 
	
	  DP HDCP auto authentication wait timer (when downstream starts to
	  auth, DP side will wait for this period then do auth automatically)
	
	  Short the link integrity check timer to speed up bstatus
	  polling for HDCP CTS item 1A-07
 Power down the main link by default 
 Gen m_clk with downspreading 
	
	  BIT0: INT pin assertion polarity: 1 = assert high
	  BIT1: INT pin output type: 0 = pushpull
 Power on registers module 
 Power on all modules 
	
	  This delay seems to help keep the hardware in a good state. Without
	  it, there are times where it fails silently.
 1.0V digital core power regulator  
 GPIO for HPD 
 GPIO for chip power down 
 GPIO for chip reset 
 Get DPCD info 
 Clear channel x SERDES power down 
	
	  Power up the sink (DP_SET_POWER register is only available on DPCD
	  v1.1 and later).
		
		  According to the DP 1.1 specification, a "Sink Device must
		  exit the power saving state within 1 ms" (Section 2.5.3.1,
		  Table 5-52, "Sink Control Field" (register 0x600).
 Possibly enable downspread on the sink 
 4000PPM 
 Set the lane count and the link rate on the sink 
 Start training on the source 
 Enable DP output 
 Register aux channel 
 Max 1200p at 5.4 Ghz, one lane 
 Power off all modules except configuration registers access 
 Cable is pulled, power on the chip 
 Free cached EDID 
 Make sure we are still powered after handle HPD events 
 Map slave addresses of ANX7814 
 Look for supported chip ID 
 If cable is pulled out, just poweroff and wait for HPD event 
 sentinel  }
 sentinel  },
 SPDX-License-Identifier: GPL-2.0-only 
  Copyright(c) 2016, Analogix Semiconductor.
  Based on anx7808 driver obtained from chromeos with copyright:
  Copyright(c) 2013, Google Inc.
 Read the AUX channel access status 
	
	  DP AUX CH Address Register #2, only update bits[3:0]
	  [7:4] RESERVED
	  [3:0] AUX_ADDR[19:16], Register control AUX CH address.
 The DP AUX transmit and receive buffer has 16 bytes. 
 Zero-sized messages specify address-only transactions. 
 For non-zero-sized set the length field. 
 When WRITE | MOT write values to data buffer 
 Write address and request 
 Start transaction 
 Read values from data buffer 
 SPDX-License-Identifier: GPL-2.0-or-later
  Analogix DP (Display port) core register interface driver.
  Copyright (C) 2012 Samsung Electronics Co., Ltd.
  Author: Jingoo Han <jg1.han@samsung.com>
 Set interrupt pin assertion polarity as high 
 Clear pending regisers 
 0:mask,1: unmask 
 0: mask, 1: unmask 
 0: mask, 1: unmask 
 0: mask, 1: unmask 
		
		  There is no bit named DP_PHY_PD, so We used DP_INC_BG
		  to power off everything instead of DP_PHY_PD in
		  Rockchip
 Power up PLL 
 Enable Serdes FIFO function and Link symbol clock domain module 
 Parse hotplug interrupt status register 
 Disable AUX channel module 
 Clear inerrupts related to AUX channel 
 AUX_BIT_PERIOD_EXPECTED_DELAY doesn't apply to Rockchip IP 
 Disable AUX transaction HW retry 
 Receive AUX Channel DEFER commands equal to DEFFER_COUNT64 
 Enable AUX channel module 
 10 us is the minimum reset time. 
 Configure the input color depth, color space, dynamic range 
 Set Input Color YCbCr Coefficients to ITU601 or ITU709 
 don't send info frame 
 configure single frame update mode 
 configure VSC HB0~HB3 
 configure reused VSC PB0~PB3, magic number from vendor 
 configure DB0  DB1 values 
 set reuse spd inforframe 
 mark info frame update 
 send info frame 
 Buffer size of AUX CH is 16 bytes 
 Clear AUX CH data buffer 
 Select DPCD device address 
 Enable AUX CH operation 
 Zero-sized messages specify address-only transactions. 
 TODO: Wait for an interrupt instead of looping? 
 Is AUX CH command reply received? 
 Clear interrupt source for AUX CH command reply 
 Clear interrupt source for AUX CH access error 
 Check if Rx sends defer 
 if aux err happen, reset aux 
 SPDX-License-Identifier: GPL-2.0-only 
  Copyright(c) 2016, Analogix Semiconductor.
  Copyright(c) 2017, Icenowy Zheng <icenowy@aosc.io>
  Based on anx7808 driver obtained from chromeos with copyright:
  Copyright(c) 2013, Google Inc.
 us 
 us 
 protect EDID access 
 I2C Slave addresses of ANX6345 are mapped as DPTX and SYS 
 Get DPCD info 
 Clear channel x SERDES power down 
	
	  Power up the sink (DP_SET_POWER register is only available on DPCD
	  v1.1 and later).
		
		  According to the DP 1.1 specification, a "Sink Device must
		  exit the power saving state within 1 ms" (Section 2.5.3.1,
		  Table 5-52, "Sink Control Field" (register 0x600).
 Possibly enable downspread on the sink 
 4000PPM 
 Set the lane count and the link rate on the sink 
 Start training on the source 
 FIXME: colordepth is hardcoded for now 
 Force HPD 
 4 lanes 
 Reset AUX 
 Ensure reset is asserted before starting power on sequence 
 T1 - delay between VDD12 and VDD25 should be 0-2ms 
	 T2 - delay between RESETN and all power rail stable,
	  should be 2-5ms
 Power on registers module 
 Power on needed modules 
	
	  This delay seems to help keep the hardware in a good state. Without
	  it, there are times where it fails silently.
 Enable DP output 
 Force stream valid 
 Driver currently supports only 6bpc 
 Register aux channel 
 Max 1200p at 5.4 Ghz, one lane 
 Power off all modules except configuration registers access 
 1.2V digital core power regulator  
 2.5V digital core power regulator  
 GPIO for chip reset 
 Map slave addresses of ANX6345 
 Look for supported chip ID 
 sentinel  }
 sentinel  },
  Copyright © 2017 Broadcom
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015 Broadcom
  DOC: VC4 plane module
  Each DRM plane is a layer of pixels being scanned out by the HVS.
  At atomic modeset check time, we compute the HVS display element
  state that would be necessary for displaying the plane (giving us a
  chance to figure out if a plane configuration is invalid), then at
  atomic flush time the CRTC will ask us to write our element state
  into the region of the HVS that it has allocated for us.
 DRM_FORMAT_ 
 HVS_FORMAT_ 
 Called during init to allocate the plane's atomic state. 
 Returns the scl0scl1 field based on whether the dimensions need to
  be updownnon-scaled.
  This is a replication of a table from the spec.
		 The unity case is independently handled by
		  SCALER_CTL0_UNITY.
 We don't support subpixel source positioning for scaling. 
		 YUV conversion requires that horizontal scaling be enabled
		  on the UV plane even if vc4_get_scaling_mode() returned
		  VC4_SCALING_NONE (which can happen when the down-scaling
		  ratio is 0.5). Let's force it to VC4_SCALING_PPF in this
		  case.
	 The specs note that while the reciprocal would be defined
	  as (1<<32)scale, ~0 is close enough.
 LBM is not needed when there's no vertical scaling. 
	
	  This can be further optimized in the RGBYUV444 case if the PPF
	  decimation factor is between 0.5 and 1.0 by using crtc_w.
	 
	  It's not an issue though, since in that case since src_w[0] is going
	  to be greater than or equal to crtc_w.
 In special cases, this multiplier might be 12. 
		 There are cases for this going down to a multiplier
		  of 2, but according to the firmware source, the
		  table in the docs is somewhat wrong.
 Align it to 64 or 128 (hvs5) bytes 
 Each "word" of the LBM memory contains 2 or 4 (hvs5) pixels 
 Ch0 H-PPF Word 0: Scaling Parameters 
 Ch0 V-PPF Words 0-1: Scaling Parameters, Context 
 Ch0 H-TPZ Words 0-1: Scaling Parameters, Recip 
 Ch0 V-TPZ Words 0-2: Scaling Parameters, Recip, Context 
	 The HVS is able to process 2 pixelscycle when scaling the source,
	  4 pixelscycle otherwise.
	  Alpha blending step seems to be pipelined and it's always operating
	  at 4 pixelscycle, so the limiting aspect here seems to be the
	  scaler block.
	  HVS load is expressed in clk-cyclessec (AKA Hz).
		 Even if the bandwidthplane required for a single frame is
		 
		  vc4_state->src_w[i]  vc4_state->src_h[i]  cpp  vrefresh
		 
		  when downscaling, we have to read more pixels per line in
		  the time frame reserved for a single line, so the bandwidth
		  demand can be punctually higher. To account for that, we
		  calculate the down-scaling factor and multiply the plane
		  load by this number. We're likely over-estimating the read
		  demand, but that's better than under-estimating it.
	 Allocate the LBM memory that the HVS will use for temporary
	  storage due to our scalingformat conversion.
 Writes out a full display list for an active plane to the plane's
  private dlist state.
	 SCL1 is used for CbCr scaling of planar formats.  For RGB
	  and 4:4:4, scl1 should be set to scl0 so both channels of
	  the scaler do the same thing.  For YUV, the Y plane needs
	  to be put in channel 1 and CbCr in channel 0, so we swap
	  the scl fields here.
 We must point to the last line when Y reflection is enabled. 
		 Adjust the base pointer to the first pixel to be scanned
		  out.
 T tiles are 4kb 
 Whole-tile offsets, mostly for setting the pitch. 
 16 and 32bpp are 32 pixels high 
		 The height mask on 32-bit-per-pixel tiles is 63, i.e. twice
		  the height (in pixels) of a 4k tile.
		 For T-tiled, the FB pitch is "how many bytes from one row to
		  the next, such that
		 
		 	pitch  tile_h == tile_size  tiles_per_row
		 Intra-tile offsets, which modify the base address (the
		  SCALER_PITCH0_TILE_Y_OFFSET tells HVS how to walk from that
		  base address).
		 When Y reflection is requested we must set the
		  SCALER_PITCH0_TILE_LINE_DIR flag to tell HVS that all lines
		  after the initial one should be fetched in descending order,
		  which makes sense since we start from the last line and go
		  backward.
		  Don't know why we need y_off = max_y_off - y_off, but it's
		  definitely required (I guess it's also related to the "going
		  backward" situation).
 Rows of tiles alternate left-to-right and right-to-left. 
		 Adjust the base pointer to the first pixel to be scanned
		  out.
	 Don't waste cycles mixing with plane alpha if the set alpha
	  is opaque or there is no per-pixel alpha information.
	  In any case we use the alpha property value as the fixed alpha.
 Control word 
 Position Word 0: Image Positions and Alpha Value 
 Position Word 1: Scaled Image Dimensions. 
 Position Word 2: Source Image Size, Alpha 
 Position Word 3: Context.  Written by the HVS. 
 Control word 
 Position Word 0: Image Positions and Alpha Value 
 Control Word 2 
 Position Word 1: Scaled Image Dimensions. 
 Position Word 2: Source Image Size 
 Position Word 3: Context.  Written by the HVS. 
	 Pointer Word 012: RGB  Y  Cb  Cr Pointers
	 
	  The pointers may be any byte address.
 Pointer Context Word 012: Written by the HVS 
 Pitch word 0 
 Pitch word 12 
 Colorspace conversion words 
		 Reserve a slot for the LBM Base Address. The real value will
		  be set when calling vc4_plane_allocate_lbm().
			 Emit CbCr as channel 0 and Y as channel
			  1. This matches how we set up scl0scl1
			  above.
		 If any PPF setup was done, then all the kernel
		  pointers get uploaded.
 HPPF plane 0 
 VPPF plane 0 
 HPPF plane 1 
 VPPF plane 1 
 crtc_ are already clipped coordinates. 
	 Background fill might be necessary when the plane has per-pixel
	  alpha content or a non-opaque plane alpha and could blend from the
	  background or does not cover the entire screen.
	 Flag the dlist as initialized to avoid checking it twice in case
	  the async update check already called vc4_plane_mode_set() and
	  decided to fallback to sync update because async update was not
	  possible.
 If a modeset involves changing the setup of a plane, the atomic
  infrastructure will call this to validate a proposed plane setup.
  However, if a plane isn't getting updated, this (and the
  corresponding vc4_plane_atomic_update) won't get called.  Thus, we
  compute the dlist here and have all active plane dlists get updated
  in the CRTC's flush.
	 No contents here.  Since we don't know where in the CRTC's
	  dlist we should be stored, our dlist is uploaded to the
	  hardware with vc4_plane_write_dlist() at CRTC atomic_flush
	  time.
 Can't memcpy_toio() because it needs to be 32-bit writes. 
 Updates the plane to immediately (well, once the FIFO needs
  refilling) scan out from at a new framebuffer.
	 We're skipping the address adjustment for negative origin,
	  because this is only called on the primary plane.
	 Write the new address into the hardware immediately.  The
	  scanout will start from this address as soon as the FIFO
	  needs to refill with pixels.
	 Also update the CPU-side dlist copy, so that any later
	  atomic updates that don't do a new modeset on our plane
	  also use our updated address.
 Update the current vc4_state pos0, pos2 and ptr0 dlist entries. 
	 Note that we can't just call vc4_plane_write_dlist()
	  because that would smash the context data that the HVS is
	  currently using.
	 Only pos0, pos2 and ptr0 DWORDS can be updated in an async update
	  if anything else has changed, fallback to a sync update.
 Support T_TILING for RGB formats only. 
	 Set up some arbitrary number of planes.  We're not limited
	  by a set number of physical registers, just the space in
	  the HVS (16k) and how small an plane can be (28 bytes).
	  However, each plane we set up takes up some memory, and
	  increases the cost of looping over planes, which atomic
	  modesetting does quite a bit.  As a result, we pick a
	  modest number of planes to expose, that should hopefully
	  still cover any sane usecase.
		 Set up the legacy cursor after overlay initialization,
		  since we overlay planes on the CRTC in the order they were
		  initialized.
 SPDX-License-Identifier: GPL-2.0-only
   Copyright © 2015 Broadcom
  DOC: VC4 GEM BO management support
  The VC4 GPU architecture (both scanout and rendering) has direct
  access to system memory with no MMU in between.  To support it, we
  use the GEM CMA helper functions to allocate contiguous ranges of
  physical memory for our BOs.
  Since the CMA allocator is very slow, we keep a cache of recently
  freed BOs around so that the kernel's allocation of objects for 3D
  rendering can return quickly.
 Takes ownership of name and returns the appropriate slot for it in
  the bo_labels[] array, extending it as necessary.
  This is inefficient and could use a hash table instead of walking
  an array and strcmp()ing.  However, the assumption is that user
  labeling will be infrequent (scanout buffers and other long-lived
  objects, or debug driver builds), so we can live with it for now.
		 Free user BO label slots on last unreference.
		  Slots are just where we track the stats for a given
		  name, and once a name is unused we can reuse that
		  slot.
		 Rebase the old cached BO lists to their new list
		  head locations.
 And initialize the brand new BO list heads. 
	 list_del_init() is used here because the caller might release
	  the purgeable lock in order to acquire the madv one and update the
	  madv status.
	  During this short period of time a user might decide to mark
	  the BO as unpurgeable, and if bo->madv is set to
	  VC4_MADV_DONTNEED it will try to remove the BO from the
	  purgeable list which will fail if the ->nextprev fields
	  are set to LIST_POISON1LIST_POISON2 (which is what
	  list_del() does).
	  Re-initializing the list element guarantees that list_del()
	  will work correctly even if it's a NOP.
		 Release the purgeable lock while we're purging the BO so
		  that other people can continue inserting things in the
		  purgeable pool without having to wait for all BOs to be
		  purged.
		 Since we released the purgeable pool lock before acquiring
		  the BO madv one, the user may have marked the BO as WILLNEED
		  and re-used it in the meantime.
		  Before purging the BO we need to make sure
		  - it is still marked as DONTNEED
		  - it has not been re-inserted in the purgeable list
		  - it is not used by HW blocks
		  If one of these conditions is not met, just skip the entry.
  vc4_create_object - Implementation of driver->gem_create_object.
  @dev: DRM device
  @size: Size in bytes of the memory the object will reference
  This lets the CMA helpers allocate object structs for us, and keep
  our BO stats correct.
 First, try to get a vc4_bo from the kernel BO cache. 
		
		  If we've run out of CMA memory, kill the cache of
		  CMA allocations we've got laying around and try again.
		
		  Still not enough CMA memory, purge the userspace BO
		  cache and retry.
		  This is sub-optimal since we purge the whole userspace
		  BO cache which forces user that want to re-use the BO to
		  restore its initial content.
		  Ideally, we should purge entries one by one and retry
		  after each to see if CMA allocation succeeds. Or even
		  better, try to find an entry with at least the same
		  size.
	 By default, BOs do not support the MADV ioctl. This will be enabled
	  only on BOs that are exposed to userspace (V3D, V3D_SHADER and DUMB
	  BOs).
 Called on the last userspacekernel unreference of the BO.  Returns
  it to the BO cache if possible, otherwise frees it.
 Remove the BO from the purgeable list. 
	 If the object references someone else's memory, we can't cache it.
 Don't cache if it was publicly named. 
	 If this object was partially constructed but CMA allocation
	  had failed, just free it. Can also happen when the BO has been
	  purged.
 Reset madv and usecnt before adding the BO to the cache. 
	 Fast path: if the BO is already retained by someone, no need to
	  check the madv status.
		 We shouldn't use a BO marked as purgeable if at least
		  someone else retained its content by incrementing usecnt.
		  Luckily the BO hasn't been purged yet, but something wrong
		  is happening here. Just throw an error instead of
		  authorizing this use case.
 We can't use a purged BO. 
 Invalid madv value. 
	 Fast path: if the BO is still retained by someone, no need to test
	  the madv value.
	 Note: as soon as the BO is exported it becomes unpurgeable, because
	  noone ever decrements the usecnt even if the reference held by the
	  exported BO is released. This shouldn't be a problem since we don't
	  expect exported BOs to be marked as purgeable.
	 The only reason we would end up here is when user-space accesses
	  BO's memory after it's been purged.
	
	  We can't allocate from the BO cache, because the BOs don't
	  get zeroed, and that might leak data between users.
 The mmap offset was set up at BO allocation time. 
	 Clear the rest of the memory from allocating from the BO
	  cache.
	 We have to create the handle after validation, to avoid
	  races for users to do doing things like mmap the shader BO.
  vc4_set_tiling_ioctl() - Sets the tiling modifier for a BO.
  @dev: DRM device
  @data: ioctl argument
  @file_priv: DRM file for this fd
  The tiling state of the BO decides the default modifier of an fb if
  no specific modifier was set by userspace, and the return value of
  vc4_get_tiling_ioctl() (so that userspace can treat a BO it
  received from dmabuf as the same tiling format as the producer
  used).
  vc4_get_tiling_ioctl() - Gets the tiling modifier for a BO.
  @dev: DRM device
  @data: ioctl argument
  @file_priv: DRM file for this fd
  Returns the tiling modifier for a BO as set by vc4_set_tiling_ioctl().
	 Create the initial set of BO labels that the kernel will
	  use.  This lets us avoid a bunch of string reallocation in
	  the kernel's draw and BO allocation paths.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2016 Broadcom Limited
  DOC: VC4 DPI module
  The VC4 DPI hardware supports MIPI DPI type 4 and Nokia ViSSI
  signals.  On BCM2835, these can be routed out to GPIO0-27 with the
  ALT2 function.
 The order field takes the incoming 24 bit RGB from the pixel valve
  and shuffles the 3 channels.
 The format field takes the ORDER-shuffled pixel valve data and
  formats it onto the output lines.
 This define is named in the hardware, but actually just outputs 0. 
 Outputs 00000000rrrrrggggggbbbbb 
 Outputs 000rrrrr00gggggg000bbbbb 
 Outputs 00rrrrr000gggggg00bbbbb0 
 Outputs 000000rrrrrrggggggbbbbbb 
 Outputs 00rrrrrr00gggggg00bbbbbb 
 Outputs rrrrrrrrggggggggbbbbbbbb 
 Reverses the polarity of the corresponding signal 
 Outputs the signal the falling clock edge instead of rising. 
 Disables the signal 
 Power gate to the device, full reset at 0 -> 1 transition 
 All other registers besides DPI_C return the ID 
 General DPI hardware state. 
 VC4 DPI encoder KMS struct 
	 Look up the connector attached to DPI so we can get the
	  bus_format.  Ideally the bridge would tell us the
	  bus_format we want, but it doesn't yet, so assume that it's
	  uniform throughout the bridge chain.
 Default to 24bit if no connector found. 
 Sets up the next link in the display chain, whether it's a panel or
  a bridge.
		 If nothing was connected in the DT, that's not an
		  error.
  Copyright © 2014 Broadcom
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.
  DOC: Command list validator for VC4.
  Since the VC4 has no IOMMU between it and system memory, a user
  with access to execute command lists could escalate privilege by
  overwriting system memory (drawing to it as a framebuffer) or
  reading system memory it shouldn't (reading it as a vertex buffer
  or index buffer)
  We validate binner command lists to ensure that all accesses are
  within the bounds of the GEM objects referenced by the submitted
  job.  It explicitly whitelists packets, and looks at the offsets in
  any address fields to make sure they're contained within the BOs
  they reference.
  Note that because CL validation is already reading the
  user-submitted CL and writing the validated copy out to the memory
  that the GPU will actually read, this is also where GEM relocation
  processing (turning BO references into actual addresses for the GPU
  to use) happens.
 Return the width in pixels of a 64-byte microtile. 
 Return the height in pixels of a 64-byte microtile. 
  size_is_lt() - Returns whether a miplevel of the given size will
  use the lineartile (LT) tiling layout rather than the normal T
  tiling layout.
  @width: Width in pixels of the miplevel
  @height: Height in pixels of the miplevel
  @cpp: Bytes per pixel of the pixel format
	 Note that the untrusted pointer passed to these functions is
	  incremented past the packet byte.
	 The shaded vertex format stores signed 12.4 fixed point
	  (-2048,2047) offsets from the viewport center, so we should
	  never have a render target larger than 4096.  The texture
	  unit can only sample from 2048x2048, so it's even more
	  restricted.  This lets us avoid worrying about overflow in
	  our math.
 Check overflow condition 
 Check overflow condition 
	 The slot we allocated will only be used by this job, and is
	  free when the job completes rendering.
	 The tile state data array is 48 bytes per tile, and we put it at
	  the start of a BO containing both it and the tile alloc.
 Since the tile alloc array will follow us, align. 
 tile alloc address. 
 tile alloc size. 
 tile state address. 
	 Note: The docs say this was also 105, but it was 106 in the
	  initial userland code drop.
 GEM handle loading doesn't produce HW packets. 
 When the CL hits halt, it'll stop reading anything else. 
	 The bin CL must be ended with INCREMENT_SEMAPHORE and FLUSH.  The
	  semaphore is used to trigger the render CL to start up, and the
	  FLUSH is what caps the bin lists with
	  VC4_PACKET_RETURN_FROM_SUB_LIST (so they jump back to the main
	  render CL when they get called to) and actually triggers the queued
	  semaphore increment.
		 ETC1 is arranged as 64-bit blocks, where each block is 4x4
		  pixels.
	 The mipmap levels are stored before the base of the texture.  Make
	  sure there is actually space in the BO.
 Once the levels get small enough, they drop from T to LT. 
 fs 
 vs 
 cs 
	 Shader recs have to be aligned to 16 bytes (due to the attribute
	  flags being in the low bytes), so round the next validated shader
	  rec address up.  This should be safe, since we've got so many
	  relocations in a shader rec packet.
		 Fill in the uniform slots that need this shader's
		  start-of-uniforms address (used for resetting the uniform
		  stream in the presence of control flow).
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2015 Broadcom
  Copyright (c) 2014 The Linux Foundation. All rights reserved.
  Copyright (C) 2013 Red Hat
  Author: Rob Clark <robdclark@gmail.com>
	 PHY should be in reset, like
	  vc4_hdmi_encoder_disable() does.
 RM offset is stored as 9.22 format 
	
	  If the pixel clock exceeds our max setting, try the max
	  setting anyway.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2016 Broadcom
  DOC: VC4 SDTV module
  The VEC encoder generates PAL or NTSC composite video output.
  TV mode selection is done by an atomic property on the encoder,
  because a drm_mode_modeinfo is insufficient to distinguish between
  PAL and PAL-M or NTSC and NTSC-J.
 WSE Registers 
 VEC Registers 
 General VEC hardware state. 
 VC4 VEC encoder KMS struct 
 VC4 VEC connector KMS struct 
	 Since the connector is attached to just the one encoder,
	  this is the reference to it so we can do the best_encoder()
	  hook.
	
	  We need to set the clock rate each time we enable the encoder
	  because there's a chance we share the same parent with the HDMI
	  clock, and both drivers are requesting different rates.
	  The good news is, these 2 encoders cannot be enabled at the same
	  time, thus preventing incompatible rate requests.
 Reset the different blocks 
 Disable the CGSM-A and WSE blocks 
 Write config common to all modes. 
	
	  Color subcarrier phase: phase = 360  SCHPH  256.
	  0x28 <=> 39.375 deg.
	
	  Reset to default values.
 Mask all interrupts. 
 sentinel  },
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2014 The Linux Foundation. All rights reserved.
  Copyright (C) 2013 Red Hat
  Author: Rob Clark <robdclark@gmail.com>
  Wraps pm_runtime_get_sync() in a refcount, so that we can reliably
  get the pm_runtime refcount to 0 in vc4_reset().
	 Take all the memory that would have been reserved for user
	  QPU programs, since we don't have an interface for running
	  them, anyway.
 Switch from ffs() bit index to a 0-based index. 
	 Couldn't find an open slot.  Wait for render to complete
	  and try again.
  bin_bo_alloc() - allocates the memory that will be used for
  tile binning.
  The binner has a limitation that the addresses in the tile state
  buffer that point into the tile alloc buffer or binner overflow
  memory only have 28 bits (256MB), and the top 4 on the bus for
  tile alloc references end up coming from the tile state buffer's
  address.
  To work around this, we allocate a single large buffer while V3D is
  in use, make sure that it has the top 4 bits constant across its
  entire extent, and then put the tile state, tile alloc, and binner
  overflow memory inside that buffer.
  This creates a limitation where we may not be able to execute a job
  if it doesn't fit within the buffer that we allocated up front.
  However, it turns out that 16MB is "enough for anybody", and
  real-world applications run into allocation failures from the
  overall CMA pool before they make scenes complicated enough to run
  out of bin space.
	 We may need to try allocating more than once to get a BO
	  that doesn't cross 256MB.  Track the ones we've allocated
	  that failed so far, so that we can free them when we've got
	  one that succeeded (if we freed them right away, our next
	  allocation would probably be the same chunk of memory).
 Check if this BO won't trigger the addressing bug. 
			 Set up for allocating 512KB chunks of
			  binner memory.  The biggest allocation we
			  need to do is for the initial tile alloc +
			  tile state buffer.  We can render to a
			  maximum of ((20482048)  (3232) = 4096
			  tiles in a frame (until we do floating
			  point rendering, at which point it would be
			  8192).  Tile state is 48btile (rounded to
			  a page), and tile alloc is 32btile
			  (rounded to a page), plus a page of extra,
			  for a total of 320kb for our worst-case.
			  We choose 512kb so that it divides evenly
			  into our 16MB, and the rest of the 512kb
			  will be used as storage for the overflow
			  from the initial 32b CL per bin.
			 Enable the out-of-memory interrupt to set our
			  newly-allocated binner BO, potentially from an
			  already-pending-but-masked interrupt.
 Put it on the list to free later, and try again. 
 Free all the BOs we allocated but didn't choose. 
 We disabled the IRQ as part of vc4_irq_uninstall in suspend. 
 bcm2835 didn't have a clock reference in the DT. 
	 Reset the binner overflow addresssize at setup, to be sure
	  we don't reuse an old one.
 a little over 2 frames. 
	 Disable the binner's overflow memory address, so the next
	  driver probe (if any) doesn't try to reuse our old
	  allocation.
  Copyright © 2014-2015 Broadcom
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.
  DOC: Render command list generation
  In the V3D hardware, render command lists are what load and store
  tiles of a framebuffer and optionally call out to binner-generated
  command lists to do the 3D drawing for that tile.
  In the VC4 driver, render command list generation is performed by the
  kernel instead of userspace.  We do this because validating a
  user-submitted command list is hard to get right and has high CPU overhead,
  while the number of valid configurations for render command lists is
  actually fairly low.
  Emits a no-op STORE_TILE_BUFFER_GENERAL.
  If we emit a PACKET_TILE_COORDINATES, it must be followed by a store of
  some sort before another load is triggered.
 no address, since we're in None mode 
  Calculates the physical address of the start of a tile in a RCL surface.
  Unlike the other loadstore packets,
  VC4_PACKET_LOADSTORE_FULL_RES_TILE_BUFFER don't look at the tile
  coordinates packet, and instead just store to the address given.
  Emits a PACKET_TILE_COORDINATES if one isn't already pending.
  The tile coordinates packet triggers a pending load if there is one, are
  used for clipping during rendering, and determine where loadsstores happen
  relative to their base address.
	 Note that the load doesn't actually occur until the
	  tile coords packet is processed, and only one load
	  may be outstanding at a time.
 Exec previous load. 
	 Clipping depends on tile coordinates having been
	  emitted, so we always need one here.
	 Wait for the binner before jumping to the first
	  tile's lists.
 We need a VC4_PACKET_TILE_COORDINATES in between each store. 
	 The tile buffer gets cleared when the previous tile is stored.  If
	  the clear values changed between frames, then the tile buffer has
	  stale clear values in it, so we have to do a store in None mode (no
	  writes) so that we trigger the tile buffer clear.
 no address, since we're in None mode 
	 We shouldn't even have the job submitted to us if there's no
	  surface to write out.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015 Broadcom
  Copyright (c) 2014 The Linux Foundation. All rights reserved.
  Copyright (C) 2013 Red Hat
  Author: Rob Clark <robdclark@gmail.com>
  DOC: VC4 Falcon HDMI module
  The HDMI core has a state machine and a PHY.  On BCM2835, most of
  the unit operates off of the HSM clock from CPRMAN.  It also
  internally uses the PLLH_PIX clock for the PHY.
  HDMI infoframes are kept within a small packet ram, where each
  packet can be individually enabled for including in a frame.
  HDMI audio is implemented entirely within the HDMI IP block.  A
  register in the HDMI encoder takes SPDIF frames from the DMA engine
  and transfers them over an internal MAI (multi-channel audio
  interconnect) bus to the encoder side for insertion into the video
  blank regions.
  The driver's HDMI encoder does not yet support power management.
  The HDMI encoder's power domain and the HSMpixel clocks are kept
  continuously running, and only the HDMI logic and packet ram are
  powered offon at disableenable time.
  The driver does not yet support CEC control, though the HDMI
  encoder block has CEC support.
	
	  Set the clock divider: the hsm_clock rate and this divider
	  setting will give a 40 kHz CEC clock.
	
	  Some of the properties below require access to state, like bpc.
	  Allocate some default initial connector state with our reset helper.
 Create and attach TV margin props to this connector. 
	
	  If audio was streaming, then we need to reenabled the audio
	  infoframe here during encoder_enable.
	
	  At boot, encoder->crtc will be NULL. Since we don't know the
	  state of the scrambler and in order to avoid any
	  inconsistency, let's disable it all the time.
		 CEA VICs other than #1 requre limited range RGB
		  output unless overridden by an AVI infoframe.
		  Apply a colorspace conversion to squash 0-255 down
		  to 16-235.  The matrix here is:
		 
		  [ 0      0      0.8594 16]
		  [ 0      0.8594 0      16]
		  [ 0.8594 0      0      16]
		  [ 0      0      0       1]
 The RGB order applies even when CSC is disabled. 
 RGB_CONVERT_MODE = custom matrix, || USE_RGB_TO_YCBCR 
		 CEA VICs other than #1 requre limited range RGB
		  output unless overridden by an AVI infoframe.
		  Apply a colorspace conversion to squash 0-255 down
		  to 16-235.  The matrix here is:
		 
		  [ 0.8594 0      0      16]
		  [ 0      0.8594 0      16]
		  [ 0      0      0.8594 16]
		  [ 0      0      0       1]
		  Matrix is signed 2p13 fixed point, with signed 9p6 offsets
		 Still use the matrix for full range, but make it unity.
		  Matrix is signed 2p13 fixed point, with signed 9p6 offsets
	
	  As stated in RPi's vc4 firmware "HDMI state machine (HSM) clock must
	  be faster than pixel clock, infinitesimally faster, tested in
	  simulation. Otherwise, exact value is unimportant for HDMI
	  operation." This conflicts with bcm2835's vc4 documentation, which
	  states HSM's clock has to be at least 108% of the pixel clock.
	 
	  Real life tests reveal that vc4's firmware statement holds up, and
	  users are able to use pixel clocks closer to HSM's, namely for
	  1920x1200@60Hz. So it was decided to have leave a 1% margin between
	  both clocks. Which, for RPi0-3 implies a maximum pixel clock of
	  162MHz.
	 
	  Additionally, the AXI clock needs to be at least 25% of
	  pixel clock, but HSM ends up being the limiting factor.
	
	  The 1440p@60 pixel rate is in the same range than the first
	  WiFi channel (between 2.4GHz and 2.422GHz with 22MHz
	  bandwidth). Slightly lower the frequency to bring it out of
	  the WiFi range.
 HDMI audio codec callbacks 
	
	  We could get slightly more accurate clocks in some cases by
	  providing a CTS_1 value.  The two CTS values are alternated
	  between based on the period fields
	
	  If the HDMI encoder hasn't probed, or the encoder is
	  currently in DVI mode, treat the codec dai as missing.
 HDMI audio codec callbacks 
 The B frame identifier should match the value used by alsa-lib (8) 
 Set the MAI threshold 
	
	  Get the physical address of VC4_HD_MAI_DATA. We need to retrieve
	  the bus address specified in the DT, because the physical address
	  (the one returned by platform_get_resource()) is not appropriate
	  for DMA transfers.
	  This VCMMU should probably be exposed to avoid this kind of hacks.
 Before BCM2711, we don't have a named register range 
	
	  Be careful, snd_soc_register_card() calls dev_set_drvdata() and
	  stores a pointer to the snd card object in dev->driver_data. This
	  means we cannot use it for something else. The hdmi back-pointer is
	  now stored in card->drvdata and should be retrieved with
	  snd_soc_card_get_drvdata() if needed.
		
		  This CEC implementation makes 1 retry, so if we
		  get a NACK, then that means it made 2 attempts.
 clock period in microseconds 
 Set the logical address to Unregistered 
	 Only use the GPIO HPD pin if present in the DT, otherwise
	  we'll use the HDMI core's register.
	
	  ASoC makes it a bit hard to retrieve a pointer to the
	  vc4_hdmi structure. Registering the card will overwrite our
	  device drvdata with a pointer to the snd_soc_card structure,
	  which can then be used to retrieve whatever drvdata we want
	  to associate.
	 
	  However, that doesn't fly in the case where we wouldn't
	  register an ASoC card (because of an old DT that is missing
	  the dmas properties for example), then the card isn't
	  registered and the device drvdata wouldn't be set.
	 
	  We can deal with both cases by making sure a snd_soc_card
	  pointer and a vc4_hdmi structure are pointing to the same
	  memory address, so we can treat them indistinctly without any
	  issue.
 SPDX-License-Identifier: GPL-2.0-only
   Copyright © 2014 Broadcom
  Called at drm_dev_register() time on each of the minors registered
  by the DRM device, to attach the debugfs files.
  Registers a debugfs file with a callback function for a vc4 component.
  This is like drm_debugfs_create_files(), but that can only be
  called a given DRM minor, while the various VC4 components want to
  register their debugfs files during the component bind process.  We
  track the request and delay it to be called on each minor during
  vc4_debugfs_init().
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015 Broadcom
  DOC: VC4 CRTC module
  In VC4, the Pixel Valve is what most closely corresponds to the
  DRM's concept of a CRTC.  The PV generates video timings from the
  encoder's clock plus its configuration.  It pulls scaled pixels from
  the HVS at that timing, and feeds it to the encoder.
  However, the DRM CRTC also collects the configuration of all the
  DRM planes attached to it.  As a result, the CRTC is also
  responsible for writing the display list for the HVS channel that
  the CRTC will use.
  The 2835 has 3 different pixel valves.  pv0 in the audio power
  domain feeds DSI0 or DPI, while pv1 feeds DS1 or SMI.  pv2 in the
  image domain can feed either HDMI or the SDTV controller.  The
  pixel valve chooses from the CPRMAN clocks (HSM for HDMI, VEC for
  SDTV, etc.) according to which output type is chosen in the mux.
  For power management, the pixel valve's registers are all clocked
  by the AXI clock, while the timings and FIFOs make use of the
  output-specific clock.  Since the encoders also directly consume
  the CPRMAN clocks, and know what timings they need, they are the
  ones that set the clock.
	 Topbase are supposed to be 4-pixel aligned, but the
	  Raspberry Pi firmware fills the low bits (which are
	  presumably ignored).
 preempt_disable_rt() should go right here in PREEMPT_RT patchset. 
 Get optional system timestamp before query. 
	
	  Read vertical scanline which is currently composed for our
	  pixelvalve by the HVS, and also the scaler status.
 Get optional system timestamp after query. 
 preempt_enable_rt() should go right here in PREEMPT_RT patchset. 
 Vertical position of hvs composed scanline. 
 Use hpos to correct for field offset in interlaced mode. 
 This is the offset we need for translating hvs -> pv scanout pos. 
 HVS more than fifo_lines into frame for compositing? 
		
		  We are in active scanout and can get some meaningful results
		  from HVS. The actual PV scanout can not trail behind more
		  than fifo_lines as that is the fifo's capacity. Assume that
		  in active scanout the HVS and PV work in lockstep wrt. HVS
		  refilling the fifo and PV consuming from the fifo, ie.
		  whenever the PV consumes and frees up a scanline in the
		  fifo, the HVS will immediately refill it, therefore
		  incrementing vpos. Therefore we choose HVS read position -
		  fifo size in scanlines as a estimate of the real scanout
		  position of the PV.
	
	  Less: This happens when we are in vblank and the HVS, after getting
	  the VSTART restart signal from the PV, just started refilling its
	  fifo with new lines from the top-most lines of the new framebuffers.
	  The PV does not scan out in vblank, so does not remove lines from
	  the fifo, so the fifo will be full quickly and the HVS has to pause.
	  We can't get meaningful readings wrt. scanline position of the PV
	  and need to make things up in a approximative but consistent way.
		
		  Assume the irq handler got called close to first
		  line of vblank, so PV has about a full vblank
		  scanlines to go, and as a base timestamp use the
		  one taken at entry into vblank irq handler, so it
		  is not affected by random delays due to lock
		  contention on event_lock or vblank_time lock in
		  the core.
		
		  If the HVS fifo is not yet full then we know for certain
		  we are at the very beginning of vblank, as the hvs just
		  started refilling, and the stime and etime timestamps
		  truly correspond to start of vblank.
		 
		  Unfortunately there's no way to report this to upper levels
		  and make it more useful.
		
		  No clue where we are inside vblank. Return a vpos of zero,
		  which will cause calling code to just return the etime
		  timestamp uncorrected. At least this is no worse than the
		  standard fallback.
	
	  Pixels are pulled from the HVS if the number of bytes is
	  lower than the FIFO full level.
	 
	  The latency of the pixel fetch mechanism is 6 pixels, so we
	  need to convert those 6 pixels in bytes, depending on the
	  format, and then subtract that from the length of the FIFO
	  to make sure we never end up in a situation where the FIFO
	  is full.
		
		  For some reason, the pixelvalve4 doesn't work with
		  the usual formula and will only work with 32.
		
		  It looks like in some situations, we will overflow
		  the PixelValve FIFO (with the bit 10 of PV stat being
		  set) and stall the HVS  PV, eventually resulting in
		  a page flip timeout.
		 
		  Displaying the video overlay during a playback with
		  Kodi on an RPi3 seems to be a great solution with a
		  failure rate around 50%.
		 
		  Removing 1 from the FIFO full level however
		  seems to completely remove that issue.
  Returns the encoder attached to the CRTC.
  VC4 can only scan out to one encoder at a time, while the DRM core
  allows drivers to push pixels to more than one encoder from the
  same CRTC.
 The PV needs to be disabled before it can be flushed 
		 We set up first field even mode for HDMI.  VEC's
		  NTSC mode would want first field odd instead, once
		  we support it (to do so, set ODD_FIRST and put the
		  delay in VSYNCD_EVEN instead).
	
	  This delay is needed to avoid to get a pixel stuck in an
	  unflushable FIFO between the pixelvalve and the HDMI
	  controllers on the BCM2711.
	 
	  Timing is fairly sensitive here, so mdelay is the safest
	  approach.
	 
	  If it was to be reworked, the stuck pixel happens on a
	  BCM2711 when changing mode with a good probability, so a
	  script that changes mode on a regular basis should trigger
	  the bug after less than 10 attempts. It manifests itself with
	  every pixels being shifted by one to the right, and thus the
	  last pixel of a line actually being displayed as the first
	  pixel on the next line.
 Disable vblank irq handling before crtc is disabled. 
	
	  Make sure we issue a vblank event after disabling the CRTC if
	  someone was waiting it.
	 Enable vblank irq handling before crtc is started otherwise
	  drm_crtc_get_vblank() fails in vc4_crtc_update_dlist().
	 When feeding the transposer block the pixelvalve is unneeded and
	  should not be enabled.
 Do not allow doublescan modes from user space 
	 We have to interate over all new connector states because
	  vc4_crtc_get_margins() might be called before
	  vc4_crtc_atomic_check() which means margins info in vc4_crtc_state
	  might be outdated.
		 Wait for the page flip to unmask the underrun to ensure that
		  the display list was updated by the hardware. Before that
		  happens, the HVS will be using the previous display list with
		  the CRTC and encoder already reconfigured, leading to
		  underruns. This can be seen when reconfiguring the CRTC.
 Called when the V3D execution for the BO being flipped to is done, so that
  we can actually update the plane's address to point to it.
	 Decrement the BO usecnt in order to keep the incdec calls balanced
	  when the planes are updated through the async update path.
	  FIXME: we should move to generic async-page-flip when it's
	  available, so that we can get rid of this hand-made cleanup_fb()
	  logic.
 Implements async (non-vblank-synced) page flips.
  The page flip ioctl needs to return immediately, so we grab the
  modeset semaphore on the pipe, and queue the address update for
  when V3D is done with the BO being flipped to.
	 Increment the BO usecnt here, so that we never end up with an
	  unbalanced number of vc4_bo_{dec,inc}_usecnt() calls when the
	  plane is later updated through the non-async path.
	  FIXME: we should move to generic async-page-flip when it's
	  available, so that we can get rid of this hand-made prepare_fb()
	  logic.
	 Save the current FB before it's replaced by the new one in
	  drm_atomic_set_fb_for_plane(). We'll need the old FB in
	  vc4_async_page_flip_complete() to decrement the BO usecnt and keep
	  it consistent.
	  FIXME: we should move to generic async-page-flip when it's
	  available, so that we can get rid of this hand-made cleanup_fb()
	  logic.
	 Immediately update the plane's legacy fb pointer, so that later
	  modeset prep sees the state that will be present when the semaphore
	  is released.
 Driver takes ownership of state on successful async commit. 
 handled by drm_mode_cursor_universal 
 handled by drm_mode_cursor_universal 
	 For now, we create just the primary and the legacy cursor
	  planes.  We should be able to stack more planes on easily,
	  but to do that we would need to compute the bandwidth
	  requirement of the plane configuration, and reject ones
	  that will take too much.
		 We support CTM, but only for one CRTC at a time. It's therefore
		  implemented as private driver state in vc4_kms, not here.
  Copyright © 2014 Broadcom
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.
  DOC: Interrupt management for the V3D engine
  We have an interrupt status register (V3D_INTCTL) which reports
  interrupts, and where writing 1 bits clears those interrupts.
  There are also a pair of interrupt registers
  (V3D_INTENAV3D_INTDIS) where writing a 1 to their bits enables or
  disables that specific interrupt, and 0s written are ignored
  (reading either one returns the set of enabled interrupts).
  When we take a binning flush done interrupt, we need to submit the
  next frame for binning and move the finished frame to the render
  thread.
  When we take a render frame interrupt, we need to wake the
  processes waiting for some frame to be done, and get the next frame
  submitted ASAP (so the hardware doesn't sit idle when there's work
  to do).
  When we take the binner out of memory interrupt, we need to
  allocate some new memory and pass it to the binner so that the
  current job can make progress.
		 If we had overflow memory allocated previously,
		  then that chunk will free when the current bin job
		  is done.  If we don't have a bin job running, then
		  the chunk will be done whenever the list of render
		  jobs has drained.
			 There's nothing queued in the hardware, so
			  the old slot is free immediately.
	 Only submit the next job in the bin list if it matches the perfmon
	  attached to the one that just finished (or if both jobs don't have
	  perfmon attached to them).
 Stop the perfmon so that the next bin job can be started. 
	 Only stop the perfmon if following jobs in the queue don't expect it
	  to be enabled.
	 If there's a render job waiting, start it. If this is not the case
	  we may have to unblock the binner if it's been stalled because of
	  perfmon (this can be checked by comparing the perfmon attached to
	  the finished renderjob to the one attached to the next bin job: if
	  they don't match, this means the binner is stalled and should be
	  restarted).
	 Acknowledge the interrupts we're handling here. The binner
	  last flush  render frame done interrupt will be cleared,
	  while OUTOMEM will stay high until the underlying cause is
	  cleared.
 Disable OUTOMEM until the work is done. 
	 Clear any pending interrupts someone might have left around
	  for us.
	 Enable the render done interrupts. The out-of-memory interrupt is
	  enabled as soon as we have a binner BO allocated.
 Disable sending interrupts for our driver's IRQs. 
 Clear any pending interrupts we might have left. 
 Finish any interrupt handler still in flight. 
 Reinitializes interrupt registers when a GPU reset is performed. 
 Acknowledge any stale IRQs. 
	
	  Turn all our interrupts on.  Binner out of memory is the
	  only one we expect to trigger at this point, since we've
	  just come from poweron and haven't supplied any overflow
	  memory yet.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015 Broadcom
  DOC: VC4 KMS
  This is the general code for implementing KMS mode setting that
  doesn't clearly associate with any of the other objects (plane,
  crtc, HDMI encoder).
 Converts a DRM S31.32 value to the HW S0.9 format. 
 Sign bit. 
 We have zero integer bits so we can only saturate here. 
 Otherwise take the 9 most important fractional bits. 
		
		  SCALER_DISPCTRL_DSP3 = X, where X < 2 means 'connect DSP3 to
		  FIFO X'.
		  SCALER_DISPCTRL_DSP3 = 3 means 'disable DSP 3'.
		 
		  DSP3 is connected to FIFO2 unless the transposer is
		  enabled. In this case, FIFO 2 is directly accessed by the
		  TXP IP, and we need to disable the FIFO2 -> pixelvalve1
		  route.
	 If the user didn't specify a modifier, use the
	  vc4_set_tiling_ioctl() state for the BO.
 Our CTM has some peculiar limitations: we can only enable it for one CRTC
  at a time and the HW only supports S0.9 scalars. To account for the latter,
  we don't allow userland to set a CTM that we have no hope of approximating.
 CTM is being disabled. 
 CTM is being enabled or the matrix changed. 
 fifo is 1-based since 0 disables CTM. 
			 Check userland isn't trying to turn on CTM for more
			  than one CRTC at a time.
			 Check we can approximate the specified CTM.
			  We disallow scalars |c| > 1.0 since the HW has
			  no integer bits.
 Don't check the load when the tracker is disabled. 
	 The absolute limit is 2Gbytesec, but let's take a margin to let
	  the system work when other blocks are accessing the memory.
	 HVS clock is supposed to run @ 250Mhz, let's take a margin and
	  consider the maximum number of cycles is 240M.
  The BCM2711 HVS has up to 7 outputs connected to the pixelvalves and
  the TXP (and therefore all the CRTCs found on that platform).
  The naive (and our initial) implementation would just iterate over
  all the active CRTCs, try to find a suitable FIFO, and then remove it
  from the pool of available FIFOs. However, there are a few corner
  cases that need to be considered:
  - When running in a dual-display setup (so with two CRTCs involved),
    we can update the state of a single CRTC (for example by changing
    its mode using xrandr under X11) without affecting the other. In
    this case, the other CRTC wouldn't be in the state at all, so we
    need to consider all the running CRTCs in the DRM device to assign
    a FIFO, not just the one in the state.
  - To fix the above, we can't use drm_atomic_get_crtc_state on all
    enabled CRTCs to pull their CRTC state into the global state, since
    a page flip would start considering their vblank to complete. Since
    we don't have a guarantee that they are actually active, that
    vblank might never happen, and shouldn't even be considered if we
    want to do a page flip on a single CRTC. That can be tested by
    doing a modetest -v first on HDMI1 and then on HDMI0.
  - Since we need the pixelvalve to be disabled and enabled back when
    the FIFO is changed, we should keep the FIFO assigned for as long
    as the CRTC is enabled, only considering it free again once that
    CRTC has been disabled. This can be tested by booting X11 on a
    single display, and changing the resolution down and then back up.
 Nothing to do here, let's skip it 
 Muxing will need to be modified, mark it as such 
 If we're disabling our CRTC, we put back our channel 
		
		  The problem we have to solve here is that we have
		  up to 7 encoders, connected to up to 6 CRTCs.
		 
		  Those CRTCs, depending on the instance, can be
		  routed to 1, 2 or 3 HVS FIFOs, and we need to set
		  the change the muxing between FIFOs and outputs in
		  the HVS accordingly.
		 
		  It would be pretty hard to come up with an
		  algorithm that would generically solve
		  this. However, the current routing trees we support
		  allow us to simplify a bit the problem.
		 
		  Indeed, with the current supported layouts, if we
		  try to assign in the ascending crtc index order the
		  FIFOs, we can't fall into the situation where an
		  earlier CRTC that had multiple routes is assigned
		  one that was the only option for a later CRTC.
		 
		  If the layout changes and doesn't give us that in
		  the future, we will need to have something smarter,
		  but it works so far.
		 Start with the load tracker enabled. Can be
		  disabled through the debugfs load_tracker file.
 Set support for vblank irq fast disable, before drm_vblank_init() 
  Copyright © 2014 Broadcom
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.
  DOC: Shader validator for VC4.
  Since the VC4 has no IOMMU between it and system memory, a user
  with access to execute shaders could escalate privilege by
  overwriting system memory (using the VPM write address register in
  the general-purpose DMA mode) or reading system memory it shouldn't
  (reading it as a texture, uniform data, or direct-addressed TMU
  lookup).
  The shader validator walks over a shader's BO, ensuring that its
  accesses are appropriately bounded, and recording where texture
  accesses are made so that we can do relocations for them in the
  uniform stream.
  Shader BO are immutable for their lifetimes (enforced by not
  allowing mmaps, GEM prime export, or rendering to from a CL), so
  this validation is only performed at BO creation time.
 Current IP being validated. 
 IP at the end of the BO, do not read shader[max_ip] 
	 For registers that were last written to by a MIN instruction with
	  one argument being a uniform, the address of the uniform.
	  Otherwise, ~0.
	 
	  This is used for the validation of direct address memory reads.
	 Bitfield of which IPs are used as branch targets.
	 
	  Used for validation that the uniform stream is updated at the right
	  points and clearing the texturingclamping state.
	 Set when entering a basic block, and cleared when the uniform
	  address update is found.  This is used to make sure that we don't
	  read uniforms when the address is undefined.
	 Set when we find a backwards branch.  If the branch is backwards,
	  the taraget is probably doing an address reset to read uniforms,
	  and so we need to be sure that a uniforms address is present in the
	  stream, even if the shader didn't need to read uniforms in later
	  basic blocks.
	 Set when we find an instruction writing the top half of the
	  register files.  If we allowed writing the unusable regs in
	  a threaded shader, then the other shader running on our
	  QPU's clamp validation would be invalid.
		 Make sure that this texture load is an add of the base
		  address of the UBO to a clamped offset within the UBO.
		 We assert that the clamped address is the first
		  argument, and the UBO base address is the second argument.
		  This is arbitrary, but simpler than supporting flipping the
		  two either way.
		 Store the clamp value's offset in p1 (see reloc_tex() in
		  vc4_validate.c).
	 Since direct uses a RADDR uniform reference, it will get counted in
	  check_instruction_reads()
	 We want our reset to be pointing at whatever uniform follows the
	  uniforms base address.
	 We only support absolute uniform address changes, and we
	  require that they be in the current basic block before any
	  of its uniform reads.
	 
	  One could potentially emit more efficient QPU code, by
	  noticing that (say) an if statement does uniform control
	  flow for all threads and that the if reads the same number
	  of uniforms on each side.  However, this scheme is easy to
	  validate so it's all we allow for now.
		 These only interact with the tile buffer, not main memory,
		  so they're safe.
		 XXX: I haven't thought about these, so don't support them
		  for now.
		 We allow VPM setup in general, even including VPM DMA
		  configuration setup, because the (unsafe) DMA can only be
		  triggered by QPU_W_VPM_ADDR writes.
	 Check whether OP_ADD's A argumennt comes from a live MAX(x, 0),
	  before we clear previous live state.
 Clear live state for registers written by our instruction. 
		 Nothing further to do for live tracking, since only ADDs
		  generate new live clamp registers.
 Now, handle remaining live clamp tracking for the ADD operation. 
		 Track live clamps of a value to a minimum of 0 (in either
		  arg).
		 Track live clamps of a value clamped to a minimum of 0 and
		  a maximum of some uniform's offset.
	 We don't want to have to worry about validation of this, and
	  there's no need for it.
		 This can't overflow the uint32_t, because we're reading 8
		  bytes of instruction to increment by 4 here, so we'd
		  already be OOM.
 Make sure that all branches are absolute and point within the shader, and
  note their targets for later.
			 There are two delay slots after program end is
			  signaled that are still executed, then we're
			  finished.  validation_state->max_ip is the
			  instruction after the last valid instruction in the
			  program.
		 The actual branch target is the instruction after the delay
		  slots, plus whatever byte offset is in the low 32 bits of
		  the instruction.  Make sure we're not branching beyond the
		  end of the shader object.
		 Make sure that the non-branching path is also not outside
		  the shader.
 Resets any known state for the shader, used when we may be branched to from
  multiple locations in the program (or at shader start).
	 Reset our live values tracking, since this instruction may have
	  multiple predecessors.
	 
	  One could potentially do analysis to determine that, for
	  example, all predecessors have a live max clamp in the same
	  register, but we don't bother with that.
	 Since we've entered a basic block from potentially multiple
	  predecessors, we need the uniforms address to be updated before any
	  unforms are read.  We require that after any branch point, the next
	  uniform to be loaded is a uniform address offset.  That uniform's
	  offset will be marked by the uniform address register write
	  validation, or a one-off the end-of-program check.
 Reset r0-r3 live clamp data 
		 There are two delay slots after program end is signaled
		  that are still executed, then we're finished.
 Might corrupt other thread 
	 If we did a backwards branch and we haven't emitted a uniforms
	  reset since then, we still need the uniforms stream to have the
	  uniforms address available so that the backwards branch can do its
	  uniforms reset.
	 
	  We could potentially prove that the backwards branch doesn't
	  contain any uses of uniforms until program exit, but that doesn't
	  seem to be worth the trouble.
	 Again, no chance of integer overflow here because the worst case
	  scenario is 8 bytes of uniforms plus handles per 8-byte
	  instruction.
 SPDX-License-Identifier: GPL-2.0
  Copyright © 2018 Broadcom
  Authors:
 	Eric Anholt <eric@anholt.net>
 	Boris Brezillon <boris.brezillon@bootlin.com>
 Base address of the output.  Raster formats must be 4-byte aligned,
  T and LT must be 16-byte aligned or maybe utile-aligned (docs are
  inconsistent, but probably utile).
 Pitch in bytes for raster images, 16-byte aligned.  For tiled, it's
  the width in tiles.
 For T-tiled imgaes, DST_PITCH should be the number of tiles wide,
  shifted up.
 For LT-tiled images, DST_PITCH should be the number of utiles wide,
  shifted up.
 Pre-rotation widthheight of the image.  Must match HVS config.
  If TFORMAT and 32-bit, limit is 1920 for 32-bit and 3840 to 16-bit
  and widthheight must be tile or utile-aligned as appropriate.  If
  transposing (rotating), width is limited to 1920.
  Height is limited to various numbers between 4088 and 4095.  I'd
  just use 4088 to be safe.
 These bits are set to 0x54 
 Bits 22-23 are set to 0x01 
 Powers down the internal memory. 
 Enables storing the alpha component in 88884444, instead of
  filling with ~ALPHA_INVERT.
 4 bits, each enables stores for a channel in each set of 4 bytes.
  Set to 0xf for normal operation.
 Debug: Generate VSTART again at EOF. 
 Debug: Terminate the current frame immediately.  Stops AXI
  writes.
 Inverts alpha if TXP_ALPHA_ENABLE, chooses fill value for
  !TXP_ALPHA_ENABLE.
 Note: I've listed the channels here in high bit (in byte 321) to
  low bit (in byte 0) order.
 888s are non-rotated, raster-only 
 If TFORMAT is set, generates LT instead of T format. 
 Rotate output by 90 degrees. 
 Generate a tiled format for V3D. 
 Generates some undefined test mode output. 
 Request odd field from HVS. 
 Raise interrupt when idle. 
 Set when generating a frame, clears when idle. 
 Starts a frame.  Self-clearing. 
 Number of lines received and committed to memory. 
 Pitch must be aligned on 16 bytes. 
 Disable vblank irq handling before crtc is disabled. 
	
	  Make sure we issue a vblank event after disabling the CRTC if
	  someone was waiting it.
 sentinel  },
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2018 Broadcom
  DOC: VC4 V3D performance monitor module
  The V3D block provides 16 hardware counters which can count various events.
 Number of monitored counters cannot exceed HW limits. 
 Make sure all events are valid. 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015 Broadcom
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2016 Broadcom
  DOC: VC4 DSI0DSI1 module
  BCM2835 contains two DSI modules, DSI0 and DSI1.  DSI0 is a
  single-lane DSI controller, while DSI1 is a more modern 4-lane DSI
  controller.
  Most Raspberry Pi boards expose DSI1 as their "DISPLAY" connector,
  while the compute module brings both DSI0 and DSI1 out.
  This driver has been tested for DSI1 video-mode display only
  currently, with most of the information necessary for DSI0
  hopefully present.
 Command packet control. 
 AKA PKTC 
 Short, trigger, BTA, or a long packet that fits all in CMDFIFO. 
 Primary display where cmdfifo provides part of the payload and
  pixelvalve the rest.
 Secondary display where cmdfifo provides part of the payload and
  pixfifo the rest.
 Command only.  Uses TXPKT1H and DISPLAY_NO 
 Command with BTA for either ack or read data. 
 Trigger according to TRIG_CMD 
 BTA alone for getting error status after a command, or a TE trigger
  without a previous command.
 Command packet header. 
 AKA PKTH 
 AKA RX1_PKTH 
 Byte count if DSI_RXPKT1H_PKT_TYPE_LONG 
 Short return bytes if !DSI_RXPKT1H_PKT_TYPE_LONG 
 AKA RX2_PKTH 
 AKA CMD_DATAF 
 Transmit RGB pixels and null packets only during HACTIVE, instead
  of going to LP-STOP.
 Transmit blanking packet only during vblank, instead of allowing LP-STOP. 
 Transmit blanking packet only during HFP, instead of allowing LP-STOP. 
 Transmit blanking packet only during HBP, instead of allowing LP-STOP. 
 Enables end events for HSYNCVSYNC, not just start events. 
 Default is VIDEO mode. 
 Format of the data written to TXPKT_PIX_FIFO. 
 DISP1 is always command mode. 
 AKA PIX_FIFO 
 Signaled when the clock lane enters the given state. 
 Signaled on timeouts 
 Contention on a line when trying to drive the line low 
 Control error: incorrect line state sequence on data lane 0. 
 LPDT synchronization error (bits received not a multiple of 8. 
 Signaled after receiving an error packet from the display in
  response to a read.
 Signaled after receiving a packet.  The header and optional short
  response will be in RXPKT1H, and a long response will be in the
  RXPKT_FIFO.
 Signaled after all repeats of TXPKT1 are transferred. 
 Signaled after each TXPKT1 repeat is scheduled. 
 State reporting bits.  These mostly behave like INT_STAT, where
  writing a 1 clears the bit.
 Set when in forward direction 
 Actually, all registers in the range that aren't otherwise claimed
  will return the ID.
 Whether we're on bcm2835's DSI0 or DSI1. 
 General DSI hardware state. 
 DSI channel for the panel we're connected to. 
	 Input clock from CPRMAN to the digital PHY, for the DSI
	  escape clock.
	 Input clock to the analog PHY, used to generate the DSI bit
	  clock.
 HS Clocks generated within the DSI analog PHY. 
	 Pixel clock output to the pixelvalve, generated from the HS
	  clock.
 DSI0 should be able to write normally. 
 VC4 DSI encoder KMS struct 
 Enters or exits Ultra Low Power State. 
	 The DSI module can't be disabled while the module is
	  generating ULPS state.  So, to be able to disable the
	  module, we have the AFE latch the ULPS state and continue
	  on to having the module enter STOP.
	 The HS timings have to be rounded up to a multiple of 8
	  because we're using the byte clock.
 ESC always runs at 100Mhz. 
 Extends the mode's blank intervals to handle BCM2835's integer-only
  DSI PLL divider.
  On 2835, PLLD is set to 2Ghz, and may not be changed by the display
  driver since most peripherals are hanging off of the PLLD_PER
  divider.  PLLD_DSI1, which drives our DSI bit clock (and therefore
  the pixel clock), only has an integer divider off of DSI.
  To get our panel mode to refresh at the expected 60Hz, we need to
  extend the horizontal blank time.  This means we drive a
  higher-than-expected clock rate to the panel, but that's what the
  firmware does too.
	 Find what divider gets us a faster clock than the requested
	  pixel clock.
	 Now that we've picked a PLL divider, calculate back to its
	  pixel clock.
 Given the new pixel clock, adjust HFP to keep vrefresh the same. 
 Minimum LP state duration in escape clock cycles. 
	 Round up the clk_set_rate() request slightly, since
	  PLLD_DSI1 is an integer divider and its rate selection will
	  never round up.
 Reset the DSI and all its fifos. 
 Clear all stat bits so we see what has happened during enable. 
 Set AFE CTR00CTR1 to release powerdown of analog. 
 AFEC reset hold time 
	 Yes, we set the DSI0PDSI1P pixel clock to the byte rate,
	  not the pixel clock rate.  DSIxP take from the APHY's byte,
	  DDR2, or DDR4 clock (we use byte) and feed into the PV at
	  that rate.  Separately, a value derived from PIX_CLK_DIV
	  and HS_CLKC is fed into the PV to divide down to the actual
	  pixel clock for pushing pixels into DSI.
	 How many ns one DSI unit interval is.  Note that the clock
	  is DDR, so there's an extra divide by 2.
	 T_INIT is how long STOP is driven after power-up to
	  indicate to the slave (also coming out of power-up) that
	  master init is complete, and should be greater than the
	  maximum of two value: T_INIT,MASTER and T_INIT,SLAVE.  The
	  D-PHY spec gives a minimum 100us for T_INIT,MASTER and
	  T_INIT,SLAVE, while allowing protocols on top of it to give
	  greater minimums.  The vc4 firmware uses an extremely
	  conservative 5ms, and we maintain that here.
 HS timeout in HS clock cycles: disabled. 
 LP receive timeout in HS clocks. 
 Bus turnaround timeout 
 Display reset sequence timeout 
	 Set up DISP1 for transferring long command payloads through
	  the pixfifo.
 Ungate the block. 
 Bring AFE out of reset. 
		 Divide data across the various FIFOs we have available.
		  The command FIFO takes byte-oriented data, but is of
		  limited size. The pixel FIFO (never actually used for
		  pixel data in reality) is word oriented, and substantially
		  larger. So, we use the pixel FIFO for most of the data,
		  sending the residual bytes in the command FIFO at the start.
		 
		  With this arrangement, the command FIFO will never get full.
	 Send one copy of the packet.  Larger repeats are used for pixel
	  data in command mode.
 Enable the appropriate interrupt for the transfer completion. 
 Send the packet. 
 FINISHME: Handle AWER 
  Initial handler for port 1 where we need the reg_dma workaround.
  The register DMA writes sleep, so we can't do it in the top half.
  Instead we use IRQF_ONESHOT so that the IRQ gets disabled in the
  parent interrupt contrller until our interrupt thread is done.
  Normal IRQ handler for port 0, or the threaded IRQ handler for port
  1 where we need the reg_dma workaround.
  vc4_dsi_init_phy_clocks - Exposes clocks generated by the analog
  PHY that are consumed by CPRMAN (clk-bcm2835.c).
  @dsi: DSI encoder
		 We just use core fixed factor clock ops for the PHY
		  clocks.  The clocks are actually gated by the
		  PHY_AFEC0_DDRCLK_EN bits, which we should be
		  setting if we use the DDRDDR2 clocks.  However,
		  vc4_dsi_encoder_enable() is setting up both AFEC0,
		  setting both our parent DSI PLL's rate and this
		  clock's rate, so it knows if DDRDDR2 are going to
		  be used and could enable the gates itself.
	 DSI1 on BCM283567 has a broken AXI slave that doesn't respond to
	  writes from the ARM.  It does handle writes from the DMA engine,
	  so set up a channel for talking to it.
		 Get the physical address of the device's registers.  The
		  struct resource for the regs gives us the bus address
		  instead.
 At startup enable error-reporting interrupts and nothing else. 
 Clear any existing interrupt state. 
 The esc clock rate is supposed to always be 100Mhz. 
	 Disable the atomic helper calls into the bridge.  We
	  manually call the bridge pre_enable  enable  etc. calls
	  from our driver, since we need to sequence them within the
	  encoder's enabledisable paths.
	
	  Restore the bridge_chain so the bridge detach procedure can happen
	  normally.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015 Broadcom
  DOC: VC4 HVS module.
  The Hardware Video Scaler (HVS) is the piece of hardware that does
  translation, scaling, colorspace conversion, and compositing of
  pixels stored in framebuffers into a FIFO of pixels going out to
  the Pixel Valve (CRTC).  It operates at the system clock rate (the
  system audio clock gate, specifically), which is much higher than
  the pixel clock rate.
  There is a single global HVS, with multiple output FIFOs that can
  be consumed by the PVs.  This file just manages the resources for
  the HVS, while the vc4_crtc.c code actually drives HVS setup for
  each CRTC.
 The filter kernel is composed of dwords each containing 3 9-bit
  signed integers packed next to each other.
 The whole filter kernel is arranged as the coefficients 0-16 going
  up, then a pad, then 17-31 going down and reversed within the
  dwords.  This means that a linear phase kernel (where it's
  symmetrical at the boundary between 15 and 16) has the last 5
  dwords matching the first 5, but reversed.
 Recommended B=13, C=13 filter choice from MitchellNetravali.
  http:www.cs.utexas.edu~fussellcoursescs384glecturesmitchellMitchell.pdf
	 The LUT memory is laid out with each HVS channel in order,
	  each of which takes 256 writes for R, 256 for G, then 256
	  for B.
	 Turn on the scaler, which will wait for vstart to start
	  compositing.
	  When feeding the transposer, we should operate in oneshot
	  mode.
	 Reload the LUT, since the SRAMs would have been disabled if
	  all CRTCs had SCALER_DISPBKGND_GAMMA unset at once.
 Once we leave, the scaler should be disabled and its fifo empty. 
	 The pixelvalve can only feed one encoder (and encoders are
	  1:1 with connectors.)
 Account for SCALER_CTL0_END. 
 Copy all the active planes' dlist contents to the hardware dlist. 
 Is this the first active plane? 
			 We need to enable background fill when a plane
			  could be alpha blending from the background, i.e.
			  where no other plane is underneath. It suffices to
			  consider the first active plane here since we set
			  needs_bg_fill such that either the first plane
			  already needs it or all planes on top blend from
			  the first or a lower plane.
		 This sets a black background color fill, as is the case
		  with other DRM drivers.
	 Only update DISPLIST if the CRTC was already running and is not
	  being disabled.
	  vc4_crtc_enable() takes care of updating the dlist just after
	  re-enabling VBLANK interrupts and before enabling the engine.
	  If the CRTC is being disabled, there's no point in updating this
	  information.
			 Unsetting DISPBKGND_GAMMA skips the gamma lut step
			  in hardware, which is the same as a linear lut that
			  DRM expects us to use in absence of a user lut.
 Interrupt masking is not always honored, so check it here. 
 Clear every per-channel interrupt flag. 
	 Set up the HVS display list memory manager.  We never
	  overwrite the setup from the bootloader (just 128b out of
	  our 16K), since we don't want to scramble the screen when
	  transitioning from the firmware's boot setup to runtime.
	 Set up the HVS LBM memory manager.  We could have some more
	  complicated data structure that allowed reuse of LBM areas
	  between planes when they don't overlap on the screen, but
	  for now we just allocate globally.
 48k words of 2x12-bit pixels 
 60k words of 4x12-bit pixels 
	 Upload filter kernels.  We only have the one for now, so we
	  keep it around for the lifetime of the driver.
	 Set DSP3 (PV1) to use HVS channel 2, which would otherwise
	  be unused.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2014-2015 Broadcom
  Copyright (C) 2013 Red Hat
  DOC: Broadcom VC4 Graphics Driver
  The Broadcom VideoCore 4 (present in the Raspberry Pi) contains a
  OpenGL ES 2.0-compatible 3D engine called V3D, and a highly
  configurable display output pipeline that supports HDMI, DSI, DPI,
  and Composite TV output.
  The 3D engine also has an interface for submitting arbitrary
  compute shader-style jobs using the same shader processor as is
  used for vertex and fragment shaders in GLES 2.0.  However, given
  that the hardware isn't able to expose any standard interfaces like
  OpenGL compute shaders or OpenCL, it isn't supported by this
  driver.
 Helper function for mapping the regs on a platform device. 
 If VC4 V3D is missing, don't advertise render nodes. 
  This list determines the binding order of our components, and we have
  a few constraints:
    - The TXP driver needs to be bound before the PixelValves (CRTC)
      but after the HVS to set the possible_crtc field properly
    - The HDMI driver needs to be bound after the HVS so that we can
      lookup the HVS maximum core clock rate and figure out if we
      support 4kp60 or not.
  Copyright © 2014 Broadcom
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.
	 If the user's array isn't big enough, just return the
	  required array size.
 Save the user's BO pointer, so we don't stomp it with the memcpy. 
 Get the bos from both binner and renderer into hang state. 
			 Retain BOs just in case they were marked purgeable.
			  This prevents the BO from being purged before
			  someone had a chance to dump the hang state.
			 No need to retain BOs coming from the ->unref_list
			  because they are naturally unpurgeable.
	 We need to turn purgeable BOs into unpurgeable ones so that
	  userspace has a chance to dump the hang state before the kernel
	  decides to purge those BOs.
	  Note that BO consistency at dump time cannot be guaranteed. For
	  example, if the owner of these BOs decides to re-use them or mark
	  them purgeable again there's nothing we can do to prevent it.
		 Power the device off and back on the by dropping the
		  reference on runtime PM.
	 Rearm the hangcheck -- another job might have been waiting
	  for our hung one to get kicked off, and vc4_irq_reset()
	  would have started it.
 If idle, we can stop watching for hangs. 
	 If we've made any progress in execution, rearm the timer
	  and wait.
	 We've gone too long with no progress, reset.  This has to
	  be done from a work struct, since resetting can sleep and
	  this timer hook isn't allowed to.
	 Set the current and end address of the control list.
	  Writing the end register is what starts the job.
	 Flush the GPU L2 caches.  These caches sit on top of system
	  L3 (the 128kb or so shared with the CPU), and are
	  non-allocating in the L3.
 Sets the registers for the next job to be actually be executed in
  the hardware.
  The job_lock should be held during this.
	 Only start the perfmon if it was not already started by a previous
	  job.
	 Either put the job in the binner if it uses the binner, or
	  immediately move it to the to-be-rendered queue.
		 We can't start the next bin job if the previous job had a
		  different perfmon instance attached to it. The same goes
		  if one of them had a perfmon attached to it and the other
		  one doesn't.
	 A previous RCL may have written to one of our textures, and
	  our full cache flush at bin time may have occurred before
	  that RCL completed.  Flush the texture cache now, but not
	  the instructions or uniforms (since we don't write those
	  from an RCL).
 Takes the reservation lock on all the BOs being referenced, so that
  at queue submit time we can update the reservations.
  We don't lock the RCL the tile allocstate BOs, or overflow memory
  (all of which are on exec->unref_list).  They're entirely private
  to vc4, so we don't attach dma-buf fences to them.
	 Reserve space for our shared (read-only) fence references,
	  before we commit the CL to the hardware.
 Queues a struct vc4_exec_info for execution.  If no job is
  currently executing, then submits it.
  Unlike most GPUs, our hardware only handles one command list at a
  time.  To queue multiple jobs at once, we'd need to edit the
  previous command list to have a jump to the new one at the end, and
  then bump the end address.  That's a change for a later date,
  though.
	 If no bin job was executing and if the render job (if any) has the
	  same perfmon as our job attached to it (or if both jobs don't have
	  perfmon activated), then kick ours off.  Otherwise, it'll get
	  started when the previous job's flushrender done interrupt occurs.
  vc4_cl_lookup_bos() - Sets up exec->bo[] with the GEM objects
  referenced by the job.
  @dev: DRM device
  @file_priv: DRM file for this fd
  @exec: V3D job being set up
  The command validator needs to reference BOs by their index within
  the submitted job's BO list.  This does the validation of the job's
  BO list and reference counting for the lifetime of the job.
		 See comment on bo_index for why we have to check
		  this.
	 Decrease usecnt on acquired objects.
	  We cannot rely on  vc4_complete_exec() to release resources here,
	  because vc4_complete_exec() has no information about which BO has
	  had its ->usecnt incremented.
	  To make things easier we just free everything explicitly and set
	  exec->bo to NULL so that vc4_complete_exec() skips the 'BO release'
	  step.
 Release any reference to acquired objects. 
	 Allocate space where we'll store the copied in user command lists
	  and shader records.
	 
	  We don't just copy directly into the BOs because we need to
	  read the contents back for validation, and I think the
	  bo->vaddr is uncached access.
	 Block waiting on any previous rendering into the CS's VBO,
	  IB, or textures, so that pixels are actually written by the
	  time we try to read them.
	 If we got force-completed because of GPU reset rather than
	  through our IRQ handler, signal the fence now.
 Free up the allocation of any bin slots we used. 
 Release the reference on the binner BO if needed. 
 Release the reference we had on the perf monitor. 
 Scheduled when any job has been completed, this walks the list of
  jobs that had completed and unrefs their BOs and frees their exec
  structs.
  vc4_submit_cl_ioctl() - Submits a job (frame) to the VC4.
  @dev: DRM device
  @data: ioctl argument
  @file_priv: DRM file for this fd
  This is the main entrypoint for userspace to submit a 3D frame to
  the GPU.  Userspace provides the binner command list (if
  applicable), and the kernel sets up the render command list to draw
  to the framebuffer described in the ioctl, using the command lists
  that the 3D engine's binner will produce.
		 When the fence (or fence array) is exclusively from our
		  context we can skip the wait since jobs are executed in
		  order of their submission through this ioctl and this can
		  only have fences from a prior job.
		 We replace the fence in out_sync in vc4_queue_submit since
		  the render job could execute immediately after that call.
		  If it finishes before our ioctl processing resumes the
		  render job fence could already have been freed.
	 Clear this out of the struct we'll be putting in the queue,
	  since it's part of our stack.
	 The syncobj isn't part of the exec data and we need to free our
	  reference even if job submission failed.
 Return the seqno for our job. 
	 Waiting for exec to finish would need to be done before
	  unregistering V3D.
	 V3D should already have disabled its interrupt and cleared
	  the overflow allocation registers.  Now free the object.
 Only BOs exposed to userspace can be purged. 
	 Not sure it's safe to purge imported BOs. Let's just assume it's
	  not until proven otherwise.
		 If the BO is about to be marked as purgeable, is not used
		  and is not already purgeable or purged, add it to the
		  purgeable list.
		 The BO has not been purged yet, just remove it from
		  the purgeable list.
 Save the purged state. 
 Update internal madv state only if the bo was not purged. 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012 Avionic Design GmbH
  Copyright (C) 2012-2013, NVIDIA Corporation
  host1x_subdev_add() - add a new subdevice with an associated device node
  @device: host1x device to add the subdevice to
  @driver: host1x driver containing the subdevices
  @np: device node
 recursively add children 
 XXX cleanup? 
  host1x_subdev_del() - remove subdevice
  @subdev: subdevice to remove
  host1x_device_parse_dt() - scan device tree and add matching subdevices
  @device: host1x logical device
  @driver: host1x driver
	
	  Move the subdevice to the list of active (registered) subdevices
	  and associate it with a client. At the same time, associate the
	  client with its parent device.
	
	  If all subdevices have been activated, we're about to remove the
	  first active subdevice, so unload the driver first.
	
	  Move the subdevice back to the list of idle subdevices and remove
	  it from list of clients.
	
	  XXX: Perhaps don't do this here, but rather explicitly remove it
	  when the device is about to be deleted.
	 
	  This is somewhat complicated by the fact that this function is
	  used to remove the subdevice when a client is unregistered but
	  also when the composite device is about to be removed.
  host1x_device_init() - initialize a host1x logical device
  @device: host1x logical device
  The driver for the host1x logical device can call this during execution of
  its &host1x_driver.probe implementation to initialize each of its clients.
  The client drivers access the subsystem specific driver data using the
  &host1x_client.parent field and driver data associated with it (usually by
  calling dev_get_drvdata()).
 reset client to end of list for late teardown 
  host1x_device_exit() - uninitialize host1x logical device
  @device: host1x logical device
  When the driver for a host1x logical device is unloaded, it can call this
  function to tear down each of its clients. Typically this is done after a
  subsystem-specific data structure is removed and the functionality can no
  longer be used.
	
	  This duplicates most of of_device_uevent(), but the latter cannot
	  be called from modules and operates on dev->of_node, which is not
	  available in this case.
	 
	  Note that this is really only needed for backwards compatibility
	  with libdrm, which parses this information from sysfs and will
	  fail if it can't find the OF_FULLNAME, specifically.
 unregister subdevices 
		
		  host1x_subdev_unregister() will remove the client from
		  any lists, so we'll need to manually add it back to the
		  list of idle clients.
		 
		  XXX: Alternatively, perhaps don't remove the client from
		  any lists in host1x_subdev_unregister() and instead do
		  that explicitly from host1x_unregister_client()?
 add the client to the list of idle clients 
 remove subdevices 
 move clients to idle list 
 finally remove the device 
  Removes a device by first unregistering any subdevices and then removing
  itself from the list of devices.
  This function must be called with the host1x->devices_lock held.
  host1x_register() - register a host1x controller
  @host1x: host1x controller
  The host1x controller driver uses this to register a host1x controller with
  the infrastructure. Note that all Tegra SoC generations have only ever come
  with a single host1x instance, so this function is somewhat academic.
  host1x_unregister() - unregister a host1x controller
  @host1x: host1x controller
  The host1x controller driver uses this to remove a host1x controller from
  the infrastructure.
  host1x_driver_register_full() - register a host1x driver
  @driver: host1x driver
  @owner: owner module
  Drivers for host1x logical devices call this function to register a driver
  with the infrastructure. Note that since these drive logical devices, the
  registration of the driver actually triggers tho logical device creation.
  A logical device will be created for each host1x instance.
  host1x_driver_unregister() - unregister a host1x driver
  @driver: host1x driver
  Unbinds the driver from each of the host1x logical devices that it is
  bound to, effectively removing the subsystem devices that they represent.
  __host1x_client_init() - initialize a host1x client
  @client: host1x client
  @key: lock class key for the client-specific mutex
  host1x_client_exit() - uninitialize a host1x client
  @client: host1x client
  __host1x_client_register() - register a host1x client
  @client: host1x client
  @key: lock class key for the client-specific mutex
  Registers a host1x client with each host1x controller instance. Note that
  each client will only match their parent host1x controller and will only be
  associated with that instance. Once all clients have been registered with
  their parent host1x controller, the infrastructure will set up the logical
  device and call host1x_device_init(), which will in turn call each client's
  &host1x_client_ops.init implementation.
  host1x_client_unregister() - unregister a host1x client
  @client: host1x client
  Removes a host1x client from its host1x controller instance. If a logical
  device has already been initialized, it will be torn down.
 SPDX-License-Identifier: GPL-2.0-only
  Syncpoint dma_fence implementation
  Copyright (c) 2020, NVIDIA Corporation.
	
	  The dma_fence framework requires the fence driver to keep a
	  reference to any fences for which 'enable_signaling' has been
	  called (and that have not been signalled).
	 
	  We provide a userspace API to create arbitrary syncpoint fences,
	  so we cannot normally guarantee that all fences get signalled.
	  As such, setup a timeout, so that long-lasting fences will get
	  reaped eventually.
 intr framework takes ownership of waiter 
	
	  The fence may get signalled at any time after the above call,
	  so we need to initialize all state used by signalling
	  before it.
	
	  Cancel pending timeout work - if it races, it will
	  not get 'f->signaling' and return.
	
	  Cancel pending timeout work - if it races, it will
	  not get 'f->signaling' and return.
 SPDX-License-Identifier: GPL-2.0-only
  Tegra host1x Interrupt Management
  Copyright (c) 2010-2013, NVIDIA Corporation.
 Wait list management 
  add a waiter to a waiter queue, sorted by threshold
  returns true if it was added at the head of the queue
  run through a waiter queue for a single sync point ID
  and gather all completed waiters into lists by actions
 consolidate submit cleanups 
 PENDING->REMOVED or CANCELLED->HANDLED 
  Add nr_completed to trace 
  Remove & handle all waiters that have completed for the given syncpt
  Sync point threshold interrupt service thread function
  Handles sync point threshold triggers, in thread context
 initialize a new waiter 
 added at head of list - new threshold value 
 added as first waiter - enable interrupt 
 Wait until any concurrently executing handler has finished. 
 output diagnostics 
 SPDX-License-Identifier: GPL-2.0-only
  Tegra host1x Command DMA
  Copyright (c) 2010-2013, NVIDIA Corporation.
  push_buffer
  The push buffer is a circular array of words to be fetched by command DMA.
  Note that it works slightly differently to the sync queue; fence == pos
  means that the push buffer is full, not empty.
  Typically the commands written into the push buffer are a pair of words. We
  use slots to represent each of these pairs and to simplify things. Note the
  strange number of slots allocated here. 512 slots will fit exactly within a
  single memory page. We also need one additional word at the end of the push
  buffer for the RESTART opcode that will instruct the CDMA to jump back to
  the beginning of the push buffer. With 512 slots, this means that we'll use
  2 memory pages and waste 4092 bytes of the second page that will never be
  used.
  Clean up push buffer resources
  Init push buffer resources
 initialize buffer pointers 
  Push two words to the push buffer
  Caller must ensure push buffer is not full
  Pop a number of two word slots from the push buffer
  Caller must ensure push buffer is not empty
 Advance the next write position 
  Return the number of two word slots free in the push buffer
  Sleep (if necessary) until the requested event happens
    - CDMA_EVENT_SYNC_QUEUE_EMPTY : sync queue is completely empty.
      - Returns 1
    - CDMA_EVENT_PUSH_BUFFER_SPACE : there is space in the push buffer
      - Return the amount of space (> 0)
  Must be called with the cdma lock held.
 If somebody has managed to already start waiting, yield 
  Sleep (if necessary) until the push buffer has enough free space.
  Must be called with the cdma lock held.
 If somebody has managed to already start waiting, yield 
  Start timer that tracks the time spent by the job.
  Must be called with the cdma lock held.
 timer already started 
  Stop timer when a buffer submission completes.
  Must be called with the cdma lock held.
  For all sync queue entries that have already finished according to the
  current sync point registers:
   - unpin & unref their mems
   - pop their push buffer slots
   - remove them from the sync queue
  This is normally called from the host code's worker thread, but can be
  called manually if necessary.
  Must be called with the cdma lock held.
	
	  Walk the sync queue, reading the sync point registers as necessary,
	  to consume as many sync queue entries as possible without blocking
 Check whether this syncpt has completed, and bail if not 
 Start timer on next pending syncpt 
 Cancel timeout, when a buffer completes 
 Unpin the memory 
 Pop push buffer slots 
	
	  Move the sync_queue read pointer to the first entry that hasn't
	  completed based on the current HW syncpt value. It's likely there
	  won't be any (i.e. we're still at the head), but covers the case
	  where a syncpt incr happens just priorduring the teardown.
 all jobs have been completed 
	
	  Increment with CPU the remaining syncpts of a partially executed job.
	 
	  CDMA will continue execution starting with the next job or will get
	  into idle state.
 do CPU increments for the remaining syncpts 
 won't need a timeout when replayed 
 safe to use CPU to incr syncpts 
				
				  Overwrite opcodes with 0 word writes
				  to offset 0xbad. This does nothing but
				  has a easily detected signature in debug
				  traces.
 roll back DMAGET and start up channel again 
  Create a cdma
  Destroy a cdma
  Begin a cdma submit
	
	  Check if syncpoint was locked due to previous job timeout.
	  This needs to be done within the cdma lock to avoid a race
	  with the timeout handler.
 init state on first submit with timeout value 
  Push two words into a push buffer slot
  Blocks as necessary if the push buffer is full.
  Push four words into two consecutive push buffer slots. Note that extra
  care needs to be taken not to split the two slots across the end of the
  push buffer. Otherwise the RESTART opcode at the end of the push buffer
  that ensures processing will restart at the beginning will break up the
  four words.
  Blocks as necessary if the push buffer is full.
 compute number of extra slots needed for padding 
	
	  Note that we rely on the fact that this is only used to submit wide
	  gather opcodes, which consist of 3 words, and they are padded with
	  a NOP to avoid having to deal with fractional slots (a slot always
	  represents 2 words). The fourth opcode passed to this function will
	  therefore always be a NOP.
	 
	  This works around a slight ambiguity when it comes to opcodes. For
	  all current host1x incarnations the NOP opcode uses the exact same
	  encoding (0x20000000), so we could hard-code the value here, but a
	  new incarnation may change it and break that assumption.
  End a cdma submit
  Kick off DMA, add job to the sync queue, and a number of slots to be freed
  from the pushbuffer. The handles for a submit must all be pinned at the same
  time, but they can be unpinned in smaller chunks.
 start timer on idle -> active transitions 
  Update cdma state according to current sync point values
 SPDX-License-Identifier: GPL-2.0-only
  Tegra host1x Syncpoints
  Copyright (c) 2010-2015, NVIDIA Corporation.
  host1x_syncpt_alloc() - allocate a syncpoint
  @host: host1x device data
  @flags: bitfield of HOST1X_SYNCPT_ flags
  @name: name for the syncpoint for use in debug prints
  Allocates a hardware syncpoint for the caller's use. The caller then has
  the sole authority to mutate the syncpoint's value until it is freed again.
  If no free syncpoints are available, or a NULL name was specified, returns
  NULL.
  host1x_syncpt_id() - retrieve syncpoint ID
  @sp: host1x syncpoint
  Given a pointer to a struct host1x_syncpt, retrieves its ID. This ID is
  often used as a value to program into registers that control how hardware
  blocks interact with syncpoints.
  host1x_syncpt_incr_max() - update the value sent to hardware
  @sp: host1x syncpoint
  @incrs: number of increments
  Write cached syncpoint and waitbase values to hardware.
  Update the cached syncpoint and waitbase values by reading them
  from the registers.
  Updates the cached syncpoint value by reading a new value from the hardware
  register
  Get the current syncpoint base
  host1x_syncpt_incr() - increment syncpoint value from CPU, updating cache
  @sp: host1x syncpoint
  Updated sync point form hardware, and returns true if syncpoint is expired,
  false if we may need to wait
  host1x_syncpt_wait() - wait for a syncpoint to reach a given value
  @sp: host1x syncpoint
  @thresh: threshold
  @timeout: maximum time to wait for the syncpoint to reach the given value
  @value: return location for the syncpoint value
 first check cache 
 try to read from register 
 allocate a waiter 
 schedule a wakeup when the syncpoint value is reached 
 Caller-specified timeout may be impractically low 
 wait for the syncpoint, or timeout, or signal 
  Returns true if syncpoint is expired, false if we may need to wait
		
		  Unassign syncpt from channels for purposes of Tegra186
		  syncpoint protection. This prevents any channel from
		  accessing it until it is reassigned.
 Allocate sync point to use for clearing waits for expired fences 
  host1x_syncpt_request() - request a syncpoint
  @client: client requesting the syncpoint
  @flags: flags
  host1x client drivers can use this function to allocate a syncpoint for
  subsequent use. A syncpoint returned by this function will be reserved for
  use by the client exclusively. When no longer using a syncpoint, a host1x
  client driver needs to release it using host1x_syncpt_put().
  host1x_syncpt_put() - free a requested syncpoint
  @sp: host1x syncpoint
  Release a syncpoint previously allocated using host1x_syncpt_request(). A
  host1x client driver should call this when the syncpoint is no longer in
  use.
  host1x_syncpt_read_max() - read maximum syncpoint value
  @sp: host1x syncpoint
  The maximum syncpoint value indicates how many operations there are in
  queue, either in channel or in a software thread.
  host1x_syncpt_read_min() - read minimum syncpoint value
  @sp: host1x syncpoint
  The minimum syncpoint value is a shadow of the current sync point value in
  hardware.
  host1x_syncpt_read() - read the current syncpoint value
  @sp: host1x syncpoint
  host1x_syncpt_get_by_id() - obtain a syncpoint by ID
  @host: host1x controller
  @id: syncpoint ID
  host1x_syncpt_get_by_id_noref() - obtain a syncpoint by ID but don't
  	increase the refcount.
  @host: host1x controller
  @id: syncpoint ID
  host1x_syncpt_get() - increment syncpoint refcount
  @sp: syncpoint
  host1x_syncpt_get_base() - obtain the wait base associated with a syncpoint
  @sp: host1x syncpoint
  host1x_syncpt_base_id() - retrieve the ID of a syncpoint wait base
  @base: host1x syncpoint wait base
  host1x_syncpt_release_vblank_reservation() - Make VBLANK syncpoint
    available for allocation
  @client: host1x bus client
  @syncpt_id: syncpoint ID to make available
  Makes VBLANK<i> syncpoint available for allocatation if it was
  reserved at initialization time. This should be called by the display
  driver after it has ensured that any VBLANK increment programming configured
  by the boot chain has been disabled.
 SPDX-License-Identifier: GPL-2.0-only
  Tegra host1x driver
  Copyright (c) 2010-2013, NVIDIA Corporation.
 VIC 
 VIC 
	
	  If we support addressing a maximum of 32 bits of physical memory
	  and if the host1x firewall is enabled, there's no need to enable
	  IOMMU support. This can happen for example on Tegra20, Tegra30
	  and Tegra114.
	 
	  Tegra124 and later can address up to 34 bits of physical memory and
	  many platforms come equipped with more than 2 GiB of system memory,
	  which requires crossing the 4 GiB boundary. But there's a catch: on
	  SoCs before Tegra186 (i.e. Tegra124 and Tegra210), the host1x can
	  only address up to 32 bits of memory in GATHER opcodes, which means
	  that command buffers need to either be in the first 2 GiB of system
	  memory (which could quickly lead to memory exhaustion), or command
	  buffers need to be treated differently from other buffers (which is
	  not possible with the current ABI).
	 
	  A third option is to use the IOMMU in these cases to make sure all
	  buffers will be mapped into a 32-bit IOVA space that host1x can
	  address. This allows all of the system memory to be used and works
	  within the limitations of the host1x on these SoCs.
	 
	  In summary, default to enable IOMMU on Tegra124 and later. For any
	  of the earlier SoCs, only use the IOMMU for additional safety when
	  the host1x firewall is disabled.
	
	  We may not always want to enable IOMMU support (for example if the
	  host1x firewall is already enabled and we don't support addressing
	  more than 32 bits of physical memory), so check for that first.
	 
	  Similarly, if host1x is already attached to an IOMMU (via the DMA
	  API), don't try to attach again.
	
	  If we're not behind an IOMMU make sure we don't get push buffers
	  that are allocated outside of the range addressable by the GATHER
	  opcode.
	 
	  Newer generations of Tegra (Tegra186 and later) support a wide
	  variant of the GATHER opcode that allows addressing more bits.
 set common host1x device data 
  host1x_get_dma_mask() - query the supported DMA mask for host1x
  @host1x: host1x instance
  Note that this returns the supported DMA mask for host1x, which can be
  different from the applicable DMA mask under certain circumstances.
 SPDX-License-Identifier: GPL-2.0-only
  Tegra host1x Job
  Copyright (c) 2010-2015, NVIDIA Corporation.
 Check that we're not going to overflow 
 Redistribute memory to the structs  
		
		  If the client device is not attached to an IOMMU, the
		  physical address of the buffer object can be used.
		 
		  Similarly, when an IOMMU domain is shared between all
		  host1x clients, the IOVA is already available, so no
		  need to map the buffer object again.
		 
		  XXX Note that this isn't always safe to do because it
		  relies on an assumption that no cache maintenance is
		  needed on the buffer objects.
	
	  We will copy gathers BO content later, so there is no need to
	  hold and pin them.
		
		  If the host1x is not attached to an IOMMU, there is no need
		  to map the buffer object for the host1x, since the physical
		  address can simply be used.
 pin & patch the relocs for one gather 
 skip all other gathers 
 relocation shift value validation isn't implemented yet 
	
	  Try a non-blocking allocation from a higher priority pools first,
	  as awaiting for the allocation here is a major performance hit.
 the higher priority allocation failed, try the generic-blocking 
 Copy the gather 
 Store the location in the buffer 
 Validate the job 
 No relocs should remain at this point 
 pin memory 
 patch gathers 
 process each gather mem only once 
 copy_gathers() sets gathers base if firewall is enabled 
  Debug routine used to dump job entries
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2010 Google, Inc.
  Author: Erik Gilling <konkers@android.com>
  Copyright (C) 2011-2013 NVIDIA Corporation
 Store the created entry 
 SPDX-License-Identifier: GPL-2.0-only
  Tegra host1x Channel
  Copyright (c) 2010-2013, NVIDIA Corporation.
 Constructor for the host1x device list 
  host1x_channel_get_index() - Attempt to get channel reference by index
  @host: Host1x device object
  @index: Index of channel
  If channel number @index is currently allocated, increase its refcount
  and return a pointer to it. Otherwise, return NULL.
  host1x_channel_request() - Allocate a channel
  @client: Host1x client this channel will be used to send commands to
  Allocates a new host1x channel for @client. May return NULL if CDMA
  initialization fails.
  Copyright (C) 2013 NVIDIA Corporation
  Permission to use, copy, modify, distribute, and sell this software and its
  documentation for any purpose is hereby granted without fee, provided that
  the above copyright notice appear in all copies and that both that copyright
  notice and this permission notice appear in supporting documentation, and
  that the name of the copyright holders not be used in advertising or
  publicity pertaining to distribution of the software without specific,
  written prior permission.  The copyright holders make no representations
  about the suitability of this software for any purpose.  It is provided "as
  is" without express or implied warranty.
  THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
  INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
  EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
  DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
  TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
  OF THIS SOFTWARE.
 for data and clock lanes 
 for data lanes 
 for clock lanes 
 bias pad configuration settings 
 calibration settings for data lanes 
 calibration settings for clock lanes 
	
	  The MIPI_CAL_BIAS_PAD_PDVREG controls a voltage regulator that
	  supplies the DSI pads. This must be kept enabled until none of the
	  DSI lanes are used anymore.
	
	  MIPI_CAL_BIAS_PAD_PDVCLAMP and MIPI_CAL_BIAS_PAD_E_VCLAMP_REF
	  control a regulator that supplies current to the pre-driver logic.
	  Powering down this regulator causes DSI to fail, so it must remain
	  powered on until none of the DSI lanes are used anymore.
 clear any pending status bits 
	
	  Wait for min 72uS to let calibration logic finish calibration
	  sequence codes before waiting for pads idle state to apply the
	  results.
 SPDX-License-Identifier: GPL-2.0-only
  Tegra host1x Interrupt Management
  Copyright (C) 2010 Google, Inc.
  Copyright (c) 2010-2013, NVIDIA Corporation.
  Sync point threshold interrupt service function
  Handles sync point threshold triggers, in interrupt context
 disable the ip_busy_timeout. this prevents write drops 
	
	  increase the auto-ack timout to the maximum value. 2d will hang
	  otherwise on Tegra2.
 update host clocks per usec 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2010 Google, Inc.
  Author: Erik Gilling <konkers@android.com>
  Copyright (C) 2011-2013 NVIDIA Corporation
 Map dmaget cursor to corresponding mem handle 
	
	  Sometimes we're given different hardware address to the same
	  page - in these cases the offset will get an invalid number and
	  we just have to bail out.
 SPDX-License-Identifier: GPL-2.0-only
  Host1x init for Tegra186 SoCs
  Copyright (c) 2017 NVIDIA Corporation.
 include hw specification 
 include code 
 SPDX-License-Identifier: GPL-2.0-only
  Host1x init for T20 and T30 Architecture Chips
  Copyright (c) 2011-2013, NVIDIA Corporation.
 include hw specification 
 include code 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2010 Google, Inc.
  Author: Erik Gilling <konkers@android.com>
  Copyright (C) 2011-2017 NVIDIA Corporation
 Peek pointer values are invalid during SLCG, so disable it 
 TODO 
 SPDX-License-Identifier: GPL-2.0-only
  Host1x init for Tegra124 SoCs
  Copyright (c) 2013 NVIDIA Corporation.
 include hw specification 
 include code 
 SPDX-License-Identifier: GPL-2.0-only
  Tegra host1x Syncpoints
  Copyright (c) 2010-2013, NVIDIA Corporation.
  Write the current syncpoint value back to hw.
  Write the current waitbase value back to hw.
  Read waitbase value from hw.
  Updates the last value read from hardware.
 Loop in case there's a race writing to min_val 
  Write a cpu syncpoint increment to the hardware, without touching
  the cache.
  syncpt_assign_to_channel() - Assign syncpoint to channel
  @sp: syncpoint
  @ch: channel
  On chips with the syncpoint protection feature (Tegra186+), assign @sp to
  @ch, preventing other channels from incrementing the syncpoints. If @ch is
  NULL, unassigns the syncpoint.
  On older chips, do nothing.
  syncpt_enable_protection() - Enable syncpoint protection
  @host: host1x instance
  On chips with the syncpoint protection feature (Tegra186+), enable this
  feature. On older chips, do nothing.
 SPDX-License-Identifier: GPL-2.0-only
  Tegra host1x Command DMA
  Copyright (c) 2010-2013, NVIDIA Corporation.
  Put the restart at the end of pushbuffer memory
  Increment timedout buffer's syncpt via CPU.
 after CPU incr, ensure shadow is up to date 
  Start channel DMA
 set base, put and end pointer 
 reset GET 
 start the command DMA 
  Similar to cdma_start(), but rather than starting from an idle
  state (where DMA GET is set to DMA PUT), on a timeout we restore
  DMA GET from an explicit value (so DMA may again be pending).
 set base, end pointer (all of memory) 
 set GET, by loading the value in PUT (then reset GET) 
 deassert GET reset and set PUT 
 start the command DMA 
  Kick channel DMA into action by writing its PUT offset (if it has changed)
  Stops both channel's command processor and CDMA immediately.
  Also, tears down the channel and resets corresponding module.
  If this timeout fires, it indicates the current sync_queue entry has
  exceeded its TTL and the userctx should be timed out and remaining
  submits already issued cleaned up (future submits return an error).
 stop processing to get a clean snapshot 
 has buffer actually completed? 
 restore 
 stop HW, resetting channelmodule 
  Init timeout resources
  Clean up timeout resources
 SPDX-License-Identifier: GPL-2.0-only
  Tegra host1x Channel
  Copyright (c) 2010-2013, NVIDIA Corporation.
		
		  Write in batches of 128 as there seems to be a limit
		  of how much you can output to ftrace at once.
 WAIT_SYNCPT_32 is at SYNCPT_PAYLOAD_32+2 
 TODO add waitchk or use waitbases or other mitigation 
 before error checks, return current max 
 get submit lock 
 begin a CDMA submit 
		
		  Force serialization by inserting a host wait for the
		  previous job to finish before this one can commence.
 Synchronize base register to allow using it for relative waiting 
 add a setclass for modules that require it 
 end CDMA submit & stash pinned hMems into sync queue 
 schedule a submit complete interrupt 
 SPDX-License-Identifier: GPL-2.0-only
  Host1x init for Tegra210 SoCs
  Copyright (c) 2015 NVIDIA Corporation.
 include hw specification 
 include code 
 SPDX-License-Identifier: GPL-2.0-only
  Host1x init for Tegra194 SoCs
  Copyright (c) 2018 NVIDIA Corporation.
 include hw specification 
 include code 
 SPDX-License-Identifier: GPL-2.0-only
  Host1x init for Tegra114 SoCs
  Copyright (c) 2013 NVIDIA Corporation.
 include hw specification 
 include code 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2010 Google, Inc.
  Author: Erik Gilling <konkers@android.com>
  Copyright (C) 2011-2013 NVIDIA Corporation
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2010 Sascha Hauer <s.hauer@pengutronix.de>
  Copyright (C) 2005-2009 Freescale Semiconductor, Inc.
 TVEv2 
 The display interface number assigned to this dc channel 
	
	  In interlaced mode we need more counters to create the asymmetric
	  per-field VSYNC signals. The pixel active signal synchronising DC
	  to DI moves to signal generator #6 (see ipu-di.c). In progressive
	  mode counter #5 is used.
 Reserve 5 microcode template words for each DI 
 Init template microcode 
 Init template microcode 
 rgb24 
 blue 
 green 
 red 
 rgb565 
 blue 
 green 
 red 
 gbr24 
 green 
 blue 
 red 
 bgr666 
 blue 
 green 
 red 
 lvds666 
 blue 
 green 
 red 
 bgr24 
 red 
 green 
 blue 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2017 Lucas Stach, Pengutronix
 first get the engine out of reset and remove clock gating 
 init defaults that should be applied to all streams 
 calculate safe window for ctrl register updates 
 only support single buffer formats for now 
	
	  Allocate IRAM buffer with maximum size. This could be made dynamic,
	  but as there is no other user of this IRAM region and we can fit all
	  max sized buffers into it, there is no need yet.
 sentinel  },
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2012-2014 Mentor Graphics Inc.
  Copyright 2005-2012 Freescale Semiconductor, Inc. All Rights Reserved.
 IC Register Offsets 
 IC Register Fields 
 NA 
 NA 
 NA 
 Cast to unsigned 
	
	  Input size cannot be more than 4096, and output size cannot
	  be more than 1024
 Cannot downsize more than 4:1 
 Compute downsizing coefficient 
	
	  compute resizing coefficient using the following equation:
	  resize_coeff = M  (SI - 1)  (SO - 1)
	  where M = 2^13, SI = input size, SO = output size
 need transparent CSC1 conversion 
 Setup vertical resizing 
 Setup horizontal resizing 
 Setup color space conversion 
 Need horizontal flip 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2016-2017 Lucas Stach, Pengutronix
  The channel configuartion functions below are not thread safe, as they
  must be only called from the atomic commit path in the DRM driver, which
  is properly serialized.
	
	  This isn't clearly documented in the RM, but IPU to PRG channel
	  assignment is fixed, as only with this mapping the control signals
	  match up.
 channel 0 is special as it is hardwired to one of the PREs 
 configure the PRE to PRG channel mux 
 check other mux, must not point to same channel 
 config AXI ID 
 enable channel 
 wait for both double buffers to be filled 
 init to free running mode 
 disable address threshold 
 sentinel  },
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2019 Mentor Graphics Inc.
 identity matrix 
  RGB full-range to RGB limited-range
  R_lim = 0.8588  R_full + 16
  G_lim = 0.8588  G_full + 16
  B_lim = 0.8588  B_full + 16
  RGB limited-range to RGB full-range
  R_full = 1.1644  (R_lim - 16)
  G_full = 1.1644  (G_lim - 16)
  B_full = 1.1644  (B_lim - 16)
  YUV full-range to YUV limited-range
  Y_lim  = 0.8588  Y_full + 16
  Cb_lim = 0.8784  (Cb_full - 128) + 128
  Cr_lim = 0.8784  (Cr_full - 128) + 128
  YUV limited-range to YUV full-range
  Y_full  = 1.1644  (Y_lim - 16)
  Cb_full = 1.1384  (Cb_lim - 128) + 128
  Cr_full = 1.1384  (Cr_lim - 128) + 128
  BT.601 RGB full-range to YUV full-range
  Y =  .2990  R + .5870  G + .1140  B
  U = -.1687  R - .3313  G + .5000  B + 128
  V =  .5000  R - .4187  G - .0813  B + 128
 BT.601 RGB full-range to YUV limited-range 
 BT.601 RGB limited-range to YUV full-range 
 BT.601 RGB limited-range to YUV limited-range 
  BT.601 YUV full-range to RGB full-range
  R = 1.  Y +      0  (Cb - 128) + 1.4020  (Cr - 128)
  G = 1.  Y -  .3441  (Cb - 128) -  .7141  (Cr - 128)
  B = 1.  Y + 1.7720  (Cb - 128) +      0  (Cr - 128)
  equivalently (factoring out the offsets):
  R = 1.  Y  +      0  Cb + 1.4020  Cr - 179.456
  G = 1.  Y  -  .3441  Cb -  .7141  Cr + 135.450
  B = 1.  Y  + 1.7720  Cb +      0  Cr - 226.816
 BT.601 YUV full-range to RGB limited-range 
 BT.601 YUV limited-range to RGB full-range 
 BT.601 YUV limited-range to RGB limited-range 
  REC.709 encoding from RGB full range to YUV full range:
  Y =  .2126  R + .7152  G + .0722  B
  U = -.1146  R - .3854  G + .5000  B + 128
  V =  .5000  R - .4542  G - .0458  B + 128
 Rec.709 RGB full-range to YUV limited-range 
 Rec.709 RGB limited-range to YUV full-range 
 Rec.709 RGB limited-range to YUV limited-range 
  Inverse REC.709 encoding from YUV full range to RGB full range:
  R = 1.  Y +      0  (Cb - 128) + 1.5748  (Cr - 128)
  G = 1.  Y -  .1873  (Cb - 128) -  .4681  (Cr - 128)
  B = 1.  Y + 1.8556  (Cb - 128) +      0  (Cr - 128)
  equivalently (factoring out the offsets):
  R = 1.  Y  +      0  Cb + 1.5748  Cr - 201.574
  G = 1.  Y  -  .1873  Cb -  .4681  Cr +  83.891
  B = 1.  Y  + 1.8556  Cb +      0  Cr - 237.517
 Rec.709 YUV full-range to RGB limited-range 
 Rec.709 YUV limited-range to RGB full-range 
 Rec.709 YUV limited-range to RGB limited-range 
 YUV <-> RGB encoding is required 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2012-2016 Mentor Graphics Inc.
  Queued image conversion support, with tiling and rotation.
  The IC Resizer has a restriction that the output frame from the
  resizer must be 1024 or less in both width (pixels) and height
  (lines).
  The image converter attempts to split up a conversion when
  the desired output (converted) frame resolution exceeds the
  IC resizer limit of 1024 in either dimension.
  If either dimension of the output frame exceeds the limit, the
  dimension is split into 1, 2, or 4 equal stripes, for a maximum
  of 44 or 16 tiles. A conversion is then carried out for each
  tile (but taking care to pass the full frame stride length to
  the DMA channel's parameter memory!). IDMA double-buffering is used
  to convert each tile back-to-back when possible (see note below
  when double_buffering boolean is set).
  Note that the input frame must be split up into the same number
  of tiles as the output frame:
                        +---------+-----+
    +-----+---+         |  A      | B   |
    | A   | B |         |         |     |
    +-----+---+   -->   +---------+-----+
    | C   | D |         |  C      | D   |
    +-----+---+         |         |     |
                        +---------+-----+
  Clockwise 90° rotations are handled by first rescaling into a
  reusable temporary tile buffer and then rotating with the 8x8
  block rotator, writing to the correct destination:
                                          +-----+-----+
                                          |     |     |
    +-----+---+         +---------+       | C   | A   |
    | A   | B |         | A,B, |  |       |     |     |
    +-----+---+   -->   | C,D  |  |  -->  |     |     |
    | C   | D |         +---------+       +-----+-----+
    +-----+---+                           | D   | B   |
                                          |     |     |
                                          +-----+-----+
  If the 8x8 block rotator is used, horizontal or vertical flipping
  is done during the rotation step, otherwise flipping is done
  during the scaling step.
  With rotation or flipping, tile order changes between input and
  output image. Tiles are numbered row major from top left to bottom
  right for both input and output image.
 dimensions of one tile 
 size and strides are in bytes 
 start Y or packed offset of this tile 
 offset from start to tile in U plane, for planar formats 
 offset from start to tile in V plane, for planar formats 
 # of rows (horizontal stripes) if dest height is > 1024 
 # of columns (vertical stripes) if dest width is > 1024 
 V4L2 fourcc 
 total bpp 
 decimation in width for UV planes 
 decimation in height for UV planes 
 planar format 
 U and V planes are swapped 
 partial planar (U and V in same plane) 
 Sourcedestination image data and rotation mode 
 intermediate buffer for rotation 
 current buffer number for double buffering 
 can we use double-buffering for this conversion operation? 
 num_rows  num_cols 
 next tile to process 
 where to place converted tile in dest image 
 mask of completed EOF irqs at every tile conversion 
 the IPU end-of-frame irqs 
 list of convert contexts 
 queue of conversion runs 
 queue of completed runs 
 the current conversion run 
 Format found 
  Calculate downsizing coefficients, which are the same for all tiles,
  and initial bilinear resizing coefficients, which are used to find the
  best seam positions.
  Also determine the number of tiles necessary to guarantee that no tile
  is larger than 1024 pixels in either dimension at the output and between
  IC downsizing and main processing sections.
 Do not let invalid input lead to an endless loop below 
	
	  Calculate the bilinear resizing coefficients that could be used if
	  we were converting with a single tile. The bottom right output pixel
	  should sample as close as possible to the bottom right input pixel
	  out of the decimator, but not overshoot it:
	
	  Both the output of the IC downsizing section before being passed to
	  the IC main processing section and the final output of the IC main
	  processing section must be <= 1024 pixels in both dimensions.
  Find the best aligned seam position for the given column  row index.
  Rotation and image offsets are out of scope.
  @index: column  row index, used to calculate valid interval
  @in_edge: input right  bottom edge
  @out_edge: output right  bottom edge
  @in_align: input alignment, either horizontal 8-byte line start address
             alignment, or pixel alignment due to image format
  @out_align: output alignment, either horizontal 8-byte line start address
              alignment, or pixel alignment due to image format or rotator
              block size
  @in_burst: horizontal input burst size in case of horizontal flip
  @out_burst: horizontal output burst size or rotator block size
  @downsize_coeff: downsizing section coefficient
  @resize_coeff: main processing section resizing coefficient
  @_in_seam: aligned input seam position return value
  @_out_seam: aligned output seam position return value
 Input  output seam position candidates 
 Start within 1024 pixels of the right  bottom edge 
 End before having to add more columns to the left  rows above 
	
	  Limit input seam position to make sure that the downsized input tile
	  to the right or bottom does not exceed 1024 pixels.
	
	  Output tiles must start at a multiple of 8 bytes horizontally and
	  possibly at an even line horizontally depending on the pixel format.
	  Only consider output aligned positions for the seam.
		
		  Tiles in the right row  bottom column may not be allowed to
		  overshoot horizontally  vertically. out_burst may be the
		  actual DMA burst size, or the rotator block size.
		
		  Input sample position, corresponding to out_pos, 19.13 fixed
		  point.
		
		  The closest input sample position that we could actually
		  start the input tile at, 19.13 fixed point.
 Convert 19.13 fixed point to integer 
  Tile left edges are required to be aligned to multiples of 8 bytes
  by the IDMAC.
  Tile top edge alignment is only limited by chroma subsampling.
		
		  The IC burst reads 8 pixels at a time. Reading beyond the
		  end of the line is usually acceptable. Those pixels are
		  ignored, unless the IC has to write the scaled line in
		  reverse.
	
	  Align to 16x16 pixel blocks for planar 4:2:0 chroma subsampled
	  formats to guarantee 8-byte aligned line start addresses in the
	  chroma planes when IRT is used. Align to 8x8 pixel IRT block size
	  for all other formats.
	
	  Align to 16x16 pixel blocks for planar 4:2:0 chroma subsampled
	  formats to guarantee 8-byte aligned line start addresses in the
	  chroma planes when IRT is used. Align to 8x8 pixel IRT block size
	  for all other formats.
  Fill in left position and width and for all tiles in an input column, and
  for all corresponding output tiles. If the 90° rotator is used, the output
  tiles are in a row, and output tile top position and height are set.
  Fill in top position and height and for all tiles in an input row, and
  for all corresponding output tiles. If the 90° rotator is used, the output
  tiles are in a column, and output tile left position and width are set.
  Find the best horizontal and vertical seam positions to split into tiles.
  Minimize the fractional part of the input sampling position for the
  top  left pixels of each tile.
 Switch widthheight and align top left to IRT block size 
		
		  Align input width to burst length if the scaling step flips
		  horizontally.
 burst length ,
 Up to 4096x4096 input tile size 
  Use the rotation transformation to find the tile coordinates
  (row, col) of a tile in the destination frame that corresponds
  to the given tile coordinates of a source frame. The destination
  coordinate is then converted to a tile index.
 with no rotation it's a 1:1 mapping 
	
	  before doing the transform, first we have to translate
	  source row,col for an origin in the center of s_image
 do the rotation transform 
 apply flip 
	
	  finally translate dest row,col using an origin in upper
	  left of d_image
  Fill the out_tile_map[] with transformed destination tile indeces.
 setup some convenience vars 
 setup some convenience vars 
  Calculate the resizing ratio for the IC main processing section given input
  size, fixed downsizing coefficient, and output size.
  Either round to closest for the next tile's first pixel to minimize seams
  and distortion (for all but right column  bottom row), or round down to
  avoid sampling beyond the edges of the input image for this tile's last
  pixel.
  Returns the resizing coefficient, resizing ratio is 8192.0  resize_coeff.
  Slightly modify resize coefficients per tile to hide the bilinear
  interpolator reset at tile borders, shifting the right  bottom edge
  by up to a half input pixel. This removes noticeable seams between
  tiles at higher upscaling factors.
		
		  With the horizontal scaling factor known, round up resized
		  width (output width or height) to burst size.
		
		  Calculate input width from the last accessed input pixel
		  given resized width and scaling coefficients. Round up to
		  burst size.
		
		  With the vertical scaling factor known, round up resized
		  height (output width or height) to IDMAC limitations.
		
		  Calculate input width from the last accessed input pixel
		  given resized height and scaling coefficients. Align to
		  IDMAC restrictions.
  return the number of runs in given queue (pending_q or done_q)
  for this context. hold irqlock when calling.
 disable IC tasks and the channels 
	
	  Skip writing U and V components to odd rows in the output
	  channels for planar 4:2:0.
	
	  Setting a non-zero AXI ID collides with the PRG AXI snooping, so
	  only do this when there is no PRG present.
 clear EOF irq mask 
 swap widthheight for resizer 
 setup the IC resizer and CSC 
 init the source MEM-->IC PP IDMAC channel 
 init the IC PP-->MEM IDMAC channel 
 init the MEM-->IC PP ROT IDMAC channel 
 init the destination IC PP ROT-->MEM IDMAC channel 
 now link IC PP-->MEM to MEM-->IC PP ROT 
 init the destination IC PP-->MEM IDMAC channel 
 enable the IC 
 set buffers ready 
 enable the channels! 
 hold irqlock when calling 
 remove run from pending_q and set as current 
 hold irqlock when calling 
 skip contexts that are aborting 
		
		  something went wrong with start, add the run
		  to done q and continue to the next run in the
		  pending q.
 call the completion callback and free the run 
  the bottom half thread clears out the done_q, calling the
  completion handler for each.
	
	  the done_q is cleared out, signal any contexts
	  that are aborting that abort can complete.
 hold irqlock when calling 
	
	  It is difficult to stop the channel DMA before the channels
	  enter the paused state. Without double-buffering the channels
	  are always in a paused state when the EOF irq occurs, so it
	  is safe to stop the channels now. For double-buffering we
	  just ignore the abort until the operation completes, when it
	  is safe to shut down.
		
		  the conversion is complete
	
	  not done, place the next tile buffers.
 clear EOF irq mask for next tile 
 get current run and its context 
 this was NOT a rotation op, shouldn't happen 
  try to force the completion of runs for this ctx. Called when
  abort wait times out in ipu_image_convert_abort().
 get IC 
 get IDMAC channels 
 acquire the EOF interrupts 
 borrowed from driversmediav4l2-corev4l2-common.c 
 Bits that must be zero to be aligned 
 Clamp to aligned min and max 
 Round to nearest aligned value 
 Adjusts inputoutput images to IPU restrictions 
 set some default pixel formats if needed 
 image converter does not handle fields 
 resizer cannot downsize more than 4:1 
 align input widthheight 
 align output widthheight 
 set inputoutput strides and image sizes 
  this is used by ipu_image_convert_prepare() to verify set input and
  output images are valid before starting the conversion. Clients can
  also call it before calling ipu_image_convert_prepare().
  Call ipu_image_convert_prepare() to prepare for the conversion of
  given images and rotation mode. Returns a new conversion context.
 verify the inout images before continuing 
 Sets ctx->in.num_rowscols as well 
 set tiling and rotation 
	
	  Can we use double-buffering for this operation? If there is
	  only one tile (the whole image can be converted in a single
	  operation) there's no point in using double-buffering. Also,
	  the IPU's IDMAC channels allow only a single U and V plane
	  offset shared between both buffers, but these offsets change
	  for every tile, and therefore would have to be updated for
	  each buffer which is not possible. So double-buffering is
	  impossible when either the source or destination images are
	  a planar format (YUV420, YUV422P, etc.). Further, differently
	  sized tiles or different resizing coefficients per tile
	  prevent double-buffering as well.
  Carry out a single image conversion run. Only the physaddr's of the input
  and output image buffers are needed. The conversion context must have
  been created previously with ipu_image_convert_prepare().
 Abort any active or pending conversions for this context 
 move all remaining pending runs in this context to done_q 
 Unprepare image conversion context 
 make sure no runs are hanging around 
  "Canned" asynchronous single image conversion. Allocates and returns
  a new conversion run.  On successful return the caller must free the
  run and call ipu_image_convert_unprepare() after conversion completes.
 "Canned" synchronous single image conversion 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2010 Sascha Hauer <s.hauer@pengutronix.de>
  Copyright (C) 2005-2009 Freescale Semiconductor, Inc.
 Rec.709 limited range 
 BT.601 limited range 
		
		  foreground and background are of same colorspace, put
		  colorspace converter after combining unit.
			
			  foreground identical to output, apply color
			  conversion on background
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2010 Sascha Hauer <s.hauer@pengutronix.de>
  Copyright (C) 2005-2009 Freescale Semiconductor, Inc.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2008-2010 Freescale Semiconductor, Inc. All Rights Reserved.
SMFC Registers 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2010 Sascha Hauer <s.hauer@pengutronix.de>
  Copyright (C) 2005-2009 Freescale Semiconductor, Inc.
  This is an undocumented feature, a write one to a channel bit in
  IPU_CHA_CUR_BUF and IPU_CHA_TRIPLE_CUR_BUF will reset the channel's
  internal current buffer pointer so that transfers start from buffer
  0 on the next channel enable (that's the theory anyway, the imx6 TRM
  only says these are read-only registers). This operation is required
  for channel linking to work correctly, for instance video capture
  pipelines that carry out image rotations will fail after the first
  streaming unless this function is called for each channel before
  re-enabling the channels.
 locking disabled 
	
	  IPUv3EX  i.MX51 has a different register layout, and on IPUv3M 
	  i.MX53 channel arbitration locking doesn't seem to work properly.
	  Allow enabling the lock feature on IPUv3H  i.MX6 only.
 Mark buffer as ready. 
 write one to clear 
 write one to set 
 Disable DMA channel(s) 
 Set channel buffers NOT to be ready 
 write one to clear 
 write one to set 
 Reset the double buffer 
  The imx6 rev. D TRM says that enabling the WM feature will increase
  a channel's priority. Refer to Table 36-8 Calculated priority value.
  The sub-module that is the sink or source for the channel must enable
  watermark signal for this to take effect (SMFC_WM for instance).
  Set the source mux for the given CSI. Selects either parallel or
  MIPI CSI2 sources.
  Set the source mux for the IC. Selects either CSI[01] or the VDI.
 Frame Synchronization Unit Channel Linking 
  Links a source channel to a sink channel in the FSU.
  Unlinks source and sink channels in the FSU.
 Link IDMAC channels in the FSU 
 Unlink IDMAC channels in the FSU 
 sentinel  }
 These must be in the order of the corresponding device tree port nodes 
 Associate subdevice with the corresponding port node 
 Mask and clear all interrupts 
 TODO: remove irq_domain_generic_chips 
 Set MCU_T to divide MCU access window into 2 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2012 Mentor Graphics Inc.
  Copyright 2005-2012 Freescale Semiconductor, Inc. All Rights Reserved.
  The V4L2 spec defines packed RGB formats in memory byte order, which from
  point of view of the IPU corresponds to little-endian words with the first
  component in the least significant bits.
  The DRM pixel formats and IPU internal representation are ordered the other
  way around, with the first named component ordered at the most significant
  bits. Further, V4L2 formats are not well defined:
      https:linuxtv.orgdownloadsv4l-dvb-apispacked-rgb.html
  We choose the interpretation which matches GStreamer behavior.
		
		  Here we choose the 'corrected' interpretation of RGBP, a
		  little-endian 16-bit word with the red component at the most
		  significant bits:
		  g[2:0]b[4:0] r[4:0]g[5:3] <=> [16:0] R:G:B
 B G R <=> [24:0] R:G:B 
 R G B <=> [24:0] B:G:R 
 B G R A <=> [32:0] A:B:G:R 
 R G B A <=> [32:0] A:B:G:R 
 B G R A <=> [32:0] A:R:G:B 
 B G R X <=> [32:0] X:R:G:B 
 A B G R <=> [32:0] R:G:B:A 
 X B G R <=> [32:0] R:G:B:X 
 R G B A <=> [32:0] A:B:G:R 
 R G B X <=> [32:0] X:B:G:R 
 A R G B <=> [32:0] B:G:R:A 
 X R G B <=> [32:0] B:G:R:X 
 rgb mode 
 raw mode 
 bitspixel 
 pix fmt 
 burst size 
 bitspixel 
 pix fmt 
 burst size 
 See Table 37-12. Alpha channels mapping. 
 pix format 
 burst size 
 pix format 
 burst size 
 pix format 
 burst size 
 pix format 
 burst size 
 pix format 
 burst size 
 bitspixel 
 pix format 
 burst size 
 bitspixel 
 pix format 
 burst size 
 This should not happen 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2010 Sascha Hauer <s.hauer@pengutronix.de>
  Copyright (C) 2005-2009 Freescale Semiconductor, Inc.
 display input clock 
 IPU bus clock 
 resulting pixel clock 
 counter >= 2 only 
 counter >= 5 only 
 counter >= 6 only 
 Enable auto reload 
 1: internal VSYNC for each frame 
 == counter 7 
 PIN2: HSYNC waveform 
 PIN3: VSYNC waveform 
 == counter 7 
 == counter 7 
 4: Field 
 5: Active lines 
 6: Active pixel, referenced by DC 
 7: Half line HSYNC 
 1: INT_HSYNC 
 PIN2: HSYNC 
 PIN3: VSYNC 
 4: Line Active 
 5: Pixel Active, referenced by DC 
 Line Active 
 unused 
 unused 
 can't use #7 and #8 for line active and pixel active counters 
 1: INT_HSYNC 
 2: VSYNC 
 3: Line Active 
 VSYNC ,
 PIN4: HSYNC for VGA via TVEv2 on TQ MBa53 
 magic value from Freescale TVE driver 
 5: Pixel Active signal to DC 
 Line Active 
 PIN6: VSYNC for VGA via TVEv2 on TQ MBa53 
 magic value from Freescale TVE driver 
 PIN4: HSYNC for VGA via TVEv2 on i.MX53-QSB 
 magic value from Freescale TVE driver 
 PIN6: VSYNC for VGA via TVEv2 on i.MX53-QSB 
 magic value from Freescale TVE driver 
 unused 
		
		  CLKMODE_EXT means we must use the DI clock: this is
		  needed for things like LVDS which needs to feed the
		  DI and LDB with the same pixel clock.
			
			  CLKMODE_SYNC means that we want the DI to be
			  clocked at the same rate as the parent clock.
			  This is needed (eg) for LDB which needs to be
			  fed with the same pixel clock.  We assume that
			  the LDB clock has already been set correctly.
			
			  We can use the divider.  We should really have
			  a flag here indicating whether the bridge can
			  cope with a fractional divider or not.  For the
			  time being, let's go for simplicitly and
			  reliability.
		
		  For other interfaces, we can arbitarily select between
		  the DI specific clock and the internal IPU clock.  See
		  DI_GENERAL bit 20.  We select the IPU clock if it can
		  give us a clock rate within 1% of the requested frequency,
		  otherwise we use the DI clock.
 Allow a 1% error 
 Set the divider 
	
	  Set the highlow periods.  Bits 24:16 give us the falling edge,
	  and bits 8:0 give the rising edge.  LSB is fraction, and is
	  based on the divider above.  We want a 50% duty cycle, so set
	  the falling edge to be half the divider.
 Finally select the input clock 
  This function is called to adjust a video mode to IPU restrictions.
  It is meant to be called from drm crtc mode_fixup() methods.
 Now divider is integer portion 
 Setup pixel clock timing 
 Down time is half of period 
 set y_sel = 1 
			
			  TODO: change only for TVEv2, parallel display
			  uses pin 2  3
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2012-2016 Mentor Graphics Inc.
  Copyright (C) 2005-2009 Freescale Semiconductor, Inc.
 VDI Register Offsets 
 VDI Register Fields 
	
	  Full motion, only vertical filter is used.
	  Burst size is 4 accesses
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2012-2014 Mentor Graphics Inc.
  Copyright (C) 2005-2009 Freescale Semiconductor, Inc.
 IPU bus clock 
 CSI Register Offsets 
 CSI Register Fields 
 MIPI CSI-2 data types 
 YYY...UYVY.... 
 UYY...VYY...   
 UYVY...         
  Bitfield of CSI bus signal polarities and modes.
  Enumeration of CSI data bus widths.
  Enumeration of CSI clock modes.
  Set mclk division ratio for generating test mode mclk. Only used
  for test generator.
  Find the CSI data format and data width for the given V4L2 media
  bus pixel format code.
 TODO 
 translate alternate field mode based on given standard 
  Fill a CSI bus config struct from mbus_config and mbus_framefmt.
 UYVY10_1X20 etc. should be supported as well 
		
		  MIPI CSI-2 requires non gated clock mode, all other
		  parameters are not applicable for MIPI CSI-2 bus.
 will never get here, keep compiler quiet 
 get translated field type of input and output 
	
	  Write the H-V-F codes the CSI will match against the
	  incoming data for startend of active and blanking
	  field intervals. If input and output field types are
	  sequential but not the same (one is SEQ_BT and the other
	  is SEQ_TB), swap the F-bit so that the CSI will capture
	  field 1 lines before field 0 lines.
		
		  Field0BlankEnd  = 110, Field0BlankStart  = 010
		  Field0ActiveEnd = 100, Field0ActiveStart = 000
		  Field1BlankEnd  = 111, Field1BlankStart  = 011
		  Field1ActiveEnd = 101, Field1ActiveStart = 001
 same as above but with F-bit inverted 
 set default sensor frame width and height 
 Set the CSI_SENS_CONF register remaining fields 
 Set CCIR registers 
 Setup sensor frame size 
 Set sensb_mclk div_ratio 
 IC or VDIC 
 SPDX-License-Identifier: GPL-2.0
  GPU memory trace points
  Copyright (C) 2020 Google, Inc.
 SPDX-License-Identifier: GPL-2.0-or-later
 	connector.c
  2004+ Copyright (c) Evgeniy Polyakov <zbr@ioremap.net>
  All rights reserved.
  Sends mult (multiple) cn_msg at a time.
  msg->seq and msg->ack are used to determine message genealogy.
  When someone sends message it puts there locally unique sequence
  and random acknowledge numbers.  Sequence number may be copied into
  nlmsghdr->nlmsg_seq too.
  Sequence number is incremented with each message to be sent.
  If we expect a reply to our message then the sequence number in
  received message MUST be the same as in original message, and
  acknowledge number MUST be the same + 1.
  If we receive a message and its sequence number is not equal to the
  one we are expecting then it is a new message.
  If we receive a message and its sequence number is the same as one
  we are expecting but it's acknowledgement number is not equal to
  the acknowledgement number in the original message + 1, then it is
  a new message.
  If msg->len != len, then additional cn_msg messages are expected following
  the first msg.
  The message is sent to, the portid if given, the group if given, both if
  both, or if both are zero then the group is looked up and sent there.
 same as cn_netlink_send_mult except msg->len is used for len 
  Callback helper - queues work and setup destructor for given data.
 verify msg->len is within skb 
  Main netlink receiving function.
  It checks skb, netlink header and msg sizes, and calls callback helper.
  Callback add routing - adds callback with given ID and name.
  If there is registered callback with the same ID it will not be added.
  May sleep.
  Callback remove routing - removes callback
  with given ID.
  If there is no registered callback with given
  ID nothing happens.
  May sleep while waiting for reference counter to become zero.
 SPDX-License-Identifier: GPL-2.0-or-later
  cn_proc.c - process events connector
  Copyright (C) Matt Helsley, IBM Corp. 2005
  Based on cn_fork.c by Guillaume Thouvenin <guillaume.thouvenin@bull.net>
  Original copyright notice follows:
  Copyright (C) 2005 BULL SA.
  Size of a cn_msg followed by a proc_event structure.  Since the
  sizeof struct cn_msg is a multiple of 4 bytes, but not 8 bytes, we
  add one 4-byte word to the size here, and then start the actual
  cn_msg structure 4 bytes into the stack buffer.  The result is that
  the immediately following proc_event structure is aligned to 8 bytes.
 See comment above; we test our assumption about sizeof struct cn_msg here. 
 local_event.count is used as the sequence number of the netlink message 
	
	  local_lock() disables preemption during send to ensure the messages
	  are ordered according to their sequence numbers.
	 
	  If cn_netlink_send() fails, the data is not sent.
 not used 
 not used 
 not used 
 not used 
 not used 
 not used 
 not used 
 not used 
 not used 
 not used 
 not used 
 not used 
 not used 
 not used 
 not used 
 not used 
  Send an acknowledgement message to userspace
  Use 0 for success, EFOO otherwise.
  Note: this is the negative of conventional kernel error
  values because it's not being returned via syscall return
  mechanisms.
 not used 
  cn_proc_mcast_ctl
  @data: message sent from userspace via the connector
	 
	  Events are reported with respect to the initial pid
	  and user namespaces so ignore requestors from
	  other namespaces.
 Can only change if privileged. 
  cn_proc_init - initialization entry point
  Adds the connector callback to the connector driver.
 SPDX-License-Identifier: GPL-2.0-or-later
 	cn_queue.c
  2004+ Copyright (c) Evgeniy Polyakov <zbr@ioremap.net>
  All rights reserved.
 SPDX-License-Identifier: GPL-2.0-only
  The input core
  Copyright (c) 1999-2002 Vojtech Pavlik
  input_mutex protects access to both input_dev_list and input_handler_list.
  This also causes input_[un]register_device and input_[un]register_handler
  be mutually exclusive which simplifies locking in drivers implementing
  input handlers.
  Pass event first through all filters and then, if event has not been
  filtered out, through all open handles. This function is called with
  dev->event_lock held and interrupts disabled.
  Pass values first through all filters and then, if event has not been
  filtered out, through all open handles. This function is called with
  dev->event_lock held and interrupts disabled.
 trigger auto repeat for key events 
  Generate software autorepeat event. Note that we take
  dev->event_lock here to avoid racing with input_event
  which may cause keys get "stuck".
		
		  "Stage" the event; we'll flush it later, when we
		  get actual touch data.
		
		  Bypass filtering for multi-touch events when
		  not employing slots.
 Flush pending "slot" event 
 auto-repeat bypasses state updates 
 filter-out events from inhibited devices 
		
		  Reset the timestamp on flush so we won't end up
		  with a stale one. Note we only need to reset the
		  monolithic one as we use its presence when deciding
		  whether to generate a synthetic timestamp.
  input_event() - report new input event
  @dev: device that generated the event
  @type: type of the event
  @code: event code
  @value: value of the event
  This function should be used by drivers implementing various input
  devices to report input events. See also input_inject_event().
  NOTE: input_event() may be safely used right after input device was
  allocated with input_allocate_device(), even before it is registered
  with input_register_device(), but the event will not reach any of the
  input handlers. Such early invocation of input_event() may be used
  to 'seed' initial state of a switch or initial position of absolute
  axis, etc.
  input_inject_event() - send input event from input handler
  @handle: input handle to send event through
  @type: type of the event
  @code: event code
  @value: value of the event
  Similar to input_event() but will ignore event if device is
  "grabbed" and handle injecting event is not the one that owns
  the device.
  input_alloc_absinfo - allocates array of input_absinfo structs
  @dev: the input device emitting absolute events
  If the absinfo struct the caller asked for is already allocated, this
  functions will not do anything.
		
		  We will handle this allocation failure in
		  input_register_device() when we refuse to register input
		  device with ABS bits but without absinfo.
  input_grab_device - grabs device for exclusive use
  @handle: input handle that wants to own the device
  When a device is grabbed by an input handle all events generated by
  the device are delivered only to this handle. Also events injected
  by other input handles are ignored while device is grabbed.
 Make sure input_pass_event() notices that grab is gone 
  input_release_device - release previously grabbed device
  @handle: input handle that owns the device
  Releases previously grabbed device so that other input handles can
  start receiving input events. Upon release all handlers attached
  to the device have their start() method called so they have a change
  to synchronize device state with the rest of the system.
  input_open_device - open input device
  @handle: handle through which device is being accessed
  This function should be called by input handlers when they
  want to start receive events from given input device.
		
		  Device is already opened andor inhibited,
		  so we can exit immediately and report success.
			
			  Make sure we are not delivering any more events
			  through this handle
  input_close_device - close input device
  @handle: handle through which device is being accessed
  This function should be called by input handlers when they
  want to stop receive events from given input device.
		
		  synchronize_rcu() makes sure that input_pass_event()
		  completed and that no more input events are delivered
		  through this handle
  Simulate keyup events for all keys that are marked as pressed.
  The function must be called with dev->event_lock held.
  Prepare device for unregistering
	
	  Mark device as going away. Note that we take dev->mutex here
	  not to protect access to dev->going_away but rather to ensure
	  that there are no threads in the middle of input_open_device()
	
	  Simulate keyup events for all pressed keys so that handlers
	  are not left with "stuck" keys. The driver may continue
	  generate events even after we done here but they will not
	  reach any handlers.
  input_scancode_to_scalar() - converts scancode in &struct input_keymap_entry
  @ke: keymap entry containing scancode to be converted.
  @scancode: pointer to the location where converted scancode should
 	be stored.
  This function is used to convert scancode stored in &struct keymap_entry
  into scalar form understood by legacy keymap handling methods. These
  methods expect scancodes to be represented as 'unsigned int'.
  Those routines handle the default case where no [gs]etkeycode() is
  defined. In this case, an array indexed by the scancode is used.
 Setting the bit twice is useless, so break 
  input_get_keycode - retrieve keycode currently mapped to a given scancode
  @dev: input device which keymap is being queried
  @ke: keymap entry
  This function should be called by anyone interested in retrieving current
  keymap. Presently evdev handlers use it.
  input_set_keycode - attribute a keycode to a given scancode
  @dev: input device which keymap is being updated
  @ke: new keymap entry
  This function should be called by anyone needing to update current
  keymap. Presently keyboard and evdev handlers use it.
 Make sure KEY_RESERVED did not get enabled. 
	
	  Simulate keyup event if keycode is not present
	  in the keymap anymore
 !CONFIG_COMPAT 
 We need to fit into seq->private pointer 
	
	  If no output was produced print a single 0.
 We need to fit into seq->private pointer 
 !CONFIG_PROC_FS 
	
	  If no output was produced print a single 0.
  Input uevent interface - loading event handlers based on
  device bitfields.
  input_reset_device() - resetrestore the state of input device
  @dev: input device whose state needs to be reset
  This function tries to reset the state of an opened input device and
  bring internal state and state if the hardware in sync with each other.
  We mark all keys as released, restore LED state, repeat rate, etc.
	
	  Keys that are pressed now are unlikely to be
	  still pressed when we resume.
 Turn off LEDs and sounds, if any are active. 
 Restore state of LEDs and sounds, if any were active. 
	
	  Keys that are pressed now are unlikely to be
	  still pressed when we resume.
 Turn off LEDs and sounds, if any are active. 
 CONFIG_PM 
  input_allocate_device - allocate memory for new input device
  Returns prepared struct input_dev or %NULL.
  NOTE: Use input_free_device() to free devices that have not been
  registered; input_unregister_device() should be used for already
  registered devices.
  devm_input_allocate_device - allocate managed input device
  @dev: device owning the input device being created
  Returns prepared struct input_dev or %NULL.
  Managed input devices do not need to be explicitly unregistered or
  freed as it will be done automatically when owner device unbinds from
  its driver (or binding fails). Once managed input device is allocated,
  it is ready to be set up and registered in the same fashion as regular
  input device. There are no special devm_input_device_[un]register()
  variants, regular ones work with both managed and unmanaged devices,
  should you need them. In most cases however, managed input device need
  not be explicitly unregistered or freed.
  NOTE: the owner device is set up as parent of input device and users
  should not override it.
  input_free_device - free memory occupied by input_dev structure
  @dev: input device to free
  This function should only be used if input_register_device()
  was not called yet or if it failed. Once device was registered
  use input_unregister_device() and memory will be freed once last
  reference to the device is dropped.
  Device should be allocated by input_allocate_device().
  NOTE: If there are references to the input device then memory
  will not be freed until last reference is dropped.
  input_set_timestamp - set timestamp for input events
  @dev: input device to set timestamp for
  @timestamp: the time at which the event has occurred
    in CLOCK_MONOTONIC
  This function is intended to provide to the input system a more
  accurate time of when an event actually occurred. The driver should
  call this function as soon as a timestamp is acquired ensuring
  clock conversions in input_set_timestamp are done correctly.
  The system entering suspend state between timestamp acquisition and
  calling input_set_timestamp can result in inaccurate conversions.
  input_get_timestamp - get timestamp for input events
  @dev: input device to get timestamp from
  A valid timestamp is a timestamp of non-zero value.
  input_set_capability - mark device as capable of a certain event
  @dev: device that is capable of emitting or accepting event
  @type: type of the event (EV_KEY, EV_REL, etc...)
  @code: event code
  In addition to setting up corresponding bit in appropriate capability
  bitmap the function also adjusts dev->evbit.
 do nothing 
 count SYN_MT_REPORT and SYN_REPORT 
 Make room for KEY and MSC events 
  input_enable_softrepeat - enable software autorepeat
  @dev: input device
  @delay: repeat delay
  @period: repeat period
  Enable software autorepeat on the input device.
  input_register_device - register device with input core
  @dev: device to be registered
  This function registers device with input core. The device must be
  allocated with input_allocate_device() and all it's capabilities
  set up before registering.
  If function fails the device must be freed with input_free_device().
  Once device has been successfully registered it can be unregistered
  with input_unregister_device(); input_free_device() should not be
  called in this case.
  Note that this function is also used to register managed input devices
  (ones allocated with devm_input_allocate_device()). Such managed input
  devices need not be explicitly unregistered or freed, their tear down
  is controlled by the devres infrastructure. It is also worth noting
  that tear down of managed input devices is internally a 2-step process:
  registered managed input device is first unregistered, but stays in
  memory and can still handle input_event() calls (although events will
  not be delivered anywhere). The freeing of managed input device will
  happen later, when devres stack is unwound to the point where device
  allocation was made.
 Every input device generates EV_SYNSYN_REPORT events. 
 KEY_RESERVED is not supposed to be transmitted to userspace. 
 Make sure that bitmasks not mentioned in dev->evbit are clean. 
	
	  If delay and period are pre-set by the driver, then autorepeating
	  is handled by the driver itself and we don't do it in input.c.
  input_unregister_device - unregister previously registered device
  @dev: device to be unregistered
  This function unregisters an input device. Once device is unregistered
  the caller should not try to access it as it may get freed at any moment.
		
		  We do not do input_put_device() here because it will be done
		  when 2nd devres fires up.
  input_register_handler - register a new input handler
  @handler: handler to be registered
  This function registers a new input handler (interface) for input
  devices in the system and attaches it to all input devices that
  are compatible with the handler.
  input_unregister_handler - unregisters an input handler
  @handler: handler to be unregistered
  This function disconnects a handler from its input devices and
  removes it from lists of known handlers.
  input_handler_for_each_handle - handle iterator
  @handler: input handler to iterate
  @data: data for the callback
  @fn: function to be called for each handle
  Iterate over @bus's list of devices, and call @fn for each, passing
  it @data and stop when @fn returns a non-zero value. The function is
  using RCU to traverse the list and therefore may be using in atomic
  contexts. The @fn callback is invoked from RCU critical section and
  thus must not sleep.
  input_register_handle - register a new input handle
  @handle: handle to register
  This function puts a new input handle onto device's
  and handler's lists so that events can flow through
  it once it is opened using input_open_device().
  This function is supposed to be called from handler's
  connect() method.
	
	  We take dev->mutex here to prevent race with
	  input_release_device().
	
	  Filters go to the head of the list, normal handlers
	  to the tail.
	
	  Since we are supposed to be called from ->connect()
	  which is mutually exclusive with ->disconnect()
	  we can't be racing with input_unregister_handle()
	  and so separate lock is not needed here.
  input_unregister_handle - unregister an input handle
  @handle: handle to unregister
  This function removes input handle from device's
  and handler's lists.
  This function is supposed to be called from handler's
  disconnect() method.
	
	  Take dev->mutex to prevent race with input_release_device().
  input_get_new_minor - allocates a new input minor number
  @legacy_base: beginning or the legacy range to be searched
  @legacy_num: size of legacy range
  @allow_dynamic: whether we can also take ID from the dynamic range
  This function allocates a new device minor for from input major namespace.
  Caller can request legacy minor by specifying @legacy_base and @legacy_num
  parameters and whether ID can be allocated from dynamic range if there are
  no free IDs in legacy range.
	
	  This function should be called from input handler's ->connect()
	  methods, which are serialized with input_mutex, so no additional
	  locking is needed here.
  input_free_minor - release previously allocated minor
  @minor: minor to be released
  This function releases previously allocated input minor so that it can be
  reused later.
 SPDX-License-Identifier: GPL-2.0-only
   Input Power Event -> APM Bridge
   Copyright (c) 2007 Richard Purdie
 only react on key down events 
 SPDX-License-Identifier: GPL-2.0-only
   Generic helper functions for touchscreens and other two-dimensional
   pointing devices
   Copyright (c) 2014 Sebastian Reichel <sre@kernel.org>
  touchscreen_parse_properties - parse common touchscreen properties
  @input: input device that should be parsed
  @multitouch: specifies whether parsed properties should be applied to
 	single-touch or multi-touch axes
  @prop: pointer to a struct touchscreen_properties into which to store
 	axis swap and invert info for use with touchscreen_report_x_y();
 	or %NULL
  This function parses common properties for touchscreens and sets up the
  input device accordingly. The function keeps previously set up default
  values if no value is specified.
  touchscreen_set_mt_pos - Set input_mt_pos coordinates
  @pos: input_mt_pos to set coordinates of
  @prop: pointer to a struct touchscreen_properties
  @x: X coordinate to store in pos
  @y: Y coordinate to store in pos
  Adjust the passed in x and y values applying any axis inversion and
  swapping requested in the passed in touchscreen_properties and store
  the result in a struct input_mt_pos.
  touchscreen_report_pos - Report touchscreen coordinates
  @input: input_device to report coordinates for
  @prop: pointer to a struct touchscreen_properties
  @x: X coordinate to report
  @y: Y coordinate to report
  @multitouch: Report coordinates on single-touch or multi-touch axes
  Adjust the passed in x and y values applying any axis inversion and
  swapping requested in the passed in touchscreen_properties and then
  report the resulting coordinates on the input_dev's x and y axis.
 SPDX-License-Identifier: GPL-2.0-only
  Generic support for sparse keymaps
  Copyright (c) 2009 Dmitry Torokhov
  Derived from wistron button driver:
  Copyright (C) 2005 Miloslav Trmac <mitr@volny.cz>
  Copyright (C) 2005 Bernhard Rosenkraenzer <bero@arklinux.org>
  Copyright (C) 2005 Dmitry Torokhov <dtor@mail.ru>
  sparse_keymap_entry_from_scancode - perform sparse keymap lookup
  @dev: Input device using sparse keymap
  @code: Scan code
  This function is used to perform &struct key_entry lookup in an
  input device using sparse keymap.
  sparse_keymap_entry_from_keycode - perform sparse keymap lookup
  @dev: Input device using sparse keymap
  @keycode: Key code
  This function is used to perform &struct key_entry lookup in an
  input device using sparse keymap.
  sparse_keymap_setup - set up sparse keymap for an input device
  @dev: Input device
  @keymap: Keymap in form of array of &key_entry structures ending
 	with %KE_END type entry
  @setup: Function that can be used to adjust keymap entries
 	depending on device's needs, may be %NULL
  The function calculates size and allocates copy of the original
  keymap after which sets up input device event bits appropriately.
  The allocated copy of the keymap is automatically freed when it
  is no longer needed.
 to account for the last KE_END entry 
  sparse_keymap_report_entry - report event corresponding to given key entry
  @dev: Input device for which event should be reported
  @ke: key entry describing event
  @value: Value that should be reported (ignored by %KE_SW entries)
  @autorelease: Signals whether release event should be emitted for %KE_KEY
 	entries right after reporting press event, ignored by all other
 	entries
  This function is used to report input event described by given
  &struct key_entry.
  sparse_keymap_report_event - report event corresponding to given scancode
  @dev: Input device using sparse keymap
  @code: Scan code
  @value: Value that should be reported (ignored by %KE_SW entries)
  @autorelease: Signals whether release event should be emitted for %KE_KEY
 	entries right after reporting press event, ignored by all other
 	entries
  This function is used to perform lookup in an input device using sparse
  keymap and report corresponding event. Returns %true if lookup was
  successful and %false otherwise.
 Report an unknown key event as a debugging aid 
 SPDX-License-Identifier: GPL-2.0-only
  Input Multitouch Library
  Copyright (c) 2008-2010 Henrik Rydberg
  input_mt_init_slots() - initialize MT input slots
  @dev: input device supporting MT events and finger tracking
  @num_slots: number of slots used by the device
  @flags: mt tasks to handle in core
  This function allocates all necessary memory for MT slot handling
  in the input device, prepares the ABS_MT_SLOT and
  ABS_MT_TRACKING_ID events for use and sets up appropriate buffers.
  Depending on the flags set, it also performs pointer emulation and
  frame synchronization.
  May be called repeatedly. Returns -EINVAL if attempting to
  reinitialize with a different number of slots.
 Mark slots as 'inactive' 
 Mark slots as 'unused' 
  input_mt_destroy_slots() - frees the MT slots of the input device
  @dev: input device with allocated MT slots
  This function is only needed in error path as the input core will
  automatically free the MT slots when the device is destroyed.
  input_mt_report_slot_state() - report contact state
  @dev: input device with allocated MT slots
  @tool_type: the tool type to use in this slot
  @active: true if contact is active, false otherwise
  Reports a contact via ABS_MT_TRACKING_ID, and optionally
  ABS_MT_TOOL_TYPE. If active is true and the slot is currently
  inactive, or if the tool type is changed, a new tracking id is
  assigned to the slot. The tool type is only reported if the
  corresponding absbit field is set.
  Returns true if contact is active.
  input_mt_report_finger_count() - report contact count
  @dev: input device with allocated MT slots
  @count: the number of contacts
  Reports the contact count via BTN_TOOL_FINGER, BTN_TOOL_DOUBLETAP,
  BTN_TOOL_TRIPLETAP and BTN_TOOL_QUADTAP.
  The input core ensures only the KEY events already setup for
  this device will produce output.
  input_mt_report_pointer_emulation() - common pointer emulation
  @dev: input device with allocated MT slots
  @use_count: report number of active contacts as finger count
  Performs legacy pointer emulation via BTN_TOUCH, ABS_X, ABS_Y and
  ABS_PRESSURE. Touchpad finger count is emulated if use_count is true.
  The input core ensures only the KEY and ABS axes already setup for
  this device will produce output.
			
			  Force reporting BTN_TOOL_FINGER for devices that
			  only report general hover (and not per-contact
			  distance) when contact is in proximity but not
			  on the surface.
  input_mt_drop_unused() - Inactivate slots not seen in this frame
  @dev: input device with allocated MT slots
  Lift all slots not seen since the last call to this function.
  input_mt_sync_frame() - synchronize mt frame
  @dev: input device with allocated MT slots
  Close the frame and prepare the internal state for a new one.
  Depending on the flags, marks unused slots as inactive and performs
  pointer emulation.
 Improve convergence for positive matrices by penalizing overcovers 
  input_mt_assign_slots() - perform a best-match assignment
  @dev: input device with allocated MT slots
  @slots: the slot assignment to be filled
  @pos: the position array to match
  @num_pos: number of positions
  @dmax: maximum ABS_MT_POSITION displacement (zero for infinite)
  Performs a best match against the current contacts and returns
  the slot assignment list. New contacts are assigned to unused
  slots.
  The assignments are balanced so that all coordinate displacements are
  below the euclidian distance dmax. If no such assignment can be found,
  some contacts are assigned to unused slots.
  Returns zero on success, or negative error in case of failure.
  input_mt_get_slot_by_key() - return slot matching key
  @dev: input device with allocated MT slots
  @key: the key of the sought slot
  Returns the slot of the given key, if it exists, otherwise
  set the key on the first unused slot and return.
  If no available slot can be found, -1 is returned.
  Note that for this function to work properly, input_mt_sync_frame() has
  to be called at each frame.
 SPDX-License-Identifier: GPL-2.0-or-later
  Joystick device driver for the input driver suite.
  Copyright (c) 1999-2002 Vojtech Pavlik
  Copyright (c) 1999 Colin Van Dyke
 protects client_list 
 protects access to buffer, head and tail 
	
	  IRQs already disabled, just acquire the lock
  Wake up users waiting for IO so they can disconnect from
  dead device.
  Old joystick interface
	
	  Get device state
	
	  Reset reader's event queue
 No kernel lock - fine 
 Validate the map. 
 Validate the map. 
 Process fixed-sized commands. 
	
	  Process variable-sized commands (the axis and button map commands
	  are considered variable-sized to decouple them from the values of
	  ABS_MAX and KEY_MAX).
 CONFIG_COMPAT 
  Mark device non-existent. This disables writes, ioctls and
  prevents new users from opening the device. Already posted
  blocking reads will stay, however new ones will fail.
 joydev is marked dead so no one else accesses joydev->open 
  These codes are copied from from hid-ids.h, unfortunately there is no common
  usb_idsbt_ids.h header.
 Avoid touchpads and touchscreens 
 Avoid tablets, digitisers and similar devices 
 Disable accelerometers on composite devices 
 sentinel  }
	
	  Virtualization (VMware, etc) and remote management (HP
	  ILO2) solutions use absolute coordinates for their virtual
	  pointing devices so that there is one-to-one relationship
	  between pointer position on the host screen and virtual
	  guest screen, and so their mice use ABS_X, ABS_Y and 3
	  primary button events. This clashes with what joydev
	  considers to be joysticks (a device with at minimum ABS_X
	  axis).
	 
	  Here we are trying to separate absolute mice from
	  joysticks. A device is, for joystick detection purposes,
	  considered to be an absolute mouse if the following is
	  true:
	 
	  1) Event types are exactly
	       EV_ABS, EV_KEY and EV_SYN
	     or
	       EV_ABS, EV_KEY, EV_SYN and EV_MSC
	     or
	       EV_ABS, EV_KEY, EV_SYN, EV_MSC and EV_REL.
	  2) Absolute events are exactly ABS_X and ABS_Y.
	  3) Keys are exactly BTN_LEFT, BTN_RIGHT and BTN_MIDDLE.
	  4) Device is not on "Amiga" bus.
 VMware VMMouse, HP ILO2 
 HP ILO2, AMI BMC firmware 
 VMware Virtual USB Mouse, QEMU USB Tablet, ATEN BMC firmware 
	
	  Amiga joystick (amijoy) historically uses leftmiddleright
	  button events.
 Disable blacklisted devices 
 Avoid absolute mice 
 Normalize device number if it falls into legacy range 
 Terminating entry 
 SPDX-License-Identifier: GPL-2.0-only
  Support for polling mode for input devices.
 msec 
 msec 
 msec 
 Only start polling if polling is enabled 
		
		  We want to show message even though kzalloc() may have
		  printed backtrace as knowing what instance of input
		  device we were dealing with is helpful.
 SYSFS interface 
 SPDX-License-Identifier: GPL-2.0-or-later
   Force feedback support for Linux input subsystem
   Copyright (c) 2006 Anssi Hannula <anssi.hannula@gmail.com>
   Copyright (c) 2006 Dmitry Torokhov <dtor@mail.ru>
 #define DEBUG 
  Check that the effect_id is a valid effect and whether the user
  is the owner
  Checks whether 2 effects can be combined together
  Convert an effect into compatible one
		
		  calculate magnitude of sine wave as average of rumble's
		  23 of strong magnitude and 13 of weak magnitude
 Let driver handle conversion 
  input_ff_upload() - upload effect into force-feedback device
  @dev: input device
  @effect: effect to be uploaded
  @file: owner of the effect
  Erases the effect if the requester is also the effect owner. The mutex
  should already be locked before calling this function.
  input_ff_erase - erase a force-feedback effect from device
  @dev: input device to erase effect from
  @effect_id: id of the effect to be erased
  @file: purported owner of the request
  This function erases a force-feedback effect from specified device.
  The effect will only be erased if it was uploaded through the same
  file handle that is requesting erase.
  input_ff_flush - erase all effects owned by a file handle
  @dev: input device to erase effect from
  @file: purported owner of the effects
  This function erases all force-feedback effects associated with
  the given owner from specified device. Note that @file may be %NULL,
  in which case all effects will be erased.
  input_ff_event() - generic handler for force-feedback events
  @dev: input device to send the effect to
  @type: event type (anything but EV_FF is ignored)
  @code: event code
  @value: event value
  input_ff_create() - create force-feedback device
  @dev: input device supporting force-feedback
  @max_effects: maximum number of effects supported by the device
  This function allocates all necessary memory for a force feedback
  portion of an input device and installs all default handlers.
  @dev->ffbit should be already set up before calling this function.
  Once ff device is created you need to setup its upload, erase,
  playback and other handlers before registering input device
 overflow 
 Copy "true" bits into ff device bitmap 
 we can emulate RUMBLE with periodic effects 
  input_ff_destroy() - frees force feedback portion of input device
  @dev: input device supporting force feedback
  This function is only needed in error path as input core will
  automatically free force feedback structures when device is
  destroyed.
 SPDX-License-Identifier: GPL-2.0-only
  Event char devices, giving access to raw input device events.
  Copyright (c) 1999-2002 Vojtech Pavlik
 protects client_list 
 [future] position of the first element of next packet 
 protects access to buffer, head and tail 
 EV_SYN==0 is EV_CNT, _not_ SYN_CNT, see EVIOCGBIT 
 requires the buffer lock to be held 
 EV_SYN and unknown codes are never filtered 
 first test whether the type is filtered 
 unknown values are never filtered 
 flush queued events of type @type, caller must hold client->buffer_lock 
 init to 1 so a leading SYN_REPORT will not be dropped 
 drop matched entry 
 drop empty SYN_REPORT groups 
 move entry to fill the gap 
 drop queue but keep our SYN_DROPPED event 
		
		  Flush pending events and queue SYN_DROPPED event,
		  but only if the queue is not empty.
		
		  This effectively "drops" all unconsumed events, leaving
		  EV_SYNSYN_DROPPED plus the newest event in the queue.
 Interrupts are disabled, just acquire the lock. 
 drop empty SYN_REPORT 
  Pass incoming events to all connected clients.
  Pass incoming event to all connected clients.
  Grabs an event device (along with underlying input device).
  This function is called with evdev->mutex taken.
  Wake up users waiting for IO so they can disconnect from
  dead device.
		
		  count == 0 is special - no IO is done but we check
		  for error conditions (see above).
 No kernel lock - fine 
 __BIG_ENDIAN 
 CONFIG_COMPAT 
 legacy case 
  If we transfer state to the user, we should flush all pending events
  of the same type from the client's queue. Otherwise, they might end up
  with duplicate events, which can screw up client's state tracking.
  If bits_to_user fails after flushing the queue, we queue a SYN_DROPPED
  event so user-space will notice missing events.
  LOCKING:
  We need to take event_lock before buffer_lock to avoid dead-locks. But we
  need the even_lock only to guarantee consistent state. We can safely release
  it while flushing the queue. This allows input-core to handle filters while
  we flush the queue.
 must be called with evdev-mutex held 
 we allow unknown types and 'codes_size > size' for forward-compat 
 must be called with evdev-mutex held 
 we allow unknown types and 'codes_size > size' for forward-compat 
 fake mask with all bits set 
 First we check for fixed-length commands 
 Now check variable-length commands 
 Multi-number variable-length handlers 
 We can't change number of reserved MT slots 
			
			  Take event lock to ensure that we are not
			  changing device parameters in the middle
			  of event.
  Mark device non-existent. This disables writes, ioctls and
  prevents new users from opening the device. Already posted
  blocking reads will stay, however new ones will fail.
 evdev is marked dead so no one else accesses evdev->open 
  Create new evdev device. Note that input core serializes calls
  to connect and disconnect.
 Normalize device number if it falls into legacy range 
 Matches all devices 
 Terminating zero entry 
 SPDX-License-Identifier: GPL-2.0-only
  LED support for the input layer
  Copyright 2010-2015 Samuel Thibault <samuel.thibault@ens-lyon.org>
 One of LED_ constants 
 SPDX-License-Identifier: GPL-2.0-only
  32bit compatibility wrappers for the input subsystem.
  Very heavily based on evdev.c - Copyright (c) 1999-2002 Vojtech Pavlik
		
		  It so happens that the pointer which needs to be changed
		  is the last field in the structure, so we can retrieve the
		  whole thing and replace just the pointer.
 CONFIG_COMPAT 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1999-2001 Vojtech Pavlik
   Input driver event debug module - dumps all events into syslog
 Matches all devices 
 Terminating zero entry 
 SPDX-License-Identifier: GPL-2.0-only
  Helpers for matrix keyboard bindings
  Copyright (C) 2012 Google, Inc
  Author:
 	Olof Johansson <olof@lixom.net>
  matrix_keypad_parse_properties() - Read properties of matrix keypad
  @dev: Device containing properties
  @rows: Returns number of matrix rows
  @cols: Returns number of matrix columns
  @return 0 if OK, <0 on error
  matrix_keypad_build_keymap - convert platform keymap into matrix keymap
  @keymap_data: keymap supplied by the platform code
  @keymap_name: name of device tree property containing keymap (if device
 	tree support is enabled).
  @rows: number of rows in target keymap array
  @cols: number of cols in target keymap array
  @keymap: expanded version of keymap that is suitable for use by
  matrix keyboard driver
  @input_dev: input devices for which we are setting up the keymap
  This function converts platform keymap (encoded with KEY() macro) into
  an array of keycodes that is suitable for using in a standard matrix
  keyboard driver that uses row and col as indices.
  If @keymap_data is not supplied and device tree support is enabled
  it will attempt load the keymap from property specified by @keymap_name
  argument (or "linux,keymap" if @keymap_name is %NULL).
  If @keymap is %NULL the function will automatically allocate managed
  block of memory to store the keymap. This memory will be associated with
  the parent device and automatically freed when device unbinds from the
  driver.
  Callers are expected to set up input_dev->dev.parent before calling this
  function.
 SPDX-License-Identifier: GPL-2.0-only
  Input driver to ExplorerPS2 device driver module.
  Copyright (c) 1999-2002 Vojtech Pavlik
  Copyright (c) 2004      Dmitry Torokhov
 protects client_list 
 use X size for ABS_Y to keep the same scale 
 Just acquire the lock, interrupts already disabled 
			
			  Toggle left button to emulate tap.
			  We rely on the fact that mousedev_mix always has 0
			  motion packet so we won't mess current position.
 Ignore joysticks 
				
				  Input system eats duplicate events,
				  but we need all of them to do correct
				  averaging so apply present one forward
  Open all available devices so they can all be multiplexed in one.
  stream. Note that this function is called with mousedev_mix->mutex
  held.
  Close all devices that were opened as part of multiplexed
  device. Note that this function is called with mousedev_mix->mutex
  held.
 ACK 
 Poll 
 account for leading ACK 
 Get ID 
 Get info 
 Reset 
 No kernel lock - fine 
  Mark device non-existent. This disables writes, ioctls and
  prevents new users from opening the device. Already posted
  blocking reads will stay, however new ones will fail.
  Wake up users waiting for IO so they can disconnect from
  dead device.
 mousedev is marked dead so no one else accesses mousedev->open 
 Normalize device number if it falls into legacy range 
	},	 A mouse like device, at least one button,
 A separate scrollwheel 
	},	 A tablet like device, at least touch detection,
 A touchpad 
	},	 Mouse-like device with absolute X and Y but ordinary
 Terminating entry 
 SPDX-License-Identifier: GPL-2.0-or-later
   Force feedback support for memoryless devices
   Copyright (c) 2006 Anssi Hannula <anssi.hannula@gmail.com>
   Copyright (c) 2006 Dmitry Torokhov <dtor@mail.ru>
 #define DEBUG 
 Number of effects handled with memoryless devices 
 Envelope update interval in ms 
 effect state (STARTED, PLAYING, etc) 
 loop count of the effect 
 start time 
 stop time 
 last time the effect was sent 
  Check for the next time envelope requires an update on memoryless devices
 check when fading should start 
 already fading, advance to next checkpoint 
  Apply an envelope to a value
  Return the type the effect has to be converted into (memless devices)
  Only leftright direction should be used (underover 0x8000) for
  forwardreverse motor direction (to keep calculation fast & simple).
  Combine two effects and apply gain.
		
		  here we abuse ff_ramp to hold x and y of constant force
		  If in future any driver wants something else than x and y
		  in s8, this should be changed to something more generic
 here we also scale it 0x7fff => 0xffff 
  Because memoryless devices have only one effect per effect type active
  at one time we have to combine multiple effects into one
		
		  here we have started effects that are either
		  currently playing (and may need be aborted)
		  or need to start playing.
  Sets requested gain for FF effects. Called with dev->event_lock held.
  Startstop specified FF effect. Called with dev->event_lock held.
	
	  Even though we stop all playing effects when tearing down
	  an input device (via input_device_flush() that calls into
	  input_ff_flush() that stops and erases all effects), we
	  do not actually stop the timer, and therefore we should
	  do it here.
  input_ff_create_memless() - create memoryless force-feedback device
  @dev: input device supporting force-feedback
  @data: driver-specific data to be passed into @play_effect
  @play_effect: driver-specific method for playing FF effect
 we can emulate periodic effects with RUMBLE 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2012-2015 Synaptics Incorporated
  Copyright (C) 2016 Zodiac Inflight Innovations
 F54 data offsets 
  The smbus protocol can read only 32 bytes max at a time.
  But this should be fine for i2cspi as well.
 F54 commands 
 F54 capabilities 
  enum rmi_f54_report_type - RMI4 F54 report types
  @F54_REPORT_NONE:	No Image Report.
  @F54_8BIT_IMAGE:	Normalized 8-Bit Image Report. The capacitance variance
 			from baseline for each pixel.
  @F54_16BIT_IMAGE:	Normalized 16-Bit Image Report. The capacitance variance
 			from baseline for each pixel.
  @F54_RAW_16BIT_IMAGE:
 			Raw 16-Bit Image Report. The raw capacitance for each
 			pixel.
  @F54_TRUE_BASELINE:	True Baseline Report. The baseline capacitance for each
 			pixel.
  @F54_FULL_RAW_CAP:   Full Raw Capacitance Report. The raw capacitance with
 			low reference set to its minimum value and high
 			reference set to its maximum value.
  @F54_FULL_RAW_CAP_RX_OFFSET_REMOVED:
 			Full Raw Capacitance with Receiver Offset Removed
 			Report. Set Low reference to its minimum value and high
 			references to its maximum value, then report the raw
 			capacitance for each pixel.
  @F54_MAX_REPORT_TYPE:
 			Maximum number of Report Types.  Used for sanity
 			checking.
 V4L2 support 
  Basic checks on report_type to ensure we write a valid type
  to the sensor.
 Remaining values are zero via kzalloc 
 Write Report Type into F54_AD_Data0 
	
	  Small delay after disabling interrupts to avoid race condition
	  in firmare. This value is a bit higher than absolutely necessary.
	  Should be removed once issue is resolved in firmware.
 get frame data 
 V4L2 structures 
 retry won't help 
	
	  Need to check if command has completed.
	  If not try again later.
 register video device 
 initialize the queue 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015-2016 Red Hat
  Copyright (C) 2015 Lyude Paul <thatslyude@gmail.com>
	
	  The first generation of image sensors don't have a second part to
	  their f03 query, as such we have to set some of these values manually
	
	  Consume any pending data. Some devices like to spam with
	  0xaa 0x00 announcements which may confuse us as we try to
	  probe the device.
		
		  We must be re-configuring the sensor, just enable
		  interrupts for this function.
 First grab the data passed by the transport device 
 Grab all of the data registers, and check them for data 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2011-2016 Synaptics Incorporated
  Copyright (c) 2011 Unixphere
  struct rmi_i2c_xport - stores information for i2c communication
  @xport: The transport interface structure
  @client: The I2C client device structure
  @page_mutex: Locks current page to avoid changing pages in unexpected ways.
  @page: Keeps track of the current virtual page
  @tx_buf: Buffer used for transmitting data to the sensor over i2c.
  @tx_buf_size: Size of the buffer
  @supplies: Array of voltage regulators
  @startup_delay: Milliseconds to pause after powering up the regulators
  rmi_set_page - Set RMI page
  @xport: The pointer to the rmi_transport_dev struct
  @page: The new page address.
  RMI devices have 16-bit addressing, but some of the transport
  implementations (like SMBus) only have 8-bit addressing. So RMI implements
  a page address at 0xff of every page so we can reliable page addresses
  every 256 registers.
  The page_mutex lock must be held when this function is entered.
  Returns zero on success, non-zero on failure.
 success 
	
	  Setting the page to zero will (a) make sure the PSR is in a
	  known state, and (b) make sure we can talk to the device.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2007-2016, Synaptics Incorporated
  Copyright (C) 2016 Zodiac Inflight Innovations
		
		  We only need to erase config if we haven't updated
		  firmware.
	
	  The status is the percentage complete, or once complete,
	  zero for success or a negative return code.
 Enter flash mode 
 Tear down functions and re-probe 
 Perform firmware update 
 Re-probe 
 Driver already bound, so enable ATTN now. 
 v5 code only supported version 0, try V7 probe 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2012-2016 Synaptics Incorporated
 Defs for Query 0 
 Defs for Query 1 
 Defs for Control Registers 
 Query Data 
 Control Register Data 
 Read the gpi led data. 
 can happen if gpio_data.disable is set 
 Try [re-]establish link to F03. 
 Write Control Register values back to device 
	
	  ctrl2 -> dir == 0 -> input mode
	  ctrl3 -> data == 1 -> actual button
	
	  Buttonpad could be also inferred from f30->has_mech_mouse_btns,
	  but I am not sure, so use only the pdata info and the number of
	  mapped buttons.
 control 6 uses a byte per gpioled 
 control 7 uses a byte per gpioled 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2011-2016 Synaptics Incorporated
  Copyright (c) 2011 Unixphere
 maximum ABS_MT_POSITION displacement (in mm) 
 we keep the previous values if the finger is released 
	
	  Here checking if X offset or y offset are specified is
	  redundant. We just add the offsets or clip the values.
	 
	  Note: offsets need to be applied before clipping occurs,
	  or we could get funny values that are outside of
	  clipping boundaries.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2012-2015 Synaptics Incorporated
  Copyright (C) 2016 Zodiac Inflight Innovations
 F55 data offsets 
 Only read required query registers 
 F55 capabilities 
		
		  Calculate the number of enabled receive and transmit
		  electrodes by reading F55:Ctrl1 (sensor receiver assignment)
		  and F55:Ctrl2 (sensor transmitter assignment). The number of
		  enabled electrodes is the sum of all field entries with a
		  value other than 0xff.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2015 - 2016 Red Hat, Inc
  Copyright (c) 2011, 2012 Synaptics Incorporated
  Copyright (c) 2011 Unixphere
 8 entry of 4 bytes each 
 Check if for SMBus new version device by reading version byte. 
 SMB block write - wrapper over ic2_smb_write_block 
  The function to get command code for smbus operations and keeps
  records to the driver mapping table
 constructs mapping table data entry. 4 bytes each entry 
		
		  if not written to device mapping table
		  clear the driver mapping table records
 save to the driver level mapping table 
		
		  break into 32 bytes chunks to write get command code
 prepare to write next block of bytes 
 SMB block read - wrapper over ic2_smb_read_block 
 break into 32 bytes chunks to write get command code 
 prepare to read next block of bytes 
 the mapping table has been flushed, discard the current one 
 we need to get the smbus version to activate the touchpad 
	
	  we do not call the actual reset command, it has to be handled in
	  PS2 or there will be races between PS2 and SMBus.
	  PS2 should ensure that a psmouse_reset is called before
	  intializing the device and after it has been removed to be in a known
	  state.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2012-2016 Synaptics Incorporated
 F12 Data1 describes sensed objects 
 F12 Data5 describes finger ACM 
 F12 Data5 describes Pen 
 F12 Data9 reports relative data 
 Units 1128 sensor pitch 
 Skip over sensor flags 
			
			  The byte containing the EnableDribble bit will be
			  in either byte 0 or byte 2 of control 20. Depending
			  on the existence of subpacket 0. If control 20 is
			  larger then 3 bytes, just read the first 3.
	
	  Figure out what data is contained in the data registers. HID devices
	  may have registers defined, but their data is not reported in the
	  HID attention report. Registers which are not reported in the HID
	  attention report check to see if the device is receiving data from
	  HID attention reports.
 allocate the in-kernel tracking buffers 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2011-2016 Synaptics Incorporated
  Copyright (c) 2011 Unixphere
  RMI Physical devices
  Physical RMI device consists of several functions serving particular
  purpose. For example F11 is a 2D touch sensor while F01 is a generic
  function present in every RMI device.
  rmi_register_transport_device - register a transport device connection
  on the RMI bus.  Transport drivers provide communication from the devices
  on a bus (such as SPI, I2C, and so on) to the RMI4 sensor.
  @xport: the transport device to register
  rmi_unregister_transport_device - unregister a transport device connection
  @xport: the transport driver to unregister
 Function specific stuff 
  rmi_register_function_handler - register a handler for an RMI function
  @handler: RMI handler that should be registered.
  @owner: pointer to module that implements the handler
  @mod_name: name of the module implementing the handler
  This function performs additional setup of RMI function handler and
  registers it with the RMI core so that it can be bound to
  RMI function devices.
  rmi_unregister_function_handler - unregister given RMI function handler
  @handler: RMI handler that should be unregistered.
  This function unregisters given function handler from RMI core which
  causes it to be unbound from the function devices.
 Bus specific stuff 
 First see if types are not compatible 
	
	  We should only ever get here if all drivers are unloaded, so
	  all we have to do at this point is unregister ourselves.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2012-2020 Synaptics Incorporated
 Defs for Query 0 
 Query Data 
 Try [re-]establish link to F03. 
 gpio exist && direction input 
 Query1 -> gpio exist 
 Ctrl1 -> gpio direction 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2016, Zodiac Inflight Innovations
  Copyright (c) 2007-2016, Synaptics Incorporated
  Copyright (C) 2012 Alexandra Chin <alexandra.chin@tw.synaptics.com>
  Copyright (C) 2012 Scott Lin <scott.lin@tw.synaptics.com>
 Eat leading zeros 
 Empty ;
 address of top level container 
 address of top level container content 
 Read bootloader version 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2011-2016 Synaptics Incorporated
  Copyright (c) 2011 Unixphere
  This driver provides the core support for a single RMI4-based device.
  The RMI4 specification can be found here (URL split for line length):
  http:www.synaptics.comsitesdefaultfiles
       511-000136-01-Rev-E-RMI4-Interfacing-Guide.pdf
 Doing it in the reverse order so F01 will be removed last 
	
	  At this point, irq_status has all bits that are set in the
	  interrupt status register and are enabled.
  rmi_driver_set_input_params - set input device id and other data.
  @rmi_dev: Pointer to an RMI device
  @input: Pointer to input device
	
	  Can get called before the driver is fully ready to deal with
	  this situation.
	
	  Count number of empty PDT pages. If a gap of two pages
	  or more is found, stop scanning.
	
	  The first register of the register descriptor is the size of
	  the register descriptor's presense register.
	
	  The presence register contains the size of the register structure
	  and a bitmap which identified which packet registers are present
	  for this particular register type (ie query, control, or data).
	
	  Allocate a temporary buffer to hold the register structure.
	  I'm not using devm_kzalloc here since it will not be retained
	  after exiting this function
	
	  The register structure contains information about every packet
	  register of this type. This includes the size of the packet
	  register and a bitmap of all subpackets contained in the packet
	  register.
 Compute the register offset relative to the base address 
 F01 should always be on page 0. If we don't find it there, fail. 
	
	  Call rmi_process_interrupt_requests() after enabling irq,
	  otherwise we may lose interrupt on edge-triggered systems.
 make sure the fifo is clean 
	
	  We need to count the IRQs and allocate their storage before scanning
	  the PDT and creating the function entries, because adding a new
	  function can trigger events that result in the IRQ related storage
	  being accessed.
 Allocate and register a linear revmap irq_domain 
	
	  Right before a warm boot, the sensor might be in some unusual state,
	  such as F54 diagnostics, or F34 bootloader mode after a firmware
	  or configuration update.  In order to clear the sensor to a known
	  state andor apply any updates, we issue a initial reset to clear any
	  previous settings and force it into normal operation.
	 
	  We have to do this before actually building the PDT because
	  the reflash updates (if any) might cause various registers to move
	  around.
	 
	  For a number of reasons, this initial reset may fail to return
	  within the specified time, but we'll still be able to bring up the
	  driver normally after that failure.  This occurs most commonly in
	  a cold boot situation (where then firmware takes longer to come up
	  than from a warm boot) and the reset_delay_ms in the platform data
	  has been set too short to accommodate that.  Since the sensor will
	  eventually come up and be usable, we don't want to just fail here
	  and leave the customer's device unusable.  So we warn them, and
	  continue processing.
		
		  we'll print out a warning and continue since
		  failure to get the PDT properties is not a cause to fail
		
		  The transport driver already has an input device.
		  In some cases it is preferable to reuse the transport
		  devices input device instead of creating a new one here.
		  One example is some HID touchpads report "pass-through"
		  button events are not reported by rmi registers.
 Driver already bound, so enable ATTN now. 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2011-2016 Synaptics Incorporated
  Copyright (c) 2011 Unixphere
 Force a firmware reset of the sensor 
 Various F01_RMI_QueryX bits 
 From Query 00 through 20 
 YYYYMMDD + '\0' 
 F01 device status bits 
 Most recent device status event 
 The device has lost its configuration for some reason. 
 The device is in bootloader mode 
 Control register bits 
  Sleep mode controls power management on the device and affects all
  functions of the device.
  This bit disables whatever sleep mode may be selected by the sleep_mode
  field and forces the device to run at full power without sleeping.
  When this bit is set, the touch controller employs a noise-filtering
  algorithm designed for use with a connected battery charger.
  Sets the report rate for the device. The effect of this setting is
  highly product dependent. Check the spec sheet for your particular
  touch sensor.
  Written by the host as an indicator that the device has been
  successfully configured.
  struct f01_device_control - controls basic sensor functions
  @ctrl0: see the bit definitions above.
  @doze_interval: controls the interval between checks for finger presence
 	when the touch sensor is in doze mode, in units of 10ms.
  @wakeup_threshold: controls the capacitance threshold at which the touch
 	sensor will decide to wake up from that low power state.
  @doze_holdoff: controls how long the touch sensor waits after the last
 	finger lifts before entering the doze state, in units of 100ms.
 Now parse what we got 
	
	  Set the configured bit and (optionally) other important stuff
	  in the device control register.
	
	  Sleep mode might be set as a hangover from a system crash or
	  reboot without power cycle.  If so, clear it so the sensor
	  is certain to function.
 Dummy read in order to clear irqs 
 Advance to interrupt control registers, then skip over them. 
 read control register 
 Note that the bus device is used, not the F01 device 
		
		  Do not allow user unbinding F01 as it is critical
		  function.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2011-2015 Synaptics Incorporated
  Copyright (c) 2011 Unixphere
  A note about RMI4 F11 register structure.
  The properties for a given sensor are described by its query registers.  The
  number of query registers and the layout of their contents are described by
  the F11 device queries as well as the sensor query information.
  Similarly, each sensor has control registers that govern its behavior.  The
  size and layout of the control registers for a given sensor can be determined
  by parsing that sensors query registers.
  And in a likewise fashion, each sensor has data registers where it reports
  its touch data and other interesting stuff.  The size and layout of a
  sensors data registers must be determined by parsing its query registers.
  The short story is that we need to read and parse a lot of query
  registers in order to determine the attributes of a sensor. Then
  we need to use that data to compute the size of the control and data
  registers for sensor.
  The end result is that we have a number of structs that aren't used to
  directly generate the input events, but their size, location and contents
  are critical to determining where the data we are interested in lives.
  At this time, the driver does not yet comprehend all possible F11
  configuration options, but it should be sufficient to cover 99% of RMI4 F11
  devices currently in the field.
 maximum ABS_MT_POSITION displacement (in mm) 
  Writing this to the F11 command register will cause the sensor to
  calibrate to the current capacitive state.
 Defs for Query 1 
 Defs for Query 2, 3, and 4. 
 Defs for Query 5 
 Defs for Query 7 
 Defs for Query 8 
 Defs for Query 9. 
 Defs for Query 10. 
 Defs for Query 11 
 Defs for Query 12. 
 Defs for Query 13. 
 Defs for Query 14. 
  struct f11_2d_sensor_queries - describes sensor capabilities
  Query registers 1 through 4 are always present.
  @nr_fingers: describes the maximum number of fingers the 2-D sensor
 	supports.
  @has_rel: the sensor supports relative motion reporting.
  @has_abs: the sensor supports absolute poition reporting.
  @has_gestures: the sensor supports gesture reporting.
  @has_sensitivity_adjust: the sensor supports a global sensitivity
 	adjustment.
  @configurable: the sensor supports various configuration options.
  @nr_x_electrodes:  the maximum number of electrodes the 2-D sensor
 	supports on the X axis.
  @nr_y_electrodes:  the maximum number of electrodes the 2-D sensor
 	supports on the Y axis.
  @max_electrodes: the total number of X and Y electrodes that may be
 	configured.
  Query 5 is present if the has_abs bit is set.
  @abs_data_size: describes the format of data reported by the absolute
 	data source.  Only one format (the kind used here) is supported at this
 	time.
  @has_anchored_finger: then the sensor supports the high-precision second
 	finger tracking provided by the manual tracking and motion sensitivity
 	options.
  @has_adj_hyst: the difference between the finger release threshold and
 	the touch threshold.
  @has_dribble: the sensor supports the generation of dribble interrupts,
 	which may be enabled or disabled with the dribble control bit.
  @has_bending_correction: Bending related data registers 28 and 36, and
 	control register 52..57 are present.
  @has_large_object_suppression: control register 58 and data register 28
 	exist.
  @has_jitter_filter: query 13 and control 73..76 exist.
  Query 6 is present if the has_rel it is set.
  @f11_2d_query6: this register is reserved.
  Gesture information queries 7 and 8 are present if has_gestures bit is set.
  @has_single_tap: a basic single-tap gesture is supported.
  @has_tap_n_hold: tap-and-hold gesture is supported.
  @has_double_tap: double-tap gesture is supported.
  @has_early_tap: early tap is supported and reported as soon as the finger
 	lifts for any tap event that could be interpreted as either a single
 	tap or as the first tap of a double-tap or tap-and-hold gesture.
  @has_flick: flick detection is supported.
  @has_press: press gesture reporting is supported.
  @has_pinch: pinch gesture detection is supported.
  @has_chiral: chiral (circular) scrolling  gesture detection is supported.
  @has_palm_det: the 2-D sensor notifies the host whenever a large conductive
 	object such as a palm or a cheek touches the 2-D sensor.
  @has_rotate: rotation gesture detection is supported.
  @has_touch_shapes: TouchShapes are supported.  A TouchShape is a fixed
 	rectangular area on the sensor that behaves like a capacitive button.
  @has_scroll_zones: scrolling areas near the sensor edges are supported.
  @has_individual_scroll_zones: if 1, then 4 scroll zones are supported;
 	if 0, then only two are supported.
  @has_mf_scroll: the multifinger_scrolling bit will be set when
 	more than one finger is involved in a scrolling action.
  @has_mf_edge_motion: indicates whether multi-finger edge motion gesture
 	is supported.
  @has_mf_scroll_inertia: indicates whether multi-finger scroll inertia
 	feature is supported.
  Convenience for checking bytes in the gesture info registers.  This is done
  often enough that we put it here to declutter the conditionals
  @query7_nonzero: true if none of the query 7 bits are set
  @query8_nonzero: true if none of the query 8 bits are set
  Query 9 is present if the has_query9 is set.
  @has_pen: detection of a stylus is supported and registers F11_2D_Ctrl20
 	and F11_2D_Ctrl21 exist.
  @has_proximity: detection of fingers near the sensor is supported and
 	registers F11_2D_Ctrl22 through F11_2D_Ctrl26 exist.
  @has_palm_det_sensitivity:  the sensor supports the palm detect sensitivity
 	feature and register F11_2D_Ctrl27 exists.
  @has_suppress_on_palm_detect: the device supports the large object detect
 	suppression feature and register F11_2D_Ctrl27 exists.
  @has_two_pen_thresholds: if has_pen is also set, then F11_2D_Ctrl35 exists.
  @has_contact_geometry: the sensor supports the use of contact geometry to
 	map absolute X and Y target positions and registers F11_2D_Data18
 	through F11_2D_Data27 exist.
  @has_pen_hover_discrimination: if has_pen is also set, then registers
 	F11_2D_Data29 through F11_2D_Data31, F11_2D_Ctrl68., F11_2D_Ctrl69
 	and F11_2D_Ctrl72 exist.
  @has_pen_filters: if has_pen is also set, then registers F11_2D_Ctrl70 and
 	F11_2D_Ctrl71 exist.
  Touch shape info (query 10) is present if has_touch_shapes is set.
  @nr_touch_shapes: the total number of touch shapes supported.
  Query 11 is present if the has_query11 bit is set in query 0.
  @has_z_tuning: if set, the sensor supports Z tuning and registers
 	F11_2D_Ctrl29 through F11_2D_Ctrl33 exist.
  @has_algorithm_selection: controls choice of noise suppression algorithm
  @has_w_tuning: the sensor supports Wx and Wy scaling and registers
 	F11_2D_Ctrl36 through F11_2D_Ctrl39 exist.
  @has_pitch_info: the X and Y pitches of the sensor electrodes can be
 	configured and registers F11_2D_Ctrl40 and F11_2D_Ctrl41 exist.
  @has_finger_size: the default finger width settings for the sensor
 	can be configured and registers F11_2D_Ctrl42 through F11_2D_Ctrl44
 	exist.
  @has_segmentation_aggressiveness: the sensor’s ability to distinguish
 	multiple objects close together can be configured and register
 	F11_2D_Ctrl45 exists.
  @has_XY_clip: the inactive outside borders of the sensor can be
 	configured and registers F11_2D_Ctrl46 through F11_2D_Ctrl49 exist.
  @has_drumming_filter: the sensor can be configured to distinguish
 	between a fast flick and a quick drumming movement and registers
 	F11_2D_Ctrl50 and F11_2D_Ctrl51 exist.
  Query 12 is present if hasQuery12 bit is set.
  @has_gapless_finger: control registers relating to gapless finger are
 	present.
  @has_gapless_finger_tuning: additional control and data registers relating
 	to gapless finger are present.
  @has_8bit_w: larger W value reporting is supported.
  @has_adjustable_mapping: TBD
  @has_info2: the general info query14 is present
  @has_physical_props: additional queries describing the physical properties
 	of the sensor are present.
  @has_finger_limit: indicates that F11 Ctrl 80 exists.
  @has_linear_coeff_2: indicates that F11 Ctrl 81 exists.
  Query 13 is present if Query 5's has_jitter_filter bit is set.
  @jitter_window_size: used by Design Studio 4.
  @jitter_filter_type: used by Design Studio 4.
  Query 14 is present if query 12's has_general_info2 flag is set.
  @light_control: Indicates what lightled control features are present,
 	if any.
  @is_clear: if set, this is a clear sensor (indicating direct pointing
 	application), otherwise it's opaque (indicating indirect pointing).
  @clickpad_props: specifies if this is a clickpad, and if so what sort of
 	mechanism it uses
  @mouse_buttons: specifies the number of mouse buttons present (if any).
  @has_advanced_gestures: advanced driver gestures are supported.
  @x_sensor_size_mm: size of the sensor in millimeters on the X axis.
  @y_sensor_size_mm: size of the sensor in millimeters on the Y axis.
 query1 
 query2 
 query3 
 query4 
 query5 
 query 7 
 query 8 
 Query 9 
 Query 10 
 Query 11. 
 Query 12 
 Query 13 
 Query 14 
 Query 15 - 18 
 Defs for Ctrl0. 
 Defs for Ctrl1. 
 Defs for Data 8 
 Defs for Data 9 
 Handy pointers into our data buffer.
  @f_state - start of finger state registers.
  @abs_pos - start of absolute position registers (if present).
  @rel_pos - start of relative data registers (if present).
  @gest_1  - gesture flags (if present).
  @gest_2  - gesture flags & finger count (if present).
  @pinch   - pinch motion register (if present).
  @flick   - flick distance X & Y, flick time (if present).
  @rotate  - rotate motion and finger separation.
  @multi_scroll - chiral deltas for X and Y (if present).
  @scroll_zones - scroll deltas for 4 regions (if present).
 Data pertaining to F11 in general.  For per-sensor data, see struct
  f11_2d_sensor.
  @dev_query - F11 device specific query registers.
  @dev_controls - F11 device specific control registers.
  @dev_controls_mutex - lock for the control registers.
  @rezero_wait_ms - if nonzero, upon resume we will wait this many
  milliseconds before rezeroing the sensor(s).  This is useful in systems with
  poor electrical behavior on resume, where the initial calibration of the
  sensor(s) coming out of sleep state may be bogus.
  @sensors - per sensor data structures.
 Possible of having 4 fingers per f_state register 
		
		  the absolute part is made in 2 parts to allow the kernel
		  tracking to take place.
 no need to send twice the error 
 Check if F11_2D_Query7 is non-zero 
 Check if F11_2D_Query7 or F11_2D_Query8 is non-zero 
 query 8 
		
		  query 15 - 18 contain the size of the sensor
		  and query 19 - 26 contain bezel dimensions
	
	 init instance data, fill in values and create any sysfs files
		
		  If device doesn't have abs or if it has been disables
		  fallback to reporting rel data.
 allocate the in-kernel tracking buffers 
	
	  If distance threshold values are set, switch to reduced reporting
	  mode so they actually get used by the controller.
		
		  The valid data in the attention report is less then
		  expected. Only process the complete fingers.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2011-2016 Synaptics Incorporated
  Copyright (c) 2011 Unixphere
	
	  Allocate a pool of spi_transfer buffers for devices which need
	  per byte delays.
		
		  SPI needs an address. Use 0x7FF if we want to keep
		  reading from the last position of the register pointer.
  rmi_set_page - Set RMI page
  @xport: The pointer to the rmi_transport_dev struct
  @page: The new page address.
  RMI devices have 16-bit addressing, but some of the transport
  implementations (like SMBus) only have 8-bit addressing. So RMI implements
  a page address at 0xff of every page so we can reliable page addresses
  every 256 registers.
  The page_mutex lock must be held when this function is entered.
  Returns zero on success, non-zero on failure.
	
	  Setting the page to zero will (a) make sure the PSR is in a
	  known state, and (b) make sure we can talk to the device.
 SPDX-License-Identifier: BSD-2-Clause OR GPL-2.0-or-later
  Dell Wyse 3020 a.k.a. "Ariel" Power Button Driver
  Copyright (C) 2020 Lubomir Rintel
 SPDX-License-Identifier: GPL-2.0-only
  Driver for IMS Passenger Control Unit Devices
  Copyright (C) 2013 The IMS Company
 control interface's device, used for logging 
 Input and LED devices have been created 
              Buttons Input device support                          
              Gamepad Input device support                          
              PCU Communication protocol handling                   
 PCU commands 
 Pass data to bootloader 
 PCU responses 
 Originally 0xc1 
 Originally 0xc4 
 Bootloader response 
 Unsolicited, button state 
 Bits 7 through 16 
 msec 
 msec 
		
		  See if we got command completion.
		  If both the sequence and response code match save
		  the data and signal completion.
 Skip everything until we get Start Xmit 
 We know the command need not be escaped 
 Bootloader commands 
 Bootloader commands 
 originally 0xa7 
 originally 0xa8 
 Execute jump to the bootoloader 
              Firmware Update handling                              
		
		  The firmware format is messed up for some reason.
		  The address twice that of what is needed for some
		  reason and we end up overwriting half of the data
		  with the next record.
              Backlight LED device support                          
 Assume the LED is OFF 
              Sysfs attributes handling                             
	
	  Even if update failed, let's fetch the info again as we just
	  clobbered one of the fields.
	
	  If we are already in bootloader mode we can proceed with
	  flashing the firmware.
	 
	  If we are in application mode, then we need to switch into
	  bootloader mode, which will cause the device to disconnect
	  and reconnect as different device.
 Support for a separate OFN attribute group 
 We only need LSB 
 success 
 this urb is terminated, clean up 
	
	  We are using usb_bulk_msg() for sending so there is no point
	  in allocating memory with usb_alloc_coherent().
 Device does not respond to basic queries, hopeless 
		
		  Do not signal error, but do not create input nor
		  backlight devices either, let userspace figure this
		  out (flash a new firmware?).
 Same as above, punt to userspace 
 Device appears to be operable, complete initialization 
	
	  PCU-B devices, both GEN_1 and GEN_2 do not have OFN sensor
 make sure flag setting is not reordered 
 This error is not fatal, let userspace have another chance 
 Make sure our initial firmware request has completed 
	
	  See if we are dealing with control or data interface. The cleanup
	  happens when we unbind primary (control) interface.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2011 Kionix, Inc.
  Written by Chris Hudson <chudson@kionix.com>
 OUTPUT REGISTERS 
 CONTROL REGISTERS 
 CONTROL REGISTER 1 BITS 
 Data ready funtion enable bit: set during probe if using irq mode 
 DATA CONTROL REGISTER BITS 
 INTERRUPT CONTROL REGISTER 1 BITS 
 Set these during probe if using irq mode 
 INPUT_ABS CONSTANTS 
 RESUME STATE INDICES 
  The following table lists the maximum appropriate poll interval for each
  available output data rate.
 Data bytes from hardware xL, xH, yL, yH, zL, zH 
 data ready is the only possible interrupt type 
 Use the lowest ODR that can support the requested poll interval 
 ensure that PC1 is cleared before updating control registers 
 only write INT_CTRL_REG1 if in irq mode 
 turn on outputs 
 clear initial interrupt if in irq mode 
  When IRQ mode is selected, we need to provide an interface to allow the user
  to change the output data rate of the part.  For consistency, we are using
  the set_poll method, which accepts a poll interval in milliseconds, and then
  calls update_odr() while passing this value as an argument.  In IRQ mode, the
  data outputs will not be read AT the requested poll interval, rather, the
  lowest ODR that can support the requested interval.  The client application
  will be responsible for retrieving data from the input node at the desired
  interval.
 Returns currently selected poll interval (in ms) 
 Allow users to select a new poll interval (in ms) 
 Lock the device to prevent races with openclose (and itself) 
	
	  Set current interval to the greater of the minimum interval or
	  the requested interval
 If in irq mode, populate INT_CTRL_REG1 and enable DRDY. 
 SPDX-License-Identifier: GPL-2.0+
  Onkey driver for Actions Semi ATC260x PMICs.
  Copyright (c) 2020 Cristian Ciocaltea <cristian.ciocaltea@gmail.com>
 <2s for short press, >2s for long press 
 Driver internals 
	
	  The hardware generates interrupt only when the onkey pin is
	  asserted. Hence, the deassertion of the pin is simulated through
	  work queue.
	
	  The key-down status bit is cleared when the OnOff button
	  is released.
 Clear key press pending events and enable key press interrupts. 
 Disable key press interrupts. 
 Keep IRQ disabled until atc260x_onkey_open() is called. 
 SPDX-License-Identifier: GPL-2.0-or-later
  Input driver for slidebars on some Lenovo IdeaPad laptops
  Copyright (C) 2013 Andrey Moiseev <o2g.org.ru@gmail.com>
  Reverse-engineered from Lenovo SlideNav software (SBarHook.dll).
  Trademarks are the property of their respective owners.
  Currently tested and works on:
 	Lenovo IdeaPad Y550
 	Lenovo IdeaPad Y550P
  Other models can be added easily. To test,
  load with 'force' parameter set 'true'.
  LEDs blinking and input mode are managed via sysfs,
  (hex, unsigned byte value):
  sysdevicesplatformideapad_slidebarslidebar_mode
  The value is in byte range, however, I only figured out
  how bits 0b10011001 work. Some other bits, probably,
  are meaningfull too.
  Possible states:
  STD_INT, ONMOV_INT, OFF_INT, LAST_POLL, OFF_POLL
  Meaning:
            released      touched
  STD       'heartbeat'   lights follow the finger
  ONMOV     no lights     lights follow the finger
  LAST      at last pos   lights follow the finger
  OFF       no lights     no lights
  INT       all input events are generated, interrupts are used
  POLL      no input events by default, to get them,
 	     send 0b10000000 (read below)
  Commands: write
  All      |  0b01001 -> STD_INT
  possible |  0b10001 -> ONMOV_INT
  states   |  0b01000 -> OFF_INT
                       |  0b0 -> LAST_POLL
  STD_INT or ONMOV_INT |
                       |  0b1 -> STD_INT
                       |  0b0 -> OFF_POLL
  OFF_INT or OFF_POLL  |
                       |  0b1 -> OFF_INT
  Any state |   0b10000000 ->  if the slidebar has updated data,
 				produce one input event (last position),
 				switch to respective POLL mode
 				(like 0x0), if not in POLL mode yet.
  Get current state: read
  masked by 0x11 read value means:
  0x00   LAST
  0x01   STD
  0x10   OFF
  0x11   ONMOV
 We are only interested in data coming form KBC port 
 Scancodes: e03b on move, e0bb on release. 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (C) 2010, Lars-Peter Clausen <lars@metafoo.de>
   PWM beeper driver
 Sync up PWM state and ensure it is off. 
	
	  Spinlock is taken here is not to protect write to
	  beeper->suspended, but to ensure that pwm_beeper_event
	  does not re-submit work once flag is set.
 Let worker figure out if we should resume beeping 
 SPDX-License-Identifier: GPL-2.0-or-later
  ADXL345346 Three-Axis Digital Accelerometers
  Enter bugs at http:blackfin.uclinux.org
  Copyright (C) 2009 Michael Hennerich, Analog Devices Inc.
 ADXL3456 Register Map 
 R   Device ID 
 RW Tap threshold 
 RW X-axis offset 
 RW Y-axis offset 
 RW Z-axis offset 
 RW Tap duration 
 RW Tap latency 
 RW Tap window 
 RW Activity threshold 
 RW Inactivity threshold 
 RW Inactivity time 
 RW Axis enable control for activity and 
 inactivity detection 
 RW Free-fall threshold 
 RW Free-fall time 
 RW Axis control for tapdouble tap 
 R   Source of tapdouble tap 
 RW Data rate and power mode control 
 RW Power saving features control 
 RW Interrupt enable control 
 RW Interrupt mapping control 
 R   Source of interrupts 
 RW Data format control 
 R   X-Axis Data 0 
 R   X-Axis Data 1 
 R   Y-Axis Data 0 
 R   Y-Axis Data 1 
 R   Z-Axis Data 0 
 R   Z-Axis Data 1 
 RW FIFO control 
 R   FIFO status 
 R   Sign and source for tapdouble tap 
 Orientation ADXL346 only 
 RW Orientation configuration 
 R   Orientation status 
 DEVIDs 
 INT_ENABLEINT_MAPINT_SOURCE Bits 
 ACT_INACT_CONTROL Bits 
 TAP_AXES Bits 
 ACT_TAP_STATUS Bits 
 BW_RATE Bits 
 POWER_CTL Bits 
 DATA_FORMAT Bits 
  Maximum value our axis may get in full res mode for the input device
  (signed 13 bits)
  Maximum value our axis may get in fixed res mode for the input device
  (signed 10 bits)
 FIFO_CTL Bits 
 FIFO_STATUS Bits 
 TAP_SIGN Bits ADXL346 only 
 ORIENT_CONF ADXL346 only 
 ORIENT ADXL346 only 
 +X 
 -X 
 +Y 
 -Y 
 +X 
 -X 
 +Y 
 -Y 
 +Z 
 -Z 
 reentrant protection for struct 
 P: mutex 
 P: mutex 
 P: mutex 
 EV_REL 
 EV_REL 
 EV_REL 
 EV_KEY {x,y,z} 
	
	  ACT_TAP_STATUS should be read before clearing the interrupt
	  Avoid reading ACT_TAP_STATUS in case TAP detection is disabled
	
	  ORIENTATION SENSING ADXL346 only
 Report orientation only when it changes 
 Report orientation only when it changes 
			
			  To ensure that the FIFO has
			  completely popped, there must be at least 5 us between
			  the end of reading the data registers, signified by the
			  transition to register 0x38 from 0x37 or the CS pin
			  going high, and the start of new reads of the FIFO or
			  reading the FIFO_STATUS register. For SPI operation at
			  1.5 MHz or lower, the register addressing portion of the
			  transmission is sufficient delay to ensure the FIFO has
			  completely popped. It is necessary for SPI operation
			  greater than 1.5 MHz to de-assert the CS pin to ensure a
			  total of 5 us, which is at most 3.4 us at 5 MHz
			  operation.
	
	  A '0' places the ADXL34x into standby mode
	  with minimum power consumption.
	
	  Hardware offset calibration has a resolution of 15.6 mgLSB.
	  We use HW calibration and handle the remaining bits in SW. (4mgLSB)
	
	  This allows basic ADXL register write access for debug purposes.
 EV_ABS 
 Signed 13-bit 
 Signed 10-bit 
 Map all INTs to INT2 
 Map all INTs to INT1 
 SPDX-License-Identifier: GPL-2.0-only
   Input driver for PCAP events:
     Power key
     Headphone button
   Copyright (c) 2008,2009 Ilya Petrov <ilya.muromec@gmail.com>
 PCAP2 interrupts us on keypress 
  twl4030-pwrbutton.c - TWL4030 Power Button Input Driver
  Copyright (C) 2008-2009 Nokia Corporation
  Written by Peter De Schrijver <peter.de-schrijver@nokia.com>
  Several fixes by Felipe Balbi <felipe.balbi@nokia.com>
  This file is subject to the terms and conditions of the GNU General
  Public License. See the file "COPYING" in the main directory of this
  archive for more details.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 SPDX-License-Identifier: GPL-2.0-or-later
   Cobalt button interface driver.
   Copyright (C) 2007-2008  Yoichi Yuasa <yuasa@linux-mips.org>
 msec 
 work with hotplug and coldplug 
 SPDX-License-Identifier: GPL-2.0-only
  DRV2665 haptics driver family
  Author: Dan Murphy <dmurphy@ti.com>
  Copyright: (C) 2015 Texas Instruments, Inc.
 Contol registers 
 Status Register 
 Control 1 Register 
 Control 2 Register 
  struct drv2665_data -
  @input_dev: Pointer to the input device
  @client: Pointer to the I2C client
  @regmap: Register map of the device
  @work: Work item used to off load the enabledisable of the vibration
  @regulator: Pointer to the regulator for the IC
 8kHz Sine wave to stream to the FIFO 
  axp20x power button driver.
  Copyright (C) 2013 Carlo Caione <carlo@caione.org>
  This file is subject to the terms and conditions of the GNU General
  Public License. See the file "COPYING" in the main directory of this
  archive for more details.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.
	
	  The power-button is connected to ground so a falling edge (dbf)
	  means it is pressed.
		
		  On Cherry Trail platforms (hrv == 3), do not register the
		  input device if there is an "INTCFD9" or "ACPI0011" gpio
		  button ACPI device, as that handles the power button too,
		  and otherwise we end up reporting all presses twice.
	
	  As nested threaded IRQs are not automatically disabled during
	  suspend, we must explicitly disable non-wakeup IRQs.
	
	  Clear interrupts from button presses during suspend, to avoid
	  a wakeup power-button press getting reported to userspace.
 sentinel  }
  HP i8042 SDC + MSM-58321 BBRTC driver.
  Copyright (c) 2001 Brian S. Julin
  All rights reserved.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions, and the following disclaimer,
     without modification.
  2. The name of the author may not be used to endorse or promote products
     derived from this software without specific prior written permission.
  Alternatively, this software may be distributed under the terms of the
  GNU General Public License ("GPL").
  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  References:
  System Device Controller Microprocessor Firmware Theory of Operation
       for Part Number 1820-4784 Revision B.  Dwg No. A-1820-4784-2
  efirtc.c by Stephane EranianHewlett Packard
 write i8042[0x70] 
 BBRTC reg address 
 Trigger command   
 expect 1 statdat pair back.   
 buffer for statdat pair       
 Put ourselves to sleep for results. 
 Check for nonpresence of BBRTC 
 MSM-58321 has no read latch, so must read twice and compare. 
 numreg assumed > 1 
 Sleep if output regs in use. 
 Sleep until results come back. 
 Read the i8042 real-time clock 
 Read the i8042 fast handshake timer 
 Read the i8042 match timer (a.k.a. alarm) 
 Read the i8042 delay timer 
 Read the i8042 cycle timer (a.k.a. periodic) 
 SPDX-License-Identifier: GPL-2.0-only
  DRV260X haptics driver family
  Author: Dan Murphy <dmurphy@ti.com>
  Copyright:   (C) 2014 Texas Instruments, Inc.
 Library Selection 
 Mode register 
 Audio to Haptics Control 
 MinMax InputOutput Voltages 
 Feedback register 
 Control 1 register 
 Control 2 register 
 Control 3 Register 
 Control 4 Register 
  struct drv260x_data -
  @input_dev: Pointer to the input device
  @client: Pointer to the I2C client
  @regmap: Register map of the device
  @work: Work item used to off load the enabledisable of the vibration
  @enable_gpio: Pointer to the gpio used for enabledisabling
  @regulator: Pointer to the regulator for the IC
  @magnitude: Magnitude of the vibration event
  @mode: The operating mode of the IC (LRA_NO_CAL, ERM or LRA)
  @library: The vibration library to be used
  @rated_voltage: The rated_voltage of the actuator
  @overdrive_voltage: The over drive voltage of the actuator
  Rated and Overdriver Voltages:
  Calculated using the formula r = v  255  5.6
  where r is what will be written to the register
  and v is the rated or overdriver voltage of the actuator
 Data sheet says to wait 250us before trying to communicate 
 No need to set GO bit here 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2010-2011, 2020-2021, The Linux Foundation. All rights reserved.
  Copyright (c) 2014, Sony Mobile Communications Inc.
 PMICs with revision 0 have the enable bit in same register as ctrl 
	
	  Updates of PON_PS_HOLD_ENABLE requires 3 sleep cycles between
	  writes.
		
		  We failed to get regmap for parent. Let's see if we are
		  a child of pon node and read regmap and reg from its
		  parent.
 SPDX-License-Identifier: GPL-2.0-or-later
  driversusbinputyealink.c
  Copyright (c) 2005 Henk Vergonet <Henk.Vergonet@gmail.com>
  Description:
    Driver for the USB-P1K voip usb phone.
    This device is produced by Yealink Network Technology Co Ltd
    but may be branded under several names:
 	- Yealink usb-p1k
 	- Tiptel 115
 	- ...
  This driver is based on:
    - the usbb2k-api	http:savannah.nongnu.orgprojectsusbb2k-api
    - information from	http:memeteau.free.frusbb2k
    - the xpad-driver	driversinputjoystickxpad.c
  Thanks to:
    - Olivier Vandorpe, for providing the usbb2k-api.
    - Martin Diehl, for spotting my memory allocation bug.
  History:
    20050527 henk	First version, functional keyboard. Keyboard events
 			will pop-up on the ..inputeventX bus.
    20050531 henk	Added led, LCD, dialtone and sysfs interface.
    20050610 henk	Cleanups, make it ready for public consumption.
    20050630 henk	Cleanups, fixes in response to comments.
    20050701 henk	sysfs write serialisation, fix potential unload races
    20050801 henk	Added ringtone, restructure USB
    20050816 henk	Merge 2.6.13-rc6
 in [Hz] 
  Register the LCD segment and icon map
 input device 
 usb device 
 usb interface 
 irq input channel 
 control output channel 
 physical device path 
 state of LCD, LED ... 
 last reported key	 
  Yealink lcd interface
  Register a default 7 segment character set
  Display a char,
   char '\9' and '\n' are placeholders and do not overwrite the original text.
   A space will always hide an icon.
  Yealink key interface
 Map device buttons to internal key events.
  USB-P1K button layout:
              up
        IN           OUT
             down
      pickup   C    hangup
        1      2      3
        4      5      6
        7      8      9
              0      #
  The "up" and "down" keys, are symbolised by arrows on the button.
  The "pickup" and "hangup" keys are symbolised by a green and red phone
  on the button.
 phone key:	
   IN		
   up		
   OUT	
   down	
   pickup	
  C		
   hangup	
   1		
   2 		
   3		
   4		
   5		
   6		
   7		
   8		
   9		
 		
   0		
   #		
 Completes a request by converting the data into events for the
  input subsystem.
  The key parameter can be cascaded: key2 << 8 | key1
 old key up 
 new valid key 
  Yealink usb communication interface
 volume [0-255] 
 1250 [hz], 12100 [s] 
 1000 [hz], 12100 [s] 
 silent, 400100 [s] 
 end of sequence 
 Set the ringtone volume 
 keep stat_master & stat_copy in sync.
 If state update pointer wraps do a KEYPRESS first. 
 find update candidates: copy != master 
 nothing todo, wait a bit and poll for a KEYPRESS 
	 TODO how can we wait abit. ??
	  msleep_interruptible(1000  YEALINK_POLLING_FREQUENCY);
 Setup an appropriate update request 
		 Combine up to <len> consecutive LCD bytes in a singe request
 Decide on how to handle responses
  The state transition diagram is somethhing like:
           syncState<--+
                |      |
                |    idle
               \|     |
  init --ok--> waitForKey --ok--> getKey
   ^               ^                |
   |               +-------ok-------+
  error,start
 ask for a response 
 send new command 
  input event interface
 TODO should we issue a ringtone on a SND_BELL event?
static int input_ev(struct input_dev dev, unsigned int type,
		unsigned int code, int value)
{
	if (type != EV_SND)
		return -EINVAL;
	switch (code) {
	case SND_BELL:
	case SND_TONE:
		break;
	default:
		return -EINVAL;
	}
	return 0;
}
 force updates to device 
 no keys pressed 
 issue INIT 
	
	  Make sure the flag is seen by other CPUs before we start
	  killing URBs so new URBs won't be submitted
  sysfs interface
 Interface to the 7-segments translation table aka. char set.
 Interface to the LCD.
 Reading sys..lineX will return the format string with its settings:
  Example:
  cat .line3
  888888888888
  Linux Rocks!
 Writing to sys..lineX will set the coresponding LCD line.
  - Excess characters are ignored.
  - If less characters are written than allowed, the remaining digits are
    unchanged.
  - The '\n' or '\t' char is a placeholder, it does not overwrite the
    original content.
 Interface to visible and audible "icons", these include:
  pictures on the LCD, the LED, and the dialtone signal.
 Get a list of "switchable elements" with their current state. 
 Change the visibility of a particular element. 
 Upload a ringtone to the device.
 Stores raw ringtone data in the phone 
 TODO locking with async usb control interface??? 
  Linux interface and usb initialisation
 allocate usb buffers 
 allocate urb structures 
 get a handle to the interrupt data pipe 
 initialise irq urb 
 initialise ctl urb 
 find out the physical bus location 
 register settings for the input device 
 input_dev->event = input_ev;	TODO 
 register available key events 
 clear visible elements 
 display driver version on LCD line 3 
 Register sysfs hooks (don't care about failure) 
 SPDX-License-Identifier: GPL-2.0+
  DA7280 Haptic device driver
  Copyright (c) 2020 Dialog Semiconductor.
  Author: Roy Im <Roy.Im.Opensource@diasemi.com>
 Registers 
 Register field 
 DA7280_IRQ_EVENT1 (Address 0x03) 
 DA7280_IRQ_EVENT_WARNING_DIAG (Address 0x04) 
 DA7280_IRQ_EVENT_PAT_DIAG (Address 0x05) 
 DA7280_IRQ_STATUS1 (Address 0x06) 
 DA7280_IRQ_MASK1 (Address 0x07) 
 DA7280_ACTUATOR3 (Address 0x0e) 
 DA7280_TOP_CFG1 (Address 0x13) 
 DA7280_TOP_CFG2 (Address 0x14) 
 DA7280_TOP_CFG4 (Address 0x16) 
 DA7280_TOP_INT_CFG1 (Address 0x17) 
 DA7280_TOP_CTL1 (Address 0x22) 
 DA7280_SEQ_CTL2 (Address 0x28) 
 DA7280_GPIO_0_CTL (Address 0x29) 
 DA7280_GPIO_1_CTL (Address 0x2a) 
 DA7280_GPIO_2_CTL (Address 0x2b) 
 DA7280_MEM_CTL2 (Address 0x2d) 
 DA7280_TOP_CFG5 (Address 0x6e) 
 DA7280_IRQ_MASK2 (Address 0x83) 
 Controls 
 Maximum gain is 0x7fff for PWM mode 
 The patterns should be updated when haptic is not working 
 Patterns are not updated if the lock bit is enabled 
 Set to Inactive mode to make sure safety 
		
		  The interpretation of duty cycle depends on the acc_en,
		  it should be between 50% and 100% for acc_en = 0.
		  See datasheet 'PWM mode' section.
 the valid range check when acc_en is enabled 
 Set level as a % of ACTUATOR_NOMMAX (nommax) 
		
		  The pattern will be played by the PS_SEQ_ID and the
		  PS_SEQ_LOOP
		
		  The pattern will be played by the GPI[N] state,
		  GPI(N)_SEQUENCE_ID and the PS_SEQ_LOOP. See the
		  datasheet for the details.
 Set to Inactive mode 
 The effect should be uploaded when haptic is not working 
 DROPWM modes support this type 
 RTWMETWM modes support this type 
		
		  Load the data and check the length.
		  the data will be patterns in this case: 4 < X <= 100,
		  and will be saved into the waveform memory inside DA728x.
		  If X = 2, the data will be PS_SEQ_ID and PS_SEQ_LOOP.
		  If X = 3, the 1st data will be GPIX_SEQUENCE_ID .
	
	  If there is no property, then use the mode programmed into the chip.
 If no property, set to zero as default is to do nothing. 
 GPI0~2 Control 
 Check what events have happened 
 Clear events 
		
		  Stop first if haptic is active, otherwise, the fault may
		  happen continually even though the bit is cleared.
	
	  If device type is DA7280_DEV_MAX then simply use currently
	  programmed mode.
 Apply user settings 
 Set  PS_SEQ_ID and PS_SEQ_LOOP 
 GPI(N) CTL 
 Mask ADC_SAT_M bit as default 
 Clear Interrupts 
 Sync up PWM state and ensure it is off. 
		
		  Check PWM period, PWM freq = 1000000  state.period.
		  The valid PWM freq range: 10k ~ 250kHz.
 Initialize input device for haptic device 
	
	  Make sure no new requests will be submitted while device is
	  suspended.
  CPCAP Power Button Input Driver
  Copyright (C) 2017 Sebastian Reichel <sre@kernel.org>
  This file is subject to the terms and conditions of the GNU General
  Public License. See the file "COPYING" in the main directory of this
  archive for more details.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 SPDX-License-Identifier: GPL-2.0-only
  twl4030-vibra.c - TWL4030 Vibrator driver
  Copyright (C) 2008-2010 Nokia Corporation
  Written by Henrik Saari <henrik.saari@nokia.com>
  Updates by Felipe Balbi <felipe.balbi@nokia.com>
  Input by Jari Vanhala <ext-jari.vanhala@nokia.com>
 MODULE ID2 
 ForceFeedback 
 range is 0 - 0xFFFF 
 Disable LEDA & LEDB, cannot be used with vibra (PWM) 
 Powers H-Bridge and enables audio clk 
 turn H-Bridge on 
 Power down H-Bridge 
 set vibra rotation direction 
 set PWM, 1 = max, 255 = min 
 InputForceFeedback 
 Module 
 SPDX-License-Identifier: GPL-2.0-only
  rotary_encoder.c
  (c) 2009 Daniel Mack <daniel@caiaq.de>
  Copyright (C) 2011 Johan Hovold <jhovold@gmail.com>
  state machine code inspired by code from Tim Ruetz
  A generic driver for rotary encoders connected to GPIO lines.
  See file:Documentationinputdevicesrotary-encoder.rst for more information
 1 - clockwise, -1 - CCW 
 convert from gray encoding to normal 
 turning counter-clockwise 
 turning clockwise 
		
		  The 'half-period' property has been deprecated, you must
		  use 'steps-per-period' and set an appropriate value, but
		  we still need to parse it to maintain compatibility. If
		  neither property is present we fall back to the one step
		  per period behavior.
 SPDX-License-Identifier: GPL-2.0-or-later
  Rockchip RK805 PMIC Power Key driver
  Copyright (c) 2017, Fuzhou Rockchip Electronics Co., Ltd
  Author: Joseph Chen <chenjh@rock-chips.com>
  Hisilicon PMIC powerkey driver
  Copyright (C) 2013 Hisilicon Ltd.
  Copyright (C) 2015, 2016 Linaro Ltd.
  This file is subject to the terms and conditions of the GNU General
  Public License. See the file "COPYING" in the main directory of this
  archive for more details.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 the held interrupt will trigger after 4 seconds 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2014, National Instruments Corp. All rights reserved.
  Driver for NI Ettus Research USRP E3x0 Button Driver
 SPDX-License-Identifier: GPL-2.0-only
  Supports for the button array on SoC tablets originally running
  Windows 8.
  (C) Copyright 2014 Intel Corporation
  Some of the buttons like volume updown are auto repeat, while others
  are not. To support both, we register two platform devices, and put
  buttons into them based on whether the key should be auto repeat.
  Some 2-in-1s which use the soc_button_array driver have this ugly issue in
  their DSDT where the _LID method modifies the irq-type settings of the GPIOs
  used for the power and home buttons. The intend of this AML code is to
  disable these buttons when the lid is closed.
  The AML does this by directly poking the GPIO controllers registers. This is
  problematic because when re-enabling the irq, which happens whenever _LID
  gets called with the lid open (e.g. on boot and on resume), it sets the
  irq-type to IRQ_TYPE_LEVEL_LOW. Where as the gpio-keys driver programs the
  type to, and expects it to be, IRQ_TYPE_EDGE_BOTH.
  To work around this we don't set gpio_keys_button.gpio on these 2-in-1s,
  instead we get the irq for the GPIO ourselves, configure it as
  IRQ_TYPE_LEVEL_LOW (to match how the _LID AML code configures it) and pass
  the irq in gpio_keys_button.irq. Below is a list of affected devices.
		
		  Acer Switch 10 SW5-012. _LID method messes with home- and
		  power-button GPIO IRQ settings. When (re-)enabling the irq
		  it ors in its own flags without clearing the previous set
		  ones, leading to an irq-type of IRQ_TYPE_LEVEL_LOW |
		  IRQ_TYPE_LEVEL_HIGH causing a continuous interrupt storm.
		
		  Acer One S1003. _LID method messes with power-button GPIO
		  IRQ settings, leading to a non working power-button.
		
		  Lenovo Yoga Tab2 1051L, something messes with the home-button
		  IRQ settings, leading to a non working home-button.
 Terminating entry 
  Get the Nth GPIO number from the ACPI object.
			
			  Skip GPIO if not present. Note we deliberately
			  ignore -EPROBE_DEFER errors here. On some devices
			  Intel is using so called virtual GPIOs which are not
			  GPIOs at all but some way for AML code to check some
			  random status bits without need a custom opregion.
			  In some cases the resources table we parse points to
			  such a virtual GPIO, since these are not real GPIOs
			  we do not have a driver for these so they will never
			  show up, therefore we ignore -EPROBE_DEFER.
 See dmi_use_low_level_irq[] comment 
 These devices often use cheap buttons, use 50 ms debounce 
 Parse a single ACPI0011 _DSD button descriptor 
 First byte should be 1 (control) 
 Third byte should be collection uid 
	
	  The UUID: fa6bd625-9ce8-470d-a2c7-b3ca36c4282e descriptors use HID
	  usage page and usage codes, but otherwise the device is not HID
	  compliant: it uses one irq per button instead of generating HID
	  input reports and some buttons should generate wakeups where as
	  others should not, so we cannot use the HID subsystem.
	 
	  Luckily all devices only use a few usage page + usage combinations,
	  so we can simply check for the known combinations here.
 ACPI0011 _DSD btns descriptors UUID: fa6bd625-9ce8-470d-a2c7-b3ca36c4282e 
 Parse ACPI0011 _DSD button descriptors 
 Look for the Button Descriptors UUID 
 The first package describes the collection 
 First byte should be 0 (collection) 
 Third byte should be 0 (top level collection) 
 There are package.count - 1 buttons + 1 terminating empty entry 
 Parse the button descriptors 
  Definition of buttons on the tablet. The ACPI index of each button
  is defined in section 2.8.7.2 of "Windows ACPI Design Guide for SoC
  Platforms"
  Special device check for Surface Book 2 and Surface Pro (2017).
  Both, the Surface Pro 4 (surfacepro3_button.c) and the above mentioned
  devices use MSHW0040 for power and volume buttons, however the way they
  have to be addressed differs. Make sure that we only load this drivers
  for the correct devices by checking the OEM Platform Revision provided by
  the _DSM method.
 get OEM Platform Revision
 valid revisions are nonzero
 get OEM platform revision
	
	  If the revision is zero here, the _DSM evaluation has failed. This
	  indicates that we have a Pro 4 or Book 1 and this driver should not
	  be used.
  Button infos for Microsoft Surface Book 2 and Surface Pro (2017).
  Obtained from DSDTtesting.
 Microsoft Surface Devices (5th and 6th generation) 
 SPDX-License-Identifier: GPL-2.0-only
   Fujitsu Lifebook Application Panel button drive
   Copyright (C) 2007 Stephen Hemminger <shemminger@linux-foundation.org>
   Copyright (C) 2001-2003 Jochen Eisinger <jochen@penguin-breeder.org>
  Many Fujitsu Lifebook laptops have a small panel of buttons that are
  accessible via the i2csmbus interface. This driver polls those
  buttons and generates input events.
  For more details see:
 	http:apanel.sourceforge.nettech.php
 How often we poll keys - msecs 
 Magic constants in BIOS that tell about buttons 
 Result of BIOS snoopingprobing -- what features are supported 
 Poll for key changes
  Read Application keys via SMI
   A (0x4), B (0x8), Internet (0x2), Email (0x1).
  CD keys:
  Forward (0x100), Rewind (0x200), Stop (0x400), Pause (0x800)
 ignore errors (due to ACPI??) 
 write back to clear latch 
 Scan the system ROM for the signature "FJKEYINF" 
 Can't fail 
 just use the first address 
 translate alternative device numbers 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2010-2011, Code Aurora Forum. All rights reserved.
  struct pm8xxx_vib - structure to hold vibrator data
  @vib_input_dev: input device supporting force feedback
  @work: work structure to set the vibration parameters
  @regmap: regmap for register readwrite
  @regs: registers' info
  @speed: speed of vibration set from userland
  @active: state of vibrator
  @level: level of vibration to set in the chip
  @reg_vib_drv: regs->drv_addr register value
  pm8xxx_vib_set - handler to startstop vibration
  @vib: pointer to vibrator structure
  @on: state to set
  pm8xxx_work_handler - worker to set vibration level
  @work: pointer to work_struct
	
	  pmic vibrator supports voltage ranges from 1.2 to 3.1V, so
	  scale the level to fit into these ranges.
  pm8xxx_vib_close - callback of input close callback
  @dev: input device pointer
  Turns off the vibrator.
  pm8xxx_vib_play_effect - function to handle vib effects.
  @dev: input device pointer
  @data: data of effect
  @effect: effect to play
  Currently this driver supports only rumble effects.
 operate in manual mode 
 Turn off the vibrator 
 SPDX-License-Identifier: GPL-2.0-only
  Support for the S1 button on Routerboard 532
  Copyright (C) 2009  Phil Sutter <n0-1@freewrt.org>
 msec 
 The S1 button state is provided by GPIO pin 1. But as this
  pin is also used for uart input as alternate function, the
  operational modes must be switched first:
  1) disable uart using set_latch_u5()
  2) turn off alternate function implicitly through
     gpio_direction_input()
  3) read the GPIO's current value
  4) undo step 2 by enabling alternate function (in this
     mode the GPIO direction is fixed, so no change needed)
  5) turn on uart again
  The GPIO value occurs to be inverted, so pin high means
  button is not pressed.
 SPDX-License-Identifier: GPL-2.0-only
  Regulator haptic driver
  Copyright (c) 2014 Samsung Electronics Co., Ltd.
  Author: Jaewon Kim <jaewon02.kim@samsung.com>
  Author: Hyunhee Kim <hyunhee.kim@samsung.com>
 sentinel  },
 SPDX-License-Identifier: GPL-2.0-or-later
   SGI Volume Button interface driver
   Copyright (C) 2008  Thomas Bogendoerfer <tsbogend@alpha.franken.de>
 msec 
 SPDX-License-Identifier: GPL-2.0-or-later
   PWM vibrator driver
   Copyright (C) 2017 Collabora Ltd.
   Based on previous work from:
   Copyright (C) 2012 Dmitry Torokhov <dmitry.torokhov@gmail.com>
   Based on PWM beeper driver:
   Copyright (C) 2010, Lars-Peter Clausen <lars@metafoo.de>
 Sync up PWM state and ensure it is off. 
 Sync up PWM state and ensure it is off. 
 Direction PWM is optional 
 SPDX-License-Identifier: GPL-2.0-only
  Wistron laptop button driver
  Copyright (C) 2005 Miloslav Trmac <mitr@volny.cz>
  Copyright (C) 2005 Bernhard Rosenkraenzer <bero@arklinux.org>
  Copyright (C) 2005 Dmitry Torokhov <dtor@mail.ru>
 How often we poll keys - msecs 
 when idle 
 when a key was recently pressed 
 BIOS subsystem IDs 
 = 0; 
 = NULL; 
 BIOS interface implementation 
 BIOS routine entry point 
 Can't fail 
 The Windows driver maps 0x10000 bytes, we keep only one page... 
 BIOS calls 
 Hardware database 
 = NULL; Current key map 
 bitmask of leds present 
 Fn+F1 
 Fn+F4 
 Fn+F10 
 mail button 
 www button 
 satellite dish button 
 Fn+F1 
 Fn+F4 
 Fn+F10 
 mail button 
 www button 
 satelite dish button 
 Display onoff 
 3020 has been tested 
 Display selection 
 lid close 
 lid open 
 not 370 
 unusual map 
 no mail led 
 Wifi subsystem only activates the led. Therefore we need to pass
  wifi event as a normal key, then userspace can really change the wifi state.
 not 620 
 Display selection 
 Display onoff 
 Display selection 
 Display onoff 
 Display onoff 
 lid close 
 lid open 
  If your machine is not here (which is currently rather likely), please send
  a list of buttons and their key codes (reported when loading this module
  with force=1) and the output of dmidecode to $MODULE_AUTHOR.
 Fujitsu-Siemens Amilo Pro V2000 
 Fujitsu-Siemens Amilo Pro Edition V3505 
 Fujitsu-Siemens Amilo Pro Edition V8210 
 Fujitsu-Siemens Amilo M7400 
 Maxdata Pro 7000 DX 
 Fujitsu N3510 
 Acer Aspire 1500 
 Acer Aspire 1600 
 Acer Aspire 3020 
 Acer Aspire 5020 
 Acer TravelMate 2100 
 Acer TravelMate 2410 
 Acer TravelMate C300 
 Acer TravelMate C100 
 Acer TravelMate C110 
 Acer TravelMate 380 
 Acer TravelMate 370 
 keyboard minus 1 key 
 Acer TravelMate 220 
 Acer TravelMate 260 
 Acer TravelMate 230 
 acerhk looks for "TravelMate F4..." ?! 
 Acer TravelMate 280 
 Acer TravelMate 240 
 Acer TravelMate 250 
 Acer TravelMate 2424NWXCi 
 Acer TravelMate 350 
 Acer TravelMate 360 
 Acer TravelMate 610 
 Acer TravelMate 620 
 Acer TravelMate 630 
 AOpen 1559AS 
 Medion MD 9783 
 Medion MD 40100 
 Medion MD 2900 
 Medion MD 42200 
 Medion MD 96500 
 Medion MD 95400 
 Fujitsu Siemens Amilo D7820 
 not sure 
 Fujitsu Siemens Amilo D88x0 
 Copy the good keymap, as the original ones are free'd 
 Input layer interface 
 led management 
 same as setting up wifi card, but for laptops on which the led is managed 
 bios_get_default_setting(MAIL) always retuns 0, so just turn the led off 
 Flush stale event queue 
 Increase poll frequency if user is currently pressing keys (< 2s ago) 
 if wifi or bluetooth are not available, create normal keys 
 Driver core 
  88pm860x_onkey.c - Marvell 88PM860x ONKEY driver
  Copyright (C) 2009-2010 Marvell International Ltd.
       Haojian Zhuang <haojian.zhuang@marvell.com>
  This file is subject to the terms and conditions of the GNU General
  Public License. See the file "COPYING" in the main directory of this
  archive for more details.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 88PM860x gives us an interrupt when ONKEY is held 
 Enable 8-second long onkey detection 
 SPDX-License-Identifier: GPL-2.0-only
   Driver for PC-speaker like devices found on various Sparc systems.
   Copyright (c) 2002 Vojtech Pavlik
   Copyright (c) 2002, 2006, 2008 David S. Miller (davem@davemloft.net)
 enable counter 2 
 set command for counter 2, 2 byte write 
 select desired HZ 
 disable counter 2 
 turn off the speaker 
 turn off the speaker 
 turn off the speaker 
 SPDX-License-Identifier: GPL-2.0-only
  Arizona haptics driver
  Copyright 2012 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 This enable sequence will be a noop if already enabled 
 This disable sequence will be a noop if already enabled 
 Scale the magnitude into the range the device supports 
  Retu power button driver.
  Copyright (C) 2004-2010 Nokia Corporation
  Original code written by Ari Saastamoinen, Juha Yrjölä and Felipe Balbi.
  Rewritten by Aaro Koskinen.
  This file is subject to the terms and conditions of the GNU General
  Public License. See the file "COPYING" in the main directory of this
  archive for more details.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.
 SPDX-License-Identifier: GPL-2.0+
 Power Button driver for RAVE SP
 Copyright (C) 2017 Zodiac Inflight Innovations
 SPDX-License-Identifier: GPL-2.0-or-later
  OnKey device driver for DA9063, DA9062 and DA9061 PMICs
  Copyright (C) 2015  Dialog Semiconductor Ltd.
 REGS 
 MASKS 
 NAMES 
 REGS 
 MASKS 
 NAMES 
 REGS 
 MASKS 
 NAMES 
 Poll to see when the pin is released 
	
	  If the fault log KEY_RESET is detected, then clear it
	  and shut down the system.
			 at this point we do any SW housekeeping
			  and then send shutdown command
  Copyright (C) 2011 Philippe Rétornaz
  Based on twl4030-pwrbutton driver by:
      Peter De Schrijver <peter.de-schrijver@nokia.com>
      Felipe Balbi <felipe.balbi@nokia.com>
  This file is subject to the terms and conditions of the GNU General
  Public License. See the file "COPYING" in the main directory of this
  archive for more details.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Suite 500, Boston, MA 02110-1335  USA
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for a keypad w16 buttons connected to a PCF8574 I2C IO expander
  Copyright 2005-2008 Analog Devices Inc.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2018 Spreadtrum Communications Inc.
 SPDX-License-Identifier: GPL-2.0-only
   m68k beeper driver for Linux
   Copyright (c) 2002 Richard Zidlicky
   Copyright (c) 2002 Vojtech Pavlik
   Copyright (c) 1992 Orest Zborowski
 turn off the speaker 
 turn off the speaker 
 SPDX-License-Identifier: GPL-2.0-or-later
  MAX8997-haptic controller driver
  Copyright (C) 2012 Samsung Electronics
  Donggeun Kim <dg77.kim@samsung.com>
  This program is not provided  owned by Maxim Integrated Products.
 Haptic configuration 2 register 
 Haptic driver configuration register 
		
		  FIXME: pwm_apply_args() should be removed when switching to
		  the atomic PWM API.
 SPDX-License-Identifier: GPL-2.0-or-later
  AD714X CapTouch Programmable Controller driver (I2C bus)
  Copyright 2009-2011 Analog Devices Inc.
 BUS_I2C 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) ST-Ericsson SA 2010
  Author: Sundar Iyer <sundar.iyer@stericsson.com> for ST-Ericsson
  AB8500 Power-On Key handler
  struct ab8500_ponkey - ab8500 ponkey information
  @idev: pointer to input device
  @ab8500: ab8500 parent
  @irq_dbf: irq number for falling transition
  @irq_dbr: irq number for rising transition
 AB8500 gives us an interrupt when ONKEY is held 
 SPDX-License-Identifier: GPL-2.0-or-later
  ADLX345346 Three-Axis Digital Accelerometers (SPI Interface)
  Enter bugs at http:blackfin.uclinux.org
  Copyright (C) 2009 Michael Hennerich, Analog Devices Inc.
 BUS_SPI 
 don't exceed max specified SPI CLK frequency 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2011 Bosch Sensortec GmbH
  Copyright (c) 2011 Unixphere
  This driver adds support for Bosch Sensortec's digital acceleration
  sensors BMA150 and SMB380.
  The SMB380 is fully compatible with BMA150 and only differs in packaging.
  The datasheet for the BMA150 chip can be found here:
  http:www.bosch-sensortec.comcontentlanguage1downloadsBST-BMA150-DS000-07.pdf
 Each axis is represented by a 2-byte data word 
 Input poll interval in milliseconds 
 Data register addresses 
 Control register addresses 
 ConfigurationSetting register addresses 
 Any-motion interrupt register fields 
 Advanced interrupt register fields 
 High-G interrupt register fields 
 Low-G interrupt register fields 
  The settings for the given range, bandwidth and interrupt features
  are stated and verified by Bosch Sensortec where they are configured
  to provide a generic sensitivity performance.
 As per specification, disable irq in between register writes 
	
	  See if runtime PM woke up the device. If runtime PM
	  is disabled we need to do it ourselves.
 SPDX-License-Identifier: GPL-2.0-only
  twl6040-vibra.c - TWL6040 Vibrator driver
  Author:      Jorge Eduardo Candelaria <jorge.candelaria@ti.com>
  Author:      Misael Lopez Cruz <misael.lopez@ti.com>
  Copyright:   (C) 2011 Texas Instruments, Inc.
  Based on twl4030-vibra.c by Henrik Saari <henrik.saari@nokia.com>
 				Felipe Balbi <felipe.balbi@nokia.com>
 				Jari Vanhala <ext-javi.vanhala@nokia.com>
 Recommended modulation index 85% 
		
		  ERRATA: Disable overcurrent protection for at least
		  3ms when enabling vibrator drivers to avoid false
		  overcurrent detection
 output swing 
 50mV per VIBDAT code step 
 scale speed to max allowed code 
 2's complement for direction > 180 degrees 
 weak motor 
 strong motor 
 Do not allow effect, while the routing is set to use audio 
	
	  When booted with Device tree the regulators are attached to the
	  parent device (twl6040 MFD core)
 SPDX-License-Identifier: GPL-2.0-only
  Atmel Atmegaxx Capacitive Touch Button Driver
  Copyright (C) 2016 Google, inc.
  It's irrelevant that the HW used to develop captouch driver is based
  on Atmega88PA part and uses QtouchADC parts for sensing touch.
  Calling this driver "captouch" is an arbitrary way to distinguish
  the protocol this driver supported by other atmelqtouch drivers.
  Captouch driver supports a newerdifferent version of the I2C
  registerscommands than the qt1070.c driver.
  Don't let the similarity of the general driver structure fool you.
  For raw i2c access from userspace, use i2cseti2cget
  to poke at devi2c-N devices.
 Maximum number of buttons supported 
 Registers 
  @i2c_client: I2C slave device client pointer
  @input: Input device pointer
  @num_btn: Number of buttons
  @keycodes: map of button# to KeyCode
  @prev_btn: Previous key state to detect button "press" or "release"
  @xfer_buf: I2C transfer buffer
  Read from I2C slave device
  The protocol is that the client has to provide both the register address
  and the length, and while reading back the device would prepend the data
  with address and length for verification.
  Handle interrupt and report the key changes to the input system.
  Multi-touch can be supported; however, it really depends on whether
  the device can multi-touch.
  Probe function to setup the device, input system and interrupt
 sentinel  }
 Module information 
  Xen para-virtual input device
  Copyright (C) 2005 Anthony Liguori <aliguori@us.ibm.com>
  Copyright (C) 2006-2008 Red Hat, Inc., Markus Armbruster <armbru@redhat.com>
   Based on linuxdriversinputmousesermouse.c
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
 current MT slotcontact ID we are injecting events in 
  Note: if you need to send out events, see xenfb_do_update() for how
  to do that.
 Mark as autorepeat 
 ensure we see ring contents up to prod 
 ensure we got ring contents 
	
	  The below are reverse logic, e.g. if the feature is set, then
	  do not expose the corresponding virtual device.
 Direct logic: if set, then create multi-touch device. 
 keyboard 
 pointing device 
 Set input abs params to match backend screen res 
 multi-touch device 
		
		  Work around xenbus race condition: If backend goes
		  through InitWait to Connected fast enough, we can
		  get Connected twice here.
 Missed the backend's CLOSING state 
 Nothing to do if running in dom0. 
  Texas Instruments' Palmas Power Button Input Driver
  Copyright (C) 2012-2014 Texas Instruments Incorporated - http:www.ti.com
 	Girish S Ghongdemath
 	Nishanth Menon
  This program is free software; you can redistribute it andor modify
  it under the terms of the GNU General Public License version 2 as
  published by the Free Software Foundation.
  This program is distributed "as is" WITHOUT ANY WARRANTY of any
  kind, whether express or implied; without even the implied warranty
  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  struct palmas_pwron - Palmas power on data
  @palmas:		pointer to palmas device
  @input_dev:		pointer to input device
  @input_work:		work for detecting release of key
  @irq:		irq that we are hooked on to
  struct palmas_pwron_config - configuration of palmas power on
  @long_press_time_val:	value for long press hw shutdown event
  @pwron_debounce_val:		value for debounce of power button
  palmas_power_button_work() - Detects the button release event
  @work:	work item to detect button release
 The button is released, report event. 
 The button is still depressed, keep checking. 
  pwron_irq() - button press isr
  @irq:		irq
  @palmas_pwron:	pwron struct
  Return: IRQ_HANDLED
  palmas_pwron_params_ofinit() - device tree parameter parser
  @dev:	palmas button device
  @config:	configuration params that this fills up
 Default config parameters 
  palmas_pwron_probe() - probe
  @pdev:	platform device for the button
  Return: 0 for successful probe else appropriate error
	
	  Setup default hardware shutdown option (long key press)
	  and debounce.
  palmas_pwron_remove() - Cleanup on removal
  @pdev:	platform device for the button
  Return: 0
  palmas_pwron_suspend() - suspend handler
  @dev:	power button device
  Cancel all pending work items for the power button, setup irq for wakeup
  Return: 0
  palmas_pwron_resume() - resume handler
  @dev:	power button device
  Just disable the wakeup capability of irq here.
  Return: 0
 SPDX-License-Identifier: GPL-2.0-or-later
  MAXIM MAX77693MAX77843 Haptic device driver
  Copyright (C) 2014,2015 Samsung Electronics
  Jaewon Kim <jaewon02.kim@samsung.com>
  Krzysztof Kozlowski <krzk@kernel.org>
  This program is not provided  owned by Maxim Integrated Products.
	
	  The magnitude comes from force-feedback interface.
	  The formula to convert magnitude to pwm_duty as follows:
	  - pwm_duty = (magnitude  pwm_period)  MAX_MAGNITUDE(0xFFFF)
 Variant-specific init 
 Get pwm and regulatot for haptic device 
	
	  FIXME: pwm_apply_args() should be removed when switching to the
	  atomic PWM API.
 Initialize input device for haptic device 
 SPDX-License-Identifier: GPL-2.0-or-later
   User level driver support for input subsystem
  Heavily based on evdev.c by Vojtech Pavlik
  Author: Aristeu Sergio Rozanski Filho <aris@cathedrallabs.org>
  ChangesRevisions:
 	0.4	01092014 (Benjamin Tissoires <benjamin.tissoires@redhat.com>)
 		- add UI_GET_SYSNAME ioctl
 	0.3	09042006 (Anssi Hannula <anssi.hannula@gmail.com>)
 		- updated ff support for the changes in kernel interface
 		- added MODULE_VERSION
 	0.2	16102004 (Micah Dowty <micah@navi.cx>)
 		- added force feedback support
               - added UI_SET_PHYS
 	0.1	20062002
 		- first public version
 UI_FF_UPLOAD, UI_FF_ERASE 
 Atomically allocate an ID for the given request. Returns 0 on success. 
 Find an input request, by ID. Returns NULL if the ID isn't valid. 
 Allocate slot. If none are available right away, wait. 
 Mark slot as available 
	
	  Tell our userspace application about this new request
	  by queueing an input event.
  Fail all outstanding requests so handlers don't wait for the userspace
  to finish processing them.
	
	  uinput driver does not currently support periodic effects with
	  custom waveform since it does not have a way to pass buffer of
	  samples (custom_data) to userspace. If ever there is a device
	  supporting custom waveforms we would need to define an additional
	  ioctl (UI_UPLOAD_SAMPLES) but for now we just bail out.
	
	  If we are called with file == NULL that means we are tearing
	  down the device, and therefore we can not handle FF erase
	  requests: either we are handling UI_DEV_DESTROY (and holding
	  the udev->mutex), or the file descriptor is closed and there is
	  nobody on the other side anymore.
		
		  The standard input_ff_flush() implementation does
		  not quite work for uinput as we can't reasonably
		  handle FF requests during device teardown.
	
	  Check if absminabsmaxabsfuzzabsflat are sane.
 legacy setup via write() 
 Ensure name is filled in 
		
		  Note that even if some events were fetched successfully
		  we are still going to return EFAULT instead of partial
		  count to let userspace know that it got it's buffers
		  all wrong.
 uinput is always writable 
		
		  It so happens that the pointer that gives us the trouble
		  is the last field in the structure. Since we don't support
		  custom waveforms in uinput anyway we can just copy the whole
		  thing (to the compat size) and ignore the pointer.
 force terminating '\0' 
 UI_ABS_SETUP is handled in the variable size ioctls 
 Now check variable-length commands 
  These IOCTLs change their size and thus their numbers between
  32 and 64 bits.
 SPDX-License-Identifier: GPL-2.0-only
  keyspan_remote: USB driver for the Keyspan DMR
  Copyright (C) 2005 Zymeta Corporation - Michael Downey (downey@zymeta.com)
  This driver has been put together with the support of Innosys, Inc.
  and Keyspan, Inc the manufacturers of the Keyspan USB DMR product.
 Parameters that can be passed to the driver. 
 Vendor and product ids 
 Defines for converting the data from the remote. 
 5 bits for a 0 
 6 bits for a 1 
 14 bits for a SYNC sequence 
 5 bits for the STOP sequence 
 The UIA-11 type have a 8 byte limit. 
  Table that maps the 31 possible keycodes to input keys.
  Currently there are 15 and 17 button models so RESERVED codes
  are blank areas in the mapping.
 0 is just a place holder. 
 table of devices that work with this driver 
 Terminating entry 
 Structure to store all the real stuff that a remote sends to us. 
 Structure used for all the bit testing magic needed to be done. 
 Structure to hold all of our driver specific stuff 
 variables used to parse messages from remote. 
  Debug routine that prints out what we've received from the remote.
unsigned char data)
  Routine that manages the bit_tester structure.  It makes sure that there are
  at least bits_needed bits loaded into the tester.
	
	  Somehow we've missed the last message. The message will be repeated
	  though so it's not too big a deal
 Load as much as we can into the tester. 
  Routine that handles all the logic needed to parse out the message from the remote.
		
		  In stage 0 we want to find the start of a message.  The remote sends a 0xFF as filler.
		  So the first byte that isn't a FF should be the start of a new message.
		
		  Stage 1 we should have 16 bytes and should be able to detect a
		  SYNC.  The SYNC is 14 bits, 7 0's and then 7 1's.
		
		  Stage 2 we should have 24 bytes which will be enough for a full
		  message.  We need to parse out the system code, button code,
		  toggle code, and stop.
  Routine for sending all the initialization messages to the remote.
  Routine used to handle a new message that has come in.
 Check our status in case we need to bail out early. 
 Device went away so don't keep trying to read from it. 
 we found our interrupt in endpoint 
  Routine that sets up the driver to handle a specific USB device detected on the bus.
 Set to -1 so we will always not match the toggle from the first remote message. 
	
	  Initialize the URB to access the device.
	  The urb gets sent to the device in keyspan_open()
 we can register the device now, as it is ready 
 save our data pointer in this interface device 
  Routine called when a device is disconnected from the USB.
 We have a valid driver structure so clean up everything we allocated. 
  Standard driver set up sections
 SPDX-License-Identifier: GPL-2.0-or-later
  dm355evm_keys.c - support buttons and IR remote on DM355 EVM board
  Copyright (c) 2008 by David Brownell
  The MSP430 firmware on the DM355 EVM monitors on-board pushbuttons
  and an IR receptor used for the remote control.  When any key is
  pressed, or its autorepeat kicks in, an event is sent.  This driver
  read those events from the small (32 event) queue and reports them.
  Note that physically there can only be one of these devices.
  This driver was tested with firmware revision A4.
 These initial keycodes can be remapped 
	
	  Pushbuttons on the EVM board ... note that the labels for these
	  are SW10SW11etc on the PC board.  The leftright orientation
	  comes only from the firmware's documentation, and presumes the
	  power connector is immediately in front of you and the IR sensor
	  is to the right.  (That is, rotate the board counter-clockwise
	  by 90 degrees from the SW10etc and "DM355 EVM" labels.)
 SW12 
 SW13 
 SW11 
 SW14 
 SW10 
	
	  IR buttons ... codes assigned to match the universal remote
	  provided with the EVM (Philips PM4S) using DVD code 0020.
	 
	  These event codes match firmware documentation, but other
	  remote controls could easily send more RC5-encoded events.
	  The PM4S manual was used in several cases to help select
	  a keycode reflecting the intended usage.
	 
	  RC5 codes are 14 bits, with two start bits (0x3 prefix)
	  and a toggle bit (masked out below).
 NOTE: docs omit this 
 "tvvcr..." 
 "info" 
 "up" 
 "inout" 
 "left" 
 "ok" 
 "right" 
 "cc" 
 "down" 
 NOTE: docs wrongly say 0x30ca 
  Because we communicate with the MSP430 using I2C, and all I2C calls
  in Linux sleep, we use a threaded IRQ handler.  The IRQ itself is
  active low, but we go through the GPIO controller so we can trigger
  on falling edges and not worry about enablingdisabling the IRQ in
  the keypress handling path.
	 For simplicity we ignore INPUT_COUNT and just read
	  events until we get the "queue empty" indicator.
	  Reading INPUT_LOW decrements the count.
		 Press and release a button:  two events, same code.
		  Press and hold (autorepeat), then release: N events
		  (N > 2), same code.  For RC5 buttons the toggle bits
		  distinguish (for example) "1-autorepeat" from "1 1";
		  but PCB buttons don't support that bit.
		 
		  So we must synthesize release events.  We do that by
		  mapping events to a pressrelease event pair; then
		  to avoid adding extra events, skip the second event
		  of each pair.
 ignore the RC5 toggle bit 
 find the key, or report it as unknown 
 report press + release 
----------------------------------------------------------------------
 REVISIT:  flush the event queue? 
 set up "threaded IRQ handler" 
 register 
 REVISIT:  add suspendresume when DaVinci supports it.  The IRQ should
  be able to wake up the system.  When device_may_wakeup(&pdev->dev), call
  enable_irq_wake() on suspend, and disable_irq_wake() on resume.
  I2C is used to talk to the MSP430, but this platform device is
  exposed by an MFD driver that manages I2C communications.
 SPDX-License-Identifier: GPL-2.0
 Copyright (C) 2018 BayLibre SAS
 Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
 ONKEY driver for MAXIM 7765077651 chargerpower-supply.
 SPDX-License-Identifier: GPL-2.0-or-later
  Generic GPIO beeper driver
  Copyright (C) 2013-2014 Alexander Shiyan <shc_work@mail.ru>
 Schedule work to actually turn the beeper on or off 
 SPDX-License-Identifier: GPL-2.0-only
  VTI CMA3000_D0x Accelerometer driver
  Copyright (C) 2010 Texas Instruments
  Author: Hemanth V <hemanthv@ti.com>
 Settling time delay in ms 
 Delay for clearing interrupt in us 
  Bit weights in mg for bit 0, other bits need
  multiply factor 2^n. Eight bit is the sign bit.
  Conversion for each of the eight modes to g, depending
  on G range i.e 2G or 8G. Some modes always operate in
  8G.
 Data in 2's complement, convert to mg 
 Check if free fall is detected, report immediately 
 Interrupt not for this device 
 Decode register values to milli g 
 Reset sequence 
 Settling time delay 
 if no IRQ return error 
 SPDX-License-Identifier: GPL-2.0-or-later
 NXP PCF50633 Input Driver
  (C) 2006-2008 by Openmoko, Inc.
  Author: Balaji Rao <balajirrao@openmoko.org>
  All rights reserved.
  Broken down from monstrous PCF50633 driver mainly by
  Harald Welte, Andy Green and Werner Almesberger
 We report only one event depending on the key press status 
  MAX8925 ONKEY driver
  Copyright (C) 2009 Marvell International Ltd.
       Haojian Zhuang <haojian.zhuang@marvell.com>
  This file is subject to the terms and conditions of the GNU General
  Public License. See the file "COPYING" in the main directory of this
  archive for more details.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 01 -- updown 
  MAX8925 gives us an interrupt when ONKEY is pressed or released.
  max8925_set_bits() operates I2C bus and may sleep. So implement
  it in thread IRQ handler.
 Enable hardreset to halt if system isn't shutdown on time 
  Copyright (C) 2016 Texas Instruments Incorporated - http:www.ti.com
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License as
  published by the Free Software Foundation version 2.
  This program is distributed "as is" WITHOUT ANY WARRANTY of any
  kind, whether express or implied; without even the implied warranty
  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  A generic driver to read multiple gpio lines and translate the
  encoded numeric value into an input event.
 SPDX-License-Identifier: GPL-2.0+
  Azoteq IQS269A Capacitive Touch Controller
  Copyright (C) 2020 Jeff LaBundy <jeff@labundy.com>
  This driver registers up to 3 input devices: one representing capacitive or
  inductive keys as well as Hall-effect switches, and one for each of the two
  axial sliders presented by the device.
	
	  Volunteer all active channels to participate in ATI when REDO-ATI is
	  manually triggered.
	
	  Configure the device to automatically switch between normal and low-
	  power modes as a function of sensing activity. Ultra-low-power mode,
	  if enabled, is reserved for suspend.
	
	  As per the datasheet, enable streaming during normal-power mode if
	  either slider is in use. In that case, the device returns to event
	  mode during low-power mode.
	
	  The REDO-ATI and ATI channel selection fields must be written in the
	  same block write, so every field between registers 0x80 through 0x8B
	  (inclusive) must be written as well.
			
			  Hall-effect sensing repurposes a pair of dedicated
			  channels, only one of which reports events.
	
	  The device resets itself if its own watchdog bites, which can happen
	  in the event of an I2C communication error. In this case, the device
	  asserts a SHOW_RESET interrupt and all registers must be restored.
		
		  Report BTN_TOUCH if any channel that participates in the
		  slider is in a state of touch.
	
	  The device does not deassert its interrupt (RDY) pin until shortly
	  after receiving an I2C stop condition; the following delay ensures
	  the interrupt handler does not return before this time.
	
	  Unsolicited I2C communication prompts the device to assert its RDY
	  pin, so disable the interrupt line until the operation is finished
	  and RDY has been deasserted.
	
	  Automatic power mode switching must be disabled before the device is
	  forced into any particular power mode. In this case, the device will
	  transition into normal-power mode.
	
	  The following check ensures the device has completed its transition
	  into normal-power mode before a manual mode switch is performed.
	
	  This last check ensures the device has completed its transition into
	  the desired power mode to prevent any spurious interrupts from being
	  triggered after iqs269_suspend has already returned.
	
	  This check ensures the device has returned to normal-power mode
	  before automatic power mode switching is re-enabled.
	
	  This step reports any events that may have been "swallowed" as a
	  result of polling PWR_MODE (which automatically acknowledges any
	  pending interrupts).
 SPDX-License-Identifier: GPL-2.0-only
  DRV2667 haptics driver family
  Author: Dan Murphy <dmurphy@ti.com>
  Copyright: (C) 2014 Texas Instruments, Inc.
 Contol registers 
 Waveform sequencer 
 RAM fields 
 RAM Header addresses 
 RAM data addresses 
 Control 1 Register 
 Control 2 Register 
 RAM Envelope settings 
  struct drv2667_data -
  @input_dev: Pointer to the input device
  @client: Pointer to the I2C client
  @regmap: Register map of the device
  @work: Work item used to off load the enabledisable of the vibration
  @regulator: Pointer to the regulator for the IC
  @page: Page number
  @magnitude: Magnitude of the vibration event
  @frequency: Frequency of the vibration event
	 Per the data sheet:
	  Sinusoid Frequency (Hz) = 7.8125 x Frequency
 Reset back to original page 
 Set default haptic frequency to 195Hz on Page 1
 SPDX-License-Identifier: GPL-2.0-or-later
  ON pin driver for Dialog DA9052 PMICs
  Copyright(c) 2012 Dialog Semiconductor Ltd.
  Author: David Dajun Chen <dchen@diasemi.com>
		
		  Since interrupt for deassertion of ONKEY pin is not
		  generated, onkey event state determines the onkey
		  button state.
		
		  Interrupt is generated only when the ONKEY pin
		  is asserted.  Hence the deassertion of the pin
		  is simulated through work queue.
 SPDX-License-Identifier: GPL-2.0+
   GPIO vibrator driver
   Copyright (C) 2019 Luca Weiss <luca@z3ntu.xyz>
   Based on PWM vibrator driver:
   Copyright (C) 2017 Collabora Ltd.
   Based on previous work from:
   Copyright (C) 2012 Dmitry Torokhov <dmitry.torokhov@gmail.com>
   Based on PWM beeper driver:
   Copyright (C) 2010, Lars-Peter Clausen <lars@metafoo.de>
 SPDX-License-Identifier: GPL-2.0-only
   PC Speaker beeper driver for Linux
   Copyright (c) 2002 Vojtech Pavlik
   Copyright (c) 1992 Orest Zborowski
 set command for counter 2, 2 byte write 
 select desired HZ 
 enable counter 2 
 disable counter 2 
 turn off the speaker 
 turn off the speaker 
  Texas Instruments' TPS65217 and TPS65218 Power Button Input Driver
  Copyright (C) 2014 Texas Instruments Incorporated - http:www.ti.com
  Author: Felipe Balbi <balbi@ti.com>
  Author: Marcin Niestroj <m.niestroj@grinn-global.com>
  This program is free software; you can redistribute it andor modify
  it under the terms of the GNU General Public License version 2 as
  published by the Free Software Foundation.
  This program is distributed "as is" WITHOUT ANY WARRANTY of any
  kind, whether express or implied; without even the implied warranty
  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  A driver for the Griffin Technology, Inc. "PowerMate" USB controller dial.
  v1.1, (c)2002 William R Sowerbutts <will@sowerbutts.com>
  This device is a anodised aluminium knob which connects over USB. It can measure
  clockwise and anticlockwise rotation. The dial also acts as a pushbutton with
  a spring for automatic release. The base contains a pair of LEDs which illuminate
  the translucent base. It rotates without limit and reports its relative rotation
  back to the host when polled by the USB controller.
  Testing with the knob I have has shown that it measures approximately 94 "clicks"
  for one full rotation. Testing with my High Speed Rotation Actuator (ok, it was
  a variable speed cordless electric drill) has shown that the device can measure
  speeds of up to 7 clicks either clockwise or anticlockwise between pollings from
  the host. If it counts more than 7 clicks before it is polled, it will wrap back
  to zero and start counting again. This was at quite high speed, however, almost
  certainly faster than the human hand could turn it. Griffin say that it loses a
  pulse or two on a direction change; the granularity is so fine that I never
  noticed this in practice.
  The device's microcontroller can be programmed to set the LED to either a constant
  intensity, or to a rhythmic pulsing. Several patterns and speeds are available.
  Griffin were very happy to provide documentation and free hardware for development.
  Some userspace tools are available on the web: http:sowerbutts.compowermate
 Griffin Technology, Inc. 
 Griffin PowerMate 
 Griffin soundKnob 
 Contour Design, Inc. 
 Jog and Shuttle 
 these are the command codes we send to the device 
 these refer to bits in the powermate_device's requires_update field. 
 at least two versions of the hardware exist, with differing payload
   sizes. the first three bytes always contain the "interesting" data in
 physical settings which are out of sync
 Callback for data arriving from the PowerMate over the USB interrupt pipe 
 success 
 this urb is terminated, clean up 
 handle updates to device state 
 Decide if we need to issue a control message and do so. Must be called with pm->lock taken 
 no updates are required 
 an update is already in progress; it'll issue this update when it completes 
		 the powermate takes an operation and an argument for its pulse algorithm.
		   the operation can be:
		   0: divide the speed
		   1: pulse at normal speed
		   2: multiply the speed
		   the argument only has an effect for operations 0 and 2, and ranges between
		   1 (least effect) to 255 (maximum effect).
		   thus, several states are equivalent and are coalesced into one state.
		   we map this onto a range from 0 to 510, with:
		   0 -- 254    -- use divide (0 = slowest)
		   255         -- use normal speed
		   256 -- 510  -- use multiple (510 = fastest).
		   Only values of 'arg' quite close to 255 are particularly usefulspectacular.
 divide
 multiply
 normal speed
 can be any value
 fudge the bug 
	printk("powermate: %04x %04x\n", pm->configcr->wValue, pm->configcr->wIndex); 
 vendor request 
 Called when our asynchronous control message completes. We may need to issue another immediately 
 Set the LED up as described and begin the sync with the hardware if required 
 mark state updates which are required 
 Callback from the Input layer when an event arrives from userspace to configure the LED 
		
		    bits  0- 7: 8 bits: LED brightness
		    bits  8-16: 9 bits: pulsing speed modifier (0 ... 510); 0-254 = slower, 255 = standard, 256-510 = faster.
		    bits 17-18: 2 bits: pulse table (0, 1, 2 valid)
		    bit     19: 1 bit : pulse whilst asleep?
		    bit     20: 1 bit : pulse constantly?
 bits 0-7
 bits 8-16
 bits 17-18
 bit 19
 bit 20
 Called whenever a USB device matching one in our supported devices table is connected 
 get a handle to the interrupt data pipe 
 register our interrupt URB with the USB system 
 force an update of everything 
 set default pulse parameters
 Called when a USB device we've accepted ownership of is removed 
 Terminating entry 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for Freescale's 3-Axis Accelerometer MMA8450
   Copyright (C) 2011 Freescale Semiconductor, Inc. All Rights Reserved.
 register definitions 
 Initialize the MMA8450 chip 
 enable all events from XYZ, no FIFO 
	
	  Sleep mode poll rate - 50Hz
	  System output data rate - 400Hz
	  Full scale selection - Active, +- 2G
  I2C initprobingexit functions
 sentinel  }
 SPDX-License-Identifier: GPL-2.0+
  Azoteq IQS626A Capacitive Touch Controller
  Copyright (C) 2020 Jeff LaBundy <jeff@labundy.com>
  This driver registers up to 2 input devices: one representing capacitive or
  inductive keys as well as Hall-effect switches, and one for a trackpad that
  can express various gestures.
			
			  Trackpad touch events are simply described under the
			  trackpad child node.
		
		  In the case of the generic channels, the charge cycle time
		  field doubles in size and straddles two separate registers.
	
	  Enable streaming during normal-power mode if the trackpad is used to
	  report raw coordinates instead of gestures. In that case, the device
	  returns to event mode during low-power mode.
	
	  Present the trackpad as a traditional pointing device if no gestures
	  have been mapped to a keycode.
	
	  The device resets itself if its own watchdog bites, which can happen
	  in the event of an I2C communication error. In this case, the device
	  asserts a SHOW_RESET interrupt and all registers must be restored.
	
	  Unlike the ULP or generic channels, the Hall channel does not have a
	  direction flag. Instead, the direction (i.e. magnet polarity) can be
	  derived based on the sign of the 2's complement differential output.
	
	  The following completion signals that ATI has finished, any initial
	  switch states have been reported and the keypad can be registered.
			
			  Momentary gestures are followed by a complementary
			  release cycle so as to emulate a full keystroke.
	
	  The device does not deassert its interrupt (RDY) pin until shortly
	  after receiving an I2C stop condition; the following delay ensures
	  the interrupt handler does not return before this time.
	
	  The keypad may include one or more switches and is not registered
	  until ATI is complete and the initial switch states are read.
	
	  Automatic power mode switching must be disabled before the device is
	  forced into any particular power mode. In this case, the device will
	  transition into normal-power mode.
	
	  The following check ensures the device has completed its transition
	  into normal-power mode before a manual mode switch is performed.
	
	  This last check ensures the device has completed its transition into
	  the desired power mode to prevent any spurious interrupts from being
	  triggered after iqs626_suspend has already returned.
	
	  This check ensures the device has returned to normal-power mode
	  before automatic power mode switching is re-enabled.
	
	  This step reports any events that may have been "swallowed" as a
	  result of polling PWR_MODE (which automatically acknowledges any
	  pending interrupts).
 SPDX-License-Identifier: GPL-2.0-or-later
  AD714X CapTouch Programmable Controller driver supporting AD71423787A
  Copyright 2009-2011 Analog Devices Inc.
  driver information which will be used to maintain the software flow
	
	  Unlike sliderwheeltouchpad, all buttons point to
	  same input_dev instance
  information to integrate all things which will be private data
  of spii2c device
  One button can connect to multi positive and negative of CDCs
  Multi-buttons can connect to same positivenegative of one CDC
  The response of a sensor is defined by the absolute number of codes
  between the current CDC value and the ambient value.
  The formulae are very straight forward. It uses the sensor with the
  highest response and the 2 adjacent ones.
  When Sensor 0 has the highest response, only sensor 0 and sensor 1
  are used in the calculations. Similarly when the last sensor has the
  highest response, only the last sensor and the second last sensors
  are used in the calculations.
  For i= idx_of_peak_Sensor-1 to i= idx_of_peak_Sensor+1
          v += Sensor response(i)i
          w += Sensor response(i)
  POS=(Number_of_Positions_Wanted(Number_of_Sensors_Used-1)) (vw)
  To minimise the Impact of the noise on the algorithm, ADI developed a
  routine that filters the CDC results after they have been read by the
  host processor.
  The filter used is an Infinite Input Response(IIR) filter implemented
  in firmware and attenuates the noise on the CDC results after they've
  been read by the host processor.
  Filtered_CDC_result = (Filtered_CDC_result  (10 - Coefficient) +
 				Latest_CDC_result  Coefficient)10
			 In End of Conversion interrupt mode, the AD714X
			  continuously generates hardware interrupts.
				 When the user lifts off the sensor, configure
				  the AD714X back to threshold interrupt mode.
  When the scroll wheel is activated, we compute the absolute position based
  on the sensor values. To calculate the position, we first determine the
  sensor that has the greatest response among the 8 sensors that constitutes
  the scrollwheel. Then we determined the 2 sensors on either sides of the
  sensor with the highest response and we apply weights to these sensors.
  When the scroll wheel is activated, we compute the absolute position based
  on the sensor values. To calculate the position, we first determine the
  sensor that has the greatest response among the sensors that constitutes
  the scrollwheel. Then we determined the sensors on either sides of the
  sensor with the highest response and we apply weights to these sensors. The
  result of this computation gives us the mean value.
			 In End of Conversion interrupt mode, the AD714X
			  continuously generates hardware interrupts.
				 When the user lifts off the sensor, configure
				  the AD714X back to threshold interrupt mode.
  If 2 fingers are touching the sensor then 2 peaks can be observed in the
  distribution.
  The arithmetic doesn't support to get absolute coordinates for multi-touch
  yet.
  If only one finger is used to activate the touch pad then only 1 peak will be
  registered in the distribution. This peak and the 2 adjacent sensors will be
  used in the calculation of the absolute position. This will prevent hand
  shadows to affect the absolute position calculation.
  To prevent distortion from showing in the absolute position, it is
  necessary to detect the end points. When endpoints are detected, the
  driver stops updating the status variables with absolute positions.
  End points are detected on the 4 edges of the touchpad sensor. The
  method to detect them is the same for all 4.
  To detect the end points, the firmware computes the difference in
  percent between the sensor on the edge and the adjacent one. The
  difference is calculated in percent in order to make the end point
  detection independent of the pressure.
 left endpoint detect 
 right endpoint detect 
 top endpoint detect 
 bottom endpoint detect 
			 In End of Conversion interrupt mode, the AD714X
			  continuously generates hardware interrupts.
				 When the user lifts off the sensor, configure
				  the AD714X back to threshold interrupt mode.
 configuration CDC and interrupts 
 clear all interrupts 
 initialize and request swhw resources 
 a slider uses one input_dev instance 
 a wheel uses one input_dev instance 
 a touchpad uses one input_dev instance 
 all buttons use one input node 
 resume to non-shutdown mode 
	 make sure the interrupt output line is not low level after resume,
	  otherwise we will get no chance to enter falling-edge irq again
 SPDX-License-Identifier: GPL-2.0-or-later
   atlas_btns.c - Atlas Wallmount Touchscreen ACPI Extras
   Copyright (C) 2006 Jaya Kumar
   Based on Toshiba ACPI by John Belmonte and ASUS ACPI
   This work was sponsored by CIS(M) Sdn Bhd.
 button handling code 
 hookup button handler 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for the VoIP USB phones with CM109 chipsets.
  Copyright (C) 2007 - 2008 Alfred E. Heggestad <aeh@db.org>
    Tested devices:
 	- Komunikate KIP1000
 	- Genius G-talk
 	- Allied-Telesis Corega USBPH01
 	- ...
  This driver is based on the yealink.c driver
  Thanks to:
    - Authors of yealink.c
    - Thomas Reitmayr
    - Oliver Neukum for good review comments and code
    - Shaun Jackman <sjackman@gmail.com> for Genius G-talk keymap
    - Dmitry Torokhov for valuable input and review
  Todo:
    - Readwrite EEPROM
 HID Registers 
 RecordPlayback-mute button, Volume updown  
 GPI, generic registers or EEPROM_DATA0       
 Generic registers or EEPROM_DATA1            
 Generic registers or EEPROM_CTRL             
 Mapping control, buzzer, SPDIF (offset 0x04) 
 GPO - General Purpose Output                 
 Set GPIO to inputoutput mode                
 SPDIF status channel or EEPROM_CTRL          
 HID_IR0 
 HID_OR0 
	 bits 7-6
	   0: HID_OR1-2 are used for GPO; HID_OR0, 3 are used for buzzer
	      and SPDIF
	   1: HID_OR0-3 are used as generic HID registers
	   2: Values written to HID_OR0-3 are also mapped to MCU_CTRL,
	      EEPROM_DATA0-1, EEPROM_CTRL (see Note)
	   3: Reserved
 up to 256 normal keys, up to 15 special key combinations 
 CM109 protocol packet 
 CM109 device structure 
 input device 
 usb device 
 irq input channel 
 control output channel 
	
	  The 3 bitfields below are protected by ctl_submit_lock.
	  They have to be separate since they are accessed from IRQ
	  context.
 irq_urb is in flight 
 ctl_urb is in flight 
 need to issue buzz command 
 onoff 
 flags 
 This mutex protects writes to the above flags 
 physical device path 
 last reported key 
 0=new scan  1,2,4,8=scan columns  
 Cached value of GPI (high nibble) 
  CM109 key interface
 Map device buttons to internal key events.
  The "up" and "down" keys, are symbolised by arrows on the button.
  The "pickup" and "hangup" keys are symbolised by a green and red phone
  on the button.
 Komunikate KIP1000 Keyboard Matrix
     -> -- 1 -- 2 -- 3  --> GPI pin 4 (0x10)
      |    |    |    |
     <- -- 4 -- 5 -- 6  --> GPI pin 5 (0x20)
      |    |    |    |
     END - 7 -- 8 -- 9  --> GPI pin 6 (0x40)
      |    |    |    |
     OK --  -- 0 -- #  --> GPI pin 7 (0x80)
      |    |    |    |
     |\  |\  |\  |\
      |    |    |    |
GPO
pin:  3    2    1    0
     0x8  0x4  0x2  0x1
 phone key:   
   0          
   1          
   2          
   3          
   4          
   5          
   6          
   7          
   8          
   9          
   #          
   pickup     
   hangup     
   IN         
   OUT        
  Contributed by Shaun Jackman <sjackman@gmail.com>
  Genius G-Talk keyboard matrix
     0 1 2 3
  4: 0 4 8 Talk
  5: 1 5 9 End
  6: 2 6 # Up
  7: 3 7  Down
 # 
 Talk (green handset) 
 End (red handset) 
 Menu up (rocker switch) 
 Menu down (rocker switch) 
  Keymap for Allied-Telesis Corega USBPH01
  http:www.alliedtelesis-corega.com2134414371360chprd.html
  Contributed by july@nat.bg
   0          
   1          
   2          
   3          
   4          
   5          
   6          
   7          
   8          
   9          
   #          
   pickup     
   hangup     
   IN         
   OUT        
  Keymap for ATCom AU-100
  http:www.atcom.cnproducts.html 
  http:www.packetizer.comproductsau100
  http:www.voip-info.orgwikiviewAU-100
  Contributed by daniel@gimpelevich.san-francisco.ca.us
 phone key:   
   0          
   1          
   2          
   3          
   4          
   5          
   6          
   7          
   8          
   9          
   #          
   pickup     
   hangup     
 left arrow   
 right arrow  
  Completes a request by converting the data into events for the
  input subsystem.
 old key up 
 new valid key 
  Converts data of special key presses (volume, mute) into events
  for the input subsystem, sends press-n-release for mute keys.
  CM109 usb communication interface
  IRQ handler
 Special keys 
 Scan key column 
 Any changes ? 
 ask for key data 
 URB completion will resubmit 
	
	  Make sure other CPUs see this
		
		  Restore buzzer state.
		  This will also kick regular URB submission
  input event interface
 no keys pressed 
 issue INIT 
	
	  Once we are here event delivery is stopped so we
	  don't need to worry about someone starting buzzer
	  again
  Linux interface and usb initialisation
 C-Media Electronics 
 CM109 defines range 0x0008 - 0x000f 
 table of devices that work with this driver 
 you can add more devices here with product ID 0x0008 - 0x000f 
 parameter validation in coreurb 
 parameter validation in coreurb 
 allocate usb buffers 
 allocate urb structures 
 get a handle to the interrupt data pipe 
 initialise irq urb 
 initialise ctl urb 
 find out the physical bus location 
 register settings for the input device 
 register available key events 
	
	  Make sure input events don't try to toggle buzzer
	  while we are resetting
 Load the phone keymap 
  Marvell 88PM80x ONKEY driver
  Copyright (C) 2012 Marvell International Ltd.
  Haojian Zhuang <haojian.zhuang@marvell.com>
  Qiao Zhou <zhouqiao@marvell.com>
  This file is subject to the terms and conditions of the GNU General
  Public License. See the file "COPYING" in the main directory of this
  archive for more details.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 1 .. 16 seconds 
 88PM80x gives us an interrupt when ONKEY is held 
 Enable long onkey detection 
 Set 8-second interval 
 SPDX-License-Identifier: GPL-2.0-only
  Implements I2C interface for VTI CMA300_D0x Accelerometer driver
  Copyright (C) 2010 Texas Instruments
  Author: Hemanth V <hemanthv@ti.com>
 SPDX-License-Identifier: GPL-2.0
 Copyright (C) STMicroelectronics 2018
 Author: Pascal Paillet <p.paillet@st.com> for STMicroelectronics.
  struct stpmic1_onkey - OnKey data
  @input_dev:		pointer to input device
  @irq_falling:	irq that we are hooked on to
  @irq_rising:		irq that we are hooked on to
 interrupt is nested in a thread 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2010-2011, Code Aurora Forum. All rights reserved.
 Regulator master enable addresses 
 Regulator control registers for shutdownreset 
 Buck CTRL register 
 Buck TEST2 registers for shutdownreset 
 Buck TEST2 register bank 1 
 Buck TEST2 register bank 7 
  struct pmic8xxx_pwrkey - pmic8xxx pwrkey information
  @key_press_irq: key press irq number
  @regmap: device regmap
  @shutdown_fn: shutdown configuration function
	
	  Select action to perform (reset or shutdown) when PS_HOLD goes low.
	  Also ensure that KPD, CBL0, and CBL1 pull ups are enabled and that
	  USB charging is enabled.
  Set an SMPS regulator to be disabled in its CTRL register, but enabled
  in the master enable register.  Also set it's pull down enable bit.
  Take care to make sure that the output voltage doesn't change if switching
  from advanced mode to legacy mode.
 Check if in advanced mode. 
 Determine current output voltage. 
 Round up if fine step is in use. 
 Set VLOW_SEL bit. 
 Switch to legacy mode 
 Enable locally, enable pull down, keep voltage the same. 
 Enable in master control register. 
 Disable locally and enable pull down. 
 Enable LDO in master control register. 
 Disable LDO in CTRL register and set pull down 
 When shutting down, enable active pulldowns on important rails. 
 Disable SMPS's 0,1,3 locally and set pulldown enable bits. 
 Disable LDO 21 locally and set pulldown enable bit. 
	
	  Fix-up: Set regulator LDO22 to 1.225 V in high power mode. Leave its
	  pull-down state intact. This ensures a safe shutdown.
 Enable SMPL if resetting is desired 
 Enable SMPL if resetting is desired 
 Valid range of pwr key trigger delay is 164 sec to 2 seconds. 
 SPDX-License-Identifier: GPL-2.0-or-later
  AD714X CapTouch Programmable Controller driver (SPI bus)
  Copyright 2009-2011 Analog Devices Inc.
 BUS_SPI 
 bits 15:11 
 SPDX-License-Identifier: GPL-2.0-or-later
  ADLX345346 Three-Axis Digital Accelerometers (I2C Interface)
  Enter bugs at http:blackfin.uclinux.org
  Copyright (C) 2009 Michael Hennerich, Analog Devices Inc.
 BUS_I2C 
	
	  The ADXL346 is backward-compatible with the ADXL345. Differences are
	  handled by runtime detection of the device model, there's thus no
	  need for listing the "adi,adxl346" compatible value explicitly.
	
	  Deprecated, DT nodes should use one or more of the device-specific
	  compatible values "adi,adxl345" and "adi,adxl346".
 SPDX-License-Identifier: GPL-2.0-or-later
  ON pin driver for Dialog DA9055 PMICs
  Copyright(c) 2012 Dialog Semiconductor Ltd.
  Author: David Dajun Chen <dchen@diasemi.com>
		
		  Onkey status bit is cleared when onkey button is released.
	
	  Interrupt is generated only when the ONKEY pin is asserted.
	  Hence the deassertion of the pin is simulated through work queue.
  wm831x-on.c - WM831X ON pin driver
  Copyright (C) 2009 Wolfson Microelectronics plc
  This file is subject to the terms and conditions of the GNU General
  Public License. See the file "COPYING" in the main directory of this
  archive for more details.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  The chip gives us an interrupt when the ON pin is asserted but we
  then need to poll to see when the pin is deasserted.
 SPDX-License-Identifier: GPL-2.0-only
  ati_remote2 - ATIPhilips USB RF remote driver
  Copyright (C) 2005-2008 Ville Syrjala <syrjala@sci.fi>
  Copyright (C) 2007-2008 Peter Stokes <linux@dadeos.co.uk>
  ATI Remote Wonder II Channel Configuration
  The remote control can be assigned one of sixteen "channels" in order to facilitate
  the use of multiple remote controls within range of each other.
  A remote's "channel" may be altered by pressing and holding the "PC" button for
  approximately 3 seconds, after which the button will slowly flash the count of the
  currently configured "channel", using the numeric keypad enter a number between 1 and
  16 and then press the "PC" button again, the button will slowly flash the count of the
  newly configured "channel".
 ATI Remote Wonder II 
 AUX1-AUX4 and PC 
 Each mode (AUX1-AUX4 and PC) can have an independent keymap. 
		
		  For some incomprehensible reason the mouse pad generates
		  events which look identical to the events from the last
		  pressed mode key. Naturally we don't want to generate key
		  events for the mouse pad so we filter out any subsequent
		  events from the same mode key.
 release 
 press 
 repeat 
 No repeat for mouse buttons. 
 AUX1-AUX4 and PC generate the same scancode. 
	
	  Configure receiver to only accept input from remote "channel"
	   channel == 0  -> Accept input from any remote channel
	   channel == 1  -> Only accept input from remote channel 1
	   channel == 2  -> Only accept input from remote channel 2
	   ...
	   channel == 16 -> Only accept input from remote channel 16
 Sanity check, first interface must have an endpoint 
 Sanity check, the device must have two interfaces 
 Sanity check, second interface must have an endpoint 
 SPDX-License-Identifier: GPL-2.0-only
  Source for:
  Cypress TrueTouch(TM) Standard Product (TTSP) SPI touchscreen driver.
  For use with Cypress Txx4xx parts.
  Supported parts include:
  TMA4XX
  TMA1036
  Copyright (C) 2009, 2010, 2011 Cypress Semiconductor, Inc.
  Copyright (C) 2012 Javier Martinez Canillas <javier@dowhile0.org>
  Copyright (C) 2013 Cypress Semiconductor
  Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
 r~w 
 from TRM A protocol 
	
	  We set both TX and RX buffers because Cypress TTSP
	  requires full duplex operation.
		
		  do not return here since was a bad ACK sequence
		  let the following ACK check handle any errors and
		  allow silent retries
 Set up SPI
  Touchscreen driver for the tps6507x chip.
  Copyright (c) 2009 RidgeRun (todd.fischer@ridgerun.com)
  Credits:
     Using code from tsc2007, MtekVision Co., Ltd.
  For licencing details see kernel-baseCOPYING
  TPS65070, TPS65073, TPS650731, and TPS650732 support
  10 bit touch screen interface.
 ms 
 Route input signal to AD converter 
 Start AD conversion 
 Need to call tps6507x_adc_standby() after using AD converter for the
  touch screen interrupt to work properly.
	
	  tps_board points to pmic related constants
	  coming from the board-evm file.
	
	  init_data points to array of regulator_init structures
	  coming from the board-evm file.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2016 Golden Delicious Comp. GmbH&Co. KG
 	Nikolaus Schaller <hns@goldelico.com>
 Ohms? 
 Prepare for next touch reading - power down ADC, enable PENIRQ 
 SPDX-License-Identifier: GPL-2.0-only
  Penmount serial touchscreen driver
  Copyright (c) 2006 Rick Koch <n1gp@hotmail.com>
  Copyright (c) 2011 John Sung <penmount.touch@gmail.com>
  Based on ELO driver (driversinputtouchscreenelo.c)
  Copyright (c) 2004 Vojtech Pavlik
  Definitions & global arrays.
  Multi-touch slot
 is the touch valid? 
  Per-touchscreen data.
  pm_mtevent() sends mt events and also emulates pointer movement
  pm_checkpacket() checks if data packet is valid
  pm_disconnect() is the opposite of pm_connect()
  pm_connect() is the routine that is called when someone adds a
  new serio device that supports PenMount protocol and registers it as
  an input device.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0-only
  Driver for the Freescale Semiconductor MC13783 touchscreen.
  Copyright 2004-2007 Freescale Semiconductor, Inc. All Rights Reserved.
  Copyright (C) 2009 Sascha Hauer, Pengutronix
  Initial development of this code was funded by
  Phytec Messtechnik GmbH, http:www.phytec.de
	
	  Kick off reading coordinates. Note that if work happens already
	  be queued for future execution (it rearms itself) it will not
	  be rescheduled for immediate execution here. However the rearm
	  delay is HZ  50 which is acceptable.
	
	  the values are 10-bit wide only, but the two least significant
	  bits are for future 12 bit use and reading yields 0
 report the median coordinate and average pressure 
 SPDX-License-Identifier: GPL-2.0-or-later
  Atmel maXTouch Touchscreen driver
  Copyright (C) 2010 Samsung Electronics Co.Ltd
  Copyright (C) 2011-2014 Atmel Corporation
  Copyright (C) 2012 Google, Inc.
  Copyright (C) 2016 Zodiac Inflight Innovations
  Author: Joonyoung Shim <jy0922.shim@samsung.com>
 Firmware files 
 Registers 
 Object types 
 MXT_GEN_MESSAGE_T5 object 
 MXT_GEN_COMMAND_T6 field 
 Define for T6 status byte 
 MXT_GEN_POWER_T7 field 
 MXT_TOUCH_MULTI_T9 field 
 MXT_TOUCH_MULTI_T9 status 
 MXT_TOUCH_MULTI_T9 orient 
 MXT_SPT_COMMSCONFIG_T18 
 MXT_DEBUG_DIAGNOSTIC_T37 
 Define for MXT_GEN_COMMAND_T6 
 T100 Multiple Touch Touchscreen 
 Delay times 
 msec 
 msec 
 msec 
 msec 
 msec 
 msec 
 msec 
 msec 
 msec 
 Command to unlock bootloader 
 Bootloader mode status 
 valid 7 6 bit only 
 valid 7 6 bit only 
 valid 7 8 bit only 
 Touchscreen absolute values 
 Config update context 
 Each client has this additional data 
 device physical location 
 Cached parameters from object table 
 for fw update in bootloader 
 for reset handling 
 for config update handling 
 Chips after 1664S use different scheme 
 for normal case 
 Check app crc fail mode 
		
		  In application update mode, the interrupt
		  line signals state transitions. We must wait for the
		  CHG assertion before reading the status byte.
		  Once the status byte has been read, the line is deasserted.
			
			  TODO: handle -ERESTARTSYS better by terminating
			  fw update process before returning to userspace
			  by writing length 0x000 to device (iff we are in
			  WAITING_FRAME_DATA state).
 Write register 
 Read data 
 Detect reset 
 Output debug if status has changed 
 Save current status 
 Active-low switch 
 Handle 1012 bit switching 
		
		  Multiple bits may be set if the host is slow to read
		  the status messages, indicating all the events that
		  have happened.
 if active, pressure must be non-zero 
 Touch active 
 Touch no longer active, close out slot 
 ignore SCRSTATUS events 
			
			  Passive stylus is reported with size zero so
			  hardcode.
 Ignore suppressed touch 
	
	  Values reported should be non-zero if tool is touching the
	  device
 close out slot 
		
		  Do not report events if input device
		  is not yet registered.
 Safety check for msg_buf 
 Process remaining messages if necessary 
 return number of messages read 
 Read T44 and T5 together 
	
	  This condition may be caused by the CHG line being configured in
	  Mode 0. It results in unnecessary I2C operations but it is benign.
 Process first message 
 Process remaining messages if necessary 
 Read messages until we force an invalid 
 include final invalid message 
 if there were invalid messages, then we are done 
 keep reading two msgs until one is invalid or reportid limit 
 bootloader state transition completion 
 Ignore CHG line for 100ms after reset 
	
	  On failure, CRC is set to 0 and config will always be
	  downloaded.
	
	  Wait for crc message. On failure, CRC is set to 0 and config will
	  always be downloaded.
 if len is odd, fill the last byte with 0 
 Mask to 24-bit 
 Read type, instance, length 
 EOF 
 Skip object 
			
			  Either we are in fallback mode due to wrong
			  config or config from a later fw version,
			  or the file is corrupt or hand-edited.
			
			  If firmware is upgraded, new bytes may be added to
			  end of objects. It is generally forward compatible
			  to zero these bytes - previous behaviour will be
			  retained. However this does invalidate the CRC and
			  will force fallback mode until the configuration is
			  updated. We warn here but do nothing else - the
			  malloc has zeroed the entire configuration.
 Write configuration as blocks 
  mxt_update_cfg - download configuration to chip
  Atmel Raw Config File Format
  The first four lines of the raw config file contain:
   1) Version
   2) Chip ID Information (first 7 bytes of device memory)
   3) Chip Information Block 24-bit CRC Checksum
   4) Chip Configuration 24-bit CRC Checksum
  The rest of the file consists of one line per object instance:
    <TYPE> <INSTANCE> <SIZE> <CONTENTS>
    <TYPE> - 2-byte object type as hex
    <INSTANCE> - 2-byte object instance number as hex
    <SIZE> - 2-byte object size as hex
    <CONTENTS> - array of <SIZE> 1-byte hex values
 Make zero terminated copy of the OBP_RAW file 
 Load information block and check 
 Read CRCs 
	
	  The Info Block CRC is calculated over mxt_info and the object
	  table. If it does not match then we are trying to load the
	  configuration from a different chip or firmware version, so
	  the configuration CRC is invalid anyway.
 Malloc memory to store configuration 
 Calculate crc of the received configs (not the raw config file) 
 T7 config may have changed 
 Valid Report IDs start counting from 1 
				
				  On mXT224 firmware versions prior to V2.0
				  read and discard unused CRC byte otherwise
				  DMA reads are misaligned.
 CRC not enabled, so skip last byte 
 Only handle messages from first T9 instance 
 first two report IDs reserved 
 Store maximum reportid 
 If T44 exists, T5 position has to be directly after 
 If info block already allocated, free it 
 Read 7-byte ID information block starting at address 0 
 Resize buffer to give space for rest of info block 
 Read rest of info block 
 Extract & calculate checksum 
	
	  CRC mismatch can be caused by data corruption due to I2C comms
	  issue or else device is not using Object Based Protocol (eg i2c-hid)
 Parse object table information 
 read touchscreen dimensions 
 read orientation config 
 allocate aux bytes 
 Handle default values and orientation switch 
 Register input device 
 For single touch 
 If device has buttons we assume it is a touchpad 
 For multi touch 
 Check bootloader state 
 Chip is not in appmode or bootloader mode 
 OK, we are in bootloader, see if we can recover 
			
			  We can reflash from this state, so do not
			  abort initialization.
 Attempt to exit bootloader into app mode 
 Handle orientation 
 Next value 
 Read back command byte 
 Field is cleared once the command has been processed 
 Read T37 page 
 For remaining pages, write PAGEUP rather than mode 
 V4L2 structures 
 Calculate size of data and allocate buffer 
 init channel to zero 
 register video device 
 initialize the queue 
 Firmware Version is returned as Major.Minor.Build 
 Hardware Version is returned as FamilyID.VariantID 
 Pre-allocate buffer large enough to hold max sized object. 
	
	  To convert file try:
	  xxd -r -p mXTXXX__APP_VX-X-XX.enc > maxtouch.fw
 Check for incorrect enc file 
 Change to the bootloader mode 
 Do not need to scan since we know family ID 
 Bootloader may still be unlocked from previous attempt 
 Unlock bootloader 
 Take account of CRC bytes 
 Write one frame to device 
 Back off by 20ms per retry 
 Wait for flash. 
	
	  Wait for device to reset. Some bootloader versions do not assert
	  the CHG line after bootloading has finished, so ignore potential
	  errors.
 Touch enable 
 0x83 = SCANEN | RPTEN | ENABLE 
 Recalibrate since chip has been in deep sleep 
 Touch disable 
	
	  Ignore devices that do not have device properties attached to
	  them, as we need help determining whether we are dealing with
	  touch screen or touchpad.
	 
	  So far on x86 the only users of Atmel touch controllers are
	  Chromebooks, and chromeos_laptop driver will ensure that
	  necessary properties are provided (if firmware does not do that).
	
	  Ignore ACPI devices representing bootloader mode.
	 
	  This is a bit of a hack: Google Chromebook BIOS creates ACPI
	  devices for both application and bootloader modes, but we are
	  interested in application mode only (if device is in bootloader
	  mode we'll end up switching into application anyway). So far
	  application mode addresses were all above 0x40, so we'll use it
	  as a threshold.
	
	  VDDA is the analog voltage supply 2.57..3.47 V
	  VDD  is the digital voltage supply 1.71..3.47 V
 Request the RESET line as asserted so we go into reset 
 Request the WAKE line as asserted so we go out of sleep 
	
	  The device takes 40ms to come up after power-on according
	  to the mXT224 datasheet, page 13.
 Wait a while and then de-assert the RESET GPIO line 
	
	  Controllers like mXT1386 have a dedicated WAKE line that could be
	  connected to a GPIO or to I2C SCL pin, or permanently asserted low.
	 
	  This WAKE line is used for waking controller from a deep-sleep and
	  it needs to be asserted low for 25 milliseconds before I2C transfers
	  could be accepted by controller if it was in a deep-sleep mode.
	  Controller will go into sleep automatically after 2 seconds of
	  inactivity if WAKE line is deasserted and deep sleep is activated.
	 
	  If WAKE line is connected to I2C SCL pin, then the first I2C transfer
	  will get an instant NAK and transfer needs to be retried after 25ms.
	 
	  If WAKE line is connected to a GPIO line, the line must be asserted
	  25ms before the host attempts to communicate with the controller.
 Compatibles listed below are deprecated 
 Touchpad 
 Touchscreen 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  h3600 atmel micro companion support, touchscreen subdevice
  Author : Alessandro Gardich <gremlin@gremlin.it>
  Author : Dmitry Artamonow <mad_soft@inbox.ru>
  Author : Linus Walleij <linus.walleij@linaro.org>
 SPDX-License-Identifier: GPL-2.0
  ADC generic resistive touchscreen (GRTS)
  This is a generic input driver that connects to an ADC
  given the channels in device tree, and reports events to the input
  subsystem.
  Copyright (C) 2017,2018 Microchip Technology,
  Author: Eugen Hristev <eugen.hristev@microchip.com>
  struct grts_state - generic resistive touch screen information struct
  @x_plate_ohms:	resistance of the X plate
  @pressure_min:	number representing the minimum for the pressure
  @pressure:		are we getting pressure info or not
  @iio_chans:		list of channels acquired
  @iio_cb:		iio_callback buffer for the data
  @input:		the input device structure that we register
  @prop:		touchscreen properties struct
  @ch_map:		map of channels that are defined for the touchscreen
			
			  On increased pressure the resistance (Rt) is
			  decreasing so, convert values to make it looks as
			  real pressure.
 report end of touch 
 report proper touch to subsystem
 pressure is optional 
 if no pressure is defined, try optional z1 + z2 
 if z1 is provided z2 is not optional 
 get the channels from IIO device 
 parse optional device tree properties 
 sentinel 
 SPDX-License-Identifier: GPL-2.0-only
  cyttsp_i2c.c
  Cypress TrueTouch(TM) Standard Product (TTSP) I2C touchscreen driver.
  For use with Cypress Txx3xx parts.
  Supported parts include:
  CY8CTST341
  CY8CTMA340
  Copyright (C) 2009, 2010, 2011 Cypress Semiconductor, Inc.
  Copyright (C) 2012 Javier Martinez Canillas <javier@dowhile0.org>
  Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  Elo serial touchscreen driver
  Copyright (c) 2004 Vojtech Pavlik
  This driver can handle serial Elo touchscreens using either the Elo standard
  'E271-2210' 10-byte protocol, Elo legacy 'E281A-4002' 6-byte protocol, Elo
  legacy 'E271-140' 4-byte protocol and Elo legacy 'E261-280' 3-byte protocol.
  Definitions & global arrays.
  Per-touchscreen data.
 We are back in reporting mode, the command was ACKed 
  elo_disconnect() is the opposite of elo_connect()
  elo_connect() is the routine that is called when someone adds a
  new serio device that supports Gunze protocol and registers it as
  an input device.
 10-byte protocol 
 6-byte protocol 
 4-byte protocol 
 3-byte protocol 
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0-only
  Sahara TouchIT-213 serial touchscreen driver
  Copyright (c) 2007-2008 Claudio Nieder <private@claudio.ch>
  Based on Touchright driver (driversinputtouchscreentouchright.c)
  Copyright (c) 2006 Rick Koch <n1gp@hotmail.com>
  Copyright (c) 2004 Vojtech Pavlik
  and Dan Streetman <ddstreet@ieee.org>
  Definitions & global arrays.
  Data is received through COM1 at 9600bits,8bit,no parity in packets
  of 5 byte each.
    +--------+   +--------+   +--------+   +--------+   +--------+
    |1000000p|   |0xxxxxxx|   |0xxxxxxx|   |0yyyyyyy|   |0yyyyyyy|
    +--------+   +--------+   +--------+   +--------+   +--------+
                     MSB          LSB          MSB          LSB
  The value of p is 1 as long as the screen is touched and 0 when
  reporting the location where touching stopped, e.g. where the pen was
  lifted from the screen.
  When holding the screen in landscape mode as the BIOS text output is
  presented, x is the horizontal axis with values growing from left to
  right and y is the vertical axis with values growing from top to
  bottom.
  When holding the screen in portrait mode with the Sahara logo in its
  correct position, x ist the vertical axis with values growing from
  top to bottom and y is the horizontal axis with values growing from
  right to left.
  On my Sahara Touch-IT 213 I have observed x values from 0 to 0x7f0
  and y values from 0x1d to 0x7e9, so the actual measurement is
  probably done with an 11 bit precision.
  Per-touchscreen data.
  touchit213_disconnect() is the opposite of touchit213_connect()
  touchit213_connect() is the routine that is called when someone adds a
  new serio device that supports the Touchright protocol and registers it as
  an input device.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0-only
  Raydium touchscreen I2C driver.
  Copyright (C) 2012-2014, Raydium Semiconductor Corporation.
  Raydium reserves the right to make changes without further notice
  to the materials described herein. Raydium does not assume any
  liability arising out of the application described herein.
  Contact Raydium Semiconductor Corporation at www.rad-ic.com
 Slave I2C mode 
 I2C bootoloader commands 
 send bl page write 
 send bl write 
 send ack
 send data check 
 send wait bl data ready
 bl data ready 
 read hwid 
 I2C main commands 
 Touch relative info 
 Offsets in contact data 
 Bootloader relative info 
 bl flash wrt cmd size 
 bl wrt pkg size 
 Response to RM_CMD_DATA_BANK request 
device version 
 test version 
 unitsmm 
 unitsmm 
 struct raydium_data - represents state of Raydium touchscreen device 
  Header to be sent for RM_CMD_BANK_SWITCH command. This is used by
  raydium_i2c_{read|send} below.
	
	  If address is greater than 255, then RM_CMD_BANK_SWITCH needs to be
	  sent first. Else, skip the header i.e. xfer[0].
		
		  Perform as a single i2c_transfer transaction to ensure that
		  no other I2C transactions are initiated on the bus to any
		  other device in between. Initiating transacations to other
		  devices after RM_CMD_BANK_SWITCH is sent is known to cause
		  issues. This is also why regmap infrastructure cannot be used
		  for this driver. Regmap handles page(bank) switch and reads
		  as separate i2c_transfer() operations. This can result in
		  problems if the Raydium device is on a shared I2C bus.
		
		  Perform as a single i2c_transfer transaction to ensure that
		  no other I2C transactions are initiated on the bus to any
		  other device in between. Initiating transacations to other
		  devices after RM_CMD_BANK_SWITCH is sent is known to cause
		  issues. This is also why regmap infrastructure cannot be used
		  for this driver. Regmap handles page(bank) switch and writes
		  as separate i2c_transfer() operations. This can result in
		  problems if the Raydium device is on a shared I2C bus.
		
		  Warn user if we already allocated memory for reports and
		  then the size changed (due to firmware update?) and keep
		  old size instead.
 Wait for Hello packet 
 Make sure there is something at this address 
 Sleep is not available in BLDR recovery mode 
 sentinel  }
 sentinel  }
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  Touch Screen driver for SiS 9200 family I2C Touch panels
  Copyright (C) 2015 SiS, Inc.
  Copyright (C) 2016 Nextfour Group
  The I2C packet format:
  le16		byte count
  u8		Report ID
  <contact data - variable length>
  u8		Number of contacts
  le16		Scan Time (optional)
  le16		CRC
  One touch point information consists of 6+ bytes, the order is:
  u8		contact state
  u8		finger id
  le16		x axis
  le16		y axis
  u8		contact width (optional)
  u8		contact height (optional)
  u8		pressure (optional)
  Maximum amount of data transmitted in one shot is 64 bytes, if controller
  needs to report more contacts than fit in one packet it will send true
  number of contacts in first packet and 0 as number of contacts in second
  packet.
 Report IDtype 
 First contact 
 Supported report types 
 Contact properties within report 
 Contact size 
 Offsets within contact data 
 Contact ID 
 Individual contact state 
 Touchscreen parameters 
 Resolution diagonal 
((SIS_MAX_X^2) + (SIS_MAX_Y^2))^0.5
			
			  Calculate CRC ignoring packet length
			  in the beginning and CRC transmitted
			  at the end of the packet.
				
				  The remainder of contacts is sent
				  in the 2nd packet.
 Get out of reset 
 sentinel  }
 sentinel   }
 SPDX-License-Identifier: GPL-2.0-or-later
  AD7879AD7889 touchscreen (SPI bus)
  Copyright (C) 2008-2010 Michael Hennerich, Analog Devices Inc.
 BUS_SPI 
 AD7879AD7889 
 don't exceed max specified SPI CLK frequency 
 SPDX-License-Identifier: GPL-2.0-only
  Touchwindow serial touchscreen driver
  Copyright (c) 2006 Rick Koch <n1gp@hotmail.com>
  Based on MicroTouch driver (driversinputtouchscreenmtouch.c)
  Copyright (c) 2004 Vojtech Pavlik
  and Dan Streetman <ddstreet@ieee.org>
  20050219 Rick Koch:
    The Touchwindow I used is made by Edmark Corp. and
    constantly outputs a stream of 0's unless it is touched.
    It then outputs 3 bytes: X, Y, and a copy of Y.
  Definitions & global arrays.
  Per-touchscreen data.
 touch 
 verify length and that the two Y's are the same 
 untouch 
  tw_disconnect() is the opposite of tw_connect()
  tw_connect() is the routine that is called when someone adds a
  new serio device that supports the Touchwin protocol and registers it as
  an input device.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0-only
  Core Source for:
  Cypress TrueTouch(TM) Standard Product (TTSP) touchscreen drivers.
  For use with Cypress Txx3xx parts.
  Supported parts include:
  CY8CTST341
  CY8CTMA340
  Copyright (C) 2009, 2010, 2011 Cypress Semiconductor, Inc.
  Copyright (C) 2012 Javier Martinez Canillas <javier@dowhile0.org>
  Contact Cypress Semiconductor at www.cypress.com <kev@cypress.com>
 Bootloader number of command keys 
 helpers 
 ms 
 Active distance in pixels for a gesture to be reported 
 pixels 
 Active Power state scanningprocessing refresh interval 
 ms 
 Low Power state scanningprocessing refresh interval 
 ms 
 touch timeout for the Active power 
 ms 
 device mode bits 
 power mode select bits 
 return to Bootloader mode 
 Slots management 
 file offset 
 command 
 exit bootloader command 
 default keys 
 wait for TTSP Device to complete the operation 
 wait for TTSP Device to complete switch to Operational mode 
 switch to sysinfo mode 
 read sysinfo registers 
 set intrvl registers 
		
		  According to the CY8CTMA340 datasheet page 21, the external
		  reset pulse width should be >= 1 ms. The datasheet does not
		  specify how long we have to wait after reset but a vendor
		  tree specifies 5 ms here.
 wait for interrupt to set ready completion 
 Init gesture; active distance setup 
 terminate all active tracks 
 terminate all active tracks 
 terminate all active tracks 
 Get touch data from CYTTSP device 
 provide flow control handshake 
		
		  TTSP device has reset back to bootloader mode.
		  Restore to operational mode.
 init active distance 
	
	  The device firmware can wake on an I2C or SPI memory slave
	  address match. So just reading a register is sufficient to
	  wake up the device. The first read attempt will fail but it
	  will wake it up making the second read attempt successful.
 Set some default values 
 Register value is expressed in 0.01s  bit 
 Register value is expressed in 0.01s  bit 
	
	  VCPIN is the analog voltage supply
	  VDD is the digital voltage supply
 One byte for width 0..255 so this is the limit 
 SPDX-License-Identifier: GPL-2.0+
  Driver for ChipOne icn8505 i2c touchscreen controller
  Copyright (c) 2015-2018 Red Hat Inc.
  Red Hat authors:
  Hans de Goede <hdegoede@redhat.com>
 Normal operation mode defines 
 ICN8505_REG_POWER commands 
  The Android driver uses these to turn onoff the charger filter, but the
  filter is way too aggressive making e.g. onscreen keyboards unusable.
 Programming mode defines 
 Seems more like finger width then pressure really 
 The difference between 2 and 3 is unclear 
 No finger seen yet since wakeup 
 New or updated coordinates 
 New or updated coordinates 
 Finger lifted 
 3 bytes for 24 bit reg-addr + 32 bytes max len 
  Note this function uses a number of magic register addresses and values,
  there are deliberately no defines for these because the algorithm is taken
  from the icn85xx Android driver and I do not want to make up possibly wrong
  names for the addresses andor values.
 Put the controller in programming mode 
 Enable CRC mode 
 Send the firmware to SRAM 
 Disable CRC mode 
 Get and check length and CRC 
 Boot controller from SRAM 
	
	  Always load the firmware, even if we don't need it at boot, we
	  we may need it at resume. Having loaded it once will make the
	  firmware class code cache it at suspendresume.
 Check if the controller is not already up and running 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for Pixcir I2C touchscreen controllers.
  Copyright (C) 2010-2011 Pixcir, Inc.
 Max fingers supported by driver 
  Register map
  Power modes:
  active: max scan speed
  idle: lower scan speed with automatic transition to active on touch
  halt: datasheet says sleep but this is more like halt as the chip
        clocks are cut and it can only be brought out of this mode
 	 using the RESET pin.
  Interrupt modes:
  periodical: interrupt is asserted periodicaly
  diff coordinates: interrupt is asserted when coordinates change
  level on touch: interrupt level asserted during touch
  pulse on touch: interrupt pulse asserted during touch
  struct pixcir_i2c_chip_data - chip related data
  @max_fingers:	Max number of fingers reported simultaneously by hw
  @has_hw_ids:		Hardware supports finger tracking IDs
 parse packet 
 report it 
				
				  Last report with no finger up?
				  Do it now then.
 datasheet section 1.2.3 says 80ns min. 
 wait for controller ready. 100ms guess. 
 Always AUTO_IDLE 
  Set the interrupt mode for the device i.e. ATTB line behaviour
  @polarity : 1 for active high, 0 for active low.
  Enabledisable interrupt generation
 LEVEL_TOUCH interrupt with active low polarity 
 Update status before IRQ can fire 
 enable interrupt generation 
 Disable interrupt generation 
 Exit ISR if running, no more report parsing 
 update status before we synchronize irq 
 Wait till running ISR is complete 
 Always be in IDLE mode to save power, device supports auto wake 
 Stop device till opened 
 no hw id support 
 SPDX-License-Identifier: GPL-2.0-only
  Source for:
  Cypress TrueTouch(TM) Standard Product (TTSP) SPI touchscreen driver.
  For use with Cypress Txx3xx parts.
  Supported parts include:
  CY8CTST341
  CY8CTMA340
  Copyright (C) 2009, 2010, 2011 Cypress Semiconductor, Inc.
  Copyright (C) 2012 Javier Martinez Canillas <javier@dowhile0.org>
  Copyright (C) 2013 Cypress Semiconductor
  Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
 r~w 
 from protocol v.2 
 from protocol v.2 
 header byte 0 
 header byte 1 
 reg index 
 r~w 
	
	  We set both TX and RX buffers because Cypress TTSP
	  requires full duplex operation.
		
		  do not return here since was a bad ACK sequence
		  let the following ACK check handle any errors and
		  allow silent retries
 Set up SPI
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
 Samsung S6SY761 Touchscreen device driver
 Copyright (c) 2017 Samsung Electronics Co., Ltd.
 Copyright (c) 2017 Andi Shyti <andi@etezian.org>
 commands 
 RW for getset 
 events 
 info 
 firmware status 
  the functionalities are put as a reference
  as in the device I am using none of them
  works therefore not used in this driver yet.
 touchscreen functionalities 
 boot status (BS) 
 event id 
 event register masks 
 byte 0 
 byte 3 
 byte 6 
 byte 7 
 MSB in byte 6, LSB in byte 7 
 event touch state values 
 application modes 
  We can't simply use i2c_smbus_read_i2c_block_data because we
  need to read more than 255 bytes
 double check whether the touch is functional 
 for some reasons the device might be stuck in the bootloader 
 enable touch functionality 
 larger read size 
 if no tx channels defined, at least keep one 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for MAXI MAX11801 - A Resistive touch screen controller with
  i2c interface
  Copyright (C) 2011 Freescale Semiconductor, Inc.
  Author: Zhang Jiejing <jiejing.zhang@freescale.com>
  Based on mcs5000_ts.c
  This driver aims to support the series of MAXI touch chips max11801
  through max11803. The main difference between these 4 chips can be
  found in the table below:
  -----------------------------------------------------
  | CHIP     |  AUTO MODE SUPPORT(FIFO) | INTERFACE    |
  |----------------------------------------------------|
  | max11800 |  YES                     |   SPI        |
  | max11801 |  YES                     |   I2C        |
  | max11802 |  NO                      |   SPI        |
  | max11803 |  NO                      |   I2C        |
  ------------------------------------------------------
  Currently, this driver only supports max11801.
  Data Sheet:
  http:www.maxim-ic.comdatasheetindex.mvpid5943
 Register Address define 
 only for max11800max11801 
 only for max11800max11801 
 FIFO is found only in max11800 and max11801 
 These are the state of touch event state machine 
 XXX: The chip ignores LSB of register address 
 XXX: The chip ignores LSB of register address 
		
		  We should get 4 bytes buffer that contains X,Y
		  and event tag
 Average X,Y, take 16 samples, average eight media sample 
 X,Y panel setup time set to 20us 
 Rough pullup time (2uS), Fine pullup time (10us)  
 Auto mode init period = 5ms , scan period = 5ms
 Aperture X,Y set to +- 4LSB 
 Enable Power, enable Automode, enable Aperture, enable Average X,Y 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  ADS7846 based touchscreen and sensor driver
  Copyright (c) 2005 David Brownell
  Copyright (c) 2006 Nokia Corporation
  Various changes: Imre Deak <imre.deak@nokia.com>
  Using code from:
   - corgi_ts.c
 	Copyright (C) 2004-2005 Richard Purdie
   - omap_ts.[hc], ads7846.h, ts_osk.c
 	Copyright (C) 2002 MontaVista Software
 	Copyright (C) 2004 Texas Instruments
 	Copyright (C) 2005 Dirk Behme
  This code has been heavily tested on a Nokia 770, and lightly
  tested on other ads7846 devices (OSKMistral, Lubbock, Spitz).
  TSC2046 is just newer ads7846 silicon.
  Support for ads7843 tested on Atmel at91sam926x-EK.
  Support for ads7845 has only been stubbed in.
  Support for Analog Devices AD7873 and AD7843 tested.
  IRQ handling needs a workaround because of a shortcoming in handling
  edge triggered IRQs on some platforms like the OMAP12. These
  platforms don't handle the ARM lazy IRQ disabling properly, thus we
  have to maintain our own SW IRQ disabled status. This should be
  removed as soon as the affected platform's IRQ handling is fixed.
  App note sbaa036 talks in more detail about accurate sampling...
  that ought to help in situations like LCDs inducing noise (which
  can also be helped by using synch signals) and more generally.
  This driver tries to utilize the measures described in the app
  note. The strength of filtering can be set in the board- specific
  files.
 ms delay before the first sample 
 ms delay between samples 
 this driver doesn't aim at the peak continuous sample rate 
cmd + 16  before, after )
  We allocate this separately to avoid cache line sharing issues when
  driver is used with DMA-based SPI controllers (like atmel_spi) on
  systems where main memory is not DMA-coherent (most non-x86 boards).
 P: lock 
 P: lock 
 P: lock 
 leave chip selected when we're done, for quicker re-select? 
--------------------------------------------------------------------------
 The ADS7846 has touchscreen and other sensors.
  Earlier ads784x chips are somewhat compatible.
 differential 
 differential 
 differential 
 differential 
 non-differential 
 non-differential 
 non-differential 
 non-differential 
 non-differential 
 differential 
 low power mode + penirq 
 ADC on 
 vREF on + penirq 
 ADC + vREF on 
 leave ADC powered up (disables penirq) between differential samples 
 LAST 
 single-ended samples need to first power up reference voltage;
  we leave both ADC and VREF powered
 Order commands in the most optimal way to reduce Vref switching and
  settling time:
  Measure:  X; Vref: X+, X-; IN: Y+
  Measure:  Y; Vref: Y+, Y-; IN: X+
  Measure: Z1; Vref: Y+, X-; IN: X+
  Measure: Z2; Vref: Y+, X-; IN: Y-
 Must be called with ts->lock held 
 Signal IRQ thread to stop polling and disable the handler. 
 Must be called with ts->lock held 
 Check if pen was released since last stop 
 Tell IRQ thread that it may poll the device. 
 Must be called with ts->lock held 
	
	  We know the chip's in low power mode since we always
	  leave it that way after every request
 Must be called with ts->lock held 
--------------------------------------------------------------------------
  Non-touchscreen sensors only use single-ended conversions.
  The range is GND..vREF. The ads7843 and ads7835 must use external vREF;
  ads7846 lets that pin be unconnected, to use internal vREF.
	
	  DMA (thus cache coherency maintenance) requires the
	  transfer buffers to live in their own cache lines.
	
	  DMA (thus cache coherency maintenance) requires the
	  transfer buffers to live in their own cache lines.
 maybe turn on internal vREF, and let it settle 
 for 1uF, settle for 800 usec; no cap, 100 usec.  
 Enable reference voltage 
 Enable ADC in every case 
 take sample 
 REVISIT:  take a few more samples, and compare ... 
 converter in low power mode & enable PENIRQ 
 on-wire is a must-ignore bit, a BE12 value, then padding 
 BE12 value, then padding 
 Sysfs conventions report temperatures in millidegrees Celsius.
  ADS7846 could use the low-accuracy two-sample scheme, but can't do the high
  accuracy scheme without calibration data.  For now we won't try either;
  userspace sees raw sensor values, and must scalecalibrate appropriately.
 temp1_input 
 temp2_input 
 sysfs conventions report voltages in millivolts.  We can convert voltages
  if we know vREF.  userspace may need to scale vAUX to match the board's
  external resistors; we assume that vBATT only uses the internal ones.
 external resistors may scale vAUX into 0..vREF 
 ads7846 has a resistor ladder to scale this signal down 
 in0, in1 
 in0 
 0 
 1 
 2 
 3 
 hwmon sensors need a reference voltage 
--------------------------------------------------------------------------
 Start over collecting consistent readings. 
		
		  Repeat it, if this was the first read or the read
		  wasn't consistent enough.
			
			  Maximum number of debouncing reached and still
			  not enough number of consistent readings. Abort
			  the whole sample, repeat it in the next sampling
			  period.
			
			  Got a good reading for this coordinate,
			  go for the next one.
 Read more values that are consistent. 
 enforce ADC output is 12 bits width 
 7846 specific commands  
 range filtering 
 compute touch pressure resistance using equation #2 
	
	  Sample found inconsistent by debouncing or pressure is beyond
	  the maximum. Don't report it to user space, repeat at least
	  once more the measurement
	
	  Maybe check the pendown state before reporting. This discards
	  false readings when the pen is lifted.
	
	  NOTE: We can't rely on the pressure to determine the pen down
	  state, even this controller has a pressure sensor. The pressure
	  value can fluctuate for quite a while after lifting the pen and
	  in some cases may not even settle at the expected value.
	 
	  The only safe way to check for the pen up condition is in the
	  timer by reading the pen signal state (it's a GPIO _and_ IRQ).
 Start with a small delay before checking pendown state 
 pen is down, continue with the measurement 
	
	  REVISIT when the irq can be triggered active-low, or if for some
	  reason the touchscreen isn't hooked up, we don't need to access
	  the pendown state.
  Set up the transfers to read touchscreen state; this assumes we
  use formula #2 for pressure, not #3.
 time per bit 
		 ads7846_debounce_filter() is making ts->debounce_rep + 2
 x, y, z1, z2, pwdown 
 x, y, pwdown 
		
		  The AD7873 is almost identical to the ADS7846
		  keep VREF off during differentialratiometric
		  conversion modes.
	
	  touchscreen-max-pressure gets parsed during
	  touchscreen_parse_properties()
 don't exceed max specified sample rate 
	
	  We'd set TX word size 8 bits and RX word size to 13 bits ... except
	  that even if the hardware can do that, the SPI controller driver
	  may not.  So we stick to very-portable 8 bit words, both RX and TX.
	
	  Parse common framework properties. Must be done here to ensure the
	  correct behaviour in case of using the legacy vendor bindings. The
	  general binding value overrides the vendor specific one.
	
	  Check if legacy ti,swap-xy binding is used instead of
	  touchscreen-swapped-x-y
	
	  Take a first sample, leaving nPENIRQ active and vREF off; avoid
	  the touchscreen, in case it's not connected.
	
	  If device does not carry platform data we must have allocated it
	  when parsing DT data.
 SPDX-License-Identifier: GPL-2.0-only
  Touchscreen driver for Marvell 88PM860x
  Copyright (C) 2009 Marvell International Ltd.
  	Haojian Zhuang <haojian.zhuang@marvell.com>
 touch register 
 bit definitions of touch 
 resistor of Xplate 
 set GPADC MISC1 register 
 set tsi prebias time 
 set prebias & prechg time of pen detect 
 set GPADC MISC1 register 
 set tsi prebias time 
 set prebias & prechg time of pen detect 
 enable GPADC 
 SPDX-License-Identifier: GPL-2.0-only
  driversinputtouchscreenjornada720_ts.c
  Copyright (C) 2007 Kristoffer Ericson <Kristoffer.Ericson@gmail.com>
   Copyright (C) 2006 Filip Zyzniewski <filip.zyzniewski@tefnet.pl>
   based on HP Jornada 56x touchscreen driver by Alex Lange <chicken@handhelds.org>
  HP Jornada 710720729 Touchscreen Driver
 X sample values 
 Y sample values 
 3 low word X samples 
 3 low word Y samples 
 combined x samples bits 
 combined y samples bits 
 If gpio is high then report pen up 
 proper reply to request is always TXDUMMY 
 work with hotplug and coldplug 
 SPDX-License-Identifier: GPL-2.0-or-later
  LPC32xx built-in touchscreen driver
  Copyright (C) 2010 NXP Semiconductors
  Touchscreen controller register offsets
 FIFO overflow - throw away samples 
	
	  Gather and normalize 4 samples. Pen-up events may have less
	  than 4 samples, but its ok to pop 4 and let the last sample
	  pen status check drop the samples.
 Data is only valid if pen is still down in last sample 
 Use average of 2nd and 3rd sample for position 
 Disable auto mode 
 Set the TSC FIFO depth to 4 samples @ 10-bits per sample (max) 
 These values are all preset 
 Aux support is not used 
	
	  Set sample rate to about 240Hz per XY pair. A single measurement
	  consists of 4 pairs which gives about a 60Hz sample rate based on
	  a stable 32768Hz clock source. Values are in clocks.
	  Rate is (32768  (RTR + XCONV + RTR + YCONV + DXP + TTR + UTR)  4
 Enable automatic ts event capture 
	
	  Suspend and resume can be called when the device hasn't been
	  enabled. If there are no users that have the device open, then
	  avoid calling the TSC stop and start functions as the TSC
	  isn't yet clocked.
 SPDX-License-Identifier: GPL-2.0-only
  driversinputtouchscreentsc2007.c
  Copyright (c) 2008 MtekVision Co., Ltd.
 	Kwangwoo Lee <kwlee@mtekvision.com>
  Using code from:
   - ads7846.c
 	Copyright (c) 2005 David Brownell
 	Copyright (c) 2006 Nokia Corporation
   - corgi_ts.c
 	Copyright (C) 2004-2005 Richard Purdie
   - omap_ts.[hc], ads7846.h, ts_osk.c
 	Copyright (C) 2002 MontaVista Software
 	Copyright (C) 2004 Texas Instruments
 	Copyright (C) 2005 Dirk Behme
	 The protocol and raw data format from i2c interface:
	  S Addr Wr [A] Comm [A] S Addr Rd [A] [DataLow] A [DataHigh] NA P
	  Where DataLow has [D11-D4], DataHigh has [D3-D0 << 4 | Dummy 4bit].
 y- still on; turn on only y+ (and ADC) 
 turn y- off, x+ on, then leave in lowpower 
 turn y+ off, x- on; we'll use formula #1 
 Prepare for next touch reading - power down ADC, enable PENIRQ 
 range filtering 
 compute touch resistance using equation #1 
	
	  NOTE: We can't rely on the pressure to determine the pen down
	  state, even though this controller has a pressure sensor.
	  The pressure value can fluctuate for quite a while after
	  lifting the pen and in some cases may not even settle at the
	  expected value.
	 
	  The only safe way to check for the pen up condition is in the
	  work function by reading the pen signal state (it's a GPIO
	  and IRQ). Unfortunately such callback is not always available,
	  in that case we assume that the pen is down and expect caller
	  to fall back on the pressure reading.
 pen is down, continue with the measurement 
			
			  If pressure reported is 0 and we don't have
			  callback to check pendown state, we have to
			  assume that pen was lifted up.
			
			  Sample found inconsistent by debouncing or pressure is
			  beyond the maximum. Don't report it to user space,
			  repeat at least once more the measurement.
 Prepare for touch readings - power down ADC and enable PENIRQ 
 power down the chip (TSC2007_SETUP does not ACK on I2C) 
 chip does not respond 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
 Register Map 
 0~7 
 Interrupt & status register flags 
 ms
 ms
 currently unused, but needed as padding:
 A single i2c_transfer() transaction does not work here. 
 initialize 
 clear queue 
 fall back to mode 2 
		
		  If there are devices that don't support mode 2, support
		  for other modes (0, 1) will be needed.
  TI Touch Screen driver
  Copyright (C) 2011 Texas Instruments Incorporated - http:www.ti.com
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License as
  published by the Free Software Foundation version 2.
  This program is distributed "as is" WITHOUT ANY WARRANTY of any
  kind, whether express or implied; without even the implied warranty
  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
		
		  Get the order in which TSC wires are attached
		  w.r.t. each of the analog input lines on the EVM.
 Steps 16 to 16-coordinate_readouts is for X 
 1 ... coordinate_readouts is for Y 
 Make CHARGECONFIG same as IDLECONFIG 
 coordinate_readouts + 1 ... coordinate_readouts + 2 is for Z 
 The steps end ... end - readouts  2 + 2 and bit 0 for TS_Charge 
	
	  If co-ordinates readouts is less than 4 then
	  report the average. In case of 4 or more
	  readouts, sort the co-ordinate samples, drop
	  min and max values and report the average of
	  remaining values.
	
	  ADC and touchscreen share the IRQ line.
	  FIFO1 interrupts are used by ADC. Handle FIFO0 IRQs here only
			
			  Calculate pressure using formula
			  Resistance(touch) = x plate resistance 
			  x postion4096  ((z2  z1) - 1)
	
	  Try with the new binding first. If it fails, try again with
	  bogus, miss-spelled version.
	
	  If ti,charge-delay value is not specified, then use
	  CHARGEDLY_OPENDLY as the default value.
  The functions for insertingremoving driver as a module.
 Allocate memory for device 
 register to the input system 
 total steps followed by the enable mask 
 SPDX-License-Identifier: GPL-2.0-or-later
  TSC2004 touchscreen driver
  Copyright (C) 2015 QWERTY Embedded Design
  Copyright (C) 2015 EMAC Inc.
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
  Toradex Colibri VF50 Touchscreen driver
  Copyright 2015 Toradex AG
  Originally authored by Stefan Agner for 3.0 kernel
  Enables given plates and measures touch parameters using ADC
  Enable touch detection using falling edge detection on XM
 Enable plate YM (needs to be strong GND, high active) 
	
	  Let the platform mux to idle state in order to enable
	  Pull-Up on GPIO
 Wait for the pull-up to be stable on high 
  ADC touch screen sampling bottom half irq handler
 Disable the touch detection plates 
 Let the platform mux to default state in order to mux as ADC 
 X-Direction 
 Y-Direction 
		
		  Touch pressure
		  Measure on XPYM
 Validate signal (avoid calculation using noise) 
			
			  Calculate resistance between the plates
			  lower resistance means higher pressure
		
		  If touch pressure is too low, stop measuring and reenable
		  touch detection
		
		  The pressure may not be enough for the first x and the
		  second y measurement, but, the pressure is ok when the
		  driver is doing the third and fourth measurement. To
		  take care of this, we drop the first measurement always.
			
			  Report touch position and sleep for
			  the next measurement.
 Report no more touch, re-enable touch detection 
 Mux detection before request IRQ, wait for pull-up to settle 
 Make sure IRQ is not running past close 
 SPDX-License-Identifier: GPL-2.0-or-later
  Touchscreen driver for WM831x PMICs
  Copyright 2011 Wolfson Microelectronics plc.
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
  R16424 (0x4028) - Touch Control 1
 TCH_ENA 
 TCH_CVT_ENA 
 TCH_SLPENA 
 TCH_Z_ENA 
 TCH_Y_ENA 
 TCH_X_ENA 
 TCH_DELAY - [7:5] 
 TCH_DELAY - [7:5] 
 TCH_DELAY - [7:5] 
 TCH_RATE - [4:0] 
 TCH_RATE - [4:0] 
 TCH_RATE - [4:0] 
  R16425 (0x4029) - Touch Control 2
 TCH_PD_WK 
 TCH_5WIRE 
 TCH_PDONLY 
 TCH_ISEL 
 TCH_RPU - [3:0] 
 TCH_RPU - [3:0] 
 TCH_RPU - [3:0] 
  R16426-8 (0x402A-C) - Touch Data XYX
 TCH_PD1 
 TCH_DATA - [11:0] 
 TCH_DATA - [11:0] 
 TCH_DATA - [11:0] 
	
	  We get a pen down reading on every reading, report pen up if any
	  individual reading does so.
 Switch from data to pen down 
 Don't need data any more 
 Flush any final samples that arrived while reading 
 Start collecting data 
 Switch from pen down to data 
 Shut the controller down, disabling all other functionality too 
	 Make sure any pending IRQs are done, the above will prevent
	  new ones firing.
 Make sure the IRQ completion work is quiesced 
	 If we ended up with the pen down then make sure we revert back
	  to pen detection state for the next time we start up.
	
	  If we have a direct IRQ use it, otherwise use the interrupt
	  from the WM831x IRQ controller.
 Five wire touchscreens can't report pressure 
 Pressure measurements are not possible for five wire mode 
 Default to 96 samplessec 
 set up touch configuration 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  Dynapro serial touchscreen driver
  Copyright (c) 2009 Tias Guns
  Based on the inexio driver (c) Vojtech Pavlik and Dan Streetman and
  Richard Lemon
  20090919 Tias Guns <tias@ulyssis.org>
    Copied inexio.c and edited for Dynapro protocol (from retired Xorg module)
  Definitions & global arrays.
  Per-touchscreen data.
  dynapro_connect() is the routine that is called when someone adds a
  new serio device that supports dynapro protocol and registers it as
  an input device. This is usually accomplished using inputattach.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0+
  Azoteq IQS550572525 TrackpadTouchscreen Controller
  Copyright (C) 2018 Jeff LaBundy <jeff@labundy.com>
  These devices require firmware exported from a PC-based configuration tool
  made available by the vendor. Firmware files may be pushed to the device's
  nonvolatile memory by writing the filename to the 'fw_file' sysfs control.
  Link to PC-based configuration tool and datasheet: https:www.azoteq.com
	
	  The first addressing attempt outside of a communication window fails
	  and must be retried, after which the device clock stretches until it
	  is available.
	
	  The first addressing attempt outside of a communication window fails
	  and must be retried, after which the device clock stretches until it
	  is available.
		
		  This delay saves the bus controller the trouble of having to
		  tolerate a relatively long clock-stretching period while the
		  CRC is calculated.
	
	  The device opens a bootloader polling window for 2 ms following the
	  release of reset. If the host cannot establish communication during
	  this time frame, it must cycle reset again.
	
	  Addressing the device outside of a communication window prompts it
	  to assert the RDY output, so disable the interrupt line to prevent
	  the handler from servicing a false interrupt.
	
	  The device reserves 0xFFFF for coordinates that correspond to slots
	  which are not in a state of touch.
	
	  A000 and B000 devices use 8-bit and 16-bit addressing, respectively.
	  Querying an A000 device's version information with 16-bit addressing
	  gives the appearance that the data is shifted by one byte; a nonzero
	  leading array element suggests this could be the case (in which case
	  the missing zero is prepended).
	
	  With the product number recognized yet shifted by one byte, open the
	  bootloader and wait for user space to convert the A000 device into a
	  B000 device via new firmware.
	
	  The following delay allows ATI to complete before the open and close
	  callbacks are free to elicit I2C communication. Any attempts to read
	  from or write to the device during this time may face extended clock
	  stretching and prompt the I2C controller to report an error.
	
	  This check is purely a precaution, as the device does not assert the
	  RDY output during bootloader mode. If the device operates outside of
	  bootloader mode, the input device is guaranteed to be allocated.
	
	  Once the communication window is closed, a small delay is added to
	  ensure the device's RDY output has been deasserted by the time the
	  interrupt handler returns.
	
	  Firmware exported from the vendor's configuration tool deviates from
	  standard ihex as follows: (1) the checksum for records corresponding
	  to user-exported settings is not recalculated, and (2) an address of
	  0xFFFF is used for the EOF record.
	 
	  Because the ihex2fw tool tolerates neither (1) nor (2), the slightly
	  nonstandard ihex firmware is parsed directly by the driver.
	
	  Disable the interrupt line in case the first attempt(s) to enter the
	  bootloader don't happen quickly enough, in which case the device may
	  assert the RDY output until the next attempt.
	
	  If the input device was not allocated already, it is guaranteed to
	  be allocated by this point and can finally be registered.
 SPDX-License-Identifier: GPL-2.0-or-later
  TSI driver for Dialog DA9052
  Copyright(c) 2012 Dialog Semiconductor Ltd.
  Author: David Dajun Chen <dchen@diasemi.com>
 Mask PEN_DOWN event and unmask TSI_READY event 
 Pen is still DOWN (or read error) 
 Pen UP 
 Report Pen UP 
			
			  FIXME: Fixes the unhandled irq issue when quick
			  pen down and pen up events occurs
 Mask TSI_READY event and unmask PEN_DOWN event 
 Measure TSI sample every 1ms 
 TSI_DELAY: 3 slots, TSI_SKIP: 0 slots, TSI_MODE: XYZP 
 Supply TSIRef through LD09 
 Unmask PEN_DOWN event 
 Enable Pen Detect Circuit 
		
		  If ADC was on that means that pendwn IRQ was disabled
		  twice and we need to enable it to keep enabledisable
		  counter balanced. IRQ is still off though.
 Disable Pen Detect Circuit 
 Disable Pen Detect Circuit 
 Disable ADC 
 Mask PEN_DOWN and TSI_READY events 
 SPDX-License-Identifier: GPL-2.0-only
  cyttsp_i2c_common.c
  Cypress TrueTouch(TM) Standard Product (TTSP) I2C touchscreen driver.
  For use with Cypress Txx3xx and Txx4xx parts.
  Supported parts include:
  CY8CTST341
  CY8CTMA340
  TMA4XX
  TMA1036
  Copyright (C) 2009, 2010, 2011 Cypress Semiconductor, Inc.
  Copyright (C) 2012 Javier Martinez Canillas <javier@dowhile0.org>
  Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
 SPDX-License-Identifier: GPL-2.0-only
  HTC Shift touchscreen driver
  Copyright (C) 2008 Pau Oliva Fora <pof@eslack.org>
 0 = press; 1 = release 
 get high resolution value of X and Y using LSB 
 SPDX-License-Identifier: GPL-2.0-only
  Elan Microelectronics touch panels with I2C interface
  Copyright (C) 2014 Elan Microelectronics Corporation.
  Scott Liu <scott.liu@emc.com.tw>
  This code is partly based on hid-multitouch.c:
   Copyright (c) 2010-2012 Stephane Chatty <chatty@enac.fr>
   Copyright (c) 2010-2012 Benjamin Tissoires <benjamin.tissoires@gmail.com>
   Copyright (c) 2010-2012 Ecole Nationale de l'Aviation Civile, France
  This code is partly based on i2c-hid.c:
  Copyright (c) 2012 Benjamin Tissoires <benjamin.tissoires@gmail.com>
  Copyright (c) 2012 Ecole Nationale de l'Aviation Civile, France
  Copyright (c) 2012 Red Hat, Inc
 Device, Driver information 
 Convert from rows or columns into resolution 
 FW header data 
 Buffer mode Queue Header information 
 Command header definition 
 FW position data 
 Header (4 bytes) plus 3 full 10-finger packets 
 FW read command, 0x53 0x?? 0x0, 0x01 
 FW write command, 0x54 0x?? 0x0, 0x01 
 calibration timeout definition 
 struct elants_data - represents state of Elan touchscreen device 
 resolution in unitsmm 
 Guards against concurrent access to the device via sysfs 
 Must be last to be used for DMA operations 
	
	  We should wait at least 10 msec (but no more than 40) before
	  sending fastboot or IAP command to the device.
 Get XY size in mm 
 eKTF doesn't report max size, set it to default values 
 Get trace number 
 Get report resolution value of ABS_MT_TOUCH_MAJOR 
 Process mm_to_pixel information 
 translate trace number to TS resolution 
 Continue initializing if it's the last try 
 Continue initializing if it's the last try 
 Wait for Hello packet 
			
			  Setting error code will mark device
			  in recovery mode below.
 hw version is available even if device in recovery state 
  Firmware update interface.
 Compare TS Remark ID and FW Remark ID 
 Recovery mode detection! 
 Start IAP Procedure 
 Close idle mode 
 check IAP state 
 Clear the last page of Master 
 Old iap needs to wait 200ms for WDT and rest is for hello packets 
  Event reporting.
 Note: all fingers have the same tool type 
			
			  eKTF3624 may have use "old" touch-report format,
			  depending on a device and TS firmware version.
			  For example, ASUS Transformer devices use the "old"
			  format, while ASUS Nexus 7 uses the "new" formant.
 CMD_HEADER_REK 
			
			  Depending on firmware version, eKTF3624 touchscreens
			  may utilize one of these opcodes for the touch events:
			  0x63 (NORMAL) and 0x66 (NORMAL2).  The 0x63 is used by
			  older firmware version and differs from 0x66 such that
			  touch pressure value needs to be adjusted.  The 0x66
			  opcode of newer firmware is equal to 0x63 of eKTH3500.
  sysfs interface
 2 HEX digits 
 4 HEX digits 
	
	  If we do not have reset gpio assume platform firmware
	  controls regulators and does power them on for us.
	
	  We need to wait a bit after powering on controller before
	  we are allowed to release reset GPIO.
		
		  Activate reset gpio to prevent leakage through the
		  pin once we shut off power to the controller.
 Don't bind to i2c-hid compatible devices, these are handled by the i2c-hid drv. 
 Make sure there is something at this address 
 Multitouch input params setup 
 calculate resolution from size 
	
	  Platform code (ACPI, DTS) should normally set up interrupt
	  for us, but in case it did not let's fall back to using falling
	  edge to be compatible with older Chromebooks.
	
	  Systems using device tree should set up wakeup via DTS,
	  the rest will configure device as wakeup source by default.
 Command not support in IAP recovery mode 
		
		  The device will automatically enter idle mode
		  that has reduced power consumption.
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
  MELFAS MIP4 Touchscreen
  Copyright (C) 2016 MELFAS Inc.
  Author : Sangwon Jee <jeesw@melfas.com>
  Protocol
  Version : MIP 4.0 Rev 5.4
 Address 
 Value 
 2~ 
 0 (default) or 1 
  Read chip firmware version
  Fetch device characteristics
	
	  Make sure there is something at this address as we do not
	  consider subsequent failures as fatal.
 Product name 
 Product ID 
 Firmware name 
 IC name 
 Firmware version 
 Resolution 
 Key ts 
 Protocol 
 Booting delay : 200~300ms 
  Clear touch input event status
 Screen 
 Keys 
  Input handling
 Report key event 
 Touch only 
 Touch + Force(Pressure) 
 Press or Move event 
 Release event 
 Should not happen unless we have corrupted firmware 
 Report input event 
 Read packet info 
 Check size 
 Read packet data 
  Firmware update
 Firmware Info 
 512 
 512, 256, 128, 64, ... 
  Firmware binary tail info
 Bootloader - Read status
 Bootloader - Change mode
 Send mode change command 
 Wait 
 Verify target mode 
  Bootloader - Start bootloader mode
  Bootloader - Exit bootloader mode
 Addr 
 Size 
 Data 
 Command 
 Status 
 Addr 
 Size 
 Command 
 Status 
 Read 
  Flash chip firmware
 Enter bootloader mode 
 Read info 
 Program & Verify 
 Program 
 Verify 
 Exit bootloader mode 
 Reset chip 
 Refresh device parameters 
 Check bin format 
 Check FW type 
 Update firmware 
 Enable IRQ 
	
	  Take input mutex to prevent racing with itself and also with
	  userspace opening and closing the device and also suspendresume
	  transitions.
 Take lock to prevent racing with firmware update 
 Take lock to prevent racing with firmware update 
	
	  product_name shows the name or version of the hardware
	  paired with current firmware in the chip.
 SPDX-License-Identifier: GPL-2.0-or-later
  AD7879-1AD7889-1 touchscreen (I2C bus)
  Copyright (C) 2008-2010 Michael Hennerich, Analog Devices Inc.
 BUS_I2C 
 AD7879-1AD7889-1 
 SPDX-License-Identifier: GPL-2.0
  Rohm BU21029 touchscreen controller driver
  Copyright (C) 2015-2018 Bosch Sicherheitssysteme GmbH
  This program is free software; you can redistribute it andor modify
  it under the terms of the GNU General Public License version 2 as
  published by the Free Software Foundation.
  HW_ID1 Register (PAGE=0, ADDR=0x0E, Reset value=0x02, Read only)
  +--------+--------+--------+--------+--------+--------+--------+--------+
  |   D7   |   D6   |   D5   |   D4   |   D3   |   D2   |   D1   |   D0   |
  +--------+--------+--------+--------+--------+--------+--------+--------+
  |                                 HW_IDH                                |
  +--------+--------+--------+--------+--------+--------+--------+--------+
  HW_ID2 Register (PAGE=0, ADDR=0x0F, Reset value=0x29, Read only)
  +--------+--------+--------+--------+--------+--------+--------+--------+
  |   D7   |   D6   |   D5   |   D4   |   D3   |   D2   |   D1   |   D0   |
  +--------+--------+--------+--------+--------+--------+--------+--------+
  |                                 HW_IDL                                |
  +--------+--------+--------+--------+--------+--------+--------+--------+
  HW_IDH: high 8bits of IC's ID
  HW_IDL: low  8bits of IC's ID
  CFR0 Register (PAGE=0, ADDR=0x00, Reset value=0x20)
  +--------+--------+--------+--------+--------+--------+--------+--------+
  |   D7   |   D6   |   D5   |   D4   |   D3   |   D2   |   D1   |   D0   |
  +--------+--------+--------+--------+--------+--------+--------+--------+
  |   0    |   0    |  CALIB |  INTRM |   0    |   0    |   0    |   0    |
  +--------+--------+--------+--------+--------+--------+--------+--------+
  CALIB: 0 = not to use calibration result ()
         1 = use calibration result
  INTRM: 0 = INT output depend on "pen down" ()
         1 = INT output always "0"
  CFR1 Register (PAGE=0, ADDR=0x01, Reset value=0xA6)
  +--------+--------+--------+--------+--------+--------+--------+--------+
  |   D7   |   D6   |   D5   |   D4   |   D3   |   D2   |   D1   |   D0   |
  +--------+--------+--------+--------+--------+--------+--------+--------+
  |  MAV   |         AVE[2:0]         |   0    |         SMPL[2:0]        |
  +--------+--------+--------+--------+--------+--------+--------+--------+
  MAV:  0 = median average filter off
        1 = median average filter on ()
  AVE:  AVE+1 = number of average samples for MAV,
                if AVE>SMPL, then AVE=SMPL (=3)
  SMPL: SMPL+1 = number of conversion samples for MAV (=7)
  CFR2 Register (PAGE=0, ADDR=0x02, Reset value=0x04)
  +--------+--------+--------+--------+--------+--------+--------+--------+
  |   D7   |   D6   |   D5   |   D4   |   D3   |   D2   |   D1   |   D0   |
  +--------+--------+--------+--------+--------+--------+--------+--------+
  |          INTVL_TIME[3:0]          |          TIME_ST_ADC[3:0]         |
  +--------+--------+--------+--------+--------+--------+--------+--------+
  INTVL_TIME: waiting time between completion of conversion
              and start of next conversion, only usable in
              autoscan mode (=20.480ms)
  TIME_ST_ADC: waiting time between application of voltage
               to panel and start of AD conversion (=100us)
  CFR3 Register (PAGE=0, ADDR=0x0B, Reset value=0x72)
  +--------+--------+--------+--------+--------+--------+--------+--------+
  |   D7   |   D6   |   D5   |   D4   |   D3   |   D2   |   D1   |   D0   |
  +--------+--------+--------+--------+--------+--------+--------+--------+
  |  RM8   | STRETCH|  PU90K |  DUAL  |           PIDAC_OFS[3:0]          |
  +--------+--------+--------+--------+--------+--------+--------+--------+
  RM8: 0 = coordinate resolution is 12bit ()
       1 = coordinate resolution is 8bit
  STRETCH: 0 = SCL_STRETCH function off
           1 = SCL_STRETCH function on ()
  PU90K: 0 = internal pull-up resistance for touch detection is ~50kohms ()
         1 = internal pull-up resistance for touch detection is ~90kohms
  DUAL: 0 = dual touch detection off ()
        1 = dual touch detection on
  PIDAC_OFS: dual touch detection circuit adjustment, it is not necessary
             to change this from initial value
  LDO Register (PAGE=0, ADDR=0x0C, Reset value=0x00)
  +--------+--------+--------+--------+--------+--------+--------+--------+
  |   D7   |   D6   |   D5   |   D4   |   D3   |   D2   |   D1   |   D0   |
  +--------+--------+--------+--------+--------+--------+--------+--------+
  |   0    |         PVDD[2:0]        |   0    |         AVDD[2:0]        |
  +--------+--------+--------+--------+--------+--------+--------+--------+
  PVDD: output voltage of panel output regulator (=2.000V)
  AVDD: output voltage of analog circuit regulator (=2.000V)
  Serial Interface Command Byte 1 (CID=1)
  +--------+--------+--------+--------+--------+--------+--------+--------+
  |   D7   |   D6   |   D5   |   D4   |   D3   |   D2   |   D1   |   D0   |
  +--------+--------+--------+--------+--------+--------+--------+--------+
  |   1    |                 CF                |  CMSK  |  PDM   |  STP   |
  +--------+--------+--------+--------+--------+--------+--------+--------+
  CF: conversion function, see table 3 in datasheet p6 (=0000, automatic scan)
  CMSK: 0 = executes convert function ()
        1 = reads the convert result
  PDM: 0 = power down after convert function stops ()
       1 = keep power on after convert function stops
  STP: 1 = abort current conversion and power down, set to "0" automatically
  The timeout value needs to be larger than INTVL_TIME + tConv4 (sample and
  conversion time), where tConv4 is calculated by formula:
  tPON + tDLY1 + (tTIME_ST_ADC + (tADC  tSMPL)  2 + tDLY2)  3
  see figure 8 in datasheet p15 for details of each field.
	
	  compose upper 8 and lower 4 bits into a 12bit value:
	  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	  |            ByteH              |            ByteL              |
	  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	  |b07|b06|b05|b04|b03|b02|b01|b00|b07|b06|b05|b04|b03|b02|b01|b00|
	  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
	  |v11|v10|v09|v08|v07|v06|v05|v04|v03|v02|v01|v00| 0 | 0 | 0 | 0 |
	  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
		
		  calculate Rz (pressure resistance value) by equation:
		  Rz = Rx  (xQ)  ((z2z1) - 1), where
		  Rx is x-plate resistance,
		  Q  is the touch screen resolution (8bit = 256, 12bit = 4096)
		  x, z1, z2 are the measured positions.
	
	  Read touch data and deassert interrupt (will assert again after
	  INTVL_TIME + tConv4 for continuous touch)
 reset timer for pen up detection 
 take chip out of reset 
 sentinel  }
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  cyttsp_i2c.c
  Cypress TrueTouch(TM) Standard Product (TTSP) I2C touchscreen driver.
  For use with Cypress  Txx4xx parts.
  Supported parts include:
  TMA4XX
  TMA1036
  Copyright (C) 2009, 2010, 2011 Cypress Semiconductor, Inc.
  Copyright (C) 2012 Javier Martinez Canillas <javier@dowhile0.org>
  Copyright (C) 2013 Cypress Semiconductor
  Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
 SPDX-License-Identifier: GPL-2.0-or-later
  wm9705.c  --  Codec driver for Wolfson WM9705 AC97 Codec.
  Copyright 2003, 2004, 2005, 2006, 2007 Wolfson Microelectronics PLC.
  Author: Liam Girdwood <lrg@slimlogic.co.uk>
  Parts Copyright : Ian Molton <spyro@f2s.com>
                    Andrew Zabolotny <zap@homelink.ru>
                    Russell King <rmk@arm.linux.org.uk>
  Module parameters
  Set current used for pressure measurement.
  Set pil = 2 to use 400uA
      pil = 1 to use 200uA and
      pil = 0 to disable pressure measurement.
  This is used to increase the range of values returned by the adc
  when measureing touchpanel pressure.
  Set threshold for pressure measurement.
  Pen down pressure below threshold is ignored.
  Set adc sample delay.
  For accurate touchpanel measurements, some settling time may be
  required between the switch matrix applying a voltage across the
  touchpanel plate and the ADC sampling the signal.
  This delay can be set by setting delay = n, where n is the array
  position of the delay in the array delay_table below.
  Long delays > 1ms are supported for completeness, but are not
  recommended.
  Pen detect comparator threshold.
  0 to Vmid in 15 steps, 0 = use zero power comparator with Vmid threshold
  i.e. 1 =  Vmid15 threshold
       15 =  Vmid1 threshold
  Adjust this value if you are having problems with pen detect not
  detecting any down events.
  Set adc mask function.
  Sources of glitch noise, such as signals driving an LCD display, may feed
  through to the touch screen plates and affect measurement accuracy. In
  order to minimise this, a signal may be applied to the MASK pin to delay or
  synchronise the sampling.
  0 = No delay or sync
  1 = High on pin stops conversions
  2 = Edge triggered, edge on pin delays conversion by delay param (above)
  3 = Edge triggered, edge on pin starts conversion after delay param
  ADC sample delay times in uS
 1 AC97 Link frames 
 2                  
 4                  
 8                  
 16                 
 32                 
 48                 
 64                 
 96                 
 128                
 160                
 192                
 224                
 256                
 288                
 No delay, switch matrix always on 
  Delay after issuing a POLL command.
  The delay is 3 AC97 link frames + the touchpanel settling delay
  set up the physical settings of the WM9705
	
	 mute VIDEO and AUX as they share X and Y touchscreen
	 inputs on the WM9705
 touchpanel pressure current
 polling mode sample settling delay 
 WM9705 pdd 
 mask 
 dummy read 
  Read a sample from the WM9705 adc in polling mode.
 set up digitiser 
 wait 3 AC97 time slots + delay for conversion 
 wait for POLL to go low 
 If PDEN is set, we can get a timeout when pen goes up 
 check we have correct sample 
  Sample the WM9705 touchscreen in polling mode
  Enable WM9705 continuous mode, i.e. touch data is streamed across
  an AC97 slot
 continuous mode 
 Module information 
 SPDX-License-Identifier: GPL-2.0-or-later
  zylonite-wm97xx.c  --  Zylonite Continuous Touch screen driver
  Copyright 2004, 2007, 2008 Wolfson Microelectronics PLC.
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
  Parts Copyright : Ian Molton <spyro@f2s.com>
                    Andrew Zabolotny <zap@homelink.ru>
  Notes:
      This is a wm97xx extended touch driver supporting interrupt driven
      and continuous operation on Marvell Zylonite development systems
      (which have a WM9713 on board).
 codec id 
 continuous code 
 number of coord reads per read cycle 
 number of coords per second 
 continuous speed index 
  Pen sampling frequency (Hz) in continuous mode.
  Pressure readback.
  Set to 1 to read back pen down pressure
  AC97 touch data slot.
  Touch screen readback data ac97 slot
 flush AC97 slot 5 FIFO machines 
	 When the AC97 queue has been drained we need to allow time
	  to buffer up samples otherwise we end up spinning polling
	  for samples.  The controller can't have a suitably low
	  threshold set to use the notifications it gives.
 are samples valid 
 coordinate is good 
 check we have a codec 
 Go you big red fire engine 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
 Touchscreen commands 
 This chip uses custom checksum at the end of data 
 Finger up 
 Touch indication 
 Touch indication 
 The firmware update blob might have changed the resolution. 
 The value reported by the firmware is invalid. 
 Get firmware version 
 Get kernel version 
 Get protocol version 
 Get chip boot mode 
 Wait for firmware to boot and stabilize itself. 
 Firmware does report valid information. 
 Application Mode 
 BootLoader Mode 
 Unknown Mode 
	
	  The firmware ihex blob can never be bigger than 64 kiB, so make this
	  simple -- allocate a 64 kiB buffer, iterate over the ihex blob records
	  once, copy them all into this buffer at the right locations, and then
	  do all operations on this linear buffer.
 The last 32 Byte firmware block can be 0xffe0 
 Find the last address before DF start address, that is AC end 
 DF end address is the last address in the firmware blob 
 Switch mode between Application and BootLoader 
 Mode already set 
 Unlock writes 
 Select mode (BootLoader or Application) 
 Reboot into bootloader takes a lot of time ... 
 Read back mode 
 Check if mode is correct now. 
 The read_reg already contains suitable delay 
	
	  The DF (dataflash) needs 2 bytes offset for unknown reasons,
	  the AC (application) has 2 bytes CRC16-CCITT at the end.
 Unlock write to either AC (application) or DF (dataflash) area 
 Check CRC readback 
 Reset the controller 
	
	  Disable touchscreen IRQ, so that we would not get spurious touch
	  interrupt during firmware update, and so that the IRQ handler won't
	  trigger and interfere with the firmware update. There is no bit in
	  the touch controller to disable the IRQs during update, so we have
	  to do it this way here.
 This may not succeed on first try, so re-try a few times. 
 The bootloader seems to need some time too. 
 This may not succeed on first try, so re-try a few times. 
 Calibrate is present on all ILI2xxx which have calibrate register 
 FirmwareKernelProtocolBootMode is implememted only for ILI251x 
 Tell ISR to quit even if there is a contact. 
 Setup input device 
 Multi touch 
  Touchscreen driver for the TS-4800 board
  Copyright (c) 2015 - Savoir-faire Linux
  This file is licensed under the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
 polling interval in ms 
 sensor values are 12-bit wide 
 SPDX-License-Identifier: GPL-2.0-only
 SPDX-License-Identifier: GPL-2.0-or-later
  TSC2004TSC2005 touchscreen driver core
  Copyright (C) 2006-2010 Nokia Corporation
  Copyright (C) 2015 QWERTY Embedded Design
  Copyright (C) 2015 EMAC Inc.
  Author: Lauri Leukkunen <lauri.leukkunen@nokia.com>
  based on TSC2301 driver by Klaus K. Pedersen <klaus.k.pedersen@nokia.com>
  The touchscreen interface operates as follows:
  1) Pen is pressed against the touchscreen.
  2) TSC200X performs AD conversion.
  3) After the conversion is done TSC200X drives DAV line down.
  4) GPIO IRQ is received and tsc200x_irq_thread() is scheduled.
  5) tsc200x_irq_thread() queues up a transfer to fetch the x, y, z1, z2
     values.
  6) tsc200x_irq_thread() reports coordinates to input layer and sets up
     tsc200x_penup_timer() to be called after TSC200X_PENUP_TIME_MS (40ms).
  7) When the penup timer expires, there have not been touch or DAV interrupts
     during the last 40ms which means the pen has been lifted.
  ESD recovery via a hardware reset is done if the TSC200X doesn't respond
  after a configurable period (in ms) of activity. If esd_timeout is 0, the
  watchdog is disabled.
 raw copy of previous x,y,z 
 read the coordinates 
 validate position 
 Skip reading if the pressure components are out of range 
	 Skip point if this is a pen down with the exact same values as
	 the value before pen-up - that implies SPI fed us stale data
	
	  At this point we are happy we have a valid and useful reading.
	  Remember it for later comparisons. We may now begin downsampling.
 Compute touch pressure resistance using equation #1 
 only 10us required 
 must be called with ts->mutex held 
 must be called with ts->mutex held 
	
	  Test TSC200X communications via temp high register.
 hardware reset 
 test that the reset really happened 
		
		  If the mutex is taken, it means that disable or enable is in
		  progress. In that case just reschedule the work. If the work
		  is not needed, it will be canceled by disable.
 We should be able to read register without disabling interrupts. 
	
	  If we could not read our known value from configuration register 0
	  then we should reset the controller as if from power-up and start
	  scanning again.
 re-arm the watchdog 
 Ensure the touchscreen is off 
 SPDX-License-Identifier: GPL-2.0
 STMicroelectronics FTS Touchscreen device driver
 Copyright (c) 2017 Samsung Electronics Co., Ltd.
 Copyright (c) 2017 Andi Shyti <andi@etezian.org>
 I2C commands 
 events 
 multi touch related event masks 
 key related event masks 
	
	  Presence of ledvdd will be used also to check
	  whether the LED is supported.
  We can't simply use i2c_smbus_read_i2c_block_data because we
  need to read more than 255 bytes (
 I can still use only the touch screen 
	
	  The datasheet does not specify the power on time, but considering
	  that the reset time is < 10ms, I sleep 20ms to be sure
 optional tuning 
 optional tuning 
	
	  At this point no one is using the touchscreen
	  and I don't really care about the return value
 This function is void because I don't want to prevent using the touch key
  only because the LEDs don't get registered
 get the regulator for powering the leds on 
	
	  stmfts_power_on expects interrupt to be disabled, but
	  at this point the device is still off and I do not trust
	  the status of the irq line that can generate some spurious
	  interrupts. To be on the safe side it's better to not enable
	  the interrupts during their request.
			
			  Even if the LEDs have failed to be initialized and
			  used in the driver, I can still use the device even
			  without LEDs. The ledvdd regulator pointer will be
			  used as a flag.
 SPDX-License-Identifier: GPL-2.0-or-later
  mcs5000_ts.c - Touchscreen driver for MELFAS MCS-5000 controller
  Copyright (C) 2009 Samsung Electronics Co.Ltd
  Author: Joonyoung Shim <jy0922.shim@samsung.com>
  Based on wm97xx-core.c
 Registers 
 Touchscreen absolute values 
 Each client has this additional data 
 TODO 
 TODO 
 TODO 
 Touch reset & sleep mode 
 Touch size 
 Touch active mode & 80 report rate 
 Touch sleep mode 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  iNexio serial touchscreen driver
  Copyright (c) 2008 Richard Lemon
  Based on the mtouch driver (c) Vojtech Pavlik and Dan Streetman
  20080619 Richard Lemon <richard@codelemon.com>
    Copied mtouch.c and edited for iNexio protocol
  Definitions & global arrays.
 todo: check specs for max length of all responses 
  Per-touchscreen data.
  inexio_disconnect() is the opposite of inexio_connect()
  inexio_connect() is the routine that is called when someone adds a
  new serio device that supports iNexio protocol and registers it as
  an input device. This is usually accomplished using inputattach.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0
 Melfas MMS114MMS136MMS152 touchscreen device driver
 Copyright (c) 2012 Samsung Electronics Co., Ltd.
 Author: Joonyoung Shim <jy0922.shim@samsung.com>
 Write only registers 
 Read only registers 
 Minimum delay time is 50us between stop and start signal of i2c 
 200ms needs after power on 
 Touchscreen absolute values 
 Touch type 
 Use cache data for mode control register(write only) 
 Write register 
 Read data 
 MMS136 has slightly different event size 
 If active is false, sleep mode 
 MMS114, MMS134S and MMS136 have configuration and power on registers 
		
		  The firmware handles movement and pressure fuzz, so
		  don't duplicate that in software.
 Release all touch 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for I2C connected EETI EXC3000 multiple touch controller
  Copyright (C) 2017 Ahmet Inan <inan@distec.de>
  minimal implementation based on egalax_ts.c and egalax_i2c.c
 Read 2nd frame to get the rest of the contacts. 
 2nd chunk must have number of contacts set to 0. 
	
	  We read full state successfully, no contacts will be "stuck".
 Schedule a timer to release "stuck" contacts 
 Schedule a timer to release "stuck" contacts 
 query bootloader info 
	
	  If the bootloader version is non-zero then the device is in
	  bootloader mode and won't answer a query for the application FW
	  version, so we just use the bootloader version info.
	
	  I²C does not have built-in recovery, so retry on failure. This
	  ensures, that the device probe will not fail for temporary issues
	  on the bus.  This is not needed for the sysfs calls (userspace
	  will receive the error code and can start another query) and
	  cannot be done for touch events (but that only means loosing one
	  or two touch events anyways).
 SPDX-License-Identifier: GPL-2.0-only
  Hampshire serial touchscreen driver
  Copyright (c) 2010 Adam Bennett
  Based on the dynapro driver (c) Tias Guns
  20100408 Adam Bennett <abennett72@gmail.com>
    Copied dynapro.c and edited for Hampshire 4-byte protocol
  Definitions & global arrays.
  Per-touchscreen data.
  hampshire_connect() is the routine that is called when someone adds a
  new serio device that supports hampshire protocol and registers it as
  an input device. This is usually accomplished using inputattach.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2006-2008 Michael Hennerich, Analog Devices Inc.
  Description:	AD7877 based touchscreen, sensor (ADCs), DAC and GPIO driver
  Based on:	ads7846.c
  Bugs:        Enter bugs at http:blackfin.uclinux.org
  History:
  Copyright (c) 2005 David Brownell
  Copyright (c) 2006 Nokia Corporation
  Various changes: Imre Deak <imre.deak@nokia.com>
  Using code from:
   - corgi_ts.c
 	Copyright (C) 2004-2005 Richard Purdie
   - omap_ts.[hc], ads7846.h, ts_osk.c
 	Copyright (C) 2002 MontaVista Software
 	Copyright (C) 2004 Texas Instruments
 	Copyright (C) 2005 Dirk Behme
 DAC Register Default RANGE 0 to Vcc, Volatge Mode, DAC On 
 If gpio3 is set AUX3GPIO3 acts as GPIO Output 
 Control REG 2 
 Control REG 1 
 non-differential 
 differential 
 Do not convert 
 Single channel conversion 
 Sequence 0 in Slave Mode 
 Sequence 1 in Master Mode 
  Non-touchscreen sensors only use single-ended conversions.
	
	  DMA (thus cache coherency maintenance) requires the
	  transfer buffers to live in their own cache lines.
 P: mutex 
 P: mutex 
 P: mutex 
 P: lock 
	
	  DMA (thus cache coherency maintenance) requires the
	  transfer buffers to live in their own cache lines.
 activate reference, so it has time to settle; 
REF OFF
DEFAULT
	 group all the transfers together, so we can't interfere with
	  reading touchscreen state; disable penirq while sampling
	
	  The samples processed here are already preprocessed by the AD7877.
	  The preprocessing function consists of an averaging filter.
	  The combination of 'first conversion delay' and averaging provides a robust solution,
	  discarding the spurious noise in the signal and keeping only the data of interest.
	  The size of the averaging filter is programmable. (dev.platform_data, see linuxspiad7877.h)
	  Other user-programmable conversion controls include variable acquisition time,
	  and first conversion delay. Up to 16 averages can be taken per conversion.
 compute touch pressure resistance using equation #1 
		
		  Sample found inconsistent, pressure is beyond
		  the maximum. Don't report it to user space.
	
	  We know the chip's in lowpower mode since we always
	  leave it that way after every request
 Send ZERO 
 don't exceed max specified SPI CLK frequency 
 Request AD7877 DAV GPIO interrupt 
 SPDX-License-Identifier: GPL-2.0
  Raspberry Pi firmware based touchscreen driver
  Copyright (C) 2015, 2017 Raspberry Pi
  Copyright (C) 2018 Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
 60fps 
 Not supported 
 Not supported 
	
	  We poll the memory based register copy of the touchscreen chip using
	  the number of points register to know whether the copy has been
	  updated (we write 99 to the memory copy, the GPU will write between
	  0 - 10 points)
 SPDX-License-Identifier: GPL-2.0-only
  Touchscreen driver for Dialog Semiconductor DA9034
  Copyright (C) 2006-2008 Marvell International Ltd.
 	Fengwei Yin <fengwei.yin@marvell.com>
 	Bin Yang  <bin.yang@marvell.com>
 	Eric Miao <eric.miao@marvell.com>
 wait for pendown 
 TSI busy sampling 
 sample available 
 Wait to start next sample 
		 Enable auto measurement of the TSI, this will
		  automatically disable pen down detection
		 Disable auto measurement of the TSI, so that
		  pen down status will be available
		 FIXME: PEN_{UPDOWN} events are expected to be
		  available by stopping TSI, but this is found not
		  always true, delay and simulate such an event
		  here is more reliable
 Enable ADC LDO 
 TSI_DELAY: 3 slots, TSI_SKIP: 3 slots 
 Disable ADC LDO 
 fallback into default 
 SPDX-License-Identifier: GPL-2.0-or-later
  Freescale MXS LRADC touchscreen driver
  Copyright (c) 2012 DENX Software Engineering, GmbH.
  Copyright (c) 2017 Ksenija Stanojevic <ksenija.stanojevic@gmail.com>
  Authors:
   Marek Vasut <marex@denx.de>
   Ksenija Stanojevic <ksenija.stanojevic@gmail.com>
  Touchscreen handling
	
	  When the touchscreen is enabled, we give it two private virtual
	  channels: #6 and #7. This means that only 6 virtual channels (instead
	  of 8) will be available for buffered capture.
 state machine 
 handle touchscreen's physical behaviour 
 samples per coordinate 
 time clocks between samples 
 time in clocks to wait after the plates where switched 
	
	  prepare for oversampling conversion
	 
	  from the datasheet:
	  "The ACCUMULATE bit in the appropriate channel register
	  HW_LRADC_CHn must be set to 1 if NUM_SAMPLES is greater then 0;
	  otherwise, the IRQs will not fire."
	 from the datasheet:
	  "Software must clear this register in preparation for a
	  multi-cycle accumulation.
	
	  prepare the delayloop unit according to the oversampling count
	 
	  from the datasheet:
	  "The DELAY fields in HW_LRADC_DELAY0, HW_LRADC_DELAY1,
	  HW_LRADC_DELAY2, and HW_LRADC_DELAY3 must be non-zero; otherwise,
	  the LRADC will not trigger the delay group."
	
	  after changing the touchscreen plates setting
	  the signals need some initial time to settle. Start the
	  SoC's delay unit and start the conversion later
	  and automatically.
  Pressure detection is special:
  We want to do both required measurements for the pressure detection in
  one turn. Use the hardware features to chain both conversions and let the
  hardware report one interrupt if both conversions are done
	
	  prepare for oversampling conversion
	 
	  from the datasheet:
	  "The ACCUMULATE bit in the appropriate channel register
	  HW_LRADC_CHn must be set to 1 if NUM_SAMPLES is greater then 0;
	  otherwise, the IRQs will not fire."
	 from the datasheet:
	  "Software must clear this register in preparation for a
	  multi-cycle accumulation.
 prepare the delayloop unit according to the oversampling count 
	
	  after changing the touchscreen plates setting
	  the signals need some initial time to settle. Start the
	  SoC's delay unit and start the conversion later
	  and automatically.
 simply scale the value from 0 ... max ADC resolution 
  YP(open)--+-------------+
 	     |		   |--+
 	     |		   |  |
     YM(-)--+-------------+  |
 	       +--------------+
 	       |	      |
 	   XP(weak+)	    XM(open)
  "weak+" means 200k Ohm VDDIO
  (-) means GND
	
	  In order to detect a touch event the 'touch detect enable' bit
	  enables:
	   - a weak pullup to the X+ connector
	   - a strong ground at the Y- connector
  YP(meas)--+-------------+
 	     |		   |--+
 	     |		   |  |
  YM(open)--+-------------+  |
 	       +--------------+
 	       |	      |
 	     XP(+)	    XM(-)
  (+) means here 1.85 V
  (-) means here GND
    YP(+)--+-------------+
 	    |		  |--+
 	    |		  |  |
    YM(-)--+-------------+  |
 	      +--------------+
 	      |		     |
 	   XP(open)	   XM(meas)
  (+) means here 1.85 V
  (-) means here GND
     YP(+)--+-------------+
 	     |		   |--+
 	     |		   |  |
  YM(meas)--+-------------+  |
 	       +--------------+
 	       |	      |
 	    XP(meas)	    XM(-)
  (+) means here 1.85 V
  (-) means here GND
	
	  start with the Y-pos, because it uses nearly the same plate
	  settings like the touch detection
	
	  start a dummy conversion to burn time to settle the signals
	  note: we are not interested in the conversion's value
  in order to avoid false measurements, report only samples where
  the surface is still touched after the position measurement
 if it is still touched, report the sample 
 if it is even still touched, continue with the next measurement 
 signal the release 
 if it is released, wait for the next touch via IRQ 
 touchscreen's state machine 
 IRQ Handling 
 Make sure we don't clear the next conversion's interrupt. 
 Enable the touch-detect circuitry. 
 stop all interrupts from firing 
 Power-down touchscreen touch-detect circuitry. 
 Configure the touchscreen type 
 SPDX-License-Identifier: GPL-2.0-only
  MicroTouch (3M) serial touchscreen driver
  Copyright (c) 2004 Vojtech Pavlik
  20050219 Dan Streetman <ddstreet@ieee.org>
    Copied elo.c and edited for MicroTouch protocol
  Definitions & global arrays.
 todo: check specs for max length of all responses 
  Per-touchscreen data.
 FIXME - process response 
  mtouch_disconnect() is the opposite of mtouch_connect()
  mtouch_connect() is the routine that is called when someone adds a
  new serio device that supports MicroTouch (Format Tablet) protocol and registers it as
  an input device.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2016, Jelle van der Waa <jelle@vdwaa.nl>
	
	  First 3 bytes are an identifier, two bytes of finger data.
	  X, Y data per finger is 4 bytes.
 SPDX-License-Identifier: GPL-2.0-or-later
  AD7879AD7889 based touchscreen and GPIO driver
  Copyright (C) 2008-2010 Michael Hennerich, Analog Devices Inc.
  History:
  Copyright (c) 2005 David Brownell
  Copyright (c) 2006 Nokia Corporation
  Various changes: Imre Deak <imre.deak@nokia.com>
  Using code from:
   - corgi_ts.c
 	Copyright (C) 2004-2005 Richard Purdie
   - omap_ts.[hc], ads7846.h, ts_osk.c
 	Copyright (C) 2002 MontaVista Software
 	Copyright (C) 2004 Texas Instruments
 	Copyright (C) 2005 Dirk Behme
   - ad7877.c
 	Copyright (C) 2006-2008 Analog Devices Inc.
 Control REG 1 
 Do not convert 
 Single channel conversion 
 Sequence 0 in Slave Mode 
 Sequence 1 in Master Mode 
 PENIRQ disabled INT enabled 
 Control REG 2 
 non-differential 
 differential 
 Control REG 3 
 P: input->mutex 
 P: input->mutex 
	
	  The samples processed here are already preprocessed by the AD7879.
	  The preprocessing function consists of a median and an averaging
	  filter.  The combination of these two techniques provides a robust
	  solution, discarding the spurious noise in the signal and keeping
	  only the data of interest.  The size of both filters is
	  programmable. (dev.platform_data, see linuxplatform_dataad7879.h)
	  Other user-programmable conversion controls include variable
	  acquisition time, and first conversion delay. Up to 16 averages can
	  be taken per conversion.
 compute touch pressure resistance using equation #1 
		
		  Sample found inconsistent, pressure is beyond
		  the maximum. Don't report it to user space.
		
		  Note that we delay reporting events by one sample.
		  This is done to avoid reporting last sample of the
		  touch sequence, which may be incomplete if finger
		  leaves the surface before last reading is taken.
 Touch continues 
 protected by input->mutex 
 protected by input->mutex 
 Do not create a chip unless flagged for it 
 SPDX-License-Identifier: GPL-2.0-only
  ROHM BU2102324 Dual touch support resistive touch screen driver
  Copyright (C) 2012 ROHM CO.,LTD.
 msec 
 zero for infinite 
  BU21023GULBU21023MUVBU21024FV-M registers map
  Value for VADOUT__L
  Value for PRM__L
  Value for POS__L
  Values for INT_
  Values for ERR_
 Not supported by BU21023 
 10  (reg + 1) MHz 
 The minimum value is 4 
  rohm_i2c_burst_read - execute combined I2C message for ROHM BU2102324
  @client: Handle to ROHM BU2102324
  @start: Where to start read address from ROHM BU2102324
  @buf: Where to store read data from ROHM BU2102324
  @len: How many bytes to read
  Returns negative errno, else zero on success.
  Note
  In BU2102324 burst read, stop condition is needed after "address write".
  Therefore, transmission is performed in 2 steps.
 for PRM1_X_H(0x08)-TOUCH(0x28) 
 wait 2 sampling for update 
 generate calibration parameter 
 generate adjustment parameter 
 X axis ajust 
 Y axis ajust 
 generate calibration setting value 
 convert for register format 
		
		  force calibration sequcence
 clear all interrupts 
		
		  Wait for the status change of calibration, max 10 sampling
 calibration data enable 
 wait 10 sampling 
 Clear all interrupts 
 for POS_X1_H(0x20)-TOUCH_GESTURE(0x29) 
 Clear all interrupts 
 generate coordinates 
 settings for retry 
 firmware load to the device 
 check firmware load result 
 clear all interrupts 
	
	  Wait 200usec for reset
 Release analog reset 
 Waiting for the analog warm-up, max. 200usec 
 clear all interrupts 
	
	  Panel setup, these values change with the panel.
 Fixed value settings 
	
	  Manual calibration results are not changed in same environment.
	  If the force calibration is performed,
	  the controller will not require calibration request interrupt
	  when the typical values are set to the calibration registers.
 Clear all interrupts 
 Enable coordinates update interrupt 
 controller CPU power on 
 Turn off CPU just in case 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
  Wacom Penabled Driver for I2C
  Copyright (c) 2011 - 2013 Tatsunosuke Tobita, Wacom.
  <tobita.tatsunosuke@wacom.co.jp>
 Bitmasks (for data[3]) 
 Registers 
 Disable the IRQ, we'll enable it in wac_i2c_open() 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2021
  Author(s): Giulio Benetti <giulio.benetti@benettiengineering.com>
 sentinel  }
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  Driver for Cypress CY8CTMA140 (TMA140) touchscreen
  (C) 2020 Linus Walleij <linus.walleij@linaro.org>
  (C) 2007 Cypress
  (C) 2007 Google, Inc.
  Inspired by the tma140_skomer.c driver in the Samsung GT-S7710 code
  drop. The GT-S7710 is codenamed "Skomer", the code also indicates
  that the same touchscreen was used in a product called "Lucas".
  The code drop for GT-S7710 also contains a firmware downloader and
  15 (!) versions of the firmware drop from Cypress. But here we assume
  the firmware got downloaded to the touchscreen flash successfully and
  just use it to read the fingers. The shipped vendor driver does the
  same.
 This message also fits some bytes for touchkeys, if used 
		
		  Odd contacts have contact ID in the lower nibble of
		  the preceding byte, whereas even contacts have it in
		  the upper nibble of the following byte.
 Called from the registered devm action 
 One byte for width 0..255 so this is the limit 
	
	  This sets up event maxmin capabilities and fuzz.
	  Some DT properties are compulsory so we do not need
	  to provide defaults for XY max or pressure max.
	 
	  We just initialize a very simple MT touchscreen here,
	  some devices use the capability of this touchscreen to
	  provide touchkeys, and in that case this needs to be
	  extended to handle touchkey input.
	 
	  The firmware takes care of finger tracking and dropping
	  invalid ranges.
	
	  VCPIN is the analog voltage supply
	  VDD is the digital voltage supply
	  since the voltage range of VDD overlaps that of VCPIN,
	  many designs to just supply both with a single voltage
	  source of ~3.3 V.
 sentinel  }
 sentinel  }
 Copyright (C) 2015 Broadcom Corporation
 This program is free software; you can redistribute it andor
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation version 2.
 This program is distributed "as is" WITHOUT ANY WARRANTY of any
 kind, whether express or implied; without even the implied warranty
 of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.
 Value given by controller for invalid coordinate. 
 Register offsets 
 Bit values for INTERRUPT_MASK and INTERRUPT_STATUS regs 
 Bit values for CONTROLLER_STATUS reg1 
 Shift values for control reg1 
 Shift values for coordinates from fifo 
 Bit values for REGCTL2 
 Each step is 1024 us.  Valid 1-256 
  Each step is 512 us.  Valid 0-255 
	
	  The settling duration (in ms) is the amount of time the tsc
	  waits to allow the voltage to settle after turning on the
	  drivers in detection mode. Valid values: 0-11
	    0 =  0.008 ms
	    1 =  0.01 ms
	    2 =  0.02 ms
	    3 =  0.04 ms
	    4 =  0.08 ms
	    5 =  0.16 ms
	    6 =  0.32 ms
	    7 =  0.64 ms
	    8 =  1.28 ms
	    9 =  2.56 ms
	    10 = 5.12 ms
	    11 = 10.24 ms
 touch timeout in sample counts 
	
	  Number of data samples which are averaged before a final data point
	  is placed into the FIFO
 FIFO threshold 
 Optional standard touchscreen properties. 
  Set default values the same as hardware reset values
  except for fifo_threshold with is set to 1.
 1 to 256 
 0 to 255 
 0 to 11 
 0 to 255 
 entry 5 = 32 pts 
 0 to 31 
 Clear all interrupt status bits, write-1-clear 
 Pen updown 
 coordinates in FIFO exceed the theshold 
			
			  The x and y coordinate are 16 bits each
			  with the x in the lower 16 bits and y in the
			  upper 16 bits.
 We only want to retain the 12 msb of the 16 
 Adjust x y according to LCD tsc mount angle. 
 Enable clock 
	
	  Interrupt is generated when:
	   FIFO reaches the int_th value, and pen event(updown)
 Initialize control reg1 
 Try to clear all interrupt status 
 Initialize control reg2 
 PWR up LDO 
 PWR up ADC 
 PWR up BGP 
 PWR up TS 
	
	  Disable FIFO int_th and pen event(updown)Interrupts only
	  as the interrupt mask register is shared between ADC, TS and
	  flextimer.
 Only power down touch screen controller 
 Parse optional properties. 
 touchscreen controller memory mapped regs via syscon
 Set input device info  
 get interrupt 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for ELAN eKTF2127 i2c touchscreen controller
  For this driver the layout of the Chipone icn8318 i2c
  touchscreencontroller is used.
  Author:
  Michel Verlaan <michel.verl@gmail.com>
  Siebren Vroegindeweij <siebren.vroegindeweij@hotmail.com>
  Original chipone_icn8318 driver:
  Hans de Goede <hdegoede@redhat.com>
 Packet header defines (first byte of data send  received) 
 Register defines (second byte of data send  received) 
 2 bytes header + 5  3 bytes coordinates + 3 bytes pressure info + footer 
 Request dimension 
 Read response 
 This requests the gpio and turns on the touchscreen controller 
 Read hello (ignore result, depends on initial power state) 
 Read resolution from chip 
 Stop device till opened 
 SPDX-License-Identifier: GPL-2.0-or-later
  Samsung S3C24XX touchscreen driver
  Copyright 2004 Arnaud Patard <arnaud.patard@rtp-net.org>
  Copyright 2008 Ben Dooks <ben-linux@fluff.org>
  Copyright 2009 Simtec Electronics <linux@simtec.co.uk>
  Additional work by Herbert Pötzl <herbert@13thfloor.at> and
  Harald Welte <laforge@openmoko.org>
 ADCTSC Register Bits 
 ADCDAT0 Bits 
 ADCDAT1 Bits 
 HAS ADCCLRINTPNDNUP 
 Per-touchscreen data. 
  struct s3c2410ts - driver touchscreen state.
  @client: The ADC client we registered with the core driver.
  @dev: The device we are bound to.
  @input: The input device we registered with the input subsystem.
  @clock: The clock for the adc.
  @io: Pointer to the IO base.
  @xp: The accumulated X position data.
  @yp: The accumulated Y position data.
  @irq_tc: The interrupt number for pen updown interrupt
  @count: The number of samples collected.
  @shift: The log2 of the maximum count to read in one go.
  @features: The features supported by the TSADC MOdule.
  get_down - return the down state of the pen
  @data0: The data read from ADCDAT0 register.
  @data1: The data read from ADCDAT1 register.
  Return non-zero if both readings show that the pen is down.
 returns true if both data values show stylus down 
  stylus_irq - touchscreen stylus event interrupt
  @irq: The interrupt number
  @dev_id: The device ID.
  Called when the IRQ_TC is fired for a pen up or down event.
	 TODO we should never get an interrupt with down set while
	  the timer is running, but maybe we ought to verify that the
 Clear pen downup interrupt 
  s3c24xx_ts_conversion - ADC conversion callback
  @client: The client that was registered with the ADC core.
  @data0: The reading from ADCDAT0.
  @data1: The reading from ADCDAT1.
  @left: The number of samples left.
  Called when a conversion has finished.
	 From tests, it seems that it is unlikely to get a pen-up
	  event during the conversion process which means we can
	  ignore any pen-up events with less than the requisite
	  count done.
	 
	  In several thousand conversions, no pen-ups where detected
	  before count completed.
  s3c24xx_ts_select - ADC selection callback.
  @client: The client that was registered with the ADC core.
  @select: The reason for select.
  Called when the ADC core selects (or deslects) us as a client.
  s3c2410ts_probe - device core probe entry point
  @pdev: The device we are being bound to.
  Initialise, find and allocate any resources we need to run and then
  register with the ADC and input systems.
 Initialise input stuff 
 inititalise the gpio 
 Initialise registers 
 All went ok, so register to the input system 
  s3c2410ts_remove - device core removal entry point
  @pdev: The device we are being removed from.
  Free up our state ready to be removed.
 Initialise registers 
 SPDX-License-Identifier: GPL-2.0-or-later
  wm9713.c  --  Codec touch driver for Wolfson WM9713 AC97 Codec.
  Copyright 2003, 2004, 2005, 2006, 2007, 2008 Wolfson Microelectronics PLC.
  Author: Liam Girdwood <lrg@slimlogic.co.uk>
  Parts Copyright : Ian Molton <spyro@f2s.com>
                    Andrew Zabolotny <zap@homelink.ru>
                    Russell King <rmk@arm.linux.org.uk>
  Module parameters
  Set internal pull up for pen detect.
  Pull up is in the range 1.02k (least sensitive) to 64k (most sensitive)
  i.e. pull up resistance = 64k Ohms  rpu.
  Adjust this value if you are having problems with pen detect not
  detecting any down event.
  Set current used for pressure measurement.
  Set pil = 2 to use 400uA
      pil = 1 to use 200uA and
      pil = 0 to disable pressure measurement.
  This is used to increase the range of values returned by the adc
  when measureing touchpanel pressure.
  Set threshold for pressure measurement.
  Pen down pressure below threshold is ignored.
  Set adc sample delay.
  For accurate touchpanel measurements, some settling time may be
  required between the switch matrix applying a voltage across the
  touchpanel plate and the ADC sampling the signal.
  This delay can be set by setting delay = n, where n is the array
  position of the delay in the array delay_table below.
  Long delays > 1ms are supported for completeness, but are not
  recommended.
  Set five_wire = 1 to use a 5 wire touchscreen.
  NOTE: Five wire mode does not allow for readback of pressure.
  Set adc mask function.
  Sources of glitch noise, such as signals driving an LCD display, may feed
  through to the touch screen plates and affect measurement accuracy. In
  order to minimise this, a signal may be applied to the MASK pin to delay or
  synchronise the sampling.
  0 = No delay or sync
  1 = High on pin stops conversions
  2 = Edge triggered, edge on pin delays conversion by delay param (above)
  3 = Edge triggered, edge on pin starts conversion after delay param
  Coordinate Polling Enable.
  Set to 1 to enable coordinate polling. e.g. x,y[,p] is sampled together
  for every poll.
  ADC sample delay times in uS
 1 AC97 Link frames 
 2 
 4 
 8 
 16 
 32 
 48 
 64 
 96 
 128 
 160 
 192 
 224 
 256 
 288 
 No delay, switch matrix always on 
  Delay after issuing a POLL command.
  The delay is 3 AC97 link frames + the touchpanel settling delay
  set up the physical settings of the WM9713
 default values 
 rpu 
 Five wire panel? 
 touchpanel pressure 
 sample settling delay 
 mask 
 dummy read 
  Read a sample from the WM9713 adc in polling mode.
 set up digitiser 
 WM97XX_ADCSEL_ channels need to be converted to WM9713 format 
 wait 3 AC97 time slots + delay for conversion 
 wait for POLL to go low 
 If PDEN is set, we can get a timeout when pen goes up 
 check we have correct sample 
  Read a coordinate from the WM9713 adc in polling mode.
 set up digitiser 
 wait 3 AC97 time slots + delay for conversion 
 wait for POLL to go low 
 If PDEN is set, we can get a timeout when pen goes up 
 read back data 
 check we have correct sample 
  Sample the WM9713 touchscreen in polling mode
  Enable WM9713 continuous mode, i.e. touch data is streamed across
  an AC97 slot
 continuous mode 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  ICS MK712 touchscreen controller driver
  Copyright (c) 1999-2002 Transmeta Corporation
  Copyright (c) 2005 Rick Koch <n1gp@hotmail.com>
  Copyright (c) 2005 Vojtech Pavlik <vojtech@suse.cz>
  This driver supports the ICS MicroClock MK712 TouchScreen controller,
  found in Gateway AOL Connected Touchpad computers.
  Documentation for ICS MK712 can be found at:
 	https:www.idt.comgeneral-partsmk712-touch-screen-controller
  1999-12-18: original version, Daniel Quinlan
  1999-12-19: added anti-jitter code, report pen-up events, fixed mk712_poll
              to use queue_empty, Nathan Laredo
  1999-12-20: improved random point rejection, Nathan Laredo
  2000-01-05: checked in new anti-jitter code, changed mouse protocol, fixed
              queue code, added module options, other fixes, Daniel Quinlan
  2002-03-15: Clean up for kernel merge <alan@redhat.com>
              Fixed multi open race, fixed memory checks, fixed resource
              allocation, fixed closepowerdown bug, switched to new init
  2005-01-18: Ported to 2.6 from 2.4.28, Rick Koch
  2005-02-05: Rewritten for the input layer, Vojtech Pavlik
 Also 0x200, 0x208, 0x300 
 Also 12, 14, 15 
 eight 8-bit registers 
 status 
 control 
 Reset 
 187 points per second 
 Sanity check 
 SPDX-License-Identifier: GPL-2.0-or-later
  mainstone-wm97xx.c  --  Mainstone Continuous Touch screen driver for
                          Wolfson WM97xx AC97 Codecs.
  Copyright 2004, 2007 Wolfson Microelectronics PLC.
  Author: Liam Girdwood <lrg@slimlogic.co.uk>
  Parts Copyright : Ian Molton <spyro@f2s.com>
                    Andrew Zabolotny <zap@homelink.ru>
  Notes:
      This is a wm97xx extended touch driver to capture touch
      data in a continuous manner on the Intel XScale architecture
   Features:
        - codecs supported:- WM9705, WM9712, WM9713
        - processors supported:- Intel XScale PXA25x, PXA26x, PXA27x
 codec id 
 continuous code 
 number of coord reads per read cycle 
 number of coords per second 
 continuous speed index 
  Pen sampling frequency (Hz) in continuous mode.
  Pen down detection.
  This driver can either poll or use an interrupt to indicate a pen down
  event. If the irq request fails then it will fall back to polling mode.
  Pressure readback.
  Set to 1 to read back pen down pressure
  AC97 touch data slot.
  Touch screen readback data ac97 slot
 flush AC97 slot 5 FIFO on pxa machines 
	 When the AC97 queue has been drained we need to allow time
	  to buffer up samples otherwise we end up spinning polling
	  for samples.  The controller can't have a suitably low
	  threshold set to use the notifications it gives.
 are samples valid 
 coordinate is good 
 check we have a codec 
 Go you big red fire engine 
 IRQ driven touchscreen is used on Palm hardware 
		 There is some obscure mutant of WM9712 interbred with WM9713
 pen irq not supported 
 codec specific irq config 
 use PEN_DOWN GPIO 13 to assert IRQ on GPIO line 2 
 codec specific deconfig 
 Module information 
 SPDX-License-Identifier: GPL-2.0
 Freescale i.MX6UL touchscreen controller driver
 Copyright (C) 2015 Freescale Semiconductor, Inc.
 ADC configuration registers field define 
 ADC registers 
 TSC registers 
 TSC configuration registers field define 
  TSC module need ADC to get the measure value. So
  before config TSC, we should initialize ADC module.
 enable calibration interrupt 
 start ADC calibration 
 TSC need the ADC work in hardware trigger 
  This is a TSC workaround. Currently TSC misconnect two
  ADC channels, this function remap channel configure for
  hardware trigger.
  TSC setting, confige the pre-charge time and measure delay time.
  different touch screen may need different pre-charge time and
  measure delay time.
 start sense detection 
 TSC controller enters to idle status 
 ADC controller enters to stop mode 
 Delay some time (max 2ms), wait the pre-charge done. 
 write 1 to clear the bit measure-signal 
 It's a HW self-clean bit. Set this bit and start sense detection 
		
		  In detect mode, we can get the xnur gpio value,
		  otherwise assume contact is stiull active.
 value unused; initialize anyway 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  Fujitsu serial touchscreen driver
  Copyright (c) Dmitry Torokhov <dtor@mail.ru>
  Per-touchscreen data.
  Decode serial data (5 bytes per packet)
  First byte
  1 C 0 0 R S S S
  Where C is 1 while in calibration mode (which we don't use)
  R is 1 when no coordinate corection was done.
  S are button state
 resync skip until start of frame 
 resync skip garbage 
  fujitsu_disconnect() is the opposite of fujitsu_connect()
  fujitsu_connect() is the routine that is called when someone adds a
  new serio device that supports the Fujitsu protocol and registers it
  as input device.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0-only
   Philips UCB1400 touchscreen driver
   Author:	Nicolas Pitre
   Created:	September 25, 2006
   Copyright:	MontaVista Software, Inc.
  Spliting done by: Marek Vasut <marek.vasut@gmail.com>
  If something doesn't work and it worked before spliting, e-mail me,
  dont bother Nicolas please ;-)
  This code is heavily based on ucb1x00-.c copyrighted by Russell King
  covering the UCB1100, UCB1200 and UCB1300..  Support for the UCB1400 has
  been made separate from ucb1x00-coreucb1x00-ts on Russell's request.
 ms 
 us 
 us 
 Switch to interrupt mode. 
  Switch to pressure mode, and read pressure.  We don't need to wait
  here, since both plates are being driven.
  Switch to X position mode and measure Y plate.  We switch the plate
  configuration in pressure mode, then switch to position mode.  This
  gives a faster response time.  Even so, we need to wait about 55us
  for things to stabilise.
  Switch to Y position mode and measure X plate.  We switch the plate
  configuration in pressure mode, then switch to position mode.  This
  gives a faster response time.  Even so, we need to wait about 55us
  for things to stabilise.
  Switch to X plate resistance mode.  Set MX to ground, PX to
  supply.  Measure current.
  Switch to Y plate resistance mode.  Set MY to ground, PY to
  supply.  Measure current.
  A restriction with interrupts exists when using the ucb1400, as
  the codec readwrite routines may sleep while waiting for codec
  access completion and uses semaphores for access control to the
  AC97 bus. Therefore the driver is forced to use threaded interrupt
  handler.
 Start with a small delay before checking pendown state 
 Switch back to interrupt mode. 
 Signal IRQ thread to stop polling and disable the handler. 
 Must be called with ts->lock held 
 Tell IRQ thread that it may poll the device. 
  Try to probe our interrupt, rather than relying on lots of
  hard-coded machine dependencies.
 Enable the ADC interrupt. 
 Cause an ADC interrupt. 
 Wait for the conversion to complete. 
 Disable and clear interrupt. 
 Read triggered interrupt. 
 Only in case the IRQ line wasn't supplied, try detecting it 
	
	  Enable ADC filter to prevent horrible jitter on Colibri.
	  This also further reduces jitter on boards where ADCSYNC
	  pin is connected.
 SPDX-License-Identifier: GPL-2.0-only
  Driver for Semtech SX8654 I2C touchscreen controller.
  Copyright (c) 2015 Armadeus Systems
 	Sébastien Szymanski <sebastien.szymanski@armadeus.com>
  Using code from:
   - sx865x.c
 	Copyright (c) 2013 U-MoBo Srl
 	Pierluigi Passaro <p.passaro@u-mobo.com>
   - sx8650.c
       Copyright (c) 2009 Wayne Roberts
   - tsc2007.c
       Copyright (c) 2008 Kwangwoo Lee
   - ads7846.c
       Copyright (c) 2005 David Brownell
       Copyright (c) 2006 Nokia Corporation
   - corgi_ts.c
       Copyright (C) 2004-2005 Richard Purdie
   - omap_ts.[hc], ads7846.h, ts_osk.c
       Copyright (C) 2002 MontaVista Software
       Copyright (C) 2004 Texas Instruments
       Copyright (C) 2005 Dirk Behme
 register addresses 
 commands 
 value for I2C_REG_SOFTRESET 
 bits for I2C_REG_IRQSRC 
 bits for RegTouch1 
 bits for I2C_REG_CHANMASK 
 coordinates rate: higher nibble of CTRL0 register 
 power delay: lower nibble of CTRL0 register 
 for sx8650, as we have no pen release IRQ there: timeout in ns following the
  last PENIRQ after which we assume the pen is lifted.
 see datasheet section 5.1.5 
 channel definition 
 for input reporting from irqtimer 
 invalid data 
 Tpulse > 1µs 
 enable pen trigger mode 
 enable manual mode mode 
 Disable the IRQ, we'll enable it in sx8654_open() 
 SPDX-License-Identifier: GPL-2.0-or-later
  Touch Screen driver for EETI's I2C connected touch screen panels
    Copyright (c) 2009,2018 Daniel Mack <daniel@zonque.org>
  See EETI's software guide for the protocol specification:
    http:home.eeti.com.twdocumentation.html
  Based on migor_ts.c
    Copyright (c) 2008 Magnus Damm
    Copyright (c) 2007 Ujjwal Pande <ujjwal@kenati.com>
 fix the range to 11 bits 
 Motion packet 
		
		  If we have attention GPIO, trust it. Otherwise we'll read
		  once and exit. We assume that in this case we are using
		  level triggered interrupt and it will get raised again
		  ifwhen there is more data.
	
	  Kick the controller in case we are using edge interrupt and
	  we missed our edge while interrupt was disabled. We expect
	  the attention GPIO to be wired in this case.
	
	  Not locking here, just setting a flag and expect that the
	  interrupt thread will notice the flag eventually.
	
	  In contrast to what's described in the datasheet, there seems
	  to be no way of probing the presence of that device using I2C
	  commands. So we need to blindly believe it is there, and wait
	  for interrupts to occur.
	
	  Disable the device for now. It will be enabled once the
	  input device is opened.
 SPDX-License-Identifier: GPL-2.0-only
  Goodix Touchscreen firmware upload support
  Copyright (c) 2021 Hans de Goede <hdegoede@redhat.com>
  This is a rewrite of gt9xx_update.c from the Allwinner H3 BSP which is:
  Copyright (c) 2010 - 2012 Goodix Technology.
  Author: andrew@goodix.com
 pid is a 8 byte buffer containing a string, weird I know 
 DSP_CK and DSP_ALU_CK PowerOn 
 Disable watchdog 
 Clear cache enable 
 Set boot from SRAM 
 Software reboot 
 Clear control flag 
 Set scramble 
 Enable accessing code 
 Init software watchdog 
 Release SS51 & DSP 
 The value we've written to SW_WDT should have been cleared now 
 Re-init software watchdog 
 Select SRAM bank 0 and upload section 1 & 2 
 Select SRAM bank 1 and upload section 3 & 4 
 Select SRAM bank 2 and upload the DSP firmware 
 Already done 
	
	  The bak_ref array contains the backup of an array of (selfauto)
	  calibration related values which the Android version of the driver
	  stores on the filesystem so that it can be restored after reboot.
	  The mainline kernel never writes directly to the filesystem like
	  this, we always start will all the values which give a correction
	  factor in approx. the -20 - +20 range (in 2s complement) set to 0.
	 
	  Note the touchscreen works fine without restoring the reference
	  values after a reboot  power-cycle.
	 
	  The last 2 bytes are a 16 bits unsigned checksum which is expected
	  to make the addition al all 16 bit unsigned values in the array add
	  up to 1 (rather then the usual 0), so we must set the last byte to 1.
 Default main clock 
 The value of all bytes combines must be 0 
		
		  If we read back our own last ack the IRQ was not for
		  a request.
 Ack the request 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for MStar msg2638 touchscreens
  Copyright (c) 2021 Vincent Knecht <vincent.knecht@mailoo.org>
  Checksum and IRQ handler based on mstar_drv_common.c and
  mstar_drv_mutual_fw_control.c
  Copyright (c) 2006-2012 MStar Semiconductor, Inc.
  Driver structure based on zinitix.c by Michael Srba <Michael.Srba@seznam.cz>
 higher bits of x and y coordinates 
 Ignore non-pressed finger data 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for ChipOne icn8318 i2c touchscreen controller
  Copyright (c) 2015 Red Hat Inc.
  Red Hat authors:
  Hans de Goede <hdegoede@redhat.com>
 Seems more like finger width then pressure really 
 The difference between 2 and 3 is unclear 
 No finger seen yet since wakeup 
 New or updated coordinates 
 New or updated coordinates 
 Finger lifted 
		
		  Other data is invalid when a softbutton is pressed.
		  This needs some extra devicetree bindings to map the icn8318
		  softbutton codes to evdev codes. Currently no known devices
		  use this.
 Stop device till opened 
 This is useless for OF-enabled devices, but it is needed by I2C subsystem 
 SPDX-License-Identifier: GPL-2.0-or-later
  Surface2.0SUR40PixelSense input driver
  Copyright (c) 2014 by Florian 'floe' Echtler <floe@butterbrot.org>
  Derived from the USB Skeleton driver 1.1,
  Copyright (c) 2003 Greg Kroah-Hartman (greg@kroah.com)
  and from the Apple USB BCM5974 multitouch driver,
  Copyright (c) 2008 Henrik Rydberg (rydberg@euromail.se)
  and from the generic hid-multitouch driver,
  Copyright (c) 2010-2012 Stephane Chatty <chatty@enac.fr>
  and from the v4l2-pci-skeleton driver,
  Copyright (c) Copyright 2014 Cisco Systems, Inc.
 read 512 bytes from endpoint 0x86 -> get header + blobs 
 always 0x0001 
 count of blobs (if 0: continue prev. packet) 
 unique ID for all packets in one frame 
 milliseconds (inc. by 16 or 17 each frame) 
 "epoch?" always 0203 00 00 00 
 0x02 = enterexit, 0x03 = update (?) 
 bitmask (0x01 blob,  0x02 touch, 0x04 tag) 
 upper left corner of bounding box 
 size of bounding box 
 finger tip position 
 centroid position 
 somehow related to majorminor axis, mostly: 
 axis_x == bb_size_y && axis_y == bb_size_x 
	__le32 angle;       orientation in radians relative to x axis -
 size in pixelspressure (?) 
 valid when type == 0x04 (SUR40_TAG) 
 combined headerblob data 
 read 512 bytes from endpoint 0x82 -> get header below
 "SUBF" 
 always 0x0007e900 = 960x540 
 milliseconds (increases by 16 or 17 each frame) 
 "epoch?" always 0203 00 00 00 
 version information 
 vendor and device IDs 
 sensor resolution 
 touch data endpoint 
 video data endpoint 
 video header fields 
 polling interval (ms) 
 maximum number of contacts FIXME: this is a guess? 
 control commands 
 12 bytes string    
  5 bytes           
 24 bytes           
 poke register byte 
 48 bytes registers 
  4 bytes state (?) 
  8 bytes sensors   
 video controls 
 module parameters 
 master device state 
 forward declarations 
  Note: an earlier, non-public version of this driver used USB_RECIP_ENDPOINT
  here by mistake which is very likely to have corrupted the firmware EEPROM
  on two separate SUR40 devices. Thanks to Alan Stern who spotted this bug.
  Should you ever run into a similar problem, the background story to this
  incident and instructions on how to fix the corrupted EEPROM are available
  at https:floe.butterbrot.orgmatrixhackingsurfacebrick.html
 command wrapper 
 poke a byte in the panel register space 
 0xae for permanent write
 Initialization routine, called from sur40_open 
 stupidly replay the original MS driver init sequence 
	
	  Discard the result buffer - no known data inside except
	  some version strings, maybe extract these sometime...
  Callback routines from input_dev
 Enable the device, polling will now start. 
 Disable device, polling has stopped. 
	
	  There is no known way to stop the device, so we simply
	  stop polling.
  This function is called when a whole contact has been processed,
  so that it can assign it to a slot and store the data there.
 TODO: use a better orientation measure 
 core function: poll for new input data 
 perform a blocking bulk read to get data from the device 
 first packet? 
 packet_id = le32_to_cpu(header->packet_id); 
		
		  Sanity check. when video data is also being retrieved, the
		  packet ID will usually increase in the middle of a series
		  instead of at the end. However, the data is still consistent,
		  so the packet ID is probably just valid for the first packet
		  in a series.
		if (packet_id != le32_to_cpu(header->packet_id))
			dev_dbg(sur40->dev, "packet ID mismatch\n");
 packets always contain at least 4 blobs, even if empty 
 deal with video data 
 get a new buffer from the list 
 retrieve data via bulk read 
 return error if streaming was stopped in the meantime 
 mark as finished 
 Initialize input device parameters. 
	 max value unknown, but majorminor axis
 Check candidate USB interface. 
 Check if we really have the right interface. 
 Use endpoint #4 (0x86). 
 Allocate memory for our device state and initialize it. 
 initialize lockslists 
 Set up regular input device structure 
 use the bulk-in endpoint tested above 
 register the polled input device 
 register the video master device 
 initialize the lock and subdevice 
 initialize the queue 
 initialize the control handler for 4 controls 
 we can register the device now, as it is ready 
 Unregister device & clean up. 
  Setup the constraints of the queue: besides setting the number of planes
  per buffer and the size and allocation context of each plane, it also
  checks if sufficient buffers have been allocated. Usually 3 is a good
  minimum number: many DMA engines need a minimum of 2 buffers in the
  queue and you need to have another available for userspace processing.
  Prepare the buffer for queueing to the DMA engine: check and set the
  payload size.
  Queue this buffer to the DMA engine.
  Start streaming. First check if the minimum number of buffers have been
  queued. If not, then return -ENOBUFS and the vb2 framework will call
  this function again the next time a buffer has been queued until enough
  buffers are available to actually start the DMA engine.
  Stop the DMA engine. Any remaining buffers in the DMA queue are dequeued
  and passed on to the vb2 framework marked as STATE_ERROR.
 Release all active buffers 
 V4L ioctl 
 Samsung SUR40 
 terminating null entry 
 V4L2 structures 
	
	  VB2_USERPTR in currently not enabled: passing a user pointer to
	  dma-sg will result in segment sizes that are not a multiple of
	  512 bytes, which is required by the host controller.
 USB-specific object needed to register this driver with the USB subsystem. 
 SPDX-License-Identifier: GPL-2.0-or-later
  TSC2005 touchscreen driver
  Copyright (C) 2006-2010 Nokia Corporation
  Copyright (C) 2015 QWERTY Embedded Design
  Copyright (C) 2015 EMAC Inc.
  Based on original tsc2005.c by Lauri Leukkunen <lauri.leukkunen@nokia.com>
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
  wm97xx-core.c  --  Touch screen driver core for Wolfson WM9705, WM9712
                     and WM9713 AC97 Codecs.
  Copyright 2003, 2004, 2005, 2006, 2007, 2008 Wolfson Microelectronics PLC.
  Author: Liam Girdwood <lrg@slimlogic.co.uk>
  Parts Copyright : Ian Molton <spyro@f2s.com>
                    Andrew Zabolotny <zap@homelink.ru>
                    Russell King <rmk@arm.linux.org.uk>
  Notes:
   Features:
        - supports WM9705, WM9712, WM9713
        - polling mode
        - continuous mode (arch-dependent)
        - adjustable rpudpp settings
        - adjustable pressure current
        - adjustable sample settle delay
        - 4 and 5 wire touchscreens (5 wire is WM9712 only)
        - pen down detection
        - battery monitor
        - sample AUX adcs
        - power management
        - codec GPIO
        - codec event notification
  Todo
        - Support for async sampling control for noisy LCDs.
  Touchscreen absolute values
  These parameters are used to help the input layer discard out of
  range readings and reduce jitter etc.
    o min, max:- indicate the min and max values your touch screen returns
    o fuzz:- use a higher number to reduce jitter
  The default values correspond to Mainstone II in QVGA mode
  Please read
  Documentationinputinput-programming.rst for more details.
  wm97xx IO access, all IO locking done by AC97 layer
 cache digitiser registers 
 cache gpio regs 
 wm9713 irq reg 
  wm97xx_read_aux_adc - Read the aux adc.
  @wm: wm97xx device.
  @adcsel: codec ADC to be read
  Reads the selected AUX ADC.
 get codec 
	 When the touchscreen is not in use, we may have to power up
	  the AUX ADC before we can use sample the AUX inputs->
 Prepare the codec for AUX reading 
 Turn polling mode on to read AUX ADC 
  wm97xx_get_gpio - Get the status of a codec GPIO.
  @wm: wm97xx device.
  @gpio: gpio
  Get the status of a codec GPIO pin
  wm97xx_set_gpio - Set the status of a codec GPIO.
  @wm: wm97xx device.
  @gpio: gpio
  @status: status
  Set the status of a codec GPIO pin
  Codec GPIO pin configuration, this sets pin direction, polarity,
  stickyness and wake up.
  Configure the WM97XX_PRP value to use while system is suspended.
  If a value other than 0 is set then WM97xx pen detection will be
  left enabled in the configured mode while the system is in suspend,
  the device has users and suspend has not been disabled via the
  wakeup sysfs entries.
  @wm:   WM97xx device to configure
  @mode: WM97XX_PRP value to configure while suspended
  Handle a pen down interrupt.
 do we need to enable the touch panel reader 
	 If the system is not using continuous mode or it provides a
	  pen down operation then we need to schedule polls while the
	  pen is down.  Otherwise the machine driver is responsible
	  for scheduling reads.
 Data is not available immediately on pen down 
 Let ts_reader report the pen up for debounce. 
  Codec PENDOWN irq handler
  We have to disable the codec interrupt in the handler because it
  can take up to 1ms to clear the interrupt source. We schedule a task
  in a work queue to do the actual interaction with the chip.  The
  interrupt is then enabled again in the slow handler when the source
  has been cleared.
  initialise pen IRQ handler and workqueue
	 If an interrupt is supplied an IRQ enable operation must also be
 Configure GPIO as interrupt source on WM971x 
			 We need high frequency updates only while
			 pen is down, the user never will be able to
			 touch screen faster than a few times per
			 second... On the other hand, when the user
			 is actively working with the touchscreen we
			 don't want to lose the quick response. So we
			 will slowly increase sleep time after the
			 pen is up and quicky restore it to ~one task
			 switch when pen is down again.
 The touchscreen sample reader.
  wm97xx_ts_input_open - Open the touch screen input device.
  @idev:	Input device to be opened.
  Called by the input sub system to open a wm97xx touchscreen device.
  Starts the touchscreen thread and touch digitiser.
 start digitiser 
	 If we either don't have an interrupt for pen down events or
	  failed to acquire it then we need to poll.
  wm97xx_ts_input_close - Close the touch screen input device.
  @idev:	Input device to be closed.
  Called by the input sub system to close a wm97xx touchscreen
  device.  Kills the touchscreen thread and stops the touch
  digitiser.
 Return the interrupt to GPIO usage (disabling it) 
 Balance out interrupt disablesenables 
	 ts_reader rearms itself so we need to explicitly stop it
	  before we destroy the workqueue.
 stop digitiser 
 set up touch configuration 
	
	  register our extended touch device (for machine specific
	  extensions)
 check that we have a supported codec 
 set up physical characteristics 
 load gpio cache 
 Power down the digitiser (bypassing the cache for resume) 
	 WM9713 has an additional power bit - turn it off if there
 restore digitiser and gpios 
  Machine specific operations
 Module information 
 SPDX-License-Identifier: GPL-2.0-or-later
  Allwinner sunxi resistive touchscreen controller driver
  Copyright (C) 2013 - 2014 Hans de Goede <hdegoede@redhat.com>
  The hwmon parts are based on work by Corentin LABBE which is:
  Copyright (C) 2013 Corentin LABBE <clabbe.montjoie@gmail.com>
  The sun4i-ts controller is capable of detecting a second touch, but when a
  second touch is present then the accuracy becomes so bad the reported touch
  location is not useable.
  The original android driver contains some complicated heuristics using the
  aprox. distance between the 2 touches to see if the user is making a pinch
  open  close movement, and then reports emulated multi-touch events around
  the last touch coordinate (as the dual-touch coordinates are worthless).
  These kinds of heuristics are just asking for trouble (and don't belong
  in the kernel). So this driver offers straight forward, reliable single
  touch functionality only.
  s.a. A20 User Manual "1.15 TP" (Documentationarmsunxi.rst)
  (looks like the description in the A20 User Manual v1.3 is better
  than the one in the A10 User Manual v.1.5)
 TP_CTRL0 bits 
 8 bits 
 3 bits 
 4 bits 
 16 bits 
 TP_CTRL1 bits 
 8 bits 
 3 bits 
 on sun6i, bits 3~6 are left shifted by 1 to 4~7 
 TP_CTRL2 bits 
 4 bits 
 2 bits 
 24 bits 
 TP_CTRL3 bits 
 2 bits 
 TP_INT_FIFOC irq and fifo mask  control bits 
 5 bits 
 TP_INT_FIFOS irq and fifo status bits 
 TP_TPR bits 
 t = x  256  16  clkin 
 The 1st location reported after an up event is unreliable 
			
			  The hardware has a separate down status bit, but
			  that gets set before we get the first location,
			  resulting in reporting a click on the old location.
 Flush, set trig level to 1, enable temp, data and up irqs 
 Deactivate all input IRQs 
 No temp_data until the first irq 
 Allwinner SDK has temperature (C) = (value  6) - 271 
		
		  The A10 temperature sensor has quite a wide spread, these
		  parameters are based on the averaging of the calibration
		  results of 4 completely different boards, with a spread of
		  temp_step from 0.096 - 0.170 and temp_offset from 176 - 331.
		
		  The user manuals do not contain the formula for calculating
		  the temperature. The formula used here is from the AXP209,
		  which is designed by X-Powers, an affiliate of Allwinner:
		 
		      temperature (C) = (value  0.1) - 144.7
		 
		  Allwinner does not have any documentation whatsoever for
		  this hardware. Moreover, it is claimed that the sensor
		  is inaccurate and cannot work properly.
	
	  Select HOSC clk, clkin = clk  6, adc samplefreq = clkin  8192,
	  t_acq = clkin  (16  64)
	
	  tp_sensitive_adjust is an optional property
	  tp_mode = 0 : only x and y coordinates, as we don't use dual touch
	
	  Enable median and averaging filter, optional property for
	  filter type.
 Enable temperature measurement, period 1953 (2 seconds) 
	
	  Set stylus up debounce to aprox 10 ms, enable debounce, and
	  finally enable tp mode.
	
	  The thermal core does not register hwmon devices for DT-based
	  thermal zone sensors, such as this one.
 Explicit unregister to avoid openclose changing the imask later 
 Deactivate all IRQs 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  EETI Egalax serial touchscreen driver
  Copyright (c) 2015 Zoltán Böszörményi <zboszor@pr.hu>
  based on the
  Hampshire serial touchscreen driver (Copyright (c) 2010 Adam Bennett)
  Definitions & global arrays.
  Per-touchscreen data.
  egalax_connect() is the routine that is called when someone adds a
  new serio device that supports egalax protocol and registers it as
  an input device. This is usually accomplished using inputattach.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0-or-later
  STMicroelectronics STMPE811 Touchscreen Driver
  (C) 2010 Luotao Fu <l.fu@pengutronix.de>
  All rights reserved.
 Register layouts and functionalities are identical on all stmpexxx variants
  with touchscreen controller
  struct stmpe_touch - stmpe811 touch screen controller state
  @stmpe: pointer back to STMPE MFD container
  @idev: registered input device
  @work: a work item used to scan the device
  @dev: a pointer back to the MFD cell struct device
  @prop: Touchscreen properties
  @ave_ctrl: Sample average control
  (0 -> 1 sample, 1 -> 2 samples, 2 -> 4 samples, 3 -> 8 samples)
  @touch_det_delay: Touch detect interrupt delay
  (0 -> 10 us, 1 -> 50 us, 2 -> 100 us, 3 -> 500 us,
  4-> 1 ms, 5 -> 5 ms, 6 -> 10 ms, 7 -> 50 ms)
  recommended is 3
  @settling: Panel driver settling time
  (0 -> 10 us, 1 -> 100 us, 2 -> 500 us, 3 -> 1 ms,
  4 -> 5 ms, 5 -> 10 ms, 6 for 50 ms, 7 -> 100 ms)
  recommended is 2
  @fraction_z: Length of the fractional part in z
  (fraction_z ([0..7]) = Count of the fractional part)
  recommended is 7
  @i_drive: current limit value of the touchscreen drivers
  (0 -> 20 mA typical 35 mA max, 1 -> 50 mA typical 80 mA max)
	
	  touch_det sometimes get desasserted or just get stuck. This appears
	  to be a silicon bug, We still have to clearify this with the
	  manufacture. As a workaround We release the key anyway if the
	  touch_det keeps coming in after 4ms, while the FIFO contains no value
	  during the whole time.
 reset the FIFO before we report release event 
	
	  Cancel scheduled polling for release if we have new value
	  available. Wait if the polling is already running.
	
	  The FIFO sometimes just crashes and stops generating interrupts. This
	  appears to be a silicon bug. We still have to clearify this with
	  the manufacture. As a workaround we disable the TSC while we are
	  collecting data and flush the FIFO after reading
 flush the FIFO after we have read out our values. 
 reenable the tsc 
 start polling for touch_det to detect release 
 set FIFO to 1 for single point reading 
 SPDX-License-Identifier: GPL-2.0-or-later
  wm9712.c  --  Codec driver for Wolfson WM9712 AC97 Codecs.
  Copyright 2003, 2004, 2005, 2006, 2007 Wolfson Microelectronics PLC.
  Author: Liam Girdwood <lrg@slimlogic.co.uk>
  Parts Copyright : Ian Molton <spyro@f2s.com>
                    Andrew Zabolotny <zap@homelink.ru>
                    Russell King <rmk@arm.linux.org.uk>
  Module parameters
  Set internal pull up for pen detect.
  Pull up is in the range 1.02k (least sensitive) to 64k (most sensitive)
  i.e. pull up resistance = 64k Ohms  rpu.
  Adjust this value if you are having problems with pen detect not
  detecting any down event.
  Set current used for pressure measurement.
  Set pil = 2 to use 400uA
      pil = 1 to use 200uA and
      pil = 0 to disable pressure measurement.
  This is used to increase the range of values returned by the adc
  when measureing touchpanel pressure.
  Set threshold for pressure measurement.
  Pen down pressure below threshold is ignored.
  Set adc sample delay.
  For accurate touchpanel measurements, some settling time may be
  required between the switch matrix applying a voltage across the
  touchpanel plate and the ADC sampling the signal.
  This delay can be set by setting delay = n, where n is the array
  position of the delay in the array delay_table below.
  Long delays > 1ms are supported for completeness, but are not
  recommended.
  Set five_wire = 1 to use a 5 wire touchscreen.
  NOTE: Five wire mode does not allow for readback of pressure.
  Set adc mask function.
  Sources of glitch noise, such as signals driving an LCD display, may feed
  through to the touch screen plates and affect measurement accuracy. In
  order to minimise this, a signal may be applied to the MASK pin to delay or
  synchronise the sampling.
  0 = No delay or sync
  1 = High on pin stops conversions
  2 = Edge triggered, edge on pin delays conversion by delay param (above)
  3 = Edge triggered, edge on pin starts conversion after delay param
  Coordinate Polling Enable.
  Set to 1 to enable coordinate polling. e.g. x,y[,p] is sampled together
  for every poll.
  ADC sample delay times in uS
 1 AC97 Link frames 
 2 
 4 
 8 
 16 
 32 
 48 
 64 
 96 
 128 
 160 
 192 
 224 
 256 
 288 
 No delay, switch matrix always on 
  Delay after issuing a POLL command.
  The delay is 3 AC97 link frames + the touchpanel settling delay
  set up the physical settings of the WM9712
 WM9712 rpu 
 WM9712 five wire 
 touchpanel pressure current
 polling mode sample settling delay 
 mask 
 Set GPIO4 as Mask Pin
 wait - coord mode 
 dummy read 
  Read a sample from the WM9712 adc in polling mode.
 set up digitiser 
 wait 3 AC97 time slots + delay for conversion 
 wait for POLL to go low 
 If PDEN is set, we can get a timeout when pen goes up 
 check we have correct sample 
 Sometimes it reads a wrong value the first time. 
  Read a coord from the WM9712 adc in polling mode.
 set up digitiser 
 wait 3 AC97 time slots + delay for conversion and read x 
 wait for POLL to go low 
 If PDEN is set, we can get a timeout when pen goes up 
 read back y data 
 check we have correct sample 
  Sample the WM9712 touchscreen in polling mode
  Enable WM9712 continuous mode, i.e. touch data is streamed across
  an AC97 slot
 continuous mode 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012-2013 MundoReader S.L.
  Author: Heiko Stuebner <heiko@sntech.de>
  based in parts on Nook zforce driver
  Copyright (C) 2010 Barnes & Noble, Inc.
  Author: Pieter Truter<ptruter@intrinsyc.com>
 Offsets of the different parts of the payload the controller sends 
 Response offsets 
 Commands 
  Responses the controller sends as a result of
  command requests
  Notifications are sent by the touch controller without
  being requested by the driver and include for example
  touch indications
  @client		the i2c_client
  @input		the input device
  @suspending		in the process of going to suspend (don't emit wakeup
 			events for commands executed to suspend the device)
  @suspended		device suspended
  @access_mutex	serialize i2c-access, to keep multipart reads together
  @command_done	completion to wait for the command result
  @command_mutex	serialize commands sent to the ic
  @command_waiting	the id of the command that is currently waiting
 			for a result
  @command_result	returned result of the command
 Firmware version information 
 data size, command only 
 data size, command only 
 start sending touch events 
	
	  Per NN, initial cal. take max. of 200msec.
	  Allow time to complete this calibration
 Deactivates touch sensing and puts the device into sleep. 
 determine touch major, minor and orientation 
 the zforce id starts with "1", so needs to be decreased 
 read 2 byte message header 
 read the message 
	
	  When still suspended, return.
	  Due to the level-interrupt we will get re-triggered later.
 Don't emit wakeup events from commands run by zforce_suspend 
	
	  Run at least once and exit the loop if
	  - the optional interrupt GPIO isn't specified
	    (there is only one packet read per ISR invocation, then)
	  or
	  - the GPIO isn't active any more
	    (packet read until the level GPIO indicates that there is
	     no IRQ any more)
			
			  Always report touch-events received while
			  suspending, when being a wakeup source
			
			  Version Payload Results
			  [2:major] [2:minor] [2:build] [2:rev]
	
	  When configured as a wakeup source device should always wake
	  the system, therefore start device if necessary.
 Need to start device, if not open, to be a wakeup source. 
 need to stop device if it was not open on suspend 
		
		  Deprecated GPIO handling for compatibility
		  with legacy binding.
 INT GPIO 
 RST GPIO 
		
		  according to datasheet add 100us grace time after regular
		  regulator enable delay.
 hereafter the regulator will be disabled by the action 
 For multi touch 
	
	  The zforce pulls the interrupt low when it has data ready.
	  After it is triggered the isr thread runs until all the available
	  packets have been read and the interrupt is high again.
	  Therefore we can trigger the interrupt anytime it is low and do
	  not need to limit it to the interrupt edge.
 let the controller boot 
 need to start device to get version information 
 this gets the firmware version among other information 
 stop device and put it into sleep until it is opened 
 SPDX-License-Identifier: GPL-2.0
  ST1232 Touchscreen Controller Driver
  Copyright (C) 2010 Renesas Solutions Corp.
 	Tony SIM <chinyeow.sim.xt@renesas.com>
  Using code from:
   - android.git.kernel.org: projectskernelcommon.git: synaptics_i2c_rmi.c
 	Copyright (C) 2007 Google, Inc.
 Device Status | Error Code 
 select resolution register 
 st1232 includes a z-axis  touch strength 
 First contact, request 100 us latency. 
 allocate a buffer according to the number of registers to read 
 Wait until device is ready 
 Read resolution from the chip 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for Motorola PCAP2 touchscreen as found in the EZX phone platform.
   Copyright (C) 2006 Harald Welte <laforge@openezx.org>
   Copyright (C) 2009 Daniel Ribeiro <drwyrm@gmail.com>
 msecs 
 pressure reading is unreliable 
 pen has been released 
 pen is touching the screen 
 switch back to pressure read mode 
 start adc conversion 
 SPDX-License-Identifier: GPL-2.0+
  Touch Screen driver for Renesas MIGO-R Platform
  Copyright (c) 2008 Magnus Damm
  Copyright (c) 2007 Ujjwal Pande <ujjwal@kenati.com>,
   Kenati Technologies Pvt Ltd.
	
	  The touch screen controller chip is hooked up to the CPU
	  using I2C and a single interrupt line. The interrupt line
	  is pulled low whenever someone taps the screen. To deassert
	  the interrupt line we need to acknowledge the interrupt by
	  communicating with the controller over the slow i2c bus.
	 
	  Since I2C bus controller may sleep we are using threaded
	  IRQ here.
 Set Index 0 
 Now do Page Read 
X-Y swap
 enable controller 
 disable controller 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2012 Simon Budig, <simon.budig@kernelconcepts.de>
  Daniel Wagener <daniel.wagener@kernelconcepts.de> (M09 firmware support)
  Lothar Waßmann <LW@KARO-electronics.de> (DT support)
  This is a driver for the EDT "Polytouch" family of touch controllers
  based on the FocalTech FT5x06 line of chips.
  Development of this driver has been sponsored by Glyn:
     http:www.glyn.comProductsDisplays
 msec 
 usec 
 tell the controller to send touch data 
 where the actual touch data starts 
 data comes in so called frames 
 length of the crc data 
 M09M12 does not send header or CRC 
 ignore Reserved events 
 M06 sometimes sends bogus coordinates in TOUCH_DOWN 
 The FT5x26 send the y coordinate first 
 m06, m09: range 0-31, m12: range 0-5 
 m06, m09: range 0-31, m12: range 0-16 
 m06, m09, m12: no supported, ev_ft: range 0-80 
 m06, m09, m12: no supported, ev_ft: range 0-80 
 m06: range 20 to 80, m09: range 0 to 30, m12: range 1 to 255... 
 m06: range 3 to 14, m12: (0x64: 100Hz) 
 mode register is 0x3c when in the work mode 
 mode register is 0x01 when in factory mode 
 mode register is 0x01 when in the factory mode 
 mode register is 0x01 when in factory mode 
 column index 
 CONFIG_DEBUGFS 
	 see what we find if we assume it is a M06 
	  if we get less than EDT_NAME_LEN, we don't want
	  to have garbage in there
	 Probe content for something consistent.
	  M06 starts with a response byte, M12 gives the data directly.
	  M09Generic does not provide model number information.
 remove last '$' end marker 
 look for ModelVersion separator 
 remove last '$' end marker 
 look for ModelVersion separator 
		 If it is not an EDT M06M12 touchscreen, then the model
		  detection is a bit hairy. The different ft5x06
		  firmares around don't reliably implement the
		  identification registers. Well, we'll take a shot.
		 
		  The main difference between generic focaltec based
		  touches and EDT M09 is that we know how to retrieve
		  the max coordinates for the latter.
		 This "model identification" is not exact. Unfortunately
		  not all firmwares for the ft5x06 put useful values in
		  the identification registers.
 EDT EP0110M09 
 EDT EP0350M09 
 EDT EP0430M09 
 EDT EP0500M09 
 EDT EP0570M09 
 EDT EP0700M09 
 EDT EP1010ML00 
 Solomon Goldentek Display 
 Evervision Display with FT5xx6 TS 
 this is a guesswork 
 Delay enabling VCC for > 10us (T_ivd) after IOVCC 
	
	  Check which sleep modes we can support. Power-off requieres the
	  reset-pin to ensure correct power-downpower-up behaviour. Start with
	  the EDT_PMODE_POWEROFF test since this is the deepest possible sleep
	  mode.
	
	  Dummy read access. EP0700MLP1 returns bogus data on the first
	  register read access and ignores writes.
 Enter hibernate mode. 
	
	  Power-off according the datasheet. Cut the power may leaf the irq
	  line in an undefined state depending on the host pull resistor
	  settings. Disable the irq to avoid adjusting each host till the
	  device is back in a full functional state.
		
		  We can't check if the regulator is a dummy or a real
		  regulator. So we need to specify the 5ms reset time (T_rst)
		  here instead of the 100us T_rtp time. We also need to wait
		  300ms in case it was a real supply and the power was cutted
		  of. Toggle the reset pin is also a way to exit the hibernate
		  mode.
 Delay enabling VCC for > 10us (T_ivd) after IOVCC 
 Note no edt- prefix for compatibility with the ft6236.c driver 
 sentinel  }
 Note focaltech vendor prefix for compatibility with ft6236.c 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  Driver for AUO in-cell touchscreens
  Copyright (c) 2011 Heiko Stuebner <heiko@sntech.de>
  loosely based on auo_touch.c from Dell Streak vendor-kernel
  Copyright (c) 2008 QUALCOMM Incorporated.
  Copyright (c) 2008 QUALCOMM USA, INC.
  Coordinate calculation:
  X1 = X1_LSB + X1_MSB256
  Y1 = Y1_LSB + Y1_MSB256
  X2 = X2_LSB + X2_MSB256
  Y2 = Y2_LSB + Y2_MSB256
  Power modes:
  active:	scan speed 60Hz
  sleep:	scan speed 10Hz can be auto-activated, wakeup on 1st touch
  deep sleep:	scan speed 1Hz can only be entered or left manually.
 Touchscreen absolute values 
 special handling for touch_indicate interupt mode 
 touch coordinates 
 touch area 
 determine touch major, minor and orientation 
 check for up event in touch touch_ind_mode 
 we want to loop only in touch_ind_mode 
 use first finger as source for singletouch 
				 number of touch points could also be queried
				  via i2c but would require an additional call
 we want to loop only in touch_ind_mode 
  Set the power mode of the device.
  Valid modes are
  - AUO_PIXCIR_POWER_ACTIVE
  - AUO_PIXCIR_POWER_SLEEP - automatically left on first touch
  - AUO_PIXCIR_POWER_DEEP_SLEEP
 always use high for interrupts 
 control the generation of interrupts on the device side 
 disable receiving of interrupts 
	 when configured as wakeup source, device should always wake system
	  therefore start device if necessary
 need to start device if not open, to be wakeup source 
 need to stop device if it was not open on suspend 
 device wakes automatically from SLEEP 
 default to asserting the interrupt when the screen is touched 
 For single touch 
 For multi touch 
 stop device and put it into deep sleep until it is opened 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012-2017 Hideep, Inc.
 count(2) + touch data(100) + key data(6) 
 Touch & key event 
 command list 
 event bit 
 For NVM 
	
	  Data buffer to read packet from the device (contacts and key
	  states). We align it on double-word boundary to keep word-sized
	  fields in contact data and double-word-sized fields in program
	  packet aligned.
 flush invalid Tx load register 
 make it unprotected code 
 compare unmask code 
 erase page 
 write page 
 See if the page needs updating 
 enter program mode 
 get touch event count 
 check i2c bus 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 2000-2001 Vojtech Pavlik
  Gunze AHL-51S touchscreen driver for Linux
  Definitions & global arrays.
  Per-touchscreen data.
  gunze_disconnect() is the opposite of gunze_connect()
  gunze_connect() is the routine that is called when someone adds a
  new serio device that supports Gunze protocol and registers it as
  an input device.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0-only
   Driver for Goodix Touchscreens
   Copyright (c) 2014 Red Hat Inc.
   Copyright (c) 2015 K. Merker <merker@debian.org>
   This code is based on gt9xx.c authored by andrew@goodix.com:
   2010 - 2012 Goodix Technology.
 Our special handling for GPIO accesses through ACPI is x86 specific 
 YB1-X91LF and YB1-X90LF 
  Those tablets have their x coordinate inverted
  goodix_i2c_read - read data from a register of the i2c slave device.
  @client: i2c device.
  @reg: the register to read from.
  @buf: raw write data buffer.
  @len: length of the buffer to write
  goodix_i2c_write - write data to a register of the i2c slave device.
  @client: i2c device.
  @reg: the register to write to.
  @buf: raw data buffer to write.
  @len: length of the buffer to write
	
	  We are going to read 1-byte header,
	  ts->contact_size  max(1, touch_num) bytes of coordinates
	  and 1-byte footer which contains the touch-key code.
	
	  The 'buffer status' bit, which indicates that the data is valid, is
	  not set as soon as the interrupt is raised, but slightly after.
	  This takes around 10 ms to happen, so we poll for 20 ms.
 Poll every 1 - 2 ms 
	
	  The Goodix panel will send spurious interrupts after a
	  'finger up' event, which will always cause a timeout.
  goodix_process_events - Process incoming events
  @ts: our goodix_ts_data pointer
  Called when the IRQ is triggered. Read the current device state, and push
  the input events to the user space.
  goodix_ts_irq_handler - The IRQ handler
  @irq: interrupt number.
  @dev_id: private data pointer.
 Set "config_fresh" bit 
 Set "config_fresh" bit 
  goodix_check_cfg - Checks if config fw is valid
  @ts: goodix_ts_data pointer
  @cfg: firmware config data
  @len: config data length
  goodix_send_cfg - Write fw config to device
  @ts: goodix_ts_data pointer
  @cfg: config firmware to write to device
  @len: config data length
 Let the firmware reconfigure itself, so sleep for 10ms 
		
		  The IRQ pin triggers on a falling edge, so its gets marked
		  as active-low, use output_raw to avoid the value inversion.
 Never reached 
 Never reached 
 T5: 50ms 
  goodix_reset_no_int_sync - Reset device, leaving interrupt line in output mode
  @ts: goodix_ts_data pointer
 begin select I2C slave addr 
 T2: > 10ms 
 HIGH: 0x280x29, LOW: 0xBA0xBB 
 T3: > 100us 
 T4: > 5ms 
 end select I2C slave addr 
  goodix_reset - Reset device during power on
  @ts: goodix_ts_data pointer
  This function gets called in case we fail to get the irq GPIO directly
  because the ACPI tables lack GPIO-name to APCI _CRS index mappings
  (no _DSD UUID daffd814-6eba-4d8c-8a91-bc9bbf4aa301 data).
  In that case we add our own mapping and then goodix_get_gpio_config()
  retries to get the GPIOs based on the added mapping.
 CONFIG_X86 && CONFIG_ACPI 
  goodix_get_gpio_config - Get GPIO config from ACPIDT
  @ts: goodix_ts_data pointer
 Get the interrupt GPIO pin number 
 Get the reset line GPIO pin number 
		
		  We end up here if goodix_add_acpi_gpio_mappings() has
		  called devm_acpi_dev_add_driver_gpios() because the ACPI
		  tables did not contain name to index mappings.
		  Check that we successfully got both GPIOs after we've
		  added our own acpi_gpio_mapping and if we did not get both
		  GPIOs reset irq_pin_access_method to IRQ_PIN_ACCESS_NONE.
  goodix_read_config - Read the embedded configuration of the panel
  @ts: our goodix_ts_data pointer
  Must be called during probe
	
	  On controllers where we need to upload the firmware
	  (controllers without flash) ts->config already has the config
	  at this point and the controller itself does not have it yet!
  goodix_read_version - Read goodix touchscreen version
  @ts: our goodix_ts_data pointer
  goodix_i2c_test - I2C test function to check if the device answers.
  @client: the i2c client
  goodix_configure_dev - Finish device initialization
  @ts: our goodix_ts_data pointer
  Must be called from probe to finish initialization of the device.
  Contains the common initialization code for both devices that
  declare gpio pins and devices that do not. It is either called
  directly from probe or from request_firmware_wait callback.
 Capacitive WindowsHome button on some devices 
 Read configuration and apply touchscreen parameters 
 Try overriding touchscreen parameters via device properties 
  goodix_config_cb - Callback to finish device init
  @cfg: firmware config
  @ctx: our goodix_ts_data pointer
  request_firmware_wait callback that finishes
  initialization of the device.
 send device configuration to the firmware 
 power up the controller 
 reset the controller 
 Retry after a controller reset 
 update device config 
 We need gpio pins to suspendresume 
 Free IRQ as IRQ pin is used as output in the suspend sequence 
 Save reference (calibration) info if necessary 
 Output LOW on the INT pin for 5 ms 
	
	  The datasheet specifies that the interval between sending screen-off
	  command and wake-up should be longer than 58 ms. To avoid waking up
	  sooner, delay 58ms here.
	
	  Exit sleep mode by outputting HIGH level to INT pin
	  for 2ms~5ms.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) ST-Ericsson SA 2010
  Author: Naveen Kumar G <naveen.gaddipati@stericsson.com> for ST-Ericsson
  struct bu21013_ts - touch panel data structure
  @client: pointer to the i2c client
  @in_dev: pointer to the input device structure
  @props: the device coordinate transformation properties
  @regulator: pointer to the Regulator used for touch screen
  @cs_gpiod: chip select GPIO line
  @int_gpiod: touch interrupt GPIO line
  @touch_x_max: maximum X coordinate reported by the device
  @touch_y_max: maximum Y coordinate reported by the device
  @x_flip: indicates that the driver should invert X coordinate before
 	reporting
  @y_flip: indicates that the driver should invert Y coordinate before
 	reporting
  @touch_stopped: touch stop flag
  Touch panel device data structure
 register the device to input subsystem 
 Adjust for the legacy "flip" properties, if present 
 Named "CS" on the chip, DT binding is "reset" 
 Named "INT" on the chip, DT binding is "touch" 
 configure the touch panel controller 
 Make sure IRQ will exit quickly even if there is contact 
 The resources will be freed by devm 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for cypress touch screen controller
  Copyright (c) 2009 Aava Mobile
  Some cleanups by Alan Cox <alan@linux.intel.com>
 Touch coordinates 
 cy8ctmg110 register definitions 
  The touch driver structure.
  cy8ctmg110_power is the routine that is called when touch hardware
  is being powered off or on. When powering on this routine de-asserts
  the RESET line, when powering off reset line is asserted.
 first write slave position to i2c devices 
 Second read data from position 
 Reading coordinates 
 Number of touch 
 Request and assert reset line 
 SPDX-License-Identifier: GPL-2.0-or-later
 -------------------------------------------------------------------------
  Copyright (C) 2014-2015, Intel Corporation
  Derived from:
   gslX68X.c
   Copyright (C) 2010-2015, Shanghai Sileadinc Co.Ltd
  -------------------------------------------------------------------------
			
			  For now only respond to softbutton == 0x01, some
			  tablets without a capacative button send 0x04
			  when crossing the edges of the screen.
		
		  Bits 4-7 are the touch id, note not all models have
		  hardware touch ids so atm we don't use these.
	
	  Some buggy BIOS-es bring up the chip in a stuck state where it
	  blocks the I2C bus. The following steps are necessary to
	  unstuck the chip  bus:
	  1. Turn off the Silead chip.
	  2. Try to do an I2C transfer with the chip, this will fail in
	     response to which the I2C-bus-driver will call:
	     i2c_recover_bus() which will unstuck the I2C-bus. Note the
	     unstuck-ing of the I2C bus only works if we first drop the
	     chip off the bus by turning it off.
	  3. Turn the chip back on.
	 
	  On the x86ACPI systems were this problem is seen, step 1. and
	  3. require making ACPI calls and dealing with ACPI Power
	  Resources. The workaround below runtime-suspends the chip to
	  turn it off, leaving it up to the ACPI subsystem to deal with
	  this.
 The forbid will also resume the device 
 Most devices handle up-to 5 fingers 
 We must have the IRQ provided by DT or ACPI subsystem 
	
	  Enable regulators at probe and disable them at remove, we need
	  to keep the chip powered otherwise it forgets its firmware.
 Power GPIO pin 
 SPDX-License-Identifier: GPL-2.0-only
  cyttsp4_core.c
  Cypress TrueTouch(TM) Standard Product V4 Core driver module.
  For use with Cypress Txx4xx parts.
  Supported parts include:
  TMA4XX
  TMA1036
  Copyright (C) 2012 Cypress Semiconductor
  Contact Cypress Semiconductor at www.cypress.com <ttdrivers@cypress.com>
 Timeout in ms. 
	
	  Mode change issued, handshaking now will cause endless mode change
	  requests, for sync mode modechange will do same with handshake
  Gets number of bits for a touch filed as parameter,
  sets maximum value for field which is used as bit mask
  and returns number of bytes required for that field
 Print sysinfo data offsets 
 convert sysinfo data offset bytes into integers 
 Read the CYDA registers up to MFGID field 
 Check MFGID size 
 Read the CYDA registers for MFGID field 
 Read the rest of the CYDA registers 
 Get the old touch fields 
 button fields 
 Get the extended touch fields 
 provide flow control handshake 
 use 0 based track id's 
 all devices: position and pressure fields 
			
			  TMA400 size and orientation fields:
			  if pressure is non-zero and major touch
			  signal is zero, then set major and minor touch
			  signals to minimum non-zero value
 Get the extended touch fields 
 read xy_data for all current touches 
	
	  Get event data from cyttsp4 device.
	  The event data includes all data
	  for all active touches.
	  Event data also includes button data
	
	  Use 2 reads:
	  1st read to get mode + button bytes + touch count (core)
	  2nd read (optional) to get touch 1 - touch n data
 read touches 
 print xy data 
 check any error conditions 
 extract xy_data for all currently reported touches 
 core handles handshake 
	
	  Check whether this IRQ should be ignored (external)
	  This should be the very first thing to check since
	  ignore_irq may be set for a very short period of time
 Just to debug 
 Signal bootloader heartbeat heard 
 switch to bootloader 
 catch operation->bl glitch 
 Incase startup_state do not let startup_() 
		
		  do not wake thread on this switch since
		  it is possible to get an early heartbeat
		  prior to performing the reset
 Check whether this IRQ should be ignored (internal) 
 Check for wake up interrupt 
 Expecting mode change interrupt 
 compare current core mode to current device mode 
 Unexpected mode change occurred 
 Expecting command complete interrupt 
		
		  It is possible to receive a single interrupt for
		  command complete and touchbutton status report.
		  Continue processing for a possible status report.
 This should be status report, read status regs 
 handshake the event 
	
	  a non-zero udelay period is required for using
	  IRQF_TRIGGER_LOW in order to delay until the
	  device completes isr deassert
	
	  Ensure we wait until the watchdog timer
	  running on a different CPU finishes
  returns error if was not owned
 wait heartbeat 
 reset hardware 
  returns err if refused or timeout; block until mode change complete
  bit is set (mode change interrupt)
 change mode 
 Clear device mode bits and set to new mode 
 wait for mode change done interrupt 
 Already in sleep mode? 
 Wait until currently running IRQ handler exits and disable IRQ 
 Give time to FW to sleep 
 reset hardware and wait for heartbeat 
 exit bl into sysinfo mode 
 Check for invalidcorrupted touch application 
 read sysinfo data 
 restore to sleep if was suspended 
 Don't return fail code, mode is already changed. 
 Wake the waiters for end of startup 
 Already woken? 
 Initiate a read transaction to wake up 
 Try starting up 
 get maximum values from the sysinfo data 
 set event signal capabilities 
 shift track ids down to start at 0 
 Create the input device and register it. 
 get sysinfo 
 Initialize device info 
 Initialize mutexes and spinlocks 
 Initialize wait queue 
 Initialize works 
 Initialize IRQ 
 Call platform init function 
 use level triggered interrupts 
 use edge triggered interrupts 
 Setup watchdog timer 
	
	  call startup directly to ensure that the device
	  is tested before leaving the probe
 Do not fail probe if startup fails but the device is detected 
	
	  Suspend the device before freeing the startup_work and stopping
	  the watchdog since sleep function restarts watchdog on failure
 SPDX-License-Identifier: GPL-2.0-only
  TSC-40 serial touchscreen driver. It should be compatible with
  TSC-10 and 25.
  Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
  Wacom W8001 penabled serial touchscreen driver
  Copyright (c) 2008 Jaya Kumar
  Copyright (c) 2010 Red Hat, Inc.
  Copyright (c) 2010 - 2011 Ping Cheng, Wacom. <pingc@wacom.com>
  This file is subject to the terms and conditions of the GNU General Public
  License. See the file COPYING in the main directory of this archive for
  more details.
  Layout based on Elo serial touchscreen driver by Vojtech Pavlik
 set in first byte of touch data packets 
 length of data packets in bytes, depends on device. 
 control packet 
 resolution in pointsmm 
 touch query reply packet 
  Per-touchscreen data.
 data[5,6] and [11,12] is finger capacity 
 scale to pen maximum 
	 emulate single touch events when stylus is out of proximity.
	  This is to make single touch backward support consistent
	  across all Wacom single touch devices.
 Early days' single-finger touch models need the following defaults 
	
	  We have 1 bit for proximity (rdy) and 3 bits for tip, side,
	  side2eraser. If rdy && f2 are set, this can be either pen + side2,
	  or eraser. Assume:
	  - if dev is already in proximity and f2 is toggled → pen + side2
	  - if dev comes into proximity with f2 set → eraser
	  If f2 disappears after assuming eraser, fake proximity out for
	  eraser and in for pen.
 scale to pen maximum 
 Pen coordinates packet 
 control packet 
 2 finger touch packet 
		
		  ThinkPad X60 Tablet PC (pen only device) sometimes
		  sends invalid data packets that are larger than
		  W8001_PKTLEN_TPCPEN. Let's start over again.
 wait 250ms before querying the device 
 penabled? 
 Touch enabled? 
	
	  Some non-touch devices may reply to the touch query. But their
	  second byte is empty, which indicates touch is not supported.
 if pen is supported scale to pen maximum 
  w8001_disconnect() is the opposite of w8001_connect()
  w8001_connect() is the routine that is called when someone adds a
  new serio device that supports the w8001 protocol and registers it as
  an input device.
	 For backwards-compatibility we compose the basename based on
	  capabilities and then just append the tool type
  Weida HiTech WDT87xx TouchScreen I2C driver
  Copyright (c) 2015  Weida Hi-Tech Co., Ltd.
  HN Chen <hn.chen@weidahitech.com>
  This software is licensed under the terms of the GNU General Public
  License, as published by the Free Software Foundation, and
  may be copied, distributed, and modified under those terms.
 the finger definition of the report event 
 The definition of a report packet 
 The definition of the controller parameters 
 The definition of the device descriptor 
 Communication commands 
 The definition of the command packet 
 The definition of firmware chunk tags 
 Controller requires minimum 300us between commands 
 Mutex for fw update to prevent concurrent access 
 Get feature command packet 
 Set feature command packet 
 Set the command packet 
 Mode selector 
 Wait the device to be ready 
 chunk ID + size 
 Get the scaling factor of pixel to logical coordinate 
	
	  Get the chip_id from the firmware. Make sure that it is the
	  right controller to do the firmware and config update.
 Address and length should be 4 bytes aligned 
 Wait for the controller to finish the write 
 Delay for fw to clear watch dog 
 Wait the operation to complete 
 Refresh the parameters 
 Check if this is an active contact 
 Refuse incorrect coordinates 
 Check if the I2C function is ok in this adaptor 
	
	  The chip may have been reset while system is resuming,
	  give it some time to settle.
 SPDX-License-Identifier: GPL-2.0-only
   Driver for NtrigMicrosoft Touchscreens over SPI
   Copyright (c) 2016 Red Hat Inc.
		
		  When bit 5 of status is 1, it marks the end of the report:
		  - touch present: 0xe7
		  - touch released: 0xe4
		  - nothing valuable: 0xff
 fake proximity out to switch tools 
 let the device settle a little 
  surface3_spi_get_gpio_config - Get GPIO config from ACPIDT
  @data: surface3_spi_ts_data pointer
 Get the reset lines GPIO pin number 
 Microsoft 
 Microsoft 
 Set up SPI
 SPDX-License-Identifier: GPL-2.0
  ILITEK Touch IC driver for 23XX, 25XX and Lego series
  Copyright (C) 2011 ILI Technology Corporation.
  Copyright (C) 2020 Luca Hsu <luca_hsu@ilitek.com>
  Copyright (C) 2021 Joe Hung <joe_hung@ilitek.com>
 common cmds 
 ALWAYS keep at the end 
 ILITEK I2C RW APIs 
 ILITEK ISR APIs 
 APIs of cmds for ILITEK Touch IC 
 common cmds 
 Probe APIs 
 Protocol v3 is not support currently 
 SPDX-License-Identifier: GPL-2.0-only
  Touchright serial touchscreen driver
  Copyright (c) 2006 Rick Koch <n1gp@hotmail.com>
  Based on MicroTouch driver (driversinputtouchscreenmtouch.c)
  Copyright (c) 2004 Vojtech Pavlik
  and Dan Streetman <ddstreet@ieee.org>
  Definitions & global arrays.
  Per-touchscreen data.
  tr_disconnect() is the opposite of tr_connect()
  tr_connect() is the routine that is called when someone adds a
  new serio device that supports the Touchright protocol and registers it as
  an input device.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0
  Driver for EETI eGalax Multiple Touch Controller
  Copyright (C) 2011 Freescale Semiconductor, Inc.
  based on max11801_ts.c
 EETI eGalax serial touch screen controller is a I2C based multiple
 TODO:
  - auto idle mode support
  Mouse Mode: some panel may configure the controller to mouse mode,
  which can only report one point at a given time.
  This driver will ignore events in this mode.
  Vendor Mode: this mode is used to transfer some vendor specific
  messages.
  This driver will ignore events in this mode.
 Multiple Touch Mode 
 ignore mouse events and vendor events 
 wake up controller by an falling edge of interrupt gpio.  
 wake up controller via an falling edge on IRQ gpio. 
 controller should be waken up, return irq.  
 controller may be in sleep, wake it up. 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
 Copyright (C) 2014-2015 Pengutronix, Markus Pargmann <mpa@pengutronix.de>
 Based on driver from 2011:
   Juergen Beisert, Pengutronix <kernel@pengutronix.de>
 This is the driver for the imx25 TCQ (Touchscreen Conversion Queue)
 connected to the imx25 ADC.
 Sentinel  }
 PRECHARGE 
 TOUCH_DETECT 
 X Measurement 
 Y Measurement 
 Enable the touch detection right now 
 Setup the conversion queue 
	
	  We measure XY with 'sample_count' number of samples and execute a
	  touch detection twice, with 1 sample each
 stop the queue from looping 
 for a clean touch detection, preload the X plane 
 waste some time now to pre-load the X plate to high voltage 
 re-enable the detection right now 
 enable the pen down event to be a source for the interrupt 
 lets fire the next IRQ if someone touches the touchscreen 
		
		  only if both touch measures are below a threshold,
		  the position is valid
 valid samples, generate a report 
 get next sample 
			
			  if both samples are invalid,
			  generate a release report
			
			  if only one of both touch measurements are
			  below the threshold, still some bouncing
			  happens. Take additional samples in this
			  case to be sure
	
	  Check how many samples are available. We always have to read exactly
	  sample_count samples from the fifo, or a multiple of sample_count.
	  Otherwise we mixup samples into different touch events.
 configure the state machine for a 4-wire touchscreen 
 Reset 
 up to 128  8 ADC clocks are possible 
 up to 255  8 ADC clocks are possible 
 setup debounce count 
 enable debounce 
 enable the engine on demand 
 Enable repeat and repeat wait 
 Setup defaults 
 These are optional, we don't care about the return values 
 SPDX-License-Identifier: GPL-2.0-or-later
  usbtouchscreen.c
  Driver for USB Touchscreens, supporting those devices:
   - eGalax Touchkit
     includes eTurboTouch CT-410510700
   - 3MMicrotouch  EX II series
   - ITM
   - PanJit TouchSet
   - eTurboTouch
   - Gunze AHL61
   - DMC TSC-1025
   - IRTOUCHSYSTEMSUNITOP
   - IdealTEK URTC1000
   - General Touch
   - GoTop Super_Q2GogoPenPenPower tablets
   - JASTEC USB touch controllerDigiTech DTR-02U
   - Zytronic capacitive touchscreen
   - NEXIOiNexio
   - Elo TouchSystems 2700 IntelliTouch
   - EasyTouch USB DualMulti touch controller from Data Modul
  Copyright (C) 2004-2007 by Daniel Ritz <daniel.ritz@gmx.ch>
  Copyright (C) by Todd E. Johnson (mtouchusb.c)
  Driver is based on touchkitusb.c
  - ITM parts are from itmtouch.c
  - 3M parts are from mtouchusb.c
  - PanJit parts are from an unmerged driver by Lanslott Gish
  - DMC TSC 1025 are from Holger Schurig, with ideas from an unmerged
    driver from Marius Vollmer
#define DEBUG
 device specifc datafunctions 
	
	  Always service the USB devices irq not just when the input device is
	  open. This is useful when devices have a watchdog which prevents us
	  from periodically polling the device. Leave this unset unless your
	  touchscreen device requires it, as it does consume more of the USB
	  bandwidth.
	
	  used to get the packet len. possible return values:
	  > 0: packet len
	  = 0: skip one byte
	  < 0: -return value more bytes needed
 a usbtouch device 
 serialize access to opensuspend 
 device types 
 ignore the HID capable devices, handled by usbhid 
 normal device IDs 
 TC5UH 
 TC4UM 
 data interface only 
  e2i Part
  eGalax part
	
	  An eGalax diagnostic packet kicks the device into using the right
	  protocol.  We send a "check active" packet.  The response will be
	  read later and ignored.
 length 
 command - check active 
  EasyTouch part
  PanJit Part
  3MMicrotouch Part
 Default minmax xy are the raw values, override if using hw-calib 
  ITM Part
	
	  ITM devices report invalid xy data if not touched.
	  if the screen was touched before but is not touched any more
	  report touch as 0 with the last valid xy data once. then stop
	  reporting data until touched again.
  eTurboTouch part
 packets should start with sync 
  Gunze part
  DMC TSC-1025 Part
  Documentation about the controller and it's protocol can be found at
    http:www.dmccoltd.comfilescontrolertsc10usb_pi_e.pdf
    http:www.dmccoltd.comfilescontrolertsc25_usb_e.pdf
 supported data rates. currently using 130 
 commands 
 reset 
 TSC-25 data sheet specifies a delay after the RESET command 
 set coordinate output rate 
 start sending data 
  IRTOUCH Part
  ET&T TC5UHTC4UM part
  IdealTEK URTC1000 Part
 touch data in IdealTEK mode 
 touch data in MT emulation mode 
  General Touch Part
  GoTop Part
  JASTEC Part
  Zytronic Part
 command response 
 down 
 up 
  NEXIO Part
 0xe1 = touch, 0xe1 = release 
 total bytes of touch data 
 bytes for X axis 
 bytes for Y axis 
 find first input and output endpoint 
 two empty reads 
 send init command 
 read replies 
 firmware version 
 device name 
 got touch data? 
 send ACK 
	
	  The device reports state of IR sensors on X and Y axes.
	  Each byte represents "darkness" percentage (0-100) of one element.
	  17" touchscreen reports only 64 x 52 bytes so the resolution is low.
	  This also means that there's a limited multi-touch capability but
	  it's disabled (and untested) here as there's no X driver for that.
 multi-touch 
 single touch 
  ELO part
  the different device descriptors
  Generic Part
 process buffer 
 try to get size 
 drop? 
 need to append -pkt_len bytes before able to get size 
 append 
 loop over the received packet, process 
 get packet len 
 unknown packet: skip one byte 
 full packet: process 
 incomplete packet: save in buffer 
 success 
 this urb is timing out 
 this urb is terminated, clean up 
 reinit the device 
 restart IO if needed 
 some devices are ignored 
		
		  When dealing with variable-length packets we should
		  not request more than wMaxPacketSize bytes at once
		  as we do not know if there is more data coming or
		  we filled exactly wMaxPacketSize bytes and there is
		  nothing else.
 device specific allocations 
 device specific initialisation
 this can't fail 
 this will stop IO via close 
 SPDX-License-Identifier: GPL-2.0-only
  Microchip AR1020 and AR1021 driver for I2C
  Author: Christian Gmeiner <christian.gmeiner@gmail.com>
 sync bit set ? 
 number of bytes after this 
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxdriversinputkeyboardomap-keypad.c
  OMAP Keypad Driver
  Copyright (C) 2003 Nokia Corporation
  Written by Timo Teräs <ext-timo.teras@nokia.com>
  Added support for H2 & H3 Keypad
  Copyright (C) 2004 Texas Instruments
 disable keyboard interrupt and schedule for handling 
 disable keyboard interrupt and schedule for handling 
 read the keypad status 
 check for any changes 
 check for changes and print those 
		 some key is pressed - keep irq disabled and use timer
 enable interrupts 
 Disable the interrupt for the MPUIO keyboard 
 get the irq and init timer
 setup input device 
 scan current status and enable interrupt 
 disable keypad interrupt handling 
 unregister everything 
 SPDX-License-Identifier: GPL-2.0-only
  SuperH KEYSC Keypad Driver
  Copyright (C) 2008 Magnus Damm
  Based on gpio_keys.c, Copyright 2005 Phil Blundell
 drive one KEYOUT pin low, read KEYIN pins 
 set bit if key press has been detected 
 keep track of which KEYIN bits that have been set 
 SPDX-License-Identifier: GPL-2.0-or-later
  Stowaway keyboard driver for Linux
   Copyright (c) 2006 Marek Vasut
   Based on Newton keyboard driver for Linux
   by Justin Cormack
 SPDX-License-Identifier: GPL-2.0-or-later
  Allwinner sun4i low res adc attached tablet keys driver
  Copyright (C) 2014 Hans de Goede <hdegoede@redhat.com>
  Allwinnner sunxi SoCs have a lradc which is specifically designed to have
  various (tablet) keys (ie home, back, search, etc). attached to it using
  a resistor network. This driver is for the keys on such boards.
  There are 2 channels, currently this driver only supports channel 0 since
  there are no boards known to use channel 1.
 LRADC_CTRL bits 
 8 bits 
 2 bits 
 4 bits 
 2 bits 
 4 bits 
 2 bits 
 2 bits 
 LRADC_INTC and LRADC_INTS bits 
 struct lradc_variant - Describe sun4i-a10-lradc-keys hardware variant
  @divisor_numerator:		The numerator of lradc Vref internally divisor
  @divisor_denominator:	The denominator of lradc Vref internally divisor
	
	  lradc supports only one keypress at a time, release does not give
	  any info as to which key was released, so we cache the keycode.
	
	  Set sample time to 4 ms  250 Hz. Wait 2  4 ms for key to
	  stabilize on press, wait (1 + 1)  4 ms for key release
 Disable lradc, leave other settings unchanged 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  Cypress StreetFighter Touchkey Driver
  Copyright (c) 2021 Yassine Oudjana <y.oudjana@protonmail.com>
 Default key count 
 Default keycodes 
 SPDX-License-Identifier: GPL-2.0
  MacBook (Pro) SPI keyboard and touchpad driver
  Copyright (c) 2015-2018 Federico Lorenzi
  Copyright (c) 2017-2018 Ronald Tschalär
  The keyboard and touchpad controller on the MacBookAir6, MacBookPro12,
  MacBook8 and newer can be driven either by USB or SPI. However the USB
  pins are only connected on the MacBookAir6 and 7 and the MacBookPro12.
  All others need this driver. The interface is selected using ACPI methods:
   UIEN ("USB Interface Enable"): If invoked with argument 1, disables SPI
    and enables USB. If invoked with argument 0, disables USB.
   UIST ("USB Interface Status"): Returns 1 if USB is enabled, 0 otherwise.
   SIEN ("SPI Interface Enable"): If invoked with argument 1, disables USB
    and enables SPI. If invoked with argument 0, disables SPI.
   SIST ("SPI Interface Status"): Returns 1 if SPI is enabled, 0 otherwise.
   ISOL: Resets the four GPIO pins used for SPI. Intended to be invoked with
    argument 1, then once more with argument 0.
  UIEN and UIST are only provided on models where the USB pins are connected.
  SPI-based Protocol
  ------------------
  The device and driver exchange messages (struct message); each message is
  encapsulated in one or more packets (struct spi_packet). There are two types
  of exchanges: reads, and writes. A read is signaled by a GPE, upon which one
  message can be read from the device. A write exchange consists of writing a
  command message, immediately reading a short status packet, and then, upon
  receiving a GPE, reading the response message. Write exchanges cannot be
  interleaved, i.e. a new write exchange must not be started till the previous
  write exchange is complete. Whether a received message is part of a read or
  write exchange is indicated in the encapsulating packet's flags field.
  A single message may be too large to fit in a single packet (which has a
  fixed, 256-byte size). In that case it will be split over multiple,
  consecutive packets.
 from experimentation, in µs 
  struct keyboard_protocol - keyboard message.
  message.type = 0x0110, message.length = 0x000a
  @unknown1:		unknown
  @modifiers:		bit-set of modifiercontrol keys pressed
  @unknown2:		unknown
  @keys_pressed:	the (non-modifier) keys currently pressed
  @fn_pressed:		whether the fn key is currently pressed
  @crc16:		crc over the whole message struct (message header +
 			this struct) minus this @crc16 field
  struct tp_finger - single trackpad finger structure, le16-aligned
  @origin:		zero when switching track finger
  @abs_x:		absolute x coordinate
  @abs_y:		absolute y coordinate
  @rel_x:		relative x coordinate
  @rel_y:		relative y coordinate
  @tool_major:		tool area, major axis
  @tool_minor:		tool area, minor axis
  @orientation:	16384 when point, else 15 bit angle
  @touch_major:	touch area, major axis
  @touch_minor:	touch area, minor axis
  @unused:		zeros
  @pressure:		pressure on forcetouch touchpad
  @multi:		one finger: varies, more fingers: constant
  @crc16:		on last finger: crc over the whole message struct
 			(i.e. message header + this struct) minus the last
 			@crc16 field; unknown on all other fingers.
  struct touchpad_protocol - touchpad message.
  message.type = 0x0210
  @unknown1:		unknown
  @clicked:		1 if a button-click was detected, 0 otherwise
  @unknown2:		unknown
  @number_of_fingers:	the number of fingers being reported in @fingers
  @clicked2:		same as @clicked
  @unknown3:		unknown
  @fingers:		the data for each finger
  struct command_protocol_tp_info - get touchpad info.
  message.type = 0x1020, message.length = 0x0000
  @crc16:		crc over the whole message struct (message header +
 			this struct) minus this @crc16 field
  struct touchpad_info - touchpad info response.
  message.type = 0x1020, message.length = 0x006e
  @unknown1:		unknown
  @model_flags:	flags (vary by model number, but significance otherwise
 			unknown)
  @model_no:		the touchpad model number
  @unknown2:		unknown
  @crc16:		crc over the whole message struct (message header +
 			this struct) minus this @crc16 field
  struct command_protocol_mt_init - initialize multitouch.
  message.type = 0x0252, message.length = 0x0002
  @cmd:		value: 0x0102
  @crc16:		crc over the whole message struct (message header +
 			this struct) minus this @crc16 field
  struct command_protocol_capsl - toggle caps-lock led
  message.type = 0x0151, message.length = 0x0002
  @unknown:		value: 0x01 (length?)
  @led:		0 off, 2 on
  @crc16:		crc over the whole message struct (message header +
 			this struct) minus this @crc16 field
  struct command_protocol_bl - set keyboard backlight brightness
  message.type = 0xB051, message.length = 0x0006
  @const1:		value: 0x01B0
  @level:		the brightness level to set
  @const2:		value: 0x0001 (backlight off), 0x01F4 (backlight on)
  @crc16:		crc over the whole message struct (message header +
 			this struct) minus this @crc16 field
  struct message - a complete spi message.
  Each message begins with fixed header, followed by a message-type specific
  payload, and ends with a 16-bit crc. Because of the varying lengths of the
  payload, the crc is defined at the end of each payload struct, rather than
  in this struct.
  @type:	the message type
  @zero:	always 0
  @counter:	incremented on each message, rolls over after 255; there is a
 		separate counter for each message type.
  @rsp_buf_len:response buffer length (the exact nature of this field is quite
 		speculative). On a requestwrite this is often the same as
 		@length, though in some cases it has been seen to be much larger
 		(e.g. 0x400); on a responseread this the same as on the
 		request; for reads that are not responses it is 0.
  @length:	length of the remainder of the data in the whole message
 		structure (after re-assembly in case of being split over
 		multiple spi-packets), minus the trailing crc. The total size
 		of the message struct is therefore @length + 10.
  @keyboard:		Keyboard message
  @touchpad:		Touchpad message
  @tp_info:		Touchpad info (response)
  @tp_info_command:	Touchpad info (CRC)
  @init_mt_command:	Initialise Multitouch
  @capsl_command:	Toggle caps-lock LED
  @bl_command:		Keyboard brightness
  @data:		Buffer data
 type + zero + counter + rsp_buf_len + length 
  struct spi_packet - a complete spi packet; always 256 bytes. This carries
  the (parts of the) message in the data. But note that this does not
  necessarily contain a complete message, as in some cases (e.g. many
  fingers pressed) the message is split over multiple packets (see the
  @offset, @remaining, and @length fields). In general the data parts in
  spi_packet's are concatenated until @remaining is 0, and the result is an
  message.
  @flags:	0x40 = write (to device), 0x20 = read (from device); note that
 		the response to a write still has 0x40.
  @device:	1 = keyboard, 2 = touchpad
  @offset:	specifies the offset of this packet's data in the complete
 		message; i.e. > 0 indicates this is a continuation packet (in
 		the second packet for a message split over multiple packets
 		this would then be the same as the @length in the first packet)
  @remaining:	number of message bytes remaining in subsequents packets (in
 		the first packet of a message split over two packets this would
 		then be the same as the @length in the second packet)
  @length:	length of the valid data in the @data in this packet
  @data:	all or part of a message
  @crc16:	crc over this whole structure minus this @crc16 field. This
 		covers just this packet, even on multi-packet messages (in
 		contrast to the crc in the message).
 cs-to-clk delay in us 
 active-to-receive delay? 
 ? (cur val: 10) 
 this mimics struct drm_rect 
 lock to protect the above parameters and flags below 
  This must have exactly as many entries as there are bits in
  struct keyboard_protocol.modifiers .
 MB8 MB9 MB10 
 MBP13,1 MBP13,2 MBP14,1 MBP14,2 
 MBP13,3 MBP14,3 
	
	  All we need here is a delay at the beginning of the message before
	  asserting cs. But the current spi API doesn't support this, so we
	  end up with an extra unnecessary (but harmless) cs assertion and
	  deassertion.
 check if SPI is already enabled, so we can skip the delay below 
 SIEN(1) will enable SPI communication 
	
	  Allow the SPI interface to come up before returning. Without this
	  delay, the SPI commands to enable multitouch mode may not reach
	  the trackpad controller, causing pointer movement to break upon
	  resume from sleep.
		
		  If we got an error, we presumably won't get the expected
		  response message either.
 check if draining 
 check whether send is in progress 
 set up packet 
 are we processing init commands? 
 build init command 
 build init command 
 do we need caps-lock command? 
 build led command 
 do we need backlight command? 
 build command buffer 
 everything's up-to-date 
 finalize packet 
 send command 
		
		  The backlight does not turn on till level 32, so we scale
		  the range here so that from a user's perspective it turns
		  on at 1.
 lifted from the BCM5974 driver and renamed from raw2int 
 convert 16-bit little endian to signed integer 
 touchpad_input_dev is set async in worker 
 touchpad isn't initialized yet 
 check for rollover overflow, which is signalled by all keys == 1 
 remap fn key if desired 
 check released keys 
 key is still pressed 
 check pressed keys 
 check control keys 
 check function key 
 done 
 set up touchpad dimensions 
 create touchpad input device 
 basic properties 
 finger touch area 
 finger approach area 
 finger orientation 
 finger position 
 touchpad button 
 multitouch 
 register input device 
 touchpad_input_dev is read async in spi callback 
		
		  We're not allowed to sleep here, but registering an input
		  device can sleep.
 process packet header 
 handle multi-packet messages 
 got complete message - verify 
 handle message 
		
		  We don't actually know if this was a pure read, or a response
		  to a write. But this is a rare error condition that should
		  never occur, so clearing both flags to avoid deadlock.
 Save keyboard backlight level 
 check if the USB interface is present and enabled already 
 let the USB driver take over instead 
 allocate driver data 
 store the driver data 
 create our buffers 
 set up our spi messages 
 cache ACPI method handles 
 switch on the SPI interface 
 setup the keyboard input dev 
	
	  The applespi device doesn't send interrupts normally (as is described
	  in its DSDT), but rather seems to use ACPI GPEs.
 trigger touchpad setup 
	
	  By default this device is not enabled for wakeup; but USB keyboards
	  generally are, so the expectation is that by default the keyboard
	  will wake the system.
 set up keyboard-backlight 
 set up debugfs entries for touchpad dimensions logging 
 turn off caps-lock - it'll stay on otherwise 
 disable the interrupt 
 ensure our flags and state reflect a newly resumed device 
 switch on the SPI interface 
 re-enable the interrupt 
 switch the touchpad into multitouch mode 
 SPDX-License-Identifier: GPL-2.0+
 Driver for the IMX SNVS ONOFF Power Key
 Copyright (C) 2015 Freescale Semiconductor, Inc. All Rights Reserved.
 LP Status Register 
 LP Control Register 
 1:pressed 
 only report new event if status changed 
 repeat check if pressed long 
			
			  The first generation i.MX6 SoCs only sends an
			  interrupt on button release. To mimic power-key
			  usage, we'll prepend a press event.
 clear SPO status 
 Get SNVS register Page 
 clear the unexpected interrupt before driver ready 
 input customer action to cancel release timer 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
  OMAP4 Keypad Driver
  Copyright (C) 2010 Texas Instruments
  Author: Abraham Arce <x0066660@ti.com>
  Initial Code: Syed Rafiuddin <rafiuddin.syed@ti.com>
 OMAP4 registers 
 OMAP4 bit definitions 
 OMAP4 values 
  Errata i689: If a key is released for a time shorter than debounce time,
  the keyboard will idle and never detect the key release. The workaround
  is to use at least a 12ms debounce time. See omap5432 TRM chapter
  "26.4.6.2 Keyboard Controller Timer" for more information.
 Approximate measured time 
 for key scan 
	
	  Report key up events separately and first. This matters in case we
	  lost key-up interrupt and just now catching up.
 Report key down events 
 Interrupt handlers 
 clear pending interrupts 
 clear pending interrupts 
 Disable interrupts and wake-up events 
 clear pending interrupts 
  Errata ID i689 "1.32 Keyboard Key Up Event Can Be Missed".
  Interrupt may not happen for key-up events. We must clear stuck
  key-up events after the keyboard hardware has auto-idled.
	
	  Enable clocks for the keypad module so that we can read
	  revision register.
 Ensure device does not raise interrupts 
 input device allocation 
 SPDX-License-Identifier: GPL-2.0-only
  driversinputkeyboardjornada720_kbd.c
  HP Jornada 720 keyboard platform driver
  Copyright (C) 20062007 Kristoffer Ericson <Kristoffer.Ericson@Gmail.com>
     Copyright (C) 2006 jornada 720 kbd driver by
		Filip Zyzniewsk <Filip.Zyzniewski@tefnet.plX
      based on (C) 2004 jornada 720 kbd driver by
		Alex Lange <chicken@handhelds.org>
 ROW 
 #1  
  -> 
 #2  
  -> 
 #3  
  -> 
 #4  
  -> 
 #5  
  -> 
 #6  
  -> 
  -> 
  -> 
  -> 
 startup ssp with spinlock 
 How many keycodes are waiting for us? 
 Lets drag them out one at a time 
 Exchange TxDummy for location (keymap[kbddata]) 
 release spinlock and turn off ssp 
 work with hotplug and coldplug 
 SPDX-License-Identifier: GPL-2.0-or-later
   atakbd.c
   Copyright (c) 2005 Michael Schmitz
  Based on amikbd.c, which is
   Copyright (c) 2000-2001 Vojtech Pavlik
   Based on the work of:
 	Hamish Macdonald
  Atari keyboard driver for Linuxm68k
  The low level init and interrupt stuff is handled in archmm68katariatakeyb.c
  (the keyboard ACIA also handles the mouse and joystick data, and the keyboard
  interrupt is shared with the MIDI ACIA so MIDI data also get handled there).
  This driver only deals with handing key events off to the input layer.
 0x47: KP_7     71
 0x48: KP_8     72
 0x49: KP_9     73
 0x62: KP_     98
 0x4b: KP_4     75
 0x4c: KP_5     76
 0x4d: KP_6     77
 0x37: KP_     55
 0x4f: KP_1     79
 0x50: KP_2     80
 0x51: KP_3     81
 0x4a: KP_-     74
 0x52: KP_0     82
 0x53: KP_.     83
 0x4e: KP_+     78
 0x67: Up       103
 0x6c: Down     108
 0x69: Left     105
 0x6a: Right    106
 American layout 
 scancodes < 0xf3 are keys 
 report raw events here?
 scancodes >= 0xf3 are mouse data, most likely 
 need to init core driver if not already done so
 error check 
 SPDX-License-Identifier: GPL-2.0-or-later
  DaVinci Key Scan Driver for TI platforms
  Copyright (C) 2009 Texas Instruments, Inc
  Author: Miguel Aguilar <miguel.aguilar@ridgerun.com>
  Initial Code: Sandeep Paulraj <s-paulraj@ti.com>
 Key scan registers 
 Key Control Register (KEYCTRL) 
 Masks for the interrupts 
 Initializing the kp Module 
 Enable all interrupts 
 Clear interrupts if any 
 Setup the scan period = strobe + interval 
 Define matrix type 
 Enable key scan module and set matrix type 
 Disable interrupt 
 Reading previous and new status of the key scan 
		
		  It goes through all bits in 'changed' to ensure
		  that no key changes are being missed
 Clearing interrupt 
 Enable interrupts 
 Enable auto repeat feature of Linux input subsystem 
 Setup input device 
 Setup the platform data 
 SPDX-License-Identifier: GPL-2.0-or-later
  Keypad driver for Analog Devices ADP5520 MFD PMICs
  Copyright 2009 Analog Devices Inc.
 Read twice to clear 
 Read twice to clear 
 setup input device 
 SPDX-License-Identifier: GPL-2.0
 ChromeOS EC keyboard driver
 Copyright (C) 2012 Google, Inc.
 This driver uses the ChromeOS EC byte-level message-based protocol for
 communicating the keyboard state (which keys are pressed) from a keyboard EC
 to the AP over some bus (such as i2c, lpc, spi).  The EC does debouncing,
 but everything else (including deghosting) is done here.  The main
 motivation for this is to keep the EC firmware as simple as possible, since
 it cannot be easily upgraded and EC flashIRAM space is relatively
 expensive.
  struct cros_ec_keyb - Structure representing EC keyboard device
  @rows: Number of rows in the keypad
  @cols: Number of columns in the keypad
  @row_shift: log2 or number of rows, rounded up
  @keymap_data: Matrix keymap data used to convert to keyscan values
  @ghost_filter: true to enable the matrix key-ghosting filter
  @valid_keys: bitmap of existing keys for each matrix column
  @old_kb_state: bitmap of keys pressed last scan
  @dev: Device pointer
  @ec: Top level ChromeOS device to use to talk to EC
  @idev: The input device for the matrix keys.
  @bs_idev: The input device for non-matrix buttons and switches (or NULL).
  @notifier: interrupt event notifier for transport devices
  @function_row_physmap: An array of the encoded rowscolumns for the top
                         row function keys, in an order from left to right
  @num_function_row_keys: The number of top row keys in a custom keyboard
  struct cros_ec_bs_map - Mapping between Linux keycodes and EC buttonswitch
 	bitmap #defines
  @ev_type: The type of the input event to generate (e.g., EV_KEY).
  @code: A linux keycode
  @bit: A #define like EC_MKBP_POWER_BUTTON or EC_MKBP_LID_OPEN
  @inverted: If the #define and EV_SW have opposite meanings, this is true.
             Only applicable to switches.
 cros_ec_keyb_bs - Map EC buttonswitch #defines into kernel ones 
 Buttons 
 Switches 
  Returns true when there is at least one combination of pressed keys that
  results in ghosting.
	
	  Ghosting happens if for any pressed key X there are other keys
	  pressed both in the same row and column of X as, for instance,
	  in the following diagram:
	 
	  . . Y . g .
	  . . . . . .
	  . . . . . .
	  . . X . Z .
	 
	  In this case only X, Y, and Z are pressed, but g appears to be
	  pressed too (see Wikipedia).
  Compares the new keyboard state to the old one and produces key
  pressrelease events accordingly.  The keyboard state is 13 bytes (one byte
  per column)
		
		  Simple-minded solution: ignore this state. The obvious
		  improvement is to only ignore changes to keys involved in
		  the ghosting, but process the other changes.
  cros_ec_keyb_report_bs - Report non-matrixed buttons or switches
  This takes a bitmap of buttons or switches from the EC and reports events,
  syncing at the end.
  @ckdev: The keyboard device.
  @ev_type: The input event type (e.g., EV_KEY).
  @mask: A bitmap of buttons from the EC.
	
	  If not wake enabled, discard key state changes during
	  suspend. Switches will be re-checked in
	  cros_ec_keyb_resume() to be sure nothing is lost.
  Walks keycodes flipping bit in buffer COLUMNS deep where bit is ROW.  Used by
  ghosting logic to ignore NULL or virtual keys.
  cros_ec_keyb_info - Wrap the EC command EC_CMD_MKBP_INFO
  This wraps the EC_CMD_MKBP_INFO, abstracting out all of the marshalling and
  unmarshalling and different version nonsense into something simple.
  @ec_dev: The EC device
  @info_type: Either EC_MKBP_INFO_SUPPORTED or EC_MKBP_INFO_CURRENT.
  @event_type: Either EC_MKBP_EVENT_BUTTON or EC_MKBP_EVENT_SWITCH.  Actually
               in some cases this could be EC_MKBP_EVENT_KEY_MATRIX or
               EC_MKBP_EVENT_HOST_EVENT too but we don't use in this driver.
  @result: Where we'll store the result; a union
  @result_size: The size of the result.  Expected to be the size of one of
                the elements in the union.
  Returns 0 if no error or -error upon error.
 With older ECs we just return 0 for everything 
  cros_ec_keyb_query_switches - Query the state of switches and report
  This will ask the EC about the current state of switches and report to the
  kernel.  Note that we don't query for buttons because they are more
  transitory and we'll get an update on the next release  press.
  @ckdev: The keyboard device
  Returns 0 if no error or -error upon error.
  cros_ec_keyb_resume - Resume the keyboard
  We use the resume notification as a chance to query the EC for switches.
  @dev: The keyboard device
  Returns 0 if no error or -error upon error.
  cros_ec_keyb_register_bs - Register non-matrix buttonsswitches
  Handles all the bits of the keyboard driver related to non-matrix buttons
  and switches, including asking the EC about which are present and telling
  the kernel to expect them.
  If this device has no support for buttons and switches we'll return no error
  but the ckdev->bs_idev will remain NULL when this function exits.
  @ckdev: The keyboard device
  Returns 0 if no error or -error upon error.
	
	  We call the non-matrix buttonsswitches 'input1', if present.
	  Allocate phys before input dev, to ensure correct tear-down
	  ordering.
  cros_ec_keyb_register_bs - Register matrix keys
  Handles all the bits of the keyboard driver related to matrix keys.
  @ckdev: The keyboard device
  Returns 0 if no error or -error upon error.
	
	  We call the keyboard matrix 'input0'. Allocate phys before input
	  dev, to ensure correct tear-down ordering.
 SPDX-License-Identifier: GPL-2.0-only
  Driver for keys on TCA6416 I2C IO expander
  Copyright (C) 2010 Texas Instruments
  Author : Sriramakrishnan.A.G. <srk@ti.com>
 Figure out which lines have changed 
  This is threaded IRQ handler and this can (and will) sleep.
 Get initial device state in case it has switches 
 ensure that keypad pins are set to input 
 Check functionality 
 Enable auto repeat feature of Linux input subsystem 
	
	  Initialize cached registers from their original values.
	  we can't share this chip with another i2c master.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2017 MediaTek, Inc.
  Author: Chen Zhong <chen.zhong@mediatek.com>
 sentinel 
 SPDX-License-Identifier: GPL-2.0-only
  max7359_keypad.c - MAX7359 Key Switch Controller Driver
  Copyright (C) 2009 Samsung Electronics
  Kim Kyuwon <q1.kim@samsung.com>
  Based on pxa27x_keypad.c
  Datasheet: http:www.maxim-ic.comquick_view2.cfmqv_pk5456
  MAX7359 registers
  Configuration register bits
  Autosleep register values (ms)
 matrix key code map 
 runs in an IRQ thread -- can (and will!) sleep 
  Let MAX7359 fall into a deep sleep:
  If no keys are pressed, enter sleep mode for 8192 ms. And if any
  key is pressed, the MAX7359 returns to normal operating mode.
  Let MAX7359 take a catnap:
  Autosleep just for 256 ms.
 Key release enable 
 Key press wakeup enable 
 Full key-scan functionality 
 nINT asserts every debounce cycles 
 Detect MAX7359: The initial Keys FIFO value is '0x3F' 
 Register the input device 
 Initialize MAX7359 
 Restore the default setting 
 SPDX-License-Identifier: GPL-2.0-only
  AT and PS2 keyboard driver
  Copyright (c) 1999-2002 Vojtech Pavlik
  This driver can handle standard AT keyboards and PS2 keyboards in
  Translated and Raw Set 2 and Set 3, as well as AT keyboards on dumb
  input-only controllers and AT keyboards connected over a one way RS232
  converter.
  Scancode to keycode tables. These are just the default setting, and
  are loadable via a userland utility.
 XXX: need a more general approach 
 include the keyboard scancodes 
 Reset to defaults and disable 
 Reset to defaults 
 Set all keys to give break codes 
 ... and repeat 
  The atkbd control structure
 Written only during init 
 Accessed only from interrupt 
 Serializes reconnect(), attr->set() and event work 
  System-specific keymap fixup routine
  Certain keyboards to not like ATKBD_CMD_RESET_DIS and stop responding
  to many commands until full reset (ATKBD_CMD_RESET_BAT) is performed.
  Checks if we should mangle the scancode to extract 'release' bit
  in translated mode.
  Calculates new value of xl_bit so the driver can distinguish
  between makebreak pair of scancodes for select keys and PS2
  protocol responses.
  Encode the scancode, 0xe0 prefix, and high bit into a single integer,
  keeping kernel 2.4 compatibility for set 2
  atkbd_interrupt(). Here takes place processing of data received from
  the keyboard into events.
 Workaround Toshiba laptop multiple keypress 
  atkbd_event_work() is used to complete processing of events that
  can not be processed by input_event() which is often called from
  interrupt context.
		
		  Serio ports are resumed asynchronously so while driver core
		  thinks that device is already fully operational in reality
		  it may not be ready yet. In this case we need to keep
		  rescheduling till reconnect completes.
  Schedule switch for execution. We need to throttle requests,
  otherwise keyboard may become unresponsive.
  Event callback from the input module. Events that change the state of
  the hardware are processed here. If action can not be performed in
  interrupt context it is offloaded to atkbd_event_work.
  atkbd_enable() signals that interrupt handler is allowed to
  generate input events.
  atkbd_disable() tells input handler that all incoming data except
  for ACKs and command response should be dropped.
  Enable the keyboard to receive keystrokes.
  atkbd_deactivate() resets and disables the keyboard from sending
  keystrokes.
  atkbd_probe() probes for an AT keyboard on a serio port.
  Some systems, where the bit-twiddling when testing the io-lines of the
  controller may confuse the keyboard need a full reset of the keyboard. On
  these systems the BIOS also usually doesn't do it for us.
  Then we check the keyboard ID. We should get 0xab83 under normal conditions.
  Some keyboards report different values, but the first byte is always 0xab or
  0xac. Some old AT keyboards don't report anything. If a mouse is connected, this
  should make sure we don't try to set the LEDs on it.
 initialize with invalid values 
  If the get ID command failed, we check if we can at least set the LEDs on
  the keyboard. This should work on every keyboard out there. It also turns
  the LEDs off, which we want anyway.
  Make sure nothing is coming from the keyboard and disturbs our
  internal state.
  atkbd_select_set checks if a keyboard has a working Set 3 support, and
  sets it into that. Unfortunately there are keyboards that can be switched
  to Set 3, but don't work well in that (BTC Multimedia ...)
  For known special keyboards we can go ahead and set the correct set.
  We check for NCD PS2 Sun, NorthGate OmniKey 101 and
  IBM RapidAccess  IBM EzButton  Chicony KBP-8993 keyboards.
  Set the LEDs to a predefined state (all off).
  Set autorepeat to fastest possible.
  atkbd_cleanup() restores the keyboard state so that BIOS is happy after a
  reboot.
  atkbd_disconnect() closes and frees.
	
	  Make sure we don't have a command in flight.
	  Note that since atkbd->enabled is false event work will keep
	  rescheduling itself until it gets canceled and will not try
	  accessing freed input device or serio port.
  generate release events for the keycodes given in data
  Most special keys (Fn+F?) on Dell laptops do not generate release
  events so we have to do it ourselves.
  Perform fixup for HP system that doesn't generate release
  for its video switch
  Samsung NC10,NC20 with Fn+F? key release not working
  Amilo Pi 3525 key release for Fn+Volume keys not working
  Amilo Xi 3650 key release for light touch bar not working
  Soltech TA12 system with broken key release on volume keys and mute key
  Many notebooks don't send key release event for volume updown
  keys, with key list below common among them
  OQO 01+ multimedia keys (64--66) generate e0 6x upon release whereas
  they should be generating e4-e6 (0x80 | code).
 Parse "linux,keymap" property 
  atkbd_set_keycode_table() initializes keyboard's keycode table
  according to the selected scancode set
  HANGEUL and HANJA keys do not send release events so we need to
  generate such events ourselves
  Perform additional fixups
  atkbd_set_device_attrs() sets up keyboard's input device structure
 Parse "function-row-physmap" property 
  atkbd_connect() is called when the serio module finds an interface
  that isn't handled yet by an appropriate device driver. We check if
  there is an AT keyboard out there and if yes, we register ourselves
  to the input module.
  atkbd_reconnect() tries to restore keyboard into a sane state and is
  most likely called on resume.
		
		  Restore LED state and repeat rate. While input core
		  will do this for us at resume time reconnect may happen
		  because user requested it via sysfs or simply because
		  keyboard was unplugged and plugged in again so we need
		  to do it ourselves here.
	
	  Reset our state machine in case reconnect happened in the middle
	  of multi-byte scancode.
		
		  Since device's properties will change we need to
		  unregister old device. But allocate and register
		  new one first to make sure we have it.
 64 bytes on stack should be acceptable 
  NOTE: do not add any more "force release" quirks to this table.  The
  task of adjusting list of keys that should be "released" automatically
  by the driver is now delegated to userspace tools, such as udev, so
  submit such quirks there.
 Portable 
 Portable 
 Inventec Symphony 
 Samsung NC10 
 Samsung NC20 
 Samsung SQ45S70S 
 Fujitsu Amilo PA 1510 
 Fujitsu Amilo Pi 3525 
 Fujitsu Amilo Xi 3650 
 OQO Model 01+ 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2009-2011, Code Aurora Forum. All rights reserved.
 in nanoseconds 
 bits of these registers represent
  '0' for key press
  '1' for key release
  struct pmic8xxx_kp - internal keypad data structure
  @num_cols: number of columns of keypad
  @num_rows: number of row of keypad
  @input: input device pointer for keypad
  @regmap: regmap handle
  @key_sense_irq: key pressrelease irq number
  @key_stuck_irq: key stuck notification irq number
  @keycodes: array to hold the key codes
  @dev: parent device pointer
  @keystate: present key pressrelease state
  @stuckstate: present state when key stuck irq
  @ctrl_reg: control register value
 all keys pressed on that particular row? 
  Synchronous read protocol for RevB0 onwards:
  1. Write '1' to ReadState bit in KEYP_SCAN register
  2. Wait 232KHz clocks, so that HW can successfully enter read mode
     synchronously
  3. Read rows in old array first if events are more than one
  4. Read rows in recent array
  5. Wait 432KHz clocks
  6. Write '0' to ReadState bit of KEYP_SCAN register so that hw can
     synchronously exit read mode.
 2  32KHz clocks 
 4  32KHz clocks 
 detecting ghost key is not an error 
 two events - eventcounter is gray-coded 
  NOTE: We are reading recent and old data registers blindly
  whenever key-stuck interrupt happens, because events counter doesn't
  get updated when this interrupt happens due to key stuck doesn't get
  considered as key state change.
  We are not using old data register contents after they are being read
  because it might report the key which was pressed before the key being stuck
  as stuck key because it's pressed status is stored in the old data
  register.
 Find column bits 
 Find row bits 
 Row hold time is a multiple of 32KHz cycles. 
  keypad controller should be initialized in the following sequence
  only, otherwise it might get into FSM stuck state.
  - Initialize keypad control parameters, like no. of rows, columns,
    timing values etc.,
  - configure rows and column gpios pull updown.
  - set irq edge type.
  - enable the keypad controller.
 legacy name 
 initialize keypad state 
 SPDX-License-Identifier: GPL-2.0-only
  D-Link DIR-685 router I2C-based Touchkeys input driver
  Copyright (C) 2017 Linus Walleij <linus.walleij@linaro.org>
  This is a one-off touchkey controller based on the Cypress Semiconductor
  CY8C214 MCU with some firmware in its internal 8KB flash. The circuit
  board inside the router is named E119921
 Figure out if any bits went high or low since last message 
 Store currently down keys 
	
	  This key appears in the vendor driver, but I have
	  not been able to activate it.
 Set the brightness to max level 
 SPDX-License-Identifier: GPL-2.0-or-later
  Samsung keypad driver
  Copyright (C) 2010 Samsung Electronics Co.Ltd
  Author: Joonyoung Shim <jy0922.shim@samsung.com>
  Author: Donghwa Lee <dh09.lee@samsung.com>
 SAMSUNG_KEYIFCON 
 SAMSUNG_KEYIFSTSCLR 
 SAMSUNG_KEYIFCOL 
 SAMSUNG_KEYIFROW 
 SAMSUNG_KEYIFFC 
 KEYIFCOL reg clear 
 Clear interrupt. 
 Tell IRQ thread that it may poll the device. 
 Enable interrupt bits. 
 KEYIFCOL reg clear. 
 Signal IRQ thread to stop polling and disable the handler. 
 Clear interrupt. 
 Disable interrupt bits. 
	
	  Now that chip should not generate interrupts we can safely
	  re-enable the handler.
 legacy name 
 initialize the gpio 
 This may fail on some SoCs due to lack of controller support 
 SPDX-License-Identifier: GPL-2.0-only
   linuxdrivershilhilkbd.c
   Copyright (C) 1998 Philip Blundell <philb@gnu.org>
   Copyright (C) 1999 Matthew Wilcox <willy@infradead.org>
   Copyright (C) 1999-2007 Helge Deller <deller@gmx.de>
   Very basic HP Human Interface Loop (HIL) driver.
   This driver handles the keyboard on HP300 (m68k) and on some
   HP700 (parisc) series machines.
 HPA for the HIL device 
 HPPA (parisc) port address 
 HP300 (m68k) port address 
 HIL helper functions 
 HIL constants 
 set auto-repeat delay 
 set auto-repeat rate 
 set tone generator 
 clear nmi 
 Turn on interrupts. 
 Turn off interrupts. 
 HIL structure 
 native bus device 
 End of block 
 just in case 
 handle HIL interrupts 
 send a command to the HIL 
 wait ;
 wait ;
 initialize HIL 
 already initialized 
 Turn on interrupts 
 Look for keyboards 
 clear any pending data 
 set it to raw mode 
 Turn off interrupts 
 Only allow one HIL keyboard 
 Disabled to avoid conflicts with the HP SDC HIL drivers 
 !CONFIG_PARISC 
 Only allow one HIL keyboard 
 CONFIG_PARISC 
 SPDX-License-Identifier: GPL-2.0-only
  Touchkey driver for Freescale MPR121 Controllor
  Copyright (C) 2011 Freescale Semiconductor, Inc.
  Author: Zhang Jiejing <jiejing.zhang@freescale.com>
  Based on mcs_touchkey.c
 Register definitions 
  ELECTRODE_CONF_ADDR: This register configures the number of
  enabled capacitance sensing inputs and its runsuspend mode.
 Threshold of touchrelease trigger 
 Masks for touch and release triggers 
 MPR121 has 12 keys 
 use old press bit to figure out which bit changed 
 Set up touchrelease threshold for ele0-ele11 
 Set up init register 
	
	  Capacitance on sensing input varies and needs to be compensated.
	  The internal MPR121-auto-configuration can do this if it's
	  registers are set properly (based on vdd_uv).
	
	  Quick charge bit will let the capacitive charge to ready
	  state quickly, or the buttons may not function after system
	  boot.
 SPDX-License-Identifier: GPL-2.0-only
  Input driver for resistor ladder connected on ADC
  Copyright (c) 2016 Alexandre Belloni
 Forcibly release key if any was pressed 
 SPDX-License-Identifier: GPL-2.0-or-later
  LoCoMo keyboard driver for Linux-based ARM PDAs:
  	- SHARP Zaurus Collie (SL-5500)
  	- SHARP Zaurus Poodle (SL-5600)
  Copyright (c) 2005 John Lenz
  Based on from xtkbd.c
 0 - 9 
 10 - 19 
 20 - 29 
 30 - 39 
 40 - 49 
 50 - 59 
 60 - 69 
 70 - 79 
 80 - 89 
 90 - 99 
 100 - 109 
 110 - 119 
 120 - 128 
 helper functions for reading the keyboard matrix 
  The LoCoMo keyboard only generates interrupts when a key is pressed.
  So when a key is pressed, we enable a timer.  This timer scans the
  keyboard, and this is how we detect when the key is released.
 Scan the hardware keyboard and push any changes up through the input layer 
			 The "CancelESC" key is labeled "OnOff" on
			  Collie and Poodle and should suspend the device
 if any keys are pressed, enable the timer 
  LoCoMo keyboard interrupt handler.
 Ack 
 wait chattering delay 
  LoCoMo timer checking for released keys
 try and claim memory region 
 attempt to get the interrupt 
 SPDX-License-Identifier: GPL-2.0-only
   Copyright (C) 2013 Daniel Tang <tangrs@tangrs.id.au>
 Maximum delay estimated assuming 33MHz APB 
 In microseconds (~2000us max) 
 In microseconds (~500us max) 
 Overflow 
 Overflow 
 Set scan mode to 3 (continuous scan) 
 Delay between scanning each row 
 Delay between scans 
 Enable interrupts 
 Disable interrupts 
 Acknowledge existing interrupts 
 Disable interrupts 
 Acknowledge existing interrupts 
 Disable GPIO interrupts to prevent hanging on touchpad 
 Possibly used to detect touchpad events 
 Acknowledge existing GPIO interrupts 
 SPDX-License-Identifier: GPL-2.0-or-later
  SEGA Dreamcast keyboard driver
  Based on driversusbusbkbd.c
  Copyright (c) YAEGASHI Takeshi, 2001
  Porting to 2.6 Copyright (c) Adrian McMenamin, 2007 - 2009
 Very simple mutex to ensure proper cleanup 
	
	  We should always get the lock because the only
	  time it may be locked is if the driver is in the cleanup phase.
 Maple polling is locked to VBLANK - which may be just 50s 
 SPDX-License-Identifier: GPL-2.0-only
  TM2 touchkey device driver
  Copyright 2005 Phil Blundell
  Copyright 2016 Samsung Electronics Co., Ltd.
  Author: Beomho Seo <beomho.seo@samsung.com>
  Author: Jaechul Lee <jcsing.lee@samsung.com>
 waiting for device initialization, at least 150ms 
 touch turns backlight on, so make sure we're in sync 
 Save VDD for easy access 
 default keycodes 
 input device 
 led device 
 SPDX-License-Identifier: GPL-2.0-or-later
  Keyboard class input driver for the NVIDIA Tegra SoC internal matrix
  keyboard controller
  Copyright (c) 2009-2011, NVIDIA Corporation.
 Maximum rowcolumn supported by Tegra KBC yet  is 16x8 
 Maximum keys supported by Tegra KBC yet is 16 x 8
 KBC row scan time and delay for beginning the row scan. 
 KBC uses a 32KHz clock so a cycle = 132Khz 
 KBC Registers 
 KBC Control Register 
 KBC Interrupt Register 
 Tegra KBC hw support 
 If driver uses Fn map, do not report the Fn key. 
	
	  Matrix keyboard designs are prone to keyboard ghosting.
	  Ghosting occurs if there are 3 keys such that -
	  any 2 of the 3 keys share a row, and any 2 of them share a column.
	  If so ignore the key presses for this iteration.
			
			  Find 2 keys such that one key is in the same row
			  and the other is in the same column as the i-th key.
	
	  If the platform uses Fn keymaps, translate keys on a Fn keypress.
	  Function keycodes are max_keys apart from the plain keycodes.
 Ignore the key presses for this iteration? 
		
		  If more than one keys are pressed we need not wait
		  for the repoll delay.
 Release any pressed keys and exit the polling loop 
 All keys are released so enable the keypress interrupt 
	
	  Quickly bail out & reenable interrupts if the fifo threshold
	  count interrupt wasn't the interrupt source
		
		  Until all keys are released, defer further processing to
		  the polling loop in tegra_kbc_keypress_timer.
 We can be here only through system resume path 
 Either mask all keys or none. 
 Reset the KBC controller to clear all previous status.
 Keyboard debounce count is maximum of 12 bits. 
 set fifo interrupt threshold to 1 
 interrupt on FIFO threshold 
 enable 
	
	  Compute the delay(ns) from interrupt mode to continuous polling
	  mode so the timer routine is scheduled appropriately.
	
	  Atomically clear out any remaining entries in the key FIFO
	  and enable keyboard interrupts.
 legacy 
 Set all pins as non-configured 
	
	  The time delay between two consecutive reads of the FIFO is
	  the sum of the repeat time and the time taken for scanning
	  the rows. There is an additional delay before the row scanning
	  starts. The repoll delay is computed in milliseconds.
 Forcefully clear the interrupt status 
		
		  Store the previous resident time of continuous polling mode.
		  Force the keyboard into interrupt mode.
 Enable keypress interrupt before going into suspend. 
 We will use fifo interrupts for key detection. 
 Restore the resident time of continuous polling mode. 
			
			  We can't report events directly from the ISR
			  because timekeeping is stopped when processing
			  wakeup request and we get a nasty warning when
			  we try to call do_gettimeofday() in evdev
			  handler.
 SPDX-License-Identifier: GPL-2.0-only
  Driver for the enhanced rotary controller on pxa930 and pxa935
 allocate and register the input device 
 SPDX-License-Identifier: GPL-2.0-or-later
   qt2160.c - Atmel AT42QT2160 Touch Sense Controller
   Copyright (C) 2009 Raphael Derosso Pereira <raphaelpereira@gmail.com>
		
		  Changing this register will change the brightness
		  of every LED in the qt2160. It's a HW limitation.
 CONFIG_LEDS_CLASS 
	
	  Can't use SMBus block data read. Check for I2C functionality to speed
	  things up whenever possible. Otherwise we will be forced to read
	  sequentially.
	
	  Read all registers from General Status Register
	  to GPIOs register
 Avoid device lock up by checking every so often 
 Tur off LEDs 
 Read Chid ID to check if chip is valid 
 Read chip firmware version 
 Read chip firmware revision 
 Check functionality 
 Chip is valid and active. Allocate structure 
 Calibrate device 
 Release IRQ so no queue will be scheduled 
 SPDX-License-Identifier: GPL-2.0-or-later
  twl4030_keypad.c - driver for 8x8 keypad controller in twl4030 chips
  Copyright (C) 2007 Texas Instruments, Inc.
  Copyright (C) 2008 Nokia Corporation
  Code re-written for 2430SDP by:
  Syed Mohammed Khasim <x0khasim@ti.com>
  Initial Code:
  Manjunatha G K <manjugk@ti.com>
  The TWL4030 family chips include a keypad controller that supports
  up to an 8x8 switch matrix.  The controller can issue system wakeup
  events, since it uses only the always-on 32KiHz oscillator, and has
  an internal state machine that decodes pressed keys, including
  multi-key combinations.
  This driver lets boards define what keycodes they wish to report for
  which scancodes, as part of the "struct twl4030_keypad_data" used in
  the probe() routine.
  See the TPS65950 documentation; that's the general availability
  version of the TWL5030 second generation part.
 TWL4030 hard limit 
  Note that we add space for an extra column so that we can handle
  row lines connected to the gnd (see twl4030_col_xlate()).
----------------------------------------------------------------------
 arbitrary prescaler value 0..7 
 Register Offsets 
 row 0 column status 
 ... row 1 ... 
 edge triggers 
 KEYP_CTRL_REG Fields 
 KEYP_DEB, KEYP_LONG_KEY, KEYP_TIMEOUT_x
 KEYP_LK_PTV_REG Fields 
 KEYP_{IMR,ISR,SIR} Fields 
 KEYP_EDR Fields 
----------------------------------------------------------------------
	
	  If all bits in a row are active for all columns then
	  we have that row line connected to gnd. Mark this
	  key on as if it was on matrix position n_cols (i.e.
	  one higher than the size of the matrix).
 check for any changes 
 panic ... 
 check for changes and print those 
 Extra column handles "all gnd" rows 
  Keypad interrupt handler
 Read & Clear TWL4030 pending interrupt 
	
	  Release all keys if I2C has gone bad or
	  the KEYP has gone to idle state.
 Enable controller, with hardware decoding but not autorepeat 
	
	  NOTE: we could use sih_setup() here to package keypad
	  event sources as four different IRQs ... but we don't.
 Enable TO rising and KP rising and falling edge detection 
 Set PTV prescaler Field 
 Set key debounce time to 20 ms 
 Set timeout period to 200 ms 
	
	  Enable Clear-on-Read; disable remembering events that fire
	  after the IRQ but before our handler acks (reads) them.
 initialize key state; irqs update it from here on 
  Registers keypad device with input subsystem
  and configures TWL4030 keypad registers
 get the debug device 
 setup input device 
 Enable auto repeat feature of Linux input subsystem 
	
	  This ISR will always execute in kernel thread context because of
	  the need to access the TWL4030 over the I2C bus.
	 
	  NOTE:  we assume this host is wired to TWL4040 INT1, not INT2 ...
 Enable KP and TO interrupts now. 
 mask all events - we don't care about the result 
  NOTE: twl4030 are multi-function devices connected via I2C.
  So this device is a child of an I2C parent, thus it needs to
  support unplugreplug (which most platform devices don't).
 SPDX-License-Identifier: GPL-2.0
 Driver for the IMX keypad port.
 Copyright (C) 2009 Alberto Panizzo <maramaopercheseimorto@gmail.com>
  Keypad Controller registers (halfword)
 Keypad Control Register 
 Keypad Status Register 
 Key Press Interrupt Status bit (w1c) 
 Key Release Interrupt Status bit (w1c) 
 Key Depress Synch Chain Status bit (w1c)
 Key Release Synch Status bit (w1c)
 Key Depress Interrupt Enable Status bit 
 Key Release Interrupt Enable 
 Keypad Clock Enable 
 Keypad Data Direction Register 
 Keypad Data Register 
	
	  The matrix is stable only if no changes are detected after
	  IMX_KEYPAD_SCANS_FOR_STABILITY scans
 Masks for enabled rowscols 
	
	  Matrix states:
	  -stable: achieved after a complete debounce process.
	  -unstable: used in the debouncing process.
 Scan the matrix and return the new state in matrix_volatile_state. 
		
		  Discharge keypad capacitance:
		  2. write 1s on column data.
		  3. configure columns as totem-pole to discharge capacitance.
		  4. configure columns as open-drain.
		
		  5. Write a single column to 0, others to 1.
		  6. Sample row inputs and save data.
		  7. Repeat steps 2 - 6 for remaining columns.
		
		  Delay added to avoid propagating the 0 from column to row
		  when scanning.
		
		  1s in matrix_volatile_state[col] means key pressures
		  throw data from non enabled rows.
	
	  Return in standby mode:
	  9. write 0s to columns
  Compare the new matrix state (volatile) with the stable one stored in
  keypad->matrix_stable_state and fire events if changes are detected.
 Column is not enabled 
 Column does not contain changes 
 Row is not enabled 
 Row does not contain changes 
  imx_keypad_check_for_events is the timer handler.
	
	  If the matrix state is changed from the previous scan
	    (Re)Begin the debouncing process, saving the new state in
	     keypad->matrix_unstable_state.
	  else
	    Increase the count of number of scans with a stable state.
	
	  If the matrix is not as stable as we want reschedule scan
	  in the near future.
	
	  If the matrix state is stable, fire the events and save the new
	  stable state. Note, if the matrix is kept stable for longer
	  (keypad->stable_count > IMX_KEYPAD_SCANS_FOR_STABILITY) all
	  events have already been generated.
		
		  All keys have been released. Enable only the KDI
		  interrupt for future key presses (clear the KDI
		  status bit and its sync chain before that).
		
		  Some keys are still pressed. Schedule a rescan in
		  attempt to detect multiple key presses and enable
		  the KRI interrupt to react quickly to key release
		  event.
 Disable both interrupt types 
 Clear interrupts status bits 
 The matrix is supposed to be changed 
 Schedule the scanning procedure near in the future 
	
	  Include enabled rows in interrupt generation (KPCR[7:0])
	  Configure keypad columns as open-drain (KPCR[15:8])
 rows 
 cols 
 Write 0's to KPDR[15:8] (Colums) 
 Configure columns as output, rows as input (KDDR[15:0]) 
	
	  Clear Key Depress and Key Release status bit.
	  Clear both synchronizer chain.
 Enable KDI and disable KRI (avoid false release events). 
 Inhibit KDI and KRI interrupts. 
 Colums as open drain and disable all rows 
 Mark keypad as being inactive 
 Disable clock unit 
 Enable the kpp clock 
 We became active from now 
 Sanity control, not all the rows must be actived now. 
 sentinel  }
 Init the Input device 
 Search for rows and cols enabled 
 Ensure that the keypad will stay dormant until opened 
 Register the input device 
 imx kbd can wake up system even clock is disabled 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for the Cirrus EP93xx matrix keypad controller.
  Copyright (c) 2008 H Hartley Sweeten <hsweeten@visionengravers.com>
  Based on the pxa27x matrix keypad controller by Rodolfo Giometti.
  NOTE:
  The 3-key reset is triggered by pressing the 3 keys in
  Row 0, Columns 2, 4, and 7 at the same time.  This action can
  be disabled by setting the EP93XX_KEYPAD_DISABLE_3_KEY flag.
  Normal operation for the matrix does not autorepeat the key press.
  This action can be enabled by setting the EP93XX_KEYPAD_AUTOREPEAT
  flag.
  Keypad Interface Register offsets
 Key Scan Initialization register 
 Key Scan Diagnostic register 
 Key Value Capture register 
 Key Scan Initialization Register bit defines 
 Key Scan Diagnostic Register bit defines 
 Key Value Capture Register bit defines 
 SPDX-License-Identifier: GPL-2.0-or-later
   Atmel AT42QT1070 QTouch Sensor Controller
   Copyright (C) 2011 Atmel
   Authors: Bo Shen <voice.shen@atmel.com>
   Base on AT42QT2160 driver by:
   Raphael Derosso Pereira <raphaelpereira@gmail.com>
   Copyright (C) 2009
 Address for each register 
 Calibrate 
 Reset 
 AT42QT1070 support up to 7 keys 
 Read Chip ID 
 Read firmware version 
 Read the detected status register, thus clearing interrupt 
 Read which key changed 
 Identify the qt1070 chip 
 Add the keycode 
 Calibrate device 
 Soft reset 
 Register the input device 
 Read to clear the chang line 
 Release IRQ 
 SPDX-License-Identifier: GPL-2.0-or-later
  File: driversinputkeyboardadp5588_keys.c
  Description:  keypad driver for ADP5588 and ADP5587
 		 I2C QWERTY Keypad and IO Expander
  Bugs: Enter bugs at http:blackfin.uclinux.org
  Copyright (C) 2008-2010 Analog Devices Inc.
 Key Event Register xy 
 2^x-1 
  Early pre 4.0 Silicon required to delay readout by at least 25ms,
  since the Event Counter Register updated 25ms after the interrupt
  asserted.
 Protect cached dir, dat_out 
 Unlikely and should never happen 
 Status is W1C 
	
	  use keventd context to read the event fifo registers
	  Schedule readout at least 25ms after notification for
	  REVID < 4
 Status is W1C 
 setup input device 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for keys on GPIO lines capable of generating interrupts.
  Copyright 2005 Phil Blundell
  Copyright 2010, 2011 David Jander <david@protonic.nl>
 in msecs, for IRQ-only buttons 
 in msecs, for GPIO-driven buttons 
  SYSFS interface for enablingdisabling keys and switches:
  There are 4 attributes under sysdevicesplatformgpio-keys
 	keys [ro]              - bitmap of keys (EV_KEY) which can be
 	                         disabled
 	switches [ro]          - bitmap of switches (EV_SW) which can be
 	                         disabled
 	disabled_keys [rw]     - bitmap of keys currently disabled
 	disabled_switches [rw] - bitmap of switches currently disabled
  Userland can change these values and hence disable event generation
  for each key (or switch). Disabling a key means its interrupt line
  is disabled.
  For example, if we have following switches set up as gpio-keys:
 	SW_DOCK = 5
 	SW_CAMERA_LENS_COVER = 9
 	SW_KEYPAD_SLIDE = 10
 	SW_FRONT_PROXIMITY = 11
  This is read from switches:
 	11-9,5
  Next we want to disable proximity (11) and dock (5), we write:
 	11,5
  to file disabled_switches. Now proximity and dock IRQs are disabled.
  This can be verified by reading the file disabled_switches:
 	11,5
  If we now want to enable proximity (11) switch we write:
 	5
  to disabled_switches.
  We can disable only those keys which don't allow sharing the irq.
  get_n_events_by_type() - returns maximum number of events per @type
  @type: type of button (%EV_KEY, %EV_SW)
  Return value of this function can be used to allocate bitmap
  large enough to hold all bits for given type.
  get_bm_events_by_type() - returns bitmap of supported events per @type
  @dev: input device from which bitmap is retrieved
  @type: type of button (%EV_KEY, %EV_SW)
  Return value of this function can be used to allocate bitmap
  large enough to hold all bits for given type.
  gpio_keys_disable_button() - disables given GPIO button
  @bdata: button data for button to be disabled
  Disables button pointed by @bdata. This is done by masking
  IRQ line. After this function is called, button won't generate
  input events anymore. Note that one can only disable buttons
  that don't share IRQs.
  Make sure that @bdata->disable_lock is locked when entering
  this function to avoid races when concurrent threads are
  disabling buttons at the same time.
		
		  Disable IRQ and associated timerwork structure.
  gpio_keys_enable_button() - enables given GPIO button
  @bdata: button data for button to be disabled
  Enables given button pointed by @bdata.
  Make sure that @bdata->disable_lock is locked when entering
  this function to avoid races with concurrent threads trying
  to enable the same button at the same time.
  gpio_keys_attr_show_helper() - fill in stringified bitmap of buttons
  @ddata: pointer to drvdata
  @buf: buffer where stringified bitmap is written
  @type: button type (%EV_KEY, %EV_SW)
  @only_disabled: does caller want only those buttons that are
                  currently disabled or all buttons that can be
                  disabled
  This function writes buttons that can be disabled to @buf. If
  @only_disabled is true, then @buf contains only those buttons
  that are currently disabled. Returns 0 on success or negative
  errno on failure.
  gpio_keys_attr_store_helper() - enabledisable buttons based on given bitmap
  @ddata: pointer to drvdata
  @buf: buffer from userspace that contains stringified bitmap
  @type: button type (%EV_KEY, %EV_SW)
  This function parses stringified bitmap from @buf and disablesenables
  GPIO buttons accordingly. Returns 0 on success and negative error
  on failure.
 First validate 
  ATTRIBUTES:
  sysdevicesplatformgpio-keyskeys [ro]
  sysdevicesplatformgpio-keysswitches [ro]
  ATTRIBUTES:
  sysdevicesplatformgpio-keysdisabled_keys [rw]
  sysdevicesplatformgpio-keysdisables_switches [rw]
			
			  Simulate wakeup key press in case the key has
			  already released by the time we got interrupt
			  handler to run.
				
				  GPIO is optional, we may be dealing with
				  purely interrupt-driven setup.
		
		  Legacy GPIO number, so request the GPIO here and
		  convert it to descriptor.
 use timer if gpiolib doesn't provide debounce 
			
			  If reading the GPIO won't sleep, we can use a
			  hrtimer instead of a standard timer for the software
			  debounce, to reduce the latency as much as possible.
			
			  For other cases, we are OK letting suspendresume
			  not reconfigure the trigger type.
		
		  For IRQ buttons, there is no interrupt for release.
		  So we don't need to reconfigure the trigger type for wakeup.
	
	  Install custom action to cancel release timer and
	  workqueue item.
	
	  If platform has specified that the button can be disabled,
	  we don't want it to share the interrupt line.
 Report current state of buttons that are connected to GPIOs 
  Handlers for alternative sources of platform_data
  Translate properties into platform_data
 legacy name 
 Enable auto repeat feature of Linux input subsystem 
	
	  The trigger type is always both edges for gpio-based keys and we do
	  not support changing wakeup trigger for interrupt-based keys.
  SPEAr Keyboard Driver
  Based on omap-keypad driver
  Copyright (C) 2010 ST Microelectronics
  Rajeev Kumar <rajeevkumar.linux@gmail.com>
  This file is licensed under the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
 Keyboard Registers 
 Register Values 
 following reads active (row, col) pair 
 clear interrupt 
 keyboard rate to be programmed is input clock (in MHz) - 1 
 program keyboard 
 start key scan 
 stop key scan 
 explicitly enable clock as we may program device 
		
		  reprogram the keyboard operating frequency as on some
		  platform it may change during system suspended
 store current configuration 
 restore previous clk state 
 restore current configuration 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversinputkeyboardpxa27x_keypad.c
  Driver for the pxa27x matrix keyboard controller.
  Created:	Feb 22, 2007
  Author:	Rodolfo Giometti <giometti@linux.it>
  Based on a previous implementations by Kevin O'Connor
  <kevin_at_koconnor.net> and Alex Osborne <bobofdoom@gmail.com> and
  on some suggestions by Nicolas Pitre <nico@fluxnic.net>.
  Keypad Controller registers
 Keypad Control register 
 Keypad Direct Key register 
 Keypad Rotary Encoder register 
 Keypad Matrix Key register 
 Keypad Automatic Scan register 
 Keypad Automatic Scan Multiple Key Presser register 0-3 
 bit definitions 
 matrix key row number 
 matrix key column number 
 direct key number 
 Automatic Scan bit 
 Automatic Scan on Activity 
 Matrix interrupt bit 
 Ignore Multiple Key Press 
 Matrix scan line 'n' 
 Matrix Keypad Enable 
 Matrix Interrupt Enable 
 Direct Keypad Debounce Select 
 Direct key interrupt bit 
 Rotary Encoder Zero Debounce 
 Rotary Encoder1 Enable 
 Rotary Encoder0 Enable 
 Direct Keypad Enable 
 Direct Keypad interrupt Enable 
 state row bits of each column scan 
		
		  If do not have marvel,direct-key-count defined,
		  it means direct key is not supported.
		
		  If marvell,direct-key-mask is not defined, driver will use
		  default value. Default value is set when configure the keypad.
 Only MAX_DIRECT_KEY_NUM is accepted.
 if can read correct rotary key-code, we do not need this. 
 rotary0 taks lower half, rotary1 taks upper half. 
		
		  If the prop is not set, it means keypad does not need
		  initialize the rotaryX.
		
		  Not all updown key code are valid.
		  Now we depends on direct-rel-code.
	
	  The keycodes may not only includes matrix key but also the direct
	  key or rotary key.
	
	  The keycodes may not only include matrix keys but also the direct
	  or rotary keys.
 For direct keys. 
 if invalid rowcol, treat as no key pressed 
 simulate a press-n-release 
 read and reset to default count value 
	
	  The KPDR_DK only output the key pin level, so it relates to board,
	  and low level may be active.
 clear pending interrupt bit 
 enable matrix keys with automatic scan 
 enable rotary key, debounce interval same as direct keys 
	
	  Direct keys usage may not start from KP_DKIN0, check the platfrom
	  mask data to config the specific.
 enable direct key 
 Enable unit clock 
 Disable clock unit 
	
	  If the keypad is used a wake up source, clock can not be disabled.
	  Or it can not detect the key pressing.
	
	  If the keypad is used as wake up source, the clock is not turned
	  off. So do not need configure it again.
 Enable unit clock 
 Driver need build keycode from device tree or pdata 
		
		  Data that we get from DT resides in dynamically
		  allocated memory so we need to update our pdata
		  pointer.
 Register the input device 
 work with hotplug and coldplug 
 SPDX-License-Identifier: GPL-2.0-or-later
  OpenCores Keyboard Controller Driver
  http:www.opencores.orgproject,keyboardcontroller
  Copyright 2007-2009 HV Sistemas S.L.
		
		  OpenCores controller happens to have scancodes match
		  our KEY_ definitions.
 SPDX-License-Identifier: GPL-2.0
  Copyright 2019 NXP.
 true: pressed, false: released 
	
	  The response data from SCU firmware is 4 bytes,
	  but ONLY the first byte is the key state, other
	  3 bytes could be some dirty data, so we should
	  ONLY take the first byte as key state.
 sentinel  }
  Copyright (C) 2014 Broadcom Corporation
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License as
  published by the Free Software Foundation version 2.
  This program is distributed "as is" WITHOUT ANY WARRANTY of any
  kind, whether express or implied; without even the implied warranty
  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 Registerfield definitions 
 Macros to determine the rowcolumn from a bit that is set in SSR01. 
 Structure representing various run-time entities 
  Returns the keycode from the input device keymap given the row and
  column.
 Clear interrupts 
 The meaning of SSR register depends on pull mode. 
 Initialize the KPCR Keypad Configuration Register 
 Set row width for the ASIC block. 
 Set column width for the ASIC block. 
 Configure the IMR registers 
	
	  IMR registers contain interrupt enable bits for 8x8 matrix
	  IMR0 register format: <row3> <row2> <row1> <row0>
	  IMR1 register format: <row7> <row6> <row5> <row4>
 Set column bits in rows 0 to 3 in IMR0 
 Set column bits in rows 4 to 7 in IMR1 
 Initialize the KPEMR Keypress Edge Mode Registers 
 Trigger on both edges 
	
	  Obtain the Status filter debounce value and verify against the
	  possible values specified in the DT binding.
	
	  Obtain the Column filter debounce value and verify against the
	  possible values specified in the DT binding.
	
	  Determine between the row and column,
	  which should be configured as output.
		
		 Set RowOContrl or ColumnOContrl in KPIOR
		 to the number of pins to drive as outputs
	
	  Determine if the scan pull up needs to be enabled
 Enable auto repeat feature of Linux input subsystem 
 Get the KEYPAD base address 
 Enable clock 
 Put the kp into a known sane state 
 SPDX-License-Identifier: GPL-2.0-or-later
  Cirrus Logic CLPS711X Keypad driver
  Copyright (C) 2014 Alexander Shiyan <shc_work@mail.ru>
 Assert column 
 Scan rows 
 Read twice for protection against fluctuations 
 Set all columns to low 
 Set all columns to low 
 SPDX-License-Identifier: GPL-2.0-only
   GPIO driven matrix keyboard driver
   Copyright (c) 2008 Marek Vasut <marek.vasut@gmail.com>
   Based on corgikbd.c
  NOTE: If drive_inactive_cols is false, then the GPIO has to be put into
  HiZ when de-activated to cause minmal side effect when scanning other
  columns. In that case it is configured here to be input, otherwise it is
  driven with the inactive value.
  This gets the keys from keyboard and reports it to input subsystem
 de-activate all columns for scanning 
 assert each column and read the row status out 
 Enable IRQs again 
	
	  See if another IRQ beaten us to it and scheduled the
	  scan already. In that case we should not try to
	  disable IRQs again.
	
	  Schedule an immediate key scan to capture current key state;
	  columns will be activated and IRQs be enabled after the scan.
	
	  matrix_keypad_scan() will leave IRQs enabled;
	  we should disable them now.
 initialized strobe lines as outputs, activated 
 initialized as disabled - enabled by input->open 
 legacy 
 SPDX-License-Identifier: GPL-2.0-only
  Input driver for Microchip CAP11xx based capacitive touch sensors
  (c) 2014 Daniel Mack <linux@zonque.org>
 config 
	
	  Deassert interrupt. This needs to be done before reading the status
	  registers, which will not carry valid values otherwise.
	
	  DLSEEP mode will turn off all LEDS, prevent this
	
	  All LEDs share the same duty cycle as this is a HW
	  limitation. Brightness levels per LED are either
	  0 (OFF) and 1 (ON).
 Provide some useful defaults 
 Disable autorepeat. The Linux input system has its own handling. 
	
	  Put the device in deep sleep mode for now.
	  ->open() will bring it back once the it is actually needed.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1999-2001 Vojtech Pavlik
  XT keyboard driver for Linux
 SPDX-License-Identifier: GPL-2.0-only
   Driver for buttons on GPIO lines not capable of generating interrupts
   Copyright (C) 2007-2010 Gabor Juhos <juhosg@openwrt.org>
   Copyright (C) 2010 Nuno Goncalves <nunojpg@gmail.com>
   This file was based on: driversinputmisccobalt_btns.c
 	Copyright (C) 2007 Yoichi Yuasa <yoichi_yuasa@tripeaks.co.jp>
   also was based on: driversinputkeyboardgpio_keys.c
 	Copyright 2005 Phil Blundell
 legacy name 
 No legacy static platform data 
			
			  Legacy GPIO number so request the GPIO here and
			  convert it to descriptor.
 report initial state of the buttons 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) ST-Ericsson SA 2010
  Author: Naveen Kumar G <naveen.gaddipati@stericsson.com> for ST-Ericsson
  Author: Sundar Iyer <sundar.iyer@stericsson.com> for ST-Ericsson
  Keypad controller driver for the SKE (Scroll Key Encoder) module used in
  the Nomadik 8815 and Ux500 platforms.
 SKE_CR bits 
 SKE_IMSC bits 
 SKE_ICR bits 
 SKE_RIS bits 
 keypad auto scan registers 
  struct ske_keypad  - data structure used by keypad driver
  @irq:	irq no
  @reg_base:	ske registers base address
  @input:	pointer to input device object
  @board:	keypad platform device
  @keymap:	matrix scan code table for keycodes
  @clk:	clock structure pointer
  @pclk:	clock structure pointer
  @ske_keypad_lock: spinlock protecting the keypad readwrites
  ske_keypad_chip_init: init keypad controller configuration
  Enable Multi key press detection, auto scan mode
 check SKE_RIS to be 0 
	
	  set debounce value
	  keypad dbounce is configured in DBCR[15:8]
	  dbounce value in steps of 3232.768 ms
 enable multi key detection 
	
	  set up the number of columns
	  KPCN[5:3] defines no. of keypad columns to be auto scanned
 clear keypad interrupt for auto(and pending SW) scans 
 un-mask keypad interrupts 
 enable automatic scan 
 find out the row 
	
	  Read the auto scan registers
	 
	  Each SKE_ASRx (x=0 to x=3) contains two row values.
	  lower byte contains row value for column 2x,
	  upper byte contains row value for column 2x + 1
 now that ASRx is zero, find out the coloumn x and row y 
 disable auto scan interrupt; mask the interrupt generated 
 SKEx registers are stable and can be read 
 wait until raw interrupt is clear 
 enable auto scan interrupts 
 go through board initialization helpers 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) ST-Ericsson SA 2010
  Author: Jayeeta Banerjee <jayeeta.banerjee@stericsson.com>
  Author: Sundar Iyer <sundar.iyer@stericsson.com>
  TC35893 MFD Keypad Controller driver
 Maximum supported keypad matrix rowcolumns size 
 keypad related Constants 
 Pull updown masks 
 Bit masks for IOCFG register 
 bit masks for RESTCTRL register 
 KBDMFS register bit mask 
 CLKEN register bitmask 
 RSTINTCLR register bit mask 
 bit masks for keyboard interrupts
 bit masks for keyboard interrupt clear
  struct tc35893_keypad_platform_data - platform specific keypad data
  @keymap_data:        matrix scan code table for keycodes
  @krow:               mask for available rows, value is 0xFF
  @kcol:               mask for available columns, value is 0xFF
  @debounce_period:    platform specific debounce time
  @settle_time:        platform specific settle down time
  @irqtype:            type of interrupt, falling or rising edge
  @enable_wakeup:      specifies if keypad event can wake up system from sleep
  @no_autorepeat:      flag for auto repetition
  struct tc_keypad - data structure used by keypad driver
  @tc3589x:    pointer to tc35893
  @input:      pointer to input device object
  @board:      keypad platform device
  @krow:	number of rows
  @kcol:	number of columns
  @keymap:     matrix scan code table for keycodes
  @keypad_stopped: holds keypad status
 validate platform configuration 
 configure KBDSIZE 4 LSbits for cols and 4 MSbits for rows 
 configure dedicated key config, no dedicated key selected 
 Configure settle time 
 Configure debounce time 
 Start of initialise keypad GPIOs 
 Configure pull-up resistors for all row GPIOs 
 Configure pull-up resistors for all column GPIOs 
 loop till fifo is empty and no more keys are pressed 
 valid key is found 
 clear IRQ 
 enable IRQ 
 pull the keypad module out of reset 
 configure KBDMFS 
 enable the keypad clock 
 clear pending IRQs 
 enable the IRQs 
 clear IRQ 
 disable all interrupts 
 disable the keypad module 
 put the keypad module into reset 
 enable the keypad module 
 disable the keypad module 
 legacy name 
 The custom delay format is ms16 
 FIXME: should be property of the IRQ resource? 
 let platform decide if keypad is a wakeup source or not 
 keypad is already off; we do nothing 
 if device is not a wakeup source, disable it for powersave 
 enable the device to resume normal operations 
 SPDX-License-Identifier: GPL-2.0-or-later
  NXP LPC32xx SoC Key Scan Interface
  Authors:
     Kevin Wells <kevin.wells@nxp.com>
     Roland Stigge <stigge@antcom.de>
  Copyright (C) 2010 NXP Semiconductors
  Copyright (C) 2012 Roland Stigge
  This controller supports square key matrices from 1x1 up to 8x8
  Key scanner register offsets
 1..8 
 Size of matrix in XxY, ie. 3 = 3x3 
 Debounce clocks (based on 32KHz clock) 
 Scan delay (based on 32KHz clock) 
 Pointer to key map for the scan matrix 
 Key state changed, signal an event 
 Setup key input 
 Get the key scanner clock 
 Configure the key scanner 
 Clear IRQ and disable clock 
 Enable clock and clear IRQ 
  Driver for TCA8418 I2C keyboard
  Copyright (C) 2011 Fuel7, Inc.  All rights reserved.
  Author: Kyle Manna <kyle.manna@fuel7.com>
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public
  License v2 as published by the Free Software Foundation.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.
  You should have received a copy of the GNU General Public
  License along with this program; if not, write to the
  Free Software Foundation, Inc., 59 Temple Place - Suite 330,
  Boston, MA 021110-1307, USA.
  If you can't comply with GPLv2, alternative licensing terms may be
  arranged. Please contact Fuel7, Inc. (http:fuel7.com) for proprietary
  alternative licensing inquiries.
 TCA8418 hardware limits 
 TCA8418 register offsets 
 TCA8418 bit definitions 
 TCA8418 register masks 
  Write a byte to the TCA8418
  Read a byte from the TCA8418
 Assume that key code 0 signifies empty FIFO 
  Threaded IRQ handler and this can (and will) sleep.
 Clear all interrupts, even IRQs we didn't check (GPI, CAD, LCK) 
  Configure the TCA8418 for keypad operation
 Assemble a mask for row and column registers 
 Set registers to keypad mode 
 Enable column debouncing 
 Check i2c driver capabilities 
 Allocate memory for keypad_data and input device 
 Read key lock register, if this fails assume device not present 
 Configure input device 
 Initialize the chip 
 SPDX-License-Identifier: GPL-2.0-only
  Description:  keypad driver for ADP5589, ADP5585
 		 I2C QWERTY Keypad and IO Expander
  Bugs: Enter bugs at http:blackfin.uclinux.org
  Copyright (C) 2010-2011 Analog Devices Inc.
 ADP5589ADP5585 Common Registers 
 ADP5589 Registers 
 ADP5585 Registers 
 ID Register 
 GENERAL_CFG Register 
 ADP5589 only 
 ADP5589 only 
 INT_EN Register 
 ADP5589 only 
 ADP5589 only 
 Interrupt Status Register 
 ADP5589 only 
 ADP5589 only 
 STATUS Register 
 ADP5589 only 
 ADP5589 only 
 PIN_CONFIG_D Register 
 RESET2 
 RESET1 
 LOCK_CFG 
 ADP5589 only 
 Key Event Register xy 
 10 on the ADP5585-01, 11 on ADP5585-02 
 Protect cached dir, dat_out 
   ADP5589  ADP5585 derivative  variant handling
 ADP5589 
 ADP5585 
 Unlikely and should never happen 
 Status is W1C 
 Status is W1C 
 setup input device 
 Adds ROW5 to ADP5585 
 SPDX-License-Identifier: GPL-2.0-only
  driversi2cchipslm8323.c
  Copyright (C) 2007-2009 Nokia Corporation
  Written by Daniel Stone <daniel.stone@nokia.com>
             Timo O. Karjalainen <timo.o.karjalainen@nokia.com>
  Updated by Felipe Balbi <felipe.balbi@nokia.com>
 Commands to send to the chip. 
 Read chip ID. 
 Set configuration item. 
 Get interrupt status. 
 Reset, same as external one 
 Set GPIO inout. 
 Set GPIO pullup. 
 Get GPIO inout. 
 Get GPIO pullup. 
 Read byte from FIFO. 
 Read FIFO (no increment). 
 Set active time. 
 Get error status. 
 Read rotator status. 
 Set debouncing time. 
 Set keypad size. 
 Get keypad size. 
 Get configuration item. 
 Set clock config. 
 Get clock config. 
 Write PWM script. 
 Start PWM engine. 
 Stop PWM engine. 
 Interrupt status. 
 Key event. 
 Rotator event. 
 Error: use CMD_READ_ERR. 
 Lost configuration. 
 PWM1 stopped. 
 PWM2 stopped. 
 PWM3 stopped. 
 Errors (signalled by INT_ERROR, read with CMD_READ_ERR). 
 Bad parameter. 
 Unknown command. 
 Too many keys pressed. 
 FIFO overflow. 
 Configuration keys (CMD_{WRITE,READ}_CFG). 
 Select MUX1_OUT input. 
 Enable MUX1_OUT. 
 Select MUX2_OUT input. 
 Enable MUX2_OUT. 
 Package size (must be 0). 
 Enable rotator. 
 Clock settings (CMD_{WRITE,READ}_CLOCK). 
 Enable 32.768kHz clock. 
 Enable slow pulse output. 
 The possible addresses corresponding to CONFIG1 and CONFIG2 pin wirings. 
 1000 010x 
 1000 011x 
 1000 100x 
 1000 101x 
 Key event fifo length 
 Commands for PWM engine; feed in with PWM_WRITE. 
 Load ramp counter from duty cycle field (range 0 - 0xff). 
 Go to start of script. 
  Stop engine (generates interrupt).  If reset is 1, clear the program
  counter, else leave it.
  Ramp.  If s is 1, divide clock by 512, else divide clock by 16.
  Take t clock scales (up to 63) per step, for n steps (up to 126).
  If u is set, ramp up, else ramp down.
  Loop (i.e. jump back to pos) for a given number of iterations (up to 63).
  If cnt is zero, execute until PWM_END is encountered.
  Wait for trigger.  Argument is a mask of channels, shifted by the channel
  number, e.g. 0xa for channels 3 and 1.  Note that channels are numbered
  from 1, not 0.
 Send trigger.  Argument is same as PWM_WAIT_TRIG. 
 pwm lock 
 device lock 
  To write, we just access the chip's address in write mode, and dump the
  command and data out on the bus.  The command byte and data are taken as
  sequential u8s out of varargs, to a maximum of LM8323_MAX_DATA.
	
	  If the host is asleep while we send the data, we can get a NACK
	  back while it wakes up, so try again, once.
  To read, we first send the command byte to the chip and end the transaction,
  then access the chip in read mode, at which point it will send the data.
	
	  If the host is asleep while we send the byte, we can get a NACK
	  back while it wakes up, so try again, once.
  Set the chip active time (idle time before it enters halt).
  The signals are AT-style: the low 7 bits are the keycode, and the top
  bit indicates the state (1 for down, 0 for up).
	
	  Read all key events from the FIFO at once. Next READ_FIFO clears the
	  FIFO even if we didn't read all events previously.
	
	  Errata: We need to ensure that the chip never enters halt mode
	  during a keypress, so set active time to 0.  When it's released,
	  we can enter halt again, so set the active time back to normal.
 The docs say we must pass 0xAA as the data byte. 
	
	  Active time must be greater than the debounce time: if it's
	  a close-run thing, give ourselves a 12ms buffer.
	
	  Not much we can do about errors at this point, so just hope
	  for the best.
  Bottom half: handle the interrupt by posting key events, or dealing with
  errors appropriately.
 We don't currently support the rotator. 
  Read the chip ID.
  Write a script into a given PWM engine, concluding with PWM_END.
  If 'kill' is nonzero, the engine will be shut down at the end
  of the script, producing a zero output. Otherwise the engine
  will be kept running at the final PWM level indefinitely.
	
	  Do nothing if we're already at the requested level,
	  or previous setting is not yet complete. In the latter
	  case we will be called again when the previous PWM script
	  finishes.
	
	  Convert time (in ms) into a divisor (512 or 16 on a refclk of
	  32768Hz), and number of ticks per step.
		
		  Schedule PWM work as usual unless we are going into suspend
 Numbers only, please. 
	 Nothing's set up to service the IRQ yet, so just spin for max.
 If a true probe check the device 
  We don't need to explicitly suspend the chip, as it already switches off
  when there's no activity.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 2000-2001 Vojtech Pavlik
   Based on the work of:
 	Hamish Macdonald
  Amiga keyboard driver for Linuxm68k
 We can spare 512 bytes on stack for temp_map in init path. 
 !CONFIG_HW_CONSOLE 
 !CONFIG_HW_CONSOLE 
 get and invert scancode (keyboard is active low) 
 switch SP pin to output for handshake 
 wait until 85 us have expired 
 switch CIA serial port to input mode 
 lowest bit is release bit 
 scancodes < 0x78 are keys 
 CapsLock is a toggle switch key on Amiga 
 scancodes >= 0x78 are error codes 
 serial data in, turn off TA 
 SPDX-License-Identifier: GPL-2.0+
  Azoteq IQS620A621622624625 Keys and Switches
  Copyright (C) 2019 Jeff LaBundy <jeff@labundy.com>
		
		  Discreet button, hysteresis and SAR UI flags represent keys
		  and are unmasked if mapped to a valid keycode.
		
		  Hall UI flags represent switches and are unmasked if their
		  corresponding child nodes are present.
		
		  Interval change events represent keys and are unmasked if
		  either wheel movement flag is mapped to a valid keycode.
	
	  Each frame contains at most one wheel event (up or down), in which
	  case a complementary release cycle is emulated.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1999-2001 Vojtech Pavlik
  Sun keyboard driver for Linux
  Per-keyboard data.
  sunkbd_interrupt() is called by the low level driver when a character
  is received.
		
		  If cp[i] is 0xff, sunkbd->reset will stay -1.
		  The keyboard sends 0xff 0xff 0xID on powerup.
 All keys released 
  sunkbd_event() handles events from the input module.
  sunkbd_initialize() checks for a Sun keyboard attached, and determines
  its type.
 Type 4 keyboard 
  sunkbd_set_leds_beeps() sets leds and beeps to a state the computer remembers
  they were in.
  sunkbd_reinit() wait for the keyboard reset to complete and restores state
  of leds and beeps.
	
	  It is OK that we check sunkbd->enabled without pausing serio,
	  as we only want to catch true->false transition that will
	  happen once and we will be woken up for it.
  sunkbd_connect() probes for a Sun keyboard and fills the necessary
  structures.
  sunkbd_disconnect() unregisters and closes behind us.
 sunkbd does probe 
 SPDX-License-Identifier: GPL-2.0-only
  h3600 atmel micro companion support, key subdevice
  based on previous kernel 2.4 version
  Author : Alessandro Gardich <gremlin@gremlin.it>
  Author : Linus Walleij <linus.walleij@linaro.org>
 1:  Record button			
 2:  Calendar				
 3:  Contacts (looks like Outlook)	
 4:  Envelope (Q on older iPAQs)	
 5:  Start (looks like swoopy arrow)	
 6:  Up				
 7:  Right				
 8:  Left				
 9:  Down				
  Generic linux-input device driver for keyboard devices
  Copyright (c) 2001 Brian S. Julin
  All rights reserved.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions, and the following disclaimer,
     without modification.
  2. The name of the author may not be used to endorse or promote products
     derived from this software without specific prior written permission.
  Alternatively, this software may be distributed under the terms of the
  GNU General Public License ("GPL").
  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  References:
  HP-HIL Technical Reference Manual.  Hewlett Packard Product No. 45918A
 HIL keyboard 
 HIL mouse 
 Set2 is user defined 
 Input buffer and index for packets from HIL bus. 
 four counts per packet 
 Raw device info records from HIL bus, see hil.h for fields. 
 DID byte and IDD record 
 RSC record 
 EXD record 
 RNM record + NULL term. 
 Extra device details needed for pointing devices. 
 These occur when device isn't present 
 Anything else we'd like to know about. 
 8 or 16bit resolution 
 TODO: proximity == touch? 
 just in case somebody is waiting 
 Records of N 4-byte hil_packets must terminate with a command. 
 Swap buttons 2 and 3 
 Get device info.  MLC driver supplies devidstatusetc. 
 TODO: get from kbd->rsc 
 TODO: get from kbd->rsc 
 Enable Keyswitch Autorepeat 1 
 No need to wait for completion 
 SPDX-License-Identifier: GPL-2.0-only
  driversinputkeyboardjornada680_kbd.c
  HP Jornada 620660680690 scan keyboard platform driver
   Copyright (C) 2007  Kristoffer Ericson <Kristoffer.Ericson@gmail.com>
  Based on hp680_keyb.c
   Copyright (C) 2006 Paul Mundt
   Copyright (C) 2005 Andriy Skulysh
  Split from driversinputkeyboardhp600_keyb.c
   Copyright (C) 2000 Yaegashi Takeshi (hp6xx kbd scan routine and translation table)
   Copyright (C) 2000 Niibe Yutaka (HP620 Keyb translation table)
 PTD1 	KEY_CAPSLOCK, KEY_MACRO, KEY_LEFTCTRL, 0, KEY_ESC, KEY_KP5, 0, 0,			
  9  -> 16  
 PTD5 	KEY_SLASH, KEY_APOSTROPHE, KEY_ENTER, 0, KEY_Z, 0, 0, 0,				
  25 -> 32  
 PTD7 	KEY_KP2, KEY_KP6, KEY_KP3, 0, 0, 0, 0, 0,						
  41 -> 48  
 PTE0 	KEY_KATAKANA, KEY_KP0, KEY_GRAVE, 0, KEY_FINANCE, 0, 0, 0,				
  57 -> 64  
 PTE1 	KEY_SEMICOLON, KEY_RIGHTBRACE, KEY_BACKSLASH, 0, KEY_A, 0, 0, 0,			
  73 -> 80  
 PTE3 	KEY_KP8, KEY_LEFTMETA, KEY_RIGHTSHIFT, 0, KEY_TAB, 0, 0, 0,				
  89 -> 96  
 PTE6 	KEY_P, KEY_LEFTBRACE, KEY_BACKSPACE, 0, KEY_Q, 0, 0, 0,					
 105 -> 112 
 PTE7 	KEY_0, KEY_MINUS, KEY_EQUAL, 0, KEY_1, 0, 0, 0,						
 121 -> 128 
  	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 = UINT16_t 
 PTD1 PD(1) 
 PTD5 PD(5) 
 PTD7 PD(7) 
 PTE0 PE(0) 
 PTE1 PE(1) 
 PTE3 PE(3) 
 PTE6 PE(6) 
 PTE7 PE(7) 
	 PD(x) :
	1.   0xcc0c & (1~(1 << (2(x)+1)))))
	 PE(x) :
	1.   0xcc0c & 0xffff
 PD(1) 
 PD(5) 
 PD(7) 
 PE(0) 
 PE(1) 
 PE(3) 
 PE(6) 
 PE(7) 
 Save these control reg bits 
 disable output for all but the one we want to scan 
 Get scanline row 
 Read data 
 Scan no lines 
 Enable all scanlines 
 Ignore extra keys and events 
 msec );
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2007 Google, Inc.
  Copyright (C) 2012 Intel, Inc.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (C) 2004 by Jan-Benedict Glaw <jbglaw@lug-owl.de>
  LK keyboard driver for Linux, based on sunkbd.c (C) by Vojtech Pavlik
  DEC LK201 and LK401 keyboard driver for Linux (primary for DECstations
  and VAXstations, but can also be used on any standard RS232 with an
  adaptor).
  DISCLAIMER: This works for _me_. If you break anything by using the
  information given below, I will _not_ be liable!
  RJ10 pinout:		To DE9:		Or DB25:
 	1 - RxD <---->	Pin 3 (TxD) <->	Pin 2 (TxD)
 	2 - GND <---->	Pin 5 (GND) <->	Pin 7 (GND)
 	4 - TxD <---->	Pin 2 (RxD) <->	Pin 3 (RxD)
 	3 - +12V (from HDD drive connector), DON'T connect to DE9 or DB25!!!
  Pin numbers for DE9 and DB25 are noted on the plug (quite small:). For
  RJ10, it's like this:
       __=__	Hold the plug in front of you, cable downwards,
      ___|	nose is hidden behind the plug. Now, pin 1 is at
     |1234||	the left side, pin 4 at the right and 2 and 3 are
     |IIII||	in between, of course:)
     |    ||
     |____|
       ||	So the adaptor consists of three connected cables
       ||	for data transmission (RxD and TxD) and signal ground.
 		Additionally, you have to get +12V from somewhere.
  Most easily, you'll get that from a floppy or HDD power connector.
  It's the yellow cable there (black is ground and red is +5V).
  The keyboard and all the commands it understands are documented in
  "VCB02 Video Subsystem - Technical Manual", EK-104AA-TM-001. This
  document is LK201 specific, but LK401 is mostly compatible. It comes
  up in LK201 mode and doesn't report any of the additional keys it
  has. These need to be switched on with the LK_CMD_ENABLE_LK401
  command. You'll find this document (scanned .pdf file) on MANX,
  a search engine specific to DEC documentation. Try
  http:www.vt100.netmanxdetails?pn=EK-104AA-TM-001;id=21;cp=1
  Known parameters:
 	bell_volume
 	keyclick_volume
 	ctrlclick_volume
  Please notice that there's not yet an API to set these at runtime.
 % 
 % 
 % 
 LED control 
 Mode control 
 Misc commands 
 Misc responses from keyboard 
 Right Compose, that is. 
 Same as KEY_RIGHTSHIFT on LK201 
 Left Compose, that is. 
  Per-keyboard data
  Responses from the keyboard and mapping back to their names.
 LKKBD_DEBUG 
  Calculate volume parameter byte for a given volume.
 12.5 
 37.5 
 62.5 
 This is the default volume 
 87.5 
	
	  Reset setting for Compose key. Let Compose be KEY_COMPOSE.
	
	  Print keyboard name and modify Compose=Alt on user's request.
	
	  Report errors during keyboard boot-up.
 All okay 
	
	  Try to hint user if there's a stuck key.
  lkkbd_interrupt() is called by the low level driver when a character
  is received.
  lkkbd_event() handles events from the input module.
  lkkbd_reinit() sets leds and beeps to a state the computer remembers they
  were in.
 Ask for ID 
 Reset parameters 
 Set LEDs 
	
	  Try to activate extended LK401 mode. This command will
	  only work with a LK401 keyboard and grants access to
	  LAlt, RAlt, RCompose and RShift.
 Set all keys to UPDOWN mode 
 Enable bell and set volume 
 Enabledisable keyclick (and possibly set volume) 
 Sound the bell if needed 
  lkkbd_connect() probes for a LK keyboard and fills the necessary structures.
  lkkbd_disconnect() unregisters and closes behind us.
 SPDX-License-Identifier: GPL-2.0-only
  STMicroelectronics Key Scanning driver
  Copyright (c) 2014 STMicroelectonics Ltd.
  Author: Stuart Menefy <stuart.menefy@st.com>
  Based on sh_keysc.c, copyright 2008 Magnus Damm
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 2000 Justin Cormack
  Newton keyboard driver for Linux
 invalid scan codes are probably the init sequence, so we ignore them 
 end of init sequence 
 SPDX-License-Identifier: GPL-2.0-or-later
  Touchkey driver for MELFAS MCS50005080 controller
  Copyright (C) 2010 Samsung Electronics Co.Ltd
  Author: HeungJun Kim <riverful.kim@samsung.com>
  Author: Joonyoung Shim <jy0922.shim@samsung.com>
 MCS5000 Touchkey 
 MCS5080 Touchkey 
 key_val is 0 when released, so we should use key_val of press. 
 Disable the work 
 Finally turn off the power 
 Enable the device first 
 Enable irq again 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) ST-Ericsson SA 2010
  Author: Rabin Vincent <rabin.vincent@stericsson.com> for ST-Ericsson
 These are at the same addresses in all STMPE variants 
 Make sure it covers all cases above 
  struct stmpe_keypad_variant - model-specific attributes
  @auto_increment: whether the KPC_DATA_BYTE register address
 		    auto-increments on multiple read
  @set_pullup: whether the pins need to have their pull-ups set
  @num_data: number of data bytes
  @num_normal_data: number of normal keys' data bytes
  @max_cols: maximum number of columns supported
  @max_rows: maximum number of rows supported
  @col_gpios: bitmask of gpios which can be used for columns
  @row_gpios: bitmask of gpios which can be used for rows
 GPIO 0 - 7 
 GPIO 8 - 15 
 GPIO 0 - 7
 GPIO 8-14, 16-20 
 GPIO 0 - 7
 GPIO 8-14, 16-20 
  struct stmpe_keypad - STMPE keypad state container
  @stmpe: pointer to parent STMPE device
  @input: spawned input device
  @variant: STMPE variant
  @debounce_ms: debounce interval, in ms.  Maximum is
 		 %STMPE_KEYPAD_MAX_DEBOUNCE.
  @scan_count: number of key scanning cycles to confirm key data.
 		Maximum is %STMPE_KEYPAD_MAX_SCAN_COUNT.
  @no_autorepeat: disable key autorepeat
  @rows: bitmask for the rows
  @cols: bitmask for the columns
  @keymap: the keymap
	
	  Figure out which pins need to be set to the keypad alternate
	  function.
	 
	  {cols,rows}_gpios are bitmasks of which pins on the chip can be used
	  for the keypad.
	 
	  keypad->{cols,rows} are a bitmask of which pins (of the ones useable
	  for the keypad) are used on the board.
	
	  On STMPE24xx, set pin bias to pull-up on all keypad input
	  pins (columns), this incidentally happen to be maximum 8 pins
	  and placed at GPIO0-7 so only the LSB of the pull up register
	  ever needs to be written.
 Do not touch unused pins, may be used for GPIO 
 SPDX-License-Identifier: GPL-2.0
   Microchip AT42QT1050 QTouch Sensor Controller
   Copyright (C) 2019 Pengutronix, Marco Felsch <kernel@pengutronix.de>
   Base on AT42QT1070 driver by:
   Bo Shen <voice.shen@atmel.com>
   Copyright (C) 2011 Atmel
 Chip ID 
 Firmware version 
 Detection status 
 Key status 
 Key Signals 
 Reference data 
 Negative threshold level 
 Pulse  Scale  
 Detection integrator counter  AKS 
 Charge Share Delay 
 Low Power Mode 
 Calibration and Reset 
 Read Chip ID 
 Read firmware version 
 Read the detected status register, thus clearing interrupt 
 Read which key changed, keys are not continuous 
 Report registered keys only 
 Disable all keys and enable only the specified ones 
 Keep KEY_RESERVED keys off 
 Required properties 
 Optional properties 
 Check basic functionality 
 Identify the qt1050 chip 
 Get pdata 
 Add the keycode 
 Trigger re-calibration 
 Soft reset to set defaults 
 Set pdata 
 Clear #CHANGE line 
 Register the input device 
	
	  Set measurement interval to 1s (125 x 8ms) if wakeup is allowed
	  else turn off. The 1s interval seems to be a good compromise between
	  low power and response time.
 Set measurement interval back to 16ms (2 x 8ms) 
 SPDX-License-Identifier: GPL-2.0-only
  LM8333 keypad driver
  Copyright (C) 2012 Wolfram Sang, Pengutronix <kernel@pengutronix.de>
 The accessors try twice because the first access may be needed for wakeup 
 SPDX-License-Identifier: GPL-2.0
  Driver for Phoenix RC Flight Controller Adapter
  Copyright (C) 2018 Marcus Folkesson <marcus.folkesson@gmail.com>
 success 
 this urb is timing out 
 this urb is terminated, clean up 
 Resubmit to fetch new fresh URBs 
	
	  Locate the endpoint information. This device only has an
	  interrupt endpoint.
 All driver resources are devm-managed. 
 SPDX-License-Identifier: GPL-2.0-or-later
  X-Box gamepad driver
  Copyright (c) 2002 Marko Friedemann <mfr@bmx-chemnitz.de>
                2004 Oliver Schwartz <Oliver.Schwartz@gmx.de>,
                     Steven Toth <steve@toth.demon.co.uk>,
                     Franz Lehner <franz@caos.at>,
                     Ivan Hawkes <blackhawk@ivanhawkes.com>
                2005 Dominic Cerquetti <binary1230@yahoo.com>
                2006 Adam Buchbinder <adam.buchbinder@gmail.com>
                2007 Jan Kratochvil <honza@jikos.cz>
                2010 Christoph Fritz <chf.fritz@googlemail.com>
  This driver is based on:
   - information from     http:euc.jpperiphsxbox-controller.ja.html
   - the iForce driver    driverscharjoystickiforce.c
   - the skeleton-driver  driversusbusb-skeleton.c
   - Xbox 360 information http:www.free60.orgwikiGamepad
   - Xbox One information https:github.comquantusxbox-one-controller-protocol
  Thanks to:
   - ITO Takayuki for providing essential xpad information on his website
   - Vojtech Pavlik     - iforce driver  input subsystem
   - Greg Kroah-Hartman - usb-skeleton driver
   - XBOX Linux project - extra USB id's
   - Pekka Pöyry (quantus) - Xbox One controller reverse engineering
  TODO:
   - fine tune axes (especially trigger axes)
   - fix "analog" buttons (reported as digital now)
   - get rumble working
   - need USB IDs for other dance pads
  History:
  2002-06-27 - 0.0.1 : first version, just said "XBOX HID controller"
  2002-07-02 - 0.0.2 : basic working version
   - all axes and 9 of the 10 buttons work (german InterAct device)
   - the black button does not work
  2002-07-14 - 0.0.3 : rework by Vojtech Pavlik
   - indentation fixes
   - usb + input init sequence fixes
  2002-07-16 - 0.0.4 : minor changes, merge with Vojtech's v0.0.3
   - verified the lack of HID and report descriptors
   - verified that ALL buttons WORK
   - fixed d-pad to axes mapping
  2002-07-17 - 0.0.5 : simplified d-pad handling
  2004-10-02 - 0.0.6 : DDR pad support
   - borrowed from the XBOX linux kernel
   - USB id's for commonly used dance pads are present
   - dance pads will map D-PAD to buttons, not axes
   - pass the module paramater 'dpad_to_buttons' to force
     the D-PAD to map to buttons if your pad is not detected
  Later changes can be tracked in SCM.
  xbox d-pads should map to buttons, as is required for DDR pads
  but we map them to axes when possible to simplify things
 buttons shared with xbox and xbox360 
 "analog" buttons 
 startbacksticks 
 terminating entry 
 original xbox controllers only 
 "analog" buttons 
 terminating entry 
 used when dpad is mapped to buttons 
 d-pad left, right 
 d-pad up, down 
 terminating entry 
 used when triggers are mapped to buttons 
 triggers leftright 
 buttons for x360 controller 
 Button LBRB 
 The big X button 
 left stick 
 right stick 
 terminating entry 
 used when dpad is mapped to axes 
 d-pad axes 
 terminating entry 
 used when triggers are mapped to axes 
 triggers leftright 
  Xbox 360 has a vendor-specific class, so we cannot match it with only
  USB_INTERFACE_INFO (also specifically refused by USB subsystem), so we
  match against vendor id as well. Wired Xbox 360 devices have protocol 1,
  wireless controllers have protocol 129.
 The Xbox One controller uses subclass 71 and protocol 208. 
 X-Box USB-IF not approved class 
 GPD Win 2 Controller 
 Thrustmaster X-Box 360 controllers 
 Microsoft X-Box 360 controllers 
 Microsoft X-Box One controllers 
 Logitech X-Box 360 style controllers 
 Elecom JC-U3613M 
 Saitek P3600 
 Mad Catz X-Box 360 controllers 
 Mad Catz Beat Pad 
 Mad Catz FightStick TE 2 
 Mad Catz GamePad 
 0x0e6f X-Box 360 controllers 
 0x0e6f X-Box One controllers 
 Hori Controllers 
 Hori Controllers 
 SteelSeries Controllers 
 Nacon GC100XF 
 Ardwiino Controllers 
 X-Box 360 dance pads 
 RedOctane X-Box 360 controllers 
 BigBen Interactive Controllers 
 Razer Sabertooth 
 Razer Wildcat 
 Numark X-Box 360 controllers 
 Joytech X-Box 360 controllers 
 Razer Onza 
 Amazon controllers 
 Harminix Rock Band Guitar and Drums 
 PowerA Controllers 
 PowerA Controllers 
 PowerA Controllers 
 PowerA Controllers 
 Hyperkin Duke X-Box One pad 
 GameSir Controllers 
 Nacon GC-100 
  This packet is required for all Xbox One pads with 2015
  or later firmware installed (or present from the factory).
  This packet is required for Xbox One S (0x045e:0x02ea)
  and Xbox One Elite Series 2 (0x045e:0x0b00) pads to
  initialize the controller that was previously used in
  Bluetooth mode.
  This packet is required for the Titanfall 2 Xbox One pads
  (0x0e6f:0x0165) to finish initialization and for Hori pads
  (0x0f0d:0x0067) to make the analog sticks work.
  This packet is required for most (all?) of the PDP pads to start
  sending input reports. These pads include: (0x0e6f:0x02ab),
  (0x0e6f:0x02a4), (0x0e6f:0x02a6).
  This packet is required for most (all?) of the PDP pads to start
  sending input reports. These pads include: (0x0e6f:0x02ab),
  (0x0e6f:0x02a4), (0x0e6f:0x02a6).
  A specific rumble packet is required for some PowerA pads to start
  sending input reports. One of those pads is (0x24c6:0x543a).
  A rumble packet with zero FF intensity will immediately
  terminate the rumbling required to init PowerA pads.
  This should happen fast enough that the motors don't
  spin up to enough speed to actually vibrate the gamepad.
  This specifies the selection of init packets that a gamepad
  will be sent on init and the order in which they will be
  sent. The correct sequence number will be added when the
  packet is going to be sent.
 input device interface 
 usb device 
 usb interface 
 urb for interrupt in report 
 input data 
 urb for interrupt out report 
 we must not use an active URB 
 serial number for xbox one protocol 
 output data 
 physical device path 
 map d-pad to buttons or to axes 
 type of xbox device 
 the order x360 pads were attached 
 name of the device 
 initremove device from callback 
 	xpad_process_packet
 	Completes a request by converting the data into events for the
 	input subsystem.
 	The used report descriptor was taken from ITO Takayukis website:
 	 http:euc.jpperiphsxbox-controller.ja.html
 left stick 
 right stick 
 triggers leftright 
 digital pad 
 dpad as buttons (left, right, up, down) 
 startback buttons and stick press leftright 
 "analog" buttons A, B, X, Y 
 "analog" buttons black, white 
 	xpad360_process_packet
 	Completes a request by converting the data into events for the
 	input subsystem. It is version for xbox 360 controller
 	The used report descriptor was taken from:
 		http:www.free60.orgwikiGamepad
 valid pad data 
 digital pad 
 dpad as buttons (left, right, up, down) 
	
	  This should be a simple else block. However historically
	  xbox360w has mapped DPAD to buttons while xbox360 did not. This
	  made no sense, but now we can not just switch back and have to
	  support both behaviors.
 startback buttons 
 stick press leftright 
 buttons A,B,X,Y,TL,TR and MODE 
 left stick 
 right stick 
 triggers leftright 
 complain only, not much else we can do here 
		
		  Now that we are sure xpad360w_process_packet is not
		  using input device we can get rid of it.
  xpad360w_process_packet
  Completes a request by converting the data into events for the
  input subsystem. It is version for xbox 360 wireless controller.
  Byte.Bit
  00.1 - Status change: The controller or headset has connecteddisconnected
                        Bits 01.7 and 01.6 are valid
  01.7 - Controller present
  01.6 - Headset present
  01.1 - Pad state (Bytes 4+) valid
 Presence change 
 Valid pad data 
 	xpadone_process_packet
 	Completes a request by converting the data into events for the
 	input subsystem. This version is for the Xbox One controller.
 	The report format was gleaned from
 	https:github.comkylelemonsxboxblobmasterxbox.go
 the xbox button has its own special report 
		
		  The Xbox One S controller requires these reports to be
		  acked otherwise it continues sending them forever and
		  won't report further mode button events.
 check invalid packet 
 menuview buttons 
 buttons A,B,X,Y 
 digital pad 
 dpad as buttons (left, right, up, down) 
 TLTR 
 stick press leftright 
 left stick 
 right stick 
 triggers leftright 
 success 
 this urb is terminated, clean up 
 Callers must hold xpad->odata_lock spinlock 
 Perform initialization sequence for Xbox One pads that require it 
 This packet applies to our device, so prepare to send it 
 Update packet with current sequence number 
 Callers must hold xpad->odata_lock spinlock 
 We may have init packets to send before we can send user commands 
 Callers must hold xpad->odata_lock spinlock 
 success 
 this urb is terminated, clean up 
 Reset the sequence so we send out presence first 
	
	  Begin the init sequence by attempting to send a packet.
	  We will cycle through the init packet sequence before
	  sending any packets from the output ring.
 Reset the sequence so we send out the ack now 
 left actuator 
 right actuator 
 left actuator? 
 right actuator? 
 activate rumble 
 left actuator 
 right actuator 
 on period 
 off period 
 repeat count 
  set the LEDs on Xbox360  Wireless Controllers
  @param command
   0: off
   1: all blink, then previous setting
   2: 1top-left blink, then on
   3: 2top-right blink, then on
   4: 3bottom-left blink, then on
   5: 4bottom-right blink, then on
   6: 1top-left on
   7: 2top-right on
   8: 3bottom-left on
   9: 4bottom-right on
  10: rotate
  11: blink, based on previous setting
  12: slow blink, based on previous setting
  13: rotate with two lights
  14: persistent slow all blink
  15: blink once, then previous setting
  Light up the segment corresponding to the pad number on
  Xbox 360 Controllers.
 Reset the sequence so we send out poweroff now 
	
	  Send presence packet.
	  This will force the controller to resend connection packets.
	  This is useful in the case we activate the module after the
	  adapter has been plugged in, as it won't automatically
	  send us info about the controllers.
 Make sure we are done with presence work if it was scheduled 
 the two sticks 
 the triggers (if mapped to axes) 
 the d-pad (only if dpad is mapped to axes 
 x360w controllers and the receiver have different ids 
 set up axes 
 set up standard buttons 
 set up model-specific ones 
	
	  This should be a simple else block. However historically
	  xbox360w has mapped DPAD to buttons while xbox360 did not. This
	  made no sense, but now we can not just switch back and have to
	  support both behaviors.
		
		  The Xbox One controller lists three interfaces all with the
		  same interface class, subclass and protocol. Differentiate by
		  interface number.
		
		  Submit the int URB immediately rather than waiting for open
		  because we get status messages from the device whether
		  or not any controllers are attached.  In fact, it's
		  exactly the message that a controller has arrived that
		  we're waiting for.
		
		  Wireless controllers require RESET_RESUME to work properly
		  after suspend. Ideally this quirk should be in usb core
		  quirk list, but we have too many vendors producing these
		  controllers and we'd need to maintain 2 identical lists
		  here in this driver and in usb core.
	
	  Now that both input device and LED device are gone we can
	  stop output URB.
		
		  Wireless controllers always listen to input so
		  they are notified when controller shows up
		  or goes away.
		
		  The wireless adapter is going off now, so the
		  gamepads are going to become disconnected.
		  Unless explicitly disabled, power them down
		  so they don't just sit there flashing.
			
			  Even if there are no users, we'll send Xbox One pads
			  the startup sequence so they don't sit there and
			  blink until somebody opens the input device again.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 2001 Vojtech Pavlik
  Guillemot Digital Interface Protocol driver for Linux
 600 us 
 60 us 
 17 bytes 
  guillemot_read_packet() reads Guillemot joystick data.
  guillemot_poll() reads and analyzes Guillemot joystick data.
  guillemot_open() is a callback from the input open routine.
  guillemot_close() is a callback from the input close routine.
  guillemot_connect() probes for Guillemot joysticks.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1999-2001 Vojtech Pavlik
   Based on the work of:
 	David Thompson
  SpaceTec SpaceOrb 360 and Avenger 6dof controller driver for Linux
  Constants.
  Per-Orb data.
  spaceorb_process_packet() decodes packets the driver receives from the
  SpaceOrb.
 Reset packet 
 Ball + button data 
 Button data 
 Error packet 
  spaceorb_disconnect() is the opposite of spaceorb_connect()
  spaceorb_connect() is the routine that is called when someone adds a
  new serio device that supports SpaceOrbAvenger protocol and registers
  it as an input device.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1998-2005 Vojtech Pavlik
  Logitech ADI joystick family driver for Linux
  Times, array sizes, flags, ids.
 Trigger to packet timeout [200us] 
 Single bit timeout [40us] 
 Delay after init packet [10ms] 
 Delay after data packet [4ms] 
  Names, buttons, axes ...
  Hat to axis conversion arrays.
  Per-port information.
  adi_read_packet() reads a Logitech ADI packet.
  adi_move_bits() detects a possible 2-stream mode, and moves
  the bits accordingly.
  adi_get_bits() gathers bits from the data packet.
  adi_decode() decodes Logitech joystick data into input events.
  adi_read() reads the data packet and decodes it.
  adi_poll() repeatedly polls the Logitech joysticks.
  adi_open() is a callback from the input open routine.
  adi_close() is a callback from the input close routine.
  adi_init_digital() sends a trigger & delay sequence
  to reset and initialize a Logitech joystick into digital mode.
 It looks like mdelay() is off by approx 1.4% 
 Minimum ID packet length 
  adi_connect() probes for Logitech ADI joysticks.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1996-2001 Vojtech Pavlik
  Analog joystick and gamepad driver for Linux
  Option parsing.
  Times, feature definitions.
 3 ms 
 2  loop 
 200 us 
 2000 us 
 2  refresh 
 8 times 
 2 bit more 
 36 umsloop 
  analog_decode() decodes analog joystick data and reports input events.
  analog_cooked_read() reads analog joystick data.
  analog_poll() repeatedly polls the Analog joysticks.
  analog_open() is a callback from the input open routine.
  analog_close() is a callback from the input close routine.
  analog_calibrate_timer() calibrates the timer and computes loop
  and timeout values for a joystick port.
  analog_name() constructs a name for an analog joystick.
  analog_init_device()
  analog_init_devices() sets up device-specific values and registers the input devices.
 FIXME !!! - need to specify options for different ports 
 FIXME - more than one port 
 FIXME - more than one port 
  The gameport device structure.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1998-2001 Vojtech Pavlik
    Based on the work of:
 	Trystan Larey-Williams
  ThrustMaster DirectConnect (BSP) joystick family driver for Linux
 600 us 
 60 us 
  tmdc_read_packet() reads a ThrustMaster packet.
 Start bit 
 Stop bit 
 Data bit 
  tmdc_poll() reads and analyzes ThrustMaster joystick data.
 empty ;
  tmdc_probe() probes for ThrustMaster type joysticks.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1999-2001 Vojtech Pavlik
  Creative Labs Blaster GamePad Cobra driver for Linux
 45 us max wait for first strobe 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1999-2001 Vojtech Pavlik
   Based on the work of:
 	David Thompson
 	Joseph Krahn
  SpaceTec SpaceBall 200330034000 FLX driver for Linux
  Constants.
  Per-Ball data.
  spaceball_process_packet() decodes packets the driver receives from the
  SpaceBall.
 Ball data 
 Button data 
 Advanced button data 
 Device error 
 Bad command packet 
  Spaceball 4000 FLX packets all start with a one letter packet-type decriptor,
  and end in 0x0d. It uses '^' as an escape for CR, XOFF and XON characters which
  can occur in the axis values.
  spaceball_disconnect() is the opposite of spaceball_connect()
  spaceball_connect() is the routine that is called when someone adds a
  new serio device that supports Spaceball protocol and registers it as
  an input device.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 2000-2001 Vojtech Pavlik
   Copyright (c) 2000 Mark Fletcher
  Gravis Stinger gamepad driver for Linux
  Constants.
  Per-Stinger data.
  stinger_process_packet() decodes packets the driver receives from the
  Stinger. It updates the data accordingly.
  stinger_interrupt() is called by the low level driver when characters
  are ready for us. We then buffer them for further processing, or call the
  packet processing routine.
 All Stinger packets are 4 bytes 
  stinger_disconnect() is the opposite of stinger_connect()
  stinger_connect() is the routine that is called when someone adds a
  new serio device that supports Stinger protocol and registers it as
  an input device.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0-or-later
  PlayStation 12 joypads via SPI interface Driver
  Copyright (C) 2017 Tomohiro Yoshidomi <sylph23k@gmail.com>
  PlayStation 12 joypad's plug (not socket)
   123 456 789
  (...|...|...)
  1: DAT -> MISO (pullup with 1k owm to 3.3V)
  2: CMD -> MOSI
  3: 9V (for motor, if not use N.C.)
  4: GND
  5: 3.3V
  6: Attention -> CS(SS)
  7: SCK -> SCK
  8: N.C.
  9: ACK -> N.C.
 PlayStation 12 joypad command and response are LSBFIRST. 
 	0x01, 0x42, 0x00, 0x00, 0x00,
 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	0x01, 0x43, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 
	0x01, 0x43, 0x00, 0x00, 0x5A, 0x5A, 0x5A, 0x5A, 0x5A 
	0x01, 0x4D, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF 
 CONFIG_JOYSTICK_PSXPAD_SPI_FF 
 CONFIG_JOYSTICK_PSXPAD_SPI_FF 
 0x73 : analog 1 
 button data is inverted 
 0x41 : digital 
 button data is inverted 
 input poll device settings 
 input device settings 
 keyvalue map settings 
 SPI settings 
 (PlayStation 12 joypad might be possible works 250kHz500kHz) 
 pad settings 
 poll interval is about 60fps 
 register input poll device 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1996-2001 Vojtech Pavlik
  This is just a very simple driver that can dump the data
  out of the joystick port into the syslog ...
 all entries 
 one entry each 
 10 ms 
  Dump data.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 2001 Arndt Schoenewald
   Copyright (c) 2000-2001 Vojtech Pavlik
   Copyright (c) 2000 Mark Fletcher
   Sponsored by Quelltext AG (http:www.quelltext-ag.de), Dortmund, Germany
  Driver to use Handykey's Twiddler (the first edition, i.e. the one with
  the RS232 interface) as a joystick under Linux
  The Twiddler is a one-handed chording keyboard featuring twelve buttons on
  the front, six buttons on the top, and a built-in tilt sensor. The buttons
  on the front, which are grouped as four rows of three buttons, are pressed
  by the four fingers (this implies only one button per row can be held down
  at the same time) and the buttons on the top are for the thumb. The tilt
  sensor delivers X and Y axis data depending on how the Twiddler is held.
  Additional information can be found at http:www.handykey.com.
  This driver does not use the Twiddler for its intended purpose, i.e. as
  a chording keyboard, but as a joystick: pressing and releasing a button
  immediately sends a corresponding button event, and tilting it generates
  corresponding ABS_X and ABS_Y events. This turns the Twiddler into a game
  controller with amazing 18 buttons :-)
  Note: The Twiddler2 (the successor of the Twiddler that connects directly
  to the PS2 keyboard and mouse ports) is NOT supported by this driver!
  For questions or feedback regarding this driver module please contact:
  Arndt Schoenewald <arndt@quelltext.com>
  Constants.
  Per-Twiddler data.
  twidjoy_process_packet() decodes packets the driver receives from the
  Twiddler. It updates the data accordingly.
  twidjoy_interrupt() is called by the low level driver when characters
  are ready for us. We then buffer them for further processing, or call the
  packet processing routine.
	 All Twiddler packets are 5 bytes. The fact that the first byte
	  has a MSB of 0 and all other bytes have a MSB of 1 can be used
 this byte starts a new packet 
 wrong MSB -- ignore this byte 
  twidjoy_disconnect() is the opposite of twidjoy_connect()
  twidjoy_connect() is the routine that is called when someone adds a
  new serio device. It looks for the Twiddler, and if found, registers
  it as an input device.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0-only
   Parallel port to Walkera WK-0701 TX joystick
   Copyright (c) 2008 Peter Popovec
   More about driver:  <file:Documentationinputdeviceswalkera0701.rst>
  For now, only one device is supported, if somebody need more devices, code
  can be expanded, one struct walkera_dev per device must be allocated and
  set up by walkera0701_connect (release of device by walkera0701_disconnect)
 sign 
 sign 
 sign 
 sign 
 sign 
 sign 
sign 
sign 
 falling edge, prepare to BIN value calculation 
 cancel timer, if in handler or active do resync 
 full frame 
 new frame sync 
 overtiping is safe, pulsetime < s32.. 
 frame sync .. 
 TODO what id vendorproductversion ? 
 SPDX-License-Identifier: GPL-2.0-only
   Driver for the Gravis Grip Multiport, a gamepad "hub" that
   connects up to four 9-pin digital gamepadsjoysticks.
   Driver tested on SMP and UP kernel versions 2.4.18-4 and 2.4.18-5.
   Thanks to Chris Gassib for helpful advice.
   Copyright (c)      2002 Brian Bonnlander, Bill Soudan
   Copyright (c) 1998-2000 Vojtech Pavlik
  Grip multiport state
 individual gamepad states 
 has the state been updated? 
  Multiport packet interpretation
 packet is full                        
 3 bits per gameport read              
 1 bit per gameport read               
 multiport wants to send more          
 multiport done sending                
  Packet status code interpretation
 Got a packet                           
 Used 3 data bits per gameport read     
 Multiport physical slot status changed 
 Multiport is done sending packets      
 Try again later to get packet          
 Force multiport to resend all packets  
  Gamepad configuration data.  Other 9-pin digital joystick devices
  may work with the multiport, so this may not be an exhaustive list!
  Commodore 64 joystick remains untested.
  2 ms 
 Maps multiport directional values to X,Y axis values (each axis encoded in 3 bits) 
  Returns whether an odd or even number of bits are on in pkt.
  Poll gameport; return true if all bits set in 'onbits' are on and
  all bits set in 'offbits' are off.
  Gets a 28-bit packet from the multiport.
  After getting a packet successfully, commands encoded by sendcode may
  be sent to the multiport.
  The multiport clock value is reflected in gameport bit B4.
  Returns a packet status code indicating whether packet is valid, the transfer
  mode, and any error conditions.
  sendflags:      current IO status
  sendcode:   data to send to the multiport if sendflags is nonzero
 raw data from gameport 
 packet data bits from raw_data 
 packet temporary storage 
 num packet bits per gameport read 
 used for port value sanity check 
 Gameport bits B0, B4, B5 should first be off, then B4 should come on. 
 Demux B4, B5 
 B4, B5 off 
 Determine packet transfer mode and prepare for packet construction. 
 3 data bitsread 
 Compare B4-B7 before & after trigger 
 1 data bitread 
 Construct a packet.  Final data bits must be zero. 
 If 3 bitsread used, drop from 30 bits to 28. 
 Acknowledge packet receipt 
 Return if we just wanted the packet or multiport wants to send more 
 Multiport is done sending packets and is ready to receive data 
 Trigger gameport based on bits in sendcode 
  Disables and restores interrupts for mp_io(), which does the actual IO.
  Puts multiport into digital mode.  Multiport LED turns green.
  Returns true if a valid digital packet was received, false otherwise.
 Send magic sequence 
 Wait for multiport to settle 
 Reset multiport and try getting a packet 
  Packet structure: B0-B15   => gamepad state
                    B16-B20  => gamepad device type
                    B21-B24  => multiport slot index (1-4)
  Known device types: 0x1f (grip pad), 0x0 (no device).  Others may exist.
  Returns the packet status.
 Get a packet and check for validity 
 Ignore non-gamepad packets, e.g. multiport hardware version 
	
	  Handle "reset" packets, which occur at startup, and when gamepads
	  are removed or plugged in.  May contain configuration of a new gamepad.
 Interpret a grip pad packet 
 eight way directional value 
 Handle non-grip device codes.  For now, just print diagnostics. 
  Returns true if all multiport slot states appear valid.
 Return true if no active slot but multiport sent all its data 
 Return false if invalid device code received 
  Returns whether the multiport was placed into digital mode and
  able to communicate its state successfully.
 Get packets, store multiport state, and check state's validity 
  Reports joystick state to the linux input layer.
 Store button states with linux input driver 
 Store axis states with linux driver 
 Tell the receiver of the events to process them 
  Get the multiport state.
  Called when a joystick device file is opened
  Called when a joystick device file is closed
  Tell the linux input layer about a newly plugged-in gamepad.
 report initial state, if any 
 nothing plugged in 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 2001 Vojtech Pavlik
   Based on the work of:
 	Toby Deshane
  InterAct digital gamepadjoystick driver for Linux
 400 us 
 40 us 
 32 bits 
 HammerHeadFX 
 ProPad 8 
  interact_read_packet() reads and InterAct joystick data.
  interact_poll() reads and analyzes InterAct joystick data.
  interact_open() is a callback from the input open routine.
  interact_close() is a callback from the input close routine.
  interact_connect() probes for InterAct joysticks.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1999-2001 Vojtech Pavlik
  Logitech WingMan Warrior joystick driver for Linux
  Constants.
  Per-Warrior data.
  warrior_process_packet() decodes packets the driver receives from the
  Warrior. It updates the data accordingly.
 Button data 
 XY-axis info->data 
 Throttle, spinner, hat info->data 
  warrior_interrupt() is called by the low level driver when characters
  are ready for us. We then buffer them for further processing, or call the
  packet processing routine.
  warrior_disconnect() is the opposite of warrior_connect()
  warrior_connect() is the routine that is called when someone adds a
  new serio device. It looks for the Warrior, and if found, registers
  it as an input device.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1998-2001 Vojtech Pavlik
  GravisKensington GrIP protocol joystick and gamepad driver for Linux
 200 us 
 64 us 
  grip_gpp_read_packet() reads a Gravis GamePad Pro packet.
  grip_xt_read_packet() reads a Gravis Xterminator packet.
  grip_timer() repeatedly polls the joysticks and generates events.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1998-2001 Vojtech Pavlik
  FP-Gaming Assassin 3D joystick driver for Linux
 600 us 
 80 us 
 403 bits 
 Assassin 3D 
 Panther 
 Panther OEM version 
 Panther XL 
  a3d_read_packet() reads an Assassin 3D packet.
  a3d_csum() computes checksum of triplet packet
  a3d_poll() reads and analyzes A3D joystick data.
  a3d_adc_cooked_read() copies the acis and button data to the
  callers arrays. It could do the read itself, but the caller could
  call this more than 50 times a second, which would use too much CPU.
  a3d_adc_open() is the gameport open routine. It refuses to serve
  any but cooked data.
  a3d_adc_close() is a callback from the input close routine.
  a3d_open() is a callback from the input open routine.
  a3d_close() is a callback from the input close routine.
  a3d_connect() probes for A3D joysticks.
 SPDX-License-Identifier: GPL-2.0
  Input driver for joysticks connected over ADC.
  Copyright (c) 2019-2020 Artur Rojek <contact@artur-rojek.eu>
			
			  Data is aligned to the sample size by IIO core.
			  Call `get_unaligned_xe16` to hide type casting.
 IIO_CPU 
 Count how many channels we got. NULL terminated. 
 SPDX-License-Identifier: GPL-2.0
  FS-iA6B iBus RC receiver driver
  This driver provides all 14 channels of the FlySky FS-ia6B RC receiver
  as analog values.
  Additionally, the channels can be converted to discrete switch values.
  By default, it is configured for the offical FS-i6 remote control.
  If you use a different hardware configuration, you can configure it
  using the `switch_config` parameter.
 Register switch configuration 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1998-2001 Vojtech Pavlik
  Genius Flight 2000 joystick driver for Linux
 The time we wait for the first bit [400 us] 
 The time we wait for the first bit [40 us] 
 Wait for everything to settle [4 ms] 
 Max number of triplets in a packet 
  Genius joystick ids ...
  gf2k_read_packet() reads a Genius Flight2000 packet.
  gf2k_trigger_seq() initializes a Genius Flight2000 joystick
  into digital mode.
  js_sw_get_bits() composes bits from the triplet buffer into a __u64.
  Parameter 'pos' is bit number inside packet where to start at, 'num' is number
  of bits to be read, 'shift' is offset in the resulting __u64 to start at, bits
  is number of bits per triplet.
  gf2k_poll() reads and analyzes Genius joystick data.
  gf2k_connect() probes for Genius id joysticks.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1998-2001 Vojtech Pavlik
  Driver for Amiga joysticks for Linuxm68k
 SPDX-License-Identifier: GPL-2.0-only
 	SEGA Dreamcast controller driver
 	Based on driversusbiforce.c
 	Copyright Yaegashi Takeshi, 2001
 	Adrian McMenamin, 2008 - 2009
 allow the controller to be used 
 SPDX-License-Identifier: GPL-2.0-or-later
  NES, SNES, N64, MultiSystem, PSX gamepad driver for Linux
   Copyright (c) 1999-2004	Vojtech Pavlik <vojtech@suse.cz>
   Copyright (c) 2004		Peter Nelson <rufus-kernel@hackish.org>
   Based on the work of:
 	Andree Borrmann		John Dahlstrom
 	David Kuder		Nathan Hand
 	Raphael Assenat
 see also gs_psx_delay parameter in PSX support section 
  N64 support.
 N64 bit length, not including stop bit 
 Length of encoded stop bit 
 Encoded stop bit 
 the request data command 
 delay between transmit request, and response ready (us) 
 delay between write segments (required for sound playback because of ISA DMA) 
 GC_N64_DWS > 24 is known to fail 
 power during write (transmit request) 
 power during read 
 output bits to the 4 pads 
 Reading the main axes of any N64 pad is known to fail if the corresponding bit 
 in GC_N64_OUT is pulled low on the output port (by any routine) for more 
 than 123 us 
 clock bits for read 
  Used for rumble code.
 Send encoded command 
 Send stop bit 
  gc_n64_read_packet() reads an N64 packet.
  Each pad uses one bit per byte. So all pads connected to this port
  are read in parallel.
  Request the pad to transmit data
  Wait for the pad response to be loaded into the 33-bit register
  of the adapter.
  Grab data (ignoring the last bit, which is a stop bit)
  We must wait 200 ms here for the controller to reinitialize before
  the next read request. No worries as long as gc_read is polled less
  frequently than this.
 select desired pin 
 Init Rumble - 0x03, 0x80, 0x01, (34)0x80 
 Now start or stop it - 0x03, 0xc0, 0zx1b, (32)0x010x00 
  NESSNES support.
 Delay between bits - 6us 
 The NES pads use 8 bits of data 
#define GC_SNES_LENGTH		12	 The SNES true length is 16, but the
#define GC_SNESMOUSE_LENGTH	32	 The SNES mouse uses 32 bits, the first
  gc_nes_read_packet() reads a NESSNES packet.
  Each pad uses one bit per byte. So all pads connected to
  this port are read in parallel.
			
			  The 4 unused bits from SNES controllers appear
			  to be ID bits so use them to make sure we are
			  dealing with a mouse.
			  gamepad is connected. This is important since
			  my SNES gamepad sends 1's for bits 16-31, which
			  cause the mouse pointer to quickly move to the
			  upper left corner of the screen.
  Multisystem joystick support
 Multi system joystick packet length is 5 
 One more bit for one more button 
  gc_multi_read_packet() reads a Multisystem joystick packet.
  PSX support
  See documentation at:
 	http:www.geocities.co.jpPlaytown2004psxps_eng.txt	
 	http:www.gamesx.comcontroldatapsxcontpsxcont.htm
 25 usec 
 talk to the controller in bits 
 the maximum number of bytes to read off the controller 
 Mouse 
 NegCon 
 Digital  Analog or Rumble in Digital mode  
 Analog in Analog mode  Rumble in Green mode 
 Rumble in Red mode 
 Pin 4 
 Pin 2 
 Pins 5-9 
 Pin 3 
 High nibble is device type 
 Low nibble is length in bytes2 
  gc_psx_command() writes 8bit command and reads 8bit data from
  the psx pad.
  gc_psx_read_packet() reads a whole psx packet and returns
  device identifier code.
 Select pad 
 Deselect, begin command 
 Access pad 
 Get device ids 
 Dump status 
 Find the longest pad 
 Read in all the data 
 Set id's to the real value 
			
			  For some reason if the extra axes are left unset
			  they drift.
			  for (i = 0; i < 4; i++)
				input_report_abs(dev, gc_psx_abs[i + 2], 128);
			  This needs to be debugged properly,
			  maybe fuzz processing needs to be done
			  in input_sync()
			 				 --vojtech
 not a pad, ignore 
  gc_timer() initiates reads of console pads data.
  N64 pads - must be read first, any read confuses them for 200 us
  NES and SNES pads or mouse
  Multi and Multi2 joysticks
  PSX controllers
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2010, 2011 Fabien Marteau <fabien.marteau@armadeus.com>
  Sponsored by ARMadeus Systems
  Driver for Austria Microsystems joysticks AS5011
  TODO:
 	- Power on the chip when open() and power down when close()
 	- Manage power mode
 registers 
 CTRL1 bits 
 CTRL2 bits 
 chip soft reset 
 write threshold 
 to free irq gpio in chip 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1999-2001 Vojtech Pavlik
   Based on the work of:
 	Andree Borrmann		Mats Sjövall
  Atari, Amstrad, Commodore, Amiga, Sega, etc. joystick driver for Linux
  Saturn controllers
  db9_saturn_write_sub() writes 2 bit data.
 DPP1 
 DPP2 
 DB9 
  gc_saturn_read_sub() reads 4 bit data.
 DPP 
 DB9 
  db9_saturn_read_analog() sends clock and reads 8 bit data.
  db9_saturn_read_packet() reads whole saturn packet at connector
  and returns device identifier code.
 1111  no pad 
 ?100 : digital controller 
 data[2] |= db9_saturn_read_sub(port, type); 
 0001 : analog controller or multitap 
 read analog controller 
 read multitap 
 read each pad 
 0000 : mouse 
  db9_saturn_report() analyzes packet and reports.
 multi controller (analog 4 axis) 
 mission stick (analog 3 axis) 
 racing controller (analog 1 axis) 
 saturn keyboard (udlr ZXC ASD QE Esc) 
 digital pad (digital 2 axis + buttons) 
 mission stick x2 (analog 6 axis + buttons) 
			
			input_report_abs(dev, db9_abs[8], (data[j + 6] & 128 ? 0 : 1) - (data[j + 6] & 64 ? 0 : 1));
			input_report_abs(dev, db9_abs[9], (data[j + 6] & 32 ? 0 : 1) - (data[j + 6] & 16 ? 0 : 1));
 sankyo ff (analog 1 axis + stop btn) 
 shuttle mouse (analog 2 axis + buttons. signed value) 
 no pad 
 1 
 2 
 3 
 4 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1999-2001 Vojtech Pavlik
  Magellan and Space Mouse 6dof controller driver for Linux
  Definitions & global arrays.
  Per-Magellan data.
  magellan_crunch_nibbles() verifies that the bytes sent from the Magellan
  have correct upper nibbles for the lower ones, if not, the packet will
  be thrown away. It also strips these upper halves to simplify further
  processing.
 Axis data 
 Button data 
  magellan_disconnect() is the opposite of magellan_connect()
  magellan_connect() is the routine that is called when someone adds a
  new serio device that supports Magellan protocol and registers it as
  an input device.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0-or-later
   derived from "twidjoy.c"
   Copyright (c) 2008 Martin Kebert
   Copyright (c) 2001 Arndt Schoenewald
   Copyright (c) 2000-2001 Vojtech Pavlik
   Copyright (c) 2000 Mark Fletcher
  Driver to use 4CH RC transmitter using Zhen Hua 5-byte protocol (Walkera Lama,
  EasyCopter etc.) as a joystick under Linux.
  RC transmitters using Zhen Hua 5-byte protocol are cheap four channels
  transmitters for control a RC planes or RC helicopters with possibility to
  connect on a serial port.
  Data coming from transmitter is in this order:
  1. byte = synchronisation byte
  2. byte = X axis
  3. byte = Y axis
  4. byte = RZ axis
  5. byte = Z axis
  (and this is repeated)
  For questions or feedback regarding this driver module please contact:
  Martin Kebert <gkmarty@gmail.com> - but I am not a C-programmer nor kernel
  coder :-(
  Constants.
  Zhen Hua data.
  zhenhua_process_packet() decodes packets the driver receives from the
  RC transmitter. It updates the data accordingly.
  zhenhua_interrupt() is called by the low level driver when characters
  are ready for us. We then buffer them for further processing, or call the
  packet processing routine.
	 All Zhen Hua packets are 5 bytes. The fact that the first byte
	  is allways 0xf7 and all others are in range 0x32 - 0xc8 (50-200)
 this byte starts a new packet 
 wrong MSB -- ignore this byte 
  zhenhua_disconnect() is the opposite of zhenhua_connect()
  zhenhua_connect() is the routine that is called when someone adds a
  new serio device. It looks for the Twiddler, and if found, registers
  it as an input device.
  The serio driver structure.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2021 Oleh Kravchenko <oleg@kaa.org.ua>
  SparkFun Qwiic Joystick
  Product page:https:www.sparkfun.comproducts15168
  Firmware and hardware sources:https:github.comsparkfunQwiic_Joystick
 CONFIG_OF 
 SPDX-License-Identifier: GPL-2.0
  Support for the four N64 controllers.
  Copyright (c) 2021 Lauri Kasanen
 unused 
 unused 
 unused 
 d-pad 
 c buttons 
 matching buttons 
 remaining ones: a, b, l, r 
		
		  We could use the vblank irq, but it's not important if
		  the poll point slightly changes.
  The target device is embedded and RAM-constrained. We save RAM
  by initializing in __init code that gets dropped late in boot.
  For the same reason there is no module or unloading support.
 The controllers are not hotpluggable, so we can scan in init 
 d-pad 
 c buttons 
 matching buttons 
 remaining ones: a, b, l, r 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1998-2001 Vojtech Pavlik
   Based on the work of:
 	Steffen Schwenke
  TurboGraFX parallel port interface driver for Linux.
 10 ms 
  tgfx_timer() reads and analyzes TurboGraFX joystick data.
 CAVEAT parport 
  tgfx_probe() probes for tg gamepads.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1998-2005 Vojtech Pavlik
  Microsoft SideWinder joystick family driver for Linux
  These are really magic values. Changing them can make a problem go away,
  as well as break everything.
 The time we wait for the first bit [600 us] 
 Max time per bit [60 us] 
 Wait for everything to settle [6 ms] 
 Wait after A0 fall till kick [45 us] 
 Number of bits before end of packet to kick 
 Number of packet read errors to fail and reinitialize 
 Number of packet read errors to switch off 3d Pro optimization 
 Number of packet read successes to switch optimization back on 
 Max number of bits in a packet 
  SideWinder joystick types ...
  Names, buttons, axes ...
  sw_read_packet() is a function which reads either a data packet, or an
  identification packet from a SideWinder joystick. The protocol is very,
  very, very braindamaged. Microsoft patented it in US patent #5628686.
 Don't care about data, only want ID 
 Set up global timeout for ID packet 
 Set up kick timeout for ID packet 
 Quiet, please 
 Trigger 
 Wait for first falling edge on clock 
 Extend time if not timed out 
 Decrement timers 
 Rising edge on clock - data bit 
 Want this data 
 Store it 
 Advance index 
 Extend timeout for next bit 
 Falling edge on axis 0 
 Schedule second trigger 
 Don't schedule next time on falling edge 
 Mark schedule 
 Second trigger time 
 Trigger 
 Long bit timeout 
 Unmark schedule 
 Switch from global to bit timeouts 
 Done - relax 
  sw_get_bits() and GB() compose bits from the triplet buffer into a __u64.
  Parameter 'pos' is bit number inside packet where to start at, 'num' is number
  of bits to be read, 'shift' is offset in the resulting __u64 to start at, bits
  is number of bits per triplet.
 Start position 
 Transfer bit 
 Next triplet 
  sw_init_digital() initializes a SideWinder 3D Pro joystick
  into digital mode.
 Trigger 
 Wait for axis to fall back to 0 
 Delay magic time 
 Last trigger 
  sw_parity() computes parity of __u64
  sw_ccheck() checks synchronization bits and computes checksum of nibbles.
 Sync 
 Sum 
  sw_parse() analyzes SideWinder joystick data, and writes the results into
  the axes and buttons arrays.
  sw_read() reads SideWinder joystick data, and reinitializes
  the joystick in case of persistent problems. This is the function that is
  called from the generic code to poll the joystick.
 Broken packet, try to fix 
 Last init failed, 1 bit mode 
 Reinitialize 
 Bogus value 
 1 == 3 
 Everything is fine 
 1 == 2 
 Everything is fine 
 2 == 3 
 Move data 
 Carry on 
 Parse data 
 Many packets OK 
 Consecutive bad packets 
 Not enough, don't reinitialize yet 
 3D Pro can be in analog mode 
 Read normal data packet 
 Read ID packet, this initializes the stick 
  sw_print_packet() prints the contents of a SideWinder packet.
  sw_3dp_id() translates the 3DP id into a human legible string.
  Unfortunately I don't know how to do this for the other SW types.
 ASCII PnP ID 
 ASCII firmware revision 
 Two 6-bit values 
  sw_guess_mode() checks the upper two button bits for toggling -
  indication of that the joystick is in 3-bit mode. This is documented
  behavior for 3DP ID packet, and for example the FSP does this in
  normal packets instead. Fun ...
  sw_connect() probes for SideWinder type joysticks.
 [SW_LENGTH] 
 [SW_LENGTH] 
 Read normal packet 
 No data. 3d Pro analog mode? 
 Switch to digital 
 Retry reading packet 
 No data -> FAIL 
 Read ID. This initializes the stick 
 ID packet should carry mode info [3DP] 
 Read ID failed. Happens in 1-bit mode on PP 
 Retry reading packet 
 Retry reading ID 
 Try SW_FAIL times 
 Read data packet 
 Longer? As we can only lose bits, it makes 
 no sense to try detection for a packet shorter 
 than the previous one 
 Ambiguous packet length 
 ID length less or eq 40 -> FSP 
 Ambiguous 
 ID length 143 -> FFP 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 2000-2002 Vojtech Pavlik <vojtech@ucw.cz>
   Copyright (c) 2001-2002, 2007 Johann Deneux <johann.deneux@gmail.com>
   USBRS232 I-Force joysticks and wheels.
 Copy rest of data then 
	 The IFORCE_XMIT_RUNNING bit is not cleared here. That's intended.
	  As long as the urb completion handler is not called, the transmiting
 success 
 this urb is terminated, clean up 
 Thrustmaster Motor Sport GT 
 Logitech WingMan Force 
 Logitech WingMan Formula Force 
 AVB Top Shot Pegasus 
 AVB Mag Turbo Force 
 AVB Top Shot FFB Racing Wheel 
 ACT LABS Force RS 
 ACT LABS Force RS 
 Saitek R440 Force Wheel 
 Guillemot Race Leader Force Feedback 
 Guillemot Jet Leader Force Feedback 
 Guillemot Force Feedback Racing Wheel 
 Guillemot Jet Leader 3D 
 Terminating entry 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 2000-2002 Vojtech Pavlik <vojtech@ucw.cz>
   Copyright (c) 2001-2002, 2007 Johann Deneux <johann.deneux@gmail.com>
   USBRS232 I-Force joysticks and wheels.
  Set the magnitude of a constant force effect
  Return error code
  Note: caller must ensure exclusive access to device
  Upload the component of an effect dealing with the period, phase and magnitude
  Uploads the part of an effect setting the envelope of the force
  Component of spring, friction, inertia... effects
 Dangerous: the sign is extended by gcc on plateforms providing an arith shift 
 This code is incorrect on cpus lacking arith shift 
  Analyse the changes in an effect, and tell if we need to send an condition
  parameter packet
  Analyse the changes in an effect, and tell if we need to send a magnitude
  parameter packet
  Analyse the changes in an effect, and tell if we need to send an envelope
  parameter packet
  Analyse the changes in an effect, and tell if we need to send a periodic
  parameter effect
  Analyse the changes in an effect, and tell if we need to send an effect
  packet
  Send the part common to all effects to the device
 Stop effect 
	iforce_control_playback(iforce, id, 0);
 If needed, restart effect 
 BUG: perhaps we should replay n times, instead of 1. But we do not know n 
  Upload a periodic effect to the device
  See also iforce_upload_constant.
	 If one of the parameter creation failed, we already returned an
	  error code.
	  If the core creation failed, we return its error code.
	  Else: if one parameter at least was created, we return 0
	        else we return 1;
  Upload a constant force effect
  Return value:
   <0 Error code
   0 Ok, effect created or updated
   1 effect did not change since last upload, and no packet was therefore sent
	 If one of the parameter creation failed, we already returned an
	  error code.
	  If the core creation failed, we return its error code.
	  Else: if one parameter at least was created, we return 0
	        else we return 1;
  Upload an condition effect. Those are for example friction, inertia, springs...
	 If the parameter creation failed, we already returned an
	  error code.
	  If the core creation failed, we return its error code.
	  Else: if a parameter  was created, we return 0
	        else we return 1;
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 2000-2002 Vojtech Pavlik <vojtech@ucw.cz>
   Copyright (c) 2001-2002, 2007 Johann Deneux <johann.deneux@gmail.com>
   USBRS232 I-Force joysticks and wheels.
  Send a packet of bytes to the device
 Copy data to buffer 
  Update head and tail of xmit buffer
  Store packet in xmit buffer
  If necessary, start the transmission
 Start or stop an effect 
 Mark an effect that was being updated as ready. That means it can be updated
 If there are untouched bits left, interpret them as the second hat 
 joystick position data 
 wheel position data 
 status report 
 Check if an effect was just started or stopped 
 Report play event 
 Report stop event 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 2000-2001 Vojtech Pavlik <vojtech@ucw.cz>
   Copyright (c) 2001, 2007 Johann Deneux <johann.deneux@gmail.com>
   USBRS232 I-Force joysticks and wheels.
 No special handling required 
TODO: Wait for the last packets to be sent
 Handle command completion 
 Signal that command is done 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 2000-2002 Vojtech Pavlik <vojtech@ucw.cz>
   Copyright (c) 2001-2002, 2007 Johann Deneux <johann.deneux@gmail.com>
   USBRS232 I-Force joysticks and wheels.
?
?
?
?
?
?
  Function called when an ioctl is performed on the event dev entry.
  It uploads an effect to the device
 Check the effect is not already being updated 
  Upload the effect
		 A packet was sent, forbid new updates until we are notified
		  that the packet was updated
  Erases an effect: it frees the effect id and mark as unused the memory
  allocated for the parameters
 TODO: remember to change that if more FF_MOD bits are added 
 Enable force feedback 
 Check: no effects should be present in memory 
 Disable force feedback playback 
 Wait for the command to complete 
  Input device fields.
  On-device memory allocation.
  Wait until device ready - until it sends its first response.
 5 seconds 
  Get device info.
 Check if the device can store more effects than the driver can really handle 
  Display additional info.
  Disable spring, enable force feedback.
  Find appropriate device entry
  Set input device bitfields and ranges.
  Register input device.
 SPDX-License-Identifier: GPL-2.0-only
  Altera University Program PS2 controller driver
  Copyright (C) 2008 Thomas Chou <thomas@wytron.com.tw>
  Based on sa1111ps2.c, which is:
  Copyright (C) 2002 Russell King
  Read all bytes waiting in the PS2 port.  There should be
  at the most one, but we loop for safety.
  Write a byte to the PS2 port.
 clear fifo 
 empty ;
 enable rx irq 
 disable rx irq 
  Add one device to this driver.
  Remove one device from this driver.
 CONFIG_OF 
  Our device driver structure
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriversinputseriosa1111ps2.c
   Copyright (C) 2002 Russell King
  Read all bytes waiting in the PS2 port.  There should be
  at the most one, but we loop for safety.  If there was a
  framing error, we have to manually clear the status.
  Completion of ps2 write
 done 
  Write a byte to the PS2 port.  We have to wait for the
  port to indicate that the transmitter is empty.
	
	  If the TX register is empty, we can go straight out.
  Clear the input buffer.
  Test the keyboard interface.  We basically check to make sure that
  we can drive each line to the keyboard independently of each other.
  Add one device to this driver.
	
	  Request the physical region for this PS2 port.
	
	  Our parent device has already mapped the region.
 Incoming clock is 8MHz 
	
	  Flush any pending input.
	
	  Test the keyboard interface.
	
	  Flush any pending input.
  Remove one device from this driver.
  Our device driver structure
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 2000-2001 Vojtech Pavlik
   Copyright (c) 2002 Russell King
  Acorn RiscPC PS2 keyboard controller driver for LinuxARM
 Reset the keyboard state machine. 
  Allocate and initialize serio structure for subsequent registration
  with serio core.
 SPDX-License-Identifier: GPL-2.0-only
   i8042 keyboard and mouse controller driver for Linux
   Copyright (c) 1999-2004 Vojtech Pavlik
  i8042_lock protects serialization between i8042_command and
  the interrupt handler.
  Writers to AUX and KBD ports as well as users issuing i8042_command
  directly should acquire i8042_mutex (by means of calling
  i8042_lock_chip() and i8042_unlock_chip() helpers) to ensure that
  they do not disturb each other (unfortunately in many i8042
  implementations write to one of the ports will immediately abort
  command that is being processed by another port).
  The i8042_wait_read() and i8042_wait_write functions wait for the i8042 to
  be ready for reading values from it  writing values to it.
  Called always with i8042_lock held.
  i8042_flush() flushes all data that may be in the keyboard and mouse buffers
  of the i8042 down the toilet.
  i8042_command() executes a command on the i8042. It also sends the input
  parameter(s) of the commands to it, and receives the output value(s). The
  parameters are to be stored in the param array, and the output is placed
  into the same array. The number of the parameters and output values is
  encoded in bits 8-11 of the command number.
  i8042_kbd_write() sends a byte out through the keyboard interface.
  i8042_aux_write() sends a byte out through the aux interface.
  i8042_port_close attempts to clear AUX or KBD port state by disabling
  and then re-enabling it.
	
	  See if there is any data appeared while we were messing with
	  port state.
  i8042_start() is called by serio core when port is about to finish
  registering. It will mark port as existing so i8042_interrupt can
  start sending data through it.
	
	  On platforms using suspend-to-idle, allow the keyboard to
	  wake up the system from sleep by enabling keyboard wakeups
	  by default.  This is consistent with keyboard wakeup
	  behavior on many platforms using suspend-to-RAM (ACPI S3)
	  by default.
  i8042_stop() marks serio port as non-existing so i8042_interrupt
  will not try to send data to the port that is about to go away.
  The function is called by serio core as part of unregister procedure.
	
	  We need to make sure that interrupt handler finishes using
	  our serio port before we return from this function.
	  We synchronize with both AUX and KBD IRQs because there is
	  a (very unlikely) chance that AUX IRQ is raised for KBD port
	  and vice versa.
  i8042_filter() filters out unwanted bytes from the input data stream.
  It is called from i8042_interrupt and thus is running with interrupts
  off and i8042_lock held.
  i8042_interrupt() is the most important function in this driver -
  it handles the interrupts from the i8042, and sends incoming bytes
  to the upper layers.
  When MUXERR condition is signalled the data register can only contain
  0xfd, 0xfe or 0xff if implementation follows the spec. Unfortunately
  it is not always the case. Some KBCs also report 0xfc when there is
  nothing connected to the port while others sometimes get confused which
  port the data came from and signal error leaving the data intact. They
  _do not_ revert to legacy mode (actually I've never seen KBC reverting
  to legacy mode yet, when we see one we'll add proper handling).
  Anyway, we process 0xfc, 0xfd, 0xfe and 0xff as timeouts, and for the
  rest assume that the data came from the same serio last byte
  was transmitted (if transmission happened not too long ago).
 report timeout 
  i8042_enable_kbd_port enables keyboard port on chip
  i8042_enable_aux_port enables AUX (mouse) port on chip
  i8042_enable_mux_ports enables 4 individual AUX ports after
  the controller has been switched into Multiplexed mode
  i8042_set_mux_mode checks whether the controller has an
  active multiplexor and puts the chip into Multiplexed (true)
  or Legacy (false) mode.
  Get rid of bytes in the queue.
  Internal loopback test - send three bytes, they should come back from the
  mouse interface, the last should be version.
  Workaround for interference with USB Legacy emulation
  that causes a v10.12 MUX to be found.
  i8042_check_mux() checks whether the controller supports the PS2 Active
  Multiplexing specification by Synaptics, Phoenix, Insyde and
  LCSTelegraphics.
  Disable all muxed ports by disabling AUX.
  The following is used to test AUX IRQ delivery.
  i8042_toggle_aux - enables or disables AUX port on i8042 via command and
  verifies success by readinng CTR. Used when testing for presence of AUX
  port.
 some chips need some time to set the I8042_CTR_AUXDIS bit 
  i8042_check_aux() applies as much paranoia as it can at detecting
  the presence of an AUX interface.
  Get rid of bytes in the queue.
  Internal loopback test - filters out AT-type i8042's. Unfortunately
  SiS screwed up and their 5597 doesn't support the LOOP command even
  though it has an AUX port.
  External connection test - filters out AT-soldered PS2 i8042's
  0x00 - no error, 0x01-0x03 - clockdata stuck, 0xff - general error
  0xfa - no error on some notebooks which ignore the spec
  Because it's common for chipsets to return error on perfectly functioning
  AUX ports, we test for this only when the LOOP command failed.
  If AUX_LOOP completed without error but returned unexpected data
  mark it as broken
  Bit assignment test - filters out PS2 i8042's in AT mode
  Reset keyboard (needed on some laptops to successfully detect
  touchpad, e.g., some Gigabyte laptop models with Elantech
  touchpads).
  Test AUX IRQ delivery to make sure BIOS did not grab the IRQ and
  used it for a PCI card or somethig else.
  Without LOOP command we can't test AUX IRQ delivery. Assume the port
  is working and hope we are right.
  AUX IRQ was never delivered so we need to flush the controller to
  get rid of the byte we put there; otherwise keyboard may not work.
  Disable the interface.
	
	  We try this 5 times; on some really fragile systems this does not
	  take the first time...
	
	  On x86, we don't fail entire i8042 initialization if controller
	  reset fails in hopes that keyboard port will still be functional
	  and user will still get a working keyboard. This is especially
	  important on netbooks. On other arches we trust hardware more.
  i8042_controller_init initializes the i8042 controller, and,
  most importantly, sets it into non-xlated mode if that's
  desired.
  Save the CTR for restore on unload  reboot.
  Disable the keyboard interface and interrupt.
  Handle keylock.
  If the chip is configured into nontranslated mode by the BIOS, don't
  bother enabling translating and be happy.
  Set nontranslated mode for the kbd interface if requested by an option.
  After this the kbd interface becomes a simple serial inout, like the aux
  interface is. We don't do this by default, since it can confuse notebook
  BIOSes.
  Write CTR back.
  Flush whatever accumulated while we were disabling keyboard port.
  Reset the controller and reset CRT to the original value set by BIOS.
  Disable both KBD and AUX interfaces so they don't get in the way
  Disable MUX mode if present.
  Reset the controller if requested.
  Restore the original control register setting.
  i8042_panic_blink() will turn the keyboard LEDs on or off and is called
  when kernel panics. Flashing LEDs is useful for users running X who may
  not see the console and will help distinguishing panics from "real"
  lockups.
  Note that DELAY has a limit of 10ms so we will not get stuck here
  waiting for KBC to free up even if KBD interrupt is off
 set leds 
  Here we try to reset everything back to a state we had
  before suspending.
  Restore original CTR value and disable all ports
  Here we try to restore the original BIOS settings to avoid
  upsetting it.
 Set up serio interrupts for system wakeup. 
	
	  If platform firmware was not going to be involved in suspend, we did
	  not restore the controller state to whatever it had been at boot
	  time, so we do not need to do anything.
	
	  We only need to reset the controller if we are resuming after handing
	  off control to the platform firmware, otherwise we can simply restore
	  the mode.
 CONFIG_PM 
  We need to reset the 8042 back to original mode on system shutdown,
  because otherwise BIOSes will be confused.
  Ok, everything is ready, let's register all serio ports
 in case KBD failed but AUX not 
 Set this before creating the dev to allow i8042_command to work right away 
 SPDX-License-Identifier: GPL-2.0-or-later
   The Serio abstraction module
   Copyright (c) 1999-2004 Vojtech Pavlik
   Copyright (c) 2004 Dmitry Torokhov
   Copyright (c) 2003 Daniele Bellucci
  serio_mutex protects entire serio subsystem and is taken every time
  serio port or driver registered or unregistered.
  Basic serio -> driver core mappings
  Serio event processing.
 protects serio_event_list 
			
			  If this event is of different type we should not
			  look further - we only suppress duplicate events
			  that were sent back-to-back.
	
	  Scan event list for the other events for the same serio port,
	  starting with the most recent one. If event is the same we
	  do not need add new one. If event is of different type we
	  need to add this event and should not look further because
	  we need to preseve sequence of distinct events.
  Remove all events that have been submitted for a given
  object, be it serio port or driver.
  Locate child serio port (if any) that has not been fully registered yet.
  Children are registered by driver's connect() handler so there can't be a
  grandchild pending registration together with a child.
  Serio port operations
  Prepare serio port for registration.
  Complete serio port registration.
  Driver core will attempt to find appropriate driver for the port.
  serio_destroy_port() completes unregistration process and removes
  port from the system
  Reconnect serio port (re-initialize attached device).
  If reconnect fails (old device is no longer attached or
  there was no device to begin with) we do full rescan in
  hope of finding a driver for the port.
  Reconnect serio port and all its children (re-initialize attached
  devices).
			
			  Reconnect was successful, move on to do the
			  first child.
		
		  Either it was a leaf node or reconnect failed and it
		  became a leaf node. Continue reconnecting starting with
		  the next sibling of the parent node.
  serio_disconnect_port() unbinds a port from its driver. As a side effect
  all children ports are unbound and destroyed.
	
	  Children ports should be disconnected and destroyed
	  first; we travel the tree in depth-first order.
 Locate a leaf 
		
		  Prune this leaf node unless it is the one we
		  started with.
	
	  OK, no children left, now disconnect this port.
  Submits register request to kseriod for subsequent execution.
  Note that port registration is always asynchronous.
  Synchronously unregisters serio port.
  Safely unregisters children ports if they are present.
  Serio driver operations
	
	  Temporarily disable automatic binding because probing
	  takes long time and we are better off doing it in kseriod
	
	  Restore original bind mode and let kseriod bind the
	  driver to free ports
 so serio_find_driver ignores it 
 we could've deleted some ports, restart 
		
		  Driver reconnect can take a while, so better let
		  kseriod deal with it.
 CONFIG_PM 
 called from serio_driver->connectdisconnect methods under serio_mutex 
 called from serio_driver->connectdisconnect methods under serio_mutex 
	
	  There should not be any outstanding events but work may
	  still be scheduled so simply cancel it.
 SPDX-License-Identifier: GPL-2.0-only
 	Driver for Allwinner A10 PS2 host controller
 	Author: Vishnu Patekar <vishnupatekar0510@gmail.com>
 		Aaron.maoye <leafy.myeh@newbietech.com>
 register offset definitions 
 PS2 Module Global Control Reg 
 PS2 Module Data Reg		
 PS2 Module Line Control Reg 
 PS2 Module Line Status Reg	
 PS2 Module FIFO Control Reg 
 PS2 Module FIFO Status Reg	
 PS2 Module Clock Divider Reg
  PS2 GLOBAL CONTROL REGISTER PS2_GCTL 
 PS2 LINE CONTROL REGISTER 
 PS2 LINE STATUS REGISTER 
 PS2 FIFO CONTROL REGISTER 
 PS2 FIFO STATUS REGISTER 
 IO mapping base 
 clock management 
 irq 
 Get the PS2 interrupts and clear them 
 Check line status register 
 Check FIFO status register 
 Set line control and enable interrupt 
 Reset FIFO 
 Set clock divider register 
 Set global control register 
 Shut off the interrupt 
 IO mem resources 
 IO 
 shutoff interrupt 
 Get IRQ for the device 
 success 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2004, 2007-2010, 2011-2012 Synopsys, Inc. (www.synopsys.com)
  Driver is originally developed by Pavel Sokolov <psokolov@synopsys.com>
 SPDX-License-Identifier: GPL-2.0-only
  GPIO based serio bus driver for bit banging the PS2 protocol
  Author: Danilo Krummrich <danilokrummrich@dk-develop.de>
 start bit should be low 
 processing data bits 
 check odd parity 
		 Do not send spurious ACK's and NACK's when write fn is
		  not provided.
		 Let's send the data without waiting for the stop bit to be
		  sent. It may happen that we miss the stop bit. When this
		  happens we have no way to recover from this, certainly
		  missing the parity bit would be recognized when processing
		  the stop bit. When missing both, data is lost.
 stop bit should be high 
 success 
 success 
 should never happen 
 do odd parity 
 release data line to generate stop bit 
		 Devices generate one extra clock pulse before sending the
		  acknowledgment.
 success 
		 Probably we missed the stop bit. Therefore we release data
		  line and try again.
 success 
 Keep irq disabled until serio->open is called. 
	 Write can be enabled in platformdt data, but possibly it will not
	  work because of the tough timings.
	 Tx count always starts at 1, as the start bit is sent implicitly by
	  host-to-device communication initialization.
 success 
 SPDX-License-Identifier: GPL-2.0-only
  PS2 driver library
  Copyright (c) 1999-2002 Vojtech Pavlik
  Copyright (c) 2004 Dmitry Torokhov
  ps2_sendbyte() sends a byte to the device and waits for acknowledge.
  It doesn't handle retransmission, the caller is expected to handle
  it when needed.
  ps2_sendbyte() can only be called from a process context.
  ps2_drain() waits for device to transmit requested number of bytes
  and discards them.
  ps2_is_keyboard_id() checks received ID byte against the list of
  known keyboard IDs.
 Regular keyboards		
 NCD Sun keyboard		
 Trust keyboard, translated	
 Trust keyboard		
 NMB SGI keyboard, translated 
 NMB SGI keyboard		
  ps2_adjust_timeout() is called after receiving 1st byte of command
  response and tries to reduce remaining timeout to speed up command
  completion.
		
		  Device has sent the first response byte after
		  reset command, reset is thus done, so we can
		  shorten the timeout.
		  The next byte will come soon (keyboard) or not
		  at all (mouse).
		
		  Microsoft Natural Elite keyboard responds to
		  the GET ID command as it were a mouse, with
		  a single byte. Fail the command so atkbd will
		  use alternative probe to detect it.
		
		  If device behind the port is not a keyboard there
		  won't be 2nd byte of ID response.
  ps2_command() sends a command and its parameters to the mouse,
  then waits for the response and puts it in the param array.
  ps2_command() can only be called from a process context
 Signal that we are sending the command byte 
	
	  Some devices (Synaptics) peform the reset before
	  ACKing the reset command, and so it can take a long
	  time before the ACK arrives.
 Now we are sending command parameters, if any 
	
	  The reset command takes a long time to execute.
	
	  ps_command() handles resends itself, so do not leak -EAGAIN
	  to the callers.
  ps2_sliced_command() sends an extended PS2 command to the mouse
  using sliced syntax, understood by advanced devices, such as Logitech
  or Synaptics touchpads. The command is encoded as:
  0xE6 0xE8 rr 0xE8 ss 0xE8 tt 0xE8 uu where (rr64)+(ss16)+(tt4)+uu
  is the command.
  ps2_init() initializes ps2dev structure
  ps2_handle_ack() is supposed to be used in interrupt handler
  to properly process ACKNAK of a command from a PS2 device.
	
	  Workaround for mice which don't ACK the Get ID command.
	  These are valid mouse IDs that we recognize.
		
		  Do not signal errors if we get unexpected reply while
		  waiting for an ACK to the initial (first) command byte:
		  the device might not be quiesced yet and continue
		  delivering data.
		  Note that we reset PS2_FLAG_WAITID flag, so the workaround
		  for mice not acknowledging the Get ID command only triggers
		  on the 1st byte; if device spews data we really want to see
		  a real ACK from it.
  ps2_handle_response() is supposed to be used in interrupt handler
  to properly store device's response to a command and notify process
  waiting for completion of the command.
 reset all flags except last nack 
  userio kernel serio device emulation module
  Copyright (C) 2015 Red Hat
  Copyright (C) 2015 Stephen Chandler Paul <thatslyude@gmail.com>
  This program is free software; you can redistribute it andor modify it
  under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation; either version 2 of the License, or (at
  your option) any later version.
  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
  General Public License for more details.
  userio_device_write - Write data from serio to a userio device in userspace
  @id: The serio port for the userio device
  @val: The data to write to the device
		
		  Don't free the serio port here, serio_unregister_port()
		  does it for us.
	
	  By the time we get here, the data that was waiting might have
	  been taken by another thread. Grab the buffer lock and check if
	  there's still any data waiting, otherwise repeat this process
	  until we have data (unless the file descriptor is non-blocking
	  of course).
 buffer wasis empty 
		
		  count == 0 is special - no IO is done but we check
		  for error conditions (see above).
 SPDX-License-Identifier: GPL-2.0-only
  Input device TTY line discipline
  Copyright (c) 1999-2002 Vojtech Pavlik
  This is a module that converts a tty line into a much simpler
  'serial io port' abstraction that the input device drivers use.
  Callback functions from the serio code.
  serport_ldisc_open() is the routine that is called upon setting our line
  discipline on a tty. It prepares the serio struct.
  serport_ldisc_close() is the opposite of serport_ldisc_open()
  serport_ldisc_receive() is called by the low level tty driver when characters
  are ready for us. We forward the characters and flags, one by one to the
  'interrupt' routine.
  serport_ldisc_read() just waits indefinitely if everything goes well.
  However, when the serio driver closes the serio port, it finishes,
  returning 0 characters.
  serport_ldisc_ioctl() allows to set the port protocol, and device ID
  The line discipline structure.
  The functions for inseringremoving us as a module.
 SPDX-License-Identifier: GPL-2.0-only
   Copyright (c) 2013, Microsoft Corporation.
  Current version 1.0
  Message types in the synthetic input protocol
  Basic message structures.
 Enclosed message 
  Protocol messages
 Additional information 
  Represents a keyboard device
 Synchronize the requestresponse if needed 
 protects 'started' field 
		
		  Validate the information provided by the host.
		  If the host is giving us a bogus packet,
		  drop the packet (hoping the problem
		  goes away).
		
		  Validate the information provided by the host.
		  If the host is giving us a bogus packet,
		  drop the packet (hoping the problem
		  goes away).
		
		  Inject the information through the serio interrupt.
		
		  Only trigger a wakeup on key down, otherwise
		  "echo freeze > syspowerstate" can't really enter the
		  state because the Enter-UP can trigger a wakeup at once.
		
		  We have a packet that has "inband" data. The API used
		  for retrieving the packet guarantees that the complete
		  packet is read. So, minimally, we should be able to
		  parse the payload header safely (assuming that the host
		  can be trusted.  Trusting the host seems to be a
		  reasonable assumption because in a virtualized
		  environment there is not whole lot you can do if you
		  don't trust the host.
		 
		  Nonetheless, let us validate if the host can be trusted
		  (in a trivial way).  The interesting aspect of this
		  validation is how do you recover if we discover that the
		  host is not to be trusted? Simply dropping the packet, I
		  don't think is an appropriate recovery.  In the interest
		  of failing fast, it may be better to crash the guest.
		  For now, I will just drop the packet!
			
			  Drop the packet and hope
			  the problem magically goes away.
 Keyboard guid 
 SPDX-License-Identifier: GPL-2.0-only
  SGI O2 MACE PS2 controller driver for linux
  Copyright (C) 2002 Vivien Chappelier
 in 50us unit 
 external clock signal 
 clken output signal 
 transmission in progress 
 empty transmit buffer 
 full receive buffer 
 reception in progress 
 parity error 
 framing error 
 inhibit clock signal after TX 
 transmit enable 
 enable transmit interrupt 
 enable receive interrupt 
 pause reception if set to 0 
 reset 
 Reset port 
 Enable interrupts 
 SPDX-License-Identifier: GPL-2.0-or-later
   linuxdriversinputserioambakmi.c
   Copyright (C) 2000-2003 Deep Blue Solutions Ltd.
   Copyright (C) 2002 Russell King.
 timeout in 100ms 
 kick the serio layer to rescan this port 
  HIL MLC state machine and serio interface driver
  Copyright (c) 2001 Brian S. Julin
  All rights reserved.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions, and the following disclaimer,
     without modification.
  2. The name of the author may not be used to endorse or promote products
     derived from this software without specific prior written permission.
  Alternatively, this software may be distributed under the terms of the
  GNU General Public License ("GPL").
  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  References:
  HP-HIL Technical Reference Manual.  Hewlett Packard Product No. 45918A
 	Driver theory of operation:
 	Some access methods and an ISR is defined by the sub-driver
 	(e.g. hp_sdc_mlc.c).  These methods are expected to provide a
 	few bits of logic in addition to raw access to the HIL MLC,
 	specifically, the ISR, which is entirely registered by the
 	sub-driver and invoked directly, must check for record
 	termination or packet match, at which point a semaphore must
 	be cleared and then the hil_mlcs_tasklet must be scheduled.
 	The hil_mlcs_tasklet processes the state machine for all MLCs
 	each time it runs, checking each MLC's progress at the current
 	node in the state machine, and moving the MLC to subsequent nodes
 	in the state machine when appropriate.  It will reschedule
 	itself if output is pending.  (This rescheduling should be replaced
 	at some point with a sub-driver-specific mechanism.)
 	A timer task prods the tasklet once per second to prevent
 	hangups when attached devices do not return expected data
 	and to initiate probes of the loop for new devices.
 #define HIL_MLC_DEBUG 
 Device infoinstance management 
 In-use slots are not eligible. 
	 TODO: Pick all-zero slots first, failing that,
	  randomize the slot picked among those eligible.
 Note: It is guaranteed at least one above will match 
 State engine 
 Schedule the tasklet		
 Wait until next pass		
 relative node#, decrement	
 relative node#, increment	
 use retval as next node#	
 An LCV used to prevent runaway loops, forces 5 second sleep when reset. 
 Management of the discovered device index (zero based, -1 means no devs) 
	 Help the state engine:
	  Is this a real IDD response or just an echo?
	 
	  Real IDD response does not start with a command.
 Should have the command echoed further down. 
 And the rest of the packets should still be clear. 
 Next step is to see if RSC supported 
 This should send us off to ACF 
 Next step is to see if EXD supported (IDD has already been read) 
 Next step is to see if RNM supported. 
 0  HILSEN_START 
 1  HILSEN_RESTART 
 Disable APE 
 Disable test mode 
 9  HILSEN_DHR 
 10 HILSEN_DHR2 
 14 HILSEN_IFC 
	 If devices are there, they weren't in PUP or other loopback mode.
	  We're more concerned at this point with restoring operation
	  to devices than discovering new ones, so we try to salvage
	  the loop configuration by closing off the loop.
 16 HILSEN_HEAL0 
 18 HILSEN_HEAL 
 21 HILSEN_ACF 
 22 HILSEN_ACF2 
 25 HILSEN_DISC0 
 Only enter here if response just received 
 27 HILSEN_DISC 
 40 HILSEN_MATCH 
 TODO  0)
 41 HILSEN_OPERATE 
 44 HILSEN_PROBE 
 52 HILSEN_DSR 
 55 HILSEN_REPOLL 
 58 HILSEN_IFCACF 
 60 HILSEN_END 
 For debug 
 Already set up from previous HILSE_OUT_ 
 Prepare to receive input 
 tasklet context functions 
 Keepalive timer task 
 could not send packet - stop immediately. 
 Re-insert the periodic task. 
 userkernel context functions 
 for now only commands 
 TODO wake up interruptable 
 HIL port no. 
 not found in list 
 Module interface 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2013 Aeroflex Gaisler
  This driver supports the APBPS2 PS2 core available in the GRLIB
  VHDL IP core library.
  Full documentation of the APBPS2 core can be found here:
  http:www.gaisler.comproductsgrlibgrip.pdf
  See "Documentationdevicetreebindingsinputps2keyb-mouse-apbps2.txt" for
  information on open firmware properties.
  Contributors: Daniel Hellstrom <daniel@gaisler.com>
 0x00 
 0x04 
 0x08 
 0x0c 
 clear error bits? 
 timeout in 100ms 
 delay until PS2 controller has room for more chars 
 clear error flags 
 Clear old data if available (unlikely) 
 Enable reciever and it's interrupt 
 stop interrupts at PS2 HW level 
 Initialize one APBPS2 PS2 core 
 Find Device Address 
 Reset hardware, disable interrupt 
 IRQ 
 Get core frequency 
 Set reload register to core freq in kHz10 
 SPDX-License-Identifier: GPL-2.0
  SGI IOC3 PS2 controller driver for linux
  Copyright (C) 2019 Thomas Bogendoerfer <tbogendoerfer@suse.de>
  Based on code Copyright (C) 2005 Stanislaw Skowronek <skylark@unaligned.org>
                Copyright (C) 2009 Johannes Dickgreber <tanzy@gmx.de>
 enable ports 
  driversinputseriogscps2.c
  Copyright (c) 2004-2006 Helge Deller <deller@gmx.de>
  Copyright (c) 2002 Laurent Canet <canetl@esiee.fr>
  Copyright (c) 2002 Thibaut Varene <varenet@parisc-linux.org>
  Pieces of code based on linux-2.4's hp_mouse.c & hp_keyb.c
 	Copyright (c) 1999 Alex deVries <alex@onefishtwo.ca>
 	Copyright (c) 1999-2000 Philipp Rumpf <prumpf@tux.org>
 	Copyright (c) 2000 Xavier Debacker <debackex@esiee.fr>
 	Copyright (c) 2000-2001 Thomas Marteau <marteaut@esiee.fr>
  HP GSC PS2 port driver, found in PARISC Workstations
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file "COPYING" in the main directory of this archive
  for more details.
  TODO:
  - Dino testing (did HP ever shipped a machine on which this port
                  was usableenabled ?)
  Driver constants
 various constants 
 offset for DINO controller versus LASI one 
 PS2 IO port offsets 
 device ID offset (see: GSC_ID_XXX) 
 reset port offset 
 receive port offset 
 transmit port offset 
 see: Control register bits 
 see: Status register bits 
 Control register bits 
 enable interface 
 loopback operation 
 directly control clockdata line 
 data line direct control 
 clock line direct control 
 Status register bits 
 Receive Buffer Not Empty 
 Transmit Buffer Not Empty 
 Timeout Error 
 Parity Error 
 Composite Interrupt = irq on any port 
 Data Line Shadow 
 Clock Line Shadow 
 IDs returned by GSC_ID port register 
 device ID values 
 GSC PS2 port device struct 
 position in buffer[] 
  Various HW level routines
  wait_TBE() - wait for Transmit Buffer Empty
 device is expected to react within 250 msec 
 This should not happen 
  gscps2_flush() - flush the receive buffer
  gscps2_writeb_output() - write a byte to the port
  returns 1 on success, 0 on error
 wait ;
 this is ugly, but due to timing of the port it seems to be necessary. 
 make sure any received data is returned as fast as possible 
 this is important e.g. when we set the LEDs on the keyboard 
  gscps2_enable() - enables or disables the port
 now enabledisable the port 
  gscps2_reset() - resets the PS2 port
 reset the interface 
  gscps2_interrupt() - Interruption service routine
  This function reads received PS2 bytes and processes them on
  all interfaces.
  The problematic part here is, that the keyboard and mouse PS2 port
  share the same interrupt and it's not possible to send data if any
  one of them holds input data. To solve this problem we try to receive
  the data as fast as possible and handle the reporting to the upper layer
  later.
 list_for_each_entry 
 all data was read from the ports - now report the data to upper layer 
	     Did new data arrived while we read existing data ?
 while() 
 list_for_each_entry 
  gscps2_write() - send a byte out through the aux interface.
  gscps2_open() is called when a port is opened by the higher layer.
  It resets and enables the port.
 enable it 
  gscps2_close() disables the port
  gscps2_probe() - Probes PS2 devices
  @return: successerror report
 Offset for DINO PS2. Works with LASI even 
  gscps2_remove() - Removes PS2 devices
  @return: successerror report
 LASI PS2 
 DINO PS2 
 0 terminated list 
 SPDX-License-Identifier: GPL-2.0-or-later
  Xilinx XPS PS2 device driver
  (c) 2005 MontaVista Software, Inc.
  (c) 2008 Xilinx, Inc.
 Register offsets for the xps2 device 
 Software Reset register 
 Status register 
 Receive Data register 
 Transmit Data register 
 Global Interrupt Enable reg 
 Interrupt Status register 
 Interrupt Enable register 
 Reset Register Bit Definitions 
 Software Reset  
 Status Register Bit Positions 
 Receive Full  
 Transmit Full  
  Bit definitions for ISRIER registers. Both the registers have the same bit
  definitions and are only defined once.
 Watchdog Timeout Interrupt 
 Transmit No ACK Interrupt 
 Transmit ACK (Data) Interrupt 
 Receive Overflow Interrupt 
 Receive Error Interrupt 
 Receive Data Interrupt 
 Mask for all the Transmit Interrupts 
 Mask for all the Receive Interrupts 
 Mask for all the Interrupts 
 Global Interrupt Enable mask 
 virt. address of control registers 
 serio 
 XPS PS2 data transmission calls 
  xps2_recv() - attempts to receive a byte from the PS2 port.
  @drvdata:	pointer to ps2 device private data structure
  @byte:	address where the read data will be copied
  If there is any data available in the PS2 receiver, this functions reads
  the data, otherwise it returns error.
 If there is data available in the PS2 receiver, read it 
 Interrupt handler 
 Get the PS2 interrupts and clear them 
 Check which interrupt is active 
 Error, if a byte is not received 
 serio callbacks 
  sxps2_write() - sends a byte out through the PS2 port.
  @pserio:	pointer to the serio structure of the PS2 port
  @c:		data that needs to be written to the PS2 port
  This function checks if the PS2 transmitter is empty and sends a byte.
  Otherwise it returns error. Transmission fails only when nothing is connected
  to the PS2 port. Thats why, we do not try to resend the data in case of a
  failure.
 If the PS2 transmitter is empty send a byte of data 
  sxps2_open() - called when a port is opened by the higher layer.
  @pserio:	pointer to the serio structure of the PS2 device
  This function requests irq and enables interrupts for the PS2 device.
 start reception by enabling the interrupts 
 success 
  sxps2_close() - frees the interrupt.
  @pserio:	pointer to the serio structure of the PS2 device
  This function frees the irq and disables interrupts for the PS2 device.
 Disable the PS2 interrupts 
  xps2_of_probe - probe method for the PS2 device.
  @of_dev:	pointer to OF device structure
  @match:	pointer to the structure used for matching a device
  This function probes the PS2 device in the device tree.
  It initializes the driver data structure and the hardware.
  It returns 0, if the driver is bound to the PS2 device, or a negative
  value if there is an error.
 IO mem resources 
 Get iospace for the device 
 Get IRQ for the device 
 Fill in configuration data and add them to the list 
 Disable all the interrupts, just in case 
	
	  Reset the PS2 device and abort any current transaction,
	  to make sure we have the PS2 in a good state.
 success 
  xps2_of_remove - unbinds the driver from the PS2 device.
  @of_dev:	pointer to OF device structure
  This function is called if a device is physically removed from the system or
  if the driver module is being unloaded. It frees any resources allocated to
  the device.
 IO mem resources 
 Get iospace of the device 
 Match table for of_platform binding 
 end of list  },
 SPDX-License-Identifier: GPL-2.0-or-later
  OLPC serio driver for multiplexed input from Marvell MMP security processor
  Copyright (C) 2011-2013 One Laptop Per Child
  The OLPC XO-1.75 and XO-4 laptops do not have a hardware PS2 controller.
  Instead, the OLPC firmware runs a bit-banging PS2 implementation on an
  otherwise-unused slow processor which is included in the Marvell MMP2MMP3
  SoC, known as the "Security Processor" (SP) or "Wireless Trusted Module"
  (WTM). This firmware then reports its results via the WTM registers,
  which we read from the Application Processor (AP, i.e. main CPU) in this
  driver.
  On the hardware side we have a PS2 mouse and an AT keyboard, the data
  is multiplexed through this system. We create a serio port for each one,
  and demultiplex the data accordingly.
 WTM register offsets 
  The upper byte of SECURE_PROCESSOR_COMMAND and COMMAND_RETURN_STATUS is
  used to identify which port (device) is being talked to. The lower byte
  is the data being sentreceived.
 COMMAND_FIFO_STATUS 
 Number of pendingunprocessed commands 
 from device specs 
 PJ_RST_INTERRUPT 
 PJ_INTERRUPT_MASK 
 COMMAND_FIFO_STATUS 
 SP busy. This has not been seen in practice. 
	
	  Write 1 to PJ_RST_INTERRUPT to acknowledge and clear the interrupt
	  Write 0xff00 to SECURE_PROCESSOR_COMMAND.
 Ack and clear interrupt 
 Enable interrupt 0 by clearing its bit 
 Disable interrupt 0 
 KEYBOARD 
 TOUCHPAD 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1999-2001 Vojtech Pavlik
   82C710 C&T mouse port chip driver for Linux
  ct82c710 interface
 Device Idle 
 Device Char received 
 Device XMIT Idle 
 Device Reset 
 Device Interrupt On 
 Device Error 
 Device Clear 
 Device Enable 
  Interrupt handler for the 82C710 mouse port. A character
  is waiting in the 82C710.
  Wait for device to send output char and flush any input char.
 Enable interrupts 
  Write to the 82C710 mouse device.
  See if we can find a 82C710 device. Read mouse address.
 Any value except 9, ff or 36 
 Inverse of 55 
 Address the chip 
 3904; 390 = config address 
 Inverse of e4 
 Write index 
 Config address found? 
 No: no 82C710 here 
 Write index 
 Get mouse IO address 
 Close config mode 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 2000-2001 Vojtech Pavlik
   Based on the work of:
 	Richard Zidlicky <Richard.Zidlicky@stud.informatik.uni-erlangen.de>
  Q40 PS2 keyboard controller driver for Linuxm68k
  q40kbd_flush() flushes all data that may be in the keyboard buffers
  q40kbd_open() is called when a port is open by the higher layer.
  It allocates the interrupt and enables in in the chip.
 off we go 
	
	  q40kbd_close() will be called as part of unregistering
	  and will ensure that IRQ is turned off, so it is safe
	  to unregister port first and free IRQ later.
 SPDX-License-Identifier: GPL-2.0-only
  TQC PS2 Multiplexer driver
  Copyright (C) 2010 Dmitry Eremin-Solenikov
 First MUST come PS2MULT_NUM_PORTS selectors 
 Note that serio core already take care of children ports 
 SPDX-License-Identifier: GPL-2.0-only
  Raw serio device providing access to a raw byte stream from underlying
  serio port. Closely emulates behavior of pre-2.6 devpsaux device
  Copyright (c) 2004 Dmitry Torokhov
              Interface with userspace (file operations)            
 Either signal error or partial write 
                    Interface with serio port                       
 we are holding serio->lock here so we are protected 
	
	  Nothing needs to be done here, we just need this method to
	  keep the same device.
  Wake up users waiting for IO so they can disconnect from
  dead device.
 SPDX-License-Identifier: GPL-2.0-only
   Amstrad E3 (Delta) keyboard port driver
   Copyright (c) 2006 Matt Callow
   Copyright (c) 2010 Janusz Krzysztofik
  Thanks to Cliff Lawson for his help
  The Amstrad Delta keyboard (aka mailboard) uses normal PC-AT style serial
  transmission.  The keyboard port is formed of two GPIO lines, for clock
  and data.  Due to strict timing requirements of the interface,
  the serial data stream is read and processed by a FIQ handler.
  The resulting words are fetched by this driver from a circular buffer.
  Standard AT keyboard driver (atkbd) is used for handling the keyboard data.
  However, when used with the E3 mailboard that producecs non-standard
  scancodes, a custom key table must be prepared and loaded from userspace.
 check valid stop bit 
 calculate the parity 
 it should be odd 
	
	  Read data from the circular buffer, check it
	  and then pass it on the serio
 enable keyboard 
 disable keyboard 
		
		  When running on a non-dt platform and requested regulator
		  is not available, devm_regulator_get() never returns
		  -EPROBE_DEFER as it is not able to justify if the regulator
		  may still appear later.  On the other hand, the board can
		  still set full constriants flag at late_initcall in order
		  to instruct devm_regulator_get() to returnn a dummy one
		  if sufficient.  Hence, if we get -ENODEV here, let's convert
		  it to -EPROBE_DEFER and wait for the board to decide or
		  let Deferred Probe infrastructure handle this error.
  HP i8042-based System Device Controller driver.
  Copyright (c) 2001 Brian S. Julin
  All rights reserved.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions, and the following disclaimer,
     without modification.
  2. The name of the author may not be used to endorse or promote products
     derived from this software without specific prior written permission.
  Alternatively, this software may be distributed under the terms of the
  GNU General Public License ("GPL").
  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  References:
  System Device Controller Microprocessor Firmware Theory of Operation
       for Part Number 1820-4784 Revision B.  Dwg No. A-1820-4784-2
  Helge Deller's original hilkbd.c port for PA-RISC.
  Driver theory of operation:
  hp_sdc_put does all writing to the SDC.  ISR can run on a different
  CPU than hp_sdc_put, but only one CPU runs hp_sdc_put at a time
  (it cannot really benefit from SMP anyway.)  A tasket fit this perfectly.
  All data coming back from the SDC is sent via interrupt and can be read
  fully in the ISR, so there are no latencythroughput problems there.
  The problem is with output, due to the slow clock speed of the SDC
  compared to the CPU.  This should not be too horrible most of the time,
  but if used with HIL devices that support the multibyte transfer command,
  keeping outbound throughput flowing at the 6500KBps that the HIL is
  capable of is more than can be done at HZ=100.
  Busy polling for IBF clear wastes CPU cycles and bus cycles.  hp_sdc.ibf
  is set to 0 when the IBF flag in the status register has cleared.  ISR
  may do this, and may also access the parts of queued transactions related
  to reading data back from the SDC, but otherwise will not touch the
  hp_sdc state. Whenever a register is written hp_sdc.ibf is set to 1.
  The i8042 write index and the values in the 4-byte input buffer
  starting at 0x70 are kept track of in hp_sdc.wi, and .r7[], respectively,
  to minimize the amount of IO needed to the SDC.  However these values
  do not need to be locked since they are only ever accessed by hp_sdc_put.
  A timer task schedules the tasklet once per second just to make
  sure it doesn't freeze up and to allow for bad reads to time out.
 Machine-specific abstraction 
 All driver state is kept in here. 
 primitives for use in any context 
	Care must be taken to only invoke hp_sdc_spin_ibf when
 	absolutely needed, or in rarely invoked subroutines.
 	Not only does it waste CPU cycles, it also wastes bus cycles.
 Interrupt context functions 
 All data has been gathered. 
 Return control of this transaction 
 Read data unconditionally to advance i8042. 
 For now we are ignoring these until we get the SDC to behave. 
 This case is not documented. 
 TODO: pass this on to the HIL handler, or do SAK here? 
 Kernel (tasklet) context functions 
			 If this turns out to be a normal failure mode
			  we'll need to figure out a way to communicate
			  it back to the application. and be less verbose.
				 Note this means that irqhooks may be called
				  in taskletbh context.
	 If i8042 buffers are full, we cannot do anything that
 See if we are in the middle of a sequence. 
 Wrap to top 
 Found one. 
 There's nothing queued to do. 
 Check to see if the interrupt mask needs to be set. 
 Interleave outbound data between the transactions. 
 Interleave outbound data between the transactions. 
 act finished? 
 skip quantity field if data-out sequence follows. 
 act finished? 
 Need to point the write index register 
 write index register autoincrements 
	 We don't go any further in the command if there is a pending read,
 curr->idx should == idx at this point. 
 Start a new read 
 Still need to lock here in case of spurious irq. 
 This transaction is over. 
 Interleave outbound data between the transactions. 
	 If by some quirk IBF has cleared and our ISR has run to
 Functions called in either user or kernel context 
 Can't have same transaction on queue twice 
 Search for empty slot 
 TODO: don't remove it if it's not done. 
 User context functions 
 Enable interrupts from the timers 
 Enable interrupts from the HIL MLC 
 Disable interrupts from the timers 
 Disable interrupts from HIL only if there is no cooked driver. 
 Disable interrupts from HIL only if there is no raw HIL driver. 
 Keepalive timer task 
 Re-insert the periodic task. 
 Module Initialization 
 __hppa__ 
 Mask maskable irqs 
 Sync the output buffer registers, thus scheduling hp_sdc_tasklet. 
 Wait for t_sync to complete 
 Create the keepalive task 
 We only expect one SDC 
	 after successful initialization give SDC some time to settle
 __hppa__ 
 do nothing if we don't have a SDC 
 Turn off all maskable "sub-function" irq's. 
 Wait until we know this has been processed by the i8042 
 Timing notes:  These measurements taken on my 64MHz 7100-LC (71564)
                                               cycles cycles-adj    time
  between two consecutive mfctl(16)'s:              4        na    63ns
  hp_sdc_spin_ibf when idle:                      119        115   1.7us
  gsc_writeb status register:                      83         79   1.2us
  IBF to clear after sending SET_IM:             6204       6006    93us
  IBF to clear after sending LOAD_RT:            4467       4352    68us
  IBF to clear after sending two LOAD_RTs:      18974      18859   295us
  READ_T1, read statusdata, IRQ, call handler: 35564        na   556us
  cmd to ~IBF READ_T1 2nd time right after:   5158403        na    81ms
  between IRQ received and ~IBF for above:    2578877        na    40ms
  Performance stats after a run of this module configuring HIL and
  receiving a few mouse events:
  status in8  282508 cycles 7128 calls
  status out8   8404 cycles  341 calls
  data out8     1734 cycles   78 calls
  isr         174324 cycles  617 calls (includes take)
  take          1241 cycles    2 calls
  put        1411504 cycles 6937 calls
  task       1655209 cycles 6937 calls (includes put)
  Access to HP-HIL MLC through HP System Device Controller.
  Copyright (c) 2001 Brian S. Julin
  All rights reserved.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions, and the following disclaimer,
     without modification.
  2. The name of the author may not be used to endorse or promote products
     derived from this software without specific prior written permission.
  Alternatively, this software may be distributed under the terms of the
  GNU General Public License ("GPL").
  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  References:
  HP-HIL Technical Reference Manual.  Hewlett Packard Product No. 45918A
  System Device Controller Microprocessor Firmware Theory of Operation
       for Part Number 1820-4784 Revision B.  Dwg No. A-1820-4784-2
 Interrupt context 
 We know status is 5X 
 No more data will be coming due to an error. 
 Tasklet or userspace context functions 
 Try to down the semaphore 
 printk(KERN_DEBUG PREFIX ">[%x]\n", mlc->ipacket[0]); 
				printk("!%i %i",
				tv.tv_usec - mlc->instart.tv_usec,
				mlc->intimeout);
 Try to down the semaphores -- they should be up. 
 Try to down the semaphore -- it should be up. 
 Shouldn't be sending commands when loop may be busy 
 No timeout 
 we cannot emulate this, it should not be used. 
 Should not send commanddata after engaging APE 
	 Disengaging APE this way would not be valid either since
	  the loop must be allowed to idle.
	 
	  So, it works out that we really never actually send control
	  and data when using SDC, we just send the data.
 priv->tseq[3] = (mlc->ddc + 1) | HP_SDC_LPS_ACSUCC; 
 SPDX-License-Identifier: GPL-2.0-only
   Parallel port to Keyboard port adapter driver for Linux
   Copyright (c) 1999-2004 Vojtech Pavlik
  To connect an AT or XT keyboard to the parallel port, a fairly simple adapter
  can be made:
   Parallel port            Keyboard port
      +5V --------------------- +5V (4)
                  ______
      +5V -------|______|--.
                           |
      ACK (10) ------------|
                           |--- KBD CLOCK (5)
      STROBE (1) ---|<|----'
                  ______
      +5V -------|______|--.
                           |
      BUSY (11) -----------|
                           |--- KBD DATA (1)
      AUTOFD (14) --|<|----'
      GND (18-25) ------------- GND (3)
  The diodes can be fairly any type, and the resistors should be somewhere
  around 5 kOhm, but the adapter will likely work without the resistors,
  too.
  The +5V source can be taken either from USB, from mouse or keyboard ports,
  or from a joystick port. Unfortunately, the parallel port of a PC doesn't
  have a +5V pin, and feeding the keyboard from signal pins is out of question
  with 300 mA power reqirement of a typical AT keyboard.
 Strobe & Ack 
 AutoFd & Busy 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversinputseriopcips2.c
   Copyright (C) 2003 Russell King, All Rights Reserved.
   I'm not sure if this is a generic PS2 PCI interface or specific to
   the Mobility Electronics docking station.
 MOBILITY 
 Keyboard 
 MOBILITY 
 Mouse 
 SPDX-License-Identifier: GPL-2.0-or-later
  Focaltech TouchPad PS2 mouse driver
  Copyright (c) 2014 Red Hat Inc.
  Copyright (c) 2014 Mathias Gottschlag <mgottschlag@gmail.com>
  Red Hat authors:
  Hans de Goede <hdegoede@redhat.com>
  Even if the kernel is built without support for Focaltech PS2 touchpads (or
  when the real driver fails to recognize the device), we still have to detect
  them in order to avoid further detection attempts confusing the touchpad.
  This way it at least works in PS2 mouse compatibility mode.
  Packet types - the numbers are not consecutive, so we might be missing
  something here.
 bitmap of active fingers 
 absolute position of one finger 
 relative position of 1-2 fingers 
  Current state of a single finger on the touchpad.
 The touchpad has generated a touch event for the finger 
	
	  The touchpad has sent position data for the finger. The
	  flag is 0 when the finger is not active, and there is a
	  time between the first touch event for the finger and the
	  following absolute position packet for the finger where the
	  touchpad has declared the finger to be valid, but we do not
	  have any valid position yet.
	
	  Absolute position (from the bottom left corner) of the
	  finger.
  Description of the current state of the touchpad hardware.
	
	  The touchpad tracks the positions of the fingers for us,
	  the array indices correspond to the finger indices returned
	  in the report packages.
	
	  Finger width 0-7 and 15 for a very big contact area.
	  15 value stays until the finger is released.
	  Width is reported only in absolute packets.
	  Since hardware reports width only for last touching finger,
	  there is no need to store width for every specific finger,
	  so we keep only last value reported.
 True if the clickpad has been pressed. 
			
			  The touchpad might report invalid data, so we clamp
			  the resulting values so that we do not confuse
			  userspace.
 the second byte contains a bitmap of all fingers touching the pad 
			
			  Even when the finger becomes active again, we still
			  will have to wait for the first valid position.
	
	  If there is an odd number of fingers, the last relative
	  packet only contains one finger. In this case, the second
	  finger index in the packet is 0 (we subtract 1 in the lines
	  above to create array indices, so the finger will overflow
	  and be above FOC_MAX_FINGERS).
 Full packet received 
	
	  We might want to do some validation of the data here, but
	  we do not know the protocol well enough
	
	  Undo part of setup done for us by psmouse core since touchpad
	  is not a relative device.
	
	  Now set up our capabilities.
 not sure whether this is 100% correct 
 not supported yet 
 not supported yet 
 not supported yet 
 resync is not supported yet 
	
	  rateresolutionscale changes are not supported yet, and
	  the generic implementations of these functions seem to
	  confuse some touchpads
 CONFIG_MOUSE_PS2_FOCALTECH 
 SPDX-License-Identifier: GPL-2.0-or-later
 ----------------------------------------------------------------------------
  touchkit_ps2.c  --  Driver for eGalax TouchKit PS2 Touchscreens
  Copyright (C) 2005 by Stefan Lucke
  Copyright (C) 2004 by Daniel Ritz
  Copyright (C) by Todd E. Johnson (mtouchusb.c)
  Based upon touchkitusb.c
  Vendor documentation is available at:
  http:home.eeti.com.twweb20driversSoftware%20Programming%20Guide_v2.0.pdf 
 SPDX-License-Identifier: GPL-2.0-or-later
  Apple USB Touchpad (for post-February 2005 PowerBooks and MacBooks) driver
  Copyright (C) 2001-2004 Greg Kroah-Hartman (greg@kroah.com)
  Copyright (C) 2005-2008 Johannes Berg (johannes@sipsolutions.net)
  Copyright (C) 2005-2008 Stelian Pop (stelian@popies.net)
  Copyright (C) 2005      Frank Arnold (frank@scirocco-5v-turbo.de)
  Copyright (C) 2005      Peter Osterlund (petero2@telia.com)
  Copyright (C) 2005      Michael Hanselmann (linux-kernel@hansmi.ch)
  Copyright (C) 2006      Nicolas Boichat (nicolas@boichat.ch)
  Copyright (C) 2007-2008 Sven Anders (anders@anduras.de)
  Thanks to Alex Harper <basilisk@foobox.net> for his inputs.
  Note: We try to keep the touchpad aspect ratio while still doing only
  simple arithmetics:
 	0 <= x <= (xsensors - 1)  xfact
 	0 <= y <= (ysensors - 1)  yfact
 number of X sensors 
 17" models have more sensors 
 number of Y sensors 
 X multiplication factor 
 Y multiplication factor 
 size of USB transfers 
 callback function 
 fuzz touchpad generates 
 Apple 				\
  Table of devices (Product IDs) that work with this driver.
  (The names come from Info.plist in AppleUSBTrackpad.kext,
   According to Info.plist Geyser IV is the same as Geyser III.)
 PowerBooks Feb 2005, iBooks G4 
 FOUNTAIN ANSI 
 FOUNTAIN ISO 
 FOUNTAIN TP ONLY 
 GEYSER 1 TP ONLY 
 PowerBooks Oct 2005 
 GEYSER 2 ANSI 
 GEYSER 2 ISO 
 GEYSER 2 JIS 
 Core Duo MacBook & MacBook Pro 
 GEYSER 3 ANSI 
 GEYSER 3 ISO 
 GEYSER 3 JIS 
 Core2 Duo MacBook & MacBook Pro 
 GEYSER 4 ANSI 
 GEYSER 4 ISO 
 GEYSER 4 JIS 
 Core2 Duo MacBook3,1 
 GEYSER 4 HF ANSI 
 GEYSER 4 HF ISO 
 GEYSER 4 HF JIS 
 Terminating entry 
 maximum number of sensors 
  The largest possible bank of sensors with additional buffer of 4 extra values
  on either side, for an array of smoothed sensor values.
 maximum pressure this driver will report 
  Threshold for the touchpad sensors. Any change less than ATP_THRESHOLD is
  ignored.
  How far we'll bitshift our sensor values before averaging them. Mitigates
  rounding errors.
 Geyser initialization constants 
  enum atp_status_bits - status bit meanings
  These constants represent the meaning of the status bits.
  (only Geyser 34)
  @ATP_STATUS_BUTTON: The button was pressed
  @ATP_STATUS_BASE_UPDATE: Update of the base values (untouched pad)
  @ATP_STATUS_FROM_RESET: Reset previously performed
 Structure to hold all of our device specific stuff 
 usb device 
 usb interface 
 usb request block 
 transferred data 
 input dev 
 touchpad model 
 are the samples valid? 
 last reported finger count 
 last reported xy, 
 used for smoothing 
 number of empty packets 
  Make the threshold a module parameter
  By default newer Geyser devices send standard USB HID mouse
  packets (Report ID 2). This code changes device mode, so it
  sends raw sensor reports (Report ID 5).
 Apply the mode switch 
  Reinitialise the device. This usually stops stream of empty packets
  coming from it.
	
	  Use offset to point xy_sensors at the first value in dev->xy_acc
	  for whichever dimension we're looking at this particular go-round.
 values to calculate mean 
		
		  Makes the finger detection more versatile.  For example,
		  two fingers with no gap will be detected.  Also, my
		  tests show it less likely to have intermittent loss
		  of multiple finger readings while moving around (scrolling).
		 
		  Changes the multiple finger detection to counting humps on
		  sensors (transitions from nonincreasing to increasing)
		  instead of counting transitions from low sensors (no
		  finger reading) to high sensors (finger above
		  sensor)
		 
		  - Jason Parekh <jasonparekh@gmail.com>
 No need to continue if no fingers are found. 
	
	  Use a smoothed version of sensor data for movement calculations, to
	  combat noise without needing to rely so heavily on a threshold.
	  This improves tracking.
	 
	  The smoothed array is bigger than the original so that the smoothing
	  doesn't result in edge values being truncated.
 Pull base values, scaled up to help avoid truncation errors. 
 Handle edge. 
 Average values with neighbors. 
 Handle other edge. 
		
		  Skip values if they're small enough to be truncated to 0
		  by scale. Mostly noise.
 Scale down pressure output. 
 Check URB status and for correct length of data package 
 success 
 This urb is terminated, clean up 
 drop incomplete datasets 
 17" Powerbooks have extra X sensors 
  USB interrupt callback functions
 Interrupt function for older touchpads: FOUNTAINGEYSER1GEYSER2 
 reorder the sensors values 
		
		  The values are laid out like this:
		  Y1, Y2, -, Y3, Y4, -, ..., X1, X2, -, X3, X4, -, ...
		  '-' is an unused value.
 read X values 
 read Y values 
 X values 
 Y values 
 first sample 
 Store first sample 
 Perform size detection, if not done already 
 accumulate the change 
 prevent down drifting 
 reset the accumulator on release 
 Interrupt function for older touchpads: GEYSER3GEYSER4 
	 Reorder the sensors values:
	 
	  The values are laid out like this:
	  -, Y1, Y2, -, Y3, Y4, -, ..., -, X1, X2, -, X3, X4, ...
	  '-' is an unused value.
 read X values 
 read Y values 
 Just update the base values (i.e. touchpad in untouched state) 
 calculate the change 
 this is a round-robin value, so couple with that 
 prevent down drifting 
 reset the accumulator on release 
	
	  Geysers 34 will continue to send packets continually after
	  the first touch unless reinitialised. Do so if it's been
	  idle for a while in order to avoid waking the kernel up
	  several hundred times a second.
	
	  Button must not be pressed when entering suspend,
	  otherwise we will never release the button.
 Don't resubmit urb here, wait for reinit 
 switch to raw sensor mode 
 set up the endpoint information 
 use only the first interrupt-in endpoint 
 we found an interrupt in endpoint 
 allocate memory for our device state and initialize it 
 save our data pointer in this interface device 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for	DEC VSXXX-AA mouse (hockey-puck mouse, ball or two rollers)
 		DEC VSXXX-GA mouse (rectangular mouse, with ball)
 		DEC VSXXX-AB tablet (digitizer with hair cross or stylus)
  Copyright (C) 2003-2004 by Jan-Benedict Glaw <jbglaw@lug-owl.de>
  The packet format was initially taken from a patch to GPM which is (C) 2001
  by	Karsten Merker <merker@linuxtag.org>
  and	Maciej W. Rozycki <macro@ds2.pg.gda.pl>
  Later on, I had access to the device's documentation (referenced below).
  Building an adaptor to DE9  DB25 RS232
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DISCLAIMER: Use this description AT YOUR OWN RISK! I'll not pay for
  anything if you break your mouse, your computer or whatever!
  In theory, this mouse is a simple RS232 device. In practice, it has got
  a quite uncommon plug and the requirement to additionally get a power
  supply at +5V and -12V.
  If you look at the socketjack (_not_ at the plug), we use this pin
  numbering:
     _______
     7 6 5 \
   | 4 --- 3 |
    \  2 1  
     -------
 	DEC socket	DE9	DB25	Note
 	1 (GND)		5	7	-
 	2 (RxD)		2	3	-
 	3 (TxD)		3	2	-
 	4 (-12V)	-	-	Somewhere from the PSU. At ATX, it's
 					the thin blue wire at pin 12 of the
 					ATX power connector. Only required for
 					VSXXX-AA-GA mice.
 	5 (+5V)		-	-	PSU (red wires of ATX power connector
 					on pin 4, 6, 19 or 20) or HDD power
 					connector (also red wire).
 	6 (+12V)	-	-	HDD power connector, yellow wire. Only
 					required for VSXXX-AB digitizer.
 	7 (dev. avail.)	-	-	The mouse shorts this one to pin 1.
 					This way, the host computer can detect
 					the mouse. To use it with the adaptor,
 					simply don't connect this pin.
  So to get a working adaptor, you need to connect the mouse with three
  wires to a RS232 port and two or three additional wires for +5V, +12V and
  -12V to the PSU.
  Flow specification for the link is 4800, 8o1.
  The mice and tablet are described in "VCB02 Video Subsystem - Technical
  Manual", DEC EK-104AA-TM-001. You'll find it at MANX, a search engine
  specific for DEC documentation. Try
  http:www.vt100.netmanxdetails?pn=EK-104AA-TM-001;id=21;cp=1
 At least 5 is needed for a full tablet packet 
  Returns number of bytes to be dropped, 0 if packet is okay.
 First byte must be a header byte 
 Check all following bytes 
	
	  Check for normal stream packets. This is three bytes,
	  with the first byte's 3 MSB set to 100.
	 
	  [0]:	1	0	0	SignX	SignY	Left	Middle	Right
	  [1]: 0	dx	dx	dx	dx	dx	dx	dx
	  [2]:	0	dy	dy	dy	dy	dy	dy	dy
	
	  Low 7 bit of byte 1 are abs(dx), bit 7 is
	  0, bit 4 of byte 0 is direction.
	
	  Low 7 bit of byte 2 are abs(dy), bit 7 is
	  0, bit 3 of byte 0 is direction.
	
	  Get button state. It's the low three bits
	  (for three buttons) of byte 0.
	
	  Report what we've found so far...
	
	  Tablet position  button packet
	 
	  [0]:	1	1	0	B4	B3	B2	B1	Pr
	  [1]:	0	0	X5	X4	X3	X2	X1	X0
	  [2]:	0	0	X11	X10	X9	X8	X7	X6
	  [3]:	0	0	Y5	Y4	Y3	Y2	Y1	Y0
	  [4]:	0	0	Y11	Y10	Y9	Y8	Y7	Y6
	
	  Get XY position. Y axis needs to be inverted since VSXXX-AB
	  counts down->top while monitor counts top->bottom.
	
	  Get button state. It's bits <4..1> of byte 0.
	
	  Report what we've found so far...
	
	  Check for Power-On-Reset packets. These are sent out
	  after plugging the mouse in, or when explicitly
	  requested by sending 'T'.
	 
	  [0]:	1	0	1	0	R3	R2	R1	R0
	  [1]:	0	M2	M1	M0	D3	D2	D1	D0
	  [2]:	0	E6	E5	E4	E3	E2	E1	E0
	  [3]:	0	0	0	0	0	Left	Middle	Right
	 
	  M: manufacturer location code
	  R: revision code
	  E: Error code. If it's in the range of 0x00..0x1f, only some
	     minor problem occurred. Errors >= 0x20 are considered bad
	     and the device may not work properly...
	  D: <0010> == mouse, <0100> == tablet
	
	  Get button state. It's the low three bits
	  (for three buttons) of byte 0. Maybe even the bit <3>
	  has some meaning if a tablet is attached.
 No (serious) error. Report buttons 
	
	  If the mouse was hot-plugged, we need to force differential mode
	  now... However, give it a second to recover from it's reset.
 Standard format 
 Incremental 
 72 samplessec 
	
	  Parse buffer to death...
		
		  Out of sync? Throw away what we don't understand. Each
		  packet starts with a byte whose bit 7 is set. Unhandled
		  packets (ie. which we don't know about or simply b0rk3d
		  data...) will get shifted out of the buffer after some
		  activity on the mouse.
		
		  Check for packets we know about.
 Check for broken packet 
 Check for broken packet 
 Check for broken packet 
 No REL, ABS or POR packet found 
 We have buttons 
 We have 3 buttons 
 ...and Tablet 
	
	  Request selftest. Standard packet format and differential
	  mode will be requested after the device ID'ed successfully.
 Test 
 SPDX-License-Identifier: GPL-2.0-only
  ALPS touchpad PS2 mouse driver
  Copyright (c) 2003 Neil Brown <neilb@cse.unsw.edu.au>
  Copyright (c) 2003-2005 Peter Osterlund <petero2@telia.com>
  Copyright (c) 2004 Dmitry Torokhov <dtor@mail.ru>
  Copyright (c) 2005 Vojtech Pavlik <vojtech@suse.cz>
  Copyright (c) 2009 Sebastian Kapfer <sebastian_kapfer@gmx.net>
  ALPS detection, tap switching and status querying info is taken from
  tpconfig utility (by C. Scott Ananian and Bruce Kall).
  Definitions for ALPS version 3 and 4 command mode protocol
 0 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
 a 
 b 
 c 
 d 
 e 
 f 
 0 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
 a 
 b 
 c 
 d 
 e 
 f 
 0 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
 a 
 b 
 c 
 d 
 e 
 f 
 touchpad has trackstick 
 device has a pass-through port 
 hardware wheel present 
 front & back buttons present 
 front & back buttons present 
 4 direction button present 
#define ALPS_PS2_INTERLEAVED	0x80	 3-byte PS2 packet interleaved with
 separate stick button bits 
 device is a clickpad 
 device can report trackpoint pressure 
	
	  XXX This entry is suspicious. First byte has zero lower nibble,
	  which is what a normal mouse would report. Also, the value 0x0e
	  isn't valid per PS2 spec.
 Dell Latitude D600 
 Toshiba Salellite Pro M10 
 UMAX-530T 
 Toshiba Tecra A11-11L 
 HP ze1115 
 Dell Latitude E5500, E6400, E6500, Precision M4400 
 Fujitsu Siemens S6010 
 Toshiba Satellite S2400-103 
 NEC Versa L320 
 Dell Latitude D800 
 ThinkPad R61 8918-5QG 
 Dell XT2 
 Ahtec Laptop 
 Dell Vostro 1400 
  Some v2 models report the stick buttons in separate bits
 Extrapolated from other entries 
 Reported-by: Hans de Bruin <jmdebruin@xmsnet.nl> 
 Reported-by: Hans de Goede <hdegoede@redhat.com> 
 Extrapolated from other entries 
 Packet formats are described in Documentationinputdevicesalps.rst 
	
	  If shared button has already been reported on the
	  other device (dev2) then this event should be also
	  sent through that device.
	
	  Sync the _other_ device now, we'll do the first
	  device later once we report the rest of the events.
 Some models have separate stick button bits 
 Convert hardware tap to a reasonable Z value 
	
	  A "tap and drag" operation is reported by the hardware as a transition
	  from (!fin && ges) to (fin && ges). This should be translated to the
	  sequence Z>0, Z==0, Z>0, so the Z==0 event has to be generated manually.
  Process bitmap data from semi-mt protocols. Returns the number of
  fingers detected. A return value of 0 means at least one of the
  bitmaps was empty.
  The bitmaps don't have enough data to track fingers, so this function
  only generates points representing a bounding box of all contacts.
  These points are returned in fields->mt when the return value
  is greater than 0.
	
	  Fingers can overlap, so we use the maximum count of fingers
	  on either axis as the finger count.
	
	  If an axis reports only a single contact, we have overlapping or
	  adjacent fingers. Divide the single contact between the two points.
 top-left corner 
 top-right corner 
 bottom-right corner 
 bottom-left corner 
 x-bitmap order is reversed on v5 touchpads  
 y-bitmap order is reversed on v3 and v4 touchpads  
	
	  We only select a corner for the second touch once per 2 finger
	  touch sequence to avoid the chosen corner (and thus the coordinates)
	  jumping around when the first touch is in the middle.
 Find corner closest to our st coordinates 
 And select the opposite corner to use for the 2nd touch 
 Use st data when we don't have mt data 
 It should be a DualPoint when received trackstick packet 
 Sanity check packet 
	
	  There's a special packet that seems to indicate the end
	  of a stream of trackstick data. Filter these out.
	
	  The x and y values tend to be quite large, and when used
	  alone the trackstick is difficult to use. Scale them down
	  to compensate.
	
	  Most ALPS models report the trackstick buttons in the touchpad
	  packets, but a few report them here. No reliable way has been
	  found to differentiate between the models upfront, so we enable
	  the quirk in response to seeing a button press in the trackstick
	  packet.
 Y-profile is stored in P(0) to p(n-1), n = y_bits; 
 X-profile is stored in p(n) to p(n+m-1), m = x_bits; 
	
	  There's no single feature of touchpad position and bitmap packets
	  that can be used to distinguish between them. We rely on the fact
	  that a bitmap packet should always follow a position packet with
	  bit 6 of packet[4] set.
		
		  Sometimes a position packet will indicate a multi-packet
		  sequence, but then what follows is another position
		  packet. Check for this, and when it happens process the
		  position packet as usual.
			
			  Bitmap processing uses position packet's coordinate
			  data, so we need to do decode it first.
 Use st data 
	
	  Bit 6 of byte 0 is not usually set in position packets. The only
	  times it seems to be set is in situations where the data is
	  suspect anyway, e.g. a palm resting flat on the touchpad. Given
	  this combined with the fact that this bit is useful for filtering
	  out misidentified bitmap packets, we reject anything with this
	  bit set.
	
	  Sometimes the hardware sends a single packet with z = 0
	  in the middle of a stream. Real releases generate packets
	  with x, y, and z all zero, so these seem to be flukes.
	  Ignore them.
	
	  v3 protocol packets come in three types, two representing
	  touchpad data and one representing trackstick data.
	  Trackstick packets seem to be distinguished by always
	  having 0x3f in the last byte. This value has never been
	  observed in the last byte of either of the other types
	  of packets.
	
	  We can use Byte5 to distinguish if the packet is from Touchpad
	  or Trackpoint.
	  Touchpad:	0 - 0x7E
	  Trackpoint:	0x7F
 It should be a DualPoint when received Trackpoint packet 
 Trackpoint packet 
 To prevent the cursor jump when finger lifted 
 Divide 4 since trackpoint's speed is too fast 
 Touchpad packet 
 v6 touchpad does not have middle button 
	
	  v4 has a 6-byte encoding for bitmap data, but this data is
	  broken up between 3 normal packets. Use priv->multi_packet to
	  track our position in the bitmap packet.
 sync, reset position 
 Detect false-positive touches where x & y report max value 
 y gets set to 0 at the end of this function 
	
	  NEW packets are send to indicate a discontinuity in the finger
	  coordinate reporting. Specifically a finger may have moved from
	  slot 0 to 1 or vice versa. INPUT_MT_TRACK takes care of this for
	  us.
	 
	  NEW packets have 3 problems:
	  1) They do not contain middle  right button info (on non clickpads)
	     this can be worked around by preserving the old button state
	  2) They do not contain an accurate fingercount, and they are
	     typically send when the number of fingers changes. We cannot use
	     the old finger count as that may mismatch with the amount of
	     touch coordinates we've available in the NEW packet
	  3) Their x data for the second touch is inaccurate leading to
	     a possible jump of the x coordinate by 16 units when the first
	     non NEW packet comes in
	  Since problems 2 & 3 cannot be worked around, just ignore them.
 pkt_id == V7_PACKET_ID_MULTI 
 Sometimes a single touch is reported in mt[1] rather then mt[0] 
 It should be a DualPoint when received trackstick packet 
 two-finger finger positions 
 stick pointer 
 third and fourth finger positions 
 Current packet is 1Finger coordinate packet 
		
		  When a button is held the device will give us events
		  with x, y, and pressure of 0. This causes annoying jumps
		  if a touch is released while the button is held.
		  Handle this by claiming zero contacts.
		
		  x, y, and pressure are decoded in
		  alps_process_packet_ss4_v2()
 handle buttons 
		
		  Sometimes the first packet will indicate a multi-packet
		  sequence, but sometimes the next multi-packet would not
		  come. Check for this, and when it happens process the
		  position packet as usual.
 Now process the 1st packet 
	
	  "f.is_mp" would always be '0' after merging the 1st and 2nd packet.
	  When it is set, it means 2nd packet comes without 1st packet come.
 Save the first packet 
 Report trackstick 
 Report touchpad 
	
	  format of input device name is: "protocol vendor name"
	  see function psmouse_switch_protocol() in psmouse-base.c
	
	  Save the error code so that we can detect that we
	  already tried to create the device.
 Figure out which device to use to report the bare packet 
 On V2 devices the DualPoint Stick reports bare packets 
 Register dev3 mouse if we received PS2 packet first time 
		
		  Start a timer to flush the packet if it ends up last
		  6-byte packet in the stream. Timer needs to fire
		  psmouse core times out itself. 20 ms should be enough
		  to decide if we are getting more data or not.
		
		  Highest bit is set - that means we either had
		  complete ALPS packet and this is start of the
		  next packet or we got garbage.
 Continue with the next packet 
		
		  High bit is 0 - that means that we indeed got a PS2
		  packet in the middle of ALPS packet.
		 
		  There is also possibility that we got 6-byte ALPS
		  packet followed  by 3-byte packet from trackpoint. We
		  can not distinguish between these 2 scenarios but
		  because the latter is unlikely to happen in course of
		  normal operation (user would need to press all
		  buttons on the pad and start moving trackpoint
		  without touching the pad surface) we assume former.
		  Even if we are wrong the wost thing that would happen
		  the cursor would jump but we should not get protocol
		  de-synchronization.
		
		  Continue with the standard ALPS protocol handling,
		  but make sure we won't process it as an interleaved
		  packet again, which may happen if all buttons are
		  pressed. To avoid this let's reset the 4th bit which
		  is normally 1.
		
		  We did not any more data in reasonable amount of time.
		  Validate the last 3 bytes and process as a standard
		  ALPS packet.
	
	  Check if we are dealing with a bare PS2 packet, presumably from
	  a device connected to the external PS2 port. Because bare PS2
	  protocol does not have enough constant bits to self-synchronize
	  properly we only do this if the device is fully synchronized.
	  Can not distinguish V8's first byte from PS2 packet's
 Check for PS2 packet stuffed in the middle of ALPS packet. 
 Bytes 2 - pktsize should have 0 in the highest bit 
			
			  Some Dell boxes, such as Latitude E6440 or E7440
			  with closed lid, quite often smash last byte of
			  otherwise valid packet with 0xff. Given that the
			  next packet is very likely to be valid let's
			  report PSMOUSE_FULL_PACKET but not process data,
			  rather than reporting PSMOUSE_BAD_DATA and
			  filling the logs.
	
	  The address being read is returned in the first two bytes
	  of the result. Check that this address matches the expected
	  address.
  For DualPoint devices select the device that should respond to
  subsequent commands. It looks like glidepad is behind stickpointer,
  I'd thought it would be other way around...
 we may get 3 more bytes, just ignore them 
 Try ALPS magic knock - 4 disable before enable 
	
	  Switch mouse to poll (remote) mode so motion data will not
	  get in our way
	
	  b0-b11 are valid bits, send sequence is inverse.
	  e.g. when word = 0x0123, nibble send sequence is 3, 2, 1
 0x0A0 is the command to write the word 
 EC E9 F5 F5 E7 E6 E7 E9 to enter monitor mode 
 EC to exit monitor mode 
 enter monitor mode, to write the register 
 Get status: 0xF5 0xF5 0xF5 0xE9 
  Turn touchpad tapping on or off. The sequences are:
  0xE9 0xF5 0xF5 0xF3 0x0A to enable,
  0xE9 0xF5 0xF5 0xE8 0x00 to disable.
  My guess that 0xE9 (GetInfo) is here as a sync point.
  For models that also have stickpointer (DualPoints) its tapping
  is controlled separately (0xE6 0xE6 0xE6 0xF3 0x14|0x0A) but
  we don't fiddle with it.
  alps_poll() - poll the touchpad for current motion packet.
  Used in resync.
  Poll the track stick ...
 ALPS needs stream mode, otherwise it won't report any data 
 Must be in passthrough mode when calling this function 
 Enter passthrough mode to let trackpoint enter 6byte raw mode 
  Enable or disable passthrough mode to the trackstick.
 Must be in command mode when calling this function 
 bit 7: trackstick is present 
	
	  We need to configure trackstick to report data for touchpad in
	  extended format. And also we need to tell touchpad to expect data
	  from trackstick in extended format. Without this configuration
	  trackstick packets sent from touchpad are in basic format which is
	  different from what we expect.
	
	  E7 report for the trackstick
	 
	  There have been reports of failures to seem to trace back
	  to the above trackstick check failing. When these occur
	  this E7 report fails, so when that happens we continue
	  with the assumption that there isn't a trackstick after
	  all.
		
		  Tell touchpad that trackstick is now in extended mode.
		  If bit 1 isn't set the packet format is different.
 Set rate and enable data reporting 
	
	  Leaving the touchpad in command mode will essentially render
	  it unusable until the machine reboots, so exit it here just
	  to be safe
 sign extend lower 4 bits 
 In 0.1 mm units 
 sign extend upper 4 bits 
 In 0.1 mm units 
 sign extend lower 4 bits 
 sign extend upper 4 bits 
 In 0.1 mm units 
 In 0.1 mm units 
 units  mm 
 units  mm 
 enter absolute mode 
 Must be in command mode when calling this function 
	
	  This sequence changes the output from a 9-byte to an
	  8-byte format. All the same data seems to be present,
	  just in a more compact format.
 Set rate and enable data reporting 
	
	  Leaving the touchpad in command mode will essentially render
	  it unusable until the machine reboots, so exit it here just
	  to be safe
 In 0.1 mm units 
 In 0.1 mm units 
 units  mm 
 units  mm 
 For support TrackStick of Thinkpad LE series 
	
	  Dolphin's sensor line number is not fixed. It can be calculated
	  by adding the device's register value with DOLPHIN_PROFILE_XYOFFSET.
	  Further more, we can get device's x_max and y_max by multiplying
	  sensor line number with DOLPHIN_COUNT_PER_ELECTRODE.
	 
	  e.g. When we get register's sensor_x = 11 & sensor_y = 8,
	 	real sensor line number X = 11 + 8 = 19, and
	 	real sensor line number Y = 8 + 1 = 9.
	 	So, x_max = (19 - 1)  64 = 1152, and
	 	    y_max = (9 - 1)  64 = 512.
 This is dolphin "v1" as empirically defined by florin9doi 
 enter absolute mode 
 T.B.D. Decread noise packet number, delete in the future 
	
	  param[0] contains the trackpoint device variant_id while
	  param[1] contains the firmware_id. So far all alps
	  trackpoint-only devices have their variant_ids equal
	  TP_VARIANT_ALPS and their firmware_ids are in 0x20~0x2f range.
	
	  First try "E6 report".
	  ALPS should return 0,0,10 or 0,0,100 if no buttons are pressed.
	  The bits 0-2 of the first byte will be 1s if some buttons are
	  pressed.
	
	  Now get the "E7" and "EC" reports.  These will uniquely identify
	  most ALPS touchpads.
 Save Device ID and Firmware version 
	
	  Undo part of setup done for us by psmouse core since touchpad
	  is not a relative device.
	
	  Now set up our capabilities.
		
		  format of input device name is: "protocol vendor name"
		  see function psmouse_switch_protocol() in psmouse-base.c
 We are having trouble resyncing ALPS touchpads so disable it for now 
 Allow 2 invalid packets without resetting device 
	
	  Even though we did not allocate psmouse->private we do free
	  it here.
	
	  ALPS cs19 is a trackpoint-only device, and uses different
	  protocol than DualPoint ones, so we return -EINVAL here and let
	  trackpoint.c drive this device. If the trackpoint driver is not
	  enabled, the device will fall back to a bare PS2 mouse.
	  If ps2_command() fails here, we depend on the immediately
	  followed psmouse_reset() to reset the device to normal state.
	
	  Reset the device to make sure it is fully operational:
	  on some laptops, like certain Dell Latitudes, we may
	  fail to properly detect presence of trackstick if device
	  has not been reset.
		
		  Destroy alps_data structure we allocated earlier since
		  this was just a "trial run". Otherwise we'll keep it
		  to be used by alps_init() which has to be called if
		  we succeed and set_properties is true.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2017 Red Hat, Inc
		
		  Here would be a good place to check if device is actually
		  present, but it seems that SMBus will not respond unless we
		  fully reset PS2 connection.  So cross our fingers, and try
		  to switch over, hopefully our system will not have too many
		  "host notify" I2C adapters.
  This schedules removal of SMBus companion device. We have to do
  it in a separate tread to avoid deadlocking on psmouse_mutex in
  case the device has a trackstick (which is also driven by psmouse).
  Note that this may be racing with i2c adapter removal, but we
  can't do anything about that: i2c automatically destroys clients
  attached to an adapter that is being removed. This has to be
  fixed in i2c core.
 We have our(?) device, stop iterating i2c bus. 
 Bind to already existing adapters right away 
 We have our companion device 
	
	  If we did not create i2c device we will not need platform
	  data even if we are leaving breadcrumbs.
  Cypress APA trackpad with I2C interface
  Author: Dudley Du <dudl@cypress.com>
  Further cleanup and restructuring by:
    Daniel Kurtz <djkurtz@chromium.org>
    Benson Leung <bleung@chromium.org>
  Copyright (C) 2011-2015 Cypress Semiconductor, Inc.
  Copyright (C) 2011-2012 Google, Inc.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive for
  more details.
 Macro for register map group offset. 
 Unit: us 
  CYAPA trackpad device states.
  Used in register 0x00, bit1-0, DeviceStatus field.
  Other values indicate device is in an abnormal state and must be reset.
	
	  high bits or xy position value
	  bit 7 - 4: high 4 bits of x position value
	  bit 3 - 0: high 4 bits of y position value
 low 8 bits of x position value. 
 low 8 bits of y position value. 
 id range is 1 - 15.  It is incremented with every new touch. 
	
	  bit 0 - 1: device status
	  bit 3 - 2: power mode
	  bit 6 - 4: reserved
	  bit 7: interrupt valid bit
	
	  bit 7 - 4: number of fingers currently touching pad
	  bit 3: valid data check bit
	  bit 2: middle mechanism button state if exists
	  bit 1: right mechanism button state if exists
	  bit 0: left mechanism button state if exists
 CYAPA reports up to 5 touches per packet. 
 Always be 0xff 
 command code: 0x39 
 8-byte security key 
 Calculated using bytes 12 - 75 
 Calculated using bytes 0-76 
 for byte readwrite command 
 for group registers readwrite command 
 for register block readwrite command 
 register block readwrite command in bootloader mode 
 register block readwrite command in operational mode 
 maps generic CYAPA_CMD_ code to the I2C equivalent 
 CYAPA_CMD_SOFT_RESET 
 CYAPA_CMD_POWER_MODE 
 CYAPA_CMD_DEV_STATUS 
 CYAPA_CMD_GROUP_DATA 
 CYAPA_CMD_GROUP_CMD 
 CYAPA_CMD_GROUP_QUERY 
 CYAPA_CMD_BL_STATUS 
 CYAPA_CMD_BL_HEAD 
 CYAPA_CMD_BL_CMD 
 CYAPA_CMD_BL_DATA 
 CYAPA_CMD_BL_ALL 
 CYAPA_CMD_BLK_PRODUCT_ID 
 CYAPA_CMD_BLK_HEAD 
 CYAPA_CMD_MAX_BASELINE 
 CYAPA_CMD_MIN_BASELINE 
 CYAPA_CMD_SOFT_RESET 
 CYAPA_CMD_POWER_MODE 
 CYAPA_CMD_DEV_STATUS 
 CYAPA_CMD_GROUP_DATA 
 CYAPA_CMD_GROUP_CMD 
 CYAPA_CMD_GROUP_QUERY 
 CYAPA_CMD_BL_STATUS 
 CYAPA_CMD_BL_HEAD 
 CYAPA_CMD_BL_CMD 
 CYAPA_CMD_BL_DATA 
 CYAPA_CMD_BL_ALL 
 CYAPA_CMD_BLK_PRODUCT_ID 
 CYAPA_CMD_BLK_HEAD 
 CYAPA_CMD_MAX_BASELINE 
 CYAPA_CMD_MIN_BASELINE 
  cyapa_smbus_read_block - perform smbus block read command
  @cyapa  - private data structure of the driver
  @cmd    - the properly encoded smbus command
  @len    - expected length of smbus command result
  @values - buffer to store smbus command result
  Returns negative errno, else the number of bytes written.
  Note:
  In trackpad device, the memory block allocated for I2C register map
  is 256 bytes, so the max read block for I2C bus is 256 bytes.
 read specific block registers command. 
  Determine the Gen3 trackpad device's current operating state.
 Parse based on Gen3 characteristic registers and bits 
		
		  Normal state after power on or reset,
		  REG_BL_STATUS == 0x11, firmware image checksum is valid.
		  REG_BL_STATUS == 0x10, firmware image checksum is invalid.
		
		  Normal state when running in operational mode,
		  may also not in full power state or
		  busying in command process.
 Finger number data is valid. 
 Op state when first two registers overwritten with 0x00 
  Enter bootloader by soft resetting the device.
  If device is already in the bootloader, the function just returns.
  Otherwise, reset the device; after reset, device enters bootloader idle
  state immediately.
  Returns:
    0        on success
    -EAGAIN  device was reset, but is not now in bootloader idle state
    < 0      if the device never responds within the timeout
 Already in BL_IDLE. Skipping reset. 
 For some shipset, max waiting time is 1~2s. 
 Wait for bootloader to activate; takes between 2 and 12 seconds 
 Wait for bootloader to switch to idle state; should take < 100ms 
  Exit bootloader
  Send bl_exit command, then wait 50 - 100 ms to let device transition to
  operational mode.  If this is the first time the device's firmware is
  running, it can take up to 2 seconds to calibrate its sensors.  So, poll
  the device's new state for up to 2 seconds.
  Returns:
    -EIO    failure while reading from device
    -EAGAIN device is stuck in bootloader, bc it has invalid firmware
    0       device is supported and in operational mode
	
	  Wait for bootloader to exit, and operation mode to start.
	  Normally, this takes at least 50 ms.
	
	  In addition, when a device boots for the first time after being
	  updated to new firmware, it must first calibrate its sensors, which
	  can take up to an additional 2 seconds. If the device power is
	  running low, this may take even longer.
  Verify the integrity of a CYAPA firmware image file.
  The firmware image file is 30848 bytes, composed of 482 64-byte blocks.
  The first 2 blocks are the firmware header.
  The next 480 blocks are the firmware image.
  The first two bytes of the header hold the header checksum, computed by
  summing the other 126 bytes of the header.
  The last two bytes of the header hold the firmware image checksum, computed
  by summing the 30720 bytes of the image modulo 0xffff.
  Both checksums are stored little-endian.
 Firmware must match exact 30848 bytes = 482 64-byte blocks. 
 Verify header block 
 Verify firmware image 
  Write a |len| byte long buffer |buf| to the device, by chopping it up into a
  sequence of smaller |CYAPA_CMD_LEN|-length write commands.
  The data bytes for a write command are prepended with the 1-byte offset
  of the data relative to the start of |buf|.
  A firmware block write command writes 64 bytes of data to a single flash
  page in the device.  The 78-byte block write command has the format:
    <0xff> <CMD> <Key> <Start> <Data> <Data-Checksum> <CMD Checksum>
   <0xff>  - every command starts with 0xff
   <CMD>   - the write command value is 0x39
   <Key>   - write commands include an 8-byte key: { 00 01 02 03 04 05 06 07 }
   <Block> - Memory Block number (address  64) (16-bit, big-endian)
   <Data>  - 64 bytes of firmware image data
   <Data Checksum> - sum of 64 <Data> bytes, modulo 0xff
   <CMD Checksum> - sum of 77 bytes, from 0xff to <Data Checksum>
  Each write command is split into 5 i2c write transactions of up to 16 bytes.
  Each transaction starts with an i2c register offset: (00, 10, 20, 30, 40).
 Set write command and security key bytes. 
 Wait for write to finish 
 Programming for one block can take about 100ms. 
 Check block write command result status. 
 Ignore WATCHDOG bit and reserved bits. 
 First write data, starting at byte 128 of fw->data 
 Then write checksum 
 max recalibration timeout 2s. 
		
		  For this recalibration, the max time will not exceed 2s.
		  The average time is approximately 500 - 700 ms, and we
		  will check the status every 100 - 200ms.
 Try for 30 to 60 ms 
  cyapa_get_wait_time_for_pwr_cmd
  Compute the amount of time we need to wait after updating the touchpad
  power mode. The touchpad needs to consume the incoming power mode set
  command at the current clock rate.
  Set device power mode
  Write to the field to configure power state. Power states include :
    Full : Max scans and report rate.
    Idle : Report rate set by user specified time.
    ButtonOnly : No scans for fingers. When the button is triggered,
      a slave interrupt is asserted to notify host to wake up.
    Off : Only awake for i2c commands from host. No function for button
      or touch sensors.
  The power_mode command should conform to the following :
    Full : 0x3f
    Idle : Configurable from 20 to 1000ms. See note below for
      cyapa_sleep_time_to_pwr_cmd and cyapa_pwr_cmd_to_sleep_time
    ButtonOnly : 0x01
    Off : 0x00
  Device power mode can only be set when device is in operational mode.
	
	  Return early if the power mode to set is the same as the current
	  one.
	
	  Wait for the newly set power command to go in at the previous
	  clock speed (scanrate) used by the touchpad firmware. Not
	  doing so before issuing the next command may result in errors
	  depending on the command's content.
 Try to polling in 120Hz, read may fail, just ignore it. 
	
	  This value will be updated again when entered application mode.
	  If TP failed to enter application mode, this fw version values
	  can be used as a reference.
	  This firmware version valid when fw image checksum is valid.
  Check if device is operational.
  An operational device is responding, has exited bootloader, and has
  firmware supported by this driver.
  Returns:
    -EBUSY  no device or in bootloader
    -EIO    failure while reading from device
    -EAGAIN device is still in bootloader
            if ->state = CYAPA_STATE_BL_IDLE, device has invalid firmware
    -EINVAL device is in operational mode, but not supported by this driver
    0       device is supported
 Try to get firmware version in bootloader mode. 
		
		  Reading query data before going back to the full mode
		  may cause problems, so we set the power mode first here.
 Only support firmware protocol gen3 
 Only support product ID starting with CYTRA 
  Return false, do not continue process
  Return true, continue process.
 Not gen3 irq command response, skip for continue. 
	
	  Driver in detecting or other interface function processing,
	  so, stop cyapa_gen3_irq_handler to continue process to
	  avoid unwanted to error detecting and processing.
	 
	  And also, avoid the periodically asserted interrupts to be processed
	  as touch inputs when gen3 failed to launch into application mode,
	  which will cause gen3 stays in bootloader mode.
 Note: touch->id range is 1 to 15; slots are 0 to 14. 
  This function will be called in the cyapa_gen3_set_power_mode function,
  and it's known that it may failed in some situation after the set power
  mode command was sent. So this function is aimed to avoid the knwon
  and unwanted output I2C and data parse error messages.
 SPDX-License-Identifier: GPL-2.0-only
  PXA930 track ball mouse driver
  Copyright (C) 2007 Marvell International Ltd.
  2008-02-28: Yong Yao <yaoyong@marvell.com>
              initial version
 Trackball Controller Register Definitions 
 Memory Mapped Register 
	 According to the spec software must read TBCNTR twice:
	  if the read value is the same, the reading is valid
 For TBCR, we need to wait for a while to make sure it has been modified. 
 According to spec, need to write the filters of x,y to 0xf first! 
 According to spec, set TBCR_TBRST first, before clearing it! 
 Held in reset, gate the 32-KHz input clock off 
 held the module in reset, will be enabled in open() 
 SPDX-License-Identifier: GPL-2.0-only
  Elan I2CSMBus Touchpad driver - I2C interface
  Copyright (c) 2013 ELAN Microelectronics Corp.
  Author: 林政維 (Duson Lin) <dusonlin@emc.com.tw>
  Based on cyapa driver:
  copyright (c) 2011-2012 Cypress Semiconductor, Inc.
  copyright (c) 2011-2012 Google, Inc.
  Trademarks are the property of their respective owners.
 Elan i2c commands 
 Wait for the device to reset 
 get reset acknowledgement 0000 
	
	  Not all versions of firmware implement "get pattern" command.
	  When this command is not implemented the device will respond
	  with 0xFF 0xFF, which we will treat as "old" pattern 0.
 Get FW in which mode	(IAP_MODEMAIN_MODE)  
 Reset IC 
 Set flash key
 Wait for FW IAP initialization 
 Check if we are in IAP mode or not 
 Set flash key again 
 Wait for FW IAP initialization 
 read back to check we actually enabled successfully. 
 recode checksum at last two bytes 
 Wait for FW to update one page ROM data. 
  Cypress APA trackpad with I2C interface
  Author: Dudley Du <dudl@cypress.com>
  Further cleanup and restructuring by:
    Daniel Kurtz <djkurtz@chromium.org>
    Benson Leung <bleung@chromium.org>
  Copyright (C) 2011-2015 Cypress Semiconductor, Inc.
  Copyright (C) 2011-2012 Google, Inc.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive for
  more details.
 Returns 0 on success, else negative errno on failure. 
  cyapa_i2c_write - Execute i2c block data write operation
  @cyapa: Handle to this driver
  @reg: Offset of the data to written in the register map
  @len: number of bytes to write
  @values: Data to be written
  Return negative errno code on error; return zero when success.
  Query device for its current operating state.
 The i2c address of gen4 and gen5 trackpad device must be even. 
	
	  Get trackpad status by reading 3 registers starting from 0.
	  If the device is in the bootloader, this will be BL_HEAD.
	  If the device is in operation mode, this will be the DATA regs.
	 
	
	  On smbus systems in OP mode, the i2c_reg_read will fail with
	  -ETIMEDOUT.  In this case, try again using the smbus equivalent
	  command.  This should return a BL_HEAD indicating CYAPA_STATE_OP.
	
	  Detect trackpad protocol based on characteristic registers and bits.
 For old Gen5 trackpads detecting. 
		
		  Write 0x00 0x00 to trackpad device to force update its
		  status, then redo the detection again.
  Poll device for its status in a loop, waiting up to timeout for a response.
  When the device switches state, it usually takes ~300 ms.
  However, when running a new firmware image, the device must calibrate its
  sensors, which can take as long as 2 seconds.
  Note: The timeout has granularity of the polling rate, which is 100 ms.
  Returns:
    0 when the device eventually responds with a valid non-busy state.
    -ETIMEDOUT if device never responds (too many -EAGAIN)
    -EAGAIN    if bootload is busy, or unknown state.
    < 0        other errors
  Check if device is operational.
  An operational device is responding, has exited bootloader, and has
  firmware supported by this driver.
  Returns:
    -ENODEV no device
    -EBUSY  no device or in bootloader
    -EIO    failure while reading from device
    -ETIMEDOUT timeout failure for bus idle or bus no response
    -EAGAIN device is still in bootloader
            if ->state = CYAPA_STATE_BL_IDLE, device has invalid firmware
    -EINVAL device is in operational mode, but not supported by this driver
    0       device is supported
  Returns 0 on device detected, negative errno on no device detected.
  And when the device is detected and operational, it will be reset to
  full power active mode automatically.
		
		  though failed to set active power mode,
		  but still may be able to work in lower scan rate
		  when in operational mode.
 Means any product in eventcomm. 
 Finger position 
		
		  Orientation is the angle between the vertical axis and
		  the major axis of the contact ellipse.
		  The range is -127 to 127.
		  the positive direction is clockwise form the vertical axis.
		  If the ellipse of contact degenerates into a circle,
		  orientation is reported as 0.
		 
		  Also, for Gen5 trackpad the accurate of this orientation
		  value is value + (-30 ~ 30).
 Handle pointer emulation and unused slots in core 
 Register the device in input subsystem 
		
		  When input is NULL, TP must be in deep sleep mode.
		  In this mode, later non-power I2C command will always failed
		  if not bring it out of deep sleep mode firstly,
		  so must command TP to active mode here.
 Gen3 always using polling mode for command. 
  cyapa_sleep_time_to_pwr_cmd and cyapa_pwr_cmd_to_sleep_time
  These are helper functions that convert to and from integer idle
  times and register settings to write to the PowerMode register.
  The trackpad supports between 20ms to 1000ms scan intervals.
  The time will be increased in increments of 10ms from 20ms to 100ms.
  From 100ms to 1000ms, time will be increased in increments of 20ms.
  When Idle_Time < 100, the format to convert Idle_Time to Idle_Command is:
    Idle_Command = Idle Time  10;
  When Idle_Time >= 100, the format to convert Idle_Time to Idle_Command is:
    Idle_Command = Idle Time  20 + 5;
 0 on driver initialize and detected successfully, negative on failure. 
	
	  Set to hard code default, they will be updated with trackpad set
	  default values after probe and initialized.
 ops.initialize() is aimed to prepare for module communications. 
 Power down the device until we need it. 
 Avoid command failures when TP was in OFF state. 
 Reset to power OFF state to save power when no user open. 
		
		  Make sure only enable runtime PM when device is
		  in operational mode and input->users > 0.
 Interrupt event can be caused by host command to trackpad device. 
		
		  Interrupt event maybe from trackpad device input reporting.
			
			  Still in probing or in firmware image
			  updating or reading.
			
			  Apply runtime power management to touch report event
			  except the events caused by the command responses.
			  Note:
			  It will introduce about 20~40 ms additional delay
			  time in receiving for first valid touch report data.
			  The time is used to execute device runtime resume
			  process.
  sysfs interface
 CONFIG_PM_SLEEP 
	
	  When the suspend scanrate is changed, pm_runtime_get to resume
	  a potentially suspended device, update to the new pwr_cmd
	  and then pm_runtime_put to suspend into the new power mode.
 runtime is enabled until device is operational and opened. 
 CONFIG_PM 
	
	  Resume the potentially suspended device because doing FW
	  update on a device not in the FULL mode has a chance to
	  fail.
 Require IRQ support for firmware update commands. 
		
		  Force the input device to be registered after the firmware
		  image is updated, so if the corresponding parameters updated
		  in the new firmware image can taken effect immediately.
		
		  Whatever, do reinitialize to try to recover TP state to
		  previous state just as it entered fw update entrance.
	
	  Re-detect trackpad device states because firmware update process
	  will reset trackpad device into bootloader mode.
 Still running in bootloader mode. 
 Still running in bootloader mode. 
 Normal valid state. 
 Make sure there is something at this address 
 i2c isn't supported, use smbus 
 Disable IRQ until the device is opened 
	
	  Register the device in the input subsystem when it's operational.
	  Otherwise, keep in this driver, so it can be be recovered or updated
	  through the sysfs mode and update_fw interfaces by user or apps.
	
	  Runtime PM is enable only when device is in operational mode and
	  users in use, so need check it before disable it to
	  avoid unbalance warning.
	
	  Set trackpad device to idle mode if wakeup is allowed,
	  otherwise turn off.
	
	  Disable proximity interrupt when system idle, want true touch to
	  wake the system.
	
	  Update device states and runtime PM states.
	  Re-Enable proximity interrupt after enter operational mode.
 Gen3 trackpad with 0x67 I2C address. 
 Gen5 trackpad with 0x24 I2C address. 
 Gen6 trackpad with 0x24 I2C address. 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  Driver for simulating a mouse on GPIO lines.
  Copyright (C) 2007 Atmel Corporation
  Copyright (C) 2017 Linus Walleij <linus.walleij@linaro.org>
  struct gpio_mouse
  @scan_ms: the scan interval in milliseconds.
  @up: GPIO line for up value.
  @down: GPIO line for down value.
  @left: GPIO line for left value.
  @right: GPIO line for right value.
  @bleft: GPIO line for left button.
  @bmiddle: GPIO line for middle button.
  @bright: GPIO line for right button.
  This struct must be added to the platform_device in the board code.
  It is used by the gpio_mouse driver to setup GPIO lines and to
  calculate mouse movement.
  Timer function which is run every scan_ms ms when the device is opened.
  The dev input variable is set to the the input_dev pointer.
 Assign some default scanning time 
 work with hotplug and coldplug 
 SPDX-License-Identifier: GPL-2.0-only
  Synaptics NavPoint (PXA27x SSPSPI) driver.
  Copyright (C) 2012 Paul Parsons <lost.distance@yahoo.com>
  Synaptics Modular Embedded Protocol: Module Packet Format.
  Module header byte 2:0 = Length (# bytes that follow)
  Module header byte 4:3 = Control
  Module header byte 7:5 = Module Address
  Initialization values for SSCR0_x, SSCR1_x, SSSR_x.
 TIM = 1; No TUR interrupts 
 RIM = 1; No ROR interrupts 
 SSE = 1; SSP enabled 
 FRF = 0; Motorola SPI 
 DSS = 15; Data size = 16-bit 
 SCFR = 1; SSPSCLK only during transfers 
 SCLKDIR = 1; Slave mode 
 SFRMDIR = 1; Slave mode 
 RWOT = 1; Receive without transmit mode 
 RFT = 0; Receive FIFO threshold = 1 
 SPH = 1; SSPSCLK inactive 0.5 + 1 cycles 
 RIE = 1; Receive FIFO interrupt enabled 
 BCE = 1; Clear BCE 
 TUR = 1; Clear TUR 
 EOC = 1; Clear EOC 
 TINT = 1; Clear TINT 
 PINT = 1; Clear PINT 
 ROR = 1; Clear ROR 
  MEP Query $22: Touchpad Coordinate Range Query is not supported by
  the NavPoint module, so sampled values provide the default limits.
 Garbage (packet?) between reset and Hello packet 
 Module 0, NULL packet 
 Module 0, Absolute packet 
 Module 0, Hello packet 
 SSCR0_SSE written last 
 Wait until SSP port is ready for slave clock operations 
 HaRET does not disable devices before jumping into Linux 
 SPDX-License-Identifier: GPL-2.0-or-later
  Apple USB BCM5974 (Macbook Air and Penryn Macbook Pro) multitouch driver
  Copyright (C) 2008	   Henrik Rydberg (rydberg@euromail.se)
  Copyright (C) 2015      John Horan (knasher@gmail.com)
  The USB initialization and package decoding was made by
  Scott Shawcroft as part of the touchd user-space driver project:
  Copyright (C) 2008	   Scott Shawcroft (scott.shawcroft@gmail.com)
  The BCM5974 driver is based on the appletouch driver:
  Copyright (C) 2001-2004 Greg Kroah-Hartman (greg@kroah.com)
  Copyright (C) 2005      Johannes Berg (johannes@sipsolutions.net)
  Copyright (C) 2005	   Stelian Pop (stelian@popies.net)
  Copyright (C) 2005	   Frank Arnold (frank@scirocco-5v-turbo.de)
  Copyright (C) 2005	   Peter Osterlund (petero2@telia.com)
  Copyright (C) 2005	   Michael Hanselmann (linux-kernel@hansmi.ch)
  Copyright (C) 2006	   Nicolas Boichat (nicolas@boichat.ch)
 MacbookAir, aka wellspring 
 MacbookProPenryn, aka wellspring2 
 Macbook5,1 (unibody), aka wellspring3 
 MacbookAir3,2 (unibody), aka wellspring5 
 MacbookAir3,1 (unibody), aka wellspring4 
 Macbook8 (unibody, March 2011) 
 MacbookAir4,1 (unibody, July 2011) 
 MacbookAir4,2 (unibody, July 2011) 
 Macbook8,2 (unibody) 
 MacbookPro10,1 (unibody, June 2012) 
 MacbookPro10,2 (unibody, October 2012) 
 MacbookAir6,2 (unibody, June 2013) 
 MacbookPro12,1 (2015) 
 table of devices that work with this driver 
 MacbookAir1.1 
 MacbookProPenryn 
 Macbook5,1 
 MacbookAir3,2 
 MacbookAir3,1 
 MacbookPro8 
 MacbookAir4,1 
 MacbookAir4,2 
 MacbookPro8,2 
 MacbookPro10,1 
 MacbookPro10,2 
 MacbookAir6,2 
 MacbookPro12,1 
 Terminating entry 
 button data structure 
 constant 
 left button 
 relative x coordinate 
 relative y coordinate 
 trackpad header types 
 plain trackpad 
 button integrated in trackpad 
 additional header fields since June 2013 
 additional header field for pressure data 
 trackpad finger data offsets, le16-aligned 
 trackpad button data offsets 
 list of device capability bits 
 trackpad finger data block size 
 offset from header to finger struct 
 usb control message mode switch data 
 Wellspring initialization constants 
 trackpad finger structure, le16-aligned 
 zero when switching track finger 
 absolute x coodinate 
 absolute y coodinate 
 relative x coodinate 
 relative y coodinate 
 tool area, major axis 
 tool area, minor axis 
 16384 when point, else 15 bit angle 
 touch area, major axis 
 touch area, minor axis 
 zeros 
 pressure on forcetouch touchpad 
 one finger: varies, more fingers: constant 
 trackpad finger data size, empirically at least ten fingers 
 device-specific parameters 
 signal-to-noise ratio 
 device minimum reading 
 device maximum reading 
 device-specific configuration 
 the product id of this device 
 device capability bitmask 
 the endpoint of the button interface 
 data length of the button interface 
 the endpoint of the trackpad interface 
 type of trackpad interface 
 bytes in header block 
 data length of the trackpad interface 
 offset to button data 
 bytes in single finger block 
 offset from header to finger struct 
 usb control message length 
 usb control message value 
 usb control message index 
 usb control message mode switch index 
 usb control message mode switch on 
 usb control message mode switch off 
 finger pressure limits 
 finger width limits 
 horizontal limits 
 vertical limits 
 orientation limits 
 logical device structure 
 usb device 
 our interface 
 input dev 
 device configuration 
 serialize access to opensuspend 
 1: opened, 0: closed 
 button usb request block 
 button transferred data 
 trackpad usb request block 
 trackpad transferred data 
 finger index data 
 position array 
 slot assignments 
 trackpad finger block data, le16-aligned 
 logical signal quality 
 pressure signal-to-noise ratio 
 width signal-to-noise ratio 
 coordinate signal-to-noise ratio 
 orientation signal-to-noise ratio 
 device constants 
 return the device-specific configuration by device 
 convert 16-bit little endian to signed integer 
 setup which logical events to report 
 for synaptics only 
 finger touch area 
 finger approach area 
 finger orientation 
 finger position 
 report button data as logical button state 
 report trackpad data as logical trackpad state 
 later types report button events via integrated button only 
 Type 3 does not require a mode switch 
 read configuration 
 apply the mode switch 
 write configuration 
 control response ignored 
  The Wellspring trackpad, like many recent Apple trackpads, share
  the usb device with the keyboard. Since keyboards are usually
  handled by the HID system, the device ends up being handled by two
  modules. Setting up the device therefore becomes slightly
  complicated. To enable multitouch features, a mode switch is
  required, which is usually applied via the control interface of the
  device.  It can be argued where this switch should take place. In
  some drivers, like appletouch, the switch is made during
  probe. However, the hid module may also alter the state of the
  device, resulting in trackpad malfunction under certain
  circumstances. To get around this problem, there is at least one
  example that utilizes the USB_QUIRK_RESET_RESUME quirk in order to
  receive a reset_resume request rather than the normal resume.
  Since the implementation of reset_resume is equal to mode switch
  plus start_traffic, it seems easier to always do the switch when
  starting traffic on the device.
  The code below implements openclose and manual suspendresume.
  All functions may be called in random order.
  Opening a suspended device fails with EACCES - permission denied.
  Failing a resume leaves the device resumed but closed.
 find the product index 
 allocate memory for our device state and initialize it 
 setup urbs 
 create bcm5974 device 
 report driver capabilities via the version field 
 save our data pointer in this interface device 
 SPDX-License-Identifier: GPL-2.0-only
 	SEGA Dreamcast mouse driver
 	Based on driversusbusbmouse.c
 	Copyright (c) Yaegashi Takeshi, 2001
 	Copyright (c) Adrian McMenamin, 2008 - 2009
 allow the mouse to be used 
 SPDX-License-Identifier: GPL-2.0-only
  Fujitsu B-series Lifebook PS2 TouchScreen driver
  Copyright (c) 2005 Vojtech Pavlik <vojtech@suse.cz>
  Copyright (c) 2005 Kenan Esau <kenan.esau@conan.de>
  TouchScreen detection, absolute mode setting and packet layout is taken from
  Harald Hoyer's description of the device.
 Relative device 
 FLORA-ie 55mi 
 LifeBook B 
 LifeBook B 
 Lifebook B 
 Lifebook B-2130 
 Lifebook B213xB2150 
 Zephyr 
 Panasonic CF-18 
 Panasonic CF-28 
 Panasonic CF-29 
 Panasonic CF-72 
 Lifebook B142 
 report data 
	
	  Enable absolute output -- ps2_command fails always but if
	  you leave this call out the touchscreen will never send
	  absolute coordinates
 Clear default capabilities 
	
	  Use packet size = 3 even when using 6-byte protocol because
	  that's what POLL will return on Lifebooks (according to spec).
 SPDX-License-Identifier: GPL-2.0-only
  Driver for Virtual PS2 Mouse on VMware and QEMU hypervisors.
  Copyright (C) 2014, VMware, Inc. All Rights Reserved.
  Twin device code is hugely inspired by the ALPS driver.
  Authors:
    Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Thomas Hellstrom <thellstrom@vmware.com>
  Main commands supported by the vmmouse hypervisor port.
  Subcommands for VMMOUSE_PROTO_CMD_ABSPOINTER_COMMAND
  VMMouse Restrict command
  struct vmmouse_data - private data structure for the vmmouse driver
  @abs_dev: "Absolute" device used to report absolute mouse movement.
  @phys: Physical path for the absolute device.
  @dev_name: Name attribute name for the absolute device.
  Hypervisor-specific bi-directional communication channel
  implementing the vmmouse protocol. Should never execute on
  bare metal hardware.
  vmmouse_report_button - report button state on the correct input device
  @psmouse:  Pointer to the psmouse struct
  @abs_dev:  The absolute input device
  @rel_dev:  The relative input device
  @pref_dev: The preferred device for reporting
  @code:     Button code
  @value:    Button value
  Report @value and @code on @pref_dev, unless the button is already
  pressed on the other device, in which case the state is reported on that
  device.
  vmmouse_report_events - process events on the vmmouse communications channel
  @psmouse: Pointer to the psmouse struct
  This function pulls events from the vmmouse communications channel and
  reports them on the correct (absolute or relative) input device. When the
  communications channel is drained, or if we've processed more than 255
  psmouse commands, the function returns PSMOUSE_FULL_PACKET. If there is a
  host- or synchronization error, the function returns PSMOUSE_BAD_DATA in
  the hope that the caller will reset the communications channel.
 See if we have motion data. 
			
			  After a few attempts this will result in
			  reconnect.
 Now get it 
		
		  And report what we've got. Prefer to report button
		  events on the same device where we report motion events.
		  This doesn't work well with the mouse wheel, though. See
		  below. Ideally we would want to report that on the
		  preferred device as well.
 Xorg seems to ignore wheel events on absolute devices 
  vmmouse_process_byte - process data on the ps2 channel
  @psmouse: Pointer to the psmouse struct
  When the ps2 channel indicates that there is vmmouse data available,
  call vmmouse channel processing. Otherwise, continue to accept bytes. If
  there is a synchronization or communication data error, return
  PSMOUSE_BAD_DATA in the hope that the caller will reset the mouse.
  vmmouse_disable - Disable vmmouse
  @psmouse: Pointer to the psmouse struct
  Tries to disable vmmouse mode.
  vmmouse_enable - Enable vmmouse and request absolute mode.
  @psmouse: Pointer to the psmouse struct
  Tries to enable vmmouse mode. Performs basic checks and requests
  absolute vmmouse mode.
  Returns 0 on success, -ENODEV on failure.
	
	  Try enabling the device. If successful, we should be able to
	  read valid version ID back from it.
	
	  See if version ID can be retrieved.
 single item ,
	
	  Restrict ioport access, if possible.
  Array of supported hypervisors.
  vmmouse_check_hypervisor - Check if we're running on a supported hypervisor
  vmmouse_detect - Probe whether vmmouse is available
  @psmouse: Pointer to the psmouse struct
  @set_properties: Whether to set psmouse name and vendor
  Returns 0 if vmmouse channel is available. Negative error code if not.
 Check if the device is present 
  vmmouse_disconnect - Take down vmmouse driver
  @psmouse: Pointer to the psmouse struct
  Takes down vmmouse driver and frees resources set up in vmmouse_init().
  vmmouse_reconnect - Reset the ps2 - and vmmouse connections
  @psmouse: Pointer to the psmouse struct
  Attempts to reset the mouse connections. Returns 0 on success and
  -1 on failure.
  vmmouse_init - Initialize the vmmouse driver
  @psmouse: Pointer to the psmouse struct
  Requests the device and tries to enable vmmouse mode.
  If successful, sets up the input device for relative movement events.
  It also allocates another input device and sets it up for absolute motion
  events. Returns 0 on success and -1 on failure.
 Set up and register absolute device 
 Mimic name setup for relative device in psmouse-base.c 
 Set absolute device capabilities 
 Add wheel capability to the relative device 
 SPDX-License-Identifier: GPL-2.0-only
   Atari mouse driver for Linuxm68k
   Copyright (c) 2005 Michael Schmitz
   Based on:
   Amiga mouse driver for Linuxm68k
   Copyright (c) 2000-2002 Vojtech Pavlik
  The low level init and interrupt stuff is handled in archmm68katariatakeyb.c
  (the keyboard ACIA also handles the mouse and joystick data, and the keyboard
  interrupt is shared with the MIDI ACIA so MIDI data also get handled there).
  This driver only deals with handing key events off to the input layer.
  Largely based on the old:
  Atari Mouse Driver for Linux
  by Robert de Vries (robert@and.nl) 19Jul93
  16 Nov 1994 Andreas Schwab
  Compatibility with busmouse
  Support for three button mouse (shamelessly stolen from MiNT)
  third button wired to one of the joystick directions on joystick 1
  19960211 Andreas Schwab
  Module support
  Allow multiple open's
  Converted to use new generic busmouse code.  5 Apr 1998
    Russell King <rmk@arm.uk.linux.org>
 only relative events get here 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1999-2001 Vojtech Pavlik
   Based on the work of:
 	Teemu Rantanen		Derrick Cole
 	Peter Cervasio		Christoph Niemann
 	Philip Blundell		Russell King
 	Bob Harris
  Inport (ATI XL and Microsoft) busmouse driver for Linux
 SPDX-License-Identifier: GPL-2.0-only
  Synaptics TouchPad PS2 mouse driver
    2003 Dmitry Torokhov <dtor@mail.ru>
      Added support for pass-through port. Special thanks to Peter Berg Larsen
      for explaining various Synaptics quirks.
    2003 Peter Osterlund <petero2@telia.com>
      Ported to 2.5 input device infrastructure.
    Copyright (C) 2001 Stefan Gmeiner <riddlebox@freesurf.ch>
      start merging tpconfig and gpm code to a xfree-input module
      adding some changes and extensions (ex. 3rd and 4th button)
    Copyright (c) 1997 C. Scott Ananian <cananian@alumni.priceton.edu>
    Copyright (c) 1998-2000 Bruce Kalk <kall@compass.com>
      code for the special synaptics commands (from the tpconfig-source)
  Trademarks are the property of their respective owners.
  The xy limits are taken from the Synaptics TouchPad interfacing Guide,
  section 2.3.2, which says that they should be valid regardless of the
  actual size of the sensor.
  Note that newer firmware allows querying device for maximum useable
  coordinates.
 Size in bits of absolute position values reported by the hardware 
  These values should represent the absolute maximum value that will
  be reported for a positive position value. Some Synaptics firmware
  uses this value to indicate a finger near the edge of the touchpad
  whose precise position cannot be determined.
  At least one touchpad is known to report positions in excess of this
  value which are actually negative values truncated to the 13-bit
  reporting range. These values have never been observed to be lower
  than 8184 (i.e. -8), so we treat all values greater than 8176 as
  negative and any other value as positive.
 maximum ABS_MT_POSITION displacement (in mm) 
 	Stuff we need even when we do not want native Synaptics support
  Set the synaptics touchpad mode byte by special commands
 reset touchpad back to relative mode, gestures enabled 
 This list has been kindly provided by Synaptics. 
 Helix 
 T431s, L440, L540, T540, W540, X1 Carbon 2nd 
 X240 
 T440 
 X1 Carbon 2nd 
 T440s 
 Yoga 
 S540 
 Edge E431 
 Edge E531 
 L440 
 Edge E440E540 
 all of the topbuttonpad_pnp_ids are valid, we just add some extras 
 X1 Carbon 3 
 X250 
 Yoga 11e 
 W541 
 P50 
 T560 
 T470s 
 T470s 
 T480 
 X1 Carbon Gen 5 (2017) - ElanALPS trackpoint 
 X1 Carbon G5 (Elantech) 
 X1 Carbon 6 
 X1 Carbon 6 
 T480 
 X280 
 X280 -> ALPS trackpoint 
 X1 Extreme Gen 1  P1 Gen 1 
 T580 
 X1 Extreme Gen 2  P1 Gen 2 
 T450s 
 L470  
 E480 
 E580 
 T14 Gen 1 
 HP EliteBook 840 G4 
 HP 15-ay000 
 HP Spectre X360 13-w013dx 
 HP Envy 13-ad105ng 
  Send a command to the synaptics touchpad by special commands
  Identify Touchpad
  See also the SYN_ID_ macros
  Read the model-id bytes from the touchpad
  see also SYN_MODEL_ macros
  Read the firmware id from the touchpad
  Read the board id and the "More Extended Queries" from the touchpad
  The board id is encoded in the "QUERY MODES" response
 firmwares prior 7.5 have no board_id encoded 
  Read the capability-bits from the touchpad
  see also the SYN_CAP_ macros
	
	  Older firmwares had submodel ID fixed to 0x47
	
	  Unless capExtended is set the rest of the flags should be ignored
			
			  if nExtBtn is greater than 8 it should be considered
			  invalid and treated as 0
  Read touchpad resolution and maximum reported coordinates
  Resolution is left zero if touchpad does not support the query
 x resolution in unitsmm 
 y resolution in unitsmm 
	     
	       Firmware v8.1 does not report proper number of extended
	       capabilities, but has been proven to report correct min
	       coordinates.
 CONFIG_MOUSE_PS2_SYNAPTICS || CONFIG_MOUSE_PS2_SYNAPTICS_SMBUS 
 	Synaptics communications functions
  Synaptics touchpads report the y coordinate from bottom to top, which is
  opposite from what userspace expects.
  This function is used to invert y before reporting.
  Apply quirk(s) if the hardware matches
 	Synaptics pass-through PS2 port support
 indicates that we want pass-through port 
 adjust the touchpad to child's choice of protocol 
 	Functions to interpret the absolute mode packets
 Gesture packet: (x, y, z) half resolution 
 AGM-CONTACT packet: we are only interested in the count 
			
			  ForcePads, like Clickpads, use middle button
			  bits to report primary button clicks.
			  Unfortunately they report primary button not
			  only when user presses on the pad above certain
			  threshold, but also when there are more than one
			  finger on the touchpad, which interferes with
			  out multi-finger gestures.
 No contacts 
				
				  Single-finger touch with pressure above
				  the threshold. If pressure stays long
				  enough, we'll start reporting primary
				  button. We rely on the device continuing
				  sending data even if finger does not
				  move.
			
			  Clickpad's button is transmitted as middle button,
			  however, since it is primary button, we will report
			  it as BTN_LEFT.
	
	  Convert wrap-around values to negative. (X|Y)_MAX_POSITIVE
	  is used by some firmware to indicate a finger at the edge of
	  the touchpad whose precise position cannot be determined, so
	  convert these values to the maximum axis value.
 Bug in FW 8.1 & 8.2, buttons are reported only when ExtBit is 1 
	
	  This generation of touchpads has the trackstick buttons
	  physically wired to the touchpad. Re-route them through
	  the pass-through interface.
 The trackstick expects at most 3 buttons 
 Don't use active slot count to generate BTN_TOOL events. 
 Send the number of fingers reported by touchpad itself. 
	
	  Update mt_state using the new finger count and current mt_state.
 Send resulting input events to user space 
 Advanced gesture mode also sends multi finger data 
   called for each full received packet from the touchpad
				
				  SYN_MODEL_PEN(info->model_id): even if
				  the device supports pen, we treat it as
				  a single finger.
	 Post events
	  BTN_TOUCH has to be first as mousedev relies on it when doing
	  absolute -> relative conversion
 Full packet received 
 	Driver initializationcleanup functions
 Reset default psmouse capabilities 
 Things that apply to both modes 
 Clickpads report only left button 
 Relative mode 
 Absolute mode 
 Image sensors can report per-contact pressure 
 Image sensors can signal 4 and 5 finger clicks 
		
		  Profile sensor in CR-48 tracks contacts reasonably well,
		  other non-image sensors with AGM use semi-mt.
		
		  For semi-mt devices we send ABS_XY ourselves instead of
		  input_mt_report_pointer_emulation. But
		  input_mt_init_slots() resets the fuzz to 0, leading to a
		  filtered ABS_MT_POSITION_X but an unfiltered ABS_X
		  position. Let's re-initialize ABS_XY here.
	
	  We might have left a breadcrumb when trying to
	  set up SMbus companion.
			
			  On some boxes, right after resuming, the touchpad
			  needs some time to finish initializing (I assume
			  it needs time to calibrate) and start responding
			  to Synaptics-specific queries, so let's wait a
			  bit.
 Toshiba Satellite 
 Toshiba Dynabook 
 Toshiba Portege M300 
 Toshiba Portege M300 
 OLPC XO-1 or XO-1.5 
 Cr-48 Chromebook (Codename Mario) 
	
	  Unfortunately ForcePad capability is not exported over PS2,
	  so we have to resort to checking PNP IDs.
	
	  Encode touchpad model so that it can be used to set
	  input device->id.version and be visible to userspace.
	  Because version is __u16 we have to drop something.
	  Hardware info bits seem to be good candidates as they
	  are documented to be for Synaptics corp. internal use.
 Relative mode follows standard PS2 mouse protocol 
 Synaptics can usually stay in sync without extra help 
	
	  Toshiba's KBC seems to have trouble handling data from
	  Synaptics at full rate.  Switch to a lower rate (roughly
	  the same rate as a standard PS2 mouse).
	
	  The OLPC XO has issues with Synaptics' absolute mode; the constant
	  packet spew overloads the EC such that key presses on the keyboard
	  are missed.  Given that, don't even attempt to use Absolute mode.
	  Relative mode seems to work just fine.
 CONFIG_MOUSE_PS2_SYNAPTICS 
 CONFIG_MOUSE_PS2_SYNAPTICS 
  The newest Synaptics device can use a secondary bus (called InterTouch) which
  provides a better bandwidth and allow a better control of the touchpads.
  This is used to decide if we need to use this bus or not.
  synaptics_setup_intertouch - called once the PS2 devices are enumerated
  and decides to instantiate a SMBus InterTouch device.
 CONFIG_MOUSE_PS2_SYNAPTICS_SMBUS 
 CONFIG_MOUSE_PS2_SYNAPTICS_SMBUS 
 Forcepads need F21, which is not ready 
		
		  Not using any flavor of Synaptics support, so clean up
		  SMbus breadcrumbs, if any.
 CONFIG_MOUSE_PS2_SYNAPTICS || CONFIG_MOUSE_PS2_SYNAPTICS_SMBUS 
 CONFIG_MOUSE_PS2_SYNAPTICS || CONFIG_MOUSE_PS2_SYNAPTICS_SMBUS 
 SPDX-License-Identifier: GPL-2.0-or-later
  USB Synaptics device driver
   Copyright (c) 2002 Rob Miller (rob@inpharmatica . co . uk)
   Copyright (c) 2003 Ron Lee (ron@debian.org)
 	cPad driver for kernel 2.4
   Copyright (c) 2004 Jan Steinhoff (cpad@jan-steinhoff . de)
   Copyright (c) 2004 Ron Lee (ron@debian.org)
 	rewritten for kernel 2.6
   cPad display character device part is not included. It can be found at
   http:jan-steinhoff.delinuxsynaptics-usb.html
  Bases on:	usb_skeleton.c v2.2 by Greg Kroah-Hartman
 		drivershidusbhidusbmouse.c by Vojtech Pavlik
 		driversinputmousesynaptics.c by Peter Osterlund
  Trademarks are the property of their respective owners.
  There are three different types of Synaptics USB devices: Touchpads,
  touchsticks (or trackpoints), and touchscreens. Touchpads are well supported
  by this driver, touchstick support has not been tested much yet, and
  touchscreens have not been tested at all.
  Up to three alternate settings are possible:
 	setting 0: one int endpoint for relative movement (used by usbhid.ko)
 	setting 1: one int endpoint for absolute finger position
 	setting 2 (cPad only): one int endpoint for absolute finger position and
 		   two bulk endpoints for the display (inout)
  This driver uses setting 1.
 Synaptics USB TouchPad 
 Integrated USB TouchPad 
 Synaptics cPad 
 Synaptics TouchScreen 
 Synaptics USB Styk 
 Synaptics USB WheelPad 
 Composite USB TouchPad 
 Wireless TouchPad 
 DisplayPad 
 For cPad 
 Composite device (TP + stick) 
 serialize access to opensuspend 
 input device related data structures 
 characteristics of the device 
 pen, pretend its a finger 
	
	  Post events
	  BTN_TOUCH has to be first as mousedev relies on it when doing
	  absolute -> relative conversion
 Check our status in case we need to bail out early. 
 Device went away so don't keep trying to read from it. 
 we found our interrupt in endpoint 
		
		  This is a combo device, we need to set proper
		  capability, depending on the interface.
 SPDX-License-Identifier: GPL-2.0-only
  Elan I2CSMBus Touchpad driver
  Copyright (c) 2013 ELAN Microelectronics Corp.
  Author: 林政維 (Duson Lin) <dusonlin@emc.com.tw>
  Author: KT Liao <kt.liao@emc.com.tw>
  Version: 1.6.3
  Based on cyapa driver:
  copyright (c) 2011-2012 Cypress Semiconductor, Inc.
  copyright (c) 2011-2012 Google, Inc.
  Trademarks are the property of their respective owners.
 quirks to control the device 
 The main device structure 
 trackpoint input node 
 for fw update 
 Various quirks 
 unknown ic type clear value 
 Attempt to power the chip back up 
 ASUS EeeBook X205TA 
	
	  Some ASUS devices were shipped with firmware that requires
	  touchpads to be woken up first, before attempting to switch
	  them into absolute reporting mode.
	
	  pattern <= 0x01:
	 	(value from firmware)  10 + 790 = dpi
	  else
	 	((value from firmware) + 3)  100 = dpi
	
	  We also have to convert dpi to dotsmm (10254 to avoid floating
	  point).
 size is the maximum + 1 
  IAP firmware updater related routines
 Wait WDT reset and power on reset 
 Reinitialize TP after fw is updated 
  SYSFS attributes
 Look for a firmware with the product id appended. 
 Firmware file must match signature data 
 Wait 250ms before checking if calibration has completed. 
 calibration done 
  Elan isr functions
			
			  To avoid treating large finger as palm, let's reduce
			  the width x and y per trace.
	
	  When device is connected to i2c bus, when all IAP page writes
	  complete, the driver will receive interrupt and must read
	  0000 to confirm that IAP is finished.
  Elan initialization functions
 Set up ST parameters 
 And MT parameters 
 Make sure there is something at this address 
 Initialize the touchpad. 
 Set up input device properties based on queried parameters. 
	
	  Platform code (ACPI, DTS) should normally set up interrupt
	  for us, but in case it did not let's fall back to using falling
	  edge to be compatible with older Chromebooks.
	
	  Systems using device tree should set up wakeup via DTS,
	  the rest will configure device as wakeup source by default.
	
	  We are taking the mutex to make sure sysfs operations are
	  complete before we attempt to bring the device into low[er]
	  power mode.
 Enable wake from IRQ 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1999-2001 Vojtech Pavlik
   Based on the work of:
 	James Banks		Matthew Dillon
 	David Giller		Nathan Laredo
 	Linus Torvalds		Johan Myreen
 	Cliff Matthews		Philip Blundell
 	Russell King
  Logitech Bus Mouse Driver for Linux
 SPDX-License-Identifier: GPL-2.0-only
  Logitech PS2++ mouse driver
  Copyright (c) 1999-2003 Vojtech Pavlik <vojtech@suse.cz>
  Copyright (c) 2003 Eric Wong <eric@yhbt.net>
 Logitech mouse types 
 Logitech mouse features 
  Process a PS2++ or PS2T++ packet.
  Full packet accumulated, process it
 Logitech extended packet 
 Mouse extra info 
 buttons 4, 5, 6, 7, 8, 9, 10 info 
 TouchPad extra info 
 Standard PS2 motion data 
  ps2pp_cmd() sends a PS2++ command, sliced into two bit
  pieces through the SETRES command. This is needed to send extended
  commands to mice on notebooks that try to understand the PS2 protocol
  Ugly.
  SmartScroll  CruiseControl for some newer Logitech mice Defaults to
  enabled if we do nothing to it. Of course I put this in because I want it
  disabled :P
  1 - enabled (if previously disabled, also default)
  0 - disabled
  Support 800 dpi resolution _only_ if the user wants it (there are good
  reasons to not use it even if the mouse supports it, and of course there are
  also good reasons to use it, let the user decide).
 Simple 2-button mouse 
 MX1000 
 Cordless MouseMan Wheel 
 MX700 
 MX3100 receiver 
 T-CH11: TrackMan Marble 
 TrackMan FX 
 TrackMan with wheel 
 MX510 
 MX300 reports task button as side 
 MX500 
 MX310 
  Set up input device's properties based on the detected mouse model.
		
		  Set name to "Mouse" only when using PS2++,
		  otherwise let other protocols define suitable
		  name
  Logitech magic init. Detect whether the mouse is a Logitech one
  and its exact model and try turning on extended protocol for ones
  that support it.
  Do Logitech PS2++  PS2T++ magic init.
 Touch Pad 3 
 Unprotect RAM 
 Enable features 
 Enable PS2++ 
 Magic knock 
  Cypress APA trackpad with I2C interface
  Author: Dudley Du <dudl@cypress.com>
  Copyright (C) 2014-2015 Cypress Semiconductor, Inc.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive for
  more details.
 Macro of TSG firmware image 
 Macro of PIP interface 
 Special for old Gen5 TP. 
 Macro of Gen5 
 Unit: ms 
 Unit: ms 
 The offset only valid for retrieve PWC and panel scan commands 
	
	  Bit 7 - 3: reserved
	  Bit 2 - 0: touch type;
	             0 : standard finger;
	             1 : proximity (Start supported in Gen5 TP).
	             2 : finger hover (defined, but not used yet.)
	             3 - 15 : reserved.
	
	  Bit 7: indicates touch liftoff status.
	 		0 : touch is currently on the panel.
	 		1 : touch record indicates a liftoff.
	  Bit 6 - 5: indicates an event associated with this touch instance
	 		0 : no event
	 		1 : touchdown
	 		2 : significant displacement (> active distance)
	 		3 : liftoff (record reports last known coordinates)
	  Bit 4 - 0: An arbitrary ID tag associated with a finger
	 		to allow tracking a touch as it moves around the panel.
 Bit 7 - 0 of X-axis coordinate of the touch in pixel. 
 Bit 15 - 8 of X-axis coordinate of the touch in pixel. 
 Bit 7 - 0 of Y-axis coordinate of the touch in pixel. 
 Bit 15 - 8 of Y-axis coordinate of the touch in pixel. 
	
	  The meaning of this value is different when touch_type is different.
	  For standard finger type:
	 	Touch intensity in counts, pressure value.
	  For proximity type (Start supported in Gen5 TP):
	 	The distance, in surface units, between the contact and
	 	the surface.
	
	  The length of the major axis of the ellipse of contact between
	  the finger and the panel (ABS_MT_TOUCH_MAJOR).
	
	  The length of the minor axis of the ellipse of contact between
	  the finger and the panel (ABS_MT_TOUCH_MINOR).
	
	  The length of the major axis of the approaching tool.
	  (ABS_MT_WIDTH_MAJOR)
	
	  The length of the minor axis of the approaching tool.
	  (ABS_MT_WIDTH_MINOR)
	
	  The angle between the panel vertical axis and
	  the major axis of the contact ellipse. This value is an 8-bit
	  signed integer. The range is -127 to +127 (corresponding to
	  -90 degree and +90 degree respectively).
	  The positive direction is clockwise from the vertical axis.
	  If the ellipse of contact degenerates into a circle,
	  orientation is reported as 0.
 Unit: bytes, including itself. 
 Reserved as 0. 
 Reserved as 0. 
 The number of bytes of flash data contained in this record. 
 The flash program data. 
 Start of packet, must be 01h 
 Size of data parameter start from data[0] 
 End of packet, must be 17h 
 Output report register address, must be 0004h 
 Size of packet not including output report register address 
 Bootloader output report id, must be 40h 
 Reserved, must be 0 
 Command data variable based on commands 
 Initiate bootload command data structure. 
 Key must be "A5h 01h 02h 03h FFh FEh FDh 5Ah" 
 Padding data must be 0 
 CRC starts at offset of 60 
 Bootload program and verify row command data structure 
 Output report register address, must be 0004h 
 Size of packet not including output report register address 
 Application output report id, must be 2Fh 
 Reserved, must be 0 
	
	  Bit 7: reserved, must be 0.
	  Bit 6-0: command code.
 Parameter data variable based on cmd_code 
 Application getset parameter command data structure 
 Return negative errno, or else the number of bytes read. 
  Return a negative errno code else zero on success.
 Indicates the pip->pm_stage is not valid. 
  This function is aimed to dump all not read data in Gen5 trackpad
  before send any command, otherwise, the interrupt line will be blocked.
 max 7 pending data before command response data 
		
		  Depending on testing in cyapa driver, there are max 5 "02 00"
		  packets between two valid buffered data report in firmware.
		  So in order to dump all buffered data out and
		  make interrupt line release for reassert again,
		  we must set the empty_count check value bigger than 5 to
		  make it work. Otherwise, in some situation,
		  the interrupt line may unable to reactive again,
		  which will cause trackpad device unable to
		  report data any more.
		  for example, it may happen in EFT and ESD testing.
 Should not happen 
 Application or bootloader launch data polled out. 
 Response found, success. 
 Response found, success. 
 Parse the data and report it if it's valid. 
 Wait for interrupt to set ready completion 
 Wait for interrupt to indicate command is completed. 
 Commands must be serialized. 
 Application command 
 Bootloader command 
 Send command data, wait and read output response data's length. 
			
			  For some old version, there was no interrupt for
			  the command response data, so need to poll here
			  to try to get the response data.
 Bootloader input report id 30h 
 Unsupported command code 
 Correct command response received 
	
	  After reset or power on, trackpad device always sets to 0x00 0x00
	  to indicate a reset or power on event.
 Check hid descriptor. 
 BL mode HID Descriptor 
 APP mode HID Descriptor 
	
	  Dump all buffered data firstly for the situation
	  when the trackpad is just power on the cyapa go here.
 Normal state of Gen5 with no data to response 
 Read description from trackpad device 
 BL mode HID Description read 
 APP mode HID Description read 
 Should not happen!!! 
	 0x20 0x00 0xF7 is Gen5 Application HID Description Header;
	  0x20 0x00 0xFF is Gen5 Bootloader HID Description Header.
	 
	  Must read HID Description content through out,
	  otherwise Gen5 trackpad cannot response next command
	  or report any touch or button data.
			
			  BL mode HID Description has been previously
			  read out.
			
			  APP mode HID Description has been previously
			  read out.
 BL mode HID Description read. 
 APP mode HID Description read. 
 Should not happen!!! 
	
	  Must read report data through out,
	  otherwise Gen5 trackpad cannot response next command
	  or report any touch or button data.
 Previous command has read the data through out. 
 Gen5 BL command response data detected 
 Gen5 APP command response data detected 
 Gen5 BL command response data detected 
 Gen5 APP command response data detected 
 Should not happen!!! 
 Parse based on Gen5 characteristic registers and bits 
 0xEE 0x00 0xF6 is Gen5 APP report description header. 
 0x1D 0x00 0xFE is Gen5 BL report descriptor header. 
		
		  Must read the content (e.g.: report description and so on)
		  from trackpad device throughout. Otherwise,
		  Gen5 trackpad cannot response to next command or
		  report any touch or button data later.
 Try to dump all buffered report data before any send command. 
 8 key bytes and 128 bytes block size 
 APP_INTEGRITY row is always the last row block 
 Exit bootloader failed for some reason. 
 Already in bootloader mode, Skipping exit. 
 Try to dump all buffered report data before any send command. 
	
	  Send bootloader enter command to trackpad device,
	  after enter bootloader, the response data is two bytes of 0x00 0x00.
 Gen5 without proximity support. 
 Verify the firmware image not miss-used for Gen5 and Gen6. 
	
	  APP_INTEGRITY row is always the last row block,
	  and the row id must be 0x01ff.
 Verify app_integrity crc 
 Verify application image CRC. 
 Don't include 2 bytes register address 
 1 (Flash Array ID) + 2 (Flash Row ID) + 128 (flash data) 
	
	  The last flash row 0x01ff has been written through bl_initiate
	  command, so DO NOT write flash 0x01ff to trackpad device.
	
	  Don't include unused parameter value bytes and
	  2 bytes register address.
 Don't include 2 bytes register address 
		
		  Assume TP in deep sleep mode when driver is loaded,
		  avoid driver unload and reload command IO issue caused by TP
		  has been set into deep sleep mode when unloading.
 Has in correct power mode state, early return. 
	
	  When trackpad in power off mode, it cannot change to other power
	  state directly, must be wake up from sleep firstly, then
	  continue to do next power sate change.
		
		  Continue to change power mode even failed to set
		  interval time, it won't affect the power mode change.
		  except the sleep interval time is not correct.
		
		  Disable pip report for a little time, firmware will
		  re-enable it automatically. It's used to fix the issue
		  that trackpad unable to report signal to wake system up
		  in the special situation that system is in suspending, and
		  at the same time, user touch trackpad to wake system up.
		  This function can avoid the data to be buffered when system
		  is suspending which may cause interrupt line unable to be
		  asserted again.
 Try to dump all buffered data before doing command. 
 Try to dump all buffered data when resuming scanning. 
 Try to dump all buffered data before doing command. 
 Try to dump all buffered data when suspending scanning. 
 Try to dump all buffered data before doing command. 
 1. Suspend Scanning
 2. Do mutual capacitance fine calibrate. 
 3. Do self capacitance calibrate. 
 4. Resume Scanning
 Should not happen, just as default case here. 
  Read all the global mutual or self idac data or mutual or self local PWC
  data based on the @idac_data_type.
  If the input value of @data_size is 0, then means read global mutual or
  self idac data. For read global mutual idac data, @idac_max, @idac_min and
  @idac_ave are in order used to return the max value of global mutual idac
  data, the min value of global mutual idac and the average value of the
  global mutual idac data. For read global self idac data, @idac_max is used
  to return the global self cap idac data in Rx direction, @idac_min is used
  to return the global self cap idac data in Tx direction. @idac_ave is not
  used.
  If the input value of @data_size is not 0, than means read the mutual or
  self local PWC data. The @idac_max, @idac_min and @idac_ave are used to
  return the max, min and average value of the mutual or self local PWC data.
  Note, in order to read mutual local PWC data, must read invoke this function
  to read the mutual global idac data firstly to set the correct Rx number
  value, otherwise, the read mutual idac and PWC data may not correct.
		
		  Read global idac values firstly.
		  Currently, no idac data exceed 4 bytes.
 Calculate the start offset in bytes of local PWC data. 
 Rx's self global idac data. 
 Tx's self global idac data. 
 Read mutual global idac or local mutualself PWC data. 
				
				  The value gap between global and local mutual
				  idac data must bigger than 50%.
				  Normally, global value bigger than 50,
				  local values less than 10.
 Max bytes can transfer one time. 
 Assume max element size is 4 currently. 
 1. Suspend Scanning
 2.  Read global and local mutual IDAC data. 
 3.  Read global and local self IDAC data. 
 4. Execute panel scan. It must be executed before read data. 
 5. Retrieve panel scan, mutual cap raw data. 
 6. Retrieve panel scan, self cap raw data. 
 7. Retrieve panel scan, mutual cap diffcount raw data. 
 8. Retrieve panel scan, self cap diffcount raw data. 
 9. Retrieve panel scan, mutual cap baseline raw data. 
 10. Retrieve panel scan, self cap baseline raw data. 
 11. Resume Scanning
 12. Output data strings 
 Check the report id and command code 
 Gen5 firmware that does not support proximity. 
 Try to update trackpad product information. 
		
		  If trackpad device in deep sleep mode,
		  the app command will fail.
		  So always try to reset trackpad device to full active when
		  the device state is required.
 By default, the trackpad proximity function is enabled. 
 Get trackpad product information. 
 Only support product ID starting with CYTRA 
  Return false, do not continue process
  Return true, continue process.
 Polling command response data. 
		
		  Read out all none command response data.
		  these output data may caused by user put finger on
		  trackpad when host waiting the command response.
			
			  Cover the Gen5 V1 firmware issue.
			  The issue is no interrupt would be asserted from
			  trackpad device to host for the command response
			  ready event. Because when there was a finger touch
			  on trackpad device, and the firmware output queue
			  won't be empty (always with touch report data), so
			  the interrupt signal won't be asserted again until
			  the output queue was previous emptied.
			  This issue would happen in the scenario that
			  user always has hisher fingers touched on the
			  trackpad device during system bootingrebooting.
 Invalid length or internal reset happened. 
 Idle, no data for report. 
 Idle, no data for report. 
		
		  Device wake event from deep sleep mode for touch.
		  This interrupt event is used to wake system up.
		 
		  Note:
		  It will introduce about 20~40 ms additional delay
		  time in receiving for first valid touch report data.
		  The time is used to execute device runtime resume
		  process.
 Running in BL mode or unknown response data read. 
 Invalid report data length for finger packet. 
 Invalid report data length of button packet. 
 Invalid report data length of proximity packet. 
 SPDX-License-Identifier: GPL-2.0-only
  Elantech Touchpad driver (v6)
  Copyright (C) 2007-2009 Arjan Opmeer <arjan@opmeer.net>
  Trademarks are the property of their respective owners.
  Send a Synaptics style sliced query command
  V3 and later support this fast command
  A retrying version of ps2_command
  Send an Elantech style special command to read 3 bytes from a register
  Send an Elantech style special command to write a register with a parameter
  Send an Elantech style special command to read a value from a register
  Send an Elantech style special command to write a register with a value
  Dump a complete mouse movement packet to the syslog
  Advertise INPUT_PROP_BUTTONPAD for clickpads. The testing of bit 12 in
  fw_version for this is based on the following fw_version & caps table:
  Laptop-model:           fw_version:     caps:           buttons:
  Acer S3                 0x461f00        10, 13, 0e      clickpad
  Acer S7-392             0x581f01        50, 17, 0d      clickpad
  Acer V5-131             0x461f02        01, 16, 0c      clickpad
  Acer V5-551             0x461f00        ?               clickpad
  Asus K53SV              0x450f01        78, 15, 0c      2 hw buttons
  Asus G46VW              0x460f02        00, 18, 0c      2 hw buttons
  Asus G750JX             0x360f00        00, 16, 0c      2 hw buttons
  Asus TP500LN            0x381f17        10, 14, 0e      clickpad
  Asus X750JN             0x381f17        10, 14, 0e      clickpad
  Asus UX31               0x361f00        20, 15, 0e      clickpad
  Asus UX32VD             0x361f02        00, 15, 0e      clickpad
  Avatar AVIU-145A2       0x361f00        ?               clickpad
  Fujitsu CELSIUS H760    0x570f02        40, 14, 0c      3 hw buttons ()
  Fujitsu CELSIUS H780    0x5d0f02        41, 16, 0d      3 hw buttons ()
  Fujitsu LIFEBOOK E544   0x470f00        d0, 12, 09      2 hw buttons
  Fujitsu LIFEBOOK E546   0x470f00        50, 12, 09      2 hw buttons
  Fujitsu LIFEBOOK E547   0x470f00        50, 12, 09      2 hw buttons
  Fujitsu LIFEBOOK E554   0x570f01        40, 14, 0c      2 hw buttons
  Fujitsu LIFEBOOK E557   0x570f01        40, 14, 0c      2 hw buttons
  Fujitsu T725            0x470f01        05, 12, 09      2 hw buttons
  Fujitsu H730            0x570f00        c0, 14, 0c      3 hw buttons ()
  Gigabyte U2442          0x450f01        58, 17, 0c      2 hw buttons
  Lenovo L430             0x350f02        b9, 15, 0c      2 hw buttons ()
  Lenovo L530             0x350f02        b9, 15, 0c      2 hw buttons ()
  Samsung NF210           0x150b00        78, 14, 0a      2 hw buttons
  Samsung NP770Z5E        0x575f01        10, 15, 0f      clickpad
  Samsung NP700Z5B        0x361f06        21, 15, 0f      clickpad
  Samsung NP900X3E-A02    0x575f03        ?               clickpad
  Samsung NP-QX410        0x851b00        19, 14, 0c      clickpad
  Samsung RC512           0x450f00        08, 15, 0c      2 hw buttons
  Samsung RF710           0x450f00        ?               2 hw buttons
  System76 Pangolin       0x250f01        ?               2 hw buttons
  () + 3 trackpoint buttons
  () + 0 trackpoint buttons
  Note: Lenovo L430 and Lenovo L530 have the same fw_versioncaps
  Interpret complete data packets and report absolute mode input events for
  hardware version 1. (4 byte packets)
		
		  byte 0:  D   U  p1  p2   1  p3   R   L
		  byte 1:  f   0  th  tw  x9  x8  y9  y8
		
		  byte 0: n1  n0  p2  p1   1  p3   R   L
		  byte 1:  0   0   0   0  x9  x8  y9  y8
 Discard first 2 reports of one finger, bogus 
	
	  byte 2: x7  x6  x5  x4  x3  x2  x1  x0
	  byte 3: y7  y6  y5  y4  y3  y2  y1  y0
 rocker up 
 rocker down 
 x1 < x2 and y1 < y2 when two fingers, x = y = 0 when not pressed 
  Interpret complete data packets and report absolute mode input events for
  hardware version 2. (6 byte packets)
 byte 0: n1  n0   .   .   .   .   R   L 
		
		  Same as one finger, except report of more than 3 fingers:
		  byte 3:  n4  .   w1  w0   .   .   .   .
		
		  byte 1:  .   .   .   .  x11 x10 x9  x8
		  byte 2: x7  x6  x5  x4  x4  x2  x1  x0
		
		  byte 4:  .   .   .   .  y11 y10 y9  y8
		  byte 5: y7  y6  y5  y4  y3  y2  y1  y0
		
		  The coordinate of each finger is reported separately
		  with a lower resolution for two finger touches:
		  byte 0:  .   .  ay8 ax8  .   .   .   .
		  byte 1: ax7 ax6 ax5 ax4 ax3 ax2 ax1 ax0
 byte 2: ay7 ay6 ay5 ay4 ay3 ay2 ay1 ay0 
		
		  byte 3:  .   .  by8 bx8  .   .   .   .
		  byte 4: bx7 bx6 bx5 bx4 bx3 bx2 bx1 bx0
 byte 5: by7 by8 by5 by4 by3 by2 by1 by0 
 Unknown so just report sensible values 
	
	  byte 0:  0   0  sx  sy   0   M   R   L
	  byte 1:~sx   0   0   0   0   0   0   0
	  byte 2:~sy   0   0   0   0   0   0   0
	  byte 3:  0   0 ~sy ~sx   0   1   1   0
	  byte 4: x7  x6  x5  x4  x3  x2  x1  x0
	  byte 5: y7  y6  y5  y4  y3  y2  y1  y0
	 
	  x and y are written in two's complement spread
	  over 9 bits with sxsy the relative top bit and
	  x7..x0 and y7..y0 the lower bits.
	  The sign of y is opposite to what the input driver
	  expects for a relative movement
		
		  This firmware misreport coordinates for trackpoint
		  occasionally. Discard packets outside of [-127, 127] range
		  to prevent cursor jumps.
 Dump unexpected packet sequences if debug=1 (default) 
  Interpret complete data packets and report absolute mode input events for
  hardware version 3. (12 byte packets for two fingers)
 byte 0: n1  n0   .   .   .   .   R   L 
		
		  byte 1:  .   .   .   .  x11 x10 x9  x8
		  byte 2: x7  x6  x5  x4  x4  x2  x1  x0
		
		  byte 4:  .   .   .   .  y11 y10 y9  y8
		  byte 5: y7  y6  y5  y4  y3  y2  y1  y0
			
			  byte 1:   .    .    .    .  ax11 ax10 ax9  ax8
			  byte 2: ax7  ax6  ax5  ax4  ax3  ax2  ax1  ax0
			
			  byte 4:   .    .    .    .  ay11 ay10 ay9  ay8
			  byte 5: ay7  ay6  ay5  ay4  ay3  ay2  ay1  ay0
			
			  wait for next packet
 packet_type == PACKET_V3_TAIL 
 For clickpads map both buttons to BTN_LEFT 
 For clickpads map both buttons to BTN_LEFT 
 notify finger state change 
 report this for backwards compatibility 
	
	  Motion packets give us the delta of x, y values of specific fingers,
	  but in two's complement. Let the compiler do the conversion for us.
	  Also _enlarge_ the numbers to int, in case of overflow.
 impossible to get here 
 Parity bits are placed differently 
 byte 0:  D   U  p1  p2   1  p3   R   L 
 byte 0: n1  n0  p2  p1   1  p3   R   L 
          When we encounter packet that matches this exactly, it means the
          hardware is in debounce status. Just ignore the whole packet.
	
	  V2 hardware has two flavors. Older ones that do not report pressure,
	  and newer ones that reports pressure and width. With newer ones, all
	  packets (1, 2, 3 finger touch) have the same constant bits. With
	  older ones, 13 finger touch packets and 2 finger touch packets
	  have different constant bits.
	  With all three cases, if the constant bits are not exactly what I
	  expected, I consider them invalid.
  We check the constant bits to determine what packet type we get,
  so packet checking is mandatory for v3 and later hardware.
	
	  check debounce first, it has the same signature in byte 0
	  and byte 3 as PACKET_V3_HEAD.
	
	  If the hardware flag 'crc_enabled' is set the packets have
	  different signatures.
 This represents the version of IC body. 
	
	  Sanity check based on the constant bits of a packet.
	  The constant bits change depending on the value of
	  the hardware flag 'crc_enabled' and the version of
	  the IC body, but are the same for every packet,
	  regardless of the type.
  Process byte stream from mouse and handle complete packets
 ignore debounce 
 ignore debounce 
  This writes the reg_07 value again to the hardware at the end of every
  set_rate call because the register loses its value. reg_07 allows setting
  absolute mode on v4 hardware
  Put the touchpad into absolute mode
 Windows driver values 
 0x8a 
 0x00 
 v4 has no reg 0x10 to read 
		
		  Read back reg 0x10. For hardware version 1 we must make
		  sure the absolute mode bit is set. For hardware version 2
		  the touchpad is probably initializing and not ready until
		  we read back the value we just wrote.
  (value from firmware)  10 + 790 = dpi
  we also have to convert dpi to dotsmm (10254 to avoid floating point)
  Some hw_version 4 models do have a middle button
 Fujitsu H730 has a middle button 
 Fujitsu H760 also has a middle button 
 Fujitsu H780 also has a middle button 
  Set the appropriate event bits for the input subsystem
 Rocker button 
 For X to recognize me as touchpad. 
		
		  range of pressure and width is the same as v2,
		  report ABS_PRESSURE, ABS_TOOL_WIDTH for compatibility.
 Multitouch capable pad, up to 5 fingers. 
		
		  The firmware reports how many trace lines the finger spans,
		  convert to surface unit as Protocol-B requires.
  Display a register value by reading a sysfs entry
  Write a register value by writing a sysfs entry
 Do we need to preserve some bits for version 2 hardware too? 
 Force absolute mode always on 
 Force 4 byte mode always on 
	
	  Some hw_version >= 4 models have a revision higher then 20. Meaning
	  that param[2] may be 10 or 20, skip the rates check for these.
  Use magic knock to detect Elantech touchpad
	
	  Report this in case there are Elantech models that use a different
	  set of magic numbers
	
	  Query touchpad's firmware version and see if it reports known
	  value to avoid mis-detection. Logitech mice are known to respond
	  to Elantech magic knock and there might be more.
  Clean up sysfs entries when disconnecting
	
	  We might have left a breadcrumb when trying to
	  set up SMbus companion.
  Put the touchpad back into absolute mode when reconnecting
  Some hw_version 4 models do not work with crc_disabled
 Fujitsu H730 does not work with crc_enabled == 0 
 Fujitsu H760 does not work with crc_enabled == 0 
 Fujitsu LIFEBOOK E544  does not work with crc_enabled == 0 
 Fujitsu LIFEBOOK E546  does not work with crc_enabled == 0 
 Fujitsu LIFEBOOK E547 does not work with crc_enabled == 0 
 Fujitsu LIFEBOOK E554  does not work with crc_enabled == 0 
 Fujitsu LIFEBOOK E556 does not work with crc_enabled == 0 
 Fujitsu LIFEBOOK E557 does not work with crc_enabled == 0 
 Fujitsu LIFEBOOK U745 does not work with crc_enabled == 0 
  Some hw_version 3 models go into error state when we try to set
  bit 3 andor bit 1 of r10.
 Gigabyte U2442 
  Change Report id 0x5E to 0x5F.
  determine hardware version and set some properties according to it.
 This represents the version of IC body. 
 Early version of Elan touchpads doesn't obey the rule. 
 Get information pattern for hw_version 4 
 decide which send_cmd we're gonna use early 
 Turn on packet checking by default 
	
	  This firmware suffers from misreporting coordinates when
	  a touch action starts causing the mouse cursor or scrolled page
	  to jump. Enable a workaround.
 For now show extra debug information 
	
	  The signatures of v3 and v4 packets change depending on the
	  value of this hardware flag.
 Enable real hardware resolution on hw_version 3 ? 
	
	  Do the version query again so we can store the result
		
		  This module has a bug which makes absolute mode
		  unusable, so let's abort so we'll be using standard
		  PS2 protocol.
 The MSB indicates the presence of the trackpoint 
		
		  This module has a bug which makes trackpoint in SMBus
		  mode return invalid data unless trackpoint is switched
		  from using 0x5e reports to 0x5f. If we are not able to
		  make the switch, let's abort initialization so we'll be
		  using standard PS2 protocol.
 query range information 
 column number of traces 
 row number of traces 
 check for the middle button: DMI matching or new v4 firmwares 
  The newest Elantech device can use a secondary bus (over SMBus) which
  provides a better bandwidth and allow a better control of the touchpads.
  This is used to decide if we need to use this bus or not.
	
	  These are known to not be working properly as bits are missing
	  in elan_i2c.
  elantech_setup_smbus - called once the PS2 devices are enumerated
  and decides to instantiate a SMBus InterTouch device.
		
		  New ICs are enabled by default, unless mentioned in
		  i2c_blacklist_pnp_ids.
		  Old ICs are up to the user to decide.
 expected case 
 CONFIG_MOUSE_PS2_ELANTECH_SMBUS 
  Initialize the touchpad and create sysfs entries
 CONFIG_MOUSE_PS2_ELANTECH_SMBUS 
		
		  Not using any flavor of Elantech support, so clean up
		  SMbus breadcrumbs, if any.
 SPDX-License-Identifier: GPL-2.0-only
  PS2 mouse driver
  Copyright (c) 1999-2002 Vojtech Pavlik
  Copyright (c) 2003-2004 Dmitry Torokhov
  psmouse_mutex protects all operations changing state of mouse
  (connecting, disconnecting, changing rate or resolution via
  sysfs). We could use a per-device semaphore but since there
  rarely more than one PS2 mouse connected and since semaphore
  is taken in "slow" paths it is not worth it.
  psmouse_process_byte() analyzes the PS2 data stream and reports
  relevant events to the input module once full packet has arrived.
 Full packet accumulated, process it 
 IntelliMouse has scroll wheel 
 Scroll wheel and buttons on IntelliMouse Explorer 
 vertical scroll on IntelliMouse Explorer 4.0 
 horizontal scroll on IntelliMouse Explorer 4.0 
			
			  Some A4Tech mice have two scroll wheels, with first
			  one reporting +-1 in the lower nibble, and second
			  one reporting +-2.
 Report scroll buttons on NetMice 
 Extra buttons on Genius NewNet 3D 
 Extra button on ThinkingMouse 
		
		  Without this bit of weirdness moving up gives wildly
		  high Y changes.
		
		  Cortron PS2 Trackball reports SIDE button in the
		  4th bit of the first byte.
 Generic PS2 Mouse 
  __psmouse_set_state() sets new psmouse state and resets all flags.
  psmouse_set_state() sets new psmouse state and resets all flags and
  counters while holding serio lock so fighting with interrupt handler
  is not a concern.
  psmouse_handle_byte() processes one byte of the input data stream
  by calling corresponding protocol handler.
  psmouse_interrupt() handles incoming characters, either passing them
  for normal processing or gathering them as command response.
 Check if this is a new device announcement (0xAA 0x00) 
 Not a new device, try processing first byte normally 
	
	  See if we need to force resync because mouse was idle for
	  too long.
  psmouse_reset() resets the mouse into power-on state.
  Here we set the mouse resolution.
  Here we set the mouse report rate.
  Here we set the mouse scaling.
  psmouse_poll() - default poll handler. Everyone except for ALPS uses it.
  psmouse_matches_pnp_id - check if psmouse matches one of the passed in ids.
  Genius NetMouse magic init.
  IntelliMouse magic init.
  Try IntelliMouseExplorer magic init.
 Magic to enable horizontal scrolling on IntelliMouse 4.0 
  Kensington ThinkingMouse  ExpertMouse magic init.
  Bare PS2 protocol "detection". Always succeeds.
		
		  We have no way of figuring true number of buttons so let's
		  assume that the device has 3.
  Cortron PS2 protocol detection. There's no special way to detect it, so it
  must be forced by sysfs protocol writing.
  Apply default settings to the psmouse structure. Most of them will
  be overridden by individual protocol initialization routines.
			
			  We detected device, but init failed. Adjust
			  max_proto so we only try standard protocols.
  psmouse_extensions() probes for any extensions to the basic PS2 protocol
  the mouse may have.
	
	  Always check for focaltech, this is safe as it uses pnp-id
	  matching.
		
		  Restrict psmouse_max_proto so that psmouse_initialize()
		  does not try to reset rate and resolution, because even
		  that upsets the device.
		  This also causes us to basically fall through to basic
		  protocol detection, where we fully reset the mouse,
		  and set it up as bare PS2 protocol device.
	
	  We always check for LifeBook because it does not disturb mouse
	  (it only checks DMI information).
	
	  Try Kensington ThinkingMouse (we try first, because Synaptics
	  probe upsets the ThinkingMouse).
	
	  Try Synaptics TouchPad. Note that probing is done even if
	  Synaptics protocol support is disabled in config - we need to
	  know if it is Synaptics so we can reset it properly after
	  probing for IntelliMouse.
			
			  Try activating protocol, but check if support is
			  enabled first, since we try detecting Synaptics
			  even when protocol is disabled.
			
			  Some Synaptics touchpads can emulate extended
			  protocols (like IMPS2).  Unfortunately
			  LogitechGenius probes confuse some firmware
			  versions so we'll have to skip them.
		
		  Make sure that touchpad is in relative mode, gestures
		  (taps) are enabled.
	
	  Try Cypress Trackpad. We must try it before Finger Sensing Pad
	  because Finger Sensing Pad probe upsets some modules of Cypress
	  Trackpads.
 Try ALPS TouchPad 
 Try OLPC HGPK touchpad 
 Try Elantech touchpad 
	
	  Try Finger Sensing Pad. We do it here because its probe upsets
	  Trackpoint devices (causing TP_READ_ID command to time out).
	
	  Reset to defaults in case the device got confused by extended
	  protocol probes. Note that we follow up with full reset because
	  some mice put themselves to sleep when they see PSMOUSE_RESET_DIS.
	
	  Okay, all failed, we have a standard mouse here. The number of
	  the buttons is still a question, though. We assume 3.
		
		  We detected Synaptics hardware but it did not respond to
		  IMPS2 probes.  We need to reset the touchpad because if
		  there is a track point on the pass through port it could
		  get disabled while probing for protocol extensions.
  psmouse_probe() probes for a PS2 mouse.
	
	  First, we check if it's a mouse. It should send 0x00 or 0x03 in
	  case of an IntelliMouse in 4-byte mode or 0x04 for IM Explorer.
	  Sunrex K8561 IR KeyboardMouse reports 0xff on second and
	  subsequent ID queries, probably due to a firmware bug.
	
	  Then we reset and disable the mouse so that it doesn't generate
	  events.
  psmouse_initialize() initializes the mouse to a sane state.
	
	  We set the mouse report rate, resolution and scaling.
  psmouse_activate() enables the mouse so that we get motion reports from it.
  psmouse_deactivate() puts the mouse into poll mode so that we don't get
  motion reports from it unless we explicitly request it.
  psmouse_resync() attempts to re-validate current protocol.
	
	  Some mice don't ACK commands sent while they are in the middle of
	  transmitting motion packet. To avoid delay we use ps2_sendbyte()
	  instead of ps2_command() which would wait for 200ms for an ACK
	  that may never come.
	  As an additional quirk ALPS touchpads may not only forget to ACK
	  disable command but will stop reporting taps, so if we see that
	  mouse at least once ACKs disable we will do full reconnect if ACK
	  is missing.
	
	  Poll the mouse. If it was reset the packet will be shorter than
	  psmouse->pktsize and ps2_command will fail. We do not expect and
	  do not handle scenario when mouse "upgrades" its protocol while
	  disconnected since it would require additional delay. If we ever
	  see a mouse that does it we'll adjust the code.
	
	  Now try to enable mouse. We try to do that even if poll failed
	  and also repeat our attempts 5 times, otherwise we may be left
	  out with disabled mouse.
  psmouse_cleanup() resets the mouse into power-on state.
	
	  Disable stream mode so cleanup routine can proceed undisturbed.
	
	  Reset the mouse to defaults (bare PS2 protocol).
	
	  Some boxes, such as HP nx7400, get terribly confused if mouse
	  is not fully enabled before suspendingshutting down.
  psmouse_disconnect() closes and frees.
 make sure we don't have a resync in progress 
	
	  If mouse's packet size is 3 there is no point in polling the
	  device in hopes to detect protocol reset - we won't get less
	  than 3 bytes response anyhow.
	
	  Some smart KVMs fake response to POLL command returning just
	  3 bytes and messing up our resync logic, so if initial poll
	  fails we won't try polling the device anymore. Hopefully
	  such KVM will maintain initially selected protocol.
  psmouse_connect() is a callback from the serio module when
  an unhandled serio port is found.
	
	  If this is a pass-through port deactivate parent so the device
	  connected to this port can be successfully identified
 give PT device some time to settle down before probing 
 Smbus companion will be reporting events, not us. 
	
	  PS2 devices having SMBus companions should stay disabled
	  on PS2 side, in order to have SMBus part operable.
 If this is a pass-through port the parent needs to be re-activated 
 so we don't try to free it below 
	
	  OK, the device type (and capabilities) match the old one,
	  we can continue using it, complete initialization
	
	  PS2 devices having SMBus companions should stay disabled
	  on PS2 side, in order to have SMBus part operable.
 If this is a pass-through port the parent waits to be activated 
 switched by other thread 
 default to PSMOUSE_PS2 
 SPDX-License-Identifier: GPL-2.0-only
  OLPC HGPK (XO-1) touchpad PS2 mouse driver
  Copyright (c) 2006-2008 One Laptop Per Child
  Authors:
    Zephaniah E. Hull
    Andres Salomon <dilinger@debian.org>
  This driver is partly based on the ALPS driver, which is:
  Copyright (c) 2003 Neil Brown <neilb@cse.unsw.edu.au>
  Copyright (c) 2003-2005 Peter Osterlund <petero2@telia.com>
  Copyright (c) 2004 Dmitry Torokhov <dtor@mail.ru>
  Copyright (c) 2005 Vojtech Pavlik <vojtech@suse.cz>
  The spec from ALPS is available from
  <http:wiki.laptop.orggoTouch_PadTablet>.  It refers to this
  device as HGPK (Hybrid GS, PT, and Keymatrix).
  The earliest versions of the device had simultaneous reporting; that
  was removed.  After that, the device used the Advanced Mode GSPT streaming
  stuff.  That turned out to be too buggy to support, so we've finally
  switched to Mouse Mode (which utilizes only the center 13 of the touchpad).
  see if new value is within 20% of half of old value
  Throw out oddly large delta packets, and any that immediately follow whose
  values are each approximately half of the previous.  It seems that the ALPS
  firmware emits errant packets, and they get averaged out slowly.
 discard if too big, or half that but > 4 times the prev delta 
  We have no idea why this particular hardware bug occurs.  The touchpad
  will randomly start spewing packets without anything touching the
  pad.  This wouldn't necessarily be bad, but it's indicative of a
  severely miscalibrated pad; attempting to use the touchpad while it's
  spewing means the cursor will jump all over the place, and act "drunk".
  The packets that are spewed tend to all have deltas between -2 and 2, and
  the cursor will move around without really going very far.  It will
  tend to end up in the same location; if we tally up the changes over
  100 packets, we end up w a final delta of close to 0.  This happens
  pretty regularly when the touchpad is spewing, and is pretty hard to
  manually trigger (at least for my fingers).  So, it makes a perfect
  scheme for detecting spews.
	 ignore button press packets; many in a row could trigger
 don't track spew if the workaround feature has been turned off 
 no spew, or spew ended 
	 Keep a tally of the overall delta to the cursor position caused by
 we're not spewing, but this packet might be the start 
 excessive spew detected, request recalibration 
		 only recalibrate when the overall delta to the cursor
		  is really small. if the spew is causing significant cursor
		  movement, it is probably a case of the user moving the
		 we already detected a spew and requested a recalibration,
  HGPK Mouse Mode format (standard mouse format, sans middle button)
  byte 0:	y-over	x-over	y-neg	x-neg	1	0	swr	swl
  byte 1:	x7	x6	x5	x4	x3	x2	x1	x0
  byte 2:	y7	y6	y5	y4	y3	y2	y1	y0
  swrswl are the leftright buttons.
  x-negy-neg are the x and y delta negative bits
  x-overy-over are the x and y overflow bits
  ---
  HGPK Advanced Mode - single-mode format
  byte 0(PT):  1    1    0    0    1    1     1     1
  byte 0(GS):  1    1    1    1    1    1     1     1
  byte 1:      0   x6   x5   x4   x3   x2    x1    x0
  byte 2(PT):  0    0   x9   x8   x7    ? pt-dsw    0
  byte 2(GS):  0  x10   x9   x8   x7    ? gs-dsw pt-dsw
  byte 3:      0   y9   y8   y7    1    0   swr   swl
  byte 4:      0   y6   y5   y4   y3   y2    y1    y0
  byte 5:      0   z6   z5   z4   z3   z2    z1    z0
  ?'s are not defined in the protocol spec, may vary between models.
  swrswl are the leftright buttons.
  pt-dswgs-dsw indicate that the ptgs sensor is detecting a
  penfinger
		
		  PenTablet mode does not report pressure, so we don't
		  report it here
	
	  If this packet says that the finger was removed, reset our position
	  tracking so that we don't erroneously detect a jump on next press.
	
	  Weed out duplicate packets (we get quite a few, and they mess up
	  our jump detection)
 not a duplicate, continue with position reporting 
 Don't apply hacks in PT mode, it seems reliable 
			
			  ugh, got a packet inside our recalibration
			  window, schedule another recalibration.
	
	  4 disables to enable advanced mode
	  then 3 0xf2 bytes as the preamble for GSPT selection
 Switch to 'Advanced mode.', four disables in a row. 
 select between GlideSensor (mouse) or PenTablet 
 All modes report left and right buttons 
 GlideSensor has pressure sensor, PenTablet does not 
 From device specs 
 Calculated by hand based on usable size (52mm x 38mm) 
 From device specs 
 Calculated by hand based on usable size (156mm x 38mm) 
 send the recalibrate request 
 according to ALPS, 150mS is required for recalibration 
 C-series touchpads added the recalibrate command 
 we don't want to race with the irq handler, nor with resyncs 
 start by resetting the device 
	
	  XXX: If a finger is down during this delay, recalibration will
	  detect capacitance incorrectly.  This is a hardware bug, and
	  we don't have a good way to deal with it.  The 2s window stuff
	  (below) is our best option for now.
	
	  If we get packets right away after recalibrating, it's likely
	  that a finger was on the touchpad.  If so, it's probably
	  miscalibrated, so we optionally schedule another.
  This puts the touchpad in a power saving mode; according to ALPS, current
  consumption goes down to 50uA after running this.  To turn power back on,
  we drive MS-DAT low.  Measuring with a 1mA resolution ammeter says that
  the current on the SUS_3.3V rail drops from 3mA or 4mA to 0 when we do this.
  We have no formal spec that details this operation -- the low-power
  sequence came from a long-lost email trail.
 Added on D-series touchpads 
		
		  Sending a byte will drive MS-DAT low; this will wake up
		  the controller.  Once we get an ACK back from it, it
		  means we can continue with the touchpad re-init.  ALPS
		  tells us that 1s should be long enough, so set that as
		  the upper bound. (in practice, it takes about 3 loops.)
 should be all set, enable the touchpad 
 probably won't see an ACK, the touchpad will be off 
 We can't poll, so always return failure. 
	
	  During suspendresume the ps2 rails remain powered.  We don't want
	  to do a reset because it's flush data out of buffers; however,
	  earlier prototypes (B1) had some brokenness that required a reset.
		
		  hgpk_toggle_power will deal w state so
		  we're not racing w irq
 Switch device into the new mode 
	
	  We queue work instead of doing recalibration right here
	  to avoid adding locking to to hgpk_force_recalibrate()
	  since workqueue provides serialization.
 register handlers 
 Disable the idle resync. 
 Reset after a lot of bad bytes. 
 C-series touchpads added the recalibrate command 
 E7, E7, E7, E9 gets us a 3 byte identifier 
 HGPK signature: 0x67, 0x00, 0x<model> 
  Synaptics touchpad with I2C interface
  Copyright (C) 2009 Compulab, Ltd.
  Mike Rapoport <mike@compulab.co.il>
  Igor Grinberg <grinberg@compulab.co.il>
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive for
  more details.
 maximum product id is 15 characters 
  after soft reset, we should wait for 1 ms
  before the device becomes operational
 and after hard reset, we should wait for max 500ms 
 Registers by SMBus address 
 Registers by RMI address 
 Register bits 
 Device Control Register Bits 
 Interrupt Enable Register Bits (INTERRUPT_EN_REG) 
 Interrupt Request Register Bits (INT_REQ_STAT_REG | DEVICE_STATUS_REG) 
 Device Status Register Bits (DEVICE_STATUS_REG) 
 Device Command Register Bits (DEV_COMMAND_REG) 
 Data Register 0 Bits (DATA_REG0) 
 Device Query Registers Bits 
 DEV_QUERY_REG3 
 General 2D Control Register Bits (GENERAL_2D_CONTROL_REG) 
 Function Masks 
 Device Control Register Masks (DEV_CONTROL_REG) 
 Device Sleep Modes 
 Interrupt Register Mask 
 (INT_REQ_STAT_REG | DEVICE_STATUS_REG | INTERRUPT_EN_REG) 
 Device Status Register Masks (DEVICE_STATUS_REG) 
 Data Register 0 Masks 
  MSB Position Register Masks
  ABS_MSB_X_REG | ABS_MSB_Y_REG | SENS_MAX_POS_MSB_REG |
  DEV_QUERY_REG3 | DEV_QUERY_REG5
 Device Query Registers Masks 
 DEV_QUERY_REG2 
 When in IRQ mode read the device every THREAD_IRQ_SLEEP_SECS 
  When in Polling mode and no data received for NO_DATA_THRES msecs
  reduce the polling rate to NO_DATA_SLEEP_MSECS
 Control touchpad's No Deceleration option 
 Control touchpad's Reduced Reporting option 
 Control touchpad's No Filter option 
  touchpad Attention line is Active Low and Open Drain,
  therefore should be connected to pulled up line
  and the irq configuration should be set to Falling Edge Trigger
 Control IRQ  Polling option 
 Control Polling Rate 
 The main device structure 
  Driver's initial design makes no race condition possible on i2c bus,
  so there is no need in any locking.
  Keep it in mind, while playing with the code.
 set Report Rate to Device Highest (>=80) and Sleep to normal 
 set Interrupt Disable to Func20  Enable to Func10) 
 No Deceleration 
 Reduced Reporting 
 No Filter 
 Reset the Touchpad 
 Deal with spontaneous resets and errors 
 Get Gesture Bit 
	
	  Get Relative axes. we have to get them in one shot,
	  so we get 2 bytes starting from REL_X_REG.
 Separate X from Y 
 Report the button event 
 Report the deltas 
 Control the Device polling rate  Work Handler sleep time 
 Work Handler 
	
	  While interrupt driven, there is no real need to poll the device.
	  But touchpads are very sensitive, so there could be errors
	  related to physical environment and the attention line isn't
	  necessarily asserted. In such case we can lose the touchpad.
	  We poll the device once in THREAD_IRQ_SLEEP_SECS and
	  if error is detected, we try to reset and reconfigure the touchpad.
 Save some power 
 Register the device as mouse 
 Register device's buttons and keys 
 Register the device in input subsystem 
 Save some power 
 SPDX-License-Identifier: GPL-2.0-only
   Acorn RiscPC mouse driver for LinuxARM
   Copyright (c) 2000-2002 Vojtech Pavlik
   Copyright (C) 1996-2002 Russell King
  This handles the Acorn RiscPCs mouse.  We basically have a couple of
  hardware registers that track the sensor count for the X-Y movement and
  another register holding the button state.  On every VSYNC interrupt we read
  the complete state and then work out if something has changed.
 SPDX-License-Identifier: GPL-2.0-only
  Stephen Evanchik <evanchsa@gmail.com>
  Trademarks are the property of their respective owners.
  Power-on Reset: Resets all trackpoint parameters, including RAM values,
  to defaults.
  Returns zero on success, non-zero on failure.
 Check for success response -- 0xAA00 
  Device IO: read, write and toggle bit
 Bad things will happen if the loc param isn't in this range 
  Trackpoint-specific attributes
  Write parameters to trackpad.
  in_power_on_state: Set to true if TP is in default  power-on state (ex. if
 		      power-on reset was run). If so, values will only be
 		      written to TP if they differ from power-on default.
		
		  Disable features that may make device unusable
		  with this driver.
	
	  These properties can be changed in this driver. Only
	  configure them if the values are non-default or if the TP is in
	  an unknown state.
 toggles 
 toggles 
 Newer variants do not support extended button query. 
		
		  Write defaults to TP if we did not reset the trackpoint.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1999-2001 Vojtech Pavlik
   Serial mouse driver for Linux
  sermouse_process_msc() analyzes the incoming MSCSun bytestream and
  applies some prediction to the data, resulting in 96 updates per
  second, which is as good as a PS2 or USB mouse.
  sermouse_process_ms() anlyzes the incoming MS(Z+++) bytestream and
  generates events. With prediction it gets 80 updatessec, assuming
  standard 3-byte packets and 1200 bps.
 Guessing the state of the middle button on 3-button MS-protocol mice - ugly. 
 M++ Wireless Extension packet. 
 MZ++ packet type. We can get these bytes for M++ too but we ignore them later. 
 Ignore anything besides MZ++ 
 Extra mouse info 
 We don't decode anything else yet. 
  sermouse_interrupt() handles incoming characters, either gathering them into
  packets or passing them to the command routine as command output.
  sermouse_disconnect() cleans up after we don't want talk
  to the mouse anymore.
  sermouse_connect() is a callback form the serio module when
  an unhandled serio port is found.
 SPDX-License-Identifier: GPL-2.0-only
  BYD TouchPad PS2 mouse driver
  Copyright (C) 2015 Chris Diamand <chris@diamand.org>
  Copyright (C) 2015 Richard Pospesel
  Copyright (C) 2015 Tai Chi Minh Ralph Eastwood
  Copyright (C) 2015 Martin Wimpress
  Copyright (C) 2015 Jay Kuri
 PS2 Bits 
  BYD pad constants
  True device resolution is unknown, however experiments show the
  resolution is about 111 unitsmm.
  Absolute coordinate packets are in the range 0-255 for both X and Y
  we pick ABS_XABS_Y dimensions which are multiples of 256 and in
  the right ballpark given the touchpad's physical dimensions and estimate
  resolution per spec sheet, device active area dimensions are
  101.6 x 60.1 mm.
  Given the above dimensions, relative packets velocity is in multiples of
  1 unit  11 milliseconds.  We use this dt to estimate distance traveled
 Time in jiffies used to timeout various touch events (64 ms) 
 BYD commands reverse engineered from windows driver 
  Swipe gesture from off-pad to on-pad
   0 : disable
   1 : enable
  Tap and drag delay time
   0 : disable
   1 - 8 : least to most delay
  Physical buttons function mapping
   0 : enable
   4 : normal
   5 : left button custom command
   6 : right button custom command
   8 : disable
  Absolute mode (1 byte XY resolution)
   0 : disable
   2 : enable
  Two finger scrolling
   1 : vertical
   2 : horizontal
   3 : vertical + horizontal
   4 : disable
  Handedness
   1 : right handed
   2 : left handed
  Tap to click
   1 : enable
   2 : disable
  Tap and drag
   1 : tap and hold to drag
   2 : tap and hold to drag + lock
   3 : disable
  Touch sensitivity
   1 - 7 : least to most sensitive
  One finger scrolling
   1 : vertical
   2 : horizontal
   3 : vertical + horizontal
   4 : disable
  One finger scrolling function
   1 : free scrolling
   2 : edge motion
   3 : free scrolling + edge motion
   4 : disable
  Sliding speed
   1 - 5 : slowest to fastest
  Edge motion
   1 : disable
   2 : enable when dragging
   3 : enable when dragging and pointing
  Left edge region size
   0 - 7 : smallest to largest width
  Top edge region size
   0 - 9 : smallest to largest height
  Disregard palm press as clicks
   1 - 6 : smallest to largest
  Right edge region size
   0 - 7 : smallest to largest width
  Bottom edge region size
   0 - 9 : smallest to largest height
  Multitouch gestures
   1 : enable
   2 : disable
  Edge motion speed
   0 : control with finger pressure
   1 - 9 : slowest to fastest
  Two finger scolling function
   0 : free scrolling
   1 : free scrolling (with momentum)
   2 : edge motion
   3 : free scrolling (with momentum) + edge motion
   4 : disable
  The touchpad generates a mixture of absolute and relative packets, indicated
  by the the last byte of each packet being set to one of the following:
 Multitouch gesture packets 
	
	  Move cursor back to center of pad when we lose touch - this
	  specifically improves user experience when moving cursor with one
	  finger, and pressing a button with another.
 Otherwise, a full packet has been received 
 Only use absolute packets for the start of movement. 
 needed to detect tap 
 init abs position 
 Standard packet 
 Sign-extend if a sign bit is set. 
 Update position based on velocity 
 Reset time since last touch. 
		
		  Intellimouse initialization sequence, to get 4-byte instead
		  of 3-byte packets.
		
		  BYD-specific initialization, which enables absolute mode and
		  (if desired), the touchpad's built-in gesture detection.
 The touchpad should reply with 4 seemingly-random bytes 
 Pairs of parameters and values. 
 Finalize initialization. 
 Touchpad 
 Buttons 
 Absolute position 
 No relative support 
 SPDX-License-Identifier: GPL-2.0-only
   Amiga mouse driver for Linuxm68k
   Copyright (c) 2000-2002 Vojtech Pavlik
   Based on the work of:
 	Michael Rausch		James Banks
 	Matther Dillon		David Giller
 	Nathan Laredo		Linus Torvalds
 	Johan Myreen		Jes Sorensen
 	Russell King
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 2000-2001 Vojtech Pavlik
   Based on the work of:
 	Alan Cox	Robin O'Leary
  IBM PC110 touchpad driver for Linux
  We try to avoid enabling the hardware if it's not
  there, but we don't know how to test. But we do know
  that the PC110 is not a PCI system. So if we find any
  PCI devices in the machine, we don't have a PC110.
 SPDX-License-Identifier: GPL-2.0-or-later
-
  Finger Sensing Pad PS2 mouse driver.
  Copyright (C) 2005-2007 Asia Vital Components Co., Ltd.
  Copyright (C) 2005-2012 Tai-hwa Liang, Sentelic Corporation.
  Timeout for FSP PS2 command only (in milliseconds).
 Driver version. 
  Make sure that the value being sent to FSP will not conflict with
  possible sample rate values.
		
		  The requested value being sent to FSP matched to possible
		  sample rates, swap the given value such that the hardware
		  wouldn't get confused.
 swap isn't necessary 
  Make sure that the value being sent to FSP will not conflict with certain
  commands.
		
		  The requested value being sent to FSP matched to certain
		  commands, inverse the given value such that the hardware
		  wouldn't get confused.
 inversion isn't necessary 
	
	  We need to shut off the device and switch it into command
	  mode so we don't confuse our protocol handler. We don't need
	  to do that for writes because sysfs set helper does this for
	  us.
 should return 0xfe(request for resending) 
 should return 0xfc(failed) 
 swapping is required 
 expect 0xfe 
 swapping isn't necessary 
 expect 0xfe 
 should return 0xfc(failed) 
 inversion is required 
 swapping is required 
 swapping isn't necessary 
 write the register address in correct order 
 inversion is required 
 swapping is required 
 swapping isn't necessary 
 write the register value in correct order 
 Enable register clock gating for writing certain registers 
 only write if necessary 
 get the returned result 
 swapping is required 
 swapping isn't necessary 
 production number since Cx is available at: 0x0b40 ~ 0x0b42 
 LeftMiddleRightForwardBackward & Scroll UpDown 
 LeftMiddleRight & Scroll UpDownRightLeft 
 LeftMiddleRight & Scroll UpDown 
 LeftMiddleRight 
 Enable on-pad command tag output 
 only write if necessary 
 reconfigure horizontal scrolling packet output 
  Write device specific initial parameters.
  ex: 0xab 0xcd - write oxcd into register 0xab
  Read a register from device.
  ex: 0xab -- read content from register 0xab
 Interpret & dump the packet data. 
	
	  Full packet accumulated, process it
			
			  Ignore coordinate noise when finger leaving the
			  surface, otherwise cursor may jump to upper-left
			  corner.
			
			  MFMC packet: assume that there are two fingers on
			  pad
 MFMC packet 
 2nd finger 
					
					  workaround for buggy firmware
					  which doesn't clear MFMC bit if
					  the 1st finger is up
 1st finger 
					
					  workaround for buggy firmware
					  which doesn't clear MFMC bit if
					  the 2nd finger is up
 SFAC packet 
				 On-pad click in SFAC mode should be handled
				  by userspace.  On-pad clicks in MFMC mode
				  are real clickpad clicks, and not ignored.
 no multi-finger information 
 on-pad click, filter it if necessary 
 normal packet 
 special packet data translation from on-pad packets 
 wheel down 
 wheel up 
 horizontal left 
 horizontal right 
 push back to packet queue 
		
		  Processing wheel updown and extra button events
		
		  Standard PS2 Mouse
	
	  Standard procedure to enter FSP Intellimouse mode
	  (scrolling wheel, 4th and 5th buttons)
 Preparing relative coordinates output for older hardware 
 Ensure we are not in absolute mode 
 LeftMiddleRight & Scroll UpDownRightLeft 
		
		  Enable OPC tags such that driver can tell the difference
		  between on-pad and real button click
 enable on-pad click by default 
 Enable on-pad vertical and horizontal scrolling 
 Enable absolute coordinates output for CxDx hardware 
		
		  Hardware prior to Cx performs much better in relative mode;
		  hence, only enable absolute coordinates output as well as
		  multi-touch output for the newer hardware.
		 
		  Maximum coordinates can be computed as:
		 
		 	number of scanlines  64 - 57
		 
		  where number of XY scanline lines are 1612.
 firmware information is only available since C0 
 Set up various supported input event bits 
 SPDX-License-Identifier: GPL-2.0-only
  Elan I2CSMBus Touchpad driver - SMBus interface
  Copyright (c) 2013 ELAN Microelectronics Corp.
  Author: 林政維 (Duson Lin) <dusonlin@emc.com.tw>
  Based on cyapa driver:
  copyright (c) 2011-2012 Cypress Semiconductor, Inc.
  copyright (c) 2011-2012 Google, Inc.
  Trademarks are the property of their respective owners.
 Elan SMbus commands 
 Get hello packet 
 compare hello packet 
 enable tp 
 XXX should we send ETP_SMBUS_ENABLE_TP here? 
 A no-op 
 Get FW in which mode	(IAP_MODEMAIN_MODE)  
 set flash key 
 write iap password 
		
		  Read back password to make sure we enabled flash
		  successfully.
 Wait 30ms for MAIN_MODE change to IAP_MODE 
 Reset IC 
	
	  Due to the limitation of smbus protocol limiting
	  transfer to 32 bytes at a time, we must split block
	  in 2 transfers.
 Wait for FW to update one page ROM data. 
	
	  SMBus controllers with pattern 2 lack area info, as newer
	  high-precision packets use that space for coordinates.
 No special handling unlike I2C transport 
  Cypress APA trackpad with I2C interface
  Author: Dudley Du <dudl@cypress.com>
  Copyright (C) 2015 Cypress Semiconductor, Inc.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive for
  more details.
 Reserved, must be 0 
 bit7: resv, set to 0; bit6~0: command code.
 Reserved, must be 0 
 bit7: TGL; bit6~0: command code.
	
	  The value of data_status can be the first byte of data or
	  the command status or the unsupported command code depending on the
	  requested command code.
 Read Bootloader Information to determine Gen5 or Gen6. 
 Get App System Information to determine Gen5 or Gen6. 
 Try to wake from it deep sleep state if it is. 
 Empty the buffer queue to get fresh data with later commands. 
	
	  Read description info from trackpad device to determine running in
	  APP mode or Bootloader mode.
 Get PIP fixed information to determine Gen5 or Gen6. 
 Get App System Information to determine Gen5 or Gen6. 
 Get the number of Rx electrodes. 
 New power state applied in device not match the set power state. 
 Reserved, must be 0 
 Get the real set intervals from response. 
		
		  Send ping command to notify device prepare for wake up
		  when it's in deep sleep mode. At this time, device will
		  response nothing except an I2C NAK.
		
		  Assume TP in deep sleep mode when driver is loaded,
		  avoid driver unload and reload command IO issue caused by TP
		  has been set into deep sleep mode when unloading.
 Has in correct power mode state, early return. 
	
	  When trackpad in power off mode, it cannot change to other power
	  state directly, must be wake up from sleep firstly, then
	  continue to do next power sate change.
	
	  Disable device assert interrupts for command response to avoid
	  disturbing system suspending or hibernating process.
 Sync the interval setting from device. 
		
		  Gen6 internally supports to 2 low power scan interval time,
		  so can help to switch power mode quickly.
		  such as runtime suspend and system suspend.
 1. Suspend Scanning
 2. IDAC and RX Attenuator Calibration Data (Center Frequency). 
 RX Attenuator Mutual 
 IDAC Mutual 
 RX Attenuator Self RX 
 IDAC Self RX 
 RX Attenuator Self TX 
 IDAC Self TX 
 3. Read Attenuator Trim. 
 set attenuator trim values. 
 4. Resume Scanning
 Try to update trackpad product information. 
		
		  If trackpad device in deep sleep mode,
		  the app command will fail.
		  So always try to reset trackpad device to full active when
		  the device state is required.
 By default, the trackpad proximity function is enabled. 
 Get trackpad product information. 
 Only support product ID starting with CYTRA 
 SPDX-License-Identifier: GPL-2.0-only
  Cypress Trackpad PS2 mouse driver
  Copyright (c) 2012 Cypress Semiconductor Corporation.
  Author:
    Dudley Du <dudl@cypress.com>
  Additional contributors include:
    Kamal Mostafa <kamal@canonical.com>
    Kyle Fazzari <git@status.e4ward.com>
 define this and DEBUG for more verbose dump 
		
		  Send extension command byte (0xE8 or 0xF3).
		  If sending the command fails, send recovery command
		  to make the device return to the ready state.
 callers will do further checking. 
 Check for Cypress Trackpad signature bytes: 0x33 0xCC 
 Check for Cypress Trackpad signature bytes: 0x33 0xCC 
	
	  Trackpad fw_version 11 (in Dell XPS12) yields a bogus response to
	  CYTP_CMD_READ_TP_METRICS so do not try to use it. LP: #1103594.
 set default values for tp metrics. 
 Update trackpad parameters. 
  Reset trackpad device.
  This is also the default mode when trackpad powered on.
 finger position 
 HSCROLL gets added on to 0 finger count. 
 Invalid contact (e.g. palm). Ignore it. 
	
	  This is only true if one of the mouse buttons were tapped.  Make
	  sure it doesn't turn into a click. The regular tap-to-click
	  functionality will handle that on its own. If we don't do this,
	  disabling tap-to-click won't affect the mouse button zones.
 call packet process for reporting finger leave. 
	
	  Perform validation (and adjust packet size) based only on the
	  first byte; allow all further bytes through.
	
	  If absoluterelative mode bit has not been set yet, just pass
	  the byte through.
	
	  Reset Cypress Trackpad as a standard mouse. Then
	  let psmouse driver commmunicating with it as default PS2 mouse.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 2001-2005 Edouard TISSERANT   <edouard.tisserant@wanadoo.fr>
   Copyright (c) 2004-2005 Stephane VOLTZ      <svoltz@numericable.fr>
   USB Acecad "Acecad Flair" tablet support
   Changelog:
       v3.2 - Added sysfs support
 success 
 this urb is terminated, clean up 
 Pressure should compute the same way for flair and 302 
 event termination 
 SPDX-License-Identifier: GPL-2.0-only
  Pressure-threshold modules param code from Alex Perry <alex.perry@ieee.org>
 success 
 this urb is terminated, clean up 
input_report_key(dev, BTN_TOUCH , data[0] & 0x01);
 SPDX-License-Identifier: GPL-2.0-only
  Pegasus Mobile Notetaker Pen input tablet driver
  Copyright (c) 2016 Martin Kepplinger <martink@posteo.de>
  request packet (control endpoint):
  |-------------------------------------|
  | Report ID | Nr of bytes | command   |
  | (1 byte)  | (1 byte)    | (n bytes) |
  |-------------------------------------|
  | 0x02      | n           |           |
  |-------------------------------------|
  data packet after set xy mode command, 0x80 0xb5 0x02 0x01
  and pen is in range:
  byte	byte name		value (bits)
  --------------------------------------------
  0	status			0 1 0 0 0 0 X X
  1	color			0 0 0 0 H 0 S T
  2	X low
  3	X high
  4	Y low
  5	Y high
  X X	battery state:
 	no state reported	0x00
 	battery low		0x01
 	battery good		0x02
  H	Hovering
  S	Switch 1 (pen button)
  T	Tip
 USB HID defines 
 device specific defines 
 in xy data packet 
 serialize access to opensuspend 
 device button pressed 
 xy data 
 pen-up event 
 We control interface 0 
 Sanity check that the device has an endpoint 
 SPDX-License-Identifier: GPL-2.0-or-later
   USB Hanwang tablet support
   Copyright (c) 2010 Xing Wei <weixing@hanwang.com.cn>
 device IDs 
 match vendor and interface info  
 data packet 
 tool prox out 
 artmaster ii pen leave 
 first time tool prox in 
 art_master III 
 art_master_HD 
 art_master III 
 art_master_HD 
 tool data packet 
 roll wheel 
 success ;
 this urb is terminated, clean up 
 SPDX-License-Identifier: GPL-2.0-or-later
   Native support for the Aiptek HyperPen USB Tablets
   (4000U5000U6000U8000U12000U)
   Copyright (c) 2001      Chris Atenasio   <chris@crud.net>
   Copyright (c) 2002-2004 Bryan W. Headley <bwheadley@earthlink.net>
   based on wacom.c by
      Vojtech Pavlik      <vojtech@suse.cz>
      Andreas Bach Aaen   <abach@stofanet.dk>
      Clifford Wolf       <clifford@clifford.at>
      Sam Mosel           <sam.mosel@computer.org>
      James E. Blair      <corvus@gnu.org>
      Daniel Egger        <egger@suse.de>
   Many thanks to Oliver Kuechemann for his support.
   ChangeLog:
       v0.1 - Initial release
       v0.2 - Hack to get around fake event 28's. (Bryan W. Headley)
       v0.3 - Make URB dynamic (Bryan W. Headley, Jun-8-2002)
              Released to Linux 2.4.19 and 2.5.x
       v0.4 - Rewrote substantial portions of the code to deal with
              corrected control sequences, timing, dynamic configuration,
              support of 6000U - 12000U, procfs, and macro key support
              (Jan-1-2003 - Feb-5-2003, Bryan W. Headley)
       v1.0 - Added support for diagnostic messages, count of messages
              received from URB - Mar-8-2003, Bryan W. Headley
       v1.1 - added support for tablet resolution, changed DV and proximity
              some corrections - Jun-22-2003, martin schneebacher
            - Added support for the sysfs interface, deprecating the
              procfs interface for 2.5.x kernel. Also added support for
              Wheel command. Bryan W. Headley July-15-2003.
       v1.2 - Reworked jitter timer as a kernel thread.
              Bryan W. Headley November-28-2003Jan-10-2004.
       v1.3 - Repaired issue of kernel thread going nuts on single-processor
              machines, introduced programmableDelay as a command line
              parameter. Feb 7 2004, Bryan W. Headley.
       v1.4 - Re-wire jitter so it does not require a thread. Courtesy of
              Rene van Paassen. Added reporting of physical pointer device
              (e.g., stylus, mouse in reports 2, 3, 4, 5. We don't know
              for reports 1, 6.)
              what physical device reports for reports 1, 6.) Also enabled
              MOUSE and LENS tool button modes. Renamed "rubber" to "eraser".
              Feb 20, 2004, Bryan W. Headley.
       v1.5 - Added previousJitterable, so we don't do jitter delay when the
              user is holding a button down for periods of time.
  NOTE:
       This kernel driver is augmented by the "Aiptek" XFree86 input
       driver for your X server, as well as the Gaiptek GUI Front-end
       "Tablet Manager".
       These three products are highly interactive with one another,
       so therefore it's easier to document them all as one subsystem.
       Please visit the project's "home page", located at,
       http:aiptektablet.sourceforge.net.
  Aiptek status packet:
  (returned as Report 1 - relative coordinates from mouse and stylus)
         bit7  bit6  bit5  bit4  bit3  bit2  bit1  bit0
  byte0   0     0     0     0     0     0     0     1
  byte1   0     0     0     0     0    BS2   BS    Tip
  byte2  X7    X6    X5    X4    X3    X2    X1    X0
  byte3  Y7    Y6    Y5    Y4    Y3    Y2    Y1    Y0
  (returned as Report 2 - absolute coordinates from the stylus)
         bit7  bit6  bit5  bit4  bit3  bit2  bit1  bit0
  byte0   0     0     0     0     0     0     1     0
  byte1  X7    X6    X5    X4    X3    X2    X1    X0
  byte2  X15   X14   X13   X12   X11   X10   X9    X8
  byte3  Y7    Y6    Y5    Y4    Y3    Y2    Y1    Y0
  byte4  Y15   Y14   Y13   Y12   Y11   Y10   Y9    Y8
  byte5                 BS2   BS1   Tip   IR    DV
  byte6  P7    P6    P5    P4    P3    P2    P1    P0
  byte7  P15   P14   P13   P12   P11   P10   P9    P8
  (returned as Report 3 - absolute coordinates from the mouse)
         bit7  bit6  bit5  bit4  bit3  bit2  bit1  bit0
  byte0   0     0     0     0     0     0     1     1
  byte1  X7    X6    X5    X4    X3    X2    X1    X0
  byte2  X15   X14   X13   X12   X11   X10   X9    X8
  byte3  Y7    Y6    Y5    Y4    Y3    Y2    Y1    Y0
  byte4  Y15   Y14   Y13   Y12   Y11   Y10   Y9    Y8
  byte5                 BS2   BS1   Tip   IR    DV
  byte6  P7    P6    P5    P4    P3    P2    P1    P0
  byte7  P15   P14   P13   P12   P11   P10   P9    P8
  (returned as Report 4 - macrokeys from the stylus)
         bit7  bit6  bit5  bit4  bit3  bit2  bit1  bit0
  byte0   0     0     0     0     0     1     0     0
  byte1   0     0     0    BS2   BS    Tip   IR    DV
  byte2   0     0     0     0     0     0     1     0
  byte3   0     0     0    K4    K3    K2    K1    K0
  byte4  P7    P6    P5    P4    P3    P2    P1    P0
  byte5  P15   P14   P13   P12   P11   P10   P9    P8
  (returned as Report 5 - macrokeys from the mouse)
         bit7  bit6  bit5  bit4  bit3  bit2  bit1  bit0
  byte0   0     0     0     0     0     1     0     1
  byte1   0     0     0    BS2   BS    Tip   IR    DV
  byte2   0     0     0     0     0     0     1     0
  byte3   0     0     0    K4    K3    K2    K1    K0
  byte4  P7    P6    P5    P4    P3    P2    P1    P0
  byte5  P15   P14   P13   P12   P11   P10   P9    P8
  IR: In Range = Proximity on
  DV = Data Valid
  BS = Barrel Switch (as in, macro keys)
  BS2 also referred to as Tablet Pick
  Command Summary:
  Use report_type CONTROL (3)
  Use report_id   2
  CommandData    Description     Return Bytes    Return Value
  0x100x00       SwitchToMouse       0
  0x100x01       SwitchToTablet      0
  0x180x04       SetResolution       0
  0x120xFF       AutoGainOn          0
  0x170x00       FilterOn            0
  0x010x00       GetXExtension       2           MaxX
  0x010x01       GetYExtension       2           MaxY
  0x020x00       GetModelCode        2           ModelCode = LOBYTE
  0x030x00       GetODMCode          2           ODMCode
  0x080x00       GetPressureLevels   2           =512
  0x040x00       GetFirmwareVersion  2           Firmware Version
  0x110x02       EnableMacroKeys     0
  To initialize the tablet:
  (1) Send Resolution500LPI (Command)
  (2) Query for Model code (Option Report)
  (3) Query for ODM code (Option Report)
  (4) Query for firmware (Option Report)
  (5) Query for GetXExtension (Option Report)
  (6) Query for GetYExtension (Option Report)
  (7) Query for GetPressureLevels (Option Report)
  (8) SwitchToTablet for Absolute coordinates, or
      SwitchToMouse for Relative coordinates (Command)
  (9) EnableMacroKeys (Command)
  (10) FilterOn (Command)
  (11) AutoGainOn (Command)
  (Step 9 can be omitted, but you'll then have no function keys.)
	 PointerMode codes
	 CoordinateMode code
        XTilt and YTilt values
	 Wheel values
	 ToolCode values, which BTW are 0x140 .. 0x14f
	  We have things set up such that if the tool button has changed,
	  the tools get reset.
	 toolMode codes
	 Diagnostic message codes
	 Time to wait (in ms) to help mask hand jittering
	  when pressing the stylus buttons.
	 Time to wait (in ms) in-between sending the tablet
	  a command and beginning the process of reading the return
	  sequence from the tablet.
	 Mouse button programming
	 Stylus button programming
	 Length of incoming packet from the tablet
	 We report in EV_MISC both the proximity and
	  whether the report came from the stylus, tablet mouse
	  or "unknown" -- Unknown when the tablet is in relative
	  mode, because we only get report 1's.
 Tablet manufacturer code       
 Tablet model code (not unique) 
 promeeprom version            
 device's physical usb path     
 stylus-, mouse-only or either 
 absoluterelative coords      
 pen, pencil, brush, etc. tool 
 synthetic xTilt amount        
 synthetic yTilt amount        
 synthetic wheel amount        
 stylus upper btn delivers...  
 stylus lower btn delivers...  
 mouse left btn delivers...    
 mouse middle btn delivers...  
 mouse right btn delivers...   
 delay for tablet programming  
 delay for hand jittering      
 input device struct           
 usb interface struct          
 urb for incoming reports      
 our dma stuffage              
 tablet's array of features    
 tablet's current programmable 
 ... and new param settings    
 interface number for IO       
 tablet diagnostic codes       
 event count                   
 jitter: in jitter delay?      
 jitter: time when delay ends  
 jitterable prev value     
 macro key to reset            
 pen, pencil, brush, etc. tool 
 incoming packet data          
  Permit easy lookup of keyboard events to send, versus
  the bitmap which comes from the tablet. This hides the
  issue that the F_keys are not sequentially numbered.
  Map values to strings and back. Every map should have the following
  as its last element: { NULL, AIPTEK_INVALID_VALUE }.
  aiptek_irq can receive one of six potential reports.
  The documentation for each is in the body of the function.
  The tablet reports on several attributes per invocation of
  aiptek_irq. Because the Linux Input Event system allows the
  transmission of ONE attribute per input_report_xxx() call,
  collation has to be done on the other end to reconstitute
  a complete tablet report. Further, the number of Input Event reports
  submitted varies, depending on what USB report type, and circumstance.
  To deal with this, EV_MSC is used to indicate an 'end-of-report'
  message. This has been an undocumented convention understood by the kernel
  tablet driver and clients such as gpm and XFree86's tablet drivers.
  Of the information received from the tablet, the one piece I
  cannot transmit is the proximity bit (without resorting to an EV_MSC
  convention above.) I therefore have taken over REL_MISC and ABS_MISC
  (for relative and absolute reports, respectively) for communicating
  Proximity. Why two events? I thought it interesting to know if the
  Proximity event occurred while the tablet was in absolute or relative
  mode.
  Update: REL_MISC proved not to be such a good idea. With REL_MISC you
  get an event transmitted each time. ABS_MISC works better, since it
  can be set and re-set. Thus, only using ABS_MISC from now on.
  Other tablets use the notion of a certain minimum stylus pressure
  to infer proximity. While that could have been done, that is yet
  another 'by convention' behavior, the documentation for which
  would be spread between two (or more) pieces of software.
  EV_MSC usage was terminated for this purpose in Linux 2.5.x, and
  replaced with the input_sync() method (which emits EV_SYN.)
 Success 
 This urb is terminated, clean up 
	 See if we are in a delay loop -- throw out report if true.
	 Report 1 delivers relative coordinates with either a stylus
	  or the mouse. You do not know, however, which input
	  tool generated the event.
			 jitterable keeps track of whether any button has been pressed.
			  We're also using it to remap the physical mouse button mask
			  to pseudo-settings. (We don't specifically care about it's
			  value after movingtransposing mouse button bitmasks, except
			  that a non-zero value indicates that one or more
			  mouse button was pressed.)
			 Wheel support is in the form of a single-event
			  firing.
	 Report 2 is delivered only by the stylus, and delivers
	  absolute coordinates.
			 Use jitterable to re-arrange button masks
			 dv indicates 'data valid' (e.g., the tablet is in sync
			  and has delivered a "correct" report) We will ignore
			  all 'bad' reports...
				 If the selected tool changed, reset the old
				  tool key, and set the new one.
					 Wheel support is in the form of a single-event
					  firing.
	 Report 3's come from the mouse in absolute mode.
				 If the selected tool changed, reset the old
				  tool key, and set the new one.
					 Wheel support is in the form of a single-event
					  firing.
	 Report 4s come from the macro keys when pressed by stylus
		         If the selected tool changed, reset the old
			  tool key, and set the new one.
	 Report 5s come from the macro keys when pressed by mouse
		         If the selected tool changed, reset the old
			  tool key, and set the new one.
	 We have no idea which tool can generate a report 6. Theoretically,
	  neither need to, having been given reports 4 & 5 for such use.
	  However, report 6 is the 'official-looking' report for macroKeys;
	  reports 4 & 5 supposively are used to support unnamed, unknown
	  hat switches (which just so happen to be the macroKeys.)
		 If the selected tool changed, reset the old
		   tool key, and set the new one.
	 Jitter may occur when the user presses a button on the stlyus
	  or the mouse. What we do to prevent that is wait 'x' milliseconds
	  following a 'jitterable' event, which should give the hand some time
	  stabilize itself.
	 
	  We just introduced aiptek->previousJitterable to carry forth the
	  notion that jitter occurs when the button state changes from on to off:
	  a person drawing, holding a button down is not subject to jittering.
	  With that in mind, changing from upper button depressed to lower button
	  WILL transition through a jitter delay.
  These are the USB id's known so far. We do not identify them to
  specific Aiptek model numbers, because there has been overlaps,
  use, and reuse of id's in existing models. Certain models have
  been known to use more than one ID, indicative perhaps of
  manufacturing revisions. In any event, we consider these
  IDs to not be model-specific nor unique.
  Open an instance of the tablet driver.
  Close an instance of the tablet driver.
  aiptek_set_report and aiptek_get_report() are borrowed from Linux 2.4.x,
  where they were known as usb_set_report and usb_get_report.
  Send a command to the tablet.
  Retrieve information from the tablet. Querying info is defined as first
  sending the {command,data} sequence as a command, followed by a wait
  (aka, "programmaticDelay") and then a "read" request.
  Program the tablet into either absolute or relative mode.
  We also get information about the tablet's size.
 Execute Resolution500LPI 
 Query getModelCode 
 Query getODMCode 
 Query getFirmwareCode 
 Query getXextension 
 Query getYextension 
 Query getPressureLevels 
	 Depending on whether we are in absolute or relative mode, we will
	  do a switchToTablet(absolute) or switchToMouse(relative) command.
 Execute switchToTablet 
 Execute switchToMouse 
 Enable the macro keys 
 Execute FilterOn 
 Execute AutoGainOn 
	 Reset the eventCount, so we track events from last (re)programming
  Sysfs functions. Sysfs prefers that individually-tunable parameters
  exist in their separate pseudo-files. Summary data that is immutable
  may exist in a singular file so long as you don't define a writeable
  interface.
  support the 'size' file -- display support
 These structs define the sysfs files, param #1 is the name of the
  file, param 2 is the file permissions, param 3 & 4 are to the
  output generator and input parser routines. Absence of a routine is
  permitted -- it only means can't either 'cat' the file, or send data
  to it.
  support routines for the 'pointer_mode' file. Note that this file
  both displays current setting and allows reprogramming.
  support routines for the 'coordinate_mode' file. Note that this file
  both displays current setting and allows reprogramming.
  support routines for the 'tool_mode' file. Note that this file
  both displays current setting and allows reprogramming.
  support routines for the 'xtilt' file. Note that this file
  both displays current setting and allows reprogramming.
  support routines for the 'ytilt' file. Note that this file
  both displays current setting and allows reprogramming.
  support routines for the 'jitter' file. Note that this file
  both displays current setting and allows reprogramming.
  support routines for the 'delay' file. Note that this file
  both displays current setting and allows reprogramming.
  support routines for the 'event_count' file. Note that this file
  only displays current setting.
  support routines for the 'diagnostic' file. Note that this file
  only displays current setting.
  support routines for the 'stylus_upper' file. Note that this file
  both displays current setting and allows for setting changing.
  support routines for the 'stylus_lower' file. Note that this file
  both displays current setting and allows for setting changing.
  support routines for the 'mouse_left' file. Note that this file
  both displays current setting and allows for setting changing.
  support routines for the 'mouse_middle' file. Note that this file
  both displays current setting and allows for setting changing.
  support routines for the 'mouse_right' file. Note that this file
  both displays current setting and allows for setting changing.
  support routines for the 'wheel' file. Note that this file
  both displays current setting and allows for setting changing.
  support routines for the 'execute' file. Note that this file
  both displays current setting and allows for setting changing.
	 There is nothing useful to display, so a one-line manual
	  is in order...
	 We do not care what you write to this file. Merely the action
	  of writing to this file triggers a tablet reprogramming.
  support routines for the 'odm_code' file. Note that this file
  only displays current setting.
  support routines for the 'model_code' file. Note that this file
  only displays current setting.
  support routines for the 'firmware_code' file. Note that this file
  only displays current setting.
  This routine is called when a tablet has been identified. It basically
  sets up the tablet and the driver's internal structures.
	 programmableDelay is where the command-line specified
	  delay is kept. We make it the first element of speeds[],
	  so therefore, your override speed is tried first, then the
	  remainder. Note that the default value of 400ms will be tried
	  if you do not specify any command line parameter.
	 Set up the curSettings struct. Said struct contains the current
	  programmable parameters. The newSetting struct contains changes
	  the user makes to the settings via the sysfs interface. Those
	  changes are not "committed" to curSettings until the user
	  writes to the sysfs...execute file.
	 Both structs should have equivalent settings
	 Determine the usb devices' physical path.
	  Asketh not why we always pretend we're using "..input0",
	  but I suspect this will have to be refactored one
	  day if a single USB device can be a keyboard & a mouse
	  & a tablet, and the inputX number actually will tell
	  us something...
	 Set up client data, pointers to open and close routines
	  for the input device.
	 Now program the capacities of the tablet, in terms of being
	  an input device.
 Set up key and button codes 
	
	  Program the input device coordinate capacities. We do not yet
	  know what maximum X, Y, and Z values are, so we're putting fake
	  values in. Later, we'll ask the tablet to put in the correct
	  values.
 Verify that a device really has an endpoint 
	 Go set up our URB, which is called when the tablet receives
	  input.
	 Program the tablet. This sets the tablet up in the mode
	  specified in newSetting, and also queries the tablet's
	  physical capacities.
	 
	  Sanity check: if a tablet doesn't like the slow programmatic
	  delay, we often get sizes of 0x0. Let's use that as an indicator
	  to try faster delays, up to 25 ms. If that logic fails, well, you'll
	  have to explain to us how your tablet thinks it's 0x0, and yet that's
	  not an error :-)
	 Murphy says that some day someone will have a tablet that fails the
	 Associate this driver's struct with the usb interface.
	 Set up the sysfs files
	 Register the tablet as an Input Device
  Deal with tablet disconnecting from the system.
	 Disassociate driver's struct with usb interface
		 Free & unhook everything from the system.
 SPDX-License-Identifier: GPL-2.0-or-later
  Wacom protocol 4 serial tablet driver
  Copyright 2014      Hans de Goede <hdegoede@redhat.com>
  Copyright 2011-2012 Julian Squires <julian@cipht.net>
  Many thanks to Bill Seremetis, without whom PenPartner support
  would not have been possible. Thanks to Patrick Mahoney.
  This driver was developed with reference to much code written by others,
  particularly:
   - elo, gunze drivers by Vojtech Pavlik <vojtech@ucw.cz>;
   - wacom_w8001 driver by Jaya Kumar <jayakumar.lkml@gmail.com>;
   - the USB wacom input driver, credited to many people
     (see driversinputtabletwacom.h);
   - new and old versions of linuxwacom  xf86-input-wacom credited to
     Frederic Lepied, France. <Lepied@XFree86.org> and
     Ping Cheng, Wacom. <pingc@wacom.com>;
   - and xf86wacom.c (a presumably ancient version of the linuxwacom code),
     by Frederic Lepied and Raph Levien <raph@gtk.org>.
  To do:
   - support pad buttons; (requires access to a model with pad buttons)
   - support (protocol 4-style) tilt (requires access to a > 1.4 rom model)
  Wacom serial protocol 4 documentation taken from linuxwacom-0.9.9 code,
  protocol 4 uses 7 or 9 byte of data in the following format:
 	Byte 1
 	bit 7  Sync bit always 1
 	bit 6  Pointing device detected
 	bit 5  Cursor = 0  Stylus = 1
 	bit 4  Reserved
 	bit 3  1 if a button on the pointing device has been pressed
 	bit 2  P0 (optional)
 	bit 1  X15
 	bit 0  X14
 	Byte 2
 	bit 7  Always 0
 	bits 6-0 = X13 - X7
 	Byte 3
 	bit 7  Always 0
 	bits 6-0 = X6 - X0
 	Byte 4
 	bit 7  Always 0
 	bit 6  B3
 	bit 5  B2
 	bit 4  B1
 	bit 3  B0
 	bit 2  P1 (optional)
 	bit 1  Y15
 	bit 0  Y14
 	Byte 5
 	bit 7  Always 0
 	bits 6-0 = Y13 - Y7
 	Byte 6
 	bit 7  Always 0
 	bits 6-0 = Y6 - Y0
 	Byte 7
 	bit 7 Always 0
 	bit 6  Sign of pressure data; or wheel-rel for cursor tool
 	bit 5  P7; or REL1 for cursor tool
 	bit 4  P6; or REL0 for cursor tool
 	bit 3  P5
 	bit 2  P4
 	bit 1  P3
 	bit 0  P2
 	byte 8 and 9 are optional and present only
 	in tilt mode.
 	Byte 8
 	bit 7 Always 0
 	bit 6 Sign of tilt X
 	bit 5  Xt6
 	bit 4  Xt5
 	bit 3  Xt4
 	bit 2  Xt3
 	bit 1  Xt2
 	bit 0  Xt1
 	Byte 9
 	bit 7 Always 0
 	bit 6 Sign of tilt Y
 	bit 5  Yt6
 	bit 4  Yt5
 	bit 3  Yt4
 	bit 2  Yt3
 	bit 1  Yt2
 	bit 0  Yt1
  Note: sending "\r$\r" causes at least the Digitizer II to send
  packets in ASCII instead of binary.  "\r#" seems to undo that.
 Note that this is a protocol 4 packet without tilt information. 
 flags 
 device IDs 
 PL 
 DT 
 UD 
 ET 
 CT 
 KT 
 UNTESTED 
 PL-710 
 PL-550 
 PL-800 
 UNTESTED 
 handle relative wheel for non-stylus device 
	
	  We're either expecting a carriage return-terminated ASCII
	  response string, or a seven-byte packet with the MSB set on
	  the first byte.
	 
	  Note however that some tablets (the PenPartner, for
	  example) don't send a carriage return at the end of a
	  command.  We handle these by waiting for timeout.
 Leave place for 0 termination 
 UNTESTED 
 Timeout, process what we've received. 
	 Note that setting the link speed is the job of inputattach.
	  We assume that reset negotiation has already happened,
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1998-2001 Vojtech Pavlik
  PDPI Lightning 4 gamecard driver for Linux.
 80 us 
  l4_wait_ready() waits for the L4 to become ready.
  l4_cooked_read() reads data from the Lightning 4.
  l4_getcal() reads the L4 with calibration values.
  l4_setcal() programs the L4 with calibration values.
  l4_calibrate() calibrates the L4 for the attached device, so
  that the device's resistance fits into the L4's 8-bit range.
 on 2.9+ the setcal command works correctly 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 2001 Vojtech Pavlik
  EMU10k1 - SB Live  Audigy - gameport driver for Linux
 SB Live gameport 
 Audigy gameport 
 Dell SB Live 
 Audigy LS gameport 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1999-2001 Vojtech Pavlik
   Copyright (c) 1999 Brian Gerst
  NS558 based standard IBM game port driver for Linux
  ns558_isa_probe() tries to find an isa gameport at the
  specified address, and also checks for mirrors.
  A joystick must be attached for this to work.
  No one should be using this address.
  We must not be able to write arbitrary values to the port.
  The lower two axis bits must be 1 after a write.
  After a trigger, there must be at least some bits changing.
  After some time (4ms) the axes shouldn't change anymore.
  And now find the number of mirrors of the port.
 Don't disturb anyone 
 We allow 30% difference 
 ALS 100 
 ALS 200 
 ALS 100+ 
 ALS 120 
 AdLib NSC16 
 AZT1008 
 Opl3-SAx 
 CS4232 
 CS4236 
 CS4327 
 SB16 
 AWE64 
 Vibra16 
 SoundscapeVIVO 
 ES1869 
 ES1878 
 ES688 
 CS4232 
 OPTi Audio16 
 Opl3-SA 
 Opl3-SAx 
 Generic 
 should be ENOSYS really 
  Probe ISA ports after PnP, so that PnP ports that are already
  enabled get detected as PnP. This may be suboptimal in multi-device
  configurations, but saves hassle with simple setups.
 SPDX-License-Identifier: GPL-2.0-only
  Generic gameport layer
  Copyright (c) 1999-2002 Vojtech Pavlik
  Copyright (c) 2005 Dmitry Torokhov
 HZ 
#include <asmio.h>
  gameport_mutex protects entire gameport subsystem and is taken
  every time gameport port or driver registrered or unregistered.
  gameport_measure_speed() measures the gameport io speed.
  Basic gameport -> driver core mappings
  Gameport event processing.
 protects gameport_event_list 
			
			  If this event is of different type we should not
			  look further - we only suppress duplicate events
			  that were sent back-to-back.
	
	  Note that we handle only one event here to give swsusp
	  a chance to freeze kgameportd thread. Gameport events
	  should be pretty rare so we are not concerned about
	  taking performance hit.
	
	  Scan event list for the other events for the same gameport port,
	  starting with the most recent one. If event is the same we
	  do not need add new one. If event is of different type we
	  need to add this event and should not look further because
	  we need to preserve sequence of distinct events.
  Remove all events that have been submitted for a given object,
  be it a gameport port or a driver.
  Destroy child gameport port (if any) that has not been fully registered yet.
  Note that we rely on the fact that port can have only one child and therefore
  only one child registration request can be pending. Additionally, children
  are registered by driver's connect() handler so there can't be a grandchild
  pending registration together with a child.
  Gameport port operations
  Prepare gameport port for registration.
  Complete gameport port registration.
  Driver core will attempt to find appropriate driver for the port.
  gameport_destroy_port() completes deregistration process and removes
  port from the system
  Reconnect gameport port and all its children (re-initialize attached devices)
 Ok, old children are now gone, we are done 
  gameport_disconnect_port() unbinds a port from its driver. As a side effect
  all child ports are unbound and destroyed.
		
		  Children ports should be disconnected and destroyed
		  first, staring with the leaf one, since we don't want
		  to do recursion
 empty ;
	
	  Ok, no children left, now disconnect this port
  Submits register request to kgameportd for subsequent execution.
  Note that port registration is always asynchronous.
  Synchronously unregisters gameport port.
  Gameport driver operations
	
	  Temporarily disable automatic binding because probing
	  takes long time and we are better off doing it in kgameportd
	
	  Reset ignore flag and let kgameportd bind the driver to free ports
 so gameport_find_driver ignores it 
 we could've deleted some ports, restart 
	
	  There should not be any outstanding events but work may
	  still be scheduled so simply cancel it.
 SPDX-License-Identifier: GPL-2.0-or-later
   FM801 gameport driver for Linux
   Copyright (c) by Takashi Iwai <tiwai@suse.de>
 reset 
 enable joystick 1 and 2 
 SPDX-License-Identifier: GPL-2.0-or-later
  pwrseq_sd8787.c - power sequence support for Marvell SD8787 BT + Wifi chip
  Copyright (C) 2016 Matt Ranostay <matt@ranostay.consulting>
  Based on the original work pwrseq_simple.c
   Copyright (C) 2014 Linaro Ltd
   Author: Ulf Hansson <ulf.hansson@linaro.org>
 sentinel },
 SPDX-License-Identifier: GPL-2.0
  Helper functions for MMC regulators.
  mmc_ocrbitnum_to_vdd - Convert a OCR bit number to its voltage
  @vdd_bit:	OCR bit number
  @min_uV:	minimum voltage value (mV)
  @max_uV:	maximum voltage value (mV)
  This function returns the voltage range according to the provided OCR
  bit number. If conversion is not possible a negative errno value returned.
	
	  REVISIT mmc_vddrange_to_ocrmask() may have set some
	  bits this regulator doesn't quite support ... don't
	  be too picky, most cards and regulators are OK with
	  a 0.1V range goof (it's a small error percentage).
  mmc_regulator_get_ocrmask - return mask of supported voltages
  @supply: regulator to use
  This returns either a negative errno, or a mask of voltages that
  can be provided to MMCSDSDIO devices using the specified voltage
  regulator.  This would normally be called before registering the
  MMC host adapter.
  mmc_regulator_set_ocr - set regulator to match host->ios voltage
  @mmc: the host to regulate
  @supply: regulator to use
  @vdd_bit: zero for power off, else a bit number (host->ios.vdd)
  Returns zero on success, else negative errno.
  MMC host drivers may use this to enable or disable a regulator using
  a particular supply voltage.  This would normally be called from the
  set_ios() method.
	
	  Check if supported first to avoid errors since we may try several
	  signal levels during power up and don't want to show errors.
	
	  The voltage is already set, no need to switch.
	  Return 1 to indicate that no switch happened.
  mmc_regulator_set_vqmmc - Set VQMMC as per the ios
  @mmc: the host to regulate
  @ios: io bus settings
  For 3.3V signaling, we try to match VQMMC to VMMC as closely as possible.
  That will match the behavior of old boards where VQMMC and VMMC were supplied
  by the same supply.  The Bus Operating conditions for 3.3V signaling in the
  SD card spec also define VQMMC in terms of VMMC.
  If this is not possible we'll try the full 2.7-3.6V of the spec.
  For 1.2V and 1.8V signaling we'll try to get as close as possible to the
  requested voltage.  This is definitely a good idea for UHS where there's a
  separate regulator on the card that's trying to make 1.8V and it's best if
  we match.
  This function is expected to be used by a controller's
  start_signal_voltage_switch() function.
 If no vqmmc supply then we can't change the voltage 
		
		  Due to a limitation in the current implementation of
		  regulator_set_voltage_triplet() which is taking the lowest
		  voltage possible if below the target, search for a suitable
		  voltage in two steps and try to stay close to vmmc
		  with a 0.3V tolerance at first.
 CONFIG_REGULATOR 
  mmc_regulator_get_supply - try to get VMMC and VQMMC regulators for a host
  @mmc: the host to regulate
  Returns 0 or errno. errno should be handled, it is either a critical error
  or -EPROBE_DEFER. 0 means no critical error but it does not mean all
  regulators have been found because they all are optional. If you require
  certain regulators, you need to check separately in your driver if they got
  populated after calling this function.
 SPDX-License-Identifier: GPL-2.0-or-later
   linuxdriversmmccoresd_ops.h
   Copyright 2006-2007 Pierre Ossman
 Check that card supported application commands 
	
	  We have to resend MMC_APP_CMD for each attempt so
	  we cannot use the retries field in mmc_command.
 no point in retrying; no APP commands allowed 
 no point in retrying illegal APP commands 
 SPI only defines one bit 
 if we're just probing, do a single pass 
 otherwise wait until reset completes 
	
	  To support SD 2.0 cards, we must always invoke SD_SEND_IF_COND
	  before SD_APP_OP_COND. This command will harmlessly fail for
	  SD 1.0 cards.
 Probe card for SD express support via PCIe. 
 Probe also for 1.2V support. 
 Continue with the SD express init, if the card supports it. 
		
		  According to the spec the clock shall also be gated, but
		  let's leave this to the host driver for more flexibility.
 NOTE: caller guarantees scr is heap-allocated 
	 dma onto stack is unsafenonportable, but callers to this
	  routine normally provide temporary on-stack buffers ...
 NOTE: caller guarantees resp is heap-allocated 
 NOTE: caller guarantees ssr is heap-allocated 
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriversmmccorebus.c
   Copyright (C) 2003 Russell King, All Rights Reserved.
   Copyright (C) 2007 Pierre Ossman
   MMC card bus driver model
  This currently matches any MMC driver to any MMC card - drivers
  themselves make the decision whether to drive this card in their
  probe method.
	
	  SDIO (non-combo) cards are not handled by mmc_block driver and do not
	  have accessible CID register which used by mmc_card_name() function.
	
	  Request the mmc_block device.  Note: that this is a direct request
	  for the module it carries no information as to what is inserted.
 !CONFIG_PM 
 	mmc_register_driver - register a media driver
 	@drv: MMC media driver
 	mmc_unregister_driver - unregister a media driver
 	@drv: MMC media driver
  Allocate and initialise a new MMC card structure.
  Register a new MMC card with the driver model.
  Unregister a new MMC card with the driver model, and
  (eventually) free it.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015, Samsung Electronics Co., Ltd.
  Author: Marek Szyprowski <m.szyprowski@samsung.com>
  Simple eMMC hardware reset provider
		
		  register reset handler to ensure emmc reset also from
		  emergency_reboot(), priority 255 is the highest priority
		  so it will be executed before any system reboot handler.
 sentinel },
 SPDX-License-Identifier: GPL-2.0-or-later
  SDIO UARTGPS driver
  Based on driversserial8250.c and driversserialserial_core.c
  by Russell King.
  Author:	Nicolas Pitre
  Created:	June 15, 2007
  Copyright:	MontaVista Software, Inc.
  Note: Although this driver assumes a 16550A-like UART implementation,
  it is not possible to leverage the common 825016550 driver, nor the
  core UART infrastructure, as they assumes direct access to the hardware
  registers, often under a spinlock.  This is not possible in the SDIO
  context as SDIO access functions must be able to sleep.
  Because we need to lock the SDIO host to ensure an exclusive access to
  the card, we simply rely on that lock to also prevent and serialize
  concurrent access to the same port.
 Number of UARTs this driver can handle 
	
	  We're killing a port that potentially still is in use by
	  the tty layer. Be careful to prevent any further access
	  to the SDIO function and arrange for the tty layer to
	  give up on that port ASAP.
	  Beware: the lock ordering is critical.
 tty_hangup is async so is this safe as is ?? 
	 FIXME: What stops this losing the delta bits and breaking
 Special case: B0 rate. 
		
		  Oops, the quotient was zero.  Try again with the old
		  baud rate if possible, otherwise default to 9600.
	
	  Characters to ignore
		
		  If we're ignoring parity and break indicators,
		  ignore overruns too (for real raw support).
	
	  ignore all characters if CREAD is not set
	
	  CTS flow control flag and modem status interrupts
			
			  For statistics only
			
			  Mask off conditions which should be ignored.
		
		  Overrun is special.  Since it's reported immediately,
		  it doesn't affect the current character.
 DCD raise - wake for open 
 DCD drop - hang up if tty attached 
  This handles the interrupt from one port.
	
	  In a few places sdio_uart_irq() is called directly instead of
	  waiting for the actual interrupt to be raised and the SDIO IRQ
	  thread scheduled in order to reduce latency.  However, some
	  interaction with the tty core may end up calling us back
	  (serial echo, flow control, etc.) through those same places
	  causing undesirable effects.  Let's stop the recursion here.
 Missing hardware shouldn't block for carrier 
 	uart_dtr_rts		-	 port helper to set uart signals
 	@tport: tty port to be updated
 	@onoff: set to turn on DTRRTS
 	Called by the tty port helpers when the modem signals need to be
 	adjusted during an open, close and hangup.
 	sdio_uart_activate	-	start up hardware
 	@tport: tty port to activate
 	@tty: tty bound to this port
 	Activate a tty port. The port locking guarantees us this will be
 	run exactly once per set of opens, and if successful will see the
 	shutdown method run exactly once to match. Start up and shutdown are
 	protected from each other by the internal locking and will not run
 	at the same time even during a hangup event.
 	If we successfully start up the port we take an extra kref as we
 	will keep it around until shutdown when the kref is dropped.
	
	  Set the TTY IO error marker - we will only clear this
	  once we have successfully opened the port.
	
	  Clear the FIFO buffers and disable them.
	  (they will be reenabled in sdio_change_speed())
	
	  Clear the interrupt registers.
	
	  Now, initialize the UART
 Kick the IRQ handler once while we're still holding the host lock 
 	sdio_uart_shutdown	-	stop hardware
 	@tport: tty port to shut down
 	Deactivate a tty port. The port locking guarantees us this will be
 	run only if a successful matching activate already ran. The two are
 	protected from each other by the internal locking and will not run
 	at the same time even during a hangup event.
 Disable interrupts from this port 
 Disable break condition and FIFOs. 
 	sdio_uart_install	-	install method
 	@driver: the driver in use (sdio_uart in our case)
 	@tty: the tty being bound
 	Look up and bind the tty and the driver together. Initialize
 	any needed private data (in our case the termios)
 This is the ref sdio_uart_port get provided 
 	sdio_uart_cleanup	-	called on the last tty kref drop
 	@tty: the tty being destroyed
 	Called asynchronously when the last reference to the tty is dropped.
 	We cannot destroy the tty->driver_data port kref until this point
 Bug trap 
 	Openclosehangup is now entirely boilerplate
 Handle transition to B0 status 
 Handle transition away from B0 status 
 Handle turning off CRTSCTS 
 Handle turning on CRTSCTS 
		
		  We need tuple 0x91.  It contains SUBTPL_SIOREG
		  and SUBTPL_RCVCAPS.
 SUBTPL_SIOREG 
 end: all zeroes 				},
 dynamically allocated 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright 2007-2008 Pierre Ossman
  Limit the test area size to the maximum MMC HC erase group size.  Note that
  the maximum SD allocation unit size is just 4MiB.
  struct mmc_test_pages - pages allocated by 'alloc_pages()'.
  @page: first page in the allocation
  @order: order of the number of pages allocated
  struct mmc_test_mem - allocated memory.
  @arr: array of allocations
  @cnt: number of allocations
  struct mmc_test_area - information for performance tests.
  @max_sz: test area size (in bytes)
  @dev_addr: address on card at which to do performance tests
  @max_tfr: maximum transfer size allowed by driver (in bytes)
  @max_segs: maximum segments allowed by driver in scatterlist @sg
  @max_seg_sz: maximum segment size allowed by driver
  @blocks: number of (512 byte) blocks currently mapped by @sg
  @sg_len: length of currently mapped scatterlist @sg
  @mem: allocated memory
  @sg: scatterlist
  @sg_areq: scatterlist for non-blocking request
  struct mmc_test_transfer_result - transfer results for performance tests.
  @link: double-linked list
  @count: amount of group of sectors to check
  @sectors: amount of sectors to check in one group
  @ts: time values of transfer
  @rate: calculated transfer rate
  @iops: IO operations per second (times 100)
  struct mmc_test_general_result - results for tests.
  @link: double-linked list
  @card: card under test
  @testcase: number of test case
  @result: result of test run
  @tr_lst: transfer measurements if any as mmc_test_transfer_result
  struct mmc_test_dbgfs_file - debugfs related file.
  @link: double-linked list
  @card: card under test
  @file: file created under debugfs
  struct mmc_test_card - test information.
  @card: card under test
  @scratch: transfer buffer
  @buffer: transfer buffer
  @highmem: buffer for highmem tests
  @area: information for performance tests
  @gr: pointer to results of current testcase
  General helper functions                                       
  Configure correct block size in card
  Fill in the mmc_request structure given a set of transfer parameters.
  Wait for the card to finish the busy state
  Transfer a single sector of kernel addressable data
  Allocate a lot of memory, preferably max_sz but at least min_sz.  In case
  there isn't much memory do not exceed 116th total lowmem pages.  Also do
  not exceed a maximum number of segments and try not to make segments much
  bigger than maximum segment size.
  Map memory into a scatterlist.  Optionally allow the same memory to be
  mapped more than once.
  Map memory into a scatterlist so that no pages are contiguous.  Allow the
  same memory to be mapped more than once.
  Calculate transfer rate in bytes per second.
  Save transfer results for future usage
  Print the transfer rate.
 IO ops per sec x 100 
  Print the average transfer rate.
 IO ops per sec x 100 
  Return the card size in sectors.
  Test preparation and cleanup                                   
  Fill the first couple of sectors of the card with known data
  so that bad readswrites can be detected
  Test execution helpers                                         
  Modifies the mmc_request to perform the "short transfer" tests
  Checks that a normal transfer didn't have any errors
  Checks that a "short transfer" behaved as expected
  Tests nonblock transfer with certain parameters
  Tests a basic transfer with certain parameters
  Tests a transfer where the card will fail completely or partly
  Does a complete transfer test where data is also validated
  Note: mmc_test_prepare() must have been done before this call
  Tests                                                          
 CONFIG_HIGHMEM 
  Map sz bytes so that it can be transferred.
  Transfer bytes mapped by mmc_test_area_map().
  Map and transfer bytes for multiple transfers.
	
	  In the case of a maximally scattered transfer, the maximum transfer
	  size is further limited by using PAGE_SIZE segments.
  Write the test area entirely.
  Erase the test area entirely.
  Cleanup struct mmc_test_area.
  Initialize an area for testing large transfers.  The test area is set to the
  middle of the card because cards may have different characteristics at the
  front (for FAT file system optimization).  Optionally, the area is erased
  (if the card supports it) which may improve write performance.  Optionally,
  the area is filled with data for subsequent read tests.
 Make the test area size about 4MiB 
	
	  Try to allocate enough memory for a max. sized transfer.  Less is OK
	  because the same memory can be mapped into the scatterlist more than
	  once.  Also, take into account the limits imposed on scatterlist
	  segments by the host driver.
  Prepare for large transfers.  Do not erase the test area.
  Prepare for large transfers.  Do erase the test area.
  Prepare for large transfers.  Erase and fill the test area.
  Test best-case performance.  Best-case performance is expected from
  a single large transfer.
  An additional option (max_scatter) allows the measurement of the same
  transfer but with no contiguous pages in the scatter list.  This tests
  the efficiency of DMA to handle scattered pages.
  Best-case read performance.
  Best-case write performance.
  Best-case read performance into scattered pages.
  Best-case write performance from scattered pages.
  Single read performance by transfer size.
  Single write performance by transfer size.
  Single trim performance by transfer size.
  Consecutive read performance by transfer size.
  Consecutive write performance by transfer size.
  Consecutive trim performance by transfer size.
		
		  When writing, try to get more consistent results by running
		  the test twice with exactly the same IO but outputting the
		  results only for the 2nd run.
  Random read performance by transfer size.
  Random write performance by transfer size.
	
	  In the case of a maximally scattered transfer, the maximum transfer
	  size is further limited by using PAGE_SIZE segments.
 Round to 64MiB boundary 
  Large sequential read performance.
  Large sequential write performance.
 Set up test area 
 Round to 64MiB boundary 
 Round to 1MiB boundary 
 prepare test area 
 Run test 
  Multiple blocking write 4k to 4 MB chunks
  Multiple non-blocking write 4k to 4 MB chunks
  Multiple blocking read 4k to 4 MB chunks
  Multiple non-blocking read 4k to 4 MB chunks
  Multiple blocking write 1 to 512 sg elements
  Multiple non-blocking write 1 to 512 sg elements
  Multiple blocking read 1 to 512 sg elements
  Multiple non-blocking read 1 to 512 sg elements
  eMMC hardware reset.
		
		  Reset will re-enable the card's command queue, but tests
		  expect it to be disabled.
 Start ongoing data request 
 Send status command while data transfer in progress 
 Wait for data request to complete 
	
	  For cap_cmd_during_tfr request, upper layer must send stop if
	  required.
  Commands during read - no Set Block Count (CMD23).
  Commands during write - no Set Block Count (CMD23).
  Commands during read - use Set Block Count (CMD23).
  Commands during write - use Set Block Count (CMD23).
  Commands during non-blocking read - use Set Block Count (CMD23).
  Commands during non-blocking write - use Set Block Count (CMD23).
 CONFIG_HIGHMEM 
 Assign data what we know already 
 Append container to global one 
			
			  Save the pointer to created container in our private
			  structure.
 Save the result 
	
	  Remove all test cases associated with given card. Thus we have only
	  actual data of the last run.
 Clear stalled data if card is still plugged 
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriversmmccoresd.c
   Copyright (C) 2003-2004 Russell King, All Rights Reserved.
   SD support Copyright (C) 2004 Ian Molton, All Rights Reserved.
   Copyright (C) 2005-2007 Pierre Ossman, All Rights Reserved.
  Given the decoded CSD structure, decode the raw CID to our CID structure.
	
	  SD doesn't currently have a version field so we will
	  have to assume we can parse this.
 SD cards year offset 
  Given a 128-bit response, decode to our card CSD structure.
		
		  This is a block-addressed SDHC or SDXC card. Most
		  interesting fields are unused and have fixed
		  values. To avoid getting tripped by buggy cards,
		  we assume those fixed values ourselves.
 Unused 
 Unused 
 SDXC cards have a minimum C_SIZE of 0x00FFFF 
 Unused 
  Given a 64-bit response, decode to our card SCR structure.
 Check if Physical Layer Spec v3.0 is supported 
 SD Spec says: any SD Card shall set at least bits 0 and 2 
  Fetch and process SD Status register.
	
	  UNSTUFF_BITS only works with four u32s so we have to offset the
	  bitfield positions accordingly.
	
	  starting SD5.1 discard is supported if DISCARD_SUPPORT (b313) is set
  Fetches and decodes switch information
	
	  Find out the card's support bits with a mode 0 operation.
	  The argument does not matter, as the support bits do not
	  change with the arguments.
		
		  If the host or the card can't do the switch,
		  fail more gracefully.
 Driver Strengths supported by the card 
  Test if the card supports high-speed mode and, if so, switch to it.
	
	  If the host doesn't support any of the UHS-I modes, fallback on
	  default speed.
 Get host's max current setting at its current voltage 
	
	  Current limit switch is only defined for SDR50, SDR104, and DDR50
	  bus speed modes. For other bus speed modes, we do not change the
	  current limit.
	
	  Host has different current capabilities when operating at
	  different voltages, so find out its max current first.
	
	  We only check host's capability here, if we set a limit that is
	  higher than the card's maximum current, the card will be using its
	  maximum current, e.g. if the card's maximum current is 300ma, and
	  when we set current limit to 200ma, the card will draw 200ma, and
	  when we set current limit to 400600800ma, the card will draw its
	  maximum 300ma from the host.
	 
	  The above is incorrect: if we try to set a current limit that is
	  not supported by the card, the card can rightfully error out the
	  attempt, and remain at the default current limit.  This results
	  in a 300mA card being limited to 200mA even though the host
	  supports 800mA. Failures seen with SanDisk 8GB UHS cards with
	  an iMX6 host. --rmk
  UHS-I specific initialization procedure
 Set 4-bit bus width 
	
	  Select the bus speed mode depending on host
	  and card capability.
 Set the driver strength for the card 
 Set current limit for the card 
 Set bus speed mode of the card 
	
	  SPI mode doesn't define CMD19 and tuning is only valid for SDR50 and
	  SDR104 mode SD-cards. Note that tuning is mandatory for SDR104.
		
		  As SD Specifications Part1 Physical Layer Specification
		  Version 3.01 says, CMD19 tuning is available for unlocked
		  cards in transfer state of 1.8V signaling mode. The small
		  difference between v3.00 and 3.01 spec means that CMD19
		  tuning is also available for DDR50 mode.
 return default DSR value 
 CIS vendor and device ids, revision and info string are available only for Combo cards 
  Fetch CID from card.
	
	  Since we're changing the OCR value, we seem to
	  need to tell some cards to go back to the idle
	  state.  We wait 1ms to give cards time to
	  respond.
	
	  If SD_SEND_IF_COND indicates an SD 2.0
	  compliant card and we should set bit 30
	  of the ocr to indicate that we can handle
	  block-addressed SDHC cards.
	
	  If the host supports one of UHS-I modes, request the card
	  to switch to 1.8V signaling level. If the card has failed
	  repeatedly to switch however, skip this.
	
	  If the host can supply more than 150mA at current voltage,
	  XPC should be set to 1.
	
	  In case the S18A bit is set in the response, let's start the signal
	  voltage switch procedure. SPI mode doesn't support CMD11.
	  Note that, according to the spec, the S18A bit is not valid unless
	  the CCS bit is set as well. We deliberately deviate from the spec in
	  regards to this, which allows UHS-I to be supported for SDSC cards.
	
	  Fetch CSD from card.
	
	  Some systems don't feature a write-protect pin and don't need one.
	  E.g. because they only have micro-SD card slot. For those systems
	  assume that the SD card is always read-write.
		
		  Fetch SCR from card.
		
		  Fetch and process SD Status register.
 Erase init depends on CSD and SSR 
		
		  Fetch switch information from card.
	
	  For SPI, enable CRC as appropriate.
	  This CRC enable is located AFTER the reading of the
	  card registers because some SDHC cards are not able
	  to provide valid CRCs for non-512-byte blocks.
	
	  Check if read-only switch is active.
	
	  According to the SD spec., the Bus Speed Mode (function group 1) bits
	  2 to 4 are zero if the card is initialized at 3.3V signal level. Thus
	  they can be used to determine if the card has already switched to
	  1.8V signaling.
	
	  Arguments of CMD49:
	  [31:31] MIO (0 = memory).
	  [30:27] FNO (function number).
	  [26:26] MW - mask write mode (0 = disable).
	  [25:18] page number.
	  [17:9] offset address.
	  [8:0] length (0 = 1 byte).
 The first byte in the buffer is the data to be written. 
	
	  Note that, the SD card is allowed to signal busy on DAT0 up to 1s
	  after the CMD49. Although, let's leave this to be managed by the
	  caller.
	
	  Command arguments of CMD48:
	  [31:31] MIO (0 = memory).
	  [30:27] FNO (function number).
	  [26:26] reserved (0).
	  [25:18] page number.
	  [17:9] offset address.
	  [8:0] length (0 = 1 byte, 1ff = 512 bytes).
 Read the extension register for power management function. 
 PM revision consists of 4 bits. 
 Power Off Notification support at bit 4. 
 Power Sustenance support at bit 5. 
 Power Down Mode support at bit 6. 
 PERF revision. 
 FX_EVENT support at bit 0. 
 Card initiated self-maintenance support at bit 0. 
 Host initiated self-maintenance support at bit 1. 
 Cache support at bit 0. 
 Command queue support indicated via queue depth bits (0 to 4). 
	
	  Parse only one register set per extension, as that is sufficient to
	  support the standard functions. This means another 48 bytes in the
	  buffer must be available.
 Standard Function Code 
 Address to the next extension. 
 Number of registers for this extension. 
 We support only one register per extension. 
 Extension register address. 
 9 bits (0 to 8) contains the offset address. 
 8 bits (9 to 16) contains the page number. 
 4 bits (18 to 21) contains the function number. 
 Standard Function Code for power management. 
 Standard Function Code for performance enhancement. 
	
	  Read 512 bytes of general info, which is found at function number 0,
	  at page 0 and with no offset.
 General info structure revision. 
 Length of general info in bytes. 
 Number of extensions to be find. 
 We support revision 0, but limit it to 512 bytes for simplicity. 
	
	  Parse the extension registers. The first extension should start
	  immediately after the general info header (16 bytes).
	
	  Set Flush Cache at bit 0 in the performance enhancement register at
	  261 bytes offset.
	
	  Read the Flush Cache bit. The card shall reset it, to confirm that
	  it's has completed the flushing of the cache.
	
	  Set Cache Enable at bit 0 in the performance enhancement register at
	  260 bytes offset.
  Handle the detection and initialisation of a card.
  In the case of a resume, "oldcard" will contain the card
  we're trying to reinitialise.
		
		  Allocate card structure.
	
	  Call the optional HC's init_card function to handle quirks.
	
	  For native busses:  get card RCA and quit open drain mode.
	
	  handling only for cards supporting DSR and hosts requesting
	  DSR configuration
	
	  Select card, as all following commands rely on that.
	
	  If the card has not been power cycled, it may still be using 1.8V
	  signaling. Detect that situation and try to initialize a UHS-I (1.8V)
	  transfer mode.
		
		  Re-read switch information in case it has changed since
		  oldcard was initialized.
 Initialization sequence for UHS-I cards 
		
		  Attempt to change to high-speed (if supported)
		
		  Set bus speed.
		
		  Switch to wider bus (if supported).
 Readparse the extension registers. 
 Enable internal SD cache if supported. 
  Host is being removed. Free up the current card.
  Card detection - card is alive.
  Card detection callback from host.
	
	  Just check if our card has been removed.
	
	  Read the status register for the power management function. It's at
	  one byte offset and is one byte long. The Power Off Notification
	  Ready is bit 0.
	
	  Set the Power Off Notification bit in the power management settings
	  register at 2 bytes offset.
  Callback for suspend
  This function tries to determine if the same card is still present
  and, if so, restore all state to it.
  Callback for resume
  Callback for runtime_suspend.
  Callback for runtime_resume.
  Starting point for SD card init.
	
	  We need to get OCR a different way for SPI.
	
	  Some SD cards claims an out of spec VDD voltage range. Let's treat
	  these bits as being in-valid and especially also bit7.
	
	  Can we support the voltage(s) of the card(s)?
	
	  Detect and init the card.
 SPDX-License-Identifier: GPL-2.0-only
  MMC crypto engine (inline encryption) support
  Copyright 2020 Google LLC
 Reset might clear all keys, so reprogram all the keys. 
 SPDX-License-Identifier: GPL-2.0-only
  Generic GPIO card-detect helper
  Copyright (C) 2011, Guennadi Liakhovetski <g.liakhovetski@gmx.de>
 Schedule a card detection after a debounce timeout 
	
	  Do not use IRQ if the platform prefers to poll, e.g., because that
	  IRQ number is already used by another unit and cannot be shared.
 Register an alternate interrupt service routine for
  the card-detect GPIO.
  mmc_gpiod_request_cd - request a gpio descriptor for card-detection
  @host: mmc host
  @con_id: function within the GPIO consumer
  @idx: index of the GPIO to obtain in the consumer
  @override_active_level: ignore %GPIO_ACTIVE_LOW flag
  @debounce: debounce time in microseconds
  Note that this must be called prior to mmc_add_host()
  otherwise the caller must also call mmc_gpiod_request_cd_irq().
  Returns zero on success, else an error.
 Update default label if no con_id provided 
 override forces default (active-low) polarity ... 
 ... or active-high 
  mmc_gpiod_request_ro - request a gpio descriptor for write protection
  @host: mmc host
  @con_id: function within the GPIO consumer
  @idx: index of the GPIO to obtain in the consumer
  @debounce: debounce time in microseconds
  Returns zero on success, else an error.
 Update default label if no con_id provided 
 SPDX-License-Identifier: GPL-2.0-only
   Copyright (C) 2014 Linaro Ltd
  Author: Ulf Hansson <ulf.hansson@linaro.org>
   Simple MMC power sequence management
 sentinel },
 SPDX-License-Identifier: GPL-2.0-only
   Copyright (C) 2014 Linaro Ltd
  Author: Ulf Hansson <ulf.hansson@linaro.org>
   MMC power sequence management
 SPDX-License-Identifier: GPL-2.0
  Block driver for media (i.e., flash cards)
  Copyright 2002 Hewlett-Packard Company
  Copyright 2005-2008 Pierre Ossman
  Use consistent with the GNU GPL is permitted,
  provided that this copyright notice is
  preserved in its entirety in all copies and derived works.
  HEWLETT-PACKARD COMPANY MAKES NO WARRANTIES, EXPRESSED OR IMPLIED,
  AS TO THE USEFULNESS OR CORRECTNESS OF THIS CODE OR ITS
  FITNESS FOR ANY PARTICULAR PURPOSE.
  Many thanks to Alessandro Rubini and Jonathan Corbet!
  Author:  Andrew Christian
           28 May 2002
  Set a 10 second timeout for polling write request busy state. Note, mmc core
  is setting a 3 second timeout for SD cards, and SDHCI has long had a 10
  second software timer to timeout the whole request, so 10 seconds should be
  ample.
  The defaults come from config options but can be overriden by module
  or bootarg options.
  We've only got one major, so number of mmcblk devices is
  limited to (1 << 20)  number of minors per device.  It is also
  limited by the MAX_DEVICES below.
  There is one mmc_blk_data per slot.
 Can do SET_BLOCK_COUNT for multiblock 
 MMC Reliable write support 
	
	  Only set in main mmc_blk_data associated
	  with mmc_card with dev_set_drvdata, and keeps
	  track of the current selected device partition.
 debugfs files (only in main mmc_blk_data) 
 Device type for RPMB character devices 
 Bus type for RPMB character devices 
  struct mmc_rpmb_data - special RPMB device type for these areas
  @dev: the device for the RPMB area
  @chrdev: character device for the RPMB area
  @id: unique device ID number
  @part_index: partition index (0 on first)
  @md: parent MMC block device
  @node: list item, so we can put this device on a list
 Dispatch locking to the block layer 
	
	  The RPMB accesses comes in from the character device, so we
	  need to target these explicitly. Else we just target the
	  partition type for the block device the ioctl() was issued
	  on.
 Support multiple RPMB partitions 
 data.flags must already be set before doing this. 
 Allow overriding the timeout_ns for empirical tuning. 
			
			  Pretend this is a data transfer and rely on the
			  host driver to compute timeout.  When all host
			  drivers support cmd.cmd_timeout for R1B, this
			  can be changed to:
			 
			      mrq.data = NULL;
			      cmd.cmd_timeout = idata->ic.cmd_timeout_ms;
		
		  We don't do any blockcount validation because the max size
		  may be increased by a future standard. We just copy the
		  'Reliable Write' bit here.
	
	  Make sure the cache of the PARTITION_CONFIG register and
	  PARTITION_ACCESS bits is updated in case the ioctl ext_csd write
	  changed it successfully.
		
		  Update cache so the next mmc_blk_part_switch call operates
		  on up-to-date data.
	
	  Make sure to update CACHE_CTRL in case it was changed. The cache
	  will get turned back on if the card is re-initialized, e.g.
	  suspendresume or hw reset in recovery.
	
	  According to the SD specs, some commands require a delay after
	  issuing the command.
		
		  Ensure RPMBR1B command has completed by polling CMD13
		  "Send Status".
 This will be NULL on non-RPMB ioctl():s 
	
	  Dispatch the ioctl() into the block request queue.
 This will be NULL on non-RPMB ioctl():s 
	
	  Dispatch the ioctl()s into the block request queue.
 copy to user if data and response 
	
	  The caller must have CAP_SYS_RAWIO, and must be calling this on the
	  whole block device, not on a partition.  This prevents overspray
	  between sibling partitions.
 Clock may be subject to a divisor, fudge it by a factor of 2. 
 How can there be no clock 
 100 kHz is minimum possible value 
 Ensure we switch back to the correct partition 
			
			  We have failed to get back into the correct
			  partition, so we need to abort the whole request.
  The non-block commands come back from the block layer after it queued it and
  processed it with all other requests and then they get issued in this
  function.
 Always switch back to main area after RPMB access 
  Reformat current write as a reliable write, supporting
  both legacy and the enhanced reliable write MMC cards.
  In each transfer we'll handle only as much as a single
  reliable write can handle, thus finish the request in
  partial completions.
 Legacy mode imposes restrictions on transfers. 
 Misaligned address 		\
 Transferred block length incorrect \
 Tried to write to protected block 	\
 Card ECC failed 			\
 Card controller error 		\
 Generalunknown error 
 Command argument out of range 	\
	
	  Per the SD specification(physical layer version 4.10)[1],
	  section 4.3.3, it explicitly states that "When the last
	  block of user area is read using CMD18, the host should
	  ignore OUT_OF_RANGE error that may occur even the sequence
	  is correct". And JESD84-B51 for eMMC also has a similar
	  statement on section 6.8.3.
	 
	  Multiple block readwrite could be done by either predefined
	  method, namely CMD23, or open-ending mode. For open-ending mode,
	  we should ignore the OUT_OF_RANGE error as it's normal behaviour.
	 
	  However the spec[1] doesn't tell us whether we should also
	  ignore that for predefined method. But per the spec[1], section
	  4.15 Set Block Count Command, it says"If illegal block count
	  is set, out of range error will be indicated during readwrite
	  operation (For example, data transfer is stopped at user area
	  boundary)." In another word, we could expect a out of range error
	  in the response for the following CMD1825. And if argument of
	  CMD23 + the argument of CMD1825 exceed the max number of blocks,
	  we could also expect to get a -ETIMEDOUT or any error number from
	  the host drivers due to missing data response(for write)data(for
	  read), as the cards will stop the data transfer by itself per the
	  spec. So we only need to check R1_OUT_OF_RANGE for open-ending mode.
 If there is no error yet, check R1 response 
	
	  Reliable writes are used to implement Forced Unit Access and
	  are supported only on MMCs.
	
	  The command queue supports 2 priorities: "high" (1) and "simple" (0).
	  The eMMC will give "high" priority tasks priority over "simple"
	  priority tasks. Here we always set "simple" priority by not setting
	  MMC_DATA_PRIO.
	
	  The block layer doesn't support all sector count
	  restrictions, so we need to be prepared for too big
	  requests.
		
		  Some SD cards in SPI mode return a CRC error or even lock up
		  completely when trying to read the last block using a
		  multiblock read command.
		
		  After a read error, we redo the request one sector
		  at a time in order to accurately determine which
		  sectors can be read successfully.
		
		  Some controllers have HW issues while operating
		  in multiple IO mode
	
	  Data tag is used only during writing meta data to speed
	  up write and any subsequent read of this meta data
	
	  Adjust the sg list so it is the same size as the
	  request.
	
	  Block layer timeouts race with completions which means the normal
	  completion path cannot be used during recovery.
		 SPI multiblock writes terminate using a special
		  token, not a STOP_TRANSMISSION request.
	
	  Pre-defined multi-block transfers are preferable to
	  open ended-ones (and necessary for reliable writes).
	  However, it is not sufficient to just send CMD23,
	  and avoid the final CMD12, as on an error condition
	  CMD12 (stop) needs to be sent anyway. This, coupled
	  with Auto-CMD23 enhancements provided by some
	  hosts, means that the complexity of dealing
	  with this is best left to the host. If CMD23 is
	  supported by card and host, we'll fill sbc in and let
	  the host deal with handling it correctly. This means
	  that for hosts that don't expose MMC_CAP_CMD23, no
	  change of behavior will be observed.
	 
	  N.B: Some MMC cards experience perf degradation.
	  We'll avoid using CMD23-bounded multiblock writes for
	  these, while retaining features like reliable writes.
 Some hosts wait for busy anyway, so provide a busy timeout 
 Single sector read during recovery 
 Let it try the remaining request again 
  Check for errors the host controller driver might not have seen such as
  response mode errors or invalid card state.
  Requests are completed by mmc_blk_mq_complete_rq() which sets simple
  policy:
  1. A request that has transferred at least some data is considered
  successful and will be requeued if there is remaining data to
  transfer.
  2. Otherwise the number of retries is incremented and the request
  will be requeued if there are remaining retries.
  3. Otherwise the request will be errored out.
  That means mmc_blk_mq_complete_rq() is controlled by bytes_xfered and
  mqrq->retries. So there are only 4 possible actions here:
 	1. do not accept the bytes_xfered value i.e. set it to zero
 	2. change mqrq->retries to determine the number of retries
 	3. try to reset the card
 	4. read one sector at a time
	
	  Some errors the host driver might not have seen. Set the number of
	  bytes transferred to zero in that case.
	
	  Try again to get the status. This also provides an opportunity for
	  re-tuning.
	
	  Nothing more to do after the number of bytes transferred has been
	  updated and there is no card.
 Try to get back to "tran" state 
	
	  Special case for SD cards where the card might record the number of
	  blocks written.
 Reset if the card is in a bad state 
	
	  If anything was done, just return and if there is anything remaining
	  on the request it will get requeued.
 Reset before last retry 
 Command errors fail fast, so use all MMC_MAX_RETRIES 
 Reduce the remaining retries for data errors 
 FIXME: Missing single sector read for large sector size 
 Read one sector at a time 
 Accumulate response error bits. 
	
	  Do not assume data transferred correctly if there are any error bits
	  set.
 Copy the exception bit so it will be seen later on 
	
	  Block layer timeouts race with completions which means the normal
	  completion path cannot be used during recovery.
	
	  Block layer timeouts race with completions which means the normal
	  completion path cannot be used during recovery.
		
		  We cannot complete the request in this context, so record
		  that there is a request to complete, and that a following
		  request does not need to wait (although it does need to
		  complete complete_req first).
		
		  If 'waiting' then the waiting task will complete this
		  request, otherwise queue a work to do it. Note that
		  complete_work may still race with the dispatch of a following
		  request.
 Take the recovery path for errors or urgent background operations 
	
	  Wait while there is another request in progress, but not if recovery
	  is needed. Also indicate whether there is a request waiting to start.
 Always complete the previous request if there is one 
 Release re-tuning here where there is no synchronization required 
		
		  We get -ENOSPC because there are no more any available
		  devidx. The reason may be that, either userspace haven't yet
		  unmounted the partitions, which postpones mmc_blk_release()
		  from being called, or the device has more partitions than
		  what we support.
	
	  Set the read-only status based on the supported commands
	  and the write protect switch.
	
	  As discussed on lkml, GENHD_FL_REMOVABLE should:
	 
	  - be set for removable media with permanent block devices
	  - be unset for removable block devices with permanent media
	 
	  Since MMC block devices clearly fall under the second
	  case, we do not set GENHD_FL_REMOVABLE.  Userspace
	  should use the block device creationdestruction hotplug
	  messages to tell when the card is present.
 used in ->open, must be set before add_disk: 
		
		  The EXT_CSD sector count is in number or 512 byte
		  sectors.
		
		  The CSD capacity field is in units of read_blkbits.
		  set_capacity takes units of 512 bytes.
  mmc_rpmb_ioctl() - ioctl handler for the RPMB chardev
  @filp: the character device file
  @cmd: the ioctl() command
  @arg: the argument from userspace
  This will essentially just redirect the ioctl()s coming in over to
  the main block device spawning the RPMB character device.
 This creates the minor number for the RPMB char device 
 MMC Physical partitions consist of two boot partitions and
  up to four general purpose partitions.
  For each partition enabled in EXT_CSD a block device will be allocatedi
  to provide access to the partition.
			
			  RPMB partitions does not provide block access, they
			  are only accessed using ioctl():s. Thus create
			  special RPMB block devices that do not have a
			  backing block queue for these.
	
	  Flush remaining requests and free queues. It is freeing the queue
	  that stops new requests from being accepted.
 Remove RPMB partitions 
 Remove block partitions 
 Ask the block layer about the card status 
 That is two digits  512 + 1 for newline 
 Ask the block layer for the EXT CSD 
 CONFIG_DEBUG_FS 
	
	  Check that the card supports the command class(es) we need.
 Add two debugfs entries 
	
	  Don't enable runtime PM for SD-combo cards here. Leave that
	  decision to be taken during the SDIO init sequence instead.
		
		  Resume involves the card going into idle state,
		  so current partition is always the main one.
 SPDX-License-Identifier: GPL-2.0-or-later
   linuxdriversmmcsdio_ops.c
   Copyright 2006-2007 Pierre Ossman
 if we're just probing, do a single pass 
 otherwise wait until reset completes 
			
			  Both R1_SPI_IDLE and MMC_CARD_BUSY indicate
			  an initialized card under SPI, but some cards
			  (Marvell's) only behave when looking at this
			  one.
 sanity check 
 host driver already reported errors 
 sanity check 
 byte mode 
 block mode 
 Code in host driversfwk assumes that "blocks" always is >=1 
 host driver already reported errors 
 SDIO Simplified Specification V2.0, 4.4 Reset for SDIO 
 SPDX-License-Identifier: GPL-2.0-only
  Debugfs support for hosts and cards
  Copyright (C) 2008 Atmel Corporation
 CONFIG_FAIL_MMC_REQUEST 
 The debugfs functions are optimized away when CONFIG_DEBUG_FS isn't set. 
 We need this check due to input value is u64 
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxdriversmmccoresdio_cis.c
  Author:	Nicolas Pitre
  Created:	June 11, 2007
  Copyright:	MontaVista Software Inc.
  Copyright 2007 Pierre Ossman
 10s 
	 Find all null-terminated (including zero length) strings in
 TPLMID_MANF 
 TPLMID_CARD 
 look for a matching code in the table 
 known tuple, not parsed 
 invalid tuple 
 unknown tuple 
 Only valid for the common CIS (function 0) 
 TPLFE_FN0_BLK_SIZE 
 TPLFE_MAX_TRAN_SPEED 
 Only valid for the individual function's CIS (1-7) 
	
	  This tuple has a different length depending on the SDIO spec
	  version.
 TPLFE_MAX_BLK_SIZE 
 TPLFE_ENABLE_TIMEOUT_VAL, present in ver 1.1 and above 
  Known TPLFE_TYPEs table for CISTPL_FUNCE tuples.
  Note that, unlike PCMCIA, CISTPL_FUNCE tuples are not parsed depending
  on the TPLFID_FUNCTION value of the previous CISTPL_FUNCID as on SDIO
  TPLFID_FUNCTION is always hardcoded to 0x0C.
 CISTPL_FUNCE_LAN_NODE_ID 	},
 Known TPL_CODEs table for CIS tuples 
 cistpl_funcid 	},
 cistpl_sdio_std 	},
	
	  Note that this works for the common CIS (function number 0) as
	  well as a function's CIS  since SDIO_CCCR_CIS and SDIO_FBR_CIS
	  have the same offset.
 0xff means we're done 
 null entries have no link field or data 
 a size of 0xff also means we're done 
 Try to parse the CIS tuple 
			
			  The tuple is unknown or known but not parsed.
			  Queue the tuple for the function driver.
				
				  Tuples in this range are reserved for
				  vendors, so don't warn about them
 keep on analyzing tuples 
			
			  We don't need the tuple anymore if it was
			  successfully parsed by the SDIO core or if it is
			  not going to be queued for a driver.
	
	  Link in all unknown tuples found in the common CIS so that
	  drivers don't have to go digging in two places.
	
	  Since we've linked to tuples in the card structure,
	  we must make sure we have a reference to it.
	
	  Vendordevice id is optional for function CIS, so
	  copy it from the card structure as needed.
	
	  We have now removed the link to the tuples in the
	  card structure, so remove the reference.
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriversmmccorecore.c
   Copyright (C) 2003-2004 Russell King, All Rights Reserved.
   SD support Copyright (C) 2004 Ian Molton, All Rights Reserved.
   Copyright (C) 2005-2008 Pierre Ossman, All Rights Reserved.
   MMCv4 support Copyright (C) 2006 Philip Langdale, All Rights Reserved.
 The max erase timeout, used when host->max_busy_timeout isn't specified 
 60 s 
  Enabling software CRCs on the data blocks can be a significant (30%)
  performance cost, and for other reasons may not always be desired.
  So we allow it it to be disabled.
	
	  We use the system_freezable_wq, because of two reasons.
	  First, it allows several works (not the same work item) to be
	  executed simultaneously. Second, the queue becomes frozen when
	  userspace becomes frozen during system PM.
  Internal function. Inject random data errors.
  If mmc_data is NULL no errors are injected.
 CONFIG_FAIL_MMC_REQUEST 
 CONFIG_FAIL_MMC_REQUEST 
 	mmc_request_done - finish processing an MMC request
 	@host: MMC host which completed request
 	@mrq: MMC request which request
 	MMC drivers should call this function when they have completed
 	their processing of a request.
 Flag re-tuning needed on CRC errors 
	
	  We list various conditions for the command to be considered
	  properly done:
	 
	  - There was no error, OK fine then
	  - We are not doing some kind of retry
	  - The card was removed (...so just complete everything no matter
	    if there are errors or retries)
	
	  Request starter must handle retries - see
	  mmc_wait_for_req_done().
 Assumes host controller has been runtime resumed by mmc_claim_host 
	
	  For sdio rw commands we must wait for card busy otherwise some
	  sdio devices won't work properly.
	  And bypass IO abort, reset and bus suspend operations.
 Wait aprox 500ms at maximum 
		
		  Retry path could come through here without having waiting on
		  cmd_completion, so ensure it is reinitialised.
	
	  If there is an ongoing transfer, wait for the command line to become
	  available.
  mmc_cqe_start_req - Start a CQE request.
  @host: MMC host to start the request
  @mrq: request to start
  Start the request, re-tuning if needed and it is possible. Returns an error
  code if the request fails to start or -EBUSY if CQE is busy.
	
	  CQE cannot process re-tuning commands. Caller must hold retuning
	  while CQE is in use.  Re-tuning can happen here only when CQE has no
	  active requests i.e. this is the first.  Note, re-tuning will call
	  ->cqe_off().
 	mmc_cqe_request_done - CQE has finished processing an MMC request
 	@host: MMC host which completed request
 	@mrq: MMC request which completed
 	CQE drivers should call this function when they have completed
 	their processing of a request.
 Flag re-tuning needed on CRC errors 
 	mmc_cqe_post_req - CQE post process of a completed MMC request
 	@host: MMC host
 	@mrq: MMC request to be processed
 Arbitrary 1 second timeout 
  mmc_cqe_recovery - Recover from CQE errors.
  @host: MMC host to recover
  Recovery consists of stopping CQE, stopping eMMC, discarding the queue in
  in eMMC, and discarding the queue in CQE. CQE must call
  mmc_cqe_request_done() on all requests. An error is returned if the eMMC
  fails to discard its queue.
	
	  Recovery is expected seldom, if at all, but it reduces performance,
	  so make sure it is not completely silent.
 Ignore CRC 
 Discard entire queue 
 Ignore CRC 
 	mmc_is_req_done - Determine if a 'cap_cmd_during_tfr' request is done
 	@host: MMC host
 	@mrq: MMC request
 	mmc_is_req_done() is used with requests that have
 	mrq->cap_cmd_during_tfr = true. mmc_is_req_done() must be called after
 	starting a request and before waiting for it to complete. That is,
 	either in between calls to mmc_start_req(), or after mmc_wait_for_req()
 	and before mmc_wait_for_req_done(). If it is called at other times the
 	result is not meaningful.
 	mmc_wait_for_req - start a request and wait for completion
 	@host: MMC host to start command
 	@mrq: MMC request to start
 	Start a new MMC custom command request for a host, and wait
 	for the command to complete. In the case of 'cap_cmd_during_tfr'
 	requests, the transfer is ongoing and the caller can issue further
 	commands that do not use the data lines, and then wait by calling
 	mmc_wait_for_req_done().
 	Does not attempt to parse the response.
 	mmc_wait_for_cmd - start a command and wait for completion
 	@host: MMC host to start command
 	@cmd: MMC command to start
 	@retries: maximum number of retries
 	Start a new MMC command for a host, and wait for the command
 	to complete.  Return any error that occurred while the command
 	was executing.  Do not attempt to parse the response.
 	mmc_set_data_timeout - set the timeout for a data command
 	@data: data phase for command
 	@card: the MMC card associated with the data transfer
 	Computes the data timeout parameters according to the
 	correct algorithm given the card type.
	
	  SDIO cards only define an upper 1 s limit on access.
	
	  SD cards use a 100 multiplier rather than 10
	
	  Scale up the multiplier (and therefore the timeout) by
	  the r2w factor for writes.
	
	  SD cards also have an upper limit on the timeout.
			
			  The MMC spec "It is strongly recommended
			  for hosts to implement more than 500ms
			  timeout value even if the card indicates
			  the 250ms maximum busy length."  Even the
			  previous value of 300ms is known to be
			  insufficient for some cards.
		
		  SDHC cards always use these fixed values.
 assign limit value if invalid 
	
	  Some cards require longer data read timeout than indicated in CSD.
	  Address this by setting the read timeout to a "reasonably high"
	  value. For the cards tested, 600ms has proven enough. If necessary,
	  this value can be increased if other problematic cards require this.
	
	  Some cards need very high timeouts if driven in SPI mode.
	  The worst observed timeout was 900ms after writing a
	  continuous stream of data until the internal logic
	  overflowed.
 1s 
 100ms 
  Allow claiming an already claimed host if the context is the same or there is
  no context but the task is the same.
 	__mmc_claim_host - exclusively claim a host
 	@host: mmc host to claim
 	@ctx: context that claims the host or NULL in which case the default
 	context will be used
 	@abort: whether or not the operation should be aborted
 	Claim a host for a set of operations.  If @abort is non null and
 	dereference a non-zero value then this will return prematurely with
 	that non-zero value without acquiring the lock.  Returns zero
 	with the lock held otherwise.
 	mmc_release_host - release a host
 	@host: mmc host to release
 	Release a MMC host, allowing others to claim the host
 	for their operations.
 Release for nested claim 
  This is a helper function, which fetches a runtime pm reference for the
  card device and also claims the host.
  This is a helper function, which releases the host and drops the runtime
  pm reference for the card device.
  Internal function that does the actual ios call to the host driver,
  optionally printing some debug output.
  Control chip select pin on a host.
  Sets the host clock to the highest possible frequency that
  is below "hz".
 Only print error when we don't check for card removal 
  Change the bus mode (open drainpush-pull) of a host.
  Change data bus width of a host.
  Set initial state after a power cycle or a hw_reset.
	
	  Make sure we are in non-enhanced strobe mode before we
	  actually enable it in ext_csd.
  mmc_vdd_to_ocrbitnum - Convert a voltage to the OCR bit number
  @vdd:	voltage (mV)
  @low_bits:	prefer low bits in boundary cases
  This function returns the OCR bit number according to the provided @vdd
  value. If conversion is not possible a negative errno value returned.
  Depending on the @low_bits flag the function prefers low or high OCR bits
  on boundary voltages. For example,
  with @low_bits = true, 3300 mV translates to ilog2(MMC_VDD_32_33);
  with @low_bits = false, 3300 mV translates to ilog2(MMC_VDD_33_34);
  Any value in the [1951:1999] range translates to the ilog2(MMC_VDD_20_21).
 Base 2000 mV, step 100 mV, bit's base 8. 
  mmc_vddrange_to_ocrmask - Convert a voltage range to the OCR mask
  @vdd_min:	minimum voltage value (mV)
  @vdd_max:	maximum voltage value (mV)
  This function returns the OCR mask bits according to the provided @vdd_min
  and @vdd_max values. If conversion is not possible the function returns 0.
  Notes wrt boundary cases:
  This function sets the OCR bits for all boundary voltages, for example
  [3300:3400] range is translated to MMC_VDD_32_33 | MMC_VDD_33_34 |
  MMC_VDD_34_35 mask.
 Prefer high bits for the boundary vdd_max values. 
 Prefer low bits for the boundary vdd_min values. 
 Fill the mask, from max bit to min bit. 
  Mask off any voltages we don't support and select
  the lowest voltage
	
	  Sanity check the voltages that the card claims to
	  support.
 Try to set signal voltage to 3.3V but fall back to 1.8v or 1.2v 
	
	  During a signal voltage level switch, the clock must be gated
	  for 5 ms according to the SD spec
 Keep clock gated for at least 10 ms, though spec only says 5 ms 
	
	  If we cannot switch voltages, return failure so the caller
	  can continue without UHS mode
	
	  The card should drive cmd and dat[0:3] low immediately
	  after the response of cmd11, but wait 1 ms to be sure
		
		  Voltages may not have been switched, but we've already
		  sent CMD11, so a power cycle is required anyway
 Wait for at least 1 ms according to spec 
	
	  Failure to switch is indicated by the card holding
	  dat[0:3] low
  Select timing parameters for host.
  Select appropriate driver type for host.
 Use SD definition of driver strength for hosts 
	
	  The drive strength that the hardware can support
	  depends on the board design.  Pass the appropriate
	  information and let the hardware specific code
	  return what is possible given the options
  Apply power to the MMC stack.  This is a two-stage process.
  First, we enable power to the card without the clock running.
  We then wait a bit for the power to stabilise.  Finally,
  enable the bus drivers and clock to the card.
  We must _NOT_ enable the clock prior to power stablising.
  If a host does all the power sequencing itself, ignore the
  initial MMC_POWER_UP stage.
 Set initial state and call mmc_set_ios 
	
	  This delay should be sufficient to allow the power supply
	  to reach the minimum voltage.
	
	  This delay must be at least 74 clock sizes, or 1 ms, or the
	  time required to reach a stable voltage.
 Set initial state and call mmc_set_ios 
	
	  Some configurations, such as the 802.11 SDIO card in the OLPC
	  XO-1.5, require a short delay after poweroff before the card
	  can be successfully turned on again.
 Wait at least 1 ms according to SD spec 
  Assign a mmc bus handler to a host. Only one bus handler may control a
  host at any given time.
  Remove the current bus handler from a host.
	
	  Prevent system sleep for 5s to allow user space to consume the
	  corresponding uevent. This is especially useful, when CD irq is used
	  as a system wakeup, but doesn't hurt in other cases.
 	mmc_detect_change - process change of state on a MMC socket
 	@host: host which changed state.
 	@delay: optional delay to wait before detection (jiffies)
 	MMC drivers should call this when they detect a card has been
 	inserted or removed. The MMC layer will confirm that any
 	present card is still functional, and initialize any newly
 	inserted.
	
	  It is possible to erase an arbitrarily large area of an SD or MMC
	  card.  That is not desirable because it can take a long time
	  (minutes) potentially delaying more important IO, and also the
	  timeout calculations become increasingly hugely over-estimated.
	  Consequently, 'pref_erase' is defined as a guide to limit erases
	  to that size and alignment.
	 
	  For SD cards that define Allocation Unit size, limit erases to one
	  Allocation Unit at a time.
	  For MMC, have a stab at ai good value and for modern cards it will
	  end up being 4MiB. Note that if the value is too small, it can end
	  up taking longer to erase. Also note, erase_size is already set to
	  High Capacity Erase Size if available when this function is called.
 High Capacity Erase Group Size uses HC timeouts 
 CSD Erase Group Size uses write timeout 
 Avoid overflow: e.g. taac_ns=80000000 mult=1280 
		
		  ios.clock is only a target.  The real clock rate might be
		  less but not that much less, so fudge it by multiplying by 2.
		
		  Theoretically, the calculation could underflow so round up
		  to 1ms in that case.
 Multiplier for secure operations 
	
	  Ensure at least a 1 second timeout for SPI as per
	  'mmc_set_data_timeout()'
	 for DISCARD none of the below calculation applies.
	  the busy timeout is 250msec per discard command.
 Erase timeout specified in SD Status Register (SSR) 
		
		  Erase timeout not specified in SD Status Register (SSR) so
		  use 250ms per write block.
 Must not be less than 1 second 
	
	  qty is used to calculate the erase timeout which depends on how many
	  erase groups (or allocation units in SD terminology) are affected.
	  We count erasing part of an erase group as one erase group.
	  For SD, the allocation units are always a power of 2.  For MMC, the
	  erase group size is almost certainly also power of 2, but it does not
	  seem to insist on that in the JEDEC standard, so we fall back to
	  division in that case.  SD may not specify an allocation unit size,
	  in which case the timeout is based on the number of write blocks.
	 
	  Note that the timeout for secure trim 2 will only be correct if the
	  number of erase groups specified is the same as the total of all
	  preceding secure trim 1 commands.  Since the power may have been
	  lost since the secure trim 1 commands occurred, it is generally
	  impossible to calculate the secure trim 2 timeout correctly.
	
	  In case of when R1B + MMC_CAP_WAIT_WHILE_BUSY is used, the polling
	  shall be avoided.
 Let's poll to find out when the erase operation completes. 
	
	  When the 'card->erase_size' is power of 2, we can use round_updown()
	  to align the erase size efficiently.
  mmc_erase - erase sectors.
  @card: card to erase
  @from: first sector to erase
  @nr: number of sectors to erase
  @arg: erase command argument
  Caller must claim host before calling this function.
 'from' and 'to' are inclusive 
	
	  Special case where only one erase-group fits in the timeout budget:
	  If the region crosses an erase-group boundary on this particular
	  case, we will be trimming more than one erase-group which, does not
	  fit in the timeout budget of the controller, so we need to split it
	  and call mmc_do_erase() twice if necessary. This special case is
	  identified by the card->eg_boundary flag.
	
	  As there's no way to detect the discard support bit at v4.5
	  use the sw feature support filed.
	
	  We should not only use 'host->max_busy_timeout' as the limitation
	  when deciding the max discard sectors. We should set a balance value
	  to improve the erase speed, and it can not get too long timeout at
	  the same time.
	 
	  Here we set 'card->pref_erase' as the minimal discard sectors no
	  matter what size of 'host->max_busy_timeout', but if the
	  'host->max_busy_timeout' is large enough for more discard sectors,
	  then we can continue to increase the max discard sectors until we
	  get a balance value. In cases when the 'host->max_busy_timeout'
	  isn't specified, use the default max erase timeout.
	
	  When specifying a sector range to trim, chances are we might cross
	  an erase-group boundary even if the amount of sectors is less than
	  one erase-group.
	  If we can only fit one erase-group in the controller timeout budget,
	  we have to care that erase-group boundaries are not crossed by a
	  single trim operation. We flag that special case with "eg_boundary".
	  In all other cases we can just decrement qty and pretend that we
	  always touch (qty + 1) erase-groups as a simple optimization.
 Convert qty to sectors 
	
	  Without erase_group_def set, MMC erase timeout depends on clock
	  frequence which can change.  In that case, the best choice is
	  just the preferred erase size.
  mmc_hw_reset - reset the card in hardware
  @host: MMC host to which the card is attached
  Hard reset the card. This function is only for upper layers, like the
  block layer or card drivers. You cannot use it in host drivers (struct
  mmc_card might be gone then).
  Return: 0 on success, -errno on failure
	
	  Some eMMCs (with VCCQ always on) may not be reset after power up, so
	  do a hardware reset if possible.
	
	  sdio_reset sends CMD52 to reset card.  Since we do not know
	  if the card is being re-initialized, just send it.  CMD52
	  should be ignored by SDeMMC cards.
	  Skip it if we already know that we do not support SDIO commands
 Order's important: probe SDIO, then SD, then MMC 
	
	  Card detect status and alive check may be out of sync if card is
	  removed slowly, when card detect switch changes while cardslot
	  pads are still contacted in hardware (refer to "SD Card Mechanical
	  Addendum, Appendix C: Card Detection Switch"). So reschedule a
	  detect work 200ms later for this case.
	
	  The card will be considered unchanged unless we have been asked to
	  detect a change or host requires polling to provide card detection.
			
			  Schedule a detect work as soon as possible to let a
			  rescan handle the card removal.
 filter out unrelated cards 
	
	  eMMC storage has two special boot partitions in addition to the
	  main one.  NVIDIA's bootloader linearizes eMMC boot0->boot1->main
	  accesses, this means that the partition table addresses are shifted
	  by the size of boot partitions.  In accordance with the eMMC
	  specification, the boot partition size is calculated as follows:
	 
	 	boot partition size = 128K byte x BOOT_SIZE_MULT
	 
	  Calculate number of sectors occupied by the both boot partitions.
 Defined by NVIDIA and used by Android devices. 
 If there is a non-removable card registered, only scan once 
 Verify a registered card to be functional, else remove it. 
 if there still is a card present, stop here 
 If an SD express card is present, then leave it as is. 
 clear pm flags now and let card drivers set them as needed 
 Calling bus_ops->remove() with a claimed host can deadlock 
 SPDX-License-Identifier: GPL-2.0-or-later
   linuxdriversmmcsdio.c
   Copyright 2006-2007 Pierre Ossman
	
	  It is okay to remove the function here even though we hold
	  the host lock as we haven't registered the device yet.
 if no uhs mode ensure we check for high speed 
 set as 4-bit bus width 
  If desired, disconnect the pull-up resistor on CDDAT[3] (pin 1)
  of the card. This may be required on certain setups of boards,
  controllers and embedded sdio device which do not need the card's
  pull-up. As a result, card detection is disabled and power is saved.
  Devices that remain active during a system suspend are
  put back into 1-bit mode.
  Test if the card supports high-speed mode and, if so, switch to it.
  Enable SDIOcombo card's high-speed mode. Return 01 if [not]supported.
		
		  The SDIO specification doesn't mention how
		  the CIS transfer speed register relates to
		  high-speed, but it seems that 50 MHz is
		  mandatory.
 if error just use default for drive strength B 
 if error default to drive strength B 
	
	  If the host doesn't support any of the UHS-I modes, fallback on
	  default speed.
  UHS-I specific initialization procedure
 Switch to wider bus 
 Set the driver strength for the card 
 Set bus speed mode of the card 
	
	  SPI mode doesn't define CMD19 and tuning is only valid for SDR50 and
	  SDR104 mode SD-cards. Note that tuning is mandatory for SDR104.
	
	  Reset the card by performing the same steps that are taken by
	  mmc_rescan_try_freq() and mmc_attach_sdio() during a "normal" probe.
	 
	  sdio_reset() is technically not needed. Having just powered up the
	  hardware, it should already be in reset state. However, some
	  platforms (such as SD8686 on OLPC) do not instantly cut power,
	  meaning that a reset is required when restoring power soon after
	  powering off. It is harmless in other cases.
	 
	  The CMD5 reset (mmc_send_io_op_cond()), according to the SDIO spec,
	  is not necessary for non-removable cards. However, it is required
	  for OLPC SD8686 (which expects a [CMD5,5,3,7] init sequence), and
	  harmless in other situations.
	 
  Handle the detection and initialisation of a card.
  In the case of a resume, "oldcard" will contain the card
  we're trying to reinitialise.
 to query card if 1.8V signalling is supported 
	
	  Inform the card of the voltage
	
	  For SPI, enable CRC as appropriate.
	
	  Allocate card structure.
	
	  Call the optional HC's init_card function to handle quirks.
	
	  If the host and card support UHS-I mode request the card
	  to switch to 1.8V signaling level.  No 1.8v signalling if
	  UHS mode is not enabled to maintain compatibility and some
	  systems that claim 1.8v signalling in fact do not support
	  it. Per SDIO spec v3, section 3.1.2, if the voltage is already
	  1.8v, the card sets S18A to 0 in the R4 response. So it will
	  fails to check rocr & R4_18V_PRESENT,  but we still need to
	  try to init uhs card. sdio_read_cccr will take over this task
	  to make sure which speed mode should work.
	
	  For native busses:  set card RCA and quit open drain mode.
		
		  Update oldcard with the new RCA received from the SDIO
		  device -- we're doing this so that it's updated in the
		  "card" struct when oldcard overwrites that later.
	
	  Read CSD, before selecting the card
	
	  Select card, as all following commands rely on that.
		
		  This is non-standard SDIO device, meaning it doesn't
		  have any CIA (Common IO area) registers present.
		  It's host's responsibility to fill cccr and cis
		  structures in init_card().
	
	  Read the common registers. Note that we should try to
	  validate whether UHS would work or not.
 Retry init sequence, but without R4_18V_PRESENT. 
	
	  Read the common CIS tuples.
 handle as SDIO-only card if memory init failed 
 should not fail, as it worked previously 
	
	  If needed, disconnect card detection pull-up resistor.
 Initialization sequence for UHS-I cards 
 Only if card supports 1.8v and UHS signaling 
		
		  Switch to high-speed (if supported).
		
		  Change to the card's maximum speed.
		
		  Switch to wider bus (if supported).
  Host is being removed. Free up the current card.
  Card detection - card is alive.
  Card detection callback from host.
 Make sure card is powered before detecting it 
	
	  Just check if our card has been removed.
	
	  Tell PM core it's OK to power off the card now.
	 
	  The _sync variant is used in order to ensure that the card
	  is left powered off in case an error occurred, and the card
	  is going to be removed.
	 
	  Since there is no specific reason to believe a new user
	  is about to show up at this point, the _sync variant is
	  desirable anyway.
  SDIO pre_suspend.  We need to suspend all functions separately.
  Therefore all registered functions must have drivers with suspend
  and resume methods.  Failing that we simply remove the whole card.
 force removal of entire card in that case 
 Don't remove a non-removable card - we can't re-detect it. 
 Remove the SDIO card and let it be re-detected later on. 
  SDIO suspend.  Suspend all functions separately.
 Prevent processing of SDIO IRQs in suspended state. 
 Basic card reinitialization. 
	
	  Restore power and reinitialize the card when needed. Note that a
	  removable card is checked from a detect work later on in the resume
	  process.
		
		  Tell runtime PM core we just powered up the card,
		  since it still believes the card is powered off.
		  Note that currently runtime PM is only enabled
		  for SDIO cards that are MMC_CAP_POWER_OFF_CARD
 We may have switched to 1-bit mode during suspend 
 Allow SDIO IRQs to be processed again. 
 No references to the card, cut the power to it. 
 Restore power and re-initialize. 
  SDIO HW reset
  Returns 0 if the HW reset was executed synchronously, returns 1 if the HW
  reset was asynchronously scheduled, else a negative error code.
	
	  In case the card is shared among multiple func drivers, reset the
	  card through a rescan work. In this way it will be removed and
	  re-detected, thus all func drivers becomes informed about it.
	
	  A single func driver has been probed, then let's skip the heavy
	  hotplug dance above and execute the reset immediately.
  Starting point for SDIO card init.
	
	  Can we support the voltage(s) of the card(s)?
	
	  Detect and init the card.
	
	  Enable runtime PM only if supported by host+card+board
		
		  Do not allow runtime suspend until after SDIO function
		  devices are added.
		
		  Let runtime PM core know our card is active
		
		  Enable runtime PM for this card
	
	  The number of functions on the card is encoded inside
	  the ocr.
	
	  Initialize (but don't add) all present functions.
		
		  Enable Runtime PM for this func (if supported)
	
	  First add the card to the driver model...
	
	  ...then the SDIO functions.
	
	  The devices are being deleted so it is not necessary to disable
	  runtime PM. Similarly we also don't pm_runtime_put() the SDIO card
	  because it needs to be active to remove any function devices that
	  were probed, and after that it gets deleted.
 SPDX-License-Identifier: GPL-2.0-or-later
   linuxdriversmmccoremmc_ops.h
   Copyright 2006-2007 Pierre Ossman
 120s 
 240s 
	 NOTE: callers are required to understand the difference
	  between "native" and SPI format status words!
  Write the value specified in the device tree or board code into the optional
  16 bit Driver Stage Register. This can be used to tune raisefall times and
  drive strength of the DAT and CMD outputs. The actual meaning of a given
  value is hardware dependant.
  The presence of the DSR register can be determined from the CSD register,
  bit 76.
	
	  Non-SPI hosts need to prevent chipselect going active during
	  GO_IDLE; that would put chips into SPI mode.  Remind them of
	  that in case of hardware that won't pull up DAT3nCS otherwise.
	 
	  SPI hosts ignore ios.chip_select; it's managed according to
	  rules that must accommodate non-MMC slaves which this layer
	  won't even know about.
 wait until reset completes 
		
		  According to eMMC specification v5.1 section 6.4.3, we
		  should issue CMD1 repeatedly in the idle state until
		  the eMMC is ready. Otherwise some eMMC devices seem to enter
		  the inactive mode after mmc_init_card() issued CMD0 when
		  the eMMC device is busy.
  NOTE: void buf, caller for the buf is required to use DMA-capable
  buffer or on-stack buffer (with some overhead in callee).
	 NOTE HACK:  the MMC_RSP_SPI_R1 is always correct here, but we
	  rely on callers to never use this with "native" calls for reading
	  CSD or CID.  Native versions of those commands use the R2 type,
	  not R1 plus a data block.
		
		  The spec states that CSR and CID accesses have a timeout
		  of 64 clock cycles.
	
	  As the ext_csd is so large and mostly unused, we don't store the
	  raw block in mmc_card.
 Caller must hold re-tuning 
		
		  Due to the possibility of being preempted while polling,
		  check the expiration time first.
 Timeout if the device still remains busy. 
 Throttle the polling rate to avoid hogging the CPU. 
	
	  If the max_busy_timeout of the host is specified, make sure it's
	  enough to fit the used timeout_ms. In case it's not, let's instruct
	  the host to avoid HW busy detection, by converting to a R1 response
	  instead of a R1B. Note, some hosts requires R1B, which also means
	  they are on their own when it comes to deal with the busy timeout.
 	__mmc_switch - modify EXT_CSD register
 	@card: the MMC card associated with the data transfer
 	@set: cmd set values
 	@index: EXT_CSD register index
 	@value: value to program into EXT_CSD register
 	@timeout_ms: timeout (ms) for operation performed by register write,
                    timeout of zero implies maximum possible timeout
 	@timing: new timing to change to
 	@send_status: send status cmd to poll for busy
 	@retry_crc_err: retry when CRC errors when polling with CMD13 for busy
 	@retries: number of retries
 	Modifies the EXT_CSD register for selected card.
If SPI or used HW busy detection above, then we don't need to poll. 
	
	  If the host doesn't support HW polling via the ->card_busy() ops and
	  when it's not allowed to poll by using CMD13, then we need to rely on
	  waiting the stated timeout to be sufficient.
 Let's try to poll to find out when the command is completed. 
 Switch to new timing before check switch status. 
	
	  According to the tuning specs, Tuning process
	  is normally shorter 40 executions of CMD19,
	  and timeout value should be shorter than 150 ms
	
	  eMMC specification specifies that CMD12 can be used to stop a tuning
	  command, but SD specification does not, so do nothing unless it is
	  eMMC.
	
	  For drivers that override R1 to R1b, set an arbitrary timeout based
	  on the tuning timeout i.e. 150ms.
	 dma onto stack is unsafenonportable, but callers to this
	  routine normally provide temporary on-stack buffers ...
	 NOTE HACK:  the MMC_RSP_SPI_R1 is always correct here, but we
	  rely on callers to never use this with "native" calls for reading
	  CSD or CID.  Native versions of those commands use the R2 type,
	  not R1 plus a data block.
 no need for test 
	
	  Ignore errors from BUS_TEST_W.  BUS_TEST_R will fail if there
	  is a problem.  This improves chances that the test will work.
 No need to poll when using HW busy detection. 
 Let's poll to find out when the HPI request completes. 
 	mmc_interrupt_hpi - Issue for High priority Interrupt
 	@card: the MMC card associated with the HPI transfer
 	Issued High Priority Interrupt, and check for card status
 	until out-of prg-state.
		
		  In idle and transfer states, HPI is not needed and the caller
		  can issue the next intended command immediately
 In all other states, it's illegal to issue HPI 
 	mmc_run_bkops - Run BKOPS for supported cards
 	@card: MMC card to run BKOPS for
 	Run background operations synchronously for cards having manual BKOPS
 	enabled and in case it reports urgent BKOPS level.
	
	  For urgent BKOPS status, LEVEL_2 and higher, let's execute
	  synchronously. Future wise, we may consider to start BKOPS, for less
	  urgent levels by using an asynchronous background task, when idle.
	
	  If the BKOPS timed out, the card is probably still busy in the
	  R1_STATE_PRG. Rather than continue to wait, let's try to abort
	  it with a HPI command to get back into R1_STATE_TRAN.
	
	  If the sanitize operation timed out, the card is probably still busy
	  in the R1_STATE_PRG. Rather than continue to wait, let's try to abort
	  it with a HPI command to get back into R1_STATE_TRAN.
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxdriversmmccoresdio_irq.c
  Author:      Nicolas Pitre
  Created:     June 18, 2007
  Copyright:   MontaVista Software Inc.
  Copyright 2008 Pierre Ossman
		 A fake interrupt could be created when we poll SDIO_CCCR_INTx
		  register with a Marvell SD8797 card. A dummy CMD52 read to
		  function 0 register 0xff can avoid this.
 Don't process SDIO IRQs if the card is suspended. 
 Clear the flag to indicate that we have processed the IRQ. 
	
	  Optimization, if there is only 1 function interrupt registered
	  and we know an IRQ was signaled then call irq handler directly.
	  Otherwise do the full probe.
	
	  We want to allow for SDIO cards to work even on non SDIO
	  aware hosts.  One thing that non SDIO host cannot do is
	  asynchronous notification of pending SDIO card interrupts
	  hence we poll for them in that case.
		
		  We claim the host here on drivers behalf for a couple
		  reasons:
		 
		  1) it is already needed to retrieve the CCCR_INTx;
		  2) we want the driver(s) to clear the IRQ condition ASAP;
		  3) we need to control the abort condition locally.
		 
		  Just like traditional hard IRQ handlers, we expect SDIO
		  IRQ handlers to be quick and to the point, so that the
		  holding of the host lock does not cover too much work
		  that doesn't require that lock to be held.
		
		  Give other threads a chance to run in the presence of
		  errors.
		
		  Adaptive polling frequency based on the assumption
		  that an interrupt will be closely followed by more.
		  This has a substantial benefit for network devices.
 If there is only 1 function registered set sdio_single_irq 
 	sdio_claim_irq - claim the IRQ for a SDIO function
 	@func: SDIO function
 	@handler: IRQ handler callback
 	Claim and activate the IRQ for the given SDIO function. The provided
 	handler will be called when that IRQ is asserted.  The host is always
 	claimed already when the handler is called so the handler should not
 	call sdio_claim_host() or sdio_release_host().
 Master interrupt enable 
 	sdio_release_irq - release the IRQ for a SDIO function
 	@func: SDIO function
 	Disable and release the IRQ for the given SDIO function.
 Disable master interrupt with the last function interrupt 
 SPDX-License-Identifier: GPL-2.0-only
   Copyright (C) 2003 Russell King, All Rights Reserved.
   Copyright 2006-2007 Pierre Ossman
 Allow only 1 DCMD at a time 
 The request has gone already 
 Timeout is handled by mmc core 
 granularity must not be greater than max. discard 
		
		  For MMC host software queue, we only allow 2 requests in
		  flight to avoid a long latency.
		
		  Timeouts are handled by mmc core, and we don't have a host
		  API to abort requests, so we can't handle the timeout anyway.
		  However, when the timeout happens, blk_mq_complete_request()
		  no longer works (to stop the request disappearing under us).
		  To avoid racing with that, set a large timeout.
 Parallel dispatch of requests is not supported at the moment 
	
	  After blk_queue_can_use_dma_map_merging() was called with succeed,
	  since it calls blk_queue_virt_boundary(), the mmc should not call
	  both blk_queue_max_segment_size().
 Set queue depth to get a reasonable value for q->nr_requests 
  mmc_init_queue - initialise a queue structure.
  @mq: mmc queue
  @card: mmc card to attach this queue
  Initialise a MMC card request queue.
	
	  The queue depth for CQE must match the hardware because the request
	  tag is used to index the hardware queue.
	
	  Since blk_mq_alloc_tag_set() calls .init_request() of mmc_mq_ops,
	  the host->can_dma_map_merge should be set before to get max_segs
	  from mmc_get_max_segments().
	
	  The host remains claimed while there are outstanding requests, so
	  simply claiming and releasing here ensures there are none.
	
	  The legacy code handled the possibility of being suspended,
	  so do that here too.
	
	  A request can be completed before the next request, potentially
	  leaving a complete_work with nothing to do. Such a work item might
	  still be queued at this point. Flush it.
  Prepare the sg list(s) to be handed of to the host driver
 SPDX-License-Identifier: GPL-2.0-or-later
   linuxdriversmmccoresdio_bus.c
   Copyright 2007 Pierre Ossman
  SDIO function driver model
 show configuration fields 
	 Unbound SDIO functions are always suspended.
	  During probe, the function is set active and the usage count
	  is incremented.  If the driver supports runtime PM,
	  it should call pm_runtime_put_noidle() in its probe routine and
	  pm_runtime_get_noresume() in its remove routine.
	 Set the default block size so the driver is sure it's something
 Make sure card is powered before invoking ->remove() 
 First, undo the increment made directly above 
 Then undo the runtime PM settings in sdio_bus_probe() 
 	sdio_register_driver - register a function driver
 	@drv: SDIO function driver
 	sdio_unregister_driver - unregister a function driver
 	@drv: SDIO function driver
  Allocate and initialise a new SDIO function structure.
	
	  allocate buffer separately to make sure it's properly aligned for
	  DMA usage (incl. 64 bit DMA)
  Register a new SDIO function with the driver model.
  Unregister a SDIO function with the driver model, and
  (eventually) free it.
  This function can be called through error paths where sdio_add_func() was
  never executed (because a failure occurred at an earlier point).
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriversmmccorehost.c
   Copyright (C) 2003 Russell King, All Rights Reserved.
   Copyright (C) 2007-2008 Pierre Ossman
   Copyright (C) 2010 Linus Walleij
   MMC host class device management
	
	  It's safe to access the bus_ops pointer, as both userspace and the
	  workqueue for detecting cards are frozen at this point.
 Validate conditions for system suspend. 
  mmc_retune_enable() - enter a transfer mode that requires retuning
  @host: host which should retune now
  Pause re-tuning for a small set of operations.  The pause begins after the
  next command and after first doing re-tuning.
  mmc_retune_disable() - exit a transfer mode that requires retuning
  @host: host which should not retune anymore
  It is not meant for temporarily preventing retuning!
  mmc_of_parse() - parse host's device properties
  @host: host whose properties should be parsed.
  To keep the rest of the MMC subsystem unaware of whether DT has been
  used to to instantiate and configure this host instance or not, we
  parse the properties and set respective generic mmc-host flags and
  parameters.
 "bus-width" is translated to MMC_CAP__BIT_DATA flags 
 Hosts capable of 8-bit can also do 4 bits 
 f_max is obtained from the optional "max-frequency" property 
	
	  Configure CD and WP pins. They are both by default active low to
	  match the SDHCI spec. If GPIOs are provided for CD and  or WP, the
	  mmc-gpio helpers are used to attach, configure and use them. If
	  polarity inversion is specified in DT, one of MMC_CAP2_CD_ACTIVE_HIGH
	  and MMC_CAP2_RO_ACTIVE_HIGH capability-2 flags is set. If the
	  "broken-cd" property is provided, the MMC_CAP_NEEDS_POLL capability
	  is set. If the "non-removable" property is found, the
	  MMC_CAP_NONREMOVABLE capability is set and no card-detection
	  configuration is performed.
 Parse Card Detection 
 Parse Write Protection 
 legacy 
 Must be after "non-removable" check 
  mmc_of_parse_voltage - return mask of supported voltages
  @host: host whose properties should be parsed.
  @mask: mask of voltages available for MMCSDSDIO
  Parse the "voltage-ranges" property, returning zero if it is not
  found, negative errno if the voltage-range specification is invalid,
  or one if the voltage-range is specified and successfully parsed.
  mmc_first_nonreserved_index() - get the first index that is not reserved
 	mmc_alloc_host - initialise the per-host structure.
 	@extra: sizeof private data structure
 	@dev: pointer to host device model structure
 	Initialise the per-host structure.
 scanning will be enabled when we're ready 
	
	  By default, hosts do not support SGIO or large requests.
	  They have to set these according to their abilities.
 	mmc_add_host - initialise host hardware
 	@host: mmc host
 	Register the host with the driver model. The host must be
 	prepared to start servicing requests before this function
 	completes.
 	mmc_remove_host - remove host hardware
 	@host: mmc host
 	Unregister and remove all cards associated with this host,
 	and power down the MMC bus. No new requests will be issued
 	after this function has returned.
 	mmc_free_host - free the host structure
 	@host: mmc host
 	Free the host once all references to it have been dropped.
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriversmmccoremmc.c
   Copyright (C) 2003-2004 Russell King, All Rights Reserved.
   Copyright (C) 2005-2007 Pierre Ossman, All Rights Reserved.
   MMCv4 support Copyright (C) 2006 Philip Langdale, All Rights Reserved.
 30s 
  Given the decoded CSD structure, decode the raw CID to our CID structure.
	
	  The selection of the format here is based upon published
	  specs from sandisk and from what people have reported.
 MMC v1.0 - v1.2 
 MMC v1.4 
 MMC v2.0 - v2.2 
 MMC v3.1 - v3.3 
 MMC v4 
  Given a 128-bit response, decode to our card CSD structure.
	
	  We only understand CSD structure v1.1 and v1.2.
	  v1.2 has extra information in bits 15, 11 and 10.
	  We also support eMMC v4.4 & v4.41.
	
	  Disable these attributes by default
	
	  Enhanced area feature support -- check whether the eMMC
	  card has the Enhanced area enabled.  If so, export enhanced
	  area offset and size to user by adding sysfs interface.
			
			  calculate the enhanced data area offset, in bytes
			
			  calculate the enhanced data area size, in kilobytes
	
	  General purpose partition feature support --
	  If ext_csd has the size of general purpose partitions,
	  set size, part_cfg, partition name in mmc_part.
 Minimum partition switch timeout in milliseconds 
  Decode extended CSD.
 Version is coded in the CSD_STRUCTURE byte in the EXT_CSD register 
	
	  The EXT_CSD format is meant to be forward compatible. As long
	  as CSD_STRUCTURE does not change, all values for EXT_CSD_REV
	  are authorized, see JEDEC JESD84-B50 section B.8.
 fixup device after ext_csd revision field is updated 
 Cards with density > 2GiB are sector addressed 
 EXT_CSD value is in units of 10ms, but we store in ms 
 Sleep  awake timeout in 100ns units 
		
		  There are two boot regions of equal size, defined in
		  multiples of 128K.
		
		  Note that the call to mmc_part_add above defaults to read
		  only. If this default assumption is changed, the call must
		  take into account the value of boot_locked below.
 Save power class values 
 Adjust production date as per JEDEC JESD84-B451 
 check whether the eMMC card supports BKOPS 
 check whether the eMMC card supports HPI 
			
			  Indicate the maximum timeout to close
			  a command interrupted by HPI
		
		  RPMB regions are defined in multiples of 128K.
 eMMC v4.5 or later 
	
	  GENERIC_CMD6_TIME is to be used "unless a specific timeout is defined
	  when accessing a specific field", so use it here if there is no
	  PARTITION_SWITCH_TIME.
 Some eMMC set the value too low so set a minimum 
 eMMC v5 or later 
 eMMC v5.1 or later 
 Exclude inefficiently small queue depths 
		 If the host or the card can't do the switch,
		
		  High capacity cards should have this "magic" size
		  stored in their CSD.
 only compare read only fields 
 return default DSR value 
  Select the PowerClass for the current bus width
  If power class is defined for 48 bit bus in the
  extended CSD register, select it by executing the
  mmc_switch command.
 If the power class is different from the default value 
 Power class selection is supported for versions >= 4.0 
 Power class values are defined only for 48 bit bus 
  Set the bus speed for the selected speed mode.
  Select the bus width amoung 4-bit and 8-bit(SDR).
  If the bus width is changed successfully, return the selected width value.
  Zero is returned instead of error value if the wide width is not supported.
	
	  Unlike SD, MMC cards dont have a configuration register to notify
	  supported bus width. So bus test command should be run to identify
	  the supported bus width or compare the ext csd values of current
	  bus width and ext csd values of 1 bit mode read earlier.
		
		  Host is capable of 8bit transfer, then switch
		  the device to work in 8bit transfer mode. If the
		  mmc switch command returns error then switch to
		  4bit transfer mode. On success set the corresponding
		  bus width on the host.
		
		  If controller can't handle bus width test,
		  compare ext_csd previously read in 1 bit mode
		  against ext_csd at new bus width
  Switch to the high-speed mode
  Activate wide bus and DDR if supported.
	
	  eMMC cards can support 3.3V to 1.2V io (vccq)
	  signaling.
	 
	  EXT_CSD_CARD_TYPE_DDR_1_8V means 3.3V or 1.8V vccq.
	 
	  1.8V vccq at 3.3V core voltage (vcc) is not required
	  in the JEDEC spec for DDR.
	 
	  Even (e)MMC card can support 3.3v to 1.2v vccq, but not all
	  host controller can support this, like some of the SDHCI
	  controller which connect to an eMMC device. Some of these
	  host controller still needs to use 1.8v vccq for supporting
	  DDR mode.
	 
	  So the sequence will be:
	  if (host and device can both support 1.2v IO)
	 	use 1.2v IO;
	  else if (host and device can both support 1.8v IO)
	 	use 1.8v IO;
	  so if host and device can only support 3.3v IO, this is the
	  last choice.
	 
	  WARNING: eMMC rules are NOT the same as SD DDR
 make sure vccq is 3.3v after switching disaster 
	
	  HS400 mode requires 8-bit bus width
 Switch card to HS mode 
 Prepare host to downgrade to HS timing 
 Set host controller to HS timing 
 Reduce frequency to HS frequency 
 Switch card to DDR 
 Switch card to HS400 
 Set host controller to HS400 timing and frequency 
 Reduce frequency to HS 
 Switch HS400 to HS DDR 
 Switch HS DDR to HS 
 Switch HS to HS200 
	
	  For HS200, CRC errors are not a reliable way to know the switch
	  failed. If there really is a problem, we would expect tuning will
	  fail and the result ends up the same.
 Prepare tuning for HS400 mode. 
 If fails try again during next card power cycle 
 Switch card to HS mode 
 Switch card to DDR with strobe bit 
 Switch card to HS400 
 Set host controller to HS400 timing and frequency 
 Controller enable enhanced strobe function 
  For device supporting HS200 mode, the following sequence
  should be done before executing the tuning process.
  1. set the desired bus width(4-bit or 8-bit, 1-bit is not supported)
  2. switch to HS200 mode
  3. set the clock to > 52Mhz and <=200MHz
 If fails try again during next card power cycle 
	
	  Set the bus width(4 or 8) with host's support and
	  switch to HS200 mode if bus width is set successfully.
		
		  For HS200, CRC errors are not a reliable way to know the
		  switch failed. If there really is a problem, we would expect
		  tuning will fail and the result ends up the same.
		
		  mmc_select_timing() assumes timing has not changed if
		  it is a switch error.
 fall back to the old signal voltage, if fails report error 
  Activate High Speed, HS200 or HS400ES mode if supported.
	
	  Set the bus speed to the selected bus timing.
	  If timing is not selected, backward compatible is the default.
  Execute tuning sequence to seek the proper bus operating
  conditions for HS200 and HS400, which sends CMD21 to the device.
	
	  Timing should be adjusted to the HS400 target
	  operation frequency for tuning process
  Handle the detection and initialisation of a card.
  In the case of a resume, "oldcard" will contain the card
  we're trying to reinitialise.
 Set correct bus mode for MMC before attempting init 
	
	  Since we're changing the OCR value, we seem to
	  need to tell some cards to go back to the idle
	  state.  We wait 1ms to give cards time to
	  respond.
	  mmc_go_idle is needed for eMMC that are asleep
 The extra bit indicates that we support high capacity 
	
	  For SPI, enable CRC as appropriate.
	
	  Fetch CID from card.
		
		  Allocate card structure.
	
	  Call the optional HC's init_card function to handle quirks.
	
	  For native busses:  set card RCA and quit open drain mode.
		
		  Fetch CSD from card.
	
	  handling only for cards supporting DSR and hosts requesting
	  DSR configuration
	
	  Select card, as all following commands rely on that.
 Read extended CSD. 
		
		  If doing byte addressing, check if required to do sector
		  addressing.  Handle the case of <2GB cards needing sector
		  addressing.  See section 8.1 JEDEC Standard JED84-A441;
		  ocr register has bit 30 set for sector addressing.
 Erase size depends on CSD and Extended CSD 
 Enable ERASE_GRP_DEF. This bit is lost after a reset or power off. 
			
			  Just disable enhanced area off & sz
			  will try to enable ERASE_GROUP_DEF
			  during next time reinit
			
			  enable ERASE_GRP_DEF successfully.
			  This will affect the erase size, so
			  here need to reset erase size
	
	  Ensure eMMC user default partition is enabled
	
	  Enable power_off_notification byte in the ext_csd register
		
		  The err can be -EBADMSG or 0,
		  so check for success and update the flag
 set erase_arg 
	
	  Select timing interface
 Select the desired bus width optionally 
	
	  Choose the power class with selected bus interface
	
	  Enable HPI feature (if supported)
	
	  If cache size is higher than 0, this indicates the existence of cache
	  and it can be turned on. Note that some eMMCs from Micron has been
	  reported to need ~800 ms timeout, while enabling the cache after
	  sudden power failure tests. Let's extend the timeout to a minimum of
	  DEFAULT_CACHE_EN_TIMEOUT_MS and do it for all cards.
		
		  Only if no error, cache is turned on successfully.
	
	  Enable Command Queue if supported. Note that Packed Commands cannot
	  be used with Command Queue.
	
	  In some cases (e.g. RPMB or mmc_test), the Command Queue must be
	  disabled for a time, so a flag is needed to indicate to re-enable the
	  Command Queue.
 Re-tuning can't be done once the card is deselected 
	
	  If the host does not wait while the card signals busy, then we can
	  try to poll, but only if the host supports HW polling, as the
	  SEND_STATUS cmd is not allowed. If we can't poll, then we simply need
	  to wait the sleepawake timeout.
 Use EXT_CSD_POWER_OFF_SHORT as default notification type. 
 Disable the power off notification after the switch operation. 
  Host is being removed. Free up the current card.
  Card detection - card is alive.
  Card detection callback from host.
	
	  Just check if our card has been removed.
  Flush the internal cache of the eMMC to non-volatile storage.
  Suspend callback
  This function tries to determine if the same card is still present
  and, if so, restore all state to it.
  Shutdown callback
	
	  In a specific case for poweroff notify, we need to resume the card
	  before we can shutdown it properly.
  Callback for resume.
  Callback for runtime_suspend.
  Callback for runtime_resume.
	
	  In the case of recovery, we can't expect flushing the cache to work
	  always, but we have a go and ignore errors.
 If the card accept RST_n signal, send it. 
 Set initial state and call mmc_set_ios 
 Do a brute force power cycle 
  Starting point for MMC card init.
 Set correct bus mode for MMC before attempting attach 
	
	  We need to get OCR a different way for SPI.
	
	  Can we support the voltage of the card?
	
	  Detect and init the card.
 SPDX-License-Identifier: GPL-2.0-or-later
   linuxdriversmmccoresdio_io.c
   Copyright 2007-2008 Pierre Ossman
 	sdio_claim_host - exclusively claim a bus for a certain SDIO function
 	@func: SDIO function that will be accessed
 	Claim a bus for a set of operations. The SDIO function given
 	is used to figure out which bus is relevant.
 	sdio_release_host - release a bus for a certain SDIO function
 	@func: SDIO function that was accessed
 	Release a bus, allowing others to claim the bus for their
 	operations.
 	sdio_enable_func - enables a SDIO function for usage
 	@func: SDIO function to enable
 	Powers up and activates a SDIO function so that register
 	access is possible.
 	sdio_disable_func - disable a SDIO function
 	@func: SDIO function to disable
 	Powers down and deactivates a SDIO function. Register access
 	to this function will fail until the function is reenabled.
 	sdio_set_block_size - set the block size of an SDIO function
 	@func: SDIO function to change
 	@blksz: new block size or 0 to use the default.
 	The default block size is the largest supported by both the function
 	and the host, with a maximum of 512 to ensure that arbitrarily sized
 	data transfer use the optimal (least) number of commands.
 	A driver may call this to override the default block size set by the
 	core. This can be used to set a block size greater than the maximum
 	that reported by the card; it is the driver's responsibility to ensure
 	it uses a value that the card supports.
 	Returns 0 on success, -EINVAL if the host does not support the
 	requested block size, or -EIO (etc.) if one of the resultant FBR block
 	size register writes failed.
  Calculate the maximum byte mode transfer size
 maximum size for byte mode 
  This is legacy code, which needs to be re-worked some day. Basically we need
  to take into account the properties of the host, as to enable the SDIO func
  driver layer to allocate optimal buffers.
	
	  FIXME: We don't have a system for the controller to tell
	  the core about its problems yet, so for now we just 32-bit
	  align the size.
 	sdio_align_size - pads a transfer size to a more optimal value
 	@func: SDIO function
 	@sz: original transfer size
 	Pads the original data size with a number of extra bytes in
 	order to avoid controller bugs andor performance hits
 	(e.g. some controllers revert to PIO for certain sizes).
 	If possible, it will also adjust the size so that it can be
 	handled in just a single request.
 	Returns the improved size, which might be unmodified.
	
	  Do a first check with the controller, in case it
	  wants to increase the size up to a point where it
	  might need more than one block.
	
	  If we can still do this with just a byte transfer, then
	  we're done.
		
		  Check if the transfer is already block aligned
		
		  Realign it so that it can be done with one request,
		  and recheck if the controller still likes it.
		
		  This value is only good if it is still just
		  one request.
		
		  We failed to do one request, but at least try to
		  pad the remainder properly.
		
		  We need multiple requests, so first check that the
		  controller can handle the chunk size;
			
			  Fix up the size of the remainder (if any)
	
	  The controller is simply incapable of transferring the size
	  we want in decent manner, so just return the original size.
 Split an arbitrarily sized data transfer into several
 Do the bulk of the transfer using block mode (if supported). 
		 Blocks per command is limited by host count, host transfer
 Write the remainder using byte mode. 
 Indicate byte mode by setting "blocks" = 0 
 	sdio_readb - read a single byte from a SDIO function
 	@func: SDIO function to access
 	@addr: address to read
 	@err_ret: optional status value from transfer
 	Reads a single byte from the address space of a given SDIO
 	function. If there is a problem reading the address, 0xff
 	is returned and @err_ret will contain the error code.
 	sdio_writeb - write a single byte to a SDIO function
 	@func: SDIO function to access
 	@b: byte to write
 	@addr: address to write to
 	@err_ret: optional status value from transfer
 	Writes a single byte to the address space of a given SDIO
 	function. @err_ret will contain the status of the actual
 	transfer.
 	sdio_writeb_readb - write and read a byte from SDIO function
 	@func: SDIO function to access
 	@write_byte: byte to write
 	@addr: address to write to
 	@err_ret: optional status value from transfer
 	Performs a RAW (Read after Write) operation as defined by SDIO spec -
 	single byte is written to address space of a given SDIO function and
 	response is read back from the same address, both using single request.
 	If there is a problem with the operation, 0xff is returned and
 	@err_ret will contain the error code.
 	sdio_memcpy_fromio - read a chunk of memory from a SDIO function
 	@func: SDIO function to access
 	@dst: buffer to store the data
 	@addr: address to begin reading from
 	@count: number of bytes to read
 	Reads from the address space of a given SDIO function. Return
 	value indicates if the transfer succeeded or not.
 	sdio_memcpy_toio - write a chunk of memory to a SDIO function
 	@func: SDIO function to access
 	@addr: address to start writing to
 	@src: buffer that contains the data to write
 	@count: number of bytes to write
 	Writes to the address space of a given SDIO function. Return
 	value indicates if the transfer succeeded or not.
 	sdio_readsb - read from a FIFO on a SDIO function
 	@func: SDIO function to access
 	@dst: buffer to store the data
 	@addr: address of (single byte) FIFO
 	@count: number of bytes to read
 	Reads from the specified FIFO of a given SDIO function. Return
 	value indicates if the transfer succeeded or not.
 	sdio_writesb - write to a FIFO of a SDIO function
 	@func: SDIO function to access
 	@addr: address of (single byte) FIFO
 	@src: buffer that contains the data to write
 	@count: number of bytes to write
 	Writes to the specified FIFO of a given SDIO function. Return
 	value indicates if the transfer succeeded or not.
 	sdio_readw - read a 16 bit integer from a SDIO function
 	@func: SDIO function to access
 	@addr: address to read
 	@err_ret: optional status value from transfer
 	Reads a 16 bit integer from the address space of a given SDIO
 	function. If there is a problem reading the address, 0xffff
 	is returned and @err_ret will contain the error code.
 	sdio_writew - write a 16 bit integer to a SDIO function
 	@func: SDIO function to access
 	@b: integer to write
 	@addr: address to write to
 	@err_ret: optional status value from transfer
 	Writes a 16 bit integer to the address space of a given SDIO
 	function. @err_ret will contain the status of the actual
 	transfer.
 	sdio_readl - read a 32 bit integer from a SDIO function
 	@func: SDIO function to access
 	@addr: address to read
 	@err_ret: optional status value from transfer
 	Reads a 32 bit integer from the address space of a given SDIO
 	function. If there is a problem reading the address,
 	0xffffffff is returned and @err_ret will contain the error
 	code.
 	sdio_writel - write a 32 bit integer to a SDIO function
 	@func: SDIO function to access
 	@b: integer to write
 	@addr: address to write to
 	@err_ret: optional status value from transfer
 	Writes a 32 bit integer to the address space of a given SDIO
 	function. @err_ret will contain the status of the actual
 	transfer.
 	sdio_f0_readb - read a single byte from SDIO function 0
 	@func: an SDIO function of the card
 	@addr: address to read
 	@err_ret: optional status value from transfer
 	Reads a single byte from the address space of SDIO function 0.
 	If there is a problem reading the address, 0xff is returned
 	and @err_ret will contain the error code.
 	sdio_f0_writeb - write a single byte to SDIO function 0
 	@func: an SDIO function of the card
 	@b: byte to write
 	@addr: address to write to
 	@err_ret: optional status value from transfer
 	Writes a single byte to the address space of SDIO function 0.
 	@err_ret will contain the status of the actual transfer.
 	Only writes to the vendor specific CCCR registers (0xF0 -
 	0xFF) are permiited; @err_ret will be set to -EINVAL for 
 	writes outside this range.
 	sdio_get_host_pm_caps - get host power management capabilities
 	@func: SDIO function attached to host
 	Returns a capability bitmask corresponding to power management
 	features supported by the host controller that the card function
 	might rely upon during a system suspend.  The host doesn't need
 	to be claimed, nor the function active, for this information to be
 	obtained.
 	sdio_set_host_pm_flags - set wanted host power management capabilities
 	@func: SDIO function attached to host
 	@flags: Power Management flags to set
 	Set a capability bitmask corresponding to wanted host controller
 	power management features for the upcoming suspend state.
 	This must be called, if needed, each time the suspend method of
 	the function driver is called, and must contain only bits that
 	were returned by sdio_get_host_pm_caps().
 	The host doesn't need to be claimed, nor the function active,
 	for this information to be set.
 function suspend methods are serialized, hence no lock needed 
 	sdio_retune_crc_disable - temporarily disable retuning on CRC errors
 	@func: SDIO function attached to host
 	If the SDIO card is known to be in a state where it might produce
 	CRC errors on the bus in response to commands (like if we know it is
 	transitioning between power states), an SDIO function driver can
 	call this function to temporarily disable the SDMMC core behavior of
 	triggering an automatic retuning.
 	This function should be called while the host is claimed and the host
 	should remain claimed until sdio_retune_crc_enable() is called.
 	Specifically, the expected sequence of calls is:
 	- sdio_claim_host()
 	- sdio_retune_crc_disable()
 	- some number of calls like sdio_writeb() and sdio_readb()
 	- sdio_retune_crc_enable()
 	- sdio_release_host()
 	sdio_retune_crc_enable - re-enable retuning on CRC errors
 	@func: SDIO function attached to host
 	This is the compement to sdio_retune_crc_disable().
 	sdio_retune_hold_now - start deferring retuning requests till release
 	@func: SDIO function attached to host
 	This function can be called if it's currently a bad time to do
 	a retune of the SDIO card.  Retune requests made during this time
 	will be held and we'll actually do the retune sometime after the
 	release.
 	This function could be useful if an SDIO card is in a power state
 	where it can respond to a small subset of commands that doesn't
 	include the retuning command.  Care should be taken when using
 	this function since (presumably) the retuning request we might be
 	deferring was made for a good reason.
 	This function should be called while the host is claimed.
 	sdio_retune_release - signal that it's OK to retune now
 	@func: SDIO function attached to host
 	This is the complement to sdio_retune_hold_now().  Calling this
 	function won't make a retune happen right away but will allow
 	them to be scheduled normally.
 	This function should be called while the host is claimed.
 SPDX-License-Identifier: GPL-2.0-only
   tifm_sd.c - TI FlashMedia driver
   Copyright (C) 2006 Alex Dubov <oakad@yahoo.com>
  Special thanks to Brad Campbell for extensive testing of this driver.
 Constants here are mostly from OMAP5912 datasheet 
 rx dma enable 
 tx dma enable 
 set bits: AE, AF 
 data timeout counted in kilocycles 
 abort  initialize command 
 set bits: CCRC, CTO, DCRC, DTO 
 end of command phase  
 card detect           
 card enter busy state 
 block receivedsent   
 card exit busy state  
 data time-out         
 data crc error        
 command time-out      
 command crc error     
 fifo almost full      
 fifo almost empty     
 OCR busy              
 card irq (cmd40sdio) 
 card status error     
 open drain  extended timeout 
 card is read-only     
 for some reason, host won't respond correctly to readwwritew 
 Called from interrupt handler 
 Called from interrupt handler 
 set to unlimited 
 chip_select : maybe later 
vdd
power is set before probe  after remove
 wait up to 0.51 sec for reset 
 command timeout fixed to 64 clocks for now
	
	  We use a fixed request timeout of 1s, hence inform the core about it.
	  A future improvement should instead respect the cmd->busy_timeout.
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2014-2015 MediaTek Inc.
  Author: Chaotian.Jing <chaotian.jing@mediatek.com>
--------------------------------------------------------------------------
 Common Definition                                                        
--------------------------------------------------------------------------
--------------------------------------------------------------------------
 Register Offset                                                          
--------------------------------------------------------------------------
--------------------------------------------------------------------------
 Top Pad Register Offset                                                  
--------------------------------------------------------------------------
--------------------------------------------------------------------------
 Register Mask                                                            
--------------------------------------------------------------------------
 MSDC_CFG mask 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 R  
 R  
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 MSDC_IOCON mask 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 MSDC_PS mask 
 RW 
 R  
 RW 
 R  
 R  
 R  
 R  
 MSDC_INT mask 
 W1C 
 W1C 
 W1C 
 W1C 
 W1C 
 W1C 
 W1C 
 W1C 
 W1C 
 W1C 
 R 
 W1C 
 W1C 
 W1C 
 W1C 
 W1C 
 W1C 
 W1C 
 W1C 
 W1C 
 MSDC_INTEN mask 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 MSDC_FIFOCS mask 
 R 
 R 
 RW 
 SDC_CFG mask 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 SDC_STS mask 
 RW 
 RW 
 RW 
 RW 
 SDC_ADV_CFG0 mask 
 RW 
 DMA_SA_H4BIT mask 
 RW 
 MSDC_DMA_CTRL mask 
 W 
 W 
 W 
 RW 
 RW 
 RW 
 MSDC_DMA_CFG mask 
 R 
 RW 
 RW 
 RW 
 RW 
 MSDC_PATCH_BIT mask 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 EMMC51_CFG0 mask 
 RW 
 RW 
 RW 
 RW 
 RW 
 EMMC50_CFG1 mask 
 RW 
 RW 
 RW 
 RW 
 CQHCI_SETTING 
 RW 
 RW 
 EMMC_TOP_CONTROL mask 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 RW 
 TW 
 EMMC_TOP_CMD mask 
 RW 
 RW 
 RW 
 RW 
 RW 
 EMMC50_PAD_DS_TUNE mask 
 RW 
 RW 
 RW 
 100ms x5 
 1000ms x5 
 8 cycles CD debounce 
 PAD delay cells 
--------------------------------------------------------------------------
 Descriptor Structure                                                     
--------------------------------------------------------------------------
 bit8 ~ bit15 
 bit0 ~ bit15 
 bit16 ~ bit23 
 bit8 ~ bit15 
 bit0 ~ bit15 
 bit0 ~ bit23 
 IO scatter list 
 pointer to gpd array 
 pointer to bd array 
 the physical address of gpd array 
 the physical address of bd array 
 only used for MT8173 
 host base address 
 host top register base address 
 dma channel 
 data timeout ns 
 data timeout clks 
 host interrupt 
 msdc source clock 
 msdc h_clk 
 bus clock which used to access register 
 msdc source clock control gate 
 msdc subsys clock control gate 
 mmc subsystem clock frequency 
 source clock frequency 
 cmd internal delay for HS200SDR104 
 cmd internal delay for HS400 
 cmd response sample selection for HS400 
 current eMMC will run at hs400 mode 
 hs400 mode online tuning 
 Use internal card-detect logic 
 support eMMC hw cmdq 
 used when gate HCLK 
 default tune setting 
 tune result of CMD21CMD19 
 modify gpd 
 need to clear first. use these bits to calc checksum 
 modify bd 
 init bd 
 the last bd 
 checksume need to clear first 
 in 1048576 sclk cycle unit 
DDR mode will double the clk cycles for data timeout 
 clock control primitives 
 ddr mode and use divisor 
 mean div = 14 
 sclk = clk  4 
 div is ignore when bit18 is set 
 no divisor 
 use divisor 
 mean div = 12 
 sclk = clk  2 
	
	  As src_clkHCLK use the same bit to gateungate,
	  So if want to only gate src_clk, need gate its parent(mux).
 need because clk changed. 
	
	  mmc_select_hs400() will drop to 50Mhz and High speed mode,
	  tune result of hs200200Mhz is not suitable for 50Mhz
 Actually, R1, R5, R6, R7 are the same 
	 rawcmd :
	  vol_swt << 30 | auto_cmd << 28 | blklen << 16 | go_irq << 15 |
	  stop << 14 | rw << 13 | dtype << 11 | rsptyp << 7 | brk << 6 | opcode
 AutoCMD23 
 Always use dma mode 
  msdc_recheck_sdio_irq - recheck whether the SDIO irq is lost
  Host controller may lost interrupt in some special case.
  Add SDIO irq recheck mechanism to make sure all interrupts
  can be processed immediately
	
	  No need check the return value of cancel_delayed_work, as only ONE
	  path will go here!
 returns true if command is fully handled; returns false otherwise 
			
			  should not clear fifointerrupt as the tune data
			  may have alreay come when cmd19cmd21 gets response
			  CRC error.
 It is the core layer's responsibility to ensure card status
  is correct before issue a request. but host design do below
  checks recommended.
 The max busy time we can endure is 20ms 
 R1B or with data, should check SDCBUSY 
	 if SBC is required, we have HW option and SW option.
	  if HW option is enabled, and SBC does not have "special" flags,
	  use HW option,  otherwise use SW option
 Apply different pinctrl settings for different signal voltage 
 only check if data0 is low 
 simulate HW timeout status 
 clear interrupts 
 clear interrupts 
 Configure to MMCSD mode, clock free running 
 Reset 
 Disable and clear all interrupts 
 Configure card detection 
 use async fifo, then no need tune internal delay 
 choose clock tune 
	 Configure to enable SDIO mode.
	  it's must otherwise sdio cmd5 failed
 Config SDIO device detect interrupt function 
 Configure to default data timeout 
 Disabled card-detect 
 Disable and clear all interrupts 
 init gpd and bd list in msdc_drv_probe 
 hwo, cs, bd pointer 
	 gpd->next is must set for desc DMA
	  That's why must alloc 2 gpd structure.
 physical address 
 SuspendResume will do power offon 
 The rule is that to find the smallest delay cell 
		
		  Using the same parameters, it may sometimes pass the test,
		  but sometimes it may fail. To make sure the parameters are
		  more stable, we test each set of parameters 3 times.
 if rising edge has enough margin, then do not scan falling edge 
		
		  Using the same parameters, it may sometimes pass the test,
		  but sometimes it may fail. To make sure the parameters are
		  more stable, we test each set of parameters 3 times.
 select EMMC50 PAD CMD tune 
		
		  Using the same parameters, it may sometimes pass the test,
		  but sometimes it may fail. To make sure the parameters are
		  more stable, we test each set of parameters 3 times.
 if rising edge has enough margin, then do not scan falling edge 
  MSDC IP which supports data tune + async fifo can do CMDDAT tune
  together, which can save the tuning time.
 if rising edge has enough margin, then do not scan falling edge 
 hs400 mode must set it to 0 
 to improve read performance, set outstanding to 2 
 10us is enough 
 enable cmdq irq 
 enable busy check 
 default write data  busy timeout 20s 
 default read data timeout 1s 
 disable cmdq irq 
 disable busy check 
source clock control gate is optional clock
 If present, always enable for this clock gate 
 Allocate MMC host for this device 
 Set host parameters to mmc 
		
		  Is removable but no GPIO declared, so
		  use internal functionality.
 MMC core transfer sizes tunable parameters 
 cqhci 16bit length 
 0 size, means 65536 so we don't have to -1 here 
 SPDX-License-Identifier: GPL-2.0-only
  Marvell MMCSDSDIO driver
  Authors: Maen Suleiman, Nicolas Pitre
  Copyright (C) 2008-2009 Marvell Ltd.
	
	  Hardware weirdness.  The FIFO_EMPTY bit of the HW_STATE
	  register is sometimes not set before a while when some
	  "unusual" data block sizes are used (such as with the SWITCH
	  command), even despite the fact that the XFER_DONE interrupt
	  was raised.  And if another data transfer starts before
	  this bit comes to good sense (which eventually happens by
	  itself) then the new transfer simply fails with a timeout.
 If timeout=0 then maximum timeout index is used. 
		
		  We cannot do DMA on a buffer which offset or size
		  is not aligned on a 4-byte boundary.
		 
		  It also appears the host to card DMA can corrupt
		  data when the buffer is not aligned on a 64 byte
		  boundary.
 PIO section of mvsd_irq has comments on those bits 
 We can't be sure about the last block when errors are detected 
 Handle Auto cmd 12 response 
	
	  It looks like, SDIO IP can issue one late, spurious irq
	  although all irqs should be disabled. To work around this,
	  bail out early, if we didn't expect any irqs to occur.
 PIO handling, if needed. Messy business... 
		
		  Normally we'd use < 32 here, but the RX_FIFO_8W bit
		  doesn't appear to assert when there is exactly 32 bytes
		  (8 words) left to fetch in a transfer.
		
		  The TX_FIFO_8W bit is unreliable. When set, bursting
		  16 halfwords all at once in the FIFO drops data. Actually
		  TX_AVAIL does go off after only one word is pushed even if
		  TX_FIFO_8W remains set.
 default transfer mode 
 default to maximum timeout 
	
	  The HI_SPEED_EN bit is causing trouble with many (but not all)
	  high speed SD, SDHC and SDIO cards.  Not enabling that bit
	  makes all cards work.  So let's just ignore that bit for now
	  and revisit this issue if problems for not enabling this bit
	  are ever reported.
	
	  Some non-DT platforms do not pass a clock, and the clock
	  frequency is passed through platform_data. On DT platforms,
	  a clock must always be passed, even if there is no gatable
	  clock associated to the SDIO interface (it can simply be a
	  fixed rate clock).
 (Re-)program MBUS remapping windows if we are asked to. 
 sentinel  }
 maximum card clock frequency (default 50MHz) 
 force PIO transfers all the time 
 SPDX-License-Identifier: GPL-2.0-only
  driversmmchostsdhci-msm.c - Qualcomm SDHCI Platform driver
  Copyright (c) 2013-2014, The Linux Foundation. All rights reserved.
 Timeout value to avoid infinite waiting for pwr_irq 
 Max load for eMMC Vdd-io supply 
 CQHCI vendor specific registers 
 Applicable to sdcc minor ver < 0x49 
 Present on SDCC5.1 onwards 
  From V5, register spaces have changed. Wrap this info in a structure
  and choose the data_structure based on version info mentioned in DT.
 MSM SDCC mapped address 
 MSM ICE mapped address (if available) 
 power irq 
 SDHC bus voter clock 
 TCXO clk needed for FLL feature of cm_dll
 core, iface, cal, sleep, and ice clocks 
  APIs to readwrite to vendor specific registers which were there in the
  core_mem region before MCI was removed.
	
	  The SDHC requires internal clock frequency to be double the
	  actual clock that will be set for DDR mode. The controller
	  uses the faster clock(100400MHz) for some of its parts and
	  send the actual required clock (50200MHz) to the card.
	
	  Qualcomm clock drivers by default round clock _up_ if they can't
	  make the requested rate.  This is not good for SD.  Yell if we
	  encounter it.
 Stash the rate we requested to use in sdhci_msm_runtime_resume() 
 Platform specific tuning 
 Poll for CK_OUT_EN bit.  max. poll time = 50us 
 Wait until CK_OUT_EN bit of DLL_CONFIG register becomes '0' 
	
	  Write the selected DLL clock output phase (0 ... 15)
	  to CDR_SELEXT bit field of DLL_CONFIG register.
 Wait until CK_OUT_EN bit of DLL_CONFIG register becomes '1' 
  Find out the greatest range of consecuitive selected
  DLL clock output phases that can be used as sampling
  setting for SD3.0 UHS-I card read operation (in SDR104
  timing mode) or for eMMC4.5 card read operation (in
  HS400HS200 timing mode).
  Select the 34 of the range and configure the DLL with the
  selected DLL clock output phase.
 check if next phase in phase_table is consecutive or not 
 Check if phase-0 is present in first valid window? 
 Check if cycle exist between 2 valid windows 
 If 2 valid windows form cycle then merge them as single window 
 number of phases in raw where phase 0 is present 
 number of phases in raw where phase 15 is present 
			
			  If there are more than 1 phase windows then total
			  number of phases in both the windows should not be
			  more than or equal to MAX_PHASES.
 Merge 2 cyclic windows 
 Program the MCLK value to MCLK_FREQ bit field 
 Initialize the DLL (Programmable Delay Line) 
	
	  Make sure that clock is always enabled when DLL
	  tuning is in progress. Keeping PWRSAVE ON may
	  turn off the clock.
 wait for 5us before enabling DLL clock 
	
	  Configure DLL user control register to enable DLL status.
	  This setting is applicable to SDCC v5.1 onwards only.
 Wait until DLL_LOCK bit of DLL_STATUS register becomes '1' 
 max. wait for 50us sec for LOCK bit to be set 
	
	  Disable HC_SELECT_IN to be able to use the UHS mode select
	  configuration from Host Control2 register for all other
	  modes.
	  Write 0 to HC_SELECT_IN and HC_SELECT_IN_EN field
	  in VENDOR_SPEC_FUNC
	
	  Make sure above writes impacting free running MCLK are completed
	  before changing the clk_rate at GCC.
 Select the divided clock (free running MCLK2) 
	
	  Select HS400 mode using the HC_SELECT_IN from VENDOR SPEC
	  register
		
		  Poll on DLL_LOCK or DDR_DLL_LOCK bits in
		  core_dll_status to be set. This should get set
		  within 15 us at 200 MHz.
	
	  Make sure above writes impacting free running MCLK are completed
	  before changing the clk_rate at GCC.
  sdhci_msm_hc_select_mode :- In general all timing modes are
  controlled via UHS mode select in Host Control2 register.
  eMMC specific HS200HS400 doesn't have their respective modes
  defined here, hence we use these values.
  HS200 - SDR104 (Since they both are equivalent in functionality)
  HS400 - This involves multiple configurations
 		Initially SDR104 - when tuning is required as HS200
 		Then when switching to DDR @ 400MHz (HS400) we use
 		the vendor specific HC_SELECT_IN to control the mode.
  In addition to controlling the modes we also need to select the
  correct input clock for DLL depending on the mode.
  HS400 - divided clock (free running MCLK2)
  All other modes - default (free running MCLK)
	
	  Retuning in HS400 (DDR mode) will fail, just reset the
	  tuning block and restore the saved tuning phase.
 Set the selected phase in delay line hw block 
 Perform CDC Register Initialization Sequence 
 CDC HW Calibration 
	
	  Currently the core_ddr_config register defaults to desired
	  configuration on reset. Currently reprogramming the power on
	  reset (POR) value in case it might have been modified by
	  bootloaders. In the future, if this changes, then the desired
	  values will need to be programmed appropriately.
	
	  Set CORE_PWRSAVE_DLL bit in CORE_VENDOR_SPEC3.
	  When MCLK is gated OFF, it is not gated for less than 0.5us
	  and MCLK must be switched on for at-least 1us before DATA
	  starts coming. Controllers with 14lpp and later tech DLL cannot
	  guarantee above requirement. So PWRSAVE_DLL should not be
	  turned on for host controllers using this DLL.
	
	  Drain writebuffer to ensure above DLL calibration
	  and PWRSAVE DLL is enabled.
	
	  Retuning in HS400 (DDR mode) will fail, just reset the
	  tuning block and restore the saved tuning phase.
 Set the selected phase in delay line hw block 
	
	  Tuning is required for SDR104, HS200 and HS400 cards and
	  if clock frequency is greater than 100MHz in these modes.
	
	  SDR DLL comes into picture only for timing modes which needs
	  tuning.
 Reset the tuning block 
 Restore the tuning block 
 Clock-Data-Recovery used to dynamically adjust RX sampling point 
	
	  Clear tuning_done flag before tuning to ensure proper
	  HS400 settings.
	
	  For HS400 tuning in HS200 timing requires:
	  - select MCLK2 in VENDOR_SPEC
	  - program MCLK to 400MHz (or nearest supported) in GCC
 First of all reset the tuning block 
 Set the phase in delay line hw block 
 Tuning is successful at this tuning point 
			
			  All phases valid is _almost_ as bad as no phases
			  valid.  Probably all phases are not really reliable
			  but we didn't detect where the unreliable place is.
			  That means we'll essentially be guessing and hoping
			  we get a good phase.  Better to try a few times.
		
		  Finally set the selected phase in delay
		  line hw block.
 Tuning failed 
  sdhci_msm_hs400 - Calibrate the DLL for HS400 bus speed mode operation.
  This needs to be done for both tuning and enhanced_strobe mode.
  DLL operation is only needed for clock > 100MHz. For clock <= 100MHz
  fixed feedback clock is used.
 Select Bus Speed Mode for host 
	
	  When clock frequency is less than 100MHz, the feedback clock must be
	  provided and DLL must not be used so that tuning can be skipped. To
	  provide feedback clock, the mode selection can be any value less
	  than 3'b011 in bits [2:0] of HOST CONTROL2 register.
		
		  DLL is not required for clock <= 100MHz
		  Thus, make sure DLL it is disabled when not required
		
		  The DLL needs to be restored and CDCLP533 recalibrated
		  when the clock frequency is set back to 400MHz.
 Set the IO voltage regulator to default voltage level 
	
	  For eMMC don't turn off Vqmmc, Instead just configure it in LPM
	  and HPM modes by setting the corresponding load.
	 
	  Till eMMC is initialized (i.e. always_on == 0), just turn onoff
	  Vqmmc. Vqmmc gets turned off only if init fails and mmc_power_off
	  gets invoked. Once eMMC is initialized (i.e. always_on == 1),
	  Vqmmc should remain ON, So just set the load instead of turning it
	  offon.
  sdhci_msm_check_power_status API should be called when registers writes
  which can toggle sdhci IO bus ONOFF or change IO lines HIGHLOW happens.
  To what state the register writes will change the IO lines should be passed
  as the argument req_type. This API will check whether the IO line's state
  is already the expected state and will wait for power irq only if
  power irq is expected to be triggered based on the current IO line state
  and expected IO line state.
	
	  The power interrupt will not be generated for signal voltage
	  switches if SWITCHABLE_SIGNALING_VOLTAGE in MCI_GENERICS is not set.
	  Since sdhci-msm-v5, this bit has been removed and SW must consider
	  it as always set.
	
	  The IRQ for request type IO HighLOW will be generated when -
	  there is a state change in 1.8V enable bit (bit 3) of
	  SDHCI_HOST_CONTROL2 register. The reset state of that bit is 0
	  which indicates 3.3V IO voltage. So, when MMC core layer tries
	  to set it to 3.3V before card detection happens, the
	  IRQ doesn't get triggered as there is no state change in this bit.
	  The driver already handles this case by changing the IO voltage
	  level to high as part of controller power up sequence. Hence, check
	  for host->pwr to handle a case where IO voltage high request is
	  issued even before controller power up.
	
	  This is needed here to handle cases where register writes will
	  not change the current bus state or io level of the controller.
	  In this case, no power irq will be triggerred and we should
	  not wait.
	
	  There is a rare HW scenario where the first clear pulse could be
	  lost when actual reset and clearread of status register is
	  happening at a time. Hence, retry for at least 10 times to make
	  sure status register is cleared. Otherwise, this will result in
	  a spurious power IRQ resulting in system instability.
 Handle BUS ONOFF
 Handle IO LOWHIGH 
	
	  The driver has to acknowledge the interrupt, switch voltages and
	  report back if it succeded or not to this register. The voltage
	  switches are handled by the sdhci core, so just report success.
	
	  If we don't have info regarding the voltage levels supported by
	  regulators, don't change the IO PAD PWR SWITCH.
		
		  We should unset IO PAD PWR switch only if the register write
		  can set IO lines high and the regulator also switches to 3 V.
		  Else, we should keep the IO PAD PWR switch set.
		  This is applicable to certain targets where eMMC vccq supply
		  is only 1.8V. In such targets, even during REQ_IO_HIGH, the
		  IO PAD PWR switch must be kept set to reflect actual
		  regulator voltage. This way, during initialization of
		  controllers with only 1.8V, we will set the IO PAD bit
		  without waiting for a REQ_IO_LOW.
  __sdhci_msm_set_clock - sdhci_msm clock control.
  Description:
  MSM controller does not use internal divider and
  instead directly control the GCC clock as per
  HW recommendation.
	
	  MSM controller do not use clock divider.
	  Thus read SDHCI_CLOCK_CONTROL and only enable
	  clock with no divider value programmed.
 sdhci_msm_set_clock - Called with (host->lock) spinlock held. 
\
  Inline Crypto Engine (ICE) support                                        
 QCOM ICE registers 
 For now this driver only supports ICE version 3. 
 If fuses are blown, ICE might not work in the standard way. 
	
	  Enable low power mode sequence
	  [0]-0, [1]-0, [2]-0, [3]-E, [4]-0, [5]-0, [6]-0, [7]-0
 ICE Optimizations Enable Sequence 
 ICE HPG requires delay before writing 
  Wait until the ICE BIST (built-in self-test) has completed.
  This may be necessary before ICE can be used.
  Note that we don't really care whether the BIST passed or failed; we really
  just want to make sure that it isn't still running.  This is because (a) the
  BIST is a FIPS compliance thing that never fails in practice, (b) ICE is
  documented to reject crypto requests if the BIST fails, so we needn't do it
  in software too, and (c) properly testing storage encryption requires testing
  the full storage stack anyway, and not relying on hardware-level self-tests.
  Program a key into a QC ICE keyslot, or evict a keyslot.  QC ICE requires
  vendor-specific SCM calls for this; it doesn't support the standard way.
 Only AES-256-XTS has been tested so far. 
	
	  The SCM call byte-swaps the 32-bit words of the key.  So we have to
	  do the same, in order for the final key be correct.
 CONFIG_MMC_CRYPTO 
 !CONFIG_MMC_CRYPTO 
\
  MSM Command Queue Engine (CQE)                                            
	
	  When CQE is halted, the legacy SDHCI path operates only
	  on 16-byte descriptors in 64bit mode.
	
	  During CQE command transfers, command complete bit gets latched.
	  So sw should clear command complete interrupt status when CQE is
	  either halted or disabled. Otherwise unexpected SDCHI legacy
	  interrupt gets triggered when CQE is halteddisabled.
	
	  Update software timeout value if its value is less than hardware data
	  timeout value. Qcom SoC hardware data timeout value was calculated
	  using 4  MCLK  2^(count + 13). where MCLK = 1  host->clock.
	
	  When CQE is halted, SDHC operates only on 16byte ADMA descriptors.
	  So ensure ADMA table is allocated for 16byte descriptors.
 Disable cqe reset due to cqe enable signal 
	
	  SDHC expects 12byte ADMA descriptors till CQE is enabled.
	  So limit desc_sz to 12 so that the data commands that are sent
	  during card initialization (before CQE gets enabled) would
	  get executed without any issues.
  Platform specific register write functions. This is so that, if any
  register write needs to be followed up by platform specific actions,
  they can be added here. These functions can go to sleep when writes
  to certain registers are done.
  These functions are relying on sdhci_set_ios not using spinlock.
		
		  Since this register write may trigger a power irq, ensure
		  all previous register writes are complete by this point.
 This function may sleep
 This function may sleep
		
		  Set the PAD_PWR_SWITCH_EN bit so that the PAD_PWR_SWITCH
		  bit can be used as required later on.
	
	  Signal Voltage Switching is only applicable for Host Controllers
	  v3.00 and above.
 Set 1.8V Signal Enable in the Host Control2 register to 0 
 Enable 1.8V Signal Enable in the Host Control2 register 
 Wait for 5ms 
 regulator output should be stable within 5 ms 
	
	  Based on the compatible string, load the required msm host info from
	  the data associated with the version info.
 Setup SDCC bus voter clock. 
 Vote for max. clk rate for max. performance 
 Setup main peripheral bus clock 
 Setup SDC MMC clock 
 Check for optional interconnect paths 
 OPP table is optional 
 Vote for maximum clock rate for maximum performance 
	
	  xo clock is needed for FLL feature of cm_dll.
	  In case if xo clock is not mentioned in DT, warn and proceed.
 Reset the vendor spec register to power on reset state 
 Set HC_MODE_EN bit in HC_MODE register 
	
	  SDCC 5 controller with major version 1, minor version 0x34 and later
	  with HS 400 mode support will use CM DLL instead of CDC LP 533 DLL.
	
	  Support for some capabilities is not advertised by newer
	  controller versions and must be explicitly enabled.
	
	  Power on reset state may trigger power irq if previous status of
	  PWRCTL was either BUS_ON or IO_HIGH_V. So before enabling pwr irq
	  interrupt in GIC, any pending power irq interrupt should be
	  acknowledged. Otherwise power irq interrupt handler would be
	  fired prematurely.
	
	  Ensure that above writes are propogated before interrupt enablement
	  in GIC.
 Setup IRQ for handling powervoltage tasks with PMIC 
 Enable pwr irq interrupts 
 Set the timeout value to max possible 
 Drop the performance vote 
	
	  Whenever core-clock is gated dynamically, it's needed to
	  restore the SDR DLL settings when the clock is ungated.
 SPDX-License-Identifier: GPL-2.0-or-later
  davinci_mmc.c - TI DaVinci MMCSDSDIO driver
  Copyright (C) 2006 Texas Instruments.
        Original author: Purushotam Kumar
  Copyright (C) 2009 David Brownell
  Register Definitions
 Control Register                  
 Memory Clock Control Register     
 Status Register 0                 
 Status Register 1                 
 Interrupt Mask Register           
 Response Time-Out Register        
 Data Read Time-Out Register       
 Block Length Register             
 Number of Blocks Register         
 Number of Blocks Counter Register 
 Data Receive Register             
 Data Transmit Register            
 Command Register                  
 Argument Register                 
 Response Register 0 and 1         
 Response Register 0 and 1         
 Response Register 0 and 1         
 Response Register 0 and 1         
 Data Response Register            
 Command Index Register            
 FIFO Control Register             
 DAVINCI_MMCCTL definitions 
 DAVINCI_MMCCLK definitions 
 IRQ bit definitions, for DAVINCI_MMCST0 and DAVINCI_MMCIM 
 data done 
 busy done 
 command done 
 data read timeout 
 command response timeout 
 data write CRC error 
 data read CRC error 
 command response CRC error 
 data transmit ready (fifo empty) 
 data receive ready (data in fifo)
 DAT3 edge detect 
 transfer done 
 DAVINCI_MMCST1 definitions 
 DAVINCI_MMCCMD definitions 
 DAVINCI_MMCFIFOCTL definitions 
 0 = 128 bits, 1 = 256 bits 
 access width of 4 bytes    
 access width of 3 bytes    
 access width of 2 bytes    
 access width of 1 byte     
 DAVINCI_SDIOST0 definitions 
 DAVINCI_SDIOIEN definitions 
 DAVINCI_SDIOIST definitions 
 MMCSD Init clock in Hz in opendrain mode 
  One scatterlist dma "segment" is at most MAX_CCNT rw_threshold units,
  and we handle up to MAX_NR_SG segments.  MMC_BLOCK_BOUNCE kicks in only
  for drivers with max_segs == 1, making the segments bigger (64KB)
  than the page or two that's otherwise typical. nr_sg (passed from
  platform data) == 16 gives at least the same throughput boost, using
  EDMA transfer linkage instead of spending CPU time copying pages.
	 buffer is used during PIO of one scatterlist segment, and
	  is updated along with buffer_bytes_left.  bytes_left applies
	  to all N blocks of the PIO transfer.
 For PIO we walk scatterlists one segment at a time. 
 Version of the MMCSD controller 
 for ns in one cycle calculation 
 Number of sg segments 
 PIO only 
	 NOTE:  we never transfer more than rw_threshold bytes
	  tofrom the fifo here; there's no IO overlap.
	  This also assumes that access width( i.e. ACCWD) is 4 bytes
		 There's some spec confusion about when R1B is
		  allowed, but if the card doesn't issue a BUSY
		  then it's harmless for us to allow it.
 48 bits, CRC 
 136 bits, CRC 
 48 bits, no CRC 
 Set command index 
 Enable EDMA transfer triggers 
 Setting whether command involves data transfer or not 
 Setting whether data read or write 
 set Command timeout 
 Enable interrupt (calculate here, defer until FIFO is stuffed). 
	
	  Before non-DMA WRITE commands the controller needs priming:
	  FIFO should be populated with 32 bytes i.e. whatever is the FIFO size
----------------------------------------------------------------------
 DMA infrastructure 
 no individual DMA segment should need a partial FIFO 
----------------------------------------------------------------------
 Configure the FIFO 
	 For now we try to use DMA whenever we won't need partial FIFO
	  reads or writes, either for the whole transfer (as tested here)
	  or for any individual scatterlist segment (tested when we call
	  start_dma_transfer).
	 
	  While we could change that, unusual block sizes are rarely
	  used.  The occasional fallback to PIO should't hurt.
 zero this to ensure we take no PIO paths 
 Revert to CPU Copy 
	 Card may still be sending BUSY after a previous operation,
	  typically some kind of write.  If so, we can't proceed yet.
 Convert ns to clock cycles 
		 Ignoring the init clock value passed for fixing the inter
		  operability with different cards.
 Convert ns to clock cycles 
 Send clock cycles, poll completion 
 FIXME on power OFF, reset things ... 
		
		  SDIO Interrupt Detection work-around as suggested by
		  Davinci Errata (TMS320DM355 Silicon Revision 1.1 Errata
		  2.1.6): Signal SDIO interrupt only if it is enabled by core
 response type 2 
 response types 1, 1b, 3, 4, 5, 6 
 reset 
 enable 
 Disable the interrupt from mmcsd 
	 handle FIFO first when using PIO for data.
	  bytes_left will decrease to zero as IO progress and status will
	  read zero over iteration because this controller status
	  register(MMCST0) reports any status only once and it is cleared
	  by read. So, it is not unbouned loop even in the case of
	  non-dma.
		
		  If interrupts fire during the following loop, they will be
		  handled by the handler, but the PIC will still buffer these.
		  As a result, the handler will be called again to serve these
		  needlessly. In order to avoid these spurious interrupts,
		  keep interrupts masked during the loop.
		
		  If an interrupt is pending, it is assumed it will fire when
		  it is unmasked. This assumption is also taken when the MMCIM
		  is first set. Otherwise, writing to MMCIM after reading the
		  status is race-prone.
 All blocks sentreceived, and CRC checks passed 
				 if datasize < rw_threshold
				  no RX ints are generated
 Read data timeout 
 Data CRC error 
		 NOTE:  this controller uses CRCWR to report both CRC
		  errors and timeouts (on writes).  MMCDRSP values are
		  only weakly documented, but 0x9f was clearly a timeout
		  case and the two three-bit patterns in various SD specs
		  (101, 010) aren't part of it ...
 Command timeout 
 Command CRC error 
 End of command phase 
----------------------------------------------------------------------
 Register a cd gpio, if there is not one, enable polling 
 Important 
	 With no iommu coalescing pages, each phys_seg is a hw_seg.
	  Each hw_seg uses one EDMA parameter RAM slot, always one
	  channel and then usually some linked slots.
 EDMA limit per hw segment (one or two MBytes) 
 MMCSD controller limits for multiblock requests 
 BLEN is 12 bits 
 NBLK is 16 bits 
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2019 Genesys Logic, Inc.
  Authors: Ben Chuang <ben.chuang@genesyslogic.com.tw>
  Version: v0.9.0 (2019-08-08)
  Genesys Logic extra registers 
 Genesys Logic chipset 
 reset the tuning flow after reinit and before starting tuning 
 disable tuned clk 
 enable tuning parameters control 
 write tuning parameters 
 disable tuning parameters control 
 clear tuned clk 
 Success! 
 wait for pll stable 
 set pll to 205MHz and enable ssc 
 set ASPM L1 entry delay to 7.9us 
 wait for pll stable 
 set pll to 205MHz and enable ssc 
 enable short circuit protection 
 set ASPM L1 entry delay to 7.9us 
	
	  According to Section 3.6.1 signal voltage switch procedure in
	  SD Host Controller Simplified Spec. 4.20, steps 6~8 are as
	  follows:
	  (6) Set 1.8V Signal Enable in the Host Control 2 register.
	  (7) Wait 5ms. 1.8V voltage regulator shall be stable within this
	      period.
	  (8) If 1.8V Signal Enable is cleared by Host Controller, go to
	      step (12).
	 
	  Wait 5ms after set 1.8V signal enable in Host Control 2 register
	  to ensure 1.8V signal enable bit is set by GL9750GL9755.
	 
	  ...however, the controller in the NUC10i3FNK4 (a 9755) requires
	  slightly longer than 5ms before the control register reports that
	  1.8V is ready, and far longer still before the card will actually
	  work reliably.
 set ASPM L1 entry delay to 21us 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) STMicroelectronics 2018 - All Rights Reserved
  Author: Ludovic.barre@st.com for STMicroelectronics.
	
	  idma has constraints on idmabase & idmasize for each element
	  excepted the last element which has no constraint on idmasize
 Check if job is already prepared. 
 notice the end of link list 
	
	  cclk = mclk  (2  clkdiv)
	  clkdiv 0 => bypass
	  in ddr mode bypass is not possible
		
		  while power-on phase the clock can't be define to 0,
		  Only power-off and power-cyc deactivate the clock.
		  if desired clock is 0, set max divider
 Set actual clock for debug 
	
	  SDMMC_FBCK is selected when an external Delay Block is needed
	  with SDR104.
 Output clock = Input clock 
 adds OF options 
 Only a reset could power-off sdmmc 
		
		  Set the SDMMC in Power-cycle state.
		  This will make that the SDMMC_D[7:0], SDMMC_CMD and SDMMC_CK
		  are driven low, to prevent the Card from being supplied
		  through the signal lines.
		
		  After power-off (reset): the irq mask defined in probe
		  functionis lost
		  ault irq mask (probe) must be activated
 preserves voltage switch bits 
		
		  After a power-cycle state, we must set the SDMMC in
		  Power-off. The SDMMC_D[7:0], SDMMC_CMD and SDMMC_CK are
		  driven high. Then we can set the SDMMC to Power-on state
 complete if there is an error or busy_d0end 
	
	  On response the busy signaling is reflected in the BUSYD0 flag.
	  if busy_d0 is in-progress we must activate busyd0end interrupt
	  to wait this completion. Else this request has no busy step.
 clear the voltage switch completion flag 
 enable Voltage switch procedure 
 wait voltage switch completion while 10ms 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2011, The Linux Foundation. All rights reserved.
 Registers 
 other definitions 
 Read operation: configure DML for producer operation 
 Set producer CRCI-x and disable consumer CRCI 
 Set the Producer BAM block size 
 Set Producer BAM Transaction size 
 Set Producer Transaction End bit 
 Trigger producer 
 Write operation: configure DML for consumer operation 
 Set consumer CRCI-x and disable producer CRCI
 Clear Producer Transaction End bit 
 Trigger consumer 
 make sure the dml is configured before dma is triggered 
 Initialize the dml hardware connected to SD Card controller 
 Reset the DML block 
 Disable the producer and consumer CRCI 
	
	  Disable the bypass mode. Bypass mode will only be used
	  if data transfer is to happen in PIO mode and don't
	  want the BAM interface to connect with SDCC-DML.
	
	  Disable direct mode as we don't DML to MASTER the AHB bus.
	  BAM connected with DML should MASTER the AHB bus.
	
	  Disable infinite mode transfer as we won't be doing any
	  infinite size data transfers. All data transfer will be
	  of finite data size.
	
	  Initialize the logical BAM pipe size for producer
	  and consumer.
 Initialize Producerconsumer pipe id 
 Make sure dml initialization is finished 
  Driver for MMC and SSD cards for Cavium ThunderX SOCs.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file "COPYING" in the main directory of this archive
  for more details.
  Copyright (C) 2016 Cavium Inc.
 register interrupts 
 On ThunderX these are identical 
	
	  Clear out any pending interrupts that may be left over from
	  bootloader. Writing 1 to the bits clears them.
 Clear DMA FIFO 
		
		  mmc_of_parse and devm require one device per slot.
		  Create a dummy device per slot and set the node pointer to
		  the slot. The easiest way to get this is using
		  of_platform_device_create.
 end of table 
  Support of SDHCI platform devices for Microchip PIC32.
  Copyright (C) 2015 Microchip
  Andrei Pistirica, Paul Thacker
  Inspired by sdhci-pltfm.c
  This file is licensed under the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
 CD select and test bits must be set for errata workaround. 
	
	  The SDHCI_WRITE_PROTECT bit is unstable on current hardware so we
	  can't depend on its value in any way.
 select first clock 
 select first interrupt 
 Check card slot connected on shared bus. 
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriversmmchostpxa.c - PXA MMCI driver
   Copyright (C) 2003 Russell King, All Rights Reserved.
   This hardware is really sick:
    - No way to clear interrupts.
    - Have to turn off the clock whenever we touch the device.
    - Doesn't tell you how many data blocks were transferred.
   Yuck!
 	1 and 3 byte data transfers not supported
 	max block length up to 1023
 fall-back to platform data 
	
	  workaround for erratum #91:
	  only start DMA now if we are doing a read,
	  otherwise we wait until CMDRESP has finished
	  before starting DMA.
 r1, r1b, r6, r7 
	
	  Did I mention this is Sick.  We always need to
	  discard the upper 8 bits of the first 16-bit word.
		
		  workaround for erratum #42:
		  Intel PXA27x Family Processor Specification Update Rev 001
		  A bogus CRC error can appear if the msb of a 136 bit
		  response is a one.
		
		  workaround for erratum #91, if doing write
		  enable DMA late
	
	  There appears to be a hardware design bug here.  There seems to
	  be no way to find out how much data was transferred to the card.
	  This means that if there was an error on any block, we mark all
	  data blocks as being in error.
	
	  Board doesn't support read only detection; let the mmc core
	  decide what to do.
 to support 26MHz 
 to handle (19.5MHz, 26MHz) 
			
			  clk might result in a lower divisor than we
			  desire.  check for that condition and adjust
			  as appropriate.
		
		  we write clkrt on the next command
			
			  The .set_ios() function in the mmc_host_ops
			  struct return void, and failing to set the
			  power should be rare so we print an error and
			  return here.
 pxa-mmc specific 
	
	  We can do SG-DMA, but we don't because we never know how much
	  data we successfully wrote to the card.
	
	  Our hardware DMA can handle a maximum of one page per SG entry.
	
	  Block length register is only 10 bits before PXA27x.
	
	  Block count register is 16 bits.
	
	  Calculate minimum clock rate, rounding up.
	
	  Ensure that the host controller is shut down, and setup
	  with our defaults.
 FIXME: should we pass detection delay to debounce? 
 SPDX-License-Identifier: GPL-2.0-only
  Support for SDHCI on STMicroelectronics SoCs
  Copyright (C) 2014 STMicroelectronics Ltd
  Author: Giuseppe Cavallaro <peppe.cavallaro@st.com>
  Contributors: Peter Griffin <peter.griffin@linaro.org>
  Based on sdhci-cns3xxx.c
 MMCSS glue logic to setup the HC on some ST SoCs (e.g. STiH407 family) 
 IO configuration for Arasan IP 
 TOP config registers to manage static and dynamic delay 
 MMC delay control register 
 register to provide the phase-shift value for DLL 
 phase shift delay on the tx clk 2.188ns 
  For clock speeds greater than 90MHz, we need to check that the
  DLL procedure has finished before switching to ultra-speed modes.
  st_mmcss_cconfig: configure the Arasan HC inside the flashSS.
  @np: dt device node.
  @host: sdhci host
  Description: this function is to configure the Arasan host controller.
  On some ST SoCs, i.e. STiH407 family, the MMC devices inside a dedicated
  flashSS sub-system which needs to be configured to be compliant to eMMC 4.5
  or eMMC4.3.  This has to be done before registering the sdhci host.
	 Set clock frequency, default to 50MHz if max-frequency is not
 CARD _D ET_CTRL 
 use 1.8V 
 Use tuning 
 Max timeout for retuning 
		
		  SDR104 implies the HC can support HS200 mode, so
		  it's mandatory to use 1.8V
 Max timeout for retuning 
 Checks if the DLL procedure is finished 
 Select Bus Speed Mode for host 
	
	  Set V18_EN -- UHS modes do not work without this.
	  does not change signaling voltage
 Support 3.3V and 1.8V 
 ICN clock isn't compulsory, but use it if it's provided. 
 Configure the FlashSS Top registers for setting eMMC TXRX delay 
 Configure the Arasan HC inside the flashSS 
 SPDX-License-Identifier: GPL-2.0
  DMA support use of SYS DMAC with SDHI SDSDIO controller
  Copyright (C) 2016-19 Renesas Electronics Corporation
  Copyright (C) 2016-19 Sang Engineering, Wolfram Sang
  Copyright (C) 2017 Horms Solutions, Simon Horman
  Copyright (C) 2010-2011 Guennadi Liakhovetski
 Definitions for sampling clocks 
 The only sg element can be unaligned, use our bounce buffer then 
 DMA failed, fall back to PIO 
 Free the Tx channel too 
 The only sg element can be unaligned, use our bounce buffer then 
 DMA failed, fall back to PIO 
 Free the Rx channel too 
 We can only either use DMA for both Tx and Rx or not use it at all 
 SPDX-License-Identifier: GPL-2.0
  MMCIF eMMC driver.
  Copyright (C) 2010 Renesas Solutions Corp.
  Yusuke Goda <yusuke.goda.sx@renesas.com>
  The MMCIF driver is now processing MMC requests asynchronously, according
  to the Linux MMC API requirement.
  The MMCIF driver processes MMC requests in up to 3 stages: command, optional
  data, and optional stop. To achieve asynchronous processing each of these
  stages is split into two halves: a top and a bottom half. The top half
  initialises the hardware, installs a timeout handler to handle completion
  timeouts, and returns. In case of the command stage this immediately returns
  control to the caller, leaving all further processing to run asynchronously.
  All further request processing is performed by the bottom halves.
  The bottom half further consists of a "hard" IRQ handler, an IRQ handler
  thread, a DMA completion callback, if DMA is used, a timeout work, and
  request- and stage-specific handler methods.
  Each bottom half run begins with either a hardware interrupt, a DMA callback
  invocation, or a timeout work run. In case of an error or a successful
  processing completion, the MMC core is informed and the request processing is
  finished. In case processing has to continue, i.e., if data has to be read
  from or written to the card, or if a stop command has to be sent, the next
  top half is called, which performs the necessary hardware handling and
  reschedules the timeout work. This returns the driver state machine into the
  bottom half waiting state.
 CE_CMD_SET 
 R1R1bR3R4R5 
 R2 
 R1b 
 1: on data, 0: no data 
 1: write, 0: read 
 1: multi block trans, 0: single 
 1: CMD12 auto issue 
 index check 
 check bits check 
 no check 
 CRC7 check
 check bits check
 internal CRC7 check
 0: CRC16 check
 1: not receive CRC status 
 1: tran mission bit "Low" 
 1: opendrain 
 Dual Data Rate 
 1bit 
 4bit 
 8bit 
 CE_CMD_CTRL 
 CE_BLOCK_SET 
 CE_INT 
 CE_INT_MASK 
 CE_HOST_STS1 
 CE_HOST_STS2 
 52 MHz 
 20 MHz 
 400 kHz 
  difference for each SoC
 protect sh_mmcif_host::state 
 Command Completion Signal support 
 see CE_CLK_CTRL::CLKDIV 
 DMA support 
 DMA failed, fall back to PIO 
 Free the Tx channel too 
 DMA failed, fall back to PIO 
 Free the Rx channel too 
 We can only either use DMA for both Tx and Rx or not use it at all 
 Descriptors are freed automatically 
			
			  clk = parent_freq  div
			  -> parent_freq = clk x div
 byte swap on 
 data->sg->length must be a multiple of host->blocksize? 
 buf read enable 
 buffer read end 
 buf write enable 
 buffer write end 
 Response Type check 
 WDAT  DATW 
			
			  MMC core will only set this timing, if the host
			  advertises the MMC_CAP_1_8V_DDRMMC_CAP_1_2V_DDR
			  capability. MMCIF implementations with this
			  capability, e.g. sh73a0, will have to set it
			  in their platform data.
 DWEN 
 CMLTECMD12EN 
 RIDXC[1:0] check bits 
 RCRC7C[1:0] check bits 
 RCRC7C[1:0] internal CRC7 
 set arg 
 set cmd 
		
		  This driver assumes this SoC is R-Car Gen2 or later
	
	  Completion can be signalled from DMA callback and error, so, have to
	  reset here, before setting .dma_active
 Running in the IRQ thread, can sleep 
 Woken up by an error IRQ: abort DMA 
 Abort DMA 
	
	  All handlers return true, if processing continues, and false, if the
	  request has to be completed - successfully or not
 We're too late, the timeout has already kicked in 
 Wait for data? 
 Wait for more data? 
 Wait for data end? 
 Wait data to write? 
 Wait for data end? 
 Wait for more data 
 Don't run after mmc_remove_host() 
	
	  Handle races with cancel_delayed_work(), unless
	  cancel_delayed_work_sync() is used
	
	  FIXME: cancel_delayed_work(_sync)() and free_irq() race with the
	  mmc_remove_host() call above. But swapping order doesn't help either
	  (a query on the linux-mmc mailing list didn't bring any replies).
 SPDX-License-Identifier: GPL-2.0-only
  Driver for Marvell Xenon SDHC as a platform device
  Copyright (C) 2016 Marvell, All Rights Reserved.
  Author:	Hu Ziji <huziji@marvell.com>
  Date:	2016-8-24
  Inspired by Jisheng Zhang <jszhang@marvell.com>
  Special thanks to Video BG4 project team.
 Wait max 20 ms 
 Set SDCLK-off-while-idle 
 Get the bit shift basing on the SDHC index 
 EnableDisable the Auto Clock Gating function 
 Enable this SDHC 
	
	  Force to clear BUS_TEST to
	  skip bus_test_pre and bus_test_post
 Disable this SDHC 
 Enable Parallel Transfer Mode 
 Mask command conflict error 
 Disable the Re-Tuning Request functionality 
 Disable the Re-tuning Interrupt 
 Force to use Tuning Mode 1 
 Set re-tuning period 
  Operations inside struct sdhci_ops
 Recover the Register Setting cleared during SOFTWARE_RESET_ALL 
 Only SOFTWARE RESET ALL will clear the register setting 
 Disable tuning request and auto-retuning again 
	
	  The ACG should be turned off at the early init time, in order
	  to solve a possible issues with the 1.8V regulator stabilization.
	  The feature is enabled in later stage.
  Xenon defines different values for HS200 and HS400
  in Host_Control_2
 Select Bus Speed Mode for host 
 Wait for 5ms after set 1.8V signal enable bit 
	
	  For some reason the controller's Host Control2 register reports
	  the bit representing 1.8V signaling as 0 when read after it was
	  written as 1. Subsequent read reports 1.
	 
	  Since this may cause some issues, do an empty read of the Host
	  Control2 register here to circumvent this.
  Xenon Specific Operations in mmc_host_ops
	
	  HS400HS200eMMC HS doesn't have Preset Value register.
	  However, sdhci_set_ios will read HS400HS200 Preset register.
	  Disable Preset Value register for HS400HS200.
	  eMMC HS with preset_enabled set will trigger a bug in
	  get_preset_value().
	
	  Before SDSDIO set signal voltage, SD bus clock should be
	  disabled. However, sdhci_set_clock will also disable the Internal
	  clock in mmc_set_signal_voltage().
	  If Internal clock is disabled, the 3.3V1.8V bit can not be updated.
	  Thus here manually enable internal clock.
	 
	  After switch completes, it is unnecessary to disable internal clock,
	  since keeping internal clock active obeys SD spec.
	
	  If Vqmmc is fixed on platform, vqmmc regulator should be unavailable.
	  Thus SDHCI_CTRL_VDD_180 bit might not work then.
	  Skip the standard voltage switch to avoid any issue.
  Update card type.
  priv->init_card_type will be used in PHY timing adjustment.
 Update card type
	
	  Currently force Xenon driver back to support mode 1 only,
	  even though Xenon might claim to support mode 2 or mode 3.
	  It requires more time to test mode 2mode 3 on more platforms.
		
		  Set SDIO Card Inserted indication
		  to enable detecting SDIO async irq.
 Clear SDIO Card Inserted indication 
  Parse Xenon specific DT properties:
  sdhc-id: the index of current SDHC.
 	    Refer to XENON_SYS_CFG_INFO register
  tun-count: the interval between re-tuning
 Disable HS200 on Armada AP806 
 Enable SDHC 
 Enable ACG 
 Enable Parallel Transfer Mode 
 Disable SDCLK-Off-While-Idle before card init 
 disable SDHC 
	
	  Link Xenon specific mmc_host_ops function,
	  to replace standard ones in sdhci_ops.
 Xenon specific parameters parse 
	
	  Need to update the priv->clock here, or when runtime resume
	  back, phy don't aware the clock change and won't adjust phy
	  which will cause cmd err
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0-or-later
  Actions Semi Owl SoCs SDMMC driver
  Copyright (c) 2014 Actions Semi Inc.
  Copyright (c) 2019 Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
  TODO: SDIO support
  SDC registers
 SD_EN Bits 
 SD_CTL Bits 
 SD_STATE Bits 
 Should never be NULL 
 Finally finish request 
 Keep current WDELAY and RDELAY 
 Start to send corresponding command type 
 Set LBE to send clk at the end of last read block 
 Start transfer 
 Set RDELAY and WDELAY based on the clock 
 DDR50 mode has special delay chain 
 Enable transfer end IRQ 
 Send init clk 
 Reset the SDC controller to clear all previous states 
 Enable DDR mode if requested 
 It is enough to change the pad ctrl bit for voltage switch 
 100kHz ~ 52MHz 
 sentinel  }
  MOXA ART MMC host driver.
  Copyright (C) 2014 Jonas Jensen
  Jonas Jensen <jonas.jensen@gmail.com>
  Based on code from
  Moxa Technologies Co., Ltd. <www.moxa.com>
  This file is licensed under the terms of the GNU General Public
  License version 2.  This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
 REG_COMMAND 
 REG_RESPONSE_COMMAND 
 REG_DATA_CONTROL 
 REG_DATA_LENGTH 
 REG_STATUS 
 1-10 below can be sent to either registers, interrupt or clear. 
 REG_POWER_CONTROL 
 REG_CLOCK_CONTROL 
 REG_BUS_WIDTH 
 SCR data must be read in big endian. 
 PIO transfers start from interrupt. 
 Support 2.0v - 3.6v power. 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2016 Socionext Inc.
    Author: Masahiro Yamada <yamada.masahiro@socionext.com>
 HRS - Host Register Set (specific to Cadence) 
 PHY access port 
 eMMC control 
 SRS - Slot Register Set (SDHCI-compatible) 
 PHY 
  The tuned val register is 6 bit-wide, but not the whole of the range is
  available.  The range 0-42 seems to be available (then 43 wraps around to 0)
  but I am not quite sure if it is official.  Use only 0 to 39 for safety.
	
	  Cadence's spec says the Timeout Clock Frequency is the same as the
	  Base Clock Frequency.
 The speed mode for eMMC is selected by HRS06 register 
	
	  Workaround for IP errata:
	  The IP6116 SDeMMC PHY design has a timing issue on receive data
	  path. Send tune request twice.
  In SD mode, software must not use the hardware tuning and instead perform
  an almost identical procedure to eMMC.
	
	  Do not execute tuning for UHS_SDR50 or UHS_DDR50.
	  The delay is set by probe, based on the DT properties.
 bad 
 good 
 For SD, fall back to the default handler 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
 Copyright (C) 2017-2018 Socionext Inc.
   Author: Masahiro Yamada <yamada.masahiro@socionext.com>
 auto SDCLK stop
 3.3V signal
 1.8V signal
 1: inc, 0: fixed
 start DMA (auto cleared)
  IP is extended to support various features: built-in DMA engine,
  11024 divisor, etc.
 RX channel of the built-in DMA controller is broken (Pro5) 
 external DMA engine 
		
		  When the external DMA engine is enabled, strangely enough,
		  the DATAEND flag can be asserted even if the DMA engine has
		  not been kicked yet.  Enable the TMIO_STAT_DATAEND irq only
		  after we make sure the DMA engine finishes the transfer,
		  hence, in this callback.
 just use PIO even for -EPROBE_DEFER 
 this driver uses a single channel for both RX an TX 
	
	  Due to a hardware bug, Pro5 cannot use DMA for RX.
	  We can still use DMA for TX, but PIO for RX.
 Each value is set to zero to assume "disabling" each DMA 
 If max-frequency property is set, use it. 
	
	  1512 is the finest divisor in the original IP.  Newer versions
	  also supports 11024 divisor. (UniPhier-specific extension)
 For eMMC, minimum is 1us but give it 9us for good measure 
 For eMMC, minimum is 200us but give it 300us for good measure 
 stop the clock before changing its rate to avoid a glitch signal 
	
	  In the original IP, bit[7:0] represents the divisor.
	  bit7 set: 1512, ... bit0 set:14, all bits clear: 12
	 
	  The IP does not define a way to achieve 11.  For UniPhier variants,
	  bit10 is used for 11.  Newer versions of UniPhier variants use
	  bit16 for 11024.
	
	  Connected to 32bit AXI.
	  This register holds settings for SoC-specific internal bus
	  connection.  What is worse, the register spec was changed,
	  breaking the backward compatibility.  Write an appropriate
	  value depending on a flag associated with a compatible string.
	
	  If supported, the controller can automatically
	  enabledisable the clock line to the card.
 old version has one more reset 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for sunxi SDMMC host controllers
  (C) Copyright 2007-2011 Reuuimlla Technology Co., Ltd.
  (C) Copyright 2007-2011 Aaron Maoye <leafy.myeh@reuuimllatech.com>
  (C) Copyright 2013-2014 O2S GmbH <www.o2s.ch>
  (C) Copyright 2013-2014 David Lanzendörfer <david.lanzendoerfer@o2s.ch>
  (C) Copyright 2013-2014 Hans de Goede <hdegoede@redhat.com>
  (C) Copyright 2017 Sootech SA
 register offset definitions 
 SMC Global Control Register 
 SMC Clock Control Register 
 SMC Time Out Register 
 SMC Bus Width Register 
 SMC Block Size Register 
 SMC Byte Count Register 
 SMC Command Register 
 SMC Argument Register 
 SMC Response Register 0 
 SMC Response Register 1 
 SMC Response Register 2 
 SMC Response Register 3 
 SMC Interrupt Mask Register 
 SMC Masked Interrupt Status Register 
 SMC Raw Interrupt Status Register 
 SMC Status Register 
 SMC FIFO Threshold Watermark Registe 
 SMC Function Select Register 
 SMC CIU Byte Count Register 
 SMC BIU Byte Count Register 
 SMC Debug Enable Register 
 SMC Card Hardware Reset for Register 
 SMC IDMAC Control Register 
 SMC IDMAC Descriptor List Base Addre 
 SMC IDMAC Status Register 
 SMC IDMAC Interrupt Enable Register 
 New registers introduced in A64 
 SMC Auto Command 12 Register 
 SMC New Timing Set Register 
 Drive Delay Control Register 
 SMC sample delay control 
 SMC data strobe delay control 
 global control register bits 
 clock control bits 
 bus width 
 smc command bits 
 interrupt bits 
 status 
 Function select 
 IDMA controller bus mod bit field 
 IDMA status bit field 
 If the idma-des-size-bits of property is ie 13, bufsize bits are:
  Bits  0-12: buf1 size
  Bits 13-25: buf2 size
  Bits 26-31: not used
 Since we only ever set buf1 size, we can simply store it directly.
 disable interrupt on completion 
 last descriptor 
 first descriptor 
 chain mode 
 end of ring 
 card error summary 
 1-idma owns it, 0-host owns it 
 in seconds, 3s is enough
 does the IP block support autocalibration? 
 Does DATA0 needs to be masked while the clock is updated 
	
	  hardware only supports new timing mode, either due to lack of
	  a mode switch in the clock controller, or the mmc controller
	  is permanently configured in the new timing mode, without the
	  NTSR mode switch.
 clock hardware can switch between old and new timing modes 
 IO mapping base 
 clock management 
 irq 
 dma 
 vqmmc 
 timings 
	
	  Burst 8 transfers, RX trigger level: 7, TX trigger level: 8
	 
	  TODO: sun9i has a larger FIFO and supports higher trigger values
 Maximum timeout value 
 Unmask SDIO interrupt if needed 
 Clear all pending interrupts 
 Debug register? undocumented 
 Enable CEATA support 
 Set DMA descriptor list base address 
 Undocumented, but found in Allwinner code 
 0 == max_len 
	
	  Avoid the io-store starting the idmac hitting io-mem before the
	  descriptors hit the main-mem.
 For some cmds timeout is normal with sdmmc cards 
 Called in interrupt context! 
 Wait for COMMAND_DONE on RESPONSE_TIMEOUT before finalize 
 Don't wait for dma on error 
	
	  We will never have more than one outstanding request,
	  and we do not complete the request until after
	  we've cleared host->manual_stop_mrq so we do not need to
	  spin lock this function.
	  Additionally we have wait states within this function
	  so having it in a lock is a very bad idea.
 clear irq status bits set by the command 
	
	  FIXME:
	  This is not clear how the calibration is supposed to work
	  yet. The best rate have been obtained by simply setting the
	  delay to 0, as Allwinner does in its BSP.
	 
	  The only mode that doesn't have such a delay is HS400, that
	  is in itself a TODO.
 clk controller delays not used under new timings mode 
 some old controllers don't support delays 
 determine delays 
 Our clock is gated now 
	
	  Under the old timing mode, 8 bit DDR requires the module
	  clock to be double the card clock. Under the new timing
	  mode, all DDR modes require a doubled module clock.
	 
	  We currently only support the standard MMC DDR52 mode.
	  This block should be updated once support for other DDR
	  modes is added.
 setting clock rate 
 set internal divider 
 update card clock rate to account for internal divider 
	
	  Configure the controller to use the new timing mode if needed.
	  On controllers that only support the new timing mode, such as
	  the eMMC controller on the A64, this register does not exist,
	  and any writes to it are ignored.
 Don't touch the delay bits 
 sunxi_mmc_clk_set_phase expects the actual card clock rate 
	
	  FIXME:
	 
	  In HS400 we'll also need to calibrate the data strobe
	  signal. This should only happen on the MMC2 controller (at
	  least on the A64).
 And we just enabled our clock back 
 set ddr mode 
 Android code had a usleep_range(50000, 55000); here 
 vqmmc regulator is available 
 no vqmmc regulator, assume fixed regulator at 33.3V 
 Check for set_ios errors (should never happen) 
 Value from A83T "new timing mode". Works but might not be right. 
 sentinel  }
	
	  Sometimes the controller asserts the irq on boot for some reason,
	  make sure the controller is in a sane state before enabling irqs.
		
		  Supports both old and new timing modes.
		  Try setting the clk to new timing mode.
 And check the result 
			
			  For whatever reason we were not able to get
			  the current active mode. Default to old mode.
 Supports new timing mode only 
 400kHz ~ 52MHz 
	
	  Some H5 devices do not have signal traces precise enough to
	  use HS DDR mode for their eMMC chips.
	 
	  We still enable HS DDR modes for all the other controller
	  variants that support them.
	
	  If we don't support delay chains in the SoC, we can't use any
	  of the higher speed modes. Mask them out in case the device
	  tree specifies the properties for them, which gets added to
	  the caps by mmc_of_parse() above.
 TODO: This driver doesn't support HS400 mode yet 
	
	  When clocks are off, it's possible receiving
	  fake interrupts, which will stall the system.
	  Disabling the irq  will prevent this.
 SPDX-License-Identifier: GPL-2.0-or-later
   linuxdriversmmchostwbsd.c - Winbond W83L51xD SDMMC driver
   Copyright (C) 2004-2007 Pierre Ossman, All Rights Reserved.
  Warning!
  Changes to the FIFO system should be done with extreme care since
  the hardware is full of bugs related to the FIFO. Known issues are:
  - FIFO size field in FSR is always zero.
  - FIFO interrupts tend not to work as they should. Interrupts are
    triggered only for fullempty events, not for threshold values.
  - On APIC systems the FIFO empty interrupt is sometimes lost.
  Device resources
 CONFIG_PNP 
  Basic functions
  Common routines
	
	  Reset chip (SDMMC part) and fifo.
	
	  Set DAT3 to input
	
	  Read back default clock.
	
	  Power down port.
	
	  Set maximum timeout.
	
	  Test for card presence
	
	  Enable interesting interrupts.
	
	  Clear interrupts.
	
	  Soft reset of chip (SDMMC part).
		
		  Release ISA DMA controller.
		
		  Disable DMA on host.
	
	  MMC layer might call back into the driver so first unlock.
  Scattergather functions
	
	  Get info. about SG list from data structure.
	
	  Skip to next SG entry.
	
	  Any entries left?
  Command handling
	
	  Correct response type?
	
	  Correct response type?
	
	  Clear accumulated ISR. The interrupt routine
	  will fill this one with events that occur during
	  transfer.
	
	  Send the command (CRC calculated by host).
	
	  Wait for the request to complete.
	
	  Do we expect a reply?
		
		  Read back status.
 Card removed? 
 Timeout? 
 CRC? 
 All ok 
  Data functions
	
	  Handle excessive data.
	
	  Drain the fifo. This has a tendency to loop longer
	  than the FIFO length (usually one block).
		
		  The size field in the FSR is broken so we have to
		  do some guessing.
			
			  End of scatter list entry?
				
				  Get next entry. Check if last.
	
	  This is a very dirty hack to solve a
	  hardware problem. The chip doesn't trigger
	  FIFO threshold interrupts properly.
	
	  Check that we aren't being called after the
	  entire buffer has been transferred.
	
	  Fill the fifo. This has a tendency to loop longer
	  than the FIFO length (usually one block).
		
		  The size field in the FSR is broken so we have to
		  do some guessing.
			
			  End of scatter list entry?
				
				  Get next entry. Check if last.
	
	  The controller stops sending interrupts for
	  'FIFO empty' under certain conditions. So we
	  need to be a bit more pro-active.
	
	  Calculate size.
	
	  Check timeout values for overflow.
	  (Yes, some cards cause this value to overflow).
	
	  Inform the chip of how large blocks will be
	  sent. It needs this to determine when to
	  calculate CRC.
	 
	  Space for CRC must be included in the size.
	  Two bytes are needed for each data line.
	
	  Clear the FIFO. This is needed even for DMA
	  transfers since the chip still uses the FIFO
	  internally.
	
	  DMA transfer?
		
		  The buffer for DMA is only 64 kB.
		
		  Transfer data from the SG list to
		  the DMA buffer.
		
		  Initialise the ISA DMA controller.
		
		  Enable DMA on the host.
		
		  This flag is used to keep printk
		  output to a minimum.
		
		  Initialise the SG list.
		
		  Turn off DMA.
		
		  Set up FIFO threshold levels (and fill
		  buffer if doing a write).
	
	  Send a stop command if needed.
	
	  Wait for the controller to leave data
	  transfer state.
	
	  DMA transfer?
		
		  Disable DMA on the host.
		
		  Turn of ISA DMA controller.
		
		  Any leftover data?
			
			  Transfer data from DMA buffer to
			  SG list.
\
  MMC layer callbacks                                                       
	
	  Disable tasklets to avoid a deadlock.
	
	  Check that there is actually a card in the slot.
		
		  The hardware is so delightfully stupid that it has a list
		  of "data" commands. If a command isn't on this list, it'll
		  just go back to the idle state and won't send any data
		  interrupts.
		 ACMDs. We don't keep track of state, so we just treat them
	
	  Does the request include data?
	
	  If this is a data transfer the request
	  will be finished after the data has
	  transferred.
		
		  Dirty fix for hardware bug.
	
	  Reset the chip on each power off.
	  Should clear out any weird states.
	
	  Only write to the clock register when
	  there is an actual change.
	
	  Power up card.
	
	  MMC cards need to have pin 1 high during init.
	  It wreaks havoc with the card detection though so
	  that needs to be disabled.
			
			  We cannot resume card detection immediately
			  because of capacitance and delays in the chip.
	
	  Store bus width for later. Will be used when
	  setting up the data transfer.
\
  Interrupt handling                                                        
  Helper function to reset detection ignore
	
	  Card status might have changed during the
	  blackout.
  Tasklets
	
	  Unlock first since we might get a call back.
	
	  Done?
  Interrupt handling
	
	  Was it actually our hardware that caused the interrupt?
	
	  Schedule tasklets as needed.
\
  Device initialisation and shutdown                                        
  Allocatefree MMC structure.
	
	  Allocate MMC structure.
	
	  Set host parameters.
	
	  Set up timers
	
	  Maximum number of segments. Worst case is one sector per segment
	  so this will be 64kB512.
	
	  Maximum request size. Also limited by 64KiB buffer.
	
	  Maximum segment size. Could be one segment with the maximum number
	  of bytes.
	
	  Maximum block size. We have 12 bits (= 4095) but have to subtract
	  space for CRC. So the maximum is 4095 - 42 = 4087.
	
	  Maximum block count. There is no real limit so the maximum
	  request size will be the only restriction.
  Scan for known chip id:s
	
	  Iterate through all ports, all codes to
	  find hardware that is in our known list.
  Allocatefree io port ranges
  Allocatefree DMA port and buffer
	
	  We need to allocate a special buffer in
	  order for ISA to be able to DMA to it.
	
	  Translate the address to a physical address.
	
	  ISA DMA must be aligned on a 64k basis.
	
	  ISA cannot access memory above 16 MB.
	
	  If we've gotten here then there is some kind of alignment bug
	
	  host->dma_addr is valid here iff host->dma_buffer is not NULL.
  Allocatefree IRQ.
	
	  Set up tasklets. Must be done before requesting interrupt.
	
	  Allocate interrupt.
  Allocate all resources for the host.
	
	  Allocate IO ports.
	
	  Allocate interrupt.
	
	  Allocate DMA.
  Release all resources for the host.
  Configure the resources the chip should use.
	
	  Reset the chip.
	
	  Select SDMMC function.
	
	  Set up card detection.
	
	  Configure chip
	
	  Enable and power up chip.
  Check that configured resources are correct.
	
	  Select SDMMC function.
	
	  Read configuration.
	
	  Validate against given configuration.
  Powers down the SD function
\
  Devices setup and shutdown                                                
	
	  Scan for hardware.
	
	  Request resources.
	
	  See if chip needs to be configured.
	
	  Power Management stuff. No idea how this works.
	  Not tested.
	
	  Allow device to initialise itself properly.
	
	  Reset the chip into a known state.
	
	  Power down the SDMMC function.
  Non-PnP
 Use the module parameters for resources 
  PnP
	
	  Get resources from PnP layer.
 CONFIG_PNP 
  Power management
	
	  Allow device to initialise itself properly.
	
	  See if chip needs to be configured.
	
	  Allow device to initialise itself properly.
 CONFIG_PNP 
 CONFIG_PM 
 CONFIG_PM 
 CONFIG_PNP 
  Module loadingunloading
 CONFIG_PNP 
 CONFIG_PNP 
 SPDX-License-Identifier: GPL-2.0-or-later
  Synopsys DesignWare Multimedia Card Interface driver
  Copyright (C) 2009 NXP Semiconductors
  Copyright (C) 2009, 2010 Imagination Technologies Ltd.
 Get registers' physical base address 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2013-2014 Renesas Electronics Europe Ltd.
  Author: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
 Also R5, R6, R7 
 R1b 
 Also R4 
 mapped page 
 SG memory handling 
 Common for multiple and single block requests 
 current page from an SG 
 either a mapped page, or the bounce buffer 
 offset within a page, including sg->offset 
 Blocks, crossing a page boundary 
 A bounce buffer for unaligned blocks or blocks, crossing a page boundary 
 Multiple block requests only 
 current SG segment 
 page index within an SG segment 
 Timeout handling 
 DMA support 
 Pin control 
			IO primitives					
 Mask all except card hotplug 
 Response timeout is often normal, don't spam the log 
			Scatter-Gather management			
  In PIO mode we have to map each page separately, using kmap(). That way
  adjacent pages are mapped to non-adjacent virtual addresses. That's why we
  have to use a bounce buffer for blocks, crossing page boundaries. Such blocks
  have been observed with an SDIO WiFi card (b43 driver).
 Only called for multiple block IO 
 TODO: if we always map, this is redundant 
 Map the first page in an SG segment: common for multiple and single block IO 
	
	  Block size must be a power of 2 for multi-block transfers,
	  therefore blk_head is equal for all pages in this SG
		
		  The first block in the SG crosses a page boundary.
		  Max blksz = 512, so blocks can only span 2 pages
 Unmap the current page: common for multiple and single block IO 
 Previous block was cross-page boundary 
 More blocks in this SG, don't unmap the next page 
 Called from MMC_WRITE_MULTIPLE_BLOCK or MMC_READ_MULTIPLE_BLOCK 
 New offset: set at the end of the previous block 
 Finished a cross-page block, jump to the new page 
 The completed block didn't cross a page boundary 
 If required, we'll map the page below 
	
	  Now host->blk_page + host->offset point at the end of our last block
	  and host->page_idx is the index of the page, in which our new block
	  is located, if any
 More blocks in this page 
 We approached at a block, that spans 2 pages 
 Finished current page or an SG segment 
		
		  End of an SG segment or the complete SG: jump to the next
		  segment, we'll map it later in usdhi6_blk_read() or
		  usdhi6_blk_write()
 We cannot get here after crossing a page border 
 Next page in the same SG 
			DMA handling					
 DMA failed, fall back to PIO 
 Abort DMA 
	
	  The datasheet tells us to check a response from the card, whereas
	  responses only come after the command phase, not after the data
	  phase. Let's check anyway.
 128 words  4 bytes = 512 bytes 
 128 words  4 bytes = 512 bytes 
			API helpers					
 Cannot have 1-to-1 clock in DDR mode 
	
	  if old or new rate is equal to input rate, have to switch the clock
	  off before changing and on after
 Errors ignored... 
		
		  We only also touch USDHI6_SD_OPTION from .request(), which
		  cannot race with MMC_POWER_UP
		
		  The eMMC standard only allows 4 or 8 bits in the DDR mode,
		  the same probably holds for SD cards. We check here anyway,
		  since the datasheet explicitly requires 4 bits for DDR.
 This is data timeout. Response timeout is fixed to 640 clock cycles 
 Max timeout 
 Min timeout 
 Timeout Counter mask: 0xf0 
 Disable DMA 
 Enable DMA for USDHI6_MIN_DMA bytes or more 
 We have to get a command completion interrupt with DMA too 
 SEC bit is required to enable block counting by the core 
 Kick command execution 
 Read is atomic, no need to lock 
 	level	status.CD	CD_ACTIVE_HIGH	card present
 	1	0		0		0
 	1	0		1		1
 	0	1		0		1
 	0	1		1		0
 No locking as above 
 	level	status.WP	RO_ACTIVE_HIGH	card read-only
 	1	0		0		0
 	1	0		1		1
 	0	1		0		1
 	0	1		1		0
 Card is busy if it is pulling dat[0] low 
			State machine handlers				
  RSP10	39-8
  RSP32	71-40
  RSP54	103-72
  RSP76	127-104
  R2-type response:
  resp[0]	= r[127..96]
  resp[1]	= r[95..64]
  resp[2]	= r[63..32]
  resp[3]	= r[31..0]
  Other responses:
  resp[0]	= r[39..8]
 Read RSP54 to avoid conflict with auto CMD12 
 Unsupported STOP command 
 ACCESS_END IRQ is already unmasked 
	
	  Have to force unmapping both pages: the single block could have been
	  cross-page, in which case for single-block IO host->page_idx == 0.
	  So, if we don't force, the second page won't be unmapped.
 See comment in usdhi6_read_block() 
			Interrupt & timeout handlers			
 We're too late, the timeout has already kicked in 
 Wait for data? 
 Wait for more data? 
 Wait for data end? 
 Wait data to write? 
 Wait for data end? 
 Wait for more data or ACCESS_END 
 Sending STOP 
 Data error: might need to unmap the last page 
 Ack  clear interrupts 
 In error cases BWE and BRE aren't cleared automatically 
 Don't pollute the log with unsupported command timeouts 
 We're only interested in hotplug events here 
 Ack 
  Actually this should not be needed, if the built-in timeout works reliably in
  the both PIO cases and DMA never fails. But if DMA does fail, a timeout
  handler might be the only way to catch the error.
 mrq can be NULL, but is impossible 
 page unmapped in USDHI6_WAIT_FOR_DATA_END 
			 Probe  release				
	
	  We use a fixed timeout of 4s, hence inform the core about it. A
	  future improvement should instead respect the cmd->busy_timeout.
 Set .max_segs to some random number. Feel free to adjust. 
	
	  Setting .max_seg_size to 1 page would simplify our page-mapping code,
	  But OTOH, having large segments makes DMA more efficient. We could
	  check, whether we managed to get DMA and fall back to 1 page
	  segments, but if we do manage to obtain DMA and then it fails at
	  run-time and we fall back to PIO, we will continue getting large
	  segments. So, we wouldn't be able to get rid of the code anyway.
 SPDX-License-Identifier: GPL-2.0-or-later
  driversmmchostsdhci-of-sparx5.c
  MCHP Sparx5 SoC Secure Digital Host Controller Interface.
  Copyright (c) 2019 Microchip Inc.
  Author: Lars Povlsen <lars.povlsen@microchip.com>
 Off 0x140, reg 0x0 
 Off 0x140, reg 0x1 
 Off 0x140, reg 0xB 
  If DMA addr spans 128MB boundary, we split the DMA transfer into two
  so that each DMA transfer doesn't exceed the boundary.
 Update ACP caching attributes in HW 
 Update DLY_CC in HW 
 For eMMC, minimum is 1us but give it 10us for good measure 
 For eMMC, minimum is 200us but give it 300us for good measure 
 Be sure CARD_IS_EMMC stays set 
 Controller issue 
 No sdr104, ddr50, etc 
	
	  extra adma table cnt for cross 128M boundary handling.
 Do a HW reset of eMMC card 
 Update EMMC_CTRL 
 If eMMC, disable SD and SDIO 
 Set AXI bus master to use un-cached access (for DMA) 
 SPDX-License-Identifier: GPL-2.0-only
  sdhci-brcmstb.c Support for SDHCI on Broadcom BRCMSTB SoC's
  Copyright (C) 2015 Broadcom Corporation
 Select Bus Speed Mode for host 
 Non-standard 
 Map in the non-standard CFG registers 
	
	  If the chip has enhanced strobe and it's enabled, add
	  callback
	
	  Supply the existing CAPS, but clear the UHS modes. This
	  will allow these modes to be specified by device tree
	  properties through mmc_of_parse().
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversmmchostau1xmmc.c - AU1XX0 MMC driver
   Copyright (c) 2005, Advanced Micro Devices, Inc.
   Developed with help from the 2.4.30 MMC AU1XXX controller including
   the following copyright notices:
      Copyright (c) 2003-2004 Embedded Edge, LLC.
      Portions Copyright (C) 2002 Embedix, Inc
      Copyright 2002 Hewlett-Packard Company
   2.6 version of this driver inspired by:
      (driversmmcwbsd.c) Copyright (C) 2004-2005 Pierre Ossman,
      All Rights Reserved.
      (driversmmcpxa.c) Copyright (C) 2003 Russell King,
      All Rights Reserved.
 Why don't we use the SD controllers' carddetect feature?
  From the AU1100 MMC application guide:
  If the Au1100-based design is intended to support both MultiMediaCards
  and 1- or 4-data bit SecureDigital cards, then the solution is to
  connect a weak (560KOhm) pull-up resistor to connector pin 1.
  In doing so, a MMC card never enters SPI-mode communications,
  but now the SecureDigital card-detect feature of CDDAT3 is ineffective
  (the low to high transition will not occur).
 Set this to enable special debugging macros 
 #define DEBUG 
 Hardware definitions 
 max DMA seg size: 64KB on Au1100, 4MB on Au1200 
 This gives us a hard value for the stop command that we can write directly
  to the command register.
 This is the set of interrupts that we configure by default. 
 The poll event (looking for insertremove events runs twice a second. 
 Status flags used by the host structure 
 Easy access macros 
 drain writebuffer 
 drain writebuffer 
 SEND_STOP will turn off clock control - this re-enables it 
 drain writebuffer 
 drain writebuffer 
 drain writebuffer 
 Send the stop command 
 drain writebuffer 
 drain writebuffer 
 drain writebuffer 
 Wait for the command to go on the line 
 nop ;
 The transaction is really over when the SD_STATUS_DB bit is clear 
 Process any errors 
 Clear the CRC bits 
 This is the pointer to the data buffer 
 This is the space left inside the buffer 
 Check if we need less than the size of the sg_buffer 
 drain writebuffer 
 This is the space left inside the buffer 
 Check if we need less than the size of the sg_buffer 
 IRQ_OFF(host, SD_CONFIG_RA | SD_CONFIG_RF); 
 This is called when a command has been completed - grab the response
  and check for errors.  Then start the data transfer if it is indicated.
			 The CRC is omitted from the response, so really
			  we only got 120 bytes, but the engine expects
			  128 bits, so we have to shift things up.
			 Techincally, we should be getting all 48 bits of
			  the response (SD_RESP1 + SD_RESP2), but because
			  our response omits the CRC, our data ends up
			  being shifted 8 bits to the right.  In this case,
			  that means that the OSR data starts at bit 31,
			  so we can just read RESP0 and return that.
 Figure out errors 
 Start the DBDMA as soon as the buffer gets something in it 
 drain writebuffer 
 IRQ_ON(host, SD_CONFIG_RA | SD_CONFIG_RF); 
 This actually starts a command or data transaction 
 fail request immediately if no card is present 
 Apply the clock 
 drain writebuffer 
 drain writebuffer 
 drain writebuffer 
 drain writebuffer 
 drain writebuffer 
 drain writebuffer 
 drain writebuffer 
 Configure interrupts 
 drain writebuffer 
 drain writebuffer 
 not ours 
 SDIO 
 In PIO mode, interrupts might still be enabled 
 IRQ_OFF(host, SD_CONFIG_TH | SD_CONFIG_RA | SD_CONFIG_RF); 
 Sometimes we get a DD before a NE in PIO mode 
 tasklet_schedule(&host->data_task); 
 drain writebuffer 
 8bit memory DMA device 
 Avoid spurious interrupts 
 DBDMA is good to go 
 Au1100Au1200: one int for both ctrls 
 nothing is shared 
 board-specific carddetect setup, if any 
 platform may not be able to use all advertised caps 
 all ok 
 drain writebuffer 
 drain writebuffer 
 drain writebuffer 
		 DSCR_CMD0_ALWAYS has a stride of 32 bits, we need a stride
		 of 8 bits.  And since devices are shared, we need to create
		 our own to avoid freaking out other devices.
 SPDX-License-Identifier: GPL-2.0-or-later
   linuxdriversmmchostsdhci.c - Secure Digital Host Controller Interface driver
   Copyright (C) 2005-2008 Pierre Ossman, All Rights Reserved.
  Thanks to the following companies for their support:
      - JMicron (hardware and technical support)
\
  Low level functions                                                       
  This can be called before sdhci_add_host() by Vendor's host controller
  driver to enable v4 mode if supported.
 Reset-all turns off SD Bus Power 
 Wait max 100 ms 
 hw clears the bit when it's done 
 Resetting the controller clears many 
	
	  Always adjust the DMA selection as some controllers
	  (e.g. JMicron) can't do PIO properly when the selection
	  is ADMA.
 Note if DMA Select is zero then SDMA is selected 
		
		  If v4 mode, all supported DMA can be 64-bit addressing if
		  controller supports 64-bit system address, otherwise only
		  ADMA can support 64-bit addressing.
			
			  Don't need to undo SDHCI_CTRL_ADMA32 in order to
			  set SDHCI_CTRL_ADMA64.
 force clock reconfiguration 
	
	  A change to the card detect bits indicates a change in present state,
	  refer sdhci_set_card_detection(). A card detect interrupt might have
	  been missed while the host controller was being reset, so trigger a
	  rescan to check.
\
  Core functions                                                            
	
	  Some controllers (JMicron JMB38x) mess up the buffer bits
	  for transfers < 4 bytes. As long as it is just one block,
	  we can ignore the bits.
	
	  If the data buffers are already mapped, return the previous
	  dma_map_sg() result.
 Bounce write requests to the bounce buffer 
 Copy the data to the bounce buffer 
 Switch ownership to the DMA 
 Just a dummy value 
 Just access the data directly from memory 
 32-bit and 64-bit descriptors have these members in same position 
 32-bit and 64-bit descriptors have 'cmd' in same position 
	
	  The spec does not specify endianness of descriptor table.
	  We currently guess that it is LE.
		
		  The SDHCI specification states that ADMA addresses must
		  be 32-bit aligned. If they aren't, then we use a bounce
		  buffer for the (up to three) bytes that screw up the
		  alignment.
 tran, valid 
 tran, valid 
		
		  If this triggers then we have a calculation bug
		  somewhere. :
 Mark the last descriptor as the terminating descriptor 
 Add a terminating entry - nop, end, valid 
 Do a quick scan of the SG list for any unaligned mappings 
 timeout in us 
			
			  data->timeout_clks is in units of clock cycles.
			  host->clock is in Hz.  target_timeout is in us.
			  Hence, us = 1000000  cycles  Hz.  Round up.
 multiply by '2' to account for any unknowns 
 calculate timeout for the entire data 
	
	  If the host controller provides us with an incorrect timeout
	  value, just skip the check and use the maximum. The hardware may take
	  longer to time out, but that's much better than having a too-short
	  timeout value.
 Unspecified command, assume max 
 Unspecified timeout, assume max 
 timeout in us 
	
	  Figure out needed cycles.
	  We do this in steps in order to fit inside a 32 bit int.
	  The first step is the minimum timeout, which will have a
	  minimum resolution of 6 bits:
	  (1) 2^131000 > 2^22,
	  (2) host->timeout_clk < 2^16
	      =>
	      (1)  (2) > 2^6
 Sanity checks 
 Set the DMA boundary value and block size 
	
	  For Version 4.10 onwards, if v4 mode is enabled, 32-bit Block Count
	  can be supported, in that case 16-bit block count register must be 0.
		
		  FIXME: This doesn't account for merging when mapping the
		  scatterlist.
		 
		  The assumption here being that alignment and lengths are
		  the same after DMA mapping to device address space.
				
				  As we use up to 3 byte chunks to work
				  around alignment problems, we need to
				  check the offset as well.
			
			  This only happens when someone fed
			  us an invalid request.
 Sanity check: all the SG entries must be aligned by block size. 
 This should never happen 
	
	  In case of Version 4.10 or later, use of 'Auto CMD Auto
	  Select' is recommended rather than use of 'Auto CMD12
	  Enable' or 'Auto CMD23 Enable'. We require Version 4 Mode
	  here because some controllers (e.g sdhci-of-dwmshc) expect it.
	
	  If we are sending CMD23, CMD12 never gets sent
	  on successful completion (so no Auto-CMD12).
 must not clear SDHCI_TRANSFER_MODE when tuning 
 clear Auto CMD settings for no data CMDs 
	
	  The controller needs a reset of internal state machines upon error
	  conditions.
	
	  The specification states that the block count register must
	  be updated, but it does not specify at what point in the
	  data flow. That makes the register entirely useless to read
	  back so we have to assume that nothing made it to the card
	  in the event of an error.
	
	  Need to send CMD12 if -
	  a) open-ended multiblock transfer not using auto CMD12 (no CMD23)
	  b) error in multiblock transfer
		
		  'cap_cmd_during_tfr' request must not use the command line
		  after mmc_command_done() has been called. It is upper layer's
		  responsibility to send the stop command if required.
 Avoid triggering warning in sdhci_send_command() 
					
					  This is anyway a sw data timeout, so
					  give up now.
 Initially, a command has no error 
	 We shouldn't wait for data inihibit for stop commands, even
		
		  This does not happen in practice because 136-bit response
		  commands never have busy waiting, so rather than complicate
		  the error path, just remove busy waiting and continue.
 CMD19 is special in that the Data Present Select should be set 
 Approx. 10 ms 
 A deferred command might disappear, handle that 
 CRC is stripped so we need to do some shifting 
	
	  The host can send and interrupt when the busy state has
	  ended, allowing us to wait without wasting CPU cycles.
	  The busy signal uses DAT0 so this is similar to waiting
	  for data to complete.
	 
	  Note: The 1.0 specification is a bit ambiguous about this
	        feature so there might be some problems with older
	        controllers.
 Command complete before busy is ended 
 Finished CMD23, now send actual command. 
 Processed actual command. 
 Initialized for compiler warning 
		
		  Check if the Host Controller supports Programmable Clock
		  Mode.
				
				  Set Programmable Clock Mode in the Clock
				  Control register.
				
				  Divisor can be too small to reach clock
				  speed requirement. Then use the base clock.
 Version 3.00 divisors must be a multiple of 2. 
 Version 2.00 divisors must be a power of 2. 
 Wait max 150 ms 
 Wait max 150 ms 
		
		  Without a regulator, SDHCI does not support 2.0v
		  so we only get here if the driver deliberately
		  added the 2.0v range to ocr_avail. Map it to 1.8v
		  for the purpose of turning on the power.
		
		  3.4 ~ 3.6V are valid only for those platforms where it's
		  known that the voltage range is supported by hardware.
		
		  Spec says that we should clear the power reg before setting
		  a new value. Some controllers don't seem to like this though.
		
		  At least the Marvell CaFe chip gets confused if we set the
		  voltage and set turn on power at the same time, so set the
		  voltage first.
		
		  Some controllers need an extra 10ms delay of 10ms before
		  they can apply clock after applying power
  Some controllers need to configure a valid bus voltage on their power
  register regardless of whether an external regulator is taking care of power
  supply. This helper function takes care of it if set as the controller's
  sdhci_ops.set_power callback.
\
  MMC callbacks                                                             
 Firstly check card presence 
	
	  The HSQ may send a command in interrupt context without polling
	  the busy signaling, which means we should return BUSY if controller
	  has not released inhibit bits to allow HSQ trying to send request
	  again in non-atomic context. So we should not finish this request
	  here.
 Select Bus Speed Mode for host 
 Non-standard 
	
	  Reset the chip on each power off.
	  Should clear out any weird states.
			
			  We only need to set Driver Strength if the
			  preset value enable is not set.
			
			  According to SDHC Spec v3.00, if the Preset Value
			  Enable in the Host Control 2 register is set, we
			  need to reset SD Clock Enable before changing High
			  Speed Enable to avoid generating clock gliches.
 Reset SD Clock Enable 
 Re-enable SD Clock 
 Reset SD Clock Enable 
 Re-enable SD Clock 
	
	  Some (ENE) controllers go apeshit on some ios operation,
	  signalling timeout and CRC errors even on CMD0. Resetting
	  it on each ios seems to solve the problem.
 If nonremovable, assume that the card is always present. 
	
	  Try slot gpio detect, if defined it take precedence
	  over build in controller functionality
 If polling, assume that the card is always present. 
 Host native card detect 
 This quirk needs to be replaced by a callback-function later 
	
	  Signal Voltage Switching is only applicable for Host Controllers
	  v3.00 and above.
 Set 1.8V Signal Enable in the Host Control2 register to 0 
 Wait for 5ms 
 3.3V regulator output should be stable within 5 ms 
		
		  Enable 1.8V Signal Enable in the Host Control2
		  register
 Some controller need to do more when switching 
 1.8V regulator output should be stable within 5 ms 
 No signal voltage switch required 
 Check whether DAT[0] is 0 
	
	  As per the Host Controller spec v3.00, tuning command
	  generates Buffer Read Ready interrupt, so enable that.
	 
	  Note: The spec clearly says that when tuning sequence
	  is being performed, the controller does not generate
	  interrupts other than Buffer Read Ready interrupt. But
	  to make sure we don't hit a controller bug, we _only_
	  enable Buffer Read Ready interrupt here.
  We use sdhci_send_tuning() because mmc_send_tuning() is not a good fit. SDHCI
  tuning command does not have a data payload (or rather the hardware does it
  automatically) so mmc_send_tuning() will return -EIO. Also the tuning command
  interrupt setup is different to other commands and there is no timeout
  interrupt so special handling is needed.
	
	  In response to CMD19, the card sends 64 bytes of tuning
	  block to the Host Controller. So we set the block size
	  to 64 here.
	
	  The tuning block is sent by the card to the host controller.
	  So we set the TRNS_READ bit in the Transfer Mode register.
	  This also takes care of setting DMA Enable and Multi Block
	  Select in the same register to 0.
 Wait for Buffer Read Ready interrupt 
	
	  Issue opcode repeatedly till Execute Tuning is set to 0 or the number
	  of loops reaches tuning loop count.
 Spec does not require a delay between tuning cycles 
 Success! 
	
	  The Host Controller needs tuning in case of SDR104 and DDR50
	  mode, and for SDR50 mode when Use Tuning for SDR50 is set in
	  the Capabilities register.
	  If the Host Controller supports the HS200 mode then the
	  tuning function has to be executed.
 HS400 tuning is done in HS200 mode 
		
		  Periodic re-tuning for HS400 is not expected to be needed, so
		  disable it here.
 Host Controller v3.00 defines preset value registers 
	
	  We only enable or disable Preset Value if they are not already
	  enabled or disabled respectively. Otherwise, we bail out.
	
	  No pre-mapping in the pre hook if we're using the bounce buffer,
	  for that we would need two bounce buffers since one buffer is
	  in flight when this is getting called.
 First check if client has provided their own card event 
 Check sdhci_has_requests() first in case we are runtime suspended 
\
  Request done                                                              
	
	  The controller needs a reset of internal state machines
	  upon error conditions.
		
		  Do not finish until command and data lines are available for
		  reset. Note there can only be one other mrq, so it cannot
		  also be in mrqs_done, otherwise host->cmd and host->data_cmd
		  would both be null.
 Some controllers need this kick or reset won't work here 
 This is to force an update 
		
		  Spec says we should do both at the same time, but Ricoh
		  controllers do not like that.
	
	  Always unmap the data buffers if they were mapped by
	  sdhci_prepare_data() whenever we finish with a request.
	  This avoids leaking DMA mappings on error.
				
				  On reads, copy the bounced data into the
				  sglist
 Cap it down and continue 
 No copying, just switch ownership 
 Unmap the raw data 
\
  Interrupt handling                                                        
 Handle auto-CMD12 error 
 Treat auto-CMD12 error the same as data error 
		
		  SDHCI recovers from errors by resetting the cmd and data
		  circuits.  Until that is done, there very well might be more
		  interrupts, so ignore them in that case.
 Treat data command CRC error the same as data CRC error 
 Handle auto-CMD23 error 
	
	  CMD19 generates _only_ Buffer Read Ready interrupt if
	  use sdhci_send_tuning.
	  Need to exclude this case: PIO mode and use mmc_send_tuning,
	  If not, sdhci_transfer_pio will never be called, make the
	  SDHCI_INT_DATA_AVAIL always there, stuck in irq storm.
		
		  The "data complete" interrupt is also used to
		  indicate that a busy state has ended. See comment
		  above in sdhci_cmd_irq().
				
				  Some cards handle busy-end interrupt
				  before the command completed, so make
				  sure we do things in the proper order.
		
		  SDHCI recovers from errors by resetting the cmd and data
		  circuits. Until that is done, there very well might be more
		  interrupts, so ignore them in that case.
		
		  We currently don't do anything fancy with DMA
		  boundaries, but as we can't disable the feature
		  we need to at least restart the transfer.
		 
		  According to the spec sdhci_readl(host, SDHCI_DMA_ADDRESS)
		  should return a valid address to continue from, but as
		  some controllers are faulty, don't trust them.
			
			  Force update to the next DMA block boundary.
				
				  Data managed to finish before the
				  command completed. Make sure we do
				  things in the proper order.
 Clear selected interrupts. 
			
			  There is a observation on i.mx esdhc.  INSERT
			  bit will be immediately set again when it gets
			  cleared, if a card is inserted.  We have to mask
			  the irq to prevent interrupt storm which will
			  freeze the system.  And the REMOVE gets the
			  same situation.
			 
			  More testing are needed here to ensure it works
			  for other platforms though.
 Determine if mrqs can be completed immediately 
 Process mrqs ready for immediate completion 
\
  Suspendresume                                                            
  To enable wakeup events, the corresponding events have to be enabled in
  the Interrupt Status Enable register too. See 'Table 1-6: Wakeup Signal
  Table' in the SD Host Controller Standard Specification.
  It is useless to restore SDHCI_INT_ENABLE state in
  sdhci_disable_irq_wakeups() since it will be set by
  sdhci_enable_card_detection() or sdhci_init().
 Card keeps power but host controller does not 
 Force clock and power re-program 
 Enable SDIO IRQ 
 Enable Card Detection 
 CONFIG_PM 
\
  Command Queue Engine (CQE) helpers                                        
	
	  Host from V4.10 supports ADMA3 DMA type.
	  ADMA3 performs integrated descriptor which is more suitable
	  for cmd queuing to fetch both command and transfer descriptors.
 Set maximum timeout 
 Clear selected interrupts. 
\
  Device allocationregistration                                            
	
	  The DMA table descriptor count is calculated as the maximum
	  number of segments times 2, to allow for an alignment
	  descriptor for each segment, plus 1 for a nop end descriptor.
 Try 64-bit mask if hardware is capable  of it 
 32-bit mask as default & fallback 
	
	  Cap the bounce buffer at 64KB. Using a bigger bounce buffer
	  has diminishing returns, this is probably because SDMMC
	  cards are usually optimized to handle this size of requests.
	
	  Adjust downwards to maximum request size if this is less
	  than our segment size, else hammer down the maximum
	  request size to the maximum buffer size.
	
	  When we just support one segment, we can get significant
	  speedups by the help of a bounce buffer to group scattered
	  readswrites together.
		
		  Exiting with zero here makes sure we proceed with
		  mmc->max_segs == 1.
 Again fall back to max_segs == 1 
 Lie about this since we're bouncing 
	
	  According to SD Host Controller spec v4.10, bit[27] added from
	  version 4.10 in Capabilities Register is used as 64-bit System
	  Address support for V4 mode.
	
	  If there are external regulators, get them. Note this must be done
	  early before resetting the host and reading the capabilities so that
	  the host can take the appropriate action if regulators are not
	  available.
		
		  Fall back to use the DMAPIO integrated in standard SDHCI
		  instead of external DMA devices.
 Disable internal DMA sources 
 SDMA does not support 64-bit DMA if v4 mode not set 
		
		  Use zalloc to zero the reserved high 32-bits of 128-bit
		  descriptors so that they never need to be written.
	
	  If we use DMA, then it's up to the caller to set the DMA
	  mask, but PIO does not need the hw shim so we set a new
	  mask here in that case.
	
	  In case of Host Controller v3.00, find out whether clock
	  multiplier is supported.
	
	  In case the value in Clock Multiplier is 0, then programmable
	  clock mode is not supported, otherwise the actual clock
	  multiplier is one more than the value of Clock Multiplier
	  in the Capabilities Register.
	
	  Set host parameters.
		
		  Divided Clock Mode minimum clock rate is always less than
		  Programmable Clock Mode minimum clock rate.
	
	  For v3 mode, Auto-CMD23 stuff only works in ADMA or PIO.
	  For v4 mode, SDMA may use Auto-CMD23 as well.
	
	  A controller may support 8-bit width, but the board itself
	  might not have the pins brought out.  Boards that support
	  8-bit width must set "mmc->caps |= MMC_CAP_8_BIT_DATA;" in
	  their platform code before calling sdhci_add_host(), and we
	  won't assume 8-bit width for hosts without that CAP.
 If vqmmc provides no 1.8V signalling, then there's no UHS 
 In eMMC case vqmmc might be a fixed 1.8V regulator 
		
		  The SDHCI controller in a SoC might support HS200HS400
		  (indicated using mmc-hs200-1_8vmmc-hs400-1_8v dt property),
		  but if the board is modeled such that the IO lines are not
		  connected to 1.8v then HS200HS400 cannot be supported.
		  Disable HS200HS400 if the board does not have 1.8v connected
		  to the IO lines. (Applicable for other modes in 1.8v)
 Any UHS-I mode in caps implies SDR12 and SDR25 support. 
 SDR104 supports also implies SDR50 support 
		 SD3.0: SDR104 is supported so (for eMMC) the caps2
		  field can be promoted to support HS200.
 Does the host need tuning for SDR50? 
 Driver Type(s) (A, C, D) supported by the host 
 Initial value for re-tuning timer count 
	
	  In case Re-tuning Timer is not disabled, the actual value of
	  re-tuning timer will be 2 ^ (n - 1).
 Re-tuning mode supported by the Host Controller 
	
	  According to SD Host Controller spec v3.00, if the Host System
	  can afford more than 150mA, Host Driver should set XPC to 1. Also
	  the value is meaningful only if Voltage Support in the Capabilities
	  register is set. The actual current value is 4 times the register
	  value.
 convert to SDHCI_MAX_CURRENT format 
 convert to mA 
 If OCR set by host, use it instead. 
 If OCR set by external regulators, give it highest prio. 
 normal SD controllers don't support 1.8V 
	
	  Maximum number of sectors in one transfer. Limited by SDMA boundary
	  size (512KiB). Note some tuning modes impose a 4MiB limit, but this
	  is less anyway.
	
	  Maximum number of segments. Depends on if the hardware
	  can do scattergather or not.
 PIO 
	
	  Maximum segment size. Could be one segment with the maximum number
	  of bytes. When doing hardware scattergather, each entry cannot
	  be larger than 64 KiB though.
	
	  Maximum block size. This varies from controller to controller and
	  is specified in the capabilities register.
	
	  Maximum block count.
 This may alter mmc->_blk_ parameters 
\
  Driver initexit                                                          
  Shared part of driver for MMCSDHC controller on Cavium OCTEON and
  ThunderX SOCs.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file "COPYING" in the main directory of this archive
  for more details.
  Copyright (C) 2012-2017 Cavium Inc.
  Authors:
    David Daney <david.daney@cavium.com>
    Peter Swain <pswain@cavium.com>
    Steven J. Hill <steven.hill@cavium.com>
    Jan Glauber <jglauber@cavium.com>
  The Cavium MMC host hardware assumes that all commands have fixed
  command and response types.  These are correct if MMC devices are
  being used.  However, non-MMC devices like SD use command and
  response types that are unexpected by the host hardware.
  The command and response types can be overridden by supplying an
  XOR value that is applied to the type.  We calculate the XOR value
  from the values in this table and the flags passed from the MMC
  core.
 CMD0 
 CMD1 
 CMD2 
 CMD3 
 CMD4 
 CMD5 
 CMD6 
 CMD7 
 CMD8 
 CMD9 
 CMD10 
 CMD11 
 CMD12 
 CMD13 
 CMD14 
 CMD15 
 CMD16 
 CMD17 
 CMD18 
 CMD19 
 CMD20 
 CMD21 
 CMD22 
 CMD23 
 CMD24 
 CMD25 
 CMD26 
 CMD27 
 CMD28 
 CMD29 
 CMD30 
 CMD31 
 CMD32 
 CMD33 
 CMD34 
 CMD35 
 CMD36 
 CMD37 
 CMD38 
 CMD39 
 CMD40 
 CMD41 
 CMD42 
 CMD43 
 CMD44 
 CMD45 
 CMD46 
 CMD47 
 CMD48 
 CMD49 
 CMD50 
 CMD51 
 CMD52 
 CMD53 
 CMD54 
 CMD55 
 CMD56 
 CMD57 
 CMD58 
 CMD59 
 CMD60 
 CMD61 
 CMD62 
 CMD63 
 MMC_RSP_R5, MMC_RSP_R6, MMC_RSP_R7 
 MMC_RSP_R4 
  We never set the switch_exe bit since that would interfere
  with the commands send by the MMC core.
	
	  Modes setting only taken from slot 0. Work around that hardware
	  issue by first switching to slot 0.
 wait for the switch to finish 
 Match BUS_ID, HS_TIMING, BUS_WIDTH, POWER_CLASS, CLK_HI, CLK_LO 
 Switch to another slot if needed 
 Auto inc from offset zero 
 Check if there are any pending requests left 
 Clear and disable FIFO 
 Try to clean up failed DMA. 
 Clear interrupt bits (write 1 clears ). 
	
	  dma_val set means DMA is still in progress. Don't touch
	  the request and wait for the interrupt indicating that
	  the DMA is finished.
  Program DMA_CFG and if needed DMA_ADR.
  Returns 0 on error, DMA address otherwise.
  Queue complete sg list into the FIFO.
  Returns 0 on error, 1 otherwise.
 Enable FIFO by removing CLR bit 
 Program DMA address 
		
		  If we have scatter-gather support we also have an extra
		  register for the DMA addr, so no need to check
		  host->big_dma_addr here.
 enable interrupts on the last element 
		
		  The write copies the address and the command to the FIFO
		  and increments the FIFO's COUNT field.
	
	  In difference to prepare_dma_single we don't return the
	  address here, as it would not make sense for scatter-gather.
	  The dma fixup is only required on models that don't support
	  scatter-gather, so that is not a problem.
 Disable FIFO 
	
	  If we have a valid SD card in the slot, we set the response
	  bit mask to check for CRC errors and timeouts only.
	  Otherwise, use the default power reset value.
 Copy data to the xmit buffer before issuing the command. 
 Auto inc from offset zero, dbuf zero 
	
	  Note about locking:
	  All MMC devices share the same bus and controller. Allow only a
	  single user of the bootbusMMC bus at a time. The lock is acquired
	  on all entry points from the MMC layer.
	 
	  For requests the lock is only released after the completion
	  interrupt!
 Set the power state 
 Convert bus width to HW definition 
 DDR is available for 48 bit bus width 
 Change the clock frequency. 
 Enable this bus slot. 
 Program initial clock speed and power. 
 Make the changes take effect on this bus slot. 
	
	  Set watchdog timeout value and default reset value
	  for the mask register. Finally, set the CARD_RCA
	  bit so that we can get the card address relative
	  to the CMD register for CMD7 transactions.
	
	  Legacy Octeon firmware has no regulator entry, fall-back to
	  a hard-coded voltage to get a sane OCR.
 Common MMC bindings 
 Set bus width 
 Set maximum and minimum frequency 
 Sampling register settings, period in picoseconds 
 Set up host parameters 
	
	  We only have a 3.3v supply, we cannot support any
	  of the UHS modes. We do support the high speed DDR
	  modes up to 52MHz.
	 
	  Disable bounce buffers for max_segs = 1
 DMA size field can address up to 8 MB 
 External DMA is in 512 byte blocks 
 DMA block count field is 15 bits 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2018 Mellanox Technologies.
 Update the Drive and Sample fields in register UHS_REG_EXT. 
 SPDX-License-Identifier: GPL-2.0-only
  Atmel SDMMC controller driver.
  Copyright (C) 2015 Atmel,
 		 2015 Ludovic Desroches <ludovic.desroches@atmel.com>
 drv type B, programmable clock mode 
	
	  There is no requirement to disable the internal clock before
	  changing the SD clock configuration. Moreover, disabling the
	  internal clock, changing the configuration and re-enabling the
	  internal clock causes some bugs. It can prevent to get the internal
	  clock stable flag ready and an unexpected switch to the base clock
	  when using presets.
 Wait max 20 ms 
 Set capabilities in rw mode. 
 Set capabilities in ro mode. 
	
	  We have to set preset values because it depends on the clk_mul
	  value. Moreover, SDR104 is supported in a degraded mode since the
	  maximum sd clock value is 120 MHz instead of 208 MHz. For that
	  reason, we need to use presets to support SDR104.
 CONFIG_PM_SLEEP 
 CONFIG_PM 
	
	  if SDCAL pin is wrongly connected, we must enable
	  the analog calibration cell permanently.
 HS200 is broken at this moment 
	
	  When calling sdhci_runtime_suspend_host(), the sdhci layer makes
	  the assumption that all the clocks of the controller are disabled.
	  It means we can't get irq from it when it is runtime suspended.
	  For that reason, it is not planned to wake-up on a card detect irq
	  from the controller.
	  If we want to use runtime PM and to be able to wake-up on card
	  insertion, we have to use a GPIO for the card detection or we can
	  use polling. Be aware that using polling will resumesuspend the
	  controller between each attempt.
	  Disable SDHCI_QUIRK_BROKEN_CARD_DETECTION to be sure nobody tries
	  to enable polling via device tree with broken-cd property.
	
	  If the device attached to the MMC bus is not removable, it is safer
	  to set the Force Card Detect bit. People often don't connect the
	  card detect signal and use this pin for another purpose. If the card
	  detect pin is not muxed to SDHCI controller, a default value is
	  used. This value can be different from a SoC revision to another
	  one. Problems come when this default value is not card present. To
	  avoid this case, if the device is non removable then the card
	  detection procedure using the SDMCC_CD signal is bypassed.
	  This bit is reset when a software reset for all command is performed
	  so we need to implement our own reset function to set back this bit.
	 
	  WA: SAMA5D2 doesn't drive CMD if using CD GPIO line.
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriversmmchostmmci.c - ARM PrimeCell MMCI PL1801 driver
   Copyright (C) 2003 Deep Blue Solutions, Ltd, All Rights Reserved.
   Copyright (C) 2010 ST-Ericsson SA
 Busy detection for the ST Micro variant 
	
	  According to the spec, at least three feedback clock cycles
	  of max 52 MHz must pass between two writes to the MMCICLOCK reg.
	  Three MCLK clock cycles must pass between two MMCIPOWER reg writes.
	  Worst delay time during card init is at 100 kHz => 30 us.
	  Worst delay time when up and running is at 25 MHz => 120 ns.
  This must be called with host->lock held
  This must be called with host->lock held
  This must be called with host->lock held
 Keep busy mode in DPSM if enabled 
  This must be called with host->lock held
 Make sure cclk reflects the current calculated clock 
			
			  DB8500 TRM says f = mclk  (clkdiv + 2)
			  => clkdiv = (mclk  f) - 2
			  Round the divider up so we don't exceed the max
			  frequency
			
			  PL180 TRM says f = mclk  (2  (clkdiv + 1))
			  => clkdiv = mclk  (2  f) - 1
 This hasn't proven to be worthwhile 
 clk |= MCI_CLK_PWRSAVE; 
 Set actual clock for debug 
 initialize pre request cookie 
  Validate mmc prerequisites
 Okay, go for it. 
 Trigger the DMA transfer 
	
	  Let the MMCI say when the data is ended and it's time
	  to fire next DMA request. When that happens, MMCI will
	  call mmci_data_end()
	
	  Before unmasking for the busy end IRQ, confirm that the
	  command was sent successfully. To keep track of having a
	  command in-progress, waiting for busy signaling to end,
	  store the status in host->busy_status.
	 
	  Note that, the card may need a couple of clock cycles before
	  it starts signaling busy on DAT0, hence re-read the
	  MMCISTATUS register here, to allow the busy bit to be set.
	  Potentially we may even need to poll the register for a
	  while, to allow it to be set, but tests indicates that it
	  isn't needed.
	
	  If there is a command in-progress that has been successfully
	  sent, then bail out if busy status is set and wait for the
	  busy end IRQ.
	 
	  Note that, the HW triggers an IRQ on both edges while
	  monitoring DAT0 for busy completion, but there is only one
	  status bit in MMCISTATUS for the busy state. Therefore
	  both the start and the end interrupts needs to be cleared,
	  one after the other. So, clear the busy start IRQ here.
	
	  If there is a command in-progress that has been successfully
	  sent and the busy bit isn't set, it means we have received
	  the busy end IRQ. Clear and mask the IRQ, then continue to
	  process the command.
  All the DMA operation mode stuff goes inside this ifdef.
  This assumes that you have a generic DMA device interface,
  no custom DMA interfaces are supported.
	
	  If only an RX channel is specified, the driver will
	  attempt to use it bidirectionally, however if it is
	  is specified but cannot be located, DMA will be disabled.
	
	  Limit the maximum segment size in any SG entry according to
	  the parameters of the DMA engine device.
  This is used in or so inline it
  so it can be discarded.
 Wait up to 1ms for the DMA to complete 
	
	  Check to see whether we still have some data left in the FIFO -
	  this catches DMA controllers which are unable to monitor the
	  DMALBREQ and DMALSREQ signals while allowing us to DMA to non-
	  contiguous buffers.  On TX, we'll get a FIFO underrun error.
	
	  Use of DMA with scatter-gather is impossible.
	  Give up with DMA and switch back to PIO mode.
 prepares DMA channel and DMA descriptor, returns non-zero on failure 
 # of words 
 # of words 
 If there's no DMA channel, fall back to PIO 
 If less than or equal to the fifo size, don't bother with DMA 
	
	  This is necessary to get SDIO working on the Ux500. We do not yet
	  know if this is a bug in:
	  - The Ux500 DMA controller (DMA40)
	  - The MMCI DMA interface on the Ux500
	  some power of two blocks (such as 64 bytes) are sent regularly
	  during SDIO traffic and those work fine so for these we enable DMA
	  transfers.
 Check if next job is already prepared. 
 No job were prepared thus do it now. 
		
		  The ST Micro variant for SDIO small write transfers
		  needs to have clock HW flow control disabled,
		  otherwise the transfer will not start. The threshold
		  depends on the rate of MCLK.
	
	  Attempt to use DMA operation mode, if this
	  should fail, fall back to PIO mode
 IRQ mode, map the SG list for CPU readingwriting 
		
		  If we have less than the fifo 'half-full' threshold to
		  transfer, trigger a PIO interrupt as soon as any data
		  is available.
		
		  We don't actually need to include "FIFO empty" here
		  since its implicit in "FIFO half empty".
interrupt0)
 Make sure we have data to handle 
 First check for errors 
 Terminate the DMA transfer 
		
		  Calculate how far we are into the transfer.  Note that
		  the data counter gives the number of bytes transferred
		  on the MMC bus, not on the host side.  On reads, this
		  can be as much as a FIFO-worth of data ahead.  This
		  matters for FIFO overruns only.
 Last block was not successful 
 The error clause is handled above, success! 
	
	  We need to be one of these interrupts to be considered worth
	  handling. Note that we tag on any latent IRQs postponed
	  due to waiting for busy status.
 Handle busy detection on DAT0 if the variant supports it. 
		
		  This will wake up mmci_irq_thread() which will issue
		  a hardware reset of the MMCI block.
 Terminate the DMA transfer 
	
	  on qcom SDCC4 only 8 words are used in each burst so only 8 addresses
	  from the fifo range should be used
		
		  SDIO especially may want to send something that is
		  not divisible by 4 (as opposed to card sectors
		  etc). Therefore make sure to always read the last bytes
		  while only doing full 32-bit reads towards the FIFO.
		
		  SDIO especially may want to send something that is
		  not divisible by 4 (as opposed to card sectors
		  etc), and the FIFO only accept full 32-bit writes.
		  So compensate by adding +3 on the count, a single
		  byte become a 32bit write, 7 bytes will be two
		  32bit writes etc.
  PIO data transfer IRQ handler.
		
		  For write, we only need to test the half-empty flag
		  here - if the FIFO is completely empty, then by
		  definition it is more than half empty.
		 
		  For read, check for data available.
	
	  If we have less than the fifo 'half-full' threshold to transfer,
	  trigger a PIO interrupt as soon as any data is available.
	
	  If we run out of data, disable the data IRQs; this
	  prevents a race where the FIFO becomes empty before
	  the chip itself has disabled the data path, and
	  stops us racing with our data end IRQ.
  Handle completion of command and data transfers.
		
		  Busy detection is managed by mmci_cmd_irq(), including to
		  clear the corresponding IRQ.
		
		  Busy detection has been handled by mmci_cmd_irq() above.
		  Clear the status bit to prevent polling in IRQ context.
  mmci_irq_thread() - A threaded IRQ handler that manages a reset of the HW.
  A reset is needed for some variants, where a datatimeout for a R1B request
  causes the DPSM to stay busy (non-functional).
		
		  The ST Micro variant doesn't have the PL180s MCI_PWR_UP
		  and instead uses MCI_PWR_ON so apply whatever value is
		  configured in the variant data.
		
		  The ST Micro variant has some additional bits
		  indicating signal direction for the signals in
		  the SDMMC bus and feedback-clock usage.
		
		  If the variant cannot configure the pads by its own, then we
		  expect the pinctrl to be able to do that for us
	
	  If clock = 0 and the variant requires the MMCIPOWER to be used for
	  gating the clock, the MCI_PWR_ON bit is cleared.
 Assume always present 
	
	  Assume the level translator is present if st,use-ckin is set.
	  This is to cater for DTs which do not implement this test.
 All GPIOs are valid, test whether level translator works 
 Sample CKIN 
 Set CK low 
 Sample CKIN 
 Tristate all 
 Level translator is present if CK signal is propagated to CKIN 
 Must have platform data or Device Tree. 
	
	  Some variant (STM32) doesn't have opendrain bit, nevertheless
	  pins can be set accordingly using pinctrl
	
	  According to the spec, mclk is max 100 MHz,
	  so we try to adjust the clock down to this,
	  (if possible).
	
	  The ARM and ST versions of the block have slightly different
	  clock divider equations which means that the minimum divider
	  differs too.
	  on Qualcomm like controllers get the nearest minimum clock to 100Khz
	
	  If no maximum operating frequency is supplied, fall back to use
	  the module parameter, which has a (low) default value in case it
	  is not specified. Either value must not exceed the clock rate into
	  the block, of course.
 Get regulators and the supported OCR mask 
 We support these capabilities. 
	
	  Enable busy detection.
		
		  Not all variants have a flag to enable busy detection
		  in the DPSM, but if they do, set it here.
 Variants with mandatory busy timeout in HW needs R1B responses. 
 Prepare a CMD12 - needed to clear the DPSM on some variants. 
 We support these PM capabilities. 
	
	  We can do SGIO
	
	  Since only a certain number of bits are valid in the data length
	  register, we must ensure that we don't exceed 2^num-1 bytes in a
	  single request.
	
	  Set the maximum segment size.  Since we aren't doing DMA
	  (yet) we are only limited by the data length register.
	
	  Block size can be up to 2048 bytes, but must be a power of two.
	
	  Limit the number of blocks transferred so that we don't overflow
	  the maximum request size.
	
	  If:
	  - not using DT but using a descriptor table, or
	  - using a table of descriptors ALONGSIDE DT, or
	  look up these descriptors named "cd" and "wp" right here, fail
	  silently of these do not exist
		
		  Undo pm_runtime_put() in probe.  We use the _sync
		  version here so that we can access the primecell.
 ST Micro variants 
 Qualcomm variants 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2015, The Linux Foundation. All rights reserved.
  The allocated descriptor table for task, link & transfer descriptors
  looks like:
  |----------|
  |task desc |  |->|----------|
  |----------|  |  |trans desc|
  |link desc-|->|  |----------|
  |----------|          .
       .                .
   no. of slots      max-segs
       .           |----------|
  |----------|
  The idea here is to create the [task+trans] table and mark & point the
  link desc to the transfer desc table on a per slot basis.
 task descriptor can be 64128 bit irrespective of arch 
	
	  96 bits length of transfer desc instead of 128 bits which means
	  ADMA would expect next valid descriptor at the 96th bit
	  or 128th bit
 total size of a slot: 1 task & 1 transfer (link) 
	
	  allocate a dma-mapped chunk of memory for the descriptors
	  allocate a dma-mapped chunk of memory for link descriptors
	  setup each link-desc memory offset per slot-number to
	  the descriptor table.
 Configuration must not be changed while enabled 
 Ensure all writes are done before interrupts are enabled 
 Re-enable is done upon first request 
 CQHCI is idle and should halt immediately, so set a small timeout 
 First request after resume has to re-enable 
 Make sure descriptors are ready before ringing the doorbell 
 Forget about errors when recovery has already been triggered 
	
	  Handle ICCE ("Invalid Crypto Configuration Error").  This should
	  never happen, since the block layer ensures that all crypto-enabled
	  IO requests have a valid keyslot before they reach the driver.
	 
	  Note that GCE ("General Crypto Error") is different; it already got
	  handled above by checking TERRI.
		
		  The only way to guarantee forward progress is to mark at
		  least one task in error, so if none is indicated, pick one.
 No completions allowed during recovery 
 read TCN and complete the request 
 complete the corresponding mrq 
  After halting we expect to be able to use the command line. We interpret the
  failure to halt to mean the data lines might still be in use (and the upper
  layers will need to send a STOP command), so we set the timeout based on a
  generous command timeout.
 CRC errors might indicate re-tuning so prefer to report that 
  By now the command and data lines should be unused so there is no reason for
  CQHCI to take a long time to halt, but if it doesn't halt there could be
  problems clearing tasks, so be generous.
 CQHCI could be expected to clear it's internal state pretty quickly 
	
	  The specification contradicts itself, by saying that tasks cannot be
	  cleared if CQHCI does not halt, but if CQHCI does not halt, it should
	  be disabledre-enabled, but not to disable before clearing tasks.
	  Have a go anyway.
 Be sure that there are no tasks 
 Ensure all writes are done before interrupts are re-enabled 
 check and setup CMDQ interface 
 SPDX-License-Identifier: GPL-2.0-or-later
  driversmmchostsdhci-of-hlwd.c
  Nintendo Wii Secure Digital Host Controller Interface.
  Copyright (C) 2009 The GameCube Linux Team
  Copyright (C) 2009 Albert Herranz
  Based on sdhci-of-esdhc.c
  Copyright (c) 2007 Freescale Semiconductor, Inc.
  Copyright (c) 2009 MontaVista Software, Inc.
  Authors: Xiaobo Xie <X.Xie@freescale.com>
 	    Anton Vorontsov <avorontsov@ru.mvista.com>
  Ops and quirks for the Nintendo Wii SDHCI controllers.
  We need a small delay after each write, or things go horribly wrong.
 usecs 
 SPDX-License-Identifier: GPL-2.0
  Driver for the MMC  SD  SDIO IP found in:
  TC6393XB, TC6391XB, TC6387XB, T7L66XB, ASIC3, SH-Mobile SoCs
  Copyright (C) 2015-19 Renesas Electronics Corporation
  Copyright (C) 2016-19 Sang Engineering, Wolfram Sang
  Copyright (C) 2017 Horms Solutions, Simon Horman
  Copyright (C) 2011 Guennadi Liakhovetski
  Copyright (C) 2007 Ian Molton
  Copyright (C) 2004 Ian Molton
  This driver draws mainly on scattered spec sheets, Reverse engineering
  of the toshiba e800  SD driver and some parts of the 2.4 ASIC3 driver (4 bit
  support). (Further 4 bit support from a later datasheet).
  TODO:
    Investigate using a workqueue for PIO transfers
    Eliminate FIXMEs
    Better Power management
    Handle MMC errors better
    double buffer support
 Keep device active while SDIO irq is enabled 
 Clear obsolete interrupts before enabling 
 reg now applies to MMC_BUS_WIDTH_4 
 FIXME - should we set stop clock reg here 
	
	  is request already finished? Since we use a non-blocking
	  cancel_delayed_work(), it can happen, that a .set_ios() call preempts
	  us, so, have to check for IS_ERR(host->mrq)
 Ready for new calls 
 These are the bitmasks the tmio chip requires to implement the MMC response
 TMIO_MMC_HAVE_CMD12_CTRL 
 FIXME - this seems to be ok commented out but the spec suggest this bit
          should be set when issuing app commands.
 	if(cmd->flags & MMC_FLAG_ACMD)
 		c |= APP_CMD;
			
			  Disable auto CMD12 at IO_RW_EXTENDED and
			  SET_BLOCK_COUNT when doing multiple block transfer
 Fire off the command 
	
	  Transfer the data
 if count was multiple of 4 
 if count was even number 
 if count was odd number 
	
	  FIXME
	 
	  driver and this function are assuming that
	  it is used as little endian
  This chip always returns (at least?) as much data as you ask for.
  I'm unsure what happens if you ask for less than a block. This should be
  looked into to ensure that a funny length read doesn't hose the controller.
 Transfer the data 
 needs to be called with host->lock held 
 FIXME - return correct transfer count on errors 
	
	  FIXME: other drivers allow an optional stop command of any given type
	         which we dont do, as the chip can auto generate them.
	         Perhaps we can be smarter about when to use auto CMD12 and
	         only issue the auto request when we know this is the desired
	         stop command, allowing fallback to the stop command the
	         upper layers expect. For now, we do what works.
 fill in response from auto CMD12 
		
		  Has all data been written out yet? Testing on SuperH showed,
		  that in most cases the first interrupt comes already with the
		  BUSY status bit clear, but on some operations, like mount or
		  in the beginning of a write  sync  umount, there is one
		  DATAEND interrupt with the BUSY bit set, in this cases
		  waiting for one more interrupt fixes the problem.
	 This controller is sicker than the PXA one. Not only do we need to
	  drop the top 8 bits of the first response word, we also need to
	  modify the order of the response for short response command types.
	 If there is data to handle we enable data IRQs here, and
	  we will ultimatley finish the request in the data_end handler.
	  If theres no data or we encountered an error, finish now.
 Card insert  remove attempts 
 Command completion 
 Data transfer 
 Data transfer completion 
 Clear the status except the interrupt status 
 Some hardware cannot perform 2 byte requests in 48 bit mode 
 Set transfer length  blocksize 
 Process requests from the MMC layer 
 If not SET_BLOCK_COUNT, clear old data 
 Clear all 
 Error means retune, but executed command was still successful 
 If SET_BLOCK_COUNT, continue with main command 
 .set_ios() is returning void, so, no chance to report an error 
		
		  Attention: empiric value. With a b43 WiFi SDIO card this
		  delay proved necessary for reliable card-insertion probing.
		  100us were not enough. Is this the same 140us delay, as in
		  tmio_mmc_set_ios()?
	
	  It seems, VccQ should be switched on after Vcc, this is also what the
	  omap_hsmmc.c driver does.
 Set MMC clock  power.
  Note: This controller uses a simple divider scheme therefore it cannot
  run a MMC card at full speed (20MHz). The max clock is 24MHz on SD, but as
  MMC wont run that fast, it has to be clocked at 12MHz which is the next
  slowest setting.
 For R-Car Gen2+, we need to reset SDHI specific SCC 
 Let things settle. delay taken from winCE driver 
 use ocr_mask if no regulator 
	
	  try again.
	  There is possibility that regulator has not been probed
	
	  DEPRECATED:
	  For new platforms, please use "disable-wp" instead of
	  "toshiba,mmc-wrprotect-disable"
	
	  Check the sanity of mmc->f_min to prevent host->set_clock() from
	  looping forever...
	
	  Look for a card detect GPIO, if it fails with anything
	  else than a probe deferral, just live without it.
	
	  While using internal tmio hardware logic for card detection, we need
	  to ensure it stays powered for it to work.
 Init delayed work for request timeouts 
 See if we also get DMA 
 SPDX-License-Identifier: GPL-2.0-or-later
   driversmmchostvia-sdmmc.c - VIA SDMMC Card Reader driver
   Copyright (c) 2008, VIA Technologies Inc. All Rights Reserved.
  PCI registers
  SDC MMIO Registers
  Bit 0 -Bit 10 : Block length. So, the maximum block length should be 2048.
  Bit 11 - Bit 13 : Reserved.
  GPIDET : Select GPI pin to detect card, GPI means CR_CD# in top design.
  INTEN : Enable SD host interrupt.
  Bit 16 - Bit 31 : Block count. So, the maximun block count should be 65536.
  MBDIE : Multiple Blocks transfer Done Interrupt Enable
  BDDIE : Block Data transfer Done Interrupt Enable
  CIRIE : Card Insertion or Removal Interrupt Enable
  CRDIE : Command-Response transfer Done Interrupt Enable
  CRTOIE : Command-Response response TimeOut Interrupt Enable
  ASCRDIE : Auto Stop Command-Response transfer Done Interrupt Enable
  DTIE : Data access Timeout Interrupt Enable
  SCIE : reSponse CRC error Interrupt Enable
  RCIE : Read data CRC error Interrupt Enable
  WCIE : Write data CRC error Interrupt Enable
  CECC : Reserved
  WP : SD card Write Protect status
  SLOTD : Reserved
  SLOTG : SD SLOT status(Gpi pin status)
  MBD : Multiple Blocks transfer Done interrupt status
  BDD : Block Data transfer Done interrupt status
  CD : Reserved
  CIR : Card Insertion or Removal interrupt detected on GPI pin
  IO : Reserved
  CRD : Command-Response transfer Done interrupt status
  CRTO : Command-Response response TimeOut interrupt status
  ASCRDIE : Auto Stop Command-Response transfer Done interrupt status
  DT : Data access Timeout interrupt status
  SC : reSponse CRC error interrupt status
  RC : Read data CRC error interrupt status
  WC : Write data CRC error interrupt status
  CFE : Enable SD host automatic Clock FReezing
 0x38-0xFF reserved 
  Data DMA Control Registers
  DIR :Transaction Direction
  0 : From card to memory
  1 : From memory to card
0x14-0xFF reserved
  PCI Control Registers
0x0 - 0x1 reserved
  SFTRST :
  0 : Soft reset all the controller and it will be de-asserted automatically
  1 : Soft reset is de-asserted
  3V3 : Pad power select
  0 : 1.8V
  1 : 3.3V
  NOTE : No mater what the actual value should be, this bit always
  read as 0. This is a hardware bug.
  PAD_PWRON : Pad Power onoff select
  0 : Power off
  1 : Power on
   NOTE : No mater what the actual value should be, this bit always
  read as 0. This is a hardware bug.
0xB-0xFF reserved
 some devices need a very long delay for power to stabilize 
 It seems that our DMA can not work normally with 375kHz clock 
 FIXME: don't brute-force 8MHz but use PIO at 375kHz !! 
 Sanity checks 
Command index
Response type
Command control
Hardware cannot do scatter lists
 device-specific quirks 
 Ensure we don't accept more commands from mmc layer 
 Disable generating further interrupts 
 make sure all DMA is stopped 
 switch off power 
 SPDX-License-Identifier: GPL-2.0-only
 linuxdriversmmchostsdhci-s3c.c
  Copyright 2008 Openmoko Inc.
  Copyright 2008 Simtec Electronics
       Ben Dooks <ben@simtec.co.uk>
       http:armlinux.simtec.co.uk
  SDHCI (HSMMC) support for Samsung SoC
  struct sdhci_s3c - S3C SDHCI instance
  @host: The SDHCI host created
  @pdev: The platform device we where created from.
  @ioarea: The resource created when we claimed the IO area.
  @pdata: The platform data for this controller.
  @cur_clk: The index of the current bus clock.
  @ext_cd_irq: External card detect interrupt.
  @clk_io: The clock for the internal bus interface.
  @clk_rates: Clock frequencies.
  @clk_bus: The clocks that are available for the SDMMC bus clock.
  @no_divider: No or non-standard internal clock divider.
  struct sdhci_s3c_drv_data - S3C SDHCI platform specific driver data
  @sdhci_quirks: sdhci host specific quirks.
  @no_divider: no or non-standard internal clock divider.
  Specifies platform specific configuration of sdhci controller.
  Note: A structure for driver specific platform data is used for future
  expansion of its usage.
  sdhci_s3c_get_max_clk - callback to get maximum clock frequency.
  @host: The SDHCI host instance.
  Callback to return the maximum clock rate acheivable by the controller.
  sdhci_s3c_consider_clock - consider one the bus clocks for current setting
  @ourhost: Our SDHCI instance.
  @src: The source clock index.
  @wanted: The clock frequency wanted.
	
	  If controller uses a non-standard clock division, find the best clock
	  speed possible with selected clock source and skip the division.
  sdhci_s3c_set_clock - callback on clock change
  @host: The SDHCI host being changed
  @clock: The clock rate being requested.
  When the card's clock is going to be changed, look at the new frequency
  and find the best clock source to go with it.
 don't bother if the clock is going off. 
 select the new clock source 
 turn clock off to card before changing clock source 
 reprogram default hardware configuration 
 reconfigure the controller for new clock rate 
  sdhci_s3c_get_min_clock - callback to get minimal supported clock value
  @host: The SDHCI host being queried
  To init mmc host properly a minimal clock value is needed. For high system
  bus clock's values the standard formula gives values out of allowed range.
  The clock still can be set to lower values, if clock source other then
  system bus is selected.
 sdhci_cmu_get_max_clk - callback to get maximum clock frequency.
 sdhci_cmu_get_min_clock - callback to get minimal supported clock value. 
 sdhci_cmu_set_clock - callback on clock change.
 If the clock is going off, set to 0 at clock control register 
 Reset SD Clock Enable 
 Wait max 20 ms 
 if the bus-width property is not specified, assume width as 1 
 get the card detection method 
 assuming internal card detect that will be configured by pinctrl 
 enable the local io clock and keep it running for the moment. 
 Ensure we have minimal gpio selected CMDCLKDetect 
 Setup quirks for the controller 
	 we currently see overruns on errors, so disable the SDMA
 CONFIG_MMC_SDHCI_S3C_DMA 
	 It seems we do not get an DATA transfer complete on non-busy
	  transfers, not sure if this is a problem with this specific
 This host supports the Auto CMD12 
 Samsung SoCs need BROKEN_ADMA_ZEROLEN_DESC 
 HSMMC on Samsung SoCs uses SDCLK as timeout clock 
	
	  If controller does not have internal clock divider,
	  we can use overriding functions instead of default.
 It supports additional host capabilities if needed 
 SPDX-License-Identifier: GPL-2.0-or-later
   sdricoh_cs.c - driver for Ricoh Secure Digital Card Readers that can be
      found on some Ricoh RL5c476 II cardbus bridge
   Copyright (C) 2006 - 2008 Sascha Sommer <saschasommer@freenet.de>
#define DEBUG
#define VERBOSE_DEBUG
 io region 
 registers 
 flags for the R21C_STATUS register 
 timeouts 
 list of supported pcmcia devices 
 vendor and device strings followed by their crc32 hashes 
 mmc privdata 
 MMC structure 
 register io helper functions 
 do not do this check in the loop as some commands fail otherwise 
 reset status reg? 
 MMC_APP_CMDs need some special handling 
 fill parameters 
 wait for command completion 
	
	  Don't check for timeout status in the loop, as it's not always reset
	  correctly.
 status register ? 
 wait until the data is available 
 read data 
 write data 
 readwrite commands seem to require this 
 read response buffer 
 CRC is stripped so we need to do some shifting. 
 transfer data 
 enter data reading mode 
 FIXME check busy flag 
 some notebooks seem to have the locked flag switched 
 initialize the control and register it to the mmc framework 
 map iomem 
 check version? 
 allocate privdata 
	 FIXME: frequency and voltage handling is done by the controller
 reset the controller 
 search for supported mmc controllers 
 search pci cardbus bridge that contains the mmc controller 
 the io region is already claimed by yenta_socket... 
 try to init the device 
 remove mmc host 
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriversmmchostomap.c
   Copyright (C) 2004 Nokia Corporation
   Written by Tuukka Tikkanen and Juha Yrjölä<juha.yrjola@nokia.com>
   Misc hacks here and there by Tony Lindgren <tony@atomide.com>
   Other hacks (DMA, SD, etc) by David Brownell
  Command types
 Specifies how often in millisecs to poll for card status changes
 16xx chips have 2 MMC blocks 
 for changing enabled state 
		 Doing the dummy read here seems to work around some bug
		  at least in OMAP24xx silicon where the command would not
 Keeps clock running for at least 8 cycles on valid freq 
 Check for any pending requests 
 The current slot should not have a request in queue 
 Our hardware needs to know exact type 
 resp 1, 1b, 6, 7 
 Claim nothing transferred on error... 
	 NOTE:  MMC layer will sometimes poll-wait CMD13 next, issuing
	  dozens of requests until the card finishes writing data.
	  It'd be cheaper to just wait till an EOFB interrupt arrives...
 Sending abort takes 80 clocks. Have some extra and round up 
 response type 2 
 response types 1, 1b, 3, 4, 5, 6 
  Abort stuck command. Can occur when card is removed while it is being
  read.
 PIO only 
 PIO only 
 Round up to handle odd number of bytes to transfer 
 Timeouts are routine with some commands 
		
		  NOTE: On 1610 the END_OF_CMD may come too early when
		  starting a write
 Other subsystems can call in here before we're initialised. 
	
	  If no card is inserted, we postpone polling until
	  the cover has been closed.
 If we got to the end of DMA, assume everything went well 
 Set maximum timeout 
 Check if we need to use timeout multiplier register 
	 cope with calling layer confusion; it issues "single
	  block" writes using multi-block scatterlists.
 Only do DMA for entire blocks 
		
		  FIFO is 16x2 bytes on 15xx, and 32x2 bytes on 16xx
		  and 24xx. Use 16 or 32 word frames when the
		  blocksize is at least that large. Blocksize is
		  usually 512 bytes; but not for some SD reads.
 Only reconfigure if we have a different burst size 
 Revert to PIO? 
 only touch fifo AFTER the controller readies it 
 Cannot touch dsor yet, just power up MMC 
	 On insanely high arm_per frequencies something sometimes
	  goes somehow out of sync, and the POW bit is not being set,
	  which results in the while loop below getting stuck.
 worst case at 400kHz, 80 cycles makes 200 microsecs 
 Send clock cycles, poll completion 
	 Use scatterlist DMA to reduce per-transfer costs.
	  NOTE max_seg_size assumption that small blocks aren't
	  normally used (except e.g. for reading SD registers).
 BLEN is 11 bits (+1) 
 NBLK is 11 bits (+1) 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2010 Google, Inc.
 Tegra SDHOST controller vendor register definitions 
  HAS_PADCALIB NVQUIRK is for SoC's supporting auto calibration of pads
  drive strength.
  NEEDS_PAD_CONTROL NVQUIRK is for SoC's having separate 3V3 and 1V8 pads.
  3V31V8 pad selection happens through pinctrl state selection depending
  on the signaling mode.
  NVQUIRK_HAS_TMCLK is for SoC's having separate timeout clock for Tegra
  SDMMC hardware data timeout.
 SDMMC CQE Base Address for Tegra Host Ver 4.1 and Higher 
 Magic pull up and pull down pad calibration offsets 
 Erratum: Version register is invalid in HW. 
		
		  Postpone this write, we must do it together with a
		  command write that is down below.
	 Seems like we're getting spurious timeout and crc errors, so
	  disable signalling of them. In case of real errors software
	  timers should take care of eventually detecting them.
 Erratum: Must enable block gap interrupt detection 
	
	  Write-enable shall be assumed if GPIO is missing in a board's
	  device-tree because SDHCI's WRITE_PROTECT bit doesn't work on
	  Tegra.
	
	  The SoCs which have NVQUIRK_NEEDS_PAD_CONTROL require software pad
	  voltage configuration in order to perform voltage switching. This
	  means that valid pinctrl info is required on SDHCI instances capable
	  of performing voltage switching. Whether or not an SDHCI instance is
	  capable of voltage switching is determined based on the regulator.
 Fixed voltage, no pad control required. 
	
	  Touching the tap values is a bit tricky on some SoC generations.
	  The quirk enables a workaround for a glitch that sometimes occurs if
	  the tap values are changed.
 Erratum: Enable SDHCI spec v3.00 support 
 Advertise UHS modes as supported by host 
	
	  Enable or disable the additional IO pad used by the drive strength
	  calibration process.
 PADS Drive Strength 
 Dual Voltage PADS Voltage selection 
 Set initial offset before auto-calibration 
 10 ms timeout 
 Disable automatic cal and use fixed Drive Strengths 
	
	  Different fail-safe drive strength values based on the signaling
	  voltage are applicable for SoCs supporting 3V3 and 1V8 pad controls.
	  So, avoid reading below device tree properties for SoCs that don't
	  have NVQUIRK_NEEDS_PAD_CONTROL.
 100 ms calibration interval is specified in the TRM 
	
	  In DDR5052 modes the Tegra SDHCI controllers require the SDHCI
	  divider to be configured to divided the host clock by two. The SDHCI
	  clock divider is calculated as part of sdhci_set_clock() by
	  sdhci_calc_clk(). The divider is calculated from host->max_clk and
	  the requested clock rate.
	 
	  By setting the host->max_clk to clock  2 the divider calculation
	  will always result in the correct value for DDR5052 modes,
	  regardless of clock rate rounding, which may happen if the value
	  from clk_get_rate() is used.
 1 ms sleep, 5 ms timeout 
	
	  Read auto-tuned results and extract good valid passing window by
	  filtering out un-wanted bubblepartialmerged windows.
 discard merged window and bubble window 
 set tap at middle of valid window 
 set tap location at fixed tap relative to the first edge 
 retain HW tuned tap to use incase if no correction is needed 
		
		  Upper and Lower bound thresholds used to detect merged and
		  bubble windows
		
		  fixed tap is used when HW tuning result contains single edge
		  and tap is set at fixed tap delay relative to the first edge
		
		  partial window includes edges of the tuning range.
		  merged window includes more taps so window width is higher
		  than upper threshold.
 Don't set default tap on tunable modes. 
	
	  Start search for minimum tap value at 10, as smaller values are
	  may wrongly be reported as working but fail at higher speeds,
	  according to the TRM.
 Find the maximum tap value that still passes. 
 The TRM states the ideal tap value is at 75% in the passing range. 
	
	  During CQE resumeunhalt, CQHCI driver unhalts CQE prior to
	  cqhci_host_ops enable where SDHCI DMA and BLOCK_SIZE registers need
	  to be re-configured.
	  Tegra CQHCISDHCI prevents write access to block size register when
	  CQE is unhalted. So handling CQE resume sequence here to configure
	  SDHCI block registers prior to exiting CQE halt state.
		
		  CQE usually resumes very quick, but incase if Tegra CQE
		  doesn't resume retry unhalt.
	
	  Tegra CQHCISDMMC design prevents write access to sdhci block size
	  register when CQE is enabled and unhalted.
	  CQHCI driver enables CQE prior to activation, so disable CQE before
	  programming block size in sdhci controller and enable it back.
	
	  CMD CRC errors are seen sometimes with some eMMC devices when status
	  command is sent during transfer of last data block which is the
	  default case as send status command block counter (CBC) is 1.
	  Recommended fix to set CBC to 0 allowing send status command only
	  when data lines are idle.
	
	  HW busy detection timeout is based on programmed data timeout
	  counter and maximum supported timeout is 11s which may not be
	  enough for long operations like cache flush, sleep awake, erase.
	 
	  ERASE_TIMEOUT_LIMIT bit of VENDOR_MISC_CTRL register allows
	  host controller to wait for busy state until the card is busy
	  without HW timeout.
	 
	  So, use infinite busy wait mode for operations that may take
	  more than maximum HW busy timeout of 11s otherwise use finite
	  busy wait mode.
		   
		     Auto-CMD23 leads to "Got command interrupt 0x00010000 even
		     though no command operation was in progress."
		    
		     The exact reason is unknown, as the same hardware seems
		     to support Auto CMD23 on a downstream 3.1 kernel.
 Hook to periodically rerun pad calibration 
 HW busy detection is supported, but R1B responses are required. 
	
	  Tegra210 has a separate SDMMC_LEGACY_TM clock used for host
	  timeout clock and SW can choose TMCLK or SDCLK for hardware
	  data timeout through the bit USE_TMCLK_FOR_DATA_TIMEOUT of
	  the register SDHCI_TEGRA_VENDOR_SYS_SW_CTRL.
	 
	  USE_TMCLK_FOR_DATA_TIMEOUT bit default is set to 1 and SDMMC uses
	  12Mhz TMCLK which is advertised in host capability register.
	  With TMCLK of 12Mhz provides maximum data timeout period that can
	  be achieved is 11s better than using SDCLK for data timeout.
	 
	  So, TMCLK is set to 12Mhz and kept enabled all the time on SoC's
	  supporting separate TMCLK.
 SPDX-License-Identifier: GPL-2.0-only
  Atmel MultiMedia Card Interface driver
  Copyright (C) 2004-2008 Atmel Corporation
  Superset of MCI IP registers integrated in Atmel AT91 Processor
  Registers and bitfields marked with [2] are only available in MCI2
 MCI Register Definitions 
 Control 
 MCI Enable 
 MCI Disable 
 Power Save Enable 
 Power Save Disable 
 Software Reset 
 Mode 
 Clock Divider 
 Power Saving Divider 
 Read Proof 
 Write Proof 
 Force Byte Transfer 
 Padding Value 
 PDC-oriented Mode 
 LSB of Clock Divider 
 Data Timeout 
 Data Timeout Cycles 
 Data Timeout Multiplier 
 SD Card  SDIO 
 Select SD slot A 
 Select SD slot A 
 1-bit data bus 
 4-bit data bus 
 8-bit data bus[2] 
 Command Argument 
 Command 
 Command Opcode 
 No response 
 48-bit response 
 136-bit response 
 Initialization command 
 Synchronized command 
 Interrupt command 
 Interrupt response 
 Open Drain 
 Max latency 5 cycles 
 Max latency 64 cycles 
 Start data transfer 
 Stop data transfer 
 Write data 
 Read data 
 Single-block transfer 
 Multi-block transfer 
 MMC Stream transfer 
 SDIO Byte transfer 
 SDIO Block transfer 
 SDIO Suspend Command 
 SDIO Resume Command 
 Block 
 Data Block Count 
 Data Block Length 
 Completion Signal Timeout[2] 
 CST cycles 
 CST multiplier 
 Response 0 
 Response 1 
 Response 2 
 Response 3 
 Receive Data 
 Transmit Data 
 Status 
 Interrupt Enable 
 Interrupt Disable 
 Interrupt Mask 
 Command Ready 
 Receiver Ready 
 Transmitter Ready 
 Data Block Ended 
 Data Transfer In Progress 
 Data Not Busy 
 End of RX Buffer 
 End of TX Buffer 
 SDIO IRQ in slot A 
 SDIO IRQ in slot B 
 SDIO Read Wait Operation Status 
 CE-ATA Completion Signal Received 
 RX Buffer Full 
 TX Buffer Empty 
 Response Index Error 
 Response Direction Error 
 Response CRC Error 
 Response End Bit Error 
 Response Time-Out Error 
 Data CRC Error 
 Data Time-Out Error 
 Completion Signal Time-out Error 
 DMA Block Overrun Error 
 DMA Transfer Done 
 FIFO Empty Flag 
 Transfer Done Flag 
 Boot Operation Acknowledge Received 
 Boot Operation Acknowledge Error 
 RX Overrun Error 
 TX Underrun Error 
 DMA Configuration[2] 
 DMA Write Buffer Offset 
 DMA Channel Read and Write Chunk Size 
 DMA Hardware Handshaking Enable 
 Configuration[2] 
 MCI Internal FIFO control mode 
 Flow Error flag reset control mode 
 High Speed Mode 
 Synchronize on the last block 
 Write Protection Mode[2] 
 WP Enable 
 WP Key 
 Write Protection Status[2] 
 Version 
 FIFO Aperture[2] 
 This is not including the FIFO Aperture on MCI2 
 Register access macros 
  struct atmel_mci - MMC controller state shared between all slots
  @lock: Spinlock protecting the queue and associated data.
  @regs: Pointer to MMIO registers.
  @sg: Scatterlist entry currently being processed by PIO or PDC code.
  @sg_len: Size of the scatterlist
  @pio_offset: Offset into the current scatterlist entry.
  @buffer: Buffer used if we don't have the rw proof capability. We
       don't have the time to switch pdc buffers so we have to use only
       one buffer for the full transaction.
  @buf_size: size of the buffer.
  @buf_phys_addr: buffer address needed for pdc.
  @cur_slot: The slot which is currently using the controller.
  @mrq: The request currently being processed on @cur_slot,
 	or NULL if the controller is idle.
  @cmd: The command currently being sent to the card, or NULL.
  @data: The data currently being transferred, or NULL if no data
 	transfer is in progress.
  @data_size: just data->blocks  data->blksz.
  @dma: DMA client state.
  @data_chan: DMA channel being used for the current data transfer.
  @dma_conf: Configuration for the DMA slave
  @cmd_status: Snapshot of SR taken upon completion of the current
 	command. Only valid when EVENT_CMD_COMPLETE is pending.
  @data_status: Snapshot of SR taken upon completion of the current
 	data transfer. Only valid when EVENT_DATA_COMPLETE or
 	EVENT_DATA_ERROR is pending.
  @stop_cmdr: Value to be loaded into CMDR when the stop command is
 	to be sent.
  @tasklet: Tasklet running the request state machine.
  @pending_events: Bitmask of events flagged by the interrupt handler
 	to be processed by the tasklet.
  @completed_events: Bitmask of events which the state machine has
 	processed.
  @state: Tasklet state.
  @queue: List of slots waiting for access to the controller.
  @need_clock_update: Update the clock rate before the next request.
  @need_reset: Reset controller before next request.
  @timer: Timer to balance the data timeout error flag which cannot rise.
  @mode_reg: Value of the MR register.
  @cfg_reg: Value of the CFG register.
  @bus_hz: The rate of @mck in Hz. This forms the basis for MMC bus
 	rate and timeout calculations.
  @mapbase: Physical address of the MMIO registers.
  @mck: The peripheral bus clock hooked up to the MMC controller.
  @pdev: Platform device associated with the MMC controller.
  @slot: Slots sharing this MMC controller.
  @caps: MCI capabilities depending on MCI version.
  @prepare_data: function to setup MCI before data transfer which
  depends on MCI capabilities.
  @submit_data: function to start data transfer which depends on MCI
  capabilities.
  @stop_transfer: function to stop data transfer which depends on MCI
  capabilities.
  Locking
  =======
  @lock is a softirq-safe spinlock protecting @queue as well as
  @cur_slot, @mrq and @state. These must always be updated
  at the same time while holding @lock.
  @lock also protects mode_reg and need_clock_update since these are
  used to synchronize mode register updates with the queue
  processing.
  The @mrq field of struct atmel_mci_slot is also protected by @lock,
  and must always be written at the same time as the slot is added to
  @queue.
  @pending_events and @completed_events are accessed using atomic bit
  operations, so they don't need any locking.
  None of the fields touched by the interrupt handler need any
  locking. However, ordering is important: Before EVENT_DATA_ERROR or
  EVENT_DATA_COMPLETE is set in @pending_events, all data-related
  interrupts must be disabled and @data_status updated with a
  snapshot of SR. Similarly, before EVENT_CMD_COMPLETE is set, the
  CMDRDY interrupt must be disabled and @cmd_status updated with a
  snapshot of SR, and before EVENT_XFER_COMPLETE can be set, the
  bytes_xfered field of @data must be written. This is ensured by
  using barriers.
  struct atmel_mci_slot - MMC slot state
  @mmc: The mmc_host representing this slot.
  @host: The MMC controller this slot is using.
  @sdc_reg: Value of SDCR to be written before using this slot.
  @sdio_irq: SDIO irq mask for this slot.
  @mrq: mmc_request currently being processed or waiting to be
 	processed, or NULL when the slot is idle.
  @queue_node: List node for placing this node in the @queue list of
 	&struct atmel_mci.
  @clock: Clock rate configured by set_ios(). Protected by host->lock.
  @flags: Random state bits associated with the slot.
  @detect_pin: GPIO pin used for card detection, or negative if not
 	available.
  @wp_pin: GPIO pin used for card write protect sending, or negative
 	if not available.
  @detect_is_active_high: The state of the detect pin when it is active.
  @detect_timer: Timer used for debouncing @detect_pin interrupts.
  The debugfs stuff below is mostly optimized away when
  CONFIG_DEBUG_FS is not set.
 Make sure we get a consistent snapshot 
	
	  Grab a more or less consistent snapshot. Note that we're
	  not disabling interrupts, so IMR and SR may not be
	  consistent.
 Don't read RSPR and RDR; it will consume the data there 
 sentinel  }
 CONFIG_OF 
  Fix sconfig's burst size according to atmel MCI. We need to convert them as:
  1 -> 0, 4 -> 1, 8 -> 2, 16 -> 3.
  With version 0x600, we need to convert them as: 1 -> 0, 2 -> 1, 4 -> 2,
  8 -> 3, 16 -> 4.
  This can be done by finding most significant bit set.
		
		  With some SDIO modules, sometimes DMA transfer hangs. If
		  stop_transfer() is not called then the DMA request is not
		  removed, following ones are queued and never computed.
	
	  It is easier here to use us instead of ns for the timeout,
	  it prevents from overflows during calculation.
 Maximum clock frequency is host->bus_hz2 
  Return mask with command flags to be enabled for this command.
	
	  This should really be MAXLAT_5 for CMD2 and ACMD41, but
	  it's too difficult to determine whether this is an ACMD or
	  not. Better make it 64.
  Configure given PDC buffer taking care of alignement issues.
  Update host->data_size and host->sg.
 If size is different from modulo 4, transfer bytes 
 Else transfer 32-bits words 
 We assume the size of a page is 32-bits aligned 
  Configure PDC buffer according to the data size ie configuring one or two
  buffers. Don't use this function if you want to configure only the second
  buffer. In this case, use atmci_pdc_set_single_buf.
  Unmap sg lists, called when transfer is finished.
  Disable PDC transfers. Update pending flags to EVENT_XFER_COMPLETE after
  having received ATMCI_TXBUFE or ATMCI_RXBUFF interrupt. Enable ATMCI_NOTBUSY
  interrupt needed for both transfer directions.
  This function is called by the DMA driver from tasklet context.
 Disable DMA hardware handshaking on MCI 
	
	  If the card was removed, data will be NULL. No point trying
	  to send the stop command or waiting for NBUSY in this case.
		
		  Regardless of what the documentation says, we have
		  to wait for NOTBUSY even after block read
		  operations.
		 
		  When the DMA transfer is complete, the controller
		  may still be reading the CRC from the card, i.e.
		  the data transfer is still in progress and we
		  haven't seen all the potential error bits yet.
		 
		  The interrupt handler will schedule a different
		  tasklet to finish things up when the data transfer
		  is completely done.
		 
		  We may not complete the mmc request here anyway
		  because the mmc layer may call back and cause us to
		  violate the "don't submit new operations from the
		  completion callback" rule of the dma engine
		  framework.
  Returns a mask of interrupt flags to be enabled after the whole
  request has been prepared.
	
	  Errata: MMC data write operation with less than 12
	  bytes is impossible.
	 
	  Errata: MCI Transmit Data Register (TDR) FIFO
	  corruption when length is not multiple of 4.
  Set interrupt flags and set block length into the MCI mode register even
  if this value is also accessible in the MCI block register. It seems to be
  necessary before the High Speed MCI version. It also map sg and configure
  PDC registers.
 Enable pdc mode 
 Set BLKLEN 
 Configure PDC 
	
	  We don't do DMA on "complex" transfers, i.e. with
	  non-word-aligned buffers or lengths. Also, we don't bother
	  with all the DMA setup overhead for short transfers.
 If we don't have a channel, we can't do DMA 
  Start PDC according to transfer direction.
  Stop data transfer because error(s) occurred.
 Data transfer was stopped by the interrupt handler 
  Start a request: prepare data if needed, prepare the command and activate
  interrupts.
 Send init sequence (74 clock cycles) 
 Must set block countsize before sending command 
	
	  DMA transfer should be started before sending the command to avoid
	  unexpected errors especially for read operations in SDIO mode.
	  Unfortunately, in PDC mode, command has to be sent before starting
	  the transfer.
	
	  We could have enabled interrupts earlier, but I suspect
	  that would open up a nice can of interesting race
	  conditions (e.g. command and data complete, but stop not
	  prepared yet.)
	
	  We may "know" the card is gone even though there's still an
	  electrical connection. If so, we really need to communicate
	  this to the MMC core since there won't be any more
	  interrupts as the card is completely removed. Otherwise,
	  the MMC core might believe the card is still there even
	  though the card was just removed very slowly.
 We don't support multiple blocks of weird lengths. 
		
		  Use mirror of ios->clock to prevent race with mmc
		  core ios update when finding the minimum.
 Calculate clock divider 
		
		  WRPROOF and RDPROOF prevent overrunsunderruns by
		  stopping the clock when the FIFO is fullempty.
		  This state is not expected to last for long.
 setup High Speed mode in relation with card capacity 
 Called with host->lock held 
	
	  Update the MMC clock rate if necessary. This may be
	  necessary if set_ios() is called when a different slot is
	  busy transferring data.
 Read the response from the card (up to 16 bytes) 
	
	  atmci_cleanup_slot() sets the ATMCI_SHUTDOWN flag before
	  freeing the interrupt. We must not re-enable the interrupt
	  if it has been freed, and if we're shutting down, it
	  doesn't really matter whether the card is present or not.
 Clean up queue if present 
				
				  Reset controller to terminate any ongoing
				  commands or data transfers.
			
			  Command has been sent, we are waiting for command
			  ready. Then we have three next states possible:
			  END_REQUEST by default, WAITING_NOTBUSY if it's a
			  command needing it or DATA_XFER if there is data.
				
				  If there is a command error don't start
				  data transfer.
			
			  A data transfer is in progress. The event expected
			  to move to the next state depends of data transfer
			  type (PDC or DMA). Once transfer done we can move
			  to the next step which is WAITING_NOTBUSY in write
			  case and directly SENDING_STOP in read case.
			
			  We can be in the state for two reasons: a command
			  requiring waiting not busy signal (stop command
			  included) or a write operation. In the latest case,
			  we need to send a stop command.
				
				  For some commands such as CMD53, even if
				  there is data transfer, there is no stop
				  command to send.
			
			  In this state, it is important to set host->data to
			  NULL (which is tested in the waiting notbusy state)
			  in order to go to the end request state instead of
			  sending stop again.
 atmci_request_end() sets host->state 
			
			  We can receive this interruption before having configured
			  the second pdc buffer, so we need to reconfigure first and
			  second buffers again
			
			  We can receive this interruption before having configured
			  the second pdc buffer, so we need to reconfigure first and
			  second buffers again
		
		  First mci IPs, so mainly the ones having pdc, have some
		  issues with the notbusy signal. You can't get it after
		  data transmission if you have not sent a stop command.
		  The appropriate workaround is to use the BLKE signal.
	
	  Disable interrupts until the pin has stabilized and check
	  the state then. Use mod_timer() since we may be in the
	  middle of the timer routine when this interrupt triggers.
	
	  Without the readwrite proof capability, it is strongly suggested to
	  use only one bit for data to prevent fifo underruns and overruns
	  which will corrupt data.
 Assume card is present initially 
 Debugfs stuff is cleaned up by mmc core 
  HSMCI (High Speed MCI) module is not fully compatible with MCI module.
  HSMCI provides DMA support and a new config register but no more supports
  PDC.
 keep only major version number 
 Get MCI capabilities and set operations according to it 
 We need at least one slot to succeed 
 SPDX-License-Identifier: GPL-2.0-or-later
  Freescale eSDHC controller driver.
  Copyright (c) 2007, 2010, 2012 Freescale Semiconductor, Inc.
  Copyright (c) 2009 MontaVista Software, Inc.
  Copyright 2020 NXP
  Authors: Xiaobo Xie <X.Xie@freescale.com>
 	    Anton Vorontsov <avorontsov@ru.mvista.com>
  esdhc_read_fixup - Fixup the value read from incompatible eSDHC register
 		       to make it compatible with SD spec.
  @host: pointer to sdhci_host
  @spec_reg: SD spec register address
  @value: 32bit eSDHC register value on spec_reg address
  In SD spec, there are 8163264 bits registers, while all of eSDHC
  registers are 32 bits. There are differences in register size, register
  address, register function, bit position and function between eSDHC spec
  and SD spec.
  Return a fixed up register value
	
	  The bit of ADMA flag in eSDHC is not compatible with standard
	  SDHC register, so set fake flag SDHCI_CAN_DO_ADMA2 when ADMA is
	  supported by eSDHC.
	  And for many FSL eSDHC controller, the reset value of field
	  SDHCI_CAN_DO_ADMA1 is 1, but some of them can't support ADMA,
	  only these vendor version is greater than 2.20x12 support ADMA.
	
	  The DAT[3:0] line signal levels and the CMD line signal level are
	  not compatible with standard SDHC register. The line signal levels
	  DAT[7:0] are at bits 31:24 and the command line signal level is at
	  bit 23. All other bits are the same as in the standard SDHC
	  register.
	
	  DTS properties of mmc host are used to enable each speed mode
	  according to soc and board capability. So clean up
	  SDR50SDR104DDR50 support bits here.
	
	  Some controllers have unreliable Data Line Active
	  bit for commands with busy signal. This affects
	  Command Inhibit (data) bit. Just ignore it since
	  MMC core driver has already polled card status
	  with CMD13 after any command with busy siganl.
	 Workaround for T4240-R1.0-R2.0 eSDHC which has incorrect
	  vendor version and spec version information.
	
	  "DMA select" locates at offset 0x28 in SD specification, but on
	  P5020 or P3041, it locates at 0x29.
 DMA select is 22,23 bits in Protocol Control Register 
 fixup the result 
  esdhc_write_fixup - Fixup the SD spec register value so that it could be
 			written into eSDHC register.
  @host: pointer to sdhci_host
  @spec_reg: SD spec register address
  @value: 81632bit SD spec register value that would be written
  @old_value: 32bit eSDHC register value on spec_reg address
  In SD spec, there are 8163264 bits registers, while all of eSDHC
  registers are 32 bits. There are differences in register size, register
  address, register function, bit position and function between eSDHC spec
  and SD spec.
  Return a fixed up register value
	
	  Enabling IRQSTATEN[BGESEN] is just to set IRQSTAT[BGE]
	  when SYSCTL[RSTD] is set for some special operations.
	  No any impact on other operation.
		
		  Postpone this write, we must do it together with a
		  command write that is down below. Return old value.
		
		  Two last DMA bits are reserved, and first one is used for
		  non-standard blksz of 4096 bytes that we don't support
		  yet. So clear the DMA boundary bits.
	
	  eSDHC doesn't have a standard power control register, so we do
	  nothing here to avoid incorrect operation.
	
	  "DMA select" location is offset 0x28 in SD specification, but on
	  P5020 or P3041, it's located at 0x29.
		
		  If host control register is not standard, exit
		  this function
 DMA select is 22,23 bits in Protocol Control Register 
 Prevent SDHCI core from writing reserved bits (e.g. HISPD) 
	 Starting SW tuning requires ESDHC_SMPCLKSEL to be set
	  1us later after ESDHC_EXTN is set.
	 Starting SW tuning requires ESDHC_SMPCLKSEL to be set
	  1us later after ESDHC_EXTN is set.
  For Abort or Suspend after Stop at Block Gap, ignore the ADMA
  error(IRQSTAT[ADMAE]) if both Transfer Complete(IRQSTAT[TC])
  and Block Gap Event(IRQSTAT[BGE]) are also set.
  For Continue, apply soft reset for data(SYSCTL[RSTD]);
  and re-issue the entire read transaction from beginning.
	
	  Force update to the next DMA block boundary.
	
	  IPGENHCKENPEREN bits exist on eSDHC whose vendor version
	  is 2.2 or lower.
	
	  Wait max 20 ms. If vendor version is 2.2 or lower, do not
	  wait clock stable bit which does not exist.
 Wait max 20 ms 
 Start pre_div at 2 for vendor version < 2.3. 
 Fix clock value. 
 Calculate pre_div and div. 
 Limit clock division for HS400 200MHz clock for quirk. 
 Set clock division into register. 
	
	  Wait max 20 ms. If vendor version is 2.2 or lower, do not
	  wait clock stable bit which does not exist.
 Additional setting for HS400. 
 Wait max 20 ms 
	
	  Add delay to make sure all the DMA transfers are finished
	  for quirk.
	
	  Save bus-width for eSDHC whose vendor version is 2.2
	  or lower for data reset.
	
	  Restore bus-width setting and interrupt registers for eSDHC
	  whose vendor version is 2.2 or lower for data reset.
	
	  Some bits have to be cleaned manually for eSDHC whose spec
	  version is higher than 3.0 for all reset.
		
		  Initialize eSDHC_DLLCFG1[DLL_PD_PULSE_STRETCH_SEL] to
		  0 for quirk.
 The SCFG, Supplemental Configuration Unit, provides SoC specific
  configuration and status registers for the device. There is a
  SDHC IO VSEL control register on SCFG for some platforms. It's
  used to support SDHC IO voltage switching.
 SDHC IO VSEL control register definition 
	
	  Signal Voltage Switching is only applicable for Host Controllers
	  v3.00 and above.
 Write TBCTL[11:8]=4'h8 
 Read TBCTL[31:0] register and rewrite again 
 Read the TBSTAT[31:0] register twice 
 Reset data lines by setting ESDHCCTL[RSTD] 
 Write 32'hFFFF_FFFF to IRQSTAT register 
	 If TBSTAT[15:8]-TBSTAT[7:0] > (4  div_ratio) + 2
	  or TBSTAT[7:0]-TBSTAT[15:8] > (4  div_ratio) + 2,
	  then program TBPTR[TB_WNDW_END_PTR] = 4  div_ratio
	  and program TBPTR[TB_WNDW_START_PTR] = 8  div_ratio.
 Program TBPTR[TB_WNDW_END_PTR] and TBPTR[TB_WNDW_START_PTR] 
 Program the software tuning mode by setting TBCTL[TB_MODE]=2'h3 
	 For tuning mode, the sd clock divisor value
	  must be larger than 3 according to reference manual.
	
	  The eSDHC controller takes the data timeout value into account
	  during tuning. If the SD card is too slow sending the response, the
	  timer will expire and a "Buffer Read Ready" interrupt without data
	  is triggered. This leads to tuning errors.
	 
	  Just set the timeout to the maximum value because the core will
	  already take care of it in sdhci_send_tuning().
 Do HW tuning 
		 For type2 affected platforms of the tuning erratum,
		  tuning may succeed although eSDHC might not have
		  tuned properly. Need to check tuning window.
		 If HW tuning fails and triggers erratum,
		  try workaround.
 Recover HS400 tuning flag 
 Do SW tuning 
 Retry both HWSW tuning with reduced clock. 
 Recover HS400 tuning flag 
	
	  There are specific registers setting for HS400 mode.
	  Clean all of them if controller is in HS400 mode to
	  exit HS400 mode before re-setting any speed mode.
 Isn't this already done by sdhci_resume_host() ? --rmk 
		
		  esdhc->peripheral_clock would be assigned with a value
		  which is eSDHC base clock when use periperal clock.
		  For some platforms, the clock value got by common clk
		  API is peripheral clock while the eSDHC base clock is
		  12 peripheral clock.
	
	  This bit is not able to be reset by SDHCI_RESET_ALL. Need to
	  initialize it as 1 or 0 once, to override the different value
	  which may be configured in bootloader.
		
		  Freescale messed up with P2020 as it has a non-standard
		  host control register
 call to generic mmc_of_parse to support additional capabilities 
 SPDX-License-Identifier: GPL-2.0
  Freescale eSDHC ColdFire family controller driver, platform bus.
  Copyright (c) 2020 Timesys Corporation
    Author: Angelo Dureghello <angelo.dureghello@timesys.it>
  Freescale eSDHC has DMA ERR flag at bit 28, not as std spec says, bit 25.
  Note: mcf is big-endian, single bytes need to be accessed at big endian
  offsets.
		
		  Recomposition needed, restore always endianness and
		  keep D3CD and AI, just setting bus width.
		
		  As for the fsl driver,
		  we have to set the mode in a single write here.
	
	  For SDHCI_HOST_VERSION, sdhci specs defines 0xFE,
	  a wrong offset for us, we are at 0xFC.
	
	  RM (25.3.9) sd pin clock must never exceed 25Mhz.
	  So forcing legacy mode at 25Mhz.
 Use maximum timeout counter 
	
	  ColdFire eSDHC clock.s
	 
	  pll -+->  outdiv1 --> fsys
	       +->  outdiv3 --> eSDHC clock --->  SDCCLKFS  DVS
	 
	  mcf5441x datasheet says:
	  (8.1.2) eSDHC should be 40 MHz max
	  (25.3.9) eSDHC input is, as example, 96 Mhz ...
	  (25.3.9) sd pin clock must never exceed 25Mhz
	 
	  fvco = fsys  outdvi1 + 1
	  fshdc = fvco  outdiv3 + 1
	
	  Apply divisors and re-enable all the clocks
	
	  On mcf5441x there is no hw sdma optionflag to select the dma
	  transfer endiannes. A swap after the transfer is needed.
		 
		   Mandatory quirk,
		   controller does not support cmd23,
		   without, on > 8G cards cmd23 is used, and
		   driver times out.
 Card_detect 
 We have a working card_detect back 
 SPDX-License-Identifier: GPL-2.0
  sdhci_am654.c - SDHCI driver for TI's AM654 SOCs
  Copyright (C) 2018 Texas Instruments Incorporated - https:www.ti.com
 CTL_CFG Registers 
 PHY Registers 
 Command Queue Host Controller Interface Base address 
 Disable delay chain mode 
 Configure PHY DLL frequency 
 Configure DLL TRIM 
 Configure DLL driver strength 
 Enable DLL 
	
	  Poll for DLL ready. Use a one second timeout.
	  Works in all experiments done so far
 Set ITAPCHGWIN before writing to ITAPDLY 
 Setup DLL Output TAP delay 
 Write to STRBSEL for HS400 speed mode 
 Setup DLL Output TAP delay 
 us 
		
		  According to the data manual, HISPD bit
		  should not be set in these speed modes.
		
		  Power on will not happen until the card detect debounce
		  timer expires. Wait at least 1.5 seconds for the power on
		  bit to be set
	
	  Tuning data remains in the buffer after tuning.
	  Do a command and data reset to get rid of it
 Enable ITAPDLY 
	
	  Having determined the length of the failing window and start of
	  the passing window calculate the length of the passing window and
	  set the final value halfway through it considering the range as a
	  circular buffer
 sentinel }
		
		  ti,otap-del-sel-legacy is mandatory, look for old binding
		  if not found.
			
			  Remove the corresponding capability
			  if an otap-del-sel value is not found
 Reset OTAP to default value 
 Calibrate IO lines 
 Enable pins by setting IO mux to 0 
 Set slot type based on SD or eMMC 
 Enable tuning for SDR50 
 sentinel  }
 Update drvdata based on SoC revision 
 Clocks are enabled using pm_runtime 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2013 BayHub Technology Ltd.
  Authors: Peter Guo <peter.guo@bayhubtech.com>
           Adam Lee <adam.lee@canonical.com>
           Ernest Zhang <ernest.zhang@bayhubtech.com>
  O2Micro device registers
 Wait max 50 ms 
 PLL software reset 
 PLL force active 
 Wait max 20 ms 
 Wait for card detect finish 
 Cancel PLL force active 
  This function is used to detect dll lock status.
  Since the dll lock status bit will toggle randomly
  with very short interval which needs to be polled
  as fast as possible. Set sleep_us as 1 microsecond.
 enable hardware tuning 
  This function is used to fix o2 dll shift issue.
  It isn't necessary to detect card present before recovery.
  Firstly, it is used by bht emmc card, which is embedded.
  Second, before call recovery card present will be detected
  outside of the execute tuning function.
 UnLock WP 
 Disable clock 
 PLL software reset 
 Enable Base Clk setting change 
 Enable internal clock 
			
			  need wait at least 5ms for dll status stable,
			  after enable internal clock
 Lock WP 
	
	  This handler only implements the eMMC tuning that is specific to
	  this controller.  Fall back to the standard method for other TIMING.
 Force power mode enter L0 
 wait DLL lock, timeout value 5ms 
	
	  Judge the tuning reason, whether caused by dll shift
	  If cause by dll shift, should call sdhci_o2_dll_recovery
	
	  o2 sdhci host didn't support 8bit emmc tuning
 Cancel force power mode enter L0 
 Set led of SD host function enable 
 Improve write performance for SD3.0 
 Enable Link abnormal reset generating Reset 
 set card power over current protection 
 adjust the output delay for SD mode 
 Set the output voltage setting of Aux 1.2v LDO 
 Set Max power supply capability of SD host 
 Set DLL Tuning Window 
 Set UHS2 T_EIDLE 
 Set UHS2 Termination 
 Set L1 Entrance Timer 
 Enable internal clock 
	
	  mmc_select_bus_width() will test the bus to determine the actual bus
	  width.
 set dll watch dog timer 
 This extra setup is required due to broken ADMA. 
 Set Multi 3 to VCC3V# 
 Disable CLK_REQ# support after media DET 
		 Choose capabilities, enable SDMA.  We have to write 0x01
		  to the capabilities register first to unlock it.
 Disable ADMA12 
 Disable the infinite transfer mode 
 Lock WP 
 UnLock WP 
 DevId=8520 subId= 0x11 or 0x12  Type Chip support 
 Check Whether subId is 0x11 or 0x12 
 Enable Base Clk setting change 
 Set Tuning Window to 4 
 Enable 8520 led function 
 Set timeout CLK 
 Disable UHS1 funciton 
 Lock WP 
 UnLock WP 
 Set Tuning Windows to 5 
 Lock WP 
  Copyright (C) 2013 Broadcom Corporation
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License as
  published by the Free Software Foundation version 2.
  This program is distributed "as is" WITHOUT ANY WARRANTY of any
  kind, whether express or implied; without even the implied warranty
  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 protect back to back writes 
 This timeout should be sufficent for core to reset 
 reset the host using the top level reset 
 bring the host out of reset 
	
	  Back-to-Back register write needs a delay of 1ms at bootup (min 10uS)
	  Back-to-Back writes to same register needs delay when SD bus clock
	  is very low w.r.t AHB clock, mainly during boot-time and during card
	  insert-removal.
 enable the interrupt from the IP core 
 Enable the AHB clock gating module to the host 
	
	  Back-to-Back register write needs a delay of 1ms at bootup (min 10uS)
	  Back-to-Back writes to same register needs delay when SD bus clock
	  is very low w.r.t AHB clock, mainly during boot-time and during card
	  insert-removal.
  Software emulation of the SD card insertionremoval. Set insert=1 for insert
  and insert=0 for removal. The card detection is done by GPIO. For Broadcom
  IP to function properly the bit 0 of CORESTAT register needs to be setreset
  to generate the CD IRQ handled in sdhci.c which schedules card_tasklet.
	
	  Back-to-Back register write needs a delay of min 10uS.
	  Back-to-Back writes to same register needs delay when SD bus clock
	  is very low w.r.t AHB clock, mainly during boot-time and during card
	  insert-removal.
	  We keep 20uS
  SD card interrupt event callback
	
	   JEDEC and SD spec specify supplying 74 continuous clocks to
	  device after power up. With minimum bus (100KHz) that
	  that translates to 740us
 deprecated name 
 Get and enable the core clock 
 if device is eMMC, emulate card insert right here 
	
	  Since the card detection GPIO interrupt is configured to be
	  edge sensitive, check the initial GPIO value here, emulate
	  only if the card is present
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2013 Linaro Ltd.
  Copyright (c) 2013 HiSilicon Limited.
  hi6220 sd only support io voltage 1.8v and 3v
  Also need config AO_SCTRL_SEL18 accordingly
 reserved  },
 SD 
 0: LEGACY 400k 
 1: MMC_HS 
 2: SD_HS 
 3: SDR12 
 4: SDR25 
 5: SDR50 
 6: SDR104 
 7: DDR50 
 8: DDR52 
 9: HS200 
 SDIO 
 0: LEGACY 400k 
 1: MMC_HS 
 2: SD_HS 
 3: SDR12 
 4: SDR25 
 5: SDR50 
 6: SDR104 
 7: DDR50 
 8: DDR52 
 9: HS200 
 We should delay 1ms wait for timing setting finished. 
	
	 A clock cycle is divided into 32 phases,
	 each of which is represented by a bit,
	 finding the optimal phase.
 SPDX-License-Identifier: GPL-2.0-only
  Secure Digital Host Controller Interface ACPI driver.
  Copyright (c) 2012, Intel Corporation.
 For eMMC, minimum is 1us but give it 9us for good measure 
 For eMMC, minimum is 200us but give it 300us for good measure 
  GPDwin uses PCI wifi which conflicts with SDIO's use of
  acpi_device_fix_up_power() on child device nodes. Identifying GPDwin is
  problematic, but since SDIO is only used for wifi, the presence of the PCI
  wifi card in the expected slot with an ACPI companion node, is used to
  indicate that acpi_device_fix_up_power() should be avoided.
 1000 kHz i.e. 1 MHz 
 AMD sdhci reset dll register. 
	
	  This method is only called by mmc_select_hs200 so we only need to
	  read from the HS200 (SDR104) preset register.
	 
	  Firmware that has "invaliddefault" presets return a driver strength
	  of A. This matches the previously hard coded value.
	
	  We want the controller driver strength to match the card's driver
	  strength so they have similar risefall times.
	 
	  The controller driver strength set by this method is sticky for all
	  timings after this method is called. This unfortunately means that
	  while HS400 tuning is in progress we end up with mismatched driver
	  strengths between the controller and the card. HS400 tuning requires
	  switching from HS400->DDR52->HS->HS200->HS400. So the driver mismatch
	  happens while in DDR52 and HS modes. This has not been observed to
	  cause problems. Enabling presets would fix this issue.
	
	  The resulting card driver strength is only set when switching the
	  card's timing to HS200 or HS400. The card will use the default driver
	  strength (B) for any other mode.
 AMD Platform requires dll setting 
  The initialization sequence for HS400 is:
      HS->HS200->Perform Tuning->HS->HS400
  The re-tuning sequence is:
      HS400->DDR52->HS->HS200->Perform Tuning->HS->HS400
  The AMD eMMC Controller can only use the tuned clock while in HS200 and HS400
  mode. If we switch to a different mode, we need to disable the tuned clock.
  If we have previously performed tuning and switch back to HS200 or
  HS400, we can re-enable the tuned clock.
 DLL is only required for HS400 
	
	  There are two types of presets out in the wild:
	  1) Defaultbroken presets.
	     These presets have two sets of problems:
	     a) The clock divisor for SDR12, SDR25, and SDR50 is too small.
	        This results in clock frequencies that are 2x higher than
	        acceptable. i.e., SDR12 = 25 MHz, SDR25 = 50 MHz, SDR50 =
	        100 MHz.x
	     b) The HS200 and HS400 driver strengths don't match.
	        By default, the SDR104 preset register has a driver strength of
	        A, but the (internal) HS400 preset register has a driver
	        strength of B. As part of initializing HS400, HS200 tuning
	        needs to be performed. Having different driver strengths
	        between tuning and operation is wrong. It results in different
	        risefall times that lead to incorrect sampling.
	  2) Firmware with properly initialized presets.
	     These presets have proper clock divisors. i.e., SDR12 => 12MHz,
	     SDR25 => 25 MHz, SDR50 => 50 MHz. Additionally the HS200 and
	     HS400 preset driver strengths match.
	 
	     Enabling presets for HS400 doesn't work for the following reasons:
	     1) sdhci_set_ios has a hard coded list of timings that are used
	        to determine if presets should be enabled.
	     2) sdhci_get_preset_value is using a non-standard register to
	        read out HS400 presets. The AMD controller doesn't support this
	        non-standard register. In fact, it doesn't expose the HS400
	        preset register anywhere in the SDHCI memory map. This results
	        in reading a garbage value and using the wrong presets.
	 
	        Since HS400 and HS200 presets must be identical, we could
	        instead use the the SDR104 preset register.
	 
	     If the above issues are resolved we could remove this quirk for
	     firmware that that has valid presets (i.e., SDR12 <= 12 MHz).
		
		  The Lenovo Miix 320-10ICR has a bug in the _PS0 method of
		  the SHC1 ACPI device, this bug causes it to reprogram the
		  wrong LDO (DLDO3) to 1.8V if 1.8V modes are used and the
		  card is (runtime) suspended + resumed. DLDO3 is used for
		  the LCD and setting it to 1.8V causes the LCD to go black.
		
		  The Acer Aspire Switch 10 (SW5-012) microSD slot always
		  reports the card being write-protected even though microSD
		  cards do not have a write-protect switch at all.
		
		  The Toshiba WT8-B's microSD slot always reports the card being
		  write-protected.
 Terminating entry 
 Power on the SDHCI controller and its children 
 SPDX-License-Identifier: GPL-2.0-only
  SDHCI Controller driver for TI's OMAP SoCs
  Copyright (C) 2017 Texas Instruments
  Author: Kishon Vijay Abraham I <kishon@ti.com>
  Note that the register offsets used here are from omap_regs
  base which is 0x100 for omap4 and later, and 0 for omap3 and
  earlier.
 1 msec 
 180000 uV 
 300000 uV 
 330000 uV 
 sdhci-omap controller flags 
 Offset for omap regs from base 
 Offset for SDHCI regs from base 
 Offset for omap specific registers from base 
 Omap specific context save 
 Pick the right voltage to allow 3.0V for 3.3V nominal PBIAS 
 wait 1ms 
 clock tuning is not needed for upto 52MHz 
	
	  OMAP5DRA74XDRA72x Errata i802:
	  DCRC error interrupts (MMCHS_STAT[21] DCRC=0x1) can occur
	  during the tuning procedure. So disable it during the
	  tuning procedure.
	
	  Stage 1: Search for a maximum pass window ignoring any
	  any single point failures. If the tuning value ends up
	  near it, move away from it in stage 2 below
 ignore single point failure 
	
	  Assign tuning value as a ratio of maximum pass window based
	  on temperature
	
	  Stage 2: Search for a single point failure near the chosen tuning
	  value in two steps. First in the +3 to +10 range and then in the
	  +2 to -10 range. If found, move away from it in the appropriate
	  direction by the appropriate amount depending on the temperature.
 Reenable forbidden interrupt 
	
	  Delay is required for PSTATE to correctly reflect
	  DLEVCLEV values after PADEN is set.
  MMCHS_HL_HWINFO has the MADMA_EN bit set if the controller instance
  is connected to L3 interconnect and is bus master capable. Note that
  the MMCHS_HL_HWINFO register is in the module registers before the
  omap registers and sdhci registers. The offset can vary for omap
  registers depending on the SoC. Do not use sdhci_omap_readl() here.
 MMCHS_HL_HWINFO register is only available on omap4 and later 
 Switch to DMA slave mode when using external DMA 
 wait 1ms 
 20000 micro Sec 
 Save target module sysconfig configured by SoC PM layer 
 Don't reset data lines during tuning operation 
		
		  Since we are not resetting data lines during tuning
		  operation, data error or data complete interrupts
		  might still arrive. Mark this request as a failure
		  but still wait for the data interrupt
		
		  Sometimes command error interrupts and command complete
		  interrupt will arrive together. Clear all command related
		  interrupts here.
	
	  Quirk handling to allow 3.0V vqmmc with a valid 3.3V PBIAS. This is
	  needed for 3.0V ldo9_reg on omap5 at least.
 voltage capabilities might be set by boot loader, clear it 
 sentinel 
 Prevent invalid restore on first resume 
	
	  omap_device_pm_domain has callbacks to enable the main
	  functional clock, interface clock and also configure the
	  SYSCONFIG register of omap devices. The callback will be invoked
	  as part of pm_runtime_get_sync.
	
	  Switch to external DMA only if there is the "dmas" property and
	  ADMA is not available on the controller instance.
 R1B responses is required to properly manage HW busy detection. 
 Allow card power off and runtime PM for eMMCSD card devices 
	
	  SDIO devices can use the dat1 pin as a wake-up interrupt. Some
	  devices like wl1xxx, use an out-of-band GPIO interrupt instead.
 Ensure device gets disabled despite userspace sysfs config 
 Order matters here, HCTL must be restored in two phases 
  driversmmchostomap_hsmmc.c
  Driver for OMAP24303430 MMC controller.
  Copyright (C) 2007 Texas Instruments.
  Authors:
 	Syed Mohammed Khasim	<x0khasim@ti.com>
 	Madhusudhan		<madhu.cr@ti.com>
 	Mohit Jalori		<mjalori@ti.com>
  This file is licensed under the terms of the GNU General Public License
  version 2. This program is licensed "as is" without any warranty of any
  kind, whether express or implied.
 OMAP HSMMC Host Controller Registers 
 max clock divisor: 1023 
 PSTATE 
 Interrupt masks for IE and ISE register 
 20 mSec 
 20000 micro Sec 
  One controller can have multiple slots, like on some omap boards using
  omap.c controller driver. Luckily this is not currently done on any known
  omap_hsmmc.c device.
  MMC Host controller readwrite API's
 Prevent races with irq handler 
 Auto CMD23 support 
 SDIO irq enabled 
 Enable interface voltage rail, if needed 
	
	  If we don't see a Vcc regulator, assume it's a fixed
	  voltage always-on regulator.
	
	  Assume Vcc regulator is used only to power the card ... OMAP
	  VDDS is used to power the pins, optionally with a transceiver to
	  support cards using voltages other than VDDS (1.8V nominal).  When a
	  transceiver is used, DAT3..7 are muxed as transceiver control pins.
	 
	  In some cases this regulator won't support enabledisable;
	  e.g. it's a fixed rail for a WLAN chip.
	 
	  In other cases vcc_aux switches interface power.  Example, for
	  eMMC cards it represents VccQ.  Sometimes transceivers or SDIO
	  chipscards need an interface voltage rail too.
	
	  disable regulators enabled during boot and get the usecount
	  right so that regulators can be enableddisabled by checking
	  the return value of regulator_is_enabled
 Allow an aux regulator 
 For eMMC do not power off when not in sleep state 
  Start clock to the card
  Stop clock to the card
 Disable timeout for erases 
 latch pending CIRQ, but don't signal MMC core 
 no transfer running but need to keep cirq if enabled 
 Calculate divisor for the given clock frequency 
 Wait till the ICS bit is set 
	
	  Enable High-Speed Support
	  Pre-Requisites
	 	- Controller should support High-Speed-Enable Bit
	 	- Controller should not be using DDR Mode
	 	- Controller should advertise that it supports High Speed
	 	  in capabilities register
	 	- MMCSD clock coming out of controller > 25MHz
 configure in DDR mode 
  Restore the MMC host context, if it was lost as result of a
  power state change.
 Do not initialize card-specific things if the power is off 
  Save the MMC host context (store the number of power state changes so far).
  Send init stream sequence to card
  before sending IDLE command
  Configure the response type and send the cmd.
	
	  Unlike OMAP1 controller, the cmdtype does not seem to be based on
	  ac, bc, adtc, bcr. Only commands ending an open ended transfer need
	  a val of 0x3, rest 0x0.
 Do not complete the request if DMA is still in progress 
  Notify the transfer complete to MMC core
 TC before CC from CMD6 - don't know why, but it happens 
  Notify the core about command completion
 response type 2 
 response types 1, 1b, 3, 4, 5, 6 
  DMA clean up for command errors
  Readable error output
 --- means reserved bit without definition at documentation 
 CONFIG_MMC_DEBUG 
  MMC controller internal state machines reset
  Used to reset command or data internal state machines, using respectively
   SRC or SRD bit of SYSCTL register
  Can be called from interrupt context
	
	  OMAP4 ES2 and greater has an updated reset logic.
	  Monitor a 0->1 transition first
  MMC controller IRQ handler
 Flush posted write 
  Switch MMC interface voltage ... only relevant for MMC1.
  MMC2 and MMC3 use fixed 1.8V levels, and maybe a transceiver.
  The MMC2 transceiver controls are used instead of DAT4..DAT7.
  Some chips, like eMMC ones, use internal transceivers.
 Disable the clocks 
 Turn the power off 
 Turn the power ON with given VDD 1.8 or 3.0v 
	
	  If a MMC dual voltage card is detected, the set_ios fn calls
	  this fn with VDD bit set for 1.8V. Upon card removal from the
	  slot, omap_hsmmc_set_ios sets the VDD back to 3V on MMC_POWER_OFF.
	 
	  Cope with a bit of slop in the range ... per data sheets:
	   - "1.8V" for vdds_mmc1vdds_mmc1a can be up to 2.45V max,
	     but recommended values are 1.71V to 1.89V
	   - "3.0V" for vdds_mmc1vdds_mmc1a can be up to 3.5V max,
	     but recommended values are 2.7V to 3.3V
	 
	  Board setup code shouldn't permit anything very out-of-range.
	  TWL4030-family VMMC1 and VSIM regulators are fine (avoiding the
	  middle range) but VSIM can't power DAT4..DAT7 at more than 3V.
 If DMA has finished after TC, complete the request 
 Check if next job is already prepared 
  Routine to configure and start DMA for the MMC card
 Sanity check: all the SG entries must be aligned by block size. 
		 REVISIT: The MMC buffer increments only when MSB is written.
		  Return error for blksz which is non multiple of four.
 FIXME: cleanup 
 Does not fail 
  Configure block length for MMCSD cards and initiate the transfer.
			
			  Set an arbitrary 100ms data timeout for commands with
			  busy signal and no indication of busy_timeout.
  Request function. for readwrite operation
 Routine to configure clock values. Exposed API to core 
 FIXME: set registers based only on changes to ios 
		 Only MMC1 can interface at 3V without some flavor
		  of external transceiver; but they all handle 1.8V.
				
				  The mmc_select_voltage fn of the core does
				  not seem to set the power_mode to
				  MMC_POWER_UP upon recalculating the voltage.
				  vdd 1.8v.
		
		  REVISIT: should be moved to sdio core and made more
		  general e.g. by expanding the DT bindings of child nodes
		  to provide a mechanism to provide this information:
		  Documentationdevicetreebindingsmmcmmc-card.yaml
			
			  We have TI wl1251 attached to MMC3. Pass this
			  information to the SDIO core because it can't be
			  probed by normal methods.
	
	  if enable, piggy back detection on current request
	  but always disable immediately
 flush posted write 
	
	  For omaps with wake-up path, wakeirq will be irq from pinctrl and
	  for other omaps, wakeirq will be from GPIO (dat line remuxed to
	  gpio). wakeirq is needed to detect sdio irq in runtime suspend state
	  with functional clock disabled.
	
	  Some omaps don't have wake-up path from deeper idle states
	  and need to remux SDIO DAT1 to GPIO for wake-up from idle.
 Only MMC1 supports 3.0V 
 Set SD bus power bit 
 This controller can't do multiblock reads due to hw bugs 
 See 35xx errata 2.1.1.128 in SPRZ278F 
 out of memory 
	
	  MMC can still work without debounce clock.
	 Set this to a value that allows allocating an entire descriptor
 Block Length at max can be 1024 
 No. of Blocks is 16 bits 
	
	  Limit the maximum segment size to the lower of the request size
	  and the DMA engine device segment size limits.  In reality, with
	  32-bit transfers, the DMA engine can do longer segments than this
	  but there is no way to represent that in the DMA model - if we
	  increase this figure here, we get warnings from the DMA API debug.
 Request IRQ for MMC operations 
	
	  For now, only support SDIO interrupt if we have a separate
	  wake-up interrupt configured from device tree. This is because
	  the wake-up interrupt is needed for idle state and some
	  platforms need special quirks. And we don't want to add new
	  legacy mux platform init code callbacks any longer as we
	  are moving to DT based booting anyways.
 Routine to resume the MMC device 
 disable sdio irq handling to prevent race 
			
			  dat1 line low, pending sdio irq
			  race condition: possible irq handler running on
			  multi-core, abort
 irq lost, if pinmux incorrect 
 SPDX-License-Identifier: GPL-2.0
  Driver for Synopsys DesignWare Cores Mobile Storage Host Controller
  Copyright (C) 2018 Synaptics Incorporated
  Author: Jisheng Zhang <jszhang@kernel.org>
 DWCMSHC specific Mode Select value 
 DWC IP vendor area 1 pointer 
 Offset inside the  vendor area 1 
 Rockchip specific Registers 
 Rockchip specified optional clocks 
 P_VENDOR_SPECIFIC_AREA reg 
 pointer to SoC private stuff 
  If DMA addr spans 128MB boundary, we split the DMA transfer into two
  so that each DMA transfer doesn't exceed the boundary.
	
	  No matter V4 is enabled or not, ARGUMENT2 register is 32-bit
	  block count register which doesn't support stuff bits of
	  CMD23 argument on dwcmsch host controller.
 Select Bus Speed Mode for host 
	
	  DO NOT TOUCH THIS SETTING. RX clk inverter unit is enabled
	  by default, but it shouldn't be enabled. We should anyway
	  disable it before issuing any cmds.
 Rockchip platform only support 375KHz for identify mode 
 Disable cmd conflict check 
 Disable DLL to reset sample clock 
 Reset DLL 
 Init DLL settings 
 tune clock stop en 
 pre-change delay 
 post-change delay 
 Disable cmd conflict check 
 Reset previous settings 
	
	  extra adma table cnt for cross 128M boundary handling.
 SPDX-License-Identifier: GPL-2.0-or-later
 Copyright (C) 2019 ASPEED Technology Inc. 
 Copyright (C) 2019 IBM Corp. 
 SDIO{10,20} 
 SDIO{14,24} 
  The function sets the mirror register for updating
  capbilities of the current slot.
    slot | capability  | caps_reg | mirror_reg
    -----|-------------|----------|------------
      0  | CAP1_1_8V   | SDIO140  |   SDIO10
      0  | CAP2_SDR104 | SDIO144  |   SDIO14
      1  | CAP1_1_8V   | SDIO240  |   SDIO20
      1  | CAP2_SDR104 | SDIO244  |   SDIO24
 Setclear 8 bit mode 
 Measured value with handwave environmentals and static loading 
	
	  Regarding the AST2600:
	 
	  If (EMMC12C[7:6], EMMC12C[15:8] == 0) then
	    period of SDCLK = period of SDMCLK.
	 
	  If (EMMC12C[7:6], EMMC12C[15:8] != 0) then
	    period of SDCLK = period of SDMCLK  2  (EMMC12C[7:6], EMMC[15:8])
	 
	  If you keep EMMC12C[7:6] = 0 and EMMC12C[15:8] as one-hot,
	  0x10x20x4etc, you will find it is compatible to AST2400 or AST2500
	 
	  Keep the one-hot behaviour for backwards compatibility except for
	  supporting the value 0 in (EMMC12C[7:6], EMMC12C[15:8]), and capture
	  the 0-value capability in clk_div_start.
 Setclear 8-bit mode 
 Setclear 1 or 4 bit mode 
 SDHCISlot 0 
 SDHCISlot 1 
 SPDX-License-Identifier: GPL-2.0-or-later
   Toshiba PCI Secure Digital Host Controller Interface driver
   Copyright (C) 2014 Ondrej Zary
   Copyright (C) 2007 Richard Betts, All Rights Reserved.
 	Based on asic3_mmc.c, copyright (c) 2005 SDG Systems, LLC and,
 	sdhci.c, copyright (C) 2005-2006 Pierre Ossman
 end: all zeroes  },
 enable clock 
 reset 
 assert 
 deassert 
 Clear card registers 
 SDIO clock? 
 enable LED 
 set interrupt masks 
 Set MMC clock  power.
  Note: This controller uses a simple divider scheme therefore it cannot run
  SDMMC cards at full speed (2420MHz). HCLK (=33MHz PCI clock?) is too high
  and the next slowest is 16MHz (div=2).
 disable the divider 
 Write something to end the command 
	 Ensure we dont read more than one block. The chip will interrupt us
	  When the next block is available.
 Transfer the data 
 R2 
 R1, R1B, R3, R6, R7 
	 If there is data to handle we will
 nothing to do: it's not our IRQ 
 Card insertremove. The mmc controlling code is stateless. 
 Data transfer 
 Command completion 
 Data transfer completion 
 removed from ipaq-asic3.h for some reason 
 MMC_DATA_WRITE does not require a bit to be set 
 Send the command 
 Set transfer length and blocksize 
 Process requests from the MMC layer 
 abort if card not present 
 active low 
 mask all interrupts 
 disable card clock 
 power down card 
 disable clock 
 CONFIG_PM_SLEEP 
 Set MMC host parameters 
 SPDX-License-Identifier: GPL-2.0-or-later
  Synopsys DesignWare Multimedia Card Interface driver
   (Based on NXP driver for lpc 31xx)
  Copyright (C) 2009 NXP Semiconductors
  Copyright (C) 2009, 2010 Imagination Technologies Ltd.
 Common flag combinations 
 unit: HZ 
 unit: HZ 
 Control Descriptor 
 Reserved 
Buffer sizes 
 Reserved 
 Lower 32-bits of Buffer Address Pointer 1
 Upper 32-bits of Buffer Address Pointer 1
 Lower 32-bits of Next Descriptor Address 
 Upper 32-bits of Next Descriptor Address 
 Control Descriptor 
 Buffer sizes 
 buffer 1 physical address 
 buffer 2 physical address 
 Each descriptor can transfer up to 4KB of data in chained mode 
 Make sure we get a consistent snapshot 
 defined(CONFIG_DEBUG_FS) 
 wait till resets clear 
	
	  Databook says that before issuing a new data transfer command
	  we need to check to see if the card is busy.  Data transfer commands
	  all have SDMMC_CMD_PRV_DAT_WAIT set, so we'll key off that.
	 
	  ...also allow sending for SDMMC_CMD_VOLT_SWITCH where busy is
	  expected.
 drain writebuffer 
 Special bit makes CMD11 not die 
 Change state to continue to handle CMD11 weirdness 
		
		  We need to disable low power mode (automatic clock stop)
		  while doing voltage switch so we don't confuse the card,
		  since stopping the clock is a specific part of the UHS
		  voltage change dance.
		 
		  Note that low power mode (SDMMC_CLKEN_LOW_PWR) will be
		  unconditionally turned back on in dw_mci_setup_bus() if it's
		  ever called with a non-zero clock.  That shouldn't happen
		  until the voltage change is all done.
 We expect a response, so set this bit 
 add a bit spare time 
	
	  The durations we're working with are fairly short so we have to be
	  extra careful about synchronization here.  Specifically in hardware a
	  command timeout is _at most_ 5.1 ms, so that means we expect an
	  interrupt (either command done or timeout) to come rather quickly
	  after the mci_writel.  ...but just in case we have a long interrupt
	  latency let's add a bit of paranoia.
	 
	  In general we'll assume that at least an interrupt will be asserted
	  in hardware by the time the cto_timer runs.  ...and if it hasn't
	  been asserted in hardware by that time then we'll assume it'll never
	  come.
 drain writebuffer 
 response expected command only 
 DMA interface functions 
 Data transfer was stopped by the interrupt handler 
 Software reset of DMA 
 Disable and reset the IDMAC interface 
 Stop the IDMAC running 
 Invalidate cache after read 
	
	  If the card was removed, data will be NULL. No point in trying to
	  send the stop command or waiting for NBUSY in this case.
 Number of descriptors in the ring buffer 
 Forward link the descriptor list 
 Initialize reserved and buffer size fields to "0" 
 Set the last descriptor as the end-of-ring descriptor 
 Number of descriptors in the ring buffer 
 Forward link the descriptor list 
 Set the last descriptor as the end-of-ring descriptor 
 Mask out interrupts - get Tx & Rx complete only 
 Set the descriptor base address 
 Mask out interrupts - get Tx & Rx complete only 
 Set the descriptor base address 
			
			  Wait for the former clear OWN bit operation
			  of IDMAC to make sure that this descriptor
			  isn't still owned by IDMAC as IDMAC's write
			  ops and CPU's read ops are asynchronous.
			
			  Set the OWN bit and disable interrupts
			  for this descriptor
 Buffer length 
 Physical address to DMA tofrom 
 Update physical address for the next desc 
 Save pointer to the last descriptor 
 Set first descriptor 
 Set last descriptor 
 restore the descriptor chain as it's polluted 
			
			  Wait for the former clear OWN bit operation
			  of IDMAC to make sure that this descriptor
			  isn't still owned by IDMAC as IDMAC's write
			  ops and CPU's read ops are asynchronous.
			
			  Set the OWN bit and disable interrupts
			  for this descriptor
 Buffer length 
 Physical address to DMA tofrom 
 Update physical address for the next desc 
 Save pointer to the last descriptor 
 Set first descriptor 
 Set last descriptor 
 restore the descriptor chain as it's polluted 
 drain writebuffer 
 Make sure to reset DMA in case we did PIO before this 
 Select IDMAC interface 
 drain writebuffer 
 Enable the IDMAC 
 Start it running 
 Set external dma config: burst size, burst width 
 Match burst msize with external dma config 
 Set dw_mci_dmac_complete_dma as callback 
 Flush cache before write 
 Request external dma channel 
	
	  We don't do DMA on "complex" transfers, i.e. with
	  non-word-aligned buffers or lengths. Also, we don't bother
	  with all the DMA setup overhead for short transfers.
 This data might be unmapped at this time 
 Use platform get_cd function, else try onboard card detect 
 pio should ship this scenario 
	
	  MSIZE is '1',
	  if blksz is not a multiple of the FIFO width
	
	  If idx is '0', it won't be tried
	  Thus, initial values are uesed
	
	  CDTHRCTL doesn't exist prior to 240A (in fact that register offset is
	  in the FIFO region, so we really shouldn't access it).
	
	  Card write Threshold is introduced since 2.80a
	  It's used when HS400 mode is enabled.
	
	  If (blksz_depth) >= (fifo_depth >> 1), should be 'thld_size <= blksz'
	  If (blksz_depth) <  (fifo_depth >> 1), should be thld_size = blksz
	  Currently just choose blksz.
 If we don't have a channel, we can't do DMA 
	
	  Decide the MSIZE and RXTX Watermark.
	  If current block size is same with previous size,
	  no need to update fifoth.
 Enable the DMA interface 
 Disable RXTX IRQs, let DMA handle it 
 We can't do DMA, try PIO for this one 
		
		  Use the initial fifoth_val for PIO mode. If wm_algined
		  is set, we set watermark same as data size.
		  If next issued data may be transfered by DMA mode,
		  prev_blksz should be invalidated.
		
		  Keep the current block size.
		  It will be used to decide whether to update
		  fifoth register next time.
 We must continue to set bit 28 in CMD until the change is complete 
			
			  move the + 1 after the divide to prevent
			  over-clocking the card.
 Silent the verbose log if calling from PM context 
			
			  If card is polling, display the message only
			  one time at boot time.
 disable clock 
 inform CIU 
 set clock to desired speed 
 inform CIU 
 enable clock; only low power if no SDIO 
 inform CIU 
 keep the last clock value that was requested from core 
 Set the current slot bus width 
 this is the first command, send the initialization clock 
 drain writebuffer 
		
		  Databook says to fail after 2ms w no response, but evidence
		  shows that sometimes the cmd11 interrupt takes over 130ms.
		  We'll set to 500ms, plus an extra jiffy just in case jiffies
		  is just about to roll over.
		 
		  We do this whole thing under spinlock and only if the
		  command hasn't already completed (indicating the the irq
		  already ran so we don't want the timeout).
 must be called with host->lock held 
		
		  this case isn't expected to happen, so we can
		  either crash here or just try to continue on
		  in the closest possible state
	
	  The check for card presence and queueing of the request must be
	  atomic, otherwise the card could be removed in between and the
	  request wouldn't fail until another card was inserted.
 set default 1 bit mode 
 DDR mode set 
	
	  Use mirror of ios->clock to prevent race with mmc
	  core ios update when finding the minimum.
return, if failed turn on vmmc
 Keep track so we don't reset again 
 Reset our state machine after powering on 
 Adjust clock  bus width after power is up 
 Turn clock off before power goes down 
	
	  Check the busy bit which is low when DAT[3:0]
	  (the data lines) are 0000
	
	  Program the voltage.  Note that some instances of dw_mmc may use
	  the UHS_REG for this.  For other instances (like exynos) the UHS_REG
	  does no harm but you need to set the regulator directly.  Try both.
 Use platform get_ro function, else try on board write protect 
	
	  According to eMMC spec, card reset procedure:
	  tRstW >= 1us:   RST_n pulse width
	  tRSCA >= 200us: RST_n to Command time
	  tRSTH >= 1us:   RST_n high period
	
	  Low power mode will stop the card clock when idle.  According to the
	  description of the CLKENA register we should disable low power mode
	  for SDIO cards if we need SDIO interrupts to work.
 Enabledisable Slot Specific SDIO interrupt 
 Avoid runtime suspending the device when SDIO IRQ is enabled 
	
	  Resetting generates a block interrupt, hence setting
	  the scatter-gather pointer to NULL.
		
		  In all cases we clear the RAWINTS
		  register to clear any interrupts.
 Wait for dma_req to be cleared 
 when using DMA next we reset the fifo again 
 if the controller reset bit did clear, then set clock regs 
 It is also required that we reinit idmac 
 After a CTRL reset we need to have CIU set clock registers  
	
	  Only inject an error if we haven't already got an error or data over
	  interrupt.
	
	  Try to inject the error at random points during the data transfer.
 Read the response from the card (up to 16 bytes) 
				
				  No data CRC status was returned.
				  The number of bytes transferred
				  will be exaggerated in PIO mode.
 SDMMC_INT_SBE is included 
		
		  After an error, there may be data lingering
		  in the FIFO
 add a bit spare time 
	
	  Really be certain that the timer has stopped.  This is a bit of
	  paranoia and could only really happen if we had really bad
	  interrupt latency and the interrupt routine and timeout were
	  running concurrently so that the del_timer() in the interrupt
	  handler couldn't run.
 Extra paranoia just like dw_mci_clear_pending_cmd_complete() 
				
				  During UHS tuning sequence, sending the stop
				  command after the response CRC error would
				  throw the system into a confused state
				  causing all future tuning phases to report
				  failure.
				 
				  In such case controller will move into a data
				  transfer state after a response error or
				  response CRC error. Let's let that finish
				  before trying to send a stop, so we'll go to
				  STATE_SENDING_DATA.
				 
				  Although letting the data transfer take place
				  will waste a bit of time (we already know
				  the command was bad), it can't cause any
				  errors since it's possible it would have
				  taken place anyway if this tasklet got
				  delayed. Allowing the transfer to take place
				  avoids races and keeps things simple.
			
			  We could get a data error and never a transfer
			  complete so we'd better check for it here.
			 
			  Note that we don't really care if we also got a
			  transfer complete; stopping the DMA and sending an
			  abort won't hurt.
				
				  If all data-related interrupts don't come
				  within the given time in reading data state.
			
			  Handle an EVENT_DATA_ERROR that might have shown up
			  before the transfer completed.  This might not have
			  been caught by the check above because the interrupt
			  could have gone off between the previous check and
			  the check for transfer complete.
			 
			  Technically this ought not be needed assuming we
			  get a DATA_COMPLETE eventually (we'll notice the
			  error and end the request), but it shouldn't hurt.
			 
			  This has the advantage of sending the stop command.
				
				  If data error interrupt comes but data over
				  interrupt doesn't come within the given time.
				  in reading data state.
 stop command for open-ended transfer
				
				  If we don't have a command complete now we'll
				  never get one since we just reset everything;
				  better end the request.
				 
				  If we do have a command complete we'll fall
				  through to the SENDING_STOP command and
				  everything will be peachy keen.
			
			  If err has non-zero,
			  stop-abort command has been already issued.
 CMD error in data command 
 push final bytes to part_buf, only use during push 
 append bytes to part_buf, only use during push 
 pull first bytes from part_buf, only use during pull 
 pull final bytes from the part_buf, assuming it's just been filled 
 try and push anything in the part_buf 
 memcpy from input buffer into aligned buffer 
 push data from aligned buffer into fifo 
 put anything remaining in the part_buf 
 Push data if we have reached the expected data length 
 pull data from fifo into aligned buffer 
 memcpy from aligned buffer into output buffer 
 try and push anything in the part_buf 
 memcpy from input buffer into aligned buffer 
 push data from aligned buffer into fifo 
 put anything remaining in the part_buf 
 Push data if we have reached the expected data length 
 pull data from fifo into aligned buffer 
 memcpy from aligned buffer into output buffer 
 try and push anything in the part_buf 
 memcpy from input buffer into aligned buffer 
 push data from aligned buffer into fifo 
 put anything remaining in the part_buf 
 Push data if we have reached the expected data length 
 pull data from fifo into aligned buffer 
 memcpy from aligned buffer into output buffer 
 get remaining partial bytes 
 get the rest of the data 
 if the RXDR is ready read again 
 drain writebuffer 
 if TXDR write again 
 drain writebuffer 
 drain writebuffer 
 read-only mask reg 
 Check volt switch first, since it can look like an error 
			
			  Hold the lock; we know cmd11_timer can't be kicked
			  off after the lock is released, so safe to delete.
 drain writebuffer 
 if there is an error report DATA_ERROR 
 drain writebuffer 
 drain writebuffer 
 Handle IDMA interrupts 
 Process SDIO IRQs through the sdio_irq_work. 
if there are external regulators, get them
 Useful defaults if platform data is unset. 
 TRANS_MODE_PIO 
 BLKSIZ is 16 bits 
 Debugfs stuff is cleaned up by mmc core 
	
	 Check tansfer mode from HCON[17:16]
	 Clear the ambiguous description of dw_mmc databook:
	 2b'00: No DMA Interface -> Actually means using Internal DMA block
	 2b'01: DesignWare DMA Interface -> Synopsys DW-DMA block
	 2b'10: Generic DMA Interface -> non-Synopsys generic DMA block
	 2b'11: Non DW DMA Interface -> pio only
	 Compared to DesignWare DMA Interface, Generic DMA Interface has a
	 simpler requestacknowledge handshake mechanism and both of them
	 are regarded as external dma master for dw_mmc.
 Determine which DMA interface to use 
		
		 Check ADDR_CONFIG bit in HCON to find
		 IDMAC address bus width
 host supports IDMAC in 64-bit address mode 
 host supports IDMAC in 32-bit address mode 
 Alloc memory for sg translation 
 TRANS_MODE_EDMAC: check dma bindings again 
	
	  If somehow we have very bad interrupt latency it's remotely possible
	  that the timer could fire while the interrupt is still pending or
	  while the interrupt is midway through running.  Let's be paranoid
	  and detect those two cases.  Note that this is paranoia is somewhat
	  justified because in this function we don't actually cancel the
	  pending command in the controller--we just assume it will never come.
 read-only mask reg 
 The interrupt should fire; no need to act but we can warn 
 Presumably interrupt handler couldn't delete the timer 
	
	  Continued paranoia to make sure we're in the state we expect.
	  This paranoia isn't really justified but it seems good to be safe.
		
		  If CMD_DONE interrupt does NOT come in sending command
		  state, we should notify the driver to terminate current
		  transfer and report a command timeout to the core.
	
	  The DTO timer is much longer than the CTO timer, so it's even less
	  likely that we'll these cases, but it pays to be paranoid.
 read-only mask reg 
 The interrupt should fire; no need to act but we can warn 
 Presumably interrupt handler couldn't delete the timer 
	
	  Continued paranoia to make sure we're in the state we expect.
	  This paranoia isn't really justified but it seems good to be safe.
		
		  If DTO interrupt does NOT come in sending data state,
		  we should notify the driver to terminate current transfer
		  and report a data timeout to the core.
 find reset controller when exist 
 CONFIG_OF 
 CONFIG_OF 
	
	  No need for CD if all slots have a non-error GPIO
	  as well as broken card detection is found.
	
	  Get the host data width - this assumes that HCON has been set with
	  the correct values.
 Check for a reserved value, and warn if it is 
 Reset all blocks 
 Clear the interrupts for the host controller 
 disable all mmc interrupt first 
 Put in max timeout 
	
	  FIFO threshold settings  RxMark  = fifo_size  2 - 1,
	                           Tx Mark = fifo_size  2 DMA Size = 8
		
		  Power-on value of RX_WMark is FIFO_DEPTH-1, but this may
		  have been overwritten by the bootloader, just like we're
		  about to do, so if you know the value for your hardware, you
		  should put it in the platform data.
 disable clock to CIU 
	
	  In 2.40a spec, Data offset is changed.
	  Need to check the version-id and set data-offset for DATA register.
	
	  Enable interrupts for command done, data over, data empty,
	  receive ready and error such as transmit, receive timeout, crc error
 Enable mci interrupt 
 We need at least one slot to succeed 
 Now that slots are all setup, we can enable card detect 
 disable all mmc interrupt first 
 disable clock to CIU 
	
	  Restore the initial value at FIFOTH register
	  And Invalidate the prev_blksz with zero
 Put in max timeout 
 Force setup bus to guarantee available clock output 
 Re-enable SDIO interrupts. 
 Now that slots are all setup, we can enable card detect 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0+
  Amlogic Meson6Meson8Meson8bMeson8m2 SDHC MMC host controller driver.
  Copyright (C) 2020 Martin Blumenstingl <martin.blumenstingl@googlemail.com>
		
		  If command with no data, just wait response done
		  interrupt(int[0]), and if command with data transfer, just
		  wait dma done interrupt(int[11]), don't need care about
		  dat0 busy or not.
 hardware flush: 
 software flush: 
 enable the new IRQs and mask all pending ones 
		
		  according to Amlogic the following latching points are
		  selected with empirical values, there is no (known) formula
		  to calculate these.
 reset the current window 
 the last window is the best (or possibly only) window 
 there was a better window than the last 
 no window was found at all, reset to the original phase 
 disable interrupts and mask all pending ones 
			
			  If MESON_SDHC_PDMA_RXFIFO_MANUAL_FLUSH was
			  previously 0x1 then it has to be set to 0x3. If it
			  was 0x0 before then it has to be set to 0x2. Without
			  this reading SD cards sometimes transfers garbage,
			  which results in cards not being detected due to:
			    unrecognised SCR structure version <random number>
		
		  Clear the FIFOs after completing data transfers to prevent
		  corrupting data on write access. It's not clear why this is
		  needed (for reads and writes), but it mimics what the BSP
		  kernel did.
	
	  start with a valid divider and enable the memory (un-setting
	  MESON_SDHC_CLKC_MEM_PWR_OFF).
 some initialization bits depend on the SoC: 
 disable and mask all interrupts: 
 accessing any register requires the module clock to be enabled: 
 Get regulators and the supported OCR mask 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
 Copyright (C) 2020 IBM Corp. 
  driversmmchostsdhci-spear.c
  Support of SDHCI platform devices for spear soc family
  Copyright (C) 2010 ST Microelectronics
  Viresh Kumar <vireshk@kernel.org>
  Inspired by sdhci-pltfm.c
  This file is licensed under the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
 sdhci ops 
 clk enable 
	
	  It is optional to use GPIOs for sdhci card detection. If we
	  find a descriptor using slot GPIO, we use it.
 SPDX-License-Identifier: GPL-2.0-or-later
  Arasan Secure Digital Host Controller Interface.
  Copyright (C) 2011 - 2012 Michal Simek <monstr@monstr.eu>
  Copyright (c) 2012 Wind River Systems, Inc.
  Copyright (C) 2013 Pengutronix e.K.
  Copyright (C) 2013 Xilinx Inc.
  Based on sdhci-of-esdhc.c
  Copyright (c) 2007 Freescale Semiconductor, Inc.
  Copyright (c) 2009 MontaVista Software, Inc.
  Authors: Xiaobo Xie <X.Xie@freescale.com>
 	    Anton Vorontsov <avorontsov@ru.mvista.com>
 Default settings for ZynqMP Clock Phases 
  On some SoCs the syscon area has a feature where the upper 16-bits of
  each 32-bit register act as a write mask for the lower 16-bits.  This allows
  atomic updates of the register without locking.  This macro is used on SoCs
  that have that feature.
  struct sdhci_arasan_soc_ctl_field - Field used in sdhci_arasan_soc_ctl_map
  @reg:	Offset within the syscon of the register containing this field
  @width:	Number of bits for this field
  @shift:	Bit offset within @reg of this field (or -1 if not avail)
  struct sdhci_arasan_soc_ctl_map - Map in syscon to corecfg registers
  @baseclkfreq:	Where to find corecfg_baseclkfreq
  @clockmultiplier:	Where to find corecfg_clockmultiplier
  @support64b:		Where to find SUPPORT64B bit
  @hiword_update:	If true, use HIWORD_UPDATE to access the syscon
  It's up to the licensee of the Arsan IP block to make these available
  somewhere if needed.  Presumably these will be scattered somewhere that's
  accessible via the syscon API.
  struct sdhci_arasan_clk_ops - Clock Operations for Arasan SD controller
  @sdcardclk_ops:	The output clock related operations
  @sampleclk_ops:	The sample clock related operations
  struct sdhci_arasan_clk_data - Arasan Controller Clock Data.
  @sdcardclk_hw:	Struct for the clock we might provide to a PHY.
  @sdcardclk:		Pointer to normal 'struct clock' for sdcardclk_hw.
  @sampleclk_hw:	Struct for the clock we might provide to a PHY.
  @sampleclk:		Pointer to normal 'struct clock' for sampleclk_hw.
  @clk_phase_in:	Array of Input Clock Phase Delays for all speed modes
  @clk_phase_out:	Array of Output Clock Phase Delays for all speed modes
  @set_clk_delays:	Function pointer for setting Clock Delays
  @clk_of_data:	Platform specific runtime clock data storage pointer
  struct sdhci_arasan_data - Arasan Controller Data
  @host:		Pointer to the main SDHCI host structure.
  @clk_ahb:		Pointer to the AHB clock
  @phy:		Pointer to the generic phy
  @is_phy_on:		True if the PHY is on; false if not.
  @has_cqe:		True if controller has command queuing engine.
  @clk_data:		Struct for the Arasan Controller Clock Data.
  @clk_ops:		Struct for the Arasan Controller Clock Operations.
  @soc_ctl_base:	Pointer to regmap for syscon for soc_ctl registers.
  @soc_ctl_map:	Map to get offsets into soc_ctl registers.
  @quirks:		Arasan deviations from spec.
 Controller does not have CD wired and will not function normally without 
 Controller immediately reports SDHCI_CLOCK_INT_STABLE after enabling the
  Some of the Arasan variations might not have timing requirements
  met at 25MHz for Default Speed mode, those controllers work at
  19MHz instead
  sdhci_arasan_syscon_write - Write to a field in soc_ctl registers
  @host:	The sdhci_host
  @fld:	The field to write to
  @val:	The value to write
  This function allows writing to fields in sdhci_arasan_soc_ctl_map.
  Note that if a field is specified as not available (shift < 0) then
  this function will silently return an error code.  It will be noisy
  and print errors for any other (unexpected) errors.
  Return: 0 on success and error value on error
	
	  Silently return errors for shift < 0 so caller doesn't have
	  to check for fields which are optional.  For fields that
	  are required then caller needs to do something special
	  anyway.
 Yell about (unexpected) regmap errors 
			
			  If PHY off, set clock to max speed and power PHY on.
			 
			  Although PHY docs apparently suggest power cycling
			  when changing the clock the PHY doesn't like to be
			  powered on while at low speeds like those used in ID
			  mode.  Even worse is powering the PHY on while the
			  clock is off.
			 
			  To workaround the PHY limitations, the best we can
			  do is to power it on at a faster speed and then slam
			  through low speeds without power cycling.
			
			  We'll now fall through to the below case with
			  ctrl_phy = false (so we won't turn offon).  The
			  sdhci_set_clock() will set the real clock.
			
			  At higher clock speeds the PHY is fine being power
			  cycled and docs say you _should_ power cycle when
			  changing clock speeds.
		
		  Some of the Arasan variations might not have timing
		  requirements met at 25MHz for Default Speed mode,
		  those controllers work at 19MHz instead.
 Set the Input and Output Clock Phase Delays 
		
		  Some controllers immediately report SDHCI_CLOCK_INT_STABLE
		  after enabling the clock even though the clock is not
		  stable. Trying to use a clock without waiting here results
		  in EILSEQ while detecting some olderslower cards. The
		  chosen delay is the maximum delay from sdhci_set_clock.
		
		  Plese don't switch to 1V8 as arasan,5.1 doesn't
		  actually refer to this setting to indicate the
		  signal voltage and the state machine will be broken
		  actually if we force to enable 1V8. That's something
		  like broken quirk but we could work around here.
 We don't support 3V3 and 1V2 
  sdhci_arasan_suspend - Suspend method for the driver
  @dev:	Address of the device structure
  Put the device in a low power state.
  Return: 0 on success and error value on error
  sdhci_arasan_resume - Resume method for the driver
  @dev:	Address of the device structure
  Resume operation after suspend
  Return: 0 on success and error value on error
 ! CONFIG_PM_SLEEP 
  sdhci_arasan_sdcardclk_recalc_rate - Return the card clock rate
  @hw:			Pointer to the hardware clock structure.
  @parent_rate:		The parent rate (should be rate of clk_xin).
  Return the current actual rate of the SD card clock.  This can be used
  to communicate with out PHY.
  Return: The card clock rate.
  sdhci_arasan_sampleclk_recalc_rate - Return the sampling clock rate
  @hw:			Pointer to the hardware clock structure.
  @parent_rate:		The parent rate (should be rate of clk_xin).
  Return the current actual rate of the sampling clock.  This can be used
  to communicate with out PHY.
  Return: The sample clock rate.
  sdhci_zynqmp_sdcardclk_set_phase - Set the SD Output Clock Tap Delays
  @hw:			Pointer to the hardware clock structure.
  @degrees:		The clock phase shift between 0 - 359.
  Set the SD Output Clock Tap Delays for Output path
  Return: 0 on success and error value on error
 This is applicable for SDHCI_SPEC_300 and above 
 For 50MHz clock, 30 Taps are available 
 For 100MHz clock, 15 Taps are available 
 For 200MHz clock, 8 Taps are available 
 Set the Clock Phase 
 Release DLL Reset 
  sdhci_zynqmp_sampleclk_set_phase - Set the SD Input Clock Tap Delays
  @hw:			Pointer to the hardware clock structure.
  @degrees:		The clock phase shift between 0 - 359.
  Set the SD Input Clock Tap Delays for Input path
  Return: 0 on success and error value on error
 This is applicable for SDHCI_SPEC_300 and above 
 Assert DLL Reset 
 For 50MHz clock, 120 Taps are available 
 For 100MHz clock, 60 Taps are available 
 For 200MHz clock, 30 Taps are available 
 Set the Clock Phase 
  sdhci_versal_sdcardclk_set_phase - Set the SD Output Clock Tap Delays
  @hw:			Pointer to the hardware clock structure.
  @degrees:		The clock phase shift between 0 - 359.
  Set the SD Output Clock Tap Delays for Output path
  Return: 0 on success and error value on error
 This is applicable for SDHCI_SPEC_300 and above 
 For 50MHz clock, 30 Taps are available 
 For 100MHz clock, 15 Taps are available 
 For 200MHz clock, 8 Taps are available 
 Set the Clock Phase 
  sdhci_versal_sampleclk_set_phase - Set the SD Input Clock Tap Delays
  @hw:			Pointer to the hardware clock structure.
  @degrees:		The clock phase shift between 0 - 359.
  Set the SD Input Clock Tap Delays for Input path
  Return: 0 on success and error value on error
 This is applicable for SDHCI_SPEC_300 and above 
 For 50MHz clock, 120 Taps are available 
 For 100MHz clock, 60 Taps are available 
 For 200MHz clock, 30 Taps are available 
 Set the Clock Phase 
 Issue DLL Reset 
 ZynqMP SD controller does not perform auto tuning in DDR50 mode 
  sdhci_arasan_update_clockmultiplier - Set corecfg_clockmultiplier
  @host:		The sdhci_host
  @value:		The value to write
  The corecfg_clockmultiplier is supposed to contain clock multiplier
  value of programmable clock generator.
  NOTES:
  - Many existing devices don't seem to do this and work fine.  To keep
    compatibility for old hardware where the device tree doesn't provide a
    register map, this function is a noop if a soc_ctl_map hasn't been provided
    for this platform.
  - The value of corecfg_clockmultiplier should sync with that of corresponding
    value reading from sdhci_capability_register. So this function is called
    once at probe time and never called again.
 Having a map is optional 
 If we have a map, we expect to have a syscon 
  sdhci_arasan_update_baseclkfreq - Set corecfg_baseclkfreq
  @host:		The sdhci_host
  The corecfg_baseclkfreq is supposed to contain the MHz of clk_xin.  This
  function can be used to make that happen.
  NOTES:
  - Many existing devices don't seem to do this and work fine.  To keep
    compatibility for old hardware where the device tree doesn't provide a
    register map, this function is a noop if a soc_ctl_map hasn't been provided
    for this platform.
  - It's assumed that clk_xin is not dynamic and that we use the SDHCI divider
    to achieve lower clock rates.  That means that this function is called once
    at probe time and never called again.
 Having a map is optional 
 If we have a map, we expect to have a syscon 
	
	  Read Tap Delay values from DT, if the DT does not contain the
	  Tap Values then use the pre-defined values.
 The values read are Input and Output Clock Delays in order 
  arasan_dt_parse_clk_phases - Read Clock Delay values from DT
  @dev:		Pointer to our struct device.
  @clk_data:		Pointer to the Clock Data structure
  Called at initialization to parse the values of Clock Delays.
	
	  This has been kept as a pointer and is assigned a function here.
	  So that different controller variants can assign their own handling
	  function.
 SoC-specific compatible strings w soc_ctl_map 
 Generic compatible below here 
 sentinel  }
  sdhci_arasan_register_sdcardclk - Register the sdcardclk for a PHY to use
  @sdhci_arasan:	Our private data structure.
  @clk_xin:		Pointer to the functional clock
  @dev:		Pointer to our struct device.
  Some PHY devices need to know what the actual card clock is.  In order for
  them to find out, we'll provide a clock through the common clock framework
  for them to query.
  Return: 0 on success and error value on error
  sdhci_arasan_register_sampleclk - Register the sampleclk for a PHY to use
  @sdhci_arasan:	Our private data structure.
  @clk_xin:		Pointer to the functional clock
  @dev:		Pointer to our struct device.
  Some PHY devices need to know what the actual card clock is.  In order for
  them to find out, we'll provide a clock through the common clock framework
  for them to query.
  Return: 0 on success and error value on error
  sdhci_arasan_unregister_sdclk - Undoes sdhci_arasan_register_sdclk()
  @dev:		Pointer to our struct device.
  Should be called any time we're exiting and sdhci_arasan_register_sdclk()
  returned success.
  sdhci_arasan_update_support64b - Set SUPPORT_64B (64-bit System Bus Support)
  @host:		The sdhci_host
  @value:		The value to write
  This should be set based on the System Address Bus.
  0: the Core supports only 32-bit System Address Bus.
  1: the Core supports 64-bit System Address Bus.
  NOTE:
  For Keem Bay, it is required to clear this bit. Its default value is 1'b1.
  Keem Bay does not support 64-bit access.
 Having a map is optional 
 If we have a map, we expect to have a syscon 
  sdhci_arasan_register_sdclk - Register the sdcardclk for a PHY to use
  @sdhci_arasan:	Our private data structure.
  @clk_xin:		Pointer to the functional clock
  @dev:		Pointer to our struct device.
  Some PHY devices need to know what the actual card clock is.  In order for
  them to find out, we'll provide a clock through the common clock framework
  for them to query.
  Note: without seriously re-architecting SDHCI's clock code and testing on
  all platforms, there's no way to create a totally beautiful clock here
  with all clock ops implemented.  Instead, we'll just create a clock that can
  be queried and set the CLK_GET_RATE_NOCACHE attribute to tell common clock
  framework that we're doing things behind its back.  This should be sufficient
  to create nice clean device tree bindings and later (if needed) we can try
  re-architecting SDHCI if we see some benefit to it.
  Return: 0 on success and error value on error
 Providing a clock to the PHY is optional; no error if missing 
 If clock-frequency property is set, use the provided value 
 SPDX-License-Identifier: GPL-2.0-only
  CQHCI crypto engine (inline encryption) support
  Copyright 2020 Google LLC
 Map from blk-crypto modes to CQHCI crypto algorithm IDs and key sizes 
 Clear CFGE 
 Write the key 
 Write dword 17 
 Write dword 16, which includes the new value of CFGE 
 In XTS mode, the blk_crypto_key's size is already doubled 
	
	  Clear the crypto cfg on the device. Clearing CFGE
	  might not be sufficient, so just clear the entire cfg.
  The keyslot management operations for CQHCI crypto.
  Note that the block layer ensures that these are never called while the host
  controller is runtime-suspended.  However, the CQE won't necessarily be
  "enabled" when these are called, i.e. CQHCI_ENABLE might not be set in the
  CQHCI_CFG register.  But the hardware allows that.
  cqhci_crypto_init - initialize CQHCI crypto support
  @cq_host: a cqhci host
  If the driver previously set MMC_CAP2_CRYPTO and the CQE declares
  CQHCI_CAP_CS, initialize the crypto support.  This involves reading the
  crypto capability registers, initializing the blk_crypto_profile, clearing
  all keyslots, and enabling 128-bit task descriptors.
  Return: 0 if crypto was initialized or isn't supported; whether
 	   MMC_CAP2_CRYPTO remains set indicates which one of those cases it is.
 	   Also can return a negative errno value on unexpected error.
	
	  CCAP.CFGC is off by one, so the actual number of crypto
	  configurations (a.k.a. keyslots) is CCAP.CFGC + 1.
 Unfortunately, CQHCI crypto only supports 32 DUN bits. 
	
	  Cache all the crypto capabilities and advertise the supported crypto
	  modes and data unit sizes to the block layer.
 Clear all the keyslots so that we start in a known state. 
 CQHCI crypto requires the use of 128-bit task descriptors. 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2010 Marvell International Ltd.
 		Zhangfei Gao <zhangfei.gao@marvell.com>
 		Kevin Wang <dwang4@marvell.com>
 		Jun Nie <njun@marvell.com>
 		Qiming Wu <wuqm@marvell.com>
 		Philip Rakity <prakity@marvell.com>
 Turn onoff Dynamic SD Clock Gating 
 Disableenable Clock Gate 
 Clock Gate Control 
		
		  tune timing of read datacommand when crc error happen
		  no performance impact
 on-chip device 
 If slot design supports 8 bit data, indicate this to MMC. 
 SPDX-License-Identifier: GPL-2.0-or-later
  Access SDMMC cards through SPI master controllers
  (C) Copyright 2005, Intec Automation,
 		Mike Lavender (mike@steroidmicros)
  (C) Copyright 2006-2007, David Brownell
  (C) Copyright 2007, Axis Communications,
 		Hans-Peter Nilsson (hp@axis.com)
  (C) Copyright 2007, ATRON electronic GmbH,
 		Jan Nikitenko <jan.nikitenko@gmail.com>
 for R1_SPI_ bit values 
 NOTES:
  - For now, we won't try to interoperate with a real mmcsdsdio
    controller, although some of them do have hardware support for
    SPI protocol.  The main reason for such configs would be mmc-ish
    cards like DataFlash, which don't support that "native" protocol.
    We don't have a "DataFlashMMCSDSDIO card slot" abstraction to
    switch between driver stacks, and in any case if "native" mode
    is available, it will be faster and hence preferable.
  - MMC depends on a different chipselect management policy than the
    SPI interface currently supports for shared bus segments:  it needs
    to issue multiple spi_message requests with the chipselect active,
    using the results of one message to decide the next one to issue.
    Pending updates to the programming interface, this driver expects
    that it not share the bus with other drivers (precluding conflicts).
  - We tell the controller to keep the chipselect active from the
    beginning of an mmc_host_ops.request until the end.  So beware
    of SPI controller drivers that mis-handle the cs_change flag!
    However, many cards seem OK with chipselect flapping updown
    during that time ... at least on unshared bus segments.
  Local protocol constants, internal to data block protocols.
 Response tokens used to ack each block written: 
 Read and write blocks start with these tokens and end with crc;
  on error, read tokens act like a subset of R2_SPI_ values.
 single block rw, multiblock read 
 multiblock write 
 terminate multiblock write 
 One of the critical speed parameters is the amount of data which may
  be transferred in one command. If this value is too low, the SD card
  controller has to do multiple partial block writes (argggh!). With
  today (2008) SD cards there is little speed gain if we transfer more
  than 64 KBytes at a time. So use this value until there is any indication
  that we should do more here.
  Local Data Structures
 "scratch" is per-{command,block} data exchanged with the card 
 for bulk data transfers 
 for status readback 
 underlying DMA-aware controller, or null 
 buffer used for commands and for message "overhead" 
	 Specs say to write ones most of the time, even when the card
	  has no need to read its input data; and many cards won't care.
	  This is our source of those ones.
  MMC-over-SPI protocol glue, used by the MMC stack interface
 chipselect will always be inactive after setup() 
 If we need long timeouts, we may release the CPU 
  Note that for SPI, cmd->resp[0] is not the same data as "native" protocol
  hosts return!  The low byte holds R1_SPI bits.  The next byte may hold
  R2_SPI bits ... for SEND_STATUS, or after data read errors.
  cmd->resp[1] holds any four-byte response, for R3 (READ_OCR) and on
  newer cards R7 (IF_COND).
 return zero, else negative errno after setting cmd->error 
	 Except for data block reads, the whole response will already
	  be stored in the scratch buffer.  It's somewhere after the
	  command and the first byte we read after it.  We ignore that
	  first byte.  After STOP_TRANSMISSION command it may include
	  two data bits, but otherwise it's all ones.
 Data block reads (R1 response types) may need more data... 
		 Card sends N(CR) (== 1..8) bytes of all-ones then one
		  status byte ... and we already scanned 2 bytes.
		 
		  REVISIT block read paths use nasty byte-at-a-time IO
		  so it can always DMA directly into the target buffer.
		  It'd probably be better to memcpy() the first chunk and
		  avoid extra io calls...
		 
		  Note we check for more than 8 bytes, because in practice,
		  some SD cards are slow...
 Houston, we have an ugly card with a bit-shifted response 
 read the next byte 
 Status byte: the entire seven-bit R1 response.  
 Bad address 
 Function not implemented 
 Illegal byte sequence 
 IO error 
 else R1_SPI_IDLE, "it's resetting" 
	 SPI R1B == R1 + busy; STOP_TRANSMISSION (for multiblock reads)
	  and less-common stuff like various erase operations.
 maybe we read all the busy tokens already 
	 SPI R2 == R1 + second status byte; SEND_STATUS
	  SPI R5 == R1 + data byte; IO_RW_DIRECT
 read the next byte 
 SPI R3, R4, or R7 == R1 + 4 bytes 
 read the next byte 
 SPI R1 == just one status byte 
 disable chipselect on errors and some success cases 
 Issue command and read its response.
  Returns zero on success, negative for error.
  On error, caller must cope with mmc core retry mechanism.  That
  means immediate low-level resubmit, which affects the bus lock...
	 We can handle most commands (except block reads) in one full
	  duplex IO operation before either starting the next transfer
	  (data block or command) or else deselecting the card.
	 
	  First, write 7 bytes:
	   - an all-ones byte to ensure the card is ready
	   - opcode byte (plus start and transmission bits)
	   - four bytes of big-endian argument
	   - crc7 (plus end bit) ... always computed, it's cheap
	 
	  We init the whole buffer to all-ones, which is what we need
	  to write while we're reading (later) response data.
	 Then, read up to 13 bytes (while writing all-ones):
	   - N(CR) (== 1..8) bytes of all-ones
	   - status byte (for all response types)
	   - the rest of the response, either:
	       + nothing, for R1 or R1B responses
	 	+ second status byte, for R2 responses
	 	+ four data bytes, for R3 and R7 responses
	 
	  Finally, read some more bytes ... in the nice cases we know in
	  advance how many, and reading 1 more is always OK:
	   - N(EC) (== 0..N) bytes of all-ones, before deselectfinish
	   - N(RC) (== 1..N) bytes of all-ones, before next command
	   - N(WR) (== 1..N) bytes of all-ones, before data write
	 
	  So in those cases one full duplex IO of at most 21 bytes will
	  handle the whole command, leaving the card ready to receive a
	  data block or new command.  We do that whenever we can, shaving
	  CPU and IRQ costs (especially when using DMA or FIFOs).
	 
	  There are two other cases, where it's not generally practical
	  to rely on a single IO:
	 
	   - R1B responses need at least N(EC) bytes of all-zeroes.
	 
	     In this case we can try to fit it into one IO, then
	     maybe read more data later.
	 
	   - Data block reads are more troublesome, since a variable
	     number of padding bytes precede the token and data.
	       + N(CX) (== 0..8) bytes of all-ones, before CSD or CID
	       + N(AC) (== 1..many) bytes of all-ones
	 
	     In this case we currently only have minimal speedups here:
	     when N(CR) == 1 we can avoid IO in response_get().
 min(N(CR)) + status 
 R1 
 max(N(CR)) + status + min(N(RC),N(WR)) 
 R2R5 
 R3R4R7 
 R1B 
 else:  R1 (most commands) 
 send command, leaving chipselect active 
 after no-data commands and STOP_TRANSMISSION, chipselect off 
 Build data message with up to four separate transfers.  For TX, we
  start by writing the data token.  And in most cases, we finish with
  a status transfer.
  We always provide TX data for data and CRC.  The MMCSD protocol
  requires us to write ones; but Linux defaults to writing zeroes;
  so we explicitly initialize it to all ones on RX paths.
  We also handle DMA mapping, so the underlying SPI controller does
  not need to (re)do it for each message.
	 for reads, readblock() skips 0xff bytes before finding
	  the token; for writes, this transfer issues that token.
	 Body of transfer is buffer, then CRC ...
	  either TX-only, or RX with TX-ones.
 length and actual buffer info are written later 
 the actual CRC may get written later 
	
	  A single block read is followed by N(EC) [0+] all-ones bytes
	  before deselect ... don't bother.
	 
	  Multiblock reads are followed by N(AC) [1+] all-ones bytes before
	  the next block is read, or a STOP_TRANSMISSION is issued.  We'll
	  collect that single byte, so readblock() doesn't need to.
	 
	  For a write, the one-byte data response follows immediately, then
	  come zero or more busy bytes, then N(WR) [1+] all-ones bytes.
	  Then single block reads may deselect, and multiblock ones issue
	  the next token (next data block, or STOP_TRAN).  We can try to
	  minimize IO ops by using a single read to collect end-of-busy.
  Write one block:
   - caller handled preceding N(WR) [1+] all-ones bytes
   - data block
 	+ token
 	+ data bytes
 	+ crc16
   - an all-ones byte ... card writes a data-response byte
   - followed by N(EC) [0+] all-ones bytes, card writes zero'busy'
  Return negative errno, else success.
	
	  Get the transmission data-response reply.  It must follow
	  immediately after the data block we transferred.  This reply
	  doesn't necessarily tell whether the write operation succeeded;
	  it just says if the transmission was ok and whether earlier
	  writes succeeded; see the standard.
	 
	  In practice, there are (even modern SDHC-)cards which are late
	  in sending the response, and miss the time frame by a few bits,
	  so we have to cope with this situation and check the response
	  bit-by-bit. Arggh!!!
 First 3 bit of pattern are undefined 
 left-adjust to leading 0 bit 
 right-adjust for pattern matching. Code is in bit 4..0 now. 
 host shall then issue MMC_STOP_TRANSMISSION 
		 host shall then issue MMC_STOP_TRANSMISSION,
		  and should MMC_SEND_STATUS to sort it out
	 Return when not busy.  If we didn't collect that status yet,
	  we'll need some more IO.
 card is non-busy if the most recent bit is 1 
  Read one block:
   - skip leading all-ones bytes ... either
       + N(AC) [1..f(clock,CSD)] usually, else
       + N(CX) [0..8] when reading CSD or CID
   - data block
 	+ token ... if error token, no data or crc
 	+ data bytes
 	+ crc16
  After single block reads, we're done; N(EC) [0+] all-ones bytes follow
  before dropping chipselect.
  For multiblock reads, caller either reads the next block or issues a
  STOP_TRANSMISSION command.
	 At least one SD card sends an all-zeroes byte when N(CX)
	  applies, before the all-ones bytes ... just cope with that.
	 The token may be bit-shifted...
	  the first 0-bit precedes the data stream.
		 Walk through the data and the crc and do
		  all the magic to get byte-aligned data.
  An MMCSD data stage includes one or more blocks, optional CRCs,
  and inline handshaking.  That handhaking makes it unlike most
  other SPI protocol stacks.
	 Handle scatterlist segments one at a time, with synch for
	  each 512-byte block
		 set up dma mapping for controller drivers that might
		  use DMA ... though they may fall back to PIO
 never invalidate whole shared pages ... 
 allow pio too; we don't allow highmem 
 transfer each block, and update request status 
 discard mappings 
	 NOTE some docs describe an MMC-only SET_BLOCK_COUNT (CMD23) that
	  can be issued before multiblock writes.  Unlike its more widely
	  documented analogue for SD cards (SET_WR_BLK_ERASE_COUNT, ACMD23),
	  that can affect the STOP_TRAN logic.   Complete (and current)
	  MMC specs should sort that out before Linux starts using CMD23.
		 Tweak the per-block message we set up earlier by morphing
		  it to hold single buffer with the token followed by some
		  all-ones bytes ... skip N(BR) (0..1), scan the rest for
		  "not busy any longer" status, and leave chip selected.
		 Ideally we collected "not busy" status with one IO,
		  avoiding wasteful byte-at-a-time scanning... but more
		  IO is often needed.
  MMC driver implementation -- the interface to the MMC stack
 MMC core and layered drivers MUST issue SPI-aware commands 
 request exclusive bus access 
 issue command; then optionally data and stop 
		
		  The SPI bus is not always reliable for large data transfers.
		  If an occasional crc error is reported by the SD device with
		  data readwrite over SPI, it may be recovered by repeating
		  the last SD command again. The retry count is set to 5 to
		  ensure the driver passes stress tests.
 release the bus 
 See Section 6.4.1, in SD "Simplified Physical Layer Specification 2.0"
  NOTE that here we can't know that the card has just been powered up;
  not all MMCSD sockets support power switching.
  FIXME when the card is still in SPI mode, e.g. from a previous kernel,
  this doesn't seem to do the right thing at all...
	 Try to be very sure any previous command has completed;
	  wait till not-busy, skip debris from any old commands.
	
	  Do a burst with chipselect active-high.  We need to do this to
	  meet the requirement of 74 clock cycles with both chipselect
	  and CMD (MOSI) high before CMD0 ... after the card has been
	  powered up to Vdd(min), and so is ready to take commands.
	 
	  Some cards are particularly needy of this (e.g. Viking "SD256")
	  while most others don't seem to care.
	 
	  Note that this is one of the places MMCSD plays games with the
	  SPI protocol.  Another is that when chipselect is released while
	  the card returns BUSY status, the clock must issue several cycles
	  with chipselect high before the card will stop driving its output.
	 
	  SPI_CS_HIGH means "asserted" here. In some cases like when using
	  GPIOs for chip select, SPI_CS_HIGH is set but this will be logically
	  inverted by gpiolib, so if we want to ascertain to drive it high
	  we should toggle the default with an XOR as we do here.
 Just warn; most cards work without it. 
 Wot, we can't get the same setup we had before? 
		 switch power onoff if possible, accounting for
		  max 250msec powerup time if needed.
 See 6.4.1 in the simplified SD card physical spec 2.0 
		 If powering down, ground all card inputs to avoid power
		  delivery from data lines!  On a shared SPI bus, this
		  will probably be temporary; 6.4.2 of the simplified SD
		  spec says this must last at least 1msec.
		 
		    - Clock low means CPOL 0, e.g. mode 0
		    - MOSI low comes from writing zero
		    - Chipselect is usually active low...
			
			  Now clock should be low due to spi mode 0;
			  MOSI should be low because of written 0x00;
			  chipselect should be low (it is active low)
			  power supply is off, so now MMC is off too!
			 
			  FIXME no, chipselect can be high since the
			  device is inactive and SPI_CS_HIGH is clear...
  SPI driver implementation
	 We rely on full duplex transfers, mostly to reduce
	  per-transfer overheads (by making fewer transfers).
	 MMC and SD specs only seem to care that sampling is on the
	  rising edge ... meaning SPI modes 0 or 3.  So either SPI mode
	  should be legit.  We'll use mode 0 since the steady state is 0,
	  which is appropriate for hotplugging, unless the platform data
	  specify mode 3 (if hardware is not compatible to mode 0).
	 We need a supply of ones to transmit.  This is the only time
	  the CPU touches these, so cache coherency isn't a concern.
	 
	  NOTE if many systems use more than one MMC-over-SPI connector
	  it'd save some memory to share this.  That's evidently rare.
	 SPI doesn't need the lowspeed device identification thing for
	  MMC or SD cards, since it never comes up in open drain mode.
	  That's good; some SPI masters can't handle very low speeds!
	 
	  However, low speed SDIO cards need not handle over 400 KHz;
	  that's the only reason not to use a few MHz for f_min (until
	  the upper layer reads the target frequency from the CSD).
	 Platform data is used to hook up things like card sensing
	  and power switching gpios.
 preallocate dma buffers 
 setup message for statusbusy readback 
 register card detect irq 
 pass platform capabilities, if any 
	
	  Index 0 is card detect
	  Old boardfiles were specifying 1 ms as debounce
		
		  The platform has a CD GPIO signal that may support
		  interrupts, so let mmc_gpiod_request_cd_irq() decide
		  if polling is needed or not.
 Index 1 is write protectread only 
 prevent new mmc_detect_change() calls 
 SPDX-License-Identifier: GPL-2.0-only
  SDHCI support for CNS3xxx SoC
  Copyright 2008 Cavium Networks
  Copyright 2010 MontaVista Software, LLC.
  Authors: Scott Shu
 	    Anton Vorontsov <avorontsov@mvista.com>
		
		  On CNS3xxx divider grows linearly up to 4, and then
		  exponentially up to 256.
 Divide by 3 is special. 
 SPDX-License-Identifier: GPL-2.0
  Freescale eSDHC i.MX controller driver for the platform bus.
  derived from the OF-version.
  Copyright (c) 2010 Pengutronix e.K.
    Author: Wolfram Sang <kernel@pengutronix.de>
 VENDOR SPEC register 
 Bits 3 and 6 are not SDHCI standard definitions 
 Tuning bits 
 dll control register 
 tune control register 
 strobe dll register 
 NOTE: the minimum valid tuning start tap for mx6sl is 1 
 pinctrl state 
  Our interpretation of the SDHCI_HOST_CONTROL register
  There is an INT DMA ERR mismatch between eSDHC and STD SDHC SPEC:
  Bit25 is used in STD SPEC, and is reserved in fsl eSDHC design,
  but bit28 is used as the INT DMA ERR in fsl eSDHC design.
  Define this macro DMA error INT for fsl eSDHC
 the address offset of CQHCI 
  The CMDTYPE of the CMD register (offset 0xE) should be set to
  "11" when the STOP CMD12 is issued on imx53 to abort one
  open ended multi-blk IO. Otherwise the TC INT wouldn't
  be generated.
  In exact block transfer, the controller doesn't complete the
  operations automatically as required at the end of the
  transfer and remains on hold if the abort command is not sent.
  As a result, the TC flag is not asserted and SW received timeout
  exception. Bit1 of Vendor Spec register is used to fix it.
  The flag tells that the ESDHC controller is an USDHC block that is
  integrated on the i.MX6 series.
 The IP supports manual tuning process 
 The IP supports standard tuning process 
 The IP has SDHCI_CAPABILITIES_1 register 
  The IP has erratum ERR004536
  uSDHC: ADMA Length Mismatch Error occurs if the AHB read access is slow,
  when reading data from the card
  This flag is also set for i.MX25 and i.MX35 in order to get
  SDHCI_QUIRK_BROKEN_ADMA, but for different reasons (ADMA capability bits).
 The IP supports HS200 mode 
 The IP supports HS400 mode 
  The IP has errata ERR010450
  uSDHC: Due to the IO timing limit, for SDR mode, SD card clock can't
  exceed 150MHz, for DDR mode, SD card clock can't exceed 45MHz.
 The IP supports HS400ES mode 
 The IP has Host Controller Interface for Command Queuing 
 need request pmqos during low power 
 The IP state got lost in low power mode 
 The IP lost clock rate in PM_RUNTIME 
  The IP do not support the ACMD23 feature completely when use ADMA mode.
  In ADMA mode, it only use the 16 bit block count of the register 0x4
  (BLOCK_ATT) as the CMD23's argument for ACMD23 mode, which means it will
  ignore the upper 16 bit of the CMD23's argument. This will block the reliable
  write operation in RPMB, because RPMB reliable write need to set the bit31
  of the CMD23's argument.
  imx6qpdlimx6sximx6slimx7d has this limitation only for ADMA mode, SDMA
  do not has this limitation. so when these SoC use ADMA mode, it need to
  disable the ACMD23 feature.
 ERR004536 is not applicable for the IP  
 no WP, neither controller nor gpio 
 mmc controller internal WP 
 external gpio pin for WP 
 no CD, neither controller nor gpio 
 mmc controller internal CD 
 external gpio pin for CD 
 no CD, card permanently wired to host 
  struct esdhc_platform_data - platform data for esdhc on i.MX
  ESDHC_WP(CD)_CONTROLLER type is not available on i.MX2535.
  @wp_type:	type of write_protect method (see wp_types enum above)
  @cd_type:	type of card_detect method (see cd_types enum above)
 The delay cell steps in tuning procedure 
 The start delay cell point in tuning procedure 
 The delay cell for strobe pad (read clock) 
 no multiblock command pending 
 exact multiblock cmd in process 
 sent CMD12, waiting for response INT 
 sentinel  }
 Enable the auto tuning circuit to check the CMD line and BUS line 
 1BITBUS 
 save the least 20 bits 
 move dat[0-3] bits 
 move cmd line bit 
 ignore bit[0-15] as it stores cap_1 register val for mx6sl 
		 In FSL esdhc IC module, only bit20 is used to indicate the
		  ADMA2 capability of esdhc, but this bit is messed up on
		  some SOCs (e.g. on MX25, MX35 this bit is set, but they
		  don't actually support ADMA2). So set the BROKEN_ADMA
		  quirk on MX2535 platforms.
 imx6qdl does not have cap_1 register, fake one 
			
			  Do not advertise faster UHS modes if there are no
			  pinctrl states for 100MHz200MHz.
		
		  mask off the interrupt we get in response to the manually
		  sent CMD12
			
			  Clear and then set D3CD bit to avoid missing the
			  card interrupt. This is an eSDHC controller problem
			  so we need to apply the following workaround: clear
			  and set D3CD bit will make eSDHC re-sample the card
			  interrupt. In case a card interrupt was lost,
			  re-sample it by the following steps.
 send a manual CMD12 with RESPTYP=none 
			
			  The usdhc register returns a wrong host version.
			  Correct it here.
 the std tuning bits is in ACMD12_ERR for imx6sl 
 Swap AC23 bit 
 Swap AC23 bit 
			 Set watermark levels for PIO access to maximum value
			  (128 words) to accommodate full 512 bytes buffer.
			  For DMA access restore the levels to default value.
				
				  Since already disable DMA mode, so also need
				  to clear the DMASEL. Otherwise, for standard
				  tuning, when send tuning command, usdhc will
				  still prefetch the ADMA script from wrong
				  DMA address, then we will see IOMMU report
				  some error which show lack of TLB mapping.
			
			  Postpone this write, we must do it together with a
			  command write that is down below.
		
		  FSL put some DMA bits here
		  If your board has a regulator, code should be here
 FSL messed up here, so we need to manually compose it. 
 ensure the endianness 
 bits 8&9 are reserved on mx25 
 DMA mode bits are shifted 
		
		  Do not touch buswidth bits here. This is done in
		  esdhc_pltfm_bus_width.
		  Do not touch the D3CD bit either which is used for the
		  SDIO interrupt erratum workaround.
			
			  The esdhc has a design violation to SDHC spec which
			  tells that software reset should not affect card
			  detection circuit. But esdhc clears its SYSCTL
			  register bits [0..2] during the software reset. This
			  will stop those clocks that card detection circuit
			  relies on. To work around it, we turn the clocks on
			  back to keep card detection circuit functional.
			
			  The reset on usdhc fails to clear MIX_CTRL register.
			  Do it manually here.
				
				  the tuning bits should be kept during reset
			
			  The eSDHC DAT line software reset clears at least the
			  data transfer width on i.MX25, so make sure that the
			  Host Control register is unaffected.
 For i.MX53 eSDHCv3, SYSCTL.SDCLKFS may not be set to 0. 
		
		  According to the i.MX53 reference manual, if DLLCTRL[10] can
		  be set, then the controller is eSDHCv3, else it is eSDHCv2.
 need to wait the bit 3 of the PRSSTAT to be set, make sure card clock is stable 
	
	  i.MX uSDHC internally already uses a fixed optimized timing for
	  DDR50, normally does not require tuning for DDR50 mode.
 FIXME: delay a bit for card to be ready for next tuning due to errors 
 IC suggest to reset USDHC before every tuning command 
 find the mininum delay first which can pass tuning 
 find the maxinum delay which can not pass tuning 
 use average delay to get the best timing 
 back to default state for other legacy timing 
  For HS400 eMMC, there is a data_strobe line. This signal is generated
  by the device and used for data output and CRC status response output
  in HS400 mode. The frequency of this signal follows the frequency of
  CLK generated by host. The host receives the data which is aligned to the
  edge of data_strobe line. Due to the time delay between CLK line and
  data_strobe line, if the delay time is larger than one clock cycle,
  then CLK and data_strobe line will be misaligned, read error shows up.
 disable clock before enabling strobe dll 
 force a reset on strobe dll 
 clear the reset bit on strobe dll before any setting 
	
	  enable strobe dll ctrl and adjust the delay target
	  for the uSDHC loopback read clock
 wait max 50us to get the REFSLV lock 
 Reset the tuning circuit 
 Make sure ESDHC_MIX_CTRL_EXE_TUNE cleared 
			
			  SDHCI_INT_DATA_AVAIL is W1C bit, set this bit will clear the
			  usdhc IP internal logic flag execute_tuning_with_clr_buf, which
			  will finally make sure the normal data transfer logic correct.
 disable ddr mode and disable HS400 mode 
 update clock after enable DDR for strobe DLL lock 
 Doc Erratum: the uSDHC actual maximum timeout count is 1 << 29 
 use maximum timeout counter 
		
		  The imx6q ROM code will change the default watermark
		  level setting to something insane.  Change it back here.
		
		  ROM code will change the bit burst_length_enable setting
		  to zero if this usdhc is chosen to boot system. Change
		  it back here, otherwise it will impact the performance a
		  lot. This bit is used to enabledisable the burst length
		  for the external AHB2AXI bridge. It's useful especially
		  for INCR transfer because without burst length indicator,
		  the AHB2AXI bridge does not know the burst length in
		  advance. And without burst length indicator, AHB INCR
		  transfer can only be converted to singles on the AXI side.
		
		  erratum ESDHC_FLAG_ERR004536 fix for MX6Q TO1.2 and MX6DL
		  TO1.1, it's harmless for MX6SL
 disable DLL_CTRL delay line settings 
		
		  For the case of command with busy, if set the bit
		  ESDHC_VEND_SPEC2_EN_BUSY_IRQ, USDHC will generate a
		  transfer complete interrupt when busy is deasserted.
		  When CQHCI use DCMD to send a CMD need R1b respons,
		  CQHCI require to set ESDHC_VEND_SPEC2_EN_BUSY_IRQ,
		  otherwise DCMD will always meet timeout waiting for
		  hardware interrupt issue.
			 Disable the CMD CRC check for tuning, if not, need to
			  add some delay after every tuning command, because
			  hardware standard tuning logic will directly go to next
			  step once it detect the CMD CRC error, will not wait for
			  the card side to finally send out the tuning data, trigger
			  the buffer read ready interrupt immediately. If usdhc send
			  the next tuning command some eMMC card will stuck, can't
			  response, block the tuning procedure or the first command
			  after the whole tuning procedure always can't get any response.
			
			  ESDHC_STD_TUNING_EN may be configed in bootloader
			  or ROM code, so clear this bit here to make sure
			  the manual tuning can work.
		
		  On i.MX8MM, we are running Dual Linux OS, with 1st Linux using SD Card
		  as rootfs storage, 2nd Linux using eMMC as rootfs storage. We let the
		  the 1st linux configure powerclock for the 2nd Linux.
		 
		  When the 2nd Linux is booting into rootfs stage, we let the 1st Linux
		  to destroy the 2nd linux, then restart the 2nd linux, we met SDHCI dump.
		  After we clear the pending interrupt and halt CQCTL, issue gone.
	
	  CQE gets stuck if it sees Buffer Read Enable bit set, which can be
	  the case after tuning, so ensure the buffer is drained.
	
	  Runtime resume will reset the entire host controller, which
	  will also clear the DMAENBCEN of register ESDHC_MIX_CTRL.
	  Here set DMAEN and BCEN when enable CMDQ.
	
	  Though Runtime resume reset the entire host controller,
	  but do not impact the CQHCI side, need to clear the
	  HALT bit, avoid CQHCI stuck in the first request when
	  system resume back.
	
	  If we have this property, then activate WP check.
	  Retrieveing and requesting the actual WP GPIO will happen
	  in the call to mmc_of_parse().
 call to generic mmc_of_parse to support additional capabilities 
 GPIO CD can be set as a wakeup source 
 clear tuning bits in case ROM has set it already 
		
		  Link usdhc specific mmc_host_ops execute_tuning function,
		  to replace the standard one in sdhci_ops.
	
	  Setup the wakeup capability here, let user to decide
	  whether need to enable this wakeup through sysfs interface.
 re-initialize hw state in case it's lost in low power mode 
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2018 HiSilicon Technologies Co., Ltd.
 SPDX-License-Identifier: GPL-2.0-or-later
  Exynos Specific Extensions for Synopsys DW Multimedia Card Interface driver
  Copyright (C) 2012, Samsung Electronics Co., Ltd.
 Variations in Exynos specific dw-mshc controller 
 Exynos implementation specific driver private data 
	
	  If Exynos is provided the Security management,
	  set for non-ecryption mode at this time.
	
	  Exynos4412 and Exynos5250 extends the use of CMD register with the
	  use of bit 29 (which is reserved on standard MSHC controllers) for
	  optionally bypassing the HOLD register for command and data. The
	  HOLD register should be bypassed in case there is no phase shift
	  applied on CMDDATA that is sent to the card.
 CONFIG_PM 
  dw_mci_exynos_suspend_noirq - Exynos-specific suspend code
  @dev: Device to suspend (this device)
  This ensures that device will be in runtime active state in
  dw_mci_exynos_resume_noirq after calling pm_runtime_force_resume()
  dw_mci_exynos_resume_noirq - Exynos-specific resume code
  @dev: Device to resume (this device)
  On exynos5420 there is a silicon errata that will sometimes leave the
  WAKEUP_INT bit in the CLKSEL register asserted.  This bit is 1 to indicate
  that it fired and we can clear it by writing a 1 back.  Clear it to prevent
  interrupts from going off constantly.
  We run this code on all exynos variants because it doesn't hurt.
 CONFIG_PM_SLEEP 
	
	  Not supported to configure register
	  related to HS400
	
	  Don't care if wanted clock is zero or
	  ciu clock is unavailable
 Guaranteed minimum frequency for cclkin 
 Update tuned sample timing 
 Should be double rate for DDR mode 
 Set clock timing for the requested speed mode
 Configure setting for HS400 
 Configure clock rate 
	
	  If there is no cadiates value, then it needs to return -EIO.
	  If there are candidates values and don't find bset clk sample value,
	  then use a first candidates clock sample value.
 Common capabilities of Exynos4Exynos5 SoC 
 SPDX-License-Identifier: GPL-2.0-or-later
  meson-mx-sdio.c - Meson6, Meson8 and Meson8b SDIOMMC Host Controller
  Copyright (C) 2015 Endless Mobile, Inc.
  Author: Carlo Caione <carlo@endlessm.com>
  Copyright (C) 2017 Martin Blumenstingl <martin.blumenstingl@googlemail.com>
 7 (CMD) + 32 (response) + 7 (CRC) -1 
 7 (CMD) + 120 (response) + 7 (CRC) -1 
 enable the CMD done interrupt 
 clear pending interrupts 
	
	  NOTE: even though it shouldn't happen we sometimes get command
	  interrupts twice (at least this is what it looks like). Ideally
	  we find out why this happens and warn here as soon as it occurs.
 finally ACK all pending interrupts 
 disable the CMD interrupt 
	
	  skip the timeout handling if the interrupt handler already processed
	  the command.
	
	  TODO: the MMC core framework currently does not support
	  controllers with multiple slots properly. So we only register
	  the first slot for now
 Get regulators and the supported OCR mask 
 Get the min and max supported clock rates 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
  DMA support for Internal DMAC with SDHI SDSDIO controller
  Copyright (C) 2016-19 Renesas Electronics Corporation
  Copyright (C) 2016-17 Horms Solutions, Simon Horman
  Copyright (C) 2018-19 Sang Engineering, Wolfram Sang
 DM_CM_DTRAN_MODE 
 "downstream" = for write commands 
 "upstream" = for read commands 
 1 = Increment address, 0 = Fixed 
 DM_CM_DTRAN_CTRL 
 DM_CM_RST 
 DM_CM_INFO1 and DM_CM_INFO1_MASK 
 DM_CM_INFO2 and DM_CM_INFO2_MASK 
  Specification of this driver:
  - host->chan_{rx,tx} will be used as a flag of enablingdisabling the dma
  - Since this SDHI DMAC register set has 16 but 32-bit width, we
    need a custom accessor.
  Workaround for avoiding to use RX DMAC by multiple channels.
  On R-Car H3 ES1. and M3-W ES1.0, when multiple SDHI channels use
  RX DMAC simultaneously, sometimes hundreds of bytes data are not
  stored into the system memory even if the DMAC interrupt happened.
  So, this driver then uses one RX DMAC channel only.
 RZA2 does not have the ADRR_MODE bit 
 Definitions for sampling clocks 
 DMAC can handle 32bit blk count but only 1 segment 
 DMAC can handle 32bit blk count but only 1 segment 
  Note for r8a7796  r8a774a1: we can't distinguish ES1.1 and 1.2 as of now.
  So, we want to treat them equally and only have a match for ES1.2 to enforce
  this if there ever will be a way to distinguish ES1.2.
 Sentinel.  },
  renesas_sdhi_internal_dmac_map() will be called with two difference
  sg pointers in two mmc_data by .pre_req(), but tmio host can have a single
  sg_ptr only. So, renesas_sdhi_internal_dmac_{un}map() should use a sg
  pointer in a mmc_data instead of host->sg_ptr.
 This DMAC cannot handle if buffer is not 128-bytes alignment 
 set dma parameters 
 start the DMAC 
 Disable DMAC interrupts, we don't use them 
 Each value is set to non-zero to assume "enabling" each DMA 
 Add pre_req and post_req 
 Each value is set to zero to assume "disabling" each DMA 
  Whitelist of specific R-Car Gen3 SoC ES versions to use this DMAC
  implementation as others may use a different implementation.
 sentinel  }
 value is max of SD_SECCNT. Confirmed by HW engineers 
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2018 Oleksij Rempel <linux@rempel-privat.de>
  Driver for Alcor Micro AU6601 and AU6621 controllers
 Note: this driver was created without any documentation. Based
  on sniffing, testing and in some cases mimic of original driver.
  As soon as some one with documentation or more experience in SDMMC, or
  reverse engineering then me, please review this driver and question every
  thing what I did. 2018 Oleksij Rempel <linux@rempel-privat.de>
 SG state for PIO 
 remaining PIO blocks 
 MHZ,		CLK src,		max div, min div 
 As soon as irqs are masked, some status updates may be missed.
  Use this with care.
  Perform DMA IO of a single page.
		
		  For DMA transfers, this function is called just once,
		  at the start of the operation. The hardware can only
		  perform DMA IO on a single page at a time, so here
		  we kick off the transfer with the first page, and expect
		  subsequent pages to be transferred upon IRQ events
		  indicating that the single-page DMA was completed.
		
		  For PIO transfers, we break down each operation
		  into several sector-sized transfers. When one sector has
		  complete, the IRQ handler will call this function again
		  to kick off the transfer of the next sector.
	
	  If this work gets rescheduled while running, it will
	  be run again afterwards but without any active request.
	
	  The specification states that the block count register must
	  be updated, but it does not specify at what point in the
	  data flow. That makes the register entirely useless to read
	  back so we have to assume that nothing made it to the card
	  in the event of an error.
	
	  Need to send CMD12 if -
	  a) open-ended multiblock transfer (no CMD23)
	  b) error in multiblock transfer
		
		  The controller needs a reset of internal state machines
		  upon error conditions.
	 got CMD_END but no CMD is in progress, wake thread an process the
	  error
 Processed actual command. 
 Processed actual command. 
 nothing here to do 
	 we was too fast and got DATA_END after it was processed?
	  lets ignore it for now.
 looks like an error, so lets handle it. 
 some thing bad 
 use fast path for simple tasks 
 Check whether dat[0:3] low 
 check if card is present then send command and data 
 get write protect pin status 
 check if card is present then send command and data 
 FIXME: looks like the DMA engine works only with CMD18 
	
	  We don't do DMA on "complex" transfers, i.e. with
	  non-word-aligned buffers or lengths. A future improvement
	  could be made to use temporary DMA bounce-buffers when these
	  requirements are not met.
	 
	  Also, we don't bother with all the DMA setup overhead for
	  short transfers.
 This data might be unmapped at this time 
 set all pins to input 
 turn of VDD 
		 This is most trickiest part. The order and timings of
		  instructions seems to play important role. Any changes may
		  confuse internal state engine if this HW.
		  FIXME: If we will ever get access to documentation, then this
		  part should be reviewed again.
 enable SD card mode 
 set signal voltage to 3.3V 
		 no documentation about clk delay, for now just try to mimic
		  original driver.
 set BUS width to 1 bit 
 set CLK first time 
 power on VDD 
 wait until the CLK will get stable 
 set CLK again, mimic original driver. 
 enable output 
		 The clk will not work on au6621. We need to trigger data
		  transfer.
 configure timeout. Not clear what exactly it means. 
 No signal voltage switch required 
	 FIXME: This part is a mimics HW init of original driver.
	  If we will ever get access to documentation, then this part
	  should be reviewed again.
 reset command state engine 
 enable sd card mode 
 set BUS width to 1 bit 
 reset data state engine 
 Not sure if a voodoo with AU6601_DMA_BOUNDARY is really needed 
 not clear what we are doing here. 
	 for 6601 - dma_boundary; for 6621 - dma_page_cnt
	  exact meaning of this register is not clear.
 make sure all pins are set to input and VDD is off 
 now we should be safe to enable IRQs 
	 The hardware does DMA data transfer of 4096 bytes tofrom a single
	  buffer address. Scatterlists are not supported at the hardware
	  level, however we can work with them at the driver level,
	  provided that each segment is exactly 4096 bytes in size.
	  Upon DMA completion of a single segment (signalled via IRQ), we
	  immediately proceed to transfer the next segment from the
	  scatterlist.
	 
	  The overall request is limited to 240 sectors, matching the
	  original vendor driver.
 make sure irqs are disabled 
 CONFIG_PM_SLEEP 
 sentinel 
 SPDX-License-Identifier: GPL-2.0
  SDHCI driver for Synopsys DWC_MSHC controller
  Copyright (C) 2018 Synopsys, Inc. (www.synopsys.com)
  Authors:
 	Prabu Thangamuthu <prabu.t@synopsys.com>
 	Manjunath M B <manjumb@synopsys.com>
 Synopsys vendor specific registers 
 MMCM DRP 
 Disable software managed rx tuning 
 Assert reset to MMCM 
 Configure MMCM 
 De-assert reset to MMCM 
 Enable clock 
 SPDX-License-Identifier: GPL-2.0
  MMC software queue support based on command queue interfaces
  Copyright (C) 2019 Linaro, Inc.
  Author: Baolin Wang <baolin.wang@linaro.org>
 Make sure we are not already running a request now 
 Make sure there are remain requests need to pump 
	
	  If returning BUSY from request_atomic(), which means the card
	  may be busy now, and we should change to non-atomic context to
	  try again for this unusual case, to avoid time-consuming operations
	  in the atomic context.
	 
	  Note: we just give a warning for other error cases, since the host
	  driver will handle them.
	
	  If there are no remain requests in software queue, then set a invalid
	  tag.
	
	  Increasing the next tag and check if the corresponding request is
	  available, if yes, then we found a candidate request.
 Othersie we should iterate all slots to find a available tag. 
 Update the next available tag to be queued. 
 Do not pump new request in recovery mode. 
	 
	   Try to pump new request to host controller as fast as possible,
	   after completing previous request.
  mmc_hsq_finalize_request - finalize one request if the request is done
  @mmc: the host controller
  @mrq: the request need to be finalized
  Return true if we finalized the corresponding request in software queue,
  otherwise return false.
	
	  Clear current completed slot request to make a room for new request.
	
	  Try to pump new request if there are request pending in software
	  queue after finishing recovery.
 Do not queue any new requests in recovery mode. 
	
	  Set the next tag as current request tag if no available
	  next tag.
 SPDX-License-Identifier: GPL-2.0+
  Amlogic Meson SDHC clock controller
  Copyright (C) 2020 Martin Blumenstingl <martin.blumenstingl@googlemail.com>
 sentinel  }
	
	  TODO: Replace clk_hw.clk with devm_clk_hw_get_clk() once that is
	  available.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (C) 2009-2010, Lars-Peter Clausen <lars@metafoo.de>
   Copyright (C) 2013, Imagination Technologies
   JZ4740 SDMMC controller driver
  The MMC core allows to prepare a mmc_request while another mmc_request
  is in-flight. This is used via the pre_reqpost_req hooks.
  This driver uses the pre_reqpost_req hooks to mapunmap the mmc_request.
  Following what other drivers do (sdhci, dw_mmc) we use the following cookie
  flags to keep track of the mmc_request mapping state.
  COOKIE_UNMAPPED: the request is not mapped.
  COOKIE_PREMAPPED: the request was mapped in pre_req,
  and should be unmapped in post_req.
  COOKIE_MAPPED: the request was mapped in the irq handler,
  and should be unmapped before mmc_request_done is called..
 DMA support 
 The DMA trigger level is 8 words, that is to say, the DMA read
  trigger is when data words in MSC_RXFIFO is >= 8 and the DMA write
  trigger is when data words in MSC_TXFIFO is < 8.
----------------------------------------------------------------------------
 DMA infrastructure 
 Prepares DMA data for current or next transfer.
  A request can be in-flight when this is called.
----------------------------------------------------------------------------
	 For whatever reason there is sometime one word more in the fifo then
			
			  The JZ4780's MMC controller has integrated DMA ability
			  in addition to being able to use the external DMA
			  controller. It moves DMA control bits to a separate
			  register. The DMA_SEL bit chooses the external
			  controller over the integrated one. Earlier SoCs
			  can only use the external controller, and have a
			  single DMA enable bit in CMDAT.
			 Use DMA if enabled.
			  Data transfer direction is defined later by
			  relying on data flags in
			  jz4740_mmc_prepare_dma_data() and
			  jz4740_mmc_start_dma_transfer().
			 Use PIO if DMA is not enabled.
			  Data transfer direction was defined before
			  by relying on data flags in
			  jz_mmc_prepare_data_transfer().
 JZ4740 should be the only one using legacy probe 
	
	  We use a fixed timeout of 5s, hence inform the core about it. A
	  future improvement should instead respect the cmd->busy_timeout.
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxdriversmmchostsdhci-pci.c - SDHCI on PCI bus interface
   Copyright (C) 2005-2008 Pierre Ossman, All Rights Reserved.
  Thanks to the following companies for their support:
      - JMicron (hardware and technical support)
\
  Hardware specific quirk handling                                          
 Apply a delay to allow controller to settle 
	 Otherwise it becomes confused if card state changed
  ADMA operation is disabled for Moorestown platform due to
  hardware bugs.
	
	  slots number is fixed here for MRST as SDIO35 are never used and
	  have hardware bugs.
 For eMMC, minimum is 1us but give it 9us for good measure 
 For eMMC, minimum is 200us but give it 300us for good measure 
	
	  Bus power may control card power, but a full reset still may not
	  reset the power, whereas a direct write to SDHCI_POWER_CONTROL can.
	  That might be needed to initialize correctly, if the card was left
	  powered on previously.
	
	  Bus power might not enable after D3 -> D0 transition due to the
	  present state not yet having propagated. Retry for up to 2ms.
 Set UHS timing to SDR25 for High Speed mode 
	
	  Tuning can leave the IP in an active state (Buffer Read Enable bit
	  set) which prevents the entry to low power states (i.e. S0i3). Data
	  reset will clear it.
	
	  Program latency tolerance (LTR) accordingly what has been asked
	  by the PM QoS layer or disable it in case we were passed
	  negative value or PM_QOS_LATENCY_ANY.
 Cache the values into lpss structure 
 1000 kHz i.e. 1 MHz 
 Workaround firmware failing to restore the tuning value 
 Define Host controllers for Intel Merrifield platform 
		
		  There are two PCB designs of SD card slot with the opposite
		  card detection sense. Quirk this out by ignoring GPIO state
		  completely in the custom ->get_cd() callback.
 Advertise 2.0v for compatibility with the SDIO card's OCR 
	
	  Turn PMOS on [bit 0], set over current detection to 2.4 V
	  [bit 1:2] and enable over current debouncing [bit 6].
	
	  JMicron chips can have two interfaces to the same hardware
	  in order to work around limitations in Microsoft's driver.
	  We need to make sure we only bind to one of them.
	 
	  This code assumes two things:
	 
	  1. The PCI code adds subfunctions in order.
	 
	  2. The MMC interface has a lower subfunction number
	     than the SD interface.
	
	  JMicron chips need a bit of a nudge to enable the power
	  output pins.
 quirk for unsable RO-detection on JM388 chips 
		
		  Older versions of the chip have lots of nasty glitches
		  in the ADMA engine. It's best just to avoid it
		  completely.
 JM388 MMC doesn't support 1.8V while SD supports it 
 allow 1.8V 
 no 1.8V for MMC 
	
	  The secondary interface requires a bit set to get the
	  interrupts.
 SysKonnect CardBus2SDIO extra registers 
 Wait max 1 ms 
AMD chipset generation
 AMD registers 
 AMD requires custom HS200 tuning 
 Otherwise perform standard SDHCI tuning 
	
	  SDHC 0x7906 requires a hard reset to clear all internal state.
	  Otherwise it can get into a bad state where the DATA lines are always
	  read as zeros.
		
		  SDHCI_RESET_ALL says the card detect logic should not be
		  reset, but since we need to reset the entire controller
		  we should wait until the card detect logic has stabilized.
		 
		  This normally takes about 40ms.
 Generic SD host controller 
 end: all zeroes  },
\
  SDHCI core callbacks                                                      
\
  Suspendresume                                                            
\
  Device probingremoval                                                    
	
	  Check if the chip needs a separate GPIO for card detect to wake up
	  from runtime suspend.  If it is not there, don't allow runtime PM.
 Stay active until mmc core scans for a card 
 Quirk may have changed this 
 SPDX-License-Identifier: GPL-2.0-only
  sdhci-dove.c Support for SDHCI on Marvell's Dove SoC
  Author: Saeed Bishara <saeed@marvell.com>
 	   Mike Rapoport <mike@compulab.co.il>
  Based on sdhci-cns3xxx.c
 those registers don't exist 
 Mask the support for 3.0V 
 SPDX-License-Identifier: GPL-2.0
 Secure Digital Host Controller
 Copyright (C) 2018 Spreadtrum, Inc.
 Author: Chunyan Zhang <chunyan.zhang@unisoc.com>
 SDHCI_ARGUMENT2 register high 16bit 
 SDHCI_HOST_CONTROL2 
  According to the standard specification, BIT(3) of SDHCI_SOFTWARE_RESET is
  reserved, and only used on Spreadtrum's design, the hardware cannot work
  if this bit is cleared.
  1 : normal work
  0 : hardware reset
 backup of host attribute 
 set dll backup mode 
 SDHCI_MAX_CURRENT is reserved on Spreadtrum's platform 
 SDHCI_BLOCK_COUNT is Read Only on Spreadtrum's platform 
	
	  Since BIT(3) of SDHCI_SOFTWARE_RESET is reserved according to the
	  standard specification, sdhci_reset() write this register directly
	  without checking other reserved bits, that will clear BIT(3) which
	  is defined as hardware reset on Spreadtrum's platform and clearing
	  it by mistake will lead the card not work. So here we need to work
	  around it.
 select 2x clock source 
 enable auto gate sdhc_enable_auto_gate 
 wait 1ms 
 wait 1ms 
 wait 1ms 
	
	  According to the Spreadtrum SD host specification, when we changed
	  the clock to be more than 52M, we should enable the PHY DLL which
	  is used to track the clock frequency to make the clock work more
	  stable. Otherwise deviation may occur of the higher clock.
 Select Bus Speed Mode for host 
	
	  Note: don't use sdhci_writeb() API here since it is redirected to
	  sdhci_sprd_writeb() in which we have a workaround for
	  SDHCI_SOFTWARE_RESET which would make bit SDHCI_HW_RESET_CARD can
	  not be cleared.
 wait for 10 us 
 The Spredtrum controller actual maximum timeout count is 1 << 31 
 Validate if the request was from software queue firstly. 
	
	  From version 4.10 onward, ARGUMENT2 register is also as 32-bit
	  block count register which doesn't support stuff bits of
	  CMD23 argument on Spreadtrum's sd host controller.
 Wait for 300 ~ 500 us for pin state stable 
 Set HS400 enhanced strobe mode 
 Set the PHY DLL delay value for HS400 enhanced strobe mode 
	
	  We can not use the standard ops to change and detect the voltage
	  signal for Spreadtrum SD host controller, since our voltage regulator
	  for IO is fixed in hardware, that means we do not need control
	  the standard SD host controller to change the IO voltage.
	
	  Supply the existing CAPS, but clear the UHS-I modes. This
	  will allow these modes to be specified only by device
	  tree properties through mmc_of_parse().
 SPDX-License-Identifier: GPL-2.0-or-later
 Realtek PCI-Express SDMMC Card Interface driver
  Copyright(c) 2009-2013 Realtek Semiconductor Corp. All rights reserved.
  Author:
    Wei WANG <wei_wang@realsil.com.cn>
 DEBUG 
  sd_pre_dma_transfer - do dma_map_sg() or using cookie
  @pre: if called in pre_req()
  return:
 	0 - do dma_map_sg()
 	1 - using cookie
 Read data from ping-pong buffer 
 Read data from SD_CMDx registers 
 Eliminate returned value of CHECK_REG_CMD 
 Check (Start,Transmission) bit of Response 
 Check CRC7 
		
		  The controller offloads the last byte {CRC-7, end bit 1'b1}
		  of response type R2. Assign dummy CRC, 0, and end bit to the
		  byte(ptr[16], goes into the LSB of resp[3] later).
 Wait till SD DATA IDLE 
		
		  If test mode is set switch to SD Express mandatorily,
		  this is only for factory testing.
		
		  HW read wp status when resuming from S3S4,
		  and then picks SD legacy interface if it's set
		  in read-only mode.
 Check SD mechanical write-protect switch 
 Check SD card detect 
	 Reference to Signal Voltage Switch Sequence in SD spec.
	  Wait for a period of time so that the card can drive SD_CMD and
	  SD_DAT[3:0] to low after sending back CMD11 response.
	 SD_CMD, SD_DAT[3:0] should be driven to low by card;
	  If either one of SD_CMD,SD_DAT[3:0] is not low,
	  abort the voltage switch sequence;
 Stop toggle SD clock 
 Wait 1.8V output of voltage regulator in card stable 
 Toggle SD clock again 
	 Wait for a period of time so that the card can drive
	  SD_DAT[3:0] to high at 1.8V
 SD_CMD, SD_DAT[3:0] should be pulled high by host 
 Stop toggle SD clock in idle 
 Set initial TX phase 
 Tuning RX phase 
 Set relink_time for changing to PCIe card 
 For PCIeNVMe mode can't enter delink issue 
 sentinel 
 SPDX-License-Identifier: GPL-2.0
  Renesas SDHI
  Copyright (C) 2015-19 Renesas Electronics Corporation
  Copyright (C) 2016-19 Sang Engineering, Wolfram Sang
  Copyright (C) 2016-17 Horms Solutions, Simon Horman
  Copyright (C) 2009 Magnus Damm
  Based on "Compaq ASIC3 support":
  Copyright 2001 Compaq Computer Corporation.
  Copyright 2004-2005 Phil Blundell
  Copyright 2007-2008 OpenedHand Ltd.
  Authors: Phil Blundell <pb@handhelds.org>,
 	    Samuel Ortiz <sameo@openedhand.com>
 very old datasheets said 0x490c for SDR104, too. They are wrong! 
	
	  see also
	 	renesas_sdhi_of_data :: dma_buswidth
 nothing to do 
	
	  The clock driver may not know what maximum frequency
	  actually works, so it should be set with the max-frequency
	  property which will already have been read to f_max.  If it
	  was missing, assume the current frequency is the maximum.
	
	  Minimum frequency is the minimum input clock frequency
	  divided by our maximum divider.
 enable 16bit data access on SDBUF as default 
	
	  We simply return the current rate if a) we are not on a R-Car Gen2+
	  SoC (may work for others, but untested) or b) if the SCC needs its
	  clock during tuning, so we don't change the external clock setup.
	
	  We want the bus clock to be as close as possible to, but no
	  greater than, new_clock.  As we can divide by 1 << i for
	  any i in [0, 9] we want the input clock to be as close as
	  possible, but no greater than, new_clock << i.
 Too fast; look for a slightly slower option 
 11 clock is option 
 HW engineers overrode docs: no sleep needed on R-Car2+ 
	
	  If anything is missing, assume signal voltage is fixed at
	  3.3V and succeedfail accordingly.
 SCC registers 
 Definitions for values the SH_MOBILE_SDHI_SCC_TMPPORT4 register 
 Definitions for values the SH_MOBILE_SDHI_SCC_TMPPORT5 register 
 Definitions for values the SH_MOBILE_SDHI_SCC register 
 Initialize SCC 
 set sampling clock selection range 
 Read TAPNUM 
 Set HS400 mode 
 Gen3 can't do automatic tap correction with HS400, so disable it 
 Set the sampling clock selection range of HS400 mode 
 Avoid bad TAP 
 read mode 
 access start and stop 
 write mode 
 access start and stop 
 disable write protect 
 read calibration code and adjust 
 set offset value to TMPPORT3, hardcoded to OFFSET0 (= 0x3) for now 
 adjustment done, clear flag 
 disable write protect 
 disable manual calibration 
 clear offset value of TMPPORT3 
 Reset HS400 mode 
 only populated for TMIO_MMC_MIN_RCAR2 
 Unknown why but without polling reset status, it will hang 
 At least SDHI_VER_GEN2_SDR50 needs manual release of reset 
	
	  When tuning CMD19 is issued twice for each tap, merge the
	  result requiring the tap to be good in both runs before
	  considering it for tuning selection.
	
	  If all TAP are OK, the sampling clock position is selected by
	  identifying the change point of data.
	
	  Find the longest consecutive run of successful probes. If that
	  is at least SH_MOBILE_SDHI_MIN_TAP_ROW probes long then use the
	  center index as the tap, otherwise bail out.
 Set SCC 
 Enable auto re-tuning 
 Tuning is not supported 
 Issue CMD19 twice for each tap 
 Set sampling clock position 
 Change TAP position according to correction status 
		
		  With HS400, the DAT signal is based on DS, not CLK.
		  Therefore, use only CMD status.
 no error in CMD signal 
 need retune 
		
		  When new_tap is a bad tap, we cannot change. Then, we compare
		  with the HS200 tuning result. When smpcmp[error_tap] is OK,
		  we can at least retune.
 need retune 
 Check SCC error 
	
	  Skip checking SCC errors when running on 4 taps in HS400 mode as
	  any retuning would still result in the same 4 taps being used.
 CBSY is set when busy, SCLKDIVEN is cleared when busy 
	
	  In Renesas controllers, when performing a
	  multiple block read of one or two blocks,
	  depending on the timing with which the
	  response register is read, the response
	  value may not be read properly.
	  Use single block read for this HW bug
 Iff regs are 8 byte apart, sdbuf is 64 bit. Otherwise always 32. 
	
	  Some controllers provide a 2nd clock just to run the internal card
	  detection logic. Unfortunately, the existing driver architecture does
	  not support a separation of clocks for runtime PM usage. When
	  native hotplug is used, the tmio driver assumes that the core
	  must continue to run for card detect to stay active, so we cannot
	  disable it.
	  Additionally, it is prohibited to supply a clock to the core but not
	  to the card detect circuit. That leaves us with if separate clocks
	  are presented, we must treat them both as virtually 1 clock.
 For some SoC, we disable internal WP. GPIO may override this 
 SDR speeds are only available on Gen2+ 
 card_busy caused issues on r8a73a4 (pre-Gen2) CD-less SDHI 
 Orginally registers were 16 bit apart, could be 32 or 64 nowadays 
 old way to determine the shift 
 2-byte alignment 
	
	  All SDHI blocks support 2-byte and larger block sizes in 4-bit
	  bus width mode.
	
	  All SDHI blocks support SDIO IRQ signalling.
 All SDHI have CMD12 control bit 
 All SDHI have SDIO status bits which must be 1 
 All SDHI support HW busy detection 
 GEN2_SDR104 is first known SDHI to use 32bit block count 
 One Gen2 SDHI incarnation does NOT have a CBSY bit 
 these have an EXTOP bit 
 Enable tuning iff we have an SCC and a supported mode 
 There must be at least one IRQ source 
  Copyright (C) 2014 Broadcom Corporation
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License as
  published by the Free Software Foundation version 2.
  This program is distributed "as is" WITHOUT ANY WARRANTY of any
  kind, whether express or implied; without even the implied warranty
  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  iProc SDHCI platform driver
 Get the saved transfer mode 
 Get the saved block info 
 Round up to micro-second four SD clock delay 
  The Arasan has a bugette whereby it may lose the content of successive
  writes to the same register that are within two SD-card clock cycles of
  each other (a clock domain crossing problem). The data
  register does not have this problem, which is just as well - otherwise we'd
  have to nobble the DMA engine too.
  This wouldn't be a problem with the code except that we can only write the
  controller with 32-bit writes.  So two different 16-bit registers are
  written back to back creates the problem.
  In reality, this only happens when SDHCI_BLOCK_SIZE and SDHCI_BLOCK_COUNT
  are written followed by SDHCI_TRANSFER_MODE and SDHCI_COMMAND.
  The BLOCK_SIZE and BLOCK_COUNT are meaningless until a command issued so
  the work around can be further optimized. We can keep shadow values of
  BLOCK_SIZE, BLOCK_COUNT, and TRANSFER_MODE until a COMMAND is issued.
  Then, write the BLOCK_SIZE+BLOCK_COUNT in a single 32-bit write followed
  by the TRANSFER+COMMAND in another 32-bit write.
 Write the block now as we are issuing a command 
 Block size and count are stored in shadow reg 
 Read reg, all other registers are not shadowed 
 Save the transfer mode until the command is issued 
 Save the block info until the command is issued 
 Command or other regular 32-bit write 
  There is a known bug on BCM2711's SDHCI core integration where the
  controller will hang when the difference between the core clock and the bus
  clock is too great. Specifically this can be reproduced under the following
  conditions:
   - No SD card plugged in, polling thread is running, probing cards at
     100 kHz.
   - BCM2711's core clock configured at 500MHz or more
  So we set 200kHz as the minimum clock frequency available for that SoC.
  This is a duplicate of bcm2835_(pltfrm_)data without caps quirks
  which are provided by the ACPI table.
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  Remote VUB300 SDIOSDmem Host Controller Driver
  Copyright (C) 2010 Elan Digital Systems Limited
  based on USB Skeleton driver - 2.2
  Copyright (C) 2001-2004 Greg Kroah-Hartman (greg@kroah.com)
  VUB300: is a USB 2.0 client device with a single SDIOSDmemMMC slot
          Any SDIOSDmemMMC device plugged into the VUB300 will appear,
          by virtue of this driver, to have been plugged into a local
          SDIO host controller, similar to, say, a PCI Ricoh controller
          This is because this kernel device driver is both a USB 2.0
          client device driver AND an MMC host controller driver. Thus
          if there is an existing driver for the inserted SDIOSDmemMMC
          device then that driver will be used by the kernel to manage
          the device in exactly the same fashion as if it had been
          directly plugged into, say, a local pci bus Ricoh controller
  RANT: this driver was written using a display 128x48 - converting it
        to a line width of 80 makes it very difficult to support. In
        particular functions have been broken down into sub functions
        and the original meaningful names have been shortened into
        cryptic ones.
        The problem is that executing a fragment of code subject to
        two conditions means an indentation of 24, thus leaving only
        56 characters for a C statement. And that is quite ridiculous!
  Data types: data passed tofrom the VUB300 is fixed to a number of
              bits and driver data fields reflect that limit by using
              u8, u16, u32
 Bit7 - RdWr 
 ReadSize + ReadSize 
 to pad out to 64 bytes 
 Bit7 - RdWr 
 don't ask why !! 
 to pad out to 64 bytes 
 Terminating entry 
 max of 7 sdio fn's 
 EndPoint for commands 
 EndPoint for responses 
 EndPoint for out data 
 EndPoint for inp data 
 ApplicationSpecific 
 by the MMC CORE 
 in the firmware 
 Function Block Size 
 kref callback - softirq 
	
	  and hence also frees vub300
	  which is contained at the end of struct mmc
		
		  then the cmndworkqueue was not previously
		  running and the above get ref is obvious
		  required and will be put when the thread
		  terminates by a specific call
		
		  the cmndworkqueue was already running from
		  a previous invocation and thus to keep the
		  kref counts correct we must undo the get
		
		  then the pollworkqueue was not previously
		  running and the above get ref is obvious
		  required and will be put when the thread
		  terminates by a specific call
		
		  the pollworkqueue was already running from
		  a previous invocation and thus to keep the
		  kref counts correct we must undo the get
		
		  then the deadworkqueue was not previously
		  running and the above get ref is obvious
		  required and will be put when the thread
		  terminates by a specific call
		
		  the deadworkqueue was already running from
		  a previous invocation and thus to keep the
		  kref counts correct we must undo the get
 urb completion handler - hardirq 
 urb completion handler - hardirq 
 cmd_mutex is held by vub300_pollwork_thread 
 no change 
	
	  cmd_mutex is held by vub300_pollwork_thread,
	  vub300_deadwork_thread or vub300_cmndwork_thread
 cmd_mutex is held by vub300_pollwork_thread 
 cmd_mutex is held by vub300_pollwork_thread 
 no need to do anything 
 commretval > 0 
 this thread runs only when the driver
  is trying to poll the device for an IRQ
 NOT irq 
 no need to do anything 
 vub300->card_present 
 NOT vub300->irqs_queued 
 NOT irq 
		
		  a command got in as the inactivity
		  timer expired - so we just let the
		  processing of the command show if
		  the device is dead
		
		  the MMC core must not have responded
		  to the previous indication - lets
		  hope that it eventually does so we
		  will just ignore this for now
 softirq 
 urb completion handler - hardirq 
 we have to let the initiator handle the error 
		
		  we have seen this happen once or twice and
		  we suspect a buggy USB host controller
 this means that the command (typically CMD52) succeeded 
		
		  this is an error response from the VUB300 chip
		  and we let the initiator handle it
 got_response_in 
 urb completion handler - hardirq 
			
			  the urb completion handler will call
			  our completion handler
			
			  and thus we only call it directly
			  when it will not be called
  the STUFF bits are masked out for the comparisons
 cmd_mutex is held by vub300_cmndwork_thread 
	
	  it is a shame that we can not use "sizeof(struct sd_command_header)"
	  this is because the packet _must_ be padded to 64 bytes
 "0" means port 1 
 standard read command 
 BLOCK MODE 
 BYTE MODE 
  timer callback runs in atomic mode
        so it cannot call usb_kill_urb()
  this is a separate function to solve the 80 column width restriction
 skip comment 
  if the binary containing the EMPTY PseudoCode can not be found
  vub300->vub_name is set anyway in order to prevent an automatic retry
 urb completion handler - hardirq 
 cmd_mutex is held by vub300_cmndwork_thread 
 cmd_mutex is held by vub300_cmndwork_thread 
 cmd_mutex is held by vub300_cmndwork_thread 
 don't you just love these work-rounds 
 no data padding required 
 cmd_mutex is held by vub300_cmndwork_thread 
 TIMED OUT 
 we don't know which of "out" and "res" if any failed 
 we don't know which of "out" and "res" if any failed 
		
		  the error occurred sending the command
		  or receiving the response
		
		  the command completed successfully
		  and there was no piggybacked data
 this thread runs only when there is an upper level command req outstanding 
			
			  the name of the EMPTY Pseudo firmware file
			  is used as a flag to indicate that the file
			  has been already downloaded to the VUB300 chip
 cmd_mutex is held by vub300_mmc_request 
 because it does not match the first one 
 cmd_mutex is held by vub300_mmc_request 
				
				  a write to a dynamic register
				  nullifies our offloaded value
 NOT irq 
		
		  for performance we have to return immediately
		  if the requested data has been offloaded
			
			  the kernel lock diagnostics complain
			  if the cmd_mutex  is "passed on"
			  to the cmndwork thread,
			  so we must release it now
			  and re-acquire it in the cmndwork thread
 ARRAY_SIZE(buf) does not work !!! 
 NOT irq 
 must wait for the VUB300 u-proc to boot up 
 this should mean no change of state 
 NOT irq 
 this should not happen, so we will just ignore it 
 NOT irq 
 this also allocates memory for our VUB300 mmc host device 
 MMC core transfer sizes tunable parameters 
	
	  MMC_CAP_NEEDS_POLL causes core.c:mmc_rescan() to poll
	  for devices which results in spurious CMD7's being
	  issued which stops some SDIO cards from working
	
	       set up the endpoint information
	 
	  use the first pair of bulk-in and bulk-out
	      endpoints for CommandResponse+Interrupt
	 
	  use the second pair of bulk-in and bulk-out
	      endpoints for Data InOut
 we have the expected EndPoints 
	
	  and hence also frees vub300
	  which is contained at the end of struct mmc
 NOT irq 
 prevent more IO from starting 
 NOT irq 
 NOT irq 
 we are sure no URBs are active - no locking needed 
 NOT irq 
 SPDX-License-Identifier: GPL-2.0-only
  sdhci-pltfm.c Support for SDHCI platform devices
  Copyright (c) 2009 Intel Corporation
  Copyright (c) 2007, 2011 Freescale Semiconductor, Inc.
  Copyright (c) 2009 MontaVista Software, Inc.
  Authors: Xiaobo Xie <X.Xie@freescale.com>
 	    Anton Vorontsov <avorontsov@ru.mvista.com>
 Supports:
  SDHCI platform devices
  Inspired by sdhci-pci.c, by Pierre Ossman
 Old device trees don't have the wp-inverted property. 
 CONFIG_PPC 
 CONFIG_OF 
 legacy 
 SPDX-License-Identifier: GPL-2.0
  sdhci-pci-arasan.c - Driver for Arasan PCI Controller with
  integrated phy.
  Copyright (C) 2017 Arasan Chip Systems Inc.
  Author: Atul Garg <agarg@arasan.com>
 Extra registers for Arasan SDSDIOMMC Host Controller with PHY 
 PHY Specific Registers 
 Mode Controls 
  Controller has no specific bits for HS200HS.
  Used BIT(4), BIT(5) for software programming.
 Arasan private data 
 Masking valid data bits 
 Initialize the Arasan PHY 
 Program IOPADs and wait for calibration to be done 
 Program CMDData lines 
 Set Arasan PHY for different modes 
 Change phy settings for the new clock 
  Driver for MMC and SSD cards for Cavium OCTEON SOCs.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file "COPYING" in the main directory of this archive
  for more details.
  Copyright (C) 2012-2017 Cavium Inc.
  The l2c functions below are used for the EMMC-17978 workaround.
  Due to a bug in the design of the MMC bus hardware, the 2nd to last
  cache block of a DMA read must be locked into the L2 Cache.
  Otherwise, data corruption may occur.
 XKPHYS 
  Lock a single line into L2. The line is zeroed before locking
  to make sure no dram accesses are made.
 Unlock the line 
 Unlock a single line in the L2 cache. 
 Unlock the line 
 Locks a memory region in the L2 cache. 
 Round startend to cache line boundaries 
 Unlock a memory region in the L2 cache. 
 Round startend to cache line boundaries 
 For CN70XX, switch the MMC controller onto the bus. 
		
		  First seven are the EMM_INT bits 0..6, then two for
		  the EMM_DMA_INT bits
 work around legacy u-boot device trees 
 First one is EMM second DMA 
	
	  To keep the register addresses shared we intentionaly use
	  a negative offset here, first register used on Octeon therefore
	  starts at 0x20 (MIO_EMM_DMA_CFG).
	
	  Clear out any pending interrupts that may be left over from
	  bootloader.
 Only CMD_DONE, DMA_DONE, CMD_ERR, DMA_ERR 
 SPDX-License-Identifier: GPL-2.0-only
   cb710mmc.c
   Copyright by Michał Mirosław, 2008-2009
	1, 2, 4, 8, 16, 32, 128, 512 
	 on CB710 in HP nx9500:
	    src_freq_idx == 0
	    indexes 1-7 work as written in the table
	    indexes 0,8-15 give no clock output
	 clear global IE
	 look like interrupt is fired whenever
	  WORD[0x0C] & WORD[0x10] != 0;
	  -> bit 15 port 0x0C seems to be global interrupt enable
 this is the only thing irq_lock protects 
 it is just a guess, so log it 
 'what' is a bit in MMC_STATUS1 
 FIXME: real timeout 
 FIXME: real timeout 
 without this, received data is prepended with 8-bytes of zeroes 
	 TODO: I don't know howif the hardware handles non-16B-boundary blocks
	 TODO: I don't know howif the hardware handles multiple
	 Windows driver returned 0 for commands for which no response
	  is expected. It happened that there were only two such commands
	  used: MMC_GO_IDLE_STATE and MMC_GO_INACTIVE_STATE so it might
	  as well be a bug in that driver.
	 
	  Original driver set bit 14 for MMCSD application
	  commands. There's no difference 'on the wire' and
	  it apparently works without it anyway.
		 Windows driver set 01 at bits 4,3 except for
		  MMC_SET_BLOCKLEN where it set 10. Maybe the
		  hardware can do something special about this
		  command? The original driver looks buggyincomplete
		  anyway so we ignore this for now.
		 
		  I assume that 00 here means no response is expected.
 Looks like final byte with CRC is always stripped (same as SDHCI) 
 a lot of magic for now 
	 This port behaves weird: quick byte reads of 0x08,0x09 return
	  0xFF,0x00 after writing 0xFFFF to 0x08; it works correctly when
	  readwritten from userspace...  What am I missing here?
 ignore 
 ack the event 
 CONFIG_PM 
 harmless (maybe) magic 
	
	  In cb710_wait_for_event() we use a fixed timeout of ~2s, hence let's
	  inform the core about it. A future improvement should instead make
	  use of the cmd->busy_timeout.
 IRQs should be disabled now, but let's stay on the safe side 
 clear config ports - just in case 
 SPDX-License-Identifier: GPL-2.0-only
   WM8505WM8650 SDMMC Host Controller
   Copyright (C) 2010 Tony Prisk
   Copyright (C) 2008 WonderMedia Technologies, Inc.
 MMCSD controller registers 
 VT8500 only 
 SDMMC_CTLR bit fields 
 SDMMC_BUSMODE bit fields 
 SDMMC_BLKLEN bit fields 
 SDMMC_INTMASK0 bit fields 
 SDMMC_INTMASK1 bit fields 
 SDMMC_STS0 bit fields 
 SDMMC_STS1 bit fields 
 SDMMC_STS2 bit fields 
 SDMMC_EXTCTRL bit fields 
 MMCSD DMA Controller Registers 
 SDDMA_GCR bit fields 
 SDDMA_IER bit fields 
 SDDMA_ISR bit fields 
 SDDMA_RBR bit fields 
 SDDMA_CCR bit fields 
 SDDMA_CCR event status 
 write command, arg, resptype registers 
 reset response FIFO 
 ensure clock enabled - VT3465 
 clear status bits 
 set command type 
 unmap the DMA pages used for write data 
 Check if the DMA ISR returned a data error 
 single-block readwrite requests end here 
			
			  we change the priv->cmd variable so the response is
			  stored in the stop struct rather than the original
			  calling command struct
			
			  if the command (regular) interrupt has already
			  completed, finish off the request otherwise we wait
			  for the command interrupt and finish from there.
 Check for card insertion 
 handle non-data & stop_transmission requests 
 handle data requests 
			
			  If the dma interrupt has already completed, finish
			  off the request; otherwise we wait for the DMA
			  interrupt and finish from there.
 reset controller 
 reset response FIFO 
 enable GPI pin to detect card 
 clear interrupt status 
 setup interrupts 
 set the DMA timeout 
 auto clock freezing enable 
 set a default clock speed of 400Khz 
 Enable DMA Interrupts 
 Write DMA Descriptor Pointer Register 
	
	  Use the cmd variable to pass a pointer to the resp[] structure
	  This is required on multi-block requests to pass the pointer to the
	  stop command
 rsptype=7 only valid for SPI commands - should be =2 for SD 
 rsptype=21 is R1B, convert for controller 
 completion is now handled in the regular_isr() 
 set controller data length 
 set controller block count 
 Controller capabilities 
 Sentinel  },
 alloc some DMA buffers for descriptorstransfers 
 configure the controller to a known 'ready' state 
 reset SD controller 
 release the dma buffers 
 !CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0-or-later
  OpenFirmware bindings for the MMC-over-SPI driver
  Copyright (c) MontaVista Software, Inc. 2008.
  Author: Anton Vorontsov <avorontsov@ru.mvista.com>
 SPDX-License-Identifier: GPL-2.0-or-later
  Synopsys DesignWare Multimedia Card PCI Interface driver
  Copyright (C) 2012 Vayavya Labs Pvt. Ltd.
 Defining the Capabilities 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2014, Fuzhou Rockchip Electronics Co., Ltd
	
	  cclkin: source clock of mmc controller
	  bus_hz: card interface clock generated by CLKGEN
	  bus_hz = cclkin  RK3288_CLKGEN_DIV
	  ios->clock = (div == 0) ? bus_hz : (bus_hz  (2  div))
	 
	  Note: div can only be 0 or 1, but div must be set to 1 for eMMC
	  DDR52 8-bit mode.
 force dw_mci_setup_bus() 
 Make sure we use phases which we can enumerate with 
	
	  Set the drive phase offset based on speed mode to achieve hold times.
	 
	  NOTE: this is _not_ a value that is dynamically tuned and is also
	  _not_ a value that will vary from board to board.  It is a value
	  that could vary between different SoC models if they had massively
	  different output clock delays inside their dw_mmc IP block (delay_o),
	  but since it's OK to overshoot a little we don't need to do complex
	  calculations and can pick values that will just work for everyone.
	 
	  When picking values we'll stick with picking 090180270 since
	  those can be made very accurately on all known Rockchip SoCs.
	 
	  Note that these values match values from the DesignWare Databook
	  tables for the most part except for SDR12 and "ID mode".  For those
	  two modes the databook calculations assume a clock in of 50MHz.  As
	  seen above, we always use a clock in rate that is exactly the
	  card's input clock (times RK3288_CLKGEN_DIV, but that gets divided
	  back out before the controller sees it).
	 
	  From measurement of a single device, it appears that delay_o is
	  about .5 ns.  Since we try to leave a bit of margin, it's expected
	  that numbers here will be fine even with much larger delay_o
	  (the 1.4 ns assumed by the DesignWare Databook would result in the
	  same results, for instance).
		
		  In almost all cases a 90 degree phase offset will provide
		  sufficient hold times across all valid input clock rates
		  assuming delay_o is not absurd for a given SoC.  We'll use
		  that as a default.
			
			  Since clock in rate with MMC_DDR52 is doubled when
			  bus width is 8 we need to double the phase offset
			  to get the same timings.
			
			  In the case of 150 MHz clock (typical max for
			  Rockchip SoCs), 90 degree offset will add a delay
			  of 1.67 ns.  That will meet min hold time of .8 ns
			  as long as clock output delay is < .87 ns.  On
			  SoCs measured this seems to be OK, but it doesn't
			  hurt to give margin here, so we use 180.
 inclusive 
 Try each phase and extract good ranges 
 No extra skipping rules if we're at the end 
			
			  No need to check too close to an invalid
			  one since testing bad phases is slow.  Skip
			  20 degrees.
 Always test the last one 
 wrap around case, merge the end points 
 Find the longest range 
 It is slot 8 on Rockchip SoCs 
 Common capabilities of RK3288 SoC 
 SPDX-License-Identifier: GPL-2.0-only
  Amlogic SDeMMC driver for the GXS905 family SoCs
  Copyright (c) 2016 BayLibre, SAS.
  Author: Kevin Hilman <khilman@baylibre.com>
 internal buffer max: 512 bytes 
 in clock cycles 
 in ms 
 in ms 
 in clock cycles 
 max. 2^15 ms 
	
	  When Controller DMA cannot directly access DDR memory, disable
	  support for Chain Mode to directly use the internal SRAM using
	  the bounce buffer mode.
 SD_IO_RW_EXTENDED (CMD53) can also use block mode under the hood 
		
		  In block mode DMA descriptor format, "length" field indicates
		  number of blocks and there is no way to pass DMA size that
		  is not multiple of SDIO block size, making it impossible to
		  tie more than one memory buffer with single SDIO block.
		  Block mode sg buffer size should be aligned with SDIO block
		  size, otherwise chain mode could not be used.
 check for 8 byte alignment 
  Gating the clock on this controller is tricky.  It seems the mmc clock
  is also used by the controller.  It may crash during some operation if the
  clock is stopped.  The safest thing to do, whenever possible, is to keep
  clock running at stop it at the pad using the pinmux.
		
		  If the pinmux is not provided - default to the classic and
		  unsafe method
 Make sure the clock is not stopped in the controller 
 Same request - bail-out 
 stop clock 
 return with clock being stopped 
 Stop the clock during rate change to avoid glitches 
 DDR modes require higher module clock 
 We should report the real output frequency of the controller 
 (re)start clock 
  The SDeMMC IP block has an internal mux and divider used for
  generating the MMC clock.  Use the clock framework to create and
  manage these clocks.
 init SD_EMMC_CLOCK to sane defaults wmin clock rate 
 get the mux parents 
 create the mux 
 create the divider 
 init SD_EMMC_CLOCK to sane defaults wmin clock rate 
 Resampling is done using the source clock 
	
	  GPIO regulator, only controls switching between 1v8 and
	  3v3, doesn't support MMC_POWER_OFF, MMC_POWER_ON.
 Bus width 
 check if block-size matches, if not update 
 ensure descriptor is written before kicked 
 local sg copy for dram_access_quirk 
 Setup descriptors 
 owned by CPU 
 stop in case of error 
 data? 
 Last descriptor 
 ensure descriptor is written before kicked 
 Reject request if any element offset or size is not 32bit aligned 
	
	  The memory at the end of the controller used as bounce buffer for
	  the dram_access_quirk only accepts 32bit readwrite access,
	  check the aligment and length of the data before starting the request.
 Stop execution 
 ack all raised interrupts 
 Stop desc in case of errors 
	
	  It may sometimes take a while for it to actually halt. Here, we
	  are giving it 5ms to comply
	 
	  If we don't confirm the descriptor is stopped, it might raise new
	  IRQs after we have called mmc_request_done() which is bad.
  NOTE: we only need this until the GPIOpinctrl driver can handle
  interrupts.  For now, the MMC core will use this for polling.
 assume present 
 abort chain on RW errors 
 We are only interrested in lines 0 to 3, so mask the other ones 
 vqmmc regulator is available 
		
		  The usual amlogic setup uses a GPIO to switch from one
		  regulator to the other. While the voltage ramp up is
		  pretty fast, care must be taken when switching from 3.3v
		  to 1.8v. Please make sure the regulator framework is aware
		  of your own regulator constraints
 no vqmmc regulator, assume fixed regulator at 33.3V 
 The G12A SDIO Controller needs an SRAM bounce buffer 
 Get regulators and the supported OCR mask 
 set config to sane default 
 Stop execution 
 clear, ack and enable interrupts 
 Limit segments to 1 due to low available sram memory 
 Limit to the available sram memory 
	
	  At the moment, we don't know how to reliably enable HS400.
	  From the different datasheets, it is not even clear if this mode
	  is officially supported by any of the SoCs
		
		  The MMC Controller embeds 1,5KiB of internal SRAM
		  that can be used to be used as bounce buffer.
		  In the case of the G12A SDIO controller, use these
		  instead of the DDR memory
 data bounce buffer 
 disable interrupts 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2010 Marvell International Ltd.
 		Zhangfei Gao <zhangfei.gao@marvell.com>
 		Kevin Wang <dwang4@marvell.com>
 		Mingwei Wang <mwwang@marvell.com>
 		Philip Rakity <prakity@marvell.com>
 		Mark Brown <markb@marvell.com>
  These registers are relative to the second register region, for the
  MBus bridge.
  Fields below belong to SDIO3 Configuration Register (third register
  region for the Armada 38x flavor)
 Write size, attributes and target id to control register 
 Write base address to base register 
		
		  According to erratum 'FE-2946959' both SDR50 and DDR50
		  modes require specific clock adjustments in SDIO3
		  Configuration register, if the adjustment is not done,
		  remove them from the capabilities.
	
	  According to erratum 'ERR-7878951' Armada 38x SDHCI
	  controller has different capabilities than the ones shown
	  in its registers
		
		  tune timing of read datacommand when crc error happen
		  no performance impact
 set we want notice of when 74 clocks are sent 
 start sending the 74 clocks 
 slowest speed is about 100KHz or 10usec per clock 
 clear the interrupt bit if posted 
	
	  Set V18_EN -- UHS modes do not work without this.
	  does not change signaling voltage
 Select Bus Speed Mode for host 
	
	  Update SDIO3 Configuration register according to erratum
	  FE-2946959
 enable 18V DDR capable 
 on-chip device 
 If slot design supports 8 bit data, indicate this to MMC. 
 SPDX-License-Identifier: GPL-2.0-only
  PHY support for Xenon SDHC
  Copyright (C) 2016 Marvell, All Rights Reserved.
  Author:	Hu Ziji <huziji@marvell.com>
  Date:	2016-8-24
 Register base for eMMC PHY 5.0 Version 
 Register base for eMMC PHY 5.1 Version 
 Preferred ZNR and ZPR value vary between different boards.
  The specific ZNR and ZPR value should be defined here
  according to board actual timing.
  List offset of PHY registers and some special register values
  in eMMC PHY 5.0 or eMMC PHY 5.1
 Offset of Timing Adjust register 
 Offset of Func Control register 
 Offset of Pad Control register 
 Offset of Pad Control register 2 
 Offset of DLL Control register 
 Offset of Logic Timing Adjust register 
 DLL Update Enable bit 
 value in Logic Timing Adjustment register 
 Register address of SoC PHY PAD ctrl 
 SoC PHY PAD ctrl type 
 SoC specific operation to set SoC PHY PAD 
  eMMC PHY configuration and operations
 Nr of consecutive Sampling Points of a Valid Sampling Window 
 Divider for calculating Tuning Step 
  eMMC 5.05.1 PHY initre-init.
  eMMC PHY init should be executed after:
  1. SDCLK frequency changes.
  2. SDCLK is stopped and re-enabled.
  3. config in emmc_phy_regs->timing_adj and emmc_phy_regs->func_ctrl
  are changed
 Add duration of FC_SYNC_RST 
 Add interval between FC_SYNC_EN and FC_SYNC_RST 
 Add duration of asserting FC_SYNC_EN 
 Add duration of waiting for PHY 
 4 additional bus clock and 4 AXI bus clock are required 
 Use the possibly slowest bus frequency value 
 get the wait time 
 wait for host eMMC PHY init completes 
  Set SoC PHY voltage PAD control register,
  according to the operation voltage on PAD.
  The detailed operation depends on SoC implementation.
  Enable eMMC PHY HW DLL
  DLL should be enabled and stable before HS200SDR104 tuning,
  and before HS400 data strobe setting.
 Enable DLL 
	
	  Set Phase as 90 degree, which is most common value.
	  Might set another value if necessary.
	  The granularity is 1 degree.
 Wait max 32 ms 
  Config to eMMC PHY to prepare for tuning.
  Enable HW DLL and set the TUNING_STEP
 Achieve TUNING_STEP with HW DLL help 
 Set TUNING_STEP for later tuning 
 Disable both SDHC Data Strobe and Enhanced Strobe 
 Clear Strobe line Pull down or Pull up 
 Set HS400 Data Strobe and Enhanced Strobe 
 Enable SDHC Data Strobe 
	
	  Enable SDHC Enhanced Strobe if supported
	  Xenon Enhanced Strobe should be enabled only when
	  1. card is in HS400 mode and
	  2. SDCLK is higher than 52MHz
	  3. DLL is enabled
 Set Data Strobe Pull down 
  If eMMC PHY Slow Mode is required in lower speed mode (SDCLK < 55MHz)
  in SDR mode, enable Slow Mode to bypass eMMC PHY.
  SDIO slower SDR mode also requires Slow Mode.
  If Slow Mode is enabled, return true.
  Otherwise, return false.
	 When in slower SDR mode, enable Slow Mode for SDIO
	  or when Slow Mode flag is set
		
		  If Slow Mode is required, enable Slow Mode by default
		  in early init phase to avoid any potential issue.
  Set-up eMMC 5.05.1 PHY.
  Specific configuration depends on the current speed mode in use.
 Setup pad, set bit[28] and bits[26:24] 
 All FC_XX_RECEIVCE should be set as CMOS Type 
 Set CMD and DQ Pull Up 
	
	  If SDIO card, set SDIO Mode
	  Otherwise, clear SDIO Mode
	
	  Set preferred ZNR and ZPR value
	  The ZNR and ZPR value vary between different boards.
	  Define them both in sdhci-xenon-emmc-phy.h.
	
	  When setting EMMC_PHY_FUNC_CONTROL register,
	  SD clock should be disabled
 Enable bus clock 
 Hardware team recommend a value for HS400 
 Set SoC PHY Voltage PAD 
  Setting PHY when card is working in High Speed Mode.
  HS400 set Data Strobe and Enhanced Strobe if it is supported.
  HS200SDR104 set tuning config to prepare for tuning.
		
		  DDR Mode requires driver to scan Sampling Fixed Delay Line,
		  to find out a perfect operation sampling point.
		  It is hard to implement such a scan in host driver
		  since initiating commands by host driver is not safe.
		  Thus so far just keep PHY Sampling Fixed Delay in
		  default value of DDR mode.
		 
		  If any timing issue occurs in DDR mode on Marvell products,
		  please contact maintainer for internal support in Marvell.
  Adjust PHY setting.
  PHY setting should be adjusted when SDCLK frequency, Bus Width
  or Speed Mode is changed.
  Additional config are required when card is working in High Speed mode,
  after leaving Legacy Mode.
	
	  The timing, frequency or bus width is changed,
	  better to set eMMC PHY based on current setting
	  and adjust Xenon SDHC delay.
 Update the record 
 Legacy mode is a special case 
 SPDX-License-Identifier: GPL-2.0-or-later
  Portions copyright (C) 2003 Russell King, PXA MMCI Driver
  Portions copyright (C) 2004-2005 Pierre Ossman, W83L51xD SDMMC driver
  Copyright 2008 Embedded Alley Solutions, Inc.
  Copyright 2009-2011 Freescale Semiconductor, Inc.
 card detect polling timeout 
 Finished CMD23, now send actual command. 
		
		  If there was an error on any block, we mark all
		  data blocks as being in error.
 data 
 pio 
	
	  Calculate ticks in ms since ns are large numbers
	  and might overflow
 get logarithm to base 2 of block size for setting register 
	
	  take special care of the case that data size from data->sg
	  is not equal to blocks x blksz
 xfer count, block size and count need to be set differently 
 set the timeout count 
 pio 
 append data sg 
 sentinel  }
 set mmc core parameters 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2013 - 2015 Fujitsu Semiconductor, Ltd
               Vincent Yang <vincent.yang@tw.fujitsu.com>
  Copyright (C) 2015 Linaro Ltd  Andy Green <andy.green@linaro.org>
  Copyright (C) 2019 Socionext Inc.
               Takao Orito <orito.takao@socionext.com>
 milbeaut bridge controller register 
 IO_SDIO_CR_SET should be set while reset 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversmmchostsdhci_f_sdh30.c
  Copyright (C) 2013 - 2015 Fujitsu Semiconductor, Ltd
               Vincent Yang <vincent.yang@tw.fujitsu.com>
  Copyright (C) 2015 Linaro Ltd  Andy Green <andy.green@linaro.org>
 init vendor specific regs 
 sentinel  }
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
 Realtek USB SDMMC Card Interface driver
  Copyright(c) 2009-2013 Realtek Semiconductor Corp. All rights reserved.
  Author:
    Roger Tseng <rogerable@realtek.com>
 DEBUG 
 2-byte aligned part 
 unaligned byte 
	 Response type:
	  R0
	  R1, R5, R6, R7
	  R1b
	  R2
	  R3, R4
 Read data from ping-pong buffer 
 Read data from SD_CMDx registers 
 Skip result of CHECK_REG_CMD 
 Check (Start,Transmission) bit of Response 
 Check CRC7 
		
		  The controller offloads the last byte {CRC-7, end bit 1'b1}
		  of response type R2. Assign dummy CRC, 0, and end bit to the
		  byte(ptr[16], goes into the LSB of resp[3] later).
 Wait till SD DATA IDLE 
 setting fixed default TX phase 
 tuning RX phase 
 Check SD card detect 
 Treat failed detection as non-ro 
 Check SD card detect 
 Treat failed detection as non-exist 
		
		  detect card when fail to update card existence state and
		  speed up card removal when retry
	 Let mmc core do the busy checking, simply stop the forced-toggle
	  clock(while issuing CMD11) and switch voltage.
 check if any pin between dat[0:3] is low 
 sentinel 
 SPDX-License-Identifier: GPL-2.0
  Driver for the MMC  SD  SDIO cell found in:
  TC6393XB TC6391XB TC6387XB T7L66XB ASIC3
  Copyright (C) 2017 Renesas Electronics Corporation
  Copyright (C) 2017 Horms Solutions, Simon Horman
  Copyright (C) 2007 Ian Molton
  Copyright (C) 2004 Ian Molton
 Registers specific to this variant 
 bit7 set: 1512, ... bit0 set: 14, all bits clear: 12 
 Tell MFD core it can disable us now.
 Tell the MFD core we are ready to be enabled 
 Tell the MFD core we are ready to be enabled 
 SD control register space size is 0x200, 0x400 for bus_shift=1 
 ------------------- device registration ----------------------- 
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriversmmchostmxcmmc.c - Freescale i.MX MMCI driver
   This is a driver for the SDHC controller found in Freescale MX2MX3
   SoCs. It is basically the same hardware as found on MX1 (imxmmc.c).
   Unlike the hardware found on MX1, this hardware just works and does
   not need all the quirks found in imxmmc.c, hence the separate driver.
   Copyright (C) 2008 Sascha Hauer, Pengutronix <s.hauer@pengutronix.de>
   Copyright (C) 2006 Pavel Pisa, PiKRON <ppisa@pikron.com>
   derived from pxamci.c by Russell King
 sentinel 
 reset sequence 
 Fall back to PIO 
 short CRC, OPCODE 
 short CRC, OPCODE, BUSY 
 long 136 bit + CRC 
 short 
 No CRC response 
 we will handle finish req below 
	 For the DMA case the DMA engine handles the data transfer
	  automatically. For non DMA we have to do it ourselves.
	  Don't do it in interrupt context though.
	
	  use burstlen of 64 (16 words) in 4 bit mode (--> reg value  0)
	  use burstlen of 16 (4 words) in 1 bit mode (--> reg value 16)
	
	  If board doesn't support read only detection (no mmc_gpio
	  context or gpio is invalid), then let the mmc core decide
	  what to do.
	
	  MX3 SoCs have a silicon bug which corrupts CRC calculation of
	  multi-block transfers when connected SDIO peripheral doesn't
	  drive the BUSY line as required by the specs.
	  One way to prevent this is to only allow 1-bit transfers.
 Mark transfer as erroneus and inform the upper layers 
 For devicetree parsing, the bus width is read from devicetree 
 MMC core transfer sizes tunable parameters 
 adjust max_segs after devtype detection 
 recommended in data sheet 
 Ignore errors to fall back to PIO mode 
 SPDX-License-Identifier: GPL-2.0
  bcm2835 sdhost driver.
  The 2835 has two SD controllers: The Arasan sdhci controller
  (supported by the iproc driver) and a custom sdhost controller
  (supported by this driver).
  The sdhci controller supports both sdcard and sdio.  The sdhost
  controller supports the sdcard only, but has better performance.
  Also note that the rpi3 has sdio wifi, so driving the sdcard with
  the sdhost controller allows to use the sdhci controller for wifi
  support.
  The configuration is done by devicetree via pin muxing.  Both
  SD controller are available on the same pins (2 pin groups = pin 22
  to 27 + pin 48 to 53).  So it's possible to use both SD controllers
  at the same time with different pin groups.
  Author:      Phil Elwell <phil@raspberrypi.org>
               Copyright (C) 2015-2016 Raspberry Pi (Trading) Ltd.
  Based on
   mmc-bcm2835.c by Gellert Weisz
  which is, in turn, based on
   sdhci-bcm2708.c by Broadcom
   sdhci-bcm2835.c by Stephen Warren and Oleksandr Tymoshenko
   sdhci.c and sdhci-pci.c by Pierre Ossman
 Command to SD card              - 16 RW 
 Argument to SD card             - 32 RW 
 Start value for timeout counter - 32 RW 
 Start value for clock divider   - 11 RW 
 SD card response (31:0)         - 32 R   
 SD card response (63:32)        - 32 R   
 SD card response (95:64)        - 32 R   
 SD card response (127:96)       - 32 R   
 SD host status                  - 11 RW 
 SD card power control           -  1 RW 
 Emergency Debug Mode            - 13 RW 
 Host configuration              -  2 RW 
 Host byte count (debug)         - 32 RW 
 Data tofrom SD card            - 32 RW 
 Host block count (SDIOSDHC)    -  9 RW 
 Reserved 
 Reserved 
 Maximum block count for PIO (0 = always DMA) 
 Current clock speed 
 Max possible freq 
 Timer for timeouts 
 SG state for PIO 
 remaining PIO blocks 
 Device IRQ 
 cached registers 
 Current request 
 Current command 
 Current data request 
 Data finished before cmd 
 Wait for busy interrupt 
 Send CMD23 
 for threaded irq handler 
 DMA part 
 Write 1s to clear 
 Limit fifo usage due to silicon bug 
	 The block doesn't manage the FIFO DREQs properly for
	  multi-block transfers, so don't attempt to DMA the final
	  few words.  Unfortunately this requires the final sg entry
	  to be trimmed.  N.B. This code demands that the overspill
	  is contained in a single sg entry.
 The parameters have already been validated, so this will not fail 
 Use PIO 
 if it takes a while make poll interval bigger 
 Clear any error flags 
	 Need to send CMD12 if -
	  a) open-ended multiblock transfer (no CMD23)
	  b) error in multiblock transfer
 No busy, so poll for completion 
		 Data managed to finish before the
		  command completed. Make sure we do
		  things in the proper order.
 Check for errors 
 Clear the errors 
 Kick the FSM out of its wait 
 Finished CMD23, now send actual command. 
				 DMA transfer starts now, PIO starts
				  after irq
 Finished CMD12 
 Processed actual command. 
	 There are no dedicated dataspace available interrupt
	  status bits, so it is necessary to use the single shared
	  dataspace available FIFO status bits. It is therefore not
	  an error to get here when there is no data transfer in
	  progress.
 Use the block interrupt for writes after the first block 
	 There is no true data interrupt status bit, so it is
	  necessary to qualify the data flag with the interrupt
	  enable bit.
	 The SDCDIV register has 11 bits, and holds (div - 2).  But
	  in data mode the max is 50MHz wihout a minimum, and only
	  the bottom 3 bits are used. Since the switch over is
	  automatic (unless we have marked the card as slow...),
	  chosen values have to make sense in both modes.  Ident mode
	  must be 100-400KHz, so can range check the requested
	  clock. CMD15 must be used to return to data mode, so this
	  can be monitored.
	 
	  clock 250MHz -> 0->125MHz, 1->83.3MHz, 2->62.5MHz, 3->50.0MHz
	                  4->41.7MHz, 5->35.7MHz, 6->31.3MHz, 7->27.8MHz
	 
	 		 623->400KHz27.8MHz
	 		 reset value (507)->49115950MHz
	 
	  BUT, the 3-bit clock divisor in data mode is too small if
	  the core clock is higher than 250MHz, so instead use the
	  SLOW_CARD configuration bit to force the use of the ident
	  clock divisor at all times.
		 Can't stop the clock, but make it as slow as possible
		  to show willing
 Calibrate some delays 
 Set the timeout to 500ms 
 Reset the error statuses in case this is a retry 
 DMA transfer starts now, PIO starts after irq 
 set bus width 
 Disable clever clock switching, to cope with fast core clocks 
 host controller capabilities 
 DREQ channel 
 DREQ channel 
 report supported voltage ranges 
 Set interrupt enables 
	 Parse OF address directly to get the physical address for
	  DMA to our registers.
 Ignore errors to fall back to PIO mode 
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriversmmcs3cmci.h - Samsung S3C MCI driver
   Copyright (C) 2004-2006 maintech GmbH, Thomas Kleffel <tk@maintech.de>
  Current driver maintained by Ben Dooks and Simtec Electronics
   Copyright (C) 2008 Simtec Electronics <ben-linux@fluff.org>
 CONFIG_MMC_DEBUG 
  s3cmci_host_usedma - return whether the host is using dma or pio
  @host: The host state
  Return true if the host is using DMA to transfer data, else false
  to use PIO mode. Will return static data depending on the driver
  configuration.
 CONFIG_MMC_S3C_DMA 
 preserve the SDIO IRQ mask state 
  s3cmci_check_sdio_irq - test whether the SDIO IRQ is being signalled
  @host: The host to check.
  Test to see if the SDIO interrupt is being signalled in case the
  controller has failed to re-detect a card interrupt. Read GPE8 and
  see if it is low and if so, signal a SDIO interrupt.
  This is currently called if a request is finished (we assume that the
  bus is now idle) and when the SDIO IRQ is enabled in case the IRQ is
  already being indicated.
  s3cmci_enable_irq - enable IRQ, after having disabled it.
  @host: The device state.
  @more: True if more IRQs are expected from transfer.
  Enable the main IRQ if needed after it has been disabled.
  The IRQ can be one of the following states:
 	- disabled during IDLE
 	- disabled whilst processing data
 	- enabled during transfer
 	- enabled whilst awaiting SDIO interrupt detection
 pr_debug("%s: transfer %d\n", __func__, transfer); 
 write real prescaler to host, it might be set slow to fix 
		 If we have reached the end of the block, we can
		  read a word and get 1 to 3 bytes.  If we in the
		  middle of the block, we have to read full words,
		  otherwise we will write garbage, so round down to
		 If we have reached the end of the block, we have to
		  write exactly the remaining number of bytes.  If we
		  in the middle of the block, we have to write full
  ISR for SDI Interface IRQ
  Communication between driver and ISR works as follows:
    host->mrq 			points to current request
    host->complete_what	Indicates when the request is considered done
      COMPLETION_CMDSENT	  when the command was sent
      COMPLETION_RSPFIN          when a response was received
      COMPLETION_XFERFINISH	  when the data transfer is finished
      COMPLETION_XFERFINISH_RSPFIN both of the above.
    host->complete_request	is the completion-object the driver waits for
  1) Driver sets up host->mrq and host->complete_what
  2) Driver prepares the transfer
  3) Driver enables interrupts
  4) Driver starts transfer
  5) Driver waits for host->complete_rquest
  6) ISR checks for request status (errors and success)
  6) ISR sets host->mrq->cmd->error and host->mrq->data->error
  7) ISR completes host->complete_request
  8) ISR disables interrupts
  9) Driver wakes up and takes care of the request
  Note: "->error"-fields are expected to be set to 0 before the request
        was issued by mmc.c - therefore they are only set, when an error
        contition comes up
				 note, we used to fail the transfer
				  here, but it seems that this is just
				  the hardware getting it wrong.
				 
				  cmd->error = -EILSEQ;
				  host->status = "error: bad command crc";
				  goto fail_transfer;
	 errors handled after this point are only relevant
 Check for FIFO failure 
 Read response from controller. 
 Cleanup controller 
 If we have no data transfer we are finished here 
 Calculate the amout of bytes transfer if there was no error 
	 If we had an error while transferring data we flush the
 Clear failure register and reset fifo. 
 reset fifo 
		 We cannot deal with unaligned blocks with more than
 write BSIZE register 
 add to IMASK register 
 write TIMER register 
 FIX: set slow clock to prevent timeouts on read 
 Restore prescaler value 
	 Clear command, data and fifo status registers
	   Fifo clear only necessary on 2440, but doesn't hurt on 2410
 Send command 
 Enable Interrupt 
 Set clock 
 If requested clock is 0, real_rate will be 0, too 
 Set the power state 
 Set CLOCK_ENABLE 
 CONFIG_DEBUG_FS 
 If we get -ENOENT we have no card detect GPIO line 
 Depending on the dma state, get a DMA channel to use. 
 sentinel  },
 SPDX-License-Identifier: GPL-2.0-or-later
  USB SD Host Controller (USHC) controller driver.
  Copyright (C) 2010 Cambridge Silicon Radio Ltd.
  Notes:
    - Only version 2 devices are supported.
    - Version 2 devices only support SDIO cardsdevices (R2 response is
      unsupported).
  References:
    [USHC] USB SD Host Controller specification (CS-118793-SP)
	
	  Ignore the card interrupt status on interrupt transfers that
	  were submitted while card interrupts where disabled.
	 
	  This avoid occasional spurious interrupts when enabling
	  interrupts immediately after clearing the source on the card.
 Version 2 firmware doesn't support the R2 response format. 
	 The Astoria's data FIFOs don't work with clock speeds < 5MHz so
 Start cmd with CBW. 
 Submit data (if any). 
 Submit CSW. 
 Hardware can't detect interrupts while the clock is off. 
 Read capabilities. 
 CSR USB SD Host Controller 
 SPDX-License-Identifier: GPL-2.0-only
  Parse the EFI PCDP table to locate the console device.
  (c) Copyright 2002, 2003, 2004 Hewlett-Packard Development Company, L.P.
 	Khalid Aziz <khalid.aziz@hp.com>
 	Alex Williamson <alex.williamson@hp.com>
 	Bjorn Helgaas <bjorn.helgaas@hp.com>
 struct copy since ifptr might not be correctly aligned 
 SPDX-License-Identifier: GPL-2.0-only
  Export SMBIOSDMI info via sysfs to userspace
  Copyright 2007, Lennart Poettering
 Filter out characters we don't want to see in the modalias string 
	
	  Note new fields need to be added at the end to keep compatibility
	  with udev's hwdb which does matches on "`cat dmiidmodalias`".
 Initialization 
 In a separate function to keep gcc 3.2 happy - do NOT merge this in
	 Not necessarily all DMI fields are available on all
	  systems, hence let's built an attribute table of just
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2018-2019, Intel Corporation
  struct stratix10_rsu_priv - rsu data structure
  @chan: pointer to the allocated service channel
  @client: active service client
  @completion: state for callback completion
  @lock: a mutex to protect callback completion state
  @status.current_image: address of image currently running in flash
  @status.fail_image: address of failed image in flash
  @status.version: the interface version number of RSU firmware
  @status.state: the state of RSU system
  @status.error_details: error code
  @status.error_location: the error offset inside the image that failed
  @dcmf_version.dcmf0: Quartus dcmf0 version
  @dcmf_version.dcmf1: Quartus dcmf1 version
  @dcmf_version.dcmf2: Quartus dcmf2 version
  @dcmf_version.dcmf3: Quartus dcmf3 version
  @retry_counter: the current image's retry counter
  @max_retry: the preset max retry value
  rsu_status_callback() - Status callback from Intel Service Layer
  @client: pointer to service client
  @data: pointer to callback data structure
  Callback from Intel service layer for RSU status request. Status is
  only updated after a system reboot, so a get updated status call is
  made during driver probe.
  rsu_command_callback() - Update callback from Intel Service Layer
  @client: pointer to client
  @data: pointer to callback data structure
  Callback from Intel service layer for RSU commands.
  rsu_retry_callback() - Callback from Intel service layer for getting
  the current image's retry counter from the firmware
  @client: pointer to client
  @data: pointer to callback data structure
  Callback from Intel service layer for retry counter, which is used by
  user to know how many times the images is still allowed to reload
  itself before giving up and starting RSU fail-over flow.
  rsu_max_retry_callback() - Callback from Intel service layer for getting
  the max retry value from the firmware
  @client: pointer to client
  @data: pointer to callback data structure
  Callback from Intel service layer for max retry.
  rsu_dcmf_version_callback() - Callback from Intel service layer for getting
  the DCMF version
  @client: pointer to client
  @data: pointer to callback data structure
  Callback from Intel service layer for DCMF version number
  rsu_send_msg() - send a message to Intel service layer
  @priv: pointer to rsu private data
  @command: RSU status or update command
  @arg: the request argument, the bitstream address or notify status
  @callback: function pointer for the callback (status or update)
  Start an Intel service layer transaction to perform the SMC call that
  is necessary to get RSU boot log or set the address of bitstream to
  boot after reboot.
  Returns 0 on success or -ETIMEDOUT on error.
  This driver exposes some optional features of the Intel Stratix 10 SoC FPGA.
  The sysfs interfaces exposed here are FPGA Remote System Update (RSU)
  related. They allow user space software to query the configuration system
  status and to request optional reboot behavior specific to Intel FPGAs.
 to get the updated state 
 get the initial state from firmware 
 get DCMF version from firmware 
 SPDX-License-Identifier: GPL-2.0-only
  DMI stands for "Desktop Management Interface".  It is part
  of and an antecedent to, SMBIOS, which stands for System
  Management BIOS.  See further: https:www.dmtf.orgstandards
 DMI system identification string used during boot 
 bytes 
 DDR2, DDR3, DDR4 etc 
 Strings containing only spaces are considered empty 
 	We have to be cautious here. We have seen BIOSes with DMI pointers
 	pointing to completely the wrong place for example
	
	  Stop when we have seen all the items the table claimed to have
	  (SMBIOS < 3.0 only) OR we reach an end-of-table marker (SMBIOS
	  >= 3.0 only) OR we run off the end of the table (should never
	  happen but sometimes does on bogus implementations.)
		
		   We want to know the total length (formatted area and
		   strings) before decoding to make sure we won't run off the
		   table in dmi_decode or dmi_string
		
		  7.45 End-of-Table (Type 127) [SMBIOS reference spec v3.0.0]
		  For tables behind a 64-bit entry point, we have no item
		  count and no exact table length, so stop on end-of-table
		  marker. For tables behind a 32-bit entry point, we have
		  seen OEM structures behind the end-of-table marker on
		  some systems, so don't trust it.
 Trim DMI table length if needed 
 	Save a DMI string
 If the table doesn't have the field, let's return 
	 As per the spec, if the system doesn't support this field,
	  the value is FF
	
	  As of version 2.6 of the SMBIOS specification, the first 3 fields of
	  the UUID are supposed to be little-endian encoded.  The specification
	  says that this is the defacto standard.
 No duplicate device 
 Skip disabled device 
 Ignore invalid values 
 Skip disabled device 
 Need SMBIOS 2.6+ structure 
 	Process a DMI table entry. Right now all we care about are the BIOS
 	and machine entries. For 2.5 we should pull the smbus controller info
 	out of here.
 BIOS Information 
 System Information 
 Base Board Information 
 Chassis Information 
 System Slots 
 Onboard Devices Information 
 OEM Strings 
 IPMI Device Information 
 Onboard Devices Extended Information 
 Board Name is optional 
  Check for DMISMBIOS headers in the system firmware image.  Any
  SMBIOS header must start 16 bytes before the DMI header, so take a
  32 byte buffer and check for DMI at offset 16 and SMBIOS at offset
  0.  If the DMI header is present, set dmi_ver accordingly (SMBIOS
  takes precedence) and return 0.  Otherwise return 1.
 Some BIOS report weird SMBIOS version, fix that up 
  Check for the SMBIOS 3.0 64-bit entry point signature. Unlike the legacy
  32-bit entry point, there is no embedded DMI header (_DMI_) in here.
 No longer specified 
		
		  According to the DMTF SMBIOS reference spec v3.0.0, it is
		  allowed to define both the 64-bit entry point (smbios3) and
		  the 32-bit entry point (smbios), in which case they should
		  either both point to the same SMBIOS structure table, or the
		  table pointed to by the 64-bit entry point should contain a
		  superset of the table contents pointed to by the 32-bit entry
		  point (section 5.2)
		  This implies that the 64-bit entry point should have
		  precedence if it is defined and supported by the OS. If we
		  have the 64-bit entry point, but fail to decode it, fall
		  back to the legacy one (if available)
		 This is called as a core_initcall() because it isn't
		  needed during early boot.  This also means we can
		  iounmap the space when we're done with it.
		
		  Same logic as above, look for a 64-bit entry point
		  first, and if not found, fall back to 32-bit entry point.
		
		  Iterate over all possible DMI header addresses q.
		  Maintain the 32 bytes around q in buf.  On the
		  first iteration, substitute zero for the
		  out-of-range bytes so there is no chance of falsely
		  detecting an SMBIOS header.
	
	  Set up dmi directory at sysfirmwaredmi. This entry should stay
	  even after farther error, as it can be used by other modules like
	  dmi-sysfs.
 	dmi_setup - scan and setup DMI system information
 	Scan the DMI system information. This setups DMI identifiers
 	(dmi_system_id) for printing it out on task dumps and prepares
 	DIMM entry information (dmi_memdev_info) from the SMBIOS table
 	for using this when reporting memory errors.
 	dmi_matches - check if dmi_system_id structure matches system DMI data
 	@dmi: pointer to the dmi_system_id structure to check
 DMI_OEM_STRING must be exact match 
 No match 
 	dmi_is_end_of_table - check for end-of-table marker
 	@dmi: pointer to the dmi_system_id structure to check
 	dmi_check_system - check system DMI data
 	@list: array of dmi_system_id structures to match against
 		All non-null elements of the list must match
 		their slot's (field index's) data (i.e., each
 		list string must be a substring of the specified
 		DMI slot's string data) to be considered a
 		successful match.
 	Walk the blacklist table running matching functions until someone
 	returns non zero or we hit the end. Callback function is called for
 	each successful match. Returns the number of matches.
 	dmi_setup must be called before this function is called.
 	dmi_first_match - find dmi_system_id structure matching system DMI data
 	@list: array of dmi_system_id structures to match against
 		All non-null elements of the list must match
 		their slot's (field index's) data (i.e., each
 		list string must be a substring of the specified
 		DMI slot's string data) to be considered a
 		successful match.
 	Walk the blacklist table until the first match is found.  Return the
 	pointer to the matching entry or NULL if there's no match.
 	dmi_setup must be called before this function is called.
 	dmi_get_system_info - return DMI data value
 	@field: data index (see enum dmi_field)
 	Returns one DMI data value, can be used to perform
 	complex DMI data checks.
  dmi_name_in_serial - Check if string is in the DMI product serial information
  @str: string to check for
 	dmi_name_in_vendors - Check if string is in the DMI system or board vendor name
 	@str: Case sensitive Name
 	dmi_find_device - find onboard device by typename
 	@type: device type or %DMI_DEV_TYPE_ANY to match all device types
 	@name: device name string or %NULL to match all
 	@from: previous device found in search, or %NULL for new search.
 	Iterates through the list of known onboard devices. If a device is
 	found with a matching @type and @name, a pointer to its device
 	structure is returned.  Otherwise, %NULL is returned.
 	A new search is initiated by passing %NULL as the @from argument.
 	If @from is not %NULL, searches continue from next device.
 	dmi_get_date - parse a DMI date
 	@field:	data index (see enum dmi_field)
 	@yearp: optional out parameter for the year
 	@monthp: optional out parameter for the month
 	@dayp: optional out parameter for the day
 	The date field is assumed to be in the form resembling
 	[mm[dd]]yy[yy] and the result is stored in the out
 	parameters any or all of which can be omitted.
 	If the field doesn't exist, all out parameters are set to zero
 	and false is returned.  Otherwise, true is returned with any
 	invalid part of date set to zero.
 	On return, year, month and day are guaranteed to be in the
 	range of [0,9999], [0,12] and [0,31] respectively.
	
	  Determine year first.  We assume the date string resembles
	  mmddyy[yy] but the original code extracted only the year
	  from the end.  Keep the behavior in the spirit of no
	  surprises.
 2-digit year 
 no dates < spec 1.0 
 year should fit in %04d 
 parse the mm and dd 
 	dmi_get_bios_year - get a year out of DMI_BIOS_DATE field
 	Returns year on success, -ENXIO if DMI is not selected,
 	or a different negative error code if DMI field is not present
 	or not parseable.
 	dmi_walk - Walk the DMI table and get called back for every record
 	@decode: Callback function
 	@private_data: Private data to be passed to the callback function
 	Returns 0 on success, -ENXIO if DMI is not selected or not present,
 	or a different negative error code if DMI walking fails.
  dmi_match - compare a string to the dmi field (if exists)
  @f: DMI field identifier
  @str: string to compare the DMI field to
  Returns true if the requested field equals to the str (including NULL).
  dmi_memdev_type - get the memory type
  @handle: DMI structure handle
  Return the DMI memory type of the module in the slot associated with the
  given DMI handle, or 0x0 if no such DMI handle exists.
 Not a valid value 
 	dmi_memdev_handle - get the DMI handle of a memory slot
 	@slot: slot number
 	Return the DMI handle associated with a given memory slot, or %0xFFFF
       if there is no such slot.
 Not a valid value 
 SPDX-License-Identifier: GPL-2.0-only
  System Control and Power Interface (SCPI) Message Protocol driver
  SCPI Message Protocol is used between the System Control Processor(SCP)
  and the Application Processors(AP). The Message Handling Unit(MHU)
  provides a mechanism for inter-processor communication between SCP's
  Cortex M3 and AP.
  SCP offers control and management of the corecluster power states,
  various power domain DVFS including the corecluster, certain system
  clocks configuration, thermal sensors and many others.
  Copyright (C) 2015 ARM Ltd.
 Success 
 Invalid parameter(s) 
 Invalid alignment 
 Invalid size 
 Invalid handlercallback 
 Invalid accesspermission denied 
 Value out of range 
 Timeout has occurred 
 Invalid memory area or pointer 
 Invalid power state 
 Not supported or disabled 
 Device error 
 Device busy 
 SCPI Standard commands 
 SCPI Legacy Commands 
 List all commands that are required to go through the high priority link 
 List all commands used by this driver, used as indexes 
 GET_CLOCK_INFO 
 SET_DEVICE_PWR_STATE 
 GET_DEVICE_PWR_STATE 
 has to be first element 
 locking for the rx pending list 
  The SCP firmware only executes in little-endian mode, so any buffers
  shared through SCPI should have their contents converted to little-endian
 better than switch case as long as return value is continuous 
 SCPI_SUCCESS 
 SCPI_ERR_PARAM 
 SCPI_ERR_ALIGN 
 SCPI_ERR_SIZE 
 SCPI_ERR_HANDLER 
 SCPI_ERR_ACCESS 
 SCPI_ERR_RANGE 
 SCPI_ERR_TIMEOUT 
 SCPI_ERR_NOMEM 
 SCPI_ERR_PWRSTATE 
 SCPI_ERR_SUPPORT 
 SCPI_ERR_DEVICE 
 SCPI_ERR_BUSY 
	 Command type is not replied by the SCP Firmware in legacy Mode
	  We should consider that command is the head of pending RX commands
	  if the list is not empty. In TX only mode, the list would be empty.
 check if wait_for_completion is in progress or timed-out 
 RX Length is not replied by the legacy Firmware 
 first status word 
 remove entry from the list if timed-out 
 SCPI error codes > 0, translate them to Linux scale
 data already populated 
 uS to nS 
 only 32-bits supported, upper 32 bits can be junk 
 Ignore error if not implemented 
 stop exporting SCPI ops through get_scpi_ops 
 controller can't ack 
 Replace with legacy variants 
 Fill priority bitmap 
 SPDX-License-Identifier: GPL-2.0
  Defines interfaces for interacting with the Raspberry Pi firmware's
  property channel.
  Copyright © 2015 Broadcom
 The property channel. 
  Sends a request to the firmware through the BCM2835 mailbox driver,
  and synchronously waits for the reply.
  rpi_firmware_property_list - Submit firmware property list
  @fw:		Pointer to firmware structure from rpi_firmware_get().
  @data:	Buffer holding tags.
  @tag_size:	Size of tags buffer.
  Submits a set of concatenated tags to the VPU firmware through the
  mailbox property interface.
  The buffer header and the ending tag are added by this function and
  don't need to be supplied, just the actual tags for your operation.
  See struct rpi_firmware_property_tag_header for the per-tag
  structure.
 Packets are processed a dword at a time. 
 The firmware will error out without parsing in this case. 
		
		  The tag name here might not be the one causing the
		  error, if there were multiple tags in the request.
		  But single-tag is the most common, so go with it.
  rpi_firmware_property - Submit single firmware property
  @fw:		Pointer to firmware structure from rpi_firmware_get().
  @tag:	One of enum_mbox_property_tag.
  @tag_data:	Tag data buffer.
  @buf_size:	Buffer size.
  Submits a single tag to the VPU firmware through the mailbox
  property interface.
  This is a convenience wrapper around
  rpi_firmware_property_list() to avoid some of the
  boilerplate in property calls.
	 Some mailboxes can use over 1k bytes. Rather than checking
	  size and using stack or kmalloc depending on requirements,
	  just use kmalloc. Mailboxes don't get called enough to worry
	  too much about the time taken in the allocation.
 This is not compatible with y2038 
	
	  Earlier DTs don't have a node for the firmware clocks but
	  rely on us creating a platform device by hand. If we do
	  have a node for the firmware clocks, just bail out here.
	
	  Memory will be freed by rpi_firmware_delete() once all users have
	  released their firmware handles. Don't use devm_kzalloc() here.
  rpi_firmware_get - Get pointer to rpi_firmware structure.
  @firmware_node:    Pointer to the firmware Device Tree node.
  The reference to rpi_firmware has to be released with rpi_firmware_put().
  Returns NULL is the firmware device is not ready.
  devm_rpi_firmware_get - Get pointer to rpi_firmware structure.
  @firmware_node:    Pointer to the firmware Device Tree node.
  Returns NULL is the firmware device is not ready.
 SPDX-License-Identifier: GPL-2.0-or-later
  Generic System Framebuffers
  Copyright (c) 2012-2013 David Herrmann <dh.herrmann@gmail.com>
  simple-framebuffer probing
  Try to convert "screen_info" into a "simple-framebuffer" compatible mode.
  If the mode is incompatible, we return "false" and let the caller create
  legacy nodes instead.
 try parsing screen_info into a simple-framebuffer mode struct 
	
	  If the 64BIT_BASE capability is set, ext_lfb_base will contain the
	  upper half of the base address. Assemble the address, then make sure
	  it is valid and we can actually access it.
	
	  Don't use lfb_size as IORESOURCE size, since it may contain the
	  entire VMEM, and thus require huge mappings. Use just the part we
	  need, that is, the part where the framebuffer is located. But verify
	  that it does not exceed the advertised VMEM.
	  Note that in case of VBE, the lfb_size is shifted by 16 bits for
	  historical reasons.
 setup IORESOURCE_MEM as framebuffer memory 
 SPDX-License-Identifier: GPL-2.0
  Turris Mox rWTM firmware driver
  Copyright (C) 2019 Marek Behún <kabel@kernel.org>
  The macros and constants below come from Turris Mox's rWTM firmware code.
  This firmware is open source and it's sources can be found at
  https:gitlab.labs.nic.czturrismox-boot-buildertreemasterwtmi.
 board information 
 public key burned in eFuse 
	
	  Signature process. This is currently done via debugfs, because it
	  does not conform to the sysfs standard "one file per attribute".
	  It should be rewritten via crypto API once akcipher API is available
	  from userspace.
 only allow one read, of 136 bytes, from position 0 
 2 arrays of 17 32-bit words are 136 bytes 
 the input is a SHA-512 hash, so exactly 64 bytes have to be read 
 if last result is not zero user has not read that information yet 
	
	  Here we have to send:
	    1. Address of the input to sign.
	       The input is an array of 17 32-bit words, the first (most
	       significat) is 0, the rest 16 words are copied from the SHA-512
	       hash given by the user and converted from BE to LE.
	    2. Address of the buffer where ECDSA signature value R shall be
	       stored by the rWTM firmware.
	    3. Address of the buffer where ECDSA signature value S shall be
	       stored by the rWTM firmware.
	
	  Here we read the R and S values of the ECDSA signature
	  computed by the rWTM firmware and convert their words from
	  LE to BE.
 SPDX-License-Identifier: GPL-2.0-or-later
  Generic System Framebuffers
  Copyright (c) 2012-2013 David Herrmann <dh.herrmann@gmail.com>
  Simple-Framebuffer support
  Create a platform-device for any available boot framebuffer. The
  simple-framebuffer platform device is already available on DT systems, so
  this module parses the global "screen_info" object and creates a suitable
  platform device compatible with the "simple-framebuffer" DT object. If
  the framebuffer is incompatible, we instead create a legacy
  "vesa-framebuffer", "efi-framebuffer" or "platform-framebuffer" device and
  pass the screen_info as platform_data. This allows legacy drivers
  to pick these devices up without messing with simple-framebuffer drivers.
  The global "screen_info" is still valid at all times.
  If CONFIG_SYSFB_SIMPLEFB is not selected, never register "simple-framebuffer"
  platform devices, but only use legacy framebuffer devices for
  backwards compatibility.
  TODO: We set the dev_id field of all platform-devices to 0. This allows
  other OFDT parsers to create such devices, too. However, they must
  start at offset 1 for this to work.
 try to create a simple-framebuffer device 
 if the FB is incompatible, create a legacy framebuffer device 
 must execute after PCI subsystem for EFI quirks 
 SPDX-License-Identifier: GPL-2.0-only
  SCPI Generic power domain support.
  Copyright (C) 2016 ARM Ltd.
  These device power state values are not well-defined in the specification.
  In case, different implementations use different values, we can make these
  specific to compatibles rather than getting these values from device tree.
		
		  Treat all power domains as off at boot.
		 
		  The SCP firmware itself may have switched on some domains,
		  but for reference counting purpose, keep it this way.
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
   Copyright 2007-2010 Red Hat, Inc.
   by Peter Jones <pjones@redhat.com>
   Copyright 2007 IBM, Inc.
   by Konrad Rzeszutek <konradr@linux.vnet.ibm.com>
   Copyright 2008
   by Konrad Rzeszutek <ketuzsezr@darnok.org>
  This code finds the iSCSI Boot Format Table.
  Physical location of iSCSI Boot Format Table.
 Broadcom iSCSI Offload 
 512kB 
 1MB 
 VGA buffer 
 128kB 
  Routine used to find and reserve the iSCSI Boot Format Table
	 iBFT 1.03 section 1.4.3.1 mandates that UEFI machines will
	  only use ACPI for this
		 The table can't be inside the VGA BIOS reserved space,
				 if the length of the table extends past 1M,
 SPDX-License-Identifier: GPL-2.0-or-later
  Trusted Foundations support for ARM CPUs
  Copyright (c) 2013, NVIDIA Corporation.
 CONFIG_CACHE_L2X0 
	
	  we are not using version information for now since currently
	  supported SMCs are compatible with all TF releases
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2017-2018, Intel Corporation
  SVC_NUM_DATA_IN_FIFO - number of struct stratix10_svc_data in the FIFO
  SVC_NUM_CHANNEL - number of channel supported by service layer driver
  FPGA_CONFIG_DATA_CLAIM_TIMEOUT_MS - claim back the submitted buffer(s)
  from the secure world for FPGA manager to reuse, or to free the buffer(s)
  when all bit-stream data had be send.
  FPGA_CONFIG_STATUS_TIMEOUT_SEC - poll the FPGA configuration status,
  service layer will return error to FPGA manager when timeout occurs,
  timeout is set to 30 seconds (30  1000) at Intel Stratix10 SoC.
 stratix10 service layer clients 
  struct stratix10_svc - svc private data
  @stratix10_svc_rsu: pointer to stratix10 RSU device
  struct stratix10_svc_sh_memory - service shared memory structure
  @sync_complete: state for a completion
  @addr: physical address of shared memory block
  @size: size of shared memory block
  @invoke_fn: function to issue secure monitor or hypervisor call
  This struct is used to save physical address and size of shared memory
  block. The shared memory blocked is allocated by secure monitor software
  at secure world.
  Service layer driver uses the physical address and size to create a memory
  pool, then allocates data buffer from that memory pool for service client.
  struct stratix10_svc_data_mem - service memory structure
  @vaddr: virtual address
  @paddr: physical address
  @size: size of memory
  @node: link list head node
  This struct is used in a list that keeps track of buffers which have
  been allocated or freed from the memory pool. Service layer driver also
  uses this struct to transfer physical address to virtual address.
  struct stratix10_svc_data - service data structure
  @chan: service channel
  @paddr: playload physical address
  @size: playload size
  @command: service command requested by client
  @flag: configuration type (full or partial)
  @arg: args to be passed via registers and not physically mapped buffers
  This struct is used in service FIFO for inter-process communication.
  struct stratix10_svc_controller - service controller
  @dev: device
  @chans: array of service channels
  @num_chans: number of channels in 'chans' array
  @num_active_client: number of active service client
  @node: list management
  @genpool: memory pool pointing to the memory region
  @task: pointer to the thread task which handles SMC or HVC call
  @svc_fifo: a queue for storing service message data
  @complete_status: state for completion
  @svc_fifo_lock: protect access to service message data queue
  @invoke_fn: function to issue secure monitor call or hypervisor call
  This struct is used to create communication channels for service clients, to
  handle secure monitor or hypervisor call.
  struct stratix10_svc_chan - service communication channel
  @ctrl: pointer to service controller which is the provider of this channel
  @scl: pointer to service client which owns the channel
  @name: service client name associated with the channel
  @lock: protect access to the channel
  This struct is used by service client to communicate with service layer, each
  service client has its own channel created by service controller.
  svc_pa_to_va() - translate physical address to virtual address
  @addr: to be translated physical address
  Return: valid virtual address or NULL if the provided physical
  address doesn't exist.
 physical address is not found 
  svc_thread_cmd_data_claim() - claim back buffer from the secure world
  @ctrl: pointer to service layer controller
  @p_data: pointer to service data structure
  @cb_data: pointer to callback data structure to service client
  Claim back the submitted buffers from the secure world and pass buffer
  back to service client (FPGA manager, etc) for reuse.
  svc_thread_cmd_config_status() - check configuration status
  @ctrl: pointer to service layer controller
  @p_data: pointer to service data structure
  @cb_data: pointer to callback data structure to service client
  Check whether the secure firmware at secure world has finished the FPGA
  configuration, and then inform FPGA manager the configuration status.
		
		  configuration is still in progress, wait one second then
		  poll again
  svc_thread_recv_status_ok() - handle the successful status
  @p_data: pointer to service data structure
  @cb_data: pointer to callback data structure to service client
  @res: result from SMC or HVC call
  Send back the correspond status to the service clients.
  svc_normal_to_secure_thread() - the function to run in the kthread
  @data: data pointer for kthread function
  Service layer driver creates stratix10_svc_smc_hvc_call kthread on CPU
  node 0, its function stratix10_svc_secure_call_thread is used to handle
  SMC or HVC calls between kernel driver and secure monitor software.
  Return: 0 for success or -ENOMEM on error.
 default set, to remove build warning 
			
			  be compatible with older version firmware which
			  doesn't support RSU notify or retry
  svc_normal_to_secure_shm_thread() - the function to run in the kthread
  @data: data pointer for kthread function
  Service layer driver creates stratix10_svc_smc_hvc_shm kthread on CPU
  node 0, its function stratix10_svc_secure_shm_thread is used to query the
  physical address of memory block reserved by secure monitor software at
  secure world.
  svc_normal_to_secure_shm_thread() terminates directly since it is a
  standlone thread for which no one will call kthread_stop() or return when
  'kthread_should_stop()' is true.
 SMC or HVC call to get shared memory info from secure world 
  svc_get_sh_memory() - get memory block reserved by secure monitor SW
  @pdev: pointer to service layer device
  @sh_memory: pointer to service shared memory structure
  Return: zero for successfully getting the physical address of memory block
  reserved by secure monitor software, or negative value on error.
 smc or hvc call happens on cpu 0 bound kthread 
  svc_create_memory_pool() - create a memory pool from reserved memory block
  @pdev: pointer to service layer device
  @sh_memory: pointer to service shared memory structure
  Return: pool allocated from reserved memory block or ERR_PTR() on error.
  svc_smccc_smc() - secure monitor call between normal and secure world
  @a0: argument passed in registers 0
  @a1: argument passed in registers 1
  @a2: argument passed in registers 2
  @a3: argument passed in registers 3
  @a4: argument passed in registers 4
  @a5: argument passed in registers 5
  @a6: argument passed in registers 6
  @a7: argument passed in registers 7
  @res: result values from register 0 to 3
  svc_smccc_hvc() - hypervisor call between normal and secure world
  @a0: argument passed in registers 0
  @a1: argument passed in registers 1
  @a2: argument passed in registers 2
  @a3: argument passed in registers 3
  @a4: argument passed in registers 4
  @a5: argument passed in registers 5
  @a6: argument passed in registers 6
  @a7: argument passed in registers 7
  @res: result values from register 0 to 3
  get_invoke_func() - invoke SMC or HVC call
  @dev: pointer to device
  Return: function pointer to svc_smccc_smc or svc_smccc_hvc.
  stratix10_svc_request_channel_byname() - request a service channel
  @client: pointer to service client
  @name: service client name
  This function is used by service client to request a service channel.
  Return: a pointer to channel assigned to the client on success,
  or ERR_PTR() on error.
 if probe was called after client's, or error on probe 
 if there was no channel match 
  stratix10_svc_free_channel() - free service channel
  @chan: service channel to be freed
  This function is used by service client to free a service channel.
  stratix10_svc_send() - send a message data to the remote
  @chan: service channel assigned to the client
  @msg: message data to be sent, in the format of
  "struct stratix10_svc_client_msg"
  This function is used by service client to add a message to the service
  layer driver's queue for being sent to the secure world.
  Return: 0 for success, -ENOMEM or -ENOBUFS on error.
 first client will create kernel thread 
  stratix10_svc_done() - complete service request transactions
  @chan: service channel assigned to the client
  This function should be called when client has finished its request
  or there is an error in the request process. It allows the service layer
  to stop the running thread to have maximize savings in kernel resources.
 stop thread when thread is running AND only one active client 
  stratix10_svc_allocate_memory() - allocate memory
  @chan: service channel assigned to the client
  @size: memory size requested by a specific service client
  Service layer allocates the requested number of bytes buffer from the
  memory pool, service client uses this function to get allocated buffers.
  Return: address of allocated memory on success, or ERR_PTR() on error.
  stratix10_svc_free_memory() - free allocated memory
  @chan: service channel assigned to the client
  @kaddr: memory to be freed
  This function is used by service client to free allocated buffers.
 get SMC or HVC function 
 allocate service controller and supporting channel 
 add svc client device(s) 
 SPDX-License-Identifier: GPL-2.0-only
  dmi-sysfs.c
  This module exports the DMI tables read-only to userspace through the
  sysfs file system.
  Data is currently found below
     sysfirmwaredmi...
  DMI attributes are presented in attribute files with names
  formatted using %d-%d, so that the first integer indicates the
  structure type (0-255), and the second field is the instance of that
  entry.
  Copyright 2011 Google, Inc.
#define MAX_ENTRY_TYPE 255  Most of these aren't used, but we consider
  Global list of dmi_sysfs_entry.  Even though this should only be
  manipulated at setup and teardown, the lazy nature of the kobject
  system means we get lazy removes.
 dmi_sysfs_attribute - Top level attribute. used by all entries. 
  dmi_sysfs_mapped_attribute - Attribute where we require the entry be
  mapped in.  Use in conjunction with dmi_sysfs_specialize_attr_ops.
  Generic DMI entry support.
 DMI stuff is only ever admin visible 
 Is this the entry we want? 
 try the next instance? 
	
	  Don't ever revisit the instance.  Short circuit later
	  instances by letting the instance_countdown run negative
 Found the entry 
 State for passing the read parameters through dmi_find_entry() 
 To signal the entry disappeared 
 This shouldn't happen, but just in case. 
  Calculate and return the byte length of the dmi entry identified by
  dh.  This includes both the formatted portion as well as the
  unformatted string space, including the two trailing nul characters.
  Support bits for specialized DMI entry support
	 Find the entry according to our parent and call the
  Specialized DMI entry support.
 Type 15 - System Event Table 
  Generic DMI entry support.
 Global count of all instances seen.  Only for setup 
 Global positional count of all entries seen.  Only for setup 
 If a previous entry saw an error, short circuit 
 Allocate and register a new entry into the entries set 
 Set the key 
 Thread on the global list for cleanup 
 Handle specializations by type 
 No specialization 
 Create the raw binary file to access the entry 
 No locks, we are on our way out 
 clean up everything. 
  driversfirmwareqemu_fw_cfg.c
  Copyright 2015 Carnegie Mellon University
  Expose entries from QEMU's firmware configuration (fw_cfg) device in
  sysfs (read-only, under "sysfirmwareqemu_fw_cfg...").
  The fw_cfg device may be instantiated via either an ACPI node (on x86
  and select subsets of aarch64), a Device Tree node (on arm), or using
  a kernel module (or command line) parameter with the following syntax:
       [qemu_fw_cfg.]ioport=<size>@<base>[:<ctrl_off>:<data_off>[:<dma_off>]]
  or
       [qemu_fw_cfg.]mmio=<size>@<base>[:<ctrl_off>:<data_off>[:<dma_off>]]
  where:
       <size>     := size of ioport or mmio range
       <base>     := physical base address of ioport or mmio range
       <ctrl_off> := (optional) offset of control register
       <data_off> := (optional) offset of data register
       <dma_off> := (optional) offset of dma register
  e.g.:
       qemu_fw_cfg.ioport=12@0x510:0:1:4	(the default on x86)
  or
       qemu_fw_cfg.mmio=16@0x9020000:8:0:16	(the default on arm)
 fw_cfg revision attribute, in sysfirmwareqemu_fw_cfg top-level dir. 
 fw_cfg device io register addresses 
 atomic access to fw_cfg device (potentially slow io, so using mutex) 
 pick appropriate endianness for selector key 
 qemu fw_cfg device is sync today, but spec says it may become async 
 do not reorder the read to d->control 
 fw_cfg device does not need IOMMU protection, so use physical addresses 
 force memory to sync before notifying device via MMIO 
 read chunk of given fw_cfg blob (caller responsible for sanity-check) 
	 If we have ACPI, ensure mutual exclusion against any potential
	  device access by the firmware, e.g. via AML methods:
 Should never get here 
 write chunk of given fw_cfg blob (caller responsible for sanity-check) 
	 If we have ACPI, ensure mutual exclusion against any potential
	  device access by the firmware, e.g. via AML methods:
 Should never get here 
 CONFIG_CRASH_CORE 
 clean up fw_cfg device io 
 arch-specific ctrl & data register offsets are not available in ACPI, DT 
 parisc 
 ppcmac,sun4m 
 x86, sun4u 
 initialize fw_cfg device io from platform data 
 acquire io range details 
 were custom register offsets provided (e.g. on the command line)? 
 use architecture-specific offsets 
 verify fw_cfg device signature 
 fw_cfg_sysfs_entry type 
	 spare ourself reading host format support for now since we
	  don't know what else to format - host may ignore ours
 CONFIG_CRASH_CORE 
 get fw_cfg_sysfs_entry from kobject member 
 fw_cfg_sysfs_attribute type 
 get fw_cfg_sysfs_attribute from attribute member 
 global cache of fw_cfg_sysfs_entry objects 
 kobjects removed lazily by kernel, mutual exclusion needed 
		 will end up invoking fw_cfg_sysfs_cache_delist()
		  via each object's release() method (i.e. destructor)
 default_attrs: per-entry attributes and show methods 
 sysfs_ops: find fw_cfg_[entry, attribute] and call appropriate show method 
 release: destructor, to be called via kobject_put() 
 kobj_type: ties together all properties required to register an entry 
 raw-read method and attribute 
  Create a kset subdirectory matching each '' delimited dirname token
  in 'name', starting with sysfs ksetfolder 'dir'; At the end, create
  a symlink directed at the given 'target'.
  NOTE: We do this on a best-effort basis, since 'name' is not guaranteed
  to be a well-behaved path name. Whenever a symlink vs. kset directory
  name collision occurs, the kernel will issue big scary warnings while
  refusing to add the offending link or directory. We follow up with our
  own, slightly less scary error messages explaining the situation :)
 clone a copy of name for parsing 
 create folders for each dirname token, then symlink for basename 
 last (basename) token? If so, add symlink here 
 does the current dir contain an item named after tok ? 
 drop reference added by kset_find_obj 
 ko MUST be a kset - we're about to use it as one ! 
 descend into already existing subdirectory 
 create new subdirectory kset 
 descend into newly created subdirectory 
 we're done with cloned copy of name 
 recursively unregister fw_cfgby_name kset directory tree 
 all set members are ksets too, but check just in case... 
 symlinks are cleanly and automatically removed with the directory 
 kobjects & kset representing top-level, by_key, and by_name folders 
 register an individual fw_cfg file 
 allocate new entry 
 set file entry information 
 register entry under "sysfirmwareqemu_fw_cfgby_key" 
 add raw binary content access 
 try adding "sysfirmwareqemu_fw_cfgby_name" symlink 
 success, add entry to global cache 
 iterate over all fw_cfg directory entries, registering each one 
 unregister top-level or by_key folder 
	 NOTE: If we supported multiple fw_cfg devices, we'd first create
	  a subdirectory named after e.g. pdev->id, then hang per-device
	  by_key (and by_name) subdirectories underneath it. However, only
	  one fw_cfg device exist system-wide, so if one was already found
	  earlier, we might as well stop here.
 create by_key and by_name subdirs of sysfirmwareqemu_fw_cfg 
 initialize fw_cfg device io from platform data 
 get revision number, add matching top-level attribute 
 process fw_cfg file directory entry, registering each file 
 success 
 this probably belongs in e.g. includelinuxtypes.h,
  but right now we are the only ones doing it...
 use special scanfprintf modifier for phys_addr_t, resource_size_t 
	 only one fw_cfg device can exist system-wide, so if one
	  was processed on the command line already, we might as
	  well stop here.
 avoid leaking previously registered device 
 consume "<size>" portion of command line argument 
 get "@<base>[:<ctrl_off>:<data_off>[:<dma_off>]]" chunks 
	 sscanf() must process precisely 1, 3 or 4 chunks:
	  <base> is mandatory, optionally followed by <ctrl_off>
	  and <data_off>, and <dma_off>;
	  there must be no extra characters after the last chunk,
	  so str[consumed] must be '\0'.
 insert register offsets, if provided 
	 "processed" happens to nicely match the number of resources
	  we need to pass in to this platform device.
	 stay silent if device was not configured via the command
	  line, or if the parameter name (ioportmmio) doesn't match
	  the device setting
 Should never get here 
 CONFIG_FW_CFG_SYSFS_CMDLINE 
 create sysfirmwareqemu_fw_cfg top level directory 
 clean up sysfirmwareqemu_fw_cfg 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversfirmwarememmap.c
   Copyright (C) 2008 SUSE LINUX Products GmbH
   by Bernhard Walle <bernhard.walle@gmx.de>
  Data types ------------------------------------------------------------------
  Firmware map entry. Because firmware memory maps are flat and not
  hierarchical, it's ok to organise them in a linked list. No parent
  information is necessary as for the resource tree.
	
	  start and end must be u64 rather than resource_size_t, because e820
	  resources can lie at addresses above 4G.
 start of the memory range 
 end of the memory range (incl.) 
 type of the memory range 
 entry for the linked list 
 kobject for each entry 
  Forward declarations --------------------------------------------------------
  Static data -----------------------------------------------------------------
  These are default attributes that are added for every memmap entry.
 Firmware memory map entries. 
  For memory hotplug, there is no way to free memory map entries allocated
  by boot mem after the system is up. So when we hot-remove memory whose
  map entry is allocated by bootmem, we need to remember the storage and
  reuse it when the memory is hot-added again.
		
		  Remember the storage allocated by bootmem, and reuse it when
		  the memory is hot-added again. The entry will be added to
		  map_entries_bootmem here, and deleted from &map_entries in
		  firmware_map_remove_entry().
  Registration functions ------------------------------------------------------
  firmware_map_add_entry() - Does the real work to add a firmware memmap entry.
  @start: Start of the memory range.
  @end:   End of the memory range (exclusive).
  @type:  Type of the memory range.
  @entry: Pre-allocated (either kmalloc() or bootmem allocator), uninitialised
          entry.
  Common implementation of firmware_map_add() and firmware_map_add_early()
  which expects a pre-allocated struct firmware_map_entry.
  Return: 0 always
  firmware_map_remove_entry() - Does the real work to remove a firmware
  memmap entry.
  @entry: removed entry.
  The caller must hold map_entries_lock, and release it properly.
  Add memmap entry on sysfs
  Remove memmap entry on sysfs
  firmware_map_find_entry_in_list() - Search memmap entry in a given list.
  @start: Start of the memory range.
  @end:   End of the memory range (exclusive).
  @type:  Type of the memory range.
  @list:  In which to find the entry.
  This function is to find the memmap entey of a given memory range in a
  given list. The caller must hold map_entries_lock, and must not release
  the lock until the processing of the returned entry has completed.
  Return: Pointer to the entry to be found on success, or NULL on failure.
  firmware_map_find_entry() - Search memmap entry in map_entries.
  @start: Start of the memory range.
  @end:   End of the memory range (exclusive).
  @type:  Type of the memory range.
  This function is to find the memmap entey of a given memory range.
  The caller must hold map_entries_lock, and must not release the lock
  until the processing of the returned entry has completed.
  Return: Pointer to the entry to be found on success, or NULL on failure.
  firmware_map_find_entry_bootmem() - Search memmap entry in map_entries_bootmem.
  @start: Start of the memory range.
  @end:   End of the memory range (exclusive).
  @type:  Type of the memory range.
  This function is similar to firmware_map_find_entry except that it find the
  given entry in map_entries_bootmem.
  Return: Pointer to the entry to be found on success, or NULL on failure.
  firmware_map_add_hotplug() - Adds a firmware mapping entry when we do
  memory hotplug.
  @start: Start of the memory range.
  @end:   End of the memory range (exclusive)
  @type:  Type of the memory range.
  Adds a firmware mapping entry. This function is for memory hotplug, it is
  similar to function firmware_map_add_early(). The only difference is that
  it will create the syfs entry dynamically.
  Return: 0 on success, or -ENOMEM if no memory could be allocated.
 Reuse storage allocated by bootmem. 
 create the memmap entry 
  firmware_map_add_early() - Adds a firmware mapping entry.
  @start: Start of the memory range.
  @end:   End of the memory range.
  @type:  Type of the memory range.
  Adds a firmware mapping entry. This function uses the bootmem allocator
  for memory allocation.
  That function must be called before late_initcall.
  Return: 0 on success, or -ENOMEM if no memory could be allocated.
  firmware_map_remove() - remove a firmware mapping entry
  @start: Start of the memory range.
  @end:   End of the memory range.
  @type:  Type of the memory range.
  removes a firmware mapping entry.
  Return: 0 on success, or -EINVAL if no entry.
 remove the memmap entry 
  Sysfs functions -------------------------------------------------------------
  Initialises stuff and adds the entries in the map_entries list to
  sysfs. Important is that firmware_map_add() and firmware_map_add_early()
  must be called before late_initcall. That's just because that function
  is called as late_initcall() function, which means that if you call
  firmware_map_add() or firmware_map_add_early() afterwards, the entries
  are not added to sysfs.
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2010,2015,2019 The Linux Foundation. All rights reserved.
  Copyright (C) 2015 Linaro Ltd.
	
	  Device isn't required as there is only one argument - no device
	  needed to dma_map_single to secure world
	
	  Some SC7180 firmwares didn't implement the
	  QCOM_SCM_INFO_IS_CALL_AVAIL call, so we fallback to forcing ARM_64
	  calling conventions on these firmwares. Luckily we don't make any
	  early calls into the firmware on these SoCs so the device pointer
	  will be valid here to check if the compatible matches.
  qcom_scm_call() - Invoke a syscall in the secure world
  @dev:	device
  @svc_id:	service identifier
  @cmd_id:	command identifier
  @desc:	Descriptor structure containing arguments and return values
  Sends a command to the SCM and waits for the command to finish processing.
  This should only be called in pre-emptible context.
  qcom_scm_call_atomic() - atomic variation of qcom_scm_call()
  @dev:	device
  @svc_id:	service identifier
  @cmd_id:	command identifier
  @desc:	Descriptor structure containing arguments and return values
  @res:	Structure containing results from SMCHVC call
  Sends a command to the SCM and waits for the command to finish processing.
  This can be called in atomic context.
  qcom_scm_set_warm_boot_addr() - Set the warm boot address for cpus
  @entry: Entry point function for the cpus
  @cpus: The cpumask of cpus that will use the entry point
  Set the Linux entry point for the SCM to transfer control to when coming
  out of a power down. CPU power down may be executed on cpuidle or hotplug.
	
	  Reassign only if we are switching from hotplug entry point
	  to cpuidle entry point or vice versa.
 No change in entry function 
  qcom_scm_set_cold_boot_addr() - Set the cold boot address for cpus
  @entry: Entry point function for the cpus
  @cpus: The cpumask of cpus that will use the entry point
  Set the cold boot address of the cpus. Any cpu outside the supported
  range would be removed from the cpu present mask.
  qcom_scm_cpu_power_down() - Power down the cpu
  @flags - Flags to flush cache
  This is an end point to power down cpu. If there was a pending interrupt,
  the control would return from this function, otherwise, the cpu jumps to the
  warm boot entry point set for this cpu upon reset.
  qcom_scm_pas_init_image() - Initialize peripheral authentication service
 			       state machine for a given peripheral, using the
 			       metadata
  @peripheral: peripheral id
  @metadata:	pointer to memory containing ELF header, program header table
 		and optional blob of data used for authenticating the metadata
 		and the rest of the firmware
  @size:	size of the metadata
  Returns 0 on success.
	
	  During the scm call memory protection will be enabled for the meta
	  data blob, so make sure it's physically contiguous, 4K aligned and
	  non-cachable to avoid XPU violations.
  qcom_scm_pas_mem_setup() - Prepare the memory related to a given peripheral
 			      for firmware loading
  @peripheral:	peripheral id
  @addr:	start address of memory area to prepare
  @size:	size of the memory area to prepare
  Returns 0 on success.
  qcom_scm_pas_auth_and_reset() - Authenticate the given peripheral firmware
 				   and reset the remote processor
  @peripheral:	peripheral id
  Return 0 on success.
  qcom_scm_pas_shutdown() - Shut down the remote processor
  @peripheral: peripheral id
  Returns 0 on success.
  qcom_scm_pas_supported() - Check if the peripheral authentication service is
 			      available for the given peripherial
  @peripheral:	peripheral id
  Returns true if PAS is supported for this peripheral, otherwise false.
  qcom_scm_restore_sec_cfg_available() - Check if secure environment
  supports restore security config interface.
  Return true if restore-cfg interface is supported, false if not.
 the pg table has been initialized already, ignore the error 
  qcom_scm_assign_mem() - Make a secure call to reassign memory ownership
  @mem_addr: mem region whose ownership need to be reassigned
  @mem_sz:   size of the region.
  @srcvm:    vmid for current set of owners, each set bit in
             flag indicate a unique owner
  @newvm:    array having new owners and corresponding permission
             flags
  @dest_cnt: number of owners in next set.
  Return negative errno on failure or 0 on success with @srcvm updated.
 Fill source vmid detail 
 Fill details of mem buff to map 
 Fill details of next vmid detail 
  qcom_scm_ocmem_lock_available() - is OCMEM lockunlock interface available
  qcom_scm_ocmem_lock() - call OCMEM lock interface to assign an OCMEM
  region to the specified initiator
  @id:     tz initiator id
  @offset: OCMEM offset
  @size:   OCMEM size
  @mode:   access mode (WIDENARROW)
  qcom_scm_ocmem_unlock() - call OCMEM unlock interface to release an OCMEM
  region from the specified initiator
  @id:     tz initiator id
  @offset: OCMEM offset
  @size:   OCMEM size
  qcom_scm_ice_available() - Is the ICE key programming interface available?
  Return: true iff the SCM calls wrapped by qcom_scm_ice_invalidate_key() and
 	   qcom_scm_ice_set_key() are available.
  qcom_scm_ice_invalidate_key() - Invalidate an inline encryption key
  @index: the keyslot to invalidate
  The UFSHCI and eMMC standards define a standard way to do this, but it
  doesn't work on these SoCs; only this SCM call does.
  It is assumed that the SoC has only one ICE instance being used, as this SCM
  call doesn't specify which ICE instance the keyslot belongs to.
  Return: 0 on success; -errno on failure.
  qcom_scm_ice_set_key() - Set an inline encryption key
  @index: the keyslot into which to set the key
  @key: the key to program
  @key_size: the size of the key in bytes
  @cipher: the encryption algorithm the key is for
  @data_unit_size: the encryption data unit size, i.e. the size of each
 		    individual plaintext and ciphertext.  Given in 512-byte
 		    units, e.g. 1 = 512 bytes, 8 = 4096 bytes, etc.
  Program a key into a keyslot of Qualcomm ICE (Inline Crypto Engine), where it
  can then be used to encryptdecrypt UFS or eMMC IO requests inline.
  The UFSHCI and eMMC standards define a standard way to do this, but it
  doesn't work on these SoCs; only this SCM call does.
  It is assumed that the SoC has only one ICE instance being used, as this SCM
  call doesn't specify which ICE instance the keyslot belongs to.
  Return: 0 on success; -errno on failure.
	
	  'key' may point to vmalloc()'ed memory, but we need to pass a
	  physical address that's been properly flushed.  The sanctioned way to
	  do this is by using the DMA API.  But as is best practice for crypto
	  keys, we also must wipe the key after use.  This makes kmemdup() +
	  dma_map_single() not clearly correct, since the DMA API can use
	  bounce buffers.  Instead, just use dma_alloc_coherent().  Programming
	  keys is normally rare and thus not performance-critical.
  qcom_scm_hdcp_available() - Check if secure environment supports HDCP.
  Return true if HDCP is supported, false if not.
  qcom_scm_hdcp_req() - Send HDCP request.
  @req: HDCP request array
  @req_cnt: HDCP request array count
  @resp: response buffer passed to SCM
  Write HDCP register(s) through SCM.
  qcom_scm_is_available() - Checks if SCM is available
 vote for max clk rate for highest performance 
	
	  If requested enable "download mode", from this point on warmboot
	  will cause the the boot stages to enter download mode, unless
	  disabled below by a clean shutdownreboot.
 Clean shutdown, disable download mode to allow normal restart 
 FIXME: This should have .data = (void ) SCM_HAS_CORE_CLK 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2015,2019 The Linux Foundation. All rights reserved.
  struct arm_smccc_args
  @args:	The array of values used in registers in smc instruction
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2010,2015,2019 The Linux Foundation. All rights reserved.
  Copyright (C) 2015 Linaro Ltd.
  struct arm_smccc_args
  @args:	The array of values used in registers in smc instruction
  struct scm_legacy_command - one SCM command buffer
  @len: total available memory for command and response
  @buf_offset: start of command buffer
  @resp_hdr_offset: start of response buffer
  @id: command to be executed
  @buf: buffer returned from scm_legacy_get_command_buffer()
  An SCM command is laid out in memory as follows:
 	------------------- <--- struct scm_legacy_command
 	| command header  |
 	------------------- <--- scm_legacy_get_command_buffer()
 	| command buffer  |
 	------------------- <--- struct scm_legacy_response and
 	| response header |      scm_legacy_command_to_response()
 	------------------- <--- scm_legacy_get_response_buffer()
 	| response buffer |
 	-------------------
  There can be arbitrary padding between the headers and buffers so
  you should always use the appropriate scm_legacy_get__buffer() routines
  to access the buffers in a safe manner.
  struct scm_legacy_response - one SCM response buffer
  @len: total available memory for response
  @buf_offset: start of response data relative to start of scm_legacy_response
  @is_complete: indicates if the command has finished processing
  scm_legacy_command_to_response() - Get a pointer to a scm_legacy_response
  @cmd: command
  Returns a pointer to a response for a command.
  scm_legacy_get_command_buffer() - Get a pointer to a command buffer
  @cmd: command
  Returns a pointer to the command buffer of a command.
  scm_legacy_get_response_buffer() - Get a pointer to a response buffer
  @rsp: response
  Returns a pointer to a response buffer of a response.
  scm_legacy_call() - Sends a command to the SCM and waits for the command to
  finish processing.
  A note on cache maintenance:
  Note that any buffers that are expected to be accessed by the secure world
  must be flushed before invoking qcom_scm_call and invalidated in the cache
  immediately after qcom_scm_call returns. Cache maintenance on the command
  and response buffers is taken care of by qcom_scm_call; however, callers are
  responsible for any other cached buffers passed over to the secure world.
  scm_legacy_call_atomic() - Send an atomic SCM command with up to 5 arguments
  and 3 return values
  @desc: SCM call descriptor containing arguments
  @res:  SCM call return values
  This shall only be used with commands that are guaranteed to be
  uninterruptable, atomic and SMP safe.
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversfirmwareedd.c
   Copyright (C) 2002, 2003, 2004 Dell Inc.
   by Matt Domsch <Matt_Domsch@dell.com>
   disk signature by Matt Domsch, Andrew Wilks, and Sandeep K. Shandilya
   legacy CHS by Patrick J. LoPresti <patl@users.sourceforge.net>
  BIOS Enhanced Disk Drive Services (EDD)
  conformant to T13 Committee www.t13.org
    projects 1572D, 1484D, 1386D, 1226DT
  This code takes information provided by BIOS EDD calls
  fn41 - Check Extensions Present and
  fn48 - Get Device Parameters with EDD extensions
  made in setup.S, copied to safe structures in setup.c,
  and presents it in sysfs.
  Please see http:linux.dell.comeddresults.html for
  the list of BIOSs which have been reported to implement EDD.
 forward declarations 
  edd_show_raw_data() - copies raw data to buffer for userspace to parse
  @edev: target edd_device
  @buf: output buffer
  Returns: number of bytes written, or -EINVAL on failure
 In case of buggy BIOSs 
  Some device instances may not have all the above attributes,
  or the attribute values may be meaningless (i.e. if
  the device is < EDD 3.0, it won't have host_bus and interface
  information), so don't bother making files for them.  Likewise
  if the default_{cylinders,heads,sectors_per_track} values
  are zero, the BIOS doesn't provide sane values, don't bother
  creating files for them either.
 We support only T13 spec 
 These are default attributes that are added for every edd
  device discovered.  There are none.
 These attributes are conditional and only added for some devices. 
 	edd_release - free edd structure
 	@kobj:	kobject of edd structure
 	This is called when the refcount of the edd structure
 	reaches 0. This should happen right after we unregister,
 	but just in case, we use the release callback anyway.
  edd_dev_is_type() - is this EDD device a 'type' device?
  @edev: target edd_device
  @type: a host bus or interface identifier string per the EDD spec
  Returns 1 (TRUE) if it is a 'type' device, 0 otherwise.
  edd_get_pci_dev() - finds pci_dev that matches edev
  @edev: edd_device
  Returns pci_dev if found, or NULL
  edd_init() - creates sysfs tree of EDD data
 SPDX-License-Identifier: GPL-2.0-only
   Copyright 2007-2010 Red Hat, Inc.
   by Peter Jones <pjones@redhat.com>
   Copyright 2008 IBM, Inc.
   by Konrad Rzeszutek <konradr@linux.vnet.ibm.com>
   Copyright 2008
   by Konrad Rzeszutek <ketuzsezr@darnok.org>
  This code exposes the iSCSI Boot Format Table to userland via sysfs.
  Changelog:
   06 Jan 2010 - Peter Jones <pjones@redhat.com>
     New changelog entries are in the git log from now on.  Not here.
   14 Mar 2008 - Konrad Rzeszutek <ketuzsezr@darnok.org>
     Updated comments and copyrights. (v0.4.9)
   11 Feb 2008 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>
     Converted to using ibft_addr. (v0.4.8)
    8 Feb 2008 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>
     Combined two functions in one: reserve_ibft_region. (v0.4.7)
   30 Jan 2008 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>
    Added logic to handle IPv6 addresses. (v0.4.6)
   25 Jan 2008 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>
    Added logic to handle badly not-to-spec iBFT. (v0.4.5)
    4 Jan 2008 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>
    Added __init to function declarations. (v0.4.4)
   21 Dec 2007 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>
    Updated kobject registration, combined unregister functions in one
    and code and style cleanup. (v0.4.3)
    5 Dec 2007 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>
    Added end-markers to enums and re-organized kobject registration. (v0.4.2)
    4 Dec 2007 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>
    Created 'device' sysfs link to the NIC and style cleanup. (v0.4.1)
   28 Nov 2007 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>
    Added sysfs-ibft documentation, moved 'find_ibft' function to
    in its own file and added text attributes for every struct field.  (v0.4)
   21 Nov 2007 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>
    Added text attributes emulating OpenFirmware procdevice-tree naming.
    Removed binary sysfs interface (v0.3)
   29 Aug 2007 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>
    Added functionality in setup.c to reserve iBFT region. (v0.2)
   27 Aug 2007 - Konrad Rzeszutek <konradr@linux.vnet.ibm.com>
    First version exposing iBFT data via a binary sysfs. (v0.1)
  The kobject different types and its names.
 We don't support. 
 Should show up only once and is not exported. 
 We don't support. 
  The kobject and attribute structures.
 fully null address 
 IPv4-mapped IPv6 ::ffff:0.0.0.0 
  Helper functions to parse data properly.
		
		  IPV4
		
		  IPv6
  Helper function to verify the IBFT header.
   Routines for parsing the iBFT data to be human readable.
 Sanity checking of iBFT. 
  Helper routiners to check to determine if the entry is valid
  in the proper iBFT structure.
  Helper function for ibft_register_kobjects.
 Fields which we don't support. Ignore them 
 Skip adding this kobject, but exit with non-fatal error. 
		
		 We don't search for the device in other domains than
		 zero. This is because on x86 platforms the BIOS
		 executes only devices which are in domain 0. Furthermore, the
		 iBFT spec doesn't have a domain id field :-(
  Scan the IBFT table structure for the NIC and Target fields. When
  found add them on the passed-in list. We do not support the other
  fields at this point, so they are skipped.
 iBFT table safety checking 
for ibft_unregister
	
	  One spec says "IBFT", the other says "iBFT". We have to check
	  for both.
 Broadcom iSCSI Offload 
  ibft_init() - creates sysfs tree entries for the iBFT data.
	
	   As on UEFI systems the setup_arch()reserve_ibft_region()
	   is called before ACPI tables are parsed and it only does
	   legacy finding.
 Scan the IBFT for data and register the kobjects. 
 SPDX-License-Identifier: GPL-2.0
 Copyright (C) 2017 Arm Ltd.
  The call to use to reach the firmware.
 entry point from firmware to arch asm code 
 These three are protected by the sdei_list_lock 
 This pointer is handed to firmware as the event argument. 
 Shared events 
 CPU private events 
 Take the mutex for any API call or modification. Take the mutex first. 
 and then hold this when modifying the list 
 Private events are registeredenabled via IPI passing one of these 
		
		  !sdei_firmware_call means we failed to probe or called
		  sdei_mark_interface_broken(). -EIO is not an error returned
		  by sdei_to_linux_errno() and is used to suppress messages
		  from this driver.
 Called directly by the hotplug callbacks 
 Called directly by the hotplug callbacks 
  unregister events, but don't destroy them as they are re-registered by
  sdei_reregister_shared().
 Called directly by the hotplug callbacks 
 un-register private events 
 re-registerenable private events 
 When entering idle, maskunmask events for this cpu 
  We need all events to be reregistered when we resume from hibernate.
  The sequence is freeze->thaw. Reboot. freeze->restore. We unregister
  events during freeze, then re-register and re-enable them during thaw
  and restore.
 unregister private events 
 re-register shared events 
  Mask all CPUs and unregister all events on panic, reboot or kexec.
	
	  We are going to reset the interface, after this there is no point
	  doing work when we take CPUs offline.
		
		  Event 0 is reserved by the specification for
		  SDEI_EVENT_SIGNAL.
	
	  The event may be running on another CPU. Disable it
	  to stop new events, then try to unregister a few times.
 Not supported due to hardware or boot configuration 
  On an ACPI system SDEI needs to be ready before HEST:GHES tries to register
  its events. ACPI is initialised from a subsys_initcall(), GHES is initialised
  by device_initcall(). We want to be called in the middle.
 SPDX-License-Identifier: GPL-2.0
  Texas Instruments System Control Interface Protocol Driver
  Copyright (C) 2015-2016 Texas Instruments Incorporated - https:www.ti.com
 	Nishanth Menon
 List of all TI SCI devices active in system 
 Protection for the entire list 
  struct ti_sci_xfer - Structure representing a message flow
  @tx_message:	Transmit message
  @rx_len:	Receive message length
  @xfer_buf:	Preallocated buffer to store receive message
 		Since we work with request-ACK protocol, we can
 		reuse the same buffer for the rx path as we
 		use for the tx path.
  @done:	completion event
  struct ti_sci_xfers_info - Structure to manage transfer information
  @sem_xfer_count:	Counting Semaphore for managing max simultaneous
 			Messages.
  @xfer_block:		Preallocated Message array
  @xfer_alloc_table:	Bitmap table for allocated messages.
 			Index of this bitmap table is also used for message
 			sequence identifier.
  @xfer_lock:		Protection for message allocation
 protect transfer allocation 
  struct ti_sci_desc - Description of SoC integration
  @default_host_id:	Host identifier representing the compute entity
  @max_rx_timeout_ms:	Timeout for communication with SoC (in Milliseconds)
  @max_msgs: Maximum number of messages that can be pending
 		  simultaneously in the system
  @max_msg_size: Maximum size of data per message that can be handled.
  struct ti_sci_info - Structure representing a TI SCI instance
  @dev:	Device pointer
  @desc:	SoC description for this instance
  @nb:	Reboot Notifier block
  @d:		Debugfs file entry
  @debug_region: Memory region where the debug message are available
  @debug_region_size: Debug region size
  @debug_buffer: Buffer allocated to copy debug messages.
  @handle:	Instance of TI SCI handle to send to clients.
  @cl:		Mailbox Client
  @chan_tx:	Transmit mailbox channel
  @chan_rx:	Receive mailbox channel
  @minfo:	Message info
  @node:	list head
  @host_id:	Host ID
  @users:	Number of users of this instance
 protected by ti_sci_list_mutex 
  ti_sci_debug_show() - Helper to dump the debug log
  @s:	sequence file pointer
  @unused:	unused.
  Return: 0
	
	  We don't trust firmware to leave NULL terminated last byte (hence
	  we have allocated 1 extra 0 byte). Since we cannot guarantee any
	  specific data format for debug messages, We just present the data
	  in the buffer as is - we expect the messages to be self explanatory.
 Provide the log file operations interface
  ti_sci_debugfs_create() - Create log debug file
  @pdev:	platform device pointer
  @info:	Pointer to SCI entity information
  Return: 0 if all went fine, else corresponding error.
 Debug region is optional 
 Setup NULL termination 
  ti_sci_debugfs_destroy() - clean up log debug file
  @pdev:	platform device pointer
  @info:	Pointer to SCI entity information
 CONFIG_DEBUG_FS 
 CONFIG_DEBUG_FS 
  ti_sci_dump_header_dbg() - Helper to dump a message header.
  @dev:	Device pointer corresponding to the SCI entity
  @hdr:	pointer to header.
  ti_sci_rx_callback() - mailbox client callback for receive messages
  @cl:	client pointer
  @m:	mailbox message
  Processes one received message to appropriate transfer information and
  signals completion of the transfer.
  NOTE: This function will be invoked in IRQ context, hence should be
  as optimal as possible.
	
	  Are we even expecting this?
	  NOTE: barriers were implicit in locks used for modifying the bitmap
 Is the message of valid length? 
 Take a copy to the rx buffer.. 
  ti_sci_get_one_xfer() - Allocate one message
  @info:	Pointer to SCI entity information
  @msg_type:	Message type
  @msg_flags:	Flag to set for the message
  @tx_message_size: transmit message size
  @rx_message_size: receive message size
  Helper function which is used by various command functions that are
  exposed to clients of this driver for allocating a message traffic event.
  This function can sleep depending on pending requests already in the system
  for the SCI entity. Further, this also holds a spinlock to maintain integrity
  of internal data structures.
  Return: 0 if all went fine, else corresponding error.
 Ensure we have sane transfer sizes 
	
	  Ensure we have only controlled number of pending messages.
	  Ideally, we might just have to wait a single message, be
	  conservative and wait 5 times that..
 Keep the locked section as small as possible 
	
	  We already ensured in probe that we can have max messages that can
	  fit in  hdr.seq - NOTE: this improves access latencies
	  to predictable O(1) access, BUT, it opens us to risk if
	  remote misbehaves with corrupted message sequence responses.
	  If that happens, we are going to be messed up anyways..
  ti_sci_put_one_xfer() - Release a message
  @minfo:	transfer info pointer
  @xfer:	message that was reserved by ti_sci_get_one_xfer
  This holds a spinlock to maintain integrity of internal data structures.
	
	  Keep the locked section as small as possible
	  NOTE: we might escape with smp_mb and no lock here..
	  but just be conservative and symmetric.
 Increment the count for the next user to get through 
  ti_sci_do_xfer() - Do one transfer
  @info:	Pointer to SCI entity information
  @xfer:	Transfer to initiate and wait for response
  Return: -ETIMEDOUT in case of no response, if transmit error,
 	   return corresponding error, else if all goes well,
 	   return 0.
 And we wait for the response. 
	
	  NOTE: we might prefer not to need the mailbox ticker to manage the
	  transfer queueing since the protocol layer queues things by itself.
	  Unfortunately, we have to kick the mailbox framework after we have
	  received our message.
  ti_sci_cmd_get_revision() - command to get the revision of the SCI entity
  @info:	Pointer to SCI entity information
  Updates the SCI information in the internal data structure.
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_is_response_ack() - Generic ACKNACK message checkup
  @r:	pointer to response buffer
  Return: true if the response was an ACK, else returns false.
  ti_sci_set_device_state() - Set device state helper
  @handle:	pointer to TI SCI handle
  @id:		Device identifier
  @flags:	flags to setup for the device
  @state:	State to move the device to
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_get_device_state() - Get device state helper
  @handle:	Handle to the device
  @id:		Device Identifier
  @clcnt:	Pointer to Context Loss Count
  @resets:	pointer to resets
  @p_state:	pointer to p_state
  @c_state:	pointer to c_state
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_get_device() - command to request for device managed by TISCI
 			     that can be shared with other hosts.
  @handle:	Pointer to TISCI handle as retrieved by ti_sci_get_handle
  @id:		Device Identifier
  Request for the device - NOTE: the client MUST maintain integrity of
  usage count by balancing get_device with put_device. No refcounting is
  managed by driver for that purpose.
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_get_device_exclusive() - command to request for device managed by
 				       TISCI that is exclusively owned by the
 				       requesting host.
  @handle:	Pointer to TISCI handle as retrieved by ti_sci_get_handle
  @id:		Device Identifier
  Request for the device - NOTE: the client MUST maintain integrity of
  usage count by balancing get_device with put_device. No refcounting is
  managed by driver for that purpose.
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_idle_device() - Command to idle a device managed by TISCI
  @handle:	Pointer to TISCI handle as retrieved by ti_sci_get_handle
  @id:		Device Identifier
  Request for the device - NOTE: the client MUST maintain integrity of
  usage count by balancing get_device with put_device. No refcounting is
  managed by driver for that purpose.
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_idle_device_exclusive() - Command to idle a device managed by
 					TISCI that is exclusively owned by
 					requesting host.
  @handle:	Pointer to TISCI handle as retrieved by ti_sci_get_handle
  @id:		Device Identifier
  Request for the device - NOTE: the client MUST maintain integrity of
  usage count by balancing get_device with put_device. No refcounting is
  managed by driver for that purpose.
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_put_device() - command to release a device managed by TISCI
  @handle:	Pointer to TISCI handle as retrieved by ti_sci_get_handle
  @id:		Device Identifier
  Request for the device - NOTE: the client MUST maintain integrity of
  usage count by balancing get_device with put_device. No refcounting is
  managed by driver for that purpose.
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_dev_is_valid() - Is the device valid
  @handle:	Pointer to TISCI handle as retrieved by ti_sci_get_handle
  @id:		Device Identifier
  Return: 0 if all went fine and the device ID is valid, else return
  appropriate error.
 check the device state which will also tell us if the ID is valid 
  ti_sci_cmd_dev_get_clcnt() - Get context loss counter
  @handle:	Pointer to TISCI handle
  @id:		Device Identifier
  @count:	Pointer to Context Loss counter to populate
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_dev_is_idle() - Check if the device is requested to be idle
  @handle:	Pointer to TISCI handle
  @id:		Device Identifier
  @r_state:	true if requested to be idle
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_dev_is_stop() - Check if the device is requested to be stopped
  @handle:	Pointer to TISCI handle
  @id:		Device Identifier
  @r_state:	true if requested to be stopped
  @curr_state:	true if currently stopped.
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_dev_is_on() - Check if the device is requested to be ON
  @handle:	Pointer to TISCI handle
  @id:		Device Identifier
  @r_state:	true if requested to be ON
  @curr_state:	true if currently ON and active
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_dev_is_trans() - Check if the device is currently transitioning
  @handle:	Pointer to TISCI handle
  @id:		Device Identifier
  @curr_state:	true if currently transitioning.
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_set_device_resets() - command to set resets for device managed
 				    by TISCI
  @handle:	Pointer to TISCI handle as retrieved by ti_sci_get_handle
  @id:		Device Identifier
  @reset_state: Device specific reset bit field
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_get_device_resets() - Get reset state for device managed
 				    by TISCI
  @handle:		Pointer to TISCI handle
  @id:			Device Identifier
  @reset_state:	Pointer to reset state to populate
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_set_clock_state() - Set clock state helper
  @handle:	pointer to TI SCI handle
  @dev_id:	Device identifier this request is for
  @clk_id:	Clock identifier for the device for this request.
 		Each device has it's own set of clock inputs. This indexes
 		which clock input to modify.
  @flags:	Header flags as needed
  @state:	State to request for the clock.
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_get_clock_state() - Get clock state helper
  @handle:	pointer to TI SCI handle
  @dev_id:	Device identifier this request is for
  @clk_id:	Clock identifier for the device for this request.
 		Each device has it's own set of clock inputs. This indexes
 		which clock input to modify.
  @programmed_state:	State requested for clock to move to
  @current_state:	State that the clock is currently in
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_get_clock() - Get control of a clock from TI SCI
  @handle:	pointer to TI SCI handle
  @dev_id:	Device identifier this request is for
  @clk_id:	Clock identifier for the device for this request.
 		Each device has it's own set of clock inputs. This indexes
 		which clock input to modify.
  @needs_ssc: 'true' if Spread Spectrum clock is desired, else 'false'
  @can_change_freq: 'true' if frequency change is desired, else 'false'
  @enable_input_term: 'true' if input termination is desired, else 'false'
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_idle_clock() - Idle a clock which is in our control
  @handle:	pointer to TI SCI handle
  @dev_id:	Device identifier this request is for
  @clk_id:	Clock identifier for the device for this request.
 		Each device has it's own set of clock inputs. This indexes
 		which clock input to modify.
  NOTE: This clock must have been requested by get_clock previously.
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_put_clock() - Release a clock from our control back to TISCI
  @handle:	pointer to TI SCI handle
  @dev_id:	Device identifier this request is for
  @clk_id:	Clock identifier for the device for this request.
 		Each device has it's own set of clock inputs. This indexes
 		which clock input to modify.
  NOTE: This clock must have been requested by get_clock previously.
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_clk_is_auto() - Is the clock being auto managed
  @handle:	pointer to TI SCI handle
  @dev_id:	Device identifier this request is for
  @clk_id:	Clock identifier for the device for this request.
 		Each device has it's own set of clock inputs. This indexes
 		which clock input to modify.
  @req_state: state indicating if the clock is auto managed
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_clk_is_on() - Is the clock ON
  @handle:	pointer to TI SCI handle
  @dev_id:	Device identifier this request is for
  @clk_id:	Clock identifier for the device for this request.
 		Each device has it's own set of clock inputs. This indexes
 		which clock input to modify.
  @req_state: state indicating if the clock is managed by us and enabled
  @curr_state: state indicating if the clock is ready for operation
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_clk_is_off() - Is the clock OFF
  @handle:	pointer to TI SCI handle
  @dev_id:	Device identifier this request is for
  @clk_id:	Clock identifier for the device for this request.
 		Each device has it's own set of clock inputs. This indexes
 		which clock input to modify.
  @req_state: state indicating if the clock is managed by us and disabled
  @curr_state: state indicating if the clock is NOT ready for operation
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_clk_set_parent() - Set the clock source of a specific device clock
  @handle:	pointer to TI SCI handle
  @dev_id:	Device identifier this request is for
  @clk_id:	Clock identifier for the device for this request.
 		Each device has it's own set of clock inputs. This indexes
 		which clock input to modify.
  @parent_id:	Parent clock identifier to set
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_clk_get_parent() - Get current parent clock source
  @handle:	pointer to TI SCI handle
  @dev_id:	Device identifier this request is for
  @clk_id:	Clock identifier for the device for this request.
 		Each device has it's own set of clock inputs. This indexes
 		which clock input to modify.
  @parent_id:	Current clock parent
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_clk_get_num_parents() - Get num parents of the current clk source
  @handle:	pointer to TI SCI handle
  @dev_id:	Device identifier this request is for
  @clk_id:	Clock identifier for the device for this request.
 		Each device has it's own set of clock inputs. This indexes
 		which clock input to modify.
  @num_parents: Returns he number of parents to the current clock.
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_clk_get_match_freq() - Find a good match for frequency
  @handle:	pointer to TI SCI handle
  @dev_id:	Device identifier this request is for
  @clk_id:	Clock identifier for the device for this request.
 		Each device has it's own set of clock inputs. This indexes
 		which clock input to modify.
  @min_freq:	The minimum allowable frequency in Hz. This is the minimum
 		allowable programmed frequency and does not account for clock
 		tolerances and jitter.
  @target_freq: The target clock frequency in Hz. A frequency will be
 		processed as close to this target frequency as possible.
  @max_freq:	The maximum allowable frequency in Hz. This is the maximum
 		allowable programmed frequency and does not account for clock
 		tolerances and jitter.
  @match_freq:	Frequency match in Hz response.
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_clk_set_freq() - Set a frequency for clock
  @handle:	pointer to TI SCI handle
  @dev_id:	Device identifier this request is for
  @clk_id:	Clock identifier for the device for this request.
 		Each device has it's own set of clock inputs. This indexes
 		which clock input to modify.
  @min_freq:	The minimum allowable frequency in Hz. This is the minimum
 		allowable programmed frequency and does not account for clock
 		tolerances and jitter.
  @target_freq: The target clock frequency in Hz. A frequency will be
 		processed as close to this target frequency as possible.
  @max_freq:	The maximum allowable frequency in Hz. This is the maximum
 		allowable programmed frequency and does not account for clock
 		tolerances and jitter.
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_clk_get_freq() - Get current frequency
  @handle:	pointer to TI SCI handle
  @dev_id:	Device identifier this request is for
  @clk_id:	Clock identifier for the device for this request.
 		Each device has it's own set of clock inputs. This indexes
 		which clock input to modify.
  @freq:	Currently frequency in Hz
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_get_resource_range - Helper to get a range of resources assigned
 			       to a host. Resource is uniquely identified by
 			       type and subtype.
  @handle:		Pointer to TISCI handle.
  @dev_id:		TISCI device ID.
  @subtype:		Resource assignment subtype that is being requested
 			from the given device.
  @s_host:		Host processor ID to which the resources are allocated
  @desc:		Pointer to ti_sci_resource_desc to be updated with the
 			resource range start index and number of resources
  Return: 0 if all went fine, else return appropriate error.
 Neither of the two resource range is valid 
  ti_sci_cmd_get_resource_range - Get a range of resources assigned to host
 				   that is same as ti sci interface host.
  @handle:		Pointer to TISCI handle.
  @dev_id:		TISCI device ID.
  @subtype:		Resource assignment subtype that is being requested
 			from the given device.
  @desc:		Pointer to ti_sci_resource_desc to be updated with the
 			resource range start index and number of resources
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_get_resource_range_from_shost - Get a range of resources
 					      assigned to a specified host.
  @handle:		Pointer to TISCI handle.
  @dev_id:		TISCI device ID.
  @subtype:		Resource assignment subtype that is being requested
 			from the given device.
  @s_host:		Host processor ID to which the resources are allocated
  @desc:		Pointer to ti_sci_resource_desc to be updated with the
 			resource range start index and number of resources
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_manage_irq() - Helper api to configurerelease the irq route between
 			 the requested source and destination
  @handle:		Pointer to TISCI handle.
  @valid_params:	Bit fields defining the validity of certain params
  @src_id:		Device ID of the IRQ source
  @src_index:		IRQ source index within the source device
  @dst_id:		Device ID of the IRQ destination
  @dst_host_irq:	IRQ number of the destination device
  @ia_id:		Device ID of the IA, if the IRQ flows through this IA
  @vint:		Virtual interrupt to be used within the IA
  @global_event:	Global event number to be used for the requesting event
  @vint_status_bit:	Virtual interrupt status bit to be used for the event
  @s_host:		Secondary host ID to which the irqevent is being
 			requested for.
  @type:		Request type irq set or release.
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_set_irq() - Helper api to configure the irq route between the
 		      requested source and destination
  @handle:		Pointer to TISCI handle.
  @valid_params:	Bit fields defining the validity of certain params
  @src_id:		Device ID of the IRQ source
  @src_index:		IRQ source index within the source device
  @dst_id:		Device ID of the IRQ destination
  @dst_host_irq:	IRQ number of the destination device
  @ia_id:		Device ID of the IA, if the IRQ flows through this IA
  @vint:		Virtual interrupt to be used within the IA
  @global_event:	Global event number to be used for the requesting event
  @vint_status_bit:	Virtual interrupt status bit to be used for the event
  @s_host:		Secondary host ID to which the irqevent is being
 			requested for.
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_free_irq() - Helper api to free the irq route between the
 			   requested source and destination
  @handle:		Pointer to TISCI handle.
  @valid_params:	Bit fields defining the validity of certain params
  @src_id:		Device ID of the IRQ source
  @src_index:		IRQ source index within the source device
  @dst_id:		Device ID of the IRQ destination
  @dst_host_irq:	IRQ number of the destination device
  @ia_id:		Device ID of the IA, if the IRQ flows through this IA
  @vint:		Virtual interrupt to be used within the IA
  @global_event:	Global event number to be used for the requesting event
  @vint_status_bit:	Virtual interrupt status bit to be used for the event
  @s_host:		Secondary host ID to which the irqevent is being
 			requested for.
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_set_irq() - Configure a host irq route between the requested
 			  source and destination.
  @handle:		Pointer to TISCI handle.
  @src_id:		Device ID of the IRQ source
  @src_index:		IRQ source index within the source device
  @dst_id:		Device ID of the IRQ destination
  @dst_host_irq:	IRQ number of the destination device
  @vint_irq:		Boolean specifying if this interrupt belongs to
 			Interrupt Aggregator.
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_set_event_map() - Configure an event based irq route between the
 				requested source and Interrupt Aggregator.
  @handle:		Pointer to TISCI handle.
  @src_id:		Device ID of the IRQ source
  @src_index:		IRQ source index within the source device
  @ia_id:		Device ID of the IA, if the IRQ flows through this IA
  @vint:		Virtual interrupt to be used within the IA
  @global_event:	Global event number to be used for the requesting event
  @vint_status_bit:	Virtual interrupt status bit to be used for the event
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_free_irq() - Free a host irq route between the between the
 			   requested source and destination.
  @handle:		Pointer to TISCI handle.
  @src_id:		Device ID of the IRQ source
  @src_index:		IRQ source index within the source device
  @dst_id:		Device ID of the IRQ destination
  @dst_host_irq:	IRQ number of the destination device
  @vint_irq:		Boolean specifying if this interrupt belongs to
 			Interrupt Aggregator.
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_free_event_map() - Free an event map between the requested source
 				 and Interrupt Aggregator.
  @handle:		Pointer to TISCI handle.
  @src_id:		Device ID of the IRQ source
  @src_index:		IRQ source index within the source device
  @ia_id:		Device ID of the IA, if the IRQ flows through this IA
  @vint:		Virtual interrupt to be used within the IA
  @global_event:	Global event number to be used for the requesting event
  @vint_status_bit:	Virtual interrupt status bit to be used for the event
  Return: 0 if all went fine, else return appropriate error.
  ti_sci_cmd_rm_ring_cfg() - Configure a NAVSS ring
  @handle:	Pointer to TI SCI handle.
  @params:	Pointer to ti_sci_msg_rm_ring_cfg ring config structure
  Return: 0 if all went well, else returns appropriate error value.
  See @ti_sci_msg_rm_ring_cfg and @ti_sci_msg_rm_ring_cfg_req for
  more info.
  ti_sci_cmd_rm_psil_pair() - Pair PSI-L source to destination thread
  @handle:	Pointer to TI SCI handle.
  @nav_id:	Device ID of Navigator Subsystem which should be used for
 		pairing
  @src_thread:	Source PSI-L thread ID
  @dst_thread: Destination PSI-L thread ID
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_rm_psil_unpair() - Unpair PSI-L source from destination thread
  @handle:	Pointer to TI SCI handle.
  @nav_id:	Device ID of Navigator Subsystem which should be used for
 		unpairing
  @src_thread:	Source PSI-L thread ID
  @dst_thread:	Destination PSI-L thread ID
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_rm_udmap_tx_ch_cfg() - Configure a UDMAP TX channel
  @handle:	Pointer to TI SCI handle.
  @params:	Pointer to ti_sci_msg_rm_udmap_tx_ch_cfg TX channel config
 		structure
  Return: 0 if all went well, else returns appropriate error value.
  See @ti_sci_msg_rm_udmap_tx_ch_cfg and @ti_sci_msg_rm_udmap_tx_ch_cfg_req for
  more info.
  ti_sci_cmd_rm_udmap_rx_ch_cfg() - Configure a UDMAP RX channel
  @handle:	Pointer to TI SCI handle.
  @params:	Pointer to ti_sci_msg_rm_udmap_rx_ch_cfg RX channel config
 		structure
  Return: 0 if all went well, else returns appropriate error value.
  See @ti_sci_msg_rm_udmap_rx_ch_cfg and @ti_sci_msg_rm_udmap_rx_ch_cfg_req for
  more info.
  ti_sci_cmd_rm_udmap_rx_flow_cfg() - Configure UDMAP RX FLOW
  @handle:	Pointer to TI SCI handle.
  @params:	Pointer to ti_sci_msg_rm_udmap_flow_cfg RX FLOW config
 		structure
  Return: 0 if all went well, else returns appropriate error value.
  See @ti_sci_msg_rm_udmap_flow_cfg and @ti_sci_msg_rm_udmap_flow_cfg_req for
  more info.
  ti_sci_cmd_proc_request() - Command to request a physical processor control
  @handle:	Pointer to TI SCI handle
  @proc_id:	Processor ID this request is for
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_proc_release() - Command to release a physical processor control
  @handle:	Pointer to TI SCI handle
  @proc_id:	Processor ID this request is for
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_proc_handover() - Command to handover a physical processor
 				control to a host in the processor's access
 				control list.
  @handle:	Pointer to TI SCI handle
  @proc_id:	Processor ID this request is for
  @host_id:	Host ID to get the control of the processor
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_proc_set_config() - Command to set the processor boot
 				    configuration flags
  @handle:		Pointer to TI SCI handle
  @proc_id:		Processor ID this request is for
  @config_flags_set:	Configuration flags to be set
  @config_flags_clear:	Configuration flags to be cleared.
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_proc_set_control() - Command to set the processor boot
 				     control flags
  @handle:			Pointer to TI SCI handle
  @proc_id:			Processor ID this request is for
  @control_flags_set:		Control flags to be set
  @control_flags_clear:	Control flags to be cleared
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_cmd_get_boot_status() - Command to get the processor boot status
  @handle:	Pointer to TI SCI handle
  @proc_id:	Processor ID this request is for
  Return: 0 if all went well, else returns appropriate error value.
  ti_sci_setup_ops() - Setup the operations structures
  @info:	pointer to TISCI pointer
  ti_sci_get_handle() - Get the TI SCI handle for a device
  @dev:	Pointer to device for which we want SCI handle
  NOTE: The function does not track individual clients of the framework
  and is expected to be maintained by caller of TI SCI protocol library.
  ti_sci_put_handle must be balanced with successful ti_sci_get_handle
  Return: pointer to handle if successful, else:
  -EPROBE_DEFER if the instance is not ready
  -ENODEV if the required node handler is missing
  -EINVAL if invalid conditions are encountered.
  ti_sci_put_handle() - Release the handle acquired by ti_sci_get_handle
  @handle:	Handle acquired by ti_sci_get_handle
  NOTE: The function does not track individual clients of the framework
  and is expected to be maintained by caller of TI SCI protocol library.
  ti_sci_put_handle must be balanced with successful ti_sci_get_handle
  Return: 0 is successfully released
  if an error pointer was passed, it returns the error value back,
  if null was passed, it returns -EINVAL;
  devm_ti_sci_get_handle() - Managed get handle
  @dev:	device for which we want SCI handle for.
  NOTE: This releases the handle once the device resources are
  no longer needed. MUST NOT BE released with ti_sci_put_handle.
  The function does not track individual clients of the framework
  and is expected to be maintained by caller of TI SCI protocol library.
  Return: 0 if all went fine, else corresponding error.
  ti_sci_get_by_phandle() - Get the TI SCI handle using DT phandle
  @np:		device node
  @property:	property name containing phandle on TISCI node
  NOTE: The function does not track individual clients of the framework
  and is expected to be maintained by caller of TI SCI protocol library.
  ti_sci_put_handle must be balanced with successful ti_sci_get_by_phandle
  Return: pointer to handle if successful, else:
  -EPROBE_DEFER if the instance is not ready
  -ENODEV if the required node handler is missing
  -EINVAL if invalid conditions are encountered.
  devm_ti_sci_get_by_phandle() - Managed get handle using phandle
  @dev:	Device pointer requesting TISCI handle
  @property:	property name containing phandle on TISCI node
  NOTE: This releases the handle once the device resources are
  no longer needed. MUST NOT BE released with ti_sci_put_handle.
  The function does not track individual clients of the framework
  and is expected to be maintained by caller of TI SCI protocol library.
  Return: 0 if all went fine, else corresponding error.
  ti_sci_get_free_resource() - Get a free resource from TISCI resource.
  @res:	Pointer to the TISCI resource
  Return: resource num if all went ok else TI_SCI_RESOURCE_NULL.
  ti_sci_release_resource() - Release a resource from TISCI resource.
  @res:	Pointer to the TISCI resource
  @id:		Resource id to be released.
  ti_sci_get_num_resources() - Get the number of resources in TISCI resource
  @res:	Pointer to the TISCI resource
  Return: Total number of available resources.
  devm_ti_sci_get_resource_sets() - Get a TISCI resources assigned to a device
  @handle:	TISCI handle
  @dev:	Device pointer to which the resource is assigned
  @dev_id:	TISCI device id to which the resource is assigned
  @sub_types:	Array of sub_types assigned corresponding to device
  @sets:	Number of sub_types
  Return: Pointer to ti_sci_resource if all went well else appropriate
 	   error pointer.
  devm_ti_sci_get_of_resource() - Get a TISCI resource assigned to a device
  @handle:	TISCI handle
  @dev:	Device pointer to which the resource is assigned
  @dev_id:	TISCI device id to which the resource is assigned
  @of_prop:	property name by which the resource are represented
  Return: Pointer to ti_sci_resource if all went well else appropriate
 	   error pointer.
  devm_ti_sci_get_resource() - Get a resource range assigned to the device
  @handle:	TISCI handle
  @dev:	Device pointer to which the resource is assigned
  @dev_id:	TISCI device id to which the resource is assigned
  @suub_type:	TISCI resource subytpe representing the resource.
  Return: Pointer to ti_sci_resource if all went well else appropriate
 	   error pointer.
 call fail OR pass, we should not be here in the first place 
 Description for K2G 
 Conservative duration 
 Limited by MBOX_TX_QUEUE_LEN. K2G can handle upto 128 messages! 
 Description for AM654 
 Conservative duration 
 Limited by MBOX_TX_QUEUE_LEN. K2G can handle upto 128 messages! 
 Sentinel  },
 if the property is not present in DT, use a default from desc 
	
	  Pre-allocate messages
	  NEVER allocate more than what we can indicate in hdr.seq
	  if we have data description bug, force a fix..
 Pre-initialize the buffer pointer to pre-allocated buffers 
 Safe to free channels since no more users 
 SPDX-License-Identifier: GPL-2.0
  Copyright 2019 Broadcom.
	
	  TA_CMD_BNXT_FASTBOOT - boot bnxt device by copying fw into sram
	 
	 	param[0] unused
	 	param[1] unused
	 	param[2] unused
	 	param[3] unused
	 
	  Result:
	 	TEE_SUCCESS - Invoke command success
	 	TEE_ERROR_ITEM_NOT_FOUND - Corrupt fw image found on memory
	
	  TA_CMD_BNXT_COPY_COREDUMP - copy the core dump into shm
	 
	 	param[0] (inout memref) - Coredump buffer memory reference
	 	param[1] (in value) - value.a: offset, data to be copied from
	 			      value.b: size of data to be copied
	 	param[2] unused
	 	param[3] unused
	 
	  Result:
	 	TEE_SUCCESS - Invoke command success
	 	TEE_ERROR_BAD_PARAMETERS - Incorrect input param
	 	TEE_ERROR_ITEM_NOT_FOUND - Corrupt core dump
  struct tee_bnxt_fw_private - OP-TEE bnxt private data
  @dev:		OP-TEE based bnxt device.
  @ctx:		OP-TEE context handler.
  @session_id:		TA session identifier.
 Fill invoke cmd params 
 Nothing to do 
  tee_bnxt_fw_load() - Load the bnxt firmware
 		    Uses an OP-TEE call to start a secure
 		    boot process.
  Returns 0 on success, negative errno otherwise.
  tee_bnxt_copy_coredump() - Copy coredump from the allocated memory
 			    Uses an OP-TEE call to copy coredump
  @buf:	destination buffer where core dump is copied into
  @offset:	offset from the base address of core dump area
  @size:	size of the dump
  Returns 0 on success, negative errno otherwise.
 Fill additional invoke cmd params 
 Open context with TEE driver 
 Open session with Bnxt load Trusted App 
 SPDX-License-Identifier: GPL-2.0-or-later
  BCM947xx nvram variable access
  Copyright (C) 2005 Broadcom Corporation
  Copyright (C) 2006 Felix Fietkau <nbd@openwrt.org>
  Copyright (C) 2010-2012 Hauke Mehrtens <hauke@hauke-m.de>
 'FLSH' 
 Minimum flash size 
 0:7 crc, 8:15 ver, 16:31 sdram_init 
 0:15 sdram_config, 16:31 sdram_refresh 
 ncdl values for memc 
  bcm47xx_nvram_is_valid - check for a valid NVRAM at specified memory
  bcm47xx_nvram_copy - copy NVRAM to internal buffer
  bcm47xx_nvram_find_and_copy - find NVRAM on flash mapping & copy it
 TODO: when nvram is on nand flash check for bad blocks first. 
 Try every possible flash size and check for NVRAM at its end 
 Try embedded NVRAM at 4 KB and 1 KB as last resorts 
  On bcm47xx we need access to the NVRAM very early, so we can't use mtd
  subsystem to access flash. We can't even use platform device  driver to
  store memory offset.
  To handle this we provide following symbol. It's supposed to be called as
  soon as we get info about flash device, before any NVRAM entry is needed.
 Look for name=value and return value 
 TODO: Optimize it to don't call getenv so many times 
   Copyright (C) 2004 Florian Schirmer <jolt@tuxbox.org>
   Copyright (C) 2006 Felix Fietkau <nbd@openwrt.org>
   Copyright (C) 2006 Michael Buesch <m@bues.ch>
   Copyright (C) 2010 Waldemar Brodkorb <wbx@openadk.org>
   Copyright (C) 2010-2012 Hauke Mehrtens <hauke@hauke-m.de>
   This program is free software; you can redistribute  it andor modify it
   under  the terms of  the GNU General  Public License as published by the
   Free Software Foundation;  either version 2 of the  License, or (at your
   option) any later version.
   THIS  SOFTWARE  IS PROVIDED   ``AS  IS'' AND   ANY  EXPRESS OR IMPLIED
   WARRANTIES,   INCLUDING, BUT NOT  LIMITED  TO, THE IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN
   NO  EVENT  SHALL   THE AUTHOR  BE    LIABLE FOR ANY   DIRECT, INDIRECT,
   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   NOT LIMITED   TO, PROCUREMENT OF  SUBSTITUTE GOODS  OR SERVICES; LOSS OF
   USE, DATA,  OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
   ANY THEORY OF LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT
   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   You should have received a copy of the  GNU General Public License along
   with this program; if not, write  to the Free Software Foundation, Inc.,
   675 Mass Ave, Cambridge, MA 02139, USA.
 This is one-function-only macro, it uses local "sprom" variable! 
  Special version of filling function that can be safely called for any SPROM
  revision. For every NVRAM to SPROM mapping it contains bitmask of revisions
  for which the mapping is valid.
  It obviously requires some hexadecimalbitmasks knowledge, but allows
  writing cleaner code (easy revisions handling).
  Note that while SPROM revision 0 was never used, we still keep BIT(0)
  reserved for it, just to keep numbering sane.
 Broadcom extracts it for rev 8+ but it was found on 2 and 4 too 
 TODO: rev 11 support 
 TODO: rev 11 support 
 It's specififc, uses local variable, don't use it (again). 
	 The address prefix 00:90:4C is used by Broadcom in their initial
	  configuration. When a mac address with the prefix 00:90:4C is used
	  all devices from the same series are sharing the same mac address.
	  To prevent mac address collisions we replace them with a mac address
	  based on the base address.
 Entries requiring custom functions 
  Having many NVRAM entries for PCI devices led to repeating prefixes like
  pci11 all the time and wasting flash space. So at some point Broadcom
  decided to introduce prefixes like 0: 1: 2: etc.
  If we find e.g. devpath0=pci21 or devpath0=pci21 we should use 0:
  instead of pci21.
 Passed prefix has to end with a slash 
 On BCM47XX all PCI buses share the same domain 
  On bcm47xx we need to register SPROM fallback handler very early, so we can't
  use anything like platform device  driver for this.
 SPDX-License-Identifier: GPL-2.0-only
  Amlogic Secure Monitor driver
  Copyright (C) 2016 Endless Mobile, Inc.
  Author: Carlo Caione <carlo@endlessm.com>
 sentinel  },
  meson_sm_call - generic SMC32 call to the secure-monitor
  @fw:		Pointer to secure-monitor firmware
  @cmd_index:	Index of the SMC32 function ID
  @ret:	Returned value
  @arg0:	SMC32 Argument 0
  @arg1:	SMC32 Argument 1
  @arg2:	SMC32 Argument 2
  @arg3:	SMC32 Argument 3
  @arg4:	SMC32 Argument 4
  Return:	0 on success, a negative value on error
  meson_sm_call_read - retrieve data from secure-monitor
  @fw:		Pointer to secure-monitor firmware
  @buffer:	Buffer to store the retrieved data
  @bsize:	Size of the buffer
  @cmd_index:	Index of the SMC32 function ID
  @arg0:	SMC32 Argument 0
  @arg1:	SMC32 Argument 1
  @arg2:	SMC32 Argument 2
  @arg3:	SMC32 Argument 3
  @arg4:	SMC32 Argument 4
  Return:	size of read data on success, a negative value on error
 		When 0 is returned there is no guarantee about the amount of
 		data read and bsize bytes are copied in buffer.
  meson_sm_call_write - send data to secure-monitor
  @fw:		Pointer to secure-monitor firmware
  @buffer:	Buffer containing data to send
  @size:	Size of the data to send
  @cmd_index:	Index of the SMC32 function ID
  @arg0:	SMC32 Argument 0
  @arg1:	SMC32 Argument 1
  @arg2:	SMC32 Argument 2
  @arg3:	SMC32 Argument 3
  @arg4:	SMC32 Argument 4
  Return:	size of sent data on success, a negative value on error
  meson_sm_get - get pointer to meson_sm_firmware structure.
  @sm_node:		Pointer to the secure-monitor Device Tree node.
  Return:		NULL is the secure-monitor device is not ready.
 sentinel  },
 SPDX-License-Identifier: GPL-2.0
  Xilinx Zynq MPSoC Firmware layer for debugfs APIs
   Copyright (C) 2014-2018 Xilinx, Inc.
   Michal Simek <michal.simek@xilinx.com>
   Davorin Mista <davorin.mista@aggios.com>
   Jolly Shah <jollys@xilinx.com>
   Rajan Vaja <rajanv@xilinx.com>
  zynqmp_pm_argument_value() - Extract argument value from a PM-API request
  @arg:	Entered PM-API argument in string format
  Return: Argument value in unsigned integer format on success
 	   0 otherwise
  get_pm_api_id() - Extract API-ID from a PM-API request
  @pm_api_req:		Entered PM-API argument in string format
  @pm_id:		API-ID
  Return: 0 on success else error code
 If no name was entered look for PM-API ID instead 
  zynqmp_pm_debugfs_api_write() - debugfs write function
  @file:	User file
  @ptr:	User entered PM-API string
  @len:	Length of the userspace buffer
  @off:	Offset within the file
  Used for triggering pm api functions by writing
  echo <pm_api_id>	> syskerneldebugzynqmp_pmpower or
  echo <pm_api_name>	> syskerneldebugzynqmp_pmpower
  Return: Number of bytes copied if PM-API request succeeds,
 	   the corresponding error code otherwise
 Return values from PM APIs calls 
 Read the API name from a user request 
 Read node_id and arguments from the PM-API request 
  zynqmp_pm_debugfs_api_read() - debugfs read function
  @file:	User file
  @ptr:	Requested pm_api_version string
  @len:	Length of the userspace buffer
  @off:	Offset within the file
  Return: Length of the version string on success
 	   else error code
 Setup debugfs fops 
  zynqmp_pm_api_debugfs_init - Initialize debugfs interface
  Return:	None
 Initialize debugfs interface 
  zynqmp_pm_api_debugfs_exit - Remove debugfs interface
  Return:	None
 SPDX-License-Identifier: GPL-2.0
  Xilinx Zynq MPSoC Firmware layer
   Copyright (C) 2014-2021 Xilinx, Inc.
   Michal Simek <michal.simek@xilinx.com>
   Davorin Mista <davorin.mista@aggios.com>
   Jolly Shah <jollys@xilinx.com>
   Rajan Vaja <rajanv@xilinx.com>
 Max HashMap Order for PM API feature check (1<<7 = 128) 
 CRL registers and bitfields 
 BOOT_PIN_CTRL- Used to control the mode pins after boot 
 BOOT_PIN_CTRL_MASK- out_val[11:8], out_en[3:0] 
  struct pm_api_feature_data - PM API Feature data
  @pm_api_id:		PM API Id, used as key to index into hashmap
  @feature_status:	status of PM API feature: valid, invalid
  @hentry:		hlist_node that hooks this entry into hashtable
  zynqmp_pm_ret_code() - Convert PMU-FW error codes to Linux error codes
  @ret_status:		PMUFW return code
  Return: corresponding Linux error code
  PM function call wrapper
  Invoke do_fw_call_smc or do_fw_call_hvc, depending on the configuration
  do_fw_call_smc() - Call system-level platform management layer (SMC)
  @arg0:		Argument 0 to SMC call
  @arg1:		Argument 1 to SMC call
  @arg2:		Argument 2 to SMC call
  @ret_payload:	Returned value array
  Invoke platform management function via SMC call (no hypervisor present).
  Return: Returns status, either success or error+reason
  do_fw_call_hvc() - Call system-level platform management layer (HVC)
  @arg0:		Argument 0 to HVC call
  @arg1:		Argument 1 to HVC call
  @arg2:		Argument 2 to HVC call
  @ret_payload:	Returned value array
  Invoke platform management function via HVC
  HVC-based for communication through hypervisor
  (no direct communication with ATF).
  Return: Returns status, either success or error+reason
  zynqmp_pm_feature() - Check weather given feature is supported or not
  @api_id:		API ID to check
  Return: Returns status, either success or error+reason
 Check for existing entry in hash table for given api 
 Add new entry if not present 
  zynqmp_pm_invoke_fn() - Invoke the system-level platform management layer
 			   caller function depending on the configuration
  @pm_api_id:		Requested PM-API call
  @arg0:		Argument 0 to requested PM-API call
  @arg1:		Argument 1 to requested PM-API call
  @arg2:		Argument 2 to requested PM-API call
  @arg3:		Argument 3 to requested PM-API call
  @ret_payload:	Returned value array
  Invoke platform management function for SMC or HVC call, depending on
  configuration.
  Following SMC Calling Convention (SMCCC) for SMC64:
  Pm Function Identifier,
  PM_SIP_SVC + PM_API_ID =
 	((SMC_TYPE_FAST << FUNCID_TYPE_SHIFT)
 	((SMC_64) << FUNCID_CC_SHIFT)
 	((SIP_START) << FUNCID_OEN_SHIFT)
 	((PM_API_ID) & FUNCID_NUM_MASK))
  PM_SIP_SVC	- Registered ZynqMP SIP Service Call.
  PM_API_ID	- Platform Management API ID.
  Return: Returns status, either success or error+reason
	
	  Added SIP service call Function Identifier
	  Make sure to stay in x0 register
 Check if feature is supported or not 
  zynqmp_pm_get_api_version() - Get version number of PMU PM firmware
  @version:	Returned version value
  Return: Returns status, either success or error+reason
 Check is PM API version already verified 
  zynqmp_pm_get_chipid - Get silicon ID registers
  @idcode:     IDCODE register
  @version:    version register
  Return:      Returns the status of the operation and the idcode and version
               registers in @idcode and @version.
  zynqmp_pm_get_trustzone_version() - Get secure trustzone firmware version
  @version:	Returned version value
  Return: Returns status, either success or error+reason
 Check is PM trustzone version already verified 
  get_set_conduit_method() - Choose SMC or HVC based communication
  @np:		Pointer to the device_node structure
  Use SMC or HVC-based functions to communicate with EL2EL3.
  Return: Returns 0 on success or error code
  zynqmp_pm_query_data() - Get query data from firmware
  @qdata:	Variable to the zynqmp_pm_query_data structure
  @out:	Returned output value
  Return: Returns status, either success or error+reason
	
	  For clock name query, all bytes in SMC response are clock name
	  characters and return code is always success. For invalid clocks,
	  clock name bytes would be zeros.
  zynqmp_pm_clock_enable() - Enable the clock for given id
  @clock_id:	ID of the clock to be enabled
  This function is used by master to enable the clock
  including peripherals and PLL clocks.
  Return: Returns status, either success or error+reason
  zynqmp_pm_clock_disable() - Disable the clock for given id
  @clock_id:	ID of the clock to be disable
  This function is used by master to disable the clock
  including peripherals and PLL clocks.
  Return: Returns status, either success or error+reason
  zynqmp_pm_clock_getstate() - Get the clock state for given id
  @clock_id:	ID of the clock to be queried
  @state:	10 (EnabledDisabled)
  This function is used by master to get the state of clock
  including peripherals and PLL clocks.
  Return: Returns status, either success or error+reason
  zynqmp_pm_clock_setdivider() - Set the clock divider for given id
  @clock_id:	ID of the clock
  @divider:	divider value
  This function is used by master to set divider for any clock
  to achieve desired rate.
  Return: Returns status, either success or error+reason
  zynqmp_pm_clock_getdivider() - Get the clock divider for given id
  @clock_id:	ID of the clock
  @divider:	divider value
  This function is used by master to get divider values
  for any clock.
  Return: Returns status, either success or error+reason
  zynqmp_pm_clock_setrate() - Set the clock rate for given id
  @clock_id:	ID of the clock
  @rate:	rate value in hz
  This function is used by master to set rate for any clock.
  Return: Returns status, either success or error+reason
  zynqmp_pm_clock_getrate() - Get the clock rate for given id
  @clock_id:	ID of the clock
  @rate:	rate value in hz
  This function is used by master to get rate
  for any clock.
  Return: Returns status, either success or error+reason
  zynqmp_pm_clock_setparent() - Set the clock parent for given id
  @clock_id:	ID of the clock
  @parent_id:	parent id
  This function is used by master to set parent for any clock.
  Return: Returns status, either success or error+reason
  zynqmp_pm_clock_getparent() - Get the clock parent for given id
  @clock_id:	ID of the clock
  @parent_id:	parent id
  This function is used by master to get parent index
  for any clock.
  Return: Returns status, either success or error+reason
  zynqmp_pm_set_pll_frac_mode() - PM API for set PLL mode
  @clk_id:	PLL clock ID
  @mode:	PLL mode (PLL_MODE_FRACPLL_MODE_INT)
  This function sets PLL mode
  Return: Returns status, either success or error+reason
  zynqmp_pm_get_pll_frac_mode() - PM API for get PLL mode
  @clk_id:	PLL clock ID
  @mode:	PLL mode
  This function return current PLL mode
  Return: Returns status, either success or error+reason
  zynqmp_pm_set_pll_frac_data() - PM API for setting pll fraction data
  @clk_id:	PLL clock ID
  @data:	fraction data
  This function sets fraction data.
  It is valid for fraction mode only.
  Return: Returns status, either success or error+reason
  zynqmp_pm_get_pll_frac_data() - PM API for getting pll fraction data
  @clk_id:	PLL clock ID
  @data:	fraction data
  This function returns fraction data value.
  Return: Returns status, either success or error+reason
  zynqmp_pm_set_sd_tapdelay() -  Set tap delay for the SD device
  @node_id:	Node ID of the device
  @type:	Type of tap delay to set (inputoutput)
  @value:	Value to set fot the tap delay
  This function sets inputoutput tap delay for the SD device.
  Return:	Returns status, either success or error+reason
  zynqmp_pm_sd_dll_reset() - Reset DLL logic
  @node_id:	Node ID of the device
  @type:	Reset type
  This function resets DLL logic for the SD device.
  Return:	Returns status, either success or error+reason
  zynqmp_pm_ospi_mux_select() - OSPI Mux selection
  @dev_id:	Device Id of the OSPI device.
  @select:	OSPI Mux select value.
  This function select the OSPI Mux.
  Return:	Returns status, either success or error+reason
  zynqmp_pm_write_ggs() - PM API for writing global general storage (ggs)
  @index:	GGS register index
  @value:	Register value to be written
  This function writes value to GGS register.
  Return:      Returns status, either success or error+reason
  zynqmp_pm_read_ggs() - PM API for reading global general storage (ggs)
  @index:	GGS register index
  @value:	Register value to be written
  This function returns GGS register value.
  Return:	Returns status, either success or error+reason
  zynqmp_pm_write_pggs() - PM API for writing persistent global general
 			     storage (pggs)
  @index:	PGGS register index
  @value:	Register value to be written
  This function writes value to PGGS register.
  Return:	Returns status, either success or error+reason
  zynqmp_pm_read_pggs() - PM API for reading persistent global general
 			     storage (pggs)
  @index:	PGGS register index
  @value:	Register value to be written
  This function returns PGGS register value.
  Return:	Returns status, either success or error+reason
  zynqmp_pm_set_boot_health_status() - PM API for setting healthy boot status
  @value:	Status value to be written
  This function sets healthy bit value to indicate boot health status
  to firmware.
  Return:	Returns status, either success or error+reason
  zynqmp_pm_reset_assert - Request setting of reset (1 - assert, 0 - release)
  @reset:		Reset to be configured
  @assert_flag:	Flag stating should reset be asserted (1) or
 			released (0)
  Return: Returns status, either success or error+reason
  zynqmp_pm_reset_get_status - Get status of the reset
  @reset:      Reset whose status should be returned
  @status:     Returned status
  Return: Returns status, either success or error+reason
  zynqmp_pm_fpga_load - Perform the fpga load
  @address:	Address to write to
  @size:	pl bitstream size
  @flags:	Bitstream type
 	-XILINX_ZYNQMP_PM_FPGA_FULL:  FPGA full reconfiguration
 	-XILINX_ZYNQMP_PM_FPGA_PARTIAL: FPGA partial reconfiguration
  This function provides access to pmufw. To transfer
  the required bitstream into PL.
  Return: Returns status, either success or error+reason
  zynqmp_pm_fpga_get_status - Read value from PCAP status register
  @value: Value to read
  This function provides access to the pmufw to get the PCAP
  status
  Return: Returns status, either success or error+reason
  zynqmp_pm_pinctrl_request - Request Pin from firmware
  @pin: Pin number to request
  This function requests pin from firmware.
  Return: Returns status, either success or error+reason.
  zynqmp_pm_pinctrl_release - Inform firmware that Pin control is released
  @pin: Pin number to release
  This function release pin from firmware.
  Return: Returns status, either success or error+reason.
  zynqmp_pm_pinctrl_get_function - Read function id set for the given pin
  @pin: Pin number
  @id: Buffer to store function ID
  This function provides the function currently set for the given pin.
  Return: Returns status, either success or error+reason
  zynqmp_pm_pinctrl_set_function - Set requested function for the pin
  @pin: Pin number
  @id: Function ID to set
  This function sets requested function for the given pin.
  Return: Returns status, either success or error+reason.
  zynqmp_pm_pinctrl_get_config - Get configuration parameter for the pin
  @pin: Pin number
  @param: Parameter to get
  @value: Buffer to store parameter value
  This function gets requested configuration parameter for the given pin.
  Return: Returns status, either success or error+reason.
  zynqmp_pm_pinctrl_set_config - Set configuration parameter for the pin
  @pin: Pin number
  @param: Parameter to set
  @value: Parameter value to set
  This function sets requested configuration parameter for the given pin.
  Return: Returns status, either success or error+reason.
  zynqmp_pm_bootmode_read() - PM Config API for read bootpin status
  @ps_mode: Returned output value of ps_mode
  This API function is to be used for notify the power management controller
  to read bootpin status.
  Return: status, either success or error+reason
  zynqmp_pm_bootmode_write() - PM Config API for Configure bootpin
  @ps_mode: Value to be written to the bootpin ctrl register
  This API function is to be used for notify the power management controller
  to configure bootpin.
  Return: Returns status, either success or error+reason
  zynqmp_pm_init_finalize() - PM call to inform firmware that the caller
 			       master has initialized its own power management
  Return: Returns status, either success or error+reason
  This API function is to be used for notify the power management controller
  about the completed power management initialization.
  zynqmp_pm_set_suspend_mode()	- Set system suspend mode
  @mode:	Mode to set for system suspend
  This API function is used to set mode of system suspend.
  Return: Returns status, either success or error+reason
  zynqmp_pm_request_node() - Request a node with specific capabilities
  @node:		Node ID of the slave
  @capabilities:	Requested capabilities of the slave
  @qos:		Quality of service (not supported)
  @ack:		Flag to specify whether acknowledge is requested
  This function is used by master to request particular node from firmware.
  Every master must request node before using it.
  Return: Returns status, either success or error+reason
  zynqmp_pm_release_node() - Release a node
  @node:	Node ID of the slave
  This function is used by master to inform firmware that master
  has released node. Once released, master must not use that node
  without re-request.
  Return: Returns status, either success or error+reason
  zynqmp_pm_set_requirement() - PM call to set requirement for PM slaves
  @node:		Node ID of the slave
  @capabilities:	Requested capabilities of the slave
  @qos:		Quality of service (not supported)
  @ack:		Flag to specify whether acknowledge is requested
  This API function is to be used for slaves a PU already has requested
  to change its capabilities.
  Return: Returns status, either success or error+reason
  zynqmp_pm_load_pdi - Load and process PDI
  @src:       Source device where PDI is located
  @address:   PDI src address
  This function provides support to load PDI from linux
  Return: Returns status, either success or error+reason
  zynqmp_pm_aes_engine - Access AES hardware to encryptdecrypt the data using
  AES-GCM core.
  @address:	Address of the AesParams structure.
  @out:	Returned output value
  Return:	Returns status, either success or error code.
  zynqmp_pm_system_shutdown - PM call to request a system shutdown or restart
  @type:	Shutdown or restart? 0 for shutdown, 1 for restart
  @subtype:	Specifies which system should be restarted or shut down
  Return:	Returns status, either success or error+reason
  struct zynqmp_pm_shutdown_scope - Struct for shutdown scope
  @subtype:	Shutdown subtype
  @name:	Matching string for scope argument
  This struct encapsulates mapping between shutdown scope ID and string.
  zynqmp_pm_is_shutdown_scope_valid - Check if shutdown scope string is valid
  @scope_string:	Shutdown scope string
  Return:		Return pointer to matching shutdown scope struct from
 			array of available options in system if string is valid,
 			otherwise returns NULL.
 GGS register show functions 
 GGS register store function 
 PGGS register show functions 
 PGGS register store functions 
 GGS register attributes 
 PGGS register attributes 
 Check PM API version number 
 Check trustzone version number 
 SPDX-License-Identifier: GPL-2.0
  Copyright 2020 Arm Limited
  As per the SMC Calling Convention specification v1.2 (ARM DEN 0028C)
  Section 7.4 SMCCC_ARCH_SOC_ID bits[23:16] are JEP-106 identification
  code with parity bit for the SiP. We can drop the parity bit.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2020 Arm Limited
 SPDX-License-Identifier: GPL-2.0
 SPDX-License-Identifier: GPL-2.0
  dev-path-parser.c - EFI Device Path parser
  Copyright (C) 2016 Lukas Wunner <lukas@wunner.de>
  This program is free software; you can redistribute it andor modify
  it under the terms of the GNU General Public License (version 2) as
  published by the Free Software Foundation.
 UINT_MAX + null byte 
  Insert parsers for further node types here.
  Each parser takes a pointer to the @node and to the @parent (will be NULL
  for the first device path node). If a device corresponding to @node was
  found below @parent, its reference count should be incremented and the
  device returned in @child.
  The return value should be 0 on success or a negative int on failure.
  The special return values 0x01 (EFI_DEV_END_INSTANCE) and 0xFF
  (EFI_DEV_END_ENTIRE) signal the end of the device path, only
  parse_end_path() is supposed to return this.
  Be sure to validate the node length and contents before commencing the
  search for a device.
  efi_get_device_by_path - find device by EFI Device Path
  @node: EFI Device Path
  @len: maximum length of EFI Device Path in bytes
  Parse a series of EFI Device Path nodes at @node and find the corresponding
  device.  If the device was found, its reference count is incremented and a
  pointer to it is returned.  The caller needs to drop the reference with
  put_device() after use.  The @node pointer is updated to point to the
  location immediately after the "End of Hardware Device Path" node.
  If another Device Path instance follows, @len is decremented by the number
  of bytes consumed.  Otherwise @len is set to %0.
  If a Device Path node is malformed or its corresponding device is not found,
  @node is updated to point to this offending node and an ERR_PTR is returned.
  If @len is initially %0, the function returns %NULL.  Thus, to iterate over
  all instances in a path, the following idiom may be used:
 	while (!IS_ERR_OR_NULL(dev = efi_get_device_by_path(&node, &len))) {
 		 do something with dev
 		put_device(dev);
 	}
 	if (IS_ERR(dev))
 		 report error
  Devices can only be found if they're already instantiated. Most buses
  instantiate devices in the "subsys" initcall level, hence the earliest
  initcall level in which this function should be called is "fs".
  Returns the device on success or
 	%ERR_PTR(-ENODEV) if no device was found,
 	%ERR_PTR(-EINVAL) if a node is malformed or exceeds @len,
 	%ERR_PTR(-ENOTSUPP) if support for a node type is not yet implemented.
 SPDX-License-Identifier: GPL-2.0
  apple-properties.c - EFI device properties on Macs
  Copyright (C) 2016 Lukas Wunner <lukas@wunner.de>
  Properties are stored either as:
  u8 arrays which can be retrieved with device_property_read_u8_array() or
  booleans which can be queried with device_property_present().
	
	  followed by keyvalue pairs, each key and value preceded by u32 len,
	  len includes itself, value may be empty (in which case its len is 4)
 4 bytes to accommodate UTF-8 code points + null byte 
		
		  Can only free the setup_data payload but not its header
		  to avoid breaking the chain of ->next pointers.
 SPDX-License-Identifier: GPL-2.0-only
  efi.c - EFI subsystem
  Copyright (C) 2001,2003,2004 Dell <Matt_Domsch@dell.com>
  Copyright (C) 2004 Intel Corporation <matthew.e.tolentino@intel.com>
  Copyright (C) 2013 Tom Gundersen <teg@jklm.no>
  This code registers sysfirmwareefi{,efivars} when EFI is supported,
  allowing the efivarfs to be mounted or the efivars module to be loaded.
  The existance of sysfirmwareefi may also be used by userspace to
  determine that the system supports EFI.
  Let's not leave out systab information that snuck into
  the efivars driver
  Note, do not add more fields in systab sysfs file as it breaks sysfs
  one value per file rule!
	
	  If both SMBIOS and SMBIOS3 entry points are implemented, the
	  SMBIOS3 entry point shall be preferred, so we list it first to
	  let applications stop parsing after the first match.
  We register the efi subsystem with the firmware subsystem and the
  efivars subsystem with the efi subsystem, if the system was booted with
  EFI.
		
		  Since we process only one efi_runtime_service() at a time, an
		  ordered workqueue (which creates only one execution context)
		  should suffice for all our needs.
 We register the efi directory at sysfirmwareefi 
 and the standard mountpoint for efivarfs 
  Find the efi memory descriptor for a given physical address.  Given a
  physical address, determine if it exists within an EFI Memory Map entry,
  and if so, populate the supplied memory descriptor with the appropriate
  data.
  Calculate the highest address of an efi memory descriptor.
  efi_mem_reserve - Reserve an EFI memory region
  @addr: Physical address to reserve
  @size: Size of reservation
  Mark a region as reserved from general kernel allocation and
  prevent it being released by efi_free_boot_services().
  This function should be called drivers once they've parsed EFI
  configuration tables to figure out where their data lives, e.g.
  efi_esrt_init().
	
	  Some architectures (x86) reserve all boot services ranges
	  until efi_free_boot_services() because of buggy firmware
	  implementations. This means the above memblock_reserve() is
	  superfluous on x86 and instead what it needs to do is
	  ensure the @start, @size is not freed.
			
			  Just map a full page: that is what we will get
			  anyway, and it permits us to map the entire entry
			  before knowing its size.
 reserve the entry itself 
  IA64 has a funky EFI memory map that doesn't work the same way as
  other architectures.
  efi_mem_attributes - lookup memmap attributes for physical address
  @phys_addr: the physical address to lookup
  Search in the EFI memory map for the region covering
  @phys_addr. Returns the EFI memory attributes if the region
  was found in the memory map, 0 otherwise.
  efi_mem_type - lookup memmap type for physical address
  @phys_addr: the physical address to lookup
  Search in the EFI memory map for the region covering @phys_addr.
  Returns the EFI memory type if the region was found in the memory
  map, -EINVAL otherwise.
 we expect a conflict with a 'System RAM' region 
	
	  Given that efi_mem_reserve_iomem() can be called at any
	  time, only call memblock_reserve() if the architecture
	  keeps the infrastructure around.
 first try to find a slot in an existing linked list entry 
 no slot found - allocate a new linked list entry 
	
	  The memremap() call above assumes that a linux_efi_memreserve entry
	  never crosses a page boundary, so let's ensure that this remains true
	  even when kexec'ing a 4k pages kernel from a >4k pages kernel, by
	  using SZ_4K explicitly in the size calculation below.
 SPDX-License-Identifier: GPL-2.0-or-later
  Generic System Framebuffers
  Copyright (c) 2012-2013 David Herrmann <dh.herrmann@gmail.com>
  EFI Quirks Copyright (c) 2006 Edgar Hucek <gimli@dark-green.com>
  EFI Quirks
  Several EFI systems do not correctly advertise their boot framebuffers.
  Hence, we use this static table of known broken machines and fix up the
  information so framebuffer drivers can load correctly.
 guess 
 guess 
 11" Macbook Air 3,1 passes the wrong stride 
 placeholder 
 Trust the bootloader over the DMI tables 
			 make sure that the address in the table is actually
 At least one of these two will be right; maybe both? 
 At least one of these two will be right; maybe both? 
 At least one of these two will be right; maybe both? 
 At least one of these two will be right; maybe both? 
  Some devices have a portrait LCD but advertise a landscape resolution (and
  pitch). We simply swap width and height for these devices so that we can
  correctly deal with some of them coming with multiple resolutions.
		
		  Lenovo MIIX310-10ICR, only some batches have the troublesome
		  800x1280 portrait screen. Luckily the portrait version has
		  its own BIOS version, so we match on that.
 Lenovo MIIX 320-10ICR with 800x1280 portrait screen 
 Lenovo D330 with 800x1280 or 1200x1920 portrait screen 
  If the efifb framebuffer is backed by a PCI graphics controller, we have
  to ensure that this relation is expressed using a device link when
  running in DT mode, or the probe order may be reversed, resulting in a
  resource reservation conflict on the memory window that the efifb
  framebuffer steals from the PCIe host bridge.
	
	  If there's no PCI graphics controller backing the efifb, we are
	  done here.
 SPDX-License-Identifier: GPL-2.0-only
  <-------17------>
  <-----------26----------->
 saturate
 SPDX-License-Identifier: GPL-2.0
  EFI capsule support.
  Copyright 2013 Intel Corporation; author Matt Fleming
  capsule_mutex serialises access to both capsule_pending and
  efi_reset_type and stop_capsules.
  efi_capsule_pending - has a capsule been passed to the firmware?
  @reset_type: store the type of EFI reset if capsule is pending
  To ensure that the registered capsule is processed correctly by the
  firmware we need to perform a specific type of reset. If a capsule is
  pending return the reset type in @reset_type.
  This function will race with callers of efi_capsule_update(), for
  example, calling this function while somebody else is in
  efi_capsule_update() but hasn't reached efi_capsue_update_locked()
  will miss the updates to capsule_pending and efi_reset_type after
  efi_capsule_update_locked() completes.
  A non-racy use is from platform reboot code because we use
  system_state to ensure no capsules can be sent to the firmware once
  we're at SYSTEM_RESTART. See efi_capsule_update_locked().
  Whitelist of EFI capsule flags that we support.
  We do not handle EFI_CAPSULE_INITIATE_RESET because that would
  require us to prepare the kernel for reboot. Refuse to load any
  capsules with that flag and any other flags that we do not know how
  to handle.
  efi_capsule_supported - does the firmware support the capsule?
  @guid: vendor guid of capsule
  @flags: capsule flags
  @size: size of capsule data
  @reset: the reset type required for this capsule
  Check whether a capsule with @flags is supported by the firmware
  and that @size doesn't exceed the maximum size for a capsule.
  No attempt is made to check @reset against the reset type required
  by any pending capsules because of the races involved.
  Every scatter gather list (block descriptor) page must end with a
  continuation pointer. The last continuation pointer of the last
  page must be zero to mark the end of the chain.
  How many scatter gather list (block descriptor) pages do we need
  to map @count pages?
  efi_capsule_update_locked - pass a single capsule to the firmware
  @capsule: capsule to send to the firmware
  @sg_pages: array of scatter gather (block descriptor) pages
  @reset: the reset type required for @capsule
  Since this function must be called under capsule_mutex check
  whether efi_reset_type will conflict with @reset, and atomically
  set it and capsule_pending if a capsule was successfully sent to
  the firmware.
  We also check to see if the system is about to restart, and if so,
  abort. This avoids races between efi_capsule_update() and
  efi_capsule_pending().
	
	  If someone has already registered a capsule that requires a
	  different reset type, we're out of luck and must abort.
	
	  If the system is getting ready to restart it may have
	  called efi_capsule_pending() to make decisions (such as
	  whether to force an EFI reboot), and we're racing against
	  that call. Abort in that case.
  efi_capsule_update - send a capsule to the firmware
  @capsule: capsule to send to firmware
  @pages: an array of capsule data pages
  Build a scatter gather list with EFI capsule block descriptors to
  map the capsule described by @capsule with its data in @pages and
  send it to the firmware via the UpdateCapsule() runtime service.
  @capsule must be a virtual mapping of the complete capsule update in the
  kernel address space, as the capsule can be consumed immediately.
  A capsule_header_t that describes the entire contents of the capsule
  must be at the start of the first data page.
  Even though this function will validate that the firmware supports
  the capsule guid, users will likely want to check that
  efi_capsule_supported() returns true before calling this function
  because it makes it easier to print helpful error messages.
  If the capsule is successfully submitted to the firmware, any
  subsequent calls to efi_capsule_pending() will return true. @pages
  must not be released or modified if this function returns
  successfully.
  Callers must be prepared for this function to fail, which can
  happen if we raced with system reboot or if there is already a
  pending capsule that has a reset type that conflicts with the one
  required by @capsule. Do NOT use efi_capsule_pending() to detect
  this conflict since that would be racy. Instead, submit the capsule
  to efi_capsule_update() and check the return value.
  Return 0 on success, a converted EFI status code on failure.
 Continuation pointer 
		
		  At runtime, the firmware has no way to find out where the
		  sglist elements are mapped, if they are mapped in the first
		  place. Therefore, on architectures that can only perform
		  cache maintenance by virtual address, the firmware is unable
		  to perform this maintenance, and so it is up to the OS to do
		  it instead.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2017 Google, Inc.
      Thiebaud Weksteen <tweek@google.com>
  Reserve the memory associated with the TPM Event Log configuration table.
		
		  We can't calculate the size of the final events without the
		  first entry in the TPM log, so bail here.
 SPDX-License-Identifier: GPL-2.0+
  Originally from efivars.c
  Copyright (C) 2001,2003,2004 Dell <Matt_Domsch@dell.com>
  Copyright (C) 2004 Intel Corporation <matthew.e.tolentino@intel.com>
 Private pointer to registered efivars 
  efivars_lock protects three things:
  1) efivarfs_list and efivars_sysfs_list
  2) ->ops calls
  3) (un)registration of __efivars
	
	  If we're here then either node->length pointed past the end
	  of the buffer or we reached the end of the buffer without
	  finding a device path end node.
 An array of 16-bit integers 
 Either "Boot" or "Driver" followed by four digits of hex 
 Reject it if there's 4 digits of hex and then further content 
 A valid entry must be at least 8 bytes 
	
	  There's no stored length for the description, so it has to be
	  found by hand
 Each boot entry must have a descriptor 
	
	  If the sum of the length of the description, the claimed filepath
	  length and the original header are greater than the length of the
	  variable, it's malformed
	
	  And, finally, check the filepath
 A single 16-bit integer 
  This is the list of variables we need to validate, as well as the
  whitelist for what we think is safe not to default to immutable.
  If it has a validate() method that's not NULL, it'll go into the
  validation routine.  If not, it is assumed valid, but still used for
  whitelisting.
  Note that it's sorted by {vendor,name}, but globbed names must come after
  any other name with the same prefix.
  Check if @var_name matches the pattern given in @match_name.
  @var_name: an array of @len non-NUL characters.
  @match_name: a NUL-terminated pattern string, optionally ending in "". A
               final "" character matches any trailing characters @var_name,
               including the case when there are none left in @var_name.
  @match: on output, the number of non-wildcard characters in @match_name
          that @var_name matches, regardless of the return value.
  @return: whether @var_name fully matches @match_name.
 Wildcard in @match_name means we've matched. 
 @match_name has ended. Has @var_name too? 
			
			  We've reached a non-wildcard char in @match_name.
			  Continue only if there's an identical character in
			  @var_name.
	
	  Check if our variable is in the validated variables list
	
	  If it's in our list, it is removable.
  Returns the size of variable_name, in bytes, including the
  terminating NULL character, or variable_name_size if no NULL
  character is found among the first variable_name_size bytes.
	
	  The variable name is, by definition, a NULL-terminated
	  string, so make absolutely sure that variable_name_size is
	  the value we expect it to be. If not, return the real size.
  Print a warning when duplicate EFI variables are encountered and
  disable the sysfs workqueue since the firmware is buggy.
  efivar_init - build the initial list of EFI variables
  @func: callback function to invoke for every variable
  @data: function-specific data to pass to @func
  @duplicates: error if we encounter duplicates on @head?
  @head: initialised head of variable list
  Get every EFI variable from the firmware and invoke @func. @func
  should call efivar_entry_add() to build the list of variables.
  Returns 0 on success, or a kernel error code on failure.
	
	  Per EFI spec, the maximum storage allocated for both
	  the variable name and variable data is 1024 bytes.
			
			  Some firmware implementations return the
			  same variable name on multiple calls to
			  get_next_variable(). Terminate the loop
			  immediately as there is no guarantee that
			  we'll ever see a different variable name,
			  and may end up looping here forever.
  efivar_entry_add - add entry to variable list
  @entry: entry to add to list
  @head: list head
  Returns 0 on success, or a kernel error code on failure.
  efivar_entry_remove - remove entry from variable list
  @entry: entry to remove from list
  Returns 0 on success, or a kernel error code on failure.
  efivar_entry_list_del_unlock - remove entry from variable list
  @entry: entry to remove
  Remove @entry from the variable list and release the list lock.
  NOTE: slightly weird locking semantics here - we expect to be
  called with the efivars lock already held, and we release it before
  returning. This is because this function is usually called after
  set_variable() while the lock is still held.
  __efivar_entry_delete - delete an EFI variable
  @entry: entry containing EFI variable to delete
  Delete the variable from the firmware but leave @entry on the
  variable list.
  This function differs from efivar_entry_delete() because it does
  not remove @entry from the variable list. Also, it is safe to be
  called from within a efivar_entry_iter_begin() and
  efivar_entry_iter_end() region, unlike efivar_entry_delete().
  Returns 0 on success, or a converted EFI status code if
  set_variable() fails.
  efivar_entry_delete - delete variable and remove entry from list
  @entry: entry containing variable to delete
  Delete the variable from the firmware and remove @entry from the
  variable list. It is the caller's responsibility to free @entry
  once we return.
  Returns 0 on success, -EINTR if we can't grab the semaphore,
  converted EFI status code if set_variable() fails.
  efivar_entry_set - call set_variable()
  @entry: entry containing the EFI variable to write
  @attributes: variable attributes
  @size: size of @data buffer
  @data: buffer containing variable data
  @head: head of variable list
  Calls set_variable() for an EFI variable. If creating a new EFI
  variable, this function is usually followed by efivar_entry_add().
  Before writing the variable, the remaining EFI variable storage
  space is checked to ensure there is enough room available.
  If @head is not NULL a lookup is performed to determine whether
  the entry is already on the list.
  Returns 0 on success, -EINTR if we can't grab the semaphore,
  -EEXIST if a lookup is performed and the entry already exists on
  the list, or a converted EFI status code if set_variable() fails.
  efivar_entry_set_nonblocking - call set_variable_nonblocking()
  This function is guaranteed to not block and is suitable for calling
  from crashpanic handlers.
  Crucially, this function will not block if it cannot acquire
  efivars_lock. Instead, it returns -EBUSY.
  efivar_entry_set_safe - call set_variable() if enough space in firmware
  @name: buffer containing the variable name
  @vendor: variable vendor guid
  @attributes: variable attributes
  @block: can we block in this context?
  @size: size of @data buffer
  @data: buffer containing variable data
  Ensures there is enough free storage in the firmware for this variable, and
  if so, calls set_variable(). If creating a new EFI variable, this function
  is usually followed by efivar_entry_add().
  Returns 0 on success, -ENOSPC if the firmware does not have enough
  space for set_variable() to succeed, or a converted EFI status code
  if set_variable() fails.
	
	  If the EFI variable backend provides a non-blocking
	  ->set_variable() operation and we're in a context where we
	  cannot block, then we need to use it to avoid live-locks,
	  since the implication is that the regular ->set_variable()
	  will block.
	 
	  If no ->set_variable_nonblocking() is provided then
	  ->set_variable() is assumed to be non-blocking.
  efivar_entry_find - search for an entry
  @name: the EFI variable name
  @guid: the EFI variable vendor's guid
  @head: head of the variable list
  @remove: should we remove the entry from the list?
  Search for an entry on the variable list that has the EFI variable
  name @name and vendor guid @guid. If an entry is found on the list
  and @remove is true, the entry is removed from the list.
  The caller MUST call efivar_entry_iter_begin() and
  efivar_entry_iter_end() before and after the invocation of this
  function, respectively.
  Returns the entry if found on the list, %NULL otherwise.
			
			  The entry will be deleted
			  after scanning is completed.
  efivar_entry_size - obtain the size of a variable
  @entry: entry for this variable
  @size: location to store the variable's size
  __efivar_entry_get - call get_variable()
  @entry: read data for this variable
  @attributes: variable attributes
  @size: size of @data buffer
  @data: buffer to store variable data
  The caller MUST call efivar_entry_iter_begin() and
  efivar_entry_iter_end() before and after the invocation of this
  function, respectively.
  efivar_entry_get - call get_variable()
  @entry: read data for this variable
  @attributes: variable attributes
  @size: size of @data buffer
  @data: buffer to store variable data
  efivar_entry_set_get_size - call set_variable() and get new size (atomic)
  @entry: entry containing variable to set and get
  @attributes: attributes of variable to be written
  @size: size of data buffer
  @data: buffer containing data to write
  @set: did the set_variable() call succeed?
  This is a pretty special (complex) function. See efivarfs_file_write().
  Atomically call set_variable() for @entry and if the call is
  successful, return the new size of the variable from get_variable()
  in @size. The success of set_variable() is indicated by @set.
  Returns 0 on success, -EINVAL if the variable data is invalid,
  -ENOSPC if the firmware does not have enough available space, or a
  converted EFI status code if either of set_variable() or
  get_variable() fail.
  If the EFI variable does not exist when calling set_variable()
  (EFI_NOT_FOUND), @entry is removed from the variable list.
	
	  The lock here protects the get_variable call, the conditional
	  set_variable call, and removal of the variable from the efivars
	  list (in the case of an authenticated delete).
	
	  Ensure that the available space hasn't shrunk below the safe level
	
	  Writing to the variable may have caused a change in size (which
	  could either be an append or an overwrite), or the variable to be
	  deleted. Perform a GetVariable() so we can tell what actually
	  happened.
  efivar_entry_iter_begin - begin iterating the variable list
  Lock the variable list to prevent entry insertion and removal until
  efivar_entry_iter_end() is called. This function is usually used in
  conjunction with __efivar_entry_iter() or efivar_entry_iter().
  efivar_entry_iter_end - finish iterating the variable list
  Unlock the variable list and allow modifications to the list again.
  __efivar_entry_iter - iterate over variable list
  @func: callback function
  @head: head of the variable list
  @data: function-specific data to pass to callback
  @prev: entry to begin iterating from
  Iterate over the list of EFI variables and call @func with every
  entry on the list. It is safe for @func to remove entries in the
  list via efivar_entry_delete().
  You MUST call efivar_entry_iter_begin() before this function, and
  efivar_entry_iter_end() afterwards.
  It is possible to begin iteration from an arbitrary entry within
  the list by passing @prev. @prev is updated on return to point to
  the last entry passed to @func. To begin iterating from the
  beginning of the list @prev must be %NULL.
  The restrictions for @func are the same as documented for
  efivar_entry_iter().
  efivar_entry_iter - iterate over variable list
  @func: callback function
  @head: head of variable list
  @data: function-specific data to pass to callback
  Iterate over the list of EFI variables and call @func with every
  entry on the list. It is safe for @func to remove entries in the
  list via efivar_entry_delete() while iterating.
  Some notes for the callback function:
   - a non-zero return value indicates an error and terminates the loop
   - @func is called from atomic context
  efivars_kobject - get the kobject for the registered efivars
  If efivars_register() has not been called we return NULL,
  otherwise return the kobject used at registration time.
  efivars_register - register an efivars
  @efivars: efivars to register
  @ops: efivars operations
  @kobject: @efivars-specific kobject
  Only a single efivars can be registered at any time.
  efivars_unregister - unregister an efivars
  @efivars: efivars to unregister
  The caller must have already removed every entry from the list,
  failure to do so is an error.
 SPDX-License-Identifier: GPL-2.0
  linuxdriversefiruntime-map.c
  Copyright (C) 2013 Red Hat, Inc., Dave Young <dyoung@redhat.com>
 kobject for each entry 
  These are default attributes that are added for every memmap entry.
 SPDX-License-Identifier: GPL-2.0
  mokvar-table.c
  Copyright (c) 2020 Red Hat
  Author: Lenny Szubowicz <lszubowi@redhat.com>
  This module contains the kernel support for the Linux EFI Machine
  Owner Key (MOK) variable configuration table, which is identified by
  the LINUX_EFI_MOK_VARIABLE_TABLE_GUID.
  This EFI configuration table provides a more robust alternative to
  EFI volatile variables by which an EFI boot loader can pass the
  contents of the Machine Owner Key (MOK) certificate stores to the
  kernel during boot. If both the EFI MOK config table and corresponding
  EFI MOK variables are present, the table should be considered as
  more authoritative.
  This module includes code that validates and maps the EFI MOK table,
  if it's presence was detected very early in boot.
  Kernel interface routines are provided to walk through all the
  entries in the MOK config table or to search for a specific named
  entry.
  The contents of the individual named MOK config table entries are
  made available to user space via read-only sysfs binary files under:
  sysfirmwareefimok-variables
  The LINUX_EFI_MOK_VARIABLE_TABLE_GUID config table is a packed
  sequence of struct efi_mokvar_table_entry, one for each named
  MOK variable. The sequence is terminated by an entry with a
  completely NULL name and 0 data size.
  efi_mokvar_table_size is set to the computed size of the
  MOK config table by efi_mokvar_table_init(). This will be
  non-zero if and only if the table if present and has been
  validated by efi_mokvar_table_init().
  efi_mokvar_table_va is the kernel virtual address at which the
  EFI MOK config table has been mapped by efi_mokvar_sysfs_init().
  Each sysfirmwareefimok-variables sysfs file is represented by
  an instance of struct efi_mokvar_sysfs_attr on efi_mokvar_sysfs_list.
  bin_attr.private points to the associated EFI MOK config table entry.
  This list is created during boot and then remains unchanged.
  So no synchronization is currently required to walk the list.
  efi_mokvar_table_init() - Early boot validation of EFI MOK config table
  If present, validate and compute the size of the EFI MOK variable
  configuration table. This table may be provided by an EFI boot loader
  as an alternative to ordinary EFI variables, due to platform-dependent
  limitations. The memory occupied by this table is marked as reserved.
  This routine must be called before efi_free_boot_services() in order
  to guarantee that it can mark the table as reserved.
  Implicit inputs:
  efi.mokvar_table:	Physical address of EFI MOK variable config table
 			or special value that indicates no such table.
  Implicit outputs:
  efi_mokvar_table_size: Computed size of EFI MOK variable config table.
 			The table is considered present and valid if this
 			is non-zero.
	
	  The EFI MOK config table must fit within a single EFI memory
	  descriptor range.
	
	  Validate the MOK config table. Since there is no table header
	  from which we could get the total size of the MOK config table,
	  we compute the total size as we validate each variably sized
	  entry, remapping as necessary.
			
			  Map a little more than the fixed size entry
			  header, anticipating some data. It's safe to
			  do so as long as we stay within current memory
			  descriptor.
 Check for last sentinel entry 
 Sanity check that the name is null terminated 
 Advance to the next entry 
  efi_mokvar_entry_next() - Get next entry in the EFI MOK config table
  mokvar_entry:	Pointer to current EFI MOK config table entry
 			or null. Null indicates get first entry.
 			Passed by reference. This is updated to the
 			same value as the return value.
  Returns:		Pointer to next EFI MOK config table entry
 			or null, if there are no more entries.
 			Same value is returned in the mokvar_entry
 			parameter.
  This routine depends on the EFI MOK config table being entirely
  mapped with it's starting virtual address in efi_mokvar_table_va.
  efi_mokvar_entry_find() - Find EFI MOK config entry by name
  name:	Name of the entry to look for.
  Returns:	Pointer to EFI MOK config table entry if found;
 		null otherwise.
  This routine depends on the EFI MOK config table being entirely
  mapped with it's starting virtual address in efi_mokvar_table_va.
  efi_mokvar_sysfs_read() - sysfs binary file read routine
  Returns:	Count of bytes read.
  Copy EFI MOK config table entry data for this mokvar sysfs binary file
  to the supplied buffer, starting at the specified offset into mokvar table
  entry data, for the specified count bytes. The copy is limited by the
  amount of data in this mokvar config table entry.
  efi_mokvar_sysfs_init() - Map EFI MOK config table and create sysfs
  Map the EFI MOK variable config table for run-time use by the kernel
  and create the sysfs entries in sysfirmwareefimok-variables
  This routine just returns if a valid EFI MOK variable config table
  was not found earlier during boot.
  This routine must be called during a "middle" initcall phase, i.e.
  after efi_mokvar_table_init() but before UEFI certs are loaded
  during late init.
  Implicit inputs:
  efi.mokvar_table:	Physical address of EFI MOK variable config table
 			or special value that indicates no such table.
  efi_mokvar_table_size: Computed size of EFI MOK variable config table.
 			The table is considered present and valid if this
 			is non-zero.
  Implicit outputs:
  efi_mokvar_table_va:	Start virtual address of the EFI MOK config table.
 SPDX-License-Identifier: GPL-2.0
  Export Runtime Configuration Interface Table Version 2 (RCI2)
  to sysfs
  Copyright (C) 2019 Dell Inc
  by Narendra K <Narendra.K@dell.com>
  System firmware advertises the address of the RCI2 Table via
  an EFI Configuration Table entry. This code retrieves the RCI2
  table from the address and exports it to sysfs as a binary
  attribute 'rci2' under sysfirmwareefitables directory.
 SPDX-License-Identifier: GPL-2.0
  UEFI Common Platform Error Record (CPER) support
  Copyright (C) 2017, The Linux Foundation. All rights reserved.
 If the type is unknown, bail. 
	
	  Vendor type errors have error information values that are vendor
	  specific.
 The rest of the fields are specific to bus errors 
 SPDX-License-Identifier: GPL-2.0
  Support for extracting embedded firmware for peripherals from EFI code,
  Copyright (c) 2018 Hans de Goede <hdegoede@redhat.com>
 Exported for use by libtest_firmware.c only 
  Note the efi_check_for_embedded_firmwares() code currently makes the
  following 2 assumptions. This may needs to be revisited if embedded firmware
  is found where this is not true:
  1) The firmware is only found in EFI_BOOT_SERVICES_CODE memory segments
  2) The firmware always starts at an offset which is a multiple of 8 bytes
		
		  In some drivers the struct driver_data contains may contain
		  other driver specific data after the fw_desc struct; and
		  the fw_desc struct itself may be empty, skip these.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2013 Intel Corporation; author Matt Fleming
  EFI earlycon needs to use early_memremap() to map the framebuffer.
  But early_memremap() is not usable for 'earlycon=efifb keep_bootcon',
  memremap() should be used instead. memremap() will be available after
  paging_init() which is earlier than initcall callbacks. Thus adding this
  early initcall function early_efi_map_fb() to map the whole EFI framebuffer.
 bail if there is no bootconsole or it has been disabled already 
 unmap the bootconsole fb unless keep_bootcon has left it enabled 
	
	  efi_earlycon_write_char() implicitly assumes a framebuffer with
	  32 bits per pixel.
 SPDX-License-Identifier: GPL-2.0
  UEFI Common Platform Error Record (CPER) support
  Copyright (C) 2010, Intel Corp.
 	Author: Huang Ying <ying.huang@intel.com>
  CPER is the format used to describe platform hardware error by
  various tables, such as ERST, BERT and HEST etc.
  For more information about CPER, please refer to Appendix N of UEFI
  Specification version 2.4.
  CPER record ID need to be unique even after reboot, because record
  ID is used as index for ERST storage, while CPER records from
  multiple boot may co-exist in ERST.
		
		  This code is unlikely to still be needed in year 2106,
		  but just in case, let's use a few more bits for timestamps
		  after y2038 to be sure they keep increasing monotonically
		  for the next few hundred years...
  cper_print_bits - print strings for set bits
  @pfx: prefix for each line, including log level and prefix string
  @bits: bit mask
  @strs: string array, indexed by bit position
  @strs_size: size of the string array: @strs
  For each set bit in @bits, print the corresponding string in @strs.
  If the output length is longer than 80, multiple line will be
  printed, with @pfx is printed at the beginning of each line.
 Don't trust UEFI 2.12.2 structure with bad validation bits 
 Fatal errors call __ghes_panic() before AER handler prints this 
 Record Type based on UEFI 2.7 
	
	  The FW error record may contain trailing data beyond the
	  structure defined by the specification. As the fields
	  defined (and hence the offset of any trailing data) vary
	  with the revision, set the offset to account for this
	  variation.
 record_identifier_guid not defined 
 record_identifier not defined 
 The minimal FW Error Record contains 16 bytes 
 SPDX-License-Identifier: GPL-2.0
  Extensible Firmware Interface
  Based on Extensible Firmware Interface Specification version 2.4
  Copyright (C) 2013 - 2015 Linaro Ltd.
  Translate a EFI virtual address into a physical address: this is necessary,
  as some data members of the EFI system table are virtually remapped after
  SetVirtualAddressMap() has been called.
 no virtual mapping has been installed by the stub 
 dummycon on ARM needs non-zero values for columnslines 
  Return true for regions that can be used as System RAM.
		
		  Special purpose memory is 'soft reserved', which means it
		  is set aside initially, but can be hotplugged back in or
		  be assigned to the dax driver after boot.
		
		  According to the spec, these regions are no longer reserved
		  after calling ExitBootServices(). However, we can only use
		  them as System RAM if they can be mapped writeback cacheable.
	
	  Discard memblocks discovered so far: if there are any at this
	  point, they originate from memory nodes in the DT, and UEFI
	  uses its own memory map instead.
 keep ACPI reclaim memory intact for kexec etc. 
 Grab UEFI information placed in FDT by stub 
		
		 If we are booting via UEFI, the UEFI memory map is the only
		 description of memory we have, so there is little point in
		 proceeding if we cannot access it.
 ARM does not permit early mappings to persist across paging_init() 
 SPDX-License-Identifier: GPL-2.0
  efibc: control EFI bootloaders which obey LoaderEntryOneShot var
  Copyright (c) 2013-2016, Intel Corporation.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2016 Linaro Ltd. <ard.biesheuvel@linaro.org>
  Reserve the memory associated with the Memory Attributes configuration
  table, if it exists.
  Returns a copy @out of the UEFI memory descriptor @in if it is covered
  entirely by a UEFI memory map entry with matching attributes. The virtual
  address of @out is set according to the matching entry that was found.
		
		  Since arm64 may execute with page sizes of up to 64 KB, the
		  UEFI spec mandates that RuntimeServices memory regions must
		  be 64 KB aligned. We need to validate this here since we will
		  not be able to tighten permissions on such regions without
		  affecting adjacent regions.
 no virtual mapping has been installed by the stub 
		
		  This entry covers the start of @in, check whether
		  it covers the end as well.
  To be called after the EFI page tables have been populated. If a memory
  attributes table is available, its contents will be used to update the
  mappings with tightened permissions as described by the table.
  This requires the UEFI memory map to have already been populated with
  virtual addresses.
	
	  We need the EFI memory map to be setup so we can use it to
	  lookup the virtual addresses of all entries in the  of EFI
	  Memory Attributes table. If it isn't available, this
	  function should not be called.
 SPDX-License-Identifier: GPL-2.0
  fake_mem.c
  Copyright (C) 2015 FUJITSU LIMITED
  Author: Taku Izumi <izumi.taku@jp.fujitsu.com>
  This code introduces new boot option named "efi_fake_mem"
  By specifying this parameter, you can add arbitrary attribute to
  specific memory range by updating original (firmware provided) EFI
  memmap.
 count up the number of EFI memory descriptor 
 allocate memory for new EFI memmap 
 create new EFI memmap 
 swap into new EFI memmap 
 print new EFI memmap 
 SPDX-License-Identifier: GPL-2.0-only
  runtime-wrappers.c - Runtime Services function call wrappers
  Implementation summary:
  -----------------------
  1. When userkernel thread requests to execute efi_runtime_service(),
  enqueue work to efi_rts_wq.
  2. Caller thread waits for completion until the work is finished
  because it's dependent on the return status and execution of
  efi_runtime_service().
  For instance, get_variable() and get_next_variable().
  Copyright (C) 2014 Linaro Ltd. <ard.biesheuvel@linaro.org>
  Split off from archx86platformefiefi.c
  Copyright (C) 1999 VA Linux Systems
  Copyright (C) 1999 Walt Drummond <drummond@valinux.com>
  Copyright (C) 1999-2002 Hewlett-Packard Co.
  Copyright (C) 2005-2008 Intel Co.
  Copyright (C) 2013 SuSE Labs
  Wrap around the new efi_call_virt_generic() macros so that the
  code doesn't get too cluttered:
  efi_queue_work:	Queue efi_runtime_service() and wait until it's done
  @rts:		efi_runtime_service() function identifier
  @rts_arg<1-5>:	efi_runtime_service() function arguments
  Accesses to efi_runtime_services() are serialized by a binary
  semaphore (efi_runtime_lock) and caller waits until the work is
  finished, hence _only_ one work is queued at a time and the caller
  thread waits for completion.
									\
	  queue_work() returns 0 if work was already on queue,         \
	  _ideally_ this should never happen.                          \
  According to section 7.1 of the UEFI spec, Runtime Services are not fully
  reentrant, and there are particular combinations of calls that need to be
  serialized. (source: UEFI Specification v2.4A)
  Table 31. Rules for Reentry Into Runtime Services
  +------------------------------------+-------------------------------+
  | If previous call is busy in	| Forbidden to call		|
  +------------------------------------+-------------------------------+
  | Any				| SetVirtualAddressMap()	|
  +------------------------------------+-------------------------------+
  | ConvertPointer()			| ConvertPointer()		|
  +------------------------------------+-------------------------------+
  | SetVariable()			| ResetSystem()			|
  | UpdateCapsule()			|				|
  | SetTime()				|				|
  | SetWakeupTime()			|				|
  | GetNextHighMonotonicCount()	|				|
  +------------------------------------+-------------------------------+
  | GetVariable()			| GetVariable()			|
  | GetNextVariableName()		| GetNextVariableName()		|
  | SetVariable()			| SetVariable()			|
  | QueryVariableInfo()		| QueryVariableInfo()		|
  | UpdateCapsule()			| UpdateCapsule()		|
  | QueryCapsuleCapabilities()		| QueryCapsuleCapabilities()	|
  | GetNextHighMonotonicCount()	| GetNextHighMonotonicCount()	|
  +------------------------------------+-------------------------------+
  | GetTime()				| GetTime()			|
  | SetTime()				| SetTime()			|
  | GetWakeupTime()			| GetWakeupTime()		|
  | SetWakeupTime()			| SetWakeupTime()		|
  +------------------------------------+-------------------------------+
  Due to the fact that the EFI pstore may write to the variable store in
  interrupt context, we need to use a lock for at least the groups that
  contain SetVariable() and QueryVariableInfo(). That leaves little else, as
  none of the remaining functions are actually ever called at runtime.
  So let's just use a single lock to serialize all Runtime Services calls.
  Expose the EFI runtime lock to the UV platform
  Calls the appropriate efi_runtime_service() with the appropriate
  arguments.
  Semantics followed by efi_call_rts() to understand efi_runtime_work:
  1. If argument was a pointer, recast it from void pointer to original
  pointer type.
  2. If argument was a value, recast it from void pointer to original
  pointer type and dereference it.
		
		  Ideally, we should never reach here because a caller of this
		  function should have put the right efi_runtime_service()
		  function identifier into efi_rts_work->efi_rts_id
 SPDX-License-Identifier: GPL-2.0
  Extensible Firmware Interface
  Copyright (C) 2020 Western Digital Corporation or its affiliates.
  Based on Extensible Firmware Interface Specification version 2.4
  Adapted from driversfirmwareefiarm-runtime.c
  Enable the UEFI Runtime Services if all prerequisites are in place, i.e.,
  non-early mapping of the UEFI system table and virtual mappings for all
  EFI_MEMORY_RUNTIME regions.
 Set up runtime services function pointers 
 SPDX-License-Identifier: GPL-2.0+
  Originally from efivars.c,
  Copyright (C) 2001,2003,2004 Dell <Matt_Domsch@dell.com>
  Copyright (C) 2004 Intel Corporation <matthew.e.tolentino@intel.com>
  This code takes all variables accessible from EFI runtime and
   exports them via sysfs
  Prototype for sysfs creation function
	
	  If only updating the variable data, then the name
	  and guid should remain the same
  We allow each variable to be edited via rewriting the
  entire efi variable structure.
  Generic readwrite functions that call the specific functions of
  the attributes...
 It's dead Jim.... 
  efivar_create_sysfs_entry - create a new entry in sysfs
  @new_var: efivar entry to create
  Returns 0 on success, negative error code on failure
	
	  Length of the variable bytes in UTF8, plus the '-' separator,
	  plus the GUID, plus trailing NUL
	 This is ugly, but necessary to separate one vendor's
 new_var 
 del_var 
 Register 
 Remove all entries and destroy 
 No efivars has been registered yet 
 SPDX-License-Identifier: GPL-2.0+
		
		  Check if an old format,
		  which doesn't support holding
		  multiple logs, remains.
  efi_pstore_scan_sysfs_enter
  @pos: scanning entry
  @next: next entry
  @head: list head
  __efi_pstore_scan_sysfs_exit
  @entry: deleting entry
  @turn_off_scanning: Check if a scanning flag should be turned off
  efi_pstore_scan_sysfs_exit
  @pos: scanning entry
  @next: next entry
  @head: list head
  @stop: a flag checking if scanning will stop
  efi_pstore_sysfs_entry_iter
  @record: pstore record to pass to callback
  You MUST call efivar_entry_iter_begin() before this function, and
  efivar_entry_iter_end() afterwards.
  efi_pstore_read
  This function returns a size of NVRAM entry logged via efi_pstore_write().
  The meaning and behavior of efi_pstorepstore are as below.
  size > 0: Got data of an entry logged via efi_pstore_write() successfully,
            and pstore filesystem will continue reading subsequent entries.
  size == 0: Entry was not logged via efi_pstore_write(),
             and efi_pstore driver will continue reading subsequent entries.
  size < 0: Failed to get data of entry logging via efi_pstore_write(),
            and pstore will stop reading entry.
 Since we copy the entire length of name, make sure it is wiped. 
  Clean up an entry with the same name
		
		  Skip deletion because this entry will be deleted
		  after scanning is completed.
 found 
 Add new sysfs entries 
 SPDX-License-Identifier: GPL-2.0
  Common EFI memory map functions.
  efi_memmap_alloc - Allocate memory for the EFI memory map
  @num_entries: Number of entries in the allocated map.
  @data: efi memmap installation parameters
  Depending on whether mm_init() has already been invoked or not,
  either memblock or "normal" page allocation is used.
  Returns the physical address of the allocated memory map on
  success, zero on failure.
 Expect allocation parameters are zero initialized 
  __efi_memmap_init - Common code for mapping the EFI memory map
  @data: EFI memory map data
  This function takes care of figuring out which function to use to
  map the EFI memory map in efi.memmap based on how far into the boot
  we are.
  During bootup EFI_MEMMAP_LATE in data->flags should be clear since we
  only have access to the early_memremap() functions as the vmalloc
  space isn't setup.  Once the kernel is fully booted we can fallback
  to the more robust memremap() API.
  Returns zero on success, a negative error code on failure.
 NOP if data->flags & (EFI_MEMMAP_MEMBLOCK | EFI_MEMMAP_SLAB) == 0 
  efi_memmap_init_early - Map the EFI memory map data structure
  @data: EFI memory map data
  Use early_memremap() to map the passed in EFI memory map and assign
  it to efi.memmap.
 Cannot go backwards 
  efi_memmap_init_late - Map efi.memmap with memremap()
  @phys_addr: Physical address of the new EFI memory map
  @size: Size in bytes of the new EFI memory map
  Setup a mapping of the EFI memory map using ioremap_cache(). This
  function should only be called once the vmalloc space has been
  setup and is therefore not suitable for calling during early EFI
  initialise, e.g. in efi_init(). Additionally, it expects
  efi_memmap_init_early() to have already been called.
  The reason there are two EFI memmap initialisation
  (efi_memmap_init_early() and this late version) is because the
  early EFI memmap should be explicitly unmapped once EFI
  initialisation is complete as the fixmap space used to map the EFI
  memmap (via early_memremap()) is a scarce resource.
  This late mapping is intended to persist for the duration of
  runtime so that things like efi_mem_desc_lookup() and
  efi_mem_attributes() always work.
  Returns zero on success, a negative error code on failure.
 Did we forget to unmap the early EFI memmap? 
 Were we already called? 
	
	  It makes no sense to allow callers to register different
	  values for the following fields. Copy them out of the
	  existing early EFI memmap.
  efi_memmap_install - Install a new EFI memory map in efi.memmap
  @ctx: map allocation parameters (address, size, flags)
  Unlike efi_memmap_init_(), this function does not allow the caller
  to switch from early to late mappings. It simply uses the existing
  mapping function and installs the new memmap.
  Returns zero on success, a negative error code on failure.
  efi_memmap_split_count - Count number of additional EFI memmap entries
  @md: EFI memory descriptor to split
  @range: Address range (start, end) to split around
  Returns the number of additional EFI memmap entries required to
  accomodate @range.
 modifying range 
 split into 2 parts 
 split into 3 parts 
 split into 2 parts 
  efi_memmap_insert - Insert a memory region in an EFI memmap
  @old_memmap: The existing EFI memory map structure
  @buf: Address of buffer to store new map
  @mem: Memory map entry to insert
  It is suggested that you call efi_memmap_split_count() first
  to see how large @buf needs to be.
 modifying range 
	
	  The EFI memory map deals with regions in EFI_PAGE_SIZE
	  units. Ensure that the region described by 'mem' is aligned
	  correctly.
 copy original EFI memory descriptor 
 first part 
 latter part 
 first part 
 middle part 
 last part 
 first part 
 latter part 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2014 Intel Corporation; author Matt Fleming
  Copyright (c) 2014 Red Hat, Inc., Mark Salter <msalter@redhat.com>
	
	  If a quirk forced an EFI reset mode, always use that.
	
	  The above call should not return, if it does fall back to
	  the original power off method (typically ACPI poweroff).
 SPDX-License-Identifier: GPL-2.0
  Copyright 2012 Intel Corporation
  Author: Josh Triplett <josh@joshtriplett.org>
  Based on the bgrt driver:
  Copyright 2012 Red Hat, Inc <mjg@redhat.com>
  Author: Matthew Garrett
	
	  Only version 1 is defined but some older laptops (seen on Lenovo
	  Ivy Bridge models) have a correct version 1 BGRT table with the
	  version set to 0, so we accept version 0 and 1.
 SPDX-License-Identifier: GPL-2.0
  EFI capsule loader driver.
  Copyright 2015 Intel Corporation
  efi_free_all_buff_pages - free all previous allocated buffer pages
  @cap_info: pointer to current instance of capsule_info structure
 	In addition to freeing buffer pages, it flags NO_FURTHER_WRITE_ACTION
 	to cease processing data in subsequent write(2) calls until close(2)
 	is called.
 Check if the capsule binary supported 
  efi_capsule_setup_info - obtain the efi capsule header in the binary and
 			    setup capsule_info structure
  @cap_info: pointer to current instance of capsule_info structure
  @kbuff: a mapped first page buffer pointer
  @hdr_bytes: the total received number of bytes for efi header
  Platforms with non-standard capsule update mechanisms can override
  this __weak function so they can perform any required capsule
  image munging. See quark_quirk_function() for an example.
 Only process data block that is larger than efi header size 
  efi_capsule_submit_update - invoke the efi_capsule_update API once binary
 			       upload done
  @cap_info: pointer to current instance of capsule_info structure
	
	  cap_info->capsule may have been assigned already by a quirk
	  handler, so only overwrite it if it is NULL
 Indicate capsule binary uploading is done 
  efi_capsule_write - store the capsule binary and pass it to
 		       efi_capsule_update() API
  @file: file pointer
  @buff: buffer pointer
  @count: number of bytes in @buff
  @offp: not used
 	Expectation:
 	- A user space tool should start at the beginning of capsule binary and
 	  pass data in sequentially.
 	- Users should close and re-open this file note in order to upload more
 	  capsules.
 	- After an error returned, user should close the file and restart the
 	  operation for the next try otherwise -EIO will be returned until the
 	  file is closed.
 	- An EFI capsule header must be located at the beginning of capsule
 	  binary file and passed in as first block data of write operation.
 Return error while NO_FURTHER_WRITE_ACTION is flagged 
 Only alloc a new page when previous page is full 
 Copy capsule binary data from user space to kernel space buffer 
 Setup capsule binary info structure 
 Submit the full binary to efi_capsule_update() API 
  efi_capsule_flush - called by file close or file flush
  @file: file pointer
  @id: not used
 	If a capsule is being partially uploaded then calling this function
 	will be treated as upload termination and will free those completed
 	buffer pages and -ECANCELED will be returned.
  efi_capsule_release - called by file close
  @inode: not used
  @file: file pointer
 	We will not free successfully submitted pages since efi update
 	requires data to be maintained across system reboot.
  efi_capsule_open - called by file open
  @inode: not used
  @file: file pointer
 	Will allocate each capsule_info memory for each file open call.
 	This provided the capability to support multiple file open feature
 	where user is not needed to wait for others to finish in order to
 	upload their capsule binary.
 SPDX-License-Identifier: GPL-2.0
 Copyright (C) 2018, Advanced Micro Devices, Inc.
  We don't need a "CPER_IA" prefix since these are all locally defined.
  This will save us a lot of line space.
	
	  The MS Check structure varies a lot from the others, so use a
	  separate function for decoding.
		
		  CACHE has more operation types than TLB or BUS, though the
		  name and the order are the same.
 MSRs are 8 bytes wide. 
 SPDX-License-Identifier: GPL-2.0
 Copyright(c) 2019 Intel Corporation. All rights reserved. 
	
	  The late efi_fake_mem() call can handle all requests if
	  EFI_MEMORY_SP support is disabled.
	
	  Given that efi_fake_memmap() needs to perform memblock
	  allocations it needs to run after e820__memblock_setup().
	  However, if efi_fake_mem specifies EFI_MEMORY_SP for a given
	  address range that potentially needs to mark the memory as
	  reserved prior to e820__memblock_setup(). Update e820
	  directly if EFI_MEMORY_SP is specified for an
	  EFI_CONVENTIONAL_MEMORY descriptor.
 fake range overlaps descriptor ;
			
			  Trim the boundary of the e820 update to the
			  descriptor in case the fake range overlaps
			  !EFI_CONVENTIONAL_MEMORY
			
			  Ensure each efi_fake_mem instance results in
			  a unique e820 resource
 SPDX-License-Identifier: GPL-2.0
  Extensible Firmware Interface
  Based on Extensible Firmware Interface Specification version 2.4
  Copyright (C) 2013, 2014 Linaro Ltd.
  Enable the UEFI Runtime Services if all prerequisites are in place, i.e.,
  non-early mapping of the UEFI system table and virtual mappings for all
  EFI_MEMORY_RUNTIME regions.
 Set up runtime services function pointers 
	
	  On arm64ARM, DMI depends on UEFI, and dmi_setup() needs to
	  be called early because dmi_id_init(), which is an arch_initcall
	  itself, depends on dmi_scan_machine() having been called already.
 SPDX-License-Identifier: GPL-2.0+
  esrt.c
  This module exports EFI System Resource Table (ESRT) entries into userspace
  through the sysfs file system. The ESRT provides a read-only catalog of
  system components for which the system accepts firmware upgrades via UEFI's
  "Capsule Update" feature. This module allows userland utilities to evaluate
  what firmware updates can be applied to this system, and potentially arrange
  for those updates to occur.
  Data is currently found below sysfirmwareefiesrt...
  _count and _version are what they seem like.  _max is actually just
  accounting info for the firmware when creating the table; it should never
  have been exposed to us.  To wit, the spec says:
  The maximum number of resource array entries that can be within the
  table without reallocating the table, must not be zero.
  Since there's no guidance about what that means in terms of memory layout,
  it means nothing to us.
 global list of esre_entry. 
 entry attribute 
 Don't tell normal users what firmware versions we've got... 
 Generic ESRT Entry ("ESRE") support. 
 support for displaying ESRT fields at the top level 
  remap the table, validate it, mark it reserved and unmap it.
	
	  The format doesn't really give us any boundary to test here,
	  so I'm making up 128 as the max number of individually updatable
	  components we support.
	  128 should be pretty excessive, but there's still some chance
	  somebody will do that someday and we'll need to raise this.
	
	  We know it can't be larger than N  sizeof() here, and N is limited
	  by the previous test to a small number, so there's no overflow.
MODULE_AUTHOR("Peter Jones <pjones@redhat.com>");
MODULE_DESCRIPTION("EFI System Resource Table support");
MODULE_LICENSE("GPL");
 SPDX-License-Identifier: GPL-2.0+
  EFI Test Driver for Runtime Services
  Copyright(C) 2012-2016 Canonical Ltd.
  This driver exports EFI runtime services interfaces into userspace, which
  allow to use and test UEFI runtime services provided by firmware.
  Count the bytes in 'str', including the terminating NULL.
  Note this function returns the number of bytes, not the number of
  ucs2 characters.
 Include terminating NULL 
 Can't read userspace memory for size 
 Can't read userspace memory for size 
  Allocate a buffer and copy a ucs2 string from user space into it.
  Count the bytes in 'str', including the terminating NULL.
  Just a wrap for user_ucs2_strsize
  Calculate the required buffer allocation size and copy a ucs2 string
  from user space into it.
  This function differs from copy_ucs2_from_user_len() because it
  calculates the size of the buffer to allocate by taking the length of
  the string 'src'.
  If a non-zero value is returned, the caller MUST NOT access 'dst'.
  It is the caller's responsibility to free 'dst'.
  Copy a ucs2 string to a user buffer.
  This function is a simple wrapper around copy_to_user() that does
  nothing if 'src' is NULL, which is useful for reducing the amount of
  NULL checking the caller has to do.
  'len' specifies the number of bytes to copy.
		
		  The name_size may be smaller than the real buffer size where
		  variable name located in some use cases. The most typical
		  case is passing a 0 to get the required buffer size for the
		  1st time call. So we need to copy the content from user
		  space for at least the string size of variable name, or else
		  the name passed to UEFI may not be terminated as we expected.
		
		  We cannot dereference qcaps.capsule_header_array directly to
		  obtain the address of the capsule as it resides in the
		  user space
	
	  nothing special to do here
	  We do accept multiple open files at the same time as we
	  synchronize on the per call operation.
 	The various file operations we support.
 SPDX-License-Identifier: GPL-2.0-only
  EFI stub implementation that is shared by arm and arm64 architectures.
  This should be #included by the EFI stub implementation files.
  Copyright (C) 2013,2014 Linaro Limited
      Roy Franz <roy.franz@linaro.org
  Copyright (C) 2013 Red Hat, Inc.
      Mark Salter <msalter@redhat.com>
  This is the base address at which to start allocating virtual memory ranges
  for UEFI Runtime Services.
  For ARMARM64:
  This is in the low TTBR0 range so that we can use
  any allocation we choose, and eliminate the risk of a conflict after kexec.
  The value chosen is the largest non-zero power of 2 suitable for this purpose
  both on 32-bit and 64-bit ARM CPUs, to maximize the likelihood that it can
  be mapped efficiently.
  Since 32-bit ARM could potentially execute with a 1G3G userkernel split,
  map everything below 1 GB. (512 MB is a reasonable upper bound for the
  entire footprint of the UEFI runtime services memory regions)
  For RISC-V:
  There is no specific reason for which, this address (512MB) can't be used
  EFI runtime virtual address for RISC-V. It also helps to use EFI runtime
  services on both RV32RV64. Keep the same runtime virtual address for RISC-V
  as well to minimize the code churn.
  EFI entry point for the armarm64 EFI stubs.  This is the entrypoint
  that is described in the PECOFF header.  Most of the code is the same
  for both archictectures, with the arch-specific code provided in the
  handle_kernel_image() function.
 addrpoint and size pairs for memory management
 Original DTB 
 Check if we were booted by the EFI firmware 
	
	  Get a handle to the loaded image protocol.  This is used to get
	  information about the running image, such as size and the command
	  line.
	
	  Get the command line from EFI, using the LOADED_IMAGE
	  protocol. We are going to copy the command line into the
	  device tree, so this can be allocated anywhere.
 Ask the firmware to clear memory on unclean shutdown 
	
	  Unauthenticated device tree data is a security hazard, so ignore
	  'dtb=' unless UEFI Secure Boot is disabled.  We assume that secure
	  boot is enabled if we can't determine its state.
 Look for a device tree configuration table entry. 
	
	  If the NX PE data feature is enabled in the properties table, we
	  should take care not to create a virtual mapping that changes the
	  relative placement of runtime services code and data regions, as
	  they may belong to the same PECOFF executable image in memory.
	  The easiest way to achieve that is to simply use a 1:1 mapping.
 force efi_novamap if SetVirtualAddressMap() is unsupported 
 hibernation expects the runtime regions to stay in the same place 
		
		  Randomize the base of the UEFI runtime services region.
		  Preserve the 2 MB alignment of the region by taking a
		  shift of 21 bit positions into account when scaling
		  the headroom value using a 32-bit random value.
 not reached 
  efi_get_virtmap() - create a virtual mapping for the EFI memory map
  This function populates the virt_addr fields of all memory region descriptors
  in @memory_map whose EFI_MEMORY_RUNTIME attribute is set. Those descriptors
  are also copied to @runtime_map, and their total count is returned in @count.
		
		  Make the mapping compatible with 64k pages: this allows
		  a 4k page size kernel to kexec a 64k page size kernel and
		  vice versa.
			
			  Avoid wasting memory on PTEs by choosing a virtual
			  base that is compatible with section mappings if this
			  region has the appropriate size and physical
			  alignment. (Sections are 2 MB on 4k granule kernels)
 SPDX-License-Identifier: GPL-2.0
  efi_low_alloc_above() - allocate pages at or above given address
  @size:	size of the memory area to allocate
  @align:	minimum alignment of the allocated memory area. It should
 		a power of two.
  @addr:	on exit the address of the allocated memory
  @min:	minimum address to used for the memory allocation
  Allocate at the lowest possible address that is not below @min as
  EFI_LOADER_DATA. The allocated pages are aligned according to @align but at
  least EFI_ALLOC_ALIGN. The first allocated page will not below the address
  given by @min.
  Return:	status code
	
	  Enforce minimum alignment that EFI or Linux requires when
	  requesting a specific address.  We are doing page-based (or
	  larger) allocations, and both the address and size must meet
	  alignment constraints.
  efi_relocate_kernel() - copy memory area
  @image_addr:		pointer to address of memory area to copy
  @image_size:		size of memory area to copy
  @alloc_size:		minimum size of memory to allocate, must be greater or
 			equal to image_size
  @preferred_addr:	preferred target address
  @alignment:		minimum alignment of the allocated memory area. It
 			should be a power of two.
  @min_addr:		minimum target address
  Copy a memory area to a newly allocated memory area aligned according
  to @alignment but at least EFI_ALLOC_ALIGN. If the preferred address
  is not available, the allocated address will not be below @min_addr.
  On exit, @image_addr is updated to the target copy address that was used.
  This function is used to copy the Linux kernel verbatim. It does not apply
  any relocation changes.
  Return:		status code
	
	  The EFI firmware loader could have placed the kernel image
	  anywhere in memory, but the kernel has restrictions on the
	  max physical address it can run at.  Some architectures
	  also have a preferred address, so first try to relocate
	  to the preferred address.  If that fails, allocate as low
	  as possible while respecting the required alignment.
	
	  If preferred address allocation failed allocate as low as
	  possible.
	
	  We know sourcedest won't overlap since both memory ranges
	  have been allocated by UEFI, so we can safely use memcpy.
 Return the new address of the relocated image. 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2020 Western Digital Corporation or its affiliates.
  RISC-V requires the kernel image to placed 2 MB aligned base for 64 bit and
  4MB for 32 bit.
	
	  Jump to real kernel here with following constraints.
	  1. MMU should be disabled.
	  2. a0 should contain hartid
	  3. a1 should DT address
	
	  RISC-V kernel maps PAGE_OFFSET virtual address to the same physical
	  address where kernel is booted. That's why kernel should boot from
	  as low as possible to avoid wastage of memory. Currently, dram_base
	  is occupied by the firmware. So the preferred address for kernel to
	  boot is next aligned address. If preferred address is not available,
	  relocate_kernel will fall back to efi_low_alloc_above to allocate
	  lowest possible memory region as long as the address and size meets
	  the alignment constraints.
 SPDX-License-Identifier: GPL-2.0
  FDT related Helper functions used by the EFI stub on multiple
  architectures. This should be #included by the EFI stub
  implementation files.
  Copyright 2013 Linaro Limited; author Roy Franz
 Set the #address-cells and #size-cells values for an empty tree 
 Do some checks on provided FDT, if it exists: 
		
		  We don't get the size of the FDT if we get if from a
		  configuration table:
			
			  Any failure from the following function is
			  non-critical:
	
	  Delete all memory reserve map entries. When booting via UEFI,
	  kernel will use the UEFI memory map to find reserved regions.
 'node' is an error code when negative: 
 Set initrd addressend in device tree, if present 
 Add FDT entries for EFI runtime services in chosen node. 
 placeholder 
 placeholder 
 Shrink the FDT back to its minimum size: 
	
	  Update the memory map with virtual addresses. The function will also
	  populate @runtime_map with copies of just the EFI_MEMORY_RUNTIME
	  entries so that we can pass it straight to SetVirtualAddressMap()
  Allocate memory for a new FDT, then add EFI, commandline, and
  initrd related fields to the FDT.  This routine increases the
  FDT allocation size until the allocated memory is large
  enough.  EFI allocations are in EFI_PAGE_SIZE granules,
  which are fixed at 4K bytes, so in most cases the first
  allocation should succeed.
  EFI boot services are exited at the end of this function.
  There must be no allocations between the get_memory_map()
  call and the exit_boot_services() call, so the exiting of
  boot services is very tightly tied to the creation of the FDT
  with the final memory map in it.
	
	  Get a copy of the current memory map that we will use to prepare
	  the input for SetVirtualAddressMap(). We don't have to worry about
	  subsequent allocations adding entries, since they could not affect
	  the number of EFI_MEMORY_RUNTIME regions.
	
	  Now that we have done our final memory allocation (and free)
	  we can get the memory map key needed for exit_boot_services().
 Install the new virtual address map 
		
		  We are beyond the point of no return here, so if the call to
		  SetVirtualAddressMap() failed, we need to signal that to the
		  incoming kernel but proceed normally otherwise.
			
			  Set the virtual address field of all
			  EFI_MEMORY_RUNTIME entries to 0. This will signal
			  the incoming kernel that no virtual translation has
			  been installed.
 SPDX-License-Identifier: GPL-2.0
  efi_allocate_pages_aligned() - Allocate memory pages
  @size:	minimum number of bytes to allocate
  @addr:	On return the address of the first allocated page. The first
 		allocated page has alignment EFI_ALLOC_ALIGN which is an
 		architecture dependent multiple of the page size.
  @max:	the address that the last allocated memory page shall not
 		exceed
  @align:	minimum alignment of the base of the allocation
  Allocate pages as EFI_LOADER_DATA. The allocated pages are aligned according
  to @align, which should be >= EFI_ALLOC_ALIGN. The last allocated page will
  not exceed the address given by @max.
  Return:	status code
 SPDX-License-Identifier: GPL-2.0
  TPM handling.
  Copyright (C) 2016 CoreOS, Inc
  Copyright (C) 2017 Google, Inc.
      Matthew Garrett <mjg59@google.com>
      Thiebaud Weksteen <tweek@google.com>
  Enable reboot attack mitigation. This requests that the firmware clear the
  RAM on next reboot before proceeding with boot, ensuring that any secrets
  are cleared. If userland has ensured that all secrets have been removed
  from RAM before reboot it can simply reset this variable.
	
	  We populate the EFI table even if the logs are empty.
		
		  get_event_log only returns the address of the last entry.
		  We need to calculate its size to deduce the full size of
		  the logs.
			
			  The TCG2 log format has variable length entries,
			  and the information to decode the hash algorithms
			  back into a size is contained in the first entry -
			  pass a pointer to the final entry (to calculate its
			  size) and the first entry (so we know how long each
			  digest is)
 Allocate space for the logs and copy them. 
	
	  Figure out whether any events have already been logged to the
	  final events structure, and if so how much space they take up
 SPDX-License-Identifier: GPL-2.0
  Secure boot handling.
  Copyright (C) 2013,2014 Linaro Limited
      Roy Franz <roy.franz@linaro.org
  Copyright (C) 2013 Red Hat, Inc.
      Mark Salter <msalter@redhat.com>
 SHIM variables 
  Determine whether we're in secure boot mode.
	
	  See if a user has put the shim into insecure mode. If so, and if the
	  variable doesn't have the runtime attribute set, we might as well
	  honor that.
 If it fails, we don't care why. Default to secure 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2016 Linaro Ltd;  <ard.biesheuvel@linaro.org>
  Return the number of slots covered by this entry, i.e., the number of
  addresses it covers that are suitably aligned and supply enough room
  for the allocation.
  The UEFI memory descriptors have a virtual address field that is only used
  when installing the virtual mapping using SetVirtualAddressMap(). Since it
  is unused here, we can reuse it to keep track of each descriptor's slot
  count.
 count the suitable slots in each memory map entry 
 find a random number between 0 and total_slots 
	
	  target_slot is now a value in the range [0, total_slots), and so
	  it corresponds with exactly one of the suitable slots we recorded
	  when iterating over the memory map the first time around.
	 
	  So iterate over the memory map again, subtracting the number of
	  slots of each entry at each iteration, until we have found the entry
	  that covers our chosen slot. Use the residual value of target_slot
	  to calculate the randomly chosen address, and allocate it directly
	  using EFI_ALLOCATE_ADDRESS.
 SPDX-License-Identifier: GPL-2.0
 -----------------------------------------------------------------------
    Copyright 2011 Intel Corporation; author Matt Fleming
 UEFI spec guarantees that the set bits are contiguous 
 PIXEL_BGR_RESERVED_8BIT_PER_COLOR  {
		
		  Systems that use the UEFI Console Splitter may
		  provide multiple GOP devices, not all of which are
		  backed by real hardware. The workaround is to search
		  for a GOP implementing the ConOut protocol, and if
		  one isn't found, to just fall back to the first GOP.
		 
		  Once we've found a GOP supporting ConOut,
		  don't bother looking any further.
 Did we find any GOPs? 
 Change mode if requested 
 EFI framebuffer 
  See if we have Graphics Output Protocol
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2016 Linaro Ltd;  <ard.biesheuvel@linaro.org>
  efi_get_random_bytes() - fill a buffer with random bytes
  @size:	size of the buffer
  @out:	caller allocated buffer to receive the random bytes
  The call will fail if either the firmware does not implement the
  EFI_RNG_PROTOCOL or there are not enough random bytes available to fill
  the buffer.
  Return:	status code
  efi_random_get_seed() - provide random seed as configuration table
  The EFI_RNG_PROTOCOL is used to read random bytes. These random bytes are
  saved as a configuration table which can be used as entropy by the kernel
  for the initialization of its pseudo random number generator.
  If the EFI_RNG_PROTOCOL is not available or there are not enough random bytes
  available, the configuration table will not be installed and an error code
  will be returned.
  Return:	status code
		
		  Use whatever algorithm we have available if the raw algorithm
		  is not implemented.
 SPDX-License-Identifier: GPL-2.0
  PCI-related functions used by the EFI stub on multiple
  architectures.
  Copyright 2019 Google, LLC
		
		  Disregard devices living on bus 0 - these are not behind a
		  bridge so no point in disconnecting them from their drivers.
		
		  Don't disconnect VGA controllers so we don't risk losing
		  access to the framebuffer. Drivers for true PCIe graphics
		  controllers that are behind a PCIe root port do not use
		  DMA to implement the GOP framebuffer anyway [although they
		  may use it in their implementation of Gop->Blt()], and so
		  disabling DMA in the PCI bridge should not interfere with
		  normal operation of the device.
 Disconnect this handle from all its drivers 
 Disable busmastering 
 SPDX-License-Identifier: GPL-2.0
  Helper functions used by the EFI stub on multiple
  architectures. This should be #included by the EFI stub
  implementation files.
  Copyright 2011 Intel Corporation; author Matt Fleming
  Some firmware implementations have problems reading files in one go.
  A read chunk size of 1MB seems to work for most platforms.
  Unfortunately, reading files in chunks triggers other bugs on some
  platforms, so we provide a way to disable this workaround, which can
  be done by passing "efi=nochunk" on the EFI boot stub command line.
  If you experience issues with initrd images being corrupt it's worth
  trying efi=nochunk, but chunking is enabled by default on x86 because
  there are far more machines that require the workaround than those that
  break with it enabled.
 Skip any leading slashes 
 Replace UNIX dir separators with EFI standard ones 
  Check the cmdline for a LILO-style file= arguments.
  We only support loading a file from the same filesystem as
  the kernel image.
		
		  Check whether the existing allocation can contain the next
		  file. This condition will also trigger naturally during the
		  first (and typically only) iteration of the loop, given that
		  alloc_size == 0 in that case.
				
				  This is not the first time we've gone
				  around this loop, and so we are loading
				  multiple files that need to be concatenated
				  and returned in a single buffer.
 SPDX-License-Identifier: GPL-2.0
  Taken from:
   linuxlibstring.c
   Copyright (C) 1991, 1992  Linus Torvalds
  strstr - Find the first substring in a %NUL terminated string
  @s1: The string to be searched
  @s2: The string to search for
  strncmp - Compare two length-limited strings
  @cs: One string
  @ct: Another string
  @count: The maximum number of bytes to compare
 Works only for digits and letters, but small and fast 
  simple_strtoull - convert a string to an unsigned long long
  @cp: The start of the string
  @endp: A pointer to the end of the parsed string will be placed here
  @base: The number base to use
 SPDX-License-Identifier: GPL-2.0
  Helper functions used by the EFI stub on multiple
  architectures. This should be #included by the EFI stub
  implementation files.
  Copyright 2011 Intel Corporation; author Matt Fleming
 For CONSOLE_LOGLEVEL_ 
  efi_char16_puts() - Write a UCS-2 encoded string to the console
  @str:	UCS-2 encoded string
	
	  The position of the most-significant 0 bit gives us the length of
	  a multi-octet encoding.
	
	  If the 0 bit is in position 8, this is a valid single-octet
	  encoding. If the 0 bit is in position 7 or positions 1-3, the
	  encoding is invalid.
	  In either case, we just return the first octet.
 Get the bits from the first octet. 
 Trailing octets must have 10 in most significant bits. 
	
	  Check for validity:
	  - The character must be in the Unicode range.
	  - It must not be a surrogate.
	  - It must be encoded using the correct number of octets.
  efi_puts() - Write a UTF-8 encoded string to the console
  @str:	UTF-8 encoded string
 Characters in plane 0 use a single word. 
			
			  Characters in other planes encode into a surrogate
			  pair.
  efi_printk() - Print a kernel message
  @fmt:	format string
  The first letter of the format string is used to determine the logging level
  of the message. If the level is less then the current EFI logging level, the
  message is suppressed. The message will be truncated to 255 bytes.
  Return:	number of printed characters
		
		  Use loglevel -1 for cases where we just want to print to
		  the screen.
  efi_parse_options() - Parse EFI command line options
  @cmdline:	kernel command line
  Parse the ASCII string @cmdline for EFI options, denoted by the efi=
  option, e.g. efi=nochunk.
  It should be noted that efi= is parsed in two very different
  environments, first in the early boot environment of the EFI boot
  stub, and subsequently during the kernel boot.
  Return:	status code
  The EFI_LOAD_OPTION descriptor has the following layout:
 	u32 Attributes;
 	u16 FilePathListLength;
 	u16 Description[];
 	efi_device_path_protocol_t FilePathList[];
 	u8 OptionalData[];
  This function validates and unpacks the variable-size data fields.
 Scan description. 
 Scan file_path_list. 
  At least some versions of Dell firmware pass the entire contents of the
  Boot#### variable, i.e. the EFI_LOAD_OPTION descriptor, rather than just the
  OptionalData field.
  Detect this case and extract OptionalData.
  Convert the unicode UEFI command line to ASCII to pass to kernel.
  Size of memory allocated return in cmd_line_len.
  Returns NULL on error.
 UTF-8 bytes 
			
			  Get the number of UTF-8 bytes corresponding to a
			  UTF-16 character.
			  The first part handles everything in the BMP.
			
			  Add one more byte for valid surrogate pairs. Invalid
			  surrogates will be replaced with 0xfffd and take up
			  only 3 bytes.
				
				  If the very last word is a high surrogate,
				  we must ignore it since we can't access the
				  low surrogate.
 NUL termination 
  efi_exit_boot_services() - Exit boot services
  @handle:	handle of the exiting image
  @map:	pointer to receive the memory map
  @priv:	argument to be passed to @priv_func
  @priv_func:	function to process the memory map before exiting boot services
  Handle calling ExitBootServices according to the requirements set out by the
  spec.  Obtains the current memory map, and returns that info after calling
  ExitBootServices.  The client must specify a function to perform any
  processing of the memory map data prior to ExitBootServices.  A client
  specific structure may be passed to the function via priv.  The client
  function may be called multiple times.
  Return:	status code
		
		  The memory map changed between efi_get_memory_map() and
		  exit_boot_services().  Per the UEFI Spec v2.6, Section 6.4:
		  EFI_BOOT_SERVICES.ExitBootServices we need to get the
		  updated map, and try again.  The spec implies one retry
		  should be sufficent, which is confirmed against the EDK2
		  implementation.  Per the spec, we can only invoke
		  get_memory_map() and exit_boot_services() - we cannot alloc
		  so efi_get_memory_map() cannot be used, and we must reuse
		  the buffer.  For all practical purposes, the headroom in the
		  buffer should account for any changes in the map so the call
		  to get_memory_map() is expected to succeed here.
 exit_boot_services() was called, thus cannot free 
 exit_boot_services() was called, thus cannot free 
 exit_boot_services() was called, thus cannot free 
  get_efi_config_table() - retrieve UEFI configuration table
  @guid:	GUID of the configuration table to be retrieved
  Return:	pointer to the configuration table or NULL
  The LINUX_EFI_INITRD_MEDIA_GUID vendor media device path below provides a way
  for the firmware or bootloader to expose the initrd data directly to the stub
  via the trivial LoadFile2 protocol, which is defined in the UEFI spec, and is
  very easy to implement. It is a simple Linux initrd specific conduit between
  kernel and firmware, allowing us to put the EFI stub (being part of the
  kernel) in charge of where and when to load the initrd, while leaving it up
  to the firmware to decide whether it needs to expose its filesystem hierarchy
  via EFI protocols.
  efi_load_initrd_dev_path() - load the initrd from the Linux initrd device path
  @load_addr:	pointer to store the address where the initrd was loaded
  @load_size:	pointer to store the size of the loaded initrd
  @max:	upper limit for the initrd memory allocation
  Return:
   %EFI_SUCCESS if the initrd was loaded successfully, in which
    case @load_addr and @load_size are assigned accordingly
   %EFI_NOT_FOUND if no LoadFile2 protocol exists on the initrd device path
   %EFI_INVALID_PARAMETER if load_addr == NULL or load_size == NULL
   %EFI_OUT_OF_RESOURCES if memory allocation failed
   %EFI_LOAD_ERROR in all other cases
  efi_load_initrd() - Load initial RAM disk
  @image:	EFI loaded image protocol
  @load_addr:	pointer to loaded initrd
  @load_size:	size of loaded initrd
  @soft_limit:	preferred address for loading the initrd
  @hard_limit:	upper limit address for loading the initrd
  Return:	status code
  efi_wait_for_key() - Wait for key stroke
  @usec:	number of microseconds to wait for key stroke
  @key:	key entered
  Wait for up to @usec microseconds for a key stroke.
  Return:	status code, EFI_SUCCESS if key received
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2013, 2014 Linaro Ltd;  <roy.franz@linaro.org>
  This file implements the EFI boot stub for the arm64 kernel.
  Adapted from ARM version by Mark Salter <msalter@redhat.com>
 UEFI mandates support for 4 KB granularity, no need to check 
  Distro versions of GRUB may ignore the BSS allocation entirely (i.e., fail
  to provide space, and fail to zero it). Check for this condition by double
  checking that the first and the last byte of the image are covered by the
  same EFI memory map entry.
		
		  Find the region that covers base, and return whether
		  it covers base+size bytes.
	
	  Although relocatable kernels can fix up the misalignment with
	  respect to MIN_KIMG_ALIGN, the resulting virtual text addresses are
	  subtly out of sync with those recorded in the vmlinux when kaslr is
	  disabled but the image required relocation anyway. Therefore retain
	  2M alignment if KASLR was explicitly disabled, even if it was not
	  going to be activated to begin with.
		
		  If KASLR is enabled, and we have some randomness available,
		  locate the kernel at a randomized offset in physical memory.
			
			  Just execute from wherever we were loaded by the
			  UEFI PECOFF loader if the alignment is suitable.
 SPDX-License-Identifier: GPL-2.0-only
 -----------------------------------------------------------------------
    Copyright 2011 Intel Corporation; author Matt Fleming
 Maximum physical address for 64-bit kernel with 4-level paging 
	
	  Some firmware images contain EFI function pointers at the place where
	  the romimage and romsize fields are supposed to be. Typically the EFI
	  code is mapped at high addresses, translating to an unrealistically
	  large romsize. The UEFI spec limits the size of option ROMs to 16
	  MiB so we reject any ROMs over 16 MiB in size to catch this.
  There's no way to return an informative status from this function,
  because any analysis (and printing of error messages) needs to be
  done directly at the EFI function call-site.
  For example, EFI_INVALID_PARAMETER could indicate a bug or maybe we
  just didn't find any PCI devices, but there's no way to tell outside
  the context of the call.
  See if we have Universal Graphics Adapter (UGA) protocol
			
			  Once we've found a UGA supporting PCIIO,
			  don't bother looking any further.
 EFI framebuffer 
  Because the x86 boot code expects to be passed a boot_params we
  need to create one ourselves (usually the bootloader would create
  one for us).
 Check if we were booted by the EFI firmware 
 Copy the setup header from the second sector to boot_params 
	
	  Fill out some of the header fields ourselves because the
	  EFI firmware loader doesn't load the first sector.
 Convert unicode cmdline to ascii 
 not reached 
 Merge adjacent mappings 
 boot_params map full, switch to e820 extended 
 Only need the size of the mem map and size of each mem descriptor 
 Might as well exit boot services now 
 Historic? 
  On success, we return the address of startup_32, which has potentially been
  relocated by efi_relocate_kernel.
  On failure, we exit to the firmware via efi_exit instead of returning.
 Check if we were booted by the EFI firmware 
	
	  If the kernel isn't already loaded at a suitable address,
	  relocate it.
	 
	  It must be loaded above LOAD_PHYSICAL_ADDR.
	 
	  The maximum address for 64-bit is 1 << 46 for 4-level paging. This
	  is defined as the macro MAXMEM, but unfortunately that is not a
	  compile-time constant if 5-level paging is configured, so we instead
	  define our own macro for use here.
	 
	  For 32-bit, the maximum address is complicated to figure out, for
	  now use KERNEL_IMAGE_SIZE, which will be 512MiB, the same as what
	  KASLR uses.
	 
	  Also relocate it if image_offset is zero, i.e. the kernel wasn't
	  loaded by LoadImage, but rather by a bootloader that called the
	  handover entry. The reason we must always relocate in this case is
	  to handle the case of systemd-boot booting a unified kernel image,
	  which is a PE executable that contains the bzImage and an initrd as
	  COFF sections. The initrd section is placed after the bzImage
	  without ensuring that there are at least init_size bytes available
	  for the bzImage, and thus the compressed kernel's startup code may
	  overwrite the initrd unless it is moved out of the way.
		
		  Now that we've copied the kernel elsewhere, we no longer
		  have a set up block before startup_32(), so reset image_offset
		  to zero in case it was set earlier.
	
	  At this point, an initrd may already have been loaded by the
	  bootloader and passed via bootparams. We permit an initrd loaded
	  from the LINUX_EFI_INITRD_MEDIA_GUID device path to supersede it.
	 
	  If the device path is not present, any command-line initrd=
	  arguments will be processed only if image is not NULL, which will be
	  the case only if we were loaded via the PE entry point.
	
	  If the boot loader gave us a value for secure_boot then we use that,
	  otherwise we ask the BIOS.
 Ask the firmware to clear memory on unclean shutdown 
 SPDX-License-Identifier: GPL-2.0-only
 -- linux-c -- ------------------------------------------------------- 
    Copyright (C) 1991, 1992 Linus Torvalds
    Copyright 2007 rPath, Inc. - All Rights Reserved
  Oh, it's a waste of space, but oh-so-yummy for debugging.
  put_dec_full4 handles numbers in the range 0 <= r < 10000.
  The multiplier 0xccd is round(2^1510), and the approximation
  r10 == (r  0xccd) >> 15 is exact for all r < 16389.
 put_dec is copied from libvsprintf.c with small modifications 
  Call put_dec_full4 on x % 10000, return x  10000.
  The approximation x10000 == (x  0x346DC5D7) >> 43
  holds for all x < 1,128,869,999.  The largest value this
  helper will ever be asked to convert is 1,125,520,955.
  (second call in the put_dec code, assuming n is all-ones).
 Based on code by Douglas W. Jones found at
  <http:www.cs.uiowa.edu~jonesbcddecimal.html#sixtyfour>
  (with permission from the author).
  Performs no 64-bit division and hence should be fast on 32-bit machines.
 implicit "& 0xffff" 
 implicit "& 0xffff" 
	 n = 2^48 d3 + 2^32 d2 + 2^16 d1 + d0
 strip off the extra 0's we printed 
	
	  locase = 0 or 0x20. ORing digits or letters with 'locase'
	  produces same digits or (maybe lowercased) letters
 we are called with base 8, 10 or 16, only, thus don't need "G..."  
 "GHIJKLMNOPQRSTUVWXYZ"; 
 pad with zero 
 unsignedsigned long 
 show plus 
 space if plus 
 left justified 
 Must be 32 == 0x20 
 0x 
 UTF-16 string 
 it's the next argument 
 First, get the length for a BMP character 
		
		  If this is a high surrogate, and we're already at maxlen, we
		  can't include the character if it's a valid surrogate pair.
		  Avoid accessing one extra word just to check if it's valid
		  or not.
 not a surrogate 
 invalid: low surrogate instead of high 
 invalid: missing low surrogate 
 valid surrogate pair 
 The maximum space required is to print a 64-bit number in octal 
 flags to number() 
 width of output field 
	int precision;		 min. # of digits for integers; max
 'h', 'hh', 'l' or 'll' for integer fields 
	
	  We want to pass our input va_list to helper functions by reference,
	  but there's an annoying edge case. If va_list was originally passed
	  to us by value, we could just pass &ap down to the helpers. This is
	  the case on, for example, X86_32.
	  However, on X86_64 (and possibly others), va_list is actually a
	  size-1 array containing a structure. Our function parameter ap has
	  decayed from T[1] to T, and &ap has type T rather than T()[1],
	  which is what will be expected by a function taking a va_list 
	  parameter.
	  One standard way to solve this mess is by creating a copy in a local
	  variable of type va_list and then passing a pointer to that local
	  copy instead, which is what we do here.
 process flags 
 get field width 
 get the precision 
 get the conversion qualifier 
 integer number formats - set up the flags and "break" 
			
			  Bail out if the conversion specifier is invalid.
			  There's probably a typo in the format string and the
			  remaining specifiers are unlikely to match up with
			  the arguments.
 default precision is 1 
 precision is minimum number of digits to print 
			
			  For octal, a leading 0 is printed only if necessary,
			  i.e. if it's not already there because of the
			  precision.
			
			  For hexadecimal, the leading 0x is skipped if the
			  output is empty, i.e. both the number and the
			  precision are 0.
		
		  For zero padding, increase the precision to fill the field
		  width.
 Calculate the padding necessary 
 Leading padding with ' ' 
 sign 
 0x0X for hexadecimal 
 Zero padding and excess precision 
 Actual output 
 Number of trailing octets 
 Avoid writing partial character 
 Set high bits of leading octet 
 Write trailing octets in reverse order 
 Set low bits of leading octet 
 Trailing padding with ' ' 
 SPDX-License-Identifier: GPL-2.0
 SPDX-License-Identifier: GPL-2.0
  efi_get_memory_map() - get memory map
  @map:	on return pointer to memory map
  Retrieve the UEFI memory map. The allocated memory leaves room for
  up to EFI_MMAP_NR_SLACK_SLOTS additional memory map entries.
  Return:	status code
		
		  Make sure there is some entries of headroom so that the
		  buffer can be reused for a new map after allocations are
		  no longer permitted.  Its unlikely that the map will grow to
		  exceed this headroom once we are ready to trigger
		  ExitBootServices()
  efi_allocate_pages() - Allocate memory pages
  @size:	minimum number of bytes to allocate
  @addr:	On return the address of the first allocated page. The first
 		allocated page has alignment EFI_ALLOC_ALIGN which is an
 		architecture dependent multiple of the page size.
  @max:	the address that the last allocated memory page shall not
 		exceed
  Allocate pages as EFI_LOADER_DATA. The allocated pages are aligned according
  to EFI_ALLOC_ALIGN. The last allocated page will not exceed the address
  given by @max.
  Return:	status code
  efi_free() - free memory pages
  @size:	size of the memory area to free in bytes
  @addr:	start of the memory area to free (must be EFI_PAGE_SIZE
 		aligned)
  @size is rounded up to a multiple of EFI_ALLOC_ALIGN which is an
  architecture specific multiple of EFI_PAGE_SIZE. So this function should
  only be used to return pages allocated with efi_allocate_pages() or
  efi_low_alloc_above().
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2013 Linaro Ltd;  <roy.franz@linaro.org>
 non-LPAE kernels can run anywhere 
 LPAE kernels need compatible hardware 
	
	  Unlike on arm64, where we can directly fill out the screen_info
	  structure from the stub, we need to allocate a buffer to hold
	  its contents while we hand over to the kernel proper from the
	  decompressor.
	
	  Allocate space for the decompressed kernel as low as possible.
	  The region should be 16 MiB aligned, but the first 'slack' bytes
	  are not used by Linux, so we allow those to be occupied by the
	  firmware.
		
		  More than 'slack' bytes are already occupied at the base of
		  the allocation, so we need to advance to the next 16 MiB block.
 now free the parts that we will not use 
 SPDX-License-Identifier: GPL-2.0-only
  cs_dsp.c  --  Cirrus Logic DSP firmware support
  Based on soundsoccodecswm_adsp.c
  Copyright 2012 Wolfson Microelectronics plc
  Copyright (C) 2015-2021 Cirrus Logic, Inc. and
                          Cirrus Logic International Semiconductor Ltd.
  ADSP1 Control 19
 DSP1_WDMA_BUFFER_LENGTH - [7:0] 
 DSP1_WDMA_BUFFER_LENGTH - [7:0] 
 DSP1_WDMA_BUFFER_LENGTH - [7:0] 
  ADSP1 Control 30
 DSP1_DBG_CLK_ENA 
 DSP1_DBG_CLK_ENA 
 DSP1_DBG_CLK_ENA 
 DSP1_DBG_CLK_ENA 
 DSP1_SYS_ENA 
 DSP1_SYS_ENA 
 DSP1_SYS_ENA 
 DSP1_SYS_ENA 
 DSP1_CORE_ENA 
 DSP1_CORE_ENA 
 DSP1_CORE_ENA 
 DSP1_CORE_ENA 
 DSP1_START 
 DSP1_START 
 DSP1_START 
 DSP1_START 
  ADSP1 Control 31
 CLK_SEL_ENA 
 CLK_SEL_ENA 
 CLK_SEL_ENA 
  ADSP2 Control
 DSP1_MEM_ENA 
 DSP1_MEM_ENA 
 DSP1_MEM_ENA 
 DSP1_MEM_ENA 
 DSP1_SYS_ENA 
 DSP1_SYS_ENA 
 DSP1_SYS_ENA 
 DSP1_SYS_ENA 
 DSP1_CORE_ENA 
 DSP1_CORE_ENA 
 DSP1_CORE_ENA 
 DSP1_CORE_ENA 
 DSP1_START 
 DSP1_START 
 DSP1_START 
 DSP1_START 
  ADSP2 clocking
 CLK_SEL_ENA 
 CLK_SEL_ENA 
 CLK_SEL_ENA 
  ADSP2V2 clocking
 CLK_SEL_ENA 
 CLK_SEL_ENA 
 CLK_SEL_ENA 
 DSP_RATE 
 DSP_RATE 
 DSP_RATE 
  ADSP2 Status 1
  ADSP2 Lock support
  Event control messages
  HALO system info
  HALO core
  HALO MPU banks
  HALO_AHBM_WINDOW_DEBUG_1
  HALO_CCM_CORE_CONTROL
  HALO_CORE_SOFT_RESET
  HALO_WDT_CONTROL
  HALO_MPU_?M_VIO_STATUS
  cs_dsp_mem_region_name() - Return a name string for a memory type
  @type: the memory type to match
  Return: A const string identifying the memory region.
  cs_dsp_init_debugfs() - Create and populate DSP representation in debugfs
  @dsp: pointer to DSP structure
  @debugfs_root: pointer to debugfs directory in which to create this DSP
                 representation
  cs_dsp_cleanup_debugfs() - Removes DSP representation from debugfs
  @dsp: pointer to DSP structure
  cs_dsp_coeff_write_acked_control() - Sends event_id to the acked control
  @ctl: pointer to acked coefficient control
  @event_id: the value to write to the given acked control
  Once the value has been written to the control the function shall block
  until the running firmware acknowledges the write or timeout is exceeded.
  Must be called with pwr_lock held.
  Return: Zero for success, a negative number on error.
	
	  Poll for ack, we initially poll at ~1ms intervals for firmwares
	  that respond quickly, then go to ~10ms polls. A firmware is unlikely
	  to ack instantly so we do the first 1ms delay before reading the
	  control to avoid a pointless bus transaction
  cs_dsp_coeff_write_ctrl() - Writes the given buffer to the given coefficient control
  @ctl: pointer to coefficient control
  @buf: the buffer to write to the given control
  @len: the length of the buffer
  Must be called with pwr_lock held.
  Return: Zero for success, a negative number on error.
  cs_dsp_coeff_read_ctrl() - Reads the given coefficient control into the given buffer
  @ctl: pointer to coefficient control
  @buf: the buffer to store to the given control
  @len: the length of the buffer
  Must be called with pwr_lock held.
  Return: Zero for success, a negative number on error.
		
		  For readable controls populate the cache from the DSP memory.
		  For non-readable controls the cache was zero-filled when
		  created so we don't need to do anything.
 ignore 
  cs_dsp_get_ctl() - Finds a matching coefficient control
  @dsp: pointer to DSP structure
  @name: pointer to string to match with a control's subname
  @type: the algorithm type to match
  @alg: the algorithm id to match
  Find cs_dsp_coeff_ctl with input name as its subname
  Return: pointer to the control on success, NULL if not found
 Read the terminator first to validate the length 
 Convert length from DSP words to bytes 
  cs_dsp_find_alg_region() - Finds a matching algorithm region
  @dsp: pointer to DSP structure
  @type: the algorithm type to match
  @id: the algorithm id to match
  Return: Pointer to matching algorithm region, or NULL if not found.
 Calculate offset and length in DSP words 
 Calculate offset and length in DSP words 
 Calculate offset and length in DSP words 
			
			  Old files may use this for global
			  coefficients.
  cs_dsp_adsp1_init() - Initialise a cs_dsp structure representing a ADSP1 device
  @dsp: pointer to DSP structure
  Return: Zero for success, a negative number on error.
  cs_dsp_adsp1_power_up() - Load and start the named firmware
  @dsp: pointer to DSP structure
  @wmfw_firmware: the firmware to be sent
  @wmfw_filename: file name of firmware to be sent
  @coeff_firmware: the coefficient data to be sent
  @coeff_filename: file name of coefficient to data be sent
  @fw_name: the user-friendly firmware name
  Return: Zero for success, a negative number on error.
	
	  For simplicity set the DSP clock rate to be the
	  SYSCLK rate rather than making it configurable.
 Initialize caches for enabled and unset controls 
 Sync set controls 
 Start the core running 
  cs_dsp_adsp1_power_down() - Halts the DSP
  @dsp: pointer to DSP structure
 Halt the core 
 Wait for the RAM to start, should be near instantaneous 
  cs_dsp_set_dspclk() - Applies the given frequency to the given cs_dsp
  @dsp: pointer to DSP structure
  @freq: clock rate to set
  This is only for use on ADSP2 cores.
  Return: Zero for success, a negative number on error.
  cs_dsp_power_up() - Downloads firmware to the DSP
  @dsp: pointer to DSP structure
  @wmfw_firmware: the firmware to be sent
  @wmfw_filename: file name of firmware to be sent
  @coeff_firmware: the coefficient data to be sent
  @coeff_filename: file name of coefficient to data be sent
  @fw_name: the user-friendly firmware name
  This function is used on ADSP2 and Halo DSP cores, it powers-up the DSP core
  and downloads the firmware but does not start the firmware running. The
  cs_dsp booted flag will be set once completed and if the core has a low-power
  memory retention mode it will be put into this state after the firmware is
  downloaded.
  Return: Zero for success, a negative number on error.
 Initialize caches for enabled and unset controls 
  cs_dsp_power_down() - Powers-down the DSP
  @dsp: pointer to DSP structure
  cs_dsp_stop() must have been called before this function. The core will be
  fully powered down and so the memory will not be retained.
  cs_dsp_run() - Starts the firmware running
  @dsp: pointer to DSP structure
  cs_dsp_power_up() must have previously been called successfully.
  Return: Zero for success, a negative number on error.
 Sync set controls 
  cs_dsp_stop() - Stops the firmware
  @dsp: pointer to DSP structure
  Memory will not be disabled so firmware will remain loaded.
 Tell the firmware to cleanup 
 Log firmware state, it can be useful for analysis 
 reset halo core with CORE_SOFT_RESET 
  cs_dsp_adsp2_init() - Initialise a cs_dsp structure representing a ADSP2 core
  @dsp: pointer to DSP structure
  Return: Zero for success, a negative number on error.
		
		  Disable the DSP memory by default when in reset for a small
		  power saving.
  cs_dsp_halo_init() - Initialise a cs_dsp structure representing a HALO Core DSP
  @dsp: pointer to DSP structure
  Return: Zero for success, a negative number on error.
  cs_dsp_remove() - Clean a cs_dsp before deletion
  @dsp: pointer to DSP structure
  cs_dsp_read_raw_data_block() - Reads a block of data from DSP memory
  @dsp: pointer to DSP structure
  @mem_type: the type of DSP memory containing the data to be read
  @mem_addr: the address of the data within the memory region
  @num_words: the length of the data to read
  @data: a buffer to store the fetched data
  If this is used to read unpacked 24-bit memory, each 24-bit DSP word will
  occupy 32-bits in data (MSbyte will be 0). This padding can be removed using
  cs_dsp_remove_padding()
  Return: Zero for success, a negative number on error.
  cs_dsp_read_data_word() - Reads a word from DSP memory
  @dsp: pointer to DSP structure
  @mem_type: the type of DSP memory containing the data to be read
  @mem_addr: the address of the data within the memory region
  @data: a buffer to store the fetched data
  Return: Zero for success, a negative number on error.
  cs_dsp_write_data_word() - Writes a word to DSP memory
  @dsp: pointer to DSP structure
  @mem_type: the type of DSP memory containing the data to be written
  @mem_addr: the address of the data within the memory region
  @data: the data to be written
  Return: Zero for success, a negative number on error.
  cs_dsp_remove_padding() - Convert unpacked words to packed bytes
  @buf: buffer containing DSP words read from DSP memory
  @nwords: number of words to convert
  DSP words from the register map have pad bytes and the data bytes
  are in swapped order. This swaps to the native endian order and
  strips the pad bytes.
  cs_dsp_adsp2_bus_error() - Handle a DSP bus error interrupt
  @dsp: pointer to DSP structure
  The firmware and DSP state will be logged for future analysis.
  cs_dsp_halo_bus_error() - Handle a DSP bus error interrupt
  @dsp: pointer to DSP structure
  The firmware and DSP state will be logged for future analysis.
  cs_dsp_halo_wdt_expire() - Handle DSP watchdog expiry
  @dsp: pointer to DSP structure
  This is logged for future analysis.
 SPDX-License-Identifier: GPL-2.0
  System Control and Management Interface (SCMI) Performance Protocol
  Copyright (C) 2018-2021 ARM Ltd.
 CPUFreq converts to kHz, hence default 1000 
 Set the number of OPPs to be skippedalready read 
		
		  check for both returned and remaining to avoid infinite
		  loop due to buggy firmware
 db->width == 8 
 Device specific ops 
 uS to nS 
 SPDX-License-Identifier: GPL-2.0
  For transport using shared mem structure.
  Copyright (C) 2019 ARM Ltd.
  SCMI specification requires all parameters, message headers, return
  arguments or any protocol data to be expressed in little endian
  format only.
	
	  Ideally channel must be free by now unless OS timeout last
	  request and platform continued to process the same, wait
	  until it releases the shared memory, otherwise we may endup
	  overwriting its response with new message payload or vice-versa
 Mark channel busy + clear error 
 Skip the length of header and status in shmem area i.e 8 bytes 
 Take a copy to the rx buffer.. 
 Skip only the length of header in shmem area i.e 4 bytes 
 Take a copy to the rx buffer.. 
 SPDX-License-Identifier: GPL-2.0
  System Control and Management Interface (SCMI) Message Protocol driver
  SCMI Message Protocol is used between the System Control Processor(SCP)
  and the Application Processors(AP). The Message Handling Unit(MHU)
  provides a mechanism for inter-processor communication between SCP's
  Cortex M3 and AP.
  SCP offers control and management of the corecluster power states,
  various power domain DVFS including the corecluster, certain system
  clocks configuration, thermal sensors and many others.
  Copyright (C) 2018-2021 ARM Ltd.
 Success 
 Not supported 
 Invalid Parameters 
 Invalid accesspermission denied 
 Not found 
 Value out of range 
 Device busy 
 Communication Error 
 Generic Error 
 Hardware Error 
 Protocol Error 
 List of all SCMI devices active in system 
 Protection for the entire list 
 Track the unique id for the transfers for debug & profiling purpose 
  struct scmi_xfers_info - Structure to manage transfer information
  @xfer_alloc_table: Bitmap table for allocated messages.
 	Index of this bitmap table is also used for message
 	sequence identifier.
  @xfer_lock: Protection for message allocation
  @max_msg: Maximum number of messages that can be pending
  @free_xfers: A free list for available to use xfers. It is initialized with
 		a number of xfers equal to the maximum allowed in-flight
 		messages.
  @pending_xfers: An hashtable, indexed by msg_hdr.seq, used to keep all the
 		   currently in-flight messages.
  struct scmi_protocol_instance  - Describe an initialized protocol instance.
  @handle: Reference to the SCMI handle associated to this protocol instance.
  @proto: A reference to the protocol descriptor.
  @gid: A reference for per-protocol devres management.
  @users: A refcount to track effective users of this protocol.
  @priv: Reference for optional protocol private data.
  @ph: An embedded protocol handle that will be passed down to protocol
 	initialization code to identify this instance.
  Each protocol is initialized independently once for each SCMI platform in
  which is defined by DT and implemented by the SCMI server fw.
  struct scmi_info - Structure representing a SCMI instance
  @dev: Device pointer
  @desc: SoC description for this instance
  @version: SCMI revision information containing protocol version,
 	implementation version and (sub-)vendor identification.
  @handle: Instance of SCMI handle to send to clients
  @tx_minfo: Universal Transmit Message management info
  @rx_minfo: Universal Receive Message management info
  @tx_idr: IDR object to map protocol id to Tx channel info pointer
  @rx_idr: IDR object to map protocol id to Rx channel info pointer
  @protocols: IDR for protocols' instance descriptors initialized for
 	       this SCMI instance: populated on protocol's first attempted
 	       usage.
  @protocols_mtx: A mutex to protect protocols instances initialization.
  @protocols_imp: List of protocols implemented, currently maximum of
 	MAX_PROTOCOLS_IMP elements allocated by the base protocol
  @active_protocols: IDR storing device_nodes for protocols actually defined
 		      in the DT and confirmed as implemented by fw.
  @notify_priv: Pointer to private data structure specific to notifications.
  @node: List head
  @users: Number of users of this instance
 Ensure mutual exclusive access to protocols instance array 
 better than switch case as long as return value is continuous 
 SCMI_SUCCESS 
 SCMI_ERR_SUPPORT 
 SCMI_ERR_PARAM 
 SCMI_ERR_ACCESS 
 SCMI_ERR_ENTRY 
 SCMI_ERR_RANGE 
 SCMI_ERR_BUSY 
 SCMI_ERR_COMMS 
 SCMI_ERR_GENERIC 
 SCMI_ERR_HARDWARE 
 SCMI_ERR_PROTOCOL 
 Ensure updated protocol private date are visible 
 Ensure protocols_private_data has been updated 
  scmi_xfer_token_set  - Reserve and set new token for the xfer at hand
  @minfo: Pointer to TxRx Message management info based on channel type
  @xfer: The xfer to act upon
  Pick the next unused monotonically increasing token and set it into
  xfer->hdr.seq: picking a monotonically increasing value avoids immediate
  reuse of freshly completed or timed-out xfers, thus mitigating the risk
  of incorrect association of a late and expired xfer with a live in-flight
  transaction, both happening to re-use the same token identifier.
  Since platform is NOT required to answer our request in-order we should
  account for a few rare but possible scenarios:
   - exactly 'next_token' may be NOT available so pick xfer_id >= next_token
     using find_next_zero_bit() starting from candidate next_token bit
   - all tokens ahead upto (MSG_TOKEN_ID_MASK - 1) are used in-flight but we
     are plenty of free tokens at start, so try a second pass using
     find_next_zero_bit() and starting from 0.
   X = used in-flight
  Normal
  ------
 		|- xfer_id picked
    -----------+----------------------------------------------------------
    | | |X|X|X| | | | | | ... ... ... ... ... ... ... ... ... ... ...|X|X|
    ----------------------------------------------------------------------
 		^
 		|- next_token
  Out-of-order pending at start
  -----------------------------
 	  |- xfer_id picked, last_token fixed
    -----+----------------------------------------------------------------
    |X|X| | | | |X|X| ... ... ... ... ... ... ... ... ... ... ... ...|X| |
    ----------------------------------------------------------------------
     ^
     |- next_token
  Out-of-order pending at end
  ---------------------------
 	  |- xfer_id picked, last_token fixed
    -----+----------------------------------------------------------------
    |X|X| | | | |X|X| ... ... ... ... ... ... ... ... ... ... |X|X|X||X|X|
    ----------------------------------------------------------------------
 								^
 								|- next_token
  Context: Assumes to be called with @xfer_lock already acquired.
  Return: 0 on Success or error
	
	  Pick a candidate monotonic token in range [0, MSG_TOKEN_MAX - 1]
	  using the pre-allocated transfer_id as a base.
	  Note that the global transfer_id is shared across all message types
	  so there could be holes in the allocated set of monotonic sequence
	  numbers, but that is going to limit the effectiveness of the
	  mitigation only in very rare limit conditions.
 Pick the next available xfer_id >= next_token 
		
		  After heavily out-of-order responses, there are no free
		  tokens ahead, but only at start of xfer_alloc_table so
		  try again from the beginning.
		
		  Something is wrong if we got here since there can be a
		  maximum number of (MSG_TOKEN_MAX - 1) in-flight messages
		  but we have not found any free token [0, MSG_TOKEN_MAX - 1].
 Update +- last_token accordingly if we skipped some hole 
 Set in-flight 
  scmi_xfer_token_clear  - Release the token
  @minfo: Pointer to TxRx Message management info based on channel type
  @xfer: The xfer to act upon
  scmi_xfer_get() - Allocate one message
  @handle: Pointer to SCMI entity handle
  @minfo: Pointer to TxRx Message management info based on channel type
  @set_pending: If true a monotonic token is picked and the xfer is added to
 		 the pending hash table.
  Helper function which is used by various message functions that are
  exposed to clients of this driver for allocating a message traffic event.
  Picks an xfer from the free list @free_xfers (if any available) and, if
  required, sets a monotonically increasing token and stores the inflight xfer
  into the @pending_xfers hashtable for later retrieval.
  The successfully initialized xfer is refcounted.
  Context: Holds @xfer_lock while manipulating @xfer_alloc_table and
 	    @free_xfers.
  Return: 0 if all went fine, else corresponding error.
 grab an xfer from the free_list 
	
	  Allocate transfer_id early so that can be used also as base for
	  monotonic sequence number generation if needed.
 Pick and set monotonic token 
  __scmi_xfer_put() - Release a message
  @minfo: Pointer to TxRx Message management info based on channel type
  @xfer: message that was reserved by scmi_xfer_get
  After refcount check, possibly release an xfer, clearing the token slot,
  removing xfer from @pending_xfers and putting it back into free_xfers.
  This holds a spinlock to maintain integrity of internal data structures.
  scmi_xfer_lookup_unlocked  -  Helper to lookup an xfer_id
  @minfo: Pointer to TxRx Message management info based on channel type
  @xfer_id: Token ID to lookup in @pending_xfers
  Refcounting is untouched.
  Context: Assumes to be called with @xfer_lock already acquired.
  Return: A valid xfer on Success or error otherwise
  scmi_msg_response_validate  - Validate message type against state of related
  xfer
  @cinfo: A reference to the channel descriptor.
  @msg_type: Message type to check
  @xfer: A reference to the xfer to validate against @msg_type
  This function checks if @msg_type is congruent with the current state of
  a pending @xfer; if an asynchronous delayed response is received before the
  related synchronous response (Out-of-Order Delayed Response) the missing
  synchronous response is assumed to be OK and completed, carrying on with the
  Delayed Response: this is done to address the case in which the underlying
  SCMI transport can deliver such out-of-order responses.
  Context: Assumes to be called with xfer->lock already acquired.
  Return: 0 on Success, error otherwise
	
	  Even if a response was indeed expected on this slot at this point,
	  a buggy platform could wrongly reply feeding us an unexpected
	  delayed response we're not prepared to handle: bail-out safely
	  blaming firmware.
			
			  Delayed Response expected but delivered earlier.
			  Assume message RESPONSE was OK and skip state.
 No further message expected once in SCMI_XFER_DRESP_OK 
  scmi_xfer_state_update  - Update xfer state
  @xfer: A reference to the xfer to update
  @msg_type: Type of message being processed.
  Note that this message is assumed to have been already successfully validated
  by @scmi_msg_response_validate(), so here we just update the state.
  Context: Assumes to be called on an xfer exclusively acquired using the
 	    busy flag.
 Unknown command types were already discarded earlier 
  scmi_xfer_command_acquire  -  Helper to lookup and acquire a command xfer
  @cinfo: A reference to the channel descriptor.
  @msg_hdr: A message header to use as lookup key
  When a valid xfer is found for the sequence number embedded in the provided
  msg_hdr, reference counting is properly updated and exclusive access to this
  xfer is granted till released with @scmi_xfer_command_release.
  Return: A valid @xfer on Success or error otherwise.
 Are we even expecting this? 
	
	  If a pending xfer was found which was also in a congruent state with
	  the received message, acquire exclusive access to it setting the busy
	  flag.
	  Spins only on the rare limit condition of concurrent reception of
	  RESP and DRESP for the same xfer.
 On error the refcount incremented above has to be dropped 
 rx.len could be shrunk in the sync do_xfer, so reset to maxsz 
  scmi_rx_callback() - callback for receiving messages
  @cinfo: SCMI channel info
  @msg_hdr: Message header
  @priv: Transport specific private data.
  Processes one received message to appropriate transfer information and
  signals completion of the transfer.
  NOTE: This function will be invoked in IRQ context, hence should be
  as optimal as possible.
  xfer_put() - Release a transmit message
  @ph: Pointer to SCMI protocol handle
  @xfer: message that was reserved by xfer_get_init
	
	  Poll also on xfer->done so that polling can be forcibly terminated
	  in case of out-of-order receptions of delayed responses
  do_xfer() - Do one transfer
  @ph: Pointer to SCMI protocol handle
  @xfer: Transfer to initiate and wait for response
  Return: -ETIMEDOUT in case of no response, if transmit error,
 	return corresponding error, else if all goes well,
 	return 0.
	
	  Initialise protocol id now from protocol handle to avoid it being
	  overridden by mistake (or malice) by the protocol code mangling with
	  the scmi_xfer structure prior to this.
	
	  Even though spinlocking is not needed here since no race is possible
	  on xfer->state due to the monotonically increasing tokens allocation,
	  we must anyway ensure xfer->state initialization is not re-ordered
	  after the .send_message() to be sure that on the RX path an early
	  ISR calling scmi_rx_callback() cannot see an old stale xfer->state.
			
			  Do not fetch_response if an out-of-order delayed
			  response is being processed.
 And we wait for the response. 
  do_xfer_with_response() - Do one transfer and wait until the delayed
 	response is received
  @ph: Pointer to SCMI protocol handle
  @xfer: Transfer to initiate and wait for response
  Return: -ETIMEDOUT in case of no delayed response, if transmit error,
 	return corresponding error, else if all goes well, return 0.
  xfer_get_init() - Allocate and initialise one message for transmit
  @ph: Pointer to SCMI protocol handle
  @msg_id: Message identifier
  @tx_size: transmit message size
  @rx_size: receive message size
  @p: pointer to the allocated and initialised message
  This function allocates the message using @scmi_xfer_get and
  initialise the header.
  Return: 0 if all went fine with @p pointing to message, else
 	corresponding error.
 Ensure we have sane transfer sizes 
  version_get() - command to get the revision of the SCMI entity
  @ph: Pointer to SCMI protocol handle
  @version: Holds returned version of protocol.
  Updates the SCMI information in the internal data structure.
  Return: 0 if all went fine, else return appropriate error.
  scmi_set_protocol_priv  - Set protocol specific data at init time
  @ph: A reference to the protocol handle.
  @priv: The private data to set.
  Return: 0 on Success
  scmi_get_protocol_priv  - Set protocol specific data at init time
  @ph: A reference to the protocol handle.
  Return: Protocol private data if any was set.
  scmi_revision_area_get  - Retrieve version memory area.
  @ph: A reference to the protocol handle.
  A helper to grab the version memory area reference during SCMI Base protocol
  initialization.
  Return: A reference to the version memory area associated to the SCMI
 	   instance underlying this protocol handle.
  scmi_alloc_init_protocol_instance  - Allocate and initialize a protocol
  instance descriptor.
  @info: The reference to the related SCMI instance.
  @proto: The protocol descriptor.
  Allocate a new protocol instance descriptor, using the provided @proto
  description, against the specified SCMI instance @info, and initialize it;
  all resources management is handled via a dedicated per-protocol devres
  group.
  Context: Assumes to be called with @protocols_mtx already acquired.
  Return: A reference to a freshly allocated and initialized protocol instance
 	   or ERR_PTR on failure. On failure the @proto reference is at first
 	   put using @scmi_protocol_put() before releasing all the devres group.
 Protocol specific devres group 
 proto->init is assured NON NULL by scmi_protocol_register 
	
	  Warn but ignore events registration errors since we do not want
	  to skip whole protocols if their notifications are messed up.
 Take care to put the protocol module's owner before releasing all 
  scmi_get_protocol_instance  - Protocol initialization helper.
  @handle: A reference to the SCMI platform instance.
  @protocol_id: The protocol being requested.
  In case the required protocol has never been requested before for this
  instance, allocate and initialize all the needed structures while handling
  resource allocation with a dedicated per-protocol devres subgroup.
  Return: A reference to an initialized protocol instance or error on failure:
 	   in particular returns -EPROBE_DEFER when the desired protocol could
 	   NOT be found.
 Fails if protocol not registered on bus 
  scmi_protocol_acquire  - Protocol acquire
  @handle: A reference to the SCMI platform instance.
  @protocol_id: The protocol being requested.
  Register a new user for the requested protocol on the specified SCMI
  platform instance, possibly triggering its initialization on first user.
  Return: 0 if protocol was acquired successfully.
  scmi_protocol_release  - Protocol de-initialization helper.
  @handle: A reference to the SCMI platform instance.
  @protocol_id: The protocol being requested.
  Remove one user for the specified protocol and triggers de-initialization
  and resources de-allocation once the last user has gone.
  scmi_devm_protocol_get  - Devres managed get protocol operations and handle
  @sdev: A reference to an scmi_device whose embedded struct device is to
 	  be used for devres accounting.
  @protocol_id: The protocol being requested.
  @ph: A pointer reference used to pass back the associated protocol handle.
  Get hold of a protocol accounting for its usage, eventually triggering its
  initialization, and returning the protocol specific operations and related
  protocol handle which will be used as first argument in most of the
  protocols operations methods.
  Being a devres based managed method, protocol hold will be automatically
  released, and possibly de-initialized on last user, once the SCMI driver
  owning the scmi_device is unbound from it.
  Return: A reference to the requested protocol operations or error.
 	   Must be checked for errors by caller.
  scmi_devm_protocol_put  - Devres managed put protocol operations and handle
  @sdev: A reference to an scmi_device whose embedded struct device is to
 	  be used for devres accounting.
  @protocol_id: The protocol being requested.
  Explicitly release a protocol hold previously obtained calling the above
  @scmi_devm_protocol_get.
  scmi_handle_get() - Get the SCMI handle for a device
  @dev: pointer to device for which we want SCMI handle
  NOTE: The function does not track individual clients of the framework
  and is expected to be maintained by caller of SCMI protocol library.
  scmi_handle_put must be balanced with successful scmi_handle_get
  Return: pointer to handle if successful, NULL on error
  scmi_handle_put() - Release the handle acquired by scmi_handle_get
  @handle: handle acquired by scmi_handle_get
  NOTE: The function does not track individual clients of the framework
  and is expected to be maintained by caller of SCMI protocol library.
  scmi_handle_put must be balanced with successful scmi_handle_get
  Return: 0 is successfully released
 	if null was passed, it returns -EINVAL;
 Pre-allocated messages, no more than what hdr.seq can support 
 Allocate a bitmask sized to hold MSG_TOKEN_MAX tokens 
	
	  Preallocate a number of xfers equal to max inflight messages,
	  pre-initialize the buffer pointer to pre-allocated buffers and
	  attach all of them to the free list
 Add initialized xfer to the free list 
 RX channel is optional so can be skipped 
 Transmit channel is first entry i.e. index 0 
 check if already allocated, used for multiple device per protocol 
 Possible only if platform has no Rx 
 Rx is optional, hence no error check 
  scmi_get_protocol_device  - Helper to getcreate an SCMI device.
  @np: A device node representing a valid active protocols for the referred
  SCMI instance.
  @info: The referred SCMI instance for which we are gettingcreating this
  device.
  @prot_id: The protocol ID.
  @name: The device name.
  Referring to the specific SCMI instance identified by @info, this helper
  takes care to return a properly initialized device matching the requested
  @proto_id and @name: if device was still not existent it is created as a
  child of the specified SCMI instance @info and its transport properly
  initialized as usual.
  Return: A properly initialized scmi device, NULL otherwise.
 Already created for this parent SCMI instance ? 
 setup handle now as the transport is ready 
  scmi_create_protocol_devices  - Create devices for all pending requests for
  this SCMI instance.
  @np: The device node describing the protocol
  @info: The SCMI instance descriptor
  @prot_id: The protocol ID
  All devices previously requested for this instance (if any) are found and
  created by scanning the proper @&scmi_requested_devices entry.
  scmi_protocol_device_request  - Helper to request a device
  @id_table: A protocolname pair descriptor for the device to be created.
  This helper let an SCMI driver request specific devices identified by the
  @id_table to be created for each active SCMI instance.
  The requested device name MUST NOT be already existent for any protocol;
  at first the freshly requested @id_table is annotated in the IDR table
  @scmi_requested_devices, then a matching device is created for each already
  active SCMI instance. (if any)
  This way the requested device is created straight-away for all the already
  initialized(probed) SCMI instances (handles) and it remains also annotated
  as pending creation if the requesting SCMI driver was loaded before some
  SCMI instance and related transports were available: when such late instance
  is probed, its probe will take care to scan the list of pending requested
  devices and create those on its own (see @scmi_create_protocol_devices and
  its enclosing loop)
  Return: 0 on Success
	
	  Search for the matching protocol rdev list and then search
	  of any existent equally named device...fails if any duplicate found.
 A list found registered in the IDR is never empty 
	
	  No duplicate found for requested id_table, so let's create a new
	  requested device entry for this new valid request.
	
	  Append the new requested device table descriptor to the head of the
	  related protocol list, eventually creating such head if not already
	  there.
	
	  Now effectively create and initialize the requested device for every
	  already initialized SCMI instance which has registered the requested
	  protocol as a valid active one: i.e. defined in DT and supported by
	  current platform FW.
 Set handle if not already set: device existed 
  scmi_protocol_device_unrequest  - Helper to unrequest a device
  @id_table: A protocolname pair descriptor for the device to be unrequested.
  An helper to let an SCMI driver release its request about devices; note that
  devices are created and initialized once the first SCMI driver request them
  but they destroyed only on SCMI core unloadingunbinding.
  The current SCMI transport layer uses such devices as internal references and
  as such they could be shared as same transport between multiple drivers so
  that cannot be safely destroyed till the whole SCMI stack is removed.
  (unless adding further burden of refcounting.)
	
	  Trigger SCMI Base protocol initialization.
	  It's mandatory and won't be ever releaseddeinit until the
	  SCMI stack is shutdownunloaded as a whole.
		
		  Save this valid DT protocol descriptor amongst
		  @active_protocols for this SCMI instance
 Safe to free channels since no more users 
 Each compatible listed below must have descriptor associated with it 
 Sentinel  },
  __scmi_transports_setup  - Common helper to call transport-specific
  .init.exit code if provided.
  @init: A flag to distinguish between init and exit.
  Note that, if provided, we invoke .init.exit functions for all the
  transports currently compiled in.
  Return: 0 on Success.
 Bail out if no SCMI transport was configured 
 Initialize any compiled-in transport which provided an initexit 
 SPDX-License-Identifier: GPL-2.0
  System Control and Management Interface (SCMI) Message Protocol bus layer
  Copyright (C) 2018-2021 ARM Ltd.
 SPDX-License-Identifier: GPL-2.0
  System Control and Management Interface (SCMI) Clock Protocol
  Copyright (C) 2018-2021 ARM Ltd.
 Set the number of rates to be skippedalready read 
		
		  check for both returned and remaining to avoid infinite
		  loop due to buggy firmware
 SPDX-License-Identifier: GPL-2.0
  System Control and Management Interface (SCMI) System Power Protocol
  Copyright (C) 2020-2021 ARM Ltd.
 SPDX-License-Identifier: GPL-2.0
  System Control and Management Interface (SCMI) Notification support
  Copyright (C) 2020-2021 ARM Ltd.
  DOC: Theory of operation
  SCMI Protocol specification allows the platform to signal events to
  interested agents via notification messages: this is an implementation
  of the dispatch and delivery of such notifications to the interested users
  inside the Linux kernel.
  An SCMI Notification core instance is initialized for each active platform
  instance identified by the means of the usual &struct scmi_handle.
  Each SCMI Protocol implementation, during its initialization, registers with
  this core its set of supported events using scmi_register_protocol_events():
  all the needed descriptors are stored in the &struct registered_protocols and
  &struct registered_events arrays.
  Kernel users interested in some specific event can register their callbacks
  providing the usual notifier_block descriptor, since this core implements
  events' delivery using the standard Kernel notification chains machinery.
  Given the number of possible events defined by SCMI and the extensibility
  of the SCMI Protocol itself, the underlying notification chains are created
  and destroyed dynamically on demand depending on the number of users
  effectively registered for an event, so that no support structures or chains
  are allocated until at least one user has registered a notifier_block for
  such event. Similarly, events' generation itself is enabled at the platform
  level only after at least one user has registered, and it is shutdown after
  the last user for that event has gone.
  All users provided callbacks and allocated notification-chains are stored in
  the @registered_events_handlers hashtable. Callbacks' registration requests
  for still to be registered events are instead kept in the dedicated common
  hashtable @pending_events_handlers.
  An event is identified univocally by the tuple (proto_id, evt_id, src_id)
  and is served by its own dedicated notification chain; information contained
  in such tuples is used, in a few different ways, to generate the needed
  hash-keys.
  Here proto_id and evt_id are simply the protocol_id and message_id numbers
  as described in the SCMI Protocol specification, while src_id represents an
  optional, protocol dependent, source identifier (like domain_id, perf_id
  or sensor_id and so forth).
  Upon reception of a notification message from the platform the SCMI RX ISR
  passes the received message payload and some ancillary information (including
  an arrival timestamp in nanoseconds) to the core via @scmi_notify() which
  pushes the event-data itself on a protocol-dedicated kfifo queue for further
  deferred processing as specified in @scmi_events_dispatcher().
  Each protocol has it own dedicated work_struct and worker which, once kicked
  by the ISR, takes care to empty its own dedicated queue, deliverying the
  queued items into the proper notification-chain: notifications processing can
  proceed concurrently on distinct workers only between events belonging to
  different protocols while delivery of events within the same protocol is
  still strictly sequentially ordered by time of arrival.
  Events' information is then extracted from the SCMI Notification messages and
  conveyed, converted into a custom per-event report struct, as the void data
  param to the user callback provided by the registered notifier_block, so that
  from the user perspective his callback will look invoked like:
  int user_cb(struct notifier_block nb, unsigned long event_id, void report)
  Builds an unsigned 32bit key from the given input tuple to be used
  as a key in hashtables.
  Assumes that the stored obj includes its own hash-key in a field named 'key':
  with this simplification this macro can be equally used for all the objects'
  types hashed by this implementation.
  @__ht: The hashtable name
  @__obj: A pointer to the object type to be retrieved from the hashtable;
 	   it will be used as a cursor while scanning the hastable and it will
 	   be possibly left as NULL when @__k is not found
  @__k: The key to search for
  A set of macros used to access safely @registered_protocols and
  @registered_events arrays; these are fixed in size and each entry is possibly
  populated at protocols' registration time and then only read but NEVER
  modified or removed.
 A couple of utility macros to limit cruft when calling protocols' helpers 
  struct scmi_notify_instance  - Represents an instance of the notification
  core
  @gid: GroupID used for devres
  @handle: A reference to the platform instance
  @init_work: A work item to perform final initializations of pending handlers
  @notify_wq: A reference to the allocated Kernel cmwq
  @pending_mtx: A mutex to protect @pending_events_handlers
  @registered_protocols: A statically allocated array containing pointers to
 			  all the registered protocol-level specific information
 			  related to events' handling
  @pending_events_handlers: An hashtable containing all pending events'
 			     handlers descriptors
  Each platform instance, represented by a handle, has its own instance of
  the notification subsystem represented by this structure.
 lock to protect pending_events_handlers 
  struct events_queue  - Describes a queue and its associated worker
  @sz: Size in bytes of the related kfifo
  @kfifo: A dedicated Kernel kfifo descriptor
  @notify_work: A custom work item bound to this queue
  @wq: A reference to the associated workqueue
  Each protocol has its own dedicated events_queue descriptor.
  struct scmi_event_header  - A utility header
  @timestamp: The timestamp, in nanoseconds (boottime), which was associated
 	       to this event as soon as it entered the SCMI RX ISR
  @payld_sz: Effective size of the embedded message payload which follows
  @evt_id: Event ID (corresponds to the Event MsgID for this Protocol)
  @payld: A reference to the embedded event payload
  This header is prepended to each received event message payload before
  queueing it on the related &struct events_queue.
  struct scmi_registered_events_desc  - Protocol Specific information
  @id: Protocol ID
  @ops: Protocol specific and event-related operations
  @equeue: The embedded per-protocol events_queue
  @ni: A reference to the initialized instance descriptor
  @eh: A reference to pre-allocated buffer to be used as a scratch area by the
 	deferred worker when fetching data from the kfifo
  @eh_sz: Size of the pre-allocated buffer @eh
  @in_flight: A reference to an in flight &struct scmi_registered_event
  @num_events: Number of events in @registered_events
  @registered_events: A dynamically allocated array holding all the registered
 		       events' descriptors, whose fixed-size is determined at
 		       compile time.
  @registered_mtx: A mutex to protect @registered_events_handlers
  @ph: SCMI protocol handle reference
  @registered_events_handlers: An hashtable containing all events' handlers
 				descriptors registered for this protocol
  All protocols that register at least one event have their protocol-specific
  information stored here, together with the embedded allocated events_queue.
  These descriptors are stored in the @registered_protocols array at protocol
  registration time.
  Once these descriptors are successfully registered, they are NEVER again
  removed or modified since protocols do not unregister ever, so that, once
  we safely grab a NON-NULL reference from the array we can keep it and use it.
 mutex to protect registered_events_handlers 
  struct scmi_registered_event  - Event Specific Information
  @proto: A reference to the associated protocol descriptor
  @evt: A reference to the associated event descriptor (as provided at
        registration time)
  @report: A pre-allocated buffer used by the deferred worker to fill a
 	    customized event report
  @num_sources: The number of possible sources for this event as stated at
 		 events' registration time
  @sources: A reference to a dynamically allocated array used to refcount the
 	     events' enable requests for all the existing sources
  @sources_mtx: A mutex to serialize the access to @sources
  All registered events are represented by one of these structures that are
  stored in the @registered_events array at protocol registration time.
  Once these descriptors are successfully registered, they are NEVER again
  removed or modified since protocols do not unregister ever, so that once we
  safely grab a NON-NULL reference from the table we can keep it and use it.
 locking to serialize the access to sources 
  struct scmi_event_handler  - Event handler information
  @key: The used hashkey
  @users: A reference count for number of active users for this handler
  @r_evt: A reference to the associated registered event; when this is NULL
 	   this handler is pending, which means that identifies a set of
 	   callbacks intended to be attached to an event which is still not
 	   known nor registered by any protocol at that point in time
  @chain: The notification chain dedicated to this specific event tuple
  @hash: The hlist_node used for collision handling
  @enabled: A boolean which records if event's generation has been already
 	     enabled for this handler as a whole
  This structure collects all the information needed to process a received
  event identified by the tuple (proto_id, evt_id, src_id).
  These descriptors are stored in a per-protocol @registered_events_handlers
  table using as a key a value derived from that tuple.
  scmi_lookup_and_call_event_chain()  - Lookup the proper chain and call it
  @ni: A reference to the notification instance to use
  @evt_key: The key to use to lookup the related notification chain
  @report: The customized event-specific report to pass down to the callbacks
 	    as their data parameter.
	
	  Here ensure the event handler cannot vanish while using it.
	  It is legitimate, though, for an handler not to be found at all here,
	  e.g. when it has been unregistered by the user after some events had
	  already been queued.
 Notifiers are NOT supposed to cut the chain ... 
  scmi_process_event_header()  - Dequeue and process an event header
  @eq: The queue to use
  @pd: The protocol descriptor to use
  Read an event header from the protocol queue into the dedicated scratch
  buffer and looks for a matching registered event; in case an anomalously
  sized read is detected just flush the queue.
  Return:
   a reference to the matching registered event when found
   ERR_PTR(-EINVAL) when NO registered event could be found
   NULL when the queue is empty
  scmi_process_event_payload()  - Dequeue and process an event payload
  @eq: The queue to use
  @pd: The protocol descriptor to use
  @r_evt: The registered event descriptor to use
  Read an event payload from the protocol queue into the dedicated scratch
  buffer, fills a custom report and then look for matching event handlers and
  call them; skip any unknown event (as marked by scmi_process_event_header())
  and in case an anomalously sized read is detected just flush the queue.
  Return: False when the queue is empty
 Any in-flight event has now been officially processed 
 At first search for a generic ALL src_ids handler... 
 ...then search for any specific src_id 
  scmi_events_dispatcher()  - Common worker logic for all work items.
  @work: The work item to use, which is associated to a dedicated events_queue
  Logic:
   1. dequeue one pending RX notification (queued in SCMI RX ISR context)
   2. generate a custom event report from the received event message
   3. lookup for any registered ALL_SRC_IDs handler:
     - > call the related notification chain passing in the report
   4. lookup for any registered specific SRC_ID handler:
     - > call the related notification chain passing in the report
  Note that:
   a dedicated per-protocol kfifo queue is used: in this way an anomalous
    flood of events cannot saturate other protocols' queues.
   each per-protocol queue is associated to a distinct work_item, which
    means, in turn, that:
    + all protocols can process their dedicated queues concurrently
      (since notify_wq:max_active != 1)
    + anyway at most one worker instance is allowed to run on the same queue
      concurrently: this ensures that we can have only one concurrent
      readerwriter on the associated kfifo, so that we can use it lock-less
  Context: Process context.
	
	  In order to keep the queue lock-less and the number of memcopies
	  to the bare minimum needed, the dispatcher accounts for the
	  possibility of per-protocol in-flight events: i.e. an event whose
	  reception could end up being split across two subsequent runs of this
	  worker, first the header, then the payload.
  scmi_notify()  - Queues a notification for further deferred processing
  @handle: The handle identifying the platform instance from which the
 	    dispatched event is generated
  @proto_id: Protocol ID
  @evt_id: Event ID (msgID)
  @buf: Event Message Payload (without the header)
  @len: Event Message Payload size
  @ts: RX Timestamp in nanoseconds (boottime)
  Context: Called in interrupt context to queue a received event for
  deferred processing.
  Return: 0 on Success
	
	  Header and payload are enqueued with two distinct kfifo_in() (so non
	  atomic), but this situation is handled properly on the consumer side
	  with in-flight events tracking.
	
	  Don't care about return value here since we just want to ensure that
	  a work is queued all the times whenever some items have been pushed
	  on the kfifo:
	  - if work was already queued it will simply fail to queue a new one
	    since it is not needed
	  - if work was not queued already it will be now, even in case work
	    was in fact already running: this behavior avoids any possible race
	    when this function pushes new items onto the kfifos after the
	    related executing worker had already determined the kfifo to be
	    empty and it was terminating.
  scmi_kfifo_free()  - Devres action helper to free the kfifo
  @kfifo: The kfifo to free
  scmi_initialize_events_queue()  - AllocateInitialize a kfifo buffer
  @ni: A reference to the notification instance to use
  @equeue: The events_queue to initialize
  @sz: Size of the kfifo buffer to allocate
  Allocate a buffer for the kfifo and initialize it.
  Return: 0 on Success
 Size could have been roundup to power-of-two 
  scmi_allocate_registered_events_desc()  - Allocate a registered events'
  descriptor
  @ni: A reference to the &struct scmi_notify_instance notification instance
 	to use
  @proto_id: Protocol ID
  @queue_sz: Size of the associated queue to allocate
  @eh_sz: Size of the event header scratch area to pre-allocate
  @num_events: Number of events to support (size of @registered_events)
  @ops: Pointer to a struct holding references to protocol specific helpers
 	 needed during events handling
  It is supposed to be called only once for each protocol at protocol
  initialization time, so it warns if the requested protocol is found already
  registered.
  Return: The allocated and registered descriptor on Success
 Ensure protocols are up to date 
 Initialize per protocol handlers table 
  scmi_register_protocol_events()  - Register Protocol Events with the core
  @handle: The handle identifying the platform instance against which the
 	    protocol's events are registered
  @proto_id: Protocol ID
  @ph: SCMI protocol handle.
  @ee: A structure describing the events supported by this protocol.
  Used by SCMI Protocols initialization code to register with the notification
  core the list of supported events and their descriptors: takes care to
  pre-allocate and store all needed descriptors, scratch buffers and event
  queues.
  Return: 0 on Success
 num_sources cannot be <= 0 
 Ensure events are updated 
 Register protocol and events...it will never be removed 
 Ensure protocols are updated 
	
	  Finalize any pending events' handler which could have been waiting
	  for this protocol's events registration.
  scmi_deregister_protocol_events  - Deregister protocol events with the core
  @handle: The handle identifying the platform instance against which the
 	    protocol's events are registered
  @proto_id: Protocol ID
 Ensure protocols are updated 
  scmi_allocate_event_handler()  - Allocate Event handler
  @ni: A reference to the notification instance to use
  @evt_key: 32bit key uniquely bind to the event identified by the tuple
 	     (proto_id, evt_id, src_id)
  Allocate an event handler and related notification chain associated with
  the provided event handler key.
  Note that, at this point, a related registered_event is still to be
  associated to this handler descriptor (hndl->r_evt == NULL), so the handler
  is initialized as pending.
  Context: Assumes to be called with @pending_mtx already acquired.
  Return: the freshly allocated structure on Success
 New handlers are created pending 
  scmi_free_event_handler()  - Free the provided Event handler
  @hndl: The event handler structure to free
  Context: Assumes to be called with proper locking acquired depending
 	    on the situation.
  scmi_bind_event_handler()  - Helper to attempt binding an handler to an event
  @ni: A reference to the notification instance to use
  @hndl: The event handler to bind
  If an associated registered event is found, move the handler from the pending
  into the registered table.
  Context: Assumes to be called with @pending_mtx already acquired.
  Return: 0 on Success
	
	  Remove from pending and insert into registered while getting hold
	  of protocol instance.
	
	  Acquire protocols only for NON pending handlers, so as NOT to trigger
	  protocol initialization when a notifier is registered against a still
	  not registered protocol, since it would make little sense to force init
	  protocols for which still no SCMI driver user exists: they wouldn't
	  emit any event anyway till some SCMI driver starts using it.
  scmi_valid_pending_handler()  - Helper to check pending status of handlers
  @ni: A reference to the notification instance to use
  @hndl: The event handler to check
  An handler is considered pending when its r_evt == NULL, because the related
  event was still unknown at handler's registration time; anyway, since all
  protocols register their supported events once for all at protocols'
  initialization time, a pending handler cannot be considered valid anymore if
  the underlying event (which it is waiting for), belongs to an already
  initialized and registered protocol.
  Return: 0 on Success
  scmi_register_event_handler()  - Register whenever possible an Event handler
  @ni: A reference to the notification instance to use
  @hndl: The event handler to register
  At first try to bind an event handler to its associated event, then check if
  it was at least a valid pending handler: if it was not bound nor valid return
  false.
  Valid pending incomplete bindings will be periodically retried by a dedicated
  worker which is kicked each time a new protocol completes its own
  registration phase.
  Context: Assumes to be called with @pending_mtx acquired.
  Return: 0 on Success
  __scmi_event_handler_get_ops()  - Utility to get or create an event handler
  @ni: A reference to the notification instance to use
  @evt_key: The event key to use
  @create: A boolean flag to specify if a handler must be created when
 	    not already existent
  Search for the desired handler matching the key in both the per-protocol
  registered table and the common pending table:
   if found adjust users refcount
   if not found and @create is true, create and register the new handler:
    handler could end up being registered as pending if no matching event
    could be found.
  An handler is guaranteed to reside in one and only one of the tables at
  any one time; to ensure this the whole search and create is performed
  holding the @pending_mtx lock, with @registered_mtx additionally acquired
  if needed.
  Note that when a nested acquisition of these mutexes is needed the locking
  order is always (same as in @init_work):
  1. pending_mtx
  2. registered_mtx
  Events generation is NOT enabled right after creation within this routine
  since at creation time we usually want to have all setup and ready before
  events really start flowing.
  Return: A properly refcounted handler on Success, NULL on Failure
 Search registered events at first ... if possible at all 
 ...then amongst pending. 
 Create if still not found and required 
 this hndl can be only a pending one 
  scmi_get_active_handler()  - Helper to get active handlers only
  @ni: A reference to the notification instance to use
  @evt_key: The event key to use
  Search for the desired handler matching the key only in the per-protocol
  table of registered handlers: this is called only from the dispatching path
  so want to be as quick as possible and do not care about pending.
  Return: A properly refcounted active handler
  __scmi_enable_evt()  - Enabledisable events generation
  @r_evt: The registered event to act upon
  @src_id: The src_id to act upon
  @enable: The action to perform: true->Enable, false->Disable
  Takes care of proper refcounting while performing enabledisable: handles
  the special case of ALL sources requests by itself.
  Returns successfully if at least one of the required src_id has been
  successfully enableddisabled.
  Return: 0 on Success
  scmi_put_handler_unlocked()  - Put an event handler
  @ni: A reference to the notification instance to use
  @hndl: The event handler to act upon
  After having got exclusive access to the registered handlers hashtable,
  update the refcount and if @hndl is no more in use by anyone:
   ask for events' generation disabling
   unregister and free the handler itself
  Context: Assumes all the proper locking has been managed by the caller.
  Return: True if handler was freed (users dropped to zero)
		
		  Only registered handler acquired protocol; must be here
		  released only AFTER unlocking registered_mtx, since
		  releasing a protocol can trigger its de-initialization
		  (ie. including r_evt and registered_mtx)
  scmi_event_handler_enable_events()  - Enable events associated to an handler
  @hndl: The Event handler to act upon
  Return: 0 on Success
  scmi_notifier_register()  - Register a notifier_block for an event
  @handle: The handle identifying the platform instance against which the
 	    callback is registered
  @proto_id: Protocol ID
  @evt_id: Event ID
  @src_id: Source ID, when NULL register for events coming form ALL possible
 	    sources
  @nb: A standard notifier block to register for the specified event
  Generic helper to register a notifier_block against a protocol event.
  A notifier_block @nb will be registered for each distinct event identified
  by the tuple (proto_id, evt_id, src_id) on a dedicated notification chain
  so that:
 	(proto_X, evt_Y, src_Z) --> chain_X_Y_Z
  @src_id meaning is protocol specific and identifies the origin of the event
  (like domain_id, sensor_id and so forth).
  @src_id can be NULL to signify that the caller is interested in receiving
  notifications from ALL the available sources for that protocol OR simply that
  the protocol does not support distinct sources.
  As soon as one user for the specified tuple appears, an handler is created,
  and that specific event's generation is enabled at the platform level, unless
  an associated registered event is found missing, meaning that the needed
  protocol is still to be initialized and the handler has just been registered
  as still pending.
  Return: 0 on Success
 Enable events for not pending handlers 
  scmi_notifier_unregister()  - Unregister a notifier_block for an event
  @handle: The handle identifying the platform instance against which the
 	    callback is unregistered
  @proto_id: Protocol ID
  @evt_id: Event ID
  @src_id: Source ID
  @nb: The notifier_block to unregister
  Takes care to unregister the provided @nb from the notification chain
  associated to the specified event and, if there are no more users for the
  event handler, frees also the associated event handler structures.
  (this could possibly cause disabling of event's generation at platform level)
  Return: 0 on Success
	
	  Note that this chain unregistration call is safe on its own
	  being internally protected by an rwsem.
	
	  This balances the initial get issued in @scmi_notifier_register.
	  If this notifier_block happened to be the last known user callback
	  for this event, the handler is here freed and the event's generation
	  stopped.
	 
	  Note that, an ongoing concurrent lookup on the delivery workqueue
	  path could still hold the refcount to 1 even after this routine
	  completes: in such a case it will be the final put on the delivery
	  path which will finally free this unused handler.
  scmi_devm_notifier_register()  - Managed registration of a notifier_block
  for an event
  @sdev: A reference to an scmi_device whose embedded struct device is to
 	  be used for devres accounting.
  @proto_id: Protocol ID
  @evt_id: Event ID
  @src_id: Source ID, when NULL register for events coming form ALL possible
 	    sources
  @nb: A standard notifier block to register for the specified event
  Generic devres managed helper to register a notifier_block against a
  protocol event.
  Return: 0 on Success
  scmi_devm_notifier_unregister()  - Managed un-registration of a
  notifier_block for an event
  @sdev: A reference to an scmi_device whose embedded struct device is to
 	  be used for devres accounting.
  @proto_id: Protocol ID
  @evt_id: Event ID
  @src_id: Source ID, when NULL register for events coming form ALL possible
 	    sources
  @nb: A standard notifier block to register for the specified event
  Generic devres managed helper to explicitly un-register a notifier_block
  against a protocol event, which was previously registered using the above
  @scmi_devm_notifier_register.
  Return: 0 on Success
  scmi_protocols_late_init()  - Worker for late initialization
  @work: The work item to use associated to the proper SCMI instance
  This kicks in whenever a new protocol has completed its own registration via
  scmi_register_protocol_events(): it is in charge of scanning the table of
  pending handlers (registered by users while the related protocol was still
  not initialized) and finalizing their initialization whenever possible;
  invalid pending handlers are purged at this point in time.
 Ensure protocols and events are up to date 
 this hndl can be only a pending one 
  notify_ops are attached to the handle so that can be accessed
  directly from an scmi_driver to register its own notifiers.
  scmi_notification_init()  - Initializes Notification Core Support
  @handle: The handle identifying the platform instance to initialize
  This function lays out all the basic resources needed by the notification
  core instance identified by the provided handle: once done, all of the
  SCMI Protocols can register their events with the core during their own
  initializations.
  Note that failing to initialize the core notifications support does not
  cause the whole SCMI Protocols stack to fail its initialization.
  SCMI Notification Initialization happens in 2 steps:
   initialization: basic common allocations (this function)
   registration: protocols asynchronously come into life and registers their
 		   own supported list of events with the core; this causes
 		   further per-protocol allocations
  Any user's callback registration attempt, referring a still not registered
  event, will be registered as pending and finalized later (if possible)
  by scmi_protocols_late_init() work.
  This allows for lazy initialization of SCMI Protocols due to late (or
  missing) SCMI drivers' modules loading.
  Return: 0 on Success
 Ensure handle is up to date 
  scmi_notification_exit()  - Shutdown and clean Notification core
  @handle: The handle identifying the platform instance to shutdown
 Destroy while letting pending work complete 
 SPDX-License-Identifier: GPL-2.0
  System Control and Management Interface (SCMI) Sensor Protocol
  Copyright (C) 2018-2021 ARM Ltd.
 v3 attributes_low macros 
 v2 attributes_high macros 
 v3 attributes_high macros 
 v3 resolution macros 
 Common attributes_low macros 
 Common attributes_high macros 
 only for version > 2.0 
 Base scmi_sensor_descriptor size excluding extended attrs after name 
 Sign extend to a full s32 
 Base scmi_axis_descriptor size excluding extended attrs after name 
 Set the number of sensors to be skippedalready read 
		
		  Max intervals is not declared previously anywhere so we
		  assume it's returned+remaining.
 segmented intervals are reported in one triplet 
 Direct allocation when exceeding pre-allocated 
		
		  check for both returned and remaining to avoid infinite
		  loop due to buggy firmware
 Set the number of sensors to be skippedalready read 
		
		  check for both returned and remaining to avoid infinite
		  loop due to buggy firmware
 Set the number of sensors to be skippedalready read 
 common bitfields parsing 
			
			  only SCMIv3.0 specific bitfield below.
			  Such bitfields are assumed to be zeroed on non
			  relevant fw versions...assuming fw not buggy !
 common bitfields parsing 
 Use pre-allocated pool wherever possible 
				
				  Convert SCMIv2.0 update interval format to
				  SCMIv3.0 to be used as the common exposed
				  descriptor, accessible via common macros.
				
				  From SCMIv3.0 update intervals are retrieved
				  via a dedicated (optional) command.
				  Since the command is optional, on error carry
				  on without any update interval.
			
			  only > SCMIv2.0 specific bitfield below.
			  Such bitfields are assumed to be zeroed on non
			  relevant fw versions...assuming fw not buggy !
 Only for sensors reporting scalar values 
		
		  check for both returned and remaining to avoid infinite
		  loop due to buggy firmware
  scmi_sensor_reading_get  - Read scalar sensor value
  @ph: Protocol handle
  @sensor_id: Sensor ID
  @value: The 64bit value sensor reading
  This function returns a single 64 bit reading value representing the sensor
  value; if the platform SCMI Protocol implementation and the sensor support
  multiple axis and timestamped-reads, this just returns the first axis while
  dropping the timestamp value.
  Use instead the @scmi_sensor_reading_get_timestamped to retrieve the array of
  timestamped multi-axis values.
  Return: 0 on Success
  scmi_sensor_reading_get_timestamped  - Read multiple-axis timestamped values
  @ph: Protocol handle
  @sensor_id: Sensor ID
  @count: The length of the provided @readings array
  @readings: An array of elements each representing a timestamped per-axis
 	      reading of type @struct scmi_sensor_reading.
 	      Returned readings are ordered as the @axis descriptors array
 	      included in @struct scmi_sensor_info and the max number of
 	      returned elements is min(@count, @num_axis); ideally the provided
 	      array should be of length @count equal to @num_axis.
  Return: 0 on Success
 Retrieve only the number of requested axis anyway 
 payld_sz is variable for this event 
		
		  The generated report r (@struct scmi_sensor_update_report)
		  was pre-allocated to contain up to SCMI_MAX_NUM_SENSOR_AXIS
		  readings: here it is filled with the effective @num_axis
		  readings defined for this sensor or 1 for scalar sensors.
 SPDX-License-Identifier: GPL-2.0
  System Control and Management Interface (SCMI) Message SMCHVC
  Transport driver
  Copyright 2020 NXP
  struct scmi_smc - Structure representing a SCMI smc transport
  @cinfo: SCMI channel info
  @shmem: TransmitReceive shared memory area
  @shmem_lock: Lock to protect access to TxRx shared memory area
  @func_id: smchvc call function id
  @irq: Optional; employed when platforms indicates msg completion by intr.
  @tx_complete: Optional, employed only when irq is valid.
	
	  If there is an interrupt named "a2p", then the service and
	  completion of a message is signaled by an interrupt rather than by
	  the return of the SMC call.
 Only SMCCC_RET_NOT_SUPPORTED is valid error code 
 SPDX-License-Identifier: GPL-2.0
  System Control and Management Interface (SCMI) Base Protocol
  Copyright (C) 2018-2021 ARM Ltd.
  scmi_base_attributes_get() - gets the implementation details
 	that are associated with the base protocol.
  @ph: SCMI protocol handle
  Return: 0 on success, else appropriate SCMI error.
  scmi_base_vendor_id_get() - gets vendorsubvendor identifier ASCII string.
  @ph: SCMI protocol handle
  @sub_vendor: specify true if sub-vendor ID is needed
  Return: 0 on success, else appropriate SCMI error.
  scmi_base_implementation_version_get() - gets a vendor-specific
 	implementation 32-bit version. The format of the version number is
 	vendor-specific
  @ph: SCMI protocol handle
  Return: 0 on success, else appropriate SCMI error.
  scmi_base_implementation_list_get() - gets the list of protocols it is
 	OSPM is allowed to access
  @ph: SCMI protocol handle
  @protocols_imp: pointer to hold the list of protocol identifiers
  Return: 0 on success, else appropriate SCMI error.
 Set the number of protocols to be skippedalready read 
  scmi_base_discover_agent_get() - discover the name of an agent
  @ph: SCMI protocol handle
  @id: Agent identifier
  @name: Agent identifier ASCII string
  An agent id of 0 is reserved to identify the platform itself.
  Generally operating system is represented as "OSPM"
  Return: 0 on success, else appropriate SCMI error.
	
	  BaseError notification payload is variable in size but
	  up to a maximum length determined by the struct ponted by p.
	  Instead payld_sz is the effective length of this notification
	  payload so cannot be greater of the maximum allowed size as
	  pointed by p.
 SPDX-License-Identifier: GPL-2.0
  System Control and Management Interface (SCMI) Power Protocol
  Copyright (C) 2018-2021 ARM Ltd.
 SPDX-License-Identifier: GPL-2.0
  System Control and Management Interface (SCMI) Voltage Protocol
  Copyright (C) 2020-2021 ARM Ltd.
	
	  segmented levels entries are represented by a single triplet
	  returned all in one go.
 Retrieve domain attributes at first ... 
 Skip domain on comms error 
 ...then retrieve domain levels descriptions 
 Allocate space for num_levels if not already done 
 check both to avoid infinite loop due to buggy fw 
 SPDX-License-Identifier: GPL-2.0
  SCMI Generic power domain support.
  Copyright (C) 2018-2021 ARM Ltd.
 SPDX-License-Identifier: GPL-2.0
  System Control and Management Interface (SCMI) Message Mailbox Transport
  driver.
  Copyright (C) 2019 ARM Ltd.
  struct scmi_mailbox - Structure representing a SCMI mailbox transport
  @cl: Mailbox Client
  @chan: TransmitReceive mailbox channel
  @cinfo: SCMI channel info
  @shmem: TransmitReceive shared memory area
 mbox_send_message returns non-negative value on success, so reset 
	
	  NOTE: we might prefer not to need the mailbox ticker to manage the
	  transfer queueing since the protocol layer queues things by itself.
	  Unfortunately, we have to kick the mailbox framework after we have
	  received our message.
 We may increase this if required 
 Limited by MBOX_TX_QUEUE_LEN 
 SPDX-License-Identifier: GPL-2.0
  For transports using message passing.
  Derived from shm.c.
  Copyright (C) 2019-2021 ARM Ltd.
  Copyright (C) 2020-2021 OpenSynergy GmbH
  struct scmi_msg_payld - Transport SDU layout
  The SCMI specification requires all parameters, message headers, return
  arguments or any protocol data to be expressed in little endian format only.
  msg_command_size() - Actual size of transport SDU for command.
  @xfer: message which core has prepared for sending
  Return: transport SDU size.
  msg_response_size() - Maximum size of transport SDU for response.
  @xfer: message which core has prepared for sending
  Return: transport SDU size.
  msg_tx_prepare() - Set up transport SDU for command.
  @msg: transport SDU for command
  @xfer: message which is being sent
  msg_read_header() - Read SCMI header from transport SDU.
  @msg: transport SDU
  Return: SCMI header
  msg_fetch_response() - Fetch response SCMI payload from transport SDU.
  @msg: transport SDU with response
  @len: transport SDU size
  @xfer: message being responded to
 Take a copy to the rx buffer.. 
  msg_fetch_notification() - Fetch notification payload from transport SDU.
  @msg: transport SDU with notification
  @len: transport SDU size
  @max_len: maximum SCMI payload size to fetch
  @xfer: notification message
 Take a copy to the rx buffer.. 
 SPDX-License-Identifier: GPL-2.0
  Virtio Transport driver for Arm System Control and Management Interface
  (SCMI).
  Copyright (C) 2020-2021 OpenSynergy.
  Copyright (C) 2021 ARM Ltd.
  DOC: Theory of Operation
  The scmi-virtio transport implements a driver for the virtio SCMI device.
  There is one Tx channel (virtio cmdq, A2P channel) and at most one Rx
  channel (virtio eventq, P2A channel). Each channel is implemented through a
  virtqueue. Access to each virtqueue is protected by spinlocks.
 Value may be increased. 
  struct scmi_vio_channel - Transport channel information
  @vqueue: Associated virtqueue
  @cinfo: SCMI Tx or Rx channel
  @free_list: List of unused scmi_vio_msg, maintained for Tx channels only
  @is_rx: Whether channel is an Rx channel
  @ready: Whether transport user is ready to hear about channel
  @max_msg: Maximum number of pending messages for this channel.
  @lock: Protects access to all members except ready.
  @ready_lock: Protects access to ready. If required, it must be taken before
               lock.
 lock to protect access to all members except ready. 
 lock to rotects access to ready flag. 
  struct scmi_vio_msg - Transport PDU information
  @request: SDU used for commands
  @input: SDU used for (delayed) responses and notifications
  @list: List which scmi_vio_msg may be part of
  @rx_len: Input SDU size in bytes, once input has been received
 Only one SCMI VirtIO device can possibly exist 
 Here IRQs are assumed to be already disabled by the caller 
 IRQs already disabled here no need to irqsave 
		
		  Release ready_lock and re-enable IRQs between loop iterations
		  to allow virtio_chan_free() to possibly kick in and set the
		  flag vioch->ready to false even in between processing of
		  messages, so as to force outstanding messages to be ignored
		  when system is shutting down.
 Indirectly setting channel not available any more 
 Only one SCMI VirtiO device allowed 
 Tx messages need multiple descriptors. 
 Ensure initialized scmi_vdev is visible 
	
	  Once we get here, virtio_chan_free() will have already been called by
	  the SCMI core for any existing channel and, as a consequence, all the
	  virtio channels will have been already marked NOT ready, causing any
	  outstanding message on any vqueue to be ignored by complete_cb: now
	  we can just stop processing buffers and destroy the vqueues.
 Ensure scmi_vdev is visible as NULL 
 for non-realtime virtio devices 
 overridden by virtio_get_max_msg() 
 SPDX-License-Identifier: GPL-2.0
  System Control and Management Interface (SCMI) Reset Protocol
  Copyright (C) 2019-2021 ARM Ltd.
 SPDX-License-Identifier: GPL-2.0-only
  coreboot_table.c
  Module providing coreboot table access.
  Copyright 2017 Google Inc.
  Copyright 2017 Samuel Holland <samuel@sholland.org>
 Check just the header first to make sure things are sane 
 SPDX-License-Identifier: GPL-2.0-only
  memconsole-x86-legacy.c
  EBDA specific parts of the memory based BIOS console.
  Copyright 2017 Google Inc.
 Misdocumented as number of pages! 
  Search through the EBDA for the BIOS Memory Console, and
  set the global variables to point to it.  Return true if found.
 EBDA length is byte 0 of EBDA (in KB) 
 convert to bytes 
	
	  Search through EBDA for BIOS memory console structure
	  note: signature is not necessarily dword-aligned
 memconsole v1 
 memconsole v2 
 SPDX-License-Identifier: GPL-2.0-only
  vpd.c
  Driver for exporting VPD content to sysfs.
  Copyright 2017 Google Inc.
 the string name_raw 
 vpdname directory 
 vpdname_raw bin_attribute 
 keyvalue in vpd_attrib_info list 
  vpd_section_check_key_name()
  The VPD specification supports only [a-zA-Z0-9_]+ characters in key names but
  old firmware versions may have entries like "SN" which are problematic when
  exporting them as sysfs attributes. These keys present in old firmwares are
  ignored.
  Returns VPD_OK for a valid key name, VPD_FAIL otherwise.
  @key: The key name to check
  @key_len: key name length
	
	  Return VPD_OK immediately to decode next entry if the current key
	  name contains invalid characters.
 We want to export the raw partition with name ${name}_raw 
 SPDX-License-Identifier: GPL-2.0-only
  framebuffer-coreboot.c
  Memory based framebuffer accessed through coreboot table.
  Copyright 2012-2013 David Herrmann <dh.herrmann@gmail.com>
  Copyright 2017 Google Inc.
  Copyright 2017 Samuel Holland <samuel@sholland.org>
 SPDX-License-Identifier: GPL-2.0-only
  Copyright 2010 Google Inc. All Rights Reserved.
  Author: dlaurie@google.com (Duncan Laurie)
  Re-worked to expose sysfs APIs by mikew@google.com (Mike Waychison)
  EFI SMI interface for Google platforms
 Clean Shutdown 
 TODO(mikew@google.com): Tie in HARDLOCKUP_DETECTOR with NMIWDT 
 NMI Watchdog 
 Panic 
 Oops 
 Die -- No longer meaningful 
 Machine Check 
 Software Watchdog 
 Uncorrected ECC 
 Triple Fault 
 SMI return codes 
 Internally used commands passed to the firmware 
 Magic entry type for kernel events 
 SMI buffers must be in 32bit physical address space 
 start of buffer 
 length of buffer 
 physical address of buffer 
 platform device 
 variable name buffer 
 generic data buffer 
 parameter buffer 
 serialize access to SMIs 
 SMI command port 
 firmware handler interlock type 
 kmem cache for gsmi_buf allocations 
 Packed structures for communicating with the firmware 
 Event log formats 
  Some platforms don't have explicit SMI handshake
  and need to wait for SMI to complete.
  Some older platforms with Apollo Lake chipsets do not support S0ix logging
  in their GSMI handlers, and behaved poorly when resuming via power button
  press if the logging was attempted. Updated firmware with proper behavior
  has long since shipped, removing the need for this opt-in parameter. It
  now exists as an opt-out parameter for folks defiantly running old
  firmware, or unforeseen circumstances. After the change from opt-in to
  opt-out has baked sufficiently, this parameter should probably be removed
  entirely.
 allocate buffer in 32bit address space 
 fill in the buffer handle 
  Make a call to gsmi func(sub).  GSMI error codes are translated to
  in-kernel errnos (0 on success, -ERRNO on error).
	
	  AH  : Subfunction number
	  AL  : Function number
	  EBX : Parameter block address
	  DX  : SMI command port
	 
	  Three protocols here. See also the comment in gsmi_init().
		
		  If handshake_type == HANDSHAKE_CF then set CF on the
		  way in and wait for the handler to clear it; this avoids
		  corrupting register state on those chipsets which have
		  a delay between writing the SMI trigger register and
		  entering SMM.
		
		  If handshake_type == HANDSHAKE_SPIN we spin a
		  hundred-ish usecs to ensure the SMI has triggered.
		
		  If handshake_type == HANDSHAKE_NONE we do nothing;
		  either we don't need to or it's legacy firmware that
		  doesn't understand the CF protocol.
 check return code from SMI handler 
 not really an error, but let the caller know 
 Vendor guid 
 variable name, already in UTF-16 
 data pointer 
 parameter buffer 
 variable was not found 
 Get the arguments back 
 The size reported is the min of all of our buffers 
 Copy data back to return buffer. 
 All variables are have the following attributes 
 For the moment, only support buffers that exactly match in size 
 Let's make sure the thing is at least null-terminated 
 guid 
 variable name, already in UTF-16 
 parameter buffer 
 variable not found -- end of list 
 copy variable data back to return buffer 
 Copy the name back 
 copy guid to return buffer 
 guid 
 variable name, already in UTF-16 
 data pointer 
 parameter buffer 
 CONFIG_EFI 
 Pull the type out 
 The remaining buffer is the data payload 
 data pointer 
 parameter buffer 
	
	  Value entered is a percentage, 0 through 100, anything else
	  is invalid.
 data_type here selects the smbios event log. 
 parameter buffer 
 clear parameter buffer 
 avoid duplicate entries in the log 
 data pointer 
 parameter buffer 
  This hash function was blatantly copied from includelinuxhash.h.
  It is used by this driver to obfuscate a board name that requires a
  quirk within this driver.
  Please do not remove this copy of the function as any changes to the
  global utility hash_64() function would break this driver's ability
  to identify a board and provide the appropriate quirk -- mikew@google.com
  Sigh, gcc can't optimise this alone like it does for 32 bits. 
 High bits are more random, so use them. 
	
	  Only newer firmware supports the gsmi interface.  All older
	  firmware that didn't support this interface used to plug the
	  table name in the first four bytes of the oem_table_id field.
	  Newer firmware doesn't do that though, so use that as the
	  discriminant factor.  We have to do this in order to
	  whitewash our board names out of the public driver.
 Disable on board with 1.0 BIOS due to Google bug 2602657 
 check for valid SMI command port in ACPI FADT 
	 Test the smihandler with a bogus command. If it leaves the
	  calling argument in %ax untouched, there is no handler for
	  GSMI commands.
 Found 
 SMI callbacks require 32bit addresses 
	
	  If platform has not enabled S0ix logging, then no action is
	  necessary.
	
	  If system is not suspending via firmware using the standard ACPI Sx
	  types, then make a GSMI call to log the suspend info.
	
	  Always return success, since we do not want suspend
	  to fail just because of logging failure.
	
	  If system did not resume via firmware, then make a GSMI call to log
	  the resume info and wake source.
	
	  Always return success, since we do not want resume
	  to fail just because of logging failure.
 register device 
 SMI access needs to be serialized 
	
	  SLAB cache is created using SLAB_CACHE_DMA32 to ensure that the
	  allocations for gsmi_buf come from the DMA32 memory zone. These
	  buffers have nothing to do with DMA. They are required for
	  communication with firmware executing in SMI mode which can only
	  access the bottom 4GiB of physical memory. Since DMA32 memory zone
	  guarantees allocation under the 4GiB boundary, this driver creates
	  a SLAB cache with SLAB_CACHE_DMA32 flag.
	
	  pre-allocate buffers because sometimes we are called when
	  this is not feasible: oops, panic, die, mce, etc
	
	  Determine type of handshake used to serialize the SMI
	  entry. See also gsmi_exec().
	 
	  There's a "behavior" present on some chipsets where writing the
	  SMI trigger register in the southbridge doesn't result in an
	  immediate SMI. Rather, the processor can execute "a few" more
	  instructions before the SMI takes effect. To ensure synchronous
	  behavior, implement a handshake between the kernel driver and the
	  firmware handler to spin until released. This ioctl determines
	  the type of handshake.
	 
	  NONE: The firmware handler does not implement any
	  handshake. Either it doesn't need to, or it's legacy firmware
	  that doesn't know it needs to and never will.
	 
	  CF: The firmware handler will clear the CF in the saved
	  state before returning. The driver may set the CF and test for
	  it to clear before proceeding.
	 
	  SPIN: The firmware handler does not implement any handshake
	  but the driver should spin for a hundred or so microseconds
	  to ensure the SMI has triggered.
	 
	  Finally, the handler will return -ENOSYS if
	  GSMI_CMD_HANDSHAKE_TYPE is unimplemented, which implies
	  HANDSHAKE_NONE.
 Remove and clean up gsmi if the handshake could not complete. 
 Register in the firmware directory 
 Setup eventlog access 
 Other attributes 
 SPDX-License-Identifier: GPL-2.0-only
  memconsole-coreboot.c
  Memory based BIOS console accessed through coreboot table.
  Copyright 2017 Google Inc.
 CBMEM firmware console log descriptor. 
  The cbmem_console structure is read again on every access because it may
  change at any time if runtime firmware logs new messages. This may rarely
  lead to race conditions where the firmware overwrites the beginning of the
  ring buffer with more lines after we have already read |cursor|. It should be
  rare and harmless enough that we don't spend extra effort working around it.
 describes ring buffer segments in logical order 
 physical offset from start of mem buffer 
 length of segment 
 Shouldn't really happen, but... 
 Read size only once to prevent overrun attack through devmem. 
 SPDX-License-Identifier: GPL-2.0-only
  memconsole.c
  Architecture-independent parts of the memory based BIOS console.
  Copyright 2017 Google Inc.
 SPDX-License-Identifier: GPL-2.0-only
  vpd_decode.c
  Google VPD decoding routines.
  Copyright 2017 Google Inc.
 entry_len is untrusted data and must be checked again. 
 type 
 SPDX-License-Identifier: GPL-2.0-only
  Arm Firmware Framework for ARMv8-A(FFA) interface driver
  The Arm FFA specification[1] describes a software architecture to
  leverages the virtualization extension to isolate software images
  provided by an ecosystem of vendors from each other and describes
  interfaces that standardize communication between the various software
  images including communication between images in the Secure world and
  Normal world. Any Hypervisor could use the FFA interfaces to enable
  communication between VMs it manages.
  The Hypervisor a.k.a Partition managers in FFA terminology can assign
  system resources(Memory regions, Devices, CPU cycles) to the partitions
  and manage isolation amongst them.
  [1] https:developer.arm.comdocsden0077latest
  Copyright (C) 2021 ARM Ltd.
  For some calls it is necessary to use SMC64 to pass or return 64-bit values.
  For such calls FFA_FN_NATIVE(name) will choose the appropriate
  (native-width) function ID.
 FFA error codes. 
  FF-A specification mentions explicitly about '4K pages'. This should
  not be confused with the kernel PAGE_SIZE, which is the translation
  granule kernel is configured and may be one among 4K, 16K and 64K.
  Keeping RX TX buffer size as 4K for now
  64K may be preferred to keep it min a page in 64K PAGE_SIZE config
 better than switch case as long as return value is continuous 
 FFA_RET_SUCCESS 
 FFA_RET_NOT_SUPPORTED 
 FFA_RET_INVALID_PARAMETERS 
 FFA_RET_NO_MEMORY 
 FFA_RET_BUSY 
 FFA_RET_INTERRUPTED 
 FFA_RET_DENIED 
 FFA_RET_RETRY 
 FFA_RET_ABORTED 
 lock to protect Rx buffer 
 lock to protect Tx buffer 
  The driver must be able to support all the versions from the earliest
  supported FFA_MIN_VERSION to the latest supported FFA_DRIVER_VERSION.
  The specification states that if firmware supports a FFA implementation
  that is incompatible with and at a greater version number than specified
  by the caller(FFA_DRIVER_VERSION passed as parameter to FFA_VERSION),
  it must return the NOT_SUPPORTED error code.
 check for ret.a0 == FFA_RX_RELEASE ? 
 buffer must be sizeof(struct ffa_partition_info)  num_partitions 
 buffer is allocated and caller must free the same if returned count > 0 
	 Note that upon a successful MEM_LEND request the caller
	  must ensure that the memory region specified is not accessed
	  until a successful MEM_RECALIM call has been made.
	  On systems with a hypervisor present this will been enforced,
	  however on systems without a hypervisor the responsibility
	  falls to the calling kernel driver to prevent access.
		 Note that the &uuid_null parameter will require
		  ffa_device_match() to find the UUID of this partition id
		  with help of ffa_device_match_uuid(). Once the FF-A spec
		  is updated to provide correct UUID here for each partition
		  as part of the discovery API, we need to pass the
		  discovered UUID here instead.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2021 ARM Ltd.
		
		  FF-A v1.0 doesn't provide discovery of UUIDs, just the
		  partition IDs, so fetch the partitions IDs for this
		  id_table UUID and assign the UUID to the device if the
		  partition ID matches
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2021 ARM Ltd.
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2018, NVIDIA CORPORATION.
 reset the channel state 
 sync the channel state with BPMP 
 mbox registration 
 reset message channels 
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2018, NVIDIA CORPORATION.
	
	  Tegra Legacy Interrupt Controller (LIC) is used to notify BPMP of
	  available messages
 Retrieve channel base address from BPMP 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2017, NVIDIA CORPORATION.  All rights reserved.
 map filename in Linux debugfs to corresponding entry in BPMP 
 go up a level 
 malformed data received from BPMP 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2014-2016, NVIDIA CORPORATION.  All rights reserved.
  IVC channel reset protocol.
  Each end uses its tx_channel.state to indicate its synchronization state.
	
	  This value is zero for backwards compatibility with services that
	  assume channels to be initially zeroed. Such channels are in an
	  initially valid state, but cannot be asynchronously reset, and must
	  maintain a valid state at all times.
	 
	  The transmitting end can enter the established state from the sync or
	  ack state when it observes the receiving endpoint in the ack or
	  established state, indicating that has cleared the counters in our
	  rx_channel.
	
	  If an endpoint is observed in the sync state, the remote endpoint is
	  allowed to clear the counters it owns asynchronously with respect to
	  the current endpoint. Therefore, the current endpoint is no longer
	  allowed to communicate.
	
	  When the transmitting end observes the receiving end in the sync
	  state, it can clear the w_count and r_count and transition to the ack
	  state. If the remote endpoint observes us in the ack state, it can
	  return to the established state once it has cleared its counters.
  This structure is divided into two-cache aligned parts, the first is only
  written through the tx.channel pointer, while the second is only written
  through the rx.channel pointer. This delineates ownership of the cache
  lines, which is critical to performance and necessary in non-cache coherent
  implementations.
 fields owned by the transmitting end 
 fields owned by the receiving end 
	
	  This function performs multiple checks on the same values with
	  security implications, so create snapshots with READ_ONCE() to
	  ensure that these checks use the same values.
	
	  Perform an over-full check to prevent denial of service attacks
	  where a server could be easily fooled into believing that there's
	  an extremely large number of frames ready, since receivers are not
	  expected to check for full or over-full conditions.
	 
	  Although the channel isn't empty, this is an invalid case caused by
	  a potentially malicious peer, so returning empty is safer, because
	  it gives the impression that the channel has gone silent.
	
	  Invalid cases where the counters indicate that the queue is over
	  capacity also appear full.
	
	  This function isn't expected to be used in scenarios where an
	  over-full situation can lead to denial of service attacks. See the
	  comment in tegra_ivc_empty() for an explanation about special
	  over-full considerations.
	
	  tx.channel->state is set locally, so it is not synchronized with
	  state from the remote peer. The remote peer cannot reset its
	  transmit counters until we've acknowledged its synchronization
	  request, so no additional synchronization is required because an
	  asynchronous transition of rx.channel->state to
	  TEGRA_IVC_STATE_ACK is not allowed.
	
	  Avoid unnecessary invalidations when performing repeated accesses
	  to an IVC channel by checking the old queue pointers first.
	 
	  Synchronization is only necessary when these pointers indicate
	  empty or full.
 directly peek at the next frame rx'ed 
	
	  Order observation of ivc->rx.position potentially indicating new
	  data before data read.
	
	  No read barriers or synchronization here: the caller is expected to
	  have already observed the channel non-empty. This check is just to
	  catch programming errors.
	
	  Ensure our write to ivc->rx.position occurs before our read from
	  ivc->tx.position.
	
	  Notify only upon transition from full to non-full. The available
	  count can only asynchronously increase, so the worst possible
	  side-effect will be a spurious notification.
 directly poke at the next frame to be tx'ed 
 advance the tx buffer 
	
	  Order any possible stores to the frame before update of
	  ivc->tx.position.
	
	  Ensure our write to ivc->tx.position occurs before our read from
	  ivc->rx.position.
	
	  Notify only upon transition from empty to non-empty. The available
	  count can only asynchronously decrease, so the worst possible
	  side-effect will be a spurious notification.
  =======================================================
   IVC State Transition Table - see tegra_ivc_notified()
  =======================================================
 	local	remote	action
 	-----	------	-----------------------------------
 	SYNC	EST	<none>
 	SYNC	ACK	reset counters; move to EST; notify
 	SYNC	SYNC	reset counters; move to ACK; notify
 	ACK	EST	move to EST; notify
 	ACK	ACK	move to EST; notify
 	ACK	SYNC	reset counters; move to ACK; notify
 	EST	EST	<none>
 	EST	ACK	<none>
 	EST	SYNC	reset counters; move to ACK; notify
  ===============================================================
 Copy the receiver's state out of shared memory. 
		
		  Order observation of TEGRA_IVC_STATE_SYNC before stores
		  clearing tx.channel.
		
		  Reset tx.channel counters. The remote end is in the SYNC
		  state and won't make progress until we change our state,
		  so the counters are not in use at this time.
		
		  Ensure that counters appear cleared before new state can be
		  observed.
		
		  Move to ACK state. We have just cleared our counters, so it
		  is now safe for the remote end to start using these values.
		
		  Notify remote end to observe state transition.
		
		  Order observation of ivc_state_sync before stores clearing
		  tx_channel.
		
		  Reset tx.channel counters. The remote end is in the ACK
		  state and won't make progress until we change our state,
		  so the counters are not in use at this time.
		
		  Ensure that counters appear cleared before new state can be
		  observed.
		
		  Move to ESTABLISHED state. We know that the remote end has
		  already cleared its counters, so it is safe to start
		  writingreading on this channel.
		
		  Notify remote end to observe state transition.
		
		  At this point, we have observed the peer to be in either
		  the ACK or ESTABLISHED state. Next, order observation of
		  peer state before storing to tx.channel.
		
		  Move to ESTABLISHED state. We know that we have previously
		  cleared our counters, and we know that the remote end has
		  cleared its counters, so it is safe to start writingreading
		  on this channel.
		
		  Notify remote end to observe state transition.
		
		  There is no need to handle any further action. Either the
		  channel is already fully established, or we are waiting for
		  the remote end to catch up with our current state. Refer
		  to the diagram in "IVC State Transition Table" above.
	
	  The headers must at least be aligned enough for counters
	  to be accessed atomically.
	
	  All sizes that can be returned by communication functions should
	  fit in an int.
	
	  These values aren't necessarily correct until the channel has been
	  reset.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2016, NVIDIA CORPORATION.  All rights reserved.
 deprecated version of tag query 
 SPDX-License-Identifier: GPL-2.0+
  Copyright 2019 NXP
   Author: Daniel Baluta <daniel.baluta@nxp.com>
  Implementation of the DSP IPC interface (host side)
  imx_dsp_ring_doorbell - triggers an interrupt on the other side (DSP)
  @dsp: DSP IPC handle
  @chan_idx: index of the channel where to trigger the interrupt
  Returns non-negative value for success, negative value for error
  imx_dsp_handle_rx - rx callback used by imx mailbox
  @c: mbox client
  @msg: message received
  Users of DSP IPC will need to privde handle_reply and handle_request
  callbacks.
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2016 Freescale Semiconductor, Inc.
  Copyright 2017~2018 NXP
   Author: Dong Aisheng <aisheng.dong@nxp.com>
  File containing client-side RPC functions for the MISC service. These
  function are ported to clients that communicate to the SC.
  This function sets a miscellaneous control value.
  @param[in]     ipc         IPC handle
  @param[in]     resource    resource the control is associated with
  @param[in]     ctrl        control to change
  @param[in]     val         value to apply to the control
  @return Returns 0 for success and < 0 for errors.
  This function gets a miscellaneous control value.
  @param[in]     ipc         IPC handle
  @param[in]     resource    resource the control is associated with
  @param[in]     ctrl        control to get
  @param[out]    val         pointer to return the control value
  @return Returns 0 for success and < 0 for errors.
  This function startsstops a CPU identified by @resource
  @param[in]     ipc         IPC handle
  @param[in]     resource    resource the control is associated with
  @param[in]     enable      true for start, false for stop
  @param[in]     phys_addr   initial instruction address to be executed
  @return Returns 0 for success and < 0 for errors.
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2016 Freescale Semiconductor, Inc.
  Copyright 2017-2018 NXP
 	Dong Aisheng <aisheng.dong@nxp.com>
  Implementation of the SCU based Power Domains
  NOTE: a better implementation suggested by Ulf Hansson is using a
  single global power domain and implement the ->attach|detach_dev()
  callback for the genpd and use the regular of_genpd_add_provider_simple().
  From within the ->attach_dev(), we could get the OF node for
  the device that is being attached and then parse the power-domain
  cell containing the "resource id" and store that in the per device
  struct generic_pm_domain_data (we have void pointer there for
  storing these kind of things).
  Additionally, we need to implement the ->stop() and ->start()
  callbacks of genpd, which is where you "power onoff" devices,
  rather than using the above ->power_on|off() callbacks.
  However, there're two known issues:
  1. The ->attach_dev() of power domain infrastructure still does
     not support multi domains case as the struct device dev passed
     in is a virtual PD device, it does not help for parsing the real
     device resource id from device tree, so it's unware of which
     real sub power domain of device should be attached.
     The framework needs some proper extension to support multi power
     domain cases.
     Update: Genpd assigns the ->of_node for the virtual device before it
     invokes ->attach_dev() callback, hence parsing for device resources via
     DT should work fine.
  2. It also breaks most of current drivers as the driver probe sequence
     behavior changed if removing ->power_on|off() callback and use
     ->start() and ->stop() instead. genpd_dev_pm_attach will only power
     up the domain and attach device, but will not call .start() which
     relies on device runtime pm. That means the device power is still
     not up before running driver probe function. For SCU enabled
     platforms, all device drivers accessing registersclock without power
     domain enabled will trigger a HW access error. That means we need fix
     most drivers probe sequence with proper runtime pm.
     Update: Runtime PM support isn't necessary. Instead, this can easily be
     fixed in drivers by adding a call to dev_pm_domain_start() during probe.
  In summary, the second part needs to be addressed via minor updates to the
  relevant drivers, before the "single global power domain" model can be used.
 SCU Power Mode Protocol definition 
 add domain index 
 LSIO SS 
 CONN SS 
 AUDIO SS 
 DMA SS 
 VPU SS 
 GPU SS 
 HSIO SS 
 MIPI SS 
 LVDS SS 
 DC SS 
 CM40 SS 
 CM41 SS 
 IMAGE SS 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0+
  Copyright 2019 NXP
  Implementation of the SCU IRQ functions using MU.
 SCU general IRQ uses general interrupt channel 3 
 use mu1 as general mu irq channel if failed 
 SPDX-License-Identifier: GPL-2.0+
  Copyright 2018 NXP
   Author: Dong Aisheng <aisheng.dong@nxp.com>
  Implementation of the SCU IPC functions using MUs (client side).
 SCU uses 4 Tx and 4 Rx channels 
 temporarily store the SCU msg 
  This type is used to indicate error response for most functions.
 Success 
 Incompatible API version 
 Configuration error 
 Bad parameter 
 Permission error (no access) 
 Permission error (locked) 
 Unavailable (out of resources) 
 Not found 
 No power 
 Generic IPC error 
 Resource is currently busyactive 
 General IO failure 
 IMX_SC_ERR_NONE 
 IMX_SC_ERR_VERSION 
 IMX_SC_ERR_CONFIG 
 IMX_SC_ERR_PARM 
 IMX_SC_ERR_NOACCESS 
 IMX_SC_ERR_LOCKED 
 IMX_SC_ERR_UNAVAILABLE 
 IMX_SC_ERR_NOTFOUND 
 IMX_SC_ERR_NOPOWER 
 IMX_SC_ERR_IPC 
 IMX_SC_ERR_BUSY 
 IMX_SC_ERR_FAIL 
  Get the default handle used by SCU
 Callback called when the word of a message is ack-ed, eg read by SCU 
 Check size 
		
		  SCU requires that all messages words are written
		  sequentially but linux MU driver implements multiple
		  independent channels for each register so ordering between
		  different channels must be ensured by SCU API interface.
		 
		  Wait for tx_done before every send to ensure that no
		  queueing happens at the mailbox channel level.
  RPC commandresponse
 response status is stored in hdr->func field 
		
		  Some special SCU firmware APIs do NOT have return value
		  in hdr->func, but they do have response data, those special
		  APIs are defined as void function in SCU firmware, so they
		  should be treated as return success always.
 Initial tx_done completion as "done" 
 chan_name is not used anymore by framework 
 Sentinel  }
 SPDX-License-Identifier: GPL-2.0+
  Copyright 2020 NXP
  File containing client-side RPC functions for the RM service. These
  function are ported to clients that communicate to the SC.
  This function check @resource is owned by current partition or not
  @param[in]     ipc         IPC handle
  @param[in]     resource    resource the control is associated with
  @return Returns 0 for not owned and 1 for owned.
	
	  SCU firmware only returns value 0 or 1
	  for resource owned check which means not owned or owned.
	  So it is always successful.
 SPDX-License-Identifier: GPL-2.0
  Copyright 2019 NXP.
 format soc_id value passed from SCU firmware 
 format revision value passed from SCU firmware 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015 ARM Limited
  While a 64-bit OS can make calls with SMC32 calling conventions, for some
  calls it is necessary to use SMC64 to pass or return 64-bit values.
  For such calls PSCI_FN_NATIVE(version, name) will choose the appropriate
  (native-width) function ID.
  The CPU any Trusted OS is resident on. The trusted OS may reject CPU_OFF
  calls to its resident CPU, so we must avoid issuing those. We never migrate
  a Trusted OS even if it claims to be capable of migration -- doing so will
  require cooperation with a Trusted OS driver.
		
		  reset_type[31] = 0 (architectural)
		  reset_type[30:0] = 0 (SYSTEM_WARM_RESET)
		  cookie = 0 (ignored by the implementation)
  Detect the presence of a resident Trusted OS which may cause CPU_OFF to
  return DENIED (which would be fatal).
	
	  Conveniently, the SMCCC and PSCI versions are encoded the
	  same way. No, this isn't accidental.
  Probe function for PSCI firmware versions >= 0.2
  PSCI init function for PSCI versions >=0.2
  Probe based on PSCI PSCI_VERSION function
	
	  Starting with v0.2, the PSCI specification introduced a call
	  (PSCI_VERSION) that allows probing the firmware version, so
	  that PSCI function IDs and version specific initialization
	  can be carried out according to the specific version reported
	  by firmware
  PSCI < v0.2 get PSCI Function IDs via DT.
 Default to PC mode. 
  We use PSCI 0.2+ when ACPI is deployed on ARM64 and it's
  explicitly clarified in SBBR
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2016 ARM Limited
  We assume that PSCI operations are used if they are available. This is not
  necessarily true on arm64, since the decision is based on the
  "enable-method" property of each CPU in the DT, but given that there is no
  arch-specific way to check this, we assume that the DT is sensible.
 There is a UP Trusted OS, find on which core it resides. 
  offlined_cpus is a temporary array but passing it as an argument avoids
  multiple allocations.
 Try to power down all CPUs in the mask. 
		
		  cpu_down() checks the number of online CPUs before the TOS
		  resident CPU.
 Try to power up all the CPUs that have been offlined. 
	
	  Something went bad at some point and some CPUs could not be turned
	  back on.
	
	  Of course the last CPU cannot be powered down and cpu_down() should
	  refuse doing that.
	
	  Take down CPUs by cpu group this time. When the last CPU is turned
	  off, the cpu group itself should shut down.
 Remove trailing newline. 
		
		  The local timer will be shut down, we need to enter tick
		  broadcast.
			
			  In the absence of hardware broadcast mechanism,
			  this CPU might be used to broadcast wakeups, which
			  may be why entering tick broadcast has failed.
			  There is little the kernel can do to work around
			  that, so enter WFI instead (idle state 0).
 No need for an actual callback, we just want to wake up the CPU. 
 Wait for the main thread to give the start signal. 
 Set maximum priority to preempt all other threads on this CPU. 
		
		  Test all possible states, except 0 (which is usually WFI and
		  doesn't use PSCI).
			
			  Set the timer to wake this CPU up in some time (which
			  should be largely sufficient for entering suspend).
			  If the local tick is disabled when entering suspend,
			  suspend_cpu() takes care of switching to a broadcast
			  tick, so the timer will still wake us up.
 IRQs must be disabled during suspend operations. 
			
			  We have woken up. Re-enable IRQs to handle any
			  pending interrupt, do not wait until the end of the
			  loop.
 We did not enter the expected state. 
	
	  Disable the timer to make sure that the timer will not trigger
	  later.
 Needs to be set first to avoid missing a wakeup. 
	
	  Stop cpuidle to prevent the idle tasks from entering a deep sleep
	  mode, as it might interfere with the suspend threads on other CPUs.
	  This does not prevent the suspend threads from using cpuidle (only
	  the idle tasks check this status). Take the idle lock so that
	  the cpuidle driver and device look-up can be carried out safely.
 Check that cpuidle is available on that CPU. 
	
	  Wake up the suspend threads. To avoid the main thread being preempted
	  before all the threads have been unparked, the suspend threads will
	  wait for the completion of suspend_threads_started.
 Stop and destroy all threads, get return status. 
	
	  Since we're in an initcall, we assume that all the CPUs that all
	  CPUs that can be onlined have been onlined.
	 
	  The tests assume that hotplug is enabled but nobody else is using it,
	  otherwise the results will be unpredictable. However, since there
	  is no userspace yet in initcalls, that should be fine, as long as
	  no torture test is running at the same time (see Kconfig).
 Check PSCI operations are set up and working. 
 SPDX-License-Identifier: GPL-2.0
  Renesas RZA Series WDT Driver
  Copyright (C) 2017 Renesas Electronics America, Inc.
  Copyright (C) 2017 Chris Brandt
 Watchdog Timer Registers 
 special value 
 The maximum CKS register setting value to get the longest timeout 
 Clock divider when CKS = 0x7 
 Clock divider when CKS = 0xF 
		
		  Since max_timeout was set in probe, we know that the timeout
		  value passed will never calculate to a tick value greater
		  than 256.
 Start timer with longest timeout 
 Stop timer 
 Must dummy read WRCSR:WOVF at least once before clearing 
 Stop timer 
 Must dummy read WRCSR:WOVF at least once before clearing 
	
	  Start timer with fastest clock source and only 1 clock left before
	  overflow with reset option enabled.
	
	  Actually make sure the above sequence hits hardware before sleeping.
 Wait for WDT overflow (reset) 
 Assume slowest clock rate possible (CKS=0xF) 
 Assume slowest clock rate possible (CKS=7) 
		
		  Since the max possible timeout of our 8-bit count
		  register is less than a second, we must use
		  max_hw_heartbeat_ms.
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
 	Xen Watchdog Driver
 	(c) Copyright 2010 Novell, Inc.
 in seconds 
 SPDX-License-Identifier: GPL-2.0-or-later
  driverswatchdogshwdt.c
  Watchdog driver for integrated watchdog in the SuperH processors.
  Copyright (C) 2001 - 2012  Paul Mundt <lethal@linux-sh.org>
  14-Dec-2001 Matt Domsch <Matt_Domsch@dell.com>
      Added nowayout module option to override CONFIG_WATCHDOG_NOWAYOUT
  19-Apr-2002 Rob Radez <rob@osinvestor.com>
      Added expect close support, made emulated timeout runtime changeable
      general cleanups, add some ioctls
  Default clock division ratio is 5.25 msecs. For an additional table of
  values, consult the asm-shwatchdog.h. Overload this at module load
  time.
  In order for this to work reliably we need to have HZ set to 1000 or
  something quite higher than 100 (or we need a proper high-res timer
  implementation that will deal with this properly), otherwise the 10ms
  resolution of a jiffy is enough to trigger the overflow. For things like
  the SH-4 and SH-5, this isn't necessarily that big of a problem, though
  for the SH-2 and SH-3, this isn't recommended unless the WDT is absolutely
  necssary.
  As a result of this timing problem, the only modes that are particularly
  feasible are the 4096 and the 2048 divisors, which yield 5.25 and 2.62ms
  overflow periods respectively.
  Also, since we can't really expect userspace to be responsive enough
  before the overflow happens, we maintain two separate timers .. One in
  the kernel for clearing out WOVF every 2ms or so (again, this depends on
  HZ == 1000), and another for monitoring userspace writes to the WDT device.
  As such, we currently use a configurable heartbeat interval which defaults
  to 30s. In this case, the userspace daemon is only responsible for periodic
  writes to the device before the next heartbeat is scheduled. If the daemon
  misses its deadline, the kernel timer will allow the WDT to overflow.
 30 sec default heartbeat 
 in seconds 
	
	  These processors have a bit of an inconsistent initialization
	  process.. starting with SH-3, RSTS was moved to WTCSR, and the
	  RSTCSR register was removed.
	 
	  On the SH-2 however, in addition with bits being in different
	  locations, we must deal with RSTCSR outright..
 arbitrary upper limit 
	
	  As this driver only covers the global watchdog case, reject
	  any attempts to register per-CPU watchdogs.
		
		  Clock framework support is optional, continue on
		  anyways if we don't find a matching clock.
 Default timeout if invalid 
 SPDX-License-Identifier: GPL-2.0+
 	Berkshire USB-PC Watchdog Card Driver
 	(c) Copyright 2004-2007 Wim Van Sebroeck <wim@iguana.be>.
 	Based on source code of the following authors:
 	  Ken Hollis <kenji@bitgate.com>,
 	  Alan Cox <alan@lxorguk.ukuu.org.uk>,
 	  Matt Domsch <Matt_Domsch@dell.com>,
 	  Rob Radez <rob@osinvestor.com>,
 	  Greg Kroah-Hartman <greg@kroah.com>
 	Neither Wim Van Sebroeck nor Iguana vzw. admit liability nor
 	provide warranty for any of this software. This material is
 	provided "AS-IS" and at no charge.
 	Thanks also to Simon Machell at Berkshire Products Inc. for
 	providing the test hardware. More info is available at
 	http:www.berkprod.com or http:www.pcwatchdog.com
 For module specific items 
 For new moduleparam's 
 For standard types (like size_t) 
 For the -ENODEV... values 
 For printkpanic... 
 For mdelay function 
 For struct miscdevice 
 For the watchdog specific items 
 For notifier support 
 For reboot_notifier stuff 
 For __init__exit... 
 For file operations 
 For USB functions 
 For kmalloc, ... 
 For mutex locking 
 For HID_REQ_SET_REPORT & HID_DT_REPORT 
 For copy_to_userput_user... 
 Module and Version Information 
#define WATCHDOG_HEARTBEAT 0	 default heartbeat =
 The vendor and product id's for the USB-PC Watchdog card 
 table of devices that work with this driver 
 Terminating entry 
 according to documentation max. time to process a command for the USB
 Watchdog's internal commands 
#define CMD_READ_TEMP			0x02	 Read Temperature;
 Get Status Information 
 Get Firmware Version 
 Get Dip Switch Settings 
 Read Current Watchdog Time 
 Write Current WatchdogTime 
 Enable  Disable Watchdog 
 Watchdog's Dip Switch heartbeat values 
 OFF-OFF-OFF	=  5 Sec  
 OFF-OFF-ON	= 10 Sec  
 OFF-ON-OFF	= 30 Sec  
 OFF-ON-ON	=  1 Min  
 ON-OFF-OFF	=  5 Min  
 ON-OFF-ON	= 10 Min  
 ON-ON-OFF	= 30 Min  
 ON-ON-ON	=  1 hour 
 We can only use 1 card due to the devwatchdog restriction 
 some internal variables 
 Structure to hold all of our device specific stuff 
 save off the usb device pointer 
 the interface for this device 
 the interface number used for cmd's 
 the buffer to intr data 
 the dma address for the intr buffer 
 the size of the intr buffer 
 the urb used for the intr pipe 
 The command that is reported back 
 The data MSB that is reported back 
 The data LSB that is reported back 
 true if we received a report after a command 
 Wether or not the device exists 
 locks this structure 
 prevent races between open() and disconnect() 
 local function prototypes 
 usb specific object needed to register this driver with the usb subsystem 
 success 
 unlink 
 this urb is terminated, clean up 
 -EPIPE:  should clear the halt 
 error 
 notify anyone waiting that the cmd has finished 
	 We will not send any commands if the USB PCWD device does
	 The USB PC Watchdog uses a 6 byte report format.
 Byte 0 = CMD 
 Byte 1 = Data MSB 
 Byte 2 = Data LSB 
 All other bytes not used 
	 wait till the usb card processed the command,
 read back response 
 Enable Watchdog 
 Disable Watchdog 
 Re-trigger Watchdog 
 Write new heartbeat to watchdog 
	
	  Convert celsius to fahrenheit, since this was
	  the decided 'standard' for this return value.
 Read the time that's left before rebooting 
 Note: if the board is not yet armed then we will read 0xFFFF 
 	devwatchdog handling
 See if we got the magic character 'V' and reload the timer 
			 note: just in case someone wrote the magic character
			 scan to see whether or not we got the
 someone wrote to us, we should reload the timer 
 devwatchdog can only be opened once 
 Activate 
	
	       Shut off the timer.
 	devtemperature handling
 	Notify system
 Turn the WDT off 
 	Kernel Interfaces
 	usb_pcwd_delete
 	usb_pcwd_probe
 	Called by the usb core when a new device is connected that it thinks
 	this driver might be interested in.
 get the active interface descriptor 
 check out that we have a HID device 
 check out the endpoint: it has to be Interrupt & IN 
 we didn't find a Interrupt endpoint with direction IN 
 get a handle to the interrupt data pipe 
 allocate memory for our device and initialize it 
 set up the memory buffer's 
 allocate the urb's 
 initialise the intr urb's 
 register our interrupt URB with the USB system 
 failure 
 The device exists and can be communicated with 
 disable card 
 Get the Firmware Version 
 Get switch settings 
 If heartbeat = 0 then we use the heartbeat from the dip-switches 
	 Check that the heartbeat value is within it's range ;
 we can register the device now, as it is ready 
 	usb_pcwd_disconnect
 	Called by the usb core when the device is removed from the system.
 	This routine guarantees that the driver will not submit any more urbs
 	by clearing dev->udev.
 prevent races with open() 
 Stop the timer before we leave 
 We should now stop communicating with the USB PCWD device 
 Deregister 
 Delete the USB PCWD device 
 SPDX-License-Identifier: GPL-2.0+
 	watchdog_core.c
 	(c) Copyright 2008-2011 Alan Cox <alan@lxorguk.ukuu.org.uk>,
 						All Rights Reserved.
 	(c) Copyright 2008-2011 Wim Van Sebroeck <wim@iguana.be>.
 	This source code is part of the generic code that can be used
 	by all the watchdog timer drivers.
 	Based on source code of the following authors:
 	  Matt Domsch <Matt_Domsch@dell.com>,
 	  Rob Radez <rob@osinvestor.com>,
 	  Rusty Lynch <rusty@linux.co.intel.com>
 	  Satyam Sharma <satyam@infradead.org>
 	  Randy Dunlap <randy.dunlap@oracle.com>
 	Neither Alan Cox, CymruNet Ltd., Wim Van Sebroeck nor Iguana vzw.
 	admit liability nor provide warranty for any of this software.
 	This material is provided "AS-IS" and at no charge.
 For EXPORT_SYMBOLmodule stuff... 
 For standard types 
 For the -ENODEV... values 
 For printkpanic... 
 For restart handler 
 For watchdog specific items 
 For __init__exit... 
 For ida_ macros 
 For IS_ERR macros 
 For of_get_timeout_sec 
 For watchdog_dev_register... 
  Deferred Registration infrastructure.
  Sometimes watchdog drivers needs to be loaded as soon as possible,
  for example when it's impossible to disable it. To do so,
  raising the initcall level of the watchdog driver is a solution.
  But in such case, the miscdev is maybe not ready (subsys_initcall), and
  watchdog_core need miscdev to register the watchdog as a char device.
  The deferred registration infrastructure offer a way for the watchdog
  subsystem to register a watchdog properly, even before miscdev is ready.
	
	  Check that we have valid min and max timeout values, if
	  not reset them both to 0 (=not used or unknown)
  watchdog_init_timeout() - initialize the timeout field
  @wdd: watchdog device
  @timeout_parm: timeout module parameter
  @dev: Device that stores the timeout-sec property
  Initialize the timeout field of the watchdog_device struct with either the
  timeout module parameter (if it is valid value) or the timeout-sec property
  (only if it is a valid value and the timeout_parm is out of bounds).
  If none of them are valid then we keep the old value (which should normally
  be the default timeout value). Note that for the module parameter, '0' means
  'use default' while it is an invalid value for the timeout-sec property.
  It should simply be dropped if you want to use the default value then.
  A zero is returned on success or -EINVAL if all provided values are out of
  bounds.
 check the driver supplied value (likely a module parameter) first 
 try to get the timeout_sec property 
  watchdog_set_restart_priority - Change priority of restart handler
  @wdd: watchdog device
  @priority: priority of the restart handler, should follow these guidelines:
    0:   use watchdog's restart function as last resort, has limited restart
         capabilies
    128: default restart handler, use if no other handler is expected to be
         available andor if restart is sufficient to restart the entire system
    255: preempt all other handlers
  If a wdd->ops->restart function is provided when watchdog_register_device is
  called, it will be registered as a restart handler with the priority given
  here.
 Mandatory operations need to be supported 
	
	  Note: now that all watchdog_device data has been verified, we
	  will not check this anymore in other functions. If data gets
	  corrupted in a later stage then we expect a kernel panic!
 Use alias for watchdog id if possible 
 Retry in case a legacy watchdog module exists 
 Module parameter to force watchdog policy on reboot. 
  watchdog_register_device() - register a watchdog device
  @wdd: watchdog device
  Register a watchdog device with the kernel so that the
  watchdog timer can be accessed from userspace.
  A zero is returned on success and a negative errno code for
  failure.
  watchdog_unregister_device() - unregister a watchdog device
  @wdd: watchdog device to unregister
  Unregister a watchdog device that was previously successfully
  registered with watchdog_register_device().
  devm_watchdog_register_device() - resource managed watchdog_register_device()
  @dev: device that is registering this watchdog device
  @wdd: watchdog device
  Managed watchdog_register_device(). For watchdog device registered by this
  function,  watchdog_unregister_device() is automatically called on driver
  detach. See watchdog_register_device() for more information.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2016 National Instruments Corp.
 Ignore unsupported resources, e.g. IRQ 
 Switch from boot mode to user mode 
 SPDX-License-Identifier: GPL-2.0
  (c) Copyright 2021 Hewlett Packard Enterprise Development LP.
 SPDX-License-Identifier: GPL-2.0-or-later
   IDT Interprise 79RC32434 watchdog driver
   Copyright (C) 2006, Ondrej Zajicek <santiago@crfreenet.org>
   Copyright (C) 2008, Florian Fainelli <florian@openwrt.org>
   based on
   SoftDog 0.05:	A Software Watchdog Device
   (c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,
 					All Rights Reserved.
 For module specific items 
 For new moduleparam's 
 For standard types (like size_t) 
 For the -ENODEV... values 
 For printkpanic... 
 For file operations 
 For struct miscdevice 
 For the watchdog specific items 
 For __init__exit... 
 For platform_driver framework 
 For spin_lockspin_unlock... 
 For copy_to_userput_user... 
 For devm_ioremap 
 For the Watchdog registers 
 Board internal clock speed in Hz,
 translate wtcompare value to seconds and vice versa 
 Use a default timeout of 20s. This should be
  safe for CPU clock speeds up to 400MHz, as
 apply or and nand masks to data read from addr and write back 
 zero the counter before enabling 
	 don't generate a non-maskable interrupt,
 reset the ERRCS timeout bit in case it's set 
 set the timeout (either default or based on module param) 
 reset WTC timeout bit and enable WDT 
 Disable WDT 
 In case it was set long ago 
 Make sure the watchdog is not running 
	 Check that the heartbeat value is within it's range;
 SPDX-License-Identifier: GPL-2.0
  driverscharwatchdogpnx4008_wdt.c
  Watchdog driver for PNX4008 board
  Authors: Dmitry Chigirev <source@mvista.com>,
 	    Vitaly Wool <vitalywool@gmail.com>
  Based on sa1100 driver,
  Copyright (C) 2000 Oleg Drokin <green@crimea.edu>
  2005-2006 (c) MontaVista Software, Inc.
  (C) 2012 Wolfram Sang, Pengutronix
 WatchDog Timer - Chapter 23 Page 207 
 Watchdog timer register set definition 
 WDTIM_INT bit definitions 
 WDTIM_CTRL bit definitions 
 WDTIM_MCTRL bit definitions 
 WDTIM_EMR bit definitions 
a MATCH_CTRL setting 
 WDTIM_RES bit definitions 
 read only 
the counter clock is 13 MHz fixed 
 stop counter, initiate counter reset 
wait for reset to complete. 100% guarantee event 
 internal and external reset, stop after that 
 configure match output 
 clear interrupt, just in case 
 the longest pulse period 65541(1310^6) seconds ~ 5 ms. 
enable counter, stop when debugger active 
stop counter 
	
	  Verify if a "cmd" passed from the userspace program rebooting
	  the system; if available, handle it.
	  - For details, see the 'reboot' syscall in kernelreboot.c
	  - If the received "cmd" is not supported, use the default mode.
 Force match output active 
 Internal reset on match output (RESOUT_N not asserted) 
 Instant assert of RESETOUT_N with pulse length 1mS 
 Wait for watchdog to reset system 
 SPDX-License-Identifier: GPL-2.0+
 	Industrial Computer Source WDT501 driver
 	(c) Copyright 1996-1997 Alan Cox <alan@lxorguk.ukuu.org.uk>,
 						All Rights Reserved.
 	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide
 	warranty for any of this software. This material is provided
 	"AS-IS" and at no charge.
 	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>
 	Release 0.10.
 	Fixes
 		Dave Gregorich	:	Modularisation and minor bugs
 		Alan Cox	:	Added the watchdog ioctl() stuff
 		Alan Cox	:	Fixed the reboot problem (as noted by
 					Matt Crocker).
 		Alan Cox	:	Added wdt= boot option
 		Alan Cox	:	Cleaned up copyuser stuff
 		Tim Hockin	:	Added insmod parameters, comment
 					cleanup, parameterized timeout
 		Tigran Aivazian	:	Restructured wdt_init() to handle
 					failures
 		Joel Becker	:	Added WDIOC_GETSETTIMEOUT
 		Matt Domsch	:	Added nowayout module option
 	Module parameters
 Default heartbeat = 60 seconds 
 You must set these - there is no sane way to probe for this board. 
 Support for the Fan Tachometer on the WDT501-P 
 	Programming support
 	wdt_start:
 	Start the watchdog driver.
 Disable watchdog 
	wdt_ctr_mode(0, 3);		 Program CTR0 for Mode 3:
	wdt_ctr_mode(1, 2);		 Program CTR1 for Mode 2:
	wdt_ctr_mode(2, 0);		 Program CTR2 for Mode 0:
 Count at 100Hz 
 Heartbeat 
 Length of reset pulse 
 Enable watchdog 
 	wdt_stop:
 	Stop the watchdog driver.
 Turn the card off 
 Disable watchdog 
 0 length reset pulses now 
 	wdt_ping:
 	Reload counter one with the watchdog heartbeat. We don't bother
 	reloading the cascade counter.
 Write a watchdog value 
 Disable watchdog 
	wdt_ctr_mode(1, 2);		 Re-Program CTR1 for Mode 2:
 Heartbeat 
 Enable watchdog 
 	wdt_set_heartbeat:
 	@t:		the new heartbeat value that needs to be set.
 	Set a new heartbeat value for the watchdog device. If the heartbeat
 	value is incorrect we keep the old value and return -EINVAL. If
 	successful we return 0.
 	wdt_get_status:
 	Extract the status information from a WDT watchdog device. There are
 	several board variants so we have to know which bits are valid. Some
 	bits default to one and some to zero in order to be maximally painful.
 	we then map the bits onto the status ioctl flags.
 	wdt_get_temperature:
 	Reports the temperature in degrees Fahrenheit. The API is in
 	farenheit. It was designed by an imperial measurement luddite.
 	wdt_interrupt:
 	@irq:		Interrupt number
 	@dev_id:	Unused as we don't allow multiple devices.
 	Handle an interrupt from the board. These are raised when the status
 	map changes in what the board considers an interesting way. That means
 	a failure condition occurring.
	
	 	Read the status register see what is up and
	 	then printk it.
 	wdt_write:
 	@file: file handle to the watchdog
 	@buf: buffer to write (unused as data does not matter here
 	@count: count of bytes
 	@ppos: pointer to the position to write. No seeks allowed
 	A write to a watchdog device is defined as a keepalive signal. Any
 	write of data will do, as we we don't define content meaning.
 In case it was set long ago 
 	wdt_ioctl:
 	@file: file handle to the device
 	@cmd: watchdog command
 	@arg: argument pointer
 	The watchdog API defines a common set of functions for all watchdogs
 	according to their available features. We only actually usefully support
 	querying capabilities and current status.
 Add options according to the card we have 
 	wdt_open:
 	@inode: inode of device
 	@file: file handle to device
 	The watchdog device has been opened. The watchdog device is single
 	open and on opening we load the counters. Counter zero is a 100Hz
 	cascade, into counter 1 which downcounts to reboot. When the counter
 	triggers counter 2 downcounts the length of the reset pulse which
 	set set to be as long as possible.
	
	 	Activate
 	wdt_release:
 	@inode: inode to board
 	@file: file handle to board
 	The watchdog has a configurable API. There is a religious dispute
 	between people who want their watchdog to be able to shut down and
 	those who want to be sure if the watchdog manager dies the machine
 	reboots. In the former case we disable the counters, in the latter
 	case you have to open it again very soon.
 	wdt_temp_read:
 	@file: file handle to the watchdog board
 	@buf: buffer to write 1 byte into
 	@count: length of buffer
 	@ptr: offset (no seek allowed)
 	Temp_read reports the temperature in degrees Fahrenheit. The API is in
 	farenheit. It was designed by an imperial measurement luddite.
 	wdt_temp_open:
 	@inode: inode of device
 	@file: file handle to device
 	The temperature device has been opened.
 	wdt_temp_release:
 	@inode: inode to board
 	@file: file handle to board
 	The temperature device has been closed.
 	wdt_notify_sys:
 	@this: our notifier block
 	@code: the event being reported
 	@unused: unused
 	Our notifier is called on system shutdowns. We want to turn the card
 	off at reboot otherwise the machine will reboot again during memory
 	test or worse yet during the following fsck. This would suck, in fact
 	trust me - if it happens it does suck.
 	Kernel Interfaces
 	The WDT card needs to learn about soft shutdowns in order to
 	turn the timebomb registers off.
 	wdt_exit:
 	Unload the watchdog. You cannot do this with any file handles open.
 	If your watchdog is set to continue ticking on close and you unload
 	it, well it keeps ticking. We won't get the interrupt but the board
 	will not touch PC memory so all is fine. You just have to load a new
 	module in 60 seconds or reboot.
 	wdt_init:
 	Set up the WDT watchdog board. All we have to do is grab the
 	resources we require and bitch if anyone beat us to them.
 	The open() function will actually kick the board off.
	 Check that the heartbeat value is within it's range;
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2010-2011 Picochip Ltd., Jamie Iles
  https:www.picochip.com
  This file implements a driver for the Synopsys DesignWare watchdog device
  in the many subsystems. The watchdog has 16 different timeout periods
  and these are a function of the input clock frequency.
  The DesignWare watchdog cannot be stopped once it has been started so we
  do not implement a stop function. The watchdog core will continue to send
  heartbeat requests after the watchdog device has been closed.
 There are sixteen TOPs (timeout periods) that can be set in the watchdog. 
 Saverestore 
	
	  Find a TOP with timeout greater or equal to the requested number.
	  Note we'll select a TOP with maximum timeout if the requested
	  timeout couldn't be reached.
	
	  We'll find a timeout greater or equal to one second anyway because
	  the driver probe would have failed if there was none.
	
	  In IRQ mode due to the two stages counter, the actual timeout is
	  twice greater than the TOP setting.
	
	  Note IRQ mode being enabled means having a non-zero pre-timeout
	  setup. In this case we try to find a TOP as close to the half of the
	  requested timeout as possible since DW Watchdog IRQ mode is designed
	  in two stages way - first timeout rises the pre-timeout interrupt,
	  second timeout performs the system reset. So basically the effective
	  watchdog-caused reset happens after two watchdog TOPs elapsed.
	
	  Set the new value in the watchdog.  Some versions of dw_wdt
	  have have TOPINIT in the TIMEOUT_RANGE register (as per
	  CP_WDT_DUAL_TOP in WDT_COMP_PARAMS_1).  On those we
	  effectively get a pat of the watchdog right here.
 Kick new TOP value into the watchdog counter if activated. 
	
	  In case users set bigger timeout value than HW can support,
	  kernel(watchdog_dev.c) helps to feed watchdog before
	  wdd->max_hw_heartbeat_ms
	
	  We ignore actual value of the timeout passed from user-space
	  using it as a flag whether the pretimeout functionality is intended
	  to be activated.
 Disableenable interrupt mode depending on the RMOD flag. 
 Enable watchdog. 
 wait for reset to assert... 
	
	  We don't clear the IRQ status. It's supposed to be done by the
	  following ping operations.
 CONFIG_PM_SLEEP 
  In case if DW WDT IP core is synthesized with fixed TOP feature disabled the
  TOPs array can be arbitrary ordered with nearly any sixteen uint numbers
  depending on the system engineer imagination. The next method handles the
  passed TOPs array to pre-calculate the effective timeouts and to sort the
  TOP items out in the ascending order with respect to the timeouts.
	
	  We walk over the passed TOPs array and calculate corresponding
	  timeouts in seconds and milliseconds. The milliseconds granularity
	  is needed to distinguish the TOPs with very close timeouts and to
	  set the watchdog max heartbeat setting further.
		
		  Find a suitable place for the current TOP in the timeouts
		  array so that the list is remained in the ascending order.
	
	  Retrieve custom or fixed counter values depending on the
	  WDT_USE_FIX_TOP flag found in the component specific parameters
	  #1 register.
 Convert the specified TOPs into an array of watchdog timeouts. 
 !CONFIG_DEBUG_FS 
 !CONFIG_DEBUG_FS 
	
	  Try to request the watchdog dedicated timer clock source. It must
	  be supplied if asynchronous mode is enabled. Otherwise fallback
	  to the common timerbus clocks configuration, in which the very
	  first found clock supply both timer and APB signals.
	
	  Request APB clock if device is configured with async clocks mode.
	  In this case both tclk and pclk clocks are supposed to be specified.
	  Alas we can't know for sure whether async mode was really activated,
	  so the pclk phandle reference is left optional. If it couldn't be
	  found we consider the device configured in synchronous clocks mode.
 Enable normal reset without pre-timeout by default. 
	
	  Pre-timeout IRQ is optional, since some hardware may lack support
	  of it. Note we must request rising-edge IRQ, since the lane is left
	  pending either until the next watchdog kick event or up to the
	  system reset.
	
	  If the watchdog is already running, use its already configured
	  timeout. Otherwise use the default or the value provided through
	  devicetree.
 sentinel  }
 SPDX-License-Identifier: GPL-2.0+
 	Berkshire PCI-PC Watchdog Card Driver
 	(c) Copyright 2003-2007 Wim Van Sebroeck <wim@iguana.be>.
 	Based on source code of the following authors:
 	  Ken Hollis <kenji@bitgate.com>,
 	  Lindsay Harris <lindsay@bluegum.com>,
 	  Alan Cox <alan@lxorguk.ukuu.org.uk>,
 	  Matt Domsch <Matt_Domsch@dell.com>,
 	  Rob Radez <rob@osinvestor.com>
 	Neither Wim Van Sebroeck nor Iguana vzw. admit liability nor
 	provide warranty for any of this software. This material is
 	provided "AS-IS" and at no charge.
 	A bells and whistles driver is available from:
 	http:www.kernel.orgpublinuxkernelpeoplewimpcwdpcwd_pci
 	More info available at
 	http:www.berkprod.com or http:www.pcwatchdog.com
 	Includes, defines, variables, module parameters, ...
 For module specific items 
 For new moduleparam's 
 For standard types (like size_t) 
 For the -ENODEV... values 
 For printkpanic... 
 For mdelay function 
 For struct miscdevice 
 For the watchdog specific items 
 For notifier support 
 For reboot_notifier stuff 
 For __init__exit... 
 For file operations 
 For pci functions 
 For io-port access 
 For spin_lockspin_unlock... 
 For copy_to_userput_user... 
 For inboutb... 
 Module and version information 
 Stuff for the PCI ID's  
  These are the defines that describe the control status bits for the
  PCI-PC Watchdog card.
 Port 1 : Control Status #1 
 Watchdog Trip status 
 Watchdog Heartbeat 
 Temperature Trip status 
 Relay 2 Active 
 Relay 1 Active 
#define WD_PCI_R2DS		0x40	 Relay 2 Disable Temperature-trip 
 Activate Relay 2 on the board 
 Port 2 : Control Status #2 
 Watchdog Disable 
 Enable Temperature Trip Reset 
 Watchdog wrote response 
 PC has sent command 
 according to documentation max. time to process a command for the pci
 Watchdog's internal commands 
 Watchdog's Dip Switch heartbeat values 
 OFF-OFF-OFF	=  5 Sec  
 OFF-OFF-ON	= 10 Sec  
 OFF-ON-OFF	= 30 Sec  
 OFF-ON-ON	=  1 Min  
 ON-OFF-OFF	=  5 Min  
 ON-OFF-ON	= 10 Min  
 ON-ON-OFF	= 30 Min  
 ON-ON-ON	=  1 hour 
 We can only use 1 card due to the devwatchdog restriction 
 internal variables 
 this is private data for each PCI-PC watchdog card 
 Wether or not the card has a temperature device 
 The card's boot status 
 The cards IO address 
 the lock for io operations 
 the PCI-device 
 module parameters 
 Default 
 Verbose 
 print fancy stuff too 
#define WATCHDOG_HEARTBEAT 0	 default heartbeat =
 	Internal functions
	 If a command requires data it should be written first.
	  Data for commands with 8 bits of data should be written to port 4.
	  Commands with 16 bits of data, should be written as LSB to port 4
	  and MSB to port 5.
	  After the required data has been written then write the command to
	 wait till the pci card processed the command, signaled by
	  the WRSP bit in port 2 and give it a max. timeout of
 read back response 
 clear WRSP bit 
 The cards firmware version 
 Get switch settings 
 Re-trigger watchdog by writing to port 0 
 send out any data 
 Write new heartbeat to watchdog 
 clear trip status & LED and keep mode of relay 2 
 clear reset counter 
	
	  Convert celsius to fahrenheit, since this was
	  the decided 'standard' for this return value.
 Read the time that's left before rebooting 
 Note: if the board is not yet armed then we will read 0xFFFF 
 	devwatchdog handling
 See if we got the magic character 'V' and reload the timer 
			 note: just in case someone wrote the magic character
			 scan to see whether or not we got the
 someone wrote to us, we should reload the timer 
 devwatchdog can only be opened once 
 Activate 
	
	       Shut off the timer.
 	devtemperature handling
 	Notify system
 Turn the WDT off 
 	Kernel Interfaces
 	Init & exit routines
 get the boot_status 
 clear the "card caused reboot" flag 
 disable card 
 Check whether or not the card supports the temperature device 
 Show info about the card itself 
 If heartbeat = 0 then we use the heartbeat from the dip-switches 
	 Check that the heartbeat value is within it's range ;
 Stop the timer before we leave 
 Deregister 
 End of list 
 SPDX-License-Identifier: GPL-2.0+
  Retu watchdog driver
  Copyright (C) 2004, 2005 Nokia Corporation
  Based on code written by Amit Kucheria and Michael Buesch.
  Rewritten by Aaro Koskinen.
 Watchdog timer values in seconds 
  Since Retu watchdog cannot be disabled in hardware, we must kick it
  with a timer until userspace watchdog software takes over. If
  CONFIG_WATCHDOG_NOWAYOUT is set, we never start the feeding.
 SPDX-License-Identifier: GPL-2.0-only
  Imagination Technologies PowerDown Controller Watchdog Timer.
  Copyright (c) 2014 Imagination Technologies Ltd.
  Based on driverswatchdogsunxi_wdt.c Copyright (c) 2013 Carlo Caione
                                                      2012 Henrik Nordstrom
  Notes
  -----
  The timeout value is rounded to the next power of two clock cycles.
  This is configured using the PDC_WDT_CONFIG register, according to this
  formula:
      timeout = 2^(delay + 1) clock cycles
  Where 'delay' is the value written in PDC_WDT_CONFIG register.
  Therefore, the hardware only allows to program watchdog timeouts, expressed
  as a power of two number of watchdog clock cycles. The current implementation
  guarantees that the actual watchdog timeout will be _at least_ the value
  programmed in the imgpdg_wdt driver.
  The following table shows how the user-configured timeout relates
  to the actual hardware timeout (watchdog clock @ 40000 Hz):
  input timeout | WD_DELAY | actual timeout
  -----------------------------------
       10       |   18     |  13 seconds
       20       |   19     |  26 seconds
       30       |   20     |  52 seconds
       60       |   21     |  104 seconds
  Albeit coarse, this granularity would suffice most watchdog uses.
  If the platform allows it, the user should be able to change the watchdog
  clock rate and achieve a finer timeout granularity.
 registers 
 Hard reset 
 Timeout 
 Tickled incorrectly 
 Soft reset 
 User reset 
 Timeout values are in seconds 
 Must tickle to finish the stop 
 Start the watchdog timer (delay should already be set) 
 Assert SOFT_RESET 
 We use the clock rate to calculate the max timeout 
 Find what caused the last reset 
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2014, NVIDIA CORPORATION.  All rights reserved.
 minimum and maximum watchdog trigger timeout, in seconds 
  Base of the WDT registers, from the timer base address.  There are
  actually 5 watchdogs that can be configured (by pairing with an available
  timer), at bases 0x100 + (WDT ID)  0x20, where WDT ID is 0 through 4.
  This driver only configures the first watchdog (WDT ID 0).
  Register base of the timer that's selected for pairing with the watchdog.
  This driver arbitrarily uses timer 5, which is currently unused by
  other drivers (in particular, the Tegra clocksource driver).  If this
  needs to change, take care that the new timer is not used by the
  clocksource driver.
 WDT registers 
 Timer registers 
	
	  This thing has a fixed 1MHz clock.  Normally, we would set the
	  period to 1 second by writing 1000000ul, but the watchdog system
	  reset actually occurs on the 4th expiration of this counter,
	  so we set the period to 14 of this amount.
	
	  Set number of periods and start counter.
	 
	  Interrupt handler is not required for user space
	  WDT accesses, since the caller is responsible to ping the
	  WDT to reset the counter before expiration, through ioctls.
 Current countdown (from timeout) 
 Number of expirations (we are waiting for the 4th expiration) 
	
	  The entire thing is divided by 4 because we are ticking down 4 times
	  faster due to needing to wait for the 4th expiration.
 This is the timer base. 
	
	  Allocate our watchdog driver data, which has the
	  struct watchdog_device nested within it.
 Initialize struct tegra_wdt. 
 Initialize struct watchdog_device. 
 SPDX-License-Identifier: GPL-2.0+
  Watchdog driver for Atmel AT91RM9200 (Thunder)
   Copyright (C) 2003 SAN People (Pty) Ltd
 seconds 
 seconds 
 ......................................................................... 
	
	  Perform a hardware reset with the use of the Watchdog timer.
  Disable the watchdog.
  Enable and reset the watchdog.
  Reload the watchdog timer.  (ie, pat the watchdog)
 ......................................................................... 
  Watchdog device is opened, and watchdog starts running.
  Close the watchdog device.
  If CONFIG_WATCHDOG_NOWAYOUT is NOT defined then the watchdog is also
   disabled.
 Disable the watchdog when file is closed 
  Change the watchdog time interval.
	
	  All counting occurs at SLOW_CLOCK  128 = 256 Hz
	 
	  Since WDV is a 16-bit counter, the maximum period is
	  65536  256 = 256 seconds.
	 Set new watchdog time. It will be used when
  Handle commands from user-space.
 pat the watchdog 
 Enable new time value 
 Return current value 
  Pat the watchdog whenever device is written to.
 pat the watchdog 
 ......................................................................... 
 sentinel  }
	 Check that the heartbeat value is within range;
 SPDX-License-Identifier: GPL-2.0+
  Octeon Watchdog driver
  Copyright (C) 2007-2017 Cavium, Inc.
  Converted to use WATCHDOG_CORE by Aaro Koskinen <aaro.koskinen@iki.fi>.
  Some parts derived from wdt.c
 	(c) Copyright 1996-1997 Alan Cox <alan@lxorguk.ukuu.org.uk>,
 						All Rights Reserved.
 	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide
 	warranty for any of this software. This material is provided
 	"AS-IS" and at no charge.
 	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>
  The OCTEON watchdog has a maximum timeout of 2^32  io_clock.
  For most systems this is less than 10 seconds, so to allow for
  software to request longer watchdog heartbeats, we maintain software
  counters to count multiples of the base rate.  If the system locks
  up in such a manner that we can not run the software counters, the
  only result is a watchdog reset sooner than was requested.  But
  that is OK, because in this case userspace would likely not be able
  to do anything anyhow.
  The hardware watchdog interval we call the period.  The OCTEON
  watchdog goes through several stages, after the first period an
  irq is asserted, then if it is not reset, after the next period NMI
  is asserted, then after an additional period a chip wide soft reset.
  So for the software counters, we reset watchdog after each period
  and decrement the counter.  But for the last two periods we need to
  let the watchdog progress to the NMI stage so we disable the irq
  and let it proceed.  Once in the NMI, we print the register state
  to the serial port and then wait for the reset.
  A watchdog is maintained for each CPU in the system, that way if
  one CPU suffers a lockup, we also get a register dump and reset.
  The userspace ping resets the watchdog on all CPUs.
  Before userspace opens the watchdog device, we still run the
  watchdogs to catch any lockups that may be kernel related.
 Watchdog interrupt major block number (8 MSBs of intsn) 
 The count needed to achieve timeout_sec. 
 The maximum period supported. 
 The current period.  
 Set to non-zero when userspace countdown mode active 
 Default heartbeat = 60 seconds 
  octeon_wdt_poke_irq - Poke the watchdog when an interrupt is received
  @cpl:
  @dev_id:
  Returns
 We're alive, poke the watchdog 
 Bad news, you are about to reboot. 
 Not open, just ping away... 
 From setup.c 
  octeon_wdt_write_string - Write a string to the uart
  @str:        String to write
 Just loop writing one byte at a time 
  octeon_wdt_write_hex() - Write a hex number out of the uart
  @value:      Number to display
  @digits:     Number of digits to print (1 to 16)
  octeon_wdt_nmi_stage3:
  NMI stage 3 handler. NMIs are handled in the following manner:
  1) The first NMI handler enables CVMSEG and transfers from
  the bootbus region into normal memory. It is careful to not
  destroy any registers.
  2) The second stage handler uses CVMSEG to save the registers
  and create a stack for C code. It then calls the third level
  handler with one argument, a pointer to the register values.
  3) The third, and final, level handler is the following C
  function that prints out some useful infomration.
  @reg:    Pointer to register state before the NMI
	
	  Save status and cause early to get them before any changes
	  might happen.
 Delay so output from all cores output is not jumbled together. 
 The CIU register is different for each Octeon model. 
	
	  G-30204: We must trigger a soft reset before watchdog
	  does an incomplete job of doing it.
		
		  Wait for other cores to print out information, but
		  not too long.  Do the soft reset before watchdog
		  can trigger it.
 Indicate watchdog in bit 11 
 Poke the watchdog to clear out its state 
 Disable the hardware. 
 Disable it before doing anything with the interrupts. 
 Must get the domain for the watchdog block 
 Get a irq for the wd intsn (hardware interrupt) 
 Must set the irq affinity here 
 Poke the watchdog to clear out its state 
 Finally enable the watchdog now that all handlers are installed 
 3 = Interrupt + NMI + Soft-Reset 
 We have to enable the irq 
	
	  Find the largest interrupt period, that can evenly divide
	  the requested heartbeat time.
	
	  The last two periods are after the irq is disabled, and
	  then to the nmi, so we subtract them off.
 3 = Interrupt + NMI + Soft-Reset 
 Get the irqs back on. 
  octeon_wdt_init - Module driver initialization.
  Returns Zero on success
	
	  Watchdog time expiration length = The 16 bits of LEN
	  represent the most significant bits of a 24 bit decrementer
	  that decrements every divisor cycle.
	 
	  Try for a timeout of 5 sec, if that fails a smaller number
	  of even seconds,
  octeon_wdt_cleanup - Module  driver shutdown
	
	  Disable the boot-bus memory, the code it points to is soon
	  to go missing.
 SPDX-License-Identifier: GPL-2.0+
  Mediatek Watchdog Driver
  Copyright (C) 2014 Matthias Brugger
  Matthias Brugger <matthias.bgg@gmail.com>
  Based on sunxi_wdt.c
 protects WDT_SWSYSRST reg 
	
	  In dual mode, irq will be triggered at timeout  2
	  the real timeout occurs at timeout
	
	  One bit is the value of 512 ticks
	  The clock has 32 KHz
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
 	i6300esb:	Watchdog timer driver for Intel 6300ESB chipset
 	(c) Copyright 2004 Google Inc.
 	(c) Copyright 2005 David Härdeman <david@2gen.com>
 	based on i810-tco.c which is in turn based on softdog.c
 	The timer is implemented in the following IO controller hubs:
 	(See the intel documentation on http:developer.intel.com.)
 	6300ESB chip : document number 300641-004
   2004YYZZ Ross Biro
 	Initial version 0.01
   2004YYZZ Ross Biro
 	Version 0.02
   20050210 David Härdeman <david@2gen.com>
 	Ported driver to kernel 2.6
   20171016 Radu Rendec <rrendec@arista.com>
 	Change driver to use the watchdog subsystem
 	Add support for multiple 6300ESB devices
       Includes, defines, variables, module parameters, ...
 Module and version information 
 PCI configuration registers 
 Config register                   
 WDT lock register                 
 Memory mapped registers 
 Timer1 value after each reset 
 Timer2 value after each reset 
 General Interrupt Status Reg  
 Reload register               
 Lock register bits 
 Watchdog functionality            
 Enable WDT                        
 Lock (nowayout)                   
 Config register bits 
 Enable reboot on timeout          
 Decrement frequency               
 Interrupt type on timer1 timeout  
 Reload register bits 
 Watchdog timed out                
 prevent timeout                   
 Magic constants 
 Step 1 to unlock reset registers  
 Step 2 to unlock reset registers  
 module parameters 
 30 sec default heartbeat (1 < heartbeat < 21023) 
 in seconds 
 internal variables 
  Some i6300ESB specific functions
  Prepare for reloading the timer by unlocking the proper registers.
  This is performed by first writing 0x80 followed by 0x86 to the
  reload register. After this the appropriate registers can be written
  to once before they need to be unlocked again.
 Enable or Enable + Lock? 
 First, reset timers as suggested by the docs 
 Then disable the WDT 
 Returns 0 if the timer was disabled, non-zero otherwise 
 FIXME: Do we need to flush anything here? 
	 We shift by 9, so if we are passed a value of 1 sec,
	  val will be 1 << 9 = 512, then write that to two
	  timers => 2  512 = 1024 (which is decremented at 1KHz)
 Write timer 1 
 Write timer 2 
 Reload 
 FIXME: Do we need to flush everything out? 
 Done 
  Watchdog Subsystem Interfaces
  Data for PCI driver interface
 End of list 
       Init & exit routines
 Something's wrong here, BASEADDR has to be set 
 Done 
	
	  Config register:
	  Bit    5 : 0 = Enable WDT_OUTPUT
	  Bit    2 : 0 = set the timer frequency to the PCI clock
	  divided by 2^15 (approx 1KHz).
	  Bits 1:0 : 11 = WDT_INT_TYPE Disabled.
	  The watchdog has two timers, it can be setup so that the
	  expiry of timer1 results in an interrupt and the expiry of
	  timer2 results in a reboot. We set it to not generate
	  any interrupts as there is not much we can do with it
	  right now.
 Check that the WDT isn't already locked 
 Set the timer to watchdog mode and disable it for now 
 Check if the watchdog was previously triggered 
 Reset WDT_TIMEOUT flag and timers 
 And set the correct timeout value 
 Check whether or not the hardware watchdog is there 
 Initialize the watchdog and make sure it does not run 
 Register the watchdog so that userspace has access to it 
 SPDX-License-Identifier: GPL-2.0
  driverscharwatchdogdavinci_wdt.c
  Watchdog driver for DaVinci DM644xDM646x processors
  Copyright (C) 2006-2013 Texas Instruments.
  2007 (c) MontaVista Software, Inc.
 really the max margin is 26427MHz
 Timer register set definition 
 TCR bit definitions 
 TGCR bit definitions 
 WDTCR bit definitions 
  struct to hold data for each WDT device
  @base - base io address of WD device
  @clk - source clock of WDT
  @wdd - hold watchdog device as is in WDT core
 disable, internal clock source 
 reset timer, set mode to 64-bit watchdog, and unreset 
 clear counter regs 
 set timeout period 
 enable run continuously 
	 Once the WDT is in pre-active state write to
	  TIM12, TIM34, PRD12, PRD34, TCR, TGCR, WDTCR are
	  write protected (except for the WDKEY field)
 put watchdog in pre-active state 
 put watchdog in active state 
 put watchdog in service state 
 put watchdog in active state 
 if timeout has occured then return 0 
 disable, internal clock source 
 reset timer, set mode to 64-bit watchdog, and unreset 
 clear counter and period regs 
 put watchdog in pre-active state 
 put watchdog in active state 
 write an invalid value to the WDKEY field to trigger a restart 
 SPDX-License-Identifier: GPL-2.0+
  Cadence WDT driver - Used by Xilinx Zynq
  Copyright (C) 2010 - 2014 Xilinx, Inc.
 Supports 1 - 516 sec 
 Restart key 
 Counter register access key 
 Counter value divisor 
 Clock prescaler value and selection 
 Input clock frequency 
 Counter maximum value 
  struct cdns_wdt - Watchdog device structure
  @regs: baseaddress of device
  @rst: reset flag
  @clk: struct clk  of a clock source
  @prescaler: for saving prescaler value
  @ctrl_clksel: counter clock prescaler selection
  @io_lock: spinlock for IO register access
  @cdns_wdt_device: watchdog device structure
  Structure containing parameters specific to cadence watchdog.
 Write access to Registers 
Register Map
 Register Offsets for the WDT 
 Zero Mode Register 
 Counter Control Register 
 Restart Register 
 Status Register 
  Zero Mode Register - This register controls how the time out is indicated
  and also contains the access code to allow writes to the register (0xABC).
 Enable the WDT 
 Enable the reset output 
 Enable IRQ output 
 Reset pulse of 16 pclk cycles 
 Access key, 0xABC << 12 
  Counter Control register - This register controls how fast the timer runs
  and the reset value and also contains the access code to allow writes to
  the register.
 Counter reset value 
  cdns_wdt_stop - Stop the watchdog.
  @wdd: watchdog device
  Read the contents of the ZMR register, clear the WDEN bit
  in the register and set the access key for successful write.
  Return: always 0
  cdns_wdt_reload - Reload the watchdog timer (i.e. pat the watchdog).
  @wdd: watchdog device
  Write the restart key value (0x00001999) to the restart register.
  Return: always 0
  cdns_wdt_start - Enable and start the watchdog.
  @wdd: watchdog device
  The counter value is calculated according to the formula:
 		calculated count = (timeout  clock)  prescaler + 1.
  The calculated count is divided by 0x1000 to obtain the field value
  to write to counter control register.
  Clears the contents of prescaler and counter reset value. Sets the
  prescaler to 4096 and the calculated count and access key
  to write to CCR Register.
  Sets the WDT (WDEN bit) and either the Reset signal(RSTEN bit)
  or Interrupt signal(IRQEN) with a specified cycles and the access
  key to write to ZMR Register.
  Return: always 0
	
	  Counter value divisor to obtain the value of
	  counter reset to be written to control register.
 Write counter access key first to be able write to register 
 Reset on timeout if specified in device tree. 
  cdns_wdt_settimeout - Set a new timeout value for the watchdog device.
  @wdd: watchdog device
  @new_time: new timeout value that needs to be set
  Return: 0 on success
  Update the watchdog_device timeout with new value which is used when
  cdns_wdt_start is called.
  cdns_wdt_irq_handler - Notifies of watchdog timeout.
  @irq: interrupt number
  @dev_id: pointer to a platform device structure
  Return: IRQ_HANDLED
  The handler is invoked when the watchdog times out and a
  reset on timeout has not been enabled.
  Info structure used to indicate the features supported by the device
  to the upper layers. This is defined in watchdog.h header file.
 Watchdog Core Ops 
Platform Operations
  cdns_wdt_probe - Probe call for the device.
  @pdev: handle to the platform device structure.
  Return: 0 on success, negative error otherwise.
  It does all the memory allocation and registration for the device.
 Register the interrupt 
 Initialize the members of cdns_wdt structure 
  cdns_wdt_suspend - Stop the device.
  @dev: handle to the device structure.
  Return: 0 always.
  cdns_wdt_resume - Resume the device.
  @dev: handle to the device structure.
  Return: 0 on success, errno otherwise.
 end of table  }
 Driver Structure 
 SPDX-License-Identifier: GPL-2.0+
 	watchdog_dev.c
 	(c) Copyright 2008-2011 Alan Cox <alan@lxorguk.ukuu.org.uk>,
 						All Rights Reserved.
 	(c) Copyright 2008-2011 Wim Van Sebroeck <wim@iguana.be>.
 	(c) Copyright 2021 Hewlett Packard Enterprise Development LP.
 	This source code is part of the generic code that can be used
 	by all the watchdog timer drivers.
 	This part of the generic code takes care of the following
 	misc device: devwatchdog.
 	Based on source code of the following authors:
 	  Matt Domsch <Matt_Domsch@dell.com>,
 	  Rob Radez <rob@osinvestor.com>,
 	  Rusty Lynch <rusty@linux.co.intel.com>
 	  Satyam Sharma <satyam@infradead.org>
 	  Randy Dunlap <randy.dunlap@oracle.com>
 	Neither Alan Cox, CymruNet Ltd., Wim Van Sebroeck nor Iguana vzw.
 	admit liability nor provide warranty for any of this software.
 	This material is provided "AS-IS" and at no charge.
 For character device 
 For the -ENODEV... values 
 For file operations 
 For __init__exit... 
 For hrtimers 
 For printkpanic... 
 For kthread_work 
 For handling misc devices 
 For module stuff... 
 For mutexes 
 For memory functions 
 For standard types (like size_t) 
 For watchdog specific items 
 For copy_to_userput_user... 
 the dev_t structure to store the dynamically allocated watchdog devices 
 Reference to watchdog device behind devwatchdog 
 All variables in milli-seconds 
	
	  A worker to generate heartbeat requests is needed if all of the
	  following conditions are true.
	  - Userspace activated the watchdog.
	  - The driver provided a value for the maximum hardware timeout, and
	    thus is aware that the framework supports generating heartbeat
	    requests.
	  - Userspace requests a longer timeout than the hardware can handle.
	 
	  Alternatively, if userspace has not opened the watchdog
	  device, we take care of feeding the watchdog if it is
	  running.
	
	  To ensure that the watchdog times out wdd->timeout seconds
	  after the most recent ping from userspace, the last
	  worker ping has to come in hw_heartbeat_ms before this timeout.
 ping the watchdog 
 restart watchdog 
 	watchdog_ping: ping the watchdog.
 	@wdd: the watchdog device to ping
 	The caller must hold wd_data->lock.
 	If the watchdog has no own ping operation then it needs to be
 	restarted via the start operation. This wrapper function does
 	exactly that.
 	We only ping when the watchdog device is running.
 	watchdog_start: wrapper to start the watchdog.
 	@wdd: the watchdog device to start
 	The caller must hold wd_data->lock.
 	Start the watchdog if it is not active and mark it active.
 	This function returns zero on success or a negative errno code for
 	failure.
 	watchdog_stop: wrapper to stop the watchdog.
 	@wdd: the watchdog device to stop
 	The caller must hold wd_data->lock.
 	Stop the watchdog if it is still active and unmark it active.
 	This function returns zero on success or a negative errno code for
 	failure.
 	If the 'nowayout' feature was set, the watchdog cannot be stopped.
 	watchdog_get_status: wrapper to get the watchdog status
 	@wdd: the watchdog device to get the status from
 	The caller must hold wd_data->lock.
 	Get the watchdog's status flags.
 	watchdog_set_timeout: set the watchdog timer timeout
 	@wdd: the watchdog device to set the timeout for
 	@timeout: timeout to set in seconds
 	The caller must hold wd_data->lock.
 Disable pretimeout if it doesn't fit the new timeout 
 	watchdog_set_pretimeout: set the watchdog timer pretimeout
 	@wdd: the watchdog device to set the timeout for
 	@timeout: pretimeout to set in seconds
 	watchdog_get_timeleft: wrapper to get the time left before a reboot
 	@wdd: the watchdog device to get the remaining time from
 	@timeleft: the time that's left
 	The caller must hold wd_data->lock.
 	Get the time before a watchdog will reboot (if not pinged).
 nowayout cannot be disabled once set 
 	watchdog_ioctl_op: call the watchdog drivers ioctl op if defined
 	@wdd: the watchdog device to do the ioctl on
 	@cmd: watchdog command
 	@arg: argument pointer
 	The caller must hold wd_data->lock.
 	watchdog_write: writes to the watchdog.
 	@file: file from VFS
 	@data: user address of data
 	@len: length of data
 	@ppos: pointer to the file offset
 	A write to a watchdog device is defined as a keepalive ping.
 	Writing the magic 'V' sequence allows the next close to turn
 	off the watchdog (if 'nowayout' is not set).
	
	  Note: just in case someone wrote the magic character
	  five months ago...
 scan to see whether or not we got the magic character 
 someone wrote to us, so we send the watchdog a keepalive ping 
 	watchdog_ioctl: handle the different ioctl's for the watchdog device.
 	@file: file handle to the device
 	@cmd: watchdog command
 	@arg: argument pointer
 	The watchdog API defines a common set of functions for all watchdogs
 	according to their available features.
		 If the watchdog is active then we send a keepalive ping
		  to make sure that the watchdog keep's running (and if
 timeout == 0 means that we don't know the timeout 
 	watchdog_open: open the devwatchdog devices.
 	@inode: inode of device
 	@file: file handle to device
 	When the devwatchdog device gets opened, we start the watchdog.
 	Watch out: the devwatchdog device is single open, so we make sure
 	it can only be opened once.
 Get the corresponding watchdog device 
 the watchdog is single open! 
	
	  If the devwatchdog device is open, we don't want the module
	  to be unloaded.
	
	  open_timeout only applies for the first open from
	  userspace. Set open_deadline to infinity so that the kernel
	  will take care of an always-running hardware watchdog in
	  case the device gets magic-closed or WDIOS_DISABLECARD is
	  applied.
 devwatchdog is a virtual (and thus non-seekable) filesystem 
 	watchdog_release: release the watchdog device.
 	@inode: inode of device
 	@file: file handle to device
 	This is the code for when devwatchdog gets closed. We will only
 	stop the watchdog when we have received the magic char (and nowayout
 	was not set), else the watchdog will keep running.
	
	  We only stop the watchdog if we received the magic character
	  or if WDIOF_MAGICCLOSE is not set. If nowayout was set then
	  watchdog_stop will fail.
 If the watchdog was not stopped, send a keepalive ping 
 make sure that devwatchdog can be re-opened 
	
	  Allow the owner module to be unloaded again unless the watchdog
	  is still running. If the watchdog is still running, it can not
	  be stopped, and its driver must not be unloaded.
 	watchdog_cdev_register: register watchdog character device
 	@wdd: watchdog device
 	Register a watchdog character device including handling the legacy
 	devwatchdog node. devwatchdog is actually a miscdevice and
 	thus we set it up like that.
 Fill in the data structures 
 Add the device 
 Record time of most recent heartbeat as 'just before now'. 
	
	  If the watchdog is running, prevent its driver from being unloaded,
	  and schedule an immediate ping.
 	watchdog_cdev_unregister: unregister watchdog character device
 	@watchdog: watchdog device
 	Unregister watchdog character device and if needed the legacy
 	devwatchdog device.
 	watchdog_dev_register: register a watchdog device
 	@wdd: watchdog device
 	Register a watchdog device including handling the legacy
 	devwatchdog node. devwatchdog is actually a miscdevice and
 	thus we set it up like that.
 	watchdog_dev_unregister: unregister a watchdog device
 	@watchdog: watchdog device
 	Unregister watchdog device and if needed the legacy
 	devwatchdog device.
 	watchdog_set_last_hw_keepalive: set last HW keepalive time for watchdog
 	@wdd: watchdog device
 	@last_ping_ms: time since last HW heartbeat
 	Adjusts the last known HW keepalive time for a watchdog timer.
 	This is needed if the watchdog is already running when the probe
 	function is called, and it can't be pinged immediately. This
 	function must be called immediately after watchdog registration,
 	and min_hw_heartbeat_ms must be set for this to be useful.
 	watchdog_dev_init: init dev part of watchdog core
 	Allocate a range of chardev nodes to use for watchdog devices
 	watchdog_dev_exit: exit dev part of watchdog core
 	Release the range of chardev nodes used for watchdog devices
 ping for the last time before suspend 
	
	  make sure that watchdog worker will not kick in when the wdog is
	  suspended
	
	  __watchdog_ping will also retrigger hrtimer and therefore restore the
	  ping worker if needed.
 SPDX-License-Identifier: GPL-2.0-or-later
  sma cpu5 watchdog driver
  Copyright (C) 2003 Heiko Ronsdorf <hero@ihg.uni-duisburg.de>
 adjustable parameters 
 some device data 
 generic helper functions 
 keep watchdog alive 
 requeue?? 
 ticks doesn't matter anyway 
 if process dies, counter is not decremented 
 filesystem operations 
 initexit function 
 watchdog reboot? 
 module entry points 
 SPDX-License-Identifier: GPL-2.0+
  Watchdog driver for Broadcom BCM2835
  "bcm2708_wdog" driver written by Luke Diamand that was obtained from
  branch "rpi-3.6.y" of git:github.comraspberrypilinux.git was used
  as a hardware reference for the Broadcom BCM2835 watchdog timer.
  Copyright (C) 2013 Lubomir Rintel <lkundrak@v3.sk>
  The Raspberry Pi firmware uses the RSTS register to know which partition
  to boot from. The partition value is spread into bits 0, 2, 4, 6, 8, 10.
  Partition 63 is a special partition used by the firmware to indicate halt.
 use a timeout of 10 ticks (~150us) 
 No sleeping, possibly atomic. 
  We can't really power off, but if we do the normal reset scheme, and
  indicate to bootcode.bin not to reboot, then most of the chip will be
  powered off.
	
	  We set the watchdog hard reset bit here to distinguish this reset
	  from the normal (full) reset. bootcode.bin will not reboot after a
	  hard reset.
 Continue with normal reset mechanism 
		
		  The currently active timeout value (set by the
		  bootloader) may be different from the module
		  heartbeat parameter or the value in device
		  tree. But we just need to set WDOG_HW_RUNNING,
		  because then the framework will "immediately" ping
		  the device, updating the timeout.
 SPDX-License-Identifier: GPL-2.0+
       NS pc87413-wdt Watchdog Timer driver for Linux 2.6.x.x
       This code is based on wdt.c with original copyright.
       (C) Copyright 2006 Sven Anders, <anders@anduras.de>
                      and Marcus Junker, <junker@anduras.de>
       Neither Sven Anders, Marcus Junker nor ANDURAS AG
       admit liability nor provide warranty for any of this software.
       This material is provided "AS-IS" and at no charge.
       Release 1.1
 #define DEBUG 1 
 1 minute 
 IO port base (index register) 
 Serial IO register 
 Watchdog-Timer-Control-Register 
 Watchdog timeout register 
 Watchdog config register 
 Address used on Portwell Boards 
 timeout value 
 is the timer enabled? 
 is the close expected? 
 to guard us from io races 
 -- Low level function ----------------------------------------
 Select pins for Watchdog output 
 Step 1: Select multiple pin,pin55,as WDT output 
 Set Bit7 to 1
 Enable SWC functions 
 Step 2: Enable SWC functions 
 Point SWC_LDN (LDN=4) 
 Read Index 0x30 First 
 Set Bit0 to 1 
 Index0x30_bit0P1 
 Read SWC IO base address 
 Step 3: Read SWC IO Base Address 
 Read Index 0x60 
 Read Index 0x61 
 Select Bank 3 of SWC 
 Step 4: Select Bank3 of SWC 
 Set watchdog timeout to x minutes 
 Step 5: Programm WDTO, Twd. 
 Enable WDEN 
 Step 6: Enable WDEN 
 Enable SW_WD_TREN 
 Enable SW_WD_TREN 
 Disable SW_WD_TREN 
 Disable SW_WD_TREN 
 Enable SW_WD_TRG 
 Enable SW_WD_TRG 
 Disable SW_WD_TRG 
 Disable SW_WD_TRG 
 -- Higher level functions ------------------------------------
 Enable the watchdog 
 Disable the watchdog 
 Refresh the watchdog 
 -- File operations -------------------------------------------
 	pc87413_open:
 	@inode: inode of device
 	@file: file handle to device
 devwatchdog can only be opened once 
 Reload and activate timer 
 	pc87413_release:
 	@inode: inode to board
 	@file: file handle to board
 	The watchdog has a configurable API. There is a religious dispute
 	between people who want their watchdog to be able to shut down and
 	those who want to be sure if the watchdog manager dies the machine
 	reboots. In the former case we disable the counters, in the latter
 	case you have to open it again very soon.
 Shut off the timer. 
 	pc87413_status:
       return, if the watchdog is enabled (timeout is set...)
 currently not supported 
 	pc87413_write:
 	@file: file handle to the watchdog
 	@data: data buffer to write
 	@len: length in bytes
 	@ppos: pointer to the position to write. No seeks allowed
 	A write to a watchdog device is defined as a keepalive signal. Any
 	write of data will do, as we we don't define content meaning.
 See if we got the magic character 'V' and reload the timer 
 reset expect flag 
			 scan to see whether or not we got the
 someone wrote to us, we should reload the timer 
 	pc87413_ioctl:
 	@file: file handle to the device
 	@cmd: watchdog command
 	@arg: argument pointer
 	The watchdog API defines a common set of functions for all watchdogs
 	according to their available features. We only actually usefully support
 	querying capabilities and current status.
 the API states this is given in secs 
 and return the new timeout 
 -- Notifier funtions -----------------------------------------
 	pc87413_notify_sys:
 	@this: our notifier block
 	@code: the event being reported
 	@unused: unused
 	Our notifier is called on system shutdowns. We want to turn the card
 	off at reboot otherwise the machine will reboot again during memory
 	test or worse yet during the following fsck. This would suck, in fact
 	trust me - if it happens it does suck.
 Turn the card off 
 -- Module's structures ---------------------------------------
 -- Module init functions -------------------------------------
 	pc87413_init: module's "constructor"
 	Set up the WDT watchdog board. All we have to do is grab the
 	resources we require and bitch if anyone beat us to them.
 	The open() function will actually kick the board off.
 	pc87413_exit: module's "destructor"
 	Unload the watchdog. You cannot do this with any file handles open.
 	If your watchdog is set to continue ticking on close and you unload
 	it, well it keeps ticking. We won't get the interrupt but the board
 	will not touch PC memory so all is fine. You just have to load a new
 	module in 60 seconds or reboot.
 Stop the timer before we leave 
  MOXA ART SoCs watchdog driver.
  Copyright (C) 2013 Jonas Jensen
  Jonas Jensen <jonas.jensen@gmail.com>
  This file is licensed under the terms of the GNU General Public
  License version 2.  This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
 SPDX-License-Identifier: GPL-2.0+
 	Industrial Computer Source PCI-WDT500501 driver
 	(c) Copyright 1996-1997 Alan Cox <alan@lxorguk.ukuu.org.uk>,
 						All Rights Reserved.
 	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide
 	warranty for any of this software. This material is provided
 	"AS-IS" and at no charge.
 	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>
 	Release 0.10.
 	Fixes
 		Dave Gregorich	:	Modularisation and minor bugs
 		Alan Cox	:	Added the watchdog ioctl() stuff
 		Alan Cox	:	Fixed the reboot problem (as noted by
 					Matt Crocker).
 		Alan Cox	:	Added wdt= boot option
 		Alan Cox	:	Cleaned up copyuser stuff
 		Tim Hockin	:	Added insmod parameters, comment cleanup
 					Parameterized timeout
 		JP Nollmann	:	Added support for PCI wdt501p
 		Alan Cox	:	Split ISA and PCI cards into two drivers
 		Jeff Garzik	:	PCI cleanups
 		Tigran Aivazian	:	Restructured wdtpci_init_one() to handle
 					failures
 		Joel Becker	:	Added WDIOC_GETSETTIMEOUT
 		Zwane Mwaikambo	:	Magic char closing, locking changes,
 					cleanups
 		Matt Domsch	:	nowayout module option
 We can only use 1 card due to the devwatchdog restriction 
 Default timeout 
 Default heartbeat = 60 seconds 
 Support for the Fan Tachometer on the PCI-WDT501 
 	Programming support
 	wdtpci_start:
 	Start the watchdog driver.
	
	  "pet" the watchdog, as Access says.
	  This resets the clock outputs.
 Disable watchdog 
	wdtpci_ctr_mode(2, 0);		 Program CTR2 for Mode 0:
 Enable watchdog 
 Disable watchdog 
 2.0833MHz clock 
 disable 
 disable 
 disable 
 disable 
	wdtpci_ctr_mode(0, 3);		 Program CTR0 for Mode 3:
	wdtpci_ctr_mode(1, 2);		 Program CTR1 for Mode 2:
	wdtpci_ctr_mode(2, 1);		 Program CTR2 for Mode 1:
 count at 100Hz 
 Heartbeat 
 DO NOT LOAD CTR2 on PCI card! -- JPN 
 Enable watchdog 
 	wdtpci_stop:
 	Stop the watchdog driver.
 Turn the card off 
 Disable watchdog 
 0 length reset pulses now 
 	wdtpci_ping:
 	Reload counter one with the watchdog heartbeat. We don't bother
 	reloading the cascade counter.
 Write a watchdog value 
 Disable watchdog 
	wdtpci_ctr_mode(1, 2);		 Re-Program CTR1 for Mode 2:
 Heartbeat 
 Enable watchdog 
 	wdtpci_set_heartbeat:
 	@t:		the new heartbeat value that needs to be set.
 	Set a new heartbeat value for the watchdog device. If the heartbeat
 	value is incorrect we keep the old value and return -EINVAL.
 	If successful we return 0.
 Arbitrary, can't find the card's limits 
 	wdtpci_get_status:
 	@status:		the new status.
 	Extract the status information from a WDT watchdog device. There are
 	several board variants so we have to know which bits are valid. Some
 	bits default to one and some to zero in order to be maximally painful.
 	we then map the bits onto the status ioctl flags.
 	wdtpci_get_temperature:
 	Reports the temperature in degrees Fahrenheit. The API is in
 	farenheit. It was designed by an imperial measurement luddite.
 	wdtpci_interrupt:
 	@irq:		Interrupt number
 	@dev_id:	Unused as we don't allow multiple devices.
 	Handle an interrupt from the board. These are raised when the status
 	map changes in what the board considers an interesting way. That means
 	a failure condition occurring.
	
	 	Read the status register see what is up and
	 	then printk it.
 	wdtpci_write:
 	@file: file handle to the watchdog
 	@buf: buffer to write (unused as data does not matter here
 	@count: count of bytes
 	@ppos: pointer to the position to write. No seeks allowed
 	A write to a watchdog device is defined as a keepalive signal. Any
 	write of data will do, as we we don't define content meaning.
 In case it was set long ago 
 	wdtpci_ioctl:
 	@file: file handle to the device
 	@cmd: watchdog command
 	@arg: argument pointer
 	The watchdog API defines a common set of functions for all watchdogs
 	according to their available features. We only actually usefully support
 	querying capabilities and current status.
 Add options according to the card we have 
 	wdtpci_open:
 	@inode: inode of device
 	@file: file handle to device
 	The watchdog device has been opened. The watchdog device is single
 	open and on opening we load the counters. Counter zero is a 100Hz
 	cascade, into counter 1 which downcounts to reboot. When the counter
 	triggers counter 2 downcounts the length of the reset pulse which
 	set set to be as long as possible.
	
	 	Activate
 	wdtpci_release:
 	@inode: inode to board
 	@file: file handle to board
 	The watchdog has a configurable API. There is a religious dispute
 	between people who want their watchdog to be able to shut down and
 	those who want to be sure if the watchdog manager dies the machine
 	reboots. In the former case we disable the counters, in the latter
 	case you have to open it again very soon.
 	wdtpci_temp_read:
 	@file: file handle to the watchdog board
 	@buf: buffer to write 1 byte into
 	@count: length of buffer
 	@ptr: offset (no seek allowed)
 	Read reports the temperature in degrees Fahrenheit. The API is in
 	fahrenheit. It was designed by an imperial measurement luddite.
 	wdtpci_temp_open:
 	@inode: inode of device
 	@file: file handle to device
 	The temperature device has been opened.
 	wdtpci_temp_release:
 	@inode: inode to board
 	@file: file handle to board
 	The temperature device has been closed.
 	wdtpci_notify_sys:
 	@this: our notifier block
 	@code: the event being reported
 	@unused: unused
 	Our notifier is called on system shutdowns. We want to turn the card
 	off at reboot otherwise the machine will reboot again during memory
 	test or worse yet during the following fsck. This would suck, in fact
 	trust me - if it happens it does suck.
 	Kernel Interfaces
 	The WDT card needs to learn about soft shutdowns in order to
 	turn the timebomb registers off.
	 Check that the heartbeat value is within its range;
	 here we assume only one device will ever have
 terminate list 
 SPDX-License-Identifier: GPL-2.0+
 	ICP Wafer 5823 Single Board Computer WDT driver
 	http:www.icpamerica.comwafer_5823.php
 	May also work on other similar models
 	(c) Copyright 2002 Justin Cormack <justin@street-vision.com>
 	Release 0.02
 	Based on advantechwdt.c which is based on wdt.c.
 	Original copyright messages:
 	(c) Copyright 1996-1997 Alan Cox <alan@lxorguk.ukuu.org.uk>,
 						All Rights Reserved.
 	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide
 	warranty for any of this software. This material is provided
 	"AS-IS" and at no charge.
 	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>
 60 sec default timeout 
 	You must set these - there is no sane way to probe for this board.
 	To enable, write the timeout value in seconds (1 to 255) to IO
 	port WDT_START, then read the port to start the watchdog. To pat
 	the dog, read port WDT_STOP to stop the timer, then read WDT_START
 	to restart it again.
 in seconds 
 pat watchdog 
 start up watchdog 
 stop watchdog 
 See if we got the magic character 'V' and reload the timer 
 In case it was set long ago 
			 scan to see whether or not we got the magic
		 Well, anyhow someone wrote to us, we should
	
	       Activate
 	Notifier for system down
 	Kernel Interfaces
 	The WDT needs to learn about soft shutdowns in order to
 	turn the timebomb registers off.
 end of wafer5823wdt.c 
 SPDX-License-Identifier: GPL-2.0-only
  Watchdog driver for zVM and LPAR using the diag 288 interface.
  Under zVM, expiration of the watchdog will send a "system restart" command
  to CP.
  The command can be altered using the module parameter "cmd". This is
  not recommended because it's only supported on zVM but not whith LPAR.
  On LPAR, the watchdog will always trigger a system restart. the module
  paramter cmd is meaningless here.
  Copyright IBM Corp. 2004, 2013
  Author(s): Arnd Bergmann (arndb@de.ibm.com)
 	      Philipp Hachtmann (phacht@de.ibm.com)
 Minimal time supported by diag88 
 One hour should be enough - pure estimation 
 Function codes - init, change, cancel 
 Action codes for LPAR watchdog 
		
		  It seems to be ok to zVM to use the init function to
		  retrigger the watchdog. On LPAR WDT_FUNC_CHANGE must
		  be used when the watchdog is running.
  It makes no sense to go into suspend while the watchdog is running.
  Depending on the memory size, the watchdog might trigger, while we
  are still saving the memory.
  driverscharwatchdogmax63xx_wdt.c
  Driver for max63{69,70,71,72,73,74} watchdog timers
  Copyright (C) 2009 Marc Zyngier <maz@misterjones.org>
  This file is licensed under the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
  This driver assumes the watchdog pins are memory mapped (as it is
  the case for the Arcom Zeus). Should it be connected over GPIOs or
  another interface, some abstraction will have to be introduced.
  Memory mapping: a single byte, 3 first lower bits to select bit 3
  to ping the watchdog.
 memory mapping 
 WDI and WSET bits write access routines 
  The timeout values used are actually the absolute minimum the chip
  offers. Typical values on my board are slightly over twice as long
  (10s setting ends up with a 25s timeout), and can be up to 3 times
  the nominal setting (according to the datasheet). So please take
  these values with a grain of salt. Same goes for the initial delay
  "feature". Only max637374 have a few settings without this initial
  delay (selected with the "nodelay" parameter).
  I also decided to remove from the tables any timeout smaller than a
  second, as it looked completly overkill...
 Timeouts in second 
 check for a edge triggered startup 
 Attempt to use fwnode first 
 SPDX-License-Identifier: GPL-2.0-or-later
   MachZ ZF-Logic Watchdog Timer driver for Linux
   The author does NOT admit liability nor provide warranty for
   any of this software. This material is provided "AS-IS" in
   the hope that it may be useful for others.
   Author: Fernando Fuganti <fuganti@conectiva.com.br>
   Based on sbc60xxwdt.c by Jakob Oestergaard
   We have two timers (wd#1, wd#2) driven by a 32 KHz clock with the
   following periods:
       wd#1 - 2 seconds;
       wd#2 - 7.2 ms;
   After the expiration of wd#1, it can generate a NMI, SCI, SMI, or
   a system RESET and it starts wd#2 that unconditionally will RESET
   the system when the counter reaches zero.
   14-Dec-2001 Matt Domsch <Matt_Domsch@dell.com>
       Added nowayout module option to override CONFIG_WATCHDOG_NOWAYOUT
 ports 
 indexes 			
 16   
 16   
 8    
 16   
 8    
 8    
 controls 
 utilities 
  action refers to action taken when watchdog resets
  0 = GEN_RESET
  1 = GEN_SMI
  2 = GEN_NMI
  3 = GEN_SCI
  defaults to GEN_RESET (0)
 timeout for user land heart beat (10 seconds) 
 timeout for hardware watchdog (~500ms) 
 number of ticks on WD#1 (driven by a 32KHz clock, 2s) 
 CONTROL register functions 
 WD#? counter functions 
 	Just set counter value
  stop hardware timer
 stop internal ping 
 stop watchdog timer 
 disable wd1 and wd2 
  start hardware timer
 user land ping 
 start the timer for internal ping 
 start watchdog timer 
		
		  reset event is activated by transition from 0 to 1 on
		  RESET_WD1 bit and we assume that it is already zero...
 ...and nothing changes until here 
 See if we got the magic character 
		
		  no need to check for close confirmation
		  no way to disable watchdog ;)
			
			  note: just in case someone wrote the magic character
			  five months ago...
 now scan 
		
		  Well, anyhow someone wrote to us,
		  we should return that favour
  Notifier for system down
  The device needs to learn about soft shutdowns in order to
  turn the timebomb registers off.
 SPDX-License-Identifier: GPL-2.0
  Copyright 2018-2019 NXP.
  Software timer tick implemented in scfw side, support 10ms to 0xffffffff ms
  in theory, but for normal case, 1s~128s is enough, you can change this max
  value in case it's not enough.
	
	  SCU firmware calculates pretimeout based on current time
	  stamp instead of watchdog timeout stamp, need to convert
	  the pretimeout to SCU firmware's timeout value.
 sentinel  }
 SPDX-License-Identifier: GPL-2.0+
       Driver for the MTX-1 Watchdog.
       (C) Copyright 2005 4G Systems <info@4g-systems.biz>,
 							All Rights Reserved.
                               http:www.4g-systems.biz
 	(C) Copyright 2007 OpenWrt.org, Florian Fainelli <florian@openwrt.org>
       (c) Copyright 2005    4G Systems <info@4g-systems.biz>
       Release 0.01.
       Author: Michael Stickel  michael.stickel@4g-systems.biz
       Release 0.02.
 	Author: Florian Fainelli florian@openwrt.org
 		use the Linux watchdogtimer APIs
       The Watchdog is configured to reset the MTX-1
       if it is not triggered for 100 seconds.
       It should not be triggered more often than 1.6 seconds.
       A timer triggers the watchdog every 5 seconds, until
       it is opened for the first time. After the first open
       it MUST be triggered every 2..95 seconds.
 toggle wdt gpio 
 Filesystem functions 
 FIXME: do we need to lock this test ? 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2015-2016 Mentor Graphics
 Default watchdog pretimeout governor 
 The spinlock protects default_gov, wdd->gov and pretimeout_list 
 List of watchdog devices, which can generate a pretimeout event 
 The mutex protects governor list and serializes external interfaces 
 List of the registered watchdog pretimeout governors 
 SPDX-License-Identifier: GPL-2.0-or-later
 	SMsC 37B787 Watchdog Timer driver for Linux 2.6.x.x
 	Based on acquirewdt.c by Alan Cox <alan@lxorguk.ukuu.org.uk>
 	and some other existing drivers
 	The authors do NOT admit liability nor provide warranty for
 	any of this software. This material is provided "AS-IS" in
 	the hope that it may be useful for others.
 	(C) Copyright 2003-2006  Sven Anders <anders@anduras.de>
   History:
 	2003 - Created version 1.0 for Linux 2.4.x.
 	2006 - Ported to Linux 2.6, added nowayout and MAGICCLOSE
 	       features. Released version 1.1
   Theory of operation:
 	A Watchdog Timer (WDT) is a hardware circuit that can
 	reset the computer system in case of a software fault.
 	You probably knew that already.
 	Usually a userspace daemon will notify the kernel WDT driver
 	via the devwatchdog special device file that userspace is
 	still alive, at regular intervals.  When such a notification
 	occurs, the driver will usually tell the hardware watchdog
 	that everything is in order, and that the watchdog should wait
 	for yet another little while to reset the system.
 	If userspace fails (RAM error, kernel bug, whatever), the
 	notifications cease to occur, and the hardware watchdog will
 	reset the system (causing a reboot) after the timeout occurs.
  Create device with:
   mknod devwatchdog c 10 130
  For an example userspace keep-alive daemon, see:
    Documentationwatchdogwdt.rst
 enable support for minutes as units? 
 (does not always work correctly, so disabled by default!) 
 timer's unit 
 timeout value: default is 60 "units" 
 is the timer enabled? 
 is the close expected? 
 to guard the watchdog from io races 
 -- Low level function ----------------------------------------
 unlock the IO chip 
 lock the IO chip 
 select the IO device 
 write to the control register 
 read from the control register 
 -- Medium level functions ------------------------------------
	 -- General Purpose IO Bit 1.2 --
	  Bit 0,   InOut: 0 = Output, 1 = Input
	  Bit 1,   Polarity: 0 = No Invert, 1 = Invert
	  Bit 2,   Group Enable Intr.: 0 = Disable, 1 = Enable
	  Bit 34, Function select: 00 = GPIO, 01 = WDT, 10 = P17,
	                            11 = Either Edge Triggered Intr. 2
	  Bit 56  (Reserved)
	  Bit 7,   Output Type: 0 = Push Pull Bit, 1 = Open Drain
	 -- General Purpose IO Bit 1.3 --
	  Bit 0,  InOut: 0 = Output, 1 = Input
	  Bit 1,  Polarity: 0 = No Invert, 1 = Invert
	  Bit 2,  Group Enable Intr.: 0 = Disable, 1 = Enable
	  Bit 3,  Function select: 0 = GPIO, 1 = LED
	  Bit 4-6 (Reserved)
	  Bit 7,  Output Type: 0 = Push Pull Bit, 1 = Open Drain
	 -- Watchdog timer units --
	  Bit 0-6 (Reserved)
	  Bit 7,  WDT Time-out Value Units Select
	          (0 = Minutes, 1 = Seconds)
	 -- Watchdog Timer Time-out Value --
	  Bit 0-7 Binary coded units (0=Disabled, 1..255)
	 -- Watchdog timer configuration --
	  Bit 0   Joystick enable: 0 = No Reset, 1 = Reset WDT upon
	 							Gameport IO
	  Bit 1   Keyboard enable: 0 = No Reset, 1 = Reset WDT upon KBD Intr.
	  Bit 2   Mouse enable: 0 = No Reset, 1 = Reset WDT upon Mouse Intr
	  Bit 3   Reset the timer
	          (Wrong in SMsC documentation? Given as: PowerLED Timout
	 							Enabled)
	  Bit 4-7 WDT Interrupt Mapping: (0000 = Disabled,
	             0001=IRQ1, 0010=(Invalid), 0011=IRQ3 to 1111=IRQ15)
	 -- Watchdog timer control --
	  Bit 0   Status Bit: 0 = Timer counting, 1 = Timeout occurred
	  Bit 1   Power LED Toggle: 0 = Disable Toggle, 1 = Toggle at 1 Hz
	  Bit 2   Force Timeout: 1 = Forces WD timeout event (self-cleaning)
	  Bit 3   P20 Force Timeout enabled:
	           0 = P20 activity does not generate the WD timeout event
	           1 = P20 Allows rising edge of P20, from the keyboard
	               controller, to force the WD timeout event.
	  Bit 4   (Reserved)
	  -- Soft power management --
	  Bit 5   Stop Counter: 1 = Stop software power down counter
	             set via register 0xB8, (self-cleaning)
	             (Upon read: 0 = Counter running, 1 = Counter stopped)
	  Bit 6   Restart Counter: 1 = Restart software power down counter
	             set via register 0xB8, (self-cleaning)
	  Bit 7   SPOFF: 1 = Force software power down (self-cleaning)
 -- Higher level functions ------------------------------------
 initialize watchdog 
 enable the watchdog 
 Select pin 80 = LED not GPIO 
	gpio_bit12(0x0A);   Set pin 79 = WDT not
 disable the timeout 
 reset control register 
 reset configuration register 
 read old (timer units) register 
 set to seconds 
 set the watchdog timer units 
 shutdown the watchdog 
 disable the watchdog 
 reset watchdog config register 
 reset watchdog control register 
 disable timeout 
 set timeout => enable watchdog 
 set Power LED to blink, if we enable the timeout 
 set timeout value 
 get timeout 
 disable watchdog 
 set the timeout to 0 to disable the watchdog 
 enable watchdog by setting the current timeout 
 set the current timeout... 
 reset the timer 
 reset the timer 
 return, if the watchdog is enabled (timeout is set...) 
 -- File operations -------------------------------------------
 open => enable watchdog and set initial timeout 
 devwatchdog can only be opened once 
 Reload and activate timer 
 close => shut off the timer 
 Shut off the timer. 
 write => update the timer to keep the machine alive 
 See if we got the magic character 'V' and reload the timer 
 reset expect flag 
			 scan to see whether or not we got the
 someone wrote to us, we should reload the timer 
 ioctl => control interface 
 the API states this is given in secs 
 and return the new timeout 
 -- Notifier funtions -----------------------------------------
 set timeout to 0, to avoid possible race-condition 
 -- Module's structures ---------------------------------------
 -- Module init functions -------------------------------------
 module's "constructor" 
 set new maximum, if it's too big 
 init the watchdog timer 
 output info 
 module's "destructor" 
 Stop the timer before we leave 
 SPDX-License-Identifier: GPL-2.0-only
  Watchdog driver for Ricoh RN5T618 PMIC
  Copyright (C) 2014 Beniamino Galvani <b.galvani@gmail.com>
  This array encodes the values of WDOGTIM field for the supported
  watchdog expiration times. If the watchdog is not accessed before
  the timer expiration, the PMU generates an interrupt and if the CPU
  doesn't clear it within one second the system is restarted.
 enable repower-on 
 enable watchdog 
 enable watchdog interrupt 
 The counter is restarted after a RW access to watchdog register 
 Clear pending watchdog interrupt 
 SPDX-License-Identifier: GPL-2.0-only
   Copyright (C) 2010 John Crispin <john@phrozen.org>
   Copyright (C) 2017 Hauke Mehrtens <hauke@hauke-m.de>
   Based on EP93xx wdt driver
 CPU0 Reset Source Register 
 reset cause mask 
  Section 3.4 of the datasheet
  The password sequence protects the WDT control register from unintended
  write actions, which might cause malfunction of the WDT.
  essentially the following two magic passwords need to be written to allow
  IO access to the WDT core
 watchdog control register 
 enable bit 
 Pre-warning limit set to 116 of max WDT period 
 set clock divider to 0x40000 
 Password field 
 The reload field is 16 bit 
 watchdog status register 
 Enable 
 Timer value 
 write the second magic plus the configuration and new timeout 
 write the second magic plus the configuration and new timeout 
 we do not need to enable the clock as it is always running 
		
		  If the watchdog is already running overwrite it with our
		  new settings. Stop is not needed as the start call will
		  replace all settings anyway.
 SPDX-License-Identifier: GPL-2.0+
  Watchdog Device Driver for Xilinx axixps_timebase_wdt
  (C) Copyright 2013 - 2014 Xilinx, Inc.
  (C) Copyright 2011 (Alejandro Cabrera <aldaya@gmail.com>)
 Register offsets for the Wdt device 
 ControlStatus Register0 
 ControlStatus Register1 
 Timebase Register Offset 
 ControlStatus Register Masks  
 Reset status 
 Timer state  
 Enable bit 1 
 ControlStatus Register 01 bits  
 Enable bit 2 
 SelfTest constants 
 spinlock for register handling 
 Clean previous status and enable the watchdog timer 
		
		  Clock framework support is optional, continue on
		  anyways if we don't find a matching clock.
	
	  Twice of the 2^wdt_interval  freq  because the first wdt overflow is
	  ignored (interrupt), reset is only generated at second wdt overflow
  xwdt_suspend - Suspend the device.
  @dev: handle to the device structure.
  Return: 0 always.
  xwdt_resume - Resume the device.
  @dev: handle to the device structure.
  Return: 0 on success, errno otherwise.
 Match table for of_platform binding 
 SPDX-License-Identifier: GPL-2.0-or-later
  MixCom Watchdog: A Simple Hardware Watchdog Device
  Based on Softdog driver by Alan Cox and PC Watchdog driver by Ken Hollis
  Author: Gergely Madarasz <gorgo@itc.hu>
  Copyright (c) 1999 ITConsult-Pro Co. <info@itc.hu>
  Version 0.1 (990415):
 		- first version
  Version 0.2 (990616):
 		- added kernel timer watchdog ping after close
 		  since the hardware does not support watchdog shutdown
  Version 0.3 (990621):
 		- added WDIOC_GETSTATUS and WDIOC_GETSUPPORT ioctl calls
  Version 0.3.1 (990622):
 		- allow module removal while internal timer is active,
 		  print warning about probable reset
  Version 0.4 (991115):
 		- support for one more type board
  Version 0.5 (20011214) Matt Domsch <Matt_Domsch@dell.com>
 		- added nowayout module option to override
 		  CONFIG_WATCHDOG_NOWAYOUT
  Version 0.6 (20020412): Rob Radez <rob@osinvestor.com>
 		- make mixcomwd_opened unsigned,
 		  removed lock_kernelunlock_kernel from mixcomwd_release,
 		  modified ioctl a bit to conform to API
  We have two types of cards that can be probed:
  1) The Mixcom cards: these cards can be found at addresses
     0x180, 0x280, 0x380 with an additional offset of 0xc10.
     (Or 0xd90, 0xe90, 0xf90).
  2) The FlashCOM cards: these cards can be set up at
     0x300 -> 0x378, in 0x8 jumps with an offset of 0x04.
     (Or 0x304 -> 0x37c in 0x8 jumps).
     Each card has it's own ID.
 The Mixcom cards 
 The FlashCOM cards 
 The end of the list 
 long req'd for setbit --RR 
 	Allow only one person to hold it open
		
		  fops_get() code via open() has already done
		  a try_module_get() so it is safe to do the
		  __module_get().
 In case it was set long ago 
 SPDX-License-Identifier: GPL-2.0-or-later
 driverscharwatchdogscx200_wdt.c
   National Semiconductor SCx200 Watchdog support
   Copyright (c) 2001,2002 Christer Weinigel <wingel@nano-system.com>
   Some code taken from:
   National Semiconductor PC87307PC97307 (ala SC1200) WDT driver
   (c) Copyright 2002 Zwane Mwaikambo <zwane@commfireservices.com>
   The author(s) of this software shall not be held liable for damages
   of any nature resulting due to the use of this software. This
 in seconds 
 Bits of the WDCNFG register 
 Enable watchdog 
 Disable watchdog 
 The scaling factor for the timer, this depends on the value of W_ENABLE 
 only allow one at a time 
 check for a magic close character 
 check that we have found the configuration block 
 SPDX-License-Identifier: GPL-2.0-only
  ARM Secure Monitor Call watchdog driver
  Copyright 2020 Google LLC.
  Julius Werner <jwerner@chromium.org>
  Based on mtk_wdt.c
 get_timeleft is optional 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2015 Zodiac Inflight Innovations
  Author: Martyn Welch <martyn.welch@collabora.co.uk>
  Based on twl4030_wdt.c by Timo Kokkonen <timo.t.kokkonen at nokia.com>:
  Copyright (C) Nokia Corporation
 Received and ready for next Download packet. 
 Firmware commands 
  ziirave_firm_write_pkt() - Build and write a firmware packet
  A packet to send to the firmware is composed by following bytes:
      Length | Addr0 | Addr1 | Data0 .. Data15 | Checksum |
  Where,
      Length: A data byte containing the length of the data.
      Addr0: Low byte of the address.
      Addr1: High byte of the address.
      Data0 .. Data15: Array of 16 bytes of data.
      Checksum: Checksum byte to verify data integrity.
 Check max data size 
	
	  Ignore packets that are targeting program memory outisde of
	  app partition, since they will be ignored by the
	  bootloader. At the same time, we need to make sure we'll
	  allow zero length packet that will be sent as the last step
	  of firmware update
 Packet length 
 Packet address 
 Packet checksum 
		
		  If data crossed page boundary we need to split this
		  write in two
	
	  Finish firmware download process by sending a zero length
	  payload
 This sleep seems to be required 
 Start firmware verification 
 End download operation 
 Reset the processor 
 Update firmware version 
 Restore the watchdog timeout 
 See if the reset pulse duration is provided in an of_node 
	
	  The default value set in the watchdog should be perfectly valid, so
	  pass that in if we haven't provided one via the module parameter or
	  of property.
 If in unconfigured state, set to stopped 
 SPDX-License-Identifier: GPL-2.0+
 	Eurotech CPU-122014101420 on board WDT driver
 	(c) Copyright 2001 Ascensit <support@ascensit.com>
 	(c) Copyright 2001 Rodolfo Giometti <giometti@ascensit.com>
 	(c) Copyright 2002 Rob Radez <rob@osinvestor.com>
 	Based on wdt.c.
 	Original copyright messages:
 	(c) Copyright 1996-1997 Alan Cox <alan@lxorguk.ukuu.org.uk>,
 						All Rights Reserved.
 	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide
 	warranty for any of this software. This material is provided
 	"AS-IS" and at no charge.
 	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>
 Changelog:
  2001 - Rodolfo Giometti
 	Initial release
  20020425 - Rob Radez
 	clean up #includes
 	clean up locking
 	make __setup param unique
 	proper options in watchdog_info
 	add WDIOC_GETSTATUS and WDIOC_SETOPTIONS ioctls
 	add expect_close support
  2002.05.30 - Joel Becker <joel.becker@oracle.com>
 	Added Matt Domsch's nowayout module option.
 	The eurotech CPU-122014101420's watchdog is a part
 	of the on-board SUPER IO device SMSC FDC 37B782.
  You must set these - there is no sane way to probe for this board.
 1 minute 
  Some symbolic names
  Programming support
 set the logical device 
 activate the WDT 
 Setting interrupt line 
 if invalid we disable interrupt 
 we use seconds 
 the default timeout 
  Kernel methods.
  eurwdt_ping:
  Reload counter one with the watchdog timeout.
 Write the watchdog default value 
  eurwdt_write:
  @file: file handle to the watchdog
  @buf: buffer to write (unused as data does not matter here
  @count: count of bytes
  @ppos: pointer to the position to write. No seeks allowed
  A write to a watchdog device is defined as a keepalive signal. Any
  write of data will do, as we we don't define content meaning.
 the default timeout 
  eurwdt_ioctl:
  @file: file handle to the device
  @cmd: watchdog command
  @arg: argument pointer
  The watchdog API defines a common set of functions for all watchdogs
  according to their available features.
 Sanity check 
  eurwdt_open:
  @inode: inode of device
  @file: file handle to device
  The misc device has been opened. The watchdog device is single
  open and on opening we load the counter.
 initial timeout 
 Activate the WDT 
  eurwdt_release:
  @inode: inode to board
  @file: file handle to board
  The watchdog has a configurable API. There is a religious dispute
  between people who want their watchdog to be able to shut down and
  those who want to be sure if the watchdog manager dies the machine
  reboots. In the former case we disable the counters, in the latter
  case you have to open it again very soon.
  eurwdt_notify_sys:
  @this: our notifier block
  @code: the event being reported
  @unused: unused
  Our notifier is called on system shutdowns. We want to turn the card
  off at reboot otherwise the machine will reboot again during memory
  test or worse yet during the following fsck. This would suck, in fact
  trust me - if it happens it does suck.
 Turn the card off 
  Kernel Interfaces
  The WDT card needs to learn about soft shutdowns in order to
  turn the timebomb registers off.
  eurwdt_exit:
  Unload the watchdog. You cannot do this with any file handles open.
  If your watchdog is set to continue ticking on close and you unload
  it, well it keeps ticking. We won't get the interrupt but the board
  will not touch PC memory so all is fine. You just have to load a new
  module in 60 seconds or reboot.
  eurwdt_init:
  Set up the WDT watchdog board. After grabbing the resources
  we require we need also to unlock the device.
  The open() function will actually kick the board off.
 SPDX-License-Identifier: GPL-2.0-or-later
 	Wdt977	0.04:	A Watchdog Device for Netwinder W83977AF chip
 	(c) Copyright 1998 Rebel.com (Woody Suwalski <woody@netwinder.org>)
 			-----------------------
 			-----------------------
       14-Dec-2001 Matt Domsch <Matt_Domsch@dell.com>
            Added nowayout module option to override CONFIG_WATCHDOG_NOWAYOUT
 	19-Dec-2001 Woody Suwalski: Netwinder fixes, ioctl interface
 	06-Jan-2002 Woody Suwalski: For compatibility, convert all timeouts
 				    from minutes to seconds.
       07-Jul-2003 Daniele Bellucci: Audit return code of misc_register in
                                     nwwatchdog_init.
       25-Oct-2005 Woody Suwalski: Convert addresses to #defs, add spinlocks
 				    remove limitiation to be used on
 				    Netwinders only
 on some systems it can be 0x3F0 
 default timeout in seconds 
 timeout in minutes 
  Start the watchdog
 unlock the SuperIO chip 
	 select device Aux2 (device=8) and set watchdog regs F2, F3 and F4
	  F2 has the timeout in minutes
	  F3 could be set to the POWER LED blink (with GP17 set to PowerLed)
	    at timeout, and to reset timer on kbdmouse activity (not impl.)
	  F4 is used to just clear the TIMEOUT'ed state (bit 0)
	outb_p(0x00, IO_DATA_PORT);	 another setting is 0E for
	 At last select device Aux1 (dev=7) and set GP16 as a
	  watchdog output. In test mode watch the bit 1 on F4 to
	  indicate "triggered"
 lock the SuperIO chip 
  Stop the watchdog
 unlock the SuperIO chip 
	 select device Aux2 (device=8) and set watchdog regs F2,F3 and F4
	 F3 is reset to its default state
	 F4 can clear the TIMEOUT'ed state (bit 0) - back to default
	 We can not use GP17 as a PowerLed, as we use its usage as a RedLed
	 at last select device Aux1 (dev=7) and set
 lock the SuperIO chip 
  Send a keepalive ping to the watchdog
  This is done by simply re-writing the timeout to reg. 0xF2
 unlock the SuperIO chip 
 select device Aux2 (device=8) and kicks watchdog reg F2 
 F2 has the timeout in minutes 
 lock the SuperIO chip 
  Set the watchdog timeout value
 convert seconds to minutes, rounding up 
		 we have a hw bug somewhere, so each 977 minute is actually
		  only 30sec. This limits the max timeout to half of device
		  max of 255 minutes...
	 timeout is the timeout in seconds, timeoutM is
  Get the watchdog status
 unlock the SuperIO chip 
 select device Aux2 (device=8) and read watchdog reg F4 
 lock the SuperIO chip 
 	devwatchdog handling
 If the watchdog is alive we don't need to start it again 
	
	 	Shut off the timer.
	 	Lock it in if it's a module and we set nowayout
       wdt977_write:
       @file: file handle to the watchdog
       @buf: buffer to write (unused as data does not matter here
       @count: count of bytes
       @ppos: pointer to the position to write. No seeks allowed
       A write to a watchdog device is defined as a keepalive signal. Any
       write of data will do, as we we don't define content meaning.
 In case it was set long ago 
 someone wrote to us, we should restart timer 
       wdt977_ioctl:
       @inode: inode of the device
       @file: file handle to the device
       @cmd: watchdog command
       @arg: argument pointer
       The watchdog API defines a common set of functions for all watchdogs
       according to their available features.
	 Check that the timeout value is within its range;
	 on Netwinder the IOports are already reserved by
	  archarmmach-footbridgenetwinder-hw.c
 SPDX-License-Identifier: GPL-2.0+
 	Acquire Single Board Computer Watchdog Timer driver
 	Based on wdt.c. Original copyright messages:
 	(c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,
 						All Rights Reserved.
 	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide
 	warranty for any of this software. This material is provided
 	"AS-IS" and at no charge.
 	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>
 	14-Dec-2001 Matt Domsch <Matt_Domsch@dell.com>
 	    Added nowayout module option to override CONFIG_WATCHDOG_NOWAYOUT
 	    Can't add timeout - driver doesn't allow changing value
 	Theory of Operation:
 		The Watch-Dog Timer is provided to ensure that standalone
 		Systems can always recover from catastrophic conditions that
 		caused the CPU to crash. This condition may have occurred by
 		external EMI or a software bug. When the CPU stops working
 		correctly, hardware on the board will either perform a hardware
 		reset (cold boot) or a non-maskable interrupt (NMI) to bring the
 		system back to a known state.
 		The Watch-Dog Timer is controlled by two IO Ports.
 		  443 hex	- Read	- Enable or refresh the Watch-Dog Timer
 		  043 hex	- Read	- Disable the Watch-Dog Timer
 		To enable the Watch-Dog Timer, a read from IO port 443h must
 		be performed. This will enable and activate the countdown timer
 		which will eventually time out and either reset the CPU or cause
 		an NMI depending on the setting of a jumper. To ensure that this
 		reset condition does not occur, the Watch-Dog Timer must be
 		periodically refreshed by reading the same IO port 443h.
 		The Watch-Dog Timer is disabled by reading IO port 043h.
 		The Watch-Dog Timer Time-Out Period is set via jumpers.
 		It can be 1, 2, 10, 20, 110 or 220 seconds.
 	Includes, defines, variables, module parameters, ...
 Includes 
 For module specific items 
 For new moduleparam's 
 For standard types (like size_t) 
 For the -ENODEV... values 
 For printkpanic... 
 For struct miscdevice 
 For the watchdog specific items 
 For file operations 
 For io-port access 
 For platform_driver framework 
 For __init__exit... 
 For copy_to_userput_user... 
 For inboutb... 
 Module information 
 There is no way to see what the correct time-out period is 
 internal variables 
 the watchdog platform device 
 module parameters 
 You must set this - there is no sane way to probe for this board. 
 You must set this - there is no sane way to probe for this board. 
 	Watchdog Operations
 Write a watchdog value 
 Turn the card off 
 	devwatchdog handling
 See if we got the magic character 'V' and reload the timer 
			 note: just in case someone wrote the magic character
			 scan to see whether or not we got the
		 Well, anyhow someone wrote to us, we should
 Activate 
 	Kernel Interfaces
 	Init & exit routines
 Turn the WDT off if we have a soft shutdown 
 SPDX-License-Identifier: GPL-2.0
 Copyright (C) STMicroelectronics 2018
 Author: Pascal Paillet <p.paillet@st.com> for STMicroelectronics.
 WATCHDOG CONTROL REGISTER bit 
 timeout is equal to register value + 1 
 SPDX-License-Identifier: GPL-2.0-only
 cpwd.c - driver implementation for hardware watchdog
  timers found on Sun Microsystems CP1400 and CP1500 boards.
  This device supports both the generic Linux watchdog
  interface and Solaris-compatible ioctls as best it is
  able.
  NOTE:	CP1400 systems appear to have a defective intr_mask
 			register on the PLD, preventing the disabling of
 			timer interrupts.  We use a timer to periodically
 			reset 'stopped' watchdogs on affected platforms.
  Copyright (c) 2000 Eric Brower (ebrower@usa.net)
  Copyright (C) 2008 David S. Miller <davem@davemloft.net>
 Internal driver definitions.  
 Watchdog timer is initialized	
 Watchdog timer is brokenstopped	
 Watchdog interrupt occurred		
 Register value definitions
 Watchdog device interrupt masks	
 Watchdog device status running	
 Watchdog device status expired	
 Sun uses Altera PLD EPF8820ATC144-4
  providing three hardware watchdogs:
  1) RIC - sends an interrupt when triggered
  2) XIR - asserts XIR_B_RESET when triggered, resets CPU
  3) POR - asserts POR_B_RESET when triggered, resets CPU, backplane, board
  Timer register block definition (struct wd_timer_regblk)
  dcntr and limit registers (halfword access):
  -------------------
  | 15 | ...| 1 | 0 |
  -------------------
  |-  counter val  -|
  -------------------
  dcntr -	Current 16-bit downcounter value.
 			When downcounter reaches '0' watchdog expires.
 			Reading this register resets downcounter with
 			'limit' value.
  limit -	16-bit countdown value in 110th second increments.
 			Writing this register begins countdown with input value.
 			Reading from this register does not affect counter.
  NOTES:	After watchdog reset, dcntr and limit contain '1'
  status register (byte access):
  ---------------------------
  | 7 | ... | 2 |  1  |  0  |
  --------------+------------
  |-   UNUSED  -| EXP | RUN |
  ---------------------------
  status-	Bit 0 - Watchdog is running
 			Bit 1 - Watchdog has expired
  PLD register block definition (struct wd_pld_regblk)
  intr_mask register (byte access):
  ---------------------------------
  | 7 | ... | 3 |  2  |  1  |  0  |
  +-------------+------------------
  |-   UNUSED  -| WD3 | WD2 | WD1 |
  ---------------------------------
  WD3 -  1 == Interrupt disabled for watchdog 3
  WD2 -  1 == Interrupt disabled for watchdog 2
  WD1 -  1 == Interrupt disabled for watchdog 1
  pld_status register (byte access):
  UNKNOWN, MAGICAL MYSTERY REGISTER
 Enable or disable watchdog interrupts
  Because of the CP1400 defect this should only be
  called during initialzation or by wd_[start|stop]timer()
  index	- sub-device index, or -1 for 'all'
  enable	- non-zero to enable interrupts, zero to disable
 Restarts timer with maximum limit value and
  does not unset 'brokenstop' value.
 Timer method called to reset stopped watchdogs--
  because of the PLD bug on CP1400, we cannot mask
  interrupts within the PLD so me must continually
  reset the timers ad infinitum.
	 kill a running timer instance, in case we
	  were called directly instead of by kernel timer
 there is at least one timer brokenstopped-- reschedule 
 Reset countdown timer with 'limit' value and continue countdown.
  This will not start a stopped timer.
 Stop a running watchdog timer-- the timer actually keeps
  running, but the interrupt is masked so that no action is
  taken upon expiration.
 Start a watchdog timer with the specified limit value
  If the watchdog is running, it will be restarted with
  the provided limit value.
  This function will enable interrupts on the specified
  watchdog.
 determine STOPPED 
 determine EXPIRED vs FREERUN vs RUNNING 
			 Fudge WD_EXPIRED status for defective CP1400--
			  IF timer is running
			 	AND brokenstop is set
			 	AND an interrupt has been serviced
			  we are WD_EXPIRED.
			 
			  IF timer is running
			 	AND brokenstop is set
			 	AND no interrupt has been serviced
			  we are WD_FREERUN.
					 we could as well pretend
 determine SERVICED 
	 Only WD0 will interrupt-- others are NMI and we won't
	  see them here....
 Register IRQ on first open of device 
 Generic Linux IOCTLs 
 Solaris-compatible IOCTLs 
	 CP1400s seem to have broken PLD implementations-- the
	  interrupt_mask register cannot be written, so no timer
	  interrupts can be masked within the PLD.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) Nokia Corporation
  Written by Timo Kokkonen <timo.t.kokkonen at nokia.com>
 SPDX-License-Identifier: GPL-2.0+
  Watchdog driver for TQMx86 PLD.
  The watchdog supports power of 2 timeouts from 1 to 4096sec.
  Once started, it cannot be stopped.
  Based on the vendor code written by Vadim V.Vlasov
  <vvlasov@dev.rtsoft.ru>
 default timeout (secs) 
 Watchdog Configuration Register 
 Watchdog ConfigStatus Register 
 values 0,1,2 correspond to 0.125,0.25,0.5s timeouts 
 SPDX-License-Identifier: GPL-2.0-or-later
       Meson Watchdog Driver
       Copyright (c) 2014 Carlo Caione
 10 us 
 128 us 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0+
 	IB700 Single Board Computer WDT driver
 	(c) Copyright 2001 Charles Howes <chowes@vsol.net>
 	Based on advantechwdt.c which is based on acquirewdt.c which
 	is based on wdt.c.
 	(c) Copyright 2000-2001 Marek Michalkiewicz <marekm@linux.org.pl>
 	Based on acquirewdt.c which is based on wdt.c.
 	Original copyright messages:
 	(c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,
 						All Rights Reserved.
 	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide
 	warranty for any of this software. This material is provided
 	"AS-IS" and at no charge.
 	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>
 	14-Dec-2001 Matt Domsch <Matt_Domsch@dell.com>
 	     Added nowayout module option to override CONFIG_WATCHDOG_NOWAYOUT
 	     Added timeout module option to override default
 Module information 
  Watchdog Timer Configuration
  The function of the watchdog timer is to reset the system
  automatically and is defined at IO port 0443H.  To enable the
  watchdog timer and allow the system to reset, write IO port 0443H.
  To disable the timer, write IO port 0441H for the system to stop the
  watchdog function.  The timer has a tolerance of 20% for its
  intervals.
  The following describes how the timer should be programmed.
  Enabling Watchdog:
  MOV AX,000FH (Choose the values from 0 to F)
  MOV DX,0443H
  OUT DX,AX
  Disabling Watchdog:
  MOV AX,000FH (Any value is fine.)
  MOV DX,0441H
  OUT DX,AX
  Watchdog timer control table:
  Level   Value  Timesec | Level Value Timesec
    1       F       0     |   9     7      16
    2       E       2     |   10    6      18
    3       D       4     |   11    5      20
    4       C       6     |   12    4      22
    5       B       8     |   13    3      24
    6       A       10    |   14    2      26
    7       9       12    |   15    1      28
    8       8       14    |   16    0      30
 Default timeout 
 30 seconds +- 20% 
 in seconds 
 	Watchdog Operations
 Write a watchdog value 
 	devwatchdog handling
 In case it was set long ago 
 Activate 
 	Kernel Interfaces
 	Init & exit routines
	 Check that the heartbeat value is within it's range ;
 Turn the WDT off if we have a soft shutdown 
 end of ib700wdt.c 
 SPDX-License-Identifier: GPL-2.0+
  Watchdog driver for the A21 VME CPU Boards
  Copyright (C) 2013 MEN Mikro Elektronik Nuernberg GmbH
 Request the used GPIOs 
		
		  Retrieve the initial value from the GPIOs that should be
		  output, then set up the line as output with that value.
 SPDX-License-Identifier: GPL-2.0-or-later
 	sun4v watchdog timer
 	(c) Copyright 2016 Oracle Corporation
 	Implement a simple watchdog driver using the built-in sun4v hypervisor
 	watchdog support. If time expires, the hypervisor stops or bounces
 	the guest domain.
 1 second 
	
	  HV watchdog timer will round up the timeout
	  passed in to the nearest multiple of the
	  watchdog resolution in milliseconds.
	
	  There are 2 properties that can be set from the control
	  domain for the watchdog.
	  watchdog-resolution
	  watchdog-max-timeout
	 
	  We can expect a handle to be returned otherwise something
	  serious is wrong. Correct to return -ENODEV here.
	
	  This is a safe way to validate if we are on the right
	  platform.
 Allow value of watchdog-resolution up to 1s (default) 
		
		  If the property value (in ms) is smaller than
		  min_timeout, return -EINVAL.
		
		  If the property value is smaller than
		  default max_timeout  then set watchdog max_timeout to
		  the value of the property in seconds.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2016 Yang Ling <gnaygnil@gmail.com>
 SPDX-License-Identifier: GPL-2.0-or-later
  PIC32 deadman timer driver
  Purna Chandra Mandal <purna.mandal@microchip.com>
  Copyright (c) 2016, Microchip Technology Inc.
 Deadman Timer Regs 
 Deadman Timer Regs fields 
 Reset Control Register fields for watchdog 
	
	  Cannot touch registers in the CPU cycle following clearing the
	  ON bit.
 set pre-clear key 
 wait for DMT window to open 
 apply key2 
 check whether keys are latched correctly 
 sentinel  }
  IBM Automatic Server Restart driver.
  Copyright (c) 2005 Andrey Panin <pazke@donpac.ru>
  Based on driver written by Pete Reynolds.
  Copyright (c) IBM Corporation, 1998-2004.
  This software may be used and distributed according to the terms
  of the GNU Public License, incorporated herein by reference.
 PEARL ASR SW REGISTER SUPERIO PORT ADDRESSES 
 bit 7: disable = 1, enable = 0 
 bit 6: 0, then 1, then 0 
 JASPER OFFSET FROM SIO BASE ADDR TO ASR SW REGISTERS. 
 bit 0: disable = 1, enable = 0 
 bit 1: 0, then 1, then 0 
 Base address of Juniper ASR 
 bit 0: disable = 1 enable = 0 
 bit 1: 0, then 1, then 0 
 Base address of Spruce ASR 
 bit 1: disable = 1 enable = 0 
 bit 0: 0, then 1, then 0 
 asr_write_addr == asr_read_addr 
		
		  First make sure the hardware timer is reset by toggling
		  ASR hardware timer line.
 asr_write_addr == asr_read_addr 
		 SELECT SuperIO CHIP FOR QUERYING
 SELECT AND READ THE HIGH-NIBBLE OF THE GPIO BASE ADDRESS 
 SELECT AND READ THE LOW-NIBBLE OF THE GPIO BASE ADDRESS 
 Suggested fix 
		 FIXME: need to use pci_config_lock here,
		spin_lock_irqsave(&pci_config_lock, flags);
 Select the SuperIO chip in the PCI IO port register 
 BUS 0, Slot 1F, fnc 0, offset 58 
		
		  Read the base address for the SuperIO chip.
		  Only the lower 16 bits are valid, but the address is word
		  aligned so the last bit must be masked off.
		spin_unlock_irqrestore(&pci_config_lock, flags);
 In case it was set long ago 
	
	  The hardware has a fixed timeout value, so no WDIOC_SETTIMEOUT
	  and WDIOC_GETTIMEOUT always returns 256.
 SPDX-License-Identifier: GPL-2.0-only
  driverscharwatchdogixp4xx_wdt.c
  Watchdog driver for Intel IXP4xx network processors
  Author: Deepak Saxena <dsaxena@plexity.net>
  Author: Linus Walleij <linus.walleij@linaro.org>
  Copyright 2004 (c) MontaVista, Software, Inc.
  Based on sa1100 driver, Copyright (C) 2000 Oleg Drokin <green@crimea.edu>
 Fallback if we do not have a clock for this 
 Registers after the timer registers 
 Watchdog Timer 
 Watchdog Enable 
 Watchdog Key 
 Timer Status 
 Devres-handled clock disablement 
	
	  Retrieve rate from a fixed clock from the device tree if
	  the parent has that, else use the default clock rate.
 Default to 60 seconds 
 SPDX-License-Identifier: GPL-2.0+
  Watchdog driver for Atmel AT91SAM9x processors.
  Copyright (C) 2008 Renaud CERRATO r.cerrato@til-technologies.fr
  The Watchdog Timer Mode Register can be only written to once. If the
  timeout need to be set from Linux, be sure that the bootstrap or the
  bootloader doesn't write to this register.
 AT91SAM9 watchdog runs a 12bit counter @ 256Hz,
  use this to convert a watchdog
  value fromto milliseconds.
 Watchdog max counter value in ticks 
 Watchdog max deltavalue in secs 
 Hardware timeout in seconds 
 Timer heartbeat (500ms) 
 User land timeout 
 the next_heartbeat for the timer 
 The timer that pings the watchdog 
 WDT heartbeat in jiffies 
 ......................................................................... 
  Reload the watchdog timer.  (ie, pat the watchdog)
  Timer tick
 calculate when the next userspace timeout will be 
 The watchdog timer hardware can not be stopped... 
	
	  Try to reset the watchdog counter 4 or 2 times more often than
	  actually requested, to avoid spurious watchdog reset.
	  If this is not possible because of the min_heartbeat value, reset
	  it at the min_heartbeat period.
	
	  Use min_heartbeat the first time to avoid spurious watchdog reset:
	  we don't know for how long the watchdog counter is running, and
	   - resetting it right now might trigger a watchdog fault reset
	   - waiting for heartbeat time might lead to a watchdog timeout
	     reset
 Try to set timeout from device tree first 
 ......................................................................... 
 Get the interrupts property 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  PC Watchdog Driver
  by Ken Hollis (khollis@bitgate.com)
  Permission granted from Simon Machell (smachell@berkprod.com)
  Written for the Linux Kernel, and GPLed by Ken Hollis
  960107	Added request_region routines, modulized the whole thing.
  960108	Fixed end-of-file pointer (Thanks to Dan Hollis), added
 		WD_TIMEOUT define.
  960216	Added eof marker on the file, and changed verbose messages.
  960716	Made functional and cosmetic changes to the source for
 		inclusion in Linux 2.0.x kernels, thanks to Alan Cox.
  960717	Removed readseek routines, replaced with ioctl.  Also, added
 		check_region command due to Alan's suggestion.
  960821	Made changes to compile in newer 2.0.x kernels.  Added
 		"cold reboot sense" entry.
  960825	Made a few changes to code, deleted some defines and made
 		typedefs to replace them.  Made heartbeat reset only available
 		via ioctl, and removed the write routine.
  960828	Added new items for PC Watchdog Rev.C card.
  960829	Changed around all of the IOCTLs, added new features,
 		added watchdog disablere-enable routines.  Added firmware
 		version reporting.  Added read routine for temperature.
 		Removed some extra defines, added an autodetect Revision
 		routine.
  961006	Revised some documentation, fixed some cosmetic bugs.  Made
 		drivers to panic the system if it's overheating at bootup.
  961118	Changed some verbiage on some of the output, tidied up
 		code bits, and added compatibility to 2.1.x.
  970912	Enabled board on open and disable on close.
  971107	Took account of recent VFS changes (broke read).
  971210	Disable board on initialisation in case board already ticking.
  971222	Changed openclose for temperature handling
 		Michael Meskes <meskes@debian.org>.
  980112	Used minor numbers from includelinuxmiscdevice.h
  990403	Clear reset status after reading control status register in
 		pcwd_showprevstate(). [Marc Boucher <marc@mbsi.ca>]
  990605	Made changes to code to support Firmware 1.22a, added
 		fairly useless proc entry.
  990610	removed said useless proc code for the merge <alan>
  000403	Removed last traces of proc code. <davej>
  011214	Added nowayout module option to override
 		CONFIG_WATCHDOG_NOWAYOUT <Matt_Domsch@dell.com>
 		Added timeout module option to override default
 	A bells and whistles driver is available from http:www.pcwd.de
 	More info available at http:www.berkprod.com or
 	http:www.pcwatchdog.com
 For module specific items 
 For new moduleparam's 
 For standard types (like size_t) 
 For the -ENODEV... values 
 For printkpanic... 
 For mdelay function 
 For timer related operations 
 For jiffies stuff 
 For struct miscdevice 
 For the watchdog specific items 
 For kernel_power_off() 
 For __init__exit... 
 For file operations 
 For isa devices 
 For io-port access 
 For spin_lockspin_unlock... 
 For copy_to_userput_user... 
 For inboutb... 
 Module and version information 
  It should be noted that PCWD_REVISION_B was removed because A and B
  are essentially the same types of card, with the exception that B
  has temperature reporting.  Since I didn't receive a Rev.B card,
  the Rev.B card is not supported.  (It's a good thing too, as they
  are no longer in production.)
  These are the auto-probe addresses available.
  Revision A only uses ports 0x270 and 0x370.  Revision C introduced 0x350.
  Revision A has an address range of 2 addresses, while Revision C has 4.
  These are the defines that describe the control status bits for the
  PCI-PC Watchdog card.
 Port 1 : Control Status #1 for the PC Watchdog card, revision A. 
 Previously reset state 
 Temperature overheat sense 
 Heartbeat sense 
 External relay triggered 
 Software external relay triggered 
 Port 1 : Control Status #1 for the PC Watchdog card, revision C. 
 Watchdog Trip status 
 Watchdog Heartbeat 
 Temperature Trip status 
#define WD_REVC_RL2A		0x08	 Relay 2 activated by
 Relay 1 active 
 Relay 2 disable 
 Relay 2 activated? 
 Port 2 : Control Status #2 
 Watchdog Disabled 
 Watchdog Enable Temperature Trip 
#define WD_SSEL			0x40	 Watchdog Switch Select
 Watchdog Command Mode 
 max. time we give an ISA watchdog card to process a command 
 500ms for each 4 bit response (according to spec.) 
 Watchdog's internal commands 
 Watchdog's Dip Switch heartbeat values 
 OFF-OFF-OFF	= 20 Sec  
 OFF-OFF-ON	= 40 Sec  
 OFF-ON-OFF	=  1 Min  
 OFF-ON-ON	=  5 Min  
 ON-OFF-OFF	= 10 Min  
 ON-OFF-ON	= 30 Min  
 ON-ON-OFF	=  1 Hour 
 ON-ON-ON	=  2 hour 
  We are using an kernel timer to do the pinging of the watchdog
  every ~500ms. We try to set the internal heartbeat of the
  watchdog to 2 ms.
 We can only use 1 card due to the devwatchdog restriction 
 internal variables 
 this is private data for each ISA-PC watchdog card 
 The cards firmware version 
 The card's revision 
	int supports_temp;		 Whether or not the card has
	int command_mode;		 Whether or not the card is in
 The card's boot status 
 The cards IO address 
 the lock for io operations 
 The timer that pings the watchdog 
 the next_heartbeat for the timer 
 module parameters 
 Default 
 Verbose 
 print fancy stuff too 
 default heartbeat = delay-time from dip-switches 
 	Internal functions
 Double read for stabilising 
 The WCMD bit must be 1 and the command is only 4 bits in size 
 Data is stable 
 Set the card into command mode 
 Card does not like what we've done to it 
 Spec says wait 1ms 
 Set the card into normal mode 
 Get switch settings 
 Get some extra info from the hardware (in commanddebugdiag mode) 
 Reprogram internal heartbeat to 2 seconds 
	 If we got a heartbeat pulse within the WDT_INTERVAL
 Ping the watchdog 
			  Rev A cards are reset by setting the
 Re-trigger watchdog by writing to port 0 
 Re-set the timer interval 
 Start the timer 
 Enable the port 
 Stop the timer 
  Disable the board  
 user land ping 
 arbitrary upper limit 
		 Rev A cards return status information from
		  the base register, which is used for the
		 Rev C cards return card status in the base
		  address + 1 register. And use different bits
		  to indicate a card initiated reset, and an
		  over-temperature condition. And the reboot
 clear reset status & Keep Relay 2 disable state as it is 
 check that port 0 gives temperature info and no command results 
	
	  Convert celsius to fahrenheit, since this was
	  the decided 'standard' for this return value.
 	devwatchdog handling
 In case it was set long ago 
 Activate 
 	devtemperature handling
 	Kernel Interfaces
 	Init & exit routines
	 REV A cards use only 2 io ports; test
   The ISA cards have a heartbeat bit in one of the registers, which
   register is card dependent.  The heartbeat bit is monitored, and if
   found, is considered proof that a Berkshire card has been found.
   The initial rate is once per second at board start up, then twice
   per second for normal operation.
 Reg 0, in case it's REV A 
 Register 1 for REV C cards 
 For REV A boards 
 For REV C boards 
 Not an 'ff' from a floating bus, so must be a card! 
 Has either hearbeat bit changed?  
 Check card's revision 
 Initial variables 
 get the boot_status 
 clear the "card caused reboot" flag 
  Disable the board  
  Check whether or not the card supports the temperature device 
 Show info about the card itself 
 If heartbeat = 0 then we use the heartbeat from the dip-switches 
	 Check that the heartbeat value is within it's range;
  Disable the board  
 Deregister 
 SPDX-License-Identifier: GPL-2.0-or-later
 Watchdog timer for machines with the CS5535CS5536 companion chip
  Copyright (C) 2006-2007, Advanced Micro Devices, Inc.
  Copyright (C) 2009  Andres Salomon <dilinger@collabora.co.uk>
 Stop the counter 
 Reset the counter 
 Enable the counter 
 Set up the timer 
 Set up comparator 2 to reset when the event fires 
 Set up the initial timeout 
 SPDX-License-Identifier: GPL-2.0-or-later
  PIC32 watchdog driver
  Joshua Henderson <joshua.henderson@microchip.com>
  Copyright (c) 2016, Microchip Technology Inc.
 Watchdog Timer Registers 
 Watchdog Timer Control Register fields 
 Reset Control Register fields for watchdog 
 default, prescaler of 32 (i.e. div-by-32) is implicit. 
 calculate terminal count from postscaler. 
 find time taken (in secs) to reach terminal count 
 write key through single half-word 
	
	  Cannot touch registers in the CPU cycle following clearing the
	  ON bit.
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  Kontron PLD watchdog driver
  Copyright (c) 2010-2013 Kontron Europe GmbH
  Author: Michael Brunner <michael.brunner@kontron.com>
  Note: From the PLD watchdog point of view timeout and pretimeout are
        defined differently than in the kernel.
        First the pretimeout stage runs out before the timeout stage gets
        active.
  KernelAPI:                     P-----| pretimeout
                |-----------------------T timeout
  Watchdog:     |-----------------P       pretimeout_stage
                                  |-----T timeout_stage
 seconds 
  kempld_get_mutex must be called prior to calling this function.
 Check if the watchdog was enabled 
 Check if the watchdog was disabled 
 Probe each byte individually. 
 A failed write means this byte is reserved 
 Assign available stages to timeout and pretimeout 
 Enable nowayout if watchdog is already locked 
 Check if watchdog is already enabled 
 Get current watchdog settings 
 Disable watchdog if it is active during suspend 
 Enable watchdog and configure it if necessary 
	
	  If watchdog was stopped before suspend be sure it gets disabled
	  again, for the case BIOS has enabled it during resume
 SPDX-License-Identifier: GPL-2.0
  omap_wdt.c
  Watchdog driver for the TI OMAP 16xx & 24xx34xx 32KHz (non-secure) watchdog
  Author: MontaVista Software, Inc.
 	 <gdavis@mvista.com> or <source@mvista.com>
  2003 (c) MontaVista Software, Inc.
  History:
  20030527: George G. Davis <gdavis@mvista.com>
 	Initially based on linux-2.4.19-rmk7-pxa1driverscharsa1100_wdt.c
 	(c) Copyright 2000 Oleg Drokin <green@crimea.edu>
 	Based on SoftDog driver by Alan Cox <alan@lxorguk.ukuu.org.uk>
  Copyright (c) 2004 Texas Instruments.
 	1. Modified to support OMAP1610 32-KHz watchdog timer
 	2. Ported to 2.6 kernel
  Copyright (c) 2005 David Brownell
 	Use the driver model and standard identifiers; handle bigger timeouts.
 physical 
 to avoid races with PM 
 wait for posted write to complete 
 wait for posted write to complete 
 reloaded WCRR from WLDR 
 Sequence to enable the watchdog 
 sequence required to disable watchdog 
 TIMER_MODE 
 TIMER_MODE 
 just count up at 32 KHz 
	
	  Make sure the watchdog is disabled. This is unfortunately required
	  because writing to various registers with the watchdog running has no
	  effect.
 initialize prescaler 
 trigger loading of new timeout value 
 reserve static register mappings 
 REVISIT ... not clear this is the best way to handle system suspend; and
  it's very inappropriate for selective device suspend (e.g. suspending this
  through sysfs rather than by stopping the watchdog daemon).  Also, this
  may not play well enough with NOWAYOUT...
 SPDX-License-Identifier: GPL-2.0+
 	intel TCO Watchdog Driver
 	(c) Copyright 2006-2011 Wim Van Sebroeck <wim@iguana.be>.
 	Neither Wim Van Sebroeck nor Iguana vzw. admit liability nor
 	provide warranty for any of this software. This material is
 	provided "AS-IS" and at no charge.
 	The TCO watchdog is implemented in the following IO controller hubs:
 	(See the intel documentation on http:developer.intel.com.)
 	document number 290655-003, 290677-014: 82801AA (ICH), 82801AB (ICHO)
 	document number 290687-002, 298242-027: 82801BA (ICH2)
 	document number 290733-003, 290739-013: 82801CA (ICH3-S)
 	document number 290716-001, 290718-007: 82801CAM (ICH3-M)
 	document number 290744-001, 290745-025: 82801DB (ICH4)
 	document number 252337-001, 252663-008: 82801DBM (ICH4-M)
 	document number 273599-001, 273645-002: 82801E (C-ICH)
 	document number 252516-001, 252517-028: 82801EB (ICH5), 82801ER (ICH5R)
 	document number 300641-004, 300884-013: 6300ESB
 	document number 301473-002, 301474-026: 82801F (ICH6)
 	document number 313082-001, 313075-006: 631xESB, 632xESB
 	document number 307013-003, 307014-024: 82801G (ICH7)
 	document number 322896-001, 322897-001: NM10
 	document number 313056-003, 313057-017: 82801H (ICH8)
 	document number 316972-004, 316973-012: 82801I (ICH9)
 	document number 319973-002, 319974-002: 82801J (ICH10)
 	document number 322169-001, 322170-003: 5 Series, 3400 Series (PCH)
 	document number 320066-003, 320257-008: EP80597 (IICH)
 	document number 324645-001, 324646-001: Cougar Point (CPT)
 	document number TBD                   : Patsburg (PBG)
 	document number TBD                   : DH89xxCC
 	document number TBD                   : Panther Point
 	document number TBD                   : Lynx Point
 	document number TBD                   : Lynx Point-LP
 	Includes, defines, variables, module parameters, ...
 Module and version information 
 Includes 
 For ACPI support 
 For BIT() 
 For module specific items 
 For new moduleparam's 
 For standard types (like size_t) 
 For the -ENODEV... values 
 For printkpanic... 
 For the watchdog specific items 
 For __init__exit... 
 For file operations 
 For platform_driver framework 
 For pci functions 
 For io-port access 
 For spin_lockspin_unlock... 
 For copy_to_userput_user... 
 For inboutb... 
 Address definitions for the TCO 
 TCO base address 
 SMI Control and Enable Register 
 TCO Timer ReloadCurr. Value 
 TCOv1 Timer Initial Value
 TCO Data In Register	
 TCO Data Out Register	
 TCO1 Status Register	
 TCO2 Status Register	
 TCO1 Control Register	
 TCO2 Control Register	
 TCOv2 Timer Initial Value
 internal variables 
 TCO versiongeneration 
	
	  NO_REBOOT flag is Memory-Mapped GCS register bit 5 (TCO version 2),
	  or memory-mapped PMC register bit 4 (TCO version 3).
 the lock for io operations 
 the PCI-device 
 whether or not the watchdog has been suspended 
 no reboot API private data 
 no reboot update function pointer 
 module parameters 
 30 sec default heartbeat 
 in seconds 
  Some TCO specific functions
  The iTCO v1 and v2's internal timer is stored as ticks which decrement
  every 0.6 seconds.  v3's internal timer is stored as seconds (some
  datasheets incorrectly state 0.6 seconds).
 make sure the update is successful 
 make sure the update is successful 
 make sure the update is successful 
 disable chipset's NO_REBOOT bit 
	 Force the timer to its reload value by writing to the TCO_RLD
 Bit 11: TCO Timer Halt -> 0 = The TCO timer is enabled to count 
 Bit 11: TCO Timer Halt -> 1 = The TCO timer is disabled 
 Set the NO_REBOOT bit to prevent later reboots, just for sure 
 Reload the timer by writing to the TCO Timer Counter register 
		 Reset the timeout status bit so that the timer
 write 1 to clear bit 
 For TCO v1 the timer counts down twice before rebooting 
 from the specs: 
 "Values of 0h-3h are ignored and should not be attempted" 
 Write new heartbeat to watchdog 
 read the TCO Timer 
 Bit 11: TCO Timer Halt -> 0 = The TCO timer is  enabled 
 	Kernel Interfaces
 	Init & exit routines
 The TCO logic uses the TCO_EN bit in the SMI_EN register 
	
	  Get the Memory-Mapped GCS or PMC register, we need it for the
	  NO_REBOOT flag (TCO v2 and v3).
 Check chipset's NO_REBOOT bit 
 Cannot reset NO_REBOOT bit 
 Set the NO_REBOOT bit to prevent later reboots, just for sure 
		
		  Bit 13: TCO_EN -> 0
		  Disables TCO logic generating an SMI#
 Turn off SMI clearing watchdog 
 Clear out the (probably old) status 
 Clear the Time Out Status bit 
 Clear SECOND_TO_STS bit 
 Clear the Time Out Status bit 
 Clear SECOND_TO_STS bit 
 Clear BOOT_STS bit 
	 Check that the heartbeat value is within it's range;
  Suspend-to-idle requires this, because it stops the ticks and timekeeping, so
  the watchdog cannot be pinged while in that state.  In ACPI sleep states the
  watchdog is stopped by the platform firmware.
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0+
 	intel TCO vendor specific watchdog driver support
 	(c) Copyright 2006-2009 Wim Van Sebroeck <wim@iguana.be>.
 	Neither Wim Van Sebroeck nor Iguana vzw. admit liability nor
 	provide warranty for any of this software. This material is
 	provided "AS-IS" and at no charge.
 	Includes, defines, variables, module parameters, ...
 Module and version information 
 Includes 
 For module specific items 
 For new moduleparam's 
 For standard types (like size_t) 
 For the -ENODEV... values 
 For printkpanic... 
 For __init__exit... 
 For io-port access 
 For inboutb... 
 List of vendor support modes 
 SuperMicro Pentium 3 Era 370SSE+-OEM1P3TSSE 
 SuperMicro Pentium 4  Xeon 4  EMT64T Era Systems - no longer supported 
 Broken BIOS 
 	Vendor Specific Support
 	Vendor Support: 1
 	Board: Super Micro Computer Inc. 370SSE+-OEM1P3TSSE
 	iTCO chipset: ICH2
 	Code contributed by: R. Seretny <lkpatches@paypc.com>
 	Documentation obtained by R. Seretny from SuperMicro Technical Support
 	To enable Watchdog function:
 	    BIOS setup -> Power -> TCO Logic SMI Enable -> Within5Minutes
 	    This setting enables SMI to clear the watchdog expired flag.
 	    If BIOS or CPU fail which may cause SMI hang, then system will
 	    reboot. When application starts to use watchdog function,
 	    application has to take over the control from SMI.
 	    For P3TSSE, J36 jumper needs to be removed to enable the Watchdog
 	    function.
 	    Note: The system will reboot when Expire Flag is set TWICE.
 	    So, if the watchdog timer is 20 seconds, then the maximum hang
 	    time is about 40 seconds, and the minimum hang time is about
 	    20.6 seconds.
 Bit 13: TCO_EN -> 0 = Disables TCO logic generating an SMI# 
 Turn off SMI clearing watchdog 
 Needed to activate watchdog 
 Bit 13: TCO_EN -> 1 = Enables the TCO logic to generate SMI# 
 Turn on SMI clearing watchdog 
 Needed to deactivate watchdog 
 	Vendor Support: 911
 	Board: Some Intel ICHx based motherboards
 	iTCO chipset: ICH7+
 	Some Intel motherboards have a broken BIOS implementation: i.e.
 	the SMI handler clear's the TIMEOUT bit in the TC01_STS register
 	and does not reload the time. Thus the TCO watchdog does not reboot
 	the system.
 	These are the conclusions of Andriy Gapon <avg@icyb.net.ua> after
 	debugging: the SMI handler is quite simple - it tests value in
 	TCO1_CNT against 0x800, i.e. checks TCO_TMR_HLT. If the bit is set
 	the handler goes into an infinite loop, apparently to allow the
 	second timeout and reboot. Otherwise it simply clears TIMEOUT bit
 	in TCO1_STS and that's it.
 	So the logic seems to be reversed, because it is hard to see how
 	TIMEOUT can get set to 1 and SMI generated when TCO_TMR_HLT is set
 	(other than a transitional effect).
 	The only fix found to get the motherboard(s) to reboot is to put
 	the glb_smi_en bit to 0. This is a dirty hack that bypasses the
 	broken code by disabling Global SMI.
 	WARNING: globally disabling SMI could possibly lead to dramatic
 	problems, especially on laptops! I.e. various ACPI things where
 	SMI is used for communication between OS and firmware.
 	Don't use this fix if you don't need to!!!
	 Bit 13: TCO_EN     -> 0 = Disables TCO logic generating an SMI#
	 Bit 13: TCO_EN     -> 1 = Enables TCO logic generating an SMI#
 	Generic Support Functions
 SPDX-License-Identifier: GPL-2.0-or-later
  Watchdog timer for PowerPC Book-E systems
  Author: Matthew McClintock
  Maintainer: Kumar Gala <galak@kernel.crashing.org>
  Copyright 2005, 2008, 2010-2011 Freescale Semiconductor Inc.
 If the kernel parameter wdt=1, the watchdog will be enabled at boot.
  Also, the wdt_period sets the watchdog timer period timeout.
  For E500 cpus the wdt_period sets which bit changing from 0->1 will
  trigger a watchdog timeout. This watchdog timeout will occur 3 times, the
  first time nothing will happen, the second time a watchdog exception will
  occur, and the final time the board will reset.
 For the specified period, determine the number of seconds
  corresponding to the reset time.  There will be a watchdog
  exception at approximately 35 of this time.
  The formula to calculate this is given by:
  2.5  (2^(63-period+1))  timebase_freq
  In order to simplify things, we assume that period is
  at least 1.  This will still result in a very long timeout.
	 tmp may be a very large number and we don't want to overflow,
	  so divide the timebase freq instead of multiplying tmp
  This procedure will find the highest period which will give a timeout
  greater than the one required. e.g. for a bus speed of 66666666 and
  and a parameter of 2 secs, then this procedure will return a value of 38.
 CONFIG_PPC_FSL_BOOK3E 
 from Kconfig 
 !CONFIG_PPC_FSL_BOOK3E 
 clear status before enabling watchdog 
  __booke_wdt_disable - disable the watchdog on the given CPU
  This function is called on each CPU.  It disables the watchdog on that CPU.
  TCR[WRC] cannot be changed once it has been set to non-zero, but we can
  effectively disable the watchdog by setting its period to the maximum value.
 clear status to make sure nothing is pending 
 SPDX-License-Identifier: GPL-2.0+
 	Watchdog driver for the SA11x0PXA2xx
 	(c) Copyright 2000 Oleg Drokin <green@crimea.edu>
 	    Based on SoftDog driver by Alan Cox <alan@lxorguk.ukuu.org.uk>
 	Neither Oleg Drokin nor iXcelerator.com admit liability nor provide
 	warranty for any of this software. This material is provided
 	"AS-IS" and at no charge.
 	(c) Copyright 2000           Oleg Drokin <green@crimea.edu>
 	27112000 Initial release
 	Allow only one person to hold it open
 Activate SA1100 Watchdog timer 
  The watchdog cannot be disabled.
  Previous comments suggested that turning off the interrupt by
  clearing OIER[E3] would prevent the watchdog timing out but this
  does not appear to be true (at least on the PXA255).
 Refresh OSMR3 timer. 
 (secs) Default is 1 minute 
	
	  Read the reset status, and save it for later.  If
	  we suspend, RCSR will be cleared, and the watchdog
	  reset reason will be lost.
 SPDX-License-Identifier: GPL-2.0
 	NANO7240 SBC Watchdog device driver
 	Based on w83877f.c by Scott Jennings,
 	(c) Copyright 2007  Gilles GIGAN <gilles.gigan@jcu.edu.au>
 in seconds 
  Utility routines
 disable the watchdog 
 enable the watchdog 
 set the timeout 
 Whack the dog 
  devwatchdog handling
 is there a magic char ? 
 	Notifier for system down
	 The IO port 0x043 used to disable the watchdog
	  is already claimed by the system timer, so we
 SPDX-License-Identifier: GPL-2.0-or-later
 	W83877F Computer Watchdog Timer driver
       Based on acquirewdt.c by Alan Cox,
            and sbc60xxwdt.c by Jakob Oestergaard <jakob@unthought.net>
 	The authors do NOT admit liability nor provide warranty for
 	any of this software. This material is provided "AS-IS" in
       the hope that it may be useful for others.
 	(c) Copyright 2001    Scott Jennings <linuxdrivers@oro.net>
            419 - 2001      [Initial revision]
            927 - 2001      Added spinlocking
            412 - 2002      [rob@osinvestor.com] Eliminate extra comments
                             Eliminate fop_read
                             Eliminate extra spin_unlock
                             Added KERN_ tags to printks
                             add CONFIG_WATCHDOG_NOWAYOUT support
                             fix possible wdt_is_open race
                             changed watchdog_info to correctly reflect what
 			      the driver offers
                             added WDIOC_GETSTATUS, WDIOC_GETBOOTSTATUS,
 			      WDIOC_SETTIMEOUT,
                             WDIOC_GETTIMEOUT, and WDIOC_SETOPTIONS ioctls
            098 - 2003      [wim@iguana.be] cleanup of trailing spaces
                             added extra printk's for startup problems
                             use module_param
                             made timeout (the emulated heartbeat) a
 			      module_param
                             made the keepalive ping an internal subroutine
   This WDT driver is different from most other Linux WDT
   drivers in that the driver will ping the watchdog by itself,
   because this particular WDT has a very short timeout (1.6
   seconds) and it would be insane to count on any userspace
   daemon always getting scheduled within that time frame.
  The W83877F seems to be fixed at 1.6s timeout (at least on the
  EMACS PC-104 board I'm using). If we reset the watchdog every
  We must not require too good response from the userspace daemon.
  Here we require the userspace daemon to send us a heartbeat
  char to devwatchdog every 30 seconds.
 30 sec default timeout 
 in seconds, will be multiplied by HZ to get seconds to wait for a ping 
 	Whack the dog
	 If we got a heartbeat pulse within the WDT_US_INTERVAL
	  we agree to ping the WDT
 Ping the WDT 
 Ping the WDT by reading from WDT_PING 
 Re-set the timer interval 
  Utility routines
 buy some time 
 make W83877F available 
 enable watchdog 
 lock the W8387FF away 
 Start the timer 
 Stop the timer 
 user land ping 
  devwatchdog handling
 See if we got the magic character 'V' and reload the timer 
			 note: just in case someone wrote the magic
			 scan to see whether or not we got the
 someone wrote to us, we should restart timer 
 Just in case we're already talking to someone... 
 Good, fire up the show 
 arbitrary upper limit 
 	Notifier for system down
 	The WDT needs to learn about soft shutdowns in order to
 	turn the timebomb registers off.
 Deregister 
 arbitrary upper limit 
 SPDX-License-Identifier: GPL-2.0-only
  NXP LPC18xx Watchdog Timer (WDT)
  Copyright (c) 2015 Ariel D'Alessandro <ariel@vanguardiasur.com>
  Notes
  -----
  The Watchdog consists of a fixed divide-by-4 clock pre-scaler and a 24-bit
  counter which decrements on every clock cycle.
 Registers 
 Clock pre-scaler 
 Timeout values in seconds 
	
	  An abort condition will occur if an interrupt happens during the feed
	  sequence.
 Use safe value (12 of real timeout) 
  Since LPC18xx Watchdog cannot be disabled in hardware, we must keep feeding
  it with a timer until userspace watchdog software takes over.
	
	  Setting the WDEN bit in the WDMOD register is not sufficient to
	  enable the Watchdog. A valid feed sequence must be completed after
	  setting WDEN before the Watchdog is capable of generating a reset.
	
	  Incorrect feed sequence causes immediate watchdog reset if enabled.
 We use the clock rate to calculate timeouts 
  driverswatchdogm54xx_wdt.c
  Watchdog driver for ColdFire MCF547x & MCF548x processors
  Copyright 2010 (c) Philippe De Muyter <phdm@macqel.be>
  Adapted from the IXP4xx watchdog driver, which carries these notices:
   Author: Deepak Saxena <dsaxena@plexity.net>
   Copyright 2004 (c) MontaVista, Software, Inc.
   Based on sa1100 driver, Copyright (C) 2000 Oleg Drokin <green@crimea.edu>
  This file is licensed under  the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
 (secs) Default is 0.5 minute 
 preserve GPIO usage, if any 
 disable watchdog 
 SPDX-License-Identifier: GPL-2.0+
  Watchdog device driver for DA9062 and DA9061 PMICs
  Copyright (C) 2015  Dialog Semiconductor Ltd.
	
	  Prevent pings from occurring late in system poweroffreboot sequence
	  and possibly locking out restart handler from accessing i2c bus.
 Don't use regmap because it is not atomic safe 
 wait for reset to assert... 
 Set timeout from DT value if available 
 SPDX-License-Identifier: GPL-2.0
  Copyright 2019 NXP.
 wait for wdog to fire 
 unlock the wdog for reconfiguration 
 set an initial timeout value in TOVAL 
 enable 32bit command sequence and reconfigure 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  Driver for Atmel SAMA5D4 Watchdog Timer
  Copyright (C) 2015-2019 Microchip Technology Inc. and its subsidiaries
 minimum and maximum watchdog timeout, in seconds 
 4 slow clock periods is 432768 = 122.07µs
	
	  WDT_CR and WDT_MR must not be modified within three slow clock
	  periods following a restart of the watchdog performed by a write
	  access in WDT_CR.
	
	  WDDIS has to be 0 when updating WDDWDV. The datasheet states: When
	  setting the WDDIS bit, and while it is set, the fields WDV and WDD
	  must not be modified.
	  If the watchdog is enabled, then the timeout can be updated. Else,
	  wait that the user enables it.
	
	  When booting and resuming, the bootloader may have changed the
	  watchdog configuration.
	  If the watchdog is already running, we can safely update it.
	  Else, we have to disable it properly.
	
	  FIXME: writing MR also pings the watchdog which may not be desired.
	  This should only be done when the registers are lost on suspend but
	  there is no way to get this information right now.
 SPDX-License-Identifier: GPL-2.0-or-later
 	60xx Single Board Computer Watchdog Timer driver for Linux 2.2.x
 	Based on acquirewdt.c by Alan Cox.
 	The author does NOT admit liability nor provide warranty for
 	any of this software. This material is provided "AS-IS" in
 	the hope that it may be useful for others.
 	(c) Copyright 2000    Jakob Oestergaard <jakob@unthought.net>
            124 - 2000      [Initial revision]
            254 - 2000      Added devwatchdog support
            095 - 2001      [smj@oro.net] fixed fop_write to "return 1"
 					on success
            124 - 2002      [rob@osinvestor.com] eliminate fop_read
                             fix possible wdt_is_open race
                             add CONFIG_WATCHDOG_NOWAYOUT support
                             remove lock_kernelunlock_kernel pairs
                             added KERN_ to printk's
                             got rid of extraneous comments
                             changed watchdog_info to correctly reflect what
 			      the driver offers
 			      added WDIOC_GETSTATUS, WDIOC_GETBOOTSTATUS,
 			      WDIOC_SETTIMEOUT, WDIOC_GETTIMEOUT, and
 			      WDIOC_SETOPTIONS ioctls
            098 - 2003      [wim@iguana.be] cleanup of trailing spaces
                             use module_param
                             made timeout (the emulated heartbeat) a
 			      module_param
                             made the keepalive ping an internal subroutine
                             made wdt_stop and wdt_start module params
                             added extra printk's for startup problems
                             added MODULE_AUTHOR and MODULE_DESCRIPTION info
   This WDT driver is different from the other Linux WDT
   drivers in the following ways:
   )  The driver will ping the watchdog by itself, because this
       particular WDT has a very short timeout (one second) and it
       would be insane to count on any userspace daemon always
       getting scheduled within that time frame.
  You must set these - The driver cannot probe for the settings
  The 60xx board can use watchdog timeout values from one second
  to several minutes.  The default is one second, so if we reset
  the watchdog every ~250ms we should be safe.
  We must not require too good response from the userspace daemon.
  Here we require the userspace daemon to send us a heartbeat
  char to devwatchdog every 30 seconds.
  If the daemon pulses us every 25 seconds, we can still afford
  a 5 second scheduling delay on the (high priority) daemon. That
  should be sufficient for a box under any load.
 30 sec default timeout 
static int timeout = WATCHDOG_TIMEOUT;	 in seconds, multiplied by HZ to
 	Whack the dog
	 If we got a heartbeat pulse within the WDT_US_INTERVAL
	  we agree to ping the WDT
 Ping the WDT by reading from wdt_start 
 Re-set the timer interval 
  Utility routines
 Start the timer 
 Stop the timer 
 user land ping 
  devwatchdog handling
 See if we got the magic character 'V' and reload the timer 
			 note: just in case someone wrote the
			 scan to see whether or not we got the
		 Well, anyhow someone wrote to us, we should
 Just in case we're already talking to someone... 
 Good, fire up the show 
 arbitrary upper limit 
 	Notifier for system down
 	The WDT needs to learn about soft shutdowns in order to
 	turn the timebomb registers off.
 Deregister 
 arbitrary upper limit 
 We cannot reserve 0x45 - the kernel already has! 
 SPDX-License-Identifier: GPL-2.0-only
  Watchdog driver for Intel Keem Bay non-secure watchdog.
  Copyright (C) 2020 Intel Corporation
 Non-secure watchdog register offsets 
  SMC call is used to clear the interrupt bits, because the TIM_GEN_CONFIG
  register is in the secure bank.
 we do not need to enable the clock as it is enabled by default 
 SPDX-License-Identifier: GPL-2.0+
 	SoftDog:	A Software Watchdog Device
 	(c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,
 							All Rights Reserved.
 	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide
 	warranty for any of this software. This material is provided
 	"AS-IS" and at no charge.
 	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>
 	Software only watchdog driver. Unlike its big brother the WDT501P
 	driver this won't always recover a failed machine.
 Default is 60 seconds 
 in seconds 
 Should not reach here 
			
			  The 'kernel_restart' is a 'might-sleep' operation.
			  Also, executing it in system-wide workqueues blocks
			  any driver from using the same workqueue in its
			  shutdown callback function. Thus, we should execute
			  the 'kernel_restart' in a standalone kernel thread.
			  But since starting a kernel thread is also a
			  'might-sleep' operation, so the 'reboot_work' is
			  required as a launcher of the kernel thread.
			 
			  After request the reboot, restart the timer to
			  schedule an 'emergency_restart' reboot after
			  'TIMER_MARGIN' seconds. It's because if the softdog
			  hangs, it might be because of scheduling issues. And
			  if that is the case, both 'schedule_work' and
			  'kernel_restart' may possibly be malfunctional at the
			  same time.
 SPDX-License-Identifier: GPL-2.0-or-later
 	Watchdog Timer Driver
 	   for ITE IT87xx Environment Control - Low Pin Count Input  Output
 	(c) Copyright 2007  Oliver Schuster <olivers137@aol.com>
 	Based on softdog.c	by Alan Cox,
 		 83977f_wdt.c	by Jose Goncalves,
 		 it87.c		by Chris Gauthron, Jean Delvare
 	Data-sheets: Publicly available at the ITE website
 		    http:www.ite.com.tw
 	Support of the watchdog timers, which are available on
 	IT8607, IT8620, IT8622, IT8625, IT8628, IT8655, IT8665, IT8686,
 	IT8702, IT8712, IT8716, IT8718, IT8720, IT8721, IT8726, IT8728,
 	IT8772, IT8783 and IT8784.
 Defaults for Module Parameter 
 IO Ports 
 Logical device Numbers LDN 
 Configuration Registers and Functions 
 Chip Id numbers 
 the data sheet suggest wrongly 0x8716 
 GPIO Configuration Registers LDN=0x07 
 GPIO Bits WDTCFG 
 not in it8721 
 Superio Chip 
	
	  Try to reserve REG and REG + 1 for exclusive access.
 Internal function, should be called after superio_select(GPIO) 
 watchdog timer handling 
 	wdt_set_timeout - set a new timeout value with watchdog ioctl
 	@t: timeout value in seconds
 	The hardware device has a 8 or 16 bit watchdog timer (depends on
 	chip version) that can be configured to count seconds or minutes.
 	Used within WDIOC_SETTIMEOUT watchdog device ioctl.
 SPDX-License-Identifier: GPL-2.0-or-later
  RDC321x watchdog driver
  Copyright (C) 2007-2010 Florian Fainelli <florian@openwrt.org>
  This driver is highly inspired from the cpu5_wdt driver
 Mask 
 Enable bit 
 Generate CPU resetNMIWDT on timeout 
 Reset bit 
 WDT IRQ Flag 
 IRQ Routing table 
 WDT count 
 Clear timer 
 some device data 
 generic helper functions 
 keep watchdog alive 
 requeue?? 
 ticks doesn't matter anyway 
 Clear the timer 
 Enable watchdog and set the timeout to 81.92 us 
 if process dies, counter is not decremented 
 filesystem operations 
 Read the value from the DATA register 
 Reset the watchdog 
 SPDX-License-Identifier: GPL-2.0
  Watchdog driver for Renesas WDT watchdog
  Copyright (C) 2015-17 Wolfram Sang, Sang Engineering <wsa@sang-engineering.com>
  Copyright (C) 2015-17 Renesas Electronics Corporation
  In probe, clk_rate is checked to be not more than 16 bit  biggest clock
  divider (12 bits). d is only a factor to fully utilize the WDT counter and
  will not exceed its 16 bits. Thus, no overflow, we stay below 32 bits.
 d is 16 bit, clk_divs 12 bit -> no 32 bit overflow 
 Stop the timer before we modify any register 
 Delay 2 cycles before setting watchdog counter 
 Delay 3 cycles before disabling module clock 
 needs to be atomic - no RPM, no usleep_range, no scheduling! 
 Stop the timer before we modify any register 
 Delay 2 cycles before setting watchdog counter 
 smallest divider to reboot soon 
 wait 2 cycles, so watchdog will trigger 
  Watchdog-reset integration is broken on early revisions of R-Car Gen2 SoCs
 needs single CPU 
 needs single CPU 
 needs SMP disabled 
 sentinel  }
 !CONFIG_ARCH_RCAR_GEN2 || !CONFIG_SMP 
 !CONFIG_ARCH_RCAR_GEN2 || !CONFIG_SMP 
 This overrides the default timeout only if DT configuration was found 
 Check if FW enabled the watchdog 
 Ensure properly initialized dividers 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0+
  Watchdog driver for DA9063 PMICs.
  Copyright(c) 2012 Dialog Semiconductor Ltd.
  Author: Mariusz Wojtasik <mariusz.wojtasik@diasemi.com>
  Watchdog selector to timeout in seconds.
    0: WDT disabled;
    others: timeout = 2048 ms  2^(TWDSCALE-1).
  Read the currently active timeout.
  Zero means the watchdog is disabled.
	
	  The watchdog triggers a reboot if a timeout value is already
	  programmed because the timeout value combines two functions
	  in one: indicating the counter limit and starting the watchdog.
	  The watchdog must be disabled to be able to change the timeout
	  value if the watchdog is already running. Then we can set the
	  new timeout value which enables the watchdog again.
	
	  Prevent pings from occurring late in system poweroffreboot sequence
	  and possibly locking out restart handler from accessing i2c bus.
	
	  There are two cases when a set_timeout() will be called:
	  1. The watchdog is off and someone wants to set the timeout for the
	     further use.
	  2. The watchdog is already running and a new timeout value should be
	     set.
	 
	  The watchdog can't store a timeout value not equal zero without
	  enabling the watchdog, so the timeout must be buffered by the driver.
 Use pre-configured timeout if watchdog is already running. 
 Set timeout, maybe override it with DT value, scale it 
 Update timeout if the watchdog is already running. 
 SPDX-License-Identifier: GPL-2.0+
  Watchdog driver for Marvell Armada 37xx SoCs
  Author: Marek Behún <kabel@kernel.org>
  There are four counters that can be used for watchdog on Armada 37xx.
  The addresses for counter control registers are register base plus ID0x10,
  where ID is 0, 1, 2 or 3.
  In this driver we use IDs 0 and 1. Counter ID 1 is used as watchdog counter,
  while counter ID 0 is used to implement pinging the watchdog: counter ID 1 is
  set to restart counting from initial value on counter ID 0 end count event.
  Pinging is done by forcing immediate end count event on counter ID 0.
  If only one counter was used, pinging would have to be implemented by
  disabling and enabling the counter, leaving the system in a vulnerable state
  for a (really) short period of time.
  Counters ID 2 and 3 are enabled by default even before U-Boot loads,
  therefore this driver does not provide a way to use them, eg. by setting a
  property in device tree.
 relative to cpu_misc 
 relative to reg 
 in clock ticks 
	
	  when low is read, high is latched into flip-flops so that it can be
	  read consistently without using software debouncing
 set mode 
 set prescaler to the min value 
 set trigger source 
 counter 1 is retriggered by forcing end count on counter 0 
	
	  Compute the timeout in clock rate. We use smallest possible
	  prescaler, which divides the clock rate by 2
	  (CNTR_CTRL_PRESCALE_MIN).
 select counter 1 as watchdog counter 
 init counter 0 as retrigger counter for counter 1 
 init counter 1 to be retriggerable by counter 0 end count 
 enable counter 1 
 start counter 1 by forcing immediate end count on counter 0 
 init clock 
	
	  Since the timeout in seconds is given as 32 bit unsigned int, and
	  the counters hold 64 bit values, even after multiplication by clock
	  rate the counter can hold timeout of UINT_MAX seconds.
 default value, possibly override by module parameter or dtb 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2016 National Instruments Corp.
 Unlock WDT register 
 Lock WDT register 
 SPDX-License-Identifier: GPL-2.0-or-later
 	IndyDog	0.3	A Hardware Watchdog Device for SGI IP22
 	(c) Copyright 2002 Guido Guenther <agx@sigxcpu.org>,
 						All Rights Reserved.
 	based on softdog.c by Alan Cox <alan@lxorguk.ukuu.org.uk>
 30 sec default timeout 
 	Allow only one person to hold it open
 Activate timer 
	 Shut off the timer.
 Turn the WDT off 
 Refresh the timer. 
 Turn the WDT off 
 SPDX-License-Identifier: GPL-2.0+
  Watchdog driver for the wm831x PMICs
  Copyright (C) 2009 Wolfson Microelectronics
 We can't use the sub-second values here but they're included
 Seconds 
 WDOG_TO value 
 Actually 32.768s so include both, others round down 
 Apply any configuration 
  Watchdog driver for Cirrus Logic EP93xx family of devices.
  Copyright (c) 2004 Ray Lehtiniemi
  Copyright (c) 2006 Tower Technologies
  Based on ep93xx driver, bits from alim7101_wdt.c
  Authors: Ray Lehtiniemi <rayl@mail.com>,
 	Alessandro Zummo <a.zummo@towertech.it>
  Copyright (c) 2012 H Hartley Sweeten <hsweeten@visionengravers.com>
 	Convert to a platform device and use the watchdog framework API
  This file is licensed under the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
  This watchdog fires after 250msec, which is a too short interval
  for us to rely on the user space daemon alone. So we ping the
  wdt each ~200msec and eventually stop doing it if the user space
  daemon dies.
 default timeout (secs) 
 SPDX-License-Identifier: GPL-2.0-only
  ACPI Hardware Watchdog (WDAT) driver.
  Copyright (C) 2016, Intel Corporation
  Author: Mika Westerberg <mika.westerberg@linux.intel.com>
  struct wdat_instruction - Single ACPI WDAT instruction
  @entry: Copy of the ACPI table instruction
  @reg: Register the instruction is accessing
  @node: Next instruction in action sequence
  struct wdat_wdt - ACPI WDAT watchdog device
  @pdev: Parent platform device
  @wdd: Watchdog core device
  @period: How long is one watchdog period in ms
  @stopped_in_sleep: Is this watchdog stopped by the firmware in S1-S5
  @stopped: Was the watchdog stopped by the driver in suspend
  @instructions: An array of instruction lists indexed by an action number from
                 the WDAT table. There can be %NULL entries for not implemented
                 actions.
 Run each instruction sequentially 
	
	  WDAT specification says that the watchdog is required to reboot
	  the system when it fires. However, it also states that it is
	  recommended to make it configurable through hardware register. We
	  enable reboot now if it is configurable, just in case.
 Clear the boot status in case BIOS did not do it 
 WDAT specification wants to have >= 1ms period 
 Request and map all resources 
 Find the matching resource 
	
	  Set initial timeout so that userspace has time to configure the
	  watchdog properly after it has opened the device. In some cases
	  the BIOS default is too short and causes immediate reboot.
	
	  We need to stop the watchdog if firmware is not doing it or if we
	  are going suspend to idle (where firmware is not involved). If
	  firmware is stopping the watchdog we kick it here one more time
	  to give it some time.
		
		  Looks like the boot firmware reinitializes the watchdog
		  before it hands off to the OS on resume from sleep so we
		  stop and reprogram the watchdog here.
 SPDX-License-Identifier: GPL-2.0-only
  VIA Chipset Watchdog Driver
  Copyright (C) 2011 Sigfox
  Author: Marc Vertes <marc.vertes@sigfox.com>
  Based on a preliminary version from Harald Welte <HaraldWelte@viatech.com>
  Timer code by Wim Van Sebroeck <wim@iguana.be>
  Caveat: PnP must be enabled in BIOS to allow full access to watchdog
  control registers. If not, the watchdog must be configured in BIOS manually.
 Configuration registers relative to the pci device 
 MMIO region base address 
 watchdog enable state 
 Relevant bits for the VIA_WDT_CONF register 
 1: enable watchdog 
 1: enable watchdog MMIO 
  The MMIO region contains the watchdog control register and the
  hardware timer counter.
 MMIO region length in bytes 
 MMIO addr+0: statecontrol reg. 
 MMIO addr+4: timer counter reg. 
 Bits for the VIA_WDT_CTL register 
 0: stop, 1: running 
 1: restarted by expired watchdog 
 0: reset, 1: poweroff 
 1: timer is disabled 
 1: start a new countdown 
 Hardware heartbeat in seconds 
 Timer heartbeat (500ms) 
 should be <= ((WDT_HW_HEARTBEATHZ)2) 
 User space timeout in seconds 
 approx. 17 min. 
 The timer that pings the watchdog 
 the next_heartbeat for the timer 
  Timer tick: the timer will make sure that the watchdog timer hardware
  is being reset in time. The conditions to do this are:
   1) the watchdog timer has been started and devwatchdog is open
      and there is still time left before userspace should send the
      next heartbeatping. (note: the internal heartbeat is much smaller
      then the externaluserspace heartbeat).
   2) the watchdog timer has been stopped by userspace.
 calculate when the next userspace timeout will be 
	
	  Allocate a MMIO region which contains watchdog control register
	  and counter, then configure the watchdog to use this region.
	  This is possible only if PnP is properly enabled in BIOS.
	  If not, the watchdog must be configured in BIOS manually.
 start triggering, in case of watchdog already enabled by BIOS 
  Watchdog driver for Technologic Systems TS-72xx based SBCs
  (TS-7200, TS-7250 and TS-7260). These boards have external
  glue logic CPLD chip, which includes programmable watchdog
  timer.
  Copyright (c) 2009 Mika Westerberg <mika.westerberg@iki.fi>
  This driver is based on ep93xx_wdt and wm831x_wdt drivers.
  This file is licensed under the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
 priv->control_reg 
 priv->feed_reg 
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2015 Broadcom Corporation
 seconds 
 seconds 
	 MIPS chips strapped for BE will automagically configure the
	  peripheral registers for CPU-native byte order.
 Can't modify timeout value if watchdog timer is running 
 If unable to get clock, use default frequency 
 Prevent divide-by-zero exception 
 SPDX-License-Identifier: GPL-2.0
	
	  The pm8916-pon-wdt is a child of the pon device, which is a child
	  of the pm8916 mfd device. We want access to the pm8916 registers.
	  Retrieve regmap from pm8916 (parent->parent) and base address
	  from pm8916-pon (pon).
 Configure watchdog to hard-reset mode 
 SPDX-License-Identifier: GPL-2.0-or-later
   MEN 14F021P00 Board Management Controller (BMC) Watchdog Driver.
   Copyright (C) 2014 MEN Mikro Elektronik Nuernberg GmbH
 in sec 
 in sec 
	
	   BMC Watchdog does have a resolution of 100ms.
	   Watchdog API defines the timeout in seconds, so we have to
	   multiply the value.
	
	  Get the current wdt timeout value from the BMC because
	  the BMC will save the value set before if the system restarts.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2015-2016 Mentor Graphics
  pretimeout_noop - No operation on watchdog pretimeout event
  @wdd - watchdog_device
  This function prints a message about pretimeout to kernel log.
 SPDX-License-Identifier: GPL-2.0-only
  Spreadtrum watchdog driver
  Copyright (C) 2017 Spreadtrum - http:www.spreadtrum.com
 WDT_CTRL 
 WDT_INT_CLR 
 WDT_INT_RAW 
 1s equal to 32768 counter steps 
	
	  Checking busy bit to make sure the previous loading operation is
	  done. According to the specification, the busy bit would be set
	  after a new loading operation and last 2 or 3 RTC clock
	  cycles (about 60us~92us).
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2004 Simtec Electronics
 	Ben Dooks <ben@simtec.co.uk>
  S3C2410 Watchdog Timer Support
  Based on, softdog.c by Alan Cox,
      (c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>
 These quirks require that we have a PMU register map 
  struct s3c2410_wdt_variant - Per-variant config data
  @disable_reg: Offset in pmureg for the register that disables the watchdog
  timer reset functionality.
  @mask_reset_reg: Offset in pmureg for the register that masks the watchdog
  timer reset functionality.
  @mask_bit: Bit number for the watchdog timer in the disable register and the
  mask reset register.
  @rst_stat_reg: Offset in pmureg for the register that has the reset status.
  @rst_stat_bit: Bit number in the rst_stat register indicating a watchdog
  reset.
  @quirks: A bitfield of quirks.
 A57 WDTRESET 
 functions 
 No need to do anything if no PMU CONFIG needed 
	 if the count is bigger than the watchdog register,
	   then work out what we need to do (and if) we can
	   actually make this value
 update the pre-scaler 
 disable watchdog, to be safe  
 put initial values into count and data 
 set the watchdog to go and reset... 
 wait for reset to assert... 
 interrupt handler code 
		 To ensure that over the change we don't cause the
		  watchdog to trigger, we perform an keep-alive if
		  the watchdog is running.
 Device matched by platform_device_id 
 get the memory region for the watchdog timer 
	 see if we can actually set the requested timer margin, and if
		 if we're not enabling the watchdog, then ensure it is
		  disabled if it has been left running from the bootloader
 print out a statement of readiness 
 Save watchdog state, and turn it off. 
 Note that WTCNT doesn't need to be saved. 
 Restore watchdog state. 
 Reset count 
  Realtek RTD129x watchdog
  Copyright (c) 2017 Andreas Färber
  SPDX-License-Identifier: GPL-2.0+
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2018 Nuvoton Technology corporation.
 Copyright (c) 2018 IBM Corp.
 Clock divider 
 Enable 
 Enable irq 
 Interval selection 
 Interrupt flag
 Reset flag 
 Reset enable 
 Reset counter 
  Watchdog timeouts
  170     msec:    WTCLK=01 WTIS=00     VAL= 0x400
  670     msec:    WTCLK=01 WTIS=01     VAL= 0x410
  1360    msec:    WTCLK=10 WTIS=00     VAL= 0x800
  2700    msec:    WTCLK=01 WTIS=10     VAL= 0x420
  5360    msec:    WTCLK=10 WTIS=01     VAL= 0x810
  10700   msec:    WTCLK=01 WTIS=11     VAL= 0x430
  21600   msec:    WTCLK=10 WTIS=10     VAL= 0x820
  43000   msec:    WTCLK=11 WTIS=00     VAL= 0xC00
  85600   msec:    WTCLK=10 WTIS=11     VAL= 0x830
  172000  msec:    WTCLK=11 WTIS=01     VAL= 0xC10
  687000  msec:    WTCLK=11 WTIS=10     VAL= 0xC20
  2750000 msec:    WTCLK=11 WTIS=11     VAL= 0xC30
 Ensure timeout is able to be represented by the hardware 
 Restart with the default or device-tree specified timeout 
 SPDX-License-Identifier: GPL-2.0-or-later
 	W83977F Watchdog Timer Driver for Winbond W83977F IO Chip
 	(c) Copyright 2005  Jose Goncalves <jose.goncalves@inov.pt>
       Based on w83877f_wdt.c by Scott Jennings,
            and wdt977.c by Woody Suwalski
 			-----------------------
 default timeout in seconds 
 timeout in watchdog counter units 
  Start the watchdog
 Unlock the SuperIO chip 
	
	  Select device Aux2 (device=8) to set watchdog regs F2, F3 and F4.
	  F2 has the timeout in watchdog counter units.
	  F3 is set to enable watchdog LED blink at timeout.
	  F4 is used to just clear the TIMEOUT'ed state (bit 0).
 Set device Aux2 active 
	
	  Select device Aux1 (dev=7) to set GP16 as the watchdog output
	  (in reg E6) and GP13 as the watchdog LED output (in reg E3).
	  Map GP16 at pin 119.
	  In test mode watch the bit 0 on F4 to indicate "triggered" or
	  check watchdog LED on SBC.
 Set device Aux1 active 
 Lock the SuperIO chip 
  Stop the watchdog
 Unlock the SuperIO chip 
	
	  Select device Aux2 (device=8) to set watchdog regs F2, F3 and F4.
	  F2 is reset to its default value (watchdog timer disabled).
	  F3 is reset to its default state.
	  F4 clears the TIMEOUT'ed state (bit 0) - back to default.
	
	  Select device Aux1 (dev=7) to set GP16 (in reg E6) and
	  Gp13 (in reg E3) as inputs.
 Lock the SuperIO chip 
  Send a keepalive ping to the watchdog
  This is done by simply re-writing the timeout to reg. 0xF2
 Unlock the SuperIO chip 
 Select device Aux2 (device=8) to kick watchdog reg F2 
 Lock the SuperIO chip 
  Set the watchdog timeout value
	
	  Convert seconds to watchdog counter time units, rounding up.
	  On PCM-5335 watchdog units are 30 secondsstep with 15 sec startup
	  value. This information is supplied in the PCM-5335 manual and was
	  checked by me on a real board. This is a bit strange because W83977f
	  datasheet says counter unit is in minutes!
	
	  timeout is the timeout in seconds,
	  timeoutW is the timeout in watchdog counter units.
  Get the watchdog status
 Unlock the SuperIO chip 
 Select device Aux2 (device=8) to read watchdog reg F4 
 Lock the SuperIO chip 
 	devwatchdog handling
 If the watchdog is alive we don't need to start it again 
	
	  Shut off the timer.
	  Lock it in if it's a module and we set nowayout
       wdt_write:
       @file: file handle to the watchdog
       @buf: buffer to write (unused as data does not matter here
       @count: count of bytes
       @ppos: pointer to the position to write. No seeks allowed
       A write to a watchdog device is defined as a keepalive signal. Any
       write of data will do, as we we don't define content meaning.
 See if we got the magic character 'V' and reload the timer 
			 note: just in case someone wrote the
			 scan to see whether or not we got the
 someone wrote to us, we should restart timer 
       wdt_ioctl:
       @inode: inode of the device
       @file: file handle to the device
       @cmd: watchdog command
       @arg: argument pointer
       The watchdog API defines a common set of functions for all watchdogs
       according to their available features.
	
	  Check that the timeout value is within it's range;
	  if not reset to the default
 SPDX-License-Identifier: GPL-2.0+
 	w83627hfthf WDT driver
 	(c) Copyright 2013 Guenter Roeck
 		converted to watchdog infrastructure
 	(c) Copyright 2007 Vlad Drukker <vlad@storewiz.com>
 		added support for W83627THF.
 	(c) Copyright 2003,2007 Pádraig Brady <P@draigBrady.com>
 	Based on advantechwdt.c which is based on wdt.c.
 	Original copyright messages:
 	(c) Copyright 2000-2001 Marek Michalkiewicz <marekm@linux.org.pl>
 	(c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,
 						All Rights Reserved.
 	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide
 	warranty for any of this software. This material is provided
 	"AS-IS" and at no charge.
 	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>
 60 sec default timeout 
 WDT timeout register 
 WDT control register 
 WDT control & status register 
 key to unlock configuration space 
 key to lock configuration space 
 in seconds 
 	Kernel methods.
 Extended Function Enable Registers 
#define WDT_EFIR (wdt_io+0)    Extended Function Index Register
 Extended Function Data Register 
 also NCT9697D, NCT9698D 
 Enter extended function mode 
 Again according to manual 
 Leave extended function mode 
 set CR30 bit 0 to activate GPIO2 
 set GPIO24 to WDT0 
 Set pin 119 to WDTO# mode (= CR29, WDT0) 
 Set pin 118 to WDTO# mode 
 set GPIO3 to WDT0 
 PIN77 -> WDT0# 
 set GPIO5 to WDT0 
		t |= 0x02;	 enable the WDTO# output low pulse
 PIN47 -> WDT0# 
		
		  These chips have a fixed WDTO# output pin (W83627UHG),
		  or support more than one WDTO# output pin.
		  Don't touch its configuration, and hope the BIOS
		  does the right thing.
		t |= 0x02;	 enable the WDTO# output low pulse
 set second mode & disable keyboard turning off watchdog 
 reset trigger, disable keyboard & mouse turning off watchdog 
 	Kernel Interfaces
 	The WDT needs to learn about soft shutdowns in order to
 	turn the timebomb registers off.
  On some systems, the NCT6791D comes with a companion chip and the
  watchdog function is in this companion chip. We must use a different
  unlocking sequence to access the companion chip.
 Apply system-specific quirks 
 SPDX-License-Identifier: GPL-2.0+
  Mellanox watchdog driver
  Copyright (C) 2019 Mellanox Technologies
  Copyright (C) 2019 Michael Shych <mshych@mellanox.com>
  struct mlxreg_wdt - wd private data:
  @wdd:	watchdog device;
  @device:	basic device;
  @pdata:	data received from platform driver;
  @regmap:	register map of parent device;
  @timeout:	defined timeout in sec.;
  @action_idx:	index for direct access to action register;
  @timeout_idx:index for direct access to TO register;
  @tleft_idx:	index for direct access to time left register;
  @ping_idx:	index for direct access to ping register;
  @reset_idx:	index for direct access to reset cause register;
  @wd_type:	watchdog HW type;
 Rowndown to actual closest number of sec. 
 WD_TYPE3 has 2B set time register 
		
		  Restart watchdog with new timeout period
		  if watchdog is already started.
 WD_TYPE3 has 2 byte timeleft register 
 Return 0 timeleft in case of failure register read. 
 SPDX-License-Identifier: GPL-2.0
  Watchdog driver for IMX2 and later processors
   Copyright (C) 2010 Wolfram Sang, Pengutronix e.K. <kernel@pengutronix.de>
   Copyright (C) 2014 Freescale Semiconductor, Inc.
  some parts adapted by similar drivers from Darius Augulis and Vladimir
  Zapolskiy, additional improvements by Wim Van Sebroeck.
  NOTE: MX1 has a slightly different Watchdog than MX2 and later:
 			MX1:		MX2+:
 			----		-----
  Registers:		32-bit		16-bit
  Stopable timer:	Yes		No
  Need to enable clk:	No		Yes
  Halt on suspend:	Manual		Can be automatic
 Control Register 
 -> Watchdog Timeout Field 
 -> External Reset WDOG_B 
 -> Software Reset Signal 
 -> WDOG Reset Enable 
 -> Watchdog Enable 
 -> Watchdog timer Suspend 
 Service Register 
 -> service sequence 1 
 -> service sequence 2 
 Reset Status Register 
 -> Reset due to Timeout 
 Interrupt Control Register 
 -> Interrupt Enable 
 -> Interrupt Status 
 -> Interrupt Count Timeout 
 Misc Register 
 in seconds 
 Use internal reset or external - not both 
 do not assert int reset 
 do not assert ext-reset 
 Assert SRS signal 
	
	  Due to imx6q errata ERR004346 (WDOG: WDOG SRS bit requires to be
	  written twice), we add another two writes to ensure there must be at
	  least two writes happen in the same one 32kHz clock period.  We save
	  the target check here, since the writes shouldn't be a huge burden
	  for other platforms.
 wait for reset to assert... 
 Suspend timer in low power mode, write once-only 
 Strip the old watchdog Time-Out value 
 Generate internal chip-level reset if WDOG times out 
 Or if external-reset assert WDOG_B reset only on time-out 
 Keep Watchdog Disabled 
 Set the watchdog's Time-Out value 
 enable the watchdog 
	
	  Disable the watchdog power down counter at boot. Otherwise the power
	  down counter will pull down the #WDOG interrupt line for one clock
	  cycle.
		
		  We are running, configure max timeout before reboot
		  will take place.
 Disable watchdog if it is active or non-active but still running 
 The watchdog IP block is running 
		
		  Don't update wdog->timeout, we'll restore the current value
		  during resume.
 Enable watchdog and configure it if necessary 
		
		  If the watchdog is still active and resumes
		  from deep sleep state, need to restart the
		  watchdog again.
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
  Watchdog driver for the K3 RTI module
  (c) Copyright 2019-2020 Texas Instruments Inc.
  All rights reserved.
 Max heartbeat is calculated at 32kHz source clock 
 Timer register set definition 
  struct to hold data for each WDT device
  @base - base io address of WD device
  @freq - source clock frequency of WDT
  @wdd  - hold watchdog device as is in WDT core
 set timeout period 
	
	  RTI only supports a windowed mode, where the watchdog can only
	  be petted during the open window; not too early or not too late.
	  The HW configuration options only allow for the open window size
	  to be 50% or less than that; we obviouly want to configure the open
	  window as large as possible so we select the 50% option.
 Generate NMI when wdt expires 
 Open window size 50%; this is the largest window size available 
 enable watchdog 
 put watchdog in service state 
 put watchdog in active state 
	
	  RTI only supports a windowed mode, where the watchdog can only
	  be petted during the open window; not too early or not too late.
	  The HW configuration options only allow for the open window size
	  to be 50% or less than that.
 50% open window => 50% min heartbeat 
 25% open window => 75% min heartbeat 
 12.5% open window => 87.5% min heartbeat 
 6.5% open window => 93.5% min heartbeat 
 3.125% open window => 96.9% min heartbeat 
 if timeout has occurred then return 0 
	
	  If watchdog is running at 32k clock, it is not accurate.
	  Adjust frequency down in this case so that we don't pet
	  the watchdog too often.
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2020 TOSHIBA CORPORATION
  Copyright (c) 2020 Toshiba Electronic Devices & Storage Corporation
  Copyright (c) 2020 Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>
 2MHz 
 in seconds 
 Clear counter before setting timeout because WDT expires 
 Initialize struct watchdog_device. 
 This overrides the default timeout only if DT configuration was found 
 SPDX-License-Identifier: GPL-2.0-only
  PIKA FPGA based Watchdog Timer
  Copyright (c) 2008 PIKA Technologies
    Sean MacLennan <smaclennan@pikatech.com>
 Hardware timeout in seconds 
 Timer heartbeat (500ms) 
 User land timeout 
 the next_heartbeat for the timer 
 The timer that pings the watchdog 
  Reload the watchdog timer.  (ie, pat the watchdog)
	 -- FPGA: Reset Control Register (32bit RW) (Offset: 0x14) --
	  Bit 7,    WTCHDG_EN: When set to 1, the watchdog timer is enabled.
	            Once enabled, it cannot be disabled. The watchdog can be
	            kicked by performing any write access to the reset
	            control register (this register).
	  Bit 8-11, WTCHDG_TIMEOUT_SEC: Sets the watchdog timeout value in
	            seconds. Valid ranges are 1 to 15 seconds. The value can
	            be modified dynamically.
 enable with max timeout - 15 seconds 
  Timer tick
  Watchdog device is opened, and watchdog starts running.
 devwatchdog can only be opened once 
  Close the watchdog device.
 stop internal ping 
  Pat the watchdog whenever device is written to.
 Scan for magic character 
  Handle commands from user-space.
 return current value 
 POST information is in the sd area. 
	 -- FPGA: POST Test Results Register 1 (32bit RW) (Offset: 0x4040) --
	  Bit 31,   WDOG: Set to 1 when the last reset was caused by a watchdog
	            timeout.
 SPDX-License-Identifier: GPL-2.0-or-later
 	nv_tco 0.01:	TCO timer driver for NV chipsets
 	(c) Copyright 2005 Google Inc., All Rights Reserved.
 	Based off i8xx_tco.c:
 	(c) Copyright 2000 kernel concepts <nils@kernelconcepts.de>, All Rights
 	Reserved.
 				https:www.kernelconcepts.de
 	TCO timer driver for NV chipsets
 	based on softdog.c by Alan Cox <alan@redhat.com>
 	Includes, defines, variables, module parameters, ...
 Module and version information 
 internal variables 
 Guards the hardware 
 the watchdog platform device 
 module parameters 
 30 sec default heartbeat (2<heartbeat<39) 
 in seconds 
  Some TCO specific functions
	 the internal timer is stored as ticks which decrement
	
	  note seconds_to_ticks(t) > t, so if t > 0x3f, so is
	  tmrval=seconds_to_ticks(t).  Check that the count in seconds isn't
	  out of range on it's own (to avoid overflow in tmrval).
 "Values of 0h-3h are ignored and should not be attempted" 
 Write new heartbeat to watchdog 
 	devwatchdog handling
 devwatchdog can only be opened once 
 Reload and activate timer 
 Shut off the timer 
 See if we got the magic character 'V' and reload the timer 
			
			  note: just in case someone wrote the magic character
			  five months ago...
			
			  scan to see whether or not we got the magic
			  character
 someone wrote to us, we should reload the timer 
 	Kernel Interfaces
  Data for PCI driver interface
  This data only exists for exporting the supported
  PCI ids via MODULE_DEVICE_TABLE.  We do not actually
  register a pci_driver, because someone else might one day
  want to register another driver on the same PCI id.
 End of list 
 	Init & exit routines
 Find the PCI device 
 Find the base io port 
 Something is wrong here, bar isn't setup 
 Set a reasonable heartbeat before we stop the timer 
	
	  Stop the TCO before we change anything so we don't race with
	  a zeroed timer.
 Disable SMI caused by TCO 
 Check chipset's NO_REBOOT bit 
 Check whether or not the hardware watchdog is there 
 Check to see if last reboot was due to watchdog timeout 
 Clear out the old status 
	
	  Check that the heartbeat value is within it's range.
	  If not, reset to the default.
 Stop the timer before we leave 
 Set the NO_REBOOT bit to prevent later reboots, just for sure 
 Deregister 
	 Some BIOSes fail the POST (once) if the NO_REBOOT flag is not
 SPDX-License-Identifier: GPL-2.0
  Watchdog driver for the RTC based watchdog in STMP3xxx and i.MX2328
  Author: Wolfram Sang <kernel@pengutronix.de>
  Copyright (C) 2011-12 Wolfram Sang, Pengutronix
 1 kHz clock 
 keep enabled, system might crash while going down 
 allow the system to actually halt 
 SPDX-License-Identifier: GPL-2.0
  Driver for STM32 Independent Watchdog
  Copyright (C) STMicroelectronics 2017
  Author: Yannick Fertre <yannick.fertre@st.com> for STMicroelectronics.
  This driver is based on tegra_wdt.c
 IWDG registers 
 Key register 
 Prescaler Register 
 ReLoad Register 
 Status Register 
 Windows Register 
 IWDG_KR register bit mask 
 reload counter enable 
 peripheral enable 
 write access enable 
 write access disable 
 IWDG_PR register 
 IWDG_RLR register values 
 min value recommended 
 max value of reload register 
 IWDG_SR register bit mask 
 Watchdog prescaler value update 
 Watchdog counter reload value update 
 set timeout to 100000 us 
 The prescaler is align on power of 2 and start at 2 ^ PR_SHIFT. 
 enable write access 
 set prescaler & reload registers 
 wait for the registers to be updated (max 100ms) 
 reload watchdog 
 reload watchdog 
 optional peripheral clock 
 end node  }
 This is the timer base. 
 Initialize struct watchdog_device. 
	
	  In case of CONFIG_WATCHDOG_HANDLE_BOOT_ENABLED is set
	  (Means U-Bootbootloaders leaves the watchdog running)
	  When we get here we should make a decision to prevent
	  any side effects before user space daemon will take care of it.
	  The best option, taking into consideration that there is no
	  way to read values back from hardware, is to enforce watchdog
	  being run with deterministic values.
 Make sure the watchdog is serviced 
 SPDX-License-Identifier: GPL-2.0-only
  Ralink MT7621MT7628 built-in hardware watchdog timer
  Copyright (C) 2014 John Crispin <john@phrozen.org>
  This driver was based on: driverswatchdogrt2880_wdt.c
 set the prescaler to 1ms == 1000us 
		
		  Make sure to apply timeout from watchdog core, taking
		  the prescaler of this driver here into account (the
		  boot loader might be using a different prescaler).
		 
		  To avoid spurious resets because of different scaling,
		  we first disable the watchdog, set the new prescaler
		  and timeout, and then re-enable the watchdog.
 SPDX-License-Identifier: GPL-2.0-only
 	HPE WatchDog Driver
 	based on
 	SoftDog	0.05:	A Software Watchdog Device
 	(c) Copyright 2018 Hewlett Packard Enterprise Development LP
 	Thomas Mingarelli <thomas.mingarelli@hpe.com>
 in seconds 
 the PCI-memory address 
 iLO2 
 iLO3 
 PCtrl 
 terminate list 
 auxilary iLO 
 CL 
 terminate list 
 	Watchdog operations
 	NMI Handler
 CONFIG_HPWDT_NMI_DECODING 
 	Kernel interfaces
 	Init & Exit
	
	  Only one function can register for NMI_UNKNOWN
 CONFIG_HPWDT_NMI_DECODING 
	
	  First let's find out if we are on an iLO2+ server. We will
	  not run on a legacy ASM box.
	  So we only support the G5 ProLiant servers and higher.
 Have the core update running timer until user space is ready 
 Initialize NMI Decoding functionality 
 SPDX-License-Identifier: GPL-2.0-only
  Ralink RT288xRT3xxxMT76xx built-in hardware watchdog timer
  Copyright (C) 2011 Gabor Juhos <juhosg@openwrt.org>
  Copyright (C) 2013 John Crispin <john@phrozen.org>
  This driver was based on: driverswatchdogsoftdog.c
 SPDX-License-Identifier: GPL-2.0-or-later
 	Intel 21285 watchdog driver
 	Copyright (c) Phil Blundell <pb@nexus.co.uk>, 1998
 	based on
 	SoftDog	0.05:	A Software Watchdog Device
 	(c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,
 						All Rights Reserved.
  Define this to stop the watchdog actually rebooting the machine.
 in seconds 
 	If the timer expires..
 	Refresh the timer.
 	Allow only one person to hold it open
	
	  Setting this bit is irreversible; once enabled, there is
	  no way to disable the watchdog.
 	Shut off the timer.
 	Note: if we really have enabled the watchdog, there
 	is no way to turn off.
	
	 	Refresh the timer.
 Arbitrary, can't find the card's limits 
  Watchdog driver for SBC-FITPC2 board
  Author: Denis Turischev <denis@compulab.co.il>
  Adapted from the IXP2000 watchdog driver by Deepak Saxena.
  This file is licensed under  the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
 (secs) Default is 1 minute 
  driverscharwatchdogsp805-wdt.c
  Watchdog driver for ARM SP805 watchdog module
  Copyright (C) 2010 ST Microelectronics
  Viresh Kumar <vireshk@kernel.org>
  This file is licensed under the terms of the GNU General Public
  License version 2 or later. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
 default timeout in seconds 
 watchdog register offsets and masks 
 control register masks 
  struct sp805_wdt: sp805 wdt device structure
  @wdd: instance of struct watchdog_device
  @lock: spin lock protecting dev structure and io access
  @base: base address of wdt
  @clk: (optional) clock structure of wdt
  @rate: (optional) clock rate when provided via properties
  @adev: amba device structure of wdt
  @status: current status of wdt
  @load_val: load value to be set for current timeout
 returns true if wdt is running; otherwise returns false 
 This routine finds load value that will reset system in required timout 
	
	  sp805 runs counter with given value twice, after the end of first
	  counter it gives an interrupt and then starts counter again. If
	  interrupt already occurred then it resets the system. This is why
	  load is half of what should be required.
 roundup timeout to closest positive integer value 
 returns number of seconds left for reset to occur 
If the interrupt is inactive then time left is WDTValue + WDTLoad. 
 Flush posted writes. 
 Flush posted writes. 
 enables watchdog timers reset 
 disables watchdog timers reset 
 Flush posted writes. 
	
	  When driver probe with ACPI device, clock devices
	  are not available, so watchdog rate get from
	  clock-frequency property given in _DSD object.
	
	  If 'timeout-sec' devicetree property is specified, use that.
	  Otherwise, use DEFAULT_TIMEOUT
	
	  If HW is already running, enablereset the wdt and set the running
	  bit to tell the wdt subsystem
 SPDX-License-Identifier: GPL-2.0+
 	sch311x_wdt.c - Driver for the SCH311x Super-IO chips
 			integrated watchdog.
 	(c) Copyright 2008 Wim Van Sebroeck <wim@iguana.be>.
 	Neither Wim Van Sebroeck nor Iguana vzw. admit liability nor
 	provide warranty for any of this software. This material is
 	provided "AS-IS" and at no charge.
 	Includes, defines, variables, module parameters, ...
 Includes 
 For module specific items 
 For new moduleparam's 
 For standard types (like size_t) 
 For the -ENODEV... values 
 For printk... 
 For struct miscdevice 
 For the watchdog specific items 
 For __init__exit... 
 For file operations 
 For platform_driver framework 
 For io-port access 
 For spin_lockspin_unlock... 
 For copy_to_userput_user... 
 For inboutb... 
 Module and version information 
 Runtime registers 
 internal variables 
 The devices private data 
 the Runtime Register base address 
 The card's boot status 
 the lock for io operations 
 Module load parameters 
 60 sec default timeout 
 in seconds 
 	Super-IO functions
 	Watchdog Operations
 When new timeout is bigger then 255 seconds, we will use minutes 
	 -- Watchdog Timeout --
	  Bit 0-6 (Reserved)
	  Bit 7   WDT Time-out Value Units Select
	          (0 = Minutes, 1 = Seconds)
	 -- Watchdog Timer Time-out Value --
	  Bit 0-7 Binary coded units (0=Disabled, 1..255)
 set watchdog's timeout 
 enable the watchdog 
	 -- General Purpose IO Bit 6.0 --
	  Bit 0,   InOut: 0 = Output, 1 = Input
	  Bit 1,   Polarity: 0 = No Invert, 1 = Invert
	  Bit 2-3, Function select: 00 = GPIO, 01 = LED1, 11 = WDT,
	                            10 = Either Edge Triggered Intr.4
	  Bit 4-6  (Reserved)
	  Bit 7,   Output Type: 0 = Push Pull Bit, 1 = Open Drain
 stop the watchdog 
 disable timeout by setting it to 0 
	 When new timeout is bigger then 255 seconds,
	 -- Watchdog timer control --
	  Bit 0   Status Bit: 0 = Timer counting, 1 = Timeout occurred
	  Bit 1   Reserved
	  Bit 2   Force Timeout: 1 = Forces WD timeout event (self-cleaning)
	  Bit 3   P20 Force Timeout enabled:
	           0 = P20 activity does not generate the WD timeout event
	           1 = P20 Allows rising edge of P20, from the keyboard
	               controller, to force the WD timeout event.
	  Bit 4-7 Reserved
 	devwatchdog handling
	
	 	Activate
 	Kernel Interfaces
 	Init & exit routines
 Make sure that the watchdog is not running 
 Disable keyboard and mouse interaction and interrupt 
	 -- Watchdog timer configuration --
	  Bit 0   Reserved
	  Bit 1   Keyboard enable: 0 = No Reset, 1 = Reset WDT upon KBD Intr.
	  Bit 2   Mouse enable: 0 = No Reset, 1 = Reset WDT upon Mouse Intr
	  Bit 3   Reserved
	  Bit 4-7 WDT Interrupt Mapping: (0000 = Disabled,
	             0001=IRQ1, 0010=(Invalid), 0011=IRQ3 to 1111=IRQ15)
	 Check that the heartbeat value is within it's range ;
 Get status at boot 
 Stop the timer before we leave 
 Deregister 
 Turn the WDT off if we have a soft shutdown 
	 Check device ID. We currently know about:
 Select logical device A (runtime registers) 
 Check if Logical Device Register is currently active 
 Get the base address of the runtime registers 
 SPDX-License-Identifier: GPL-2.0-or-later
 	SBC EPX C3 0.1	A Hardware Watchdog Device for the Winsystems EPX-C3
 	single board computer
 	(c) Copyright 2006 Calin A. Culianu <calin@ajvar.org>, All Rights
 	Reserved.
 	based on softdog.c by Alan Cox <alan@lxorguk.ukuu.org.uk>
 1 sec default timeout 
 write 1 to enable, 0 to disable 
 write anything to pet once enabled 
 	Allow only one person to hold it open
 Activate timer 
	 Shut off the timer.
 Turn the WDT off 
 Refresh the timer. 
 Turn the WDT off 
 SPDX-License-Identifier: GPL-2.0-only
  SBSA(Server Base System Architecture) Generic Watchdog driver
  Copyright (c) 2015, Linaro Ltd.
  Author: Fu Wei <fu.wei@linaro.org>
          Suravee Suthikulpanit <Suravee.Suthikulpanit@amd.com>
          Al Stone <al.stone@linaro.org>
          Timur Tabi <timur@codeaurora.org>
  ARM SBSA Generic Watchdog has two stage timeouts:
  the first signal (WS0) is for alerting the system by interrupt,
  the second one (WS1) is a real hardware reset.
  More details about the hardware specification of this device:
  ARM DEN0029B - Server Base System Architecture (SBSA)
  This driver can operate ARM SBSA Generic Watchdog as a single stage watchdog
  or a two stages watchdog, it's set up by the module parameter "action".
  In the single stage mode, when the timeout is reached, your system
  will be reset by WS1. The first signal (WS0) is ignored.
  In the two stages mode, when the timeout is reached, the first signal (WS0)
  will trigger panic. If the system is getting into trouble and cannot be reset
  by panic or restart properly by the kdump kernel(if supported), then the
  second stage (as long as the first stage) will be reached, system will be
  reset by WS1. This function can help administrator to backup the system
  context info by panic console output or kdump.
  SBSA GWDT:
  if action is 1 (the two stages mode):
  |--------WOR-------WS0--------WOR-------WS1
  |----timeout-----(panic)----timeout-----reset
  if action is 0 (the single stage mode):
  |------WOR-----WS0(ignored)-----WOR------WS1
  |--------------timeout-------------------reset
  Note: Since this watchdog timer has two stages, and each stage is determined
  by WOR, in the single stage mode, the timeout is (WOR  2); in the two
  stages mode, the timeout is WOR. The maximum timeout in the two stages mode
  is half of that in the single stage mode.
 SBSA Generic Watchdog register definitions 
 refresh frame 
 control frame 
 refreshcontrol frame 
 Watchdog Control and Status Register 
  struct sbsa_gwdt - Internal representation of the SBSA GWDT
  @wdd:		kernel watchdog_device structure
  @clk:		store the System Counter clock frequency, in Hz.
  @version:            store the architecture version
  @refresh_base:	Virtual address of the watchdog refresh frame
  @control_base:	Virtual address of the watchdog control frame
 seconds 
  action refers to action taken when watchdog gets WS0
  0 = skip
  1 = panic
  defaults to skip (0)
  Arm Base System Architecture 1.0 introduces watchdog v1 which
  increases the length watchdog offset register to 48 bits.
  - For version 0: WOR is 32 bits;
  - For version 1: WOR is 48 bits which comprises the register
  offset 0x8 and 0xC, and the bits [63:48] are reserved which are
  Read-As-Zero and Writes-Ignored.
  watchdog operation functions
		
		  In the single stage mode, The first signal (WS0) is ignored,
		  the timeout is (WOR  2), so the WOR should be configured
		  to half value of timeout.
	
	  In the single stage mode, if WS0 is deasserted
	  (watchdog is in the first stage),
	  timeleft = WOR + (WCV - system counter)
	
	  Writing WRR for an explicit watchdog refresh.
	  You can write anyting (like 0).
 writing WCS will cause an explicit watchdog refresh 
 Simply write 0 to WCS to clean WCS_EN bit 
	
	  Get the frequency of system counter from the cp15 interface of ARM
	  Generic timer. We don't need to check it, because if it returns "0",
	  system would panic in very early stage.
			
			  In case there is a pending ws0 interrupt, just ping
			  the watchdog before registering the interrupt routine
	
	  In the single stage mode, The first signal (WS0) is ignored,
	  the timeout is (WOR  2), so the maximum timeout should be doubled.
	
	  Update timeout to WOR.
	  Because of the explicit watchdog refresh mechanism,
	  it's also a ping, if watchdog is enabled.
 Disable watchdog if it is active during suspend 
 Enable watchdog if necessary 
 SPDX-License-Identifier: GPL-2.0
  Watchdog driver for the UniPhier watchdog timer
  (c) Copyright 2014 Panasonic Corporation
  (c) Copyright 2016 Socionext Inc.
  All rights reserved.
 WDT timer setting register 
 WDT reset selection register 
 WDT control register 
 usec 
 Default is 64 seconds 
  UniPhier Watchdog operations
 Clear counter 
		
		  As SoC specification, after clear counter,
		  it needs to wait until counter status is 1.
 Setup period 
 Enable and clear watchdog 
		
		  As SoC specification, after clear counter,
		  it needs to wait until counter status is 1.
 Disable and stop watchdog 
  Kernel Interfaces
 parent should be syscon node 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
  GE watchdog userspace interface
  Author:  Martyn Welch <martyn.welch@ge.com>
  Copyright 2008 GE Intelligent Platforms Embedded Systems, Inc.
  Based on: mv64x60_wdt.c (MV64X60 watchdog userspace interface)
    Author: James Chapman <jchapman@katalix.com>
 TODO:
  This driver does not provide support for the hardwares capability of sending
  an interrupt at a programmable threshold.
  This driver currently can only support 1 watchdog - there are 2 in the
  hardware that this driver supports. Thus one could be configured as a
  process-based watchdog (via devwatchdog), the second (using the interrupt
  capabilities) a kernel-based watchdog.
  The watchdog configuration register contains a pair of 2-bit fields,
    1.  a reload field, bits 27-26, which triggers a reload of
        the countdown register, and
    2.  an enable field, bits 25-24, which toggles between
        enabling and disabling the watchdog timer.
  Bit 31 is a read-only field which indicates whether the
  watchdog timer is currently enabled.
  The low 24 bits contain the timer reload value.
 Flags bits 
 only toggle the requested field if enabled state matches predicate 
 We write a 1, then a 2 -- to the appropriate field 
 maximum bus cycle count is 0xFFFFFFFF 
 Register only holds upper 24 bits, bit shifted into lower 24 
 in MHz 
 Map devices registers into memory 
 in case timer was already running 
 SPDX-License-Identifier: GPL-2.0+
  ST's LPC Watchdog
  Copyright (C) 2014 STMicroelectronics -- All Rights Reserved
  Author: David Paris <david.paris@st.com> for STMicroelectronics
          Lee Jones <lee.jones@linaro.org> for STMicroelectronics
 Low Power Alarm 
 LPC as WDT 
 Type of watchdog reset - 0: Cold 1: Warm 
 Maskunmask watchdog reset 
 LPC can either run as a Clocksource or in RTC or WDT mode 
 Init Watchdog timeout with value in DT 
 SPDX-License-Identifier: GPL-2.0-or-later
  Watchdog driver for Alphascale ASM9260.
  Copyright (c) 2014 Oleksij Rempel <linux@rempel-privat.de>
 Watchdog Mode register 
 Wake interrupt. Set by HW, can't be cleared. 
 This bit set if timeout reached. Cleared by SW. 
 HW Reset on timeout 
 WD enable 
  Watchdog Timer Constant register
  Minimal value is 0xff, the meaning of this value
  depends on used clock: T = WDCLK  (0xff + 1)  4
 Watchdog Feed register 
 Watchdog Timer Value register 
 The only way to disable WD is to reset it. 
 init WD if it was not started 
 first pass correct sequence 
	
	  Then write wrong pattern to the feed to trigger reset
	  ASAP.
 configure AHB clock 
 wdt has internal divider 
 default mode 
	
	  If 'timeout-sec' unspecified in devicetree, assume a 30 second
	  default, unless the max timeout is less than 30 seconds, then use
	  the max instead.
		
		  Not all supported platforms specify an interrupt for the
		  watchdog, so let's make it optional.
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for watchdog device controlled through GPIO-line
  Author: 2013, Alexander Shiyan <shc_work@mail.ru>
 Eternal ping 
 Put GPIO back to tristate 
 Toggle output pin 
 Pulse 
 Disallow values lower than 2 and higher than 65535 ms 
 SPDX-License-Identifier: GPL-2.0+
  Driver for watchdog aspect of for Zodiac Inflight Innovations RAVE
  Supervisory Processor(SP) MCU
  Copyright (C) 2017 Zodiac Inflight Innovation
  struct rave_sp_wdt_variant - RAVE SP watchdog variant
  @max_timeout:	Largest possible watchdog timeout setting
  @min_timeout:	Smallest possible watchdog timeout setting
  @configure:		Function to send configuration command
  @restart:		Function to send "restart" command
  struct rave_sp_wdt - RAVE SP watchdog
  @wdd:		Underlying watchdog device
  @sp:			Pointer to parent RAVE SP device
  @variant:		Device specific variant information
  @reboot_notifier:	Reboot notifier implementing machine reset
  rave_sp_wdt_configure - Configure watchdog device
  @wdd:	Device to configure
  @on:		Desired state of the watchdog timer (ONOFF)
  This function configures two aspects of the watchdog timer:
   - Wheither it is ON or OFF
   - Its timeout duration
  with first aspect specified via function argument and second via
  the value of 'wdd->timeout'.
	
	  Restart handler is called in atomic context which means we
	  can't communicate to SP via UART. Luckily for use SP will
	  wait 500ms before actually resetting us, so we ask it to do
	  so here and let the rest of the system go on wrapping
	  things up.
	
	  The actual work was done by reboot notifier above. SP
	  firmware waits 500 ms before issuing reset, so let's hang
	  here for twice that delay and hopefuly we'd never reach
	  the return statement.
 sentinel  }
	
	  We don't know if watchdog is running now. To be sure, let's
	  start it and depend on watchdog core to ping it
 SPDX-License-Identifier: GPL-2.0-or-later
 	Watchdog for the 7101 PMU version found in the ALi M1535 chipsets
 60 sec default timeout 
 internal variables 
 stores the computed timeout 
 Guards the hardware 
 module parameters 
 	ali_start	-	start watchdog countdown
 	Starts the timer running providing the timer has a counter
 	configuration set.
 Mask count 
 	ali_stop	-	stop the timer countdown
 	Stop the ALi watchdog countdown
 Mask count to zero (disabled) 
 and for safety mask the reset enable 
 	ali_keepalive	-	send a keepalive to the watchdog
 	Send a keepalive to the timer (actually we restart the timer).
 	ali_settimer	-	compute the timer reload value
 	@t: time in seconds
 	Computes the timeout values needed
 	devwatchdog handling
 	ali_write	-	writes to ALi watchdog
 	@file: file from VFS
 	@data: user address of data
 	@len: length of data
 	@ppos: pointer to the file offset
 	Handle a write to the ALi watchdog. Writing to the file pings
 	the watchdog and resets it. Writing the magic 'V' sequence allows
 	the next close to turn off the watchdog.
 See if we got the magic character 'V' and reload the timer 
			 note: just in case someone wrote the
			 scan to see whether or not we got
 someone wrote to us, we should reload the timer 
 	ali_ioctl	-	handle watchdog ioctls
 	@file: VFS file pointer
 	@cmd: ioctl number
 	@arg: arguments to the ioctl
 	Handle the watchdog ioctls supported by the ALi driver. Really
 	we want an extension to enable irq ack monitoring and the like
 	ali_open	-	handle open of ali watchdog
 	@inode: inode from VFS
 	@file: file from VFS
 	Open the ALi watchdog device. Ensure only one person opens it
 	at a time. Also start the watchdog running.
 devwatchdog can only be opened once 
 Activate 
 	ali_release	-	close an ALi watchdog
 	@inode: inode from VFS
 	@file: file from VFS
 	Close the ALi watchdog device. Actual shutdown of the timer
 	only occurs if the magic sequence has been set.
	
	       Shut off the timer.
 	ali_notify_sys	-	System down notifier
 	Notifier for system down
 Turn the WDT off 
 	Data for PCI driver interface
 	This data only exists for exporting the supported
 	PCI ids via MODULE_DEVICE_TABLE.  We do not actually
 	register a pci_driver, because someone else might one day
 	want to register another driver on the same PCI id.
 	ali_find_watchdog	-	find a 1535 and 7101
 	Scans the PCI hardware for a 1535 series bridge and matching 7101
 	watchdog device. This may be overtight but it is better to be safe
 Check for a 15331535 series bridge 
 Check for the a 7101 PMU 
	
	 	Initialize the timer bits
 Timer bits 
 Issued events 
 No monitor bits 
 	Kernel Interfaces
 	watchdog_init	-	module initialiser
 	Scan for a suitable watchdog and if so initialize it. Return an error
 	if we cannot, the error causes the module to unload
 Check whether or not the hardware watchdog is there 
	 Check that the timeout value is within it's range;
 Calculate the watchdog's timeout 
 	watchdog_exit	-	module de-initialiser
 	Called while unloading a successfully installed watchdog module.
 Stop the timer before we leave 
 Deregister 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) ST-Ericsson SA 2011-2013
  Author: Mathieu Poirier <mathieu.poirier@linaro.org> for ST-Ericsson
  Author: Jonas Aaberg <jonas.aberg@stericsson.com> for ST-Ericsson
 10 minutes 
 28 bit resolution in ms == 268435.455 s 
 Default to 10 minutes 
 disable auto off on sleep 
 set HW initial value 
  driverswatchdogorion_wdt.c
  Watchdog driver for OrionKirkwood processors
  Author: Sylver Bruneau <sylver.bruneau@googlemail.com>
  This file is licensed under  the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
 RSTOUT mask register physical address for Orion5x, Kirkwood and Dove 
 Internal registers can be configured at any 1 MiB aligned address 
  Watchdog timer block registers.
 module parameter (seconds) 
 Setup watchdog input clock 
 Mandatory fallback for proper devicetree backward compatibility 
 Fix the wdt and timer1 clock frequency to 25MHz 
 Reload watchdog duration 
 Set watchdog duration 
 Clear the watchdog expiration bit 
 Enable watchdog timer 
 Enable reset on watchdog 
 Set watchdog duration 
 Clear the watchdog expiration bit 
 Enable watchdog timer 
 Enable reset on watchdog 
 Set watchdog duration 
 Enable watchdog timer 
 Enable reset on watchdog 
 There are some per-SoC quirks to handle 
 Disable reset on watchdog 
 Disable watchdog timer 
 Disable reset on watchdog 
 Disable watchdog timer 
 Disable reset on watchdog 
 Disable watchdog timer 
  The original devicetree binding for this driver specified only
  one memory resource, so in order to keep DT backwards compatibility
  we try to fallback to a hardcoded register address, if the resource
  is missing from the devicetree.
 Each supported compatible has some RSTOUT register quirk 
 Dedicated RSTOUT register, can be requested. 
 Dedicated RSTOUT register, can be requested. 
 (seconds) 
 Default legacy match 
	
	  Let's make sure the watchdog is fully stopped, unless it's
	  explicitly enabled. This may be the case if the module was
	  removed and re-inserted, or if the bootloader explicitly
	  set a running watchdog before booting the kernel.
 Request the IRQ only after the watchdog is disabled 
		
		  Not all supported platforms specify an interrupt for the
		  watchdog, so let's make it optional.
 Optional 2nd interrupt for pretimeout 
 SPDX-License-Identifier: GPL-2.0+
   Broadcom BCM63xx SoC watchdog driver
   Copyright (C) 2007, Miguel Gaio <miguel.gaio@efixo.com>
   Copyright (C) 2008, Florian Fainelli <florian@openwrt.org>
 Fclk 
 seconds 
 seconds 
 HW functions 
 In case it was set long ago 
 SPDX-License-Identifier: GPL-2.0+
  System monitoring driver for DA9052 PMICs.
  Copyright(c) 2012 Dialog Semiconductor Ltd.
  Author: Anthony Olech <Anthony.Olech@diasemi.com>
 Seconds 
 Actual time  32.768s so included both 32s and 33s 
 Actual time 65.536s so include both, 65s and 66s 
	
	  Disable the Watchdog timer before setting
	  new time out.
		
		  To change the timeout, da9052 needs to
		  be disabled for at least 150 us.
 Set the desired timeout 
	
	  We have a minimum time for watchdog window called TWDMIN. A write
	  to the watchdog before this elapsed time should cause an error.
 Reset the watchdog timer 
	
	  FIXME: Reset the watchdog core, in general PMIC
	  is supposed to do this
 SPDX-License-Identifier: GPL-2.0-only
  Atheros AR71XXAR724XAR913X built-in hardware watchdog timer.
  Copyright (C) 2008-2011 Gabor Juhos <juhosg@openwrt.org>
  Copyright (C) 2008 Imre Kaloz <kaloz@openwrt.org>
  This driver was based on: driverswatchdogixp4xx_wdt.c
 	Author: Deepak Saxena <dsaxena@plexity.net>
 	Copyright 2004 (c) MontaVista, Software, Inc.
  which again was based on sa1100 driver,
 	Copyright (C) 2000 Oleg Drokin <green@crimea.edu>
 seconds 
 no action 
 general purpose interrupt 
 NMI 
 full chip reset 
 flush write 
	
	  Updating the TIMER register requires a few microseconds
	  on the AR934x SoCs at least. Use a small delay to ensure
	  that the TIMER register is updated within the hardware
	  before enabling the watchdog.
 flush write 
 flush write 
 SPDX-License-Identifier: GPL-2.0-only
 riowd.c - driver for hw watchdog inside Super IO of RIO
  Copyright (C) 2001, 2008 David S. Miller (davem@davemloft.net)
 RIO uses the NatSemi Super IO power management logical device
  as its' watchdog.
  When the watchdog triggers, it asserts a line to the BBC (Boot Bus
  Controller) of the machine.  The BBC can only be configured to
  trigger a power-on reset when the signal is asserted.  The BBC
  can be configured to ignore the signal entirely as well.
  The only Super IO device register we care about is at index
  0x05 (WDTO_INDEX) which is the watchdog time-out in minutes (1-255).
  If set to zero, this disables the watchdog.  When set, the system
  must periodically (before watchdog expires) clear (set to zero) and
  re-set the watchdog else it will trigger.
  There are two other indexed watchdog registers inside this Super IO
  logical device, but they are unused.  The first, at index 0x06 is
  the watchdog control and can be used to make the watchdog timer re-set
  when the PS2 mouse or serial lines show activity.  The second, at
  index 0x07 is merely a sampling of the line from the watchdog to the
  BBC.
  The watchdog device generates no interrupts.
 in minutes 
 Make miscdev useable right away 
 SPDX-License-Identifier: GPL-2.0
  MStar WDT driver
  Copyright (C) 2019 - 2021 Daniel Palmer
  Copyright (C) 2021 Romain Perier
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
 	ALi M7101 PMU Computer Watchdog Timer driver
 	Based on w83877f_wdt.c by Scott Jennings <linuxdrivers@oro.net>
 	and the Cobalt kernel WDT timer driver by Tim Hockin
 	                                      <thockin@cobaltnet.com>
 	(c)2002 Steve Hill <steve@navaho.co.uk>
   This WDT driver is different from most other Linux WDT
   drivers in that the driver will ping the watchdog by itself,
   because this particular WDT has a very short timeout (1.6
   seconds) and it would be insane to count on any userspace
   daemon always getting scheduled within that time frame.
   Additions:
    Aug 23, 2004 - Added use_gpio module parameter for use on revision a1d PMUs
                   found on very old cobalt hardware.
                   -- Mike Waychison <michael.waychison@sun.com>
  We're going to use a 1 second timeout.
  We must not require too good response from the userspace daemon.
  Here we require the userspace daemon to send us a heartbeat
  char to devwatchdog every 30 seconds.
 30 sec default timeout 
 in seconds, will be multiplied by HZ to get seconds to wait for a ping 
 Use the pic (for a1d revision alim7101) 
 	Whack the dog
	 If we got a heartbeat pulse within the WDT_US_INTERVAL
	  we agree to ping the WDT
 Ping the WDT (this is actually a disarmarm sequence) 
 Re-set the timer interval 
  Utility routines
	 We must enable before we kick off the timer in case the timer
 Start the timer 
 Stop the timer 
 user land ping 
  devwatchdog handling
 See if we got the magic character 'V' and reload the timer 
			 note: just in case someone wrote the magic character
 now scan 
 someone wrote to us, we should restart timer 
 Just in case we're already talking to someone... 
 Good, fire up the show 
 wim: shouldn't there be a: del_timer(&timer); 
 arbitrary upper limit 
	
	  Cobalt devices have no way of rebooting themselves other
	  than getting the watchdog to pull reset, so we restart the
	  watchdog on reboot with no heartbeat.
 loop until the watchdog fires 
 	Notifier for system down
 	The WDT needs to learn about soft shutdowns in order to
 	turn the timebomb registers off.
 Deregister 
 Set the WDT in the PMU to 1 second 
 arbitrary upper limit 
 SPDX-License-Identifier: GPL-2.0-only
       Intel Atom E6xx Watchdog driver
       Copyright (C) 2011 Alexander Stein
                 <alexander.stein@systec-electronic.com>
 10 minutes 
  This is needed to write to preload and reload registers
  struct ie6xx_wdt_data.unlock_sequence must be used
  to prevent sequence interrupts
 Watchdog clock is PCI Clock (33MHz) 
 and the preload value is loaded into [34:15] of the down counter 
	
	  Manual states preload must be one less.
	  Does not wrap as t is at least 1
 Set ResetMode & Enable prescaler for range 10ms to 10 min 
 Enable the watchdog timer 
 Disable the watchdog timer 
 syskerneldebugie6xx_wdt 
 Check boot parameters to verify that their initial values 
 are in range. 
 SPDX-License-Identifier: GPL-2.0+
  driverswatchdogar7_wdt.c
  Copyright (C) 2007 Nicolas Thill <nico@openwrt.org>
  Copyright (c) 2005 Enrik Berkhan <Enrik.Berkhan@akk.org>
  Some code taken from:
  National Semiconductor SCx200 Watchdog support
  Copyright (c) 2001,2002 Christer Weinigel <wingel@nano-system.com>
 XXX currently fixed, allows max margin ~68.72 secs 
 Pointer to the remapped WDT IO space 
 only allow one at a time 
 check for a magic close character 
 SPDX-License-Identifier: GPL-2.0+
 	SBC8360 Watchdog driver
 	(c) Copyright 2005 Webcon, Inc.
 	Based on ib700wdt.c, which is based on advantechwdt.c which is based
 	on acquirewdt.c which is based on wdt.c.
 	(c) Copyright 2001 Charles Howes <chowes@vsol.net>
 	Based on advantechwdt.c which is based on acquirewdt.c which
 	is based on wdt.c.
 	(c) Copyright 2000-2001 Marek Michalkiewicz <marekm@linux.org.pl>
 	Based on acquirewdt.c which is based on wdt.c.
 	Original copyright messages:
 	(c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,
 						All Rights Reserved.
 	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide
 	warranty for any of this software. This material is provided
 	"AS-IS" and at no charge.
 	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>
 	14-Dec-2001 Matt Domsch <Matt_Domsch@dell.com>
 	     Added nowayout module option to override CONFIG_WATCHDOG_NOWAYOUT
 	     Added timeout module option to override default
  Watchdog Timer Configuration
  The function of the watchdog timer is to reset the system automatically
  and is defined at IO port 0120H and 0121H.  To enable the watchdog timer
  and allow the system to reset, write appropriate values from the table
  below to IO port 0120H and 0121H.  To disable the timer, write a zero
  value to IO port 0121H for the system to stop the watchdog function.
  The following describes how the timer should be programmed (according to
  the vendor documentation)
  Enabling Watchdog:
  MOV AX,000AH (enable, phase I)
  MOV DX,0120H
  OUT DX,AX
  MOV AX,000BH (enable, phase II)
  MOV DX,0120H
  OUT DX,AX
  MOV AX,000nH (set multiplier n, from 1-4)
  MOV DX,0120H
  OUT DX,AX
  MOV AX,000mH (set base timer m, from 0-F)
  MOV DX,0121H
  OUT DX,AX
  Reset timer:
  MOV AX,000mH (same as set base timer, above)
  MOV DX,0121H
  OUT DX,AX
  Disabling Watchdog:
  MOV AX,0000H (a zero value)
  MOV DX,0120H
  OUT DX,AX
  Watchdog timeout configuration values:
 		N
 	M |	1	2	3	4
 	--|----------------------------------
 	0 |	0.5s	5s	50s	100s
 	1 |	1s	10s	100s	200s
 	2 |	1.5s	15s	150s	300s
 	3 |	2s	20s	200s	400s
 	4 |	2.5s	25s	250s	500s
 	5 |	3s	30s	300s	600s
 	6 |	3.5s	35s	350s	700s
 	7 |	4s	40s	400s	800s
 	8 |	4.5s	45s	450s	900s
 	9 |	5s	50s	500s	1000s
 	A |	5.5s	55s	550s	1100s
 	B |	6s	60s	600s	1200s
 	C |	6.5s	65s	650s	1300s
 	D |	7s	70s	700s	1400s
 	E |	7.5s	75s	750s	1500s
 	F |	8s	80s	800s	1600s
  Another way to say the same things is:
   For N=1, Timeout = (M+1)  0.5s
   For N=2, Timeout = (M+1)  5s
   For N=3, Timeout = (M+1)  50s
   For N=4, Timeout = (M+1)  100s
 0  = 0.5s 
 1  = 1s   
 2  = 1.5s 
 3  = 2s   
 4  = 2.5s 
 5  = 3s   
 6  = 3.5s 
 7  = 4s   
 8  = 4.5s 
 9  = 5s   
 10 = 5.5s 
 11 = 6s   
 12 = 6.5s 
 13 = 7s   
 14 = 7.5s 
 15 = 8s   
 16 = 5s  
 17 = 10s 
 18 = 15s 
 19 = 20s 
 20 = 25s 
 21 = 30s 
 22 = 35s 
 23 = 40s 
 24 = 45s 
 25 = 50s 
 26 = 55s 
 27 = 60s 
 28 = 65s 
 29 = 70s 
 30 = 75s 
 31 = 80s 
 32 = 50s  
 33 = 100s 
 34 = 150s 
 35 = 200s 
 36 = 250s 
 37 = 300s 
 38 = 350s 
 39 = 400s 
 40 = 450s 
 41 = 500s 
 42 = 550s 
 43 = 600s 
 44 = 650s 
 45 = 700s 
 46 = 750s 
 47 = 800s 
 48 = 100s 
 49 = 200s 
 50 = 300s 
 51 = 400s 
 52 = 500s 
 53 = 600s 
 54 = 700s 
 55 = 800s 
 56 = 900s 
 57 = 1000s 
 58 = 1100s 
 59 = 1200s 
 60 = 1300s 
 61 = 1400s 
 62 = 1500s 
 63 = 1600s 
 	Kernel methods.
 Activate and pre-configure watchdog 
 Enable the watchdog 
 Set timeout multiplier 
 Nothing happens until first sbc8360_ping() 
 Kernel pings watchdog 
 Write the base timer register 
 stop watchdog 
 De-activate the watchdog 
 Userspace pings kernel driver, or requests clean close 
 In case it was set long ago 
 Activate and ping once to start the countdown 
 	Notifier for system down
 Disable the SBC8360 Watchdog 
 	Kernel Interfaces
 	The SBC8360 needs to learn about soft shutdowns in order to
 	turn the timebomb registers off.
 My kingdom for the ability to print "0.5 seconds" in the kernel! 
 end of sbc8360.c 
 SPDX-License-Identifier: GPL-2.0-or-later
 	IT8712F "Smart Guardian" Watchdog support
 	Copyright (c) 2006-2007 Jorge Boncompte - DTI2 <jorge@dti2.net>
 	Based on info and code taken from:
 	driverscharwatchdogscx200_wdt.c
 	drivershwmonit87.c
 	IT8712F EC-LPC IO Preliminary Specification 0.8.2
 	IT8712F EC-LPC IO Preliminary Specification 0.9.3
 	The author(s) of this software shall not be held liable for damages
 	of any nature resulting due to the use of this software. This
 	software is provided AS-IS with no warranties.
 in seconds 
 Dog Food address - We use the game port address 
 The register to readwrite 
 The value to readwrite 
 Register: Logical device select 
 Register: Device ID 
 Register: Device Revision 
 LDN Register: Activation 
 LDN Register: Base address 
 GPIO and Watch Dog Timer 
 Game Port 
 WDT Register: Control 
 WDT Register: Configuration 
 WDT Register: Timeout Value 
 Reset timer on read or write to game port 
 Reset timer on keyboard interrupt 
 Reset timer on mouse interrupt 
 Reset timer on consumer IR interrupt 
 If 0 in MINUTES 
 Pulse PWROK on timeout 
 Pulse reset on timeout 
	
	  Try to reserve REG and REG + 1 for exclusive access.
	 Switch to minutes precision if the configured margin
	  value does not fit within the register width.
 else UNIT is MINUTES 
 check for a magic close character 
 only allow one at a time 
 Later revisions have 16-bit values per datasheet 0.9.1 
 SPDX-License-Identifier: GPL-2.0-only
  txx9wdt: A Hardware Watchdog Driver for TXx9 SoCs
  Copyright (C) 2007 Atsushi Nemoto <anemo@mba.ocn.ne.jp>
 1256 
 Default is 60 seconds 
 in seconds 
 clear pending interrupt 
  Watchdog driver for TS-4800 based boards
  Copyright (c) 2015 - Savoir-faire Linux
  This file is licensed under the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
 possible feed values 
  TS-4800 supports the following timeout values:
    value desc
    ---------------------
      0    feed for 338ms
      1    feed for 2.706s
      2    feed for 10.824s
      3    disable watchdog
  Keep the regmaptimeout map ordered by timeout
 allocate memory for watchdog struct 
 set regmap and offset to know where to write 
 Initialize struct watchdog_device 
	
	  As this watchdog supports only a few values, ts4800_wdt_set_timeout
	  must be called to initialize timeout and feed_val with valid values.
	  Default to maximum timeout if none, or an invalid one, is provided in
	  device tree.
	
	  The feed register is write-only, so it is not possible to determine
	  watchdog's state. Disable it to be in a known state.
 SPDX-License-Identifier: GPL-2.0+
   Watchdog driver for Broadcom BCM47XX
   Copyright (C) 2008 Aleksandar Radovanovic <biblbroks@sezampro.rs>
   Copyright (C) 2009 Matthieu CASTET <castet.matthieu@free.fr>
   Copyright (C) 2012-2013 Hauke Mehrtens <hauke@hauke-m.de>
 seconds 
 seconds 
 seconds 
 SPDX-License-Identifier: GPL-2.0
  Watchdog timer driver for the WinSystems EBC-C384
  Copyright (C) 2016 William Breathitt Gray
  The timeout value in minutes must fit in a single byte when sent to the
  watchdog timer; the maximum timeout possible is 15300 (255  60) seconds.
 resolution is in minutes for timeouts greater than 255 seconds 
 resolution is in minutes for timeouts greater than 255 seconds 
 round second resolution up to minute granularity 
 set watchdog timer for minutes 
 set watchdog timer for seconds 
 SPDX-License-Identifier: GPL-2.0-only
  Maxim MAX77620 Watchdog Driver
  Copyright (C) 2016 NVIDIA CORPORATION. All rights reserved.
  Author: Laxman Dewangan <ldewangan@nvidia.com>
 Enable WD_RST_WK - WDT expire results in a restart 
 Set WDT clear in OFF and sleep mode 
 Check if WDT running and if yes then set flags properly 
 SPDX-License-Identifier: GPL-2.0-only
  sl28cpld watchdog driver
  Copyright 2020 Kontron Europe GmbH
  Watchdog timer block registers.
 initialize struct watchdog_device 
	
	  Read the status early, in case of an error, we haven't modified the
	  hardware.
	
	  Initial timeout value, may be overwritten by device tree or module
	  parameter in watchdog_init_timeout().
	 
	  Reading a zero here means that either the hardware has a default
	  value of zero (which is very unlikely and definitely a hardware
	  bug) or the bootloader set it to zero. In any case, we handle
	  this case gracefully and set out own timeout.
 if the watchdog is locked, we set nowayout 
	
	  If watchdog is already running, keep it enabled, but make
	  sure its mode is set correctly.
 SPDX-License-Identifier: GPL-2.0-or-later
    Copyright (C) 2006 by Hans Edgington <hans@edgington.nl>              
    Copyright (C) 2007-2009 Hans de Goede <hdegoede@redhat.com>           
    Copyright (C) 2010 Giel van Schijndel <me@mortis.eu>                  
 Watchdog timer logical device 
 Key to enable Super-IO 
 Key to disable Super-IO 
 Logical device select 
 Device ID (2 bytes) 
 Device revision 
 Fintek ID (2 bytes) 
 Clock select 
 ROM address select 
 F81866 Multi-Function Register 
 TSI Level select 
 Multi function select 1 
 Multi function select 2 
 Multi function select 3 
 F81866 GPIO1 Enable Register 
 Logical device enable 
 Logical device address (2 bytes) 
 Manufacturers ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Default values 
 1 minute default timeout 
#define WATCHDOG_PULSE_WIDTH	125	 125 ms, default pulse width for
#define WATCHDOG_F71862FG_PIN	63	 default watchdog reset output
 default timeout in seconds 
 Super-IO Function prototypes 
 content for the wd_time register 
 pulse width flag 
 enable pulse output mode? 
 Super IO functions 
 Don't step on other drivers' IO space by accident 
 according to the datasheet the key must be sent twice! 
 select minutes for timer units 
 select seconds for timer units 
 Set timer value 
 Make sure we don't die as soon as the watchdog is enabled below 
 Watchdog pin configuration 
 Set pin 21 to GPIO23WDTRST#, then to WDTRST# 
 SPI must be disabled first to use this pin! 
 GPIO14 --> WDTRST# 
 Set pin 56 to WDTRST# 
 set pin 40 to WDTRST# 
 Enable TSI Level register bank 
 Set pin 27 to WDTRST# 
 Set pin 70 to WDTRST# 
		
		  GPIO1 Control Register when 27h BIT3:2 = 01 & BIT0 = 0.
		  The PIN 70(GPIO15WDTRST) is controlled by 2Ch:
		      BIT5: 0 -> WDTRST#
		            1 -> GPIO15
		
		  'default' label to shut up the compiler and catch
		  programmer errors
 Select "pulse" output mode with given duration 
 Set WD_PSWIDTH bits (1:0) 
 Set WD_PULSE to "pulse" mode 
 Select "level" output mode 
	
	  We don't want WDTMOUT_STS to stick around till regular reboot.
	  Write 1 to the bit to clear it to zero.
	
	  WATCHDOG_HANDLE_BOOT_ENABLED can result in keepalive being directly
	  called without a set_timeout before, so it needs to be done here
	  unconditionally.
 Confirmed (by datasheet) not to have a watchdog. 
 SPDX-License-Identifier: GPL-2.0-or-later
 	National Semiconductor PC87307PC97307 (ala SC1200) WDT driver
 	(c) Copyright 2002 Zwane Mwaikambo <zwane@commfireservices.com>,
 			All Rights Reserved.
 	Based on wdt.c and wdt977.c by Alan Cox and Woody Suwalski respectively.
 	The author(s) of this software shall not be held liable for damages
 	of any nature resulting due to the use of this software. This
 	software is provided AS-IS with no warranties.
 	Changelog:
 	20020220 Zwane Mwaikambo	Code based on datasheet, no hardware.
 	20020221 Zwane Mwaikambo	Cleanups as suggested by Jeff Garzik
 					and Alan Cox.
 	20020222 Zwane Mwaikambo	Added probing.
 	20020225 Zwane Mwaikambo	Added ISAPNP support.
 	20020412 Rob Radez		Broke out startstop functions
 		 <rob@osinvestor.com>	Return proper status instead of
 					temperature warning
 					Add WDIOC_GETBOOTSTATUS and
 					WDIOC_SETOPTIONS ioctls
 					Fix CONFIG_WATCHDOG_NOWAYOUT
 	20020530 Joel Becker		Add Matt Domsch's nowayout module
 					option
 	20030116 Adam Belay		Updated to the latest pnp code
 255 minutes 
 Power Management Index Register 
 Power Management Data Register 
 Data Register indexes 
 Function enable register 1 
 Function enable register 2 
 Power Management Ctrl 1 
 Power Management Ctrl 2 
 Power Management Ctrl 3 
 Watchdog timeout register 
 Watchdog config register 
 Watchdog status register 
 WDCF bitfields - which devices assert WDO 
 Keyboard Controller 
 Mouse 
 Serial0 
 Serial1 
 5 -7 are reserved 
 for non plug and play 
 io port access serialisation 
 Read from Data Register 
 Write to Data Register 
 assert WDO when any of the following interrupts are triggered too 
 set the timeout and get the ball rolling 
 This returns the status of the WDO signal, inactive high. 
	 If the bit is inactive, the watchdog is enabled, so return
	  KEEPALIVEPING which is a bit of a kludge because there's nothing
	  else for enableddisabled status
 allow one at a time 
 the API states this is given in secs 
 and return the new timeout 
	 The probe works by reading the PMC3 register's default value of 0x0e
	  there is one caveat, if the device disables the parallel port or any
	  of the UARTs we won't be able to detect it.
	  NB. This could be done with accuracy by reading the SID registers,
	  but we don't have access to those io regions.
 we don't want the UART busy bits 
 National Semiconductor PC87307PC97307 watchdog component 
 this driver only supports one card at a time 
 CONFIG_PNP 
	 now that the user has specified an IO port and we haven't detected
 ret = 0 
 SPDX-License-Identifier: GPL-2.0-or-later
 	sp5100_tco :	TCO timer driver for sp5100 chipsets
 	(c) Copyright 2009 Google Inc., All Rights Reserved.
 	Based on i8xx_tco.c:
 	(c) Copyright 2000 kernel concepts <nils@kernelconcepts.de>, All Rights
 	Reserved.
 				https:www.kernelconcepts.de
 	See AMD Publication 43009 "AMD SB700710750 Register Reference Guide",
 	    AMD Publication 44413 "AMD SP5100 Register Reference Guide"
 	    AMD Publication 45482 "AMD SB800-Series Southbridges Register
 	                                                      Reference Guide"
 	    AMD Publication 48751 "BIOS and Kernel Developer’s Guide (BKDG)
 				for AMD Family 16h Models 00h-0Fh Processors"
 	    AMD Publication 51192 "AMD Bolton FCH Register Reference Guide"
 	    AMD Publication 52740 "BIOS and Kernel Developer’s Guide (BKDG)
 				for AMD Family 16h Models 30h-3Fh Processors"
 	    AMD Publication 55570-B1-PUB "Processor Programming Reference (PPR)
 				for AMD Family 17h Model 18h, Revision B1
 				Processors (PUB)
 	    AMD Publication 55772-A1-PUB "Processor Programming Reference (PPR)
 				for AMD Family 17h Model 20h, Revision A1
 				Processors (PUB)
 	Includes, defines, variables, module parameters, ...
 internal variables 
 the watchdog platform device 
 the associated PCI device 
 module parameters 
 60 sec default heartbeat. 
 in seconds 
  Some TCO specific functions
 Write new heartbeat to watchdog 
 For SB800 or later 
 Set the Watchdog timer resolution to 1 sec 
 Enable watchdog decode bit and watchdog timer 
 For SP5100 or SB7x0 
 Enable watchdog decode bit 
 Enable Watchdog timer and set the resolution to 1 sec 
 Set the Watchdog timer resolution to 1 sec and enable 
 Request the IO ports used by this driver 
	
	  Determine type of southbridge chipset.
		
		  On Family 17h devices, the EFCH_PM_DECODEEN_WDT_TMREN bit of
		  EFCH_PM_DECODEEN not only enables the EFCH_PM_WDT_ADDR memory
		  region, it also enables the watchdog itself.
 Check MMIO address conflict 
			
			  Secondly, Find the watchdog timer MMIO address
			  from SBResource_MMIO register.
 Read SBResource_MMIO from PCI config(PCI_Reg: 9Ch) 
 Read SBResource_MMIO from AcpiMmioEn(PM_Reg: 24h) 
 Setup the watchdog timer 
	
	  Save WatchDogFired status, because WatchDogFired flag is
	  cleared here.
 Set watchdog action to reset the system 
 Set a reasonable heartbeat before we stop the timer 
	
	  Stop the TCO before we change anything so we don't race with
	  a zeroed timer.
 Show module parameters 
  Data for PCI driver interface
  This data only exists for exporting the supported
  PCI ids via MODULE_DEVICE_TABLE.  We do not actually
  register a pci_driver, because someone else might
  want to register another driver on the same PCI id.
 End of list 
 Match the PCI device 
 SPDX-License-Identifier: GPL-2.0+
 	Advantech Single Board Computer WDT driver
 	(c) Copyright 2000-2001 Marek Michalkiewicz <marekm@linux.org.pl>
 	Based on acquirewdt.c which is based on wdt.c.
 	Original copyright messages:
 	(c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,
 						All Rights Reserved.
 	Neither Alan Cox nor CymruNet Ltd. admit liability nor provide
 	warranty for any of this software. This material is provided
 	"AS-IS" and at no charge.
 	(c) Copyright 1995    Alan Cox <alan@lxorguk.ukuu.org.uk>
 	14-Dec-2001 Matt Domsch <Matt_Domsch@dell.com>
 	    Added nowayout module option to override CONFIG_WATCHDOG_NOWAYOUT
 	16-Oct-2002 Rob Radez <rob@osinvestor.com>
 	    Clean up ioctls, clean up init + exit, add expect close support,
 	    add wdt_start and wdt_stop as parameters.
 60 sec default timeout 
 the watchdog platform device 
 	You must set these - there is no sane way to probe for this board.
 	To enable or restart, write the timeout value in seconds (1 to 63)
 	to IO port wdt_start.  To disable, read IO port wdt_stop.
 	Both are 0x443 for most boards (tested on a PCA-6276VE-00B1), but
 	check your manual (at least the PCA-6159 seems to be different -
 	the manual says wdt_stop is 0x43, not 0x443).
 	(0x43 is also a write-only control register for the 8254 timer!)
 in seconds 
 	Watchdog Operations
 Write a watchdog value 
 	devwatchdog handling
	
	 	Activate
 	Kernel Interfaces
 	Init & exit routines
	 Check that the heartbeat value is within it's range ;
 Turn the WDT off if we have a soft shutdown 
 SPDX-License-Identifier: GPL-2.0-or-later
 	AMD Elan SC520 processor Watchdog Timer driver
 	Based on acquirewdt.c by Alan Cox,
 	     and sbc60xxwdt.c by Jakob Oestergaard <jakob@unthought.net>
 	The authors do NOT admit liability nor provide warranty for
 	any of this software. This material is provided "AS-IS" in
 	the hope that it may be useful for others.
 	(c) Copyright 2001    Scott Jennings <linuxdrivers@oro.net>
            927 - 2001      [Initial release]
 	Additional fixes Alan Cox
 	-	Fixed formatting
 	-	Removed debug printks
 	-	Fixed SMP built kernel deadlock
 	-	Switched to private locks not lock_kernel
 	-	Used ioremapwritewreadw
 	-	Added NOWAYOUT support
 	412 - 2002 Changes by Rob Radez <rob@osinvestor.com>
 	-	Change comments
 	-	Eliminate fop_llseek
 	-	Change CONFIG_WATCHDOG_NOWAYOUT semantics
 	-	Add KERN_ tags to printks
 	-	fix possible wdt_is_open race
 	-	Report proper capabilities in watchdog_info
 	-	Add WDIOC_{GETSTATUS, GETBOOTSTATUS, SETTIMEOUT,
 		GETTIMEOUT, SETOPTIONS} ioctls
 	098 - 2003 Changes by Wim Van Sebroeck <wim@iguana.be>
 	-	cleanup of trailing spaces
 	-	added extra printk's for startup problems
 	-	use module_param
 	-	made timeout (the emulated heartbeat) a module_param
 	-	made the keepalive ping an internal subroutine
 	327 - 2004 Changes by Sean Young <sean@mess.org>
 	-	set MMCR_BASE to 0xfffef000
 	-	CBAR does not need to be read
 	-	removed debugging printks
   This WDT driver is different from most other Linux WDT
   drivers in that the driver will ping the watchdog by itself,
   because this particular WDT has a very short timeout (1.6
   seconds) and it would be insane to count on any userspace
   daemon always getting scheduled within that time frame.
   This driver uses memory mapped IO, and spinlock.
  The AMD Elan SC520 timeout value is 492us times a power of 2 (0-7)
    0: 492us    2: 1.01s    4: 4.03s   6: 16.22s
    1: 503ms    3: 2.01s    5: 8.05s   7: 32.21s
  We will program the SC520 watchdog for a timeout of 2.01s.
  If we reset the watchdog every ~250ms we should be safe.
  We must not require too good response from the userspace daemon.
  Here we require the userspace daemon to send us a heartbeat
  char to devwatchdog every 30 seconds.
 30 sec default timeout 
 in seconds, will be multiplied by HZ to get seconds to wait for a ping 
  AMD Elan SC520 - Watchdog Timer Registers
 The default base address 
 Watchdog Timer Control Register 
 WDT Control Register bit definitions 
 [01] Time-out = 496 us (with 33 Mhz clk). 
 [02] Time-out = 508 ms (with 33 Mhz clk). 
 [03] Time-out = 1.02 s (with 33 Mhz clk). 
 [04] Time-out = 2.03 s (with 33 Mhz clk). 
 [05] Time-out = 4.07 s (with 33 Mhz clk). 
 [06] Time-out = 8.13 s (with 33 Mhz clk). 
 [07] Time-out = 16.27s (with 33 Mhz clk). 
 [08] Time-out = 32.54s (with 33 Mhz clk). 
 [12] Interrupt Request Flag 
 [14] Watchdog Timer Reset Enable 
 [15] Watchdog Timer Enable 
 	Whack the dog
	 If we got a heartbeat pulse within the WDT_US_INTERVAL
	  we agree to ping the WDT
 Ping the WDT 
 Re-set the timer interval 
 	Utility routines
 buy some time (ping) 
 ensure write synchronization 
 unlock WDT = make WDT configuration register writable one time 
 write WDT configuration register 
 Start the timer 
 Start the watchdog 
 Stop the timer 
 Stop the watchdog 
 user land ping 
 arbitrary upper limit 
 	devwatchdog handling
 See if we got the magic character 'V' and reload the timer 
			 note: just in case someone wrote the magic character
 now scan 
		 Well, anyhow someone wrote to us, we should
 Just in case we're already talking to someone... 
 Good, fire up the show 
 	Notifier for system down
 	The WDT needs to learn about soft shutdowns in order to
 	turn the timebomb registers off.
 Deregister 
	 Check that the timeout value is within it's range ;
 SPDX-License-Identifier: GPL-2.0+
  Watchdog driver for Conexant Digicolor
  Copyright (C) 2015 Paradox Innovation Ltd.
 wait for reset to assert... 
 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
  Copyright (c) 2016 BayLibre, SAS.
  Author: Neil Armstrong <narmstrong@baylibre.com>
 seconds 
 sentinel  },
 Setup with 1ms timebase 
 SPDX-License-Identifier: GPL-2.0-only
  Watchdog driver for Faraday Technology FTWDT010
  Copyright (C) 2017 Linus Walleij <linus.walleij@linaro.org>
  Inspired by the out-of-tree drivers from OpenWRT:
  Copyright (C) 2009 Paulius Zaleckas <paulius.zaleckas@teltonika.lt>
 5 MHz 
 set clock before enabling 
	
	  If 'timeout-sec' unspecified in devicetree, assume a 13 second
	  default.
 Watchdog was enabled by the bootloader, disable it. 
 Set up platform driver data 
 SPDX-License-Identifier: GPL-2.0-or-later
       sunxi Watchdog Driver
       Copyright (c) 2013 Carlo Caione
                     2012 Henrik Nordstrom
       Based on xen_wdt.c
       (c) Copyright 2010 Novell, Inc.
  This structure stores the register offsets for different variants
  of Allwinner's watchdog hardware.
  wdt_timeout_map maps the watchdog timer interval value in seconds to
  the value of the register WDT_MODE at bits .wdt_timeout_shift ~ +3
  [timeout seconds] = register value
 1s  
 2s  
 3s  
 4s  
 5s  
 6s  
 8s  
 10s 
 12s 
 14s 
 16s 
 Set system reset function 
 Set lowest timeout and enable watchdog 
	
	  Restart the watchdog. The default (and lowest) interval
	  value for the watchdog is 0.5s.
 Set system reset function 
 Enable watchdog 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
       intel-mid_wdt: generic Intel MID SCU watchdog driver
       Platforms supported so far:
       - Merrifield only
       Copyright (C) 2014 Intel Corporation. All rights reserved.
       Contact: David Cohen <david.a.cohen@linux.intel.com>
 SCU watchdog messages 
	
	  SCU expects the input size for watchdog IPC to be 2 which is the
	  size of the structure in dwords. SCU IPC normally takes bytes
	  but this is a special case where we specify size to be different
	  than inlen.
 This code should not be reached 
	
	  The firmware followed by U-Boot leaves the watchdog running
	  with the default threshold which may vary. When we get here
	  we should make a decision to prevent any side effects before
	  user space daemon will take care of it. The best option,
	  taking into consideration that there is no way to read values
	  back from hardware, is to enforce watchdog being run with
	  deterministic values.
 Make sure the watchdog is serviced 
 SPDX-License-Identifier: GPL-2.0
  Watchdog driver for the MEN z069 IP-Core
  Copyright (C) 2018 Johannes Thumshirn <jth@kernel.org>
 500 Hz 
 The watchdog trigger value toggles between 0x5555 and 0xaaaa 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2015-2016 Mentor Graphics
  pretimeout_panic - Panic on watchdog pretimeout event
  @wdd - watchdog_device
  Panic, watchdog has not been fed till pretimeout event.
 SPDX-License-Identifier: GPL-2.0-or-later
  FIXME: add wdrtas_get_status and wdrtas_get_boot_status as soon as
  RTAS calls are available
  RTAS watchdog driver
  (C) Copyright IBM Corp. 2005
  device driver to exploit watchdog RTAS functions
  Authors : Utz Bacher <utz.bacher@de.ibm.com>
 watchdog access functions 
  wdrtas_set_interval - sets the watchdog interval
  @interval: new interval
  returns 0 on success, <0 on failures
  wdrtas_set_interval sets the watchdog keepalive interval by calling the
  RTAS function set-indicator (surveillance). The unit of interval is
  seconds.
 rtas uses minutes 
  wdrtas_get_interval - returns the current watchdog interval
  @fallback_value: value (in seconds) to use, if the RTAS call fails
  returns the interval
  wdrtas_get_interval returns the current watchdog keepalive interval
  as reported by the RTAS function ibm,get-system-parameter. The unit
  of the return value is seconds.
 rtas uses minutes 
  wdrtas_timer_start - starts watchdog
  wdrtas_timer_start starts the watchdog by calling the RTAS function
  set-interval (surveillance)
  wdrtas_timer_stop - stops watchdog
  wdrtas_timer_stop stops the watchdog timer by calling the RTAS function
  set-interval (surveillance)
  wdrtas_timer_keepalive - resets watchdog timer to keep system alive
  wdrtas_timer_keepalive restarts the watchdog timer by calling the
  RTAS function event-scan and repeats these calls as long as there are
  events available. All events will be dumped.
  wdrtas_get_temperature - returns current temperature
  returns temperature or <0 on failures
  wdrtas_get_temperature returns the current temperature in Fahrenheit. It
  uses the RTAS call get-sensor-state, token 3 to do so
 fahrenheit 
  wdrtas_get_status - returns the status of the watchdog
  returns a bitmask of defines WDIOF_... as defined in
  includelinuxwatchdog.h
 TODO 
  wdrtas_get_boot_status - returns the reason for the last boot
  returns a bitmask of defines WDIOF_... as defined in
  includelinuxwatchdog.h, indicating why the watchdog rebooted the system
 TODO 
 watchdog API and operations stuff 
 wdrtas_write - called when watchdog device is written to
  @file: file structure
  @buf: user buffer with data
  @len: amount to data written
  @ppos: position in file
  returns the number of successfully processed characters, which is always
  the number of bytes passed to this function
  wdrtas_write processes all the data given to it and looks for the magic
  character 'V'. This character allows the watchdog device to be closed
  properly.
 look for 'V' 
 allow to close device 
  wdrtas_ioctl - ioctl function for the watchdog device
  @file: file structure
  @cmd: command for ioctl
  @arg: argument pointer
  returns 0 on success, <0 on failure
  wdrtas_ioctl implements the watchdog API ioctls
		 not implemented. Done by H8
		if (i & WDIOS_TEMPPANIC) {
  wdrtas_open - open function of watchdog device
  @inode: inode structure
  @file: file structure
  returns 0 on success, -EBUSY if the file has been opened already, <0 on
  other failures
  function called when watchdog device is opened
 only open once 
  wdrtas_close - close function of watchdog device
  @inode: inode structure
  @file: file structure
  returns 0 on success
  close function. Always succeeds
 only stop watchdog, if this was announced using 'V' before 
  wdrtas_temp_read - gives back the temperature in fahrenheit
  @file: file structure
  @buf: user buffer
  @count: number of bytes to be read
  @ppos: position in file
  returns always 1 or -EFAULT in case of user space copy failures, <0 on
  other failures
  wdrtas_temp_read gives the temperature to the users by copying this
  value as one byte into the user space buffer. The unit is Fahrenheit...
  wdrtas_temp_open - open function of temperature device
  @inode: inode structure
  @file: file structure
  returns 0 on success, <0 on failure
  function called when temperature device is opened
  wdrtas_temp_close - close function of temperature device
  @inode: inode structure
  @file: file structure
  returns 0 on success
  close function. Always succeeds
  wdrtas_reboot - reboot notifier function
  @nb: notifier block structure
  @code: reboot code
  @ptr: unused
  returns NOTIFY_DONE
  wdrtas_reboot stops the watchdog in case of a reboot
 initialization stuff 
  wdrtas_get_tokens - reads in RTAS tokens
  returns 0 on success, <0 on failure
  wdrtas_get_tokens reads in the tokens for the RTAS calls used in
  this watchdog driver. It tolerates, if "get-sensor-state" and
  "ibm,get-system-parameter" are not available.
  wdrtas_unregister_devs - unregisters the misc dev handlers
  wdrtas_register_devs unregisters the watchdog and temperature watchdog
  misc devs
  wdrtas_register_devs - registers the misc dev handlers
  returns 0 on success, <0 on failure
  wdrtas_register_devs registers the watchdog and temperature watchdog
  misc devs
  wdrtas_init - init function of the watchdog driver
  returns 0 on success, <0 on failure
  registers the file handlers and the reboot notifier
  wdrtas_exit - exit function of the watchdog driver
  unregisters the file handlers and the reboot notifier
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2014, The Linux Foundation. All rights reserved.
	
	  Trigger watchdog bite:
	     Setup BITE_TIME to be 128ms, and enable WDT.
	
	  Actually make sure the above sequence hits hardware before sleeping.
 We use CPU0's DGT for the watchdog 
	
	  We use the clock rate to calculate the max timeout, so ensure it's
	  not zero to avoid a divide-by-zero exception.
	 
	  WATCHDOG_CORE assumes units of seconds, if the WDT is clocked such
	  that it would bite before a second elapses it's usefulness is
	  limited.  Bail if this is the case.
 check if there is pretimeout support 
	
	  If 'timeout-sec' unspecified in devicetree, assume a 30 second
	  default, unless the max timeout is less than 30 seconds, then use
	  the max instead.
	
	  If WDT is already running, call WDT start which
	  will stop the WDT, set timeouts as bootloader
	  might use different ones and set running bit
	  to inform the WDT subsystem to ping the WDT
  Watchdog driver for SiByte SB1 SoCs
  Copyright (C) 2007 OnStor, Inc.  Andrew Sharp <andy.sharp@lsi.com>
  This driver is intended to make the second of two hardware watchdogs
  on the Sibyte 12XX and 11XX SoCs available to the user.  There are two
  such devices available on the SoC, but it seems that there isn't an
  enumeration class for watchdogs in Linux like there is for RTCs.
  The second is used rather than the first because it uses IRQ 1,
  thereby avoiding all that IRQ 0 problematic nonsense.
  I have not tried this driver on a 1480 processor; it might work
  just well enough to really screw things up.
  It is a simple timer, and there is an interrupt that is raised the
  first time the timer expires.  The second time it expires, the chip
  is reset and there is no way to redirect that NMI.  Which could
  be problematic in some cases where this chip is sitting on the HT
  bus and has just taken responsibility for providing a cache block.
  Since the reset can't be redirected to the external reset pin, it is
  possible that other HT connected processors might hang and not reset.
  For Linux, a soft reset would probably be even worse than a hard reset.
  There you have it.
  The timer takes 23 bits of a 64 bit register (?) as a count value,
  and decrements the count every microsecond, for a max value of
  0x7fffff usec or about 8.3ish seconds.
  This watchdog borrows some user semantics from the softdog driver,
  in that if you close the fd, it leaves the watchdog running, unless
  you previously wrote a 'V' to the fd, in which case it disables
  the watchdog when you close the fd like some other drivers.
  Based on various other watchdog drivers, which are probably all
  loosely based on something Alan Cox wrote years ago.
 	(c) Copyright 1996 Alan Cox <alan@lxorguk.ukuu.org.uk>,
 						All Rights Reserved.
 	This program is free software; you can redistribute it andor
 	modify it under the terms of the GNU General Public License
 	version 1 or 2 as published by the Free Software Foundation.
  set the initial count value of a timer
  wdog is the iomem address of the cfg register
  cause the timer to [re]load it's initial count and start counting
  all over again
  wdog is the iomem address of the cfg register
 keeps it to one thread only 
 useconds: 8.3ish secs. 
  Allow only a single thread to walk the dog
	
	  Activate the timer
  Put the dog back in the kennel.
  42 - the answer
		
		  restart the timer
		
		  get the remaining count from the ... count register
		  which is 18 before the config register
 	Notifier for system down
		
		  sit and sit
  interrupt handler
  doesn't do a whole lot for user, but oh so cleverly written so kernel
  code can use it to re-up the watchdog, thereby saving the kernel from
  having to create and maintain a timer, just to tickle another timer,
  which is just so wrong.
	
	  if it's the second watchdog timer, it's for those users
	
	  register a reboot notifier
	
	  get the resources
  example code that can be put in a platform code area to utilize the
  first watchdog timer for the kernels own purpose.
void platform_wd_setup(void)
{
	int ret;
	ret = request_irq(1, sbwdog_interrupt, IRQF_SHARED,
		"Kernel Watchdog", IOADDR(A_SCD_WDOG_CFG_0));
	if (ret) {
		pr_crit("Watchdog IRQ zero(0) failed to be requested - %d\n", ret);
	}
}
 SPDX-License-Identifier: GPL-2.0-or-later
  mpc8xxx_wdt.c - MPC8xxMPC83xxMPC86xx watchdog userspace interface
  Authors: Dave Updegraff <dave@cray.org>
 	    Kumar Gala <galak@kernel.crashing.org>
 		Attribution: from 83xx_wst: Florian Schirmer <jolt@tuxbox.org>
 				..and from sc520_wdt
  Copyright (c) 2008  MontaVista Software, Inc.
                      Anton Vorontsov <avorontsov@ru.mvista.com>
  Note: it appears that you can only actually ENABLE or DISABLE the thing
  once after POR. Once enabled, you cannot disable, and vice versa.
 System watchdog control register 
 Software Watchdog Time Count. 
 Software Watchdog Freeze (mpc8xx). 
 Watchdog Enable bit. 
 Software Watchdog ResetInterrupt Select bit.
 Software Watchdog Counter Prescale bit. 
 System watchdog count register 
 System watchdog service register 
 Ping the WDT 
 Good, fire up the show 
 clear reset status bits related to watchdog timer 
	
	  If the watchdog was previously enabled or we're running on
	  MPC8xxx, we should ping the wdt from the kernel until the
	  userspace handles it.
 RSR Bit SWRS 
 RSTRSCR Bit WDT_RR 
 RSR Bit SWRS 
 SPDX-License-Identifier: GPL-2.0+
  Watchdog driver for the wm8350
  Copyright (C) 2007, 2008 Wolfson Microelectronics <linux@wolfsonmicro.com>
 Seconds 
 To be set in WM8350_SYSTEM_CONTROL_2 
 Default to 4s timeout 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2020 ROHM Semiconductors
  ROHM BD9576MUF and BD9573MUF Watchdog driver
 Pulse 
 Unit is hundreds of uS 
 convert to 100uS 
 SPDX-License-Identifier: GPL-2.0
  Intel Management Engine Interface (Intel MEI) Linux driver
  Copyright (c) 2015, Intel Corporation.
  iAMT Watchdog Device
 seconds 
 seconds 
 seconds 
 Commands 
 MEI Management Control version number 
 Sub Commands 
  enum mei_wdt_state - internal watchdog state
  @MEI_WDT_PROBE: wd in probing stage
  @MEI_WDT_IDLE: wd is idle and not opened
  @MEI_WDT_START: wd was opened, start was called
  @MEI_WDT_RUNNING: wd is expecting keep alive pings
  @MEI_WDT_STOPPING: wd is stopping and will move to IDLE
  @MEI_WDT_NOT_REQUIRED: wd device is not required
  struct mei_wdt - mei watchdog driver
  @wdd: watchdog device
  @cldev: mei watchdog client device
  @state: watchdog internal state
  @resp_required: ping required response
  @response: ping response completion
  @unregister: unregister worker
  @reg_lock: watchdog device registration lock
  @timeout: watchdog current timeout
  @dbgfs_dir: debugfs dir entry
 CONFIG_DEBUG_FS 
  struct mei_mc_hdr - Management Control Command Header
  @command: Management Control (0x2)
  @bytecount: Number of bytes in the message beyond this byte
  @subcommand: Management Control Subcommand
  @versionnumber: Management Control Version (0x10)
  struct mei_wdt_start_request - watchdog startping
  @hdr: Management Control Command Header
  @timeout: timeout value
  @reserved: reserved (legacy)
  struct mei_wdt_start_response - watchdog startping response
  @hdr: Management Control Command Header
  @status: operation status
  @wdstate: watchdog status bit mask
  struct mei_wdt_stop_request - watchdog stop
  @hdr: Management Control Command Header
  mei_wdt_ping - send wd startping command
  @wdt: mei watchdog device
  Return: 0 on success,
          negative errno code on failure
  mei_wdt_stop - send wd stop command
  @wdt: mei watchdog device
  Return: 0 on success,
          negative errno code on failure
  mei_wdt_ops_start - wd start command from the watchdog core.
  @wdd: watchdog device
  Return: 0 on success or -ENODEV;
  mei_wdt_ops_stop - wd stop command from the watchdog core.
  @wdd: watchdog device
  Return: 0 if success, negative errno code for failure
  mei_wdt_ops_ping - wd ping command from the watchdog core.
  @wdd: watchdog device
  Return: 0 if success, negative errno code on failure
  mei_wdt_ops_set_timeout - wd set timeout command from the watchdog core.
  @wdd: watchdog device
  @timeout: timeout value to set
  Return: 0 if success, negative errno code for failure
 valid value is already checked by the caller 
 not const as the firmware_version field need to be retrieved 
  __mei_wdt_is_registered - check if wdt is registered
  @wdt: mei watchdog device
  Return: true if the wdt is registered with the watchdog subsystem
  Locking: should be called under wdt->reg_lock
  mei_wdt_unregister - unregister from the watchdog subsystem
  @wdt: mei watchdog device
  mei_wdt_register - register with the watchdog subsystem
  @wdt: mei watchdog device
  Return: 0 if success, negative errno code for failure
  mei_wdt_rx - callback for data receive
  @cldev: bus device
 Empty response can be sent on stop 
	 Run the unregistration in a worker as this can be
	  run only after ping completion, otherwise the flow will
	  deadlock on watchdog core mutex.
 stop the watchdog and register watchdog device 
  mei_wdt_notif - callback for event notification
  @cldev: bus device
 CONFIG_DEBUG_FS 
	 on legacy devices notification is not supported
 Free the caller in case of fw initiated or unexpected reset 
 required last entry 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (C) 2010, Paul Cercueil <paul@crapouillou.net>
   JZ4740 Watchdog driver
 Start watchdog if it wasn't started already 
 sentinel  }
 Set smallest clock possible 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2016 IBM Corporation
  Joel Stanley <joel@jms.id.au>
  WDT_RESET_WIDTH controls the characteristics of the external pulse (if
  enabled), specifically:
   Pulse duration
   Drive mode: push-pull vs open-drain
   Polarity: Active high or active low
  Pulse duration configuration is available on both the AST2400 and AST2500,
  though the field changes between SoCs:
  AST2400: Bits 7:0
  AST2500: Bits 19:0
  This difference is captured in struct aspeed_wdt_config.
  The AST2500 exposes the drive mode and polarity options, but not in a
  regular fashion. For read purposes, bit 31 represents active high or low,
  and bit 30 represents push-pull or open-drain. With respect to write, magic
  values need to be written to the top byte to change the state of the drive
  mode and polarity bits. Any other value written to the top byte has no
  effect on the state of the drive mode or polarity bits. However, the pulse
  width value must be preserved (as desired) if written.
 32 bits at 1MHz, in milliseconds 
 access_cs0 shows if cs0 is accessible, hence the reverted bit 
  This attribute exists only if the system has booted from the alternate
  flash with 'alt-boot' option.
  At alternate flash the 'access_cs0' sysfs node provides:
    ast2400: a way to get access to the primary SPI flash chip at CS0
             after booting from the alternate chip at CS1.
    ast2500: a way to restore the normal address mapping from
             (CS0->CS1, CS1->CS0) to (CS0->CS0, CS1->CS1).
  Clearing the boot code selection and timeout counter also resets to the
  initial state the chip select line mapping. When the SoC is in normal
  mapping state (i.e. booted from CS0), clearing those bits does nothing for
  both versions of the SoC. For alternate boot mode (booted from CS1 due to
  wdt2 expiration) the behavior differs as described above.
  This option can be used with wdt2 (watchdog1) only.
	
	  On clock rates:
	   - ast2400 wdt can run at PCLK, or 1MHz
	   - ast2500 only runs at 1MHz, hard coding bit 4 to 1
	   - ast2600 always runs at 1MHz
	 
	  Set the ast2400 to run at 1MHz as it simplifies the driver.
	
	  Control reset on a per-device basis to ensure the
	  host is not affected by a BMC reboot
		
		  The watchdog is running, but invoke aspeed_wdt_start() to
		  write wdt->ctrl to WDT_CTRL to ensure the watchdog's
		  configuration conforms to the driver's expectations.
		  Primarily, ensure we're using the 1MHz clock source.
		
		  The watchdog is always configured with a 1MHz source, so
		  there is no need to scale the microsecond value. However we
		  need to offset it - from the datasheet:
		 
		  "This register decides the asserting duration of wdt_ext and
		  wdt_rstarm signal. The default value is 0xFF. It means the
		  default asserting duration of wdt_ext and wdt_rstarm is
		  256us."
		 
		  This implies a value of 0 gives a 1us pulse.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2013 Broadcom Corporation
	
	  One watchdog tick is 1(2^resolution) seconds. Resolution can take
	  the values 0-15, meaning one tick can be 1s to 30.52us. Our default
	  resolution of 4 means one tick is 62.5ms.
	 
	  The watchdog counter is 20 bits. Depending on resolution, the maximum
	  counter value of 0xfffff expires after about 12 days (resolution 0)
	  down to only 32s (resolution 15). The default resolution of 4 gives
	  us a maximum of about 18 hours and 12 minutes before the watchdog
	  times out.
	
	  If the WD_LOAD_FLAG is set, the watchdog counter field is being
	  updated in hardware. Once the WD timer is updated in hardware, it
	  gets cleared.
 Remember the maximum number iterations due to WD_LOAD_FLAG 
 This is the only place we return a negative value. 
 We always mask out reserved bits. 
 CONFIG_BCM_KONA_WDT_DEBUG 
 SPDX-License-Identifier: GPL-2.0+
  System monitoring driver for DA9055 PMICs.
  Copyright(c) 2012 Dialog Semiconductor Ltd.
  Author: David Dajun Chen <dchen@diasemi.com>
 In seconds 
 Actual time  32.768s so included both 32s and 33s 
 Actual time 65.536s so include both, 65s and 66s 
	
	  We have a minimum time for watchdog window called TWDMIN. A write
	  to the watchdog before this elapsed time will cause an error.
 Reset the watchdog timer 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriverspcmciasa1111_generic.c
  We implement the generic parts of a SA1111 PCMCIA driver.  This
  basically means we handle everything except controlling the
  power.  Power is machine specific...
  These are offsets from the above base.
	
	  Initialise the suspend state.
 SPDX-License-Identifier: GPL-2.0-or-later
  at91_cf.c -- AT91 CompactFlash controller driver
  Copyright (C) 2005 David Brownell
  A0..A10 work in each range; A23 indicates IO space;  A25 is CFRNW;
  some other bit in {A24,A22..A11} is nREG to flag memory access
  (vs attributes).  So more than 2KBregion would just be waste.
  Note: These are offsets from the physical base address.
 IO IRQ 
 Card detect 
 power switching 
 card reset 
 EBI Chip Select number 
--------------------------------------------------------------------------
--------------------------------------------------------------------------
 kick pccard as needed 
 NOTE: CF is always 3VCARD 
 RDYnIRQ 
 switch Vcc if needed and possible 
 toggle reset if needed 
 we already mapped the IO region 
	
	  Use 16 bit accesses unlessuntil we need 8-bit io space.
	 
	  NOTE: this CF controller ignores IOIS16, so we can't really do
	  MAP_AUTOSZ.  The 16bit mode allows single byte access on either
	  D0-D7 (even addr) or D8-D15 (odd), so it's close enough for many
	  purposes (and handles ide-cs).
	 
	  The 8bit mode is needed for odd byte access on D0-D7.  It seems
	  some cards only like that way to get at the odd byte, despite
	  CF 3.0 spec table 35 also giving the D8-D15 option.
 pcmcia layer mapsunmaps mem regions 
--------------------------------------------------------------------------
 sentinel  }
 must be a GPIO; ergo must trigger on both edges 
	
	  The card driver will request this irq later as needed.
	  but it causes lots of "irqNN: nobody cared" messages
	  unless we report that we handle everything (sigh).
	  (Note:  DK board doesn't wire the IRQ pin...)
	
	  pcmcia layer only remaps "real" memory not iospace
	  io_offset is set to 0x10000 to avoid the check in static_find_io().
 reserve chip-select regions 
 SPDX-License-Identifier: GPL-2.0-or-later
  vrc4171_card.c, NEC VRC4171 Card Controller driver for Socket Services.
  Copyright (C) 2003-2005  Yoichi Yuasa <yuasa@linux-mips.org>
 Power register 
 5V only 
 Small voltage is chosen for safety. 
 clear CardStatus change 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriverspcmciapxa2xx_mainstone.c
  Mainstone PCMCIA specific routines.
  Created:	May 12, 2004
  Author:	Nicolas Pitre
  Copyright:	MontaVista Software Inc.
	
	  Workaround for STSCHG which can't be deasserted:
	  We therefore disableenable corresponding IRQs
	  as needed to avoid IRQ locks.
======================================================================
    Device driver for the PCMCIA control functionality of StrongARM
    SA-1100 microprocessors.
    The contents of this file are subject to the Mozilla Public
    License Version 1.1 (the "License"); you may not use this file
    except in compliance with the License. You may obtain a copy of
    the License at http:www.mozilla.orgMPL
    Software distributed under the License is distributed on an "AS
    IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    implied. See the License for the specific language governing
    rights and limitations under the License.
    The initial developer of the original code is John G. Dorsey
    <john+@cs.cmu.edu>.  Portions created by John G. Dorsey are
    Copyright (C) 1999 John G. Dorsey.  All Rights Reserved.
    Alternatively, the contents of this file may be used under the
    terms of the GNU Public License version 2 (the "GPL"), in which
    case the provisions of the GPL are applicable instead of the
    above.  If you wish to allow the use of your version of this file
    only under the terms of the GPL and not to allow others to use
    your version of this file under the MPL, indicate your decision
    by deleting the provisions above and replace them with the notice
    and other provisions required by the GPL.  If you do not delete
    the provisions above, a recipient may use your version of this
    file under either the MPL or the GPL.
  sa1100_pcmcia_default_mecr_timing
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Calculate MECR clock wait states for given CPU clock
  speed and command wait state. This function can be over-
  written by a board specific version.
  The default is to simply calculate the BS values as specified in
  the INTEL SA1100 development manual
  "Expansion Memory (PCMCIA) Configuration Register (MECR)"
  that's section 10.2.5 in _my_ version of the manual ;)
 sa1100_pcmcia_set_mecr()
  ^^^^^^^^^^^^^^^^^^^^^^^^
  set MECR value for socket <sock> based on this sockets
  io, mem and attribute space access speed.
  Call board specific BS value calculation to allow boards
  to tweak the BS values.
	
	  set default MECR calculation if the board specific
	  code did not specify one...
 Provide our SA11x0 specific timing routines. 
 Initialize processor specific parameters 
  Driver for the Cirrus PD6729 PCI-PCMCIA bridge.
  Based on the i82092.c driver.
  This software may be used and distributed according to the terms of
  the GNU General Public License, incorporated herein by reference.
  simple helper functions
  External clock time, in nanoseconds.  120 ns = 8.33 MHz
  PARAMETERS
   irq_mode=n
      Specifies the interrupt delivery mode.  The default (1) is to use PCI
      interrupts; a value of 0 selects ISA interrupts. This must be set for
      correct operation of PCI card readers.
 0 = ISA interrupt, 1 = PCI interrupt 
 basic value readwrite functions 
 Interrupt handler functionality 
 card status change register 
 no events on this socket 
 For IOCARDS, bit 0 means "read the card" 
 Check for batteryready events 
 no more events to handle 
 socket functions 
 Interface Status Register 
	
	  IO cards have a different meaning of bits 0,1
	  Also notice the inverse-logic on the bits
 IO card 
 non IO card 
 card is write protected 
 card is not busy 
 power is applied to the card 
 First, set the global controller options 
 Values for the IGENC register 
 The reset bit has "inverse" logic 
 IGENC, Interrupt and General Control Register 
 Power registers 
 default: disable resetdrv on resume 
 automatic power mngmnt 
 enable power 
 only write if changed 
 all interrupts are to be done as PCI interrupts 
 Enable specific interrupt events 
 management IRQ: PCI INTA# = "irq 3" 
 card IRQ: PCI INTA# = "irq 3" 
 now clear the (probably bogus) pending stuff by doing a dummy read 
 Check error conditions 
 Turn off the window before changing anything 
	 dev_dbg(&sock->dev, "set_io_map: Setting range to %x - %x\n",
 write the new values 
 Turn the window back on if needed 
 Turn off the window before changing anything 
 write the start address 
 write the stop address 
 Take care of high byte 
 card start 
		 dev_dbg(&sock->dev, "requesting attribute memory for "
		 dev_dbg(&sock->dev, "requesting normal memory for "
 Enable the window if necessary 
 the pccard structure and its functions 
 just find interrupts that aren't in use 
	
	  Since we have no memory BARs some firmware may not
	  have had PCI_COMMAND_MEMORY enabled, yet the device needs it.
 fall back to ISA interrupt mode 
 Register the interrupt handler 
 poll Card status change 
 Turn off all interrupt sources 
 SPDX-License-Identifier: GPL-2.0-only
  rsrc_nonstatic.c -- Resource management routines for !SS_CAP_STATIC_MAP sockets
  The initial developer of the original code is David A. Hinds
  <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds
  are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.
  (C) 1999		David A. Hinds
 moved to rsrc_mgr.c
MODULE_AUTHOR("David A. Hinds, Dominik Brodowski");
MODULE_LICENSE("GPL");
 Parameters that can be set with 'insmod' 
 memory probe? 
 IO port probe? 
 for io_db and mem_db 
 Action field 
======================================================================
    Linux resource management extensions
======================================================================
    These manage the internal databases of available resources.
====================================================================
 Delete whole block 
 don't advance the pointer yet 
 Cut off bit from the front 
 Cut off bit from the end 
 Split the block into two pieces 
======================================================================
    These routines examine a region of IO or memory addresses to
    determine what ranges might be genuinely available.
 First, what does a floating port look like? 
======================================================================
  readable() - iomem validation function for cards with a valid CIS
 as we're only called from pcmcia.c, we're safe 
 invalidate mapping 
  checksum() - iomem validation function for simple memory cards
 Don't bother checking every word... 
  do_validate_mem() - low level validate a memory region for PCMCIA use
  @s:		PCMCIA socket to validate
  @base:	start address of resource to check
  @size:	size of resource to check
  @validate:	validation function to use
  do_validate_mem() splits up the memory region which is to be checked
  into two parts. Both are passed to the @validate() function. If
  @validate() returns non-zero, or the value parameter to @validate()
  is zero, or the value parameter is different between both calls,
  the check fails, and -EINVAL is returned. Else, 0 is returned.
 move it to the validated data set 
  do_mem_probe() - validate a memory region for PCMCIA use
  @s:		PCMCIA socket to validate
  @base:	start address of resource to check
  @num:	size of resource to check
  @validate:	validation function to use
  @fallback:	validation function to use if validate fails
  do_mem_probe() checks a memory region for use by the PCMCIA subsystem.
  To do so, the area is split up into sensible parts, and then passed
  into the @validate() function. Only if @validate() and @fallback() fail,
  the area is marked as unavaibale for use by the PCMCIA subsystem. The
  function returns the size of the usable memory area.
 don't allow too large steps 
 cis_readable wants to map 2x map_size 
  inv_probe() - top-to-bottom search for one usuable high memory area
  @s:		PCMCIA socket to validate
  @m:		resource_map to check
  validate_mem() - memory probe function
  @s:		PCMCIA socket to validate
  @probe_mask: MEM_PROBE_LOW | MEM_PROBE_HIGH
  The memory probe.  If the memory list includes a 64K-aligned block
  below 1MB, we probe in 64K chunks, and as soon as we accumulate at
  least mem_limit free space, we quit. Returns 0 on usuable ports.
 We do up to four passes through the list 
 Only probe < 1 MB 
 Special probe for 64K-aligned block 
 CONFIG_PCMCIA_PROBE 
  validate_mem() - memory probe function
  @s:		PCMCIA socket to validate
  @probe_mask: ignored
  Returns 0 on usuable ports.
 CONFIG_PCMCIA_PROBE 
  pcmcia_nonstatic_validate_mem() - try to validate iomem for PCMCIA use
  @s:		PCMCIA socket to validate
  This is tricky... when we set up CIS memory, we try to validate
  the memory window space allocations.
  Locking note: Must be called with skt_mutex held!
	
	  Ensure that we have the correct start address
		
		  If the lower resources are not available, try aligning
		  to this entry of the resource database to see if it'll
		  fit here.
		
		  If we're above the area which was passed in, there's
		  no point proceeding.
	
	  If we failed to find something suitable, ensure we fail.
  Adjust an existing IO region allocation, but making sure that we don't
  encroach outside the resources which the user supplied.
======================================================================
    These find ranges of IO ports or memory addresses that are not
    currently allocated by other devices.
    The 'align' field should reflect the number of bits of address
    that need to be preserved from the initial value of base.  It
    should be a power of two, greater than or equal to 'num'.  A value
    of 0 means that all bits of base are significant.  base should
    also be strictly less than 'align'.
	 Check for an already-allocated window that must conflict with
	  what was asked for.  It is a hack because it does not catch all
	  potential conflicts, just the most obvious ones.
 Try to extend top of window 
 Try to extend bottom of window 
	 on x86, avoid anything < 0x100 for it is often used for
	 If this is the root bus, the risk of hitting some strange
	  system devices is too high: If a driver isn't loaded, the
	  resources are not claimed; even if a driver is loaded, it
	  may not request all resources or even the wrong one. We
	  can neither trust the rest of the kernel nor ACPIPNP and
	  CRS parsing to get it right. Therefore, use several
	  safeguards:
	 
	  - Do not auto-add resources if the CardBus bridge is on
	    the PCI root bus
	 
	  - Avoid any IO ports < 0x100.
	 
	  - On PCI-PCI bridges, only use resources which are set up
	    exclusively for the secondary PCI bus: the risk of hitting
	    system devices is quite low, as they usually aren't
	    connected to the secondary PCI bus.
			 safeguard against the root resource, where the
			  risk of hitting any other device would be too
			 safeguard against the root resource, where the
			  risk of hitting any other device would be too
	 if we got at least one of IO, and one of MEM, we can be glad and
 sysfs interface to the resource database 
======================================================================
    Device driver for Intel 82365 and compatible PC Card controllers.
    i82365.c 1.265 19991110 18:36:21
    The contents of this file are subject to the Mozilla Public
    License Version 1.1 (the "License"); you may not use this file
    except in compliance with the License. You may obtain a copy of
    the License at http:www.mozilla.orgMPL
    Software distributed under the License is distributed on an "AS
    IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    implied. See the License for the specific language governing
    rights and limitations under the License.
    The initial developer of the original code is David A. Hinds
    <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds
    are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.
    Alternatively, the contents of this file may be used under the
    terms of the GNU General Public License version 2 (the "GPL"), in which
    case the provisions of the GPL are applicable instead of the
    above.  If you wish to allow the use of your version of this file
    only under the terms of the GPL and not to allow others to use
    your version of this file under the MPL, indicate your decision
    by deleting the provisions above and replace them with the notice
    and other provisions required by the GPL.  If you do not delete
    the provisions above, a recipient may use your version of this
    file under either the MPL or the GPL.
 ISA-bus controllers 
====================================================================
 Parameters that can be set with 'insmod' 
 Default base address for i82365sl and other ISA chips 
 Should we probe at 0x3e2 for an extra ISA controller? 
 Specify a socket number to ignore 
 Bit map or list of interrupts to choose from 
 The card status change interrupt -- 0 means autoselect 
 Probe for safe interrupts? 
 Poll status interval -- 0 means default to interrupt 
 External clock time, in nanoseconds.  120 ns = 8.33 MHz 
 Cirrus options 
 Vadem options 
====================================================================
 Where we keep track of our sockets... 
 ... 
 Default ISA interrupt mask 
 irq 15,14,12,11,10,9,7,5,4,3 
====================================================================
 These definitions must match the pcic table! 
 Flags for classifying groups of controllers 
====================================================================
======================================================================
    Code to save and restore global state information for Cirrus
    PD67xx controllers, and to set and report global configuration
    options.
    The VIA controllers also use these routines, as they are mostly
    Cirrus lookalikes, without the timing registers.
======================================================================
    Code to save and restore global state information for Vadem VG468
    and VG469 controllers, and to set and report global configuration
    options.
======================================================================
    Generic routines to get and set controller options
======================================================================
    Interrupt testing code, for ISA and PCI interrupts
 Generate one interrupt 
 mask all interrupts 
 Don't probe level-triggered interrupts -- reserved for PCI 
 Fallback: just find interrupts that aren't in use 
 If scan failed, default to polled status 
====================================================================
 Time conversion functions 
====================================================================
 Use the next free entry in the socket table 
 Wake up a sleepy Cirrus controller 
 Pause at least 50 ms 
 Check for Vadem VG-468 chips 
 Check for Ricoh chips 
 Check for Cirrus CL-PD67xx chips 
 identify 
======================================================================
    See if a card is present, powered up, in IO mode, and already
    bound to a (non PC Card) Linux driver.  We leave these alone.
    We make an exception for cards that seem to be serial devices.
====================================================================
 Set host options, build basic interrupt mask 
 Scan for ISA interrupts 
 Poll if only two interrupts available 
 Only try an ISA cs_irq if this is the first controller 
 Avoid irq 12 unless it is explicitly requested 
 Update socket interrupt information, capabilities 
 add_pcic 
====================================================================
 Does the socket exist? 
 Check for bad socket decode 
====================================================================
 pcic_interrupt 
====================================================================
 i365_get_status 
====================================================================
 First set global controller options 
 IO card, RESET flag, IO interrupt 
 Chipset-specific functions 
 Speaker control 
 Card status change interrupt mask 
 i365_set_socket 
====================================================================
 Turn off the window before changing anything 
 Turn on the window if necessary 
 i365_set_io_map 
====================================================================
 Turn off the window before changing anything 
 Turn on the window if necessary 
 i365_set_mem_map 
 driver model ordering issue 
======================================================================
    Routines for accessing socket information and register dumps via
    sysclasspcmcia_socket...
====================================================================
 this is horribly ugly... proper locking needs to be done here at 
====================================================================
 Set up interrupt handler(s) 
 register sockets with the pcmcia core 
 Finally, schedule a polling interrupt 
 Turn off all interrupt sources! 
 init_i82365 
 Turn off all interrupt sources! 
 exit_i82365 
====================================================================
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriverspcmciapxa2xx_stargate2.c
  Stargate 2 PCMCIA specific routines.
  Created:	December 6, 2005
  Author:	Ed C. Epp
  Copyright:	Intel Corp 2005
               Jonathan Cameron <jic23@cam.ac.uk> 2009
 not available - battery detect on card 
 not available 
 not available - voltage detect for card 
 not available 
 Enable card power 
 sets power ctl register high 
 sets power control register low (clear) 
 reset 
 SPDX-License-Identifier: GPL-2.0-only
  Regular cardbus driver ("yenta_socket")
  (C) Copyright 1999, 2000 Linus Torvalds
  Changelog:
  Aug 2002: Manfred Spraul <manfred@colorfullife.com>
  	Dynamically adjust the size of the bridge resource
  May 2003: Dominik Brodowski <linux@brodo.de>
  	Merge pci_socket.c and yenta.c into one file
  Only probe "regular" interrupts, don't
  touch dangerous spots like the mouse irq,
  because there are mice that apparently
  get really confused if they get fondled
  too intimately.
  Default to 11, 10, 9, 7, 6, 5, 4, 3.
 Don't ask.. 
  yenta PCI irq probing.
  currently only used in the TIEnE initialization code
  Generate easy-to-use ways of reading a cardbus sockets
  regular memory space ("cb_xxx"), configuration space
  ("config_xxx") and compatibility space ("exca_xxxx")
 avoid problems with PCI write posting 
 PCI write posting... 
 PCI write posting... 
  Ugh, mixed-mode cardbus and 16-bit pccard state: things depend
  on what kind of card is inserted..
 some birdges require to use the ExCA registers to power 16bit cards 
 i82365SL-DF style 
 i82365SL-B style 
 CB_SC_STPCLK? 
 if powering down: do it immediately 
 ISA interrupt control? 
 CSC interrupt: no ISA irq for CSC 
 Socket event mask: get card insertremove events.. 
 if powering up: do it as the last step when the socket is configured 
 Disable the window before changing it.. 
 Clear interrupt status for the event 
 redoes voltage interrogation if required 
 Called at resume and initialization events 
 Redo card voltage interrogation 
 Re-enable CSC interrupts 
 Disable CSC interrupts 
  Use an adaptive allocation for the memory resource,
  sometimes the memory behind pci bridges is limited:
  18 of the size of the io window of the parent.
  max 4 MB, min 16 kB. We try very hard to not get below
  the "ACC" values, though.
 round size down to next power of 2 
 Wrong type 
 Already allocated? 
 The granularity of the memory limit is 4kB, on IO it's 4 bytes 
 Approximating prefetchable by non-prefetchable 
  Allocate the bridge mappings for the device..
  Free the bridge mappings for the device..
  Close it down - release our resources and go home..
 Remove the register attributes 
 we don't want a dying socket registered 
 Disable all events so we don't die in an IRQ storm 
  Different cardbus controllers have slightly different
  initialization sequences etc details. List them here..
	
	  Probe for usable interrupts using the force
	  register to generate bogus card status events.
  yenta PCI irq probing.
  currently only used in the TIEnE initialization code
 interrupt handler, only used during probing 
 Clear interrupt status for the event 
 probes the PCI interrupt, use only on override functions 
 generate interrupt, wait 
 disable interrupts 
 CONFIG_YENTA_TI 
  Set static data that doesn't need re-initializing..
  Initialize the standard cardbus registers
 MAGIC NUMBERS! Fixme 
 sec. latency timer 
 subordinate bus 
 secondary bus 
 primary bus 
	
	  Set up the bridging state:
	   - enable write posting.
	   - memory window 0 prefetchable, window 1 non-prefetchable
	   - PCI interrupts enabled if a PCI interrupt exists..
  yenta_fixup_parent_bridge - Fix subordinate bus# of the parent bridge
  @cardbus_bridge: The PCI bus which the CardBus bridge bridges to
  Checks if devices on the bus which the CardBus bridge bridges to would be
  invisible during PCI scans because of a misconfigured subordinate number
  of the parent brige - some BIOSes seem to be too lazy to set it right.
  Does the fixup carefully by checking how far it can go without conflicts.
  See http:bugzilla.kernel.orgshow_bug.cgi?id=2944 for more information.
	
	  We only check and fix the parent bridge: All systems which need
	  this fixup that have been reviewed are laptops and the only bridge
	  which needed fixing was the parent bridge of the CardBus bridge:
 Check bus numbers are already set up correctly: 
 The subordinate number is ok, nothing to do 
 Root bridges are ok 
 stay within the limits of the bus range of the parent: 
 check the bus ranges of all sibling bridges to prevent overlap 
		
		  If the sibling has a higher secondary bus number
		  and it's secondary is equal or smaller than our
		  current upper limit, set the new upper limit to
		  the bus number below the sibling's range:
 Show that the wanted subordinate number is not possible: 
 If we have room to increase the bridge's subordinate number, 
 use the highest number of the hidden bus, within limits 
 Save the new subordinate in the bus struct of the bridge 
 and update the PCI config space with the new subordinate 
  Initialize a cardbus controller. Make sure we have a usable
  interrupt, and that we can map the cardbus area. Fill in the
  socket information structure..
	
	  If we failed to assign proper bus numbers for this cardbus
	  controller during PCI probe, its subordinate pci_bus is NULL.
	  Bail out if so.
 prepare pcmcia_socket 
 prepare struct yenta_socket 
	
	  Do some basic sanity checking..
	
	  Ok, start setup.. Map the cardbus registers,
	  and request the IRQ.
	
	  report the subsystem vendor and device for help debugging
	  the irq stuff...
 Disable all events 
 Set up the bridge regions.. 
 Do we have special options for the device? 
 We must finish initialization here 
 No IRQ or request_irq failed. Poll 
 But zero is a valid IRQ number. 
 Figure out what the dang thing can do for the PCMCIA layer... 
 Register it with the pcmcia layer.. 
 Add the yenta register attributes 
 error path... 
	
	  TBD: Check if these TI variants can use more
	  advanced overrides instead.  (I can't get the
	  data sheets for these devices. --rmk)
 CONFIG_YENTA_TI 
 match any cardbus bridge 
 all zeroes  }
 SPDX-License-Identifier: GPL-2.0
  driverspcmciasa1100_jornada720.c
  Jornada720 PCMCIA specific routines
  Socket 0 power: GPIO A0
  Socket 0 3V: GPIO A2
  Socket 1 power: GPIO A1 & GPIO A3
  Socket 1 3V: GPIO A3
  Does Socket 1 3V actually do anything?
 Fixme: why messing around with SA11x0's GPIO1? 
 SPDX-License-Identifier: GPL-2.0-only
  cardbus.c -- 16-bit PCMCIA core support
  The initial developer of the original code is David A. Hinds
  <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds
  are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.
  (C) 1999		David A. Hinds
  Cardbus handling has been re-written to be more of a PCI bridge thing,
  and the PCI code basically does all the resource handling.
 		Linus, Jan 2000
		
		  Since there is only one interrupt available to
		  CardBus devices, all devices downstream of this
		  device must be using this IRQ.
		
		  Some controllers transfer very slowly with 0 CLS.
		  Configure it.  This may fail as CLS configuration
		  is mandatory only for MWI.
  cb_alloc() - add CardBus device
  @s:		the pcmcia_socket where the CardBus device is located
  cb_alloc() allocates the kernel data structures for a Cardbus device
  and handles the lowest level PCI device setup issues.
	
	  Size all resources below the CardBus controller.
 socket specific tune function 
  cb_free() - remove CardBus device
  @s:		the pcmcia_socket where the CardBus device was located
  cb_free() handles the lowest level PCI device cleanup.
 SPDX-License-Identifier: GPL-2.0-only
  rsrc_iodyn.c -- Resource management routines for MEM-static sockets.
  The initial developer of the original code is David A. Hinds
  <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds
  are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.
  (C) 1999		David A. Hinds
	 Check for an already-allocated window that must conflict with
	  what was asked for.  It is a hack because it does not catch all
	  potential conflicts, just the most obvious ones.
 Try to extend top of window 
 Try to extend bottom of window 
 SPDX-License-Identifier: GPL-2.0
  driverspcmciasa1100_simpad.c
  PCMCIA implementation routines for simpad
 Disable CF bus: 
simpad_set_cs3_bit(PCMCIA_BUFF_DIS);
 bvd1 might be cs3reg & PCMCIA_BVD1 
 bvd2 might be cs3reg & PCMCIA_BVD2 
 Murphy: see table of MIC2562a-1 
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file "COPYING" in the main directory of this archive
  for more details.
  Copyright (C) 2008 Maxime Bizon <mbizon@freebox.fr>
 if cardbus is used, platform device needs reference to actual pci
  readwrite helper for pcmcia regs
  This callback should (re-)initialise the socket, turn on status
  interrupts and PCMCIA bus, and wait for power to stabilise so that
  the card status signals report correctly.
  Hardware cannot do that.
  This callback should remove power on the socket, disable IRQs from
  the card, turn off status interrupts, and disable the PCMCIA bus.
  Hardware cannot do that.
  Implements the set_socket() operation for the in-kernel PCMCIA
  service (formerly SS_SetSocket in Card Services). We more or
  less punt all of this work and let the kernel handle the details
  of power configuration, reset, &c. We also record the value of
  `state' in order to regurgitate it to the PCMCIA core later.
	 note: hardware cannot control socket power, so we will
 apply socket reset 
 reverse reset logic for cardbus card 
 keep requested state for event reporting 
  identity cardtype from VS[12] input, CD[12] input while only VS2 is
  floating, and CD[12] input while only VS1 is floating
 VS1 float, VS2 float 
 VS1 grounded, VS2 float 
 VS1 grounded, VS2 grounded 
 VS1 tied to CD1, VS2 float 
 VS1 grounded, VS2 tied to CD2 
 VS1 tied to CD2, VS2 grounded 
 VS1 float, VS2 grounded 
 VS1 float, VS2 tied to CD2 
 VS1 float, VS2 tied to CD1 
 VS1 tied to CD2, VS2 float 
 VS2 grounded, VS1 is tied to CD1, CD2 is grounded 
 ignore cardbay 
  poll hardware to check card insertion status
 check CD for card presence 
 if new insertion, detect cardtype 
 float VS1, float VS2 
 wait for output to stabilize and read VS[12] 
 drive VS1 low, float VS2 
 wait for output to stabilize and read CD[12] 
 float VS1, drive VS2 low 
 wait for output to stabilize and read CD[12] 
 guess cardtype from all this 
 drive both VS pin to 0 again 
 enable correct logic 
 report card typevoltage 
  core request to get current socket status
  socket polling timer callback
	 keep only changed bits, and mask with required one from the
	 this doesn't seem to be called by pcmcia layer if static
  register pcmcia socket to core
 make sure we have all resources we need 
 remap pcmcia registers 
 remap io registers 
 resources are static 
 assume common & attribute memory have the same size 
 initialize polling timer 
	 initialize  pcmcia  control register,  drive  VS[12] to  0,
	  leave CB IDSEL to the old  value since it is set by the PCI
	
	  Hardware has only one set of timings registers, not one for
	  each memory access type, so we configure them for the
	  slowest one: attribute memory.
 start polling socket 
 keep pci device 
  if cardbus support is enabled, register our platform device after
  our fake cardbus bridge has been registered
 SPDX-License-Identifier: GPL-2.0-only
  rsrc_mgr.c -- Resource management routines andor wrappers
  The initial developer of the original code is David A. Hinds
  <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds
  are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.
  (C) 1999		David A. Hinds
	 the good thing about SS_CAP_STATIC_MAP sockets is
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriverspcmciapxapxa_cm_x255.c
  Compulab Ltd., 2003, 2007, 2008
  Mike Rapoport <mike@compulab.co.il>
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriverspcmciapxa2xx_palmtc.c
  Driver for Palm Tungsten|C PCMCIA
  Copyright (C) 2008 Alex Osborne <ato@meshy.org>
  Copyright (C) 2009-2011 Marek Vasut <marek.vasut@gmail.com>
 always inserted 
 Power up the card, 1.8V first, after a while 3.3V 
 Wait till the card is ready 
 Power down the WiFi in case of error 
 Reset the card 
  ViperZeus PCMCIA support
    Copyright 2004 Arcom Control Systems
  Maintained by Marc Zyngier <maz@misterjones.org>
  Based on:
    iPAQ h2200 PCMCIA support
    Copyright 2004 Koen Kooi <koen@vestingbar.nl>
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive for
  more details.
  Release all resources.
 Can only apply 3.3V 
 Silently ignore Vpp, output enable, speaker enable. 
 Apply socket voltage 
 I can't imagine more than one device, but you never know... 
 SPDX-License-Identifier: GPL-2.0-only
   Copyright (C) 2012 Paul Parsons <lost.distance@yahoo.com>
	
	  IRQ type must be set before soc_pcmcia_hw_init() calls request_irq().
	  The asic3 default IRQ type is level trigger low level detect, exactly
	  the the signal present on GPIOD4_CF_nCD when a CF card is inserted.
	  If the IRQ type is not changed, the asic3 interrupt handler will loop
	  repeatedly because it is unable to clear the level trigger interrupt.
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriverspcmciapxa2xx_balloon3.c
  Balloon3 PCMCIA specific routines.
   Author:	Nick Bane
   Created:	June, 2006
   Copyright:	Toby Churchill Ltd
   Derived from pxa2xx_mainstone.c, by Nico Pitre
  Various modification by Marek Vasut <marek.vasut@gmail.com>
 This actually reads the STATUS register 
	
	  Workaround for STSCHG which can't be deasserted:
	  We therefore disableenable corresponding IRQs
	  as needed to avoid IRQ locks.
 not available 
 Always true its a CF card 
 not available 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriverspcmciapxa2xx_palmld.c
  Driver for Palm LifeDrive PCMCIA
  Copyright (C) 2006 Alex Osborne <ato@meshy.org>
  Copyright (C) 2007-2011 Marek Vasut <marek.vasut@gmail.com>
 always inserted 
 SPDX-License-Identifier: GPL-2.0
  MAX1600 PCMCIA power switch library
  Copyright (C) 2016 Russell King
 VY 
 VX 
		
		  Cirrus mode appears to be the same as Intel mode,
		  except the VCC pins are inverted.
 SPDX-License-Identifier: GPL-2.0-or-later
  omap_cf.c -- OMAP 16xx CompactFlash controller driver
  Copyright (c) 2005 David Brownell
 NOTE:  don't expect this to support many IO cards.  The 16xx chips have
  hard-wired timings to support Compact Flash memory cards; they won't work
  with various other devices (like WLAN adapters) without some external
  logic to help out.
  NOTE:  CF controller docs disagree with address space docs as to where
  CF_BASE really lives; this is a doc erratum.
 status; read after IRQ 
 which chipselect (CS0..CS3) is used for CF (active low) 
 card reset 
--------------------------------------------------------------------------
--------------------------------------------------------------------------
 the timer is primarily to kick this socket's pccardd 
 This irq handler prevents "irqNNN: nobody cared" messages as drivers
  claim the card's IRQ.  It may also detect some card insertions, but
  not removals; it can't always eliminate timer irqs.
 NOTE CF is always 3VCARD 
 REVISIT some non-OSK boards may support power switching 
 regions are 2K each:  mem, attrib, io (and reserved-for-ide) 
--------------------------------------------------------------------------
  NOTE:  right now the only board-specific platform_data is
  "what chipselect is used".  Boards could want more.
 either CFLASH.IREQ (INT_1610_CF) or some GPIO 
 this primarily just shuts up irq handling noise 
 NOTE: CS0 could be configured too ... 
 pcmcia layer only remaps "real" memory 
 NOTE:  CF conflicts with MMC1 
	 NOTE:  better EMIFS setup might support more cards; but the
	  TRM only shows how to affect regular flash signals, not their
	  CFPCMCIA variants...
 synch mode 4 etc 
 OE holdsetup 
 CF uses armxor_ck, which is "always" available 
 SPDX-License-Identifier: GPL-2.0-only
  cs.c -- Kernel Card Services - core services
  The initial developer of the original code is David A. Hinds
  <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds
  are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.
  (C) 1999		David A. Hinds
 Module parameters 
 centiseconds 
 centiseconds 
 centiseconds 
 centiseconds 
 usecs 
 centiseconds 
 centiseconds 
 unreset_check's 
 Access speed for attribute memory windows 
 ns 
 List of all sockets, protected by a rwsem 
  pcmcia_register_socket - add a new pcmcia socket device
  @socket: the &socket to register
	 try to obtain a socket number [yes, it gets ugly if we
	  register more than 2^sizeof(unsigned int) pcmcia
	  sockets... but the socket number is deprecated
	
	  If we do not support Cardbus, ensure that
	  the Cardbus socket capability is disabled.
 set proper values in socket->dev 
 base address = 0, map = 0 
	
	  Let's try to get the PCMCIA module for 16-bit PCMCIA support.
	  If it fails, it doesn't matter -- we still have 32-bit CardBus
	  support to offer, so this is not a failure mode.
 pcmcia_register_socket 
  pcmcia_unregister_socket - remove a pcmcia socket device
  @socket: the &socket to unregister
 remove from our own list 
 wait for sysfs to drop all references 
 pcmcia_unregister_socket 
  socket_setup() and socket_shutdown() are called by the main event handler
  when card insertion and removal events are received.
  socket_setup() turns on socket power and resets the socket, in two stages.
  socket_shutdown() unconfigures a socket and turns off socket power.
 Blank out the socket state 
	 From here on we can be sure that only we (that is, the
	  pccardd thread) accesses this socket, and all (16-bit)
	  PCMCIA interactions are gone. Therefore, release
	  ops_mutex so that we don't get a sysfs-related lockdep
	  warning.
 give socket some time to power down 
	
	  Decode the card voltage requirements, and apply power to the card.
	
	  Wait "vcc_settle" for the supply to stabilise.
  Handle card insertion.  Setup the socket, reset the card,
  and then tell the rest of PCMCIA that a card is present.
 store state on first suspend, but not after spurious wakeups 
  Finalize the resume. In case of a cardbus socket, we have
  to rebind the devices as we can't be certain that it has been
  replaced, or not.
		 We can't be sure the CardBus card is the same
		  as the one previously inserted. Therefore, remove
  Resume a socket.  If a card is present, verify its CIS against
  our cached copy.  If they are different, the card has been
  replaced, and we need to tell the drivers.
  Process a socket card detect status change.
  If we don't have a card already present, delay the detect event for
  about 20ms (to be on the safe side) before reading the socket status.
  Some i82365-based systems send multiple SS_DETECT events during card
  insertion, and the "card present" status bit seems to bounce.  This
  will probably be true with GPIO-based card detection systems after
  the product has aged.
 register with the device core 
 wait for userspace to catch up 
 make sure we are running 
 shut down socket, if a device is still present 
 remove from the device core 
  Yenta (at least) probes interrupts before registering the socket and
  starting the handler thread.
 pcmcia_parse_events 
  pcmcia_parse_uevents() - tell pccardd to issue manual commands
  @s:		the PCMCIA socket we wan't to command
  @events:	events to pass to pccardd
  userspace-issued insert, eject, suspend and resume commands must be
  handled by pccardd to avoid any sysfs-related deadlocks. Valid events
  are PCMCIA_UEVENT_EJECT (for eject), PCMCIA_UEVENT__INSERT (for insert),
  PCMCIA_UEVENT_RESUME (for resume), PCMCIA_UEVENT_SUSPEND (for suspend)
  and PCMCIA_UEVENT_REQUERY (for re-querying the PCMCIA card).
 register pcmcia_callback 
 s->skt_mutex also protects s->callback 
 registration 
 I'm not sure which "reset" function this is supposed to use,
  but for now, it uses the low-level interface's reset, not the
  CIS register.
 reset_card 
 dev_resume may be called with IRQs enabled 
 late suspend must be called with IRQs disabled 
 early resume must be called with IRQs disabled 
 CONFIG_PM 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0-only
  PCMCIA socket code for the MyCable XXS1500 system.
  Copyright (c) 2009 Manuel Lauss <manuel.lauss@gmail.com>
  3.3V cards only; all interfacing is done via gpios:
  01:  carddetect (00 = card present, xx = huh)
  4:	 card irq
  204:  reset (high-act)
  205:  buffer enable (low-act)
  208209: card voltage key (00,01,10,11)
  210:  battwarn
  211:  batdead
  214:  power (low-act)
 previous flags for set_socket() 
 power control 
 power off 
 power on 
 assert reset 
 buffers off 
 deassert reset 
 buffers on 
 check carddetects: GPIO[0:1] must both be low 
 determine card voltage: GPIO[208:209] binary value 
 3V card 
 5V card, unsupported 
 treated as unsupported in core 
 GPIO214: low active power switch 
 GPIO204: high-active reset line 
 other stuff 
 assert reset 
 disable buffers 
 power off 
 36bit PCMCIA Attribute area address 
 36bit PCMCIA Memory area address 
 36bit PCMCIA IO area address 
	
	  PCMCIA client drivers use the inboutb macros to access
	  the IO registers.  Since mips_io_port_base is added
	  to the access address of the mips implementation of
	  inboutb, we need to subtract it here because we want
	  to access the IO or MEM address directly, without
	  going through this "mips_io_port_base" mechanism.
	 setup carddetect irq: use one of the 2 GPIOs as an
	  edge detector.
 SPDX-License-Identifier: GPL-2.0-only
  socket_sysfs.c -- most of socket-related sysfs output
  (C) 2003 - 2004		Dominik Brodowski
 SPDX-License-Identifier: GPL-2.0-only
  PCMCIA socket code for the Alchemy Db1xxxPb1xxx boards.
  Copyright (c) 2009 Manuel Lauss <manuel.lauss@gmail.com>
 This is a fairly generic PCMCIA socket driver suitable for the
  following Alchemy Development boards:
   Db1000, DbPb1500, DbPb1100, DbPb1550, DbPb1200, Db1300
  The Db1000 is used as a reference:  Per-socket card-, carddetect- and
   statuschange IRQs connected to SoC GPIOs, control and status register
   bits arranged in per-socket groups in an external PLD.  All boards
   listed here use this layout, including bit positions and meanings.
   Of course there are exceptions in later boards:
 	- Pb1100Pb1500:  single socket only; voltage key bits VS are
 			  at STATUS[5:4] (instead of STATUS[1:0]).
 	- Au1200-based:	  additional card-eject irqs, irqs not gpios!
 	- Db1300:	  Db1200-like, no pwr ctrl, single socket (#1).
 socket number 
 previous flags for set_socket() 
 interrupt sources: linux irq numbers! 
 default carddetect irq 
 card-status-change irq 
 card irq 
 db1200pb1200 have these 
 db1000 carddetect gpio 
 most boards 
 IRQs aren't gpios 
 VS bits slightly different 
 no power control 
 DBPB1200: check CPLD SIGSTATUS register bit 1012 
 carddetect gpio: low-active 
 STSCHG tends to bounce heavily when cards are insertedejected.
  To avoid this, the interrupt is normally disabled and only enabled
  after reset to a card has been de-asserted.
 DbPb1200 have separate per-socket insertion and ejection
  interrupts which stay asserted as long as the card is
  insertedmissing.  The one which caused us to be called
  needs to be disabled and the other one enabled.
 Wait a bit for the signals to stop bouncing. 
	 DbPb1200 have separate per-socket insertion and ejection
	  interrupts, which should show edge behaviour but don't.
	  So interrupts are disabled until both insertion and
	  ejection handler have been registered and the currently
	  active one disabled.
 enable the currently silent one 
		 all other (older) Db1x00 boards use a GPIO to show
		  card detection status:  use both-edge triggers.
 all done 
  configure a PCMCIA socket on the Db1x00 series of boards (and
  compatibles).
  2 external registers are involved:
    pcmcia_status (offset 0x04): bits [0:12:3]: read card voltage id
    pcmcia_control(offset 0x10):
 	bits[0:1] set vcc for card
 	bits[2:3] set vpp for card
 	bit 4:	enable data buffers
 	bit 7:	reset# for card
 	add 8 for second socket.
 card voltage setup 
 clear voltage settings 
 sanity check: Vpp must be 0, 12, or Vcc 
 create new voltage code 
 assert reset, disable io buffers 
 de-assert reset, enable io buffers 
 update PCMCIA configuration 
 reset was taken away: give card time to initialize properly 
 VCC bits at [3:2][11:10] 
 VS bits at [0:1][3:2] 
 reset bits at [7][15] 
 PB1100PB1500: voltage key bits are at [5:4] 
 determine card type 
 3V card 
 5V card: set nothing 
 treated as unsupported in core 
 if Vcc is not zero, we have applied power to a card 
 DB1300: power always on, but don't tell when no card present 
 reset de-asserted? then we're ready 
	
	  gather resources necessary and optional nice-to-haves to
	  operate a socket:
	  This includes IRQs for Carddetectionejection, the card
	   itself and optional status change detection.
	  Also, the memory areas covered by a socket.  For these
	   we require the real 36bit addresses (see the au1000.h
	   header for more information).
 card: irq assigned to the card itself. 
	 insert: irq which triggers on card insertionejection
	  BIG FAT NOTE: on DB1000110015001550 we pass a GPIO here!
 stschg: irq which trigger on card status change (optional) 
 eject: irq which triggers on ejection (DB1200PB1200 only) 
 36bit PCMCIA Attribute area address 
 36bit PCMCIA Memory area address 
 36bit PCMCIA IO area address 
	
	  PCMCIA client drivers use the inboutb macros to access
	  the IO registers.  Since mips_io_port_base is added
	  to the access address of the mips implementation of
	  inboutb, we need to subtract it here because we want
	  to access the IO or MEM address directly, without
	  going through this "mips_io_port_base" mechanism.
 SPDX-License-Identifier: GPL-2.0-only
  PCMCIA high-level CIS access functions
  The initial developer of the original code is David A. Hinds
  <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds
  are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.
  Copyright (C) 1999	     David A. Hinds
  Copyright (C) 2004-2010   Dominik Brodowski
  pccard_read_tuple() - internal CIS tuple access
  @s:		the struct pcmcia_socket where the card is inserted
  @function:	the device function we loop for
  @code:	which CIS code shall we look for?
  @parse:	buffer where the tuple shall be parsed (or NULL, if no parse)
  pccard_read_tuple() reads out one tuple and attempts to parse it
  pccard_loop_tuple() - loop over tuples in the CIS
  @s:		the struct pcmcia_socket where the card is inserted
  @function:	the device function we loop for
  @code:	which CIS code shall we look for?
  @parse:	buffer where the tuple shall be parsed (or NULL, if no parse)
  @priv_data:	private data to be passed to the loop_tuple function.
  @loop_tuple:	function to call for each CIS entry of type @function. IT
 		gets passed the raw tuple, the paresed tuple (if @parse is
 		set) and @priv_data.
  pccard_loop_tuple() loops over all CIS entries of type @function, and
  calls the @loop_tuple function for each entry. If the call to @loop_tuple
  returns 0, the loop exits. Returns 0 on success or errorcode otherwise.
  pcmcia_io_cfg_data_width() - convert cfgtable to data path width parameter
  pcmcia_do_loop_config() - internal helper for pcmcia_loop_config()
  pcmcia_do_loop_config() is the internal callback for the call from
  pcmcia_loop_config() to pccard_loop_tuple(). Data is transferred
  by a struct pcmcia_cfg_mem.
 default values 
 check for matching Vcc? 
 set Vpp? 
 enable audio? 
 IO window settings? 
			 For multifunction cards, by convention, we
			  configure the network function with window 0,
 MEM window settings? 
 so far, we only set one memory window 
  pcmcia_loop_config() - loop over configuration options
  @p_dev:	the struct pcmcia_device which we need to loop for.
  @conf_check:	function to call for each configuration option.
 		It gets passed the struct pcmcia_device and private data
 		being passed to pcmcia_loop_config()
  @priv_data:	private data to be passed to the conf_check function.
  pcmcia_loop_config() loops over all configuration options, and calls
  the driver-specific conf_check() for each one, checking whether
  it is a valid one. Returns 0 on success or errorcode otherwise.
  pcmcia_do_loop_tuple() - internal helper for pcmcia_loop_config()
  pcmcia_do_loop_tuple() is the internal callback for the call from
  pcmcia_loop_tuple() to pccard_loop_tuple(). Data is transferred
  by a struct pcmcia_cfg_mem.
  pcmcia_loop_tuple() - loop over tuples in the CIS
  @p_dev:	the struct pcmcia_device which we need to loop for.
  @code:	which CIS code shall we look for?
  @priv_data:	private data to be passed to the loop_tuple function.
  @loop_tuple:	function to call for each CIS entry of type @function. IT
 		gets passed the raw tuple and @priv_data.
  pcmcia_loop_tuple() loops over all CIS entries of type @function, and
  calls the @loop_tuple function for each entry. If the call to @loop_tuple
  returns 0, the loop exits. Returns 0 on success or errorcode otherwise.
  pcmcia_do_get_tuple() - internal helper for pcmcia_get_tuple()
  pcmcia_do_get_tuple() is the internal callback for the call from
  pcmcia_get_tuple() to pcmcia_loop_tuple(). As we're only interested in
  the first tuple, return 0 unconditionally. Create a memory buffer large
  enough to hold the content of the tuple, and fill it with the tuple data.
  The caller is responsible to free the buffer.
  pcmcia_get_tuple() - get first tuple from CIS
  @p_dev:	the struct pcmcia_device which we need to loop for.
  @code:	which CIS code shall we look for?
  @buf:        pointer to store the buffer to.
  pcmcia_get_tuple() gets the content of the first CIS entry of type @code.
  It returns the buffer length (or zero). The caller is responsible to free
  the buffer passed in @buf.
  pcmcia_do_get_mac() - internal helper for pcmcia_get_mac_from_cis()
  pcmcia_do_get_mac() is the internal callback for the call from
  pcmcia_get_mac_from_cis() to pcmcia_loop_tuple(). We check whether the
  tuple contains a proper LAN_NODE_ID of length 6, and copy the data
  to struct net_device->dev_addr[i].
  pcmcia_get_mac_from_cis() - read out MAC address from CISTPL_FUNCE
  @p_dev:	the struct pcmcia_device for which we want the address.
  @dev:	a properly prepared struct net_device to store the info to.
  pcmcia_get_mac_from_cis() reads out the hardware MAC address from
  CISTPL_FUNCE and stores it into struct net_device dev->dev_addr which
  must be set up properly by the driver (see examples!).
 SPDX-License-Identifier: GPL-2.0-only
  Driver for Intel I82092AA PCI-PCMCIA bridge.
  (C) 2001 Red Hat, Inc.
  Author: Arjan Van De Ven <arjanv@redhat.com>
  Loosly based on i82365.c from the pcmcia-cs package
 PCI core routines 
 the pccard structure and its functions 
 The card can do up to 4 sockets, allocate a structure for each of them 
		 0 = no socket,
		  1 = empty socket,
		  2 = card but not initialized,
		  3 = operational card
 base io address of the socket 
 The PCI device for the socket 
 shortcut 
 PCI Configuration Control 
 1 = present but empty 
	 Now, specifiy that all interrupts are to be done as PCI interrupts
	  bitmask, one bit per event, 1 = PCI interrupt, 0 = ISA interrupt
 PCI Interrupt Routing Register 
 Register the interrupt handler 
 basic value readwrite functions 
 simple helper functions 
 External clock time, in nanoseconds.  120 ns = 8.33 MHz 
 Interrupt handler functionality 
 Inactive socket, should not happen 
 card status change register 
 no events on this socket 
 For IOCARDS, bit 0 means "read the card" 
 Check for batteryready events 
 no more events to handle 
 socket functions 
 Interface status register 
 Interface Status Register 
 IO cards have a different meaning of bits 0,1 
 Also notice the inverse-logic on the bits 
 IO card 
 non IO card 
 card is write protected 
 card is not busy 
 power is applied to the card 
 First, set the global controller options 
 Values for the IGENC register 
 The reset bit has "inverse" logic 
 IGENC, Interrupt and General Control Register 
 Power registers 
 default: disable resetdrv on resume 
 automatic power mngmnt 
 enable power 
 only write if changed 
 Enable specific interrupt events 
	 now write the value and clear the (probably bogus) pending stuff
	  by doing a dummy read
 Check error conditions 
 Turn off the window before changing anything 
 write the new values 
 Turn the window back on if needed 
 Turn off the window before changing anything 
 write the start address 
 write the stop address 
 card start 
 Enable the window if necessary 
======================================================================
    Common support code for the PCMCIA control functionality of
    integrated SOCs like the SA-11x0 and PXA2xx microprocessors.
    The contents of this file are subject to the Mozilla Public
    License Version 1.1 (the "License"); you may not use this file
    except in compliance with the License. You may obtain a copy of
    the License at http:www.mozilla.orgMPL
    Software distributed under the License is distributed on an "AS
    IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    implied. See the License for the specific language governing
    rights and limitations under the License.
    The initial developer of the original code is John G. Dorsey
    <john+@cs.cmu.edu>.  Portions created by John G. Dorsey are
    Copyright (C) 1999 John G. Dorsey.  All Rights Reserved.
    Alternatively, the contents of this file may be used under the
    terms of the GNU Public License version 2 (the "GPL"), in which
    case the provisions of the GPL are applicable instead of the
    above.  If you wish to allow the use of your version of this file
    only under the terms of the GPL and not to allow others to use
    your version of this file under the MPL, indicate your decision
    by deleting the provisions above and replace them with the notice
    and other provisions required by the GPL.  If you do not delete
    the provisions above, a recipient may use your version of this
    file under either the MPL or the GPL.
 CD is active low by default 
  The CF 3.0 specification says that cards tie VS1 to ground and leave
  VS2 open.  Many implementations do not wire up the VS signals, so we
  provide hard-coded values as per the CF 3.0 spec.
 Make battery voltage state report 'good' 
	 The power status of individual sockets is not available
	  explicitly from the hardware, so we just remember the state
	  and regurgitate it upon request:
  soc_common_pcmcia_config_skt
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Convert PCMCIA socket state to our socket configure structure.
 restore the previous state 
		
		  This really needs a better solution.  The IRQ
		  may or may not be claimed by the driver.
 soc_common_pcmcia_sock_init()
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  (Re-)Initialise the socket, turning on status interrupts
  and PCMCIA bus.  This must wait for power to stabilise
  so that the card status signals report correctly.
  Returns: 0
  soc_common_pcmcia_suspend()
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Remove power on the socket, disable IRQs from the card.
  Turn off status interrupts, and disable the PCMCIA bus.
  Returns: 0
 Let's poll for events in addition to IRQs since IRQ only is unreliable... 
  Service routine for socket driver interrupts (requested by the
  low-level PCMCIA init() operation via soc_common_pcmcia_thread()).
  The actual interrupt-servicing work is performed by
  soc_common_pcmcia_thread(), largely because the Card Services event-
  handling code performs scheduling operations which cannot be
  executed from within an interrupt context.
   Implements the get_status() operation for the in-kernel PCMCIA
  service (formerly SS_GetStatus in Card Services). Essentially just
  fills in bits in `status' according to internal driver state or
  the value of the voltage detect chipselect register.
  As a debugging note, during card startup, the PCMCIA core issues
  three set_socket() commands in a row the first with RESET deasserted,
  the second with RESET asserted, and the last with RESET deasserted
  again. Following the third set_socket(), a get_status() command will
  be issued. The kernel is looking for the SS_READY flag (see
  setup_socket(), reset_socket(), and unreset_socket() in cs.c).
  Returns: 0
  Implements the set_socket() operation for the in-kernel PCMCIA
  service (formerly SS_SetSocket in Card Services). We more or
  less punt all of this work and let the kernel handle the details
  of power configuration, reset, &c. We also record the value of
  `state' in order to regurgitate it to the PCMCIA core later.
  Implements the set_io_map() operation for the in-kernel PCMCIA
  service (formerly SS_SetIOMap in Card Services). We configure
  the map speed as requested, but override the address ranges
  supplied by Card Services.
  Returns: 0 on success, -1 on error
  Implements the set_mem_map() operation for the in-kernel PCMCIA
  service (formerly SS_SetMemMap in Card Services). We configure
  the map speed as requested, but override the address ranges
  supplied by Card Services.
  Returns: 0 on success, -ERRNO on error
  Implements the sysclasspcmcia_socket??status file.
  Returns: the number of characters added to the buffer
 should not be required; violates some lowlevel drivers 
	
	  We initialize default socket timing here, because
	  we are not guaranteed to see a SetIOMap operation at
	  runtime.
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriverspcmciapxa2xx_vpac270.c
  Driver for Voipac PXA270 PCMCIA and CF sockets
  Copyright (C) 2010-2011 Marek Vasut <marek.vasut@gmail.com>
 SPDX-License-Identifier: GPL-2.0
  driverspcmciasa1100_h3600.c
  PCMCIA implementation routines for H3600
 Disable CF bus: 
 Silently ignore Vpp, output enable, speaker enable. 
 Enable CF bus: 
	
	  FIXME:  This doesn't fit well.  We don't have the mechanism in
	  the generic PCMCIA layer to deal with the idea of two sockets
	  on one bus.  We rely on the cs.c behaviour shutting down
	  socket 0 then socket 1.
 hmm, does this suck power? 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriverspcmciapxa2xx_colibri.c
  Driver for Toradex Colibri PXA270 CF socket
  Copyright (C) 2010 Marek Vasut <marek.vasut@gmail.com>
 Contents of this array are configured on-the-fly in init function 
 Colibri PXA270 
 Colibri PXA320 
 SPDX-License-Identifier: GPL-2.0
  linuxdriverspcmciasa1100_neponset.c
  Neponset PCMCIA specific routines
  Neponset uses the Maxim MAX1600, with the following connections:
    MAX1600      Neponset
     A0VCC        SA-1111 GPIO A<1>
     A1VCC        SA-1111 GPIO A<0>
     A0VPP        CPLD NCR A0VPP
     A1VPP        CPLD NCR A1VPP
     B0VCC        SA-1111 GPIO A<2>
     B1VCC        SA-1111 GPIO A<3>
     B0VPP        ground (slot B is CF)
     B1VPP        ground (slot B is CF)
      VX          VCC (5V)
      VY          VCC3_3 (3.3V)
      12INA       12V
      12INB       ground (slot B is CF)
  The MAX1600 CODE pin is tied to ground, placing the device in 
  "Standard Intel code" mode. Refer to the Maxim data sheet for
  the corresponding truth table.
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriverspcmciapxa2xx_trizeps4.c
  TRIZEPS PCMCIA specific routines.
  Author:	Jürgen Schindele
  Created:	20 02, 2006
  Copyright:	Jürgen Schindele
	 we dont have voltagecardready detection
	  so we dont need interrupts for it
 release the reset of this card 
 enable_irq empty 
 disable_irq empty 
 just fill in fix states 
 on ConXS we only have one slot. Second is inactive 
 we do nothing here just check a bit 
 we only have 3.3V 
 on ConXS we only have one slot. Second is inactive 
 default is on 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriverspcmciasa1100_badge4.c
  BadgePAD 4 PCMCIA specific routines
    Christopher Hoover <ch@hpl.hp.com>
  Copyright (C) 2002 Hewlett-Packard Company
  BadgePAD 4 Details
  PCM Vcc:
   PCM Vcc on BadgePAD 4 can be jumpered for 3v3 (short pins 1 and 3
   on JP6) or 5v0 (short pins 3 and 5 on JP6).
  PCM Vpp:
   PCM Vpp on BadgePAD 4 can be jumpered for 12v0 (short pins 4 and 6
   on JP6) or tied to PCM Vcc (short pins 2 and 4 on JP6).  N.B.,
   12v0 operation requires that the power supply actually supply 12v0
   via pin 7 of JP7.
  CF Vcc:
   CF Vcc on BadgePAD 4 can be jumpered either for 3v3 (short pins 1
   and 2 on JP10) or 5v0 (short pins 2 and 3 on JP10).
  Unfortunately there's no way programmatically to determine how a
  given board is jumpered.  This code assumes a default jumpering
  as described below.
  If the defaults aren't correct, you may override them with a pcmv
  setup argument: pcmv=<pcm vcc>,<pcm vpp>,<cf vcc>.  The units are
  tenths of volts; e.g. pcmv=33,120,50 indicates 3v3 PCM Vcc, 12v0
  PCM Vpp, and 5v0 CF Vcc.
 pins 3 and 5 jumpered on JP6 
 pins 2 and 4 jumpered on JP6 
 pins 1 and 2 jumpered on JP10 
 Apply power regardless of the jumpering.
 return -1;
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriverspcmciapxapxa_cm_x270.c
  Compulab Ltd., 2003, 2007, 2008
  Mike Rapoport <mike@compulab.co.il>
======================================================================
    Device driver for Databook TCIC-2 PCMCIA controller
    tcic.c 1.111 20000215 04:13:12
    The contents of this file are subject to the Mozilla Public
    License Version 1.1 (the "License"); you may not use this file
    except in compliance with the License. You may obtain a copy of
    the License at http:www.mozilla.orgMPL
    Software distributed under the License is distributed on an "AS
    IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    implied. See the License for the specific language governing
    rights and limitations under the License.
    The initial developer of the original code is David A. Hinds
    <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds
    are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.
    Alternatively, the contents of this file may be used under the
    terms of the GNU General Public License version 2 (the "GPL"), in which
    case the provisions of the GPL are applicable instead of the
    above.  If you wish to allow the use of your version of this file
    only under the terms of the GPL and not to allow others to use
    your version of this file under the MPL, indicate your decision
    by deleting the provisions above and replace them with the notice
    and other provisions required by the GPL.  If you do not delete
    the provisions above, a recipient may use your version of this
    file under either the MPL or the GPL.
====================================================================
 Parameters that can be set with 'insmod' 
 The base port address of the TCIC-2 chip 
 Specify a socket number to ignore 
 Probe for safe interrupts? 
 Bit map of interrupts to choose from 
 The card status change interrupt -- 0 means autoselect 
 Poll status interval -- 0 means default to interrupt 
 Delay for card status double-checking 
 CCLK external clock time, in nanoseconds.  70 ns = 14.31818 MHz 
====================================================================
====================================================================
 Trick when selecting interrupts: the TCIC sktirq pin is supposed
====================================================================
 Time conversion functions 
====================================================================
 Generate one interrupt 
 Turn off interrupts 
 Don't probe level-triggered interrupts -- reserved for PCI 
 Fallback: just find interrupts that aren't in use 
======================================================================
    See if a card is present, powered up, in IO mode, and already
    bound to a (non-PCMCIA) Linux driver.
    We make an exception for cards that look like serial devices.
 region is busy 
======================================================================
    This returns the revision code for the specified socket.
====================================================================
 See if resetting the controller does any good 
 only 16-bit cards, memory windows must be size-aligned 
 No PCI or CardBus support 
 irq 14, 11, 10, 7, 6, 5, 4, 3 
 4K minimum window size 
 Set up polling 
 Build interrupt mask 
 irq 14, 11, 10, 7, 6, 5, 4, 3 
 Scan interrupts 
 Check for only two interrupts available 
 Avoid irq 12 unless it is explicitly requested 
 jump start interrupt handler, if needed 
 init_tcic 
====================================================================
 exit_tcic 
====================================================================
 Schedule next poll, if needed 
 tcic_interrupt 
 tcic_timer 
====================================================================
 tcic_get_status 
====================================================================
 Some general setup stuff, and configure status interrupt 
 Card status change interrupt mask 
 For the ISA bus, the irq should be active-high totem-pole 
 tcic_set_socket 
====================================================================
 Check to see that len+1 is power of two, etc 
 tcic_set_io_map 
====================================================================
 tcic_set_mem_map 
====================================================================
====================================================================
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2007 PA Semi, Inc
  Maintained by: Olof Johansson <olof@lixom.net>
  Based on driverspcmciaomap_cf.c
 the timer is primarily to kick this socket's pccardd 
 NOTE CF is always 3VCARD 
 "reset" means no power in our case 
 enwr 
 enwr 
 reserve chip-select regions 
 SPDX-License-Identifier: GPL-2.0-only
  PCMCIA 16-bit resource management functions
  The initial developer of the original code is David A. Hinds
  <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds
  are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.
  Copyright (C) 1999	     David A. Hinds
  Copyright (C) 2004-2010   Dominik Brodowski
 Access speed for IO windows 
 if there is no callback, we can assume that everything is OK 
  release_io_space() - release IO ports allocated with alloc_io_space()
  @s: pcmcia socket
  @res: resource to release
 Free the window if no one else is using it 
  alloc_io_space() - allocate IO ports for use by a PCMCIA device
  @s: pcmcia socket
  @res: resource to allocate (begin: begin, end: size)
  @lines: number of IO lines decoded by the PCMCIA card
  Special stuff for managing IO windows, because they are scarce
  pcmcia_access_config() - read or write card configuration registers
  pcmcia_access_config() reads and writes configuration registers in
  attribute memory.  Memory window 0 is reserved for this and the tuple
  reading services. Drivers must use pcmcia_read_config_byte() or
  pcmcia_write_config_byte().
  pcmcia_read_config_byte() - read a byte from a card configuration register
  pcmcia_read_config_byte() reads a byte from a configuration register in
  attribute memory.
  pcmcia_write_config_byte() - write a byte to a card configuration register
  pcmcia_write_config_byte() writes a byte to a configuration register in
  attribute memory.
  pcmcia_map_mem_page() - modify iomem window to point to a different offset
  @p_dev: pcmcia device
  @res: iomem resource already enabled by pcmcia_request_window()
  @offset: card_offset to map
  pcmcia_map_mem_page() modifies what can be read and written by accessing
  an iomem range previously enabled by pcmcia_request_window(), by setting
  the card_offset value to @offset.
  pcmcia_fixup_iowidth() - reduce io width to 8bit
  @p_dev: pcmcia device
  pcmcia_fixup_iowidth() allows a PCMCIA device driver to reduce the
  IO width to 8bit after having called pcmcia_enable_device()
  previously.
  pcmcia_fixup_vpp() - set Vpp to a new voltage level
  @p_dev: pcmcia device
  @new_vpp: new Vpp voltage
  pcmcia_fixup_vpp() allows a PCMCIA device driver to set Vpp to
  a new voltage level between calls to pcmcia_enable_device()
  and pcmcia_disable_device().
  pcmcia_release_configuration() - physically disable a PCMCIA device
  @p_dev: pcmcia device
  pcmcia_release_configuration() is the 1:1 counterpart to
  pcmcia_enable_device(): If a PCMCIA device is no longer used by any
  driver, the Vpp voltage is set to 0, IRQs will no longer be generated,
  and IO ranges will be disabled. As pcmcia_release_io() and
  pcmcia_release_window() still need to be called, device drivers are
  expected to call pcmcia_disable_device() instead.
 Is this correct? 
  pcmcia_release_io() - release IO allocated by a PCMCIA device
  @p_dev: pcmcia device
  pcmcia_release_io() releases the IO ranges allocated by a PCMCIA
  device.  This may be invoked some time after a card ejection has
  already dumped the actual socket configuration, so if the client is
  "stale", we don't bother checking the port ranges against the
  current socket values.
 pcmcia_release_io 
  pcmcia_release_window() - release reserved iomem for PCMCIA devices
  @p_dev: pcmcia device
  @res: iomem resource to release
  pcmcia_release_window() releases &struct resource res which was
  previously reserved by calling pcmcia_request_window().
 Shut down memory window 
 Release system memory 
 pcmcia_release_window 
  pcmcia_enable_device() - set up and activate a PCMCIA device
  @p_dev: the associated PCMCIA device
  pcmcia_enable_device() physically enables a PCMCIA device. It parses
  the flags passed to in @flags and stored in @p_dev->flags and sets up
  the Vpp voltage, enables the speaker line, IO ports and store proper
  values to configuration registers.
 Do power control.  We don't allow changes in Vcc. 
 Pick memory or IO card, DMA mode, interrupt 
 Set up CIS configuration registers 
 Configure IO windows 
 pcmcia_enable_device 
  pcmcia_request_io() - attempt to reserve port ranges for PCMCIA devices
  @p_dev: the associated PCMCIA device
  pcmcia_request_io() attempts to reserve the IO port ranges specified in
  &struct pcmcia_device @p_dev->resource[0] and @p_dev->resource[1]. The
  "start" value is the requested start of the IO port resource; "end"
  reflects the number of ports requested. The number of IO lines requested
  is specified in &struct pcmcia_device @p_dev->io_lines.
 release the previously allocated resource 
 but preserve the settings, for they worked... 
 pcmcia_request_io 
  pcmcia_request_irq() - attempt to request a IRQ for a PCMCIA device
  @p_dev: the associated PCMCIA device
  @handler: IRQ handler to register
  pcmcia_request_irq() is a wrapper around request_irq() which allows
  the PCMCIA core to clean up the registration in pcmcia_disable_device().
  Drivers are free to use request_irq() directly, but then they need to
  call free_irq() themselfves, too. Also, only %IRQF_SHARED capable IRQ
  handlers are allowed.
 mask of IRQs already reserved by other cards, we should avoid using them 
  pcmcia_setup_isa_irq() - determine whether an ISA IRQ can be used
  @p_dev: the associated PCMCIA device
  @type:  IRQ type (flags)
  locking note: must be called with ops_mutex locked.
 marked as available by driver, not blocked by userspace? 
 avoid an IRQ which is already used by another PCMCIA card 
		 register the correct driver, if possible, to check whether
		  registering a dummy handle works, i.e. if the IRQ isn't
 CONFIG_PCMCIA_PROBE 
 CONFIG_PCMCIA_PROBE 
  pcmcia_setup_irq() - determine IRQ to be used for device
  @p_dev: the associated PCMCIA device
  locking note: must be called with ops_mutex locked.
 already assigned? 
 prefer an exclusive ISA irq 
 but accept a shared ISA irq 
 but use the PCI irq otherwise 
  pcmcia_request_window() - attempt to reserve iomem for PCMCIA devices
  @p_dev: the associated PCMCIA device
  @res: &struct resource pointing to p_dev->resource[2..5]
  @speed: access speed
  pcmcia_request_window() attepts to reserve an iomem ranges specified in
  &struct resource @res pointing to one of the entries in
  &struct pcmcia_device @p_dev->resource[2..5]. The "start" value is the
  requested start of the IO mem resource; "end" reflects the size
  requested.
 Window size defaults to smallest available 
 Allocate system memory window 
 Configure the socket controller 
 Return window handle 
 convert to new-style resources 
 pcmcia_request_window 
  pcmcia_disable_device() - disable and clean up a PCMCIA device
  @p_dev: the associated PCMCIA device
  pcmcia_disable_device() is the driver-callable counterpart to
  pcmcia_enable_device(): If a PCMCIA device is no longer used,
  drivers are expected to clean up and disable the device by calling
  this function. Any IO ranges (iomem and ioports) will be released,
  the Vpp voltage will be set to 0, and IRQs will no longer be
  generated -- at least if there is no other card function (of
  multifunction devices) being used.
======================================================================
    Device driver for the PCMCIA control functionality of StrongARM
    SA-1100 microprocessors.
    The contents of this file are subject to the Mozilla Public
    License Version 1.1 (the "License"); you may not use this file
    except in compliance with the License. You may obtain a copy of
    the License at http:www.mozilla.orgMPL
    Software distributed under the License is distributed on an "AS
    IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
    implied. See the License for the specific language governing
    rights and limitations under the License.
    The initial developer of the original code is John G. Dorsey
    <john+@cs.cmu.edu>.  Portions created by John G. Dorsey are
    Copyright (C) 1999 John G. Dorsey.  All Rights Reserved.
    Alternatively, the contents of this file may be used under the
    terms of the GNU Public License version 2 (the "GPL"), in which
    case the provisions of the GPL are applicable instead of the
    above.  If you wish to allow the use of your version of this file
    only under the terms of the GPL and not to allow others to use
    your version of this file under the MPL, indicate your decision
    by deleting the provisions above and replace them with the notice
    and other provisions required by the GPL.  If you do not delete
    the provisions above, a recipient may use your version of this
    file under either the MPL or the GPL.
	
	  Initialise any "on-board" PCMCIA sockets.
 sa11x0_pcmcia_init()
  ^^^^^^^^^^^^^^^^^^^^
  This routine performs low-level PCMCIA initialization and then
  registers this socket driver with Card Services.
  Returns: 0 on success, -ve error code on failure
 sa11x0_pcmcia_exit()
  ^^^^^^^^^^^^^^^^^^^^
  Invokes the low-level kernel service to free IRQs associated with this
  socket controller and reset GPIO edge detection.
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriverspcmciapxa2xx_palmtx.c
  Driver for Palm T|X PCMCIA
  Copyright (C) 2007-2011 Marek Vasut <marek.vasut@gmail.com>
 always inserted 
 SPDX-License-Identifier: GPL-2.0-only
  Toshiba e740 PCMCIA specific routines.
  (c) 2004 Ian Molton <spyro@f2s.com>
 Socket off 
 socket on 
 SPDX-License-Identifier: GPL-2.0-only
  cistpl.c -- 16-bit PCMCIA Card Information Structure parser
  The initial developer of the original code is David A. Hinds
  <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds
  are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.
  (C) 1999		David A. Hinds
 Convert an extended speed byte to a time in nanoseconds 
 Convert a power byte to a current in 0.1 microamps 
 Upper limit on reasonable # of tuples 
 Bits in IRQInfo1 field 
 16-bit CIS? 
  set_cis_map() - map the card memory at "card_offset" into virtual space.
  If flags & MAP_ATTRIB, map the attribute space, otherwise
  map the memory space.
  Must be called with ops_mutex held.
 Bits in attr field 
  pcmcia_read_cis_mem() - low-level function to read CIS memory
  must be called with ops_mutex held
		 Indirect accesses use a bunch of special registers at fixed
  pcmcia_write_cis_mem() - low-level function to write CIS memory
  Probably only useful for writing one-byte registers. Must be called
  with ops_mutex held.
		 Indirect accesses use a bunch of special registers at fixed
  read_cis_cache() - read CIS memory or its associated cache
  This is a wrapper around read_cis_mem, with the same interface,
  but which caches information, for cards whose CIS may not be
  readable all the time.
 Copy data into the cache 
  destroy_cis_cache() - destroy the CIS cache
  @s:		pcmcia_socket for which CIS cache shall be destroyed
  This destroys the CIS cache but keeps any fake CIS alive. Must be
  called with ops_mutex held.
  verify_cis_cache() - does the CIS match what is in the CIS cache?
  pcmcia_replace_cis() - use a replacement CIS instead of the card's CIS
  For really bad cards, we provide a facility for uploading a
  replacement CIS.
 The high-level CIS tuple services 
 Assume presence of a LONGLINK_C to address 0 
 Get indirect link from the MFC tuple 
 Move to the next indirect link 
		 This is ugly, but a common CIS error is to code the long
 Then, we try the wrong spot... 
 End of chain?  Follow long link if possible 
 Is this a link tuple?  Make a note of it 
 Follow all the MFC links 
 Follow exactly one of the links 
 Parsing routines for individual tuples 
 The following routines are all used to parse the nightmarish
  config table entries.
 Process optional features 
 Power options 
 Timing options 
 IO window options 
 Interrupt options 
 Misc features 
  pccard_validate_cis() - check whether card has a sensible CIS
  @s:		the struct pcmcia_socket we are to check
  @info:	returns the number of tuples in the (valid) CIS, or 0
  This tries to determine if a card has a sensible CIS.  In @info, it
  returns the number of tuples in the CIS, or 0 if the CIS looks bad. The
  checks include making sure several critical tuples are present and
  valid; seeing if the total number of tuples is reasonable; and
  looking for tuples that use reserved codes.
  The function returns 0 on success.
 We do not want to validate the CIS cache... 
	 First tuple should be DEVICE; we should really have either that
	 All cards should have a MANFID tuple, andor a VERS_1 or VERS_2
	   tuple, for card identification.  Certain old D-Link and Linksys
 invalidate CIS cache on failure 
		 We differentiate between dev_ok, ident_ok and count
		   failures to allow for an override for anonymous cards
 SPDX-License-Identifier: GPL-2.0-only
  ds.c -- 16-bit PCMCIA core support
  The initial developer of the original code is David A. Hinds
  <dahinds@users.sourceforge.net>.  Portions created by David A. Hinds
  are Copyright (C) 1999 David A. Hinds.  All Rights Reserved.
  (C) 1999		David A. Hinds
  (C) 2003 - 2010	Dominik Brodowski
====================================================================
 Module parameters 
====================================================================
======================================================================
  new_id_store() - add a new PCMCIA device ID to this driver and re-probe devices
  @driver: target device driver
  @buf: buffer for scanning device ID data
  @count: input size
  Adds a new dynamic PCMCIA device ID to this driver,
  and causes the driver to probe for all devices again.
  pcmcia_register_driver - register a PCMCIA driver with the bus core
  @driver: the &driver being registered
  Registers a PCMCIA driver with the PCMCIA bus core.
 initialize common fields 
  pcmcia_unregister_driver - unregister a PCMCIA driver with the bus core
  @driver: the &driver being unregistered
 pcmcia_device handling 
 set up some more device information 
  Removes a PCMCIA card from the device tree and socket list.
 unregister all pcmcia_devices registered with this socket, except leftover 
	 If we're removing the primary module driving a
	  pseudo multi-function card, we need to unbind
	  all devices
 detach the "instance" 
 check for proper unloading 
 references from pcmcia_device_probe 
  pcmcia_device_query -- determine information about a pcmcia device
		 rule of thumb: cards with no FUNCID, but with
		  common memory device geometry information, are
 max of 2 PFC devices 
 max of 4 devices overall 
 by default don't allow DMA 
	
	  p_dev->function_config must be the same for all card functions.
	  Note that this is serialized by ops_mutex, so that only one
	  such struct will be created.
 Add to the list in pcmcia_bus_socket 
 try again, but later... 
 try again, but later... 
		 Set up as an anonymous card. If we don't have anonymous
		   memory support then just error the card as there is no
		   point trying to second guess.
		   Note: some cards have just a device entry, it may be
	 some device information might have changed because of a CIS
	  update or because we can finally read it correctly... so
	 if the CIS changed, we need to check whether the number of
 does this cis override add or remove functions? 
 we need to re-start 
	 If the PCMCIA device consists of two pseudo devices,
	  call pcmcia_device_add() -- which will fail if both
	 we re-scan all devices, not just the ones connected to this
  pcmcia_load_firmware - load CIS from userspace if device-provided is broken
  @dev: the pcmcia device which needs a CIS override
  @filename: requested filename in libfirmware
  This uses the in-kernel firmware loading mechanism to use a "fake CIS" if
  the one provided by the card is broken. The firmware files reside in
  libfirmware in userspace.
 we need to re-start if the number of functions changed 
 update information 
 requery (as number of functions might have changed) 
 !CONFIG_PCMCIA_LOAD_CIS 
		 if this is a pseudo-multi-function device,
		 also, FUNC_ID matching needs to be activated by userspace
		  after it has re-checked that there is no possible module
		  with a prod_idmanf_idcard_id match.
 match dynamic devices first 
 calculate hashes 
 runtime PM support 
 per-device sysfs output 
 calculate hashes 
 PM support, also needed for reset 
 to be on the safe side... 
 first, remove the card 
 now, add the new card 
  NOTE: This is racy. There's no guarantee the card will still be
  physically present, even if the call to this function returns
  non-NULL. Furthermore, the device driver most likely is unbound
  almost immediately, so the timeframe where pcmcia_dev_present
  returns NULL is probably really really small.
 unregister any unbound devices 
 the pcmcia_bus_interface is used to handle pcmcia socket devices 
fs_initcall(init_pcmcia_bus);  one level after subsys_initcall so that
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriverspcmciapxapxa_cm_x2xx.c
  Compulab Ltd., 2003, 2007, 2008
  Mike Rapoport <mike@compulab.co.il>
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriverspcmciapxa2xx_lubbock.c
  Author:	George Davis
  Created:	Jan 10, 2002
  Copyright:	MontaVista Software Inc.
  Originally based upon linuxdriverspcmciasa1100_neponset.c
  Lubbock PCMCIA specific routines.
	 Lubbock uses the Maxim MAX1602, with the following connections:
	 
	  Socket 0 (PCMCIA):
	 	MAX1602	Lubbock		Register
	 	Pin	Signal
	 	-----	-------		----------------------
	 	A0VPP	S0_PWR0		SA-1111 GPIO A<0>
	 	A1VPP	S0_PWR1		SA-1111 GPIO A<1>
	 	A0VCC	S0_PWR2		SA-1111 GPIO A<2>
	 	A1VCC	S0_PWR3		SA-1111 GPIO A<3>
	 	VX	VCC
	 	VY	+3.3V
	 	12IN	+12V
	 	CODE	+3.3V		Cirrus  Code, CODE = High (VY)
	 
	  Socket 1 (CF):
	 	MAX1602	Lubbock		Register
	 	Pin	Signal
	 	-----	-------		----------------------
	 	A0VPP	GND		VPP is not connected
	 	A1VPP	GND		VPP is not connected
	 	A0VCC	S1_PWR0		MISC_WR<14>
	 	A1VCC	S1_PWR1		MISC_WR<15>
	 	VX	VCC
	 	VY	+3.3V
	 	12IN	GND		VPP is not connected
	 	CODE	+3.3V		Cirrus  Code, CODE = High (VY)
	 
		
		  HACK ALERT:
		  We can't sense the voltage properly on Lubbock before
		  actually applying some power to the socket (catch 22).
		  Resense the socket Voltage Sense pins after applying
		  socket power.
		 
		  Note: It takes about 2.5ms for the MAX1602 VCC output
		  to rise.
			
			  Switch to 5V,  Configure socket with 5V voltage
			
			  It takes about 100ms to turn off Vcc.
			
			  We need to hack around the const qualifier as
			  well to keep this ugly workaround localized and
			  not force it to the rest of the code. Barf bags
			  available in the seat pocket in front of you!
 SPDX-License-Identifier: GPL-2.0-only
======================================================================
  Device driver for the PCMCIA control functionality of PXA2xx
  microprocessors.
    (c) Ian Molton (spyro@f2s.com) 2003
    (c) Stefan Eletzhofer (stefan.eletzhofer@inquant.de) 2003,4
    derived from sa11xx_base.c
     Portions created by John G. Dorsey are
     Copyright (C) 1999 John G. Dorsey.
  Personal Computer Memory Card International Association (PCMCIA) sockets
 PCMCIA Partition Space [byte]   
 PCMCIA Space [byte]             
 PCMCIA IO Space [byte]         
 PCMCIA Attribute Space [byte]   
 PCMCIA Memory Space [byte]      
 PCMCIA 0 Space [byte]           
 PCMCIA 0 IO Space [byte]       
 PCMCIA 0 Attribute Space [byte] 
 PCMCIA 0 Memory Space [byte]    
 PCMCIA 1 Space [byte]           
 PCMCIA 1 IO Space [byte]       
 PCMCIA 1 Attribute Space [byte] 
 PCMCIA 1 Memory Space [byte]    
 PCMCIA [0..1]                    \
 PCMCIA IO [0..1]               
 PCMCIA Attribute [0..1]          \
 PCMCIA Memory [0..1]             \
 PCMCIA 0                        
 PCMCIA 0 IO                    
 PCMCIA 0 Attribute              
 PCMCIA 0 Memory                 
 PCMCIA 1                        
 PCMCIA 1 IO                    
 PCMCIA 1 Attribute              
 PCMCIA 1 Memory                 
 This function returns the (approximate) command assertion period, in
  nanoseconds, for a given CPU clock frequency and MCXX_ASST value:
	
	  We have at least one socket, so set MECR:CIT
	  (Card Is There)
 Set MECR:NOS (Number Of Sockets) 
 Provide our PXA2xx specific timing routines. 
 Initialize processor specific parameters 
 SPDX-License-Identifier: GPL-2.0-only
  Sharp SL-C7xx Series PCMCIA routines
  Copyright (c) 2004-2005 Richard Purdie
  Based on Sharp's 2.4 kernel patches and pxa2xx_mainstone.c
 Shared power controls need to be handled carefully 
 card eject 
 keep vs1,vs2 
 power on 
 card detect 
 Enable interrupt 
  Freescale Hypervisor Management Driver
  Copyright (C) 2008-2011 Freescale Semiconductor, Inc.
  Author: Timur Tabi <timur@freescale.com>
  This file is licensed under the terms of the GNU General Public License
  version 2.  This program is licensed "as is" without any warranty of any
  kind, whether express or implied.
  The Freescale hypervisor management driver provides several services to
  drivers and applications related to the Freescale hypervisor:
  1. An ioctl interface for querying and managing partitions.
  2. A file interface to reading incoming doorbells.
  3. An interrupt handler for shutting down the partition upon receiving the
     shutdown doorbell from a manager partition.
  4. A kernel interface for receiving callbacks when a managed partition
     shuts down.
  Ioctl interface for FSL_HV_IOCTL_PARTITION_RESTART
  Restart a running partition
 Get the parameters from the user 
  Ioctl interface for FSL_HV_IOCTL_PARTITION_STATUS
  Query the status of a partition
 Get the parameters from the user 
  Ioctl interface for FSL_HV_IOCTL_PARTITION_START
  Start a stopped partition.
 Get the parameters from the user 
  Ioctl interface for FSL_HV_IOCTL_PARTITION_STOP
  Stop a running partition
 Get the parameters from the user 
  Ioctl interface for FSL_HV_IOCTL_MEMCPY
  The FH_MEMCPY hypercall takes an array of addressaddresssize structures
  to represent the data being copied.  As a convenience to the user, this
  ioctl takes a user-create buffer and a pointer to a guest physically
  contiguous buffer in the remote partition, and creates the
  addressaddresssize array for the hypercall.
 Offset within a page of the local buffer 
 return value from get_user_pages_fast() 
 The next address in the remote buffer 
 The number of bytes left to copy 
 Get the parameters from the user 
	
	  One partition must be local, the other must be remote.  In other
	  words, if source and target are both -1, or are both not -1, then
	  return an error.
	
	  The array of pages returned by get_user_pages_fast() covers only
	  page-aligned memory.  Since the user buffer is probably not
	  page-aligned, we need to handle the discrepancy.
	 
	  We calculate the offset within a page of the SG list, and make
	  adjustments accordingly.  This will result in a page list that looks
	  like this:
	 
	       ----    <-- first page starts before the buffer
	      |    |
	      ||-> ----
	      ||  |    |
	       ----   |    |
	              |    |
	       ----   |    |
	      ||  |    |
	      ||  |    |
	      ||  |    |
	       ----   |    |
	              |    |
	       ----   |    |
	      ||  |    |
	      ||  |    |
	      ||  |    |
	       ----   |    |
	              |    |
	       ----   |    |
	      ||  |    |
	      ||-> ----
	      |    |   <-- last page ends after the buffer
	       ----
	 
	  The distance between the start of the first page and the start of the
	  buffer is lb_offset.  The hashed () areas are the parts of the
	  page list that contain the actual buffer.
	 
	  The advantage of this approach is that the number of pages is
	  equal to the number of entries in the SG list that we give to the
	  hypervisor.
 Allocate the buffers we need 
	
	  'pages' is an array of struct page pointers that's initialized by
	  get_user_pages_fast().
	
	  sg_list is the list of fh_sg_list objects that we pass to the
	  hypervisor.
 Get the physical addresses of the source buffer 
	
	  Build the fh_sg_list[] array.  The first page is special
	  because it's misaligned.
 local to remote 
 remote to local 
  Ioctl interface for FSL_HV_IOCTL_DOORBELL
  Ring a doorbell
 Get the parameters from the user. 
 Get the parameters from the user. 
  Ioctl main entry point
 Linked list of processes that have us open 
 spinlock for db_list 
 The size of the doorbell event queue.  This must be a power of two. 
 Returns the next headtail pointer, wrapping around the queue if necessary 
 Per-open data structure 
 Linked list of ISRs that we registered 
 Per-ISR data structure 
 The doorbell handle 
 The partition handle, if used 
  Add a doorbell to all of the doorbell queues
 Prevent another core from modifying db_list 
			
			  This memory barrier eliminates the need to grab
			  the spinlock for dbq.
  Interrupt handler for all doorbells
  We use the same interrupt handler for all doorbells.  Whenever a doorbell
  is rung, and we receive an interrupt, we just put the handle for that
  doorbell (passed to us as data) into all of the queues.
  State change thread function
  The state change notification arrives in an interrupt, but we can't call
  blocking_notifier_call_chain() in an interrupt handler.  We could call
  atomic_notifier_call_chain(), but that would require the clients' call-back
  function to run in interrupt context.  Since we don't want to impose that
  restriction on the clients, we use a threaded IRQ to process the
  notification in kernel context.
  Interrupt handler for state-change doorbells
 It's still a doorbell, so add it to all the queues. 
 Determine the new state, and if it's stopped, notify the clients. 
  Returns a bitmask indicating whether a read will block
  Return the handles for any incoming doorbells
  If there are doorbell handles in the queue for this open instance, then
  return them to the caller as an array of 32-bit integers.  Otherwise,
  block until there is at least one handle to return.
 for put_user() 
 Make sure we stop when the user buffer is full. 
 Local copy of doorbell queue data 
		
		  If the queue is empty, then either we're done or we need
		  to block.  If the application specified O_NONBLOCK, then
		  we return the appropriate error code.
		
		  Even though we have an smp_wmb() in the ISR, the core
		  might speculatively execute the "dbell = ..." below while
		  it's evaluating the if-statement above.  In that case, the
		  value put into dbell could be stale if the core accepts the
		  speculation. To prevent that, we need a read memory barrier
		  here as well.
		 Copy the data to a temporary local buffer, because
		  we can't call copy_to_user() from inside a spinlock
  Open the driver and prepare for reading doorbells.
  Every time an application opens the driver, we create a doorbell queue
  for that file handle.  This queue is used for any incoming doorbells.
  Close the driver
  Returns the handle of the parent of the given node
  The handle is the value of the 'hv-handle' property
 It's not really possible for this to fail 
	
	  The proper name for the handle property is "hv-handle", but some
	  older versions of the hypervisor used "reg".
 This can happen only if the node is malformed 
  Register a callback for failover events
  This function is called by device drivers to register their callback
  functions for fail-over events.
  Unregister a callback for failover events
  Return TRUE if we're running under FSL hypervisor
  This function checks to see if we're running under the Freescale
  hypervisor, and returns zero if we're not, or non-zero if we are.
  First, it checks if MSR[GS]==1, which means we're running under some
  hypervisor.  Then it checks if there is a hypervisor node in the device
  tree.  Currently, that means there needs to be a node in the root called
  "hypervisor" and which has a property named "fsl,hv-version".
  Freescale hypervisor management driver init
  This function is called when this module is loaded.
  Register ourselves as a miscellaneous driver.  This will register the
  fops structure and create the right sysfs entries for udev.
 The shutdown doorbell gets its own ISR 
			
			  The state change doorbell triggers a notification if
			  the state of the managed partition changes to
			  "stopped". We need a separate interrupt handler for
			  that, and we also need to know the handle of the
			  target partition, not just the handle of the
			  doorbell.
  Freescale hypervisor management driver termination
  This function is called when this driver is unloaded.
 SPDX-License-Identifier: (GPL-2.0 OR CDDL-1.0) 
  vboxguest vmm-req and hgcm-call code, VBoxGuestR0LibHGCMInternal.cpp,
  VBoxGuestR0LibGenericRequest.cpp and RTErrConvertToErrno.cpp in vbox svn.
  Copyright (C) 2006-2016 Oracle Corporation
 Get the pointer to the first parameter of a HGCM call request. 
 The max parameter buffer size for a user request. 
 The max parameter buffer size for a kernel request. 
 This protects vbg_log_buf and serializes VBG_DEBUG_PORT accesses 
 Note this function returns a VBox status code, not a negative errno!! 
	
	  The host changes the request as a result of the outl, make sure
	  the outl and any reads of the req happen in the correct order.
  Preprocesses the HGCM call, validate parameters, alloc bounce buffers and
  figure out how much extra storage we need for page lists.
  Return: 0 or negative errno value.
  @src_parm:         Pointer to source function call parameters
  @parm_count:       Number of function call parameters.
  @bounce_bufs_ret:  Where to return the allocated bouncebuffer array
  @extra:            Where to return the extra request space needed for
                     physical page lists.
  Translates linear address types to page list direction flags.
  Return: page list flags.
  @type:  The type.
  Initializes the call request that we're sending to the host.
  @call:            The call to initialize.
  @client_id:       The client ID of the caller.
  @function:        The function number of the function to call.
  @src_parm:        Pointer to source function call parameters.
  @parm_count:      Number of function call parameters.
  @bounce_bufs:     The bouncebuffer array.
  Tries to cancel a pending HGCM call.
  Return: VBox status code
	
	  We use a pre-allocated request for cancellations, which is
	  protected by cancel_req_mutex. This means that all cancellations
	  get serialized, this should be fine since they should be rare.
  Performs the call and completion wait.
  Return: 0 or negative errno value.
  @gdev:        The VBoxGuest device extension.
  @call:        The call to execute.
  @timeout_ms:  Timeout in ms.
  @leak_it:     Where to return the leak it  free it, indicator.
                Cancellation fun.
	
	  If the call failed, then pretend success. Upper layers will
	  interpret the result code in the packet.
 Host decided to process the request asynchronously, wait for it 
 timeout > 0 means hgcm_req_done has returned true, so success 
 Cancel the request 
	
	  Failed to cancel, this should mean that the cancel has lost the
	  race with normal completion, wait while the host completes it.
 We really should never get here 
 The call has completed normally after all 
  Copies the result of the call back to the caller info structure and user
  buffers.
  Return: 0 or negative errno value.
  @call:            HGCM call request.
  @dst_parm:        Pointer to function call parameters destination.
  @parm_count:      Number of function call parameters.
  @bounce_bufs:     The bouncebuffer array.
 Copy back parameters. 
	
	  Validate and buffer the parameters for the call. This also increases
	  call_size with the amount of extra space needed for page lists.
 Even on error bounce bufs may still have been allocated 
 KISS allocate a temporary request and convert the parameters. 
 Copy back. 
 SPDX-License-Identifier: (GPL-2.0 OR CDDL-1.0) 
  vboxguest core guest-device handling code, VBoxGuest.cpp in upstream svn.
  Copyright (C) 2007-2016 Oracle Corporation
 Get the pointer to the first HGCM parameter. 
 Get the pointer to the first HGCM parameter in a 32-bit request. 
  Reserves memory in which the VMM can relocate any guest mappings
  that are floating around.
  This operation is a little bit tricky since the VMM might not accept
  just any address because of address clashes between the three contexts
  it operates in, so we try several times.
  Failure to reserve the guest mappings is ignored.
  @gdev:		The Guest extension device.
 Query the required space. 
	
	  The VMM will report back if there is nothing it wants to map, like
	  for instance in VT-x and AMD-V mode.
 Add 4M so that we can align the vmap to 4MiB as the host requires. 
	
	  Try several times, the VMM might not accept some addresses because
	  of address clashes between the three contexts.
 Free vmap's from failed attempts. 
 On failure free the dummy-page backing the vmap 
  Undo what vbg_guest_mappings_init did.
  @gdev:		The Guest extension device.
	
	  Tell the host that we're going to free the memory we reserved for
	  it, the free it up. (Leak the memory if anything goes wrong here.)
  Report the guest information to the host.
  Return: 0 or negative errno value.
  @gdev:		The Guest extension device.
	
	  Allocate and fill in the two guest info reports.
	
	  There are two protocols here:
	       1. INFO2 + INFO1. Supported by >=3.2.51.
	       2. INFO1 and optionally INFO2. The old protocol.
	 
	  We try protocol 2 first.  It will fail with VERR_NOT_SUPPORTED
	  if not supported by the VMMDev (message ordering requirement).
  Report the guest driver status to the host.
  Return: 0 or negative errno value.
  @gdev:		The Guest extension device.
  @active:		Flag whether the driver is now active or not.
 Compatibility with older hosts. 
  Inflate the balloon by one chunk. The caller owns the balloon mutex.
  Return: 0 or negative errno value.
  @gdev:		The Guest extension device.
  @chunk_idx:		Index of the chunk.
  Deflate the balloon by one chunk. The caller owns the balloon mutex.
  Return: 0 or negative errno value.
  @gdev:		The Guest extension device.
  @chunk_idx:		Index of the chunk.
  Respond to VMMDEV_EVENT_BALLOON_CHANGE_REQUEST events, query the size
  the host wants the balloon to be and adjust accordingly.
	
	  Setting this bit means that we request the value from the host and
	  change the guest memory balloon according to the returned value.
	
	  The host always returns the same maximum amount of chunks, so
	  we do this once.
 inflate 
 deflate 
  Callback for heartbeat timer.
  Configure the host to check guest's heartbeat
  and get heartbeat interval from the host.
  Return: 0 or negative errno value.
  @gdev:		The Guest extension device.
  @enabled:		Set true to enable guest heartbeat checks on host.
 ns -> ms 
  Initializes the heartbeat timer. This feature may be disabled by the host.
  Return: 0 or negative errno value.
  @gdev:		The Guest extension device.
 Make sure that heartbeat checking is disabled if we fail. 
  Cleanup hearbeat code, stop HB timer and disable host heartbeat checking.
  @gdev:		The Guest extension device.
  Applies a change to the bit usage tracker.
  Return: true if the mask changed, false if not.
  @tracker:		The bit usage tracker.
  @changed:		The bits to change.
  @previous:		The previous value of the bits.
  Init and termination worker for resetting the (host) event filter on the host
  Return: 0 or negative errno value.
  @gdev:		   The Guest extension device.
  @fixed_events:	   Fixed events (init time).
  Changes the event filter mask for the given session.
  This is called in response to VBG_IOCTL_CHANGE_FILTER_MASK as well as to
  do session cleanup. Takes the session mutex.
  Return: 0 or negative errno value.
  @gdev:			The Guest extension device.
  @session:			The session.
  @or_mask:			The events to add.
  @not_mask:			The events to remove.
  @session_termination:	Set if we're called by the session cleanup code.
 				This tweaks the error handling so we perform
 				proper session cleanup even if the host
 				misbehaves.
	
	  Allocate a request buffer before taking the spinlock, when
	  the session is being terminated the requestor is the kernel,
	  as we're cleaning up.
 Ignore allocation failure, we must do session cleanup. 
 Apply the changes to the session mask. 
 If anything actually changed, update the global usage counters. 
 Failed, roll back (unless it's session termination time). 
  Init and termination worker for set guest capabilities to zero on the host.
  Return: 0 or negative errno value.
  @gdev:		The Guest extension device.
  Set guest capabilities on the host.
  Must be called with gdev->session_mutex hold.
  Return: 0 or negative errno value.
  @gdev:			The Guest extension device.
  @session:			The session.
  @session_termination:	Set if we're called by the session cleanup code.
 On termination the requestor is the kernel, as we're cleaning up. 
  Acquire (get exclusive access) guest capabilities for a session.
  Takes the session mutex.
  Return: 0 or negative errno value.
  @gdev:			The Guest extension device.
  @session:			The session.
  @flags:			Flags (VBGL_IOC_AGC_FLAGS_XXX).
  @or_mask:			The capabilities to add.
  @not_mask:			The capabilities to remove.
  @session_termination:	Set if we're called by the session cleanup code.
 				This tweaks the error handling so we perform
 				proper session cleanup even if the host
 				misbehaves.
	
	  Mark any caps in the or_mask as now being in acquire-mode. Note
	  once caps are in acquire_mode they always stay in this mode.
	  This impacts event handling, so we take the event-lock.
 If we only have to switch the caps to acquire mode, we're done. 
 or_mask takes priority over not_mask 
 session->acquired_guest_caps impacts event handling, take the lock 
 Roll back on failure, unless it's session termination time. 
	
	  If we added a capability, check if that means some other thread in
	  our session should be unblocked because there are events pending
	  (the result of vbg_get_allowed_event_mask_for_session() may change).
	 
	  HACK ALERT! When the seamless support capability is added we generate
	 	a seamless change event so that the ring-3 client can sync with
	 	the seamless state.
  Sets the guest capabilities for a session. Takes the session mutex.
  Return: 0 or negative errno value.
  @gdev:			The Guest extension device.
  @session:			The session.
  @or_mask:			The capabilities to add.
  @not_mask:			The capabilities to remove.
  @session_termination:	Set if we're called by the session cleanup code.
 				This tweaks the error handling so we perform
 				proper session cleanup even if the host
 				misbehaves.
 Apply the changes to the session mask. 
 If anything actually changed, update the global usage counters. 
 Roll back on failure, unless it's session termination time. 
  vbg_query_host_version get the host feature mask and version information.
  Return: 0 or negative errno value.
  @gdev:		The Guest extension device.
  Initializes the VBoxGuest device extension when the
  device driver is loaded.
  The native code locates the VMMDev on the PCI bus and retrieve
  the MMIO and IO port ranges, this function will take care of
  mapping the MMIO memory (if present). Upon successful return
  the native code should set up the interrupt handler.
  Return: 0 or negative errno value.
  @gdev:		The Guest extension device.
  @fixed_events:	Events that will be enabled upon init and no client
 			will ever be allowed to mask.
 forces a report 
 forces a report 
 These may fail without requiring the driver init to fail. 
 All Done! 
  Call this on exit to clean-up vboxguest-core managed resources.
  The native code should call this before the driver is loaded,
  but don't call this on shutdown.
  @gdev:		The Guest extension device.
 Clear the host flags (mouse status etc). 
  Creates a VBoxGuest user session.
  vboxguest_linux.c calls this when userspace opens the char-device.
  Return: A pointer to the new session or an ERR_PTR on error.
  @gdev:		The Guest extension device.
  @requestor:		VMMDEV_REQUESTOR_ flags
  Closes a VBoxGuest session.
  @session:		The session to close (and free).
 requestor is kernel here, as we're cleaning up. 
 Must be called with the event_lock held 
 Must be called with the event_lock held 
		
		  Someone else may have consumed the event(s) first, in
		  which case we go back to waiting.
  Checks if the VMM request is allowed in the context of the given session.
  Return: 0 or negative errno value.
  @gdev:		The Guest extension device.
  @session:		The calling session.
  @req:		The request.
 Trusted users apps only. 
 Anyone. 
 Depends on the request parameters... 
 Anything else is not allowed. 
 Find a free place in the sessions clients array and claim it 
 Validate parameter types 
	
	  Validate the client id.
 E2BIG needs to be reported through the hdr.rc field. 
	
	  Under Linux we handle VMMDEV_EVENT_BALLOON_CHANGE_REQUEST
	  events entirely in the kernel, see vbg_core_isr().
  Common IOCtl for user to kernel communication.
  Return: 0 or negative errno value.
  @session:	The client session.
  @req:	The requested function.
  @data:	The io data buffer, minimum size sizeof(struct vbg_ioctl_hdr).
	
	  hdr->version and hdr->size_in  hdr->size_out minimum size are
	  already checked by vbg_misc_device_ioctl().
 For VMMDEV_REQUEST hdr->type != VBG_IOCTL_HDR_TYPE_DEFAULT 
 Fixed size requests. 
 Variable sized requests. 
  Report guest supported mouse-features to the host.
  Return: 0 or negative errno value.
  @gdev:		The Guest extension device.
  @features:		The set of features to report to the host.
 Core interrupt service routine. 
 Get and acknowlegde events. 
 SPDX-License-Identifier: GPL-2.0 
  vboxguest linux pci driver, char-dev and input-device code,
  Copyright (C) 2006-2016 Oracle Corporation
 The device name. 
 The device name for the device node open to everyone. 
 VirtualBox PCI vendor ID. 
 VMMDev PCI card product ID. 
 Mutex protecting the global vbg_gdev pointer used by vbg_getput_gdev. 
 Global vbg_gdev pointer used by vbg_getput_gdev. 
 misc_open sets filp->private_data to our misc device 
 misc_open sets filp->private_data to our misc device 
  Close device.
  Return: 0 on success, negated errno on failure.
  @inode:		Pointer to inode info structure.
  @filp:		Associated file pointer.
  Device IO Control entry point.
  Return: 0 on success, negated errno on failure.
  @filp:		Associated file pointer.
  @req:		The request specified to ioctl().
  @arg:		The argument specified to ioctl().
	
	  IOCTL_VMMDEV_REQUEST needs the buffer to be below 4G to avoid
	  the need for a bounce-buffer and another copy later on.
 The file_operations structures. 
  Called when the input device is first opened.
  Sets up absolute mouse reporting.
  Called if all open handles to the input device are closed.
  Disables absolute reporting.
  Creates the kernel input device.
  Return: 0 on success, negated errno on failure.
  Does the PCI detection and init of the device.
  Return: 0 on success, negated errno on failure.
 Validate MMIO region version and size. 
	
	  Note on success we keep the mutex locked until vbg_put_gdev(),
	  this stops vbg_pci_remove from removing the device from underneath
	  vboxsf. vboxsf will only hold a reference for a short while.
  Callback for mouse events.
  This is called at the end of the ISR, after leaving the event spinlock, if
  VMMDEV_EVENT_MOUSE_POSITION_CHANGED was raised by the host.
  @gdev:		The device extension.
 Report events to the kernel input device 
 SPDX-License-Identifier: GPL-2.0
  Copyright 2020-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
  DOC: Enclave lifetime management driver for Nitro Enclaves (NE).
  Nitro is a hypervisor that has been developed by Amazon.
  NE_CPUS_SIZE - Size for max 128 CPUs, for now, in a cpu-list string, comma
 		  separated. The NE CPU pool includes CPUs from a single NUMA
 		  node.
  NE_EIF_LOAD_OFFSET - The offset where to copy the Enclave Image Format (EIF)
 			image in enclave memory.
  NE_MIN_ENCLAVE_MEM_SIZE - The minimum memory size an enclave can be launched
 			     with.
  NE_MIN_MEM_REGION_SIZE - The minimum size of an enclave memory region.
  NE_PARENT_VM_CID - The CID for the vsock device of the primary  parent VM.
  TODO: Update logic to create new sysfs entries instead of using
  a kernel parameter e.g. if multiple sysfs files needed.
www.kernel.orgdochtmllatestadmin-guidekernel-parameters.html#cpu-lists 
  struct ne_cpu_pool - CPU pool used for Nitro Enclaves.
  @avail_threads_per_core:	Available full CPU cores to be dedicated to
 				enclave(s). The cpumasks from the array, indexed
 				by core id, contain all the threads from the
 				available cores, that are not set for created
 				enclave(s). The full CPU cores are part of the
 				NE CPU pool.
  @mutex:			Mutex for the access to the NE CPU pool.
  @nr_parent_vm_cores :	The size of the available threads per core array.
 				The total number of CPU cores available on the
 				primary  parent VM.
  @nr_threads_per_core:	The number of threads that a full CPU core has.
  @numa_node:			NUMA node of the CPUs in the pool.
  ne_check_enclaves_created() - Verify if at least one enclave has been created.
  @void:	No parameters provided.
  Context: Process context.
  Return:
   True if at least one enclave is created.
   False otherwise.
  ne_setup_cpu_pool() - Set the NE CPU pool after handling sanity checks such
 			 as not sharing CPU cores with the primary  parent VM
 			 or not using CPU 0, which should remain available for
 			 the primary  parent VM. Offline the CPUs from the
 			 pool after the checks passed.
  @ne_cpu_list:	The CPU list used for setting NE CPU pool.
  Context: Process context.
  Return:
   0 on success.
   Negative return value on failure.
	
	  Check if the CPUs are online, to further get info about them
	  e.g. numa node, core id, siblings.
	
	  Check if the CPUs from the NE CPU pool are from the same NUMA node.
	
	  Check if CPU 0 and its siblings are included in the provided CPU pool
	  They should remain available for the primary  parent VM.
	
	  Check if CPU siblings are included in the provided CPU pool. The
	  expectation is that full CPU cores are made available in the CPU pool
	  for enclaves.
 Calculate the number of threads from a full CPU core. 
	
	  Split the NE CPU pool in threads per core to keep the CPU topology
	  after offlining the CPUs.
	
	  CPUs that are given to enclave(s) should not be considered online
	  by Linux anymore, as the hypervisor will degrade them to floating.
	  The physical CPUs (full cores) are carved out of the primary  parent
	  VM and given to the enclave VM. The same number of vCPUs would run
	  on less pCPUs for the primary  parent VM.
	 
	  We offline them here, to not degrade performance and expose correct
	  topology to Linux and user space.
  ne_teardown_cpu_pool() - Online the CPUs from the NE CPU pool and cleanup the
 			    CPU pool.
  @void:	No parameters provided.
  Context: Process context.
  ne_set_kernel_param() - Set the NE CPU pool value via the NE kernel parameter.
  @val:	NE CPU pool string value.
  @kp :	NE kernel parameter associated with the NE CPU pool.
  Context: Process context.
  Return:
   0 on success.
   Negative return value on failure.
  ne_donated_cpu() - Check if the provided CPU is already used by the enclave.
  @ne_enclave :	Private data associated with the current enclave.
  @cpu:		CPU to check if already used.
  Context: Process context. This function is called with the ne_enclave mutex held.
  Return:
   True if the provided CPU is already used by the enclave.
   False otherwise.
  ne_get_unused_core_from_cpu_pool() - Get the id of a full core from the
 					NE CPU pool.
  @void:	No parameters provided.
  Context: Process context. This function is called with the ne_enclave and
 	    ne_cpu_pool mutexes held.
  Return:
   Core id.
   -1 if no CPU core available in the pool.
  ne_set_enclave_threads_per_core() - Set the threads of the provided core in
 				       the enclave data structure.
  @ne_enclave :	Private data associated with the current enclave.
  @core_id:		Core id to get its threads from the NE CPU pool.
  @vcpu_id:		vCPU id part of the provided core.
  Context: Process context. This function is called with the ne_enclave and
 	    ne_cpu_pool mutexes held.
  Return:
   0 on success.
   Negative return value on failure.
  ne_get_cpu_from_cpu_pool() - Get a CPU from the NE CPU pool, either from the
 				remaining sibling(s) of a CPU core or the first
 				sibling of a new CPU core.
  @ne_enclave :	Private data associated with the current enclave.
  @vcpu_id:		vCPU to get from the NE CPU pool.
  Context: Process context. This function is called with the ne_enclave mutex held.
  Return:
   0 on success.
   Negative return value on failure.
	
	  If previously allocated a thread of a core to this enclave, first
	  check remaining sibling(s) for new CPU allocations, so that full
	  CPU cores are used for the enclave.
	
	  If no remaining siblings, get a core from the NE CPU pool and keep
	  track of all the threads in the enclave threads per core data structure.
  ne_get_vcpu_core_from_cpu_pool() - Get from the NE CPU pool the id of the
 				      core associated with the provided vCPU.
  @vcpu_id:	Provided vCPU id to get its associated core id.
  Context: Process context. This function is called with the ne_enclave and
 	    ne_cpu_pool mutexes held.
  Return:
   Core id.
   -1 if the provided vCPU is not in the pool.
  ne_check_cpu_in_cpu_pool() - Check if the given vCPU is in the available CPUs
 				from the pool.
  @ne_enclave :	Private data associated with the current enclave.
  @vcpu_id:		ID of the vCPU to check if available in the NE CPU pool.
  Context: Process context. This function is called with the ne_enclave mutex held.
  Return:
   0 on success.
   Negative return value on failure.
	
	  If previously allocated a thread of a core to this enclave, but not
	  the full core, first check remaining sibling(s).
	
	  If no remaining siblings, get from the NE CPU pool the core
	  associated with the vCPU and keep track of all the threads in the
	  enclave threads per core data structure.
  ne_add_vcpu_ioctl() - Add a vCPU to the slot associated with the current
 			 enclave.
  @ne_enclave :	Private data associated with the current enclave.
  @vcpu_id:		ID of the CPU to be associated with the given slot,
 			apic id on x86.
  Context: Process context. This function is called with the ne_enclave mutex held.
  Return:
   0 on success.
   Negative return value on failure.
  ne_sanity_check_user_mem_region() - Sanity check the user space memory
 				       region received during the set user
 				       memory region ioctl call.
  @ne_enclave :	Private data associated with the current enclave.
  @mem_region :	User space memory region to be sanity checked.
  Context: Process context. This function is called with the ne_enclave mutex held.
  Return:
   0 on success.
   Negative return value on failure.
  ne_sanity_check_user_mem_region_page() - Sanity check a page from the user space
 					    memory region received during the set
 					    user memory region ioctl call.
  @ne_enclave :	Private data associated with the current enclave.
  @mem_region_page:	Page from the user space memory region to be sanity checked.
  Context: Process context. This function is called with the ne_enclave mutex held.
  Return:
   0 on success.
   Negative return value on failure.
  ne_set_user_memory_region_ioctl() - Add user space memory region to the slot
 				       associated with the current enclave.
  @ne_enclave :	Private data associated with the current enclave.
  @mem_region :	User space memory region to be associated with the given slot.
  Context: Process context. This function is called with the ne_enclave mutex held.
  Return:
   0 on success.
   Negative return value on failure.
		
		  TODO: Update once handled non-contiguous memory regions
		  received from user space or contiguous physical memory regions
		  larger than 2 MiB e.g. 8 MiB.
	
	  TODO: Update once handled non-contiguous memory regions received
	  from user space or contiguous physical memory regions larger than
	  2 MiB e.g. 8 MiB.
			
			  Exit here without put pages as memory regions may
			  already been added.
  ne_start_enclave_ioctl() - Trigger enclave start after the enclave resources,
 			      such as memory and CPU, have been set.
  @ne_enclave :		Private data associated with the current enclave.
  @enclave_start_info :	Enclave info that includes enclave cid and flags.
  Context: Process context. This function is called with the ne_enclave mutex held.
  Return:
   0 on success.
   Negative return value on failure.
  ne_enclave_ioctl() - Ioctl function provided by the enclave file.
  @file:	File associated with this ioctl function.
  @cmd:	The command that is set for the ioctl call.
  @arg:	The argument that is provided for the ioctl call.
  Context: Process context.
  Return:
   0 on success.
   Negative return value on failure.
 Use the CPU pool for choosing a CPU for the enclave. 
 Check if the provided vCPU is available in the NE CPU pool. 
		
		  Do not use well-known CIDs - 0, 1, 2 - for enclaves.
		  VMADDR_CID_ANY = -1U
		  VMADDR_CID_HYPERVISOR = 0
		  VMADDR_CID_LOCAL = 1
		  VMADDR_CID_HOST = 2
		  Note: 0 is used as a placeholder to auto-generate an enclave CID.
		  http:man7.orglinuxman-pagesman7vsock.7.html
		
		  Do not use the CID of the primary  parent VM for enclaves.
 64-bit CIDs are not yet supported for the vsock device. 
  ne_enclave_remove_all_mem_region_entries() - Remove all memory region entries
 						from the enclave data structure.
  @ne_enclave :	Private data associated with the current enclave.
  Context: Process context. This function is called with the ne_enclave mutex held.
  ne_enclave_remove_all_vcpu_id_entries() - Remove all vCPU id entries from
 					     the enclave data structure.
  @ne_enclave :	Private data associated with the current enclave.
  Context: Process context. This function is called with the ne_enclave mutex held.
 Update the available NE CPU pool. 
  ne_pci_dev_remove_enclave_entry() - Remove the enclave entry from the data
 				       structure that is part of the NE PCI
 				       device private data.
  @ne_enclave :	Private data associated with the current enclave.
  @ne_pci_dev :	Private data associated with the PCI device.
  Context: Process context. This function is called with the ne_pci_dev enclave
 	    mutex held.
  ne_enclave_release() - Release function provided by the enclave file.
  @inode:	Inode associated with this file release function.
  @file:	File associated with this release function.
  Context: Process context.
  Return:
   0 on success.
   Negative return value on failure.
	
	  Early exit in case there is an error in the enclave creation logic
	  and fput() is called on the cleanup path.
	
	  Acquire the enclave list mutex before the enclave mutex
	  in order to avoid deadlocks with @ref ne_event_work_handler.
  ne_enclave_poll() - Poll functionality used for enclave out-of-band events.
  @file:	File associated with this poll function.
  @wait:	Poll table data structure.
  Context: Process context.
  Return:
   Poll mask.
  ne_create_vm_ioctl() - Alloc slot to be associated with an enclave. Create
 			  enclave file descriptor to be further used for enclave
 			  resources handling e.g. memory regions and CPUs.
  @ne_pci_dev :	Private data associated with the PCI device.
  @slot_uid:		User pointer to store the generated unique slot id
 			associated with an enclave to.
  Context: Process context. This function is called with the ne_pci_dev enclave
 	    mutex held.
  Return:
   Enclave fd on success.
   Negative return value on failure.
		
		  As we're holding the only reference to 'enclave_file', fput()
		  will call ne_enclave_release() which will do a proper cleanup
		  of all so far allocated resources, leaving only the unused fd
		  for us to free.
  ne_ioctl() - Ioctl function provided by the NE misc device.
  @file:	File associated with this ioctl function.
  @cmd:	The command that is set for the ioctl call.
  @arg:	The argument that is provided for the ioctl call.
  Context: Process context.
  Return:
   Ioctl result (e.g. enclave file descriptor) on success.
   Negative return value on failure.
 SPDX-License-Identifier: GPL-2.0
  Copyright 2020-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
  DOC: Nitro Enclaves (NE) PCI device driver.
  NE_DEFAULT_TIMEOUT_MSECS - Default timeout to wait for a reply from
 			      the NE PCI device.
 120 sec 
  ne_submit_request() - Submit command request to the PCI device based on the
 			 command type.
  @pdev:		PCI device to send the command to.
  @cmd_type:		Command type of the request sent to the PCI device.
  @cmd_request:	Command request payload.
  @cmd_request_size:	Size of the command request payload.
  Context: Process context. This function is called with the ne_pci_dev mutex held.
  ne_retrieve_reply() - Retrieve reply from the PCI device.
  @pdev:		PCI device to receive the reply from.
  @cmd_reply:		Command reply payload.
  @cmd_reply_size:	Size of the command reply payload.
  Context: Process context. This function is called with the ne_pci_dev mutex held.
  ne_wait_for_reply() - Wait for a reply of a PCI device command.
  @pdev:	PCI device for which a reply is waited.
  Context: Process context. This function is called with the ne_pci_dev mutex held.
  Return:
   0 on success.
   Negative return value on failure.
	
	  TODO: Update to _interruptible and handle interrupted wait event
	  e.g. -ERESTARTSYS, incoming signals + update timeout, if needed.
	
	  Use this mutex so that the PCI device handles one command request at
	  a time.
  ne_reply_handler() - Interrupt handler for retrieving a reply matching a
 			request sent to the PCI device for enclave lifetime
 			management.
  @irq:	Received interrupt for a reply sent by the PCI device.
  @args:	PCI device private data structure.
  Context: Interrupt context.
  Return:
   IRQ_HANDLED on handled interrupt.
 TODO: Update to _interruptible. 
  ne_event_work_handler() - Work queue handler for notifying enclaves on a
 			     state change received by the event interrupt
 			     handler.
  @work:	Item containing the NE PCI device for which an out-of-band event
 		was issued.
  An out-of-band event is being issued by the Nitro Hypervisor when at least
  one enclave is changing state without client interaction.
  Context: Work queue context.
	
	  Iterate over all enclaves registered for the Nitro Enclaves
	  PCI device and determine for which enclave(s) the out-of-band event
	  is corresponding to.
		
		  Enclaves that were never started cannot receive out-of-band
		  events.
 Notify enclave process that the enclave state changed. 
  ne_event_handler() - Interrupt handler for PCI device out-of-band events.
 			This interrupt does not supply any data in the MMIO
 			region. It notifies a change in the state of any of
 			the launched enclaves.
  @irq:	Received interrupt for an out-of-band event.
  @args:	PCI device private data structure.
  Context: Interrupt context.
  Return:
   IRQ_HANDLED on handled interrupt.
  ne_setup_msix() - Setup MSI-X vectors for the PCI device.
  @pdev:	PCI device to setup the MSI-X for.
  Context: Process context.
  Return:
   0 on success.
   Negative return value on failure.
	
	  This IRQ gets triggered every time the PCI device responds to a
	  command request. The reply is then retrieved, reading from the MMIO
	  space of the PCI device.
	
	  This IRQ gets triggered every time any enclave's state changes. Its
	  handler then scans for the changes and propagates them to the user
	  space.
  ne_teardown_msix() - Teardown MSI-X vectors for the PCI device.
  @pdev:	PCI device to teardown the MSI-X for.
  Context: Process context.
  ne_pci_dev_enable() - Select the PCI device version and enable it.
  @pdev:	PCI device to select version for and then enable.
  Context: Process context.
  Return:
   0 on success.
   Negative return value on failure.
  ne_pci_dev_disable() - Disable the PCI device.
  @pdev:	PCI device to disable.
  Context: Process context.
 10 ms 
	
	  Check for NE_ENABLE_OFF in a loop, to handle cases when the device
	  state is not immediately set to disabled and going through a
	  transitory state of disabling.
  ne_pci_probe() - Probe function for the NE PCI device.
  @pdev:	PCI device to match with the NE PCI driver.
  @id :	PCI device id table associated with the NE PCI driver.
  Context: Process context.
  Return:
   0 on success.
   Negative return value on failure.
  ne_pci_remove() - Remove function for the NE PCI device.
  @pdev:	PCI device associated with the NE PCI driver.
  Context: Process context.
  ne_pci_shutdown() - Shutdown function for the NE PCI device.
  @pdev:	PCI device associated with the NE PCI driver.
  Context: Process context.
  TODO: Add suspend  resume functions for power management w CONFIG_PM, if
  needed.
 NE PCI device driver. 
 SPDX-License-Identifier: GPL-2.0
  ACRN_HSM: Handle IO requests
  Copyright (C) 2020 Intel Corporation. All rights reserved.
  Authors:
 	Jason Chen CJ <jason.cj.chen@intel.com>
 	Fengwei Yin <fengwei.yin@intel.com>
 Add barrier() to make sure the writes are done before completion 
	
	  To fulfill the requirement of real-time in several industry
	  scenarios, like automotive, ACRN can run under the partition mode,
	  in which User VMs and Service VM are bound to dedicated CPU cores.
	  Polling mode of handling the IO request is introduced to achieve a
	  faster IO request handling. In polling mode, the hypervisor polls
	  IO request's completion. Once an IO request is marked as
	  ACRN_IOREQ_STATE_COMPLETE, hypervisor resumes from the polling point
	  to continue the IO request flow. Thus, the completion notification
	  from HSM of IO request is not needed.  Please note,
	  completion_polling needs to be read before the IO request being
	  marked as ACRN_IOREQ_STATE_COMPLETE to avoid racing with the
	  hypervisor.
  acrn_ioreq_range_add() - Add an iorange monitored by an ioreq client
  @client:	The ioreq client
  @type:	Type (ACRN_IOREQ_TYPE_MMIO or ACRN_IOREQ_TYPE_PORTIO)
  @start:	Start address of iorange
  @end:	End address of iorange
  Return: 0 on success, <0 on error
  acrn_ioreq_range_del() - Del an iorange monitored by an ioreq client
  @client:	The ioreq client
  @type:	Type (ACRN_IOREQ_TYPE_MMIO or ACRN_IOREQ_TYPE_PORTIO)
  @start:	Start address of iorange
  @end:	End address of iorange
  ioreq_task() is the execution entity of handler thread of an IO client.
  The handler callback of the IO client is called within the handler thread.
	
	  Lockless access to ioreqs_map is safe, because
	  1) set_bit() and clear_bit() are atomic operations.
	  2) IO requests arrives serialized. The access flow of ioreqs_map is:
	 	set_bit() - in ioreq_work handler
	 	Handler callback handles corresponding IO request
	 	clear_bit() - in handler thread (include ACRN userspace)
	 	Mark corresponding IO request completed
	 	Loop again if a new IO request occurs
  For the non-default IO clients, give them chance to complete the current
  IO requests if there are any. For the default IO client, it is safe to
  clear all pending IO requests because the clearing request is from ACRN
  userspace.
	
	  IO requests of this VM will be completed directly in
	  acrn_ioreq_dispatch if ACRN_VM_FLAG_CLEARING_IOREQ flag is set.
	
	  acrn_ioreq_request_clear is only called in VM reset case. Simply
	  wait 100ms in total for the IO requests' completion.
 Clear all ioreqs belonging to the default client 
 Clear ACRN_VM_FLAG_CLEARING_IOREQ flag after the clearing 
		
		  In the default client, a user space thread waits on the
		  waitqueue. The is_destroying() check is used to notify user
		  space the client is going to be destroyed.
 The low 8-bit of supported pci_reg addr.
 The high 4-bit of supported pci_reg addr 
 Max number of supported functions 
 Max number of supported slots 
 Max number of supported buses 
  A PCI configuration space access via PIO 0xCF8 and 0xCFC normally has two
  following steps:
    1) writes address into 0xCF8 port
    2) accesses data infrom 0xCFC
  This function combines such paired PCI configuration space IO requests into
  one ACRN_IOREQ_TYPE_PCICFG type IO request and continues the processing.
  acrn_ioreq_client_create() - Create an ioreq client
  @vm:		The VM that this client belongs to
  @handler:	The ioreq_handler of ioreq client acrn_hsm will create a kernel
 		thread and call the handler to handle IO requests.
  @priv:	Private data for the handler
  @is_default:	If it is the default client
  @name:	The name of ioreq client
  Return: acrn_ioreq_client pointer on success, NULL on error
  acrn_ioreq_client_destroy() - Destroy an ioreq client
  @client:	The ioreq client
 barrier the read of processed of acrn_io_request 
 Complete the IO request directly in clearing stage 
			
			  Add barrier() to make sure the writes are done
			  before setting ACRN_IOREQ_STATE_PROCESSING
 Flush and unarm the handler to ensure no IO requests pending 
 Schedule after enabling in case other clients miss interrupt 
 Destroy all clients belonging to this VM 
